{
    "cloudhead": "Thanks.\n. Thanks, merged this in.\n. Done. (0.5.2)\n. This is now fixed in 0.5.2.\nThanks\n. Fixed in 0.5.3\n. Can I see the whole file? That looks fine from what I can tell.\n. Thanks\n. This PR addresses too many unrelated concerns.\n. When the in-memory cache was removed, the buffer creation wasn't (https://github.com/cloudhead/node-static/pull/100) \u2014 essentially it's creating a buffer in memory now that isn't needed.\n. https://github.com/cloudhead/node-static/pull/180 \u2014\u00a0can't test it.\n. I don't really have enough context anymore, so hopefully @phstc can look into it.\n. Cool.\n. Pushed 0.7.7. Cheers.\n. Fixed https://github.com/cloudhead/node-static/commit/0b931bf02088013acba47d7fedd255a6f3fb2099\n. I check on it now and then, but it's not actively maintained. If there's a major issue (usually compatibility changes with node), someone will submit a PR and I'll merge it.\n. Hey, sorry about that. I don't know why I closed this issue. I've created the missing tags incase you want to give it a second chance.. \ud83d\udc4d \n. Great!\n. @jozsi thanks, had forgotten one usage of the variable. (I can't test it currently)\n. Thanks for testing it out.\n. Done.\n. Mmm indeed!. Fixed & published.. Thanks, I merged another of these!. Thanks!. Thanks, merged another one of these!. Fixed & published.. Thanks.\n. Thanks, merged this in.\n. Done. (0.5.2)\n. This is now fixed in 0.5.2.\nThanks\n. Fixed in 0.5.3\n. Can I see the whole file? That looks fine from what I can tell.\n. Thanks\n. This PR addresses too many unrelated concerns.\n. When the in-memory cache was removed, the buffer creation wasn't (https://github.com/cloudhead/node-static/pull/100) \u2014 essentially it's creating a buffer in memory now that isn't needed.\n. https://github.com/cloudhead/node-static/pull/180 \u2014\u00a0can't test it.\n. I don't really have enough context anymore, so hopefully @phstc can look into it.\n. Cool.\n. Pushed 0.7.7. Cheers.\n. Fixed https://github.com/cloudhead/node-static/commit/0b931bf02088013acba47d7fedd255a6f3fb2099\n. I check on it now and then, but it's not actively maintained. If there's a major issue (usually compatibility changes with node), someone will submit a PR and I'll merge it.\n. Hey, sorry about that. I don't know why I closed this issue. I've created the missing tags incase you want to give it a second chance.. \ud83d\udc4d \n. Great!\n. @jozsi thanks, had forgotten one usage of the variable. (I can't test it currently)\n. Thanks for testing it out.\n. Done.\n. Mmm indeed!. Fixed & published.. Thanks, I merged another of these!. Thanks!. Thanks, merged another one of these!. Fixed & published.. ",
    "dsamarin": "This fix worked for me too, thanks for investigating, I hope it gets fixed soon\n. This fix worked for me too, thanks for investigating, I hope it gets fixed soon\n. ",
    "vdidenko": "Thank you, your tip helped me.\n. Cat it be an instance of the https://github.com/cloudhead/node-static/issues#issue/4 issue?\n. Thank you, your tip helped me.\n. Cat it be an instance of the https://github.com/cloudhead/node-static/issues#issue/4 issue?\n. ",
    "wachunga": "I believe this has been fixed. See my comment on #13.\n. FYI, this has been fixed somewhere along the way. Using (__dirname + '/public') works for me.\n. I believe this has been fixed. See my comment on #13.\n. FYI, this has been fixed somewhere along the way. Using (__dirname + '/public') works for me.\n. ",
    "phstc": "Hey!\nIt was fixed!\n```\n    # node-static.js\n    if (file) {\n        file = file[0] === '/' ? file : path.join(pathname || '.', file);\n    // Stream the file to the client\n    fs.createReadStream(file, {\n\n```\n. Hey!\nFixed #43.\n. Hey!\nIt was fixed!\n```\n    # node-static.js\n    if (file) {\n        file = file[0] === '/' ? file : path.join(pathname || '.', file);\n    // Stream the file to the client\n    fs.createReadStream(file, {\n\n```\n. @jvonmitchell Unfortunately the builtin cache was temporarily removed due many opened issues related to the high memory usage for this builtin cache. For example for people serving video files etc, node-static was storing all these files in memory no matter the size. The README is outdated, we need to update it (PR?).\nI like the idea of the in memory cache, it is really fast, but maybe we have to create controls based on user's configurations to do not store files larger than SIZE (can be ZERO in order to do not store any file).\n. Could you guys update the pull request? Unfortunately, It can't be automatically merged, since it is too old.\n\nThis pull request cannot be automatically merged.\n\nNow, there is a test suite on the project, could you also add tests?\nCheers\n. > I was able to trigger that, but don't ask me how:\nIt is complicated. hehe \nCould you test it with the new version 0.6.0?\n. Hey @sonnyp! \nI made few comments, could you check them?\n. It needs to be remerged.\n\nThis pull request cannot be automatically merged\n. Hey!\n\nFixed #43.\n. Hey!\nIt was fixed in the issue #57.\n. closed by #92\n. Wasn't clear for me what happened on Windows. Which error was raised? \n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57.\n. Hey! \nThank you.\nIt was fixed in the version 0.6.0. \n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57. \n. Hey!\nIt was fixed in the issue #57.\n. closed by #65\n. On GitHub https://github.com/cloudhead/node-static/pull/56 and https://github.com/cloudhead/node-static/pull/56/ respond equally. \nWith this PR this example shouldn't work. The second one will be considered as a folder and due it doesn't exist, it will send a 301 status.\n. Thank you for your well detailed explanation. :+1: \nIt is true, the GitHub behaviour isn't a good example. We have to follow rfc 2616.\n\nrfc 2616 compliant HTTP static-file server module, with built-in caching.\n\nBefore the merge, could you add tests?\nhttps://github.com/cloudhead/node-static/blob/master/test/integration/node-static-test.js\nCheers\n. @michaelwittig I'm waiting @cloudhead to add me on npm to publish a new version. https://twitter.com/pablocantero/status/218154828394799104\nUntil he adds me you can use\n, \"dependencies\": {\n    \"node-static\": \"git://github.com/cloudhead/node-static.git\"\n  }\n@gabipetrovay why it requires >= 0.5.9?\n. Sorry! Sorry!\nI don't know why, but I was thinking about node version... my mistake! :disappointed:\nThat's right, I already changed the version.\n# node-static.js\n this.version = [0, 6, 0];\nand \n# package.json\n \"version\"       : \"0.6.0\",\nI'm waiting @cloudhead to add me on npm to publish a new version and push these changes.\n. > Let me see if I can just pull down the code and publish. @phstc do you have the ability to add me as a maintainer?\nSorry, I don't. I'm not an admin.\n@indexzero thank you, I published the new version 0.6.0! http://search.npmjs.org/#/node-static\n. Reinstall it, please. I unintentionally removed it when I was cleaning the package.json.\n. I used the same one, I published this new version today, few hours ago. I think that it is not necessary to create a new version. It is too fresh.\n. worked? \n. Hi @pbouzakis, could you re merge it?\n. There is an if before your code.\n```\nnode-static.js 195\n} else if (req.method === 'HEAD') {\n    finish(200, headers);\n```\nIf method==='HEAD' your code will not be reached.\n. rfc2616\n\nThe HEAD method is identical to GET except that the server MUST NOT return a message-body in the response\n\nThank you.\nBut.. what about the headers['Content-Type'], did you remove it?\n. How can I reproduce it? In which scenario the header is sent twice or more?\nI saw a possible problem here\nif (this.cache && (key in exports.store) &&\n    exports.store[key].stat.mtime >= stat.mtime) {\n    res.end(exports.store[key].buffer);\n    finish(status, headers);\nres.end is called before finish, it can call writeHead.\nresponse.writeHead\n\nThis method must only be called once on a message and it must be called before response.end() is called.\n\nIf it is possible, could be better to fix the flow to avoidingwriteHead twice or more instead of masking a possible error.\nWhat do you think about it?\nPS: Call writeHead multiple times do not throw an exception, but only the last one will be sent to the response.\n. Hey guys, could you resync the PR and send it again adding tests? :heart:\n. Closed by #73.\n. Hey @aaronj1335!\nThanks for the PR.\nThis is a really cool feature!\nCould you also update the README, like the PR #53 simple CLI like \"python -m SimpleHTTPServer\".\nCheers,\nPablo Cantero\n. hey @michaelwittig, tks!\nI already changed and accepted your previous PR #66.\n:metal:\n. Hey!\nShould the headers if-none-match and if-modified-since be capitalized (If-None-Match and If-Modified-Since)?\n. I was afraid about it... \nHTTP/1.1 says: \n\nhttp://www.ietf.org/rfc/rfc2616.txt\nField names\n   are case-insensitive.\n\nBut... due Node converts all header names to lowercase:\nbash\ncurl -H 'X-Hello:World' http://127.0.0.1:8080\n``` node\nconsole.log(request.headers['X-Hello']) // returns undefined\nconsole.log(request.headers['x-hello']) // returns World\n```\nI converted all related header names (request.headers[...]) in the code to lowercase.\nTks for the PR. \n. I liked the idea of Transparently compile less, but it seems to be for a specific purpose, I'm not sure if it is a must have feature for all users.\nGuys, what do you think?\n. Hey @aeisenberg, thanks for the report. \nIt was closed by #72.\n. Hey!\nIs application/x-font-woff the proper type? In W3C and Wikipedia seems to be application/font-woff.\nhttp://www.w3.org/TR/WOFF/\n\nType name:\napplication\nSubtype name:\nfont-woff\n\nhttp://en.wikipedia.org/wiki/Web_Open_Font_Format\n\nInternet media type   application/font-woff[1]\n. :smile:\n\nCould you fix the PR?\nCheers\n. @kirkaustin with application/x-font-woff it works on Chrome?\n. @kirkaustin what do you think?\njavascript\nstatic.mime.addContentType('woff', 'application/font-woff');\n. closed by #92\n. You can pass the port number as a parameter.\nExample:\nshell\n$ static . -p 3000 & static . -p 3001 & static . -p 3002\nWhat is the motivation to use multiples ports?\nCheers\n. I don't see it as a must have feature, it seems a corner case. I don't know if everybody needs it. Why not onlystatic -p 8080 as other similar servers?\nIf it is really needed maybe a .static file inside the directory should work, if there is a .static file it will be used as a parameters, so you can configure a different port number for each directory that you need.\n. The cli.js uses node-optimist to retrieve the parameters, have a look at this project to check if it has this feature. :smile: \n. Thanks for the PR! :metal:\nCould you write some tests for the both scenarios?\nCheers\n. Cool. Could you add few tests to test these scenarios? \n. Hey @daxxog, thanks again! :smile: \nI made few comments in the source code, could you check it?\nWhy do we need fileServerExpress, only fileServer doesn't work well for all test scenarios? \n. Hey! The Files Changed seems to be the same. What were the changes?\n. Hey @daxxog, could you update the Pull Request?\nIt can't be merged by GitHub.\n\nThis pull request cannot be automatically merged.\n\nCheers\n. Hi @shaoshuai0102.\nI think that the querystring convention for JSONP is jsonp=? or callback=?, mostly callback, since jQuery uses it.\nI liked the idea, but I think that it is for too specific purpose. Maybe in the test.js instead of \njavascript\n{\n    \"foo\": \"bar\"\n}\nyou should write\njavascript\ncallback({\n    \"foo\": \"bar\"\n});\ndirectly in the file.\n. @cloudhead / @indexzero guys, what is your opinion about this feature?\n. > If this is really not the goal of this project, can you make a plugin mechnism to support this?\nThe plugin mechanism for me is the best choice, but unfortunately I don't have time to go with it now, could you help on it?\n. It will be really helpful, there are other pull requests which will be benefited by this plugin mechanism.\n. Thanks you! :smile:  \nYou can add a test with decodeURI(\"%\").\nReferences:\nhttp://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\nhttp://stackoverflow.com/questions/7449588/why-does-decodeuricomponent-lock-up-my-browser\nhttp://en.wikipedia.org/wiki/Percent_encoding\nCould you add this test?\n. Great! But I think that in this case the status code could be 400 Bad Request, what do you think?\n\n10.4.1 400 Bad Request\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the > request without modifications.\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n. Hey! \nI tested and the tests npm test seems to be passing fine. Which test is failing for you?\nIs request.resume() obligatory in Node 0.10? \nhttp://nodejs.org/api/http.html#http_message_resume\n\nResumes a paused request/response.\n\nI didn't get it. \n. Hi @edpaget, thanks for the explanation. :smile: \nI updated my Node to v0.10.0 and got you PR, for me the testing is freezing on should be listening.\n\nonce an http server is listening with a callback\n   \u2713 should be listening\n\nIs it working for you?\n. Hey @arjansingh, great patch, thank you.\nAre the tests still passing for you?\nFor me they stop at should be listening.\n```\n~/workspace/node-static(master \u2714) npm test\n\nnode-static@0.6.5 test /Users/pablo/workspace/node-static\nvows --spec --isolate\n\n\u2662 node-static\nonce an http server is listening with a callback\n    \u2713 should be listening\n```\nMy node is v0.10.0.\nCheers\n. There are two Pull Requests #87 and #86 fixing it. But I didn't make the tests npm tests work with them yet. I'm waiting the tests to merge them into the master and release a new version.\n. There is an old PR #36 about cache, could you check it and re merge?\n. Hi @thbaja, actually this is an issue, not a PR and the #36 can't be automatically merge anymore. Could you remerge it? :smile: \n. @dubiousdavid You can help testing the PR, mostly can't be automatically merged and others need to be tested, could you help?\n. @dubiousdavid is it working for you? Could you check it? I published a new version this week.\n. Hey guys, I merged the PR #93 and published a new version 0.6.9, could you check it?\nCheers\n. \\o/\n\nThanks everyone.\n\n:+1: \n. It is probably an issue with the in memory cache.\nCould you make me a test? Try to comment the lines 241 - 245 in your node_modules/lib/node-static/node-static.js?\njavascript\n                // store[key] = {\n                //    stat:      stat,\n                //    buffer:    buffer,\n                //    timestamp: Date.now()\n                // };\nThen restart the node-static.\n. - What is the size of the file that you are trying to serve?\n- What is the size of the server memory?\n. @peili could you test the last release of node-static 0.7.0?\n. Hi @thbaja \nI will check in this weekend, sorry for the delay.\n. @thbaja could you also update the README about the mentions to the cache in memory, please?\n. Could you test the version 0.7.0, please?\n. Could you check if the version is 0.7.0, please?\nsh\nstatic -v\nThis new release fixed a similar issue #98 .\n. Tks @valentinvieriu. I bumped the version to 0.7.1 with your fix.\n. It is a static server, it only serves static content. I don't think that POST, DELETE, PATCH, PUT etc are necessary to be handled. Is it something specific that you need to serve?\n. @cloudhead what do you think about handle all http methods in the same way (as a GET/HEAD)? I understand that it can be useful for tests, although we can use other alternatives such as sinon's fake server. My main concern is regarding to \"RFC 2616 compliant HTTP\", node-static doesn't have in-memory cache anymore (the README must be updated), I'm not sure now about other http methods.\n. @aaronj1335 @afc163 hi guys, node-static v0.7.2 accepts any kind of request method. :smile: \n. Great! Could you add a test for these POST requests, please?\nhttps://github.com/cloudhead/node-static/blob/master/test/integration/node-static-test.js\nIt will also fix #106. \ncc/ @afc163 @aaronj1335\n. Thanks for the PR.\nCool :smile: \n. Nice! Added to master. \n. Are you following the steps on the README?\n``` sh\n$ npm install -g node-static\n$ cd directory-to-be-served\n$ static .\n```\nIf you are using it like the example bellow\n``` javascript\n// foo.js\nvar static = require('node-static');\nvar fileServer = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        fileServer.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\nYou should install without the -g option.\nsh\n$ npm install node-static\n$ node foo.js\n?\n. awesome\n. Done! :smile: \nhttps://npmjs.org/package/node-static\n. Good call. I pushed 0.7.3 instead of v0.7.3. \"Renaming\" done. Thanks again ;)\n. Awesome! Added to master. :smile: \n. @shacharz is #129 related? \n. Not with http://www.mysite.com/coolimg.jpg?1 because it's returning 404, but other tests with range worked. There are also some tests covering it.\n. Ok. Good luck! \n. Just realised the domain and resource name \"mysite\", \"coolimg.jpg\"... poor Pablo. hehehe :beers: \n\n. Added to master. Thanks :smile: \n. Thanks, added to master! :smile: \n. Looks good!\n. hey @padapa0406 \nIt should work with .resume() on node 0.10.x:\nhttps://github.com/cloudhead/node-static/pull/97\nAre you getting errors on 0.10.x even with resume? \nThanks\n. @IonicaBizau hmmm makes sense. Is that related to a specific bug? Are the tests still passing? \n. Awesome! Added to master. :smile: \n. BTW node-static doesn't support cache in memory anymore. Many issues/comments asking to remove that, because it was blowing the memory when serving big files. :/\nIf you are going to implement an in memory cache, I would recommend to check the file size before caching it. Add some configurable constraints. \n. Thanks added to master! :smile: \n. @mrfabbri any ideas? #124?\n. @mrfabbri awesome bug tracking. :beers: \n\nAs far as I understand key shouldn't be needed any more (leftover from old caching\n\nIsn't the key == pathname?\njavascript\nkey = pathname || files[0]\ncc/ @IonicaBizau\n. @IonicaBizau :trophy: Added to master and released 0.7.4 with this change.\n. Nice. Added to master. :smile: \nCould you also add an example?\nhttps://github.com/cloudhead/node-static#example-usage\n. @tchakabam sorry for the delay. Thanks for the PR. Added to master :beers: \n. Thank you all :beers:  I've just released the version v0.7.6.\n. @tchakabam could you review it, please? So we can release the version 0.7.4 including our latest PR as well. \n. @IonicaBizau Oops, correct: 0.7.6 :beers: \n. Hey @IonicaBizau what's \"lib/.node-static.js.swp\"? \n. @eush77 could it cause problems for people using it without any arg? Like it will start using their local env PORT instead of 8080?\n. Awesome! Added to master :beers: \n. Thanks! Added to master :beers: \n. Hey!\nIt was fixed!\n```\n    # node-static.js\n    if (file) {\n        file = file[0] === '/' ? file : path.join(pathname || '.', file);\n    // Stream the file to the client\n    fs.createReadStream(file, {\n\n```\n. Hey!\nFixed #43.\n. Hey!\nIt was fixed!\n```\n    # node-static.js\n    if (file) {\n        file = file[0] === '/' ? file : path.join(pathname || '.', file);\n    // Stream the file to the client\n    fs.createReadStream(file, {\n\n```\n. @jvonmitchell Unfortunately the builtin cache was temporarily removed due many opened issues related to the high memory usage for this builtin cache. For example for people serving video files etc, node-static was storing all these files in memory no matter the size. The README is outdated, we need to update it (PR?).\nI like the idea of the in memory cache, it is really fast, but maybe we have to create controls based on user's configurations to do not store files larger than SIZE (can be ZERO in order to do not store any file).\n. Could you guys update the pull request? Unfortunately, It can't be automatically merged, since it is too old.\n\nThis pull request cannot be automatically merged.\n\nNow, there is a test suite on the project, could you also add tests?\nCheers\n. > I was able to trigger that, but don't ask me how:\nIt is complicated. hehe \nCould you test it with the new version 0.6.0?\n. Hey @sonnyp! \nI made few comments, could you check them?\n. It needs to be remerged.\n\nThis pull request cannot be automatically merged\n. Hey!\n\nFixed #43.\n. Hey!\nIt was fixed in the issue #57.\n. closed by #92\n. Wasn't clear for me what happened on Windows. Which error was raised? \n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57.\n. Hey! \nThank you.\nIt was fixed in the version 0.6.0. \n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57.\n. Hey!\nIt was fixed in the issue #57. \n. Hey!\nIt was fixed in the issue #57.\n. closed by #65\n. On GitHub https://github.com/cloudhead/node-static/pull/56 and https://github.com/cloudhead/node-static/pull/56/ respond equally. \nWith this PR this example shouldn't work. The second one will be considered as a folder and due it doesn't exist, it will send a 301 status.\n. Thank you for your well detailed explanation. :+1: \nIt is true, the GitHub behaviour isn't a good example. We have to follow rfc 2616.\n\nrfc 2616 compliant HTTP static-file server module, with built-in caching.\n\nBefore the merge, could you add tests?\nhttps://github.com/cloudhead/node-static/blob/master/test/integration/node-static-test.js\nCheers\n. @michaelwittig I'm waiting @cloudhead to add me on npm to publish a new version. https://twitter.com/pablocantero/status/218154828394799104\nUntil he adds me you can use\n, \"dependencies\": {\n    \"node-static\": \"git://github.com/cloudhead/node-static.git\"\n  }\n@gabipetrovay why it requires >= 0.5.9?\n. Sorry! Sorry!\nI don't know why, but I was thinking about node version... my mistake! :disappointed:\nThat's right, I already changed the version.\n# node-static.js\n this.version = [0, 6, 0];\nand \n# package.json\n \"version\"       : \"0.6.0\",\nI'm waiting @cloudhead to add me on npm to publish a new version and push these changes.\n. > Let me see if I can just pull down the code and publish. @phstc do you have the ability to add me as a maintainer?\nSorry, I don't. I'm not an admin.\n@indexzero thank you, I published the new version 0.6.0! http://search.npmjs.org/#/node-static\n. Reinstall it, please. I unintentionally removed it when I was cleaning the package.json.\n. I used the same one, I published this new version today, few hours ago. I think that it is not necessary to create a new version. It is too fresh.\n. worked? \n. Hi @pbouzakis, could you re merge it?\n. There is an if before your code.\n```\nnode-static.js 195\n} else if (req.method === 'HEAD') {\n    finish(200, headers);\n```\nIf method==='HEAD' your code will not be reached.\n. rfc2616\n\nThe HEAD method is identical to GET except that the server MUST NOT return a message-body in the response\n\nThank you.\nBut.. what about the headers['Content-Type'], did you remove it?\n. How can I reproduce it? In which scenario the header is sent twice or more?\nI saw a possible problem here\nif (this.cache && (key in exports.store) &&\n    exports.store[key].stat.mtime >= stat.mtime) {\n    res.end(exports.store[key].buffer);\n    finish(status, headers);\nres.end is called before finish, it can call writeHead.\nresponse.writeHead\n\nThis method must only be called once on a message and it must be called before response.end() is called.\n\nIf it is possible, could be better to fix the flow to avoidingwriteHead twice or more instead of masking a possible error.\nWhat do you think about it?\nPS: Call writeHead multiple times do not throw an exception, but only the last one will be sent to the response.\n. Hey guys, could you resync the PR and send it again adding tests? :heart:\n. Closed by #73.\n. Hey @aaronj1335!\nThanks for the PR.\nThis is a really cool feature!\nCould you also update the README, like the PR #53 simple CLI like \"python -m SimpleHTTPServer\".\nCheers,\nPablo Cantero\n. hey @michaelwittig, tks!\nI already changed and accepted your previous PR #66.\n:metal:\n. Hey!\nShould the headers if-none-match and if-modified-since be capitalized (If-None-Match and If-Modified-Since)?\n. I was afraid about it... \nHTTP/1.1 says: \n\nhttp://www.ietf.org/rfc/rfc2616.txt\nField names\n   are case-insensitive.\n\nBut... due Node converts all header names to lowercase:\nbash\ncurl -H 'X-Hello:World' http://127.0.0.1:8080\n``` node\nconsole.log(request.headers['X-Hello']) // returns undefined\nconsole.log(request.headers['x-hello']) // returns World\n```\nI converted all related header names (request.headers[...]) in the code to lowercase.\nTks for the PR. \n. I liked the idea of Transparently compile less, but it seems to be for a specific purpose, I'm not sure if it is a must have feature for all users.\nGuys, what do you think?\n. Hey @aeisenberg, thanks for the report. \nIt was closed by #72.\n. Hey!\nIs application/x-font-woff the proper type? In W3C and Wikipedia seems to be application/font-woff.\nhttp://www.w3.org/TR/WOFF/\n\nType name:\napplication\nSubtype name:\nfont-woff\n\nhttp://en.wikipedia.org/wiki/Web_Open_Font_Format\n\nInternet media type   application/font-woff[1]\n. :smile:\n\nCould you fix the PR?\nCheers\n. @kirkaustin with application/x-font-woff it works on Chrome?\n. @kirkaustin what do you think?\njavascript\nstatic.mime.addContentType('woff', 'application/font-woff');\n. closed by #92\n. You can pass the port number as a parameter.\nExample:\nshell\n$ static . -p 3000 & static . -p 3001 & static . -p 3002\nWhat is the motivation to use multiples ports?\nCheers\n. I don't see it as a must have feature, it seems a corner case. I don't know if everybody needs it. Why not onlystatic -p 8080 as other similar servers?\nIf it is really needed maybe a .static file inside the directory should work, if there is a .static file it will be used as a parameters, so you can configure a different port number for each directory that you need.\n. The cli.js uses node-optimist to retrieve the parameters, have a look at this project to check if it has this feature. :smile: \n. Thanks for the PR! :metal:\nCould you write some tests for the both scenarios?\nCheers\n. Cool. Could you add few tests to test these scenarios? \n. Hey @daxxog, thanks again! :smile: \nI made few comments in the source code, could you check it?\nWhy do we need fileServerExpress, only fileServer doesn't work well for all test scenarios? \n. Hey! The Files Changed seems to be the same. What were the changes?\n. Hey @daxxog, could you update the Pull Request?\nIt can't be merged by GitHub.\n\nThis pull request cannot be automatically merged.\n\nCheers\n. Hi @shaoshuai0102.\nI think that the querystring convention for JSONP is jsonp=? or callback=?, mostly callback, since jQuery uses it.\nI liked the idea, but I think that it is for too specific purpose. Maybe in the test.js instead of \njavascript\n{\n    \"foo\": \"bar\"\n}\nyou should write\njavascript\ncallback({\n    \"foo\": \"bar\"\n});\ndirectly in the file.\n. @cloudhead / @indexzero guys, what is your opinion about this feature?\n. > If this is really not the goal of this project, can you make a plugin mechnism to support this?\nThe plugin mechanism for me is the best choice, but unfortunately I don't have time to go with it now, could you help on it?\n. It will be really helpful, there are other pull requests which will be benefited by this plugin mechanism.\n. Thanks you! :smile:  \nYou can add a test with decodeURI(\"%\").\nReferences:\nhttp://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\nhttp://stackoverflow.com/questions/7449588/why-does-decodeuricomponent-lock-up-my-browser\nhttp://en.wikipedia.org/wiki/Percent_encoding\nCould you add this test?\n. Great! But I think that in this case the status code could be 400 Bad Request, what do you think?\n\n10.4.1 400 Bad Request\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the > request without modifications.\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n. Hey! \nI tested and the tests npm test seems to be passing fine. Which test is failing for you?\nIs request.resume() obligatory in Node 0.10? \nhttp://nodejs.org/api/http.html#http_message_resume\n\nResumes a paused request/response.\n\nI didn't get it. \n. Hi @edpaget, thanks for the explanation. :smile: \nI updated my Node to v0.10.0 and got you PR, for me the testing is freezing on should be listening.\n\nonce an http server is listening with a callback\n   \u2713 should be listening\n\nIs it working for you?\n. Hey @arjansingh, great patch, thank you.\nAre the tests still passing for you?\nFor me they stop at should be listening.\n```\n~/workspace/node-static(master \u2714) npm test\n\nnode-static@0.6.5 test /Users/pablo/workspace/node-static\nvows --spec --isolate\n\n\u2662 node-static\nonce an http server is listening with a callback\n    \u2713 should be listening\n```\nMy node is v0.10.0.\nCheers\n. There are two Pull Requests #87 and #86 fixing it. But I didn't make the tests npm tests work with them yet. I'm waiting the tests to merge them into the master and release a new version.\n. There is an old PR #36 about cache, could you check it and re merge?\n. Hi @thbaja, actually this is an issue, not a PR and the #36 can't be automatically merge anymore. Could you remerge it? :smile: \n. @dubiousdavid You can help testing the PR, mostly can't be automatically merged and others need to be tested, could you help?\n. @dubiousdavid is it working for you? Could you check it? I published a new version this week.\n. Hey guys, I merged the PR #93 and published a new version 0.6.9, could you check it?\nCheers\n. \\o/\n\nThanks everyone.\n\n:+1: \n. It is probably an issue with the in memory cache.\nCould you make me a test? Try to comment the lines 241 - 245 in your node_modules/lib/node-static/node-static.js?\njavascript\n                // store[key] = {\n                //    stat:      stat,\n                //    buffer:    buffer,\n                //    timestamp: Date.now()\n                // };\nThen restart the node-static.\n. - What is the size of the file that you are trying to serve?\n- What is the size of the server memory?\n. @peili could you test the last release of node-static 0.7.0?\n. Hi @thbaja \nI will check in this weekend, sorry for the delay.\n. @thbaja could you also update the README about the mentions to the cache in memory, please?\n. Could you test the version 0.7.0, please?\n. Could you check if the version is 0.7.0, please?\nsh\nstatic -v\nThis new release fixed a similar issue #98 .\n. Tks @valentinvieriu. I bumped the version to 0.7.1 with your fix.\n. It is a static server, it only serves static content. I don't think that POST, DELETE, PATCH, PUT etc are necessary to be handled. Is it something specific that you need to serve?\n. @cloudhead what do you think about handle all http methods in the same way (as a GET/HEAD)? I understand that it can be useful for tests, although we can use other alternatives such as sinon's fake server. My main concern is regarding to \"RFC 2616 compliant HTTP\", node-static doesn't have in-memory cache anymore (the README must be updated), I'm not sure now about other http methods.\n. @aaronj1335 @afc163 hi guys, node-static v0.7.2 accepts any kind of request method. :smile: \n. Great! Could you add a test for these POST requests, please?\nhttps://github.com/cloudhead/node-static/blob/master/test/integration/node-static-test.js\nIt will also fix #106. \ncc/ @afc163 @aaronj1335\n. Thanks for the PR.\nCool :smile: \n. Nice! Added to master. \n. Are you following the steps on the README?\n``` sh\n$ npm install -g node-static\n$ cd directory-to-be-served\n$ static .\n```\nIf you are using it like the example bellow\n``` javascript\n// foo.js\nvar static = require('node-static');\nvar fileServer = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        fileServer.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\nYou should install without the -g option.\nsh\n$ npm install node-static\n$ node foo.js\n?\n. awesome\n. Done! :smile: \nhttps://npmjs.org/package/node-static\n. Good call. I pushed 0.7.3 instead of v0.7.3. \"Renaming\" done. Thanks again ;)\n. Awesome! Added to master. :smile: \n. @shacharz is #129 related? \n. Not with http://www.mysite.com/coolimg.jpg?1 because it's returning 404, but other tests with range worked. There are also some tests covering it.\n. Ok. Good luck! \n. Just realised the domain and resource name \"mysite\", \"coolimg.jpg\"... poor Pablo. hehehe :beers: \n\n. Added to master. Thanks :smile: \n. Thanks, added to master! :smile: \n. Looks good!\n. hey @padapa0406 \nIt should work with .resume() on node 0.10.x:\nhttps://github.com/cloudhead/node-static/pull/97\nAre you getting errors on 0.10.x even with resume? \nThanks\n. @IonicaBizau hmmm makes sense. Is that related to a specific bug? Are the tests still passing? \n. Awesome! Added to master. :smile: \n. BTW node-static doesn't support cache in memory anymore. Many issues/comments asking to remove that, because it was blowing the memory when serving big files. :/\nIf you are going to implement an in memory cache, I would recommend to check the file size before caching it. Add some configurable constraints. \n. Thanks added to master! :smile: \n. @mrfabbri any ideas? #124?\n. @mrfabbri awesome bug tracking. :beers: \n\nAs far as I understand key shouldn't be needed any more (leftover from old caching\n\nIsn't the key == pathname?\njavascript\nkey = pathname || files[0]\ncc/ @IonicaBizau\n. @IonicaBizau :trophy: Added to master and released 0.7.4 with this change.\n. Nice. Added to master. :smile: \nCould you also add an example?\nhttps://github.com/cloudhead/node-static#example-usage\n. @tchakabam sorry for the delay. Thanks for the PR. Added to master :beers: \n. Thank you all :beers:  I've just released the version v0.7.6.\n. @tchakabam could you review it, please? So we can release the version 0.7.4 including our latest PR as well. \n. @IonicaBizau Oops, correct: 0.7.6 :beers: \n. Hey @IonicaBizau what's \"lib/.node-static.js.swp\"? \n. @eush77 could it cause problems for people using it without any arg? Like it will start using their local env PORT instead of 8080?\n. Awesome! Added to master :beers: \n. Thanks! Added to master :beers: \n. ",
    "saimonmoore": "jeez...only just noticed the first issue. Should teach me a lesson. Sorry. Closing now..\n. jeez...only just noticed the first issue. Should teach me a lesson. Sorry. Closing now..\n. ",
    "yrn1": "Seen when calling serveFile('/', 200, {}, req, res)\n. Yes, it is. The proposed fix in https://github.com/cloudhead/node-static/issues#issue/4 is also valid, but only for that case (wrong path). In general, you should never call finish(null, ...), because that will always result in the 'TypeError: Cannot call method 'toString' of null' error.\n. Seen when calling serveFile('/', 200, {}, req, res)\n. Yes, it is. The proposed fix in https://github.com/cloudhead/node-static/issues#issue/4 is also valid, but only for that case (wrong path). In general, you should never call finish(null, ...), because that will always result in the 'TypeError: Cannot call method 'toString' of null' error.\n. ",
    "metaleap": "Having the same issue. This generally happens if the path is not a file but a directory. Now we COULD check for this ourselves before calling serveFile(), however, that isn't the issue. This exception crashes node since it is uncaught and cannot be caught. Now say you have a live site running and it gets crawled? /files/foo/exist.txt may work fine so the crawler decides to fetch /files/foo/ , thanks to your custom /files/ handler node-static will serve this too and crash node because it is not a file.\nSo as I said we COULD check for this (dir or file?) ourselves but I actually tested this to see how node-static performs in case there is ANY error accessing the file. This could be wrong / changed file permissions or any other file access error. It DOES jump into my \"error\" listener, so far so good. I do the \nresp.writeHead(500, { 'Content-Type': 'text/plain' });\nresp.end(JSON.stringify(err));\nthing and it gets executed. STILL what happens next is this:\nhttp.js:832\n  var statusLine = 'HTTP/1.1 ' + statusCode.toString() + ' ' +\n                                            ^\nTypeError: Cannot call method 'toString' of null\n    at ServerResponse.writeHead (http.js:832:45)\n    at [object Object].finish (/home/foo/bar/node_modules/node-static.js:108:17)\n    at /home/foo/bar/node_modules/node-static.js:87:18\n    at /home/foo/bar/node_modules/node-static.js:215:33\n    at [object Object]. (/home/foo/bar/node_modules/node-static.js:245:17)\n    at [object Object].emit (events.js:64:17)\n    at afterRead (fs.js:858:12)\n@cloudhead I have no problem fixing this myself for my local 0.5.3 for now but will this be fixed \"officially\" for 0.5.4 too? I'm sure it's just a one-line check-for-null/undefined... fingers crossed.\n. Having the same issue. This generally happens if the path is not a file but a directory. Now we COULD check for this ourselves before calling serveFile(), however, that isn't the issue. This exception crashes node since it is uncaught and cannot be caught. Now say you have a live site running and it gets crawled? /files/foo/exist.txt may work fine so the crawler decides to fetch /files/foo/ , thanks to your custom /files/ handler node-static will serve this too and crash node because it is not a file.\nSo as I said we COULD check for this (dir or file?) ourselves but I actually tested this to see how node-static performs in case there is ANY error accessing the file. This could be wrong / changed file permissions or any other file access error. It DOES jump into my \"error\" listener, so far so good. I do the \nresp.writeHead(500, { 'Content-Type': 'text/plain' });\nresp.end(JSON.stringify(err));\nthing and it gets executed. STILL what happens next is this:\nhttp.js:832\n  var statusLine = 'HTTP/1.1 ' + statusCode.toString() + ' ' +\n                                            ^\nTypeError: Cannot call method 'toString' of null\n    at ServerResponse.writeHead (http.js:832:45)\n    at [object Object].finish (/home/foo/bar/node_modules/node-static.js:108:17)\n    at /home/foo/bar/node_modules/node-static.js:87:18\n    at /home/foo/bar/node_modules/node-static.js:215:33\n    at [object Object]. (/home/foo/bar/node_modules/node-static.js:245:17)\n    at [object Object].emit (events.js:64:17)\n    at afterRead (fs.js:858:12)\n@cloudhead I have no problem fixing this myself for my local 0.5.3 for now but will this be fixed \"officially\" for 0.5.4 too? I'm sure it's just a one-line check-for-null/undefined... fingers crossed.\n. ",
    "DTrejo": "Try substituting this line: \nfileServer.serveFile('/error.html', 404, {}, request, response);\n. duplicate issue, oops.\n. Try substituting this line: \nfileServer.serveFile('/error.html', 404, {}, request, response);\n. duplicate issue, oops.\n. ",
    "laduke": "My syntax highlighter seems to think that \"static\" is a reserved word. \n. My syntax highlighter seems to think that \"static\" is a reserved word. \n. ",
    "thejoshwolfe": "Issue #43 has a pull request to fix the README.\n. I just ran into this. Was very annoying to debug. This seems really easy to fix. Would the devs like a pull request?\nEdit: Issue #43 has a pull request to fix this.\n. Dupe of #37.\n. Issue #43 has a pull request to fix the README.\n. I just ran into this. Was very annoying to debug. This seems really easy to fix. Would the devs like a pull request?\nEdit: Issue #43 has a pull request to fix this.\n. Dupe of #37.\n. ",
    "jups23": "It doesn't work for me too with node 0.2.3. The error in more detail: I try to serve an html document an it throws the error: \nnode-static/lib/node-static.js:239\n                chunk.copy (buffer, offset, 0);\n                      ^\nTypeError: Object <!DOCTYPE html>\nhas no method 'copy'\nthen the content of the html follows. After it:\nat [object Object]. (/vendor/node-static/lib/node-static.js:239:23)\n    at [object Object].emit (events:27:15)\n    at [object Object]._emitData (fs:738:29)\n    at afterRead (fs:719:10)\n    at node.js:768:9\nI don't know how to fix that problem. It would be cool if you repair it or tell me how to bypass it. \n. We can solve the problem with replacing line 239 with \nbuffer.write(chunk, offset, 'binary');\nas mentioned in http://github.com/cloudhead/node-static/issues#issue/9.\nThanks to indexzero\n. It doesn't work for me too with node 0.2.3. The error in more detail: I try to serve an html document an it throws the error: \nnode-static/lib/node-static.js:239\n                chunk.copy (buffer, offset, 0);\n                      ^\nTypeError: Object <!DOCTYPE html>\nhas no method 'copy'\nthen the content of the html follows. After it:\nat [object Object]. (/vendor/node-static/lib/node-static.js:239:23)\n    at [object Object].emit (events:27:15)\n    at [object Object]._emitData (fs:738:29)\n    at afterRead (fs:719:10)\n    at node.js:768:9\nI don't know how to fix that problem. It would be cool if you repair it or tell me how to bypass it. \n. We can solve the problem with replacing line 239 with \nbuffer.write(chunk, offset, 'binary');\nas mentioned in http://github.com/cloudhead/node-static/issues#issue/9.\nThanks to indexzero\n. ",
    "gijsk": "@cloudhead can you consider pulling this in? The range/resume support in particular is very useful. Where I work, we're running into issues in using HTML5 audio because webkit does range requests for the files, and if they do not get handled 'properly', will only play a file once. (ref: http://stackoverflow.com/questions/1995589/html5-audio-safari-live-broadcast-vs-not )\n. @nikhilm: seems your patches break the caching. It uses the pathname as a key for the cache, and your patches split out the filename. So multiple files served from the same directory get in each other's way in the cache.\n. @cloudhead can you consider pulling this in? The range/resume support in particular is very useful. Where I work, we're running into issues in using HTML5 audio because webkit does range requests for the files, and if they do not get handled 'properly', will only play a file once. (ref: http://stackoverflow.com/questions/1995589/html5-audio-safari-live-broadcast-vs-not )\n. @nikhilm: seems your patches break the caching. It uses the pathname as a key for the cache, and your patches split out the filename. So multiple files served from the same directory get in each other's way in the cache.\n. ",
    "Marak": "thanks alexis!\n. +1 for this feature\n. Hrmm, issue comments seem to not be working right today...\n@broofa Got this working in https://github.com/cloudhead/node-static/pull/22\n. We've been using this functionality in https://github.com/nodejitsu/http-server for a little while now with success. \nThe first pull request had a minor bug in it, but it's been amended and is good to go now. \n. I can't comment on how node deals with caching, but I can tell you from experience that using a basic in memory cache for reading and serving small files in node will yield a vast improvement in performance.\n. Hrmm? If you disagree, start a server up with cache and without cache and compare your average response times. I'm not going to take my time to make a benchmark for you. \nI'd be interested to see comprehensive data to make a more informed decision, but from my personal node experience the in-memory cache is faster so we'll continue to use it for our production facing node-static sites. \nFurthermore, I've spoken with our resident kernel hacker and he's telling me your understanding of caching is somewhat incorrect. I wish I could comment more, but I'm no systems expert. I would suggest posting your issue to the node.js mailing list as a more general node.js development question since this issue isn't just specific to node-static. You'll get a much better answer I'm sure.\n. I don't think anyone really cares that much. You should post this to the node mailing list to get a better response.\n. Any comments on this one @cloudhead? \nCould I get a go or no go on this feature? I'd be glad to rewrite it if you hate my implementation, but if you don't want this feature in the lib I'm gonna have to continue to vendor a shit ton of node-statics, and I'm just sooooo lazy.\n:-D\n. Ping\n. thanks alexis!\n. +1 for this feature\n. Hrmm, issue comments seem to not be working right today...\n@broofa Got this working in https://github.com/cloudhead/node-static/pull/22\n. We've been using this functionality in https://github.com/nodejitsu/http-server for a little while now with success. \nThe first pull request had a minor bug in it, but it's been amended and is good to go now. \n. I can't comment on how node deals with caching, but I can tell you from experience that using a basic in memory cache for reading and serving small files in node will yield a vast improvement in performance.\n. Hrmm? If you disagree, start a server up with cache and without cache and compare your average response times. I'm not going to take my time to make a benchmark for you. \nI'd be interested to see comprehensive data to make a more informed decision, but from my personal node experience the in-memory cache is faster so we'll continue to use it for our production facing node-static sites. \nFurthermore, I've spoken with our resident kernel hacker and he's telling me your understanding of caching is somewhat incorrect. I wish I could comment more, but I'm no systems expert. I would suggest posting your issue to the node.js mailing list as a more general node.js development question since this issue isn't just specific to node-static. You'll get a much better answer I'm sure.\n. I don't think anyone really cares that much. You should post this to the node mailing list to get a better response.\n. Any comments on this one @cloudhead? \nCould I get a go or no go on this feature? I'd be glad to rewrite it if you hate my implementation, but if you don't want this feature in the lib I'm gonna have to continue to vendor a shit ton of node-statics, and I'm just sooooo lazy.\n:-D\n. Ping\n. ",
    "maccman": "This would be very useful for Juggernaut too - http://github.com/maccman/juggernaut\n. Any progress on this?\n. This would be very useful for Juggernaut too - http://github.com/maccman/juggernaut\n. Any progress on this?\n. ",
    "terite": "@cloudhead I'd love to see this merged. I'm using maccman's repo because of this issue.\n. @cloudhead I'd love to see this merged. I'm using maccman's repo because of this issue.\n. ",
    "cimnine": "As a workaround you could process.chdir() to the directory you want after loading all the libs and dependencies.\nYou could even automate this by substringing process.cwd() from __filename.\nCheers, Chris\n. Hey otterley..\nThis is an open project. Why don't you just fork 'node-static' and implement a cache on/off switch and pull it back?\nOr bether, implement the missing ceiling of the cache size or an eviction policy.\nYou seem to have the knowledge, and that way we would all benefit.\nBecause IMHO this is what open source, especially on GitHub, is all about.\nCheers, Chris\n. .htaccess is for apache, not for node.js, nor for node-static.\nYou would have to implement gzip compression in node-static. Or find someone who does it for you.\nMaybe you could compress the data after calling node-static with one of those node compression libraries available.\nTell us if your were successful.\nPS: Read this Issue Report about GZIP compression: https://github.com/cloudhead/node-static/issues/20\n. The second pull fixes another Bug. A URL requesting the file Summerf\u00e4scht.jpg arrives as Summerf%C3%A4scht.jpg. A decodeURI() would have done the trick.\n. You're welcome.\n. As a workaround you could process.chdir() to the directory you want after loading all the libs and dependencies.\nYou could even automate this by substringing process.cwd() from __filename.\nCheers, Chris\n. Hey otterley..\nThis is an open project. Why don't you just fork 'node-static' and implement a cache on/off switch and pull it back?\nOr bether, implement the missing ceiling of the cache size or an eviction policy.\nYou seem to have the knowledge, and that way we would all benefit.\nBecause IMHO this is what open source, especially on GitHub, is all about.\nCheers, Chris\n. .htaccess is for apache, not for node.js, nor for node-static.\nYou would have to implement gzip compression in node-static. Or find someone who does it for you.\nMaybe you could compress the data after calling node-static with one of those node compression libraries available.\nTell us if your were successful.\nPS: Read this Issue Report about GZIP compression: https://github.com/cloudhead/node-static/issues/20\n. The second pull fixes another Bug. A URL requesting the file Summerf\u00e4scht.jpg arrives as Summerf%C3%A4scht.jpg. A decodeURI() would have done the trick.\n. You're welcome.\n. ",
    "NateFerrero": "@cimnine I actually came to the same conclusion as you, but this would still be very useful indeed!\n. Check out the updated README for how to use it.\n. @cimnine I actually came to the same conclusion as you, but this would still be very useful indeed!\n. Check out the updated README for how to use it.\n. ",
    "dvv": "Such files report 200, correct content-length: but no content follows.\n. Such files report 200, correct content-length: but no content follows.\n. ",
    "gorman": "I'm having this exact issue when using Juggernaut, which uses node-static. Some files, seemingly randomly, refuse to load. If anyone has any advice, I would greatly appreciate it.\n. I'm having this exact issue when using Juggernaut, which uses node-static. Some files, seemingly randomly, refuse to load. If anyone has any advice, I would greatly appreciate it.\n. ",
    "dubiousdavid": "This can be closed.\n. Why was this pull-request never commented on?  Seems like a lot of good stuff in here.\n. I just tested in 0.8.8 and everything works.\n. I ended up going with a different library, namely restify, as the scope of my project changed somewhat.  I probably won't have anymore time to invest in node-static.  Keep up the good work.\nOn Apr 30, 2013, at 5:56 AM, Pablo Cantero notifications@github.com wrote:\n\n@dubiousdavid You can help testing the PR, mostly can't be automatically merged and others need to be tested, could you help?\n\u2014\nReply to this email directly or view it on GitHub.\n. Working on fixing server name test failure.  I think this has to do with a bug when doing a HEAD request.\n. All tests are passing!\n. I have not tested the cli, just the api.  All the tests pass for api usage.\n\nOn Apr 7, 2013, at 9:35 PM, Aaron Stacy notifications@github.com wrote:\n\n@phstc @ia3andy i had the same issue and i've posted a pull request at #93. the problem is explained and fixed by the PR, but there will be more things that need to be updated.\n\u2014\nReply to this email directly or view it on GitHub.\n. This can be closed.\n. Why was this pull-request never commented on?  Seems like a lot of good stuff in here.\n. I just tested in 0.8.8 and everything works.\n. I ended up going with a different library, namely restify, as the scope of my project changed somewhat.  I probably won't have anymore time to invest in node-static.  Keep up the good work.\n\nOn Apr 30, 2013, at 5:56 AM, Pablo Cantero notifications@github.com wrote:\n\n@dubiousdavid You can help testing the PR, mostly can't be automatically merged and others need to be tested, could you help?\n\u2014\nReply to this email directly or view it on GitHub.\n. Working on fixing server name test failure.  I think this has to do with a bug when doing a HEAD request.\n. All tests are passing!\n. I have not tested the cli, just the api.  All the tests pass for api usage.\n\nOn Apr 7, 2013, at 9:35 PM, Aaron Stacy notifications@github.com wrote:\n\n@phstc @ia3andy i had the same issue and i've posted a pull request at #93. the problem is explained and fixed by the PR, but there will be more things that need to be updated.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Baggz": "+1\n. +1\n. ",
    "indexzero": "No offense, but you made the conjecture. I believe the onus is on you to prove why it's a bad idea before claiming it is. \n. I've been having a hard time getting good benchmarks b/c I think my own network IO is the upper limit throughput of the benchmark. I'm using spark / spark2 + node-static.\nMaybe we could coordinate a siege -c200 -t5M http://somenodejsbenchmarksite.com sometime \n. More info from the spec: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n. Fixed in this pull request: https://github.com/cloudhead/node-static/issues/21\n. So if the client presents the Accept-Encoding: gzip header, then we should gzip what kind of file? All files? I'm not super familiar with how gzip works, but I'm guessing one might want to gzip all files or only a certain kind of file, etc.\nI don't think you're going to see gzip getting into node.js core anytime soon. Ry, Tim, et. al have deemed it 'user-land' for a while. \n. Ok, but not every file should be gzipped was my point. Here's some background: \n\"Servers choose what to gzip based on file type, but are typically too limited in what they decide to compress. Most web sites gzip their HTML documents. It's also worthwhile to gzip your scripts and stylesheets, but many web sites miss this opportunity. In fact, it's worthwhile to compress any text response including XML and JSON. Image and PDF files should not be gzipped because they are already compressed. Trying to gzip them not only wastes CPU but can potentially increase file sizes.\"\nhttp://developer.yahoo.com/performance/rules.html\n. Closing. I no longer use node-static.\n. This looks interesting. I will review it and get back to you in the next couple of days.\n. @domenic Would you like to become the core maintainer of this project? We don't use it anymore at Nodejitsu (we use ecstatic, but it would be good to see it carry on in the mainline.\n. @domenic What's your npm username? I'll add you as an owner.\n@cloudhead Can you add @domenic as a collaborator on this repo?\n. @domenic Great. Once @cloudhead adds you as a collaborator here, merge in your changes and publish to npm. \n. @phstc You now have npm publish rights. I was waiting on giving those to you @domenic until you had commit rights. Generally it's bad to have the git repo and the npm module out of sync imho.\n. Worth mentioning I'm not an admin on this repo, which is why I've been waiting on Alexis these past few days.\n. No offense, but you made the conjecture. I believe the onus is on you to prove why it's a bad idea before claiming it is. \n. I've been having a hard time getting good benchmarks b/c I think my own network IO is the upper limit throughput of the benchmark. I'm using spark / spark2 + node-static.\nMaybe we could coordinate a siege -c200 -t5M http://somenodejsbenchmarksite.com sometime \n. More info from the spec: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n. Fixed in this pull request: https://github.com/cloudhead/node-static/issues/21\n. So if the client presents the Accept-Encoding: gzip header, then we should gzip what kind of file? All files? I'm not super familiar with how gzip works, but I'm guessing one might want to gzip all files or only a certain kind of file, etc.\nI don't think you're going to see gzip getting into node.js core anytime soon. Ry, Tim, et. al have deemed it 'user-land' for a while. \n. Ok, but not every file should be gzipped was my point. Here's some background: \n\"Servers choose what to gzip based on file type, but are typically too limited in what they decide to compress. Most web sites gzip their HTML documents. It's also worthwhile to gzip your scripts and stylesheets, but many web sites miss this opportunity. In fact, it's worthwhile to compress any text response including XML and JSON. Image and PDF files should not be gzipped because they are already compressed. Trying to gzip them not only wastes CPU but can potentially increase file sizes.\"\nhttp://developer.yahoo.com/performance/rules.html\n. Closing. I no longer use node-static.\n. This looks interesting. I will review it and get back to you in the next couple of days.\n. @domenic Would you like to become the core maintainer of this project? We don't use it anymore at Nodejitsu (we use ecstatic, but it would be good to see it carry on in the mainline.\n. @domenic What's your npm username? I'll add you as an owner.\n@cloudhead Can you add @domenic as a collaborator on this repo?\n. @domenic Great. Once @cloudhead adds you as a collaborator here, merge in your changes and publish to npm. \n. @phstc You now have npm publish rights. I was waiting on giving those to you @domenic until you had commit rights. Generally it's bad to have the git repo and the npm module out of sync imho.\n. Worth mentioning I'm not an admin on this repo, which is why I've been waiting on Alexis these past few days.\n. ",
    "otterley": "I'm not offended. :)\nI believe my report was adequately descriptive.  As I said, the kernel already provides a very good block I/O caching layer.  Have you actually benchmarked it with the cache disabled vs. enabled?\n. Please show us the data, Marak.\n. Your \"resident kernel hacker\" is correct to the extent that application-based caching can save some open() and read() syscalls.  This can improve performance for very small working sets, at the very high cost of precious memory that other applications might benefit from.  In any event, these syscalls are generally fast enough that performance without the additional cache will almost always be more than adequate.\nFor, say, edge caching and other enterprise workloads (i.e. where the working set is not unrealistically small), the incremental improvement in performance gained by avoiding these syscalls is small compared to the inefficiencies incurred in caching in user-space.  Using this module incurs at least one additional copy of the data in RAM: one that's mapped to the block I/O cache (since the NodeJS fs module doesn't use direct I/O) and another copy for each NodeJS process.  Consider that very large machines often have 8 cores; unless you're running only one NodeJS process on that host, you're going to have N copies around.  This means you'll be able to effectively cache, at most, RAM / (n+1), where n is the number of NodeJS processes.\nI encourage you to run a benchmark, ensuring that your working set is not superficially small.  Most benchmarks that appear to demonstrate the effectiveness of a user-space RAM cache exercise retrieving a single file.  Such a benchmark is perhaps true, but it is also misleading with respect to real-world performance.  To be practically relevant, the working set in such benchmarks must be larger than (RAM / (n+1)), where n is the number of CPUs concurrently running NodeJS); they almost never are.\nAnd beware: when the cache working set grows larger than RAM (which is quite possible because there's no ceiling on the module's cache size and no LRU or LFU eviction policy), the kernel will swap Node.js pages to disk.  This is perhaps the worst case imaginable.\nPlease have your team contact me directly if they disagree with this analysis.\n. You can't just gzip-compress files according to a regexp; the client has to present an appropriate Accept-Encoding: header.  In my view this functionality belongs in Node.js itself.\n. If the client presents the Accept-Encoding: header, then the response can be compressed.  The file type is irrelevant.\nI think it belongs in the core because the functionality should be uniform across all HTTP response handlers.  I worry what might happen if the functionality is delegated to response handlers, many of which might do it improperly, and there may be a lot of duplicated code, all of which will have to be torn out when the functionality does make it into the core.\n. Oh yes, quite right.  I'd forgotten about that.\nYou might want to take a look at Apache's mod_deflate for inspiration.\n. I'm not offended. :)\nI believe my report was adequately descriptive.  As I said, the kernel already provides a very good block I/O caching layer.  Have you actually benchmarked it with the cache disabled vs. enabled?\n. Please show us the data, Marak.\n. Your \"resident kernel hacker\" is correct to the extent that application-based caching can save some open() and read() syscalls.  This can improve performance for very small working sets, at the very high cost of precious memory that other applications might benefit from.  In any event, these syscalls are generally fast enough that performance without the additional cache will almost always be more than adequate.\nFor, say, edge caching and other enterprise workloads (i.e. where the working set is not unrealistically small), the incremental improvement in performance gained by avoiding these syscalls is small compared to the inefficiencies incurred in caching in user-space.  Using this module incurs at least one additional copy of the data in RAM: one that's mapped to the block I/O cache (since the NodeJS fs module doesn't use direct I/O) and another copy for each NodeJS process.  Consider that very large machines often have 8 cores; unless you're running only one NodeJS process on that host, you're going to have N copies around.  This means you'll be able to effectively cache, at most, RAM / (n+1), where n is the number of NodeJS processes.\nI encourage you to run a benchmark, ensuring that your working set is not superficially small.  Most benchmarks that appear to demonstrate the effectiveness of a user-space RAM cache exercise retrieving a single file.  Such a benchmark is perhaps true, but it is also misleading with respect to real-world performance.  To be practically relevant, the working set in such benchmarks must be larger than (RAM / (n+1)), where n is the number of CPUs concurrently running NodeJS); they almost never are.\nAnd beware: when the cache working set grows larger than RAM (which is quite possible because there's no ceiling on the module's cache size and no LRU or LFU eviction policy), the kernel will swap Node.js pages to disk.  This is perhaps the worst case imaginable.\nPlease have your team contact me directly if they disagree with this analysis.\n. You can't just gzip-compress files according to a regexp; the client has to present an appropriate Accept-Encoding: header.  In my view this functionality belongs in Node.js itself.\n. If the client presents the Accept-Encoding: header, then the response can be compressed.  The file type is irrelevant.\nI think it belongs in the core because the functionality should be uniform across all HTTP response handlers.  I worry what might happen if the functionality is delegated to response handlers, many of which might do it improperly, and there may be a lot of duplicated code, all of which will have to be torn out when the functionality does make it into the core.\n. Oh yes, quite right.  I'd forgotten about that.\nYou might want to take a look at Apache's mod_deflate for inspiration.\n. ",
    "dobesv": "It seems like you can disable the in-memory cache by specifying cache:false in the options.\nHowever, that only disables serving files from the cache - at least looking at my current version of node-static it will still keep a copy of every file in memory forever as it doesn't check if the cache is enabled when it stores into the cache.\nGiven the choice I'd rather have no in-memory caching system than a broken / incomplete one.\nI would suggest eliminating the in-memory cache until you can prove it makes a difference - in theory it should not and in practice it is broken.  Seems like a classic case of premature optimization - that is, adding an optimization without first seeing if there is a problem, and without measuring whether the optimization made any improvement over the unoptimized version.\n. +1 to pavel's point about checking for a file with the added gz suffix.  This is how they do in in Jetty's DefaultServlet.\nIt is highly efficient because the server doesn't re-gzip things on the fly all the time.  Instead, the user declares which static files he wants to send gzipped by gzipping them along with the uncompressed file.\nWhen done this way, it makes perfect sense to do it as part of the static file server because we're just deciding to serve up a different static file if the client presents the right header and we spot a '.gz' file ready for serving.\nSaves CPU time compared to an on-the-fly gzipping in the core of node and saves bandwidth, too!\n. See https://github.com/cloudhead/node-static/pull/34 for a patch supplying an implementation along the lines of nginx's gzip_static.\nIf you're serving any static files at all from your server, there's a good chance you'll want to be able to serve them compressed for clients that support that, and this is the most efficient way to do that (pre-compression rather than on the fly).\n. @pavel-koryagin If you used my earlier patch you may want to update from that repo again - I had introduced a bug where Content-Length was being sent with a 304 not modified response which throws Safari browsers for a loop.  The new version fixes that bug.\n. Put in a fix for this in https://github.com/cloudhead/node-static/pull/34\n. Note: fixes https://github.com/cloudhead/node-static/issues/20\n. Well the in memory cache is buggy right now and I didn't see fit to fix\nit.  I opened a separate issue discussing that.\n On Dec 30, 2011 5:19 AM, \"nambrot\" \nreply@reply.github.com\nwrote:\n\nIm looking into this commit, but I couldn't help and wondering, whether it\nis really necessary to remove the in-memory cache?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cloudhead/node-static/pull/34#issuecomment-3305277\n. My notes about the in memory cache issues are here:\n\nhttps://github.com/cloudhead/node-static/pull/36\nOn Dec 30, 2011 9:01 AM, \"Dobes Vandermeer\" dobesv@gmail.com wrote:\n\nWell the in memory cache is buggy right now and I didn't see fit to fix\nit.  I opened a separate issue discussing that.\n On Dec 30, 2011 5:19 AM, \"nambrot\" \nreply@reply.github.com\nwrote:\n\nIm looking into this commit, but I couldn't help and wondering, whether\nit is really necessary to remove the in-memory cache?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cloudhead/node-static/pull/34#issuecomment-3305277\n. It seems like you can disable the in-memory cache by specifying cache:false in the options.\n\n\nHowever, that only disables serving files from the cache - at least looking at my current version of node-static it will still keep a copy of every file in memory forever as it doesn't check if the cache is enabled when it stores into the cache.\nGiven the choice I'd rather have no in-memory caching system than a broken / incomplete one.\nI would suggest eliminating the in-memory cache until you can prove it makes a difference - in theory it should not and in practice it is broken.  Seems like a classic case of premature optimization - that is, adding an optimization without first seeing if there is a problem, and without measuring whether the optimization made any improvement over the unoptimized version.\n. +1 to pavel's point about checking for a file with the added gz suffix.  This is how they do in in Jetty's DefaultServlet.\nIt is highly efficient because the server doesn't re-gzip things on the fly all the time.  Instead, the user declares which static files he wants to send gzipped by gzipping them along with the uncompressed file.\nWhen done this way, it makes perfect sense to do it as part of the static file server because we're just deciding to serve up a different static file if the client presents the right header and we spot a '.gz' file ready for serving.\nSaves CPU time compared to an on-the-fly gzipping in the core of node and saves bandwidth, too!\n. See https://github.com/cloudhead/node-static/pull/34 for a patch supplying an implementation along the lines of nginx's gzip_static.\nIf you're serving any static files at all from your server, there's a good chance you'll want to be able to serve them compressed for clients that support that, and this is the most efficient way to do that (pre-compression rather than on the fly).\n. @pavel-koryagin If you used my earlier patch you may want to update from that repo again - I had introduced a bug where Content-Length was being sent with a 304 not modified response which throws Safari browsers for a loop.  The new version fixes that bug.\n. Put in a fix for this in https://github.com/cloudhead/node-static/pull/34\n. Note: fixes https://github.com/cloudhead/node-static/issues/20\n. Well the in memory cache is buggy right now and I didn't see fit to fix\nit.  I opened a separate issue discussing that.\n On Dec 30, 2011 5:19 AM, \"nambrot\" \nreply@reply.github.com\nwrote:\n\nIm looking into this commit, but I couldn't help and wondering, whether it\nis really necessary to remove the in-memory cache?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cloudhead/node-static/pull/34#issuecomment-3305277\n. My notes about the in memory cache issues are here:\n\nhttps://github.com/cloudhead/node-static/pull/36\nOn Dec 30, 2011 9:01 AM, \"Dobes Vandermeer\" dobesv@gmail.com wrote:\n\nWell the in memory cache is buggy right now and I didn't see fit to fix\nit.  I opened a separate issue discussing that.\n On Dec 30, 2011 5:19 AM, \"nambrot\" \nreply@reply.github.com\nwrote:\n\nIm looking into this commit, but I couldn't help and wondering, whether\nit is really necessary to remove the in-memory cache?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cloudhead/node-static/pull/34#issuecomment-3305277\n. \n\n",
    "jvonmitchell": "Can confirm.  In memory cache improves performance.  The file system cache improves performance as well.\nSome of you are saying you want numbers.  I can only go off of my head\nFor image files.  Server side  200ms first serve, 20-40ms if it is in file system cache, 0-1ms if in cache.\nOf course it is received slower than that but your app can call res.end() and back out of the function stack, the rest is async.  Either way bandwidth will be your limit but the point is to free up the application's action time so it can handle more requests with less thread.\nAddendum:  The reason why I came into issues was to see if there was discussion on how the cache is implemented.  It may be nice if the strategy used get maybe a cursory mention in the README.  I like how the issues for this repo has been spammed by morons.  If you don't have a useful request or a real bug please don't troll the nice people who made this. \n. Yeah,  I foresaw that issue and so I rolled my own.  I might as well share what I did to avoid that problem.  Basically there is a global threshold and when it goes over it takes out the longest stored items in a loop until we are under threshold.  A simple Object.keys(cache) will give you a list of keys in order of their initial insertion.\n. Can confirm.  In memory cache improves performance.  The file system cache improves performance as well.\nSome of you are saying you want numbers.  I can only go off of my head\nFor image files.  Server side  200ms first serve, 20-40ms if it is in file system cache, 0-1ms if in cache.\nOf course it is received slower than that but your app can call res.end() and back out of the function stack, the rest is async.  Either way bandwidth will be your limit but the point is to free up the application's action time so it can handle more requests with less thread.\nAddendum:  The reason why I came into issues was to see if there was discussion on how the cache is implemented.  It may be nice if the strategy used get maybe a cursory mention in the README.  I like how the issues for this repo has been spammed by morons.  If you don't have a useful request or a real bug please don't troll the nice people who made this. \n. Yeah,  I foresaw that issue and so I rolled my own.  I might as well share what I did to avoid that problem.  Basically there is a global threshold and when it goes over it takes out the longest stored items in a loop until we are under threshold.  A simple Object.keys(cache) will give you a list of keys in order of their initial insertion.\n. ",
    "pavel-koryagin": "BTW, nginx has a nice feature gzip_static. It means that it tries to push file <requested_file>.gz, if one exists. And it pushes the regular file otherwise.\n. dobesv, thank you. I planned to make the same patch, but now I can get yours.\n. BTW, nginx has a nice feature gzip_static. It means that it tries to push file <requested_file>.gz, if one exists. And it pushes the regular file otherwise.\n. dobesv, thank you. I planned to make the same patch, but now I can get yours.\n. ",
    "sebs": "Oh interesting discussion about half a decade ago. I wonder why the state of this is still \"gzip the files by hand\" ;) It seems a bit cumbersome ;) \n. Oh interesting discussion about half a decade ago. I wonder why the state of this is still \"gzip the files by hand\" ;) It seems a bit cumbersome ;) \n. ",
    "Sigfried": "I don't get the slang above (\"vendor a shit ton of node-statics\"?), but I want this fix and I'm too dumb to understand how to get it since it doesn't seem to be in the node-static that I installed.\n. I don't get the slang above (\"vendor a shit ton of node-statics\"?), but I want this fix and I'm too dumb to understand how to get it since it doesn't seem to be in the node-static that I installed.\n. ",
    "diversario": "Can I talk to you in #node.js?\n. Nevermind, I found a logic error in my code and now it doesn't throw errors anymore. I was serving files after request ends.\n. Can I talk to you in #node.js?\n. Nevermind, I found a logic error in my code and now it doesn't throw errors anymore. I was serving files after request ends.\n. ",
    "kixxauth": "OK, I was wrong.\nI improperly called .serveFile() without the status or headers parameters. Seems like there should be sensible defaults for these parameters though. Or, maybe an options hash instead?\n. OK, I was wrong.\nI improperly called .serveFile() without the status or headers parameters. Seems like there should be sensible defaults for these parameters though. Or, maybe an options hash instead?\n. ",
    "nambrot": "Im looking into this commit, but I couldn't help and wondering, whether it is really necessary to remove the in-memory cache?\n. Im looking into this commit, but I couldn't help and wondering, whether it is really necessary to remove the in-memory cache?\n. ",
    "rlidwka": "i have the same question\n. i have the same question\n. ",
    "edwardhotchkiss": ":P\n. :P\n. ",
    "hsablonniere": "Up?\n. Yep, I need that too ;-)\n\"The suggested file extension for manifests is .appcache.\"\nhttp://appcachefacts.info/\n. I think I can tackle this within the next few weeks. Are the maintainers interested ?\n. I didn't explain well my need. Sorry. Second try.\nLike a lot of developers, I'm very lazy ;-)\nI would like to start static on different folders without having to bother about port numbers.\nImagine two terminals :\n$ cd my-project-a\n$ static\nserving \".\" at http://127.0.0.1:8080\n$ cd my-project-b\n$ static\nserving \".\" at http://127.0.0.1:8081\nSince 8080 was already taken, static just try another port until it works.\nIt's just a syntactic shortcut but I just wanna hit static and see the magic happens. I don't have time to be yelled at with Error: listen EADDRINUSE an try to figure out which one is available...\nWhat do you think ?\n. Yeah I knew I got a really tiny special need that may be too specific :-(\nAre .static already a feature ? I think it could be a kinda solution.\n. I'll have look thx ;-)\n. Up?\n. Yep, I need that too ;-)\n\"The suggested file extension for manifests is .appcache.\"\nhttp://appcachefacts.info/\n. I think I can tackle this within the next few weeks. Are the maintainers interested ?\n. I didn't explain well my need. Sorry. Second try.\nLike a lot of developers, I'm very lazy ;-)\nI would like to start static on different folders without having to bother about port numbers.\nImagine two terminals :\n$ cd my-project-a\n$ static\nserving \".\" at http://127.0.0.1:8080\n$ cd my-project-b\n$ static\nserving \".\" at http://127.0.0.1:8081\nSince 8080 was already taken, static just try another port until it works.\nIt's just a syntactic shortcut but I just wanna hit static and see the magic happens. I don't have time to be yelled at with Error: listen EADDRINUSE an try to figure out which one is available...\nWhat do you think ?\n. Yeah I knew I got a really tiny special need that may be too specific :-(\nAre .static already a feature ? I think it could be a kinda solution.\n. I'll have look thx ;-)\n. ",
    "niloy": "My fault, the 404 error is for the favicon.\n. My fault, the 404 error is for the favicon.\n. ",
    "daxxog": "Maybe we could have a development flag to allow access outside the path.\n. I could see it getting called twice if you bound/mounted two static servers and didn't do the routing properly. But never with just one. (unless it's a bug)\n. This is a valid issue, check out my tests: \nhttps://github.com/daxxog/node-static-bug-writehead\n. @Swizec \nCheck out my project, coffeeshop.js. I created something called \"hybrid rendering\" which does just this with node-static.\nBasically it's a async loop that runs a user defined function that tells it if it needs to render a file. If it responds true, the async loop runs another function that renders the file. It then sleeps for a little bit and checks again.\nWhats nice about my solution is you can use it for just about anything. A mustache template, a JSON file that gets updated with a database, a less template, a JavaScript source that needs to be uglified... etc.\nMy project includes an example that connects to MongoDB, renders a mustache template, less template, and JavaScript with UglifyJS.\n. I think it should be a separate project. One thing we could add is a function that receives the file data as input and spits out some output. That way it would be possible to create external plugins for this type of stuff. Just a thought.\n. Yeah that's entirely possible with the current implementation.\n. Added tests and figured out #61 was the proper solution. Yay for vows!\n. Added the requested syntax.\n. 481b42301a246b3e060a446434f34c848276339a\n``` diff\n@@ -4,8 +4,7 @@ var vows    = require('vows')\n4    4\n   , express = require('express')\n5    5\n   , static  = require('../../lib/node-static');\n6    6  \n7     \n-var fileServer = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'}),\n8     \n-    fileServerExpress  = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'});\n     7\n+var fileServer = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'});\n9    8  \n10   9\n var suite = vows.describe('node-static');\n11   10 \n...  ...  \n@@ -14,7 +13,7 @@ var TEST_PORT = 8080,\n14   13 \n var TEST_SERVER = 'http://localhost:' + TEST_PORT,\n15   14 \n     TEST_SERVER_EXPRESS = 'http://localhost:' + TEST_PORT_EXPRESS;\n16   15 \n var server,\n17    \n-    server_express;\n     16 \n+    serverExpress;\n18   17 \n var callback;\n19   18 \n20   19 \n suite.addBatch({\n...  ...  \n@@ -77,17 +76,17 @@ suite.addBatch({\n77   76 \n }).addBatch({\n78   77 \n   'express + node-static serving 404 file': {\n79   78 \n     topic: function () {\n80    \n-        server_express = express();\n     79 \n+        serverExpress = express();\n81   80 \n82    \n-        server_express.get('', function(req, res) {\n83    \n-            fileServerExpress.serve(req, res, function (e, _res) {\n     81 \n+        serverExpress.get('', function(req, res) {\n     82 \n+            fileServer.serve(req, res, function (e, _res) {\n84   83 \n                 if (e && (e.status === 404)) {\n85    \n-                    fileServerExpress.serveFile('hello.txt', e.status, {}, req, res);\n     84 \n+                    fileServer.serveFile('hello.txt', e.status, {}, req, res);\n86   85 \n                 }\n87   86 \n             });\n88   87 \n         });\n89   88 \n90    \n-        server_express.listen(TEST_PORT_EXPRESS, this.callback)\n     89 \n+        serverExpress.listen(TEST_PORT_EXPRESS, this.callback)\n91   90 \n     },\n92   91 \n     'should be listening' : function(){\n93   92 \n       assert.isTrue(true);\n```\n. Maybe we could have a development flag to allow access outside the path.\n. I could see it getting called twice if you bound/mounted two static servers and didn't do the routing properly. But never with just one. (unless it's a bug)\n. This is a valid issue, check out my tests: \nhttps://github.com/daxxog/node-static-bug-writehead\n. @Swizec \nCheck out my project, coffeeshop.js. I created something called \"hybrid rendering\" which does just this with node-static.\nBasically it's a async loop that runs a user defined function that tells it if it needs to render a file. If it responds true, the async loop runs another function that renders the file. It then sleeps for a little bit and checks again.\nWhats nice about my solution is you can use it for just about anything. A mustache template, a JSON file that gets updated with a database, a less template, a JavaScript source that needs to be uglified... etc.\nMy project includes an example that connects to MongoDB, renders a mustache template, less template, and JavaScript with UglifyJS.\n. I think it should be a separate project. One thing we could add is a function that receives the file data as input and spits out some output. That way it would be possible to create external plugins for this type of stuff. Just a thought.\n. Yeah that's entirely possible with the current implementation.\n. Added tests and figured out #61 was the proper solution. Yay for vows!\n. Added the requested syntax.\n. 481b42301a246b3e060a446434f34c848276339a\n``` diff\n@@ -4,8 +4,7 @@ var vows    = require('vows')\n4    4\n   , express = require('express')\n5    5\n   , static  = require('../../lib/node-static');\n6    6  \n7     \n-var fileServer = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'}),\n8     \n-    fileServerExpress  = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'});\n     7\n+var fileServer = new(static.Server)(__dirname + '/../fixtures', {serverInfo: 'custom-server-name'});\n9    8  \n10   9\n var suite = vows.describe('node-static');\n11   10 \n...  ...  \n@@ -14,7 +13,7 @@ var TEST_PORT = 8080,\n14   13 \n var TEST_SERVER = 'http://localhost:' + TEST_PORT,\n15   14 \n     TEST_SERVER_EXPRESS = 'http://localhost:' + TEST_PORT_EXPRESS;\n16   15 \n var server,\n17    \n-    server_express;\n     16 \n+    serverExpress;\n18   17 \n var callback;\n19   18 \n20   19 \n suite.addBatch({\n...  ...  \n@@ -77,17 +76,17 @@ suite.addBatch({\n77   76 \n }).addBatch({\n78   77 \n   'express + node-static serving 404 file': {\n79   78 \n     topic: function () {\n80    \n-        server_express = express();\n     79 \n+        serverExpress = express();\n81   80 \n82    \n-        server_express.get('', function(req, res) {\n83    \n-            fileServerExpress.serve(req, res, function (e, _res) {\n     81 \n+        serverExpress.get('', function(req, res) {\n     82 \n+            fileServer.serve(req, res, function (e, _res) {\n84   83 \n                 if (e && (e.status === 404)) {\n85    \n-                    fileServerExpress.serveFile('hello.txt', e.status, {}, req, res);\n     84 \n+                    fileServer.serveFile('hello.txt', e.status, {}, req, res);\n86   85 \n                 }\n87   86 \n             });\n88   87 \n         });\n89   88 \n90    \n-        server_express.listen(TEST_PORT_EXPRESS, this.callback)\n     89 \n+        serverExpress.listen(TEST_PORT_EXPRESS, this.callback)\n91   90 \n     },\n92   91 \n     'should be listening' : function(){\n93   92 \n       assert.isTrue(true);\n```\n. ",
    "anseki": "Hello. Thanks for your great plugin.\nI got a same error, when document-root is relative path. new static.Server('./public')\nI found out the cause.\npath.join() is used in Server.prototype.resolve().\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L158\npath.join() returns strange result.\nTEST:\njs\nvar path = require('path');\nvar current = path.resolve('.');\nconsole.log('current: ' + current);\nvar joinedPath = path.join(current, 'foo-bar');\nconsole.log('joinedPath: ' + joinedPath);\nRESULT: Look the Drive-Letter E and e.\nshell\ncurrent: E:\\Documents\njoinedPath: e:\\Documents\\foo-bar\nTherefore, indexOf() returns unmatch, and Forbidden Error is given.\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L138\nI don't know why path.join() returns strange result. I tried Node v0.11.9, I got same error. Problem may be Python version that was used to build.\nSo, Windows ignores that letter of path is upper case or lower case. Therefore, I rewrote below, and this error was resolved.\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L158\njs\n    //if (pathname.indexOf(that.root) === 0) {\n    if ((require('os').platform() === 'win32' ?\n      pathname.toLowerCase().indexOf(that.root.toLowerCase()) : // Windows\n      pathname.indexOf(that.root)) === 0) {                     // Others\nOr, lower case drive-letter is given to constructor, and this error was resolved too. new static.Server('e:\\Documents\\foo-bar')\nBecause path.resolve don't change given drive-letter.\n. I didn't know why path.join and path.resolve return different result. Thank you.\nI wrote new static.Server('e:\\Documents\\foo-bar') above, it is same to using path.normalize.\nBut, I think that changing all of path string may be better, because the target of this checking is not only drive-letter. Windows ignores capital letter or not in all of path string.\nFor example:\nhttp://windows.microsoft.com/en-us/windows/home\nhttp://windows.microsoft.com/en-us/WiNdOwS/home\nTherefore, toLowerCase(allOfPath) may be better for the check that requested path is outside of the root or not.\n(But, I don't know that this behaviour of Web Server is good or not. RFC1738 says that scheme should be ignored capital letter or not. but it doesn't say about others (url-path etc.).)\n. Hello. Thanks for your great plugin.\nI got a same error, when document-root is relative path. new static.Server('./public')\nI found out the cause.\npath.join() is used in Server.prototype.resolve().\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L158\npath.join() returns strange result.\nTEST:\njs\nvar path = require('path');\nvar current = path.resolve('.');\nconsole.log('current: ' + current);\nvar joinedPath = path.join(current, 'foo-bar');\nconsole.log('joinedPath: ' + joinedPath);\nRESULT: Look the Drive-Letter E and e.\nshell\ncurrent: E:\\Documents\njoinedPath: e:\\Documents\\foo-bar\nTherefore, indexOf() returns unmatch, and Forbidden Error is given.\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L138\nI don't know why path.join() returns strange result. I tried Node v0.11.9, I got same error. Problem may be Python version that was used to build.\nSo, Windows ignores that letter of path is upper case or lower case. Therefore, I rewrote below, and this error was resolved.\nhttps://github.com/cloudhead/node-static/blob/master/lib/node-static.js#L158\njs\n    //if (pathname.indexOf(that.root) === 0) {\n    if ((require('os').platform() === 'win32' ?\n      pathname.toLowerCase().indexOf(that.root.toLowerCase()) : // Windows\n      pathname.indexOf(that.root)) === 0) {                     // Others\nOr, lower case drive-letter is given to constructor, and this error was resolved too. new static.Server('e:\\Documents\\foo-bar')\nBecause path.resolve don't change given drive-letter.\n. I didn't know why path.join and path.resolve return different result. Thank you.\nI wrote new static.Server('e:\\Documents\\foo-bar') above, it is same to using path.normalize.\nBut, I think that changing all of path string may be better, because the target of this checking is not only drive-letter. Windows ignores capital letter or not in all of path string.\nFor example:\nhttp://windows.microsoft.com/en-us/windows/home\nhttp://windows.microsoft.com/en-us/WiNdOwS/home\nTherefore, toLowerCase(allOfPath) may be better for the check that requested path is outside of the root or not.\n(But, I don't know that this behaviour of Web Server is good or not. RFC1738 says that scheme should be ignored capital letter or not. but it doesn't say about others (url-path etc.).)\n. ",
    "mrfabbri": "@anseki [I stumbled on the same problem] actually the problem lies in the commit\nhttps://github.com/joyent/node/commit/a05f973f82d2be8527aad4c371d40d3c7e4c564e which changed the behaviour of normalize (used by join), see:\nhttps://github.com/joyent/node/blob/b9bec2031e5f44f47cf01c3ec466ab8cddfa94f6/lib/path.js#L243\n[ it is being discussed on https://github.com/joyent/node/issues/7031 ]\nAnother possible workaround would be to call resolve() and normalize() on any path passed as document-root:\nnew static.Server(path.normalize(path.resolve(aPath)));\nwhich is what koa-send does\nhttps://github.com/koajs/send/blob/1d02d1b7c264daa43c4b18a918271f1dca8cc5fd/index.js#L41\n. @phstc as @UltCombo mentioned the issue lies in https://github.com/cloudhead/node-static/blob/42206711cc508573a872d5537e3ed1c7b257003a/lib/node-static.js#L296 and it is triggered by the change from pathname to key (which, if pathname is null, becomes file[0] ) in 3bdf0d75eca9ccff0b3661e9c39833f7bb97b095 .\nAs far as I understand key shouldn't be needed any more (leftover from old caching). Also the line \nfile = file[0] === '/' ? file : path.join(pathname || '.', file);\nchecks if file is absolute but the check holds only on UNIXes.\n. @IonicaBizau tests result on Windows 7 for commit 7f655b1913ab554a32b632f160a49fb4da3de1c4 are not passing (tests on previous commit 4c64f0cfdbe08e7c949ee0a92ef8c7b9e0c90103 are passing, also tests 4858a8212c580fa831b9614825275f38791df579 v0.7.3 are passing)\n```\nC:\\Workspace\\node-static>npm test\n\nnode-static@0.7.3 test C:\\Workspace\\node-static\nvows --spec --isolate\n\n\u2662 node-static\nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\hello.txt\\c:\\Work\nspace\\node-static\\test\\fixtures\\hello.txt']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\hello.txt\\c:\\Workspace\\n\node-static\\test\\fixtures\\hello.txt' }\n  serving hello.txt\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:104\n    \u2717 should respond with text/plain\n        \u00bb expected 'text/plain',\n        got      undefined (==) // node-static-test.js:107\n    \u2717 should respond with hello world\n        \u00bb\n        actual expected\n    hello world\n     // node-static-test.js:110\n\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  serving directory index\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:119\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:122\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  serving index.html from the cache\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:131\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:134\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match\n    \u2717 should respond with 304\n        \u00bb expected 304,\n        got      500 (==) // node-static-test.js:151\n  requesting with If-None-Match and If-Modified-Since\n    \u2717 should respond with a 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:173\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting POST\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:183\n    \u2717 should not be empty\n        \u00bb expected '' to be not empty // node-static-test.js:186\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting HEAD\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:196\n    \u2713 head must has no body\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\there\\index.html\\\nc:\\Workspace\\node-static\\test\\fixtures\\there\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\there\\index.html\\c:\\Work\nspace\\node-static\\test\\fixtures\\there\\index.html' }\n  serving subdirectory index\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:221\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:224\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\nutil.print: Use console.log instead\n\u2717 Broken \u00bb 14 honored \u2219 14 broken (0.308s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\nC:\\Workspace\\node-static>\n```\n. @anseki [I stumbled on the same problem] actually the problem lies in the commit\nhttps://github.com/joyent/node/commit/a05f973f82d2be8527aad4c371d40d3c7e4c564e which changed the behaviour of normalize (used by join), see:\nhttps://github.com/joyent/node/blob/b9bec2031e5f44f47cf01c3ec466ab8cddfa94f6/lib/path.js#L243\n[ it is being discussed on https://github.com/joyent/node/issues/7031 ]\nAnother possible workaround would be to call resolve() and normalize() on any path passed as document-root:\nnew static.Server(path.normalize(path.resolve(aPath)));\nwhich is what koa-send does\nhttps://github.com/koajs/send/blob/1d02d1b7c264daa43c4b18a918271f1dca8cc5fd/index.js#L41\n. @phstc as @UltCombo mentioned the issue lies in https://github.com/cloudhead/node-static/blob/42206711cc508573a872d5537e3ed1c7b257003a/lib/node-static.js#L296 and it is triggered by the change from pathname to key (which, if pathname is null, becomes file[0] ) in 3bdf0d75eca9ccff0b3661e9c39833f7bb97b095 .\nAs far as I understand key shouldn't be needed any more (leftover from old caching). Also the line \nfile = file[0] === '/' ? file : path.join(pathname || '.', file);\nchecks if file is absolute but the check holds only on UNIXes.\n. @IonicaBizau tests result on Windows 7 for commit 7f655b1913ab554a32b632f160a49fb4da3de1c4 are not passing (tests on previous commit 4c64f0cfdbe08e7c949ee0a92ef8c7b9e0c90103 are passing, also tests 4858a8212c580fa831b9614825275f38791df579 v0.7.3 are passing)\n```\nC:\\Workspace\\node-static>npm test\n\nnode-static@0.7.3 test C:\\Workspace\\node-static\nvows --spec --isolate\n\n\u2662 node-static\nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\hello.txt\\c:\\Work\nspace\\node-static\\test\\fixtures\\hello.txt']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\hello.txt\\c:\\Workspace\\n\node-static\\test\\fixtures\\hello.txt' }\n  serving hello.txt\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:104\n    \u2717 should respond with text/plain\n        \u00bb expected 'text/plain',\n        got      undefined (==) // node-static-test.js:107\n    \u2717 should respond with hello world\n        \u00bb\n        actual expected\n    hello world\n     // node-static-test.js:110\n\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  serving directory index\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:119\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:122\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  serving index.html from the cache\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:131\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:134\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match\n    \u2717 should respond with 304\n        \u00bb expected 304,\n        got      500 (==) // node-static-test.js:151\n  requesting with If-None-Match and If-Modified-Since\n    \u2717 should respond with a 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:173\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting POST\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:183\n    \u2717 should not be empty\n        \u00bb expected '' to be not empty // node-static-test.js:186\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting HEAD\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:196\n    \u2713 head must has no body\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Wor\nkspace\\node-static\\test\\fixtures\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\index.html\\c:\\Workspace\\\nnode-static\\test\\fixtures\\index.html' }\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n{ [Error: ENOENT, open 'c:\\Workspace\\node-static\\test\\fixtures\\there\\index.html\\\nc:\\Workspace\\node-static\\test\\fixtures\\there\\index.html']\n  errno: -4058,\n  code: 'ENOENT',\n  path: 'c:\\Workspace\\node-static\\test\\fixtures\\there\\index.html\\c:\\Work\nspace\\node-static\\test\\fixtures\\there\\index.html' }\n  serving subdirectory index\n    \u2717 should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:221\n    \u2717 should respond with text/html\n        \u00bb expected 'text/html',\n        got      undefined (==) // node-static-test.js:224\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\nutil.print: Use console.log instead\n\u2717 Broken \u00bb 14 honored \u2219 14 broken (0.308s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\nC:\\Workspace\\node-static>\n```\n. ",
    "davidaurelio": "+1\nsys is require()d but never used. The module prints a warning message in more recent warnings on node. Also update the npm package, please.\n. +1\nsys is require()d but never used. The module prints a warning message in more recent warnings on node. Also update the npm package, please.\n. ",
    "majek": "Recent node v0.6.8 writes:\nThe \"sys\" module is now called \"util\". It should have a similar interface.\nThis is quite annoying indeed.\n. Recent node v0.6.8 writes:\nThe \"sys\" module is now called \"util\". It should have a similar interface.\nThis is quite annoying indeed.\n. ",
    "jwerre": "+1 \nAnyone find a good alternative to this module?\n. +1 \nAnyone find a good alternative to this module?\n. ",
    "niklasfi": "sorry, i did not want to add another issue for this :( actually i just wanted to add this code-blob to the other conversation.\n. the sys module was not even used, so you can just delete the line as i did in https://github.com/cloudhead/node-static/pull/45\n. sorry, i did not want to add another issue for this :( actually i just wanted to add this code-blob to the other conversation.\n. the sys module was not even used, so you can just delete the line as i did in https://github.com/cloudhead/node-static/pull/45\n. ",
    "timoxley": "+1\n. It appears this module has been  abandoned considering the numerous sys -> util pull requests with zero response:\n49, #47, #45, #44, #38. Anyone want to step up and take the reins with a fork?\nOtherwise, this looks like a reasonable alternative: https://github.com/nodeapps/http-server\n. finally! nice work :+1:\n. we've been waiting for @cloudhead to do things for the past 6 months, isaacs has explicitly said he can step in to make the required change, you just need to ask him https://twitter.com/izs/statuses/197711753918955521\n. +1\n. It appears this module has been  abandoned considering the numerous sys -> util pull requests with zero response:\n49, #47, #45, #44, #38. Anyone want to step up and take the reins with a fork?\nOtherwise, this looks like a reasonable alternative: https://github.com/nodeapps/http-server\n. finally! nice work :+1:\n. we've been waiting for @cloudhead to do things for the past 6 months, isaacs has explicitly said he can step in to make the required change, you just need to ask him https://twitter.com/izs/statuses/197711753918955521\n. ",
    "joybro": "+1\n. +1\n. ",
    "shelleyp": "Question: is this module actively supported? Or has it been abandoned?\n. Question: is this module actively supported? Or has it been abandoned?\n. ",
    "gabipetrovay": "Please retweet: @andy_kelley's twitt about handing over the node-static to other maintainers or twitt @cloudhead to add more contributors.\n. that requires \"version\" : \"0.5.9\",++ in package.json\n. i.e.: that requires a bump in the version number. i.e. (0.5.9)++. i.e. increment the module version. And since that can be either: 0.5.10 or 0.6.0, you have: (0.5.9)++\n. Good to write it down. You find the bug! Wrong syntax in MY Content-Type header.\nContent-Type:: image/png\nSorry!\n. Please retweet: @andy_kelley's twitt about handing over the node-static to other maintainers or twitt @cloudhead to add more contributors.\n. that requires \"version\" : \"0.5.9\",++ in package.json\n. i.e.: that requires a bump in the version number. i.e. (0.5.9)++. i.e. increment the module version. And since that can be either: 0.5.10 or 0.6.0, you have: (0.5.9)++\n. Good to write it down. You find the bug! Wrong syntax in MY Content-Type header.\nContent-Type:: image/png\nSorry!\n. ",
    "thiagopnts": "It's true, I'll take a look on http-server,it seems to have some activity.\n. It's true, I'll take a look on http-server,it seems to have some activity.\n. ",
    "TeeTeeHaa": "Duplicate of issue #56 (because I did not found out to append a pull request to this issue).\n. I took the behavior of Apache web server as reference. The Apache web server of my hosting provider behaves like this:\nhttp://www.teeteehaa.de/path/ responds with 200 and content of file \"index.html\"\nhttp://www.teeteehaa.de/path responds with 301 and header Location: http://www.teeteehaa.de/path/\nCurrent, unmodified node-static 0.6.9 behaves like this:\nhttp://localhost/path/ responds with 200 and content of file \"index.html\"\nhttp://localhost/path responds with 200 and content of file \"index.html\" after which the request to \"code.js\" results in a 404\nnode-static considers both requests a directory and looks for \"index.html\"\n\nShould it be 404 instead of 301?\n\nIf /path/ shall be considered a directory and /path shall not be considered a directory, yes, a 404 would fit better. But this is not like Apache web server behaves and this will confuse many users just like me.\nI think valid options are 301 or 404, but the current 200 does break websites.\n\nWith this PR this example shouldn't work. The second one will be considered as a folder and due it doesn't exist, it will send a 301 status.\n\nAs I understand my code https://github.com/cloudhead/node-static/pull/56/ will return whatever an unmodified node-static returns because a 301 will only be returned if there is no slash at the end of the URL.\nI think https://github.com/cloudhead/node-static/pull/56/ should be considered a directory. But Github is no good reference in my opinion because they probably use a highly custom web server and their URLs probably do not refer to actual directories and files.\nP.S.: I like node-static for its simplicity and use it frequently. I would really appreciate this issue getting fixed by adopting the behavior of Apache web server (which is the de facto reference in my opinion).\n. > Thank you for your well detailed explanation. :+1:\nJust trying to help you understand my problem.\nRegarding tests I'll see what I can do but it might take a couple of days.\n. Disclaimer: today I used git and \"GitHub for Windows\" for the very first time (I only used github.com before) and I am not sure whether I did everything right.\nIn my latest commit I improved my initial fix further and added several test cases. In the test for the 301 redirect I check the body to be an empty string. Maybe a check for undefined would be better, but actually an existing, similar test case with a check for body to be undefined currently fails for me. I reported that in issue https://github.com/cloudhead/node-static/issues/99 .\n. Duplicate of issue #56 (because I did not found out to append a pull request to this issue).\n. I took the behavior of Apache web server as reference. The Apache web server of my hosting provider behaves like this:\nhttp://www.teeteehaa.de/path/ responds with 200 and content of file \"index.html\"\nhttp://www.teeteehaa.de/path responds with 301 and header Location: http://www.teeteehaa.de/path/\nCurrent, unmodified node-static 0.6.9 behaves like this:\nhttp://localhost/path/ responds with 200 and content of file \"index.html\"\nhttp://localhost/path responds with 200 and content of file \"index.html\" after which the request to \"code.js\" results in a 404\nnode-static considers both requests a directory and looks for \"index.html\"\n\nShould it be 404 instead of 301?\n\nIf /path/ shall be considered a directory and /path shall not be considered a directory, yes, a 404 would fit better. But this is not like Apache web server behaves and this will confuse many users just like me.\nI think valid options are 301 or 404, but the current 200 does break websites.\n\nWith this PR this example shouldn't work. The second one will be considered as a folder and due it doesn't exist, it will send a 301 status.\n\nAs I understand my code https://github.com/cloudhead/node-static/pull/56/ will return whatever an unmodified node-static returns because a 301 will only be returned if there is no slash at the end of the URL.\nI think https://github.com/cloudhead/node-static/pull/56/ should be considered a directory. But Github is no good reference in my opinion because they probably use a highly custom web server and their URLs probably do not refer to actual directories and files.\nP.S.: I like node-static for its simplicity and use it frequently. I would really appreciate this issue getting fixed by adopting the behavior of Apache web server (which is the de facto reference in my opinion).\n. > Thank you for your well detailed explanation. :+1:\nJust trying to help you understand my problem.\nRegarding tests I'll see what I can do but it might take a couple of days.\n. Disclaimer: today I used git and \"GitHub for Windows\" for the very first time (I only used github.com before) and I am not sure whether I did everything right.\nIn my latest commit I improved my initial fix further and added several test cases. In the test for the 301 redirect I check the body to be an empty string. Maybe a check for undefined would be better, but actually an existing, similar test case with a check for body to be undefined currently fails for me. I reported that in issue https://github.com/cloudhead/node-static/issues/99 .\n. ",
    "domenic": "See #38, #44, #45, #47, #48, #49, #50. This project is pretty dead. We have a fork with this and other fixes at https://github.com/pbouzakis/node-static/commits/patches/; feel free to use that instead.\n. @indexzero I'd love to!\n. @indexzero I'm domenicdenicola according to npm. Thanks!\n. Haha so between me with npm publish privileges and @phstc with GitHub commit privileges we can almost develop this thing.\nLet me see if I can just pull down the code and publish. @phstc do you have the ability to add me as a maintainer?\nEDIT: I can't publish until someone bumps the package.json version -_-.\n. Just depend on mime and be done with it?\n. See #38, #44, #45, #47, #48, #49, #50. This project is pretty dead. We have a fork with this and other fixes at https://github.com/pbouzakis/node-static/commits/patches/; feel free to use that instead.\n. @indexzero I'd love to!\n. @indexzero I'm domenicdenicola according to npm. Thanks!\n. Haha so between me with npm publish privileges and @phstc with GitHub commit privileges we can almost develop this thing.\nLet me see if I can just pull down the code and publish. @phstc do you have the ability to add me as a maintainer?\nEDIT: I can't publish until someone bumps the package.json version -_-.\n. Just depend on mime and be done with it?\n. ",
    "michaelwittig": "Thanks for the fix! At the moment, npm update node-static points to the old version. I am not very familiar with npm but I think we need a publish? In the meantime people with problems can remove the line \"sys = require('sys'),\" from ./node_modules/node-static/lib/node-static.js\n. oh cool. thx. didn't get it:)\nthx for the module!\n. Thanks for the fix! At the moment, npm update node-static points to the old version. I am not very familiar with npm but I think we need a publish? In the meantime people with problems can remove the line \"sys = require('sys'),\" from ./node_modules/node-static/lib/node-static.js\n. oh cool. thx. didn't get it:)\nthx for the module!\n. ",
    "jgallen23": "same npm version?  I still see 0.6.0 as latest\n. yep, thanks\n. same npm version?  I still see 0.6.0 as latest\n. yep, thanks\n. ",
    "pbouzakis": "Woops, forgot to include the removal of that check in my pull request.  Updated the pull request.\n. Sorry had some extra commits.  Fixed and forced push.\n. Woops, forgot to include the removal of that check in my pull request.  Updated the pull request.\n. Sorry had some extra commits.  Fixed and forced push.\n. ",
    "aaronj1335": "added notes to the readme.  let me know if that's what you had in mind (or of course just merge and update it to whatever style you feel best).  thanks!\n. the unit tests seem to be broken in node v0.10, and i'm guessing it's for the same reason. i think we may also want to update the read me.\n. after pulling the changes from #92 the unit tests are all working for node v0.10, though i think the readme may still need to be updated with the resume() calls.\n. @phstc @ia3andy i had the same issue and i've posted a pull request at #93. the problem is explained and fixed by the PR, but there will be more things that need to be updated for node version 0.10.X.\n. ah, my bad, i pulled in @dubiousdavid's changes from #92 and the unit tests are working for node 0.10.\n. @lzhan are you using a copy of node-static that includes the changes from #92 (i.o.w. version 6.0.8)? when i upgraded to ~~6.0.8~~ 0.6.8 the library started working again for me on node version 0.10.X. the CLI won't work in node.js 0.10.X until #93 is merged.\n. @lzhan what code are you using to start the server?\n. @lzhan i would need something more specific to help you with the issue :wink: \n. when you're writing test that make ajax requests for data (as opposed to the static content served up by node-static), it's a good idea to mock responses to these requests before they ever leave the browser.\ncould you use something like sinon's fake server to intercept these calls? you would of course allow any requests for static resources, but the data requests would get mocked up by the server.\ndoes that make sense?\n. well i'm not a maintainer, so i dunno, but i'm guessing if you've got a situation that's common for a lot of people for which there's no work-around, they'd be amenable to changing the current setup.\nthat being said, there's a significant cost to making a change like that, so the benefits would have to out-weigh the cost.\n. :+1:\n. @amark i actually think this isn't a node-static thing. my understanding is that it's actually npm creating these symlinks from package's bin directories to the node_modules/.bin directory, so that you can add entries to your $PATH to execute these scripts from your environment.\nin windows environments, npm works around this issue. it seems like npm is thinking that it can use symlinks, and failing to fallback to the workaround.\neither way i don't think node-static ever makes symlinks. maybe you can provide more information about what is going wrong? (commands you were running when you saw this, link to a gist of the full log, more info about your environment, etc.)\n. tried this out on my local machine and it worked (i was able to curl http://<my ip>:9899 from another machine on my local network).\nany chance you've got a firewall running?\n. hey that's not a bad question. one approach i've seen is to first have something like an express or connect server (or even just the bare node http server) that serves index.html to all application paths, but also does some check for like /public/* paths in the request (i.e. anything static), and then at that point passes the request off to node-static. so basically reversing the order of what you've got here. does that make sense?\n. added notes to the readme.  let me know if that's what you had in mind (or of course just merge and update it to whatever style you feel best).  thanks!\n. the unit tests seem to be broken in node v0.10, and i'm guessing it's for the same reason. i think we may also want to update the read me.\n. after pulling the changes from #92 the unit tests are all working for node v0.10, though i think the readme may still need to be updated with the resume() calls.\n. @phstc @ia3andy i had the same issue and i've posted a pull request at #93. the problem is explained and fixed by the PR, but there will be more things that need to be updated for node version 0.10.X.\n. ah, my bad, i pulled in @dubiousdavid's changes from #92 and the unit tests are working for node 0.10.\n. @lzhan are you using a copy of node-static that includes the changes from #92 (i.o.w. version 6.0.8)? when i upgraded to ~~6.0.8~~ 0.6.8 the library started working again for me on node version 0.10.X. the CLI won't work in node.js 0.10.X until #93 is merged.\n. @lzhan what code are you using to start the server?\n. @lzhan i would need something more specific to help you with the issue :wink: \n. when you're writing test that make ajax requests for data (as opposed to the static content served up by node-static), it's a good idea to mock responses to these requests before they ever leave the browser.\ncould you use something like sinon's fake server to intercept these calls? you would of course allow any requests for static resources, but the data requests would get mocked up by the server.\ndoes that make sense?\n. well i'm not a maintainer, so i dunno, but i'm guessing if you've got a situation that's common for a lot of people for which there's no work-around, they'd be amenable to changing the current setup.\nthat being said, there's a significant cost to making a change like that, so the benefits would have to out-weigh the cost.\n. :+1:\n. @amark i actually think this isn't a node-static thing. my understanding is that it's actually npm creating these symlinks from package's bin directories to the node_modules/.bin directory, so that you can add entries to your $PATH to execute these scripts from your environment.\nin windows environments, npm works around this issue. it seems like npm is thinking that it can use symlinks, and failing to fallback to the workaround.\neither way i don't think node-static ever makes symlinks. maybe you can provide more information about what is going wrong? (commands you were running when you saw this, link to a gist of the full log, more info about your environment, etc.)\n. tried this out on my local machine and it worked (i was able to curl http://<my ip>:9899 from another machine on my local network).\nany chance you've got a firewall running?\n. hey that's not a bad question. one approach i've seen is to first have something like an express or connect server (or even just the bare node http server) that serves index.html to all application paths, but also does some check for like /public/* paths in the request (i.e. anything static), and then at that point passes the request off to node-static. so basically reversing the order of what you've got here. does that make sense?\n. ",
    "benweint": "Howdy!\nI don't think so, actually. According to the node.js docs for http.ServerRequest, request header names will be lower-cased: http://nodejs.org/api/http.html#http_request_headers\n(Also, FWIW, the request headers were already being referenced using the lower-cased names prior to this change.)\n. Howdy!\nI don't think so, actually. According to the node.js docs for http.ServerRequest, request header names will be lower-cased: http://nodejs.org/api/http.html#http_request_headers\n(Also, FWIW, the request headers were already being referenced using the lower-cased names prior to this change.)\n. ",
    "aeisenberg": "That was fast!  Thanks for the merge.\n. That was fast!  Thanks for the merge.\n. ",
    "mboersma": "Yes, I think you're right. It was just an annoyance for us locally since we send a couple of these .woff files out as binary according to the mime-type. Sorry for the confusion: application/font-woff is correct.\n. I added a new pull request and I'll close this one.\n. Yes. But please ignore this pull request if you're in doubt. It's a trivial issue and I didn't realize the MIME type wasn't totally settled.\n. Yes, I think you're right. It was just an annoyance for us locally since we send a couple of these .woff files out as binary according to the mime-type. Sorry for the confusion: application/font-woff is correct.\n. I added a new pull request and I'll close this one.\n. Yes. But please ignore this pull request if you're in doubt. It's a trivial issue and I didn't realize the MIME type wasn't totally settled.\n. ",
    "kirkaustin": "Well, ultimately it might be worthwhile exposing the map so that users could add other mime types programmatically instead of tweaking the file itself.\nIt's pretty easy to test in Chrome, though.  The other browsers don't seem to care.\n. Brilliant!  Many thanks.\nOf course, I'll be doing:\nstatic.mime.addContentType('woff', 'application/x-font-woff');\n. I'd prefer not to.\nFewer dependencies is better.\nLean and mean\nLess is more.\nIf you'd prefer mime, you might also prefer using Express instead of node-static.\n. Well, ultimately it might be worthwhile exposing the map so that users could add other mime types programmatically instead of tweaking the file itself.\nIt's pretty easy to test in Chrome, though.  The other browsers don't seem to care.\n. Brilliant!  Many thanks.\nOf course, I'll be doing:\nstatic.mime.addContentType('woff', 'application/x-font-woff');\n. I'd prefer not to.\nFewer dependencies is better.\nLean and mean\nLess is more.\nIf you'd prefer mime, you might also prefer using Express instead of node-static.\n. ",
    "guybedford": "I've added in the tests for these scenarios.\n. Sure, I've added a test and adjusted the behaviour for a 404 error instead of expecting an error callback.\n. Good idea, I've included the changes.\n. I've added in the tests for these scenarios.\n. Sure, I've added a test and adjusted the behaviour for a 404 error instead of expecting an error callback.\n. Good idea, I've included the changes.\n. ",
    "shaoshuai0102": "yeah, callback is better than _callback as default if jquery is taken into consideration. I've already fixed that.\nBut I really think that simple jsonp support will really do help while debugging.\ncallback({\n    \"foo\": \"bar\"\n});\nThe example you mentioned above is difficult for debugging is some situation. \nSo can you think about merging this pull request? \nIf this is really not the goal of this project, can you make a plugin mechnism to support this?\n. It seems like nobody is interested.\nIf this is not meged, perhaps publishing another version is a better choice.\n. @phstc I'll try when I get enough free time. Thanks for replying.\n. yeah, callback is better than _callback as default if jquery is taken into consideration. I've already fixed that.\nBut I really think that simple jsonp support will really do help while debugging.\ncallback({\n    \"foo\": \"bar\"\n});\nThe example you mentioned above is difficult for debugging is some situation. \nSo can you think about merging this pull request? \nIf this is really not the goal of this project, can you make a plugin mechnism to support this?\n. It seems like nobody is interested.\nIf this is not meged, perhaps publishing another version is a better choice.\n. @phstc I'll try when I get enough free time. Thanks for replying.\n. ",
    "afc163": "Cool!!! That is what I'm looking for!!!!!\n. It is a specific situation. I'm using it in a mocha based testcase project, that would send post request for json mock data.\nI understand the static content reason, but you just don't need to check that, no one would be fail because of wrong request type.\n. Fair enough, that is an option for me. :smile: \nHowever, node-static is still not neccessary to limit the request type so that it can be use for more situation which is not browsers, like phantomjs.\n. :+1: \n. Cool!!! That is what I'm looking for!!!!!\n. It is a specific situation. I'm using it in a mocha based testcase project, that would send post request for json mock data.\nI understand the static content reason, but you just don't need to check that, no one would be fail because of wrong request type.\n. Fair enough, that is an option for me. :smile: \nHowever, node-static is still not neccessary to limit the request type so that it can be use for more situation which is not browsers, like phantomjs.\n. :+1: \n. ",
    "deiga": ":+1: for this one. Had me stumped for a while\n. I had the problem of node-static not running an endless loop in my browser, adding request.resume() fixed this. So yeah, it seems obligatory\n. :+1: for this one. Had me stumped for a while\n. I had the problem of node-static not running an endless loop in my browser, adding request.resume() fixed this. So yeah, it seems obligatory\n. ",
    "jflasher": "Awesome, thanks, ran in to this one as well as I first tried this on 0.10!\n. Awesome, thanks, ran in to this one as well as I first tried this on 0.10!\n. ",
    "edpaget": "@phstc this test fails for me on OS X 10.7. \nstreaming a 404 page\n    \u2717 should respond with 404\n      TypeError: Cannot read property 'statusCode' of undefined\n      at Request.suite.addBatch.addBatch.streaming a 404 page.should respond with 404 (/Users/edpaget/Documents/node-static/test/integration/node-static-test.js:50:30)\n      at runTest (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:132:26)\n      at EventEmitter.<anonymous> (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:85:17)\n      at EventEmitter.emit (events.js:117:20)\n      at EventEmitter.options.Emitter.emit (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:237:24)\n      at that.emitter.ctx (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows/context.js:31:52)\n      at Request.env.callback [as _callback] (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows/context.js:46:29)\n      at self.callback (/Users/edpaget/Documents/node-static/node_modules/request/index.js:142:22)\n      at Request.EventEmitter.emit (events.js:95:17)\n      at Request.options.Emitter.emit (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:237:24)\n    \u2717 should respond with the streamed content\n        \u00bb expected 'Custom 404 Stream.',\n        got      undefined (==) // node-static-test.js:54\n. @phstc request.resume() isn't obligatory in Node 0.10. The new Streams2 api pauses streams if there isn't a listener for a 'data' event. Since the static command only listens for an 'end' event on the http stream, node pauses the stream and the end event is never triggered. request.resume() just tells it to let the stream continue anyway. \n. @phstc It hangs there for a while, but then continues on my machine. I'm a little lost on how things are working on Vows (I've only used Jasmine and Mocha), so I haven't figured out why it sits forever on that test. \n. @phstc this test fails for me on OS X 10.7. \nstreaming a 404 page\n    \u2717 should respond with 404\n      TypeError: Cannot read property 'statusCode' of undefined\n      at Request.suite.addBatch.addBatch.streaming a 404 page.should respond with 404 (/Users/edpaget/Documents/node-static/test/integration/node-static-test.js:50:30)\n      at runTest (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:132:26)\n      at EventEmitter.<anonymous> (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:85:17)\n      at EventEmitter.emit (events.js:117:20)\n      at EventEmitter.options.Emitter.emit (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:237:24)\n      at that.emitter.ctx (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows/context.js:31:52)\n      at Request.env.callback [as _callback] (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows/context.js:46:29)\n      at self.callback (/Users/edpaget/Documents/node-static/node_modules/request/index.js:142:22)\n      at Request.EventEmitter.emit (events.js:95:17)\n      at Request.options.Emitter.emit (/Users/edpaget/Documents/node-static/node_modules/vows/lib/vows.js:237:24)\n    \u2717 should respond with the streamed content\n        \u00bb expected 'Custom 404 Stream.',\n        got      undefined (==) // node-static-test.js:54\n. @phstc request.resume() isn't obligatory in Node 0.10. The new Streams2 api pauses streams if there isn't a listener for a 'data' event. Since the static command only listens for an 'end' event on the http stream, node pauses the stream and the end event is never triggered. request.resume() just tells it to let the stream continue anyway. \n. @phstc It hangs there for a while, but then continues on my machine. I'm a little lost on how things are working on Vows (I've only used Jasmine and Mocha), so I haven't figured out why it sits forever on that test. \n. ",
    "stephenmathieson": "+1 \n. +1 \n. ",
    "arjansingh": "You're welcome!\nLooks like it' working for me:\n``` bash\n    Switched to branch 'patch-1'\n    [node-static] $npm test\n> node-static@0.6.5 test /Users/asingh/Projects/node-static\n> vows --spec --isolate\n\n\n  \u2662 node-static\n\n  once an http server is listening with a callback\n    \u2713 should be listening\n\n```\nOne thing, I did note though--and this is the same for master and patch-1--is that if you leave the test running for a minute or so you get:\nbash\nstreaming a 404 page\n      \u2717 should respond with 404 \n        TypeError: Cannot read property 'statusCode' of undefined \n        at Request.suite.addBatch.addBatch.streaming a 404 page.should respond with 404 (/Users/asingh/Projects/node-static/test/integration/node-static-test.js:49:30) \n        at runTest (/usr/local/lib/node_modules/vows/lib/vows.js:132:26) \n        at EventEmitter.<anonymous> (/usr/local/lib/node_modules/vows/lib/vows.js:85:17) \n        at EventEmitter.emit (events.js:117:20) \n        at EventEmitter.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at that.emitter.ctx (/usr/local/lib/node_modules/vows/lib/vows/context.js:31:52) \n        at Request.env.callback [as _callback] (/usr/local/lib/node_modules/vows/lib/vows/context.js:46:29) \n        at self.callback (/Users/asingh/Projects/node-static/node_modules/request/index.js:142:22) \n        at Request.EventEmitter.emit (events.js:95:17) \n        at Request.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at ClientRequest.self.clientErrorHandler (/Users/asingh/Projects/node-static/node_modules/request/index.js:246:10) \n        at ClientRequest.EventEmitter.emit (events.js:95:17) \n        at ClientRequest.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at Socket.socketOnEnd [as onend] (http.js:1521:9) \n        at Socket.g (events.js:175:14) \n        at Socket.EventEmitter.emit (events.js:117:20) \n        at Socket.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at _stream_readable.js:872:14 \n        at process._tickCallback (node.js:415:13)\n      \u2717 should respond with the streamed content \n          \u00bb expected 'Custom 404 Stream.', \n      got  undefined (==) // node-static-test.js:53\nThat might be another issue.\n. Just to be clear that streaming a 404 page error appears on the tests irregardless of whether or not my change was made. You guys might want to open another issue to look into that.\n. You're welcome!\nLooks like it' working for me:\n``` bash\n    Switched to branch 'patch-1'\n    [node-static] $npm test\n> node-static@0.6.5 test /Users/asingh/Projects/node-static\n> vows --spec --isolate\n\n\n  \u2662 node-static\n\n  once an http server is listening with a callback\n    \u2713 should be listening\n\n```\nOne thing, I did note though--and this is the same for master and patch-1--is that if you leave the test running for a minute or so you get:\nbash\nstreaming a 404 page\n      \u2717 should respond with 404 \n        TypeError: Cannot read property 'statusCode' of undefined \n        at Request.suite.addBatch.addBatch.streaming a 404 page.should respond with 404 (/Users/asingh/Projects/node-static/test/integration/node-static-test.js:49:30) \n        at runTest (/usr/local/lib/node_modules/vows/lib/vows.js:132:26) \n        at EventEmitter.<anonymous> (/usr/local/lib/node_modules/vows/lib/vows.js:85:17) \n        at EventEmitter.emit (events.js:117:20) \n        at EventEmitter.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at that.emitter.ctx (/usr/local/lib/node_modules/vows/lib/vows/context.js:31:52) \n        at Request.env.callback [as _callback] (/usr/local/lib/node_modules/vows/lib/vows/context.js:46:29) \n        at self.callback (/Users/asingh/Projects/node-static/node_modules/request/index.js:142:22) \n        at Request.EventEmitter.emit (events.js:95:17) \n        at Request.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at ClientRequest.self.clientErrorHandler (/Users/asingh/Projects/node-static/node_modules/request/index.js:246:10) \n        at ClientRequest.EventEmitter.emit (events.js:95:17) \n        at ClientRequest.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at Socket.socketOnEnd [as onend] (http.js:1521:9) \n        at Socket.g (events.js:175:14) \n        at Socket.EventEmitter.emit (events.js:117:20) \n        at Socket.options.Emitter.emit (/usr/local/lib/node_modules/vows/lib/vows.js:237:24) \n        at _stream_readable.js:872:14 \n        at process._tickCallback (node.js:415:13)\n      \u2717 should respond with the streamed content \n          \u00bb expected 'Custom 404 Stream.', \n      got  undefined (==) // node-static-test.js:53\nThat might be another issue.\n. Just to be clear that streaming a 404 page error appears on the tests irregardless of whether or not my change was made. You guys might want to open another issue to look into that.\n. ",
    "helloanand": "I got mine to work by using the code pasted below - \n``` javascript\nvar static = require('node-static');\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    file.serve(request, response, function (err, res) {\n        if (err) { // An error as occured\n            console.error(\"> Error serving \" + request.url + \" - \" + err.message);\n            response.writeHead(err.status, err.headers);\n            response.end();\n        } else { // The file was served successfully\n            console.log(\"> \" + request.url + \" - \" + res.message);\n        }\n    });\n}).listen(9999);\nconsole.log(\"> node-static is listening on http://127.0.0.1:9999\");\n```\n. I got mine to work by using the code pasted below - \n``` javascript\nvar static = require('node-static');\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    file.serve(request, response, function (err, res) {\n        if (err) { // An error as occured\n            console.error(\"> Error serving \" + request.url + \" - \" + err.message);\n            response.writeHead(err.status, err.headers);\n            response.end();\n        } else { // The file was served successfully\n            console.log(\"> \" + request.url + \" - \" + res.message);\n        }\n    });\n}).listen(9999);\nconsole.log(\"> node-static is listening on http://127.0.0.1:9999\");\n```\n. ",
    "thbaja": "@phstc, what happened with this PR and #36 ? I think it would be a nice merge\n. Hello @phstc \nDid you see the updates I did a week ago, according to your comments?\n. @phstc, what happened with this PR and #36 ? I think it would be a nice merge\n. Hello @phstc \nDid you see the updates I did a week ago, according to your comments?\n. ",
    "lzhan": "I am facing the same issue. Waiting for the fix. Thanks.\n. @aaronj1335 I am using node-static 0.6.8(just did installation of the latest version) and node 0.10.3. Server stated without any error. But on browser, loading app failed.\n. @aaronj1335 an app written with javascript(YUI, Mojito). \n. @aaronj1335 @ia3andy thanks. yes, I am using cli. When #93 will be merged?\n. v0.6.9 works! Thanks everyone.\n. I am facing the same issue. Waiting for the fix. Thanks.\n. @aaronj1335 I am using node-static 0.6.8(just did installation of the latest version) and node 0.10.3. Server stated without any error. But on browser, loading app failed.\n. @aaronj1335 an app written with javascript(YUI, Mojito). \n. @aaronj1335 @ia3andy thanks. yes, I am using cli. When #93 will be merged?\n. v0.6.9 works! Thanks everyone.\n. ",
    "ia3andy": "@aaronj1335  if you are using the CLI and since #93 is not merged yet, sounds normal that it's not working...\n. @aaronj1335  if you are using the CLI and since #93 is not merged yet, sounds normal that it's not working...\n. ",
    "peili": "No, still get the same error message.\n. - What is the size of the file that you are trying to serve?\n2 GB\n- What is the size of the server memory?\n8 GB\n2013/5/26 Pablo Cantero notifications@github.com\n\n\nWhat is the size of the file that you are trying to serve?\nWhat is the size of the server memory?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cloudhead/node-static/issues/98#issuecomment-18469135\n.\n. Yes seems to work now!\n. No, still get the same error message.\n. - What is the size of the file that you are trying to serve?\n\n2 GB\n- What is the size of the server memory?\n8 GB\n2013/5/26 Pablo Cantero notifications@github.com\n\n\nWhat is the size of the file that you are trying to serve?\nWhat is the size of the server memory?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cloudhead/node-static/issues/98#issuecomment-18469135\n.\n. Yes seems to work now!\n. \n",
    "songkang666": "Linux reports the error of out of memory\n. And OOM killer kills the node.\n. Linux reports the error of out of memory\n. And OOM killer kills the node.\n. ",
    "deoryp": "I also updated to express but I can pull that out if you don't want to use express.\n. I also updated to express but I can pull that out if you don't want to use express.\n. ",
    "garrettwilkin": "Ah!  I was missing the new .resume() call!\n. Ah!  I was missing the new .resume() call!\n. ",
    "mnpenner": "I'm still confused why request.addListener('end' is in there. What's it do? Why are we waiting before serving a file?\n. I tried serving a 4.4 GB file and got a different error:\nRangeError: invalid Buffer length\n    at RangeError (native)\n    at allocate (buffer.js:81:20)\n    at new Buffer (buffer.js:39:12)\n    at Server.respondNoGzip (/usr/local/filewhal/node_modules/node-static/lib/node-static.js:339:33)\n    at Server.respond (/usr/local/filewhal/node_modules/node-static/lib/node-static.js:354:14)\n    at /usr/local/filewhal/node_modules/node-static/lib/node-static.js:93:14\n    at FSReqWrap.oncomplete (fs.js:82:15)\nMy server has 2GB of memory.\n. I'm still confused why request.addListener('end' is in there. What's it do? Why are we waiting before serving a file?\n. I tried serving a 4.4 GB file and got a different error:\nRangeError: invalid Buffer length\n    at RangeError (native)\n    at allocate (buffer.js:81:20)\n    at new Buffer (buffer.js:39:12)\n    at Server.respondNoGzip (/usr/local/filewhal/node_modules/node-static/lib/node-static.js:339:33)\n    at Server.respond (/usr/local/filewhal/node_modules/node-static/lib/node-static.js:354:14)\n    at /usr/local/filewhal/node_modules/node-static/lib/node-static.js:93:14\n    at FSReqWrap.oncomplete (fs.js:82:15)\nMy server has 2GB of memory.\n. ",
    "amark": "Oh! My bad, I'm sorry, I never realized NPM was auto generating symlinks - I always thought/assumed it was the occasional library that did. Sorry about that! Thanks. (closing)\n. Oh! My bad, I'm sorry, I never realized NPM was auto generating symlinks - I always thought/assumed it was the occasional library that did. Sorry about that! Thanks. (closing)\n. ",
    "valentinvieriu": "created a pull request on this topic\n. Thank you for the fix. I will do my best on the next pull request to add some tests too.\nNow we can use node-static for our facebook application.\nI's live now on https://apps.facebook.com/ios_vs_android/\nThank you again\n. created a pull request on this topic\n. Thank you for the fix. I will do my best on the next pull request to add some tests too.\nNow we can use node-static for our facebook application.\nI's live now on https://apps.facebook.com/ios_vs_android/\nThank you again\n. ",
    "jeevavellai": "Thanks for the respose. I used above mentioned command. It Creates the node-static module.\nWith Regards\n. Thanks for the respose. I used above mentioned command. It Creates the node-static module.\nWith Regards\n. ",
    "Mischanix": "And here's a trace for when the filesize overflows int32:\nbuffer.js:194\n      this.parent = new SlowBuffer(this.length);\n                    ^\nTypeError: Bad argument\n    at new Buffer (buffer.js:194:21)\n    at Server.respondNoGzip (.../node-static/lib/node-static.js:272:38)\n    at Server.respond (.../node-static/lib/node-static.js:286:14)\n    at .../node-static/lib/node-static.js:143:22\n    at Object.oncomplete (fs.js:107:15)\n. And here's a trace for when the filesize overflows int32:\nbuffer.js:194\n      this.parent = new SlowBuffer(this.length);\n                    ^\nTypeError: Bad argument\n    at new Buffer (buffer.js:194:21)\n    at Server.respondNoGzip (.../node-static/lib/node-static.js:272:38)\n    at Server.respond (.../node-static/lib/node-static.js:286:14)\n    at .../node-static/lib/node-static.js:143:22\n    at Object.oncomplete (fs.js:107:15)\n. ",
    "Rush": "How big a file are we talking about? Serving 8GB file images should be a supported use case. Backup file could easily weigh >100GB.\n. How big a file are we talking about? Serving 8GB file images should be a supported use case. Backup file could easily weigh >100GB.\n. ",
    "madd512": "I am getting a similar error with a 2GB file.\nbuffer.js:194\n      this.parent = new SlowBuffer(this.length);\n                    ^\nRangeError: length > kMaxLength\n    at new Buffer (buffer.js:194:21)\n    at Server.respondNoGzip (/usr/local/lib/node_modules/node-static/lib/node-static.js:337:33)\n    at Server.respond (/usr/local/lib/node_modules/node-static/lib/node-static.js:352:14)\n    at /usr/local/lib/node_modules/node-static/lib/node-static.js:144:22\n    at Object.oncomplete (fs.js:107:15)\n. I am getting a similar error with a 2GB file.\nbuffer.js:194\n      this.parent = new SlowBuffer(this.length);\n                    ^\nRangeError: length > kMaxLength\n    at new Buffer (buffer.js:194:21)\n    at Server.respondNoGzip (/usr/local/lib/node_modules/node-static/lib/node-static.js:337:33)\n    at Server.respond (/usr/local/lib/node_modules/node-static/lib/node-static.js:352:14)\n    at /usr/local/lib/node_modules/node-static/lib/node-static.js:144:22\n    at Object.oncomplete (fs.js:107:15)\n. ",
    "randoms": "If you want to serve static files, send is a much better choice.\n. If you want to serve static files, send is a much better choice.\n. ",
    "jozsi": "Same here, serving a 2GB file with 3.5GB free memory.\n```\njozsi@lfa:~$ static -a 0.0.0.0 www\nserving \"www\" at http://0.0.0.0:8080\nbuffer.js:25\n    const ui8 = new Uint8Array(size);\n                ^\nRangeError: Invalid typed array length\n    at new Uint8Array (native)\n    at createBuffer (buffer.js:25:17)\n    at allocate (buffer.js:96:12)\n    at new Buffer (buffer.js:56:12)\n    at Server.respondNoGzip (/usr/lib/node_modules/node-static/lib/node-static.js:339:33)\n    at Server.respond (/usr/lib/node_modules/node-static/lib/node-static.js:354:14)\n    at /usr/lib/node_modules/node-static/lib/node-static.js:146:22\n    at FSReqWrap.oncomplete (fs.js:82:15)\njozsi@lfa:~$ static -v\nnode-static 0.7.7\n```\n. It fails for any file now, not just large ones:\n```\njozsi@lfa:~/www$ npm install cloudhead/node-static#remove-buffer\nnode-static@0.7.7 node_modules/node-static\n\u251c\u2500\u2500 mime@1.3.4\n\u251c\u2500\u2500 colors@1.1.2\n\u2514\u2500\u2500 optimist@0.6.1 (wordwrap@0.0.3, minimist@0.0.10)\njozsi@lfa:~/www$ ./node_modules/node-static/bin/cli.js -p 8888 -a 0.0.0.0\nserving \".\" at http://0.0.0.0:8888\n/home/jozsi/www/node_modules/node-static/lib/node-static.js:376\n                    chunk.copy(buffer, offset);\n                          ^\nTypeError: argument should be a Buffer\n    at TypeError (native)\n    at ReadStream. (/home/jozsi/www/node_modules/node-static/lib/node-static.js:376:27)\n    at emitOne (events.js:82:20)\n    at ReadStream.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:153:18)\n    at ReadStream.Readable.push (_stream_readable.js:111:10)\n    at onread (fs.js:1739:12)\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:576:17)\n```\n. It works now, thanks. :+1: \nNote: it took a few seconds till the download of the big file started, however it might've been a network latency issue - I wasn't able to reproduce it on the same file after.\n. Same here, serving a 2GB file with 3.5GB free memory.\n```\njozsi@lfa:~$ static -a 0.0.0.0 www\nserving \"www\" at http://0.0.0.0:8080\nbuffer.js:25\n    const ui8 = new Uint8Array(size);\n                ^\nRangeError: Invalid typed array length\n    at new Uint8Array (native)\n    at createBuffer (buffer.js:25:17)\n    at allocate (buffer.js:96:12)\n    at new Buffer (buffer.js:56:12)\n    at Server.respondNoGzip (/usr/lib/node_modules/node-static/lib/node-static.js:339:33)\n    at Server.respond (/usr/lib/node_modules/node-static/lib/node-static.js:354:14)\n    at /usr/lib/node_modules/node-static/lib/node-static.js:146:22\n    at FSReqWrap.oncomplete (fs.js:82:15)\njozsi@lfa:~$ static -v\nnode-static 0.7.7\n```\n. It fails for any file now, not just large ones:\n```\njozsi@lfa:~/www$ npm install cloudhead/node-static#remove-buffer\nnode-static@0.7.7 node_modules/node-static\n\u251c\u2500\u2500 mime@1.3.4\n\u251c\u2500\u2500 colors@1.1.2\n\u2514\u2500\u2500 optimist@0.6.1 (wordwrap@0.0.3, minimist@0.0.10)\njozsi@lfa:~/www$ ./node_modules/node-static/bin/cli.js -p 8888 -a 0.0.0.0\nserving \".\" at http://0.0.0.0:8888\n/home/jozsi/www/node_modules/node-static/lib/node-static.js:376\n                    chunk.copy(buffer, offset);\n                          ^\nTypeError: argument should be a Buffer\n    at TypeError (native)\n    at ReadStream. (/home/jozsi/www/node_modules/node-static/lib/node-static.js:376:27)\n    at emitOne (events.js:82:20)\n    at ReadStream.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:153:18)\n    at ReadStream.Readable.push (_stream_readable.js:111:10)\n    at onread (fs.js:1739:12)\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:576:17)\n```\n. It works now, thanks. :+1: \nNote: it took a few seconds till the download of the big file started, however it might've been a network latency issue - I wasn't able to reproduce it on the same file after.\n. ",
    "kapouer": "Thank you, i'm just waiting the next release to upload it to debian ;)\n. Extra. Don't forget to git push --tags ;)\n. Thank you, i'm just waiting the next release to upload it to debian ;)\n. Extra. Don't forget to git push --tags ;)\n. ",
    "IonicaBizau": ":smiley: \n. It's not related to a bug. Actually, I was implementing caching in statique module, following the node-static code related to that, and I noticed that key is not used.\nThe tests are passing. Relevant log:\n``` sh\nionicabizau@laptop:~/Documents/node-static$ git remote add fork git@github.com:IonicaBizau/node-static.git\nionicabizau@laptop:~/Documents/node-static$ git pull fork patch-1\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 2 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom github.com:IonicaBizau/node-static\n * branch            patch-1    -> FETCH_HEAD\n * [new branch]      patch-1    -> fork/patch-1\nUpdating 4c64f0c..3bdf0d7\nFast-forward\n lib/node-static.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nionicabizau@laptop:~/Documents/node-static$ git diff 4c64f0c..3bdf0d7\ndiff --git a/lib/node-static.js b/lib/node-static.js\nindex 1287115..3b0e8f0 100644\n--- a/lib/node-static.js\n+++ b/lib/node-static.js\n@@ -269,7 +269,7 @@ Server.prototype.respondNoGzip = function (pathname, status, contentType, _heade\n     } else {\n         res.writeHead(status, headers);\n\nthis.stream(pathname, files, new(buffer.Buffer)(stat.size), res, function (e, buffer) {\nthis.stream(key, files, new(buffer.Buffer)(stat.size), res, function (e, buffer) {\n             if (e) { return finish(500, {}) }\n             finish(status, headers);\n         });\nionicabizau@laptop:~/Documents/node-static$ npm test\n\n\nnode-static@0.7.3 test /home/ionicabizau/Documents/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n-\n\u2713 OK \u00bb 28 honored (0.153s) \n```\n. Thanks! :smile: \n. Thank you for tip. It's first time when I used cache responses, but I will keep that in mind. :+1: \n. I'm not a Windows user, but I can recommend you to check if the issue existed before my change:\nsh\n$ git clone git@github.com:cloudhead/node-static.git\n$ cd node-static \n$ git reset --hard 4858a8212c580fa831b9614825275f38791df579\n$ npm install\n$ npm test\nAlso, the tests are passing on Ubuntu 14.04 (using the current release):\n``` sh\nionicabizau@laptop:~/node-static$ npm test\n\nnode-static@0.7.3 test /home/ionicabizau/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n\u2713 OK \u00bb 28 honored (0.151s) \n``\n. I installed Windows 7 in my VBox. The tests fail when usingkeyinstead offilepathand there is one error whenfilepath` is used.\n\nCannot reproduce the issue with serving hello.html:\njs\nvar static = require('node-static');\n// var Path = require(\"path\");\n// var file = new static.Server(Path.join(process.cwd(), 'public'), { cache: 7200, headers: {'X-Hello':'World!'} });\nvar file = new static.Server('./public', { cache: 7200, headers: {'X-Hello':'World!'} });\nrequire('http').createServer(function (request, response) {\n    file.serve(request, response, function (err, res) {\n        if (err) {\n       console.error(\"> Error serving \" + request.url + \" - \" + err.message);\n           response.writeHead(err.status, err.headers);\n           response.end();\n        } else {\n           console.log(\"> \" + request.url + \" - \" + res.message);\n        }\n    });\n}).listen(8080);\nconsole.log(\"> node-static is listening on http://127.0.0.1:8080\");\nThe file is correctly served in both cases.\nRelevant output:\n``` sh\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> npm test\n\nnode-static@0.7.3 test C:\\Users\\John\\Documents\\node-static\nvows --spec --isolate\n\n? node-static\nonce an http server is listening with a callback\n    \u221a should be listening\n  streaming a 404 page\n    \u221a should respond with 404\n    \u221a should respond with the streamed content\n  once an http server is listening without a callback\n    \u221a should be listening\n  requesting a file not found\n    \u221a should respond with 404\n  requesting a malformed URI\n    \u221a should respond with 400\n  serving hello.txt\n    \u221a should respond with 200\n    \u221a should respond with text/plain\n    \u221a should respond with hello world\n  serving directory index\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  serving index.html from the cache\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  requesting with If-None-Match\n    \u221a should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u221a -should respond with a 200\n  requesting POST\n    \u221a should respond with 200\n    \u221a should not be empty\n  requesting HEAD\n    \u221a should respond with 200\n    \u221a head must has no body\n  requesting headers\n    \u221a should respond with node-static/0.7.3\n  addings custom mime types\n    \u221a should add woff\n  serving subdirectory index\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  redirecting to subdirectory index\n    \u221a should respond with 301\n    \u221a should respond with location header\n    \u221a should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u221a should respond with 404\n? Errored \u00bb 1 errored (0.000s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]>\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> git diff\ndiff --git a/lib/node-static.js b/lib/node-static.js\nindex ebb748b..d40eac5 100644\n--- a/lib/node-static.js\n+++ b/lib/node-static.js\n@@ -269,8 +269,8 @@ Server.prototype.respondNoGzip = function (pathname, status,\n         finish(304, headers);\n     } else {\n         res.writeHead(status, headers);\n-\n-        this.stream(key, files, new(buffer.Buffer)(stat.size), res, function (e\n+        debugger\n+        this.stream(pathname, files, new(buffer.Buffer)(stat.size), res, functi\n             if (e) { return finish(500, {}) }\n             finish(status, headers);\n         });\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> git checkout .\nC:\\Users\\John\\Documents\\node-static [master +1 ~0 -0 !]> npm test\n\nnode-static@0.7.3 test C:\\Users\\John\\Documents\\node-static\nvows --spec --isolate\n\n? node-static\nonce an http server is listening with a callback\n    \u221a should be listening\n  streaming a 404 page\n    \u221a should respond with 404\n    \u221a should respond with the streamed content\n  once an http server is listening without a callback\n    \u221a should be listening\n  requesting a file not found\n    \u221a should respond with 404\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.\ntxt\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt\\C:\\\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt' }\n  requesting a malformed URI\n    \u221a should respond with 400\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  serving hello.txt\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:104\n    ? should respond with text/plain\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:107\n    ? should respond with hello world\n        \u00bb\n        actual expected\n    hello world\n     // node-static-test.js:110\n\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  serving directory index\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:119\n    ? should respond with text/html\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:122\n  serving index.html from the cache\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:131\n    ? should respond with text/html\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:134\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should respond with 304\n        \u00bb expected 304,\n        got      500 (==) // node-static-test.js:151\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match and If-Modified-Since\n    ? should respond with a 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:173\n|  requesting POST\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:183\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should not be empty\n        \u00bb expected . to be not empty // node-static-test.js:186\n  requesting HEAD\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:196\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    \u221a head must has no body\n  requesting headers\n    \u221a should respond with node-static/0.7.3\n  addings custom mime types\n    \u221a should add woff\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\\nindex.html\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.h\ntml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.html'\n }\n  serving subdirectory index\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:221\n    ? should respond with text/html\n        \u00bb expected ..,\n        got      undefined (==) // node-static-test.js:224\n  redirecting to subdirectory index\n    \u221a should respond with 301\n    \u221a should respond with location header\n    \u221a should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u221a should respond with 404\n? Errored \u00bb 1 errored (0.000s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n``\n. @UltCombo Can you provide a zip file containing the project that reproduces the issue?\n. Yes, seems thatpathnameisnullandkeybecomesfiles[0].\n. I added a little fix for checking if path is absolute. Is it enough? See pull request #126.\n. Glad to hear that. :smile: \n. You're welcome. I'm happy that I fixed this bug. :smile:\n. Same problem, deployed on production yesterday and things got fishy... :smile: \n. /cc @phstc \n. However, why cannot we [do justend: startByte + buffer.length`](https://github.com/cloudhead/node-static/commit/ed5702b97de23618949529e01165abd0a4ccbbf8#commitcomment-7934939)? (/cc @tchakabam )\n. > So we can release the version 0.7.4 including our latest PR as well.\n@phstc You mean version 0.7.6, right?\n. Glad to help. We deployed 0.7.5 on production and things started to crash. :smile: Then we downgraded to 0.7.4.\n. @tchakabam Yeah, sure.\n. Whoups, probably a VIM temp file. Removing it in next commits.\n. I added the test file and removed swap file.\nTests are passing:\n``` sh\n$ npm test\n\nnode-static@0.7.5 test /home/ionicabizau/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving empty.css\n    \u2713 should respond with 200\n    \u2713 should respond with text/css\n    \u2713 should respond with empty string\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving first 5 bytes of hello.txt\n    \u2713 should respond with 206\n    \u2713 should respond with text/plain\n    \u2713 should have content-length of 5 bytes\n    \u2713 should respond with hello\n  serving last 5 bytes of hello.txt\n    \u2713 should respond with 206\n    \u2713 should respond with text/plain\n    \u2713 should have content-length of 5 bytes\n    \u2713 should respond with world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.5\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n\u2713 OK \u00bb 39 honored (0.163s) \n```\n. Rolling back my changes (but not the tests), the following error appears:\n``` sh\n\u2717 Errored \u00bb Asynchronous Error \n      in node-static \n      in test/integration/node-static-test.js\n\u2717 Errored \u00bb callback not fired \n      in serving empty.css \n      in node-static \n      in test/integration/node-static-test.js\n\u2717 Errored \u00bb 1 errored (0.000s) \nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\nThat's probably because the exception is thrown.\n. Yeps. :smile: Cool!\n. :smiley: \n. It's not related to a bug. Actually, I was implementing caching in statique module, following the node-static code related to that, and I noticed that key is not used.\nThe tests are passing. Relevant log:\n``` sh\nionicabizau@laptop:~/Documents/node-static$ git remote add fork git@github.com:IonicaBizau/node-static.git\nionicabizau@laptop:~/Documents/node-static$ git pull fork patch-1\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 2 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom github.com:IonicaBizau/node-static\n * branch            patch-1    -> FETCH_HEAD\n * [new branch]      patch-1    -> fork/patch-1\nUpdating 4c64f0c..3bdf0d7\nFast-forward\n lib/node-static.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nionicabizau@laptop:~/Documents/node-static$ git diff 4c64f0c..3bdf0d7\ndiff --git a/lib/node-static.js b/lib/node-static.js\nindex 1287115..3b0e8f0 100644\n--- a/lib/node-static.js\n+++ b/lib/node-static.js\n@@ -269,7 +269,7 @@ Server.prototype.respondNoGzip = function (pathname, status, contentType, _heade\n     } else {\n         res.writeHead(status, headers);\n\nthis.stream(pathname, files, new(buffer.Buffer)(stat.size), res, function (e, buffer) {\nthis.stream(key, files, new(buffer.Buffer)(stat.size), res, function (e, buffer) {\n             if (e) { return finish(500, {}) }\n             finish(status, headers);\n         });\nionicabizau@laptop:~/Documents/node-static$ npm test\n\n\nnode-static@0.7.3 test /home/ionicabizau/Documents/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n-\n\u2713 OK \u00bb 28 honored (0.153s) \n```\n. Thanks! :smile: \n. Thank you for tip. It's first time when I used cache responses, but I will keep that in mind. :+1: \n. I'm not a Windows user, but I can recommend you to check if the issue existed before my change:\nsh\n$ git clone git@github.com:cloudhead/node-static.git\n$ cd node-static \n$ git reset --hard 4858a8212c580fa831b9614825275f38791df579\n$ npm install\n$ npm test\nAlso, the tests are passing on Ubuntu 14.04 (using the current release):\n``` sh\nionicabizau@laptop:~/node-static$ npm test\n\nnode-static@0.7.3 test /home/ionicabizau/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.3\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n\u2713 OK \u00bb 28 honored (0.151s) \n``\n. I installed Windows 7 in my VBox. The tests fail when usingkeyinstead offilepathand there is one error whenfilepath` is used.\n\nCannot reproduce the issue with serving hello.html:\njs\nvar static = require('node-static');\n// var Path = require(\"path\");\n// var file = new static.Server(Path.join(process.cwd(), 'public'), { cache: 7200, headers: {'X-Hello':'World!'} });\nvar file = new static.Server('./public', { cache: 7200, headers: {'X-Hello':'World!'} });\nrequire('http').createServer(function (request, response) {\n    file.serve(request, response, function (err, res) {\n        if (err) {\n       console.error(\"> Error serving \" + request.url + \" - \" + err.message);\n           response.writeHead(err.status, err.headers);\n           response.end();\n        } else {\n           console.log(\"> \" + request.url + \" - \" + res.message);\n        }\n    });\n}).listen(8080);\nconsole.log(\"> node-static is listening on http://127.0.0.1:8080\");\nThe file is correctly served in both cases.\nRelevant output:\n``` sh\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> npm test\n\nnode-static@0.7.3 test C:\\Users\\John\\Documents\\node-static\nvows --spec --isolate\n\n? node-static\nonce an http server is listening with a callback\n    \u221a should be listening\n  streaming a 404 page\n    \u221a should respond with 404\n    \u221a should respond with the streamed content\n  once an http server is listening without a callback\n    \u221a should be listening\n  requesting a file not found\n    \u221a should respond with 404\n  requesting a malformed URI\n    \u221a should respond with 400\n  serving hello.txt\n    \u221a should respond with 200\n    \u221a should respond with text/plain\n    \u221a should respond with hello world\n  serving directory index\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  serving index.html from the cache\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  requesting with If-None-Match\n    \u221a should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u221a -should respond with a 200\n  requesting POST\n    \u221a should respond with 200\n    \u221a should not be empty\n  requesting HEAD\n    \u221a should respond with 200\n    \u221a head must has no body\n  requesting headers\n    \u221a should respond with node-static/0.7.3\n  addings custom mime types\n    \u221a should add woff\n  serving subdirectory index\n    \u221a should respond with 200\n    \u221a should respond with text/html\n  redirecting to subdirectory index\n    \u221a should respond with 301\n    \u221a should respond with location header\n    \u221a should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u221a should respond with 404\n? Errored \u00bb 1 errored (0.000s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]>\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> git diff\ndiff --git a/lib/node-static.js b/lib/node-static.js\nindex ebb748b..d40eac5 100644\n--- a/lib/node-static.js\n+++ b/lib/node-static.js\n@@ -269,8 +269,8 @@ Server.prototype.respondNoGzip = function (pathname, status,\n         finish(304, headers);\n     } else {\n         res.writeHead(status, headers);\n-\n-        this.stream(key, files, new(buffer.Buffer)(stat.size), res, function (e\n+        debugger\n+        this.stream(pathname, files, new(buffer.Buffer)(stat.size), res, functi\n             if (e) { return finish(500, {}) }\n             finish(status, headers);\n         });\nC:\\Users\\John\\Documents\\node-static [master +1 ~1 -0 !]> git checkout .\nC:\\Users\\John\\Documents\\node-static [master +1 ~0 -0 !]> npm test\n\nnode-static@0.7.3 test C:\\Users\\John\\Documents\\node-static\nvows --spec --isolate\n\n? node-static\nonce an http server is listening with a callback\n    \u221a should be listening\n  streaming a 404 page\n    \u221a should respond with 404\n    \u221a should respond with the streamed content\n  once an http server is listening without a callback\n    \u221a should be listening\n  requesting a file not found\n    \u221a should respond with 404\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.\ntxt\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt\\C:\\\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\hello.txt' }\n  requesting a malformed URI\n    \u221a should respond with 400\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  serving hello.txt\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:104\n    ? should respond with text/plain\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:107\n    ? should respond with hello world\n        \u00bb\n        actual expected\n    hello world\n     // node-static-test.js:110\n\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  serving directory index\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:119\n    ? should respond with text/html\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:122\n  serving index.html from the cache\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:131\n    ? should respond with text/html\n        \u00bb expected .,\n        got      undefined (==) // node-static-test.js:134\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should respond with 304\n        \u00bb expected 304,\n        got      500 (==) // node-static-test.js:151\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n  requesting with If-None-Match and If-Modified-Since\n    ? should respond with a 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:173\n|  requesting POST\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:183\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    ? should not be empty\n        \u00bb expected . to be not empty // node-static-test.js:186\n  requesting HEAD\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:196\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.\nhtml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html\\C:\n\\Users\\John\\Documents\\node-static\\test\\fixtures\\index.html' }\n    \u221a head must has no body\n  requesting headers\n    \u221a should respond with node-static/0.7.3\n  addings custom mime types\n    \u221a should add woff\n{ [Error: ENOENT, open 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\\nindex.html\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.html']\n  errno: 34,\n  code: 'ENOENT',\n  path: 'C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.h\ntml\\C:\\Users\\John\\Documents\\node-static\\test\\fixtures\\there\\index.html'\n }\n  serving subdirectory index\n    ? should respond with 200\n        \u00bb expected 200,\n        got      500 (==) // node-static-test.js:221\n    ? should respond with text/html\n        \u00bb expected ..,\n        got      undefined (==) // node-static-test.js:224\n  redirecting to subdirectory index\n    \u221a should respond with 301\n    \u221a should respond with location header\n    \u221a should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u221a should respond with 404\n? Errored \u00bb 1 errored (0.000s)\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n``\n. @UltCombo Can you provide a zip file containing the project that reproduces the issue?\n. Yes, seems thatpathnameisnullandkeybecomesfiles[0].\n. I added a little fix for checking if path is absolute. Is it enough? See pull request #126.\n. Glad to hear that. :smile: \n. You're welcome. I'm happy that I fixed this bug. :smile:\n. Same problem, deployed on production yesterday and things got fishy... :smile: \n. /cc @phstc \n. However, why cannot we [do justend: startByte + buffer.length`](https://github.com/cloudhead/node-static/commit/ed5702b97de23618949529e01165abd0a4ccbbf8#commitcomment-7934939)? (/cc @tchakabam )\n. > So we can release the version 0.7.4 including our latest PR as well.\n@phstc You mean version 0.7.6, right?\n. Glad to help. We deployed 0.7.5 on production and things started to crash. :smile: Then we downgraded to 0.7.4.\n. @tchakabam Yeah, sure.\n. Whoups, probably a VIM temp file. Removing it in next commits.\n. I added the test file and removed swap file.\nTests are passing:\n``` sh\n$ npm test\n\nnode-static@0.7.5 test /home/ionicabizau/node-static\nvows --spec --isolate\n\n\u2662 node-static \nonce an http server is listening with a callback\n    \u2713 should be listening\n  streaming a 404 page\n    \u2713 should respond with 404\n    \u2713 should respond with the streamed content\n  once an http server is listening without a callback\n    \u2713 should be listening\n  requesting a file not found\n    \u2713 should respond with 404\n  requesting a malformed URI\n    \u2713 should respond with 400\n  serving empty.css\n    \u2713 should respond with 200\n    \u2713 should respond with text/css\n    \u2713 should respond with empty string\n  serving hello.txt\n    \u2713 should respond with 200\n    \u2713 should respond with text/plain\n    \u2713 should respond with hello world\n  serving first 5 bytes of hello.txt\n    \u2713 should respond with 206\n    \u2713 should respond with text/plain\n    \u2713 should have content-length of 5 bytes\n    \u2713 should respond with hello\n  serving last 5 bytes of hello.txt\n    \u2713 should respond with 206\n    \u2713 should respond with text/plain\n    \u2713 should have content-length of 5 bytes\n    \u2713 should respond with world\n  serving directory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  serving index.html from the cache\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  requesting with If-None-Match\n    \u2713 should respond with 304\n  requesting with If-None-Match and If-Modified-Since\n    \u2713 should respond with a 200\n  requesting POST\n    \u2713 should respond with 200\n    \u2713 should not be empty\n  requesting HEAD\n    \u2713 should respond with 200\n    \u2713 head must has no body\n  requesting headers\n    \u2713 should respond with node-static/0.7.5\n  addings custom mime types\n    \u2713 should add woff\n  serving subdirectory index\n    \u2713 should respond with 200\n    \u2713 should respond with text/html\n  redirecting to subdirectory index\n    \u2713 should respond with 301\n    \u2713 should respond with location header\n    \u2713 should respond with empty string body\n  requesting a subdirectory (with trailing slash) not found\n    \u2713 should respond with 404\n  requesting a subdirectory (without trailing slash) not found\n    \u2713 should respond with 404\n\u2713 OK \u00bb 39 honored (0.163s) \n```\n. Rolling back my changes (but not the tests), the following error appears:\n``` sh\n\u2717 Errored \u00bb Asynchronous Error \n      in node-static \n      in test/integration/node-static-test.js\n\u2717 Errored \u00bb callback not fired \n      in serving empty.css \n      in node-static \n      in test/integration/node-static-test.js\n\u2717 Errored \u00bb 1 errored (0.000s) \nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\nThat's probably because the exception is thrown.\n. Yeps. :smile: Cool!\n. ",
    "FagnerMartinsBrack": "Alternatively, you can do this:\njs\nnew static.Server(pathToServe, {\n  headers: {\n    'cache-control': 'no-cache'\n  }\n});\nThat will override the cache headers, and is a publicly documented API. I believe that's why nobody cares about this issue.. Alternatively, you can do this:\njs\nnew static.Server(pathToServe, {\n  headers: {\n    'cache-control': 'no-cache'\n  }\n});\nThat will override the cache headers, and is a publicly documented API. I believe that's why nobody cares about this issue.. ",
    "shacharz": "Another one:\nIf the request url has a query string e.g: http://www.mysite.com/coolimg.jpg?1\nIt'll ignore the range request header as well.\n. It is, have you checked that these error don't reproduce with this new PR?\n. yea, obviously http://www.mysite.com/coolimg.jpg?1  is a place holder for\nyour own working resource :)\nOn Sun, Sep 7, 2014 at 7:26 PM, Pablo Cantero notifications@github.com\nwrote:\n\nNot with http://www.mysite.com/coolimg.jpg?1 because it's returning 404,\nbut other tests with range worked. There are also some tests\nhttps://github.com/tchakabam/node-static/blob/d49a6d68e70b24050c60f75c06f059dffff9a272/test/integration/node-static-test.js#L114-L160\ncovering it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cloudhead/node-static/issues/118#issuecomment-54751754\n.\n. hehe, happens to the best of us. Keep on the good work :+1: \n. Another one:\nIf the request url has a query string e.g: http://www.mysite.com/coolimg.jpg?1\nIt'll ignore the range request header as well.\n. It is, have you checked that these error don't reproduce with this new PR?\n. yea, obviously http://www.mysite.com/coolimg.jpg?1  is a place holder for\nyour own working resource :)\n\nOn Sun, Sep 7, 2014 at 7:26 PM, Pablo Cantero notifications@github.com\nwrote:\n\nNot with http://www.mysite.com/coolimg.jpg?1 because it's returning 404,\nbut other tests with range worked. There are also some tests\nhttps://github.com/tchakabam/node-static/blob/d49a6d68e70b24050c60f75c06f059dffff9a272/test/integration/node-static-test.js#L114-L160\ncovering it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cloudhead/node-static/issues/118#issuecomment-54751754\n.\n. hehe, happens to the best of us. Keep on the good work :+1: \n. \n",
    "UltCombo": "The issue seems to be here:\njs\nfile = file[0] === '/' ? file : path.join(pathname || '.', file);\nBoth pathname and file contain the full path to the file. I'll try to check the call stack for how these paths are being obtained, there is most likely a breaking change in the native Node API.\n. The issue is reproducible using Node 0.10 as well, I've updated the issue report.\nWeirdly enough, downgrading to the current stable release (0.7.3), file is undefined and pathname is null, so the control flow does not enter this conditional where the bug resides.\n. Thanks for the quick bug tracking @mrfabbri!\nAs I'm not familiar with this project, I've been getting lost easily in the logic flow for some reason while trying to trace this issue.\nAs for the absolute paths checking, we should be able to use one of the answers in this topic. Peoro's answer seems to be more robust yet still simple.\n. @IonicaBizau the commit 4858a8212c580fa831b9614825275f38791df579 corresponds to the 0.7.3 stable release, right? My test case works as expected with 0.7.3 as I've commented above.\n. @IonicaBizau \ngit clone https://github.com/UltCombo/node-static-test-125.git\ncd node-static-test-125\nnpm install\nnode index.js\nThen open http://localhost:8080/hello.html and hard refresh (Ctrl+F5). Issue happens when running node-static in Windows with the latest commit.\n. Note that although I'm using an absolute path -- path.join(process.cwd(), 'public') -- in the test case above, './public' would also throw the same error.\n. Nice, this fix seems to work fine. =]\n. Until now, I thought the bug was at the path.join(pathname || '.', file) part, but of course, that part is never reached for absolute paths which is case here. That is the only reason for that ternary operator, appending pathname only when file is not an absolute path. Oh gawd, no idea how I couldn't see that before. Thanks for the nice patch. =]\n. The issue seems to be here:\njs\nfile = file[0] === '/' ? file : path.join(pathname || '.', file);\nBoth pathname and file contain the full path to the file. I'll try to check the call stack for how these paths are being obtained, there is most likely a breaking change in the native Node API.\n. The issue is reproducible using Node 0.10 as well, I've updated the issue report.\nWeirdly enough, downgrading to the current stable release (0.7.3), file is undefined and pathname is null, so the control flow does not enter this conditional where the bug resides.\n. Thanks for the quick bug tracking @mrfabbri!\nAs I'm not familiar with this project, I've been getting lost easily in the logic flow for some reason while trying to trace this issue.\nAs for the absolute paths checking, we should be able to use one of the answers in this topic. Peoro's answer seems to be more robust yet still simple.\n. @IonicaBizau the commit 4858a8212c580fa831b9614825275f38791df579 corresponds to the 0.7.3 stable release, right? My test case works as expected with 0.7.3 as I've commented above.\n. @IonicaBizau \ngit clone https://github.com/UltCombo/node-static-test-125.git\ncd node-static-test-125\nnpm install\nnode index.js\nThen open http://localhost:8080/hello.html and hard refresh (Ctrl+F5). Issue happens when running node-static in Windows with the latest commit.\n. Note that although I'm using an absolute path -- path.join(process.cwd(), 'public') -- in the test case above, './public' would also throw the same error.\n. Nice, this fix seems to work fine. =]\n. Until now, I thought the bug was at the path.join(pathname || '.', file) part, but of course, that part is never reached for absolute paths which is case here. That is the only reason for that ternary operator, appending pathname only when file is not an absolute path. Oh gawd, no idea how I couldn't see that before. Thanks for the nice patch. =]\n. ",
    "tchakabam": "@phstc @cloudhead would be great if you guys could check this out! \n. @phstc @cloudhead @thbaja @dobesv hey does anybody here have some time to look at this PR? would be great, thanks!\n. wow cool thanks! :+1: and :beers: if we catch up somewhere ;)\n. :+1: for me!! thanks for the fix @IonicaBizau \n. @IonicaBizau Oh wait, can you add a test that will make sure we don't regress back to this issue? Like just test a request on an empty file, or whatever has caused the issue you fixed, and make sure it works now!\n. Yep, for me everything worked, it's all a matter of perspective ;)\n. @IonicaBizau I guess that's why its good to write tests :)\n. @dizel3d totally fine solution right there, thanks! :+1:  \ni just thought it might come in handy to just say for example static -x, which would in sum be a short-hand for the config you put above, to enable x-origin to anyone. analgous to the cache option which is also just a shorthand for a H option.\nbut it certainly is not a super important thing :)\n. is that exactly the command which you run? \nstatic -H '{\"Access-Control-Allow-Origin\": \"*\"}'. @andruhon tested with latest version, can't repro. which version are you seeing this?\nsounds more like the string you pass custom headers in on the command line is malformed, hence the JSON parse error.\nnote that you need the outer brackets, its not wellformed json otherwise ;). i can reproduce the error on linux when doing this: static -H '{Access-Control-Allow-Origin: \"*\"}'\nseems that Windows is somehow removing the double-quotes around the property name maybe? :)\ni think Node can't really do anything about it, the arguments must come in wrong from the shell already (i guess). \nmaybe try to see if there is something you need to do in Windows shell to get that right.. in the node-static readme? not sure if this is something we should document here. it seems like a pretty generic windows shell topic.\nglad we we re able to work it out :) :+1: . @phstc @cloudhead would be great if you guys could check this out! \n. @phstc @cloudhead @thbaja @dobesv hey does anybody here have some time to look at this PR? would be great, thanks!\n. wow cool thanks! :+1: and :beers: if we catch up somewhere ;)\n. :+1: for me!! thanks for the fix @IonicaBizau \n. @IonicaBizau Oh wait, can you add a test that will make sure we don't regress back to this issue? Like just test a request on an empty file, or whatever has caused the issue you fixed, and make sure it works now!\n. Yep, for me everything worked, it's all a matter of perspective ;)\n. @IonicaBizau I guess that's why its good to write tests :)\n. @dizel3d totally fine solution right there, thanks! :+1:  \ni just thought it might come in handy to just say for example static -x, which would in sum be a short-hand for the config you put above, to enable x-origin to anyone. analgous to the cache option which is also just a shorthand for a H option.\nbut it certainly is not a super important thing :)\n. is that exactly the command which you run? \nstatic -H '{\"Access-Control-Allow-Origin\": \"*\"}'. @andruhon tested with latest version, can't repro. which version are you seeing this?\nsounds more like the string you pass custom headers in on the command line is malformed, hence the JSON parse error.\nnote that you need the outer brackets, its not wellformed json otherwise ;). i can reproduce the error on linux when doing this: static -H '{Access-Control-Allow-Origin: \"*\"}'\nseems that Windows is somehow removing the double-quotes around the property name maybe? :)\ni think Node can't really do anything about it, the arguments must come in wrong from the shell already (i guess). \nmaybe try to see if there is something you need to do in Windows shell to get that right.. in the node-static readme? not sure if this is something we should document here. it seems like a pretty generic windows shell topic.\nglad we we re able to work it out :) :+1: . ",
    "bobappleyard": "Ah damn wrong tab\nThat'll teach me to code drunk\n. Ah damn wrong tab\nThat'll teach me to code drunk\n. ",
    "doot0": "Running static -h lists --gzip as the argument for this.\nHowever, it doesn't seem to actually do anything, at least for me.\n. Running static -h lists --gzip as the argument for this.\nHowever, it doesn't seem to actually do anything, at least for me.\n. ",
    "voltrevo": "Works for me, except you need to have the uncompressed file available too:\nhttps://github.com/cloudhead/node-static/issues/143\n(As mentioned on the issue, you can put an empty file in for the uncompressed version, which is also an easy way to confirm the gzip mode is actually working.)\n. Works for me, except you need to have the uncompressed file available too:\nhttps://github.com/cloudhead/node-static/issues/143\n(As mentioned on the issue, you can put an empty file in for the uncompressed version, which is also an easy way to confirm the gzip mode is actually working.)\n. ",
    "xiaoshan5733": "@aaronj1335  thank you!\nI found that static -a <my local IP> -p 9899 can work.\n. @aaronj1335  thank you!\nI found that static -a <my local IP> -p 9899 can work.\n. ",
    "flyingsky": "@aaronj1335 I have the same issue if I just run with command static. As @xiaoshan5733 said, if I add -a option, it works. The new issue is I cannot access with localhost or 127.0.0.1.\nTo solve this issue, I can change static to avoid use -a option. Then it works for ip/localhost/127.0.0.1.\n. @aaronj1335 I have the same issue if I just run with command static. As @xiaoshan5733 said, if I add -a option, it works. The new issue is I cannot access with localhost or 127.0.0.1.\nTo solve this issue, I can change static to avoid use -a option. Then it works for ip/localhost/127.0.0.1.\n. ",
    "florsignol": "Hi, I'm having this same issue. Workaround is to use $ static -a 192.168.###.### but other node.js servers don't have this issue. I want to be able to just type $ static . and run a quick server from the local directory, and have another computer/smartphone visit my ip address and just work.. Hi, I'm having this same issue. Workaround is to use $ static -a 192.168.###.### but other node.js servers don't have this issue. I want to be able to just type $ static . and run a quick server from the local directory, and have another computer/smartphone visit my ip address and just work.. ",
    "eush77": "If 8080 is critical, why not specify is using --port?\nAnyway, I just spotted another problem: default value for the option\nprinted with --help will depend on the environment static --help is\nrunning in. This is confusing.\nMaybe the better idea would be to introduce another option for that\n(--env-port) or another value for --port (--port=env).\nWhat do you think?\n2014-10-15 21:18 GMT+04:00 Pablo Cantero notifications@github.com:\n\n@eush77 https://github.com/eush77 could it cause problems for people\nusing it without any arg? Like it will start using their local env PORT\ninstead of 8080?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cloudhead/node-static/pull/136#issuecomment-59241650.\n. Implemented --port=env approach.\n. ping @cloudhead @phstc\n. @oncletom Thank you! This is much better.\n. If 8080 is critical, why not specify is using --port?\n\nAnyway, I just spotted another problem: default value for the option\nprinted with --help will depend on the environment static --help is\nrunning in. This is confusing.\nMaybe the better idea would be to introduce another option for that\n(--env-port) or another value for --port (--port=env).\nWhat do you think?\n2014-10-15 21:18 GMT+04:00 Pablo Cantero notifications@github.com:\n\n@eush77 https://github.com/eush77 could it cause problems for people\nusing it without any arg? Like it will start using their local env PORT\ninstead of 8080?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cloudhead/node-static/pull/136#issuecomment-59241650.\n. Implemented --port=env approach.\n. ping @cloudhead @phstc\n. @oncletom Thank you! This is much better.\n. \n",
    "oncletom": "Well, you already have the --port argument, so use it this way:\nbash\nstatic --port $PORT ./public\nIf you want to set a default in case $PORT is undefined:\nbash\nstatic --port ${PORT:-3000} ./public\nIf you have access to the CLI, you are already at the best place to define the port, like in a Procfile:\nweb: ./node_modules/.bin/static -a 0.0.0.0 -p $PORT ./public\n. Well, you already have the --port argument, so use it this way:\nbash\nstatic --port $PORT ./public\nIf you want to set a default in case $PORT is undefined:\nbash\nstatic --port ${PORT:-3000} ./public\nIf you have access to the CLI, you are already at the best place to define the port, like in a Procfile:\nweb: ./node_modules/.bin/static -a 0.0.0.0 -p $PORT ./public\n. ",
    "cphoover": "why the hell hasn't this been merged? It was submitted in 2014... comeons now. Fixed by PR: https://github.com/cloudhead/node-static/pull/189. why the hell hasn't this been merged? It was submitted in 2014... comeons now. Fixed by PR: https://github.com/cloudhead/node-static/pull/189. ",
    "mayo": "Thank you! :)\n. Thank you! :)\n. ",
    "sdenel": "Definitely not the right place.\n. Definitely not the right place.\n. ",
    "NataliaLKB": ":+1: \n. :+1: \n. ",
    "bwackwat": "I cannot figure this out either and it is maddening. I don't want to use express, but I would love to just replace some {{TEMPALTE TEXT}}... Maybe there is a solution?\n. I cannot figure this out either and it is maddening. I don't want to use express, but I would love to just replace some {{TEMPALTE TEXT}}... Maybe there is a solution?\n. ",
    "azaslavsky": "Also wondering about this, would like to do a simple regex replace on a static file I'm serving for local development.  Any ideas?\n. Also wondering about this, would like to do a simple regex replace on a static file I'm serving for local development.  Any ideas?\n. ",
    "Mattijah": "This is pretty pointless in this case.\n- 'cache' and 'serverInfo' are defined strings not some unknown values provided by the client.\n- There is checking of the type anyway.\nSo for example this\nif ('cache' in this.options) {\n    if (typeof(this.options.cache) === 'number') {\n        this.cache = this.options.cache;\n    } else if (! this.options.cache) {\n        this.cache = false;\n    }\n }\ncould be\nif (typeof this.options.cache === 'number' || this.options.cache === false) {\n   this.cache = this.options.cache;\n}\n. This is pretty pointless in this case.\n- 'cache' and 'serverInfo' are defined strings not some unknown values provided by the client.\n- There is checking of the type anyway.\nSo for example this\nif ('cache' in this.options) {\n    if (typeof(this.options.cache) === 'number') {\n        this.cache = this.options.cache;\n    } else if (! this.options.cache) {\n        this.cache = false;\n    }\n }\ncould be\nif (typeof this.options.cache === 'number' || this.options.cache === false) {\n   this.cache = this.options.cache;\n}\n. ",
    "mrozbarry": "Just to update, I sorted out that my code was only working for 200s (when the file just existed), and after fiddling a bit, this ended up working:\npublic.serve(request, response, function(error, res) {\n    if (error) {\n      console.error('Could not serve ', request.url, error.message);\n      if ([404, 500].indexOf(error.status) >= 0) {\n        public.serveFile('index.html', 404, {}, request, response);\n      }\n    }\nI also went into index.html, and added this to the head:\n<base href=\"/\" />\nThis is now working and all my assets are loading.\nWhat was happening before was that my page actually loaded fine, but when it hit a 404, it would send either no bytes for nodia.js (since /my/pushState/url/nodia.js didn't exist), or the 404 tried to force-load my index.html (which obviously isn't javascript).\nEdit: I should note that I was purposefully avoiding express, since it adds a lot of bulk and features that I wasn't ever going to use (like routing).  My project did start off with express, though, but it was making less and less sense to use it.  Now, if you're building out a restful backend or something, it might be worth it, but I'm doing my own restful stuff via websockets, so again, it was something I didn't need express for.\nSorry that felt like a rant, I've just had a lot of people to tell me to use express and when I saw how unnecessary it was, it sort of bothered me that people were more willing to add bulk to their app than to solve smaller problems on their own.\n. Just to update, I sorted out that my code was only working for 200s (when the file just existed), and after fiddling a bit, this ended up working:\npublic.serve(request, response, function(error, res) {\n    if (error) {\n      console.error('Could not serve ', request.url, error.message);\n      if ([404, 500].indexOf(error.status) >= 0) {\n        public.serveFile('index.html', 404, {}, request, response);\n      }\n    }\nI also went into index.html, and added this to the head:\n<base href=\"/\" />\nThis is now working and all my assets are loading.\nWhat was happening before was that my page actually loaded fine, but when it hit a 404, it would send either no bytes for nodia.js (since /my/pushState/url/nodia.js didn't exist), or the 404 tried to force-load my index.html (which obviously isn't javascript).\nEdit: I should note that I was purposefully avoiding express, since it adds a lot of bulk and features that I wasn't ever going to use (like routing).  My project did start off with express, though, but it was making less and less sense to use it.  Now, if you're building out a restful backend or something, it might be worth it, but I'm doing my own restful stuff via websockets, so again, it was something I didn't need express for.\nSorry that felt like a rant, I've just had a lot of people to tell me to use express and when I saw how unnecessary it was, it sort of bothered me that people were more willing to add bulk to their app than to solve smaller problems on their own.\n. ",
    "janmonschke": "@madhavan020985 You can pass those headers into the config object:\njavascript\nvar staticServer = new nodeStatic.Server({\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET',\n    'Access-Control-Allow-Headers': 'Content-Type'\n  }\n});\n. Ran into the same problem today and this fix made it work :) @cloudhead looks good to merge\n. @cloudhead Thx for the merge :) Could you release a new version?\n. @madhavan020985 You can pass those headers into the config object:\njavascript\nvar staticServer = new nodeStatic.Server({\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET',\n    'Access-Control-Allow-Headers': 'Content-Type'\n  }\n});\n. Ran into the same problem today and this fix made it work :) @cloudhead looks good to merge\n. @cloudhead Thx for the merge :) Could you release a new version?\n. ",
    "mdhvnrsprm": "thanks folks.....\n. thanks folks.....\n. ",
    "trendsetter37": "Thanks.\n. Thanks.\n. ",
    "Slayer95": "You can just pass mode: '0666', and the fs module takes care of the conversion.\n. You can just pass mode: '0666', and the fs module takes care of the conversion.\n. ",
    "ripper2hl": "any ideas from this ? , i need send video files with streaming for send to chromecast and i want server directory from absolute path, example /home/user/videos/\n. any ideas from this ? , i need send video files with streaming for send to chromecast and i want server directory from absolute path, example /home/user/videos/\n. ",
    "xjmalm": "I also want to use node-static with Express, any suggestion?\n. I also want to use node-static with Express, any suggestion?\n. ",
    "waynebloss": "node-static 0.7.6\n. OK, it's most likely a Windows issue since when I changed it to static -H \"{\"\"Cache-Control\"\": \"\"no-cache, must-revalidate\"\"}\", it worked.\n. node-static 0.7.6\n. OK, it's most likely a Windows issue since when I changed it to static -H \"{\"\"Cache-Control\"\": \"\"no-cache, must-revalidate\"\"}\", it worked.\n. ",
    "mercmobily": "This seems a like a minor, although legit, fix. Any chance to get this merged?\n. This seems a like a minor, although legit, fix. Any chance to get this merged?\n. ",
    "prajwalkman": "bytes=0-1 is a two byte read according to the spec. This doesn't fix a 1 byte (bytes=0-0) read. I submitted another PR that updates this.\n. bytes=0-1 is a two byte read according to the spec. This doesn't fix a 1 byte (bytes=0-0) read. I submitted another PR that updates this.\n. ",
    "blobor": "Hello?\nIs anybody here?\n. Hello?\nIs anybody here?\n. ",
    "stevenvachon": "Could also switch away from \"mime\" package to https://github.com/Hypercubed/mime-lookup\n. Hello?\n. Forget it.\nSwitching to st fixed this issue.\n. Everything that this library does, st does better.\n. Could also switch away from \"mime\" package to https://github.com/Hypercubed/mime-lookup\n. Hello?\n. Forget it.\nSwitching to st fixed this issue.\n. Everything that this library does, st does better.\n. ",
    "CezaryDanielNowak": "I had the same issue, and solved it by:\n``` javascript\nvar SERVER_PATH = './dist';\nvar SERVER_PORT = 8080;\nfunction runServer() {\n  var file = new static.Server(SERVER_PATH);\n  require('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n      // check if last part of address has extension, if not serve html\n      if (request.url.split('/').pop().indexOf('.') === -1) {\n        file.serveFile(request.url, 200, {'Content-Type': 'text/html'}, request, response);\n      } else {\n        file.serve(request, response);\n      }\n    }).resume();\n  }).listen(SERVER_PORT);\n}\n``\n. @cloudhead,file.serve(...)` should really have some way to manipulate headers :-)\n. I had the same issue, and solved it by:\n``` javascript\nvar SERVER_PATH = './dist';\nvar SERVER_PORT = 8080;\nfunction runServer() {\n  var file = new static.Server(SERVER_PATH);\n  require('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n      // check if last part of address has extension, if not serve html\n      if (request.url.split('/').pop().indexOf('.') === -1) {\n        file.serveFile(request.url, 200, {'Content-Type': 'text/html'}, request, response);\n      } else {\n        file.serve(request, response);\n      }\n    }).resume();\n  }).listen(SERVER_PORT);\n}\n``\n. @cloudhead,file.serve(...)` should really have some way to manipulate headers :-)\n. ",
    "leviwheatcroft": "PR #184 would allow something like this:\n``` javascript\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        response.setHeader('Content-Type', 'text/html') // explicitly override header here\n        file.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n. Currently no.. but PR #184 would allow something like this:\n``` javascript\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        response.setHeader('Content-Type', 'text/html') // explicitly override content type here\n        file.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n. Actually this issue is a dupe of #169 \n. PR #184 would allow something like this:\n``` javascript\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        response.setHeader('Content-Type', 'text/html') // explicitly override header here\n        file.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n. Currently no.. but PR #184 would allow something like this:\n``` javascript\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        response.setHeader('Content-Type', 'text/html') // explicitly override content type here\n        file.serve(request, response);\n    }).resume();\n}).listen(8080);\n```\n. Actually this issue is a dupe of #169 \n. ",
    "ravinggenius": "I'm also getting this issue. I'm developing a simple static site with JSPM and System.js. One of the vendor files is located at jspm_modules/npm/es5-ext@0.10.11/string/#/contains.js, which is requested as jspm_modules/npm/es5-ext@0.10.11/string/%23/contains.js. node-static cli cannot find the resource and returns a 404.\n. I'm also getting this issue. I'm developing a simple static site with JSPM and System.js. One of the vendor files is located at jspm_modules/npm/es5-ext@0.10.11/string/#/contains.js, which is requested as jspm_modules/npm/es5-ext@0.10.11/string/%23/contains.js. node-static cli cannot find the resource and returns a 404.\n. ",
    "sirudog": "@cloudhead Thanks for closing this issue without any explanation or action done... Unstaring and ditching this project.. @cloudhead Thanks for closing this issue without any explanation or action done... Unstaring and ditching this project.. ",
    "marr": "This would be helpful. Is there any way to do this now?\n. This would be helpful. Is there any way to do this now?\n. ",
    "dizel3d": "The PR covers issue #175\n. Set the headers yourself, e.g.\nstatic -H '{\"Access-Control-Allow-Origin\": \"*\"}'. The PR covers issue #175\n. Set the headers yourself, e.g.\nstatic -H '{\"Access-Control-Allow-Origin\": \"*\"}'. ",
    "mmcdermott": "Thanks for the quick review! How's this look?\n. Thanks for the quick review! How's this look?\n. ",
    "preventdefault": "Hi,\nthe current implementation doesn\u00b4t work as expected, respectively is wrong.\nIf the --spa option is set, the index file will be served for all files instead for all non-files\nThis line\nif (argv['spa'] && request.url.indexOf(\".\") !== -1) {\nshould be rewritten to\nif (argv['spa'] && request.url.indexOf(\".\") === -1) {\nAnd why do you use a 500 status code to serve non-files. 500 means there is a server error, but this is not the case.\nBest regards\nMario\n. Hi,\nthe current implementation doesn\u00b4t work as expected, respectively is wrong.\nIf the --spa option is set, the index file will be served for all files instead for all non-files\nThis line\nif (argv['spa'] && request.url.indexOf(\".\") !== -1) {\nshould be rewritten to\nif (argv['spa'] && request.url.indexOf(\".\") === -1) {\nAnd why do you use a 500 status code to serve non-files. 500 means there is a server error, but this is not the case.\nBest regards\nMario\n. ",
    "c4milo": "@cloudhead ping. This is one is going to take you 5 secs to review :)\n. @cloudhead ping. This is one is going to take you 5 secs to review :)\n. ",
    "FruitieX": "Oops, almost opened an identical pull request, but luckily found this one. Anyway here's what this PR fixes:\nCurrent behaviour (SPA mode):\n- GET /foo/bar => Serve file /foo/bar\n- GET /foo.js => Serve file /index.html\nExpected behaviour (SPA mode):\n- GET /foo/bar => Serve file /index.html\n- GET /foo.js => Serve file /foo.js\nPlease merge, as SPA mode is broken with this typo in place. :)\n. Oops, almost opened an identical pull request, but luckily found this one. Anyway here's what this PR fixes:\nCurrent behaviour (SPA mode):\n- GET /foo/bar => Serve file /foo/bar\n- GET /foo.js => Serve file /index.html\nExpected behaviour (SPA mode):\n- GET /foo/bar => Serve file /index.html\n- GET /foo.js => Serve file /foo.js\nPlease merge, as SPA mode is broken with this typo in place. :)\n. ",
    "jaydp17": "When is this going live on npm ?\n. When is this going live on npm ?\n. ",
    "lightswitch05": "Any comments or thoughts on this pull request?\n. Any comments or thoughts on this pull request?\n. ",
    "v29neil": "any progress on this feature ?\n. any progress on this feature ?\n. ",
    "nhrones": "I'm getting same warnings, but only when I'm serving to Chrome-on-Android?. I'm getting same warnings, but only when I'm serving to Chrome-on-Android?. ",
    "hamczu": "Any updates here? can this PR be merged? if not, can you please give us a hint how to disable cache in CLI mode? The best I got so far was:\nstatic -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\nthen as a result I had 2 headers in the response:\nCache-Control: no-cache, must-revalidate\ncache-control: max-age=3600\nwhich is a bit confusing. Any updates here? can this PR be merged? if not, can you please give us a hint how to disable cache in CLI mode? The best I got so far was:\nstatic -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\nthen as a result I had 2 headers in the response:\nCache-Control: no-cache, must-revalidate\ncache-control: max-age=3600\nwhich is a bit confusing. ",
    "Alex0007": "@cloudhead this needs to be merged. @cloudhead this needs to be merged. ",
    "andruhon": "It now explodes with\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\Users\\andruhon\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3. @tchakabam\nWindows 10 PS\n```\nPS C:\\temp\\test-static> node --version\nv9.2.0\nPS C:\\temp\\test-static> gci\nDirectory: C:\\temp\\test-static\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----       22/11/2017  10:54 AM             90 index.html\nPS C:\\temp\\test-static> npm install node-static\nnpm WARN saveError ENOENT: no such file or directory, open 'C:\\temp\\test-static\\package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open 'C:\\temp\\test-static\\package.json'\nnpm WARN test-static No description\nnpm WARN test-static No repository field.\nnpm WARN test-static No README data\nnpm WARN test-static No license field.\n\nnode-static@0.7.10\nadded 6 packages in 2.919s\n\nPS C:\\temp\\test-static> .\\node_modules.bin\\static -H '{\"Access-Control-Allow-Origin\": \"\"}'\nundefined:1\n{Access-Control-Allow-Origin: }\n ^\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\temp\\test-static\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3\n```\n```\nPS C:\\temp\\test-static> npm i node-static -g\nC:\\Users\\User\\AppData\\Roaming\\npm\\static -> C:\\Users\\User\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js\n+ node-static@0.7.10\nadded 6 packages in 0.787s\nPS C:\\temp\\test-static> static -H '{\"Access-Control-Allow-Origin\": \"\"}'\nundefined:1\n{Access-Control-Allow-Origin: }\n ^\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\Users\\User\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3\n```\nMaybe it is Windows issue or, node v9.2.0 issue. I'll check it on another platform and let you know. Works fine in LWS with ubuntu xenial, so this must be a windows issue.\nuser@andr-pc: test-static$ node --version\nv9.2.0\nuser@andr-pc: test-static$ ./node_modules/.bin/static -p 8888\nserving \".\" at http://127.0.0.1:8888\n11:31:22 [200]: /\n11:31:22 [404]: /favicon.ico\n^C\nuser@andr-pc: test-static$ ./node_modules/.bin/static -p 8888 -H '{\"Access-Control-Allow-Origin\": \"*\"}'\nserving \".\" at http://127.0.0.1:8888\n11:32:06 [200]: /. Ah, right, the quotes in PowerShell should be escapet even if they are not the same as string wrappers:\nPS c:\\somewhere> static -H '{\\\"Access-Control-Allow-Origin\\\": \\\"*\\\"}' works in PS\nOld good CMD does't support single quote wrappers at all, so the string should be\nc:\\somewhere> static -H \"{\\\"Access-Control-Allow-Origin\\\": \\\"*\\\"}\"\nNow I remembered that I had similar issue once before. I think it should be documented in the README. It now explodes with\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\Users\\andruhon\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3. @tchakabam\nWindows 10 PS\n```\nPS C:\\temp\\test-static> node --version\nv9.2.0\nPS C:\\temp\\test-static> gci\nDirectory: C:\\temp\\test-static\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----       22/11/2017  10:54 AM             90 index.html\nPS C:\\temp\\test-static> npm install node-static\nnpm WARN saveError ENOENT: no such file or directory, open 'C:\\temp\\test-static\\package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open 'C:\\temp\\test-static\\package.json'\nnpm WARN test-static No description\nnpm WARN test-static No repository field.\nnpm WARN test-static No README data\nnpm WARN test-static No license field.\n\nnode-static@0.7.10\nadded 6 packages in 2.919s\n\nPS C:\\temp\\test-static> .\\node_modules.bin\\static -H '{\"Access-Control-Allow-Origin\": \"\"}'\nundefined:1\n{Access-Control-Allow-Origin: }\n ^\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\temp\\test-static\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3\n```\n```\nPS C:\\temp\\test-static> npm i node-static -g\nC:\\Users\\User\\AppData\\Roaming\\npm\\static -> C:\\Users\\User\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js\n+ node-static@0.7.10\nadded 6 packages in 0.787s\nPS C:\\temp\\test-static> static -H '{\"Access-Control-Allow-Origin\": \"\"}'\nundefined:1\n{Access-Control-Allow-Origin: }\n ^\nSyntaxError: Unexpected token A in JSON at position 1\n    at JSON.parse ()\n    at Object. (C:\\Users\\User\\AppData\\Roaming\\npm\\node_modules\\node-static\\bin\\cli.js:90:46)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Function.Module.runMain (module.js:682:10)\n    at startup (bootstrap_node.js:191:16)\n    at bootstrap_node.js:613:3\n```\nMaybe it is Windows issue or, node v9.2.0 issue. I'll check it on another platform and let you know. Works fine in LWS with ubuntu xenial, so this must be a windows issue.\nuser@andr-pc: test-static$ node --version\nv9.2.0\nuser@andr-pc: test-static$ ./node_modules/.bin/static -p 8888\nserving \".\" at http://127.0.0.1:8888\n11:31:22 [200]: /\n11:31:22 [404]: /favicon.ico\n^C\nuser@andr-pc: test-static$ ./node_modules/.bin/static -p 8888 -H '{\"Access-Control-Allow-Origin\": \"*\"}'\nserving \".\" at http://127.0.0.1:8888\n11:32:06 [200]: /. Ah, right, the quotes in PowerShell should be escapet even if they are not the same as string wrappers:\nPS c:\\somewhere> static -H '{\\\"Access-Control-Allow-Origin\\\": \\\"*\\\"}' works in PS\nOld good CMD does't support single quote wrappers at all, so the string should be\nc:\\somewhere> static -H \"{\\\"Access-Control-Allow-Origin\\\": \\\"*\\\"}\"\nNow I remembered that I had similar issue once before. I think it should be documented in the README. ",
    "cpsubrian": "Also, there are breaking changes in the 2.0.0 API.. Should resolve #195 . Also, there are breaking changes in the 2.0.0 API.. Should resolve #195 . ",
    "jishi": "Installing mime@1.4.0 manually in my own project pegged node-static to use the same version (because of the range) which is a workaround for now at least. . Installing mime@1.4.0 manually in my own project pegged node-static to use the same version (because of the range) which is a workaround for now at least. . ",
    "fmalk": "I had to peg mine at 1.3.6. I had to peg mine at 1.3.6. ",
    "gedefran": "Hi @cloudhead, do you have a timeline to merge this and publish a new npm module? Also would you consider adding a step to npm shrinkwrap before publishing to npm?. Hi @cloudhead, do you have a timeline to merge this and publish a new npm module? Also would you consider adding a step to npm shrinkwrap before publishing to npm?. ",
    "hoperyy": "@cloudhead Thanks too for your tools. @cloudhead Thanks too for your tools. ",
    "vkarpov15": "Thanks. Can you also change the use of >= in package.json? Otherwise I need to get a replacement static site lib, don't want to deal with this again.. Thanks. Can you also change the use of >= in package.json? Otherwise I need to get a replacement static site lib, don't want to deal with this again.. "
}