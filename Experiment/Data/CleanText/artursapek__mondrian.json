{
    "artursapek": "This needs to happen. Low-hanging fruit for any Windows people who want to contribute! Or I could steal my wife's laptop for an hour and do it myself.\nRegardless, it's at the top of my list right now. Thanks.\n. There are several ways to detect if the user is on a Mac.\nFor example: http://www.javascripter.net/faq/operatin.htm\n. Works great! Thanks. This made the dev setup much better. Merged.\n. SVG does support embedding raster images. It's a good idea.\n. It could be done with drag & drop, with an upload field, with a url field...\nThe input isn't as important as the internal representation class that would have to be written for the <image> element. It will have to extend Monsvg like every other SVG element representation class (see the entire src/geometry directory). That's how Mondrian handles all SVG elements.\n. @davelab6 what do you mean by that? Was there a recent change to the format?\nI'm not sure about doing it client-side, but I know this could be implemented pretty easily with a backend endpoint that uses Inkscape to convert the file, and sends it back. (There's a simple backend for Mondrian on Heroku for file permalinks and embeds. I haven't open-sourced yet because it has sensitive data - S3 keys and such. I need to clean it up.)\n. It would be taking two steps back to try to support AI, and nobody wants to develop that anyway.\nIt wouldn't be taking two steps back to make a simple system that does the conversions automatically, opening up Mondrian as an option for working with that many more existing files, at zero cost to users. .ai is the default choice when saving from Illustrator. I'd guess that most vector files are .ai files.\nMondrian doesn't want to be Illustrator. If I liked Illustrator, I never would have started this project.\n. Great idea. I'll look into it. Shouldn't be hard, since the app already works offline.\n. The discussion around this is happening in #13, so I'm closing this issue as a dupe (even though it came first).\ntl;dr: it's been submitted to Mozilla's app marketplace, and the Chrome app store is next.\n. Hahah I've noticed this as well. Thank you for reporting it and writing up the repro steps.\n. Ouch. Thanks for the report.\n. Thanks for the report. The history system is still a bit patchy. I'll take a look at it.\n. You're right, Illustrator lets you do this by holding down Alt. I haven't added that ability yet. It's on the list now!\n. Hahah. It seems like a hardware problem. Does the tablet's pen tip act as a mouse on other websites? I used to have an Intuos and I remember the computer just thinking it was a mouse.\n. I have no idea, sorry. Don't have a way to try it myself.\nIf you figure out the problem you could fix it and open a PR. The code having to do with the cursor is here. It's a class that keeps the state of the cursor to achieve things like dragging and double-clicking. I may have done something to break your tablet there, but again if the computer just thinks it's a mouse I don't understand what would cause your mouse to work and your tablet to not.\n. How do you know it's the drag support? Were you able to fix it by disabling some code?\n. Oh, I get it. Yes. \"Clicks\" in Mondrian are:\n1. Mouse down\n2. Mouse up iff the mouse has not changed position\nSo your problem is it's hard to push down with a stylus without moving it at all.\nI think you're right on. A minimum drag distance (2-3px) could help for tools that don't require dragging. You could also implement a slightly higher threshold for tools that don't need dragging.\nThis would obviously take some testing and adjusting. Since you're the one with the Intuos, if you get something working that feels good to you, I'd love to see it in a PR. :)\n. You need to drag to draw, and dragging on phones is scrolling. There might be a way to get around this with JavaScript, but I don't have a tablet to test on yet.\n. Pathfinder was the bit that I was still working on when I decided to open this project up. It's not available through the UI yet because it's so unfinished. In fact it should be on a seperate feature branch.\nIt's been by far the hardest part of building Mondrian. That also means it's the most interesting, so I definitely want to have a native pathfinder implementation in the codebase. I think having a pathfinder utility would be great, but it's not a top priority right now so I'm not in a hurry to get it out.\nFor the time being I'll check out clipper. If it's not too hard to get it to work in a way that feels \"native\" I'll consider merging something temporary in, but if it doesn't support beziers yet then I don't think there's much of a chance. Thanks for the suggestion.\n. I have an attack strategy for Pathfinder - I think I have the algorithm worked out on paper. I'm working on visual documentation at artur.co/pathfinder.\nI just haven't finished implementing it yet because there were some problems with the implementation of the linked list that stores a path's points. I don't think it's too far off if I focus on it for a while.\n. I was unaware of the future changes to inheritance. That's awesome to know.\nThis sounds like a good idea. I'd love to see this implemented on a branch so I've labeled this as an enhancement for people who are looking to contirbute.\nThe text tool is probably the one I'm least confident in right now to be honest. Thanks for the suggestion.\n. Yep, doing this for Firefox and Chrome are very high on my list.\nThanks for the resources. If you wanted to, putting together the one for Firefox would be a tremendous help.\n. I like this. Mozilla seems to have set this up well. Getting this done for both Mozilla and Chrome are the next things I'll do.\nOnly thing I'm confused about is how I access my apps after I've installed them?! I'm just using FF on my Mac, so the experience may be better on a Firefox OS device like a tablet. But for example, I installed this app and nothing came up to show me how to launch it. I don't see any way to access it within Firefox, except revisiting that marketplace page and clicking Launch where the Install button used to be. Am I missing something?\n\nChrome's app screen is a much better experience (it was even made a mandatory part of the bookmarks bar recently).\n\n. Ah! That's non-obvious, but pretty cool now that I understand. Mozilla needs to be clearer about that.\nI'm working on adding a simple .webapp manifest now to see how this works.\n. Yeah, it silently installs it and does nothing. It's weird. Anyway, I'm working on making the app offline-friendly with a cache manifest. I'll update you when I have something working in Mozilla's marketplace.\n. \nSubmitted to the Mozilla marketplace! They claim it will be reviewed within one work day. I've also taken full advantage of the HTML5 application cache so Mondrian can now be accessed offline in a regular browser (after you cache all the assets once).\nThe caveat there is now every time the app is deployed, the latest commit SHA in this line of code must change to invalidate the cache, or returning users won't see the effects of the deploy.\nChrome store is next. I'll get to that sometime this week. Thanks for getting this started. Exciting to have this be in an official app store.\n. We are in the Mozilla marketplace! https://marketplace.firefox.com/app/mondrian/\nI installed it and it seems to work pretty well.\n\n\nBest part is you can go truly fullscreen with it on Mac. In fact there's an option to have the app launch in fullscreen, I'm thinking of turning that on.\nAnd I noticed two bugs:\n- The + and - hotkeys don't work (for zoom in and zoom out).\n- The app doesn't launch when I'm offline even though there's an appcache and everything. (This might be Mozilla's fault because I think I support it correctly). \n. They're not duplicates, @Fishrock123. I call @refreshAfterZoom() on key-up because it's an expensive operation that only has to happen once after several sequential zoom level changes, so if you hold down the plus sign and it fires multiple times this happens:\nzoomIn()\nzoomIn()\nzoomIn()\nrefreshAfterZoom()\nas opposed to this which would be slower:\nzoomIn()\nrefreshAfterZoom()\nzoomIn()\nrefreshAfterZoom()\nzoomIn()\nrefreshAfterZoom()\nPerhaps it's worth writing a comment explaining this.\n. It's hard to test things on Mozilla's platform because there's no dev tools available within their little standalone environment (that I'm aware of). I know there's a Firefox OS simulator. I'll try to investigate in there. I'll assume it's my fault until I can prove that it's theirs, but right now I can't imagine why those hotkeys would be the only ones that don't work.\n. Ah, yes. I think you're right. I'd remove the ones in hotkeys.coffee and keep those.\n. @fbender I fixed the nginx config.\n```\nM \u2206 wget http://mondrian.io/app/mondrian.appcache\n--2014-02-02 20:04:48--  http://mondrian.io/app/mondrian.appcache\nResolving mondrian.io... 66.228.45.178\nConnecting to mondrian.io|66.228.45.178|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2114 (2.1K) [text/manifest]\nSaving to: 'mondrian.appcache'\n100%[====================================================================================================================================================================================================>] 2,114       --.-K/s   in 0.004s\n2014-02-02 20:04:48 (572 KB/s) - 'mondrian.appcache' saved [2114/2114]\n```\nHowever this appcache thing is more of a pain in the ass than I expected. I've found a quirk in its behavior that may be a deal-breaker - I'm going to stop using it unless there's a way to fix that.\nIf we keep it, we also need to do something so that the appcache doesn't get served when developing locally, while keeping it a static site; I don't want to move to a dynamic server of any kind for performance reasons.\nNot very happy with how the appcache API works, as far as I understand it.\nAnd @jokeyrhyme, I'm working on getting it in the Chrome app store now. If I don't get it in tonight I'll open an issue to track progress.\n. If it just has to be unique, md5 the current timestamp or something. You don't even necessarily need the SHA.\n. Sounds okay to me. Only other thing we need here is the ability to update the file paths of the appcache to all forks through git. Looking at your work so far it seems like you're planning to just untrack the file, right? We still need some source it gets created from that is tracked. I see three options.\n1. Embed the content into the Cakefile in the form of a multi-line string and write the .appcache file using that content every time cake build runs\n2. Same as above, but embed it into a separate .coffee file that gets require()d by Cakefile\n3. Have another .appcache file that never gets served (template.appcache or something) , and essentially cp template.appcache mondrian.appcache every time cake build runs\nMy vote goes for number 3, it seems cleanest and I dislike embedding long multi-line strings inside files - it's hard to read and edit.\nThen after whichever of these we choose, we run the code you have for writing the build revision number and SHA. So the template content probably shouldn't contain either of these - they should be prepended to the head of the .appcache file by cake build.\nThe goal here is to make it so every contributor can keep their appcache file in sync with master. We need some origin of the file tracked in git because its content will change.\n. > It's supposed to be text/cache-manifest!\n@fbender updated nginx config. Thanks.\nLength: 2114 (2.1K) [text/cache-manifest]\n. Just keep track of the build number locally. It's only required on a per-server basis, not across all forks. We should still untrack the file.\n. I want to drop it completely. I don't really take advantage of it.\nPart of the way into this project I started making an effort to use native APIs whenever I could, so removing it shouldn't be too hard. In the short term I'll upgrade to 1.11 on a branch and see if it breaks anything.\n. Closed in 89f5a2f92404e660b5f41e875c218aa6a8a66b5d\n. Yes, it is. Good point.\n. #27 opened to address this. Still deciding if dropping it completely is a good idea. It doesn't seem like a good use of dev time.\nFor now it's an open question.\n. I'll take an hour one day to learn about Schneider's algorithm. Haven't heard of it before. That paperjs demo is amazing.\nThe crayon tool uses a simple algorithm I came up with. It only produces smooth lines when one draws quickly. I'd love to port a better algo to it.\n. What do you want to use right-click for? A custom context menu? If so, could you include a simple MVP context menu (copy, paste, delete, etc.) in this PR? If not, what ideas do you have?\nContext menus are meant primarily for redundancy, for computer illiterate people. Mondrian's simplistic design goes against that principle. I think right-click could actually be more useful as an alternative click for complex tools, rather than a context menu. For example, right-clicking a point with the pen tool could remove that point from the shape. Right-click could do a lot of things that alt-click does in Illustrator.\nIf this was the case, you would also want to add a @_rightClick method to cursor-tracking that the Tool class could take advantage of. \nYou can see here how tools bind to these methods. Also for reference, this is how the cursor events get forwarded to the currently selected tool.\nRemoving the context menu alone isn't enough to warrant a merge. I'd love to see you actually utilize right-click somehow. My vote goes to the second option - using right-click for alt-clicks. Thoughts?\n. Glad you agree. Try hacking on it, get some tool to do something new with a right-click, and I'll review the code. Ask me if you can't figure something out. There are still a few spots in the codebase that are pretty confusing.\n. Instead of checking e.which every time, you should add a rightClick event that tools can bind to. This is way easier to read.\n. This looks good, nice job navigating through the code.\nI also just moved all those cursor event proxies out of the big ugly ui/ui.coffee file (probably the worst file in the codebase). They're in a separate file now (https://github.com/artursapek/mondrian/commit/028c5cff44edfec9ff598db1b818138ae1cb8017). They need to be cleaned up regardless but I'm just going to isolate them for now.\nI'll merge & deploy all this after I have some more time to test the changes.\n. After playing around with it, I think we should switch the behaviors of alt-click and right-click, because users coming from Illustrator will expect alt-click to zoom out. Right-click can be zoom 100%. I can make this change.\nAlso working on some other improvements to zoom that this will be merged in with, so haven't been able to get this in yet.\n. Alt-click is more accessible than right-click to people with laptop trackpads, Wacom tablets, etc. And how would a tooltip help in this case?\nIn any case, all hotkeys should be customizable eventually (this sort of personalization can lead to much longer user retention).\n. The way I see it there are two goals:\n1. Teach people the hotkeys - this is the use case for tooltips. Ideally everyone who uses an app like this will learn and use the hotkeys, because it's much more efficient than the grandma-style point-and-click interaction. To push people in that direction, we show them tooltips when they use the mouse so that they associate the hotkey with the tool and gradually start using the superior method of interaction. These tooltips should look just like the menu items: \"name, hotkey\"\n\n1. Teach people advanced features - there's are times when a tool has advanced features that people can't just figure out on their own. I would argue that this case, the alternate click-to-zoom-out function, is likely something most people will just learn by playing around with the app (or already know from using similar products). For other features that are more advanced, like the Visual History, an in-depth written explanation of a feature does not belong within the app. Cluttering the app with learn-it-once-know-it-forever stuff like this is a waste of space. If this is really needed, it should be a separate guide that people can read alongside the app. But it should be considered a last resort to:\n   1. Users learning by playing and discovering things.\n   2. The interface explaining itself.\nIdeally we can make the entire thing easy to learn by relying those two learning techniques. Everything else is a crutch.\nTo use the zoom tool as an example again, people always try modifier keys. That's a known pattern in computers applications at this point. What Adobe does is put a minus sign inside the magnifying glass when \"Alt\" is pushed down. Once you see it once, you get it. After that it's a nice little indicator that Illustrator does indeed recognize your pushing down the Alt key and the app will zoom out if you click the mouse. This\u00a0is way more elegant than a tool-tip that says \"Push down alt to zoom out\" - that's way too heavy-handed.\nFor a contrived example of my philosophy, think about a chainsaw. The first time using a chainsaw can be confusing - you have to learn how to fill the gas tank, undo the safety, put on the blade, rev up the motor, etc. After that it starts to become routine. You don't carry around a manual every time you use the saw, it would just get in your way. There's still labels and warnings on the chainsaw that explain things should you forget, but you start to ignore those too as you develop muscle memory. Eventually with years of use, the labels wear off and you don't even notice because it's all second nature.\nWith all good tools, there is a learning stage and then there is a using stage. They overlap, but the learning stage always fades away and the using stage far outlives it. You have to design with both stages in mind.\nThe tooltips have to not be a crutch.\n. And by the way, based on my experience people drag-to-zoom and reset back out to 100% far more often than zooming in and out incrementally. I know I do, it's way faster. That's another reason why I wanted right-click to reset to 100% - with a mouse I'd have access to both without moving my hand - which is way better than how it works currently where I have to reach for the \"1\" key to reset zoom to 100%.\nGoing forward, implementing some tracking of every interaction within the app could give us the concrete data to prove things like this and make the primary behaviors the primary options.\n. You're right. I would even consider this a bug. The dragging outside of the picker should be ignored.\n. Oh, I just meant the horizontal overflow, where you get black after going off white.\nGetting different hues when you go off vertical is not a bug. In fact that's how you change the hue - you scroll vertically. No way I'm removing that, I think it's awesome.\n. I think people will generally scroll until the hue they want is in the middle of the color picker, so the vertical over-dragging isn't really a problem. The same thing horizontally is definitely a bug.\nThanks for the reports, @waldir. Much appreciated.\n. :+1:. This behavior exists for dragging with the cursor tool (hold down shift while dragging a shape), but not for any of the drawing tools. The pen tool also used to support it, but it seems I removed it at some point.\n. :+1:, this would be a great addition.\n. Aesthetically,\n- they should match the UI of course\n- it should be something like \"name (hotkey)\" eg \"Pen (P)\"\n- there should be a delay before they fade in\nMore importantly, they should be abstracted so that they're easy to change in a tool's config. Eg a tool should have a hotkey key, and a name key that populate the tooltip. So for tools.pen, that would look like:\ncoffee\n  name: \"Pen\"\n  hotkey: \"p\"\nCurrently tools don't define their own hotkeys - they are hard-coded here. Ideally it would work how menu items work, where they define their own hotkey and the class takes care of listening to it. I never got around to refactoring the tools to work the same way, so this is a good opportunity to do that.\n. Yes, user-customized bindings shouldn't be hard to implement. Not really a priority for now, though. The hotkeys are pretty standard and memorable (many of them even match Illustrator's).\nAnd I do think those are duplicates. Just try removing them and see if those functions break, the app will give you a more definite answer than me :)\n. Dupe of #1. There's a history system, just doesn't work with Windows keys yet.\n. Compared it before & after in Firefox... slight difference but I agree it is a little better. Merged.\n. A more in-depth \"contributing\" file is a good idea. Can you start it?\nMove everything under the \"Contributing\" header in the main README.md into a CONTRIBUTING.md, and in README.md just replace it all with a link to that file.\n~~Also, a note here: I just decided to track the main build/build.js file, to save everyone who forks the trouble of building the app for the first time. It also speeds up deployment to production. Relevant commit: 9c7210d89b1327069ddfc566515ac64e82a7d73e~~\nEDIT: I just realized you did this because of that commit. Ignore the last paragraph. :)\n. Yep, we can work on it together. Just start the file. Thanks!\n. I worked off your changes and merged it all in!\n. Can you report what key codes those keys have? Eg open a browser tab and in the JS console,\njavascript\n$(document).keyup(function (e) {\n  console.log(e.which)\n});\n. Thanks.\n. Nah, this isn't a priority. Let's leave it alone for now.\nThere are several bugs open right now that are more important to tackle.\n. Hmm. Mondrian uses a few functions like closest and val that this doesn't seem to support. Interesting lib though.\n. I don't use Sublime, but I trust you!\n. Merged! Thanks.\n. Looks good. Merged. I moved the logic around a bit 53ee3ddb14d7fd5b628cb224269a8115bd63c41e\n. Snapping is there, it's just buggy. Certain tools snap pretty well, like the ellipse and rectangle tools.\n\nSnapping was rushed. It definitely needs some love.\n. Yeah, I know about SVG edit. It's great. It's respectable. It's stable. It's technically mature and capable.\nI think it also really lacks design sense, but that's not its focus.\nI haven't corresponded with them. I don't really have any interest in working with them. Mondrian was created with a different goal, it is designed with a different focus, and it has a different future.\nI will say it was nice to get affirmation that this sort of thing was possible in the browser back when I was starting out on Mondrian. I remember seeing SVG-edit for the first time a few weeks into development, two winters ago.\n. That would be great! Thanks a lot. I appreciate it.\n. Logo is available here in several sizes: https://github.com/artursapek/mondrian/tree/master/build/img/logo\n. They're hard-coded right now, in index.html\n. It's a good start, but it's too slow. And once a tooltip is open, moving the cursor to the next tool button should immediately show its tooltip. This will let people scan the tools quickly. Having to wait that long each time is maddening.\nI'm making some changes to address that and I'll ship this.\n. You can see my changes here. Pull it, play with it, tell me what you think. I want to refactor all the logic into a new tooltips file before I merge it, but the I think the behavior is good.\n. Yeah it's a global dep. I need to not make it global so package.json can install it.\nIn any case, npm install -g less.\n. Yes, it's possible. I use the command-line lessc utility to compile it, so less.js wouldn't help much. I should just change the cake styles command to use a locally-install npm package and add it to package.json.\n. Beautiful! I'll test this and merge it tonight. Thank you.\n. Refactored this and merged it in. Thanks for the help!\n. More important is changing the cmd modifier symbol in the menus to say \"ctrl\".\nI would do this with a pseudo-element, eg give the body a class that specifies what OS the use is on and that class determines the content of the cmd/ctrl modifier. Make sense?\n. No, sorry. I didn't mean that. I meant it's more important than the style question of if not over if !. Of course it has to work before we change the icons in the menu.\nThis looks great though. I wouldn't call it hacky. Great job. I'll test this out tonight.\n. Have you been able to test this on a Windows machine? I have none at my disposal and it doesn't seem to work when I test it in Windows on Browserstack, but it might be a problem with Browserstack.\n. I deployed this to staging and I'll test it on a Windows machine while I'm at work tomorrow.\n. Deployed. Can you verify?\n. Great!\n. Locally? On prod? index.html shouldn't be cached at all. https://github.com/artursapek/mondrian/blob/master/app/mondrian.appcache\n. Positive, just checked. Try changing the contents of the mondrian.appcache file and refresh the page twice. If that still doesn't work, there's a problem, in which case you can clear the appcache in chrome://appcache-internals/.\n. Turns out you're right. I missed this the first time I read this article:\n\nThe HTML page itself isn\u2019t listed in the manifest. Pages that associate with a manifest become part of it.\n\nYesterday I did a lot of work to clean up the repo. I also simplified the build/dev process; all files are now compiled with cake build and none of the compiled files are tracked. So please update your master before you start new branches.\nI have two more things I want to do in this area, one of them addressing this issue:\n1. Speed up the compilation to under 3 seconds. (#25)\n2. Automate updating the .appcache file with an md5 hash of the current time or something (thus invalidating the cache), with every cake build or change to index.html (matter of fact, that file should also be in HAML, and it should also be compiled with cake build). This way new commits will always invalidate the cache, and development won't be a pain in the ass.\nThis means commits will always have to include changes to this file, which kind of sucks, but I can't think of a better solution besides removing the appcache entirely, or .gitignoring it and somehow generating it when someone first forks the repo.\nAppcache was designed exactly for apps like this, so I'd like to keep it if possible.\nHow does that sound?\n. Appcache is more of a douchebag than I realized. For instance, I just deployed the tooltips feature. Given how appcache works, when I refreshed production for the first time the CSS and JS was updated but index.html wasn't - it was pulled from the cache. Since I changed how the tool buttons are identified in the CSS, they all showed up empty with no icons inside.\nAfter I refreshed a second time, since appcache knew at this point that the cache had been invalidated, the new index.html was pulled down.\nThat means that all the cached files are not invalidated at the same time. All returning visitors will have to get a page load where all the tool icons are empty. If you ask me, that's plain stupid.\nSeriously considering forgetting about the whole thing and removing it; so far it has given me way more trouble than it's worth.\n. Well hopefully the app continues to be actively developed and I deploy to production frequently, so there won't be a point where I'm happy with the behavior for good.\nI'd like appcache to always be there, but it works in a way that sucks and makes it unviable. I can't have users coming back and getting updated versions of certain pages and old versions of the html page. That's nuts. Deploys shouldn't break the experience.\nI may be misunderstanding something, but from what I've read so far this behavior is intentional and mandatory. I'll do more research, but appcache may have to go.\n. Nice, thanks. I changed it so it limits in both directions, because the little square indicator made it clear that the boundary was inconsistently on one side and not the other.\n. Deployed! Getting to your other PRs soon.\n. The same commit seems to work  on prod, which probably means this is a state issue. Especially since UIState is an unfinished class that I was working on in November. It's meant to maintain things like your canvas position, zoom level, current tool, colors, etc between refreshes. Not surprised there's a bug in it. :p\nAre you able to get around it?\n. Yes, it's the same attribute. Your app somehow got into the state where it thinks you have no tool selected, and the class (unfinished, like I said) can't handle that. This is all persisted to localStorage so you won't be able to refresh your way out of it. Just write a handler to default to selecting the cursor in this case and call it good.\n. link\n. I was also able to repro. SVG class isn't bulletproof yet.\n. Hey, this looks solid. I'll test it tonight and merge if I don't find any problems.\n. Awesome work. +1. Merged.\n. What do you mean by \"pre-built package\"? The app is a static site, so build & running it is very easy assuming you have node and npm installed. There are instructions in the README. Does that help?\n. Similarly to @Fishrock123's suggestion you can also download this as a standalone Mac app on Mozilla Marketplace (probably easier).\n. Lol, did you automate this?\n\n. Hi, sorry, I just saw this. I have never seen that error, but I know cake comes with coffeescript and this project's package.json dictates that it should be used with coffeescript version ~1.6.3. If you run npm install in this directory, you should be able to run cake build just fine. I have no clue what apt-get installs.\n. Wouldn't this work?\ncoffee\nui.switchToTool @\n. I like having the DOM that's served include as much as possible, rather than generating something like this dynamically with jQuery. So +1 from me.\nThis will change in the future if/when Mondrian is more modular and the tools/utilities are customizable - sort of like expansion packs. Just an idea I've had for a while.\nFor now let's just keep it simple. :)\n. Yeah, this doesn't have to be exposed in the DOM. It would be faster and more private to just have a private object on ui.topUI called _tooltipTimeouts or something that stores these as values using the tool ids as keys.\nAlso, camelCase! (time_id)\n. This doesn't read well.\nIt's preferable to use either /Win/.test(navigator.appVersion) or better yet use the custom prototype method I wrote for strings in Mondrian, navigator.appVersion.mentions(\"Win\"). They all do the same thing.\n. I had this code here for a reason. I'm not certain, but I think it was something like the keyup for the meta key wouldn't get fired if it was released while another key was being pressed. I think removing this will break an edge case.\n. Yeah it's more about writing the code for other people. I consider them equally readable, so go with the regex method since it's simpler.\n. Adding a comment would have been a good idea here. Unfortunately I never had the means to test this on Windows. I'll see if I can find what the problem was while I test this on staging tomorrow.\n. ",
    "Fishrock123": "Should we just consider the ctrl key as a cmd key? (or vice versa?) That seems like the most sane way to patch this.\n(While it would be nice to use both separately on a mac, detecting if your on a mac in the web browser is tricky business.)\n. The only current use of the ctrl key is here.\nPersonally, I'm against having the ctl key do the same stuff as the cmd key on Mac, but I don't think there is a way to tell what OS the user is running & have separate Windows / Mac keybinds. :/\nIf its the only sane way, I'll rebase it into my keybindings refactor before it's pulled.\n. And that link reminded me that I actually used this in one of my own projects.\n facepalm\n. ~~@TronPaul Try this version: https://searchbeam.jit.su/s/mondrian~~\n~~Edit: O.K. Just tested it again, and it.. doesn't actually work now? Investigating.~~\n~~Edit2: I have no idea, this worked yesterday, the modifier codes are being set, yet ctrl-Z does not work.~~\nMouseEvent.metaKey issues.\n. @TronPaul Again, this time fixed: ~~https://searchbeam.jit.su/s/mondrian~~\n~~(try the hotkeys, like ctrl-z. The images are broken because my server serves static things at a different address than mondrian likes. Just ignore it)~~\nUse http://staging.mondrian.io/ instead.\n. :+1:\n. Yes.\n. I can confirm this is correct. However, not all PDF views seems to think it is valid...\n. Mozilla's pdf.js does correctly display them, though.\n. :+1:\n. Funnily enough, the eraser tip works perfectly.\n. Yes, without a special extension to the browser, it will.\nI have been fooling around with event listeners for the past couple minutes and it seems to be recognized as a normal mouse.\n. ~~Ok, I'm pretty sure a lot of this issue is caused by wonky double-click support. Still investigating.~~\nEdit: Nope, it's the drag support that is messing with it.\nAn \"easy\" way to deal with this may be to disable drag support unless the tool uses it.\n. Dragging blocks clicks, and logging showed it was firing drag events.\nThis could probably be fixed by widening the minimum drag distance, or something.\n. #37 Relates to this. \n@fbender \n~~The keys are registered here.\nThe listener is here.\nThe zoom method called is this.\n(It feels like I'm missing something..)~~\nYep, I was. Seems like those are duplicates, I'll look into removing them.\n. @fbender Nope, I was indeed missing something.\nIt's defined in the menu and a little contrived right now.\nHere's where the actual zoom is called.\nIt uses the standard zoom method, found here.\n. (This is off-topic here, but oh well.)\n@artursapek Then these are duplicates?\n. Did you guys check if the zoom tool worked in the Mozilla app environment?\n. ... I'm going to make this thing generate itself for each new build. That way we can untrack it and fire-at-will.\n(I'm assuming that git stuff is stored in .git on windows too...)\n. Ok, I have it so that it generates itself, but if we keep with SHA's that doesn't work for between-commit-test-builds.\nI propose a move to build revision as a number, with a separate comment for the SHA.\n(or even keep the revision and add a line with # Build <number>)\n. I would be in favor of having it by build number then, though with comments for the sha and build date, for our own reference.\n. I went away from untracking it because we'd need to know what the previous build number was.\nEssentially, as it stands, this primarily fixes #37.\n. :+1:\n. :+1: to @jarek-foksa's suggestion.\n. @wraybowling Oh wow, you're right. (Try drawing boxes in the demo.)\nI would be more inclined to go with something a tad slower and more precise, generally.\n. My vote also goes to the second.\nThis will also the alleviate control constriction if we resolve #1 the easy way.\n. Currently it just relies on the event endpoints to decipher if they wish to check event.which.\n. Aight.\n. @artursapek Should I also add right* handlers for all 3 drag events then? \nOr should I just listen to e.which in the tool for now?\n. @artursapek LGTY? Can squash if you'd like, but I think separated commits are more readable.\n. Ugh, -1, but ok, if you really think that when tooltips land people can't learn a couple differences.\n. - Laptop trackpads: I can't think of one that can't right-click easily.\n- Wacom tablets: To my knowledge all have at least one button, for this purpose. (mine has two, one for double click also)\n- Touch devices: This is a different story; we need entirely different handlers for this either way.\nThe tooltip would simply explain what functions are available for the hovered tool, not simply its name and hotkey.\nI agree that it is far less of an issue once user keybindings land, but alt-click is really not intuitive.\nLeft click zooms in once, why would right click reset? (I see it as a sort of opposite to the left mouse button)\n. > What Adobe does is put a minus sign inside the magnifying glass when \"Alt\" is pushed down.\nI like that idea.\n\nThe tooltips have to not be a crutch.\n\nDully noted.\n\n... based on my experience people drag-to-zoom and reset back out to 100% far more ...\n\nYeah, I think you're right.\n. :+1:\n. As discussed via Email: I'm taking this up.\nYes, I had found the hotkeys class, and had wondered if class-defined hotkeys wouldn't be better.\nEventually, it would probably be best to have rebindable keys. Perhaps we can have one interface where the tools initially bind themselves to a key, and then settings are loaded, rebinding them as the user defines.\n. @artursapek So as I understand it, these are duplicates and should be removed?\n. +1 to the switch that @waldir mentioned.\nTouch is accurate enough on Tablets, imo. But it would be a fair amount of work to get it working well, I think.\nThough we do handle events in a such a way that we can fire our internal \"events\" with touch handlers. I'll look into it after #10 if noone else does.\n. dda15396f2b7cb5fd49615ec4d40acda2cce18ca What's this doing in the PR @tomByrer?\n. Thankfully we aren't rendering a lot of text (usually), but applying text-rendering: optimizeLegibility does slow font rendering a lot.\n. https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering + personal experience.\nI was just saying it for reference, really.\n. :+1: - I won't be adding anything else beyond that at the current time though, as I'm not sure what code style paradigms you adhere too.\n. @artursapek LGTY?\n. :+1: \n. :+1:\n. CDN / Custom-built jQuery (if we aren't using much of its features) is a good start.\n. (I recently did a lot of work on a project that used no jQuery or similar libs, I can take this up if need be.)\n. @artursapek Perhaps we should make the 3 some sort of global setting?\n. @artursapek - Where are the tool icons added in the code? Can't seem to find it. :/\n. @artursapek LGTY?\n. 6d084e7 refers to https://github.com/artursapek/mondrian/issues/13#issuecomment-33862238\n. Ok, sounds good. :+1:\n. Seems like it can be installed per-project? https://github.com/less/less.js#getting-started\nThat might not work with cake's way of executing commands, however.\nIs it possible to inform the user if the command does not exist during the build?\nSorry, I'm not terribly familiar with either less or cake. :/\n. I wouldn't consider that more important; most important is that it now works for windows, even if slightly hacky. (The entire unless ~ thing can get pretty weird to visualize)\nI'm pretty sure most windows people would naturally try to use ctrl with these hotkeys.\nThat does make sense though. Not 100% sure how I'd do it with CSS off the top of my head, but I'll have a jab at it.\n. I did test it on Windows 8.\nI'll host this revision on my site later and make sure it works for the OP.\nEdit: (I would do this now but npm is crapping out on me.)\n. Protip: do not rely on MouseEvent.metaKey.\n. New commits confirmed working in Windows 8 & in OS X.\n@artursapek LGTY?\n. @artursapek Were the latest commits deployed to staging?\n. @artursapek I know you have mainly moved on to other things, but do you think this could be pulled?\n. Works for me. (Windows 8, Chrome)\n. My web browsers don't seem to care. Are you sure <html manifest=\"/app/mondrian.appcache\"> doesn't also cache the html page its on?\n. I personally am in favour of dynosrc-esque style \"cache\"s.\nhttp://dinosrc.it/\nI.e. don't just suppose a cached asset is valid for the given duration, check the SHA's with the server, download changes, not new files.\n. I guess I'll just comment it out? I have no idea what its tied to.\n. Oh. Uhhhh..\n\nBetween refreshes you say? I'll just clear my LocalStorage then.\n. Closing this. We'll open a new one for state robustness later.\n. Can you directly link me to the file? I can't download it from that.\n. Open from HDD opens up into a blank image.\nFrom link causes this error:\n\nOS X 10.9.1\nChrome 32.0.1700.107\nFirefox current stable gives the same result.\n. (I'm not sure if this fully fixes #37 or not. But I guess this is a good first step at least.)\n. There is a slight possibility between branches that have it tracked right now and ones that won't that there will be a rough transition where you could end up building with the same number more than once. We could just set the build revision as the unix time when it was built, or hash the date or something.\ni.e. appcache will still cause problems, just less so. Not sure its worth bothering with it.\n. Presumably you could run it in node-webkit, if you really wanted to?\n. Does this actually matter? I'm not updating the licenses on the like hundred repos I have access to lol\n. Yeah, I'm not actually sure why I didn't do that.\nI remember thinking it might be safer (for some odd reason), but now I don't think it would matter.\nCould just be that I did it late-ish last night.\n. These (and at line 147) don't need trailing commas on the end of the objects in coffeescript.\n. Did it this way in these commits because that's how the Menus are currently done.\nI can refactor both to be set from class files, but I'm not sure if that belongs in this PR.\n@artursapek Thoughts? If I don't refactor here I can also make a separate PR for hotkeys, if you'd like.\n. Ok, I'm not sure this is the best way to do this, but I don't know where else we'd store the timeout's id.\n. I prefer to use snake_case for silly little things like this, but will do.\nAlso, jQuery's data() doesn't expose it. data() is dom-read-only and is all done in JS.\nI would also rather have it stored in our own store though.\n. Yeah that works. Fixed.\n. Unless it is not windows.\nCan change to if not ~ or if !~ or even the basic if <> isnt -1 if need be.\n. The more I think about it the less sure I am that this actually does what I thought it did...\n. I prefer the regex, Mentions does pretty much the same thing as this, and seems extraneous.\nI'll update it to whichever you'd rather.\n. Tsk tsk, a case of the the missing ghost comments of long past.\nI'll do more testing, but the original metaKey functionality simply does not work with windows, as it precedes the keyup handler, and effectively overrides it, even with the rest of this patch.\n. > Yeah it's more about writing the code for other people.\nWe'll just go with mentions then. Consistency.\n. ",
    "MagnaMike": "So it won't be too hard to implement? \n. Thank you, but sorry, how do I use this?\n. Sorry all of this is going over my head, I don't have any real experience to speak of with this kind of stuff. I'll just ask this; is this functionality something you can/will add on in the future? \n. ",
    "jarek-foksa": "You could add support for embedding of PNG files via drag & drop with something like this: https://gist.github.com/jarek-foksa/8613003\n. @MagnaMike the gist just demonstrates how to use the DOM API in order to implement this functionality, it's not supposed to work out of the box (it's not even CoffeeScript).\n. I would use Schneider's path fitting algorithm:\n- demo http://paperjs.org/examples/path-simplification/\n- original implementation: http://tog.acm.org/resources/GraphicsGems/gems/FitCurves.c\n- JavaScript port: https://github.com/paperjs/paper.js/blob/master/src/path/PathFitter.js\n. ",
    "davelab6": ".ai are now in fact PDF files, and pdf.js exists :) \n. Here's a screenshot of a CS5 AI file in Textmate:\n\n. It matters for new code written this year\n. ",
    "juliankrispel": "Illustrator can export SVG, and most modern browsers support svg, no need to parse an .ai file. Seems like a taking two steps back imho.\n. ",
    "tomByrer": "IMHO, would be nice if Mondrian has solid support for Illustrator & Inkscape .svg files (for their funky meta data).\n\nmake a simple system that does the conversions automatically\n\nPerhaps a separate repo/project?  Maybe hack Inkscape's conversions?\n. On my Sprint Samsung Note 2, I can open the webpage, open menu items, select boxes on the left, but can not 'draw'.\n. Now that you mention it @waldir it does; I can switch if needed.\n. @artursapek sorry for the goofy PR; only changed from your master should be the last 2 paragraphs.\n@Fishrock123:  I assume hitboxes have to be enlarged on touch, so then there needs to be a config to un-enlarge when mouse/pen is used.\n. Sorry, GitHub's web interface mangles updates, let me do a new PR please.\n. There is a new library that has many jQuery DOM & event functions.  Focuses on evergreen browser compatibility, so is around 2x+ faster than even Zepto & smaller.\nhttp://webpro.github.io/jquery-evergreen/\nNo AJAX, but that is easily replaceable by another micro-library.  show() & hide() are the frequent missing functions.\n. ref: difficulties with touch\n. cheers :)\n. ",
    "ntuckerxx": "Seems so minor for bug #6. :)\n. Illustrator also has a tool (the one whose cursor looks like a caret/^) that lets you \"break\" the handle so it's two independent halves instead of being locked to being 180 degrees from each other.  It's always seemed redundant to me, so perhaps you can simplify by only offering one of these two methods.  A method to convert back to a smooth point is definitely needed, though.\n. ",
    "wraybowling": "Paper JS had similar woes but later on they merged in another boolean library's functions that were really great. It was an interesting read when it happened. I'm having a hard time finding links now, but just sayin' it's out there. Somewhere. (Also, paperjs is on github. So there's that.)\u2014\nSent from Mailbox for iPhone\nOn Sat, Jan 25, 2014 at 10:01 AM, Artur Sapek notifications@github.com\nwrote:\n\nPathfinder was the bit that I was still working on when I decided to open this project up. It's not available through the UI yet because it's so unfinished. In fact it should be on a seperate feature branch.\nIt's been by far the hardest part of building Mondrian. That also means it's the most interesting, so I definitely want to have a native pathfinder implementation in the codebase. I think having a pathfinder utility would be great, but it's not a top priority right now so I'm not in a hurry to get it out.\nFor the time being I'll check out clipper. If it's not too hard to get it to work in a way that feels \"native\" I'll consider merging something temporary in, but if it doesn't support beziers yet then I don't think there's much of a chance. Thanks for the suggestion.\nReply to this email directly or view it on GitHub:\nhttps://github.com/artursapek/mondrian/issues/11#issuecomment-33290740\n. I like the smoothed results of\u00a0Schneider's, but it does not do corners well.\u00a0\u2014\nSent from Mailbox for iPhone\n\nOn Sat, Jan 25, 2014 at 8:58 PM, Artur Sapek notifications@github.com\nwrote:\n\nI'll take an hour one day to learn about Schneider's algorithm. Haven't heard of it before. That paperjs demo is amazing.\nThe crayon tool uses a simple algorithm I came up with. It only produces smooth lines when one draws quickly. I'd love to port a better algo to it.\nReply to this email directly or view it on GitHub:\nhttps://github.com/artursapek/mondrian/issues/15#issuecomment-33306728\n. I disagree! This is one of the more wonderful and beautiful features of Mondrian. If there is any bugginess to it, it is only that going past white makes black. Don't nerf a genuinely unique idea just because one person didn't like it.\n. \n",
    "fbender": "Here's a basic version (based on the MDN doc, the spec seems to defer a bit): \n{\n  \"name\": \"Mondrian\",\n  \"description\": \"Mondrian is a free vector graphics web app like Adobe Illustrator or Inkscape, available at mondrian.io.\",\n  \"launch_path\": \"/\",\n  \"appcache_path\": \"/cache.manifest\",\n  \"icons\": {\n    \"128\": \"/img/icon-128.png\"\n  },\n  \"developer\": {\n    \"name\": \"Artur Sapek\",\n    \"url\": \"http://artur.co/\"\n  },\n  \"default_locale\": \"en\"\n}\nApart from a review, this still needs a square icon (possibly in different sizes though 128x128 is required by the Firefox Marketplace) and updates to the path values (e.g. appcache). You could add support for Web Activities (\"share\" etc.), a CSP (recommended!), localized values, and a version info.\nBeware: \n\nThe manifest should be stored with a file extension of .webapp. App manifests must be served with a Content-Type header of application/x-web-app-manifest+json. [\u2026] must be in UTF-8 encoding [\u2026]\nIf you serve your manifest file from GitHub Pages, GitHub will serve it with the Content-Type header of application/x-web-app-manifest+json. You must use the .webapp file extension on your manifest file. Example: manifest.webapp.\n. Check out your /Applications/ folder! (Though Gatekeeper will block you from executing the Web App. You have to right-click -> open the appliaction once from the Finder to bypass Gatekeeper. I just filed Bug 964062 about that.)\n. Yeah, it lacks some polish. Actually, the Marketplace should have mentioned where you can launch the app from. Though Firefox itself should indicate that upon successfull installation \u2026 \n. The app manifest validator shows no issues (apart from missing 32px and 256px icons).\nThe + and - hotkeys don't work (for zoom in and zoom out).\n\nCan you file a bug on that at bugzilla.mozilla.org? Maybe it's a platform bug \u2013 unless you are sure it's your fault ;). Can you point me to the code?\n\nThe app doesn't launch when I'm offline even though there's an appcache and everything. (This might be Mozilla's fault because I think I support it correctly). \n\nFile a bug as well, please. If you don't want to setup an account (it's pretty easy though using the BrowserID / Persona service), I can do that for you, though I may need more details first.\n. > Yeah, it silently installs it and does nothing. It's weird. Anyway, I'm working on making the app offline-friendly with a cache manifest. I'll update you when I have something working in Mozilla's marketplace.\nSo the Nightly (Fx 29) and Aurora (Fx 28) builds seem to work perfectly here: There is \n1. an info in the Marketplace, \n2. a progress report during installation (doorhanger notification at the identity icon), \n3. a (Notification Center) notification when installation is complete.\n4. Apps launch as any other signend app (no Gatekeeper notification preventing me from launching the app), so UX is almost exactly like in the App Store.\nBeta (Fx 27) has 1-3 but not 4. \n\nIt's hard to test things on Mozilla's platform because there's no dev tools available within their little standalone environment (that I'm aware of).\n\nBug 966667\nThis leaves:\n\nThe app doesn't launch when I'm offline even though there's an appcache and everything. (This might be Mozilla's fault because I think I support it correctly). \n\nI cannot find a bug for that. Did you try with the most recent Nightly?\nAlso, your appcache manifest seems to be sent with the wrong Internet Media Type: \n```\n~ $ wget http://mondrian.io/app/mondrian.appcache\n--2014-02-01 22:17:42--  http://mondrian.io/app/mondrian.appcache\nResolving mondrian.io... 66.228.45.178\nConnecting to mondrian.io|66.228.45.178|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1907 (1.9K) [application/octet-stream]\nSaving to: \u2018mondrian.appcache\u2019\n100%[======================================================================================>] 1,907       --.-K/s   in 0s      \n2014-02-01 22:17:43 (65.0 MB/s) - \u2018mondrian.appcache\u2019 saved [1907/1907]\n```\n\u2026 while it should have text/cache-manifest. That could be the reason the manifest is ignored.\n. (The original issue is fixed now. Thanks a lot!)\n. You can disable appcache (iirc) in the site preferences \u2192 permissions tab in Firefox (at least for development). Application cache is a douchebag (please also read the sites linked in that article!) if you're not using it cleverly, either way it's all we have at the moment. Please use the API to your advantage (see the spec as well).\n(BTW: The ALA article makes use of localStorage which has its own performance implications. Consider using localForage instead.)\n\nLength: 2114 (2.1K) [text/manifest]\n\nIt's supposed to be text/cache-manifest!\n. ",
    "jokeyrhyme": "5 is closed with instructions to discuss this further here. Yet #13 is now closed too.\nCan we open one of these to continue tracking the progress of the Chrome Web App? I'm assuming that is still a work in progress as there is not yet a Mondrian presence at https://chrome.google.com/webstore\n. If the request for the manifest responds with a 404, then the browser will disable AppCache behaviour. So, what you may be able to do is temporarily hide or remove the manifest file when you are doing upgrades, then put it back once you're happy with the behaviour.\nAlso, there are JavaScript events for AppCache. So you may be able to ask the user to refresh the page or something when the manifest has changed.\n. ",
    "waldyrious": "Is the \"dropping it completely\" goal tracked in an issue? If not, one should be opened.\n. > Don't nerf a genuinely unique idea just because one person didn't like it.\nFWIW I don't dislike it, actually I think it is a neat feature too! I was just unsure it was intended, so I mentioned it together with the jumping-to-black bug, just in case, since they seemed to be driven by the same code.\n. I don't understand this PR. It seems to change a lot more than what the commit messages say (especially the \"linking to files\" one). Am I missing something?\n. For reference, here are some links that may be useful for such a transition:\n- Native equivalents of jQuery functions\n- jQuery or Native Method?\n- Native JavaScript Equivalents of jQuery Methods\n. :+1: \n. :+1: \n. ",
    "colmtuite": "That's a pretty big claim mate, do you have any evidence to back it up?\nI'm aware of a few minor bugs with Android and a potentially major performance bug when rendering a lot of text but neither of those cases apply to Mondrian.\n. ",
    "dangelov": "96 to 105\n--\u00a0\nDino Angelov\nOn 27 January, 2014 at 1:21:55 PM, Artur Sapek (notifications@github.com) wrote:\nCan you report what key codes those keys have? Eg open a browser tab and in the JS console,\n$(document).keyup(function (e) {\n  console.log(e.which)\n});\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "jancborchardt": "@artursapek I totally agree that it lacks design sense \u2013 that\u2019s why I like Mondrian instead. A design tool should also focus on being well designed itself of course.\nThank you for the clarification. I\u2019ll see to add Mondrian to http://libreprojects.net\n. ",
    "mkly": "I'm new to coffeescript so feel free to tell me if its ugly. Also, no worries if you don't feel like doing it this way. Just saw the issue and thought this project was pretty cool. Wanted to say thanks for sharing it.\n. Guess I should make sure it works then. Heh. Thanks again for releasing this.\n. Thanks for the info. Appreciated.\n. ",
    "icarito": "Perhaps this should be the default, and the conditional should be to use cmd for OSX only? Currently shortcuts don't work for me on GNU/Linux.. ",
    "blrhc": "Unfortunately not. I wish I knew how.\n. "
}