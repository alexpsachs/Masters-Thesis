{
    "bobthecow": "Agreed. I use a static data source to accomplish this (basically, everything in /static/ is copied into /output/ during compilation).\n. I would welcome such a config option. For me, it would be ideal if it left all unchanged files, not just rm -r output/* before building.\nI usually do it manually by removing the output directory, reverse-rsync from my production box, then nanoc co ... it's a bit awkward, but prevents me from re-uploading all my unchanged assets and invalidating caches and changing etags and such.\n. @ddfreyne Maybe I'll port that to a command one of these days.\n. Pull request 44 has an implementation of auto_remove_stale_items :)\n. thanks :)\n. Awesome. Thanks :)\n. So you would use something like this:\nsorted_articles_with_attribute(:featured => true)\nInstead of this?\nsorted_articles.select { |i| i[:featured] }\nIMO, the second would be both more Ruby and more grokkable.\n. Thanks!\nAlso, this pull request got all sorts of ugly :P\n. hey, it's a good problem to have. it'll make the future that much easier.\n. With my dotinfo site:\n\n. I just realized this is my bad:\nI'm not following best practices (and I know it) for one of my data sources. I'm doing a live API call for the items rather than using a rake command to download them to a local file. So of course, requiring the site would make those API calls.\nFeel free to disregard this :)\n. (It's 5 seconds on my box without those API calls)\n. Here's how I worked around this particular issue:\nhttps://gist.github.com/1366147\n. Opened pull request #61 from a proper branch so I could get master back in sync with ddfreyne/master\n. thanks!\n. @em: I'd be more worried about 2.6 minute compile times. Have you spent any time optimizing that? I was able to get mine from 5 minutes to 90 seconds or so.\n. Updated to mount the example static data source at assets and use the new-style merged config.\n. it's not mounting them at content/assets (because of the filesystem_unified thing) it's just mounting them at assets\n. Updated the generated config.yaml to be a bit more clear on the assets/ directory location.\n. I guess there's also:\nruby\ncompile '/foo/' do; end\nwhich is slightly better than the two options I listed above. But I'd still like to see a nil route and compile rule.\n. > I\u2019m not sure how useful this change would be. You save only a handful of characters for something that is not going to be used often while introducing extra complexity.\nYeah, I can see that. I've got a project right now that's an exception, and all the empty blocks were getting ugly. But the one-line variant I commented above will be okay. \n\nBy the way, it is actually the routing rule that should return nil if the page should not be written, while the compilation rule doesn\u2019t care about the return value.\n\nTrue, but in order to prevent items from falling into the global '*' rule, you add empty compile blocks to earlier rules which don't need filters or layout. And that's basically the same thing.\nI'm not super attached to this. It just seemed like a natural extension to the dsl, and a good way to clean up one of the uglier parts of my rules file. Feel free to close if you disagree :)\n. Sounds reasonable. Thanks. \n. I considered it (and even tested a bit) but the false positives made it less than useful. Because these libraries (and others like them) are tasked with finding the language of a file, they look for the best fit, even when it's not a very good fit.\nThis is even more exaggerated when you're talking about code blocks instead of entire files. Take this block for example:\nhttp://justinhileman.info/article/reinstalling-php-53-on-mac-os-x/#but-wait-theres-more\nSince its valid SQL, every language sniffer I've tried highlights it as SQL comments... With code snippets, exact fit is the right answer. With whole files, best fit is better. \n. I see where you're coming from. In this particular case (and this exact implementation) I saw this as an instance of a magic number rather than language detection. This is why it only detects the <?php sequence in the same position as your #! directive.\n. (apparently markdown support in email replies is a bit lacking?)\n. That's fine.\nIn my case, I felt it was a bit ugly to do this in my markdown:\n```\n!php\n<?php\n$foo = 'bar';\n```\n... but my needs will be met with a simple additional filter which detects <code> elements that start with <?php and replaces them with #!php\\n<?php\n. That is a very good question. I'll take a look.\n. Looks like this was resolved in either 3.6.5 or 3.6.6. Thanks!\n. Are you rehashing your shims after installing nanoc?\n. Ahh. Yeah, that'll do it :)\n. This is completely unsurprising. PHP isn't (and never will be) valid (x)html, so an html parser will fail miserably with it. Same problem with ERB and just about everything else that mixes code with display.\n. @ddfreyne The only way to do that is by creating an (x)html parser that is capable of parsing PHP and ruby, since both can look like they contain closing tags in lots of ways that don't actually contain closing tags.\n``` php\n<?php\necho \"\";\n$foo = \"?>\";\necho <<\nEOL;\n```\nAlso, without evaluating the ruby or PHP, the parser would have no idea whether a tag had been closed or not. How do you deal with (completely fabricated but totally valid) things like this?\nerb\n<div><%= \"</div>\" unless foo %>\n<hr/>\n<%= \"</div>\" if foo %>\nAnd to top that off, how in the world do you relativize this?\nphp\n<img src=\"<?php echo \"some arbitrary $variable\"; ?>\">\n. IMO, it can be dealt with in a couple of ways:\n- Don't use relativize_paths on PHP :)\n- Use <% filter :relativize_paths %> blocks to relativize specific parts of the file, and only wrap non-php blocks.\n- Add a relative_path helper and use that explicitly wherever your URLs are. This would have the added bonus of being way faster than parsing the whole rendered file with nokogiri and rewriting bits of it.\n. Hi,\nThere is no less-verbose output at this point. Check out this NEP for the proposal to add one.\n. Note that as of 38420793583f242a5242661501852062fe2990f0, the output is less verbose (it doesn't tell you about identical things unless you ask for --verbose), so that'll be in the 3.4 release.\n. They look great to me. :+1: for the proposed NEP-16 solution.\n. Totally not my fail :)\n. Does the libv8 gem install on Debian? Installing that plus therubyracer would mean you'd have v8 for all the javascriptey gems, which would keep you from running into this problem in the future :)\n. :+1:\n. Your code was behind master (check the diff, it's missing the terminal-notifier code)\n. @technoweenie :colorize_syntax uses Nokogiri to find code blocks to colorize. If you want to keep colorizing your Atom feed, you can pass a :syntax => :xml option to the filter.\nhttps://github.com/ddfreyne/nanoc/blob/master/lib/nanoc/filters/colorize_syntax.rb#L95-101\n. So demanding ;)\n. This isn't a Nanoc issue. Their gem lockfile is out of date.\nbundle update\nnanoc\nThat'll compile ^^\nYou should send 'em a pull request with the updated lockfile :)\n. @DivineDominion A fresh checkout compiled for me with no problems after doing a bundle update.\n. This is a perfect fit for a custom command.\n1. Make a commands directory in your project root.\n2. Copy this file to that directory: https://github.com/ddfreyne/nanoc/blob/master/lib/nanoc/cli/commands/show-rules.rb (but rename it to export-routes.rb or something).\n3. Modify that file as needed to output your file instead of printing filters and such.\n4. Run your new command with nanoc export-routes\nNote that it's not a direct 1:1 map from source files to output files... Items can be introduced from outside the filesystem, such as with generated tag pages, or paginated archives. Items can also have more than one rep, meaning a single source file could be compiled and routed to multiple places.\n. :+1: ... this has been bugging me for a while :)\n. I'm one of those people with a create-article command.\nIt sets up a unique disqus id for each new article, infers the title based on the article id (if i don't specify a title on the command line), adds all my article-specific frontmatter like tags and excerpts, and automatically puts it in content/articles so i don't have to specify my id as /articles/foo/, I can just say foo.\n. Yeah. It looks like that's probably the sass gem's bad. A backwards compatibility break and an API change in a point release?\nhttps://github.com/nex3/sass/commit/6cc01962be2203b829616de4b33514ad5c7188d2\nThis is why people don't like using twiddle-wakkas.\n/cc @nex3\n. Why not add the require to the top of #run?\nEdit: on second thought, it's prolly better not to re-require it every time a filter is run :P\n. I don't run the watcher because it kinda sucks with my site :(\n. It might not be a bad idea to add things like this to a \"philosophy\" section of the documentation.\n. :with_toc should imply :renderer_options => {:with_toc_data => true}. \n. Also, it should raise an exception if :with_toc is passed but the renderer isn't HTML\n. Something like this:\n``` ruby\n...\nif options.is_a?(Array)\n  warn 'WARNING: You are passing an array of options to the :redcarpet filter, but Redcarpet 2.x expects a hash instead. This will likely fail.'\nend\nif with_toc\n  raise \"Unexpected renderer: #{renderer_class.class}\" unless renderer_class <= ::Redcarpet::Render::HTML\n  renderer_options[:with_toc_data] = true\nend\nrenderer = renderer_class.new(renderer_options)\nadd support for a table of contents\nif with_toc\n  # to include a TOC, Redcarpet needs two passes:\n  # the first pass with the HTML_TOC renderer creates the TOC, its output\n  # needs to be joined with the second pass from the HTML renderer\n  # see http://dev.af83.com/2012/02/27/howto-extend-the-redcarpet2-markdown-lib.html\n  renderer_toc = ::Redcarpet::Render::HTML_TOC.new\n  toc = ::Redcarpet::Markdown.new(renderer_toc, options).render(content)\n  toc + ::Redcarpet::Markdown.new(renderer,     options).render(content)\nelse\n  ::Redcarpet::Markdown.new(renderer, options).render(content)\nend\n...\n```\n. Update with NEWS (and rebased against master)\n. Adding the ability to write multiple times would make this a very powerful feature:\nrb\ncompile '/article/*/' do\n  filter :redcarpet\n  layout 'default'\n  write item.identifier + 'index.html'\n  filter :pdf\n  write item.identifier.chop + '.pdf'\nend\nPerhaps write calls could take a :rep => :foo option which would implicitly create a new ItemRep. The first write call would use the ItemRep for this compile block, and additional ones would raise an exception if you didn't supply an unused rep name.\nrb\ncompile '/article/*/' do\n  filter :redcarpet\n  layout 'default'\n  write item.identifier + 'index.html'\n  filter :pdf\n  write item.identifier.chop + '.pdf', :rep => :pdf\nend\n. Yeah, I think we talked about that. I'll look around and see if I can find the examples.\n. yeah, i like that.\nrb\ndef write(path=nil, opts={})\n    opts[:dir] = !item.binary? if path.nil? and opts[:dir].nil?\n    # ...\nend\n. Agreed.\n. The README status icons also reference ddfreyne/nanoc rather than nanoc/nanoc.\n. :+1: for the #inspect and #winsize changes. My only improvement would be to pass in site as well.\n. Right. I tend to like shell better anyway, so that works for me. Maybe add console as an alias in case people have a subconscious rails autopilot?\n. :+1: looks good to me :)\n. @ddfreyne reverse_each works. I thought the same thing at first, but the breadth-first traversal by Find.find means the directories will come after their subdirectories once you reverse it, saving an additional sort step.\nIncidentally, we could save two more iterations by switching this:\nrb\npresent_files_and_dirs = Set.new\nFind.find(self.site.config[:output_dir] + '/') do |f|\n  present_files_and_dirs << f\nend\npresent_files = present_files_and_dirs.select { |f| File.file?(f) }\npresent_dirs  = present_files_and_dirs.select { |f| File.directory?(f) }\nto this:\nrb\npresent_files = Set.new\npresent_dirs  = Set.new\nFind.find(self.site.config[:output_dir] + '/') do |f|\n  present_files << f if File.file?(f)\n  present_dirs  << f if File.directory?(f)\nend\n. Actually, it depends on whether Set guarantees order in Ruby. I don't remember if it does.\n. That makes sense. Set#to_a definitely says that order is not guaranteed, so if we can use an Array, I'd say switch to that, switch to my Find.find block above, and we save ourselves the need for sorting the directories. Win, win, win.\n. @ddfreyne awesome. i didn't know you could change it via API. I always just open a new pull request :-/\n. > Unfortunately the API doesn't support this operation anymore.\nHeh. Maybe they fixed it in their involuntary attr_accessible audit a while back? :)\n. I think you're right w.r.t. precomputing the cache. Is it possible to not cache at all until the items are frozen and the identifiers are immutable? Would that even be a good idea?\n. This version looks a lot better. :+1:\n. It looks like there are no tests for the other array slice notations (things like 1..-1 that would delegate instead of returning an item by id). I'd feel more comfortable with tests for those :)\n. :+1: looks great to me.\n. Awesome. \n. :+1:\n. Do you mind adding fenced code blocks so we can tell what's going on with your issue? Thanks :)\n. :+1:\n. It's possible that you're doing something while processing your site that marks static files as \"depending\" on other static files. Do you mind pasting the \"Item dependencies\" output from nanoc show-data?\n. There was a bug, fixed by #260, which mistakenly replaced binary files even when they were identical. This is why you saw a problem with image, but not with all items.\n. #260 just fixes the symptom (changing binary files when they're identical to the old version). Whatever is marking the files as needing recompilation is still present, and that could be a different bug?\n. :+1:\n. Looks good.\n. :+1:\n. :+1: works for me.\n. But this one had \"dude\" in the issue title, which made me laugh.\n. This is the expected behavior. index.* is a special item in the nanoc filesystem data source. Just like most web servers, nanoc treats index.* as \"the content for the current directory\". As such, the identifiers of your items above are:\n/toplevel/\n/toplevel/subdirectory/\n/toplevel/subdirectory/photo/ (not an index.html)\nThe \"default\" routes for these three items would be:\n/toplevel/index.html\n/toplevel/subdirectory/index.html\n/toplevel/subdirectory/photo/index.html\nThe \"passthrough\" routes for these three items would be:\n/toplevel.html\n/toplevel/subdirectory.html\n/toplevel/subdirectory/photo.html\nBut you don't get either of these ... because your route rule doesn't actually match the item with id /toplevel/:\nrb\nroute '/toplevel/*/' do\n  item.identifier.chop + '.' + item[:extension]\nend\nIt only matches children of /toplevel/, not /toplevel/ itself. So /toplevel/ is falling through to the default route, giving you:\n/toplevel/index.html              # \"default\" route\n/toplevel/subdirectory.html       # your route\n/toplevel/subdirectory/photo.html # your route\n. There are three attributes of all filesystem data source items: filename, content_filename and meta_filename.\nfilename and content_filename are the original filename for that item, meta_filename is the name of the associated yaml metadata file. If you're not using those, you can ignore it :)\nSomething like this should tell you if it's an \"index file\":\nrb\ndef index_file?(item)\n  item[:content_filename] =~ /(^|\\/)index\\.[^\\/]+$/\nend\nAdd that to a /lib/default.rb or something, and then use it in your routing rule:\nrb\nroute '/toplevel/*' do\n  if index_file? item\n    item.identifier + 'index.' + item[:extension]\n  else\n    item.identifier.chop + '.' + item[:extension]\n  end\nend\n. My only concern here would be that none of the rest of the configuration is supplied as regex (it all uses globbing instead)\n. Oh, heh. What do you know. That was a monkeypatch I wrote to keep nanoc prune from pruning my *.gz files :)\n. Sorry about that, I completely forgot that you were waiting on my merge :)\n. That won't work because /foo.html/ doesn't end with .html...\nShould this be based on the item[:content_filename] instead?\n. ``` diff\n--- item_rep.old.rb 2013-02-26 02:30:07.000000000 -0800\n+++ item_rep.rb 2013-02-26 02:36:20.000000000 -0800\n@@ -1,3 +1,4 @@\n+\n       def write(snapshot=:last)\n         # Get raw path\n         raw_path = self.raw_path(:snapshot => snapshot)\n@@ -13,21 +14,31 @@\n         Nanoc::NotificationCenter.post(:will_write_rep, self, snapshot)\n     if self.binary?\n\n\n\nCheck whether content was modified\n\n\nis_modified = !File.file?(raw_path) || !FileUtils.identical?(raw_path, temporary_filenames[:last])\n\n\nAlways copy (time spent checking modification is not useful)\n\nFileUtils.cp(temporary_filenames[:last], raw_path)\ntemp_path = temporary_filenames[:last]\n         else\n\nCheck whether content was modified\n\n\nis_modified = (!File.file?(raw_path) || File.read(raw_path) != @content[:last])\n\n\nWrite\n\nif is_modified\nFile.open(raw_path, 'w') { |io| io.write(@content[:last]) }\nend\ntemp_path = temp_filename\n\nFile.open(temp_path, 'w') { |io| io.write(@content[:last]) }\n         end\n\n\nCheck whether content was modified\n\nis_modified = is_created || !FileUtils.identical?(raw_path, temp_path)\n+\n\nWrite\n\nFileUtils.cp(temp_path, raw_path) if is_modified\n+\n         # Notify\n         Nanoc::NotificationCenter.post(:rep_written, self, raw_path, is_created, is_modified)\n       end\n+\nTMP_TEXT_ITEMS_DIR = 'tmp/text_items'\n+\ndef temp_filename\nFileUtils.mkdir_p(TMP_TEXT_ITEMS_DIR)\ntempfile = Tempfile.new('', TMP_TEXT_ITEMS_DIR)\nnew_filename = tempfile.path\ntempfile.close!\n+\nFile.expand_path(new_filename)\nend\n+\n+\n. rb\n!!(RUBY_PLATFORM =~ /(mingw|bccwin|wince|mswin32)/i)\n``\n. @ddfreyne A counterpoint to that would be that I had to change my rules filenames when i addedimport_rulesto the DSL. On a case-insensitive filesystem, you can't have a folder namedrules/and a file namedRules, so I now userules.rbandrules/.\n. Alternatively, we could implement that \"explicit directory / path config\" thing we talked about back in the day, then the only hardcoded filename would beconfig.yaml/nanoc.yaml:)\n. I disagree. I still can't change the location of my tmp directory (unless this was added when I wasn't paying attention?)\n. As a BC-break for nanoc 4.0, we could _only_ useRulesandChecksby default, and make users change a setting innanoc.yamlornanoc.rb(see #261) if they want to userulesorchecks.rbor something. Then the only magicalness is when it chooses betweennanoc.yamlandnanoc.rb.\n. Could make ananoc.rb` generator command for helping people upgrade :)\n. :+1: Looks good to me.\n\nShould we even bother to wait for Travis? He's been flaky today :)\n. GitHub's pretty good about automatically closing issues after the associated pull request has been merged. Since you mentioned it in the commit message, the other issue closed itself.\n. These should not cache until after the end of preprocessing when @items is frozen.\n. Heh :)\n. Should I wait for Travis, or is he just going to fall over in a minute anyway?\n. You're probably processing that item with the :erb filter before you process it with a markdown / kramdown / redcarpet filter.\n. Alternatively, the link checker could try a HEAD first, and fall back to a GET if the server returns 405?\n. Let 'em upgrade if they need it.\n. It does the trick, but wow, that's a bit ugly :)\nIs there no stderr redirection for Windows?\n. docs say:\nwhatever 2> nul\n. http://support.microsoft.com/kb/110930\nThat's the Windows way to do it. *nix uses /dev/null instead of nul.\n. :+1:\n. I believe I opened an issue for this a while back.\n. The documentation still contains a reference to config.yaml? That should be nanoc.yaml now\u2026\n. Heh. Fair enough :)\n. rm -r tmp/*\n. @ddfreyne We could add a config that lets you specify arbitrary additional files that act like lib/* and force a recompile when they change. \n. Could the class to be instantiated be passed in as a param?\nrb\nklass = params[:class] || ErectorLayout\nklass.new(assigns).to_html\n. Yeah, that'd be my recommendation.\n. Make sure it's named appropriately in order to make the transition smooth.\n. What @sowcow said :)\n. :+1: \n. Would it also make sense to throw an exception at the end of compilation if the stack isn't empty, so we actually know if there are other similar issues?\n. @sprogger 2.0 is the current stable version of Ruby. 1.9 is a legacy version now :)\n. I personally use rbenv + ruby-version on OS X (it's super easy to install via homebrew). This lets me switch between 1.8, 1.9 and 2.0 at will. Basically that means running 1.9 all the time, since I've got one project that's not quite ready for 2.0 :)\n. (Ruby 1.8.7 hit EOL in June)\n. Sorry to see you go :(\nHere's why your stylesheet is getting the wrong name though:\n```\ncompile '/stylesheets/*/' do\n    filter :sass, Compass.sass_engine_options\nend\nroute '/stylesheets/*/' do\n    item.identifier.chop + '.css'\nend\n```\nThese rules don't actually match your stylesheet, so it's being compiled by the default rule \u2014\u00a0compile '*' at the bottom of your rules file \u2014\u00a0which compiles as identifier + index.html.\nYour stylesheet lives at /assets/stylesheets/layout, and your rules match /stylesheets/*. You'd need to change those rules to /assets/stylesheets/* for it to work.\n. You could just change your name to Michat\n. I'd say this is a bug fix, not a BC break :)\n. Yeah, that seems reasonable.\n. :+1:\nIt might also make sense to ship a default Guardfile with the skeleton site?\n. :+1:\n. :+1:\n. :+1:\n. The outcome of that conversation was adding ENV['TZ'] = 'America/Los_Angeles' to the top of my lib/default.rb :)\n. @ddfreyne or to explicitly set ENV['TZ'] like I do :)\n. I thought I :+1:d this one already.\n. :+1:\n. :) :+1:\n. :+1:\n. @ddfreyne You're holding off on the Compass sprite importer?\n. Then :+1:\n:shipit:\n. I take it you mean here?\nhttps://github.com/nanoc/nanoc/blob/master/lib/nanoc/cli/commands/create-site.rb#L168\n. @cdlm I implemented that once. It's really slow :)\n. :+1:\n. :+1: \n. You can find out what is using that port with this:\nsudo lsof -iTCP -sTCP:LISTEN -P | grep :3000\n. @jdeseno There's a good chance nanoc.yaml gets replaced by nanoc.rb in 4.x, so this would only be a stopgap until then anyway.\n. I believe it's an implementation detail of the filesystem* data sources, and not part of the public API. @ddfreyne would have to confirm though.\n. @lifepillar \u2026but you already can run any command with Nanoc. Your privileges are limited by who runs Nanoc, and your system's restrictions, not by any inherent protection in Nanoc. This wouldn't change that or let you bypass it. \n. @ddfreyne Seems like a reasonable idea. It does make it harder for the average user to get something like multimarkdown going though, so it might be worth having a bunch of simple wrapper filters just to have a place for documentation and an easy command for people to use?\n. Yep. Just about like that. \n. @lifepillar A lot of projects with optional filter-type plugins are taking this approach now. Guard, grunt and gulp all come to mind. The base package ships without any filters, then you install the ones you want as needed. The biggest benefit is that there's not one big monolithic release: a new release is cut for every filter whenever it's needed.\n. everything @ddfreyne just said :)\n. :+1:\n. :+1:\n. :+1:\n. I'm assuming write_stack_trace is called normally when executing, and with :verbose when writing the crash log? If so, :+1:\n. That means you have something already running on port 3000. Either another nanoc instance, or something else. Stop that thing, or specify a different port for nanoc to run on.\nnanoc view -p 3001\n. Nobody noticed because, until the latest release, create-site also created a custom routing rule for the stylesheet:\nhttps://github.com/nanoc/nanoc/blob/3.6.7/lib/nanoc/cli/commands/create-site.rb#L118-L120\nGood catch. We'll get that taken care of.\n. that would be my guess. \n. This is a bit more educational, at the very least :)\n. :+1: works for me.\n. @gpakosz It's backwards incompatible for anyone who happens to have <% anywhere in their config file, for example in a comment or a custom config variable string.\n. :+1:\n. Looks good. I like splitting all the spawning business out into a nice wrapper like that. I don't see any glaring holes.\nThat said, I haven't spent enough time with popen3 to be confident that I'd catch anything if there was an issue.\nSo :+1: with caveats :)\n. I feel like leaving nokogiri tests in and marking jruby as an allowed failure is slightly better. That way it's very clear that jruby/nokogiri is still crappy until it's fixed.\n. @ddfreyne Yeah, good call.\n. haven't reviewed the code yet, but the warning is better.\n. :+1:\n. :+1:\n. :+1: I heart VCR.\n. :+1:\n. No, you want to keep that directory around. That's where the info necessary for partial compiles is stored, and you definitely want those when you can get 'em :)\n. Wait. Are you asking about /path/to/project/tmp/ or /tmp/somethingnanoc/?\n. :+1:\n. :+1: \n. I have nothing to contribute here :)\n. Thanks, @coveralls. \"Coverage decreased (-0.0%)\", huh?\n. :+1:\n. What error are you seeing?\n. Does it work on your system Ruby because you're running an older version of Nanoc which doesn't throw exceptions for duplicate identifiers?\n. Check the troubleshooting page, it tells you all about this issue :)\nIt's not really a change, so much as a bugfix that caused this for you... before the fix, it would silently discard the other file rather than throwing an exception, so this way is definitely better.\n. Ohhh. It's in your layout directory? That's prolly the problem. I bet there's no binary/not-binary handling of anything, it probably naively thinks that the whole directory is made up of layouts.\n. @sueyacoub If you have multiple submodules, each with layouts and content, i would probably set up one data source per submodule.\n. Yes, the last one. Create a folder at the same level as /content called /submodules. The only folder that's restricted from having binaries is your layouts folder, because it is only supposed to have layouts. It sounds like you have content in your submodules, not layouts...\n. Treat all your urls as if they're absolute relative to the nanoc site (not to the root path), then use the relativize_paths filter.\n. In YAML's opinion it's part of the content, too :)\n. lgtm :+1: \n. :+1: \n. :shipit:\n. But slower than fast-aleck ;)\n. I'm still :+1: on the split :)\n. With the split gems in v3.x, do we still need to do Nanoc::Filter.register?\n. :+1:\n. For generating on-disk items, a better bet would probably be to write a custom data source or a custom command.\n. :+1: \n. :+1: \n. > I\u2019d leave out the \u201cand are always unused\u201d \u2014 it\u2019s pretty confusing.\nMaybe \"and are released after completion\" or something?\n. gotcha. okay. leave it out then :)\n. whitelist/blacklist makes sense to me.\n. #476 is tl;dr, but assuming it's more default Rubocop settings and tests all pass, :+1:\nthe only potential bc breaks i saw were is_proxy? to proxy?, and those all have aliases.\n. > FYI, I\u2019ve disabled Coveralls since it quite annoys me.\nIs there a way to make coveralls only comment here if there's a regression?\n. :+1:\n. nice!\n. :+1: lgtm\n. I'm increasingly of the opinion that 1.8.x should be \"deprecated and untested\" but not explicitly removed until 4.x. Let people open pull requests to fix things in 3.x if they come across them, but don't worry ourselves about it otherwise.\n. just add the file to the directory yourself. by forcing a version, you screw everyone else who doesn't want to use that version. it's actually kind of rude ;)\n. Yeah, but not the end of the world even if it's not added. Did you know you can ignore things in your own copy of a repo, even if the project owner doesn't add them to .gitignore?\nbash\necho .ruby-version >> .git/info/exclude\n:)\n. I still use rbenv because I've got enough production Ruby apps locked to various Ruby versions that I don't want to mess with keeping in sync :)\n. There is a way. Everything about this is customizable, because it's made out of Ruby :)\nIf you can give me a bit more context for where and what you're using the title for, I can give you a more specific answer, but likely you should do something like this in your templates:\nerb\n<h1><%= @item[:title] || 'Default Title!' %>\n. :+1: \n(edit: that was supposed to be +, not -. I blame autocomplete)\n. (see the edit)\n. http://nanoc.ws/docs/troubleshooting/#error-found-3-content-files-for-x-expected-0-or-1\n. This is a backwards compatibility break for anyone relying on the current sorting behavior (i.e. just about anyone using this for anything but defaults). Maybe it should be fixed with another option to keep the current sorted order?\n. :+1: \n. :shipit:\n. Is the :pre snapshot usable after other (explicit) snapshots have been created but before :post is present?\n. Then maybe I missed something? I thought this was setting it up to allow accessing :pre once :post is present?\n. Right. So I was asking if you should be able to access :pre from the item itself, once, e.g., :mysnapshot is set.\n. ~> 2.3 includes 2.6.\n. It seems like this is the wrong place for a Vagrantfile... it should be in a project, not in the framework the project uses, right?\n. Let's make nanoc watch tell you to use guard-nanoc and then fail :P \n. :+1: \n. LGTM.\nWould it make sense to move sync and update type commands into a plugin, so that people could still have a way to manage data sources going forward?\n. this is a major version, and a ton of things are changing. let's just document them and remove the code. no need to keep things around to let you know what, specifically, has changed.\n. I'd say {foo,bar} is one of the more useful glob patterns for a static site generator. So it's prolly worth mentioning here?\n. yay globs!\n. :+1: sounds good to me.\n. :+1: \n. I'd probably put a rule (commented out) for handling *.md, just because that's likely to be the most common question.\n. http://www.w3.org/Provider/Style/URI\n. :+1: \n. :+1: \n. might be worth calling this out in the config, or in the site setup, or in a file in the output folder. we don't want to surprise anyone by deleting their only copy of something.\n. i would use parenthesis or em dashes instead of commas around content/samples.rdoc.\n. So just having a commented out markdown rule should be enough, yeah?\n. :+1: LGTM.\n. stripped is weird. null is weird. glob isn't the best, but at least it's accurate.\n. I'm leaning toward:\n- identifier_type: full\n- identifier_type: legacy\nand\n- pattern_type: glob\n- pattern_type: legacy\nLet's make it very clear why the second option for each exists.\n. I'd say name the argument (and instance variable) type and default it to full.\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. 1. Don't be a jerk to anyone.\n2. If you are a jerk, the rest of the community will ask you to stop.\n3. If you don't stop, the rest of the community will ask you to leave.\n. :+1: \n. :+1: \n. > The product name becomes Nanoc (used to be nanoc). The following items are not affected:\n\n\nThe command-line tool\nThe library name\nThe gem name\n. :+1: lgtm\n. :+1: \n. :+1: \n. You can route and compile the original item two times using a rep. It works rather well for things like this. \n. Fair enough. I wouldn't complain :)\n. makes sense. So I'd replace the entire loop with this?\n\n\n``` ruby\nRemove empty directories\nDir['output/*/'].select { |f| File.directory?(f) }.sort_by{ |d| -d.length }.each do |dir|\n  next if Dir.foreach(dir) { |n| break true if n !~ /\\A..?\\z/ }\nNanoc3::CLI::Logger.instance.rm(:dir, dir)\n  Dir.rmdir(dir)\nend\n```\n. Fixed in b0f9f9b192b8366d2be395bbbbe7e46574e0fde0\n. If you're comfortable only following one level of symlinks (e.g. not recursing into a symlink inside a symlink), you can do it all in one line:\nrb\nDir[prefix + '/**{,/*/**}/*'].uniq.select { |f| File.file?(f) }\n. Did we decide not to bind site as well? I think it would be useful for site.data_sources and such. At least I've used those in an interactive session before.\n. Should prolly use @items['/blah/'] as the example here.\n. Would it be simpler here to do\nrb\nDELEGATED_METHODS = Array.methods - [:[], :slice, :at, :initialize, :freeze]\n?\n. you could add .sort here to save us all sorts of support questions :)\n. I'd like to see a test case for /foo/index.html.erb, /foo/index.html and /foo/index/ as well.\n. Same :)\n. do we have to worry about utf16 and other dumb things like that?\n. i'm with @ddfreyne here. one-line ifs make sense for things like\nrb\nreturn if assigns.has_key?(:layout)\nor\nrb\nraise \"Error, yo\" unless assigns.has_key?(:layout)\n... but not for assignment :)\n. I vote ignore, but would settle for warning as well. I feel like that's a buyer-beware sort of moment, right?\nMaybe a warning, then a way to force Sass files including non-nanoc files to always recompile? \"Yo, your stuff's going to be slow because you didn't actually make your include files trackable\"\n. doesn't compass ship with its own importer?\n. For dependencies on files in Compass, they would only change if the Compass version changes, right? IIRC Changing a gem version would result in a full recompile anyway. Confirm, @ddfreyne?\n. If they're in the site's content folder and are just routed to nil, yeah, they're items and are handled as dependencies. But if they're outside the site's content directories, then changes wouldn't trigger a recompile.\n. i don't like an this rescue, since we're calling #load again inside the handler. anything that fails which isn't fixable by removing the pstore will just go into an infinite loop. Can we rescue a specific error?\n. yep. that works too.\n. should that be <= or something?\n. ewww. that's possibly the ugliest way of checking for a regex match :P\n. ruby\ni.identifier =~ args.first\n. I don't know, I've never benchmarked it.\nc\nrb_str_aref_m(int argc, VALUE *argv, VALUE str)\n{\n    if (argc == 2) {\n        if (RB_TYPE_P(argv[0], T_REGEXP)) {\n            return rb_str_subpat(str, argv[0], argv[1]);\n        }\n        return rb_str_substr(str, NUM2LONG(argv[0]), NUM2LONG(argv[1]));\n    }\n    rb_check_arity(argc, 1, 2);\n    return rb_str_aref(str, argv[0]);\n}\nI imagine it's ever so slightly slower, since it has to check the number of arguments and check whether the first is a regexp before calling it, but mostly it's because it doesn't look right.\n. @ddfreyne I'm kind of leaning the same way, with the exception of return ... if .... The return bit is enough to keep people from overlooking the if, since it would mean the rest of the function is dead code otherwise.\n. I'm with @ddfreyne \u2026\u00a0consistency matters more than just about anything else when it comes to code style. Sure, everyone else has dumb preferences, but it doesn't really matter. We have tools to check and even fix all of it, so just pick the most widely used standards, set up all the tools, and quit worrying about. You've probably got more important problems to solve :)\n. Agreed. Also, back when Apache was the only web server worth using, this would have been an acceptable default. Now, I'd be surprised if it would even be useful for a majority of users. \n. :+1: on not using an erb filter by default :)\n. > Renamed identifier_type to identifier_type\n:P \n. should this variable be renamed as well?\n. ^ update the comment here?\n. Why is the :visit_ended before it has actually ended?\n. Yeah, that's kind of what I was wondering.\n. does this work on the windoze?\n. Oh, I didn't realize keyword args could be empty. I've always defaulted them to something.\n. ",
    "mkeveney": "I notice the age of the original post.. Is this still an open issue?\nI put images in my content dir; disable filtering for them; and route to the right place in my output dir.\nSo, my output directory is acting like a build dir.  Am I missing something?\n. I'm new to Nanoc, and not familiar with its earlier behavior.\nBut I'm wondering about an alternative approach:\nHow'bout an option to have Nanoc touch all output files with the date/time of their newest source file?  That way, the dates in the output directory would actually reflect their modification history, but you could still delete the entire output directory and rebuild whenever you like.\nIt raises some questions about what to do when you change Rules or config files... or if you get an updated implementation of a filter that might change output even when the source files are untouched.\nYour thoughts?\n. Another perspective:\nI'm evaluating Nanoc on Windows with Jruby.  Some of the filters are unavailable to me due to binary dependencies (ex: Bluecloth, and RDiscount).  I'm perfectly happy choosing alternatives in production, and already have an installation limping along.\nIt would be cool if I could still make meaningful development contributions, without having to test all the filters.  Is there a way to structure the project to support this?\nbtw: I can (and do) use Bundler, but not rvm.\n-Matt\n. Thanks for the tip.  I'll try the 3.2.x branch & let you know.  (can't get back to it for a couple days though...)\n. Didn't work for me with jruby 1.6.3 running on Windows.  Maybe Windows is the issue?\nC:\\>jruby --version\njruby 1.6.3 (ruby-1.9.2-p136) (2011-07-07 965162f) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_26) [Win\ndows 7-amd64-java]\nI found the link you mention too... I think they 'fixed' it by adding code to raise a 'NotImplementedError.' ...which is what I get.\nBut, backing up a little, is there a reason you need 'readpartial' instead of just a plain old 'read' in that situation?  Is my patch going to break something?\n. Understood... me neither :)\nBut it's piqued my curiosity... As I read the bug report, they fixed the issue by throwing NotImplementedError (where it used to return null).  But, it sounds like Java was the underlying culprit, so I'd expect this to be an issue with JRuby on any platform.\nI find it odd that JRuby worked fine for you.\n-Matt\n. Hm... having a little trouble with Github.  Didn't mean to close this.\nAdded YUI Compress filter.  Works great on JRuby; please retest on MRI\n. > A pull request shouldn't contain merges (use fetch+rebase instead of pull).\n\nAnd one pull request should contain only one feature/bug fix :)\n\nThanks.  Still figuring it all out.\nIs there a way to tidyup this request at this point?\n. Cool.\nInterested in the YUI filter? ...that's the extra bit that should've been a separate pull request.\n. Quick update:\nThe JRuby team consider this a bug and are planning a fix... but have no date yet.\n. I've already switched the time-consuming things to Rake, which in my case is probably a better plan anyway.  ...so it's fine by me.\n. I ran into this too; hacked my way around it; and forgot all about reporting it. Thanks for the patch.\nHowever I think it misses the more fundamental issue that Windows has no widely-used equivalent to either 'growlnotify' or 'notify-send.'\nAs written, your patch will discard the notifications for most Windows users.\nIn my opinion, Notifier.notify by default ought to just emit 'message' to std out, which is what I hacked it to do.  On windows, I run 'start nanoc watch' which then gives me a new console window with the notifications scrolling by.  That's plenty for me.\n. I like your fix; yes it's an improvement. I was just commenting on the general idea.  \nIncidentally, do you feel like you get a lot of value out of growlforwindows?  ...I've always dismissed the idea without giving it much of a chance.  Am I missing much?\n. ",
    "ddfreyne": "I'm not sure what to do with this issue. It is difficult to let nanoc assume that the output/ directory is a build directory because older versions did not use it that way. Therefore, I can't change the behavior without breaking compatibility (People upgrading from older versions might be unpleasantly surprised).\nLetting nanoc auto-clean the output/ directory by removing stale items would be useful though. Perhaps a auto_remove_stale_items config option?\n. > What about a config option to tell nanoc that output/ is a build directory?\nThat would be pretty much what auto_remove_stale_items would do. I like this name better because it is descriptive.\n\nWhat happens currently, if you have an asset in output/ and inadvertently route an item to the same file? it gets overwritten?\n\nIt gets overwritten.\n\nFor me, it would be ideal if it left all unchanged files\n\nThe nanoc site has a rake task that does something similar. You can find it at https://github.com/ddfreyne/nanoc-site/blob/master/tasks/clean.rake. The task is wrongly named\u2026 it should have been called \u201cremove_stray\u201d or something similar, because that is what it does\u2026 remove all stray files, i.e. files that were not created by nanoc.\n. @bobthecow I had the impression that I already converted that task into a command in the master branch, but I can\u2019t find it at the moment. This command certainly is something that could be useful in base!\n. In nanoc 3.3, there will be a \u201cpurge\u201d command and an auto_purge configuration option that solves this.\n. Hey, thanks for the patches. I haven\u2019t had time to look into them yet, but I will do so this weekend.\n. Hi,\nThere was a bit of a delay; hope you don\u2019t mind\u2026\nI\u2019ve pulled your 9862f1a commit fixing the UTF-8 errors related to Nokogiri. nanoc now uses UTF-8 internally everywhere, so it makes sense to ensure that content returned by external libraries or executables is in UTF-8.\nThe main repository for nanoc is hg instead of git, which means that I haven\u2019t pulled your changes via github. Your changes that I have committed will show up on github, but they will appear to be unrelated to your own changes in your own repository\u2026\u00a0it\u2019s a bit of a pain to work with two SCMs at once, but that\u2019s just the way it is.\nThe syntax highlighting addition looks good, but the old behaviour should remain. The way to go here is to support both ways: if a language-something attribute is present on the code element, it should be used, otherwise the filter should look for a #!language line at the very top. Do you want to adjust the filter (and write test cases) or would you rather want me to do it? Either is fine with me.\nThe crash bug is weird. I\u2019m not keen on accepting a patch for something that I can\u2019t reproduce locally, and especially not if it\u2019s unclear why exactly the patch fixes the issue\u2026\nRegards,\nDenis\n. Pulled (though it will show up as a different commit in the git repository, because it has to go through hg\u2026 bah).\n. Hi,\nI\u2019m not entirely sure what I should do with this filter. In its current state, it is certainly too incomplete and not tested enough. For it to be really useful, a few things would have to be changed.\n1. Turn the filter into a general-purpose \u201clinkify\u201d filter. It is not twitter-specific; some people may find it useful to auto-link URLs in their content and that is not something Twitter-specific.\n2. Parse the HTML using a proper parser instead of regular expressions. I recommend nokogiri (it is used by other nanoc filters as well). HTML cannot be parsed properly with regular expressions.\n3. Make the filter a little bit more general to allow other patterns to be recognised and linked. For example, it should be possible to automatically link hashtags.\n4. Tests and documentation. The tests are missing entirely, and the documentation is not entirely correct.\nDenis\n. I haven\u2019t heard back from you in a while. Are you willing to improve this filter?\nIf you do, you should delete your fork and re-clone, then reapply your patch. The repository was recently re-created (because it was broken) and I am now unable to properly pull the request.\nI\u2019ll close this pull request, but feel free to create a new one!\n. Trunk has the slim filter, so I\u2019ll close this pull request.\n. All pulled! Thanks for your patches!\n. This is a useful change, but there are two things that you should change: first of all, the changesets should be condensed into one (lots of superfluous changes in between), and the *.gem files should not be part of the repository. Lastly, since Cri has been updated to 2.0, the changes will need to be adjusted to work with the new CLI.\nYou should also re-clone the nanoc git repository. The old git repository had some erroneous changesets so it had to be recreated. Re-cloning/forking and reapplying your changes should do the trick.\nI\u2019ll close this pull request, but feel free to open a new one which fixes these issues.\n. Pulled. Thanks for this cool patch!\n. The tmp/ directory can be shared between users since it does not contain any user-specific data. Did you run into any specific issues when using nanoc with multiple users?\n. Hi,\nI don\u2019t think this should be the responsibility of nanoc. As I see it, you are not using nanoc the way it is intended to behave: one site directory should contain only a single site, not multiple.\nI would recommend solving this problem by creating multiple sites, but with shared lib/ and layout/ directories (probably using symlinks). Would this approach work for you?\nCheers,\nDenis\n. Hi,\nFirst of all, I feel that your patch is way too large: patches should change only what\u2019s necessary. Your patch is over 40 (!) screenfuls, even though this is a fairly trivial change.\nAs for the approach itself: I would strongly suggest that you use the symlink approach instead. If you want to share data between sites, you could do so by writing custom data sources that pull the shared data. Once such a setup with symlinks is created, it will not need to change often, if at all\u2026 and if it does need to be changed, it can easily be automated using a script. I feel that you are using (or abusing, rather) nanoc in a way that I never intended it to work.\nNonetheless, thank you for the effort that you have put into nanoc, and if you run into trouble getting this or anything else to work, I\u2019d be happy to help.\nCheers,\nDenis\n. The slim filter in trunk now accepts yield. Thanks for the patch!\n. Hi,\nI\u2019m not a fan of this patch. I prefer to simpy give a collection of items to include in the XML sitemap. As a matter of fact, I applied a patch that does exactly this today: check https://github.com/ddfreyne/nanoc/commit/a01d294020ad36e428a94e8ad3289337f22b7072 for details. This approach is more flexible and makes more sense in my opinion. Nonetheless thanks for your patch! :)\nCheers,\n. This definitely looks quite useful. For the time being, I have quick-fixed the Sass filter to make it work again in nanoc 3.1.7. Your filter adds additional useful features that I will likely merge into nanoc at some point, but unfortunately I lack the time to take a good long look at it\u2026 will try to hurry and do it ASAP though!\n. Hi,\nI\u2019ve finally been able to implement this patch. The fixed Sass filter in the 3.1.x release branch is based on your patch, but I have modified the code quite a bit regardless (mostly cleaning up stuff).\nThanks for your contribution!\n. Hi,\nI have mixed feelings about this patch. The reason why I think this doesn\u2019t belong in nanoc is because it makes retrieving articles only marginally easier (arguably, because people may need to look up how the method works) while adding unnecessary complexity. I\u2019d like to keep nanoc as clean as possible and this patch doesn\u2019t fit this philosophy. Nonetheless, thanks for your patch!\nCheers,\nDenis\n. Applied\u2026 thanks for the patch! You can find it here: https://github.com/ddfreyne/nanoc/commit/c49bbb2f566b01232f9e754237be8c3fa7101564\n. I have fixed this in the 3.1.x branch. I modified your patch slightly so it\u2019s not an exact copy.\n. Hi, thanks for the patch! I\u2019ve applied it to my trunk. It won\u2019t show up as properly merged on github because the main repository is hg though.\n. Pulled!\n. Yeah, amazingly ugly due to me replacing the master branch with a correct one. :(\n. There already is a use Rack::Head in there (right above the line you added)\u2026\n. No worries, happens to me as well :)\n. Done!\n. Is this issue still relevant for your rvm-based install? Given that you had some trouble with Sass due to the broken Debian/Ubuntu install, this issue might be resolved as well\u2026 let me know!\n. This is a bug in 3.1 which is apparently already fixed in 3.2. Pass :syntax like this:\nfilter :colorize_syntax, :syntax => :xhtml\nShould have occurred to me earlier\u2026 apologies!\n. The (sadly undocumented) :syntax => :html will fix this for you (can be either :html or :xml/:xhtml, the latter two being equivalent). I will add this to the documentation!\n. Argh\u2026 I totally closed the wrong issue\u2026\nI meant to say that :default_colorizer is not implemented in nanoc 3.1.x, and only available in master (but it is broken there\u2026 will fix).\n. Fixed! Let me know if the updated version in the 3.1.x branch works for you.\n. Hi,\nAre you using the latest version of Sass? You should have at least 3.1.\nCheers\nDenis\nOn 02 Jul 2011, at 18:21, auxbuss wrote:\n\nHi,\nI've just tried to compile my nanoc project got:\n=== MESSAGE:\n   NameError: uninitialized constant Sass::Importers\n   === COMPILATION STACK:\n- [item]   /css/style/ (rep default)\nThe project was fine a few days ago. Regardless, I've gone back down the git tree a couple of weeks and I'm getting the same error there.\nI saw this https://github.com/ddfreyne/nanoc/pull/12 and presume it's associated.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ddfreyne/nanoc/issues/25\n. Hm, this is quite odd. Sass 3.1.x has Sass::Importers (which is now being used by nanoc for handling @imports in Sass), so this issue baffles me\u2026\n. If you install rubygems-test and run \u201cgem test nanoc3\u201d with the latest 3.1.9 version of nanoc, what do you get?\n. What is the result after installing minitest and mocha?\n. Yikes, quite a few issues that shouldn\u2019t show up (but probably some due to missing and unhandled dependencies, so that is fine). In the full result, do you see anything related to Sass?\n. The output should have included the line \u201cFinished tests in 14.913529s, 26.9554 tests/s, 63.2312 assertions/s.\u201d and several failed test results after it\u2026 \n. Okay, that is quite weird\u2026 ::Sass::Importers::Filesystem does exist; can you verify that in your Sass installation?\n. The only thing I can think of is that you are not using the latest Sass version. Sass::Importers is defined in lib/sass/importers.rb, which is present on Sass 3.1.x versions. Can you double-check whether this file exists and you are using the correct Sass version?\n. Hmm, this is quite odd. In nanoc, if you print Sass::VERSION, what do you get?\n. In a file in lib/, add \u201crequire 'sass'; puts Sass::VERSION\u201d\u2026 when you compile the site the statement should be executed.\n. Seems like nanoc is using Sass 3.0.x instead of 3.1.x for some reason\u2026 can you try uninstalling sass 3.0.x and running it again? (Or set the dependencies right in your Germfile if you use Bundler)\n. Are you running an up-to-date version of Haml? Upgrading Haml may do the trick\u2026\n. Do you have old Haml versions installed? Perhaps removing those will solve this issue.\n. It looks like Sass 3.0.x was installed without Rubygems and that Ruby\u2019s first place to look for Sass is the wrong one\u2026 I\u2019d recommend uninstalling this sass so that Rubygems\u2019 Sass is always used.\n\nIf you\u2019re on a *nix system, I really recommend rvm for managing your Rubies\u2026 it\u2019ll save you a lot of trouble.\n. (The warnings are not relevant btw.)\n. Cool. I\u2019ll close this ticket!\n. Ubuntu/Debian\u2019s Ruby install is a mess\u2026 definitel use rvm there!\n. Hi,\nI\u2019ve taken a look at your patches and the first thing that I noticed was that you included quite a few irrelevant ones (rvm, bundler, gemspec changes) which I will not pull (I don\u2019t need them and I don\u2019t even like them much).\nI did pull two of your patches wrt implicit test dependencies though\u2026 thanks! (A much needed fix for making development easier.)\nAs for the Tilt filter itself: I will have to take a closer look there. I fear that dependency tracking will be an issue with Tilt (especially for Sass/Less where @imports are not recognised). If I can\u2019t get dependency tracking to work with Tilt, I\u2019ll probably not add a Tilt filter but rather add some Tilt-like functionality that uses nanoc\u2019s existing filters.\nDenis\n. Hi,\nI\u2019ve taken a second look at the other changes in your pull request and I have partially changed my mind. The repository now includes a .gitignore (without system-wide ignores to prevent redundancy) and the gemspec lists development dependencies (but not all third-party gems for filters/helpers). I\u2019ve left out the .rvmrc (I don\u2019t like the idea)\u2026\u00a0and as far as Bundler is concerned, I\u2019ll have to re-evaluate this.\nDenis\n. Hi,\nI have added a Gemfile to the release-3.2.x branch which should make development easier. Thanks for the idea; Bundler is pretty useful indeed. This Gemfile lists stuff that is not in the gemspec (because I don\u2019t think most of these are actual development dependencies) but that is okay because you can install them from the Gemfile anyway.\nThere are several rake tasks for testing. The default test task runs everything, but there are also test:base, test:filters, test:helpers, etc (check rake -T for a full list). In any case, if a test can\u2019t be run due to missing dependencies, it is skipped and doesn\u2019t cause an error.\nDoes this help?\nDenis\n. I have decided not to add the tilt filter to nanoc, because I don\u2019t think there is a way to make tilt fit in properly with nanoc.\nThe problem with tilt integration is that there is no way to generate dependencies for languages such as Sass and Less, which allow @imports that need to generate dependencies, which is not possible with tilt.\nIn addition, I believe that most Tilt functionality can quite easily be recreated in nanoc itself, probably even as simple as an extension-to-filter mapping.\n. Hi,\nIf you upgrade to Cri 2.0.1 (gem update cri), this issue should go away. I\u2019ll close this issue, but feel free to reopen it if the issue persists! (Which it should not, but you never know :).\nCheers\nDenis\n. The colorize_syntax filter by itself does not include any CSS styling\u2026 you\u2019ll have to write your own stylesheets for that. You can check out the nanoc site\u2019s stylesheet (http://projects.stoneship.org/hg/sites-nanoc/file/8c6701580947/content/assets/style/_code.sass) to get an idea how it is done.\nI\u2019ll close this ticket, but feel free to reopen it the issue remains.\n. Hi,\nIt is odd that you get this error when the compilation runs for the second time. The problem occurs because there are two content/style/screen.* files (not counting in the .yaml ones if you have any) but there can be only one item with identifier /style/screen/. Do you have an idea what could be causing this error? Are you adding files in between runs? (That is the only thing I can come up with).\nAlternatively, you can use \u201cnanoc watch\u201d which will be part of the upcoming 3.2 release. I think this does exactly what you want. 3.2 is not out yet (very soon though!) but you can install a pre-release, which should work fairly well, using gem install --pre nanoc3. Let me know if \u201cnanoc watch\u201d works for you!\nCheers\nDenis\n. Does upgrading cri (gem update cri) fix the issue?\n. (The issue with nanoc watch, that is.)\n. Part of the error (the second \u201cCaptain! We\u2019ve been hit!\u201d) is because of a bug in the error handling which has already been fixed in the GitHub trunk\u2026 if you feel like it, you can clone the repository and check out the release-3.2.x branch, but the version you have should work too.\nIt looks like you don\u2019t have a lib/ directory in your nanoc site directory\u2026\u00a0is that so?\n. Ah yikes, the nanoc-bootstrap-compass repository should have had a lib/ directory (not sure where it went). If you add it, does watch work?\nThe release-3.2.x branch is here: https://github.com/ddfreyne/nanoc/tree/release-3.2.x.\n. The repository for nanoc is at git://github.com/ddfreyne/nanoc.git so you can clone that, but be sure to check out the release-3.2.x branch.\nIf you\u2019re getting a 404 error, you probably don\u2019t have an index page in the output directory. You\u2019ll also have to use nanoc view in tandem with nanoc watch (the former starts a server, the latter recompiles the site when necessary), but you may already be doing that.\n. That\u2019s cool. You don\u2019t need livereload anymore; just nanoc view and nanoc watch will do the trick.\n. Hi,\nThis happens because I did not properly test on Ruby 1.8... this will be\nfixed in a future release, but in the mean time, you can put this in your\nlib folder:\nclass Symbol ; def <=>(other) ; self.to_s <=> other.to_s ; end ; end\nCheers\nDenis\nOp 22 jul. 2011 17:28 schreef \"dutygeeks\" \nreply@reply.github.com\nhet volgende:\n\nHi Dennis,\nSorry asking again. I have reinstalled my computer, reinstalled all\nrequire files to work nanoc and compiled latest 3.2.0.b3.\nBut I can't do anything... please help me...\nCaptain! We\u2019ve been hit!\n=== MESSAGE:\nNoMethodError: undefined method `<=>' for :fog:Symbol\n=== COMPILATION STACK:\n(empty)\n=== BACKTRACE:\n0.\n/Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/commands/deploy.rb:7:in\nsort'\n1.\n/Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/commands/deploy.rb:7:indefine'\n2. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:107:in\nload_command_at'\n3. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:70:insetup'\n4. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:68:in each'\n5. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:68:insetup'\n6. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:38:in run'\n7.\n/Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/error_handler.rb:40:inhandle_while'\n8.\n/Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/error_handler.rb:21:in\nhandle_while'\n9. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:37:inrun'\n10. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/bin/nanoc:12\n11. /usr/bin/nanoc:19:in `load'\n12. /usr/bin/nanoc:19\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ddfreyne/nanoc/issues/30#issuecomment-1632496\n. Hi,\n\nIf you check out the latest code in the 3.2.x branch, the issue should go away.\nThe browser never automatically refresh (nanoc can\u2019t do that). All nanoc can do is automatically recompile the files when they have changed.\n. Hi,\nFile#readpartial works for me on the latest JRuby. I did find http://jira.codehaus.org/browse/JRUBY-2586 which seems to be exactly the issue you are having, but this was supposedly fixed quite a while ago. Does this issue persist in the latest JRuby version?\n. It looks like I can indeed simply use #read. I\u2019ll fix it ASAP, but I unfortunately haven\u2019t got the time right now :(.\n. I\u2019ve replaced #readpartial with #read. Thanks for the patch!\n. This should now be fixed in the release-3.2.x branch. Other options such as --host and --handler were not working either (same for the view command).\n. Ack, this is annoying. The problem with #join can be resolved by using Ruby 1.9 (not a permanent solution because I will obviously fix this) but I\u2019m not sure about the #popen3 issue. I\u2019ll try to take a closer look and create a fix ASAP!\n. I have fixed the issue (as you can see above) by replacing #open3 with #systemu (I thought I used systemu everywhere but I was wrong). The #join issue should now be gone as well. Can you verify this?\n. That is odd. If you check out the release-3.2.x branch and run \u201crake test\u201d there, do you see any failures for the colorize_syntax filter (more specifically ones for pygmentize)?\n. Can you give me the verbose output of the colorize_syntax filter tests? You can run them like this:\nruby -r ./test/gem_loader.rb -r minitest/autorun -r ./test/helper.rb ./test/filters/test_colorize_syntax.rb -v\n. That looks fine. Are you sure that #systemu doesn\u2019t spawn a process? The #test_pygmentize test case seems to indicate that systemu correctly spawns pygmentize and returns the correct output as well.\n. Alright, I\u2019ll leave the issue closed then. Feel free to reopen it if the issue returns!\n. Are you still having this issue? I cannot reproduce it with a site with a thousand items: it does take longer than usual, but only two seconds here.\nThe reason why the site needs to be loaded is to prevent items with identical identifiers from being generated, so the requite_site seems necessary to me.\n. This is not intentional. I'll fix it ASAP!\n. A quick correction: the fact that you could access @site in the Rules file was never intentional. It does make sense to allow access to @config though. I\u2019ll fix!\n. You can now access @config (but not @site because that doesn\u2019t make a lot of sense) in the rules file.\n. Hi,\nThe #layout call inside a compilation rule is called on a Nanoc3::ItemRepProxy (see the Nanoc3::ItemRepProxy#layout documentation). Outside the compilation rule, it is called on a Nanoc3::CompilerDSL.\nHere\u2019s the intended usage for both #layout methods:\n```\ncompile '*' do\n  filter :erb\n  layout 'default' # here we call the layout\nend\nlayout 'default', :erb # here we define the layout\n```\nCheers,\nDenis\n. Hi,\nIn nanoc 3.2, all site data such as the configuration, items, layouts, etc are frozen so that they can no longer be modified. This was necessary to allow optimizations (and was never officially supported in 3.1.x anyway, sometimes causing inconsistencies). You can still modify data in the preprocessing phase (the preprocess do \u2026 end block) though.\nIf you can\u2019t figure out how to solve this, I\u2019ll gladly take a look at your site code to see how it can be resolved.\n. The /tag_page/ layout on line 15 seems to be the source of the trouble (perhaps the issue is deeper down though). Are you doing an assignment there or a mutation of some sort?\n. The problem is in Ruby\u2019s implementation of several date-related methods. These methods memoize their result, which means that their internal memoization dictionary is frozen as well. For example, converting a date to its civil counterpart will fail because its memoization dictionary is updated\u2026\nIf you take a look at date.rb (lines 1003\u20131019) you can see the definition of the #once method which performs the memoization. You could overwrite this method so that it does nothing as a quick fix, but that\u2019s rather ugly\u2026\nI will get back to you once I have a proper fix for this!\n. This is issue #35 which has been fixed a few minutes ago. If you check out the release-3.2.x branch, you should have a version of nanoc that works!\n(Or use Ruby 1.9, but that is obviously not the final answer.)\n. One other workaround for nanoc 3.2 would be to duplicate the Date instances (the copies won't be frozen) and then using those instead. Alternatively, patch Date to remove the memoization code.\nI'll come up with a proper solution soon, but I barely have time these days.\n. I had trouble reproducing this issue for a while, but it seems it only occurs on Ruby 1.8.x and not on Ruby 1.9.x. So, using 1.9.x may be a solution for this issue.\nThis issue is a pain to work around. I need to override Date\u2019s once class method before it gets called for the first time, but other libraries may already have required \"date\" and then it is already too late. Other solutions exist, but are incredibly dirty\u2026\n. I have reported this issue to the Ruby team. The bug report (along with a possible patch) is at http://redmine.ruby-lang.org/issues/5270.\n. You could apply the patch that I included in the bug report onto your existing Ruby installation\u2026 it\u2019s not a great solution but it will do the trick!\n. I\u2019ll close this issue, since this is not a bug in nanoc and there is no easy workaround (except for patching your Ruby 1.8.x installation). Just use Ruby 1.9.x. :)\n. A proper fix (for Ruby 1.8.x) will be in nanoc 3.3.3. For details, see #110.\n. Hi,\nI\u2019ve fixed this in the release-3.2.x branch (commit a1b840fe24db601b14581570c7ea5c3de38f185a). Thanks for reporting!\n. This seems to be a problem with Nokogiri\u2019s XML parser. The following piece of code:\n<pre><code class=\"language-nginx\">blah</code></pre>\ngets turned into\n<pre>\n  <code class=\"language-nginx\">blah</code>\n</pre>\nwhen using any filter (I am using the dummy filter here, which does nothing). When using HTML instead of XHTML, everything works as expected. The reason why this works in 3.1 is because everything is parsed as HTML in 3.1\u2026 there is no XHTML option.\nSwitching back to HTML instead of XHTML would solve the issue for you\u2026 I\u2019ll keep this issue open until I can fix this properly though.\n. I have reported this on the Nokogiri issue tracker at https://github.com/tenderlove/nokogiri/issues/530.\n. I suppose you could even write an XHTML-to-HTML filter if you don\u2019t want to do it manually. :)\n. Does the problem persist when you remove the :ugly => true?\n. This is odd\u2026 are you sure the :colorize_syntax filter call says :syntax => :html instead of :syntax => :xhtml now?\n. It is a bit odd that you are indenting the entire pre block\u2026 are you sure you want that? It seems more logical to me to not indent anything there, and let the stylesheet do the indentation.\nAssuming you do want the indentation: nanoc strips leading/trailing whitespace from code blocks, so that you can start the actual code on the line below the line containing the pre/code. As a side effect, this removes indentation for the first none-whitespace line. Perhaps the logic for the stripping should be adjusted so that only the first whitespace lines are removed. Does that seem good to you?\n. Hi,\nI\u2019ve changed the stripping behavior so that only the first blank lines are removed. The changeset is 40d9e3806221a3b7622683f86a7811cfcd1261cc if you\u2019re interested. I prefer this new behavior; what do you think? I\u2019ll close the issue, but definitely reopen it if you disagree with what the changeset does!\nCheers,\nDenis\n. Thanks for the patch! I\u2019ve pulled this and made a few changes (such as renaming it to \u201cpruning\u201d). You can see the result here.\n. No worries\u2026\u00a0I\u2019ll pull the individual changes manually!\n. I\u2019ve transplanted the improved Time#inspect method onto the release-3.2.x branch. Thanks!\n. I haven\u2019t taken a good look at the YUI filter yet, but I\u2019ll do so soon\u2026 no need for a separate pull request\u2014I\u2019ll figure it out. :)\n. I\u2019ve added your YUI compressor filter to the master branch. Thanks for the patch!\n. Thanks for letting me know! Something funky happened with yardoc apparently, but I ran it again and it\u2019s all okay now.\n. Ahh, this looks quite nice! Using a proper HTML/XML parser is something that had to happen sooner or later (regexes are very bad style), so thanks for the patch!\nI don\u2019t have the time to take a close look at the moment, but I\u2019ll check it out and merge it ASAP!\n. That is odd\u2026 do you perhaps have a compass.rb file in the working directory? If so, require 'compass' would work but it would load not load Compass itself.\n. Is this issue still open? I haven\u2019t had a response in a few months so I will assume this is resolved now. I\u2019ll close the issue, but feel free to reopen it if the issue still exists!\n. Thanks! I\u2019ve transplanted your changes onto the release-3.2.x branch.\n. The issue lies indeed deeper\u2026 seems like a bug in Ruby to me. Here is a reduced test case:\n`````` ruby\nencoding: utf-8\nEncoding.default_internal = Encoding::UTF_8\nrequire 'pstore'\nstore = PStore.new('blah')\nstore.transaction do\n  store[:foo] = '\u2026'\nend``\n``````\n. I cannot reproduce this issue in Ruby 1.9.3 anymore. Can anyone else verify? I\u2019ll close the ticket, but feel free to reopen it if it still fails in Ruby 1.9.3.\n. Pulled! Thanks for your fix!\n. nanoc should pick up changes in the site configuration,content,layoutsandlib` directories by default. Are you loading or reading files from other locations? If so, you should add them to the site configuration.\n. Is this issue still open? I haven\u2019t heard back from the original reporter in a few months so I assume this is no longer the case. Feel free to reopen the issue if the issue persists!\n. Thanks for letting me know! :)\n. Thanks! Pulled and merged in 3d7aac57bbd4cd128549baac6741e8bfed3118a6.\n. Hmm, interesting issue! It is possible to indicate the language of the code using a declaration such as\n```\n!ruby\n```\nat the start, but lines such as\n```\n!/usr/bin/python\n```\nwill be mistakenly parsed as language declarations. A workaround would be to either remove the line, or add an extra line for python syntax highlighting at the top.\nI\u2019m not sure how to fix this. Perhaps look for #!/ instead of #! at the start of the declaration, and if it is found, do not interpret the line as a language declaration. I\u2019ll see what I can come up with!\n. This should now behave as expected. The language regex requires #! but not #!/ at the start now.\n. Thanks for the patch! I have transplanted your changes from the master branch to the current release branch (release-3.2.x) so that the fix will be in the next patch release.\n. That\u2019s quite a useful addition. I\u2019d like to retain the old behavior as well though, so perhaps a :outside_pre => true flag that swaps \"pre > code\" for \"code\" would be better. What do you think?\n. I think that would be generalising too much. I\u2019d rather wait and see whether there really is a need for a general CSS selector. In the mean time, I\u2019d much rather keep it simple and use a :outside_pre => true flag.\n. Hi, I\u2019ve pulled your patch and swapped the :colorize_selector option for a :outside_pre one. Thanks for your contribution!\n. Mounting the items from content/assets won\u2019t work yet because it will cause files in content/assets to be parsed once by filesystem_unified and once by static, which is wrong. I\u2019d also like to update the filesystem_* data sources with an option to enable/disable extension stripping.\nAppart from that, this pull request looks promising! I think I\u2019ll do the next developments for this, but if you\u2019re up to it you can take a stab at it too.\n. Ideally, I\u2019d like to have a configuration for my sites where I have two data sources: one data source for the usual files (filesystem_unified mounted at content/) and another one for static files (filesystem_static mounted at content/static).\nThis is currently not possible because you cannot nest source locations. I\u2019m no fan of having two directories for content (content and static or assets) so I\u2019d like to fix this before the static data source becomes part of nanoc.\n. @ogier It is mostly solved in the way you describe, but in some cases it is useful to have two items where the extension is included in the identifier, e.g. /assets/fonts/blah.otf/ and /assets/fonts/blah.ttf. nanoc\u2019s normal data sources strip file extensions, while a static data source doesn\u2019t. I\u2019m not sure what you men about config.yaml munging\u2026\u00a0but I guess index.html should not be handled in a special case either for static data sources.\n. @ogier I think that allowing metadata to be associated with static files is still useful so it\u2019s not something I want to remove. Being able to have raw .yaml files as actual items is something I\u2019d like to have as well, so this needs some more thought.\n. I\u2019m going to merge this pull request soon with a couple of changes:\n1. No changes to config.yaml\n2. No changes to Rules\n3. Nanoc3 instead of Nanoc\n. This looks like a quite nice addition. I\u2019ll merge it soon. Thanks for sharing!\n. I\u2019ve pulled your patch. Thanks for the contribution!\n. Hm, that is odd. Nokogiri should not modify the string it receives when creating a document\u2026 might be a bug in the Java version of Nokogiri\u2026 I\u2019ll take a closer look soon!\n. If you take a look at the nokogiri.XmlDocumentFragment implementation, you\u2019ll see that the incoming string is indeed modified, which is not allowed by nanoc (for optimisation purposes). I believe this is a bug in nokogiri, so I\u2019ll see whether I can reproduce it easily and report an issue with nokogiri.\nIn the mean time, you can modify the colorize_syntax filter and replace line 93, which says doc = klass.fragment(content), by doc = klass.fragment(content.dup). Does that work for you?\n. Can you show the track trace that you are getting now?\n. Hi,\nI haven\u2019t heard back from you so I\u2019ll close this issue. If you (or somebody else) stumbles on the same issue, feel free to reopen!\n. I\u2019m not sure how useful this change would be. You save only a handful of characters for something that is not going to be used often while introducing extra complexity.\nBy the way, it is actually the routing rule that should return nil if the page should not be written, while the compilation rule doesn\u2019t care about the return value.\n. I have decided not to pull this change. I feel that this tiny change adds too much extra complexity for what it\u2019s worth.\n. More documentation would help, but a lot of people (including myself!) have stumbled over this odd behavior, so changing the behavior seems like a better solution to me. :)\n. For the record, in the latest version of nanoc at the moment of writing (3.2.4) you can place the allow_periods_in_identifiers in the more logical place where you initially put it.\n. I agree that this is annoying, but it is an issue that (ideally) only happens once. I also believe that nanoc gives a clear enough instruction on how to fix the issue, so it is not at all like \u201ccrash and burn\u201d. There is also no single way to automatically install dependencies either: some require root, and some don\u2019t, and some users may even prefer to use Bundler for that.\nIn short, I believe that nanoc should not attempt to install dependencies automatically.\n. Hi Arnau, this looks like it could be quite useful. I\u2019ll pull the patch in a bit, but there is at least one thing I\u2019ll have to fix and that is taking into account that the content filename can be nil (in case there is only a meta file or the item is generated during the preprocessing phase).\n. Yes, that should be enough. I\u2019ll merge and fix, no worries!\n. Hi, thanks for reporting! It seems that there are two reasons why this does not work properly:\n1. The #resolution_for method uses MatchData the wrong way, and\n2. Ruby 1.9.3 changes the LoadError message format so I need to extract the library name in a different way.\nBoth issues are now solved in the 3.2.x release branch!\n. Can you paste the error that you\u2019re getting? Is it identical to the one mentioned above?\nDo you have mime-types installed? (gem install mime-types) Do you have a Gemfile and does it contain mime-types?\n. Alright. I\u2019ll just leave this issue like it is :)\n. @shayonj Do you have a Gemfile? If so, can you try removing the .lock and installing the bundle again? If that doesn\u2019t fix it, can you share your Gemfile and Gemfile.lock?\n. @shayonj That is odd. 3.3.2 does not change the behavior, so it should work fine. Can you also try with the most recent version of nanoc, 3.3.6?\n. Alright, I\u2019ll close the ticket!\n. Hi,\nThanks for reporting! This issue is the same one as #39 so I will close this one as a duplicate.\nAt the moment, #39 is not yet fixed. The root cause is a bug in Ruby itself and there is no easy workaround. Either patch your Ruby installation or upgrade to Ruby 1.9 (the latter is recommended anyway).\nDenis\n. Hi Ilker,\nApologies for not answering earlier.\nI am a bit torn on this change. I am not sure whether the code for your Rake tasks should be in the lib/ directory. As I see it, creating a tasks/ folder in which you place the extra code for your tasks would make such a exclude_code_snippets configuration option unnecessary, wouldn\u2019t it? You can create separate .rake files in the tasks/ folder and then import them like this:\nDir.glob('tasks/*.rake').each { |r| import r }\nWould this solution work for you?\n. Alrighy, good that we come to the same conclusion :)\nIn nanoc 3.2 the preferred way to automate nanoc is to write commands instead of tasks. You can still use rake tasks of course, but commands are more powerful. In nanoc 3.3, all built-in rake tasks will be replaced with commands (calling the tasks will invoke the command). Commands are stored in commands/ in the site directory.\n. Hi,\nnanoc infers from the environment that the encoding is ASCII, which is presumably incorrect. You should either adjust your environment (add LC_ALL=en_US.utf-8), or tell nanoc explicitly about the encoding that is to be used. To do this, open config.yaml and add this at the same level of the layouts_root: \nconfig:\n      encoding: utf-8\nCheers,\nDenis\n. Apparently, it is not documented (although references to it can be found on the mailing list). :(\nWill fix!\nBy the way, the extra \"config:\" is not necessary as of nanoc 3.2.4; you can put the \"encoding: utf-8\" right along with the items_root and layouts_root etc.\n. Thanks for keeping me up to date! I\u2019d wait for a fix rather than let nanoc work around this issue\u2026 do you agree?\n. That's not a bad plan. I'll close the issue for now.\nBy the way, you can also use the new nanoc commands (as of 3.2) instead of Rake tasks if you want.\n. Hi,\nThe problem lies a bit deeper, because nanoc currently assumes that the syntax highlighters always return something that can be wrapped in <pre><code>\u2026</code></pre> which is not the case when Pygments returns a table with line numbers. I\u2019ll have to look into it further.\n. @jonforums Are you still experiencing this issue with 3.2.4? It should be fixed now.\nThere was a fix for this by passing nowrap=True to Pygmentize, which eliminates the need for the xpath magic, so I\u2019ll close this issue, but if you still experience code being removed, feel free to reopen it.\n. Hi, thanks for the patch! This certainly is useful.\nCan you apply the changeset on the release-3.2.x branch, though? This branch is for bugfixes for the current release, while master is for new development.\nCheers,\nDenis\n. Good catch. I\u2019ve fixed the issue as you can see, but can you check out the release-3.2.x branch and test it to make sure it works for you as well?\n. More curious is that I cannot reproduce the issue with your site on Windows either. I'm continuing my investigation\u2026\n. Does the problem persist if you remove tmp/ and output/ and recompile? I am getting the feeling that something in tmp/ became corrupted and is causing unnecessary recompilation.\n. The .git folder should not have an impact on compilation. It would only have an impact if it were in content/ or layouts/ or so.\nIt\u2019s good to know that removing tmp/ fixes the problem, but it does indicate the data got corrupted and that should obviously not happen. Do you have a backup of the broken tmp/ directory? I\u2019d like to take a look at it. I do realise that the chance of you still having it are extremely small. :)\n. If you encounter the problem again, let me know and send me a copy of the site so that I can investigate. :)\n. The root cause of this issue is something quite different and manifests itself quite often but rarely causes issues. This happens on all platforms, not just Windows.\nWhen an item I is laid out with a layout L, a dependency from I onto L will be created. When L includes content from the item being laid out (e.g. <%= item[:title] %>) a dependency from L onto I will be created as well. The latter is incorrect: a layout should (as I see it now) not have a dependency on the actively compiled item, but any other items or layouts it accesses should cause a dependency to be created.\nSadly, there\u2019s no trivial fix for this. :(\n. I was mistaken: layouts should never depend on items and the code doesn't generate dependencing from layouts onto other items. If an item depends on a layout which depends on an item, the former item will depend on the layout and the former item will depend on the latter item.\nThe actual bug (or one of the actual bugs... not sure yet) is that when creating new items, a dependency from all objects (items + layouts) onto the new object is generated, even though the dependencies should only come from items instead of both layouts and items. I haven't been able to fix this issue yet but I will do so ASAP.\nThe current fix implemented in master is incorrect and I will be reverting it soon.\nAs for introducing external state into items/layouts being compiled such as Time.now: there's no good way to prevent this in a non-pure language. I have seen people include content from external sources (such as <%= File.read(...) %>) but this should be avoided as the nanoc dependency tracker cannot cope with this.\nIn short, dependency handling is tricky business.\n. This should now be fixed in master. Here are the relevant changes if you\u2019re interested.\n. Don\u2019t worry about the patch, I\u2019ll write something up :)\n. I fixed this in fca59e38b2fe5c2b90c576c323f6a3ed98e1f8a9. I didn\u2019t specify the encoding though, so I\u2019ll have to look into that just to be sure. The cleanup (extracting the pre contents) has been moved to a separate method.\n. Forgot one thing: I don\u2019t think that handling errors raised by RubyPython or Pygments is nanoc\u2019s job; nanoc would end up catching and handling errors for a lot of libraries otherwise\u2026\n. It uses latin-1 by default, so passing the encoding is necessary. Encoding handling should now work fine!\n. For future reference: I ran into a problem with Nokogiri not producing correct output (garbled text due to wrong encoding), so I googled and found tenderlove/nokogiri#458 which was reported and also resolved by me, so thanks to myself for writing down the solution to that issue somewhere. :D\n. Thanks! I\u2019ve pulled your patch (as well as #78, the libxml2 encoding bug) and applied it to both the release-3.2.x and master branches.\n. Thanks for the patch! I\u2019ve pulled this one as well as #77 into both the release-3.2.x and master branches.\n. Hi,\nThis is the same issue as #73 which is resolved already. I\u2019ll be releasing an update for nanoc 3.2 soon. If you want, you can check out the release-3.2 branch and use this one!\nCheers\nDenis\n. Thanks for reporting!\n. You can check out the release-3.2.x branch, or if you can wait an hour or two, I\u2019ll release nanoc 3.2.4.\n. Update your gems; the issue should be fixed!\n. It doesn\u2019t quite make sense that 1) the warning is given twice, 2) the warning is given at all, and 3) \u2303C asks for termination twice.\nApart from that, does the watch command work fine?\n. Does the warning to away with the necessary Windows stuff installed?\n. I\u2019ll reopen the ticket to prevent me from forgetting to look into it, even if it\u2019s not very high priority.\n. @twome Are you referring to the fact that you need to press \u2303C twice?\n. Hmm, I don\u2019t think vim swap/backup files be related.\nIs there a space in the path to your nanoc site directory? (@KenMor, @twome, @edbrannin)\n. Are you using the latest version of listen on both machines?\n. Ahh! This is probably because the watch command is looking for growlnotify and notify-send.\nCan you try editing lib/nanoc/cli/commands/watch.rb and replacing the following code (around line 120):\nruby\n          begin\n            TOOLS.find { |t| !`#{FIND_BINARY_COMMAND} #{t}`.empty? }\n          rescue Errno::ENOENT\n            nil\n          end\nwith\nruby\n          begin\n            old_stderr = $stderr\n            $stderr = StringIO.new\n            TOOLS.find { |t| !`#{FIND_BINARY_COMMAND} #{t}`.empty? }\n          rescue Errno::ENOENT\n            nil\n          ensure\n            $stderr = old_stderr\n          end\nIf that removes the INFO: Could not find files for the given pattern(s), then we have a fix!\n. @twome Can you apply the changes from #298 to your nanoc version, and see whether the message is gone?\n. Fixed in #298!\n. Hi Jon,\nThe first thing that jumps to mind is that your HTML is not valid: the < and & characters will need to be escaped. Does the issue disappear when they are escaped?\nCheers,\nDenis\n. You can use nanoc\u2019s HTMLEscape helper to mark a piece of text to be escaped. The documentation I linked to contains an example of how you can do this.\nDenis\n. Hi Jon,\nYou could fairly easily create a highlight helper like the one you mentioned above. This one would capture the content of the block using the Capturing helper, add the necessary <pre><code class=\"language-xyz\"> and </code></pre> wrappers, and then run the captured content through the syntax highlighter using the Filtering helper.\nErubis does not have _erbout but it does have _buf, and there are ways to make it behave more like ERB. I will get back to you on that soon.\n(To be honest, I think the colorize_syntax filter expects a full HTML page as its input and may therefore generate HTML boilerplate like doctype/html/head/body which is incorrect in this case. Fixing this case is something I\u2019ve been working on but haven\u2019t completed yet. I\u2019ll let you know more about this soon.)\nCheers,\nDenis\n. The Erubis issue is fixed. See this changeset for details. Next up is the colorize_syntax issue adding HTML boilerplate, but this will take a while longer I believe.\n. The colorize_syntax filter runs on fragments and not the entire page (does not add HTML boilerplate) so you should be all set. Does this solve the issues you\u2019re having?\nCheers\nDenis\n. Hi Justin,\nWould it not be better to use a library such as Linguist or LanguageSniffer to detect the programming language a snippet is in? This would be a cleaner approach and it also would support a lot more languages.\n. That's a good point. Do you know any libraries for an exact-fit match? If not, maybe we/I should write one. :)\n. One thing that bothers me here is that there\u2019s no way to turn off the automated highlighting this way. Suppose you have a piece of text that starts with <?php but that you do not want to be highlighted\u2026 how would you turn it off?\n. I\u2019ve decided not to pull this change for the following reasons:\n- Reliable language detection should be abstracted away, perhaps into a separate library. It should also support more languages than just PHP. Languages which should be easy to detect reliably also include HTML and XML, but there are probably more.\n- There should be a way to opt-out of automatic language detection.\n- There should be a way to prevent certain pieces of code from being highlighted using the automatic language detection even if it is turned on. Currently, this is no problem because highlighting is opt-in per piece of code (by explicitly giving it a language).\n- There should be a choice in libraries for automatic language detection. If people want to use LanguageSniffer or Linguist, this should be possible.\nIn general, I do believe that automatically detecting the language without having to specify it explicitly is a good idea, so with a bit of work this could become quite useful.\n. No Markdown support in e-mails it seems.\nTextual documents nearly never have a magic number. In fact, now that I think of it, even PHP cannot be detected that easily, as it can appear inside HTML, so ideally, the highlighter would find parts between <?php and ?> and only highlight that.\nAll in all, too complex to be handled by nanoc. :)\n. This is a compatibility issue with Ruby 1.8.6. In 1.8.6, Range does not have #reverse_each but in 1.8.7 it does. Will fix!\n. Fixed in 949ef10c40e0a8b63cb47665066a034dccca6fb4. Thanks for reporting!\n. Control-C is the standard key combination for stopping any process in a terminal, so I\u2019m not sure why it should be mentioned explicitly.\n@dutygeeks Why do you recommend pow instead of adsf?\n. @DaveEveritt I understand your point, but I won\u2019t update the documentation to mention \u2303C because I believe it should be general knowledge. I have to draw the line somewhere, or I\u2019ll be explaining cd next time.\n. @rkoch There indeed is a bug that makes it impossible to stop nanoc view with \u2303C. I\u2019m not sure when that started failing, but I\u2019ll create a fix for this issue ASAP.\n. @rkoch I am having trouble reproducing the issue here (I think only Mongrel has trouble with \u2303C, but I cannot get Mongrel to work), so you could modify something in the nanoc source code to see whether the issue goes away?\nIn lib/nanoc/cli/commands/view.rb, add the following right before the # Build app, somewhere around line 39:\n``` ruby\nBe quittable\n%w( INT TERM ).each do |s|\n  Signal.trap(s) { handler.shutdown }\nend\n```\nDoes that make nanoc view quittable using \u2303C?\n. @rkoch If you kill all Ruby processes, start nanoc view in the modified version, does ^C cause it to quit properly?\n. @rkoch What does nanoc.bat contain? Is it a file that you wrote yourself?\n. @rkoch I don't know much about Cygwin, and I'm not sure why nanoc would not work but nanoc.bat does. It does appear that the proper way to execute nanoc is using nanoc.bat though.\nCan you kill all Ruby processes, run nanoc.bat view and try to quit it with ^C? If you do this, does nanoc view exit? If it exits, does running nanoc.bat view again cause the Errno::EADDRINUSE?\n. @rock Is the effect the same with and without the addition mentioned here?\n. @rkoch Odd. Killing the bash.exe process should also kill the processes below it (by sending it the same signal, presumably, but I'm by no means a Windows/Cygwin expert). I will see whether I can get Cygwin+nanoc running on my Windows laptop, but don't hold your breath.\n. I\u2019ve been trying to figure out the cause of this issue lately, but still with no luck.\nI was mistaken when I said that killing a parent process also kills its child processes: child process of which a parent dies are adopted by init. Still, this information is not particularly useful to solve the issue.\nThe issue is, as far as I can see, is that \u2303C ends up being caught by bash and not by ruby (in which nanoc runs). As for why this is happening, I have no clue yet.\n. A relevant discussion where a similar issue arises.\n@rkoch Are you running bash.exe from within cmd.exe? From what I can tell, doing so will cause \u2303C not to kill Ruby. Running bash.exe directly should work. Can you verify?\n. The issue is that nanoc never receives the signal, and therefore doesn't exit. So, from what I can tell, it is not a nanoc issue.\nI'll close the issue, but if you have found a solution or a workaround, feel free to add it in a comment!\n. What version of Ruby are you using? You\u2019ll need at least 1.8.6, and I recommend 1.9.x.\n. This is more of a Kramdown issue by the way. Here\u2019s a thread about the same issue but for Webgen.\n. I'm not sure whether I like this change, because it adds abstraction that I'd rather not have. I would like filters to interface with their libraries as directly as possible.\nA possible alternative to this change that I would accept would be to throw a warning that explains that options need to be specified as a hash instead of an array. What do you think?\n. I\u2019ve solved this using a warning in 391c7462566db850154bd7c0bf9bf8763472944d.\n. Pulled, thanks! :)\n. @oddityoverseer13 Thanks for reporting! I\u2019ve moved this into a new issue (#524).\n. Hi,\nI\u2019ve taken a look at how Sinatra handles it and I believe we don\u2019t need to do anything near as complex. For nanoc, just a hash will work. A :yield key would be useful, but perhaps :content makes more sense?\nI\u2019ll implement this soon.\n. There appears to be a problem in the Rules file on line 37. Can you gist the contents of your Rules file?\n. Hi,\nYou've closed the issue; was it fixed?\nAbout the comments: the file is in UTF-8 format, so you should use a UTF-8 editor for the Rules file. The special characters in the comments won't harm though.\nAbout the original error: do any of your files have no extension? item[:extension] may be nil. In that case, the changes in pull request #90 should help you out.\n. @justinclift You\u2019ll be pleased to know that the next release will have a better default Rules file that takes care of extensionless files (see #90). Now I need to take the time and finish up nanoc 3.3\u2026\n. Ahh, nice! I was looking for something like this. Thanks! I\u2019ll add :yield to Mustache and implement a filter for this.\n. Can you share the stack trace? (On gist or so)\n. Hi, thanks! I\u2019ve transplanted the bundler load code to 02c32d4a85864f9a38b500d4e7f086959d8c18ee because I don\u2019t need the other fix (which I don\u2019t quite understand).\n. Also add nanoc3/tasks.rb that loads nanoc/tasks.rb.\n. You are right; there is no real point in having the file path in the tempfile prefix. Fixed!\n. The problem with custom Mustache templates is that nanoc needs to be able to detect dependencies, which seems hard to do as far as I can tell.\n. I\u2019ll close this issue, because there is no way for nanoc to track dependencies between Mustache templates. The issue is the File.read here: https://github.com/defunkt/mustache/blob/master/lib/mustache/settings.rb#L155\n. Thanks for the patch! I\u2019ve applied this fix on the 3.3 release branch instead of the master branch so that the next 3.3.x release will have this fix.\n. For future reference (for myself): as you mentioned on IRC, this thread could be useful.\n. Interestingly, this seems to work out of the box for me. I have a ~/.fog file and my config.yaml contains this:\nyaml\ndeploy:\n  public:\n    kind:     fog\n    provider: AWS\n    bucket:   nanoc-test\n. Hi Jon,\nThe #filter helper is designed to be invoked from within ERB. If you want this to work, you can use this:\nruby\nERB.new(\"<% filter :colorize_syntax, :coderay => { :line_numbers => :table } do %>#{wrapped}<% end %>\").result\nI know this is not the cleanest solution, but it will do the trick. I\u2019ll see whether I can come up with something more elegant.\nDenis\n. Another idea that you can give a try:\nruby\n_erbout = ''\nfilter :colorize_syntax, :coderay => { :line_numbers => :table } do\n  _erbout << wrapped\nend\nThis should work (haven\u2019t tried) because the capturing helper (and thus also the filtering helper) looks at what is added to _erbout since the beginning of the block. The filtering helper then takes the new data and filter it.\n. Hi Jon,\nI\u2019ll close this issue since I believe it is fixed, but if the issue remains, feel free to reopen the issue.\n. Hi Brady,\nCan you verify whether a snapshot is created for the item with identifier /posts/2012-03-08-advice_blah_blah/? The snapshot should be created unless ['xml', 'ico'].include?(ext)\u2026 does this item have an icon ending in .xml or .ico?\n. Hi Brady,\nThere\u2019s indeed something weird going on. Could you make your site\u2019s source public, or send it to me, so that I can take a look at what is going wrong?\nDenis\n. Hi Brady,\nCan you double-check whether the above fix works for you?\n. In the upcoming 3.3.2 bugfix release, the \u201ckind: rsync\u201c will be assumed implicitly if it is not present so that backwards compatibility is maintained.\n. Update your gems :)\n. Hi Christian,\nThe first thing that jumps to mind is that the first argument to Nanoc::Item#initialize should be the filename in case of a binary item. Can you also share your Rules file (or the relevant lines along with line numbers), since that is where the crash occurs?\nThe :mtime argument is now ignored, since as of nanoc 3.2, checksums instead of mtimes are used to determine outdatedness.\nCheers,\nDenis\n. Hi Christian,\nI also believe that not using binary items for this scenario is the way to go. Binary items are useful for files that are too large to be kept in memory (intended mostly for images). Your approach of using raw and custom_route is one that I\u2019d recommend too.\nI\u2019ll close this issue for now but feel free to reopen it.\n. Indeed. It used to work in nanoc 3.1.x, but the optimisations done in nanoc 3.2, this stopped working. Will look into it!\n. This is fixed in c3b82f253f6d09f3500e69da26879a513d41d600.\nThe notification system in nanoc seemed like a good idea at the time, but it leads to code that harder to understand than it should be, and therefore leads to more bugs, including this one. I\u2019ll likely entirely rework the notification system at some point in the future.\n. Layouts with multiple filters should not be necessary. In your case, using == yield fixed the problem and removed the need for erb.\n. This probably needs a more thorough approach (I assume there are other places were something similar is necessary). Also see issue #39, which is the exact same problem, and Ruby bug 5270.\n. In general, I feel that nanoc should not work around bugs in other software packages, but since that Ruby issue has been open for seven months with no feedback yet, I think it is worth making an exception here.\nAnother fix would be to move to Ruby 1.9, which will also give you a considerable speed boost compared to 1.8. Is moving to Ruby 1.9 a possibility for you?\n. Hi Simon,\nInstead of patching nanoc, I would rather try and fix the error in Ruby itself. This way, you get a guarantee that there aren\u2019t any places in which you\u2019ve missed the #dup, and it\u2019d allow the fix to be only applied to specific versions of Ruby easily.\nHere\u2019s a snippet with a possible fix. For the given list of memoized methods, a new implementation is created that calls that method on a duplicate. Since duplicates are never frozen, this should work around the issue nicely. What do you think?\n``` ruby\nrequire 'date'\nclass Date\n[ :amjd, :jd, :day_fraction, :mjd, :ld, :civil, :ordinal, :commercial, :weeknum0, :weeknum1, :time, :wday, :julian?, :gregorian?, :leap? ].each do |m|\n    module_eval <<EOS\n      alias_method :__orig_#{m}, :#{m}\n      def #{m}\n        self.frozen? ? self.dup.#{m} : self.send(:__orig_#{m})\n      end\nEOS\n  end\nend\nd = Date.today\nd.freeze\nd.year\n```\n. Hi Simon,\nI implemented a fix for this based on the snippet I included above. This will be fixed in the upcoming patch release (3.3.3). Let me know whether this one works well for you!\nDenis\n. Hi Dave, thanks for the patch!\nI\u2019ve transplanted this patch from the master branch to the release (release-3.3.x) branch, so that the next patch release (3.3.3) will contain your fix.\n. New changeset: 24872f2439f393250d4bfca1168166f598942976\n. I believe I would prefer a more generic way to exclude certain representations, so that you\u2019d be able to pass in :reps => stuff (in addition to :items => stuff). Would that work for you?\n. It\u2019s been quite a while, but\u2026 I have finally implemented this in a more generic fashion. You can now filter reps by passing a proc to :rep_select!\n. I see you\u2019ve closed the pull request. The new tests in the release-3.3.x branch should cover all the cases described in your tests as well.\n. That is to be expected. I am now using a proper HTML parser instead of (icky) regular expressions, but the re-serialization indeed cleans up the HTML.\nI don\u2019t think this should be a matter of concern. Functionally, the cleaned-up output from the new HTML-parsing filter is identical to the output from the old regex-based filter.\n. This is indeed an area where nanoc could do a much better job. I\u2019ve pushed a small fix that adds the name of the file where the parse error occurs (see commit above), but it still is no ideal solution. A better solution (which needs a bit work) is this one by @scott-a-miller. I\u2019ve reopened the ticket because a proper fix hasn\u2019t been written yet.\n. I\u2019ll close this one, because I believe the current fix is good enough.\n. Hi,\nThere is no way to turn it off, but you can work around it by creating e.g. content/index/index.html file, which will result in an item with identifier /index/. There is no way to change the behavior without breaking backwards compatibility, unless there would be a new configuration option (which I would like to avoid because the configuration file is becoming large). Is the workaround acceptable for you or would you prefer an option?\nCheers\nDenis\n. You can get the raw filename using item[:filename]. If you have two filenames (e.g. one file for content and another one for metadata) you can use item[:content_filename] and item[:meta_filename]. Would that work for you?\n. Hi Faruk,\nCan you provide a full backtrace for the exception that you\u2019re getting? I imagine that environment variables would also be useful (especially the LC_* ones)\u2026 can you provide the output of export?\nnanoc converts everything to UTF-8 internally to avoid as much problems as possible, and the most likely cause for a crash is when the data source reads the items/layouts. This does not seem to be what you\u2019re experiencing, though. A possible other cause would be UTF-8 characters in your .rb files in lib/\u2026 do the files in lib/ have a # encoding: utf-8 prefix?\nCheers\nDenis\n. Glad I could help!\n. @bobthecow Is this still the case? There was a dependency bugfix a while ago.\n. Did the bundle install succeed? If you open irb and type require 'rubygems' ; require 'cri', does the second require cause an error?\n. Does the problem disappear if you uninstall all nanoc and cri gems, and them bundle install? What if you uninstall all nanoc and cri gems, and then gem install nanoc?\n. Ok, cool to hear. Not sure what went wrong\u2026 probably just a Rubygems/Bundler glitch.\n. @blackhacker Does the problem disappear when removing Gemfile.lock and re-running bundle install? Is nanoc in your Gemfile? (it should be)\n. It's a mistake I have made as well... nanoc should probably catch this. Reopening!\n. Fixed in ab75ee99c313d4640742b6c05f9b642e44212e08.\n. @silvenon Do you have nanoc in your Gemfile?\n. Bundler is still entirely optional. I\u2019m getting the feeling something is corrupt in your Rubygems. What happens if you uninstall cri and nanoc, and then reinstall nanoc?\n. Are you sure you are executing the right nanoc executable? It should be the Rubygems wrapper.\nAfter having removed cri and nanoc, does Rubygems install cri when issuing gem install nanoc?\n. What does which nanoc show you after installing nanoc? What does it show after uninstalling nanoc? What is your $PATH like?\n. Hmm. I\u2019m not fond of rbenv\u2019s shims. They tend to make it quite confusing which executable are where. I prefer chruby :)\nThat doesn\u2019t solve the issue though, and your $PATH seems fine to me.\nCan you show me what /Users/matija/.rbenv/shims/nanoc looks like?\n. Can you share your Gemfile and Gemfile.lock?\nDoes bundle exec nanoc work for you? If it does, there is likely a mismatch between the version of nanoc installed using Rubygems and the version of nanoc installed using Bundler.\n. You need to add nanoc to the Gemfile, and then bundle exec will work.\n. I recommend always invoking nanoc with bundle exec nanoc.\n. Yikes, that is pretty weird. Will take a closer look at home.\n. @luckypoem Does removing Gemfile.lock and re-running bundle install work? I\u2019m a bit at a loss what could cause this, but your Rubygems/bundler seems to be corrupted.\n. @luckypoem For getting help, please use the nanoc mailing list instead of GitHub issues.\n. Agreed. I imagine it doesn't make sense to have the \"index\" behavior for layouts.\n. I believe I\u2019ll have to close this issue without fixing it, I\u2019m afraid. There is no way to implement this without breaking backwards compatibility. One way of solving this would be to create a new option in the configuration file, but that will only lead to bloat there.\nI still agree that the handling of \u201cindex\u201d files for items and certainly for layouts is silly, but it\u2019ll have to wait until 4.0 until I tackle this properly. It\u2019s already on the wishlist so the idea won\u2019t be lost.\n. Hi,\nAuto-prune indeed broke at some point and I already fixed it in the 3.4.x branch a few days ago, but I haven\u2019t yet released a 3.4.1. You can find the changeset at 0cdc9913248380e05e72f72fba256e505fe9a8bc. Thanks for reporting!\nCheers,\nDenis\n. No\u2026 I intended to release 3.4.1 early september, but I am now enjoying my holidays in Tokyo. :) I hope to release it next weekend when I am back (and not having too much trouble with my jetlag). Sorry about the delay!\n. Hey @zmanji, you\u2019ll be glad to know that 3.4.1 is now out!\n. Ah, very nice! I'm wondering though.. would it be possible to simply relativize all @href and @src attributes?\n. Looks nice! I\u2019ll be pulling this soon.\n. Hi Thilko,\nThis is a very odd error. My guess would be that your nanoc installation is somehow corrupt. Can you take a look in /Users/blackhacker/.rbenv/versions/1.9.3-p125-perf/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc and ensure that it has a directory named filters which in turn contains kramdown.rb? Perhaps it does not have the right permissions or does not exist at all. In either case, it shouldn\u2019t happen. Does uninstalling and reinstalling nanoc fix the problem?\nCheers\nDenis\n. What @telemachus said. :) I\u2019ll close the issue for now.\n. It seems that Slim (or rather, Temple, which is used by Slim) uses _buf instead of _erbout as the buffer variable. It should be possible to define the name of the buffer to use when creating an engine, but I\u2019m too tired to figure out how at the moment :)\n. Good catch. Thanks!\n. Agreed\u2026\u00a0there would need to be an (X)HTML parser that is capable of recognising templating languages such as PHP and ERB. Not the easiest thing to do\u2026\n. After I wrote that comment, I did think a little bit further and I arrived at examples that were indeed hard to parse, but nowhere as hard to parse as yours. The more I think about it, the more impossible it seems to fix this bug.\nI believe emoji is appropriate here\u2026 :scream:\nI think coming up with a decent workaround would be the best way to go.\n. Good remarks. I think I'll leave it at that and close the issue. Thanks!\n. Hi Juan,\nWhat do you believe a --no-verbose option should do?\n. I have elaborated on the different levels of verbosity on NEP-16 a bit more. Would the \u201cquiet\u201d verbosity level be okay for you? That level would imply no output at all (except the error, if any). The default verbosity level would then also become a lot less verbose (one character per file instead of one line per file).\n. I\u2019m closing this ticket since it is now a NEP (NEP-16 to be more precise). Development will be handled as a NEP from now on!\n. Can you make this pull request on master instead of the release branch (release-3.4.x)?\n. I\u2019m following @bobthecow here. libv8 should work on Debian (haven\u2019t tried though). I would prefer not to modify the filters that use JavaScript (less, uglifyjs) so that they can use binaries as well.\nI\u2019ll close this ticket, but do reopen if you still experience issues or can convince me to modify the less and uglifyjs filters.\n. Hi graaff,\nI believe this is due to dependencies that aren\u2019t up to date. More specifically, I believe you\u2019re using a version of UglifyJS which isn\u2019t the latest one. Can you try with a later version of UglifyJS?\nThe test shouldn\u2019t be harmful, but it should probably be made more robust, so that it works no matter what version is installed.\n. Then it looks like I got it the wrong way around :) Will fix!\n. @RubenVerborgh Have you had this problem with more recent releases? There have been fixes for the dependency tracking mechanism that may have solved this issue.\nI couldn\u2019t reproduce anything like this recently in any case. Would you be OK with closing this one? (Issues should be actionable and this one isn\u2019t.)\n. Yup, I remember!\n. Thanks, this looks pretty nice! I\u2019ll do a full review soon (need some free time in the evening) and merge it!\n. Can you give an example of where exactly this fails, and what the actual vs. expected results are?\nI tried a few combinations of Time.parse (which is what nanoc uses) and they work, even though the results are a bit odd (always +0200, but that is presumably because it converts it into the local time zone):\n```\n\nTime.parse('18:00:00 CET')\n=> 2012-09-22 19:00:00 +0200\nTime.parse('18:00:00 GMT')\n=> 2012-09-22 20:00:00 +0200\nTime.parse('18:00:00 CEST')\n=> 2012-09-22 18:00:00 +0200\n```\n. Hi Steve,\n\nI haven\u2019t heard back from you in a while so I\u2019ll assume this issue is resolved. If the issue is still present, please do reopen it and provide some additional details so I can see what the issue is and hopefully reproduce it.\nDenis\n. Glad you got it fixed. May have been an issue with different Ruby versions (even though that would be rather surprising)\u2026\n. Alright, just let me know if it happens again!\n. I\u2019m not sure why the format for the tmp files have changed. Could be a different Ruby version\u2026\nRemoving the tmp directory should fix the issue.\n. Cool! Can you make a pull request for the release-3.4.x branch instead though?\n. Looks cool! I\u2019ll review and merge when I get back from my holidays in Tokyo. :)\n. Could you add a test case?\n. But not during preprocessing.\n. Yeah, high effort, low gain.\n. Marking this as won\u2019t-fix. The effort for this is high and the gain is quite low.\nSo, the child-parent relationship will not remain up-to-date while modifying items (or layouts) inside the preprocess block, but it will be brought up-to-date after the preprocess step has finished.\n. Hi Gregor,\nI\u2019m not following you entirely here. Both the pygmentize and the pygmentsrb colorizers will return content wrapped in <div class=\"highlight\">\u2026</div>, which is intentionally so, because this way existing Pygments stylesheets can be used without changes (similar to how CodeRay content will be wrapped in <div class=\"CodeRay\"><div class=\"code\"> in the upcoming release).\nYour changeset makes it so that :nowrap => false undoes the wrapping, which I believe does not make sense\u2026 do you agree?\nCheers\nDenis\n. I finally got back to this pull request after a very looooong time\u2026 my apologies!\nYour fix will work in the simple case where there are no line numbers. The highlight div definitely doesn\u2019t belong in the pre and should be removed.\nHowever, as soon as they are added with linenos=table you end up with table HTML elements inside pre which is really icky.\nI\u2019m pretty sure that the proper solution would be to simply not have a pre at all. Individual highlighters should probably be able to decide on whether they want to keep the wrapping pre or not.\nThis needs some more thought. :(\n. I\u2019ll close this PR because the problem lies deeper and this fix is not complete (and not backwards compatible).\nAbstracting the syntax colorisers behind a single syntax-colorising filter (:colorise_syntax) may not have been the best idea. It creates the false assumption that the output of each filter will be similar, but the output can be quite different depending on the coloriser and options. Some may create a pre, some a div, some a table (for line numbers), or ul (also for line numbers) etc. Not sure how to solve this.\n. Hi,\nThis is not a nanoc issue but rather one in fog. From what I can tell (by what other mailinglists tell me), the issue happens when you're going through a proxy when deploying. Here's a possible solution for fog.\nCheers\nDenis\n. I am still undecided on this issue. I propose the following:\n1. Output on a terminal that supports UTF-8 may contain non-ASCII characters such as smart quotes, copyright signs, ellipses, etc. If the terminal does not support UTF-8, these characters should be decomposed to ASCII equivalents (this is already the case).\n2. Output into a file should never contain non-ASCII characters, whether the terminal supports it or not. This means the Rules file, the config.yaml file, anything in lib/, etc.\n3. The source code of nanoc itself may contain non-ASCII characters, as long as the above two points are honored.\n. After discussing this on the #nanoc IRC channel, I\u2019ve decided to keep the current behaviour. Points 1 and 3 from the comment above are (as before) in effect, while point 2 will not be: files generated by nanoc will be in UTF-8. Editors incapable of editing UTF-8 files are too old to be still supported.\n. Do you have a Gemfile? If so, make sure that your bundles are installed, or you\u2019ll get LoadErrors like these.\n. Looks good, thanks! :)\n. Highlighted content will now be wrapped in <div class=\"CodeRay\"><div class=\"code\">. This is not a definitive solution and it is not as clean as it could be, but it will solve your problem!\n. My preference currently goes out to letting the colorizers preserve their output entirely. This would make it possible to use CodeRay stylesheets directly, and also let Pygments (using pygmentize or pygmentsrb) use line numbers quite easily.\nThere is a NEP for modular colorizers, and when implementing this NEP I'd like to use the opportunity to cleanup and refactor the colorisers entirely.\n. Ahh, this makes sense now that I think about it. There\u2019s a race condition I didn\u2019t take into account. Will fix ASAP. Thanks for reporting!\n. (By the way, this is one of the changesets where appending ?w=1 at the end really cleans up the diff by skipping whitespace changes: https://github.com/ddfreyne/nanoc/commit/ad4740a39bceaa149f43f3986ef03a306777e99c?w=1)\n. Reverted the change and cleaned it up. I cannot reproduce the original bug that warranted the original change, but I'll fix the bug when (or if) it happens again.\n. What @bobthecow says is correct. If you want the original filename of an item, use item[:filename] (or alternatively, if you have the metadata in a separate file, item[:meta_filename] and item[:content_filename]).\n. I\u2019ll close this for now, but feel free to reopen it\u2026\u00a0or even better, ask on the mailing list, because it\u2019s more of a question rather than an issue!\n. Yikes! Thanks for reporting. This could be my first dataloss bug\u2026 do I get a badge for that? :)\n@gkarekinian Could you make the pull request against the release-3.4.x branch so that it goes into the next patch release, 3.4.2?\n. I\u2019ve pulled the change on the release-3.4.x branch, thanks!\n. The refactoring of the command loading is quite nice, but I can't seem to get the constant reinitialization warning\u2026\u00a0what are you doing to get them?\n. Replaced by #170\n. Thanks! :)\n. Hi Benjamin,\nI am not following you entirely. Redcarpet should provide smart quotes and other smart typography already, so I'd imagine that Typogruby is no longer necessary. Would using Redcarpet without typogruby work for you?\n. Did you set .smart = true for Redcarpet? Without that, I believe it won\u2019t make straight quotes curly.\n. I can\u2019t get Redcarpet to do curly quotes either. I\u2019d recommend you report this on the Redcarpet issue tracker. I\u2019ll close this issue here, but feel free to reopen it or create a new one if you want.\n. Hi Stephen,\nI believe a more featureful create-item command does not fit well in nanoc\u2019s philosophy. I know for a fact that I would not use this enhanced create-item command (in fact, I rarely do use the create-item command but simply create new files by hand).\nThe problem is that if I start enhancing the create-item command, where should I stop? Perhaps not only the title should be given on the command line, but also the creation/publication date, or the kind, or a list of tags, etc. I would like to keep the create-item command minimalistic.\nIt is possible to create your own commands for use in your sites by placing them in the commands/ directory. This is what I would recommend doing. Some people have a custom create-article command that works like that.\nI\u2019ll close this pull request, but if you have comments, feel free to reopen this and convince me. :)\nDenis\n. This looks quite cool!\nWould you be able to write test cases for this? You can use :provider => 'local' to simulate deploying to a local directory. Perhaps compare the mtimes for the existing files to ensure they aren\u2019t recreated but simply left untouched. (I can write a test case for this as well if you\u2019d rather have me do it\u2026\u00a0just let me know.)\nAlso, can you make this pull request against the release-3.4.x branch to ensure that the next bugfix release contains this improvement?\n. Never mind the test. There is no way to test this reliably at the moment. If you can just do the pull request on the release-3.4.x branch, I\u2019ll be happy!\n. Thanks, pulled!\n. I\u2019ve made your change on the release-3.4.x branch so it becomes part of the next patch release, and also fixed the failing tests. Thanks for noticing the deprecated usage of #mtime!\n. This should now be fixed as I have merged #178. The fix will be in the 3.4.3 release. Thanks for letting me know!\n. Reopening because I am unsure about Windows compatibility. Will check and close if it works.\n. I still don\u2019t have access to a Windows machine so I\u2019m closing this.\n. A good catch.\nI\u2019m not a fan of monkey-patching at all, but sometimes it is the most straightforward approach. Unfortunately, it tends to lead to problems like these.\nA straightforward fix isn\u2019t available, because I am relying on duck typing to see whether array elements or hash keys implement #symbolize_keys or #stringify_keys\u2026\n. Fixed in d23b613ae7b9075ff77f8daf5da51428d630d4db!\n. Hmm, this happens because Solarized \u201cabuses\u201d the bright colors and turns these eight bright colors into separate colors entirely.\nYour fix would work, but I believe adding support for 256 colors would be a neater solution. After all, it\u2019s almost 2013\u00a0\u2014\u00a0terminals should be able to handle 256 colors! What do you think?\n. @ppaeps I\u2019ll stick with 16 colors, but can you also remove bold from identical and skipped, as suggested by @cdlm?\n. @ppaeps Also, can you re-do the pull request (with bold removed) on the release-3.4.x branch instead of master? That way, the fix will be available in the next 3.4.x release.\n. I\u2019ve fixed this in 1e972d00b011073d6fa46c6e0289169c3febb959 (on the release-3.5.x branch, so it\u2019ll be part of 3.5.0).\n. nanoc indeed loads everything into memory, and I can\u2019t think of a good workaround for this, so I don\u2019t think nanoc is going to be useful here. This is something that I intend to optimise, but it is not a priority at the moment.\nAs an alternative, you could probably write a script that does the query, uses ERB or Haml along with a template and then writes the output. You\u2019ll lose flexibility, but at least this approach should work!\n. Some more questions:\n- When you say that the site cannot be compiled at all, is this because you are getting an error, or because nanoc takes a very long time and never seems to get to the point of compiling?\n- Could you be more precise as to how many rows are in your database table? How many is \u201cmillions\u201d?\n- In the code you pasted above, the items do not have any content or metadata. Is this a realistic situation, or was the code simplified as an example?\nThis information will be useful in optimising nanoc. Thanks!\n. Thanks for the information! I\u2019ll close the issue, but if you want to add anything else, feel free to.\nFurther optimisations are scheduled for the 3.6 release, which I\u2019ll start working on after I finish 3.5 (which should be early next year). The current master branch, which contains the unfinished code for 3.5, should already be a bit faster (or at least less memory-intensive), but I don\u2019t think master will solve your problem here.\nnanoc loads items into memory in order to build a dependency graph. It shouldn\u2019t need to, but it does speed up things for smaller sites. I\u2019ll see what I can come up with for 3.6!\n. Looks good. Thanks!\nNever mind the Travis build failure. Some tests are not extremely reliable, sadly.\n. Moved to the Wishlist.\n. Does this actually show Rules (uppercase R) and rules (lowercase r)?\n. Is this reproducible, meaning that if you quit the watcher and restart it, it happens again? Did you rename the Rules file (from Rules to rules or from rules to Rules)?\n. I\u2019d say that is a bug in FSSM, then. In any case, I cannot reproduce the issue in the master branch (which will become 3.5) so I am not sure whether it is worth fixing. Does the master branch work for you (no issues with Listen)?\n. I did not know about FileUtils#compare_file\u2014awesome. Check out 869de7dd24a88be67f4a4d9006065503e1ff2458. Does this work better for you?\n. Hmm, the implementation of FileUtils#compare_file puts unnecessary strain on the garbage collector. Every time a block is read, it is created as a new object, while my implementation (while probably flawed) reuses the same object (string) every time. It might be worth either adding a different implementation for nanoc or seeing whether the default Ruby implementation can be improved.\n. Good to hear that Listen works for you!\nYep, sa = a.read(bsize) and sb = b.read(bsize) both create new, very short-lived objects.\n. I\u2019m going to close this issue (as \u201cwon\u2019t fix\u201d). Is that okay for you?\n. Fixed in 3a67b22b40bd41cd084bc5e39c026e914a7b34f2. Thanks for reporting!\n. @moll Linking filter identifiers to a file path and only requireing that file path when the actual filter is requested would work, but it would still cause multiple requires to be executed, so I\u2019d like to avoid that. It also makes it less obvious how filter should be loaded.\n. Fixed in the experimental-4.x branch.\n. This was fixed in 716cc06b2deab8799d39a99fbea42e333cd9fde2.\n. nanoc\u2019s helpers are intended to be more like a starting point, rather than full-blown solutions. I fully agree that link_to_unless_current makes some assumptions about what the output should look like, but I\u2019d like to keep it that way, especially because implementing a function like link_to_unless_current is trivially easy.\n. I agree that I wouldn\u2019t mind a well-written pull request. :)\nA powerful helper library may be useful, but then that needs to be tackled on a more fundamental level. Decide what nanoc needs, what it is missing, and how far we should go in implementing good helpers. The helpers that are included in nanoc now, originate mostly from my own needs, and thus they are biased and incomplete. Perhaps a wishlist wiki page would be in order?\n. What do you think the the tabindex values should be in these cases?\n. You can add custom attributes using a hash, as described in the documentation for the LinkTo helper:\n``` ruby\nlink_to('Blog', '/blog/', :title => 'My super cool blog')\n=> 'Blog'\n```\n. Good catch!\nnanoc 3.5 will include the new Checks functionality, which combines the existing validators in a more robust and flexible framework. I\u2019d like to fix this bug in 3.5 instead of 3.4.x.\n(More information on nanoc 3.5\u2019s Checks)\n. Ahh, just noticed that the bug is actually reported on 3.5, so that makes sense!\n. Fixed in #230!\n. Good catch!\nWhen nanoc catches a SIGUSR1 in 3.5, a stack trace at that point is printed, which is quite useful when debugging slowness. I can easily disable this feature on Windows, but I\u2019d rather come up with an alternative\u2026 can you think of anything? (I don\u2019t think there is a good alternative.)\n. SIGUSR1 is a signal without predefined meaning. It is not sent by any program (or the system), and the only way to send it is using kill -USR1.\nOn 22 Jan 2013, at 15:22, Alexander Gro\u00df notifications@github.com wrote:\n\nWhat does SIGUSR1 mean? I.e. when would another program signal this kind of \n\"event\"? (Hope I got the terminology right.) \n. It doesn\u2019t kill the process, merely sends it a signal. By default, any signal will terminate the process, but nanoc catches SIGUSR1, prints the stack trace and then resumes, making it a quick way to inspect the stack of a running process.\n\nI agree that disabling this for Windows is a good idea!\n. Are there other cases where multiple passes are necessary? If so, it would be worth making the filter more generic.\nIf not, I am OK with this pull request.\n. Could you write a test case for this as well? Doesn\u2019t need to be big; just needs to show that the code actually works. You can add the test to test/filters/test_redcarpet.rb, where you\u2019ll find other test methods you can base yourself on.\n. We need to re-evaluate this in the context of #232.\n. Merged in fc36901ff19c6910fb44c827cd5d374908c28043. Thanks!\n. Looks good!\nCan you add a release notes entry to NEWS.md as well? (Create a new section for 3.6.)\n. Thanks! :+1:\n. Moved to the Wishlist.\n. Fixed in #231!\n. Moved to the Wishlist.\n. Implemented in #215.\n. A very good suggestion! Multiple write calls should definitely be possible (and something I had in mind before, but somehow forgot about).\nSince compiling multiple item representations tend to have quite some overlap, allowing compilation rules where parts are specific for one rep would be quite useful. I cannot come up with an example right now (I did have one in mind a while back though).\nFor instance:\nruby\ncompile '*' do\n  rep :raw do\n    write item.identifier.chop + '.txt'\n  end\n  filter :kramdown\n  layout 'default'\n  write item.identifier + 'index.html'\n  rep :pdf do\n    filter :pdf\n    write item.identifier.chop + '.pdf'\n  end\nend\n. This would also allow writing this way:\n``` ruby\nwrite :dir => true\ne.g. output/about/index.html\n```\n``` ruby\nwrite :dir => false\ne.g. output/about.html\n``\n. @gpakosz That\u2019s correct.write :dir => bwould be equivalent towrite (b ? item.identifier + 'index.html' : item.identifier.chop + '.html'), so to speak.\n. Passing:extensionto#write` would also be useful. For instance:\n``` ruby\nwrite :dir => false, :extension => 'pdf'\ne.g. output/about.pdf\n``\n. If an:extension` param is added, I propose it should accept a string that can optionally start with a dot. So, the following should be the same:\nruby\nwrite :dir => false, :extension => 'pdf'\nwrite :dir => false, :extension => '.pdf'\nI always forget whether to add a period to extensions, so that\u2019s why it should accept both.\n. The reason for allowing a dot in the extension is because File.extname also returns the extension with a dot. For example:\n``` ruby\nFile.extname(\"blah.meh\")\n=> \".meh\"\n``\n. I suppose that requiring the extension to _not_ begin with a period is also possible. Passing an extension that starts with a period should then raise an appropriate error. The period-less variant makes more sense to me anyway.\n. I\u2019m closing this ticket because it is [moved to the nanoc Trello board](https://trello.com/card/merged-compilation-and-routing-rules/51671a676672ded155000027/4). That certainly doesn\u2019t mean it\u2019s irrelevant or won\u2019t be implemented though!\n. Thanks!\n. Thanks for letting me know! It\u2019ll be fixed in 3.5.1.\n. Fixed by #433.\n. Thanks!\n. Implemented in #302.\n. Implemented in #302.\n. Implemented in #217.\n. Ah right,@siteshould be in there as well.\n. I\u2019d also like to change the command fromconsoletoshell, so thatcowill remain an alias forcompile. What do you think?\n. @bobthecow You can merge if you\u2019re satisfied!\n. This looks quite nice, but I do believe the present directories need to be sorted by filename length first. Can you also add a test case?\n. Sets aren\u2019t ordered in Ruby.\n. I think anArray` would work as well!\nRuby 1.9\u2019s Set preserves ordering because it internally uses a Hash, which is ordered in Ruby 1.9. But I would not rely on that\u2026\n. +1 for just using Array and the single Find.find loop.\n. Looks good!\nCan you make this pull request on the release-3.5.x branch, though? That way, the fix will be in the next bugfix release. I don\u2019t think you can change the branch from the GitHub GUI, but you can do it with the API (see here).\n. @bobthecow I haven\u2019t tried it, so it might be deliberately undocumented and unsupported feature. But I would give it a try anyway :)\n. @reima Please do! Reference this pull request (#216) in your new pull request for future reference though.\n. I am considering simplifying the implementation to simplify caching. Don\u2019t precompute a cache, but only compute it when an item with a specific identifier is requested. When the array is mutated, delete the cache.\n. Hmm, only enabling the cache after a freeze would simplify the implementation quite significantly, while retaining the functionality. Given that the implementation is pretty ugly and is not going to become any prettier, I\u2019m in favour of enabling caching on #freeze!\n. @bobthecow Typo fixed. That should indeed have been /blah/ and not blah. You can merge if you\u2019re satisfied!\n. Array.instance_methods and Enumerable.instance_methods works.\n. @bobthecow Merge if you\u2019re satisfied!\n. Thanks!\n. nanoc\u2019s helpers are intended to be more of a starting point. The basic functionality is useful on its own, but as soon as you end up in more advanced cases, almost all of the helpers will need to be customised.\nSee also: #194.\nHaving said that, the helpers that are bundled with nanoc have been neglected. Somewhere along the road, the helpers should be re-evaluated and improved.\nI\u2019ll close this issue for now, but it\u2019ll be tackled anyway at some point.\n. I\u2019ve been annoyed with con<tab> not working properly too. Somebody suggested renaming content to source, but that could cause confusion since source seems to imply source code, which is already in lib.\nCalling the config file nanoc.yaml would make sense thought! \n. Fixed in #233!\n. @tbm I think you need ~ content_for(@item, right) (with a ~ instead of a =) so that Haml preserves the indentation. Does that fix your issue?\n. The following works:\nfilter(:pandoc) { _erbout << content_for(@item, :right) }\nThis is a workaround, obviously, but I think it would be helpful for the filtering helper to have the ability to filter strings rather than blocks that generate output.\nTo do for this issue:\n- Document how to use the capturing helper with Haml\n- Update the filtering helper so that it can take a string as an alternative for a block\n. @tbm Can you verify that the above works for you?\n. I created a new issue, #421, which describes using the filtering helper with a string instead of a block.\nThere\u2019s not much more to do with this issue. I think it\u2019s been resolved. @tbm do you agree?\n. Would #200 be what you are looking for? From what I can tell, that pull request would solve your problems, am I right?\n. Ah yes\u2026 it is odd that the HTML_TOC does not accept any options, unlike other renderers. I\u2019d suggest opening a ticket on the Redcarpet 2 issue tracker and ask them to resolve the inconsistency. I\u2019ll change the nanoc filters so that it can handle HTML_TOC nicely.\n. Fixed in #232!\n. Awesome, thanks!\n. This is a duplicate of #198. :+1: too though!\n. This is fixed in #301.\n. Does #260 fix this issue in its entirety? If so, I believe this issue can be closed.\n. This is actually expected behaviour: when a new item is added, all items are recompiled.\nThe reasoning for this is as follows. If a new item is added, how can nanoc be sure that this will not impact other items? This is not a very easy question to answer.\nIdeally, only items that use @items should be recompiled. The dependency tracking algorithm in nanoc is currently not smart enough to handle that case yet. It is on the to-do list though.\n. I\u2019ll close the issue for now, but know that it is a known issue that\u2019ll be fixed in nanoc 4.0.\n. This is a pretty neat idea, but not quite trivial to implement. There would be a need to parse individual files based on their content. I am thinking a HTML and a CSS parser should be enough to cover 95% of the cases. The parsers for the reference finders should be pluggable, so that additional formats (specific XML formats, for instance) can be added easily.\n. Moved to the Wishlist.\n. This is problematic because not in all cases can outdatedness be inferred reliably. Some data sources change constantly. In such cases, a warning would only add confusion.\n. I feel this is impossible to solve properly, for the reason given above. Will close for now.\n. Will recreate pull request without irrelevant Gemfile.lock change.\n. @bobthecow Review and merge\n. @bobthecow Review and merge\n. @bobthecow Review and merge\n. A very good suggestion!\nI\u2019m planning to add support for a postprocess block, which could be used to e.g. feed a search index such as elasticsearch or Solr. This postprocess block would have access to changed output files, so the check could make use of that as well.\n. Thinking a bit more about this, I don\u2019t think implementing a caching system for this will be feasible. There\u2019s no way to know the impact of a change in the output directory, and without knowing the impact, it is not possible to know what can be cached.\nAs for the HTML/CSS check, I believe there needs to be a check that runs htmltidy etc locally, but there are no nice portable ones. In the case of the original HTML/CSS check (as it exists now), caching would reduce the problem, but not eliminate it. I\u2019d rather go for a proper solution rather than using a cache, which is a workaround.\nIf speed is a concern, then more effort should be spent on optimising the checks (using e.g. parallelism) rather than adding a cache.\n@tbm I\u2019ll close this issue for now, but feel free to reopen.\n. I see no reason to delete it. It makes sense to keep it around, as that is what people may expect and is also useful for reporting crasher bugs later.\n. You can set encoding: utf-8 in the data source configuration section in config.yaml. This will let nanoc interpret all files as UTF-8 instead of guessing the encoding from the environment.\n. Duplicate of #236.\nYou can set encoding: utf-8 in the data source configuration section in config.yaml. This will let nanoc interpret all files as UTF-8 instead of guessing the encoding from the environment.\n. The typo/bundle commits are in there presumably because those changes were made in release-3.6.x, which is where your branch started.\nI don\u2019t see the point of lazily loading SassFilesystemImporter though.\n. This looks good, but I\u2019d suggest two changes:\n1. The new file should start with # encoding: utf-8.\n2. The new file should live at lib/nanoc/filters/sass/sass_filesystem_importer.rb instead of lib/nanoc/filters/sass_filesystem_importer.rb. The subdirectory makes it clear that it is not a filter but rather an extension to the Sass filter.\n. Looks good to me.\n@bobthecow Merge if you are satisfied as well!\n. I don\u2019t think there\u2019s any place where globs are used in the configuration file.\n. No concerns! Merged!\nI kept this pull request open for a while on purpose in order to use it for a demonstration of pull requests. :)\n. This one\u2019s fixed by PR #251.\n. Fixed in #250.\n. Ack, that should also include nanoc.yaml. I thought I fixed that already. Will fix ASAP.\n. Fixed!\n. (In fab2bf023eefb65dc16a32bd2574f8e6c632b7f5)\n. Duplicate of #244.\n. Fixed in #241.\n. This was fixed by #230, which is in nanoc 3.6.0. Are you getting this error on 3.6.0 still?\n. (For future reference: this is pull request #246 re-created.)\n. @gpakosz Can you provide a test case for this? Once the test case is done, I can merge it into 3.6.x.\n. I'll write the tests for this (not trivial).\n. Fixed in b252f49abb4f9298c4d583b6aaebb7de5ba445ca. Thanks!\n. A comparison is already done for textual items. For binary items, the comparison is done but not used: https://github.com/nanoc/nanoc/blob/master/lib/nanoc/base/result_data/item_rep.rb#L139-L140 so probably this should be wrapped in an if is_modified.\n. Can you make a pull request for this?\nI have two remarks:\n- temp_path = temp_filename \u2192 I am in favour of adding self. before the call to #temp_filename, for clarity.\n- FileUtils.cp(temp_path, raw_path) if is_modified \u2192 This should be moving instead of copying.\n. Hmm, that one is pretty tricky. I unfortunately don\u2019t have Growl anymore, so you could you check something for me? What are the exit statuses for growlnotify --help, -h, /h, --version, \u2026 ? I hope there\u2019s something we can infer from the exit statuses whether we\u2019re running a Windows version of growlnotify or not.\nIf you have any other ideas, do share.\n. Hmm, looks like there\u2019s no good way to figure out which kind of growlnotify is running.\nI think just checking RUBY_PLATFORM should be okay.\n. I know why it breaks, but now I need to figure out how to solve it. Will fix in 3.6.2!\n. Calling Nanoc::Filters::Sass before defining ContextfulSass should fix the issue. Can you verify?\n. Oops, that should have been Nanoc::Filters::Sass.setup (no parameters).\n. I think I\u2019ll recommend handling similar situations this way too. I don\u2019t really see a different way to solve this, and this fix is pretty clean after all.\n. Hmm, I\u2019m not sure about this.\nI consider the fact that Rules can have four different names a mistake: I should have stuck with Rules only. A .rb extension could be useful for syntax highlighting, but a #!/usr/bin/env ruby would solve that too.\nSo, allowing different filenames for Checks is something I\u2019d rather not do. I am a proponent of \u201cconsistently wrong\u201d though, and it would apply in this case.\n. Alright, I\u2019m convinced.\n@cdlm Can you make this pull request on master instead of release-3.6.x? Edit: release branch is fine\n. I think there\u2019s enough configuration options already, so I\u2019m not in favour of adding new ones.\n. Moved to a new issue #259.\n. Important change for code quality: 238a37843e59eaa33e09243f18c74567ecf1a126 removes all work from the constructor (because a constructor should never do any work).\n. See #257.\n. Not fixed yet. :)\n. Fixed in #257.\n. @alexaandru This is fixed. Copying fog.rb from nanoc without modifications will not work without a tiny modification; the copied fog.rb requires a identifier :foggly. For built-in nanoc classes, the identifier is set elsewhere.\n. Agreed. For nanoc 4.0, I\u2019d probably go for nanoc.rb only.\n. Moved to the nanoc Trello board.\n. :+1:\n. Moved to Trello: https://trello.com/card/ruby-configuration-file/51671a676672ded155000027/1\n. I get\n\n586 tests, 1589 assertions, 0 failures, 0 errors, 1 skips\n\nso that\u2019s fine. Merge if you want!\n. And close #239.\n. Yep. Seems to have failed the last time, but maybe I made a typo!\n. There\u2019s no way to define such filters at the moment, but it\u2019s something that has come up before and it will be tackled at some point in the future. Thanks for reporting!\n. Moved to the nanoc Trello board.\n. This paper on build systems should be quite useful in redesigning the compiler.\n. The garbage collection controller, which is currently a part of the compile command, should be part of the compiler. (Although the idea is to make garbage collection a lot less stressful by reducing the graph of live objects significantly, so this may not be so relevant in the future.)\n. This is a known issue and will be resolved automatically while working on other parts of nanoc 4.0. I\u2019m closing it because of this (and also because development stuff is being moved to the nanoc Trello board).\n. Moved to nanoc/nanoc-site#15.\n. Hi Matthias,\nI don\u2019t see this as very useful for nanoc. This change is purely syntactic sugar and it is not actually used anywhere in nanoc, so I\u2019m not in favour of accepting this change.\nThe reason for only allowing #[] to access attributes is deliberate. In older nanoc versions (2.x) it was possible to access attributes using \u201cdot notation\u201d, but it proved to be too hard to distinguish between attributes and actual Item/ItemRep methods.\n. It\u2019s probably also a good idea to move the watcher into a separate object, maybe Nanoc::Extra::Watcher. The notification generation stuff should probably also be extracted, perhaps in Nanoc::Extra::UserNotifier. Easier to test!\nThose changes belong in a separate pull request though. Stay tuned.\n. I\u2019ll fix this later in a decent way. I\u2019m refactoring the watcher quite significantly, and this pull request will be obsolete once I\u2019m finished with that.\n. Since the watcher refactoring was cancelled (see #293), I think reopening this pull request makes sense.\nI have no clue how to test this automatically. Maybe it isn\u2019t automatically testable. Any ideas? @bobthecow?\n@agross Can you test (manually) whether this pull requests works for you? If it does, it could be merged without presence of automated tests.\n. Awesome. I\u2019ll add a test and release this in 3.6.3!\n. @bobthecow Review, merge and close #253 afterwards.\n. Explained on IRC, but here\u2019s the summary:\nSince the  Plugins::TagCloud.tag_cloud method is evaluated in a new context (the Class instance), variables that are usually available in a nanoc compilation context (@items, @site, \u2026) will not be available. The .tag_cloud function itself does not use these, but #tag_count_map does.\n. I like the change, but I\u2019m not a fan of the code duplication. Could you move the duplicated code (@items.select { \u2026 }) into a separate lambda and execute that one both in the frozen and the non-frozen case? Something like this:\nruby\n      blk = lambda { @items.select { |item| item[:kind] == 'article' } }\n      if @items.frozen?\n        @article_items ||= blk.call\n      else \n        blk.call\n      end\n. Fixed in a2d55c6c525230b56bc5ae3a34b66f549d427fe4.\n. @bobthecow Merge if satisfied.\n. Let\u2019s wait for the test results, which will say FAILING, and then merge anyway!\nUnless it\u2019s failing because of this change, of course.\n. Travis has been unusually flaky lately. Need to figure out what is going on there\u2026\nAnyway, locally I have 589 tests, 1595 assertions, 0 failures, 0 errors, 1 skips.\n. Weird: I thought I already replied to this ticket, but it seems not. Maybe I dreamt about it. :)\n:+1: on @bobthecow\u2019s idea (which was my idea too, whether you believe it or not).\n. Fixed in pull request #287.\n. Moved to the Wishlist.\n. Reported as Kramdown issue: gettalong/kramdown#40\n. @cdlm Thanks!\nKramdown 1.0.0 modifies the encoding of a string in-place, which is what caused the crash. See this line in kramdown\u2019s base.rb. Something kramdown shouldn\u2019t be doing, if you ask me!\n. (Fixed by #276.)\n. Reported as Kramdown issue: gettalong/kramdown#40\n. Also fixed in Kramdown 1.0.1!\n. This happens because the query is not taken into account here. Will fix.\n. @envygeeks No, and it hasn\u2019t been fixed yet. It\u2019ll be part of 3.6.3.\n. @envygeeks Ahh, this is pretty cool! I might steal this code. It doesn\u2019t seem to handle redirects properly though (301, 302).\nEdit: Nevermind; I looked over the followlocation: true. Still, I don\u2019t think 301 and 302 should be considered a success.\n. I\u2019ve opted to fix the current implementation instead of rewriting it with typhoeus. Maybe something that\u2019ll land in nanoc 3.7 or 4.0 though!\n. Thanks! :)\n. This was fixed in #278, and the fix will be included in nanoc 3.6.2! (A release will follow later this week.)\n. Fixed in 5743597d6ffbe87cbf99ba53dedaeb812d7ab715.\n. Fixed in c06e9758e196eb1de59771b8df39c6c837245821.\n. Thanks, that looks quite useful.\nCan you write a test case for this? I\u2019ve recently simplified the external links test case (41beb789b03fcc98cc454344e899e9dd7fd913ce) which should make it easier to write a test case for the GET fallback. You\u2019ll need to rebase your branch first. If you\u2019d rather let me do it, that\u2019s okay too.\n. I believe a git rebase master should have done the trick, but\u2026\nWhen you re-create this pull request, can you make it on release-3.6.x instead of master? That way, the fix will end up in the next bugfix release.\n. I\u2019ll implement this!\n. Moved to the Wishlist.\n. About the test: I\u2019ve had Travis error on me quite regularly lately, even though the tests all pass locally. So don\u2019t worry about that.\nI\u2019m not sure in which case your pull request makes sense, though. The content_filename should (by the filesystem data source) only be filled in when the content file actually exists. Are you using custom data sources that set content_filename?\n. That is actually a good way to generate category pages, but I suspect that you are setting the content_filename attribute for some items in the preprocessor. Am I correct?\n. That is correct. The content_filename attribute has a special meaning for the Sass filter.\n. This is quite odd. Can you verify that you can access Sass::Util manually? Try executing Sass::Util in irb, like this:\n% irb\nirb(main):001:0> require 'sass'\n=> true\nirb(main):002:0> Sass::Util\n=> Sass::Util\n. @xbonell Can you look at the comment I made above?\n. Alright, I\u2019ll close this one!\n. I cannot reproduce this, and I also have no idea why this would happen. Is require 'sass' actually giving a LoadError? Can you share:\n- your Gemfile.lock\n- your environment variables\n- your Ruby $LOAD_PATH\n?\n. I was able to reproduce the issue once, a few months ago, but since then the issue seems to have fixed itself.\n@jugglinmike Have you had any luck in shedding some more light on this issue? If not, would you mind if I close it? It can always be reopened if more information becomes available.\n. @jugglinmike Can you run on release-3.6.x using bundle exec rake ARGS=\"--verbose\"?\nNot sure what that error is about. It\u2019s not happening locally, but I\u2019ll investigate.\n. @jugglinmike Also, can you run gem build nanoc.gemspec on master and see what error this gives?\n. @jugglinmike Are you on the most recent release-3.6.x? If not, can you run bundle exec rake ARGS=\"--verbose\" again on the most recent release-3.6.x?\n. @jugglinmike Hmm, that looks OK (Sass tests are run).\nI find the Nanoc::GemTest#test_build failure odd. Could you investigate why this is failing? It might be because of an old Rubygems version. Maybe gem build complains about a missing Rubyforge project and exits with a nonzero status code. The captured stdout/stderr should shed light on that.\n. @jugglinmike Can you STDOUT.puts stdout.inspect and STDOUT.puts stdout.inspect right before line 25 in test_gem.rb? Both strings should be empty.\n. Your diff has a typo; the second added line should say stderr.inspect instead of stdout.inspect.\n. Ahh, so the gem error is\nERROR:  While executing gem ... (ArgumentError)\n    invalid byte sequence in US-ASCII\nBut running gem build nanoc.gemspec works, right?\n. @jugglinmike I\u2019m having a hard time making sense of this problem, sadly. But it seems the original error is gone, and that the gem test is not reproducible.\nI\u2019d like to close this issue if you don\u2019t have any objections.\n. @bobthecow Review and merge.\n. This will hopefully resolve the last failing Travis test, by the way.\n. Travis fails on Ruby 1.8.x due to V8 crashing, and on Ruby 2.0.x because CodeRay\u2019s output somehow differs. Ruby 1.9.x is fine though, and there are no RDoc crashes to be seen anywhere!\n. Thanks, Coveralls, but this PR is old.\n. I don\u2019t think this is necessary anymore. From what I can tell, it was necessary before because the relativize_paths filter used DocumentFragment, but it does no longer.\nI\u2019ll clean this up!\n. See #296, which not only includes the test but also a fix.\n. Maybe it is useful to allow executing single classes as well, so you\u2019d be able to rake test:filters:sass to run the Sass tests.\n. Rejected after discussing this with @bobthecow. nanoc 3.7 should use guard and let the watch invoke that.\n. This most likely happens when timestamp information in YAML does not include timezone information.\nSee this troubleshooting section for details.\n. @bobthecow Can you review the new guard-nanoc? If it\u2019s okay with you, I can deprecate autocompile and watch in nanoc 3.7 and remove them in nanoc 4.0.\n. This needs to wait until we have access to the guard-nanoc gem.\n. Done in e39efb5bf547f524a08ba0632a77737a0e793158!\n. @bobthecow Review and merge.\n. @bobthecow Review, merge and close #279 afterwards.\n. @bobthecow Review, merge and close #82 afterwards.\n. Does that also work on Windows? What docs?\nIO.popen3 could be a good alternative. I\u2019ll look into it.\n. @bobthecow Review and merge.\n. Actually you already said OK. :)\n. nanoc doesn\u2019t follow symlinks but it definitely should.\nThe fix you give may work for a single indirection, but I\u2019d ideally like multiple indirections (with a fixed limit so it doesn\u2019t recurse indefinitely). It\u2019s on the to-do list for nanoc 3.6.x!\n. Implemented in #302.\n. Implemented in #302.\n. I added a test case.\n@bobthecow Review and merge.\n. @bobthecow Review and merge.\n. Wait with this for a bit. I would like to tackle #213 at the same time.\n. Now also includes a fix for #213.\n@bobthecow Review and merge.\n. Hmm, this doesn\u2019t take symlinks to symlinks into account. :(\n. @bobthecow Review and merge.\n. @envygeeks What do you mean by being ignored?\nI think it would be a nice addition, although I don\u2019t like k.to_sym rescue k. I prefer a #respond_to? to catching an exception.\n. Moved to the Wishlist.\n. I don\u2019t like giving special meaning to attributes (in this case, :content_filename) but I think the advantages (significantly less dependencies) outweigh the drawbacks.\nIn any case, nanoc 4.0 will make this obsolete when identifiers will be the same as filenames\u2026\u00a0once I get to that. :)\n. Awesome!\n. :+1:\n. Yep, I've noticed it too. I'll fix!\nThe watch command will soon be deprecated in favour of the new guard-nanoc. I recommend switching already!\n. Fixed in 7e51e912c5e8f1bc71ed48fad0804911556c8bb5!\n(This code is hard to test. If anybody can write a proper test, let me know!)\n. @gpakosz That was my main idea too. I need to find out whether Marshal.dump works well, though (should be fast enough, should not serialise too much, and serialised objects should be comparable).\n. This will be fixed in nanoc 4.0. Not something easy to fix in nanoc 3.x unfortunately. (See also the new Trello card for this issue.)\n. Reopening this, because this issue is fixable in 3.x, and worth fixing too.\n. nanoc 4 has a Checksummer class that is probably worth backporting.\n. A better fix for this is in #431.\n. This is fixed by #431, to be released in either 3.6.10 or 3.7.0.\n. Oh yeah, that certainly is not the intention. Will fix!\n. What do you mean precisely when you say that the snippet handling is extraordinarily slow?\n. Code snippets are only loaded once (there\u2019s a check whether they are already loaded), so this should not be happening anymore.\n. Why would you need to load source files only selectively? In which case would you not want to load all source files?\nYou said \u201ctesting\u201d but what do you mean exactly by this? Is this compiling a nanoc site and seeing whether the results are correct, or is this with a unit testing framework?\nIs this a case where you need the other helpers not to be loaded, or is this because you want to load the lib/ files as fast as possible?\n. Would you not be able to require the necessary files in lib/ directly? There\u2019s no need to rely on nanoc\u2019s lib loading for that, I\u2019d say.\n. I\u2019ll close this issue for now.\n. Awesome, thanks!\n. Thanks :)\n. I\u2019m fast with the easy issues\u2026\u00a0there\u2019s plenty of stuff left. :(\n. Hi,\nDoes the character troubleshooting section solve your problem?\nIn short, add encoding: utf-8 to the data source configuration in your nanoc.yaml (or config.yaml) file, like this:\nyaml\ndata_sources:\n  -\n    type: filesystem_unified\n    encoding: utf-8\n. Ok, awesome! I\u2019ll close the issue.\n. I\u2019ve been unable to reproduce this so far.\nThis might be more of a problem with less. Does the same problem occur when using more or cat?\n. Yeah, this actually makes sense. I\u2019m thinking of simply ignoring SIGPIPEs (Signal.trap(\"PIPE\", \"IGNORE\")) or rescuing them in the appropriate places. Will fix!\n. Fixed by #369.\n. Both the watch and the autocompile commands have been deprecated in favour of the new guard-nanoc. Starting with nanoc 3.6.4 (which I released a few minutes ago), the watch and autocompile commands will emit a deprecation warning that points to guard-nanoc.\nBecause the watch and the autocompile commands are now deprecated, bugs in them will not be fixed anymore.\nI\u2019ll close this issue, but feel free to comment if you have questions.\n. Is the encoding: 'utf-8' part of the data source configuration in config.yaml (or nanoc.yaml)? It needs to be. Check out the character encoding section of the troubleshooting guide for details. Does putting it inside the data source configuration solve your issue?\n. I have noticed this before. The only way I could fix it was by uninstalling sass (gem uninstall sass) and reinstalling it (bundle install). Does that fix it for you?\n. I\u2019m out of ideas here. I also believe this is an issue with Ruby, Bundler, Rubygems and/or rbenv so I\u2019m closing it. Will update if I find a solution.\n. In short, what @bobthecow says.\nAs far as I can see, nanoc cannot automatically and reliably detect changes to the Compass configuration.\nI would love for nanoc to automatically detect changes to files that nanoc does not know about, but this is a very complex and probably theoretically impossible to get right too. Will give this some more thought, but I\u2019m closing the issue for the time being.\n. My main concern with adding new filters is that they\u2019ll have to split off in nanoc 4.0 anyway.\nIt might be worth recommending people to start their own repository for each nanoc filter and helper, and moving it into the nanoc organisation on GitHub once accepted.\n@bobthecow What do you think?\n. @smlx If you feel up to it, you can create a nanoc-erector project based off https://github.com/nanoc/nanoc-sass and your own code. I\u2019ll add you to the nanoc GitHub organisation and then you can transfer your nanoc-erector project to the org. Does that sound reasonable to you?\n. I\u2019ve created a nanoc-erector repository, so this issue can be closed. Thanks for the contribution @smlx!\n. @smlx I\u2019ve added you to the nanoc organisation and given you write access to the nanoc-erector repository.\n. This was fixed in #329 and released in 3.6.5.\n. This is very hard to avoid in nanoc 3.x, but it is fixed in nanoc 4.0.\n. This is expected behavior. If allow_periods_in_identifiers is true, only the last extension will be stripped to get the identifier. This means that index.atom.erb becomes index.atom, which is not stripped because it is not the same as index.\nWould turning off allow_periods_in_identifiers work for you?\n. Oh yeah, there\u2019s definitely something fishy going on here. Will fix!\n. This was fixed in #330 and delivered in 3.6.5.\n. The auto_prune option needs to go in the prune section, like this:\nyaml\nprune:\n    auto_prune: true\nSorry for the confusion!\n. Oops. Will check when I get home!\n. @silvenon I cannot reproduce your issue. I created a new site, switched auto_prune to true, touched a random file in output/ and ran nanoc. Two files were generated and the random file was deleted.\n. Nope, it just removes the files on compile!\n. Misread the issue. This is definitely a bug.\n. See also guard/guard-nanoc#13, which contains a potential fix.\n. @silvenon I\u2019ve updated the bug description to more accurately reflect the problem (the fact that it involves guard-nanoc). Is the new title/description OK with you?\n. I just released guard-nanoc 1.0.2, which fixes this issue.\n. Absolutely. Added!\n. @bobthecow Merge if satisfied.\n. @bobthecow Merge if satisfied.\n. Take a look at PR #337 for some background on this nanoc bug.\n. Fixed as part of #337.\nThe fix will be included in 3.6.6. If you want to have the fix now, put this in your Gemfile and run bundle up:\nruby\ngem 'nanoc', :github => 'nanoc/nanoc', :branch => 'release-3.6.x'\n. I removed it from the wiki. It\u2019s no good to have broken things on there. Thanks for letting me know!\n. Hi @vigneshsarma,\nThe create-item command does not have any options. The easiest way to achieve what you want is to manually create the files and not using create-item at all:\ntouch content/blogs/new_blg.md\n. I don\u2019t personally use create-item myself (creating the files manually is easier) and because it has such limited usage, it will be removed in nanoc 4.0.\n. If the error occurs again, can you use gist to share the crash.log file?\n. Good catch! I\u2019ll fix.\n. @elehack See PR #338 (if you want to review that code, you\u2019re quite welcome\u2014leave a :+1: when satisfied)\n. @elehack You mentioned \u201cunicode errors\u201d \u2014 can you a bit more specific about that? There should not be any errors, even when UTF-8 support is not found.\n. I\u2019ve added this as issue #340!\n. PR against correct branch in #337.\n. If anyone has a good idea for how to write a decent test for this, let me know. ;)\n. The default Rules should probably handle this in a better way. Providing sample routes for stylesheets (CSS and Sass/Less) along with the existing for binary items could do the trick.\nI\u2019ll reopen this issue so that I know something needs to be done about this. @Zorbash Thanks for bringing it to my attention again!\n. Fixed by #395.\n. JVM seems to sometimes need -Dfile.encoding=UTF8 in order to treat source files as UTF-8.\n. I\u2019m tempted to close this and tell people that have similar issues to set up their environment properly. What do you think?\n. Yeah, writing a warning + suggestion on how to fix seems reasonable. Once that\u2019s done, we can close this issue.\n. The character encoding section on the Troubleshooting page should cover this now.\n. Some people may be relying on the ItemArray#[] behavior, so I\u2019d rather not change it.\nBesides, Ruby\u2019s Array has the same behavior of returning nil for items that are not found:\n``` ruby\n[ 1, 2, 3 ][5]\n=> nil\n```\nSame for Hash:\n``` ruby\n{ a: 1, b: 2 }[:c]\n=> nil\n```\nHowever, both Array and Hash have #fetch, which does fail if the index/key is not found:\n``` ruby\n[ 1, 2, 3 ].fetch(5)\n=> IndexError: index 5 outside of array bounds: -3...3\n{ a: 1, b: 2 }.fetch(:c)\n=> KeyError: key not found: :c\n```\nSo maybe the current behavior is OK, and people who want the behavior of crashing when an item is not found can use #fetch instead.\n. Closing as invalid. Let\u2019s recommend using #fetch when the alternative behavior is desired.\n. :+1:\n. @bobthecow I\u2019d rather not include a Guardfile by default, because I see this as something separate that people may or may not use, and I\u2019d like to keep the default site as small as possible. Besides, including a Guardfile is weird if there is no dependency on guard and guard-nanoc in the gemspec, I think.\n. Implemented.\n. Can you share your crash.log and your Rules files (preferrably on gist)?\n. That\u2019s indeed a bug. Will fix.\n. Fixed in PR #348.\n. OK, good to hear!\n. Hi,\nWhat exactly is the bug that you are reporting? From what I can tell, everything looks fine.\n. A routing rule returning nil does not mean that the item will be skipped. Other items may include the compiled content of an item that is routed to nil, so this is why in your case, items are still compiled.\n. Can either of you provide a sample site that exhibits this problem?\n. @phklevets @Leolik I\u2019m unable to reproduce this problem. Do you have a sample site that illustrates the problem?\n. Ah, yikes. I\u2019ll fix this ASAP, probably this weekend (or if you want to take a stab at fixing it, you can! PRs are definitely welcome). In the mean time, you can stick to nanoc 3.6.5. Sorry for the inconvenience.\n. After a bit more research, I found that the problem existed in 3.6.5 but was masked by the fact that the Sass filter generated superfluous dependencies. With these superfluous dependencies gone, the Sass filter no longer works properly.\nnanoc has a Sass::Importers::Filesystem subclass that registers @imported files, but in the test case this importer finds no files to import, yet Sass compiles just fine. Weird. Needs more research.\n. Some observations:\n- I tried overriding Sass::Importers::Filesystem's #_find method in my subclass that records @include\u2019d filenames, but even if #_find returns nil, Sass somehow still finds the right files to include.\n- If neither #find_real_file nor #possible_files seem to return anything, Sass also finds the right files to include.\n- Sass.load_paths seems to be empty in #_find.\nI\u2019m likely hooking into the wrong thing here. I specify :filesystem_importer in the options passed to Sass::Engine.new; is this the right thing to do? Does Sass fall back to a default importer if the specified filesystem importer does not find anything?\n. Fixed by #370.\n. Cool stuff, thanks!\nIt is pretty inconvenient that the local provider does not support prefixes. I can\u2019t think of a way to test this properly. Maybe the local fog provider should be adjusted and take a prefix into account, but I don\u2019t know whether the fog maintainers will accept such a change since it would probably break backwards compatibility.\nI\u2019ll merge the PR, but if you come up with a nice test, you\u2019re always welcome to send another PR. :)\n. Do you have a Gemfile? Are you using bundle exec?\n. Is win32console in the Gemfile (and Gemfile.lock)?\n. What is the value of RUBY_PLATFORM in Ruby?\n. Hmm, that is odd.\nIf you want to do some debugging, check out the definition of the method enable_ansi_colors?. When this returns false, color codes will be stripped from the output.\nIt seems that even with 'Win32/Console/ANSI' required, color support still doesn\u2019t work. Can you verify that?\n. Will take a closer look later this week (it\u2019s getting late here). In the mean time, can you run the nanoc tests locally? (clone the repository and type rake) I\u2019d be interested in seeing whether anything odd turns up there.\n. These tests are related to UTF-8 being enabled or not.\nOddly, I don\u2019t have any tests that check for colors.\n. Fixes for Windows are certainly welcome!\nI think we\u2019ve stumbled on two separate issues here: first, nanoc not detecting UTF-8 properly (the chcp trick should fix that), and secondly, colors being printed as raw escape sequences.\nThe color issue might be related to the fact that nanoc wraps and replaces $stdout and $stderr. Although if that is the case, fixing this might be hard.\n. @raphinesse I\u2019m guessing the test fixes on Windows didn\u2019t solve the original color problem yet. Am I right?\n. This is very odd.\nWin32console replaces $stdout and $stderr (see code), which means nanoc should behave properly, because it only ever uses $stdout and $stderr. ($stderr working properly is also very weird.)\nCan you try to print $stdout.instance_eval(\"@stream\"), and same for $stderr, after this line? $stdout and $stderr will be Nanoc::CLI:: CleaningStream instances. The wrapped streams (@stream) should both be Win32::Console::Ansi::IO instances.\n. Hmm, very strange. It seems $stdout is modified (to point to STDOUT again, presumably). You\u2019d need a way to figure out where that happens. Presumably not in nanoc itself, but perhaps in a dependency? I verified both nanoc and cri, and neither let $stdout point back to STDOUT.\n. Oh, yikes. That was totally non-obvious. Awesome work on the debugging :+1:\nI\u2019ll whip up a PR and let you review it.\nI\u2019ll add you to the release notes for 3.6.7. How would you like to be credited? I usually use the full name, but GitHub alias is fine too.\n. @raphinesse See #356, a PR that hopefully fixes this problem. Let me know if this works for you.\n. PR merged, so I\u2019ll close this issue. It\u2019ll be in the upcoming 3.6.7 release.\n. What are the remaining errors and failures now?\n. By the way, the changes you introduced work fine on my Mac OS X box too.\n. OK, would be cool if you can fix those, but otherwise I\u2019ll try to set up Ruby on my Windows machine and give it a shot.\n:+1: apart from the remarks!\n. Printing skipped tests by default: yes please!\n. This is great. If there\u2019s nothing else you want to modify, I\u2019ll gladly merge this.\n. Hmm, the UTF-8 issue is annoying. r:bom|utf-8 is not an option because nanoc 3.x is compatible with 1.8.7 and up (but will drop 1.8.x support in nanoc 4.0).\n. That line evaluates to true on Ruby 1.9.x, but to false on Ruby 1.8.x.\n. Looking good. One minor change is necessary for non-Windows platforms though:\nruby\nsystem(on_windows? ? \"where #{cmd} 2> NUL\" : \"which #{cmd}\")\nThis prints the command when found, which is not great. Adding > /dev/null fixes it:\nruby\nsystem(on_windows? ? \"where #{cmd} 2> NUL\" : \"which #{cmd} > /dev/null\")\nOther than that, good to go.\n. :+1:\n. This seems to a problem with YAML:\n``` ruby\n\n\nTime.parse(\"2013-11-23 13:00:00\")\n=> 2013-11-23 13:00:00 +0100\nYAML.load(\"foo: 2013-11-23 13:00:00\")\n=> {\"foo\"=>2013-11-23 14:00:00 +0100}\n```\n\n\nI think I\u2019ve had a discussion with @bobthecow about this\u2026 Justin, do you remember the outcome of that convo?\n. Maybe the solution to this problem should be to always include the timezone, since YAML seems to treat date/time information without timezone as being UTC. Compare:\n``` ruby\n\n\nYAML.load(\"foo: 2013-11-23 13:00:00\")\n=> {\"foo\"=>2013-11-23 14:00:00 +0100}\nYAML.load(\"foo: 2013-11-23 13:00:00 +0100\")\n=> {\"foo\"=>2013-11-23 13:00:00 +0100}\n``\n. @DivineDominion If you don\u2019t want Ruby to parse your dates, you can enclose them in double quotes.\n. On second thought, I\u2019d advise against enclosing the date in a string and usingTime.parse, because then the date/time information is timezone-dependent with no explicit timezone, which means that when you travel to another time zone and recompile the nanoc site, you\u2019ll get different results. The only way to avoid this is to _always_ include the timezone information in the date, like2013-11-23 13:00:00 +0100`.\n\n\nAdding this to the Troubleshooting section seems like a good idea.\n@DivineDominion If you have no objections, I\u2019d like to close this issue.\n. @bobthecow I\u2019ll include both solutions (including explicit timezone, setting ENV['TZ']) in the troubleshooting section.\n. Here\u2019s a PR on the nanoc web site which adds the troubleshooting section: nanoc/nanoc.ws#36.\n. :+1:\n. @raphinesse Added your #setup/#teardown fix and removed the double cygwin in the RUBY_PLATFORM regex. Do I get a :+1: from you now? ;)\n. Seems like there was an incompatibility introduced, because File.dir? does indeed not exist (but File.directory? does).\nI\u2019ll fix this bug, but please note that both watch and autocompile are deprecated in favour of the new guard-nanoc. I greatly recommend you use guard-nanoc, as it is better maintained, faster and stabler.\n. This is resolved in ad39ef348f7a546ec5ee7654da6ca8dc00ece6b4 and will be part of the 3.6.7 release.\n. Fixed by PR #365.\n. Fixed by PR #364.\n. Cool, thanks for mentioning. I\u2019ve fixed it by adding Nanoc::CLI.setup.\n. Yup, Ruby can be odd. :)\n. Cannot reproduce this anymore with nanoc 3.6.x in git.\n. Wrong branch.\n. Fixed by PR #367. Thanks!\n. Great stuff! I should\u2019ve used mktempdir all along.\n. Also see #439.\n. Related: ddfreyne/cri#33\nThe cri issue needs to be resolved before this one can be tackled.\n. I cannot reproduce this, nanoc --verbose works fine!. I introduced the _nanoc_ prefix to avoid possible name clashes in IO.\n. Once this fix is approved, I\u2019ll push out 3.6.7.\n. @bobthecow Can I get a +1?\n. @bobthecow Yeah. In nanoc\u2019s sass filter\u2019s current state, the sprite importer won\u2019t function correctly anyway.\n. @bobthecow Yeah. The fallback should be serif, since the rest of the fonts are serif fonts.\n. Fixed.\n. Closing as Compass is deprecated ad no longer maintained.\n. Fixed by #379.\n. Thanks!\n. That\u2019s pretty cool! Can you also share the rake task that generates the spec hash?\n. Moved this to Trello.\n. @bobthecow Please review\n. First of all: bugs in autocompile will no longer be fixed, as autocompile is deprecated; please use the superior guard-nanoc instead.\nDo you always get this error, even the first time you use autocompile? Do you have any other autocompile instance running?\n. This is not an issue related to nanoc as far as I can tell.\n@oxama Double-check the open ports, and also make sure that no other user (sucha s root) is using port 3000. Use sudo with lsof to find out.\n. @tom-- Do you feel like writing a filter for yuglify?\n. OK, I\u2019ll close this issue then.\nFor CSS, I like RainPress even though it hasn\u2019t received updates in years. Hasn\u2019t failed me so far.\n. @jdeseno You\u2019d be able to do this by using the preprocessor:\nruby\npreprocess do\n  @config[:aws_access_key_id] = ENV['AWS_SECRET']\nend\nThat\u2019d eliminate the need to ERB-process the configuration file. Is that OK with you?\n. - The :content_filename attribute is set by the filesystem data sources, and documented in the Attributes section on the web site.\n- The #content_filename method should be private.\n. @jugglinmike A good suggestion, but unfortunately such a patch would make it impossible to use external frameworks, because those would not correspond with items.\n. @tantignac Hi! Can you verify that\n1. You\u2019re compiling the same site that you\u2019re modifying and some other site (silly, but that has happened to me)\n2. You don\u2019t have another data source that provides content/assets/bower_components/jquery/jquery.min (find . -iname \"jquery.min*\" should potential other files that start with jquery.min)?\n. This looks cool!\nI have a few remarks about the code, but I\u2019ll do a more in-depth review later.\nWe\u2019re currently in the process of splitting up nanoc into different gems for nanoc 4.x, and each plugin (filters, helpers, deployers, \u2026) will live in its own gem, in its own repository. For details, read the 4.0 Subprojects wiki page, and see nanoc-sass as an example repository+gem.\nFor this reason, I\u2019d rather not add any new features into nanoc master at this point.\nI\u2019d like to start using the approach of having plugins in their own repository/gem with new additions to nanoc 3.x already. You could base yourself off the nanoc-sass repository, but I\u2019ll prepare a template repository soon, which you\u2019ll be able to use as a starting point for nanoc-multimarkdown.\nThis nanoc-multimarkdown repository would then live inside the nanoc organisation on GitHub. I\u2019d like to assign you as the primary maintainer. Does that sound good to you?\nAll of this also applies to #386.\n. I made the first version of the nanoc plugin template. The documentation can probably be improved quite a bit, but it should hopefully be self-explanatory enough to get started.\n. It\u2019s better that you create the nanoc-multimarkdown repository, and then after a review, transfer it to the nanoc organisation.\n. Here\u2019s an idea: instead of having a multimarkdown filter that invokes the external executable with the given options, writes input to it and reads its output, it may be worth having a generic \u201cexternal\u201d filter that does exactly that:\n``` ruby\nFind multimarkdown in $PATH\nfilter :external, exec: 'multimarkdown', options: %w( --smart )\nFind multimarkdown in custom search path\nfilter :external, exec: 'multimarkdown', options: %w( --smart ), path: '/usr/local/bin:/opt/local/bin'\n```\nHaving such an external filter would render the AsciiDoc filter obsolete, since it basically does the same.\nThe MultiMarkdown 4 wrapper gem is quite interesting, because integrating with MultiMarkdown directly as opposed to piping content to an external process can be much faster (one or two orders of magnitude are not unheard of). I\u2019d say it is certainly useful to have a nanoc filter that uses this wrapper gem.\n@bobthecow thoughts?\n. I imagine having a multimarkdown proxy filter would be useful. Its implementation can be pretty small:\nruby\ndef run(content, params={})\n  filter = Nanoc::Filter.named(:external).new(assigns)\n  filter.run(content, params.merge({ exec: 'multimarkdown' }))\nend\n. The advantage of having each filter in its own repository+gem is that their release cycles are fully decoupled. This means that filters and helpers can be released much more quickly, without having to take the main nanoc gem/repo into account.\nUsing submodules and pulling all the plugins into a single nanoc distribution is not ideal because of a few reasons. git submodules are not easy to use, for starters. Such a system would require a build system as well as system to detect whether any repos are changed. It also does not alleviate issues with gems (or dependencies of gems) that need to be compiled and could cause the build to fail (a major issue with nanoc 3.x at the moment). Also, since it pushes the act of releasing software into an automated process, quality control goes down.\nHaving said that, there will be a nanoc-powerpack gem that depends on nanoc itself as well as all filters and helpers.\nI don\u2019t mind having filters that are only 30 lines of code. Such an :external filter may be short, but it is a fairly independent piece of software, depending only on nanoc, but has its own maintainers, its own release schedule, its own documentation etc.\nIn the end, I believe this approach will lower the barrier to contributions significantly.\n. I\u2019d suggest converting the filter into an external filter and then going without the multimarkdown proxy filter. This approach is the most flexible, and can be used in a lot of cases. @lifepillar @bobthecow Do you both agree?\nOne minor change that I\u2019d like to suggest is not using :path at all, and instead using the first argument to the filter as either the executable name or the full path to the executable:\n``` ruby\nExecutable name\nfilter :external, exec: 'multimarkdown', options: %w( --smart )\nFull path to executable\nfilter :external, exec: '/usr/local/bin/multimarkdown', options: %w( --smart )\n```\n. :+1:\n. I\u2019ll do a more thorough review later, but it looks nice so far!\nThe README file will probably need to be updated to clarify ownership and maintenance roles. This is something I haven\u2019t done for other nanoc-* gems/repos, but it will need to happen for those as well.\n. This is superseded by lifepillar/nanoc-external#1.\n. This looks quite nice, thanks! I\u2019ll do a review soon.\nThe same discussion from #385 about splitting this into its own repository+gem applies here btw. I don\u2019t have a template for a deployer, but it should not be too different from a filter. I\u2019ll play around with creating a deployer template soon.\n. Be sure to add Tom Vaughan to the license, because he wrote middleman-deploy originally.\n. @lifepillar Let me know when this is up for review again.\n. You can (and should) now use the new Nanoc::Piper (see #417) instead of using the popen variants.\n. @lifepillar Are you still working on this? I\u2019d like to close this PR soon.\n. Definitely would like the commit to be squashed, but that can happen when it\u2019s finished.\n. @lifepillar Hm, not having tests is a problem. I\u2019ll look into it.\n. @lifepillar Your deployer is missing an identifier (identifier :git).\n. As mentioned before, this is lacking tests.\n. I\u2019d prefer the Git deployer to only commit to the git repo and push, but not actually manage the repo. (Better safe than sorry, especially with git.)\nI would not consider the Git repo to be a temporary asset, as I think it\u2019s useful to keep a life-long history of all deployed versions of a nanoc site.\n. > The user removes the build directory.\nThat should never be necessary.\n\nAt this point, the user should probably clone the existing site from Github into build, because nanoc would not force push.\n\nCreating a new orphaned branch in the output directory shouldn\u2019t require a push with --force.\nA remote will need to be setup, but that is the case with all new repositories anyway. A nice help message could be printed with instructions on how to do so (similar to the instructions GitHub shows for new/empty repositories).\n\nThe build directory is no longer a generated product (it contains info that should not be deleted).\n[snip]\nwouldn't a clean build delete the .git directory?\n\nThe default prune config includes .git in its list of excluded directories, so the .git directory will not be deleted.\n\nAnd I don't think that the history of all deployed sites (the built products) is so relevant\n\nThat is up for the user to decide. It is a reasonable assumption that the history will be retained when using the Git deployer. Not doing so will likely break users\u2019 assumptions.\n\nThe point is exactly that the user should not care about dealing with Git commands. I think that the changes you propose would make the plugin much less convenient.\n\nI agree with the less convenient part. I believe it\u2019s a price we have to pay. Git is complex and does not always behave as expected. I would much rather err on the side of caution than do something that is potentially destructive.\n. The lack of automated tests is still a blocker for this PR to be merged.\nYou don\u2019t need git itself to write automated tests\u2014you shouldn\u2019t be testing git\u2019s behaviour after all. The tests should verify that the correct commands are invoked though.\n. I\u2019m short on time to review this, but I\u2019ll get on to it ASAP.\n. @lifepillar This PR has the code for a MultiMarkdown filter as well. Could you remove that one?\n(You can create a separate repo, e.g. nanoc-multimarkdown, for the filter, but then it also needs tests.)\n. It\u2019ll also be necessary to put this into a separate repo (similar to what was done for nanoc-lftp) but it can wait until after I\u2019ve finished the review.\n. Please squash these 72 commits together into a single one.\n. Could you add a test for the stdout.string.empty? fix please?\n. Looks nice overall though! Will finish the review and play around with the deployer soon.\n. Yes, there should be two test cases for #clean_repo?: one in which the repo is clean, another one where the repo is not clean. (For bonus points, a third one where the clean-ness cannot be inferred.)\n. I disagree that --dry-run should raise an error. It should print the commands that would be executed.\n. Looks good otherwise.\n. Looks good!\nFollowing the policy of new plugins, this deployer needs to be in its own repository/gem. I can handle that for you if you want.\n. There will be the nanoc-deploying gem, and eventually also specific deployers, e.g. nanoc-deploying-git.\n. I\u2019ve (finally) moved this into its own repository; Ruby gem to follow soon (see nanoc-git repository).\nI also created the issue nanoc/nanoc-git#1 so I remember to release this.\nMy apologies again for the delay.\n. Hi!\nUsing a helper function such as the #orderedChildren one you wrote is the recommended way. (Minor nitpick: the helper function should be written in snake_case instead of camelCase.)\nThe collection of all items, @items, is not in any particular order. In fact, in nanoc 4.0 (which is a WIP) the @items collection is no longer an array like in 3.x, but acts more like a set, removing the potential assumption that there is some sort of ordering. For instance, it is no longer possible to fetch items using an index, e.g. @items[12], which I believe never made sense in the first place.\nI wouldn\u2019t mind introducing a sensible default ordering for @items (and variants, e.g. @item.children), on the condition that that ordering fits 95% of all use cases.\nHere is a list of reasonable sort strategies I can think of, off the top of my head:\n- numerical, by an :order attribute\n- date-based, by creation date, as provided by the file system\n- date-based, by a :published_on attribute\n- date-based, by a :created_on attribute\n- alphabetical, by filename\n- alphabetical, by a :title attribute\nI don\u2019t think it\u2019s possible to find a default ordering that makes sense (personally I would not use sorting by filename in any of my sites, for instance).\nGiven the above and the fact that sorting is so easy (your #ordered_children method proves that), I don\u2019t believe it is worth introducing a default sort order. Thoughts?\n. A problem I have with the @items.order suggestion you mentioned is that it does not solve a real problem: what it does can easily be accomplished in a different way, and that different way is not much more cumbersome.\nI\u2019ll close the issue now, but feel free to add new thoughts and ideas when you get them.\n. I\u2019d also like to see tests for this.\n. Apart from my comments, this looks quite good!\nOne more thing: starting with nanoc 4.0, nanoc will be split up into many different repositories: one for each filter, each helper, each deployer, etc.\nQuoting from pull request #385:\n\nWe\u2019re currently in the process of splitting up nanoc into different gems for nanoc 4.x, and each plugin (filters, helpers, deployers, \u2026) will live in its own gem, in its own repository. For details, read the 4.0 Subprojects wiki page, and see nanoc-sass as an example repository+gem.\nFor this reason, I\u2019d rather not add any new features into nanoc master at this point.\nI\u2019d like to start using the approach of having plugins in their own repository/gem with new additions to nanoc 3.x already. You could base yourself off the nanoc-sass repository, but I\u2019ll prepare a template repository soon, which you\u2019ll be able to use as a starting point for nanoc-multimarkdown.\nThis nanoc-multimarkdown repository would then live inside the nanoc organisation on GitHub. I\u2019d like to assign you as the primary maintainer. Does that sound good to you?\n\nThe same goes for nanoc-lftp. I\u2019d like to have a nanoc-lftp repository and a nanoc-lftp gem, both which will be part of the nanoc GitHub organisation once they\u2019ve been reviewed. You\u2019d be assigned the primary maintainer of nanoc-lftp (the work related to that would be quite low since it is a small piece of software). Would you be OK with that?\n. About the tests: which gem(s) depend on celluloid?\n. Can you share the Gemfile.lock, to find out where the celluloid dependency is coming from? nanoc 3.x should be fully compatible with Ruby 1.8.x.\n. You should be able to modify the platforms for listen in the Gemfile:\nruby\ngem 'listen', :platforms => [ :ruby_19, :ruby_20 ]\nThis will prevent listen from being installed on Ruby 1.8.x, and the relevant tests will be skipped, allowing you to write tests for lftp. Do you need any assistance with writing tests?\n. Not being able to take on the maintainer role is fine by the way.\n. Most of these errors are related to having an old version of Ruby (1.8.x) or Rubygems. Upgrading would solve these issues and make development a lot easier (and faster).\nIs it important for you to retain compatibility with Ruby 1.8.x? Would you be able to upgrade to Ruby 1.9.3 or higher?\n. I definitely think this PR is useful. Having a deployer capable of using FTP has been on the wishlist for a while!\nMy concern is that Ruby 1.8.x has been declared end of life almost two years ago, and even Debian stable includes Ruby 1.9.3 now. Ensuring compatibility with 1.8.x in this PR means not using the latest available versions of dependent gems (for example, mime-types\u2019 latest version requires 1.9.3).\nIf you agree, I\u2019d like to take the code in this PR and put it in a nanoc-lftp repository and release it as a gem, but only for Ruby 1.9.3 and up.\n. As far as not including passwords go, I definitely agree. A way to solve that is to use a preprocess block that fills in @config with data from the environment or a git-ignore\u2019d file containing credentials.\n. OS X indeed shipped with 1.8.7 for a very long time, but I just checked on my Mavericks install, and there it is actually 2.0 (which is again not the current version, but I won\u2019t blame them for not including 2.1).\nI will create a separate repo and gem for this. Thanks!\n. This now lives in its own repository, nanoc/nanoc-lftp.\n@mro I\u2019ve solved the URI parsing issue by not using dst, but rather split it up in two more clear attributes:\nyaml\ndeploy:\n  public:\n    kind: lftp\n    dst_host: http://stoneship.org\n    dst_path: /var/www/nanoc.ws\n. Fixed by 50b058dc352bb05437b324f83e1c2c076e3aa765.\n. This is very hard to solve on nanoc 3.x.\n. Oh nice. Last time I looked at Rack::Static, it did not have the capability of finding and serving an index.html file when requesting a directory.\n. Hmm, seems like Rack::Static does not handle paths that represent directories without a slash (it should ideally redirect).\ne.g. Given a directory ./foo and a file /foo/index.html, with Rack::Static serving the directory ., then http://localhost:9292/foo will be a 404 while http://localhost:9292/foo/ will contain the content of /foo/index.html.\nCurrently, nanoc view (or adsf rather) redirects requests like these to a path that includes the trailing slash.\nGiven that this PR would introduce a breaking change, I can\u2019t accept it as-is. One solution would be to introduce a middleware that performs such a redirection, but then I think we should just stick with adsf.\n. Thanks for letting us know! It\u2019s now fixed (91d090ee9e95febdcbd1c2b325d1fa97cbf307dd) and the fix will be in the next release.\n. This has been moved into a separate nanoc-asciidoctor repository. This also means that #385, #386 and #388 will be kept as separate repositories and gems as well.\n. Fixed by #402.\n. Cool stuff, thanks!\n. @gjtorikian It\u2019s not in 3.6.x, but it\u2019ll be in 3.7.0, which I plan on releasing in the next two weeks.\n. Sorry, I am notoriously bad at releasing quickly!\nI believe there\u2019s not much else left for 3.7, so I\u2019ll get it released this weekend!\n. Releasing this depends on fixing nanoc/nanoc#443. Reviews welcome!\n. 3.7.0 is released!\nI\u2019d close this issue if it weren\u2019t closed already!\n. Fixed. Thanks! \nIt\u2019s also in the release notes now: https://github.com/nanoc/nanoc/commit/d7e25fdbd761dcccff308426ed94264b3329782c\n. Cool stuff!\n. Yup.\n. :+1:\n(Out of curiosity, what are you using the XSL stylesheets for?)\n. Fixed by #404.\n. Thanks! :+1:\n. Hmm, odd. Can you try the following?\n% irb\nirb> require 'nanoc'\n=> true\nirb> Nanoc::Filter.named(:redcloth).new.setup_and_run('h1. Foo')\n=> \"<h1>Foo</h1>\"\nDoes that work?\nAlternatively, does going into irb and requiring 'RedCloth' work?\nRubyGems can act up from time to time. Uninstalling and reinstalling RedCloth might help.\n. Do you have different versions of RedCloth installed? (A lowercase redcloth maybe?)\n. Weird. Do you have issues with any other nanoc filters?\nThe fact that running the filter in irb works is troubling.\n. What happens if you open /Users/nvie/.rvm/gems/ruby-1.9.3-p125@blog/gems/nanoc-3.6.8/lib/nanoc/filters/redcloth.rb and change\nrequires 'redcloth'\nto\nrequires 'RedCloth'\n?\n. Ahh! Change the .run to .setup_and_run.\nSeems like I introduced a backwards incompatibility.\n. Hi,\nFirst of all, for support questions, the nanoc group on Google Groups is the preferred place. I\u2019ll close this issue on GitHub now, but feel free to ask on the group.\nYou can pull in external data by writing a data source that generates an item that has no content, and takes its attributes from that file.\n. :+1: apart from remarks.\n. Looks good. Will run some tests locally to make sure this doesn\u2019t break anything, but if it doesn\u2019t, I\u2019ll merge.\n. Yup, would be great if you could move that over too.\n. Cool stuff.\n. Did this happen after upgrading from one Ruby version to another?\nnanoc uses PStore to store information that speeds up compilation. The error seems to indicate that this information got corrupted somehow. I don\u2019t know how that could happen; nanoc did not modify the file format, and this seems to indicate something more fundamental going wrong.\nBeing able to reproduce this problem would help immensely.\n. Hmm, do you by chance have core.autocrlf set up? Just a shot in the dark.\n. By the way, the tmp/ directory can be deleted at any time without negative side effects, except for the next run of nanoc taking a bit longer.\n. Hmm, looks like the \u201cincompatible marshal file format\u201d error is not always avoidable:\n\nIn normal use, marshaling can only load data written with the same major version number and an equal or lower minor version number.\n\n(from http://ruby-doc.org/core/Marshal.html)\nHowever, the latest version of Marshal\u2019s file format is 4.8, and definitely not 60.60.\n. @gplv2 Ahh, that is quite interesting. I cannot reproduce that issue locally, however. Do you mind sharing your ~/.gitconfig? (Be sure not to include sensitive data.)\n. Yep, spotted that one as well, but doesn\u2019t give any useful information.\nThe ~/.gitconfig seems normal. Are you running on Windows by chance?\n. Oh yeah, I could\u2019ve derived that from the information you posted, my mistake.\nSeems like an okay plan of action would be to let nanoc catch that error and recreate the files if they cannot be read. It\u2019s not the best approach, but it will at least prevent having to manually nuke tmp.\n. Yeah, PStore is kinda icky (and slow) and I\u2019m evaluating alternatives for it in nanoc 4.0.\n. #409 causes the store to be reset on error, which should avoid these issues.\n. @strand Correct\u2014my previous comment indeed meant to say #418 rather than #409!. Yep, the /style.css should be /stylesheet.css (or, perhaps even better, @items['/stylesheet/'].path).\n. #411 is a potential fix.\n. Fixed by #411. Thanks for reporting!\n. @bobthecow :+1:?\n. For consistency with Filesystem in nanoc 4.0, I\u2019d change the names slightly:\n- content_dir for items\n- layouts_dir for layouts\nI\u2019d also like to have methods content_dir_name and layouts_dir_name that do @config.fetch(:content_dir, 'content') and @config.fetch(:layouts_dir, 'layouts'), respectively.\n(The Filesystem data source in nanoc 4.0 is not that nice yet. It doesn\u2019t have content_dir_name and layouts_dir_name, for instance. I also noticed it uses %w( content layouts ) which is not parameterised, oops.)\n. Hmm, @config should ideally never be nil\u2026 can you fix the code so that it is never nil?\nAlternative, you could have def config ; @config || [] ; end.\n. I\u2019m OK with @config = config || {}.\nI\u2019d like to only use @config in the initializer, and config elsewhere in the file.\n. Looks good, thanks!\n. I find that this adds a lot of complexity for what it\u2019s worth.\nMy approach for splitting up long preprocess blocks is to define helper methods and call them inside the preprocess block. Would that work for your use case?\n. OK, that seems reasonable for this use case.\nYour implementation fails when including rules before defining a preprocessor. In that case, the last nil will be used for the main Rules file rather than the included one.\nInstead of using a stack of preprocessors, I\u2019d rather have a hash that maps the Rules file\u2019s full path onto a list of preprocessors. That will also make the nil handling obsolete, which is kinda icky IMO.\n. Oops, I meant onto a single preprocessor, so that the relationship is still one-on-one.\n. This is not a backwards compatible change. Running the configuration file through ERB can break existing configuration files.\n@gpakosz What is the use case for this change?\n. As for non-ASCII UTF-8 characters: support for UTF-8 is nearly universal, and it should be, so I see no reason to switch back to ASCII.\n. It may be useful to have a parent_config_file: \"factory/nanoc.yaml\" setting. Would that help you?\n. The nice thing about parent vs include is that the override semantics are much more clear in the former case.\n. This could be recursive, yeah.\n. I\u2019d say that parent_config_file makes more sense, because you want to be able to set defaults in a parent file, and override them for your site, because your site is more specific. With include_config_file, there\u2019s no way to include parts of a configuration file and override what you\u2019ve included.\n. @gpakosz Feel free to open a pull request on master for parent_config_file support.\n. Thanks!\n. CC @bobthecow \n. CC @bobthecow \n. Well, at least this approach works on Rubies 1.x and 2.x, and on JRuby!\n. CC @bobthecow \n. Merged anyway, but you can always give more feedback later :)\n. It\u2019s fine!\n. Looks good so far. Will probably play around with this and merge it later this week.\n. @gpakosz I think it is fine the way it is now.\n. This is hard to implement in a backwards-compatible way.\n. Won\u2019t implement this in 3.x. Migrated to the nanoc 4 Trello board.\n. I reported a bunch of issues for Nokogiri on JRuby, that came to light in the nanoc test cases:\n- sparklemotion/nokogiri#1077\n- sparklemotion/nokogiri#1078\n- sparklemotion/nokogiri#1079\n- sparklemotion/nokogiri#1080\n- sparklemotion/nokogiri#1081\n. Another issue:\n- sparklemotion/nokogiri#1084\n. I\u2019ve decided to skip all Nokogiri tests on JRuby, because that library is insanely buggy and I just don\u2019t want to deal with it anymore.\nI\u2019m considering printing a warning whenever Nokogiri is used on JRuby. @bobthecow Thoughts?\n. The following is now printed when using Nokogiri on JRuby:\n```\nCaution:\nNokogiri on JRuby has severe bugs that prevent it from producing correct results\nin many cases. For example, the nanoc test cases revealed the following bugs:\n\nhttp://github.com/sparklemotion/nokogiri/issues/1077\nhttp://github.com/sparklemotion/nokogiri/issues/1078\nhttp://github.com/sparklemotion/nokogiri/issues/1079\nhttp://github.com/sparklemotion/nokogiri/issues/1080\nhttp://github.com/sparklemotion/nokogiri/issues/1081\nhttp://github.com/sparklemotion/nokogiri/issues/1084\n\nBecause of these issues, we advise against using Nokogiri on JRuby. If you need\nXML parsing functionality, consider not using JRuby for the time being.\n\n```\nGiven the bugginess of the library, I think it\u2019s necessary to warn users so that they know what to expect.\nSuggestions about the phrasing is quite welcome.\n. All JRuby issues are now fixed (apart from the Nokogiri ones; those are just skipped).\nCC @bobthecow\n. @bobthecow What about running JRuby twice, once with Nokogiri enabled and once with Nokogiri disabled?\n. Done. (Seems like there is a new JRuby failure related to piper\u2026\u00a0odd. Will fix later.)\n. Getting this error locally, and a different one on Travis CI:\n1) Error:\nNanoc::OutdatednessCheckerTest#test_outdated_if_dependent_item_outdated:\nErrno::ENOENT: No such file or directory - /private/var/folders/jf/v8gkrcc973l5l6f6561_zqp00000gn/T/nanoc-test20140421-80471-59vd3x/foo/tmp/text_items/20140421-80471-1idmpu7\n    org/jruby/RubyFile.java:361:in `initialize'\n    org/jruby/RubyIO.java:1178:in `open'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:1380:in `copy_file'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:477:in `copy_file'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:396:in `cp'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:1525:in `fu_each_src_dest'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:1541:in `fu_each_src_dest0'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:1523:in `fu_each_src_dest'\n    /Users/ddfreyne/.rubies/jruby-1.7.11/lib/ruby/1.9/fileutils.rb:395:in `cp'\n    /Users/ddfreyne/Documents/Development/nanoc/repos/nanoc/lib/nanoc/base/result_data/item_rep.rb:146:in `write'\n[snip]\n. On Ruby 1.8.x:\n623 tests, 1596 assertions, 2 failures, 12 errors, 34 skips\nLots of dependencies without Ruby 1.8.x support, hence the skips. Other problems:\n- Open3 does not have a wait thread, hence undefined methodvalue' for nil:NilClass- Ruby 1.8.x does not have#each_with_object, henceundefined method 'each_with_object'`\n- Other broken tests due to libraries not being available on 1.8.x and only on 1.9.x\n. @headius Thanks for your involvement. We\u2019re working hard to make JRuby a supported platform for nanoc, hence all the noise.\n\nPlease don't quietly mask failures when you encounter them on JRuby.\n\nThere are currently two cases of JRuby-related failures being masked:\n- The test that revealed the jruby/jruby#1647 bug is skipped when the JRuby version is equal to 1.7.11. This test will start failing as soon as a newer release is used in Travis CI.\n- JRuby tests are run once with Nokogiri enabled, and once with Nokogiri disabled.\n  - With Nokogiri disabled, there are few remaining failures. Once JRuby-without-Nokogiri is free of failures, I\u2019d like to make this an officially supported platform (i.e. remove it from the allow_failures from .travis.yml).\n  - With Nokogiri enabled, about a dozen failures remain, and I don\u2019t feel like working around these issues since the tests should simply remain failing.\nI\u2019d much rather make JRuby a supported platform with clearly indicated known problems (i.e. the ones related to Nokogiri) rather than waiting for everything to be fixed. Nokogiri is not essential for nanoc to function properly.\n. Ruby 1.8.x doesn\u2019t have a way of figuring out the exit status of the child. That\u2019s unfortunate, as it means popen3 can\u2019t be used reliably.\nThis article suggests to use either the open4 functionality built into JRuby, or using the open4 gem.\n. The jruby-18mode Travis CI target is problematic now. It errors with the following message:\nGem::InstallError: celluloid requires Ruby version >= 1.9.2.\nThis makes sense, since the Gemfile contains (simplified) this:\ngem 'listen', :platforms => [:ruby_19, :ruby_20, :ruby_21, :jruby]\nListen depends on celluloid, which is not compatible with 1.8.x (because Celluloid uses fibers, I believe, which are available on 1.9+ only).\nThe :jruby symbol here should really be something like \u201cJRuby-but-not-1.8\u201d.\nThat is, unless we decide to only support JRuby with 1.9 support, and only support 1.8.x on MRI. Thoughts?\n. Seems like JRuby (without Nokogiri) is passing the tests now. Sweet!\nI believe the Tempfile trick I used to create a new path (rather than a file) is unreliable. I\u2019m doing this:\n``` ruby\n      def temp_filename\n        FileUtils.mkdir_p(TMP_TEXT_ITEMS_DIR)\n        tempfile = Tempfile.new('', TMP_TEXT_ITEMS_DIR)\n        new_filename = tempfile.path\n        tempfile.close!\n    File.expand_path(new_filename)\n  end\n\n```\nThat should really be replaced with something that returns a unique, new and unused filename in a directory that is guaranteed to exist. The Tempfile#close! method makes no guarantee that the directory of the temporary file won\u2019t be deleted. (In fact, deleting the directory if it\u2019s empty makes sense.)\nSo, it seems to me that exchanging the Tempfile trick with proper temp-path logic is a requirement for this PR to be merged.\n. Temporary path creation logic is now in a separate TempPathRegistry (WIP).\n. This PR is ready to be reviewed.\nOpen questions:\n- Should we disable jruby-18mode? (My vote: yes)\n- Should we move JRuby 1.7.11 (without Nokogiri) out of allowed failures? (My vote: yes)\nThere are still some Ruby 1.8.x and Rubinius issues, but I\u2019ll tackle those in separate PRs.\n. JRuby 1.8 mode disabled and JRuby 1.7.11 removed from allowed failures after discussing with @bobthecow.\n. I\u2019ve reworded the JRuby-Nokogiri message to be more constructive:\n```\nNote:\nThe behavior of Pure Java Nokogiri differs from the Nokogiri used on the\nstandard Ruby interpreter (MRI) due to differences in underlying libraries.\nThese sometimes problematic behavioral differences can cause nanoc filters not\nto function properly, if at all. If you need reliable (X)HTML and XML handling\nfunctionality, consider not using Nokogiri on JRuby for the time being.\nThese issues are being worked on both from the Nokogiri and the nanoc side. Keep\nyour Nokogiri and nanoc versions up to date!\nFor details, see https://github.com/nanoc/nanoc/pull/422.\n```\n@headius Apologies for letting my frustrations get the better of me.\n. Ready for review.\n. Hm, had ~> 1.5.5 for Nokogiri in the Gemfile. I don\u2019t quite remember what that was for, so I changed it to ~> 1.6. Maybe I should get rid of it entirely?\nIt doesn\u2019t affect any of the reported issues, since those were tested outside of the nanoc context.\n. Support request such as this one should go to the discussion group; the GitHub issue tracker is intended to track issues.\nHaving multiple blogs is possible, but the Blogging helper is fairly limited for this. You can define your own functions though. For instance, this would allow you to get the sorted articles filtered by a given kind:\nruby\ndef sorted_articles(kind)\n  articles = @items.select { |item| item[:kind] == kind }\n  articles.sort_by do |a|\n    attribute_to_time(a[:created_at])\n  end.reverse\nend\nThe helpers that come with nanoc are deliberately kept simple, so that they can be used as a basis for more powerful helpers.\n. The create-site command (in lib/nanoc/cli/commands/create-site.rb) should be updated so that new configurations have the lib_dirs attribute.\n. :+1: otherwise.\n. Yeah, maybe skipping the create-site changes is okay.\nTo do: update the documentation on the web site. (I will tackle that later when I write the 3.7 documentation.)\n. Fixed by PR #426.\n. Best viewed with ?w=1.\n. @gpakosz Aborting wasn\u2019t what I had in mind when I added the USR1 functionality. I don\u2019t think printing a stack trace and aborting is super useful.\n. That almost looks like a foreign language :)\nThe nanoc web site has a troubleshooting section dedicated to weird characters. Let me know if the troubleshooting section fixes your problem (it should, but you never know).\nTo prevent this issue in the future, I think the default nanoc configuration should already come with the encoding filled in (i.e. encoding: utf-8). I\u2019ll open a pull request for this soon.\n. PR for setting the default encoding to UTF-8 is #428.\n. The tab in front of the encoding: utf-8 should be four spaces rather than a real tab.\nBy the way, the best place for support requests is the Google discussion group. GitHub issues is used to track bugs.\n. Can you copy-paste the contents of the config file on gist?\n. Ahh, perhaps you have a tab character after the : character in encoding: utf-8. That should be a space as well.\n. Looks like the blank line after encoding: utf-8 has a tab in it. Get rid of that, and the site should compile again.\n. Alright, good to hear. I\u2019ll close the issue now, but feel free to let me know if you experience further problems.\n. Not sure why that one test failed, but #429 should take care of that.\n. Should\u2019ve done this long ago.\n. @kost Can you add tests for this? This feature looks useful, but without tests it\u2019s not going to get merged.\n. Closing due to inactivity, lack of tests and broken code.\n. Feel free to submit a new pull request.\n. Hmm, I get the feeling there's an underlying issue here. I have access to your site source, so I\u2019ll take a look.\n. Oh wow, that is a nasty issue. Thanks for the detailed analysis!\nWhere are you removing items? Explicitly in the preprocess block?\n. Yep, @items.freeze will prevent modifications at all.\nCan you try using the release-3.6.x branch and seeing whether that branch still exhibits the problem? The upcoming nanoc patch version includes improvements to the checksummer, which determines whether or not objects have changed, so that improvement can be relevant here.\n. I\u2019m getting the feeling that we\u2019re on the wrong track with the item removal idea\u2026\u00a0nanoc calculates outdated items recursively, so a single compilation should find everything.\nI\u2019ll play around with the site source (I have access to it) later today and see what I can find out!\n. Sweet, good to know this got resolved!\n. I was convinced nanoc checks that, but apparently it does not.\n. @jugglinmike I can make no guarantees that this solves the problem, but it is a step in the right direction :)\n. Fixed by #435.\n. Hi, thanks for the patch!\nI\u2019m hesitant to admit this change since it has virtually no effect, because the new names are not used anywhere.\nA better solution than to complete the list of color code names would be to switch to a full-fledged library, such as colored. I suppose that the reason why this hasn\u2019t been done yet is because it hasn\u2019t bothered me at all so far.\nI am also trying to keep the amount of changes to the nanoc 3.x branch (master) as low as possible. The main focus is on nanoc 4, which lives in the nanoc-core repo.\n. Hi @xiaohanyu, and thanks for the time to contribute!\nFor nanoc 3.x, I\u2019d rather not spend much time on having Rubocop set up properly. (It still should not generate any warnings though\u2026 I\u2019ll look into that.)\nThe nanoc-core repository should, and will in the future, be strictly checked (i.e. tests fail if Rubocop fails).\n. @xiaohanyu It\u2019s quite hard to fix all these warnings without breaking backwards compatibility. I\u2019m focusing on nanoc 4.x now, which should not have any offences at all.\n. This happens because ::Sass::Importers::Filesystem\u2019s _find is overridden to find and generate dependencies, and it assumes Sass is being used from the sass filter.\nDetecting when Sass is called not from the sass filter is possible. Will fix!\n. This one\u2019s fixed by #445.\n. Thanks for reporting! This issue is identical to #368, which is the same as ddfreyne/cri#33. I\u2019ll close this issue here for now.\n. Hmm, /tmp is supposed to be deleted indeed. It is, as far as I can tell:\n- https://github.com/nanoc/nanoc/blob/master/lib/nanoc/base/compilation/compiler.rb#L93-L96\n- https://github.com/nanoc/nanoc/blob/master/lib/nanoc/base/temp_filename_factory.rb#L42-L49\nNot sure what\u2019s going on there.\n. Ohh, it\u2019s the directory itself that still exists. Yup, that one\u2019s not being deleted. Will fix.\n. Fixed by #444!\n. Hi!\nThis is a known issue, but unfortunately not one that is easy to fix. I plan on tackling this in nanoc 4.x.\nThe reason why nanoc recompiles the entire site is because it is the safe approach. When an existing item or layout is modified, all items that depend on this item or layout will be recompiled. Such dependencies can be tracked easily. However, whenever a new item is added, there is no quick and easy way to know what pages depend on this new item. To figure out dependencies, nanoc recompiles all items.\nTo fix this, items need to be able to depend on collections of items, rather than individual items. This way, when the collection changes, the item is recompiled. For this to work, these collections need to be abstractly defined by some sort of query, so they can be re-evaluated to see if the contents have changed. A sample collection could be \u201call items where the identifier starts with /blog and where the \u201ckind\u201c attribute is \u201carticle\u201d and the year of publication is 2013\u201d. Also see this Trello card.\nI hope the  makes some sense! I\u2019ll close this issue now, since it\u2019s on Trello (which I use for planning nanoc 4.x features). Thanks for reporting!\n. Short answer: Yes, this is intentional.\nLong answer: The helpers that nanoc provides are not intended to be one-size-fits all solutions. You are encouraged to take the existing filters and modify or extend them to fit your own needs. You can find the helpers\u2019 source code in the lib/nanoc/helpers directory.\n. Tests are expected to fail until #443 is merged.\n. I also transplanted (cherry-picked) this so that it\u2019s on the release-3.6.x branch too.\n. Oops, deleting the release-3.6.x branch seems to have closed this PR. Not my intention. Will open a new one.\n. Hi, thanks for reporting!\nbin/nanoc unintentionally requires a Gemfile to be present. This is a regression from 3.6.11. Will fix!\n. You can temporarily use 3.6.11, or, even better, use a Gemfile!\n. This is fixed by #449. The 3.7.1 release will follow shortly.\n. 3.7.1 is released.\n. @pitosalas Is the issue you\u2019re experiencing #452, rather than this one?\n. Excellent, thanks!\n. Yeah, this fix isn\u2019t that great because of that\u2026 I\u2019ve reverted the fix and I propose #449.\n. :+1: Thanks!\n. My apologies. I haven\u2019t had the time to review it yet.\n. Looks good otherwise. Can you squash your six commits together? I\u2019ll merge afterwards.\n. Thanks!\n. This appears to be a problem with the fix in #449: Bundler::GemfileNotFound is not necessarily defined (it won\u2019t be if Bundler is not installed).\nThanks for reporting. Will fix!\n. Will release a fix for this shortly. Sorry for the delay!\n. This is fixed by #464 and will be released in nanoc 3.7.2 soon.\n. Moved to Trello.\n. Good point, thanks for spotting.\n- http://rdoc.rubyforge.org/ \u2192 http://docs.seattlerb.org/rdoc/\n- http://markaby.rubyforge.org/ \u2192 http://markaby.github.io/\n- http://maruku.rubyforge.org/ \u2192 https://github.com/bhollis/maruku/\n- http://kramdown.rubyforge.org/ \u2192 http://kramdown.gettalong.org/\n- http://curb.rubyforge.org/ \u2192 https://github.com/taf2/curb (or alternatively, remove this link etirely)\n- http://rack.rubyforge.org/ \u2192 http://rack.github.io/\nDoes that look right?\nI knew about Rubyforge closing down, but I never thought I\u2019d still have so many links. I guess I should run nanoc check elinks more often :)\n. @grv87 nanoc check elinks works by making HTTP requests and asserting that the response code is 200.\n. Fixed by #467.\n. Can you share the full crash.log?\n. Did you require the stringex gem? It won\u2019t be required just because it\u2019s in the Gemfile.\n. Nevermind, it should be automatically required (as of nanoc 3.7.0). What version of nanoc are you running?\n. I greatly recommend upgrading to 3.7.1! It\u2019s backwards compatible, so upgrading should be painless.\n. The troubleshooting page doesn\u2019t mention this specifically.\nThis problem can arise when you have e.g. content/blog/index.html and content/blog.html. The identifier that corresponds with these filenames is the same.\nCan you check whether you have both /help/bioc-views/package-pages/MafDb.ALL.wgs.phase1.release.v3.20101123.html (or a different extension) and /help/bioc-views/package-pages/MafDb.ALL.wgs.phase1.release.v3.20101123/index.html?\nRelated issues: #434, #435\n. @sueyacoub Did you manage to resolve this problem?\n. @sueyacoub Could you create a gist for the full crash.log file and share it here?\n. Can you also share the full path to the name.jpg file?\n. What @bobthecow said is correct: all files in the layouts/ directory are considered to be (textual) layouts. You should keep only true layouts in the layouts/ directory and move other items, such as images, into content/.\n. I\u2019ll close this issue now, but do let us know if you can\u2019t get it to work.\n. Sweet!\n. There's no warning reporting system other that writing to $stderr. Errors are generally exceptions.\nI could adjust the kramdown filter to print warnings, if any, but I fear that it\u2019d cause spam on the screen that people will ignore. Seem like a good idea to do it anyway though.\n. Potential fix in #519.\n. Fixed by #519. Fix will be in 3.7.5!\n. Can you re-do this PR on release-3.7.x rather than master?\n. The PR is for master though!\n. Sweet, will review this more closely later and include it in the next 3.7.x release.\n. What @bobthecow said: this behavior is intentional in nanoc. You can use the relativize_paths filter to make all paths relative, avoiding this issue.\n. Can you add a test for this?\n. I feel that not stripping anything at all is the right choice here.\n. I\u2019m OK with stripping leading empty lines, but I\u2019m not sure about trailing ones. It is common and good practice to end a file with a newline. We should be able to get away with just stripping leading empty lines, right?\n. +1 with stripping trailing newlines. If somebody complains, we can always fix it later :)\n. +1 for removing the blank line as well.\n. @gpakosz Is this ready to go?\n. @jugglinmike The problem is that we already use Bundler to run the tests, which means bundler is already required. bin/nanoc is not tested except manually.\n. @jugglinmike It\u2019s very hard to test properly because it depends on the gems you have installed. You\u2019d need to have a way of automatically testing with different gem setups (no Bundler + no Gemfile, no Bundler + Gemfile, Bundler + no Gemfile, Bundler + Gemfile).\n. This seems to be a problem with your filesystem permissions.\nIf you are using Mac OS X,  consider repairing permissions.\n. (Permissions for /tmp need to be 1777.)\n. The permissions for /tmp should be 1777, not 777. Can you still reproduce the bug with permissions set to 1777?\n. Not quite sure what\u2019s going wrong here. Can you try chmod with -R and removing /tmp/*nanoc*?\n. It seems like nanoc can just use #rm_rf rather than #remove_entry_secure since it does not need to do the security check for the TOCTTOU vulnerability. Will fix.\n@Leolik It is still odd that the problem happens for you, since /tmp is supposed to be excluded from this check anyway. Is /tmp a symlink on your system?\n. Potential fix in #474.\n. Fixed by #474.\n. This is quite cool!\nCan you make this pull request on the master branch though? Since it\u2019s a new feature rather than a bugfix, it should go in 3.8.x.\n. Looks good apart from my remark.\n. Can you share the full crash.log please?\n. Using items in attributes directly is not supported. Instead of using items directly, you can use the identifier. For example:\n``` ruby\n(in the preprocessor)\nReplace this:\n@item[:something] = @items['/stuff/']\nWith this:\n@item[:something_identifier] = @items['/stuff/'].identifier\n```\nWhen you need the actual item itself at some point, you can find it using its identifier:\n``` ruby\nReplace this:\nthe_item_i_want = @item[:something]\nWith this:\nthe_item_i_want = @items[@item[:something_identifier]]\n```\nLet me know if this solves your problem.\nnanoc doesn\u2019t prevent items, layouts, \u2026 from being used in attributes, so that\u2019s a bug. Needs a bit more thought on how to fix this properly though.\n. The fix for this won\u2019t make it into 3.7.3, but I\u2019ll tackle it later (3.7.4 hopefully).\n. A fix for this, which allows items and layouts in attributes again, is in #518.\n. Fixed by #518. This\u2019ll go in 3.7.5.\n. Fixed in #471 (3.7.3).\n. I did not know about the second argument to #split. Use it!\n. Looks good!\nI like having a separate error class, because it makes it easier to handle different errors differently, or change the error message in a single place.\n. The tests are likely failing due to Gemfile.lock not having 3.7.3 but rather 3.7.2 in it.\n. If you rebase the branch against release-3.7.x, the tests should work properly on Travis.\n. @jugglinmike The error you\u2019re seeing is something I couldn\u2019t quite debug properly. I am OK with leaving it as-is, because watch is deprecated in favour of guard-nanoc anyway.\n. @jugglinmike I\u2019ll look into the test at some later time. I might just have to remove it. You can ignore it now though!\n. Nope, all fine. Thanks for the contribution!\n. A (partial) fix is in #476.\nI decided to go with the bugfix branch, since that one will be the most active, and we can easily merge these changes into master later on.\n. Fixed by #476.\n. Looks good!\n. I\u2019m OK with releasing 3.8 soon, even if it doesn\u2019t bring a lot of new stuff to the table. In that case, I\u2019d aim for a release this weekend.\n. Approved by a colleague!\n. Apart from the two tiny comments, :+1:!\nEarlier this year, I set forth a new policy for plugin contributions. I have doubts about whether this was a good approach, so I\u2019m tempted to revert that decision and thus keep new plugins in the main repository. The motivation for reverting the policy is that is significantly easier to continue with what is already established (there are many plugins inside the nanoc repository already). /cc @minad @nanoc/owners  @nanoc/contributors \n. I\u2019m still in favour of splitting nanoc 4.x. I\u2019m just wondering whether it makes sense to retain the policy for 3.x, given that it already bundles a whole lot of plugins. For the sake of consistency, I\u2019m inclined to say no.\n@minad The tests are failing due to style issues. Could you look into those?\n. Alright, decided to stick with the plan, which means that this should be a separate gem. @minad Do you want to do the split or would you rather have me do it? (FYI I\u2019m still aware of your concerns regarding the split.)\n. Done: https://github.com/nanoc/nanoc-typohero\nNext steps are to set up the usual GitHub hooks (Travis, Code Climate, \u2026) and release it. I\u2019ll take care of both.\n. @minad Are you OK with the gem? If so, I\u2019ll release it.\n. @bobthecow The registering happenings by calling identifier :typohero, so an explicit Nanoc::Filter.register is not necessar.\n. And it\u2019s released!\nThere\u2019s some work to be done on granting everyone access to all nanoc-related gems, but that\u2019s a separate issue.\n. Good suggestion! This is something that could be tackled for 3.8, I suppose.\nIf you want to implement this, be my guest!\n. This PR looks quite nice now. I can handle documentation!\nI\u2019m not around in the next few days so I\u2019ll likely only have the time to properly handle this PR some time next week.\n. Yeah, will merge this tomorrow!\n. \u2026\u00a0for a very loose definition of \u201ctomorrow\u201d\u2014apologies!\n. The first error, \u201cThe site has no deployment configuration for default\u201d, is expected, because there is no deployment configuration named default.\nThe parameters (except for bucket, path, cdn_id, kind) are passed to ::Fog::Storage.new (see Fog Storage).\nIn your case, you\u2019re missing provider (which should be AWS).\nI admit that the documentation is lacking. Will fix!\n. nanoc/nanoc.ws#74 should help here.\n. nanoc/nanoc.ws#74 is deployed!\n. This PR is missing a test case. Could you provide one? Looks good otherwise.\n. @mpapis Can you take over this PR? It shouldn\u2019t be merged if it\u2019s not ready, but it can get some more work in a branch of your own.\n. @mpapis What\u2019s the status of this?\n. @mpapis Are you working on this now?\n. Let\u2019s get this in 3.7.6!\n. I\u2019ll take over this PR.\nI\u2019d like to have this change in 3.7.x rather than in master (3.8.0). This is not a feature and one could argue that uploading unchanged files is a bug.\n. Superseded by #536.\n. The preprocess block is not intended to generate persistent content on the filesystem, but rather generate in-memory items. This explains why you need to do the #instance_variable_set workaround.\nIs it possible for you to generate the items in-memory instead of on the filesystem? If not, we need to put more thought how to do this from a conceptual point of view.\n. The data source won\u2019t generate the on-disk items either, but it would create the Nanoc::Item instances.\n. nanoc\u2019s philosophy is that it shouldn\u2019t manage input files. An invocation of the compile command should only update the output and leave the input files as-is. nanoc cannot deal properly with changing input files, and it shouldn\u2019t.\nAnything related to managing input files could be a rake task or a custom nanoc command. In this case, you\u2019d run the custom command and the compile command in sequence. I don\u2019t see it as extra overhead; in situations like these, I usually use a script (or sometimes a trivial Makefile) that invokes the two commands.\n. I\u2019ll close this PR now, but feel free to comment still!\n. Looks good apart from my remarks.\nNot sure how to test this.\n. Could you make this PR based on release-3.7.x instead? This way, the fix will end up in the next bugfix release.\n. I\u2019ll close it!\n. Looks good, but will review later (currently sick sadly).\n. Thanks!\n. The w3c_validators gem doesn\u2019t return that data in a ready-to-use format, but it does return the lines on which the error occurred, so that should give enough information (hopefully) to create a better error message:\n```\n<W3CValidators::Results:0x007fbe950506f8\n@messages=[\n    #],\n  @uri=\"file://localhost/TextArea\",\n  @checked_by=\"http://jigsaw.w3.org/css-validator/\",\n  @doctype=nil,\n  @css_level=\"css3\",\n  @charset=nil,\n  @validity=false,\n  @debug_messages={}\n\n```\n. Fixed by #504. This will be in the next patch release (3.7.5)!\n. Oh, interesting that this bug wasn\u2019t caught before.\n\nThis PR needs two changes:\n1. It needs to be on the release-3.7.x branch so it\u2019s in the next maintenance release.\n2. It needs a test to make sure it catches dotfiles properly\n. @andydrop How\u2019s the progress on this?\n. Thanks!\nWhich two other failing tests are these? They shouldn\u2019t be failing in any case (they\u2019re not failing on my machine).\n. Will close this PR in favor of #492.\n. @andydrop Could you open a new issue in which you paste the details about the failing tests?\n. One option you have is to read an environment variable into the site config in the preprocess block:\n```\nRules\npreprocess do\n  site.config[:env] = ENV['ENV']\nend\n```\n\u2026 and then based on site.config[:env] disable or enable filters/layouts etc.\nDon\u2019t use ENV['NANOC_ENV'] directly in Rules without assigning it to the site config, because nanoc otherwise won\u2019t be able to track dependencies properly.\n. I\u2019ll close this issue now, but feel free to comment still.\n. @lifepillar Yes\u2014@config in nanoc 3 and 4 is the same as @site.config in nanoc 3.\n. Proper support for compilation environments now exists (see #859) as a pre-release feature; the next Nanoc 4 feature release will support it.\n. Will make sure that is mentioned in the docs. Thanks for providing the answer, @gpakosz!\n. See nanoc/nanoc.ws#69.\n. Fixed! See here: http://nanoc.ws/docs/reference/config/#content_dir\n. The items are frozen after the preprocess block has finished executing, so this definitely shouldn\u2019t happen.\nI can\u2019t reproduce the issue here. Do you have a reduced case where this bug appears?\n. Good to hear!\n. Fixed by #501.\n. Apart from comment, sweet :+1: \n. I\u2019d leave out the \u201cand are always unused\u201d \u2014 it\u2019s pretty confusing.\n. Thanks!\n. > Maybe \"and are released after completion\" or something?\nThey\u2019re not necessarily released, since this uses reference counting.\n. Thanks!\n. The first failure is likely because you do not have highlight CLI tool (see Highlight)\u2014could that be the case?\n. @mpapis That\u2019s a different error. I can reproduce that one locally after upgrading Gemfile.lock. Haven\u2019t investigated where the error is coming from yet, but I\u2019m surprised; seems to be a bug in the HTML parsing and/or serialisation. I immediately thought of Nokogiri, but the version is the same\u2026\n. @andydrop Did you have a different highlight executable installed? Strangely, nanoc checks the presence of highlight and skips the test if it\u2019s not there, which means that test can theoretically not fail\u2026\n. For @andydrop\u2019s first failing test, I don\u2019t know what\u2019s going wrong. I can\u2019t reproduce the issue.\nFor @andydrop\u2019s second test failure, I can\u2019t reproduce the issue either, and I have the last version of Pandoc\u2026\nFor @mpapis\u2019 test failure (mentioned four comments above), I have a fix in #502.\n. @andydrop I\u2019m having a hard time reproducing the issues you reported. Would you be able to do some digging yourself? More specifically, for the first failure, figuring out why nanoc doesn\u2019t skip the highlight test. For the second failure related to Pandoc, can you verify that you are running the most recent version of Pandoc?\n. Sweet! I can close this issue now, it seems :)\n. Ah, nanoc does a Bundler.require(:default) in its bin/nanoc executable, while guard-nanoc does not such thing.\nIt would make sense, for consistency\u2019s sake, to let guard-nanoc also perform a Bundler.require(:default).\n. I\u2019ve moved this issue to guard/guard-nanoc#17, so I\u2019ll close it here.\n. I\u2019ll release 3.7.4 once I get a :+1: for #474. I imagine #469 can go in 3.7.5.\n. Will release 3.7.4 tomorrow.\n. Gah, didn\u2019t get to it, sorry!\n. Done! See release notes.\n. I left #476 out since it has no impact on the change in the release (it is neither a feature, a bugfix nor an enhancement).\n. You have a point. The fact that the API has been improved (e.g. #is_proxy? \u2192 #proxy?) should be included in the release notes, even though it\u2019s backwards compatible. As for the !! change: the type of the return value is still documented with YARD as # @return [Boolean] so that should be fine.\nMy proposal (in the Enhancements section):\n\n\n\nMade code adhere much more closely to the Ruby style guide.\n. Oh yeah, should also mention API improvements:\n\n\nMade code adhere much more closely to the Ruby style guide, and made the API more Ruby-like (for example, #proxy? is now recommended over #is_proxy?).\n. @mpapis It\u2019s bad practice to compare directly with false, so I\u2019d just leave it as-is.\n\n\n\nI found a probem: #492 is not backwards-compatible. Any hidden .DS_Store files inside content/ or library/ can cause the compilation process to fail. Seems like the only way to support dotfiles in a backwards-compatible manner would be to have an include_dotfiles boolean in the data source config.\n. It sounds like we might need a way to tell nanoc (or at least the filesystem data source) to only allow (or ignore) specific dotfiles. I like an array of allowed (or disallowed) dotfiles; will need to think about that.\nI\u2019ll revert #492 before the 3.7.4 release.\nCC @andydrop \n. #492 removed and #476 added. Do you peeps approve?\n. @mpapis I\u2019d prefer to put out 3.7.4 with what we have now, and move the fix for this to 3.7.5.\n. @mpapis I\u2019m not, and I don\u2019t think others are, so go ahead.\nI\u2019m not sure a whitelist is what we need; perhaps a simple include_dotfiles boolean in the data source configuration is enough.\nCC @bobthecow @jugglinmike @mpapis @andydrop\n. More in-depth review coming soon!\n. You\u2019ll probably have to rebase against release-3.7.x because of the style changes, sorry!\n. :+1:\n. Yeah, this makes sense. :+1:\n. FYI, I\u2019ve disabled Coveralls since it quite annoys me.\n. @bobthecow Not sure. I don\u2019t really like the GitHub PR comments anyway, and Coveralls isn\u2019t very consistent (sometimes it just doesn\u2019t make a comment at all).\n. Can I get a +1?\n. Yes.\n. There\u2019s no dependency on Rouge anywhere; it is loaded whenever rouge is used in the colorize_syntax filter.\nIt\u2019s not ideal, but that\u2019s how it is.\n. That\u2019s what the nanoc 4.x work is about (although it\u2019s been pretty quiet on that front lately).\n. Can I get a +1?\n. I wouldn\u2019t bother with that\u2026\u00a0Rubocop introduced the annotation for cases like these, and I doubt they\u2019d want to integrate with YARD.\n. It\u2019s probably a good idea to update the HTML check at the same time!\n. HTML check error messages are better now too. There\u2019s duplication between the CSS and HTML checks, but I\u2019m not sure it\u2019s worth cleaning that up.\n. This message is confusing because it is printed before the exception occurs. Also, UTF doesn\u2019t exist; it should be UTF-8 (or more precisely, something like en_US.UTF-8).\nIt could also link to a Troubleshooting section. There is already a section called \u201cCharacters don\u2019t show up right in the output\u201d but it should probably be extended with errors like these.\n. I\u2019m inclined to close this issue in favour of documenting it in the Troubleshooting section of the site. What do you think?\n. I\u2019d say just leave it as-is. People can look up errors themselves, and if we start providing links for every kind of error, we\u2019d be busy for some time.\n. This PR now contains everything for 3.7.5.\n@nanoc/contributors does this look good?\n. #480 can go in a future release too.\n. I plan on releasing 3.7.5 tomorrow morning.\n(Whether this actually works out depends on how early I get up and how much time I waste browsing cute pictures on the internet.)\n. Fixed one typo (missing )).\n. Better fix in #518.\n. Thanks for noticing this! I haven\u2019t really spent time taking care of 1.8.x support, since Ruby 1.8.x is basically dead, but we do have the promise to remain backwards compatible until 4.x.\n. A while ago, I set up nanoc\u2019s Travis CI so that 1.8.x is an allowed failure. I had to do this because many gems in the Gemfile were 1.9+ only, but it looks like we can just use ruby_19_plus instead, and make 1.8.x not an allowed failure anymore.\n. Travis doesn\u2019t support 1.8.6, but only 1.8.7, so we might have to update the installation instructions to say 1.8.7 and up, rather than 1.8.6 and up.\nEdit: Should be OK I guess, considering that 1.8.6 was released on March 12th, 2007 (!). That\u2019s even before the release of nanoc 1.0!\n. @Sudrien Would it be possible for you to upgrade to a more recent Ruby version? 1.8.x reached end of life a year and a half ago.\n. It\u2019s 1.8.6 instead of 1.8.7, in fact. \n. @mpapis I\u2019ll take care of this!\n. Ah, the problems begin:\n% ruby --version\nruby 1.8.6 (2010-09-02 patchlevel 420) [i686-darwin14.0.0]\n% gem install bundler\nzsh: abort      gem install bundler\nI\u2019ll focus on 1.8.7 for the time being.\n. I did some checking, and I found that nanoc 3.6.8 is the last version that can be used on Ruby 1.8.x.\nNext steps would be to explicitly depend on 1.9.3+ for the next nanoc 3.7.x release, and perhaps remove the 1.8-isms from the source code (using Rubocop\u2019s autocorrect).\n. Here\u2019s the PR that explicitly drops 1.8.x support: #517\n. This issue is resolved now, I believe. Ruby 1.8.x support is dropped explicitly, and the latest nanoc version compatible with Ruby 1.8.x has been identified.\n@Sudrien I\u2019ll close this issue now. Sorry for making life a bit harder for you, but you\u2019ll be happier with a more recent Ruby version anyway (and poke your hosting provider to upgrade Ruby!).\n. :+1: so far!\n. Can you also edit .travis.yml and remove 1.8.x as an allowed failure?\n. This branch should start from release-3.7.x, not master. Otherwise, these fixes won\u2019t get in until 3.8.\n. As mentioned in #513: you can close this PR too. Let\u2019s identify the latest version compatible with 1.8.x and stick with 1.9.3+ onwards.\n. Version number fixed (>= 1.7.10, < 2.0).\n. One problem with this is that we break the existing public Nanoc::Extra::Piper API.\n. I\u2019m seriously wondering whether we can\u2019t just drop support for 1.8.x, since it has officially reached end of life. If Ruby 1.8.x itself is not supported, what is the point of letting nanoc support it?\nQuoting the Semantic Versioning specification:\n\nMajor version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API.\n\nWe aren\u2019t introducing any backwards incompatible changes to the public API in this case, so dropping 1.8.x support should be possible.\n(We\u2019ve been dropping support for older versions of filters for a while too.)\nI\u2019m hugely in favor of dropping 1.8.x support.\n. @mpapis Yup, I\u2018d much rather identify the last 1.8.x-compatible version of nanoc, and going forward focus only on officially supported Ruby versions. It\u2019ll save us from headaches in the future and will make it easier to maintain nanoc 3.x.\n. Also, Ruby 1.9.x will reach end-of-life in February 2015. I don\u2019t think this will have an impact soon, because JRuby is basically 1.9.x, but I imagine that at some point in the future, we\u2019ll focus on Ruby 2.0+ only.\nI suppose we can drop 1.9.x support once it has reached EOL and it becomes a pain to maintain 1.9.x compatibility. Something to think about in the future.\n. Agreed. Supporting 1.9.x prevents us from taking advantage of the nice new things in 2.0, but it\u2019s no big deal (yet).\n. @mpapis You can close this PR now if you want.\n. Odd\u2026 should not happen! This is done by the #write_stack_trace method in Nanoc::CLI::ErrorHandler.\n. @auxbuss Which version of nanoc are you using? This issue was fixed in 3.6.8 (see #397, #402).\n. Please do re-open if the issue persists. Thanks!\n. No prob. Thanks for reporting!\n. The only build failure is the strange watcher error on JRuby.\n. Bundler is a development dependency though.\n. Seems like we could get rid of Bundler entirely, and use just gem install -g/--file. I haven\u2019t used that before, though, so I don\u2019t know the drawbacks of doing it that way.\n. So what you\u2019re suggesting is removing Bundler entirely. Right now, I\u2019d rather resolve the problem that we\u2019re seeing (fix in this PR), and perhaps look into removing Bundler in a future PR.\n. OK, cool!\n. What value does removing Bundler add, over just keeping it the way it is?\n. I don\u2019t think we\u2019ve had any problems with Bundler so far. The only annoyance was that the preinstalled Bundler on Travis CI was slightly outdated.\nI\u2019m in the camp of \u201cif it works, don\u2019t touch it\u201d.\n. I\u2019m in favour of keeping the setup as-is, and closing the issue.\n. +1s please \u2014\u00a0CC @nanoc/contributors \n. Will write an e-mail to the mailing list to explain the end of Ruby 1.8.7 support.\n. @bobthecow 1.8.x was deprecated and untested. The reason why all this is happening is because a Ruby 1.8.x incompatibility was reported. Fixing 1.8.x support is not easy, since there\u2019s a bunch of 1.9.3+-only dependencies.\n@mpapis Yup, I fear we\u2019ll have to choose between either 1.8.x support or JRuby support. Piper is tricky.\n. Does the backwards compatibility constraint truly also apply to end-of-life\u2019d software?\nThe question is whether or not we want to add compatibility to a version that is not supported anymore, is used by almost nobody, and should not be used anymore at all; the answer to that question is a pretty clear \u201cno\u201d to me.\nThe precise wording of the Semantic Versioning specification does not imply that the major version number should be bumped when a dependency changes. About the major version number, it says the following:\n\nMajor version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API.\n\nAbout dependencies:\n\nWhat should I do if I update my own dependencies without changing the public API?\nThat would be considered compatible since it does not affect the public API. [..]\n\nThere\u2019s some more interesting discussion on my Twitter account going on (read the entire conversations).\nOne point brought up by @sferik is that there\u2019s no need to shy away from major version bumps. My concern here, though, is that any backwards-incompatible change to a dependency of nanoc (such as #502) would require a major version bump, and we\u2019d be bumping the major version of nanoc very frequently. Any change to nanoc that restores compatibility with a newer version of a dependency would mean a new major version. This would not be manageable even if all dependencies used semantic versioning, which they do not.\nThe fact that nanoc does not have explicit dependencies makes this even harder. (I suppose this is another good reason for splitting every nanoc plugin into its own independently versioned repository.)\nnanoc exposes the APIs of dependencies (for example, in filters). This makes filters easy to use, but does that mean that the API of the dependency is part of the nanoc API itself? I would say no; nanoc is merely a proxy.\nI would like to bump the major version of nanoc only if there is a backwards-incompatible change to the nanoc API itself.\n. (I\u2019d like to continue this discussion in this thread rather than on Twitter, because the conversation there became very difficult to follow.)\n. Some points that I\u2019d like some opinions about:\n- Should 1.8.6 and 1.8.7 support be retained even if that means not supporting other platforms, such as JRuby? Piper is tricky to support on both.\n- How much effort do we want to put in supporting 1.8.x?\n. @mpapis We cannot replace those releases (not even with yanking), so that won\u2019t help.\n. > 1.8.6 should not be supported - this ruby version is long dead\nnanoc supported 1.8.6 in 3.x, so if we can drop 1.8.6 support, we can also drop 1.8.7 support. Supporting 1.8.7 but not 1.8.6 makes no sense.\n\nwe can yank published gem versions starting from 3.6.9 and provide new releases for 3.6 and 3.7 that have the required_ruby_version set to >=1.9.3 (1.9.2 is also problematic) - this way gme install nanoc on 1.8.7 would install 3.6.8\n\nThat could work.\n\nwe could branch from 3.6.8 to provide bug/security fixes on 1.8.7 and continue versioning it as 3.6.8.x\n\nFirstly, I do not want to do 1.8.x-specific work on nanoc; secondly, the 3.6.8.x format would break semantic versioning.\n. It feels strange to yank a whole bunch of revisions simply because they don\u2019t have an explicit Ruby version (and they should theoretically all be 1.8.6+-compatible).\nI\u2019m more and more inclined to follow @bobthecow\u2019s idea of treating the current 1.8.x incompatibility as a bug, and accepting PRs to fix this. I believe we should not be actively working on fixing this ourselves though.\n. @mpapis It\u2019s OK to just leave it the way it is. It\u2019s not going to be easy to finish adding full 1.8.6 compatibility.\n. Can I get a +1?\n. Tests are passing on Travis CI, but GitHub isn\u2019t picking up the success. Odd!\n. CC @nanoc/contributors \u2014 +1s please\n. I\u2019d rather specify the 1.0.0+ version for Ruby 2.0:\nruby\nif RUBY_VERSION >= '2.0.0'\n  gem 'mustache', '~> 1.0'\nelse\n  gem 'mustache', '~> 0.99'\nend\n. Yup, this should be against release-3.7.x.\n. :+1:\n. This PR has major issues, and provides no value.\nNon-useful changes:\n1. Rearranging .gitignore is not useful.\n2. Adding .ruby-xyz files is not useful.\n3. Adding comments to .travis.yml is not useful.\n4. Changing the header of the README file is not useful.\n5. Adding installation instructions to the README is not useful, because nanoc already has installation instructions.\n6. Changing the nanoc command description is not useful.\n7. Rearranging the gemspec is not useful.\nBreaking changes:\n1. Explicitly setting Encoding.default_internal and Encoding.default_external.\n2. Removing Nanoc3.\n3. Un-deprecating the autocompile command.\n4. Un-deprecating the watch command.\nBoth autocompile and watch are deprecated in favour of guard-nanoc. I don\u2019t know why you wrote \u201cstop using guard-nanoc\u201d.\nInteresting changes:\n1. Adding osx to .travis.yml: interesting idea, but I\u2019m not convinced this is useful. nanoc has no OS-dependent parts. If anything, it should add Windows. I\u2019m more on the side of not adding OS X as a tested platform.\n2. Updating the release branch name. Although, since it\u2019s used as an example only, there\u2019s not all that much value to changing it.\n3. Adding # encoding: utf-8: perhaps useful, but then Rubocop config should be adjusted to take tasks and YARD handlers into account.\n. I\u2019ve recently switched to using the Ruby provided by Homebrew, but I could also have been using the default one provided by the OS.\nThere was a time where you almost needed to have multiple Rubies installed, but that time\u2019s pretty much past.\n. Uh oh, I think the source for that site isn\u2019t available anymore. There\u2019s no quick way to bring it back, but I\u2019ll probably pop it onto GitHub soon.\n. This is fixed by c83f120d9b8837a31d00cf691d0897fb27549514. I moved the site source to ddfreyne/myst-online-site.\nThanks for reporting!\n. Potential fix in #525.\n. Fixed by #525.\n. Yeah, I feel that the only solution to this would be to introduce an arbitrary :args param, as you suggested. I think I\u2019ll fix it like that; there\u2019ll be a PR incoming soon.\n. Potential fix in #535.\n. Fixed by #535.\n. There\u2019s no easy way to do this in nanoc, because what you\u2019d like to achieve doesn\u2019t fit in nanoc\u2019s conceptual compilation flow, where new items cannot be created after compilation has started.\nI\u2019d suggest creating a separate rake task for generating the index. A full compilation would then invoke nanoc, the index generation script, and nanoc again, pretty much the way LaTeX would do it.\nThis is something I\u2019d like to address for nanoc 4.\n. Also, please use the nanoc forum to get support. GitHub Issues is dedicated purely to issues and pull requests.\nI\u2019ll close this issue here for now.\n. @oddityoverseer13 It might be wrong, but it seems like what you\u2019re trying to do, is to ensure that the output has both \u2026/bin/push and \u2026/bin/push.rb files (same for ace). Is this correct?\nIn that case, I\u2019d remove the symlinks and set up redirects on the server to redirect push to push.rb (same for ace).\n. That makes sense.\nThis issue appears to be resolved, so I\u2019ll close it.\n. This has been proposed before (see nanoc/nanoc.ws#72, and the Trello card). I\u2019ll close this issue, but feel free to comment on the Trello card.\n. It seems your issue is quite similar to #527. Calculating the statistics and writing a summary can\u2019t be done with a filter, since after compilation has started, no new items can be generated. I\u2019d suggest moving the statistics calculation into its own Rake task, and run it separately from nanoc.\nAlso, please use the nanoc forum for support requests. GitHub issues is intended to be used for filing bugs. I\u2019ll close this issue here for now, but please do continue the conversation on the forum.\n. I think the bug is twofold:\n- There is no ability to define a custom sort order.\n- The documentation for atom_feed is incorrect, because it says the default for :articles is sorted_articles (should be articles).\nAs @bobthecow mentioned, solving this in a backwards-compatible way requires more work. I was playing with the idea of having a :sort_proc option, but I imagine @bobthecow\u2019s suggestion for an order-preserving option (e.g. :preserve_order) is simpler and easier to understand.\n. I created an issue for this: #533.\n. I\u2019ll close this PR now, since it doesn\u2019t solve the issue in a backwards-compatible way. Compatible implementations for #533 are definitely welcome though; if there are no takers, I\u2019ll likely work on it tomorrow.\n. Potential fix in #534.\n. CC @nanoc/contributors \u2014 would like a +1\n. Leaving a comment that says :+1: works!\nI just realised that the documentation isn\u2019t up-to-date. Will fix now.\n. The documentation is now updated. I\u2019ve marked the :args approach as recommended, since it\u2019s the most flexible and matches closely the way one would invoke Pandoc from the command line.\nAre you OK with the documentation?\n. \n. CC @nanoc/contributors \u2014 would like a +1\n. Will look into adding some tests for this. (Will be hard, I guess!)\n. Not being able to access the :pre snapshot seems like a bug to me.\nFirst of all, to avoid the issue you\u2019re seeing, you can use yield to get the content right before the layout is applied. For example:\nruby\n<% if yield.include? 'type=\"math/tex' then %>\nitem_rep.rb, line 247 has the check !self.compiled? && is_moving; if that expression is true, an unmet dependency error will be raised, resulting in the circular dependency issue. The reasoning here is that you should not be able to access any \u201cmoving\u201d snapshot (i.e. :pre, :post, or :last) from the item itself.\nThat check is accurate for the :post and :last snapshot, since these snapshots keep moving until the item is fully compiled.\nFor the :pre snapshot, this check can probably be relaxed, because :pre snapshots will not move again once they\u2019re created.\nSo, instead of this:\nruby\nif @content[snapshot].nil? || (!self.compiled? && is_moving)\n\u2026it\u2019d probably be possible to have this:\nruby\nif @content[snapshot].nil? || ([:post, :last].include?(snapshot) && !self.compiled?) || (snapshot == :pre && @content[:pre].nil?)\nI don\u2019t think there\u2019s any reasonable situation where yield would not be usable, though.\n. On second thought, my proposed fix doesn\u2019t work. This line:\nruby\nif @content[snapshot].nil? || ([:post, :last].include?(snapshot) && !self.compiled?) || (snapshot == :pre && @content[:pre].nil?)\nis equivalent to\nruby\nif @content[snapshot].nil? || ([:post, :last].include?(snapshot) && !self.compiled?)\nwhich clearly shows that :pre is not handled in a special way at all, even though it should, since it is a moving snapshot: just because a :pre snapshot exists, does not mean it cannot move in the future.\nThe only condition under which the :pre snapshot stops moving is when a :post snapshot is present. So, the condition could be as follows:\nruby\nif @content[snapshot].nil? || ([:post, :last].include?(snapshot) && !self.compiled?) || (snapshot == :pre && @content[:post].nil?)\n. To clarify: the final argument doesn\u2019t have a meaning other than \u201cthe output file can be written to disk\u201d\u2014it doesn\u2019t mark the snapshot as immovable. (In hindsight, probably not the best decision, but this could be difficult to change without breaking the API.)\nThe recommended solution is to use yield in a layout. In helpers used in layouts, that means passing in the content:\n``` ruby\nin the layout\n<%= snippet(yield) %>\nin lib/helpers/snippet.rb or so\ndef snippet(content)\n  if content.size > 100\n    content[0..99] + '\u2026'\n  else\n    content\n  end\nend\n```\n(This is a silly example, because there\u2019s an #excerptize function in the Text helper.)\nMaking compiled_content(snapshot: :pre) available in layouts might be tricky, since the logic for determining whether :pre is immovable is determined by the presence of :post, which will not be there at the time of the first layout.\nI\u2019m actually in favour of documenting the current behavior as well as the recommended approach to avoid the issue (in other words, don\u2019t use compiled_content(snapshot: :pre) in layouts, but use yield).\n. I\u2019ll look into improving this (i.e. making compiled_content(snapshot: :pre) possible within a layout), but it\u2019s definitely an enhancement rather than a bug fix, since the content is already available using yield.\n. Fixed by #538.\n. @jethrogb I\u2019m inclined to improve this in a future release rather than 3.8.0, and consider the fix that\u2019s currently in 3.8 as good enough. Accessing the :pre content from within a layout is not particularly useful because that content is already available through yield.\n. Full fix (work in progress) in #548.\n. Fixed by #548.\n. Can I get a code review?\n. Yeah, :pre is always usable.\nEdit: :pre is usable except in the item itself. See this comment.\n. @bobthecow This allows accessing :pre from the item itself, once :post is set. Previously, accessing :pre was only possible from other items.\n. @bobthecow Hm, re-reading the original question, I think my answer is misleading.\nFrom within the item itself, using :pre when there is no :post snapshot will lead to an exception (since you\u2019d recursively let compiled content depend on itself). When there is a :post snapshot, that works from within the item itself (since :pre cannot move anymore).\nWhen accessing the compiled content from another item, accessing :pre is possible even if there is no :post: nanoc will compile the accessed item first, guaranteeing that :pre is in its final position.\nThese moving pre-snapshots and post-snapshots are difficult to reason about and one of the reasons why they\u2019ll be gone in nanoc 4!\n. @gpakosz That\u2019s still not possible, but yield is intended to be used in that case anyway.\n. Hi,\nFirst of all, the nanoc forum is often a better choice for questions (as opposed to issues).\nThe recommended approach is to fill in the values during preprocessing. For instance, in Rules, you could do the following, reading from credentials.json:\nruby\npreprocess do\n  credentials = JSON.parse(File.read('credentials.json'))\n  config[:deploy][:default][:aws_access_key_id] = credentials['key']\n  config[:deploy][:default][:aws_access_key_id] = credentials['secret']\nend\nYou can also use YAML, or read from the environment, etc.\n. I\u2019ve seen this issue multiple times, and not just with nanoc. The cause is unclear; some people suggest gem cleanup cri or bundle clean --force.\nAre you running with bundle exec? Do you get the issue with bundle exec too?\nIn any case, I\u2019d say that the specific version of cri is correct; nanoc requires cri ~> 2.3.\n. I\u2019ll close this PR for now, because it\u2019s not the proper solution.\n. This issue is definitely on the radar to be fixed, although I don\u2019t think it\u2019ll ever land in nanoc 3.x. There are a few issues related to dependency tracking which I\u2019d like to fix in 4.0. Here\u2019s some Trello tickets:\n- Efficient outdatedness checking\n- Improved dependency tracking\n- Make adding items not cause entire site to be recompiled\nSome of these overlap in some way. There is also the fine-grained dependency tracking based on attributes, which I think isn\u2019t yet codified in any Trello card (strangely enough).\nI did take a stab at implementing fine-grained dependency twice in nanoc 3.x, and it\u2019s really quite difficult to get right. The algorithm, which already is complex, becomes even more complex. Because of this, I\u2019d like to tackle it in nanoc 4.x, where there\u2019s no requirement to remain backwards compatible in any way.\nAs for nanoc 4.x\u2026 even though I haven\u2019t touched it in a while, it\u2019s not a cancelled project. I\u2019m taking a break. There are some fundamental issues that I\u2019d like to solve, and I haven\u2019t really had the energy to start working on that.\n. Didn\u2019t mean to close this, but I suppose it\u2019s not a bad thing. I\u2019ll link to this issue from a new Trello card.\n. This now lives in this Trello card.\n. A good idea!\nThis shouldn\u2019t be too difficult to implement. Off the top of my head, I think the following changes will need to be made:\n- The existing links collector will probably need to be updated to capture some context (img src, a href, link href, \u2026) so that it can restrict itself to included resources only.\n- The base URL will need to be set in the site configuration so that the checker knows whether a URL is acceptable.\n. You can take a stab at implementing this if you want!\n. This looks good! I\u2019ll do a more in-depth review soon, but I\u2018m quite liking it so far.\n. The style checks are failing. Apparently, they\u2019re also failing on other parts of the code\u2014I\u2019ll fix it; ignore the style test results for now.\n. Can you rebase onto master? That should fix the style issues (at least the ones that are not your fault, heh).\n. Looks good otherwise!\n. Cool! OK to squash. I\u2019ll properly test it out tomorrow and will merge it if it\u2019s OK!\n. Thanks!\n. I\u2019m in general not opposed to merging this, but I also feel it doesn\u2019t belong in the root. Perhaps a tools dir, with Vagrantfile.sample in it? This way, it would be more clear that using Vagrant is not the recommended way, while still giving the opportunity to use it with a premade Vagrantfile.\nFYI, I got rid of rvm/rbenv/chruby entirely and now only use Homebrew-installed Ruby. So much simpler.\n. @jugglinmike I think there are too many options for developing Ruby apps. Some would suggest rvm, others rbenv, others chruby, others Homebrew\u2019s Ruby, others system Ruby, others several Vagrant images with different Rubies, etc.\nI suppose this Vagrantfile applies to most Ruby projects, not necessarily just nanoc. Because of this, I feel that the Vagrantfile doesn\u2019t belong here.\nI\u2019ll close this issue for now, but I\u2019m definitely interested in following up.\n. Interestingly, Gemfile does have Minitest locked to 4.x:\nruby\ngem 'minitest', '~> 4.0'\nIt seems like Minitest 5.x takes precedence in your setup, which is odd. Are you running rake or bundle exec rake? (The latter is correct.)\n. That makes sense!\nWe\u2019ll upgrade to Minitest 5.x at some point, but it\u2019s not high prio. PRs welcome :)\n. See #546.\n. @jethrogb This is the fix you\u2019re looking for, I believe.\n. CC @nanoc/contributors \u2014 would be great to have a review, so this can end up in the upcoming release!\n. @jethrogb Yeah. It is confusing, I have to admit.\nThe @snapshots instance var is filled in by Nanoc::Compiler#compile_reps. It runs through the Rules file, detects all snapshots and stores them inside Nanoc::ItemRep instances. The names of the snapshots are used solely to detect whether the snapshot given to #compiled_content is one that exists.\nThis is definitely a candidate for refactoring!\n. Could you elaborate on the issue you had where nanoc didn\u2019t properly detect a site already existed? It should error out if the given destination directory already exists (even if it\u2019s a file instead of a directory).\nI\u2019m uncertain whether this enhancement is useful, for two reasons:\n- The current behavior seems clear to me, even if it doesn\u2019t match the behavior of git. There\u2019s not much additional value to defaulting to the current directory.\n- The current behavior does not match the behavior of git on purpose: creating a site in the current directory might create a lot of new files, potentially overwriting some, and undoing that is a pain.\n. Being able to create a site into an empty directory (which fits your use case) seems useful. I\u2019d change the if File.exist?(File.join(path, 'nanoc.yaml')) check (formerly if File.exist?(path)) to be a little safer, though. I recommend checking whether either the file does not exist at all, or is an empty directory:\nruby\nif File.exist?(path) && (!File.directory?(path) || Dir.entries(path) != ['.', '..'])\n  # \u2026\nend\nI prefer to have the second argument be mandatory. Having a default argument is confusing.\nAlso, I\u2019m afraid I\u2019ve done some work on the create-site command and your changes are not longer mergeable. Could you rebase onto master?\n. If you mean an interactive prompt, then I\u2019d say \u201cno\u201d, simply because there are no interactive parts in the nanoc CLI elsewhere.\nPrinting a warning and aborting when the given directory exists and is not empty makes sense. I\u2019d say that message could say this:\n\nThe given directory, (full path here), exists and is not empty. If this is truly where you want the nanoc site to be created, re-run this command with --force.\n\nAlso, a new --force that overrides the non-empty-directory check.\n. :+1:\n. Build on master is failing but that\u2019s unrelated to this PR (and I can\u2019t even reproduce it locally\u2026)\n. Got a +1 before the extra tests, so I\u2019m assuming that\u2019s fine now too. I tested it and it works anyway :)\n. This is likely due to a too new version of Listen. But yes, use guard-nanoc. :)\n. @bobthecow I\u2019ll come up with a list of places where I\u2019d like to emit deprecation notices. watch is one of them.\n. @bobthecow With the removal of create-item and create-layout commands along with matching #create_item and #create_layout commands, I don\u2019t think it would be useful to have sync and update in commands; you\u2019d have all the necessary code in your own sync implementation, and then the plugins would have almost no code at all. Does that make sense?\n. watch and autocompile are deprecated already (emit a warning).\nAs for create-item and create-layout, I\u2019m not sure what kind of message we could emit (if anything).\n. Adding deprecation warnings to everything that has changed/removed will be a lot of work, and the upgrade guide already covers all changes. I\u2019m not sure I see a big benefit!\n. :+1:\n. Good point. I added this:\n\n{foo,bar}\nMatches either string in the comma-separated list. More than two strings are possible. For example, /c{at,ub,ount}s.txt matches /cats.txt, /cubs.txt and /counts.txt.\n. Tests pass locally. I\u2019ll merge; a +1 afterwards is fine too. There\u2019s some more work that I\u2019d like to do and it depends on this!\n. Works like a charm for nanoc.ws (see nanoc/nanoc.ws#90).\n. As for child-parent relationships: I think I\u2019ll disable those for new-style identifiers. They don\u2019t make sense anymore; the parent is not necessarily unique, and children are ambiguous.\n\n/foo.md\n/foo.html\n/foo/donkey.md\n/foo/giraffe.md\nThe parent of both /foo/donkey.md and /foo/giraffe.md could be /foo.md or /foo.html, and similarly, the children of /foo.md and /foo.html could both be /foo/donkey.md and /foo/giraffe.md.\n. Idea: AttributesView that wraps attributes.\n. See fix in #572.\n. Fixed in #768.\n. Merging this! You can give me a :+1: later.\n. Again, you can give me a :+1: later :)\n. Nope. It only affects 4.x.\n. Fixed in 5316575 by removing the base_url.\n. I\u2019m quite tempted to not do anything about the code duplication for the time being, since it\u2019d likely end up refactoring Nanoc::Int::ItemArray, which I\u2019d like to avoid as long as 3.x is still the main stable version.\n. Fixed by #584.\n. Looks nice so far!\nFor an even better user experience, you could check whether path is a directory, and if it is, allow a site to be created with --force; it if is not a directory, don\u2019t allow the site to be created (it would fail anyway).\n. You\u2019ll have to rebase on top of master; the other PR conflicts with this one.\n. All good except for the message itself. \u201cA site already exists\u201d is incorrect. I propose the following:\n\nThe site was not created, because #{path} already exists. If you really want to create a site in this directory, re-run this command with --force.\n\nWhat do you think?\n. Thanks!\n. This isn\u2019t working out as well as I had expected. Mustache integration is making it difficult, too.\n. Will revisit this some other time.\n. Fixed by #592.\n. Here\u2019s an alternative Rules file that is more extensible. Important changes:\n- It generates clean URLs for HTML files.\n- It also includes a .rdoc extension, because I believe it is a good idea to introduce the concept of filtering by extension, and RDoc is part of Ruby anyway, so there are no external dependencies.\n- It handles /index.* files properly.\n``` ruby\ncompile '//.html' do\n  layout '/default.'\nend\ncompile '//.rdoc' do\n  filter :rdoc\n  layout '/default.'\nend\ncompile '/*/' do\nend\nroute '//.{html,rdoc}' do\n  if item.identifier =~ '/index.'\n    '/index.html'\n  else\n    item.identifier.without_ext + '/index.html'\n  end\nend\nroute '/*/' do\n  item.identifier.to_s\nend\nlayout '/*/', :erb\n```\nThis could come with a content/sample.rdoc file with these contents:\n```\ntitle: Sample page\nThis is a sample page that uses {RDoc markup}[http://docs.seattlerb.org/rdoc/RDoc/Markup.html].\nMarkdown is a more common choice for markup, but RDoc is bundled with Ruby.\nYou are free to delete this page or replace it with something else.\n```\nAlso, rdoc is missing from text_extensions by default. I guess that should be fixed.\n. I prefer http://nanoc.ws/about/ over http://nanoc.ws/about.html. The former is easier to read, and also easier to remember/type.\nWith nanoc\u2019s routing rules, it\u2019s still pretty easy to not use this approach (some people prefer about.html).\n. Potential fix in #591.\n. Fixed by #591.\n. Fixed by #590.\n. I also got carried away and simplified file writing \u2014 see 581b7cca59a4d3899405eb66a64f3cbf6421df49.\n. I think the comment for the RDoc rule should be altered somewhat. It is currently this:\n\nThis is an example rule that matches RDoc (.rdoc) files, and filters them\n using the :rdoc filter. A newly created site comes with one RDoc-formatted\nfile, content/samples.rdoc, for demonstration purposes.\n\nI believe this will be more clear:\n\nThis is an example rule that matches RDoc (.rdoc) files, and filters them\n using the :rdoc filter. A newly created site comes with one RDoc-formatted\nfile, content/samples.rdoc, for demonstration purposes. If you do not need RDoc,\nfeel free to remove this rule as well as the content/samples.rdoc file.\n. Oh, it also needs to tell to replace {html,rdoc,md} with just {html,md}.\nThis is an example rule that matches RDoc (.rdoc) files, and filters them\n using the :rdoc filter. For demonstration purposes, a newly created site\ncomes with one RDoc-formatted file (content/samples.rdoc).\nIf you do not need RDoc, feel free to remove this rule, the content/samples.rdoc file,\nand replace {html,rdoc,md} with just {html,md}.\n\nThat\u2019s getting pretty wordy. :(\nHaving thought about this some more, I think I would rather not have anything RDoc-like in there by default. Nobody uses it (I know, because nobody complained about rdoc not being in text_extensions). Everyone uses Markdown instead.\n. Yeah, I think I\u2019ll do it that way.\n. RDoc stuff removed. To review!\n. More ideas for identifiers:\n- identifier_type: with_ext\n- identifier_type: without_ext\nAnd for patterns:\n- pattern_type: glob\n- pattern_type: legacy_wildcard\n- pattern_type: legacy\n(I prefer _type more than syntax/style.)\n. I\u2019ll follow up with a second PR that changes the names to what @bobthecow suggests.\n. See #593.\n. Hm, two things:\n- The constructor of Nanoc::Identifier has an optional :style argument. It currently defaults to \"legacy', but that\u2019s not what we want. Maybe having it mandatory (as :type) makes sense, or we default to \"full\".\n- pattern_type might be better as string_pattern_type. Regexes are also patterns, but pattern_type doesn\u2019t apply to that.\n. Letting it default to :full seems like it belongs in a separate PR. I agree though.\nIs this PR good to go?\n. Oh yeah, hm, I would like to replace pattern_type with string_pattern_type.\n. Renamed.\n. Merged. Hope it\u2019s good :)\n. Rebased onto master, ready to review.\n. Build fails because of some JRuby oddness. I restarted the build.\n. Well, I am not sure there is much I can do about #fnmatch crashing with a Java ArrayIndexOutOfBoundsException (except report it).\n. Can\u2019t reproduce the issue locally. I marked JRuby 9000 as an allowed failure, because it failing doesn\u2019t necessary imply a bug in nanoc.\n. Post-merge +1s are OK :)\n. Any place that doesn\u2019t explicitly refer to the command-line executable, I believe.\n. Updated site: nanoc/nanoc.ws#110\n. This is now done. I also sent an announcement e-mail to the group.\n. This means we can also get rid of the # encoding: utf-8 all over the place!\n. I don\u2019t think it makes sense to use the null object pattern here. None of the methods (#[], #identifier, #compiled_content, \u2026) make sense for a NullItemView and they\u2019d probably just raise an error, at which point having a nil instead of a NullItemView is more obvious and less work.\n. I\u2019m OK with letting guard-nanoc use internal nanoc APIs. I\u2019d rather not open up APIs publicly just for a single purpose; additionally, further down the road, Nanoc will hopefully gain better incremental processing which would obviate the need for this anyway.\nClosing as a \u201cwon\u2019t fix\u201d issue.\n. It turns out UTF-8 has been the default since Ruby 2.0\u2014meaning even if we don\u2019t set the minimum version to 2.2, the magic comments can still go.\n. Things in Ruby 2.1 and 2.2 that I\u2019d like to make use of:\n- Optimized frozen strings (\"string\"f)\n- Keyword arguments\n- Refinements\n- Process.setproctitle (just for fun)\n. @cdlm Yes. Ruby 2.0+\u2019s default encoding for source files is UTF-8, but the external encoding isn\u2019t. The encoding: UTF-8 in the configuration file refers to the external encoding to use when reading files, not to the encoding of source files.\n. This is a little tricky since ddplugin no longer has support for autoloading, which is necessary for nanoc 4.\n. Won\u2019t fix (at least not for now).\n. CC @cdlm \n. This PR isn\u2019t quite as extended as I would have liked, but it does improve the code quality a little bit and I will definitely continue to iterate on this.\n. My attempt at not refactoring too much before the final 4.0 release isn\u2019t really working out well, but I hope it\u2019s for the better :)\n. Custom RSpec matchers are :heart: though.\n. Ah, that\u2019s not quite right. Will fix.\n. Potential fix in #631.\n. @cdlm Will close not, but please double-check if the issue is truly solved for you.\n. Updated with feedback.\n. I\u2019ll merge this now, but additional feedback (like :+1:s) is still welcome.\n. The show-rules command spec isn\u2019t the prettiest, but at least the command is now tested (it wasn\u2019t before).\n. It turns out that the problem I saw with the original (reverted) PR was some local changes made to the nanoc.ws site\u2014not with the code in nanoc.\nTaking the time to write better tests in this PR anyway!\n. nanoc uses both FNM_PATHNAME and FNM_EXTGLOB options:\n``` ruby\nopts = File::FNM_PATHNAME | File::FNM_EXTGLOB\nFile.fnmatch(\"/projects/*/.md\", \"/projects/nanoc/history.md\", opts)\n=> true\nFile.fnmatch(\"/projects/*/.md\", \"/projects/nanoc.md\", opts)\n=> true\n```\nFrom the documentation of FNM_PATHNAME:\n\nIf the FNM_PATHNAME flag is set in flags, then a slash character ( '/' ) in string shall be explicitly matched by a slash in pattern; it shall not be matched by either the asterisk or question-mark special characters, nor by a bracket expression. If the FNM_PATHNAME flag is not set, the slash character shall be treated as an ordinary character.\n. Now I\u2019m a little confused myself, to be honest. Will see what I can do about this from a documentation POV.\n. The Git 1.8.2 release notes describe ** as follows:\n\nThe patterns in .gitignore and .gitattributes files can have **/,\n  as a pattern that matches 0 or more levels of subdirectory.\n  E.g. \"foo/**/bar\" matches \"bar\" in \"foo\" itself or in a\n  subdirectory of \"foo\".\n\n\nThis is far more clear.\n. FYI: nanoc does use Ruby\u2019s fnmatch, but I\u2019d rather not explicitly mention that, because it is likely that at some point, the implementation will be swapped out in favour of something that is datasource-aware and thus more efficient.\n. Makes sense!\nI\u2019ve created a PR for the web site to improve the explanation around the **/ pattern: nanoc/nanoc.ws#100\n. Not sure how to test this (is this even testable?)\n. ~~FYI, CodeClimate actually says the new code is worse.~~ Edit: Because I\u2019m silly.\n. Experiment results: refinements work, although I don\u2019t know how performant they are, and I don\u2019t think it improves over the original code.\n. Doesn\u2019t provide any real benefit; closing.\n. @bobthecow I agree with what you said, but think \u201cbeing a jerk\u201d is too loosely defined.\nI\u2019m in favour of applying the contributor covenant (also see its GitHub repository).\n. @Ajedi32 My reason for having a code of conduct is in order to make everyone feel welcome to contribute. There\u2019s a great deal of unconscious bias in the open-source community, and this is an effort to increase diversity.\n. Done:\n- nanoc/nanoc#667\n- nanoc/nanoc.ws#111\n. Can you try GitHub master? This issue has been fixed in master (#633) so that should work for you now.\n. @andydrop I\u2019ll close this now, but please do let me know if you still experience issues.\n. Fixed in 96d6a5c40766bebd43c351d3f8701bf297871503. I strongly believe that there won\u2019t be any release candidates anymore, so this is no longer blocked.\n. @gpakosz In English, proper nouns are capitalised. I called this project \u201cnanoc\u201d, which deviates from tis rule. It causes needless confusion, and most people already call it \u201cNanoc\u201d.\nAdditionally, names that start with a lowercase letter are capitalised when they appear at the beginning of a sentence. This make sense as starting a sentence with a lowercase letter makes it harder to distinguish between sentences.\nAll in all, picking Nanoc as the project name makes life easier for everyone.\n. The executable would still be called nanoc (not Nanoc).\n. The web site will be updated in a separate PR.\n. Replaced by #668.\n. :+1:\n. FYI, this will land in nanoc 4.1, since nanoc 4.0 is feature-frozen.\n. Build on Travis CI fails because Less segfaults. Will fix later.\n. Yeah, definitely something fishy going on here\u2026 I think allow_periods_in_identifiers should be considered to be false when for full identifiers.\n. I\u2019ll think about this a bit more though.\n. I\u2019m a bit torn on what the correct behavior should be. For example, Ruby\u2019s built-in method for getting the extension of a filename (which is used by Nanoc::Identifier) does not take multiple extensions into account:\n``` ruby\nFile.extname('toto.html.haml')\n=> \".haml\"\n```\nI could let Nanoc::Identifier take an option that determines whether or not the identifier is treated as having potentially multiple extensions. For instance:\n``` ruby\nNanoc::Identifier.new('/toto.html.haml', multiple_extension: true).ext\n=> 'html.haml'\nNanoc::Identifier.new('/toto.html.haml', multiple_extension: false).ext\n=> 'haml'\nNanoc::Identifier.new('/toto.html.haml').ext\n=> 'haml'\n```\nThis approach feels a little strange since this effectively moves the configuration inside the individual identifiers, meaning that different identifiers can have different behaviors in this regard.\nThe current allow_periods_in_identifiers configuration option is part of the filesystem data source. This means that different data sources can (even in nanoc 3) return identifiers that look differently. This inconsistency would remain in nanoc 4, and would get more subtle (identifiers look the same, but don\u2019t behave the same), which I believe is worse.\nFilesystem is one of potentially many data sources, so letting Nanoc::Identifier depend on the behavior in Filesystem is not realistic.\nThe allow_periods_in_identifiers configuration option could be moved out of the data source config into the global config. This is tricky because identifiers then need a reference to the site configuration, which is hard to provide at the time of construction, and adds another dependency, which complicates things and will eventually lead to confusion.\nAn alternative could be to let the #with_ext and #without_ext methods take a param that determines whether or not all extensions should be considered:\n``` ruby\nNanoc::Identifier.new('/toto.html.haml').with_ext('html', multiple_exts: false)\n=> '/toto.html.haml'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html', multiple_exts: true)\n=> '/toto.haml'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html')\n=> '/toto.html.haml'\n```\nIn order to minimise confusion, I\u2019d let the combination of allow_periods_in_identifiers + full identifiers raise an exception.\nDoes this sound reasonable?\nEdit: Fixed typos in the last code block.\n. > However did you mean: [snip]\nYup. I\u2019ll update the original content; my mistake!\nHere\u2019s an alternative approach:\n- #exts method (returning a list of extensions)\n- #without_exts (removes all extensions)\nOne could then replace all extensions using without_exts.with_ext('html'). It would make your #split_ext a little easier to implement (although it wouldn\u2019t replace it completely).\nThe reasoning for this altnernative approach is that I find that the multiple_exts argument to #with_ext is confusing.\n``` ruby\nNanoc::Identifier.new('/toto.html.haml').without_exts.with_ext('html')\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').without_ext.with_ext('html')\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html')\n=> '/toto.html.html'\n```\nThe first and the second case are actually identically, because #with_ext changes the existing extension if one is present. Confusing, sadly.\n. With the addition of #without_exts and #exts, and the removal of #with_ext, I think this issue is now solved. I\u2019ll close it, but please do let me know if you think there\u2019s still something unresolved!\n. Fixed in #669.\n. Replaced by #669.\n. Fixed by #673.\n. Thanks for the fix!\nThe way the CLI is tested right now is unfortunately a little brittle. I\u2019ll look into improving this, so that every command is tested at least on a high level by ensuring that invoking the command works.\n. I\u2019ve opened #672 which contains this fix + a high-level test.\n. A fix is to replace identifier.split with identifier.to_s.split, but considering this is fairly common use case, I believe Identifier either needs to support #split (just like String#split), or gain a #components method, which would do the splitting by slash.\nSee also this thread.\n. See #677 for an implementation of #components. Does this fit your use case?\nI\u2019m more in favour of not adding #split to Identifier, and rather go with the identifier.to_s.split approach. (Until #components is available, that is.)\n. I\u2019ll close this issue, because I\u2019d prefer not to have #split on Identifier, and the upgrade guide\u2019s troubleshooting section explains this already.\n. > Should we use !ruby/regexp or store them as plain strings?\nI think I prefer strings.\n\nIf stored as plain strings, are there corner cases when trying to converting them to real regexps in order to filter Kramdown's @warnings array?\n\nNot that I know of\u2026 Regexp.new(string) should work.\n. It will also be necessary to specify the location of the tmp directory\u2014something which I assumed was already implemented, but I was mistaken.\n. With #859 being done, I feel that this issue can now be closed.\n. Still unsure whether the components of / should be an empty list, or a list with an empty string.\n. Makes sense!\nYou can create a PR (on master) if you want to.\n. Fixed by #686.\n. @barraq Since an identifier is used to identify items/layouts, and these methods are used for creating an output path to which the item should be written to, I don\u2019t feel that these methods should return an identifier.\nThey could potentially return a \u201cpath\u201d entity, but I feel that a string is more appropriate.\n(I don\u2019t like Pathname for this purpose, because it has methods that are really not appropriate in a Nanoc context, such as #rmdir and #rename, and I feel that the API is generally clunky. #extname is a strange method name, and inconsistent with #sub_ext.)\nI also feel that the behavior of #with_ext is a little odd. Perhaps it needs to be replaced with #replace_ext (replaces a single extension), #replace_exts (replaces all extensions), #remove_exts (removes all extensions), and #add_ext (which appends an extension).\nI do feel it\u2019s a little late in the Nanoc 4 design process (release candidate!) to change this behavior still. But then again, I\u2019d rather have this discussion now rather than after the final release.\n. Sorry for getting back to you with such a delay! I got held up by other things.\n\nActually if you want to be able to chain #without_exts.with_ext, \u2026\n\nPerhaps it makes no sense to allow this, and go with a simpler approach where we only have #without_ext/#without_exts and #ext/#exts. Adding an extension could be done using #+, like this:\n``` ruby\nNanoc::Identifier.new('/toto.html.haml').without_exts + '.html'\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').without_exts + '/index.html'\n=> '/toto/index.html'\n```\nWhat do you think?\n\nYou can still keep #with_ext for backward compatibility (and warn users that it is deprecated)\n\nI\u2019d prefer to not introduce deprecations in 4.0.0 final, but there could be an appropriate error message when using #with_ext in Nanoc 4 release candidate 3.\n\n\nI do feel it\u2019s a little late in the Nanoc 4 design process (release candidate!) to change this behavior still. But then again, I\u2019d rather have this discussion now rather than after the final release.\n\nI understand... do you have an idea on how much people already switched to Nanoc::4 ? I guess that if we do these changes now it will not have such a negative impact... Also these changes are not braking anything if we keep #without_ext and #without_exts for compatibility purpose, right ?\n\nI\u2019ll probably make this breaking change anyway, because it seems worth it to me.\n. FYI, this PR gets a :+1:\u2014the discussion about what to do in addition to this work.\n. Ah\u2014could you make this PR on release-4.0.x instead? This way, it\u2019ll end up in 4.0 rather than 4.1.\n. Fixed by #694.\n. Same as #685 I believe.\n. This is tricky to fix, because if #link_to receives nil (obtained from @items[] presumably), it doesn\u2019t know what to link to.\nA solution would be to let @items[] return a null object that remembers its criteria, but mimicking a null object is not something I would like to do in Ruby. :(\nThinking about leaving it as-is for now. This is not a bug in nanoc. @pitosalas If you disagree, please let me know and I\u2019ll reopen the issue!\n. Same as #684 I believe.\n. Makes sense. Combined with an internal_links deploy-time check, the chance of ever deploying a site that is not properly styled is very low.\n. Fixed by #701.\n. Looks good. Thanks!\n. I think it would make more sense to let base_url be optional, and not generate a link if a base_url is not provided.\n. This looks good! Could you make sure to update the tests too?\n. Looks good. Thanks!\n. Glad to see it resolved!\nThere\u2019s also the character encoding troubleshooting page, but it does not mention this particular error. I\u2019ll update it.\n. OK, glad it\u2019s solved!\n. @laveesht Do you use the new identifier style? In other words, does your configuration file have identifier_type: full?\nIf so, then the parent for all items will be nil, since parents are no longer supported in nanoc 4 for new-style, \u201cfull\u201d identifiers.\nYou can still fetch the parent of an item this way:\nruby\n@items[@item.identifier.to_s.sub(%r{/[^/]+\\z}, '') + '.*']\nThe pattern generated this way matches any parents, e.g. for /foo/bar.md it would generate /foo.*.\n. There\u2019s the upgrade guide, but it apparently does not mention the parent change. Will fix; see nanoc/nanoc.ws#124.\n. Are you using the most recent W3C validators gem? It sounds more like a problem within that gem rather than with nanoc itself.\n. This seems like an issue that\u2019s not inside nanoc but in the W3C validators gem.\nDoes the gem directly (without using nanoc) work?\n. Doesn\u2019t look like the repo is active anymore. :/\nI\u2019ll close this issue since the problem is not within nanoc, but rather a dependency.\n. Looks good, thanks!\n. I created a separate ticket to track ideas around the #with_ext confusion here: #697. Open to suggestions; nothing\u2019s been decided yet.\n. Fixed in #700 by removing #with_ext.\nI figured #replace_ext and/or #replace_exts is not very useful considering #+ already exists. If it turns out to be a nice-to-have, it might arrive in 4.1.\n. Makes sense! If you feel inclined, a PR (on master) would definitely be welcome.\n. Moved to nanoc/features#1.. Fixed by #702.\n. Will merge; feel free to give me a +1 afterwards.\n. I\u2019m inclined to say that this is not the purpose of the Rules file, and I believe a better approach would be to add attributes to the site configuration, items and layouts, and parameterise rules that way, so that there\u2019s no need to generate rules programmatically.\nAn additional challenge with generating rules is that it gets rid of a central place where all rules are stored. This can make it difficult and confusing to find out which rules actually exist, and which rules are used for a given item/layout.\nHaving said that, there is #include_rules, which, given a file name, will include the rules in the file with that name.\n. Moved to nanoc/features#2.. This wouldn\u2019t work out of the box without breaking backwards compatibility, but it could work with a param like :append:\nerb\n<% content_for :head, append: true do %>\n   <script src=\"...\">\n<% end %>\nvs\nerb\n<% content_for :head, append: false do %>\n   <script src=\"...\">\n<% end %>\nvs\nerb\n<% content_for :head do %>\n   <script src=\"...\">\n<% end %>\n(default: replace rather than append)\n. It\u2019s not possible to change the current behavior without breaking backwards compatibility, and since Nanoc 4 is so close to a final release, this behavior is not going to change before Nanoc 5.0.\n. FYI, I\u2019d certainly welcome a PR that adds the new functionality (in a backwards-compatible way); it\u2019ll end up in Nanoc 4.1 if you do so!\n. I\u2019m OK with a change in behavior in 5.0!\n. This behaviour has been around since Nanoc 2.x, and it\u2019s intentional, so calling it a bug and changing the behaviour won\u2019t work.\nWhat could be considered a bug is that the current behaviour silently overwrites previous content. I\u2019m OK with a change that makes it raise an exception rather than overwrite content.\n. Yes!\n. See #744 for an implementation of #content_for where the behavior is customisable (error, append, overwrite).\n. Absolutely!\nBy the way, I started working on a branch to upgrade the GitHub developer site to Nanoc 4, but haven\u2019t touched in a couple of months. (Opened as a PR on my own repo, rather than GitHub\u2019s, so I can keep track of progress without creating noise.)\n. Sounds exciting! :)\nNanoc 4.0 is in a feature freeze, but I think the wait until 4.1 won\u2019t be that long. The 4.0 release will show all sorts of missing nice-to-have things that\u2019ll end up in 4.1 quickly enough!\nOn one hand, Nanoc 4 (when using the new identifiers and new globs) will be slower than 3.x, but it also offers much more potential for optimisations, which will end up in later minor releases.\n. Oh, the lack of unit tests for ConfigView is an oversight on my part. I\u2019ll fix in a future PR, but for now, I\u2019m merging this!\n. So apparently there are ConfigView tests\u2014except that they\u2019re confusingly in spec/nanoc/base/views/config_spec.rb rather than \u2026/config_view_spec.rb. So I renamed the files (f0cdb83) and added a test (aacdc00d9423cf487cb57f7e249c13b3ce967a86).\n. Items that use the new identifier_type: full rather than identifier_type: legacy do not have parents nor children. The child-parent relationship is ambiguous in some cases, such as here:\n/foo.html\n/foo.md\n/foo/bar.md\nThe parent of /foo/bar.md is unclear, and so are the children of /foo.html and /foo.md.\nIn the past, I\u2019ve used the following snippet to find the parent, although it does suffer from ambiguity. It replaces the last segment with a .* glob, and performs the find that way. It actually finds the first existing ancestor, which may or may not be what you want.\n``` ruby\ndef find_parent(identifier_string)\n  parent_glob = identifier_string.sub(%r{/[^/]+\\z}, '') + '.*'\nparent = @items[parent_glob]\n  if parent\n    parent\n  elsif parent_glob != '.*'\n    find_parent(parent_glob)\n  else\n    nil\n  end\nend\n``\n```\n. Also see nanoc/nanoc.ws#124 \u2014 there is no documentation around this change, and it is causing confusion (as you know).\nOK to close this ticket and retain nanoc/nanoc.ws#124?\n. Also see #709\u2014rather than returning useless data, these two methods should error.\nI\u2019ll close this ticket now, but feel free to comment if you believe the problem lies elsewhere.\n. Potential fix in #710.\n. CC @nanoc/contributors \n. Having a post-process block has been on the wishlist for a while. The wiki page containing the archived Trello board even has a Postprocess section.\nWhat\u2019s your use case specifically?\nA postprocess block could be as simple as a block that\u2019s executed at the end. For instance:\nruby\npostprocess do\n  @items.each do |item|\n    $search_index.update(\n      item.path,\n      item.compiled_content(snapshot: :last),\n    )\n  end\nend\nThis could be extended by letting item instances (and item rep instances) within the postprocess block have #updated? and/or #created? methods, so you can act on updated/created items only. For instance:\nruby\npostprocess do\n  @items.select(&:updated?).each do |item|\n    $search_index.update(\n      item.path,\n      item.compiled_content(snapshot: :last),\n    )\n  end\nend\n. Makes sense, thanks!\n. Could you add tests for this, and remove the commented-out code?\n. Thanks!\n. Thanks for spotting! This\u2019ll be for the Nanoc 4.0.1 release (4.0.0 is ready to be released and I\u2019d rather not touch it anymore).\n. Fix in #722 \u2014 give me your :+1:!\n. Fix will be in 4.0.1.\n. Yes\u2014the documentation is generated from the source code annotations, but that does mean that the documentation will stay the same until 4.0.1 is released.\n. Given that:\n- Ruby 2.0 only receives security updates and will go end-of-life early next year (source)\n- Nanoc 4 (to be released Soon\u2122) will require Ruby 2.2 and up\n- This is not a bug in Nanoc but in Ruby\nI\u2019d say that this issue can be closed with the proposed fix being \u201cupgrade to the latest version of Ruby\u201d.\nThanks for the thorough investigation!\n. I\u2019m about to release Nanoc 4.0 (this weekend, hopefully!) so I don\u2019t think there\u2019s much of a point to add this to the troubleshooting page.\n. I suggest master, since it\u2019s an enhancement and so it should end up in the next minor Nanoc release, which will be Nanoc 4.1.\nNanoc 4.0 is in feature-freeze and pretty much ready to be released, which will happen very soon. A Nanoc 4.1 alpha will be out around the same time of the 4.0 release.\n. Will close in favour of #717.\n(There\u2019s also the Contributing code section on the web site, which has a focus on Nanoc 4 and doesn\u2019t mention the release-3.8.x branch.)\n. Looks good!\nI realised that there\u2019s no tests for #attribute_to_time\u2014not sure how that happened, but presumably it\u2019s because this function is tested implicitly. If you want to, you can create a spec for this function. If not, feel free to say no\u2014I\u2019ll take it up soon!\n. I went ahead and added a spec myself\u2014hope you don\u2019t mind! You can find the commit at https://github.com/nanoc/nanoc/commit/df20f2eb2b908d0647f141dd39e8594f90c91e8f.\nSome notes (for learning):\n- mod is an instance of a class that includes Nanoc::Helpers::Blogging. It\u2019s a little unusual, because testing a module directly isn\u2019t that simple.\n- subject defines what needs to be tested: in this case, mod.attribute_to_time(arg), where arg is the argument which takes on different values in the different contexts.\n- context defines different context\u2014called with Time, Date, DateTime and String. If the method under test would\u2019ve accepted an integer, with a Unix timestamp, there\u2019d also be a context testing an int.\n- let gives arg a value.\n- it { is_expected.to eql(something) } describes what the subject (meaning the return value of #attribute_to_time called with arg\u2014i.e. what was defined using subject) is expected to be. This is where the actual checks are. This is a shorthand form for the following:\nruby\n  it \"returns a correct Time instance\" do\n    expect(subject).to eql(something)\n  end\nI quite like RSpec. The Better Specs site is very helpful for making the best use of RSpec. Nanoc 3.x used Minitest, but I\u2019m migrating parts to RSpec, and new specs are all written using RSpec.\n. There\u2019s a follow-up PR here: #724 \u2014 turns out the original code did not properly tackle timezones, and Travis CI builds failed.\n. I think this is a bug in Nanoc. I assume an instance of Fog::Collection is expected, but it turns out to be an Array, possibly due to the files += set.\nReplacing\nruby\nkeys_to_destroy = files.all.map(&:key)\nwith\nruby\nkeys_to_destroy = files.map(&:key)\n(i.e. removing the call to #all) might do the trick. After all, files is an instance of an Array subclass, so the #all shouldn\u2019t be needed. Can you verify whether this works for you?\n(I find that fog code is a little tricky to test.)\n. I\u2019ll provide a proper fix for this issue soon\u2014will mention you in the upcoming PR!\nI think it makes sense to print the filename of every file that\u2019s uploaded. (No need for a verbose flag, I think.)\n. Fixed in #739.\n. Could you make this PR on release-4.0.x instead? This way, it\u2019ll end up in 4.0.1.\n. Ah, correct. :)\n. Wrong branch (needs to be release-4.0.x, not master).\n. I think that there\u2019s no other way than to specify '/' separately, but I\u2019ll have to check. This is definitely something that needs to be described in the upgrade guide though.\n(I think I missed this because I always have the root page specified differently.)\n. I created nanoc/nanoc.ws#133 to cover the case of upgrading a rule that matches /.\nI\u2019ll close this issue now, but feel free to shout if I missed anything.\n. Looks good so far!\nI think there\u2019s potential for quite a bit of refactoring here (e.g. unify code for pre- and postprocessor, move tests into specs) but that can wait.\n. Hmm, that\u2019s annoying.\nIt seems like a good idea to have #created? and #modified? on an item rep view (at least in the post-processor). I\u2019m OK with storing that information on an item (or item rep) for now, but I imagine this might be refactored later on (and the concept of views should make this easy).\n. This is looking quite good so far. Making use of the ItemRepWriter is the only change I\u2019d like to see, but other than that, it\u2019s mergeable!\n. :+1: otherwise\u2014looks awesome!\n. Sweet! Will merge as soon as Travis CI gives the green light.\n. Thanks!\n. ItemRepRepo is new in Nanoc 4.1.\nIn 4.0, Nanoc::Int::Item has #reps, an array of Nanoc::Int::ItemReps, and you can add a new rep can by appending to it:\nitem.reps << Nanoc::Int::ItemRep.new(item, :json)\nUsually, the reps are generated automatically based on the Rules file. Hope this helps!\n. I guess the lacking documentation is what nanoc/nanoc.ws#116 is for. :)\n. item.reps << x won\u2019t work on 4.1; on 4.1, you can modify ItemRepRepo.\n(The reason why ItemRepRepo exists is so that at some point in a future version of nanoc, not all the item reps (nor items) will need to be in-memory anymore. That should reduce memory pressure and make nanoc capable of handling sites with tens of thousands of pages/assets.)\n. @gjtorikian Nanoc 4.1 will be backwards compatible with 4.0, and I\u2019d recommend making modifications in 4.1 rather than 4.0! There\u2019s no release timeframe for 4.1, but I\u2019ll try to release more often than with 3.x (where I averaged one minor release per year or so).\n. ruby\nBenchmark.bmbm do |x|\n  x.report('select') do\n    10000.times { @items.select { |i| i.identifier =~ '/doc/*' } }\n  end\n  x.report('glob') do\n    10000.times { Dir.glob('content/doc/*') }\n  end\nend\n```\nRehearsal ------------------------------------------\nselect   3.390000   0.010000   3.400000 (  3.404135)\nglob     0.220000   0.260000   0.480000 (  0.486837)\n--------------------------------- total: 3.880000sec\n         user     system      total        real\n\nselect   3.230000   0.010000   3.240000 (  3.238574)\nglob     0.240000   0.280000   0.520000 (  0.526747)\n```\n. GitHub developer site doesn\u2019t have a significant speed-up. Three test runs:\n```\nWithout globbing:\n  Site compiled in 14.29s.\n  Site compiled in 14.16s.\n  Site compiled in 14.58s.\nWith globbing:\n  Site compiled in 14.19s.\n  Site compiled in 14.02s.\n  Site compiled in 14.00s.\n``\n. The preprocessor complicates this, because it can generate items/layouts just like data sources do. Perhaps it makes sense for the preprocessor to be backed by a data source. (But since the preprocessor can also delete items/layouts, this might become tricky too.)\n. Will close this for now. Needs more work.\n. Awesome, thanks!\n. @gpakosz Realistically, people use.adocor.asciidocso that text editors recognise and highlight it properly. GitHub also uses those two extensions.\n. FYI: http://asciidoctor.org/docs/asciidoc-recommended-practices/#document-extension\n. Looks good! Could you make this change to therelease-4.0.xbranch, so that the release branch also gets these improvements? I\u2019ll be sure to merge tomaster` quickly.\n. See #733 \u2014 I was too eager to wait :)\n. Hi!\nThe instructions for upgrading from the static data source require globs and full identifiers to be enabled.\nNanoc 4\u2019s full identifiers include the file extension, and so the static data source becomes obsolete when using globs and full identifiers.\nThe configuration and Rules file look okay apart from that!\n. You\u2019ll need to enable globs and identifiers with extensions. The extended upgrade guide contains instructions on how to do so.\n. I believe this issue is resolved and so I\u2019ll close it. Please do follow up if you believe that it is not.\n. Fixed in #738.\n. Makes sense! Could you fix the failing tests please?\n. It makes sense for #link_to_unless_current to have the same behavior of #link_to. A PR for this would definitely be welcome!\n. Yes\u2014retain the old behavior.\n. I think it makes sense to have both class and a new active_class attribute. The final HTML class would be the combination of both, if active, or just class.\n. I\u2019ll close this issue now; see #743 for details.\n. Will merge this anyway; better tests are welcome :)\n. I managed to reproduce this by forcing the default external encoding to ASCII and attempting to load a command. Fix coming up in 4.0.2.\n. A workaround is setting your environment\u2019s encoding to UTF-8 before invoking nanoc, e.g.\nexport LC_ALL=C.UTF-8\n. Fixed in #742.\n. CC @nrdufour \u2014 this fixes your issue.\n. The signature of the new function conflates the HTML attributes with function params which I\u2019m not a fan of. Sadly, it seems there\u2019s no simple way fix this, because\nruby\ndef link_to_unless_current(text, target, attributes = {}, params = {})\nwill capture the attributes inside the params instead, and using a keyword argument e.g.\nruby\ndef link_to_unless_current(text, target, attributes = {}, active_class: 'active')\nwill raise an ArgumentError: unknown keyword when passing in anything but :active_class.\nA solution would be to retain the original signature:\nruby\ndef link_to_unless_current(text, target, params = {})\nand check whether params contains either :active_class or :attributes; if it does, fetch the attributes and active class from params.fetch(:attributes, []) and params[:active_class], and if it does not, treat params as attributes.\nThis is getting pretty icky though, and at this point I\u2019m wondering whether this change, given the complexity it introduces for such a tiny helper method, is worth it.\n. Some tests are failing.\n. > For signature, what about def link_to_unless_current(text, target, active_class: 'active', **attributes)?\nThis still has the issue that it conflates HTML attributes with method options. I\u2019d rather have two different kinds of invocation: with only HTML attributes, or with method options. A combination of the two would raise an error. For example:\n``` ruby\nold-style invocations\nlink_to_unless_current('Next', next_item)\nlink_to_unless_current('Next', next_item, rel: 'next')\nnew-style invocations\nlink_to_unless_current('Next', next_item)\nlink_to_unless_current('Next', next_item, active_class: 'current')\nlink_to_unless_current('Next', next_item, attributes: { rel: 'next' })\nlink_to_unless_current('Next', next_item, attributes: { rel: 'next' }, active_class: 'current')\ninvocations that raise an error\nlink_to_unless_current('Next', next_item, rel: 'next', active_class: 'current')\n```\nNow that I think of it, it might make sense to not have active_class but rather active_attributes.\n. The alternative to doing all of is, is to not do it and follow the philosophy of only retaining the simplest possible in Nanoc.\nIt\u2019s virtually impossible to provide an one-size-fits-all solution for any helper in Nanoc. Even simple ones, such as #link_to and #link_to_unless_current, already get fairly complicated due to the need for customisation.\nI\u2019d rather have a simple and not featureful implementation rather than an implementation that is complex but featureful (such as the modified #link_to_unless_current).\n. @lvuotto We\u2019d still need to have a #link_to_unless_current that remains backwards compatible and has a reasonable function signature that allows passing in existing attributes and an active class.\nI believe it\u2019ll lead to a significant amount of complexity regardless of the approach taken. I\u2019m open to being challenged about this though!\n(Just to be clear, I value your contributions, even if they don\u2019t end up getting merged!)\n. Hi @lvuotto! Could you let me know what the status of this PR is?\n. I\u2019ll close this PR now.\nThis is something worth revisiting when Nanoc 5 comes along (might be a while though) because that\u2019s when breaking backwards compatibility is totally okay, and that\u2019ll benefit the API for helpers like these.\nThanks for the time and effort you\u2019ve put into this!\n. CC @Fjan \u2014 this  is the behavior you\u2019re looking for.\n. That\u2019ll have to be for Nanoc 5 (since it\u2019s a breaking change).\n. This probably is related to #571: being able to modify the identifier in the preprocessor will mean having functionality that is only available in the preprocessor; similar to how there needs to be functionality that is only available outside of the preprocessor.\n. On second thought, not related to #571: adding #identifier= to the mutable document views is enough.\n. Fixed in #750.\n. @options[:importer] appears to be nil for the cases where it\u2019s erroring.\n. Fixed by ::Sass.load_paths << '.'. This is presumably only a problem in the tests; will fix.\n. For reference: the Sass 3.4.0 release notes say this in the \u201cBackwards Incompatibilities \u2013 Must Read!\u201d section:\n\nThe current working directory will no longer be placed onto the Sass load path by default. If you need the current working directory to be available, set SASS_PATH=. in your shell\u2019s environment.\n. Fixed by #749.\n. CC @theoldfellow \u2014 this will not fix the issue you\u2019re getting, but it will raise an exception with a description that explains how to fix the issue.\n. Will merge this now, but a post-merge :+1: is welcome!\n. There are some FIXMEs and TODOs left, but I\u2019ll tackle those in a separate PR since I believe they relate to issues that currently already exist in master.\n. This is intentional, because hidden files can cause a world of pain (they\u2019re invisible! why is my site not compiling!!!) and so the recommended approach to deal with hidden files is not have them hidden in the content/ directory (e.g. content/nojekyll) and routed to a hidden location (e.g. output/.nojekyll).\n\nThe implementation of the #all_files_and_dirs_in method uses Dir.glob which, won\u2019t return hidden files when given the * glob (code).\nIf nothing else, I believe the Nanoc documentation should clarify that hidden files will be ignored, and that the non-hidden-to-hidden technique described above is the recommended approach.\nChanging Nanoc to include hidden files will almost certainly break sites.\nAlternative, a configuration option to (not) ignore hidden files might be worth it. (But with non-ignored hidden files, people will need to deal with e.g. .DS_Store manually.)\nOpinions?\n. I\u2019ve decided to document the current behavior (which I think makes sense) rather than add configuration or custom behavior to deal with dotfiles. There\u2019s now a hidden files troubleshooting section on the Nanoc web site.\n. Gah! I remembered only today that Nanoc 3.7.5 introduced an extra_files config option, which you can use to pass through dotfiles (e.g. e.g. extra_files: ['.nojekyll']).\nI\u2019ve created nanoc/nanoc.ws#176 to track this.\n. Moved to nanoc/features#3.. This to me seems like it happens because the cached data in tmp/ has changed formats in Nanoc 4.1, and Nanoc 4.1 misinterprets the format of 4.0. The solution for that would be to bump the file format version for the rule memory store.\nCan you do two things for me?\n1. Is this for the GitHub developer site? If so, zip the entire directory (including tmp/) and send it to me so I can take a look.\n2. Afterwards, delete tmp/ and recompile with an unmodified Nanoc 4.1.0a1. If my hypothesis is correct, the site will compile properly.\n. Yes please! Small test cases are awesome.\n. Ahh, that is possible, and that gives me another idea as to where this error is coming from.\nYou can replace @item.compiled_content with yield in the layout, which should fix it. (I\u2019m guessing Nanoc 4.1 has a regression where it can\u2019t deal with @item.compiled_content in this case, because it refers to the content after it\u2019s been laid out. Needs further investigation as to where this issue coms from.)\n. (It might be the case that Nanoc 4.1.0a1\u2019s behavior is in fact more correct.)\n. raw_content will get the initial content without any filters applied to it, so that might not be what you want.\nI\u2019ll investigate and when I find that there\u2019s an actual real issue here, but for now I\u2019ll consider this resolved.\n. I captured the problem in #762.\n. 4.1 beta 1 has the fix (see #764).\n. This is still an issue in 4.1.0b1.\n. #766 fixes this. (Hopefully!)\n. Fixed in #784.\n. Ack\u2014I guess that\u2019s why it\u2019s still in beta :).\nLesson learnt for me: when fixing a bug, try the original test case again to make sure the right bug is tackled.\nI\u2019ll reopen the original issue and look into it again.\n. @gjtorikian This is the proper fix.\n. item.path is indeed the cause of the issue.\nIn the context of a #compile (or #route or #preprocess) block, it is tricky to get hold of the path of the item currently being compiled, because in Nanoc 4.1, the path could be assigned afterwards, e.g. when using the new #write method:\nruby\ncompile '/blog/**/*.md', rep: :linked_excerpt do\n  filter :rdiscount, extensions: [:smart]\n  filter :more_filter, more_url: item.path\n  write item.identifier.without_ext + '/index.html'\nend\nIn this example, you\u2019d be using the path before it\u2019s even known.\nThis is not a new problem\u2014the fact that the #path method is accessible on an item in Nanoc 4.0 is a bug. Using it this way will likely trip up the dependency tracker, causing items to be unnecessarily recompiled, or not recompiled when they should be.\nI\u2019m working on a fix which will make #path (and related methods, such as #compiled_content, which makes even less sense in a compilation rule) inaccessible, i.e. raise a NoMethodError.\nIn the mean time, the recommended approach would be to pass the item in its entirely to the :more_filter filter:\nruby\ncompile '/blog/**/*.md', rep: :linked_excerpt do\n  filter :rdiscount, extensions: [:smart]\n  filter :more_filter, more_item: item\nend\n:more_filter can then itself get the path of the item using params.fetch(:more_item).path.\n. Underlying issue is fixed in #768. (item.path will now raise an error.)\n. This is only a bug in 4.1.\n. Fixed in #770.\n. That seems like a bug!\nIs your site\u2019s source available somewhere for me to take a look?\n. Managed to reproduce the issue. Fix coming up!\n. #773 has a fix.\n. Fix will be in 4.1.0!\n. Could you give a try by letting Nanoc use the release-4.1.x branch from GitHub?\n. I\u2019ll merge this now, even though the API is still considered experimental/private. Future work includes migrating all existing tests to specs using this new API.\n. This was fixed in #712 and will be part of the upcoming 4.1 release.\n. Fixed in #778. Please give it a try and shout if it doesn\u2019t work as expected!\n. Fixed in #779.\n. Ack, weird. Is this in 4.1 alpha something?\n. Hmm, I can\u2019t reproduce the issue here (using either the tag 4.1.0rc1 or the release-4.1.x branch). Do you have a small example where it fails?\n. @gjtorikian Poke. Can you confirm that this is still an issue?\n. The pruner isn\u2019t terribly cleanly written and I find that just the new regression test is okay for now.\n. Neat!\nMucking about is the way most of the Nanoc code got written. It\u2019s pretty effective!\n. Fixed by #783.\n. Can you try reproducing the problem with the release-4.1.x branch? I believe this issue is fixed and will be part of 4.1.1.\n. I created #787 for this!\n. CC @remko \n. Potential fix in #788.\n. @remko Can you verify that the release-4.1.x now works properly for you?\n. Thanks!\n. > Other data sources could calculate checksums even faster.\nThat\u2019s an interesting idea! The advantage of the current approach to generating checksums is that no-op changes (e.g. formatting changes) won\u2019t cause a change in the checksum, but I guess that\u2019s really just an edge case.\n\nCurrently, Nanoc::Int::Checksummer is responsible for its checksumming all other classes. However, this makes that component rather omniscient, in contrast with the principles of object-oriented design. Wouldn't it be good that each entity is responsible for checksumming itself?\n\nIn nanoc 3.x, the individual entities had a #checksum method, but I moved all of that into a single class so that there\u2019s only a single place where checksums are calculated, and there are no more monkey-patched String, Array, \u2026 etc classes.\nOne could indeed argue that this new approach goes against traditional \u201cgood practices\u201d of object-orientation, but I find the code of the checksummer far nicer to read.\n\nEither it would generate a field such as :checksum, which the checksum method then uses if it exists.\n\nI like that idea! That\u2019d mean ::Nanoc::Int::Document gets an optional checksum, and the #new_item and #new_layout methods gain a :checksum param.\nI\u2019m not such a big fan of the idea of implementing #calc_checksum on items/layouts and giving it the ability to calculate its own checksum. That seems like logic that should live elsewhere. I believe that the :checksum param will make lazy loading possible anyway.\n. > > One could indeed argue that this new approach goes against traditional \u201cgood practices\u201d of object-orientation, but I find the code of the checksummer far nicer to read.\n\nProbably a matter of taste, case statements based on type always look a little suspicious to me.\n\nI understand your point (I typically feel the same), but I nonetheless am happier with the current checksumming method.\n\n\nI believe that the :checksum param will make lazy loading possible anyway.\n\nNot sure. The signature of new_item is currently\n```\nnew_item(raw_content_or_raw_filename, attributes, identifier, params = {})\n```\nand this requires me to give the attributes as a hash \u2013 so I should have the attributes already. (Or can I make the hash lazy?)\nFor example, in the case of the BibTeX datasource, it would be beneficial to just supply the checksum (which does not require the file to be parsed) and only calculate the attributes when necessary (which requires the file to be parsed).\n\nI\u2019m not referring to including the checksum in the attributes hash\u2014the checksum would be separate (passed in params, stored separately from attributes). At the moment, attributes are always loaded, but in the future this might no longer be the case.\n. > Alright if I give the checksum param a go in a PR?\nDo it! (On the master branch please.)\n\nBTW Do you have examples of other params use cases?\n\nThere\u2019s :binary, which only exists for items, to indicate whether an item is textual or binary. Most (all?) of this code uses Ruby 2.1-style named arguments btw.\n. Thanks! I\u2019ve taken care of this in c0e16c03d8250641ee9521088507e906eb45395b, which is on the latest release branch rather than master, where I\u2019ve also updated the copyright year in the executable itself.\n. This does not replace all helper tests, but the existing ones are too high-level or complicated to rewrite in a nice way. Might do this later.\n. This looks good! Some remarks:\n- I\u2019m not in favour of using the file size and mtime to detect modifications. It\u2019s not accurate enough\u2014it\u2019s trivial to generate two different files with the same checksum. The content and attributes (as strings) are already loaded, and generating a checksum from a string is quite fast (SHA-1 is intended to be fast). For binary items, this isn\u2019t as straightforward, and file size + mtime will have to do.\nI\u2019m not saying no to using mtime at all, but for a checksum, I don\u2019t think it suffices. (Idea: only calculate a full checksum when the mtime appears to indicate that the item is outdated\u2014but I believe such a change is out of scope for this PR and would require quite a bit more (architectural) rework.)\n- The checksummer is part of a private API, but I have no issues with the filesystem data source using that API. It is part of the private API because I don\u2019t want to expose it outside of Nanoc (and have to maintain it as part of the public API).\n. > Content only needs to be loaded when the checksum is different.\nNot entirely correct: the checksum being different is a necessary but not sufficient condition for content to be loaded. For instance, an item (whose checksum is identical) that includes content from another item (whose checksum is different) will need to be recompiled even though its checksum hasn\u2019t changed.\nThe idea of only loading data when necessary is nonetheless quite interesting and is something I plan to tackle in Nanoc at some point in the future.\n. :+1: apart from comments\n. > Yeah, I cut a corner in writing that down. What I meant is: content only needs to be loaded when a reason is found to recompile, since determining that reason no longer requires the item contents.\nYup.\n\nI think it could be as simple as allowing new_item to accept a block and a checksum, but I might be oversimplifying. Can I make an issue to discuss that?\n\nI have a few ideas regarding optimisations like these, and I\u2019d rather write down these thoughts in a proper RFC first. (Can\u2019t seem to find the time, though.)\n. Looks good, thanks!\n. Some follow-up discussion:\n- Using mtime+file size as an initial checksum, and only calculating the full checksum if necessary (and only then loading content) is pointless, because when the mtime/file size checksum is different, the item will need to be recompiled and that means loading the content anyway. Additionally, the full checksum will need to be calculated for this item anyway, because it needs to be stored so that it can be used in future compilations. (The previous checksum could be reused rather than recalculated, but I\u2019m unsure whether the speedup would be large enough to make it worth optimise this.)\n- Not loading content, or lazy-loading content, made much more sense in previous versions of Ruby, but since Ruby as of recently has a generational GC, the performance gains of keeping memory usage low are not nearly as big anymore.\n. I\u2019d argue that in most cases, parsing the metadata doesn\u2019t impose enough of an overhead to try to avoid doing it\u2014but I haven\u2019t profiled this extensively to be certain of that.\n. This is the \u201cnothing changed\u201d case, correct?\n. The frozenness and symbolisation handling feels a little awkward, and I think it could do with some more abstraction. Here\u2019s an idea:\n``` ruby\nclass LazyValue\n  def initialize(thing)\n    @thing = thing\n  end\ndef value\n    @value ||= transform(raw_value)\n  end\ndef raw_value\n    @raw_value ||=\n      if @thing.respond_to?(:call)\n        @thing.call\n      else\n        @thing\n      end\n  end\ndef transform(x)\n    x\n  end\ndef freeze\n    value.freeze\n  end\nend\nclass LazyAttributesValue < LazyValue\n  def transform(x)\n    x.__nanoc_symbolize_keys_recursively\n  end\ndef freeze\n    value.__nanoc_freeze_recursively\n  end\nend\nclass LazyContentValue < LazyValue\nend\n```\nThat code could be used like this (pseudocode):\n``` ruby\nclass TextualContent < Content\n  def string\n    @string_holder.value\n  end\nend\nclass Document\n  def initialize(content, attributes_like, identifier)\n    # \u2026\n    @attributes_holder = LazyAttributesValue.new(attributes_like)\n    # \u2026\n  end\ndef attributes\n    @attributes_holder.value\n  end\nend\n```\nUntested, but hopefully this gets the idea across! This approach is purely functional and easier to use/understand.\nNot sure about the \u201cholder\u201d name though.\n. > Am I correct to implement the laziness for content in Content, or should this be in Document?\nSeems correct!\n\nDoes the laziness handling with the holder seem alright? This was needed for freezing.\n\nIt\u2019s confusing, and it\u2019s not DRY, so it\u2019s a little tricky to tell. I think abstracting the laziness handling away (e.g. using the suggestion above) could make this easier.\n. lib/nanoc/base/entities/lazy_value.rb would work! Put it inside Nanoc::Int though, to make it clear this is for internal use only.\n. I prefer  prefer respond_to?(:call) over is_a?(Proc) because it makes duck typing easier\u2014not just procs can yield values. This is also in line with how Rack apps are built (the contract there is to respond to #call.)\n. Hmm, loading cached data might be a problem. I\u2019ll look into whether or not this has a significant impact.\nThe tmp store has a version number; bumping it would be good (it\u2019ll invalidate previous data).\n. Bump the version of the compiled content cache by changing the number argument in the initializer. In this example, change it from 1 to 2:\nruby\n  class CompiledContentCache < ::Nanoc::Int::Store\n    def initialize\n      super('tmp/compiled_content', 1)\nIt\u2019s a good idea to not only bump the version, but also implement #marshal_dump and #marshal_load on TextualContent (and perhaps BinaryContent, for consistency) so that it stores/loads the string value:\n``` ruby\n      def marshal_dump\n        [@filename, string]\n      end\n  def marshal_load(array)\n    @filename = array[0]\n    @string = Nanoc::Int::LazyValue.new(array[1])\n  end\n\n``\n. I believe updating the Filesystem data source is worth it, although I\u2019d do it in a separate PR. (The code for the filesystem data source is quite complex, and perhaps it warrants a refactoring first. I think it\u2019s easier if I do that, but you\u2019re welcome to give it a shot too.)\n. Looks good! Thanks :)\n. This one\u2019s a little tricky because the item _views_ are never frozen explicitly\u2014but I suppose they should mirror the frozen-ness of the backing entity. Fix coming up.\n. WIP fix is in #797.\n. This is now fixed by #796 in therelease-4.1.x` branch and will be part of the 4.1.2 release.\nCan you verify that this fix works for you? The simplest way to use this branch is to update the nanoc line in your Gemfile to say the following:\nruby\ngem 'nanoc', github: 'nanoc/nanoc', branch: 'release-4.1.x'\n. Yup, totally makes sense. Having the environment available in crash.log wasn\u2019t as useful as I imagined in the first place, and when it\u2019s necessary, we can still get hold of it by other means.\nPR: #800\n. Fixed in #800. This\u2019ll be part of the 4.1.2 release.\n. Wrong base branch; will redo.\n. The error handler is lacking in detailed tests, hence no change in specs/tests.\n. Probably still a work in progress, but has made enough progress to be merged.\n. Data sources aren\u2019t designed to generate items (or layouts) based on what other data sources provide.\nThe recommended approach is to do what you are already doing, which is using the preprocessor to generate these pages.\n. Fixed in #811.\n. I believe it\u2019s difficult to turn this into something generic.\n. Can you share the full stack trace? (Or share the crash.log file?)\nMutableItemView is only used in the preprocessor, and during preprocessing, items don\u2019t yet have paths, and thus MutableItemView does not have a #path method. If this crash occurs somewhere outside of the preprocessor, then that means MutableItemView is used when it shouldn\u2019t, and that\u2019d be a clear bug.\n. Can you share the Rules, layouts/_events.html and layouts/index.html files?\n. The problem arises from storing items during preprocessing in global variables (e.g. $new_events, $old_events). This stores the (mutable) item views, and during compilation, these will still be mutable views that don\u2019t have a path.\nI recommend not storing the items (or their views) in a global array, but store their identifiers instead, and fetch the appropriate item with @items[identifier] when needed.\n(The use of global variables also bypasses Nanoc\u2019s dependency tracking mechanism, and so I recommend not using globals at all\u2014otherwise, you\u2019ll end up having to rm -rf tmp before compiling for the compiled site to be correct.)\n. The identifier of an item is their path, e.g. /projects/nanoc.md, and you can obtain it by calling #identifier.\n. Yes: item.identifier is the identifier of the item.\n. You can set attributes of an item with #[]=, e.g. item[:title] = 'Donkey', and fetch it like item[:title]. Try to store all information on either items or the site configuration, so that Nanoc\u2019s dependency tracker can do its thing.\n. Fixed in #810.\n. Fixed in #820.\n. Fixed in #819.\n. Wrong branch.\n. Wrong branch.\n. #832 is an initial attempt, although potential issues with Bundler 1.11 make this tricky.\n. This is now done.\n. Getting a build failure:\n``\n$ bundle install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle}\njruby: warning: unknown property jruby.cext.enabled\nFetching gem metadata from https://rubygems.org/........\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...................................................................................................................................................................................................\nInstalling CFPropertyList 2.3.2\nInstalling rake 10.5.0\nInstalling RedCloth 4.2.9\nInstalling addressable 2.4.0\nInstalling rack 1.6.4\nInstalling allison 2.0.3\nInstalling ast 2.2.0\nUsing bundler 1.11.2\nInstalling builder 3.2.2\nInstalling chunky_png 1.3.5\nInstalling coderay 1.1.1\nInstalling coffee-script-source 1.10.0\nInstalling execjs 2.6.0\nInstalling colored 1.2\nInstalling multi_json 1.11.2\nInstalling sass 3.4.21\nInstalling rb-fsevent 0.9.7\nInstalling ffi 1.9.10\nInstalling json 1.8.3\nInstalling docile 1.1.5\nInstalling simplecov-html 0.10.0\nInstalling tins 1.6.0\nInstalling thor 0.19.1\nInstalling safe_yaml 1.0.4\nInstalling diff-lcs 1.2.5\nInstalling json_pure 1.8.3\nInstalling erubis 2.7.0\nInstalling excon 0.45.4\nInstalling formatador 0.2.5\nInstalling ipaddress 0.8.3\nInstalling xml-simple 1.1.5\nInstalling inflecto 0.0.2\nInstalling nokogiri 1.6.7.2\nInstalling trollop 2.1.2\nInstalling lumberjack 1.0.10\nInstalling nenv 0.3.0\nInstalling shellany 0.0.1\nInstalling method_source 0.8.2\nInstalling slop 3.6.0\nInstalling tilt 2.0.2\nInstalling hashdiff 0.3.0\nInstalling kramdown 1.9.0\nInstalling maruku 0.7.2\nInstalling metaclass 0.0.4\nInstalling mime-types-data 3.2016.0221\nInstalling minitest 5.8.4\nInstalling mustache 1.0.2\nInstalling pandoc-ruby 1.0.0\nInstalling powerpack 0.1.1\nInstalling rainbow 2.1.0\nInstalling rouge 1.10.1\nInstalling rspec-support 3.4.1\nInstalling ruby-progressbar 1.7.5\nInstalling unicode-display_width 0.3.1\nInstalling rubypants 0.2.0\nInstalling temple 0.7.6\nInstalling vcr 3.0.1\nInstalling yard 0.8.7.6\nInstalling yuicompressor 1.3.3\nInstalling fission 0.5.0\nInstalling adsf 1.2.0\nInstalling markaby 0.8.0\nInstalling parser 2.3.0.6\nInstalling coffee-script 2.4.1\nInstalling cri 2.7.0\nInstalling compass-core 1.0.3\nInstalling compass-import-once 1.0.5\nInstalling rb-inotify 0.9.7\nInstalling spoon 0.0.4\nInstalling uglifier 2.7.2\nInstalling rdoc 4.2.2\nInstalling simplecov 0.11.2\nInstalling term-ansicolor 1.3.2\nInstalling crack 0.4.3\nInstalling rubyforge 2.0.4\nInstalling fog-core 1.36.0\nInstalling rbvmomi 1.8.2\nInstalling w3c_validators 1.2\nInstalling notiffany 0.0.8\nInstalling haml 4.0.7\nInstalling mocha 1.1.0\nInstalling mime-types 3.0\nInstalling rspec-expectations 3.4.0\nInstalling rspec-core 3.4.3\nInstalling rspec-mocks 3.4.1\nInstalling typogruby 1.0.18\nInstalling slim 3.0.6\nInstalling rubocop 0.37.2\nUsing nanoc 4.1.4 from source at.`\nInstalling compass 1.0.3\nInstalling listen 3.0.6\nInstalling pry 0.10.3\nInstalling coveralls 0.8.11\nInstalling webmock 1.24.1\nInstalling echoe 4.6.6\nInstalling fog-json 1.0.2\nInstalling fog-xml 0.1.2\nInstalling fog-local 0.2.1\nInstalling fog-vmfusion 0.1.0\nInstalling fog-vsphere 0.6.0\nInstalling rspec 3.4.0\nLoadError: cannot infer basepath\n                                                                           require_relative at uri:classloader:/jruby/kernel/kernel.rb:9\n                                                                                      at (eval):1\n                                                                                       eval at org/jruby/RubyKernel.java:978\n                                                                             block in setup at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/maven_exec.rb:33\n                                                                                      chdir at org/jruby/RubyDir.java:326\n                                                                                      setup at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/maven_exec.rb:32\n                                                                             block in setup at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/maven_exec.rb:44\n                                                                                      chdir at org/jruby/RubyDir.java:326\n                                                                                      setup at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/maven_exec.rb:43\n                                                                                 initialize at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/maven_exec.rb:22\n                                                                                 initialize at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/installer.rb:121\n  block in /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/post_install_hook.rb at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/jars/post_install_hook.rb:26\n                                                                                       call at org/jruby/RubyProc.java:318\n                                                                         block in run_hooks at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/source/path.rb:213\n                                                                                       each at org/jruby/RubyArray.java:1560\n                                                                                  run_hooks at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/source/path.rb:212\n                                                                      block in generate_bin at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/source/path.rb:193\n                                                                                      chdir at org/jruby/RubyDir.java:326\n                                                                             block in chdir at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/shared_helpers.rb:53\n                                                                            mon_synchronize at /home/travis/.rvm/rubies/jruby-9.0.4.0/lib/ruby/stdlib/monitor.rb:211\n                                                                                      chdir at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/shared_helpers.rb:52\n                                                                               generate_bin at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/source/path.rb:187\n                                                                                    install at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/source/path.rb:73\n                                                                                    install at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/installer/gem_installer.rb:56\n                                                                          install_from_spec at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/installer/gem_installer.rb:20\n                                                                       block in worker_pool at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/installer/parallel_installer.rb:88\n                                                                                       call at org/jruby/RubyProc.java:318\n                                                                                 apply_func at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/worker.rb:55\n                                                                     block in process_queue at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/worker.rb:50\n                                                                                       loop at org/jruby/RubyKernel.java:1291\n                                                                              process_queue at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/worker.rb:47\n                                                                        block in initialize at /home/travis/.rvm/gems/jruby-9.0.4.0/gems/bundler-1.11.2/lib/bundler/worker.rb:22\nThe command \"eval bundle install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle}\" failed. Retrying, 2 of 3.\n```\n. Potentially an issue with Bundler 1.11; will wait for Bundler 1.12.\n. Ack\u2014that\u2019s what happens when refactoring code in the presence of other, old, untested code. I have a fix in #835.\n. Fixed in #835.\n. Incorrect branch\u2014will re-create.\n. I\u2019m OK with only having a regression test for now.\nThe CLI commands have generally rather bad code coverage (and the way they\u2019re loaded makes it impossible for the code coverage tool to detect them), so I\u2019d like to tackle that in a separate PR.\n. It\u2019s not possible to access the compiled content in a routing or compilation rule, because the content hasn\u2019t been compiled yet at that point. Can you give an example of why this is useful for you?\nYou can access the raw content of an item using @item.raw_content though.\n. The routing rules are executed before the compilation rules, because they are necessary in order to determine which items need to be recompiled. It the output file already exists and the input is not outdated, the item does not need to be compiled. (This is essentially a chicken-and-egg problem.)\nBecause of this reason, accessing the compiled content from within a routing rule does not work. In Nanoc 3.x, this was possible but would return unreliable results. In Nanoc 4.x, it\u2019s outright impossible, because the #compiled_content method is not available in routing and compilation rules.\nContent-based cache busting using routing rules is not possible in Nanoc. There\u2019s a few alternatives (from bad to good):\n1. Hardcode a version number\n2. Let a checksum be based off the raw contents of the filename (without dependencies)\n3. Generate a checksum based on the raw contents of this file + dependent files (lots of work!)\n4. Generate a checksum from the compiled content and use it in a query string\nI haven\u2019t tried the last approach, but it seems promising. You\u2019d end up with a helper like the following:\nruby\ndef stylesheet_path\n  stylesheet = @items['/assets/stylesheet.*']\n  stylesheet.path + '?v=' + Digest::SHA256.hexdigest(stylesheet.compiled_content)\nend\n. > Unfortunately solution number 4 has proven unreliable in the past.\nYes; that\u2019s what I figured. (Though I\u2019m not sure whether it\u2019s still as big of a problem as it used to be.)\n\nI do like solution number 3 though.\n\nIf there\u2019s only a handful of files, that can work with not much effort. I hope to be able to expose the dependency graph in some future version of Nanoc, so that this could be done more easily, but for the time being, it can only be done manually.\n\nIt's actually even more efficient, since we don't need the content to be filtered to tell wether it's been modified.\n\nNanoc caches compiled content, so for unchanged items, this wouldn\u2019t be much of a slowdown.\n. I\u2019ll close this issue now, but I\u2019m happy to keep the discussion going.\n. #compiled_content is still available, although not during preprocessing or within rules. I admit that it\u2019s a little unclear, but I\u2019ve opened nanoc/nanoc.ws#158 so I remember to fix it.\n. @Ecco Something along the lines of this (untested):\nruby\nDigest::SHA1.hexdigest(\n  @items.find_all('/assets/**/*.css').map(&:raw_content).join(''))\n. Yikes! A wild guess, but this might be caused by Unicode normalisation being done differently in different places.\nDo you have a test case for me that I can reproduce locally? If not, it\u2019d be helpful if you could do some digging on your side and see whether you can isolate the issue. If my hunch is correct, pruner.rb:43 would show that present_files has a string normalised to one way, and compiled_files the same string, normalised a different way.\n. Does the problem disappear when you replace\nruby\nFind.find(site.config[:output_dir] + '/') do |f|\nin pruner.rb with\nruby\nFind.find(site.config[:output_dir] + '/').map { |f| f.encode('UTF-8') }.each do |f|\n? If so, it looks like re-encoding all filenames obtained from Dir.glob to be UTF-8 would be the way to go.\n. Yup, I\u2019d argue that all strings (including filenames) constructed by Nanoc should be in UTF-8. Will fix and ensure that encodings are correct everywhere.\n(Hard to fix/test, because the default encoding is sadly part of the global state.)\n. Fix in #852.\n. Fixed in #852, and will be part of the 4.1.6 release.\n. I suggest replacing\nruby\ntask :nanoc do\n  Nanoc::CLI.run %w(compile)\nend\nwith\nruby\ntask :nanoc do\n  sh 'nanoc'\nend\nas it achieves the same thing, and doesn\u2019t run the Nanoc CLI in an environment where it\u2019s not intended (it works best when run in its own process that\u2019s spawned from bin/nanoc).\n\nThe Nanoc CLI replaces $stdout with a CleaningStream that wraps $stdout, so that color codes and non-ASCII characters can be written to standard output, and filtered out in cases where they are not supported.\nCleaningStream does not implement/forward all methods that are defined in IO unfortunately. #printf is a tricky one to implement properly, too.\nThe CleaningStream is conceptually a solid idea, but having to forward a ton of methods on IO is a pain and there\u2019s often gaps. I see two alternatives:\n- Wrapping standard out in Nanoc::CLI.out instead of $stdout, but that\u2019s bound to lead to mistakes (and might leak Unicode or color codes).\n- Modifying the code that generates color codes to be conditional, and prevent color codes from being outputted that way. I\u2019m unsure how this technique could apply to preventing non-ASCII characters from leaking, however.\n. > Can you give me an example where stripping color codes or non-ASCII would be desired? The only thing I can think of is non-ttys (e.g. nanoc compile > log.txt).\nYup\u2014Nanoc strips color codes when stdout is not a terminal, and it transforms non-ASCII characters when the inferred terminal encoding is not UTF-8.\n. Looks interesting! I\u2019m typically not fond of doing type checks, but I don\u2019t see an alternative in this case.\nTwo remarks:\n- Prefer raising an ArgumentError in this case\n- Can you add a test for this?\n. Cool, thanks!\n(I think an even better way would be to use #to_str; see this gist for details. But that\u2019s really getting into the details, so I\u2019m OK with the implementation as it is right now.)\n. You\u2019re right\u2014#788 should\u2019ve kept the preprocessing step before checks.\nYour suggestion seems correct. I\u2019ll implement the fix and add a regression spec.\n. Fix in #842.\n. This is released in 4.1.5 now.\n. Good\u2014that\u2019s part of a private API anyway ;)\n. The extra complexity does not appear worth the (unnoticeable) speedup.\n. Fixed in #851.\n. Arguably, I\u2019ve contributed the most to Nanoc, so it makes sense for me to be in there. (I guess it would make sense to change the copyright line to \u201cNanoc \u00a9 2007\u20132016 Denis Defreyne and contributors\u201d though.)\nBuild broke on old Ruby versions because of a dependency. Will fix elsewhere.\n. Hi,\nNanoc 4 no longer supports the static data source. The purpose of the static data source was to work around the fact that Nanoc 3.x\u2019s filesystem data source did not contain the file extension, making it difficult to include external assets such as fonts, which typically share a filename but differ only in file extension.\nThe Nanoc 4 upgrade guide describes how to upgrade from the static data source. Note that this does require upgrading the site to identifiers with extensions and glob patterns.\nDo let me know if you run into any snags!\n. This looks cool! A couple of things that I spotted so far:\n- The #site_from_config method takes the configuration as an argument, and modifies it. I dislike modifying incoming arguments, because it makes code harder to follow and effects more difficult to trace.\n- Whatever\u2019s in lib/nanoc/base can\u2019t refer to anything in lib/nanoc/cli; the command-line interface knows about base, but not vice versa.\n. @barraq I\u2019ll give this a more thorough review soon!\n. Looks good otherwise! Looking forward to using this.\n. I\u2019m short on time atm, but will revisit as soon as I can.\n. > Thanks @ddfreyne for this deep review. I fixed all but one:\n\n\nI\u2019m not in favour of modifying output_dir like this. The output_dir can be specified on a per-environment basis, if necessary, so there\u2019s no need for this logic.\n\nActually I did this to prevent having a mandatory argument when using environments. To my understanding if the user does not override the output_dir in each defined environment then there will be some weird things happening with the compilation when --prune is activated for instance? Same if the option is not activated since residues from another compilation might remain. I mean that line prevents side effect behavior introduced by environments.\nWhat do you think?\nI am fine with removing it :D I just prefer having a second thought before doing it.\n\nCompiling with one env and pruning with another will cause the pruning to happen as if the site was compiled with the env used for pruning. I think that\u2019s expected behavior.\nThe current implementation (which sets output_dir) is not backwards compatible. Output will be written to output/default/ by default, rather than output/, which is a change in behavior.\nEven retaining the current behavior for the default env is problematic, as output will be written to either output/ or a subdirectory (e.g. output/devel/ when using the devel env), which is even more confusing.\n. @barraq Is this PR still being worked on? I can take over if you wish.\n. Looks good! Thanks for this feature. Merging!\n. @bburton Thanks for the comment! I\u2019ve collected your thoughts in #937.\n. Nanoc 4 no longer has the Nanoc3 constant; it has been replaced with Nanoc. See the Nanoc 4 upgrade guide for details.\nIf you want to stick with Nanoc 3 for the time being, ensure that your Gemfile specifies Nanoc 3. For example:\nruby\ngem 'nanoc', '~> 3.8'\n\u2026\u00a0though upgrading to Nanoc 4 is recommended.\n. Replaced by #872.\n. This makes sense! Can you make two small changes:\n- Open a PR against the release-4.2 branch instead, so it ends up in the next bugfix release.\n- Add a test for this in test/extra/core_ext/test_time.rb.\nHappy to help with either!\n. I believe you can do allow(Time).to receive(:zone).and_return('CEST'). That\u2019d be in the before block of a context.\n. I looked into writing specs for this, and it turns out that this change isn\u2019t quite correct\u2014when given a date (rather than a time), the fix fails. Will work on a separate PR that fixes this and adds specs.\n. #to_iso8601_date deliberately does not convert to UTC because the date is supposed to be timezone-agnostic.\nFor example, if I were to write 2016-10-22, then I intend that specific day, no matter where I am, and what time it is. Converting this date to UTC first could change that date to 2016-10-21 or 2016-10-23, which is not what\u2019s intended.\nPerhaps #attribute_to_time should be updated so that, given a Date rather than a Time, the generated Time object is created from UTC time. Will give that a try!\n. Replaced by #961.\n. Yup, I am getting this one as well. This is caused by the recent change of #846, though I am not quite sure why.\n. Potential fix in #865.\n. Correct. I have a fix in #865, which uses rescue WeakRef::RefError rather than checking #weakref_alive?.\n. Can you reproduce the problem by only changing the Nanoc version (not the version of other dependencies)?\nDoes this problem occur for an incremental compilation, or also for a from-scratch compilation (by executing rm -rf tmp before compiling)?\nDoes the issue also occur on Nanoc 3.8?\n. Can I access the source code for the site somewhere?\n(I\u2019ll be out for the next week, so I won\u2019t be able to reply so quickly.)\n. Would you be able to run nanoc though a profiler, like stackprof, and send me the output? I\u2019m a bit at a loss where to look for this slowdown.\n. Potential duplicate: #878\n. I\u2019ve looked at the diff for 3.7.4 to 3.7.5 yet I\u2019m not able to pinpoint a potential reason for why this is slower.\n. I\u2019d still be interested in getting a stackprof profile, so that I can get a better understanding of where the slowness is coming from. I\u2019ve written down a how-to guide below; it should work out of the box. Note that this approach will only work with Ruby 2.1 or higher.\nClone Nanoc and check out version 3.7.5:\n% git clone git@github.com:nanoc/nanoc.git        \n% cd nanoc\n% git checkout 3.7.5\nEdit bin/nanoc and wrap Nanoc::CLI.run(ARGV) in a Stackprof block. For example:\n``` ruby\nrequire 'stackprof'\nStackProf.run(mode: :cpu, out: 'stackprof.dump') do\n  Nanoc::CLI.run(ARGV)\nend\n```\nIn your Nanoc site, edit the Gemfile to point Nanoc to your locally modified copy, using the path: argument. Additionally, add stackprof to your Gemfile. For example:\nruby\ngem 'nanoc', path: '/Users/denis/Downloads/nanoc'\ngem 'stackprof', github: 'tmm1/stackprof'\nIn your Nanoc site, run bundle install, and bundle exec nanoc. If successful, a stackprof.dump file will have appeared in the working directory after compilation.\nRun stackprof stackprof.dump --text --limit 50, and send me the output of that command.\n. Alright, then #518 is indeed the cause of the slowdown. I\u2019m unsure how to improve the implementation, apart from using Hamster::Set (which makes much more sense).\nCan you run the stackprof again, using the modified Nanoc this time? (50s isn\u2019t quite the original 18s, so it\u2019s worth investigating more closely.)\nIn the mean time, I\u2019ll work on a PR that uses Hamster::Set (and thus adds Hamster as a dependency, but I believe that\u2019s fine).\n. FYI, I\u2019m going to apply the patch to Nanoc 4.x only, as the problem also exists there, and Nanoc 4.x is the recommended version to use, and the Nanoc 4 upgrade guide should be easy to follow.\n. Fix in #887.\n. Looks like a significant amount of time is still spent in the checksummer. Does your site have items with lots of attributes (e.g. large YAML files)?\n. This will be faster in 4.2+, because the checksum is based off the unparsed item/layout attributes, and a checksum of a string is far faster than the checksum of a nested hash.\n. (FWIW, I don\u2019t understand the percentages in stackprof\u2019s output. 327.8% doesn\u2019t seem possible, but at least the relative %s seem to be correct.)\nEdit: https://github.com/tmm1/stackprof/issues/9 explains the cause.\n. Excellent\u2014seems like a net win in the end! I\u2019ll close this issue now.\n. Load testing shows that this is fine.\n. Hi! Could you share the source code for the rule that applies to /assets/js/components/contact-channel/contact-channel-link.ts? My assumption is that the arguments to the :tsc filter can\u2019t be reliably checksummed.\n. The tsc_output = './tmp/tsc-build' approach looks good to me! It\u2019ll indeed avoid the problem with passing in ever-changing arguments to #filter.\nA nil represents an object that was present in the site the last time the site was compiled, but not anymore. It might be worth logging all references and what object they resolve to here. (A reference is something returned by #reference, and an object can be an item, layout, code snippet, \u2026.)\n. I was able to reproduce this with a small example, and I\u2019ll try to come up with a fix (though I\u2019m out in the next few days, so it\u2019ll take a while).\nThe problem also occurs with a fresh site modified with these steps:\n1. Add the preprocess rule:\nruby\n   preprocess do\n     items.create('Hallo', {}, '/hallo.md')\n   end\n2. Add <p><%= @items['/hallo.*'].compiled_content %></p> to content/index.html\n3. Update the index compilation rule:\nruby\n   compile '/**/*.html' do\n     filter :erb\n     layout '/default.*'\n   end\n. The show-data does not preprocess and thus shows invalid data (does not show /hallo.md). Additionally, it doesn\u2019t properly show item rep paths and outdatedness, which is a bug.\n. Hmm, mutating params passed to a filter will indeed be a problem. I\u2019d disallow it entirely, if I could, but I\u2019m not sure that\u2019s realistic.\nDoes the problem persist if you stop mutating params in params.delete(:config_file)?\n. #881 is a PR that freezes filter arguments.\n. #884 has a fix for the Sass importer problem.\n. With both #881 and #884, I believe I can consider this issue as closed. Do you agree?\n. I\u2019ve created a separate issue, #885, for the dependency on generated items.\n. I\u2019ll close this for now, but do let me know if you still experience problems.\n. Makes sense! (Patches welcome :))\n. The ViewContext class is private, and thus not intended to be used externally. I can\u2019t guarantee that it\u2019ll remain there, or have the same API, or even the same behavior.\nWould it be possible to use a helper method for calculating the slug? slug_for(item) could still access both @item and @items, if needed.\n. This is not a bug I\u2019m willing to fix, given that it\u2019s part of a private API. The nil is intended, as that part of the code does not require the context to be fully filled in.\n. Thanks!\n. This is odd!\nCan you print the bytes of the string? My suspicion is that there is an invisible character in front of the slash.\n. Oh\u2014the error refers to the item_root or layouts_root in the configuration (which has to start with a slash). The error message itself is broken; a fix for that is coming up soon.\nReplace\nruby\n        raise InvalidPrefixError.new(@string)\nwith\nruby\n        raise InvalidPrefixError.new(string)\nand you\u2019ll get the actual error message.\nCan you share your nanoc.yaml (or config.yaml)?\n. PR for the fix of the error message is in #879.\n. @pmalik56 Is this issue resolved now? Haven\u2019t had the tim to look into this yet.\n. Looks good. Can you also add a test for this?\nThe failing tests are new Rubocop checks, which I\u2019ve fixed already, so if you rebase onto the master branch, these errors will go away.\n. I\u2019d welcome a PR that supports both Rouge 1.x and 2.x, as long as for Rouge 2.x, the formatter is not hardcoded to be the legacy one. So, plan B but also added non-legacy support.\n. I\u2019d prefer the formatter for Rouge to be customisable; only having the option to use HTMLLegacy isn\u2019t very attractive. Could be useful to pass the formatter in through params!\n. + tests please\n. Can you share the contents of layouts/pages/aihe1.erb?\n. Is this problem reproducible? Do you consistently get WeakRef::RefError? If so, does it always occur with the same stack trace?\n. I\u2019ve discovered the cause of the bug, and a fix is in #897.\n. Fixed in #897.\n. Hi! Can you try compiling with Nanoc 3.8 and see whether the slowdown also happens there? If so, this is likely a duplicate of #864.\n. Can you share the output of nanoc compile --debug? It will be pretty verbose, so perhaps a gist is better.\n. This is potentially related to #866.\n. @pmalik56 Is this issue still related to the slowdown in Nanoc 4.2.1? I\u2019m not sure I follow how the two things are connected.\n. @pmalik56 The Nanoc Google Group is the recommended place to get support, rather than GitHub; the latter is intended exclusively for issues.\n. @barraq What is the status of this PR?\n. This is great work!\nI suppose the only thing that\u2019s left is to only run the Rouge specs twice (rather than everything).\n. Question: How are the gemfiles/rouge_1.gemfile and gemfiles/rouge_2.gemfile files generated? Can they be auto-generated, or should they be checked in?\n. Looks great! Just some minor comments.\n. Done. Thank you for your effort!\n. Soon!\n. Done!\n. The #modified method on an item returns the item representations that were modified, rather than a boolean. Could it be the case that #modified returns an empty list (which is treated as true-y value)?\n. The documentation is wrong. I\u2019ll fix! It should be the following:\nruby\npostprocess do\n  modified_reps = items.flat_map(&:modified)\n  modified_reps.each do |rep|\n    update_search_index(rep.path, rep.compiled_content(snapshot: :last))\n  end\nend\nThe name of the #modified method is unfortunate. It\u2019d be good to have #modified? on Item and/or ItemRep, and perhaps rename #modified to #modified_reps.\n. - #modified_reps method: https://github.com/nanoc/nanoc/pull/898\n- Documentation fix: https://github.com/nanoc/nanoc.ws/pull/177\n. Also see #899, which is a test for the example on the Nanoc site.\n(Would be interesting to have this be evaluated automatically, but that\u2019s not the easiest thing to set up\u2026)\n. There\u2019s no supported way of having one filter output multiple files. It\u2019s an interesting idea, although I\u2019m having a hard time imagining a workflow that would fit in nicely with Nanoc.\nTo me, making the pruner more flexible seems like a step in the wrong direction, as it acknowledges a problem and works around it.\nWould it be possible for you to have separate filters, in separate reps, each with their own (single) output file?\n. Moved to nanoc/features#4.. Fix in #893.\n. Can you share the Rules file with me so I can take a look?\n. Can you show me where you are printing Compiling /aspa_Adobe_kayttoehdot.pdf? I can\u2019t see it in the Rules file that you posted.\nThe rules are often evaluated twice (or more) to identify the processing instructions that are used, although the actual compilation is only done once. I expect this to be the reason.\n. Is this line always printed exactly five times?\nCan you share the output of nanoc compile --debug?\n. FYI, this will happen far less in 4.2.4, thanks to #902.\n. Merged this into release-4.3.x. The tests still fail on Ruby 2.4, but will likely start working as soon as YAJL adds Ruby 2.4 support.\n. I\u2019m a bit hesitant to include defaults, because defaults have a tendency to not be appropriate in all cases, and might cause other kinds of confusion.\nPerhaps a solution for this is to ensure the documentation is extensive, and examples are provided.\nNote that you can also use #path rather than #identifier to get the output path, and filter on that (e.g. i.path =~ /\\.html$/).\nWhat I\u2019d do in your case:\n1.  Set error.sass and sitemap.haml to is_hidden: true\n2.  Change the #reject to a #select with this body:\nruby\n   @items.select { |i| !i[:is_hidden] && !i.binary? && i.path =~ /\\.html$/ }\n(Hopefully, that covers the case that you\u2019re after.)\n. > Maybe you can clue me in: the current behavior puts things like stylesheets into the sitemap. Is that the correct use of a sitemap, in any context? \nProbably not!\n\nI'm pretty confident that sitemaps are used to point to pages and user-viewable content, like a video or a photo, but not a stylesheet.\n\nI think limiting the sitemap to contain only html files makes sense. It\u2019d be a backwards-incompatible change, though.\nNow that I think about the solution that I gave earlier, I believe that it could be simplified to @items.select { |i| i.path.end_with?('.html') }. If not a default, it\u2019s definitely worth documenting as a recommendation.\n. The XMLSitemap helper documentation should now be more helpful in setting up an XML sitemap.\nI\u2019ve added the \u201crevisit in v5\u201d tag to the ticket, which means I\u2019ll look at it again when Nanoc 5.0 is coming up. In the mean time, I\u2019ll close the ticket, as a change to the behavior of the XMLSitemap helper is not possible without breaking compatibility, and thus not possible in Nanoc 4.x.\nLet me know what you think!\n. Oh yikes\u2014definitely a bug.\n. Fix is in #893.\n. Thanks for the bug reports, first of all\u2014they\u2019re most definitely useful, as Nanoc keeps getting better.\nI\u2019m a bit at a loss at what to do about the issues on Windows, though. I don\u2019t develop on Windows and don\u2019t know enough about this OS in order to support it properly. I\u2019d definitely welcome Windows-specific fixes, however!\n. I\u2019ll remove the win32console support\u2014it\u2019s deprecated (see its README) in favour of ANSICON anyway.\n. Oh, so I closed this ticket without fully verifying that it meets your requirements. Does removing win32console fix the issues you have? (I\u2019d rather not spend much time on getting older versions of Windows to work, especially considering that there\u2019s ANSICON.)\n. I\u2019d definitely be interested in profile information! This comment details an approach with Stackprof, which I found to be quite useful.\n. (Access to the site source would also be quite useful.)\n. Can you see whether #902 improves compilation times?\n. Excellent. Weak refs are far less useful than soft refs, as it appears!\n. FYI, Nanoc 4.2.4 will have a hidden feature, enabled by setting NANOC_FEATURE_PROFILER=1 in the env, which adds a --profile option to the compile command, writing a profile to tmp/stackprof_profile using StackProf. This\u2019ll make it easier to debug slowdowns.\n. I haven\u2019t looked into ruby-prof in a while. Last time I looked, it wasn\u2019t compatible with recent Rubies.\n. The #layouts method is expected to return a collection of layouts (e.g. an Array), rather than a single layout. This is why you get the undefined method 'each' error. Let #layouts return an array of layouts and this error will go away.\n. That\u2019s indeed a confusing error message. I suppose this is where \u201cduck typing\u201d falls short\u2026\nCan you give me a full trace of the error? (crash.log)\n. Fixed in #915.\n. Closing this for now, as it needs more thought and discussion.\n. Looks good!\nThe group name nanoc doesn\u2019t convey the idea that these are gems that will be automatically required. Perhaps a group namesautorequire?\nAdditionally, since Bundler is not a runtime requirement of Nanoc, Bundler.require(:nanoc) can potentially fail.\n. > > The group name nanoc doesn\u2019t convey the idea that these are gems that will be automatically required. Perhaps a group named autorequire?\n\nI'm not sure if such change would make a lot of sense. First, there is no guarantee that the entire Gemfile would not be autorequired; indeed, whether or not to require gems is a choice of an application using the Gemfile. Second, autorequiring groups of gems is, as far as I'm aware, literally the purpose of the Bundler group feature (e.g. see its docs), so that should not come as a surprise.\n\nThinking about it again, the group name nanoc makes sense (as in, these are the gems that nanoc will load by default).\n. This looks great! Can you ensure that the tests also test the new functionality?\n. Also, as I see this as either an enhancement or bug fix, could you base the branch of release-4.2.x, so that this ends up in the next 4.2.x release?\n. Thanks!\n. This is most likely an unintended consequence of #894.\n. Fixed in #917.\n. Oh, facepalm. res being nil will indeed throw a weird error (it\u2019s still an erroneous condition, but the message could be far more helpful).\n. Fixed in #916.\n. CC @agross \n. tl;dr #atom_feed is not intended to be run in the postprocessor\nThe @item variable not being available in the postprocessor is expected, as the postprocess does not run in the context of an item. The atom_feed method needs an item to obtain some feed details from.\nI suggest not running #atom_feed in the postprocessor. The postprocessor is mostly intended for running post-compilation steps that Nanoc doesn\u2019t take care of (e.g. updating a search index).\n. I created nanoc/features/issues/11 for this.. Nanoc indeed currently doesn\u2019t handle dependencies xsl:include. It needs to be done manually, and I fear that this might not be an easy task, since it needs to handle transitive dependencies as well.\nMarking as a bug, although it\u2019s arguably perhaps a lacking feature.\n. As a workaround, you can delete the tmp directory in between builds. That directory stores dependency information, and lack of dependency information means that Nanoc will do a full rebuild. For sure not ideal, but it\u2019ll help.\n. Ohh, I got this wrong. The problem is that there is not even a dependency from the item on the layout. A fix is coming up.\n. #996 has a fix for this issue.\n. Ack, nevermind\u2014I\u2019ve discovered a related issue, but the xsl:include elements not generating a dependency is still an open issue.\n. Accidentally automatically closed via a Git commit, sorry!. This issue is still relevant, but I believe that there is no way to fix this in a nice way. I have two ideas:\n\n\nMake the xsl filter depend on all items that have an xsl extension (either /**/*.xsl or item[:extension] == 'xsl'. This isn\u2019t nice because it might tax Nanoc\u2019s dependency generator a bit much.\n\n\nMark the xsl filter as always needing to be run, skipping the outdatedness check. This also isn\u2019t super nice, and requires some changes in Nanoc to support this.\n\n\nA proper solution might not be possible with Nokogiri (Nanoc would have to be able to generate the dependency graph of xsl:includes, which I don\u2019t think is possible).. I have a fix in #1127. This fix marks the xsl filter always needing to be run (always marking the item rep as outdated). This isn\u2019t ideal, but I couldn\u2019t find a simple way to make Nokogiri report its dependencies (finding all xsl:include/xsl:import).\nThe fix will be in Nanoc 4.7.1.. Fixing this also closed the last known open issue in Nanoc!. Correct\u2026 fixed in nanoc/nanoc.ws@f70a415. Thanks for reporting!\n. Looks interesting. Do you think it makes more sense to allow passing a custom formatter instance (formatter: Rouge::Formatters::Whatever.new(\u2026))?\nFYI: If you rebase on top of master, the build failures will go away.\n. I think my preference goes out for #880 rather than this PR, as it\u2019s more generic and solves the same problem.\n. I unfortunately can\u2019t reproduce the problem locally. Can you tell me how you can make zeus.ugent.be cause this crash, starting with a fresh clone?\n. I have a potential fix in the gh-927-layout-view-dep-tracker branch. Can you check whether this works for you?\n. Fixed in #931.\n. Fixed in #930. Thanks for reporting!\n. This\u2019ll end up in 4.3.1; I only made the fix after releasing 4.3.0.\n. This is now released in 4.3.1.\n. @anton-tsyganenko Sorry\u2014I did not see that you indicated a separate issue. I\u2019ve created a new issue for the problem you mentioned: #943.\n. Ruby 2.1 is no longer supported; my mistake.\n. Fixed in #934.\n. layouts_dir works fine and can be null, but layouts_root cannot be null. This is expected!\n. @gpakosz Good point. Nanoc can detect whether it runs in interactive mode (when using a tty), so it can avoid asking when run in an automated fashion.\n. The design of this will live in the metrics collection RFC, as is too large of an effort to implement without designing it first.\n. I have not been able to come up with a reproduction scenario for this bug, but as it seems like a plausible situation, I\u2019ve decided to merge it anyway.\n. This might be not so much of an issue if the caches are invalidated properly. For example, for Sass I believe that either the caches will not differ between environments, or Sass will know that it is invoked differently and invalidate the caches.\n. Also, Compass is deprecated and so I don\u2019t believe support for it should be added.\n. (wrong button)\n. I\u2019ll close this for now, as I don\u2019t believe this will be a problem. I added a spec in e1c9cdd that tests the behavior of Sass and caching with environments.\n. This situation is tricky to solve in a general way, because there\u2019s situations in which the expected behavior is not so clear. For example:\n1. Route one item to /foo\n2. Route another item to /foo/bar\nIn this case, the proper solution is to error out. (With whatever is the most appropriate error\u2014which might or might not be Errno::EEXIST.)\nFor this bug in particular, though, it seems that changing the order of pruning and compiling so that pruning is done first, rather than last, would solve the problem. The caveat here is that if pruning is not enabled, this error will still occur\u2026 which I believe is fine.\n. Fix in #946.\n. @anton-tsyganenko @elomatreb This is unfortunately a bug in w3c_validators rather than Nanoc (see https://github.com/alexdunae/w3c_validators/issues/16). Either this bug gets fixed, or we switch the html and css checks to use a different implementation (e.g. html-proofer).\n. #965 is a PR which replaces the w3c_validators usage with Nokogiri. Unfortunately, Nokogiri\u2019s validation mechanism is far weaker than that of w3c_validators\u2026\n. I\u2019m going to close this issue for now, as the problem exists in w3c_validators and there is no good/easy alternative to w3c_validators.\nFYI, for nanoc.ws I added vnu.jar and added a check that uses it: https://github.com/nanoc/nanoc.ws/commit/44ccc8b57dc826c259b68d65c814df2d3d403c8b\n. Reopening as there\u2019s an easy fix: add validator_uri:\nruby\nvalidator = MarkupValidator.new(:validator_uri => 'http://validator.w3.org/nu/')\n. A proper fix is coming up: https://github.com/alexdunae/w3c_validators/pull/18. I\u2019ll close this issue after all, as there\u2019s no expected work from the Nanoc side of things.\n. @anton-tsyganenko This is a bug in w3c_validators which is tracked by w3c-validators/w3c_validators#25. This is not a bug in Nanoc and there is, as far as I can tell, not much that Nanoc can do to fix or work around this problem.. Closing this for now, as I haven\u2019t made progress, and sadly bundle exec prevents autocompletion, which limits the usefulness of this.. Fixed in #949.\n. Can you change the base branch of this PR to be release-4.3.x please? This way, this change will end up in the next patch release.\n. Looks like something went wrong with changing the base branch (presumably, the commits were made on master rather than on release-4.3.x).\nI\u2019ve cherry-picked the commit and it\u2019s now on release-4.3.x!\n. Good point! I believe I\u2019ll go with describing how to activate helpers on the helpers reference page.\nThe reference is separate from the guide because the former is a rather long list that\u2019s mainly useful as reference material (which I don\u2019t think you\u2019d necessarily read through unless you\u2019re looking for something specific), while the latter is more conceptual documentation on helpers in general.\nIncluding the helpers by default would cause conflicts. I don\u2019t like the idea of pre-populating lib/helpers.rb as the helpers are fairly opinionated and I quite like the idea of having a bare-bones site.\nI suggest:\n- Adding a short description on how to enable helpers on the helpers reference page, and link to the helpers guide.\n- Adding a troubleshooting entry that deals with helpers not being available.\n. As a start, I\u2019ve added a note at the top of the helpers reference page:\n\n. I also added a troubleshooting entry. I\u2019ll mark this issue as complete now!\n. That happens when copying (rather than moving) content/index.html to content/index.md. Looks like you already figured it out though!\n. Question: what is the expected output of this command?\n- Human-readable\n- JSON\n- Ruby #inspect stuff\n- \u2026\n. Closing for now, as there\u2019s no good use case and open questions remain.\n. CC @jethrogb \u2014 this is the continuation of your PR that you originally opened!\n. Closing, as this is not a good enough check.\n. For an alternative, see https://github.com/nanoc/nanoc.ws/commit/44ccc8b57dc826c259b68d65c814df2d3d403c8b.\n. Looks good! There\u2019s a couple of style issues that Travis CI complains about still.\n. Does it make sense to provide the warning filters via the configuration file, rather than arguments to the filter call? That\u2019d make the dup dance unnecessary, and I guess it\u2019d avoid having to copy the filter warnings if you call the :kramdown filter more than once\u2026\n. I\u2019m OK with leaving it as a filter argument, as it\u2019s more flexible, and still leaves open the option for using the configuration in the way you described.\nIs this still WIP or is it ready to go?\n. Thanks for the fix!\nThe issue with item reps not being filled in has popped up before, and I\u2019ll see what I can do to make this less likely to happen.\n. I added two additional high-level regression tests in 7ffd07c230b36285dc2ab2e7e5f478858aafd2fa.\n. Which version of Ruby are you running?\nlib/nanoc/cli/commands/compile.rb does some icky tricks with the GC in order to speed up compilation. Usually the icky trick does a remarkable job, but perhaps it\u2019s blowing up in your case. Can you change GCController.enable_for? to return false, and see whether the problem persists?\n. Fix in #975.\n. Okay :(\n. Do you have large files that you load in memory in your site? Memory usage is the only thing that I can think of right now\u2026\n. I\u2019m regularly getting \u201ckilled\u201d errors on Travis CI now, so I\u2019ll investigate and fix those, hoping that it\u2019ll also benefit your case.\n. Two changes that made the Travis CI build more reliable:\n- https://github.com/nanoc/nanoc/commit/de2a354a124d965c1d8b7a3a624edfc163c237f8 \u2014 use conservative memory options\n- https://github.com/nanoc/nanoc/commit/3cb7ce8750975ecebd067a7ddea1cd4e9076aa1a \u2014 remove test that soaks up memory\nNot sure how much this helps. My assumption is that \u201ckilled\u201d in your case is related to memory usage.\n. Unsure. I\u2019m also unsure as to what kills the process (it\u2019s not ruby itself that does the killing). How much mem have you assigned to your VM? How much swap does it have?\n. Removing this from the 4.3.8 milestone as it does not occur reliably, memory options help, and workaround are available (increasing available memory). Will keep it open, however!\n. I\u2019ll close this, as I believe it\u2019s not a bug in Nanoc and can/should be resolved by increasing available memory for Nanoc. (Nanoc\u2019s memory usage will continue to decrease, but that\u2019s not directly related to this issue.). The improvements to reduce memory usage in Nanoc 4.6.1 should have made this better!. 4.6.1 is a couple of months old and I forgot to follow up. 4.7.4 is the current release and might also help.. Interesting: removing the GC speed hack leads to a 10%-20% speed improvement for nanoc.ws here.\n. Another useful enhancement is to repurpose the information in the dependency graph of the previous run. That\u2019s something I\u2019ve been meaning to do, but never got around to doing\u2026\n. The cause of this problem is illustrated by the new ItemRepSelector spec: in the last example, the item rep selector yields the same item :a over and over again:\nruby\nexpect(tentatively_yielded).to eq [:a, :b, :a, :c, :a, :d, :a, :e, :a]\nThe reason for this is that as of Nanoc 4.3.7, the initial set of item reps to recompile that is passed to the item rep selector is not every item, but only the outdated ones. Because of this, the item rep selector does not have enough information to realise that there are other items reps that might need to be recompiled before attempting to recompile :a, and so it has to recompile :a over and over again to find out more and more dependencies.\nRepurposing the dependency graph from the previous run, as mentioned before, would avoid this problem.\n. Fix in #985.\n. Fixed in #982.\n. The relevant parts of this PR have already made it to master.\n. Closing in favour of #985.\n. ~~~This change is not compatible with the presence of the compilation stack. It might be worth removing this stack.~~~\n. Makes sense! I prefer the former approach (the fewer configuration options, the better).\nI\u2019ve created #987 which adds a spec for the view command. I\u2019ll follow up with a PR that adds support for index.xhtml in a bit.\n. Implemented in #988. Thanks!\n. FYI: This behavior will change to read the index filenames from the index_filenames site configuration attribute in 4.4.1. (See #989, #998). Closing in favour of #995 + future work.\n. The documentation is available here.\nGitHub\u2019s issue tracker is intended for tracking issues, so for support requests, prefer the Google Group or the Gitter channel.\n. Maximum call stack size exceeded is an error from the JavaScript runtime which I\u2019ve started encountering in Nanoc as well, but I have never been able to reproduce it locally (only on Travis CI). I\u2019ve tried to figure out where this is coming from, but to no avail.. I\u2019ll see about setting up a Vagrant machine here and testing it out that way!. Can you do the following for me:\n\nMove the contents of reset.less into main.less\nDelete reset.less\nCompile\n\nDoes the same issue arise in this case as well?. Managed to reproduce the problem. This fails:\n```\nrequire 'less'\nFiber.new do\n  ::Less::Parser.new.parse(\"p { color: red }\").to_css\nend.resume\n```\nThis succeeds:\n```\nrequire 'less'\n::Less::Parser.new.parse(\"p { color: red }\").to_css\n```\nIt appears that the way fibers work is interfering with V8. Further investigation needed\u2026. Reported as cowboyd/less.rb#82.. Managed to reduce the error to V8:\n```\nrequire 'v8'\ncontext = V8::Context.new\nFiber.new do\n  context.eval(\"console.log('hi')\")\nend.resume\n```\nError:\nstuff.rb:6:in `block in <main>': Maximum call stack size exceeded (V8::Error). Strangely, defining context inside the fiber makes that snippet work.. Fixed in #1001.\n(Admittedly not the cleanest fix, but at least it works!). less_spec.rb now passes, but test_less.rb fails, with two distinct reasons:\n\nLess::Error: Maximum call stack size exceeded\nFiberError: dead fiber called. False hope: less_spec.rb fails too, sometimes.. Not quite working. I reported an issue to therubyracer: cowboyd/therubyracer#421.. Added a mechanism to make code execute on the main fiber, and made the less filter use it. This seems to work!. CC @RubenVerborgh \u2014 can you verify that this PR fixes your problem (#999)?. Will merge because I cannot reproduce the problem on Travis CI nor locally on a Debian VM.. The two new skipped Less specs are implemented in #1003.. The rule is intentionally triggered twice. Both times, the rule is evaluated with proxy objects, so that no actual compilation happens, but the intended actions are recorded. The recorded actions drive the compilation. For details, check out RecordingExecutor and the ProcessingAction subclasses. \n\nThe reason why the recording happens twice is so that the item rep path can be referenced in a compilation rule. This wasn\u2019t possible before v4.3.6, but #964 fixed that.\nEventually, a description of this process will end up on the Internals page\u2026. Oh, forgot to mention. The reason for recording actions first is twofold:\n\n\nBe able to identify relevant changes to the Rules file to prevent unnecessary recompilation\n\n\nDecouple the Rules file a bit more from the actual compilation process, so that it becomes more realistic to use a different approach for providing processing instructions to Nanoc.\n\n\nI\u2019ll close this issue for now, as I believe it\u2019s been resolved.. I prefer to use GitHub only for issues, and have discussions/support requests/questions\u2026\u00a0on the discussion group.. A solution that seems obvious to me at the moment is to not load data (checksums, compiled content, and dependencies) for items and layouts that don\u2019t exist anymore.. #1013 fixes the issue for the compiled content cache. Checksums still need to be pruned. Dependencies are already taken care of.. Checksums are pruned as of #1027, so this issue is resolved.. @connorshea I\u2019m OK with either! Dynamically resizable would be nice, though.\nPreferably without an external table generation gem. I prefer to avoid adding a dependency unless necessary, and even then I\u2019ll prefer reimplementing something in Nanoc to pulling in a dependency.. (You might be interested in https://github.com/nanoc/nanoc/blob/master/lib/nanoc/checking/runner.rb#L115 for inspiration). It seems like Bundler.require indeed kicks out stuff out of the LOAD_PATH. Bizarre! I\u2019ll need to continue investigating to find out more.. I feel that the bug is either in Bundler or the way it\u2019s used, but I can\u2019t quite tell how.\nI\u2019ll close it for the time being because a fix (or workaround?) is known, and I believe it is not something that Nanoc can fix.. Fixed in #1014.. Fixed by #1012.. #1011 adds support for non-legacy identifiers in #breadcrumbs_trail.. This will be in Nanoc 4.4.3.. CC @connorshea \u2014 This is a follow-up on the slow GitLab site compilation bug. (More work necessary to fix it properly, though.). CC @caseywilliams \u2014 I found this bug on your \u201cUsing Nanoc 4\u201d article.. Fixed in #1016.. I have a fix in #1059.. Replaced by #1059.. Replace the > (indicating folded style) with | (indicating literal style). In literal style, the line breaks will not be converted into spaces, while in folded, they will:\nyaml\nhead: |\n      <meta name=\"description\" content=\"description of this page\">\n      <style>/*here goes\n      some multi-line\n      styles only needed\n      on this page*/</style>\nSee the Scalar section of the YAML spec for details.. Reopening as #1038 was reverted (causing problems elsewhere too).. A fix is in #1046.. Merging this. If another 4.4.x release is needed, I\u2019ll create a branch.. Thanks! Turns out that I had parallel in Nanoc\u2019s Gemfile, which I\u2019ll also remove in a bit.. This is indeed wrong. The problem is not a missing nokogiri dependency, but rather that Nokogiri should be required when needed, rather than eagerly. Fix coming up.. This bug is sadly tricky to test for automatically.. Fixed in Nanoc 4.5.1.. The usefulness of this is debatable. Keeping this PR open for the time being.. The newly added telemetry does not reveal a significant slowdown when using this, which is good. I have not yet verified the memory impact of this, however.. Closing for now.. Definitely makes sense!\nThe way snapshot and write work together right now is a bit odd (and also the cause of #1037), so there\u2019ll probably need to be a bit of refactoring to make this behave as expected.\nI\u2019ve marked this as an enhancement rather than a bug, but I guess it could be either.. Migrated to nanoc/features/issues/14.. What would you think of allowing\nruby\ncontent_for(:head, 'some string')\nas an alternative to\nruby\ncontent_for(:head) { _erbout << 'some string' }\n? That\u2019d fit your use case, I believe.. @sunshineco The only way #content_for can be used right now is\nruby\ncontent_for(:head) { _erbout << 'string' }\ni.e. #content_for will figure out what is appended to _erbout, remove it, and put the addition into :head. This is the only way to be able to do\nrhtml\n<% content_for(:head) do %>string<% end %>\nThe return value of the block passed to #content_for is ignored. In other words, the following will not capture any content, and not output anything either:\nruby\ncontent_for(:head) { 'string' }\nA way to make this work outside of ERB could be to check whether or not _erbout is defined. If it is not, the return value of the block is used.. An alternate idea (not sure what I think about it) would be to introduce a from option that identifies where to take captured content from. For example:\n```rhtml\n<% content_for(:head, from: :erb) %>string<% end %>\n<% content_for(:head) %>string<% end %>\n```\n\nTo get it from the return value:\nruby\ncontent_for(:head, from: :return) { 'string' }\n\u2026 though I\u2018d rather infer the capturing method (erbout vs. return value) automatically.. I started working on a potential implementation in #1073. This one uses the format\nruby\ncontent_for(:head, 'string'). Fixed in #1073. This\u2019ll be part of Nanoc 4.6!. This is reproducible!. @item never had a #binary? method, but @item_rep did\u2014and it still does (see https://github.com/nanoc/nanoc/blob/764bc69d448e479afbf757c06096bb9a016492af/lib/nanoc/base/views/item_rep_view.rb#L77-L79), even though its implementation has changed in the commit you linked to, 764bc69d448e479afbf757c06096bb9a016492af.\nItem and ItemRep are both internal classes and not part of the public API.. Correct\u2026\u00a0I\u2019ve reported that as nanoc/nanoc.ws#192. Oh, I am mistaken\u2026 @item.binary? does exist, and it works in Nanoc 4.5.3 as well.\nCan you elaborate on how it fails for you?. The notifications are part of a private API and have indeed changed in 4.5.3. (Anything in Nanoc::Int is private.) Item and ItemRep both no longer have #binary?.\nWhat does Trans::set_language_from_id do? Perhaps I can help you find an alternative that does not require a private API.. Is this language variable a global? If so, you will likely run into issues, as Nanoc does\u2019t give guarantees about the order in which items are compiled, and can also suspend and resume compilation of an item if needed. When Trans::set_language_from_id is called for one item, but Nanoc then resumes compiling another item, the language of the other item might be incorrect. I am (slowly) working towards making Nanoc multi-threaded, which will make this effect even more visible.\nMy suggestion would be to have not have :sym.t but t(:sym) so that it can access the contex, and specifically @item, in order to determine the language needed for the translation:\n```ruby\ndef lang_of_item\n  # returns \"en\" or \"nl\" or so\n  @item.identifier.to_s.\u2026\nend\ndef t(sym)\n  # translate sym based on lang_of_item\n  # \u2026\nend\n``\n. You could use fiber-local variables (e.g.Thread.current[:lang]`) to store the current language. That\u2019ll persist between fibers being suspended and resumed. This way, you could have a filter that calculates the language for the current item and stores it in a fiber-local var, without having to rely on notifications.\n(There are not thread-local but fiber-local\u2014the naming is confusing.). With Nanoc 4.6, you can also capture the language of an item and reuse that later. For instance:\n```ruby\ncaptures the language (nl) for the current item\ncontent_for(:language, 'nl')\n```\nruby\n<!-- fetches the captured content -->\n<p>The language of the current item is <%= content_for(@item, :language) %>.</p>\nDetails:\n\nRelease notes for Nanoc 4.6\nCapturing helper reference. Ah, my mistake. The problem with the need for a global is still present...\n\nMy suggestion would be to modify Symbol#t so that it reads from a fiber-local variable.. @Fjan I\u2019ve created a separate issue for this (#1070). This PR can\u2019t be reverted as-is, as it reintroduces a bug.. @Fjan A fix is in #1071. There\u2019s no explicit invalidation going on, as it\u2019s not necessary.. Replace\nrhtml\n<%= link_to(itm[:ChapterTitle], itm.identifier) %>\nwith either\nrhtml\n<%= link_to(itm[:ChapterTitle], itm.path) %>\nor, even shorter,\nrhtml\n<%= link_to(itm[:ChapterTitle], itm) %>\nThis will create the link to the given item, using the path (rather than the identifier) of the item. Routing rules might route items to a path that isn\u2019t necessary the same as the identifier.\n(You can use nanoc check internal_links, or nanoc check ilinks for short, to verify that all internal links are still valid.)\n\nFYI, you can replace\nrhtml\n<% itm = @items.find { |i| i.identifier =~ chapStartRegex} %>\nwith\nrhtml\n<% itm = @items[chapStartRegex] %>\nIt behaves the same, and is a bit shorter.. Refactoring idea: passing in @config is ugly. Perhaps having @_context always available could be useful (and the rendering helper would then always pass @_context through).. @sunshineco Ergh, brain fart. Fixed!. Thank you, this is great!. I believe that this happens because #binary? needs the item to be compiled (because binary-ness of an item = binary-ness of its :last snapshot), and Nanoc doesn\u2019t require the item to be compiled, which can cause the :last snapshot not to be available, hence the nil:NilClass error.\nCan you try replacing lib/nanoc/base/views/item_rep_view.rb, line 83, which says\n@context.snapshot_repo.get(unwrap, :last).binary?\nwith\n@context.snapshot_repo.compiled_content(rep: unwrap, snapshot: snapshot).binary?\nand see whether the problem persists? If I\u2019m correct, that should fix the problem.. Ohh, my bad\u2026 that should have said snapshot: :last rather than snapshot: snapshot.. Argh, looks like I need to investigate this in a bit more detail. The error you\u2019re getting makes sense, but it\u2019s not quite what I had in mind :). I made a fix in #1083. It needs more test coverage and I need to dash, but it should work for you!. That should be fixed now!\nOn Feb 8, 2017 8:54 AM, \"sunshineco\" notifications@github.com wrote:\n\nHmm, perhaps I didn't apply the patches correctly locally, but I get this:\nNoMethodError: undefined method `binary?' for #\nStack trace:\n\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/repos/snapshot_repo.rb:58:in `compiled_content'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/views/item_rep_view.rb:47:in `compiled_content'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/views/mixins/with_reps_view_mixin.rb:16:in `compiled_content'\n\nTravis complained, as well.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nanoc/nanoc/issues/1082#issuecomment-278255600, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAYfTfguWcZUW660YmqhY-Kcs30REu5ks5raXTCgaJpZM4L6cgh\n.\n. The recursive compilation error is happens because the sitemap item itself is asking whether its own :last snapshot is binary, and in order to figure out, it needs itself to be compiled\u2026\u00a0a never-ending dependency.\n\nThe solution for this could be to figure out up-front whether or not a certain snapshot will be binary. To find out whether a snapshot of a certain item rep is binary, that item rep does not need to be compiled.\nNote that previously, Nanoc\u2019s behavior was wrong (although much simpler): the binary-ness of an item rep was the binary-ness of the item, rather than the last snapshot of the item rep; the binary-ness would thus be incorrect if any text-to-binary or binary-to-text filters are used.\nA workaround for this error would be to exclude @item from :rep_select.\n\nThe Errno::ENOENT does not ring a bell. I\u2019ve not seen it before and can\u2019t reproduce it right now\u2026. Thanks for the test case! That\u2019ll be useful.\nI\u2019m a bit pressed for time and won\u2019t be able to get to it in the next few days, but I\u2019ll look at it as soon as I have spare time.. A fix is in #1084. Can you verify that this works?. I am unable to reproduce your Errno::ENOENT crash, unfortunately, even with the script. :(. I\u2019ll merge this PR, as it is a step in the right direction. A proper fix, which involves being able to check the binary-ness of an item rep without needing it to be compiled first, is still pending.. Forward path references continue to be a pain\u2026 e.g.\nruby\ncompile '/foo.*' do\n  snapshot :raw\n  filter :relativize_paths, type: :html unless rep.path.nil?\n  write item.identifier.without_ext + '.html'\n  snapshot :last\nend\n(:raw and :last snapshots added for clarity.)\nThe issue is here is that rep.path is hard to predict. If it were to return a string, then the :last snapshot will have a path, while the :raw snapshot does not. This is in line with expectations.\nNow consider this example, where write and filter are inverted:\nruby\ncompile '/foo.*' do\n  snapshot :raw\n  write item.identifier.without_ext + '.html'\n  filter :relativize_paths, type: :html unless rep.path.nil?\n  snapshot :last\nend\nIf rep.path were to return a string, then the :last snapshot will not have a path. Inversely, if rep.path returns nil, then the :last snapshot will have a path. This contradicts itself!. I\u2019ve decided to not deal with the non-convergence issue yet. I believe this could be detected (i.e. if the paths have not yet converged after two attempts at calculating them, raise an error).. The :filename attribute is an alias for :content_filename, which will be nil if there is no content file. You can instead use :meta_filename.\nThis is missing from the documentation. Will fix!. I\u2019ve created nanoc/nanoc.ws/issues/196 to track this.. Migrated to nanoc/features/issues/10.. Hi!\nThe view classes (such as ItemWithRepsView) are not intended to be modified or subclassed, and so the code you\u2019ve provided has no guarantees of working.\nMy recommendation would be a sidebar_image helper:\nruby\ndef sidebar_image_for(item)\n  @items[\"/assets/images/articles#{item.identifier.without_ext}.*\"]\nend\nSuch a function would be used in a similar way:\n```haml\n- if sidebar_image_for(@item)\n  = sidebar_image_for(@item).path(rep: sidebar)\n````. @agross I personally find it nice to define the functions at the top level and not care about potential clashes (it won\u2019t interfere with methods defined on objects).\nIf that\u2019s not an option, an alternative could be to have a module with module functions on it, e.g.\n```ruby\nmodule NanocWs\n  module_function\ndef sidebar_image_for(item)\n    @items[\"/assets/images/articles#{item.identifier.without_ext}.*\"]\n  end\n# \u2026 other methods here \u2026\nend\n```\nYou can then use it as\nhaml\n- if NanocWs.sidebar_image_for(@item)\n  = NanocWs.sidebar_image_for(@item).path(rep: sidebar)\nor, after include NanocWs, call it without module name, as before:\nhaml\n- if sidebar_image_for(@item)\n  = sidebar_image_for(@item).path(rep: sidebar). > Unfortunately, for the \"non-included\" case NanocWs.sidebar_image_for(@item), @items appears to be nil. Any ideas (other that passing @items to sidebar_image_for?\nAhhh, correct. You\u2019ll have to pass in @items:\n```ruby\nmodule NanocWs\n  def self.sidebar_image_for(item, items)\n    items[\"/assets/images/articles#{item.identifier.without_ext}.*\"]\n  end\n# \u2026 other methods here \u2026\nend\n```\n\u2026 or stick with the include approach (which is IMO nicer).. include won\u2019t cause any methods to be overwritten. For example:\n```ruby\nmodule Foo\n  def reverse\n    'hah fooled'\n  end\nend\ninclude Foo\nputs 'hello'.reverse\n=> olleh\n``. This is an issue in ddplugin: ddfreyne/ddplugin#3.. ddplugin 1.0.1 fixes this!. Definitely a good suggestion\u2014I\u2019m unsure why I initially decided to go with snake_case rather than kebab-case here.. Migrated to nanoc/features/issues/13. There\u2019s a method#depend_oninNanoc::Filter` which does what you need:\n```ruby\nclass WhatTheSassFilterWouldDoIsThis < Nanoc::Filter\n  identifier :test\ndef run(content, args = {})\n    other = @items['/dependency.html']\n    depend_on(other)\n    # \u2026 do something with other.path \u2026\n  end\nend\n``. (Using something such as@@counteris unlikely to work due to thread safety issues.). Reopening for now.. I\u2019ve created #1097, which I believe is a minimal reproduction of the issue you\u2019re seeing.. I believe they are two unrelated issues. #1093 is a problem withFilter#depend_on, while#1097is a problem withItemRepView#raw_path.. I\u2019ll close this issue for now (replaced by #1093 and #1097).. Migrated to nanoc/features/issues/9.. I\u2019m unsure how to reproduce this. Can you try whether the issue also exists onmaster, and if so, could you provide a reproduction (a small one is preferred, but not required).. Any reproductions that work withmaster` would be incredibly valuable!\nI know that @gpakosz is also experiencing this issue.. I have a reproduction case!. A (WIP) fix is in #1109.. This is expected, as the filesystem data source adds a :mtime attribute, which will have changed when touching.\nThe proper solution for the incorrectly triggered outdatedness due to dependencies would be for Nanoc to track dependencies on a per-attribute basis, so that unused attributes won\u2019t trigger outdatedness.\n(The thought to adding a config option to the filesystem data source to disable :mtime crossed my mind, but that\u2019s a poor workaround.). The new Nanoc 4.7.4 release improves this, as it will cause attribute dependencies to be only triggered if relevant attributes have changed.. I haven\u2019t taken a very close look, but running Erubi with bufvar: '_erbout' should work with the capturing helper.. Migrated to nanoc/features/issues/8.. FYI, I think that using Filter#depend_on is a smell, and Nanoc should not need it. Once Nanoc\u2019s #raw_path ensures the file exists (which you probably want if you\u2019re using #raw_path), then #depend_on might become obsolete.. @agross #1099 will!. > I have n items that need to be compiled, but I don't want to reference all their paths.\nThese two will have the same effect:\ndepend_on(items)\nitems.flat_map(&:reps).flat_map(&:raw_paths)\nI might make depend_on do exactly that behind the scenes!. Update .rubocop to exclude the the Security/Eval check for this file:\nSecurity/Eval:\n  Exclude:\n    - 'test/**/*.rb'\n    - 'spec/**/*.rb'\n    - 'lib/nanoc/base/entities/code_snippet.rb'\n    - 'lib/nanoc/filters/erubi.rb'. Looks good! I\u2019ll release this as part of Nanoc 4.7.. @Fjan I forgot to attribute you in the release notes for 4.7, but it\u2019ll be rectified in the 4.7.1 release notes (see e753887880bea7be92fab871c5c6f41e21f322d6). Sorry!. Ah, the room-heating feature!\nDo you have reproduction that I can use for debugging this issue? I\u2019m not able to reproduce it locally.. The compile block being called twice for every item rep is expected; this is part of the initial process of recording the compilation rules and paths. Once that process is complete, the actual compilation will start.\nWhat strikes me as odd is that this is supposed to be quite fast (on the nanoc.ws site, the entire process takes about 1s).. It seems like I already fixed this on master earlier, because I cannot reproduce this any more for the Promcon web site:\nSite compiled in 0.55s.. Yeah, looks like this was the culprit: b83ac1817ed70c4eec0bb53f1e0d22a9e1c7b27a.. I\u2019ll close this for now, but LMK if this is still a problem!. This is released in Nanoc 4.6.3.. Yeah, this one\u2019s tricky to solve while keeping the API the same. I propose changing the API so you can do\n```ruby\nctx.create_item('item', {}, '/index.html')\nctx.create_item('item2', {}, '/index2.html')\nfirst = ctx.items['/index.html']\nsecond = ctx.items['/index2.html']\n```\nI like the idea of create_item not modifying the context, so I\u2019d like to keep it that way.. I assume you mean something like this:\n```ruby\nctx = ctx.create_item(\u2026)\nctx.items['/index.html']\n```\notherwise, you\u2019d still be modifying ctx!\nI\u2019m okay with code that mutates objects, as long as it\u2019s explicit in doing so. The old #create_items implementation wasn\u2019t explicit in its mutation, and that\u2019s one of the reason why it broke.\nI have a slight preference for the API that has mutation, because it\u2019s simpler.. I don\u2019t feel that a purely functional approach buys us much, and it makes things more complicated. This is especially true in tests, where the set-up logic is typically small and straightforward.\nI like your idea of chaining, though. Perhaps this could work:\n```ruby\nctx\n  .create_item(\u2026)\n  .create_item(\u2026)\nfirst = ctx.items['/first.html']\nsecond = ctx.items['/second.html']\n```\nIf, for some reason, having a mutable ctx is not desired or not an option, it\u2019s always possible to create a separate one that will not be mutated, with HelperContext.new.. A potential fix is in #1112.. Suggested solution:\n\n\nReplace\nruby\nraise Nanoc::Int::Errors::RecursiveCompilation.new(graph.vertices)\nin item_rep_selector.rb with\nruby\nraise Nanoc::Int::Errors::DependencyCycles.new(graph.cycles)\n\n\nAdd DirectedGraph#cycles (returns a list of cycles, represented as an array)\n\n\nRename Nanoc::CLI::ErrorHandler#resolution_for to Nanoc::CLI::ErrorHandler#details_for\n\n\nMake Nanoc::CLI::ErrorHandler#details_for print the cycles\n\n\nAll of this with proper tests.. Cool side-effect: managed to resolve a FIXME about the --verbose output being incorrect when compilation gets suspended during filtering.. There\u2019s a problem with timing phases, because they can be suspended with no easy way of knowing when they are suspended. For example:\n--- phase_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> mark_done\n--- phase_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> write\n--- phase_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> resume\n--- compilation_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\">\n--- phase_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> cache\n--- phase_started <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> recalculate\n--- compilation_suspended <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\">\n--- phase_ended <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> resume\n--- phase_ended <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> write\n--- phase_ended <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/404.html\" item.identifier=\"/404.dmark\"> mark_done\nThe resume/write/mark_done phases are unrolled, but not the cache/recalculate ones, because the suspension is handled by the resume phase.. The issue is that the na\u00efve approach in the timing recorder assumes that for every phase_started, there is a phase_ended in compilation_suspended, which is not true:\n```\n--- phase_started  mark_done\n--- phase_started  write\n--- phase_started  resume\n--- compilation_started \n--- phase_started  cache\n--- phase_started  recalculate\n--- compilation_suspended \n--- phase_ended  resume\n--- phase_ended  write\n--- phase_ended  mark_done\n--- phase_started  mark_done\n--- phase_started  write\n--- phase_started  resume\n--- compilation_started \n--- phase_started  cache\n--- phase_started  recalculate\n--- phase_ended  recalculate\n--- phase_ended  cache\n--- phase_ended  resume\n   identical  [0.63s]  output/release-notes/details/index.html\n--- phase_ended  write\n--- phase_ended  mark_done\n--- phase_started  mark_done\n--- phase_started  write\n--- phase_started  resume\n--- compilation_started \n--- phase_ended  recalculate\n--- phase_ended  cache\n--- phase_ended  resume\n   identical  [0.04s]  output/404.html\n--- phase_ended  write\n--- phase_ended  mark_done\n``. Further bit of complication. I\u2019ve attempted to take suspended compilation into account by storing a hash (rather than a stack) of stopwatches, per phase. This works well to track the total duration of a phase, but not when attempting to compensate for the duration of a child phase (e.g. subtractwritefrom the duration ofmark_done, to get a better idea of how longmark_doneactually takes). The issue is that there can be two or moremark_done/write/resumephases for a singlecache/recalculatephase if compilation gets suspended, and so the duration ofcachewill appear to exceed the duration ofresume.. Ahh, the solution was pretty simple: don\u2019t recreate existing stopwatches formark_done/write/resume, but rather resume the existing ones. Easy!. Correction: Need both stopwatches for the individualmark_done/write_resume` runs (reset), and for calculating the child duration (resume).. Will handle phases in #1121 instead (still WIP).. I can\u2019t reproduce this in Nanoc 4.6.4. Is this the version you\u2019re using?\n```\n% nanoc co --verbose\nLoading site\u2026 done\nCompiling site\u2026\n      create  [0.09s]  output/a/index.html\n      create  [0.01s]  output/b/index.html\n      create  [0.00s]  output/index.html\nSite compiled in 0.14s.\n% touch content/a.md\n% nanoc co --verbose\nLoading site\u2026 done\nCompiling site\u2026\n   identical  [0.07s]  output/a/index.html\n        skip  output/b/index.html\n        skip  output/index.html\n``. What doesnanoc show-datashow you w.r.t dependencies for a.md and b.md?. Ahh, my bad\u2014I hadcontent/index.htmlrather thancontent/index.md, which made it not be filtered with:erb`. I can reproduce what you\u2019re seeing now.\nI see this:\n```\n=== Item dependencies =======================================================\nLegend:\n  r = dependency on raw content\n  a = dependency on attributes\n  c = dependency on compiled content\n  p = dependency on the path\nitem /a.md depends on:\n  [ layout ] (r___) /default.html\nitem /b.md depends on:\n  [ layout ] (r___) /default.html\nitem /index.md depends on:\n  [   item ] (ac) /a.md\n  [   item ] (ac) /b.md\n  [ layout ] (r___) /default.html\n```\n```\n=== Item representation outdatedness ========================================\nitem /a.md, rep default:\n  is outdated: The attributes of this item have been modified since the last time the site was compiled.\nitem /b.md, rep default:\n  is not outdated\nitem /index.md, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\n```\nb.md is recompiled because index.md is recompiled, and it needs the compiled content of b.md. That\u2019s expected, but because b.md is not considered as outdated, the cached compiled content will be used, so it should be quite fast. You can see this with --debug:\n% nanoc co --debug\n\u2026\n*** Suspended compilation of <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/index.html\" item.identifier=\"/index.md\">: The current item cannot be compiled yet because of an unmet dependency on the \u201c/b.md\u201d item (rep \u201cdefault\u201d).\n*** Started compilation of <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/b/index.html\" item.identifier=\"/b.md\">\n*** Used cached compiled content for <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/b/index.html\" item.identifier=\"/b.md\"> instead of recompiling\n*** Ended compilation of <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/b/index.html\" item.identifier=\"/b.md\">\n\u2026\n. > Maybe it would make sense to display \"cached\" instead of \"identical\" in the compilation log in this case\nAbsolutely! I opened #1120 for that.. @gpakosz That could work, but I fear it might be a bit long.. Migrated to nanoc/features/issues/12.. This refactoring might also make it easier to declare the stack of phases in a nicer way (I\u2019d love to have, literally, stack = MarkDone >> Write >> Resume >> Cache >> Recalculate.). The coverage failure is addressed in a770a5467e6a67315d26bb2c8186b6f48fa3e758.. Patch coverage check fails because of an unreachable code patch which deliberately raises an exception.. Further refactoring and speed improvement is possible, but I will leave this to a separate PR.\nI intend to remove #outdatedness_reason_for and #basic_outdatedness_reason_for first, in a separate PR, as these methods are no longer useful.. Closing, as it needs far more work.. Better fix in #1149.. Am I correct when I say that this only occurs with --verbose?\nThe key name being trimmed is something that Ruby does, I believe.. Could you share the section of the Rules file that applies to /assets/css/app.sass?\nI\u2019m having a hard time creating a reproduction case, although I know what is going on (and potentially how to fix it).. Ahh, #depend_on is expected to be called in #run, not #initialize. That\u2019ll indeed cause such an error (because it\u2019ll generate a dependency before the filter is called).\nI suggest moving the #depend_on call to #run. I\u2018d like to prevent #depend_on from being called in #initialize, but I\u2019m not sure how that\u2019ll work out.. I\u2019ve created nanoc/features/issues/16 so I remember that this can be a problem, but I\u2019ll close this ticket for now.. I\u2019ve decided that even if this works, it\u2019s not the right approach. Methods that aren\u2019t explicitly intended to be overridden, should not be overridden, and classes that are not explicitly intended to be subclassed, should not be subclassed.. <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> shouldn\u2019t cause the HTML to be invalid. I can\u2019t reproduce the issue locally. Can you show me how it fails?. Nokogiri doesn\u2019t support HTML5, so this is expected behavior.\nIdeally, Nanoc would use Nokogumbo, but I\u2019ve had trouble getting that one to work, and I believe it\u2019s incompatible with JRuby as well.\nIf you need the meta tag removed, you could write a filter that removes the <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">.. Take a look at #1153, which uses Nokogumbo (a HTML5 parser) instead of Nokogiri, and thus avoids the meta problem.. This is a dead end\u2026 Nokogiri\u2019s serializer is the one that adds <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">, even when using a HTML5 parser.. ~~Curious\u2014It seems that #to_s does not add the meta tag, while #to_html does.~~\nEdit: nevermind \u2014 not quite!. This is released as part of Nanoc 4.7.6 now.. @Fjan Let me know how this works for you! I\u2019ll merge and release afterwards.. CC @Fjan \u2014 This should bring down compilation speed a little more.. Could you elaborate on the use case for making meta_ext customisable?\nI\u2019d like to limit the number of configuration options in Nanoc to a minimum, and so I\u2019m hesitant to approve this change unless it solves a real problem.. @vsuhachev Is there a reason why using yaml is not possible for you?. FWIW, the YAML FAQ indicates .yaml as the preferred extension:\n\nIs there an official extension for YAML files?\nPlease use \".yaml\" when possible.. The Filesystem class isn\u2019t intended to be subclassed (it\u2019s part of a private API).\n\nCould you elaborate on the use case that you have for this change?. @vsuhachev Would it be possible for you to do some pre-processing on the files so that they all have the same encoding (UTF-8)?. I\u2019ll close this PR for now, but I\u2019m happy to keep the conversation going!. The stream cleaners should indeed support malformed strings. String#scrub seems like a good use! Will fix.. This change makes the helpers not available in the Rules file. Making them available there would still be useful.. This needs additional tests to verify the behavior of use_helper.. Looks good, thanks!\nI\u2019ll add a test for it and merge it to master.\n(FYI: The build was broken due to a problem with master (5d2146b80e037257239550eff68c8382336cc3c4 and 5dd0a742edce70156376770105b9093d5492cfc7, unrelated to your changes), which I\u2019ve fixed now.). Merged!. Looks good so far!\nAs for the failing test,\nruby\n      assigns = {\n        layout: layout\n      }\nneeds to become\nruby\n      assigns = {\n        layout: layout,\n      }\n(trailing comma), or\nruby\n      assigns = { layout: layout }. Thanks!\nI\u2019ll look into .rubocop \u2014 some cops have changed namespaces recently.. > \u2026the VS Code rubocop plugin (which uses rubocop 0.48.1) reports this for .rubocop.yml:\n\n\nLayout/IndentArray has the wrong namespace - should be Style\n\n\nThat\u2019s odd\u2014the .rubocop.yml file does not even mention IndentArray!. Oops, my bad\u2014take a look at bbatsov/rubocop/pull/4278, which changes the namespace from Style to Layout. I\u2019m using Rubocop from GitHub, so I suppose that\u2019s the reason!. I\u2019m concerned about this change because it changes existing behavior (\u201coverwrite\u201d becomes \u201cmerge\u201d), and the change is therefore not backwards-compatible.\nAn alternative suggestion would be to qualify how the parent file gets loaded. For instance:\nparent_config_file:\n  filename: _factory/nanoc.yaml\n  method: merge\nparent_config_file:\n  filename: _factory/nanoc.yaml\n  method: overwrite. It turns out that parent_config_file is not documented at all.. Makes sense! Given that\n\nthis hasn\u2019t been documented\nmaking this change breaks no tests\nthere is no usage of parent_config_file anywhere\n\n\u2026 I\u2019m OK with treating this as a bug fix instead.\nThe config loader specs are in config_loader_spec.rb; could you add relevant tests there?. Looks good!. Makes sense!\nAn alternative could be to perform a HEAD request and fall back to GET if the HEAD returns a 404, but I don\u2019t see the benefit of doing that over doing a GET in the first place.\nI\u2019ve opened PR #1179 to fix this.. @dmathieu I don\u2019t think that setting a custom user agent would bring much. Do you have a use case for it?. This triggers jruby/jruby#4108.. Alternative idea: Let the directed graph only contain references, e.g. [:item, '/foo.md'].. This breaks equality (two objects can be equal even if their hash is different). The directed graph will now store only references, rather than objects themselves.. CC @gpakosz \u2014 this is the issue you were seeing (the bug report is incomplete but I\u2019ll finish it later). I missed the main term from the PR title:\n\nHandle dependencies on item/layout collections\n\nnot\n\nHandle on item/layout collections\n\n:|. Hi, thanks for reporting!\nThe behavior of the code depends on the identifier_type and the string_pattern_type, and the documentation doesn\u2019t clearly state which ones are used. (The legacy ones are used, but that shouldn\u2019t be the default!)\nAction points for me:\n\nupdate the documentation to use identifier_type: full and string_pattern_type: glob\nclearly state which identifier_type and the string_pattern_type is used\nfind out which other pieces of documentation (if any) implicitly rely on legacy identifier type/string pattern type.. The following changes to the documentation should take care of this issue:\n\nhttps://github.com/nanoc/nanoc.ws/commit/b35168d32391f8099fa3e501c30c7eb00a6a8120\nhttps://github.com/nanoc/nanoc.ws/commit/5d044ddf518b06bd87be43d3fe051b79fb55d0e7\nhttps://github.com/nanoc/nanoc.ws/commit/1934d1ef8f2730a11346b425dd5bed4520618e78\nhttps://github.com/nanoc/nanoc.ws/commit/d12b3cedeb9f857fff17c344c110023ed15f08bd. Needs more thought; will work on this later.. Further work will require a mechanism for testing Nanoc against nanoc-rust, but this might come later.. Not worth it.. It\u2019s true that one filter can only generate one piece of output; in this case, the filter would either return the CSS, or the sourcemap.\nAs a way around this, for now, you can use multiple representations (in this case I\u2019ve opted for rep: :sourcemap):\n```\ncompile '/stylesheets/*.scss' do\n  filter :sass, syntax: :scss\n  write item.identifier.without_ext + \".css\"\nend\ncompile '/stylesheets/*.scss', rep: :sourcemap do\n  filter :sass_sourcemap, syntax: :scss\n  write item.identifier.without_ext + \".css.map\"\nend\n```\nThis assumes that the :sass_sourcemap filter writes out the sourcemap.\nI\u2019ve created nanoc/features/issues/17 to track the idea of filters with multiple output files.. This isn\u2019t known and it\u2019s not fine!\nI checked the current behavior and it\u2019s as follows:\n\nnanoc deploy -C is equal to nanoc deploy --no-check \nnanoc -C deploy is equal to nanoc --no-color deploy\nnanoc --no-check deploy errors (as expected)\n\nThe Nanoc CLI pick the most specific option (-C becomes --no-check), which makes sense, but unfortunately makes it hard to fix this bug without potentially breaking things.\nI suggest leaving it as-is, but adding a test to ensure that no such situations arise in the future, and then hopefully fix it properly in 5.0. WDYT?\nDenis. Found another case: nanoc help:\n```\nOPTIONS\n\n-v --verbose          show more detailed help\n\nOPTIONS FOR NANOC\n    -C --no-color         disable color\n\n-V --verbose          make output more detailed\n    -d --debug            enable debugging\n    -e --env=      set environment\n    -h --help             show the help message and quit\n    -l --color            enable color\n  -v --version          show version information and quit\n    -w --warn             enable warnings\n``. And another one,nanoc check` (this is the last):\n\n```\nOPTIONS\n    -L --list             list all checks\n    -a --all              run all checks\n\n-d --deploy           run checks for deployment\n\nOPTIONS FOR NANOC\n    -C --no-color         disable color\n    -V --verbose          make output more detailed\n\n-d --debug            enable debugging\n    -e --env=      set environment\n    -h --help             show the help message and quit\n    -l --color            enable color\n    -v --version          show version information and quit\n    -w --warn             enable warnings\n```. > What about commands added by plugins? If you ever add another global nanoc option that could lead to conflicts.\n\nThat\u2019s a good point. I feel that all plugins that add Nanoc commands should have a test that verifies that it does not accidentally override a parent command\u2019s options. That probably means Cri should have built-in support (at least for Rspec) for this kind of test!. I\u2019ve created ddfreyne/cri/issues/59 to track progress on a feature in Cri that prevents clashing options.. CC @whitequark \u2014 this is what I mentioned in #1204.. Good catch\u2014I\u2019ve started work on a fix in #1212.. The overlap between #load_site and #site has always bothered me. Looks like I finally got bit by it.\nI\u2019ll leave this issue open until I have a proper refactoring that makes this code less brittle, and makes the tests cover this case in a nice way.. PR #1213 improves the situation by not making #load_site bypassable.. There\u2019s a missing require 'cgi' in Nanoc. Fix forthcoming.\n(The reason why this wasn\u2019t caught earlier is because the automated tests likely indirectly load cgi.). Fixed by f94503b8e3a5a7351d34cb5f04ad86f3b14ab92e \u2014 unfortunately tricky to test automatically.. Oh duh, the test assumes that the filesystem returns files in the order that they were written in, which isn\u2019t always true. Fix coming up.. e6d5c6e301eb5cb06f9e397392e68ac219a07bf6 should fix this. I can\u2019t reproduce it locally; can you give it a try for me?. This is not a bug, but expected behavior.\nNanoc does not track dependencies on global state. This includes, among others:\n\nThe current date/time (e.g. <%= Time.now %>)\nEnvironment variables (e.g. <%= ENV['PATH'] %>)\nData read directly from the filesystem (e.g. <%= File.read('content/about.md') %>)\nData read over the network\nGlobal variables (e.g. <%= $0 %>)\nData obtained from invoking other programs (e.g. <%= `ruby --version` %>)\n\nThe recommended approach to ensure dependencies are tracked properly, is to stick the content in @config during preprocessing, e.g.\nruby\npreprocess do\n  @config[:now] = Time.now\nend\n\u2026\u00a0and then use it later, when needed:\nrhtml\n<p>\n  Current date and time:\n  <%= @config[:now].strftime('%d.%m.%Y %H:%M') %>\n</p>. Also see nanoc/nanoc.ws/issues/148, a documentation issue I\u2019ve sadly been neglecting.. @th-h It worked by accident in 3.x.. I\u2019ve applied the changes and merged it into master! Thanks for the quick contribution!. CC @BenjaminDebeerst \u2014 this\u2019ll be fixed in the 4.8.10 release.. Looks good, thanks for contributing!. Removing #raw_path (#1229) does\u2019t quite work because #raw_path has a good use case.. Hmm, Nanoc doesn\u2019t bother with file permissions at all. The fact that binary items retain their permission is only incidental.\nThe question here is whether or not it makes sense for Nanoc to support file permissions. This would be a larger undertaking, and would require some thought on how to make this work. For example, how would a :chmod filter work? Should ACLs be supported, and if so, on which platforms?\nI\u2019m inclined to not consider this a bug, but rather a feature request.\nFor the time being, I recommend doing some post-processing to chmod whatever is necessary. You can also use nanoc check with a custom check to ensure that the permissions are set up properly before a deploy.. I looked briefly at what it would take to implement permission handling in Nanoc. There\u2019s no simple way to make it work; it\u2019d require changes in the core entities (Item, ItemRep), data sources, core services (checksummer, dependency tracker, outdatedness checker), and probably elsewhere.\nThis is true even for the most trivial implementation of permissions.\nThis is a missing feature, not a bug (though the distinction between the two isn\u2019t clear cut). I\u2019ve created nanoc/features/issues/23 to track this.\n\nAs for postprocessing: a simple approach would be to invoke chmod after executing nanoc. The postprocess block is an alternative (available variables are documented here) though a bit overkill for this use case.. I\u2019ll close this issue, but I\u2019m happy to keep the conversation going, either in this thread or in nanoc/features/issues/23.. @sunshineco That\u2019s correct \u2014 I\u2019ve updated the documentation (https://github.com/nanoc/nanoc.ws/commit/7f139f537f098fee13b27d2c8252045dd74734a7) to make that more clear.. Hi,\nFirst of all, please note that this touches internal APIs, which are not supported and can (and will) break from time to time.\nWould it be possible for your code to access @config directly instead?. Your approach of modifying internal classes is problematic for two reasons:\n\n\nYour code might break in every patch release of Nanoc.\n\n\nThe behavior that you are relying on (view context, compilation_context, \u2026) can have unintended and harmful consequences. In your particular case, accessing the configuration through the compilation context bypasses the dependency tracking mechanism.\n\n\nI strongly recommend not modifying existing classes. In your case, prefer absolute_url_for(item) over item.url(absolute: true). I understand that this not the style that you want, but it is the only one that Nanoc supports.\n\nI assumed that everything outside of Nanoc::Int is public, but I see this class is not documented -- so I guess it's meant to be internal.\n\nEverything inside Nanoc::Int is internal, but there are also classes outside of Nanoc::Int that are private. They\u2018ll be marked with @api private \u2014 but even if they aren\u2019t, it\u2019s a good bet to assume that they are also private. The only public API is documented on the Variables page on the Nanoc web site.. There\u2019s a few changes that you\u2019ll need:\n\n\nPut your helper in a module, and then use that as the argument to #describe. Also pass helper: true:\n```ruby\nmodule AbsoluteURLHelper\n  def absolute_url_of(item)\n    # \u2026\n  end\nend\ndescribe AbsoluteURLHelper, helper: true do\n  # \u2026\nend\n```\n\n\nNo need for instance_exec etc. You can call the helper directly:\nruby\nexpect(helper.absolute_url_of(item)).to eq('/some/specific/place.html'). Also, prefer item[:forward] to item.attributes[:forward].. Full spec that works:\n\n\n```ruby\nmodule AbsoluteURLHelper\n  def absolute_url_of(item)\n    append =\n      if item[:forward]\n        @items[item[:forward]].path\n      else\n        item.path\n      end\n@config[:base_url] + append\n\nend\nend\ndescribe AbsoluteURLHelper, helper: true do\n  let(:item) { ctx.items['/index.html'] }\n  let(:target) { ctx.items['/somewhere/else.html'] }\nbefore do\n    ctx.config[:base_url] = '/root'\nctx\n  .create_item('item', { forward: '/somewhere/else.html' }, '/index.html')\n  .create_item('target', {}, '/somewhere/else.html')\n  .create_rep(item, '/path/to' + item.identifier.to_s)\n  .create_rep(target, '/path/to' + target.identifier.to_s)\n\nend\nit 'yields URL of forwarded item' do\n    expect(helper.absolute_url_of(item)).to eq('/root/path/to/somewhere/else.html')\n    expect(helper.absolute_url_of(target)).to eq('/root/path/to/somewhere/else.html')\n  end\nend\n``. You can leave theinclude Nanoc::Spec::HelperHelperout, too, by the way. (Already taken care of withhelper: true.). Ifhelper: trueis passed to adescribeblock,Nanoc::Spec::HelperHelperis included (mixed in) automatically, which makesctxandhelperavailable. This will only work with Nanoc\u2019sspec-helper.rb`, as you mentioned.\nYou can also opt to not use helper: true and include Nanoc::Spec::HelperHelper directly.. Will merge this as I see no objection to this.\nIf the Appraisals setup is needed at a later point in time, it can always be reinstated easily.. I\u2019ve experienced bundle exec within bundle exec acting up weird. I suggest either\n\ncalling foreman as foreman rather than bundle exec foreman\nediting the Procfile to not include bundle exec\n\nMy preference goes out to the former. Can you let me know whether or not either of these approaches work?. Can you share the crash.log for that error? I don't recognize it and would like to investigate.\nCan you also run \"gem pristine --all\" and see whether or not the error persists?. Can you confirm that you\u2019ve copy-pasted the entire ===== LOAD PATHS section? It only has 10 entries, but it should have many more I believe.\nI\u2019m wondering whether this problem is related to the use of autoload in cri. When using Bundler, require behaves differently, but autoload does not. I don\u2019t need autoload and I will remove it; perhaps that will fix the issue. I\u2019m still unsure how this could become a problem, however\u2026. Can you change your Gemfile to load cri from GitHub (master branch):\nruby\ngem 'cri', github: 'ddfreyne/cri'\n\u2026 and check whether the problem still exist?. Some questions:\n\nDid you run bundle after changing the Gemfile?\nDoes the Procfile still have bundle exec for everything?\n\nThis error has me stumped.. @jm3 I\u2019m still at a loss w.r.t this error \u2014 can you answer the questions above?. Can you try removing gem 'foreman' from the Gemfile? The foreman README states\n\nRuby users should take care not to install foreman in their project's Gemfile.. There are two separate issues here:\n\n\nError: wrong argument type Nanoc::CLI::CleaningStream (expected File)\nAny LoadError, either Could not find the required 'adsf' gem\u00a0\u2026 or LoadError: cannot load such file -- cri/option_parser\n\nThe wrong argument type error happens because foreman sets stdout not to be a tty, and pry\u2019s dependency readline expects a non-tty stdout to be a File object, which is not the case here.\nYou can get around that, I believe, by configuring stdout/stdin for pry:\nruby\nPry.config.input = STDIN\nPry.config.output = STDOUT\nThat should get rid of the wrong argument type error.\nThe LoadError still leaves me confused, because adsf is in your Gemfile, so requiring adsf should really not raise a LoadError. Puzzling\u2026. @jm3 What error do you get when you run without pry? (Remove pry from the Gemfile). Nevermind that question \u2014\u00a0pry is a dependency so you can\u2019t run without it.\nHowever, changing the Procfile to read\nwatch: bundle exec guard -i\nrather than\nwatch: bundle exec guard\n(thus, add -i) will make the wrong argument type errors disappear.\nI still cannot reproduce the Could not find the required \u2026  error though :(. @jm3 Do you have a reproduction case for me? I fail to find out what\u2019s wrong.. Glad to hear!\nBy the way, I\u2019m working on making the live-recompilation part of Nanoc more integrated (easier to set up and use, as well as faster). If you don\u2019t mind living on the edge, you can:\n\n\nUpdate the Gemfile to use nanoc from master:\nruby\ngem 'nanoc', github: 'nanoc/nanoc'\n\n\nAdd more dependencies to Gemfile:\nruby\ngem 'listen'\ngem 'eventmachine'\ngem 'em-websocket'\n\n\nRun bundle\n\n\nSet NANOC_FEATURES to all in the environment, to enable experimental features.\n\n\nUpdate your Procfile to say\nruby\nwatch: bundle exec nanoc compile --watch\nview: bundle exec nanoc view --reload\n\n\nThis will be quite similar to your setup with Guard. Some things will still change before this feature is properly released:\n\nNotifications (through macOS\u2019 system notifications or notify-send on Linux)\nNo need to mention extra dependencies in the Gemfile\nSingle live command\nLots of testing\nWindows support. Whoops, that\u2019s meant to be --live-reload, not --reload.\n\nYou won\u2019t need a Guardfile anymore after this, but please keep it for now, as this feature is still experimental!. Also, this commit will make it not look like you\u2019ll get the police after you \u2014 \u201cillegal option\u201d is confusing and jargon-y.. Oops, thanks for reporting the No such file or directory error \u2014 will fix.\nChrome should automatically reload. Does the console show anything that\u2019s out of the ordinary?. Reported as #1254.\nnanoc view --live-reload / -L is now released. (The short option changed from -r to -L.). Can you share the Rules file that causes this problem?. Ahh, the problem is that {{yield}} intentionally escapes its input. From the Mustache documentation:\n\nAll variables are HTML escaped by default. If you want to return unescaped HTML, use the triple mustache: {{{name}}}.\n\nI assume the same applies to Handlebars.. Thanks for notifying! I\u2019ve updated the Mustache/Handlebars documentation already: https://github.com/nanoc/nanoc.ws/commit/814732d3019a58cc2d70f58eab09ee52b0f2c344. If the last instruction of a compile rule is not write, then Nanoc will find a matching route rule. In your case, I believe it will write to a HTML file.\nTwo alternatives:\n\n\nMove layout right before write:\nruby\ncompile '/slides/**/*.yml /slides/**/*.md' do\n  filter :pandoc, args: [ . . . . . ]\n  layout '/**/blank.html'\n  write item.identifier.without_ext + '.pdf'\nend\n\n\nRemove the layout call entirely \u2014 it doesn\u2019t do anything meaningful:\nruby\ncompile '/slides/**/*.yml /slides/**/*.md' do\n  filter :pandoc, args: [ . . . . . ]\n  write item.identifier.without_ext + '.pdf'\nend. I\u2019ll close this issue now, but feel free to continue the conversation.. I\u2019ve added a Writing/routing pitfalls section to the Nanoc documentation, which covers this in more detail.. This won\u2019t behave as expected:\n\n\ncompile '/slides/*.yml' '/slides/**/*.md' do\nYou likely want this instead:\ncompile '/slides/*.{yml,md}' do\nSee the Identifiers and patterns page for details:\n\n{foo,bar}\nMatches either string in the comma-separated list. More than two strings are possible. For example, /c{at,ub,ount}s.txt matches /cats.txt, /cubs.txt, and /counts.txt, but not /cabs.txt.. The documentation for the InvalidFormat  error explains how to solve this. You can add an artificially empty metadata section, e.g.\n\n```yaml\n\n\nauthor:\n- Rohit Goswami\nfontsize: 12pt\n\u2026\n``. I really don\u2019t like this idea, because a symbol semantically isn\u2019t the same as a symbol; generating a pattern from a symbol does not sound right to me. I prefer the#to_s` because it\u2019s more explicit.. Whoops! I meant:\n\n\u2026 because a symbol semantically isn't the same as a string. Ah yes, I forgot that a config file like\n\n```yaml\n/foo/*/.md:\n  whitelisted: true\n/people/*/.md:\n  type: person\n```\n\u2026 would lead to patterns that are symbols.. CC @gpakosz . This is fixed in Nanoc 4.8.15 (just released).. Looks good! Can you add a test for this, though? You can use this as a base: https://github.com/nanoc/nanoc/blob/master/test/filters/test_erubi.rb#L24-L37. Please create a new test, rather than extending the existing one.\nFor the sake of testing this: you can check whether the exception stack trace contains the item name. That should do it!. All bug fixes need an accompanying test. I\u2019ll work on a fix for this.. Replaced by #1259.. Hi!\nRename resume.yml to resume.yaml; this way, review.html and review.yaml will be considered the same item. Let me know if that works for you!\nAlso, I prefer to keep GitHub issues only for issues; there\u2019s the Nanoc Google group and the Nanoc Gitter channel for support.\nDenis. Closing for now, as I have not been able to get it to work.. The live command now lives in its separate gem, nanoc-live. Add nanoc-live to the Gemfile and it should work.\nNonetheless, the error message that Nanoc shows when nanoc-live is missing should be nicer. Nanoc has the concept of \u201ctrivial\u201d errors, which don\u2019t print exception details (i.e. no class name, no stack trace, \u2026), but rather show a simple message to explain that there\u2019s a problem along with succinct steps on how to fix it.\nTo solve this issue, I think I need the following:\n\nTurn LoadErrors for known gems only into trivial errors. (See below for details.)\nAdd a test that ensures that new requires are either explicitly marked as a known gem, or explicitly ignored (e.g. test dependencies, stdlib stuff, \u2026).\n\nKnown gems:\n\nrequire 'adsf'\nrequire 'adsf/live' (gem adsf-live)\nrequire 'builder'\nrequire 'coderay'\nrequire 'colored'\nrequire 'fog/core' (gem fog-core)\nrequire 'haml'\nrequire 'listen'\nrequire 'nanoc/live' (gem nanoc-live)\nrequire 'nokogiri'\nrequire 'nokogumbo'\nrequire 'pry'\nrequire 'pygments'\nrequire 'redcarpet'\nrequire 'ref'\nrequire 'rouge'\nrequire 'slow_enumerator_tools'\nrequire 'w3c_validators'. > I guess it can't be marked as a requirement because not everyone uses live reload?\n\nnanoc-live has some dependencies that might make it difficult to install on certain platforms. \n\nShould I just fully delete my (old) Guardfile now that I'm using the latest nanoc watching stuff?\n\nThe nanoc-live stuff is still experimental, so maybe hold off for a bit!\n\ncan i get rid of adsf and adsf-live in my gemfile now, since I've bundled nanoc-live which I believe requires adsf-live \u2192 adsf?\n\nYup.. #1274 and #1275 mostly fix this confusing issue, but in order for this issue to be closed, Nanoc still needs a test to ensure that all LoadError for known gems have an entry in GEM_NAMES.. I made a separate issue for GEM_NAMES: #1276. The error message is still crappy:\n% bundle exec nanoc\nLoading site\u2026 Error: cannot load such file -- nokogiri\nMake sure the gem is added to Gemfile and run `bundle install`.\nBetter:\n```\n% bundle exec nanoc\nLoading site\u2026\nError: cannot load such file -- nokogiri\n\n\nAdd the nokogiri gem to your Gemfile:\ngem 'nokogiri'\n\n\n\nRun bundle\n\n\nRe-run bundle exec nanoc\n``. I don\u2019t think there\u2019s much more I can do right now to fix this. Will mark as complete!. I believe that the purpose of#without_ext` was to support items with multiple extensions, like these:\n\n\n/foo/stuff.md\n/foo.md.erb. There is a fix in #1279 with some fancy functional programming \u2728 . Thanks!. @iay Can you try out the gh-1294-safer-parallel-collection branch and see whether the issue persists?. 1.  In your Gemfile, replace the gem 'nanoc' line with\n```ruby\ngem 'nanoc', github: 'nanoc/nanoc', branch: 'gh-1294-safer-parallel-collection'\n```\n\n\n\nRun bundle\n\n\nRe-run bundle exec nanoc check external_links. I\u2019ll give this a closer look on the weekend!\n\n\nThis might be a good time for me to replace ParallelCollection with something more battle-tested, like parallel.\nAs they say, is difficult. Writing threaded code. @iay Can you give the branch I mentioned another try?\n\n\nIn your Gemfile, ensure that the nanoc line looks like this:\nruby\ngem 'nanoc', github: 'nanoc/nanoc', branch: 'gh-1294-safer-parallel-collection'\n\n\nRun bundle update nanoc --conservative\n\n\nRe-run bundle exec nanoc check external_links\n\n\nThis won\u2019t fix the problem yet, but my hope is that this will reveal the underling error that is causing the problem.. Update: This is now in master, so what you\u2019ll need in the Gemfile is\nruby\ngem 'nanoc', github: 'nanoc/nanoc'\n(i.e. no more branch: \u2026). Idea: Replace \u201cdeploy checks\u201d with \u201cdefault checks\u201d, and let nanoc check run them without having to specify --deploy.. Is this an exception that occurs consistently?\nLine 84 of external_links.rb says\nruby\nlocation = base_url.to_s + location\nThat TypeError would occur when location is nil, which can only happen when res['Location'] is nil. That\u2019d be for a HTTP 3xx response without a Location header, which can happen (e.g. for 300 Multiple Choices).\nAt the very least, Nanoc should check the presence of the Location header, before attempting to do anything with it!. That HTTP response is weird:\n\n\nHTTP/1.1 defines 302 as 302 Found, not 302 Moved Temporarily. It seems to mix HTTP/1.0 and HTTP/1.1.\n\n\nThe Location header is supposed to be present.\n\n\nNot sure what to do in this case. Probably not error, and treat this situation as OK? An error in this case would not provide anything actionable.. #1302 has a fix.. Migrated to https://github.com/nanoc/features/issues/31.. Fix in #1303. I opted for catching URI::Error.. Moving this to the nanoc/features repo. (It\u2019s not well-documented that it exists, sorry!). @iay The only remaining error that I can see is\n1) Failure:\nNanoc::Helpers::BloggingTest#test_atom_feed_without_base_url [/home/travis/build/nanoc/nanoc/nanoc/test/helpers/test_blogging.rb:215]:\n[Nanoc::Int::Errors::GenericTrivial] exception expected, not\nClass: <NoMethodError>\nMessage: <\"undefined method `+' for nil:NilClass\">\n---Backtrace---\n/home/travis/build/nanoc/nanoc/nanoc/lib/nanoc/helpers/blogging.rb:196:in `atom_feed'\n/home/travis/build/nanoc/nanoc/nanoc/test/helpers/test_blogging.rb:216:in `block in test_atom_feed_without_base_url'\n---------------\n\u2026 which I believe is related to the change made. > Am I right in saying that you have both RSpec based tests under nanoc/spec and also more conventional unit tests under nanoc/test?\nCorrect. The test/ directory is older; eventually I hope to have everything migrated to spec/, but there\u2019s no rush.\n\nI'm guessing that it might be easiest to add some tests to the end of nanoc/test/helpers/test_blogging.rb and just match expected content within the XML for the item as a string, as for example is being done in test_atom_feed_with_xml_base. Does that sound right?\n\nYes!. > A related question would be whether there was an XML parser available in that test context; it seems like a test that re-parsed the resulting string and then dug into the structure would be less brittle than one involving just regexes.\nDefinitely. Nokogiri likely will be available, so you could do something similar to what\u2019s being done in test_xml_sitemap.rb:\nruby\n      doc = Nokogiri::XML(res)\n      urlsets = doc.css('> urlset')\n      assert_equal 1, urlsets.size\n      urls = urlsets.css('> url')\n      assert_equal 4, urls.size\n      assert_equal 'http://example.com/item-one/a/',   urls[0].css('> loc').inner_text\n      assert_equal 'http://example.com/item-one/b/',   urls[1].css('> loc').inner_text\n      assert_equal 'http://example.com/item-three/a/', urls[2].css('> loc').inner_text\n      assert_equal 'http://example.com/item-three/b/', urls[3].css('> loc').inner_text\n      # \u2026. > Also, is there a way to manually run just a single file of tests in isolation?\nYeah, but I just realised that this approach isn\u2019t documented.\nFrom within the nanoc subdirectory, either\n\n(for something in test) run bundle exec m test/path/to/test_something.rb\n(for something in spec) run bundle exec rspec spec/path/to/something_spec.rb. @iay I just changed the behavior \u2014 probably while you were typing \u2014 to raise an error in that case!. The timeout might be occurring in URI.parse by accident; it might be triggered somewhere else. Though I\u2019m unclear where that could be\u2026. @iay How reproducible is this? Do you always get the timeout error in URI.parse?. @iay Does the exception always occur in URI.parse?. Hey @iay, I\u2019m not been able to reproduce this issue. I\u2019ve tried running the external_links check on the entire site and on subsets with it (including the URL that you mentioned), but it works as expected.\n\nDo you have the issue still?. Makes sense!\nKeep reporting issues :). Can you show me the output of bundle exec nanoc --version?. I can\u2019t reproduce this problem, unfortunately!\nThe Nanoc, Ruby and RubyGems are recent enough, too.\nIt appears other people have had similar issues with Pry: see e.g. pry/pry#1275, which is a Pry issue that has been open for quite a while.. @gpakosz Is this a problem for you with pure pry as well, or just nanoc shell?. @gpakosz Does the problem persist when you do the following?\n\nbundle exec nanoc shell\nSignal.trap('SIGINT') { raise Interrupt }\nPress ^C. Having globs would certainly still be useful, though it wouldn\u2019t fix this particular bug.\n\nFix is coming up.. Reopening!. @agross Can you verify that #1324 works for you?. Nice! That PR needs better test coverage, so I\u2019ll spend a bit more time to finish it up and then release 4.9.2, hopefully this weekend.. Ooh, thanks!. @Fjan I opted for a mutex for two reasons:\n\n\nI\u2019d prefer not to rely on #print being atomic \u2014 it is not documented to be atomic, and not all Ruby implementations might implement #print atomically.\n\n\nMutexes are so cheap that the slowdown of using mutex is unlikely to be noticeable.. I can confirm this is a problem!\n\n\nThis appears to be problematic behavior with Nokogiri/libxml for parsing HTML\u2026\u00a0when reassembling the content, the namespaces are somehow left out.. This appears to be a common problem without a proper solution (see e.g. jekyll/jemoji#43).\nSuggestions for workarounds that I\u2019ve found are along the form of\n<div id='gcse'></div>\n<script>\n  $('#gcse').html(\"<gcse:search></gcse:search>\");\n</script>\n\u2026 which is pretty icky.\nThis might not be fixable within Nanoc itself, unfortunately, but perhaps Nanoc can offer an automatic workaround.. Icky workaround in #1320.. Sucks to hear about the libxml patch that has been lying around for so long!\nMy main problem with #1320 is that it only applies to gcse:search, not g:plusone, fb:like, \u2026. The only way to solve this problem in general is to fix the HTML parser, or use a different one.\nIt might be worth looking into using Oga, for instance.. > test failure doesn't seem related\nOne of Nanoc\u2019s tests became rather flaky lately. Definitely something I\u2019m looking into.. Hi, thanks for the PR!\nI\u2019ve thought about this optimisation in the past, too. In the end, I decided against using hard links for this purpose, for two reasons:\n\n\nNanoc\u2019s behavior will change: modifying a file in content/ might result in a file in output/ being modified (because they are the same file). I believe this will be confusing, because\n\nit deviates from the understanding that one needs to run nanoc in order to bring the output/ directory up to date \u2014 a change in content/ can cause a change in output/ right away.\nmodifying a file in content/ might or might not cause a change in output/, depending on how that file is handled in Rules\n\n\n\nIn the end, I think the change in behavior, and the unpredictability of the behavior, does not make this change worth the speedup.\n\nI couldn\u2019t find enough evidence to support that hard links would yield a significant speedup. I have not investigated this recently, but I imagine that the new asynchronous writes (which landed in Nanoc 4.9.0) will have made the impact of using hardlinks less significant. However, if you have a case where using hardlinks provided a significant speed improvement, I\u2019d love to know about it!\n\nFor the reasons listed above, I\u2019ll close the PR now, but I\u2019m definitely keen on keeping the conversation going!. Thanks for the reply! Your reasoning makes sense.\nI imagine that most writes are atomic anyway (meaning that file modification equals create file + rename, rather than truncate and write), which means that updating a file in content/ won\u2019t actually change the matching file in output/.\nI\u2019ll reopen the PR. If you want, can you add a test to ensure that the files are hardlinked? (If not, I can do that as well.). I think this PR needs a bit of (manual) testing. I\u2019ll take a stab at it this weekend. (I\u2019m paranoid about something breaking that we haven\u2019t thought of.)\nI\u2019ve been meaning to find a way to automatically test Nanoc on Windows (Travis CI doesn\u2019t have Ruby on Windows). Not sure whether that exists as a Saas!\n\nIs there a way to make hardlinks only if an item is subject to a passthrough rule? Note that it's different semantics than \"file is identical\".\n\nA passthrough rule is a syntactic shorthand, so it wouldn\u2019t be easy to make an exception for passthrough.. @agross Ugh, I missed your comment before I started working on setting up AppVeyor! Anyway, not much work lost \u2014\u00a0and I\u2019ll definitely take some stuff from your setup!. See #1327 and #1325 for Windows support \u2014 still work in progress.\nOnce that\u2019s finished, I think we can think about hardlinks again!. @terceiro Can you rebase your branch on top of master? It\u2019s now tested on Windows (for Rubies 2.3 to 2.5).. Huh, strangely the AppVeyor build is not running. Will take a look at it later!. Everything checks out. Merging! Thanks for your contribution!. @agross Is that the full crash log? The stack trace is missing parts!. @agross Yeah, that\u2019ll definitely be useful, though at the moment I\u2019m still trying to get the tests to pass on all recent Ruby versions (2.3 to 2.5).. @agross My appveyor.yml is quite different from yours. I don\u2019t use choco or ridk, and also don\u2019t use mingw (no msys). Is there a practical difference? What are the advantages/drawbacks of choco install ruby?. I stole the chcp 65001 from your appveyor.yml \u2014 until I had that line, I couldn\u2019t figure out what the heck was up with the encoding nor how to fix it \ud83d\ude31 . \ud83c\udf7e . Good catch! Here\u2019s a fix: #1329. Hi,\nNanoc\u2019s releases already are GPG-signed (since early 2014). You can usegit verify-tag to verify them.. \u2026\u00a0or rely on GitHub to tell you that it\u2019s valid:\n\n. > Thanks, and sorry for not being clear right from the start: Would it be possible to upload a detached signature?\nPreferably not. Can you explain why the git verify-tag approach would not work for you?. An unrelated Ruby 2.5.1 issue on Travis CI prevents the tests from passing!\n(And an unrelated encoding issues prevent the Appveyor tests from passing! Gah.). Hi!\nI like the idea of Haml locals \u2014 it\u2019s indeed not currently supported by Nanoc, but it could be.\nYour implementation will work for filters only, though, and not for layouts. For example:\nruby\ncompile \"/**/stuff.haml\" do\n  filter :haml assigns: {foo: \"bar\"}\n  write ext: 'html'\nend\nIt\u2019s not currently possible to pass locals to layouts. (Though I imagine that could be useful too.) Depending on what you want to achieve, this might not be needed; I personally like to stick things in the frontmatter of an item or a layout and I then rarely have to use locals.. Whoops, lib_dirs being undocumented is not intentional. I\u2019ve opened a ticket on nanoc.ws: https://github.com/nanoc/nanoc.ws/issues/221. Yikes!\nCan you reproduce this problem with Nanoc 4.9.1 too? (Rather than the current, 4.9.2.). Hmm \u2014 there are two possibly relevant changes in Nanoc recently that could be related:\n\nIn 4.9.0, Nanoc started using asynchronous writes.\nIn 4.9.2, Nanoc started using hardlinks instead of copying files.\n\nBut from the looks of it, even asynchronous writes shouldn\u2019t be causing this particular kind of error.\nCould you test out with Nanoc 4.8.9? That one might not be easy because of new features introduced in 4.9.0, so no worries if that\u2019s not simple.\nSome questions:\n\n\nDoes your filesystem have a setup where your Nanoc directory is spread over multiple filesystems? (Unlikely, I suppose\u2026)\n\n\nMight there be some process running that automatically removes empty directories from output/?. Huh, this bug has me stumped. Some observations:\n\n\nThe exception happens in either\n\nitem_rep_writer.rb:48 in write_single\nitem_rep_writer.rb:55 in rescue in write_single\n\n\nwrite_single: Here it fails in FileUtils.identical?, because raw_path (or a component of the path) does not exist. But the code around it:\nruby\nis_created || !FileUtils.identical?(raw_path, temp_path)\n\u2026 means that FileUtils.identical? is only called when is_created is false, and \nruby\nis_created = !File.file?(raw_path)\nPut all together, FileUtils.identical? is only called when raw_path exists, yet the exception is raised when it does not exist. I\u2019m confused.\n\nrescue in write_single: This exception happens further down the line, which means that FileUtils.identical?(raw_path, temp_path) sometimes works. The rescue happens because of Errno::EXDEV, which means /tmp is on a separate partition \u2014 which should be handled just fine.\nThe exception is raised in FileUtils.cp(temp_path, raw_path), because raw_path supposedly cannot be written to, but before that line, there\u2019s\nruby\nFileUtils.mkdir_p(File.dirname(raw_path))\n\u2026 which succeeds (otherwise it\u2019d have thrown an exception).\n\n\n\n@Doshirae A question for you: can you double-check that no other Nanoc process is running that could interfere?. @Doshirae Is this still an issue for you?. @Doshirae Is 4.8.9 the most recent version where this problem does not happen? (In other words, is 4.8.10 the first version where it happens?)\nNarrowing down the problem to a specific version would help me pinpoint the problem \u2014 I\u2019ve not had much luck identifying the problem so far.. @Doshirae This is still quite odd, because Nanoc supposedly creates the directory before creating files inside the directory. Which filesystem(s) are you using?. @Doshirae Can you run the following script to see whether it crashes?\n```ruby\nrequire 'fileutils'\ndirs = [\n  '/tmp',\n  File.expand_path('~'),\n]\nTMP = 'jeOsTZxRlHRXwmJG6soAMM3LB2705b'\ndirs.each do |dir|\n  Dir.chdir(dir) do\n    print \"Testing in #{dir} (reusing dir)\u2026 \"\n    20.times do\n      FileUtils.mkdir_p(TMP)\n      File.write(TMP + '/a.txt', 'stuff')\n      FileUtils.rm_rf(TMP)\n    end\n    puts \"ok\"\nprint \"Testing in #{dir} (new dir)\u2026 \"\n20.times do |i|\n  dir = \"#{TMP}#{i}\"\n  FileUtils.mkdir_p(dir)\n  File.write(dir + '/a.txt', 'stuff')\n  FileUtils.rm_rf(dir)\nend\nputs \"ok\"\n\nend\nend\nputs \"done\"\n```\nIt repeatedly creates directories and files in them, in quick succession. None of it should fail, and it doesn\u2019t on my machine, but I\u2019m wondering whether there\u2019s any configuration of your filesystem that makes it not work.. @Doshirae Could I get a copy of your site so that I can investigate by myself? I\u2019m not making progress on this issue.. @Doshirae wget works \u2014 although I had to remove the index.htmls that wget creates.\nI can build the site properly on my machine (macOS 10.13.6). I\u2019ve also tested it out Debian with ext4 (Debian 9) where it also works properly. In both setups, I\u2019ve done the compilation a few dozen times in quick succession, with no failures.\nCan you share your /etc/fstab with me?. Unrelated: I recommend Bundler for specifying the dependencies you use; it makes it easy to install dependencies on a new system. The Gemfile that I\u2019ve used for your site is the following:\n```\nsource 'https://rubygems.org'\ngem 'builder'\ngem 'kramdown'\ngem 'nanoc'\ngem 'nokogiri'\ngem 'rouge'\ngem 'sass'\ngem 'stringex'\n``. Thecolorize_syntaxuses Nokogiri, and the#atom_feed` helper uses Builder.\nGoing to take another look at this soon!. With the same ext4 options that you\u2019re using, I also still can\u2019t reproduce the issue :(. @Doshirae I\u2019m out of ideas as to what could cause this \u2014 if you feel like digging into the code of item_rep_writer.rb and doing some debugging myself, that would be quite useful.\nThough if the issue no longer happens after a system reinstall, it might be worth closing it \u2014 and reopen it when/if the issue reappears. . Thanks for the extra information I\u2019m on holiday at the moment, but will take another closer look at this afterwards. The output problem definitely seems related.\n@Doshirae The link to https://doshi.re/Rakefile.txt is broken, I\u2019m afraid.. Nanoc at the moment has an implicit dependency on the current working directory. This might be the cause of this problem. I\u2019m working on removing that dependency now; this should hopefully fix this issue.. @Doshirae @ftemmerm Can you check whether the problem has disappeared in master?\nYou can use Nanoc from master by changing the Gemfile to say\nruby\ngem 'nanoc', github: 'nanoc/nanoc'\n\u2026 then running bundle update nanoc, and finally bundle exec nanoc will run Nanoc from master.. Excellent\u2026 and sorry for taking so long to identify the source of the problem!. The fix is released in Nanoc 4.9.5.. @Fjan Good follow-up!\nThe consensus on global mutable state is that it\u2019s bad, but global mutable state creeps up in non-obvious ways. Global mutable state isn\u2019t just global variables ($foo in Ruby) \u2014 there\u2019s more:\n\nthe current working directory\nthe environment\nthe filesystem\netc\n\nI was aware that depending on the current working directory is problematic, but it slipped my mind and ended up not fixing the problem.. This might be Kramdown\u2019s built-in colorizer. Can you try with\nfilter :kramdown, auto_ids: false, syntax_highlighter: nil\n\u2026\u00a0and see whether that works?\n(Or alternatively, keep using Kramdown\u2019s highlighter and don\u2019t use Nanoc\u2019s.). \ud83d\udc4d . Hi,\nRunning compile from inside a check won\u2019t do what you expect: checks are not run in a pre-defined order, and so some checks might run before, and some checks might run after the has_been_compiled check. Therefore, some checks might run before the site is compiled.\nThe warnings happen because, at this point, Nanoc expects Nanoc::CLI.run (or more specifically, Nanoc::CLI.setup) to be called only once during a single nanoc run. Nanoc::CLI.setup will generate warnings when it is called twice or more, although the warnings are harmless \u2014 the constants are redefined with the same value. I\u2019ll see what I can do about preventing this, though.\nAs for running compile before check/deploy: An approach that I\u2019ve used is to create a script/deploy file, which runs nanoc followed by nanoc deploy (alternative: a make deploy target). (Though usually, I run nanoc-live and when I\u2019m done making changes, I know that the site is up to date.). Do either of you have opinions around how you\u2019d like this to work, or look like?\nSome of my ideas:\n\n\n--compile flag to `nanoc check:\n% nanoc check --compile\n\u2026 though the following already works, is shorter, and is perhaps easier to understand:\n% nanoc; nanoc check\n\n\nA compile option in nanoc.yaml, which defaults to false, but if set to true, can be overridden on the CLI:\n% nanoc check --no-compile. I\u2019ve moved this to the features repo: nanoc/features#43.. @gwincr11 Can you share the crash log with me?. @gwincr11 I took a look but I\u2019m unable to reproduce the issue.\n\n\nCould you re-run Nanoc with run-time contracts enabled? To do so:\n\nAdd gem 'contracts', '~> 0.16' to the Gemfile\nRun bundle install\nRe-run Nanoc\n\nIf we\u2019re lucky, there is a contract failure that pinpoints the problem more precisely.. @gwincr11 Hey Cory, I reached out to you privately \u2014 could you let me know whether this issue is still relevant?. @gwincr11 Hey, I\u2019ve got a potential fix in #1349, already merged into master. ~Can you give Nanoc from Git a try?~. The just-released Nanoc 4.9.4 has this fix. Can you upgrade Nanoc and give it another try?\nI will close the issue because I\u2019m optimistic that the bug is indeed fixed, but please let me know if the issue persists!. Hi,\nSassc support is not currently available, but it is something I\u2019d like to have. The main area of difficulty is integrating it with Nanoc\u2019s dependency tracker; while this was somewhat easy with Ruby Sass, it might be difficult (or impossible) to do with non-Ruby Sass implementations.\nFor example, given:\n\n/assets/style/_fonts.css\n/assets/style/screen.css\n\nAssuming that screen.css imports _fonts.css, then Nanoc needs to know that there is a dependency, so that if _fonts.css changes, Nanoc knows to recompile screen.css.\nSome ideas I have around making this work:\n\n\nBe able to mark items as \u201calways dirty\u201d \u2014 and therefore always recompiled, no matter what. Not so nice, but a workable last resort.\n\n\nUse the generated sourcemaps to identify dependencies (likely possible with Dart Sass, unsure about LibSass).\n\n\nI\u2019ve moved this into nanoc/features/issues/45.. Some integration tests started failing for some reason. Will look into that soon.. Ah yes \u2014 the view command got refactored, and the host/port/handler options are specified in code in a different way now. Oops!. This is fixed in the guard-nanoc v2.1.4 release.. Oh yeah, that\u2019s counterintuitive!. Hmm, on second though, I\u2019m not sure whether this is unexpected behavior. In any case, at least worth documenting.\nMy personal opinion is that the most specific definition in an environment should win. So, given the following:\nenvironments:\n  default:\n    foo: 'aaa'\nfoo: 'bbb'\n\u2026 then I\u2019d expect foo to be aaa when the environment is default, and bbb if not, regardless of where it is defined (the config file, a parent config file, a parent\u2019s parent config file, \u2026).\n\nIn your example, you have\nparent.yaml:\nyaml\nenvironments:\n  default:\n    foo: 'bar'\nnanoc.yaml:\nyaml\nfoo: 'baz'\nparent_config_file: 'parent.yaml'\n\u2026 which Nanoc turns into a single config file (in memory):\nyaml\nfoo: 'baz'\nenvironments:\n  default:\n    foo: 'bar'\nIf the environment is default, the value of foo will indeed be bar (not baz).\n@gpakosz I\u2019d like to keep the current behavior, but document it on the web site. What do you think?. Yup, the documentation is currently incorrect (or at the very least, misleading). Will fix.. I\u2019ve updated the environments documentation to be more clear on how inheritance works, with examples. I think it should be fine now; I have chosen not to explicitly mention parent configurations, as they work the same way.\nI\u2019ll close this issue now, but do let me know if you have further questions/concerns/suggestions.. I\u2019d argue that this is not unexpected behavior, due to the way YAML works:\n```ruby\nYAML.parse('foo:')\n=> {\"foo\"=>nil}\n```\nIf you want an empty environment, you can specify it explicitly as {}:\n```ruby\nYAML.load('foo: {}')\n=> {\"foo\"=>{}}\n```. This might fit in the larger \u201cvalidate the configuration\u201d issue \u2014 at the moment, it\u2019s not explicitly validated at all.\n```yaml\noutput_dir: true\nShould error with e.g. \u201cexpected output_dir to be a String, not true\n```\n```yaml\nenvironments:\n  production:\nShould error with e.g. \u201cexpected environments.production to be a Hash not nil\n```\netc.. There is a feature request for this already (nanoc/features/issues/32) so I will close this issue, and continue in nanoc/features/issues/32.. Looks good so far!\nDo you want assistance with the tests?. @th-h I think I can take over this PR if you want me to lend a hand with the tests!. I\u2019ve created a separate PR (#1363) with your code + a test.\nI can also handle the documentation (that\u2019s in the nanoc.ws repository).. Merged! Thanks for the contribution!\nA release will follow later this week.. This is released as part of Nanoc 4.9.8!. This is released as part of Nanoc 4.9.8!. > Is that a normal behavior or not ?\nIt is normal and expected behavior\u2026 but not desired. Let me elaborate!\nNanoc tracks data and detects changes, and knows which items to recompile and which ones not to recompile. However, it can only track data that it knows about, and it cannot track changes to global state.\nThe following kinds of data are not tracked by Nanoc:\n\nGlobal variables (e.g. <%= $foo %>)\nConstants (e.g. <%= RUBY_VERSION %>)\nThe environment (e.g. <%= ENV[\"PROD\"] %>)\nThe filesystem (e.g. <%= File.read('oink.txt') %>)\nTime-related data (e.g. <%= Time.now %>)\nRandom data (e.g. <%= rand(1..10) %>)\nDynamically evaluated data (e.g. <%= `ruby --version`.strip %>)\n\u2026 and possibly more\n\nIt is not feasible for Nanoc to track global state. (More details near the bottom of this text.)\nGlobal state creates other problems with Nanoc, too. For example, it is possible to get NoMethodErrors when using global variables; see the Nanoc objects are stored in global variables troubleshooting section for an idea.\nWorking around the problem\nTo work around this, use the preprocessor to populate the configuration (@config), e.g.\nruby\npreprocess do\n  config[:is_prod] = ENV['PROD']\nend\n\u2026 and where-ever you\u2019d use ENV['PROD'], use @config[:is_prod] instead, e.g.\nrhtml\n    <% path = @item.path %>\n    <% if @config[:is_prod] == \"true\" %>\n    <% path = path.split(\"/\") %>\n    <% path.delete_at(1) %>\n    <% path = path.join(\"/\") %>\n    <% end %>\n    <h2><%= link_to @item[:title], path %></h2>\nSolving the problem\nTracking global state is a fundamentally difficult problem, and it is a problem that will not go away any time soon either. Solving it on Nanoc\u2019s site is infeasible, however:\n\n\nTo track global variables, Nanoc would have to intercept global variables access somehow in the Ruby VM. Unlikely to be possible.\n\n\nTo track constants, Nanoc could replace all constants with functions that notifies Nanoc and then return the original constant value\n\n\nTo track the environment, Nanoc could replace ENV with its own implementation that notifies Nanoc when data in it is accessed.\n\n\netc\u2026\n\n\nI for sure would not want to run software that does this kind of hacky stuff. :)\nI thought about letting Nanoc do static analysis on items and layouts to find out whether global state is being accessed, but doing that in a remotely reliable way is, as far as I can tell, impossible.\nSo, we\u2019re stuck with the problem and all we can do is learn how to live with it!\nA next step for me is to document this problem in more detail on the Nanoc web site. I\u2019ve been aware of it (hence the link above), but it needs even more documentation.\nHope this helps!. I\u2019ve created a troubleshooting section for this problem: https://nanoc.ws/doc/troubleshooting/#pages-are-not-being-recompiled. Hmm, maybe a tiebreaker: option? e.g.\n```ruby\npick random parent (probably not great)\nbreadcrumbs_trail(tiebreaker: -> (candidates) { candidates.sample })\npick first parent (probably not great either)\nbreadcrumbs_trail(tiebreaker: -> (candidates) { candidates.first })\nuse .md files as identifier\n(if none are found, raise an exception)\nbreadcrumbs_trail(tiebreaker: -> (candidates) { candidates.find { |c| c.identifier =~ '*/.md' }})\n```\nWhat do you think?. @iay I like the idea of being able to customise the way the breadcrumb chid-parent relationship is set up. I\u2019ll play around with a parent_finder: -> (item, items) { \u2026 } function.\nI\u2019ve added a :tiebreaker option to #breadcrumbs_trail, which gives flexibility in how to handle ambiguous parent items.\n\nI\u2019m unsure what the default behavior of ambiguous parent items should be.\nI\u2019m a fan of error-by-default, but that might make this a non-backwards-compatible change. I say \u201cmight\u201d rather than \u201cwould,\u201d because the current behavior is undefined, and I believe that changing undefined behavior is backwards-compatible.\nA better option is likely to log a warning along these lines:\nWarning: The breadcrumbs trail (generated by #breadcrumbs_trail) found more than one\npotential parent item at /software.* (found /software.erb and /software.md). Nanoc will\npick the first item as the parent. Consider eliminating the ambiguity by making only\none item match /software.*, or by passing a `:tiebreaker` option to `#breadcrumbs_trail`.\n(This situation will be an error in the next major version of Nanoc.). Documentation: nanoc/nanoc.ws/pull/228. Work-in-progress fix: #1370. I can confirm that this happens \u2014 and it\u2019s not expected. Will work on a fix.. There is a fix in #1373, which I\u2019ve tested with your site.. This is now released in Nanoc 4.10.2.. Requiring the :css_path option will be a backwards-incompatible change. Is there a way to have a default?. Alternatively, require css_path to be given only if sourcemap_path is set to :inline. What do you think?. I can confirm that this happens and am looking into it.. There is a potential fix in #1379.\nImporting files from outside Nanoc\u2019s content/ directory will now work again, but note that Nanoc\u2019s is only able to track changes to files inside the content/ directory.. I will soon release this fix in 4.10.4.. Released in 4.10.4!. As suggested by @gpakosz: a useful refactoring later on might be to have two importer classes \u2014 one that deals with Nanoc items exclusively, and one that deals with importing relative files not belonging to a Nanoc item. That\u2019d break up the responsibilities of the two importers a bit more nicely; currently, the single importer does a bit too much.. Looks like it\u2019s still needed after all\u2026. Locally, the code seems to be working (apart from deadlock detection), yet on CI is nearly-consistently seems to lock up.\nThreads :(. Hey C\u00e9dric,\nI\u2019ve noticed this problem too, and fixed it on master (cb526424).\nI\u2019m not sure why this wasn\u2019t a problem before!. Hey Alex, thanks for the contribution! I might not have time to look into this properly soon, unfortunately, but I like what I see so far.. @agross I think the validation is useful.\nAs for naming, I suggest\n\nrename CompiledContentCache to TextualCompiledContentCache\nrename CompositeContentCache to CompiledContentCache\nrename BinaryContentCache to BinaryCompiledContentCache\n\n\u2026\u00a0which I think conveys the meaning better.. Hey Alex,\nWould you mind if I continue your PR from here? It\u2019s 95% there, but there are some edge cases that I\u2019d like to investigate and some refactoring that I\u2019d like to apply. But the base implementation is great and this enhancement will for sure be welcomed by many people.\n(By the way: My internet connection is very spotty the last few days and my ISP can\u2019t say when I will have proper internet again. Communication might be a bit difficult.). > I'm in Berlin next week and the week after - in case you want to meet, talk and/or eat. ;-)\nI would love to! Care to send me an email at denis+github@denis.ws so that we can exchange contact details?. Closing this in favor of #1408.. It is necessary \u2014 and even documented.. Hey,\nI investigated this but unfortunately couldn\u2019t find directly what is causing this. I don\u2019t have a Chromebook device to test this out, unfortunately.\nCan you do something for me, that would shed more light on the situation?\n\n\nSet a breakpoint in lib/nanoc/base/services/item_rep_writer.rb:53, or perhaps add sleep 120 right in front of that line to emulate a breakpoint.\n\n\nRight before the breakpoint (or the sleep call), add puts \">>> temp_path = #{temp_path}\".\n\n\nRun the modified Nanoc again. You\u2019ll see something like this in the output:\n```\n\n\n\ntemp_path = /data/data/com.termux/files/usr/tmp/nanoc20190206-4245-mvsz4o/text_items/4\n```\n\n\n\n\n\nLet me know whether the base directory (printed above) exists. Following the example above, /data/data/com.termux/files/usr/tmp/nanoc20190206-4245-mvsz4o/text_items should exist, as well as its parent directory.\n\n\nLet me know what the permissions are of the base directory (\u2026/text_items).\n\n\nLet me know whether you can manually create a file in the directory (e.g. touch \u2026/text_items/12345, replacing \u2026 with the base directory).\n\n\nHopefully, that will give me enough information to debug this further.. Can you replace\nbegin\n            FileUtils.ln(temp_path, raw_path, force: true)\n          rescue Errno::EXDEV\n            FileUtils.cp(temp_path, raw_path)\n          end\nin item_rep_writer.rb, lines 62 to 66, with\nFileUtils.cp(temp_path, raw_path)\nand let me know whether that works?. OK, I think #1406 has a workaround \u2014\u00a0it falls back to not using hardlinking, which is suboptimal, but at least the desires behavior (having the right files in the right places) is there.. Whoops, I thought that was a typo on my part. Fixed.. I found something relevant:\nhttps://github.com/facebook/create-react-app/issues/1832#issuecomment-445500936\n\nDue to Android's SELinux policies, you cannot hard link as non-root\n\nSo I suppose that copying (rather than hardlinking) is the proper fix.. I will merge and release Nanoc once CI has passed.. Nanoc 4.11.1 is now released. Can you double-check to verify that this release works for you?. CI isn\u2019t my friend today (appears to be testing the wrong commit) but merging anyway (build passes locally) and will verify that master passes on CI.. FYI @agross \u2014 here is your PR with some of my changes.\nPlease don\u2019t be put off by the amount of changes that I made. I love modifying code, renaming, moving, replacing, etc. Your initial version worked well, and your changes were instrumental in getting this ball rolling. Thank you!. I\u2019ve resolved all comments but one, which talks about pruning.\nWhile working on this and testing it out, I came to realise that the current implementation could use disk space more efficiently: at the moment, a file is written to the cache for each item, each representation of that item, and each snapshot of that representation. This is inefficient, because it\u2019s very likely that some of these snapshots share the same content. I expect the cache disk usage could be reduced quite a bit\u2026\nI\u2019m also thinking about merging this, even when not all problems are addressed, and hiding the feature behind a feature flag. This will make it more likely to be worked on in the future and prevents the situation of unmerged PRs sitting around for too long.. @agross I think I\u2019ll keep the current implementation as-is for now, merge it (behind a feature flag) so that it can be worked on any time, without having to wait for this PR to be merged.\nI like the idea of having content-addressable storage for the binary compiled content cache \u2014\u00a0I will come up with an implementation for that, I think :). @agross I\u2019ve put the binary compiled content cache behind a feature flag, binary_compiled_content_cache. It will be enabled when you run Nanoc with the feature enabled, i.e.\n% NANOC_FEATURES=binary_compiled_content_cache bundle exec nanoc\nCan you review the PR again and test it out?. I\u2019ve merged the PR, but still looking for a test run, to verify that everything\u2019s still working as intended!. @agross Can you make a backup of tmp/nanoc, then delete tmp/nanoc entirely, and see whether you can reproduce the problem?. Hey, this is an incompatibility introduced in Nanoc 4.11.1 for which I have a Guard::Nanoc release prepared, but forgot about. My bad! An updated Guard::Nanoc release is coming up.. @Fjan This is fixed in the just-released guard-nanoc 2.1.5. Can you confirm?. Yikes, I think I screwed up something a bit larger than I expected. Will investigate.. I\u2019ve done some more digging and this seems to be caused by the new implementation of NotificationCenter, which is now threaded. Guard::Nanoc forks, and forking likely messes up the threads enough for the notification center to stop working. Nasty\u2026. I have a fix in #1410. I have no idea how to test this in an automatic way; I\u2019ve verified that it works with my own sites for now\u2026. Thank you, that does make it a bit nicer!\nThank you for your work on Zeitwerk. I\u2019ve always been wary of autoloading mechanisms, but Zeitwerk is the first one that really gets it right.. Yikes \u2014 that is definitely a bug. Will investigate.. This is almost certainly caused by 5cbad99abfed9e3cb02bc271f2be1ad7f12b1641 (part of #1394). It\u2019s a refactoring that I\u2019ve been wanting to make for a long time.\nI\u2019m still investigatating why it fails for you, though.. @DivineDominion I\u2019m not able to reproduce the problem you described. Could you create a zip of tmp/nanoc and send it to me (denis+github@denis.ws)? After you\u2019ve done that, can you try removing tmp/nanoc and re-running Nanoc?. configurations in plural\n. For consistency\u2019s sake, the output of --list-deployers should be in the same format as --list (a few lines below here).\n. Change it to \u201cThe site has no deployment configurations.\u201d (with -ment) and I\u2019m happy!\n. Nah.\n. I\u2019m not a fan of one-line if statements because they tend to be overlooked too easily.\n. This will only work if Bundler is present and used. I\u2019d rather check RUBY_PLATFORM directly, i.e.\nruby\nskip \"pygments.rb does not support Windows\" if RUBY_PLATFORM =~ /mswin|mingw/\n. :+1: for introducing #skip_unless_have_command\n. Bundler::WINDOWS again (same as above)\n. Oh, it is unfortunate that Ruby on Windows does not support symlinks (even though Windows itself does support it).\nCould you change this line to a proper test with actual files? I don\u2019t trust nil/nil being appropriate enough.\n. I\u2019d rather have a clearer message:\nruby\nskip \"Symlinks are not supported by Ruby on Windows.\"\n. Out of curiosity, why does this (and handlebars) need :platforms => :ruby?\n. I\u2019d rather leave Gemfile.lock intact. The next time I check in Gemfile.lock, all the -mingw32 stuff will be gone anyway (and presumably this would break a bundle install on non-Windows machines).\n. Answering my own question here: see Gemfile documentation.\n. OK, I can live with that.\n. Agreed that a check like this should go into a function. I think #on_windows? in Nanoc::TestHelpers would be a good place to put this. Another benefit of putting it in a function is that you can memoize it.\nI personally don\u2019t really care about testing for msdos or djgpp (nobody uses these anyway).\n. I\u2019d change it.\n. I prefer a (memoized) method.\n. :+1:\n. Hmm, good question. It\u2019s not quite easy to find a place to memoize it once.\nOn second thought, a constant would also be fine. :)\n. I\u2019ve also seen variations of this regex that include emx and vista. Maybe those should be added here too?\n. The problem with checking environment variables is that they could also be set in non-Windows OSes, for a variety of reasons. I\u2019d rather stick to RUBY_PLATFORM.\n. If a Sass file is found, but cannot be matched to an item in the nanoc site, what should we do? Error? Warning? Ignore?\n. What if there are other importers? Do we need to override all? Can we prevent other importers from being used?\n. Plain ignore gets a -1 from me, because this might lead to problems that are very hard to debug.\nIgnore + always recompiling the item that has the @import would work if nanoc had a way of marking an item as \u201calways dirty\u201d, which it doesn\u2019t, so that also gets a  -1 from me (unless we can implement \u201calways dirty\u201d?).\nWarning is good.\n. One that inherits from Sass::Importers::Filesystem AFAIK.\n. Oh yeah, warnings really don\u2019t make any sense (and errors even less).\nThe only sensible option is ignoring.\nIgnoring + always recompiling doesn\u2019t really make sense. If we let nanoc always recompile anything that depends on an external file, then everything will always be recompiled, because there\u2019s plenty of dependencies on Ruby source code, external libraries, OS functionality, etc\u2026\u00a0so always recompiling is not a sensible option.\n. @chriseppstein Sass partials are considered items (without output paths, usually*) and dependencies are handled properly.\n(* Partials are usually not outputted, although they strictly speaking can be. That doesn\u2019t have an effect on dependency tracking though.)\n. @chriseppstein What should be overridden in the sprite importer to catch all @imported paths? I see\n- ::Compass::SpriteImporter.files(uri)\n- ::Compass::SpriteImporter.find_all_sprite_map_files(path) (not used within the class itself)\n. @chriseppstein I\u2019m not sure why I need access to options\u2026 should the return value of #files not be enough?\n. Changing a gem version doesn\u2019t cause a full recompile. I\u2019ve thought about doing this, but I don\u2019t think it makes a lot of sense. Maybe for major (X.y.z) versions it does, if you consider semantic versioning?\n. On second thought, nanoc needs some work in order to properly support sprites, so I\u2019d rather leave the part related to sprites for some other time.\n. # encoding: utf-8 comment at the top is missing.\n. The MultiMarkdownFilter should be in Nanoc::Filters, so the class name is Nanoc::Filters::MultiMarkdown.\n. Instead of doing IO here, I\u2019d use raise Nanoc::Errors::GenericTrivial.new(\"nanoc-multimarkdown: invalid output format: #{value}\") so that it is easier to test (you can then check whether an error was raised).\n. Don\u2019t use class variables. I\u2019d suggest callling #odebug only when params.fetch(:debug, false) is true, so that you don\u2019t need to store the debug bool at all.\n. Same comment as above for Nanoc::Errors::GenericTrivial.\n. Ruby uses snake_case for method and variable names, so this should be parse_options.\n. The #parse_option method should be private.\n. The #odebug method should be private.\n. The comment here is superfluous.\n. :+1: for source code documentation. nanoc uses YARD for its documentation though (see the source code documentation for Nanoc::Sass as an example).\n. These two lines can go into a new #executable_from_params(params) function.\n. Instead of iterating over all keys/values, I recommend letting the filter take a list of commandline arguments to pass to multimarkdown:\nruby\nopts = params.fetch(:opts, [])\nwhich then lets the user use the full MultiMarkdown executable options, including ones that have not been invented yet, without bothering about writing things in a Ruby-like way:\nruby\nfilter :multimarkdown, opts: %w( --compatibility --to=latex )\nThis approach also drastically reduces the size of the filter implementation.\n. You can pass an array to IO.popen, which is a lot safer than making a potentially insecure string.\n. Not sure what you mean by URI.parse not being able to recognise SFTP:\n``` ruby\nURI.parse('sftp://example.com/foo').scheme\n=> \"sftp\"\n``\n. systemu does support passing an array as the command, e.g.systemu([ 'ls', '/etc' ]).\n. You also don\u2019t need theflatten` if you use a splat, e.g.:\n``` ruby\n[ 1, *[ 2, 3 ], 4 ]\n=> [1, 2, 3, 4]\n``\n. Thetasks/deploy/rsync.rake` file is there for backwards compatibility reasons, from back in the day where some plugins were written as rake tasks.\nI would get rid of lib/nanoc/tasks/deploy/lftp.rake entirely.\n. Newline at end of file please :)\n. I know I am not using it consistently everywhere, but I prefer using #fetch over #[] + ||. Compare these:\nruby\nconfig[:options] || DEFAULT_OPTIONS\nconfig.fetch(:options, DEFAULT_OPTIONS)\n. Should be @param [String] content instead of @param content [String].\nYou can run rake doc to generate the source-code documentation and see whether everything looks good.\n. I don\u2019t like modifying params. I\u2019d prefer params.fetch(:debug, false).\n. Same as above: params.fetch(:path, nil). There\u2019s no point in deleting it.\n. I\u2019d get rid of the space here for consistency.\n. Oh yikes, that\u2019s bad. (I didn\u2019t spot your source code comment at first\u2014sorry.) I wonder whether that wouldn\u2019t be recognised as a bug in the uri library in the first place.\nWould still be nice to extract all the logic for getting host, port and path into a separate method.\n. Yup\u2026 one day I will go through the source code and change all foo[key] || val to read foo.fetch(key, val).\n. :+1: for dropping the regex-based validation in the deployer and letting lftp handle it!\n. I don\u2019t think this one is necessary (it is for rsync).\n. The 'index.html' should use site.config[:index_filenames] (which nanoc also uses to strip filenames off generated URLs).\n. I\u2019d rather throw an error here, rather than guessing and correcting.\n. Can you use IO#popen3 instead of backticks? Using backticks with interpolation is generally a bad idea.\n. This should be written to standard error instead.\n. Don\u2019t use else with unless (confusing). Swap the two branches around and change it to an if.\n. What does this comment refer to?\n. This check can fail if one branch name is a substring of another one.\n. Can you undo the changes to bin/nanoc? These changes are not required for the after_setup_procs feature to work. I\u2019d like to limit the changes made to nanoc 3.x as much as possible to prevent difficult merges later on.\n. Can you get rid of the self.s here? This will make the diff smaller.\n. :+1:\n. It is not overkill, because wrong user input can still generate undesirable and potentially destructive side effects.\n. Thanks for spotting this :)\n. Good point.\nWe can rescue TypeError, but to be 100% safe, the #load method should probably take an argument that indicates whether or not this invocation is a retry, and if it is, do not retry but just reraise the error. What do you think?\n. Why od you change the rules_filename here?\n. Hmm, it\u2019s actually not easy at all to make this fail (I noticed while trying to write a test for this). The only thing where this double-call check is necessary is when FileUtils.rm_f(filename) fails, because in the next call, the function will exit before the begin/rescue/end block, because !File.file?(filename).\nSo I think it\u2019s OK to stick with the original implementation.\n. This set of changes is quite long and should be extracted into its own method. A method that recursively loads config files should do the trick.\n. I don\u2019t like reassigning instance variables like this. Also see the note below; once this bunch of code is extracted into its own method/function, this will become a lot cleaner.\n. config_paths + config_path rather than << because the latter mutates.\n. Braces around arguments here:\nruby\n@code_snippets.concat(code_snippets)\n``\n. lib_dirs (plural) would be a better name.\n. I\u2019m inclined to just use\nruby\nDir[\"#{lib}/**/*.rb\"]\n. I\u2019d prefer config_paths to be a Set rather than an array (there is no need to have it ordered).\nA better name for this param would be seen_config_paths.\n. keys_to_invalidate is undefined and causes a NameError: undefined local variable or methodkeys_to_invalidate'.\n. Theoretically, yes, but I only really care about the version that is currently the latest one. (Travis CI runs 1.7.11.)\n. This should be$stdoutrather thanStringIO.new, so that people can see deployment progress.\n. I preferconfig.fetch(:remote, 'origin')andconfig.fetch(:branch, 'gh-pages').\n. I\u2019d remove this entirely. For example,https://github.com/nanoc/nanocis a valid Git URL, but does not end with.git.\n. I would prefer not to do any potentially destructive operations. This means not removing/adding remotes.\n. Same comment as above. I think the initial setup (git initandgit remote add origin whatever) should be done by the user.\n. I\u2019d prefer to simply perform agit checkout and if that fails, print an error message. I don\u2019t find it good behavior to try to create a branch. (As an added bonus, a typo in the branch name will be caught more quickly.)\n. Get rid of the--force. This flag should never be used for automated deployment.\n.stdouthere is undefined.\n. Checking for://won\u2019t always work; for example,git@github.com:nanoc/nanoc.git` is a valid git address too.\n. I like to have a blank line between the metadata section and the content, like this:\n```\ntitle: \"Hello\"\ncontent goes here\n```\nWhat about calling .sub(/\\A[\\r\\n]/, '') on the content (instead of.strip` originally)? That would allow the empty line between metadata and content and it\u2019d still be stripped (it\u2019d be the only thing that is stripped).\n. Not entirely sure about the wording here. What about:\n\nThe layout file '#{content_filename}' is a binary file, but layouts can only be textual.\n. Can you remove the extra space here?\n\n\n. Can you add method call parens here, and rename exists to exist?\nunless File.exists? output_dir\nshould be\nunless File.exist?(output_dir)\n. Idiomatic Ruby uses [] instead of Array.new.\n. Idiomatic Ruby doesn\u2019t use the then after the if. (There are some similar instances below.)\n. ruby\nif not self.dry_run? then\nshould become\nunless dry_run?\n. Method calls that accept parameters should use parentheses.\n(There are some exceptions to this, but puts and require are the only ones I can think of at the moment).\n. Updating state here is troublesome, because this method should only return a boolean, and because the stored state depends on the item param.\nI\u2019d prefer the matches to be not stored at all. They will have to be recomputed, but I do not believe this is a big issue.\n. The formatting here is quite odd.\nruby\nif last_err\n  return Result.new(href, last_err.message)\nelse\n  raise 'should not have gotten here'\nend\n. I prefer not to use ifs at the end of the line because it makes it easy to overlook.\n. @bobthecow Good point. It does create an exception to the rule though, and I prefer to avoid exceptions.\n. This is definitely a good change. If you can extract this into a branch on release-3.7.x that\u2019d be great!\n. I\u2019d reword this. How about:\n\nExecutes the given block, making sure that the datasources are available for the duration of the block.\n\nMentioning the \u201ctrouble\u201d bit is unnecessary since it is clear enough that this method uses the idiomatic Ruby resource cleanup style.\n. And yes, I do care about documentation :)\n. Good suggestion.\nI\u2019d extract the entire construction of md5_by_key into a separate helper function.\n(A separate helper function that takes config and files will be much easier to test.)\n. I\u2019d like this to be extracted in its own helper function too. Something along the lines of #identical? that takes the hashes, the config and the filepath.\n. Also, please use something else than MD5.\n. The addition of the new extra_files param makes it not backwards compatible. Could this be converted into a params = {} defaulting to []?\n. I used to think that way, but I\u2019ve decided to go with the Ruby standard and I am quite used to it now. Not having these empty lines means more visible lines of code on the screen, and from my personal experience, it\u2019s not harder to read.\n(It did take me a while to adjust to, though.)\n. You\u2019re right. I didn\u2019t spot the @api private. So, never mind :)\n. @mpapis The style guide is derived from practices found in many Ruby projects. It\u2019s middle ground; it will never please everyone perfectly.\nI started preferring consistency over doing the \u201cright thing\u201d. Consistency means that people know what to expect. The \u201cright thing\u201d is often not clear, and what the \u201cright thing\u201d is also differs from person to person.\nFrom my experience at work dealing with a lot of Ruby projects written by many people, I find that Rubocop defines pretty nicely what my colleagues have in mind of what good Ruby code should look like. I\u2019ve cast my personal preferences aside and went with a style that everyone agreed upon.\nA code base with a consistent style is a pleasure to work with. While cleaning up the nanoc source code (mostly automatically, using Rubocop\u2019s --auto-correct), I found many style quirks that clearly indicate that different people with different stylistic preferences have worked on the nanoc code base. Having Rubocop to automatically check the style (and perhaps correct it) makes sure the code base\u2019s style remains consistent within the project itself.\nThat said, I don\u2019t agree with everything that Rubocop says; for instance, I do not agree with AsciiComments (\u201cUse only ASCII symbols in comments\u201d), and that is why it is turned off for nanoc.\n. For consistency, I\u2019d rather have this be\nruby\nextra_files.each { |extra_file| patterns << \"#{dir_name}/#{extra_file}\" }\n. I don\u2019t think we should default to .{htaccess,htpasswd} here. I believe the default should be empty.\nHaving an empty default is both more predictable and more explicit.\n. I prefer #<< in this case, since it modifies the array rather than creating a modified duplicate. Since #all_files_and_dirs_in is the method in which the array is constructed, modifying the array in-place is good.\nIt\u2019s also more compact, and arguably easier to read.\n. Modifying the array in-place is definitely faster:\n``` ruby\nrequire 'benchmark'\nBenchmark.bmbm do |x|\n  x.report('#<<') do\n    a = []\n    50_000.times { a << 1 }\n  end\nx.report('#+=') do\n    a = []\n    50_000.times { a += [1] }\n  end\nend\n```\n```\n          user     system      total        real\n<<   0.010000   0.000000   0.010000 (  0.008376)\n+=   2.310000   3.880000   6.190000 (  6.208789)\n```\nNot that it matters much in this case, but there\u2019s no reason to use += over << here.\n. It\u2019s not a bug. The + form creates a new array by copying the original array and adding the new element. Copying is slow and creates lots of temporary objects that stress the GC.\n. I prefer #concat:\nruby\npatterns.concat(extra_files.map { |extra_file| \"#{dir_name}/#{extra_file}\" })\n. This should be 'typohero', naturally.\n. I\u2019d remove the comment\n. Yup, that\u2019s OK. It doesn\u2019t make sense to use #concat when appending only a single element.\n. The formatting here is odd and Rubocop likely won\u2019t agree with it. I propose this:\nruby\nif Gem.ruby_version >= Gem::Version.new('1.9.3')\n  task :test => [:'test:all', :rubocop]\nelse\n  task :test => [:'test:all']\nend\n. I suppose we could define #base64digest somewhere in core_ext for Rubies < 1.9.x.\n. The reject and group_by lines should be indented two spaces more (was wrong originally too)\n. Good point. Reverting.\n. We can\u2019t set the digest value because at the time it isn\u2019t known yet.\n. Oh, doh. That\u2019s clearly wrong.\n(Must have been my lack of coffee.)\n. Fixed.\n. I\u2019d prefer to have this in a constant rather than a class variable (I think Rubocop will complain anyway).\n. Does it make sense to disallow linking to a non-secure site from a secure site?\n. Renaming this method breaks backwards compatibility of the API. Could you change it back, or let hrefs_in_file proxy to the new method?\n(I\u2019m not sure whether LinkChecker should\u2019ve been part of the public API, but it\u2019s too late now anyway!)\n. Nevermind, just saw that you already did that. Sweet :)\n. (FYI: you can mark classes/methods/modules/\u2026 as not part of the public API using @api private.)\n. I go for private only these days as I find protected to be not so useful.\n. Same comment about the constant vs class variable as below.\n. (I think you might have to use @private to hide it in the YARD documentation.)\n. Could you move this into the MixedContent class? This way, PROTOCOL_PATTERN won\u2019t be a top-level constant. Constant lookup will still work.\n. Same as above (move into LinkCollector).\n. Can you move the unless options[:force] next to the condition here?\nruby\nif File.exist?(path) && !options[:force]\nThe options[:force] will otherwise be overlooked too easily, I feel.\n. The error message isn\u2019t as clear as it could be. Suggestion:\n\nThe site was not created, because #{path} already exists. If you really want to create a site in this directory, re-run this command with --force.\n. Yeah, that was weird.\n. Yup. I\u2019m on to that right now. :)\n. Good catch.\n. Done\n. I kept rdoc in there\u2014I think it makes sense to have it in there.\n. Thanks, updated! (see #552\u2014not this PR)\n. The \u201cvisit\u201d ends before the method returns. There\u2019s nothing to be done during the visit in this case.\n\nThere\u2019s really only one place where stuff needs to be tracked during a visit (between start/end) and that is when compiling an item.\nHaving a :visited shorthand could be useful, I guess!\n. Probably not. :(\n. Necessary because Rake calls this for some reason.\n. I\u2019m not sure where the summary is displayed\u2014it at all.\nThe nanoc RubyGems page prints the description only, and so does the RubyGems twitter bot.\n. It is displayed in gem list --details and gem search --details nanoc.\n. Example:\n```\n% gem search --details nanoc\n[snip]\nnanoc (3.8.0)\n    Author: Denis Defreyne\n    Homepage: http://nanoc.ws/\na web publishing system written in Ruby for building small to\nmedium-sized websites.\n\n``\n. That\u2019s the output format of thegem` command and cannot be changed.\n. I replaced the summary with something shorter and more clear:\n\nA static-site generator with a focus on flexibility.\n\nIt\u2019s shorter and less vague.\n. nanoc isn\u2019t written with an uppercase N (yet), so that stays.\nThe \u201call pages\u201d bit isn\u2019t entirely correct because there\u2019s still the option to have different layouts for different pages\u2014an approach some people actually take. I removed the \u201call\u201d and now it looks fine.\n. And I can\u2019t verify/test, because I don\u2019t have access to a Windows machine.\n. Fix in #656.\n. Yup, new in Ruby 2.1.\n. Replace\nruby\n@items.find { |i| i.identifier == \\'/includee/\\' }\nwith\nruby\n@items[\"/includee/\"]\n. I don\u2019t think KeyError is correct\u2014that is an exception used when the value of a given key isn\u2019t found. I think raising a string is OK.\n. Can you replace :modified with :updated? This way, it reflects the name of the method.\n. Hmm, this :created is incorrect. Some context:\nIf #can_reuse_content_for_rep? returns true, then that means that the compiled content (which was cached in the previous compilation run) can be reused without actually recompiling the item. This is used when an outdated item includes content from an item that is not outdated, and whose content can thus be reused without recompiling.\nIn the ItemRepWriter, Nanoc determines whether the resulting file exists already (is_created), is modified (is_modified), or neither. (See these ItemRepWriter lines.)\nIt\u2019d be useful to make use of the ItemRepWriter modified/created logic that already exists. Creating a snapshot for which a route is defined will make the item rep writer write out the compiled content. The :last snapshot, containing the compiled content after the entire rule is executed, is trigged by the line executor.snapshot(rep, :last) in the #recalculate_content_for_rep method below.\nPerhaps the ItemRepWriter could update the item rep to set item_rep.modified = is_modified, with is_modified being whatever ItemRepWriter already calculates. (I don\u2019t think there\u2019s a need for a similar created attribute.) The advantage of this is that only ItemRepWriter determines whether content is deemed changed. In the following cases, ItemRepWriter will treat the content as not modified:\n- An item that is recompiled (#can_reuse_content_for_rep? returns false), but whose content turns out to be identical after compilation\n- An item whose content is reused (#can_reuse_content_for_rep? returns true)\n- An item that\u2019s not even considered for compilation (not considered outdated)\n. See other (big) comment\u2014these two methods might not be necessary.\n. :+1: for having PostCompileItemView. I got a little lazy and didn\u2019t create a PreprocessItemView (and friends, like the collection view), but that\u2019ll change Soon\u2122. (See #571.)\n. Use Hash#fetch instead, e.g. attributes.fetch(:active_class, 'active')\n. Don\u2019t mutate attributes.\n. #reduce will be slow. Prefer appending to a string rather than creating new strings.\n. Add alias_method :compiled?, :compiled for extra sweetness\n. I like modified (more than updated which I use elsewhere) but I\u2019m still hesitant to expose this as part of the public API just yet. I\u2019d prefer to have it just on PostCompileItemView for the time being.\n(I\u2019ve been bitten by trying to expose too much before, so I\u2019d like to avoid that!)\n. In other words, could you add # @api private so it\u2019s marked as private in the API docs?\n. I don\u2019t think meta_raw is used.\n. Pass this string to Nanoc::Int::Checksummer.calc rather than using it as-is (otherwise the checksum will be enormous).\n. nm\u2014it is!\n. Can you update the #parse documentation to reflect the changed return value?\n. Hmm, good point. Perhaps renaming the parameter to checksum_data, making it clear that it is not the checksum itself, is enough to clear up the confusion.\n. with_environment does not appear to be called with an argument except for tests. Make the tests set up the environment, and remove this argument.\n. For style consistency, wrap method arguments in parentheses.\n. 1. Same parentheses remark as above.\n2. I suggest NANOC_ENV, for consistency with RAILS_ENV and RACK_ENV\n. You can use #fetch here: prefer foo.fetch(a, b) over foo[a] || b\n. The to_s calls should not be necessary here.\n. Can you extract the logic for generating the tmp path into Nanoc::Int::Store, as a class method marked @api private? Add tests for this extracted method, too. This way, it won\u2019t be duplicated, and it can be tested.\n. + parentheses\n. I don\u2019t think it makes sense for -e to have an optional argument, since it defaults to :default anyway. Make the argument required, and remove the || :default check below.\n. + parentheses\n. Environment names should be strings.\n. I don\u2019t think the environment should be allowed to be a symbol.\n. Can you document this? @return [String, nil]\n. I\u2019m not in favour of modifying output_dir like this. The output_dir can be specified on a per-environment basis, if necessary, so there\u2019s no need for this logic.\n. Extract the :environments symbol into a constant.\n. I could\u2019ve left it that way, but #add is a nicer API, and it\u2019s likely faster as well.\n. This mutates env_config, which is not good.\n. Add a contract here as well.\n. This lacks tests\n. This lacks tests\n. I\u2019d remove support for symbols, and only use strings instead (there\u2019s no use case for symbols).\n. The name env (and @env) is confusing; the name makes it sound like it\u2019s similar to ENV. Maybe env_name?\n. Rename ENVIRONMENTS to ENVIRONMENTS_CONFIG_KEY\n. Also here: rename env to env_name\n. The constructor of this class is becoming not so obvious at this point. Can you use named arguments rather than default values? (e.g. def initialize(hash: {}, env: nil))\n. Extract 'default' and NANOC_ENV into constants\n. Actually, remove output_dir entirely.\n. This lacks tests\n. This lacks tests\n. Add a test for options defined not within the default env, but globally (should return bar)\n. The name store is confusing, as it is the name of a store rather than the store itself. Rename to store_name.\n. When calling this function, the argument names aren\u2019t obvious. Using named arguments will make this nicer.\n. What happens if no nanoc group exists? What if it is empty?\nA change without tests puts me off, but at the same time, I have no idea how to test this in an automated fashion.\n. I\u2019d replace\n\"\u2026 item, rep: #{item.identifier}, #{item_rep.name}\"\nwith\n\"\u2026 #{item_rep.inspect}\"\n. Replace this with warnings.any? (I know Rubocop says warnings.length.nonzero? but that\u2019s not as nice.)\n. Replace\n!(r =~ warning)\nwith\nr !~ warning\nOr alternatively, replace\nselect { |warning| !(r =~ warning) }\nwith\nreject { |warning| r =~ warning }\n. Pygmentize, not pigmentize (the \u201cPy\u201d is from Python!)\nSame for the filename.\n. Are these gemfiles still necessary, given that appraisal install is executed already?\n. Yeah\u2026\nFor Nanoc::CLI, I could\u2019ve probably changed that to Nanoc::CLI.root_command and then write a function to (recursively) find subcommands, but that\u2019s arguably not much better\u2026. It\u2019s OK if it\u2019s only in a test I think :). You could use options_for_rack[:host] instead of options[:host] || 'localhost'.\nThis made me wonder whether defaulting to 0.0.0.0, rather than 127.0.0.1, is a sensible default\u2014it probably isn\u2019t. :/. attributes is a list of top-level attributes that are touched, so this should be keys.first instead. Nanoc only tracks dependencies of keys one level deep.\n(keys will also work, but generate unnecessary dependencies.). Prefer be_nil over eql(nil). The name save_with is confusing out of context; what about nokogiri_save_with?. This change is missing a test case.. I picked whatever listen recommended me to do \u2014 though I didn\u2019t know about install_if.\n(I think it\u2019s fine in this case, because the Gemfile.lock isn\u2019t bundled with Nanoc anyway.). suggestion\n      if sourcemap_path == :inline. suggestion. I\u2019d move require 'base64' all the way to the top of the file. It\u2019s part of Ruby\u2019s stdlib so it is safe to require there.. ignore \u2014 this won\u2019t work. ignore \u2014 this won\u2019t work. Or even better: stick it somewhere in this list: https://github.com/nanoc/nanoc/blob/master/nanoc/lib/nanoc.rb#L40-L62 (sorted alphabetically)\nAll of Nanoc\u2019s generic requirements are in there.\nIt needs to be require 'base64' (requires is a Nanoc thing \u2014 it eventually results in a require, but it doesn\u2019t execute require until the filter is actually used.). This is in particular used for regression tests, although I have also started writing integration tests in spec/nanoc/integration.\nIt\u2019s not a substitute for unit tests, though, because the integration/regression tests tend to run slowly and so it\u2019s not great for testing all the different cases.. As discussed on Gitter, this won\u2019t work with paths that are relative to the item itself and live outside of the Nanoc content directory.\ne.g. current item = content/style/foo.sass, path to import = ../../external.sass'. This is wrong \u2014\u00a0hardlinks will not behave properly as it can lead to incorrect situations where one of the hardlinked files change.. Fixed!. I don\u2019t have much of an opinion here \u2014\u00a0if the tests pass and Rubocop is happy with it, then I\u2019m happy.. I think the|| :scsscase is not tested, and likely not correct either (if there is no extension,.downcase` would raise a NoMethodError I expect).. ",
    "arnau": "It would be more interesting the bound with the @config[:output_dir]. Usually I change this value in the preprocess block to manage different output situations.\n. agree, just @config seems logical.\n. Definitely I misunderstood this. Now I think I get it.\nApologies for the inconvenience!\n. Mmm, but in that case clean_items = @items.reject { |i| i[:content_filename].nil? } is not enough?\n. I thought better to first see your fix and then rerequest if needed. I'm going to check that.\n. Now it seems all working as expected. My only concern is that because using Nokogiri the HTML result is not going to be exactly the same.\nLet's say that I like to not closing tags if possible, like:\n<p><img src=\"/foo.png\">\nThe result through Nokogiri (at least with the actual configuration) is\n<p><img src=\"/foo.png\"></p>\nWhich is valid and correct but is not what I coded. Probably it's an edge concern but it matters to me. What do you think? A filter which goal is to change paths should be changing other things?\n. In the context of HTML and XHTML yes, all @src and @href works the same way.\nActually, I'm seeing that I missed the object/data case which is less and less used but stills being part of HTML. In the same context (embedding Flash needs param[@name='movie']/@content too.\nThe video/@src, the audio/@src, the source/@src and the non-standard embed/@src (which would be covered by your proposed rule @src.\nBesides those generic rules it would be great to be able to add more selectors in HTML like the new @data-* attribute which is unpredictable due its nature (http://www.w3.org/TR/html5/global-attributes.html#embedding-custom-non-visible-data-with-the-data-attributes).\n. Ok, I just did what you said plus the object/@data and param[@name=\"movie\"]/@content case.\n. So true.\nCan we assume that conditional comments are always placed in the head element? If not, the process will check\nfor all comments in the document slowing it down a bit.\n. Ok, the patch I submitted deals with all conditional comments in the document.\n. Probably the Gemfile should reflect this restricting the nokogiri version to ~> 1.5.5\n. ",
    "cdlm": "What about a config option to tell nanoc that output/ is a build directory?\nWhat happens currently, if you have an asset in output/ and inadvertently route an item to the same file? it gets overwritten?\n. nanoc watch seems to work here. Try removing & reinstalling fssm and rb-fsevent maybe? FYI I'm using ruby 1.9.2p290.\n. Yes, Lion\u2026 I even just re-tested on 10.7.1. What's strange is that watch works but auto compile doesn't\u2026\n. This is due to the deploy command added to nanoc since 3.3; see http://nanoc.stoneship.org/docs/6-guides/#deploying-sites.\nAdding that kind: rsync to your deploy target in config.yaml should be enough.\n. I defined a command that runs another one. Also some of the tests run one command to create a site, then another one inside it.\n. Effing merges, how do they work?\n. Phew, that required some branch juggling, but looks better :)\n. Seems very similar to my monkey patch; would be nice to officialize it. I would even remove bold for identical/skip items, actually.\n. Some terminals abuse the bright colors to mean bold, some abuse bold to mean bright\u2026 none have a strictly coherent and working set of options\u2026\n256 color support means nanoc will not respect the terminal theme easily (because the color hues are explicit), so with it comes themeing etc\n. Not sure I agree here\u2026 starting points are nice but I believe they are one of the small frustrations waiting for you when you start with nanoc. It's like having a nice language with visible holes in its standard library (you know which one :) ).\nI think giving the bundled helpers some love and making them a bit more generally useful, fluent, and composable would make a much better first experience with nanoc.\n. ehrm\u2026 why are the typo/bundle commits in there ?\n. I didn't set a base for the pullreq\u2026 I\nWell the point is to make the Sass filter not break my compile :)\n. Someday maybe I'll understand git\u2026\n. See #276.\n. Nice. If I ever get some time and motivation I'll have a look at the zsh version.\n. Would it make sense to implement completion as a normal nanoc command, e.g. nanoc complete --bash \u2026 ?\n. Idea: a mixin that implements the rest of the Hash protocol, when you need objects that are like hashes.\n. See guard/guard-nanoc#20\n. I still have an encoding: UTF-8 line in nanoc.yaml. Presumably this relates to content and layouts\u2026 is it still needed?\n. actually, what about \"The site has no deploy configurations\" ?\n. ",
    "nikhilm": "Hi,\nThanks for pulling in my patch. If you prefer working with Hg, I could clone the hg repo instead as I am comfortable with both.\nI will fix the syntax highlighting to the two option format, first precedence to html specification and second to '#!' + tests.\nAs I said previously, I'm no Ruby expert, but I will see if I can figure out the bug issue, otherwise I will send you/nokogiri devs a backtrace. That said, I'm not really changing the behaviour, just making it more verbose, so I doubt it would break anything.\nI won't have time this week, so patches might land up next week or so.\n. ",
    "tkareine": "We have a setup where users have their own content directories, but the rest of the site (including custom code and layouts) is shared between the users.\nBecause nanoc stores content related data in the tmp directory and our content is user-specific, we cannot share the tmp directory between the users. For example:\n1. Users A and B share the site and the tmp directory, but have different content and output directories. Both users have item foo.html in their content directory, but with different content.\n2. User A compiles the site, using /content_a => /output_a\n3. User B compiles the site, using /content_b => /output_b\n4. User A does not change foo.html in /content_a, but compiles the site again anyway\nWhat happened: nanoc compiles foo.html in /content_a again, because the tmp directory has different compilation cache contents due to step 2\nWhat should have happened: nanoc should have noticed that there is no need to compile foo.html again, skipping the compilation.\nI'm sorry for taking so long to reply to this, I've been busy with other things. I'd like this feature to be merged in the mainline repository, because it is a burden to maintain a forked version of nanoc.\nI've updated the patch to fit to the latest revision of nanoc better. I added a test as well. The new patch is at https://github.com/tkareine/nanoc/tree/config_tmp_dir_try2\nBest regards,\n  Tuomas\n. In our problem domain, the only compiler input that differs between the users is the content. We even share some site assets (images, javascript, css) from a second content directory with a custom data source.\nWhat you suggest is the opposite to our current setup: every user has his own site with a directory structure with symlinks to shared resources. I think such a setup would be difficult to maintain. For example, if we introduce a new directory based data source, a new symlink would have to be made for every user. Besides, the need to make symlinks for each user is a duplication smell.\nI see tmp directory configuration analogous to content and output directory configuration. The latter are configurable already, so why not make tmp directory configurable as well?\nBest regards,\n  Tuomas\n. ",
    "minad": "thx!\n. I take a look. I found the dep just a bit weird and uncomfortable, but we should definitely keep the current behaviour which makes sense.\n. It seems that this adsf behaviour is somehow non-standard. Then you are right that we should stick with adsf. The question is just if this dependency is necessary or if it wouldn't make sense to include this one class in the nanoc gem. I usually try to avoid too small gems in my projects, especially if they introduce such hassle like adsf vs asdf etc.\n. Yes, it is impossible to beat a native extension. But there are multiple other advantages over fast-aleck:\n- More hackable and extensible since you have access to regular expressions in Ruby\n- Only 270 lines of code compared to > 1000 lines of C code\n- Works in JRuby\nI tried to use fast-aleck, however it doesn't seem to be maintained very actively (I created two issues there). I looked into the rubypants and typogruby source but they are both slower than something like that should be (gsub everywhere, recursive regex calls, even md5 computations). Therefore I wrote typohero in a few hours which should be as fast as you can get with pure Ruby. It is 10 times faster than rubypants, but it is probably still 10 times slower than fast-aleck.\n. One thing I have to mention: If I use it in a real world application, only 5-10% of the time are spent in typohero, compared to 80% with typogruby. Therefore this is perfectly acceptable imho.\n. You might remember that I argued against the split and I still think it is far less maintainance effort to keep it in one repository. I mean they keep whole package repositories, the kernel source, etc. all in one repository ;)\nIn the ruby community it seems to be a trend, to split gems into microgems, e.g. tilt wants to do that, mustermann does it, ... But mustermann for example keeps it in one repository and generates multiple gems from it. Also rails does it that way, I think. For rails I see the point to split, but for other things not. It doesn't matter if I have ten more classes with a few lines of code lying around.\n. fixed, should I push it?\n. @ddfreyne fixed\n. @ddfreyne Ok, you can create a separate gem if you want.\n. @ddfreyne Sure thx!\n. But you didn't pass it to the IndexFileFinder?\n. ",
    "xavier": "As long as the feature makes it into nanoc, I'm fine! ;)\n. ",
    "cspickert": "+1 would really like to see sass working again!\n. ",
    "austinbirch": "That's okay. I just found it a much DRYer way of filtering by multiple categories (or any other attributes) for more complex blogs. Would it be something you'd prefer to be within it's own method, for example, articles_with_attribute?\nThanks,\nAustin\n. No, you're right, I wouldn't. The second is much more Ruby. \nWhat I would like to use though (this being the original suggestion) is:\nsorted_articles( :category => 'featured', :type => 'audio' )\nRather than:\nsorted_articles.select { |i| i[:category] == 'featured' && i[:type] == 'audio' }\nWhich, in my opinion, is neater and probably easier to read.\nPerhaps I should have written more obvious tests.\n. ",
    "mikz": "Dammit! Now I'm really embarassed. I was looking to 3.1.x branch a typing in master.\n. Could you merge this to 3.1.x branch? If there will be 3.1.8 before 3.2.\n. Thanks!\n. ",
    "auxbuss": "Removing the colorize filter fixes the self-closing issue. The single line\nfilter :colorize_syntax\nis sufficient to cause the problem.\n. I can fix this for my site by doing this:\nruby\ncompile '*' do\n  ext = item[:extension]\n  if ext == 'haml' || ext.nil?\n    filter :haml\n  elsif ext == 'md'\n    filter :colorize_syntax,\n      :default_colorizer => :pygmentize,\n      :colorizers => { :ruby => :pygmentize, :nginx => :pygmentize }\n    filter :kramdown\n  else\n    raise \"Filter is not configured for #{item.identifier} in Rules file. #{item[:extension]} and #{item[:filename]}\"\n  end\n  layout 'default'\nend\nPerhaps this is best practice. I'm not a nanoc ninja.\n. Hi, The problem is still there. when I do this:\nruby\ncompile '*' do\n  ext = item[:extension]\n  if ext == 'haml' || ext.nil?\n    filter :haml, :ugly => true\n  elsif ext == 'md'\n    filter :kramdown\n  else\n    raise \"Filter is not configured for #{item.identifier} in Rules file. #{item[:extension]} and #{item[:filename]}\"\n  end\n  filter :colorize_syntax,\n    :colorizers => { :ruby => :pygmentize, :nginx => :pygmentize }\n  layout 'default'\nend\nSo, I'm doing this:\nruby\ncompile '*' do\n  ext = item[:extension]\n  if ext == 'haml' || ext.nil?\n    filter :haml, :ugly => true\n  elsif ext == 'md'\n    filter :colorize_syntax,\n      :colorizers => { :ruby => :pygmentize, :nginx => :pygmentize }\n    filter :kramdown\n  else\n    raise \"Filter is not configured for #{item.identifier} in Rules file. #{item[:extension]} and #{item[:filename]}\"\n  end\n  layout 'default'\nend\n. HTML5 is not used. The global site template starts with:\nhaml\n!!!\nproducing:\nhtml\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n<html lang='en'> \n  <head>\nIt is not code that requires highlighting that creates the error. The errors occur on pages where there is no code highlighting. I only use markdown files for blog pages, the static content is in haml files, although I do occasionally drop into markdown within the haml pages.\n. Hi, I've created a minimal project to recreate this problem.\nhttps://github.com/auxbuss/nanoc-problem\n. nanoc 3.1.9 (c) 2007-2011 Denis Defreyne.\nRunning ruby 1.8.7 (2010-06-23) on i686-linux with RubyGems 1.3.7\n. Reverting to 3.1.8 compiles the project.\n. Hi,\nsass (3.1.3, 3.1.2)\n. \n$ gem test nanoc3\nNOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.\nGem.source_index called from /usr/lib/ruby/gems/1.8/gems/rubygems-test-0.4.3/lib/rubygems/commands/test_command.rb:76.\nNOTE: Gem::SourceIndex#find_name is deprecated, use Specification.find_by_name. It will be removed on or after 2011-11-01.\nGem::SourceIndex#find_name called from /usr/lib/ruby/gems/1.8/gems/rubygems-test-0.4.3/lib/rubygems/commands/test_command.rb:76.\nNOTE: Gem::Specification#installation_path is deprecated, use base_dir. It will be removed on or after 2011-10-01.\nGem::Specification#installation_path called from /usr/lib/ruby/gems/1.8/gems/rubygems-test-0.4.3/lib/rubygems/commands/test_command.rb:77.\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:141: warning: regexp has invalid interval\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:141: warning: regexp has }' without escape\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:157: warning: regexp has invalid interval\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:157: warning: regexp has}' without escape\nRun options: --seed 24163\nRunning tests:\n.......EEEEEEE............................../usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:200: warning: regexp has invalid interval\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:200: warning: regexp has }' without escape\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:216: warning: regexp has invalid interval\n/usr/lib/ruby/gems/1.8/gems/nanoc3-3.1.9/test/filters/test_sass.rb:216: warning: regexp has}' without escape\n[warn]: Load Order / Name Resolution Problem on Nanoc3::Context#initialize:\n[warn]: Something is trying to call tags on object Nanoc3::Context#initialize before it has been recognized.\n[warn]: This error usually means that you need to modify the order in which you parse files\nE.....F.FF..................E..E..ES...ESE.....F.FEE..EEF..EF.....E........................EEEEE[warn]: so that Nanoc3::Context#initialize is parsed before methods or other objects attempt to access it.\n[warn]: YARD will recover from this error and continue to parse but you may have problems\n[warn]: with your generated documentation. You should probably fix this.\nUpload these results? [Yn]\n\n. Sorry, \"full result\" of?\n. After I press 'n', it goes:\nUpload these results? [Yn]  n\nERROR:  Tests did not pass. Examine the output and report it to the author!\nNo test summary, I'm afraid. (Weird coincidence, because I was fighting rcov in jenkins this morning!)\n. So I tried answering 'y':\nhttp://test.rubygems.org/gems/nanoc3/v/3.1.9/test_results/1767\n. I tried:\nruby\ntask :sass do\n  require 'sass'\n  fred = new Sass::Importers::Filesystem\nend\nand got:\n$ rake sass\nrake aborted!\nuninitialized constant Sass::Importers\nTasks: TOP => sass\n. I just uninstalled sass 3.1.3 (latest) and it still failed. gem update htne built a yard index for sass. But no change to test.\nWill check file now.\n. From locate results:\n/usr/lib/ruby/gems/1.8/gems/haml-3.1.2/vendor/sass/lib/sass/importers.rb\n/usr/lib/ruby/gems/1.8/gems/sass-3.1.2/lib/sass/importers.rb\n/usr/lib/ruby/gems/1.8/gems/sass-3.1.3/lib/sass/importers.rb\n/usr/lib/ruby/gems/1.8/gems/sass-3.1.3/lib/sass/importers.rbc\n. Not sure how to do that. Sorry.\n. Ah, I see.\n\n$ nanoc co\nLoading site data...\n3.0.9 (Classy Cassidy)ed constant Sass\nCompiling site...\n   identical  [0.24s]  output/portfolio/index.html\n...\n\nHmmm\n. But \n\n$ gem list\nsanitize (2.0.3, 2.0.2)\nsass (3.1.3, 3.1.2)\nshotgun (0.9)\n\n. grit (2.4.1)\nhaml (3.1.2)\nhashie (1.0.0)\nI'll uninstall all sass versions and reinstall. But sass 3.0.x is not showing.\nI run gem update most days. I live on the edge :)\n. Weird. I created .rb with:\nruby\nrequire 'sass';\nputs Sass::VERSION\nand get: 3.0.9 (Classy Cassidy)\nBut when I locate 3.0.9 there is no occurrence off sass. Where is this coming from?\n. Reinstall of haml (3.1.2) has no effect.\nNow grep'ing for 'classy cassidy'\n. I'm in new territory here, so perhaps you could help interpret this:\n\n$ ruby -v sass_test.rb \nruby 1.8.7 (2010-06-23 patchlevel 299) [i686-linux]\n/usr/lib/ruby/1.8/sass/tree/node.rb:73: warning: method redefined; discarding old children=\n/usr/lib/ruby/1.8/sass/script/functions.rb:179: warning: method redefined; discarding old initialize\n/usr/lib/ruby/1.8/sass/script/functions.rb:200: warning: method redefined; discarding old assert_type\n/usr/lib/ruby/1.8/sass/script/functions.rb:842: warning: method redefined; discarding old numeric_transformation\n/usr/lib/ruby/1.8/sass/script/functions.rb:847: warning: method redefined; discarding old adjust\n/usr/lib/ruby/1.8/sass/script/parser.rb:193: warning: literal in condition\n/usr/lib/ruby/1.8/sass/script/parser.rb:206: warning: literal in condition\n3.0.9 (Classy Cassidy)\n\n. Okay. Fixed :)\n/usr/lib/ruby has three directories here:\n1.8/\n1.9.1/\ngems/\nThe first has a lot of .rb files named after gems. But no 2011 updates. I know that gems are now installed in gems, so I deleted the sass in 1.8/ and the nanoc compile worked.\nThis machine is less than a year old, so this is not ancient cruft. I'll take it from here. Thanks for your time and assistance. Strange problem.\n. Okay, I've moved to rvm. Can't be worse than circumventing Ubuntu/Debian's ruby mess :)\n. I'm not aware of modifying those.\nIs there no way to ascertain where the failure is occurring? I'm completely blocked at the moment. I appreciate your offer, but I can't provide a copy of the site.\n. The tag pages are generated in the preprocess block, so I thought that was a red herring. Te trouble is, it fails at a different point each time. Same error, but different stack trace.\nThis is the /tag_page/ layout:\nruby\n.tagline.fade-in.fade-in-med\n  %p\n    = \"#{tag} articles\"\n%hr\n.clearfix\n  .column.column600\n    - items_with_tag(tag).each do |article|\n      .post\n        %a.commentslink.right(href=\"#{article.path}\")\n          %small 4 Comments\n        %h3\n          %a(href=\"#{article.path}\")\n            = article[:title]\n        %p.meta\n          %span.date #{article[:created_at]}\n          Tags:\n          = tags_for article, { :base_url => \"/tags/\" }\n        %p\n          = article[:excerpt]\n        %p\n          %strong\n            %a(href=\"#{article.path}\") Read the rest of the story.\n      %hr\n  .column.column300.last\n    .pod\n      = render '_blog_tags'\n    .pod\n      = render '_social'\nHowever, I also just started deleting stuff from the project and narrowed it down. If I remove all the blog posts, then it compiles. Adding just one back, and it fails. So all the problems are in the blog area. Which is no surprise, as the rest of the site is essentially static.\nI continued removing stuff and narrowed down one problem to this file:\nruby\n%a.rss.right(href=\"http://feeds.feedburner.com/auxbuss\")\n%h6 From the Blog\n%ul.clean\n  - toggle = true\n  - sorted_articles[0, config[:blog_latest_count]].each do |article|\n    %li\n      - if toggle\n        - toggle = false\n        %a(href=\"#{article.path}\")\n          %span #{article[:created_at]}\n          = article[:title]\n      - else\n        - toggle = true\n        %a.highlight(href=\"#{article.path}\")\n          %span #{article[:created_at]}\n          = article[:title]\nSo, I guess that toggle is the problem here. I'd forgotten this hack. Is there a preferred method for this sort of thing?\nHowever, I know there's another problem, as I reverted everything and removed this file alone, and still have an issue somewhere else.\n. I've isolated the other problem to /content/posts/feed.erb, which simply contains:\n``` erb\ntitle: Feed\n<%= atom_feed( :limit => 5, :author_name => 'Some Name', :author_uri => 'http://example.com', :title => 'Title' ) %>\n```\nTo test this, I have stripped the site back to one post, the post tempalte, and the default template. Removing feed.erb allows the site to compile.\n. One more. Reverting and removing the two files mentioned above (and the sitemap preprocessing), I was asked to install a missing gem, systemu. It wasn't required before. I'm now seeing the following error during nanoc compile:\nNoMethodError: undefined method `join' for \"pygmentize --V\":String\nI use pygmentize in /Rules/ like this:\nruby\ncompile '*' do\n  ext = item[:extension]\n  if ext == 'haml' || ext.nil?\n    filter :haml, :ugly => true\n  elsif ext == 'md'\n    filter :colorize_syntax,\n      :syntax => :xhtml,\n      :colorizers => { :ruby => :pygmentize, :nginx => :pygmentize }\n    filter :kramdown\n  else\n    raise \"Filter is not configured for #{item.identifier} in Rules file. #{item[:extension]} and #{item[:filename]}\"\n  end\n  layout 'default'\nend\nAny idea what's going wrong here?\n. As a work around for now, you can remove version 3.2.1 of nanaoc and nanoc3 and use version 3.1.9. Unless you have problems with 3.1.9, of course.\n. I'm happy with Ruby 1.9 being the fix, but as mention in #42, I can't do that because pygmentize output differs. So, I'm happy to close this -- although simonwhitaker might not be -- and wait for the pygmentize fix. In the meantime, I will continue to use nanoc 3.1.9 with Ruby 1.8.\n. Denis, Thanks so much for all your hard work. It's is sincerely appreciated.\nI will look at a switch to HTML for my nanoc project. I'm only using XHTML because of a purchased theme. I'm sure the swap will not be too tricky.\n. Just to say that I switched to HTML5 and the problem persists. in Rules I used:\nruby\nfilter :haml, { :ugly => true, :format => :html5 }\nand in the default template I used !!! 5\n. No, it still produces:\nhtml\n<pre class=\"syntax\">&#x000A;  <code class=\"language-nginx\">\n. Ah, good call. I had not changed the colorize_syntax parameter.\nAll is almost good now. However, I still find that the first line of the <pre><code> block cannot be indented. However many spaces I insert at the start of the first line, all those spaces are lost when displayed. So:\n``` html\n\n    worker_processes  4;\nhttp {\n    ssl_session_cache    shared:SSL:10m;\n    ssl_session_timeout  10m;\n    ssl_ciphers ALL:!kEDH!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    ...\n\n\n```\nproduces:\nhtml\n            <pre class=\"syntax\"><code class=\"language-nginx\"><span class=\"k\">worker_processes</span>  <span class=\"mi\">4</span><span class=\"p\">;</span>&#x000A;    &#x000A;    <span class=\"k\">http</span> <span class=\"p\">{</span>&#x000A;        <span class=\"kn\">ssl_session_cache</span>    <span class=\"s\">shared:SSL:10m</span><span class=\"p\">;</span>&#x000A;        <span class=\"kn\">ssl_session_timeout</span>  <span class=\"mi\">10m</span><span class=\"p\">;</span>&#x000A;        <span class=\"kn\">ssl_ciphers</span> <span class=\"s\">ALL:!kEDH!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP</span><span class=\"p\">;</span>&#x000A;        <span class=\"kn\">...</span></code></pre>\nWhere, as you can see, the initial spaces have been lost.\n. Well, it's a pre so it should follow pre rules, however odd it might seem. I'm not going to defend it. I've no idea why I did that. I presume, so that it looks like I expected it to. I don't feel strongly about this, but I do feel it should be consistent and behave in a consistent way.\nBut yes, I would like that indentation. And that is consistent with how I would expect it to behave. But ultimately it's not a deal breaker. So if you choose to ignore my thoughts, I'm not going to beat you up over it.\n. That's great. Thanks a lot.\n. Excellent. That fixed it. Thanks.\n. That works too. The addition of the warning message is a good idea. Thanks.\n. That's possible. I dup'd a project (as a starter for new) and updated to ruby v2.2, so old gems versions may have been installed via bundler. Looking at original project, it uses nanoc v3.6.7. Having updated gems, issue is solved. Sorry for fuss.\n. ",
    "callahad": "Haml only closes tags like hr and br in XHTML mode. Is there a chance that you're accidentally using Haml in HTML5 mode instead of XHTML mode? That is to say, do you see :format => :html5 or :format => :html4 anywhere in your Rules file?\nThe actual code highlighters shouldn't be an issue, since they shouldn't ever really generate an hr element...\n. Ooh! Pygments.rb also ships with a vendored / embedded copy of Pygments, so you only need to have Python on your system.\nThat should be way easier for end users, since they don't have to mess with installing a third party Python module.\n. This seems to work for me:\ndef pygmentsrb(code, language, params={})\n  require 'pygments'\n  highlighted_code = Pygments.highlight(code, :lexer => language, :options => {:encoding => 'utf-8'})\n  doc = Nokogiri::HTML.fragment(highlighted_code)\n  doc.xpath('./div[@class=\"highlight\"]/pre').inner_html\nend\nYou might want to consider doing some exception handling on Pygments.highlight, since it looks like it could raise RubyPython::InvalidInterpreter if it fails to invoke python.\n. ...And properly handle the params arg :)\n. Agreed. Also, as far as I can tell, specifying the encoding seems necessary if you have multibyte UTF-8 literals in your code. Looks like it presumes ascii unless told otherwise.\n. ",
    "mbelow": "Am So 03 Jul 2011 10:32:21 CEST\nschrieb ddfreyne\nreply@reply.github.com:\n\nFixed! Let me know if the updated version in the 3.1.x branch works\nfor you.\n\nIt works fine, thanks. Let's see if Bing is happy with it: I\nadded the sitemap to the queue for re-indexing, but that takes time.\nMichael\n. ",
    "benilovj": "Hi Denis,\nI'd appreciate if you could perhaps elaborate on the reasons for not\nliking the changes...\nI admit that several of them were not directly related to the tilt\nfilter. However, I put them in because it was more work than necessary\nto bring the nanoc project from nil to a state where I could perform\nthe due diligence (running the tests, generating the docs) before\nsubmitting a patch. I can understand that you may not use or need\nthings like the rvm and bundler configs. That's fine, then adding the\nconfigs will simply be 2-3 files that are completely benign and do not\ndisrupt your work in any way. rvm and bundler are hardly controversial\ntools and are becoming (if not already become) de-facto standards in\nthe ruby community. They are non-invasive and simplify development for\nme personally (and I suspect for other people as well). With respect\nto the Gem specifications, the gems I added as development\ndependencies are the gems that you need to develop and test nanoc. Is\nthat really that wild? Having those entries in there makes implicit\ndependencies explicit and means that you can be pretty much ready to\ndevelop after invoking one command.\nHaving to invest time unnecessarily just to get the tests to run and\nthe environment set up correctly was a source of frustration for me\nand I simply wanted that others would be able to avoid it. I would\nhazard a guess that not supporting them raises the barrier of entry\nfor future potential committers, and impedes the growth of a community\naround your project.\nRegards,\nJake\nOn 8 July 2011 19:31, ddfreyne\nreply@reply.github.com\nwrote:\n\nHi,\nI\u2019ve taken a look at your patches and the first thing that I noticed was that you included quite a few irrelevant ones (rvm, bundler, gemspec changes) which I will not pull (I don\u2019t need them and I don\u2019t even like them much).\nI did pull two of your patches wrt implicit test dependencies though\u2026 thanks! (A much needed fix for making development easier.)\nAs for the Tilt filter itself: I will have to take a closer look there. I fear that dependency tracking will be an issue with Tilt (especially for Sass/Less where @imports are not recognised). If I can\u2019t get dependency tracking to work with Tilt, I\u2019ll probably not add a Tilt filter but rather add some Tilt-like functionality that uses nanoc\u2019s existing filters.\nDenis\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ddfreyne/nanoc/pull/26#issuecomment-1533971\n. \n",
    "barraq": "Actually Coderay comes with a command line utility that lets you generate such stylesheet.\nOpen a terminal and enter:\n$ coderay stylesheet > coderay.css\nThe generated stylesheet is quite basic but it is quite easy then to customise it.\nYou might also want to check @danielpietzsch home-made Github Theme for Coderay https://github.com/danielpietzsch/CodeRay-GitHub-Theme\n. Concerning the test, in nanoc-cli you have one test concerning the after_setup that maybe we should also add to the merge: https://github.com/nanoc/nanoc-cli/blob/8e49e1907741c54bcd053de8b7ae4eb732f82d0d/test/cli/test_cli.rb#L105\n. ok, I'm running the test too before commiting\n. @ddfreyne should not the Nanoc::Identifier module (for an Item) be relying on the Nanoc::FileSystem module (to which this Item belong) to manipulate extension ? \n- Nanoc::Identifier.with_ext\n- Nanoc::Identifier.without_ext\n- Nanoc::Identifier.ext\nThat way all the logic will be in one place: Nanoc::FileSystem\n. The last proposition seems reasonable to me. However did you mean:\n``` ruby\nNanoc::Identifier.new('/toto.html.haml').with_ext('html', multiple_exts: false)\n=> '/toto.html.html'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html', multiple_exts: true)\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html')\n=> '/toto.html'\n```\nAlso to make item[:extension consistent with item.identifier.ext I believe that the option multiple_exts should be true for both: without_ext, with_ext, ext. What do you think ? I know that this might break things for old websites.... but who is using double extensions on his files without using these double extensions ? I mean I think that all users that have files with double extensions do it with the same purpose: they use one ext for the kind (md, haml, erb, etc.) and one ext for the output extension (html, xml, etc.). Therefore introducing this new feature will help them in this process; the other users (those using single ext) will not be affected anyway.\nIn addition to all of that, in my websites I am using an home made method to cope with two parts extensions: \n``` ruby\nSplit a file extension into a two parts ext and kind where\next is the output file extension (e.g. html, xml, etc.) and kind\nis the input file extension (e.g. md, html, etc.).\n\n@param [String] extension is the file extension, e.g. html.md, xml.\n@param [String] default is the default output extension if none is specified.\n\ndef split_ext(extension, default: nil)\n  ext, kind = extension.split('.')\n  [if kind then ext else default end, kind || ext]\nend\n```\nI use it as follow in my compile rules:\nruby\next, kind = split_ext(item[:extension], default: 'html')\ncase kind\nwhen ...\nend\nmaybe split_ext can be added to Nanoc::Identifier too.\nBest,\nR\u00e9mi\n. Thanks Deny that is indeed much cleaner and clearer !\nI like the #exts and #without_exts approach better, the functions names speak for themselves and therefore it is less error prone.\nRegarding the the fact that \nruby\nNanoc::Identifier.new('/toto.html.haml').without_ext.with_ext('html')\nreturns \n``` ruby\n=> '/toto.html'\n```\nit is indeed confusing... would not it be better that with_ext does not change the extension but appends one ? Actually I thought it was the case until you told me it was not :)\n. Thanks @ddfreyne :+1: \n. If Nanoc environments existed I would like them to support the following:\n- a single nanoc.yaml configuration file like:\ndefault: &default\n      // usual nanoc.yaml content\n      text_extensions: ...\n      base_url: ...\n      ...\n  development:\n      <<: *default\n      base_url: ...\n  production:\n      <<: *default\n      base_url: ...\n  yet_another_env:\n     <<: *default\n      base_url: ...\n- a support for accessing current active environment in rules.rb, helper and filters in order to:\n  - change routing depending on environment\n  - filter in/out items. e.g. display all items in development and hide some in production (draft post)\n- a support for a per-environment tmp cache and output. Namely what is currently in tmp and output should be moved to tmp/{{ENV}} and output/{{ENV}}\n@ddfreyne are you working on it? Do you need help/support?\n. @ddfreyne actually I wonder if #without_ext and #without_exts should not be returning Nanoc::Identifier.new @string instead of @string.\nActually an identifier without ext(s) should still be an identifier right ? \n. > Since an identifier is used to identify items/layouts, and these methods are used for creating an output path to which the item should be written to, I don\u2019t feel that these methods should return an identifier.\n@ddfreyne I was asking that question because I was wondering if my PR was correct.\nLet me explain. Actually if you want to be able to chain #without_exts.with_ext, as you proposed below: \n``` ruby\nNanoc::Identifier.new('/toto.html.haml').without_exts.with_ext('html')\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').without_ext.with_ext('html')\n=> '/toto.html'\nNanoc::Identifier.new('/toto.html.haml').with_ext('html')\n=> '/toto.html.html'\n```\nThen you have two solutions, I guess:\n- either #without_exts and \"#without_ext\" return a Nanoc::Identifier, which, to me, is more logic as the returned value is an_identifier_without_an_ext (for the layout you could then do layout.identifier.without_ext.to_s which looks nice to me)\n- or you have to extend String but I really don't like it...\n- or you think of something else ? (return a path and extend path instead ?)\n\nI also feel that the behavior of #with_ext is a little odd. Perhaps it needs to be replaced with #replace_ext (replaces a single extension), #replace_exts (replaces all extensions), #remove_exts (removes all extensions), and #add_ext (which appends an extension).\n\nTotally agree ! You can still keep #with_ext for backward compatibility (and warn users that it is deprecated). #with_ext will just be #remove_ext.add_ext or #replace_ext.\n\nI do feel it\u2019s a little late in the Nanoc 4 design process (release candidate!) to change this behavior still. But then again, I\u2019d rather have this discussion now rather than after the final release.\n\nI understand... do you have an idea on how much people already switched to Nanoc::4 ? I guess that if we do these changes now it will not have such a negative impact... Also these changes are not braking anything if we keep #without_ext and #without_exts for compatibility purpose, right ?\n. Thank you @ddfreyne ! I changed the PR to be on release-4.0.x (https://github.com/nanoc/nanoc/pull/696).\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. Is missing:\n- handeling /tmp dir so that we use the same mechanism as the output_dir.\n- unit tests\nMight be added:\n- introduce @env (@site.env) variable to access only active env variable\n. Good point regarding parent_config_file. Actually the config is overridden by environment after it is loaded, therefore after it includes the parent_config_file: should be :ok: then.\nRegarding the <<: *default it is just some YAML property for inheritance indeed: https://en.wikipedia.org/wiki/YAML#References. You don't need to use it, I just did cause it is common practice.\n. @ddfreyne do you need me to do any additional changes?\n. Thanks @ddfreyne for this deep review. I fixed all but one:\n\nI\u2019m not in favour of modifying output_dir like this. The output_dir can be specified on a per-environment basis, if necessary, so there\u2019s no need for this logic.\n\nActually I did this to prevent having a mandatory argument when using environments. To my understanding if the user does not override the output_dir in each defined environment then there will be some weird things happening with the compilation when --prune is activated for instance? Same if the option is not activated since residues from another compilation might remain. I mean that line prevents side effect behavior introduced by environments.\nWhat do you think?\nI am fine with removing it :D I just prefer having a second thought before doing it.\nOne last think; should this PR include the documentation with it? How to do link new feature and the Nanoc.ws documentation?\np.s. sorry for all the parenthesis thingy; I relied on Rubocop.\n. @ddfreyne I went over all fixes you mentioned. I did small fixup commits to ease the review process.\n@gpakosz support for environments allows you to override the @site.config. You can then use it however you want: e.g. filter (within your Rules file) draft items in production environment; display additional things in templates for a given environments; etc.\n. @ddfreyne actually there is a little issue. Since in the Nanoc Gemfile we do not restrict Rouge to be 1.x it is by default the latest version (being 2.x) and therefore no matter which options you provide they will not be use:\n\nRouge::Formatters::HTML.new - will render your code with standard class names for tokens, with no div-wrapping or other bells or whistles.\n\nSee https://github.com/jneen/rouge/blob/master/lib/rouge/formatter.rb#L28\nand https://github.com/jneen/rouge/blob/master/lib/rouge/formatters/html.rb\nSo actually if you use Rouge 2.x no matter options you provide Rouge does not care. As a result, if I write tests for Rouge 1.x they will brake in Rouge 2.x since options will be discarded. Unless I do a if ::Rouge,version < '2' in the tests and therefore fallback to buggy output for Rouge 2.x.\nOtherwise we can (Plan B):\n- changing the order of commits:\n  - first introduce support for Rouge 2.x with Legacy as default\n  - then introduce support for Rouge 1.x options and add tests for it\n- then later add non legacy support for Rouge 2.x\nIs it something ok for you?\n. Close PR in favor of https://github.com/nanoc/nanoc/pull/880\n. Closing this in favor of https://github.com/nanoc/nanoc/pull/880\n. @ddfreyne I didn't have the time to go over this Travis things to run test for both Rouge 1.x and Rouge 2.x. If you know how to do it quick it would be cool. I can add the missing tests then.\n. Thanks @connorshea. Ok @ddfreyne like discussed I am looking at https://github.com/thoughtbot/appraisal\n. @ddfreyne I am almost done here, any comments?\n. Thanks @ddfreyne, regarding gemfiles/* they are generated by Appraisal by doing appraisal install (see https://github.com/thoughtbot/appraisal#under-the-hood) So they are autogenerated and are based on the initial Gemfile.\n. @ddfreyne ready to merge?\n. @whitequark this is connected to https://github.com/nanoc/nanoc/pull/880 did you try it out?\n. Sorry @ddfreyne I did not receive the notification! looks good! good to have 3. now :D. @ddfreyne well I first tried with the original bin/nanoc but the weird thing is that it does not work as expected. I am maybe doing something wrong but when I use the original/nanoc my plugin is not loaded and therefore my custom plugin's command is not showing up in the list of available commands (when doing 'nanoc --help'), also I cannot execute the command neither.\nI guess I still need the Bundler.require(:default) after the require 'bundler/setup'? Should not be something like this?\n``` ruby\nTry loading bundler if it's possible\nbegin\n  require 'bundler/setup'\n  Bundler.require(:default)\nrescue LoadError\n  # no problem\nend\n``\n. Yes. My bad.\n. oups... \u27a1\ufe0f will be removed\n. Instead of passingenvas an argument (here and innew_from_cwd`) would it be correct instead to:\n- have in Nanoc::CLI\ndef self.env=(environment)\n   ENV.store 'NANOC_ENVIRONMENT', environment\nend\n- have with_environment to fetch NANOC_ENVIRONMENT in ENV\n. we might change the logic here so that if we have Rouge 2.x and than neither inline, linewise, pygments, table is define and than there is arguments given then we fallback to legacy. That would prevent from explicitly specifying legacy.\n. @ddfreyne I added an extra test here https://github.com/barraq/nanoc/blob/feature/support-environments/test/base/test_store.rb#L41 is that enough? or should I introduce a spec for Store (I didn't find one for it actually)\n. True, actually those gemfiles are only needed when we want to run all the tests. Since in our case we only wants to run focus spec we can remove them.\n. ",
    "ghost": "Hi Dennis,\nYeah, the first problem was occurred by somehow an empty \"screen.css\". I didn't remember how to add that css maybe it modified with livereload automatically. I removed it, it worked perfectly again. Thanks for your advice again and again. By the way I want to ask why \"content/style\" has every empty yaml files. May I remove these files or automatically generated?\nSound fantastic for me \"nanoc watch\". First I runed gem install --pre nanoc3, next I try to nanoc watch, nanoc3 watch and nanoc --watch it appears both error message again... But I hope  upcoming next 3.2 version!\nCaptain! We\u2019ve been hit!\n=== MESSAGE:\nArgumentError: wrong number of arguments (1 for 0)\n=== COMPILATION STACK:\n(empty)\n=== BACKTRACE:\n1. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:111:in name'\n2. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:111:inload_command_at'\n3. /Library/Ruby/Gems/1.8/gems/cri-2.0rc1/lib/cri/command.rb:139:in call'\n4. /Library/Ruby/Gems/1.8/gems/cri-2.0rc1/lib/cri/command.rb:139:inmodify'\n5. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:111:in load_command_at'\n6. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:121:inroot_command'\n7. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:50:in add_command'\n8. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:64:insetup'\n9. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:38:in run'\n10. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:40:inhandle_while'\n11. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:21:in handle_while'\n12. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:37:inrun'\n13. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/bin/nanoc3:12\n14. /usr/bin/nanoc3:19:in `load'\n15. /usr/bin/nanoc3:19\nBest regards,\nSeiichi\n. Hmm... I don't know what their error mean...\n$ sudo gem update cri\nPassword:\nUpdating installed gems\nUpdating cri\nSuccessfully installed cri-2.0.2\nGems updated: cri\nInstalling ri documentation for cri-2.0.2...\nInstalling RDoc documentation for cri-2.0.2...\n$ nanoc watch\nWatcher started; compiling the entire site\u2026 done in 0s 568ms\nWatching for changes\u2026\nCaptain! We\u2019ve been hit!\n=== MESSAGE:\nFSSM::FileNotFoundError: No such file or directory - /Users/seiichi/Sites/nanoc-bootstrap-compass/lib\n=== COMPILATION STACK:\nCaptain! We\u2019ve been hit!\n=== MESSAGE:\nNoMethodError: protected method `site' called for #Nanoc3::CLI::Commands::Watch:0x1012249d8\n=== COMPILATION STACK:\n(empty)\n=== BACKTRACE:\n1. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:59:in site'\n2. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:64:incompiler'\n3. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:69:in stack'\n4. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:126:inprint_error'\n5. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:44:in handle_while'\n6. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:21:inhandle_while'\n7. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/command.rb:50:in call'\n8. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/command.rb:43:incall'\n9. (eval):10:in define'\n10. /Library/Ruby/Gems/1.8/gems/cri-2.0.2/lib/cri/command.rb:255:incall'\n11. /Library/Ruby/Gems/1.8/gems/cri-2.0.2/lib/cri/command.rb:255:in run'\n12. /Library/Ruby/Gems/1.8/gems/cri-2.0.2/lib/cri/command.rb:272:inrun'\n13. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:40:in run'\n14. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:40:inhandle_while'\n15. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli/error_handler.rb:21:in handle_while'\n16. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/lib/nanoc3/cli.rb:37:inrun'\n17. /Library/Ruby/Gems/1.8/gems/nanoc3-3.2.0b2/bin/nanoc3:12\n18. /usr/bin/nanoc3:19:in `load'\n19. /usr/bin/nanoc3:19\n. Where should I locate the branch? (Because I have never use manually clone the file, I don't know where it is.)\nI try to fork from nanoc-bootstrap-compass and it has not \"lib\" directory...\n. It worked when I created lib folder. And I added any changes in sass file, it changed like compass do. It works perfect!\nBut next problem is server doesn't run. (like 404 error)\nI'm sorry how can I clone The release-3.2.x branch? I couldn't find nanoc project folder...\n. Yeah! I could do what I want! I runed nanoc view, nanoc watch, livereload at the same time. Thank you very much Denis.\n. Should have I closed this Issue?\n. Hi Dennis,\nSorry asking again. I have reinstalled my computer, reinstalled all require files to work nanoc and compiled latest 3.2.0.b3.\nBut I can't do anything... please help me...\nCaptain! We\u2019ve been hit!\n=== MESSAGE:\nNoMethodError: undefined method `<=>' for :fog:Symbol\n=== COMPILATION STACK:\n(empty)\n=== BACKTRACE:\n1. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/commands/deploy.rb:7:in sort'\n2. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/commands/deploy.rb:7:indefine'\n3. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:107:in load_command_at'\n4. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:70:insetup'\n5. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:68:in each'\n6. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:68:insetup'\n7. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:38:in run'\n8. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/error_handler.rb:40:inhandle_while'\n9. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli/error_handler.rb:21:in handle_while'\n10. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/lib/nanoc/cli.rb:37:inrun'\n11. /Library/Ruby/Gems/1.8/gems/nanoc-3.2.0b3/bin/nanoc:12\n12. /usr/bin/nanoc:19:in `load'\n13. /usr/bin/nanoc:19\n. Hi Dennis,\nThank you fast replying! And the fix command is perfect!(https://github.com/dutygeeks/nanoc/blob/test-3.2/lib/nanoc.rb)\nIt worked perfectly again! Pretty neat!\nBy the way, my browser doesn't reflesh when I changed any files(Manually reload is perfect). Is this an issue?\nIn this case, I don't install livereload yet.\nI need something special to reload browser automatically?\nI love and hope nanoc will support --watch option official.\n. Hi Dennis,\nThat's ok. Thank you very much teaching me anything! I had interesting ruby and nanoc. Please keep your great working.\nBest regards\n. I still get this issue on 3.3.6, running Ruby 1.9.3. Is there any resolution, or workaround I can do? Also using RVM, maybe that's something to do with it?\n. Yeah, it was the same error. I did have the mime-types gem installed.\nI think it was something in my project though (it was quite old).\nI created a new project, brought everything over, and now it seems to be working well.\n. First I installed Growl for Windows which can be found here: http://www.growlforwindows.com\nThis did not solve the problem.\nI then found growlnotify for windows here: http://www.growlforwindows.com/gfw/help/growlnotify.aspx\nThere is an exe and a com file here. I made sure they were part of my path but I got the same issue when running nanoc watch. If I run growlnotify directly it responds that I am providing improper arguments (which means it's in my path).\n. I used the same port on another server, I killed it (restarted the system even), and still the port is always in use. I changed the port using the -p 9999 and it works just fine, but I always have the same error with the default one.\n. Unfortunately crash.log isn't updated when this happens.\nI've added pp(obj) at checksummer.rb:26 and now I get:\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/prettyprint.rb:311: stack level too deep (SystemStackError)\nDuring preprocessing I create index pages that reference sub-pages and those sub-pages in turn reference their index page. Could this be the cause?\n. Replaced all item references with item identifier strings and now everything works with 3.7.3.\nAnother thing came up while changing the code. I had images like this:\ncontent/some/path/1.png\ncontent/some/path/2.png\nAnd would wrap HTML pages around them:\noutput/some/path/1.html\noutput/some/path/1.png\noutput/some/path/2.html\noutput/some/path/2.png\nSo I had two different items with the same identifier, one binary and one not. This worked fine as long as I was keeping a reference to the dynamically created non-binary item. Now, using identifiers I had to rename the images.\nThank you very much for your help.\n. Will do that, hopefully on weekend.\n. Hi Denis,\nhopefully, i did it the right way this time. The pull request is now\nfiled against the 3.7.x branch and is supported by a test.\nWhile doing so, i found, that two other tests already failed on my system before i started work, and\ntwo other tests failed on a windows machine.\nOn Mon, Nov 03, 2014 at 11:46:20AM -0800, Denis Defreyne wrote:\n\n@andydrop How\u2019s the progress on this?\n\u2014\nReply to this email directly or view it on GitHub.*\n. Hi Denis,\n\nThose two fail on my debian machine:\n1) Failure:\n  Nanoc::Filters::ColorizeSyntaxTest#test_simon_highlight\n--- expected\n  +++ actual\n  @@ -1 +1 @@\n  -\"# comment\"\n  +\"#\n  comment\"\n```\n2) Failure:\nNanoc::Filters::PandocTest#test_params\nExpected /Heading<\\/h1>\\s*/ to match \"<!DOCTYPE\nhtml PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\n\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\\n\\n  \\n  \\n  \\n\n\\n  code{white-space:\npre;}\\n\\n\\n\\nHeading\\n\\nHeading\\n\\n\\n\".\n```\nI am not at my windows machine, but there a test failed that should\ncheck if an absolute path was returned by doing a \"must_match\" against\n/\\A\\// (first char is a '/') which must fail on windows because of the\nleading drive letters (C:\\foor\\bar)\nThe other failing test completely crashed the test engine so there was\nonly a stacktrace left.\nbye\nAndy\nOn Wed, Nov 05, 2014 at 02:42:41AM -0800, Denis Defreyne wrote:\n\nThanks@\nWhich two other failing tests are these? They shouldn\u2019t be failing in any case\n(they\u2019re not failing on my machine).\n\u2014\nReply to this email directly or view it on GitHub.*\n. I checked with the third case. Indeed the C: at the beginning of the absolute path is the Problem. in a newer ruby version there is a module FileTest, with makes use of the os module to determine if a path is absulute. Unfortunatly even ruby does this in Windows environment by checking for a leading slash.\nI think the only reliable method is to strip an existing drive character (including the colon) if on a Windows machine, and if a drive character is present.\n. For Failure 2: I tested that pandoc filter behaviour with my standalone pandoc via commandline. Here an additional link to itself is created for every heading, as soon as i use the --toc (table of content) switch.\nI think this is, because everyone of these headings is copied into the toc, but should not happen in the original headings. Looks like a problem in pandoc.\n. For failure 2. That test will fail for every user of pandoc >=1.10.1 where the behaviour of headings that are linked from within a table of content (section headings) changed  on purpose. (see: https://github.com/jgm/pandoc/issues/778#issuecomment-14509897)\n\nSince then every section heading is linked to itself for the reason of getting a static link to it in the browsers address line by simply clicking on it. I will work on the test to get it working on older and newer Versions of pandoc.\nI also have an idea for the third (relative path) problem, that should solve it without needing to know what the underlying OS is.\n. @ddfreyne Yes, the first test passes, as soon as highligt is installed\n. Until lately i used pandoc 1.11.1 which is the newest for debian unstable, and the test fails with it.\nNow i compiled pandoc 1.13.1 from the sources on the pandoc website, an the test passes successfully. the output is the same again, as with pandoc < 1.10.1, So the pandoc developers changed their mind back, and its only a problem with a few versions of pandoc.\nNow for the highlighting issue...\n. Hi, i had two different versions of highlight installed, one of them pretty old. As soon as a uninstalled the official one the old one stepped in, and caused the failing test.\nSo i can confirm:  No failing tests with the latest pandoc an the latest highlight anymore.\n. ACK for the revert of #492. I would prefer to nuke those .DS_Store files from Orbit, but an array for black-/whitelisting will also do.\n. A simple include_dotfiles boolean would also do, when accompanied by some explanation in the docs, about the typical use-cases (.htaccess, htpasswd) and the possible pitfalls (.DS_Store).\nOnce aware of this pitfall a user could simply delete the unwanted item during the preprocess stage. Maybe an example in the docs, how to do that would also be helpfull.\n. Yes, it is fixed. Means it doesn't crash anymore\n. ",
    "urdh": "This is probably a mix of two different issues; first, doing join on a string doesn't work (which is the error visible) but also, popen3 can't open anything, not even ls, on my system. The first problem is clearly a problem of nanoc, but I don't know what's causing the second problem.\n. I can't confirm because systemu doesn't seem to be working for me. It works in irb (I can run systemu 'pygmentize' from there), but when nanoc tries to run pygmentize, nothing spawns. This is probably a local problem, no?\n. No, rake test doesn't give any failures at all.\n. (As a side note, everything works fine if I upgrade ruby to 1.9.2)\n. Output is available here.\n. I can't seem to reproduce #systemu not working anymore.\n. ",
    "telemachus": "One more data point: created a site, populated it with a thousand items, added a few more with nanoc ci. Results are like @ddfreyne's (2.7 seconds or so, rather than under 1).\n. nanoc doesn't see files the way you think it does. The final .js is removed from what you're trying to match. A Nanoc::Item's identifier has its \"extension\" portion removed and ends in a trailing /, if it's a recognized textual item. (See the text_extensions portion of config.yaml for what things are considered text by default. You can change that list.)\nTo see what everything looks like to nanoc, you can do this:\n```\nroute '*' do |item|\nend\ncompile '*' do\n  puts item.identifier\nend\n```\nIn any case, you probably want something more like this:\n```\ncompile '/javascripts/*/' do\n  filter :uglify_js, :copyright => false\nend\nroute '/javascripts/*/' do\n  # item identifiers end in a trailing /. Remove it with chop and add back the file extension.\n  item.identifier.chop + '.js'\nend\n```\n. ",
    "simonwhitaker": "Same issue here: TypeError: can't modify frozen object coming from date.rb. Sounds like you're already on the case but if you need any additional data to test with my source is at https://github.com/simonwhitaker/goo-website\n. Any progress on this one? I'm completely blocked. \n. I've upgraded to ruby 1.9 and nanoc 3.2 works OK for me now.\n. ",
    "stbuehler": "I had a similar system in place, and then a new challenge came up: i wanted to produce images for inline latex; this would create new files in output/ which are of course not represented in the compiled_files list.\nI added another store to remember which representations depend on such extra files (items/representations could share such \"assets\"), and my \"cleanup\" rake task doesn't delete those as long as anything depends on them.\n. A pull request shouldn't contain merges (use fetch+rebase instead of pull).\nAnd one pull request should contain only one feature/bug fix :)\n. I guess this started somewhere at 86a376f3 \"moved options, arguments and command into Command instance\".\ninfo, update, create_site and create_layout are broken afaics (info and update break if you specify an argument, create_site and create_layout if you don't).\nperhaps you can update this pull request to fix the other 3 too?\n. add .sort_by{ |d| -d.length } and you only need one iteration and no changed = * handling\n. ",
    "negonicrac": "I also had this issue when first adding Compass to nanoc. Adding require \"compass\" near the top of the Rules file fixed this issue.\n. ",
    "agross": "On Windows, it also helps to set the LANG environment variable to something like \"de_DE.UTF-8\".\n. It works (given I set the LANG as stated in issue #50)! Thank you for quickly providing a fix!\n. Thank you very much!\n. https://github.com/agross/nanoc/commit/ef9c6d56dca87b48842bec8fe39a48aab68b6cfb\nProbably like the above. I tested a similar fix for 3.4.3 and it seems to be OK.\n. Thanks! \n. What does SIGUSR1 mean? I.e. when would another program signal this kind of\n\"event\"? (Hope I got the terminology right.)\nAlex\nAlexander Gro\u00df\nTiny phone, tiny mail\nOn Jan 22, 2013 3:10 PM, \"Denis Defreyne\" notifications@github.com wrote:\n\nGood catch!\nWhen nanoc catches a SIGUSR1 in 3.5, a stack trace at that point is\nprinted, which is quite useful when debugging slowness. I can easily\ndisable this feature on Windows, but I\u2019d rather come up with an\nalternative\u2026 can you think of anything? (I don\u2019t think there is a good\nalternative.)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/ddfreyne/nanoc/issues/199#issuecomment-12545739.\n. Okay, as far as I understand it's a way to kill nanoc while printing the\ncurrent stack trace?\n\nI don't know of an equal technical concept in Windows. Thus I think it's\nbest to disable that code path for the OS we all love so much ;-)\nAlex\nAlexander Gro\u00df\nTiny phone, tiny mail\nOn Jan 22, 2013 3:29 PM, \"Denis Defreyne\" notifications@github.com wrote:\n\nSIGUSR1 is a signal without predefined meaning. It is not sent by any\nprogram (or the system), and the only way to send it is using kill -USR1.\nOn 22 Jan 2013, at 15:22, Alexander Gro\u00df notifications@github.com\nwrote:\n\nWhat does SIGUSR1 mean? I.e. when would another program signal this kind\nof\n\"event\"? (Hope I got the terminology right.)\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/ddfreyne/nanoc/issues/199#issuecomment-12546633.\n. What about using the usual platform switch? RUBY_PLATFORM =~ /mswin|mingw/\nas far as I know.\n\nI'll let you know about the exit codes as soon as I'm back at a computer.\nAlex\nAlexander Gro\u00df\nTiny phone, tiny mail\nOn Feb 27, 2013 10:33 PM, \"Denis Defreyne\" notifications@github.com wrote:\n\nHmm, that one is pretty tricky. I unfortunately don\u2019t have Growl anymore,\nso you could you check something for me? What are the exit statuses for growlnotify\n--help, -h, growlnotify --version, /h, \u2026 ? I hope there\u2019s something we\ncan infer from the exit statuses whether we\u2019re running a Windows version of\ngrowlnotify or not.\nIf you have any other ideas, do share.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nanoc/nanoc/issues/253#issuecomment-14201517\n.\n. ```\ngrowlnotify --help\nNotification sent successfully\nNotification sent successfully\necho %errorlevel%\n0\ngrowlnotify /h OR /help OR /version\nBad arguments : Index was outside the bounds of the array.\necho %errorlevel%\n-1\n\nC:\\Tools\\Growl\n\ngrowlnotify /?\n...\necho %errorlevel%\n0\n```\n. Calling it with what parameters?\n. Yep, that works.\n. Alright. Thanks for looking into the issue!\n. @ddfreyne I'll test that either tomorrow or on Tuesday.\n\nAs for testing, why not check if nanoc builds the command line parameters correctly and calls #system accordingly?\n. @ddfreyne I left a comment on ddfreyne/nanoc@43a49c9cf3. If the typo is fixed, it will work. As always, thank you very much!\n. I'm running RC2:\n```\nCaptain! We've been hit!\nMessage:\nNoMethodError: undefined method `gsub' for #\nCompilation stack:\n\n[item]   /navigation/child-1/index.html (rep default)\n\nStack trace:\n\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/stream_cleaners/utf8.rb:9:in `clean'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:143:in `block in _nanoc_clean'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:143:in `each'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:143:in `reduce'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:143:in `_nanoc_clean'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:81:in `block (2 levels) in puts'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:81:in `map'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:81:in `block in puts'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:147:in `_nanoc_swallow_broken_pipe_errors_while'\nC:/Ruby/lib/ruby/gems/2.2.0/gems/nanoc-4.1.0rc2/lib/nanoc/cli/cleaning_stream.rb:80:in `puts'\n  ... 47 more lines omitted. See full crash log for details.\n```\n\nSeems like UTF-8 doesn't call to_s.\n. present_files contains\n[ 18] \"build/bin/files/media/image/team-alexander-gro\\u00DF.jpg\",\ncompiled_files contains\n[115] \"build/bin/files/media/image/team-alexander-gro\\xE1.jpg\"\n. I added p present_files.find { |e| e =~ /alex/ }.encoding for both collections, both yield #<Encoding:UTF-8> in the output.\n. Scratch that. \n``` ruby\np present_files.find { |e| e =~ /team-alex/ }.encoding\n=> #\np compiled_files.find { |e| e =~ /team-alex/ }.encoding\n=> #\n``\n. It seems [thisFile.expand_path](https://github.com/dnugleipzig/web/blob/master/lib/dnug_leipzig/data_sources/graffiti_cms.rb#L40) in my data source yields#`. \nBut even after changing the line to new_item(File.expand_path(file).encode(Encoding::UTF_8), ... the pruner still sees compiled_files.find { |e| e =~ /team-alex/ }.encoding as #<Encoding:IBM437>.\n. Might be related to this bug: https://bugs.ruby-lang.org/issues/9713\n. Copying the code from the issue above to something in lib/ and my spec_helper.rb I see there's a slight difference between\n```\n$ bundle exec nanoc\nLoading site\u2026 Encoding.find 'filesystem': #\nEncoding.find 'locale': #\nEncoding.default internal: nil\nEncoding.default external: #\nEncoding.locale_charmap: \"CP437\"\nFILE: #\n'foobar': #\nand\n$ bundle exec rspec # or rake\nEncoding.find 'filesystem': #\nEncoding.find 'locale': #\nEncoding.default internal: nil\nEncoding.default external: #\nEncoding.locale_charmap: \"CP437\"\nFILE: #\n'foobar': #\n``\n. Thanks for the suggestion! Unfortunately it didn't work as it seems the files returned byFind.find` are already UTF-8 encoded.\ncompiled_files contains the \"team-alexander-gross\" file name with Encoding:IBM437 encoding, so slapping the map on compiled_files did the trick.\nPerhaps it's even better enforce the encoding at a more central place, like ItemRep.raw_paths.values or wherever the raw_paths.values come from. This works for me:\nruby\nall_raw_paths = site.compiler.reps.flat_map { |r| r.raw_paths.values.map { |f| f.encode('UTF-8') } }\n. Many thanks! I was using Nanoc::CLI.run since nanoc 3.x and never had an issue. I was wondering if using it was the recommended way of calling nanoc from rake. Obviously it wasn't.\n\nThe Nanoc CLI replaces $stdout with a CleaningStream that wraps $stdout, so that color codes and non-ASCII characters can be written to standard output, and filtered out in cases where they are not supported.\n\nCan you give me an example where stripping color codes or non-ASCII would be desired? The only thing I can think of is non-ttys (e.g. nanoc compile > log.txt).\n. Here's another stack trace with less haml and more nanoc:\ncrash.log.txt\n. The only reason for this to fail seems be that GC occurs between the check for weakref_alive? and the actual retrieval of the value.\n. Probably it's best to disable GC during check and retrieval?\n. Yes, it seems GC is the culprit.\nI added this:\ndiff\n+       require 'pry-byebug'\n+       prestat = GC.stat\n        if method_cache.key?(args) && method_cache[args].weakref_alive?\n+         begin\n            method_cache[args].value\n+          rescue => e\n+            errstat = GC.stat\n+            binding.pry\n+            raise\n+          end\n        else\n          send(original_method_name, *args).tap do |r|\n            method_cache[args] = WeakRef.new(Wrapper.new(r))\n          end\n        end\nWhen the debugger breaks I printed the GC count:\n[3] pry(#<Nanoc::Int::OutdatednessChecker>)> prestat[:count]\n50\n[4] pry(#<Nanoc::Int::OutdatednessChecker>)> errstat[:count]\n51\n. Hi :-)\nI think that hash of filter parameters (?) pointed me in the right direction. We are using tsc_output = Dir.mktmpdir('tsc-') to compile to a separate directory on each run.\n``` ruby\n!/usr/bin/env ruby\ntsc_output = Dir.mktmpdir('tsc-')\ncompile '/assets/js/*/.ts' do\n  minify = Nanoc::CoIt::Deployment::BuildEnvironment.optimization_enabled\n  filter :tsc, output_dir: tsc_output, minify: minify\nend\ncompile '/assets/js/*/.ts', rep: :map do\n  source_map = !Nanoc::CoIt::Deployment::BuildEnvironment.optimization_enabled\n  filter :tsc, output_dir: tsc_output, source_map: source_map\nend\nroute '/assets/js/*/.ts' do\n  \"#{item.identifier.without_ext}.js\"\nend\nroute '/assets/js/*/.ts', rep: :map do\n  \"#{item.identifier.without_ext}.js.map\"\nend\npostprocess do\n  FileUtils.rm_rf(tsc_output)\nend\n``\n. Thetscfilter uses an optimization by caching the compiler output.tsc.exe` resolves dependent files itself, so we compile once and later get the result of the first and only compilation for other nanoc items.\n``` ruby\nclass Tsc < Nanoc::Filter\n  identifier :tsc\n  type       :binary\ndef run(ts_filename, output_dir: './tmp/tsc-build', source_map: false, minify: false)\n    FileUtils.mkdir_p(output_dir)\ncompile(output_dir, minify)\nresult = js_filename(ts_filename, output_dir, source_map)\n\nFileUtils.cp result, output_filename\n\nend\nprivate\n# Compiles TypeScript into the given output directory\n  # @param [String] path to the target directory\n  #   tells the TypeScript compiler where the result should be saved\n  def compile(output_dir, minify)\n    return unless Dir[\"#{output_dir}/*\"].empty?\nargs = %W(npm run tsc -- --outDir #{output_dir})\nsystem(*args.flatten)\n\nuglify(output_dir) if minify\n\nend\ndef uglify(output_dir)\n    Dir[\"#{output_dir}/*/.js\"].each { |file|\n      system(\"npm run uglifyjs -- #{file} --compress warnings=false --mangle --output #{file}\")\n    }\n  end\n# Gets the filename of the transpiled js result\n  # @param [String] path of the TypeScript file beeing compiled\n  # @param [String] path to the TypeScript output directory\n  # @param [Boolean] indicator if the source-map should be fetched\n  def js_filename(ts_filename, output_dir, source_map)\n    transpiled_source = ts_filename.sub(Dir.pwd, output_dir)\nFile.join(File.dirname(transpiled_source),\n          js_ext(transpiled_source, source_map))\n\nend\n# Sets .js or js.map as file extension\n  # @param [String] path of the TypeScript file beeing compiled\n  # @param [Boolean] indicator if .map should be added as extension\n  def js_ext(filename, source_map)\n    File.basename(filename, '.*') + '.js' + (source_map ? '.map' : '')\n  end\nend\n```\nI believe this works similar to your custom Sass filesystem, but tsc is not Ruby, so we can't let it know about nanoc items ;-)\n. This seems to work:\n``` ruby\n!/usr/bin/env ruby\ntsc_output = './tmp/tsc-build'\nClean up before running and after running. A temporary directory will break\nnanoc's outdatedness checker because the path (and thereby cached tsc filter\nargs) change with every invocation of nanoc compile.\npreprocess do\n  FileUtils.rm_rf(tsc_output)\nend\npostprocess do\n  FileUtils.rm_rf(tsc_output)\nend\ncompile '/assets/js/*/.ts' do\n  minify = Nanoc::CoIt::Deployment::BuildEnvironment.optimization_enabled\n  filter :tsc, output_dir: tsc_output, minify: minify\nend\ncompile '/assets/js/*/.ts', rep: :map do\n  source_map = !Nanoc::CoIt::Deployment::BuildEnvironment.optimization_enabled\n  filter :tsc, output_dir: tsc_output, source_map: source_map\nend\nroute '/assets/js/*/.ts' do\n  \"#{item.identifier.without_ext}.js\"\nend\nroute '/assets/js/*/.ts', rep: :map do\n  \"#{item.identifier.without_ext}.js.map\"\nend\n```\n. Next issue :-)\nWe have an item that's completely empty (empty haml file, no metadata). It's causing outdatedness for itself as well a as a bunch of dependent items.\nThis line evaluates other.nil? == true. I wonder what othermight be. Any pointers?\n. Aha:\nruby\n    # The direct predecessors can include nil, which indicates an item that is\n    # no longer present in the site.\nNow this gets really strange. I suspect it's our dynamic parts that cause the issue here.\nSorry for spamming, I'm trying to document my findings.\n. The nilness seems to be related to item we create in a preprocess block. They're available via new_data, but are missing from @objects. I've dumped both collections and clearly see the diff between both.\nThe objects we create are static, so I wonder why they're missing from @objects.\nNanoc::Int::DependencyStore is created with ~2k objects before we create the items. It seems our new objects never get added. My debug output:\nLoading site\u2026 done\nCompiling site\u2026\nDependencyStore#initialize with objects 2434\ncreating objects...\nDependencyStore#data= with objects 2434\n. No hurry! Thanks for confirming that this is not our fault :-)\n. Hello!\nAs I said in the other ticket I'm currently migrating a 3.8 project to 4.2. This project also suffers from outdatedness. They all seem to be related to sass, despite the file(s) or rules being unchanged. Nanoc reports that the Rules have been changed, but they really haven't. I've dug deep into that nanoc source and found that the stored checksum for the sass filter seems incorrect.\nRules:\nruby\ncompile '/assets/css/app.sass' do\n  require 'compass'\n  Compass.add_project_configuration('compass-config.rb')\n  filter :sass, Compass.sass_engine_options\nend\nFor the first run I deleted ./tmp and changed the Checksummer to use VerboseDigest. My debug output in OutdatednessChecker#rule_memory_differs_for prints something like what follows. It was printed three times but the string lengths differed by a couple of characters. Do you know a good way to diff like git diff --word-diff?\n[[:snapshot, :raw, true, nil], [:snapshot, :pre, false, nil], [:filter, :sass, \"Hash<Symbol<load_paths>=Array<Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"J/thE-path/web/content/assets/css\\u0006:\\u0006EF:\\u000F@real_rootI\\\"J/thE-path/web/content/assets/css\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"DC:/Ruby/lib/ruby/gems/2.2.0/gems/compass-core-1.0.3/stylesheets\\u0006:\\u0006ET:\\u000F@real_rootI\\\"DC:/Ruby/lib/ruby/gems/2.2.0/gems/compass-core-1.0.3/stylesheets\\u0006;\\aT:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\">/thE-path/web/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\">/thE-path/web/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Sass::Importers::Filesystem<\\u0004\\bo: Sass::Importers::Filesystem\\b:\\n@rootI\\\"B/thE-path/web/tmp/vendor\\u0006:\\u0006EF:\\u000F@real_rootI\\\"B/thE-path/web/tmp/vendor\\u0006;\\aF:\\u0018@same_name_warningso:\\bSet\\u0006:\\n@hash{\\u0000>,Compass::SpriteImporter<\\u0004\\bo:\\u001CCompass::SpriteImporter\\u0000>,>,Symbol<style>=Symbol<expanded>,Symbol<line_comments>=TrueClass<>,Symbol<sourcemap>=Symbol<none>,Symbol<cache>=TrueClass<>,Symbol<cache_location>=String<tmp/sass-cache>,Symbol<compass>=Hash<Symbol<environment>=Symbol<development>,>,Symbol<full_exception>=TrueClass<>,Symbol<debug_info>=TrueClass<>,>\"], [:snapshot, :last, true, \"/assets/css/app-cbf1e02a860.css\"]]\nAfter compilation succeeded and tmp/rule_memory has been created, I started a second run. There was lots of debug output, all with different lengths, that I decided to wrap Sass:\n``` ruby\nrequire 'nanoc'\nmodule Nanoc\n  module Filters\n    class SassWithCompass < Nanoc::Filter\n      identifier :sass_with_compass\n      type :text\n  requires 'compass'\n\n  def run(content, params = {})\n    Compass.add_project_configuration(params.delete(:config_file))\n    params = params.merge(Compass.sass_engine_options)\n\n    Nanoc::Filters::Sass.new(@assigns).setup_and_run(content, params)\n  end\nend\n\nend\nend\n```\nRules:\nruby\ncompile '/assets/css/app.sass' do\n  filter :sass_with_compass, config_file: 'compass-config.rb'\nend\nA rm -rf tmp later I get this output (3 times):\n[[:snapshot, :raw, true, nil], [:snapshot, :pre, false, nil], [:filter, :sass_with_compass, \"Hash<Symbol<config_file>=String<compass-config.rb>,>\"], [:snapshot, :last, true, \"/assets/css/app-cbf1e02a860.css\"]]\nAnd subsequent runs yield this:\n[[:snapshot, :raw, true, nil], [:snapshot, :pre, false, nil], [:filter, :sass_with_compass, \"Hash<>\"], [:snapshot, :last, true, \"/assets/css/app-cbf1e02a860.css\"]]\n[[:snapshot, :raw, true, nil], [:snapshot, :pre, false, nil], [:filter, :sass_with_compass, \"Hash<Symbol<config_file>=String<compass-config.rb>,>\"], [:snapshot, :last, true, \"/assets/css/app-cbf1e02a860.css\"]]\nSee the Hash<> part in the first line of output? It seems the checksum is stored incorrectly. There's also this bit in tmp/rule_memory:\nitem_repo:\u0016Nanoc::Identifier\u0007:\n@type:  full:\f@stringI\"\u0019/assets/css/app.sass\u0006:\u0006ET:\fdefault[ [   :\nsnapshot:\brawT0[    ;\n:\bpreF0[\b:\u000bfilter:\u0016sass_with_compassI\"\u000bHash<>\u0006\n. Found the issue within the Sass wrapper. params.delete modifies the hash that nanoc will use to calculate the checksum for rule_memory. So we store that modified empty hash digest and check it against a hash digest including :config_file on the next run. Which means the filter always causes outdatedness.\nI guess Compass.sass_engine_options is modified internally as well (different length in debug output), leading to the same problem.\nIs there a specific reason nanoc computes cache digests after a filter is run and checks them against digests before running the next time? (The reason the check needs to run before on the seconds run is obvious :-))\nWhat's also interesting that compilation didn't get faster after fixing the digest by duplicating the params hash. It even got slower than just recompile. Haven't checked because I'm on vacation this week.\n. Quick repo:\n1. nanoc create-site test\n2. Edit Rules:\n``` diff\n   + class Test < Nanoc::Filter\n   +   identifier :test\n   +   def run(c, p = {})\n   +     p.delete(:test)\n   +     c\n   +   end\n   + end\ncompile '//.html' do\n     filter :test, test: :bar\n   +   layout '/default.'\n   end\n   ``\n3. Runnanoc -Vseveral times and see thatoutput/index.htmlis recompiled asidentical.\n. I found this error because we use Compass with Sass as described [here](https://github.com/Compass/compass/wiki/nanoc-Integration). TheCompass.sass_engine_options` will be modified by Sass or Compass, however it changes on every invocation of compile proc.\nI did a quick test:\n```\ncompile '/assets/css/app.sass' do\n  unless defined? LOADED_DEFAULT_CONFIG\n    LOADED_DEFAULT_CONFIG = true\n    require 'compass'\n    Compass.add_project_configuration('compass-config.rb')\n  end\np = Compass.sass_engine_options.freeze\n  p \"before\", p\n  filter :sass, p\n  p \"after\", p\nwrite item.identifier.without_ext + '.css'\nend\n```\n```\n\u00b1 nanoc -V\nLoading site\u0393\u00c7\u00aa done\nCompiling site\u0393\u00c7\u00aa\n\"before\"\n{:load_paths=>[#>, #>, #>, #], :style=>:expanded, :line_comments=>true, :sourcemap=>:none, :cache=>true, :cache_location=>\"tmp/sass-cache\", :compass=>{:environment=>:development}, :full_exception=>true, :debug_info=>false}\n\"after\"\n{:load_paths=>[#>, #>, #>, #], :style=>:expanded, :line_comments=>true, :sourcemap=>:none, :cache=>true, :cache_location=>\"tmp/sass-cache\", :compass=>{:environment=>:development}, :full_exception=>true, :debug_info=>false}\n\"before\"\n{:load_paths=>[#>, #>, #>, #], :style=>:expanded, :line_comments=>true, :sourcemap=>:none, :cache=>true, :cache_location=>\"tmp/sass-cache\", :compass=>{:environment=>:development}, :full_exception=>true, :debug_info=>false}\n\"after\"\n{:load_paths=>[#>, #>, #>, #], :style=>:expanded, :line_comments=>true, :sourcemap=>:none, :cache=>true, :cache_location=>\"tmp/sass-cache\", :compass=>{:environment=>:development}, :full_exception=>true, :debug_info=>false}\n... (several more)\nidentical  [2.39s]  output/assets/css/app.css\nSite compiled in 5.01s.\n```\nSee how the first load_paths entry changes\n- from :load_paths=>[#<Sass::Importers::Filesystem:0x0000000534ebd0\n- to :load_paths=>[#<Sass::Importers::Filesystem:0x000000051d1c08 \n. Even this will always recompiles the Sass file:\n```\ncompile '/assets/css/app.sass' do\n  unless defined? LOADED_DEFAULT_CONFIG\n    require 'compass'\n    Compass.add_project_configuration('compass-config.rb')\n    LOADED_DEFAULT_CONFIG = Compass.sass_engine_options.freeze\n  end\np \"before\", LOADED_DEFAULT_CONFIG\n  filter :sass, LOADED_DEFAULT_CONFIG\n  p \"after\", LOADED_DEFAULT_CONFIG\nwrite item.identifier.without_ext + '.css'\nend\n```\n. > Does the problem persist if you stop mutating params in params.delete(:config_file)?\nIn the simple example above (https://github.com/nanoc/nanoc/issues/866#issuecomment-227809012) the problem no longer occurs. But not so much with Sass + Compass, as stated above.\nI have a workaround for my Sass compilation by decorating the Sass filter with my own filter that loads the configuration, so nanoc sees static parameters passed to my wrapping filter.\n. > With both #881 and #884, I believe I can consider this issue as closed. Do you agree?\n:+1: Thanks. I'll make life easier for people who use the suggested Compass settings.\n. Hi!\nYes, I know that there are a lot of APIs marked private. Unfortunately, I need/want to use them. You may ask why ;-), but I personally don't like xxx_for(@item) methods that much because they clutter the global scope and rather like those helpers to be on the objects in question (@item.xxx). As I said, personal preference and I'm willing to take a hit when you decide to remove private APIs.\n. Alright, I understand now what modified does. It's not a bug, it's PEBKAC ;)\nI was under the impression that the docs here return just items that were created or updated by the compiler and pass them to update_search_index.\nWith the code in the nanoc docs, all items would always be passed to update_search_index.Wouldn't @items.each { |item| update_search_index ... be simpler and achieve the same result? Or if one was to update the search index, would @items.select { |i| i.modified.any? }.each ... be more correct?\n. :+1: Thanks, the docs are much better now and also +1 for renaming the method.\n. This is what the Sass/Compass filter does:\ncontent/assets/foo.sass -> filter -> output/assets/foo.css + output/assets/foo.css.map + output/assets/sprites/bar-s123.png + ...\nSo one item yields > 1 output files, of which nanoc only knows  output/assets/foo.css.\n\nWould it be possible for you to have separate filters\n\nI think I could.\nIn the most simplistic case this would involve running Sass/Compass multiple times, which is not desirable.\nAnother option is to run Sass/Compass once (creating all files). n other rules with :text => :binary filters for assets/foo.sass would create the :sourcemap, :first_sprite, :second_sprite, :nth_sprite reps from the files created by the Sass/Compass compiler. This would impose an ordering requirement; Compass/Sass would need to be run first. Also, whenever I decide to add a new sprite, I'd need another rep. I'm also not really in favor of this solution.\n``` ruby\ncompile '/assets/css/app.sass' do\n  # :sass_with_compass is configured to create the sourcemap next to the css file.\n  filter :sass_with_compass, config_file: 'compass-config.rb'\n  write @item.identifier.without_ext + '.css'\nend \ncompile '/assets/css/app.sass', rep: :map do\n  filter :copy_sass_sourcemap\n  write @item.identifier.without_ext + '.css.map'\nend \ncompile '/assets/css/app.sass', rep: :sprite_1 do\n  # looks for newest output/assets/sprites/icon-*.png\n  filter :load_sass_sprite, type: 'icons'\n  # no idea how to get the fingerprint that Compass assigns (???)\n  write '/assets/sprites/icon-???.png'\nend \netc.\n```\nOr we \"just\" could: :smile: \nruby\nprune do |file|\n  file !~ /(sprites|map)/\nend\n. It might be the case that Nanoc evaluates the compile block multiple times, but does not run any filters. After all, compile is just a definition of what should happen, not the actual compilation.\nHave you tried putting that puts debug statement in the actual Filter#run method?\n. Here's what I did:\n- nanoc create-site test\n- Edited Rules:\n``` ruby\n  compile '/*/.html' do\n    puts 'rules: ' + item.identifier # added debug statement\n    filter :erb # added erb filter for item\nlayout '/default.*'\n\nend\n# NOTE: the default Rules define an erb filter defined for layouts as well!\n  ``\n- Editederb.rb` of the Nanoc gem:\nruby\n  def run(content, params = {})\n    puts \"erb for #{@item.identifier}: #{content[0...10]}\" # added debug statement\n    ...\n- rm -rf output; nanoc compile --verbose prints:\n```\n  Loading site... done\n  Compiling site...\n  rules: /index.html\n  rules: /index.html\n  erb for /index.html:\n  A Bra\n  erb for /index.html: <!DOCTYPE\n        create  [0.01s]  output/index.html\n        create  [0.00s]  output/stylesheet.css\n  | count    min    avg    max     tot\n\n----+-----------------------------------\n  erb |     2  0.00s  0.00s  0.01s   0.01s\nSite compiled in 0.06s.\n  ```\nSo while the rule blocks are evaluated more than once (one may ask why, for example if rules are expensive), the actual erb filtering is just done once per item. You'll see two erb filter runs in the output, though:\n- First, the item content is filtered by erb as per my updated compile rule.\n- Second, the layout is filtered by erb, combining the HTML output of content/index.html and the erb input of layouts/default.html.\nWhile the debug output of Nanoc's erb filter indicates that the @item.identifier is the same, the input is not the same (<h1>A Bra... of the item vs. <!DOCTYPE... of the layout).\n. > I\u2019m a bit at a loss at what to do about the issues on Windows, though.\nThe question is if Nanoc wants to support older Windows versions in the future. I'd say if you drop the check for win32console we're fine if the user runs Windows 10 (UTF-8 + colors). Users of Windows 7 will see colors, but no UTF-8. I'd say colors are more important than pretty quotes w.r.t. to seeing what happens behind the scenes (files being created or updated).\n. Thanks! And with Windows 10 ANSICON won't even be required anymore :-)\n. Yes, everything is good to go :-)\n+1 for not supporting older Windows versions\n. And we're back at 6 seconds recompile time :-)\n. :+1: Thanks for finding the right fix :-)\n. Excellent, that sounds great! I haven't looked at stackprof, so just FYI: ruby-prof's cachegrind output is really useable. You can load it into kcachegrind and browse call stacks visually. \n. I only started using ruby-prof two weeks ago so things might have changed. While text reporting is nice for things like GH issues, I really like that there is a visual frontend with drilldown functionality: https://kcachegrind.github.io/html/Screenshots.html\nJust as a suggestion when text/graphviz doesn't cut it. I at last was only able to find the issue using a UI.\nIn case you're interested, this diff cut 30 secs off our build:\ndiff\n        def nesting_level(item = @item)\n-         item.identifier.components.count\n+         item.identifier.to_s.count('/')\n        end\n. > FYI, Nanoc 4.2.4 will have a hidden feature\nFYI, stackprof unfortunately doesn't work on Windows. https://github.com/tmm1/stackprof/issues/45\nIt's not an issue for me as I have a Linux VM handy, but Windows-only users might suffer from it in the future in case you tell them to submit profiling information.\n. \n. Unfortunately, this fails if site.config[:output_dir] does not exist at the time the pruner runs.\n(My output directory is build/bin/web/bin)\n``` ruby\n\n\nFind.find('foo/bar/baz/') do |f| puts f; end\nErrno::ENOENT: No such file or directory\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:in block in find'\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:incollect!'\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:in `find'\nFind.find('foo/') do |f| puts f; end\nErrno::ENOENT: No such file or directory\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:in block in find'\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:incollect!'\n        from C:/Ruby/lib/ruby/2.3.0/find.rb:43:in find'\n        from (irb):11\n        from C:/Ruby/bin/irb:11:in'\n``\n. \ud83d\udc4d Thanks!\n. Some further investigation shows that addingBundler.with_clean_env` fixes it:\n\n\nruby\ntask :default do\n  Bundler.with_clean_env do\n    sh(*%w(bundle exec nanoc))\n  end\nend\nMy guess is that it's not a bug in nanoc or bundler or rbenv, but rather PEBKAC. What do you think?. Thanks. How would you organize helpers such that they won't pollute every object during runtime?. I didn\u2019t know about module_function, that's interesting.\nUnfortunately, for the \"non-included\" case NanocWs.sidebar_image_for(@item), @items appears to be nil. Any ideas (other that passing @items to sidebar_image_for?. > or stick with the include approach (which is IMO nicer).\nI've had it this way with Nanoc 3.x. Unfortunately my methods are now stuck on every object, even unrelated ones:\nrb\nString.new.methods.grep /list/\n[\n    [ 0]       advisory_board_list(*items)       String (Helpers::Lists)\n    [ 1]              article_list()             String (Helpers::Lists)\n    [ 2]                 book_list()             String (Helpers::Lists)\n    [ 3]    consulting_quotes_list()             String (Helpers::Lists)\n    [ 4]       interviews_all_list()             String (Helpers::Lists)\n    [ 5] interviews_customers_list()             String (Helpers::Lists)\n    [ 6]    interviews_inline_list()             String (Helpers::Lists)\n    [ 7]  interviews_trainers_list()             String (Helpers::Lists)\n    [ 8]          open_source_list()             String (Helpers::Lists)\n    [ 9]                 sort_list(list, &block) String (Helpers::Lists)\n    [10]              trainer_list()             String (Helpers::Lists)\n    [11]      training_quotes_list()             String (Helpers::Lists)\n    [12]                video_list()             String (Helpers::Lists)\n]\nIMHO that's far from nice. It's freaking me out that I might overwrite some method on some object I don't even know of.\nThis is why I want to model the xxx_for methods as separate objects/classes/containers with explicit input (beyond what's generally available during Nanoc rendering).. It seems depend_on does not abort the current filter. How would I do that?\nThe process is as follows (assuming empty output directory)\n1. bundle exec nanoc\n1. :sass filter runs\n1. A sass file calls my custom Sass::Script\n1. Script obtains item \n1. Script checks if item is compiled, it isn't hence call depend_on(item)\n1. Script returns item rep's path to Sass\n1. Sass tries to read the file for the path\n1. \ud83d\udca5\nEssentially I need to abort the Sass filter without aborting the whole Nanoc compiler. Just to signal \"Sass needs some items to be compiled first\".\nIf you're interested, here's the Sass::Script:\n```rb\nrequire 'nanoc'\nrequire 'sass'\nmodule Sass\n  module Script\n    module Items\n      def i(identifier, kwargs = {})\n        item = find_item(identifier.value)\n    item_rep = item_rep_named(item, kwargs.fetch('rep', :default))\n\n    options[:nanoc_current_filter].depend_on([item])\n    # raise Nanoc::Int::Errors::UnmetDependency.new(item_rep.unwrap) unless item_rep.unwrap.compiled?\n\n    path_without_leading_slash = item_rep.path[1..-1]\n    Sass::Script::String.new(path_without_leading_slash, :string)\n  end\n\n  private\n\n  def find_item(identifier)\n    context = options[:nanoc_current_filter]\n\n    context.items.find_item!(identifier)\n  end\n\n  def item_rep_named(item, name)\n    name = name.value if name.respond_to?(:value)\n    rep = item.reps[name.to_sym]\n\n    raise \"No rep named '#{name}' for item: #{item.identifier}\" unless rep\n    rep\n  end\nend\n\nend\nend\nmodule Sass\n  module Script\n    module Functions\n      include Sass::Script::Items\n  declare :i, [:identifier]\n  declare :i, [:identifier], var_kwargs: true\nend\n\nend\nend\n```\n(@@counter was just to get a small repro of the problem.). I tried moving depend_on to my custom Sass filter, and it seems while most images are compiled before Sass, not all reps are.\n```rb\nrequire 'nanoc'\nmodule Nanoc\n  module Filters\n    class SassWithCompass < Nanoc::Filter\n      identifier :sass_with_compass\n      type :text\n  requires 'configatron', 'compass', 'sass'\n\n  def initialize(assigns)\n    super\n    depend_on(@assigns[:items].find_all('/**/*.{jpg,png}'))\n  end\n\n  def run(content, params = {})\n    render_with_sourcemap(sourcemap_uri) unless configatron.web.compress\n\n    css, sourcemap = Sass.new(@assigns).setup_and_run(content,\n                                                      configure_compass(params))\n\n    if sourcemap\n      IO.write(File.join(@config[:output_dir], sourcemap_file),\n               sourcemap.to_json(css_uri: @item.path))\n    end\n\n    css\n  end\n\n  private\n\n  def configure_compass(params)\n    p = params.dup\n    Compass.add_project_configuration(p.delete(:config_file))\n\n    p.merge(Compass.sass_engine_options)\n  end\n\n  def render_with_sourcemap(uri)\n    ::Sass::Engine.send(:define_method,\n                        :render,\n                        proc { render_with_sourcemap(uri) })\n  end\n\n  def sourcemap_file\n    @item.path + '.map'\n  end\n\n  def sourcemap_uri\n    File.basename(sourcemap_file)\n  end\nend\n\nend\nend\n```. Did you see #1093? Do you think they both share the same root cause? . I'll try to. I think I can reproduce it locally pretty reliably, but the project is rather complex. . Works for me! Many thanks!. How should I use that from my Sass script? Just accessing the path won't make it appear magically during Sass compilation, would it? . Alright, that might work for single items. Will this PR also fix the depend_on case because this is what I think I need: I use Sass imports for compass sprite generation, hence I have n items that need to be compiled, but I don't want to reference all their paths. Using depend_on with a glob is easier, albeit you calling it a smell ;-) . Other than that, making reps appear out of thin air is a great addition! . :+1:. Any functional programmer likes immutability. Unfortunately it's not Ruby's strong side, but that's why there is Elixir. Unfortunately, Elixir does not have nanoc ;-)\nI'm not sure mixing both styles is beneficial here. Perhaps we need a special mutable collection for testing (and use the one deprived of :<< in production).\nAlso, what about ctx returning a new context?\n```\nctx.create_item(...)\n   .create_item(...)\nctx.items['/index.html'] # This is the point there the item is created with both items in its collection\n``. What I meant is thatctx.create_item` returns a modified copy of itself.\nctx.create_item() # creates a copy of ctx (#1)\n   .create_item() # creates copy #2, which has all modifications of #1\nThis way the original ctx remains untouched, and #1 contains only the first item, and #2 contains the first and the second item.. I'm still in the middle of adjusting my specs, but this looks good to me. Even made the specs a bit clearer!. \ud83d\udc4d Thank you!. 4.6.4 is showing the same behavior.. I need to check --verbose (I always run w/ it). My Sass filter tries to access other items (e.g. images to get their dimensions -- in case that helps). Yes, omitting --verbose removed the error.. Yes, but this is a bit more complex than the builtin Sass filter:\nRules:\nrb\ncompile '/assets/css/app.sass' do\n  filter :sass_with_compass, config_file: 'compass-config.rb'\nend\nFilter:\n```rb\nfrozen_string_literal: true\nrequire 'nanoc'\nmodule Nanoc\n  module Filters\n    class SassWithCompass < Nanoc::Filter\n      identifier :sass_with_compass\n      type :text\n  requires 'configatron', 'compass', 'sass'\n\n  def initialize(assigns)\n    super\n    depend_on(@assigns[:items].find_all('/**/*.{jpg,png}'))\n    depend_on(@assigns[:items].find_all('/**/*.{eot,ttf}'))\n  end\n\n  def run(content, params = {})\n    render_with_sourcemap(sourcemap_uri) unless configatron.web.compress\n\n    css, sourcemap = Sass.new(@assigns).setup_and_run(content,\n                                                      configure_compass(params))\n\n    save(sourcemap)\n    css\n  end\n\n  private\n\n  def configure_compass(params)\n    p = params.dup\n    Compass.add_project_configuration(p.delete(:config_file))\n\n    p.merge(Compass.sass_engine_options)\n  end\n\n  def render_with_sourcemap(uri)\n    ::Sass::Engine.send(:define_method,\n                        :render,\n                        proc { render_with_sourcemap(uri) })\n  end\n\n  def save(sourcemap)\n    return unless sourcemap\n    FileUtils.mkdir_p(File.dirname(sourcemap_path), verbose: false)\n    IO.write(sourcemap_path, sourcemap.to_json(css_uri: @item.path))\n  end\n\n  def sourcemap_file\n    @item.path + '.map'\n  end\n\n  def sourcemap_path\n    File.join(@config[:output_dir], sourcemap_file)\n  end\n\n  def sourcemap_uri\n    File.basename(sourcemap_file)\n  end\nend\n\nend\nend\n```\nThere is also a Sass::Script::Function that access nanoc's context:\n```rb\nfrozen_string_literal: true\nrequire 'nanoc'\nrequire 'sass'\nmodule Sass\n  module Script\n    module Items\n      def i(identifier, kwargs = {})\n        item = filter.items.find_item!(identifier.value)\n        filter.depend_on([item])\n    rep = ensure_compiled(item, kwargs.fetch('rep', :default))\n    path_for(rep)\n  end\n\n  private\n\n  def filter\n    options[:nanoc_current_filter]\n  end\n\n  def ensure_compiled(item, rep)\n    rep, name = item_rep_named(item, rep)\n    return rep if rep.unwrap.compiled?\n\n    raise \"Expected item #{item.identifier}, rep #{name}, path #{rep.path} to be compiled, but is was not\"\n  end\n\n  def item_rep_named(item, name)\n    name = symbolize(name)\n\n    rep = item.reps[name] ||\n          (raise \"No rep named #{name} for item: #{item.identifier}\")\n\n    [rep, name]\n  end\n\n  def symbolize(str)\n    str = str.value if str.respond_to?(:value)\n    str.to_sym\n  end\n\n  def path_for(rep)\n    without_leading_slash = rep.path[1..-1]\n    Sass::Script::String.new(without_leading_slash, :string)\n  end\nend\n\nend\nend\nmodule Sass\n  module Script\n    module Functions\n      include Sass::Script::Items\n  declare :i, [:identifier]\n  declare :i, [:identifier], var_kwargs: true\nend\n\nend\nend\n```\nUsed like this:\nsass\n.foo\n  background-image: inline-image(i('/assets/images/logo-high-dpi.png')). I can give you read access to the repo if that makes things easier for you. Just send me your public key.. That works, thank you very much!. Reviewed, thanks. I wasn't even aware of the style error as the VS Code rubocop plugin (which uses rubocop 0.48.1) reports this for .rubocop.yml:\n\nLayout/IndentArray has the wrong namespace - should be Style\n. > I\u2019m using Rubocop from GitHub\n\nI think so. I'm using the packed gem, works for me without issues.. Hi,\nYes, I know that I am touching internal types. 4.8.10 breaks other APIs (e.g. ViewContext -> ViewContextForCompilation) that I already fixed in my project. (I assumed that everything outside of Nanoc::Int is public, but I see this class is not documented -- so I guess it's meant to be internal.)\nAs we discussed earlier, I'm not a fan of polluting global objects (even if it is just the CompilationContext), so most methods are attached to the classes that they make sense for. In this instance, I need to construct absolute URLs for a given item. Instead of absolute_url_for(item) I can write item.url(absolute: true) which then needs to access the site's config to get the base URL.\nAs it stands the issue only arises in tests, but from the diff I couldn't find the location where it broke, otherwise I would have submitted a PR.\nTo answer your question, I could go through all my layouts and content files and replace #url with a helper that you would prefer. But I have to admit that I would be in favor of a solution that restores the functionality of accessing the site's config in test contexts.. OK, I'm going to investigate this. The first spec should check whether a forwarded item (via frontmatter) yields the correct target URL. The idea is:\n\nitem forwards to target via frontmatter\nabsolute URL of item is the same as the absolute URL of target\n\n```rb\ndef absolute_url_of(item)\n  append = item.path\nif item.attributes[:forward]\n    append = @items[item.attributes[:forward]].path\n  end\n  @config[:base_url] + append\nend\ndescribe 'absolute URL' do\n  include Nanoc::Spec::HelperHelper\nlet(:item) { ctx.items['/index.html'] }\n  let(:target) { ctx.items['/somewhere/else.html'] }\nbefore do\n    ctx.create_item('item', { forward: '/somewhere/else.html' }, '/index.html')\n       .create_item('target', {}, '/somewhere/else.html')\n       .create_rep(item, '/path/to' + item.identifier.to_s)\n       .create_rep(target, '/path/to' + target.identifier.to_s)\n  end\nit 'yields URL of forwarded item' do\n    ctx.instance_exec(item, target) do |item, target|\n      url = absolute_url_of(item)\n      target = absolute_url_of(target)\n      expect(url).to eq(target)\n    end\n  end\nend\n```\nIs this the idea behind Nanoc::Spec::HelperHelper and is instance_exec correct?\nIf so, how would I work around this?\n```\nFailures:\n1) absolute URL yields URL of forwarded item\n     Failure/Error: append = @items[item.attributes[:forward]].path\n NoMethodError:\n   undefined method `path' for <Nanoc::Int::Item identifier=\"/somewhere/else.html\">:Nanoc::Int::Item\n\n``. Thanks, that works. I see I got a bug by reassigningtargetto the URL. I also saw you call the mixin onctx, so theHelperHelpermixes in thedescribed_class` automatically?\n\nYou can leave the include Nanoc::Spec::HelperHelper out, too, by the way\n\nDoes nanoc hook into rspec for sites? It may work in the nanoc repo itself, but this has spec_helper.rb with c.include(Nanoc::Spec::HelperHelper, helper: true).. Background: I have a site with output_dir: build/bin but there is an external tool that creates files in build/bin/bin and I do not want nanoc to prune build/bin/bin/**/*, hence I added bin to prune.exclude.. > Finally, given your additional example of having output_dir: build/bin and a tool creating files in build/bin/bin it seems to me you want to exclude build/bin/bin and not build/bin right?\nRight, but given that the exclude patterns are checked against each path component I cannot achieve that either.\nAdding bin as a pattern essentially disables pruning for all files.. > Now I would acknowledge there's an ambiguity in the Nanoc's wording. Should prune.exclude: ['output'] exclude output or output/output?\nFrom my point of view it should only exclude output/output.\nConsider this:\n1. output_directory: foo and prune.exclude: ['bar']\n1. You use pruning and like it\n1. Later, you decide you want your output in bar, hence you set output_directory: bar\n1. Pruning gets disabled without anybody telling you. > I mean prune.exclude: ['build/bin/bin']\nNot possible, as each path component is checked against a pattern. What you suggested never is a component. For build/bin/bin/foo.dll these components will be checked against exclude patterns: build, bin, bin, foo.dll.\nI remember a discussion we had earlier that I would prefer pruning to use globs. It allows for fine-grained control, is rather standard, but I do still believe these globs should be checked against paths below output_dir, whatever that value is at the moment.. https://github.com/nanoc/nanoc/issues/883. Thank you!. I'm sorry but it still doesn't work. I made a little repro: https://github.com/agross/nanoc-pruning\nRun run which creates a file untracked by nanoc in output_dir which is not pruned during compilation.. Looking good!. I also wonder what the implications will be on Windows where ... hold your breath ... {hard,sym}links can by default only be created by administrators. Just tested FileUtils.ln, it returns 0 and no files are created (Ruby 2.5.0, I can at least create symlinks as per Windows permissions with mklink). On Windows, a copy is created.. @terceiro As I said, Ruby 2.5.0 on Windows just copies the file, I guess it won't pose a problem.. @terceiro Alright, I missed that part. The problem is that I can't even install the nanoc's dependencies on Windows. Perhaps you can just skip the test if Gem.win_platform? is true?\nHere's what I tested manually in irb:\nrb\nrequire 'fileutils'\n=> true\nIO.write('test', 'foo')\n=> 3\nFileUtils.ln('test', 'linked')\n=> 0\nFile.stat('test').ino\n=> 1125899906918010\nFile.stat('linked').ino\n=> 1125899906918010\nFileUtils.ln('test', 'linked-f', force: true)\n=> 0\nFile.stat('linked').ino\n=> 1125899906918010. > I\u2019ve been meaning to find a way to automatically test Nanoc on Windows (Travis CI doesn\u2019t have Ruby on Windows).\nhttps://github.com/agross/nanoc/blob/appveyor/appveyor.yml\nBasically, this gets me the same weird bundler errors as on my Windows machine. Adding x64_mingw helped, but we get test errors, some of which can be fixed by comparing paths with File.absolute_path.. @ddfreyne Yes, the details section was copied from crash log (the extra empty lines were added by GitHub, though).. On macOS:\n```\nLoading site\u2026 done\nCompiling site\u2026\nCaptain! We\u2019ve been hit!\n... 8 lines omitted (see crash.log for details)\n  9. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/action_sequence.rb:50:in each'\n  8. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/action_sequence.rb:50:ineach'\n  7. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/action_sequence.rb:50:in block in each'\n  6. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/services/compiler/phases/recalculate.rb:32:inblock in run'\n  5. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/services/executor.rb:65:in layout'\n  4. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/services/executor.rb:92:inassigns_for'\n  3. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/services/compilation_context.rb:41:in assigns_for'\n  2. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/content.rb:71:instring'\n  1. from /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/lazy_value.rb:18:in value'\n  /Users/agross/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/nanoc-4.9.1/lib/nanoc/base/entities/lazy_value.rb:18:indelete'\nFrozenError: can't modify frozen Hash\nYou attempted to modify immutable data. Some data cannot be modified once compilation has started. Such data includes content and attributes of items and layouts, and filter arguments.\nCurrent item: /index.html (:default representation)\nA detailed crash log has been written to ./crash.log.\n```\ncrash.log. You could probably test rsync after installing rsync with Chocolatey: https://chocolatey.org/packages/rsync. Yep, understood. It's always interesting how many platform-specifics are buried in a project. Have been there myself. If you need any help w/ debugging on a Windows machine, let me know.. @ddfreyne \n\nMy appveyor.yml is quite different from yours.\n\nI saw that too. It's been my first AppVeyor build, so I'm not sure what's the more \"correct\" approach.\n\nI don\u2019t use choco or ridk, and also don\u2019t use mingw (no msys).\n\nIt seems AppVeyor has some pre-installed rubies which I wasn't aware of. Hence your PATH-setting just works without installing something manually.\n\nIs there a practical difference? What are the advantages/drawbacks of choco install ruby?\n\nWith Chocolatey you get the latest Rubies when they are released on chocolatey.org, not only after  AppVeyor updates its base image. You need the ridk (based on msys) to compile native gems. E.g., nokogumbo will not install without ridk.\nThere are also differences how the SDK part (now ridk) is installed between Ruby versions. Up until 2.3 you need to install and setup a different SDK type than ridk. I never have used the old SDK type with Chocolatey, so I'm not sure how that is handled (but I've seen a Choco package for it). Another disadvantage of Chocolatey is that it takes longer to set up the ruby environment than just using rubies shipped by AppVeyor. \nMy appveyor.yaml is basically a reflection of my development machine: You install Ruby and ridk and then bundle install.\nThe chcp 65001 line is a necessity to get around some nasty external encoding issues when you e.g. capture output from a command and match it against a UTF-8 regex.. > I couldn\u2019t figure out what the heck was up with the encoding nor how to fix it \nWelcome to the beautiful world of Windows (writing this on a Mac \ud83d\ude09). FWIW, before the importer sets the syntax to :scss, options[:syntax] already equals :sass. I guess removing that assignment will then break Sass importing Scss . I think Nanoc needs to somehow guess the syntax.. Perhaps something like options[:syntax] = File.extname(identifier.to_s).delete('.').downcase.to_sym will work.. @gpakosz FYI. \ud83d\udc4d Enjoy!. Hi there, I got a bit further. The tests are working now but I found a slight issue with the capturing helper. Because capturing seems to inject snapshots like\nrb\n{:__capture_blah=>\n        #<Nanoc::Core::TextualContent:0x00007fdc3e257638\n         @filename=nil,\n         @string=#<Nanoc::Core::LazyValue:0x00007fdc3e2572f0 @value={:final=>\"Old content\"}>}\nthat doesn't make it into the ItemRep's snapshot_defs the compiler thinks that not all reps have been compiled. This stems from the fact that the cache now validates that the cache items' contents actually match the snapshot_defs. And here we have an extra key that essentially invalidates the cache item. My workaround is to remove such keys before validating, but that feels dirty.\nWhat would you prefer? Drop the validation?. Did the rename as suggested.\nSpecs are now failing because PostCompileItemRepView assumes the cache returns snapshot_contents even though the contract of CompiledContentCache#[] is ... => C::Maybe[C::HashOf[Symbol => Nanoc::Core::Content]] with a Maybe. I guess until now it never returned nil as it would now if the cache item does not validate.. Fix is in 8ec96a01ed.. From my point of view everything is speced and tested with one of my projects. The only ugliness is how to handle this.\nI'd love to get a get a code review, and perhaps a merge ;-)\n. > Would you mind if I continue your PR from here?\nNot at all. Go ahead as you see fit.\n\nCommunication might be a bit difficult\n\nI'm in Berlin next week and the week after - in case you want to meet, talk and/or eat. ;-). > Please don\u2019t be put off by the amount of changes that I made.\nNot at all. I love a good refactoring. I intended not to break too many things in my original implementation so was trying to be conservative w.r.t. existing APIs. I appreciate your ongoing work!. > I expect the cache disk usage could be reduced quite a bit\u2026\nI was thinking the same initially, but I am very willing to trade disk space for speed. Our upwards-of-60-second recompilations were dragging my development flow to a grinding halt. I did some checks against my Nanoc project with the binary cache being primed:\n209467349 bytes total, 139428230 bytes wasted (66.563228429458%)\nIn this instance I'm wasting 140 MB which I am OK with.\n\n\n```rb\n#!/usr/bin/env ruby\n\nrequire 'digest'\n\nfiles = Dir.glob('tmp/nanoc/*/binary_content/**/*', File::FNM_DOTMATCH)\n           .select { |e| File.file?(e) }\n\ntotal = files.sum { |f| File.size(f) }\n\ndups = files.map { |f| [Digest::SHA1.hexdigest(IO.binread(f)), f] }\n            .each_with_object({}) do |sha_file, memo|\n              sha, file = sha_file\n              memo[sha] ||= []\n              memo[sha] = memo[sha] << file\n            end\n\nwasted = dups.sum { |_, files| File.size(files.first) * (files.size - 1) }\n\nputs \"#{total} bytes total, #{wasted} bytes wasted (#{Float(wasted) / total * 100}%)\"\n```\n\nMy idea how to solve this is that Nanoc could implement storage like git. Instead of storing snapshots contents in the snapshot file, use a separate \"object store\" that is addressable by hashes. Those hashes are the SHAs of the snapshots themselves. The actual binary_cache files point to the object store.\nE.g.:\n\nItem /one.md, rep default, snaphots pre and last with same contents\nItem /two.md, rep default, snaphots pre and last with different contents\n\nContents of the cache dir:\n```\n\u2514\u2500\u2500 binary_content\n    \u251c\u2500\u2500 objects\n    \u2502   \u251c\u2500\u2500 14a3ccb7: \"/one.md pre and last snapshot\"\n    \u2502   \u251c\u2500\u2500 11111901: \"/two.md pre snapshot\"     \n    \u2502   \u2514\u2500\u2500 58e2563d: \"/two.md last snapshot\"     \n    \u2514\u2500\u2500 items\n        \u251c\u2500\u2500 one.md\n        \u2502   \u2514\u2500\u2500 default\n        \u2502       \u251c\u2500\u2500 pre: \"14a3ccb7\"\n        \u2502       \u2514\u2500\u2500 last: \"14a3ccb7\"\n        \u2514\u2500\u2500 two.md\n            \u2514\u2500\u2500 default\n                \u251c\u2500\u2500 pre: \"11111901\"\n                \u2514\u2500\u2500 last: \"58e2563d\"\n```\n. > still looking for a test run\nWorks for me!. I run into this quite frequently today. \ud83e\udd14\n\n\n```\nCrashlog created at 2019-02-19 19:59:08 +0100\n\n===== MESSAGE:\n\nNoMethodError: undefined method `binary?' for nil:NilClass\n\n===== STACK TRACE:\n\n  0. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:50:in `write_single'\n  1. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:22:in `block in write'\n  2. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:21:in `each'\n  3. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:21:in `write'\n  4. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:16:in `block in write_all'\n  5. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:15:in `each'\n  6. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib/nanoc/base/services/item_rep_writer.rb:15:in `write_all'\n\n===== VERSION INFORMATION:\n\nNanoc 4.11.2 \u00a9 2007-2018 Denis Defreyne.\nRunning ruby 2.6.1 (2019-01-30) on x86_64-darwin18 with RubyGems 3.0.1.\n\n===== SYSTEM INFORMATION:\n\nDarwin firiel 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RELEASE_X86_64 x86_64 i386 MacBookPro13,2 Darwin\n\n===== INSTALLED GEMS:\n\n  addressable 2.6.0\n  adsf 1.4.1\n  adsf-live 1.4.1\n  ast 2.4.0\n  awesome_print 1.8.0\n  babosa 1.0.2\n  builder 3.2.3\n  bundler 1.17.2\n  byebug 10.0.2\n  childprocess 0.9.0\n  chunky_png 1.3.11\n  coderay 1.1.2\n  colored 1.2\n  compass 1.0.3\n  compass-core 1.0.3\n  compass-import-once 1.0.5\n  concurrent-ruby 1.1.4\n  configatron 4.5.1\n  crass 1.0.4\n  cri 2.15.3\n  ddmemoize 1.0.0\n  ddmetrics 1.0.1\n  ddplugin 1.0.2\n  debug_inspector 0.0.3\n  diff-lcs 1.3\n  docile 1.3.1\n  em-websocket 0.5.1\n  eventmachine 1.2.7\n  ffi 1.10.0\n  formatador 0.2.5\n  guard 2.15.0\n  guard-bundler 2.2.1\n  guard-compat 1.2.1\n  guard-haml_lint 1.0.1\n  guard-livereload 2.5.2\n  guard-rack 2.2.0\n  guard-rspec 4.7.3\n  guard-rubocop 1.3.0\n  guard-shell 0.7.1\n  haml 5.0.4\n  haml_lint 0.28.0\n  hamster 3.0.0\n  htmlentities 4.3.4\n  http_parser.rb 0.6.0\n  jaro_winkler 1.5.2\n  json 2.1.0\n  json_schema 0.20.1\n  kramdown 2.1.0\n  listen 3.1.5\n  lumberjack 1.0.13\n  method_source 0.9.2\n  mini_portile2 2.4.0\n  multi_json 1.13.1\n  nanoc 4.11.2\n  nanoc-cachebuster 0.4.0\n  nanoc-core 4.11.2\n  nenv 0.3.0\n  net_http_ssl_fix 0.0.10\n  nokogiri 1.10.1\n  nokogumbo 1.5.0\n  notiffany 0.1.1\n  oily_png 1.2.1\n  parallel 1.13.0\n  parser 2.6.0.0\n  powerpack 0.1.2\n  pry 0.12.2\n  pry-byebug 3.6.0\n  public_suffix 3.0.3\n  r18n-core 3.2.0\n  rack 2.0.6\n  rack-contrib 2.1.0\n  rack-livereload 0.3.17\n  rainbow 3.0.0\n  rake 12.3.2\n  rake-funnel 0.22.3\n  rb-fsevent 0.10.3\n  rb-inotify 0.10.0\n  ref 2.0.0\n  rspec 3.8.0\n  rspec-core 3.8.0\n  rspec-expectations 3.8.2\n  rspec-mocks 3.8.0\n  rspec-support 3.8.0\n  rspec-teamcity 1.0.0\n  rubocop 0.64.0\n  rubocop-checkstyle_formatter 0.4.0\n  rubocop-rspec 1.32.0\n  ruby-prof 0.17.0\n  ruby-progressbar 1.10.0\n  ruby_dep 1.5.0\n  rubyzip 1.2.2\n  sanitize 4.6.6\n  sass 3.4.25\n  sass-css-importer 1.0.0.beta.0\n  selenium-webdriver 3.141.0\n  shellany 0.0.1\n  simplecov 0.16.1\n  simplecov-html 0.10.2\n  simplecov-teamcity-summary 1.0.0\n  slow_enumerator_tools 1.1.0\n  smart_colored 1.1.1\n  spoon 0.0.6\n  sysexits 1.2.0\n  temple 0.8.0\n  terminal-notifier 2.0.0\n  terminal-notifier-guard 1.7.0\n  thor 0.20.3\n  tilt 2.0.9\n  tomlrb 1.2.8\n  tzinfo 2.0.0\n  tzinfo-data 1.2018.9\n  unicode-display_width 1.4.1\n  webdrivers 3.6.0\n  zeitwerk 1.2.0\n\n===== GEMFILE.LOCK:\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    addressable (2.6.0)\n      public_suffix (>= 2.0.2, < 4.0)\n    adsf (1.4.1)\n      rack (>= 1.0.0, < 3.0.0)\n    adsf-live (1.4.1)\n      adsf (~> 1.3)\n      em-websocket (~> 0.5)\n      eventmachine (~> 1.2)\n      listen (~> 3.0)\n      rack-livereload (~> 0.3)\n    ast (2.4.0)\n    awesome_print (1.8.0)\n    babosa (1.0.2)\n    builder (3.2.3)\n    byebug (10.0.2)\n    childprocess (0.9.0)\n      ffi (~> 1.0, >= 1.0.11)\n    chunky_png (1.3.11)\n    coderay (1.1.2)\n    colored (1.2)\n    compass (1.0.3)\n      chunky_png (~> 1.2)\n      compass-core (~> 1.0.2)\n      compass-import-once (~> 1.0.5)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n      sass (>= 3.3.13, < 3.5)\n    compass-core (1.0.3)\n      multi_json (~> 1.0)\n      sass (>= 3.3.0, < 3.5)\n    compass-import-once (1.0.5)\n      sass (>= 3.2, < 3.5)\n    concurrent-ruby (1.1.4)\n    configatron (4.5.1)\n    crass (1.0.4)\n    cri (2.15.3)\n      colored (~> 1.2)\n    ddmemoize (1.0.0)\n      ddmetrics (~> 1.0)\n      ref (~> 2.0)\n    ddmetrics (1.0.1)\n    ddplugin (1.0.2)\n    debug_inspector (0.0.3)\n    diff-lcs (1.3)\n    docile (1.3.1)\n    em-websocket (0.5.1)\n      eventmachine (>= 0.12.9)\n      http_parser.rb (~> 0.6.0)\n    eventmachine (1.2.7)\n    eventmachine (1.2.7-x64-mingw32)\n    ffi (1.10.0)\n    ffi (1.10.0-x64-mingw32)\n    formatador (0.2.5)\n    guard (2.15.0)\n      formatador (>= 0.2.4)\n      listen (>= 2.7, < 4.0)\n      lumberjack (>= 1.0.12, < 2.0)\n      nenv (~> 0.1)\n      notiffany (~> 0.0)\n      pry (>= 0.9.12)\n      shellany (~> 0.0)\n      thor (>= 0.18.1)\n    guard-bundler (2.2.1)\n      bundler (>= 1.3.0, < 3)\n      guard (~> 2.2)\n      guard-compat (~> 1.1)\n    guard-compat (1.2.1)\n    guard-haml_lint (1.0.1)\n      guard (~> 2.2)\n      guard-compat (~> 1.2)\n      haml_lint (>= 0.15.2)\n    guard-livereload (2.5.2)\n      em-websocket (~> 0.5)\n      guard (~> 2.8)\n      guard-compat (~> 1.0)\n      multi_json (~> 1.8)\n    guard-rack (2.2.0)\n      ffi\n      guard (~> 2.3)\n      spoon\n    guard-rspec (4.7.3)\n      guard (~> 2.1)\n      guard-compat (~> 1.1)\n      rspec (>= 2.99.0, < 4.0)\n    guard-rubocop (1.3.0)\n      guard (~> 2.0)\n      rubocop (~> 0.20)\n    guard-shell (0.7.1)\n      guard (>= 2.0.0)\n      guard-compat (~> 1.0)\n    haml (5.0.4)\n      temple (>= 0.8.0)\n      tilt\n    haml_lint (0.28.0)\n      haml (>= 4.0, < 5.1)\n      rainbow\n      rake (>= 10, < 13)\n      rubocop (>= 0.50.0)\n      sysexits (~> 1.1)\n    hamster (3.0.0)\n      concurrent-ruby (~> 1.0)\n    htmlentities (4.3.4)\n    http_parser.rb (0.6.0)\n    jaro_winkler (1.5.2)\n    json (2.1.0)\n    json_schema (0.20.1)\n    kramdown (2.1.0)\n    listen (3.1.5)\n      rb-fsevent (~> 0.9, >= 0.9.4)\n      rb-inotify (~> 0.9, >= 0.9.7)\n      ruby_dep (~> 1.2)\n    lumberjack (1.0.13)\n    method_source (0.9.2)\n    mini_portile2 (2.4.0)\n    multi_json (1.13.1)\n    nanoc (4.11.2)\n      addressable (~> 2.5)\n      cri (~> 2.15)\n      nanoc-core (= 4.11.2)\n      parallel (~> 1.12)\n      slow_enumerator_tools (~> 1.0)\n      tomlrb (~> 1.2)\n    nanoc-cachebuster (0.4.0)\n      nanoc (>= 3.3.0)\n    nanoc-core (4.11.2)\n      ddmemoize (~> 1.0)\n      ddmetrics (~> 1.0)\n      ddplugin (~> 1.0)\n      hamster (~> 3.0)\n      json_schema (~> 0.19)\n      zeitwerk (~> 1.0)\n    nenv (0.3.0)\n    net_http_ssl_fix (0.0.10)\n    nokogiri (1.10.1)\n      mini_portile2 (~> 2.4.0)\n    nokogiri (1.10.1-x64-mingw32)\n      mini_portile2 (~> 2.4.0)\n    nokogumbo (1.5.0)\n      nokogiri\n    notiffany (0.1.1)\n      nenv (~> 0.1)\n      shellany (~> 0.0)\n    oily_png (1.2.1)\n      chunky_png (~> 1.3.7)\n    parallel (1.13.0)\n    parser (2.6.0.0)\n      ast (~> 2.4.0)\n    powerpack (0.1.2)\n    pry (0.12.2)\n      coderay (~> 1.1.0)\n      method_source (~> 0.9.0)\n    pry-byebug (3.6.0)\n      byebug (~> 10.0)\n      pry (~> 0.10)\n    public_suffix (3.0.3)\n    r18n-core (3.2.0)\n    rack (2.0.6)\n    rack-contrib (2.1.0)\n      rack (~> 2.0)\n    rack-livereload (0.3.17)\n      rack\n    rainbow (3.0.0)\n    rake (12.3.2)\n    rake-funnel (0.22.3)\n      configatron (~> 4.5)\n      rake (>= 10.4, < 13)\n      rubyzip (~> 1.0)\n      smart_colored\n    rb-fsevent (0.10.3)\n    rb-inotify (0.10.0)\n      ffi (~> 1.0)\n    ref (2.0.0)\n    rspec (3.8.0)\n      rspec-core (~> 3.8.0)\n      rspec-expectations (~> 3.8.0)\n      rspec-mocks (~> 3.8.0)\n    rspec-core (3.8.0)\n      rspec-support (~> 3.8.0)\n    rspec-expectations (3.8.2)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.8.0)\n    rspec-mocks (3.8.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.8.0)\n    rspec-support (3.8.0)\n    rspec-teamcity (1.0.0)\n      rspec (>= 2.99, >= 2.14.2, < 4)\n    rubocop (0.64.0)\n      jaro_winkler (~> 1.5.1)\n      parallel (~> 1.10)\n      parser (>= 2.5, != 2.5.1.1)\n      powerpack (~> 0.1)\n      rainbow (>= 2.2.2, < 4.0)\n      ruby-progressbar (~> 1.7)\n      unicode-display_width (~> 1.4.0)\n    rubocop-checkstyle_formatter (0.4.0)\n      rubocop (>= 0.35.1)\n    rubocop-rspec (1.32.0)\n      rubocop (>= 0.60.0)\n    ruby-prof (0.17.0)\n    ruby-progressbar (1.10.0)\n    ruby_dep (1.5.0)\n    ruby_gntp (0.3.4)\n    rubyzip (1.2.2)\n    sanitize (4.6.6)\n      crass (~> 1.0.2)\n      nokogiri (>= 1.4.4)\n      nokogumbo (~> 1.4)\n    sass (3.4.25)\n    sass-css-importer (1.0.0.beta.0)\n      sass (>= 3.1)\n    selenium-webdriver (3.141.0)\n      childprocess (~> 0.5)\n      rubyzip (~> 1.2, >= 1.2.2)\n    shellany (0.0.1)\n    simplecov (0.16.1)\n      docile (~> 1.1)\n      json (>= 1.8, < 3)\n      simplecov-html (~> 0.10.0)\n    simplecov-html (0.10.2)\n    simplecov-teamcity-summary (1.0.0)\n      simplecov\n    slow_enumerator_tools (1.1.0)\n    smart_colored (1.1.1)\n    spoon (0.0.6)\n      ffi\n    sysexits (1.2.0)\n    temple (0.8.0)\n    terminal-notifier (2.0.0)\n    terminal-notifier-guard (1.7.0)\n    thor (0.20.3)\n    tilt (2.0.9)\n    tomlrb (1.2.8)\n    tzinfo (2.0.0)\n      concurrent-ruby (~> 1.0)\n    tzinfo-data (1.2018.9)\n      tzinfo (>= 1.0.0)\n    unicode-display_width (1.4.1)\n    wdm (0.1.1)\n    webdrivers (3.6.0)\n      net_http_ssl_fix\n      nokogiri (~> 1.6)\n      rubyzip (~> 1.0)\n      selenium-webdriver (~> 3.0)\n    zeitwerk (1.2.0)\n\nPLATFORMS\n  ruby\n  x64-mingw32\n\nDEPENDENCIES\n  addressable\n  adsf\n  adsf-live\n  awesome_print\n  babosa\n  builder\n  compass (~> 1.0)\n  debug_inspector\n  guard-bundler\n  guard-haml_lint\n  guard-livereload\n  guard-rack (~> 2.2)\n  guard-rspec\n  guard-rubocop\n  guard-shell (~> 0)\n  haml (~> 5.0)\n  haml_lint\n  htmlentities\n  kramdown\n  nanoc (~> 4.9, >= 4.11.0)\n  nanoc-cachebuster\n  nokogiri (~> 1.7)\n  oily_png\n  pry-byebug\n  r18n-core\n  rack\n  rack-contrib (~> 2.0)\n  rack-livereload\n  rake-funnel\n  rb-fsevent\n  rb-inotify\n  rspec (~> 3.4)\n  rspec-teamcity\n  rubocop (!= 0.62)\n  rubocop-checkstyle_formatter\n  rubocop-rspec\n  ruby-prof\n  ruby_gntp\n  sanitize (< 5)\n  sass-css-importer (~> 1.0.0.beta.0)\n  simplecov\n  simplecov-teamcity-summary\n  terminal-notifier\n  terminal-notifier-guard\n  tzinfo\n  tzinfo-data\n  wdm\n  webdrivers (~> 3.0)\n\nBUNDLED WITH\n   1.17.2\n\n===== LOAD PATHS:\n\n  0. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ref-2.0.0/lib\n  1. /usr/local/Cellar/rbenv/1.1.1/rbenv.d/exec/gem-rehash\n  2. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/webdrivers-3.6.0/lib\n  3. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/tzinfo-data-1.2018.9/lib\n  4. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/tzinfo-2.0.0/lib\n  5. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/terminal-notifier-guard-1.7.0/lib\n  6. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/terminal-notifier-2.0.0/lib\n  7. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/simplecov-teamcity-summary-1.0.0/lib\n  8. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/simplecov-0.16.1/lib\n  9. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/simplecov-html-0.10.2/lib\n  10. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/selenium-webdriver-3.141.0/lib\n  11. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/sass-css-importer-1.0.0.beta.0/lib\n  12. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/sanitize-4.6.6/lib\n  13. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ruby-prof-0.17.0/lib\n  14. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/ruby-prof-0.17.0\n  15. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rubocop-rspec-1.32.0/lib\n  16. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rubocop-checkstyle_formatter-0.4.0/lib\n  17. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-teamcity-1.0.0/lib\n  18. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rake-funnel-0.22.3/lib\n  19. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/smart_colored-1.1.1/lib\n  20. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rubyzip-1.2.2/lib\n  21. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rack-contrib-2.1.0/lib\n  22. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/r18n-core-3.2.0/lib\n  23. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/pry-byebug-3.6.0/lib\n  24. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/oily_png-1.2.1/lib\n  25. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/oily_png-1.2.1/ext\n  26. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/oily_png-1.2.1\n  27. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nokogumbo-1.5.0/lib\n  28. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/nokogumbo-1.5.0\n  29. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nokogiri-1.10.1/lib\n  30. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/nokogiri-1.10.1\n  31. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/net_http_ssl_fix-0.0.10/lib\n  32. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-cachebuster-0.4.0/lib\n  33. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-4.11.2/lib\n  34. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/tomlrb-1.2.8/lib\n  35. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/slow_enumerator_tools-1.1.0/lib\n  36. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nanoc-core-4.11.2/lib\n  37. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/zeitwerk-1.2.0/lib\n  38. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/mini_portile2-2.4.0/lib\n  39. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/kramdown-2.1.0/lib\n  40. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/json_schema-0.20.1/lib\n  41. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/json-2.1.0/lib\n  42. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/json-2.1.0\n  43. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/htmlentities-4.3.4/lib\n  44. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/hamster-3.0.0/lib\n  45. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-shell-0.7.1/lib\n  46. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-rubocop-1.3.0/lib\n  47. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-rspec-4.7.3/lib\n  48. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-3.8.0/lib\n  49. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-mocks-3.8.0/lib\n  50. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-expectations-3.8.2/lib\n  51. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.0/lib\n  52. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-support-3.8.0/lib\n  53. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-rack-2.2.0/lib\n  54. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/spoon-0.0.6/lib\n  55. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-livereload-2.5.2/lib\n  56. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-haml_lint-1.0.1/lib\n  57. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/haml_lint-0.28.0/lib\n  58. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/sysexits-1.2.0/lib\n  59. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rubocop-0.64.0/lib\n  60. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/unicode-display_width-1.4.1/lib\n  61. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ruby-progressbar-1.10.0/lib\n  62. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/powerpack-0.1.2/lib\n  63. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/parser-2.6.0.0/lib\n  64. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/parallel-1.13.0/lib\n  65. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/jaro_winkler-1.5.2/lib\n  66. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/jaro_winkler-1.5.2\n  67. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rainbow-3.0.0/lib\n  68. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/haml-5.0.4/lib\n  69. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/tilt-2.0.9/lib\n  70. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/temple-0.8.0/lib\n  71. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-bundler-2.2.1/lib\n  72. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-compat-1.2.1/lib\n  73. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/guard-2.15.0/lib\n  74. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/thor-0.20.3/lib\n  75. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/pry-0.12.2/lib\n  76. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/method_source-0.9.2/lib\n  77. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/notiffany-0.1.1/lib\n  78. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/shellany-0.0.1/lib\n  79. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/nenv-0.3.0/lib\n  80. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/lumberjack-1.0.13/lib\n  81. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/formatador-0.2.5/lib\n  82. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/docile-1.3.1/lib\n  83. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/diff-lcs-1.3/lib\n  84. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/debug_inspector-0.0.3/lib\n  85. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/debug_inspector-0.0.3\n  86. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ddplugin-1.0.2/lib\n  87. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ddmemoize-1.0.0/lib\n  88. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ref-2.0.0/lib\n  89. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ddmetrics-1.0.1/lib\n  90. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/cri-2.15.3/lib\n  91. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/crass-1.0.4/lib\n  92. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/configatron-4.5.1/lib\n  93. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/concurrent-ruby-1.1.4/lib\n  94. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/compass-1.0.3/lib\n  95. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/compass-import-once-1.0.5/lib\n  96. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/compass-core-1.0.3/lib\n  97. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/sass-3.4.25/lib\n  98. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/multi_json-1.13.1/lib\n  99. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/colored-1.2/lib\n  100. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/coderay-1.1.2/lib\n  101. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/chunky_png-1.3.11/lib\n  102. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/childprocess-0.9.0/lib\n  103. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/byebug-10.0.2/lib\n  104. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/byebug-10.0.2\n  105. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/bundler-1.17.2/lib\n  106. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/builder-3.2.3/lib\n  107. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/babosa-1.0.2/lib\n  108. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/awesome_print-1.8.0/lib\n  109. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ast-2.4.0/lib\n  110. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/adsf-live-1.4.1/lib\n  111. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rack-livereload-0.3.17/lib\n  112. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/listen-3.1.5/lib\n  113. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ruby_dep-1.5.0/lib\n  114. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rb-inotify-0.10.0/lib\n  115. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/ffi-1.10.0/lib\n  116. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/ffi-1.10.0\n  117. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rb-fsevent-0.10.3/lib\n  118. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/em-websocket-0.5.1/lib\n  119. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/http_parser.rb-0.6.0/lib\n  120. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/http_parser.rb-0.6.0\n  121. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib\n  122. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0-static/eventmachine-1.2.7\n  123. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/adsf-1.4.1/lib\n  124. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rack-2.0.6/lib\n  125. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/addressable-2.6.0/lib\n  126. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/public_suffix-3.0.3/lib\n  127. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/gems/2.6.0/gems/rake-12.3.2/lib\n  128. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/site_ruby/2.6.0\n  129. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/site_ruby/2.6.0/x86_64-darwin18\n  130. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/site_ruby\n  131. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/vendor_ruby/2.6.0\n  132. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/vendor_ruby/2.6.0/x86_64-darwin18\n  133. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/vendor_ruby\n  134. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/2.6.0\n  135. /Users/agross/.rbenv/versions/2.6.1/lib/ruby/2.6.0/x86_64-darwin18\n```\n\n\n. Ah! It happens when I run Nanoc without the feature flag after running it once with the feature enabled.. Instead of the if I use this in my Gemfiles:\nrb\ninstall_if(-> { Gem.win_platform? }) do\n  gem 'wdm'\nend\nIIRC this leads to a consistent lockfile across OSes, whereas the dep is only installed when needed.. \ud83d\udc4d . My primary goal is to write readable code, diff size doesn't matter much to me. Git stores snapshots anyways. \ud83d\ude09\nThe fallback is :scss because that's what's the original code was hard-coding. \nI needed to change the specs because they were failing now that Sass compiles the inferred syntax, but the content served by the cache was Scss. \nI'm open to exchanging syntax and content if that is preferred.. Extra dot after names ;-). Good catch! In the extensionless case Nanoc now specifies syntax = nil which makes Sass use its internal default (which is Sass).. @gpakosz Made the changes as requested. I also added some new specs round importing partials.. ",
    "em": "Also you removed the ability to compile individual files. So, since compiling takes 2.6 minutes, I'm left having to modify output and then manually move changes over to content. Sucks.\n. Using RVM with 1.9.2p290, fresh gemset, fresh OS in fact... It doesn't work for anyone in our office.\nfssm and rb-fsevent were just installed, so I don't see how removing and reinstalling could make a difference.\nHave you tested with Lion?\n. ",
    "brief": "Both watch and autocompile work for me on 10.7.1 with Ruby 1.9.2p290. Not using RVM, however.\n. ",
    "ytaka": "Thanks for your reply.\nI read the replay and nanoc documentations for language declarations\nand then I understood some specifications.\nI think it is general that we want to show a code sample with a shebang line.\nAn error does not raise if we add a class attribute such as the following.\n```\n\n!/usr/bin/python\n\n```\nAlthough it is easy to add the attributes for all code samples with shebang lines,\nfor me it is desirable that there is an option of \"filter\" method in \"Rules\" file\nto disable language declarations.\n. ",
    "lynaghk": "How about just solving the general case and letting people pass in their own CSS selector?\n. For sure, thanks for nanoc! =)\nOn Sun, Sep 25, 2011 at 2:32 AM, Denis Defreyne \nreply@reply.github.comwrote:\n\nHi, Ive pulled your patch and swapped the :colorize_selector option for\na :outside_pre one. Thanks for your contribution!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ddfreyne/nanoc/pull/57#issuecomment-2190255\n. \n",
    "ogier": "Isn't this use case almost already solved?\n``` ruby\ncompile '/assets/*' do\nend\nroute '/assets/*' do\n  return item.identifier.chop + '.' + item[:extension]\nend\n```\nIs a static data source just a data source without metadata, and no config.yaml / index.html munging?\n. Sorry, by config.yaml munging, I meant how xyz.yaml files are considered metadata for xyz.real_extension files. Which as you point out is a case of the general problem of having files with the same extension. That by itself is enough justification for a static data source.\n. What's the use case for layouts depending on items? The closest I can think of is that during a partial compile, a layout drags in a totally new dependency, and you want that to trigger a recompile of all items that depend on the layout. Otherwise you would imagine just having all dependencies originate from the currently compiling item would solve your issues.\nTo make this concrete: The typical use case for having layouts with dependencies is probably a layout that links to the most recent N blog posts. Presumably there's nothing in the dependency graph that supports \"depend on anything with kind:article\", so you want to make sure that every time the most recent N posts change, everything that depends on that layout gets recompiled.\nThe problem is that such a dependency system is best-effort anyways: if the layout doesn't get triggered during a particular compile, then its dependencies won't update and you won't get correct output. For example, what if the layout is only used on the home page? Then adding a blog post will have no effect, and the home page will get stale.\nThe \"correct\" way to handle this is to remove dependencies from layouts entirely. Then changing the items a layout reads from will never trigger updates, which is certainly more consistent than triggering updates if the layout happens to be used in a partial compile. It's hardly practical though: the 80% use case is a layout that is used for nearly every item, and if every layout is used in every partial compile, then the problem never rears its ugly head (though of course this begs the question, why even bother partially compiling in this case?).\nThe real root problem is that if you let layouts execute arbitrary ruby code, then a layout can depend on arbitrary state. If I call Time.now() from my base layout, should my entire site get regenerated every time I compile?\n. ",
    "goodside": "Awesome, thanks!\n. ",
    "mhlakhani": "I'm getting a much longer and weirder stack trace for now. I've switched to using google-code-prettify and it works fine for me, I guess you can close this issue.\n. ",
    "delwaterman": "Well after some more googling I found that the issue is not with your code but my configuration. From http://groups.google.com/group/nanoc/browse_thread/thread/1959ff74f0d3f1cb?pli=1:\nOn 31 Aug 2010, at 06:09, Bill Burton wrote:\n\n\ndata_sources:\n  -\n    type: filesystem_unified\n    items_root: /\n    layouts_root: /\n    allow_periods_in_identifiers: true\n\nAhh, my mistake. The correct configuration should be this:\ndata_sources:\n    -\n       type: filesystem_unified\n       items_root: /\n       layouts_root: /\n       config:\n         allow_periods_in_identifiers: true\nEach data source can have its own specific configuration (\u201cconfig\u201d) and the \u201callow_periods_in_identifiers: true\u201d should go into >that specific configuration hash. The reason why this specific config hash exists is to allow configuration options for specific data >sources, while preventing namespace clashes. (To be honest, I\u2019m not really sure whether I still find my solution here really pretty >anymore, heh.)\n\nNot sure if you plan to continue down this line, but some more documentation would really help. Thanks. Otherwise you can close this issue.\n. ",
    "shayonj": "i am getting this issue as well on - ruby-1.9.3-p125 and nanoc 3.3.2\n. Sorry for the late reply. I actually fixed it. It looked like 3.3.2 was showing that error, reverting back to 3.3.1 did not. Also I had two versions of gem installed, the one default and the other one with rvm. So that could have been an issue as well.\nThanks though :)\n. well i had both 3.3.1 and 3.3.2 installed but with differnt gem versions (ruby). Sure, I will try that and update you soon.\n. @ddfreyne yes it works fine with 3.3.6. Must be one of my stupid installs :)\n. ",
    "topherfangio": "Thanks for this guys: I was running into the same issue and adding gem 'mime-types' to my Gemfile fixed the issue! I appreciate your work on this!\n. ",
    "ilkerde": "Hi Denis,\nTo be honest, I was thinking by myself to change my custom tasks inclusion anyway. I'm very fine with your proposed solution since it provides what I need as well as keeps config / complexity low on nanoc. No need to change code here, hence closing request.\nThank you.\n. ",
    "mightykip": "Running on a dreamhost server.\n. ",
    "kurige": "Just for my own clarification do you mean:\ndata_sources:\n    -\n      ... other stuff, including layouts_root ...\n      config:\n        encoding: utf-8\nWhere would this be documented?\n. Thanks! :)\n. ",
    "jonforums": "@ddfreyne what do you think is the root issue?\nI'm seeing something similar when using coderay and tables for line numbering. Instead of all code being removed, in my case only a portion of the code snippet removed (always at the end) but what code remains is highlighted.\nI'm debugging but in my case it also appears dependent upon which flavor of markdown filter (:kramdown, :rdiscount, :redcarpet) I'm using and dependent upon the filter :colorize_syntax location in my compile filter/layout sequence\n. C:\\Users\\Jon\\Documents\\WebDev\\jonforums2.github.com>nanoc --version\nnanoc 3.2.4 (c) 2007-2012 Denis Defreyne.\nRunning ruby 1.9.3 (2011-11-08) on i386-mingw32 with RubyGems 1.8.15\nI'll check by passing nowrap=true to coderay and reopen if still having problems.\n. This still causes the issue for me:\ncompile '/posts/*/' do\n  filter :rdiscount\n  filter :colorize_syntax,\n         :coderay => { :line_numbers => :table, :nowrap => true }\n  layout 'post'\n  filter :erubis\n  layout 'default'\n  filter :erubis\nend\nDon't want to hijack this thread if the issues are different...should I open a new issue?\n. Ah yes, that's a lot better.  I think you're telling me I don't yet have a correct compile stack ;)\nI'm also guessing the Jekyll/Liquid {% highlight c linenos %} tag did auto-escaping and I just need to update my Nanoc compile rule to escape before using ColorizeSyntax.  What's the cleanest way to do this?\nThanks!\n. I have two issues with requiring manual escaping of highlighted code snippets: complexity/verbosity and fragility.\nComplexity/Verbosity. Having to manually escape code segments for highlighting can lead to:\n<pre><code class=\"language-c\">\n<% h do %>\n  // C code\n<% end %>\n</code></pre>\nand a compile stack similar to:\ncompile '/posts/*/' do\n  filter :erb\n  filter:colorize_syntax, :coderay => { :line_numbers => :table }\n  ..\nend\nFragility. Because of the following (pulled in by HTMLEscape helper)\nhttps://github.com/ddfreyne/nanoc/blob/master/lib/nanoc/helpers/capturing.rb#L120\nit appears one must use ERB (mentioned in your comments) in the compile stack. When I switch the above compile stack to filter :erubis I get a NameError due to _erbout being an undefined local var.\nThat said, as I'm Noob of the Nanoc Jungle at the moment, I need to play with helpers, preprocessing, and get more familiar with Nanoc to find A Better Way. I'm looking for something (mostly backward compatible) that would allow my Item templates to do something easy like:\n```\nParagraph of (markdown) text\n<% highlight :c do %>\n  // C code\n<% end %>\n```\n\nand nothing special to the compile stack.\nBut I'm way OT for this issue.\nPlease close and if I come up with something clever after getting more experience with the codebase I'll open up a feature request.\nThanks for your help and the very cool Nanoc :)\nJon\n. All looks good testing with this gist with both 3.2.4 and HEAD from master. Onto creating a highlight helper. Thanks again.\n. ",
    "Spooner": "It will still just fail if you don't have a notifier installed, yes, but it won't work any worse than before and will give a more meaningful error message (saying that there isn't a notify installed rather than saying that \"which\" isn't installed). ! I installed http://www.growlforwindows.com/gfw/ and tweaked the code so nanoc would find it, which works fine for me now. I didn't have to do anything odd when starting the watching; just started it in a standard cmd window or via Rubymine and it output fine.\nI did wonder whether using something like http://rubygems.org/gems/ruby-growl might not be a better cross-platform solution though, but didn't want to try to hack that in when I imagine that OS X and Linux are managing quite well and Windows can manage with a simple installation of a couple of files.\n. I have never used it before, but it seems to work correctly and instantly; I was worried that for Windows it would take a long time to notice any change. watch seems a bit unstable, but I think that is more about nanoc itself than the notifier it uses (it sometimes crashes out when it fails to compile).\nIdeally I would be using autocompile rather than watch, but that takes 10x longer to serve every page access than watch does to recompile on each change, so I assume there is something fundamentally broken in there, though I don't know if that is a Windows-specific problem.\n. Hmm, just on a whim I tried this with the nanoc site and it happily recognises that all files are un-changed :(\nI do wonder if the issue is the fact that my site has rather heavy cross-dependency (though that shouldn't make everything be re-compiled without change - just make it all re-compile if there IS a change).\n. Curiouser and curiouser! Tried both sites on Linux and they behaved in the same way (nanoc site recognises not modifier; my site doesn't). My Linux is running in a VM and accessing the projects Windows disk, but since the nanoc site works correctly, it can't be that which is the problem in this case.\n. One uniqueness on my machine is that my output folder is a different branch of my project (the master branch), so it has a .git folder in there. That is there, whether I'm compiling on Windows or Linux.\nRemoving output/ doesn't have any effect; I've tried that before.\nRemoving all caches and output at the same time (output/, tmp/ and .sass-cache/) corrects the error! Sorry, I really thought I'd tried already because I had considered corruption to be the problem. All files are now correctly skipped when there weren't changes. Sorry that I wasted your time in checking it!\n. No, I didn't keep the tmp/ directory; sorry!\nI suspect that the problem might have been caused by attempting to use autocompile/watch and/or compile at the same time, but I haven't a clue really (I was testing all the methods early on to work out which was most efficient - both then and now, watch/view seems to be best).\n. Happened again, even though I was trying hard not to compile in parallel, which is what I thought caused this last time (actually happened a couple of times): http://cl.ly/000U2p0i053c2B320d2T (zip of tmp)\n. I use ansicon (ansi-compatible terminal) on Windows that is quite happy with colour, etc, without needing any Ruby hacks to get that on a regular terminal, and I still get that error shrugs\n. In IRC you suggested \"try modifying the Slim filter included in nanoc, and passing :buffer => '_erbout' when creating an engine\" but I wasn't sure what that meant exactly. I was under the impression that nanoc supported slim out of the box? Should I update  Nanoc?\n. Ah, in filters/slim.rb:\n::Slim::Template.new(:buffer => '_erbout') { content }.render(context) { assigns[:content] }\nThanks!\n. OK, I had to patch filters/slim.rb and helpers/capturing.rb to get this to work correctly.\nRenamed the issue since this is just about capturing in slim, not slim in general.\n. Oops, tried to request pull into wrong branch\n. ",
    "KenMor": "Watch starts flawlessly now -- Thanks! Interestingly, it did -appear- to be double executing as it launched: \"Watcher started; compiling the entire site... INFO: Could not find files for the given pattern(s).\nINFO: Could not find files for the given pattern(s).\" Is the same INFO supposed to be there twice, due to nanoc rules, or is it a problem with my setup?\nI wonder as when I do ^C to end nanoc view it similarly executes twice: \"Terminate batch job (Y/N)? y Terminate batch job (Y/N)? y\". Those extra keystrokes can get annoying!\n. INFO: Could not find files for the given pattern(s).\nINFO: Could not find files for the given pattern(s).\nFrom what I can find out, this is a windows pattern, not nanoc. Some error is happening in the execution cycle, but at least I'm getting results....\nK\n. It works very well. I suspect the warning is from windows 7 as it tries to\ncolorize the cmd line and I haven't installed what it needs. Guess I'll\nhave to figure out what is missing... ...Thanks for looking into this.\nKen\nOn Fri, Jan 13, 2012 at 12:06 PM, Denis Defreyne <\nreply@reply.github.com\n\nwrote:\nIt doesn\u2019t quite make sense that 1) the warning is given twice, 2) the\nwarning is given at all, and 3) \u2303C asks for termination twice.\nApart from that, does the watch command work fine?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ddfreyne/nanoc/issues/82#issuecomment-3485361\n. \n",
    "twome": "I'm now getting this on Win7 x64, on the same directory that was giving no issues before. This is on nanoc-3.4.2, after reinstalling using gem update,  gem uninstall nanoc and gem install nanoc. I tested it on a fresh site directory created with nanoc create-site.  Doesn't happen with compile,  just watch. What other information can I provide?\n. Oops, sorry - I meant the dual  \n\nINFO: Could not find files for the given pattern(s). \n\nI only have to hit  \u2303C / y once.\nDoing --verbose doesn't give any more info.\n. Bizarrely, I can't seem to replicate it. I think 3.6.1 must have cured it(?!). Tried spaces, hyphens, and even using D: instead of C: (where my Ruby install is). I'll try it again on my work machine on Monday and when it's not 2AM, heh.\n. Sorry, we had a public holiday on Monday. \nMy work machine runs the same as my home (3.6.1 on Win7 x64, Ruby 1.9.3). Unfortunately, still getting the message:\n```\nC:>nanoc create-site blah\n\u2190[32m      create\u2190[0m  nanoc.yaml\n\u2190[32m      create\u2190[0m  Rules\n\u2190[32m      create\u2190[0m  content/index.html\n\u2190[32m      create\u2190[0m  content/stylesheet.css\n\u2190[32m      create\u2190[0m  layouts/default.html\nCreated a blank nanoc site at 'blah'. Enjoy!\nC:>cd blah\nC:\\blah>nanoc w\nWatcher started; compiling the entire site... INFO: Could not find files for the given pattern(s).\nINFO: Could not find files for the given pattern(s).\ndone in 0s 609ms\nWatching for changes...\n``\n. They're both on 0.7.3 andgem check` doesn't mention listen.\n. It works! Brilliant, thanks for that.\n. Yep, that works too:\n\nD:\\svns\\nanoctest>nanoc w\nWatcher started; compiling the entire site...\ndone in 1s 291ms\nWatching for changes...\nTerminate batch job (Y/N)? y\nD:\\svns\\nanoctest>\n. Ah, cheers!\n. I'd love this\n. \n",
    "edbrannin": "I'm getting this INFO message, too -- and in my case, I think it might be from vim's swap U& backup files.\nHere's a regular compile:\n```\n[c:\\redacted]nanoc\nLoading site data... done\nCompiling site...\nSite compiled in 0.02s.\n```\nHere's watching:\n[c:\\redacted\\]nanoc watch\nLoading site data... done\nWatcher started; compiling the entire site... INFO: Could not find files for the given pattern(s).\nINFO: Could not find files for the given pattern(s).\ndone in 0s 344ms\nWatching for changes...\nThen I saved my document in vim:\nChange detected to content/.redacted.markdown.un~; recompiling... INFO: Could not find files for the given p\nattern(s).\nINFO: Could not find files for the given pattern(s).\ndone in 0s 258ms\n. ",
    "DaveEveritt": "Great! Happy again and now building my first nanoc site...\n. Thanks - I should have guessed. Will look into pow, but recommend an edit to the tutorial mentioning ctr-c (or starting the server in a separate terminal window), and suggesting pow? BTW loving nanoc :-)\n. \"I\u2019m not sure why it should be mentioned explicitly\" - because some people are doing this for the first time (or, like me, have a lapse of memory from immersion in other technologies). Simple things developers take for granted from familiarity can become roadblocks for newcomers (I also work in education :-)\n. @dutygeeks thanks for the pow tip.\n@ddfreyne understood. I ended up slimming down the first part of the tut - like the original but for dummies :-)\n. 1.8.6 (I should really upgrade) - suspected as much about it being a Kramdown issue. Have mailed the author - seems to be a problem with OS X's Ruby 1.8.6.\n. For anyone else facing this, I got a solution from Kramdown author Thomas Leitner: \"The problem causing the stack trace seems to be easy to fix since the same issue was reported for RedHat Linux and Ruby 1.8.5 some time ago (see lib/kramdown/compatibility.rb and change == '1.8.5' to <= '1.8.6'). Will do this for the next release.\"\nDid this (in my setup: /usr/local/lib/ruby/gems/1.8/gems/kramdown-0.13.4/lib/kramdown/compatibility.rb) and kramdown now working. So simple.\n. As a regular user, I'd just be happy with a clear warning.\n. You may run into other issues running nanoc on Ruby 1.8.7 as (I'm pretty sure) 1.9 is a min req for some features.\n. The typographic quotes are all in safe places: in comments, and in HTML text content which UTF-8 handles fine (now pretty much the industry standard). Should be no need for HTML char codes IMHO.\n. I wouldn't want my system-specific dotfiles to be in the same category as my .htaccess files - I need the latter but not the former.\n. I'm for an array of dotfiles as a future-proof solution.\n. Basic problem with dotfiles is that while no-one wants .DS_Store files, many will want at least .htaccess and others, so a Boolean is too coarse-grained. Perhaps include dot files without the prefix in the content folder, but specify which filenames to which nanoc should add a dot prefix on compilation, in Rules or in config?\n. Nice consolidation - looks good to me concerning the issues I've followed (dotfiles, drop Ruby 1.8.* support).\n. I don't see a problem on the website just pointing users to the last compatible nanoc versions for either Ruby 1.8 or 1.9 (does nanoc check Ruby -v?). After all, older versions of nanoc are fine :-)\n. Just my opinion: I think it's great for the community to share dev setups, and although it's not really the job of nanoc to suggest any particular solution, it would be good to have a 'place' to share them (nanoc website?). Also, Vagrant has a VM requirement, which many users won't need.\n. \ud83d\udc4d . ",
    "dutygeeks": "stop command is control C and if you have same probrem you should check\n$ sudo netstat -lpn |grep :3000 then kill -9 (port_num).\nand i recommend you to use pow instead adsf.\n. @DaveEveritt \nconfig.yml has output option. change into output to public, then install pow and create symbolic link your project. So you can simply run server without terminal command nanoc view. (without config.ru)\n@ddfreyne \nHi Dennis, I love adsf too. I have several projects nanoc or sinatra whatever, so I can check my site easier than any rack apps.\nSorry my bad English.\n. ",
    "rkoch": "I know this issue was closed some time ago but we ran into this problem today on a Windows 7 machine running cygwin. - It is correct that in Windows the ^C command is also to stop the nanoc view process, right?\nWe ended up killing the ruby process via Task Manager but this is no solution.\n. Aye!\nIn the meantime (for anyone who comes across this issue, trying to find a solution) we created an alias in our .bashrc-File to simplify the relaunch of nanoc view:\nsh\nalias nv='/bin/kill.exe -f ` ps -W aux | grep ruby | grep -v grep | awk '\\''{print $1}'\\''`;nanoc.bat view'\nThis requires that only one ruby process is started and nanoc is in the $PATH.\n. @ddfreyne No this did not work. Or should we have compiled this in any way? We just edited the source and tested it.\nMaybe the crash log helps:\n``` log\nCrashlog created at 2012-06-25 07:36:15 +0100\n=== MESSAGE:\nErrno::EADDRINUSE: Normalerweise darf jede Socketadresse (Protokoll, Netzwerkadresse oder Anschluss) nur jeweils einmal verwendet werden. (In english: Address already in use) - bind(2)\n=== COMPILATION STACK:\n(empty)\n=== BACKTRACE:\n\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/utils.rb:85:in `initialize'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/utils.rb:85:in `new'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/utils.rb:85:in `block in create_listeners'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/utils.rb:82:in `each'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/utils.rb:82:in `create_listeners'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/server.rb:82:in `listen'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/server.rb:70:in `initialize'\nI:/Tools/Ruby193/lib/ruby/1.9.1/webrick/httpserver.rb:45:in `initialize'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/rack-1.4.1/lib/rack/handler/webrick.rb:10:in `new'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/rack-1.4.1/lib/rack/handler/webrick.rb:10:in `run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/commands/view.rb:56:in `run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/command_runner.rb:14:in `block in call'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/error_handler.rb:63:in `handle_while'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/error_handler.rb:26:in `handle_while'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/command_runner.rb:13:in `call'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib/cri/command_dsl.rb:185:in `block in runner'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib/cri/command.rb:296:in `call'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib/cri/command.rb:296:in `run_this'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib/cri/command.rb:249:in `run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib/cri/command.rb:262:in `run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli.rb:47:in `block in run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/error_handler.rb:63:in `handle_while'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli/error_handler.rb:26:in `handle_while'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib/nanoc/cli.rb:44:in `run'\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/bin/nanoc:19:in `'\nI:/Tools/Ruby193/bin/nanoc:23:in `load'\nI:/Tools/Ruby193/bin/nanoc:23:in `'\n\n=== VERSION INFORMATION:\nnanoc 3.4.0 \u00c2\u00a9 2007-2012 Denis Defreyne.\nRunning ruby 1.9.3 (2012-04-20) on i386-mingw32 with RubyGems 1.8.23.\n=== INSTALLED GEMS:\nactionmailer 3.2.6\n  actionpack 3.2.6\n  activemodel 3.2.6\n  activerecord 3.2.6\n  activeresource 3.2.6\n  activesupport 3.2.6\n  adsf 1.1.1\n  arel 3.0.2\n  bigdecimal 1.1.0\n  builder 3.0.0\n  bundler 1.1.4\n  colored 1.2\n  cri 2.3.0\n  erubis 2.7.0\n  hike 1.2.1\n  i18n 0.6.0\n  io-console 0.3\n  journey 1.0.4\n  json 1.5.4\n  kramdown 0.13.7\n  mail 2.4.4\n  mime-types 1.18\n  minitest 2.5.1\n  multi_json 1.3.6\n  nanoc 3.4.0\n  nanoc-filesystem-i18n 0.2.0\n  polyglot 0.3.3\n  rack 1.4.1\n  rack-cache 1.2\n  rack-ssl 1.3.2\n  rack-test 0.6.1\n  rails 3.2.6\n  railties 3.2.6\n  rake 0.9.2.2\n  rdoc 3.9.4\n  sprockets 2.1.3\n  thor 0.15.2\n  tilt 1.3.3\n  treetop 1.4.10\n  tzinfo 0.3.33\n  win32console 1.3.2\n=== ENVIRONMENT:\nALLUSERSPROFILE => \"C:\\ProgramData\"\nAPPDATA => \"C:\\Users\\fge\\AppData\\Roaming\"\nCOMMONPROGRAMFILES => \"C:\\Program Files (x86)\\Common Files\"\nCOMPUTERNAME => \"OBJENG26\"\nCOMSPEC => \"C:\\Windows\\system32\\cmd.exe\"\nCommonProgramFiles(x86) => \"C:\\Program Files (x86)\\Common Files\"\nCommonProgramW6432 => \"C:\\Program Files\\Common Files\"\nFPPUILang => \"en-US\"\nFP_NO_HOST_CHECK => \"NO\"\nHOME => \"I:\\Tools\\Cygwin\\home\\fge\"\nHOMEDRIVE => \"C:\"\nHOMEPATH => \"\\Users\\fge\"\nHOSTNAME => \"objeng26\"\nINFOPATH => \"/usr/local/info:/usr/share/info:/usr/info:\"\nJAVA_HOME => \"%JAVA_HOME%\\bin\"\nLANG => \"de_DE.UTF-8\"\nLOCALAPPDATA => \"C:\\Users\\fge\\AppData\\Local\"\nLOGONSERVER => \"\\\\OBJENG26\"\nMANPATH => \"/usr/local/man:/usr/share/man:/usr/man:\"\nNUMBER_OF_PROCESSORS => \"4\"\nOLDPWD => \"/home/fge\"\nOOBEUILang => \"de-DE\"\nOS => \"Windows_NT\"\nOnlineServices => \"Online Services\"\nPATH => \"I:\\Tools\\Cygwin\\usr\\local\\bin;I:\\Tools\\Cygwin\\bin;C:\\Program Files (x86)\\HP SimplePass 2011\\x64;C:\\Program Files (x86)\\HP SimplePass 2011;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Program Files\\Intel\\DMIX;C:\\Program Files (x86)\\Intel\\Services\\IPT;C:\\Program Files\\Java\\jre6\\bin;I:\\Tools\\Git\\cmd;I:\\Tools\\Ruby193\\bin\"\nPATHEXT => \".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\"\nPRINTER => \"HP Universal Printing PCL 6 (v5.4)\"\nPROCESSOR_ARCHITECTURE => \"x86\"\nPROCESSOR_ARCHITEW6432 => \"AMD64\"\nPROCESSOR_IDENTIFIER => \"Intel64 Family 6 Model 42 Stepping 7, GenuineIntel\"\nPROCESSOR_LEVEL => \"6\"\nPROCESSOR_REVISION => \"2a07\"\nPROGRAMFILES => \"C:\\Program Files (x86)\"\nPROMPT => \"$P$G\"\nPS1 => \"\\[\\e]0;\\w\\a\\]\\n\\[\\e[32m\\]\\u@\\h \\[\\e[33m\\]\\w\\[\\e[0m\\]\\n\\$ \"\nPSModulePath => \"C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\\"\nPUBLIC => \"C:\\Users\\Public\"\nPWD => \"/home/fge/objeng.ch\"\nPlatform => \"BPC\"\nProgramData => \"C:\\ProgramData\"\nProgramFiles(x86) => \"C:\\Program Files (x86)\"\nProgramW6432 => \"C:\\Program Files\"\nSESSIONNAME => \"Console\"\nSHELL => \"/bin/bash\"\nSHLVL => \"1\"\nSSH_AGENT_PID => \"3620\"\nSSH_AUTH_SOCK => \"/tmp/ssh-HpoSld5128/agent.5128\"\nSYSTEMDRIVE => \"C:\"\nSYSTEMROOT => \"C:\\Windows\"\nTEMP => \"I:\\Tools\\Cygwin\\tmp\"\nTERM => \"xterm\"\nTMP => \"I:\\Tools\\Cygwin\\tmp\"\nTZ => \"Europe/Zurich\"\nUSER => \"fge\"\nUSERDOMAIN => \"objeng26\"\nUSERNAME => \"fge\"\nUSERPROFILE => \"C:\\Users\\fge\"\nWINDIR => \"C:\\Windows\"\n_ => \"/cygdrive/i/Tools/Ruby193/bin/nanoc.bat\"\ntemp => \"C:\\Users\\fge\\AppData\\Local\\Temp\"\ntmp => \"C:\\Users\\fge\\AppData\\Local\\Temp\"\nwindows_tracing_flags => \"3\"\nwindows_tracing_logfile => \"C:\\BVTBin\\Tests\\installpackage\\csilogfile.log\"\n=== $LOAD_PATH:\n\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/colored-1.2/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/cri-2.3.0/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/nanoc-3.4.0/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/bundler-1.1.4/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/rack-1.4.1/lib\nI:/Tools/Ruby193/lib/ruby/gems/1.9.1/gems/adsf-1.1.1/lib\nI:/Tools/Ruby193/lib/ruby/site_ruby/1.9.1\nI:/Tools/Ruby193/lib/ruby/site_ruby/1.9.1/i386-msvcrt\nI:/Tools/Ruby193/lib/ruby/site_ruby\nI:/Tools/Ruby193/lib/ruby/vendor_ruby/1.9.1\nI:/Tools/Ruby193/lib/ruby/vendor_ruby/1.9.1/i386-msvcrt\nI:/Tools/Ruby193/lib/ruby/vendor_ruby\nI:/Tools/Ruby193/lib/ruby/1.9.1\nI:/Tools/Ruby193/lib/ruby/1.9.1/i386-mingw32\n``\n. @ddfreyne We tested it again and it still does not work. I noticed, that we need to start it withnanoc.bat viewbecause if we start it throughnanoc view` the following console output occures:\n\n``` sh\n\nnanoc view\nI:\\Tools\\Ruby193\\bin\\ruby.exe: No such file or directory -- /cygdrive/i/Tools/Ruby193/bin/nanoc (LoadError)\n```\n\nI see that there is a mix of Windows and Cygwin paths. Could this be the cause?\n. @ddfreyne No it was generated by gems while installing nanoc\nbat\n@ECHO OFF\nIF NOT \"%~f0\" == \"~f0\" GOTO :WinNT\n@\"ruby.exe\" \"I:/Tools/Ruby193/bin/nanoc\" %1 %2 %3 %4 %5 %6 %7 %8 %9\nGOTO :EOF\n:WinNT\n@\"ruby.exe\" \"%~dpn0\" %*\n. @ddfreyne So I tried running nanoc.bat view and quit it with ^C but nanoc view did not exit - but the batch file did exit, leaving the Ruby process as it is, so if I try to run nanoc.bat viewagain this causes the Errno::EADDRINUSE.\nI think this is no problem of nanoc because Cygwin or CMD kill the batch process itself but they don't actually kill the Ruby process (nanoc view) that was started in this batch file. So I don't think we can fix this easily, as the keyboard input ^C would not \"reach\" the nanoc view-process.\n. @ddfreyne Yes the effect is the same. I watched my processes while testing that and like I guessed ^C just kills the bash.exe process.\n. This is a bit odd.\n- Wenn I'm running cmd.exe and start nanoc.bat view (for example) the ^C will kill Ruby.\n- When I'm running cmd.exe and start bash.exe manually ^C won't even cause anything! It is just ignored. The same applies to running bash.exe or sh.exe directly.\n- Cygwin starts a program called mintty.exe and runs bash.exe or sh.exe and this will cause ^C not to kill Ruby.\n- I tried this again trough the Git Bash terminal and ^C will kill Ruby. The command that gets executed on starting Git Bash is:\n  C:\\Windows\\SysWOW64\\cmd.exe /c \"\"I:\\Tools\\Git\\bin\\sh.exe\" --login -i\"\n  So I think this applies to the first case.\nThis looks more like an issue with mintty.exe.\n. Alright, thank you for your efforts!\nAs I already posted in a previous comment, when using cygwin, I created a alias to kill nanoc before restarting it:\nsh\nalias nv='/bin/kill.exe -f ` ps -W aux | grep ruby | grep -v grep | awk '\\''{print $1}'\\''`;nanoc.bat view'\nor better yet, just use nanoc.bat view within cmd.exe or nanoc view within Git Bash\n. ",
    "aalpern": "Fair enough! As someone who wants stuff to just work, I got frustrated with libraries making breaking changes :). A warning's a good way to go too. \n. ",
    "dkniffin": "I hate to bring up an old issue, but it seems this was never actually fixed. The change was made to the test code, but it's still wrong here\n. ah ok. I just created a ruby function that does this:\ndef title(item)\n  item[:title] || item.identifier.chop.split('/').last.split('_').map{|w|w.capitalize}.join(' ')\nend\nI think that will suit my needs. Thanks!\n. @bobthecow why? :-1: \n. Well, I'm not quite sure what I want. I have an existing repository of documentation, in various formats, including markdown, binary, scripts, and txts. Mixed in, there are some links that point to scripts.\nSince nanoc doesn't support files with multiple extensions, I'm thinking I might just create a rake task to remove these symlinks.\n-------- Original Message --------\nFrom: Denis Defreyne notifications@github.com\nSent: February 3, 2015 4:10:31 PM MST\nTo: nanoc/nanoc nanoc@noreply.github.com\nCc: Derek Kniffin derek.kniffin@Colorado.EDU\nSubject: Re: [nanoc] RuntimeError: Found 2 content files (#529)\n@oddityoverseer13 It might be wrong, but it seems like what you\u2019re trying to do, is to ensure that the output has both \u2026/bin/push and \u2026/bin/push.rb files (same for ace). Is this correct?\nIn that case, I\u2019d remove the symlinks and set up redirects on the server to redirect push to push.rb (same for ace).\n\u2014\nReply to this email directly or view it on GitHub. \n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. ",
    "sorin-ionescu": "Either :yield or :content is fine, whatever makes more sense for nanoc. :yield is more common in other frameworks.\n. I'm having trouble getting Mustache and Handlebars pages to work getting NoMethodError: undefined methodattributes' for nil:NilClass`. I have a YAML front matter with a title in the items.\n. ",
    "herdima-de": "Here it is. \nLine 37 is \"item.identifier.chop + '.' + item[:extension]\".\nI did not change the file in a long time. \nI think it is unchanged except for \"filter:kramdown\".\nThere are strange characters in the comments.\nI tried latin1 and utf-8 but none seems to fit.\nMight characters in comment confuse nanoc?\nI am not sure how these characters came in.\nI am sitting in my office right now, at a windows box,\nchecking with TortoiseSVN / \"Show log\", \nI see no changes in the Rules file et all.\nThank you for helping!\n\n!/usr/bin/env ruby\nA few helpful tips about the Rules file:\n\n* The string given to #compile and #route are matching patterns for\nidentifiers--not for paths. Therefore, you can\u00e2\u20ac\u2122t match on extension.\n\n* The order of rules is important: for each item, only the first matching\nrule is applied.\n\n* Item identifiers start and end with a slash (e.g. \u00e2\u20ac\u0153/about/\u00e2\u20ac\u009d for the file\n\u00e2\u20ac\u0153content/about.html\u00e2\u20ac\u009d). To select all children, grandchildren, \u00e2\u20ac\u00a6 of an\nitem, use the pattern \u00e2\u20ac\u0153/about/_/\u00e2\u20ac\u009d; \u00e2\u20ac\u0153/about/_\u00e2\u20ac\u009d will also select the parent,\nbecause \u00e2\u20ac\u0153*\u00e2\u20ac\u009d matches zero or more characters.\ncompile '/stylesheet/' do\n  # don\u00e2\u20ac\u2122t filter or layout\nend\ncompile '*' do\n  if item.binary?\n    # don\u00e2\u20ac\u2122t filter binary items\n  else\n    filter :erb\n    filter :kramdown\n    layout 'default'\n  end\nend\nroute '/stylesheet/' do\n  '/style.css'\nend\nroute '*' do\n  if item.binary?\n    # Write item with identifier /foo/ to /foo.ext\n    item.identifier.chop + '.' + item[:extension]\n  else\n    # Write item with identifier /foo/ to /foo/index.html\n    item.identifier + 'index.html'\n  end\nend\nlayout '*', :erb\n(What is the best way to include code here verbatim - without getting formatted?)\n. Sorry. I am new to github. Issue is not fixed.\nI checked for file names on some mirror of my sources. \nAll files seem to have a dot with characters before and after the dot.\nHowever, on the machine where I run nanoc, \nthere might be unversioned files without extension.\nI will have to check this either in the late afternoon or possibly around midnight.\nYou will get a note on the findings.\nThank you for the quick analysis!\n. The error was caused by a temporary file which had no extension.\n'nanoc compile' worked fine after the file was deleted.\nThank you for pointing this out!\n. ",
    "justinclift": "Just to mention, this \"can't handle extension\" just bit us too.\nSeems a bit um... non-optimal to just plain break on \"README\" files (no extension).\nTrying out nanoc now, with existing code base, and pretty \"ugh\" so far. :(\n. Yeah, that'd help for us. :)\n. ",
    "jingoro": "No worries. That test was failing for me so when I changed it to the www version it worked for me.\n. ",
    "mconigliaro": "There's an example of setting up a ~/.fog file here:\nhttp://docs.puppetlabs.com/guides/cloud_pack_getting_started.html\nI still haven't found any official documentation on this though.\n. ",
    "bouchard": "Hey Denis,\nAll my posts, including that one have an extension of .markdown... I actually went and did a git bisect again with no changes to my code at all (not even content) and am getting the same error, so I guess the snapshot was getting created all right before that commit, and now it's not - any insight would be appreciated!\n. https://github.com/brady8/nanoc_test\nCheck the Gemfile :) The bug is still there.\n. Fixed, thanks!\n. ",
    "plessl": "Hi Denis\nThe Rules file is here: https://gist.github.com/2049045\nMaybe I should elaborate on what I'm trying to achieve.\nI'm working on the automated generation of publication lists from a bibliography in BibTeX format. The website with the publication list shall allow for downloading the PDF and the BibTeX entry for each publication. So far, I extract the BibTeX entry for each publication from the BibTeX file containing all publications and copy it to /contents/publications. This step bothers me because it violates the DRY principle.\nInstead of splitting the BibTeX file into entry and copying these entries to /contents/publications/entry_xyz.bib in a preprocessing step, I thought it would be more elegant to generate these files only as an in-memory representation. That way I also don't have to deal with obsolete file in /contents/publications/... \nSo far I didn't find the best way to instruct nanoc to create such item and to store them in /output/publications/entry_xyz.bib. I asked on the mailing list for the best way to do this and it was recommended that I generate the items as binary items (see https://groups.google.com/d/msg/nanoc/eSIv81uFVek/JyInNVi8aBgJ).\nCheers,\n Christian\n. I have solved the issue using the workaround described in my email to the mailing list (https://groups.google.com/d/msg/nanoc/eSIv81uFVek/JyInNVi8aBgJ).\nThe problem is that Nanoc3::Item.new() does currently not support binary items that are only available in-memory but requires that binary items are stored in files. I suggest to document this requirement in the online documentation. Maybe this could be changed in a future version of nanoc though I'm not sure about the implications.\n. ",
    "fread2281": "== yield by itself works\n. ",
    "smgt": "I've been running 1.9 for a while but the fix if for everyone else at the office running OSX with 1.8.7. For the moment I fixed it in our code.\nI agree that this fix is ugly as hell it's just that if you require 1.9 you will make life a little harder for all OSX people running 1.8. If I were you I would live with this ugly ass hack and if your 1.8.7 patch goes into stdlib or a new version of OSX with 1.9 comes out remove the hack. I would feel it is a little more OK when the patch is in a helper and not in the core.\n. Nice! Sorry I haven't answered, been on vacation. And I do think that patching Ruby is a better solution! Thanks for the fix.\n. ",
    "jimjimovich": "Yeah, that'd be great. Like I said, I'm sure there's a better way to do it :)\n. ",
    "gizmomogwai": "wow .. thanks for the quick fix ... that's almost the same, as what i put in my local copy, because i did not know which error handling strategy nanoc has .. \nthanks by the way for this wonderful tool!\n. ",
    "Jookia": "Eh, is there another way to get filenames then? Right now I'm using identifiers.\nConfiguration options are good, but having it larger..\n. Yes. >>\n. Yes. >>\n. ",
    "KuraFire": "Hey Denis,\nIt seems adding the UTF-8 prefix to the lib/ files fixed it. Guess we were adding it in the wrong place :)\nThanks a bunch!\n. ",
    "paulmillr": "yep, nope.\n. oh. it works. Thank you!\n. ",
    "thilko": "I got the same error message. Only happens in a directory with a Gemfile.\n. Nanoc was not in my Gemfile. Thx!\n. Yeah, you\u00b4re right. kramdown.rb was corrupt, reinstalling fixed this issue. Thx!\n. ",
    "silvenon": "This happens to me now when I simply run nanoc --help or any other nanoc commands. Not sure what could be the problem. I'm running the latest version of nanoc.\n. No, I don't have a Gemfile, I'm in an empty folder, I didn't even start my project. So nanoc commands now can't be run without a bundle exec or something similar?\n. I tried, the same thing happens. :panda_face:\nProbably something got corrupt, I'll try to tinker with it more later.\n. I'm not sure, I think I am because I uninstalled nanoc executable when I uninstalled nanoc. I'm using rbenv for managing Ruby versions, if that's of any help.\nYes, gem install nanoc installs cri.\n. ``` sh\n$ which nanoc\n/Users/matija/.rbenv/shims/nanoc\n$ gem uninstall nanoc\nRemove executables:\nnanoc\n\nin addition to the gem? [Yn]  Y\n$ which nanoc\n/Users/matija/.rbenv/shims/nanoc\n$ nanoc --help\nrbenv: nanoc: command not found\n\nThe `nanoc' command exists in these Ruby versions:\n1.9.3-p194\n```\nI'm not sure what you mean by what is my $PATH like, but this from my .bash_profile concerning rbenv:\nsh\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\n. I never tried chruby, but I never had problems with rbenv, I like it so far :)\n``` sh\n!/usr/bin/env bash\nset -e\n[ -n \"$RBENV_DEBUG\" ] && set -x\nprogram=\"${0##/}\"\nif [ \"$program\" = \"ruby\" ]; then\n  for arg; do\n    case \"$arg\" in\n    -e | -- ) break ;;\n    / )\n      if [ -f \"$arg\" ]; then\n        export RBENV_DIR=\"${arg%/*}\"\n        break\n      fi\n      ;;\n    esac\n  done\nfi\nexport RBENV_ROOT=\"/Users/matija/.rbenv\"\nexec \"/usr/local/Cellar/rbenv/0.4.0/libexec/rbenv\" exec \"$program\" \"$@\"\n```\n. Yes. I tried one last time and it worked! Not sure what I did wrong before... When I installed nanoc before, the output was different somehow.\nAnyway, thanks for your help :)\n. I realised what the problem was. I was in a subdirectory from a directory with a Gemfile, so nanoc detected that Gemfile which didn't have gem \"nanoc\".\n. How do you manage Ruby versions? rbenv, RVM or something else?\n. I'm not in the nanoc team, but please use code tags for code instead of heading tags in the future, your error reports are barely readable. More info about GitHub Flavored Markdown here.\n. Yeah, leaving them as they are doesn't really seem like a matter of principle, laziness maybe :P I don't think @ddfreyne will mind a pull request :)\n. Yes, a wishlist would be nice :)\n. It is in the prune section :) I used the nanoc.yaml file generated by nanoc create-site and just switched false to true and it doesn't work. Does it work for you?\n. Oh, yeah, that works for me too. I thought auto_prune removes files e.g. when I save a file and guard-nanoc recompiles the site :)\n. Yay :) I mean, noooo... :D\n. Yes, it's ok with me. If this works, then great, I believe you :D\n. ",
    "luckypoem": "hi.denis:\nit's really a headache for me.the error:\"cannot load such file -- cri\" always can't be fixed.WAHT TO DO??\nas3:~# gem uninstall nanoc\nRemove executables:\n        nanoc\nin addition to the gem? [Yn]  y\nRemoving nanoc\nSuccessfully uninstalled nanoc-3.6.5\nas3:~# gem uninstall cri\nSuccessfully uninstalled cri-2.4.0\nas3:~# bundle install\nUsing rake (10.0.4)\nUsing sass (3.2.10)\nUsing bootstrap-sass (2.3.2.2)\nUsing chunky_png (1.2.8)\nUsing fssm (0.2.10)\nUsing compass (0.12.2)\nUsing compass-960-plugin (0.10.4)\nUsing git (1.2.6)\nUsing tilt (1.4.1)\nUsing haml (4.0.3)\nUsing rb-fsevent (0.9.3)\nUsing ffi (1.9.0)\nUsing rb-inotify (0.9.1)\nUsing rb-kqueue (0.2.0)\nUsing listen (1.2.3)\nUsing nokogiri (1.5.10)\nUsing rack (1.5.2)\nUsing mime-types (1.23)\nUsing rest-client (1.6.7)\nUsing ruby-s3cmd (0.1.5)\nUsing zurb-foundation (4.3.2)\nUsing awestruct (0.5.3)\nUsing bundler (1.3.5)\nYour bundle is complete!\nUse bundle show [gemname] to see where a bundled gem is installed.\nas3:~# gem install nanoc\nFetching: cri-2.4.0.gem (100%)\nSuccessfully installed cri-2.4.0\nFetching: nanoc-3.6.5.gem (100%)\nSuccessfully installed nanoc-3.6.5\nParsing documentation for cri-2.4.0\nInstalling ri documentation for cri-2.4.0\nParsing documentation for nanoc-3.6.5\nInstalling ri documentation for nanoc-3.6.5\n2 gems installed\nas3:~# nanoc --version\ncannot load such file -- cri\nIf you are using a Gemfile, make sure that the Gemfile contains nanoc ('gem \"nanoc\"').\nas3:~#\n. hi.\ngemfile is as follows:\nas3:~/nanoc# cat Gemfile\nsource \"http://rubygems.org\"\ngemspec\ngem 'adsf'\ngem 'bluecloth'\ngem 'builder'\ngem 'coderay'\ngem 'coffee-script'\ngem 'coveralls', :require => false\ngem 'erubis'\ngem 'fog'\ngem 'haml'\ngem 'handlebars'\ngem 'kramdown'\ngem 'less', '~> 2.0'\ngem 'listen'\ngem 'markaby'\ngem 'maruku'\ngem 'mime-types'\ngem 'mustache'\ngem 'nanoc'\ngem 'nokogiri', '~> 1.5.5'\ngem 'pandoc-ruby'\ngem 'pry'\ngem 'pygments.rb'\ngem 'rack'\ngem 'rake'\ngem 'rainpress'\ngem 'rdiscount'\ngem 'rdoc'\ngem 'redcarpet'\ngem 'RedCloth'\ngem 'rubypants'\ngem 'sass', '~> 3.2.2'\ngem 'slim'\ngem 'systemu'\ngem 'typogruby'\ngem 'uglifier'\ngem 'w3c_validators'\ngem 'yuicompressor'\nGemfile.lock is as follows:\nas3:~/nanoc# cat Gemfile.lock\nPATH\n  remote: .\n  specs:\n    nanoc (3.6.5)\n      cri (~> 2.3)\nGEM\n  remote: http://rubygems.org/\n  specs:\n    RedCloth (4.2.9)\n    adsf (1.1.1)\n      rack (>= 1.0.0)\n    bluecloth (2.2.0)\n    builder (3.2.2)\n    coderay (1.0.9)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.6.3)\n    colored (1.2)\n    commonjs (0.2.6)\n    cri (2.4.0)\n      colored (>= 1.2)\n    erubis (2.7.0)\n    excon (0.25.3)\n    execjs (2.0.1)\n    ffi (1.9.0)\n    fog (1.15.0)\n      builder\n      excon (~> 0.25.0)\n      formatador (~> 0.2.0)\n      mime-types\n      multi_json (~> 1.0)\n      net-scp (~> 1.1)\n      net-ssh (>= 2.1.3)\n      nokogiri (~> 1.5)\n      ruby-hmac\n    formatador (0.2.4)\n    haml (4.0.3)\n      tilt\n    handlebars (0.4.0)\n      commonjs (~> 0.2.3)\n      therubyracer (~> 0.11.1)\n    json (1.8.0)\n    kramdown (1.2.0)\n    less (2.3.3)\n      commonjs (~> 0.2.6)\n    libv8 (3.11.8.17)\n    listen (1.3.0)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n      rb-kqueue (>= 0.2)\n    markaby (0.7.2)\n      builder (>= 2.0.0)\n    maruku (0.6.1)\n      syntax (>= 1.0.0)\n    metaclass (0.0.1)\n    method_source (0.8.2)\n    mime-types (1.25)\n    minitest (4.7.5)\n    mocha (0.14.0)\n      metaclass (~> 0.0.1)\n    multi_json (1.7.9)\n    mustache (0.99.4)\n    net-scp (1.1.2)\n      net-ssh (>= 2.6.5)\n    net-ssh (2.6.8)\n    nokogiri (1.5.10)\n    pandoc-ruby (0.7.5)\n    posix-spawn (0.3.6)\n    pry (0.9.12.2)\n      coderay (~> 1.0.5)\n      method_source (~> 0.8)\n      slop (~> 3.4)\n    pygments.rb (0.5.2)\n      posix-spawn (~> 0.3.6)\n      yajl-ruby (~> 1.1.0)\n    rack (1.5.2)\n    rainpress (1.0)\n    rake (10.1.0)\n    rb-fsevent (0.9.3)\n    rb-inotify (0.9.1)\n      ffi (>= 0.5.0)\n    rb-kqueue (0.2.0)\n      ffi (>= 0.5.0)\n    rdiscount (2.1.6)\n    rdoc (4.0.1)\n      json (~> 1.4)\n    redcarpet (3.0.0)\n    ref (1.0.5)\n    ruby-hmac (0.4.0)\n    rubypants (0.2.0)\n    sass (3.2.10)\n    slim (2.0.1)\n      temple (~> 0.6.6)\n      tilt (>= 1.3.3, < 2.1)\n    slop (3.4.6)\n    syntax (1.0.0)\n    systemu (2.5.2)\n    temple (0.6.6)\n    therubyracer (0.11.4)\n      libv8 (~> 3.11.8.12)\n      ref\n    tilt (1.4.1)\n    typogruby (1.0.16)\n      rubypants\n    uglifier (2.2.1)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\n    w3c_validators (1.2)\n      json\n      nokogiri\n    yajl-ruby (1.1.0)\n    yard (0.8.7)\n    yuicompressor (1.2.1)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  RedCloth\n  adsf\n  bluecloth\n  builder\n  coderay\n  coffee-script\n  erubis\n  fog\n  haml\n  handlebars\n  kramdown\n  less (~> 2.0)\n  listen\n  markaby\n  maruku\n  mime-types\n  minitest (~> 4.0)\n  mocha\n  mustache\n  nanoc!\n  nokogiri (~> 1.5.5)\n  pandoc-ruby\n  pry\n  pygments.rb\n  rack\n  rainpress\n  rake\n  rdiscount\n  rdoc\n  redcarpet\n  rubypants\n  sass (~> 3.2.2)\n  slim\n  systemu\n  typogruby\n  uglifier\n  w3c_validators\n  yard\nyuicompressor\n\"bundle exec nanoc\" doesn't work for me:\nas3:~# bundle exec nanoc\n/usr/local/ruby/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/rubygems_integration.rb:214:in block in replace_gem': nanoc is not part of the bundle. Add it to Gemfile. (Gem::LoadError)\n        from /usr/sbin/nanoc:22:in'\nas3:~#\n. hi.\nhow to  add nanoc to the Gemfile?\nu can see there is (gem 'nanoc') in the gemfile above.\n. hi. silvenon:\ni compiled ruby.\n. hi.denis:\ni uninstalled nanoc by \"gem uninstall nanoc\",then\ngem install cri\ngit clone git://github.com/nanoc/nanoc.git\ncd nanoc\ngem build nanoc.gemspec\ngem install nanoc-*.gem\nas3:~/nanoc# ls\nbin              doc      Gemfile.lock  nanoc.gemspec  README.md\nChangeLog        false    lib           NEWS.md        tasks\nCONTRIBUTING.md  Gemfile  LICENSE       Rakefile       test\nas3:~/nanoc# cd bin\nas3:~/nanoc/bin# ls\nnanoc \nas3:~/nanoc/bin# ~/nanoc/bin/nanoc --version \nnanoc 3.7.0 \u00a9 2007-2013 Denis Defreyne.\nRunning ruby 2.0.0 (2013-05-14) on i686-linux with RubyGems 2.0.2. (this indicates nanoc installed successfully\uff09\nand i installed the site\uff1ahttp://as3.brite.biz:3000/\uff0cbut \n1.how to publish a post?:\n2.although i published a about page: http://as3.brite.biz:3000/about/,but the link http://as3.brite.biz:3000/about/ doesn't appear in the homepage,how to make it automatically appear in the homepage??\n. ",
    "Infonamgithup": "hi @ddfreyne, i write test-automation by cucumber and appium and i have same issue.\nVuNguyens-MacBook-Pro:test thiennguyen$ cucumber --tags @add_contact_by_phone\ncannot load such file -- markaby (LoadError)\n/Users/thiennguyen/appium-test/cucumber-appium/Humin/test/features/support/lib/Log_HTML.rb:1:in require'\n/Users/thiennguyen/appium-test/cucumber-appium/Humin/test/features/support/lib/Log_HTML.rb:1:in'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/rb_support/rb_language.rb:122:in load'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/rb_support/rb_language.rb:122:inload_code_file'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime/support_code.rb:180:in load_file'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime/support_code.rb:83:inblock in load_files!'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime/support_code.rb:82:in each'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime/support_code.rb:82:inload_files!'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime.rb:184:in load_step_definitions'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/runtime.rb:42:inrun!'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/lib/cucumber/cli/main.rb:47:in execute!'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/gems/cucumber-1.3.10/bin/cucumber:13:in'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/bin/cucumber:23:in load'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/bin/cucumber:23:in'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/bin/ruby_executable_hooks:15:in eval'\n/Users/thiennguyen/.rvm/gems/ruby-2.1.1/bin/ruby_executable_hooks:15:in'\n. ",
    "zmanji": "Hey @ddfreyne, it's been 3 months and you have not yet released 3.4.1. Are you planning to hold this fix until 3.5?\n. I can verify that my site compiles just fine with c06916c177579353314151c1a0ef0a5efebd21d2 so I am going to assume this bug was introduced in ad4740a39bceaa149f43f3986ef03a306777e99c.\n. ",
    "dientuki": "Hi ddfreyne, i suggest a very simplified output like \"Site compiled in Xs.\" or the error if nanoc find one.\n. ",
    "travisbot": "This pull request fails (merged 4b75bd62 into 731b3786).\n. This pull request fails (merged 91dc37cb into 0b6c8569).\n. This pull request fails (merged aaf737fa into 85e02aa1).\n. This pull request fails (merged 7022e36e into 6f76194a).\n. This pull request fails (merged 56070cb1 into 6f76194a).\n. This pull request fails (merged 3315dd38 into 6f76194a).\n. This pull request fails (merged 36f4d59e into 6f76194a).\n. ",
    "nud": "The same goes for uglifyjs fwiw\n. ",
    "graaff": "I'm using uglifier 1.2.7 which is the latest version as of now.\n. ",
    "gpakosz": "long blind shot, are you using Compass and are you cache busting your css?\n. What do you mean exactly?\nhttps://github.com/nanoc/nanoc/blob/3.7.1/lib/nanoc/base/compilation/compiler.rb#L121-L125 reads:\nrules_collection.load\npreprocess\nsite.setup_child_parent_links\nbuild_reps\nroute_reps\nIt seems to me items would have proper children/parent relationships. Even those inserted in a preprocess block through @site.items << Nanoc::Item.new(...)\n. Ah yeah not during preprocessing indeed. But if someone really needs this, isn't it a legitimate use case of manual call to @site.setup_child_parent_links.\nOtherwise that puts too much burden on ItemArray implementation that needs to hook on every method that adds or removes items from the backing array :(\n. I'm not so fond of\nruby\nwrite :dir => true / false\nAssuming content/some/where/an/item.md, does it mean selecting between output/some/where/an/item/index.html and output/some/where/an/item.html?\n. Dot being part of extension feels weird.\nAccepting an optional dot blurs the line for questionable reasons. There should be no reason to forget a period in extension if the contract is the dot is outside the extension\n. But in nanocland, item[:extension] has no dot\n. good catch, I only tested it with static data source in fact :/\nanyways I was just to open a discussion on what's a general way to address this\n. relying on item[:content_filename] doesn't fly\nwhat's needed really is a way to trace back to the data source from which an item comes from\n. here is a temporary fix for the common use case of using a static data source along with passthrough rules\n. can nanoc rely on Marshal.dump and rescue with #inspect?\n. For those landing here, my workaround for nanoc 3.x is still valid: https://gist.github.com/gpakosz/5420177\n. This is not fixed by #431.\nSee rules_collection.rb#L211\n. same with more\nI'm reproducing it by doing nanoc show-data | less or nanoc show-data | more and I press q before the end of output.\n. :+1:\n. Thank you!\n. I'm about to replace this pull request with a commit that does what you asked for.\nBut some tests fail because @config returns nil. Should it be @config.fetch(:content_dir, 'content') rescue 'content' and @config.fetch(:layouts_dir, 'layouts') rescue 'layouts'?\n. I started modifying the tests so that @config isn't nil. Which is kinda convoluted because lots of tests just assume it's ok to pass nil for config.\nSomehow, it seems to me it's quite acceptable to change https://github.com/nanoc/nanoc/blob/master/lib/nanoc/base/source_data/data_source.rb#L61 to@config = config || {}.\nWhat do you think?\nPS:  @config or config? FilesystemUnified uses the former while Static (which is more recent) uses the later.\n. I used config.fetch but left those untouched:\n- https://github.com/nanoc/nanoc/blob/master/lib/nanoc/data_sources/filesystem.rb#L84\n- https://github.com/nanoc/nanoc/blob/master/lib/nanoc/data_sources/filesystem.rb#L218\n. I wouldn't call that \"a lot of complexity\".\nIt's the same use case as described in #414:\n.\n\u251c\u2500\u2500 product1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules (includes factory/Rules)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 factory\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml (includes factory/nanoc.yaml)\n\u2514\u2500\u2500 product2\n    \u251c\u2500\u2500 Rules\n    \u251c\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml\n    \u2514\u2500\u2500 nanoc.yaml\n. > Instead of using a stack of preprocessors, I\u2019d rather have a hash that maps the Rules file\u2019s full path onto a list of preprocessors.\nDo you imply you want to allow multiple preprocessor blocks per config file as well? That would be hairy because allowing this implies being able to fire preprocessor depending on before they appear before or after an include_rules directive.\nI would keep the 1-1 relationship: preprocessors[rules_filename] = block with a warning in case of overwrite (to be consistent with the current behavior).\n. and is this really a good idea to have smart quotes in default nanoc.yaml file?, e.g. https://github.com/nanoc/nanoc/blob/master/lib/nanoc/cli/commands/create-site.rb#L40\n. @ddfreyne I fail to understand how this change is non backward compatible. How exactly would this break existing configuration files? Do you have an example in mind?\nThe use case for this change is being able to achieve the following: being able to build documentations for different products by leveraging a common \"nanoc framework\":\n.\n\u251c\u2500\u2500 product1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules (includes factory/Rules)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 factory\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml (includes factory/nanoc.yaml)\n\u2514\u2500\u2500 product2\n    \u251c\u2500\u2500 Rules\n    \u251c\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Rules\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 nanoc.yaml\n    \u2514\u2500\u2500 nanoc.yaml\nAbout non-ASCII characters in a config file: despite UTF-8 being nearly universal, someone in central Europe opening nanoc.yaml from within e.g. Cygwin will have a console using windows-1252 encoding. So my personal opinion is that smart quotes in nanoc.yaml comments add little value.\n. @bobthecow Fair enough, yet that's not something I would expect from a ruby-literate person.\nSo yeah it looks like accepting this pull request won't happen. Would it be ok to extract YAML loading in its own method out of build_config so that people with same needs as me could monkey patch more easily?\n. That would help indeed. Are you sure you want parent_config_file? Why not include_config_file? Seems less vague than \"parent\" to me.\n. and each configuration file could have a parent configuration file?\n. Also, parent_config_file implies there's a single parent config file. While include_config_file is more flexible and implies latest key/value assignment wins.\n. Well, according to Ruby documentation\n\nHashes enumerate their values in the order that the corresponding keys were inserted.\n\nSo you could rely on the order in which keys come in the yaml file: everything's after include_config_file overrides what's been seen before.\nBut yeah, I'm fine with parent_config_file. Makes the intent clear.\n. How about now?\n. @ddfreyne If you look at the implementation of parse, you'll notice rules_filename is an absolute path (because I need to identify various rules files to ensure per file preprocessor block unicity). Are you fine with this? From within Rules, if you puts __FILE__,  dsl.instance_eval(@data, rules_filename)  makes __FILE__ being an absolute path instead of ./Rules.\nShould I make it relative to the site directory?\n. :ok_hand: \n. Updated. Not sure about create-site command since the current default configuration populated by the create-site command doesn't contain everything nanoc can do: e.g. static data sources\n. According to http://www.oracle.com/technetwork/java/javase/signals-139944.html SIGUSR2 is bound to the same kind of restrictions as SIGUSR1.\nWhat about trapping SIGABRT: dump debug information then abort since the only use case this feature seems to cover is: nanoc hangs and I want to get a stack trace to understand where it's stuck.\n. Seem my comments on #425: why not trap SIGABRT, print the stack trace, then abort?\n. alright, then it seems you can't do much but don't trap SIGUSR1 when running under JRuby\n. :+1:\n. :+1: \n. Look at your nanoc.yaml file and check the text_extensions setting. Can you confirm jpg is not listed as a text extension?\n. Ahem :) https://github.com/nanoc/nanoc/blob/release-3.7.x/test/data_sources/test_filesystem_unified.rb#L129-143\n. Since 3.7.0, you can customize data sources with content_dir and layouts_dir.\n. LGTM\n. Well I just made the following test:\n$ irb\nirb(main):001:0> require 'kramdown'\n=> true\nirb(main):002:0> Kramdown::Document.new('{:foo}this is bogus').warnings\n=> [\"Found span IAL after text - ignoring it\"]\nBut\nirb(main):002:0> require 'kramdown'\n=> true\nirb(main):003:0> Kramdown::Document.new('this is a [link]\nirb(main):004:1'\nirb(main):005:1' [link]: foo\nirb(main):006:1' [link]: bar').warnings\n=> [\"Duplicate link ID 'link' on line 5 - overwriting\"]\nAfter having discussed with @gettalong it happens not all warnings have line number information so it's not always possible to trace back to the offending Markdown fragment.\nWhile discussing with @gettalong, I wondered whether the warnings array could become an array of hash so that kramdown gives does the job of tracking the line number, the offending content fragment (line excerpt etc).\nThen, how would move on from the point kramdown gets more detailed warnings reporting? @ddfreyne, should the kramdown filter format a message to $stderr or is there facility in nanoc we should use to report errors/warnings (something that would understand the verbose flag).\n. Uh? This is on release-3.7.x\n. Sorry for that. See #461.\n. So in the end I decided to only strip leading and trailing new lines. Because e.g. in Markdown, both leading spaces and trailing spaces have a meaning.\nAnd this doesn't require to change existing tests.\n. Now I'm wondering, maybe it's better to not strip anything at all, and leave everything after the metadata block intact? What do you think?\n. So yeah I pushed a version that doesn't strip. But that breaks many tests.\nSo I promptly reverted that branch to the version that strips only leading and ending new lines: this is a conservative approach.\n. Well existing tests assume trailing newlines are stripped. I'm ok with not stripping anything at all. That means changing all tests.\n. Ok by now nothing is stripped. By now content contains leading and trailing spaces / new lines.\n. Well imho, what comes after \"---\" is the content. If you like to have a blank line for visual reasons, then that blank line is part of the content. Does it harm the pipeline to keep it? In the end HTML doesn't care.\nSo maybe it's better to consider it's part of content? Otherwise the line is blurry.\n. I believe it is.\nRemember FilesystemUnified#create_object doesn't write a blank line before writing content anymore. Do you want the create-item to be adjusted accordingly to keep your \"I like to have a blank line between the metadata section and the content\" preference?\n. :+1:\n. #475\n. :+1:\n. I had to change file extension for layouts files created in tests.\n. Changed the wording.\n. > Has anything changed in how the yaml header / metadata should be formatted?\nYes, #463 changed the way content is separated from metadata. However, we didn't notice any regression when running the tests.\nCould you please copy paste the exact content of the offending file? Or ideally upload the offending file somewhere?\n. @Fjan please see my comments on #471.\n. @kraftkern we believe we identified the regression, can you confirm your files are in CR-LF mode? (dos encoding)\n. @kraftkern reproduced and fixed it in the PR. Thank you.\n. @Fjan the fix is indeed to add \\r? to the regular expression.\n\nNote that the last parameter to split limits the number of pieces so there is no need to join them later, which could potentially mess up a file that has '---' somewhere in the middle.\n\nHow not limiting the split could mess up a file that has --- somewhere in the middle. It's tested and already working. However, for the sake of the discussion, I added a limit of 3 and removed the join.\n@ddfreyne which do you prefer? \n- pieces = data.split(/^(-{5}|-{3})[ \\t]*\\r?\\n/) and content = pieces[4..-1].join ?\nor\n- pieces = data.split(/^(-{5}|-{3})[ \\t]*\\r?\\n/, 3) and content = pieces[4] ?\nTell me and I'll update the PR accordingly.\n. @Fjan if the split is not captured, then you need to inject separator before calling YAML.load\n. Alright, then this PR is good as is. It does the split at 3, and avoids joining.\nI would love more eyes on this though, just in case. (cc @bobthecow @lifepillar)\n. Could this be viewed as an enhancement of #424 instead of a new feature? I'm afraid 3.8 won't be out any time soon.\n. How should that behave regarding the tmp directory?\n. Starting from nanoc 3.7.0, you can specify content_dir and layouts_dir, like this:\ndata_sources:\n  - type: filesystem_unified\n    encoding: utf-8\n    content_dir: source\n    items_root: /\n    layouts_dir: layouts\n    layouts_root: /\n. .DS_Store never do anything good...\n@ddfreyne Why a boolean? Why not an array of allowed dot files in that case?\n. Does it make :pre accessible at the time you're laying out an item? A while ago, when I tried to extract a TOC from @item.compiled_content(:snapshot => :pre) inside my default layout.haml layout, I think nanoc bailed out. So I used yield instead:\nhaml\n%main#content.container\n  - toc = extract_toc(yield, :depth => @item[:toc_depth])\n. I've always had this warning. Typically, upgrading nanoc upgrades cri and then you have 2 different versions of cri and you get the warning. Uninstalling the older one solves it. But it did it every single time the scenario mentioned above happened.\n. I'm not sure this should be merged. For example, the choice of Ubuntu Trusty is arbitrary.\nMaybe as an example to nanoc.ws? On the contrary, if it gets merged, this could help people wanting to contribute to nanoc from Windows\n. :+1: \n. Does this bug affect 3.8?\n. :+1:\n. I'm with @bobthecow \n. Where do you want to make changes?\n. I find it indeed better to use Pathname\n. :+1: \n. I really don't understand the motivation behind this.\n. Fine.\nbundle exec Nanoc compile, I don't see the point.\nIt also seems to me Ruby gems' names are generally lowercase.\n. Ah my bad I overlooked the not affected part. I thought it would be affected :) Same for the gem name.\n. What is this file extension suppose to refer to?\n. And you have Atom feeds stored in .atom files inside your content/ directory?\n. Hmm yes but, likely Nanoc generates e.g. output/feed.atom from e.g. content/feed.erb. In content/feed.erb you typically list items and format them into an Atom feed that gets routed to output/feed.atom.\nIn that respect, there's no reason to change the content of the text_extensions array.\n. I started implementing warning filtering.\nMy idea was to store regexps inside @config[:kramdown][warning_filters] as an array. Later, I would filter with filter :kramdown, @config[:kramdown] || {}. Then inside the :kramdown filter implementation, I would use the warning_filters array.\nAt that point, I found it difficult to reliably store regexps inside nanoc.yaml. Should we use !ruby/regexp or store them as plain strings? If stored as plain strings, are there corner cases when trying to converting them to real regexps in order to filter Kramdown's @warnings array?\n. Instead of thinking in terms of solution, ie. --env option. I would rather see Nanoc let options pass through. Then in the preprocess block we could act upon those options.\n. I don't know Rails but well thinking about it I would say I doubt people use the current content_for helper twice per page :)\nSince it's a helper and not a core functionality I would say it could be viewed as a bug that should be fixed without waiting for 5.0?\n. So until Nanoc 5.0, we're heading towards an :append additional parameter?\n. Works for me, running Mac OS X 10.10.4 with a case insensitive file system\n$ env | grep LC_\nLC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nAnd\n```\n$ nanoc --version\nnanoc 3.8.0 \u00a9 2007-2015 Denis Defreyne.\nRunning ruby 2.2.3 (2015-08-18) on x86_64-darwin14 with RubyGems 2.4.5.1.\n$ ruby --version\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin14]\n``\n. Not so awesome? http://www.methods.co.nz/asciidoc/faq.html#_what_is_the_preferred_file_name_extension_for_asciidoc_files\n.link_to_unless_currentis a much used helper and based on the reasoning we had for thecontent_forhelper, I think the signature oflink_to_unless_currentshould not change. \n. Denis is the author, and as such must not appear in the contributors list.\n. Does it take into account the cascading of configuration files (parent_config_file)?\n. Is<<: *defaultan inheritance mechanism?\n. BTW, how does this feature interact withnanoc view?\n. I once worked around a similar issue by aliasinginspect`, e.g:\n```\ndef compass_sass_engine_options\n  options = Compass.sass_engine_options\noptions[:load_paths].each do |x|\n    class << x\n      alias _inspect inspect\n  def inspect\n    _inspect.gsub(/:0x\\h+/, '')\n  end\nend\n\nend\n  options\nend\n``\n. Please make it opt-in up front. We happen to build nanoc docs on build nodes that are isolated from the mighty internet\n. I believe the flaw lives in#create_pattern()doesn't care whichidentifier_type` the data source actually uses\n. I took your comments into account.\nWell in my setup, I was already doing e.g in nanoc.yaml.\n```\nerb filter options\nerb:\n  trim_mode: '<>'\n```\nand then when filtering \nfilter :erb, @config[:erb] || {}\nA quick grep didn't really exhibit existing filters reading their options straight from @config, do you want to introduce a new behavior? (which kinda opens other questions like @config[:kramdown][:warning_filters] or @config[:kramdown_warning_filters] \ud83e\udd14 ?)\n. What about identical (cached) ?. That's because you're running relativize_paths after items are laid out right?. I second @ddfreyne, beside .yaml, or .yml what the extension could be?\nMaybe nanoc should support these both and that's it.. Please discuss the naming of merge_recursively as well as where it should be defined. At the time of writing this comment, I realize merge_recursively could be added to lib/nanoc/base/core_ext/hash.rb.\nAlso, I didn't find tests related to parent_config_file in configuration_spec.rb and I didn't know how do write a test that involves an existing parent config file.. Although this is a behavior change, I doubt anyone would really expect overwrite instead of merge. I also doubt this feature is widely used :)\nSee it as bug fix!. Writing down here the fact that I scanned ~500 Nanoc sites on GitHub and none uses parent_config_file.\nThe idea behind parent_config_file is to have inheritable defaults that can be tweaked. I believe the default case is to union hashes but override values which is what #merge_recursively() achieves.\ndef merge_recursively(c1, c2)\n      c1.merge(c2) { |_, i1, i2| i1.is_a?(Hash) && i2.is_a?(Hash) ? merge_recursively(i1, i2) : i2 }\n    end\nIf you really want to cancel out a hash value that has been populated by a parent config file, you can still do key: nil explicitly:\n```\nthis site doesn't want deployment at all\ndeploy: nil\nparent_config_file: _common/nanoc.yaml\n```\nIn that respect, this PR should be seen as bug fixing rather than enhancement. I don't see any advantage in complexifying parent_config_file's syntax.\n. I added a test for #merge() in configuration_spec.rb. I decided to test in configuration_spec.rb instead of config_loader_spec.rb because the guts of the change are really in Configuration#merge() behavior.. Thanks. Thanks for the merge!. May I disagree?\nI'm using\nimg = Magick::Image::ping(rep.raw_path).first\nso that I can extract the width and height of image items which reps have been through Nanoc's filter pipeline. > because a symbol semantically isn't the same as a symbol\n\ud83e\udd14. > \u2026 because a symbol semantically isn't the same as a string\nI'm not sure I understand what you mean. What prompted me to open this PR is that somewhere in a (partial) layout I'm using information that comes from item metadata or config.\nAnd because of __nanoc_symbolize_keys_recursively, data that started their life as strings in YAML metadata end up being symbols down the road.. OH! You merged fast.\nI didn't have the impression I was pushing that hard \ud83d\ude05\nThank you!. Oops sorry, it's nanoc 4.8.16\n$ bundle exec nanoc --version\nNanoc 4.8.16 \u00a9 2007-2017 Denis Defreyne.\nRunning ruby 2.4.3 (2017-12-14) on x86_64-darwin16 with RubyGems 2.6.14.. When I launch pry, hitting CTRL+C doesn't exit pry:\n\n. Loading site\u2026 done\n[1] pry(#<Nanoc::Int::Context>)> Signal.trap('SIGINT') { raise Interrupt }\n=> #<Proc:0x00007f9d6815c950@/usr/local/lib/ruby/gems/2.5.0/gems/nanoc-4.8.16/lib/nanoc/cli/error_handler.rb:39>\n[2] pry(#<Nanoc::Int::Context>)>\n[2] pry(#<Nanoc::Int::Context>)>\nBetter!. I believe the behavior you're witnessing is normal. As per Nanoc manual:\n\nThe exclude option determines which files and directories you want to exclude from pruning. If you version your output directory, you should probably exclude VCS directories such as .git or .hg.\n\nNow I would acknowledge there's an ambiguity in Nanoc's wording.\nShould prune.exclude: ['output'] exclude output or output/output?\nThe current behavior makes it output/ is excluded from pruning. And by definition, output/something being inside output/ (which is excluded from pruning) doesn't get deleted.\nIn any case, the exclusion logic is implemented in terms of `String#include? so it's definitely loose and can't achieve what you're asking.\nFinally, given your additional example of having output_dir: build/bin and a tool creating files in build/bin/bin it seems to me you want to exclude build/bin/bin and not build/bin right?. I mean prune.exclude: ['build/bin/bin']. Works for me. > I also wonder what the implications will be on Windows where ... hold your breath ... {hard,sym}links can by default only be created by administrators.\nAs of Fall Creators Update 2017, when developer mode is enabled you don't need privileges to create links. > Now, my only remaining concern is the duplicated space. Since the audio files are just copied bit-by-bit with no processing in Nanoc, it would be nice to be able to not duplicate that space.\nIs there a way to make hardlinks only if an item is subject to a passthrough rule? Note that it's different semantics than \"file is identical\".. @ge-fa Hello, out of curiosity what's the point of Debian packaging Ruby gems to begin with?\nDebian Stretch is packaging Nanoc 4.4.7 while we're at 4.9.1. Soon enough Ruby 2.3 EOL is going to be announced and all the Ruby ecosystem packaged by Debian will be too ancient anyways. That's what happened with Jessie \u00af\\(\u30c4)/\u00af\n. Nanoc has a lib_dirs setting already.\nIn your nanoc.yaml, you can do:\nlib_dirs:\n  - foo/lib\n  - lib\nHelpers in foo/lib? will be overridden by helpers in lib?. Documenting this exact example and highlighting the specificity rule sounds good. It will help people decide what's a regular configuration setting and what's environment specific configuration setting. And maybe what's an environment specific override. And in that respect I believe the doc is a bit misleading\n\nThe default environment is, as the name suggests, the environment that will be used when no environment is explicitly specified. The example above is thus equivalent to the following:\nenvironments:\n  default:\n    base_url: http://nanoc.dev\n  prod:\n    base_url: http://nanoc.ws\n\nNot exactly. You end up with the same result but it's not equivalent in terms of what's happening.\nWhen you do\n```\nbase_url: http://nanoc.dev\nenvironments:\n  prod:\n    base_url: http://nanoc.ws\n``\nThen theprodenvironment **overrides** the **regular**base_url` configuration setting.\nBut when you do\nenvironments:\n  default:\n    base_url: http://nanoc.dev\n  prod:\n    base_url: http://nanoc.ws\nThen there's no overriding going on. You have environment specific configuration settings that share a same name. And would I define a third environment named staging\nenvironments:\n  staging:\n    minify: false\nThen when compiling with --env=staging, base_url simply doesn't exist.. But maybe could bail out with a nice error message?. It's indeed backward incompatible but it's the way it should have been in the first place \ud83d\ude22. Well I'll think about it, maybe I can do the following: if css_path is not given, use a dummy one then remove it from the generated sourcemap instead of letting incorrect information go through. In fact it has nothing to do with inline source maps. It's just Sass won't let you omit the optional \"file\" entry in the output source map. So the conservative strategy would be to give Sass a dummy value then change that after the source map has been produced. There, now css_path is optional. Hi @agross, I'm currently in holidays. I'll have a look next week.\n. Hello @agross \ud83d\udc4b\nI apologize, I got side-tracked and didn't look at #1397. Doing it now. dsl.rules_filename is the name of the rules file being parsed. Upon include_rules completion, dsl.rules_filename should be reset to the parent file.\n. I thought it was ok to reassign @config, since the original code does it already\n. Done. For the record this is not valid HTML. And is one of the reasons why I departed from :colorize_syntax to have my own :rouge filter.. Where exactly?\nShould it be require 'base64' or requires 'base64'?. Alright, this line indeed makes the compilation stop.\nI think you should replace\n```\nit doesn't make sense to import a file, from Nanoc's content if the corresponding item has been deleted\nraise \"unable to map #{raw_filename} to any item\" if item.nil?\nby\nthe imported file doesn't correspond to a Nanoc item, let next importer in Sass' :load_paths handle it\nreturn if item.nil?\n```\nAnd keep the rest of importer.rb as it is.\nThis suggestion alone fixes #1378.. I understand why you're doing it. Indeed it may be desirable to keep backward compatibility and let people @import with relative paths where imported files live outside of Nanoc's content/ directory instead of importing relatively from a configured entry in load_paths. Totally cool to learn how to assemble a \"real site\" instead of having to mock all Nanoc internals \ud83d\udc4d. Done. I started changing this file last week but didn't go as far as you did with updating tests.\nI wrote something similar:\n```\n      content, syntax = if items.size == 1\n                          [items.first.compiled_content, items.first.ext.downcase.to_sym || :sass]\n                        else\n                          [items.map { |item| %(@import \"#{item.identifier}\";) }.join(\"\\n\"), :scss]\n                        end\n  options[:syntax] = syntax\n\n```\nWhich imho produces a smaller diff than yours.\nI chose to make it content, syntax because that's somewhat what Sass does, see find_relative().\nI chose to make :sass the default syntax because that's also what Sass does.. Readable is a subjective matter. When I talk about minimizing the diff, I talk about the cognitive load of inspecting the diff, not Git's way of storing things. I let @ddfreyne decide.\nHaving content, syntax is symetric with what Sass does and what #find_relative() does.\nAs far as the current behavior of assuming :scss, it's a bug and I vaguely recall my first implementation before review inspected item's extension to decide the syntax. Maybe we could #raise() telling we don't know which syntax to pick?. @agross Thanks for the update. Well my very own opinion is that I wouldn't have traded 5 lines of code in context for 3 additional private functions (see http://number-none.com/blow/john_carmack_on_inlined_code.html). Understanding what's going on imho now requires chasing tiny functions doing little meaningful work.\nSo yeah I personally would have written it differently. But if both Rubocop and @ddfreyne are happy then I'm happy too!. ",
    "RubenVerborgh": "No, I'm not using Compass. Has been a while since I encountered this though.\n. Closing is perfectly fine with me. I added the issue on your request, even though it wasn't actionable :smile:\n. > One could indeed argue that this new approach goes against traditional \u201cgood practices\u201d of object-orientation, but I find the code of the checksummer far nicer to read.\nProbably a matter of taste, case statements based on type always look a little suspicious to me.\n\nI like that idea! That\u2019d mean ::Nanoc::Int::Document gets an optional checksum, and the #new_item and #new_layout methods gain a :checksum param.\n\nYes, that would definitely be a gain already! I can make a pull request that implements this\u2014or would you prefer to work on this yourself?\n\nI believe that the :checksum param will make lazy loading possible anyway.\n\nNot sure. The signature of new_item is currently\n```\nnew_item(raw_content_or_raw_filename, attributes, identifier, params = {})\n```\nand this requires me to give the attributes as a hash \u2013 so I should have the attributes already. (Or can I make the hash lazy?)\nFor example, in the case of the BibTeX datasource, it would be beneficial to just supply the checksum (which does not require the file to be parsed) and only calculate the attributes when necessary (which requires the file to be parsed).\n. > I\u2019m not referring to including the checksum in the attributes hash\u2014the checksum would be separate (passed in params, stored separately from attributes).\nIndeed, that was what I understood.\n\nAt the moment, attributes are always loaded, but in the future this might no longer be the case.\n\nYes, and the checksum param could actually be an enabler for this: only if the checksum is different, the attributes need to be loaded. This could provide a major speed gain.\nAlright if I give the checksum param a go in a PR?\n. BTW Do you have examples of other params use cases?\n. Implemented in #793.\n. Note that 289f6f38c5bac50e66abdcd42710bfa657c35b72 is redundant after 8c72d5159151a8f980d7ddd103fa5e5277fe397a; however, I left it in for comparison (especially with regard to the tests).\n. Also, the code to generate a checksum for a file is kind of a duplicate of the code of the checksummer for pathnames. I did not want to create a dependency between a datasource and the checksummer; while this might be okay for the default filesystem datasource, external datasources would not want to depend on the internal checksummer. (Would also be an argument to have pathnames calculate their own checksum, but we've discussed that already :wink:)\n. - I wasn't too sure either, hence I left 289f6f38c5bac50e66abdcd42710bfa657c35b72 in. I'll adjust the range of this pull request to not include 8c72d5159151a8f980d7ddd103fa5e5277fe397a anymore.\n  - Regarding \u201ccontent already loaded\u201d: this pull request would actually avoid the need to load the content, and this would be a nice next step. Content only needs to be loaded when the checksum is different.\n- Alright, but it's not necessary anymore then if the mtime is not used.\n. > > Content only needs to be loaded when the checksum is different.\n\nNot entirely correct: the checksum being different is a necessary but not sufficient condition for content to be loaded.\n\nYeah, I cut a corner in writing that down. What I meant is: content only needs to be loaded when a reason is found to recompile, since determining that reason no longer requires the item contents.\n\nThe idea of only loading data when necessary is nonetheless quite interesting and is something I plan to tackle in Nanoc at some point in the future.\n\nI think it could be as simple as allowing new_item to accept a block and a checksum, but I might be oversimplifying. Can I make an issue to discuss that?\n. Okay, keep me updated when that RFC goes out :smile:\nFinishing this PR now.\n. All done.\n. Lazy loading still makes sense, not for memory reasons, but to avoid the overhead of parsing the file and its metadata. The checksum can be made without parsing \u2013 only when the checksum is different, the file actually needs to be parsed.\n. I can give you a quick number: a site with a BibTeX datasource (\u00b1 150 items in my use case), compilation  time was 12s before #790 and #793. Now it is down to 3s. Skipping field loading for the 150 items brings compilation time further down to 2s.\n. Yes.\n. Tested this with my BibTeX datasource, and I'm seeing a compilation speed gain already.\nTwo questions for @ddfreyne:\n- Am I correct to implement the laziness for content in Content, or should this be in Document? My reasoning for changing Content: new_item directly uses Content.create.\n- Does the laziness handling with the holder seem alright? This was needed for freezing.\n. Your suggestion of LazyValue also crossed my mind, especially if this becomes a common thing (I was still missing the transform idea though). Where should I put this auxiliary class?\n. Alright, will do tomorrow. BTW, any reason to prefer respond_to?(:call) over is_a?(Proc)?\n. Implemented Nanoc::Int::LazyValue. I did not entirely follow your suggestion, as your freeze method requires the value to be computed, which kind of voids the purpose of being lazy. I implemented it with a hash that only becomes frozen when the value is actually requested.\n. Careful: old temp files seem to be affected by this change. PStore tries resurrecting the item with @string as a string value, which is not the case anymore. Simply deleting the tmp folder works. In general, however, it seems that Nanoc should be careful reading temp files.\n. Alright, definitely needs to be bumped.\n. I implemented marshal_dump and marshal_load for TextualContent. Did not do this for BinaryContent, as it complexifies without actually changing behavior (but I can still add this if you like).\nSupport for lazy loading is now complete.\nShall I also implement this for the Filesystem source? In this PR or another? And do you have any advice/preference for tackling this, given that the load_objects code is already quite complex?\n. Thanks\u2014agree on the refactoring, it seems best I leave this up to you.\n. @ddfreyne Thanks for notifying me, but transform was only used in  LazyAttributesValue of Document within Nanoc itself, not in my code.\n. I would have tried to find a MWE, but that's hard without a stack trace.\n. Running Ruby 2.3.1p112.\nChanged it to true, ran it 5 times successively, the issue did not occur anymore. (Not a guarantee, however, as the issue does not always occur in general.)\n. Thanks! And interesting about the speed increase \ud83d\ude04 \n. @ddfreyne Still getting killed occasionally. Could we reopen this?\n. I don't really have large files, and certainly not loading them in memory. However, it might be related to memory somehow: when I have htop open, CPU initially rises to 26.5% (of 1GB RAM), and then briefly hits 33.3% or so before crashing.\nCan I do anything to make more relevant debugging output visible?\n. \ud83d\ude2e  Interesting. Note: I starting having these when switching to a new VM (latest version of everything); maybe Travis is in a similar condition.\n. How could we prove / fix that?\n. 1GB of RAM; swap unknown (it's a container).\nCompilation works properly at the moment, after a reboot.\n. Seeing it less recently since upgrading to latest Nanoc.. This issue can be closed as far as I'm concerned.. Thanks, will upgrade and test. (The issue still occurs every now and then; rm -r tmp and recompiling helps.). Seeing this issue number, I so badly want to find another bug now.. I can reproduce on our Ubuntu server; didn't succeed on OSX. Can give you access if needed.\n. Tried that, compilation succeeds!. That was fast \ud83d\ude09  I'll test later today.. Looks good to me.. That explains things, thanks a lot!\nWas just a question BTW, not an actual bug. I assumed there was a good reason.. In combination with a meta charset tag (as one would typically do in an\nHTML5 document), it gives an error.\nYou can see this with the default Nanoc template.\n. That's what I do now, but it kind of seems a pity that a default Nanoc\nfilter doesn't support the latest HTML version, and that this filter\nproduces invalid HTML with the default init site.\n. https://github.com/DeSemWeb/ISWC2017/blob/master/lib/better_relativize_paths.rb\n. Yes; I also need it to apply to stylesheet and script links from the\ntemplate.\n. Perfect, let's follow up there.. The only consumer of the checksum is Nanoc::Int::Checksummer.calc. Does it really need to be sent through the checksummer a second time?\n. Will do that!\n. ",
    "Takashi-U": "I'm sorry for my poor skills.(This is my first \"pull request\")\nThanks.\n. Thanks a lot !!\nNanoc is wonderful software!\n I live in Matsue (Japan) where \"RubyWorld Conference\" is held. The site of \"RubyWorld Conference\" is made from Nanoc and the person also using my surroundings is in it. \nhttp://www.rubyworld-conf.org/en/\nI need your help well from now on. \n. ",
    "DavertMik": "Somehow it fixed 0.O\n. I was trying one file on notebook and on laptop. Maybe encoding conflicts? I dunno. Magic! =)\n. ",
    "spirosdi": "I have the same problem all of a sudden! I upgraded ruby (ruby 2.0.0p195) and nanoc (3.6.4) but it did not resolve it.\nMacs-MacBook:folder mac$ nanoc \nLoading site data\u2026 \nCaptain! We\u2019ve been hit!\nMessage:\nArgumentError: dump format error(0x32)\nCompilation stack:\n(empty)\nStack trace:\n1. /Users/mac/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/pstore.rb:475:in load'\n2. /Users/mac/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/pstore.rb:475:inload'\n3. /Users/mac/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/pstore.rb:410:in load_data'\n4. /Users/mac/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/pstore.rb:327:intransaction'\n5. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/base/store.rb:76:in load'\n6. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/base/compilation/compiler.rb:127:inblock in load'\n7. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/base/compilation/compiler.rb:127:in each'\n8. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/base/compilation/compiler.rb:127:inload'\n9. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/base/source_data/site.rb:250:in load'\n10. /Users/mac/.rvm/gems/ruby-2.0.0-p195@folder/gems/nanoc-3.6.4/lib/nanoc/cli/command_runner.rb:63:inload_site'\n    ... 22 more lines omitted. See full crash log for details.\nIf you believe this is a bug in nanoc, please do report it at\n-> https://github.com/nanoc/nanoc/issues/new <-\nA detailed crash log has been written to ./crash.log.\n. ",
    "raphinesse": "No, CCs can definitely appear anywhere in the document. I maintain a site where DD_belatedPNG is included via CC just before the closing body tag, for example.\n. Nice. Looks very promising.\n. Here you go: https://gist.github.com/raphinesse/ea8de76518178bc03172\nThe only change I made to the default site template was replacing the ERB filtering step with Handlebars filtering.\n. I do and I am\n. It's not in the Gemfile but in Gemfile.lock (as a transitive dependency: guard-nanoc -> guard -> pry (0.9.12.2-x86-mingw32) -> win32console).\nAnyhow, the result is the same for calling nanoc help without bundle exec.\n. i386-mingw32\n. I just tested compilation with an explicit require 'Win32/Console/ANSI' as well as require 'win32console' (via a file in lib) both to no avail.\nI also tested color support in irb which works just fine. Odd indeed.\nI'll do some debugging with the mentioned method, but I can't imagine what should possibly go wrong in there ^^\n. Ok, it keeps getting stranger. I just modified enable_ansi_colors? like that\n``` ruby\ndef self.enable_ansi_colors?(io)\n  return false if !io.tty?\nbegin\n    puts require 'Win32/Console/ANSI' if RUBY_PLATFORM =~ /mswin|mingw/\n  rescue LoadError\n    return false\n  end\nreturn true\nend\n```\nA bundle exec nanoc compile lead to this output. And the error message had colors! I can also confirm that I have colors in $stderr for other errors. o.O\nSome things I noticed:\n- The puts only failed for false in $stderr\n- The error occured in the utf-8-cleaner\n- Captain! We\u00d4\u00c7\u00d6ve been hit! was not correctly utf-8-cleaned. I noticed that before but thought: Yeah, same old story. Fuck Windows' console\n- I got a correctly escaped Captain! We've been hit! in the error I caused on purpose in a file in lib\n- %w( LC_ALL LC_CTYPE LANG ) are all empty on my machine (I guess that ought to be so on Windows)\n- Maybe any connection here is far fetched but: I just today noticed that the error I get with every request to the web server ran by nanoc view occurs in the utf-8 stream cleaner too (nanoc view works just fine apart from flooding my console)\n. As a side note, this seems to check for UTF-8 support on Windows correctly:\n``` ruby\ndef self.enable_utf8?(io)\n  return true if !io.tty?\nif RUBY_PLATFORM =~ /mswin|mingw/\n    chcp.include? \"65001\"\n  else\n    %w( LC_ALL LC_CTYPE LANG ).any? { |e| ENV[e] =~ /UTF/ }\n  end\nend\n```\nResults:\n- UTF-8 output on my console yay\n- Still no colors working nay\n- nanoc view causes errors in win32console now. I wonder what it's processing with those filters...\n. Sure, will do\n. No errors or failures that seem to be related to this problem. Here's the test output.\nHad some work to do to get everything up and running on Windows, but the specifics are OT. If you're interested in less stuff exploding when trying to run nanoc's test suite on Windows, I can wrap up a PR :wink:\n. Yep, still an issue. To summarize:\n- When I test color codes with win32console in irb everything works fine\n- No colors in $stdout with nanoc, color codes output verbatim instead\n- I do have colors on $stderr with nanoc\n- The update, create, etc. messages of guard-nanoc are colored as well\n- However some messages of guard-nanoc show the same issue as above (those prefixed with [nanoc])\nWhen working on the tests issue I noticed the same faulty behaviour with the messages from other tools.\nFor example bundle exec rake with missing bluecloth:\n\u2190[31mCould not find bluecloth-2.2.0 in any of the sources\u2190[0m\n\u2190[33mRun `bundle install` to install missing gems.\u2190[0m\nSo this might not be a nanoc specific issue after all. This starts to get rather frustrating :weary: \n. - p $stdout.instance_eval(\"@stream\") =  #<IO:<STDOUT>>\n- p $stderr.instance_eval(\"@stream\") = #<Win32::Console::ANSI::IO:fd 2>\nThis makes it at least totally reasonable that it is not working as expected :grin: \n. Well, after spending the better part of the evening with looking for a dependency that reset the value of $stdout it turned out that the problem is actually rather simple.\n1. An instance of CleaningStream is created, using the current value of $stdout, i.e. STDOUT\n2. enable_ansi_colors? is called which causes Win32/Console/ANSI to be required\n3. win32console replaces the values of $stdout and $stderr with it's wrappers\n4. $stdout is assigned the CleaningStream wrapping STDOUT\n5. Everything works fine for $stderr since it has already been wrapped\nSo to fix this we only need to require \"win32console\" before step 1. I'll leave the details up to you this time, since I've got no elegant solution ready right now :grin: \n. I'd prefer my full name. Should be in the commits as author.\n. :+1:\n. Glad to hear that\nRemaining errors and failures. Curiosly the second one comes and goes. don't know why.\n. OK, will change the PR according to your remarks. Not sure about the three remaining errors/failures though. Any thoughts on that?\nBTW, can I display the skipped tests too?\n. There does not seem to be a way to print skipped tests without going full blown verbose. MiniTest docs are a bad joke, btw :rage: \nMaybe I get to take a look at the 2-3 remaining errors today.\nActually all three newly introduced boolean methods would be candidates for memoization, but as you said, it's tricky to find a place as it is. I'd vote for just ignoring the probably marginal performance impact :grin: \n. OK, I got the bug causing randomly failing rendering helper tests. Two tests didn't close the file handles on their layout which caused the next test to fail.\n. I'll see if I can purge the last failure. Reading empty front matter from UTF-8 with BOM. If I can't fix it, this is it.\n. I could probably fix the bug by using r:bom|utf-8 as read mode here. Shouldn't interfere with other explicitly set encodings either. But is available only since 1.9.2. I guess 1.8 is still supported by nanoc?\n. OK, could you tell me which edge case is covered by this if statement? I might have a backwards compatible solution.\n. OK, it just came to me that the actual issue is the test. My fix would allow to correctly strip the BOM from files which have been interpreted with a wrong encoding (which happens when you use win and utf-8 without setting @config[:encoding]). But that's pretty much useless unless you don't use any special chars in your document.\nSo the solution would probably be that the mentioned test ensures that @config[:encoding] is set to utf-8.\n. Here we go, 612 tests, 1605 assertions, 0 failures, 0 errors, 29 skips\n. Looks good, I have colors! :grinning: \nTwo small changes to Nanoc::TestHelpers setup and teardown:\n``` ruby\nGo quiet\nunless ENV['QUIET'] == 'false'\n  @orig_stdout = $stdout\n  @orig_stderr = $stderr\n$stdout = StringIO.new\n  $stderr = StringIO.new\nend\n```\n``` ruby\nGo unquiet\nunless ENV['QUIET'] == 'false'\n  $stdout = @orig_stdout\n  $stderr = @orig_stderr\nend\n```\nI also get following warning when running Nanoc::Extra::Deployers::FogTest#test_run:\n\u2190[33m[fog][WARNING] Unable to load the 'unf' gem. Your AWS strings may not be properly encoded.\u2190[0m\nBut that is because their Logger seems to use STDOUT directly, otherwise the output wouldn't appear at all.\n. Looks good, yes :+1: Really looking forward to using nanoc with color support :grinning: \n. :+1: I saw that method too but thought I couldn't use it from the Test class. Still don't quite get the visibility in ruby, especially when it comes to protected \"static\" module methods :open_mouth: \n. I thought the same about not supporting a feature that's actually there\nAbout the trust thing:\nhttps://github.com/ruby/ruby/blob/trunk/test/fileutils/test_fileutils.rb#L51\n. Alright, wasn't sure about that either...\n. There's a pretty thorough explanation in the commit message. Long story short: both gems won't compile out of the box on windows, libv8 which is a transitive dep for handlebars is neigh impossibru\n. Yeah, didn't know if I could assume developers working with bundler. Had the other version before but thought it would be nice to have a single expression handle the detection. Do you have any objections to a constant that's defined somewhere in helper.rb? BTW: bundler's check is broader\n. The message provided is actually pretty clear\nsymlink() function is unimplemented on this machine\nI can still change it if you want though...\n. I don't care about the other compilers either, I use mingw :wink:\nI initially wanted to go for a constant because the OS isn't very likely to change during test execution. But I'm in for a method just as well, your call.\n. Alright, where would I memoize it? Is there some lib method available?\n. which manpage states that \"Which returns the number of failed arguments\", so !system(\"which #{cmd}\") should work just as well. I would use system for the check on windows too and could drop both !, changing unavailable to available. Less negation. Objections?\n. I really can't say which variations are actually out there but you have cygwin twice.\nHowever, I thought about a potentially more reliable method. Every Windows I know of has an environment variable WINDIR which denotes the Windows installation directory. So !!ENV['WINDIR'] should do the trick regardless of used compiler and Windows version. List of Environment Variables in Windows XP, Vista and 7. ~~Can't confirm for Windows 8 but I'm pretty sure that it's still there since a lot of stuff depends on this AFAIK.~~ Confirmation of availability of WINDIR from Vista to 8.1\n. There's also ENV['OS'] which should contain Windows_NT for all recent Windows versions, but I couldn't find documentation for that.\n. ",
    "technoweenie": "Ah!  I had to remove the colorize_syntax filter.\n. Yup, I figured that as soon as I saw the filter.  I just ripped it out,\nsince syntax highlighting requires CSS that isn't rendered by feed readers\nanyway.  Thanks for the help!\n. ",
    "mpapis": "https://github.com/nanoc/nanoc/pull/481 might be related to this\n. missing / wrong LANG is a problem for all rubies, especially visible when installing gems with some unexpected letters in author name like mine Micha\u0142, it's a ruby problem and we should forward it to corresponding rubies\n. :D more equivalent is Michal which I widely use\n. :+1:  for closing, but there is something we could still do, we could catch the error print a warning about setting the LANG and re-throw the error (other languages have similar problems, I think I saw similar error in regards to Python but google fails me to find it)\n. restarted the build and it worked to pass the tests but now it's failing on style checks => https://travis-ci.org/nanoc/nanoc/jobs/36478857#L298-L330 maybe rebase on master to be sure latest style guidlines are used\n. Just so you know, there might be ENV[\"BUNDLE_GEMFILE\"] you might be better with ENV[\"BUNDLE_GEMFILE\"] || \"Gemfile\"\n. after checkin the definition of the atack I'm :+1:  on this one, no need to extra checks as we are in full control of the files here, nobody else should use them\n. hmm, there are good things in the split too, like you can set library dependencies on the limited code - like I have noticed in one of recent PRs, if you put everything in one gem/source you forward setting up dependencies on the user.\nalso I the mentioned PR it was mentioned that nanoc v4 will be the split - is this still on?\n. found the mention https://github.com/nanoc/nanoc/pull/502#issuecomment-64998770\n. if we could define stanard for v4 that would be backwards compatible to v3 then splitting in v3 would have the adventage that the work for this part of code is already done - maybe add it as dependency for v3 - this way it will still have the \"included\" status\n. updated\n. not sure about documentation, is there anything else I should update?\n. rebased on top of master in case you are ready to merge it ;)\n. hmm, maybe we can merge it as it is and I would improve it in new PR including extraction of Md5Hash class to handle collecting and checking.\n. I will work on it in the evening\n. sorry missed to define which evening ;) caught by Christmas, will have more time for it starting next week, but if you have time for it now then go for it\n. no I'm not, if you have time for it right now go for it, I probably wont have time before evening (it's waiting in my queue)\n. this is odd, it did not happen yesterday but today I'm getting:\nruby\nNanoc::Errors::Generic: No rep named :default was found.\nhas to be something simple, but I could not trace it in the short time I have given it.\n. hmm, so would it be possible to generate the on disk content and manually add the items - compared to my current approach with reload?\n. any extra command would be extra overhead for compiling site, any details on the custom data sources?\n. I was thinking more of a \"filesystem-diff\" DS that would detect the new items added manually\n. working on it\n. should I close this one?\n. updated\n. my pleasure :)\n. I might have found something related, after removing Gemfile.lock in #499 I get this error https://travis-ci.org/nanoc/nanoc/jobs/41906263\n. I'm not that good in nanoc sources yet to judge #469, checked the #474 and indeed looks good\n. no worries, using github in Gemfile for now - for the failing external links test fix\n. https://github.com/nanoc/nanoc/compare/3.7.3...release-3.7.x looks longer then the notes, at minimal I miss #476 \n. 177 files changed - it counts as something important for me ;) the code also not always matches, the changes are maybe subtle but things like removing !! change the return value from true to some other result that is not false - not always the same\n. with Boolean I would expect true / false so a check like == false would fail now\n. yep looks good\n. separate PR for the whitelist? are we aiming for 3.7.4 or later release?\n. is anyone working on the whitelist? if no one takes it I will have some time for it in ~9 days\n. I think the remaining bug will be fixed with #502 \n. by bug I meant test failures\n. and the tests pass after rebasing on top of merged #502 \n. I'm not sure I will have time to fix the bugs before Friday so if anyone got time for it - go for it\n. forwarding mine from #501 => :+1: \n. :+1:, are all of the problems fixed in #500?\n. don't we need to change some dependencies so proper gem version of Rouge is used?\n. just an idea, what if it was extracted to separate gem/plugin and then we coudl define the dependency in it.\n. I will be happy to help with 4.x some time soon\n. :+1: it matches the mentioned ticket\n. :+1: can we also open ticket for Rubocop to allow checking unused only in private apis?\n. https://github.com/nanoc/nanoc.ws/blob/better-character-troubleshooting/content/docs/troubleshooting.md#character-encoding-issues\n. maybe we could add the link to the documentation page to the .message of the catched exception? - otherwise just close.\n. we could add warnings/links as we go, it is not perfect but it minimizes maintenance in long run (my experience from RVM)\n. looks good, are we waiting on #480 ?\n. http://nanoc.ws/install/#installing-ruby says 1.8.6+ is supported, the problems might be caused by recent style refactorings \n. after some checking we are compatible with 1.9.3+ now, @ddfreyne I have started a branch to bring back compatibility but I'm not sure what's better, should we just bump the required version or backport code, most common offenses are:\n- multiline with . on beginning not the end of line\n- new hash syntax a: b instead of :a=>b\n- lambdas instead of Proc\nI have started a branch here https://github.com/nanoc/nanoc/compare/master...bugfix/old_rubies\n. based on discussions in #510 & #513 we need to identify the last version that supported 1.8.7 and update docs pointing to it as the last supported on 1.8.7\n. someone with a ruby version switcher and having those older ruby versions could go through tags and run tests, just checked - RVM installs 1.8.6 on openSUSE - but my backlog grew to mach for last week, I do not think I will have time to test it in a week\n. have to open new PR to change target (https://github.com/isaacs/github/issues/18)\n. :+1: \n. :+1: \n. I could copy the trick used in tests with tempfile and use it when :stderr is different from $stderr (which was set to it everywhere in nanoc code), it would work a little different, but the API would be preserved\n. should I prepare version backwards compatible?\n. Redhat still supports 1.8.6 (or 1.8.5), there will be still support for 1.8.7 for quite some time, no official support does not mean there is no support at all, there are still targeted groups - but then they could use the version that worked back in days of 1.8.7 - if we could identify it we could claim it was the last one and close support for it right now.\n. there is a lot less differences between 1.9 and 2.0 then it was between 1.8 and 1.9 - should not be that a lot harder to maintain 1.9\n. we should not depend on bundler gem, it's supposed to handle dependencies, as such it can't be one.\n. I still do not think bundler should be in Gemfile (/.gemspec), you could do the same things in new rubygems with:\nbash\ngem i -g Gemfile\nthe only thing that would prevent us from continuing would be Bundler in Gemfile, but with this simple trick I got it going:\npatch\n-all_rubies = Bundler::Dependency::PLATFORM_MAP.keys\n+all_rubies = Bundler::Dependency::PLATFORM_MAP.keys rescue [:ruby_19, :ruby_20, :ruby_21]\nthere should be better code in rubygems to take care of it\n. I had only one problem to fix manually (nokogiri), in the end this worked:\nbash\ngem i nokogiri -- --use-system-libraries\ngem i -g Gemfile\nbut nokogiri is not bundler or rubygems issue, it might just work on other systems without any extra steps\n. then I'm :+1: on this, will open new one to remove bundler dependency\n. less dependencies should be equal less problems ... assuming rubygems does what it says it does, it works most of the cases for me and it worked for nanoc - so I stand for less dependencies - btw. people can still use bundler, it just would not be a dependency any more as you can perform the same task with rubygems (which is part of every new ruby installation - all of which we support, as 1.8.7 is no more supported)\n. are we waiting on feedback from other contributors? or it's just postponed to review some time late? or should I close it? ;)\n. a lot of changes :+1: assuming the tests pass\n. we can not support 1.8.7 without major changes - see #510 & #513, even if someone would like to work on it - it would introduce changes that might be hard to accept (like rewriting Piper)\n. there is possibility to use combination of popen4 gem and JRuby function ... but it would be still bigger changes in name of supporting unmaintained ruby version\n. http://guides.rubygems.org/specification-reference/#required_ruby_version= - can we yank the past versions that do not work with 1.8.7 and release new 3.6 and 3.7 that have required_ruby_version specified?\n. 1.8.6 should not be supported - this ruby version is long dead\nwe can yank published gem versions starting from 3.6.9 and provide new releases for 3.6 and 3.7 that have the required_ruby_version set to >=1.9.3 (1.9.2 is also problematic) - this way gme install nanoc on 1.8.7 would install 3.6.8\nwe could branch from 3.6.8 to provide bug/security fixes on 1.8.7 and continue versioning it as 3.6.8.x\n. assuming some identifiable version of nanoc 3.x supports 1.8.6 - then we can do the same thing as for 1.8.7\nas for the branching - every rule has exceptions, we could limit the maintenance branches to security fixes and only then allow the 3.6.8.x version scheme - maybe never, but rubygems supports\n. hmm, I was half way to fix the 1.8.7 support ... would feel less as wasted time if I would finish it\n. looks good but the jruby test failed, I have restarted it to check if it was one time or an real problem\n. :+1: the failing tests look like mustache issue\n. updated, waiting for tests, btw. this should be done against release-3.7.x?\n. It overall looks like to much to consider at once, like for sure you should separate adding RVM project files and un-hiding autocompile.\nAlso whats up with removal of new line at the end of few files, that would be problematic for anyone using shell tools to work with the files (like me using grep to find something).\n. now, can you separate this into separate PR's, some of the changes might be rejected and it influences the rest, also open the new PR's against release-3.7.x instead of master\n. for .ruby-version - well adding some kind of ruby version specification helps those that use multiple rubies and would avoid installing nanoc dependencies in all the rubies, it's like \"recommended ruby version\", I'm cursing lack of this file every time I switch to nanoc, I have to either find ruby I used last time or install all gems again, with .ruby-* files ruby switchers would automatically select proper ruby to work with ... or .gitignore all of them so users can define their own file.\n. looks good :+1: \n. yes looks good :+1:, I guess my only remark is that the run grows quite big, but it's not related to this PR\n. to simplify testing you could extract https://github.com/nanoc/nanoc/blob/aws-deploy-md5-v2/lib/nanoc/extra/deployers/fog.rb#L68-L86 to separate method upload - this also solves problem of growing run - and add attr_accessor :directory, :etags, :keys_to_destroy - this way you can check your custom directory and list of etags without actually connecting to aws.\n. :+1: looks reasonable - although I do not have full understanding of it so I might be missing something\n. This is similar to travelling ruby version - we should decide on something\nthat will simplify flow for development.\n. fixed those in #483 ... let me know if I should update this branch or just drop this PR\n. how do you feel about this single change? just to make sure data_sources are unused, or it makes no difference in case of exceptions?\n. will do\n. try:\nruby\nif (!md5_by_key[key]) || (Digest::MD5.file(file_path).hexdigest != md5_by_key[key])\nthis way when adding new provider MD5s there will be no need to change the code\n. assuming more providers can be added a better style would be:\nruby\ncase config[:provider]\nwhen \"aws\" then files.each {|file| md5_by_key[file.key] = file.etag}\nend\n. well this takes advantage of file.etag being MD5 - I do not think there is any other way to verify if file changed without downloading the whole file\n. doesn't it make it code harder to read?\n. https://github.com/nanoc/nanoc/blob/feature/dotfiles_gh_492/lib/nanoc/extra/filesystem_tools.rb#L7 : \n``` bash\n@api private\n```\nwouldn't that mean we do not have to care about backwards compatibility? ... not that I can't do that change, just curious.\n. I did started reviewing the \"Standard\" rubocop is based upon, some of the rules are just conflicting, some make no sense, I'm not sure blindly following all rubocop rules is good, but I also do not like the default shell formatting (which makes code harder to read)\n. taking into account removing the default maybe it would be better to change previous line:\nbash\npatterns << \"#{dir_name}/#{extra_files}\"\nto\nbash\npatterns += [ \"#{dir_name}/#{extra_files}\" ]\n?\nthe each << pattern feels java like (in the monkeys typing form), there are good things in java, this is not one of them.\n. I think it might be slower ... but I will do the fix in the evening\n. that's surprising, will have to report a bug for ruby\n. well I was expecting += to behave as concat => https://github.com/jruby/jruby/issues/2256\n. removed the default\n. now, is << and concat ok, or should I change << to concat([...])?\n. some cheksums don't match in my 1.8.7 test runs, not sure yet if it's only 1.8.7 or something bigger\n. this is required to keep 1.8.7 working\n. if visited would be a hash then we could store also the digest value and set it here, would it be useful at all?\n. ah I see it now, painful\n. two dots?\n. avoid calculating local hash if remote is not available:\nruby\nremote_etag = etags[key]\nif remote_etag\n  local_etag = calc_local_etag(file_path)\n  next if remote_etag == local_etag\nend\n. ",
    "kongo2002": "Hi Denis,\nat the moment the default behavior for pygmentize filter is to pass nowrap = true to the pygmentize command. This works alright for most use cases but not if you want to use line numbering for example. The pygments documentation explains that many features including line numbering won't work unless you pass nowrap = false (which is the default for pygments btw). If you pass nowrap = false without my changes you end up with the code being wrapped two times.\nMy change will remove the \"additional\" wrapping generated by the pygmentize output.\nCheers\nGregor\n. ",
    "DivineDominion": "I think its a more general problem with 3.4.1:  #159\n. Ah, I see, so Gemfile.lock was just outdated.\nAnother issue pops up.  It is easily solved and not related to this issue, though: NoMethodError: undefined methodcattr_accessor' for ActionView::Base:Class`\nI wonder which internal dependancies have changed here.\n. Darn, according to: http://yaml.org/type/timestamp.html\n\nIf the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part may be omitted altogether, resulting in a date format. In such a case, the time part is assumed to be00:00:00Z (start of day, UTC).\n\nThere's nothing to do about that, it seems.  Either I use time stamps omitting the seconds (2013-11-25 17:29) so YAML doesn't parse it, or I explicitely add the time zone relative to UTC (2013-11-25 17:29:44 +0100).\nWhile I can edit the created_at attributes by hand once to look the same, this isn't very bulletproof.  Is there a way to interfere from inside nanoc and make sure this attribute is one of the two?  Ideally, I don't want an error thrown in my face but a canonification to pipe unified results to the YAML parser.\n. I had something like Rails' Time.zone.parse in mind:\nhttps://github.com/rails/rails/blob/114e1802132c944263a44af5f81da6d43c78124b/activesupport/lib/active_support/values/time_zone.rb#L270\n. Sounds reasonable. Thanks for the advice!\n. Setting ENV['TZ'] = 'Europe/Berlin' makes it even worse since the computed gap between ENV['TZ'] and UTC increases by 1h, sadly.\n. I have used NANOC_ENV in the past and now switched to using site.config[:env]. My Google Analytics snippet is set up only in deployment (as it was before). Every HTML has to be re-compiled. I'd like to optimize this by using two different \"staging\" folders: in deployment mode, use output-deploy/ and update everything that's necessary. When I switch to development, don't override the contents in there. When I'm done fiddling with something, re-compile.\nMy objective is to make compiling the site faster most of the time. Right now, if I don't clean the output dir before every deploy, all I gain is that images don't have to be resized again because they're the same in both environments.\n. I guess you use a filter to collect information because it can be applied to every existing item when they're touched anyway: during compilation. You can loop over all items in your entire site, too, and collect data before compilation. Then you wouldn't need a filter.\nI have a tag index on my website. I put the generation into the preprocess block in Rules.rb:\n``` ruby\npreprocess do\n  My::Environment::setup_environment(site)\nitems.delete_if { |item| item[:publish] == false }\ndef tag_worklog\n    tags = all_tags\ntags.each do |tag|\n  @items << Nanoc::Item.new(\n    \"\",\n    {\n      :title => %Q{Posts tagged &ldquo;#{tag}&rdquo;},\n      :tag => tag,\n      :mtime => Time.now#parse(Date.now) # for the sitemap\n      # TODO ^-- this is the wrong mtime actually, it should be the time of the last item change\n    },\n    \"/posts/tags/#{tag}\"\n  )\nend\n\n@site.tags = tags\n\nend\ntag_worklog\nend\n```\nThe actual all_tags method is a helper method in lib/:\n``` ruby\ndef all_tags\n  posts = sorted_posts\n  tags = Set.new # unique items only\nposts.each do |post|\n    post[:tags].each do |tag|\n      tags.add(tag)\n    end unless post[:tags].nil?\n  end\nreturn tags.to_a.sort\nend\n```\nThis creates items on the fly before compilation, so it's possible to use compile and routing rules on the items just as if they were file-based:\n``` ruby\ncompile '/posts/tags/' do\n  # tag index is a file, actually, looping over all tags\nend\ncompile '/posts/tags/*/' do\n  # this matches the items we've just created\nend\n```\n. Ah well, if it's in the contents, then I understand why you'd need something similar to LaTeX's makeindex indeed!\n\nOn 04 Feb 2015, at 01:47, Basil Peace notifications@github.com wrote:\nThank you for the answer.\nUnfortunately, this approach don't work in my case, since items for the index are defined in the text, not in the metadata. I can't use post[:tags] to get items for the index. I use helper that logs items and also creates  HTML tags. (Firstly I wrote filter, it's actually helper). I could write custom parser and use it in the preprocess stage, but I look for a simpler way.\nThe same problem exists in LaTeX which uses makeindex for the generation of index. For the full build it requires several runs. First updates index file, second incorporates created file. If in the second generation index file is changed, then there is third generation and so on, until everything stabilizes. Now I see that I can try to emulate this behavior using guard. I'll try it, but it would be good if this would work from the box.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/nanoc/nanoc/issues/527#issuecomment-72768803.\n. \n",
    "risnub": "Thanks for the reference. The problem goes away after 'bundle update' as suggested by @bobthecow in #159.\n. ",
    "stephandale": "It's worth noting that it will highlight code if you pass the :css => :style option to the filter rule:\nfilter :colorize_syntax,\n        :default_colorizer => :coderay,\n        :coderay    => { :css => :style }\nBut this results in inline styling, which is bad practice.\n. Many thanks.\nRegarding possible long-term solutions, I was wondering whether a :layout/partial option could be added, where the layout yields to the colouriser. That would allow the user to surround the code block in whatever markup they choose and prevent the need for hard coded post processing in the filter. Another option could specifiy whether the original pre-code tags should be kept in the output or not, to allow complete customisation of the colourised output.\n. ",
    "raimohanska": "Thanks, I'll try that when I get back to work (on Tuesday!)\n. ",
    "benjaminwelch": "Thanks. For some reason, when I only use Redcarpet, the quotes are still dumb. I just switched to Kramdown and Typogruby together and that seems to be working great.\n. ",
    "vividtone": "Thanks. I have sent a new pull request on the release-3.4.x branch.  https://github.com/ddfreyne/nanoc/pull/175\n. Sorry, this is invalid request. Please ignore.\nI'll make a valid pull request later.\n. ",
    "momolog": "Then simply renaming the function to e.g. symbolize_keys_recursively would be a workaround for the issue at hand, also reducing the probability of future collisions. Duck typing would continue to work.\n. Wow, you're FAST.\n. ",
    "ppaeps": "I'm not sure if adding support for 256 colours is necessarily \"neater\". I think my fix is likely the simplest thing that will \"just work\": output that needs to stand out will stand out.  But if you adding support for 256 colours would also solve the problem, I certainly won't stop you. :)\n. ddfreyne: I'll do that today. (I'm at 29C3, have been a bit preoccupied).\n. ",
    "learn4good": "Maybe nanoc is not suitable for such use cases because it has to load all of the items into memory.\nShould I use a template engine instead? Then I can manage the memory usage myself.\n. Finally I choose Tilt which is a template engine. It is not as versatile as nanoc but it can get the work done.\nFor your questions:\n- because there was not enough memory to complete the compiling and it took very long time. When the memory was almost up I killed the process. And I also noticed that the cpu usage was almost 100%\u3002\n- actually there is not 'millions'. there is only 'thousands'. But the data structure is a little complex than the one I post earlier. I will post some codes later.\n- the code was simplified as an example.\nHere is some code took from the real project:\nruby\nconn.exec(\"select distinct company from jobfeeds order by company asc limit 2048\") do |result|\n    @items += result.collect do |row|\n      Nanoc::Item.new('', { partial: 'company', name: row['company'] }, \"company/#{row['company'].slugify}\", nil)\n    end\nend\nThere are about 10,000 companies, much fewer than 'million'. I want to generate a page for each company. The page is quite simple, it just display the name of the company. (I am planning to add more contents to the page but it is not the point here) I think this is a very common use case and nanoc should support. But in fact, if I remove \u2018limit 2048\u2019 from the sql statement, the nanoc compile process will take up to 1GB memory and 100% cpu and I have to kill it.\nI suggest that nanoc process the items one by one, do not load all of them into memory. Otherwise nanoc will be limited to websites which have no more than a few thousands of items.\nFeel free to ask me more questions. I like nanoc a lot, but it cannot help me on my current project.\n. ",
    "stmontgomery": "I don't believe the Travis build failure is related to my changes, it seems like a random timeout waiting for a file to be written. The test suite passed for me locally.\n. ",
    "moll": "\nDoes this actually show Rules (uppercase R) and rules (lowercase r)?\n\nSure does.\nRuby 1.8.7p358 on Mountain Lion here.\n. It is. I've now been able to pin this down to having no @config[\"watcher\"][\"files_to_watch\"] setting in config.yaml. Like I said above, I had none.\nChecking lib/nanoc/cli/commands/watch.rb seems to explain this:\nfiles_to_watch = watcher_config[:files_to_watch] || %w( config.yaml Rules rules Rules.rb rules.rb' )\nObviously, on a Mac with a case-insensitive filesystem (as they always come here) rules and Rules match the same file, and apparently FSSM is fine with that. :)\n. Yeah, I don't know if this is worth fixing either, given that one can fortunately workaround with a custom watcher config line.\nRegarding master: Haha, this time around, it's hanging indefinitely at \n/Library/Ruby/Gems/1.8/bundler/gems/nanoc-2e3453678677/lib/nanoc/base/result_data/item_rep.rb:147:in `call'\nwhich is \n145: io1.read(1024, part1)\n              146: io2.read(1024, part2)\n              147: if part1 != part2\nI've no idea why it hangs there, but I do wonder isn't there a library function that's faster and better tested to compare two files? That modifier there doesn't seem to fail fast either when the files differ by the first byte or when they're whole sizes are different.\nFileUtils#compare_file seems to be a better approach \u2014 it fails fast if sizes are different, takes the best block size from the filesystem and then does a similar thing that you do, except it fails faster.\n. Which implementation are you looking at? The 1.8.7 here I've got does not create new objects for each block:\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/fileutils.rb:\nruby\n  def compare_stream(a, b)\n    bsize = fu_stream_blksize(a, b)\n    sa = sb = nil\n    while sa == sb\n      sa = a.read(bsize)\n      sb = b.read(bsize)\n      unless sa and sb\n        if sa.nil? and sb.nil?\n          return true\n        end\n      end\n    end\n    false\n  end\nUpdate: Gotcha, I misread that. Assignment probably does create new objects.\n. But it does work now on my system with FileUtils#compare_file.\n. You asked about master's watcher: Fortunately the new listen-0.7.0 seems to work (0.5.0 didn't) and doesn't fall back to polling. :) \n. Yes! Although I can close stuff too, but you can add that tag. 8)\n. If the file of the filter isn't loaded until it's used, why can't requires just be regular top level requires?\nOption 2, filters look like regular classes? Wouldn't regular class initialize methods suffice to be the place for requiring extra stuff? Less custom magic...\n. Oh well, I thought they were already linked by a file path. :)\nI agree that more obviousness is better, so implementing yet another DSL for requiring would kind of obfuscate things.\nCan't YAGNI be the answer in this case? Don't we all run the watcher anyways while working with Nanoc and that requires files once anyways.\n. Oh, no, I do get that only the last extension gets stripped. This bug is about none of the extensions getting stripped.\n. ",
    "dmathieu": ":+1: !\n. Awesome!\nIf I may make another suggestion, how about setting an user agent?\nLike nanoc/link_checker?. Not specifically. It's just a way to be a better citizen.\nThanks for the HEAD fix! \ud83c\udf37 . ",
    "michaelbarton": "Thank you!\n. ",
    "dwoll": "@bobthecow Thanks for your feedback! Unfortunately, I have little experience with Ruby. Does raising an exception here work like this?\n``` ruby\nraise exception if we do not have the HTML renderer\nif renderer_class != ::Redcarpet::Render::HTML\n  raise RuntimeError, \"Error: Redcarpet support for a table of contents requires the ::Redcarpet::Render::HTML renderer (selected: #{renderer_class}).\"\nend\n```\nI have trouble testing this locally (on Windows) as I don't get the output of warnings etc. on the console.\n. @bobthecow Thanks for your help!\n@ddfreyne I'm not currently aware of other cases where rendering twice is required. BTW, nanoc is great - takes some getting used to (especially for someone not familiar with Ruby), but it is quite powerful and easily extended.\n. @ddfreyne Ok, I'll try to do that on monday.\n. ",
    "coveralls": "\nChanges Unknown when pulling 8cdaa0c349f61a6f05363683e3b37151bf12c9fc on dwoll:master into * on nanoc:master*.\n. \nChanges Unknown when pulling e404ac286970720095535e306db84e1117a88a08 on ddfreyne:bug-add-rdoc-4-compatibility into * on nanoc:release-3.6.x*.\n. \nCoverage increased (+0.0%) when pulling 28985e8267c012499ad81f90ecb4f48e2bd79569 on lifepillar:git-deployer into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage increased (+0.03%) when pulling 74bab9e589a95e092e99fd55f9c0b760013c0705 on lifepillar:git-deployer into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage increased (+0.03%) when pulling 9a1df41bc47d50cd8c8fc38d127b0658c572d275 on lifepillar:git-deployer into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage decreased (-0.71%) when pulling dcd419961b7beb474e4d32b71554a3013972ecc8 on lifepillar:git-deployer into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage decreased (-0.01%) when pulling b11a05b69c0efa768de90ea35b698d8701af1a68 on xiaohanyu:fix/complete-ansi-color-map into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage remained the same when pulling c1e69b227b59afd562b6f3a817380da45d40b0f0 on xiaohanyu:fix/rubocop-check into 2c83938355b34524bb650857eb9cd159f7986d87 on nanoc:master.\n. \nCoverage decreased (-0.01%) when pulling 2672db64cbc012a32e807ff69b72ae004ee386d1 on fix-rouge-wrapping into 933f56bcbf18aaf547588d249f893a654e02436f on master.\n. \nCoverage decreased (-0.01%) when pulling 2672db64cbc012a32e807ff69b72ae004ee386d1 on fix-rouge-wrapping into 933f56bcbf18aaf547588d249f893a654e02436f on master.\n. \nCoverage decreased (-3.26%) when pulling 3c517709180b50cc15f237f0fcaea7109c8055b8 on fix-rouge-wrapping into 933f56bcbf18aaf547588d249f893a654e02436f on master.\n. \nCoverage decreased (-0.01%) when pulling 231a6e06e457bce8abe89eeb6d09b6b2db490936 on remove-root-tmp-directory into 933f56bcbf18aaf547588d249f893a654e02436f on master.\n. \nCoverage decreased (-0.0%) when pulling 6f8f3a874db8f3a080aecd9fdf12af91e7355891 on fix-sass-imports-without-filter into 08572898cbebc265a86e07f52109b31ccbe57f0c on master.\n. \nCoverage remained the same when pulling 1332e5b4cc0cac5b05ed1184bc42634e24ece44f on fix-gemfile-not-found into 08572898cbebc265a86e07f52109b31ccbe57f0c on release-3.7.x.\n. \nCoverage decreased (-0.02%) when pulling 082372dd60c3f6c6a466ca49120d22b46e0b886a on kost:cdn-support into 1ab8a19cc6a10c3c504e1dc854e561b7ac1d950f on nanoc:master.\n. \nCoverage increased (+0.71%) when pulling bb4a6c01e8f9a932c88950a872d51c079b5f5791 on jugglinmike:items-by-regex into db1db138608d4f6786e1a2482f12ab20359b424c on nanoc:master.\n. \nCoverage decreased (-0.01%) when pulling 25bf35e884ef49341a0763d85ef22db25b38d112 on gpakosz:rule-memory-checksum into 613f6ec7d0e25a1b5926543d846f35e4f11c6c16 on nanoc:release-3.7.x.\n. \nCoverage decreased (-0.14%) when pulling b468474f8596622b4cb61209dfdb9a7cadcbffbe on gpakosz:fix-metadata-parsing into 613f6ec7d0e25a1b5926543d846f35e4f11c6c16 on nanoc:release-3.7.x.\n. \nCoverage increased (+0.2%) when pulling 5b216552357a82b1e6676a8a53593493701d15d9 on require-bundler-for-gemfile-not-found-error into f85910583701f1958f2a4cb2f613a2a9095c6e7f on release-3.7.x.\n. \nCoverage remained the same when pulling ddc96557a2255d57b8e59607b4f1d0e041e792a5 on mpapis:feature/add_group_matches_in_route_gh_478 into 01e0f37d2637e25f8244793fb0fd66bd7e7fcc07 on nanoc:master.\n. \nCoverage increased (+0.02%) when pulling 7e8d18350bc8233932991a4c4efc2f94a181b049 on feature/dotfiles_gh_492 into 07af0412e22a236069cb7e6a981cbd7154ac4b2f on release-3.7.x.\n. \nCoverage increased (+0.24%) when pulling dc8334bd13d2ac972532b2d1445fb02771dc8d9d on more-style-fixes into e46dd831fa9c41b9c744258fc62a1bca085cdfe1 on release-3.7.x.\n. ",
    "alexaandru": "You can have these completion easily:\nbash\ncomplete -W \"$(nanoc --help|grep '^    [a-z]'|cut -f5 -d' '|paste -s -d' ')\" nanoc\n. Is it fixed now? :)\nI can't seem to get it working. I copied fog.rb from nanoc under lib/foggly.rb and renamed the class as well, but when I run nanoc deploy -D it still shows just fog and rsync.\nI added a \"puts 'loaded'\" in the class, and when I run nanoc deploy -D it does print that on the screen, so the class is being loaded, it just isn't listed as an option for deploy.\n. Got it, that explains it. Thanks a lot! :)\n. ",
    "scolytus": "Not just in content/ but for all DataSources. I'm using it with static to copy stuff from a shared place project.\n. I think just following one level of symlinks is not a good solution, nor anticipated.\n. ",
    "joshamos": "Agreed.\n. ",
    "reima": "Sorry for the whitespace clutter in the commit, my editor is set to remove trailing whitespace on save and I didn't notice the two extra changed lines until now.\n. reverse_each should be enough, because Find.find always yields the parent directory before its children. I'll look into writing a test case.\n. I've added a test case. What do you think?\n. Ruby 1.9 seems to preserve insertion ordering, but there is no guarantee I guess. Is a Set really needed here? Wouldn't an Array do (which of course preserves ordering)?\n. Commit including both changes is ready.\n. @ddfreyne Unfortunately the API doesn't support this operation anymore. Should I close this pull request and open a new one for the release-3.5.x branch?\n. ",
    "tbm": "bobthecow: Should be more readable now, thanks for the nudge.\n. I just tried but unfortunately that doesn't change anything.\n. I can confirm that this works for me.\nIn layouts/right-sidebar.haml I changed\n- if content_for(@item, :right)\n  .right\n    - filter(:pandoc) do\n      ~ content_for(@item, :right)\nto\n- if content_for(@item, :right)\n  .right\n    - filter(:pandoc) { _erbout << content_for(@item, :right) }\nand now I get the expected output.\n. to reproduce, git clone https://github.com/tbm/homepage\ncompile\nthen edit content/index.md and remove the line hide_date: true\ncompile again and usually there's no output.diff\nI added warn statements to generate_diff_for and this info is not always printed\u00b7\n. Thanks for your suggestion.  I ran\nnanoc compile\nnanoc show-data > d1\ncp ../../homepage/static/images/r_linuxtag2004_tbm1.jpg static/images\nnanoc show-data > d2\ndiff -urN d1 d2\nand suddenly a lot of stuff was marked as outdated.  Is there a bug in my rules file?  You can find my site here: https://github.com/tbm/homepage\nHere's the complete output of show-data after copying the jpg to static/images as described above.\n```\nLoading site data\u2026 done\n=== Item dependencies =======================================================\nitem / depends on:\n  [ layout ] /default/\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /bio/ depends on:\n  [ layout ] /default/\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /contact/ depends on:\n  [ layout ] /default/\n  [ layout ] /paypal/\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /cv/ depends on:\n  [ layout ] /default/\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /static/images/palm.jpg/ depends on:\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /static/images/r_admc_tbm1.jpg/ depends on:\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /static/images/r_debconf4_tbm1.jpg/ depends on:\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /static/images/r_linuxtag2004_tbm1.jpg/ depends on:\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\nitem /static/tbm.css/ depends on:\n  [   item ] /static/images/r_linuxtag2004_tbm1.jpg/\n=== Item representation paths ===============================================\nitem /, rep default:\n  [ last ] output/index.html\nitem /bio/, rep default:\n  [ last ] output/bio/index.html\nitem /contact/, rep default:\n  [ last ] output/contact/index.html\nitem /cv/, rep default:\n  [ last ] output/cv/index.html\nitem /static/images/palm.jpg/, rep default:\n  [ last ] output/images/palm.jpg\nitem /static/images/r_admc_tbm1.jpg/, rep default:\n  [ last ] output/images/r_admc_tbm1.jpg\nitem /static/images/r_debconf4_tbm1.jpg/, rep default:\n  [ last ] output/images/r_debconf4_tbm1.jpg\nitem /static/images/r_linuxtag2004_tbm1.jpg/, rep default:\n  [ last ] output/images/r_linuxtag2004_tbm1.jpg\nitem /static/tbm.css/, rep default:\n  [ last ] output/tbm.css\n=== Item representation outdatedness ========================================\nitem /, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /bio/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /contact/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /cv/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /static/images/palm.jpg/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /static/images/r_admc_tbm1.jpg/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /static/images/r_debconf4_tbm1.jpg/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nitem /static/images/r_linuxtag2004_tbm1.jpg/, rep default:\n  is outdated: The rules file has been modified since the last time the site was compiled.\nitem /static/tbm.css/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\n=== Layouts =================================================================\nlayout /default/:\n  is not outdated\nlayout /paypal/:\n  is not outdated\n```\n. Interesting.\nWhen I run nanoc compile at this stage, only the one file I added shows up:\nLoading site data\u2026 done\nCompiling site\u2026\n      create  [0.00s]  output/images/r_linuxtag2004_tbm1.jpg\nRunning nanoc show-data afterward shows that everything is up to date, but it also no longer says that everything depends on this file (as it did before).\nI'm new to nanoc so don't understand but I hope you can make sense of this.\n. Just to clarify my previous comment: even though nanoc compile only talks about this one JPG, all the static files change in the output dir (as evidenced by rsync).\nWhat I find strange is that even though adding the JPG marks all items as outdated (as per nanoc show-data after the cp command), only the items from the static data source change in output (not that I think that anything should change in output, apart from the JPG I added).\n. You can easily reproduce this issue (this is with 3.6.0):\nnanoc create-site test\ncd test\nAdd to Rules:\n```\ncompile '/static/*' do\nend\nroute '/static/*' do\n  # /static/foo.html/ \u2192 /foo.html\n  item.identifier[7..-2]\nend\n```\nAdd to nanoc.yaml (to data_sources):\n-\n    type: static\n    items_root: /static\nThen:\nmkdir static\ntouch static/foo\nnanoc compile\ntouch static/bar\nand now nanoc show-data will show:\nitem /static/foo/, rep default:\n  is outdated: This item uses content or attributes that have changed since the last time the site was compiled.\nI don't know why /foo/ should be outdated at this point.\n. There should also be an option to specify files that should be ignored, e.g. favicon.ico (which can, but doesn't have to be, referenced in html files).\n. I was just thinking of HTML to be honest. But what you say makes a lot of sense. HTML/CSS plus plug-ins would be great!\n. Actually, let me elaborate.  I wasn't thinking of HTML at all.\nWhen nanoc generates the site from the source, it will build up a list of files that are being generated, including dependencies.\nWouldn't it be enough for this check to show all files that no other files depend on (but that end up in output)?  Wouldn't this mean that no internal page references them?\nI don't know anything about the nanoc architecture, so I'm probably missing something obvious, but this is what I had in mind when I suggested the check.\n. There's another reason this would be helpful: for some reason, the html check often fails for me due to proxy errors or network timeouts with the W3C site.  Now that I've about 200 pages in my site, nanoc check html has never completed successfully because of such network errors.  Caching the results would mean that it would eventually work despite such network errors.\n. Thinking about this some more, I believe there are actually two separate requests:\n- The ability to run the checks only on modified content.  It seems the postprocess block you mentioned may be able to that.\n- Caching the results of all checks, so running nanoc check --deploy again is faster.\n. ",
    "chiarello": "Not really. That patch constrains you to have the toc flowing togheter with the html. For instance, I'm using the HTML and HTML_TOC to build the page and its toc into different reps.\nThe solution presented in #200 is good, but it doesn't allow you to perform only the HTML_TOC pass alone.\n. ",
    "antoinerg": "Great to know this is on the to-do list! Keep up the good work.\n. ",
    "raybesiga": "@bobthecow typo, but glad you had a laugh from it.\n. ",
    "theycallmeS": "Found a correct way to do such thing:\n\nThe static data source, bundled with nanoc, does include the file extension in the identifier, and it also marks all items as binary, which makes this data source ideal for handling files that should not be processed but simply copied to the output directory. It loads items from static/ instead of content/. So, for example, an item at /static/assets/fonts/foo.eot will get an identifier /assets/fonts/foo.eot/.\n\nRead more on static data source here\n. Now I see the logic, thanks.\nIf there was a way to tell which items were indexes originally, then I could treat them separately, converting to their initial structure (through item.identifier + 'index.html' routing). \nAlso, shouldn't passthrough method be modified to support such behavior?\n. Excellent! thanks, Justin\n. ",
    "remko": "So, are there any more concerns? Thanks!\n. Hi Denis,\nThe Git description indeed more clearly explains why '*/' is what you want in the example.\nI sort of guessed that was how the globs were supposed to work from the examples from the documentation, but I hit a case where it didn't seem to have this behavior, but rather the default behavior of fnmatch without flags. Unfortunately, I don't remember where it was, so you can close this, and if I hit it again I'll reopen it with more explanation. Now I understand how it's supposed to work, so I know what to look for.\nAnd I understand why you don't want to document that you use fnmatch. \n. AFAICT, this was introduced with a feature that's not on the release branch yet. (probably excludes for external link checks)\n. The check seems fixed in the release-4.1.x branch. However, my site no longer compiles with that one. Not sure if it's my fault, or whether I should file another issue:\nNanoc::Int::ItemRepRouter::IdenticalRoutesError: The item representations <Nanoc::Int::ItemRep name=\"default\" binary=false raw_path=\"output/index.html\" item.identifier=\"/index.html\"> and <Nanoc::Int::ItemRep name=\"default\" binary=false raw_path=\"\" item.identifier=\"/index.html\"> are both routed to /index.html.\n. It seems the preprocess block is run twice, and I add that item in the preprocess block.\n. Yup, works now, thanks!\n. ",
    "jkm": "Sorry for the noise. I was on 3.5.0. Forgot to to bundle update.\n. ",
    "matthiasbeyer": "The site attribute is not set, too. \n. Updated.\n. ",
    "gjtorikian": "Indeed.\n. I was looking forward to use this. It doesn't appear to be in the most recent release of 3.6.9. Is that intentional? \n```\nMessage:\nRuntimeError: I don\u2019t know how to highlight code using the \u201crouge\u201d colorizer\nCompilation stack:\n\n[item]   /changes/2013-10-04-oauth-changes-coming/ (rep default)\n\nStack trace:\n\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/filters/colorize_syntax.rb:330:in `highlight'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/filters/colorize_syntax.rb:127:in `block in run'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nokogiri-1.6.1/lib/nokogiri/xml/node_set.rb:237:in `block in each'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nokogiri-1.6.1/lib/nokogiri/xml/node_set.rb:236:in `upto'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nokogiri-1.6.1/lib/nokogiri/xml/node_set.rb:236:in `each'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/filters/colorize_syntax.rb:106:in `run'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/base/compilation/filter.rb:122:in `setup_and_run'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/base/result_data/item_rep.rb:344:in `filter'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/base/compilation/item_rep_proxy.rb:47:in `filter'\n/Users/garentorikian/github/internal-developer.github.com/vendor/gems/ruby/1.9.1/gems/nanoc-3.6.9/lib/nanoc/base/compilation/rule_context.rb:61:in `filter'\n  ... 28 more lines omitted. See full crash log for details.\n\n```\n. :+1: Thanks!\n. Sorry to be rude, but, I'm interested in using Rouge for developer.github.com. I was wondering if 3.7 was landing soon?\nThanks and :heart:. \n. You're the best; I know what it's like to manage an OSS project so I apologize for prodding! :heart_eyes_cat: \n. Ah, that's awesome!\nBy the way, it's look like I'll probably be porting our main  site to Nanoc, too. It's suffering under abysmal performance with Jekyll\u2014about a minute build times locally and nearly ten minutes (!) in production. The problem is that I've monkey-patched the code (via plugins) so much to do what we need it to do that it's getting complicated to wrap my head around it. I just couldn't find a way to hook into key parts of the compilation. I only yesterday realized that porting over to Nanoc 4 makes much more sense. I love it! I can hook into the file system before files are read (which we need), I can do some preprocessing, and I can apply the same filters to the same bits of content.\nThat'll bring our two major sites ({help|developer}.github.com under the same engine. Hopefully I'll toss over more PRs to Nanoc4 if I find more issues. \n. My specific use-case is in generating additional content that falls out of \"normal\" compilation. For example, given a Markdown file that looks like this:\nmarkdown\ntitle: A title\nredirects_from:\n  - /some-title/\n  - /nowhere/\nI want two new HTML files in output/some-title/index.html and output/nowhere/ with some client-side set up, like:\n<meta http-equiv=refresh content=\"0; url=/a-title/}\">\n<h1>Redirecting...</h1>\n<a href=\"/a-title/\">Click here if you are not redirected.</a>\n<script>location='/a-title/'</script>\nI started doing this in a preprocess, and was adding new Nanoc::Int::Items to the mutable collection, but then the build started complaining and wanting to track those new items with compile and routing steps. My workaround for that started to feel hokey and I just wanted to be able to operate with the same data, but outside all the Rules.\n\nThis could be extended by letting item instances (and item rep instances) within the postprocess block have #updated? and/or #created? methods, so you can act on updated/created items only.\n\nI like that a lot.\n. Yeah, I actually solved my initial problem outside of the scope of needing a postprocessor. But given that it's a long-standing request I thought I might try my hand at it. \n. I can't seem to figure out how to get access to whether an item was created or modified. The only place I see such information use is right after a rep is written and notified. What would be the best way to store this information so it remains in the postprocess step? Should each item handle its own state via a new attribute?\n. I feel like I'm pretty close to getting #created? and #modified? working. Well, I mean, these methods now exist and they do something, but something feels very dirty and wrong. I like the idea of setting the item.rep status after the compilation, but I'm not sure I've done it correctly. Unfortunately I'm going to have to tap out of continuing this work\u2014I'm running up against the limitations of my knowledge of nanoc internals here. :sweat_smile:\nOn the bright side, it does seem like postprocessing as a whole is working.\n. Ah, thanks for the breakdown. I think the naming of the class was confusing me, without doing any inspection. I believe the class is actually called when the rep is going to be written to disk. It didn't occur to me that its created/modified checks could still be useful.\nI took nearly all of your suggestions. I kept the modified method on PostCompileItemView, though, since it seems like a useful helper to have.\n. Fair enough\u2014it's your project! :fireworks: \n. Hm. Maybe ItemRepRepo isn't meant to be in the gem? In that case, how does one add a new rep to an existing item?\n. Doh. Super clear. Sorry! I was looking for more documentation in reps and could only find the test cases as clear examples.\n. Looks like item.reps << is forbidden:\nNoMethodError: undefined method `<<' for #<Nanoc::ItemRepCollectionView:0x007fd7961c36d8>\nI only see that method defined for ItemRepRepo, which is probably where I got my first idea to use it from. \n. It sounds like instead of doing this in 4.0, I should just wait patiently for 4.1 :D If I can't modify item.reps in 4.0, and ItemRepRepo does not yet exist, I simply don't see a way to modify the reps. :worried:\n. Just as there's an option for prune to not purge certain paths, it might be nice to have an explicit \"include these files\" option. This would allow me to define .nojekyll but ignore every other dotfile.\nYour explanation reminds me that Jekyll has a similar configuration option called include for this same reason.\n. Hah! Thank you. \ud83d\ude01 \n. I dropped down to 4.0.2 and the error went away. And as one might expect, commenting out item_rep_selector.rb:27 has the site build as well. \n. > Is this for the GitHub developer site?\nIt is not, it is sadly for a closed source site. :frowning: \n. Your hypothesis sadly did not work! I rm -rf tmp/ but it still did not compile.\nI can send maybe a small reproducible test case instead of the whole directory? Will that help? I can get it crashing with just a 404.html and another file.\n. I can't repro with the public developer site, so now I'm thinking I've bungled something on my end. Looking into it a bit before providing you with a zip and/or shutting this down.\n. Interesting.\nI have this line in my default layout:\nhtml\n<% @meta_description = @item[:meta_description] || @item[:intro] || safe_embed(@item.compiled_content)[0..200] %>\nIf I remove @item.compiled_content, the build is successful. Is it possible these are like, getting collided somewhere?\n. Cool, that'll work. raw_content also seems to work. \nFeel free to close this or keep it open if it's something you want to work on? I'm not entirely clear what the problem is, heh. And thanks for your quick replies!\n. Nice!\n. Unfortunately, while using compiled_content, this still yields an error. Not sure if you wanted that fixed or not based on \n\n(It might be the case that Nanoc 4.1.0a1\u2019s behavior is in fact more correct.)\n. Confirmed fixed in 4.1.0rc1. Thanks!\n. Yeah I'm using '4.1.0rc1'.\n. I can't reproduce this, which means I did something silly?\n. :heart: \n. :+1: I like sweetness.\n. \n",
    "radar": "Excellent! Thanks @ddfreyne and @gettalong.\n. Figured it out!\nI needed to put this in my upstart job:\nenv LANG=en_US.UTF-8\nThen it uses the UTF-8 encoding instead of US-ASCII.\n. ",
    "jugglinmike": "I hit this last night and assumed I was doing something wrong. Nice work on the quick patch, @ddfreyne and @gettalong!\n. I'm not sure what went wrong here. The tests pass on my machine (running 1.9.3). @ddfreyne Any advice you can give would be very much appreciated.\n. I've implemented dynamically-generated \"Category\" pages using a similar technique to the one described here:\nhttp://ithaca.arpinum.org/2012/03/30/adding-categories.html\nIt's sounding like this might be more of an unsupported use than I first thought. If there is a better way to do this, I'm all ears!\n. Yes, I am... I think I can see where this is going, though--tell me if I'm correct:\nI should not explicitly set the content_filename of dynamically-created items. Instead, I should use a nanoc route to designate the name of a generated page.\n. Thanks, Denis!\n. Thanks for looking into this! That's a lot of text, so I've pasted it into a Gist to minimize the noise on this thread: https://gist.github.com/jugglinmike/ab9fa6c8e2d51323f1c7\n. @ddfreyne I pulled down master@50e86d0c2d32599a52d98185eac5d4bcad2fbf95 , ran bundle install, then rake. This time, I'm seeing a single failure from this assertion in test/test_gem.rb:\n```\nFinished tests in 28.810284s, 21.4507 tests/s, 56.6464 assertions/s.\n1) Failure:\nNanoc::GemTest#test_build [/home/mike/projects/nanoc/test/test_gem.rb:25]:\nFailed assertion, no message given.\n618 tests, 1632 assertions, 1 failures, 0 errors, 15 skips\n```\nI don't think I can verify the resolution of the bug until I know all the tests pass (when skipping the SASS filter). Any idea on what might be going wrong here?\n. > Can you run on release-3.6.x using bundle exec rake ARGS=\"--verbose\"?\nSure:\n```\nmike@rockman nanoc$ bundle exec rake ARGS=\"--verbose\"\nRun options: --seed 46272\nRunning tests:\n.........................................................................................done in 0s 62ms\n..........................................................................................................................F........................................S......S.....S..........S............................S...S..E....................................................................................................................................................................................................................................................................................\nFinished tests in 29.688326s, 19.8394 tests/s, 53.4554 assertions/s.\n1) Failure:\ntest_run_ok(Nanoc::Extra::Checking::Checks::HTMLTest) [/home/mike/projects/nanoc/test/extra/checking/checks/test_html.rb:19]:\nFailed assertion, no message given.\n2) Error:\ntest_filter(Nanoc::Filters::RDocTest):\nArgumentError: wrong number of arguments (0 for 1)\n    /home/mike/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/rdoc-4.0.0/lib/rdoc/markup/to_html.rb:44:in initialize'\n    /home/mike/projects/nanoc/lib/nanoc/filters/rdoc.rb:15:innew'\n    /home/mike/projects/nanoc/lib/nanoc/filters/rdoc.rb:15:in run'\n    /home/mike/projects/nanoc/lib/nanoc/base/compilation/filter.rb:122:insetup_and_run'\n    /home/mike/projects/nanoc/test/filters/test_rdoc.rb:13:in block in test_filter'\n    /home/mike/projects/nanoc/test/helper.rb:38:inif_have'\n    /home/mike/projects/nanoc/test/filters/test_rdoc.rb:8:in `test_filter'\n589 tests, 1587 assertions, 1 failures, 1 errors, 6 skips\n```\n\nAlso, can you run gem build nanoc.gemspec on master and see what error this gives?\n\nNo error there:\n[mike@rockman nanoc](release-3.6.x)$ git checkout master\nSwitched to branch 'master'\n[mike@rockman nanoc](master)$ gem build nanoc.gemspec\n  Successfully built RubyGem\n  Name: nanoc\n  Version: 3.7.0\n  File: nanoc-3.7.0.gem\n. @ddfreyne You were right, reference to release-3.6.x was super-old:\n```\n$ git show release-3.6.x\ncommit 41beb789b03fcc98cc454344e899e9dd7fd913ce\nAuthor: Denis Defreyne denis.defreyne@stoneship.org\nDate:   Tue Mar 12 22:26:11 2013 +0100\nSimplify external links test case\n\n```\nSorry about that! I've fetched the latest, and now it reports as:\n```\n$ git show upstream/release-3.6.x\ncommit 762282d13c7f875b41e68aa3bea89b58040b799b\nAuthor: Denis Defreyne denis.defreyne@stoneship.org\nDate:   Mon Dec 9 21:18:11 2013 +0100\nFix missing # in issue reference\n\n```\nAnd the test output, from that commit (I've truncated to just the results, but I've uploaded the complete log as a separate gist).\n```\n$ bundle exec rake ARGS=\"--verbose\"\nFinished tests in 34.592793s, 17.8072 tests/s, 47.9291 assertions/s.\n1) Skipped:\nNanoc::Filters::AsciiDocTest#test_filter [/home/mike/projects/nanoc/test/helper.rb:240]:\nCould not find external command \"asciidoc\"\n2) Skipped:\nNanoc::Filters::ColorizeSyntaxTest#test_simon_highlight [/home/mike/projects/nanoc/test/helper.rb:240]:\nCould not find external command \"highlight\"\n3) Skipped:\nNanoc::Filters::ColorizeSyntaxTest#test_colorize_syntax_with_default_colorizer [/home/mike/projects/nanoc/test/helper.rb:240]:\nCould not find external command \"pygmentize\"\n4) Skipped:\nNanoc::Filters::ColorizeSyntaxTest#test_pygmentize [/home/mike/projects/nanoc/test/helper.rb:240]:\nCould not find external command \"pygmentize\"\n5) Skipped:\nNanoc::Filters::MarkabyTest#test_filter [/home/mike/projects/nanoc/test/filters/test_markaby.rb:8]:\nMarkaby is not compatible with 1.9.x\n6) Skipped:\nNanoc::Filters::PandocTest#test_filter [/home/mike/projects/nanoc/test/helper.rb:240]:\nCould not find external command \"pandoc\"\n7) Failure:\nNanoc::GemTest#test_build [/home/mike/projects/nanoc/test/test_gem.rb:25]:\nFailed assertion, no message given.\n616 tests, 1658 assertions, 1 failures, 0 errors, 6 skips\n```\n. @ddfreyne strange, no errors:\n[mike@rockman nanoc](release-3.6.x)$ gem build nanoc.gemspec\n  Successfully built RubyGem\n  Name: nanoc\n  Version: 3.6.7\n  File: nanoc-3.6.7.gem\n[mike@rockman nanoc](release-3.6.x)$ echo $?\n0\n. Here you go:\n```\n$ git show\ncommit 126404d5532e37599b8dac2ad28639ae182f6d8b\nMerge: 318d1e4 030f864\nAuthor: Denis Defreyne denis.defreyne@stoneship.org\nDate:   Fri Dec 27 11:19:12 2013 -0800\nMerge pull request #379 from nanoc/bug/missing-compilation-durations\n\nRestore missing compilation durations\n\n$ gem build nanoc.gemspec\n  Successfully built RubyGem\n  Name: nanoc\n  Version: 3.6.7\n  File: nanoc-3.6.7.gem\n$ git diff\ndiff --git a/test/test_gem.rb b/test/test_gem.rb\nindex 2441dac..de2bb5e 100644\n--- a/test/test_gem.rb\n+++ b/test/test_gem.rb\n@@ -22,6 +22,8 @@ class Nanoc::GemTest < Nanoc::TestCase\n       'stdin'  => '',\n       'stdout' => stdout,\n       'stderr' => stderr)\n+    STDOUT.puts stdout.inspect\n+    STDOUT.puts stdout.inspect\n     assert status.success?\n     files_after = Set.new Dir['*/']\n$ bundle exec rake ARGS=\"--verbose\"\n```\nAs expected, lots of text generated by that last command. I've stored it in this gist to keep things readable here.\n. How am I so bad at this? Let me try again:\n```\n$ git show\ncommit 126404d5532e37599b8dac2ad28639ae182f6d8b\nMerge: 318d1e4 030f864\nAuthor: Denis Defreyne denis.defreyne@stoneship.org\nDate:   Fri Dec 27 11:19:12 2013 -0800\nMerge pull request #379 from nanoc/bug/missing-compilation-durations\n\nRestore missing compilation durations\n\n$ gem build nanoc.gemspec\n  Successfully built RubyGem\n  Name: nanoc\n  Version: 3.6.7\n  File: nanoc-3.6.7.gem\n$ git diff\ndiff --git a/test/test_gem.rb b/test/test_gem.rb\nindex 2441dac..7c890bd 100644\n--- a/test/test_gem.rb\n+++ b/test/test_gem.rb\n@@ -22,6 +22,8 @@ class Nanoc::GemTest < Nanoc::TestCase\n       'stdin'  => '',\n       'stdout' => stdout,\n       'stderr' => stderr)\n+    STDOUT.puts stdout.inspect\n+    STDOUT.puts stderr.inspect\n     assert status.success?\n     files_after = Set.new Dir['*/']\n$ bundle exec rake ARGS=\"--verbose\"\n```\nOutput in this gist.\n. Yup--from above:\n$ gem build nanoc.gemspec\n  Successfully built RubyGem\n  Name: nanoc\n  Version: 3.6.7\n  File: nanoc-3.6.7.gem\n. Ah, okay. Thanks for clearing that up, guys.\nThis dependency between the LESS layout and the filesystem datasource is a little implicit, so I'm wondering if you'd be interested in a patch like this:\n``` diff\n        # Find matching item\n        @items.find do |i|\n          next if i[:content_filename].nil?\n          Pathname.new(i[:content_filename]).realpath == imported_filename\n        end\n      end.compact\n\nif imported_items.length != imported_filenames.length\nthrow 'Could not load content from all items imported by item \"#{@item[:content_filename]}\"'\nend\n+\n      # Create dependencies\n      depend_on(imported_items)\n\n```\n. Fair enough. Thanks again!\n. This bug causes redundant compilation, so a higher-level test may be appropriate.\n. Hey @ddfreyne. I think this is a bug in nanoc. Let me explain\nThe DirectedGraph's internal vertices hash is keyed on the size of the hash as each vertex is added. If any vertex but the \"newest\" is removed from this hash at any time, the keys will no longer be contiguous.\n``` ruby\nexample internal @vertices data structure\n{\n  1 => [:item, 'example1'],\n  3 => [:item, 'example3']\n}\n```\nThe computed edges property is composed of tuples based on the (potentially non-contiguous) hash keys.\n``` ruby\nexample edges as computed by DirectedGraph#edges\n[\n  [1, 3],\n  [3, 1]\n]\n```\nSo far so good. The problem comes when DependencyTracker stores the state of the graph. Here, it uses the computed vertices data structure. This data structure is a \"defragmented\" form of the internal @vertices hash.\n``` ruby\nexample vertices as computed by `DirectedGraph#vertices\n[\n  [:item, 'example1'],\n  [:item, 'example3']\n]\n```\nWhen DependencyTracker loads the data, it uses these two computed structures to re-build the graph. This inconsistency can cause nanoc to behave as if some items have been removed. This is the bug that I'm seeing on my site, where running rm -rf tmp && nanoc compile && nanoc compile triggers re-compilation of representations whose items have not changed.\n. I'm not explicitly removing any items. I guess I'll have to dig around in my site's layouts for suspicious inlined Ruby...\n. To make this process a little easier, I made the following change:\ndiff\ndiff --git a/Rules b/Rules\nindex c522a62..fc55774 100755\n--- a/Rules\n+++ b/Rules\n # preprocess lets you access the @items array before any compilation\n preprocess do\n+  @items.freeze\nThis immediately failed because I am currently (intentionally) creating new items to model \"categories\" on my site.\nI commented out the lines that push new \"category\" items into the @items array, and the site compiled successfully, which makes me believe there is no further modification to the items array. The site also continued to exhibit the same overcompilation behavior, so the \"category\" creation is not causing this issue.\nIs my approach to detecting item removal sound? With this change, is there any other way that  my code could be removing items?\n. @ddfreyne correctly identified the underlying problem as a user error (and here I thought I was so clever with my sparse arrays). Further, he has landed #435 to provide an explicit error in the case that others make the same mistake. Thank a lot, Denis!\n. I verified this manually, but I'm wondering if we can back this with a test. test/test_gem.rb seems a likely candidate. It probably requires a lot more infrastructure than that file provides (we'd have to temporarily move this project's own Gemfile).\nIt's likely more appropriate to open a separate issue to create tests for nanoc's executable. Does this seem like a good idea?\n. Our dependence on Bundler is no problem for testing this change--it just needs to ensure that the executable functions correctly in the absence of a Gemfile. But I don't mean to bikeshed; you should open a dedicated issue if you think that's worthwhile.\n. > The tests are likely failing due to Gemfile.lock not having 3.7.3 but rather 3.7.2 in it.\nWoa, nice detective work, there. I'm on it!\n. @ddfreyne I incorporated your feedback, and it almost passes the build. Now, instead of seeing build errors across the job matrix, all jobs pass except the jruby-1.7.11 / DISABLE_NOKOGIRI=1. Any ideas?\n. @ddfreyne Alrighty. Is there something more I can do, then? Maybe disabling/removing the Nanoc::CLI::Commands::WatchTest#test_notify test?\n. @ddfreyne I've pushed a commit to address your feedback. Not sure if/when you'd like to squash--say the word and I'll do it for ya\n. My pleasure :)\n. Great, thanks! I'll hold off on moving that class variable till you get a chance to finish.\n. Alrighty, I've rebased and incorporated your feedback in separate commits. I'm happy to squash when you think this is ready\n. Excellent--all squashed\n. My pleasure :)\n. The guest OS is definitely arbitrary. Trusty is a widely-deployed, stable, free, and open source option, which seemed like the most relevant formal criteria we could apply.\nI think you're right about Windows users--they stand the most to gain from this. But even on Linux, I have a hard time with tools like rbenv and rvm.\nI understand your reluctance to accept this, as it represents a commitment to maintain another piece of infrastructure. The reason it may be preferable to documentation is that it is machine-executable, so issues of \"staleness\" and developer error are less prominent.\n. My motivation here was not to suggest a single preferred way to consume nanoc. I agree with the recent comments that such a recommendation would be inappropriate for inclusion in the project's source tree (but that it could work as part of the general user documentation).\nInstead, this would be a way to develop nanoc. The goal here would be to make it easier for potential contributors to get involved in the project. If that was decided to be something in need of improvement, introducing a Vagrantfile (even one that is somewhat opinionated) into the project itself would make sense.\n. Sure thing. I appreciate the careful consideration that went into this. One important detail that makes this distinct from a general-purpose configuration for any Ruby project is the build-essential and zlib1g-dev packages--some minor gotchas to compiling some of nanoc's gem dependencies with native code.\nAnother approach would be to document these details, although I suppose in some ways that is the job of the other gems themselves... At the same time, it kind be kind of disruptive for new contributors to run bundle install and then have to search the web to resolve the problem(s).\n. I don't write nearly enough Ruby to know any better :P What would you recommend?\n. Ah, okay. Fixed.\nI'm curious: is this purely stylistic or is there some performance consideration as well?\n. Oof, this was sloppy on my part. Fixing...\n. Sure!\n. 1. Prevent insertion of insecure \"active content\" (such as JavaScript) that could generate misleading content or steal private information\n2. Prevent passive leaking of information--HTTP requests are sent in-the-clear and might leak information about the user's browsing session\nUsers who navigate using insecure hyperlinks are susceptible to #2, but navigation is performed actively by the user, and it's harder to achieve the task of \"saving users from themselves\". Plus, the current site's maintainer has no control over the availability of SSL on remote servers.\n. Ah yeah, much better that way.\n. ",
    "envygeeks": "@ddfreyne has this been pushed up into stable yet?\n. @ddfreyne We've rewrote the external_links checker if you would like to just merge what we did, it uses typhoeus now with a backoff time on failures: https://github.com/rvm/rvm-site/blob/master/lib/external_links.rb\n. Closed: It's being ignored.\n. This is about keeping the way you guys recommend handling helpers out of my testing environment.  I do not need top level includes inside of my RSpec, especially when I am not testing Nanoc I am testing my own code. Some people might not care about pollution but I do.  I also want to specifically control my load order, I also want to specifically control what is loaded and when.  Most things that autoload have the ability to allow you to exclude files from loading.  Whether or not you implement this is fine since I've already implemented it myself and it's ported across all projects I control, it was simply an idea.\n. ",
    "empo": "Thanks! See you later then :+1: \n. ",
    "cakebaker": "I will try.\n. Sorry, somehow I messed up this pull request :|\n. ",
    "xbonell": "Hi Denis, sorry for the late reply, been out of the office for a while. There was no bug, something was broken in my rvm setup, the sass filter is running fine after a fresh install.\niMac:site xbonell$ irb\n1.9.3-p392 :001 > require 'sass'\n => true \n1.9.3-p392 :002 > Sass::Util\n => Sass::Util \n1.9.3-p392 :003 >\n. ",
    "jokester": "@ddfreyne\nGlad to know it's going to be improved. Will just use the patch locally before that.\n. Made #all_split_files_in follow symlink for up to 10 times, in pull request #300 .\n. ",
    "igregson": "Yes, wonderful, that did the trick!\nI had previously looked through the character troubleshooting documentation, but couldn't find a config.yaml file. Should have thought to simply look for the only .yaml file in the root! \n. very good!\nmany thanks for your help.\nAnd a quick question, should you have a minute to respond:\nI got a bit impatient after I couldn't solve this past issue (until your \nstellar feedback just now) and went ahead and began working with \nMiddleman. Now I'm unsure of which one to first learn. Any thoughts?\n- isaac\n------ Original Message ------\nFrom: \"Denis Defreyne\" notifications@github.com\nTo: \"nanoc/nanoc\" nanoc@noreply.github.com\nCc: \"Isaac Gregson\" mulchkinn@gmail.com\nSent: 5/24/2013 9:24:05 AM\nSubject: Re: [nanoc] Compiling Error - Windows 7, not valid Windows-1252 \n(#317)\n\nOk, awesome! I\u2019ll close the issue.\n\u2014\nReply to this email directly or view it on GitHub.\n. no! my fault... the documentation is correct and clearly states: \"open nanoc.yaml (or config.yaml on older nanoc sites)\" ...seems it was an old thread i had been reading somewhere that only referenced the old config.yaml\n\nsorry for any confusion. \n. ",
    "AdrienGiboire": "Ok my bad! It wasn't in the data source configuration. Thanks!\n. ",
    "GrooveStomp": "Hi Denis!\nI've tried uninstalling and reinstalling to no avail.\nAt home I set up a new VM with Linux Mint and a fresh Ruby environment with RBenv and it worked fine...\nSo, unfortunately all I can say is: \"it worked in a clean environment.\"\nI can continue investigating if you have further suggestions.\n. ",
    "dtenenba": "I experienced this issue (with pry as well as sass) and fixed it by removing the ruby I was running (rbenv uninstall 2.1.1) then reinstalling it (rbenv install 2.1.1) and then reinstalling bundler and reinstalling my gems with bundle install.\n. Apparently so, because when I did sudo gem update on the system ruby I started having the same problem. \nNow I have to figure out where the duplicate idenfitiers are coming from. Is there more information somewhere about this change and how to change my site code in order to fix it? I'm not having much luck finding any. Thanks.\n. Thanks, sorted it out.\n. ",
    "smlx": "Thanks for the suggestion. Unfortunately, specifying the class name in my Rules file failed as it is loaded before the template is and so the ErectorTemplate class is undefined. Instead, I dynamically instantiate the class in the filter. I've also added the ability to produce pretty-printed HTML output.\nI've updated the filter below:\n``` ruby\nencoding: utf-8\nmodule Nanoc::Filters\nclass Erector < Nanoc::Filter\nidentifier :erector\n\nrequires 'erector'\n\n# content:  This value is ignored.\n# params:   In your Rules file assign :class to the name of the class in\n#           your erector template (ErectorTemplate by default).\n#           Set :prettyprint to true for nicely laid out HTML. Otherwise\n#           HTML is minified (default).\ndef run(content, params={})\n\n  require File::join(Dir::pwd, 'layouts', filename.split.last).chop\n\n  template = params[:class] || 'ErectorTemplate'\n\n  Object::const_get(template).new(assigns).to_html(:prettyprint =>\n                                                   params[:prettyprint])\n\nend\n\nend\nend\n```\n. Sure that sounds good, though I'm pressed for time at the moment and might not get to it for a few weeks...\n. ",
    "sowcow": "it is slim escaping html, use == yield\n. ",
    "jwoertink": "Interesting. I wonder why you don't have to do that in rails or sinatra. Maybe Tilt takes care of it in rails? Well, thanks for that. Maybe I can add this into the wiki?\n. ",
    "pavelbeliaev": "I could not reproduce this bug.\nruby 1.9.3p448 (2013-06-27 revision 41675) [x86_64-linux]\nhaml (4.0.3)\nnanoc (3.6.4)\nCompilation is succesful.\n```\npvb@bood:~/scripts/indent$ nanoc\nLoading site data\u2026 done\nCompiling site\u2026\nSite compiled in 0.05s.\n```\n. Yes, very strange. Haml is a pure ruby => maybe a problem in the implementation\nof ruby interpreter for a specific platform. But in my view, this is unlikely.\nAnyway, Exception raise a specific piece of code in haml parser module.\nHere it is.\nruby\n def plain(line, escape_html = nil)\n      if block_opened?\n        raise SyntaxError.new(Error.message(:illegal_nesting_plain), @next_line.index)\n      end\nlook the next one\n``` ruby\n    def block_opened?\n      @next_line.tabs > @line.tabs\n    end\ndef tabs\n    @tabs ||= parser.compute_tabs(self)\nend\n\n```\nAnd so on.\nTime to debug ) \nI think that a little bit of 'puts()' is a best way to understand what's going on.\n. ",
    "emarthinsen": "That's very strange. I still get the error. Here are the versions I'm using:\nruby 1.9.3p448 (2013-06-27 revision 41675) [x86_64-darwin11.4.2]\nhaml (4.0.3)\nnanoc (3.6.4)\nAlmost exactly the same. Could there be something else that is throwing\nthis off?\nOn Thu, Sep 19, 2013 at 5:07 AM, bood-pvb notifications@github.com wrote:\n\nI could not reproduce this bug.\nruby 1.9.3p448 (2013-06-27 revision 41675) [x86_64-linux]\nhaml (4.0.3)\nnanoc (3.6.4)\nCompilation is succesful\npvb@bood:~/scripts/indent$ nanoc\nLoading site data\u2026 done\nCompiling site\u2026\nSite compiled in 0.05s.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nanoc/nanoc/issues/331#issuecomment-24725790\n.\n. \n",
    "vigneshsarma": "@ddfreyne my mistake, didn't read the docs correctly. Sorry. And that suggestion seems like the best way possible...\n. ",
    "sprogger": "Yes i shall. Thanks.\nOn 10/09/2013 8:00 PM, \"Denis Defreyne\" notifications@github.com wrote:\n\nIf the error occurs again, can you use gist http://gist.github.com to\nshare the crash.log file?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nanoc/nanoc/issues/334#issuecomment-24148517\n.\n. Does that mean i need both ruby versions? Is 1.9 readily acceptable unlike\npython 2.x versus 3.x?\n\nI run os x but use mint for open source.\nOn 10/09/2013 8:00 PM, \"David Everitt\" notifications@github.com wrote:\n\nYou may run into other issues running nanoc on Ruby 1.8.7 as 1.9 is a min\nreq for some features.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nanoc/nanoc/issues/334#issuecomment-24148424\n.\n. next you are going to tell me it is the year 2020 and I have been in a deep sleep :-)\n\nso I should upgrade my ruby and ruby gems for mint 15 and OS X?\nOn 10/09/2013, at 8:33 PM, Justin Hileman notifications@github.com wrote:\n\n@sprogger 2.0 is the current stable version of Ruby. 1.9 is a legacy version now :)\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mdekstrand": "I don't remember the exact error, and am having difficulty reproducing right now.  It seemed to be a problem with filtering out the '\u2026' characters (it complained that a string did not have valid multibyte characters, in the CLI output sanitization stack).\n. Just encountered the error again, so I can provide a stack dump :). nanoc 3.6.5 on JRuby:\n```\nCaptain! We've been hit!\nMessage:\nRegexpError: invalid multibyte character: /\u00e2\u0080\u00a6/\nCompilation stack:\n(empty)\nStack trace:\n\norg/jruby/RubyString.java:3099:in `gsub'\norg/jruby/RubyString.java:3067:in `gsub'\n/home/michael/Research/LensKit/website/gems/jruby/1.9/gems/nanoc-3.6.5/lib/nanoc/cli/stream_cleaners/utf8.rb:11:in `clean'\n/home/michael/Research/LensKit/website/gems/jruby/1.9/gems/nanoc-3.6.5/lib/nanoc/cli/cleaning_stream.rb:115:in `clean'\norg/jruby/RubyArray.java:1617:in `each'\norg/jruby/RubyEnumerable.java:815:in `inject'\n/home/michael/Research/LensKit/website/gems/jruby/1.9/gems/nanoc-3.6.5/lib/nanoc/cli/cleaning_stream.rb:115:in `clean'\n/home/michael/Research/LensKit/website/gems/jruby/1.9/gems/nanoc-3.6.5/lib/nanoc/cli/cleaning_stream.rb:44:in `write'\norg/jruby/RubyKernel.java:1361:in `warn'\nfile:/home/michael/Research/LensKit/website/jruby-1.7.4/lib/jruby.jar!/jruby/kernel/signal.rb:27:in `trap'\n  ... 15 more lines omitted. See full crash log for details.\n\nIf you believe this is a bug in nanoc, please do report it at\n-> https://github.com/nanoc/nanoc/issues/new <-\nA detailed crash log has been written to ./crash.log.\n```\nRunning with LANG=en_US.UTF-8 makes it go away.\n. I'm not a Ruby programmer, but this looks like it will fix it. :+1:\n. ",
    "rubytastic": "Nevermind , Switched to middleman which seems to have compass out of the box and have more up2date documentation.\n. ",
    "zorbash": "I think the documentation should be updated so that the quick start guide prevents issues like this. I'm willing to submit PR.\n. ",
    "juanghurtado": "My fault. So sorry. Issues with rbenv. Closing now.\n. ",
    "6aKa": "If in route rule i use nil i skiped file from output directory. So I think that no needed compile item, which will not be written to output.\nIf in compile rules I use heavy filters(cpu, disk, memory) - I compile items for nothing.\nTo work around this behavior - need duplicate conditions for skiping files in route and compile blocks.\n. I want standart metod for skip item from workflow.\nIn preprocess like item.delete metod, or item.identifier=nil - skip item from route and compile rules.\nUse case: check binary items for checksum, for video using codecs etc.\nIn route \"return nil\" - skip item from compile rules.\nThis will avoid duplication of rules and the use of intermediate attributes.\n. ",
    "Leolik": "+1\n. a problem in nesting import scss files\nyou can check https://bitbucket.org/leolik/my_nanoc_default/src\n1) clone git repository\n2) start project bundle exec guard or ./run.sh\n3) for example, create new file content/scss/blocks/_b-test.scss with content:\ncss\n.b-test {\n  width: 100%;\n}\n4) add:\ncss\n@import \"blocks/b-test\";\nto the content/scss/screen/_home.scss\n5) save created _b-test.scss file and after try add/remove some css options in this file. In console you will see only  12:03:12 - INFO - Compilation succeeded., but style.css file not will be updated with new styles. If you add/remove some css options in _home.scss file, style.css will be updated correctly. _home.scss imported in style.scss.\nProblem reproduced only in nanoc 3.6.6, in <=3.6.5 - all work correctly.\nP.S. Sorry for my English.\n. I think I understand what the problem. You something change with scss(sass) file paths. If use my example from previous comment and change\ncss\n@import \"blocks/b-test\";\nto the\ncss\n@import \"../blocks/b-test\";\nnanoc 3.6.6 compile style.css correctly. \nBut compass and sass applications works correctly with relative paths and absolute paths from the scss(sass) root, nanoc 3.6.6 not work with absolute paths from the scss(sass) root (( I think it's a bug, because, for using nanoc 3.6.6 need change paths for scss files in all projects, where using absolute paths ((\n. Maybe @chriseppstein from Sass team help us?\n. I checked this fix - bug #350 not reproduced! Thanks guys!\n. I use Ubuntu 14.04 amd64. Permissions for /tmp = 777\nBug reproduced in nanoc 3.7.*\n. Sorry, but bug still reproduced ((\nI set sudo chmod 1777 /tmp but bug reproduced\n. Forgive me for so long did not answer. I try sudo chmod 1777 -R /tmp and removing sudo rm -rf /tmp/*nanoc*, but bug still reproduced ((\n. Ubuntu 14.04\n/tmp - not a symlink\n. ",
    "chriseppstein": "The :filesystem_importer option is used to transform strings passed in the :load_paths array into importer objects. So an existing importer object on the load_path could potentially find this file without the tracking you need. This is particularly likely if you are using compass.\nFor your use case, I suggest that you extend the existing Sass filesystem importer class with some meta-programming instead of replacing the importer class in the options.\nFWIW, I recently accepted a pull request to compass that respects the :filesystem_importer option :) https://github.com/chriseppstein/compass/commit/7c50b90ee66906c4f9e60f3e56cfad442d552499\n. Compass has a sprite importer, other than that it uses the Sass filesystem importer. There's also the glob importer but it ends up resulting in calls to the filesystem importer so it should be ok. The sprite importer, in theory, should create dependencies on the sprite source images.\n. It's very common for a sass file to depend on files that are not in the project. E.g. Compass. If you warn on this, it will be very annoying.\n. Are project partials considered items even though they have no output representation? Is it possible to depend on something that is not an item. IMO, that would be the cleanest. you just need to check it's mtime.\n. the files method should do the trick.\n. Actually, it will be hard for you to accomplish this from the files method since there's no options there. I suggest overriding sass_engine instead.\n. ",
    "branquito": "Ok.. thank you!\n. ",
    "maciejczyzewski": "\n. There is no need... Everything we can examine here! :wink:\n. Look here: http://projects.stoneship.org/ (it's end, I think)\nMy example: https://github.com/maciejczyzewski/hyhyhy/tree/feature/doc (working)\nExamples: https://github.com/nanoc/nanoc/wiki/Samples\n@ddfreyne must remove this broken link from documentation\n. ",
    "vaskevich": "Yeah, I'm having this issue now. As an ugly workaround, I'm just deleting the output directory in my Rake task.\n. Great, thanks Denis!\n. Likewise. :) Thanks for the fix!\n. ",
    "ndarilek": "Hmm, never mind. Somehow my lib directory got removed without me noticing. Restored from the working configuration and problem solved.\n. ",
    "gregkare": "The reason why I want to make this clean is so we can easily have versions for zsh, etc. I think it's better to have small objects rather than a mess of procedural code, even for autocompletion :)\n. @cdlm I think that would be too slow to be usable, because of the overhead of RubyGems, Bundler, etc. If you do it in Ruby you have to stick to the standard library.\n. @ddfreyne I added the rake task I'm using so far (and the template) to the gist: https://gist.github.com/gregkare/1b40c9b98bbeafc90ad9\n. I like using one-liners in cases like this, what do you think?\nruby\ncontext[:layout] = assigns[:layout].attributes if assigns.has_key?(:layout)\n. ",
    "tom--": "\nWould love to , but\nDon't use yuglify,  RIP. I should have noticed it was not active when I reported this. I honestly don't know which css compressor to suggest for a ruby environment.\nI don't know ruby. I can cut-n-paste and program by trial and error but that's about it. It's very limited. I still don't know what those ||s do or what the difference is between {} and using end, just for example.\n. \n",
    "jdeseno": "@ddfreyne that solution is fine with me. This feature can be rejected/closed if you'd like.\n. ",
    "tantignac": "Hello,\nThank you for your very quick answer.\nI think I just located the source of the problem: I was working on a virtual disk mounted by OSXFuse and I have a software based on EncFS that encrypts/decrypts on the fly. However, all of this sometimes adds some kind of delay before the action are actually enforced on the volume (I don't know what but I noticed it with other applications, for example, the same file appears twice in my Finder but not listed in the terminal when I just edited them).\nI guess the best for me will be to work locally or find a more reliable solution :)\nThank you again for your help!\n. ",
    "lifepillar": "Thanks for your detailed feedback! I have implemented your comments. It's ok with me to maintain a nanoc-multimarkdown gem. If I understand, you will create the repo under your account and then notify me, right?\nI will later close this pull request and #386.\n. I have created a repo: https://github.com/lifepillar/nanoc-multimarkdown.\nI have just seen that there is a recent wrapper gem for MultiMarkdown 4: https://github.com/tillsc/multi_markdown. What is your opinion about depending on that gem? Personally, I think that the ability to use the multimarkdown executable directly should be kept, because in my experience gems like that tend to stay behind when the executable they depend on is updated.\n. That's an interesting idea. Another application that comes to my mind is that you could, for example, have your HTML minified by calling\nfilter :external, exec: 'htmlcompressor'\nThe drawback I see is that you are basically allowing nanoc to run any program. That might be a security issue.\n. I like that. But I was wondering whether it makes sense to have a separate gem for each filter, when they are so lightweight. That :external filter is about 30 lines of codes, for example. Most filters in the current release are of comparable size. There are tens of filters, and potentially many more to be developed. Isn't that splitting into gems too spaghetti-like? If you really want to delegate maintenance and keep things modular, wouldn't it be better to just use Git submodules? Together with some automated build system, you could roll out a new release of nanoc whenever a submodule is updated, for example.\nJust thinking out loud. I guess if you have planned that for version 4, you thought about it.\n. Ok for me. I can rename my nanoc-multimarkdown repo and apply the changes there,\n. Here we go: https://github.com/lifepillar/nanoc-external\n. Yes. I have implemented all the changes you have requested, but the last. I've been very busy, but I'll have time to work on Nanoc::Piper before the weekend.\n. Also, let me know if you prefer the commits to be squashed into one.\n. This now uses Piper for all commands. Note that it is totally untested (I've tried it with nanoc 3.6.9., but I get The specified deploy target has an unrecognized kind, so I guess that adding a deployer is not as simple as dropping it into nanoc).\nI wait for your review, then if all is ok I'll squash the commits.\n. Regarding the potentially destructive operations: the managed git repo is in the output directory. This directory may be removed at any time, so the repo must be considered as a temporary asset. All the operations after line 53 are done in the output directory.\n. If I understand correctly, you would allow a workflow like this:\n1. the user compiles the site into the build directory.\n2. The user tries to deploy to Github, but gets \u201cFirst create a Git repo in the build directory\u201d.\n3. The user creates the repo, sets up the remotes, and tries nanoc deploy. Success. (Why not just use git push then?)\n4. The user removes the build directory.\n5. The user tries to deploy, but gets \u201cFirst create a Git repo in the build directory\u201d.\nAt this point, the user should probably clone the existing site from Github into build, because nanoc would not force push. The build directory is no longer a generated product (it contains info that should not be deleted). This might be confusing for users. And I don't think that the history of all deployed sites (the built products) is so relevant, since you would most probably already  keep a history of the source of your site, and any version may be generated again from source.\nI have used Git deployment with Middleman before, and it has always worked as expected. The point is exactly that the user should not care about dealing with Git commands. I think that the changes you propose would make the plugin much less convenient.\nFinally, wouldn't a clean build delete the .git directory? Or does nanoc ignore dot files?\n. Points taken. I can try to fix it as you suggest, but it will take some time, since on the upcoming week I'll be quite busy.\n. I have implemented all of your suggestions. I have kept the automatic creation of a Git repo when none exists, however, because I don't think that's problematic.\nI have tested this with master and fixed a few bugs, but I haven't implemented automatic tests, because I'm not sure how to proceed (apparently, I need to work inside a Travis environment, which I'm not familiar with).\n. Hi, any progress on this? Please let me know if there's still something preventing merging this pull request.\n. Ok, I'll work on the tests soon.\n. @PaBLoX-CL I have updated the code so that no commit is created if the repository is in a clean state.\n@ddfreyne I have added the tests. Is there anything else preventing this pull request to be merged?\n. Sure, thanks!\n@ddfreyne If you agree and if there are no more problems, I'd clean up history by squashing the commits, so you can merge a single commit.\n. > Could you add a test for the stdout.string.empty? fix\nHow do you imagine such a test? Should I invoke git commands? All other tests mock shell commands.\n. I have added three tests for clean_repo?. I have also squashed the commits into one.\n. In my opinion, the most logical (and\u2026 driest) place to implement that functionality is the Piper::run method. If that is not planned, I will add the necessary code to the Git deployer.\n. On a second thought, changing the deployer gives more freedom to implement a dry run. However, if you want to see what would be deployed, some commands must be executed anyway (git init in primis)\u2013which clashes with the notion of a \u201cdry run\u201d. There are several possibilities:\n- Execute all commands normally, but run git push --dry-run. This may add a new commit to the\n- As above, but use a temporary branch. The risk here is that if the process crashes, such branch might remain in place.\n- Produce an error when nanoc deploy -n is executed.\nWhat do you think?\n. Now it raises an error when used with --dry-run.\n. Ok, I'll fix that. Btw, why did the build failed? Looking at the log, that doesn't seem a problem with this deployer. Or am I missing something?\n. Now --dry-run will print the commands without executing them. On the way I've also updated the test_clean_repo_* tests and fixed the style issues. I hope that this is ready to merge.\n. Yes, please, you can handle that better than I'd do.\n. I was taking a look at Nanoc 4, and I was wondering: is this going into nanoc-deploying or into its own separate gem?\n. @ddfreyne Is this advice still valid for Nanoc 4? If so, how does the syntax change? I've tried site.config[:env] and @site.config[:env], but those give errors; @config[:env] doesn't, but I don't know if it serves the purpose (it should be equivalent to define env in nanoc.yaml, as far as I understand).\n. Agree with @bobthecow. But having .ruby-version in .gitignore would be a good idea, in my opinion.\n. Oh my, I was sure I had required the plugin, but that was not the case!\n. In fact, on another site nanoc check css produces different errors: either\nErrno::ECONNRESET: Connection reset by peer\nor\nW3CValidators::ValidatorUnavailable: unable to connect to the validator at http://jigsaw.w3.org/css-validator/validator (response was 400 \"Bad request\").\nWhich of the two seems to be random.\n. Yes, it's up to date. I'll try the gem directly and report the result.\n. Sorry, I didn't know about the other channels. I'd just mention that the search field in the web site does not find that page when searching for \u201cenvironments\u201d.\n. The Git repo in the output directory is a temporary thing. The logic here is: \u201cIf there is already a Git repo, use it (possibly after updating its origin), otherwise create one\u201d. Raising an error here when the repo exists means the the user has to manually clean the output directory every time before deploying.\n. Do you mean IO#popen? It seems overkill here: the input comes from the user config file. What problems do you foresee?\n. No idea :) I'll remove it.\n. Ok, I plan to address this and the other points during the weekend.\n. A better condition would probably checking for matching ://, to distinguish URLs from aliases. I would not remove the check, though, because that would force the user to always use an alias.\n. ",
    "pablox-cl": "I've been using this deployer to test if I can ues nanoc to publish on username.github.io, I changed the branch option in nanoc.yaml to master (for username pages, that's the way to go), and works fine (I followed the github instructions about making \"master\" an orphaned branch). Nice and needed addition :).\nStill the git setup it's a bit complicated, but I agree with @ddfreyne that's better be left as a task for the user (though, the documentation for that part has to improve).\n. NoMethodError: undefined method `empty?' for #<StringIO:0x007fc8b9ef8290>\nLooking at the documentation, there's no empty? method. Maybe it's stdout.string.empty??\n. Glad to be of help :). In case someone else drop by while this is waiting to be merged. You can just download the file and drop it in the lib directory, it should be enough.\n. I have this same file on my lib directory, I just tried to run nanoc deploy -n to see what should be deployed (according to nanoc help deploy), and TAD\u00c1. It just pushed everything D:\n`` sh\n\u276f\u276f\u276f nanoc help deploy\n[...]\nDESCRIPTION\n    Deploys the compiled site. The compiled site contents in the output\n    directory will be uploaded to the destination, which is specified using\n    the--target` option.\nOPTIONS\n    [...]\n    -n --dry-run           show what would be deployed\n```\nSo, this --dry-run it's not working :P.\nOk. I took a quick peek at the code and it seems the deployer had to have some sort of if dry_run. I would have expected at least a helpful error instead of the command running and ignoring me lol.\n. I think it's a bit complex to implement, it would have be enough (at least for now), throw an error when using --dry-run. Maybe we can think in how to deal with this later.\n. @ddfreyne no, I meant raise an error meanwhile it's implemented. Now that I read that again it's not very clear :P\n. I don't agree with the --allow-emptyoption. The idea of that option to create commits with no changes at all. But doesn't makes sense because if there's nothing new (use case, you made changes on your files, but forgot to run nanoc compile first) it will run without errors, it will create an empty/useless commit, it will be pushed, but oh surprise, your remote page won't change at all. Removing that option, returns nothing to commit, working directory clean and then,  Everything up to date from the git push. This reflects the real state of your deployment way better than having ghost commits, that won't serve any purpose other than polluting the history.\nThe man page, also discourage it uses:\n--allow-empty\n           Usually recording a commit that has the exact same tree as its sole\n           parent commit is a mistake, and the command prevents you from\n           making such a commit. This option bypasses the safety, and is\n           primarily for use by foreign SCM interface scripts.\n. ",
    "StevenClontz": "Thanks for the feedback! The most important thing is, I seem to be currently going about things the correct way (once I better follow Ruby style conventions for naming methods).\nI completely agree that choosing a default ordering for 95% of use cases would be impossible. But having a default ordering for \"ItemSet\" objects that chooses something that doesn't require configuration (e.g. from the filesystem) could have some use, particularly if there was a way to hook into it and roll your own ordering scheme. (Maybe @items is ordered by filename, but you can use something like @items.order published_on: :datetime to use the published_on attribute?) (QUICKEDIT: But of course if we're talking about items which didn't come from the filesystem, it gets stickier, huh.)\nBut since the thing that I really dig about nanoc is its simplicity, I completely understand keeping this sort of thing in the hands of us individual developers to build on a case-by-case basis. Thanks again!\n. ",
    "mro": "sounds good, except that I cannot take the maintenance role.\n. gem dependencies: I didn't add the gem celluloid, I have no idea who's bringing it in.\n. here's the Gemfile.lock. To clarify: nanoc runs fine (gem install nanoc) on ruby 1.8.7 - it's the development dependencies that bark.\ncelluloid dep seems to come from listen.\n. the listengem issue is out of the way, now comes\nGem::InstallError: mime-types requires Ruby version >= 1.9.2.\nI'll see if I can figure that one out myself...\n. bundle exec rake brings errors - see http://drop.mro.name/pub/nanoc-rake.zip with results from\nbundle install > bundle.stdout 2> bundle.stderr ; bundle exec rake > rake.stdout 2> rake.stderr\nzip -rp9 nanoc-rake.zip *.std* Gemfile Gemfile.lock\n. to me it's extremely convenient having a nanoc that runs (in production) on out-of-the box 1.8.7 MRI.\nThat's more important than having a lftp deployer (which I won't use anyway because I found I don't want to add user names to the config under version management. I use a separate bash script instead).\nSo I don't mind dumping this pull request. What do you think?\n. >  even Debian stable includes Ruby 1.9.3 now\nlol, that's a point that indeed strikes. Wasn't aware 1.8.7 had EOL so long ago. Still ships with OSX, dammit.\n\nIf you agree, I\u2019d like to take the code in this PR and put it in a nanoc-lftp repository and release it  as a gem, but only for Ruby 1.9.3 and up.\n\nI certainly do agree.\nThanks a lot and greetings to Berlin!\n. I split in code because in config I decided to use URLs according to https://tools.ietf.org/html/rfc1738.\nEach config entry needs explanation and therefore should follow the principle of least surprise. Also having fewer is IMO preferable.\nThat's why I highly recommend applying existing standards - especially as the split is trivial.\n. I mean what I say:\n\nlook at URI::parse('ftp://a/b').path vs. URI::parse('sftp://a/b').path\n\nthey're different - which would require ifs downstream. And look at the object class.\n. I had nothing but trouble with feeding an array into systemu - I have no idea why. But it just didn't work.\n. as said at the top of the file - I took rsync.rb as a template.\n. makes sense.\n. actually I do make as few assumptions as possible and parse as few as possible. No way of being generic or complete in terms of what a URI can be. So I wouldn't generalise or encourage re-use but rather KISS.\nE.g. I don't care about the port. And scheme only to verify it's either sftp or ftp. Which could be dropped and left to lftp - why shouldn't we accept e.g. http? If lftp knows about webdav, nice, if not it will produce it's own error message.\nP.S.: I won't use it in my https://github.com/mro/cocoaheads-muc.de/tree/develop/nanoc anyway, because I found I don't want to see usernames in the nanoc.yaml which seems mandatory for lftp with sftp. So I deploy with a separate shell script not being part of the public git repo.\n. lftp may have the same semantics on path names - but admittedly I'm not 100% sure.\n. actually the regexp will remain for separating server + path (as URI::parse strangely yields different path results for ftp/sftp)  - but we can definitively dump the ftp/sftp scheme check (line 44).\n. ",
    "simonsouth": "Great, thank you!\n. Or rather, I will when GitHub starts cooperating with me.\n. Documentation for a REST API. I'm capturing descriptions of the resources in a simple, custom XML format that is transformed into DocBook reference entries and then into XHTML (and possibly, someday, into XSL-FO and PDF).\n. ",
    "osg": "@simonsouth If the content is open or sanitized, I would love to see it.\n. Holy crap, I love this bug. :)\n. Also, the N in the nanoc icon will finally match! :)\n. @ddfreyne +1\n. +1\n. static site generator > static-site generator\n(apply throughout)\n. formats > a format such as (singular because you are using \"or\")\n. Are you short on space and that is why you use the comma? If space is a not an issue, expand it to \"a static site generator that is fit ...\n. This sentence has a period and starts with a lowercase. Where does it visually display that a sentence starting with a lowecase a makes sense visually?\n. Is this for the current nanoc or should this be Nanoc already? :) If N, then change throughout.\n. \"lays out pages so that the site\u2019s look and feel is consistent across all pages.\" is a but awkward. How about something like \"lays out all pages consistently to retain the site\u2019s look and feel throughout.\"\n. Ah, good. Thanks. You have an inconsistent structure:\nAuthor: ...\nHomepage: ...\n...\nWhere something like this is parallel:\nAuthor: ...\nHomepage: ...\nSummary: ...\n. Capitalize the first letter of the \"sentence\". This is common in glossaries, as not to repeat the term for each definition.\n. ",
    "nvie": "Thanks for the quick reply. Here's the output, seems to work fine:\n$ irb\n1.9.3p125 :001 > require 'nanoc'\n => true\n1.9.3p125 :002 > Nanoc::Filter.named(:redcloth).new.setup_and_run('h1. Foo')\n => \"<h1>Foo</h1>\"\n1.9.3p125 :003 > require 'RedCloth'\n => true\nI also tried reinstalling RedCloth, but it had no effect.\n. Nope:\n```\n$ gem list\n LOCAL GEMS \nadsf (1.2.0)\nbuilder (3.2.2)\nbundler (1.0.22)\ncolored (1.2)\ncommonjs (0.2.7)\ncri (2.5.0)\nless (2.5.0)\nmime-types (2.2)\nmini_portile (0.5.2)\nnanoc (3.6.8)\nnokogiri (1.6.1)\nrack (1.5.2)\nrainpress (1.0)\nRedCloth (4.2.9)\nsystemu (2.6.4)\n```\n. It has no effect.\n. Here's how I call the filter: https://gist.github.com/nvie/4f2d90e5b3068bb23159#file-rules-rb-L9\n. Thanks for the quick help, Denis, will try later tonight.\n. All systems back to normal :) Thanks!\n. ",
    "yuichi-ishiyama": "think you.\n1 - push [Ctrl + C] key\n2 - nanoc compile\n3 - nanoc view\n\"nanoc is running\" - http://yuichi-ishiyama.com:3000\n. ",
    "gtheys": "Ok,\nfound a solution but don't know what happened. So if someone can explain please do.\nBut what resolved the issue was:\nEDIT: stupid typo:\nrm tmp/compiled_content tmp/checksums\n. No upgrade of anything. But we were checking in the tmp folder into git while committing. After we created the .gitignore and added tmp to exclude this error came.\nAs said removing those 2 files did the trick.\n. I like Glenn's idea @gplv2 but your stuck with a schema and SQL. \nMaybe GDBM is something? It at lease is faster the PStore and is in the standard ruby lib.\n. I have to require it also when using in the Rules? It's not automatically loaded? :)\n. 3.6.1 off course :) I added the require to the Rules and now it works :)\n. We'll do that :)\n. ",
    "gplv2": "Thanks, I have the exact same issue.   I think you meant:\nrm -f tmp/compiled_content /tmp/checksums\n. No upgrade done on ruby:\n```\nglenn@slicky:~/site/bitless$ rvm info\nruby-2.0.0-p451:\nsystem:\n    uname:       \"Linux slicky 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\"\n    system:      \"ubuntu/13.10/x86_64\"\n    bash:        \"/bin/bash => GNU bash, version 4.2.45(1)-release (x86_64-pc-linux-gnu)\"\n    zsh:         \" => not installed\"\nrvm:\n    version:      \"rvm 1.25.22 (stable) by Wayne E. Seguin wayneeseguin@gmail.com, Michal Papis mpapis@gmail.com [https://rvm.io/]\"\n    updated:      \"4 days 9 hours 44 minutes 18 seconds ago\"\n    path:         \"/usr/local/rvm\"\nruby:\n    interpreter:  \"ruby\"\n    version:      \"2.0.0p451\"\n    date:         \"2014-02-24\"\n    platform:     \"x86_64-linux\"\n    patchlevel:   \"2014-02-24 revision 45167\"\n    full_version: \"ruby 2.0.0p451 (2014-02-24 revision 45167) [x86_64-linux]\"\nhomes:\n    gem:          \"/usr/local/rvm/gems/ruby-2.0.0-p451\"\n    ruby:         \"/usr/local/rvm/rubies/ruby-2.0.0-p451\"\nbinaries:\n    ruby:         \"/usr/local/rvm/rubies/ruby-2.0.0-p451/bin/ruby\"\n    irb:          \"/usr/local/rvm/rubies/ruby-2.0.0-p451/bin/irb\"\n    gem:          \"/usr/local/rvm/rubies/ruby-2.0.0-p451/bin/gem\"\n    rake:         \"/usr/local/rvm/gems/ruby-2.0.0-p451/bin/rake\"\nenvironment:\n    PATH:         \"/usr/local/rvm/gems/ruby-2.0.0-p451/bin:/usr/local/rvm/gems/ruby-2.0.0-p451@global/bin:/usr/local/rvm/rubies/ruby-2.0.0-p451/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/usr/local/rvm/bin\"\n    GEM_HOME:     \"/usr/local/rvm/gems/ruby-2.0.0-p451\"\n    GEM_PATH:     \"/usr/local/rvm/gems/ruby-2.0.0-p451:/usr/local/rvm/gems/ruby-2.0.0-p451@global\"\n    MY_RUBY_HOME: \"/usr/local/rvm/rubies/ruby-2.0.0-p451\"\n    IRBRC:        \"/usr/local/rvm/rubies/ruby-2.0.0-p451/.irbrc\"\n    RUBYOPT:      \"\"\n    gemset:       \"\"\n``\n. It can be triggered by just accidentally checking in tmp/ in git.  So on a working nanoc install, it's enough to check out a project where the tmp/\\* wasn't excluded in .gitignore  (e.g.git pull` ) .  So it must be triggered by the project content rather than the ruby version\n. If you try to google that exact 60.60 line it turns out this has been seen in the wild, but kind of strange that it is a game that throws them:  http://sb2revival.lefora.com/reply/46985259#.UznFnJAW30o\nNot exactly the kind of hit I expected:  Sim Brothel 2: Revival\nI took out the github url, it's a private project\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = git@github.com:blah/project.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n. I'm on ubuntu , @gtheys looks to be on macbook.\nglenn@slicky:~/site/bitless$ cat /etc/lsb-release \nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=13.10\nDISTRIB_CODENAME=saucy\nDISTRIB_DESCRIPTION=\"Ubuntu 13.10\"\n. No problem on the version, it's no trouble.  Tx for picking this up so fast.\nI put my money on an issue within PStore.   I checked a long list of loose hits and it pretty much came back to pstore, just as the error actually says.  Don't think it's a nanoc issue but a workaround is the noble approach.\n. Let me know if you need a tester, I'm a 2day nanoc noob ;-)\n. I would consider sqlite3 as a temp store, I build the biggest apps with it a lot on PHP, it's very fast and portable.  Just my 2c.  Every project I build with it keeps running :)\n. ",
    "strand": "\u261d\ufe0f I believe @ddfreyne meant #418 resolves the issue.. ",
    "jf": "I see. Thanks for the explanation! I hope the fix will be to just fix the layout reference instead of putting that rule back in?\n. ",
    "headius": "Please don't quietly mask failures when you encounter them on JRuby. Usually if you make a bit more noise, the JRuby team is willing to assist with third-party libraries. By masking the failures you only allow the issues to remain.\nNokogiri is a difficult library to simulate on JRuby because libxml has such a broad set of features and because it's very forgiving of bad XML content. We are always looking for help to keep it going.\n. I looked into these issues, since @ddfreyne made a point of calling JRuby-Nokogiri \"a horrible horrible thing\" on IRC.\n- sparklemotion/nokogiri#1077 needs a trivial-but-important fix (don't mutate incoming string). Preliminary patch provided.\n- sparklemotion/nokogiri#1078 doesn't appear to be a proper compilable stylesheet based on the actual error message and things I see online.\n- sparklemotion/nokogiri#1079 needs a bit more work, but ultimately an xml-to-text \"serialize\" method was not implemented the same in JRuby-Nokogiri and C-Nokogiri. Preliminary patch provided.\n- sparklemotion/nokogiri#1080 was fixed a day after you reported it.\n- sparklemotion/nokogiri#1081 was fixed a day after you reported it.\n- sparklemotion/nokogiri#1084 did not seem to reproduce for me with Nokogiri master.\nWe certainly don't guarantee that JRuby-Nokogiri is perfect, but it passes Nokogiri's tests. Your bug reports help us improve it, but Nokogiri also has very few dev resources right now. In the future, try to hunt down someone responsible for fixing Nokogiri and make it clear these issues are a high priority for you...or help try to investigate or fix the issues yourself.\n. ",
    "Phyllo": "Thanks for the hint which would probably fix this issue if I could get it to run. I tried to follow it but I'm doing something wrong, apparently nanoc is very strict regarding indentation. I simply copied and pasted \n    encoding: utf-8\nfrom the place you mentioned but when I try to run nanoc again, it crashes with the error message \"found a tab that violate intendation\" - which should be indentation actually. ;)\nHere you see my nanoc.yaml in notepad++ together with the error message\n\nI tried to fix it using a tab or white spaces but neither worked.\nThe line 1234... was only added to show where exactly is column 15 on line 41, it was not there when I ran into the error.\n. I only answered here since you said I should let you know if the troubleshooting section fixes the issue and it did not. As I said, I played around with spaces and tabs and neiter worked. I deleted all white spaces in that line and added four spaces in front of it and one between the colon and the 'u' but it still shows this error at column 15 which actually would be the 'u', not the space in front of it if I'm not mistaken. If I don't find a fix, I'll move to the group and re-post it there.\n. No, I checked that as well. Here you go:\nhttps://gist.github.com/Phyllo/11233183\n. Thanks, that worked and next time, I'll check anywhere around the indicated error. Now, the site shows as it should. :)\n. ",
    "xiaohanyu": "OK, I got it. Thanks.\n. Hi, I'm reading nanoc code these days and I found lots of rubocop warnings in nanoc 3.x. \nI also note that the latest nanoc-core 4.x repo has few rubocop warnings. \nI want to contribute some code and I'm wondering that will rubocop check be strictly checked? Or we just abandon nanoc 3.x and enabled rubocop check in nanoc 4.x?\nThis patch is not complete yet. I just wait some more advice on this topic and then I can provide more help on this topic. \nThanks! \n. Hi, for nanoc 3.x, if you run rake rubocop, it does provide many warnings:\n```\n$ be rake rubocop                                                                                                                                                                            \nRunning RuboCop...\nInspecting 164 files\n...C.....W.C..C.CC.CCCC.C.W.CW.CWC..WC..W..CW.W..W.W..W.W....WWWWWW.WCW.W..W..C........W.WCWC.W.....CC...W.W..WC.C....C.....C........W.C..W..W..W...W.....C...C..C..\nOffenses:\nlib/nanoc.rb:18:5: C: Avoid the use of double negation (!!).\n    !!(RUBY_PLATFORM =~ /windows|bccwin|cygwin|djgpp|mingw|mswin|wince/i)\n    ^\nlib/nanoc/cli/stream_cleaners/abstract.rb:17:15: W: Unused method argument - s. If it's necessary, use _ or s as an argument name to indicate that it won't be used. You can also write as cle\nan(*) if you want the method to accept any arguments but don't care about them.\n    def clean(s)\n              ^\nlib/nanoc/cli/command_runner.rb:41:9: C: Rename is_in_site_dir? to in_site_dir?.\n    def is_in_site_dir?\n        ^^^^^^^^^^^^^^^\nlib/nanoc/cli/command_runner.rb:83:9: C: Do not prefix writer method names with set.\n    def set_vcs(vcs_name)\n        ^^^^^^^\nlib/nanoc/cli/commands/create-item.rb:2:1: C: Use snake_case for source file names.\nlib/nanoc/cli/commands/create-item.rb:33:10: C: Explicit non-nil checks are usually redundant.\n      if !site.items.find { |i| i.identifier == identifier }.nil?\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlib/nanoc/cli/commands/create-item.rb:35:62: C: Use \\ instead of + or << to concatenate those strings.\n          \"An item already exists at #{identifier}. Please \" +\n                                                             ^\nlib/nanoc/cli/commands/update.rb:40:72: C: Use \\ instead of + or << to concatenate those strings.\n...\n...\nlib/nanoc/helpers/capturing.rb:115:66: C: Use \\ instead of + or << to concatenate those strings.\n          raise ArgumentError, 'expected 2 arguments (the item ' +\n                                                                 ^\nlib/nanoc/helpers/tagging.rb:66:7: C: %-literals should be delimited by ( and )\n      %[#{h tag}]\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 files inspected, 137 offenses detected\nRuboCop failed!\n```\n. Ok, I know that. Thanks.\n. ",
    "boutil": "It is something like: /tmp/nanocyyyymmdd-nnnn-something\n. With your commit, the tests are passing. Problem solved. Thanks. ",
    "yonkeltron": "Yeah, @ddfreyne I can confirm that throwing in a Gemfile with nanoc in it worked. Thanks for getting me over the hump and please let me know when I can test the new version and get this issue closed. I really appreciate the fast response!\n:thumbsup: \n. ",
    "pitosalas": "I am still having the problem. Haven't narrowed down yet what's going on.\n. I uninstalled my ruby and gems (in desperation) and downgraded to Nanoc 3.6.9 to make the problem go away. With 3.6.9 I \u00a0still got an error when I didn\u2019t have bundler installed. But when I installed bundler the problem went away. I don\u2019t know but when I read the code for the latest release it looked to me like it would fail ugly if bundler wasn\u2019t even installed. But I have not gone back to try again now that I gave my gem library a root canal. I could try if you need me to.\n- -Pito\nFrom:\u00a0Denis Defreyne notifications@github.com\nReply:\u00a0nanoc/nanoc reply@reply.github.com>\nDate:\u00a0July 16, 2014 at 3:37:43 AM\nTo:\u00a0nanoc/nanoc nanoc@noreply.github.com>\nCc:\u00a0Pito Salas pitosalas@gmail.com>\nSubject:\u00a0 Re: [nanoc] nanoc command (rvm) fails to launch with error: `default_gemfile': Could not locate Gemfile (Bundler::GemfileNotFound) (#447)  \n@pitosalas Is the issue you\u2019re experiencing #452, rather than this one?\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree... Once I figured it out, no big deal!\n-- Pito\np.s. sent from my iPhone, so excuse brevity, typos, etc.\n\nOn Jul 11, 2015, at 7:08 AM, Denis Defreyne notifications@github.com wrote:\nI\u2019ll close this issue, because I\u2019d prefer not to have #split on Identifier, and the upgrade guide\u2019s troubleshooting section explains this already.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "kost": "Any problem with the pull/patch? \n. Thanks. implemented all suggestions. Let me know if there's anything else. \n. That should be it.\n. ",
    "NandiniGoel": "Dear Sir \nThe following below mentioned are the error found after running (nanoc --version) command, please guide the solution.\nregards \n```\nC:\\Sites>nanoc --version\nC:/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/nanoc-3.7.1/bin/nanoc:9:in\nrescue in <top (required)>': uninitialized constant Bundler::GemfileNotFound (N\nameError)\n        from C:/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/nanoc-3.7.1/bi\nn/nanoc:7:in'\n        from C:/RailsInstaller/Ruby1.9.3/bin/nanoc:23:in load'\n        from C:/RailsInstaller/Ruby1.9.3/bin/nanoc:23:in'\n============================================================\n```\n. ",
    "jbonhag": "I've got Bundler 1.6.3 installed, and I get the same error message (using Ruby 2.1.2 through ruby-install/chruby):\n$ nanoc create-site ok\n/home/jeff/.gem/ruby/2.1.2/gems/nanoc-3.7.1/bin/nanoc:9:in `rescue in <top (required)>': uninitialized constant Bundler::GemfileNotFound (NameError)\n        from /home/jeff/.gem/ruby/2.1.2/gems/nanoc-3.7.1/bin/nanoc:7:in `<top (required)>'\n        from /home/jeff/.gem/ruby/2.1.2/bin/nanoc:23:in `load'\n        from /home/jeff/.gem/ruby/2.1.2/bin/nanoc:23:in `<main>'\nI can get around the error by creating a minimal Gemfile:\nsource 'https://rubygems.org'\ngem 'nanoc'\ngem 'kramdown'\n$ nanoc create-site ok\n      create  nanoc.yaml\n      create  Rules\n      create  content/index.html\n      create  content/stylesheet.css\n      create  layouts/default.html\nCreated a blank nanoc site at 'ok'. Enjoy!\n. ",
    "pengisgood": "@ddfreyne I also got this error with nanoc 3.7.1. :(\n[error] /home/travis/.rvm/gems/ruby-1.9.3-p547/gems/nanoc-3.7.1/bin/nanoc:9:in rescue in <top (required)>': uninitialized constant Bundler::GemfileNotFound (NameError)\n[error]     from /home/travis/.rvm/gems/ruby-1.9.3-p547/gems/nanoc-3.7.1/bin/nanoc:7:in'\n[error]     from /home/travis/.rvm/gems/ruby-1.9.3-p547/bin/nanoc:23:in load'\n[error]     from /home/travis/.rvm/gems/ruby-1.9.3-p547/bin/nanoc:23:in'\n[error]     from /home/travis/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in eval'\n[error]     from /home/travis/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in'\n. ",
    "grv87": "I believe that these links are correct except that (copy-paste error):\n- http://maruku.rubyforge.org/ \u2192 https://github.com/bhollis/maruku/\nAnd link for Curb should not be removed.\nBTW, how exactly nanoc check elinks works? For example, DNS name maruku.rubyforge.org is still resolvable, but the server doesn't respond on HTTP(S). I wonder whether nanoc could determine such problem.\n. Thank you for the answer.\nUnfortunately, this approach don't work in my case, since items for the index are defined in the text, not in the metadata. I can't use post[:tags] to get items for the index. I use helper that logs items and also creates <a id=...> HTML tags. (Firstly I wrote filter, it's actually helper). I could write custom parser and use it in the preprocess stage, but I look for a simpler way.\nThe same problem exists in LaTeX which uses makeindex for the generation of index. For the full build it requires several runs. First updates index file, second incorporates created file. If in the second generation index file is changed, then there is third generation and so on, until everything stabilizes. Now I see that I can try to emulate this behavior using guard. I'll try it, but it would be good if this would work from the box.\n. ",
    "sueyacoub": "Apologies for not updating the post. We have an older site that uses config.yaml, but it does have an entry for text_extensions. The extensions listed are your typical text file extensions. JPG is not listed there. So the issues is not resolved. \n. Thanks DD for your messages. The .jpg files were in a submodule within our repo. Since then we've asked the owner of the other repo to delete the .jpg files so we can keep publishing the website. They kindly did this; however, this is a temporary measure with the hopes that we can resolve the issue. \nHere's the error message everyone using our repo received, whether on a PC, Mac or Ubuntu: \nCaptain! We've been hit!\nMessage:\nRuntimeError: Could not read layouts/submodule/images/create_activity.jpg because the file is not valid UTF-8\nLet me see if I can recreate the situation and get you the full crash.log. Does the above-mentioned image path help? \nThanks again.\nBest,\nSue.\n. Thanks. I wasn't aware of this restriction on layouts/. We're placing our submodules there, so we can obtain some text files from other repos. We then parse them and display them in our website. We did not anticipate that owners of other repos would be storing binaries in their git repos. We don't want this submoduled information in the content/ folder because it's not part of the site content. Is there a similar restriction on placing binaries elsewhere in the site, outside of layouts/? Could we, for example, create a submodules/ folder in the root folder? Thanks in advance.\n. Thanks all. The submodules are not separate sites. Instead, we're using each submodule as a data source. These submodules contain JSON files. We have code that parses the JSON files, and then auto generates markdown content that is placed within the /content folder. \nUnfortunately, we did not anticipate that the owners of these other repos, which we are submoduling, would store binary files in them. \nIs the /content folder the only folder in a nanoc site that can contain binaries? So should we create a /content/submodules/ folder for these submodules, and then try to exclude this folder from being compiled by nanoc? \nOr can can we create a folder on the same level of /content called /submodules? Can such a folder contain binaries? \nThanks in advance.\nSue.\n. Thanks all. I'll let you know. We have to change quite a few things and coordinate with other repo owners, so this may take a while. However, I'll let you know what happens. For now, we asked the repo owner to remove the .jpg from their repo ; ) \n. ",
    "FredyFreshFirm": "Strip\n20. juli 2014 14:48 skrev \"Gregory Pakosz\" notifications@github.com\nf\u00f8lgende:\n\nNow I'm wondering, maybe it's better to not strip anything at all, and\nleave everything after the metadata block intact? What do you think?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nanoc/nanoc/pull/463#issuecomment-49545463.\n. Ok\n20. juli 2014 18:18 skrev \"Justin Hileman\" notifications@github.com\nf\u00f8lgende:\nlgtm [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nanoc/nanoc/pull/464#issuecomment-49551290.\n. Yup\n\nFredy Ot\u00e9n\n22. juli 2014 14:23 skrev \"jugglinmike\" notifications@github.com f\u00f8lgende:\n\nI verified this manually, but I'm wondering if we can back this with a\ntest. test/test_gem.rb\nhttps://github.com/nanoc/nanoc/blob/db1db138608d4f6786e1a2482f12ab20359b424c/test/test_gem.rb\nseems a likely candidate. It probably requires a lot more infrastructure\nthan that file provides (we'd have to temporarily move this project's own\nGemfile).\nIt's likely more appropriate to open a separate issue to create tests for\nnanoc's executable. Does this seem like a good idea?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nanoc/nanoc/pull/464#issuecomment-49731509.\n. \n",
    "rajacsti": "Thank you @ddfreyne Defreyne, it saved my day.\n. ",
    "sunilpuranik": "Doing sudo chmod o-w tmp/ worked for me. ",
    "Fjan": "It fails on any file that has \\r\\n line endings instead of \\n line endings. I narrowed down the problem to this regex that is new in 3.7.2:\npieces = data.split(/^(-{5}|-{3})[ \\t]*\\n/)\nOne way to fix it would be:\npieces = data.split(/^(-{3,5})[ \\t]*\\r?\\n/,5)\nNote that the last parameter to split limits the number of pieces so there is no need to join them later, which could potentially mess up a file that has '---' somewhere in the middle.\n. @gpakosz You are right, I see the content will not be messed up because although it might split unnecessarily it will store the separator and then join it back in. So hacky, but it works. If we choose to avoid the unnecessary split then we can further improve that code by not capturing and storing the split in the first place: \npieces = data.split(/^-{3,5}[ \\t]*\\r?\\n/,3)\n(and then adjust the size check and the indexes of pieces accordingly).\n. @gpakosz Ok, let's leave the split. However, I just realised the split does not capture the line ending, so if '---' does occur in the rest of the code somewhere the line ending for that line might change, so my initial comment was correct (although a line ending change does not typically cause issues). Anyway, if we simply limit the split to 3, as I see @ddfreyne agrees with, we avoid it altogether. \n. Thnx!\n. IMHO a minimal implementation of this comprises these things:\n1. A global variable that indicates the environment. \n2. A way to switch the output directory for each environment. \n3. A way to switch the tmp directory for each environment\nIt's actually already possible to do all three with the current nanoc (we use it successfully):\n1. We simply use something like ENV['NANOC_ENVIRONMENT'], and change the rules in the Rules files with that, but it's probably nicer if something like  ::Nanoc.env existed with an optional parameter to the nanoc command to set it\n2. The Rules files accepts relative paths, so it's possible to write an output file to 'output/../output_production/...' based on the environment variable. A --config option to use a different yaml file would be nice, but even better would be to do it like Rails and run the nanoc.yaml file through Erb, so you can change the directories based on the environment variable\n3. It's a one line monkey patch to the Nanoc::Store class to change the name of tmp dir depending on the environment variable, but it would of course be nice to have a config option for it or even better if it can switch automatically based on Nanoc.env\nWe wrap the relevant nanoc compile command in custom nanoc commands and rake tasks to set the right ENV variable beforehand. It works well actually, but it would be great if we can do it without monkey patching.\n. So a --config option is one way to do it, but an --env option that gets picked up in the nanoc.yaml like rails does it may be even nicer, because there are a bunch of other things you may want to change based on the environment than just the directories. A few examples from our use case:\n- The production version uses the CDN for images, the locally compiled output uses local images\n- The production version has analytics snippets, the local version does not\n- The local version has  output from the spell check filter in it, the production version does not\n- Pages that are still being worked on are hidden in the production environment\n. Do you think anybody uses the current behaviour of calling content_for twice with the same symbol, which would erase the contents of first call? I find it hard to imagine a use case for that. I think most people simply call it once so the issue never arises, so a warning of the changed behaviour in the upgrade notes would suffice. Of course, if I'm overlooking a way in which the current behaviour might be useful, then adding it as an option would be better.\n. Ok, I don't mind making a PR, but I really don't like adding a parameter for an option for which no one can think of a use case. I'm fine with using the 1-line monkey patch until the behaviour can change in 5.0\n. I would say the current default behaviour is broken so we should remove it. Overwriting content is unexpected and especially confusing because the Rails call of the same name behaves differently. But if there is anyone who can think of a use case for the current behaviour I'm interested to hear it.\n. Do you mean you want to change silent overwriting to raise an exception now, and then change it in a future version to concatenate?\n. For now, I've just added addressed the silent overwriting behaviour in the pull request. Adding an additional parameter temporarily did not seem worth the trouble.\n. OK, done\n. Yes, thank you. I would probably still be a good idea to make :append the default at some point to make it's behaviour similar to the content_for in Rails. \n. We can be pretty confident that the current default behaviour is not used by anyone, because it would raise an exception, so I wouldn't call it a breaking change. But I'm fine with waiting until the next version.\n. :+1: Awesome! Our site compilation just became much faster with 4.3.7\n. @jvoisin on my Mac Pro it went from 6.34s to 3.47s so a 45% speedup. It's nice to get 3 seconds back for me, but we have a bunch of users on old laptops and those take about three times longer to compile, so things like live-reload were almost not usable for them before and are OK now. \n.  \ud83d\udc4d @ddfreyne Awesome! I'm not sure this gets said enough. Ok, in that case the documentation should be updated, it's still documented here:\nhttps://nanoc.ws/doc/reference/variables/\n. Ok, I'll work around it, but it was very useful to have a method that indicates whether the source asset is binary, for example:\nfilter(:erb) unless item.binary?\n And I'm probably not the only one who used it (as it was a documented), so you still might want to consider adding it back to avoid breaking things for other people.. Ok, I see that it works in one of my other projects. Might be problem with a monkey patch gone wrong, sorry, I'll reopen after I've researched it and I can reproduce it consistently.. As an side, this is what no longer works in 4.5.3:\nNanoc::Int::NotificationCenter.on(:compilation_started) {|ir| Trans::set_language_from_id(ir.item.identifier) unless ir.binary?}\nSo I guess something changed as ir.binary? and ir.item.binary? no longer exist but I'll figure out another way to do it.. The site serves multiple languages so it simply sets a language variable based on the directory name in the identifier (/en/ would be English, /fr/ French, etc), and that is later picked up by translation functions. (The site uses the :symbol.t convention, the .t method is defined on the Symbol class to get the translation from a translation library). Setting the language inside the Rules file proved problematic because the translation functions are also needed in the layout and in the partials that generate menus. \nI've already found workaround but it's still using the internal notifications API, so a suggestion to do this another way would be welcome.. I was afraid you were going to say that. Our entire code base (hundreds of pages), including the Rails code base, uses the :symbol.t convention, and it's what our translators are familiar with, so changing to an imperative style t(:sym) would be a major undertaking.\nI'm all for going multithreaded on nanoc, but for our use case it would be great if Nanoc::Int::NotificationCenter.on(:compilation_started) still fires reliably when compilation is resumed on an item. (I can live with this being an internal API and am prepared to update my code base each time nanoc evolves). Great, thanks, I'll try that.. Ok thanks. But deriving the language again is as simple as a regex on the item name in our case, the problem is that the language sets a global (or class level) variable, so it is important to know when the item at hand switches so we can reset it. Anyway, the current use of the internal NotificationCenter.on(:compilation_started) works fine in 4.6, but when I have some time I'll try out your suggestion to use fiber-local variables to prevent future issues with context switching.. This commit has the side effect of doing a full recompile each time the environment changes! In a normal workflow where you fix a typo on staging and then on production you now have to wait for two full recompiles... This makes working with large nanoc sites unbearably slow, can we please revert?. A better solution to prevent issue https://github.com/nanoc/nanoc/issues/1067 would be to do a full recompile only if the output directories for the environments are the same. In normal use you would use two different output directories so the issue would not occur.. As mentioned in the comment on #1069, avoiding recompilation can probably only be achieved if the output directories for each environment are completely separate (not the same and not in each others hierarchy). This is probably true for most use cases. \nThe simplest implementation is probably to invalidate the tmp directory for users that have at least one duplicate output directory, and then restore https://github.com/nanoc/nanoc/commit/a8e116098002d709aa40d393a4c1d4087dc56049. Ok, thanks. As an aside, I noticed their claim of 86% faster HTML escaping is based on simply replacing a chained gsub by CGI.escapeHTML (https://github.com/jeremyevans/erubi/commit/ad418917a5c75e969f1bbf213c1a95b84c4c56e8)\nNanoc is doing a chained gsub as well here so we could easily copy/replace that code with CGI.escapeHTML to get that same speedup.. Sure, no problem :-). I see the same issue on two different nanoc sites, but not on a third (although the third one got a bit slower too). The compilation does eventually complete after a long time on the smallest of the two sites, so it's probably not an endless loop. \nPutting puts \"#{Time.now}\\t#{item.identifier}\" inside the compile block in the Rules files show all files getting compiled twice in a row, and take several seconds per compile. Not a repo I can share easily, sorry.. Yep, 4.6.3 fixes this :+1:. @ddfreyne Looks great!. Ok, I added a test for the specific case I mentioned in the bug report but the test does not create a file on disk so the improvement that the improved error message will show a file name is not really clearly visible. I had no luck making an item name appear in the test. Sorry, I really don't have more time to work on this any time soon. As an aside, none of the other filters check for the presence of the item name being present in the error message, so testing this seems more trouble than it's worth for such a small embellishment.. Thanks for the fix. However, adding a mutex is a lot heavier than simply using a print statement,  which is atomic by itself. . Just adding a little bit of info to this thread in case anyone comes Googling here: The current working directory in Ruby is global across threads. So if you have any code depending on the current working directory then a ruby process running in another thread can crash that. \nIn my case I had rake task running a second task in parallel to nanoc that crashed it, so completely outside nanoc.\nThere has been some discussion on the Ruby mailing list about this, but apparently it's not something that can be changed as the underlying OS is what defines this behaviour.. @Doshirae Just thought I should point out that the \"proper\" way to solve this is by using the environment support built into nanoc. You would simply use ENV[\"NANOC_ENV\"] == 'production' instead of ENV[\"PROD\"]==true and then compile with nanoc --env=production. Nanoc keeps a separate set of dependency state for each environment in that case and it should work as expected. It's also much faster than the pre-processing trick mentioned on the troubleshooting section because it doesn't have to recompile the entire site.\n@ddfreyne Perhaps this should be mentioned in the troubleshooting section too?. Hmm, ok, I'm doing something very similar in my nanoc app without any issues. I should probably point out that you need to define the two environments 'production' and 'default' in the nanoc.yaml file for them to be picked up.. Hi @ddfreyne \nGuard now starts up but as soon as anything changes and it tries to compile anything it produces an error with a long stack trace: https://gist.github.com/Fjan/6cbbff28125adff6694f2df1484b776a\nI tried this on two different nanoc projects.. Thnx for your quick attention to this! (Out of town this week but will test when I get back). Ok, I changed that, but note that all other tests in that file use the other style\n. ",
    "kraftkern": "Hi @gpakosz,\ni have this error all over the place, but in files that actually have NO CONTENT. I.e. files with metadata but no content part. This worked great in previous versions and I have lots of files like that :) This is much needed feature I always used. \n. hey @gpakosz ! Thanks for quick reply. No, can't confirm that. All files are UTF-8 with LF-only (I'm working on a mac). Are they supposed to be CR-LF?\n. Here's an example (full content with all new lines):\n\nP.S.: i got the site working again with nanoc 3.6.1 \n. ",
    "paulboone": "My hazy recollection is that testing the specifics was kind of awkward, but it didn't break the existing general test case, so I figured it was kind of already tested...? \nHappy to take another look, but it won't be for a bit, since I'm pretty crushed until Dec.\n. Yep, S3 populates the hexdigest field automatically with the MD5, which is what makes this possible.\n. ",
    "dgmstuart": "Great :) \n. ",
    "jm3": "thanks!\n. so I should just delete the static data source? I'm not clear what's being recommended here.\n. hm, nope. the only line in the app referencing \"default\" is Rules, which specifies the layout like this:\nruby\ncompile '/*/' do\n  if item[:extension] == 'sass'\n    filter :sass, style: :compressed\n  else\n    filter :haml\n    layout 'default'\n  end\nend\ni re-typed the whole layout 'default'' line to verify that there are no invisible characters, but I still get the same Nanoc::Identifier::InvalidPrefixError error \ud83d\ude22 \n. Defaults may not be appropriate in 100% of cases, but that's kinda the point of defaults, right: to Do the Right Thing\u2122 for the majority of users, and let power-users override that with settings that meet their needs. (see also Rails' \"Convention over Configuration\", the design community's \"Principle of least astonishment\", etc.).\nMaybe you can clue me in: the current behavior puts things like stylesheets into the sitemap. Is that the correct use of a sitemap, in any context? I'm pretty confident that sitemaps are used to point to pages and user-viewable content, like a video or a photo, but not a stylesheet.\n. Oh interesting. I didn't catch the double-bundle, that's a good point. I tried it both ways and still no luck, tho: with bundle exec on foreman invocation but not on the Procfile commands, and vice versa.\nI also tried deleting my whole bundle directory and re-bundling in case I had a bad old gem around or something, but no difference.\nDoes Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)point to anything else we could investigate?. this is after running gem pristine --all:\nbe foreman start\n13:46:26 watch.1      | started with pid 21750\n13:46:26 nanoc_view.1 | started with pid 21751\n13:46:26 nanoc_view.1 |\n13:46:26 nanoc_view.1 | Captain! We\u2019ve been hit!\n13:46:26 nanoc_view.1 |\n13:46:26 nanoc_view.1 | LoadError: cannot load such file -- cri/option_parser\n13:46:26 nanoc_view.1 |\n13:46:26 nanoc_view.1 |   0. ~/vendor/bundle/ruby/2.4.0/gems/cri-2.10.1/lib/cri/command.rb:369:in `require'\n13:46:26 nanoc_view.1 |   1. ~/vendor/bundle/ruby/2.4.0/gems/cri-2.10.1/lib/cri/command.rb:369:in `partition'\n13:46:26 nanoc_view.1 |   2. ~/vendor/bundle/ruby/2.4.0/gems/cri-2.10.1/lib/cri/command.rb:265:in `run'\n13:46:26 nanoc_view.1 |   3. ~/vendor/bundle/ruby/2.4.0/gems/nanoc-4.8.11/lib/nanoc/cli.rb:63:in `block in run'\n13:46:26 nanoc_view.1 |   4. ~/vendor/bundle/ruby/2.4.0/gems/nanoc-4.8.11/lib/nanoc/cli/error_handler.rb:66:in `handle_while'\n13:46:26 nanoc_view.1 |   5. ~/vendor/bundle/ruby/2.4.0/gems/nanoc-4.8.11/lib/nanoc/cli/error_handler.rb:24:in `handle_while'\n13:46:26 nanoc_view.1 |   6. ~/vendor/bundle/ruby/2.4.0/gems/nanoc-4.8.11/lib/nanoc/cli.rb:61:in `run'\n13:46:26 nanoc_view.1 |   7. ~/vendor/bundle/ruby/2.4.0/gems/nanoc-4.8.11/bin/nanoc:18:in `<top (required)>'\n13:46:26 nanoc_view.1 |   8. ~/vendor/bundle/ruby/2.4.0/bin/nanoc:22:in `load'\n13:46:26 nanoc_view.1 |   9. ~/vendor/bundle/ruby/2.4.0/bin/nanoc:22:in `<top (required)>'\n13:46:26 nanoc_view.1 |   ... 17 lines omitted (see crash.log for details)\n13:46:26 nanoc_view.1 |\n13:46:26 nanoc_view.1 | A detailed crash log has been written to ./crash.log.\n13:46:27 watch.1      | 13:46:27 - INFO - Compilation succeeded.\n13:46:27 watch.1      |\n13:46:27 watch.1      | 13:46:27 - INFO - LiveReload is waiting for a browser to connect.\n13:46:27 watch.1      | 13:46:27 - INFO - Guard is now watching at '~/jm3.net'\nError: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `output='\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `set_readline_output'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in `block in read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:in `handle_read_errors'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in `read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:in `read'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in `block in repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `loop'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `block in start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in `__with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:in `with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:in `block (2 levels) in _switch_to_pry'\n13:46:27 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `output='\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `set_readline_output'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in `block in read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:in `handle_read_errors'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in `read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:in `read'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in `block in repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `loop'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `block in start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in `__with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:in `with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:in `block (2 levels) in _switch_to_pry'\n13:46:27 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `output='\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `set_readline_output'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in `block in read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:in `handle_read_errors'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in `read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:in `read'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in `block in repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `loop'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `block in start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in `__with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:in `with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:in `block (2 levels) in _switch_to_pry'\n13:46:27 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `output='\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `set_readline_output'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in `block in read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:in `handle_read_errors'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in `read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:in `read'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in `block in repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `loop'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `block in start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in `__with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:in `with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:in `block (2 levels) in _switch_to_pry'\n13:46:27 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `output='\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in `set_readline_output'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in `block in read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:in `handle_read_errors'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in `read_line'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:in `read'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in `block in repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `loop'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in `repl'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `block in start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in `__with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:in `with_ownership'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in `start'\n13:46:27 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:in `block (2 levels) in _switch_to_pry'\n13:46:27 watch.1      | FATAL: Pry failed to get user input using `Readline`.\n13:46:27 watch.1      | To fix this you may be able to pass input and output file descriptors to pry directly. e.g.\n13:46:27 watch.1      |   Pry.config.input = STDIN\n13:46:27 watch.1      |   Pry.config.output = STDOUT\n13:46:27 watch.1      |   binding.pry\n13:46:27 watch.1      |\n13:46:27 - INFO - Bye bye...\n13:46:27 nanoc_view.1 | exited with code 1\n13:46:27 system       | sending SIGTERM to all processes\n13:46:27 watch.1      | exited with code 0. ```\n\n% cat Gemfile\nsource 'https://rubygems.org'\nruby '2.4.0'\ngroup :development do\n  gem 'adsf'\n  gem 'foreman'\n  gem 'guard-livereload\n  gem 'guard-nanoc'\n  gem 'guard-rack'\n  gem 'rack'\n  gem 'rack-livereload'\n  gem 'dotenv'\n  gem 'rake'\n  gem 'pry'\n  gem 'nanoc'\n  gem 'cri', github: 'ddfreyne/cri'\ngem 'sass'\n  gem 'uglifier'\ngem 'builder'\n  gem 'haml'\n  gem 'slim'\nend\n% foreman start\n14:36:47 watch.1      | started with pid 86345\n14:36:47 nanoc_view.1 | started with pid 86346\n14:36:47 nanoc_view.1 | Could not find the required 'adsf' gem, which is necessary for the view command.\n14:36:48 nanoc_view.1 | exited with code 1\n14:36:48 system       | sending SIGTERM to all processes\n14:36:48 watch.1      | bundler: failed to load command: guard (~/vendor/bundle/ruby/2.4.0/bin/guard)\n14:36:48 watch.1      | SignalException: SIGTERM\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:57:in wait2'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:57:inwait_ignoring_interrupts'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:104:in block in auto_restart'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:103:inloop'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:103:in auto_restart'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/bin/guard:114:in'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/bin/guard:22:in load'\n14:36:48 watch.1      |   ~/vendor/bundle/ruby/2.4.0/bin/guard:22:in'\n14:36:48 watch.1      | 14:36:48 - INFO - Compilation succeeded.\n14:36:48 watch.1      |\n14:36:48 watch.1      | 14:36:48 - INFO - LiveReload is waiting for a browser to connect.\n14:36:48 watch.1      | 14:36:48 - INFO - Guard is now watching at '~/jm3.net'\nError: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:36:48 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:36:48 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:36:48 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:36:48 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:36:48 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:36:48 watch.1      | FATAL: Pry failed to get user input using Readline.\n14:36:48 watch.1      | To fix this you may be able to pass input and output file descriptors to pry directly. e.g.\n14:36:48 watch.1      |   Pry.config.input = STDIN\n14:36:48 watch.1      |   Pry.config.output = STDOUT\n14:36:48 watch.1      |   binding.pry\n14:36:48 watch.1      |\n14:36:48 - INFO - Bye bye...\n14:36:48 watch.1      | exited with code 1\n% bundle exec foreman start\n14:37:12 watch.1      | started with pid 86409\n14:37:12 nanoc_view.1 | started with pid 86410\n14:37:13 nanoc_view.1 | Could not find the required 'adsf' gem, which is necessary for the view command.\n14:37:13 watch.1      | 14:37:13 - INFO - Compilation succeeded.\n14:37:13 watch.1      |\n14:37:13 watch.1      | 14:37:13 - INFO - LiveReload is waiting for a browser to connect.\n14:37:14 watch.1      | 14:37:14 - INFO - Guard is now watching at '~/jm3.net'\nError: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:37:14 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:37:14 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:37:14 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:37:14 watch.1      | Error: wrong argument type Nanoc::CLI::CleaningStream (expected File)\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:in output='\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:228:inset_readline_output'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:183:in block in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:129:inhandle_read_errors'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:170:in read_line'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:98:inread'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:68:in block in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:inloop'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:67:in repl'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:inblock in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:61:in __with_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/input_lock.rb:79:inwith_ownership'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:38:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/repl.rb:13:instart'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/pry-0.11.2/lib/pry/pry_class.rb:192:in start'\n14:37:14 watch.1      | ~/vendor/bundle/ruby/2.4.0/gems/guard-2.14.1/lib/guard/jobs/pry_wrapper.rb:102:inblock (2 levels) in _switch_to_pry'\n14:37:14 watch.1      | FATAL: Pry failed to get user input using Readline.\n14:37:14 watch.1      | To fix this you may be able to pass input and output file descriptors to pry directly. e.g.\n14:37:14 watch.1      |   Pry.config.input = STDIN\n14:37:14 watch.1      |   Pry.config.output = STDOUT\n14:37:14 watch.1      |   binding.pry\n14:37:14 watch.1      |\n14:37:14 - INFO - Bye bye...\n14:37:14 nanoc_view.1 | exited with code 1\n14:37:14 system       | sending SIGTERM to all processes\n14:37:14 watch.1      | exited with code 0\n``. I deleted the whole bundle and re-bundled to make sure that it was clean, using your git branch source forddfreyne/cri`.\nI tried the Procfile with bundle exec and without bundle exec, and pasted the errors above.. - removed foreman from the bundle\n- uninstall foreman completely (all versions) and reinstalled it\n- made sure all gems are updated to latest\n- bundle is updated to latest\nresult: no change; removing foreman from the bundle yields the same error, guard 2.14.1 => pry 0.11.2 => Error: wrong argument type Nanoc::CLI::CleaningStream (expected File). Oh wow, ugh. It looks like it was the -i option to guard:\nforeman start\n15:24:06 watch.1      | started with pid 97565\n15:24:06 nanoc_view.1 | started with pid 97566\n15:24:06 nanoc_view.1 | [2017-11-18 15:24:06] INFO  WEBrick 1.3.1\n15:24:06 nanoc_view.1 | [2017-11-18 15:24:06] INFO  ruby 2.4.0 (2016-12-24) [x86_64-darwin16]\n15:24:06 nanoc_view.1 | [2017-11-18 15:24:06] INFO  WEBrick::HTTPServer#start: pid=97566 port=3000\n15:24:07 watch.1      | 15:24:07 - INFO - Compilation succeeded.\n15:24:07 watch.1      |\n15:24:07 watch.1      | 15:24:07 - INFO - LiveReload is waiting for a browser to connect.\n15:24:07 watch.1      | 15:24:07 - INFO - Guard is now watching at '~/jm3.net'\n\nThanks for your help isolating that. Starts fine now, with and without bundle exec in the Procfile.. Very cool, I'm trying it out now. I followed the instructions (github gem source, new gem deps, re-bundle, export NANOC_FEATURES=all, updated Procfile), but I get this error:\n% foreman start\n16:26:29 watch.1 | started with pid 14128\n16:26:29 view.1  | started with pid 14129\n16:26:29 view.1  | view: illegal option -- reload\n16:26:29 watch.1 | Compiling site\u2026\n16:26:30 view.1  | exited with code 1\n16:26:30 system  | sending SIGTERM to all processes\n16:26:30 watch.1 | Site compiled in 0.13s.\n16:26:30 watch.1 |\n16:26:30 watch.1 | exited with code 0\n\n% nanoc -v\nNanoc 4.8.12 \u00a9 2007-2017 Denis Defreyne.\nRunning ruby 2.4.0 (2016-12-24) on x86_64-darwin16 with RubyGems 2.6.8.\n\nmy Guardfile looks like this:\nguard 'nanoc' do\n  watch('nanoc.yaml')\n  watch('Rules')\n  watch(%r{^(source|layouts|lib)/.*$})\nend\n\nguard 'livereload' do\n  watch(%r{build/.+\\.(css|js|html)})\nend\n\n. OK cool, that helped. FYI, if the directory \"output\" doesn't exist, this error is thrown:\n09:20:26 watch.1 | started with pid 60862\n09:20:26 view.1  | started with pid 60863\n09:20:27 view.1  |\n09:20:27 view.1  | Captain! We\u2019ve been hit!\n09:20:27 view.1  |\n09:20:27 view.1  |   ... 36 lines omitted (see crash.log for details)\n09:20:27 view.1  |   9. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen.rb:41:in `new'\n09:20:27 view.1  |   8. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/listener.rb:47:in `initialize'\n09:20:27 view.1  |   7. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/listener.rb:47:in `new'\n09:20:27 view.1  |   6. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/backend.rb:25:in `initialize'\n09:20:27 view.1  |   5. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/backend.rb:25:in `new'\n09:20:27 view.1  |   4. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/adapter/config.rb:16:in `initialize'\n09:20:27 view.1  |   3. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/adapter/config.rb:16:in `map'\n09:20:27 view.1  |   2. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/adapter/config.rb:17:in `block in initialize'\n09:20:27 view.1  |   1. from ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/adapter/config.rb:17:in `realpath'\n09:20:27 view.1  |   ~/vendor/bundle/ruby/2.4.0/gems/listen-3.1.5/lib/listen/adapter/config.rb:17:in `realpath'\n09:20:27 view.1  |\n09:20:27 view.1  | Errno::ENOENT: No such file or directory @ realpath_rec - ~/jm3.net/output\n09:20:27 view.1  |\n09:20:27 view.1  | A detailed crash log has been written to ./crash.log.\n09:20:27 watch.1 | Compiling site\u2026\n09:20:27 view.1  | exited with code 1\n09:20:27 system  | sending SIGTERM to all processes\n09:20:27 watch.1 | Site compiled in 0.13s.\n09:20:27 watch.1 |\n09:20:27 watch.1 | exited with code 0\n\u279c Code/sites/jm3.net (master) \u2717 > ack output\ncrash.log\n5:Errno::ENOENT: No such file or directory @ realpath_rec - ~/jm3.net/output\n\nnanoc.yaml\n2:enable_output_diff: false\n4:output_dir: build\n\nI created output and it fixed it. Nanoc loads and reloads now, but the actual site isn't reloading in the browser when something changes \u2014\u00a0it requires a manual refresh in Chrome. Is that the expected behavior?. Oh wow, that was it! Thank you! I guess it can't be marked as a requirement because not everyone uses live reload?. Two questions: \n\nShould I just fully delete my (old) Guardfile now that I'm using the latest nanoc watching stuff?\nIt's ok to kill adsf and adsf-live from my Gemfile now, correct, since I'm bundling nanoc-live which (I believe) requires adsf-live \u2192 adsf?. \n",
    "zachahn": "My bad.. that helped. I just took a second look, and apparently I was trying to modify data in both the preprocess and compile. (Forgot to remove the modifying code in the compilation block after copying the code to the preprocess)\nThanks, and sorry for the confusion\n. ",
    "Sudrien": "File.absolute_path 's lack of existence was the other issue I ran into before deciding I needed to look into RVM anyways. \n. @ddfreyne I have access to RVM, so yes. \n. @ddfreyne I'll manage. Thanks.\n. ",
    "ghiknt": "After further experiment it is also impossible to pass options twice (e.g. --filter).  Since the last one is all that is kept in the hash.  Temporally worked around by adapting test case to filter wrapper:\nruby\nclass PandocCommandLine < Nanoc::Filter\n  identifier :pandoc_commandline\n  type :text\n  def run(content, params={})\n   filter = ::Nanoc::Filters::Pandoc.new\n   filter.setup_and_run(content, *params[:args])\n  end\nend\nWhich is called by Rules file.\nruby\nopts = ['table-of-contents', {:to => :html5, 'base-header-level' => 2}, {:filter =>'pandoc-zotxt'}, {:filter => 'pandoc-citeproc'}]\nfilter :pandoc_commandline, :args => opts\n- Note table-of-contents is not a good one to use for testing though since it only gets rendered in latest pandoc when --standalone is specified.\n. Gladly.  I have manually patched against 3.7.5 using your diff and it works great.  Where do I +1?\n. :+1:\n. Looks good to me.  My test/use case is:\nruby\nopts = [{:to => :html5,\n        'base-header-level' => 2,\n        :filter => 'pandoc-citeproc',\n        'data-dir' => 'content/about/bibliography/',\n        :bibliography => 'content/about/bibliography/whk.name.bib',\n        :csl => 'content/about/bibliography/chicago-annotated-bibliography.csl'\n       }, 'section-divs']\nfilter :pandoc, :args => opts\nWhich I would have been able to develop from the new docs.\n. ",
    "th-h": "Yeah, I should have opened an issue before. Sorry.\nMy train of thought was, as the current behaviour (as of 3.7.5) already was a backwards compatibility break (introduced by a9c947803185b63336b2a93184155f538fa32eba in 2012), I could just fix it without adding another option (as the default behaviour without setting the :article option wouldn't change and everybody setting :article could just be sorted any way one likes).\nI didn't bear in mind that I'd yet again  break backwards compatibility.\nThe fix in #534 works for me. Thank you!\n. pmalik56 wrote:\n\nOne more thing I am facing issue on processing static component.\nSeems like rules are not working on static folder as if it's not\nprocessing at all anything inside static. Previously its was working\non nanoc 3.7.5 version.\n\nDo you mean the static data source? That was removed in nanoc 4.\nOn the upgrade page, it says:\n\nIf you use the static data source, disable it for now and follow the\nextended upgrade instructions below.\n\nSee\nhttp://nanoc.ws/doc/nanoc-4-upgrade-guide/#upgrading-from-the-static-data-source.\n-thh\n. Ah, I see it's documented:\n\n:preserve_order (Boolean)\nWhether or not the ordering of the list of articles should be preserved. If false or unspecified, the articles will be sorted by created_at. If true, the list of articles will be used as-is, and is assumed to end with the most recent article.\n\nAnyway, it would be nice if that restriction could be lifted.. So that changed with Nanoc 4x.? (Or worked in 3.x just by accident?). > So, as I always forget to compile my blog before deploying it (resulting in me deploying, checking my site, seeing I didn't compiled, feeling dumb, compiling, redeploying)\nWhat about using a Nanoc command or - even easier - a shell alias for deploying?\nUsing e.g. alias nanoc-deploy='nanoc; nanoc deploy' in your .bashrc or whereever should do the trick, I think.. That would be fine! I fear I'm out of my depth .... ",
    "jethrogb": "538 is not sufficient for fixing this. The proposed logic in ItemRep::compiled_content might make sense, but it does not match up with ItemRep::layout: there is a state where the final :pre snapshot has been created but a :post snapshot does not yet exist: https://github.com/nanoc/nanoc/blob/7a297646/lib/nanoc/base/result_data/item_rep.rb#L380-398\n. As I mentioned before, this is not fixed by #538. Please re-open.\n. Thanks for this PR. Works perfectly for me (I tested against 3.7.5 applying both #538 and this)\n. > The snapshots instance variable is a bit weird anyway. It is used to check whether #compiled_content is trying to access a snapshot that exists, but I believe @content can be used for that purpose.\nQuite weird, I feel like there's something missing. I grepped through the code, and it looks like the only uses of this variable are https://github.com/nanoc/nanoc/blob/release-3.7.x/lib/nanoc/base/result_data/item_rep.rb#L242 and \nhttps://github.com/nanoc/nanoc/blob/release-3.7.x/lib/nanoc/base/result_data/item_rep.rb#L435 and\nhttps://github.com/nanoc/nanoc/blob/release-3.7.x/lib/nanoc/base/compilation/compiler.rb#L330 . In particular, manually calling ItemRep.snapshot does not change this variable. Is this wanted behavior?\n. Any ideas on how to approach the test? AFAIK there is no platform-independent way to configure the current timezone.\n. Thanks for picking this up, I've been swamped...\n. ",
    "tmus": "Hi Denis,\nApologies, I'll be sure to use them in the future. This looks perfect - thank you very much, and thank you for creating such a fantastic tool!\n. ",
    "froderik": "Yep - it puzzles me. I updated the comment with the warning I get.\n. Aha - that explains it. Does it need to have av version in the gemspec?\n. ",
    "TheLonelyGhost": "Given the switch in the Gemfile based on ruby version, it seems like committing Gemfile.lock is out of the question. Perhaps someone with a working copy of it can help by specifying the latest working version of minitest?\n. Ah, that did it. Figured my rbenv setup would automatically handle the bundle exec prefix. :disappointed:\n. :+1: Minitest 5.x. Was planning on opening a PR to learn more about Minitest (versus rspec, etc.) until I saw #546.\nI just ended up creating a shell alias for rake to prefix it with bundle exec. Never use rake without bundler anyway so it works for me.\n. :+1:\n. You're right that defaulting to the current directory is less clear than the current documentation.\nCircumstances:\n- I have a project hosted locally in ~/myproject containing a super awesome Ruby gem that I am now circling back to update documentation.\n- Project docs are being kept in a separate branch of the repository, gh-pages, which only contains Rust project source code necessary for documentation.\n- Current docs use Jekyll to render them as a small website using Github Pages, but I want to use nanoc instead of Jekyll.\n- I create a fresh branch, docs, for the nanoc which will contain the nanoc source files.\n- I will output the generated assets for the nanoc site to the gh-pages branch, completely replacing the Jekyll source files.\n- The current working directory is ~/myproject and the currently checked-out branch is doc.\nGiven the above, I have 3 options:\n1. cd into ~/myproject and run nanoc create-site\n   - Gives command usage instead of creating in current directory\n2. cd into ~/myproject and run nanoc create-site ./\n   - Fails saying a site already exists instead of creating in current directory\n3. cd into ~/ and run nanoc create-site myproject\n   - Fails saying a site already exists instead of creating in specified directory\nWith this pull request, all three scenarios would react as expected.\n. Rebasing now. I'm removing the sections where it defaults to the current directory since you make valid points.\nWhile working on the section about empty directory, I ran into an issue. Checking if the directory is empty may not be right response either since my use case assumes a fresh git branch. With git, even a fresh branch will not be empty since it must contain the .git directory. I hardly think hardcoding exceptions for each version control system would be a good option either.\nWould a prompt requiring confirmation be better if the directory is not empty?\n. Now that master has stable builds again, looks like tests will pass. :+1:\nI've limited the current directory functionality PR to this one and split off the --force option discussed above to #580. I'll let you choose if one or both are merged in.\n. Seems that Travis-CI has had issues in the past week so it might be related to that. Either way, the final commit that was merged had a successful build so it truly is unrelated to this PR.\n. git-rebase gone awry, standby...\nEDIT: See newly opened PR #580\n. It was originally based off of the other PR, but I figured it would be better kept as independent features in case one was accepted and the other rejected.\nRebased from master and moved the !options[:force] condition as per your suggestion while addressing merge conflicts. \n. I feel like your suggestion is a bit wordy, but I can't think of an alternative that gives the same feel as the other messages in a more concise manner. Copypasta verbatim into the new error message.\n. :+1: for *.md rule in default Rules file, though that's likely off-topic for this issue.\nPerhaps I'm behind on the history of nanoc, but why was this feature implemented in the first place? Is the appearance of /about/ in the browser's navigation bar really cleaner than /about.html? What about the effect it has on cluttering the filesystem with directories holding exactly one file?\nBoth options seem clean to me and the latter indicates the format on the actual URL while making no assumptions about the index file on the HTTP server.\n. Shouldn't this follow the null object pattern though? Returning nil isn't as telling as something like EmptyItemView, especially when debugging NoMethodError on NilClass...\n. Also of note, Ruby 1.9.3 was EOL'ed in February, 2015. Definitely safe to take out UTF-8 encoding comments.\n. +1 seems about how I'd do it.\n. ",
    "raven-chen": "ah.. this is a deprecated method.. use guard-nanoc instead..\n. ",
    "denis-soundcloud": "That quite clearly did not work; see Coveralls page for nanoc. Will revisit.\nEdit: Fixed.\n. Interesting! The Set#initialize_dup is unexpected. Could you share stackprof.dump so that I can do more detailed analysis on where this is coming from? Alternatively, can you send me the output of stackprof stackprof.dump --method 'Set#initialize_dup'?\n. It looks like this originates from Set#+, which is used quite often in the checksummer. Perhaps using Hamster::Set would make this problem go away, as it\u2019s a far more efficient way of dealing with immutable data.\n. Can you try adding hamster to your Gemfile, and replacing\ndef update(obj, digest, visited = Set.new)\nwith\ndef update(obj, digest, visited = Hamster::Set.new)\nalong with require 'hamster' at the top of the file? That might fix the slowdown.\n. Please use the Nanoc Google Group for support. GitHub issues is only for issues.\nI\u2019ll close this for now!\n. Simpler algorithm: Pick a random node from the resulting graph, and follow edges until you find a cycle. Remove all visited nodes from the graph. Repeat.. Prefer assert_equal(actual_content, raw_content) \u2014 the assertion failure message will be more clear.. ",
    "rrrene": "No need to explain yourself :+1: On the contrary: Thanks for being one of the first to sport this badge in your README!\nIt's people like you that gave Inch a chance and made it a success (and this blog post possible: http://trivelop.de/2015/06/18/inch-ci-first-anniversary/ )\nKudos to you, sir! :man: \n. ",
    "Ajedi32": "Sorry to butt in here, but I feel that \"being a jerk\" in that context is actually pretty well defined. It's defined by point 2: \"If you are a jerk, the rest of the community will ask you to stop.\" E.g. The project's community collectively decides what \"being a jerk\" is, and will call you out on it if you are being one.\nLonger CoC documents like the contributor covenant are just as subjective IMO, and don't add much beyond simple common sense. They provide obvious examples of \"being a jerk\", but leave everything else to the judgement of project collaborators. Unless you implement a full fledged procedure for defining in exact detail what \"being a jerk\" is and isn't, and exactly how to deal with it when it comes up, everything's all subjective anyway, making a formal CoC document pretty pointless.\nEh whatever, just my 2 cents. I'll be going now...\n. ",
    "ihmels": "It refers to atom feeds (MIME type is application/atom+xml).\n. Yes, because it\u2019s the extension for atom feed files. Using .atom as extension allows me to set the proper MIME type in .htaccess file.\n. Then why there is html, htm or xhtml in the text_extensions array? Nanoc would route content/hello-world.erb to output/hello-world.html if you instruct it in the Rules file.\n. ",
    "bburton": "Agree with @Fjan on --env/-e option for specifying an environment name. Those options seem to be commonly used in many Ruby apps including compass which is used with Nanoc by many people. But then there needs to be a way to load the environment specific configuration. It would probably be best to always load nanoc.yaml and if -e/--env is specified or the NANOC_ENV environment variable is defined, then load the specified environment specific name from a file such as nanoc-production.yaml if \"production\" was specified either way.\nThe minimalist approach is just to run nanoc.yaml through Erb which would give users lots of flexibility while being extremely simple to implement. What might complement that nicely would be a soft dependency on the dotenv gem (https://github.com/bkeepers/dotenv) which supports importing configuration through an .env file and then pushing it into ENV[].\n. As much as I like the idea of adding environment support, this change makes certain assumptions that will cause problems with certain filters. For instance, the compass filter creates a .sass-cache folder in the project directory where nanoc compile is run. It's quite possible other filters may create temporary folders where files are cached.\nAs a result, the only safe way to use this feature is to only compile to one environment in a given project folder and not compile different environments in the same project folder. \nSure it's possible to configure the sass compiler to cache to a specific location but the setup is complicated because the environment setting needs to be passed to the compass config.rb and used to set the sass :cache_location property. Not only that, the configuration has to be made to config.rb so it's possible to run the compass command by itself outside of nanoc and have it pick up the right environment location.\nCompass also supports environments so it would be ideal if the environment setting configured for Nanoc could be passed into the compass config.rb but that's a bit beyond the current topic.\nHowever, aside from the filters nanoc supports out of the box, even if all of them were reviewed and fixed if necessary, there's no guarantee that third-party filters aren't writing or caching files to the project directory.\nEven if switching environments to compile into the same folder is not supported, environment support is still very useful when building with one environment configuration such as development in its own folder, then push changes to a Git repository, e.g. github.com, then in a different folder configured as the production environment perform a git pull and recompile.\n. ",
    "majkinetor": "What I currently is to have section like this in nanoc.yaml file:\n\nenvironments:\n    development:\n       config1: value1\n       ....\n       confign: valuen\n    test:\n       ...\n    production:\n       ...\n\nand at the top of Rules file I call function set_environment:\n\ndef set_environment\n    envs = @config[:environments] || {}\n    active = ENV.fetch \"NANOC_ENVIRONMENT\", 'development'\n    puts \"\\n\\n|====== ENV: #{active} ======\\n\\n\"\n    envs[active.to_sym].each do |k,v|\n        @config[k] = v\n    end\nend\n\n. > I believe a better approach would be to add attributes to the site configuration, items and layouts, and parameterise rules that way, so that there\u2019s no need to generate rules programmatically.\nThis is precisely what I try to avoid. I would like to have zero configuration for some modules. I just want to plug it in (enable it in preprocessing section) and it should setup details itself. Typical case is tags module - I want to have 1 page that shows all tags and one blog for each individual tag and 1 feed for each tag blog. If I include such module it should create all those items and configure them for the articles that have tags metadata, no questions asked. With module arguments or site config I could customize the module if I need to. Without it, I need to setup all that manually (which means stuff in content, stuff in nanoc.yaml and stuff in Rules on multiple places, stuff in default.rb) which makes removal of tags non-trivial especially after some time has passed. Furthermore, multiply this with the number of nanoc sites where you need this functionality. If I need to maintain this module over multiple sites its even more problematic.\n\nAn additional challenge with generating rules is that it gets rid of a central place where all rules are stored.\n\nWe have  nanoc show-rules for that ? Also, it seems easy to change #include_rules to remember all included files and list their content with new command (or just those generated by modules).\nI think that existence of mechanisms such as this would make nanoc far more usable as without understanding the internals much you would be able to follow plugin/module convention to get the desired effect and only tweak internal details if those conventions are not good in your scenario. Black box functionalities would also make easier for everybody to experiment.\n. ",
    "croath": "@ddfreyne Yes you are right... I mean, it really make sense. Check the appending commit :smile: \n. Test function added!\n. With pleasure :smile: \n. ",
    "laveesht": "Yeah i was using identifier_type: full in configs.\nOkay so item.parent is now removed.\nThanks for the regex , will try to work my way around somehow.\nIn any case is there any detailed docs of the core changes in nanoc somewhere , can you please point me there.\n. ",
    "doc75": "Hello,\nI just had the same problem, and it was related to css file bootstrap.min.css.\nWhen I temporarily remove this file from the output directory, the check is working fine.\nPerhaps we could add a new setting to be able to list the css files to exclude from the check.\nYour thoughts on this ?\n. You are correct, the w3c_validators gem has an issue with big files.\nI fixed it through https://github.com/alexdunae/w3c_validators/pull/17, but not sure if this repo is still active.\nIf I have no answers in the coming week, I might start a community fork to publish a new version (waiting for repo owner answer so far).\n. ",
    "bishop335": "Enhance this\n. ",
    "mitchelltd": "That's great thanks ! I presume that the documentation will be changed at the same time ?\n. ",
    "opatry": "Reproduced on Mac OS X 10.11.1 with a case sensitive file system\nsh\n$ env |grep LC_              \nLC_CTYPE=en_US.UTF-8\nLC_ALL=en_US.UTF-8\nsh\n$ nanoc --version\nnanoc 3.8.0 \u00a9 2007-2015 Denis Defreyne.\nRunning ruby 2.0.0 (2015-04-13) on universal.x86_64-darwin15 with RubyGems 2.0.14.\nsh\n$  ruby --version\nruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]\n. Hi, an update regarding conditions to reproduce.\nIt seems related to the ruby version since @gpakosz uses ruby 2.2.x and I'm using ruby 2.0.x.\nIt tried with same environment but ruby 2.2 installed using homebrew and it worked.\nSo:\n- with ruby 2.0.x it prunes files containing non ASCII characters :boom: \n- with ruby 2.2.x it keeps all files regardless kind of characters :ok_hand:  \nsh\n$ brew install ruby\n$ export PATH=/usr/local/Cellar/ruby/2.2.3/bin:$PATH\n$ gem install nanoc\nsh\n$ nanoc --version\nnanoc 3.8.0 \u00a9 2007-2015 Denis Defreyne.\nRunning ruby 2.2.3 (2015-08-18) on x86_64-darwin15 with RubyGems 2.4.5.1.\nsh\n$ ruby --version\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin15]\n. Ok with that, maybe we can add a note on that in the Troubleshooting page of the documentation? (I can open a PR if you agree with that)\n. ",
    "rosetree": "Thanks for your answer. According to your recommendation, I created the pull request https://github.com/nanoc/nanoc/pull/717\n. I\u2019d love to add tests for #attribute_to_time, but actually I\u2019m not really sure how to do this. That shouldn\u2019t be a huge problem, though. I\u2019m going to learn and do this on Saturday, if that\u2019s not to late. Maybe I\u2019d come with some questions back to you, @ddfreyne. Should this be tested with values of example items or with static objects? Could you point me to a similar test within Nanoc, that I could use as a reference? Thanks :smiley_cat:.\n. I don\u2019t mind at all. Thank you for providing this explanation. :)\n. Thanks @lvuotto!\n. I implemented this feature in my blog by first excluding the SASS compilation from the nanoc build (https://github.com/rosetree/plasisent.org/commit/14772ccf30ccb394c64b5b836847054b37807363) and later used the SHA1 hash as filename (https://github.com/rosetree/plasisent.org/commit/61795e09b262e1390be94657222d8c1761f35ecb). It\u2019s a bit like the second solution, @ddfreyne suggested, but my approach makes sure, that the CSS file doesn\u2019t have any dependencies on compile time.\n. > Prefer raising an ArgumentError in this case\nYou\u2019re right.\n\nCan you add a test for this?\n\nYes; done.\n\nAs you, I don\u2019t think type checks are the most elegant solutions, but I didn\u2019t see a better way here. An ArgumentError is imho better, compared to a NoMethodError.\n. ",
    "mkasu": "Thank you for the quick response. I tried your patch and it seems to work splendidly. My update went through without trouble.\nAs a side note some \"feature suggestion\": Maybe a verbose flag would be useful for bigger deployments. The \"Uploading local files\" step can take a long of time. It'd be useful to see the current progress. Locally, I just added a \"puts file_path\" in the upload-loop, which works well enough for me, but a flag would probably be a better solution for upstream. I can look into it when having a little bit free time.\n. ",
    "suy": "I've sent the request to master because the layout has changed, and is not a \"critical\" thing. Users will just add the file names to their YAML.\n. Yep, that was exactly my reasoning: On Github or Gitlab this is recognized, and the \".asc\" I tend to see it as the \"ascii armored GPG something\".\n. ",
    "lvuotto": "Alright, working on it. Should I take in consideration keeping the old behavoiur of adding an \"active\" class or should it be completely overriden by attributes hash?\n. And what should be the behaviour when someone set the class attribute? \nAppend active always? Only if it's not present? Discard what attribute?\nOn 28/11/15 13:06, Denis Defreyne wrote:\n\nYes\u2014retain the old behavior.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nanoc/nanoc/issues/737#issuecomment-160314793.\n\n-- lv.\n. For signature, what about def link_to_unless_current(text, target, active_class: 'active', **attributes)? It's the correct form of def link_to_unless_current(text, target, attributes = {}, active_class: 'active') and it will keep backwards compatibility, remove the need for Hash#fetch, and won't mutate attributes.\nFor the reduce part, I just copy-pasted the code from link_to. If it'll be slow, the best would be to change both functions and that escapes the scope of the issue in this PR.\nFor the failing tests, they're style warnings, which I'll fix and push if we come to terms about the function signature and if the patch is worthless or not.\n. I respect your opinion, I might see your point and I'll close this PR if you want to.\nBut before that, let me propose you a final idea: IMO the problem raises from the capability of link_to to generate tags with attributes, which link_to_unless_current lacks. What if we move this outside from link_to to something like def make_tag(tag, content, **attributes) and both link_to and link_to_unless_current just call make_tag with the right parameters, i.e., link_to will create an anchor and link_to_unless_current will create a span and will append \"active\" to attributes' :class.\n. Hi, sorry for the delay. I haven't had time to work in this and I won't have time in the near future either. The only thing that came to my mind is a really ugly solution: setting the active class in a module variable and changing it in the preprocessor. It won't clobber html attributes with functions params and it will be backward compatible, but I think it's really, really ugly and it would do slight damage to the code readability.\nGiven that we couldn't agree on how to make things in way that it's both backward compatible and doesn't clobber html attributes with function params, I think we should close this PR, unless you think that the ugly solution is the way to go. If that is the case, I think I can do something over weekend.\n. ",
    "nrdufour": "Thank you! The workaround is working perfectly!\n. ",
    "hilohiro": "Thank you a lot!\nI'll try with release-4.1.x branch later.\n. I checked out the latest release-4.1.x branch and it worked fine!\nThank you for your quick help.\n. ",
    "query": "Yup, this works. Compile times went down from minutes to less than 15 seconds. Thanks!\n. ",
    "igr": "Hey @ddfreyne sure - Ive shared the whole site on github, so it is very easy to recreate.\ncrash.log\n```\nigor@SupraSurf:~/prj/heapspace/website:master$ cat crash.log                                                                                                                    \u23ce \u2731 [23:44]\nCrashlog created at 2016-01-22 23:44:38 +0100\n===== MESSAGE:\nNoMethodError: undefined method `path' for #\n===== COMPILATION STACK:\n\n[item]   /index.md (rep default)\n\n===== STACK TRACE:\n\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/helpers/link_to.rb:119:in `relative_path_to'\nlayout /_events.html:4:in `block in get_binding'\nlayout /_events.html:2:in `each'\nlayout /_events.html:2:in `get_binding'\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0/erb.rb:863:in `eval'\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0/erb.rb:863:in `result'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/filters/erb.rb:32:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/filter.rb:130:in `setup_and_run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/helpers/rendering.rb:119:in `render'\nlayout /index.html:39:in `get_binding'\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0/erb.rb:863:in `eval'\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0/erb.rb:863:in `result'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/filters/erb.rb:32:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/filter.rb:130:in `setup_and_run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/services/executor.rb:91:in `layout'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:257:in `block in recalculate_content_for_rep'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/entities/rule_memory.rb:44:in `block in each'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/entities/rule_memory.rb:44:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/entities/rule_memory.rb:44:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:252:in `recalculate_content_for_rep'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:227:in `compile_rep'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:202:in `block in compile_reps'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/services/item_rep_selector.rb:18:in `block in each'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/services/item_rep_selector.rb:13:in `loop'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/services/item_rep_selector.rb:13:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:200:in `compile_reps'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:103:in `block in run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/dependency_tracker.rb:18:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:102:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/compilation/compiler.rb:89:in `run_all'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/base/entities/site.rb:24:in `compile'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/commands/compile.rb:375:in `block in run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/commands/compile.rb:417:in `run_listeners_while'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/commands/compile.rb:374:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/command_runner.rb:12:in `block in call'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/command_runner.rb:11:in `call'\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib/cri/command_dsl.rb:233:in `block in runner'\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib/cri/command.rb:294:in `call'\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib/cri/command.rb:294:in `run_this'\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib/cri/command.rb:247:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib/cri/command.rb:260:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli.rb:53:in `block in run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib/nanoc/cli.rb:51:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/bin/nanoc:9:in `'\n/usr/local/lib/ruby/gems/2.2.0/bin/nanoc:23:in `load'\n\n===== VERSION INFORMATION:\nNanoc 4.1.2 \u00a9 2007-2016 Denis Defreyne.\nRunning ruby 2.2.2 (2015-04-13) on x86_64-darwin14 with RubyGems 2.4.5.\n===== SYSTEM INFORMATION:\nDarwin SupraSurf.local 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64\n===== INSTALLED GEMS:\nadsf 1.2.0\n  builder 3.2.2\n  bundler 1.11.0\n  chunky_png 1.3.5\n  coderay 1.1.0\n  colored 1.2\n  compass 1.0.3\n  compass-core 1.0.3\n  compass-import-once 1.0.5\n  configure-s3-website 1.7.1\n  cri 2.7.0\n  deep_merge 1.0.0\n  dotenv 1.0.2\n  ffi 1.9.10\n  formatador 0.2.5\n  guard 2.13.0\n  guard-compat 1.2.1\n  guard-nanoc 2.0.0\n  haml 4.0.7\n  htmlcompressor 0.3.0\n  jsmin 1.0.1\n  json 1.8.3\n  kramdown 1.9.0\n  listen 3.0.5\n  lumberjack 1.0.9\n  method_source 0.8.2\n  mime-types 3.0\n  mime-types-data 3.2015.1120\n  mini_portile2 2.0.0\n  multi_json 1.11.2\n  nanoc 4.1.2\n  nanoc-external 1.0.1\n  nenv 0.2.0\n  nokogiri 1.6.7\n  notiffany 0.0.8\n  pry 0.10.3\n  rack 1.6.4\n  rainpress 1.0\n  rb-fsevent 0.9.6\n  rb-inotify 0.9.5\n  s3_website 2.12.2\n  sass 3.4.20\n  shellany 0.0.1\n  slop 3.6.0\n  thor 0.19.1\n  tilt 2.0.1\n===== GEMFILE.LOCK:\nGIT\n  remote: git://github.com/nanoc/nanoc-external.git\n  revision: e8efcfa2c2075222caa31a738280da4147b33f09\n  branch: nanoc4\n  specs:\n    nanoc-external (1.0.1)\n      nanoc (>= 3.8.0, < 5.0.0)\nGEM\n  remote: https://rubygems.org/\n  specs:\n    adsf (1.2.0)\n      rack (>= 1.0.0)\n    builder (3.2.2)\n    chunky_png (1.3.5)\n    coderay (1.1.0)\n    colored (1.2)\n    compass (1.0.3)\n      chunky_png (~> 1.2)\n      compass-core (~> 1.0.2)\n      compass-import-once (~> 1.0.5)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n      sass (>= 3.3.13, < 3.5)\n    compass-core (1.0.3)\n      multi_json (~> 1.0)\n      sass (>= 3.3.0, < 3.5)\n    compass-import-once (1.0.5)\n      sass (>= 3.2, < 3.5)\n    configure-s3-website (1.7.1)\n      deep_merge (= 1.0.0)\n    cri (2.7.0)\n      colored (~> 1.2)\n    deep_merge (1.0.0)\n    dotenv (1.0.2)\n    ffi (1.9.10)\n    formatador (0.2.5)\n    guard (2.13.0)\n      formatador (>= 0.2.4)\n      listen (>= 2.7, <= 4.0)\n      lumberjack (~> 1.0)\n      nenv (~> 0.1)\n      notiffany (~> 0.0)\n      pry (>= 0.9.12)\n      shellany (~> 0.0)\n      thor (>= 0.18.1)\n    guard-compat (1.2.1)\n    guard-nanoc (2.0.0)\n      guard (~> 2.8)\n      guard-compat (~> 1.0)\n      nanoc (~> 4.0)\n    haml (4.0.7)\n      tilt\n    htmlcompressor (0.3.0)\n    jsmin (1.0.1)\n    json (1.8.3)\n    kramdown (1.9.0)\n    listen (3.0.5)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n    lumberjack (1.0.9)\n    method_source (0.8.2)\n    mime-types (3.0)\n      mime-types-data (~> 3.2015)\n    mime-types-data (3.2015.1120)\n    mini_portile2 (2.0.0)\n    multi_json (1.11.2)\n    nanoc (4.1.2)\n      cri (~> 2.3)\n    nenv (0.2.0)\n    nokogiri (1.6.7)\n      mini_portile2 (~> 2.0.0.rc2)\n    notiffany (0.0.8)\n      nenv (~> 0.1)\n      shellany (~> 0.0)\n    pry (0.10.3)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    rack (1.6.4)\n    rainpress (1.0)\n    rb-fsevent (0.9.6)\n    rb-inotify (0.9.5)\n      ffi (>= 0.5.0)\n    s3_website (2.12.2)\n      colored (= 1.2)\n      configure-s3-website (= 1.7.1)\n      dotenv (~> 1.0)\n      thor (~> 0.18)\n    sass (3.4.20)\n    shellany (0.0.1)\n    slop (3.6.0)\n    thor (0.19.1)\n    tilt (2.0.1)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  adsf\n  builder\n  coderay\n  compass\n  guard-nanoc\n  haml\n  htmlcompressor\n  jsmin\n  json\n  kramdown\n  mime-types\n  nanoc (= 4.1.2)\n  nanoc-external!\n  nokogiri\n  rainpress\n  s3_website\n  sass\nBUNDLED WITH\n   1.11.0\n===== LOAD PATHS:\n\n/usr/local/lib/ruby/gems/2.2.0/gems/s3_website-2.12.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/rainpress-1.0/lib\n/usr/local/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0/nokogiri-1.6.7\n/usr/local/lib/ruby/gems/2.2.0/gems/nokogiri-1.6.7/lib\n/usr/local/lib/ruby/gems/2.2.0/bundler/gems/nanoc-external-e8efcfa2c207/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/mini_portile2-2.0.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/mime-types-3.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/mime-types-data-3.2015.1120/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/kramdown-1.9.0/lib\n/usr/local/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0/json-1.8.3\n/usr/local/lib/ruby/gems/2.2.0/gems/json-1.8.3/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/jsmin-1.0.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/htmlcompressor-0.3.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/haml-4.0.7/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/tilt-2.0.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/guard-nanoc-2.0.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/nanoc-4.1.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/guard-compat-1.2.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/guard-2.13.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/pry-0.10.3/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/slop-3.6.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/method_source-0.8.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/notiffany-0.0.8/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/shellany-0.0.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/nenv-0.2.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/lumberjack-1.0.9/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/listen-3.0.5/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/formatador-0.2.5/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/dotenv-1.0.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/cri-2.7.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/configure-s3-website-1.7.1/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/deep_merge-1.0.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/compass-1.0.3/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/rb-inotify-0.9.5/lib\n/usr/local/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0/ffi-1.9.10\n/usr/local/lib/ruby/gems/2.2.0/gems/ffi-1.9.10/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/rb-fsevent-0.9.6/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/compass-import-once-1.0.5/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/compass-core-1.0.3/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.20/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/multi_json-1.11.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/colored-1.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/coderay-1.1.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/chunky_png-1.3.5/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/builder-3.2.2/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/adsf-1.2.0/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/rack-1.6.4/lib\n/usr/local/lib/ruby/gems/2.2.0/gems/bundler-1.11.0/lib\n/usr/local/lib/ruby/site_ruby/2.2.0\n/usr/local/lib/ruby/site_ruby/2.2.0/x86_64-darwin14\n/usr/local/lib/ruby/site_ruby\n/usr/local/lib/ruby/vendor_ruby/2.2.0\n/usr/local/lib/ruby/vendor_ruby/2.2.0/x86_64-darwin14\n/usr/local/lib/ruby/vendor_ruby\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0\n/usr/local/Cellar/ruby/2.2.2/lib/ruby/2.2.0/x86_64-darwin14\n\n``\n. Im usinglink_to(h(item[:title]), item)` on html partial.\n. Hey @ddfreyne, everything is already shared - please check the very first link.\nhttps://github.com/heapspace/website\n. Just checked 4.1.0; same thing.\n. >  but store their identifiers instead\nSorry, i was not aware of this. What is identifier of an item?\n. Thanx! I will refactor my code.\n. Can I use item.identifier? I mean, how to get the identifier from the item? item.path?\n. Thank you very much. nanoc4 is my favorite weapon :)\n. Ok, one question - if you still watching this :)\nI want to 'attach' additional information to each item. If I am not storing the mutable items (from preprocessing phase) - when and how I can 'bind' this information to items?\nExample: I want to attach parsed date to each item (using attribute_to_time).\nShould I create separate memory structure for this and store it in the hash map, that has item identifiers as key?\n. Thanx! Already doing so. Awesome\n. I am doing now this in my preprocessor block\n```\n  @items.each do |item|\n    # TODO\n    # fix missing filename attribute\n    if (item[:filename] == nil) then\n      item[:filename] = \"content\" + item.identifier\n      print item[:filename]\n    end\n```\nUgly :). ",
    "Ecco": "Please don't fix it by removing the feature, it's definitely useful.\n. My understanding is that the compilation process first builds an item dependency graph. This graph shouldn't have any cycle otherwise the compilation process cannot happen. Once this acyclic graph has been built, the compiler walks the graph and builds items in the \"right\" order (to ensure items depending on others are built after them)\nThat being said, the build of a given item is a two-step process : first filter, then route. On a given item, routing should happen after filtering, and filtering shouldn't depend on routing. Those are two sequential operations.\nThe use case is pretty simple : content-based cache busting. You route an item based on its compiled content, and add a hash at the end of the routed item (just like sprockets does, for example). This allows for far-future caching headers, which are very useful.\nFor example, the \"/style.css\" would be routed to item.identifier.without_ext + sha1(item.compiled_content) + \".css\". And on the web server you can specify a 1year+ expiration date without worrying about cache expiration: if the stylesheet ever changes, so will its URL.\n. Thanks for taking some time to write this comprehensive reply. Unfortunately solution number 4 has proven unreliable in the past. See Rails' asset pipeline doc for an explanation why.\nI do like solution number 3 though. It's actually even more efficient, since we don't need the content to be filtered to tell wether it's been modified.\n. Great ! I'll see if I can come up with something.\nNote that regarding that specific issue, the doc is still wrong though :-)\n. Thanks! Denis, would you mind telling me the main steps that what would need to be done to implement solution number three ? \n. ",
    "francois2metz": "Thanks!\n. ",
    "benjie": "(To be clear, I suspect the kramdown warning is a red herring)\n. > Can you reproduce the problem by only changing the Nanoc version (not the version of other dependencies)?\nYes; this was the only thing I changed (was just changing the last digit in gem 'nanoc', \"= 3.7.4\" in my Gemfile and re-running bundle install between each test).\n\nDoes this problem occur for an incremental compilation, or also for a from-scratch compilation (by executing rm -rf tmp before compiling)?\n\n3.7.4\nFrom scratch: Site compiled in 18.42s.\nImmediate rebuild (incremental): Site compiled in 17.31s.\n3.7.5\nFrom scratch: Site compiled in 1382.87s.\nImmediate rebuild: got bored after 5 minutes and killed it. I expect it'll be the same as yesterdays rebuild.\nInterestingly in the from-scratch build the create lines were output within a minute of starting but it hung at the end before confirming; whereas in the incremental one I did the other day it hung before the update lines (possibly and likely afterwards as well).\n\nDoes the issue also occur on Nanoc 3.8?\n\n3.8.0\nErrors for me, because it doesn't pull in the blank? helper from Rails:\n```\nLoading site data\u2026 done\nCompiling site\u2026\n      create  [0.24s]  output/authentication/index.html\nCaptain! We\u2019ve been hit!\nMessage:\nNoMethodError: undefined method `blank?' for \"collection\":String\n```\nAfter fixing this by adding this to my Rules file:\nruby\nrequire 'active_support'\nrequire 'active_support/core_ext/object/blank'\nwe get the same as 3.7.5\nFrom scratch: Site compiled in 1302.61s.\nImmediate rebuild: got bored after a couple minutes\n\nCan I access the source code for the site somewhere?\n\nAlas, no. If I get a chance I'll try and produce a minimal test case that I can share though. It's likely to be a while though.\n. Update: turned out I hadn't killed the 3.8.0 immediate rebuild. Here's the full output:\n```\n$ bundle exec nanoc\nLoading site data\u2026 done\nCompiling site\u2026\nkramdown warning: No link definition for link ID 'due to change in future' found on line 9\nSite compiled in 1285.06s.\n```\n. On it. (Sorry; have been away \ud83c\uddec\ud83c\udde7 \u2708\ufe0f \ud83c\udf41 )\n. Site compiled in 1138.05s.\nHere's the output of stackprof stackprof.dump --text --limit 50:\n```\nMode: cpu(1000)\n  Samples: 345159 (0.02% miss rate)\n  GC: 1689 (0.49%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n    327616  (94.9%)      327078  (94.8%)     Set#initialize_dup\n      7274   (2.1%)        7274   (2.1%)     Set#add\n     14493   (4.2%)         942   (0.3%)     Psych::Visitors::YAMLTree#accept\n       824   (0.2%)         824   (0.2%)     Set#include?\n   4210398 (1219.8%)         567   (0.2%)     Nanoc::Checksummer.update\n       541   (0.2%)         541   (0.2%)     Nanoc::Item#hash\n      1660   (0.5%)         380   (0.1%)     Haml::Buffer#attributes\n       363   (0.1%)         363   (0.1%)     Psych::Nodes::Scalar#initialize\n       363   (0.1%)         361   (0.1%)     Psych::ScalarScanner#tokenize\n       285   (0.1%)         285   (0.1%)     Psych::Visitors::Emitter#visit_Psych_Nodes_Scalar\n       254   (0.1%)         254   (0.1%)     Psych::Visitors::YAMLTree#binary?\n       381   (0.1%)         241   (0.1%)     Haml::Util#inspect_obj\n       941   (0.3%)         206   (0.1%)     Psych::Visitors::YAMLTree#visit_String\n       534   (0.2%)         177   (0.1%)     Haml::Compiler.build_attributes\n       168   (0.0%)         168   (0.0%)     ##children=\n       388   (0.1%)         167   (0.0%)     Haml::Parser#parse_tag\n       150   (0.0%)         150   (0.0%)     Haml::Options#[]\n       155   (0.0%)         150   (0.0%)     Haml::Buffer.merge_attrs\n      6447   (1.9%)         137   (0.0%)     Psych::Visitors::Visitor#visit\n     14726   (4.3%)         137   (0.0%)     Set#merge\n       134   (0.0%)         134   (0.0%)     Nanoc::DataSources::Filesystem#read\n      6813   (2.0%)         132   (0.0%)     Haml::Engine#render\n       177   (0.1%)         117   (0.0%)     Haml::Parser::Line#tabs\n      1990   (0.6%)         115   (0.0%)     Nanoc::DataSources::Filesystem#load_objects\n      2638   (0.8%)         107   (0.0%)     block (4 levels) in \n       101   (0.0%)         101   (0.0%)     Psych::Visitors::YAMLTree#find_ivars\n        99   (0.0%)          99   (0.0%)     Nanoc::NotificationCenter.initialize_if_necessary\n        88   (0.0%)          88   (0.0%)     Psych::Nodes::Node#initialize\n       440   (0.1%)          84   (0.0%)     ActiveSupport::Dependencies::Loadable#require\n      4131   (1.2%)          81   (0.0%)     Psych::Visitors::ToRuby#revive_hash\n        73   (0.0%)          73   (0.0%)     Psych::Visitors::YAMLTree::Registrar#register\n      3300   (1.0%)          71   (0.0%)     Haml::Compiler#compile_tag\n        71   (0.0%)          71   (0.0%)     Haml::Util#balance\n        71   (0.0%)          71   (0.0%)     Psych::Visitors::YAMLTree::Registrar#key?\n      2748   (0.8%)          61   (0.0%)     block (3 levels) in \n        60   (0.0%)          60   (0.0%)     Haml::Helpers#html_escape\n        75   (0.0%)          58   (0.0%)     Haml::Parser.parse_class_and_id\n        64   (0.0%)          56   (0.0%)     Haml::Parser#next_line\n        51   (0.0%)          51   (0.0%)     Haml::Helpers#preserve\n        99   (0.0%)          50   (0.0%)     FileUtils::Entry_#copy_file\n        49   (0.0%)          49   (0.0%)     block (4 levels) in \n       553   (0.2%)          48   (0.0%)     Haml::Compiler#flush_merged_text\n        46   (0.0%)          46   (0.0%)     Haml::Parser#block_keyword\n       409   (0.1%)          46   (0.0%)     Psych::TreeBuilder#scalar\n       780   (0.2%)          44   (0.0%)     Psych::Visitors::Emitter#visit_Psych_Nodes_Document\n        43   (0.0%)          43   (0.0%)     Psych::ClassLoader#load\n        75   (0.0%)          43   (0.0%)     Haml::Compiler.filter_and_join\n      7315   (2.1%)          40   (0.0%)     Set#do_with_enum\n        37   (0.0%)          37   (0.0%)     Haml::Parser#initialize\n       417   (0.1%)          36   (0.0%)     Nanoc::HashExtensions#freeze_recursively\n. https://github.com/nanoc/nanoc/compare/3.7.4...3.7.5#diff-13aaa7d235f22bd91fa101a8340767ff < Differences between 3.7.4 and 3.7.5 focussing on checksummer\n.\nSet#initialize_dup (/Users/benjiegillam/.rbenv/versions/2.3.1/lib/ruby/2.3.0/set.rb:106)\n  samples:  327078 self (94.8%)  /   327616 total (94.9%)\n  callers:\n    327616  (  100.0%)  Set#|\n  callees (538 total):\n     538  (  100.0%)  Nanoc::Item#hash\n  code:\n                                  |   106  |   def initialize_dup(orig)\n  378    (0.1%) /   378   (0.1%)  |   107  |     super\n 327238   (94.8%) /  326700  (94.7%)  |   108  |     @hash = orig.instance_variable_get(:@hash).dup\n                                  |   109  |   end\n``\n. I'm happy sticking to 3.7.4; so don't feel you need to fix it on my account \ud83d\ude03 \n. As an aside, I'm running ruby 2.3.1 now, which seems to have sped this up about 15% over ruby 2.1.5 - from1341.51sto1138.05s.\n.Site compiled in 50.72s.`\nSignificant improvement\n. ==================================\n  Mode: cpu(1000)\n  Samples: 16527 (0.33% miss rate)\n  GC: 1904 (11.52%)\n==================================\n     TOTAL    (pct)     SAMPLES    (pct)     FRAME\n      5961  (36.1%)        5961  (36.1%)     Hamster::Trie#index_for\n     15075  (91.2%)         948   (5.7%)     Psych::Visitors::YAMLTree#accept\n      6873  (41.6%)         606   (3.7%)     Hamster::Set#union\n       468   (2.8%)         468   (2.8%)     Psych::Nodes::Scalar#initialize\n     11947  (72.3%)         437   (2.6%)     Hamster::Trie#bulk_put\n       416   (2.5%)         412   (2.5%)     Psych::ScalarScanner#tokenize\n      1455   (8.8%)         337   (2.0%)     Haml::Buffer#attributes\n       289   (1.7%)         289   (1.7%)     Psych::Visitors::Emitter#visit_Psych_Nodes_Scalar\n       289   (1.7%)         289   (1.7%)     Psych::Visitors::YAMLTree#binary?\n     54169 (327.8%)         232   (1.4%)     Nanoc::Checksummer.update\n      1002   (6.1%)         214   (1.3%)     Psych::Visitors::YAMLTree#visit_String\n       327   (2.0%)         204   (1.2%)     Haml::Util#inspect_obj\n      8425  (51.0%)         194   (1.2%)     Psych::Visitors::Visitor#visit\n       468   (2.8%)         182   (1.1%)     Haml::Compiler.build_attributes\n      6420  (38.8%)         162   (1.0%)     Psych::Visitors::ToRuby#revive_hash\n       241   (1.5%)         162   (1.0%)     Haml::Parser::Line#tabs\n       337   (2.0%)         158   (1.0%)     Haml::Parser#parse_tag\n       133   (0.8%)         133   (0.8%)     Haml::Options#[]\n       128   (0.8%)         128   (0.8%)     #<Class:0x007feba21f13d8>#children=\n       130   (0.8%)         128   (0.8%)     Haml::Buffer.merge_attrs\n      5897  (35.7%)         127   (0.8%)     Haml::Engine#render\n       112   (0.7%)         112   (0.7%)     Nanoc::DataSources::Filesystem#read\n      2659  (16.1%)         104   (0.6%)     Nanoc::DataSources::Filesystem#load_objects\n      2742  (16.6%)         104   (0.6%)     block (4 levels) in <main>\n       103   (0.6%)         103   (0.6%)     Psych::Visitors::YAMLTree#find_ivars\n       472   (2.9%)          96   (0.6%)     ActiveSupport::Dependencies::Loadable#require\n        92   (0.6%)          92   (0.6%)     Hamster::Trie#initialize\n      2875  (17.4%)          87   (0.5%)     block (3 levels) in <main>\n       552   (3.3%)          84   (0.5%)     Psych::TreeBuilder#scalar\n        82   (0.5%)          82   (0.5%)     Psych::Nodes::Node#initialize\n        81   (0.5%)          81   (0.5%)     block (2 levels) in <main>\n        78   (0.5%)          78   (0.5%)     Psych::Visitors::YAMLTree::Registrar#register\n        69   (0.4%)          69   (0.4%)     Psych::ClassLoader#load\n      2872  (17.4%)          69   (0.4%)     Haml::Compiler#compile_tag\n        69   (0.4%)          69   (0.4%)     Nanoc::NotificationCenter.initialize_if_necessary\n       131   (0.8%)          67   (0.4%)     Hamster::Set.alloc\n        66   (0.4%)          66   (0.4%)     Psych::Visitors::YAMLTree::Registrar#key?\n       623   (3.8%)          59   (0.4%)     Nanoc::HashExtensions#symbolize_keys_recursively\n        53   (0.3%)          53   (0.3%)     Haml::Util#balance\n        63   (0.4%)          53   (0.3%)     Haml::Parser#next_line\n       166   (1.0%)          49   (0.3%)     Nanoc::Context#initialize\n        46   (0.3%)          46   (0.3%)     block (4 levels) in <main>\n        41   (0.2%)          41   (0.2%)     Haml::Parser#block_keyword\n        37   (0.2%)          37   (0.2%)     Haml::Helpers#preserve\n        37   (0.2%)          37   (0.2%)     Haml::Helpers#html_escape\n        47   (0.3%)          36   (0.2%)     Haml::Parser.parse_class_and_id\n        59   (0.4%)          34   (0.2%)     Haml::Compiler.filter_and_join\n        34   (0.2%)          34   (0.2%)     singleton class\n        33   (0.2%)          33   (0.2%)     Psych::TreeBuilder#push\n        96   (0.6%)          33   (0.2%)     Psych::Nodes::Mapping#initialize\n. In case it's any use: stackprof stackprof.dump --method 'Hamster::Trie#index_for':\nHamster::Trie#index_for (/Users/benjiegillam/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/hamster-3.0.0/lib/hamster/trie.rb:327)\n  samples:  5961 self (36.1%)  /   5961 total (36.1%)\n  callers:\n    5127  (   86.0%)  Hamster::Trie#bulk_put\n     420  (    7.0%)  Hamster::Trie#get\n     384  (    6.4%)  Hamster::Trie#put!\n      30  (    0.5%)  Hamster::Trie#put\n  code:\n                                  |   327  |     def index_for(key)\n 5961   (36.1%) /  5961  (36.1%)  |   328  |       (key.hash.abs >> @significant_bits) & 31\n                                  |   329  |     end\n. It's basically just large YAML files; good call :)\n. Upgraded to 4.2.2, just had to add string_pattern_type: legacy and identifier_type: legacy from the upgrade guide and the active support things referenced above; and...\nSite compiled in 16.11s\n. ",
    "pmalik56": "I am using the old parent child folder structure as used for legacy type identifier.\nAnd the folder structure can't be changed , is there any way to customize the parent_of function to get the parent item using legacy type folder structure?\n. I override these two method as I have different folder structure... so that way it's resolved.\n. In previous nanoc 3.7.5 version when doing @item.children I was getting below list when printing \n@item.children    (here @item.identifier = \"/aihe/ring/\" )\n[<Nanoc::Item identifier=\"/aihe/ring/1/\" binary?=false>, <Nanoc::Item identifier=\"/aihe/ring/2/\" binary?=false>, <Nanoc::Item identifier=\"/aihe/ring/3/\" binary?=false>]\nWhereas In new nanoc version 4.2.1 I tried to get the children using below pattern but when I print the list matching the pattern I am getting error already mentioned above.\n<%= @items.find_all(pattern) %> gives error where pattern is below\n\nhere pattern: /aihe/ring/*/index.html and @item.identifier = '/aihe/ring/index.html'\naihe1.erb :\npattern: <%= pattern = @item.identifier.to_s.sub(/[^\\/]+$/, '').chop + '/*/index.html' %>\nsize : <%= @items.find_all(pattern).size %>\nchilditem1 : <%= @items.find_all(pattern)[0].identifier %>\nchilditem2 : <%= childitem2 = @items.find_all(pattern)[1].identifier %>\nchilditem3 : <%= childitem3 = @items.find_all(pattern)[2].identifier  %>\nchilditems: <%= @items.find_all(pattern) %>\nI want to get all the child items and do sort them and add them to the parent item.\n. Is nanoc compiling all files irrespective of changes and if yes then is there any way to stop it and compile only those file have changed or is there any way to reduce the compilation time in upgraded nanoc version.\nAnd using command nanoc compile --verbose not getting the full description where time taken.\nIs there anyway to check detail compilation time taken by each file.\n\n. It was taking longer time for static content compilation , which is not required and I have made some changes in config.yaml so now it's taking same or lesser time in nanoc 4.2.1. \nBut I am facing one issue here when trying to compile few .less file which is inside '/static/component/...../less/*.less'  folder. \nI have the compilation rules for these less files but looks like it's not looking at the static directory for compilation. But in nanoc 3.7.5 it was working for compiling files inside static directory .\nAnd when I am adding this below configuration in config.ymal in latest nanoc version 4.2.1 then it's compiling everything inside static which is not required.\ntype: filesystem\n    items_root: /static\n    content_dir: 'static'\n    layouts_dir: null\nBasically I need to compile few files which is inside static folder and it seems not working by defining rules may be some configuration changes required for this.\n. No that slowness issue is fixed anyway it looks faster.\n. Here below is my rules file.\n\n\n. its printing here \ncompile /*/ do \nif it.binary?\nputs 'compiling.....' + item.identifier\nI have added that pdf intentionally to verify.... otherwise it give a big /tmp/routes.txt file which have multiple same entry.\n. \nIt's not happening exactly five times always.But same file compiling same number of times after each compilation. \n/content/index.html  ==> 5 times\n/content/abc/index.html ==> 5 times\n/content/abc/def/index.html ==> 6 times\n/content/abc/def/ghi/index.html ==> 6 times\n/content/asiakaspalvelu/aihe/sahkoposti-kotisivut/ohje/kotisivutila-ominaisuudet/index.html ==> 15 times\n/content/asiakaspalvelu/aihe/kirja/ohje/kopiosuojausvaltuutus/index.html ==> 12 times\nLooks like it's happening for json, index.html and other file type as if in all compilation block executing multiple times for same file.\n. Here is the log when I made some changes in /aihe/asiakaskoulutukset/index.html this file it's filtering multiple times and some other files also coming in that #run method.\n\n\nBut when I am not doing any changes to the sites it looks fine.\nHere is the log with no change : \n\nBut most of the cases we made changes to site and publish it and my only concern is if it's taking longer time to process the files.\nAnd this also happen in route block as well. so is it routing the same file again and again?\n. ok now it's clear why it's filtering multiple times. Thanks for your valuable reply.\nOne more thing I am facing issue on processing static component. Seems like rules are not working on static folder as if it's not processing at all anything inside static. Previously its was working on nanoc 3.7.5 version. And I have some layouts as well in static folder which is getting this error message.\nNanoc::Int::Errors::UnknownLayout: The site does not have a layout with identifier \u201c/static/components/site-common/analytics/google-tag-manager.erb\u201d\nI am adding layout this way but still not working getting same error.\nnew_layout(File.open('./static/components/site-common/analytics/google-tag-manager.erb', 'r').read, {}, '/static/components/site-common/analytics/google-tag-manager.erb')\nAnd new_item also not working as i was trying to add content inside static directory to process.\n. Is there any way to create a new layout of erb which is not in layout directory but in content directory.\nLike I have one component 'site-common' in static folder which I wise to put inside content directory and it has some erb files to be used as layout. But I am not able to create new layout using #new_layout this function.\n. ",
    "connorshea": "You can use separate gemfiles that use Rouge 1.x vs. 2.x, see the docs.\nPersonally I'd prefer an approach that just uses the bundle install --gemfile approach so you can switch to a different CI system more easily, but that's not really necessary.\nFor a .travis.yml example see carrierwave.\n. @ddfreyne @barraq thank you! :)\n. Thanks!\n. @ddfreyne I didn't want to open an issue for this, so I figured I'd just comment here.\nWe just launched a new Docs site for GitLab, built with Nanoc, at https://docs.gitlab.com/\nSource here: https://gitlab.com/gitlab-com/gitlab-docs\nJust wanted to say thanks for the project, this is so much better than the bash script we previously had! \ud83d\ude48 \n. This is awesome, I've wanted this myself. Thanks @gpakosz!\n. \ud83d\udc4f thanks @ddfreyne :D. This is the relevant method: https://github.com/nanoc/nanoc/blob/63fe7e79dc4f8ceefb8cfd0f244503033e640c27/lib/nanoc/cli/commands/compile.rb#L227. Should it use a terminal table generation gem, or is that excessive for this? :)\nRegardless, it should probably allow for an arbitrary length.. @ddfreyne I'd like to contribute a fix for this, should we make it dynamically resize somehow or just update it to fit, e.g. 1000.00s?. Whoops, moved to https://github.com/nanoc/features/issues/6. ",
    "whitequark": "\\o/\n. > The group name nanoc doesn\u2019t convey the idea that these are gems that will be automatically required. Perhaps a group named autorequire?\nI'm not sure if such change would make a lot of sense. First, there is no guarantee that the entire Gemfile would not be autorequired; indeed, whether or not to require gems is a choice of an application using the Gemfile. Second, autorequiring groups of gems is, as far as I'm aware, literally the purpose of the Bundler group feature (e.g. see its docs), so that should not come as a surprise.\n\nAdditionally, since Bundler is not a runtime requirement of Nanoc, Bundler.require(:nanoc) can potentially fail.\n\nI've wrapped that in if defined?(Bundler).\n. Thanks!\n. I think it's convenient to not have to care about Rouge's API for anyone using nanoc for basic tasks.\n. Rebased.\n. @barraq I've missed that PR. I've looked at it and yeah, that should work for me as well.\n. Well... this PR is done and #880 is not. But alright.\n. Fine by me. What about commands added by plugins? If you ever add another global nanoc option that could lead to conflicts.. Nothing. That's how this Bundler API works.\n. D:. Oh huh I had no idea http://0.0.0.0:3000/ would actually work in a browser, turns out it does. Feel free to change to your preferred form.. ",
    "axilleas": "Awesome! Does that mean 4.3.8 is about to be published? :smile: \n. ",
    "GeekyUX": "Note: I believe this is related to issue #885\n. Thanks, Denis! That was quick! :+1:\n. ",
    "Bike": "the direct site of the error mentions this problem as a potential, i feel i should mention (I am the one who ran into this but I have very little nanoc experience)\n. ",
    "werthen": "I was just trying some stuff out. Maybe there should be a clearer error message though for people trying to do the same?\n. A fresh clone of zeus.ugent.be didn't resolve the issue, but the fix in gh-927-layout-view-dep-tracker works like a charm!\n. My bad, I didn't have time to properly do this with git, so I just set the base branch in github to 4.3.x, but it seems github isn't so great at using git \ud83d\ude09 \n. ",
    "anton-tsyganenko": "I thing that it is related to another issue: when running nanoc check -a the output looks like:\nLoading site\u2026 done\n  Running check \u2026                 ok\n  Running check external_links\u2026   error\n  Running check \u2026                 ok\n  Running check internal_links\u2026   ok\n  Running check stale\u2026            ok\n  Running check mixed_content\u2026    ok\nIssues found!\n<...>\n. Output of nanoc check --list didn't change in Nanoc 4.3.0, nanoc check --allnow chrashes at third check:\n```\nLoading site\u2026 done\n  Running check \u2026                 ok\n  Running check external_links\u2026   error\n  Running check \u2026               \nCaptain! We\u2019ve been hit!\nMessage:\nNet::HTTPRetriableError: 302 \"Found\"\nCompilation stack:\n(empty)\nStack trace:\n\n/usr/lib/ruby/2.3.0/net/http/response.rb:120:in `error!'\n/usr/lib/ruby/2.3.0/net/http/response.rb:129:in `value'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.2/lib/w3c_validators/validator.rb:88:in `send_request'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.2/lib/w3c_validators/validator.rb:85:in `send_request'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.2/lib/w3c_validators/markup_validator.rb:131:in `validate'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.2/lib/w3c_validators/markup_validator.rb:117:in `validate_file'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.3.0/lib/nanoc/extra/checking/checks/w3c_validator.rb:8:in `block in run'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.3.0/lib/nanoc/extra/checking/checks/w3c_validator.rb:7:in `each'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.3.0/lib/nanoc/extra/checking/checks/w3c_validator.rb:7:in `run'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.3.0/lib/nanoc/extra/checking/runner.rb:120:in `block in run_checks'\n  ... 20 more lines omitted. See full crash log for details.\n\nIf you believe this is a bug in Nanoc, please do report it at\n-> https://github.com/nanoc/nanoc/issues/new <-\nA detailed crash log has been written to ./crash.log.\n```\nRequest re-open.\n. Since this issue was closed there were a lot of nanoc and w3c_validators updates, but it still crashes:\n```\n$ nanoc check -a\nLoading site\u2026 done\n  Running check css\u2026              ok\n  Running check external_links\u2026   ok\n  Running check html\u2026           \nCaptain! We\u2019ve been hit!\nMessage:\nNet::HTTPRetriableError: 302 \"Found\"\nStack trace:\n\n/usr/lib/ruby/2.3.0/net/http/response.rb:120:in `error!'\n/usr/lib/ruby/2.3.0/net/http/response.rb:129:in `value'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.3.1/lib/w3c_validators/validator.rb:112:in `send_request'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.3.1/lib/w3c_validators/validator.rb:109:in `send_request'\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.3.1/lib/w3c_validators/markup_validator.rb:131:in `valida\n/home/anton/.gem/ruby/2.3.0/gems/w3c_validators-1.3.1/lib/w3c_validators/markup_validator.rb:117:in `valida\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.4.6/lib/nanoc/checking/checks/w3c_validator.rb:8:in `block in run'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.4.6/lib/nanoc/checking/checks/w3c_validator.rb:7:in `each'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.4.6/lib/nanoc/checking/checks/w3c_validator.rb:7:in `run'\n/home/anton/.gem/ruby/2.3.0/gems/nanoc-4.4.6/lib/nanoc/checking/runner.rb:120:in `block in run_checks'\n  ... 20 more lines omitted. See full crash log for details.\n\nIf you believe this is a bug in Nanoc, please do report it at\n-> https://github.com/nanoc/nanoc/issues/new <-\nA detailed crash log has been written to ./crash.log.\n```\nI request re-opening.. ",
    "elomatreb": "I can confirm the checks still not showing up correctly, and I get the same error as above when running the html check.\nAdditionally, the css check is failing in a similar way. I was already getting this error before the update to 4.3, but I assumed it was caused by something I did wrong.\nI noticed that both of these errors appear to come from the w3c_validators gem, so maybe this is not a nanoc problem? (Edit: I just saw that that gem hasn't been touched since 2011 :O)\n. If this gets fixed, please add an option to reenable ~~spacebar~~ compilation heating.. ",
    "jvoisin": "@Fjan Care to share some numbers?\n. ",
    "cdchapman": "Thank you!\n. ",
    "jumapico": "Many thanks for fix this and for your work.\nReally a super fast response time! :)\nGreetings,\nJMPC\n. ",
    "caseywilliams": "@ddfreyne, wow, you're amazing! Thank you for this and all of your excellent work on Nanoc! I've updated my article, too :). ",
    "DieterDePaepe": ":heart: . Confirmed to be working for my problem. :+1: . ",
    "sunshineco": "Thanks for filing this issue, Denis.\nFor completeness and as an aid for readers, see the original problem report for additional context.. That would fit the use-case. As long as client code doesn't have to know implementation details of capturing (such as the nasty _erbout hack in my example), I don't personally have a strong preference between:\n~~~ruby\ncontent_for(:head, 'string')\n~~~\nand:\n~~~ruby\ncontent_for(:head) { 'string' }\n~~~\nHowever, introduction of this new method signature is rather orthogonal to the loosening of the restriction that capturing can only be used within the context of :erb. If I understand your proposal correctly, the latter form would be allowed only within an :erb invocation, which places burden on callers to choose the correct method signature depending upon calling context. Although the current implementation of content_for(:head) { 'string' } may require :erb, nothing about the method signature requires or even suggests that it should work only with :erb.  As such, it might be cleaner to update the underlying implementation of the block form to work outside of :erb rather than introducing new API for that case.\n. Right, I understand the implementation implications. My thinking all along has been that the implementation can be smart enough to figure out automatically (depending upon presence or absence of _erbout) what to do about capturing the content generated in the block. This would keep the API simple and not place extra burden on callers.\nOn the other hand, it may be too magical, and simply documenting that content_for(:x) {...} is specific to :erb and that content_for(:x,'string') can be used anywhere might be fine. If taking this route, then perhaps also accept content_for(item,:x,'string') which would be useful during preprocess.\nAnyhow, I don't feel too strongly one way or the other. I like the idea of content_for(:x) {...} just doing The Right Thing regardless of context in which it is called; but magical behavior can also have hidden downsides which might not become apparent until some time in the (distant) future.\n. Thanks for working on this, Denis. I look forward to being able to remove the ugly _erbout hack from my code.. Erm, did you mean s/directory/directly/ in the title of this pull request?. Thanks for the quick response.\nUnfortunately, that doesn't quite work since there is no snapshot variable in context:\nNameError: undefined local variable or method `snapshot' for #<Nanoc::ItemRepView:0x007f89a427b840>\nDid you mean?  snapshot?\n. Using this code:\ndef binary?\n    @context.snapshot_repo.compiled_content(rep: unwrap, snapshot: :last).binary?\nend\nResult:\nNanoc::Int::Errors::CannotGetCompiledContentOfBinaryItem: You cannot access the compiled content of a binary item representation (but you can access the path). The offending item rep is <Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/SokoSave48x48.png\" item.identifier=\"/SokoSave48x48.png\">.\n. Hmm, perhaps I didn't apply the patches correctly locally, but I get this:\n``\nNoMethodError: undefined methodbinary?' for #\nStack trace:\n\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/repos/snapshot_repo.rb:58:in `compiled_content'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/views/item_rep_view.rb:47:in `compiled_content'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/views/mixins/with_reps_view_mixin.rb:16:in `compiled_content'\n```\n\nTravis complained, as well.\n. Getting closer (I think)...\n```\nNanoc::Int::Errors::RecursiveCompilation: The site cannot be compiled because the following items mutually depend on each other:\n.\n===== STACK TRACE:\n\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/item_rep_selector.rb:33:in `each'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:13:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler.rb:131:in `run_all'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/entities/site.rb:21:in `compile'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:408:in `block in run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:443:in `run_listeners_while'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:407:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/command_runner.rb:12:in `block in call'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/command_runner.rb:11:in `call'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command_dsl.rb:231:in `block in runner'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:292:in `run_this'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:244:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:257:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli.rb:45:in `block in run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli.rb:43:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/bin/nanoc:9:in `'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/nanoc:22:in `load'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/nanoc:22:in `'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `eval'\n```. Hmm, aside from the recursion error, I'm also seeing some pretty odd behavior with the patches from #1083 applied. In particular, if I re-run nanoc after it crashes, I get this error:\n\n```\nErrno::ENOENT: No such file or directory @ rb_file_s_size - /var/folders/9m/6361184x6dlbsg6zb1m33kpc0000gn/T/nanoc20170208-807-383bu9/binary_items/0\n===== ITEM BEING COMPILED:\nItem identifier: /contributed/skins/paninaro01-preview.png\nItem rep name:   :thumbnail\n===== STACK TRACE:\n\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/2.4.0/fileutils.rb:719:in `size'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/2.4.0/fileutils.rb:719:in `compare_file'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/item_rep_writer.rb:30:in `write'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/phases/write.rb:15:in `block in run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/phases/write.rb:14:in `each'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/phases/write.rb:14:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/phases/mark_done.rb:12:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:30:in `compile_rep'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:14:in `block (2 levels) in run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:24:in `handle_errors_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:14:in `block in run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/item_rep_selector.rb:23:in `block in each'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/item_rep_selector.rb:17:in `loop'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/item_rep_selector.rb:17:in `each'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler/stages/compile_reps.rb:13:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/services/compiler.rb:131:in `run_all'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/base/entities/site.rb:21:in `compile'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:408:in `block in run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:443:in `run_listeners_while'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli/commands/compile.rb:407:in `run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/command_runner.rb:12:in `block in call'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/command_runner.rb:11:in `call'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command_dsl.rb:231:in `block in runner'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:292:in `run_this'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:244:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/cri-2.7.1/lib/cri/command.rb:257:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli.rb:45:in `block in run'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:64:in `handle_while'\n/Users/sunshine/.rvm/rubies/ruby-2.4.0/lib/ruby/gems/2.4.0/gems/nanoc-4.6.1/lib/nanoc/cli/error_handler.rb:22:in `handle_while'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/lib/nanoc/cli.rb:43:in `run'\n/Users/sunshine/.rvm/gems/ruby-2.4.0@global/gems/nanoc-4.6.1/bin/nanoc:9:in `'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/nanoc:22:in `load'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/nanoc:22:in `'\n/Users/sunshine/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `eval'\n```\n\nIn fact, this crash occurs even after a successful nanoc compile (achieved by temporarily dropping :rep_select from the xml_sitemap invocation).\nThis crash does not manifest if I start with a clean slate (no output/, no tmp/).\n. While I like a proper solution, such as figuring out ahead-of-time if a rep is binary, I wonder if it's worth a ton of effort if mine is the only site encountering this issue. The idea of excluding @item from :rep_select feels very slightly hacky but might be a good pragmatic compromise. And, of course, I can always use work-arounds myself if it comes to that. For instance, I could assign :items manually when invoking xml_sitemap. I think the only reason I didn't do that is because I didn't want to duplicate in my own code the :is_hidden filtering xml_sitemap.rb is already doing; not because :rep_select was a better choice for my use case.\nAs for the Errno::ENOENT issue, that particular item rep is created by a very simple filter which runs ImageMagick's convert command on the item to create the thumbnail representation. I can reproduce it reliably in the full site but haven't managed to come up with a minimal reproduction recipe. (I can, of course, send you the full site if you want a crack at it yourself.). Okay, I managed to come up with a minimal reproduction recipe for the Errno::ENOENT crash. The following script will create a minimal site from scratch in the directory enoent-crash:\n```shell\nmkdir enoent-crash && (\ncd enoent-crash &&\nmkdir content lib &&\ncat <<\\EOF >Rules &&\ncompile '/resource.bin', :rep => :altered do\n  filter :alter\n  write '/altered.bin'\nend\ncompile '/sitemap.' do\n  filter :erb\n  write item.identifier.to_s\nend\ncompile '//' do\n  write item.identifier.to_s\nend\nEOF\ncat <<\\EOF >nanoc.yaml &&\nbase_url: http://example.com/\ntext_extensions: ['xml']\nEOF\ncat <<\\EOF >lib/default.rb &&\ninclude Nanoc::Helpers::XMLSitemap\nclass Alter < Nanoc::Filter\n  identifiers :alter\n  type :binary\n  def run(filename, params={})\n    File.write(output_filename, '')\n  end\nend\nEOF\n\ncontent/resource.bin &&\n\ncat <<\\EOF >content/sitemap.xml\n<%= xml_sitemap :rep_select => lambda {|i| !i.binary?} %>\nEOF\n)\n```\nThe first time nanoc compile is invoked for this site, it aborts with the recursive dependency error:\nNanoc::Int::Errors::RecursiveCompilation: The site cannot be compiled because the following items mutually depend on each other:\n<Nanoc::Int::ItemRep name=\"default\" raw_path=\"output/sitemap.xml\" item.identifier=\"/sitemap.xml\">.\nEach subsquent nanoc compile aborts with the Errno::ENOENT error:\nErrno::ENOENT: No such file or directory @ rb_file_s_size - /var/folders/9m/6361184x6dlbsg6zb1m33kpc0000gn/T/nanoc20170208-3438-yv30jy/binary_items/0\nThe Errno::ENOENT error only manifest if both resource.bin and sitemap.xml are in the item list passed to :rep_select; remove either and the error goes away.\n. By the way, just to be clear, the :rep_select example(s) posted here are minimal versions which allow the reported error(s) to be reproduced. On the actual site, :rep_select is more complex and does indeed filter out sitemap.xml by checking rep.path, so the sitemap is not actually referencing itself in Real Life.\n. > I am unable to reproduce your Errno::ENOENT crash, unfortunately, even with the script.\nThe reproduction recipe solely demonstrates a problem with #1083 itself. The crash reproduces reliably with just #1083 applied (which was the only \"fix\" available at the time the recipe was created).\nThe crash does not manifest when #1084 is also applied.\n\nA fix is in #1084. Can you verify that this works?\n\nIt seems to resolve the problem. Thanks for working on this!\n. This failure looks remarkably similar to the failure mentioned tangentially in #1082. I came up with a reproduction recipe, but it only manifested when some in-progress patches from Denis were applied. However, if the underlying cause is the same, perhaps those patches and the recipe I provided could help track down the problem (assuming it still manifests on master).. Fully supporting file permissions in the way you suggest would indeed be a large undertaking, but there is no need to jump immediately into the deep end of the pool. A pragmatic approach would satisfy this (obviously) legitimate real-world use-case in a way which is easy to reason about and to implement, and which does not lock you into some design which you would regret later. Take baby steps; add complexity only when shown to be necessary.\nWhen approaching the problem from the shallow (pragmatic) end of the pool, the plan and implementation are much simpler. An obvious and conservative first approach is merely to (try to) restore execute permission on the output file if the input item is executable. Importantly, this approach does not lock you into any design and does not require you to think about and answer difficult questions about how to deal with ACLs or whether this should be handled by the core or by a filter (your :chmod example). It just works.\nIf, and only if, a real-world use-case arises where, for instance, a site needs write permission retained on an item, then the slightly less conservative approach of attempting a full chmod carry-over might be warranted. This also does not require heavy cogitation or lock you into a design you would regret.\nIf, and only if, a real-world use-case arises where ACLs or some unforeseen permission issues need to be handled, then, and only then, does it make sense to start thinking about the complexities you wrote about in your response. The pragmatic approach outlined here does not prevent you from implementing a more complex design in the future if shown necessary, nor is the suggested pragmatic approach merely an ugly hack; it's a legitimate solution which is likely to prove helpful without causing harm.\n\nUsing postprocess might be a reasonable interim answer, however, sparsity of documentation makes it difficult to determine if it would indeed be valid to do so. For instance, the postprocess documentation cites an example which only accesses in-memory item content; it does not say whether or not the output item has yet been written to the filesystem, so it does not answer the question of whether or not postprocess is the correct place for chmod. Moreover, there no longer seems to be any documented nanoc public API (at least I am unable to find it), so one can not easily know what, if any, methods an item supports, and whether or not its possible to retrieve an item's output filename.\n. Thanks, Denis. I don't consider postprocess overkill if it allows me to automate fixing of permissions on the output file so that I don't have to alter my build/deploy process. If postprocess saves me from having to deal with or think about the issue ever again (or at least in the long term), then I consider it a good pragmatic solution.\nIt's still not clear from the postprocess documentation whether one can rely upon the output files having been created before postprocess is invoked (as opposed to the outputs only being in memory), but I'll interpret your response as an affirmative that they have been saved to disk by postprocess time.. Thanks, that change makes it clearer.. ",
    "mwickens": "Thanks!. ",
    "blinry": "Thanks!. > I can\u2019t reproduce this in Nanoc 4.6.4. Is this the version you\u2019re using?\nYep!\n```\n$ nanoc show-data\n[...]\nitem /a.md depends on:\n  [ layout ] (r___) /default.html\nitem /b.md depends on:\n  [ layout ] (r___) /default.html\nitem /index.md depends on:\n  [   item ] (ac) /a.md\n  [   item ] (ac) /b.md\n  [ layout ] (r___) /default.html\n```\nLooks reasonable, I think?\nIn your own attempt, shouldn't index.md be recompiled (because it checks for both items' title attribute)? Just to make sure, here's the site I used: https://github.com/blinry/nanoc-test. Oh, I see. I also understand the reasoning.\nMaybe it would make sense to display \"cached\" instead of \"identical\" in the compilation log in this case, to differentiate between the costly recompilation and the cached case? This would maybe avoid some confusion. But the --debug option is also very helpful!\nThanks, Denis, my favourite software maintainer! :sparkles: . ",
    "grobie": "https://github.com/promcon/website/pull/6 don't spread the word yet please.\nOn Sun, Mar 5, 2017, 05:02 Denis Defreyne notifications@github.com wrote:\n\nAh, the room-heating feature!\nDo you have reproduction that I can use for debugging this issue? I\u2019m not\nable to reproduce it locally.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nanoc/nanoc/issues/1106#issuecomment-284214914, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAANaPTmSKf5-aOSsRPo69-anJu8ltiZks5rinotgaJpZM4MTR9A\n.\n. Thanks!\n\nOn Sun, Mar 5, 2017, 08:52 Denis Defreyne notifications@github.com wrote:\n\nThis is released in Nanoc 4.6.3.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nanoc/nanoc/issues/1106#issuecomment-284225843, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAANaP9-5DaS-p7HE0SZZwrVNfVqGnaRks5rirAfgaJpZM4MTR9A\n.\n. \n",
    "vsuhachev": "If Filesystem is a private API then this improvement loses his reasons. It looks like I'll have to write my DataSource from scratch. The main reason - calculate \"original encoding\" for each file. I use nanoc to generate html from files with different encodings. I can not change this source data files and want to handle encodings in subclassed Filesystem. ",
    "cristoper": "Thanks!. ",
    "ryanjm": "Thank you. I didn't realize that you could have multiple representations like that. I'll try that out.. ",
    "fossabot": "Your license scan is passing -- congrats!\nYour badge status is now updated and ready to merge:\n. ",
    "HaoZeke": "Oops, my bad..\nThat works perfectly, for handlebars and mustache!\nI'll open a pull request to modify the docs later, the mustache layout should be edited to {{{ yield }}}. Interestingly, removing everything in layouts and content but keeping content/slides/md/slides.md with the following\nruby\ncompile '/slides/**/*.md' do\n filter :pandoc, args: [\n   { from: :markdown, to: :beamer },\n   :standalone,\n   :mathjax,\n   {:slide_level => 2},\n ]\n write item.identifier.without_ext + '.pdf'\nend\nProduces a pdf but it's actually in TeX.. o.O\nThis was solved with \nruby\ncompile '/slides/**/*.md' do\n filter :pandoc, args: [\n   { from: :markdown, to: :beamer },\n   :standalone,\n   :mathjax,\n   {:o => 'slide.pdf'},\n   {:slide_level => 2},\n ]\n write item.identifier.without_ext + '.pdf'\nend\nWhich generates a pdf...\nHowever, multiple inputs are not being concatenated before being compiled,\nruby\ncompile '/slides/*.yml' '/slides/**/*.md' do\n filter :pandoc, args: [\n   { from: :markdown, to: :beamer },\n   :standalone,\n   :mathjax,\n   {:o => 'slide.pdf'},\n   {:slide_level => 2},\n ]\n write item.identifier.without_ext + '.pdf'\nend\nGives an error, namely:\nbash\nNanoc::Int::Errors::NoMatchingCompilationRuleFound: No compilation rules were found for the \u201c/slides/md/slides.md\u201d item.. Also the above code still doesn't produce the correct file. A pdf is generated in the site root as slide.pdf whereas a slides/md/slides.pdf (empty) file is generated in the output folder. . ",
    "davewoodall": "Check, check, and check.\nThat solved it, thank you! And will do.\nDave. ",
    "iay": "Changing this:\nruby\n        prefixes\n          .reject { |pr| pr =~ /^\\/index\\./ }\n          .map do |pr|\n            if pr == ''\n              @items['/index.*']\n            else\n              @items[Nanoc::Identifier.new(pr).without_ext + '.*']\n            end\n          end\nto this:\nruby\n        prefixes.push(Nanoc::Identifier.new(prefixes.pop).without_ext)\n        prefixes\n          .reject { |pr| pr =~ /^\\/index\\./ }\n          .map do |pr|\n            if pr == ''\n              @items['/index.*']\n            else\n              @items[Nanoc::Identifier.new(pr) + '.*']\n            end\n          end\n      end\n... appears to fix the problem in my case, by only stripping the extension from the last prefix (representing the current item itself). I doubt that it's idiomatic Ruby, and I can't find any unit tests to run to see if it would break something else. But it's a start. I can set up a PR if you want one.. Alas, that quick fix does indeed run into an additional problem with the /index.md item, as it is no longer matched in the .reject clause, so you end up with two references to itself from the root item.\nThis variant appears to address that:\nruby\n        prefixes.push(Nanoc::Identifier.new(prefixes.pop).without_ext)\n        prefixes\n          .reject { |pr| pr =~ /^\\/index$/ }\n          .map do |pr|\n            if pr == ''\n              @items['/index.*']\n            else\n              @items[Nanoc::Identifier.new(pr) + '.*']\n            end\n          end . The fancy functional programming stuff is beyond my 2006-vintage understanding of Ruby but the intent seems right. I will try and do a quick test of this tomorrow and let you know whether it works for my case.. Dropping the modified breadcrumbs.rb into my lib/ directory seems to fix my particular use case.. Being a bit short on Ruby-fu, I'm not sure how I would do that. Do you have a quick summary of how I'd go about it?. Oh, that's really useful.\nBad news and worse news, I'm afraid.\nIt seems as if this problem is intermittent. I ran my test a few times this morning with the original configuration, and it worked (reporting bad links).\nSwitching to the new configuration, my first run was a failure with the same No threads left error message as I was getting yesterday. A subsequent run succeeded. The failure looked like this:\nRunning check external_links\u2026   /Volumes/Cased/git/iay/iay/site/vendor/ruby/2.4.0/bundler/gems/nanoc-a137b1811d60/nanoc/lib/nanoc/extra/parallel_collection.rb:37:in `push': No live threads left. Deadlock? (fatal)\n1 threads, 1 sleeps current:0x00007fbfbfc01ec0 main thread:0x00007fbfbfc01ec0\n* #<Thread:0x00007fbfc0082f78 sleep_forever>\n   rb_thread_t:0x00007fbfbfc01ec0 native:0x00007fffa783b340 int:0\n   /Volumes/Cased/git/iay/iay/site/vendor/ruby/2.4.0/bundler/gems/nanoc-a137b1811d60/nanoc/lib/nanoc/extra/parallel_collection.rb:37:in `push'\n   /Volumes/Cased/git/iay/iay/site/vendor/ruby/2.4.0/bundler/gems/nanoc-a137b1811d60/nanoc/lib/nanoc/extra/parallel_collection.rb:37:in `block in each'\nFinally, I'm also seeing this warning message, which I think is new:\nLoading site\u2026 /Volumes/Cased/git/iay/iay/site/vendor/ruby/2.4.0/bundler/gems/nanoc-a137b1811d60/nanoc/lib/nanoc/data_sources/filesystem/parser.rb:55: warning: regexp match /.../n against to UTF-8 string\nThis is on the latest macOS, with ruby 2.4.3p205 (2017-12-14 revision 61247) [x86_64-darwin17] installed using MacPorts.. My current working theory is:\n\nSomething is causing all of the worker threads to exit prematurely\nThis results in the addition of new work (correctly) detecting a deadlock\nWorker threads execute prematurely if any other worker thread catches an exception\nSo any worker thread catching an exception early in the set of URLs to be validated will cause this\n\nIt's hard to see where an exception would come from in external link validation. The most obvious case would be timeouts, but that seems to be handled inside the validate method in external_links.rb. In any case, those tend to happen late in the process, because by definition they are delayed.\nIf URI.parse(href) can throw something other than URI::InvalidURIError, that would be one possibility.\nAnother would be if a redirect goes to something that isn't a valid URI: the URI.parse call in this case isn't guarded.\nA third thing I noticed was that if I added a lot of puts calls for debugging, I started to get timeouts from this method in cleaning_stream.rb:\n# @see IO#puts\n    def puts(*str)\n      _nanoc_swallow_broken_pipe_errors_while do\n        @stream.puts(*str.map { |ss| _nanoc_clean(ss) })\n      end\n    end\nFor now, I have added some diagnostics to two locations:\n\nI added a rescue clause to the block in select_invalid in external_links.rb to catch and diagnose any validation exception early.\nI added some puts calls to diagnose any exception caught within the worker thread.\n\nSo far, I haven't had the issue recur but I will keep this stuff live until I do, and hopefully we will see an exception being raised that we aren't expecting.. >If URI.parse(href) can throw something other than URI::InvalidURIError, that would be one possibility.\nHere, I'm referring to the call in validate that happens after a redirect. I've tried to provoke this by providing bad URLs as the result of a redirect, but it turns out to be really hard to provoke an InvalidUIError from an http-scheme URI (the Ruby library source tests don't seem to have any that don't involve non-ASCII characters, which I don't think I can persuade Apache to respond with). I have updated to that and run bundle exec nanoc check elinks five times in a row with no problems showing up.\nI don't know that proves anything, as the problem was intermittent anyway, but it's hopeful.\nI suggest just closing this issue now; I can reopen it if the problem comes back.. You can see from the traceback that this is the gitlab head from a couple of days ago.. Yes, it seems to be consistent. I will try and add some kind of puts to nail down the URL in question.. This seems to be one of the links that is killing things:\nkite:site iay$ curl -I https://movabletype.org/default_styles.shtml\nHTTP/1.1 302 Moved Temporarily\nContent-Type: text/html\nDate: Tue, 23 Jan 2018 08:34:27 GMT\nServer: nginx\nX-Frame-Options: SAMEORIGIN\nConnection: keep-alive. This is one where (because I have two blogs on my site, and they are both subsites) my need for this is fairly sharp, and the code looks simple enough that I might be able to propose a PR if you don't think you would have the time to look into it. Let me know if that's the case.. Another note on this: the W3C validator flags a link like <link rel=\"alternate\" href=\"https://iay.org.uk/\"/> with a compatibility recommendation that it should be a same-document reference (see this).\nI think that means that the existing implementation would be improved if it just used / here, but perhaps that's a separate issue. Certainly, any new parameter should not be appended to base URL by this reading.. 1. I might take a look this weekend at adding some tests for this, it's about time I learned TDD in Ruby. What's the best reference for the testing framework you're using?\n\n\nI'm not sure how to interpret the CI failures, are they on my side somehow?\n\n\nDo you want me to rebase this against the current HEAD?. I think I rebased the original commit; CI still failing.. Thanks; I need to fix that but I'll do it in conjunction with learning RSpec and adding some positive tests for the new code. Should get to it over the next couple of weeks (there's really not hurry on this one).. Reworked to avoid the exception, rebased on latest.\n\n\nI'm trying to figure out how I would make tests for this change. Am I right in saying that you have both RSpec based tests under nanoc/spec and also more conventional unit tests under nanoc/test?\nIt looks like there are no tests for the actual XML build in the RSpec section of the repository, so I'm guessing that it might be easiest to add some tests to the end of nanoc/test/helpers/test_blogging.rb and just match expected content within the XML for the item as a string, as for example is being done in test_atom_feed_with_xml_base. Does that sound right?. A related question would be whether there was an XML parser available in that test context; it seems like a test that re-parsed the resulting string and then dug into the structure would be less brittle than one involving just regexes.. Added unit tests.\nSo now I know how to use Nokogiri, I guess. Is there anything else you need here?\nAlso, is there a way to manually run just a single file of tests in isolation? Took a while to get started on this because it takes a while to run everything just to find out that I've written my XPath expressions incorrectly \ud83d\ude04 . Silently ignoring it is better than crashing, for sure. However, I think if the response is out of spec because the Location is missing (and I should really look at the spec) then I'd want it to be flagged as an error rather than ignored. After all, if it's broken in that way my reference to it isn't likely to be intentional; if it is, I can always exclude it from the checks.. I uploaded the file to this location, as GitHub doesn't allow HTML attachments:\nhttps://iay.org.uk/downloads/1307/index.html\n. I still see them from time to time (I'm running a variant with my patch, so they get processed as errors for me). It's not reliable.\nI haven't intentionally removed any links that triggered the issue, but the rate of occurrence has definitely gone down as I have cleaned up other external link issues (I have a lot of external link issues to clean up). That makes me wonder whether there's some leakage from one worker to another, or whether an exception in one thread can also result in an exception in another. I don't know whether those are things that can happen under Ruby's threading model.. My recollection is that the traceback always went through the URI.parse that I guarded above, yes.\nAt the moment, I'm running it with the guard so when I do see exceptions I don't get the traceback. I also don't seem to be seeing (these) errors any more at all, which strengthens my feeling that they were appearing as a consequence of bleed-through from some other issue. I will try reverting some of my more recent content corrections (most of which have been fixing other external link problems) and see if I can get them to come back again.. Confirming that checking out a version of my site project from about a week ago brings back this error, and that it is still originating from the same place.\nIf it's looking hard to reproduce this in isolation, would it be worth giving you access to the whole repo? It's in a private GitLab instance just now, but I could give you credentials there or mirror it across to a private repo on gitlab.com if you have an account there already. Probably worth discussing this on Gitter if so.. I haven't seen that one for a few months now, but as mentioned in one of the earlier comments the rate seemed to go down anyway as I corrected other problems. At the moment I don't have a way to reproduce this, so it's fine if you want to close it. I can always open a new issue if it comes back.. In my Rules file, I have this:\nruby\n  filter :kramdown, input: 'GFM', enable_coderay: false,\n                    hard_wrap: false\n  filter :colorize_syntax, default_colorizer: :rouge\nSo, enable_coderay: false might be another alternative.. Confirmed; many thanks.. I confirm that this change fixes the specific cases I had.. In addition to detecting the case, it would be useful to provide a way of indicating how to break ties (for example by allowing an item attribute with the name of the correct parent item) so that a site with such an ambiguity can be made to work again.. If you want to define breadcrumbs around the sequence of components you get from splitting an item's path, that looks like a good solution for most people. Looking at my own use site, though, I'm not sure if I would use that mechanism, and just rely on it to flag errors.\nThis may be a bit of a digression, but my own breadcrumbs issues (in my personal site, not other work) are more complex because of some history which means that the breadcrumb list for an item isn't always directly related to the series of components you get when splitting an item's path: sometimes there's an extra item that needs to be inserted out of hierarchy and some items just have completely different requirements because they live at paths that are entirely unrelated to \nSo the breadcrumbs system on my personal site uses a couple of attributes to:\n\nBypass breadcrumbs_trail entirely for items with a :crumbs attribute, and\nInsert an extra element to what is returned from breadcrumbs_trail for items with a :crumb_parent attribute.\n\nSometimes I think that a breadcrumbs implementation that was based entirely on iteratively finding a \"crumb parent\" for the current item using a strategy function might be better: in my case, the strategy function would use :crumb_parent if present, then fall back to unwinding levels of hierarchy until it found a .md item. That's probably a lot slower than the path-splitting you do in your implementation, but it's probably only called once per page so I don't know if that matters.\nDigression ends.\n. FYI, this is what I put as a note to myself in the README.md of my site repository. You may be able to see this in the GitLab repository I gave you access to a while back, but they are having replication issues at the moment so I don't know how up-to-date it is.\n\n\n\ncrumbs: For items which are very far in the menu hierarchy from their position\n  in the path hierarchy (which would normally turn into their breadcrumb\n  path), this attribute is used to hold an array of item identifiers for\n  the item's breadcrumbs. To reduce the amount of typing required, /index.*\n  will be added to the front of this list, and the current item will be added\n  to the end. Identifiers can include wildcards (e.g., /foo/bar.*).\n\n\ncrumb_parent: Indicates that the item has a breadcrumb parent other than the one implied\n  by hierarchy. Used in content imported from Drupal; new item paths should\n  always be created in an appropriate hierarchy.\n. \n\n",
    "sirosen": "Thanks for the really quick detective work on this.\nThere's been an available patch to fix libxml sitting unattended for a few years now, so this might get fixed someday... but probably not soon.\nGiven that GCSE is all JS-based, it will never work when blocked by NoScript, etc.\nIn that light, the workaround you've noted doesn't have any significant practical faults.\nThis is all a matter of where the grossness exists, not whether or not it exists.\nIf you decide that you dislike #1320 very strongly, I think it would be satisfactory to detect gcse:search in content prior to applying filters and print a warning with a link:\nWarning!\n  Nanoc relies on libxml to parse HTML. This is known to cause issues with GCSE.\n  Recommended workaround: https://github.com/nanoc/nanoc/issues/1319#issuecomment-367234453. Thanks for the super-quick turnaround from bug report to fix!\nThe fix looks reasonable to me (though I agree, not pretty) -- test failure doesn't seem related, maybe an intermittent bug in the testsuite or a ruby2.3 issue.\nThis is almost the same as the fix we worked out in the project where #1319 surfaced, using a custom filter.\nIf you want to be super paranoid, you could use ENV['NANOC_GCSE_WORKAROUND'] || 'nanoc__gcse_search_workaround'.\nProbably not necessary, to the point where I won't even advocate for it, but if you worry that this string might actually appear in content in the future, it's an easy out.. ",
    "terceiro": "Hi, thanks for your feedback. Indeed the change in semantics breaks a few assumptions that we usually assume with nanoc.\nMy use case is this: I maintain a podcast with nanoc, in which the files are published together with the site itself. Each audio file is usually between 50 and 100MB. overall, I have so far ~2.4GB of audio files. I am concerned with both the speed of the builds and the space it uses. The builds for publication are done on the server side, so space efficiency is a little bit more relevant to me.\nI admit I hadn't tried with Nanoc 4.9 before, and just did it. indeed the speedup is considerable, and that is very nice. So IMO speed is fixed.\nNow, my only remaining concern is the duplicated space. Since the audio files are just copied bit-by-bit with no processing in Nanoc, it would be nice to be able to not duplicate that space. if everything goes right at some point this podcast will have tens of GBs of audio files. I am already considering removing the files from the Nanoc website, but maybe there is a low-hanging fruit in Nanoc that we could explore so that keeping the files in the nanoc website itself could be viable.. hey @ddfreyne, thanks for reconsidering. I have updated this PR with a test, however I am a bit suspiciouis of it, because 1) it will definitively fail if executed on a system where /tmp is a tmpfs and 2) it will probably fail on windows as well based on the input from @agross \n@agross could you please test this on Windows? I don't have access to a Windows system.. yes, I understand that it will work. my point is that the test that I wrote, as I wrote it, will probably fail when running on Windows.\n. well, I don't know enough about Windows to say that that is a hardlink, but it looks a lot like a hard link ;-)\n(so the test will pass). note that given the tests that @agross did on Windows, hardlinks seem to\nbehave pretty much like on GNU/Linux, or at least similarly enough that\nthe test that I wrote will for sure pass on Windows.\n. @ddfreyne rebased. ",
    "ge-fa": "\nDebian Stretch is packaging Nanoc 4.4.7 while we're at 4.9.1. Soon enough Ruby 2.3 EOL is going to be announced and all the Ruby ecosystem packaged by Debian will be too ancient anyways. That's what happened with Jessie \u00af(\u30c4)/\u00af\n\nIt'll be updated today.\n\n@ddfreyne \n\nThanks, and sorry for not being clear right from the start: Would it be possible to upload a detached signature?. Limited tooling support, currently. But that's not your department, obviously. Thanks for your reply and your work on nanoc!. ",
    "zor-el": "Thanks! Good to know. I actually almost expected it, but since there was no mention of it in the documentation...\nI was looking for a way to allow a \"filesystem\" to no only provide layouts and items, but also bring along any helpers that may be used in them.\nHow does the overriding take place? Is that on a file name basis, or method basis? I'm guessing it's the latter, and if there is a file named default.rb in both lib/ and foo/lib/, they will both be loaded and methods will be monkey-patched, right?. I just answered my own question:\n\nCode is loaded from each folder in lib_dirs in sequence\nMonkey-patching rules apply\n\nWonderful!  \ud83d\udc4d  . ",
    "Doshirae": "Ok, I can definitely reproduce it with 4.9.1, and even sometimes with 4.9.0 (but in that version, it is quite rare)\nCould it be Ruby 2.5 that messed it up ? Or am I one of the only ones that get to have that ?. After a bit of testing, it seems that Nanoc 4.8.9 is ok, no bug\nAlso, I had a preprocess rule that removed non-published files, but it didn't change anything having it or not :/. Yes, nothing have changed. \nI downgraded nanoc to 4.8.9 where the problem doesn't happens\nI updated it to check, but the problem is still there it seems.\nI tried removing the output/ folder to recompile everything, but it kept on crashing.\nI made a simple loop to see if it would end at some point : while [[ $? -ne 0 ]]; do nanoc; done\nIt does end.\nI guess I'm gonna try to patch the code to stop that from happening :/. I retried with 4.8.9\nI removed the output/ directory to see if nanoc still crashes when compiling (Error::ENOENT each time, but not always the same error message.\nExemples : \nNo such file or directory @ rb_sysopen - output/archive/index.html\nNo such file or directory @ rb_file_s_link - (/tmp/nanoc20180608-15201-185jvuf/text_items/4, output/2018/02/le-blog-est-desormais-w3c-valide/index.html)\n)\nIt does crash every first time and it seems to be uncorellated with the release I'm using.\nI think there may just be a problem with my filesystem.\nThe first guess that comes to my mind may be something related with my /tmp directory. I'm on a good ol' ext4, on an SSD drive. It works fine and doesn't crash :/. Sure, I've made the files available here : https://files.doshi.re/Blog-files/\nIt's just a wget -np -r -nH https://files.doshi.re/Blog-files/ away (you really want those np and nH options, trust me). 1. My fstab : \n```\nStatic information about the filesystems.\nSee fstab(5) for details.\n     \n/dev/mapper/vg-Root\nUUID=92f29d6b-0d2d-4111-a473-496f81c06323   /           ext4        rw,relatime,data=ordered,discard    0 1\n/dev/mapper/vg-Home\nUUID=8970b07e-e57d-429b-8999-0d76e901bd00   /home       ext4        rw,relatime,data=ordered,discard    0 2\n/dev/sdb1 LABEL=Boot\nUUID=63DC-D712                                  /boot/efi       vfat        rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro    0 2\n/dev/sda1\nUUID=20a88671-980e-475b-a224-2f5c315edabd   /var        ext4        rw,relatime,data=ordered    0 2\n/dev/sda3\nUUID=08d7f6ee-a19f-4ac4-8c8c-c0a2df2cbf67   /media      ext4        rw,relatime,data=ordered    0 2\n/dev/sda2\nUUID=484454a6-f95d-459b-8c45-c4f685f886a3   none        swap        defaults    0 0\n```\n\nWhy nokogiri and builder ? . What a nightmare ><\n\nMaybe is it because I'm on an encrypted partition ?\nAnyway, my system is quite bloated and have some issues, I was planning on reinstalling it (but my laziness kept me). \nDo you want to try to resolve the issue as is, or do you want me to reinstall to see if the bug persists ?. I have new clues from my computer !\nI didn't reinstall yet, but I found out that nanoc creates output directories in ../ and ../../ respectively to the root folder of my blog. And I don't understand why it would do that.\nMaybe it has to do with the rake tasks that I use to manage my blog ? I don't think that is the case, but that's the only trail I have right now\nHere is the Rakefile. My issue seems solved, from what I tested\nGreat job Denis\u202f!. Both of your solutions seems to work, thank you !\nNow I will be trying to get line numbers with rouge :sweat_smile: . Yeah you're right. A Makefile/Rakefile or a shell alias would be simpler. I just wanted to use nanoc's own commands, and not put something on top of it. I like the 2nd option better I think. I like the idea of having the choice through the settings in nanoc.yaml. The preprocess trick really does the job :)\nThanks a lot for the insights !. I tried ^^\nIt didn't work :/\nLe 24/10/18 - 02:16, Jan M. Faber a \u00e9crit :\n\n@Doshirae Just thought I should point out that the \"proper\" way to solve this is by using the environment support built into nanoc. You would simply use ENV[\"NANOC_ENV\"] == 'production' instead of ENV[\"PROD\"]==true and then compile with nanoc --env=production. Nanoc keeps a separate set of dependency state for each environment in that case and it should work as expected. It's also much faster than the pre-processing trick mentioned on the troubleshooting section because it doesn't have to recompile the entire site.\n@ddfreyne Perhaps this should be mentioned in the troubleshooting section too?\n-- \nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/nanoc/nanoc/issues/1364#issuecomment-432579850\n\n-- \nDoshirae\nMy GPG key is available here: https://data.doshi.re/doshirae.asc\n. ",
    "ftemmerm": "For what it is worth, I am having exactly the same issue for some time (same crashes and output folders in the parent folders). Issue occurs on macOS 10.13.6 with nanoc 4.9.0 and Ruby 2.5. I don't have the issue compiling exactly the same site on my older MacBook installation with macOS 10.13.6 Nanoc 4.8.11 and Ruby 2.4.2.. Downgraded to 4.8 for now, will follow this discussion to see when I can upgrade again.. ",
    "gwincr11": "@ddfreyne I have sent you a link thanks for taking a \ud83d\udc40 . @ddfreyne I have updated the gist, after adding the gem. Thanks!. @ddfreyne yes it is still occurring, sorry I have been distracted with more pressing work. I will get back to you soon.. ",
    "mshibanami": "I confirmed your incredibly fast fix works perfectly. Thanks @ddfreyne!. ",
    "fxn": "Awesome diff \ud83d\ude04.. ",
    "printfn": "I tried your suggestions, with these results:\nThe text_items directory exists, and the files 0 to 4 also exist. These are the permissions:\n$ ls -al ../../usr/tmp/nanoc20190209-2226-13g4tvj/text_items/\ntotal 76\ndrwx------    2 u0_a55   u0_a55        4096 Feb  9 11:53 .\ndrwx------    3 u0_a55   u0_a55        4096 Feb  9 11:52 ..\n-rw-------    1 u0_a55   u0_a55        6243 Feb  9 11:52 0\n-rw-------    1 u0_a55   u0_a55        4472 Feb  9 11:52 1\n-rw-------    1 u0_a55   u0_a55        3647 Feb  9 11:52 2\n-rw-------    1 u0_a55   u0_a55        9165 Feb  9 11:52 3\n-rw-------    1 u0_a55   u0_a55        4882 Feb  9 11:52 4\nManually creating a file in this directory also works, and it has default permissions of -rw-------.. I also tried running:\nln ../../usr/tmp/nanoc20190209-2226-13g4tvj/text_items/4 test\nThis fails with ln: test: Permission denied.\nOn the other hand, running\nln -s ../../usr/tmp/nanoc20190209-2226-13g4tvj/text_items/4 test\nsucceeds, and vim test afterwards lets me edit the file.. Yes, that causes it to work.. Your patch uses EACCESS, but it should be EACCES. I've applied it now, and it fixes the bug.. Great, thanks!. Yes, it works with 4.11.1.. ",
    "Crazycatz00": "I can verify this does not work on windows; it throws for the filename \"D:/site/content/htaccess.noext\".\nI was however able to get this to work using !Pathname.new(filename).absolute? instead of !filename.start_with?('/'). (I'm using a 64-bit build from http://rubyinstaller.org/, not sure if this works for all ruby types though.)\n. "
}