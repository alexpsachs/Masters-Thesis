{
    "szwacz": "\nI was struggling with electron-starter as well :) Actually failed to install it and abandon further attepts. Wasn't also able to easily understand what that project does and how is constructed. Electron-boilerplate is actually a port of my other project nw-boilerplate which has been in development for some longer time.\nAsar is not that difficult to configure, so I thought I'll leave it out for simlicity. But if more people ask for it this will find it's way into this project. Also pull requests are very welcome :)\nMenus is something I've been neglecting so far. Isn't answer to your question in https://github.com/atom/electron/blob/master/docs/api/menu.md ?\n. It looks good! Can you construct the asar file to tmp directory? I don't see the need to create separate 'dist' folder for that.\n. Other executables in asar file are much less common than long paths, so I think packing to asar is definatelly better tradeoff for boilerplate for most tipical applications (what this one wants to be).\n. About asar - Cool. \n\nAbout modclean - I wouldn't incorporate it into this project for few reasons.\n1. Deleting files might make modules unstable.\n2. This is cool, but non-essential feature.\n3. I don't want to overly complicate this project so it stayes as easy to grasp for newcomers as possible.\nYou can propose this tool for https://github.com/sindresorhus/awesome-electron so people are aware it exists :)\n. I've refined your code a bit and applied it to osx and linux as well. Thanks for your PR!\n. Good catch. Thanks.\n. Thanks!\n. Ah, bummer! Didn't check windows platform after changing that.\nCan you tell me if it starts working when you in file tasts/app_npm_install.js change line 41\nfrom:\nvar install = childProcess.spawn('npm', params, {\nto:\nvar install = childProcess.spawn('npm.cmd', params, {\n. Your solution just moved the bug from windows to osx and linux :)\nIt should be something like...\njs\nif (process.platform === 'win32') {\ncommand = 'npm.cmd'\n} else {\ncommand = 'npm'\n}\nIt you can make it fly that way I'll merge it.\n. Haha! Tipical of mine, in Polish you pronounce 'w' like in english 'v' :)\n. This is in vinyl-map of which I'm using here the latest version. Submited PR to vinyl-map repo.\n. After switch to Babel vinyl-map isn't used anymore, so the problem self-resolved.\n. Was wondering about it myself and then forgot. Thanks!\n. app.getPath is a part of Electron API, so I can't imagine this is some bug in the project.\nGoogling led me to this article: http://ingorichter.blogspot.com/2015/05/electron-mystery-on-osx-solved.html\n. Ok, so it wasn't only my machine :) It happened randomly and rarely so I assumed this is some funkiness on my system.\nAdded explicit kill to on main process exit (https://github.com/szwacz/electron-boilerplate/commit/9aefea226b20107794eeb17c9fe09f12705f227c). How about now?\n. @carlosperate are you sure you've killed all zombie processes of gulp watch started previously before trying this?\n. Hah, it appears killing child process on Windows is harder than one might think. Could you try with https://github.com/szwacz/electron-boilerplate/commit/125b45853fb88227f7a490f69c1e58979e70a3f2 ?\n. Great!\nI have no idea what this pipe error is, and it's generated from low level electron stuff (not a JS error), so I don't know if there is something I can do with it.\n. Why noone told then? :)\nI don't know why killing child processes on window is so difficult. Will into it in near future. All helping hands are welcome!\n. Yes tree-kill was added specially for this purpose.\nActuall removing tree-kill completely for me solved the issue. Can you try that as well?\nMaybe newer version of node just works and no workaround is necessery.\n. @JimmyBoh if you think big count of files in node_modules might be a factor then you can just comment the watch task for 'copy-watch' and see how it goes then.\n. Watch task has been refactored. Now using gulp-plumber and gulp-watch without creating child processes. Hope this solves all issues with watch task. Please give it a try.\n. Hi Yali,\nOh god, where to start....\n1. This project is about Electron, not about webstack. Technologies which make sense in the browser not necessarily make sense in Electorn.\n2. This project wants to give people as small as possible starter pack, so they can easily grasp what Electron development is about and continuing with adding things they find useful.\nFrom things you have included only Babel might be something to consider incorporating here. The rest unnecessarily complicates things for newcomers.\nAbout Babel I'm also not 100% sure. In electron you care only about latest version of V8, which already have a lot of ES6 features.\n. The good old saying states that If you want to please everyone you probably won't please a single person. That's why I want to add to this repo as little tools as possible.\nBut there is a good reason to support ES6 features, which will be standard within a year anyway. That's why I said adding Babel might actually have sense. If more people requests that I see no problem to add it here.\nThanks for a good word about electron-boilerplate, and keep up your good work.\n. Thanks!\n. This is error from electron internals, I don't think there is something I can do about it. If it breaks something please report it to electron team.\n. So this is an electron issue, not this boilerplate?\n. I don't see direct way to do it, but should be easy with:\njs\nimport * as asInterface from './fontend/lib/asInterface';\n_.extend(window, asInterface);\nBTW, what you are trying to do is probably a code smell ;)\n. Esperanto does only modules. You might want to replace it with Babel to have all of ES6.\n. Have you installed NSIS as it's written readme?\n. Awesome!\n. Thanks a lot!\n. Thanks @val-samonte.\nThis electron-connect thing looks promising. I'll give it a shot.\n. electron-connect is not a good fit for this project, too many other nice things have to be sacrificed in exchange.\nI have an idea how to do live reload without it, but would like to see Gulp v4 (what probably won't happen soon) for that to work. Need to think more about it...\nIn the meantime PRs are welcome!\n. Oh! I was telling here few months ago that https://github.com/Quramy/electron-connect isn't good solution (forgot about this). Apparently they did serious rewrite since then, because now electron-connect looks quite promising.\nRest of the story is here: https://github.com/szwacz/electron-boilerplate/pull/147#issuecomment-210664041\n. This define function means that your file has been converted to AMD module (AMD is one of they ways modules in JavaScript can work with each other). In file https://github.com/szwacz/electron-boilerplate/blob/master/tasks/build.js there is code:\njs\nvar paths = {\n    jsCodeToTranspile: [\n        'app/**/*.js',\n        '!app/main.js',\n        '!app/spec.js',\n        '!app/node_modules/**',\n        '!app/bower_components/**',\n        '!app/vendor/**'\n    ],\n    copyFromAppDir: [\n        './main.js',\n        './spec.js',\n        './node_modules/**',\n        './bower_components/**',\n        './vendor/**',\n        './**/*.html'\n    ],\n}\njsCodeToTranspile - those files are converted to AMD modules\ncopyFromAppDir - those files will be copied without making any changes to them  \nThis is quite dirty, but the best I came up with. Your menu file should be excluded in jsCodeToTranspile with exclamation mark at the front like you see different files doing it there. And at the same time should be included in copyFromAppDir section.\nHope that helped.\n. Hi, I know this is controversial decision but it makde few problems easier to solve, or entirely go away. Now I can recall from my memory two of them, maybe there was more.\n1. When you package the app there is no need to add up to size of the app with your dev dependencies, this way those are always not included.\n2. If you use native npm modules (which have to be compiled on your machine) in your app those have to be compiled agains electron runtime, not against the node version you have installed on your computer. Thanks to two package.json files this is also easy.\nIf you can neatly solve these problems and have only one package.json at the same time I'm all ears :)\n. I was thinking about it a little and this is hard problem to solve. When you type npm install while being on windows electron for Windowsem is downloaded. Now when you switch to OSX you should delete everything from node_modules and run npm install again, to compile wverything for OSX. And this needs to be done with every OS switch.\nFor sure you can try to solve this problem for your project, but I imagine the solution would bo so hacky that not appropreate to be incorporated in this project.\n. You can automate the whole process with build scripts which does all those tasks for you. You can look inside folder tasks in this project to see how it's done here, this project also copies files around (but internally ofcourse).\n. Hi there, yep the PR makes sense. If you could just simplify the line I commented :)\n. Ok, this is a little complicated, so I hope I'll be able to deliver it clearly :)\nElectron is acutally Node.js (ok, io.js) + Browser (Chromium) tied together. On the node.js side you have npm which uses commonJs modules through require(). That's why I didn't use browserify here - because then you wouldn't be able to use native modules from npm (native are those compiled from C++ like SQLite, scrypt, levelDB and so on). So that's why Require.js (AMD) is used here (require.js can be used with requirejs() keywrd what leaves require() intact so it still resolves modules from node_modules folder. \nSidenote: Require.js works by including starting <script> in the html, and then the script adds more script tags as next modules are needed. So after all everything ends as just script tag in app.html file.\nBUT require.js is only for the main body of code you're writing, nothing prevents you from adding extra <script> tags with whatever you like (like jquery, analytics, developer helpers etc.) which you want to be loaded immedately, without all the requirejs hassle. So both require.js and plain <script> tags can actually coexist next to each other peacefully and we can take advantage of it.\nDoes that make sense?\n. You just made me realise that javascript modules is a bigger mess than I thought ;)\nActually you asked very good question. Why I added the helper scripts from vendor/electron-boilerplate in self-invoking functions. I did this for few reasons.\n1. those scripts will load no matter what will happen to require.js. For example if I made a syntax error in some application file and require.js will fail to load I still can hit CTRL+R to reload the page, because helper script which does that has been loaded in separate script tag\n2. the scripts from vendor/electron-boilerplate are quite special purpose helpers (and always global), so I thought what the hell - why not require them this way.\n3. This way file app.js it totally in your control and no my line of code has to stay there ;)\nThis decission is not something I have very strong reasons behind. You can easily get it to work requireing them as everything else.\n. I don't know how to do it from command line. Always did that through clicking :)\nhttp://www.computerhope.com/issues/ch000549.htm\n. Haaah.... you just gave me hard nut to crack. I agree, this project should eather not mention bower at all, or support it fully. Since no bower components are used here I'm leaning towards no bower, and everyone who needs bower could easily add those files.\nThoughts? How many bower users actually are there? (I'm not one of them)\n. Ok, I've removed all mentions of Bower from this repository. This makes more sense. Everyone who uses Bower can add those things in 5 minutes.\n@subutux I apologize that your request actually had opposite effect to what you intend :)\n. Hahhh, right, so.....\nThis is one of pains of this probject. Right now whatever version npm intall electron-prebuilt decides to install this version is used to package the app. So the only way to use 32bit electron is to actually run it adn do npm run release on 32bit system.\nAll ideas how to make it possible without turning whole codebase upside down are welcome!\n. Definitely there is still a lot of 32bit windows systems out there. Being able to support them out of the box is great feature to have.\n@tkambler main issue I have with your solution is that it requires manual configuration. One of requirement for this project is that everything should just work after typing npm install.\nBTW is seems like nicer solution is on the way: https://github.com/mafintosh/electron-prebuilt/pull/55\nThen this boilerplate can just force on windows to always download 32bit (because 32bit works ok on 64bit).\nI imagine it this way:\nThe boilerplate has an option which on factory settings is set to install 32bit system (when that PR to electron-prebuilt will be merged).\nEveryone who decides to support only 64bit windows can switch it.\nHow about that?\n. @tkambler the feature to download electorn for different arch than your computer has been shipped: https://github.com/mafintosh/electron-prebuilt/pull/60\nDo you still want to go for it, or you leave it to me? :)\n. Tried to do something automatic what is pretty at the same time but failed. So finally there is only section in readme about that: https://github.com/szwacz/electron-boilerplate/commit/7cf141161732b6600ed85b3f705dc44297c82460\n. @destan This boilerplate is configured to require files through ES6 syntax. By using module.exports you will be constantly fighting the design ;)\nI intended require() to be reserved for loading npm modules only.\n. Ah, right, problems are always more complicated than they appear.\nES6 syntaxt won't work in main process because there is no loader configured to load them, so I'd go with module.exports then, or add transpilation task so I can use ES6 syntax just for consistency with the rest of app.\nBTW may I ask what type of logic you are adding to main process?\n. Copy, paste of what I wrote as response to other issue:\nI see because of this Electron's division to main and window scripts people start to think in terms of backend <-> frontend. I believe this is not the right mindset. Main script is just a manager for windows you want to open (you can open more than one, then everything changes and you need some communication and probably need some logic in main script). There is nothing you can't do in window context (AFAIK) what you can do in main context. Window context is browser and node.js combined, that's where the power really is.\n. So if your application is one window only, I don't think you need any business logic in main script.\n. Yep, in case of multiwindow application what you say definitely makes sense!\n. Hey @jonatasfreitasv I have a lot of thoughts to share :)\nFirst note: best PRs are those which change only one thing, so this actually should be few separate PRs.\nFirst things I can't agree with...\n- the project changed a bit, now it doesn't use require.js so this part doesn't make sense now\n- 'use strict' isn't needed because it's written in es6 modules standard that all of them have strict mode turned off by default. You can see into bundeled code (it's there, bundler added it for us).\n- jshint... wel I wouldn't go that far. I don't want to overwhelm people with too complicated toolchain.\nWhat I agree with...\n- .idea file in .gitignore, sure, why not!\n- Fetching jasmine via bower. Ok, the topic of bower appeared already few times and I see I can't escape from it. But few requirements:\n  - please use standard name bower_components, this project most important of all should look familiar to people :)\n  - don't assume bower is installed globally and available in command line (because on many machines it isn't, and your postinstall script will fail in that scenario) bower package can be installed locally as well, and then the whole repository is independent from globally installed scripts (hint: I do it this way with gulp in this project as well)\nSo if you'd like to change the PR to the form I've described above I'll merge it.\nCheers!\n. And how do you imagine TravisCI could work on three different operating systems? :)\nEven if this would be possible I still can't think of practical use of CI here. Am I missing something?\n. Thank you @jonatasfreitasv but you are not testing what your're supposed to be testing with tools you proposed. Electron is not a browser, and can't be fully mocked by phantom.js. You can test electron code only in electron runtime.\n. Nope :) You have access to node context everywhere. Everywhere in your code you can do for example new Buffer('abc'). Just try it yourself ;)\nI see because of this Electron's division to main and window scripts people start to think in terms of backend <-> frontend. I believe this is not the right mindset. Main script is just a manager for windows you want to open (you can open more than one, then everything changes and you need some communication and probably need some logic in main script). There is nothing you can't do in window context (AFAIK) what you can do in main context. Window context is browser and node.js combined, that's where the power really is.\n. Hey, you see the version of jasmine in top left corner of the screen when running your tests. It's v2.2 at this moment.\n. There are zip files to download on https://github.com/jasmine/jasmine/releases\nI copy contents of lib/jasminze-x.x.x directory to vendor/jasmine.\n. @JimmyBoh Jasmine framework introduced UMD declaration recently. This declaration is troublesome to Electron runtime because Electron is a browser and node.js merged together. https://github.com/szwacz/electron-boilerplate/blob/master/app/vendor/jasmine/jasmine.js#L26\nHad to comment manually part of code to make it work. Now this project uses Jasmine 2.4.1\n. Now the boilerplate uses bundler with single file as a entry, so stuff isn't transpiled by *.js glob any longer.\n. I'm very reluctant to add here code which will be useful only in small percentage of use cases.\nWhat are practical implications of this preloaded script?\n. I understand. This is very simple thing to configure in electron, so everyone can do it on their own :)\nBUT your PR touched and attempts to fix this by editing the biggest pain of this project so far:\njs\nvar paths = {\n    jsCodeToTranspile: [\n        'app/**/*.js',\n        '!app/main.js',\n        '!app/spec.js',\n        '!app/node_modules/**',\n        '!app/vendor/**'\n    ],\n    copyFromAppDir: [\n        './main.js',\n        './spec.js',\n        './node_modules/**',\n        './vendor/**',\n        './**/*.html'\n    ],\n}\nAnd this piece of code is as I can see the biggest source of trouble right now. Everything has to be in one of those blocks, and has to be negated in the other. Without simplifying this thing we're going nowhere.\nBest solution would be to use bundler with single file as a entry point (like browserify). Then code transpilation will be performed only on dependency tree which starts from e.g. app.js file.\nBrowserify is not an option because it will try to bundle native node modules as well, and we don't want that (snice we have node as first class citizen here).\nI'm looking into https://github.com/rollup/rollup as we speak.\nAll ideas how to solve it are welcome!\n. Problem has been solved by changing more fundamental design decisions.\nThanks for PR anyway :)\n. The main.js has been renamed to background.js and app.js name stayed the same.\nHow about that?\n. Hi, I don't think you grasped my intentions with this boilerplate. \n1. File app.js is ment to be used as starting point for your code, you can easily start write angular applicaiotn there.\n2. Transpilation is the process which among other things translates modules written in ES6 syntax into Require.js format, so you shouldn't use require.js define structure, this structure is generated automatically for you from much nicer in use ES6 modules syntax.\nBut one thing that I see clearly thanks to issues filed here is that I made the whole thing too complicated. Must simplify it....\n. @carlosperate Node v4 has some support for ES6, but not for ES6 Modules, those are not even on the horizon yet (or are they?). So we're still cursed to use transpilers and module loaders for some time.\n. @tysenmoore-xse chillax man :) \nThe problem you have is very valuable clue to me, boilerplated are all about being easy to understand, and other people also had difficulties with customizing this transpilation process. At the same time I'd like to use ES6 Modules because this is the future.\nThis weekend will sit and figure out better way...\n. The project stopped using require.js, and moved to bundles which are then included via ordinary ",
    "bsr203": "thanks Jakub. I will start using this project and will back with more feedback/qns.\n. ",
    "ingro": "Yeah, as I said that was a little rough implementation, I think I can use a tmp folder as you suggested. Anyway I found an issue with .exe files packed into asar (https://github.com/atom/asar/issues/35), so I don't know if this will be a good viable default option, even if it solves the path too long error... Working on Windows sucks sometimes :(\n. Well I guess you're right, I will try to improve my PR soon to use a temp folder. Another tool that may be worh to be included its modclean, which deletes unneeded files from node_modules folder. On a project that I'm working on lately took down the size of the folder from ~26M to ~20M. I will open a new PR when I figure out how to integrate it!\n. It makes sense! Anyway I updated my PR, I figured out I can save the asar archive direcly in the tmp folder you already created, so the copy step is no longer needed :)\n. No problem, thanks for your work which helped me a lot getting started with Electron :)\n. ",
    "plrthink": "@szwacz  I would give a try.\n. @szwacz Yeah, it works. :beers:\n. @szwacz I just created a PR for this and I am closing this issue.\n. this should fix #5 \n. @szwacz oh, my fault, I would fix this....\n. ",
    "carlosperate": "Have you got NSIS installed?\n. I can confirm the same under Windows 8.1.\n. Sorry I can't say the same, still experiencing the same transpile-watch issue.\n. Yeah, I just tried it on a fresh restart with a new clone of master and still the same.\nI should also add that when the I close the application I also get the following errors:\n[1988:0623/205934:ERROR:ipc_channel_win.cc(414)] pipe error: 232\n[1988:0623/205934:ERROR:ipc_channel_win.cc(138)] pipe error: 109\nI've experience both these issues from the beginning (a bit longer than a week ago is when I first used it), and it has not been intermittent. \nTesting on Windows 8.1 64 bit, running node 0.12.4 32 bit, and npm 2.10.1. \n. Yeah, that did the trick.\nAlthough now I am only getting one pipe error when the window is closed, should I open a different issue for that?\n[2360:0626/012206:ERROR:ipc_channel_win.cc(138)] pipe error: 109\n. Have you seen such pip error on your Windows testing? If so, could you raise a bug report in the appropriate channel? I have no idea how the software stack is organised, simple google search about it usually points to chromium build errors.\n. I've experienced the same.\n. If I remember correctly \"tree-kill was added exclusively to try to fix this issue, so if this PR offers a solution that. in addition, allows us to remove a dependency it sounds good to me.\n. Just to let people know that I have stopped experiencing this issue with electron prebuild version 0.29.2.\n. It'd be nice to have the cleanupRuntime function ported to the linux release script. \n. Perhaps I am biased, as I am not a bower user either, but as a boiler plate I would prefer it to be as light weight as possible and then each user can customise it as required.\n. This question is mainly coming from my inexperience with these tools, but if we cannot control what version of electron-prebuild npm installs, how are we going to redirect the electron location to something different?\n. Do \"power\" users have a need for a boilerplate?\n. I just feel that a boilerplate is not quite for power users and, because of the complexity required to fully utilise this feature, it would only be used by people for which implementing this themselves would be a no-hassle. \nAll that being said, I do not have a better solution for this kind of issue, but for a project like this I would personally prefer to leave it as slim as possible or have a solution that could easily be executed by the target audience.\n. Doesn't the latest chromiun engine and Node 4.0 (which is now shipped with electron) support ES6?\n. Seems like https://github.com/szwacz/electron-boilerplate/issues/49 can now be closed.\n. this might be helpful to understand the current state of notifications on electron: https://github.com/atom/electron/issues/262\n. > Why you decided to pick wix? Does it give you something NSIS can't offer? Then we can talk about getting rid of NSIS and supporting only wix.\nThis looks like the best approach to me, I think these types of boiler plates should stay as slim as possible.\n. :+1: \n. I'd prefer to leave any references to a \"company name\" out, as it is simple to find out how to add it if needed, but that's just a personal suggestion.\n. Can you check if the electron prebuilt installed by node is the 32 bit version?\n. Please correct me if I am wrong, wouldn't this be informing the users of an available update to the electron framework (no the app)? in that case, how would that update work with the packaged/installed applications? \n. > Why won't I include this compilers only for my specific project?\n\nCompilers are contained in /tasks/build.js file which is outside the /app/ folder and modifying electron-boilerplate tasks would make it difficult to get future updates of boilerplate without overwriting customized files.\n\nSimilarly one could argue that if the majority of users don't use these features, they either have a bloaded boilerplate, or if they remove them it makes it difficult to get future updates of boilerplate without overwriting the customized files.\n. To be fair, I've been quite negative to framework additions to the boilerplate in a lot of my comments around here, and in all honestly, as long as they are compartmentalised (as it currently is in the build file) it is a quite a straight forward procedure to remove, and maintain removed, unwanted features.\nThat being said, I had to \"manually cherry pick\" my boilerplate updates due to my project structure and general changes. So this was a process I'm used to do manually from the beginning.\nSo yeah, as long as this factor is kept well under consideration on the addition of new features it really shouldn't really be a problem. However, I personally would prefer the number of supported frameworks to be relatively low, in order to maintain the boilerplate light. It should be easy to add features, and not a necessity to remove them.\n. You can pull from a remote repository (normally you'd call yours origin and the original upstream), but my project folder structure was different than the boilerplate and I did not want to maintain a git subtree, as there was a high chance I would modify and move things around the boilerplate even further (I didn't in the end though).\n. I suggest to change the newly created build folder to something different, as a lot of projects might have that directory name in their gitignore files.\n. Yeah, I cannot come up with a better name either. Maybe adding some prefix or postfix to the word \"build\", I had to add an explicit exception to my gitignore file to get it to show on a single git status or git add ..\n. My electron folder is a subdirectory from the project root, so at the top level I've got /build to be ignored, and the build folder inside the electron boilertplate directory as an exception (there is also an electron specific gitignore in its directory, but without the stuff included in the main gitignore).\n. As a quick note, don't be so quick to blame it all on fs-jetpack, while it might be partially or fully responsible for your issues, I've had tons of general problems in the past with samba stability when transferring large amounts of data.\n. > As for the Raspberry, this problem will kinda solve its self, as the RPi 3 now natively supports 64 bit I guess. Once I get one into my fingers, I will try this out. \nThey are still evaluating if moving the OS to 64 bits is worth the effort. From my point of view it isn't (maintaining 2 operating systems and recompiling all packages for very little benefit will dilute the ouput of the team), so I'd be surprised if they do the move any time soon.\n. Since this is using the prebuild version of electron, which is build for a generic ARMv7 architecture, it should be fine for the majority of single-board computers, as long as there is no real code compilation happening during the packaging I think we are pretty safe.\n. You can virtualise it using something like QEMU, but it would definitely require modifications to the linux kernel, even if you use the one provided by Raspberry Pi, although I'd be surprised if somebody hasn't done that already and published it.\nRaspbian is in essence a customised version of Debian for ARM, with performance updates and a bunch useful packages for the Pi (I hope it doesn't sound like I'm belittling the effort put into the OS though, I'm sure a lot of people have work quite hard to get it run as best as possible). I believe it is still compiled for ARMv6, which is a somewhat old version of the architecture, done so that the same image can still be used on the old Rasberry Pi 1s and Zero, while the Electron ARM is only available for ARMv7 (Pi 2) or higher (Pi 3 being ARMv8 is still fine), so that distinction would have to be clear. The beagleboard black/green/blue (ARMv7) is also based on debian, and the ODRIOD and UDOO boards (both ARMv7/v8) are based on Ubuntu, so hopefully it should pretty much work as well for those.\nI think we need to find a cleaner way to create the boilerplate packages without adding the amd64 architecture flag, at that point I'm sure we can get a few people to test it to make sure it works. I'll be happy to test a working solution on different platforms, but unfortunately I don't really have much time in the near future to help with the solution itself.\n. To be honest, from my point of view, suggesting a code style and integrating a tool would be kind of like suggesting an IDE, preferences are mostly based on personal opinion and do not add real value to the software itself.\nSomething like that would be useful to unify the development environment, which makes sense when expecting several developers to constantly collaborate on the project. However, this type of project is likely to be used by a wide range of developers that will never contribute back with the boilerplate and some that might have to adhere to their own code styles and set of tools.\nBtw, how would this type optional implementation work?\n. Keep in mind that Windows is not very good a refreshing their cached icons. If you have installed/used the application with the default icon first, and then added it, it might not show up or refresh right away.\n. Looks a like a new release with the fix will be out inminently, so we might as well just update Electron version once it's out.\nhttps://github.com/atom/electron/pull/4993\n. > 6 - Deleting whole files and some lines in package.json is the easiest form of removing functionality I can image.\nWhile I do agree that I'd prefer this boilerplate to stay slim, this is definitely the best approach for this. If a feature has all its logic in a single source file, and then a line or two to call it somewhere else, then it really simplifies the process of removing such feature AND maintaining the boilerplate updated without it.\n. I might be biased about my point of view on this specific feature, but it does seem like you are taking the best course of action given the circumstances.\n. Copy on text selection would be quite welcomed!\n. I had a quick look recently on this as well. It seems like it would have to change the os x and windows installers to use squirrel, so a major change from the current workflow tools. Apart from those two platforms, there is no alternative for linux, so it seems like generating the deb file would remain the same.\nPersonally I would welcome the change, but I can understand if some boilerplate users would not want to package their apps with squirrel.\n. >  I don't see why one should use both at the same time - you either go one way or the other so you don't have to maintain two installers but just the one you prefer. \nThe boilerplate would have to maintain two different installers.\n. ",
    "liudonghua123": "No, I noticed that, now it works after I installed NSIS. I should read the doc more carefully. Thanks!\n. ",
    "vinnyp": "Thanks! I removed NODE_PATH and it worked fine. Now I just need to figure out why my NODE_PATH is busted.\n. Ah, sorry about that. I'm still trying to figure out what's your stuff vs. prebuilt.\n. ",
    "floydpink": ":+1:  - that seems to have fixed it\n. ",
    "pkunze": "I think this issue should be reopened. I am able to reproduce it with a fresh install of the boilerplate. I noticed it because after I close the electron-window the console does return and prints out right afterwards. \nbash\n[08:25:08] Starting gulpfile /path/to/gulpfile.js\n[08:25:08] Starting 'watch'...\nagain (after it already retorned to the working directory. See Screenshot below):\n\nAfter i noticed this, I tried to reproduce the issue using the steps provided by @floydpink wich works sometimes. \nAlso, the build takes longer everytime I compile again. Also, after using npm start a few times, the cpu load is at a steady pace of 100% on every (Windows-)maschine I try it with. This can be solved temporarely by closing the used cmd window and using a new one, but the process slowly starts again.\nAm I doing something wrong?\n. I think i've localized the possible issue: \nit's in tasks/start.js:\nI added some console-logs to make my point clear. see the attached console-screenshot* for an example...\nrunGulpWatch respawns the process when watch is closed:\n``` javascript\nvar runGulpWatch = function () {\n    console.log('[runGulpWatch] Im getting spawned now')\nwatch = childProcess.spawn(utils.spawnablePath(gulpPath), [\n    'watch',\n    '--env=' + utils.getEnvName(),\n    '--color'\n], {\n    stdio: 'inherit'\n});\n\nwatch.on('close', function (code) {\n    // Gulp watch exits when error occured during build.\n    // Just respawn it then.\n    console.log('[runGulpWatch] Im restarting my self now')\n    runGulpWatch();\n});\n\n};\n```\nwhich is also triggered when the app exits by doing\n``` javascript\nvar runApp = function () {\n    var app = childProcess.spawn(electron, ['./build'], {\n        stdio: 'inherit'\n    });\napp.on('close', function (code) {\n    // User closed the app. Kill the host process.\n    console.log('[runApp] Im killing gulps watch task right now ;)')\n    kill(watch.pid, 'SIGKILL', function () {            \n        process.exit();\n    });\n});\n\n};\n```\nwhich seems to respawn the watch task (at least on windows):\n\nSo from my point of view, the automatic respawn of watch causes the problem.\n. Had the same problem with NSIS 2.50\nInstalling NSIS 3.0.b3 as @coclav suggested solved the issue for me. Thanks a lot!\n. Well, a release would be sufficient, will say: AWESOME. I will receive a PI in a few days and i'll give it a try to see if it already works. According to https://github.com/atom/electron/pull/2094 it could already be possible...\n. So.. installing and starting on a pi was no problem, but creating a release builds an amd64 architecture .deb-file which is not accepted when trying to dpkg -i. \n. I'd like to add that one can install it on a RPi 2 if you add amd64 to allowed architectures first, which is pretty dangerous one could say:\nbash\n$ sudo dpkg --add-architecture amd64\n$ sudo dpkg -i releases/electron-boilerplate_#.#.#_amd64.deb\nThen i was able to start it via menu-item normally:\n\nLook at this beauty:\n\nYou cannot remove amd64 afterwards, as deb somehow keeps track of used architectures.\nThe electron build however is made for arm since release ran on the PI, so i guess its just a problem with the Packages Meta info, but i wasn't able to define armhf as the use architecture using dpkg....\nAs for the Raspberry, this problem will kinda solve its self, as the RPi 3 now natively supports 64 bit I guess. Once I get one into my fingers, I will try this out. \n. Ok. That is good to know. Additionally, it is worth pointing out that raspberry is not equal to ARM. So just because newer RPi models may support 64 bits doesnt mean this Ticket would be solved. \n. Yeah, but as i said, in order to install i had to add amd64 to supported archs which isn't ideal IMO. \n. Yep. Haven't heard of any way to virtualize this on Intel though.\n. I'd like to know @szwacz's opinion in this. Other than the gulp task and filenames, everything could stay as it is, since typescript is a superset of js, which basically means, you wouldn't have to change the codebase (besides compilation)... Typescript support would be kindo of optional since you can write regular JS in TypeScript.\n. Not at all! Keep up the good work!\n. ups\n. @Sirius-A yeah, right.\n@szwacz: Nothings wrong with App-Veyor and Travis at all. However, GitLab has it's own built in CI System which integrates great into the platform, so for those using the boilerplate on GitLab, having a pre-configured .gitlab-ci.yml-file would be a great benefit because they could push their code and would have CI immediately available at no extra (configuration) cost, since GitLab automatically enables CI when a .gitlab-ci.yml-file is present (while setting up a good one can be quite a task for people unfamiliar with the GitLab-CI system). \nSo I am notsuggesting to get rid of Travis and AppVeyor, but to add a preconfigured .gitlab-ci.yml-file as a complement for GitLab Users.\nSome features I have tried out so far are:\n- Piplines with the stages \n  - build (builing a release)\n  - test (running unit and e2e tests as well as coverage)\n- Test-Coverage persistance within the Pipeline\n- Uploading the coverage reports as artifacts for later download\n- Uploading the build-artifacts (.deb) just like the coverage-reports (this is sort of similar to GitHub Releases)\n- Running plato and automatically setting up a GitLab-Project Page (this is sth. like a github page for a repository) using its output (just to play around with pages a bit)\nHowever, due to the lack of good dockerimages for running electron the build is quite slow. Maybe, someone here has a good idea to speed things up unti GitLab speeds up the builds itsself (they've got some things up in line on that issue).\nI'll set up a demo-project and paste a link here for you to see.\n. That was my concern too. I think I'll provide an example config and submit a PR with an updated CI section of the readme. . For anyone interested in this issue, i've created a gitlab ci file in a little fork on gitlab for anybody to see:\nhttps://gitlab.com/nozzleman101/electron-boilerplate/pipelines/4981018\nThe ci-file can be seen here: https://gitlab.com/nozzleman101/electron-boilerplate/blob/master/.gitlab-ci.yml\nCurrently, it features jobs for everything I got to work:\n\nUnit Tests\nE2E Tests\nCoverage Analysis (Report can be downloaded via Build Artifacts), Regex used for integrated GitLab-Parsing: 1?\\d?\\d%(?=\\s*\\(\\s*\\d+\\/\\d+\\s\\)\\s*=+)\nStatic Code Analysis with self updating project page (https://nozzleman101.gitlab.io/electron-boilerplate/)\nBuilding DEB package (Can also be downloaded via Build Artifacts)\n\nThose jobs are seperated in two stages (test and bundle), a third stage for the pages deployment is added by gitlab automatically.\nEdit: Note that this is from January, i just forgot to post it, so its not the current State of the project here on github ;)\nAlso: The build is fairly slow to begin with, but this can be accelerated by creating custom Docker Images for the build and/or registering a dedicated runner (i used shared runners). Great!. ",
    "black-snow": "Nah, it's the same here, too. I just got used to it. Gotta hit crtl + c a couple times when I wanna stop everything.\n. While it's annoying you also get used to it pretty fast :D\nI recently had quite the same issue in one of my projects. I didn't find any satisfying solution. Tried pretty much any of these answers: http://stackoverflow.com/questions/23706055/why-can-i-not-kill-my-child-process-in-nodejs-on-windows\nSee also https://www.exratione.com/2013/05/die-child-process-die/ and https://github.com/nodejs/node-v0.x-archive/issues/1811\nMaybe this will do the trick: https://www.npmjs.com/package/tree-kill\n. @kof We chose to use electron-builder. Guess they'd be happy if you filed a PR that ads wix-support (currently electron-builder supports NSIS and Squirrel).\n. Thanks for the reply. I'm not sure I got what rollup does. It bundles my scripts into a single module?\nDoes this mean that I'll have to add lines like\nbundle(srcDir.path('myOtherScript.js'), destDir.path('app.js')),\nfor each of my files and they will all end up in app.js? Still I would have to add a line for each file.\n. Got it running on my home machine (Win7 x64) with vanilla node.\n. Sadly, with electron, it doesn't work on my home machine either. Got pretty much the same error.\nI cd'ed into app, ran npm install --save mdns which ran just fine. I then used the exact same code snippet as in my vanilla version (the example from the project's README) and got prompted with this error.\n\nP.S.: Just checked, getting the same error on a bare electron project.\nP.P.S: Alright, works after electron-rebuild on the bare electron project.\n. Have you also added the example code for mdns? I've put it in background.js' onready:\n``` javascript\nimport mdns from 'mdns';\n...\n// advertise a http server on port 4321\nvar ad = mdns.createAdvertisement(mdns.tcp('http'), 4321);\nad.start();\n\n// watch all http servers\nvar browser = mdns.createBrowser(mdns.tcp('http'));\nbrowser.on('serviceUp', function(service) {\n  console.log(\"service up: \", service);\n});\nbrowser.on('serviceDown', function(service) {\n  console.log(\"service down: \", service);\n});\nbrowser.start();\n\n// discover all available service types\nvar all_the_types = mdns.browseThemAll(); // all_the_types is just another browser...\n\n```\n. I appreciate your help very much, thanks a lot!\nSadly, the rebuild task fails on my system. \njavascript\nreturn promisedExec(electron + ' --version')\n    .then(function (stdout) {\nstdout is [ '', '' ] on my system and thus filterVersionOnly.exec(stdout) is null. Executing path\\to\\electron --version manually returns v0.35.4, though. I hardcoded getElectronVersion() to return 0.35.4 and ... it worked! This is great!\nI dunno why I get that weird value for stdout ... could we, alternatively, extract the prebuilt-version from the top-level package.json and use that?\nHow do we integrate your solution into the boilerplate? Running a rebuild after each npm install surely isn't necessary. We only need this for somewhat native modules, right?\n. How do I do that? I'm not firm with Q. Changing var promisedExec = Q.denodeify(childProcess.exec); to var promisedExec = Q.denodeify(childProcess.spawn); leaves me with [TypeError: Incorrect value of args option]. I fiddled around but couldn't replace exec with spawn (though signatures seem the same).\n. This: https://github.com/electronjs/electron-rebuild/issues/37#issuecomment-168773042 fixed the output for me.\nrebuild.js:14 now looks like this:\njavascript\nreturn promisedExec('SET ELECTRON_NO_ATTACH_CONSOLE=1 && ' + electron + ' --version')\n. I'm quite in a hurry right now but couldn't we just add another task, let's say require_native that does all that for us?\nnpm run require_native arg => npm install --save arg && node run tasks/rebuild\nThanks for your efforts!\n. yup, would be run whenever one needs to install a native module - it'd be just a shortcut\nWhy isn't postinstall triggered, btw?\n. Will take a look soon (& report back), thanks\n. npm run install-native mdns gives me this:\n{ [Error: spawn npm ENOENT]\n  code: 'ENOENT',\n  errno: 'ENOENT',\n  syscall: 'spawn npm',\n  path: 'npm',\n  spawnargs: [ 'install', '--save', 'mdns' ] }\nMight be related to https://github.com/nodejs/node-v0.x-archive/issues/2318\n. @szwacz good work! Seems fine. Thanks\n. @JimmyBoh did you adjust your build.js, too? app.js and background.js are referenced there; see https://github.com/szwacz/electron-boilerplate/blob/master/tasks/build.js#L76\n. getAppPath() is a method of electron's app object. There's two occurences in the boilerplate: https://github.com/szwacz/electron-boilerplate/search?utf8=%E2%9C%93&q=getAppPath\n. 0.36.2 is the current version; see https://github.com/szwacz/electron-boilerplate/issues/106\n. Woops, didn't look closely.\n. I had some issues with 0.36 - but I can't access that machine until thursday. Will report back if those issues remain.\n. I didn't experience the issues mentioned in https://github.com/atom/rcedit/issues/3\nI'll try to change those other properties with rcedit next week and report back.\nThanks for the reply!\n. Alright, tried it on another machine - works well.\nI've added\n'ProductVersion': manifest.version,\n'CompanyName': manifest.author,\n'LegalCopyright': manifest.copyright // I added a \"copyright\" field to app/package.json, dunno if this is \"okay\"\nAlso there's OriginalFilename and InternalName of which the first one should be set to manifest.productName + '.exe' I guess.\nPlease tell me whether you think it's okay to add custom fields to package.json or not and I'll file a PR. (for I think these are things that should be done by default)\n. PR here: https://github.com/szwacz/electron-boilerplate/pull/108\nDidn't know what the helper stuff is on OS X so I didn't touch that.\n. If we don't edit the CompanyName it will be GitHub Inc.. We could add another property to app/package.json for that (but leave it blank).\nIt'd be just as simple to figure out how to add the other three details - I don't see the point :)\n. What did you do? Please provide some details.\n. @tezlopchan please close the issue if it has been resolved :)\n. Did you get it running in a vanilla node app? / In a \"vanilla electron\" app?\n. Is there any information on what this PR is good for?\n. Please check what line 32 is for you.\nHow come the directory is tmp?\nLine 32 from resources installer.nsi would be Unicode true, I doubt that's the issue.\n. resources, config and others do contain customized files, too :) (at least for me they do)\nShouldn't you be able to stash your changes and merge them back in on incoming updates?\n. I'm quite a git-noob but couldn't one just have multiple remotes and just cherrypick?\n. @carlosperate I didn't intend to support the addition of more stuff to the boilerplate. Instead I tried to provide a reasonable solution for dariusz. I think the boilerplate should pretty much just cover the \"least reasonable minimum\" of things required to kickstart an electron project.\nAs for now I am manually copying the changes from the boilerplate, too. Ain't you guys firm w/ git? It should be feasible to have two remotes, the boilerplate and my custom repo, should it not?\n. Could be anything. Have you tried running it on a local drive?\n. Ain't the copy task required in order to move the stuff from app to build and thus to actually run the correct stuff? Of course you could edit the whole thing so that it just runs on app/.\nI'd be great if you could dig a little deeper and identify what's causing this exactely.\n. I don't think it is likely to happen that many people use this boilerplate for projects w/ 1k+ files (Jesus ...) or at least they'll know how to get around. You shouldn't blame the boilerplate for that it doesn't suit your needs. IMHO you should rather blame your choice of tools. There's no need to use watchers. Just deactivate them, what's the issue?\n. @gbaumgart Sehr kritikf\u00e4hig, Respekt.\n. @sclearion how come your installer.nsi is in ...\\tmp instead of ...\\resources\\windows?\n. If you could zip your project and upload it somewhere I could run it on another win10 machine.\nFile /r \"${src}\\*\" is from the tmp-dir's installer.nsi? How does line 12 look? Has the placeholder been replaced properly?\nI, too, have the directory open in explorer + editor + cmd (at least) - that shouldn't be an issue :)\n. @Booligoosh I fear this has nothing to do with this boilerplate. Grab the error message and throw it into your favorite search engine or pay a visit to stackoverflow ;). My two cents:\nI use the boilerplate to kickstart my apps. Often there's not much code involved so that I don't feel the need to write clean code at all. If an app gets bigger my own code rules / my company's rules apply. The stuff that the boilerplate does is good to grasp and hacking the boilerplate has not yet been an issue.\nI probably just wouldn't use it. I plug my own things in just where and when I need them. \nBut as long as it's fully optional I also wouldn't mind. Imho this okay as longs as I don't need to touch any of my existing or future code if I don't wanna use this.\nApart from all this, thank you very much for keeping this alive and pushing it forward.\n. There's packages on npm. Or just download a release, put it somewhere in your app folder and use it.\n. Yes, fire up a virtual machine with Windows ;)\nOtherwise, no.\n. Which Windows version are you on? Which boilerplate version? Which NSIS version?\nCan you check if it's an rcedit issue? See https://github.com/szwacz/electron-boilerplate/blob/master/tasks/release/windows.js#L52\n. Thanks for the update.\nIt should be easy to check if it's an rcedit-related issue. Create a clean node project, npm install rcedit, copy any exe to the project, copy some icon to the project, create a script with:\njavascript\nvar rcedit = require('rcedit');\nrcedit('path-to-the.exe', {\n    'icon': 'path-to-some-icon',\n    'version-string': {\n        'ProductName': 'whatever'\n    }\n  }, function (err) {\n        console.log(err)\n  });\nRun the script and see if the icon changed. If I'm not missing anything this sould work.\nIf it's not changing the icon* you should post that issue on rcedit's tracker.\n*And not failing, throwing any errors\n. Good hint. Right-click -> Props -> Details might show the right icon.\n. Damn, I need the auto-update right now.\nWhy don't we offer this as an alternative to npm run release as npm run release-squirrel or something like that. I don't see why one should use both at the same time - you either go one way or the other so you don't have to maintain two installers but just the one you prefer. We could also stick with a single npm run release and have a config flag that chooses between NSIS and squirrel.\n. Ain't this what the boilerplate is there for? Bundling stuff so that we as app developers ain't got so much to do?\nAlso I'd call this pretty mucg a must-have. Virtually any application has auto-updaters nowadays.\nWill try hacking on this.\n. Can we close this issue?\n. Unless szwacz want to add an optional ts support I'd recommend a fork. Branches are, indeed, almost invisible on github.\nThanks for your efforts!. Great, I'll do some experiments and report back :)\n. @blainesch Please feel free to do some experiments and report back your results.\nActually I'm wondering what use is left for the boilerplate if we switch to electron-builder. What does the boilerplate actually do (apart from the little helpers) that electron-builder does not?\nThe boilerplate does:\n- Build installers (covered by electron-builder)\n- Install native modules (covered by electron-builder)\n- Have some little helpers\n- Provide an environment that automagically hotswaps code-changes (if possible)\n- Provide the env-config\n- Provide harmony transpiling and rollup stuff\nAm I missing something? I guess we could swap the build process and still have some additional features that are nice to have. The result would be electron-builder with sensible defaults, helpers and code hotswapping. Neat indeed. On the otherhand I'd mean to swap out like 90% of the boilerplate.\nGuess it's up to @szwacz to decide where this project is gonna go. It could also remain as a viable alternative to electron-builder (or electron-packager). I'd say that if you don't need autoUpdate this boilerplate in fact is an alternative.\nGuess we should rather take a look at what people need instead of trying to preserve what we have.\nIn my case it's this:\n- Easy to set up environment with debugging helpers (i. e. git clone && npm install && npm start and we're good to go)\n- Able to produce installers for all major platforms\n- Install native modules seamlessly\n- Be interoperable with defacto electron standard tools\n- autoUpdate-able\n- Fast & good support in case of trouble (szwacz is doing a great job here)\nHow does your workflow look like? What are your needs? What's bugging you w/ this boilerplate? What's great about it? Should we aim to be a standard tool or rather be an alternative?\n. @szwacz can you give us a branch to work on this?\n. I'm actually using it in production and it's running pretty great. Sadly I haven't yet found the time to hack on this :|\n. Alright, let's start with this.\nThe first key-difference is that electron-builder uses different directories.\nelectron-builder requires (by default):\n- app - contains the app-files - this is pretty much build in the boilerplate\n- build - contains mostly images used for the installers - comparable to resources\n- output - holds the releases - comparable to releases\nBy default electron-builder has no tasks that run before building the installers. We'll most probably want to keep some of our tasks (things like rollup, babel-stuff, ....).\nOn one hand I think it'd be good to stick to electron-builder's defaults. On the other hand that would mean that what's build in the boilerplate now would become app and that's quite counterintuitive. I'd suggest we keep the boilerplate-meaning of app and build and point electron-builder to the build directory (for our build actually contains the \"built\" application). \nThat means that we'll have to drop electron-builder's build directory, too. We can either stick to resources or be more explicit and call it installer-resources or something like that.\nRewriting the paths for those directories is a piece of cake and can be achieved via the package.json (see https://github.com/electron-userland/electron-builder/wiki/Options#directories).\n\nAnother question is what to choose as default build targets.\nI don't think that Squirrel is a good default for there's lots of things to set up and have in mind (creating an endpoint somewhere, adding the upstream URL, adding empty RELEASES, handling the events, ...). I don't know what's to be done for mas releases for I haven't yet done any.\nFor windows we have the following targets:  squirrel, nsis, 7z, zip, tar.xz, tar.lz, tar.gz, tar.bz2\nWe could chose nsis for that's what we're doing already. However nsis was only added recently and (imho) isn't thoroughly tested yet. Also it's not using a .nsi-file (which could be good or bad ... or both).\nIdk what a sensible default would be for linux, maybe just zip.\n\nelectron-builder will - in contrast to the boilerplate, I think - drop older releases when running npm run dist. Currently I'm backing up my releases after each build. Maybe we can automate this.\n. @develar hey there, thanks for checking in\nSo NSIS will get auto updates, too? Great. Could you please explain in which ways NSIS outperforms Squirrel? NSIS seems to be more configurable.\nSwitching our default from squirrel to nsis shouldn't be a big deal once nsis is ready (with auto updates).\nSounds like we should just default to electron-builder's defaults ;)\n@develar Maybe I'll file an issue. I see why electron-builder throws away the most previous build but it seems to drop everything from the output directory. Let's assume I have versions 0.0.1, 0.0.2 and 0.0.3. When I npm run dist a 0.0.4 electron-builder will drop everything from the output dir, download the 0.0.3 again and build the 0.0.4, right? Why not just download what it needs and keep all other things in place? Maybe I'm wrong and this isn't the behaviour (anymore).\n. @develar thanks again for your reply. I'll file an issue so that we don't \"pollute\" the discussion here.\n. @szwacz I think we can drop our install/rebuild native tasks - worked out of the box using electron-builder.\nThe custom NSIS script can be dropped, too (develar is working on this but I guess he'll provide a template then, anyway).\nWill file two seperate PRs.\n. @develar I feel like when I was using electron-builder native modules were handled automagically in dev mode as well in the releases. Can you confirm this? I guess \"postinstall\": \"install-app-deps\", was the key.\n. I'll get to use the boilerplate/ builder-branch on my current project so I can gather some experiences on what might be missing over the next weeks ;)\nHope that NSIS auto-update + custom script will be available soon.\nAre we missing anything else for now?\n. @mattzuba greatly depends on how much you've customized your setup I'd say. Your stuff inside app should not need to be touched. If you depend on custom NSIS scripts you'll have to wait for electron-builder to support this. If there's nothing too fancy in your build/release process the transition should be smooth :)\n. Thumbs up\n. It ain't matter which IDE or editor you use. So no, no ideas.\n\"It doesn't work\" isn't that helpful. Please be specific. Tell us exactely what you did and what's the outcome.\n. Not sure I'm getting you. Whether or not the app is running, if it's signed it's signed.\nPlease tell us exactely what you did, what you expected and what happened actually. Also your OS etc.\n. Sadly I don't have any experience with debugging the autoUpdater on Mac OS X (yet). But you should get support at Squirrel's page (you are using squirrel, right?).\n. What does echo %PATH% say actually?\n. Works fine for me. Did you actually require('fs-jetpack')?\njavascript\nconst jetpack = require('fs-jetpack')\nconsole.log(jetpack.cwd('.').path())\n. Oh, I didn't see that. @matiastucci have you filed a bug report?\n. What's missing exactly? If you want to have additional js files merged or copied you may have to add some more lines to the build task (line 50+).\n. Take a look at tasks/build.js.\njavascript\nvar bundleApplication = function () {\n    return Q.all([\n            bundle(srcDir.path('background.js'), destDir.path('background.js')),\n            bundle(srcDir.path('app.js'), destDir.path('app.js')),\n        ]);\n};\nSeems like it won't bundle stuff from node_modules by default. You should be fine to just require() your components the normal way. If you really need to have stuff from nodue_modules bundled into another file then you'll have to edit tasks/build.js.\nE. g.:\njavascript\nvar bundleApplication = function () {\n    return Q.all([\n            bundle(srcDir.path('background.js'), destDir.path('background.js')),\n            bundle(srcDir.path('app.js'), destDir.path('app.js')),\n            bundle(srcDir.path('node_modules/react/some_script.js'), destDir.path('app.js')), // bundled into app.js\n            bundle(srcDir.path('node_modules/some_other_module/index.js'), destDir.path('some_other.js')), // bundled into some_other.js\n        ]);\n};\n. You could either add another task (gulp btw) or add you own subroutines to tasks/build/build.js.\nI didn't go through the code but you should check if it's not being done already somewhere :)\n. Woops, I guess I put the mas stuff in here, too.\nTogether with https://github.com/szwacz/electron-boilerplate/pull/187 this should remove all the mas-release artifacts.\n. @szwacz Really? I remember installing mdns as native module w/ eletron-builder and successfully using it in dev mode ... I fear that I won't be able to verify it this week but I'll put it on my todo\n. Which version of the boilerplate are you using?\n. @matikbird as a last resort you can always console.log() or console.error(). Then start the app via command prompt to see the outputs.\n. @matikbird You're welcome. Have you been able to solve you issues yet?\n. Which version of the boilerplate are you using?\n. That's correct, install-app-deps looks for directories.app which for us is build:\ncomputeDefaultAppDirectory(projectDir, use(devMetadata.directories, it => it!.app)),\ngulp build && install-app-deps might be okay. \nIt will install the node_modules in build but not in app. It'll initially leave app with no node_modules which might be confusing. As soon as a user does cd app && npm install something the node_modules will be present in app, too and on gulp build they'll get copied to build.\n. I didn't see this either. So src contains all the stuff that needs to be transpiled/compiled/whatever and app holds the static stuff? That's great. So we'll just use src to build our app and stuff that into app and we're good, right?\n@develar Just as a side question: Why is app called app if it just holds the assets? Did you call it app because it'll hold all the app stuff on build? \nI don't see src mentioned in the docs.\nAnd btw, thanks for your support again.\n. Mmmmh, wouldn't it be \"better\" to have a src directory and an assets directory and on build both get merged into app? At least that's what I'm used to from some other projects.\n. @szwacz 4.0 Release notes: \"As a byproduct builds are not much faster\" guess you wanted to say that builds are now much faster ;)\n. @szwacz I have a question concerning the new setup:\nIn the old setup there was a copyStuffFrom array. I just added some or all my .js files and they were available in the app. For example, I have a settings.js inside src and now when I import it (in renderer) I get an error that it's missing (and it actually is). To fix this I added a line to gulp.task('bundle', ...)\njavascript\nbundle(srcDir.path('settings.js'), destDir.path('settings.js'))\nBut I guess that's not the way this is meant to work. Guess I'm still not used to rollup. Please help me getting a grasp on this. Stuff that's needed in the main process is bundled into background.js and other stuff is bundled into app.js? If yes, where do I put stuff that I need in both?\nIn my settings.html I do: <script src=\"./settings.js\"></script> but without editing the build_app.js it's throwing a 404 for there ain't no settings.js. Do I just have to point it to app.js instead?\n. @szwacz Does that mean that I cannot use import statements in that file?\n. Thanks, I think it's clear now. If I had looked into rollup I wouldn't have had to ask, I guess.\n. @szwacz good point. It's also difficult if you have files that you want to use in the backend and in the frontend as well (or I'm missing some functionality, again). Let's say I have a taskQueue.js that's referenced in background.js and in app.js, too. One of them will throw an error.\n. @SantoDE you could modify the \"build\" process to skip the rollup part and just copy everything to the build folder.\n. @SantoDE have you checked if you actually need rollup? The latest electron/chromium has quite good ES6 support built in.\n. @szwacz any idea?\n. This is rather an issue with macos-alias or with your setup. Why are you trying to use macos-alias on a win10 machine? How's that supposed to work?\n. Afaik we already pinned the electron version (1.3.3 currently, too lazy to look it up) so pinning a node version might not be too bad at all. But I gotta say that I don't know much about any (other) implications that might bring along.\n. Why doesn't postinstall fire on npm i? o.\u00d3\n. Sadly calling node_modules/.bin/install-app-deps manually after installing a new dependency didn't help.\n. nodeGypRebuild shoul fix this. Closing the issue.\n. Afaik there's a huge difference between unlicensed code and MIT licensed code.\nFor unlicensed stuff you can, at any point in the future, choose to throw any license at it. That's why you shouldn't use any unlicensed code - it can suddenly get licensed and break your neck.\nunlicense seems to have some issues, please throw your favourite search engine at it.\nAs you said it's in the readme and already licensed under the MIT license.\n. https://github.com/szwacz/electron-boilerplate/pull/200\n. Thanks for the PR. IMHO more node versions should be tested - not just 4.5.0.\n. Right, we use node implicitly so no need to test different versions. My bad.\n. Probably because it's not needed. Just an optional dep. See\nOr is something broken on your machine?\n. Thanks\n. @sfraise can be closed?\n. Please describe your issue. What did you try to do? What did you expect? What happened?\n. Why would you delete stuff that you need for the release anyway?\n. How does your package.json look? Can you find the module in the build folder? Dev mode or release?\n. Rather sounds like an issue with eletron-chromedriver (1.4.0).\n. looks good\n. \"it didn't work\" isn't much of an error report. Please show us all the required code parts and tell us what you expected, what you did and what actually happened.\nHave you correctly set the feedUrl? Do you correctly handle the events?\n. You're welcome\n. I'm not sure I understand your question. npm i bower installs bower.\nDo you mean the packages you fetch via bower? If they use import statements or other stuff that's not yet there natively they must go in src or you'll have to edit the build process.\n. Dunno if it causes trouble but I guess you shouldn't have your app dependencies in the top-level package.json.\n. See if http://stackoverflow.com/questions/33741367/gulp-watch-failing-with-spawn-eacces-error helps.\nHave you checked permissions of your app files? Can't reproduce on Sierra.\n. Gr8. Didn't experience any issues so far.. There's a quote missing ...\n. Taking a quick look at electron builder's options I don't see an icon-option for linux at all.\nGuess you should rather post this issue there.\n. When I look at the latest https://github.com/electron-userland/electron-builder/wiki/Options I don't see any app-category. Seems like it's been dropped in favour of one category per build target.\n. See https://github.com/szwacz/electron-boilerplate/blob/master/src/app.js. \"seems to give electron\" what does that mean?\nWhat's the actual issue?. Hi,\nthanks for your issue. I don't see how this relates to the boilerplate. app.getPath() happens inside electron only.\nIt should be clear that the product name cannot contain all too fancy characters.. To me fancy are characters like :;/\\^$~+# etc. ;)\nFor the productName is used for paths you probably shouldn't use any characters that cause trouble in any of the OS's filesystems you target. \nI don't think fs-jetpack should bother either. It should be clear that you cannot use paths that your fs doesn't support.\nHowever, thanks for your efforts. :). @OwenBrotherwood path.join https://nodejs.org/api/path.html#path_path_join_paths. Quick answer: scripts will be bundled into app.js/background.js where you import them. They won't be copied 1:1 by default. If you need to have a separate file you'll have to add that to the task. Watch should keep everything in sync but I might be wrong. Guess you should just give it a try. Also note that the main/background source can't be kept in sync while the app is running ;). Now I have time for a longer answer.\nBy default all the scripts that you import/require in your code will be bundled either into app.js or into background.js. You should take a look at the created app/background.js - it's probably not the same as src/background.js.\nWhat I do if I really need to bypass the black magic is this:\nOpen tasks/build_app.js, add a new line to the bundle task, e. g.:\njavascript\ngulp.task('bundle', function () {\n    return Promise.all([\n        bundle(srcDir.path('background.js'), destDir.path('background.js')),\n        bundle(srcDir.path('app.js'), destDir.path('app.js')),\n        bundle(srcDir.path('settings.js'), destDir.path('settings.js')), // <<-- the new line\n    ]);\n});\n(As long as you don't have too many cycles this should be fine :D). @torakiki Do you think that this is something we should add to the REAMDE / wiki?. Thanks Schultzer. Hi,\nhave modified any of the build tasks?\nWhat are the exact steps you took? \nWhich OS are you on?\nBTW: I doubt this is valid HTML5. You're missing head/body tags. Please try to format the code properly (for us).. Have you checked the interwebs?. @yilunyu Be sure to actually save your dependencies $ npm install package-to-install --save :). Hi,\ndid you take at look at the build options?\nThe boilerplate builds upon electron-builder - you'll find your answers there ;). @rodrigok Why all those PRs?. @rodrigok Thanks ;). Hi @xinxiang \nyou should report this issue here: electron-builder\nWe use electron-builder for pretty much the whole build process.\nCheers. @tiptronic \nimport is the ES6-way of importing modules (see MDN) whereas require is the CommonJS-way of doing so.\nAlso see this.\nThere are many more explainations on the web.. You're welcome :). Guess I'll make a 1.5 and a 1.6 branch, then. So that it's ready when it's stable :)\n\nI made a 1.5 test branch that seems fine for now. Also updated other dependencies.\nRollup was the only one to mention breaking changes. Yet to be evaluated.. Seems like they have skipped 1.5 and are now on 1.6.1. Guess I'll drop my 1.5 branch then and do a 1.6.. PR filed here. @szwacz \nThere are a couple possible breaking changes for rollup, electron-builder and fs-jetpack.\nDo people actually update the boilerplate for existing projects? I do :)\n@szwacz Can we kick out rollup? Electron 1.6 ships with native imports and async/await which, I guess, collides with rollup or rather makes it obsolete. Also, without rollup there'd be no rease to have app+src directories, right?\nAh, wait. Native es6 modules haven't landed yet. Anyhow, I can't use async/await for rollup complaining about \"await\" being reserved.. You're welcome.\nGuess we can't drop rollup anytime soon.\nAnyway, I'm having another issue with rollup. I can't use async/await in my code. rollup complains that await is some kind of reserved keyword and won't process the sources. I haven't yet found a fix.\nTo reproduce, add this to your background.js and try to npm start the thing.\n```js\nasync function test(){\n  let b = await testP()\n  console.log(b)\n}\nfunction testP(){\n  return new Promise((resolve, reject) => {\n    window.setTimeout(() => resolve('ok'), 500)\n  })\n}\n// somewhere in the app-started body\ntest()\n``. @szwacz do you know whatacorn` is? I've already read the issue that you've posted but it rather confused me \ud83d\ude15 \nAlso I'm not sure we wanna use some undocumented features :S\n\nedit: alright, acorn is a js parser. @szwacz of course. @develar So the file ending is (technically) irrelevant?\nbtw, thanks for actively participating in this project :). We should upgrade to electron-builder@18.0.0 to have correct json5 support.. Not quite an answer to your question but why don't you just add a <script> tag? You need to pull in the CSS anyway, right? I like to keep things together so in my apps it's always like:\nhtml\n<link rel=\"stylesheet\" href=\"/path/to/bootstrap.min.css\" />\n<script src=\"/path/to/bootstrap.min.js\" />. I fully agree. IMHO electron apps are pretty huge already - I wonder how much bigger they gonna be with electron-compile.\nI'll give it a shot and report back.. Sadly I don't have had time for this. Closing this for now.. @tingletech Actually electron-builder supports building for different platforms. You can also build win installers on linux using wine. I guess our docs are just a little outdated.. Always a pleasure. I don't even get to install pouchdb on my windows machine xD\nNeed to install a lot of other stuff first - will report back when I had time for that. What's the second image supposed to show?. @fangxiang1 How did you solve it? Just so others can profit from your fix.. Thanks for sharing.. See https://github.com/electron-userland/electron-builder. @javeedrahman Hi :) \nHave you read https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build? What's the output when packaging? Guess (if at all) this is rather an electron-builder issue.. @develar what kind of modules?\n@javeedrahman Please file an issue @electron-builder and make sure you followed all the steps in the aforementioned link.. @javeedrahman what's the status?\nPlease close the issue if it's done.. This is rather an issue with electron-chromedriver or with node/npm itself. Please file an issue there.. You should file an issue at electron-chromedriver's repo. Have you tried npm i electron-chromedriver on a plain project?. Hi, thanks for participating in the boilerplate.\n\nI assume. src is main and app is render.\n\nNope. Renderer is whatever you include in a browser window and main is whatever you include in your main script (background.js in the boilerplate - package.json's main points to the file). You can even include the same file in renderer as well as in main. src contains stuff that needs to be transpiled. When building those transpiled things will be placed in app.\nCould you please provide you build config? Also this sounds like an issue w/ electron-builder.\nHow come /tmp/.mount_xyz/whatever is your userData path? Are you using docker or linux subsystem on windows or something like that?. Glad I could help. Please close the issue if it's resolved.\nHave a nice week!. appveyor failed due to not finding debug o\u00d3. Yeah, weird. Maybe we should take a look at that.. Hi\nWhy do you open another issue here?. We heavily rely on electron-builder thus we participate :)\nI'd just say better open an issue where it belongs (i. e. electron-builder).\nHowever, thanks for your feedback and for using this boilerplate.. Alright. I'm just gonna add another task for my project then.\nThanks for the read.. What packager are you using? Built-in electron-builder shouldn't pack dev deps.. There were some updates in electron-builder to address webpack stuff. Please update to the latest version.\nPlease close this issue if it's done.. Seems to be an issue with building weak.\nThis should fix your issue.\nNot an electron-boilerplate issue.. Current bundle.js has this:\njs\n//...\nconst result = bundle.generate({\n      format: 'cjs',\n      sourceMap: true,\n      sourceMapFile: jsFile,\n    });\n    // Wrap code in self invoking function so the constiables don't\n    // pollute the global namespace.\n    const isolatedCode = `(function () {${result.code}\\n}());`;\n    return Promise.all([\n      jetpack.writeAsync(dest, `${isolatedCode}\\n//# sourceMappingURL=${jsFile}.map`),\n      jetpack.writeAsync(`${dest}.map`, result.map.toString()),\n    ]);\n//...\nIf bundle.generate returns a Promise let's just wrap everything that follows generate into then.\njs\nreturn bundle.generate({\n    format: 'cjs',\n    sourceMap: true,\n    sourceMapFile: jsFile,\n  }).then(result => {\n    // Wrap code in self invoking function so the constiables don't\n    // pollute the global namespace.\n    const isolatedCode = `(function () {${result.code}\\n}());`;\n    return Promise.all([\n      jetpack.writeAsync(dest, `${isolatedCode}\\n//# sourceMappingURL=${jsFile}.map`),\n      jetpack.writeAsync(`${dest}.map`, result.map.toString()),\n    ]);\n})\nHaven't tested it, though.\nFeel free to file a PR when you figured it out.. Great :). Looks okay 'cept for the electron beta version. npm shouldn't update to a beta version but it recently did for me ... dunno if that's intended. If that's the case the caret (^) would update to 1.7.4 anyway.\nThere were quite some changes in electron-builder but no breaking ones so that should be okay.. If I remember it correctly npm and yarn both installed 1.7.4 beta when it's 1.6.x with caret. Dunno.\nAnyway, yes, I'd recommend setting it to latest stable. Also there's that one spot in the README where we mention the electron version (currently 1.6.6) - please update that, too ;)\nThanks a lot for your PR.. Glad to hear that. Please close the issue if it's resolved.. Hey, thanks for your PR!\nIf I remember this correctly the build did stop for me on error. By catching the exception it should continue. Maybe you should throw it again.\njs\n//...)\n.catch( e => {\n    console.error(e)\n    throw e\n}). I remember encountering this, too. Pretty annoying. Does your fix give the right line no.?. +1 from me then. Sounds like you edited a generated file within app that gets overriden from src.. What are you talking about? Please be specific.. Then don't include https://github.com/szwacz/electron-boilerplate/blob/master/src/helpers/external_links.js. @akhilsahu Is your issue resolved?. Hi and thanks for your report.\nIs minimatch installed?\nCan you find minimatch in the unpacked build output?\nCan you post your build configuration?. Do other dependencies work?\nPlease post your build config.. There's no minimatch in your dependencies ;). You seem to require minimatch somewhere. So yes, you'll have to add it to the deps.\nnpm i --save minimatch (add --only=production if required). Where's your call to ipcMain.on()? Is it inside app.ready?\nSeems like you import doesn't work. Please try with const {ipcMain} = require('electron'). How can ipcMain be in a DOM context? It's main thread only.\nIf you are in the renderer you'll have to use ipcRenderer https://electron.atom.io/docs/api/ipc-renderer/\nPlease post the whole thing.. What is the file that you pasted? $(document) this is probably jQuery, right? So it's renderer.\n\nI add HTML-content dynamically, with ipc I will found out with element I've clicked.\n\nWhere do you add html content to? Main has no window so it can't be main. Use ipcRenderer.. I fear you got that wrong. In an electron app you have one main process - that's the one process that's started when starting the application. That process is background-only. Each and every BrowserWindow you open is a new renderer process.\nipcMain can only be used in the main process.\nipcRenderer can only be used in renderers, i. e. BrowserWindow.\nAlso different ipcRenderer in different windows cannot talk to each other directly but the main process needs to act as a broker. You'll end up with a star schema with main in the center.\nSo when you have BrowserWindow A that opens BrowserWindow B and B needs to know stuff about A you'll have to pass stuff from A to main and from main to B.\nOr you save your stuff to the session and share the session - that should be possible, too, I guess.. You're welcome :). @varunkumar Hey there and thanks for the kind words.\nI think szwacz aims to keep this boilerplate minimal. There are many different eslint presets and I think it'd be wrong if this boilerplate softly enforces one specific preset. It shouldn't be hard for people to read about eslint and to chose and copy a .eslint file. That's a 5 minute job.\nAnyhow, @szwacz should give you a final answer ;)\n(I feel like it'd be nice to have some kind of meta cli package like artisan for laravel or like some other boilerplates do have. Checking out the boilerplate each time is a little cumbersome.). Hi there and thanks for your report.\nYou must be doing something else wrong, then. Have you edited the right file? I sometimes catch me editing files inside app that get overriden from src - quite a pitfall.. Are we talking about a window that's already open?. Hi & thanks for your report.\nPlease post your build config. This is rather an issue with electron-builder / a misconfiguraiton.. Hi and thanks for your report.\nI haven't yet tested the boilerplate with node 9 but that shouldn't be an issue for electron ships its own.\nWhich electron version was installed? (Have a look at the lock-file or the console output.)\nWhich Linux derivate do you use / X or wayland?. I'm having some issues with one of the dependencies - can't event npm install right now.\nI'd give node 8 a shot.. That's weird. But if you can't even run a bare electron when installed via npm this rather sounds like an electron or npm issue. Please open an issue there (and reference this issue). We'll leave it open until it's resolved.. So, anything new on this? Any links to share?\nI'd vote to close this issue as it ain't seem to be boilerplate-related.\nCheers. In background.js just remove the app.quit():\njs\napp.on(\"window-all-closed\", () => {\n  app.quit(); // <--\n});\nFor tray stuff please read the docs: https://electronjs.org/docs/api/tray. Have you checked the path to your icon is correct? ./resources/icons/trayicon.png\nP.S.: Use triple backticks () to wrap code blocks in markup.. sounds webpack-realted. Have you checked the react boilerplate? I'm pretty sure they have hot reloading in some kind of way. You could take a look at their code to see how it's done.. Maybe he's trying to ask whether it's possible to test other files, too? Or if you can test the same thing when the text is included from somewhere else or inserted dynamically?. Do we then have to add a new object to *webpack.base.config.js* for every file we have?. adding things manually is nasty, I wouldn't use it if it forced me to :|. I didn't touch this line. Why would we need gulp in that place? This should be callingelectron-builder'sbuild`, not gulp :)\n. 1.7.4 is still in beta. ",
    "JimmyBoh": "I've submitted a PR with a simple fix for the auto-restart when closing. It just sets a flag when it should not restart the watch task. The only question left is what happens when you forcefully stop the initial node process (hit Ctrl + C twice). Does it clean up the child processes correctly?\n. I will try it later today or tomorrow and definitely let you know!\n. So after removing tree-kill it seems to be doing better, but still not that great. One thing I did try was removing the reference to the node_modules folder from line 19 and then re-added it as necessary (line 38). I need to keep testing it, but maybe the watch task was just having a hard time keeping track of all the dependencies.\n. @szwacz Do you copy them exactly, or do you make any modifications? I'd like to try to upgrade to the latest release (and if it works I'll make a PR).\n. Looks like there is some issue with the first few lines of jasmine.js, it's trying to reference exports but it is not available. Any idea why this might be @szwacz? If I force it to think it is in the browser it seems to work fine (although my tests are very simple at the moment).\n. @szwacz Yep, that's exactly what I tried locally. Seeing as the files are included directly in the boilerplate (not pulled in via npm) that makes it much easier to change the source to work correctly.\n. @szwacz So it looks like I'm getting this error as well. I've tried commenting everything but it still appears. I'll try to dig in to what the issue actually is. Any other tips on debugging?\n. So I'm not sure exactly why, but I tried to move app.html and app.js down one level into a ui folder, which threw the whole thing off. But it seems to be working fine now!\n. @black-snow Yeah, I believe I updated the reference to app.js inside of build.js. I even put a whole bunch of debugger and console.log calls inside of the node_modules/rollup/dist/rollup.js to try and track it down. No luck. But maybe I never changed the reference to app.js, and that was the issue. Since I changed it back, I've got a working dev environment and was able to build a Windows installer on the first try. Thank you @szwacz!!\n. I was able to get debug working for the background process(just use the regular devtools for each render process). Check out my launch.json here.\n. @rohit-lakhanpal Do you know which version of the boilerplate you are using? The version I have was from late February 2016, and it looks like things have changed quite a bit (mine vs current). If it is different, then my launch.json might not do the trick. I have a new project idea that will use this boilerplate, so when I pull down the latest I will give it a shot.\n. I haven't tried yet. Hopefully this weekend I can finally get it set up and started!\n\n. I did see this on SO, so yeoman might be a good approach (with two repos, one for the boilerplate, another for the generator that spits out the boilerplate).\n. @leshow That's a really good idea, making a dedicate branch to being the unmodified boilerplate, then simply merging them when a new update comes out. Thanks for sharing! \n. Maybe this might work? https://github.com/addyosmani/generator-boilerplate\n. @OwenBrotherwood For now I am working on other projects, but I will return to my Electron apps later in the winter. I will be sure to let everyone know here how it goes!. ",
    "yailPeralta": "1 - Ok I think electron was made for web developers and it runs in chromium web browser so it has a lot of sense to use some technologies that we commonly use when development web applications. \n2 - is ok what you say, I think it is reasonable, but for instance the last version of v8 does not support classes, so Babel seems to be a great option to me.\nAnyway you have made a great work and i'm using your boilerplate in a project, thanks a lot!. \nBy the way, i have made a library for ajax requests if you want to contribute in the project improving the code or adding new features that would be great. https://github.com/yailPeralta/phyrus\nBest regards Yail.\nDate: Sun, 28 Jun 2015 12:10:08 -0700\nFrom: notifications@github.com\nTo: electron-boilerplate@noreply.github.com\nCC: yailpz@hotmail.com\nSubject: Re: [electron-boilerplate] Babel and Jspm (#13)\nHi Yali,\nOh god, where to start....\nThis project is about Electron, not about webstack. Technologies which make sense in the browser not necessarily make sense in Electorn.\nThis project wants to give people as small as possible starter pack, so they can easily grasp what Electron development is about and continuing with adding things they find useful.\nFrom things you have included only Babel might be something to consider incorporating here. The rest unnecessarily complicates things for newcomers.\nAbout Babel I'm also not 100% sure. In electron you care only about latest version of V8, which already have a lot of ES6 features.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes that's right. You're welcome! \ud83d\ude0a\nDate: Sun, 28 Jun 2015 13:25:20 -0700\nFrom: notifications@github.com\nTo: electron-boilerplate@noreply.github.com\nCC: yailpz@hotmail.com\nSubject: Re: [electron-boilerplate] Babel and Jspm (#13)\nThe good old saying states that If you want to please everyone you probably won't please a single person. That's why I want to add to this repo as little tools as possible.\nBut there is a good reason to support ES6 features, which will be standard within a year anyway. That's why I said adding Babel might actually have sense. If more people requests that I see no problem to add it here.\nThanks for a good word about electron-boilerplate, and keep up your good work.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "loveencounterflow": "Might be related to https://github.com/mafintosh/electron-prebuilt/issues/44\n. There's now additional information over at https://github.com/mafintosh/electron-prebuilt/issues/44 with some lines of bash to reproduce the issue; put shortly, it would appear that the Electron.app that comes with electron-prebuilt for OSX has a problem while the one that can be downladed from https://github.com/atom/electron/releases works. Also, the test runs on Linux, but fails on OSX, meaning the sample app is viable.\n. ",
    "leshow": "I understand, it's due to actionscript's externalinterface for executing javascript code and this is the only option I've got.\nThank you for your time, quick follow up question, with the esperanto gulp task can you write full es6 syntax in your app/*.js files? I had an arrow function in app.js that failed to build. is esperanto only for es6 modules?\n. yes, i do\nfs-jetpack@0.9.0\nif I go back to commit ef82d5d55064d0a089c5bdd9bdb50723afa240c9 it works\ni should note the path now appears to be slightly better,\nimport \"./frontend/lib\\asInterface.spec.js\"\nnote the backward slash. perhaps the change in generate specs import did it.\n. I do have that line, yes. However it the last \\ in deep folders doesn't get replaced (my folder structure has another nested dir on top of yours)\nreplacing that line with this:\nreturn 'import \"./' + path.split('\\\\').join('/') + '\";';\nhowever, works.\n. I have pasted a path in the post where I commended on the jetpack version.\nimport \"./frontend/lib\\asInterface.spec.js\"\nis an example of one of my paths in the spec.autogenerated.js before I made the aforementioned change.\n. thanks\n. I've got a fairly large project based off of this boilerplate personally I think you're better off with cloning and then deleting the files you don't need, along with maintaining a branch that is the upstream version of this boilerplate so you can merge back in any changes.\nI have been keeping my project up to date with this boilerplate for over a year, and that process works very well.\n. this issue also breaks any tests that rely on app.getAppPath(), I worked around it by explicitly calling setPath in my beforeEach() \n. I test the app path because it's set dynamically from a config file in my application\nAlso if you have any functionality that reads/writes files to the app path, it's nice to have it covered by tests.\n. @scotttrinh Maybe, I hadn't really thought of that. I have a filesystem interface that reads/writes keys to a config.json in the app dir, my tests check that the interface works correctly. In previous versions (before electron-mocha) the app path would be set automatically to 'appname-test', so all of the tests worked properly and were contained in that tests dir.\n. that was it, thanks\n. ",
    "LeMoussel": "Oups, D\u00e9sol\u00e9 \nI am confused because I forgot paragraph \"Special precautions for Windows\"\nIt's OK \n. ",
    "jsumners": "Looks like gulp 4 could be released soon -- https://github.com/gulpjs/gulp/issues/1302\n. No problem, just some low hanging fruit. The feature isn't very well documented, in my opinion.\n. ",
    "tkdave": "I just added PR #147 for BrowserSync support.\n. To give credit where it's due, much of this was inspired by the example here:\nhttps://github.com/papaeye/electron-browser-sync-example\n. I will take one more pass at code organization later today, and you can merge at your leisure. This is all working great for me in my app.\n. @gbaumgart, I don't fully understand your followup comment about a real web server. What do you mean by 'pass the electron instance along as max'?\nTo your original point, BrowserSync is far from useless. If it were just reloading the page, I might understand your sentiment, but this is a huge productivity boost, especially when working on CSS.\nI also disagree about the inclusion of gulp-watch and less. I evaluated a variety of electron boilerplates, and this one really hit the sweet spot of providing essential build and packaging tools while remaining fairly agnostic about JavaScript framework choice. I also found it quite customizable. In my case, I replaced less with sass, and the switch was painless. The only other thing I was really missing was BrowserSync, so I added it. Then, as I noticed people asking for this feature (2 of the 6 open issues are requests for LiveReload functionality), I spent part of my Saturday cleaning up my changes and submitting this pull request.\nI'm sure there is room on github for a lighter, slimmed-down version of this boilerplate that doesn't include so many gulp plugins. Maybe you should make one. I'd be happy to review it for you.\n. browser-sync is a rather heavy dependency. We could make it optional or even leave it out of the package.json.  If dependency is met, we init the browser-sync stuff. Otherwise, we just continue without it and leave a line in the log...\nNote: BrowserSync is available. \"npm install browser-sync\" to enable it.\nThoughts?\n. I know this is unconventional, but it was the only way I could figure out how to get it to fail gracefully, because, for some reason, the callback IS being called regardless of an error being thrown. So, I am catching it below and storing the message in an in-scope 'err' variable to output it to the log before we continue (albeit without browserSync running). Try changing the port to 358299999. You will see an error message. BrowserSync will not start. But, the app will start anyway.\n. I originally had everything in start.js, but it seemed a bit clunky. I leaned toward moving things to a separate file (in this case the existing utils.js). If you don't mind a bunch more code in start.js, I'm happy to move those functions there and simplify a bit.\n. The idea here is to only load those libs if we are using them.\n. ",
    "f15gdsy": "Thanks for your reply!\n. ",
    "eisenkolb": "Yep, yep, :wink: \n. ",
    "quadrophobiac": "Thank you so much for the quick reply! I tried to reply last night but I was too bleary eyed to formulate the right response.\nI think I've understood this correctly: in your code you've used script tags with self-executing anonymous functions - is the reason such functions aren't loaded by requirejs is because there isn't a need to be able to invoke those methods continuously through the lifetime of an app (i.e. that they are one shot lines of code)\nI have a follow up question:\n1. your example app.js file demonstrates that both UMD (the files in hello_world directory) and node native modules. I followed the exact CommonJS pattern you used to describe the window_state module (in vendor/electron_boilerplate) to write a module and found that I could also load that within app.js. As you did in window_state.js I included some electron modules via node require() invocation.\nQ: My question with respect to the above is whether this sort of nested (or cascading?) module invocation is a good or bad idea? If I read this summary correctly\n\nTo get things started you need to call require. The first parameter is an array of dependent modules that will be referenced as arguments to your callback function.\njavascript\nrequire([\u2018jQuery\u2019, \u2018application\u2019], function($, application) {\n  $(function () {\n   application.init();\n  });\n})\nsauce here\nIn the sample above, if an application module has any dependencies, those dependencies will be loaded as well.\n\nThen the way app.js is structured means that all the requires and imports therein are loaded in the correct order\nThanks again in advance!\n. ",
    "jonatasfreitasv": "I fix it in my pull request #33 ;).\n. Hi man,\nI'll close this pull request and create others pull requests per thing and with their considerations.\nThx a lot for your attention.\n. You can run tests to OSX and Linux, but the unit tests by Jasmine can be processed perfectly regardless of operating system.\nI will send a Pull Request with unit testing being done with the Karma + Jasmine + PhantomJS, we will be able to run the unit test with more detail and with Trevis-CI.\n. Electron run js front-end codes in Chromium, is a browser, for Nodejs back-end codes the tests is browser independent, or am I wrong ?\n. Nice ! thx ;)\n. You run npm install in project root folder ?\n. Or re-run npm install appdmg in root folder...\n. ",
    "FlipOneDev": "@iiiich - Windows uses the backslash \"\\\", not the forward-slash \"/\". So try to edit the PATH System Environment Variable by manually ADDING \"C:\\Program Files (x86)\\NSIS\" (without the quotes) to the end of the PATH environment variable. Then save it.\nIf you're using a command line instance, close it and then open a new one so that the change you made to your PATH environment variable is used.\n. ",
    "fabdelgado": "@iiiich my patch works this way:\n%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs;C:\\Program Files (x86)\\NSIS;\nAfter config reboot system\n. @black-snow Thanks\n. ",
    "bosonogi": "Since the boilerplate doesn't use bower, what I did was put the bower.json inside the app folder and execute bower commands there (there is a separate app-specific package.json there anyway). Worked out fine.\n. ",
    "subutux": "That's one way of doing it, but I like keeping my workflow organized. I already execute npm from the main folder, why not bower? For a novice, this could be confusing. (as by me). Only by looking at the source of tasks/build.js I saw that it looked for the bower_components folder in the app directory. This simple file makes my life easier.\nJust a thought to help others out.\n. ",
    "tkambler": ":+1: I'll get back to you.\n. This PR is mainly intended for \"power\" users (excuse the term) who know how to go out and download the desired runtime and save it to a separate location on their own. That's the use case I had in mind, at least.\n. Do \"power\" users need task runners or linters? I think so. If you took my reference to \"power\" users as a condescending term, that was not my intent. It was merely meant as a convenient reference to users who know what specific runtime they want.\nUse case:\n- Dev gets started with Electron\n- Dev creates app using electron-boilerplate - it conveniently wraps up everything that's needed, why not?\n- Dev compiles app into OS X / Windows releases. Hurrah.\n- Dev realizes that by electron-boilerplate's use of electron-download has locked him into a specific architecture for Windows (x64). Dev needs to be able to compile for x32, as well.\nThis PR accommodates that need in a simple and unobtrusive fashion. In no way does it change the default user experience. Do you have a more optimal solution? If so, please share.\n. Works for me. Thanks :+1: \n. ",
    "rubencodes": "For future reference: I'm on a 32-bit Windows build and still had issues getting a 32-bit binary despite using 32-bit node. Had to follow these instructions and set the SET npm_config_arch=ia32 flag.\n. ",
    "destan": "Ok, figured it out. Need to exclude from js-transpiler in tasks/build.js\nvar paths = {\n    jsCodeToTranspile: [\n        'app/**/*.js',\n        '!app/main.js',\n        '!app/spec.js',\n        '!app/node_modules/**',\n        '!app/vendor/**',\n        '!app/anyfolder/**'\n    ],\n    copyFromAppDir: [\n        './main.js',\n        './spec.js',\n        './node_modules/**',\n        './vendor/**',\n        './**/*.html',\n        './anyfolder/**'\n    ],\n}\nyou may want to document this somewhere.\n. @szwacz so you suggest me using ES6 syntax in backend/main.js as well? \n. > BTW may I ask what type of logic you are adding to main process?\nSure, I'd appreciate any suggestions. Suppose the desktop app uses a database, ORM, executes some business logic on user input before inserting them into db meanwhile makes external service calls etc. \nSuch logic shouldn't be in front-end scripts in my opinion. That's why I am trying to modularize those in separate files and import into main.js.\nTo clarify a usage example:\n1. User clicks a button on a browserWindow\n2. Some information is send to Main Process from Renderer Process\n3. In Main Process, incoming information is processed/used by business logic and persisted or send out via external service calls.\nI think the codes on 3rd step should be on separate modules and be used on Main Process.\n. Thanks @szwacz really appreciate your comments. I am coming from Java and Qt mindset hence my pov might be quite different than nodejs community's.\n\nThere is nothing you can't do in window context (AFAIK) \n\nwell, there are some edge cases like clipboard manipulation. I've read that you need to do clipboard related stuff on main process due to some technical limitations.\nMoreover, my app consists of multiple windows. Some of them are triggered via global shortcuts and some of them via system tray.\nWindows share logic, validation, and persistence code so putting those codes to browser scripts seems to end up in code duplication and eventually spaghetti code.\nThat's why I try to duplicate Qt style structure where views (browser windows) are just views to collect user input and show user some info and all logic is executed by other classes (scripts on main process).\nIMHO, being able to do anything in the browser windows doesn't necessarily mean that we should and we are better construct a layered architecture somehow.\nWell, we will see if it works or cause more problems.\n. :+1:  After some spell checking I think this should go into the repo\n. ",
    "antoinepairet": "@szwacz Thanks for your quick reply.\nI am not sure what you mean with practical implications. But I will explain the use case more clearly. Imagine you already have a web application accessible from any browser. You want to extend this webapp into a desktop app. The extended version will be able to access the filesystem and communicate with devices connected to the desktop (USB, etc.).\nIn that use case, you want 2 things:\n1. disable node-integration for the BrowserWindow and all scripts loaded by the webapp which is pure browser\n2. preload a script with the desktop features. This script needs node-integration \n(web-preferences from electron 0.32.2 API)\njs\nmainWindow = new BrowserWindow({\n    loadUrl: 'https://mySuperWebApp.com'\n    'web-preferences': {\n        'node-integration': false,\n        preload: 'desktopAppExtension.js'\n    }\n})\nThe desktopAppExtenion will be loaded before any other script in the renderer process. You can define globals on the window object that will be used by the webapp.\nI understand you want to keep things simple. If you prefer not to merge this PR, would you merge a documentation PR with the above comments?\nkind regards\n. I have tested it and it works well :-). I have used this pattern often without problem.\n. ",
    "gamedevsam": "Nevermind, I noticed that the release command does that already.\n. ",
    "tysenmoore-xse": "I have spent a few days on this problem and after sending you this posting I may have found the problem.  I was hoping you could possibly help me with the reason why it fails to execute the code.\nI read through some of your closed issues and saw mention of the ./tasks/build.js jsCodeToTranspile and copyFromAppDir.  I realized the new modules were being transpiled.  So I added the files ('./require_config.js',  './js/myapp.js',  './bootstrap.js') to the copyFromAppDir and was presented with the expected output:\n[1530:0917/174440:INFO:CONSOLE(1)] \"REQUIRE_CONFIG.JS-------------2.1.20\", source: file:///home/swdev/projects/build/require_config.js (1)\n[1530:0917/174440:INFO:CONSOLE(1)] \"BOOTSTRAP.JS1-------------\", source: file:///home/swdev/projects/build/bootstrap.js (1)\n[1530:0917/174440:INFO:CONSOLE(1)] \"MYAPP.JS-------------\", source: file:///home/swdev/projects/build/js/myapp.js (1)\n[1530:0917/174440:INFO:CONSOLE(4)] \"MYAPP.JS+++++++++++++\", source: file:///home/swdev/projects/build/js/myapp.js (4)\n[1530:0917/174440:INFO:CONSOLE(4)] \"BOOTSTRAP.JS2+++++++++++++\", source: file:///home/swdev/projects/build/bootstrap.js (4)\nThe problem was the failure was silent and gave no indication of a real failure, the code just did not execute.  Does this make sense to you that the requirejs files must not be transpiled?  Moving forward must all my requirejs modules avoid transpiling?  Any advice would be welcome.\n. Thanks for the fast response.  I do grasp the concept of the boilerplate.  I am using it to start writing my application.  My lack of understanding was how to further integrate and use requirejs within your design.  I am completely new to web application concepts (embedded programmer by trade)--I apologize for my ignorance.  I do appreciate the further clarification on the transpilation.  I think I better understand your intent and how I need to model my JS modules.  I will modify my sample code to be more ES6 compliant.  I appreciate your time and the time taken to develop and support the boilerplate.\n. Thanks so much.  There was a difference in the permissions.  The strange thing was deleting and recreating the directory did not help.  I have modified my setup to work around the problem by using the npm install phase to copy only the necessary files.  Thanks so much for the time and help.\n. Thanks for the suggestion!  I was struggling to have a better workflow to debug this problem.  For anyone interested, I found I had to change the packageBuiltApp to copy my build source, otherwise I had no source.  If I also comment our the cleanupRuntime wasn't getting the complete app.  My change was:\nvar packageBuiltApp = function () {\n    return projectDir.copyAsync(projectDir.path('build'), readyAppDir.path('resources/default_app'), { overwrite: true });\n};\nWhen I avoided the asar I got the same results.  Now that I had source to more easily debug, instead of being in the asar, I think I found the problem.  I had a hunch that the terminal was the important factor since it worked no matter what with the terminal.  So I commented out the console.log from my cluster code it worked fine.  The cluster stayed alive.  It seems odd considering many cluster examples contain console.log messages--even the example on the node documentation.\nThanks so much for the support!\nIn case anyone cares,  I added this to the app.js:  (NOTE: the cluster.setupMaster was important for electron builds)\n```\nvar cluster = require('cluster');\nvar path = require('path');\nvar sdkWorker = null;\nconsole.log(\"startSdkWorker\");\n// MUST use the setupMaster otherwise the default electron \n// environment is used and will fail with:\n// ../node_modules/electron-prebuilt/dist/electron: bad option: --type=renderer\n// ...\ncluster.setupMaster({\n  exec: path.join(__dirname, \"sdk_worker.js\"),\n  //args: ['--use', 'https'],\n  silent: false\n});\nsdkWorker = cluster.fork({});\ncluster.on('fork', function(worker) {\n    console.log('WORKER: forked: ' + worker.process.pid);\n});\ncluster.on('online', function(worker) {\n    console.log('WORKER: ' + worker.process.pid + ' is online');\n});\ncluster.on('exit', function(worker, code, signal) {\nvar suicide = \"\";\nif (worker.suicide === true) {\n    suicide = \" [SUICIDE] \";\n}\n\nconsole.log('EXIT: WORKER: '+suicide+ worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);\nsdkWorker = null;\n//console.log('Starting a new worker');\n//this.sdkWorker = cluster.fork();\n\n});\nsdkWorker.on( 'message', function( msg ) {\n    console.log(\"FROM SDK: \"+msg.cmdId);\n    } );\n// Init the lib and SDK platform\nsdkWorker.send( {cmdId:\"init\"} );\n// Do an initial enumeration of USB looking for the analyzer\nsdkWorker.send( {cmdId:\"enumUsb\"} );\n// Start the contant polling of the SDK\nsdkWorker.send( {cmdId:\"startPoll\"} );\n```\nThe sdk_worker.js was simply:\n// Cluster support\nprocess.on('message', function(msg) {\n    //console.log(\"FROM MASTER: \"+msg.cmdId);\n});\nWith the console.log commented out it now goes online and does not follow with an exit.\n. Would be useful to obfuscate your code.\n. I started development pre-1.0.0 and have tried to keep as up to date with changes as possible.  I also have the latest versions of all the npm packages.\nAfter your question I did go back and try to reproduce the problem with 3.0.0 and 1.0.0 and had no success.  It seems this is something pre-1.0.0 or something I've introduced.  I will have to go through the install task in greater detail to figure this one out.  If anyone has any ideas as to why this would be a problem I'd appreciate any input.  In the meantime I will close the issue, if I figure out the problem I will post the solution for others.\n. I'm not sure of this is the same problem but using the 1.3.0+ of the electron-prebuilt will trigger this problem.  v49 of the ABI is not even available publicly at this point.  They are aware of the problem. \n. ",
    "idleberg": "Well, you're right. I guess it's highly unlikely to happen, though still possible through command-line\n. @blackfyre You can use this command to convert ANSI files to Unicode, but since language files have to be included on compile time, that's of no help. You should either provide ANSI encoded languages files or compile your script using NSIS 3.0 (beta).\n. Great, thanks\n. @szwacz You need elevated rights once you try writing to $PROGRAMFILES, which the installer currently does\nTwo quotes from the RequestExecutionLevel documentation:\n\nWindows Vista/7 automatically identifies NSIS installers and decides administrator privileges are required. Because of this, none and admin have virtually the same effect.\n\nThis is what probably happens with current installers, that don't set RequestExecutionLevel at all. However, Microsoft recommends its declaration:\n\nIt's recommended, at least by Microsoft, that every application will be marked with the required execution level. Unmarked installers are subject to compatibility mode. Workarounds of this mode include automatically moving any shortcuts created in the user's start menu to all users' start menu. Installers that need not install anything into system folders or write to the local machine registry (HKLM) should specify user execution level.\n. \n",
    "paperscissors": "I get this error as well, on 10.10.5. I don't actually get a successful build in releases, however. The directory is empty.\nTried re-running npm install and npm install appdmg and I get:\n```\nelectron-boilerplate user$ npm install\nnpm WARN package.json @ No repository field.\nnpm WARN package.json @ No license field.\n\nfs-xattr@0.1.11 install ../electron-boilerplate/node_modules/appdmg/node_modules/fs-xattr\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/xattr/src/error.o\n  CXX(target) Release/obj.target/xattr/src/xattr.o\n  SOLINK_MODULE(target) Release/xattr.node\nld: library not found for -lgcc_s.10.5\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [Release/xattr.node] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:110:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\ngyp ERR! System Darwin 14.5.0\ngyp ERR! command \"node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd ../electron-boilerplate/node_modules/appdmg/node_modules/fs-xattr\ngyp ERR! node -v v0.12.7\ngyp ERR! node-gyp -v v2.0.2\ngyp ERR! not ok \n\nmacos-alias@0.2.9 install ../electron-boilerplate/node_modules/appdmg/node_modules/ds-store/node_modules/macos-alias\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/volume/src/volume.o\n  SOLINK_MODULE(target) Release/volume.node\nld: library not found for -lgcc_s.10.5\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [Release/volume.node] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:110:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\ngyp ERR! System Darwin 14.5.0\ngyp ERR! command \"node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd ../electron-boilerplate/node_modules/appdmg/node_modules/ds-store/node_modules/macos-alias\ngyp ERR! node -v v0.12.7\ngyp ERR! node-gyp -v v2.0.2\ngyp ERR! not ok \nnpm WARN optional dep failed, continuing appdmg@0.3.5\n\n@ postinstall ../electron-boilerplate\nnode ./tasks/app_npm_install\n\nnpm WARN package.json electron-boilerplate@0.1.0 No repository field.\nnpm WARN package.json electron-boilerplate@0.1.0 No README data\nnpm WARN package.json electron-boilerplate@0.1.0 No license field.\n```\nSame thing if I try npm install appdmg.\nnpm version\n{ npm: '2.14.1',\n  http_parser: '2.3',\n  modules: '14',\n  node: '0.12.7',\n  openssl: '1.0.1p',\n  uv: '1.6.1',\n  v8: '3.28.71.19',\n  zlib: '1.2.8' }\n. Will do, thanks!\n. ",
    "intellent": "Ok, seems to be a Gulp problem related to Windows. If I manually set the path in node_modules\\gulp\\bin\\gulp.js:119, it works fine.\nWill check, if there\u2019s a corresponding issue at the Gulp repo. Can be closed, I guess.\n. ",
    "elmehalawi": "24606 files. Yes, I think I may have found the problem.\n. Most of the files seem to be in node_modules. Is this an abnormal number of files? It seems like it, but I'm new to node.\n. Of course:\n{\n  \"name\": \"Analyzer\",\n  \"productName\": \"Analyzer\",\n  \"identifier\": \"\",\n  \"description\": \"\",\n  \"version\": \"0.1.0\",\n  \"author\": \"Hassan\",\n  \"main\": \"background.js\",\n  \"config\": {\n    \"target\": \"development\"\n  },\n  \"dependencies\": {\n    \"fs-jetpack\": \"^0.7.0\",\n    \"jquery\": \"1.11.3\",\n    \"semantic-ui\": \"2.1\"\n  }\n}\nBasically, it's just the jetpack dependency plus the two new ones I added. Thanks for your help.\n. Yes I think that might work. Also, I can download smaller parts of it separately, they have that option, and now I know why. I didn't realize it was that bad.\nI will definitely try to install it to development only, thank you for your help!\n. Okay, what I did was edited tasks/build.js to move the folder called \"semantic\" (which has the installed semantic files in it):\nvar paths = {\n    copyFromAppDir: [\n        './node_modules/**',\n        './vendor/**',\n        './**/*.html',\n        './semantic/**'\n    ],\n}\nThis allowed me to be able to remove semantic as a dependency in my app/package.json file, making the gulp build process much quicker, because it didn't have to move over semantic's dependencies, which seem to only be necessary to build semantic, not actually use it. Thanks again for you help!\n. ",
    "sergiuwd": "Hi! I've opened the issue from my mobile phone, and I was in a rush, so I could not be more specific.\nHere is my code:\n\ntoSync.forEach(function(elem) {\n  connection.query('select * from emenu.' + elem + ';', function(err, results, fields) {\n    if (err) {\n      error = true;\n      showStatus('error', 'Eroare la preluarea tabelei ' + elem + ': ' + err);\n    } else {\n      fs.writeFile('db/' + elem + '.json', JSON.stringify(results), function(err) {\n        if (err) {\n          error = true;\n          showStatus('error', 'Tabela ' + elem + ' nu a putut fi sincronizata ' + err);\n        } else {\n          showStatus('success', 'Tabela ' + elem + ' a fost sincronizata!');\n        }\n      });\n    }\n  });\n});\n\nI am using fs.writeFile to write the files. What am I doing wrong?\n. Hi, Jakub! You're right, it's not a CSS issue. But what can I do to speed up the process so it won't display that white flash?\nI tried to at least set the window's background to another color, using   inside background.js, but it didn't work either.\n. ",
    "tx4x": "awesome! thanks for the pointer!\n. ups, sorry was not meant for you.\n. sure, works fine on local. it seems that the copy task in build.js never returns\n. yeah definitely gulp got stuck and the copy tasks never finishes (has all defaults). Not sure its gulp or fs-jetpack (seems buggy too).\n. removing the copy task in build made it work. No idea, i will just replace the fs-jetpack copyAsync function with something else. I gonna close this now.\n. sure, \ni do return now a new Q(); instead of the copyAsync result:\n```\nvar copyTask = function () {\n    projectDir.copyAsync('app', destDir.path(), {\n        overwrite: true,\n        matching: paths.copyFromAppDir\n    });\n    return Q();\n};\n```\nnow it works, fixes it for me. That's probably also not the best idea.. i know. \nthe result of projectDir.copyAsync is always {state:pending}, both remote and local. \nHowever, just to let you know. I am going to make my own template soon, but with grunt and much less of the boiler stuff. \nthank you!\n. I reopen the issue because gulp/fs-jetpack is really lunatic, unpredictable. Sometimes things work, sometime it gets stuck (gulp clean) or it just doesn't give a damn. \nSo if you're interested to know your tool actually working in real world-scenarios (big apps!), please do a simple run  in windows (vmware) but on a samba folder(not shared folder!, linux). Also add at least 800MB of files to it (i extended release_windows to copy folders into tmp). \nI am now fighting since days with your tool to get all stable and it seems really tough job. I start hating Node.js more and more... \nHowever, the actual goal of mine is to create a kind of windows build-machine and avoid copying the source files at any cost (for some reasons). It has to work from a Samba drive. \nIf this is out of scope for you close it but I can tell you, your tool is definitely not stable when it comes to smb-drives(!) Also, if you think it works, restart the vmware, and try again. Results may differ. Run it at least 5 times.\nAnd yes, I took care about the right permissions, correct installation,... ;-)\nthanks\n. hi,\njust to let you know regarding fs-jetpack trouble: i moved today my heavy copy-tasks out of the boiler-plate, over to grunt-copy tasks and surprisingly I have no more random 4048/4049 (permission/unknown errors through dir.copyAsync) or memory allocation crashes (came with big files). Those crashes came as said on a network drive (running from windows on a ubuntu-smb drive). Well, just saying. I am writing this after now 4 weeks intensive use. \nYou can close this here (moved now also to my own template). \n. make sure it's not an anonymous connection to your SMB server. I am using \"Bitvise SSH Server\" for windows which allows you to setup a network drive together with the login. since then I've no problems anymore but I also moved to grunt for the copy tasks.\n. yes, and I got it working so far. I've got too much files (1000+ in PHP/JS and what not). Of course I'd like to do the \"npm start\" against my files without copying them around. Especially doing new electron-code: I'd like to play with from different operating systems from within the temp-Folder (almost live version) with npm release --debug or similar.\nAnyway, very possible this is out of scope for you but if people trying to do similar (which more likely to happen), it can take days to get it there. Btw, today fs-jetpack did just fine today, really weird (maybe its indeed a samba/vm problem only).\nthanks,\n. yeah Ronald, are you ok? Nobody blamed anyone. Normalerweise, wenn Du nix vernuenftiges beizutragen hast, einfach Fresse halten! Aus Deiner kommt nur Muell und offensichtlich fehlts Dir nicht nur an Erfahrung, ne: Null Fantasi. Jesus\n. Hi,\nregarding git ping-pong: yeah, thats what i meant; it just consumes a hell of time and is pretty much error-prone, at least with that 20+ git sub-modules I have. \nHowever, if you implement all the points in my initial post, you'll have it working on a SMB drive, no more duplicated folders /installations. I am pretty happy now with and it works from within all OS (mac/windows).\nexperience:\n- don't use Virtual-Machine Shared Folders. it will fail copying (gulp release) the underlying node_modules folder (somewhere in fs-jetpack/node_modules/.bin). No idea why. I use the regular Samba on Ubuntu; just open the permissions max. as possible. You can adjust SAMBA with webmin pretty easy. I can't remember but I changed something about locks.\n- You can fully automate the gulp release task from Ubuntu on Windows by setting up a SSH server in the windows-box with Bitvise-SSH server and some more grunt tasks (ssh) on your project. Takes a little time fiddling but it worth every penny. I added also some quick & general tests via grunt to check that the build is actually working.  \nThen about assets: Symlinks wont work on a SMB drive anyways nicely. I would need also too many of them and I have bad experience with them.\n. It's too rare, happens once in week or so (we use the app daily). Another thing I noticed that sometimes - same rare - when you close the app but it's still in background but for that will post another issue. I feel that both issues are somehow related but I am not sure. Sorry, it's all i got now. I think simplest is to check for valid json before writing it out.\n. great, that's awesome support, as always. \nthanks again.\nps: you can close this\n. there is another little bug with the window-state: if you move the window on multi-monitors, and unplug the one which had the app as last, and then restart the app: the app will be started at coordinates which dont exists anymore (unplugged screen). I am aware this might be difficult to fix since there is not an easy way to determine and check actual hardware screens, I will investigate possible fixes now and let you know.\n. this seems legit, didn't test but it seems to check the positions: https://github.com/mawie81/electron-window-state/blob/master/index.js \nok, last link seems: dead-end. seems no way around than writing native module: https://github.com/thraaawn/winctl/\n. sounds good, just not sure about how to get the visible area at all. I was studying the electron docs up & down but i can't find anything related; or you've got a pointer already?\n. awesome, thanks Jacob. will do the testing straight away tom.\n. -1 for for adding more useless modules to the template \n. @szwacz @tkdave I mean, you only need to point to your real web-server with all the dev-stuff inside you need and pass the electron instance along as max. There is zero need to add another hundred deps for something which doesn't belong here anyway. Same goes actually for the gulp-watch and and gulp less btw. Its plain actually awful to strip that stuff off. If that would actually happen I'd be happy to contribute about real problems with this template. sorry, just saying. makes zero sense. \n. small template: yes, i am actually on it and I was actually thinking to send it as PR but I just realize how far this goes here out of scope here. \nBy web-server I mean: Usually when your project really worth it to package it with something like Electron, it means you've already developed it already outside of this template, on a web-server. And you usually have all the tools like browser-sync there but not in the export template. \nSo, as long you point this electron app to your project url, there is no need to repeat the same functionality inside the template. All you need to do is getting the \"Electron\" instance for Browser-Window, etc.. inside your actual project and then you go on with coding/testing. \nWhat you're are trying to do is, to abuse this export template into a full development stack, with all the neat stuff like CSS, JS post-processors, etc.. \nAt the end, we only want to write: \nelectron-template --appDir=... --configDir=... --url=.... start \nelectron-template --appDir=... --configDir=... --url=.... release\n....\nwell, never mind, go on as you like but I am just saying, such coding tools belong in your project, not here.\n. I use a lot requireg. In my fork of this electron-template I am pulling the electron binaries with that. So that I can build the binaries in virtual-machines on a network-drive. \nIn that you pull it via requireg('browser-sync'). Adding a script to install that optional stuff in global shouldn't be a problem, way better than the other way around.\ng\n. @szwacz, @tkdave\nyeah, don't bother, if you think its really needed in an exporter, do as you like. I gonna go on with my template. I had to kick all that bloat stuff out and also switch to grunt (better debugging and plugins). Maybe it could serve as template some day for this package here. May be you split the toy stuff from the actual thing one day.... lets see\n. problem is : that we are now forced by the node-js developers to update to node.js 4.4.7 which opens a set of new problems: no support for vs2012, etc...\ng\n. thanks Jakub, gonna try that. \n. closing, the authors of electron-builder don't seem to bother about how good software has to work.\n. ",
    "leslyarun": "tried that in bash, and working\n. Im also getting the same error on line 39 of installer.nsi in Windows 10\nInvalid command: Unicode\nError in script \"c:\\electron-boilerplate\\tmp\\installer.nsi\" on line 39 -- aborting creation process\n. ",
    "ggd543": "Thx, done\n. ",
    "will-stone": "Hi @szwacz, I know this is closed, but do you mind giving an example of sending a message from your edit menu to, say, the hello world script? I'm trying to map cmd-S to a save script and can't for life of me figure it out.\n. Finally, I figured it out. Here's the solution for anyone stumbling around like I was.\nIn edit_menu_template:\n```\nconst BrowserWindow = require('electron').BrowserWindow;\nexport var editMenuTemplate = {\n  label: 'Edit',\n  submenu: [\n    { label: \"Save\", accelerator: \"CmdOrCtrl+S\", selector: \"save:\", click: function() {\n      var focusedWindow = BrowserWindow.getFocusedWindow();\n      focusedWindow.webContents.send('file-save');\n    } },\n    { type: \"separator\" },\n    { label: \"Undo\", accelerator: \"CmdOrCtrl+Z\", selector: \"undo:\" },\n    { label: \"Redo\", accelerator: \"Shift+CmdOrCtrl+Z\", selector: \"redo:\" },\n    { type: \"separator\" },\n    { label: \"Cut\", accelerator: \"CmdOrCtrl+X\", selector: \"cut:\" },\n    { label: \"Copy\", accelerator: \"CmdOrCtrl+C\", selector: \"copy:\" },\n    { label: \"Paste\", accelerator: \"CmdOrCtrl+V\", selector: \"paste:\" },\n    { label: \"Select All\", accelerator: \"CmdOrCtrl+A\", selector: \"selectAll:\" }\n  ]\n};\n```\nThen in your main.js (or wherever):\n```\nconst ipcRenderer = require('electron').ipcRenderer;\nipcRenderer.on('file-save', function() {\n  console.log('save file!!!');\n});\n```\n. ",
    "waynebloss": "According to kinect2 issue 20, precompiled binaries are supported in kinect2 v0.1.1 which is the latest on npm right now.\n. Thanks!\n. ",
    "gbmhunter": "The app I am developing, NinjaCalc, uses this boilerplate along with React. I modified the gulp task to hunt down React .jsx files and compile them into standard .js files.\n```\n//! @brief      Performs ES6/ES7 -> ES5 transformations, as well as compiling .jsx (React components) files\n//!             into normal .js fils.\nvar compileWatchTask = function() {\n    console.log('compileWatchTask() called.');\n    return gulp.src(\n        // Can't seem to exclude a large directory, and then specifically include parts of it.\n        [\n            'app//*.jsx',\n            '!app/node_modules//*',\n        ],  \n    // This base variable preserves the directory structure within /src/ when it compiles\n    // it and copies it to build/\n    {base: './app'})\n    .pipe(sourceMaps.init()) //initialize source mapping\n    .pipe(print())\n    .pipe(gulpBabel()) //transpile\n    .pipe(sourceMaps.write(\".\")) //write source maps\n    .pipe(gulp.dest('build')); //pipe to the destination folder\n\n}\n```\nSee build.js for more insight into how this is done.\n. Thanks I will give that a go. I had saved it as a .bmp through GIMP.\n. ",
    "samhagman": "@gbmhunter Thank you for this I will definitely check out how that is working.  Also, cool app you are working on.  Also thanks again @szwacz for the awesome boilerplate.\n. ",
    "cristipufu": "If anyone else needs an example: https://github.com/cristipufu/electron-react-router-fluxxor-boilerplate/commit/eb4f4c750044d4038f289813e7f303165b9fab0f\n. ",
    "davidroman0O": "@cristipufu Your link is dead :'( \n@gbmhunter Your file is dead too :'( \nI'm search for this implementation about React into this boilerplate!\n. ",
    "lllama": "OK - just tried with a checkout of the latest head and release installs and runs fine. I also forgot that I'm actually using the Vue based version from https://github.com/bradstewart/electron-boilerplate-vue and that doesn't appear to be working, so I'll file this there. Feel free to close.\n. ",
    "youmnaHigagy": "I ran into this issue yesterday too, and removed the line of code you commented and yes it worked.\nHowever, today I installed  NSIS 3.0b2 instead of NSIS 2.46 that was installed on my machine and it worked just fine without commenting or removing anything.\n. ",
    "fourpixels": "Hi again,\nSorry for not being clear enough :)\nMy point was to introduce a way that the build procedure can be easily modified, like by passing some arguments. I know they are loaded instantly, but I still find some of the things rather helpful. I love using Bower and I think it's great in larger projects, but it's components should not reside in the app folder (in my opinion) because they have tons of stuff in them. It would be very convenient if I can easily get only the things I need and not all of the junk.\nMinimizing/uglifying is good not only for protection, but sometimes even for optimization and faster performance.\nAnyways, my main point is to at least provide a noop method that can be easily modified by others if they want to integrate some additional stuff, something like middleware. Because right now I must hack into build function and mess all the things around :)\n. ",
    "coskuntekin": "maybe this issue can help you. https://github.com/szwacz/electron-boilerplate/issues/28\n. ",
    "tlacaelelrl": "It is not a fresh clone, I am adding my app.\nHere is what I am doing:\nClone->install->start \"Works fine\" ->release \"Works fine\"\nHowever this is not the app I need so then\nRemove files from the app folder\nAdd my own files for the app\ndo start -> \"works\"\n->release I get nothing, no errors or anything that can lead me to a solution\nAlso after running release I have to start over from cloning as now \"npm start\" does not work either giving the \"Not a valid electron app\" error.\n. Ok, so I did further testing and it seems that the issue is that I deleted needed files but I am unsure which ones they are.\nI now just replaced the code in the app.js and app.html and the build worked however I would like to remove whatever is not needed from the app folder, do you have a list of the files that are absolutely needed?\nAlso after the installer is created I now ran into another issue.\nThe app has some binaries included which are required for it to fully function. Those binaries are inside the  asar file and I can execute them. What would be required for those not to be packed into the asar file?\n. I figured a way to include my binaries.\nI added a folder into the root of both electron-boilerplate and node_modules\\electron-prebuilt\\dist\nAll working now I would still like to know what can be removed from the default boiler template \n. ",
    "tyv": "JFYI I am going to use WIX with this boilerplate, because we need MSI as build result. And this is not supported in NSIS.\n. thanks for input!\nJFYI it is not all so simple with Squirrel\nhttps://github.com/Squirrel/Squirrel.Windows/issues/241\n\nif your app needs to install a device driver or be in Program Files, Squirrel won't work for you\n. @szwacz I need msi because admins distribute (I really don't know how exactly, think it is called Group policy) them for large companies and our product is required to support it, so it is not about drivers but about group deploy.\nAlso why I decide to do not try using Squirrel right now is an extra dependency without any benefit for our case as we don't need autoupdates.\n. and thanks to this PR and @santriseus we got working installer in one day.\nalso WIX is more powerful than NSIS out of the box I think, at least it propose to chose installation folder :) and has more styling options\n. sorry guys to bring a mess to party, but you probably want to write update to doc, because of atom/electron/issues#3871 so this sign right now may brake an app and bring some time to find out the reason. So for now, signing apps at 0.37.x can brake an app. \n\nI will suggest PR to doc now\n. windows 7, 32bit\nboilerplate is https://github.com/szwacz/electron-boilerplate/commit/4e1333bb2e79fd18476742e7f658a2519e5fa7bc\nNSIS is 3.0b3\nI will try to merge boilerplate master to my repo and then update you with comment. \nAbout rcedit, I have same string in config. Will check whats happening there.\n. ok, will do.\none more important thing is I've had to update to \"electron-prebuilt\": \"^0.37.2\"\n. @carlosperate huh, good point. will check this too.\n. Answer: atom/node-rcedit#12\n. you can sign app and don't want it to be in MAS\n. btw there is already abstracted npm module for signing app: https://www.npmjs.com/package/electron-osx-sign\ncan be used like https://github.com/ubergrape/grape-electron/blob/master/tasks/release/osx.js#L96\n. ",
    "kof": "@santriseus maybe it makes sense to publish electron-boilerplate-msi as a separate project?\n. or @szwacz merge it and remove NSIS, so you have only WIX to support\n. @szwacz wix supports msi, NSIS does not. Also WIX is a way more mature solution and supports a huge amount of options. It is clearly a  better option over NSIS, you would need to support WIX only. If you need help, we have a fully functional repository. https://github.com/ubergrape/grape-electron\n. ",
    "santriseus": "I`m agree with @szwarc about the slim boilerplate structure. Sorry for my silence.\nAlso now we have https://github.com/electron/windows-installer\nIt utilizes the power of Squirrel, which actually utilizes the WiX and allows to build .msi installers.\n. ",
    "msg-q": "I tried one more variation and this seems to be working --- not sure if it is cross platform supported:\nmainWindow = new BrowserWindow({width: width, height: height, icon: __dirname + \"/favicon-96x96.png\", title: \"test application\"});\n. ",
    "sviterok": "Not exactly.\nIt only changes the place where installer puts a shortcut file (*.lnk). App was already accessible for all users, because nothing really blocks you from going directly to app's folder in \"Program Files\" =)\n. Thanks! Yes, no problem. Honestly, I've just completely forgot about that \"author\" field.\n. Well, It seams like that the only problem with \"author\" field approach is the structure of that field.\nAccording to specs here and here it could be an object with \"name\" field inside or it might be a string with optional email in angle brackets and URL in parentheses.\nI guess I should use \"author.name\" if it's available, or parse \"author\" string to get that \"clean\" name (using simple regex to remove email and URL from it)\n. @szwacz Check this out. I just removed an email from the default \"author\" value in \"package.json\" and also added optional handling for scenario when developer has an object in that field (e.g. {\"name\": \"Mr Gumby\", \"email\": \"gumby@sillywalks.com\", ...})\n. ",
    "qlaffont": "Hi,\nHave you insert in Path NSIS Installation Directory ?\n\"http://www.computerhope.com/issues/ch000549.htm\" \nIf yes please run in command prompt \"echo %PATH%\" report back all the output.\nBest Regards\nQL.\n. I comment everything and same error ..\n. Work and same error.(with comment or not)\n. I erase the project and I create another project, If I have a problem I post a ticket.Thanks for all. QL.\n. ",
    "gimox": "go to /tasks/build/build.js\nand comment line 51\nbundle(srcDir.path('app.js'), destDir.path('app.js')),\nit must work now.\n. ",
    "baerrach": "I had this problem when my file for entry didn't exist.\n. ",
    "dupski": "This is a terrible error message for a simple (and I imagine fairly common) config error - I get this when my entry config value points to a non-existent file.\n. ",
    "dmr": "Same problem here: I just did npm install, nothing special.\nnpm start throws that error.\nelectron 0.4.1 on OSX 10.11.3\n. Oh, you are right. 0.36.7.\nI was confused by a npm package called \"electron\" with is something different ^^.\nnpm -v\n3.7.1\nnode -v \nv5.5.0\nStill the same issue: [TypeError: Cannot read property 'getAppPath' of undefined]\n. Sorry for the noise here, the problem has to do with the package electron that I installed in another project: --> npm install electron-prebuilt\n\"electron\" is another program which has nothing to do with all of this!\nIf the package electron is installed anywhere it will cause a problem which leads to app not being defined.\nhttps://github.com/atom/electron/issues/3708\n. ",
    "tezlopchan": ":+1: \n. ",
    "ardoramor": "Ok, I got it working finally. I think I was just new to webpack. I configured externals in webpack configuration as:\nexternals: {\n     \"wcjs-player\": \"commonjs wcjs-player\"\n}\nThat prevents the inclusion of wcjs-player node module into webpack and my stuff works. This issue can be closed now. Thanks!\n. ",
    "Altiano": "Why need to bundle? Is it for performance?\nI found the code to do watch .. runBuild()\n    .then(function () {\n    runGulpWatch();\n    runApp();\n    });\nI just curious about how all this configuration works\nAlso I think there is some restriction about the name of main script which is background.js in build.js. It should be something like this :\nvar mainScript = jetpack.read('./app/package.json', 'json').main;\n...\nbundle(srcDir.path(mainScript), destDir.path(mainScript))\n. Yes.. I think that's all I want to know.. thanks :)\n. ",
    "wcurtis": "Sorry everyone, this was supposed to be a PR on my forked repo. Oops! \nClosing \n. Ha - I like the way you think :) There's a few projects that I'm eyeballing to handle auto updates, each approach it a bit differently. I'll open an issue once I play around with each and have a better idea of what might make sense to add to this boilerplate.\nOptions I've found so far\n- Native Electron\n- Via npm\n- Via github\n. ",
    "coclav": "@Altiano are you using NSIS 3.0b3 ?\ngot this error when i was using NSIS 2.50\n. ",
    "Reggino": "I ran into the same issue too. I finally added this line to background.js:\nrequire('electron-reload')(__dirname);\nSee https://github.com/yan-foto/electron-reload . It's a bit crude, but gets the job done...\n. ",
    "mykone": "Hello @Reggino, where you able to get your reload working? I tried that technique, but it doesn't work for me.\n. Thanks Jakub. That was very quick.\nOn Monday, March 21, 2016, Jakub Szwacz notifications@github.com wrote:\n\nClosed #137 https://github.com/szwacz/electron-boilerplate/issues/137.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/szwacz/electron-boilerplate/issues/137#event-597689562\n. \n",
    "dariuszsikorski": "@carlosperate debloating from extra load is a good practice, so yeah I would agree with that.\n. ",
    "syads321": "i experienced this issues when tryng to run in windows 8 64 bit of my laptop, but run succesfully  in 32 bit of win 7 of my PC.\nAny reason of this issues ? \nThanks.\n. ",
    "sclearion": "Thats where it gets copied to, the /tmp folder. Grunt is creating it and deleting it afterwards. I havent changed a thing\n. @szwacz the path is C:\\Users\\workpc2\\Documents\\MyProjects\\apptest. which i renamed from 'electron-boilerplate'\n. No I do not at the moment. I have noticed that when I have the folder open in Atom, the folder also open in windows explorer and a shell open to the same folder that is does not work. Could this be a file permission/lock issue?\n. Ok. Im on my ubuntu box now. Ill get on my windows and send them \n. ",
    "mQckingbird": "szwacz don't close issues if they weren't solved.\nI do have this problem too:\nBuilding installer with NSIS... (...)\nProcessing config: C:\\Program Files (x86)\\NSIS\\nsisconf.nsh\nFile: failed opening file: \"C:\\Users\\Notebook.....\\resources\\app.asar\nError in script: \"C:/Users/Notebook/.../tmp/installer.nsi\" on line 103 -- aborting creation process\nWhat does this happen?\nClearly it's trying to copy files, but there must be something wrong in the copycase.\nIn Linux works fine.\n. Can you elaborate more on that, @szwacz \nI'm a bit confused.. Really don't know what to do.\nI guess from this:\n```\nvar packageBuiltApp = function () {\n    var deferred = Q.defer();\nasar.createPackageWithOptions(projectDir.path('build'), readyAppDir.path('resources/app.asar'), {\n    dot: true\n}, function () {\n    deferred.resolve();\n});\n\nreturn deferred.promise;\n\n};\n```\nI do this:```\nvar packageBuiltApp = function () {\n    return projectDir.path('build');\n};\n\n. the packaging-rework, the one @szwacz released like three days ago.\nyou can reproduce it:\nhttps://github.com/matikbird/textiled\nit's a bit weird, it did this to me with a few modules, like html-to-pdf (which I've stopped using it anyways 'cause it requires phantomjs). But electron-html-to (to parse whatever HTML to PDF) works in npm start,, it does not innpm run release, and at least for me, there's no way to know why.\n. Well, we got no error message, since I found no way to see any errors in the released version. These problems only happens on the released version.\nCheck it out, you open the app with npm start after the whole thing is installed.\n\nThen you write whatever you want. Now, hit the Article as PDF button. It should be stored somewhere in a certain path (which you can set in the preferences section). It works. So far so good.\nNow, try the same when you run npm run release. In the binary, it does not work. And some other things do not work also, but we get that breach when we get to it. First, let's find out why some modules like electron-to-html is not working in the binarie. It should export the PDF as expected.\nThanks for the fast reply, @szwacz. And all your work, of course. It's really neat.\n. Will try that in a few days, @szwacz \nI thought the dev-tools was removed from the app when releasing the production version, didn't know you can also debug it in the production release.\nI'm developing an Android & iOS app for the same repo. I uploaded everything so others can help me and it can be like Linux, Electron or even this repo, a software of everyone (:\nI'd assume that something is not copying right when run npm run release, but that can be a wrong guess.\nI get back to you as soon as I can.\nThanks @black-snow @szwacz for the kind support (:\n. ",
    "TensorTom": "My Pi 3 model B is on it's way. I'd like to help test in any way possible.\n. ",
    "Booligoosh": "I'm on a Raspberry Pi 3.\nHowever, when I run\n$ sudo dpkg --add-architecture amd64\nit has an error downloading and says some files were not found. Any advice?. @black-snow According to this answer it seems like won't be able to use the command on a raspberry pi. ",
    "engelgabriel": "+1\n. I believe you have to increment this on every build you submit for review. You may have multiple attempts to get a specific version approved.\n. ",
    "rodrigok": "@szwacz done :)\n. @szwacz we are trying to approval our app, so we are doing some changes in this code, if you can wait I will update this PR with some fixes for MAS.\nAbout your question, You need the certificates from Apple to sign the app, so you can't do anything without an apple developer subscription. :(\n. @szwacz I have no idea :)\n. Hey @szwacz, our app was approved by Apple, :smile_cat: \nCan you merge this?\n. @szwacz the PR is up to date, and I did the requested changes.\n. Sorry, wrong destiny \n. @black-snow Sorry, as we are a fork of your repo, GitHub always point new PRs to your repo.\nWe are planing to delete our repo and create a new one to remote the fork link. But we will lose all issues, starts, etc.. @szwacz I did, waiting.... @szwacz Just checked and it was done 45 minutes ago \ud83d\ude04  \nNo more undesired PRs \ud83c\udf89 . Exactly\n. Yes, these are only the ID of the certificates, but users can pass that ids via command line too\n. Probably yes, I will do that ASAP\n. Idk, I copied this from an example\n. Yes, there are 3 signs inside the codeSignIdentitiy, dmg, MAS and MASInstaller, the dmg is the normal app signing.\n. ",
    "qubicle": "if i remove the line, the build app is not working anymore. tested with mac OS X.\nUncaught Exception:\nError: Unable to find a valid app\n    at Object. (/Applications/Stashcat Desktop Client.app/Contents/Resources/atom.asar/browser/lib/init.js:117:9)\n    at Module._compile (module.js:425:26)\n    at Object.Module._extensions..js (module.js:432:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:313:12)\n    at Function.Module.runMain (module.js:457:10)\n    at startup (node.js:151:18)\n    at node.js:1005:3\n. ",
    "aag035": "Thanks. After update, I was able to copy hidden files to build folder. Asar module was failing to copy too.  Suggestion : You can change the call from asar.createPackage to asar.createPackageWithOptions here https://github.com/szwacz/electron-boilerplate/blob/master/tasks/release/windows.js and pass {dot : true} while calling, so that asar knows to package hidden files too.\n. ",
    "timfish": "As far as I can tell there's willing, its just taking a while:\nhttps://github.com/mapbox/node-pre-gyp/pull/187\nhttps://github.com/mapbox/node-pre-gyp/issues/189\nIt might be helpful enough just to have this PR here open as reference to anybody who needs it.\n. ",
    "blainesch": "You can pull this down locally and run npm test to see the output.\n. An alternative might be to use karma with the electron plugin:\nhttps://github.com/lele85/karma-electron-launcher\n. @szwacz yes, if I can get this to work getting the transpilation working should be easy... just make the gulp task run build before it calls out to karma.\n. Oh, it should be noted, this makes it so it runs the tests in a headless browser not electron. I think this should be fine.\nAlso, do we expect anybody who forked this or used this as their base to pull in the new changes? It allows for CI now, but converting somebody like rocket chat to switch to mocha might be a hard switch.\n. Thanks for the merge! :D\n. @szwacz when is the planned merge into master for this?\n. > I believe I can make also 'copy' possible when some text on page is selected.\nWhat are the steps required for this? I can see additional shortcuts like ctrl+a/ctrl+e being important as well.\n. any reasons behind this decision?\n. @cnbecom that sounds like an electron issue, not this boilerplate specifically.\nCan you try running the electron provided boilerplate? It's more of a bare-minimum one:\nhttps://github.com/electron/electron-quick-start\n. Is  there a mac port of mspaint? :P\n. I feel like bower makes it easy to include scripts via a script tag. You can include most of the scripts via npm and require or import them without the need for a script tag. What do you think?\n. I'm excited about this functionality, do you need any help @black-snow ? I'd love to see this get in.\n. :+1:\n. I also can't find the module when loading an external url. I tried http/https and tried ensuring a few options were defaulting correctly.\n``` diff\ndiff --git a/app/background.js b/app/background.js\nindex a0702c8..e9dc6bc 100644\n--- a/app/background.js\n+++ b/app/background.js\n@@ -30,7 +30,11 @@ app.on('ready', function () {\n         height: 600\n     });\n\nmainWindow.loadURL('file://' + __dirname + '/app.html');\nmainWindow.loadURL('https://google.com', {\nnodeIntegration: true,\nwebSecurity: false,\nallowRunningInsecureContent: true,\n\n});\nif (env.name !== 'production') {\n     mainWindow.openDevTools();\n```\n\n\nThis might be more of an electron issue then the boilerplate.\n. I'm unsure why you'd want to minify it. Electron boilerplate without any additional code is 42mb, and you have to download it all at once, so adding one more mb isn't going to add much more overhead, and it'll be much easier to debug unminified code.\n. The correct solution might be to pin the node version with a .nvmrc file. We could use the same node version as electron, which of course changes. I'm usually against pinning such a specific version, but this might be a good exception. Currently it's 6.3.0\n. I do it on my project that started from this boilerplate, although they have greatly diverged, I never ran into any issues.\n. That would require doing another npm install which already fixes the issue though, right?\n. ah, it's in the readme.\n. No, judging just off of the choose a license site, MIT says it requires you to \"include a copy of the license and copyright notice with the code\" where UNLICENSE does not. Most of my code is MIT, but I've been curious about this license for a while.\n. The unlicense is a license, but you are right that the project is MIT already. Changing that would require permission from every contributor. That also wasn't my intent, my intent was to find the license since the project repo didn't contain a LICENSE file, I missed it.\n. I'd say less should be tested. This boilerplate uses electron 1.3.3 which is node 6.3.0.\nIf we wanted more of something, I'd say more operating systems. Windows often breaks so adding appveyor to this would also be helpful.\n. That logic is over here:\nhttps://github.com/szwacz/electron-boilerplate/blob/f0d0b17bac2b80c68bd3b4f92037262e661806c1/tasks/bundle.js#L7-L18\n. This asserts the app can be built. I was having issues building, so I added this to my CI. Doubly, it confirms it was working when I got it.\n. This sets the emitter -after- it's created so jasmine can have the object now. Jasmine is started in the boot.js file listed earlier. Adding the spec.js file after doesn't work.\n. This pattern is used in both methods, maybe there's a better way? Maybe a proxy type of decorator?\n. This file should have been deleted. The event emitter didn't work... I used dnode instead. The gulp task and electron are in different processes therefore this isn't a singleton.\n. This code might need to live somewhere else. I also added a wrapper for the 100ms. This was necessary because there was some bleeding text in the terminal without it.\n. We need to pass the object method by method. Dnode isn't working great with classes, but this might be something I'm just doing wrong.\nhttps://github.com/substack/dnode/issues/180\n. This might work better after I figure out how to stop making it do bundle-watch... and just do bundle instead.\n. This should be converted to a gulp task.\n. setup.js\n. I was suggesting you should add setup.js to the list of files to delete, since you'll never need it again.\n. ",
    "tomsotte": "The error was in the in the build gulp task, on bundle.\n. ",
    "denysvitali": "Yep, you're right. My PR was just an hotfix. Upgrading atom would be a nicer solution\n. ",
    "Riuujin": "Ah thank you, didn't see that.\n. ",
    "misteral": "O-h, thanks! \n\nI believe I can make also 'copy' possible when some text on page is selected.\n\nShould be very good !\n. @blainesch I switch to node 6.3.0 and add appveyor support. Also add e2e tests.\n. ",
    "FlorinMotoc": "Sorry, error. First time using github. Clicked a wrong button. You can delete this (as I didn't found how).\n. ",
    "cnbecom": "it actually doesn't. I do get a similar error as well\n25.04.16 13:53:42 [-0400] > electron-quick-start@1.0.0 start /usr/src/app\n25.04.16 13:53:42 [-0400] > electron main.js\n25.04.16 13:53:42 [-0400]\n25.04.16 13:53:43 [-0400] /usr/src/app/node_modules/electron-prebuilt/dist/electron: error while loading shared libraries: libgtk-x11-2.0.so.0: cannot open shared object file: No such file or directory\n25.04.16 13:53:43 [-0400]\n25.04.16 13:53:43 [-0400] npm ERR! electron-quick-start@1.0.0 start: electron main.js\n25.04.16 13:53:43 [-0400] npm ERR! Exit status 127\n25.04.16 13:53:43 [-0400] npm ERR!\n25.04.16 13:53:43 [-0400] npm ERR! Failed at the electron-quick-start@1.0.0 start script.\n25.04.16 13:53:43 [-0400] npm ERR! This is most likely a problem with the electron-quick-start package,\n25.04.16 13:53:43 [-0400] npm ERR! not with npm itself.\n25.04.16 13:53:43 [-0400] npm ERR! Tell the author that this fails on your system:\n25.04.16 13:53:43 [-0400] npm ERR! electron main.js\n25.04.16 13:53:43 [-0400] npm ERR! You can get their info via:\n25.04.16 13:53:43 [-0400] npm ERR! npm owner ls electron-quick-start\n25.04.16 13:53:43 [-0400] npm ERR! There is likely additional logging output above.\n25.04.16 13:53:43 [-0400] npm ERR! System Linux 4.1.18\n25.04.16 13:53:43 [-0400] npm ERR! command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"start\"\n25.04.16 13:53:43 [-0400] npm ERR! cwd /usr/src/app\n25.04.16 13:53:43 [-0400] npm ERR! node -v v0.10.22\n25.04.16 13:53:43 [-0400] npm ERR! npm -v 1.3.14\n25.04.16 13:53:43 [-0400] npm ERR! code ELIFECYCLE\n25.04.16 13:53:43 [-0400] npm ERR!\n25.04.16 13:53:43 [-0400] npm ERR! Additional logging details can be found in:\n25.04.16 13:53:43 [-0400] npm ERR! /usr/src/app/npm-debug.log\n25.04.16 13:53:43 [-0400] npm ERR! not ok code 0\n. ",
    "d0nk3y": "Wow!  How crappy!  ;)  That fixed it though.  Many thanks!\n. ",
    "kenzouno1": "Yep.I'm not a nodejs developers (i'm learn gulp in google not nodejs) and i know this this is stupid question and my english is very bad.\ni use this tool because it is very easy to use. but i can't find gulp module in my application after release\n. @iamjohnlong Yep.Because i have starter kit for html and wordpress.I want use it for my friends in company.But they do not know how to use the command line.\nMy idea is use electron build a GUI application.This app will write a json file path to a project and css,js file.After run command build sass,js lint etc...with a button.I just learn gulp a few days and i'm not a Nodejs developers and my english very bad so somewhat difficult to learn electron.\nAfter two days search i found my problem is deficient cwd in child_process.\nCode to run command now.\n`   var exec = require('child_process').exec;\n```\nvar child = exec(command,{\n    env: {\"ATOM_SHELL_INTERNAL_RUN_AS_NODE\":0},\n    cwd:app.getAppPath()\n});\nchild.stdout.on('data', function(data) {\n    console.log(data);\n});\nchild.stderr.on('data', function(data) {\n    console.log(data);\n});`\n```\nCurrently it is not an error message but gulp task not running.\nhere is list file in app.getAppPath();\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/app.html\"\n1\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/app.js\"\n2\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/app.js.map\"\n3\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/background.js\"\n4\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/background.js.map\"\n5\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/gulpfile.js\"\n6\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/helpers/context_menu.js\"\n7\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/helpers/dev_menu_template.js\"\n8\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/helpers/edit_menu_template.js\"\n9\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/helpers/external_links.js\"\n10\n:\n\"C:\\Program Files\\Electron Boilerplate\\resources\\app.asar/helpers/window.js\"\n. ",
    "iamjohnlong": "@kenzouno1 you may need the gulp cli installed and added to your deps https://github.com/gulpjs/gulp-cli\nmaybe he is building an app to run gulp commands through a GUI?\n. ",
    "sr-verve-alwin": "Oops.\ni found the issue. The problem is in the syntax given in the docs.\nIn the doc(README.MD) the command to install native module is given as\nnpm run install-native -- name_of_native_module\nThis is wrong. There is a space between '--' and name_of_native_module\nThe correct command would be\nnpm run install-native --name_of_native_module\n. I am sorry to reopen the issue. But it looks like removing the space worked only halfway. It ran the script and installed electron-rebuild. But then it ended up with this error\nModule name not specified! Correct usage is \"npm run install-native -- name_of_native_module\" (remember about space after \"--\"\nSo if I put space, it does not even start. Omitting the space will trigger another error from within the script.\n. I am using linux (ubuntu 14.0 lts 32 bit).\nI am also wondering why it tried to load it as a module when it is simply a script. \nStranger still, if I run\nnpm run install-native\nwithout any args, then the script starts and ends with no module specified error. The space between '--' and module name is triggering the error on my machine. Like you said it looks like a machine related issue. I do not have this problem on a windows machine.\nAnyway I modify the script and hard code the name of the module when I want to install a native_module. :)\n. ",
    "crazy-max": "Yes same thing for me with electron-rebuild 1.1.3 linked to 1.0.2 moved to iojs-1.0.2\n. Seems legit, thanks for your point of view!\n. ",
    "alwintom": "@szwacz \nI do not have access to another linux machine. But everything works on Windows. So I guess its specific to my machine.\n. ",
    "rohit-lakhanpal": "Dang it! Does not seem to be working for me when I use the \"Debug - Npm Start\" from your launch.json options. Does not throw any errors but the electron window does not open. Am I missing something?? \nRan the npm install before I tried to debug (in case you were wondering).\nHere's a zip of the boilerplate with your launch.json.\nI really appreciate your help. :)\nelectron-boilerplate-master.zip\n. Any luck Jimmy? I'm hoping to have this resolved by July so that I can use it on my next project.\n. I got this working using a .\\my-project-dir.vscode\\launch.json & a .\\my-project-dir.vscode\\tasks.json (for my preLaunchTask)\nMy launch.json is as follows:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/build/background.js\",\n            \"stopOnEntry\": false,\n            \"args\": [],\n            \"cwd\": \"${workspaceRoot}\",\n            \"preLaunchTask\": \"build\",\n            \"runtimeExecutable\": \"${workspaceRoot}/node_modules/electron-prebuilt/dist/electron.exe\",\n            \"runtimeArgs\": [\n                \"--nolazy\"\n            ],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null\n        },\n        {\n            \"name\": \"Attach\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 5858,\n            \"address\": \"localhost\",\n            \"restart\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null,\n            \"localRoot\": \"${workspaceRoot}\",\n            \"remoteRoot\": null\n        }\n    ]\n}\nAnd my tasks.json is as follows:\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"gulp\",\n    \"isShellCommand\": true,\n    \"args\": [\"build\"],\n    \"showOutput\": \"always\",\n    \"tasks\": [\n        {\n            \"taskName\": \"build\",\n            \"isBuildCommand\": true\n        }\n    ]\n}\nThanks for your help tho. :)\n. @szwacz can you mark this issue as resolved? Think my solution works.\n. @black-snow any chance you could try adding it on to the boilerplate? Keen to get auto-update working. Would also really love to hear your learnings/gotchas that devs need to be mindful of whilst using electron-builder in production. Thanks much. \n. I haven't tried it myself but the SignTool  bundled with the Windows SDK should do the trick. Let me know how you go.\n. ",
    "t3mulligan": "Awesome. Worked perfectly. Thanks so much!!\n. ",
    "scotttrinh": "Did you update to electron-prebuilt@1.2.0 by any chance? See this issue in electron-mocha:\nhttps://github.com/jprichardson/electron-mocha/issues/66\n. Aww man, I was hoping it was something I could easily fix. :) In the meantime, if anyone else runs into this issue, I'm working around it by putting my test values as the else in a ternary. Like:\njs\nconst APP_ID = env ? env.APP_ID : 'TEST_APP_ID';\n. @szwacz any reason we don't just read directly from the env_*.json file in all cases instead of writing them to package.json? That doesn't fix @leshow's issue, but it should clean up the logic in env.js, no? I'd be happy to put a PR together for that.\nAlso, this is totally just my opinion, but @leshow: do you think you could get away with mocking/spying instead of actually writing to the filesystem in your tests? Or maybe you're just checking that some call you're making in the code is calling the correct directory when it's trying to write? If so, I would think that getAppPath is giving you the \"correct\" path if the function under test is using the same function to build its path?\n. Unless I'm very mistaken, Node and Chromium do not support the module syntax, which is what Rollup is for, not for ES6.\n. ",
    "mamarilmanson": "oh... ok... I'll try... thanks... :)\n. ",
    "woooha": "I have add a basicly Angular 2 support for this project in https://github.com/woooha/electron-boilerplate .\nHope this could help you ~\n. ",
    "OwenBrotherwood": "@JimmyBoh Can you check if an \"asar\": false helps with null paths?\nhttps://github.com/szwacz/electron-boilerplate/issues/228\n. Also consider the addition of npm run release.\nI updated the package.json's to the latest available release, and was unable to create a release due to an error caused by \"depreciated and not supported\".\nExamples:\nhttps://github.com/OwenBrotherwood/microbit-drill/blob/e4031658bdc9d2782e1456d5d791f6d5f4ee0a0e/scripts/travis-build.sh#L18\nhttps://github.com/OwenBrotherwood/microbit-drill/blob/e4031658bdc9d2782e1456d5d791f6d5f4ee0a0e/appveyor.yml#L22-L28\nWhich seem to have worked, but \"early days\" https://owenbrotherwood.github.io/microbit-drill/\n. https://github.com/szwacz/electron-boilerplate/issues/232\n. https://github.com/szwacz/electron-boilerplate/issues/129\n. Basically, a time saver for people wanting to use your code to encapsulate others work, be it all work or just a dependancy the feel they need to use but does not support asar.\nAnother person would be yourself, for those who are trying your code and then ask questions (and possibly move on) https://github.com/szwacz/electron-boilerplate/issues/129\n. I think this issue, https://github.com/szwacz/electron-boilerplate/issues/170#issue-158520506, with a comment about \"null path\" indicates an  asar problem\n. Hi and thanks for your great code which I am using.\nAt the moment, I use Windows 10, and I believe the issue is due to this and the method to create my code base.\nI think the problem came when I did an npm init, and copied all the code over from the clone I have of your work (simple copy/place with the windows graphical file interface explorer).\nIn theory, any permissions, including execute, should be preserved with the copy of the clone of your repro which was the source of the copy (wonders if .git could have helped here: .git was not copied over)\nSo, as such, the fix may only be to ensure \"other os\" where there is \"some issue\" in how one has obtained your original code.\nThe travis-build.sh is probably the only executable in your code base, I have not checked, so the \"fix\" is, as stated, to ensure that the travis-ci will never complain about not being able to execute. \n\nPlease note, I will probably have to rethink the way I got the code as I have lost the way back the master, your code, in connection with keeping my code in sync with yours.\nI will probably comment if I have some form of conclusion to the above story.\nCurrent project @ https://owenbrotherwood.github.io/microbit-drill/\n. At the moment, my CI's are passing with the fix @ https://owenbrotherwood.github.io/microbit-drill/\nhttps://github.com/OwenBrotherwood/microbit-drill/blob/e4031658bdc9d2782e1456d5d791f6d5f4ee0a0e/package.json#L9 is the \"general\" category.\nI will try and drop it down into the mac area with a commit \"now\"\n. Both placements seem to pass \nHere is the placement in the current build\nhttps://github.com/OwenBrotherwood/microbit-drill/blob/dbd794bfad193d09651de15eccaf736e2c369125/package.json#L21\nConclussion?  build.app-category-type is deprecated and not supported \nAnd the placement of app-category does not as yet seem to cause problems, in general or specific build os.\nI would suggest keeping in general area of build until more information is available  if the dependancies are changed to new versions.\n. var localPackageJson = jetpack.cwd(app.getAppPath()).read('package.json');\nseems to give electron when using npm test\nnpm start seems ok\nnpm run release seems ok\n\"I work the problem thru\"\n```\nLOCAL{\n  \"name\": \"electron\",\n  \"productName\": \"Electron\",\n  \"main\": \"main.js\"\n}\n```\n```\nimport jetpack from 'fs-jetpack'; \nvar app = remote.app;\nvar net = remote.net;\nvar localPackageJson = jetpack.cwd(app.getAppPath()).read('package.json');\nconsole.log(\"LOCAL\"+localPackageJson);\n```. Issue is \"closed\" ie to read the app/package.json, use something like:\n```\nimport jetpack from 'fs-jetpack'; \nvar app = remote.app;\nvar net = remote.net;\nvar localPackageJson = jetpack.cwd(app.getAppPath()).read('package.json');\nconsole.log(\"LOCAL\"+localPackageJson);\n```\nHowever, if one uses npm test and have some very amatuer tests, then \"something\" causes a problem.\nI will work thru the problem.\n\n./src/microbit-drill-electron/microbit-drill-electron.js\nThe highlighted lines do not seem to be used in my very basic test:\nhttps://github.com/microbit-drill/microbit-drill-electron/blob/aaef62b9b194fce42024d95363d1df88244922b4/src/microbit_drill_electron/microbit_drill_electron.js#L9-L10\nThe function referred to is:\nhttps://github.com/microbit-drill/microbit-drill-electron/blob/aaef62b9b194fce42024d95363d1df88244922b4/src/microbit_drill_electron/microbit_drill_electron.js#L111-L115\nAnd the test is:\nhttps://github.com/microbit-drill/microbit-drill-electron/blob/aaef62b9b194fce42024d95363d1df88244922b4/src/microbit_drill_electron/microbit_drill_electron.spec.js#L12-L24\n. I try and copy the idea behind env.js for a \"general solution\" and then solve my own problem with tests\nEdit\nhttps://github.com/microbit-drill/microbit-drill-electron/blob/master/src/apppackagejson.js\nTrying to find out how to get the code encapsulated like env.js. https://github.com/microbit-drill/microbit-drill-electron/tree/master/src apppackagejson.js \"works\" \nie I altered my code and my npm run test works for my problem test.\nAt some stage, I will try and make apppackagejson.js to be as elegant as env.js, at the moment it means I have had to add another .gitignore for apppackagejson.js. I made an issue @ electron that may be correct in it's analysis of \"the issue\"\nhttps://github.com/electron/electron/issues/8073\nIt may mean that some code is needed in electron-boilerplate to avoid bad paths.. Fancy characters where once national characters :) https://en.wikipedia.org/wiki/Polish_alphabet \nI continue with looking for what a \"productName\" must not contain but I doubt there are restrictions as it should be possible to create a product with a name that contains what is normally acceptable, even \":\".\nI will monitor the electron issue and add a note \"here\", even if this issue is closed to give a \"heads up\" that the problem is or is not still something to be aware of.\nI may make an extra comment on https://github.com/szwacz/fs-jetpack/issues/32 if I find a piece of code to protect the usage of fs-jetpack when presented with illegal characters for the OS filesystem. thanks szwacz, I added the setpathname-path code in background.js, and and assigned the path to be 'appData' with the /app/package.json . name value\n(now I just need to find a lowlevel concation of two paths, appData and name, that does not involve just +\"\\\"+ :). I made a one-liner in background.js\nhttps://github.com/microbit-drill/microbit-drill-epxt/blob/09c1bf523f5841d01b3af9658ce8cc35a66fa834/src/background.js#L20\nThe final version of keeping my test users informed of new releases via github release is also in background.js if you ever need some github centric update that does not use app.js but is kept in the background with helpers\nhttps://github.com/microbit-drill/microbit-drill-epxt/blob/09c1bf523f5841d01b3af9658ce8cc35a66fa834/src/background.js#L7\n. ",
    "msroberts": "I got this working: https://github.com/szwacz/electron-boilerplate/compare/master...msroberts:typescript\nTests still don't work though.. ",
    "iwasrobbed": "Could just use https://github.com/electron/electron-compile instead . ",
    "oparisy": "Indeed I have been able to port the sample application provided with electron-boilerplate to TypeScript without too much difficulties.\nTest suites pass (unit and e2e), and npm run start / npm run release work.\nMost adjustments I had to do were type precisions/casts (as could be expected), and minor import syntax adjustments.\nThe only place where I deviated from the existing code was import env from \"env\", which I had to replace by const env = require(\"env\").\nNow @szwacz I would like to share this. I consider two options: either creating an electron-boilerplate-typescript repo, and clearly stating on its readme that it is a derivative of your work; or submitting to you a PR for a typescript branch. I'm afraid the second option will make this work harder to find, though.\nWhat are your thoughts on this?\nRegards,\nOlivier.. @black-snow thanks for your comment, which raises an interesting point: some of the modifications I had to do (to package.json or the webpack config as an example) are needed for TypeScript support, but are compatible (ignored) with a JavaScript code base.\nShould it be deemed desirable for this project to officially offer some TypeScript support, I could then do the following:\n  * post a PR for JS-compatible adjustments,\n  * fork once the PR is accepted to provide an example of a TS code base.\nWould that be acceptable?\nRegards,\nOlivier.. Following the discussion above, I built the #296 pull request providing TypeScript compilation and packaging support. \nThe point of this PR is that the only modification remaining for a TypeScript developer to perform on electron-boilerplate is to change build/webpack.app.config.js to point to his TypeScript \"entry\" code.\nExisting npm tasks show no regression on the existing Javascript \"Hello World\" application. Please have a look at the PR and its description for further details.\nI demonstrated the use of those TypeScript capabilities by porting the \"Hello World\" sample app provided with electron-boilerplate fully to TypeScript, and ensuring that all npm tasks above still work as expected on this new code base.\nI am providing this demonstration port at oparisy/electron-boilerplate-typescript.\nRegards,\nOlivier.. ",
    "dfabulich": "I think there's absolutely value in having a boilerplate built around electron-builder, or at least a wizard/installer. builder's setup steps are finicky.\n. ",
    "matiasmolleja": "\nAnd what are your impressions of electron-builder so far? I've tinkered with it a bit and my impressions are not super-awesome. I can't get simple things like app icon to work, bug? Or just the dosc are outdated? Anyway do you have any success with it?>\n\nI tried electron-builder + electron-packager some time ago. In fact I discarded electron-boilerplate in favor of them only because of autoupdate feature.\nA few weeks later I returned to use electron-boilerplate. Maybe I was doing something wrong, but I don't think so. Electron-Builder seems much more easy, and has less issues,  for me at least. The only problem for me in electron-boilerplate is the lack of autoupdate. So please, think carefully and test throughtly before switching.\n. ",
    "McPo": "\nAnd what are your impressions of electron-builder so far? I've tinkered with it a bit and my impressions are not super-awesome. I can't get simple things like app icon to work, bug? Or just the dosc are outdated?\nAnyway do you have any success with it?\n\nIm using electron-builder and theres be no issues so far, infact its great.\nI assume your placing the icon in the build folder? What OS are you using?\n. I second, changing the default directories, as opposed to changing the project to use the default directories.\nHowever Id push for using Squirrel as the default. You dont need to do the auto-updating stuff and it's installers is the most straightforward no hassle approach. I'd also suggest the use of https://www.npmjs.com/package/electron-squirrel-startup to generate the shortcuts on Windows.\n. ",
    "develar": "\nwhat to choose as default build targets.\nWe could chose nsis for that's what we're doing already. However nsis was only added recently and (imho) isn't thoroughly tested yet.\n\nNSIS outperforms Squirrel.Windows in all aspects, only https://github.com/electron-userland/electron-builder/issues/529 is the reason why nsis is not yet set as default. It will be fixed soon (month?).\n\nisn't thoroughly tested yet.\n\n5.12.1 should be production ready. But yes, it is not yet time-proven.\n\nIdk what a sensible default would be for linux, maybe just zip.\n\nConsider use AppImage target (http://appimage.org, https://github.com/electron-userland/electron-builder/issues/504#issuecomment-231064609). It will be default Linux target in the next major release of electron-builder.\n\n(I assume) have no dependencies which should be installed separatlely (NSIS is such dependency for current configuration\n\nNo, you don't need to instal NSIS \u2014 pre bundled for macOS, Linux x64 and Windows.\n. > Currently I'm backing up my releases after each build. Maybe we can automate this.\nYou can file issue about it. Why electron-builder does it? Because if we need to build delta patch, we must use valid previous version. No one can guarantee that file in your dist is the same as in the download server.\n. FYI: to build Linux on Windows we provides docker image \u2014 https://github.com/electron-userland/electron-builder/wiki/docker (yes, it is for advanced users).\n. > Sounds like we should just default to electron-builder's defaults ;)\nYes, but until AppImage is not default (it requires major version update \u2014 don't want to do it right now), I suggest to explicitly set Linux target to AppImage.\n\nCould you please explain in which ways NSIS outperforms Squirrel?\n\nhttps://github.com/electron-userland/electron-builder/issues/472#issuecomment-223892438\nhttps://github.com/electron-userland/electron-builder/issues/472#issuecomment-225656393\nia32 and x64 in one installer.\nNSIS just much better.\n\nWhy not just download what it needs and keep all other things in place?\n\nFor what do you need old artifacts? \n. > And indeed windows build with NSIS... just works\n\nbuild.win.icon has to be set.\n\nbuild.win.icon is required only for Squirrel.Windows (shame!)\n\nStill icons for linux doesn't work. Do I have to have all those icon resolutions?\n\nNo. If you auto transform macOS icns doesn't work for you, in the build/icons you can put any number of PNG files ( filename must contains size (e.g. 32x32.png))). https://github.com/electron-userland/electron-builder/issues/593 (do not require icons).\n. > \"postinstall\": \"install-app-dept\"\nThis required only to install app deps when you execute npm install in the root project dir. To avoid cd app && npm install.\nelectron-builder doesn't use it on build \u2014 if two-package.json structure is used (electron-boilerplate uses it), we call npm rebuild in any case (all required env are configured properly \u2014 https://github.com/electron-userland/electron-builder/blob/master/src/util/util.ts#L24) (not npm install \u2014 it is broken and must be not used to rebuild dependecies).\n. Obsolete since electron-boilerplate uses electron-builder.\n. You can debug it in IntelliJ Platform IDEs 2016.2+ ASAR packaging supported. But some fixes is not yet available in the released versions (if you use unpacked asar files).  Currently, electron 1.3.1+ Electron debugging is broken \u2014 https://github.com/electron/electron/issues/6608 Feel free to ping me \u2014 I developer of JetBrains JS debuggers. So, you can expect excellent support (because electron-boilerplate uses electron-builder under the hood).\nPlease see https://blog.jetbrains.com/webstorm/2016/05/getting-started-with-electron-in-webstorm/\n. Consider to close as question.\n. Duplicates https://github.com/electron-userland/electron-builder/issues/615 Can be closed.\n. electron-boilerplate incorrectly uses electron-builder.\nHow it should be:\n- src contains source files (e.g. typescript). https://github.com/develar/onshape-desktop-shell/tree/master/src\n- app contains only package.json and other static asses that should be included into the app. extraResources and extraFiles options allows to copy something else outside of app directory (or from app but change layout).\n- before build you compile sources (gulp or tsc or whatever) to app.\nSo, install-app-deps will install (if no node_modules, it is implemented recently) or rebuild dependencies in the app directory (directories.app).\nTwo package.json structure is not required to separate dev and production dependencies \u2014 it is handled by electron-builder efficiently (no copy, no prune, no install).\n. I don't say that proposed and used by electron-boilerplate layout is not correct. \nOption directories.appNodeModules can be added by electron-builder specially for electron-boilerplate to fix this issue. extraFiles is not a solution here because files will be not copied into asar archive. If you like it, I will do it (or you can send PR). Also, it will allow you to avoid node_modules directory copying.\n. > No need to copy node_modules means noticeably faster development builds.\nAnd any other static assets as well ;)\nPossible solution \u2014 you can build app into the your app \u2014 not to build. And set files to ignore source files/directories. But yeah \u2014 scheme src contains only sources is better.\n. > Did you call it app because it'll hold all the app stuff on build? \nExactly. It is directory that you can execute using electron-prebuilt. It is not strictly correct statement due to extraFiles/extraResources, but in general true.\n\nI don't see src mentioned in the docs.\n\nBecause it is out of electron-builder scope. You can use only es6 and write code directly in the app directory. Or use webpack. Or TS. Your compiler just use app dir as out dir. Compilation out of scope.\n. How to use preprocessor on the fly (compile on the fly \u2014 devDepencies (e.g. babel) not in the app) \u2014 https://github.com/electron-userland/electron-builder/wiki/Loading-App-Dependencies-Manually\n. Tricky problem due to TS typings in the app dep \u2014 https://github.com/electron-userland/electron-builder/issues/513\nWell... the only reason to use 2-package.json structure now \u2014 if you have native deps or you don't want to maintain correct files (to exclude dev files).  https://github.com/szwacz/electron-boilerplate#2-for-your-application \u2014 \"there is no need to add up to size of the app with your devDependencies\" \u2014 it is not required anymore, electron-builder correctly packs only production deps.\n. Should be no stupid plain file copying. Tool is smart enough to pack on the fly without intermediate copying.\nI am not familiar with electron-boilerplate and don't understand why you use rollup if you don't need to bundle at all (even poor windows io is not an argument \u2014 packed into asar in any case).\n\ndir is nice feature but comes with a cost of complicating the build script (some files should be removed in clean task, and some shouldn't.\nFirst that means some crazy .gitignore paths to exclude autogenerated files from commits\n\nWhy? https://github.com/develar/onshape-desktop-shell/blob/master/.gitignore Only app/out is ignored. It is not \"crazy path\", right ;)? So, electron-boilerplate can just put all generated stuff to app/out.\n. Electron-builder should provide special script to install new npm dependency. Or somehow inject proper configuration for npm. PR welcome.\n. > Sadly calling node_modules/.bin/install-app-deps manually after installing a new dependency didn't help.\nBecause install-app-deps calls install, but not rebuild (on build we use rebuild due to this npm bug). And npm doesn't detect that module must be rebuild because configuration was changed.\nSomething like https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241488783 should be added, as already stated.\n. @szwacz electron-builder 8+ doesn't rebuild dev deps anymore. Only and only production dependencies will be rebuild. It doesn't matter for electron-bolilerplate \u2014 because you use two-package.json structure (it is not required anymore since electron-builder 8). Please see https://github.com/electron-userland/electron-builder/issues/906 \nI don't understand \"npm install name_of_npm_module to rebuild the module for Electron.\" Why? If user will invoke this command from terminal, it will be built for node version, not for electron. Right?. > you need to launch npm run postinstall what is a hook to install-app-deps. Right?\nYes. But in this case, I think, it will be better to call install-app-deps directly. To reduce magic level and make things a little bit clear.. ./node_modules/.bin/install-app-deps can be used. Ok, up to you :). It is ok. 7zip-bin-win/7zip-bin-linux are optional deps because your are on mac :)\n. Current icon.icns is not required any more as well \u2014 default electron icon will be used (and warning will be issued, so, user will be aware). It is why I ask/suggest to remove build.dmg from package.json \u2014 no need to complicate config \u2014 resources directory is already set to resources. So, user just put background.tiff and icon.icns to resources.\n\nDo you have (or heared of) any success in generating icns and ico file via code in build scripts? \n\nWe already generate icon set for Linux from icns. And often it causes problem (because used native iconutil is not reliable (latest version of electron-builder uses Apple tool on macOS, so, it is only Linux issue) and pure nodejs implementation is not complete). https://github.com/sonnyp/icns.js/issues/3\nWell, we can generate ico from icns, but I don't think it is worth to do \u2014 often it is easy for user to generate both (e.g. using iConvert Icons or AppIcon Generator apps.\n. >  I'm gonna use electron-builder.json5 for I can have comments in json5 but I have no strong feelings about the format.\nUnder the hood all formats parsed by yaml parser. i.e. json file also supports json5 format. But json5 is better to clearly state that it is json5.. @black-snow Yes. I hope https://youtrack.jetbrains.com/issue/WEB-12776 will be fixed soon, correct file extension is important (because IDE can detect in this case proper file type).. Electron-builder will soon offer solution to prebuilt native modules for Windows.. > what kind of modules?\nNative modules like keytar, sqlite3. . Close \u2014 handled on electron-builder side.. ",
    "fedegratti": "Hi guys, I was following this issue since it started and I guess I can help now.\n@szwacz I could build a boilerplate using gulp and electron-builder. I will do an example and post here tomorrow. \n. Here it is: https://github.com/fedegratti/electron-boilerplate/tree/add_eletron-builder\nI just added electron-builder as devDependencies, set \"build\" and \"directories\" options and added \"release-electron-builder\" command to run \"guld build\" and then \"build\".\nSome considerations:\n1. build.win.icon has to be set.\n2. The default directories.buildResources path is \"build\" so we need to change it because gulp already uses build folder.\n3. In directories.app we set \"build\" folder because we need the project already built.\nI hope it helps!\n. ",
    "mattzuba": "Not sure of a better place to ask this question, and I think this issue seems most appropriate.  I have an existing project I've been using the original boilerplate with (as of about a month ago).  How easy/difficult will it be to migrate to the updated boilerplate that works with builder?  I've made a few customizations to the scripts and such from the boilerplate, but nothing that I couldn't reworked or even eliminated based on a new structure.\n. Great, thanks!  I only customized the NSIS script a tiny bit, but not much, nothing that I can't figure out how to do without it.  Looking forward to seeing this integration complete!\n. Did you add your riot task as a dependency on the start or build task?\n. ",
    "ColonelBundy": "I signed both the installer and the app build using gulp.\nNote: this was done a long time ago and I was using node-webkit at the time, however the process should be the same.\n```\ngulp.task('sign:build', function() {\n  return shelljs.exec('\"./assets-windows/signtool.exe\" sign /v /d {NAME_OF_APP_HERE} /f \"{PFX_CERT_HERE}\" /p {PASSWORD_OF_CERT_HERE} /tr \"{TIMESTAMP_SERVER_URL_HERE}\" \"{APP_HERE.EXE}\"');\n});\ngulp.task('sign:installer', function() {\n  return shelljs.exec('\"./assets-windows/signtool.exe\" sign /v /d {NAME_OF_APP_HERE} /f \"{PFX_CERT_HERE}\" /p {PASSWORD_OF_CERT_HERE} /tr \"{TIMESTAMP_SERVER_URL_HERE}\" \"{INSTALLER_HERE.EXE}\"');\n});\n```\nTo sign you just execute each at the appropriate place. For instance, When we have just built the exe and its about to be packed into the installer, We execute the sign:build task. And once its been packed, we execute the sign:installer task. \nNote: This works only for windows and I assume you have signtool already.\n. ",
    "ivanixgames": "Side note,  coming from a linux background, I am using mingw64 shell on windows to do my node and electron development, but I hope it is not relevant to this issue.\n. ",
    "matiastucci": "I want to sign the app, in order to use autoUpdater. I know I can do npm run release -- --sign A123456789 but that's going to sign the release app. What I would like (I'm not sure if it's possible) is to sign the app I run locally for development (doing npm start). I'm on OS X.\n. ok, I'll. Thanks!\n. @pfrazee I didn't \ud83d\ude1e I commented the import of autoUpdater\n. @pfrazee ok, cool. Thanks and good luck!\n. ok, I'm not crazy then. Thanks!\n. ",
    "pfrazee": "@matiastucci how did you end up resolving this? I'm experiencing the same issue\n. @matiastucci My theories are, either:\n1. I'll need to sign some assets that are used in development, and I haven't found out which ones yet.\n2. The auto-updater will just fail in the development build.\nI expect the latter to be the case. I wrapped the setFeedURL call in a try/catch, and I'm finishing up the updater code. I'll let you know if my release version works.\n. ",
    "amilajack": "\nAbout the doubt, I would highly recommend using some kind of continuous integration to guarantee the stability of this project. I have tried a lot of electron projects and most of them do not work when installing/building them. Electron has a lot of moving parts and adding CI would be for the better.\nThe extra lines that are described in the link are what is required to make the install properly. The remaining lines are project specific. They:\nTest builds against node 5, 6\nThey make electron 'sleep' before using it. This helps guarantee that electron has time to properly start.\nCaches node_modules for faster builds\nAddes project-specific tasks (ex. npm run install-native)\n. \n",
    "azl397985856": "Object.keys(appManifest.dependencies)\nreturned  [ 'fs-jetpack', 'react', 'react-dom', 'antd' ]\nseems correct\n. \nthis is my build folder.  the node_modules here, why not bundled into app.js? Im getting puzzled\n. that's to say, if src//app.js import react as dependence,react wont'b be bundled into the build//app.js\nSo I have to change the build task manually when import other pakages \n. ",
    "drFabio": "Removing the Unicode options solved it\n. ",
    "jorfermo": "I'm using nconf to save some application settings. Those settings are saved in __dirname + something\nAfter every rebuild those settings are lost. That's why I'm asking how to avoid that file to be erased after every npm start.\n. wow! It really makes sense, I didn't know about it. I'll give it a try.\nThanks for the hint!\n. ",
    "brandoncc": "I actually got further, by changing buildTask in the build task for gulp:\njs\nvar bundleTask = function () {\n  if (utils.getEnvName() === 'test') {\n    return Q.all([\n      bundleApplication(),\n      bundleSpecs()\n    ]);\n  }\n  return bundleApplication();\n};\nNow I get an error saying that on is undefined because require('electron') isn't pulling in electron. I haven't figured out why or how to fix that though. I guess I'll be waiting for your update. Thanks for an awesome product which really helped me a lot!\n. By the way, I think you can run the specs against the built files like this:\njs\nthis.app = new Application({\n  path: '/Users/brandoncc/dev/myapp/node_modules/electron-prebuilt/dist/Electron.app/Contents/MacOS/Electron',\n  args: ['/Users/brandoncc/dev/myapp/build/background.js']\n});\nreturn this.app.start();\nThis is from the spectron docs:\n- path -  Required. String path to the Electron application executable to\n  launch.\n  Note: If you want to invoke electron directly with your app's main\n  script then you should specify path as  electron via electron-prebuilt\n  and specify your app's main script path as the first argument in the args\n  array.\nI also tried this:\n``` js\nvar Application = require('spectron').Application;\nvar electron = require('electron-prebuilt');\nvar assert = require('assert');\ndescribe('application launch', function () {\n  this.timeout(10000);\nbeforeEach(function () {\n    this.app = new Application({\n      path: electron,\n      args: ['/Users/brandoncc/dev/myapp/build/background.js']\n    });\n    return this.app.start();\n  });\n```\nand got the same error. Maybe that helps you in some way?\n. Awesome, I'll rebase and give it a go. Thank you @szwacz!\n. Okay. I added support for haml, coffeescript, and sass before so I was going to rebase...maybe I will just bring in my project files and do the same again. Thanks again :-)\n. ",
    "SantoDE": "My question is actually here as well. Do I have to add each File I want to add within the bundle Task or is there some sort of \"wildcard\" magic in place? I already looked at rollup but can't make to figure that out @black-snow  @szwacz \n. Thanks @szwacz . No, I got that :) It's just \"sad\" for my angular.js files then, because rollup doesn't know how to follow up on that so I need to add each file as a bundle. Feels like overkill, but dunno what else I could do :) Thanks for your help\n. @black-snow as I'm using ES6 in some files (or at least plaining to), this won't work. I'll probably just loop over the directory and add each file programmatically then :) \n. @black-snow I tried. Can't get it working without :(\n. ",
    "carvind": "macos-alias is only supported for darwin platform. See Here\n. ",
    "wotermelon": "@black-snow @carvind thanks, it's solved\n. @szwacz  After doing npm run release the dist folder include win-unpacked and Electron Boilerplate Setup 0.0.0.exe, does it normal?\nIt seems that pack failed? \n```\n$ npm run release\n\n@ prerelease xxx\\electron-boilerplate\ngulp build --env=production\n\n[08:51:56] Using gulpfile ~\\electron-boilerplate\\gulpfile.js\n[08:51:56] Starting 'bundle'...\n[08:51:56] Starting 'less'...\n[08:51:56] Starting 'environment'...\n[08:51:56] Finished 'environment' after 383 ms\n[08:51:56] Finished 'bundle' after 582 ms\n[08:51:56] Finished 'less' after 584 ms\n[08:51:56] Starting 'build'...\n[08:51:56] Finished 'build' after 6.57 \u03bcs\n\n@ release xxx\\electron-boilerplate\nbuild --x64 --publish never\n\nRebuilding app dependencies for arch x64 xxx\\electron-boilerplate\\app\nPackaging for platform win32 x64 using electron 1.3.3 to dist\\win-unpacked\nCreating NSIS x64 package\nBuilding NSIS installer\n```\nAfter  executing dist/win-unpacked/Electron Boilerplate.exe, I get an error\nCannot find module 'fs-jetpack'\n```\nnode -v\nv6.3.1\nwin10\n``\n. I have this issue on fresh clone of your boilerplate.\nI have been used the earlier version of this boilerplate in my application, and I want to use this latest version. The earlier boilerplate worked fine.\n. @black-snow I am sorry.Thank you for theelectron-squirrel-startup` module\n. ",
    "discordier": "@szwacz Maybe you are mistaken on what this PR want's to introduce and what CI is all about.\nThe CI systems get triggered on every push, PR and tag (when you activate them). They will fetch the sources from github, run the tests and  mark the result as commit state right here on github.\nThey help you as maintainer as a first defense line in deciding on PRs as not every developer (in my experience, almost none) out there runs tests before pushing a PR.\nOn the general topic, I rather use software using continuous integration systems than those not doing so, as I can examine by looking at the source and in the CI logs if the software is in good state before even considering the usage (or the refraining of).\nIn the end, when you accept this PR (which I suggest to do) you will have to enable the travis hook in the repository settings at github.\n. ",
    "RichLewis007": "ok thanks!. ",
    "AmGarera": "Right so in theory it should pull the npm dependencies from the package.json because i'm requiring it\n. ",
    "danschultzer": "Thanks!\nYeah, it's for automated code coverage. In our use case, we need it for CircleCI to do lcovonly code coverage reporting, while locally running npm run coverage we expect it to generate the regular html/text-summary report. I think others will have the same need for changing the config dynamically in different environments.\nIt's kind of ugly though, and I tried to make it configurable in the script itself, but mocha-electron doesn't yet accept mocha reporter options. I might look into opening a PR for mocha-electron to fix this, so we can remove the env variables and just call something like npm test -- -R scripts/istanbul-reporter -O reporters=lcovonly. That's why there's already options.reporters setting.\n. I found an issue in this PR, the stack trace doesn't use the source map. I'll fix it.\n. So the issue is in the rollup-plugin-istanbul package. It doesn't return any source map. There's a 4-month-old PR to add in source maps that we could use, but I'm checking if it can be merged into master and push a new release on npm.\n. Got a new release for rollup-plugin-istanbul out today. Tests now show up with correct stack trace:\njavascript\n  1) hello world greets:\n     Error: Test\n      at greet (/Users/dan/electron-boilerplate/app/src/hello_world/hello_world.js:2:11)\n      at Context.<anonymous> (/Users/dan/electron-boilerplate/app/src/hello_world/hello_world.spec.js:8:16)\n      at runCallback (timers.js:566:20)\n      at tryOnImmediate (timers.js:546:5)\n      at processImmediate [as _immediateCallback] (timers.js:525:5)\n@szwacz any comments?\n. ",
    "trstringer": "setup.js added to the cleanup script! \ud83d\ude04 \n. @szwacz makes sense, thanks for the consideration! \n. Not sure I understand..?  I don't see any suggested \"changes\", let me know if I'm missing something! \ud83d\ude04 \n. Ohhhh that's a good point!  Great idea, and totally agreed.  Perhaps I should bake that into the product... Either way, for now I'll add it explicitly.  Thanks! \ud83d\udc4d  \ud83d\ude80 \n. ",
    "philipptrenz": "it's within \"dependencies\" at my package.json\nbinaries seem to be \"node_modules/opencv/opencv/v6.0.0/Release/node-v48-linux-x64/opencv.node\" also in \"node_modules/opencv/Release/opencv.node\", is that right?\n. Hi, I wasn't aware how to rebuild modules for node for the use in electron, I even wasn't aware there's a difference. I found a way around this issue, so I'll close this. I've not tested if rebuilding would fix this issue, if someone comes across this here, feel free to contact me!\n. Hey,\nI found another framework which supports the functionality I need. But take a look at https://github.com/electron/electron-rebuild/ it fixed some issues I had with several dependencies, maybe this will fix it.. ",
    "chriswininger": "@philipptrenz What was your workaround? Running into the same issue.. Ah, tried that electron-rebuild suggestion and followed the instruction at the link https://github.com/electron/electron-rebuild, that fixed it for me. Thanks szwacz. I was not familiar with this tool.. ",
    "gonzaonisimchuk": "Hi @philipptrenz , how do you fix the problem?. ",
    "jwir3": "Ok, I'll try that. Thanks @black-snow.\n. @black-snow Ah... this appears to be electron-userland/electron-builder#498.\n. ",
    "Sirius-A": "I'd also like to have oob support for GitLab CI.\n@pkunze Can you share your .gitlab-ci.yml :blush: ?\n. I use GitLab as a central code repository for all project within my company. \nGitLab comes with built-in CI runners,  which trigger for each commit.  The runners can be configured with a .gitlab-ci.yml file. \nThis issue suggests to add such a file, so people using GitLab can use the CI  checks and builds out of the box. (No changes for Travis or AppVeyor. ) \n@pkunze feel free to correct me :D\n. ",
    "MasterHK": "it's started to error from today!\nit was correct but now... :)\n. sorry the problem was a badsector in my hard drive...\neverything is working just fine... :)\n. ",
    "Schultzer": "@torakiki I think you might be looking for the bundle task in build_app.js.. @szwacz Thanks for the feedback. the PR is now corrected.. This is not related to the boilerplate.\nError: ENOENT: no such file or directory, open '/home/travis/build/YannBertrand/youtube-dl-gui/node_modules/electron/path.txt'\nTry to backtrace what you done in the your codebase\nHappy New Year \ud83c\udf89 \ud83c\udf7e . ",
    "torakiki": "oh I see now, the app.js in app is different from the one in src, so those two are entry points and the rollup thingy fetches and copies whatever is needed going down the dependency tree of those two entry points, correct? That's what I was missing, I didn't noticed they are different and I was expecting a 1:1 copy.\nThanks. Not sure, it wasn't clear to me at the beginning after reading the README but as I said I'm out of my comfort zone so maybe it's not a lack in the docs. . Yes, that was it, very clear now. ",
    "GeorgeChackungal": "Hi Guys,\nI was able to make it work. I just had to define my app dependencies on the package.json in 'dependencies' instead of in 'devdependencies'.\n@black-snow  - Sorry about the partial code. I didn't notice it when I copied it.\n@szwacz - I tried adding using module imports. sadly its not working. I refered to http://angular-tips.com/blog/2015/06/using-angular-1-dot-x-with-es6-and-webpack/. Also this was written in src folder. PFA code.\n` import 'angular-material/angular-material.min.css';\nimport angular from 'angular';\n import ngRoute from 'angular-route';\n import ngAnimate from 'angular-animate';\n import ngAria from 'angular-aria';\n import ngMaterial from 'angular-material';\n(function () {\n    'use strict';\nvar app = angular.module(\n    'app',\n    [\n        'ngRoute',\n        'ngMaterial',\n        'ngAnimate'\n    ]\n);\napp.config(\n    [\n        '$routeProvider',\n        function ($routeProvider) {\n            $routeProvider.when(\n                '/', {\n                    templateUrl: './main/home/home.html'\n\n                }\n            );\n            $routeProvider.otherwise({redirectTo: '/'});\n        }\n    ]\n);\n\n})();\n`\n. ",
    "StephaneBischoff": "Importing the JS files from dependecies works for me, BUT how do you get the associated css and js file into the html page in the app folder?\n```\n<!doctype html>\n\n\n\nElectron Boilerplate\n<link href=\"stylesheets/main.css\" rel=\"stylesheet\" type=\"text/css\">\n\n<!-- WHERE IS angular-material.min.css in app output folder ???? -->\n<link href=\"angular-material.min.css\" rel=\"stylesheet\" type=\"text/css\">\n\n<script src=\"helpers/context_menu.js\"></script>\n<script src=\"helpers/external_links.js\"></script>\n\n <!-- WHERE IS angular-material.min.js in app output folder ???? -->\n<script src=\"angular-material.min.js\"></script>\n\n<script src=\"app.js\"></script>\n\n\n\n\n        {{greet}}\n    \n\n\n```. ",
    "yannbertrand": "I didn't even create my tests. The thing is that npm test is not throwing any error locally even if there is nothing to test (it returns 0 passing (10ms)).\nTravis build which is running ./scripts/travis-build.sh throws the error above. I have no idea what this path.txt file is \ud83d\ude1e. Tanks for your help \ud83d\ude04 . It magically started working today.\nI'm pretty sure this is related to a silly npm install. By default, electron-boilerplate asks Travis to cache the node_modules folder but if you run into this issue, you'd probably want to deactivate this (see cache in travis.yml).. ",
    "yilunyu": "I got it thanks so much\n. ",
    "alexdevero": "@black-snow your advice saved me. Thank you very much!. @black-snow Thank you very much! Works like a charm! PR is on the way.. @black-snow I used yarn to install and upgrade the dependencies. Maybe, this is the cause. Do you want to lower the version to the latest stable, v1.6.11?. Issues are fixed. And, you are welcome. I love to help and contribute, no matter how big or small the help or contribution is.. ",
    "xinxiang": "Yes, extraFiles got what I wanted. Thanks a lot. Should have come here to post the question earlier.. Hi @black-snow,\nThanks. The problem is still in my icons. I made another set of icons with different settings, this time the icons look bearable.\nBest. ",
    "faultylee": "@szwacz Thanks for the reply, if sourcemaps is fine, then I'll look deeper into the debugger and VSCode itself. . ",
    "tiptronic": "@black-snow Thx for the hint - I was just asking if I missed something critical...\nthx for your reply. Much appreciated!. ",
    "distributev": "rollup.js is part of this electron boiler plate and supports ES6 modules. I can import all other libraries using ES6 syntax (angular, admin lte) I get issues only with import 'bootstrap';\nAnd actually import 'bootstrap'; technically works too - it's jQuery which is a dependency for bootstrap and which I cannot get it correctly processed to expose the global jQuery (required by bootstrap).\n. Sorry - I was not sure if it's an electron-boilerplate or electron-asar or electron-builder situation and who would be most appropriate to take a look at this. I saw people from this project take also good interest in how electron-builder works. Do you see a better approach or work around?. ",
    "LodoF": "ok , thx. Now, I added the download and pouchdbin the dependencies.\nWhen implementing npm run release, Rebuilding native production dependencies for darwin: x64. \nI thought the package was successful, but when running the program  \nA JavaScript error occurred in the main process \nUncaught Exception:\nError: ENOENT, ._download@6.0.0@download not found in /Users/macbook/Documents/git/pos/SparkPos--GP--SSPOS/dist/mac/Sparkpos.app/Contents/Resources/app.asar\n    at notFoundError (ELECTRON_ASAR.js:115:19)\n    at Object.fs.readFileSync (ELECTRON_ASAR.js:514:9)\n    at Object.Module._extensions..js (module.js:579:20)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at /Users/macbook/Documents/git/pos/SparkPos--GP--SSPOS/dist/mac/Sparkpos.app/Contents/Resources/app.asar/app/main.js:17:18\n    at Object.<anonymous> (/Users/macbook/Documents/git/pos/SparkPos--GP--SSPOS/dist/mac/Sparkpos.app/Contents/Resources/app.asar/app/main.js:221:2). @szwacz @black-snow thx,\nI have solved the problem.\n. Most of our developers are using cnpminstead of \"npm\", its a 3rd party open command, butcnpmhas a lot of unpredictable mistakes, I  just uninstalled node.js and npm, then its soved. \n@black-snow Thank you very much, I am constantly learning\uff01\u3002. ",
    "javeedrahman": "Hi @black-snow i am using this, but i am using this boilerplate. want to create packages for other platforms. i am in ubuntu, i have installed wine and mono.. What's the output when packaging?\nIt's packaging only my native platform (ubuntu) i am expecting windows NSIS to be built in dist/ folder.\nI have installed Wine and Mono, . @black-snow okay will confirm the link. As i have go-through, it is best to build the app with the native OS so i am going with that, Hope electron builder multi-platform will work fine but i have not tried, hence closing this issues. Hi @black-snow Thank you for your valuable response.\nThis is my mistake. Its working fine now. I have used app.getAppPath() instead of app.getPath('userData')\nvar electron = require('electron');\nconst app = electron.remote.app;\nvar userData = app.getAppPath('userData');   <-------- Here i made issues this is app.getPath('userData')\ndb = new Datastore({ filename: userData+'/db/persons.db', autoload: true });\nI have tested the build in MAC, LINUX UBUNTU and WINDOWS. working fine.\nHow come/tmp/.mount_xyz/whatever is your userData path? Are you using docker or linux subsystem on windows or something like that? -----> I printing console.log of app.getAppPath('userData'); that's why its showing /tmp/.mount_xyz/whatever\nThank You :). @black-snow Thank you :+1: . ",
    "alexstrat": "Sorry wrong base repo :). ",
    "cmpsoares91": "2017-05-19T17_50_30_285Z-debug.log.txt\n. ",
    "nagarjunbn": "Same error . Did you fix the error @cmpsoares91 ? . ",
    "maikelmclauflin": "it's inside bundle.js. ",
    "eyemen": "It was a windows issue :), thanks anyway. ",
    "dland512": "Looks like that fixed it, thanks!\n. ",
    "landon9720": "Thank you. Globally installing https://www.npmjs.com/package/windows-build-tools did the trick.. ",
    "KennyBarraud": "Never mind ! I find how to do it ! Sorry :p. ",
    "anubhavsahoo": "Sure.\nI encountered this issue when I had a statement similar to the following line of code\nexport default const foo = 'bar'\nThe above line is obviously(now i know) an illegal declaration.  This line of code results in a pretty vague error message like this:\n```\n[12:39:41] 'bundle' errored after 106 ms\n[12:39:41] Error: Unexpected token\n    at error (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:177:12)\n    at Module.error$1 [as error] (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8434:2)\n    at tryParse (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8133:10)\n    at new Module (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8169:14)\n    at /home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:10010:17\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n    at Module.runMain (module.js:606:11)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\n```\nSpecifically, the above error dump doesnt point out the exact line no. and filename where this error was encountered. That was the frustrating part.\n. Yes it does. The error log looks like the following:\n```\n[12:34:15] Finished 'watch' after 12 ms\n{ Error: Unexpected token\n    at error (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:177:12)\n    at Module.error$1 [as error] (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8434:2)\n    at tryParse (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8133:10)\n    at new Module (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8169:14)\n    at /home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:10010:17\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n    at Module.runMain (module.js:606:11)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\n  code: 'PARSE_ERROR',\n  pos: 1082,\n  loc: \n   { file: '/home/loneranger/code/ebooks-project/electron-boilerplate/src/app.js',\n     line: 32,\n     column: 15 },\n  frame: '30: document.querySelector(\\'#electron-version\\').innerHTML = process.versions.electron;\\n31: \\n32: export default const foo = \\'bar\\';\\n                   ^\\n33: \\n34: // const foo = bar.val();' }\n[12:34:15] 'bundle' errored after 99 ms\n[12:34:15] Error: Unexpected token\n    at error (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:177:12)\n    at Module.error$1 [as error] (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8434:2)\n    at tryParse (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8133:10)\n    at new Module (/home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:8169:14)\n    at /home/loneranger/code/ebooks-project/electron-boilerplate/node_modules/rollup/dist/rollup.js:10010:17\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n    at Module.runMain (module.js:606:11)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\n[12:34:15] Finished 'less' after 216 ms\n```\nYou are right about re-throwing the error. When the error is re-thrown, the bundle task is shown as having failed as well. But just re-throwing and not logging at the task level, does not print the filename and line number. So I would recommend including both the logging and throwing statements.. Yeah. Webpack also supports a wider range of bundling and has better out-of-the box functionalities.. ",
    "akhilsahu": "The onclick does not work here. Any link or anchor tag or using javascript. It doesnt redirect to other page.. Like if you put a link on the page like the electron link on the initial application. when you click it should open on the same page as it is chromium rather it opens up on the default browser redirection. ",
    "shareworlds": "There are 3 folder with names in node_modules.\n_minimatch@0.2.14@minimatch\n_minimatch@2.0.10@minimatch\n_minimatch@3.0.4@minimatch\nBut It can't be see in win-unpacked folder. there is not minimatch dll in unpakced folder.. env_production.json\n{\n  \"name\": \"production\",\n  \"description\": \"Add here any environment specific stuff you like.\"\n}. package.json\n{\n  \"name\": \"electron-boilerplate\",\n  \"productName\": \"Electron Boilerplate\",\n  \"description\": \"Starter for your Electron application\",\n  \"version\": \"0.0.0\",\n  \"author\": \"Mr. Gumby mr.gumby@example.com\",\n  \"copyright\": \"\u00a9 2017, Gumby inc.\",\n  \"homepage\": \"http://example.com\",\n  \"license\": \"MIT\",\n  \"main\": \"app/background.js\",\n  \"build\": {\n    \"appId\": \"com.example.electron-boilerplate\",\n    \"files\": [\n      \"app//*\",\n      \"node_modules//*\",\n      \"package.json\"\n    ],\n    \"publish\": null\n  },\n  \"scripts\": {\n    \"postinstall\": \"install-app-deps\",\n    \"build\": \"gulp build\",\n    \"prerelease\": \"gulp build --env=production\",\n    \"release\": \"build\",\n    \"start\": \"gulp start\",\n    \"pretest\": \"gulp build-unit --env=test\",\n    \"test\": \"electron-mocha app/specs.js.autogenerated --renderer --require source-map-support/register\",\n    \"coverage\": \"npm test -- -R scripts/istanbul-reporter\",\n    \"pree2e\": \"gulp build-e2e --env=test\",\n    \"e2e\": \"mocha app/e2e.js.autogenerated --require source-map-support/register\"\n  },\n  \"dependencies\": {\n    \"fs-jetpack\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.0\",\n    \"electron\": \"^1.6.11\",\n    \"electron-builder\": \"^19.16.0\",\n    \"electron-mocha\": \"^4.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-batch\": \"^1.0.5\",\n    \"gulp-less\": \"^3.3.2\",\n    \"gulp-plumber\": \"^1.1.0\",\n    \"gulp-util\": \"^3.0.8\",\n    \"gulp-watch\": \"^4.3.11\",\n    \"istanbul\": \"^0.4.5\",\n    \"minimist\": \"^1.2.0\",\n    \"mocha\": \"^3.4.2\",\n    \"rollup\": \"^0.45.2\",\n    \"rollup-plugin-istanbul\": \"^1.1.0\",\n    \"source-map-support\": \"^0.4.15\",\n    \"spectron\": \"^3.7.2\"\n  }\n}\n. this is demo i download from git, does it need to add \"minmatch\" in dependencies default?\nhttps://github.com/szwacz/electron-boilerplate.git. Thank you for your time.. ",
    "iamwelk": "it's useless for me.... ",
    "7elevenseven": "@black-snow This changed nothing and is inside a $(document).on('click', '.class', function(event) {. I have actionListener.js inside I create a new window with a click on element, this is also my main thread. \nI add HTML-content dynamically, with ipc I will found out with element I've clicked.\nPastebin:\nhttps://pastebin.com/MWB314Vw\nOr I misunterstand electron-boilerplate, background.js is main thread and app.js is the renderer thread. I've a main window, with a click on a nav-element I open a new window. I need infos of the main window in the new window. \nMy app.js render the first window, also main window:\nhttps://pastebin.com/NN7S0j0v\nFrom the actionListener get the nav-element the click operation.\nWith load I add content dynamically. \nI've a profile wrapper for the dynamic content: \nhttps://pastebin.com/6ZTs6JGC\nWith the new window, I load a new javascript file <script src=\"../js/profile/animal.js\"></script>\nThe ipcRenderer, also animal.js:\nhttps://pastebin.com/VLjWprWF\n. @black-snow Thanks a lot. . ",
    "sibi-ravindran": "Yeah I have caught myself doing that too :)\nBut in this case, I am changing the code in src/background.js. However the window size does not change even if the 'width' parameter in the 'const mainWindow' is 1000 or 200. . ",
    "folknor": "$ cat package-lock.json | jq '.dependencies.electron'\n{\n  \"version\": \"1.7.9\",\n  \"resolved\": \"https://registry.npmjs.org/electron/-/electron-1.7.9.tgz\",\n  \"integrity\": \"sha1-rdVOn4+D7QL2UZ7BATX2mLGTNs8=\",\n  \"dev\": true,\n  \"requires\": {\n    \"@types/node\": \"7.0.46\",\n    \"electron-download\": \"3.3.0\",\n    \"extract-zip\": \"1.6.6\"\n  }\n}\nI use X with the nvidia blob driver. I can certainly spin up a VM with a fresh ISO and node 8 and test that if you want?\nOr I can possibly nuke node9 and  ~/.npm and try with node8 if you want.. Unfortunately I get the same result after\n1. rm -rf ~/.npm\n2. sudo apt --purge remove nodejs\n3. sudo sed -i 's/9.x/8.x/g' /etc/apt/sources.list.d/nodesource.list\n4. sudo apt update && sudo apt install nodejs\n5. rm -rf ~/Projects/electron-boilerplate\nAnd then repeat the README instructions.\n$ npm --version\n5.5.1\n$ nodejs --version\nv8.9.1. I get exactly the same result (nothing happens) with https://github.com/sindresorhus/electron-boilerplate. I've tried a lot of things now, including (1) a completely fresh ISO of ubuntu in a virtual machine using node 8 and node 9, (2) nuking all the /usr/lib/node_modules and ~/.npm, (3) npm cache verify and npm cache clean --force, and I've tried (4) https://github.com/electron/electron-quick-start, and (5) installing electron globally with npm install -g --verbose electron and invoking from the project folder as electron ., (6) and invoking it from the project folders with ./node_modules/.bin/electron ., and a few other things.\nNothing works, and I either get:\n1. No tty output + zero logging output anywhere\n2. This stdout/err:\n```\n/home/folk/Projects/electron-boilerplate/node_modules/electron/index.js:9\n  throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again')\n  ^\nError: Electron failed to install correctly, please delete node_modules/electron and try installing again\n    at Object. (/home/folk/Projects/electron-boilerplate/node_modules/electron/index.js:9:9)\n    at Module._compile (module.js:641:30)\n    at Object.Module._extensions..js (module.js:652:10)\n    at Module.load (module.js:560:32)\n    at tryModuleLoad (module.js:503:12)\n    at Function.Module._load (module.js:495:3)\n    at Module.require (module.js:585:17)\n    at require (internal/module.js:11:18)\n    at Object. (/home/folk/Projects/electron-boilerplate/node_modules/electron/cli.js:3:16)\n    at Module._compile (module.js:641:30)\n```\nJust obviously with different messages depending on if I use your boilerplate, sindresorhus, or the electron-quick-start one.\nThen, I tried the following:\n1. cd ~/Projects && rm -rf electron-boilerplate\n2. git clone https://github.com/szwacz/electron-boilerplate\n3. sudo apt install yarn\n4. yarn --version prints 1.3.2\n5. cd electron-boilerplate\n6. yarn install\n7. yarn start\nAnd everything works perfectly, both on node 8.x and 9.1.\nHere is the output of yarn install on node 9.1:\n$ yarn install\nyarn install v1.3.2\ninfo No lockfile found.\n[1/4] Resolving packages...\nwarning electron > electron-download > nugget > progress-stream > through2 > xtend > object-keys@0.4.0: \n[2/4] Fetching packages...\ninfo 7zip-bin-mac@1.0.1: The platform \"linux\" is incompatible with this module.\ninfo \"7zip-bin-mac@1.0.1\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo 7zip-bin-win@2.1.1: The platform \"linux\" is incompatible with this module.\ninfo \"7zip-bin-win@2.1.1\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.1.3: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.1.3\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\n$ electron-builder install-app-deps\nelectron-builder 19.45.4\nNo native production dependencies\nDone in 38.11s.. Alright, I'll go one down the chain and report it to electron. Although I did already mention it in #atom-shell on freenode a few days ago, and noone has (1) answered me, or (2) said anything in the channel since. There are 40+ people who idle in the channel.\nI also mentioned the fact that yarn \"fixed\" it for me, and noone has replied to that, and noone else has said anything in the channel since.\nSo maaaaybe I should report it directly to nodejs/npm.. ",
    "mikeyb": "Try using nvm with the lts/carbon version nvm install lts/carbon\nBoilerplate works just fine under linux using non-distro npm for me. ",
    "hevilp": "The path is correct, since it gets loaded with npm start. After building it is not shown up. Oh, I added\n\"src/*\",\nunder package.json build / files and it is working :). ",
    "KatSick": "same for me. ",
    "themroberts": "Same issue for me. It appears that resources is only available for building and not the application. My workaround is creating a static directory in /app\nThen add the following when creating the tray.\nconst tray = new Tray(`${__dirname}/static/icons/512x512.png`);. ",
    "ErraticFox": "I was unaware at the time of asking this haha. I did figure it out, I needed to set target: 'electron-renderer' in webpack.config.js . ",
    "carlowahlstedt": "Looking at it later, it seems like there might actually be hot reloading but I broke it in some changes? Either way, I'll just close this for now. I did look at that one, but was still pretty lost.. ",
    "DeekshithShetty": "@black-snow Yes I believe so. Or else we could have a forEach loop that adds the object for each of the html files.. Yes I agree. We could automate it by fetching .html files using a regex. If we don't automate this, we would end up manually adding entries in .gitignore file. Updated the code to fetch .html files.. ",
    "feeva": "It's odd as I myself prefer spaces to tabs and I setup up my VS Code as such.\nAnyhow, your guess about my OS choice is right and I may test in other OSes and modify the code style if you are willing to accept this PR.\n. ",
    "TimvdEijnden": "are you missing a gulp here?\n. Ok i'm sorry, build command was failing for me. \ud83d\ude48 \n. ",
    "tingletech": "Trailing commas in objects were introduced in ECMAScript 5, and seem to be the style of this file \nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas. "
}