{
    "codegangsta": "This will actually be part of the Action Layer, which will be executed after all middleware. This makes stacking a lot easier\n. The other option is to wrap our responsewriter and check to see if it is written to on iterations. This would be pretty intuitive\n. I think this will be better to do later. It might be too confusing to have a optional development server for martini\n. Thanks for that find. Is it because PORT is reserved for other usage on app engine? Martini is an http.Handler So you can have your own http server instance plug into martini if you would like.\n. http://godoc.org/github.com/codegangsta/martini#Martini.ServeHTTP is the link to the doc\n. Not sure I want this anymore. Helper utils can be in martini-contrib\n. done and done\n. landed. Closing this issue\n. also. it would be great to have a default favicon. Maybe generate one with go bin-data\n. This might not be needed immediately since we have static middleware by default. It still would be useful to have this though\n. closing this and moving it to martini-contrib\n. Looks like we can just use the fileserver handler. Freaking beautiful\n. Unfortunately The fileserver middleware throws a 404 if there is no match, which means we will need to roll our own\n. Easy peasy\n. I think I am going to go with drone.io for this one\n. All good points. I will keep this in mind when designing this handler\n. Moving this to martini-contrib. #44 solves the 404 issue somewhat on a Martini core level\n. I'm going to take care of this now\n. ditching this idea. Although there is no explicit documentation. This semantic is not close enough to the vanilla http.ResponseWriter Implementation.\n. This looks like a great improvement! I will check this out more thoroughly in the morning.\n. Cool. nice commit. A couple notes:\n- I think for now we should stick util.go in auth since that is where it may be used most. We may choose to move it later. Possibly into a helper function (see #13)\n- This code needs to be formatted. Since the code is in a subpackage (extras/auth) you will need to fmt with go fmt ./.... This same concept applies to testing with multiple packages as well go test ./...\n. Also, one question for you as a developer:\nDoes the extras make sense to you or should I rename it to contrib? I have also been debating whether or not the contrib package should be a part of the core repo. I will have to check out the semantics for go get. (we shouldn't be pulling in all the deps associated with contrib to just use Martini)\n. Oh you are totally right. The Github diffs threw me off\n. @bemurphy I pulled auth out of extras. Auth is still it's own package. But exists in the repo\n. @bemurphy Is this sucker ready to go?\n. :+1:  merging\n. Thanks for the contribution.\n. Love it! Thanks\n. This is an interesting suggestion. I will have to think about how I want to approach the API for this, as the route regex is compiled when the route is created\n. Yup. Close it out!\n. Nice catch. Fixed in the readme\n. Awesome. Thanks for fixing the typo\n. Thanks for the contribution. Reviewing this now\n. Got a couple of nits! Thanks again for putting this PR up\n. @DisposaBoy Great point.\nI'm leaning toward option 2 at the moment. I want to keep the default handlers in Martini pretty vanilla and most of all compatible with the majority of terminals. If someone really wants color they can roll their own logging handler or use a more advanced one from martini-contrib.\nLets nuke it.\n@mattn if you want the contribution add a commit to remove the escapes altogether. Otherwise I can nuke them myself.\n. Cool. I will remove them for now\n. That looks like a pretty odd error to me. What version of Go are you running? (go version)\n. I updated the readme to require go 1.1\nThanks for investigating this.\n. Love it! Thanks for playing with it on GAE. Merging\n. hey @mholt. Thanks for putting your best foot forward and converting these tests over. I love what you guys have done with GoConvey and am excited to start using it in all my Go web applications.\nFor the sake of keeping the core Martini package clean, I don't want to pull in any other dependencies at this time. Please shoot me an email though because I have some ideas on how Martini/GoConvey can collaborate together. You guys are awesome and I really look forward to working with you soon!\n. FYI: My email is on my GitHub profile\n. I'm not a super huge fan of benchmarks like these. But if someone put some stats together that exposed some major performance issues in Martini I would gladly take that feedback into consideration when optimizing the code.\nAgain, Martini is pretty thin on top of the http package, only possible performance issue sticking in my mind is the use of reflection. We are currently not cacheing reflection values. Again, without stats I really don't know whether or not it is worth optimizing at the moment. \n. I totally side with Matt here. Benchmarks are typically a bad metric to measure value of a web technology. That being said I will make sure Martini will be optimized in the places where it makes sense to optimize. Martini is about fun programming and good application architecture, not extreme performance.\nSent from my iPhone\n\nOn Nov 25, 2013, at 5:01 PM, Matt Silverlock notifications@github.com wrote:\nTo add to what Dave said: use https://github.com/wg/wrk or \nhttps://github.com/lighttpd/weighttp - I much prefer wrk, though. \nPS: Like I said upthread, \"reliable\" benchmarks are a minefield. Lots of \nnew users are swayed by them in cases where a) the benchmark is faulty or \nb) the relative \"slowness\" will never (ever) affect their application \nbecause few of us smash tens of thousands of req/s. \nOn Tue, Nov 26, 2013 at 8:57 AM, Dave Cheney notifications@github.comwrote: \n\nplease god no, no benchmarks with ab \nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock \nnotifications@github.comwrote: \n\n@cgarvis https://github.com/cgarvis Do you have the source for that? \n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource \ndefaults. \nYou should be able to generate a magnitude more requests per second with \nsome tuning. \n\u2014 \nReply to this email directly or view it on GitHub< \nhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299> \n. \n\n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258419 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. I put together a naive benchmark of reflection overhead specifically. Some people seem to be misinformed that reflection is going to significantly slow down their web app.\n\n\nhttps://gist.github.com/codegangsta/7678025\nBenchmarkFunctionCall 2000000000 0.57 ns/op\nBenchmarkReflectCall 5000000 380 ns/op\nBenchmarkInvoke 5000000 538 ns/op\nRaw function call compared to a reflect call compared to an injector.Invoke call.\nI'm sure you are thinking ZOMG 10X slower. But we are talking nanoseconds here. A typical Martini request will probably rack up anywhere between 5 and 15 invoke calls. If anyone considers a couple microseconds per-request too much of an overhead then you are not solving the same problems I am :)\nAlso feel free to call me out on this benchmark, it is a pretty naive one.\n. closing out as there are a couple of benchmarks already published. namely https://github.com/cypriss/golang-mux-benchmark/\n. This looks awesome so far. Very nice work!\nThe *RequireError bit is interesting. I will look into this in more detail in a little bit\n. Seriously this is great stuff. I can't wait to merge it in\n. testing this out and then I will merge\n. Yup. My initial thought is the Router interface can have a NotFound method that takes a Handler. We can have a default Handler that does the same thing Martini does now, but we should be able to swap them out easily.\n. I'm taking a look at this one this weekend\n. Yup. The wrapped handler needs to to implement http.Hijackerinterface. It currently does not. Below is a relevant thread on Golang-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/zq_i3Hf7Nbs\nI definitely want to see this in Martini. It will add a lot of value.\n. Hah whoops. I totally overlooked that. Thanks got catching that\n. I will put the Go version requirement in the docs\nSent from my iPhone\n\nOn Nov 15, 2013, at 4:54 PM, Dave Cheney notifications@github.com wrote:\nWhich version of Go are you using? You need at least Go 1.1 \n\nOn 16 Nov 2013, at 11:48, 00001 notifications@github.com wrote: \ngo get github.com/codegangsta/martini \ngithub.com/codegangsta/martini \nDropbox/go/src/github.com/codegangsta/martini/martini.go:94: method r.Handle is not an expression, must be called \nDropbox/go/src/github.com/codegangsta/martini/router.go:58: method route.handle is not an expression, must be called \nThe last commit was 3302320 \n\u2014 \nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. @davecheney I can't find any docs on how build constraints work with regards to go version. Does // +build !go1.1 mean 1.1 and later? or do I need to include 1.2 as well?\n\n\nDo the build constraints contain tags for patch-level versions of go as well as major/minor? \n. closing this. and adding a followup issue for @davecheney 's suggestion\n. I think @DisposaBoy has a point here. Run() is meant to be a convenience function to quickly get started, but is not attempting to solve most use cases. I think the real issue here is a documentation one.\nI don't want to try and abstract away the http interface unless we have really good reason to.\nI can update the documentation to push toward using http.ListenAndServe() for more configuration unless you feel like taking a crack at it @DrBenton \n. I agree that Run has a purpose, and I want to keep it clean and simple. I'm closing this issue and updating the readme with more information\n. @tobstarr Yeah it looks like the issue here is that we are triggering a parser error instead of a compiler error. I'm going to change the check so it can get past the parser stage. I will throw up a PR momentarily\n. I haven't seen it before, but I will check it out. Might be a bug in the static handler\nSent from my iPhone\n\nOn Nov 16, 2013, at 9:36 AM, Brent Anderson notifications@github.com wrote:\npackage main\nimport \"github.com/codegangsta/martini\"\nfunc main() {\n  m := martini.Classic()\n  m.Get(\"/\", func() string {\n    return \"Hello world!\"\n  })\n  m.Run()\n}\nBuilding, running and then browsing :3000 initiates a download of the built executable (5.3MB). Changing the path to '/test' and browsing :3000/test will return \"Hello world!\". This is on OSX Mavericks and tested with Go 1.1 and Go 1.2.\nRunning the default net/http server example on :3000 work just fine.\nThis is pretty bizarre behavior. Have you seen it before?\n\u2014\nReply to this email directly or view it on GitHub.\n. Looking into this now\n. I am not able to reproduce this with the latest version of martini (af1b7cc056f750f9a0bac2104078edc7b01e0c88). This does seem like very odd behavior, and very insecure. If you could give me a little more information (log output, sample program, test case) it would be greatly appreciated\n. Hah, yeah that would be the only thing I can think of at the moment\n\nOn Sat, Nov 16, 2013 at 10:55 AM, DisposaBoy notifications@github.comwrote:\n\nis the binary named public by any chance. e.g. you put main.go in a\ndirectory called public and then called go build or used a tool that does\nto run it\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/50#issuecomment-28633127\n.\n. @brentmn Not to much to do except documentation. Closing this issue out\n. Can you give an example? Martini supports regex routing.\n. Ah thanks! It looks like I totAlly glazed over http.Dir. I'm out right now but I will take a look at this soon\n\nSent from my iPhone\n\nOn Nov 16, 2013, at 12:09 PM, DisposaBoy notifications@github.com wrote:\nI was mostly curious why you didn't use http.Dir. It handles some basic exploit checks etc.\nYou can merge this Pull Request by running\ngit pull https://github.com/DisposaBoy/martini patch-1\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/52\nCommit Summary\nRe-use http.Dir for file handling\nFile Changes\nM static.go (22)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/52.patch\nhttps://github.com/codegangsta/martini/pull/52.diff\n. It makes sense to discard the first error for now. Merging.\n. Unfortunately I can't license the site as MIT. Thanks for the reminder that it is missing a license though. I will update the repository with the appropriate license file.\n\nSent from my iPhone\n\nOn Nov 16, 2013, at 2:37 PM, Max Ogden notifications@github.com wrote:\nquick question,\nis the gh-pages branch supposed to be MIT licensed too?\nthanks\n\u2014\nReply to this email directly or view it on GitHub.\n. I added an MIT license to the gh-pages branch\n. @dylziez Documentation is included as part of the MIT license terms\n. Thanks for the contribution. I recently merged PR #52 that changed static.go. This is a welcome addition so please rebase against current master and resolve any conflicts. Thanks\n. thanks, I will check this out\n. Thanks for the PR!\n. Yup. we would love to have a gzip middleware added as a contribution\n. @ekanna I added an issue in the martini-contrib repo:\n\nhttps://github.com/codegangsta/martini-contrib/issues/3\nClosing this one out\n. merging this.\n. :+1: \n. I'm on this one\n. This would be nice to have. I'm not sure that Martini fits all of the specifications to make for very useful swagger documentation. Swagger is based on REST principals. And while you can create RESTful web services in Martini it is not imposed on you.\n. Yeah, I can do a little more research on this. There has been some work in #76 that will possibly let a third party package have enough access to the routing layer to create a good Swagger integration\n. I believe martini is able to support this with the routes service. If somebody wants to create a package to support martini and swagger they are more than welcome to. Closing this issue for now to keep the issue tracker clean\n. :) yeah the issue has been here forever \nSent from my iPhone\n\nOn Aug 3, 2014, at 3:23 AM, Stefan notifications@github.com wrote:\nI believe... uh ... if somebody... um, well... closing this issue for now to keep the issue tracker clean\nI don't mean any harm, but... um... LOL ;-)\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for taking a stab at this. I will review later today :smile: \n. More and more I am seeing the problem crop up where the responsewriter has to be wrapped and every time we have to implement all of the methods. I'm starting to think we need to create a generic WrappedResponseWriter that can be embedded into other structs. The benefit of having a WrappedResponseWriter is that we can implement Hijacker and other Interfaces there. This will allow for a safe environment to try type assertions. It will also clean up the many places we will possibly wrap the responsewriter.\n. @noonat I'm gonna spend some time to thing about this dilemma\n. I put up #71 to create a better jumping off point for this issue. We can have our martini.ResponseWriter implement http.Hijacker\n. Thanks! I will likely check this out tomorrow since I am out for most of the day today\n\nSent from my iPhone\n\nOn Nov 21, 2013, at 12:56 PM, Nathan Ostgard notifications@github.com wrote:\nRebased and updated the code. Is f6bb688 closer to what you want?\nAlso -- not sure how you feel about using the hijackableResponse for the test. If you'd like me to use httptest.NewServer for the unit test instead, I can do that.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm fine with how you are testing in for now. Merging this\n. One nit. Fix that and I will land it. Great contribution!\n. pulling it down to play with it\n. Dude this is awesome. Love it\n. merged from rebase\n. done and done!\n. Thanks for filing this. It looks like we are doing a filepath.Join where we are not supposed to.\n\nhttp://golang.org/src/pkg/net/http/fs.go#L314\nLooks like the http.FileServer just concats \"/index.html\" and checks for that. Do you get good results when that is done?\n. @f-dumont you can just say \"closes\" #68 (without quotes) in the PR and it will close when the PR has landed\n. I might have to think about this for a little bit. I know it is definitely useful. The good news is that it can be worked around with multiple martini apps.\n. Looking into this\n. I fixed it up. Thanks for the help in figuring this out :)\n. Landing this\n. Cool! be sure to add PATCH to the readme under the routing section and I will merge this in.\nalso, relevant conversation on golang-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/GjngdEKsUXA\n. pulling this down\n. yeah it still doesn't stop us from putting it in the router\n. BAM. Thanks for the contribution!\n. oh whoops totally missed this one. Looking at it now\n. not quite sure how I feel about this. One one hand it is very convenient, on the other hand it muddles up our return value handling even more. At this moment I am wary of merging this in. There might be a better way to accomplish this through a service that could easily handle errors.\ngo\nm.Get(\"/\", func(e martini.ErrorHandler){\n  err, _ = doSomething()\n  e.Check(err) // throw 500 if err != nil\n})\nThat can actually clean up code even more since it removes the need to check errors.\nCome to think of it, a package like that would do really well in the martini-contrib repo\n. This is a welcome change. merging\n. you can map whatever *log.Logger you want via Map()\ngo\nm := martini.Classic()\nmyLogger := log.Logger(...)\nm.Map(myLogger)\n. This is actually a pretty good idea. I will take a look at this soon\n. Cool! I will check this out tomorrow morning!\n. So I have been using this for a couple of routes, and it honestly feels a little bit clunky and not too Go-like.\nI think the thing that trips me up is the naming a route with a string when we are getting a route type back from routing now anyway. Something like this might be more idiomatic Go.\n``` go\nm := martini.Classic()\nLessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"\n})\nm.Get(\"/\", func(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42))\n})\n```\nThis should simplify the code a bit more. I can make these changes if you want. Great work btw!\n. Yeah. Your routes would obviously have to be put in global variables or\nexported from the package they are declared in. I think this approach is\ngood for a couple reasons:\n1. No need to name any route you want to reference.\n2. The compiler will bomb when a route name is changed, prompting any\n   references to be renamed.\nI do understand what you are saying though, it is a developer discretion\nkind of thing. If you want access to your route object you need to make\nsure it is available.\nOn Sun, Nov 24, 2013 at 12:36 PM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\n@codegangsta https://github.com/codegangsta the only problem I see with\nyour approach is that if you have the route handler in another file you\nwon't be able to get the route.\nmain.go\nm := martini.Classic()LessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"})\nm.Get(\"/\", myFancyHandler)\nwhatever.go\nfunc(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42)) // You don't have access to LessonRoute here}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/76#issuecomment-29165268\n.\n. Cool! Thanks for your patience. I know I am a bit picky :)\n. Awesome! Will look at it soon.\n\nSent from my iPhone\n\nOn Nov 25, 2013, at 9:16 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nDone!\n\u2014\nReply to this email directly or view it on GitHub.\n. I will be able to land this tomorrow morning!\n. code landed via rebase. Closing\n. landing\n. I'm currently working on a render service in martini-contrib https://github.com/codegangsta/martini-contrib/blob/JMS-Render/render/render.go#L28\n\nIt injects a service that you can use to render json/html templates easily. I think this is what you are looking for. This is how I hope it will work:\n``` go\ntype Greeting struct{\n  Salutation string\n  Name string\n}\nfunc main() {\n  m := martini.Classic()\n  m.Use(render.Renderer())\nm.Get(\"/\", func(r render.Render) {\n    render.JSON(200, Greeting{\"hello\", \"world\"})\n  })\n}\n```\n. Package has dropped in martini-contrib:\nhttps://github.com/codegangsta/martini-contrib/tree/master/render\nClosing this issue\n. Yup. there are slight differences between middleware handlers and routing handlers. There is definite crossover in functionality. I agree that the documentation could be improved. So I am going to rename this issue.\n. Next now works in routing middleware. Closing\n. We do have a mailing list. It is pretty active. https://github.com/codegangsta/martini#getting-help \nWe can move this conversation to https://groups.google.com/forum/#!forum/martini-go\nWould a #freenode channel be beneficial as well?\n. I am hesitant to merge something like this in. This subtly changes the way martini works on a very foundational level.\nI think a better way to think about this solution would be to support context.Next() inside the route handler stack. This will make it more consistent with the middleware API, which in turn would make handlers with Next() compatible as route or middleware handlers.\n. btw I do believe this functionality needs to be in Martini. It is just the execution that bothers me\n. Yup. that would essentially be it. I can look into adding Next() support for the router later tonight. This will be a much more consistent approach. I created #84 to track the issue\n. I got this one\n. I'm going to sit on this until the morning. But so far it looks like it works\n. Landing.\n. I discovered something similar when working on #85. It should work with latest master now, Make sure you have the ResponseWriter wrapped properly\n. @benkraus are you still having this issue with the latest master?\n. works for me\n. Run() is just a convenience function. For anything non trivial, you should be calling http.ListenAndServe yourself since a Martini instance is an http.Handler\nWe panic() in some places so we can retain the http.Handler interface, which does not have any return values.\nSent from my iPhone\n\nOn Aug 9, 2014, at 11:56 AM, Kiyoshi Murata notifications@github.com wrote:\nsorry to bump this, but I have a concern here regarding cleaning before termination.\nmartini (or any other piece of code that does not own main.main, for that matter) should never os.Exit() (as log.Fatal* does) or panic().\nthere's no way the client code can recover from such errors and If it's allocating resources, spawning go routines, listening for other connections, connecting to remote servers, simply defer()ing, or whatever one ever wants to do before calling Run*(), then these resources might be in an inconsistent state on exit.\nI think that returning the error should be the correct approach here. I see that there are other places (handler binding, I think) that use panic(). I think these too should bubble up an error all the way to Run*(), if possible.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome. This looks pretty sweet. I will review this very soon\n. I'm going to add a readme entry for this and then land it\n. Excellent. I will try this out tonight\n. cool. this + the recent glob routing makes virtual servers much easier to handle. I will pull this down and try it out soon\n. Please rebase this. and I will land it\n. Nice work on this @Archs !\n\nThanks for the contribution.\n. @icholy I don't care. it can be in one PR\n. kk. I need to make sure the buildbox is running 1.1.2 which introduced path.Join\n. hmmm. failed on build server but they are running 1.1.2. I'm looking into this\n. oh wait. nvm. I can make the change It was a namespace conflict\n. build passing now\n. http://audiojungle.net/item/i-bring-you-flowers/4603948\n. @aybabtme I would recommend just leaving the defer file.Close() as is. No need to panic if we can't close a file. \n. Awesome! Merging\n. Nice cleanup. Thanks for the contribution\n. Nothing at the moment. You can check out the martini-contrib repo if you have any ideas for a middleware\n. Thanks for the contribution!\n. Added comment on #96\n. closing\n. Thanks for taking the time to put this together. Unfortunately I don't think this should be brought in to martini core. \nThe Run function is more of a convenience method for getting up and running quickly. The Martini interface implements http.Handler so users can set up listening in whatever way they want.\nA better place for this would be in the readme FAQ section outlining how to integrate with a unix socket.\n. closing this\n. I would prefer not to remove the go 1.0.x check. If we can maintain that with fixing the godoc formatting I am game\n. closing this for now until we find a better way to fix this\n. good idea. I should add sinatra to the mix as well. That way express, sinatra, and martini can all cuddle together in the \"elegant webframework\" space.\n. A good place for it would be in the about section of the README.\n. Ah yup. Thanks for the reminder\n. This is because header cannot be written after a response has been written. This is a net/http thing. You will have to wrap the responsewriter to accomplish what you want here\nSent from my iPhone\n\nOn Dec 2, 2013, at 10:41 PM, benkraus notifications@github.com wrote:\nI was trying to use a service that defaulted everything to json by building a handler like this:\nfunc Json() martini.Handler {\n    return func(res http.ResponseWriter, c martini.Context) {\n        c.Next()\n// if the content type header hasn't been set by the time the handler is done executing, default it to json\n    if res.Header().Get(ContentType) == \"\" {\n        res.Header().Set(ContentType, ApplicationJson) // default the content type to json if the handler didn't specify it\n    }\n}\n}\nThat doesn't work though, and even commenting out the if statement doesn't do the trick. It works however if I write the header before the c.Next() function call. What I was going for, was having the ability to just default every request to json, but if the handler specified a specific content type in the event it needed to be an image, or text, or whatever, we would use that rather than json. Is there another way I need to be doing this? From the looks of it, this should work.\n\u2014\nReply to this email directly or view it on GitHub.\n. That is up for the middleware to handle. We are doing it in multiple places. The gzip handler is a pretty good example\n\nSent from my iPhone\n\nOn Dec 3, 2013, at 9:23 PM, benkraus notifications@github.com wrote:\nI take it then, without looking at the code, that the response gets written after the handler func executes, not after any middleware handlers have been called? It might be nice to have it write the response after any registered middleware handlers, that way middleware can not only modify the request, but the outgoing response, too, in the manner I described.\n\u2014\nReply to this email directly or view it on GitHub.\n. It is a remnant of the original code before we had NewResponseWriter(). It could be removed in favor of a type assertion to martini.ResponseWriter\n. Nice catch btw\n. IMO it is not worth giving up the modularity because of a 10% hit.\n\nWith the martini-contrib prefix package we can actually have a silo'd off martini.Static handler. That way you won't run through the system call but still be able to serve static assets under a particular route prefix.\nAll that said, I think it is fine the way it is now. If it becomes a huge bottleneck there are certainly options\n. Yes you can serve static files that way already if you want to.\nOn Tue, Dec 3, 2013 at 6:16 PM, guotie notifications@github.com wrote:\n\ncan serve static files like this:\nm.Get(\"/assets/*\", martini.Static(\"assets\"))\nthen, static file serve in Router module.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/101#issuecomment-29772008\n.\n. closing\n. it is a string because of the ENV variable mapping. so somebody can export the environment variable like so:\n\n$ export MARTINI_ENV=\"production\"\n. I feel like this may be a case of premature optimization. If string\ncomparison does in fact become a bottleneck I will be sure to make sure\nmartini.Env is an int type.\nOn Tue, Dec 3, 2013 at 6:09 PM, guotie notifications@github.com wrote:\n\nyes, MARTINI_ENV should be strings, but ENV can be int\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/102#issuecomment-29771670\n.\n. You are right, they absolutely should\n\nSent from my iPhone\n\nOn Dec 3, 2013, at 11:19 PM, Ask Bj\u00f8rn Hansen notifications@github.com wrote:\nIt looks like I have to specifically setup HEAD request handlers to have them work. They should automatically map to GET requests.\n\u2014\nReply to this email directly or view it on GitHub.\n. closing. This was fixed in #117 \n. Whoops, I meant #118. Thanks for the correction\n\nSent from my iPhone\n\nOn Dec 15, 2013, at 5:45 PM, Ask Bj\u00f8rn Hansen notifications@github.com wrote:\nAt a glance I don't think #117 fixed the same issue I reported.\n\u2014\nReply to this email directly or view it on GitHub.\n. I like this. Definitely more flexibility and consistency. Gonna pull it down and try it out\n. Awesome work on this. Nice and clean. API consistency is a beautiful thing\n. Nice! I will look at this later today\n. Thanks for the contribution @alecthomas! Nice and clean + tests == no nits\n. Try m.Any(\"/data/**\", auth)\n\nThe double star will glob the rest of the route\nOn Thu, Dec 5, 2013 at 1:00 PM, koti notifications@github.com wrote:\n\nHi @codegangsta https://github.com/codegangsta ,\nHow to implement some like this\nhttp://expressjs.com/api.html#app.all\nI tried this\nm.Any(\"/data/*\", auth)m.Get(\"/data/kanna\", kanna)m.Get(\"/data/chinna\", chinna)\nI am expecting \"auth\" to be executed for all routes that begins with\n\"/data\". But, here auth is executed only for \"/data\" & \"/data/\" paths.\nHow to implement my expected behavior?\nThanks\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106\n.\n. Yup. routes are matched in the order you define them. So you need to place\nthe wildcard route after the \"data/kanna\" route\n\nOn Thu, Dec 5, 2013 at 1:55 PM, koti notifications@github.com wrote:\n\nOpps!\nWhen route \"/data/kanna\" is called only auth is getting executed! Here is\ncode extract.\nm.Any(\"/data/\", auth)m.Get(\"/data/kanna\", kanna)\nfunc kanna() (int, string) {\n   return 200, \"Hello my dear!\"}\nfunc auth (w http.ResponseWriter, r http.Request, session sessions.Session, c martini.Context) {\n   v := session.Get(\"email\")\n   if v == nil {\n      http.Redirect(w, r, \"/login.html\", 302)\n      return\n   }\n   c.Next()}\nThanks\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106#issuecomment-29942406\n.\n. Correct. We do not have an \"All\" functionality in our router \"Any\" behaves\na bit differently\n\nOn Thu, Dec 5, 2013 at 2:03 PM, koti notifications@github.com wrote:\n\nBut then we are missing this functionality, right?\nhttp://expressjs.com/api.html#app.all\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106#issuecomment-29943081\n.\n. closing this as it looks like I answered your question\n. thank you sir\n. @jamieomatthews is right on the money. The goal of martini is to be modular and tiny. I think that the codebase will soon hit a point of maturity where there will not be any major features added to the repo.\n\nWith the current state of the Go packaging/dependency management ecosystem this is a very good thing. I'm eagerly waiting for the day when I can stamp a 1.0 on martini and promise you guys that the API is completely stable. I think martini is tiny enough to achieve that sooner rather than later.\nmartini-contrib https://github.com/codegangsta/martini-contrib is where a lot of valuable functionality is being created. The cool part about martin-contrib is that you grab what you want. Go check out the packages there, I think they are pretty good. \n. Completely agree. Getting a good set of tutorials is very important. I will\neventually get around to producing a couple videos similar to the demo\nvideo. I also think that more and more value will continue to come out of\nthe community.\nOn Fri, Dec 6, 2013 at 8:27 AM, Martin Mateev notifications@github.comwrote:\n\nGot it. That's what I was thinking too.\nAlso I think we can make Martini much more appealing to newbies by\nmaintaing a list of simple but complete real-life examples - i.e\nhttp://0value.com/build-a-restful-API-with-Martini\nThanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/108#issuecomment-30007450\n.\n. Looks like your question got answered. closing!\n. @mvader I'm totally going back on what I said in your PR. :P\n. Thanks! I will take a look at this very soon. I think our conversation will be a lot better now that we have some code in front of us :)\n\nSent from my iPhone\n\nOn Dec 6, 2013, at 4:50 PM, Luke Scott notifications@github.com wrote:\nThis moves the return handling functionality from Router into a new Printer() middleware by means of a Values type. This allows other middleware to do things with values returned from the previous handler.\nThis keeps the functionality of Martini & ClassicMartini functionality identical to the way it is now. Router tests have been updated to reflect the changes, and new tests have been added for Printer().\nYou can merge this Pull Request by running\ngit pull https://github.com/lukescott/martini values-feature\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/110\nCommit Summary\nAdd Values and Printer to give middleware control over Handler return\nFile Changes\nM martini.go (13)\nA printer.go (30)\nA printer_test.go (61)\nM router.go (17)\nM router_test.go (150)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/110.patch\nhttps://github.com/codegangsta/martini/pull/110.diff\n. Thanks for putting this together, I have been struggling thinking about this particular feature.\n\nI think this code makes it much clearer to me that if we were to put a feature in like this I would much rather have it done the way you were originally planning where the Router would grab a ResponseEncoder interface from the context and use that to encode the return values. It feels much cleaner to me to do this in a middleware:\ncontext.MapTo(myEncoder, (*martini.ResponseEncoder)(nil))\nI agree that this makes things flexible, and there can definitely be some elegant code written around this. This also rides the line of too much magic for my tastes. The way Martini handles arguments is more explicit than this, and works partially due to it not being order dependent.\nI want to make sure I'm not rejecting a feature like this just because I think it doesn't fit. So I would like to open it up to the rest of the community. \nIs this a valuable feature?\nWill it bring forth better or worse practices when working with Martini?\n@davecheney I would like to know your thoughts on this\nRelevant discussion:\nhttps://groups.google.com/forum/#!topic/martini-go/_rq5j0b5ey8\n. All great points here. I will think on this a bit soon!\nSent from my iPhone\n\nOn Dec 7, 2013, at 4:36 PM, Luke Scott notifications@github.com wrote:\nI experimented with the ResponseEncoder idea and I didn't like it for the following reasons:\nThere was more code added to the context run loop\nThe same code would have to exist in the router context run loop.\nThe ResponseEncoder needs either the http.ResponseWriter passed as an explicit argument, or the Context needs to be. The ResponseEncoder could need other injected components.\nThe focus of writing is shifted away from the middleware Handlers into a proprietary interface. This detracts from the flexible and dynamic nature of Martini.\nWhat if I wanted to do more with the return arguments other than encode them?\nI did not feel it was necessary to add another interface.\nSo I got to thinking. What bothered me is that Martini was making an assumption about the return arguments. So I came up with a way to give that control to the Handlers without adding more complexity. Basically Martini does nothing with the return arguments. It defers the responsibility to the Handlers, which is where it belongs.\nWhat I love about this approach is that a Handler can bind he request body before the Next() and encode the response after. It's clean, compact, and concise. I do not feel it to be magical at all. It's no more magical than the dependency injection.\nMy plan with this is to create a Handler that I can specify on each route to specify the request body and encode the response from returned arguments.\n(It's frustrating typing on an iPad. Hit the button accidentally.)\n\u2014\nReply to this email directly or view it on GitHub.\n. So correct me if I am wrong, but it looks like this changes the flow of Martini handlers a bit. Instead of bailing early if a handler returns something the router will continue to run every handler and then check (via middleware) the return arguments.\n\nWhat happens if I have 2 of these return value handlers in the stack?\n. Cool. Thank for putting that in. Sorry for the delay I am still sitting on this feature. It is very very useful. I'm just trying to figure out whether or not it fits.\nIf this gets merged we will have to properly communicate that the proper middleware handler needs to be included for the functionality to work. This is a non-issue for a martini.Classic() but can be confusing and non-intuitive for a martini.New This is why I kinda like the idea of having a service. It may have some drawbacks, but it won't be sacrifice the consistency of the router return values. Just throwing some thoughts out there.\nAgain, sorry for pulling you through the ringer, I am struggling with finding the right implementation of this :P\n. Yeah. I think I like the idea of return values being in the router itself\n. @lukescott I investigated the service approach more and I think it ended up being really really clean without changing the current behavior of martini which I like. Check out #120 \n. closing in favor of #120 \n. :+1: pulling this down\n. Nice job! Thanks for the contribution\n. Thankfully Martini is not by any means a large project. I think it is fine\nto use whatever testing framework/package you want for your own apps. As\nfar as I have seen in the Go world not very many packages use any sort of\nthird party testing framework to write their own tests. Seeing that Martini\ncurrently has only one external package dependency, (Which I have control\nover) I at this time will shy away from bringing in any more.\nOn Tue, Dec 10, 2013 at 9:48 AM, Luke Scott notifications@github.comwrote:\n\n@Vladimiroff https://github.com/Vladimiroff testing does not have\neverything. It doesn't have fixtures nor assertions. You have to write more\ncode with testing to write the same tests. The expect function in Martini\ndoesn't even report the correct line numbers. gocheck is also written by\nGustavo Niemeyer, a well respected developer. I also said nothing about\nPython/Ruby. Sorry, but if you're going to call something \"useless\" you're\ngoing to have to come up with some hard facts instead of drivel.\nI use gocheck for large projects. It's very useful when your tests fail\nbecause it provides a lot of information, like the correct line number(s)\nand what was obtained vs expected. It also has Setup/Teardown functions for\nfixtures and individual tests. It builds on top of testing.\nI use just testing for simple utility packages that require simple tests.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/112#issuecomment-30250636\n.\n. FYI #115 added tests for martini.Static we are looking pretty good in the code coverage department\n. yup. please inquire about this on the mailing list. Closing\n. 87.5% is pretty good to me. I will pull this in after work\n. Love it! Merging\n. Thanks for letting me know. I fixed the README\n\nOn Tue, Dec 10, 2013 at 2:51 PM, Matt notifications@github.com wrote:\n\n@cryptix https://github.com/cryptix is right. The replacement is here:\nhttps://github.com/codegangsta/martini-contrib/tree/master/binding\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/116#issuecomment-30276788\n.\n. This looks good for now. Sometime we might want to do something more clever for mapping HEAD requests to GET. Today is not that day :)\n. @mvader Only one nit here. This looks good. Thanks for taking care of this!\n. Cool! This looks great. I'm going to rebase this and merge it in\n. To address your concerns:\n1. You don't inject things into ResponseEncoder, it is a singular purpose function. If you want dependencies you can map the function in a handler and use a closure to grab the dependencies you need.\n2. Whats wrong with reflect? Martini doesn't need to completely abstract it away.\n3. Middleware handler return values are already not processed. This is currently by design in Martini. although this can be easily changed if need be.\n4. You don't have to write out the return values. you can choose to do nothing in the function.\n\nThe reason I like this is that it doesn't change the behavior of Martini. I will be honest with you and say that I probably won't use this feature much. I don't find it to be a very good pattern, to me it ruins some of the explicitness that the services provide and creates yet another layer of indirection. I look at this feature as more of an \"advanced\" one and therefore do not want to let any inexperienced developers be bit by the particular way this is implemented.\nThe middleware implementation of this in #110 now requires a user to remember to Use the martini.Printer whenever the user chooses to forego the martini.Classic() route. That is not a hit I am willing to take to have this implemented as middleware. It is IMO not a good fit. Of course, pretty much everything you have in the Writer() middleware you wrote is accomplished by the implementation in this PR.\n. Hey @lukescott. Thanks for going over this contribution with me, I really and truly appreciate your input. For this first go-round (har har) I think I am going to land this PR and close out #110. I am really happy with this implementation and it should give you the tools to get you where you wanted to be.\nThanks again for all the mindshare!\n. Sorry? Use another framework? Roll your own?\nI know you don't want to fork the repo but your use case seems so edge that it might be better for you to do so.\nSent from my iPhone\n\nOn Dec 14, 2013, at 7:32 AM, Luke Scott notifications@github.com wrote:\nPoint 3 is a deal breaker for me.\n\u2014\nReply to this email directly or view it on GitHub.\n. Bam merging this in. I will set up the build servers right now\n. Not sure what you mean here? Do you need extract the subdomain from the request? This would be a good middleware to have in martini-contrib\n\nSent from my iPhone\n\nOn Dec 14, 2013, at 5:46 PM, ZHANG lin notifications@github.com wrote:\nlike {sub}.example.com\n\u2014\nReply to this email directly or view it on GitHub.\n. I like this. Much more consistent with the rest of the codebase. Thanks for the contribution\n. Thanks for the contribution.\n\nThis PR actually exposes a leak in the service injection abstraction. This particular example can be problematic as it  now required overriders of http.ResponseWriter to map both http.ResponseWriter and martini.ResponseWriter to cover both cases.\nIn this instance it might be better to do a type assertion in your handler to get the martini.ReponseWriter:\ngo\nfunc MyHandler(res http.ResponseWriter) {\n  rw := res.(martini.ResponseWriter)\n  if rw.Written() {\n    //do stuff here\n  }\n}\nThis pattern is actually used in the Logger middleware:\nhttps://github.com/codegangsta/martini/blob/master/logger.go#L15-L18\n. Yup. This particular case is not as helpful. I don't want to say \"Never map one instance to multiple types.\" But in this case it may create more headaches than it is worth, since ResponseWriter overwriting is encouraged within middleware.\nLike I said, this is a leaky part of the abstraction. In most cases this is not much of a problem.\nClosing this out\n. Ah. I see the problem now.\nTry using the ServeHTTP method from the websocket.Handler.\ngo\nm.Get(\"/hello\", websocket.Handler(remoteHandler).ServeHTTP)\nThat will give you the correct signature.\nMartini is compatible with the http.HandlerFunc interface. This can get a little confusing as http.Handler doesn't work unless you pass it's ServeHTTP function.\n. @nemothekid Yeah. bytes would probably be better to have as long as it doesn't break existing functionality.\nYou can use your own returnhandler by mapping it as a service:\ngo\nm.Map(martini.ReturnHandler(myReturnFunc))\n. Sounds good to me. Thanks\nOn Mon, Dec 16, 2013 at 4:13 PM, Nimi Wariboko Jr. <notifications@github.com\n\nwrote:\nI'm going to opt to write my own return handler, however I won't issue a\nPR. Thanks for the help.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/127#issuecomment-30714966\n.\n. Thanks. I will take a look at this soon\n. Thanks for putting this together :+1: \n. Awesome. I will take a look at this soon\n. @vaidhy Let me know if you can fix these nits. otherwise I will fix them up\n. Awesome. Thanks for fixing that up\n. Works for me\n. You can use a combination of globbing and the strip package from martini-contrib:\n\n``` go\nm := martini.Classic()\napi := martini.NewRouter()\napi.Get(\"/foobar\", func() string {\n  return \"yo dawg I heard you like routers\"\n})\nm.Get(\"/v1/**\", strip.Prefix(\"/v1\"), api.Handle)\n```\n. like @mvader mentioned. Preprocessor support will probably be an external tool. Martini is a minimal web framework.\n. I have been doing some work here:\nhttps://github.com/codegangsta/gin\nI probably won't want to have the tool in martini itself. I don't like the idea of pushing use of an external tool to run martini apps. Even if it is completely optional.\nclosing this out\n. Yup. Fresh is a good option. I also cleaned up gin a little. I use it on my projects every day https://github.com/codegangsta/gin\nI will eventually feature both of these projects in the martini readme since they are both useful\n. Maybe someday. Since we are in pre 1.0 stage it is not too important to have.\n. closing for now\n. This question will be better served on the martini mailing list.\nhttps://groups.google.com/forum/#!forum/martini-go\n. Merging. As @davecheney mentions, I will probably remove this if it gives us any more trouble.\n. hey @melito I will look at this within the next couple days\n. This is looking pretty good to me. It does look like the build is failing on the build box though: https://app.wercker.com/#buildstep/52b8cf393077c8f24d00a440\n. You can just add a commit and push it up. The PR will be modified automatically\nSent from my iPhone\n\nOn Dec 26, 2013, at 10:15 AM, Mel Gray notifications@github.com wrote:\nThe wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n\u2014\nReply to this email directly or view it on GitHub.\n. great! merging\n. @shuhei I'm more than fine with this. If we are going to make it public we need two things.\n1. Some basic test coverage\n2. Godoc documentation.\n\nAdd these two things and I will be glad to merge it in :)\n. Awesome work. Merging\n. Yes and yes. Pulling it down to fix one nit and merge\n. Thanks for the contribution!\n. Ah yeah nice catch! Merged \n. closing\n. cool. I will take a look at this very soon\n. This is a welcome change. I think i would prefer to not break changes if it really isn't needed.\n. fix those nits and I will land it\n. Awesome. I'm down with that\nSent from my iPhone\n\nOn Jan 9, 2014, at 1:11 AM, JamesClonk notifications@github.com wrote:\nAfter some more thinking I removed the option to skip serving index files from StaticOptions. There's just not really any useful situation for this, and it greatly simplifies my changes to static.go and static_test.go\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks great. Merging!\n. This looks good. This will of course need some test coverage. I can probably get to it later today or tomorrow if you don't have time.\n\nThank for the refactor\n. I started writing the test and realized that this code is not really working properly. Maybe you would have a better show getting a test passing?\n. Great fix. Merging\n. @leebrooks0 I know you asked this 8 days ago, it looks like you found the sessions middleware. Hope everything is going well! :)\n. cool. Any other related questions may be best served in martini-contrib where the sessions package lives\n. I like this addition. I will pull it down soon and test it out\n. Looks great! Thanks for the contribution\n. You can inject the context as a request-level dependency:\ngo\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\nYou can then use the new middleware and get the context injected:\ngo\nm.Use(AppEngine)\nm.Get(\"/\", func(c appengine.Context) (int, string) {\n  return 200, \"OK\"\n})\n. Yup. that is a bonus to the dependency injection. Super easy testing and\nmocking\nOn Wed, Jan 15, 2014 at 3:05 PM, Netherdrake notifications@github.comwrote:\n\nThis looks like its easier to test. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/153#issuecomment-32425519\n.\n. Do you have an error in the console? It might be my ignorance to GAE\n\nI think appengine.NewContext() returns a interface, if that is the case,\nyou want to use the MapTo function so martini knows to map the interface.\ngo\nm.MapTo(appengine.NewContext(r), (*appengine.Context)(nil))\nTry that out and let me know how it goes :)\nOn Wed, Jan 15, 2014 at 4:44 PM, Netherdrake notifications@github.comwrote:\n\nI did it like so:\npackage spotlight\nimport (\n    \"net/http\"\n    \"appengine\"\n\"github.com/codegangsta/martini\"\n)\nfunc init() {\n    m := martini.Classic()\n    m.Use(AppEngine)\n    m.Get(\"/\", func(c appengine.Context) string {\n        return \"foo\"\n    })\n    http.Handle(\"/\", m)\n}\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\nWith just m.Get(\"/\", func() string { it renders foo, but when context is\ninjected as argument, the page gets blank. I'm sorry, Im super new to all\nGAE, Go and Martini xD\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/153#issuecomment-32431981\n.\n. Thanks for catching this. This does look like a lot of code. I instead just made the check inline to avoid having as much code. see commit 890a2a52d2e59b007758538f9b845fa0ed7daccb\n. closing. Thanks again for catching that bug\n. This kind of thing sounds like it may be outside the scope of martini itself. You could certainly use Martini as a base to this kind of functionality.\n. Cool. pulling this down to take a look\n. I like this alot! Merging!\n. @djhworld What does your 404 handler look like?\n. @djhworld as @JamesClonk mentioned, prepend your hrefs with a / and the browser will request the static asset with the host as the base. No need for absolute paths. I just tested this locally and can confirm that it works properly\n. closing this out. It looks as though this issue is not specific to Martini\n. You have a good point with this PR. although it breaks existing functionality. I'm going to do a github search to get an idea of what projects this breaks.\n. We could call it through inject, although that incurs more runtime performance overhead. passing context at least makes this an opt-in to the performance overhead\n. I'm down with this change. I agree that it is cleaner overall. Nice work on this!\n. This is a good addition. pulling this down to fmt and add tests\n. bam. Merged\n. @elithrar So far I haven't heard of anybody having issues because of a env namespace conflict in this use case. Most PaaS bootstrap PORT into the environment automagically, so it is pretty nice to have a martini app work out of the box like that :) \n. merging this puppy\n. Cool! This is a welcome improvement. I will pull this down and test it out soon\n. This looks great :+1: \n\nMerging\n. Merging.\n. Thanks for the contribution @thomaswilde !\n. LGTM. Merging\n. thanks for fixing this. That was a nice catch\n. closing this out. If you have more questions please follow up on the mailing list\n. Thanks for the PR. I will look at this soon\nSent from my iPhone\n\nOn Feb 9, 2014, at 12:48 AM, Paul Shirren notifications@github.com wrote:\nThese issues I am trying to solve are as follows.\nTo provide a mechanism to provide a 405 Method Not Allowed which according to RFC2616 \"MUST include an Allow header containing a list of valid methods for the requested resource\". And to provide an OPTIONS response that satisfies CORS with Access-Control-Request-Method header.\nAs an existence proof of a use for this I have a CORS handler, https://github.com/shirro/martini-experiments/blob/master/cors.go , with a NotFound method which uses Methods to get a list of methods that are valid for the path and uses it to generate the Access-Control-Request-Method if it is an OPTIONS request or a 405 with Allow header if any methods were found.\nPros:\nKeeps things DRY as the NotFound handler can infer the methods from the URL path\nOnly run from a NotFound handler so no impact on performance otherwise\nCons:\nScanning all the routes to find methods is expensive\nChanges an interface\nYou can merge this Pull Request by running\ngit pull https://github.com/shirro/martini dev\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/166\nCommit Summary\nAdded Methods to Router interface for CORS&405\nFile Changes\nM router.go (25)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/166.patch\nhttps://github.com/codegangsta/martini/pull/166.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey, thanks for putting this up. I will check this out soon. It looks like the Routes service was the best place to put it. I'm curious, what ways are you wanting to use the routes service in a middleware?\n. Yeah, it is an unfortunate pitfall of the modularity model we are using. I think this is a great start though. I don't have any issues with the code other than how slow MethodsFor can be. We can optimize that later if it ever becomes a problem by maintaining a map[string][]string where the key is the route pattern and the map is the methods that it contains. that way we can stop matching when we find the first match.\n\nAnyway, that can be for another day. I'm gonna go ahead and merge this in. Nice work!\n. I would be willing to have Chinese documentation if it is needed. Otherwise, the source code should speak for itself pretty clearly. If any chinese developers write tutorials on martini I am more than happy to link it in the readme\n. closing out this issue. Thanks for the heads up! :)\n. Awesome. Thanks for updating those links!\n. Thx for the rogue issue ;) at least now I know you are heckling out martini\nSent from my iPhone\n\nOn Feb 14, 2014, at 8:29 PM, TJ Holowaychuk notifications@github.com wrote:\nnvm I see now \n\u2014\nReply to this email directly or view it on GitHub.\n. URL encoded values can be found with the *http.Request service. martini.Params only applies to the parameters parsed in the route. For instance \"hello/:foo/:bar\" will fill martini.Params with the foo and bar keys.\n. I know of some people that have integrated gorp with martini without many problems. I personally don't use it myself but I'm sure it shouldn't be too bad for them to work together.\n\nAs for a GopherCast, add a suggestion on our uservoice account\n. I like this idea. Even if it is just creating an interface for the log.Logger methods that other logging backends can implement.\nSent from my iPhone\n\nOn Feb 18, 2014, at 6:23 PM, Joshua Spence notifications@github.com wrote:\nIt would be good to allow some generic interface to be used as a logger. This would allow the use of a logging framework such as log4go.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have thought about this for a while. I'm going to play devils advocate\nfor a second.\n\nTechnically the log package in the standard library is already pluggable\nvia taking an io.Writer when creating a new logger\nhttp://golang.org/pkg/log/#New\nWill making an interface to wrap the logger be overkill in this instance?\nOther things to think about if we go this direction:\n1. Do we keep the mapping of log.Logger for compatibility?\n2. Do we then make it conventional to use this new martini.Logger interface?\n3. Will it be confusing to users when martini.Logger is overwritten but\n   log.Logger is not?\nJust spilling my thoughts. I think it would be really nice to have an\ninterface for logging, it will make it consistent with the rest of the\nsystem.\nOn Thu, Apr 3, 2014 at 8:51 AM, Jos\u00e9 Miguel Molina <notifications@github.com\n\nwrote:\n@BurntSushi https://github.com/BurntSushi You're right. So basically it\nshould look like this, right?\ntype Logger interface {\n    func Fatal(...interface{})\n    func Fatalf(string, ...interface{})\n    func Fatalln(...interface{})\n    func Flags() int\n    func Output(int, string) error\n    func Panic(...interface{})\n    func Panicf(string, ...interface{})\n    func Panicln(..interface{})\n    func Prefix() string\n    func Print(...interface{})\n    func Printf( string, ...interface{})\n    func Println(...interface{})\n    func SetFlags(int)\n    func SetPrefix(string)}\nAny thoughts?\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/174#issuecomment-39468326\n.\n. Yeah, the code breakage is the only thing holding me back atm. I know we\nare pre1.0 and it would be OK for us to break it in this way, I still just\ndon't like breaking very common things. I may have to let this marinate in\nmy brain for a while :)\n\nOn Thu, Apr 3, 2014 at 9:25 AM, Andrew Gallant notifications@github.comwrote:\n\nHmm. Now that log.Logger can be overridden, that does kind of change\nthings. So, just to make sure I'm getting things right, here's what I think\nthe problem is. Martini provides, by default, its own logging middleware\nthat does some reasonable default logging for each request. The client may\nwant that logging to be done to a file, or have a certain prefix, or do any\none of a number of other things. Before, this wasn't possible. But now that\nthe client can provide their own log.Logger value, it can be done.\nAs you said, a *log.Logger can be created with any io.Writer, so that\nmeans it should work with other logging systems. For example, if you're\nlogging to stdout, then:\nstdLog := log.New(os.Stdout, \"STD LOG: \", 0)otherLog := log4go.NewConsoleLogWriter()// inject stdLog as *log.Logger so the middleware uses it// inject otherLog which we'll use in our handlers\nThe problem I see with this is that you're forced to create a *log.Loggerwhich may or may not write to the destination independently of your own\nlogger (from, e.g., log4go). I suppose this could be circumvented by\nproviding an io.Writer that proxies everything back through the same\nlogger, but that seems like a kludge.\nThe other approach I'm thinking of is writing a much smaller Loggerinterface. Perhaps one that only has the\nPrint, Printf and Println methods. This is all that's needed from within\nMartini's current middleware. When a client asks for a martini.Logger,\nthey'll get something that can only be used to print. Which I suspect is\nOK. Logger options can be set by injecting your own Logger interface\nvalue. If you really want access to the rest of the logger, then you can\ntype assert. But this isn't the common case I think. So for example:\ntype myLogger {\n  log4go.ConsoleLogWriter}\n// Satisfy Logger interface\notherLog := log4go.NewConsoleLogWriter()// inject otherLog as a martini.Logger// which will be used in Martini's middleware and can// be used in our handlers.// If the logger guarantees that writes from simultaneous// goroutines are safe, then this approach is safe.\nThe benefit of using an interface here is that it makes it easier for\npeople to plug in other logging frameworks without having to deal with the\nfact that two loggers may be trying to write to the same destination\nsimultaneously. (One and only one logger should be writing to a destination\nas it can avoid simultaneous writes, just like the standard *log.Loggerdoes.)\nI think that if we go the Logger interface route, then the user will\nnever actually see a log.Logger. By default, the Logger middleware\ninjects some reasonable log.Logger as a martini.Logger, which can now\nbe overridden using a similar mechanism as in #224https://github.com/go-martini/martini/pull/224,\nI think.\nThis change would also regrettably break a lot of code, but the fix is\nsimple.\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/174#issuecomment-39472572\n.\n. Sweet. Merging\n. The solution here is to have that particular middleware run after the route is matched but before the handler is hit:\n\ngo\nm := martini.Classic()\nm.Get(\"/auth/twitter\", TheMiddleware, MyHandler)\nThat way the middleware will only be run when that route is matched.\n. I'm looking into this. I would really like this type of interaction to work with martini\n. Unfortunately it is a pretty tricky thing. Removing the initial wrapping will break write detection in the middleware loop. The only thing I can think of at the top of my head is to have a ResponseWriter() method on the martini.ResponseWriter that will return the ResponseWriter that was wrapped. This doesn't solve how the spdy ResponseWriter may conflict when you use other middleware that wraps it, but it could be a start\n. @pabbott0 if you have the time would you mind submitting a pull request with the implementation you have? it will be useful to have in core :)\n. Awesome! Thanks\nSent from my iPhone\n\nOn Feb 26, 2014, at 8:09 AM, pabbott0 notifications@github.com wrote:\nSure, I should be able to get to it this weekend.\n\u2014\nReply to this email directly or view it on GitHub.\n. hey. Nice work on this. I will take a look soon\n. Thanks for tracking down this race condition. Merged via rebase\n. Thanks for the fix!\n. What is the import path for your main.go file?\n\nIt looks like you have the github.com/codegangsta/martini package trying to import itself\n. @thewatts did this solve your issue?\n. Looks like by your comment on twitter that you were able to resolve the issue. Closing\n. Nathaniel,\nCongrats on the gschool graduation. I'm totally down for a pairing session. Nights and weekends usually work well for me. If you want to suggest a night we can put it in the calendar.\nJeremy\nSent from my iPhone\n\nOn Mar 1, 2014, at 3:53 PM, Nathaniel Watts notifications@github.com wrote:\nHey @codegangsta, sorry for the late reply! Just finished up my time at http://gschool.it -- the last couple weeks have been nuts.\nBasically, what was happening, was that I was referencing this repo in my import, however my folder structure was identical to martini's github url.\nI had setup my folder structure based on your first couple gophercasts - which were: github.com/codegangtsa/{thing}, and so - when we jumped into martini - I just named it:\ngithub.com/codegangsta/martini\n:) which caused the circular dependency.\nOn a side note - I'd love to pair sometime if you have the time to do so! Just spend 6 months hammering hard on Ruby/Rails, and super intrigued by Go !!\n\u2014\nReply to this email directly or view it on GitHub.\n. do people still use SSI? What about using go templates? perhaps github.com/martini-contrib/render is what you are looking for?\n. Thanks for the heads up! Good to know that it there is still a use case!\n\nIf you come across an SSI library in go please let me know. It should play nicely with martini out of the box but if it doesn't I will make sure that it does\nSent from my iPhone\n\nOn Feb 25, 2014, at 9:22 PM, Kevin Powick notifications@github.com wrote:\nYes, people producing non dynamic content use SSI. As mentioned, it's very handy for including html/text fragments that are common to many pages.\nWe could use go templates \u00e0 la render, but we're trying to fly under our corporate radar on this project. It would be best if our group's front-end developers did not have to consider (or even know about) such \"non standard\" methods. ;)\nUltimately, we'll be able to work around the lack of SSI in Martini, and I don't actually see it as a major shortcoming. So, the request for SSI support could be categorized as a possibly \"nice to have\" feature.  The corporate world moves slowly, so maybe nobody (else) does use SSI.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice catch @superlogical. Merging\n. How is this different from a vanilla net/http server? I don't think martini is doing anything different\n\nSent from my iPhone\n\nOn Feb 25, 2014, at 7:22 AM, zbindenren notifications@github.com wrote:\nEven if I start my application with:\nPORT=3000 HOST=localhost ./myapp\nThe hostname of the injected request (req.URL.Host) is always empty.\nAnd should'd the code in martini.go take localhost if HOST is not set (instead of an empty string):\nhost := os.Getenv(\"HOST\")\nif len(host) == 0 {\n    host = \"localhost\"\n}\nCurrently it looks like:\nhost := os.Getenv(\"HOST\")\nif len(host) == 0 {\n    host = \"\"\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. @DisposaBoy yup, that code can definitely be cleaned up\n\nSent from my iPhone\n\nOn Feb 25, 2014, at 7:59 AM, DisposaBoy notifications@github.com wrote:\n@codegangsta mostly just style note https://github.com/codegangsta/martini/blob/master/martini.go#L75 should be if port == \"\". Also, these lines are redundant https://github.com/codegangsta/martini/blob/master/martini.go#L80-L82 . If that branch is entered, host is already \"\"\n\u2014\nReply to this email directly or view it on GitHub.\n. i just added a commit to master that defaults the host to 127.0.0.1 if it is not set. I also improved the weird style in the logic surrounding setting PORT/HOST.\n\nThanks for the feedback guys\n. That is a perfectly acceptable way to deploy for small services and sites. There is really no special way to deploy martini apps other than having the PORT and MARTINI_ENV environment variables set.\nSent from my iPhone\n\nOn Mar 4, 2014, at 7:38 AM, Vasyl Nakvasiuk notifications@github.com wrote:\n@lgs I mean some step by step guide, or some tricks for deploying.\nIn my small site (https://github.com/gopherway/website) I used for example 2 options https://github.com/gopherway/website/blob/master/server.go#L19:\npath to static\npath to templates\nThen I build a binary, move binary to any place and run:\n$ ./mysite -s .../.../static/ -t .../.../templates/\n\u2014\nReply to this email directly or view it on GitHub.\n. closing as this issue seems resolved\n. This is so awesome! Thanks so much for doing this\n. Martini should support 2 different apps given that you set the PORT environment variable for the second server to be something other than 3000\n\nSent from my iPhone\n\nOn Feb 27, 2014, at 1:37 PM, Ian Lewis notifications@github.com wrote:\nHi,\nIs it possible to instantiate more than one webserver using martini within a project.\nFor example:\nin project foo I need \n1. a RESTful endpoint on port 3000 \n2. an admin endpoint on port 3005\nI have tried creating two different servers inside a project but the settings for the second overwrote the first.\nMany thanks,\nIan\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks. merging\n. ` instead of ''. LGTM\n. Thanks!\n. closing out. looks like this got resolved\n. TheLoggermiddleware only does the request logging. The*log.Logger` service is mapped by martini itself. This way services can have access to a whether or not the logging middleware is being used\n. I get what you are saying though. I will update the documentation to clarify this behavior\n. Awesome! I will check this out soon\n\nSent from my iPhone\n\nOn Mar 3, 2014, at 8:15 PM, jayrox notifications@github.com wrote:\nadd an expires header.\ndefault value of \"-1\" meaning expires immediately and the browser will request a new version on next refresh.\nYou can merge this Pull Request by running\ngit pull https://github.com/jayrox/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/192\nCommit Summary\nUpdate static.go\nFile Changes\nM static.go (10)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/192.patch\nhttps://github.com/codegangsta/martini/pull/192.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks good to me. Merging\n. Take a look at https://github.com/martini-contrib/binding It should accomplish that you want.\n. whoops... accidentally closed\n. I believe multipart form is supported in binding, if it isn't it should and\nyou should file an issue\n\nOn Tue, Mar 4, 2014 at 9:31 AM, Guillermo Estrada\nnotifications@github.comwrote:\n\nThank you I'll give it a try. I dunno if this will help with File upload\nfor example as it tries to binds them into a struct and I might need to pre\nprocess them before hand, but Ill dig into it.\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650748\n.\n. cool. closing this\n. Yup. it looks like the ideal would be to expose the martini.Routes service on the martini.Router as well as mapping it to the martini instance.\n\nThis still isn't the most ideal thing as it is yet another point of failure when graduating from a martini.Classic() to a martini.New() implementation. :/\n. Yeah I think you are right with the rawness. We would need to use Map as\nRouter is a middleware and not a service.\nOn Tue, Mar 4, 2014 at 3:07 PM, Andrew Gallant notifications@github.comwrote:\n\nYup. it looks like the ideal would be to expose the martini.Routes service\non the martini.Router as well as mapping it to the martini instance.\nHow do you want to do it? One idea is to just add the Routes interface to\nthe Router interface. This would make it easy for people to map the\nservice if they aren't using martini.Classic. However, there's a certain\nasymmetry to this (since users would need to use Map instead of Use), so\nyou could also add a Routes function:\nfunc Routes(r Router) martini.Handler {\n    return func(c martini.Context) {\n        c.MapTo(r, (*Routes)(nil))\n    }}\nAlthough we'd need a different name...\nLet me know how you want to proceed and I'll update the PR. Maybe there\nare better ideas...\nThis still isn't the most ideal thing as it is yet another point of\nfailure when graduating from a martini.Classic() to a martini.New()\nimplementation. :/\nYeah, but I think this can be mitigated with good documentation. Users\nshould understand that moving to New is a bit more raw. (I got that\nimpression anyway.)\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/194#issuecomment-36690674\n.\n. Awesome! Nice work. I will check this out soon\n. Sorry, my previous response was confusing with middleware vs service. martini.Routes is indeed a service, not a middleware.\n\nOther than the little documentation nits, this looks awesome! I really like the cleanup by removing the routes struct. Once those doc fixes are in I will merge this :)\n. Thanks for the contribution!\n. @BurntSushi @DisposaBoy Thanks for looking into this. Closing the issue as it is working as intended\n. The router uses regex to match so you may be able to get away with some regex cleverness\nSent from my iPhone\n\nOn Mar 5, 2014, at 8:41 PM, Kevin Powick notifications@github.com wrote:\nFor a given route with a named parameter\nm.Get(\"/hello/:name\", func(params martini.Params) string {\n    return \"Hello \" + params[\"name\"]\n})\nHow can I ensure that the following requests will be matched to the route, but not affect the casing of the named parameter?\n/hello/Bubba\n/HELLO/Bubba\n/hELlo/Bubba\nInitially, I thought I had solved route matching regardless of case by creating a simple middleware handler.\nm.Use(func(req *http.Request) {\n    req.URL.Path = strings.ToLower(req.URL.Path)\n})\nUnfortunately, the above also changes the casing of named parameters. Your suggestions would be appreciated.\nBTW, Martini is a great project. Thanks to all contributors for their excellent work.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this is definitely and improvement. Merging this will break some code but I think I am okay with that since this feature was merged not too long ago\n. Merging.\n. a Martini instance implements http.Handler so it plays nicely with the rest of the http package:\n\n``` go\nhttp.HandleFunc(\"/\", RootHandler)\n// martini goes under \"/api\"\nm := martini.Classic()\n// ...\nhttp.Handle(\"/api/*\", m)\nhttp.ListenAndServe(\":8080\", nil)\n```\nTry something like boom for http benching https://github.com/rakyll/boom\n. closing\n. Map, as well as other functionality, comes from https://github.com/codegangsta/inject package. It isn't super obvious that it comes from there though\n. This looks like a really natural extension of how martini works. I will pull this down soon and check it out. I really like the api\n. This looks great. Merging\n. I'm interested in seeing what kind of overhead this brings compared to looking up the type in the injector. I don't wish to bring in too much overhead but I do like the convention here\n. closing, as this looks like too much of a perf hit. maybe when injection is optimized a bit Il will consider it.\n. Agree with @mvader. If we want to put it in it should be optional to do so\n. Awesome! Merging\n. The router is what handles the URL. In a martini.Classic the Action is set to the martini.Router\nSent from my iPhone\n\nOn Mar 21, 2014, at 7:43 AM, ggaaooppeenngg notifications@github.com wrote:\nfunc (m Martini) ServeHTTP(res http.ResponseWriter, req http.Request) {\n    m.createContext(res, req).run()\n}\nthe code seems martini serves every request with a new context,but how it dispatch url?\ni find no more detail in context.run(). where does it do work like code below?\nm.Get(\"/\", func() {\n  // \u663e\u793a\n})\nm.Patch(\"/\", func() {\n  // \u66f4\u65b0\n})\nI hava not clearly find out every serveHTTP runs to which part of code to match the url,and dispatch the handler.\nCould any one show any remind?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice and clean. Landing\n. Yup. https://github.com/go-martini/martini#routing outlines this pretty well.\n\nm.Get(\"/hello/**\", func(params martini.Params) string {\n  return \"Hello \" + params[\"_1\"]\n})\n. The logger can be overridden by mapping a new logger to martini. The only problem with this approach is how the logger is used with m.Run() https://github.com/go-martini/martini/blob/master/martini.go#L81\nIf we look up the logger by getting it from the injector then I think we can have this issue solved.\n. Awesome. Merging\n. Thanks for the updates guys. I will make sure the import paths are updated for the martini-contrib packages today\nSent from my iPhone\n\nOn Mar 31, 2014, at 6:50 AM, Jamie Matthews notifications@github.com wrote:\nI think each contrib package needs to have its import path be updated to be github.com/go-martini/martini.\nThis is a little dicey because I believe it could break anyones code who updates a martini contrib package without updating to the new martini instance. But I think it just has to be done, the sooner the better. This is probably one of my least favorite things about go :(\n\u2014\nReply to this email directly or view it on GitHub.\n. I updated render. I'm going to update any other packages that I am the owner of and file issues for the other packages so the respective owners can update them :)\n. This may be because of the recent move to github.com/go-martini/martini import path. Modifying your path in the code should solve the issue.\n. yup. that should do the trick\n. Struct embedding to the rescue!\n\nThe comments in this issue make this obvious but I will just say it for clarity. The goal of martini is to be minimal on features, but flexible enough for more specific use cases to be easily implemented via extension. It looks like in this particular case Martini gives quite a few good options for case insensitive routing :)\nSent from my iPhone\n\nOn Apr 1, 2014, at 6:06 PM, Andrew Gallant notifications@github.com wrote:\n@kpowick I know :P Just showing how you could do it cleanly with struct embedding. (@codegangsta was rightly concerned about adding (?i) every time becoming a bit unwieldy.)\n\u2014\nReply to this email directly or view it on GitHub.\n. Try updated martini on your deployment box and see if that helps. The github org move messed with the   Import paths a bit\n\nSent from my iPhone\n\nOn Apr 2, 2014, at 6:02 AM, Piotr Kowalczuk notifications@github.com wrote:\nOn localhost with go1.2.1 darwin/amd64 there is no problem but when i try to deploy on debian with go1.2.1 linux/amd64 error occurred.\n[martini] PANIC: Value not found for type martini.Context\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:320 (0x433768)\n    (routeContext).run: panic(err)\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:221 (0x432d04)\n    (_route).Handle: context.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:112 (0x431d7c)\n    (_router).Handle: route.Handle(context, res)\n/home/pkowalczuk/go/src/github.com/piotrkowalczuk/netwars-backend/server.go:49 (0x401c80)\n    Router.Handle.fm: m.Action(router.Handle)\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/recovery.go:140 (0x434166)\n    func.004: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:339 (0x425312)\n    call32: CALLFN(call32, 32)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/logger.go:16 (0x433a78)\n    func.001: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:69 (0x42fa93)\n    (Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/pkg/net/http/server.go:1597 (0x4491ee)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/pkg/net/http/server.go:1167 (0x4471f7)\n    (_conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/pkg/runtime/proc.c:1394 (0x418b00)\n    goexit: runtime\u00b7goexit(void)\n[martini] Completed 500 Internal Server Error in 11.930356ms\n[martini] Started POST /register\n[martini] PANIC: Value not found for type martini.Context\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:320 (0x433768)\n    (_routeContext).run: panic(err)\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:221 (0x432d04)\n    (_route).Handle: context.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:112 (0x431d7c)\n    (_router).Handle: route.Handle(context, res)\n/home/pkowalczuk/go/src/github.com/piotrkowalczuk/netwars-backend/server.go:49 (0x401c80)\n    Router.Handle.fm: m.Action(router.Handle)\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/recovery.go:140 (0x434166)\n    func.004: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:339 (0x425312)\n    call32: CALLFN(call32, 32)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/logger.go:16 (0x433a78)\n    func.001: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:69 (0x42fa93)\n    (_Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/pkg/net/http/server.go:1597 (0x4491ee)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/pkg/net/http/server.go:1167 (0x4471f7)\n    (_conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/pkg/runtime/proc.c:1394 (0x418b00)\n    goexit: runtime\u00b7goexit(void)\n[martini] Completed 500 Internal Server Error in 12.53285ms\nhttps://github.com/piotrkowalczuk/netwars-backend/blob/develop/server.go#L49\n\u2014\nReply to this email directly or view it on GitHub.\n. Martini has moves to the github.com/go-martini/martini import path. This error is likely happening because you either didn't update an import path somewhere. If this isn't the case then I can definitely investigate the issue further\n\nSent from my iPhone\n\nOn Apr 2, 2014, at 6:18 AM, Piotr Kowalczuk notifications@github.com wrote:\nI removed martini from src directory and fire go get once more. Doesnt help. It only happens with POST actions.\n\u2014\nReply to this email directly or view it on GitHub.\n. gzip PR has been merged. Closing :)\n. @BurntSushi is correct. martini.Params is not available in middleware because the request has not yet been routed\n. LGTM :+1: \n\nGo ahead and merge it @mvader \n. I can see Martini enabling this kind of behavior via extension. That way it is an opt in rather than a feature forced on users. What does the API need in order to print routes?\nSent from my iPhone\n\nOn Apr 14, 2014, at 8:32 AM, Harley Laue notifications@github.com wrote:\nYou're right. I will say though, I did like that Dropwizard printed the routes upon starting (I don't recall if they do that unconditionally though.) Rails also has a utility to print all routes as well IIRC. So it's not an uncommon feature and can be quite valuable to verify your routes.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah. I think that is a good idea. The Routes middleware should be able to\nsupport something like that\n\nOn Mon, Apr 14, 2014 at 8:58 AM, Harley Laue notifications@github.comwrote:\n\nI can't speak for others, but perhaps a method to return an array of\nstructs containing the method & original pattern?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/227#issuecomment-40383594\n.\n. Yup. A martini contrib package would be great to have\n\nOn Thu, Apr 10, 2014 at 4:57 AM, \u0635\u0644\u0627\u062d \u0627\u0644\u062f\u064a\u0646 notifications@github.comwrote:\n\nimporting the net/http/pprofhttp://golang.org/src/pkg/net/http/pprof/pprof.gopackage using the blank\n_ identifier will trigger the init() method :\n62       func init() {\n63      http.Handle(\"/debug/pprof/\", http.HandlerFunc(Index))\n64      http.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(Cmdline))\n65      http.Handle(\"/debug/pprof/profile\", http.HandlerFunc(Profile))\n66      http.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(Symbol))\n67  }\nThis code will register a bunch of handlers in the DefaultServeMux, so\nside-effects of this importing doesn't effect the Martini.Router in any\nway.\nMaybe providing a martini-contrib module for that will be a good\nsolution. The module should declare an init() function to do the same\nhandlers registration stuff.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/228#issuecomment-40069569\n.\n. Create a repo with the code. I can take a look and make sure it works well\nfor contrib. After that I make a repo in contrib for ou to manage\n\nOn Thu, Apr 10, 2014 at 9:55 AM, \u00d5\u00e1\u00c7\u00cd \u00c7\u00e1\u00cf\u00ed\u00e4 notifications@github.comwrote:\n\n@codegangsta https://github.com/codegangsta I can take care of it , how\ncan I add it to martini-contrib repo - N00p question :) - ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/228#issuecomment-40109944\n.\n. closing\n. Yeah. Maybe we can have a NotFound() method in the martini.Routes service.\nThat way it is more explicit\n\nOn Thu, Apr 10, 2014 at 10:56 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\nI already doubt the correctness of my decision, but i need way for single\nNotFound handler.. some like\nm.Get(\"/:page\", func(r martini.Router...) {\n    r.PassNotFound()\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/pull/229#issuecomment-40117174\n.\n. Hmm bummer. Looks like this be more work than we originally thought.\n\nStill we can keep the issue here and see of we can add it without regressions\nSent from my iPhone\n\nOn Apr 11, 2014, at 4:52 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI've been trying to implement this today but I came across a few things:\nYou need context to call the not found handler (you don't have it in the router)\nYou need to call it from Routes without any param (then you don't have context. See point one).\nBoth Martini and Router have a NotFound method already so the name's not available.\nAny ideas?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nothing is wrong with the other approach. I'm trying to think of use cases that may be broken by it but I can't think of any right now.\n\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n. I do think that the PR is probably our best option at the moment.\n\nOn Fri, Apr 11, 2014 at 11:35 AM, jayrox notifications@github.com wrote:\n\nwhat if NotFound knew the route that was requested and if it was routable.\nso NotFound knew if it was NotFound or ReallyNotFound?\nOn Fri, Apr 11, 2014 at 2:33 PM, Vsevolod Balashov <\nnotifications@github.com\n\nwrote:\nNow we will have a 2 handlers: NotFound and ReallyNotFound :) I again\nthink that my PR is properly solution =)\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/230#issuecomment-40238829>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40239049\n.\n. Lets try with the implementation here\nhttps://github.com/go-martini/martini/pull/229\n\nMake sure we have no regressions. and add some tests. I think it makes\nsense that an unwritten request would be considered a 404. What do you guys\nthink?\nOn Fri, Apr 11, 2014 at 11:47 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\njust rename NotFound to NotHandled ?\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40240228\n.\n. Agreed\n\nSent from my iPhone\n\nOn Apr 13, 2014, at 5:10 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nAll the links on the site redirect to the new org, but they should be changed anyway.\n\u2014\nReply to this email directly or view it on GitHub.\n. Updated the site. closing\n. Jose is right. Between overriding ReaponseWriter and BeforeFunc there should be enough in martini to accomplish what you need. Check out the github.com/martini-contrib/gzip flas an example\n\nSent from my iPhone\n\nOn Apr 13, 2014, at 5:08 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI think you could achieve that using the BeforeFunc method on ResponseWriter https://github.com/go-martini/martini/blob/master/response_writer.go#L24\n\u2014\nReply to this email directly or view it on GitHub.\n. Overriding ResponseWriter with your own implementation will give you access to all the Write calls, which in turn gives you access to all of the data written to the response.\n. closing\n. Perhaps stack overflow or the mailing list would be a better place to ask. This doesn't sound like a bug. closing\n. @losinggeneration It is fitting that Martini not have it's own implementation of https. It is already easy enough to build https support in app using the standard library. Closing out this issue\n. Not directly. Are you having issues integrating it?\n. Yeah. I'm going to fix it right now\n. wercker now fixed!\n. thanks for the link\n. A couple things. We already have a Route interface. We should probably just have accessor methods like Pattern() and Method(). This will eliminate the need for the routeinfo struct\n\nAlso, what do you think of renaming GetAllRoutes to All?\n. Looks good!\n. :+1: \n. We might hold off on this. I want to land it, but only after https://github.com/codegangsta/inject/pull/18 lands. This will make it so we can map the logger as is but still have it fulfill the interface with regards to dependency resolution\n. Lately I have been feeling alright with the extensibility *log.Logger provides. You can read my thoughts here:\nhttps://github.com/codegangsta/negroni/issues/38\nClosing this issue for now\n. I just reverted this change. I'm happy to have this in as long as we document it's usage and notify current martini users of breaking changes on the mailing list before we land it.\n. Thanks for the input Scott!\nOn Fri, Apr 25, 2014 at 11:55 AM, Scott Parkerson\nnotifications@github.comwrote:\n\nI think that this kind of change would be better suited by having an\nexplicit method call or return value that can grant this sort of behavior.\nReturning 200 OK by default (i.e. assuming handled, not \"not found\") is\nbetter default behavior IMHO.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/pull/246#issuecomment-41427415\n.\n. Awesome! I will take a look at this soon.\n\nSent from my iPhone\n\nOn Apr 25, 2014, at 4:50 PM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nAddresses #244\nThe only thing that bothers me is that it's possible to change the route name inside the handler and that may lead to some weird errors with URLFor. But I suppose that's up to the developer.\n@codegangsta any thoughts?\nYou can merge this Pull Request by running\ngit pull https://github.com/go-martini/martini feature-access-active-route\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/250\nCommit Summary\nAbility to access the current route from a handler\nFile Changes\nM router.go (1)\nM router_test.go (16)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/250.patch\nhttps://github.com/go-martini/martini/pull/250.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks good to me. Merging\n. This should solve the issue. Sometimes updating Go will lead to these kinds of errors. Updating the package should be enough\n. thanks for the input folks. closing out this issue\n. This is how net/http works. You cannot mutate the header after writing a status code or content \n\nSent from my iPhone\n\nOn May 1, 2014, at 2:25 AM, vickyjam notifications@github.com wrote:\npackage main\nimport (\n\"github.com/go-martini/martini\"\n\"log\"\n\"net/http\"\n)\nfunc main() {\nm := martini.Classic()\nm.Use(func(c martini.Context, res http.ResponseWriter) {\nlog.Println(\"before a request\")\nres.Header().Set(\"before\", \"1\")\nc.Next()\nlog.Println(\"after a request\")\nres.Header().Set(\"after\", \"2\")\n})\nm.Get(\"/\", func() string {\n    return \"test next!\"\n})\nm.Run()\n}\n$ curl http://127.0.0.1:3000/ -I\nHTTP/1.1 200 OK\nBefore: 1\nDate: Thu, 01 May 2014 09:14:03 GMT\nContent-Length: 10\nContent-Type: text/plain; charset=utf-8\nHave \"Before: 1\", but not have \"After: 2\"\n\u2014\nReply to this email directly or view it on GitHub.\n. @mvader is correct. A Martini Handler is a callable function. Sometimes we use a kind of Factory pattern in the code where we can return a closure as that function and utilize the parent functions arguments as configuration. Static for instance:\n\ngo\nfunc Static(dir string) Handler {\n  return func(c martini.Context) {\n    // we now have access to the 'dir' variable\n  }\n}\n. Awesome. Merging\n. There is no reason for it really. The Run() method is simply a convenience\nand http.ListenAndServeTLS is totally compatible with Martini. Perhaps we\ncould have better documentation surrounding the use of it. Otherwise I\ndon't think we can offer enough wins to justify adding another method to\nMartini\nOn Sun, May 4, 2014 at 2:06 PM, tarqe39 notifications@github.com wrote:\n\nHi!\nWas wondering would it be a problem to add SSL support. As far as i can\nsee, the only change would be a new Run method on Martini struct that would\ncall ListenAndServeTLS on http.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/258\n.\n. This is a good addition! Merging\n. This is awesome! Thanks for the contribution!!\n\nSent from my iPhone\n\nOn May 7, 2014, at 4:59 AM, Myung Sun Kim notifications@github.com wrote:\nHi\nMartini seems awesome and very easy to use. I haven't done much of production work with Martini, but I have played with it for last couple weeks, and I absolutely love this.\nSo I decided to create Korean translation for the documentation, hoping my fellow Korean people will get to know martini a bit easier.\nYou can merge this Pull Request by running\ngit pull https://github.com/RexK/martini feature/korean-translation\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/260\nCommit Summary\nKorean Translation #1\nFirst draft for Korean translation\nFile Changes\nM README.md (4)\nA translations/README_ko_kr.md (348)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/260.patch\nhttps://github.com/go-martini/martini/pull/260.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This might be better served as a martini-contrib package rather than be a part of martini core\n\nSent from my iPhone\n\nOn May 8, 2014, at 8:38 PM, Keiji Yoshida notifications@github.com wrote:\nHi, I changed static.go so that martini.Static can serve binary data from memory instead of files on disk.\nI wanted to serve binary data generated from static files by using go-bindata and I added this feature on martini.Static.\nThanks.\nYou can merge this Pull Request by running\ngit pull https://github.com/yosssi/martini bindata\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/262\nCommit Summary\nAdd a retrieving binary data from memory (instead of files on disk) function on martini.Static.\nFile Changes\nM static.go (49)\nM static_test.go (29)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/262.patch\nhttps://github.com/go-martini/martini/pull/262.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks like your test is importing the old version of martini \"github.com/codegangsta/martini\". This will present problems when trying to match types.\n. Awesome. Merging\n. @mohamedattahri I agree with @jonathaningram. Let's keep this more like the standard library and just take a string like http.ListenAndServe\n. Once that is done I will happily merge this\n. The included martini middlewares are supposed to be useful for most cases,\nbut not necessarily extendable. The extendibility of martini is in adding\nnew or replacing the existing middleware using the m.Handlers function\n\nOn Thu, May 15, 2014 at 9:47 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nI don't think there's a better way to do this right now.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/266#issuecomment-43235028\n.\n. Yeah that sounds great. I will add a repo to martini-contrib when I get a chance\n. @yvasiyarov Just added you to the team. Feel free to push your code to the https://github.com/martini-contrib/gorelic repo! Thanks for the contribution\n. @sevkin Martini matches for routes on the req.URL.Path field. So rewriting the req.URL should do the trick\n. closing\n. Yeah I would love to have a test case as well as a possible benchmark for this so we can see how if the performance regression affects Martini all that much\n. @omeid thanks for looking into this. Closing\n. You can do this by mapping your own instance of *log.Logger to martini with whatever flags/prefix you want\n. closing\n. I like this addition! Thanks for the contribution. Merging\n. Thanks for the update. I will look into this ASAP \n\nSent from my iPhone\n\nOn Jun 27, 2014, at 6:19 PM, Daniil Kulchenko notifications@github.com wrote:\nI updated from a two month old version of Martini to master today, and the static middleware doesn't work at all anymore, likely caused by this change.\ndaniilk:~ \u221e curl http://localhost:3000/test.js\n404 page not found\ndaniilk:~ \u221e curl http://localhost:3000/public/test.js\n404 page not found\ndaniilk:~ \u221e\nHere's the source:\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n    m.Run()\n}\nand my directory listing:\ndaniilk:~/testcase \u221e ls -lR\ntotal 8\ndrwxr-xr-x  3 daniilk  staff  102 Jun 27 18:02 public\n-rw-r--r--  1 daniilk  staff  136 Jun 27 18:04 server.go\n./public:\ntotal 8\n-rw-r--r--  1 daniilk  staff  16 Jun 27 18:02 test.js\ndaniilk:~/testcase \u221e\nI'm running it via \"go run server.go\".\nThis PR uses os.Args[0], which is basically wrong when run with 'go run':\ndaniilk:~ \u221e go run test.go\n/var/folders/x4/931hvyfj3ml12vcrrvs5xhsm0000gn/T/go-build887935557/command-line-arguments/_obj/exe/test\ndaniilk:~ \u221e\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the contribution. Merging\n. I'm not sure if this is the right solution. Perhaps the Root default is a bad default right now and we should stick to the working directory so we don't break existing martini apps.\n\nFor those who want the Root to be in the location of he binary they can easily override it.\n. I'm putting together a PR right now that will revert to how it worked previously by default. But one can override the Root variable to do what they intended.\n. closing in favor of #281. Thanks for putting forth the effort to make the fix! It is much appreciated\n. closing in favor of #281. Thanks for being a part of the discussion!\n. waiting for the build. Then I will merge it\n. Nice fix! Thanks for looking into the issue! Merging\n. Unfortunately not. interface{} is the best we got to do this sort of thing\nSent from my iPhone\n\nOn Jul 11, 2014, at 5:58 AM, Chinmay Kulkarni notifications@github.com wrote:\nAh, I guess this wouldn't work then\nm.Get(\"/\", func() (int, string) {\n  return 418, \"i'm a teapot\" // HTTP 418 : \"i'm a teapot\"\n})\nAny other way of handling this situation ?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!\n. LGTM. Landing\n. Nice catch. I'm happy to merge this in\n. Thanks for the contribution!\n. Excellent. Thanks for the contribution\n. @macedo keep In mind that this will not be safe from a concurrency standpoint unless we add a mutex around our routes collection. I think this will be useful, but I don't want to encourage this unless it will be thread safe\n. Awesome! :+1: \n. Looks great. Merging\n. Works for me!\n. Currently there is no support for this kind of behavior. Right now the inject package will panic if a dependency is not met.\nhttps://github.com/codegangsta/inject/blob/master/inject.go#L96\n\nI'm not sure how beneficial it may be to bake some code into Martini for this case. Another possible solution is to recover the panic from inject via a middleware and handle the case there\n. Thanks!\n. This will actually be part of the Action Layer, which will be executed after all middleware. This makes stacking a lot easier\n. The other option is to wrap our responsewriter and check to see if it is written to on iterations. This would be pretty intuitive\n. I think this will be better to do later. It might be too confusing to have a optional development server for martini\n. Thanks for that find. Is it because PORT is reserved for other usage on app engine? Martini is an http.Handler So you can have your own http server instance plug into martini if you would like.\n. http://godoc.org/github.com/codegangsta/martini#Martini.ServeHTTP is the link to the doc\n. Not sure I want this anymore. Helper utils can be in martini-contrib\n. done and done\n. landed. Closing this issue\n. also. it would be great to have a default favicon. Maybe generate one with go bin-data\n. This might not be needed immediately since we have static middleware by default. It still would be useful to have this though\n. closing this and moving it to martini-contrib\n. Looks like we can just use the fileserver handler. Freaking beautiful\n. Unfortunately The fileserver middleware throws a 404 if there is no match, which means we will need to roll our own\n. Easy peasy\n. I think I am going to go with drone.io for this one\n. All good points. I will keep this in mind when designing this handler\n. Moving this to martini-contrib. #44 solves the 404 issue somewhat on a Martini core level\n. I'm going to take care of this now\n. ditching this idea. Although there is no explicit documentation. This semantic is not close enough to the vanilla http.ResponseWriter Implementation.\n. This looks like a great improvement! I will check this out more thoroughly in the morning.\n. Cool. nice commit. A couple notes:\n- I think for now we should stick util.go in auth since that is where it may be used most. We may choose to move it later. Possibly into a helper function (see #13)\n- This code needs to be formatted. Since the code is in a subpackage (extras/auth) you will need to fmt with go fmt ./.... This same concept applies to testing with multiple packages as well go test ./...\n. Also, one question for you as a developer:\nDoes the extras make sense to you or should I rename it to contrib? I have also been debating whether or not the contrib package should be a part of the core repo. I will have to check out the semantics for go get. (we shouldn't be pulling in all the deps associated with contrib to just use Martini)\n. Oh you are totally right. The Github diffs threw me off\n. @bemurphy I pulled auth out of extras. Auth is still it's own package. But exists in the repo\n. @bemurphy Is this sucker ready to go?\n. :+1:  merging\n. Thanks for the contribution.\n. Love it! Thanks\n. This is an interesting suggestion. I will have to think about how I want to approach the API for this, as the route regex is compiled when the route is created\n. Yup. Close it out!\n. Nice catch. Fixed in the readme\n. Awesome. Thanks for fixing the typo\n. Thanks for the contribution. Reviewing this now\n. Got a couple of nits! Thanks again for putting this PR up\n. @DisposaBoy Great point.\nI'm leaning toward option 2 at the moment. I want to keep the default handlers in Martini pretty vanilla and most of all compatible with the majority of terminals. If someone really wants color they can roll their own logging handler or use a more advanced one from martini-contrib.\nLets nuke it.\n@mattn if you want the contribution add a commit to remove the escapes altogether. Otherwise I can nuke them myself.\n. Cool. I will remove them for now\n. That looks like a pretty odd error to me. What version of Go are you running? (go version)\n. I updated the readme to require go 1.1\nThanks for investigating this.\n. Love it! Thanks for playing with it on GAE. Merging\n. hey @mholt. Thanks for putting your best foot forward and converting these tests over. I love what you guys have done with GoConvey and am excited to start using it in all my Go web applications.\nFor the sake of keeping the core Martini package clean, I don't want to pull in any other dependencies at this time. Please shoot me an email though because I have some ideas on how Martini/GoConvey can collaborate together. You guys are awesome and I really look forward to working with you soon!\n. FYI: My email is on my GitHub profile\n. I'm not a super huge fan of benchmarks like these. But if someone put some stats together that exposed some major performance issues in Martini I would gladly take that feedback into consideration when optimizing the code.\nAgain, Martini is pretty thin on top of the http package, only possible performance issue sticking in my mind is the use of reflection. We are currently not cacheing reflection values. Again, without stats I really don't know whether or not it is worth optimizing at the moment. \n. I totally side with Matt here. Benchmarks are typically a bad metric to measure value of a web technology. That being said I will make sure Martini will be optimized in the places where it makes sense to optimize. Martini is about fun programming and good application architecture, not extreme performance.\nSent from my iPhone\n\nOn Nov 25, 2013, at 5:01 PM, Matt Silverlock notifications@github.com wrote:\nTo add to what Dave said: use https://github.com/wg/wrk or \nhttps://github.com/lighttpd/weighttp - I much prefer wrk, though. \nPS: Like I said upthread, \"reliable\" benchmarks are a minefield. Lots of \nnew users are swayed by them in cases where a) the benchmark is faulty or \nb) the relative \"slowness\" will never (ever) affect their application \nbecause few of us smash tens of thousands of req/s. \nOn Tue, Nov 26, 2013 at 8:57 AM, Dave Cheney notifications@github.comwrote: \n\nplease god no, no benchmarks with ab \nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock \nnotifications@github.comwrote: \n\n@cgarvis https://github.com/cgarvis Do you have the source for that? \n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource \ndefaults. \nYou should be able to generate a magnitude more requests per second with \nsome tuning. \n\u2014 \nReply to this email directly or view it on GitHub< \nhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299> \n. \n\n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258419 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. I put together a naive benchmark of reflection overhead specifically. Some people seem to be misinformed that reflection is going to significantly slow down their web app.\n\n\nhttps://gist.github.com/codegangsta/7678025\nBenchmarkFunctionCall 2000000000 0.57 ns/op\nBenchmarkReflectCall 5000000 380 ns/op\nBenchmarkInvoke 5000000 538 ns/op\nRaw function call compared to a reflect call compared to an injector.Invoke call.\nI'm sure you are thinking ZOMG 10X slower. But we are talking nanoseconds here. A typical Martini request will probably rack up anywhere between 5 and 15 invoke calls. If anyone considers a couple microseconds per-request too much of an overhead then you are not solving the same problems I am :)\nAlso feel free to call me out on this benchmark, it is a pretty naive one.\n. closing out as there are a couple of benchmarks already published. namely https://github.com/cypriss/golang-mux-benchmark/\n. This looks awesome so far. Very nice work!\nThe *RequireError bit is interesting. I will look into this in more detail in a little bit\n. Seriously this is great stuff. I can't wait to merge it in\n. testing this out and then I will merge\n. Yup. My initial thought is the Router interface can have a NotFound method that takes a Handler. We can have a default Handler that does the same thing Martini does now, but we should be able to swap them out easily.\n. I'm taking a look at this one this weekend\n. Yup. The wrapped handler needs to to implement http.Hijackerinterface. It currently does not. Below is a relevant thread on Golang-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/zq_i3Hf7Nbs\nI definitely want to see this in Martini. It will add a lot of value.\n. Hah whoops. I totally overlooked that. Thanks got catching that\n. I will put the Go version requirement in the docs\nSent from my iPhone\n\nOn Nov 15, 2013, at 4:54 PM, Dave Cheney notifications@github.com wrote:\nWhich version of Go are you using? You need at least Go 1.1 \n\nOn 16 Nov 2013, at 11:48, 00001 notifications@github.com wrote: \ngo get github.com/codegangsta/martini \ngithub.com/codegangsta/martini \nDropbox/go/src/github.com/codegangsta/martini/martini.go:94: method r.Handle is not an expression, must be called \nDropbox/go/src/github.com/codegangsta/martini/router.go:58: method route.handle is not an expression, must be called \nThe last commit was 3302320 \n\u2014 \nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. @davecheney I can't find any docs on how build constraints work with regards to go version. Does // +build !go1.1 mean 1.1 and later? or do I need to include 1.2 as well?\n\n\nDo the build constraints contain tags for patch-level versions of go as well as major/minor? \n. closing this. and adding a followup issue for @davecheney 's suggestion\n. I think @DisposaBoy has a point here. Run() is meant to be a convenience function to quickly get started, but is not attempting to solve most use cases. I think the real issue here is a documentation one.\nI don't want to try and abstract away the http interface unless we have really good reason to.\nI can update the documentation to push toward using http.ListenAndServe() for more configuration unless you feel like taking a crack at it @DrBenton \n. I agree that Run has a purpose, and I want to keep it clean and simple. I'm closing this issue and updating the readme with more information\n. @tobstarr Yeah it looks like the issue here is that we are triggering a parser error instead of a compiler error. I'm going to change the check so it can get past the parser stage. I will throw up a PR momentarily\n. I haven't seen it before, but I will check it out. Might be a bug in the static handler\nSent from my iPhone\n\nOn Nov 16, 2013, at 9:36 AM, Brent Anderson notifications@github.com wrote:\npackage main\nimport \"github.com/codegangsta/martini\"\nfunc main() {\n  m := martini.Classic()\n  m.Get(\"/\", func() string {\n    return \"Hello world!\"\n  })\n  m.Run()\n}\nBuilding, running and then browsing :3000 initiates a download of the built executable (5.3MB). Changing the path to '/test' and browsing :3000/test will return \"Hello world!\". This is on OSX Mavericks and tested with Go 1.1 and Go 1.2.\nRunning the default net/http server example on :3000 work just fine.\nThis is pretty bizarre behavior. Have you seen it before?\n\u2014\nReply to this email directly or view it on GitHub.\n. Looking into this now\n. I am not able to reproduce this with the latest version of martini (af1b7cc056f750f9a0bac2104078edc7b01e0c88). This does seem like very odd behavior, and very insecure. If you could give me a little more information (log output, sample program, test case) it would be greatly appreciated\n. Hah, yeah that would be the only thing I can think of at the moment\n\nOn Sat, Nov 16, 2013 at 10:55 AM, DisposaBoy notifications@github.comwrote:\n\nis the binary named public by any chance. e.g. you put main.go in a\ndirectory called public and then called go build or used a tool that does\nto run it\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/50#issuecomment-28633127\n.\n. @brentmn Not to much to do except documentation. Closing this issue out\n. Can you give an example? Martini supports regex routing.\n. Ah thanks! It looks like I totAlly glazed over http.Dir. I'm out right now but I will take a look at this soon\n\nSent from my iPhone\n\nOn Nov 16, 2013, at 12:09 PM, DisposaBoy notifications@github.com wrote:\nI was mostly curious why you didn't use http.Dir. It handles some basic exploit checks etc.\nYou can merge this Pull Request by running\ngit pull https://github.com/DisposaBoy/martini patch-1\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/52\nCommit Summary\nRe-use http.Dir for file handling\nFile Changes\nM static.go (22)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/52.patch\nhttps://github.com/codegangsta/martini/pull/52.diff\n. It makes sense to discard the first error for now. Merging.\n. Unfortunately I can't license the site as MIT. Thanks for the reminder that it is missing a license though. I will update the repository with the appropriate license file.\n\nSent from my iPhone\n\nOn Nov 16, 2013, at 2:37 PM, Max Ogden notifications@github.com wrote:\nquick question,\nis the gh-pages branch supposed to be MIT licensed too?\nthanks\n\u2014\nReply to this email directly or view it on GitHub.\n. I added an MIT license to the gh-pages branch\n. @dylziez Documentation is included as part of the MIT license terms\n. Thanks for the contribution. I recently merged PR #52 that changed static.go. This is a welcome addition so please rebase against current master and resolve any conflicts. Thanks\n. thanks, I will check this out\n. Thanks for the PR!\n. Yup. we would love to have a gzip middleware added as a contribution\n. @ekanna I added an issue in the martini-contrib repo:\n\nhttps://github.com/codegangsta/martini-contrib/issues/3\nClosing this one out\n. merging this.\n. :+1: \n. I'm on this one\n. This would be nice to have. I'm not sure that Martini fits all of the specifications to make for very useful swagger documentation. Swagger is based on REST principals. And while you can create RESTful web services in Martini it is not imposed on you.\n. Yeah, I can do a little more research on this. There has been some work in #76 that will possibly let a third party package have enough access to the routing layer to create a good Swagger integration\n. I believe martini is able to support this with the routes service. If somebody wants to create a package to support martini and swagger they are more than welcome to. Closing this issue for now to keep the issue tracker clean\n. :) yeah the issue has been here forever \nSent from my iPhone\n\nOn Aug 3, 2014, at 3:23 AM, Stefan notifications@github.com wrote:\nI believe... uh ... if somebody... um, well... closing this issue for now to keep the issue tracker clean\nI don't mean any harm, but... um... LOL ;-)\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for taking a stab at this. I will review later today :smile: \n. More and more I am seeing the problem crop up where the responsewriter has to be wrapped and every time we have to implement all of the methods. I'm starting to think we need to create a generic WrappedResponseWriter that can be embedded into other structs. The benefit of having a WrappedResponseWriter is that we can implement Hijacker and other Interfaces there. This will allow for a safe environment to try type assertions. It will also clean up the many places we will possibly wrap the responsewriter.\n. @noonat I'm gonna spend some time to thing about this dilemma\n. I put up #71 to create a better jumping off point for this issue. We can have our martini.ResponseWriter implement http.Hijacker\n. Thanks! I will likely check this out tomorrow since I am out for most of the day today\n\nSent from my iPhone\n\nOn Nov 21, 2013, at 12:56 PM, Nathan Ostgard notifications@github.com wrote:\nRebased and updated the code. Is f6bb688 closer to what you want?\nAlso -- not sure how you feel about using the hijackableResponse for the test. If you'd like me to use httptest.NewServer for the unit test instead, I can do that.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm fine with how you are testing in for now. Merging this\n. One nit. Fix that and I will land it. Great contribution!\n. pulling it down to play with it\n. Dude this is awesome. Love it\n. merged from rebase\n. done and done!\n. Thanks for filing this. It looks like we are doing a filepath.Join where we are not supposed to.\n\nhttp://golang.org/src/pkg/net/http/fs.go#L314\nLooks like the http.FileServer just concats \"/index.html\" and checks for that. Do you get good results when that is done?\n. @f-dumont you can just say \"closes\" #68 (without quotes) in the PR and it will close when the PR has landed\n. I might have to think about this for a little bit. I know it is definitely useful. The good news is that it can be worked around with multiple martini apps.\n. Looking into this\n. I fixed it up. Thanks for the help in figuring this out :)\n. Landing this\n. Cool! be sure to add PATCH to the readme under the routing section and I will merge this in.\nalso, relevant conversation on golang-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/GjngdEKsUXA\n. pulling this down\n. yeah it still doesn't stop us from putting it in the router\n. BAM. Thanks for the contribution!\n. oh whoops totally missed this one. Looking at it now\n. not quite sure how I feel about this. One one hand it is very convenient, on the other hand it muddles up our return value handling even more. At this moment I am wary of merging this in. There might be a better way to accomplish this through a service that could easily handle errors.\ngo\nm.Get(\"/\", func(e martini.ErrorHandler){\n  err, _ = doSomething()\n  e.Check(err) // throw 500 if err != nil\n})\nThat can actually clean up code even more since it removes the need to check errors.\nCome to think of it, a package like that would do really well in the martini-contrib repo\n. This is a welcome change. merging\n. you can map whatever *log.Logger you want via Map()\ngo\nm := martini.Classic()\nmyLogger := log.Logger(...)\nm.Map(myLogger)\n. This is actually a pretty good idea. I will take a look at this soon\n. Cool! I will check this out tomorrow morning!\n. So I have been using this for a couple of routes, and it honestly feels a little bit clunky and not too Go-like.\nI think the thing that trips me up is the naming a route with a string when we are getting a route type back from routing now anyway. Something like this might be more idiomatic Go.\n``` go\nm := martini.Classic()\nLessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"\n})\nm.Get(\"/\", func(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42))\n})\n```\nThis should simplify the code a bit more. I can make these changes if you want. Great work btw!\n. Yeah. Your routes would obviously have to be put in global variables or\nexported from the package they are declared in. I think this approach is\ngood for a couple reasons:\n1. No need to name any route you want to reference.\n2. The compiler will bomb when a route name is changed, prompting any\n   references to be renamed.\nI do understand what you are saying though, it is a developer discretion\nkind of thing. If you want access to your route object you need to make\nsure it is available.\nOn Sun, Nov 24, 2013 at 12:36 PM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\n@codegangsta https://github.com/codegangsta the only problem I see with\nyour approach is that if you have the route handler in another file you\nwon't be able to get the route.\nmain.go\nm := martini.Classic()LessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"})\nm.Get(\"/\", myFancyHandler)\nwhatever.go\nfunc(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42)) // You don't have access to LessonRoute here}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/76#issuecomment-29165268\n.\n. Cool! Thanks for your patience. I know I am a bit picky :)\n. Awesome! Will look at it soon.\n\nSent from my iPhone\n\nOn Nov 25, 2013, at 9:16 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nDone!\n\u2014\nReply to this email directly or view it on GitHub.\n. I will be able to land this tomorrow morning!\n. code landed via rebase. Closing\n. landing\n. I'm currently working on a render service in martini-contrib https://github.com/codegangsta/martini-contrib/blob/JMS-Render/render/render.go#L28\n\nIt injects a service that you can use to render json/html templates easily. I think this is what you are looking for. This is how I hope it will work:\n``` go\ntype Greeting struct{\n  Salutation string\n  Name string\n}\nfunc main() {\n  m := martini.Classic()\n  m.Use(render.Renderer())\nm.Get(\"/\", func(r render.Render) {\n    render.JSON(200, Greeting{\"hello\", \"world\"})\n  })\n}\n```\n. Package has dropped in martini-contrib:\nhttps://github.com/codegangsta/martini-contrib/tree/master/render\nClosing this issue\n. Yup. there are slight differences between middleware handlers and routing handlers. There is definite crossover in functionality. I agree that the documentation could be improved. So I am going to rename this issue.\n. Next now works in routing middleware. Closing\n. We do have a mailing list. It is pretty active. https://github.com/codegangsta/martini#getting-help \nWe can move this conversation to https://groups.google.com/forum/#!forum/martini-go\nWould a #freenode channel be beneficial as well?\n. I am hesitant to merge something like this in. This subtly changes the way martini works on a very foundational level.\nI think a better way to think about this solution would be to support context.Next() inside the route handler stack. This will make it more consistent with the middleware API, which in turn would make handlers with Next() compatible as route or middleware handlers.\n. btw I do believe this functionality needs to be in Martini. It is just the execution that bothers me\n. Yup. that would essentially be it. I can look into adding Next() support for the router later tonight. This will be a much more consistent approach. I created #84 to track the issue\n. I got this one\n. I'm going to sit on this until the morning. But so far it looks like it works\n. Landing.\n. I discovered something similar when working on #85. It should work with latest master now, Make sure you have the ResponseWriter wrapped properly\n. @benkraus are you still having this issue with the latest master?\n. works for me\n. Run() is just a convenience function. For anything non trivial, you should be calling http.ListenAndServe yourself since a Martini instance is an http.Handler\nWe panic() in some places so we can retain the http.Handler interface, which does not have any return values.\nSent from my iPhone\n\nOn Aug 9, 2014, at 11:56 AM, Kiyoshi Murata notifications@github.com wrote:\nsorry to bump this, but I have a concern here regarding cleaning before termination.\nmartini (or any other piece of code that does not own main.main, for that matter) should never os.Exit() (as log.Fatal* does) or panic().\nthere's no way the client code can recover from such errors and If it's allocating resources, spawning go routines, listening for other connections, connecting to remote servers, simply defer()ing, or whatever one ever wants to do before calling Run*(), then these resources might be in an inconsistent state on exit.\nI think that returning the error should be the correct approach here. I see that there are other places (handler binding, I think) that use panic(). I think these too should bubble up an error all the way to Run*(), if possible.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome. This looks pretty sweet. I will review this very soon\n. I'm going to add a readme entry for this and then land it\n. Excellent. I will try this out tonight\n. cool. this + the recent glob routing makes virtual servers much easier to handle. I will pull this down and try it out soon\n. Please rebase this. and I will land it\n. Nice work on this @Archs !\n\nThanks for the contribution.\n. @icholy I don't care. it can be in one PR\n. kk. I need to make sure the buildbox is running 1.1.2 which introduced path.Join\n. hmmm. failed on build server but they are running 1.1.2. I'm looking into this\n. oh wait. nvm. I can make the change It was a namespace conflict\n. build passing now\n. http://audiojungle.net/item/i-bring-you-flowers/4603948\n. @aybabtme I would recommend just leaving the defer file.Close() as is. No need to panic if we can't close a file. \n. Awesome! Merging\n. Nice cleanup. Thanks for the contribution\n. Nothing at the moment. You can check out the martini-contrib repo if you have any ideas for a middleware\n. Thanks for the contribution!\n. Added comment on #96\n. closing\n. Thanks for taking the time to put this together. Unfortunately I don't think this should be brought in to martini core. \nThe Run function is more of a convenience method for getting up and running quickly. The Martini interface implements http.Handler so users can set up listening in whatever way they want.\nA better place for this would be in the readme FAQ section outlining how to integrate with a unix socket.\n. closing this\n. I would prefer not to remove the go 1.0.x check. If we can maintain that with fixing the godoc formatting I am game\n. closing this for now until we find a better way to fix this\n. good idea. I should add sinatra to the mix as well. That way express, sinatra, and martini can all cuddle together in the \"elegant webframework\" space.\n. A good place for it would be in the about section of the README.\n. Ah yup. Thanks for the reminder\n. This is because header cannot be written after a response has been written. This is a net/http thing. You will have to wrap the responsewriter to accomplish what you want here\nSent from my iPhone\n\nOn Dec 2, 2013, at 10:41 PM, benkraus notifications@github.com wrote:\nI was trying to use a service that defaulted everything to json by building a handler like this:\nfunc Json() martini.Handler {\n    return func(res http.ResponseWriter, c martini.Context) {\n        c.Next()\n// if the content type header hasn't been set by the time the handler is done executing, default it to json\n    if res.Header().Get(ContentType) == \"\" {\n        res.Header().Set(ContentType, ApplicationJson) // default the content type to json if the handler didn't specify it\n    }\n}\n}\nThat doesn't work though, and even commenting out the if statement doesn't do the trick. It works however if I write the header before the c.Next() function call. What I was going for, was having the ability to just default every request to json, but if the handler specified a specific content type in the event it needed to be an image, or text, or whatever, we would use that rather than json. Is there another way I need to be doing this? From the looks of it, this should work.\n\u2014\nReply to this email directly or view it on GitHub.\n. That is up for the middleware to handle. We are doing it in multiple places. The gzip handler is a pretty good example\n\nSent from my iPhone\n\nOn Dec 3, 2013, at 9:23 PM, benkraus notifications@github.com wrote:\nI take it then, without looking at the code, that the response gets written after the handler func executes, not after any middleware handlers have been called? It might be nice to have it write the response after any registered middleware handlers, that way middleware can not only modify the request, but the outgoing response, too, in the manner I described.\n\u2014\nReply to this email directly or view it on GitHub.\n. It is a remnant of the original code before we had NewResponseWriter(). It could be removed in favor of a type assertion to martini.ResponseWriter\n. Nice catch btw\n. IMO it is not worth giving up the modularity because of a 10% hit.\n\nWith the martini-contrib prefix package we can actually have a silo'd off martini.Static handler. That way you won't run through the system call but still be able to serve static assets under a particular route prefix.\nAll that said, I think it is fine the way it is now. If it becomes a huge bottleneck there are certainly options\n. Yes you can serve static files that way already if you want to.\nOn Tue, Dec 3, 2013 at 6:16 PM, guotie notifications@github.com wrote:\n\ncan serve static files like this:\nm.Get(\"/assets/*\", martini.Static(\"assets\"))\nthen, static file serve in Router module.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/101#issuecomment-29772008\n.\n. closing\n. it is a string because of the ENV variable mapping. so somebody can export the environment variable like so:\n\n$ export MARTINI_ENV=\"production\"\n. I feel like this may be a case of premature optimization. If string\ncomparison does in fact become a bottleneck I will be sure to make sure\nmartini.Env is an int type.\nOn Tue, Dec 3, 2013 at 6:09 PM, guotie notifications@github.com wrote:\n\nyes, MARTINI_ENV should be strings, but ENV can be int\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/102#issuecomment-29771670\n.\n. You are right, they absolutely should\n\nSent from my iPhone\n\nOn Dec 3, 2013, at 11:19 PM, Ask Bj\u00f8rn Hansen notifications@github.com wrote:\nIt looks like I have to specifically setup HEAD request handlers to have them work. They should automatically map to GET requests.\n\u2014\nReply to this email directly or view it on GitHub.\n. closing. This was fixed in #117 \n. Whoops, I meant #118. Thanks for the correction\n\nSent from my iPhone\n\nOn Dec 15, 2013, at 5:45 PM, Ask Bj\u00f8rn Hansen notifications@github.com wrote:\nAt a glance I don't think #117 fixed the same issue I reported.\n\u2014\nReply to this email directly or view it on GitHub.\n. I like this. Definitely more flexibility and consistency. Gonna pull it down and try it out\n. Awesome work on this. Nice and clean. API consistency is a beautiful thing\n. Nice! I will look at this later today\n. Thanks for the contribution @alecthomas! Nice and clean + tests == no nits\n. Try m.Any(\"/data/**\", auth)\n\nThe double star will glob the rest of the route\nOn Thu, Dec 5, 2013 at 1:00 PM, koti notifications@github.com wrote:\n\nHi @codegangsta https://github.com/codegangsta ,\nHow to implement some like this\nhttp://expressjs.com/api.html#app.all\nI tried this\nm.Any(\"/data/*\", auth)m.Get(\"/data/kanna\", kanna)m.Get(\"/data/chinna\", chinna)\nI am expecting \"auth\" to be executed for all routes that begins with\n\"/data\". But, here auth is executed only for \"/data\" & \"/data/\" paths.\nHow to implement my expected behavior?\nThanks\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106\n.\n. Yup. routes are matched in the order you define them. So you need to place\nthe wildcard route after the \"data/kanna\" route\n\nOn Thu, Dec 5, 2013 at 1:55 PM, koti notifications@github.com wrote:\n\nOpps!\nWhen route \"/data/kanna\" is called only auth is getting executed! Here is\ncode extract.\nm.Any(\"/data/\", auth)m.Get(\"/data/kanna\", kanna)\nfunc kanna() (int, string) {\n   return 200, \"Hello my dear!\"}\nfunc auth (w http.ResponseWriter, r http.Request, session sessions.Session, c martini.Context) {\n   v := session.Get(\"email\")\n   if v == nil {\n      http.Redirect(w, r, \"/login.html\", 302)\n      return\n   }\n   c.Next()}\nThanks\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106#issuecomment-29942406\n.\n. Correct. We do not have an \"All\" functionality in our router \"Any\" behaves\na bit differently\n\nOn Thu, Dec 5, 2013 at 2:03 PM, koti notifications@github.com wrote:\n\nBut then we are missing this functionality, right?\nhttp://expressjs.com/api.html#app.all\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/106#issuecomment-29943081\n.\n. closing this as it looks like I answered your question\n. thank you sir\n. @jamieomatthews is right on the money. The goal of martini is to be modular and tiny. I think that the codebase will soon hit a point of maturity where there will not be any major features added to the repo.\n\nWith the current state of the Go packaging/dependency management ecosystem this is a very good thing. I'm eagerly waiting for the day when I can stamp a 1.0 on martini and promise you guys that the API is completely stable. I think martini is tiny enough to achieve that sooner rather than later.\nmartini-contrib https://github.com/codegangsta/martini-contrib is where a lot of valuable functionality is being created. The cool part about martin-contrib is that you grab what you want. Go check out the packages there, I think they are pretty good. \n. Completely agree. Getting a good set of tutorials is very important. I will\neventually get around to producing a couple videos similar to the demo\nvideo. I also think that more and more value will continue to come out of\nthe community.\nOn Fri, Dec 6, 2013 at 8:27 AM, Martin Mateev notifications@github.comwrote:\n\nGot it. That's what I was thinking too.\nAlso I think we can make Martini much more appealing to newbies by\nmaintaing a list of simple but complete real-life examples - i.e\nhttp://0value.com/build-a-restful-API-with-Martini\nThanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/108#issuecomment-30007450\n.\n. Looks like your question got answered. closing!\n. @mvader I'm totally going back on what I said in your PR. :P\n. Thanks! I will take a look at this very soon. I think our conversation will be a lot better now that we have some code in front of us :)\n\nSent from my iPhone\n\nOn Dec 6, 2013, at 4:50 PM, Luke Scott notifications@github.com wrote:\nThis moves the return handling functionality from Router into a new Printer() middleware by means of a Values type. This allows other middleware to do things with values returned from the previous handler.\nThis keeps the functionality of Martini & ClassicMartini functionality identical to the way it is now. Router tests have been updated to reflect the changes, and new tests have been added for Printer().\nYou can merge this Pull Request by running\ngit pull https://github.com/lukescott/martini values-feature\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/110\nCommit Summary\nAdd Values and Printer to give middleware control over Handler return\nFile Changes\nM martini.go (13)\nA printer.go (30)\nA printer_test.go (61)\nM router.go (17)\nM router_test.go (150)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/110.patch\nhttps://github.com/codegangsta/martini/pull/110.diff\n. Thanks for putting this together, I have been struggling thinking about this particular feature.\n\nI think this code makes it much clearer to me that if we were to put a feature in like this I would much rather have it done the way you were originally planning where the Router would grab a ResponseEncoder interface from the context and use that to encode the return values. It feels much cleaner to me to do this in a middleware:\ncontext.MapTo(myEncoder, (*martini.ResponseEncoder)(nil))\nI agree that this makes things flexible, and there can definitely be some elegant code written around this. This also rides the line of too much magic for my tastes. The way Martini handles arguments is more explicit than this, and works partially due to it not being order dependent.\nI want to make sure I'm not rejecting a feature like this just because I think it doesn't fit. So I would like to open it up to the rest of the community. \nIs this a valuable feature?\nWill it bring forth better or worse practices when working with Martini?\n@davecheney I would like to know your thoughts on this\nRelevant discussion:\nhttps://groups.google.com/forum/#!topic/martini-go/_rq5j0b5ey8\n. All great points here. I will think on this a bit soon!\nSent from my iPhone\n\nOn Dec 7, 2013, at 4:36 PM, Luke Scott notifications@github.com wrote:\nI experimented with the ResponseEncoder idea and I didn't like it for the following reasons:\nThere was more code added to the context run loop\nThe same code would have to exist in the router context run loop.\nThe ResponseEncoder needs either the http.ResponseWriter passed as an explicit argument, or the Context needs to be. The ResponseEncoder could need other injected components.\nThe focus of writing is shifted away from the middleware Handlers into a proprietary interface. This detracts from the flexible and dynamic nature of Martini.\nWhat if I wanted to do more with the return arguments other than encode them?\nI did not feel it was necessary to add another interface.\nSo I got to thinking. What bothered me is that Martini was making an assumption about the return arguments. So I came up with a way to give that control to the Handlers without adding more complexity. Basically Martini does nothing with the return arguments. It defers the responsibility to the Handlers, which is where it belongs.\nWhat I love about this approach is that a Handler can bind he request body before the Next() and encode the response after. It's clean, compact, and concise. I do not feel it to be magical at all. It's no more magical than the dependency injection.\nMy plan with this is to create a Handler that I can specify on each route to specify the request body and encode the response from returned arguments.\n(It's frustrating typing on an iPad. Hit the button accidentally.)\n\u2014\nReply to this email directly or view it on GitHub.\n. So correct me if I am wrong, but it looks like this changes the flow of Martini handlers a bit. Instead of bailing early if a handler returns something the router will continue to run every handler and then check (via middleware) the return arguments.\n\nWhat happens if I have 2 of these return value handlers in the stack?\n. Cool. Thank for putting that in. Sorry for the delay I am still sitting on this feature. It is very very useful. I'm just trying to figure out whether or not it fits.\nIf this gets merged we will have to properly communicate that the proper middleware handler needs to be included for the functionality to work. This is a non-issue for a martini.Classic() but can be confusing and non-intuitive for a martini.New This is why I kinda like the idea of having a service. It may have some drawbacks, but it won't be sacrifice the consistency of the router return values. Just throwing some thoughts out there.\nAgain, sorry for pulling you through the ringer, I am struggling with finding the right implementation of this :P\n. Yeah. I think I like the idea of return values being in the router itself\n. @lukescott I investigated the service approach more and I think it ended up being really really clean without changing the current behavior of martini which I like. Check out #120 \n. closing in favor of #120 \n. :+1: pulling this down\n. Nice job! Thanks for the contribution\n. Thankfully Martini is not by any means a large project. I think it is fine\nto use whatever testing framework/package you want for your own apps. As\nfar as I have seen in the Go world not very many packages use any sort of\nthird party testing framework to write their own tests. Seeing that Martini\ncurrently has only one external package dependency, (Which I have control\nover) I at this time will shy away from bringing in any more.\nOn Tue, Dec 10, 2013 at 9:48 AM, Luke Scott notifications@github.comwrote:\n\n@Vladimiroff https://github.com/Vladimiroff testing does not have\neverything. It doesn't have fixtures nor assertions. You have to write more\ncode with testing to write the same tests. The expect function in Martini\ndoesn't even report the correct line numbers. gocheck is also written by\nGustavo Niemeyer, a well respected developer. I also said nothing about\nPython/Ruby. Sorry, but if you're going to call something \"useless\" you're\ngoing to have to come up with some hard facts instead of drivel.\nI use gocheck for large projects. It's very useful when your tests fail\nbecause it provides a lot of information, like the correct line number(s)\nand what was obtained vs expected. It also has Setup/Teardown functions for\nfixtures and individual tests. It builds on top of testing.\nI use just testing for simple utility packages that require simple tests.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/112#issuecomment-30250636\n.\n. FYI #115 added tests for martini.Static we are looking pretty good in the code coverage department\n. yup. please inquire about this on the mailing list. Closing\n. 87.5% is pretty good to me. I will pull this in after work\n. Love it! Merging\n. Thanks for letting me know. I fixed the README\n\nOn Tue, Dec 10, 2013 at 2:51 PM, Matt notifications@github.com wrote:\n\n@cryptix https://github.com/cryptix is right. The replacement is here:\nhttps://github.com/codegangsta/martini-contrib/tree/master/binding\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/116#issuecomment-30276788\n.\n. This looks good for now. Sometime we might want to do something more clever for mapping HEAD requests to GET. Today is not that day :)\n. @mvader Only one nit here. This looks good. Thanks for taking care of this!\n. Cool! This looks great. I'm going to rebase this and merge it in\n. To address your concerns:\n1. You don't inject things into ResponseEncoder, it is a singular purpose function. If you want dependencies you can map the function in a handler and use a closure to grab the dependencies you need.\n2. Whats wrong with reflect? Martini doesn't need to completely abstract it away.\n3. Middleware handler return values are already not processed. This is currently by design in Martini. although this can be easily changed if need be.\n4. You don't have to write out the return values. you can choose to do nothing in the function.\n\nThe reason I like this is that it doesn't change the behavior of Martini. I will be honest with you and say that I probably won't use this feature much. I don't find it to be a very good pattern, to me it ruins some of the explicitness that the services provide and creates yet another layer of indirection. I look at this feature as more of an \"advanced\" one and therefore do not want to let any inexperienced developers be bit by the particular way this is implemented.\nThe middleware implementation of this in #110 now requires a user to remember to Use the martini.Printer whenever the user chooses to forego the martini.Classic() route. That is not a hit I am willing to take to have this implemented as middleware. It is IMO not a good fit. Of course, pretty much everything you have in the Writer() middleware you wrote is accomplished by the implementation in this PR.\n. Hey @lukescott. Thanks for going over this contribution with me, I really and truly appreciate your input. For this first go-round (har har) I think I am going to land this PR and close out #110. I am really happy with this implementation and it should give you the tools to get you where you wanted to be.\nThanks again for all the mindshare!\n. Sorry? Use another framework? Roll your own?\nI know you don't want to fork the repo but your use case seems so edge that it might be better for you to do so.\nSent from my iPhone\n\nOn Dec 14, 2013, at 7:32 AM, Luke Scott notifications@github.com wrote:\nPoint 3 is a deal breaker for me.\n\u2014\nReply to this email directly or view it on GitHub.\n. Bam merging this in. I will set up the build servers right now\n. Not sure what you mean here? Do you need extract the subdomain from the request? This would be a good middleware to have in martini-contrib\n\nSent from my iPhone\n\nOn Dec 14, 2013, at 5:46 PM, ZHANG lin notifications@github.com wrote:\nlike {sub}.example.com\n\u2014\nReply to this email directly or view it on GitHub.\n. I like this. Much more consistent with the rest of the codebase. Thanks for the contribution\n. Thanks for the contribution.\n\nThis PR actually exposes a leak in the service injection abstraction. This particular example can be problematic as it  now required overriders of http.ResponseWriter to map both http.ResponseWriter and martini.ResponseWriter to cover both cases.\nIn this instance it might be better to do a type assertion in your handler to get the martini.ReponseWriter:\ngo\nfunc MyHandler(res http.ResponseWriter) {\n  rw := res.(martini.ResponseWriter)\n  if rw.Written() {\n    //do stuff here\n  }\n}\nThis pattern is actually used in the Logger middleware:\nhttps://github.com/codegangsta/martini/blob/master/logger.go#L15-L18\n. Yup. This particular case is not as helpful. I don't want to say \"Never map one instance to multiple types.\" But in this case it may create more headaches than it is worth, since ResponseWriter overwriting is encouraged within middleware.\nLike I said, this is a leaky part of the abstraction. In most cases this is not much of a problem.\nClosing this out\n. Ah. I see the problem now.\nTry using the ServeHTTP method from the websocket.Handler.\ngo\nm.Get(\"/hello\", websocket.Handler(remoteHandler).ServeHTTP)\nThat will give you the correct signature.\nMartini is compatible with the http.HandlerFunc interface. This can get a little confusing as http.Handler doesn't work unless you pass it's ServeHTTP function.\n. @nemothekid Yeah. bytes would probably be better to have as long as it doesn't break existing functionality.\nYou can use your own returnhandler by mapping it as a service:\ngo\nm.Map(martini.ReturnHandler(myReturnFunc))\n. Sounds good to me. Thanks\nOn Mon, Dec 16, 2013 at 4:13 PM, Nimi Wariboko Jr. <notifications@github.com\n\nwrote:\nI'm going to opt to write my own return handler, however I won't issue a\nPR. Thanks for the help.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/127#issuecomment-30714966\n.\n. Thanks. I will take a look at this soon\n. Thanks for putting this together :+1: \n. Awesome. I will take a look at this soon\n. @vaidhy Let me know if you can fix these nits. otherwise I will fix them up\n. Awesome. Thanks for fixing that up\n. Works for me\n. You can use a combination of globbing and the strip package from martini-contrib:\n\n``` go\nm := martini.Classic()\napi := martini.NewRouter()\napi.Get(\"/foobar\", func() string {\n  return \"yo dawg I heard you like routers\"\n})\nm.Get(\"/v1/**\", strip.Prefix(\"/v1\"), api.Handle)\n```\n. like @mvader mentioned. Preprocessor support will probably be an external tool. Martini is a minimal web framework.\n. I have been doing some work here:\nhttps://github.com/codegangsta/gin\nI probably won't want to have the tool in martini itself. I don't like the idea of pushing use of an external tool to run martini apps. Even if it is completely optional.\nclosing this out\n. Yup. Fresh is a good option. I also cleaned up gin a little. I use it on my projects every day https://github.com/codegangsta/gin\nI will eventually feature both of these projects in the martini readme since they are both useful\n. Maybe someday. Since we are in pre 1.0 stage it is not too important to have.\n. closing for now\n. This question will be better served on the martini mailing list.\nhttps://groups.google.com/forum/#!forum/martini-go\n. Merging. As @davecheney mentions, I will probably remove this if it gives us any more trouble.\n. hey @melito I will look at this within the next couple days\n. This is looking pretty good to me. It does look like the build is failing on the build box though: https://app.wercker.com/#buildstep/52b8cf393077c8f24d00a440\n. You can just add a commit and push it up. The PR will be modified automatically\nSent from my iPhone\n\nOn Dec 26, 2013, at 10:15 AM, Mel Gray notifications@github.com wrote:\nThe wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n\u2014\nReply to this email directly or view it on GitHub.\n. great! merging\n. @shuhei I'm more than fine with this. If we are going to make it public we need two things.\n1. Some basic test coverage\n2. Godoc documentation.\n\nAdd these two things and I will be glad to merge it in :)\n. Awesome work. Merging\n. Yes and yes. Pulling it down to fix one nit and merge\n. Thanks for the contribution!\n. Ah yeah nice catch! Merged \n. closing\n. cool. I will take a look at this very soon\n. This is a welcome change. I think i would prefer to not break changes if it really isn't needed.\n. fix those nits and I will land it\n. Awesome. I'm down with that\nSent from my iPhone\n\nOn Jan 9, 2014, at 1:11 AM, JamesClonk notifications@github.com wrote:\nAfter some more thinking I removed the option to skip serving index files from StaticOptions. There's just not really any useful situation for this, and it greatly simplifies my changes to static.go and static_test.go\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks great. Merging!\n. This looks good. This will of course need some test coverage. I can probably get to it later today or tomorrow if you don't have time.\n\nThank for the refactor\n. I started writing the test and realized that this code is not really working properly. Maybe you would have a better show getting a test passing?\n. Great fix. Merging\n. @leebrooks0 I know you asked this 8 days ago, it looks like you found the sessions middleware. Hope everything is going well! :)\n. cool. Any other related questions may be best served in martini-contrib where the sessions package lives\n. I like this addition. I will pull it down soon and test it out\n. Looks great! Thanks for the contribution\n. You can inject the context as a request-level dependency:\ngo\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\nYou can then use the new middleware and get the context injected:\ngo\nm.Use(AppEngine)\nm.Get(\"/\", func(c appengine.Context) (int, string) {\n  return 200, \"OK\"\n})\n. Yup. that is a bonus to the dependency injection. Super easy testing and\nmocking\nOn Wed, Jan 15, 2014 at 3:05 PM, Netherdrake notifications@github.comwrote:\n\nThis looks like its easier to test. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/153#issuecomment-32425519\n.\n. Do you have an error in the console? It might be my ignorance to GAE\n\nI think appengine.NewContext() returns a interface, if that is the case,\nyou want to use the MapTo function so martini knows to map the interface.\ngo\nm.MapTo(appengine.NewContext(r), (*appengine.Context)(nil))\nTry that out and let me know how it goes :)\nOn Wed, Jan 15, 2014 at 4:44 PM, Netherdrake notifications@github.comwrote:\n\nI did it like so:\npackage spotlight\nimport (\n    \"net/http\"\n    \"appengine\"\n\"github.com/codegangsta/martini\"\n)\nfunc init() {\n    m := martini.Classic()\n    m.Use(AppEngine)\n    m.Get(\"/\", func(c appengine.Context) string {\n        return \"foo\"\n    })\n    http.Handle(\"/\", m)\n}\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\nWith just m.Get(\"/\", func() string { it renders foo, but when context is\ninjected as argument, the page gets blank. I'm sorry, Im super new to all\nGAE, Go and Martini xD\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/153#issuecomment-32431981\n.\n. Thanks for catching this. This does look like a lot of code. I instead just made the check inline to avoid having as much code. see commit 890a2a52d2e59b007758538f9b845fa0ed7daccb\n. closing. Thanks again for catching that bug\n. This kind of thing sounds like it may be outside the scope of martini itself. You could certainly use Martini as a base to this kind of functionality.\n. Cool. pulling this down to take a look\n. I like this alot! Merging!\n. @djhworld What does your 404 handler look like?\n. @djhworld as @JamesClonk mentioned, prepend your hrefs with a / and the browser will request the static asset with the host as the base. No need for absolute paths. I just tested this locally and can confirm that it works properly\n. closing this out. It looks as though this issue is not specific to Martini\n. You have a good point with this PR. although it breaks existing functionality. I'm going to do a github search to get an idea of what projects this breaks.\n. We could call it through inject, although that incurs more runtime performance overhead. passing context at least makes this an opt-in to the performance overhead\n. I'm down with this change. I agree that it is cleaner overall. Nice work on this!\n. This is a good addition. pulling this down to fmt and add tests\n. bam. Merged\n. @elithrar So far I haven't heard of anybody having issues because of a env namespace conflict in this use case. Most PaaS bootstrap PORT into the environment automagically, so it is pretty nice to have a martini app work out of the box like that :) \n. merging this puppy\n. Cool! This is a welcome improvement. I will pull this down and test it out soon\n. This looks great :+1: \n\nMerging\n. Merging.\n. Thanks for the contribution @thomaswilde !\n. LGTM. Merging\n. thanks for fixing this. That was a nice catch\n. closing this out. If you have more questions please follow up on the mailing list\n. Thanks for the PR. I will look at this soon\nSent from my iPhone\n\nOn Feb 9, 2014, at 12:48 AM, Paul Shirren notifications@github.com wrote:\nThese issues I am trying to solve are as follows.\nTo provide a mechanism to provide a 405 Method Not Allowed which according to RFC2616 \"MUST include an Allow header containing a list of valid methods for the requested resource\". And to provide an OPTIONS response that satisfies CORS with Access-Control-Request-Method header.\nAs an existence proof of a use for this I have a CORS handler, https://github.com/shirro/martini-experiments/blob/master/cors.go , with a NotFound method which uses Methods to get a list of methods that are valid for the path and uses it to generate the Access-Control-Request-Method if it is an OPTIONS request or a 405 with Allow header if any methods were found.\nPros:\nKeeps things DRY as the NotFound handler can infer the methods from the URL path\nOnly run from a NotFound handler so no impact on performance otherwise\nCons:\nScanning all the routes to find methods is expensive\nChanges an interface\nYou can merge this Pull Request by running\ngit pull https://github.com/shirro/martini dev\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/166\nCommit Summary\nAdded Methods to Router interface for CORS&405\nFile Changes\nM router.go (25)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/166.patch\nhttps://github.com/codegangsta/martini/pull/166.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey, thanks for putting this up. I will check this out soon. It looks like the Routes service was the best place to put it. I'm curious, what ways are you wanting to use the routes service in a middleware?\n. Yeah, it is an unfortunate pitfall of the modularity model we are using. I think this is a great start though. I don't have any issues with the code other than how slow MethodsFor can be. We can optimize that later if it ever becomes a problem by maintaining a map[string][]string where the key is the route pattern and the map is the methods that it contains. that way we can stop matching when we find the first match.\n\nAnyway, that can be for another day. I'm gonna go ahead and merge this in. Nice work!\n. I would be willing to have Chinese documentation if it is needed. Otherwise, the source code should speak for itself pretty clearly. If any chinese developers write tutorials on martini I am more than happy to link it in the readme\n. closing out this issue. Thanks for the heads up! :)\n. Awesome. Thanks for updating those links!\n. Thx for the rogue issue ;) at least now I know you are heckling out martini\nSent from my iPhone\n\nOn Feb 14, 2014, at 8:29 PM, TJ Holowaychuk notifications@github.com wrote:\nnvm I see now \n\u2014\nReply to this email directly or view it on GitHub.\n. URL encoded values can be found with the *http.Request service. martini.Params only applies to the parameters parsed in the route. For instance \"hello/:foo/:bar\" will fill martini.Params with the foo and bar keys.\n. I know of some people that have integrated gorp with martini without many problems. I personally don't use it myself but I'm sure it shouldn't be too bad for them to work together.\n\nAs for a GopherCast, add a suggestion on our uservoice account\n. I like this idea. Even if it is just creating an interface for the log.Logger methods that other logging backends can implement.\nSent from my iPhone\n\nOn Feb 18, 2014, at 6:23 PM, Joshua Spence notifications@github.com wrote:\nIt would be good to allow some generic interface to be used as a logger. This would allow the use of a logging framework such as log4go.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have thought about this for a while. I'm going to play devils advocate\nfor a second.\n\nTechnically the log package in the standard library is already pluggable\nvia taking an io.Writer when creating a new logger\nhttp://golang.org/pkg/log/#New\nWill making an interface to wrap the logger be overkill in this instance?\nOther things to think about if we go this direction:\n1. Do we keep the mapping of log.Logger for compatibility?\n2. Do we then make it conventional to use this new martini.Logger interface?\n3. Will it be confusing to users when martini.Logger is overwritten but\n   log.Logger is not?\nJust spilling my thoughts. I think it would be really nice to have an\ninterface for logging, it will make it consistent with the rest of the\nsystem.\nOn Thu, Apr 3, 2014 at 8:51 AM, Jos\u00e9 Miguel Molina <notifications@github.com\n\nwrote:\n@BurntSushi https://github.com/BurntSushi You're right. So basically it\nshould look like this, right?\ntype Logger interface {\n    func Fatal(...interface{})\n    func Fatalf(string, ...interface{})\n    func Fatalln(...interface{})\n    func Flags() int\n    func Output(int, string) error\n    func Panic(...interface{})\n    func Panicf(string, ...interface{})\n    func Panicln(..interface{})\n    func Prefix() string\n    func Print(...interface{})\n    func Printf( string, ...interface{})\n    func Println(...interface{})\n    func SetFlags(int)\n    func SetPrefix(string)}\nAny thoughts?\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/174#issuecomment-39468326\n.\n. Yeah, the code breakage is the only thing holding me back atm. I know we\nare pre1.0 and it would be OK for us to break it in this way, I still just\ndon't like breaking very common things. I may have to let this marinate in\nmy brain for a while :)\n\nOn Thu, Apr 3, 2014 at 9:25 AM, Andrew Gallant notifications@github.comwrote:\n\nHmm. Now that log.Logger can be overridden, that does kind of change\nthings. So, just to make sure I'm getting things right, here's what I think\nthe problem is. Martini provides, by default, its own logging middleware\nthat does some reasonable default logging for each request. The client may\nwant that logging to be done to a file, or have a certain prefix, or do any\none of a number of other things. Before, this wasn't possible. But now that\nthe client can provide their own log.Logger value, it can be done.\nAs you said, a *log.Logger can be created with any io.Writer, so that\nmeans it should work with other logging systems. For example, if you're\nlogging to stdout, then:\nstdLog := log.New(os.Stdout, \"STD LOG: \", 0)otherLog := log4go.NewConsoleLogWriter()// inject stdLog as *log.Logger so the middleware uses it// inject otherLog which we'll use in our handlers\nThe problem I see with this is that you're forced to create a *log.Loggerwhich may or may not write to the destination independently of your own\nlogger (from, e.g., log4go). I suppose this could be circumvented by\nproviding an io.Writer that proxies everything back through the same\nlogger, but that seems like a kludge.\nThe other approach I'm thinking of is writing a much smaller Loggerinterface. Perhaps one that only has the\nPrint, Printf and Println methods. This is all that's needed from within\nMartini's current middleware. When a client asks for a martini.Logger,\nthey'll get something that can only be used to print. Which I suspect is\nOK. Logger options can be set by injecting your own Logger interface\nvalue. If you really want access to the rest of the logger, then you can\ntype assert. But this isn't the common case I think. So for example:\ntype myLogger {\n  log4go.ConsoleLogWriter}\n// Satisfy Logger interface\notherLog := log4go.NewConsoleLogWriter()// inject otherLog as a martini.Logger// which will be used in Martini's middleware and can// be used in our handlers.// If the logger guarantees that writes from simultaneous// goroutines are safe, then this approach is safe.\nThe benefit of using an interface here is that it makes it easier for\npeople to plug in other logging frameworks without having to deal with the\nfact that two loggers may be trying to write to the same destination\nsimultaneously. (One and only one logger should be writing to a destination\nas it can avoid simultaneous writes, just like the standard *log.Loggerdoes.)\nI think that if we go the Logger interface route, then the user will\nnever actually see a log.Logger. By default, the Logger middleware\ninjects some reasonable log.Logger as a martini.Logger, which can now\nbe overridden using a similar mechanism as in #224https://github.com/go-martini/martini/pull/224,\nI think.\nThis change would also regrettably break a lot of code, but the fix is\nsimple.\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/174#issuecomment-39472572\n.\n. Sweet. Merging\n. The solution here is to have that particular middleware run after the route is matched but before the handler is hit:\n\ngo\nm := martini.Classic()\nm.Get(\"/auth/twitter\", TheMiddleware, MyHandler)\nThat way the middleware will only be run when that route is matched.\n. I'm looking into this. I would really like this type of interaction to work with martini\n. Unfortunately it is a pretty tricky thing. Removing the initial wrapping will break write detection in the middleware loop. The only thing I can think of at the top of my head is to have a ResponseWriter() method on the martini.ResponseWriter that will return the ResponseWriter that was wrapped. This doesn't solve how the spdy ResponseWriter may conflict when you use other middleware that wraps it, but it could be a start\n. @pabbott0 if you have the time would you mind submitting a pull request with the implementation you have? it will be useful to have in core :)\n. Awesome! Thanks\nSent from my iPhone\n\nOn Feb 26, 2014, at 8:09 AM, pabbott0 notifications@github.com wrote:\nSure, I should be able to get to it this weekend.\n\u2014\nReply to this email directly or view it on GitHub.\n. hey. Nice work on this. I will take a look soon\n. Thanks for tracking down this race condition. Merged via rebase\n. Thanks for the fix!\n. What is the import path for your main.go file?\n\nIt looks like you have the github.com/codegangsta/martini package trying to import itself\n. @thewatts did this solve your issue?\n. Looks like by your comment on twitter that you were able to resolve the issue. Closing\n. Nathaniel,\nCongrats on the gschool graduation. I'm totally down for a pairing session. Nights and weekends usually work well for me. If you want to suggest a night we can put it in the calendar.\nJeremy\nSent from my iPhone\n\nOn Mar 1, 2014, at 3:53 PM, Nathaniel Watts notifications@github.com wrote:\nHey @codegangsta, sorry for the late reply! Just finished up my time at http://gschool.it -- the last couple weeks have been nuts.\nBasically, what was happening, was that I was referencing this repo in my import, however my folder structure was identical to martini's github url.\nI had setup my folder structure based on your first couple gophercasts - which were: github.com/codegangtsa/{thing}, and so - when we jumped into martini - I just named it:\ngithub.com/codegangsta/martini\n:) which caused the circular dependency.\nOn a side note - I'd love to pair sometime if you have the time to do so! Just spend 6 months hammering hard on Ruby/Rails, and super intrigued by Go !!\n\u2014\nReply to this email directly or view it on GitHub.\n. do people still use SSI? What about using go templates? perhaps github.com/martini-contrib/render is what you are looking for?\n. Thanks for the heads up! Good to know that it there is still a use case!\n\nIf you come across an SSI library in go please let me know. It should play nicely with martini out of the box but if it doesn't I will make sure that it does\nSent from my iPhone\n\nOn Feb 25, 2014, at 9:22 PM, Kevin Powick notifications@github.com wrote:\nYes, people producing non dynamic content use SSI. As mentioned, it's very handy for including html/text fragments that are common to many pages.\nWe could use go templates \u00e0 la render, but we're trying to fly under our corporate radar on this project. It would be best if our group's front-end developers did not have to consider (or even know about) such \"non standard\" methods. ;)\nUltimately, we'll be able to work around the lack of SSI in Martini, and I don't actually see it as a major shortcoming. So, the request for SSI support could be categorized as a possibly \"nice to have\" feature.  The corporate world moves slowly, so maybe nobody (else) does use SSI.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice catch @superlogical. Merging\n. How is this different from a vanilla net/http server? I don't think martini is doing anything different\n\nSent from my iPhone\n\nOn Feb 25, 2014, at 7:22 AM, zbindenren notifications@github.com wrote:\nEven if I start my application with:\nPORT=3000 HOST=localhost ./myapp\nThe hostname of the injected request (req.URL.Host) is always empty.\nAnd should'd the code in martini.go take localhost if HOST is not set (instead of an empty string):\nhost := os.Getenv(\"HOST\")\nif len(host) == 0 {\n    host = \"localhost\"\n}\nCurrently it looks like:\nhost := os.Getenv(\"HOST\")\nif len(host) == 0 {\n    host = \"\"\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. @DisposaBoy yup, that code can definitely be cleaned up\n\nSent from my iPhone\n\nOn Feb 25, 2014, at 7:59 AM, DisposaBoy notifications@github.com wrote:\n@codegangsta mostly just style note https://github.com/codegangsta/martini/blob/master/martini.go#L75 should be if port == \"\". Also, these lines are redundant https://github.com/codegangsta/martini/blob/master/martini.go#L80-L82 . If that branch is entered, host is already \"\"\n\u2014\nReply to this email directly or view it on GitHub.\n. i just added a commit to master that defaults the host to 127.0.0.1 if it is not set. I also improved the weird style in the logic surrounding setting PORT/HOST.\n\nThanks for the feedback guys\n. That is a perfectly acceptable way to deploy for small services and sites. There is really no special way to deploy martini apps other than having the PORT and MARTINI_ENV environment variables set.\nSent from my iPhone\n\nOn Mar 4, 2014, at 7:38 AM, Vasyl Nakvasiuk notifications@github.com wrote:\n@lgs I mean some step by step guide, or some tricks for deploying.\nIn my small site (https://github.com/gopherway/website) I used for example 2 options https://github.com/gopherway/website/blob/master/server.go#L19:\npath to static\npath to templates\nThen I build a binary, move binary to any place and run:\n$ ./mysite -s .../.../static/ -t .../.../templates/\n\u2014\nReply to this email directly or view it on GitHub.\n. closing as this issue seems resolved\n. This is so awesome! Thanks so much for doing this\n. Martini should support 2 different apps given that you set the PORT environment variable for the second server to be something other than 3000\n\nSent from my iPhone\n\nOn Feb 27, 2014, at 1:37 PM, Ian Lewis notifications@github.com wrote:\nHi,\nIs it possible to instantiate more than one webserver using martini within a project.\nFor example:\nin project foo I need \n1. a RESTful endpoint on port 3000 \n2. an admin endpoint on port 3005\nI have tried creating two different servers inside a project but the settings for the second overwrote the first.\nMany thanks,\nIan\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks. merging\n. ` instead of ''. LGTM\n. Thanks!\n. closing out. looks like this got resolved\n. TheLoggermiddleware only does the request logging. The*log.Logger` service is mapped by martini itself. This way services can have access to a whether or not the logging middleware is being used\n. I get what you are saying though. I will update the documentation to clarify this behavior\n. Awesome! I will check this out soon\n\nSent from my iPhone\n\nOn Mar 3, 2014, at 8:15 PM, jayrox notifications@github.com wrote:\nadd an expires header.\ndefault value of \"-1\" meaning expires immediately and the browser will request a new version on next refresh.\nYou can merge this Pull Request by running\ngit pull https://github.com/jayrox/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/192\nCommit Summary\nUpdate static.go\nFile Changes\nM static.go (10)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/192.patch\nhttps://github.com/codegangsta/martini/pull/192.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks good to me. Merging\n. Take a look at https://github.com/martini-contrib/binding It should accomplish that you want.\n. whoops... accidentally closed\n. I believe multipart form is supported in binding, if it isn't it should and\nyou should file an issue\n\nOn Tue, Mar 4, 2014 at 9:31 AM, Guillermo Estrada\nnotifications@github.comwrote:\n\nThank you I'll give it a try. I dunno if this will help with File upload\nfor example as it tries to binds them into a struct and I might need to pre\nprocess them before hand, but Ill dig into it.\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650748\n.\n. cool. closing this\n. Yup. it looks like the ideal would be to expose the martini.Routes service on the martini.Router as well as mapping it to the martini instance.\n\nThis still isn't the most ideal thing as it is yet another point of failure when graduating from a martini.Classic() to a martini.New() implementation. :/\n. Yeah I think you are right with the rawness. We would need to use Map as\nRouter is a middleware and not a service.\nOn Tue, Mar 4, 2014 at 3:07 PM, Andrew Gallant notifications@github.comwrote:\n\nYup. it looks like the ideal would be to expose the martini.Routes service\non the martini.Router as well as mapping it to the martini instance.\nHow do you want to do it? One idea is to just add the Routes interface to\nthe Router interface. This would make it easy for people to map the\nservice if they aren't using martini.Classic. However, there's a certain\nasymmetry to this (since users would need to use Map instead of Use), so\nyou could also add a Routes function:\nfunc Routes(r Router) martini.Handler {\n    return func(c martini.Context) {\n        c.MapTo(r, (*Routes)(nil))\n    }}\nAlthough we'd need a different name...\nLet me know how you want to proceed and I'll update the PR. Maybe there\nare better ideas...\nThis still isn't the most ideal thing as it is yet another point of\nfailure when graduating from a martini.Classic() to a martini.New()\nimplementation. :/\nYeah, but I think this can be mitigated with good documentation. Users\nshould understand that moving to New is a bit more raw. (I got that\nimpression anyway.)\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/194#issuecomment-36690674\n.\n. Awesome! Nice work. I will check this out soon\n. Sorry, my previous response was confusing with middleware vs service. martini.Routes is indeed a service, not a middleware.\n\nOther than the little documentation nits, this looks awesome! I really like the cleanup by removing the routes struct. Once those doc fixes are in I will merge this :)\n. Thanks for the contribution!\n. @BurntSushi @DisposaBoy Thanks for looking into this. Closing the issue as it is working as intended\n. The router uses regex to match so you may be able to get away with some regex cleverness\nSent from my iPhone\n\nOn Mar 5, 2014, at 8:41 PM, Kevin Powick notifications@github.com wrote:\nFor a given route with a named parameter\nm.Get(\"/hello/:name\", func(params martini.Params) string {\n    return \"Hello \" + params[\"name\"]\n})\nHow can I ensure that the following requests will be matched to the route, but not affect the casing of the named parameter?\n/hello/Bubba\n/HELLO/Bubba\n/hELlo/Bubba\nInitially, I thought I had solved route matching regardless of case by creating a simple middleware handler.\nm.Use(func(req *http.Request) {\n    req.URL.Path = strings.ToLower(req.URL.Path)\n})\nUnfortunately, the above also changes the casing of named parameters. Your suggestions would be appreciated.\nBTW, Martini is a great project. Thanks to all contributors for their excellent work.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this is definitely and improvement. Merging this will break some code but I think I am okay with that since this feature was merged not too long ago\n. Merging.\n. a Martini instance implements http.Handler so it plays nicely with the rest of the http package:\n\n``` go\nhttp.HandleFunc(\"/\", RootHandler)\n// martini goes under \"/api\"\nm := martini.Classic()\n// ...\nhttp.Handle(\"/api/*\", m)\nhttp.ListenAndServe(\":8080\", nil)\n```\nTry something like boom for http benching https://github.com/rakyll/boom\n. closing\n. Map, as well as other functionality, comes from https://github.com/codegangsta/inject package. It isn't super obvious that it comes from there though\n. This looks like a really natural extension of how martini works. I will pull this down soon and check it out. I really like the api\n. This looks great. Merging\n. I'm interested in seeing what kind of overhead this brings compared to looking up the type in the injector. I don't wish to bring in too much overhead but I do like the convention here\n. closing, as this looks like too much of a perf hit. maybe when injection is optimized a bit Il will consider it.\n. Agree with @mvader. If we want to put it in it should be optional to do so\n. Awesome! Merging\n. The router is what handles the URL. In a martini.Classic the Action is set to the martini.Router\nSent from my iPhone\n\nOn Mar 21, 2014, at 7:43 AM, ggaaooppeenngg notifications@github.com wrote:\nfunc (m Martini) ServeHTTP(res http.ResponseWriter, req http.Request) {\n    m.createContext(res, req).run()\n}\nthe code seems martini serves every request with a new context,but how it dispatch url?\ni find no more detail in context.run(). where does it do work like code below?\nm.Get(\"/\", func() {\n  // \u663e\u793a\n})\nm.Patch(\"/\", func() {\n  // \u66f4\u65b0\n})\nI hava not clearly find out every serveHTTP runs to which part of code to match the url,and dispatch the handler.\nCould any one show any remind?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice and clean. Landing\n. Yup. https://github.com/go-martini/martini#routing outlines this pretty well.\n\nm.Get(\"/hello/**\", func(params martini.Params) string {\n  return \"Hello \" + params[\"_1\"]\n})\n. The logger can be overridden by mapping a new logger to martini. The only problem with this approach is how the logger is used with m.Run() https://github.com/go-martini/martini/blob/master/martini.go#L81\nIf we look up the logger by getting it from the injector then I think we can have this issue solved.\n. Awesome. Merging\n. Thanks for the updates guys. I will make sure the import paths are updated for the martini-contrib packages today\nSent from my iPhone\n\nOn Mar 31, 2014, at 6:50 AM, Jamie Matthews notifications@github.com wrote:\nI think each contrib package needs to have its import path be updated to be github.com/go-martini/martini.\nThis is a little dicey because I believe it could break anyones code who updates a martini contrib package without updating to the new martini instance. But I think it just has to be done, the sooner the better. This is probably one of my least favorite things about go :(\n\u2014\nReply to this email directly or view it on GitHub.\n. I updated render. I'm going to update any other packages that I am the owner of and file issues for the other packages so the respective owners can update them :)\n. This may be because of the recent move to github.com/go-martini/martini import path. Modifying your path in the code should solve the issue.\n. yup. that should do the trick\n. Struct embedding to the rescue!\n\nThe comments in this issue make this obvious but I will just say it for clarity. The goal of martini is to be minimal on features, but flexible enough for more specific use cases to be easily implemented via extension. It looks like in this particular case Martini gives quite a few good options for case insensitive routing :)\nSent from my iPhone\n\nOn Apr 1, 2014, at 6:06 PM, Andrew Gallant notifications@github.com wrote:\n@kpowick I know :P Just showing how you could do it cleanly with struct embedding. (@codegangsta was rightly concerned about adding (?i) every time becoming a bit unwieldy.)\n\u2014\nReply to this email directly or view it on GitHub.\n. Try updated martini on your deployment box and see if that helps. The github org move messed with the   Import paths a bit\n\nSent from my iPhone\n\nOn Apr 2, 2014, at 6:02 AM, Piotr Kowalczuk notifications@github.com wrote:\nOn localhost with go1.2.1 darwin/amd64 there is no problem but when i try to deploy on debian with go1.2.1 linux/amd64 error occurred.\n[martini] PANIC: Value not found for type martini.Context\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:320 (0x433768)\n    (routeContext).run: panic(err)\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:221 (0x432d04)\n    (_route).Handle: context.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:112 (0x431d7c)\n    (_router).Handle: route.Handle(context, res)\n/home/pkowalczuk/go/src/github.com/piotrkowalczuk/netwars-backend/server.go:49 (0x401c80)\n    Router.Handle.fm: m.Action(router.Handle)\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/recovery.go:140 (0x434166)\n    func.004: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:339 (0x425312)\n    call32: CALLFN(call32, 32)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/logger.go:16 (0x433a78)\n    func.001: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:69 (0x42fa93)\n    (Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/pkg/net/http/server.go:1597 (0x4491ee)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/pkg/net/http/server.go:1167 (0x4471f7)\n    (_conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/pkg/runtime/proc.c:1394 (0x418b00)\n    goexit: runtime\u00b7goexit(void)\n[martini] Completed 500 Internal Server Error in 11.930356ms\n[martini] Started POST /register\n[martini] PANIC: Value not found for type martini.Context\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:320 (0x433768)\n    (_routeContext).run: panic(err)\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:221 (0x432d04)\n    (_route).Handle: context.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/router.go:112 (0x431d7c)\n    (_router).Handle: route.Handle(context, res)\n/home/pkowalczuk/go/src/github.com/piotrkowalczuk/netwars-backend/server.go:49 (0x401c80)\n    Router.Handle.fm: m.Action(router.Handle)\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/recovery.go:140 (0x434166)\n    func.004: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:339 (0x425312)\n    call32: CALLFN(call32, 32)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:154 (0x4302db)\n    (context).Next: c.run()\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/logger.go:16 (0x433a78)\n    func.001: c.Next()\n/usr/local/go/src/pkg/runtime/asm_amd64.s:340 (0x425372)\n    call64: CALLFN(call64, 64)\n/usr/local/go/src/pkg/reflect/value.go:474 (0x551a7b)\n    Value.call: call(fn, ptr, uint32(size))\n/usr/local/go/src/pkg/reflect/value.go:345 (0x550b6d)\n    Value.Call: return v.call(\"Call\", in)\n/home/pkowalczuk/go/src/github.com/codegangsta/inject/inject.go:102 (0x560844)\n    (_injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:163 (0x430382)\n    (_context).run: , err := c.Invoke(c.handler())\n/home/pkowalczuk/go/src/github.com/codegangsta/martini/martini.go:69 (0x42fa93)\n    (_Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/pkg/net/http/server.go:1597 (0x4491ee)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/pkg/net/http/server.go:1167 (0x4471f7)\n    (_conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/pkg/runtime/proc.c:1394 (0x418b00)\n    goexit: runtime\u00b7goexit(void)\n[martini] Completed 500 Internal Server Error in 12.53285ms\nhttps://github.com/piotrkowalczuk/netwars-backend/blob/develop/server.go#L49\n\u2014\nReply to this email directly or view it on GitHub.\n. Martini has moves to the github.com/go-martini/martini import path. This error is likely happening because you either didn't update an import path somewhere. If this isn't the case then I can definitely investigate the issue further\n\nSent from my iPhone\n\nOn Apr 2, 2014, at 6:18 AM, Piotr Kowalczuk notifications@github.com wrote:\nI removed martini from src directory and fire go get once more. Doesnt help. It only happens with POST actions.\n\u2014\nReply to this email directly or view it on GitHub.\n. gzip PR has been merged. Closing :)\n. @BurntSushi is correct. martini.Params is not available in middleware because the request has not yet been routed\n. LGTM :+1: \n\nGo ahead and merge it @mvader \n. I can see Martini enabling this kind of behavior via extension. That way it is an opt in rather than a feature forced on users. What does the API need in order to print routes?\nSent from my iPhone\n\nOn Apr 14, 2014, at 8:32 AM, Harley Laue notifications@github.com wrote:\nYou're right. I will say though, I did like that Dropwizard printed the routes upon starting (I don't recall if they do that unconditionally though.) Rails also has a utility to print all routes as well IIRC. So it's not an uncommon feature and can be quite valuable to verify your routes.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah. I think that is a good idea. The Routes middleware should be able to\nsupport something like that\n\nOn Mon, Apr 14, 2014 at 8:58 AM, Harley Laue notifications@github.comwrote:\n\nI can't speak for others, but perhaps a method to return an array of\nstructs containing the method & original pattern?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/227#issuecomment-40383594\n.\n. Yup. A martini contrib package would be great to have\n\nOn Thu, Apr 10, 2014 at 4:57 AM, \u0635\u0644\u0627\u062d \u0627\u0644\u062f\u064a\u0646 notifications@github.comwrote:\n\nimporting the net/http/pprofhttp://golang.org/src/pkg/net/http/pprof/pprof.gopackage using the blank\n_ identifier will trigger the init() method :\n62       func init() {\n63      http.Handle(\"/debug/pprof/\", http.HandlerFunc(Index))\n64      http.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(Cmdline))\n65      http.Handle(\"/debug/pprof/profile\", http.HandlerFunc(Profile))\n66      http.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(Symbol))\n67  }\nThis code will register a bunch of handlers in the DefaultServeMux, so\nside-effects of this importing doesn't effect the Martini.Router in any\nway.\nMaybe providing a martini-contrib module for that will be a good\nsolution. The module should declare an init() function to do the same\nhandlers registration stuff.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/228#issuecomment-40069569\n.\n. Create a repo with the code. I can take a look and make sure it works well\nfor contrib. After that I make a repo in contrib for ou to manage\n\nOn Thu, Apr 10, 2014 at 9:55 AM, \u00d5\u00e1\u00c7\u00cd \u00c7\u00e1\u00cf\u00ed\u00e4 notifications@github.comwrote:\n\n@codegangsta https://github.com/codegangsta I can take care of it , how\ncan I add it to martini-contrib repo - N00p question :) - ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/228#issuecomment-40109944\n.\n. closing\n. Yeah. Maybe we can have a NotFound() method in the martini.Routes service.\nThat way it is more explicit\n\nOn Thu, Apr 10, 2014 at 10:56 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\nI already doubt the correctness of my decision, but i need way for single\nNotFound handler.. some like\nm.Get(\"/:page\", func(r martini.Router...) {\n    r.PassNotFound()\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/pull/229#issuecomment-40117174\n.\n. Hmm bummer. Looks like this be more work than we originally thought.\n\nStill we can keep the issue here and see of we can add it without regressions\nSent from my iPhone\n\nOn Apr 11, 2014, at 4:52 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI've been trying to implement this today but I came across a few things:\nYou need context to call the not found handler (you don't have it in the router)\nYou need to call it from Routes without any param (then you don't have context. See point one).\nBoth Martini and Router have a NotFound method already so the name's not available.\nAny ideas?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nothing is wrong with the other approach. I'm trying to think of use cases that may be broken by it but I can't think of any right now.\n\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n. I do think that the PR is probably our best option at the moment.\n\nOn Fri, Apr 11, 2014 at 11:35 AM, jayrox notifications@github.com wrote:\n\nwhat if NotFound knew the route that was requested and if it was routable.\nso NotFound knew if it was NotFound or ReallyNotFound?\nOn Fri, Apr 11, 2014 at 2:33 PM, Vsevolod Balashov <\nnotifications@github.com\n\nwrote:\nNow we will have a 2 handlers: NotFound and ReallyNotFound :) I again\nthink that my PR is properly solution =)\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/230#issuecomment-40238829>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40239049\n.\n. Lets try with the implementation here\nhttps://github.com/go-martini/martini/pull/229\n\nMake sure we have no regressions. and add some tests. I think it makes\nsense that an unwritten request would be considered a 404. What do you guys\nthink?\nOn Fri, Apr 11, 2014 at 11:47 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\njust rename NotFound to NotHandled ?\n\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40240228\n.\n. Agreed\n\nSent from my iPhone\n\nOn Apr 13, 2014, at 5:10 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nAll the links on the site redirect to the new org, but they should be changed anyway.\n\u2014\nReply to this email directly or view it on GitHub.\n. Updated the site. closing\n. Jose is right. Between overriding ReaponseWriter and BeforeFunc there should be enough in martini to accomplish what you need. Check out the github.com/martini-contrib/gzip flas an example\n\nSent from my iPhone\n\nOn Apr 13, 2014, at 5:08 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI think you could achieve that using the BeforeFunc method on ResponseWriter https://github.com/go-martini/martini/blob/master/response_writer.go#L24\n\u2014\nReply to this email directly or view it on GitHub.\n. Overriding ResponseWriter with your own implementation will give you access to all the Write calls, which in turn gives you access to all of the data written to the response.\n. closing\n. Perhaps stack overflow or the mailing list would be a better place to ask. This doesn't sound like a bug. closing\n. @losinggeneration It is fitting that Martini not have it's own implementation of https. It is already easy enough to build https support in app using the standard library. Closing out this issue\n. Not directly. Are you having issues integrating it?\n. Yeah. I'm going to fix it right now\n. wercker now fixed!\n. thanks for the link\n. A couple things. We already have a Route interface. We should probably just have accessor methods like Pattern() and Method(). This will eliminate the need for the routeinfo struct\n\nAlso, what do you think of renaming GetAllRoutes to All?\n. Looks good!\n. :+1: \n. We might hold off on this. I want to land it, but only after https://github.com/codegangsta/inject/pull/18 lands. This will make it so we can map the logger as is but still have it fulfill the interface with regards to dependency resolution\n. Lately I have been feeling alright with the extensibility *log.Logger provides. You can read my thoughts here:\nhttps://github.com/codegangsta/negroni/issues/38\nClosing this issue for now\n. I just reverted this change. I'm happy to have this in as long as we document it's usage and notify current martini users of breaking changes on the mailing list before we land it.\n. Thanks for the input Scott!\nOn Fri, Apr 25, 2014 at 11:55 AM, Scott Parkerson\nnotifications@github.comwrote:\n\nI think that this kind of change would be better suited by having an\nexplicit method call or return value that can grant this sort of behavior.\nReturning 200 OK by default (i.e. assuming handled, not \"not found\") is\nbetter default behavior IMHO.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/pull/246#issuecomment-41427415\n.\n. Awesome! I will take a look at this soon.\n\nSent from my iPhone\n\nOn Apr 25, 2014, at 4:50 PM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nAddresses #244\nThe only thing that bothers me is that it's possible to change the route name inside the handler and that may lead to some weird errors with URLFor. But I suppose that's up to the developer.\n@codegangsta any thoughts?\nYou can merge this Pull Request by running\ngit pull https://github.com/go-martini/martini feature-access-active-route\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/250\nCommit Summary\nAbility to access the current route from a handler\nFile Changes\nM router.go (1)\nM router_test.go (16)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/250.patch\nhttps://github.com/go-martini/martini/pull/250.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks good to me. Merging\n. This should solve the issue. Sometimes updating Go will lead to these kinds of errors. Updating the package should be enough\n. thanks for the input folks. closing out this issue\n. This is how net/http works. You cannot mutate the header after writing a status code or content \n\nSent from my iPhone\n\nOn May 1, 2014, at 2:25 AM, vickyjam notifications@github.com wrote:\npackage main\nimport (\n\"github.com/go-martini/martini\"\n\"log\"\n\"net/http\"\n)\nfunc main() {\nm := martini.Classic()\nm.Use(func(c martini.Context, res http.ResponseWriter) {\nlog.Println(\"before a request\")\nres.Header().Set(\"before\", \"1\")\nc.Next()\nlog.Println(\"after a request\")\nres.Header().Set(\"after\", \"2\")\n})\nm.Get(\"/\", func() string {\n    return \"test next!\"\n})\nm.Run()\n}\n$ curl http://127.0.0.1:3000/ -I\nHTTP/1.1 200 OK\nBefore: 1\nDate: Thu, 01 May 2014 09:14:03 GMT\nContent-Length: 10\nContent-Type: text/plain; charset=utf-8\nHave \"Before: 1\", but not have \"After: 2\"\n\u2014\nReply to this email directly or view it on GitHub.\n. @mvader is correct. A Martini Handler is a callable function. Sometimes we use a kind of Factory pattern in the code where we can return a closure as that function and utilize the parent functions arguments as configuration. Static for instance:\n\ngo\nfunc Static(dir string) Handler {\n  return func(c martini.Context) {\n    // we now have access to the 'dir' variable\n  }\n}\n. Awesome. Merging\n. There is no reason for it really. The Run() method is simply a convenience\nand http.ListenAndServeTLS is totally compatible with Martini. Perhaps we\ncould have better documentation surrounding the use of it. Otherwise I\ndon't think we can offer enough wins to justify adding another method to\nMartini\nOn Sun, May 4, 2014 at 2:06 PM, tarqe39 notifications@github.com wrote:\n\nHi!\nWas wondering would it be a problem to add SSL support. As far as i can\nsee, the only change would be a new Run method on Martini struct that would\ncall ListenAndServeTLS on http.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/258\n.\n. This is a good addition! Merging\n. This is awesome! Thanks for the contribution!!\n\nSent from my iPhone\n\nOn May 7, 2014, at 4:59 AM, Myung Sun Kim notifications@github.com wrote:\nHi\nMartini seems awesome and very easy to use. I haven't done much of production work with Martini, but I have played with it for last couple weeks, and I absolutely love this.\nSo I decided to create Korean translation for the documentation, hoping my fellow Korean people will get to know martini a bit easier.\nYou can merge this Pull Request by running\ngit pull https://github.com/RexK/martini feature/korean-translation\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/260\nCommit Summary\nKorean Translation #1\nFirst draft for Korean translation\nFile Changes\nM README.md (4)\nA translations/README_ko_kr.md (348)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/260.patch\nhttps://github.com/go-martini/martini/pull/260.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This might be better served as a martini-contrib package rather than be a part of martini core\n\nSent from my iPhone\n\nOn May 8, 2014, at 8:38 PM, Keiji Yoshida notifications@github.com wrote:\nHi, I changed static.go so that martini.Static can serve binary data from memory instead of files on disk.\nI wanted to serve binary data generated from static files by using go-bindata and I added this feature on martini.Static.\nThanks.\nYou can merge this Pull Request by running\ngit pull https://github.com/yosssi/martini bindata\nOr view, comment on, or merge it at:\nhttps://github.com/go-martini/martini/pull/262\nCommit Summary\nAdd a retrieving binary data from memory (instead of files on disk) function on martini.Static.\nFile Changes\nM static.go (49)\nM static_test.go (29)\nPatch Links:\nhttps://github.com/go-martini/martini/pull/262.patch\nhttps://github.com/go-martini/martini/pull/262.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks like your test is importing the old version of martini \"github.com/codegangsta/martini\". This will present problems when trying to match types.\n. Awesome. Merging\n. @mohamedattahri I agree with @jonathaningram. Let's keep this more like the standard library and just take a string like http.ListenAndServe\n. Once that is done I will happily merge this\n. The included martini middlewares are supposed to be useful for most cases,\nbut not necessarily extendable. The extendibility of martini is in adding\nnew or replacing the existing middleware using the m.Handlers function\n\nOn Thu, May 15, 2014 at 9:47 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nI don't think there's a better way to do this right now.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/266#issuecomment-43235028\n.\n. Yeah that sounds great. I will add a repo to martini-contrib when I get a chance\n. @yvasiyarov Just added you to the team. Feel free to push your code to the https://github.com/martini-contrib/gorelic repo! Thanks for the contribution\n. @sevkin Martini matches for routes on the req.URL.Path field. So rewriting the req.URL should do the trick\n. closing\n. Yeah I would love to have a test case as well as a possible benchmark for this so we can see how if the performance regression affects Martini all that much\n. @omeid thanks for looking into this. Closing\n. You can do this by mapping your own instance of *log.Logger to martini with whatever flags/prefix you want\n. closing\n. I like this addition! Thanks for the contribution. Merging\n. Thanks for the update. I will look into this ASAP \n\nSent from my iPhone\n\nOn Jun 27, 2014, at 6:19 PM, Daniil Kulchenko notifications@github.com wrote:\nI updated from a two month old version of Martini to master today, and the static middleware doesn't work at all anymore, likely caused by this change.\ndaniilk:~ \u221e curl http://localhost:3000/test.js\n404 page not found\ndaniilk:~ \u221e curl http://localhost:3000/public/test.js\n404 page not found\ndaniilk:~ \u221e\nHere's the source:\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n    m.Run()\n}\nand my directory listing:\ndaniilk:~/testcase \u221e ls -lR\ntotal 8\ndrwxr-xr-x  3 daniilk  staff  102 Jun 27 18:02 public\n-rw-r--r--  1 daniilk  staff  136 Jun 27 18:04 server.go\n./public:\ntotal 8\n-rw-r--r--  1 daniilk  staff  16 Jun 27 18:02 test.js\ndaniilk:~/testcase \u221e\nI'm running it via \"go run server.go\".\nThis PR uses os.Args[0], which is basically wrong when run with 'go run':\ndaniilk:~ \u221e go run test.go\n/var/folders/x4/931hvyfj3ml12vcrrvs5xhsm0000gn/T/go-build887935557/command-line-arguments/_obj/exe/test\ndaniilk:~ \u221e\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the contribution. Merging\n. I'm not sure if this is the right solution. Perhaps the Root default is a bad default right now and we should stick to the working directory so we don't break existing martini apps.\n\nFor those who want the Root to be in the location of he binary they can easily override it.\n. I'm putting together a PR right now that will revert to how it worked previously by default. But one can override the Root variable to do what they intended.\n. closing in favor of #281. Thanks for putting forth the effort to make the fix! It is much appreciated\n. closing in favor of #281. Thanks for being a part of the discussion!\n. waiting for the build. Then I will merge it\n. Nice fix! Thanks for looking into the issue! Merging\n. Unfortunately not. interface{} is the best we got to do this sort of thing\nSent from my iPhone\n\nOn Jul 11, 2014, at 5:58 AM, Chinmay Kulkarni notifications@github.com wrote:\nAh, I guess this wouldn't work then\nm.Get(\"/\", func() (int, string) {\n  return 418, \"i'm a teapot\" // HTTP 418 : \"i'm a teapot\"\n})\nAny other way of handling this situation ?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!\n. LGTM. Landing\n. Nice catch. I'm happy to merge this in\n. Thanks for the contribution!\n. Excellent. Thanks for the contribution\n. @macedo keep In mind that this will not be safe from a concurrency standpoint unless we add a mutex around our routes collection. I think this will be useful, but I don't want to encourage this unless it will be thread safe\n. Awesome! :+1: \n. Looks great. Merging\n. Works for me!\n. Currently there is no support for this kind of behavior. Right now the inject package will panic if a dependency is not met.\nhttps://github.com/codegangsta/inject/blob/master/inject.go#L96\n\nI'm not sure how beneficial it may be to bake some code into Martini for this case. Another possible solution is to recover the panic from inject via a middleware and handle the case there\n. Thanks!\n. ",
    "k1arash": "Works with all ports except for 8080, therefore can't used it on app engine.\n. Works with all ports except for 8080, therefore can't used it on app engine.\n. ",
    "hernan43": "In the video tour it looks like the webserver reloads automatically when you change the file. If this is true, how are you doing that?\n. In the video tour it looks like the webserver reloads automatically when you change the file. If this is true, how are you doing that?\n. ",
    "ioboi": "Good idea, but what should happen if a required field is not present?\n. I changed the key to the fieldname. Errors are in a string seperated by comma. \n. Thanks :)\nI think it it won't fire as the tag \"go1.1\" means from Go version 1.1 onward.\nhttp://golang.org/pkg/go/build/\n. Good idea, but what should happen if a required field is not present?\n. I changed the key to the fieldname. Errors are in a string seperated by comma. \n. Thanks :)\nI think it it won't fire as the tag \"go1.1\" means from Go version 1.1 onward.\nhttp://golang.org/pkg/go/build/\n. ",
    "elithrar": "Perhaps allow:\n- The user to customise the path to the error pages (but provide a default otherwise)\n- The ability to call a function to handle error pages (404, 500, etc)\n- The same when using Recovery() middleware.\nObviously it's best to keep things slim, but good looking error pages are useful when dealing with non-technical users.\n. For the record, gorilla/mux implements it this way: https://github.com/gorilla/mux/blob/master/mux.go#L40\ngo\ntype Router struct {\n        // Configurable Handler to be used when no route matches.\n        NotFoundHandler http.Handler\n        ...\n}\nIt defaults to http.NotFoundHandler() ifr.NotFoundHandler` is nil. It is (IMO!) a quick way to let you render (with templates) 404 pages.\n. The problem is: fast compared to what? There aren't precisely comparable frameworks to benchmark it against, and many HTTP benchmarking tools are highly variable. \nYou could possibly benchmark the router against gorilla/mux & pat, but even then it's not going to be a huge deal: routing is rarely ever the bottleneck. DB queries, form processing and all that will be many times slower. \nNote that I think benchmarks can be useful when you have a moderately complex application\u2014in an effort to detect slowdowns\u2014but \"Hello World\" style benchmarks for small web frameworks don't tell you anything useful. \nMy two (more like 10) cents. \n\nOn 15 Nov 2013, at 11:45 pm, Alan Ball notifications@github.com wrote:\nIt's true, it'd be neat to see how fast it is\n\u2014\nReply to this email directly or view it on GitHub.\n. @sadjow What kind of benchmarks, then? No-one has suggested anything specific. I've mentioned \"Hello World\" benchmarks because it becomes much harder to write complex ones in a framework that aren't just arbitrary (for the sake of a benchmark).\n\nPS: Of course, note that I'm just an interested \"spectator\" to this project, but I think benchmarks can be misleading at this level.\n. @cgarvis Do you have the source for that? 550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource defaults. \nYou should be able to generate a magnitude more requests per second with some tuning. \n. To add to what Dave said: use https://github.com/wg/wrk or\nhttps://github.com/lighttpd/weighttp - I much prefer wrk, though.\nPS: Like I said upthread, \"reliable\" benchmarks are a minefield. Lots of\nnew users are swayed by them in cases where a) the benchmark is faulty or\nb) the relative \"slowness\" will never (ever) affect their application\nbecause few of us smash tens of thousands of req/s.\nOn Tue, Nov 26, 2013 at 8:57 AM, Dave Cheney notifications@github.comwrote:\n\nplease god no, no benchmarks with ab\nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock\nnotifications@github.comwrote:\n\n@cgarvis https://github.com/cgarvis Do you have the source for that?\n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource\ndefaults.\nYou should be able to generate a magnitude more requests per second with\nsome tuning.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258419\n.\n. To add some more context to what Jeremy said: if you implement any kind of anti-CSRF protection in your application, you're looking at 2500 - 5000 ns/op to generate a random number, XOR it & convert the result to base64. That's before checking the token in the session (which will take longer still). \n\nYou won't have CSRF on every page of course, but 538ns is a drop in the ocean (literally). In the land of web applications it'd never be the bottleneck outside of routing tiny 1KB requests.\n. Just keep in mind\u2014for those who stumble across this issue and who aren't\nsuper knowledgable about benchmarks\u2014that most (even large) web apps do not\nspend a lot of time in the router.\nI just want to make sure someone \"new\" to this doesn't mistake Martini's\nposition in those benchmarks for it being slow: very (very) few will hit a\npoint where the router is the hot spot.\nMost of the time will be spent in the DB, writing/reading seasons and\nrendering templates.\nOn Saturday, January 4, 2014, Kevin Darlington wrote:\n\nHere are benchmarks of mux/routers/middleware:\nhttps://github.com/cypriss/golang-mux-benchmark/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-31567386\n.\n. @ekanna You would need to write some gzip middleware\u2014see the docs for how to plug in middleware: https://github.com/codegangsta/martini#middleware-handlers\n\nThis StackOverflow answer might get you started on the middleware itself, however my advice would be to use nginx as a front-end proxy and let it handle gzipping, SSL and all the extra parts that it's really good at.\n. This is actually already possible. You can change the PORT env var or as per the README:\n\nMartini's Run function looks for the PORT environment variable and uses that. Otherwise Martini will default to port 3000. To have more flexibility over port and host, use the http.ListenAndServe function instead.\n\ngo\n m := martini.Classic()\n // ...\n http.ListenAndServe(\":8080\", m)\n(my opinion is that \"PORT\" and \"HOST\" are far too generic and risk conflicting with other env vars that might be set for other non-Martini applications. Something like MARTINI_HOST would make more sense, although os.GetEnv is so simple that it's better to leave it up to the end-user)\n. Perhaps allow:\n- The user to customise the path to the error pages (but provide a default otherwise)\n- The ability to call a function to handle error pages (404, 500, etc)\n- The same when using Recovery() middleware.\nObviously it's best to keep things slim, but good looking error pages are useful when dealing with non-technical users.\n. For the record, gorilla/mux implements it this way: https://github.com/gorilla/mux/blob/master/mux.go#L40\ngo\ntype Router struct {\n        // Configurable Handler to be used when no route matches.\n        NotFoundHandler http.Handler\n        ...\n}\nIt defaults to http.NotFoundHandler() ifr.NotFoundHandler` is nil. It is (IMO!) a quick way to let you render (with templates) 404 pages.\n. The problem is: fast compared to what? There aren't precisely comparable frameworks to benchmark it against, and many HTTP benchmarking tools are highly variable. \nYou could possibly benchmark the router against gorilla/mux & pat, but even then it's not going to be a huge deal: routing is rarely ever the bottleneck. DB queries, form processing and all that will be many times slower. \nNote that I think benchmarks can be useful when you have a moderately complex application\u2014in an effort to detect slowdowns\u2014but \"Hello World\" style benchmarks for small web frameworks don't tell you anything useful. \nMy two (more like 10) cents. \n\nOn 15 Nov 2013, at 11:45 pm, Alan Ball notifications@github.com wrote:\nIt's true, it'd be neat to see how fast it is\n\u2014\nReply to this email directly or view it on GitHub.\n. @sadjow What kind of benchmarks, then? No-one has suggested anything specific. I've mentioned \"Hello World\" benchmarks because it becomes much harder to write complex ones in a framework that aren't just arbitrary (for the sake of a benchmark).\n\nPS: Of course, note that I'm just an interested \"spectator\" to this project, but I think benchmarks can be misleading at this level.\n. @cgarvis Do you have the source for that? 550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource defaults. \nYou should be able to generate a magnitude more requests per second with some tuning. \n. To add to what Dave said: use https://github.com/wg/wrk or\nhttps://github.com/lighttpd/weighttp - I much prefer wrk, though.\nPS: Like I said upthread, \"reliable\" benchmarks are a minefield. Lots of\nnew users are swayed by them in cases where a) the benchmark is faulty or\nb) the relative \"slowness\" will never (ever) affect their application\nbecause few of us smash tens of thousands of req/s.\nOn Tue, Nov 26, 2013 at 8:57 AM, Dave Cheney notifications@github.comwrote:\n\nplease god no, no benchmarks with ab\nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock\nnotifications@github.comwrote:\n\n@cgarvis https://github.com/cgarvis Do you have the source for that?\n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource\ndefaults.\nYou should be able to generate a magnitude more requests per second with\nsome tuning.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258419\n.\n. To add some more context to what Jeremy said: if you implement any kind of anti-CSRF protection in your application, you're looking at 2500 - 5000 ns/op to generate a random number, XOR it & convert the result to base64. That's before checking the token in the session (which will take longer still). \n\nYou won't have CSRF on every page of course, but 538ns is a drop in the ocean (literally). In the land of web applications it'd never be the bottleneck outside of routing tiny 1KB requests.\n. Just keep in mind\u2014for those who stumble across this issue and who aren't\nsuper knowledgable about benchmarks\u2014that most (even large) web apps do not\nspend a lot of time in the router.\nI just want to make sure someone \"new\" to this doesn't mistake Martini's\nposition in those benchmarks for it being slow: very (very) few will hit a\npoint where the router is the hot spot.\nMost of the time will be spent in the DB, writing/reading seasons and\nrendering templates.\nOn Saturday, January 4, 2014, Kevin Darlington wrote:\n\nHere are benchmarks of mux/routers/middleware:\nhttps://github.com/cypriss/golang-mux-benchmark/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-31567386\n.\n. @ekanna You would need to write some gzip middleware\u2014see the docs for how to plug in middleware: https://github.com/codegangsta/martini#middleware-handlers\n\nThis StackOverflow answer might get you started on the middleware itself, however my advice would be to use nginx as a front-end proxy and let it handle gzipping, SSL and all the extra parts that it's really good at.\n. This is actually already possible. You can change the PORT env var or as per the README:\n\nMartini's Run function looks for the PORT environment variable and uses that. Otherwise Martini will default to port 3000. To have more flexibility over port and host, use the http.ListenAndServe function instead.\n\ngo\n m := martini.Classic()\n // ...\n http.ListenAndServe(\":8080\", m)\n(my opinion is that \"PORT\" and \"HOST\" are far too generic and risk conflicting with other env vars that might be set for other non-Martini applications. Something like MARTINI_HOST would make more sense, although os.GetEnv is so simple that it's better to leave it up to the end-user)\n. ",
    "bemurphy": "Another reason the SecureCompare  should probably get extracted...no tests.\n. eh don't merge it yet either, there's a bug, it should't do padding like it does because that's timeable.\n. BTW where did you notice the formatting off?  I use a Fmt vim plugin.  Double checked with go cli and it's not changing my files anywhere, don't think\n. @codegangsta yeah got it rebased and tests are in place\n. Another reason the SecureCompare  should probably get extracted...no tests.\n. eh don't merge it yet either, there's a bug, it should't do padding like it does because that's timeable.\n. BTW where did you notice the formatting off?  I use a Fmt vim plugin.  Double checked with go cli and it's not changing my files anywhere, don't think\n. @codegangsta yeah got it rebased and tests are in place\n. ",
    "icholy": "I'd really appreciate this feature.\n. https://groups.google.com/forum/#!topic/martini-go/AHVTk7wqdRk\n. I don't know if this is a good idea because it brings up the issue of storing nil in interface{}\n. @felixzilla I know, it just gets kinda ugly when you have them on every other line.\nedit: The reason I didn't use http.Error in my code is because it adds some whitespace after the body so it was hard to get the test to pass.\n. @codegangsta feedback? should I stop wasting my time?\n. I agree that the return handling doesn't need more magic. (wasn't really expecting this to get merged). I thought about a service but I don't see it saving too much typing. The api example you posted wouldn't work for cases where there is more than one error to check. It would need to be more like:\ngo\nm.Get(\"/\", func(e martini.ErrorHandler){\n  err, _ := doSomething()\n  if e.Check(err) {\n    return\n  }\n  err, _ = doSomethingElse()\n  if e.Check(err) {\n    return\n  }\n})\nI'll give it some more thought.\n. aw I messed up the squash \n. @codegangsta  I changed path/filepath -> path too. Do you want that separate? or do you not care?\n. Ok, they're in separate commits. I think it's good to go.\n. What does that mean? Sounds like something that should be on the mailing list https://groups.google.com/forum/#!forum/martini-go\n. I'd really appreciate this feature.\n. https://groups.google.com/forum/#!topic/martini-go/AHVTk7wqdRk\n. I don't know if this is a good idea because it brings up the issue of storing nil in interface{}\n. @felixzilla I know, it just gets kinda ugly when you have them on every other line.\nedit: The reason I didn't use http.Error in my code is because it adds some whitespace after the body so it was hard to get the test to pass.\n. @codegangsta feedback? should I stop wasting my time?\n. I agree that the return handling doesn't need more magic. (wasn't really expecting this to get merged). I thought about a service but I don't see it saving too much typing. The api example you posted wouldn't work for cases where there is more than one error to check. It would need to be more like:\ngo\nm.Get(\"/\", func(e martini.ErrorHandler){\n  err, _ := doSomething()\n  if e.Check(err) {\n    return\n  }\n  err, _ = doSomethingElse()\n  if e.Check(err) {\n    return\n  }\n})\nI'll give it some more thought.\n. aw I messed up the squash \n. @codegangsta  I changed path/filepath -> path too. Do you want that separate? or do you not care?\n. Ok, they're in separate commits. I think it's good to go.\n. What does that mean? Sounds like something that should be on the mailing list https://groups.google.com/forum/#!forum/martini-go\n. ",
    "erizocosmico": "I think that's already implemented https://github.com/go-martini/martini/blob/master/router.go#L184. Can I close the issue?\n. Right. I changed the GOPATH and it works now. Thank you!\n. All done.\n. @codegangsta the only problem I see with your approach is that if you have the route handler in another file you won't be able to get the route.\nmain.go\n``` go\nm := martini.Classic()\nLessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"\n})\nm.Get(\"/\", MyFancyHandler)\n```\nwhatever.go\ngo\nfunc MyFancyHandler(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42)) // You don't have access to LessonRoute here\n}\n. @codegangsta Right! I didn't thought of using global variables. I will make the changes tomorrow.\n. Done!\n. @codegangsta haha. Well, the code it's still here in case you need it :P\nI also think it would be better to name routes via string. For example, if you define all the routes in the main function but all the handlers are outside that file \u2014or in another package\u2014 it's a mess to get the url for a route. It happened to me when I was developing an app with Martini a few weeks ago, that's why I proposed the pull request.\n. I saw the issue #103 after submitting the PR. I will submit another one adressing that issue ASAP.\n. @codegangsta yes, that makes more sense than hardcoding if the methods match in an if statement. I will take care of it as soon as I get home.\n. @codegangsta done.\n. IMHO that belongs in martini-contrib rather than in the core framework.\n. What about passing interface{} rather than string?\ngo\nm.Run(3000) // You can pass an int\nm.Run(\"3000\") // You can pass a string\nm.Run(nil) // Default port\nAlso, you need to change line 30 of martini_test.go or the tests won't pass.\n. As for the redirect thing you can use the net/http redirect method combined with URLFor:\ngo\nbarIDNameRoute = router.Get(\"/bar/:id/:name\", func(params Params, routes Routes) {\n                expect(t, routes.URLFor(fooRoute, nil), \"/foo\")\n                expect(t, routes.URLFor(barRoute, 5), \"/bar/5\")\n                expect(t, routes.URLFor(barIDNameRoute, 5, \"john\"), \"/bar/5/john\")\n})\n. I wanted to do that but the only thing I came up with was:\n``` go\nimport (\n    // Here be imports\n    \"mypkg\"\n)\nfunc main() {\n    // Here be code and martini initialisation\n    m.Get(\"/myroute\", mypkg.MyHandler)\n    // Here be more code\n}\n```\nYou still have to do the routing by yourself so it's not so helpful.\nSomeone correct me if I'm wrong but I think that there's no way to do what Flask does with Blueprints right now with Martini. It would be great to be able to do that, though.\n. I like this feature. Any ideas of how the interface should look like? For example, log.Logger and the mentioned log4go don't have the same names for their methods and, therefore, it's impossible to create an interface that works with both.\n. @BurntSushi You're right. So basically it should look like this, right?\ngo\ntype Logger interface {\n    Fatal(...interface{})\n    Fatalf(string, ...interface{})\n    Fatalln(...interface{})\n    Flags() int\n    Output(int, string) error\n    Panic(...interface{})\n    Panicf(string, ...interface{})\n    Panicln(..interface{})\n    Prefix() string\n    Print(...interface{})\n    Printf( string, ...interface{})\n    Println(...interface{})\n    SetFlags(int)\n    SetPrefix(string)\n}\nAny thoughts?\n. Closing.\n. Closing. Adressed in #205.\n. IMHO, that should be optional (some config param) or not visible at all in production.\n. You're right! I didn't think of nested groups when I submitted the PR. I will submit another one with the fix ASAP.\n. Yes, Martini should have a way to customize the logger, imho. Also, I think it is important to find a way to override the default logging middleware. Right now it can be done by creating your own martini (not using martini.Classic(), where the middleware is added).\nLet's wait to see what @codegangsta thinks about this.\n. Closing. Adressed in #224.\n. I've been able to reproduce this issue and will look into it ASAP to see if I can't find out why is this happening. \n. /test/(?P<id>[^/#?]+)([0-9]+)\\/? <--- Pattern\n/test/123 <--- Request path\n[/test/123 12 3] <--- Matches\nIt does not only happen with numbers. It happens with any regex.\nWith somehting like:\ngo\nm := martini.Classic()\n    m.Get(\"/test/:id([a-z]+[0-9]+)\", func(params martini.Params) string {\n        return \"test: \" + params[\"id\"]\n    })\n    m.Run()\nAnd a path like /test/abc1 it outputs test: ab.\nI've been able to fix it with an ugly hack but it broke the normal named parameters so it's not really a suitable solution.\n. Closing in favor of #222.\n. That's because static files don't use an absolute path but a relative path by default. If you use m.Use(martini.Static(\"public\")) it will look for the public directory under the current working directory.\nYou have to use an absolute path or set the path via some configuration file or something.\n. Add this after that line: https://github.com/go-martini/martini/blob/master/router.go#L140\ngo\nfmt.Println(pattern)\n. Not everyone might want all routes to be printed when they\u2019re not in production. Let\u2019s see what @codegangsta thinks about this.\nOn 14 de abril de 2014 at 17:08:51, Harley Laue (notifications@github.com) wrote:\nThis might be a good one-off solution. IMO a better solution might be to print that whenever the environment is != production.\n\u2014\nReply to this email directly or view it on GitHub.\n--\u00a0\nJos\u00e9 M. Molina\nSent with Airmail\n. I don't think there is a way to do that right now. Looks good to me!\n. @sevkin Wait, you are the owner of this issue, you should be able to reopen it yourself.\n. @sevkin no prob.\n. I've been trying to implement this today but I came across a few things:\n- You need context to call the not found handler (you don't have it in the router)\n- You need to call it from Routes without any param (then you don't have context. See point one).\n- Both Martini and Router have a NotFound method already so the name's not available.\nAny ideas?\n. I suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n. What about adding a DefaultHandler? If nothing has been written DefaultHandler will be invoked (if it is set). If DefaultHandler was not set NotFound would be invoked instead. That way you could send empty responses (that\u2019s the only use case of not sending anything to the browser that I can think of) just set func(){} as your DefaultHandler.\nOn 11 de abril de 2014 at 17:01:59, Jeremy Saenz (notifications@github.com) wrote:\nNothing is wrong with the other approach. I'm trying to think of use cases that may be broken by it but I can't think of any right now.\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n\n--\u00a0\nJos\u00e9 M. Molina\nSent with Airmail\n. I think #229 is the best idea. The only case you wouldn't write anything is because you want to send an empty response. But what's the point of sending an empty response?\nTL;DR: 404 sounds just fine.\n. @sevkin could you resend the PR #229? I can't reopen it.\n. All the links on the site redirect to the new org, but they should be changed anyway.\n. I think you could achieve that using the BeforeFunc method on ResponseWriter https://github.com/go-martini/martini/blob/master/response_writer.go#L24\n. You could write your own ReturnHandler.\n. If you're looking for a way to test your handlers you can take a look at this topic at the martini google group https://groups.google.com/forum/#!topic/martini-go/NBZUvdr3KvQ\n. You could do that yourself with a middleware.\n. Merged.\n. You're right! Looks better that way. I'll push the changes ASAP.\n. @codegangsta done.\n. You can access the requested path from *http.Request. But it'd be nice to have access to some info about the active route.\n@codegangsta how about mapping in every request a RouteInfo that I proposed in #243 adding a Name field?\nIt'd look like:\n``` go\nm.Get(\"/admin\", sessionauth.LoginRequired, authorize, GetAdmin).Name(\"admin\")\nfunc authorize(user sessionauth.User, ri RouteInfo) {\n  // If the route does not have a name you can still access ri.Pattern\n   if user.IsAdmin() && ri.Name == \"admin\" {\n      // do something\n   }\n}\n```\n. Closing, it's been addressed in #250.\n. @codegangsta Ok, no prob.\n. #248 should've fix your problem.\n. Even though X-RemoteAddr seems more obvious I think that X-Real-IP and X-Forwarded-For are more commonly known.\n. Try with:\nbash\ngo get -t github.com/go-martini/martini\n. @ben-joostens Try removing martini package, installing inject and then martini. That error happened when the package was moved from one repo to another, it should not be happening now.\n. IMHO, the dependency injection in martini is one of its killer features. And it's not that magical. If you map something you will get that something in your handlers. If you don't you won't.\nI haven't seen anything about dependency injection on the goji documentation so I suppose that's up to the developer. Meaning that you have to struggle to get your dependencies injected.\n. Closing.\n. You're using as a handler a function that returns a function. A handler can not return a function.\nThe handler:\ngo\nfunc authorize(res http.ResponseWriter, req *http.Request, c martini.Context) {\n        res.WriteHeader(http.StatusUnauthorized)\n    }\nNow this will work:\ngo\nm.Get(\"/secret\", authorize, func() {\n  // ...\n})\n. I edited the readme a few hours ago adding the changes proposed in #222, make sure to include them in the translation.\n. Awesome! Merging.\n. As @codegangsta said, we should add something about serving martini over SSL on the docs. Many people have asked about that.\n. The README was updated recently, the version you translated is outdated, it lacks the regexp documentation on routes and the portugueses translation on the main README.\n. Thanks for the contribution! Merging.\n. Thanks!\n. Closing.\n. I don't think there's a better way to do this right now.\n. It's just how it works. First you find a route that matches the request and then you call the middlewares and, after them, the route handler.\nIf you want to do that send a redirect response.\n. You can do\ngo\nif req.RequestURI == \"/\" {\n    // Invoke the handler\n}\nIt's not as clean as a redirect but it works. Changing routing to work that way would require a redesign of martini, I guess.\nLet's see what @codegangsta thinks.\n. IMHO, you should include a test case for this.\n. Awesome! Merging.\n. Looks good to me. Let's see what @codegangsta thinks.\n. Awesome! Merging!\n. Buena aportaci\u00f3n. \nMerging.\n. Thanks! Merging.\n. Great! Could you add some how-to-use on the README before merging?\n. Not that I know of. You can always write your own context middleware.\n. Added to the list :-)\n. Jeremy's approach for Martini has always been to not include any external dependencies. The only dependency martini has is inject which he controls (so, that one is not a problem). I don't think graceful should be added if that's what you were suggesting.\nIf graceful works well and can be integrated with martini without any modifications to the core then I think there's no need to add that feature to the core. Just use graceful.\nIf this option is doable let me know and then I'll take a look at the proposal.\n. Yeah, that would be great. Maybe with an example of how to use it together with martini?\nSent using CloudMagic\nOn Thu, Oct 30, 2014 at 3:07 PM, Steven Soroka notifications@github.com wrote:It's been working well for me. I'd suggest mentioning it in the readme.\n\u2014Reply to this email directly or view it on GitHub.\n. Nice!\n. go\nm.Get(\"/resource/:name\", MyFunc)\nm.Get(\"/users\", func(params martini.Params) string {\n    params[\"name\"] = \"My fancy name\"\n    return MyFunc(params)\n})\n. Could you add the corresponding test to the router_test.go file instead of a new file, please? Thanks :)\n. Maybe we should split this pull request and add only the changes to router.go to the core and move the Slash middleware to a another package outside the core in martini-contrib..\n. Did you send it as a pull request to martini contrib? Closing this.\n. I doesn't seem like that is going to change for the time being: https://github.com/go-martini/martini/pull/245\n. @mattkanwisher in the meantime you can just map a custom logger like go-logging to Martini and add a custom logger middleware to replace the builtin one.\n. You can achieve that by yourself by sending the appropriate headers.\n. I like this idea. But before merging it you should add test coverage for this feature.\n. Looks good to me! Let's see what @codegangsta thinks about that feature being added to the core.\nHappy new year to you too @wilk!\n. Group does not group by host but by a part of the path.\n. I like better the @talbright idea.\n. martini.Route is an interface, you can't use *martini.Route in your handler.\nEDIT: I'm downloading your branch and trying to make it work.\n. Reviewing the code of your PR I came across these lines:\nhttps://github.com/go-martini/martini/blob/master/router.go#L249\nhttps://github.com/go-martini/martini/blob/master/router_test.go#L457\nCurrent route is already exposed.\n. There's this martini contrib middleware that takes care of this: https://github.com/martini-contrib/strict\n. Thanks for your contribution!\n. Why put the \"Fixed\" section in the readme?\nAlso the wercker build failed.\n. You can use your own logger middleware instead of the default one or override the mapping of the logger in the context.\n. Seems good to me. Thanks for your contribution!\n. This was already discussed on https://github.com/go-martini/martini/issues/258\n. You could give this a try: https://github.com/rakyll/statik\n. The framework is no longer under development since a few months ago. It may have a bug or something but I don't think is going to be solved.\n. If you're running into performance issues you could use https://github.com/gin-gonic/gin which has a pretty great performance.\n. The project is no longer maintained but I'll merge it anyway.\n. That's something @codegangsta should look into.\nAnyway, the framework is no longer maintained so I don't think it's worth it to put it back online.\n. @wiredprairie https://web.archive.org/web/20140521180901/http://codegangsta.io:80/blog/2014/05/19/my-thoughts-on-martini/. It's better that you add it in a global gitignore rather than adding rules in the gitignore for X and Y IDEs.\n. You suggest adding 1.5x-3x performance in HTTP but using a slow framework (hello, reflection), which does not make much sense in the end. The aforementioned reason is why the framework is no longer maintained.\nMaybe try with http://github.com/gin-gonic/gin, it'd be cool if it was even faster\n. So does in every other country. I think the page is down. But, anyway, the framework is no longer maintained.\n. @codeskyblue https://github.com/gin-gonic/gin is imho, the best one right now\n. Merging, thanks for the contribution :+1: \n. You can't, it's not online anymore. In fact, the framework is no longer maintained.\n. https://github.com/gin-gonic/gin is my framework of choice now.\nOn Sat, 16 Apr 2016 at 13:32, \u5f90\u5411\u9633 notifications@github.com wrote:\n\noh..sorry for heard that. could you recommend some frameworks? Thx\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/395#issuecomment-210794518\n. Framework is no longer maintained.\n. Framework is no longer maintained\n. Yes. Framework is no longer maintained.\nOn Thu, 3 Nov 2016 at 16:02, Andrew Pennebaker notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\n\nThe http://martini.codegangsta.io homepage appears to be down\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/issues/402, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFF9c-wYaMbKmloA3tZVyHPlERGrRvks5q6fbSgaJpZM4KodkI.\n. No, you can't, but you can make something like:\ngo\ntype RedisClients struct {\n       Foo *redis.Client\n       Bar *redis.Client\n}\nand then map an instance of that type instead. You can inject it in a middleware:\ngo\nfunc myCtxMiddleware(c martini.Context) {\n        c.Map(context.Background())\n}\nand then get the context like this in your handlers and subsequent middlewares:\ngo\nfunc Handler(ctx context.Context) {\n        // use ctx\n}\nAlso, if your intention is to just keep a few values that you know beforehand you can avoid using context.Context and just use your custom struct directly.\n```go\ntype AppCtx struct {\n        UserID int64\n        MoreStuff interface{}\n}\nfunc Middleware(c martini.Context) {\n        c.Map(&AppCtx{UserID: foo})\n}\nfunc Handler(ctx *AppCtx) {\n        // use ctx\n}\n```. Hi, you can find how to do that in this part of the README: https://github.com/go-martini/martini/blob/master/README.md#serving-a-default-document. Yes, the project is neither maintained nor under active development.\nOn Thu, 19 Jan 2017 at 18:56, Ahmet Alp Balkan notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\nhttp://martini.codegangsta.io in the project description is broken\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/issues/407, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFF8FAemSBzcvTkWw1nU85VEFN5Zhzks5rT6OOgaJpZM4LoaV_.\n. Sorry, the framework is no longer maintained.\nOn Sat, 27 May 2017 at 16:41, Ari Seyhun notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\nThe Exclude option in StaticOptions only accepted a string and compared it with a URL prefix. This commit changes it to ExcludePrefix and allows it to take a []string as well as adding ExcludeSuffix to compare with the URL suffix.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/go-martini/martini/pull/411\nCommit Summary\n\nUpdate static exclude opt\n\nFile Changes\n\nM static.gohttps://github.com/go-martini/martini/pull/411/files#diff-0 (17)\n\nPatch Links:\n\nhttps://github.com/go-martini/martini/pull/411.patch\nhttps://github.com/go-martini/martini/pull/411.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/pull/411, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFFxn8_pRc0hTMCgGWsTTxR0UD3l1Uks5r-DYVgaJpZM4NoXlb.\n. The domain might have not been renewed, that looks like a parking page. \nAnyway, the framework is no longer maintained. . Framework is no longer maintained or under development. . I think that's already implemented https://github.com/go-martini/martini/blob/master/router.go#L184. Can I close the issue?\n. Right. I changed the GOPATH and it works now. Thank you!\n. All done.\n. @codegangsta the only problem I see with your approach is that if you have the route handler in another file you won't be able to get the route.\nmain.go\n``` go\nm := martini.Classic()\nLessonRoute := m.Get(\"/lessons/:id\", func() string {\n  return \"Here is a lesson\"\n})\nm.Get(\"/\", MyFancyHandler)\n```\nwhatever.go\ngo\nfunc MyFancyHandler(routes martini.Routes) {\n  println(routes.URLFor(LessonRoute, 42)) // You don't have access to LessonRoute here\n}\n. @codegangsta Right! I didn't thought of using global variables. I will make the changes tomorrow.\n. Done!\n. @codegangsta haha. Well, the code it's still here in case you need it :P\nI also think it would be better to name routes via string. For example, if you define all the routes in the main function but all the handlers are outside that file \u2014or in another package\u2014 it's a mess to get the url for a route. It happened to me when I was developing an app with Martini a few weeks ago, that's why I proposed the pull request.\n. I saw the issue #103 after submitting the PR. I will submit another one adressing that issue ASAP.\n. @codegangsta yes, that makes more sense than hardcoding if the methods match in an if statement. I will take care of it as soon as I get home.\n. @codegangsta done.\n. IMHO that belongs in martini-contrib rather than in the core framework.\n. What about passing interface{} rather than string?\ngo\nm.Run(3000) // You can pass an int\nm.Run(\"3000\") // You can pass a string\nm.Run(nil) // Default port\nAlso, you need to change line 30 of martini_test.go or the tests won't pass.\n. As for the redirect thing you can use the net/http redirect method combined with URLFor:\ngo\nbarIDNameRoute = router.Get(\"/bar/:id/:name\", func(params Params, routes Routes) {\n                expect(t, routes.URLFor(fooRoute, nil), \"/foo\")\n                expect(t, routes.URLFor(barRoute, 5), \"/bar/5\")\n                expect(t, routes.URLFor(barIDNameRoute, 5, \"john\"), \"/bar/5/john\")\n})\n. I wanted to do that but the only thing I came up with was:\n``` go\nimport (\n    // Here be imports\n    \"mypkg\"\n)\nfunc main() {\n    // Here be code and martini initialisation\n    m.Get(\"/myroute\", mypkg.MyHandler)\n    // Here be more code\n}\n```\nYou still have to do the routing by yourself so it's not so helpful.\nSomeone correct me if I'm wrong but I think that there's no way to do what Flask does with Blueprints right now with Martini. It would be great to be able to do that, though.\n. I like this feature. Any ideas of how the interface should look like? For example, log.Logger and the mentioned log4go don't have the same names for their methods and, therefore, it's impossible to create an interface that works with both.\n. @BurntSushi You're right. So basically it should look like this, right?\ngo\ntype Logger interface {\n    Fatal(...interface{})\n    Fatalf(string, ...interface{})\n    Fatalln(...interface{})\n    Flags() int\n    Output(int, string) error\n    Panic(...interface{})\n    Panicf(string, ...interface{})\n    Panicln(..interface{})\n    Prefix() string\n    Print(...interface{})\n    Printf( string, ...interface{})\n    Println(...interface{})\n    SetFlags(int)\n    SetPrefix(string)\n}\nAny thoughts?\n. Closing.\n. Closing. Adressed in #205.\n. IMHO, that should be optional (some config param) or not visible at all in production.\n. You're right! I didn't think of nested groups when I submitted the PR. I will submit another one with the fix ASAP.\n. Yes, Martini should have a way to customize the logger, imho. Also, I think it is important to find a way to override the default logging middleware. Right now it can be done by creating your own martini (not using martini.Classic(), where the middleware is added).\nLet's wait to see what @codegangsta thinks about this.\n. Closing. Adressed in #224.\n. I've been able to reproduce this issue and will look into it ASAP to see if I can't find out why is this happening. \n. /test/(?P<id>[^/#?]+)([0-9]+)\\/? <--- Pattern\n/test/123 <--- Request path\n[/test/123 12 3] <--- Matches\nIt does not only happen with numbers. It happens with any regex.\nWith somehting like:\ngo\nm := martini.Classic()\n    m.Get(\"/test/:id([a-z]+[0-9]+)\", func(params martini.Params) string {\n        return \"test: \" + params[\"id\"]\n    })\n    m.Run()\nAnd a path like /test/abc1 it outputs test: ab.\nI've been able to fix it with an ugly hack but it broke the normal named parameters so it's not really a suitable solution.\n. Closing in favor of #222.\n. That's because static files don't use an absolute path but a relative path by default. If you use m.Use(martini.Static(\"public\")) it will look for the public directory under the current working directory.\nYou have to use an absolute path or set the path via some configuration file or something.\n. Add this after that line: https://github.com/go-martini/martini/blob/master/router.go#L140\ngo\nfmt.Println(pattern)\n. Not everyone might want all routes to be printed when they\u2019re not in production. Let\u2019s see what @codegangsta thinks about this.\nOn 14 de abril de 2014 at 17:08:51, Harley Laue (notifications@github.com) wrote:\nThis might be a good one-off solution. IMO a better solution might be to print that whenever the environment is != production.\n\u2014\nReply to this email directly or view it on GitHub.\n--\u00a0\nJos\u00e9 M. Molina\nSent with Airmail\n. I don't think there is a way to do that right now. Looks good to me!\n. @sevkin Wait, you are the owner of this issue, you should be able to reopen it yourself.\n. @sevkin no prob.\n. I've been trying to implement this today but I came across a few things:\n- You need context to call the not found handler (you don't have it in the router)\n- You need to call it from Routes without any param (then you don't have context. See point one).\n- Both Martini and Router have a NotFound method already so the name's not available.\nAny ideas?\n. I suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n. What about adding a DefaultHandler? If nothing has been written DefaultHandler will be invoked (if it is set). If DefaultHandler was not set NotFound would be invoked instead. That way you could send empty responses (that\u2019s the only use case of not sending anything to the browser that I can think of) just set func(){} as your DefaultHandler.\nOn 11 de abril de 2014 at 17:01:59, Jeremy Saenz (notifications@github.com) wrote:\nNothing is wrong with the other approach. I'm trying to think of use cases that may be broken by it but I can't think of any right now.\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina notifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like a good approach. What was wrong with invoking NotFound when all handlers have been invoked and nothing has been written? (the other PR where this was discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n\n--\u00a0\nJos\u00e9 M. Molina\nSent with Airmail\n. I think #229 is the best idea. The only case you wouldn't write anything is because you want to send an empty response. But what's the point of sending an empty response?\nTL;DR: 404 sounds just fine.\n. @sevkin could you resend the PR #229? I can't reopen it.\n. All the links on the site redirect to the new org, but they should be changed anyway.\n. I think you could achieve that using the BeforeFunc method on ResponseWriter https://github.com/go-martini/martini/blob/master/response_writer.go#L24\n. You could write your own ReturnHandler.\n. If you're looking for a way to test your handlers you can take a look at this topic at the martini google group https://groups.google.com/forum/#!topic/martini-go/NBZUvdr3KvQ\n. You could do that yourself with a middleware.\n. Merged.\n. You're right! Looks better that way. I'll push the changes ASAP.\n. @codegangsta done.\n. You can access the requested path from *http.Request. But it'd be nice to have access to some info about the active route.\n@codegangsta how about mapping in every request a RouteInfo that I proposed in #243 adding a Name field?\nIt'd look like:\n``` go\nm.Get(\"/admin\", sessionauth.LoginRequired, authorize, GetAdmin).Name(\"admin\")\nfunc authorize(user sessionauth.User, ri RouteInfo) {\n  // If the route does not have a name you can still access ri.Pattern\n   if user.IsAdmin() && ri.Name == \"admin\" {\n      // do something\n   }\n}\n```\n. Closing, it's been addressed in #250.\n. @codegangsta Ok, no prob.\n. #248 should've fix your problem.\n. Even though X-RemoteAddr seems more obvious I think that X-Real-IP and X-Forwarded-For are more commonly known.\n. Try with:\nbash\ngo get -t github.com/go-martini/martini\n. @ben-joostens Try removing martini package, installing inject and then martini. That error happened when the package was moved from one repo to another, it should not be happening now.\n. IMHO, the dependency injection in martini is one of its killer features. And it's not that magical. If you map something you will get that something in your handlers. If you don't you won't.\nI haven't seen anything about dependency injection on the goji documentation so I suppose that's up to the developer. Meaning that you have to struggle to get your dependencies injected.\n. Closing.\n. You're using as a handler a function that returns a function. A handler can not return a function.\nThe handler:\ngo\nfunc authorize(res http.ResponseWriter, req *http.Request, c martini.Context) {\n        res.WriteHeader(http.StatusUnauthorized)\n    }\nNow this will work:\ngo\nm.Get(\"/secret\", authorize, func() {\n  // ...\n})\n. I edited the readme a few hours ago adding the changes proposed in #222, make sure to include them in the translation.\n. Awesome! Merging.\n. As @codegangsta said, we should add something about serving martini over SSL on the docs. Many people have asked about that.\n. The README was updated recently, the version you translated is outdated, it lacks the regexp documentation on routes and the portugueses translation on the main README.\n. Thanks for the contribution! Merging.\n. Thanks!\n. Closing.\n. I don't think there's a better way to do this right now.\n. It's just how it works. First you find a route that matches the request and then you call the middlewares and, after them, the route handler.\nIf you want to do that send a redirect response.\n. You can do\ngo\nif req.RequestURI == \"/\" {\n    // Invoke the handler\n}\nIt's not as clean as a redirect but it works. Changing routing to work that way would require a redesign of martini, I guess.\nLet's see what @codegangsta thinks.\n. IMHO, you should include a test case for this.\n. Awesome! Merging.\n. Looks good to me. Let's see what @codegangsta thinks.\n. Awesome! Merging!\n. Buena aportaci\u00f3n. \nMerging.\n. Thanks! Merging.\n. Great! Could you add some how-to-use on the README before merging?\n. Not that I know of. You can always write your own context middleware.\n. Added to the list :-)\n. Jeremy's approach for Martini has always been to not include any external dependencies. The only dependency martini has is inject which he controls (so, that one is not a problem). I don't think graceful should be added if that's what you were suggesting.\nIf graceful works well and can be integrated with martini without any modifications to the core then I think there's no need to add that feature to the core. Just use graceful.\nIf this option is doable let me know and then I'll take a look at the proposal.\n. Yeah, that would be great. Maybe with an example of how to use it together with martini?\nSent using CloudMagic\nOn Thu, Oct 30, 2014 at 3:07 PM, Steven Soroka notifications@github.com wrote:It's been working well for me. I'd suggest mentioning it in the readme.\n\u2014Reply to this email directly or view it on GitHub.\n. Nice!\n. go\nm.Get(\"/resource/:name\", MyFunc)\nm.Get(\"/users\", func(params martini.Params) string {\n    params[\"name\"] = \"My fancy name\"\n    return MyFunc(params)\n})\n. Could you add the corresponding test to the router_test.go file instead of a new file, please? Thanks :)\n. Maybe we should split this pull request and add only the changes to router.go to the core and move the Slash middleware to a another package outside the core in martini-contrib..\n. Did you send it as a pull request to martini contrib? Closing this.\n. I doesn't seem like that is going to change for the time being: https://github.com/go-martini/martini/pull/245\n. @mattkanwisher in the meantime you can just map a custom logger like go-logging to Martini and add a custom logger middleware to replace the builtin one.\n. You can achieve that by yourself by sending the appropriate headers.\n. I like this idea. But before merging it you should add test coverage for this feature.\n. Looks good to me! Let's see what @codegangsta thinks about that feature being added to the core.\nHappy new year to you too @wilk!\n. Group does not group by host but by a part of the path.\n. I like better the @talbright idea.\n. martini.Route is an interface, you can't use *martini.Route in your handler.\nEDIT: I'm downloading your branch and trying to make it work.\n. Reviewing the code of your PR I came across these lines:\nhttps://github.com/go-martini/martini/blob/master/router.go#L249\nhttps://github.com/go-martini/martini/blob/master/router_test.go#L457\nCurrent route is already exposed.\n. There's this martini contrib middleware that takes care of this: https://github.com/martini-contrib/strict\n. Thanks for your contribution!\n. Why put the \"Fixed\" section in the readme?\nAlso the wercker build failed.\n. You can use your own logger middleware instead of the default one or override the mapping of the logger in the context.\n. Seems good to me. Thanks for your contribution!\n. This was already discussed on https://github.com/go-martini/martini/issues/258\n. You could give this a try: https://github.com/rakyll/statik\n. The framework is no longer under development since a few months ago. It may have a bug or something but I don't think is going to be solved.\n. If you're running into performance issues you could use https://github.com/gin-gonic/gin which has a pretty great performance.\n. The project is no longer maintained but I'll merge it anyway.\n. That's something @codegangsta should look into.\nAnyway, the framework is no longer maintained so I don't think it's worth it to put it back online.\n. @wiredprairie https://web.archive.org/web/20140521180901/http://codegangsta.io:80/blog/2014/05/19/my-thoughts-on-martini/. It's better that you add it in a global gitignore rather than adding rules in the gitignore for X and Y IDEs.\n. You suggest adding 1.5x-3x performance in HTTP but using a slow framework (hello, reflection), which does not make much sense in the end. The aforementioned reason is why the framework is no longer maintained.\nMaybe try with http://github.com/gin-gonic/gin, it'd be cool if it was even faster\n. So does in every other country. I think the page is down. But, anyway, the framework is no longer maintained.\n. @codeskyblue https://github.com/gin-gonic/gin is imho, the best one right now\n. Merging, thanks for the contribution :+1: \n. You can't, it's not online anymore. In fact, the framework is no longer maintained.\n. https://github.com/gin-gonic/gin is my framework of choice now.\nOn Sat, 16 Apr 2016 at 13:32, \u5f90\u5411\u9633 notifications@github.com wrote:\n\noh..sorry for heard that. could you recommend some frameworks? Thx\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/395#issuecomment-210794518\n. Framework is no longer maintained.\n. Framework is no longer maintained\n. Yes. Framework is no longer maintained.\nOn Thu, 3 Nov 2016 at 16:02, Andrew Pennebaker notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\n\nThe http://martini.codegangsta.io homepage appears to be down\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/issues/402, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFF9c-wYaMbKmloA3tZVyHPlERGrRvks5q6fbSgaJpZM4KodkI.\n. No, you can't, but you can make something like:\ngo\ntype RedisClients struct {\n       Foo *redis.Client\n       Bar *redis.Client\n}\nand then map an instance of that type instead. You can inject it in a middleware:\ngo\nfunc myCtxMiddleware(c martini.Context) {\n        c.Map(context.Background())\n}\nand then get the context like this in your handlers and subsequent middlewares:\ngo\nfunc Handler(ctx context.Context) {\n        // use ctx\n}\nAlso, if your intention is to just keep a few values that you know beforehand you can avoid using context.Context and just use your custom struct directly.\n```go\ntype AppCtx struct {\n        UserID int64\n        MoreStuff interface{}\n}\nfunc Middleware(c martini.Context) {\n        c.Map(&AppCtx{UserID: foo})\n}\nfunc Handler(ctx *AppCtx) {\n        // use ctx\n}\n```. Hi, you can find how to do that in this part of the README: https://github.com/go-martini/martini/blob/master/README.md#serving-a-default-document. Yes, the project is neither maintained nor under active development.\nOn Thu, 19 Jan 2017 at 18:56, Ahmet Alp Balkan notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\nhttp://martini.codegangsta.io in the project description is broken\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/issues/407, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFF8FAemSBzcvTkWw1nU85VEFN5Zhzks5rT6OOgaJpZM4LoaV_.\n. Sorry, the framework is no longer maintained.\nOn Sat, 27 May 2017 at 16:41, Ari Seyhun notifications@github.com\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109; wrote:\nThe Exclude option in StaticOptions only accepted a string and compared it with a URL prefix. This commit changes it to ExcludePrefix and allows it to take a []string as well as adding ExcludeSuffix to compare with the URL suffix.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/go-martini/martini/pull/411\nCommit Summary\n\nUpdate static exclude opt\n\nFile Changes\n\nM static.gohttps://github.com/go-martini/martini/pull/411/files#diff-0 (17)\n\nPatch Links:\n\nhttps://github.com/go-martini/martini/pull/411.patch\nhttps://github.com/go-martini/martini/pull/411.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/go-martini/martini/pull/411, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABQFFxn8_pRc0hTMCgGWsTTxR0UD3l1Uks5r-DYVgaJpZM4NoXlb.\n. The domain might have not been renewed, that looks like a parking page. \nAnyway, the framework is no longer maintained. . Framework is no longer maintained or under development. . ",
    "xogeny": "I started building a Martini app.  I'm having an issue with trailing slashes but I don't understand the conclusion of this issue or the referenced code (which indicates \"that's already implemented\").\nLooking at the Google Groups discussion, I want strict slashes (for the reasons clearly outlined in this article).\nHowever, it isn't at all clear to me from this discussion whether that is possible and, if so, how?  The bottom line is, how do I put Martini in a \"StrictSlash\" mode (either globally, which would be fine for me, or on a per route basis)?\nThanks.\n. OK, I figured out a solution.  Perhaps this was implied by the previous comments, but it wasn't obvious to me.  What I wanted was to have unique handlers for /tasks and /tasks/.  What I did was to register the patterns as /tasks$ and /tasks/$, respectively.  That seems to have addressed the issue (at least for now).\nIs there a better way to achieve the same result?\nThanks.\n. One caveat to my previous solution.  It doesn't work with patterns.  If I try to register /book/:id$ the regular expression matching the pattern includes the $ which results in a bogus regular expression.  A quick workaround was to register the route as /book/(:id)$ because the () delimit the pattern and prevent the $ from getting sucked in.\nA better solution would be to take the regular expression on this line and change it to :[^$/#?()\\.\\\\]+ since it seems clear there is no use case for having a $ in a pattern.  If people think that makes sense, I could submit a pull request for that change.  However, I'm not sure what testing protocol is used here (just normal go test or is there something more extensive somewhere?) and it seems like a pretty sensitive section of the code (since it could definitely break stuff).  So a primarily developer might be better to make the change.  Just let me know.\n. I started building a Martini app.  I'm having an issue with trailing slashes but I don't understand the conclusion of this issue or the referenced code (which indicates \"that's already implemented\").\nLooking at the Google Groups discussion, I want strict slashes (for the reasons clearly outlined in this article).\nHowever, it isn't at all clear to me from this discussion whether that is possible and, if so, how?  The bottom line is, how do I put Martini in a \"StrictSlash\" mode (either globally, which would be fine for me, or on a per route basis)?\nThanks.\n. OK, I figured out a solution.  Perhaps this was implied by the previous comments, but it wasn't obvious to me.  What I wanted was to have unique handlers for /tasks and /tasks/.  What I did was to register the patterns as /tasks$ and /tasks/$, respectively.  That seems to have addressed the issue (at least for now).\nIs there a better way to achieve the same result?\nThanks.\n. One caveat to my previous solution.  It doesn't work with patterns.  If I try to register /book/:id$ the regular expression matching the pattern includes the $ which results in a bogus regular expression.  A quick workaround was to register the route as /book/(:id)$ because the () delimit the pattern and prevent the $ from getting sucked in.\nA better solution would be to take the regular expression on this line and change it to :[^$/#?()\\.\\\\]+ since it seems clear there is no use case for having a $ in a pattern.  If people think that makes sense, I could submit a pull request for that change.  However, I'm not sure what testing protocol is used here (just normal go test or is there something more extensive somewhere?) and it seems like a pretty sensitive section of the code (since it could definitely break stuff).  So a primarily developer might be better to make the change.  Just let me know.\n. ",
    "DisposaBoy": "FWIW, I don't think checking for Windows is the correct fix. Not all nix terminals support colours and you can't assume that you're running in a real terminal, or that stderr (or stdout) is a terminal at all. And even when they are real terminals that support colours, various *hacks (environment variables) may be used to indicate to apps that they shouldn't output colour. There are 2 options IMO. Either check if it's a real terminal and handle the the various env vars, or don't output any escapes.\n. Why not just call http.ListenAndServe directly (or use http.Server). I feel like this (patch and to a lesser extent the original Run method) is just adding an extra layer for no apparent benefit. Just sayin'\n. is the binary named public by any chance. e.g. you put main.go in a directory called public and then called go build or used a tool that does to run it\n. Are you sure you're using go1.1.2? you have 3rd party sources in what looks like you GOROOT and since go1.1 IIRC, go get will refuse to install anything if your GOPATH isn't set or if it's set to GOROOT ... also this error is related to go1\n. that filepath.Join should be a path.Join http.Dir expects the path to be a url path, i.e forward-slashed\n. I don't think this compiles: \"path/filepath\" needs to be removed\n. Previous discussion: https://github.com/codegangsta/martini/pull/48\n. @elgs I think that's the whole idea. Update your Go installation. See http://golang.org/doc/install for instructions\n. I can't reproduce this on Linux in any of go1.0.3, go1.1.2 or go1.2. What's the compile error\n. @elgs that code is rejected by all Go compilers regardless of the version. That file contains a build constraint that excludes it if your Go version is go1.1 or newer. I'm guessing that whatever Go installation your IDE is using it's not the expected go1.2, but go1.0\n. @elgs it's not a feature. It's a compile error. This is intentional. It's there to give a hint to users of go1.0 that that version of Go is not supported.\n. @elgs No, it doesn't compile in any version of Go. If you look at the top of the file you'll see the build constraint +build !go1.1 .. this means that in go1.1 or go1.2, this whole file is ignored. That's why you don't get a compilation error.\n. This blog post might be of interest to you http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool\n. @elgs nw\n. @achun in-case you weren't aware, you can probably replace os.Devnull and type devNull with ioutil.Discard http://golang.org/pkg/io/ioutil/#Discard\n. @zbindenren FYI, you can get the host from http.Request.Host\n. @codegangsta mostly just style note https://github.com/codegangsta/martini/blob/master/martini.go#L75 should be if port == \"\". Also, these lines are redundant https://github.com/codegangsta/martini/blob/master/martini.go#L80-L82 . If that branch is entered, host is already \"\"\n. @BurntSushi the docs are updated at tip http://tip.golang.org/src/pkg/encoding/json/encode.go#L47\n. @alehano \n- the http handler pattern is invalid. remove the *\n- your martini pattern is also invalid. it's missing the forward slash\n- after those fixes you'll notice that it still doesn't work because martini's seeing /api/*. to fix that you either strip the /api prefix or register your martini handlers on with it\nhere's a working example http://play.golang.org/p/vfPsfTNOhg \n. FWIW, I don't think checking for Windows is the correct fix. Not all nix terminals support colours and you can't assume that you're running in a real terminal, or that stderr (or stdout) is a terminal at all. And even when they are real terminals that support colours, various *hacks (environment variables) may be used to indicate to apps that they shouldn't output colour. There are 2 options IMO. Either check if it's a real terminal and handle the the various env vars, or don't output any escapes.\n. Why not just call http.ListenAndServe directly (or use http.Server). I feel like this (patch and to a lesser extent the original Run method) is just adding an extra layer for no apparent benefit. Just sayin'\n. is the binary named public by any chance. e.g. you put main.go in a directory called public and then called go build or used a tool that does to run it\n. Are you sure you're using go1.1.2? you have 3rd party sources in what looks like you GOROOT and since go1.1 IIRC, go get will refuse to install anything if your GOPATH isn't set or if it's set to GOROOT ... also this error is related to go1\n. that filepath.Join should be a path.Join http.Dir expects the path to be a url path, i.e forward-slashed\n. I don't think this compiles: \"path/filepath\" needs to be removed\n. Previous discussion: https://github.com/codegangsta/martini/pull/48\n. @elgs I think that's the whole idea. Update your Go installation. See http://golang.org/doc/install for instructions\n. I can't reproduce this on Linux in any of go1.0.3, go1.1.2 or go1.2. What's the compile error\n. @elgs that code is rejected by all Go compilers regardless of the version. That file contains a build constraint that excludes it if your Go version is go1.1 or newer. I'm guessing that whatever Go installation your IDE is using it's not the expected go1.2, but go1.0\n. @elgs it's not a feature. It's a compile error. This is intentional. It's there to give a hint to users of go1.0 that that version of Go is not supported.\n. @elgs No, it doesn't compile in any version of Go. If you look at the top of the file you'll see the build constraint +build !go1.1 .. this means that in go1.1 or go1.2, this whole file is ignored. That's why you don't get a compilation error.\n. This blog post might be of interest to you http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool\n. @elgs nw\n. @achun in-case you weren't aware, you can probably replace os.Devnull and type devNull with ioutil.Discard http://golang.org/pkg/io/ioutil/#Discard\n. @zbindenren FYI, you can get the host from http.Request.Host\n. @codegangsta mostly just style note https://github.com/codegangsta/martini/blob/master/martini.go#L75 should be if port == \"\". Also, these lines are redundant https://github.com/codegangsta/martini/blob/master/martini.go#L80-L82 . If that branch is entered, host is already \"\"\n. @BurntSushi the docs are updated at tip http://tip.golang.org/src/pkg/encoding/json/encode.go#L47\n. @alehano \n- the http handler pattern is invalid. remove the *\n- your martini pattern is also invalid. it's missing the forward slash\n- after those fixes you'll notice that it still doesn't work because martini's seeing /api/*. to fix that you either strip the /api prefix or register your martini handlers on with it\nhere's a working example http://play.golang.org/p/vfPsfTNOhg \n. ",
    "mattn": "@codegangsta If you want, I can write a patch to display colors on windows with https://github.com/daviddengcn/go-colortext\n. I don't hope the contribution, I just want to help all of open source developers.\nIf you can do it your-self, do it please. One thing I can tell you is that it's better to use go-colortext. (if you want martini on windows nicely) :)\n. @codegangsta If you want, I can write a patch to display colors on windows with https://github.com/daviddengcn/go-colortext\n. I don't hope the contribution, I just want to help all of open source developers.\nIf you can do it your-self, do it please. One thing I can tell you is that it's better to use go-colortext. (if you want martini on windows nicely) :)\n. ",
    "ghost": "Oops! Looks like I had 1.0.2. I probably deserved that for trusting the default repo.\n. I received the same error from having an earlier version. Might have better luck with this.\n. Hi\nThanks for the quick answer.\nFor Django and play-framework it is the same. You  can use them to create restful services but it is not imposed to you.\nMaybe it could be implemented as configurable/pluggable option.\n. Got it. That's what I was thinking too.\nAlso I think we can make Martini much more appealing to newbies by maintaing a list of simple but complete real-life examples - i.e http://0value.com/build-a-restful-API-with-Martini\nThanks.\n. use render https://github.com/codegangsta/martini-contrib/tree/master/render\n. Oops! Looks like I had 1.0.2. I probably deserved that for trusting the default repo.\n. I received the same error from having an earlier version. Might have better luck with this.\n. Hi\nThanks for the quick answer.\nFor Django and play-framework it is the same. You  can use them to create restful services but it is not imposed to you.\nMaybe it could be implemented as configurable/pluggable option.\n. Got it. That's what I was thinking too.\nAlso I think we can make Martini much more appealing to newbies by maintaing a list of simple but complete real-life examples - i.e http://0value.com/build-a-restful-API-with-Martini\nThanks.\n. use render https://github.com/codegangsta/martini-contrib/tree/master/render\n. ",
    "mholt": "That's okay, it was a good exercise anyway. I'll send you an email shortly.\n. @cryptix is right. The replacement is here: https://github.com/codegangsta/martini-contrib/tree/master/binding\n. What do you mean exactly? Are you looking for a way to test your handlers or Martini itself?\n. @mdwhatcott put this together the other day I think, from Google+: http://play.golang.org/p/6VWsoA3uvT -- it shows you how to use httptest.Recorder to perform a sort-of faux HTTP request so you can run tests against its response.\nOr if you're looking to test the functionality of the handlers, you can write regular unit tests for the functions or methods your handlers invoke, separately from the handlers themselves.\n. That's okay, it was a good exercise anyway. I'll send you an email shortly.\n. @cryptix is right. The replacement is here: https://github.com/codegangsta/martini-contrib/tree/master/binding\n. What do you mean exactly? Are you looking for a way to test your handlers or Martini itself?\n. @mdwhatcott put this together the other day I think, from Google+: http://play.golang.org/p/6VWsoA3uvT -- it shows you how to use httptest.Recorder to perform a sort-of faux HTTP request so you can run tests against its response.\nOr if you're looking to test the functionality of the handlers, you can write regular unit tests for the functions or methods your handlers invoke, separately from the handlers themselves.\n. ",
    "voronoipotato": "It's true, it'd be neat to see how fast it is\n. I don't think anyone was proposing hello world style benchmarks. \n. A new person might also never try it because they're afraid that using it will slow things down more than what is practical. Instead of focusing on highly technical benchmarks that would have little use for most, why not just show how little martini affects day to day performance on a few examples.\n. It's true, it'd be neat to see how fast it is\n. I don't think anyone was proposing hello world style benchmarks. \n. A new person might also never try it because they're afraid that using it will slow things down more than what is practical. Instead of focusing on highly technical benchmarks that would have little use for most, why not just show how little martini affects day to day performance on a few examples.\n. ",
    "divoxx": "I would love to see a benchmark measuring the impact of the DI approach being used versus having a static handler signature as in net/http. I'd expect the function parameters reflection to add a considerable amount of time when handling a lot of connections, specially if it's not being cached, but I might be wrong.\n. I would love to see a benchmark measuring the impact of the DI approach being used versus having a static handler signature as in net/http. I'd expect the function parameters reflection to add a considerable amount of time when handling a lot of connections, specially if it's not being cached, but I might be wrong.\n. ",
    "felixzilla": "@divoxx the DI system will cause it to be slower than raw \"net/http\", but its better to use martini as it has some middleware to handle some jobs for u. as for benchmark @sadjow, @voronoipotato  ab test it yourselves and compare to raw net/http\n. Well, I think Run is okay and it's got some use cases, like in production if you want to switch port without recompiling the Run api serves it purpose. \n. sorry mate got it to working, I tried earlier and it did not work, I guess I can close it now\nwas like\n/todos/new\n/todos/:id\n. @Soulou maybe you can post this in golang-nuts.\n. yes you can set response header if only you pass the http.ResponseWriter in your handler function\nlike,\nm.Get(\"/\", func (res http.ResponseWriter, ..){\n    res.Header().Set()\n})\n. you can use http.Error() to return error to http.ResponseWriter\nlike\nm.Get(\"/\", func(w http.ResponseWriter) {\n    if err := doSomething(); err != nil {\n        http.Error(w, err.Error(), 500)\n        return\n    }\n    return\n})\n. @divoxx the DI system will cause it to be slower than raw \"net/http\", but its better to use martini as it has some middleware to handle some jobs for u. as for benchmark @sadjow, @voronoipotato  ab test it yourselves and compare to raw net/http\n. Well, I think Run is okay and it's got some use cases, like in production if you want to switch port without recompiling the Run api serves it purpose. \n. sorry mate got it to working, I tried earlier and it did not work, I guess I can close it now\nwas like\n/todos/new\n/todos/:id\n. @Soulou maybe you can post this in golang-nuts.\n. yes you can set response header if only you pass the http.ResponseWriter in your handler function\nlike,\nm.Get(\"/\", func (res http.ResponseWriter, ..){\n    res.Header().Set()\n})\n. you can use http.Error() to return error to http.ResponseWriter\nlike\nm.Get(\"/\", func(w http.ResponseWriter) {\n    if err := doSomething(); err != nil {\n        http.Error(w, err.Error(), 500)\n        return\n    }\n    return\n})\n. ",
    "cgarvis": "We could just build out an implementation for TechEmpower's monthly benchmarking.  But I agree that it wouldn't be much different than the native go code.\n. Not worth making any hard decisions with but I took the plaintext native go test from TechEmpower and built a similar one for martini.  I ran against both with concurrency of 50 for 30s on my 2012 i7 2GHz Macbook Air.  Both did around 550 requests/sec.\nNative:\nTransactions:                  16269 hits\nAvailability:                  99.69 %\nElapsed time:                  29.79 secs\nData transferred:               0.20 MB\nResponse time:                  0.01 secs\nTransaction rate:             546.12 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                    4.21\nSuccessful transactions:       16269\nFailed transactions:              50\nLongest transaction:            0.03\nShortest transaction:           0.00\nMartini:\nTransactions:                  16473 hits\nAvailability:                  99.70 %\nElapsed time:                  29.35 secs\nData transferred:               0.20 MB\nResponse time:                  0.01 secs\nTransaction rate:             561.26 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                    4.47\nSuccessful transactions:       16473\nFailed transactions:              50\nLongest transaction:            0.03\nShortest transaction:           0.00\n. @elithrar I was using the benchmarks to see if there was significant difference between martini and native go.  I'm building a very thin JSON api, so I just wanted to make sure I wasn't hamstring myself.  I think the TechEmpower's benchmarks would be a good standard to build against.  Martini is more of a library than a framework so maybe not.\n. @codegangsta looks good.  Can you incorporate these benchmarks into the library so that we can watch performance?  It will be helpful to catch anything that might really slow down martini.\n. @codegangsta Yeah I read that as well.  While PATCHis not used as much as GET, PUT, POST, and DELETE, it is useful for RESTful APIs\n. We could just build out an implementation for TechEmpower's monthly benchmarking.  But I agree that it wouldn't be much different than the native go code.\n. Not worth making any hard decisions with but I took the plaintext native go test from TechEmpower and built a similar one for martini.  I ran against both with concurrency of 50 for 30s on my 2012 i7 2GHz Macbook Air.  Both did around 550 requests/sec.\nNative:\nTransactions:                  16269 hits\nAvailability:                  99.69 %\nElapsed time:                  29.79 secs\nData transferred:               0.20 MB\nResponse time:                  0.01 secs\nTransaction rate:             546.12 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                    4.21\nSuccessful transactions:       16269\nFailed transactions:              50\nLongest transaction:            0.03\nShortest transaction:           0.00\nMartini:\nTransactions:                  16473 hits\nAvailability:                  99.70 %\nElapsed time:                  29.35 secs\nData transferred:               0.20 MB\nResponse time:                  0.01 secs\nTransaction rate:             561.26 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                    4.47\nSuccessful transactions:       16473\nFailed transactions:              50\nLongest transaction:            0.03\nShortest transaction:           0.00\n. @elithrar I was using the benchmarks to see if there was significant difference between martini and native go.  I'm building a very thin JSON api, so I just wanted to make sure I wasn't hamstring myself.  I think the TechEmpower's benchmarks would be a good standard to build against.  Martini is more of a library than a framework so maybe not.\n. @codegangsta looks good.  Can you incorporate these benchmarks into the library so that we can watch performance?  It will be helpful to catch anything that might really slow down martini.\n. @codegangsta Yeah I read that as well.  While PATCHis not used as much as GET, PUT, POST, and DELETE, it is useful for RESTful APIs\n. ",
    "davecheney": "please god no, no benchmarks with ab\nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock\nnotifications@github.comwrote:\n\n@cgarvis https://github.com/cgarvis Do you have the source for that?\n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource\ndefaults.\nYou should be able to generate a magnitude more requests per second with\nsome tuning.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299\n.\n. Which version of Go are you using? You need at least Go 1.1\nOn 16 Nov 2013, at 11:48, 00001 notifications@github.com wrote:\ngo get github.com/codegangsta/martini\ngithub.com/codegangsta/martini\nDropbox/go/src/github.com/codegangsta/martini/martini.go:94: method r.Handle is not an expression, must be called\nDropbox/go/src/github.com/codegangsta/martini/router.go:58: method route.handle is not an expression, must be called\nThe last commit was 3302320\n\u2014\nReply to this email directly or view it on GitHub.\n. You can probbaly use a build tag to create a file, something like\n\n// +build !go1.1\nfunc MartiniDoesNotSupportGo1Point0() {\n       var you_need_go_1_1_or_better = 1 // compile error\n}\nOn Sat, Nov 16, 2013 at 6:21 PM, Cameron Fraser notifications@github.comwrote:\n\nI received the same error from having an earlier version. Might have\nbetter luck with this http://golang.org/doc/install/source.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/47#issuecomment-28621430\n.\n. @codegangsta, lets just delete the check file. Its generating more support\nload than the 'oh, i didnt' realise I was using 1.0'\n\nJust put a one liner in the readme with the 1.0 error and call it a day.\nOn Tue, Dec 24, 2013 at 2:27 AM, Jeremy Saenz notifications@github.comwrote:\n\n@tobstarr https://github.com/tobstarr Yeah it looks like the issue here\nis that we are triggering a parser error instead of a compiler error. I'm\ngoing to change the check so it can get past the parser stage. I will throw\nup a PR momentarily\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/49#issuecomment-31124557\n.\n. Nice work, I think that is the best you can be done here.\n\nJust a note, when Go 1.2 comes out, this warning will fire\n. Well, looky there, it was right there on the readme\nClose #81\nOn Tue, Nov 26, 2013 at 10:35 AM, Jeremy Saenz notifications@github.comwrote:\n\nWe do have a mailing list. It is pretty active.\nhttps://github.com/codegangsta/martini#getting-help\nWe can move this conversation to\nhttps://groups.google.com/forum/#!forum/martini-go\nWould a #freenode channel be beneficial as well?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/81#issuecomment-29253958\n.\n. LGTM iff you check the error is not nil. It's an unlikely condition, but not in the hot path, so cannot hurt. \n\nCheers\nDave\n\nOn 27 Nov 2013, at 18:21, \"Bai, Yang\" notifications@github.com wrote:\nYou can merge this Pull Request by running\ngit pull https://github.com/hamo/martini 82-showerr\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/87\nCommit Summary\nShow return value of ListenAndServe\nFile Changes\nM martini.go (2)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/87.patch\nhttps://github.com/codegangsta/martini/pull/87.diff\n. Oh nice, this makes presenting virtual file systems rather elegant. \nOn 28 Nov 2013, at 6:04, Ilia Choly notifications@github.com wrote:\nexample:\nroute: /foo/**\ninput: /foo/bar/baz\nparam: { \"_1\" : \"bar/baz\" }\nYou can merge this Pull Request by running\ngit pull https://github.com/icholy/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/88\nCommit Summary\nadd route parameter globbing\nFile Changes\nM router.go (9)\nM router_test.go (25)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/88.patch\nhttps://github.com/codegangsta/martini/pull/88.diff\n. LGTM, everything except the changes to static.go\n. Not LGTM, this file is a plant to catch people running go version 1.0.x\nOn 2 Dec 2013, at 0:09, Alexander R\u00f8dseth notifications@github.com wrote:\nYou can merge this Pull Request by running\ngit pull https://github.com/xyproto/martini devel\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/97\nCommit Summary\nMade \"go fmt\" work on all files\nFile Changes\nM go_version.go (4)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/97.patch\nhttps://github.com/codegangsta/martini/pull/97.diff\n. NOT LGTM.\n\nPlease do not automatically reformat go_version,go\n\nOn 9 Dec 2013, at 19:50, NovemberFoxtrot notifications@github.com wrote:\nAnother minor thing while I work on the tests. go vetandgolint now report back clean. Mind you, I was curious what the powers that be wanted with go_version.go.\nCheers.\nYou can merge this Pull Request by running\ngit pull https://github.com/NovemberFoxtrot/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/114\nCommit Summary\nmake govet golint happy\nFile Changes\nM env.go (3)\nM go_version.go (4)\nM response_writer.go (2)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/114.patch\nhttps://github.com/codegangsta/martini/pull/114.diff\n. Yes, it is bad practice.\n\nIf your testing and profile has determined that you need to adjust the value of GOMAXPROCS, then do so via the environment variable of the same name. \n\nOn 14 Dec 2013, at 2:27, Ar\u0131l Bozoluk notifications@github.com wrote:\nHi,\nI searched usage of this in the repo. I wasn't able to find it. Is there a reason for not setting it to runtime.NumCPU()?\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you tried\n\nm.Post(\"/accounts/:name\", func(res http.ResponseWriter, req *http.Request, params martini.Params) {\n. > On 27 Dec 2013, at 5:15, Mel Gray notifications@github.com wrote:\n\nThe wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n\nJust push to the branch, GitHub sorts it out \n\n\u2014\nReply to this email directly or view it on GitHub.\n. please god no, no benchmarks with ab\n\nOn Tue, Nov 26, 2013 at 11:55 AM, Matt Silverlock\nnotifications@github.comwrote:\n\n@cgarvis https://github.com/cgarvis Do you have the source for that?\n550 req/s seems very low\u2014I bet you're bottlenecking due to OS X resource\ndefaults.\nYou should be able to generate a magnitude more requests per second with\nsome tuning.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-29258299\n.\n. Which version of Go are you using? You need at least Go 1.1\nOn 16 Nov 2013, at 11:48, 00001 notifications@github.com wrote:\ngo get github.com/codegangsta/martini\ngithub.com/codegangsta/martini\nDropbox/go/src/github.com/codegangsta/martini/martini.go:94: method r.Handle is not an expression, must be called\nDropbox/go/src/github.com/codegangsta/martini/router.go:58: method route.handle is not an expression, must be called\nThe last commit was 3302320\n\u2014\nReply to this email directly or view it on GitHub.\n. You can probbaly use a build tag to create a file, something like\n\n// +build !go1.1\nfunc MartiniDoesNotSupportGo1Point0() {\n       var you_need_go_1_1_or_better = 1 // compile error\n}\nOn Sat, Nov 16, 2013 at 6:21 PM, Cameron Fraser notifications@github.comwrote:\n\nI received the same error from having an earlier version. Might have\nbetter luck with this http://golang.org/doc/install/source.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/47#issuecomment-28621430\n.\n. @codegangsta, lets just delete the check file. Its generating more support\nload than the 'oh, i didnt' realise I was using 1.0'\n\nJust put a one liner in the readme with the 1.0 error and call it a day.\nOn Tue, Dec 24, 2013 at 2:27 AM, Jeremy Saenz notifications@github.comwrote:\n\n@tobstarr https://github.com/tobstarr Yeah it looks like the issue here\nis that we are triggering a parser error instead of a compiler error. I'm\ngoing to change the check so it can get past the parser stage. I will throw\nup a PR momentarily\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/49#issuecomment-31124557\n.\n. Nice work, I think that is the best you can be done here.\n\nJust a note, when Go 1.2 comes out, this warning will fire\n. Well, looky there, it was right there on the readme\nClose #81\nOn Tue, Nov 26, 2013 at 10:35 AM, Jeremy Saenz notifications@github.comwrote:\n\nWe do have a mailing list. It is pretty active.\nhttps://github.com/codegangsta/martini#getting-help\nWe can move this conversation to\nhttps://groups.google.com/forum/#!forum/martini-go\nWould a #freenode channel be beneficial as well?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/81#issuecomment-29253958\n.\n. LGTM iff you check the error is not nil. It's an unlikely condition, but not in the hot path, so cannot hurt. \n\nCheers\nDave\n\nOn 27 Nov 2013, at 18:21, \"Bai, Yang\" notifications@github.com wrote:\nYou can merge this Pull Request by running\ngit pull https://github.com/hamo/martini 82-showerr\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/87\nCommit Summary\nShow return value of ListenAndServe\nFile Changes\nM martini.go (2)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/87.patch\nhttps://github.com/codegangsta/martini/pull/87.diff\n. Oh nice, this makes presenting virtual file systems rather elegant. \nOn 28 Nov 2013, at 6:04, Ilia Choly notifications@github.com wrote:\nexample:\nroute: /foo/**\ninput: /foo/bar/baz\nparam: { \"_1\" : \"bar/baz\" }\nYou can merge this Pull Request by running\ngit pull https://github.com/icholy/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/88\nCommit Summary\nadd route parameter globbing\nFile Changes\nM router.go (9)\nM router_test.go (25)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/88.patch\nhttps://github.com/codegangsta/martini/pull/88.diff\n. LGTM, everything except the changes to static.go\n. Not LGTM, this file is a plant to catch people running go version 1.0.x\nOn 2 Dec 2013, at 0:09, Alexander R\u00f8dseth notifications@github.com wrote:\nYou can merge this Pull Request by running\ngit pull https://github.com/xyproto/martini devel\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/97\nCommit Summary\nMade \"go fmt\" work on all files\nFile Changes\nM go_version.go (4)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/97.patch\nhttps://github.com/codegangsta/martini/pull/97.diff\n. NOT LGTM.\n\nPlease do not automatically reformat go_version,go\n\nOn 9 Dec 2013, at 19:50, NovemberFoxtrot notifications@github.com wrote:\nAnother minor thing while I work on the tests. go vetandgolint now report back clean. Mind you, I was curious what the powers that be wanted with go_version.go.\nCheers.\nYou can merge this Pull Request by running\ngit pull https://github.com/NovemberFoxtrot/martini master\nOr view, comment on, or merge it at:\nhttps://github.com/codegangsta/martini/pull/114\nCommit Summary\nmake govet golint happy\nFile Changes\nM env.go (3)\nM go_version.go (4)\nM response_writer.go (2)\nPatch Links:\nhttps://github.com/codegangsta/martini/pull/114.patch\nhttps://github.com/codegangsta/martini/pull/114.diff\n. Yes, it is bad practice.\n\nIf your testing and profile has determined that you need to adjust the value of GOMAXPROCS, then do so via the environment variable of the same name. \n\nOn 14 Dec 2013, at 2:27, Ar\u0131l Bozoluk notifications@github.com wrote:\nHi,\nI searched usage of this in the repo. I wasn't able to find it. Is there a reason for not setting it to runtime.NumCPU()?\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you tried\n\nm.Post(\"/accounts/:name\", func(res http.ResponseWriter, req *http.Request, params martini.Params) {\n. > On 27 Dec 2013, at 5:15, Mel Gray notifications@github.com wrote:\n\nThe wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n\nJust push to the branch, GitHub sorts it out \n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "zilman": "You guys might want to look into submitting martini for Round 8 of this:\nhttp://www.techempower.com/benchmarks/\nIf a simple benchmark won't shake out some good targets for optimization it might at least attract some potential users. :)\n. You guys might want to look into submitting martini for Round 8 of this:\nhttp://www.techempower.com/benchmarks/\nIf a simple benchmark won't shake out some good targets for optimization it might at least attract some potential users. :)\n. ",
    "justinmk": "@cgarvis Those benchmarks would only change if you upgraded go, so martini's evolution isn't going to affect them.\n. @cgarvis Those benchmarks would only change if you upgraded go, so martini's evolution isn't going to affect them.\n. ",
    "Archs": "\nMartini is about fun programming and good application architecture, not extreme performance.\n\n@codegangsta I'm fully with you!\n. I've done the rebase :)\n. > Martini is about fun programming and good application architecture, not extreme performance.\n@codegangsta I'm fully with you!\n. I've done the rebase :)\n. ",
    "kdar": "Here are benchmarks of mux/routers/middleware: https://github.com/cypriss/golang-mux-benchmark/\n. Here are benchmarks of mux/routers/middleware: https://github.com/cypriss/golang-mux-benchmark/\n. ",
    "sadjow": ":+1:\nEm 27/02/2014 22:42, \"Jeremy Saenz\" notifications@github.com escreveu:\n\nclosing out as there are a couple of benchmarks already published. namely\nhttps://github.com/cypriss/golang-mux-benchmark/\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-36313946\n.\n. :+1:\nEm 27/02/2014 22:42, \"Jeremy Saenz\" notifications@github.com escreveu:\nclosing out as there are a couple of benchmarks already published. namely\nhttps://github.com/cypriss/golang-mux-benchmark/\n\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/42#issuecomment-36313946\n.\n. \n",
    "00001": "I updated Go and everything works. Thanks guys!\n. I updated Go and everything works. Thanks guys!\n. ",
    "tmbrggmn": "@codegangsta I guess you need to decide if we want Martini to assume responsibility of runtime configuration.\nIf so, then I personally think this suggestion is pretty good. The next step would be to provide a configuration file, which is marshalled to this configuration struct. Once we have configuration files, you can create environment-specific files and \"deploy\" the same application across these environments with ease.\nIf not then maybe we should consider scrapping Run() completely like you say, and replace any examples that use it with the earlier http.ListenAndServe suggestion. It's not a big deal to write the bootstrapping yourself, maybe many Go users already have such code lying around (I know I have).\n. @codegangsta I guess you need to decide if we want Martini to assume responsibility of runtime configuration.\nIf so, then I personally think this suggestion is pretty good. The next step would be to provide a configuration file, which is marshalled to this configuration struct. Once we have configuration files, you can create environment-specific files and \"deploy\" the same application across these environments with ease.\nIf not then maybe we should consider scrapping Run() completely like you say, and replace any examples that use it with the earlier http.ListenAndServe suggestion. It's not a big deal to write the bootstrapping yourself, maybe many Go users already have such code lying around (I know I have).\n. ",
    "DrBenton": "Eheh, all right! This looks like a cleaner solution, indeed.\n. Eheh, all right! This looks like a cleaner solution, indeed.\n. ",
    "tobstarr": "Is that golang style? I am asking because I cannot navigate the martini api using godef (https://github.com/dgryski/vim-godef, a tool I find pretty useful).\nIt seems godef parses every go source file it finds in the project and just breaks on the first file it cannot parse. martini is the only package I have trouble with (works well with all other packages I use).\n. seems to be fixed in 73547cd\n. thanx again\n. thanx for the effort, that change seems to do the trick.\n. ```\n    $ cat test.go \n    package main\nimport (\n        \"github.com/codegangsta/martini\"\n        \"log\"\n)\n\nfunc main() {\n        m := martini.Classic()\n        _ = m\n        log.Println(\"hello world\")\n}\n$ godef -debug -f ./test.go \"martini.Classic\"\nexprType tuple:false pkg: *ast.SelectorExpr martini.Classic [\nexprType tuple:false pkg: *ast.Ident martini [\nexprType tuple:false pkg: *ast.ImportSpec \"github.com/codegangsta/martini\" [\n] -> 0x0, Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"}\n] -> 0xc210061140, Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"}\nmember Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"} 'Classic' {\ngetting package github.com/codegangsta/martini\n} -> &{func Classic 0xc210020f60 <nil> <nil>}\nexprType tuple:false pkg: *ast.Ident Classic [\nexprType tuple:false pkg: *ast.FuncType func() *ClassicMartini [\n] -> 0x0, Type{type \"\" *ast.FuncType func() *ClassicMartini}\n] -> 0xc21007a460, Type{func \"\" *ast.FuncType func() *ClassicMartini}\n] -> 0xc21007a460, Type{func \"github.com/codegangsta/martini\" *ast.FuncType func() *ClassicMartini}\n$GOPATH/src/github.com/codegangsta/martini/martini.go:98:6\n\n```\n. Is that golang style? I am asking because I cannot navigate the martini api using godef (https://github.com/dgryski/vim-godef, a tool I find pretty useful).\nIt seems godef parses every go source file it finds in the project and just breaks on the first file it cannot parse. martini is the only package I have trouble with (works well with all other packages I use).\n. seems to be fixed in 73547cd\n. thanx again\n. thanx for the effort, that change seems to do the trick.\n. ```\n    $ cat test.go \n    package main\nimport (\n        \"github.com/codegangsta/martini\"\n        \"log\"\n)\n\nfunc main() {\n        m := martini.Classic()\n        _ = m\n        log.Println(\"hello world\")\n}\n$ godef -debug -f ./test.go \"martini.Classic\"\nexprType tuple:false pkg: *ast.SelectorExpr martini.Classic [\nexprType tuple:false pkg: *ast.Ident martini [\nexprType tuple:false pkg: *ast.ImportSpec \"github.com/codegangsta/martini\" [\n] -> 0x0, Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"}\n] -> 0xc210061140, Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"}\nmember Type{package \"\" *ast.ImportSpec \"github.com/codegangsta/martini\"} 'Classic' {\ngetting package github.com/codegangsta/martini\n} -> &{func Classic 0xc210020f60 <nil> <nil>}\nexprType tuple:false pkg: *ast.Ident Classic [\nexprType tuple:false pkg: *ast.FuncType func() *ClassicMartini [\n] -> 0x0, Type{type \"\" *ast.FuncType func() *ClassicMartini}\n] -> 0xc21007a460, Type{func \"\" *ast.FuncType func() *ClassicMartini}\n] -> 0xc21007a460, Type{func \"github.com/codegangsta/martini\" *ast.FuncType func() *ClassicMartini}\n$GOPATH/src/github.com/codegangsta/martini/martini.go:98:6\n\n```\n. ",
    "brentmn": "@DisposaBoy, exactly! I had thought about this but only tested by installing and running the binary from bin rather than renaming the directory; not the right test.  @codegangsta, I'll rename my folder for now.  Not sure if there's much else you can do about it.\n. I would consider removing the default static folder or allowing it to be overwritten when calling   martini.Static(...) \n. @DisposaBoy, exactly! I had thought about this but only tested by installing and running the binary from bin rather than renaming the directory; not the right test.  @codegangsta, I'll rename my folder for now.  Not sure if there's much else you can do about it.\n. I would consider removing the default static folder or allowing it to be overwritten when calling   martini.Static(...) \n. ",
    "dylziez": "Is the documentation (readme.md and maybe other things in future -- if examples or more docs are posted on github repo and the site, which takes precendence?) licenced the same as the code? \n. Is the documentation (readme.md and maybe other things in future -- if examples or more docs are posted on github repo and the site, which takes precendence?) licenced the same as the code? \n. ",
    "Soulou": "Ok it's linked to go itself, I'm closing the issue\n\n. Yep, I'm thinking to do it =)\n. Ok, all right, thank you, in fact I want to use it to do a context.Map() according to parameters. I'll do it another way\n. @bscott  As you closed the issue, what is your solution ?\n. Ok it's linked to go itself, I'm closing the issue\n\n. Yep, I'm thinking to do it =)\n. Ok, all right, thank you, in fact I want to use it to do a context.Map() according to parameters. I'll do it another way\n. @bscott  As you closed the issue, what is your solution ?\n. ",
    "jaredly": "updated\n. ah awesome.\n. updated\n. ah awesome.\n. ",
    "ekanna": "Thank you!\n. Wow! It is working fine now. I read this in docs. But some how i missed it!\nThanks!\n. Opps! \nWhen route \"/data/kanna\" is called only auth is getting executed! Here is code extract.\n``` go\nm.Any(\"/data/**\", auth)\nm.Get(\"/data/kanna\", kanna)\nfunc kanna() (int, string) {\n   return 200, \"Hello my dear!\"\n}\nfunc auth (w http.ResponseWriter, r *http.Request, session sessions.Session, c martini.Context) {\n   v := session.Get(\"email\")\n   if v == nil {\n      http.Redirect(w, r, \"/login.html\", 302)\n      return\n   }\n   c.Next()\n}\n```\nThanks\n. But then we are missing this functionality, right?\nhttp://expressjs.com/api.html#app.all\n. Ok.\n. @baldrailers Thanks for the info. My issue is while developing app, when i look at terminal, screen is getting filled up with log data very quickly. Once you get few screens of data, searching for the info is becoming quite tedious as there is no timestamp. One need to keep scrolling up and down. I believe timeStamp  will solve this problem.\n. Thank you!\n. Wow! It is working fine now. I read this in docs. But some how i missed it!\nThanks!\n. Opps! \nWhen route \"/data/kanna\" is called only auth is getting executed! Here is code extract.\n``` go\nm.Any(\"/data/**\", auth)\nm.Get(\"/data/kanna\", kanna)\nfunc kanna() (int, string) {\n   return 200, \"Hello my dear!\"\n}\nfunc auth (w http.ResponseWriter, r *http.Request, session sessions.Session, c martini.Context) {\n   v := session.Get(\"email\")\n   if v == nil {\n      http.Redirect(w, r, \"/login.html\", 302)\n      return\n   }\n   c.Next()\n}\n```\nThanks\n. But then we are missing this functionality, right?\nhttp://expressjs.com/api.html#app.all\n. Ok.\n. @baldrailers Thanks for the info. My issue is while developing app, when i look at terminal, screen is getting filled up with log data very quickly. Once you get few screens of data, searching for the info is becoming quite tedious as there is no timestamp. One need to keep scrolling up and down. I believe timeStamp  will solve this problem.\n. ",
    "jeberly": "+1 for this feature.\n. +1 for this feature.\n. ",
    "ahall": "+1\n. +1\n. ",
    "hilefoks": "+1\n. > I believe... uh ... if somebody... um, well... closing this issue for now to keep the issue tracker clean\nI don't mean any harm, but... um... LOL ;-)\n. +1\n. > I believe... uh ... if somebody... um, well... closing this issue for now to keep the issue tracker clean\nI don't mean any harm, but... um... LOL ;-)\n. ",
    "KevinGorjan": "+1\n. +1\n. ",
    "onurozgurozkan": "+1 \n. +1 \n. ",
    "egbertp": "+1\n. +1\n. ",
    "jgimenez": "This has been useful for me: https://github.com/yvasiyarov/swagger\n. This has been useful for me: https://github.com/yvasiyarov/swagger\n. ",
    "noonat": "That would be nice. It's kind of gross having to duplicate that logic.\n. Cool! I will rebase this onto that branch later today.\n. Rebased and updated the code. Is f6bb688 closer to what you want?\nAlso -- not sure how you feel about using the hijackableResponse for the test. If you'd like me to use httptest.NewServer for the unit test instead, I can do that.\n. Woo! Thanks for the merge!\n. That would be nice. It's kind of gross having to duplicate that logic.\n. Cool! I will rebase this onto that branch later today.\n. Rebased and updated the code. Is f6bb688 closer to what you want?\nAlso -- not sure how you feel about using the hijackableResponse for the test. If you'd like me to use httptest.NewServer for the unit test instead, I can do that.\n. Woo! Thanks for the merge!\n. ",
    "degenhard": "ty ymmd\n. ty ymmd\n. ",
    "fjdumont": "Just appending \"/index.html\" works like a charm in the root directory (public) and in sub directories. I'll try submitting a request via web interface.\n. Added /pull/70, could anyone assign it to this issue?\n. Dang, and this one looked so easy to fix on github.com. Shame on me.\n. Just appending \"/index.html\" works like a charm in the root directory (public) and in sub directories. I'll try submitting a request via web interface.\n. Added /pull/70, could anyone assign it to this issue?\n. Dang, and this one looked so easy to fix on github.com. Shame on me.\n. ",
    "druska": "Awesome, thanks gangsta. I just found it strange that everything in .New() is implemented manually except the logger.\n. Awesome, thanks gangsta. I just found it strange that everything in .New() is implemented manually except the logger.\n. ",
    "rafalsobota": "Right. I'm so excited about your dependency injection framework. It's awesome. Thanks!\n. O.K. Use() works, so documentation is correct but this is a little incoherent behavior.\nm.Use(middleware)\n[martini] listening on port 3000\n[martini] Started GET /test\n[martini] Completed 0  in 107.427us\n1\n2\n3\n4\n. Right. I'm so excited about your dependency injection framework. It's awesome. Thanks!\n. O.K. Use() works, so documentation is correct but this is a little incoherent behavior.\nm.Use(middleware)\n[martini] listening on port 3000\n[martini] Started GET /test\n[martini] Completed 0  in 107.427us\n1\n2\n3\n4\n. ",
    "dylanmei": "I see, so to follow on with the terrible example above\n```\nr.Get(\"/thing/:id\", logThing, fetchThing, ThingHandler)\nfunc logThing(c martini.Context, l my.Logger, w http.ResponseWriter) {\n  c.Next()\n  // log thing...\n}\nfunc fetchThing(c martini.Context, params martini.Params, db my.Database, w http.ResponseWriter) {\n  thing := db.fetch(params[\"id\"])\n  if thing == nil {\n    http.WriterHeader(404)\n  } else {\n    c.Map(thing)\n  }\n}\nfunc ThingHandler(t my.Thing, w http.ResponseWriter) {\n  // do thing...\n}\n```\n. Awesome! This is a great approach, glad you thought of it.\n. I see, so to follow on with the terrible example above\n```\nr.Get(\"/thing/:id\", logThing, fetchThing, ThingHandler)\nfunc logThing(c martini.Context, l my.Logger, w http.ResponseWriter) {\n  c.Next()\n  // log thing...\n}\nfunc fetchThing(c martini.Context, params martini.Params, db my.Database, w http.ResponseWriter) {\n  thing := db.fetch(params[\"id\"])\n  if thing == nil {\n    http.WriterHeader(404)\n  } else {\n    c.Map(thing)\n  }\n}\nfunc ThingHandler(t my.Thing, w http.ResponseWriter) {\n  // do thing...\n}\n```\n. Awesome! This is a great approach, glad you thought of it.\n. ",
    "benkraus": "Just verified to be working. Thanks!\n. I take it then, without looking at the code, that the response gets written after the handler func executes, not after any middleware handlers have been called?  It might be nice to have it write the response after any registered middleware handlers, that way middleware can not only modify the request, but the outgoing response, too, in the manner I described.\n. Ah ok cool.\n. Just verified to be working. Thanks!\n. I take it then, without looking at the code, that the response gets written after the handler func executes, not after any middleware handlers have been called?  It might be nice to have it write the response after any registered middleware handlers, that way middleware can not only modify the request, but the outgoing response, too, in the manner I described.\n. Ah ok cool.\n. ",
    "13k": "sorry to bump this, but I have a concern here regarding cleaning before termination.\nmartini (or any other piece of code that does not own main.main, for that matter) should never os.Exit() (as log.Fatal* does) or panic().\nthere's no way the client code can recover from such errors and If it's allocating resources, spawning go routines, listening for other connections, connecting to remote servers, simply defer()ing, or whatever one ever wants to do before calling Run*(), then these resources might be in an inconsistent state on exit.\nI think that returning the error should be the correct approach here. I see that there are other places (handler binding, I think) that use panic(). I think these too should bubble up an error all the way to Run*(), if possible.\n. sorry to bump this, but I have a concern here regarding cleaning before termination.\nmartini (or any other piece of code that does not own main.main, for that matter) should never os.Exit() (as log.Fatal* does) or panic().\nthere's no way the client code can recover from such errors and If it's allocating resources, spawning go routines, listening for other connections, connecting to remote servers, simply defer()ing, or whatever one ever wants to do before calling Run*(), then these resources might be in an inconsistent state on exit.\nI think that returning the error should be the correct approach here. I see that there are other places (handler binding, I think) that use panic(). I think these too should bubble up an error all the way to Run*(), if possible.\n. ",
    "elgs": "Thank you! :-)\n. I installed go through homebew. I think my go version is quite new:\n$ go version\ngo version go1.2 darwin/amd64\nAm I missing anything?\nThanks,\nElgs\n. Sorry, it compiled in the terminal. It doesn't compile in IDE (Intellij IEDA 12 CE with a plugin). Is it new syntax in go 1.2 that a function with no arguments and no returning data and with only a string literal inside?\n. @DisposaBoy thanks for the info. I'm a little bit confused by the syntax. Can you please educate me whether a single string literal in a function without return type is a new language feature introduced in go1.1 or go1.2? \n. @DisposaBoy right, so does it mean this code will compile in 'go1.1' or above. If this is the case, can I say this is a new go feature introduced since 1.1?\n. I don't get a compile error in go1.2 when I run go install in the command line. So it compile in 1.2 in the command line here in my environment.\n. Ah! I see. The magic is the +build !go1.1. @DisposaBoy thank you for educating me! :)\n. Thank you! :-)\n. I installed go through homebew. I think my go version is quite new:\n$ go version\ngo version go1.2 darwin/amd64\nAm I missing anything?\nThanks,\nElgs\n. Sorry, it compiled in the terminal. It doesn't compile in IDE (Intellij IEDA 12 CE with a plugin). Is it new syntax in go 1.2 that a function with no arguments and no returning data and with only a string literal inside?\n. @DisposaBoy thanks for the info. I'm a little bit confused by the syntax. Can you please educate me whether a single string literal in a function without return type is a new language feature introduced in go1.1 or go1.2? \n. @DisposaBoy right, so does it mean this code will compile in 'go1.1' or above. If this is the case, can I say this is a new go feature introduced since 1.1?\n. I don't get a compile error in go1.2 when I run go install in the command line. So it compile in 1.2 in the command line here in my environment.\n. Ah! I see. The magic is the +build !go1.1. @DisposaBoy thank you for educating me! :)\n. ",
    "aybabtme": "Hi Dave!  How would you suggest to go about the f.Close(), let them as is or do something specific?\n. Win! Need anything else? Help with something?\nSent from a mobile device.\nOn Nov 29, 2013 12:33 PM, \"Jeremy Saenz\" notifications@github.com wrote:\n\nMerged #93 https://github.com/codegangsta/martini/pull/93.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/93\n.\n. Hi Dave!  How would you suggest to go about the f.Close(), let them as is or do something specific?\n. Win! Need anything else? Help with something?\n\nSent from a mobile device.\nOn Nov 29, 2013 12:33 PM, \"Jeremy Saenz\" notifications@github.com wrote:\n\nMerged #93 https://github.com/codegangsta/martini/pull/93.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/pull/93\n.\n. \n",
    "snikch": "np.\n:shipit: \n. np.\n:shipit: \n. ",
    "xyproto": "I think all files should work with go fmt. Stopping martini from building with 1.0.x this way seems like a hack to me.\n. Alternatively, https://github.com/xyproto/permissions2 could be added instead of fizz, if you like. (Fizz is just a simpler and more martini-friendly wrapper around permissions2).\npermissions2 is on the list of middleware for negroni.\n. Hi,\nAfter looking more at both fizz and permissions2, I found that the examples for using permissions2 + martini were simple enough to not need a wrapper (which were fizz). So I removed fizz.\nIf http://github.com/xyproto/permissions2 could be added to the list of Martini middleware, that would be great.\nBest regards,\nAlexander R\u00f8dseth\n. Thanks :+1: \n. I think all files should work with go fmt. Stopping martini from building with 1.0.x this way seems like a hack to me.\n. Alternatively, https://github.com/xyproto/permissions2 could be added instead of fizz, if you like. (Fizz is just a simpler and more martini-friendly wrapper around permissions2).\npermissions2 is on the list of middleware for negroni.\n. Hi,\nAfter looking more at both fizz and permissions2, I found that the examples for using permissions2 + martini were simple enough to not need a wrapper (which were fizz). So I removed fizz.\nIf http://github.com/xyproto/permissions2 could be added to the list of Martini middleware, that would be great.\nBest regards,\nAlexander R\u00f8dseth\n. Thanks :+1: \n. ",
    "c4milo": "hahah, cuddling together sounds good. \n. Nice work on Martini, Jeremy.\n. :dancer: \n. hahah, cuddling together sounds good. \n. Nice work on Martini, Jeremy.\n. :dancer: \n. ",
    "frewsxcv": "Fixed in dd5e262804cf53a3078bc0a0370cd841ab290b74 ?\n. Fixed in dd5e262804cf53a3078bc0a0370cd841ab290b74 ?\n. ",
    "guotie": "can serve static files like this:\nm.Get(\"/assets/*\", martini.Static(\"assets\"))\nthen, static file serve in Router module.\n. yes, MARTINI_ENV should be strings, but ENV can be int\n. Will martini include config function?\n. can serve static files like this:\nm.Get(\"/assets/*\", martini.Static(\"assets\"))\nthen, static file serve in Router module.\n. yes, MARTINI_ENV should be strings, but ENV can be int\n. Will martini include config function?\n. ",
    "abh": "At a glance I don't think #117 fixed the same issue I reported.\n. Nice, that's more like it. :-)\n. At a glance I don't think #117 fixed the same issue I reported.\n. Nice, that's more like it. :-)\n. ",
    "jamieomatthews": "Anyone can correct me if I'm wrong, but no, this will continue to be significantly different than revel.  Revel is a full-on framework.  Martini strives to be a super light framework, that handles just a few things out of the box, like routing, while not interfering with Go's core features.  \nThen, a separate repo is being developer, called Martini-Contrib, which is essentially a toolkit of add-ons that can help in the development.\n. I haven't used it for anything huge scale yet, but I wrote a small app with Gorp.  You can map the gorp.db, as described here (https://github.com/codegangsta/martini#global-mapping), to then have a reference to the db in each handler.  No issues with it yet!\n. I think each contrib package needs to have its import path be updated to be github.com/go-martini/martini.  \nThis is a little dicey because I believe it could break anyones code who updates a martini contrib package without updating to the new martini instance.  But I think it just has to be done, the sooner the better.  This is probably one of my least favorite things about go :(\n@codegangsta do you want me to send a PR to each repo with that update, or were you waiting on it?\n. Anyone can correct me if I'm wrong, but no, this will continue to be significantly different than revel.  Revel is a full-on framework.  Martini strives to be a super light framework, that handles just a few things out of the box, like routing, while not interfering with Go's core features.  \nThen, a separate repo is being developer, called Martini-Contrib, which is essentially a toolkit of add-ons that can help in the development.\n. I haven't used it for anything huge scale yet, but I wrote a small app with Gorp.  You can map the gorp.db, as described here (https://github.com/codegangsta/martini#global-mapping), to then have a reference to the db in each handler.  No issues with it yet!\n. I think each contrib package needs to have its import path be updated to be github.com/go-martini/martini.  \nThis is a little dicey because I believe it could break anyones code who updates a martini contrib package without updating to the new martini instance.  But I think it just has to be done, the sooner the better.  This is probably one of my least favorite things about go :(\n@codegangsta do you want me to send a PR to each repo with that update, or were you waiting on it?\n. ",
    "cryptix": "I'm also playing with the new {{yield}} stuff and I think the URLFor method would be a nice addition to the templateFunc's to make href construction more convenient. \n. I think it was deprecated in favor of the new binding package. I guess an update of the link in a pull request would be well appreciated. \n. is there any progress on this one?\n. I'm also playing with the new {{yield}} stuff and I think the URLFor method would be a nice addition to the templateFunc's to make href construction more convenient. \n. I think it was deprecated in favor of the new binding package. I guess an update of the link in a pull request would be well appreciated. \n. is there any progress on this one?\n. ",
    "lukescott": "I experimented with the ResponseEncoder idea and I didn't like it for the following reasons:\n- There was more code added to the context run loop \n- The same code would have to exist in the router context run loop.\n- The ResponseEncoder needs either the http.ResponseWriter passed as an explicit argument, or the Context needs to be. The ResponseEncoder could need other injected components.\n- The focus of writing is shifted away from the middleware Handlers into a proprietary interface. This detracts from the flexible and dynamic nature of Martini. \n- What if I wanted to do more with the return arguments other than encode them?\n- I did not feel it was necessary to add another interface. \nSo I got to thinking. What bothered me is that Martini was making an assumption about the return arguments. So I came up with a way to give that control to the Handlers without adding more complexity. Basically Martini does nothing with the return arguments. It defers the responsibility to the Handlers, which is where it belongs. \nWhat I love about this approach is that a Handler can bind the request body before the Next() and encode the response after. It's clean, compact, and concise. I do not feel it to be magical at all. It's no more magical than the dependency injection. \nMy plan with this is to create a Handler that I can specify on each route to specify the request body and encode the response from returned arguments. \nAdmittedly Printer is probably a bad name for the default middleware. Writer would be better, but I didn't want it to be confused with ResponseWriter.  \n(It's frustrating typing on an iPad. Hit the button accidentally.)\n. Yeah you're right the router flow is a bit different. The standard Martini context loop didn't do anything with return values though, so it (currently) also continues regardless whether it was returned.\nThe latest patch should resolve this by checking the return values for non-zero values and bailing if there are any.\n. As you've stated on the mailing list, the API is currently subject to change pre-1.0. martini.New also doesn't do anything with returns by itself anyway. It's just when you combine martini.New and martini.Router that's different.\n. The way I have it now the return values can be used even from handlers now within the Router. I currently use this for authentication. I have a handler that reads the Authorization header and returns an error when there is an error. That error has a StatusCode() int function on it that my response handler uses to set the code. Depending on the error this can result in a 401 or a 403.\nHere is what I'm using: https://gist.github.com/lukescott/7934533\n. gocheck is awesome. It provides fixtures and assertions. The assertions also show the correct line number, which in the event of a test failure the current functions do not.\n. @Vladimiroff testing does not have everything. It doesn't have fixtures nor assertions. You have to write more code with testing to write the same tests. The expect function in Martini doesn't even report the correct line numbers. gocheck is also written by Gustavo Niemeyer, a well respected developer. I also said nothing about Python/Ruby. Sorry, but if you're going to call something \"useless\" you're going to have to come up with some hard facts instead of drivel.\nI use gocheck for large projects. It's very useful when your tests fail because it provides a lot of information, like the correct line number(s) and what was obtained vs expected. It also has Setup/Teardown functions for fixtures and individual tests. It builds on top of testing.\nI use just testing for simple utility packages that require simple tests.\n. Here are my concerns with this:\n- How do you inject things into ResponseEncoder?\n- You're exposing reflect in Martini.\n- This doesn't let me encode response values from a Use() specified Handler. This should not be Router specific.\n- I may not always want to encode the return values.\nThis is a working Writer() handler that I currently use with #110. The only thing I don't like about it is line 14-15 because it has to use reflect - but that's because of inject's Get function. You'll notice that 3-8 validate the Accept header for the proper encoding. After Next() on line 10 it iterates the return values in reverse encoding the last non-nill value.\nI use this simply by doing:\nm.Map(Codec{...})\nm.Use(Writer())\nI can't do this at all with this implementation.\n. 1. If you haven't noticed I use http.Request to figure out what encoding to use. So I have to use a closure to get to http.Request... ok... Too bad you couldn't Invoke it somehow... You know, like how Handler works. The whole idea behind Martini.\n2. I have a big problem with exposing reflect. reflect.Value is useless in this context. I cannot pass reflect.Value directly into encoding/json's Encode function. I'll have to use Interface() every time. Seems rather messy to me. I'd much rather have []interface{}. You won't find many packages that do expose reflect, unless it's a reflect utility package.\n3. And this is a huge inconsistency with Martini. There should be no difference between how Handlers behave regardless of what context they are in. The Router routes. It shouldn't do anything more than what the base Martini does.\n4. Then call it ResponseHandler.\nI'm not necessarily against ResponseHandler/Encoder. The one thing I do like about it is it doesn't assume a non-zero value means stop. On the other hand I'm not sure I feel comfortable with write meaning stop either - at least the only way of meaning stop. What happens if a write fails?\nJust because you won't use something doesn't mean other people won't. If you wanted something explicit you would have stuck with http.HandlerFunc :). I use it to make non-http specific Handlers. And it's working beautifully. I just need a way to handle response values, besides what I'm currently using in my fork.\nTrust me I would rather contribute to this project that maintain a fork. I have other things I could be contributing. But I'll have to be honest this contribution has been rather exhausting and discouraging to say the least.\n. Point 3 is a deal breaker for me.\n. Edge? It's an edge case that I want a Handler to behave the same in .Use() as .Get()? Ok, I will then thanks.\n. @JoakimGustin Point 3 is about martini.go#L146 vs router.go#L240. A martini.Handler's return values are ignored when passed into .Use() whereas the same martini.Handler passed into .Get() the return values are passed into ResponseHandler. The return values should also be passed to ResponseHandler in martini.go. Where a martini.Handler is used should make no difference. Treating the martini.Handler is inconsistent.\n. I experimented with the ResponseEncoder idea and I didn't like it for the following reasons:\n- There was more code added to the context run loop \n- The same code would have to exist in the router context run loop.\n- The ResponseEncoder needs either the http.ResponseWriter passed as an explicit argument, or the Context needs to be. The ResponseEncoder could need other injected components.\n- The focus of writing is shifted away from the middleware Handlers into a proprietary interface. This detracts from the flexible and dynamic nature of Martini. \n- What if I wanted to do more with the return arguments other than encode them?\n- I did not feel it was necessary to add another interface. \nSo I got to thinking. What bothered me is that Martini was making an assumption about the return arguments. So I came up with a way to give that control to the Handlers without adding more complexity. Basically Martini does nothing with the return arguments. It defers the responsibility to the Handlers, which is where it belongs. \nWhat I love about this approach is that a Handler can bind the request body before the Next() and encode the response after. It's clean, compact, and concise. I do not feel it to be magical at all. It's no more magical than the dependency injection. \nMy plan with this is to create a Handler that I can specify on each route to specify the request body and encode the response from returned arguments. \nAdmittedly Printer is probably a bad name for the default middleware. Writer would be better, but I didn't want it to be confused with ResponseWriter.  \n(It's frustrating typing on an iPad. Hit the button accidentally.)\n. Yeah you're right the router flow is a bit different. The standard Martini context loop didn't do anything with return values though, so it (currently) also continues regardless whether it was returned.\nThe latest patch should resolve this by checking the return values for non-zero values and bailing if there are any.\n. As you've stated on the mailing list, the API is currently subject to change pre-1.0. martini.New also doesn't do anything with returns by itself anyway. It's just when you combine martini.New and martini.Router that's different.\n. The way I have it now the return values can be used even from handlers now within the Router. I currently use this for authentication. I have a handler that reads the Authorization header and returns an error when there is an error. That error has a StatusCode() int function on it that my response handler uses to set the code. Depending on the error this can result in a 401 or a 403.\nHere is what I'm using: https://gist.github.com/lukescott/7934533\n. gocheck is awesome. It provides fixtures and assertions. The assertions also show the correct line number, which in the event of a test failure the current functions do not.\n. @Vladimiroff testing does not have everything. It doesn't have fixtures nor assertions. You have to write more code with testing to write the same tests. The expect function in Martini doesn't even report the correct line numbers. gocheck is also written by Gustavo Niemeyer, a well respected developer. I also said nothing about Python/Ruby. Sorry, but if you're going to call something \"useless\" you're going to have to come up with some hard facts instead of drivel.\nI use gocheck for large projects. It's very useful when your tests fail because it provides a lot of information, like the correct line number(s) and what was obtained vs expected. It also has Setup/Teardown functions for fixtures and individual tests. It builds on top of testing.\nI use just testing for simple utility packages that require simple tests.\n. Here are my concerns with this:\n- How do you inject things into ResponseEncoder?\n- You're exposing reflect in Martini.\n- This doesn't let me encode response values from a Use() specified Handler. This should not be Router specific.\n- I may not always want to encode the return values.\nThis is a working Writer() handler that I currently use with #110. The only thing I don't like about it is line 14-15 because it has to use reflect - but that's because of inject's Get function. You'll notice that 3-8 validate the Accept header for the proper encoding. After Next() on line 10 it iterates the return values in reverse encoding the last non-nill value.\nI use this simply by doing:\nm.Map(Codec{...})\nm.Use(Writer())\nI can't do this at all with this implementation.\n. 1. If you haven't noticed I use http.Request to figure out what encoding to use. So I have to use a closure to get to http.Request... ok... Too bad you couldn't Invoke it somehow... You know, like how Handler works. The whole idea behind Martini.\n2. I have a big problem with exposing reflect. reflect.Value is useless in this context. I cannot pass reflect.Value directly into encoding/json's Encode function. I'll have to use Interface() every time. Seems rather messy to me. I'd much rather have []interface{}. You won't find many packages that do expose reflect, unless it's a reflect utility package.\n3. And this is a huge inconsistency with Martini. There should be no difference between how Handlers behave regardless of what context they are in. The Router routes. It shouldn't do anything more than what the base Martini does.\n4. Then call it ResponseHandler.\nI'm not necessarily against ResponseHandler/Encoder. The one thing I do like about it is it doesn't assume a non-zero value means stop. On the other hand I'm not sure I feel comfortable with write meaning stop either - at least the only way of meaning stop. What happens if a write fails?\nJust because you won't use something doesn't mean other people won't. If you wanted something explicit you would have stuck with http.HandlerFunc :). I use it to make non-http specific Handlers. And it's working beautifully. I just need a way to handle response values, besides what I'm currently using in my fork.\nTrust me I would rather contribute to this project that maintain a fork. I have other things I could be contributing. But I'll have to be honest this contribution has been rather exhausting and discouraging to say the least.\n. Point 3 is a deal breaker for me.\n. Edge? It's an edge case that I want a Handler to behave the same in .Use() as .Get()? Ok, I will then thanks.\n. @JoakimGustin Point 3 is about martini.go#L146 vs router.go#L240. A martini.Handler's return values are ignored when passed into .Use() whereas the same martini.Handler passed into .Get() the return values are passed into ResponseHandler. The return values should also be passed to ResponseHandler in martini.go. Where a martini.Handler is used should make no difference. Treating the martini.Handler is inconsistent.\n. ",
    "vladimiroff": "gocheck is funny and completely useless. The testing package has everything already. No need to use something just because remind us of python/ruby/you-name-it.\n. gocheck is funny and completely useless. The testing package has everything already. No need to use something just because remind us of python/ruby/you-name-it.\n. ",
    "NovemberFoxtrot": "There is wisdom in http://golang.org/src/pkg/net/http/fs_test.go, if need be we can go to the mattresses. \n. What was I thinking? Let me take this back.\n. There is wisdom in http://golang.org/src/pkg/net/http/fs_test.go, if need be we can go to the mattresses. \n. What was I thinking? Let me take this back.\n. ",
    "coocheenin": "@codegangsta Thank you too! High quality framework.\n@mholt Ok. Thx for a valid link.\n. @codegangsta Thank you too! High quality framework.\n@mholt Ok. Thx for a valid link.\n. ",
    "Xelom": "Thanks for the explanation Dave :)\n. Thanks for the explanation Dave :)\n. ",
    "gust1n": "@lukescott  correct me if I'm wrong but couldn't your point 3 just be solven by middleware. I already do this even before this patch by a handler that checks the request header and then maps the appropriate \"ResponseHandler\" to be used in that very request. That way I can serve E.g. Json, XML or text according to the request header but without injecting anyting but an interface into the actual writer.\n. @lukescott  correct me if I'm wrong but couldn't your point 3 just be solven by middleware. I already do this even before this patch by a handler that checks the request header and then maps the appropriate \"ResponseHandler\" to be used in that very request. That way I can serve E.g. Json, XML or text according to the request header but without injecting anyting but an interface into the actual writer.\n. ",
    "z5": "OK, thanks!\n. OK, thanks!\n. ",
    "kirs": "Thanks! I should send a PR to docs.\n. Thanks! I should send a PR to docs.\n. ",
    "nevir": "Hmm, that seems equally bad - perhaps not in this particular case - but what if the object implementing 2+ interfaces was split apart in the future?\n. Hmm, that seems equally bad - perhaps not in this particular case - but what if the object implementing 2+ interfaces was split apart in the future?\n. ",
    "dawidpogorzelski": "Works, thanks :)\n. Works, thanks :)\n. ",
    "nemosupremo": "Actually it might just be better if I could use my own ReturnHandler. I assume I can just m.Use(MyReturnHandler) and it will override the default one?\n. I'm going to opt to write my own return handler, however I won't issue a PR. Thanks for the help.\n. Actually it might just be better if I could use my own ReturnHandler. I assume I can just m.Use(MyReturnHandler) and it will override the default one?\n. I'm going to opt to write my own return handler, however I won't issue a PR. Thanks for the help.\n. ",
    "vaidhy": "I will submit a new pull request later today. Just saw the comments.\n. Small bug.. :(\n. I will submit a new pull request later today. Just saw the comments.\n. Small bug.. :(\n. ",
    "akuseru": "This is tricky to do in go. I think you are looking for a solution like: https://github.com/nickjj/gowatcher for reloading gocode on change. \n. check out #134 \n. This is tricky to do in go. I think you are looking for a solution like: https://github.com/nickjj/gowatcher for reloading gocode on change. \n. check out #134 \n. ",
    "fbjork": "Thanks. Adding similar functionality to martini would help most people I'd imagine, i.e running martini watch in the project directory.\n. Here's some relevant work: https://github.com/pilu/fresh\nMost people who use Martini also want functionality to auto rebuild upon file changes. I think it would make sense to have it built in.\n. Thanks. Adding similar functionality to martini would help most people I'd imagine, i.e running martini watch in the project directory.\n. Here's some relevant work: https://github.com/pilu/fresh\nMost people who use Martini also want functionality to auto rebuild upon file changes. I think it would make sense to have it built in.\n. ",
    "melito": "The wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n. Updated\n. The wercker output leads me to believe that I'm missing a \"\\n\" in there.\nI can fix and test everything this afternoon.\nIs there a way to append to a pull request or should I just squash all these commits and submit another?\n. Updated\n. ",
    "voidpirate": "thanks\n. thanks\n. ",
    "shuhei": "@codegangsta Thanks for the response. Added a godoc comment and a test.\n. Thanks for merging!\n. @codegangsta Thanks for the response. Added a godoc comment and a test.\n. Thanks for merging!\n. ",
    "haoxins": "please don't open meaningless issue.\n. please don't open meaningless issue.\n. ",
    "fclairamb": "Thank you.\n. Thank you.\n. ",
    "JamesClonk": "I did some more thinking and realized it's probably better (and more Go-idiomatic?) to use a variadic struct as optional parameter for Static(), similar to how it's handled in render.go.\nSo I changed it to add a new StaticOptions struct.\n(See latest commit 023e107)\nExample usage:\n```\nm := martini.New()\nm.Use(martini.Static(\"public\", martini.StaticOptions{\n    SkipLogging: true, // skip logging on static content\n    // SkipServeIndex: true // possible to disable serving index file this way\n    IndexFile: \"custom.html\", // can also set custom index file to serve\n}))\n```\n. From my understanding this seems as it unfortunately would not do what I needed.\nLooks like this would disable all Martini and middleware logging because *log.Logger prints everything to /dev/null, right?\nI want to stop just the Static handler from logging. (\"[Static] Serving ...\")\nAll other middleware should not be affected.\nIt seemed to me to be the simplest way to add an option to the Static handler itself.\nBut anyway, by now in the last change I also added further options as a StaticOptions struct, so it's becomes possible to define the index file for example.\nI was thinking that maybe if breaking backwards compatibility is still ok (?), to also move the 'directory' string into StaticOptions?\nWhile this would ofc break anyones code who used the Static handler before directly, but Martini.Classic() could just be adapted as below and no one else would notice the change:\nfunc Classic() *ClassicMartini {\n    r := NewRouter()\n    m := New()\n    m.Use(Logger())\n    m.Use(Recovery())\n    m.Use(Static(StaticOptions{\n        Directory: \"public\",\n        // SkipLogging: false,\n        // SkipServeIndex: false,\n        // IndexFile: \"index.html\",\n    }))\n    m.Action(r.Handle)\n    return &ClassicMartini{m, r}\n}\n. I had to add another check to static.go:\n// Do nothing if we are not serving any index file and the request is at the root URL path.\nif opt.SkipServeIndex && req.URL.Path == \"/\" {\n    return\n}\nOtherwise when turning off serving an index file would be bad for Martini. Requesting http://localhost:3000/ would not work anymore, since \"/\" is a directory.\nI also had to add another test case and even a folder \"testdata\" for this. :|\n. After some more thinking I removed the option to skip serving index files from StaticOptions. There's just not really any useful situation for this, and it greatly simplifies my changes to static.go and static_test.go\n. Refer to your CSS, images and JS with absolute paths instead of relative.\nEither with domainname:\nhtml\n<link rel=\"stylesheet\" href=\"http://example.com/static/stylesheets/style.css\">\nor better, without:\nhtml\n<link rel=\"stylesheet\" href=\"/static/stylesheets/style.css\">\n. It should work this way I think:\n``` go\nm := martini.Classic()\nm.Get(\"/A\", MiddlewareA, GetA)\nm.Get(\"/B\", MiddlewareB, GetB)\n```\n. I did some more thinking and realized it's probably better (and more Go-idiomatic?) to use a variadic struct as optional parameter for Static(), similar to how it's handled in render.go.\nSo I changed it to add a new StaticOptions struct.\n(See latest commit 023e107)\nExample usage:\n```\nm := martini.New()\nm.Use(martini.Static(\"public\", martini.StaticOptions{\n    SkipLogging: true, // skip logging on static content\n    // SkipServeIndex: true // possible to disable serving index file this way\n    IndexFile: \"custom.html\", // can also set custom index file to serve\n}))\n```\n. From my understanding this seems as it unfortunately would not do what I needed.\nLooks like this would disable all Martini and middleware logging because *log.Logger prints everything to /dev/null, right?\nI want to stop just the Static handler from logging. (\"[Static] Serving ...\")\nAll other middleware should not be affected.\nIt seemed to me to be the simplest way to add an option to the Static handler itself.\nBut anyway, by now in the last change I also added further options as a StaticOptions struct, so it's becomes possible to define the index file for example.\nI was thinking that maybe if breaking backwards compatibility is still ok (?), to also move the 'directory' string into StaticOptions?\nWhile this would ofc break anyones code who used the Static handler before directly, but Martini.Classic() could just be adapted as below and no one else would notice the change:\nfunc Classic() *ClassicMartini {\n    r := NewRouter()\n    m := New()\n    m.Use(Logger())\n    m.Use(Recovery())\n    m.Use(Static(StaticOptions{\n        Directory: \"public\",\n        // SkipLogging: false,\n        // SkipServeIndex: false,\n        // IndexFile: \"index.html\",\n    }))\n    m.Action(r.Handle)\n    return &ClassicMartini{m, r}\n}\n. I had to add another check to static.go:\n// Do nothing if we are not serving any index file and the request is at the root URL path.\nif opt.SkipServeIndex && req.URL.Path == \"/\" {\n    return\n}\nOtherwise when turning off serving an index file would be bad for Martini. Requesting http://localhost:3000/ would not work anymore, since \"/\" is a directory.\nI also had to add another test case and even a folder \"testdata\" for this. :|\n. After some more thinking I removed the option to skip serving index files from StaticOptions. There's just not really any useful situation for this, and it greatly simplifies my changes to static.go and static_test.go\n. Refer to your CSS, images and JS with absolute paths instead of relative.\nEither with domainname:\nhtml\n<link rel=\"stylesheet\" href=\"http://example.com/static/stylesheets/style.css\">\nor better, without:\nhtml\n<link rel=\"stylesheet\" href=\"/static/stylesheets/style.css\">\n. It should work this way I think:\n``` go\nm := martini.Classic()\nm.Get(\"/A\", MiddlewareA, GetA)\nm.Get(\"/B\", MiddlewareB, GetB)\n```\n. ",
    "achun": "Here is a simpler way to do\nExport defaultReturnHandler\ngo\nfunc DefaultReturnHandler() ReturnHandler {\n// ....\n}\nAdd NewSimple\ngo\ntype devNull struct{}\nfunc (devNull) Write(p []byte) (int, error) {\n    return len(p), nil\n}\nfunc NewSimple() *Martini {\n    null, _ := os.Open(os.DevNull) // or null := new(devNull)\n    m := &Martini{inject.New(), []Handler{}, func() {}, log.New(null, \"\", 0)}\n    m.Map(m.logger)\n    return m\n}\nExample usage:\ngo\nm := martini.NewSimple()\nm.Use(logger) // handler\nm.Map(myLogger)\nm.Map(martini.DefaultReturnHandler())\n. @JamesClonk StaticOptions and injector in different code style.\nBTW:\ngo\nm := &martini.ClassicMartini{martini.New(),martini.NewRouter()}\nm.Action(m.Handle)\n// m.Map(something)\nm.Use(MyLogger())\nm.Use(MyRecovery())\nm.Use(MyStatic(\"public\"))\nhttp.ListenAndServe(\":80\", m)\n. Here is a simpler way to do\nExport defaultReturnHandler\ngo\nfunc DefaultReturnHandler() ReturnHandler {\n// ....\n}\nAdd NewSimple\ngo\ntype devNull struct{}\nfunc (devNull) Write(p []byte) (int, error) {\n    return len(p), nil\n}\nfunc NewSimple() *Martini {\n    null, _ := os.Open(os.DevNull) // or null := new(devNull)\n    m := &Martini{inject.New(), []Handler{}, func() {}, log.New(null, \"\", 0)}\n    m.Map(m.logger)\n    return m\n}\nExample usage:\ngo\nm := martini.NewSimple()\nm.Use(logger) // handler\nm.Map(myLogger)\nm.Map(martini.DefaultReturnHandler())\n. @JamesClonk StaticOptions and injector in different code style.\nBTW:\ngo\nm := &martini.ClassicMartini{martini.New(),martini.NewRouter()}\nm.Action(m.Handle)\n// m.Map(something)\nm.Use(MyLogger())\nm.Use(MyRecovery())\nm.Use(MyStatic(\"public\"))\nhttp.ListenAndServe(\":80\", m)\n. ",
    "leebrooks0": "The render contrib package also has a nice redirect function I see. I still\ndon't know how to keep my params around on redirects though :(\nOn Thu, Jan 16, 2014 at 11:20 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nAs for the redirect thing you can use the net/http redirect method\ncombined with URLFor:\nbarIDNameRoute = router.Get(\"/bar/:id/:name\", func(params Params, routes Routes) {\n                expect(t, routes.URLFor(fooRoute, nil), \"/foo\")\n                expect(t, routes.URLFor(barRoute, 5), \"/bar/5\")\n                expect(t, routes.URLFor(barIDNameRoute, 5, \"john\"), \"/bar/5/john\")})\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/151#issuecomment-32452865\n.\n. I haven't quite solved how to do this, other than injecting the flash into\nthe view\n\nOn Fri, Jan 24, 2014 at 8:07 PM, Jeremy Saenz notifications@github.comwrote:\n\n@leebrooks0 https://github.com/leebrooks0 I know you asked this 8 days\nago, it looks like you found the sessions middleware. Hope everything is\ngoing well! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/151#issuecomment-33246401\n.\n. The render contrib package also has a nice redirect function I see. I still\ndon't know how to keep my params around on redirects though :(\n\nOn Thu, Jan 16, 2014 at 11:20 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nAs for the redirect thing you can use the net/http redirect method\ncombined with URLFor:\nbarIDNameRoute = router.Get(\"/bar/:id/:name\", func(params Params, routes Routes) {\n                expect(t, routes.URLFor(fooRoute, nil), \"/foo\")\n                expect(t, routes.URLFor(barRoute, 5), \"/bar/5\")\n                expect(t, routes.URLFor(barIDNameRoute, 5, \"john\"), \"/bar/5/john\")})\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/151#issuecomment-32452865\n.\n. I haven't quite solved how to do this, other than injecting the flash into\nthe view\n\nOn Fri, Jan 24, 2014 at 8:07 PM, Jeremy Saenz notifications@github.comwrote:\n\n@leebrooks0 https://github.com/leebrooks0 I know you asked this 8 days\nago, it looks like you found the sessions middleware. Hope everything is\ngoing well! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/151#issuecomment-33246401\n.\n. \n",
    "Netherdrake": "This looks like its easier to test. Thanks!\n. I did it like so:\n``` go\npackage spotlight\nimport (\n    \"net/http\"\n    \"appengine\"\n\"github.com/codegangsta/martini\"\n\n)\nfunc init() {\n    m := martini.Classic()\n    m.Use(AppEngine)\n    m.Get(\"/\", func(c appengine.Context) string {\n        return \"foo\"\n    })\n    http.Handle(\"/\", m)\n}\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\n```\nWith just m.Get(\"/\", func() string { it renders foo, but when context is injected as argument, the page gets blank. I'm sorry, Im super new to all GAE, Go and Martini xD\n. Yup, that worked. Thanks :)\nYou guys are awesome, keep up the good work.\n. This looks like its easier to test. Thanks!\n. I did it like so:\n``` go\npackage spotlight\nimport (\n    \"net/http\"\n    \"appengine\"\n\"github.com/codegangsta/martini\"\n\n)\nfunc init() {\n    m := martini.Classic()\n    m.Use(AppEngine)\n    m.Get(\"/\", func(c appengine.Context) string {\n        return \"foo\"\n    })\n    http.Handle(\"/\", m)\n}\nfunc AppEngine(c martini.Context, r *http.Request) {\n    c.Map(appengine.NewContext(r))\n}\n```\nWith just m.Get(\"/\", func() string { it renders foo, but when context is injected as argument, the page gets blank. I'm sorry, Im super new to all GAE, Go and Martini xD\n. Yup, that worked. Thanks :)\nYou guys are awesome, keep up the good work.\n. ",
    "olebedev": "@notedit, I can suggest this solution:\n``` go\nimport (\n    // Here be imports\n    \"mysubapp\"\n)\nfunc main() {\n    // Here be code and martini initialisation\n   m.Use(mysubapp.Job(mysubapp.Config{\n      Prefix:       \"/my_ sub_app\",\n    }))\n    // Here be more code\n}\n```\nAnd in your app:\n``` go\nvar conf Config\nfunc Job(c Config) martini.Handler {\n    conf = c\n    r := martini.NewRouter()\n    // remove NotFound from bundle\n    r.NotFound(make([]martini.Handler, 0)...)\n// TODO: put given middleware\nr.Get(c.Prefix+\"/simple\", getHandler)\n\nreturn r.Handle\n\n}\n```\n. I think this will make it clearer. \u041c?\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e! \n. @mvader, What for stylistic changes? How it affects the meaning? \nProposed amendments less accurately convey the meaning, I think we should to do a rollback. Let me know what you think.\n. @jiumx60rus =) \u0437\u0430\u0431\u0430\u0432\u0435\u043d \u0442\u043e\u0442 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \"\u043e\u0448\u0438\u0431\u043a\u0438\" \u0432 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0441 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0435, \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435, \u043d\u043e \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f ) \u042d\u0442\u043e \u043f\u043e\u0445\u0432\u0430\u043b\u044c\u043d\u043e, \u0434\u0440\u0443\u0433! \u041d\u043e \u0432\u043e\u043f\u0440\u043e\u0441, \u0430\u0434\u0440\u0435\u0441\u043e\u0432\u0430\u043d \u043d\u0435 \u0432\u0430\u043c.\n. @notedit, I can suggest this solution:\n``` go\nimport (\n    // Here be imports\n    \"mysubapp\"\n)\nfunc main() {\n    // Here be code and martini initialisation\n   m.Use(mysubapp.Job(mysubapp.Config{\n      Prefix:       \"/my_ sub_app\",\n    }))\n    // Here be more code\n}\n```\nAnd in your app:\n``` go\nvar conf Config\nfunc Job(c Config) martini.Handler {\n    conf = c\n    r := martini.NewRouter()\n    // remove NotFound from bundle\n    r.NotFound(make([]martini.Handler, 0)...)\n// TODO: put given middleware\nr.Get(c.Prefix+\"/simple\", getHandler)\n\nreturn r.Handle\n\n}\n```\n. I think this will make it clearer. \u041c?\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e! \n. @mvader, What for stylistic changes? How it affects the meaning? \nProposed amendments less accurately convey the meaning, I think we should to do a rollback. Let me know what you think.\n. @jiumx60rus =) \u0437\u0430\u0431\u0430\u0432\u0435\u043d \u0442\u043e\u0442 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \"\u043e\u0448\u0438\u0431\u043a\u0438\" \u0432 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0441 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0435, \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435, \u043d\u043e \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f ) \u042d\u0442\u043e \u043f\u043e\u0445\u0432\u0430\u043b\u044c\u043d\u043e, \u0434\u0440\u0443\u0433! \u041d\u043e \u0432\u043e\u043f\u0440\u043e\u0441, \u0430\u0434\u0440\u0435\u0441\u043e\u0432\u0430\u043d \u043d\u0435 \u0432\u0430\u043c.\n. ",
    "notedit": "@mvader @olebedev  thx. but i still wish martini can support this itself.\n. @codegangsta  i have seen the code of net/http, there is a  DefaultServeMux.  if we use something \"DefaultRouter\" , we may can solve this kind of question.\n. @mvader @olebedev  thx. but i still wish martini can support this itself.\n. @codegangsta  i have seen the code of net/http, there is a  DefaultServeMux.  if we use something \"DefaultRouter\" , we may can solve this kind of question.\n. ",
    "djhworld": "@codegangsta it's just this\nfunc throw404(res http.ResponseWriter, req *http.Request) {\n  var p Page = NewPage(\"notfound\", \"404 page not found\", globalSettings)\n  res.WriteHeader(404)\n  templates.ExecuteTemplate(res, \"notfound\", p)\n}\nI'm not sure if the absolute paths thing is really a good idea, seems a bit of a maintenance burden \n. ah yes, prefixing with the / worked - thanks! \n. @codegangsta it's just this\nfunc throw404(res http.ResponseWriter, req *http.Request) {\n  var p Page = NewPage(\"notfound\", \"404 page not found\", globalSettings)\n  res.WriteHeader(404)\n  templates.ExecuteTemplate(res, \"notfound\", p)\n}\nI'm not sure if the absolute paths thing is really a good idea, seems a bit of a maintenance burden \n. ah yes, prefixing with the / worked - thanks! \n. ",
    "googollee": "How about call ReturnHandler through inject? It need define a ReturnValueType as []reflect.Type.\n. Cool!\n. How about call ReturnHandler through inject? It need define a ReturnValueType as []reflect.Type.\n. Cool!\n. ",
    "mvmaasakkers": "Wow... I can't believe I overlooked that... Sorry for not reading :P\n. I agree with you on the naming used in the ENV vars. I noticed PORT was currently used and as it was too early (yes, I do love this made up excuse) I didn't really think about it and just added HOST.\n. Nice! I overlooked that one... Thanks!\n. Wow... I can't believe I overlooked that... Sorry for not reading :P\n. I agree with you on the naming used in the ENV vars. I noticed PORT was currently used and as it was too early (yes, I do love this made up excuse) I didn't really think about it and just added HOST.\n. Nice! I overlooked that one... Thanks!\n. ",
    "vanackere": "For information : the bug in debug.Stack will be fixed upstream for go 1.3 https://code.google.com/p/go/source/detail?r=4e3be840c015\n. For information : the bug in debug.Stack will be fixed upstream for go 1.3 https://code.google.com/p/go/source/detail?r=4e3be840c015\n. ",
    "denniss": "Thanks! Didn't know that it works that way too!\n. Thanks! Didn't know that it works that way too!\n. ",
    "pengfei-xue": "re question1, why not just use the functions already presented? \nre question2, you want to omit the log messages for static? you should set SkipLogging to be true.\n. re question1, why not just use the functions already presented? \nre question2, you want to omit the log messages for static? you should set SkipLogging to be true.\n. ",
    "shirro": "I think this should go on the Routes interface. I should have read all of router.go. I will change it and submit another PR I think.\n. I will change the test then submit a different PR with one neat patch if this is on the right track.\n. I have mapped Routes so they are available to NotFound handlers which they were not before. \nThis is good for a MethodNotFound handler but I find myself splitting CORS handling between middleware and a NotFound handler as I can't access Routes in the middleware. I wonder if there is some way to make Routes available earlier.\nSomething like:\ndiff --git a/martini.go b/martini.go\nindex 81418fe..7bda52d 100644\n--- a/martini.go\n+++ b/martini.go\n@@ -103,6 +103,7 @@ type ClassicMartini struct {\n func Classic() *ClassicMartini {\n        r := NewRouter()\n        m := New()\n+       m.MapTo(routes{r.(*router)}, (*Routes)(nil))\n        m.Use(Logger())\n        m.Use(Recovery())\n        m.Use(Static(\"public\"))\n. The regex test in this PR is wrong as it matches substrings. Will merge in changes from the working branch into this one.\n. I had two handlers for CORS, one in middleware adding the Access-Control-Allow-Origin header and another in NotFound adding Access-Control-Allow-Methods for OPTIONS requests. I tried mapping Routes in earlier so I only need the one handler and it works nicely for me but I am not sure if it is correctly done. \nThere isn't any performance penalty for CORS handling earlier as the MethodsFor is only called on OPTIONS preflight requests either way and it just seemed neater. It only works with Classic though and you would have to map it early yourself if you were doing something different because you wouldn't be guaranteed to have a Router.\nThe only other case I can think of for Routes in middleware is doing 3xx redirects with URLFor to generate Location headers.\nAn example in middleware (CORS handling):\nhttps://github.com/shirro/martini-experiments/blob/master/cors.go#L23-L39\nAn example in a NotFound (405 handling):\nhttps://github.com/shirro/martini-experiments/blob/master/notfound.go#L8-L24\n. I think this should go on the Routes interface. I should have read all of router.go. I will change it and submit another PR I think.\n. I will change the test then submit a different PR with one neat patch if this is on the right track.\n. I have mapped Routes so they are available to NotFound handlers which they were not before. \nThis is good for a MethodNotFound handler but I find myself splitting CORS handling between middleware and a NotFound handler as I can't access Routes in the middleware. I wonder if there is some way to make Routes available earlier.\nSomething like:\ndiff --git a/martini.go b/martini.go\nindex 81418fe..7bda52d 100644\n--- a/martini.go\n+++ b/martini.go\n@@ -103,6 +103,7 @@ type ClassicMartini struct {\n func Classic() *ClassicMartini {\n        r := NewRouter()\n        m := New()\n+       m.MapTo(routes{r.(*router)}, (*Routes)(nil))\n        m.Use(Logger())\n        m.Use(Recovery())\n        m.Use(Static(\"public\"))\n. The regex test in this PR is wrong as it matches substrings. Will merge in changes from the working branch into this one.\n. I had two handlers for CORS, one in middleware adding the Access-Control-Allow-Origin header and another in NotFound adding Access-Control-Allow-Methods for OPTIONS requests. I tried mapping Routes in earlier so I only need the one handler and it works nicely for me but I am not sure if it is correctly done. \nThere isn't any performance penalty for CORS handling earlier as the MethodsFor is only called on OPTIONS preflight requests either way and it just seemed neater. It only works with Classic though and you would have to map it early yourself if you were doing something different because you wouldn't be guaranteed to have a Router.\nThe only other case I can think of for Routes in middleware is doing 3xx redirects with URLFor to generate Location headers.\nAn example in middleware (CORS handling):\nhttps://github.com/shirro/martini-experiments/blob/master/cors.go#L23-L39\nAn example in a NotFound (405 handling):\nhttps://github.com/shirro/martini-experiments/blob/master/notfound.go#L8-L24\n. ",
    "fuxiaohei": "[translation]\nthere is no much Chinese documations for Martini so far. Can you add some popular samples in this repo. There are some samples in Revel project. It makes Revel more friendly.\nps: my english is poor.\n. [translation]\nthere is no much Chinese documations for Martini so far. Can you add some popular samples in this repo. There are some samples in Revel project. It makes Revel more friendly.\nps: my english is poor.\n. ",
    "lidashuang": "@fuxiaohei It makes Revel more friendly. \n. @fuxiaohei It makes Revel more friendly. \n. ",
    "leonli": "There's video casts made by Jeremy on the website https://gophercasts.io\nPlease be noted that the videos were uploaded to Vimeo, so you may have to have a VPN setup to watch the videos from China.\nBTW, I think a better way to learn a language/framework would be watching the source code. I can see Jeremy was well comment in his source code of Martini. \n. agree...\n. There's video casts made by Jeremy on the website https://gophercasts.io\nPlease be noted that the videos were uploaded to Vimeo, so you may have to have a VPN setup to watch the videos from China.\nBTW, I think a better way to learn a language/framework would be watching the source code. I can see Jeremy was well comment in his source code of Martini. \n. agree...\n. ",
    "tj": "nvm I see now </noise>\n. nvm I see now </noise>\n. ",
    "schickling": "For everyone else who wants to silence the logger (in my case for testing purposes):\ngo\nm.Map(log.New(bytes.NewBuffer(nil), \"\", 0))\n. +1\n. For everyone else who wants to silence the logger (in my case for testing purposes):\ngo\nm.Map(log.New(bytes.NewBuffer(nil), \"\", 0))\n. +1\n. ",
    "klaidliadon": "It will be an useful feature!\n. It will be an useful feature!\n. ",
    "BurntSushi": "I don't think we need to support both. We can make an interface that matches Go's standard library log package. Then if someone wants to use log4go as the main Martini logger, it's absolutely trivial to write your own type that embeds a log4go logger and provides the correct methods expected by Martini (that are actually implemented with, e.g., log4go.Logf).\n. Hmm. Now that *log.Logger can be overridden, that does kind of change things. So, just to make sure I'm getting things right, here's what I think the problem is. Martini provides, by default, its own logging middleware that does some reasonable default logging for each request. The client may want that logging to be done to a file, or have a certain prefix, or do any one of a number of other things. Before, this wasn't possible. But now that the client can provide their own *log.Logger value, it can be done.\nAs you said, a *log.Logger can be created with any io.Writer, so that means it should work with other logging systems. For example, if you're logging to stdout, then:\ngo\nstdLog := log.New(os.Stdout, \"STD LOG: \", 0)\notherLog := log4go.NewConsoleLogWriter()\n// inject stdLog as *log.Logger so the middleware uses it\n// inject otherLog which we'll use in our handlers\nThe problem I see with this is that you're forced to create a *log.Logger which may or may not write to the destination independently of your own logger (from, e.g., log4go). I suppose this could be circumvented by providing an io.Writer that proxies everything back through the same logger, but that seems like a kludge.\nThe other approach I'm thinking of is writing a much smaller Logger interface. Perhaps one that only has the Print, Printf and Println methods. This is all that's needed from within Martini's current middleware. When a client asks for a martini.Logger, they'll get something that can only be used to print. Which I suspect is OK. Logger options can be set by injecting your own Logger interface value. If you really want access to the rest of the logger, then you can type assert. But this isn't the common case I think. So for example:\n``` go\ntype myLogger struct {\n  log4go.ConsoleLogWriter\n}\n// Satisfy Logger interface\notherLog := log4go.NewConsoleLogWriter()\n// inject otherLog as a martini.Logger\n// which will be used in Martini's middleware and can\n// be used in our handlers.\n// If the logger guarantees that writes from simultaneous\n// goroutines are safe, then this approach is safe.\n```\nThe benefit of using an interface here is that it makes it easier for people to plug in other logging frameworks without having to deal with the fact that two loggers may be trying to write to the same destination simultaneously. (One and only one logger should be writing to a destination as it can avoid simultaneous writes, just like the standard *log.Logger does.)\nI think that if we go the Logger interface route, then the user will never actually see a *log.Logger. By default, the Logger middleware should inject some reasonable *log.Logger as a martini.Logger, which can now be overridden using a similar mechanism as in #224, I think.\nThis change would also regrettably break a lot of code, but the fix is simple. (And that fix is to just change *log.Logger to martini.Logger in your handlers. If the code is using the logger to do things other than Print{f,ln}, then there would need to be a type assertion.)\n. Hmm, upon more thought, I think (2) may not be easily possible.\n. Thanks. I think that should settle it then.\n. > Yup. it looks like the ideal would be to expose the martini.Routes service on the martini.Router as well as mapping it to the martini instance.\nHow do you want to do it? One idea is to just add the Routes interface to the Router interface. This would make it easy for people to map the service if they aren't using martini.Classic. However, there's a certain asymmetry to this (since users would need to use Map instead of Use), so you could also add a Routes function:\ngo\nfunc Routes(r Router) martini.Handler {\n    return func(c martini.Context) {\n        c.MapTo(r, (*Routes)(nil))\n    }\n}\nAlthough we'd need a different name...\nLet me know how you want to proceed and I'll update the PR. Maybe there are better ideas...\n\nThis still isn't the most ideal thing as it is yet another point of failure when graduating from a martini.Classic() to a martini.New() implementation. :/\n\nYeah, but I think this can be mitigated with good documentation. Users should understand that moving to New is a bit more raw. (I got that impression anyway.) Plus, the code for Classic is so simple that it was easy to look at and see what I would be missing out on if I went with New.\n. OK, I've updated the PR to expose Routes via the Router interface. I've updated documentation in a few places.\nI also had to modify the two tests (for methods and URLs) to add the Routes middleware.\nI didn't add any package level functions since, as you said, martini.Routes isn't a service.\n. Ah, right. Sorry about the mixup. Hopefully all fixed now. Thanks!\n. martini-contrib has moved. You should use github.com/martini-contrib/encoder instead.\nI was able to reproduce this just by using Go's standard JSON encoder:\n``` go\npackage main\nimport (\n    \"encoding/json\"\n    \"log\"\n    \"os\"\n)\ntype Some struct {\n    Url string json:\"login\"\n}\nfunc main() {\n    r := &Some{\"https://example.com/inbox&test=totot\"}\n    if err := json.NewEncoder(os.Stdout).Encode(r); err != nil {\n        log.Fatal(err)\n    }\n}\n```\nOutput:\n[andrew@Liger martini] go run 195-json.go \n{\"login\":\"https://example.com/inbox\\u0026test=totot\"}\nIt appears this is an undocumented feature of the encoding/json package: http://golang.org/src/pkg/encoding/json/encode.go#L815 --- it doesn't explicitly mention &, but it's included in line 797.\nAs far as I can tell, this is working as intended. The JSON spec allows for unicode characters to be escaped, so any conforming decoder should be able to read your JSON without any problems.\nAlso, I think you'll find martini.Classic convenient to use.\n. @DisposaBoy Ah excellent. Thanks for the pointer!\n. You can set the case insensitive flag, which is documented in the syntax for RE2.\ne.g.,\ngo\nm.Get(\"(?i)/hello/:name\", func(params martini.Params) string {\n    return \"Hello \" + params[\"name\"]\n})\nYou should also be able to write \"/(?i:hello)/:name\", but it looks like the router code that mangles the regex to find parameter names conflicts with this syntax.\n. RE benchmark: your benchmark is failing because you aren't closing the response you get from http.Get.\n(If you do come up with a good benchmark, I'm sure a lot folks would be interested to see the results.)\n. Yes.\n. I think thing here is to realize that the keys of martini.Params are taken straight from the named capture groups of the regex. As @mvader pointed out, the full regex ends up looking something like (?P<id>[^/#?]+)([0-9]+). That is, :name is syntactic sugar for \"bind a single piece of a URL to the name name.\"\nSo to get the behavior you want, just introduce the named capture directly. Here's a full working example:\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n\"github.com/go-martini/martini\"\n\n)\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/test/(?P[0-9]+)\", func(p martini.Params) string {\n        return fmt.Sprintf(\"ID %s\", p[\"id\"])\n    })\n    m.Run()\n}\n```\n. I strongly disagree that everything should be case insensitive. Some might want to maintain the property that there is exactly one URL for a page. (I'm not saying everyone should do this all the time, but that it's a reasonable use case.)\nI don't have particularly strong feelings about adding a case insensitive option to the public API, but I lean toward not. Consider that you could just wrap a ClassicMartini and provide case insensitivity yourself without cluttering up your routes:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/codegangsta/martini\"\n\n)\ntype ClassicInsensitive struct {\n    *martini.ClassicMartini\n}\nfunc (c ClassicInsensitive) Get(s string, hs ...martini.Handler) martini.Route {\n    return c.Router.Get(\"(?i)\" + s, hs...)\n}\nfunc main() {\n    m := ClassicInsensitive{martini.Classic()}\n    m.Get(\"/hello/:name\", func(p martini.Params) string {\n        return fmt.Sprintf(\"Hello %s\", p[\"name\"])\n    })\n    m.Run()\n}\n```\nOf course, you'd have to wrap the other router methods too, but you get the idea.\n. @kpowick I know :P Just showing how you could do it cleanly with struct embedding. (@captncraig was rightly concerned about adding (?i) every time becoming a bit unwieldy.)\n. I'm not sure that you really can. The martini.Params service only makes sense in the context of a matched route, which is what determines the parameter names and values. But middleware doesn't really have any concept of which route is matched.\nInstead, you can achieve something similar by just adding handlers to your routes. Here's a full example:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/go-martini/martini\"\n\n)\nfunc middleware(c martini.Context, params martini.Params) {\n    fmt.Println(\"Middleware\")\n}\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", middleware, func() string {\n        return \"Hello, world!\"\n    })\n    m.Run()\n}\n``\n. We should also point to the official docs describing the regular expression syntax too: http://golang.org/pkg/regexp/syntax/\n. Firstly,martinihas a new import path:github.com/go-martini/martini`.\nSecondly, the logger is only enabled by default if you're using classic martini. If you want more fine grained control, then you can build your own custom martini. It's actually very easy. Take a look at the ClassicMartini function:\ngo\nfunc Classic() *ClassicMartini {\n    r := NewRouter()\n    m := New()\n    m.Use(Logger())\n    m.Use(Recovery())\n    m.Use(Static(\"public\"))\n    m.MapTo(r, (*Routes)(nil))\n    m.Action(r.Handle)\n    return &ClassicMartini{m, r}\n}\nSo you can use that function, except omit the m.Use(Logger()) line. Here's a full working example:\n``` go\npackage main\nimport (\n    \"log\"\n\"github.com/go-martini/martini\"\n\n)\ntype myClassic struct {\n    *martini.Martini\n    martini.Router\n}\nfunc withoutLogging() myClassic {\n    r := martini.NewRouter()\n    m := martini.New()\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\n    m.MapTo(r, (martini.Routes)(nil))\n    m.Action(r.Handle)\n    return &myClassic{m, r}\n}\nfunc main() {\n    m := withoutLogging()\n    m.Get(\"/\", func(lg *log.Logger) string {\n        return \"Hello, world!\"\n    })\n    m.Run()\n}\n```\nI think if #213 gets fixed, then this wouldn't require making your own Martini.\n. Ah, yes, that project has moved too :-)\nhttps://github.com/martini-contrib/render\n. I don't think we need to support both. We can make an interface that matches Go's standard library log package. Then if someone wants to use log4go as the main Martini logger, it's absolutely trivial to write your own type that embeds a log4go logger and provides the correct methods expected by Martini (that are actually implemented with, e.g., log4go.Logf).\n. Hmm. Now that *log.Logger can be overridden, that does kind of change things. So, just to make sure I'm getting things right, here's what I think the problem is. Martini provides, by default, its own logging middleware that does some reasonable default logging for each request. The client may want that logging to be done to a file, or have a certain prefix, or do any one of a number of other things. Before, this wasn't possible. But now that the client can provide their own *log.Logger value, it can be done.\nAs you said, a *log.Logger can be created with any io.Writer, so that means it should work with other logging systems. For example, if you're logging to stdout, then:\ngo\nstdLog := log.New(os.Stdout, \"STD LOG: \", 0)\notherLog := log4go.NewConsoleLogWriter()\n// inject stdLog as *log.Logger so the middleware uses it\n// inject otherLog which we'll use in our handlers\nThe problem I see with this is that you're forced to create a *log.Logger which may or may not write to the destination independently of your own logger (from, e.g., log4go). I suppose this could be circumvented by providing an io.Writer that proxies everything back through the same logger, but that seems like a kludge.\nThe other approach I'm thinking of is writing a much smaller Logger interface. Perhaps one that only has the Print, Printf and Println methods. This is all that's needed from within Martini's current middleware. When a client asks for a martini.Logger, they'll get something that can only be used to print. Which I suspect is OK. Logger options can be set by injecting your own Logger interface value. If you really want access to the rest of the logger, then you can type assert. But this isn't the common case I think. So for example:\n``` go\ntype myLogger struct {\n  log4go.ConsoleLogWriter\n}\n// Satisfy Logger interface\notherLog := log4go.NewConsoleLogWriter()\n// inject otherLog as a martini.Logger\n// which will be used in Martini's middleware and can\n// be used in our handlers.\n// If the logger guarantees that writes from simultaneous\n// goroutines are safe, then this approach is safe.\n```\nThe benefit of using an interface here is that it makes it easier for people to plug in other logging frameworks without having to deal with the fact that two loggers may be trying to write to the same destination simultaneously. (One and only one logger should be writing to a destination as it can avoid simultaneous writes, just like the standard *log.Logger does.)\nI think that if we go the Logger interface route, then the user will never actually see a *log.Logger. By default, the Logger middleware should inject some reasonable *log.Logger as a martini.Logger, which can now be overridden using a similar mechanism as in #224, I think.\nThis change would also regrettably break a lot of code, but the fix is simple. (And that fix is to just change *log.Logger to martini.Logger in your handlers. If the code is using the logger to do things other than Print{f,ln}, then there would need to be a type assertion.)\n. Hmm, upon more thought, I think (2) may not be easily possible.\n. Thanks. I think that should settle it then.\n. > Yup. it looks like the ideal would be to expose the martini.Routes service on the martini.Router as well as mapping it to the martini instance.\nHow do you want to do it? One idea is to just add the Routes interface to the Router interface. This would make it easy for people to map the service if they aren't using martini.Classic. However, there's a certain asymmetry to this (since users would need to use Map instead of Use), so you could also add a Routes function:\ngo\nfunc Routes(r Router) martini.Handler {\n    return func(c martini.Context) {\n        c.MapTo(r, (*Routes)(nil))\n    }\n}\nAlthough we'd need a different name...\nLet me know how you want to proceed and I'll update the PR. Maybe there are better ideas...\n\nThis still isn't the most ideal thing as it is yet another point of failure when graduating from a martini.Classic() to a martini.New() implementation. :/\n\nYeah, but I think this can be mitigated with good documentation. Users should understand that moving to New is a bit more raw. (I got that impression anyway.) Plus, the code for Classic is so simple that it was easy to look at and see what I would be missing out on if I went with New.\n. OK, I've updated the PR to expose Routes via the Router interface. I've updated documentation in a few places.\nI also had to modify the two tests (for methods and URLs) to add the Routes middleware.\nI didn't add any package level functions since, as you said, martini.Routes isn't a service.\n. Ah, right. Sorry about the mixup. Hopefully all fixed now. Thanks!\n. martini-contrib has moved. You should use github.com/martini-contrib/encoder instead.\nI was able to reproduce this just by using Go's standard JSON encoder:\n``` go\npackage main\nimport (\n    \"encoding/json\"\n    \"log\"\n    \"os\"\n)\ntype Some struct {\n    Url string json:\"login\"\n}\nfunc main() {\n    r := &Some{\"https://example.com/inbox&test=totot\"}\n    if err := json.NewEncoder(os.Stdout).Encode(r); err != nil {\n        log.Fatal(err)\n    }\n}\n```\nOutput:\n[andrew@Liger martini] go run 195-json.go \n{\"login\":\"https://example.com/inbox\\u0026test=totot\"}\nIt appears this is an undocumented feature of the encoding/json package: http://golang.org/src/pkg/encoding/json/encode.go#L815 --- it doesn't explicitly mention &, but it's included in line 797.\nAs far as I can tell, this is working as intended. The JSON spec allows for unicode characters to be escaped, so any conforming decoder should be able to read your JSON without any problems.\nAlso, I think you'll find martini.Classic convenient to use.\n. @DisposaBoy Ah excellent. Thanks for the pointer!\n. You can set the case insensitive flag, which is documented in the syntax for RE2.\ne.g.,\ngo\nm.Get(\"(?i)/hello/:name\", func(params martini.Params) string {\n    return \"Hello \" + params[\"name\"]\n})\nYou should also be able to write \"/(?i:hello)/:name\", but it looks like the router code that mangles the regex to find parameter names conflicts with this syntax.\n. RE benchmark: your benchmark is failing because you aren't closing the response you get from http.Get.\n(If you do come up with a good benchmark, I'm sure a lot folks would be interested to see the results.)\n. Yes.\n. I think thing here is to realize that the keys of martini.Params are taken straight from the named capture groups of the regex. As @mvader pointed out, the full regex ends up looking something like (?P<id>[^/#?]+)([0-9]+). That is, :name is syntactic sugar for \"bind a single piece of a URL to the name name.\"\nSo to get the behavior you want, just introduce the named capture directly. Here's a full working example:\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n\"github.com/go-martini/martini\"\n\n)\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/test/(?P[0-9]+)\", func(p martini.Params) string {\n        return fmt.Sprintf(\"ID %s\", p[\"id\"])\n    })\n    m.Run()\n}\n```\n. I strongly disagree that everything should be case insensitive. Some might want to maintain the property that there is exactly one URL for a page. (I'm not saying everyone should do this all the time, but that it's a reasonable use case.)\nI don't have particularly strong feelings about adding a case insensitive option to the public API, but I lean toward not. Consider that you could just wrap a ClassicMartini and provide case insensitivity yourself without cluttering up your routes:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/codegangsta/martini\"\n\n)\ntype ClassicInsensitive struct {\n    *martini.ClassicMartini\n}\nfunc (c ClassicInsensitive) Get(s string, hs ...martini.Handler) martini.Route {\n    return c.Router.Get(\"(?i)\" + s, hs...)\n}\nfunc main() {\n    m := ClassicInsensitive{martini.Classic()}\n    m.Get(\"/hello/:name\", func(p martini.Params) string {\n        return fmt.Sprintf(\"Hello %s\", p[\"name\"])\n    })\n    m.Run()\n}\n```\nOf course, you'd have to wrap the other router methods too, but you get the idea.\n. @kpowick I know :P Just showing how you could do it cleanly with struct embedding. (@captncraig was rightly concerned about adding (?i) every time becoming a bit unwieldy.)\n. I'm not sure that you really can. The martini.Params service only makes sense in the context of a matched route, which is what determines the parameter names and values. But middleware doesn't really have any concept of which route is matched.\nInstead, you can achieve something similar by just adding handlers to your routes. Here's a full example:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/go-martini/martini\"\n\n)\nfunc middleware(c martini.Context, params martini.Params) {\n    fmt.Println(\"Middleware\")\n}\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", middleware, func() string {\n        return \"Hello, world!\"\n    })\n    m.Run()\n}\n``\n. We should also point to the official docs describing the regular expression syntax too: http://golang.org/pkg/regexp/syntax/\n. Firstly,martinihas a new import path:github.com/go-martini/martini`.\nSecondly, the logger is only enabled by default if you're using classic martini. If you want more fine grained control, then you can build your own custom martini. It's actually very easy. Take a look at the ClassicMartini function:\ngo\nfunc Classic() *ClassicMartini {\n    r := NewRouter()\n    m := New()\n    m.Use(Logger())\n    m.Use(Recovery())\n    m.Use(Static(\"public\"))\n    m.MapTo(r, (*Routes)(nil))\n    m.Action(r.Handle)\n    return &ClassicMartini{m, r}\n}\nSo you can use that function, except omit the m.Use(Logger()) line. Here's a full working example:\n``` go\npackage main\nimport (\n    \"log\"\n\"github.com/go-martini/martini\"\n\n)\ntype myClassic struct {\n    *martini.Martini\n    martini.Router\n}\nfunc withoutLogging() myClassic {\n    r := martini.NewRouter()\n    m := martini.New()\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\n    m.MapTo(r, (martini.Routes)(nil))\n    m.Action(r.Handle)\n    return &myClassic{m, r}\n}\nfunc main() {\n    m := withoutLogging()\n    m.Get(\"/\", func(lg *log.Logger) string {\n        return \"Hello, world!\"\n    })\n    m.Run()\n}\n```\nI think if #213 gets fixed, then this wouldn't require making your own Martini.\n. Ah, yes, that project has moved too :-)\nhttps://github.com/martini-contrib/render\n. ",
    "pabbott0": "I just threw together a quick test of the embedded method and it worked fine. I can write a middleware to pull w.(martini.ResponseWriter).OrigResponseWriter() out and map it to a spdy.Stream - I'm not overly worried about generating conflicts with other middleware since they can be disabled if there's a problem. It was just the initial mapping in martini.go that couldn't be worked around.\n. Sure, I should be able to get to it this weekend.\n. I just threw together a quick test of the embedded method and it worked fine. I can write a middleware to pull w.(martini.ResponseWriter).OrigResponseWriter() out and map it to a spdy.Stream - I'm not overly worried about generating conflicts with other middleware since they can be disabled if there's a problem. It was just the initial mapping in martini.go that couldn't be worked around.\n. Sure, I should be able to get to it this weekend.\n. ",
    "thewatts": "Hey @codegangsta, sorry for the late reply! Just finished up my time at http://gschool.it -- the last couple weeks have been nuts.\nBasically, what was happening, was that I was referencing this repo in my import, however my folder structure was identical to martini's github url.\nI had setup my folder structure based on your first couple gophercasts - which were: github.com/codegangtsa/{thing}, and so - when we jumped into martini - I just named it:\ngithub.com/codegangsta/martini\n:) which caused the circular dependency.\nOn a side note - I'd love to pair sometime if you have the time to do so! Just spend 6 months hammering hard on Ruby/Rails, and super intrigued by Go !!\n. Hey @codegangsta, sorry for the late reply! Just finished up my time at http://gschool.it -- the last couple weeks have been nuts.\nBasically, what was happening, was that I was referencing this repo in my import, however my folder structure was identical to martini's github url.\nI had setup my folder structure based on your first couple gophercasts - which were: github.com/codegangtsa/{thing}, and so - when we jumped into martini - I just named it:\ngithub.com/codegangsta/martini\n:) which caused the circular dependency.\nOn a side note - I'd love to pair sometime if you have the time to do so! Just spend 6 months hammering hard on Ruby/Rails, and super intrigued by Go !!\n. ",
    "kpowick": "Yes, people producing non dynamic content use SSI.  As mentioned, it's very handy for including html/text fragments that are common to many pages.\nWe could use go templates \u00e0 la render, but we're trying to fly under our corporate radar on this project.  It would be best if our group's front-end developers did not have to consider (or even know about) such \"non standard\" methods. ;)\nUltimately, we'll be able to work around the lack of SSI in Martini, and I don't actually see it as a major shortcoming.  So, the request for SSI support could be categorized as a possibly \"nice to have\"  feature.  The corporate world moves slowly, so maybe nobody (else) does use SSI.\n. Thanks for the quick reply.  I'll try it and see what I can discover.\nIt may be a day or two before I can report back any results, but I will.\n. Thanks, BurntSushi! \nThat worked perfectly.\n. You are not restricted to using environment variables.  See the FAQ here: https://github.com/go-martini/martini#how-do-i-change-the-porthost\n. I had the same request.  See closed issue 196 for a solution.\nhttps://github.com/go-martini/martini/issues/196\n. Yes, using the built in RegEx was the solution you gave to me on issue 196.  It works great and allows the API to remain both flexible and unchanged.\n. Yes, I suppose if one were hard-coding a lot of routes, then adding the RegEx pattern to each would be a pain.  In my case, routes are loaded dynamically from an external file and the pattern added automatically within the program.  I do like your struct embedding method though. :)\n. Did you go get with the u option to update your local martini sources?\n. Yes, people producing non dynamic content use SSI.  As mentioned, it's very handy for including html/text fragments that are common to many pages.\nWe could use go templates \u00e0 la render, but we're trying to fly under our corporate radar on this project.  It would be best if our group's front-end developers did not have to consider (or even know about) such \"non standard\" methods. ;)\nUltimately, we'll be able to work around the lack of SSI in Martini, and I don't actually see it as a major shortcoming.  So, the request for SSI support could be categorized as a possibly \"nice to have\"  feature.  The corporate world moves slowly, so maybe nobody (else) does use SSI.\n. Thanks for the quick reply.  I'll try it and see what I can discover.\nIt may be a day or two before I can report back any results, but I will.\n. Thanks, BurntSushi! \nThat worked perfectly.\n. You are not restricted to using environment variables.  See the FAQ here: https://github.com/go-martini/martini#how-do-i-change-the-porthost\n. I had the same request.  See closed issue 196 for a solution.\nhttps://github.com/go-martini/martini/issues/196\n. Yes, using the built in RegEx was the solution you gave to me on issue 196.  It works great and allows the API to remain both flexible and unchanged.\n. Yes, I suppose if one were hard-coding a lot of routes, then adding the RegEx pattern to each would be a pain.  In my case, routes are loaded dynamically from an external file and the pattern added automatically within the program.  I do like your struct embedding method though. :)\n. Did you go get with the u option to update your local martini sources?\n. ",
    "zbindenren": "Your are right, nothing.\nFor this:\n``` go\npackage main\nimport (\n    \"net/http\"\n    \"fmt\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) { \n    fmt.Println(r.URL.Host)\n    fmt.Println(r.URL.Scheme)\n    fmt.Println(r.URL.Path)\n    fmt.Fprintf(w, \"Hello world!\")\n}\nfunc main() {\n    http.HandleFunc(\"/\", handler) \n    http.ListenAndServe(\"localhost:3001\", nil) \n}\n```\nThe host field in the request header is always empty. I am closing the issue.\n. @DisposaBoy Thanks, that is what I am looking for.\n. @codegangsta Also it could be a security issue. If you set host=\"\" then the http Server listens on all addresses on that port. That is may be not what people want. At least that is what other web frameworks do.\n. Perfect, Thanks.\n. I can confirm that render is working again.\n. Your are right, nothing.\nFor this:\n``` go\npackage main\nimport (\n    \"net/http\"\n    \"fmt\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) { \n    fmt.Println(r.URL.Host)\n    fmt.Println(r.URL.Scheme)\n    fmt.Println(r.URL.Path)\n    fmt.Fprintf(w, \"Hello world!\")\n}\nfunc main() {\n    http.HandleFunc(\"/\", handler) \n    http.ListenAndServe(\"localhost:3001\", nil) \n}\n```\nThe host field in the request header is always empty. I am closing the issue.\n. @DisposaBoy Thanks, that is what I am looking for.\n. @codegangsta Also it could be a security issue. If you set host=\"\" then the http Server listens on all addresses on that port. That is may be not what people want. At least that is what other web frameworks do.\n. Perfect, Thanks.\n. I can confirm that render is working again.\n. ",
    "lgs": "Here it is my preferred way using Docker, the LXC Container engine. \nWhen containerized with Docker, Martini can be deployed on DigitalOcean cloud hosting.\n. @jayrox  at first you got no benefit, if you look at deploy issue from a flat simple prospective.\nBut if your app is going to be more complex, adding multi-tier components, you're going to thanks having a lightway virtualization engine like Docker in place and your app components dockerized.\nEven if you have a small site and you'll fed up with your provider, Docker will help you to migrate in a blink of eye, decoupling your site from your hosting provider being that a Cloud, a VPS or bare metal as well.\n... again, a bit off topic I know,\nbut in the long term I think Martini will get a lot from LXC containerization, because of its self nature of HTTP endpoint builder and handler component, a \"LEGO\" attitude which is fostering distribution of self contained micro apps vs monolitic, vertical, un-manageable mega build.\nTo see a more complete list of benefit using Docker instead of just a regular installation, just exercise your googling skills, may be starting from here:\nBenefits of Docker for application deployment\nI'm not affiliated with Docker product/company, this is just IMHO.\n. @vaxXxa     yeah, that's easy peasy.\n. At the end of the day, I did it myself ... \nHere it is my own Dockerfile to build & ship containerized Martini (last rev.) on GOLANG 1.2 on Ubuntu 13.10 (Saucy Salamander). \nFeel free to use it, modify it, include it wherever you like.  \n\n    $ docker pull lgsd/docker-martini\n    $ docker run -d -p 3000:3000 -name martini -t lgsd/docker-martini:latest\n    23f1c41a7e8b6bfc7b9135fd1a37a234d4536d5da876b6f50558b3385564027c\n    $ docker ps -a\n    CONTAINER ID        IMAGE                       COMMAND             CREATED              STATUS              PORTS                    NAMES\n    23f1c41a7e8b     lgsd/docker-martini:latest   go run server.go    About a minute ago   Up About a minute   0.0.0.0:3000->3000/tcp   martini\n\nYou will now have a Martini webserver running on localhost:3000\n\n    $ curl localhost:3000\n    Hello world!\n\n. @Elexy  ... yeah I like this way to \"Dev/Ops\" building locally & shipping everywhere. It's a disruptive lightweight virtualization technique, both in dev and ops field IMHO. See also this thread: Martini deployment #184 \n. @Elexy  I think that's a little bit off topic here, \nanyway you'll find tons of arts googling a bit. Start by: \n- Martial Docker and Hipache. Techniques for zero-downtime updates of Docker-ized services and more.\n- The Codeship Workflow: Deployment Pipelines and Zero Downtime Deployment ... (old article)\n- Using nginx, confd, and docker for zero-downtime web updates\n- Zero Downtime Pushes: Say Goodbye to the Workout Robot! \n. Here it is my preferred way using Docker, the LXC Container engine. \nWhen containerized with Docker, Martini can be deployed on DigitalOcean cloud hosting.\n. @jayrox  at first you got no benefit, if you look at deploy issue from a flat simple prospective.\nBut if your app is going to be more complex, adding multi-tier components, you're going to thanks having a lightway virtualization engine like Docker in place and your app components dockerized.\nEven if you have a small site and you'll fed up with your provider, Docker will help you to migrate in a blink of eye, decoupling your site from your hosting provider being that a Cloud, a VPS or bare metal as well.\n... again, a bit off topic I know,\nbut in the long term I think Martini will get a lot from LXC containerization, because of its self nature of HTTP endpoint builder and handler component, a \"LEGO\" attitude which is fostering distribution of self contained micro apps vs monolitic, vertical, un-manageable mega build.\nTo see a more complete list of benefit using Docker instead of just a regular installation, just exercise your googling skills, may be starting from here:\nBenefits of Docker for application deployment\nI'm not affiliated with Docker product/company, this is just IMHO.\n. @vaxXxa     yeah, that's easy peasy.\n. At the end of the day, I did it myself ... \nHere it is my own Dockerfile to build & ship containerized Martini (last rev.) on GOLANG 1.2 on Ubuntu 13.10 (Saucy Salamander). \nFeel free to use it, modify it, include it wherever you like.  \n\n    $ docker pull lgsd/docker-martini\n    $ docker run -d -p 3000:3000 -name martini -t lgsd/docker-martini:latest\n    23f1c41a7e8b6bfc7b9135fd1a37a234d4536d5da876b6f50558b3385564027c\n    $ docker ps -a\n    CONTAINER ID        IMAGE                       COMMAND             CREATED              STATUS              PORTS                    NAMES\n    23f1c41a7e8b     lgsd/docker-martini:latest   go run server.go    About a minute ago   Up About a minute   0.0.0.0:3000->3000/tcp   martini\n\nYou will now have a Martini webserver running on localhost:3000\n\n    $ curl localhost:3000\n    Hello world!\n\n. @Elexy  ... yeah I like this way to \"Dev/Ops\" building locally & shipping everywhere. It's a disruptive lightweight virtualization technique, both in dev and ops field IMHO. See also this thread: Martini deployment #184 \n. @Elexy  I think that's a little bit off topic here, \nanyway you'll find tons of arts googling a bit. Start by: \n- Martial Docker and Hipache. Techniques for zero-downtime updates of Docker-ized services and more.\n- The Codeship Workflow: Deployment Pipelines and Zero Downtime Deployment ... (old article)\n- Using nginx, confd, and docker for zero-downtime web updates\n- Zero Downtime Pushes: Say Goodbye to the Workout Robot! \n. ",
    "jayrox": "@lgs, I am using Go and Martini on DigitalOcean without the use of Docker. Is there some benefit to using Docker instead of just a regular install?\n. @lgs that sounds like it would be nice. but what is the development cycle like with docker? using your dockerfile as an example would it be redownloading the go files everytime you spin up the container?\n. awesome!\n. have you looked at https://github.com/martini-contrib/binding ?\ni've not tried it with PUT but it works fine with POST\n. Multipart form binding is supported\nOn Mar 4, 2014 12:32 PM, \"Jeremy Saenz\" notifications@github.com wrote:\n\nI believe multipart form is supported in binding, if it isn't it should and\nyou should file an issue\nOn Tue, Mar 4, 2014 at 9:31 AM, Guillermo Estrada\nnotifications@github.comwrote:\n\nThank you I'll give it a try. I dunno if this will help with File upload\nfor example as it tries to binds them into a struct and I might need to\npre\nprocess them before hand, but Ill dig into it.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650748>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650908\n.\n. How is this different than setting the expires header to something like \"Access plus 1 week\"?\nThat way the browser does the date work and not the server.\n. ahh very well, i see. i'm used to the apache way and wasn't aware it did some behind the scenes magic. thanks for the info.\n. On Fri, Mar 28, 2014 at 9:26 PM, defunct73 notifications@github.com wrote:\nlocalhost:3000/test/12\n\nhave you tried log.Println(params) to see what all it contains?\nfor me, it trims the last character off on all strings lens > 1, if len is\n1 then it returns 404 as if the regex doesnt match.\n. using ([0-9]*) seems to work fine without cutting the last character off\nand also works if the string len is 1. this isnt the way it should work. as\n- is \"0 or more\" and + is \"1 or more\"\nOn Fri, Mar 28, 2014 at 10:25 PM, jay rox jayrox@gmail.com wrote:\n\nOn Fri, Mar 28, 2014 at 9:26 PM, defunct73 notifications@github.comwrote:\n\nlocalhost:3000/test/12\n\nhave you tried log.Println(params) to see what all it contains?\nfor me, it trims the last character off on all strings lens > 1, if len is\n1 then it returns 404 as if the regex doesnt match.\n. update the Martini-Contrib imports also.\n\nOn Fri, Apr 11, 2014 at 3:32 PM, Brian Scott notifications@github.comwrote:\n\n@codegangsta https://github.com/codegangsta I have\ngithub.com/go-martini/martini\nStill getting a Panic\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/218#issuecomment-40244795\n.\n. I see github.com/codegangsta/martini all over in that stack trace. Make sure to update all of your martini-contrib packages. go get -u for each\n. The default handler doesn't sound bad to me, leaving NotFound as a kind of\ncatchall for empty responses.\n\nOn Fri, Apr 11, 2014 at 11:07 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nWhat about adding a DefaultHandler? If nothing has been written\nDefaultHandler will be invoked (if it is set). If DefaultHandler was not\nset NotFound would be invoked instead. That way you could send empty\nresponses (that\u2019s the only use case of not sending anything to the browser\nthat I can think of) just set func(){} as your DefaultHandler.\nOn 11 de abril de 2014 at 17:01:59, Jeremy Saenz (notifications@github.com)\nwrote:\nNothing is wrong with the other approach. I'm trying to think of use cases\nthat may be broken by it but I can't think of any right now.\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like\na good approach. What was wrong with invoking NotFound when all handlers\nhave been invoked and nothing has been written? (the other PR where this\nwas discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nJos\u00e9 M. Molina\nSent with Airmail\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40213983\n.\n. what if NotFound knew the route that was requested and if it was routable.\nso NotFound knew if it was NotFound or ReallyNotFound?\n\nOn Fri, Apr 11, 2014 at 2:33 PM, Vsevolod Balashov <notifications@github.com\n\nwrote:\nNow we will have a 2 handlers: NotFound and ReallyNotFound :) I again\nthink that my PR is properly solution =)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40238829\n.\n. I agree. As it is right now, using the gzip middleware it sends an empty gz\nfile that chrome tries to download. kind of odd. i think a 404 would be a\nbetter result.\n\nOn Fri, Apr 11, 2014 at 2:51 PM, Jeremy Saenz notifications@github.comwrote:\n\nLets try with the implementation here\nhttps://github.com/go-martini/martini/pull/229\nMake sure we have no regressions. and add some tests. I think it makes\nsense that an unwritten request would be considered a 404. What do you guys\nthink?\nOn Fri, Apr 11, 2014 at 11:47 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\njust rename NotFound to NotHandled ?\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/230#issuecomment-40240228>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40240629\n.\n. Are you talking about the fork martini link? That one redirects to the new org.\n. I modified your code slightly to mirror my environment and I'm still getting the same RemoteAddr values: [martini] Started GET /views/albumcreate.html for 127.0.0.1:50914\n. This is what I have now:\n\n```\nupstream martini {\n    server 127.0.0.1:3000;\n}\nupstream martini_tls {\n    server 127.0.0.1:8000;\n}\nserver {\n    listen 80;\n    server_name justriot.com;\nlocation / {\n    proxy_set_header    X-Forwarded-For     $remote_addr;\n    proxy_set_header    X-Forwarded-Proto   $scheme;\n    proxy_set_header    X-Forwarded-Port    $server_port;\n    proxy_set_header    Host                $host;\n    proxy_pass          http://martini;\n}\n\n}\nserver {\n    listen 443 ssl;\n    server_name justriot.com;\nssl on;\nssl_certificate /var/www/go/src/pixelrelay/tls/ssl.crt;\nssl_certificate_key /var/www/go/src/pixelrelay/tls/key.pem;\n\n\nlocation / {\n    proxy_set_header    X-Forwarded-For     $remote_addr;\n    proxy_set_header    X-Forwarded-Proto   $scheme;\n    proxy_set_header    X-Forwarded-Port    $server_port;\n    proxy_set_header    Host                $host;\n    proxy_pass          https://martini_tls;\n}\n\n}\n``\n. @mvader I was just looking over that. What if instead of supporting bothX-Real-IPandX-Forwarded-Forwe instead used a singleX-RemoteAddr`\nFewer checks and might be more obvious what it is.\nedit, didn't mean to click close XD\n. looks good to me, thanks guys.\n. I agree, this may not be the best solution. However, it is only being used for logging. Besides giving a user configurable header field which would just give more overhead, I'm not sure how else to relay this data.\n. curious as to what you would use this for?\n. > Middleware Handlers can call to yield the until after the other Handlers  \ni think the \"the\" is extra, and should be read as  \n\nMiddleware Handlers can call Next() to yield until after the other Handlers\n. @lgs, I am using Go and Martini on DigitalOcean without the use of Docker. Is there some benefit to using Docker instead of just a regular install?\n. @lgs that sounds like it would be nice. but what is the development cycle like with docker? using your dockerfile as an example would it be redownloading the go files everytime you spin up the container?\n. awesome!\n. have you looked at https://github.com/martini-contrib/binding ?\n\ni've not tried it with PUT but it works fine with POST\n. Multipart form binding is supported\nOn Mar 4, 2014 12:32 PM, \"Jeremy Saenz\" notifications@github.com wrote:\n\nI believe multipart form is supported in binding, if it isn't it should and\nyou should file an issue\nOn Tue, Mar 4, 2014 at 9:31 AM, Guillermo Estrada\nnotifications@github.comwrote:\n\nThank you I'll give it a try. I dunno if this will help with File upload\nfor example as it tries to binds them into a struct and I might need to\npre\nprocess them before hand, but Ill dig into it.\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650748>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/193#issuecomment-36650908\n.\n. How is this different than setting the expires header to something like \"Access plus 1 week\"?\nThat way the browser does the date work and not the server.\n. ahh very well, i see. i'm used to the apache way and wasn't aware it did some behind the scenes magic. thanks for the info.\n. On Fri, Mar 28, 2014 at 9:26 PM, defunct73 notifications@github.com wrote:\nlocalhost:3000/test/12\n\nhave you tried log.Println(params) to see what all it contains?\nfor me, it trims the last character off on all strings lens > 1, if len is\n1 then it returns 404 as if the regex doesnt match.\n. using ([0-9]*) seems to work fine without cutting the last character off\nand also works if the string len is 1. this isnt the way it should work. as\n- is \"0 or more\" and + is \"1 or more\"\nOn Fri, Mar 28, 2014 at 10:25 PM, jay rox jayrox@gmail.com wrote:\n\nOn Fri, Mar 28, 2014 at 9:26 PM, defunct73 notifications@github.comwrote:\n\nlocalhost:3000/test/12\n\nhave you tried log.Println(params) to see what all it contains?\nfor me, it trims the last character off on all strings lens > 1, if len is\n1 then it returns 404 as if the regex doesnt match.\n. update the Martini-Contrib imports also.\n\nOn Fri, Apr 11, 2014 at 3:32 PM, Brian Scott notifications@github.comwrote:\n\n@codegangsta https://github.com/codegangsta I have\ngithub.com/go-martini/martini\nStill getting a Panic\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/218#issuecomment-40244795\n.\n. I see github.com/codegangsta/martini all over in that stack trace. Make sure to update all of your martini-contrib packages. go get -u for each\n. The default handler doesn't sound bad to me, leaving NotFound as a kind of\ncatchall for empty responses.\n\nOn Fri, Apr 11, 2014 at 11:07 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nWhat about adding a DefaultHandler? If nothing has been written\nDefaultHandler will be invoked (if it is set). If DefaultHandler was not\nset NotFound would be invoked instead. That way you could send empty\nresponses (that\u2019s the only use case of not sending anything to the browser\nthat I can think of) just set func(){} as your DefaultHandler.\nOn 11 de abril de 2014 at 17:01:59, Jeremy Saenz (notifications@github.com)\nwrote:\nNothing is wrong with the other approach. I'm trying to think of use cases\nthat may be broken by it but I can't think of any right now.\nThat PR may be our best bet right now.\nSent from my iPhone\n\nOn Apr 11, 2014, at 7:46 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\nI suppose there is a way to do it with context but it doesn't seem like\na good approach. What was wrong with invoking NotFound when all handlers\nhave been invoked and nothing has been written? (the other PR where this\nwas discussed)\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nJos\u00e9 M. Molina\nSent with Airmail\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40213983\n.\n. what if NotFound knew the route that was requested and if it was routable.\nso NotFound knew if it was NotFound or ReallyNotFound?\n\nOn Fri, Apr 11, 2014 at 2:33 PM, Vsevolod Balashov <notifications@github.com\n\nwrote:\nNow we will have a 2 handlers: NotFound and ReallyNotFound :) I again\nthink that my PR is properly solution =)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40238829\n.\n. I agree. As it is right now, using the gzip middleware it sends an empty gz\nfile that chrome tries to download. kind of odd. i think a 404 would be a\nbetter result.\n\nOn Fri, Apr 11, 2014 at 2:51 PM, Jeremy Saenz notifications@github.comwrote:\n\nLets try with the implementation here\nhttps://github.com/go-martini/martini/pull/229\nMake sure we have no regressions. and add some tests. I think it makes\nsense that an unwritten request would be considered a 404. What do you guys\nthink?\nOn Fri, Apr 11, 2014 at 11:47 AM, Vsevolod Balashov \nnotifications@github.com wrote:\n\njust rename NotFound to NotHandled ?\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/230#issuecomment-40240228>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/230#issuecomment-40240629\n.\n. Are you talking about the fork martini link? That one redirects to the new org.\n. I modified your code slightly to mirror my environment and I'm still getting the same RemoteAddr values: [martini] Started GET /views/albumcreate.html for 127.0.0.1:50914\n. This is what I have now:\n\n```\nupstream martini {\n    server 127.0.0.1:3000;\n}\nupstream martini_tls {\n    server 127.0.0.1:8000;\n}\nserver {\n    listen 80;\n    server_name justriot.com;\nlocation / {\n    proxy_set_header    X-Forwarded-For     $remote_addr;\n    proxy_set_header    X-Forwarded-Proto   $scheme;\n    proxy_set_header    X-Forwarded-Port    $server_port;\n    proxy_set_header    Host                $host;\n    proxy_pass          http://martini;\n}\n\n}\nserver {\n    listen 443 ssl;\n    server_name justriot.com;\nssl on;\nssl_certificate /var/www/go/src/pixelrelay/tls/ssl.crt;\nssl_certificate_key /var/www/go/src/pixelrelay/tls/key.pem;\n\n\nlocation / {\n    proxy_set_header    X-Forwarded-For     $remote_addr;\n    proxy_set_header    X-Forwarded-Proto   $scheme;\n    proxy_set_header    X-Forwarded-Port    $server_port;\n    proxy_set_header    Host                $host;\n    proxy_pass          https://martini_tls;\n}\n\n}\n``\n. @mvader I was just looking over that. What if instead of supporting bothX-Real-IPandX-Forwarded-Forwe instead used a singleX-RemoteAddr`\nFewer checks and might be more obvious what it is.\nedit, didn't mean to click close XD\n. looks good to me, thanks guys.\n. I agree, this may not be the best solution. However, it is only being used for logging. Besides giving a user configurable header field which would just give more overhead, I'm not sure how else to relay this data.\n. curious as to what you would use this for?\n. > Middleware Handlers can call to yield the until after the other Handlers  \ni think the \"the\" is extra, and should be read as  \n\nMiddleware Handlers can call Next() to yield until after the other Handlers\n. \n",
    "vaxXxa": "@lgs I mean some step by step guide, or some tricks for deploying.\nIn my small site (https://github.com/gopherway/website) I used for example 2 options (flags) https://github.com/gopherway/website/blob/master/server.go#L19:\n- path to static\n- path to templates\nConnect to the server, git pull my source.\nThen I build a binary, move binary to any place and run:\nbash\n$ ./mysite -s .../mysite/src/static/ -t .../mysite/src/templates/\n. @lgs I mean some step by step guide, or some tricks for deploying.\nIn my small site (https://github.com/gopherway/website) I used for example 2 options (flags) https://github.com/gopherway/website/blob/master/server.go#L19:\n- path to static\n- path to templates\nConnect to the server, git pull my source.\nThen I build a binary, move binary to any place and run:\nbash\n$ ./mysite -s .../mysite/src/static/ -t .../mysite/src/templates/\n. ",
    "baldrailers": "Deployment in heroku is another option, there's a build pack you can use. Just provide a .godir which contains your compiled binary say awesome-martini. Also you'll need a Procfile which you can define the processes: web: awesome-martini.\nIf your using Docker. This is a good tool: https://github.com/progrium/dokku\nThe build pack you've used in heroku can be used in dokku, base on my experience, you only need to setup once. I use heroku for dev/staging and dokku(docker) in production. \nDigitalOcean, refer to this: https://www.digitalocean.com/community/articles/how-to-use-the-digitalocean-dokku-application\n. I think your looking for a custom logger. In any rate you can check this out: https://github.com/martini-contrib/logstasher\nI've used the same project for my Graylog2 server, just minor modifications and you should be good to go.\n. I'm getting the same error, even after updating the imports to go-martini. \n. I got one of my apps working, but doing go get -u 'github.com/martini-contrib/render'\nI'm using the particular package\n. If your using github.com/martini-contrib/gzip this is still waiting for the PR to be merged by @codegangsta ... I disable this for now. All is well.\n. You should change your import to github.com/go-martini/martini \n. @Yorirou I think you should look at this: https://github.com/martini-contrib/secure\n. @mvader suggestion is the best way to customize the logger, even better.\n@dojodominator just in case look at this PR https://github.com/go-martini/martini/pull/240\n. nginx.conf\nupstream martini { server 127.0.0.1:49545; }\nserver {\n  listen      80;\n  server_name yourmartini.martini.io;\n  location    / {\n    proxy_pass  http://martini;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header X-Forwarded-Port $server_port;\n    proxy_set_header X-Request-Start $msec;\n  }\n}\nAbove is the one that is provided by dokku using nginx as proxy. Let me know if that helps.\n. @jayrox are you using upstream base proxy? seems related to your problem: link\n. There you go. Thanks @mvader \n. IMHO we want to limit the handling of Header values to be used as filter on the default logger. Point being that not all implementation will use nginx as their reverse proxy. \nSome solutions may require just building a new handler to process those custom headers. Just my opinion.\n. Deployment in heroku is another option, there's a build pack you can use. Just provide a .godir which contains your compiled binary say awesome-martini. Also you'll need a Procfile which you can define the processes: web: awesome-martini.\nIf your using Docker. This is a good tool: https://github.com/progrium/dokku\nThe build pack you've used in heroku can be used in dokku, base on my experience, you only need to setup once. I use heroku for dev/staging and dokku(docker) in production. \nDigitalOcean, refer to this: https://www.digitalocean.com/community/articles/how-to-use-the-digitalocean-dokku-application\n. I think your looking for a custom logger. In any rate you can check this out: https://github.com/martini-contrib/logstasher\nI've used the same project for my Graylog2 server, just minor modifications and you should be good to go.\n. I'm getting the same error, even after updating the imports to go-martini. \n. I got one of my apps working, but doing go get -u 'github.com/martini-contrib/render'\nI'm using the particular package\n. If your using github.com/martini-contrib/gzip this is still waiting for the PR to be merged by @codegangsta ... I disable this for now. All is well.\n. You should change your import to github.com/go-martini/martini \n. @Yorirou I think you should look at this: https://github.com/martini-contrib/secure\n. @mvader suggestion is the best way to customize the logger, even better.\n@dojodominator just in case look at this PR https://github.com/go-martini/martini/pull/240\n. nginx.conf\nupstream martini { server 127.0.0.1:49545; }\nserver {\n  listen      80;\n  server_name yourmartini.martini.io;\n  location    / {\n    proxy_pass  http://martini;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header X-Forwarded-Port $server_port;\n    proxy_set_header X-Request-Start $msec;\n  }\n}\nAbove is the one that is provided by dokku using nginx as proxy. Let me know if that helps.\n. @jayrox are you using upstream base proxy? seems related to your problem: link\n. There you go. Thanks @mvader \n. IMHO we want to limit the handling of Header values to be used as filter on the default logger. Point being that not all implementation will use nginx as their reverse proxy. \nSome solutions may require just building a new handler to process those custom headers. Just my opinion.\n. ",
    "ian-lewis-cs": "Thanks for the quick response.\nBy way of an update I successfully achieved my objective by using a go routine to fork the server into a separate process. This looks like a workable solution so far.\nfunc main() {\ngo RunAdminServer()\nRunAppServer()\n}\nIan.\nGreat library by the way! Thanks.\n. Thanks for the quick response.\nBy way of an update I successfully achieved my objective by using a go routine to fork the server into a separate process. This looks like a workable solution so far.\nfunc main() {\ngo RunAdminServer()\nRunAppServer()\n}\nIan.\nGreat library by the way! Thanks.\n. ",
    "Elexy": "Nice!\n. I'm still looking for an automated way to hot swap containers for zero downtime deployment with docker. Any ideas beyond homegrown scripting?\n. tnx\nBest Regards,\nAlex Knol\nMovil: +34 693 206 868\nCompany: Pumiwex S.L.U.\nPostBox: Apartado Correos 842, Camarles\nDelivery: Plaza Don Diego de Leon 3, Camarles\nPostal Code: 43894\nCountry: Espana\nCIF B43969187\nOn Mon, Mar 3, 2014 at 3:05 PM, Luca G. Soave notifications@github.comwrote:\n\n@Elexy https://github.com/Elexy I think that's a little bit off topic\nhere,\nanyway you'll find tons of arts googling a bit. Start by:\n-\nMartial Docker and Hipache. Techniques for zero-downtime updates of\n   Docker-ized services and more.https://github.com/FrozenRidge/dockerfu\n   -\nThe Codeship Workflow: Deployment Pipelines and Zero Downtime\n   Deploymenthttp://blog.codeship.io/2013/08/30/the-codeship-workflow-part-3-deployment-pipelines.html... (old article)\n   -\nUsing nginx, confd, and docker for zero-downtime web updateshttp://brianketelsen.com/2014/02/25/using-nginx-confd-and-docker-for-zero-downtime-web-updates/\n   -\nZero Downtime Pushes: Say Goodbye to the Workout Robot!\n   http://blog.relateiq.com/zero-downtime-pushes-say-goodbye-to-the-workout-robot/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/190#issuecomment-36512345\n.\n. Nice!\n. I'm still looking for an automated way to hot swap containers for zero downtime deployment with docker. Any ideas beyond homegrown scripting?\n. tnx\n\nBest Regards,\nAlex Knol\nMovil: +34 693 206 868\nCompany: Pumiwex S.L.U.\nPostBox: Apartado Correos 842, Camarles\nDelivery: Plaza Don Diego de Leon 3, Camarles\nPostal Code: 43894\nCountry: Espana\nCIF B43969187\nOn Mon, Mar 3, 2014 at 3:05 PM, Luca G. Soave notifications@github.comwrote:\n\n@Elexy https://github.com/Elexy I think that's a little bit off topic\nhere,\nanyway you'll find tons of arts googling a bit. Start by:\n-\nMartial Docker and Hipache. Techniques for zero-downtime updates of\n   Docker-ized services and more.https://github.com/FrozenRidge/dockerfu\n   -\nThe Codeship Workflow: Deployment Pipelines and Zero Downtime\n   Deploymenthttp://blog.codeship.io/2013/08/30/the-codeship-workflow-part-3-deployment-pipelines.html... (old article)\n   -\nUsing nginx, confd, and docker for zero-downtime web updateshttp://brianketelsen.com/2014/02/25/using-nginx-confd-and-docker-for-zero-downtime-web-updates/\n   -\nZero Downtime Pushes: Say Goodbye to the Workout Robot!\n   http://blog.relateiq.com/zero-downtime-pushes-say-goodbye-to-the-workout-robot/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codegangsta/martini/issues/190#issuecomment-36512345\n.\n. \n",
    "MaKleSoft": "@Elexy You should check out Dokku\n. @Elexy You should check out Dokku\n. ",
    "phrozen": "Thank you I'll give it a try. I dunno if this will help with File upload for example as it tries to binds them into a struct and I might need to pre process them before hand, but Ill dig into it.\n. Thank you I'll give it a try. I dunno if this will help with File upload for example as it tries to binds them into a struct and I might need to pre process them before hand, but Ill dig into it.\n. ",
    "avastou": "Thanks You!\n. Thanks You!\n. ",
    "joaojeronimo": "Also tried rw := martini.NewResponseWriter(res) and then rw.Flush(), same result.\n. Sorry guys, apparently this was happening because I was using gin.\n. Also tried rw := martini.NewResponseWriter(res) and then rw.Flush(), same result.\n. Sorry guys, apparently this was happening because I was using gin.\n. ",
    "porjo": "\"Access plus 1 week\" is not a valid Expires value. The Apache web server allows you to specify a relative expires value, but that is only for configuration. What ultimately ends up going out on the wire is an absolute timestamp of the form Mon, Jan 2 2006 15:04:05 GMT\nThe Cache-Control header does allow a relative time to be specified on the wire. It would be good to include both headers, however it is recommended to keep Expires for the sake of older caching proxies.\n. \"Access plus 1 week\" is not a valid Expires value. The Apache web server allows you to specify a relative expires value, but that is only for configuration. What ultimately ends up going out on the wire is an absolute timestamp of the form Mon, Jan 2 2006 15:04:05 GMT\nThe Cache-Control header does allow a relative time to be specified on the wire. It would be good to include both headers, however it is recommended to keep Expires for the sake of older caching proxies.\n. ",
    "alehano": "Ok, thanks, guys. I'll try it. And I'll write results of my benchmark.\n. maximelamure, thanks a lot. Didn't know that.\n. Sorry, but I can't get this works.\n```\nfunc main() {\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request){\n        fmt.Fprintln(w, \"standard handler\")\n    })\n\n// martini goes under \"/api\"\nm := martini.Classic()\n\nm.Get(\"martini\", func() string {\n        return \"hello martini\"\n    })\n\nhttp.Handle(\"/api/*\", m)\n\nhttp.ListenAndServe(\":8080\", nil)\n\n}\n```\n. DisposaBoy, thank you.\n. I had some benching. And there is no difference between using martini or standard handlers. \n. Thanks!\n. Ok, thanks, guys. I'll try it. And I'll write results of my benchmark.\n. maximelamure, thanks a lot. Didn't know that.\n. Sorry, but I can't get this works.\n```\nfunc main() {\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request){\n        fmt.Fprintln(w, \"standard handler\")\n    })\n\n// martini goes under \"/api\"\nm := martini.Classic()\n\nm.Get(\"martini\", func() string {\n        return \"hello martini\"\n    })\n\nhttp.Handle(\"/api/*\", m)\n\nhttp.ListenAndServe(\":8080\", nil)\n\n}\n```\n. DisposaBoy, thank you.\n. I had some benching. And there is no difference between using martini or standard handlers. \n. Thanks!\n. ",
    "maximelamure": "Hello,\nYou can / should use httptest for your benchmark (http://golang.org/pkg/net/http/httptest/#example_ResponseRecorder)\nrecorder := httptest.NewRecorder()\nreq, err := http.NewRequest(\"GET\", \"http://127.0.0.1:8083\", nil)\n if err != nil {\n     log.Fatal(err)\n}\nb.ResetTimer()\nfor i := 0; i < b.N; i++ {\n     handler.ServeHTTP(recorder, req)\n     if recorder.Code != 200 {\n     panic(\"Oups\")\n     }\n}\n. Hello,\nYou can / should use httptest for your benchmark (http://golang.org/pkg/net/http/httptest/#example_ResponseRecorder)\nrecorder := httptest.NewRecorder()\nreq, err := http.NewRequest(\"GET\", \"http://127.0.0.1:8083\", nil)\n if err != nil {\n     log.Fatal(err)\n}\nb.ResetTimer()\nfor i := 0; i < b.N; i++ {\n     handler.ServeHTTP(recorder, req)\n     if recorder.Code != 200 {\n     panic(\"Oups\")\n     }\n}\n. ",
    "brianstarke": "I'm an idiot.  Please ignore this.\n(I spelled 'bootstrap' wrong when I named the directory)\n. I'm an idiot.  Please ignore this.\n(I spelled 'bootstrap' wrong when I named the directory)\n. ",
    "aggieben": "Ah - yep, I didn't spot that.  Thanks.\n. Ah - yep, I didn't spot that.  Thanks.\n. ",
    "gmlewis": "OK, thanks guys.  I'll close this PR for now and revisit later.\n. OK, thanks guys.  I'll close this PR for now and revisit later.\n. ",
    "ggaaooppeenngg": "Oh! i just found the code and want shamely  go back to delete the question.^^. but anyway thx!\n. Oh! i just found the code and want shamely  go back to delete the question.^^. but anyway thx!\n. ",
    "pengux": "@codegangsta Thanks, that solved the problem.\n. Yes, but that will only get you the ResponseWriter instance, which just allow to add more to the response. I'm interested in the content in the response itself, for example to cache it or log it.\n. @codegangsta Thanks, that solved the problem.\n. Yes, but that will only get you the ResponseWriter instance, which just allow to add more to the response. I'm interested in the content in the response itself, for example to cache it or log it.\n. ",
    "aaylward": "I'm also having this issue. Cool framework though!\n. I'm also having this issue. Cool framework though!\n. ",
    "pyanfield": "Thanks your work.\n. I think keep minimal on features is very important. And thanks @BurntSushi and @codegangsta solutions.\n. +1\n. Thanks your work.\n. I think keep minimal on features is very important. And thanks @BurntSushi and @codegangsta solutions.\n. +1\n. ",
    "tomsteele": "go get -u will fix this.\n. go get -u will fix this.\n. ",
    "0x6e6562": "OK, I'll give this a bash - I assume that this doesn't touch martini-contrib, just the old codegangsta path, i.e.\nReplace\ngithub.com/codegangsta/martini\nWith\ngithub.com/go-martini/martini\n?\n. Cool - that seems to have done the trick - thanks very much for the heads up.\n. For anybody searching for the cause of this, I had the same problem last week with the import path: https://github.com/go-martini/martini/issues/218.\nI thought I had solved it back then, but one of my apps still had some old cruft hanging about, but go get -u 'github.com/martini-contrib/render' solved the issue.\nContinuous integration builds are always great for flushing this kind of thing out :-)\n. OK, I'll give this a bash - I assume that this doesn't touch martini-contrib, just the old codegangsta path, i.e.\nReplace\ngithub.com/codegangsta/martini\nWith\ngithub.com/go-martini/martini\n?\n. Cool - that seems to have done the trick - thanks very much for the heads up.\n. For anybody searching for the cause of this, I had the same problem last week with the import path: https://github.com/go-martini/martini/issues/218.\nI thought I had solved it back then, but one of my apps still had some old cruft hanging about, but go get -u 'github.com/martini-contrib/render' solved the issue.\nContinuous integration builds are always great for flushing this kind of thing out :-)\n. ",
    "bscott": "@codegangsta I have\ngithub.com/go-martini/martini\nStill getting a Panic\n. Thanks, Fixed\n. No solution, must of closed by accident\n. I'm looking for a good way to test my handlers\n. @codegangsta I have\ngithub.com/go-martini/martini\nStill getting a Panic\n. Thanks, Fixed\n. No solution, must of closed by accident\n. I'm looking for a good way to test my handlers\n. ",
    "manugarri": "Still getting the \"Value not found for type martini.Context\" Error.\nIf i use plain martini everything is fine, however, when I add a martini-contrib package (tried with oauth2, session and render) I get that error. \nInteresting thing is, I get the error even when I am using plain Martini.Get method.\nAny idea why?\n. Still getting the \"Value not found for type martini.Context\" Error.\nIf i use plain martini everything is fine, however, when I add a martini-contrib package (tried with oauth2, session and render) I get that error. \nInteresting thing is, I get the error even when I am using plain Martini.Get method.\nAny idea why?\n. ",
    "captncraig": "Fair enough. Good ideas.\n. Fair enough. Good ideas.\n. ",
    "piotrkowalczuk": "I removed martini from src directory and fire go get once more. Doesnt help. It only happens with POST actions.\n. Still nothing.\n. Okay now it works after using -u flag\n. I removed martini from src directory and fire go get once more. Doesnt help. It only happens with POST actions.\n. Still nothing.\n. Okay now it works after using -u flag\n. ",
    "zishe": "Yes, thanks! I changed martini path to github.com/codegangsta/martini because it conflicts with github.com/codegangsta/martini-contrib/render.\n. Thanks! Can be closed.\n. Yes, thanks! I changed martini path to github.com/codegangsta/martini because it conflicts with github.com/codegangsta/martini-contrib/render.\n. Thanks! Can be closed.\n. ",
    "sshikaree": "Hi! Can I just use martini.ClassicMartini instead of creating myClassic?\ngo\nfunc withoutLogging() *martini.ClassicMartini {\n    r := martini.NewRouter()\n    m := martini.New()\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\n    m.MapTo(r, (*martini.Routes)(nil))\n    m.Action(r.Handle)\n    return &martini.ClassicMartini{m, r}\n}\n. Hi! Can I just use martini.ClassicMartini instead of creating myClassic?\ngo\nfunc withoutLogging() *martini.ClassicMartini {\n    r := martini.NewRouter()\n    m := martini.New()\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\n    m.MapTo(r, (*martini.Routes)(nil))\n    m.Action(r.Handle)\n    return &martini.ClassicMartini{m, r}\n}\n. ",
    "nicowernli": "Same error anyway...\n. I delete all martini dependencies and getting everything again and now is working. \nThanks!\n. Same error anyway...\n. I delete all martini dependencies and getting everything again and now is working. \nThanks!\n. ",
    "losinggeneration": "This might be a good one-off solution. IMO a better solution might be to print that whenever the environment is != production.\n-- Edit\n@mvader  I'm surprised you didn't mention pull #76 as a possible solution. Additionally, issue #63 would \"fix\" this as well.\n. You're right. I will say though, I did like that Dropwizard printed the routes upon starting (I don't recall if they do that unconditionally though.) Rails also has a utility to print all routes as well IIRC. So it's not an uncommon feature and can be quite valuable to verify your routes.\n. I can't speak for others, but perhaps a method to return an array of structs containing the method & original pattern?\n--edit\nThis is potentially unfortunate because it would have to flatten groups as well.\n. It's not integrated, but couldn't you setup the connection yourself? This is covered indirectly under the How do I integrate with existing servers? & How do I change the port/host? sections\n``` go\npackage main\nimport (\n    \"github.com/go-martini/martini\"\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", func() string {\n        return \"Hello world!\"\n    })\nlog.Fatal(http.ListenAndServeTLS(\":8443\", \"cert.pem\", \"key.pem\", m))\n\n}\n```\n. This might be a good one-off solution. IMO a better solution might be to print that whenever the environment is != production.\n-- Edit\n@mvader  I'm surprised you didn't mention pull #76 as a possible solution. Additionally, issue #63 would \"fix\" this as well.\n. You're right. I will say though, I did like that Dropwizard printed the routes upon starting (I don't recall if they do that unconditionally though.) Rails also has a utility to print all routes as well IIRC. So it's not an uncommon feature and can be quite valuable to verify your routes.\n. I can't speak for others, but perhaps a method to return an array of structs containing the method & original pattern?\n--edit\nThis is potentially unfortunate because it would have to flatten groups as well.\n. It's not integrated, but couldn't you setup the connection yourself? This is covered indirectly under the How do I integrate with existing servers? & How do I change the port/host? sections\n``` go\npackage main\nimport (\n    \"github.com/go-martini/martini\"\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", func() string {\n        return \"Hello world!\"\n    })\nlog.Fatal(http.ListenAndServeTLS(\":8443\", \"cert.pem\", \"key.pem\", m))\n\n}\n```\n. ",
    "tarrsalah": "importing  the net/http/pprof package using the blank _ identifier will trigger the init() method :\n62       func init() {\n63      http.Handle(\"/debug/pprof/\", http.HandlerFunc(Index))\n64      http.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(Cmdline))\n65      http.Handle(\"/debug/pprof/profile\", http.HandlerFunc(Profile))\n66      http.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(Symbol))\n67  }\nThis code will register a bunch of handlers in the DefaultServeMux, so side-effects of this importing doesn't effect the Martini.Router in any way.\nMaybe providing a martini-contrib module for that will be a good solution. The module should declare an init() function to do the same handlers registration stuff.\n. @codegangsta  I can take care of it , how can I add it to martini-contrib repo - N00p question :) - ?\n. @codegangsta 18 lines of code, just binding the net/http/pprof handlers to martini router, worth a repository ? \n. oh .. sorry, I forget to mention the link to the code.\n. @rcshubhadeep  It's been so long since I have read or written any martini related code , so honestly I have no idea what's going on in the martini community, sorry! \n. Oh yeah,  @rustyrazorblade \nSorry, I deleted the code while ago, I believe that it is totally obsolete, take a look at this  code, may help you.\n.   :+1: \n. importing  the net/http/pprof package using the blank _ identifier will trigger the init() method :\n62       func init() {\n63      http.Handle(\"/debug/pprof/\", http.HandlerFunc(Index))\n64      http.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(Cmdline))\n65      http.Handle(\"/debug/pprof/profile\", http.HandlerFunc(Profile))\n66      http.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(Symbol))\n67  }\nThis code will register a bunch of handlers in the DefaultServeMux, so side-effects of this importing doesn't effect the Martini.Router in any way.\nMaybe providing a martini-contrib module for that will be a good solution. The module should declare an init() function to do the same handlers registration stuff.\n. @codegangsta  I can take care of it , how can I add it to martini-contrib repo - N00p question :) - ?\n. @codegangsta 18 lines of code, just binding the net/http/pprof handlers to martini router, worth a repository ? \n. oh .. sorry, I forget to mention the link to the code.\n. @rcshubhadeep  It's been so long since I have read or written any martini related code , so honestly I have no idea what's going on in the martini community, sorry! \n. Oh yeah,  @rustyrazorblade \nSorry, I deleted the code while ago, I believe that it is totally obsolete, take a look at this  code, may help you.\n.   :+1: \n. ",
    "yinghau76": "It is better to use Any because go pprof may POST to these endpoints:\nm.Group(\"/debug/pprof\", func(r martini.Router) {\n        r.Any(\"/\", pprof.Index)\n        r.Any(\"/cmdline\", pprof.Cmdline)\n        r.Any(\"/profile\", pprof.Profile)\n        r.Any(\"/symbol\", pprof.Symbol)\n        r.Any(\"/block\", pprof.Handler(\"block\").ServeHTTP)\n        r.Any(\"/heap\", pprof.Handler(\"heap\").ServeHTTP)\n        r.Any(\"/goroutine\", pprof.Handler(\"goroutine\").ServeHTTP)\n        r.Any(\"/threadcreate\", pprof.Handler(\"threadcreate\").ServeHTTP)\n    })\n. It is better to use Any because go pprof may POST to these endpoints:\nm.Group(\"/debug/pprof\", func(r martini.Router) {\n        r.Any(\"/\", pprof.Index)\n        r.Any(\"/cmdline\", pprof.Cmdline)\n        r.Any(\"/profile\", pprof.Profile)\n        r.Any(\"/symbol\", pprof.Symbol)\n        r.Any(\"/block\", pprof.Handler(\"block\").ServeHTTP)\n        r.Any(\"/heap\", pprof.Handler(\"heap\").ServeHTTP)\n        r.Any(\"/goroutine\", pprof.Handler(\"goroutine\").ServeHTTP)\n        r.Any(\"/threadcreate\", pprof.Handler(\"threadcreate\").ServeHTTP)\n    })\n. ",
    "rcshubhadeep": "@tarrsalah  The code link you given is no longer working. I really need this to figure out what is happening with my set up as I can not get it working. I am using martini classic and m.Run()\nAlso, I was wondering if the results are similar of manual profiling... I really need to know which function is killing the web service. My web service takes too long time. \n. Hi,\nSorry, I think it was a mis communication from my side what I waned to mean is that the link gives me 404 error. So it will be really great to see the code once if possible. Rest I can check myself.\nPlease let me know\n. @tarrsalah  The code link you given is no longer working. I really need this to figure out what is happening with my set up as I can not get it working. I am using martini classic and m.Run()\nAlso, I was wondering if the results are similar of manual profiling... I really need to know which function is killing the web service. My web service takes too long time. \n. Hi,\nSorry, I think it was a mis communication from my side what I waned to mean is that the link gives me 404 error. So it will be really great to see the code once if possible. Rest I can check myself.\nPlease let me know\n. ",
    "DavidVaini": "The code is deleted, I took at look at that link of code and it doesnt run, anyone have the original code snippet? Otherwise this is still an issue for me.\n. The code is deleted, I took at look at that link of code and it doesnt run, anyone have the original code snippet? Otherwise this is still an issue for me.\n. ",
    "sevkin": "I already doubt the correctness of my decision, but i need way for single NotFound handler.. some like\nm.Get(\"/:page\", func(r martini.Router...) {\n    r.PassNotFound()\n. Sure. Method is an explicit solution. \n. @mvader its my first da.. reopening\n. @mvader #246 is a new #229 sorry\n. Now we will have a 2 handlers: NotFound and ReallyNotFound :) I again think that my PR is properly solution =)\n. just rename NotFound to NotHandled ?\n.m.NotFound(func() {})send nothing if really need empty\n. @mvader too hard.. git say me something about non-fast-forward\n. @sgp Im think is not a problem. application may explicit return 204\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", func(rw http.ResponseWriter) {\n        // do something without content\n        rw.WriteHeader(204)\n    })\n    m.Run()\n}\nas expected 204 without content\n$ curl -i http://localhost:3000/\nHTTP/1.1 204 No Content\nDate: Fri, 25 Apr 2014 16:26:45 GMT\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n. m.Get(\"/\", func(req *http.Request) string {\n    req.RequestURI == \"/rewrite\" // in my sample\nit is also a \"right\" as return 200 without content ;)\ni need internal rewrite, not 301, 302. where i can put my middleware code? (before route matched)\n. I already doubt the correctness of my decision, but i need way for single NotFound handler.. some like\nm.Get(\"/:page\", func(r martini.Router...) {\n    r.PassNotFound()\n. Sure. Method is an explicit solution. \n. @mvader its my first da.. reopening\n. @mvader #246 is a new #229 sorry\n. Now we will have a 2 handlers: NotFound and ReallyNotFound :) I again think that my PR is properly solution =)\n. just rename NotFound to NotHandled ?\n.m.NotFound(func() {})send nothing if really need empty\n. @mvader too hard.. git say me something about non-fast-forward\n. @sgp Im think is not a problem. application may explicit return 204\nfunc main() {\n    m := martini.Classic()\n    m.Get(\"/\", func(rw http.ResponseWriter) {\n        // do something without content\n        rw.WriteHeader(204)\n    })\n    m.Run()\n}\nas expected 204 without content\n$ curl -i http://localhost:3000/\nHTTP/1.1 204 No Content\nDate: Fri, 25 Apr 2014 16:26:45 GMT\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n. m.Get(\"/\", func(req *http.Request) string {\n    req.RequestURI == \"/rewrite\" // in my sample\nit is also a \"right\" as return 200 without content ;)\ni need internal rewrite, not 301, 302. where i can put my middleware code? (before route matched)\n. ",
    "tamasd": "@baldrailers This is not what I would like to have. That module redirects to a secure proxy, what I want is to use the ssl support built-in to Go's webserver implementation. I currently use it by manually starting the webserver, but I think it would be much nicer to have this functionality in Martini.\n. @baldrailers This is not what I would like to have. That module redirects to a secure proxy, what I want is to use the ssl support built-in to Go's webserver implementation. I currently use it by manually starting the webserver, but I think it would be much nicer to have this functionality in Martini.\n. ",
    "BryceDFisher": "I understand that the additional logging could be bolted on afterwards.  I just wonder what instance a system administrator wouldn't be interested in which machines were connecting to the system.\n.  I understand that the additional logging could be bolted on afterwards.  I just wonder what instance a system administrator wouldn't be interested in which machines were connecting to the system.\n. ",
    "jeroenbourgois": "Tnx for your time and effort! @mvader \n. Tnx for your time and effort! @mvader \n. ",
    "mattkanwisher": "@codegangsta totally disagree with you, log levels don't always goto separate files, and it provides no common interface across the entire application to do correct logging. I've not seen any logging package in any other language not have levels\n. @codegangsta totally disagree with you, log levels don't always goto separate files, and it provides no common interface across the entire application to do correct logging. I've not seen any logging package in any other language not have levels\n. ",
    "sgp": "This is true; although this needs to be documented as a necessary change to existing code. We had many cases in our code where we used the default behavior (i.e. nothing written == 200 OK).\n. I think that this kind of change would be better suited by having an explicit method call or return value that can grant this sort of behavior. Returning 200 OK by default (i.e. assuming handled, not \"not found\") is better default behavior IMHO.\n. No problem. We've been enjoying Martini here. :)\n. This is true; although this needs to be documented as a necessary change to existing code. We had many cases in our code where we used the default behavior (i.e. nothing written == 200 OK).\n. I think that this kind of change would be better suited by having an explicit method call or return value that can grant this sort of behavior. Returning 200 OK by default (i.e. assuming handled, not \"not found\") is better default behavior IMHO.\n. No problem. We've been enjoying Martini here. :)\n. ",
    "unrolled": "I believe this isn't the ideal approach for dealing with X-Real-IP and X-Forwarded-For addresses. I think this should be an opt in setting. \nIf I run a Martini server without a proxy, someone could spoof their IP address. Even if I had nginx in front, but only specified proxy_set_header X-Forwarded-For $remote_addr;, a user could send a bad IP.\n``` bash\nRun a local Martini server.\nRun this command:\ncurl localhost:3000\nLog output > Started GET / for [::1]:58038\nNow run this command:\ncurl localhost:3000 --header X-Real-IP:8.7.6.5\nLog output > [martini] Started GET / for 8.7.6.5\n```\nThis isn't a huge issue, but I think it needs to be addressed a bit differently. Thoughts?\n. I'm going to add an example to the secure contrib package which details redirecting http to https. But I think this should be part of the main readme... would something like this work:\n``` go\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.New()\n    m.Use(martini.Logger())\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\nr := martini.NewRouter()\nm.MapTo(r, (*martini.Routes)(nil))\nm.Action(r.Handle)\n\nr.Get(\"/\", func() string {\n    return \"Hello world!\"\n})\n\n// HTTP\ngo func() {\n    if err := http.ListenAndServe(\":8080\", m); err != nil {\n        log.Fatal(err)\n    }\n}()\n\n// HTTPS\n// To generate a development cert and key, run the following from your *nix terminal:\n// go run $GOROOT/src/pkg/crypto/tls/generate_cert.go --host=\"localhost\"\nif err := http.ListenAndServeTLS(\":8443\", \"cert.pem\", \"key.pem\", m); err != nil {\n    log.Fatal(err)\n}\n\n}\n```\n. See the secure README.md for the http -> https documentation.\n. I suspect that you need to rebuilding / rerunning your code as Go does not live update. If you looking for live code reloading see here.\nI pasted exactly what you have there, returned 404 as expected:\n$ curl -v http://localhost:3000/foo\n...\n< HTTP/1.1 404 Not Found\n...\nNot found\n. Hmm, you raise a good point. But I don't think this should be a bug in martini, it should probably be reported as an issue in Go.\n. @rjeczalik thanks for point this out! \n@Unknwon Can you create a pull request with this change?\n. @Unknwon I'm thinking filepath.IsAbs would be the cleanest solution.\n. I believe this isn't the ideal approach for dealing with X-Real-IP and X-Forwarded-For addresses. I think this should be an opt in setting. \nIf I run a Martini server without a proxy, someone could spoof their IP address. Even if I had nginx in front, but only specified proxy_set_header X-Forwarded-For $remote_addr;, a user could send a bad IP.\n``` bash\nRun a local Martini server.\nRun this command:\ncurl localhost:3000\nLog output > Started GET / for [::1]:58038\nNow run this command:\ncurl localhost:3000 --header X-Real-IP:8.7.6.5\nLog output > [martini] Started GET / for 8.7.6.5\n```\nThis isn't a huge issue, but I think it needs to be addressed a bit differently. Thoughts?\n. I'm going to add an example to the secure contrib package which details redirecting http to https. But I think this should be part of the main readme... would something like this work:\n``` go\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.New()\n    m.Use(martini.Logger())\n    m.Use(martini.Recovery())\n    m.Use(martini.Static(\"public\"))\nr := martini.NewRouter()\nm.MapTo(r, (*martini.Routes)(nil))\nm.Action(r.Handle)\n\nr.Get(\"/\", func() string {\n    return \"Hello world!\"\n})\n\n// HTTP\ngo func() {\n    if err := http.ListenAndServe(\":8080\", m); err != nil {\n        log.Fatal(err)\n    }\n}()\n\n// HTTPS\n// To generate a development cert and key, run the following from your *nix terminal:\n// go run $GOROOT/src/pkg/crypto/tls/generate_cert.go --host=\"localhost\"\nif err := http.ListenAndServeTLS(\":8443\", \"cert.pem\", \"key.pem\", m); err != nil {\n    log.Fatal(err)\n}\n\n}\n```\n. See the secure README.md for the http -> https documentation.\n. I suspect that you need to rebuilding / rerunning your code as Go does not live update. If you looking for live code reloading see here.\nI pasted exactly what you have there, returned 404 as expected:\n$ curl -v http://localhost:3000/foo\n...\n< HTTP/1.1 404 Not Found\n...\nNot found\n. Hmm, you raise a good point. But I don't think this should be a bug in martini, it should probably be reported as an issue in Go.\n. @rjeczalik thanks for point this out! \n@Unknwon Can you create a pull request with this change?\n. @Unknwon I'm thinking filepath.IsAbs would be the cleanest solution.\n. ",
    "ben-joostens": "Still encountering this issue, even with the suggested solution.\n$go version\ngo version go1.3.1 linux/amd64\n. Alright, starting over fixed it. Thanks for the suggestion.\n. Still encountering this issue, even with the suggested solution.\n$go version\ngo version go1.3.1 linux/amd64\n. Alright, starting over fixed it. Thanks for the suggestion.\n. ",
    "hsdk123": "Just my 2 cents, but as someone who's been used to AngularJS for quite some time now, dependency injection's the main feature that lured me into Martini. \n. Just my 2 cents, but as someone who's been used to AngularJS for quite some time now, dependency injection's the main feature that lured me into Martini. \n. ",
    "viniciusfeitosa": "I translated the regular expressions now\n. I translated the regular expressions now\n. ",
    "dfilipovic39": "Ok, agree. Just a suggestion. If the Martini philosophy is to stay minimal\nand lightweight then it makes sense.\nOn Sun, May 4, 2014 at 11:09 PM, Jeremy Saenz notifications@github.comwrote:\n\nThere is no reason for it really. The Run() method is simply a convenience\nand http.ListenAndServeTLS is totally compatible with Martini. Perhaps we\ncould have better documentation surrounding the use of it. Otherwise I\ndon't think we can offer enough wins to justify adding another method to\nMartini\nOn Sun, May 4, 2014 at 2:06 PM, tarqe39 notifications@github.com wrote:\n\nHi!\nWas wondering would it be a problem to add SSL support. As far as i can\nsee, the only change would be a new Run method on Martini struct that\nwould\ncall ListenAndServeTLS on http.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/258>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/258#issuecomment-42145104\n.\n. Ok, agree. Just a suggestion. If the Martini philosophy is to stay minimal\nand lightweight then it makes sense.\n\nOn Sun, May 4, 2014 at 11:09 PM, Jeremy Saenz notifications@github.comwrote:\n\nThere is no reason for it really. The Run() method is simply a convenience\nand http.ListenAndServeTLS is totally compatible with Martini. Perhaps we\ncould have better documentation surrounding the use of it. Otherwise I\ndon't think we can offer enough wins to justify adding another method to\nMartini\nOn Sun, May 4, 2014 at 2:06 PM, tarqe39 notifications@github.com wrote:\n\nHi!\nWas wondering would it be a problem to add SSL support. As far as i can\nsee, the only change would be a new Run method on Martini struct that\nwould\ncall ListenAndServeTLS on http.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/258>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/258#issuecomment-42145104\n.\n. \n",
    "rexk": "Updated outdated translation and README\n. Updated outdated translation and README\n. ",
    "yosssi": "You're welcome!\n. @codegangsta All right, I will try to create a new package. If I finish it, I will let you know that on this issue. Thanks!\n. @codegangsta Hi, I created a Martini middleware/handler named StaticBin, which serves static files from binary data.\nI would be glad if you could add this package on martini-contrib packages.\nThanks.\n. You're welcome!\n. @codegangsta All right, I will try to create a new package. If I finish it, I will let you know that on this issue. Thanks!\n. @codegangsta Hi, I created a Martini middleware/handler named StaticBin, which serves static files from binary data.\nI would be glad if you could add this package on martini-contrib packages.\nThanks.\n. ",
    "genedna": "Yeah, it's my mistaken. I fixed the https://gist.github.com/genedna/33892bbf4c9f7d8cba45/revisions.\nThanks.\n. Yeah, it's my mistaken. I fixed the https://gist.github.com/genedna/33892bbf4c9f7d8cba45/revisions.\nThanks.\n. ",
    "jonathaningram": "@mohamedattahri is there any reason to make port an int? The stdlib seems to use strings because generally the port is attached to a host, so I think it's more convenient to just use a string.\n. @mohamedattahri is there any reason to make port an int? The stdlib seems to use strings because generally the port is attached to a host, so I think it's more convenient to just use a string.\n. ",
    "mohamedattahri": "You\u2019re right about the standard library. However, since port numbers are by design limited by the max size of int, I figured it would make things easier to validate the value before passing it to ListenAndServe.\nOn Tuesday 20 May 2014 at 01:50, Jonathan Ingram wrote:\n\n@mohamedattahri (https://github.com/mohamedattahri) is there any reason to make port an int? The stdlib seems to use strings because generally the port is attached to a host, so I think it's more convenient to just use a string.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/go-martini/martini/pull/265#issuecomment-43575581).\n. Closed and moved to https://github.com/go-martini/martini/pull/295.\n. You\u2019re right about the standard library. However, since port numbers are by design limited by the max size of int, I figured it would make things easier to validate the value before passing it to ListenAndServe.\n\nOn Tuesday 20 May 2014 at 01:50, Jonathan Ingram wrote:\n\n@mohamedattahri (https://github.com/mohamedattahri) is there any reason to make port an int? The stdlib seems to use strings because generally the port is attached to a host, so I think it's more convenient to just use a string.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/go-martini/martini/pull/265#issuecomment-43575581).\n. Closed and moved to https://github.com/go-martini/martini/pull/295.\n. \n",
    "kristian-puccio": "I wrote a version of recovery that allows you to push recovery functions\nonto an array.\nThey get executed in order whenever a panic happens.\nI use it to send an email of a stack trace and to write some extra logs.\nI'm sure there's lots of uses for it though.\nI'm happy to share it but I haven't got the time at the moment to add tests\nor make it tidy.\nKristian\nOn 16 May 2014 02:55, Jeremy Saenz notifications@github.com wrote:\n\nThe included martini middlewares are supposed to be useful for most cases,\nbut not necessarily extendable. The extendibility of martini is in adding\nnew or replacing the existing middleware using the m.Handlers function\nOn Thu, May 15, 2014 at 9:47 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nI don't think there's a better way to do this right now.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/266#issuecomment-43235028>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/266#issuecomment-43235994\n.\n. I wrote a version of recovery that allows you to push recovery functions\nonto an array.\n\nThey get executed in order whenever a panic happens.\nI use it to send an email of a stack trace and to write some extra logs.\nI'm sure there's lots of uses for it though.\nI'm happy to share it but I haven't got the time at the moment to add tests\nor make it tidy.\nKristian\nOn 16 May 2014 02:55, Jeremy Saenz notifications@github.com wrote:\n\nThe included martini middlewares are supposed to be useful for most cases,\nbut not necessarily extendable. The extendibility of martini is in adding\nnew or replacing the existing middleware using the m.Handlers function\nOn Thu, May 15, 2014 at 9:47 AM, Jos\u00e9 Miguel Molina \nnotifications@github.com wrote:\n\nI don't think there's a better way to do this right now.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/go-martini/martini/issues/266#issuecomment-43235028>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/go-martini/martini/issues/266#issuecomment-43235994\n.\n. \n",
    "mickelsonm": "@codegangsta @yvasiyarov : Would it be possible to move/add this middleware to http://github.com/martini-contrib ? We were playing around with this today and we absolutely love it! Thanks.\n. @yvasiyarov @codegangsta : Thanks. Definitely looking forward to this middleware!\n. @yvasiyarov : Keep me posted on when you get a chance to upload your code to the new repository. Thanks!\n. @codegangsta @yvasiyarov : Would it be possible to move/add this middleware to http://github.com/martini-contrib ? We were playing around with this today and we absolutely love it! Thanks.\n. @yvasiyarov @codegangsta : Thanks. Definitely looking forward to this middleware!\n. @yvasiyarov : Keep me posted on when you get a chance to upload your code to the new repository. Thanks!\n. ",
    "yvasiyarov": "@mickelsonm I would love to do it.\n@codegangsta is it ok for you ?\n. @codegangsta \nI've just tried to do it, but I get error \"You don't have admin rights to martini-contrib\"\n. @codegangsta  thank you, guys!\n. @mickelsonm  sorry for delay, its done!\n. @mickelsonm I would love to do it.\n@codegangsta is it ok for you ?\n. @codegangsta \nI've just tried to do it, but I get error \"You don't have admin rights to martini-contrib\"\n. @codegangsta  thank you, guys!\n. @mickelsonm  sorry for delay, its done!\n. ",
    "omeid": "Scratch this. You just simply use the equivalent of those ASCII classes with the basic Regex syntax.\n. Scratch this. You just simply use the equivalent of those ASCII classes with the basic Regex syntax.\n. ",
    "takashi": "upps, sorry, I had mistaken about commit squashing. will send another PR\n. thanks :) \n. upps, sorry, I had mistaken about commit squashing. will send another PR\n. thanks :) \n. ",
    "SeanCai": "\u53d1\u81ea\u6211\u7684\u5c0f\u7c73\u624b\u673a\nJeremy Saenz notifications@github.com\u7f16\u5199\uff1a\n\nMerged #273.\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. \u53d1\u81ea\u6211\u7684\u5c0f\u7c73\u624b\u673a\n\nJeremy Saenz notifications@github.com\u7f16\u5199\uff1a\n\nMerged #273.\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. \n",
    "dkulchenko": "I updated from a two month old version of Martini to master today, and the static middleware doesn't work at all anymore, likely caused by this change.\ndaniilk:~ \u221e curl http://localhost:3000/test.js\n404 page not found\ndaniilk:~ \u221e curl http://localhost:3000/public/test.js\n404 page not found\ndaniilk:~ \u221e\nHere's the source:\n``` go\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n    m.Run()\n}\n```\nand my directory listing:\n```\ndaniilk:~/testcase \u221e ls -lR\ntotal 8\ndrwxr-xr-x  3 daniilk  staff  102 Jun 27 18:02 public\n-rw-r--r--  1 daniilk  staff  136 Jun 27 18:04 server.go\n./public:\ntotal 8\n-rw-r--r--  1 daniilk  staff  16 Jun 27 18:02 test.js\ndaniilk:~/testcase \u221e\n```\nI'm running it via \"go run server.go\".\nThis PR uses os.Args[0], which is basically wrong when run with 'go run':\ndaniilk:~ \u221e go run test.go\n/var/folders/x4/931hvyfj3ml12vcrrvs5xhsm0000gn/T/go-build887935557/command-line-arguments/_obj/exe/test\ndaniilk:~ \u221e\n. Closing this in favor of a comment on PR #273: https://github.com/go-martini/martini/pull/273#issuecomment-47414374\n. I updated from a two month old version of Martini to master today, and the static middleware doesn't work at all anymore, likely caused by this change.\ndaniilk:~ \u221e curl http://localhost:3000/test.js\n404 page not found\ndaniilk:~ \u221e curl http://localhost:3000/public/test.js\n404 page not found\ndaniilk:~ \u221e\nHere's the source:\n``` go\npackage main\nimport \"github.com/go-martini/martini\"\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n    m.Run()\n}\n```\nand my directory listing:\n```\ndaniilk:~/testcase \u221e ls -lR\ntotal 8\ndrwxr-xr-x  3 daniilk  staff  102 Jun 27 18:02 public\n-rw-r--r--  1 daniilk  staff  136 Jun 27 18:04 server.go\n./public:\ntotal 8\n-rw-r--r--  1 daniilk  staff  16 Jun 27 18:02 test.js\ndaniilk:~/testcase \u221e\n```\nI'm running it via \"go run server.go\".\nThis PR uses os.Args[0], which is basically wrong when run with 'go run':\ndaniilk:~ \u221e go run test.go\n/var/folders/x4/931hvyfj3ml12vcrrvs5xhsm0000gn/T/go-build887935557/command-line-arguments/_obj/exe/test\ndaniilk:~ \u221e\n. Closing this in favor of a comment on PR #273: https://github.com/go-martini/martini/pull/273#issuecomment-47414374\n. ",
    "liu-xiao-guo": "I did the same testing today, but I always get:\n404 page not found\nWhat is exactly the problem? I have created the directory:\nliuxg@liuxg:~/snappy/server$ tree -L 2\n.\n\u251c\u2500\u2500 pkg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 linux_amd64\n\u251c\u2500\u2500 public\n\u251c\u2500\u2500 server.go\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 github.com\n. Has anyone got this working? I am still having problem with the static middleware. My server is like\npackage main\nimport (\n      \"github.com/go-martini/martini\"\n      \"net/http\"\n      \"log\"\n      )\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n```\nm.Get(\"/\", func() string {\nreturn \"Hello world!\"\n})\nif err := http.ListenAndServe(\":8001\", m); err != nil {\n    log.Fatal(err)\n}  \nm.Run()\n```\n}\n. It seem that it is broken again. I just cannot make it work. I get the same problem.\n. I did the same testing today, but I always get:\n404 page not found\nWhat is exactly the problem? I have created the directory:\nliuxg@liuxg:~/snappy/server$ tree -L 2\n.\n\u251c\u2500\u2500 pkg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 linux_amd64\n\u251c\u2500\u2500 public\n\u251c\u2500\u2500 server.go\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 github.com\n. Has anyone got this working? I am still having problem with the static middleware. My server is like\npackage main\nimport (\n      \"github.com/go-martini/martini\"\n      \"net/http\"\n      \"log\"\n      )\nfunc main() {\n    m := martini.Classic()\n    m.Use(martini.Static(\"public\"))\n```\nm.Get(\"/\", func() string {\nreturn \"Hello world!\"\n})\nif err := http.ListenAndServe(\":8001\", m); err != nil {\n    log.Fatal(err)\n}  \nm.Run()\n```\n}\n. It seem that it is broken again. I just cannot make it work. I get the same problem.\n. ",
    "brokenpeace": ":+1: Works perfect!\n. Why not?\n. :+1: Works perfect!\n. Why not?\n. ",
    "rubenfonseca": "Thanks, it should be something with my setup then. It was not related to rebuild/rerunning, but it can be an old version lying around my system.\n. Thanks, it should be something with my setup then. It was not related to rebuild/rerunning, but it can be an old version lying around my system.\n. ",
    "dougbarrett": "What if the environment is development you use os.Getwd() and if the environment is production you use the path, err := filepath.Abs(os.Args[0])? Was that how it worked previously?\n. What if the environment is development you use os.Getwd() and if the environment is production you use the path, err := filepath.Abs(os.Args[0])? Was that how it worked previously?\n. ",
    "Unknwon": "Anyway, I made the fix by follows:\nif runtime.GOOS == \"windows\" {\n        if len(directory) < 2 || directory[1] != ':' {\n            directory = path.Join(setting.StaticRootPath, directory)\n        }\n    } else if !path.IsAbs(directory) {\n        directory = path.Join(setting.StaticRootPath, directory)\n    }\n. @unrolled PR which change? My solution or the filepath.IsAbs one?\n. PRed, please review.\n. Anyway, I made the fix by follows:\nif runtime.GOOS == \"windows\" {\n        if len(directory) < 2 || directory[1] != ':' {\n            directory = path.Join(setting.StaticRootPath, directory)\n        }\n    } else if !path.IsAbs(directory) {\n        directory = path.Join(setting.StaticRootPath, directory)\n    }\n. @unrolled PR which change? My solution or the filepath.IsAbs one?\n. PRed, please review.\n. ",
    "rjeczalik": "The path package is by design for use with Unix-like paths. To have it os-independent, use path/filepath, particularly filepath.Abs.\n. The path package is by design for use with Unix-like paths. To have it os-independent, use path/filepath, particularly filepath.Abs.\n. ",
    "MatejLach": "I'll guess this follows a Rails convention.\n. I'll guess this follows a Rails convention.\n. ",
    "V0idExp": "on unix sistems port 80 requires superuser privileges, I think that's why a port >1024 is chosen by default\n. on unix sistems port 80 requires superuser privileges, I think that's why a port >1024 is chosen by default\n. ",
    "zhaoweiguo": "Is anybody want to use martini as the web server without nginx things\n. Actually i just want go do the frontend thing\nnever mind, i just change myself\n. Is anybody want to use martini as the web server without nginx things\n. Actually i just want go do the frontend thing\nnever mind, i just change myself\n. ",
    "No1zzz": "1.Later,you will need nginx as frontend.\n2.go is backend,basically\nOn Thu, Jul 10, 2014 at 5:02 PM, zhaoweiguo notifications@github.com\nwrote:\n\nIs anybody want to use martini as the web server without nginx things\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/287#issuecomment-48600827.\n. I think you can't do anything like \"upstream\" in nginx.\n\nOn Thu, Jul 10, 2014 at 5:02 PM, zhaoweiguo notifications@github.com\nwrote:\n\nIs anybody want to use martini as the web server without nginx things\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/287#issuecomment-48600827.\n. 1.Later,you will need nginx as frontend.\n2.go is backend,basically\n\nOn Thu, Jul 10, 2014 at 5:02 PM, zhaoweiguo notifications@github.com\nwrote:\n\nIs anybody want to use martini as the web server without nginx things\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/287#issuecomment-48600827.\n. I think you can't do anything like \"upstream\" in nginx.\n\nOn Thu, Jul 10, 2014 at 5:02 PM, zhaoweiguo notifications@github.com\nwrote:\n\nIs anybody want to use martini as the web server without nginx things\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-martini/martini/issues/287#issuecomment-48600827.\n. \n",
    "chinmaymk": "Ah, I guess this wouldn't work then\ngo\nm.Get(\"/\", func() (int, string) {\n  return 418, \"i'm a teapot\" // HTTP 418 : \"i'm a teapot\"\n})\nAny other way of handling this situation ?\n. Ah, I guess this wouldn't work then\ngo\nm.Get(\"/\", func() (int, string) {\n  return 418, \"i'm a teapot\" // HTTP 418 : \"i'm a teapot\"\n})\nAny other way of handling this situation ?\n. ",
    "jiumx60rus": "Errors in the text\n. Errors in the text\n. ",
    "masom": "Dynamic route handling per-context would be awesome! ( like mounting /admin only if the session is flagged as such )\n. Dynamic route handling per-context would be awesome! ( like mounting /admin only if the session is flagged as such )\n. ",
    "leeor": "Sure. Will do it in a couple of days when I have some time.\n. Done, please have a look.\n. Sure. Will do it in a couple of days when I have some time.\n. Done, please have a look.\n. ",
    "yuyabee": "@mvader Thanks for your response :smile:\nI'll write a middleware for shared value as soon as possible. \n. @mvader Thanks for your response :smile:\nI'll write a middleware for shared value as soon as possible. \n. ",
    "rmpacheco": "I've created a pull request (#310) that I think addresses this issue, but I am new to Go and so I suspect it may need to be vetted carefully for any newbie mistakes. \n. I've created a pull request (#310) that I think addresses this issue, but I am new to Go and so I suspect it may need to be vetted carefully for any newbie mistakes. \n. ",
    "ssoroka-se": "check out https://github.com/icub3d/graceful\n. It's been working well for me. I'd suggest mentioning it in the readme.\n. check out https://github.com/icub3d/graceful\n. It's been working well for me. I'd suggest mentioning it in the readme.\n. ",
    "williambao": "@mvader thanks:)\n. @mvader thanks:)\n. ",
    "cxr29": "Add tests.\nslash.go file is the middleware to take care of last slash, if not want, i will remove it.\n. I think so. if you confirm, I will delete slash.go and slash_test.go and pull a request to martini-contrib.\n. Add tests.\nslash.go file is the middleware to take care of last slash, if not want, i will remove it.\n. I think so. if you confirm, I will delete slash.go and slash_test.go and pull a request to martini-contrib.\n. ",
    "owickstrom": "Something like https://github.com/op/go-logging would be very nice!\n. Something like https://github.com/op/go-logging would be very nice!\n. ",
    "brknstrngz": "I wrote my custom logging middleware, like this:\nIn the routing section:\n``` go\n    // instantiate Martini\n    Martini := martini.New()\n// instantiate the syslog logger\nlog, err := syslog.New(apilogger.Facilities[configuration.Logger.Facility], \"API\")\nif err != nil {\n    panic(err.Error())\n}\n// map it to the logger type used by handlers\nMartini.Map(log)\n\n// use our own logging middleware\nMartini.Use(apilogger.Logger())\n\n```\nThen, the logger itself:\n``` go\npackage apilogger\nimport (\n    \"fmt\"\n    \"github.com/go-martini/martini\"\n    \"log/syslog\"\n    \"net/http\"\n    \"strings\"\n    \"time\"\n)\nvar Facilities map[string]syslog.Priority\nfunc init() {\n    Facilities = map[string]syslog.Priority{\n        \"LOG_KERN\":     syslog.LOG_KERN,\n        \"LOG_USER\":     syslog.LOG_USER,\n        \"LOG_MAIL\":     syslog.LOG_MAIL,\n        \"LOG_DAEMON\":   syslog.LOG_DAEMON,\n        \"LOG_AUTH\":     syslog.LOG_AUTH,\n        \"LOG_SYSLOG\":   syslog.LOG_SYSLOG,\n        \"LOG_LPR\":      syslog.LOG_LPR,\n        \"LOG_NEWS\":     syslog.LOG_NEWS,\n        \"LOG_UUCP\":     syslog.LOG_UUCP,\n        \"LOG_CRON\":     syslog.LOG_CRON,\n        \"LOG_AUTHPRIV\": syslog.LOG_AUTHPRIV,\n        \"LOG_FTP\":      syslog.LOG_FTP,\n        \"LOG_LOCAL0\":   syslog.LOG_LOCAL0,\n        \"LOG_LOCAL1\":   syslog.LOG_LOCAL1,\n        \"LOG_LOCAL2\":   syslog.LOG_LOCAL2,\n        \"LOG_LOCAL3\":   syslog.LOG_LOCAL3,\n        \"LOG_LOCAL4\":   syslog.LOG_LOCAL4,\n        \"LOG_LOCAL5\":   syslog.LOG_LOCAL5,\n        \"LOG_LOCAL6\":   syslog.LOG_LOCAL6,\n        \"LOG_LOCAL7\":   syslog.LOG_LOCAL7,\n    }\n}\n// returns a middleware handler that logs requests and their response times\nfunc Logger() martini.Handler {\n    return func(res http.ResponseWriter, req http.Request, c martini.Context, log syslog.Writer) {\n        addr := req.Header.Get(\"X-Real-IP\")\n        if addr == \"\" {\n            addr = req.Header.Get(\"X-Forwarded-For\")\n            if addr == \"\" {\n                addr = strings.Split(req.RemoteAddr, \":\")[0]\n            }\n        }\n    start := time.Now()\n    rw := res.(martini.ResponseWriter)\n    c.Next()\n    log.Debug(fmt.Sprintf(\"%s - %s %d \\\"%s %s\\\" %s\", addr, time.Now().UTC().String(), rw.Status(), req.Method, req.URL.Path, time.Since(start)))\n}\n\n}\n```\nSo my API only locks on a facility, after which I can just call log.Debug/Info/Warning/Err/Notice/etc.\n. Replying to myself here. It seems that as long as the handler takes a martini.Params, a http.ResponseWriter and a *http.Request and returns void, the above is possible.\n. I wrote my custom logging middleware, like this:\nIn the routing section:\n``` go\n    // instantiate Martini\n    Martini := martini.New()\n// instantiate the syslog logger\nlog, err := syslog.New(apilogger.Facilities[configuration.Logger.Facility], \"API\")\nif err != nil {\n    panic(err.Error())\n}\n// map it to the logger type used by handlers\nMartini.Map(log)\n\n// use our own logging middleware\nMartini.Use(apilogger.Logger())\n\n```\nThen, the logger itself:\n``` go\npackage apilogger\nimport (\n    \"fmt\"\n    \"github.com/go-martini/martini\"\n    \"log/syslog\"\n    \"net/http\"\n    \"strings\"\n    \"time\"\n)\nvar Facilities map[string]syslog.Priority\nfunc init() {\n    Facilities = map[string]syslog.Priority{\n        \"LOG_KERN\":     syslog.LOG_KERN,\n        \"LOG_USER\":     syslog.LOG_USER,\n        \"LOG_MAIL\":     syslog.LOG_MAIL,\n        \"LOG_DAEMON\":   syslog.LOG_DAEMON,\n        \"LOG_AUTH\":     syslog.LOG_AUTH,\n        \"LOG_SYSLOG\":   syslog.LOG_SYSLOG,\n        \"LOG_LPR\":      syslog.LOG_LPR,\n        \"LOG_NEWS\":     syslog.LOG_NEWS,\n        \"LOG_UUCP\":     syslog.LOG_UUCP,\n        \"LOG_CRON\":     syslog.LOG_CRON,\n        \"LOG_AUTHPRIV\": syslog.LOG_AUTHPRIV,\n        \"LOG_FTP\":      syslog.LOG_FTP,\n        \"LOG_LOCAL0\":   syslog.LOG_LOCAL0,\n        \"LOG_LOCAL1\":   syslog.LOG_LOCAL1,\n        \"LOG_LOCAL2\":   syslog.LOG_LOCAL2,\n        \"LOG_LOCAL3\":   syslog.LOG_LOCAL3,\n        \"LOG_LOCAL4\":   syslog.LOG_LOCAL4,\n        \"LOG_LOCAL5\":   syslog.LOG_LOCAL5,\n        \"LOG_LOCAL6\":   syslog.LOG_LOCAL6,\n        \"LOG_LOCAL7\":   syslog.LOG_LOCAL7,\n    }\n}\n// returns a middleware handler that logs requests and their response times\nfunc Logger() martini.Handler {\n    return func(res http.ResponseWriter, req http.Request, c martini.Context, log syslog.Writer) {\n        addr := req.Header.Get(\"X-Real-IP\")\n        if addr == \"\" {\n            addr = req.Header.Get(\"X-Forwarded-For\")\n            if addr == \"\" {\n                addr = strings.Split(req.RemoteAddr, \":\")[0]\n            }\n        }\n    start := time.Now()\n    rw := res.(martini.ResponseWriter)\n    c.Next()\n    log.Debug(fmt.Sprintf(\"%s - %s %d \\\"%s %s\\\" %s\", addr, time.Now().UTC().String(), rw.Status(), req.Method, req.URL.Path, time.Since(start)))\n}\n\n}\n```\nSo my API only locks on a facility, after which I can just call log.Debug/Info/Warning/Err/Notice/etc.\n. Replying to myself here. It seems that as long as the handler takes a martini.Params, a http.ResponseWriter and a *http.Request and returns void, the above is possible.\n. ",
    "ysimonson": "Guessing from looking at the code, but it looks like you'd implement a ReturnHandler: https://github.com/go-martini/martini/blob/master/return_handler.go\nThen you use it by making your own version New that uses your return handler rather than the default: https://github.com/go-martini/martini/blob/master/martini.go#L38\n. Guessing from looking at the code, but it looks like you'd implement a ReturnHandler: https://github.com/go-martini/martini/blob/master/return_handler.go\nThen you use it by making your own version New that uses your return handler rather than the default: https://github.com/go-martini/martini/blob/master/martini.go#L38\n. ",
    "jnfeinstein": "Thank you for the prompt reply!  I don't think the panic method would work since the panic stops the rest of the handler chain from being processed, correct?  The error also doesn't specify which type is missing.\nI think I could accomplish what I want by adding support for mappings to functions in addition to objects, which may have other benefits as well.\n. Thank you for the prompt reply!  I don't think the panic method would work since the panic stops the rest of the handler chain from being processed, correct?  The error also doesn't specify which type is missing.\nI think I could accomplish what I want by adding support for mappings to functions in addition to objects, which may have other benefits as well.\n. ",
    "ogta": "You are welcome\n. You are welcome\n. ",
    "matejkramny": "I think that whenever you need a data model somewhere, you need to get it from the database.. If it can't be found, you return a 404.\nIt gets quite repetitive (imo).\nImagine GET /users/:user_id/cars/:car_id. You need to get 2 sets of data from the database. Having this param service, you could inject a bit of data into any request without ever having to repeat the 'get the data model or return 404.. then do whatever the call is supposed to do.'\n. FYI Figured something out, using middleware.. Could be cleaner if this was a 'global' handler.\n```\nfunc tableRouter(r martini.Router) {\n    r.Get(\"\", getTableHandler, getTable)\n}\nfunc getTableHandler(res http.ResponseWriter, c martini.Context, params martini.Params) {\n    id, err := strconv.Atoi(params[\"table_id\"])\n    if err != nil {\n        res.WriteHeader(http.StatusNotFound)\n        return\n    }\ntable := models.Table{Id: id}\nif err := table.Get(); err != nil {\n    res.WriteHeader(http.StatusNotFound)\n    return\n}\n\nc.Map(table)\nc.Next()\n\n}\nfunc getTable(r render.Render, table models.Table) {\n    r.JSON(200, table)\n}\n```\n. I think that whenever you need a data model somewhere, you need to get it from the database.. If it can't be found, you return a 404.\nIt gets quite repetitive (imo).\nImagine GET /users/:user_id/cars/:car_id. You need to get 2 sets of data from the database. Having this param service, you could inject a bit of data into any request without ever having to repeat the 'get the data model or return 404.. then do whatever the call is supposed to do.'\n. FYI Figured something out, using middleware.. Could be cleaner if this was a 'global' handler.\n```\nfunc tableRouter(r martini.Router) {\n    r.Get(\"\", getTableHandler, getTable)\n}\nfunc getTableHandler(res http.ResponseWriter, c martini.Context, params martini.Params) {\n    id, err := strconv.Atoi(params[\"table_id\"])\n    if err != nil {\n        res.WriteHeader(http.StatusNotFound)\n        return\n    }\ntable := models.Table{Id: id}\nif err := table.Get(); err != nil {\n    res.WriteHeader(http.StatusNotFound)\n    return\n}\n\nc.Map(table)\nc.Next()\n\n}\nfunc getTable(r render.Render, table models.Table) {\n    r.JSON(200, table)\n}\n```\n. ",
    "talbright": "I'm not sure what you mean by \"request that's not supported\". If you mean the route is correct, but the method is not supported, that should be a 405. Otherwise all things being equal, a 404 is correct. \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n. I've submitted a PR for this. In the meantime you can implement this yourself with your own handler, see https://gist.github.com/talbright/b63761338d14803ce371 for an example.\n. Just found this too :flushed:\nhttps://github.com/martini-contrib/strict\n. What if you just added the matching route to the context here: https://github.com/cjhubert/martini/blob/expose-route-match/router.go#L123\n. Should that signature be a pointer to a martini.Route? I think so...\n. Yup, I found that after I coded the solution and mentioned it in go-martini/martini#330. Doh :hammer: \n. I'm not sure what you mean by \"request that's not supported\". If you mean the route is correct, but the method is not supported, that should be a 405. Otherwise all things being equal, a 404 is correct. \nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n. I've submitted a PR for this. In the meantime you can implement this yourself with your own handler, see https://gist.github.com/talbright/b63761338d14803ce371 for an example.\n. Just found this too :flushed:\nhttps://github.com/martini-contrib/strict\n. What if you just added the matching route to the context here: https://github.com/cjhubert/martini/blob/expose-route-match/router.go#L123\n. Should that signature be a pointer to a martini.Route? I think so...\n. Yup, I found that after I coded the solution and mentioned it in go-martini/martini#330. Doh :hammer: \n. ",
    "sybrandy": "Yes, you are correct.  The route is correct, but the method is not supported.\n. Yes, you are correct.  The route is correct, but the method is not supported.\n. ",
    "wilk": "@mvader done and happy new year!\n. @mvader done and happy new year!\n. ",
    "digitalcraftsman": "Thanks for the quick response. I'll make a pull request with the translation soon.\n. Thanks for the quick response. I'll make a pull request with the translation soon.\n. ",
    "cjhubert": "Sorry for taking so long to reply. I'm not sure I follow either of you. Do you think you could provide an example or at least a hint as to what you mean to do?\nEdit: I assume you guys mean to add:\ngo\ncontext.Map(route)\nTo the linked location. But when I do that, and try to make my middleware as such:\ngo\nm.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context, route *martini.Route) {\n  if route != nil {\n    fmt.Printf(\"ROUTE: %#v\\n\", route)\n  }\n}\nI get: [martini] PANIC: Value not found for type *martini.Route (Playing around with dereferencing it doesn't change the outcome)\n. Would you be able to explain how to use that in middleware? I feel like I've tried everything, but martini.Route always panics in middleware saying it's not set:\ngo\n    m.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context, r martini.Route) {\n        // Panics:\n        if r != nil {\n            fmt.Printf(\"Route: %#v\\n\", r)\n        }\n    })\n. It will panic either way. But I think there's been a miscommunication. I'm going to assume @mvader meant this as an example of how to use it in the route.\nUnfortunately, this is what I'm trying to avoid, and why I wrote this PR. Imagine I have 100 routes. If I wanted to log out the Name property of them, I would have to have at least 100 lines of code (1 in each individual route handler) to do so with this method.\nThe reason I wrote this PR was to expose the route to the martini context and make it usable in middleware. With it, I can use just a few lines to accomplish the same thing:\ngo\nm.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context) {\n  route := router.GetMatchedRoute(req.Method, req.URL.Path)\n  if route != nil {\n    log.Printf(\"Route name: %s\", route.GetName())\n  }\n})\n. Sorry for taking so long to reply. I'm not sure I follow either of you. Do you think you could provide an example or at least a hint as to what you mean to do?\nEdit: I assume you guys mean to add:\ngo\ncontext.Map(route)\nTo the linked location. But when I do that, and try to make my middleware as such:\ngo\nm.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context, route *martini.Route) {\n  if route != nil {\n    fmt.Printf(\"ROUTE: %#v\\n\", route)\n  }\n}\nI get: [martini] PANIC: Value not found for type *martini.Route (Playing around with dereferencing it doesn't change the outcome)\n. Would you be able to explain how to use that in middleware? I feel like I've tried everything, but martini.Route always panics in middleware saying it's not set:\ngo\n    m.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context, r martini.Route) {\n        // Panics:\n        if r != nil {\n            fmt.Printf(\"Route: %#v\\n\", r)\n        }\n    })\n. It will panic either way. But I think there's been a miscommunication. I'm going to assume @mvader meant this as an example of how to use it in the route.\nUnfortunately, this is what I'm trying to avoid, and why I wrote this PR. Imagine I have 100 routes. If I wanted to log out the Name property of them, I would have to have at least 100 lines of code (1 in each individual route handler) to do so with this method.\nThe reason I wrote this PR was to expose the route to the martini context and make it usable in middleware. With it, I can use just a few lines to accomplish the same thing:\ngo\nm.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context) {\n  route := router.GetMatchedRoute(req.Method, req.URL.Path)\n  if route != nil {\n    log.Printf(\"Route name: %s\", route.GetName())\n  }\n})\n. ",
    "7ym0n": "Sorry, In the beginning commit to my master branch, then created this branch\n. Sorry, In the beginning commit to my master branch, then created this branch\n. ",
    "ovr": "Any news?\n. I think you can use global git ignore rules\nhttps://help.github.com/articles/ignoring-files/#create-a-global-gitignore\nBut it's not bad to add it :)\n. Or it is not possible like this?\n. @mvader \n\nOk, fair enough, just replace the Action with Logger in the comment and LGTM\n\nDone, Just wait CI\n. @mvader \nThank you too!\nTake this :cake: \n. Any news?\n. I think you can use global git ignore rules\nhttps://help.github.com/articles/ignoring-files/#create-a-global-gitignore\nBut it's not bad to add it :)\n. Or it is not possible like this?\n. @mvader \n\nOk, fair enough, just replace the Action with Logger in the comment and LGTM\n\nDone, Just wait CI\n. @mvader \nThank you too!\nTake this :cake: \n. ",
    "shrimpywu": "thanks!\n. thanks!\n. ",
    "bezigon": "Maybe related to https://stackoverflow.com/questions/30478485/im-really-confused-with-importing-required-packages-but-all-its-files-were-excl\n. Maybe related to https://stackoverflow.com/questions/30478485/im-really-confused-with-importing-required-packages-but-all-its-files-were-excl\n. ",
    "vodolaz095": ":+1: \n. :+1: \n. ",
    "nicolas-van": "OK, I just understood that when I serve the static folder my files are available under http://localhost:3000/ and not http://localhost:3000/static/. That seems counter-intuitive to me. Still, not a bug.\n. OK, I just understood that when I serve the static folder my files are available under http://localhost:3000/ and not http://localhost:3000/static/. That seems counter-intuitive to me. Still, not a bug.\n. ",
    "win-t": "yeah, we can still use this trick\ngo\ndefaultHandler := martini.New().Get(reflect.TypeOf(martini.ReturnHandler(nil))).Interface()\n. yeah, we can still use this trick\ngo\ndefaultHandler := martini.New().Get(reflect.TypeOf(martini.ReturnHandler(nil))).Interface()\n. ",
    "alarangeiras": "Hi Ian,\nActually martini.Static accepts not only relative paths but absolute too.\nHave you sure that path exists in your system?\nA saw the code that treats absolute path. In addtition I did a POC in a Linux system.\ngo\n// Static returns a middleware handler that serves static files in the given directory.\nfunc Static(directory string, staticOpt ...StaticOptions) Handler {\n    if !filepath.IsAbs(directory) {\n        directory = filepath.Join(Root, directory)\n    }\n. Hi Ian,\nActually martini.Static accepts not only relative paths but absolute too.\nHave you sure that path exists in your system?\nA saw the code that treats absolute path. In addtition I did a POC in a Linux system.\ngo\n// Static returns a middleware handler that serves static files in the given directory.\nfunc Static(directory string, staticOpt ...StaticOptions) Handler {\n    if !filepath.IsAbs(directory) {\n        directory = filepath.Join(Root, directory)\n    }\n. ",
    "ianwalter": "Thanks Allan, I should have read the code first. I'm new to go but that is pretty straightforward.\nIt turned out that the mapping of my Docker volume was wrong.\n. Thanks Allan, I should have read the code first. I'm new to go but that is pretty straightforward.\nIt turned out that the mapping of my Docker volume was wrong.\n. ",
    "cdeadlock": "I have tracked it down to a graceful shutdown code I found\n```\nfunc (g *GracefulShutdown) Handler(c martini.Context) {\n    g.wg.Add(1)\n    c.Next()\n    g.wg.Done()\n}\ngracefulShutdown := &GracefulShutdown{Timeout: time.Duration(20) * time.Second}\nm.Use(gracefulShutdown.Handler)\n```\nSo there is some condition during TLS that calling c.Next() is inappropriate?\n. This is some kind of weird build problem on my end, if I move the graceful shutdown code into the same file it works fine.\nI guess I need to figure out how godep and project paths work more thoroughly\n. I have tracked it down to a graceful shutdown code I found\n```\nfunc (g *GracefulShutdown) Handler(c martini.Context) {\n    g.wg.Add(1)\n    c.Next()\n    g.wg.Done()\n}\ngracefulShutdown := &GracefulShutdown{Timeout: time.Duration(20) * time.Second}\nm.Use(gracefulShutdown.Handler)\n```\nSo there is some condition during TLS that calling c.Next() is inappropriate?\n. This is some kind of weird build problem on my end, if I move the graceful shutdown code into the same file it works fine.\nI guess I need to figure out how godep and project paths work more thoroughly\n. ",
    "jinxiao": "well , we have met the same problem , it seems that this framework doesn't work well on garbage collection\n. well , we have met the same problem , it seems that this framework doesn't work well on garbage collection\n. ",
    "figoxu": "I reduce the number of Vuser from 50 to 10. After the 4 minutes, It was shut down with the reason of lack memory.\n\n\nIt seems like that there is a room for improvement with memory recycle problem in the martini framework ? Is that right ?\n. The pereformace of http.Server() in golang is good.\n\n\n. I try to reduce the execute time of martini middleware, The memory recycle problem seems to be solved .\n. I reduce the number of Vuser from 50 to 10. After the 4 minutes, It was shut down with the reason of lack memory.\n\n\nIt seems like that there is a room for improvement with memory recycle problem in the martini framework ? Is that right ?\n. The pereformace of http.Server() in golang is good.\n\n\n. I try to reduce the execute time of martini middleware, The memory recycle problem seems to be solved .\n. ",
    "hut8": "The original author has a good explanation here:\nhttps://web.archive.org/web/20140521180901/http://codegangsta.io:80/blog/2014/05/19/my-thoughts-on-martini/\nEdited to replace faulty link with @erizocosmico 's link\n. The original author has a good explanation here:\nhttps://web.archive.org/web/20140521180901/http://codegangsta.io:80/blog/2014/05/19/my-thoughts-on-martini/\nEdited to replace faulty link with @erizocosmico 's link\n. ",
    "AnneTheAgile": "The above blog references a followup project that also appears abandoned.\nhttps://github.com/codegangsta/negroni\n. The above blog references a followup project that also appears abandoned.\nhttps://github.com/codegangsta/negroni\n. ",
    "wiredprairie": "@hut8 -the link you provided now is for an online casino ....   You may want to remove the link. . @hut8 -the link you provided now is for an online casino ....   You may want to remove the link. . ",
    "valyala": "@mvader , I already filed feature request for gin\n. @mvader , I already filed feature request for gin\n. ",
    "codeskyblue": "@mvader Do you known some alternatives ?\n. @mvader Do you known some alternatives ?\n. ",
    "Kistamushken": ":+1: \n. :+1: \n. ",
    "xuxiangyang": "oh..sorry for heard that. could you recommend some frameworks?  Thx\n. thx\n. oh..sorry for heard that. could you recommend some frameworks?  Thx\n. thx\n. ",
    "melonwool": "Thank you\uff0c is't useful!. Thank you\uff0c is't useful!. "
}