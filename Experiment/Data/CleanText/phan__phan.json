{
    "morria": "Hi @akrabat. I merged the patch and then moved the source directory one more time to src/Phan in order to make the namespaces match the directory structure. Does that seem reasonable to you?\n. I'm guessing you already caught this, but don't forget to run composer update after pulling master in order to regenerate the autoloader within composer-land.\n. Thanks, @akrabat\n. @sebastianbergmann The format of the dumped node is a bit different than the original format. Does this patch work for you?\n. @sebastianbergmann Is it possible your build of php-ast is older than the one I'm using? It looks like \\ast\\flags\\CLASS_FINAL may have been added in https://github.com/nikic/php-ast/commit/2b147f3 and I'm running phan against a build based on https://github.com/nikic/php-ast/commit/51f2183\nCan you tell me what version of php-ast you're using?\n. @sebastianbergmann That all looks good to me. Perhaps the php-ast module hasn't been loaded correctly? The latest version of phan will now check to make sure that the php-ast extension is loaded (https://github.com/etsy/phan/commit/d8ae3bb8e5eaedabf14bec994e54dfbfce809516). Is that check passing for you?\nDoes the list produced by the following show ast?\necho \"<?php print_r(get_loaded_extensions());\" | php\n. Great!\n. Oops. Thanks!\n. This patch is close and gets the tests passing, but will mess up variables. We need to understand when a parameter is array (that may have hidden type information) and add to its type rather than overwrite its type only in that situation.\n``` diff\ndiff --git a/src/Phan/Analyze/AssignmentVisitor.php b/src/Phan/Analyze/AssignmentVisitor.php\nindex c898024..dba22d7 100644\n--- a/src/Phan/Analyze/AssignmentVisitor.php\n+++ b/src/Phan/Analyze/AssignmentVisitor.php\n@@ -14,6 +14,7 @@ use \\Phan\\Language\\AST\\KindVisitorImplementation;\n use \\Phan\\Language\\Context;\n use \\Phan\\Language\\Element{\n     Comment,\n+    Parameter,\n     Property,\n     Variable\n };\n@@ -312,7 +313,13 @@ class AssignmentVisitor extends KindVisitorImplementation {\n                     $variable_name\n                 );\n\n$variable->setUnionType($this->right_type);\nif ($variable instanceof Parameter) {\n$variable->getUnionType()->addUnionType(\n$this->right_type\n);\n} else {\n$variable->setUnionType($this->right_type);\n}     $this->context->addScopeVariable(\n         $variable\n\n```\n. Done (https://github.com/etsy/phan/releases/tag/0.1). Thanks!\n\n\n@ablyler Does homebrew-php have any constraints on how version numbers should work going forward?\n. Uhoh. Thanks for the report.\n@ablyler I just pushed a patch (https://github.com/etsy/phan/commit/f0db9e90ed8893a108efe96fc97beb515119d22a) that might fix the issue for you; can you pull and try again?\nIf that doesn't work, can you send me some code that it might be failing on? I added an assertion to print out the file and line that its failing on if it dies.\n. Sweet. Thanks again!\n. Added test\n``` php\n<?php\n/*\n * @param float $b\n /\nfunction f($a, $b) {}\nf('string', 3.14159);\nf(3.14159, 'string');\n/*\n * @param float|int|Traversable $b\n /\nfunction g($a, $b) {}\ng('string', 42);\ng(42, 'string');\n/*\n * @param int\n * @param string\n /\nfunction h($a, $b) {}\nh('string', 42);\nh(42, 'string');\n```\nwith expected output \n%s:7 TypeError arg#2(b) is string but \\f() takes float defined at %s:5\n%s:14 TypeError arg#2(b) is string but \\g() takes \\traversable|float|int defined at %s:12\n%s:21 TypeError arg#1(a) is string but \\h() takes int defined at %s:20\n%s:21 TypeError arg#2(b) is int but \\h() takes string defined at %s:20\n. Hi @tkrajacic. Thanks for the report. I just pushed a patch that should fix it. Let me know if that doesn't do the trick.\n. Hi @christopherowen. You can run it on your code base by using the -x or --detect-dead-code flag.\nIf your code was in the src/ directory, you could run it as\nsh\n./phan -l src --dead-code-detection\nPlease let me know if there are any issues or strange behaviors; its pretty early code.\nAlso, keep in mind that what it emits is just a guess. The following code for instance would say that f() was dead.\nphp\n<?php\nfunction f() {}\n$v = 'f';\n$v();\nThe same would happen for classes, constants or properties accessed via a variable.\n. Good idea. I added a note to the README about the feature.\nI'll create a 0.2 release in the next few days (once things stabilize a bit).\n. The release https://github.com/etsy/phan/releases/tag/0.2 now exists.\n. Thanks, @fonsecas72 \n. There were a few bugs in the handling of self return types. Hopefully they're all fixed up now. Thanks!\n. I'm going to close this issue out as its becoming more clear that a feature like this would be best left to another project that imports phan.\n. This hasn't been touched in a long time, so I'm going to close it.\nLet me know if it should be re-opened.. Formerly we had just stored calls to methods, but as of around https://github.com/etsy/phan/commit/95c176650962062a3b4ec10c70b45fcf07151467 the sqlite database stores references to methods, functions, properties, constants and classes.\nThere's still no interface for querying it, but the data is more complete now.\nAlso, keep in mind that this is PHP and any caller data we get will be an estimate, given that we live in a world with stuff like\nphp\nfunction func_name() {}\n$method_name = 'func' . '_' . 'name';\n$method_name();\n. Hi @cweagans.\nI'd love to see more tools like what you're describing, but those would be out of scope with what Phan intends to do.\nThat being said, phan can easily be included in other projects as a composer dependency, so perhaps you could start a new project that includes phan in order to support code rewriting.\n. I agree that our naming isn't great there. I pushed a patch to make those names a bit more clear. Does that look better to you?\nI'd love to see a patch supporting type checking of generics with the caveat that it should be able to be disabled via a Config flag for folks that don't want to support it in their code bases. I haven't heard of anyone having any immediate plans for adding support for generics; this should be wide open for you to work on.\nFor others reading along, it looks like you're proposing a syntax like the following for generics;\n``` php\n/\n * @template T\n * Type of elements in box\n */\nclass Box {\n    / @var T */\n    private $value;\n/** @param T */\npublic function set($value) { $this->value = $value; }\n\n/** @return T */\npublic function get() { return $this->value; }\n\n}\n/* @var Box /\n$boxed_hat = new Box();\n$boxed_hat->set(new Hat());\n$hat = $boxed_hat->get();\n$boxed_hat->set(new Shoe()); // This would emit an error message\n```\nI'd love to talk more about implementation details once you're closer to working on it. Do you have any thoughts on what an implementation might look like? I'd be happy to give you a tour of the areas of code that might be involved if it'd help.\n. For anyone interested, we now have a pull request with a demo of an implementation of generics: https://github.com/etsy/phan/pull/297\n. This hasn't been touched in a long time, so I'm going to close it.\nLet me know if it should be re-opened.. Hi @mindplay-dk.\nWe've been trying to find ways to make phan fast on very large code bases and daemonizing it is a thing that folks have been talking about.\nIn the immediate term we've dodged the need to do that by providing persistence via a sqlite database (which you can use via the '-s' flag). By doing one long run and saving state, we're able to do very fast subsequent runs on just the changed files. You can give this a try by running phan on itself;\nbash\ntime ./phan -s phan.sqlite src/**/*.php\ntouch ./src/Phan/Phan.php\ntime ./phan -s phan.sqlite src/**/*.php\nThe second run which only has to parse and analyze the one changed file should be much faster. For very large code bases you'd want to run it as\nbash\nphan -s .phan/database -r `git diff origin/master --name-only`\nwhich will re-analyze only the files that differ from origin/master.\nWe have a vim plugin for phan (which works within syntastic). Right now it takes about 600ms to run an analysis using the stored state in sqlite which isn't quite good enough. We're shooting for 200ms response times and I'm not entirely sure how we'll get there. Daemonizing may end up being the approach we'll need to take if we can't find some time to shave off otherwise.\n. A few notes on this;\n- We're looking at using https://facebook.github.io/watchman/ to watch the code base and keep the sqlite database up to date.\n- Using the database to analyze a patch is taking about 600ms or so which isn't great for use within a text editor, so we're going to want to find some way to speed that up. Daemonizing to avoid sql queries may be something we need to do.\n. @mindplay-dk Keeping everything in memory and watching for file changes should work well.\nAs it stands now, we (not entirely correctly) flush elements defined in a file from the sqlite database whenever that file changes, but we do not flush those elements from memory. It should be fairly easy to do that part.\n. I'm hoping to take a look at this shortly. Thanks for all of the discussion, everyone.\n. This hasn't been touched in a long time, so I'm going to close it.\nLet me know if it should be re-opened.. Thanks @therealgaxbo. I'll take a look as soon as I can.\n. Pushed https://github.com/etsy/phan/commit/8a722c4327a685b9371beb5f3006b7216d797811 to fix this issue. \n. The output is now\nbash\nphan> ./phan tests/files/src/0058_property_type_check.php\ntests/files/src/0058_property_type_check.php:6 UndefError property of undeclared type \\client\ntests/files/src/0058_property_type_check.php:6 UndefError parameter of undeclared type \\client\ntests/files/src/0058_property_type_check.php:8 UndefError call to undeclared class \\client\n. That sounds great. Thanks!\n. Thank you so much for this and the others, @Seldaek. We'll get to them as soon as we can.\nKeep 'em coming if you find anything else.\n. Phan now treats\nphp\nif ($x instanceof Y) {\n   // ...\n}\nas a temporary cast of $x to Y within the block. See https://github.com/etsy/phan/blob/master/src/Phan/Analyze/ConditionVisitor.php#L150-L197 for the implementation. Only variables are handled right now (not properties).\nThis feature is incredibly limited. Things like the following don't work as of now;\n``` php\nif (!($x instanceof Y)) {\n    // ...\n} else {\n   // $x is not necessarily treated as a Y here\n}\nif ($x instanceof Y || $x instanceof Z) {\n    // The OR was too complicated for phan to handle right\n    // now, so it didn't add Y or Z to $x's types.\n}\n``\n. I just updated my original comment with some explanation of limitations; wanted to make sure you saw them as it could be annoying.\n. Nope. Not yet. I'm hoping to add if block casts for that and things likeempty,isset,is_string`, etc.. No idea on time lines for that, though.\n. Hi @scaytrase. We do have a composer.json file for Phan. Is there something else you were hoping for?\nWe're not in any central repositories, but you should be able to add this repo to your composer.json file for now.\n. Phan is now available via Packagist. See https://packagist.org/packages/etsy/phan for details.\n. A how-to wiki page would make a lot of sense to me.\n. I just added the wiki article https://github.com/etsy/phan/wiki/Tutorial-for-Analyzing-a-Large-Sloppy-Code-Base - I'm hoping it'll mature over time as more folks start doing real-world analyses.\n. Also, despite this being closed, it'd still be great to see an example of an actual project rather than tips for running on any project.\n. I just added the -l CLI option for recursively scanning a directory for PHP files. https://github.com/etsy/phan/commit/5ac189326217ede8e9d1c57d1d8e27b086373889\nLet me know if I can help with the Symfony console stuff.\n. I added the issue https://github.com/etsy/phan/issues/71 to cover the remaining parts of this issue.\n. Fixed in https://github.com/etsy/phan/commit/16b54d01217e19965eb293b455d5df1ccacb2c46\n. @Seldaek An include filter as you suggested would be better, but for now there's a '-3' CLI option for specifying 3rd-party code that should be parsed, but not analyzed.\n. We now have several mechanisms for filtering files;\n``` sh\nGet all PHP files in the given directory\nphan --directory ./src \nGet all PHP files in ./src and ./vendor/symfony\nphan --directory ./src --directory ./vendor/symfony\nGet all PHP files in ./src and ./vendor/symfony, but don't do\nanalysis for anything in ./vendor\nphan --directory ./src --directory ./vendor/symfony --exclude-directory-list ./vendor\nAnalyze all changed files. Parse but don't analyze ./vendory/symfony\ngit diff origin/master --name-only | grep \".php$\" > files\nphan --directory ./vendor/symfony --exclude-directory-list ./vendor --file-list files\n```\n. I'm able to reproduce the behavior you're seeing via\n``` php\n<?php\nclass C {\n    public $p;\n    function f(&$v) { $v = 42; }\n}\nfunction g(int $v) : int { return $v; }\n$c = new C;\n$c->p = $c;\n$c->p->f($v);\ng($v);\n```\nwhich emits\n%s:11 VarError Variable $v is not defined\nDoes this look like a good test case to you @Seldaek?\n. The issue turns out to be that indeed we can't find the method definition, but are ignoring the issue at https://github.com/etsy/phan/blob/master/src/Phan/Analyze/BreadthFirstVisitor.php#L825-L828\n. Uhoh. Taking a look. Thanks.\n. It looks like the test case below is reproducing the composer issue.\n``` php\n<?php\nclass A {\n    public function f(&$output = null) {}\n}\nclass B {\n    public function f(A $p = null) {\n        $p = $p ?: new A();\n        $p->f($v1);\n        $v2 = $v1;\n    }\n}\n```\nIt seems like the type of $p isn't surviving the ?: operation.\n. I just pushed https://github.com/etsy/phan/commit/381b854476285125ca1962a6d915809af9ca5b64 which I believe is fixing the issue. Let me know if its still breaking.\n. Merged in https://github.com/etsy/phan/commit/ef5200333b72fc3b16b8c7aaa09738507aff7f1e\n. Thanks @Seldaek!\n. Closing this as a duplicate.\n. @mindplay-dk Thanks for that. I updated the title on #43 before closing this issue out to make the issue more clear.\n. Thanks, @xtreamwayz \n. Note that we have Config::allow_missing_properties (code) that can configure parts of this behavior.\n. OK. We can use the following test-case instead;\nphp\n<?php\nclass C { }\n$c = new C;\n$c->undef_prop_a = 1;\n$v = $c->undef_prop_b;\nwhich currently emits\n``` bash\n\nphp 70.php\nPHP Notice:  Undefined property: C::$undef_prop_b in /home/amorrison/development/phan/70.php on line 5\n./phan 70.php\n70.php:4 AvailError Missing property with name 'undef_prop_a'\n``\n. Aha; the CLI doesn't have access to the apache functions.\n. https://github.com/etsy/phan/commit/8db1e1cba450e5db39c931e5f2a6f38561822447 inhibits the uncaught exception, but we still need to make sure thatapache_request_headers()` is available.\n. Hi @DerManoMann. Any chance your code base is open so I could take a look?\n\nIt sounds like this could be related to https://github.com/etsy/phan/issues/74 - Lets check this one again after fixing #74.\n. @DerManoMann https://github.com/etsy/phan/commit/8db1e1cba450e5db39c931e5f2a6f38561822447 will inhibit the uncaught exception. If the function get_APP isn't found, it'll be emitted as a error in the log.\nI'm going to close this issue, but I'd be interested in hearing more about why the function get_APP isn't being found. If the function is in a file that's parsed and analyzed it should be found.\n. @DerManoMann Have you tried again with the latest patch? The exception should be handled now.\n. If by segfault you mean uncaught exception, I just pushed a patch for #78, so hopefully that'll do it.\n. Oops, I should have closed this. I ended up pushing something (https://github.com/etsy/phan/commit/d6e2ab62583ffd81d841cd0716a013b8d7f09143) that defers the calculation of the type until its needed which should only be during the second pass.\n. I'm going to close this as a phan bug, but please keep discussing if we figure out a way to reproduce it.\n. Heh. It wasn't doing much; I had accidentally left it in after doing some debug.\n. merged in https://github.com/etsy/phan/commit/eb4bb690e5bf877123923aee7747de4d0503a190. Thanks @scaytrase!\n. ha\n. Thanks, @sserbin \n. The following had been in the README given that @rlerdorf had implemented this feature in his initial version, but was forgotten in this implementation. It should be added back in once this feature is added.\nDealing with dynamic code that confuses the analyzer\nThere are times when there is just no way for the analyzer to get things right.\nFor example:\nphp\n<?php\nfunction test() {\n    $var = 0;\n    $var = call_some_func_you_cant_hint();\n    if(is_string($var)) {\n        $pos = strpos($var, '|');\n    }\n}\nYour best option is, of course, to go and add a /** @return string|array */ comment to\nthe call_some_func_you_cant_hint() function, but there are times when that is not an\noption. As far as the analyzer is concerned, $var is an int because all it sees is the\n$var = 0; assignment. It will complain about you passing an int to strpos(). You can\nhelp it out by adding a @var doc-type comment before the function:\nphp\n<?php\n/**\n * @var string|array $var\n */\nfunction test() {\n    //...\n}\nThis tells the analyzer that along with the int that it figures out on its own, $var can\nalso be a string or an array inside that function. This is a departure from the normal use of the\n@var tag which is to give properties types, so I don't suggest making a habit of using this hack.\nBut it can be handy to shut up the analyzer without having to refactor the code to not overload the\nsame variable with many different types.\n. Related to https://github.com/etsy/phan/issues/99\nAnother approach here would be to ask folks to add assert($v instanceof C), assert(is_int($v)), or whatever to cast the type.\n. Wrong issue # in the comment, but https://github.com/etsy/phan/commit/61771fd9183efd82170e28ad5fff0970f538591f closes this issue.\n. @scaytrase Should I close this PR out given the other work you've been doing?\n. Sounds good. Thanks, @scaytrase.\n. Thanks, @Seldaek!\n. Phan should be fairly close to not caring about file ordering anymore as we shouldn't be reporting any issues during the initial parsing phase.\nI'm going to close this issue out. If any file ordering issues come up, please report them as new issues.\nThanks!\n. @cweagans Should I assign this issue to you? Totally fine if you'd rather not, I can try to get to it eventually.\n. Thanks, @cweagans!\n. Awesome! Sorry for the delay. Taking a look now.\n. Great patch. Thanks @scaytrase! This should make hacking on Phan much more enjoyable.\nI made a small change to make the instance of CodeBase reusable between tests (https://github.com/etsy/phan/commit/d5dac835fefabf0ce1aa62fa9240c6e984a9f343) to speed things up (down to 6s from 2m for me). Its a bit risky for letting state leak between tests if CodeBase::__clone isn't kept up to date, but worth it for the speedup.\n. @scaytrase Could you help me understand the split between \\Phan\\Phan and \\Phan\\PhanWrapper? It looks like PhanWrapper operates on lists of files and Phan operates on files and nodes. I worry that the distinction between those two things might not have enough benefit to outweigh having so many things named Phan (phan.php, Phan, PhanWrapper) lying around making the entry-point murky.\n. @scaytrase How would you feel about merging this patch in with those two files combined into \\Phan\\Phan.\n. @scaytrase Would it make sense to call them \\Phan\\AnalyzeFile and \\Phan\\AnalyzeAST to make the distinction more clear?\n. This has been merge in via https://github.com/etsy/phan/commit/014254375c7c57e880e80034ac6d75ee994cf18a\n. Awesome. I just merged this in with some stylistic changes in https://github.com/etsy/phan/commit/0dd72c28e875d494471f650489a92780c31eb3cf as well as a change to .phan/config.php so that phan can run successfully against itself.\n. Good catch. Thanks!\n. @staabm Thats a good idea. I created the issue https://github.com/etsy/phan/issues/112 to track that feature.\n. Thanks @scaytrase.\nIt looks like something in https://github.com/etsy/phan/blob/master/src/Phan/CLI.php#L306-L320 isn't operating correctly on Windows. That should be excluding directories from the set of matched files.\nUnfortunately I don't have access to a windows machine. Any chance I could ask you to poke around in that function to see what might be going wrong?\n. Working on a fix now.\n. Merged in https://github.com/etsy/phan/commit/8264bce4633932b4fdaee476a8184c36ce16cfce and https://github.com/etsy/phan/commit/b596a724fda62372fed074ca90aefe162699cc9d.\nThank you so much @tpunt. Great find.\n. @tpunt I added https://github.com/etsy/phan/issues/113 to track importing constants. Patch coming shortly.\n. Thanks @tpunt \n. Thanks for the patch!\n. @Seldaek What was your invocation of phan that got you the recursion issue?\nI'm running it as\nsh\nphan --directory DependencyInjection \\\n    --directory SwiftMailer \\\n    --directory vendor/monolog \\\n    --directory vendor/psr \\\n    --directory vendor/symfony  \\\n    --exclude-directory-list vendor\nand am getting the output\nDependencyInjection/Compiler/LoggerChannelPass.php:128 PhanParamTooMany Call with 3 arg(s) to \\Symfony\\Component\\DependencyInjection\\reference::__construct() which only takes 2 arg(s) defined at vendor/symfony/dependency-injection/Reference.php:32\nDependencyInjection/Compiler/LoggerChannelPass.php:128 PhanUndeclaredMethod Call to undeclared method \\Symfony\\Component\\DependencyInjection\\reference::isstrict\nDependencyInjection/Configuration.php:265 PhanUndeclaredMethod Call to undeclared method \\Symfony\\Component\\Config\\Definition\\Builder\\nodeparentinterface::end\nDependencyInjection:0 PhanEmptyFile Empty file DependencyInjection\nSwiftMailer/MessageFactory.php:31 PhanUndeclaredTypeParameter Parameter of undeclared type \\swift_mailer\nSwiftMailer/MessageFactory.php:50 PhanUndeclaredClassMethod Call to method createMessage from undeclared class \\swift_mailer\nSwiftMailer:0 PhanEmptyFile Empty file SwiftMailer\n. Ahh; setting xdebug.max_nesting_level=1000 did the trick.\n. It looks like the max depth of the AST is only 508\nsh\nphan -a DependencyInjection/Configuration.php | grep -o \"[      ]*\" | awk '{ print length($0); }' | sort -n | tail -n1\nIt looks like the major recursion is happening within UnionTypeVisitor. Some caching in there might make that tree a bit more shallow.\n. Well, parseNodeInContext is only getting to ~500, but UnionTypeVisitor is taking it somewhere past 2,000. Its a jungle in there.\n. It looks like \\Phan\\Language\\Internal\\FunctionSignatureMap has an incorrect value for DOMDocument::__construct. The following patch may resolve that\ndiff\ndiff --git a/src/Phan/Language/Internal/FunctionSignatureMap.php b/src/Phan/Language/Internal/FunctionSignatureMap.php\nindex f27cc49..0a98300 100644\n--- a/src/Phan/Language/Internal/FunctionSignatureMap.php\n+++ b/src/Phan/Language/Internal/FunctionSignatureMap.php\n@@ -1334,7 +1334,7 @@ return [\n 'DOMCharacterData::replaceData' => ['', 'offset'=>'int', 'count'=>'int', 'data'=>'string'],\n 'DOMCharacterData::substringData' => ['string', 'offset'=>'int', 'count'=>'int'],\n 'DOMComment::__construct' => ['DOMComment', 'value'=>'string'],\n-'DOMDocument::__construct' => ['DOMDocument', 'version'=>'string', 'encoding'=>'string'],\n+'DOMDocument::__construct' => ['DOMDocument', 'version='=>'string', 'encoding='=>'string'],\n 'DOMDocument::createAttribute' => ['DOMAttr', 'name'=>'string'],\n 'DOMDocument::createAttributeNS' => ['DOMAttr', 'namespaceuri'=>'string', 'qualifiedname'=>'string'],\n 'DOMDocument::createCDATASection' => ['DOMCDATASection', 'data'=>'string'],\nI'll see if that works and look into the other one shortly.\n. This patch was fixed by https://github.com/etsy/phan/commit/e6723c52a17334fe7501be37992fe1c43b37199a\nIt turns out we had problems with native methods that had capital letters in their name.\n. Switching to something standard would make a lot of sense.\n. I created a PR with an automatic conversion to PSR-2. I'd love to hear comments on it https://github.com/etsy/phan/pull/119.\n. I added a section to the Developers Guide about style. https://github.com/etsy/phan/wiki/Developer's-Guide-To-Phan#submitting-patches\n. An automated conversion to PSR-2 was pushed in https://github.com/etsy/phan/commit/761b9cdf7f191e01968c2141ab819a29e8a2fcf2\n. Thanks @henneboele! If you pull master it should be fixed.\n. Thanks for the report @black-silence. This should be fixed now.\n. Thats definitely unexpected behavior.\nI'm having trouble reproducing this when running the following as ./phan 124.php.\nphp\n<?php\nclass C {\n    /** @var \\DateTime */\n    private $p;\n    public function f() {\n        $this->p->format('Ymd');\n    }\n}\nIs there anything else that might change the environment to make the bug show up? Is there a namespace on the file? Is DateTime defined in another namespace?\nIs your version of Phan up to date with the latest origin/master?\nThanks @henneboele.\n. Thanks for investigating @henneboele. Sorry I couldn't be more help.\n. This should be fixed now. Thanks again for the report @henneboele.\n. Hi @black-silence. Thanks for the report.\nThis is a result of https://github.com/etsy/phan/issues/101 where Phan isn't merging the contexts correctly when coming out of a try/catch/finally block.\nHopefully we'll have a fix soon.\n. Phan doesn't currently attempt to deduce what the conditional check implies about a type. As far as Phan is concerned (currently), the above example is equivalent to\nphp\n$nulltest = null;\necho $nulltest->format('d');\nIf, however, you had\n``` php\nif (rand(1, 10) > 5) {\n    $nulltest = null;\nelse {\n    $nulltest = new \\DateTime();\n}\nif ($nulltest !== null) {\n    echo $nulltest->format('d');\n}\n```\nwe'd see that $nulltest's type is \\DateTime|null after merging the contexts between the if and else, and so the call to format() wouldn't necessarily be invalid.\nUnfortunately, we don't do the same context merging between branches of a try/catch/else, so in the original example when we have the assignment within the catch, it completely overwrites the type of the variable.\n. Thanks, @scaytrase \n. The issue here is that we're checking to see if there's a 'use' before prefixing an unqualified name with the namespace.\nhttps://github.com/etsy/phan/blob/b9e8441a28faef7d7066e8bc235b9099030bafde/src/Phan/Language/Type.php#L320-L356\nThe correct logic here should be\n1. Check to see if an object exists when prefixing the unqualified name with the current namespace\n2. Check to see if there's a use map for the unqualified name\n3. Prefix the unqualified name with the current prefix\nUnfortunately, Phan is built such that Type::fromStringInContext operates without any awareness of the code base and so it can't do that first part.\nGetting the CodeBase into Type::fromStringInContext will be a good bit of work and this case feels fairly pathological and is hopefully rare, so unfortunately this bug may end up staying open for some time while we try to get the 1.0 milestone out.\n. I was making that much more complicated that it actually was. The patch referenced above seems to get the desired behavior.\n. A possible implementation would be to mark variables as tainted if they're assigned from anything in $_GLOBAL, $_SERVER, $_GET, $_POST, etc. propagating the tainted state on assignment and only removing it when the variable is passed into a method annotated with something like @PhanRemoveTainted.\n. I'm going to close this out as it looks stalled out. Happy to open it back up if we're able to get back to this.\n. This is a dup of #18, yeah?\nMy preference would be to create a separate tool for querying the code base.\n. This is a dup of https://github.com/etsy/phan/issues/16 which we closed as being out of scope with what phan intends to do.\nThe best way to do this may be to create a separate project that has Phan as a dependency that extends its functionality.\n. Hi @tybulewicz.\nI use this stub for working with Memcache; https://gist.github.com/morria/63e6f502c60eed18a015\nI usually make a directory like .phan/stubs to put such things in and then add that directory to the analysis such as in phan --directory src --directory .phan/stubs.\nYou can also create a file .phan/config.php such as with https://github.com/etsy/phan/blob/master/.phan/config.php#L67-L72 and add a directory_list parameter that includes .phan/stubs.\nLet me know if that doesn't work for you.\n. Hi @quentincurtet.\nI just pushed a patch to add class deprecation as I realized that it didn't yet exist. Perhaps that'll help.\nDeprecation issues will only be emitted on classes, methods and functions, and only if they appear in doc blocks of the form /** ... */, and not doc blocks of the form // ... or /* ... */.\nThe code\n``` php\n<?php\n/\n * @deprecated\n */\nclass C {\n    /\n     * @deprecated\n     */\n    function f() {}\n}\n$v = new C;\n$v->f();\n/*\n * @deprecated\n /\nfunction f() {\n}\nf();\n```\nwill emit the issues\n%s:12 PhanDeprecatedClass Call to deprecated class \\c defined at %s:5\n%s:13 PhanDeprecatedFunction Call to deprecated function \\c::f() defined at %s:9\n%s:20 PhanDeprecatedFunction Call to deprecated function \\f() defined at %s:18\nDoes any of that help? If there are still issues, can you post some sample code so I can try to reproduce?\nThanks!\n. Thanks @cweagans!\n. Thanks, @henneboele \n. Related to #248 \nRelated to #198 \n. Thanks, @k-phoen\n. Hi @monkeyphysics.\nPhan doesn't support producing such graphs natively, but you can hack it on by\n- Applying this patch;\n``` patch\ndiff --git a/src/Phan/Analysis.php b/src/Phan/Analysis.php\nindex a653bc1..cb4f549 100644\n--- a/src/Phan/Analysis.php\n+++ b/src/Phan/Analysis.php\n@@ -147,6 +147,7 @@ class Analysis\n     // Take a pass to import all details from ancestors\n     $i = 0;\n\n\nprint \"digraph {\\n\";\n         foreach ($code_base->getClassMap() as $fqsen => $class) {\n             CLI::progress('classes', ++$i/$class_count);\n\n@@ -154,6 +155,10 @@ class Analysis\n                 continue;\n             }\n\nif ($class->hasParentClassFQSEN()) {\nprint \"\\\"{$class->getParentClassFQSEN()}\\\" -> \\\"{$class->getFQSEN()}\\\";\\n\";\n}\n+\n             // Make sure the parent classes exist\n             ParentClassExistsAnalyzer::analyzeParentClassExists(\n                 $code_base, $class\n@@ -171,6 +176,8 @@ class Analysis\n                 $code_base, $class\n             );\n         }\n+\n\nprint \"}\\n\";\n     }\n/**\n```\n- Running phan as\n\n\nsh\nphan --directory src -o /dev/null > graph.dot\n- Running graphviz on the produced graph\nsh\ndot graph.dot -Tpng -o graph.png\n. @monkeyphysics: You can see some extra fanciness on generating the graph in Rasmus's version from awhile ago https://github.com/rlerdorf/phan/blob/master/includes/util.php#L994-L1047\n. https://github.com/etsy/phan/commit/bcb8cbb02a300bf08f9218e061692472012e3432\n. Docs available at https://docs.codeclimate.com/v1.0/docs/remediation\n. Hi @terinjokes.\nWould you be able to provide some simplified sample code thats producing the false positives on PhanUndeclaredClassMethod? \n. @terinjokes: You can get a list of all classes that Phan knows about by applying the following patch\n``` diff\ndiff --git a/src/Phan/Phan.php b/src/Phan/Phan.php\nindex 42ce3c6..909326a 100644\n--- a/src/Phan/Phan.php\n+++ b/src/Phan/Phan.php\n@@ -122,6 +122,12 @@ class Phan implements IgnoredFilesFilterInterface {\n         // TODO: Reinstate this\n         // $code_base->store();\n\nforeach ($code_base->getClassMap() as $fqsen => $class) {\nprint \"$fqsen\\n\";\n}\nexit;\n+\n+\n         // Filter out any files that are to be excluded from\n         // analysis\n         $analyze_file_path_list = array_filter(\n```\n\nand then running your analysis as normal. Instead of doing the analysis, it'll just do the parsing, print out all known class FQSENs and then exit.\nDoes the missing class show up on that list?\n. Aha! That'll do it.\nUpdating docs to make it more clear what the expected behavior is seems like a great idea.\n. @terinjokes How do you feel about the above patch (https://github.com/etsy/phan/commit/909dcfb79494c5ff077122bfc79fdabedc11f6d6)? It still doesn't seem as clear as it could be. Any suggestions on better wording?\n. Sorry I lost track of this one. I'll update the text now. Thanks!\n. Hi @staabm.\nCan you give it a try again with the patch I just pushed to Phan and see if that resolves the issue?\n. @tybulewicz Thanks for the report. I was looking for test cases and then just found some of these getting emitted in Phan itself. Hopefully we'll have a fix soon.\n. @tybulewicz That last patch should resolve the issue you're seeing. Can you confirm?\n. Thanks for the report, @staabm \n. Hi @messyOne \nI'm unable to reproduce this when running the following. Any chance your composer.json has an interesting configuration that isn't letting it resolve the dependency from packagist?\nHere's what I'm getting;\n``` sh\nbash-4.2$ mkdir tmp && cd tmp\nbash-4.2$ composer require --dev \"etsy/phan:dev-master\"\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing symfony/polyfill-mbstring (v1.1.0)\n    Loading from cache\n\n\nInstalling symfony/console (v3.0.2)\n    Loading from cache\n\n\nInstalling etsy/phan (dev-master 3cedc55)\n    Cloning 3cedc558c4935d455674c2acbf48ed6f1309adaf\n\n\nsymfony/polyfill-mbstring suggests installing ext-mbstring (For best performance)\nsymfony/console suggests installing symfony/event-dispatcher ()\nsymfony/console suggests installing symfony/process ()\nsymfony/console suggests installing psr/log (For using the console logger)\nWriting lock file\nGenerating autoload files\nbash-4.2$ ls\ncomposer.json  composer.lock  vendor\nbash-4.2$ cat composer.json\n{\n    \"require-dev\": {\n        \"etsy/phan\": \"dev-master\"\n    }\n}\n```\nWhen running on a machine without PHP version 7 I get\n``` sh\nbash-4.2$ mkdir tmp && cd tmp\nbash-4.2$ composer require --dev \"etsy/phan:dev-master\"\nYou are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Installation request for etsy/phan dev-master -> satisfiable by etsy/phan[dev-master].\n    - etsy/phan dev-master requires php >=7.0 -> your PHP version (5.5.17) or value of \"config.platform.php\" in composer.json does not satisfy that requirement.\nInstallation failed, deleting ./composer.json.\n```\n. Thanks for the report @staabm. Let me know if that patch doesn't do the trick.\n. @black-silence I think https://github.com/etsy/phan/commit/f706209ee69a55272a97b8d2b0553dea9f50036f may fix this issue as well. Can you confirm?\n. Thanks!\n. Thanks for the report @ThaDafinser.\nI don't have access to a windows machine to test this on. If anyone has a rig set up, please get in touch. I'll be happy to help debug however I can.\n. Perhaps something changed since the issue was filed to resolve this. I'll close it out.\nThanks, @Trainmaster.\n. I don't think Phan is going to be able to support this in any reasonable way. We don't track string values (or array key values) and I'm very hesitant to get into that business.\nPerhaps the best we can do here is emit an issue when we see that extract() is being called.\n. Thats almost correct.\nPhan will exit with a 1 when it successfully completes (be it with issues emitted or not) and with status 0 when something goes terribly wrong.\nhttps://github.com/etsy/phan/blob/master/src/Phan/Bootstrap.php#L25-L26\nThis behavior isn't expected to change in the future.\n. Hmm; it looks like I have those status codes as the opposite of what they should be. I'm going to patch that now. After thats in, the behavior isn't expected to change.\nOops!\n. Does that patch look right to you @terinjokes?\n. Phan now supports plugins (see https://github.com/etsy/phan/wiki/Writing-Plugins-for-Phan). This helps with part of this request.\n. Nope, definitely not supposed to have issue exceptions in the output. I'll fix that.\nRunning ./phan inside the phan directory should run an analysis using the configuration in .phan/config.php. Presently no issues are emitted, so the output will be blank, but I'll confirm that its doing the job.\nThanks for the reports.\n. @mnpenner Running ./phan within the phan directory is working for me. If you add the --progress-bar flag do you get some output showing its progress as it runs on itself?\n. @mnpenner The line numbers in the stack trace aren't lining up for me; If you're running on an older branch, can you run it again with the latest version (currently https://github.com/etsy/phan/commit/7373f89806b823bd24adce582f531fc107fb789c) and show me the failing output for that?\n. @mnpenner For the -3 functionality we parse the code to understand what classes/functions/constants/etc. are in it, but don't do any further analysis. Phan does emit some issues during the parsing phase, however. Usually its for issues that prevent parsing.\nIn the original case you posted about, you're seeing an unhandled error coming from the code that turns PHP into an AST (https://github.com/etsy/phan/blob/master/src/Phan/Analysis.php#L47-L50). When code can't be parsed we need to show an error, but as you note, it could be way friendlier than a thing with extra new lines and no line numbers.\n. As for memory going up and up and it never ending, thats unexpected. Phan has run on larger code bases while staying under 1.5G memory and finishing in about 1.5 minutes.\nIs there any chance you're running phan using many the -j N option or the 'processes' config option (such as in https://github.com/etsy/phan/blob/master/.phan/config.php#L71-L73) to have Phan run on multiple CPUs? Any chance its running on an interesting operating system?\nCan you say any more about the hardware you're running on? If your system is tight on memory, you should remove the call to gc_disable() at https://github.com/etsy/phan/blob/master/src/phan.php#L6. We added that in because it saves tons of time and Phan doesn't have very much object churn, but does have a very large working set of objects.\nIs there anything else interesting going on with this run of Phan? Any chance I could get you to run it with a debugger so we can see where Phan is getting stuck?\n. @mnpenner: Yeah, that system and config seems totally normal.\nPhan should handle globals, but the $$ stuff can definitely confuse Phan and limit its utility.\nFile ordering used to be a big deal, but I think we've largely gotten rid of the stuff that relied on order. There may still be some issues stemming from method parameters that have defaults of constants that are defined as being a function of constants from other files. When phan runs on itself, for instance, we just configure the set of directories to scan (https://github.com/etsy/phan/blob/master/.phan/config.php#L82-L102) without any attention to ordering.\nAny chance your code base is open so I could take a look?\nIn any case, it'd be great if you were able to see where the process is hanging with the debugger, but no worries if Phan isn't right for the project.\n. Re-opening for the remaining issue.\n. Actually, I'm going to close this one out and will open a new issue once we get more details on the possible infinite loop issue.\n. Hi @staabm.\nThis check is attempting to catch issues that PHP itself reports on, where PHP seems to be taking the approach of looking for exact types.\nIn the code below\n``` php\n<?php\nclass C1 {\n    public function f() : mixed {\n        return 42;\n    }\n}\nclass C2 extends C1 {\n    public function f() : int {\n        return 42;\n    }\n}\n```\nWe get the following output (in PHP 7).\n``` sh\n\nphp 0.php\nPHP Fatal error:  Declaration of C2::f(): int must be compatible with C1::f(): mixed in /home/amorrison/development/phan/0.php on line 13\n```\n\nAre you able to find examples where PHP is OK with overriding to narrower types when its being checked?\n. So, I'll admit by being confused by PHP7's behavior and not understanding why they went for such a radical dichotomy between looseness and strictness, but with\n``` php\n<?php\nclass DT extends DateTime {}\nclass C1 {\n    public function f() : DateTime {\n        return new DateTime();\n    }\n}\nclass C2 extends C1 {\n    public function f() : DT {\n        return new DT();\n    }\n}\n```\nwe get\nsh\nphan> php 0.php\nPHP Fatal error:  Declaration of C2::f(): DT must be compatible with C1::f(): DateTime in /home/amorrison/development/phan/0.php on line 15\nwhere compatibility seems to want to be interpreted as \"exact match\".\nPerhaps the thing to do here is have a config flag --enable-absurd-strictness.\n. Oh, right; I totally got off track talking about PHP and forgot about the original example.\nSo, for\n``` php\n<?php\ninterface I1 {}\ninterface I2 extends I1 {}\nclass C1 implements I2 {}\nabstract class C2 {\n    /* @return I1 /\n    abstract function f();\n}\nclass C3 extends C2 {\n    /* @return C1 /\n    function f() {\n        return new C1;\n    }\n}\n```\nRun as\nsh\n./phan -d tests 173.php\nPhan isn't emitting an issue (as would be hoped for). I'll have to dig in more to see why the very similar looking original example (below) is happening.\nlib/CalDAV/Calendar.php:105 PhanSignatureMismatch Declaration of function getChild(string $name) : \\sabre\\caldav\\icalendarobject should be compatible with function getChild(string $name) : \\sabre\\dav\\dav\\inode defined in lib/DAV/ICollection.php:59\n. @evert \nFor\nlib/CalDAV/Calendar.php:105 PhanSignatureMismatch Declaration of function getChild(string $name) : \\sabre\\caldav\\icalendarobject should be compatible with function getChild(string $name) : \\sabre\\dav\\dav\\inode defined in lib/DAV/ICollection.php:59\nI think Phan is getting confused by https://github.com/fruux/sabre-dav/blob/master/lib/CalDAV/ICalendarObject.php#L19 where the reference to DAV/IFile.php is suffering from https://github.com/etsy/phan/issues/129.\nNot that you should change your code to make up for Phan's bugs, but if you applied the following patch, the issue would disappear.\n``` diff\ndiff --git a/lib/CalDAV/ICalendarObject.php b/lib/CalDAV/ICalendarObject.php\nindex b3a767b..0b2ce25 100644\n--- a/lib/CalDAV/ICalendarObject.php\n+++ b/lib/CalDAV/ICalendarObject.php\n@@ -2,7 +2,7 @@\nnamespace Sabre\\CalDAV;\n-use Sabre\\DAV;\n+use Sabre\\DAV\\IFile;\n/*\n  * CalendarObject interface\n@@ -16,6 +16,6 @@ use Sabre\\DAV;\n  * @author Evert Pot (http://evertpot.com/)\n  * @license http://sabre.io/license/ Modified BSD License\n  /\n-interface ICalendarObject extends DAV\\IFile {\n+interface ICalendarObject extends IFile {\n}\n```\n. Same story for\nlib/CalDAV/CalendarRoot.php:74 PhanSignatureMismatch Declaration of function getChildForPrincipal(array $principal) : \\Sabre\\DAV\\inode should be compatible with function getChildForPrincipal(array $principalInfo) : \\Sabre\\DAVACL\\iprincipal defined in lib/DAVACL/AbstractPrincipalCollection.php:73\nIssue #129 is making Phan not understand what DAV\\INode in https://github.com/fruux/sabre-dav/blob/master/lib/DAVACL/IPrincipal.php#L16 refers to.\nNot that you should, but if you applied\n``` diff\ndiff --git a/lib/DAVACL/IPrincipal.php b/lib/DAVACL/IPrincipal.php\nindex 1372847..7a5f09e 100644\n--- a/lib/DAVACL/IPrincipal.php\n+++ b/lib/DAVACL/IPrincipal.php\n@@ -2,7 +2,7 @@\nnamespace Sabre\\DAVACL;\n-use Sabre\\DAV;\n+use Sabre\\DAV\\INode;\n/*\n  * IPrincipal interface\n@@ -13,7 +13,7 @@ use Sabre\\DAV;\n  * @author Evert Pot (http://evertpot.com/)\n  * @license http://sabre.io/license/ Modified BSD License\n  /\n-interface IPrincipal extends DAV\\INode {\n+interface IPrincipal extends INode {\n /**\n  * Returns a list of alternative urls for a principal\n\n```\nThat issue would go away for Phan in its present state.\n. I pushed a patch for #129 (https://github.com/etsy/phan/commit/3816b0a74eb6f7c380fc50f9f5e342b98e8e5c50) that should do the trick for that first issue;\nlib/CalDAV/Calendar.php:105 PhanSignatureMismatch Declaration of function getChild(string $name) : \\sabre\\caldav\\icalendarobject should be compatible with function getChild(string $name) : \\sabre\\dav\\dav\\inode defined in lib/DAV/ICollection.php:59\nI've convinced myself that the second issue is actually legit;\nlib/CalDAV/CalendarRoot.php:74 PhanSignatureMismatch Declaration of function getChildForPrincipal(array $principal) : \\Sabre\\DAV\\inode should be compatible with function getChildForPrincipal(array $principalInfo) : \\Sabre\\DAVACL\\iprincipal defined in lib/DAVACL/AbstractPrincipalCollection.php:73\nIn AbstractPrincipalCollection we have the signature\nphp\nabstract function getChildForPrincipal(array $principalInfo) : \\Sabre\\DAVAC\\IPrincipal;\nand we're overriding that in CalendarRoot with\nphp\nfunction getChildForPrincipal(array $principal) : \\Sabre\\DAV\\INode;\nThe issue is that IPrincipal extends INode and not the other way around. Getting an object of type INode back when you're expecting an object that you can call IPrinciple methods on will cause your code to fail for any methods IPrincipal adds that aren't in INode.\n. @christopherowen I just pushed a patch that'll catch that undeclared variable when you have declare(strict_types=1) enabled on the file. Does that work for you?\n. The strict_types directive is PHP7 only, so if your code isn't on 7 yet, you won't be able to use it (https://wiki.php.net/rfc/scalar_type_hints_v5#strict_types_declare_directive).\nWithout strict_types=1, Phan will consider the type of $important_variable to be bool|null and won't treat it as undeclared. This is a tough situation in that Phan needs to find a balance between proving correctness vs. proving incorrectness and trying to figure out which path is most useful in improving code quality.\nSince Phan doesn't understand conditionals, we also have to consider code such as the following;\n``` php\nif (rand(0, 10) > 5)) {\n    $important_variable = true;\n}\nif (isset($important_variable)) {\n    $use_variable = $important_variable;\n}\n```\nIn a case like this, Phan needs to know that $important_variable is possibly defined and shouldn't complain.\nCan you think of any changes that'd satisfy both cases?\n. Ugh. Fair enough, PHP. Fair enough.\n. @jasonsor: You can get the checkstyle xml format by running phan with the --output-mode checkstyle flag such as with\nsh\nphan \\\n    --directory src \\\n    --directory vendor \\\n    --exclude-directory-list vendor \\\n    --output-mode checkstyle \\\n    --progress-bar\nYou can also convert plan text output to checkstyle format with the included tocheckstyle script such as with\nsh\nphan \\\n    --directory src \\\n    --directory vendor \\\n    --exclude-directory-list vendor \\\n    --output-mode text \\\n    --progress-bar | tocheckstyle\n. @christopherowen You can add a new job and configure it to read checkstyle output as a post-build action.\n\nIs that what you were looking for?\n. Here's a quick guide to how deprecation checks work;\n- We read the @deprecated annotation in Comment.php\n- That ends up getting set on TypedElement which is an object on the hierarchy of classes, methods, functions, properties and constants\n- We catch deprecations in PostOrderAnalysisVisitor and ArgumentType.\n- The error message that is emitted is defined in Issue.\n. Thanks, @Trainmaster.\nWhen running Phan on that code I'm just getting\n179.php:4 PhanUndeclaredProperty Reference to undeclared property \\dateinterval->y\nAny chance you're manually deprecating \\dateinterval somewhere via something like\nphp\n/** @deprecated */\nclass DateInterval {}\nIn any event, Phan doesn't currently track public properties on builtin classes and we should. Thanks again for the report.\n. @Trainmaster Thats really weird. We store the isDeprecated bit as the 32nd bit of a bit vector (See https://github.com/etsy/phan/blob/master/src/Phan/Language/Element/TypedElement.php#L167-L177 and https://github.com/etsy/phan/blob/master/src/Phan/Language/Element/Flags.php#L7) that is shared with php-ast's flags (which take the lower bits).\nGiven that you're on a different architecture than me, this feels a whole lot like the vector is getting corrupted.\nI just pushed https://github.com/etsy/phan/commit/7c39561625e33f914feba6959ebcfc6468f6a509 to bump all the bits up by one. Can you pull that patch down and try again to see if the problem goes away?\n. Any chance you're on a 32-bit system?\nsh\necho '<?php echo (int)pow(2, 33) . \"\\n\";' | php\nprints 8589934592, yeah?\n. Whoa! OK, I'll work on a patch.\n. @Trainmaster Can you try again with the latest patch? Hopefully that'll get rid of the deprecation issues.\n. Great! I'll leave this ticket open to deal with the property issue.\n. @christopherowen I'm not sure I understand what you're asking for. Is there a place we should be publishing a phar file?\n. I see; your'e saying we should upload the Phar there. That makes sense; we can do that.\n. @scaytrase Where do I put the API key?\n. Hi @christopherowen. Can you link to any docs on what the format looks like, or example output we could copy?\n. Thanks, @arjenschol!\n. That configuration looks reasonable enough to me.\nCould you post a sample of the issues in src/wordpress/wp-includes?\nPhan runs in a few passes; the first pass just gets the fully qualified names of classes, methods, functions, constants and properties. A later pass is where the proper analysis happens.\nIssues can be still be emitted for files within directories passed to --exclude-directory-list if there are issues found during the parsing phase. Taking a look at the issues emitted for those files should help determine if thats the case.\n. Related to #248 \nRelated to #142 \n. More details in duplicate issue #469.. Nevermind. This was a false alarm.\n. Hi @oligriffiths \nYou can do the following to suppress the issue;\n``` php\n/* @suppress PhanNonClassMethodCall /\nfunction foo()\n{\n    global $bars;\n    $foo = null;\n    if ($a = 1){\n        return array_pop($bars);\n    }\n    return $foo;\n}\n$foo = foo();\n$foo->bar();\n```\n. Hi @oligriffiths.\nIf you create a .phan/config.php file in the root of your code base (like this one), you can add a config like the one below.\nphp\n    // Add any issue types (such as 'PhanUndeclaredMethod') here\n    // to inhibit them from being reported\n    'suppress_issue_types' => [\n        'PhanNonClassMethodCall',\n    ],\nPhan will automatically read that config file (at .phan/config.php) from the directory that its called from.\nLet me know if there's anything I can help with in setting that up.\n. @oligriffiths Hmm. We don't have support for a whitelist, but you can add all types but that one to the suppression list.\nYou could get the list of things to suppress from cat issues | cut -d ' ' -f2 | sort | uniq to see whats in your output list.\nYou can also just add all types;\n'PhanAccessNonStaticToStatic',\n        'PhanAccessPropertyPrivate',\n        'PhanAccessPropertyProtected',\n        'PhanAccessSignatureMismatch',\n        'PhanAccessSignatureMismatchInternal',\n        'PhanAccessStaticToNonStatic',\n        'PhanCompatibleExpressionPHP7',\n        'PhanCompatiblePHP7',\n        'PhanContextNotObject',\n        'PhanDeprecatedClass',\n        'PhanDeprecatedFunction',\n        'PhanEmptyFile',\n        'PhanNonClassMethodCall',\n        'PhanNoopArray',\n        'PhanNoopClosure',\n        'PhanNoopConstant',\n        'PhanNoopProperty',\n        'PhanNoopVariable',\n        'PhanParamReqAfterOpt',\n        'PhanParamSpecial1',\n        'PhanParamSpecial2',\n        'PhanParamSpecial3',\n        'PhanParamSpecial4',\n        'PhanParamTooFew',\n        'PhanParamTooFewInternal',\n        'PhanParamTooMany',\n        'PhanParamTooManyInternal',\n        'PhanParamTypeMismatch',\n        'PhanParentlessClass',\n        'PhanRedefineClass',\n        'PhanRedefineClassInternal',\n        'PhanRedefineFunction',\n        'PhanRedefineFunctionInternal',\n        'PhanSignatureMismatch',\n        'PhanSignatureMismatchInternal',\n        'PhanStaticCallToNonStatic',\n        'PhanSyntaxError',\n        'PhanTraitParentReference',\n        'PhanTypeArrayOperator',\n        'PhanTypeArraySuspicious',\n        'PhanTypeComparisonFromArray',\n        'PhanTypeComparisonToArray',\n        'PhanTypeConversionFromArray',\n        'PhanTypeInstantiateAbstract',\n        'PhanTypeInstantiateInterface',\n        'PhanTypeInvalidLeftOperand',\n        'PhanTypeInvalidRightOperand',\n        'PhanTypeMismatchArgument',\n        'PhanTypeMismatchArgumentInternal',\n        'PhanTypeMismatchDefault',\n        'PhanTypeMismatchForeach',\n        'PhanTypeMismatchProperty',\n        'PhanTypeMismatchReturn',\n        'PhanTypeMissingReturn',\n        'PhanTypeNonVarPassByRef',\n        'PhanTypeParentConstructorCalled',\n        'PhanTypeVoidAssignment',\n        'PhanUnanalyzable',\n        'PhanUndeclaredClass',\n        'PhanUndeclaredClassCatch',\n        'PhanUndeclaredClassConstant',\n        'PhanUndeclaredClassInstanceof',\n        'PhanUndeclaredClassMethod',\n        'PhanUndeclaredClassReference',\n        'PhanUndeclaredConstant',\n        'PhanUndeclaredExtendedClass',\n        'PhanUndeclaredFunction',\n        'PhanUndeclaredInterface',\n        'PhanUndeclaredMethod',\n        'PhanUndeclaredProperty',\n        'PhanUndeclaredStaticMethod',\n        'PhanUndeclaredStaticProperty',\n        'PhanUndeclaredTrait',\n        'PhanUndeclaredTypeParameter',\n        'PhanUndeclaredTypeProperty',\n        'PhanUndeclaredVariable',\n        'PhanUnreferencedClass',\n        'PhanUnreferencedConstant',\n        'PhanUnreferencedMethod',\n        'PhanUnreferencedProperty',\n        'PhanVariableUseClause',\n. Thanks, @tybulewicz \n. Hi @oligriffiths.\nCan you confirm you're using the latest version of Phan? I fixed some stuff with that somewhat recently (https://github.com/etsy/phan/issues/208). We're now explicitly checking ArrayAccess in https://github.com/etsy/phan/blob/master/src/Phan/AST/UnionTypeVisitor.php#L763-L786\n. @oligriffiths Any chance you're able to able to come up with some sample code that reproduces the issue?\n. Got it. That'd make sense. Thanks!\n. Do you mean by understanding the autoloader and where to find referenced classes? Thats not something that Phan supports right now.\n. Yeah, you'll want to add all directories to directory_list to get them scanned.\nFor vendor code (or stuff you don't want to analyze), you can add it to the directory_list as well as to exclude_analysis_directory_list (such as in Phan's config) to cause those files to be indexed, but not get a full analysis.\n. Thanks!\n. https://github.com/etsy/phan/commit/827f4d936dc442f0e7642a114737e81faab25eb0 should do it.\n. @Trainmaster Thanks for the reports.\nFor this one I changed the test a bit to make it\nphp\n$exception = new \\ErrorException('foo', 0, 1, __FILE__, (int)__LINE_);\nsince __LINE__ is a string.\n. @marco-loche I moved the issue you're seeing to https://github.com/etsy/phan/issues/221. Thanks for reporting.\n. It looks like we can no longer reproduce the issue.\n. Thanks, @kna \n. Looks like there's an issue in the patch. Investigating.\n. Unfortunately, Phan doesn't attempt to understand conditionals like this and won't understand that $foo is an array in the foreach.\n. This would be easier to handle if we merged #424 . Hi @Trainmaster.\nMy hope was to only require pcntl if you're using --processes (n>1) and then check to make sure we have it in https://github.com/etsy/phan/blob/master/src/Phan/ForkPool.php#L45-L47\nI'd prefer to not prevent folks who don't have pcntl compiled in to their PHP to do extra work to use Phan if they don't need to.\n. Oh interesting, I didn't know phpunit depended on it.\nAdding it as a development requirement sounds reasonable.\nTotally unrelated: As a windows user, are you seeing the behavior from https://github.com/etsy/phan/issues/165 ?\n. Thanks!\n. @Trainmaster Let me know if that patch doesn't do the trick to fix the issue.\nThank you so much for the report (and all the others)!\n. @Trainmaster Does this work for you?\n. What a patch. Thanks @ebernhardson!\n. Thanks, @Themodem!\n. Thanks!\n. Can you give an example statement you'd like Phan to pick up?\n. I think we're going to have to leave this one to another project to handle. Adding a SQL parser is out of scope.. Taking a look.\n. @oligriffiths Any chance you could send me the line its failing on with any secret stuff removed or obfuscated?\n. @oligriffiths This is a long shot in that I don't yet understand where the issue is coming from, but can you pull and try it again? The patch https://github.com/etsy/phan/commit/6ac6454086bf054a9d16496dd1f2721a1486e96d makes certain that we aren't in a class, method or function when in the global scope.\n. @oligriffiths Ah, I misinterpreted the trace last time. Can you pull and try again?\n. @oligriffiths  Any chance you have a few minutes to chat on Gitter (https://gitter.im/etsy/phan?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) or in #phan on Freenode?\n. Simplified this as https://github.com/etsy/phan/issues/241 - closing this one.\n. @staabm I'd be happy to see a PR for that feature.\nI imagine we'd add some tracking around https://github.com/etsy/phan/blob/master/src/Phan/Language/Context.php#L100 to mark namespace maps as having been accessed.\n. @staabm: The trouble with that syntax is that we'd have to require it for all data provider test files (https://github.com/etsy/phan/blob/master/tests/Phan/AbstractPhanFileTest.php#L63). Is there a way to set the requirement on just one file?\n. @Trainmaster I merged this in because it solves the issue. I don't have any thoughts yet on how to get this tested, but i'll keep thinking about it and will be happy to merge anything in if you come up with something.\n. Just created a pull request with a proposed testing rig: https://github.com/etsy/phan/pull/246\nDoes this look good to folks?\n. Related to #198 \n. Related to #142 \n. I just pushed a patch for #179. That was a good one to get in there.\n. @Trainmaster I created https://github.com/etsy/phan/releases/tag/0.5 - does that work for you?\n. I'll open this back up once we're closer.. Test case:\nphp\n     1  <?php\n     2\n     3  class C1 {\n     4      public $P1;\n     5      const CONST1 = 42;\n     6      function F1() {}\n     7  }\n     8  function F2() {}\n     9\n    10  $v1 = new c1;\n    11  $v2 = new C1;\n    12  $v3 = $v2->p1;\n    13  $v4 = C1::CONST1;\n    14  $v5 = C1::const1;\n    15  $v6 = c1::CONST1;\n    16  $v7 = c1::const1;\n    17  $v8 = F2();\n    18  $v9 = f2();\n. We now have a pull request for this: https://github.com/etsy/phan/pull/297 - comments welcome.\n. The issue had been that CodeBase::__clone was creating shallow copies of its dependent data. The clone method on CodeBase has been fixed so that it makes a proper deep copy of all of its associated data, however, this made tests extremely slow.\nAs such, I'm going to recommend to folks that they namespace their tests and we'll allow some degree of bleed between tests. Thats not good, but the choice being made is that bleed is better than insane slowness of running the test suite.. @Trainmaster I just pushed https://github.com/etsy/phan/commit/45672dd70cf32b567a2a176b593a25a1cdaaa005 which should suppress the issue, but I'm having a hard time figuring out what would be causing this. Any chance you can see what code is leading to the issue you're seeing?\n. Closing this out since the fix seems to be sufficient.\n. In so far as Phan tries to prove code incorrect rather than proving code correct, and can't tell whats going to happen in this Schr\u00f6dinger's-Variable situation, I'm going to close this issue and hope that some day we add a super-strict config param to Phan.. @cdekok What is the return type of removeValidator defined to be? Does it have an annotation on the method defining a return type? What kinds of types does it return? Does it happen to have a return false in an error case?\n. Thanks!\n. Thanks!\n. Hi @Seldaek.\nThe fix for this one turned out to be unrelated to what you're reporting. We should make that a separate issue, although I'm not convinced that Phan should be as permissive as PHP in this case.. Thanks!\n. Demo: https://3v4l.org/bZ55Z\n. The trouble may be that Phan can't see the brackets.\n0 => AST_DIM [NAME_FQ] #7\n                expr => AST_PROP [NAME_FQ] #7\n                    expr => AST_VAR [NAME_FQ] #7\n                        name => foo\n                    prop => AST_VAR [NAME_FQ] #7\n                        name => bar\n                dim => baz\n. Unfortunately we won't be able to fix this one since we just don't have the bracket info in the AST that we'd need to tell the difference between this and something that was truly incompatible.. @aforsblo: Thanks! Can I convince you to send a PR with a test to make sure we don't undo the fix in the future?\n. @oligriffiths Its been a while since this issue got filed. Any interest in working through this issue together via Gitter? Or should we close it out.\nEither is fine by me.\n. Unfortunately I think this issue is too old to be able to reproduce. I'm going to close this out, but happy to open it up (or a new issue) if we get an issue like this again.. Its the kind of thing that should be brought back in, but it won't be before 1.0 (which I keep thinking is a minute away, but keeps moving back).\nThe trouble is that serializing the massive amount of data that Phan tracks has been very complicated and has significantly slowed down development. It was removed so that every patch wasn't introducing new serialization bugs and required changing sqlite schemas.\n. Thanks!\n. The patch you suggested looked good to me.\nThanks for the report, @pminten!\n. Example: https://3v4l.org/IiH32\nSome Discussion: http://stackoverflow.com/questions/999066/why-does-php-5-2-disallow-abstract-static-class-methods\n. Lovely patch and good test. Thanks!\n. Great feature. Thanks!\n. @pminten I recently changed some stuff in that area of code while working on https://github.com/etsy/phan/pull/297\nAny chance you'd be willing to checkout the generic_classes branch and see if you can reproduce the issue?\n. @glensc: Any chance you remember what you were running when you got the SQLite required exception? Were you perhaps running with the -s CLI option?\nI still have code that requires SQLite in Phan, but we stopped using the feature, so we removed the constraint that the extension should be installed.\n. Hi @glensc. I removed the reference to sqlite in https://github.com/etsy/phan/commit/80ac316b4672dbe6f9c65f4435e67839de2c1335 and for the rest of the dependencies, we check to make sure they're available.\nDoes that take care of what you were hoping for? Happy to open this back up if you think there's something else we should be doing.. @jakoch Were you unable to reproduce it using a Phar built from dev-master? Or were you unable to reproduce it when running without the Phar?\n. @jakoch, @glensc - I created a new 0.6 pre-release with an updated Phar.\nhttps://github.com/etsy/phan/releases/tag/0.6\nWould either of you be willing to try again with that Phar and see if we're doing better now?\n. @jakoch Do you have any more info on that?\nDoes it exit mysteriously when running against Phan itself? Whats the exit code? Do you have assertions enabled?\n. @glensc Good idea. I've updated all of the titles.\n@jakoch I think the issue you had been seeing with the Phar has been fixed via https://github.com/etsy/phan/issues/296 - Can you try and again and confirm that the updated 0.6 phan.phar (https://github.com/etsy/phan/releases/download/0.6/phan.phar) is scanning files as expected?\n. Thanks! The shittier the code the better.\n. The following is a simpler expression of the unanalyzable code.\nphp\n<?php\nfunction f($p) {\n    return $p::CNST;\n}\nI'm going to close this issue, as there just isn't much we can do with it.. Great patch. Thanks!\n. Thanks @ebernhardson !\n. @ebernhardson: Thanks for the patch! I think a config parameter would make sense here. I can imagine someone being upset if they added a call to a deprecated without being warned, not realizing it was within another deprecated method.\n. Hopefully we've cleaned up our assertions since this was reported. If there are specific instances of misuses of assert, please file a new issue so we can fix it up.. Thanks! Hopefully we'll get to a proper fix soon, but for now this patch improves the situation.\n. Thanks!\n. @jakoch I pushed a fix for --project-root-directory not being respected, but I think that may be different from what you're reporting.\nWhat was the command you ran when you got the help text output. Were you passing an argument to -d and --project-root-directory?\n. Just pushed a patch; let me know if there are any issues with it.\n. Thanks @agkozak. I've split that off onto a new issue: https://github.com/etsy/phan/issues/301\n. Here's a test-case for this one;\nphp\n<?php\n$v = new StdClass();\n$v->p = 42;\n. Thanks, @mathroc!\n. Thanks for the report, @valtonia. I'm taking a look now. I'm guessing that this is the same issue as is being reported in the comments on https://github.com/etsy/phan/issues/283.\n. @valtonia I'm unable to reproduce this when running the 0.6 phar on Phan itself via\nsh\nphp ./phan.phar -p\nAny chance you could run it via\nsh\nstrace php ./phan.phar\nand send me a gist of the output? The output will contain file paths, so you may not be able to show it to me if there is proprietary code in there. If thats the case, I might be able to see something if you ran it via the following with the file paths stripped off.\nsh\nstrace php ~/sandbox/phan.phar -p 2>& 1 | cut -d '(' -f1\nThanks!\n. Thanks, @valtonia.\nFrom that trace, I'm seeing a lot of file opening, but none of it is input files. I think the patch I just pushed should fix it on master.\nI applied the same patch to the 0.6 branch and updated the Phar.\nCan you download and run the updated 0.6 phan.phar (https://github.com/etsy/phan/releases/download/0.6/phan.phar) and let me know if that works for you?\nThanks!\n. @valtonia Yeah, that'd be helpful to post it as a separate issue. Thanks!\n. For reference; here's PHP's RFC for generics: https://wiki.php.net/rfc/generics\n. @mindplay-dk I'll switch the syntax from @generic to @template (and @inherits). Thanks!\n. @mindplay-dk I ended up using @extends instead of @inherits since in our case it only refers to the parent class (generic interfaces aren't supported). Does that seem reasonable to you?\n@jazzdan \n\nIf we have a generic collection, and we add disparate types to it, what happens? \n\nThe example you gave (Box<T>) isn't supported here. All types need to be made concrete in the constructor. The only reason for this rule is to simplify the implementation. If we wanted to box an array, we'd have to have a constructor that took an example element (such as new Box(1) or new Box(new DateTime)).\n\nCan we use this functionality to enhance phan's support for typed arrays? Maybe be able to specify the array key type? I'm thinking it could be represented internally as array.\n\nMy plan is to leave typed arrays alone for the time being and treat them as a separate system. Eventually merging it in and using the syntax you suggest seems reasonable, though.\n\nCan you annotate a parameter as accepting a generic class, but specify a concrete type?\n\nI'm not sure if this works right now (gotta write some tests), but yes, you should be able to specify parameter types via something like the following.\nphp\n/**\n * @param Stack<int> $p\n*/\nfunction f($p) {}\n\nAnything weird to consider with generic interfaces?\n\nGeneric interfaces aren't supported by this patch.\n\nIt would be cool to have type constraints.\n\nWe'll leave that for the future.\n. This has been merged into origin/master (https://github.com/etsy/phan/commit/1121ab9f2a94b523e6b889f60698659f7a999d03) with a config flag generic_types_enabled so it can be shut down.\n. This discussion has been cleaned up and copied over to https://github.com/etsy/phan/wiki/Generic-Types\n. @mindplay-dk That makes sense. Thanks!\n. I just un-merged this from master as it slowed down build times significantly.\n. This has been merged in to origin/master (in some kind of demo beta form). We'll create new PRs as we fill out the feature set.\n. @valtonia Can you git pull and see if the patch works for you?\n. Phan is picking this up as PhanSyntaxError, which looks to be correct for PHP7.\nt> cat 299.php                                                                                                                                      asm\n<?php\nclass C {}\n$v =& new C();\nt> phan 299.php                                                                                                                                     asm\n299.php:3 PhanSyntaxError syntax error, unexpected 'new' (T_NEW)\n299.php:3 PhanSyntaxError syntax error, unexpected new (T_NEW). Thanks!\n. Thanks for the report @steffenweber.\nI pushed a patch that may or may not help the issue. Any chance you could pull in that patch and try again?\n. Nevermind. I cloned zend-mail and its not working. Stand by.\n. @steffenweber. I think that latest patch should do the trick. Thanks again for the report, and let me know if anything else goes wrong.\n. Thanks, @mathroc. Let me know if that patch doesn't do the trick.\n. Thanks again, @mathroc - let me know if this patch doesn't do the trick.\n. Here's a simpler example expressing the issue.\n``` php\n<?php\nnamespace NS1\\A {\n    class C {}\n}\nnamespace NS2 {\n    use NS1\\A;\nfunction f(\\NS1\\A\\C $p) {}\nfunction g(A\\C $p) {}\n\n}\n```\nIn \\NS2\\g, we're making the parameter type fully qualified against the local namespace before doing so against the using clause.\n. Here's a partial, but broken implementation: https://github.com/etsy/phan/pull/310 (just for my own notes). The test case 0136_alias_with_suffix.php fails with that patch.\n. I can't reproduce this issue anymore. Adding the test case that had previously expressed the issue.. Ah, ok. Phan has no support for Closure::bind (http://php.net/manual/en/closure.bind.php) at this point.\nI've created a separate ticket for that issue: https://github.com/etsy/phan/issues/309.\n. If we can confirm that the global issue was fixed by updating the file order, I'll close this ticket and try to get to #309.\n. In PreOrderAnalysisVisitor we let ConditionVisitor update the scope with a new type for the variable $v.\nWe need to let ConditionVisitor update the outer-scope when creating variables, but need to only be updating an inner-scope when setting types on variables in cases like this.. Hi @aik099.\nUnfortunately, the PHP AST doesn't expose comments on lines. We only get comments from declarations (functions, classes, methods, constants, properties).\nPhan has no way to see the @var declaration.\nYou can, however, cast $email via a special cast that Phan supports whereby if you do a conditional on an instanceof check against a variable, that variable will be cast to the checked type within the branch.\nIf your testMethod method looked like the following, I think you'd get what you wanted.\nphp\n   public function testMethod()\n    {\n        $email = $this->makeClass('....');\n        if ($email instanceof kEmail) {\n            $email->sendEmail();\n        }\n    }\nDoes that work for you?\n. As @rlerdorf pointed out, Phan does support @var declarations on the method doc-block.\nUnfortunately, the way I've implemented it makes it essentially useless.\nWith the following code\nphp\n    /** @var kEmail $email */\n    public function testMethod()\n    {\n        $email = $this->makeClass('....');\n        $email->sendEmail();\n    }\nThat @var declaration will initialize $email to be of type kEmail, but as soon as the assignment happens, its type will be overwritten as kBase.\nThe alternative implementation for @var declarations would be for them to be fixed once declared (as in most other typed languages). In that case, we'd probably want to emit an issue for assigning a kBase to a variable of type kEmail. Despite the difficulties with this approach, and how counter it is to the PHP way, I imagine we'll want to implement this method rather than what we have given that what we currently do is largely useless.\nAnother piece that may help here is implementing easier casts. Right now we only support instanceof casts with a conditional, which folks often find objectionable given its verbosity. Implementing something like assert($email instanceof kEmail) to force $email to be of type kEmail may be a a little prettier, but still isn't great.\n. Since this thread was started, we also added the ability to cast a variable via an assertion.\nphp\nfunction f() {\n    $v = get_thing_of_unknown_type();\n    assert($v instanceof DateTime);\n    // $v is now known to Phan as a variable of type DateTime\n}\n. Thanks, @Sentoki. Patch merged.\n. Thanks, @a3020!\n. Hi @muglug. Thanks!\nOut of curiosity, is this from running s/bool/false/, or are these from items that explicitly have a false return type?\n. Great. Thanks!\n. Thanks, @black-silence!\n. Thanks, @ingocnito !\n. Thanks, @ryutaro-brainlabs !\n. @roba269 Can you try this again with the dev-master version of Phan? I want to see if this issue has been fixed since you first reported it a long time ago. Thanks!\n. Thanks @Sentoki.\n@kellegous Any chance you could re-test this? It looks like it got fixed somewhere between now and when you reported it via magic.\n. Thanks, @mathroc!\n. Thanks @muglug!\n. Thanks, @Sentoki.\nJust pushed a test to show that we can no longer reproduce this issue.\nI'm not sure how or when it got fixed. Please let me know if this issue comes back.\n. This has been merged in with some changes. Its disabled by default given the expected speed impact, but will consider enabling it once we investigate more.. Slightly simpler demo of the issue:\nphp\n<?php\nnamespace NSA {\n    class CA {}\n}\nnamespace NSB {\n    use NSA as Alias;\n    $v = new Alias\\CA();\n}\n. Thanks @davidhigler. I just pushed a patch, but wasn't able to test to make sure it works for you.\nCan you re-open this issue if it doesn't work?\n. Thanks, @jchatard. I just pushed a patch that may help, can you let me know if that does the trick?\nIt seems like your code-base is a good stress-test on Phan. Keep the issues coming.\n. Hi @apflieger. I pushed a fix for this that works on the demo project you posted. Can you confirm that this fix works?\nThanks!\n. Hi @michielrensen. Can you confirm that https://github.com/etsy/phan/pull/335 fixed this issue?\nThanks!\n. Thanks @michielrensen!\n. Hi @Seldaek. I just pushed https://github.com/etsy/phan/commit/3b8dbbc5c3cbf8dcfdce0bb752275eaba8ef0eea which adds the ability to write plugins that get a chance to update the CodeBase before most analysis happens. This lets you set the return types on functions/methods so you could tell what things like createMock are doing.\nI created this demo patch that shows a method C::stringToClass for which a plugin (PreAnalysisPlugin) assigns it a return type based on whats passed into it.\nDoes that help?. @Seldaek: Oops, here's the patch I referred to https://gist.github.com/morria/8ea8b4fe5dceb932fc65dbbef19a76f6. Hi @christopherowen. Can you try this again on the latest dev-master version of Phan and see what happens? Thats code has been changed a bunch since 0.6.\n. Sure. I'll do a 0.7 shortly.\n. @christopherowen Unfortunately, there aren't any tools that I'm aware of for linearizing the graph of dependencies.\nHere at Etsy we just started with a script that generates a list of files ordering the output by how we know various directories generally depend on each other and then manually tweaking it as needed.\nPhan does its own partial re-ordering when running with multiple processes in order to mitigate some dependency issues: https://github.com/etsy/phan/blob/master/src/Phan/Ordering.php#L33-L131\n. This is a tough one.\nIn this case, $dbh is guaranteed to exist, but Phan can't tell the difference between your example and the following.\n``` php\ntry {\n    $v = always_throw_an_exception();\n} catch (Exception $exception) {\n    // do nothing.\n}\nprint $v;\n```\nIn the example given, $v would be undefined. Because Phan isn't smart enough to understand when things within a try are guaranteed to be run successfully, it takes the short-cut of saying that anything defined within a try block may be undefined outside of the block (see code here: https://github.com/etsy/phan/blob/master/src/Phan/Analysis/ContextMergeVisitor.php#L81-L163).\nWe won't be able to change this short-cut any time soon, but I'll mark this as an enhancement that we'll be able to support once Phan grows up a bit.\n. You can also just pre-define the variable to force it to be defined outside of the try.\n``` php\n$v = null;\ntry {\n    $v = always_throw_an_exception();\n} catch (Exception $exception) {\n    // do nothing.\n}\nprint $v;\n```\n. Thanks, @muglug!\n. Phan currently checks for NoOp Variables, but only of the following form.\nphp\nfunction f() {\n    $v;\n}\nand doesn't track variables to make sure they're used eventually. That'd be a nice feature to add.. Sorry for not replying in time. Your example is correct. Thanks for posting it.\n. @srcspider The /** @return static */ annotation is supposed to do what you expect it to. Do you have an example where it doesn't?\nRunning Phan on the following should result in no issues being emitted.\nphp\n<?php\nclass A {\n    /** @return static */\n    static function f() {\n        return new static;\n    }\n}\nclass B extends A {}\nfunction f(B $p) {}\nf(B::f());\n. I'll fix the docs. Thanks, @srcspider.\n. Thanks, @muglug!\n. There's a pull request open for comments here: https://github.com/etsy/phan/pull/656\n. Does anyone here who uses any PHP IDEs have any comments on what kinds of expectations there are out in the wild about how @internal works?\n\nDoes your IDE treat @internal as private only within the element's namespace?\nDoes your IDE allow access to @internal elements from parent or child namespaces?. This feature was merged onto master via a396c27. Merged in. Thanks!\n. Thanks, @TysonAndre!\n. Thanks, @TysonAndre!\n. @adrian-enspired  There is a config option for ignoring annotations: https://github.com/etsy/phan/blob/master/src/Phan/Config.php#L162-L166\n\nYou can add that to your .phan/config.php file to prevent them from being read. Be careful, though, because it also disables the reading of @suppress annotations. Its a double-edged sword.\n. This patch looks good (beside the one request to move the IDs to Issue.php). Thanks @TysonAndre!\nWould it be possible to make that change before I merge it in?\n. Thanks, @TysonAndre!\n. Hi @rmunch.\nUnfortunately we don't have that feature now, but it is a good idea. As you found, the exclude_analysis_directory_list is meant to set directories that should be parsed, but not analyzed, so parsing issues still show up.\nWe probably won't get to implementing this feature until post 1.0 (unknown release date), but feel free to submit a PR.\nOne option for right now might be to generate a file list for analysis and then do some post-processing on it to grep -v a few directories.\n. Confirmed with files\nphp\n<?php\nclass C1 {}\nand\nphp\n<?php\nclass C1 {\n    public static function f1() {}\n}\nC1::f1();\nwith output\n370_b.php:2 PhanRedefineClass Class \\C1 defined at 370_b.php:2 was previously defined as Class \\C1 at 370_a.php:2\n370_b.php:5 PhanUndeclaredStaticMethod Static call to undeclared method \\C1::f1. @muglug Did you run this with the dev-master release of Phan?\nI'm unable to reproduce this issue of of origin/master.\nsh\n378.php:5 PhanUndeclaredProperty Reference to undeclared property \\A->bar\nIf you're still able to produce this issue, please let me know and open this issue back up. Thanks!\n. Hi @muglug. Can you confirm you're on dev-master when seeing this issue?\nI'm running off of the current origin/master (108a496686fffdc50bf7bbacfea3158c1789ac94) and am unable to reproduce this issue. I don't have any issues emitted for this code when run under Phan.\nCan you try again to reproduce this with the latest Phan and open this issue back up if you're still seeing it? Thanks!\n. The following code is able to reproduce the issue for me\nphp\n<?php\nclass C {\n    function f() {\n        return [ 24 ];\n    }\n}\n(new C)->f()[1] = 42;\nwith the following output.\n```\n/home/amorrison/development/phan/src/Phan/Analysis/AssignmentVisitor.php:92 () Unknown left side of assignment in meth.php:7 with node type AST_METHOD_CALL\n0  {closure}()\n1  assert() called at [/home/amorrison/development/phan/src/Phan/Analysis/AssignmentVisitor.php:92]\n2  Phan\\Analysis\\AssignmentVisitor->visit() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:237]\n3  Phan\\AST\\Visitor\\KindVisitorImplementation->visitMethodCall() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/Element.php:126]\n4  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n5  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/amorrison/development/phan/src/Phan/Analysis/AssignmentVisitor.php:220]\n6  Phan\\Analysis\\AssignmentVisitor->visitDim() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/Element.php:82]\n7  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n8  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/amorrison/development/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php:113]\n9  Phan\\Analysis\\PostOrderAnalysisVisitor->visitAssign() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/Element.php:40]\n10 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n11 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/amorrison/development/phan/src/Phan/BlockAnalysisVisitor.php:123]\n12 Phan\\BlockAnalysisVisitor->visit() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:42]\n13 Phan\\AST\\Visitor\\KindVisitorImplementation->visitAssign() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/Element.php:40]\n14 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n15 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/amorrison/development/phan/src/Phan/BlockAnalysisVisitor.php:113]\n16 Phan\\BlockAnalysisVisitor->visit() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n17 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/Element.php:156]\n18 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/amorrison/development/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n19 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/amorrison/development/phan/src/Phan/Analysis.php:337]\n20 Phan\\Analysis::analyzeFile() called at [/home/amorrison/development/phan/src/Phan/Phan.php:180]\n21 Phan\\Phan::Phan{closure}() called at [/home/amorrison/development/phan/src/Phan/Phan.php:221]\n22 Phan\\Phan::analyzeFileList() called at [/home/amorrison/development/phan/src/phan.php:43]\n23 require_once(/home/amorrison/development/phan/src/phan.php) called at [/home/amorrison/development/phan/phan:2]\n``. Thanks, @arjenschol!\n. Thanks @alex-vlasov!\n. Thanks @alex-vlasov!\n. Thanks again, @alex-vlasov!\n. Thanks, @muglug!\n. Phan reads@var` annotations on the properties themselves such as in the following.\n``` php\nclass MasterCompanyEntity extends KountaActiveRecord implements DuplicatableInterface {\n/** @var string */\npublic $companyName;\n\n/** @var string */\npublic $locale;\n\n}\n```\nYou can read a bit more about that here.\n. Thanks!\n. Thanks, @alex-vlasov \n. Thanks for another lovely patch, @TysonAndre!\n. Thanks, @TysonAndre!\n. Hi @TysonAndre.\nTypes assigned to superglobals are meaningful in small snippets, but IMHO will be noise in any real working codebase. Most codebases are going to have tons of entry point that run in isolation and as such will have sloppy assignments to superglobals that will collide in very confusing ways when the codebase is analyzed as a whole.\nMy guess is that a fix for this would be worse than leaving it as it is, despite a fix being possibly more correct.\nI'm going to close this issue as will-not-fix. Feel free to disagree if you think thats a bad idea.. Thanks, @TysonAndre!\n. I'll close this out.\n@krzysiekpiasecki: Let me know if this isn't actually resolved and I'll open it back up. Thanks!\n. Awesome. Thanks @TysonAndre. Should we close out #399?\n. Hi @TysonAndre. I'm not understanding what the issue is here.\nWould you be able to provide some example code and some expected or unexpected output?\nCurrently, Phan doesn't emit any issues for the following code. Should it?\nphp\n<?php\n$xmlstr = <<<XML\n<?xml version='1.0' standalone='yes'?>\n<movies>\n <movie>\n  <title>PHP: Behind the Parser</title>\n  <characters>\n   <character>\n    <name>Ms. Coder</name>\n    <actor>Onlivia Actora</actor>\n   </character>\n   <character>\n    <name>Mr. Coder</name>\n    <actor>El Act&#211;r</actor>\n   </character>\n  </characters>\n  <plot>\n   So, this language. It's like, a programming language. Or is it a\n   scripting language? All is revealed in this thrilling horror spoof\n   of a documentary.\n  </plot>\n  <great-lines>\n   <line>PHP solves all my web problems</line>\n  </great-lines>\n  <rating type=\"thumbs\">7</rating>\n  <rating type=\"stars\">5</rating>\n </movie>\n</movies>\nXML;\n$movies = new SimpleXMLElement($xmlstr);\necho $movies->movie[0]->plot;. Please open this back up if we're able to get more details. Thanks!. This is a really interesting idea.\nOne big win would come from our current special case for conditional instanceof checks turning into casts:\nphp\nif ($v instanceof DateTime) {\n    // $v is now of type DateTime\n}\nThe check is very dumb and doesn't handle any additional logic like if (true || $v instanceof DateTime) { ... }. The proposed patch would resolve that problem.. @TysonAndre Merging your patch in would be great. Let me know if there's anything I can do to help.. Merging #424 would make this much easier.. Hi @felixfbecker. Interesting idea.\nPhan's parser for comments is in Comment.php and depends on a bunch of stuff like \\Phan\\Type, \\Phan\\UnionType, and a bunch of types of Type. It'd also depend on our implementation of \\Phan\\FQSEN (Fully Qualified Structural Element Name) and its subtypes.\nYou can read more about Phan's types in a few wiki articles; Union Types, Generic Types.\nDo you have any interest in putting together a demo of Phan working with that rig moved to a new repo? If not, we can try to get to it eventually.. @felixfbecker: After looking at it a bit more, it looks like pulling out the the comment parsing and type code would turn into just about everything within src/Phan/Language and some other bits of code.\nAlthough the branding is a bit funny, it might make the most sense to depend on Phan directly and tweak it to make it possible to avoid needing the php-ast extension to use the Type code.. Love this patch. Thank you so much @TysonAndre!. Simplified test case\nphp\n/** @param string[] $p */\nfunction f($p) {}\nf([42]);. Thanks @gitetsu!. Thanks, @nikic and @TysonAndre.. Thanks, @TysonAndre.. Hi @TysonAndre. I just created a PR for an alternative implementation as #433. Can I get your comments on that?. Having merged #433, I'm closing this one out.\nThanks @TysonAndre!. Hi @ArtemGordinsky.\nWhen passing Phan a directory to scan, its hard-coded to look just for *.php files, however, you can manually populate a file list and pass it to Phan.\nsh\nfind . -type f -path '*.extension' > filelist.txt\nphan --file-list filelist.txt\nDoes that help?. Hi @ArtemGordinsky. A CLI and Config option for specifying a set of filename extensions would be cool. Thanks!. Hi @elliotchance.\n@TysonAndre is correct in that PHP doesn't make comments available when they're not from class, method, function, property, or constant declarations and as such Phan won't be able to see annotations on assignments.\nAs mentioned, assert($site instanceof SiteEntity) will work for casting that variable. You can also do the following.\nphp\nif ($site instanceof SiteEntity) {\n    $company = $site->getCompany();\n    // ...\n}. You're right. I just cut 0.7: https://github.com/etsy/phan/releases/tag/0.7\nSorry about the delay. Enjoy!. Thanks, @localheinz!. Thanks, again!. Thanks again, @TysonAndre!. I just created a 0.8.0 release that works with PHP version 7.0.x syntax.\nThe dev-master release is now tracking PHP version 7.1+ syntax.. The issue here is that when doing a non-quick-mode re-analysis of a method call, we iterate over the arguments to update parameter types. When there are no parameters, we don't re-do the analysis properly.. Closed by https://github.com/etsy/phan/commit/af991aff1ea867c946a3ad4d14b68cb297fdd517 (which has the wrong issue in the message).. Great idea @ebernhardson.\nI think I'm comfortable solving just this special case. Solving just for a single throw and not any kind of branching will add some complexity in explaining the rule to folks, but the frequency of this special case is probably high enough to justify it.\nWas there anything else you wanted to add to this patch, or shall I merge it?. Thanks, @dereckson!. This is now fixed on origin/master and confirmed with the following example code.\nphp\n<?php\nclass C1 {\n    /** @var C1 */\n    private $p;\n    function f1(?C1 $p = null) {\n        $this->p = $p;\n    }\n}. I'm having a hell of a time trying to guess what kind of code would cause this to happen. If anyone has any ideas on what part of Laravel is triggering this, I'd love to know.. Awesome. Thanks @dereckson! Let me know if you'd like any help with the patch.. Right now we add B to $a's UnionType instead of replacing it (code).\nIt should work to instead replace $a's type within an instanceof conditional or assertion.. Thanks, @TysonAndre!. Thats the intention (for $args to be an array of arrays) and is what we're testing for. \nIn the tests, we're making sure that \nphp\n/** @param array $args */\nfunction f(...$args) {}\nf(42, 'string');\nf([42], ['string']);\nemits issues for the first call, but not the second\n+%s:%d PhanTypeMismatchArgument Argument 1 (args) is int but \\f() takes array defined at %s:%d\n +%s:%d PhanTypeMismatchArgument Argument 2 (args) is string but \\f461() takes array defined at %s:%d\nThats the expected behavior, right? Or am I misunderstanding stuff.. I've decomposed this issue into sub-tickets related to the new 7.1 milestone and the 7.1 project.\nHopefully this makes it easier to track what's left to do. I'll be cleaning up those tickets to better reflect the state of the 7.1 branch shortly.. @TysonAndre I added a test in https://github.com/etsy/phan/commit/470faf636c0f76b9fad37da7c301fdcba6344018 to make sure callable casts were working OK.\nDo these tests cover the issue you were describing? If so, I may have already resolved this issue with some recent changes to the type system.\nThe test that was added makes sure that the following has zero issues being emitted.\nphp\n?php\nfunction f1(callable $callable) {}\nf1(function () {});\nf1('f1');\nclass C1 {\n    static function f1() {}\n}\nf1(['C1', 'f1']);\nf1([new C1, 'f1']);. @TysonAndre I missed a part of what you were suggesting in this issue.\nI don't think we should be allowing callable cast to array. The following code should surely emit a type issue.\nphp\nfunction f(array $p) {\n  return $p[0];\n]\nf(function () {});. Closing as a dup of #204.. Thanks @TysonAndre. Sorry about that one.. Thanks!. Hi @algo13. You should check out the 7.1 branch where we're using 35.\nWe're not totally done with 7.1 support, but aren't terribly far away.. The change to array_map makes sense to me, although I get that its a borderline case. Thanks, @muglug.\n@TysonAndre: If you feel strongly about having array_map declared to return int[]|string[], let me know, although I suspect that the correct answer is to call this a sub-problem from the want to have UnionType generics like (int|string)[].. Closing this out. Please open it back up if we're able to get more info on this.. This was resolved in the 7.1 branch and tested by 0241_nullable_71.php.. From @TysonAndre\n\n[W]hat's the planned difference between Foo|null and ?Foo in terms of where violations would be emitted? (E.g. are there config settings which would change that?)\n\nThe void return type is expected to behave exactly as the /* @return void / doc-block return type behaved previously in Phan. An issue will be emitted if the method or function returns anything, and an issue should be emitted from the call-site if a return from the method or function is assigned to anything.. See https://wiki.php.net/rfc/short_list_syntax and http://php.net/manual/en/migration71.new-features.php for details.. This was resolved on the 7.1 branch via the 0248_destructure.php test.. This issue is related to #455.. The test 0246_iterable.php tests the new iterable behavior.. @muglug: Good catch. Just pushed a patch to correct that.. Phan isn't able to get as far as folks will want it to get with keys in lists.\nIn so far as Phan only supports single types for generic arrays (such as int[] or string[], but not (int|string)[]), and in so far as Phan doesn't store values, there isn't anything we can do with a mixed type array when destructuring it.\nFor instance, consider the following code.\nphp\n$v1 = ['k1' => 1, 'k2' => 2];\n['k1' => $v2, 'k2' => $v3] = $v1;\nIn this case, we know that the type of $v1 is int[] and as such are able to tell that the types for $v2 and $v3 are both int.\nNow, consider the following.\nphp\n$v4 = ['k1' => 1, 'k2' => 2];\n['k1' => $v5, 'k2' => $v6] = $v4;\nIn this case, Phan can only tell that $v4 has the type array (which can be thought of as mixed[]). When destructured in the following line to $v5 and $v6, all we can say that each is of the type mixed.\nSorry.. @TysonAndre, @muglug, @ebernhardson, @dereckson, @localheinz, @rcatlin: As folks with recent pull requests, I wanted to make sure you got a chance to comment on this thread. Any thoughts?. @localheinz: The intention would be try to get a release of Phan out as close as we can to any new minor version (but not micro-version) of PHP as we can. It'd be cool if we could have support for new language features as soon as PHP ships them, but as was the case with 7.1, we won't always get it on time.\nLeaving the mapping up to a description somewhere is doable, but the idea of tracking PHP's major and minor is to make it a bit more guessable which syntax is supported by Phan for a given version, and making it easier to say things like \"give me the latest stable version of Phan that supports the 7.1 syntax\" in Composer.\nWe generally prefer folks to track origin/master when using Phan (as this is a very testable piece of software, so bleeding edge is fairly safe). That said, as of the creation of the 7.1 branch of Phan, folks will have to choose which syntax they want their code tested against.. Alright, it sounds like I'm getting talked out of tracking PHP's versions and instead relying on a good README and a proper composer.json file to let folks know about which versions of Phan support which versions of PHP.\nInstead of the proposed plan, how about we do the following instead.\n\nUse normal semantic versioning.\nCreate a 0.8 release of Phan that supports PHP 7 (and not 7.1) syntax.\nMerge the 7.1 branch into origin/master and continue create a 0.9 release.\nFor as long as is reasonable, back-port fixes to the 0.8.x branch.\n\nSound good?. @tersmitten It could be the case that you're running Phan using a version or configuration of PHP thats different than what you're using live.\nYou'll want to make sure that the version of PHP and its configuration has the PDO and Soap extensions loaded when running Phan. It it does, Phan will be able to find their signatures and make them available while scanning your code.. @tersmitten Aha, yep, that'll do it.\nAnother thing you could do would be to add stubs for the missing signatures.\nIf you create a directory such as .phan/stubs/, add a file PDOException.php, and reference the directory from .phan/config.php under directory_list, the version of Phan running on the version of PHP within the container will be able to pick it up.\nThe stub PDOException.php would look need to look something like the following.\nphp\n<?php\nclass PDOException {}\nAn even better option would be to use the PDO stub provided by JetBrains/phpstorm-stubs. Thanks, @mathroc!. Thanks!. Thanks!. This type of issue is explicitly ignored by Phan. Our philosophy is to try and prove incorrectness rather than correctness. Because this could possibly work, Phan lets it slide.\nThe reasoning behind the philosophy is the belief that in order to have utility, Phan needs to be capable of being very permissive on large sloppy code bases that didn't necessarily start life with strict types.\nI imagine the longer term direction we'll want to take is to create a mode with greater strictness. For now, stuff like this will slide.. @ebernhardson One thing you could do would be to create a .phan/stubs directory where you could drop files that contain the interfaces that aren't otherwise accessible, and then add the stubs directory to the directory_list in your .phan/config.php file.\nI wrote up a wiki article on this with some more details.. Hi @fkooman.\nCan you run the following script and let me know what it outputs?\nphp\n<?php\nfunction reflect($function_name) {\n    $f = new \\ReflectionFunction($function_name);\n    print \"$f\\n\";\n    print_r($f->getParameters());\n}\nprint \"strlen\\n==============\\n\";\nreflect('\\strlen');\nprint \"\\n\\Sodium\\compare\\n==============\\n\";\nreflect('\\Sodium\\compare');\nMy guess is that \\Sodium\\compare isn't accurately representing its parameters via \\ReflectionFunction.. Thanks, @fkooman.\nYeah, so \\Sodium\\compare is reporting that it only takes a single parameter string.\nIf I'm reading this correctly, it looks like its defined to take a single string rather than two strings (which would be AI_TwoStrings).\nYou might want to check with the developers over there to see if maybe its defined incorrectly.. Thanks, @TysonAndre!. Thanks!. Thanks, @muglug!. Thanks @TysonAndre!. Hi @mrgeneralgoo.\nThe trouble here is that Phan isn't smart enough to know that $a is guaranteed exists in that finally block.\nConsider the following code.\nphp\ntry {\n    $a = throwThrowable();\n} catch (\\Exception $exception) {\n    $a = 2;\n} finally {\n    $c = $a;\n}\nIn this example, that first assignment won't be made if that method throws a \\Throwable, so $a won't be defined, and that catch won't execute given that a \\Throwable isn't necessarily an \\Exception. In this case, when we get to the finally branch, $a will not be defined.. Hi @YuraLukashik.\nI just created a 0.9.0 release which should now be available via composer (and on packagist.org).\ncomposer require --dev \"etsy/phan:0.9\"\nLet us know if you run into any issues using it.. Related to #471 . Yup; this one is the result of $sParam originally being defined as a string, but then being overridden with a less strict type (none).\nphp\n     1  <?php declare(strict_types=1);\n     2  abstract class C560_1 {\n     3      /** @param string $p */\n     4      abstract public function f($p);\n     5      abstract public function g(string $p);\n     6      abstract public function h($p);\n     7  }\n     8  class C560_2 extends C560_1 {\n     9      public function f($p, $p1= null) {}\n    10      public function g($p, $p1= null) {}\n    11      public function h($p, $p1= null) {}\n    12  }\nThe code above emits issues only for the overrides of f and g, but not h.\n560.php:9 PhanParamSignatureMismatch Declaration of function f($p, mixed|null $p1 = null) should be compatible with function f(string $p) defined in 560.php:4\n560.php:10 PhanParamSignatureMismatch Declaration of function g($p, mixed|null $p1 = null) should be compatible with function g(string $p) defined in 560.php:5\nI'm going to close this issue out as a dup of #374.. Hi @TysonAndre. Is there any reason you removed the branch? Are you planning on splitting it out into smaller patches?. @TysonAndre Did you not intent to close these two as well?\nhttps://github.com/etsy/phan/pull/573\nhttps://github.com/etsy/phan/pull/572. > I'm not really sure how complete the other maintainers would want support for class_alias to be before adding it to a release.\nAs class_alias is a thing that we've heard a few reports of over time as being an annoying edge case, my personal preference is to have something, even if its not perfect.\nI like the idea of emitting a PhanDuplicateClass issue if it overwrites a known class. Since we're doing this during the parsing phase, it'll be \"random\" (or rather, a function of file ordering) if the issue is emitted during the aliasing or at the declaration of the class, but I'm fine with that. Adding a new issue PhanDuplicateClassAlias might be confusing since it'll random if the issue is on the declaration or alias.\n\nLong term, there should be a step after the parseFiles phase but before the analyzeClasses/analyzeMethods phase, when all of the classes have been parsed\n\nPhan does a funny thing now which is to defer \"hydration\" of classes until the class is requested. We used to scan all classes before the analysis phase, but we got a nice speedup by deferring it until after Phan has forked off the sub-processes for analysis.\nIf we choose to do that hydration serially so that we have full access to the classes before analysis, we should just be aware of the hit on speed we'll be taking.\n\nAnd there can technically be a class_alias of class_alias of a class_alias ...., which also makes a complete implementation harder\n\nIf we get bug reports from folks saying that something broke when they aliases class_alias, I'll be fine with saying that we can't help them in this situation.. Looks good to me.. Looks good to me. Feel free to merge it.. @TysonAndre Should we change @PhanForbidUndeclaredMagicProperties to @phan-forbid-undeclated-magic-properties so that we're consistent with our usage with camel casing vs. hyphens?. A few comments added, but otherwise looks good to me.. Great patch. Looks good to me.. I just wanted to add a note that anything we do that simplifies what plugins look like would be a win. I'm not super happy with how large and complicated the current boilerplate is.. Thanks, @adambaratz!. Thanks, @adambaratz!. Just published https://github.com/etsy/phan/releases/tag/0.9.1. Shoot. I forgot to do that for 0.9.1. Thanks for the reminder @TysonAndre.\nI created a new Wiki article with a checklist for creating a new release. Feel free to update that with any other instructions that'd be helpful.\n. I like the proposed implementation that allows for sub-classes. Determining types of course has a major impact on performance, and avoiding extra conditionals and loops over plugins will be a win. We'll just have to make sure folks understand that you only get one UnionTypeVisitor override per project.. Hi @TysonAndre. I just did a cursory read of the patch and it looks good to me. I buy that there is a difference between undeclared static vs. non-static properties that will be important to call out.. We currently read .phan/config.php values (from here) within Phan\\Tests\\PhanTest.\nAn easy path would be to create a new AbstractPhanFileTest suite that points to a new directory with the weak config.. @TysonAndre I see that you're still working on this patch, but I just wanted to say that I'm really excited for this work. Folks have been asking for access to \"real\" types for awhile. This will be a huge improvement.. Related-ish: #628 \n. Thats a good idea, however, I imagine it'd make it easier if we exported the stubs as PHP rather than JSON to minimize the need for an additional parser.\nTo avoid any additional dependencies, creating a separate CLI tool from Phan makes sense, perhaps mkstubs -e memcached.\nJust to try it out to see what it'd look like, I put this demo together that just prints out stubs for all classes in the environment:\n``diff\ndiff --git a/mkstubs b/mkstubs\nnew file mode 100755\nindex 0000000..34ab3ce\n--- /dev/null\n+++ b/mkstubs\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env php\n+<?php declare(strict_types=1);\n+\n+assert(\n+    (int)phpversion()[0] >= 7,\n+    'mkstubs requires PHP version 7 or greater. See https://github.com/etsy/phan#getting-it-running for more details.'\n+);\n+\n+assert(\n+    file_exists(__DIR__ . '/vendor/autoload.php') || file_exists(__DIR__ . '/../../../autoload.php'),\n+    'Autoloader not found. Make sure you runcomposer install` before running Phan. See https://github.com/etsy/phan#getting-it-running for more details.'\n+);\n+\n+require_once(DIR . '/src/Phan/Bootstrap.php');\n+\n+$code_base = require_once(DIR . '/src/codebase.php');\n+\n+$class_map = $code_base->getClassMap();\n+\n+foreach ($class_map as $fqsen => $class) {\n+    print $class->toStub($code_base) . \"\\n\";\n+}\ndiff --git a/src/Phan/Language/Element/ClassConstant.php b/src/Phan/Language/Element/ClassConstant.php\nindex fd0745d..a8d092c 100644\n--- a/src/Phan/Language/Element/ClassConstant.php\n+++ b/src/Phan/Language/Element/ClassConstant.php\n@@ -50,4 +50,8 @@ class ClassConstant extends ClassElement implements ConstantInterface\n         return $string . 'const ' . $this->getName();\n     }\n\npublic function toStub(\\Phan\\CodeBase $code_base) : string {\nreturn \"    \" . $this->__toString() . \";\";\n\n}\n+\n }\ndiff --git a/src/Phan/Language/Element/Clazz.php b/src/Phan/Language/Element/Clazz.php\nindex cda772e..9843774 100644\n--- a/src/Phan/Language/Element/Clazz.php\n+++ b/src/Phan/Language/Element/Clazz.php\n@@ -1766,6 +1766,31 @@ class Clazz extends AddressableElement\n         return $string;\n     }\n\n\npublic function toStub(CodeBase $code_base) : string\n\n{\n$signature = $this->__toString();\n+\n$stub = $signature;\n+\n$stub .= \" {\\n\";\n+\n$stub .= implode(\"\\n\", array_map(function (ClassConstant $constant) use ($code_base) {\nreturn $constant->toStub($code_base);\n}, $this->getConstantMap($code_base)));\n+\n$stub .= implode(\"\\n\", array_map(function (Property $property) use ($code_base) {\nreturn $property->toStub($code_base);\n}, $this->getPropertyMap($code_base)));\n+\n$stub .= implode(\"\\n\", array_map(function (Method $method) use ($code_base) {\nreturn $method->toStub($code_base);\n}, $this->getMethodMap($code_base)));\n+\n$stub .= \"\\n}\\n\";\n+\nreturn $stub;\n\n}\n+\n     /**\n\nThis method must be called before analysis\nbegins.\ndiff --git a/src/Phan/Language/Element/Method.php b/src/Phan/Language/Element/Method.php\nindex 0caf559..50d64bb 100644\n--- a/src/Phan/Language/Element/Method.php\n+++ b/src/Phan/Language/Element/Method.php\n@@ -439,4 +439,8 @@ class Method extends ClassElement implements FunctionInterface\n     return $string;\n }\n\n\n\npublic function toStub(CodeBase $code_base) : string {\n\nreturn \"    \" . $this->__toString() . \" {}\";\n\n}\n+\n }\ndiff --git a/src/Phan/Language/Element/Property.php b/src/Phan/Language/Element/Property.php\nindex 4aa3942..f3df6a6 100644\n--- a/src/Phan/Language/Element/Property.php\n+++ b/src/Phan/Language/Element/Property.php\n@@ -69,6 +69,10 @@ class Property extends ClassElement\n         return $string;\n     }\n\n\npublic function toStub(\\Phan\\CodeBase $code_base) : string {\n\nreturn \"    \" . $this->__toString() . \";\";\n}\n+\n     /**\nOverride the default getter to fill in a future\nunion type if available.\n\n\n\n```\n. I agree that when we have all \"real\" types defined in a signature we should skip the \"non-quick\" analysis.\nFor the casts that you mentioned (array <= int[], ?int <= int|null, iterable <= array), Phan already has the expected behavior when checking those casts, right?\nLonger-Term\nJust so I understand the longer-term thinking here, can you tell me if I'm understanding the following examples of possible behaviors correctly?\nExample A\nphp\n/** @param int $p */\nfunction f(string $p) {}\nIn the case above where phpdoc and the \"real\" types disagree, Phan currently marks $p as an string and ignores the phpdoc int type, and should perhaps be emitting an issue explaining that the phpdoc and \"real\" types disagree.\nExample B\nphp\n/** @param int|string $p */\nfunction f(int $p) {}\nIn this case, the current behavior of merging the types resulting in a $p of type int|string is correct and should be maintained.\nExample C\nphp\nclass A {}\nclass B extends A {}\nfunction f(A $p) {}\n/** @param A $p */\nfunction g($p) {}\nIn this case, for f, Phan should enforce exact type matches when looking at values passed in. For g, however, Phan would need only enforce LSP and would happily accept a value of type B.\nExample D\nphp\nfunction f($p) {}\nf(42);\nf('string');\nIn this example, Phan's current behavior in non-quick-mode of setting the type of $p based on the types passed in should be preserved.\nCurrent Behavior\nJust to get it documented, this is Phan's current behavior.\nphp\n     1  <?php\n     2  class A {}\n     3  class B extends A {}\n     4\n     5  function f0($p) {\n     6      return $p;\n     7  }\n     8  f0(42);\n     9  f0('string');\n    10  f0(false);\n    11  f0(new A);\n    12  f0(new B);\n    13\n    14  /** @param string $p */\n    15  function f1(int $p) {}\n    16  f1(42);\n    17  f1('string');\n    18  f1(false);\n    19  f1(new A);\n    20  f1(new B);\n    21\n    22  /** @param A $p */\n    23  function f2($p) {}\n    24  f2(new A);\n    25  f2(new B);\n    26\n    27  function f3(A $p) {}\n    28  f3(new A);\n    29  f3(new B);\nThe fact that we miss the issue on line 29 is problematic. Its also a bummer than on line 17 Phan is ignoring the phpdoc type without emitting an issue.\n628.php:17 PhanTypeMismatchArgument Argument 1 (p) is string but \\f1() takes int defined at 628.php:15\n628.php:18 PhanTypeMismatchArgument Argument 1 (p) is bool but \\f1() takes int defined at 628.php:15\n628.php:19 PhanTypeMismatchArgument Argument 1 (p) is \\A but \\f1() takes int defined at 628.php:15\n628.php:20 PhanTypeMismatchArgument Argument 1 (p) is \\A|\\B but \\f1() takes int defined at 628.php:15. aws-sdk-php is a good repo to test against, as it includes tons of magic methods.\nI think I'm seeing it successfully pick up the magic method declarations (with this config and this output). A Phan\\Issue::SEVERITY_LOW makes sense to me.. Love this patch. Ship it!. Sounds good to me.\nWe should update the How To Create a Phan Release article with instructions if we do this.\n. What a patch. Great work, @TysonAndre.\nThis patch works well for me and runs cleanly on Etsy's code base.. Thanks, @adambaratz!. It is! Thanks @miniatureape!. I think this patch is just about feature complete now. I'd love to get some comments on a few design decisions.\n\nWe're defining @internal to mean \"Internal to the Namespace\", which may or may not differ slightly from phpdoc's definition\nWe're defining @internal to mean \"Internal to this exact Namespace\" and not to children or parent (as happens for package-private classes in Java)\n\nThoughts?. @TysonAndre Are you OK with me merging this into origin/master?. Starting strict and relaxing that once we get some feedback feels like the right move to me.\n\nand the absense of a namespace is a completely different group?\n\nMy vote is to not worry about special casing the root namespace \\. If you mark something @internal in the root namespace, it can be accessed from anywhere within the root namespace.\n. This PR was squashed and merged into master via https://github.com/etsy/phan/commit/a396c271fe6ecb57f808ede50ec8ac8b0bbcb058. Thanks, @adambaratz. Trivial fixes are very welcome. Let me know if you have any questions as you read through the code.. I updated How to Create a Phan Release with instructions on importing NEWS.. lol.\nAre you able to to reproduce that with any simple code?. So much has been happening that I think it'd be fine to release before fixing those remaining issues.\nHere at Etsy we're getting close to switching to PHP 7.1. That often leads to needing to cut a new version of Phan as we find last minute interesting issues, so I may be pushing for a 0.9.3 within a few weeks, which would be a good opportunity to get those remaining issues shipped.. Do you have a test-case for this @TysonAndre?. @TysonAndre Ha! I wish I started handling my notifications in reverse order rather than earliest to latest.\nI ended up doing an implementation (#691) of the same thing in response to #690.\nIt looks like our implementations are similar, but not exactly the same. What should we do here? I'm cool with whatever choice you make.. Added https://github.com/etsy/phan/wiki/Annotating-Your-Source-Code#internal. Updated README. Great patch!. @TysonAndre Did you try this method out on the other switch statements in Element.php?. I was able to reproduce it. Patch coming shortly.. PR for fix is now available at https://github.com/etsy/phan/pull/691 - reviews welcome. I'll merge soon if I don't hear back from folks.. It turns out @TysonAndre and I did similar implementations of the same thing for different reasons: https://github.com/etsy/phan/pull/672. @TysonAndre Did you want me to merge this one?\nI'm totally fine to throw this one out if you'd prefer to push the implementation you wrote up.. Patch best viewed via https://github.com/etsy/phan/pull/694/files?w=1 to disable whitespace diffs.. Created issue https://github.com/etsy/phan/issues/699 for tracking this.. @TysonAndre Sounds good. I updated the patch and added a test.\nI also modified the testing infrastructure such that a config file can be passed along with the test files to be loaded before running the test and unloaded after.\nLet me know if you think this patch is ready to be merged.. Made a few changes. @TysonAndre Let me know if this is looking good to merge.. PR for a possible fix: https://github.com/etsy/phan/pull/700. PR: https://github.com/etsy/phan/pull/695. PR with fix: https://github.com/etsy/phan/pull/705. Thanks @adambaratz!. > Elements without a package annotation should not have access to any package-internal elements.\n@kyleds: This part seems weird to me. Consider the following code;\n```php\nnamespace Alpha\\Beta\\Gamma;\n/*\n * @package Alpha\\Beta\n * @internal\n /\nclass A {}\n```\nwith access from the following file.\n```php\nnamespace Alpha\\Beta;\nuse Alpha\\Beta\\Gamma\\A;\nclass B {\n    public function __construct() {\n      $this->p = new A;\n    }\n}\n```\nIn that second file, should't the package of B be understood to be the same as the namespace since @package isn't defined, and thus we should expect that the usage of A within it to be allowed?. @TysonAndre Apologies for having gone missing for a bit. I've been working on some new things lately and won't be able to get back to Phan for a little longer.\nCutting a new release sounds good to me. Great work!. @TysonAndre I granted access on AppVeyor and it looks like the build is available via https://ci.appveyor.com/project/morria/phan\nLet me know if there's anything else I need to do.. How hard do you suspect it'll become to backport patches from 0.10 to 0.8 if it's on an older AST version?\nMy preference will be to leave 0.8 behind if you don't think it'll be prohibitively expensive.\nMoving from 0.9 to 0.10 for the new AST version makes sense to me.. Got it. LGTM.. The move makes sense to me. Happy to help with the transition.. I added https://packagist.org/users/TysonAndre/ as a maintainer. Can you confirm that that's you?. Holding off until the next patch release sounds like a good idea to me.\nAny thoughts on how we can communicate it to folks so we minimize how many folks get stuck behind on a version that won't update?. Is 0.10 the right time to change the name to phan/phan (from etsy/phan) as well?. @TysonAndre I've deleted the etsy/phan room on gitter.. @scaytrase: I was going to merge this bit in, then realized that $comment is never used and $node is never a Decl. I've been presuming that error was an issue in php-ast forever. Oops!\n. @scaytrase: Do you mind if I remove this header? My preference is to leave this kind of info to git history.\n. This is marked as deprecated because of planned future work?\nI'd prefer to not mark it as deprecated so that Phan doesn't emit errors when run on itself while we wait for the next patch.\n. I'd prefer to not have the names/dates in here and leave that info to git. Can you remove these from the patch on the newly created files?\n. For the newly created files, can you add declare(strict_types=1);?\n. It looks like we aren't emitting valid JSON given that we're printing a json string for each issue rather than a single JSON array of all issues.\n. When emitting JSON (with output mode 'codeclimate'), we need to print the entire output as JSON rather than a each issue being printed individually.\n. Yup; this is all auto-formatted via find src -type f -path '*.php' -exec vendor/bin/phpcbf --standard=PSR2 {} \\;.\n. you'll need to add a single character option as well which is specified a few lines above this.\n. Checking on the config here will make the order of parameters more important than folks might expect them to be.\n. Adding a query to the config doesn't feel right. Can we specify a query in some more obvious way?\nPerhaps we should have a separate query tool with its own CLI.\n. Can we change this to TypeVoidAssignment?\n. Can we add the name of the variable in here so folks can find it on the line more easily?\n. I'm fine with this personally. It doesn't seem so unreasonable to check for \"static\" the keyword and \"\\static\" the pseudo-type.\n. This isn't enforced in this patch (although it will be before merging), but the rule is that all template types need to be assigned concrete types at instantiation time.\n. > Is it possible here that we won't know what types are being passed in? If so, what happens then?\nTotally possible. In those cases, the templated type would be the empty type (new UnionType()).\n\nCan generics be used for non-objects? For example: ...\n\nYes, template types can be anything including scalars.\n. With the return type no longer being a hint in PHP7, we might want to change this variable name.\n. This bracket should be on a newline, 'cause Phan uses PSR-something formatting.\n. Should this be an array_reduce checking for all types being narrowed instead of making sure its a single type?\nWe talked about this offline, but I forget where we landed.\nWhat if we had\nphp\n/**\n * @return int[]|string[]\n */\nfunction f() : array {\n    return [1, 2, 3]\n}\nWe'd want to return true here, right?\n. Same here; why do we want to confirm this UnionType only has one Type?\n. Can we add a test for the following as well?\nphp\n    /**\n     * @return A\n     */\n    public function returnB() : B {\n        return new B;\n    }\nWe should make sure we get the expected behavior in both directions.\n. That would be good; but unfortunately thats a much larger job. Phan does not currently have a way to trace the origins of a type to a source.\nIf we want to make the suggested change, we should treat that as a feature request outside of this patch.\n. OK, that was a bad example. I guess what I'm thinking of is something like the following.\n``` php\nclass A {}\nclass B extends A {}\nclass C {}\n$a = new UnionType::fromString('A[]|array');\n$b = new UnionType::fromString('B[]|int[]');\n$c = new UnionType::fromString('C[]|int[]');\n$a->isNarrowedArrayFormOf($b); // should be false, maybe?\n$b->isNarrowedArrayFormOf($a); // should be true, maybe?\n$a->isNarrowedArrayFormOf($c); // no idea. maybe false?\n```\nI really don't know what the truth should be here.\n. Perhaps the thing to do is make it isExclusivelyNarrowedArrayFormOf that does an n^2 comparison of all types in $this to all types in $that.\nphp\n/**\n * @param UnionType $union_type\n * Any Union Type.\n *\n * @return bool\n * True if all types of this union type are narrowed array forms of all types\n * in `$union_type`.\n */\npublic function isExclusivelyNarrowedArrayFormOf(UnionType $union_type) : bool\n{\n    return (\n        $this->isGenericArray()\n        && array_reduce($this->getTypeSet(), function (bool $carry, Type $type) use ($union_type) {\n            return ($carry && $type->isNarrowedArrayFormOf($union_type));\n        }, true)\n    }\n}\nWith something like the following method in Type.\nphp\npublic function isNarrowedArrayFormOfUnionType(UnionType $union_type) : bool\n{\n    return array_reduce($union_type->getTypeSet(), function (Type $type) {\n        return ($carry && $this->isNarrowedArrayFormOfType($type));\n    }, true);\n}\nThis would give us\nphp\nUnionType::fromString('int[]')->isExclusivelyNarrowedArrayFormOf(UnionType::fromString('array')); // true\nUnionType::fromString('int[]|array')->isExclusivelyNarrowedArrayFormOf(UnionType::fromString('array')); // false\nUnionType::fromString('int[]|string[]')->isExclusivelyNarrowedArrayFormOf(UnionType::fromString('array')); // true\nUnionType::fromString('int[]|string[]')->isExclusivelyNarrowedArrayFormOf(UnionType::fromString('array|bool[]')); // false\n. I don't think having to add a parameter to all the calls is a good reason to do something that would be very surprising by folks looking to use the method.\nCan you think of a method name that wouldn't be surprising if you did the partial implementation?\nPerhaps you could just implement it on Type (rather than UnionType) and call it isThisAnUntypedArrayAndThatIsAGenericArray(Type $type).\n. @ericnorris Whats different between a UnionType and a ReturnType? Why do we need to call that out?\n. Saying that 'DateTime[]' is equivalent to no type doesn't seem right. Is \"equivalent\" the right term?\n. Whaaat? How is SomeType[] equivalent to SomeType?\n. I don't think it's a common expectation that Phan will be running in the same runtime environment as the code its analyzing. Do you think it might make more sense to make the list of user-defined superglobals live in a projects .phan/config.php file?\n. This mapping is unlikely to stay up to date as issue types are added/removed. Can we instead add integer IDs within Issue.php, perhaps adding an int ID to the constructor and adding IDs to all of the Issue Types.\n. This line should be removed.\n. This method may be more clear if it was named something like getVariadicElementUnionType. It took me a bit of work to figure out what this was supposed to be doing.\nWe might want to consider a comment like the following.\nphp\n/**\n * If this parameter is variadic, calling `getUnionType` will return an array type such as `DateTime[]`. This\n * method will return the element type (such as `DateTime`) for variadic parameters.\n */\n. This might be easier to understand as\nphp\n        return $this->isVariadic()\n            ? parent::getUnionType()->asGenericArrayTypes()\n            : parent::getUnionType();\n. Was this change unintentional?\nI had changed this from 'GLOBALS' to Variable::isSuperglobalVariableWithName($variable_name) as part of \nhttps://github.com/etsy/phan/commit/36a29098ed64075e42031d8b29fa795dfe084919\n. Can we change the name from runkit_superglobals_map to something like superglobals_type_map. I can imagine this having broader utility than just from runkit.\n. The functions in this file should probably live in src/Phan/Debug.php.. Is there any reason not to use the auto-loader here?. This should probably live in src/Phan/Analysis.. We've been creating classes that extend \\Phan\\AST\\AnalysisVisitor to avoid giant complex switch statements.\nThis one is small-ish, but its easy to imagine it getting more and more complex over time making the state difficult to manage and it becoming more difficult to read. Implementing this as a visitor would probably be best.. We'd want this to use the configured AST version.. These tests should be in the format we've been using elsewhere such as those extending AbstractPhanFileTest.. @TysonAndre, @muglug: I'm going to merge this PR and them make the update suggested by @TysonAndre.. @TysonAndre This signature is super confusing. I updated the type on fetch_argument in https://github.com/etsy/phan/commit/c9f3251f7ca16f5e9ec87b9c98884d76ce9bed3f, but I wouldn't be surprised if this signature goes through some changes over time.. Are we using this property? It looks like we're using the bit vector flag elsewhere.. Are we using this property? It looks like we might be passing this around via $comment_flags.. Should we consider a PhanUnreachableCode low-priority issue here?. Should this really be a TODO?\nMy understanding is that PHP doesn't yet adhere to LSP, and instead checks for exact type matches due to restrictions on compute-time during runtime signature analysis.. The ideal case for LSP support might be to check for exact signature matches on \"real\" signatures, and allow for LSP on PHPDoc types.. This code will be execute very frequently, yeah? Doing a mildly complicated regex and calling __toString on this type may be more expensive than we can handle.\nAlso, as a static function, there is no $this to call __toString on. What was the intention here?. Oh, sorry, I misread this and thought you were including $this->__toString() in the regex.\nSounds good.. We should add a comment explaining the intention of the new parameter.. Perhaps this comment should be below the conditional to make it more clear what we're ignoring.. We should add a doc-block here to explain the method.. @TysonAndre Can you explain a bit about why we're making an alternative Phan\\Language\\Element\\Comment\\Method, and not using Phan\\Language\\Element\\Method or having this class implement (Phan\\Language\\Element\\FunctionInterface](https://github.com/etsy/phan/blob/master/src/Phan/Language/Element/FunctionInterface.php)?. I'm not sure if this is a good idea or not, but an alternative approach here could be to treat each magic method declaration as a PHP file and parse it normally with something like the following.\nphp\n$magic_method_declaration = \"function $method_name ( $parameter_string ) : $return_type {}\";\n$node = \\ast\\parse_code(\n    '<?php ' . $magic_method_declaration,\n    Config::get()->ast_version\n);\nPhan/Analysis::parseNodeInContext($code_base, $class_context, $node);\nSomething like this might result in less code, however, we'd have to abandon the use of UnionType in return and parameter type declarations.. This should be out of scope for this patch, but we might consider in the future enforcing that if we're allowing magic method declarations in the doc block that we have __call or __callStatic defined on the class or in the interface.. I don't think so. You're saying after Issue::fromType(...)? That thing returns a class with a magic __invoke() method on it.. \ud83d\udc4d . Nope.\nThis is only checking to see if the element itself (a const, property or method) is @internal, or if the class defining it is @internal.\nIf a class's parent is @internal, that won't extend to elements within the child.\nIts not here yet, but the error will be in extending, implementing or using a class/trait that is @internal from an external context.. \ud83d\udc4d . OK. I'll change this.. \ud83d\udc4d . Moved to Phan\\Analysis\\ClassInheritanceAnalyzer given its expanded scope.. \ud83d\udc4d . \ud83d\udc4d . Got it. That makes sense to me. Thanks!. Variable names should use underscores rather than camel case.. Is this an unrelated fix? Perhaps it should be in its own commit.. It doesn't look like 's' is defined in the short-options list.. Having not read this code yet, I'm unable to guess what this class does based on its name. A comment explaining what it intends to do would be useful.\n. perhaps these warnings should be to STDERR?. variable names should be underscores, not camel case.. This test had been assuming that the ? bound to string rather than the array, and was the only place this behavior was specified.. The third element of the array is optional, but if set defines a config file to load when running the test.. Why does this need to be a static? Aren't we tracking this on a per-instance level?. I see, so we're no longer going to recurse into sub-calls within the re-analyzed method?\nIts probably worth a comment explaining how this is being used.. Would pushing this new test on its own represent most or all of the speedup we're seeing?. Is there any reason that this needs to be a string? Any reason it needs to be base64?\nStringifying all of the types here is pretty expensive. Given that the spl_object_hash of each type is unique and globally identifies it, we should consider using those to compute a hash.. We should add a comment here to explain whats going on and how this differs from analyze.. Out of curiosity, did you measure the speed difference on just this change? I'd buy it if this offered a decent speed up.. Will this fail out if $node->children['name'] is undefined? . We should be using underscores rather than camel case for variable names.. How is this different from canonicalName? Is the idea that canonicalName is for representing names in issues, while we're actually hashing on the canonicalLookupKey? Should we perhaps change the names to be canonicalDisplayName and canonicalLookupName?. \ud83d\udc4d . Passing descriptive strings like this to an Issue is a novel thing. Should we consider creating distinct Issue types instead?\nUsing distinct issue types instead of passing strings lets folks do better parsing of error messages, better allows for theoretical future translations to different languages and (IMHO) leads to prettier code.\n. nit: we should use underscores for variable names rather than camel casing . This is pretty confusing. Why are implementation details leaking out into the public interface?. we should use underscores for variable names.. Do we need to do any normalization on the FQSEN string?. we should use underscores for variable names.. does Runkit need to marked as a composer dependency? Is it possible to define optional composer dependencies?. We can probably leave this to be printed by whoever is catching the exception.. We should add a comment here and perhaps choose a more descriptive method name so that it doesn't take so much work to figure out whats going on.. ",
    "akrabat": "yep - That also makes sense.\n. @rlerdorf,\nFor this code:\nphp\n$app = new \\Slim\\App();\n$app->get('/', function ($request, $response) {\n    dump($this->get('settings'));\n});\n$app->run();\nSlim has bound the closure to its DI container, so $this is an instance of \\Slim\\Container.\n. ",
    "sebastianbergmann": "Thank you for working on this!\nHowever, I cannot test your patch as I run into the following:\n```\n./phan -a ~/test.php \nFatal error: Uncaught Error: Undefined constant 'ast\\flags\\CLASS_FINAL' in /usr/local/src/phan/src/Phan/Language/Element/Clazz.php:139\nStack trace:\n0 /usr/local/src/phan/src/Phan/Language/Element/Clazz.php(115): Phan\\Language\\Element\\Clazz::fromReflectionClass(Object(Phan\\CodeBase), Object(ReflectionClass))\n1 /usr/local/src/phan/src/Phan/CodeBase/ClassMap.php(115): Phan\\Language\\Element\\Clazz::fromClassName(Object(Phan\\CodeBase), 'Closure')\n2 /usr/local/src/phan/src/Phan/CodeBase.php(60): Phan\\CodeBase->addClassesByNames(Array)\n3 /usr/local/src/phan/phan(21): Phan\\CodeBase->__construct(Array, Array, Array, Array)\n4 {main}\nthrown in /usr/local/src/phan/src/Phan/Language/Element/Clazz.php on line 139\n``\n. I am using66dd303fc17aafe968fa5ff393b920ba5c222b6fofetsy/phan,51f2183b7d9d42b7fd9667621be39cf7096ac043ofnikic/php-ast, ande322fb0015e0204a479b77cda6b8a75ed8ab86a7` of PHP.\n. No clue what was going on earlier, now it works. Thanks!\n. ",
    "rlerdorf": "@morria An easier way to check loaded extensions is to just do: php -m\nBut I assume he has it loaded, so check that the build actually has the constant:\nphp -r 'print_r(get_defined_constants(true));' | grep CLASS_FINAL\nIf that doesn't show: [ast\\flags\\CLASS_FINAL] => 4\nthen your php-ast build is not current.\n. The CLI stuff has always been an afterthought. We'd be more than happy to accept improvements here.\n. Using sqlite::memory: in daemon mode would be an easy solution. But because of the data marshalling needed not quite as fast using a native persistent memory model.\n. Note that \\string is not valid. I know it works in PHP-7.0.0 but that was an oversight and will be fixed in 7.0.1\nSee: https://github.com/php/php-src/blob/PHP-7.0/NEWS#L58-L59\n. Actually, we need to check if the calling file has strict_types enabled here. This is a type error in strict mode.\n. You are using an ancient version of Phan. Hit hash 4521bad is from rlerdorf/phan. Please use the code from github.com/etsy/phan\n. That one is a bit tricky. Type inference on $bar inside foo() ends up saying that $bar can be either A or null. Since that meets the arg type in foo() there is no warning.\nWe have discussed some ideas for type-narrowing but for more complex examples that gets really complicated quickly since we don't have the runtime context.\nIn your simple example it makes sense to do, but realworld examples are rarely this simple.\n. The namespace part doesn't seem like it is relevant here. You see the same from:\n```\n<?php\nclass ArrayProducer {\n        /*\n         * @return array[] array of arrays\n         /\n        public function getArrays()\n        {\n            return [['name' => 'lala'], ['name' => 'lulu']];\n        }\n}\n$producer = new ArrayProducer;\n$arrays = $producer->getArrays();\n$test = $arrays[0]['name'];\n``\n. Then I wouldn't be able to contribute to it. I can't sign their CLA.\n. Just from a quick spot-check, I don't think it will work well. The stubs do not include proper union type info, especially for return values on failure. For example:getimagesize()is defined to return an array, which is correct, but it returns false on failure which is important for Phan to know. Same forstripos()which is defined to just returnintbut it is actuallyint|bool`. Same goes for every other function I checked. We would need to go through and fix a good portion of all the function signatures in order for them to work with Phan.. Yes, Phan is heavily recursive. Although I wouldn't think we'd go a 1000 levels deep, but perhaps for complex code we could. If you set it to 10000, how does it do?\n. Ok, so I don't see that there is anything to do here other than perhaps document the fact that you need to set your recursion limit high if you have xdebug loaded\n. I just get this now:\n./var/SymfonyRequirements.php:391 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrequirement() takes bool defined at ./var/SymfonyRequirements.php:201\n./var/SymfonyRequirements.php:400 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrequirement() takes bool defined at ./var/SymfonyRequirements.php:201\n./var/SymfonyRequirements.php:488 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrequirement() takes bool defined at ./var/SymfonyRequirements.php:201\n./var/SymfonyRequirements.php:494 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrequirement() takes bool defined at ./var/SymfonyRequirements.php:201\n./var/SymfonyRequirements.php:569 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrecommendation() takes bool defined at ./var/SymfonyRequirements.php:214\n./var/SymfonyRequirements.php:575 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrecommendation() takes bool defined at ./var/SymfonyRequirements.php:214\n./var/SymfonyRequirements.php:581 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrecommendation() takes bool defined at ./var/SymfonyRequirements.php:214\n./var/SymfonyRequirements.php:587 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrecommendation() takes bool defined at ./var/SymfonyRequirements.php:214\n./var/SymfonyRequirements.php:675 TypeError arg#1(fulfilled) is int|null but \\requirementcollection::addrecommendation() takes bool defined at ./var/SymfonyRequirements.php:214\n./var/cache/dev/appDevDebugProjectContainer.php:467 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addListenerService()\n./var/cache/dev/appDevDebugProjectContainer.php:468 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:469 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:470 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:471 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:472 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:473 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:474 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:475 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:476 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:477 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:478 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:479 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:480 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:481 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:482 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:483 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:484 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:485 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:486 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:487 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:488 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:489 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:490 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:491 UndefError call to undeclared method \\Symfony\\Component\\HttpKernel\\Debug\\traceableeventdispatcher->addSubscriberService()\n./var/cache/dev/appDevDebugProjectContainer.php:1403 ParamError call with 4 arg(s) to \\Symfony\\Component\\HttpKernel\\httpkernel::__construct() which only takes 3 arg(s) defined at ./vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php:47\n./var/cache/dev/appDevDebugProjectContainer.php:1790 ParamError call with 5 arg(s) to \\Symfony\\Bundle\\FrameworkBundle\\Routing\\router::__construct() which only takes 4 arg(s) defined at ./vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Routing/Router.php:39\n./var/cache/dev/appDevDebugProjectContainer.php:2822 ParamError call with 5 arg(s) to \\Symfony\\Bundle\\FrameworkBundle\\Translation\\translator::__construct() which only takes 4 arg(s) defined at ./vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Translation/Translator.php:56\n./var/cache/dev/appDevDebugProjectContainer.php:3298 TypeError arg#2(updateThreshold) is string but \\Symfony\\Component\\HttpFoundation\\Session\\Storage\\metadatabag::__construct() takes int defined at ./vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php:62\n./app/AppKernel.php:11 UndefError reference to undeclared class \\symfony\\bundle\\frameworkbundle\\frameworkbundle\n./app/AppKernel.php:12 UndefError reference to undeclared class \\symfony\\bundle\\securitybundle\\securitybundle\n./app/AppKernel.php:13 UndefError reference to undeclared class \\symfony\\bundle\\twigbundle\\twigbundle\n./app/AppKernel.php:14 UndefError reference to undeclared class \\symfony\\bundle\\monologbundle\\monologbundle\n./app/AppKernel.php:15 UndefError reference to undeclared class \\symfony\\bundle\\swiftmailerbundle\\swiftmailerbundle\n./app/AppKernel.php:16 UndefError reference to undeclared class \\doctrine\\bundle\\doctrinebundle\\doctrinebundle\n./app/AppKernel.php:17 UndefError reference to undeclared class \\sensio\\bundle\\frameworkextrabundle\\sensioframeworkextrabundle\n./app/AppKernel.php:18 UndefError reference to undeclared class \\appbundle\\appbundle\n./app/AppKernel.php:22 UndefError reference to undeclared class \\symfony\\bundle\\debugbundle\\debugbundle\n./app/AppKernel.php:23 UndefError reference to undeclared class \\symfony\\bundle\\webprofilerbundle\\webprofilerbundle\n./app/AppKernel.php:24 UndefError reference to undeclared class \\sensio\\bundle\\distributionbundle\\sensiodistributionbundle\n./app/AppKernel.php:25 UndefError reference to undeclared class \\sensio\\bundle\\generatorbundle\\sensiogeneratorbundle\n./tests/AppBundle/Controller/DefaultControllerTest.php:15 UndefError call to undeclared method \\Tests\\AppBundle\\Controller\\defaultcontrollertest->assertEquals()\n./tests/AppBundle/Controller/DefaultControllerTest.php:16 UndefError call to undeclared method \\Tests\\AppBundle\\Controller\\defaultcontrollertest->assertContains()\n. Yeah, this one is a bit fiddly. @nikic save us! Having the AST give us the fully qualified identifiers would make this a lot less complicated.\n. This is actually not allowed:\n(new C)->undef_prop_a = 1;\nYou will get:\nCannot use temporary expression in write context\n. What does the line with that call look like? Something along the lines of:\nparent::$fn();\nI guess? As in a dynamically created static method call on parent::?\n. Able to reproduce with:\n```\n<?php\nclass P {\n    static function fn() { echo \"Hello\"; }\n}\nclass C extends P {\n    function __construct() {\n        $str = 'fn';\n        parent::$str();\n    }\n}\nnew C;\n```\n. It shouldn't matter though. It should be no different from something like an Oracle oci8 function from the FunctionSignatureMap which might also not be compiled in.\n. Oops, that was the wrong issue number of commit 4c76092 there. Should have been 326.\n. @morria apache_request_headers() is a built-in (although not available from cli) and it is in FunctionSignatureMap.php. So it is different from this get_app() user-defined function issue.\n. Not really a phan issue, but with my PHP hat on, could you provide a backtrace?\nDo this:\ngdb php\n\nrun ../../phan/phan -f phan_files.txt -i\n\n(no -p as the output would just get in the way)\nThen when/if it segfaults:\n\nbt\n\nand paste the output.\n. Is this in code that is available somewhere?\n. I meant, is what you are scanning available? As in, is it an open source thing like Drupal or Wordpress so I could reproduce the problem myself using your phan_files.txt list?\n. @netpalantir Can you make a small reproducable example that does't depend on anything private?\nI just tried a trivial case running phan on a simple file with a typo in my exclude_analysis_directory_list and I saw no segfault with PHP-7.0.10\n. No segfault with those steps for me.\n12:37pm debian:~/tmp> tar zxvf phanbug.tar.gz \nphanbug/\nphanbug/site/\nphanbug/site/composer.json\nphanbug/site/composer.lock\nphanbug/site/engine/\nphanbug/.phan/\nphanbug/.phan/config.php\n12:37pm debian:~/tmp> cd phanbug/site && composer install\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\n- Installing ezyang/htmlpurifier (dev-master 1ce2fde)\n  Cloning 1ce2fde40087c48aa4c39cdc2ff868a671ff121c from cache\n- Installing gettext/languages (2.1.2)\n  Downloading: 100%       \n- Installing gettext/gettext (v4.0.2)\n  Downloading: 100%       \n- Installing google/apiclient (v1.1.8)\n  Downloading: 100%       \n- Installing ircmaxell/password-compat (1.0.2)\n  Downloading: 100%       \n- Installing mailchimp/mailchimp (dev-master 03ae0db)\n  Cloning 03ae0dba64d1a902fb4d76004ef12c8391ededc8 from cache\n- Installing mailin-api/mailin-api-php (v1.0.4)\n  Downloading: 100%       \n- Installing michelf/php-markdown (1.6.0)\n  Downloading: 100%       \n- Installing psr/log (1.0.0)\n  Loading from cache\n- Installing monolog/monolog (1.7.0)\n  Downloading: 100%       \n- Installing riquito/baobab (v1.3.1)\n  Downloading: 100%       \n- Installing spomky-labs/base64url (v1.0.2)\n  Downloading: 100%       \n- Installing schnittstabil/csrf-tokenservice (2.0.1)\n  Downloading: 100%       \n- Installing symfony/polyfill-mbstring (v1.2.0)\n  Loading from cache\n- Installing symfony/console (v3.1.4)\n  Downloading: 100%       \n- Installing etsy/phan (dev-master 6a9a705)\n  Cloning 6a9a7050432a8b06a31835ae80a91cb110cc654c from cache\ngettext/gettext suggests installing illuminate/view (Is necessary if you want to use the Blade extractor)\ngettext/gettext suggests installing symfony/yaml (Is necessary if you want to use the Yaml extractor/generator)\ngettext/gettext suggests installing twig/extensions (Is necessary if you want to use the Twig extractor)\ngettext/gettext suggests installing twig/twig (Is necessary if you want to use the Twig extractor)\nmonolog/monolog suggests installing aws/aws-sdk-php (Allow sending log messages to AWS services like DynamoDB)\nmonolog/monolog suggests installing doctrine/couchdb (Allow sending log messages to a CouchDB server)\nmonolog/monolog suggests installing ext-amqp (Allow sending log messages to an AMQP server (1.0+ required))\nmonolog/monolog suggests installing ext-mongo (Allow sending log messages to a MongoDB server)\nmonolog/monolog suggests installing mlehner/gelf-php (Allow sending log messages to a GrayLog2 server)\nmonolog/monolog suggests installing raven/raven (Allow sending log messages to a Sentry server)\nmonolog/monolog suggests installing ruflin/elastica (Allow sending log messages to an Elastic Search server)\nsymfony/console suggests installing symfony/event-dispatcher ()\nsymfony/console suggests installing symfony/process ()\nGenerating autoload files\n12:38pm debian:~/tmp/phanbug/site> cd ..\n12:38pm debian:~/tmp/phanbug> ./site/vendor/bin/phan\n/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/UnionTypeVisitor.php:1052 [8] Undefined index: expr\n0  phan_error_handler() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/UnionTypeVisitor.php:1052]\n1  Phan\\AST\\UnionTypeVisitor->visitProp() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/UnionTypeVisitor.php:1100]\n2  Phan\\AST\\UnionTypeVisitor->visitStaticProp() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:145]\n3  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n4  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/UnionTypeVisitor.php:110]\n5  Phan\\AST\\UnionTypeVisitor::unionTypeFromNode() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/Language/UnionType.php:156]\n6  Phan\\Language\\UnionType::fromNode() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php:416]\n7  Phan\\Analysis\\PostOrderAnalysisVisitor->visitPrint() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:131]\n8  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n9  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:124]\n10 Phan\\BlockAnalysisVisitor->visit() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:272]\n11 Phan\\AST\\Visitor\\KindVisitorImplementation->visitPrint() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:131]\n12 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n13 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n14 Phan\\BlockAnalysisVisitor->visit() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n15 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n16 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n17 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/Analysis.php:344]\n18 Phan\\Analysis::analyzeFile() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/Phan.php:169]\n19 Phan\\Phan::Phan{closure}() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/Phan/Phan.php:210]\n20 Phan\\Phan::analyzeFileList() called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/phan.php:43]\n21 require_once(/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/src/phan.php) called at [/home/rasmus/tmp/phanbug/site/vendor/etsy/phan/phan:2]\n. @jazzdan The problem is that it is treating null as a type there, which it shouldn't. You are correct that inside the function $p will be int|null in this case, but on the call to fn() it should treat $p as untyped and not complain.\n. Perhaps there is some tail recursion here we could unroll\n. There isn't really a safe way to do that since any standalone unreferenced file could be a simple endpoint file\n. To what end?\nAnd this isn't really something phan can do anyway because such comments aren't part of the AST. Only /* ... / formatted comments before classes/functions/closures are available through the AST. In order to do what you are asking for phan would have to make a separate pass and apply some regexes or something, and now we are writing a completely different tool.\n. I think this would be a nice option to have. The output can be rather intimidating, especially the first time you run it on something.\n. A default value of null is a special case in a PHP function signature. If Phan warned on all of those it would be painful\n. Huge pages are off by default as of PHP 7.0.5, so fewer people should be getting hit by this.\n. I don't think we have a way to address this that wouldn't create a ton of false positives. We'd have to distinguish code in a try block that will and possibly won't be executed.\neg.\ntry {\n  $a = 1;\n  $b = strlen(\"abc\");\n  $c = user_func_that_will_never_throw();\n  $d = user_func_that_might_throw();\n}\n. First, it should be /* \\Slim\\App $app / there. The type comes first.\nAlso, global scope is tricky because order matters. Try putting your index.php first in your file list.\nI don't understand what you mean by $this being a container. Can you provide a short code snippet?\n. No, it is not a limitation of the php-ast extension. It is the AST itself that only supports comments on certain nodes for efficiency.\nHowever, I still think the @var declaration in the method comment should pre-populate the uniontype for the variable in that method which would solve your problem. @morria and I have gone back and forth a bit on this point.\n. Yeah, Phan doesn't pick up __toString methods on internal objects. We'll probably need to special-case that.\n. Fixed with commit 4c76092\n. I don't quite understand this one. If the object that implements ExceptionInterface doesn't extend Exception or Error which both implement Throwable, then it can never be thrown and as such the code doesn't make sense. Could you provide a short standalone example to illustrate what you mean here?. Oh, never mind, I see what you mean:\n```php\n<?php\ninterface A { }\nclass B extends Exception implements A {\n    static function fn() {\n        throw new B;\n    }\n}\ntry {\n    B::fn();\n} catch(A $e) {\n    throw new \\RuntimeException(\"bla\", 0, $e);\n}\n```\n. I think it would be difficult to fix this for anything other than the most trivial case, and even if we could, I fear that it could hide real issues. This seems like one of those edge-cases where a /* @suppress PhanTypeMissingReturn / is an ok workaround.\n. Phan has never followed include/require. You have to tell it which files are part of your project, so if you don't add Smarty to it, you will get undeclared errors for all of Smarty.\n. This would take quite a bit of work because currently Phan pulls the AST (abstract syntax tree) out of PHP and works with that. It doesn't try to parse the files itself.\nThis matters because only some node types support a doc comment block. We only get them for class declarations, function/method/closure declarations and class property declarations.\nTherefore, in order to have Phan parse comment blocks outside of these 3 node types an additional parsing pass would need to be added which would slow analysis down by quite a bit.\nFor global-scope procedural code the order of the files in the file list can help solve these issues. If you place the file that defines $http and $auth before the files that use them, it should be fine.\nIf you can't do that for some reason, you can put a dummy file first in your file list that defines them to suppress these warnings.\n. Could you fix your PR to not include the composer.lock stuff?\n. Oh, and if you read the comment at the top of that FunctionSignatureMap.php file it explains how to do multiple signatures\n. If you have types in the code they will override the doc comments. But, if you a doc comment and no in-code type, then there is no way to tell it not to use the doc comment, sorry.\nYou should go through and delete/fix them if they are wrong. A little sed one-liner to delete them all should be pretty easy.\n. Right, so make a copy of your code and run it through a little sed filter to remove all @ references in comment blocks. They only work inside /* ... / comments, so you can just remove all those. This should do it:\nsed -r ':a; s%(.*)/\\*\\*.*\\*/%\\1%; ta; /\\/\\*/ !b; N; ba'\n. Ah oops, I guess I wasn't paying attention when that went in. That would be easier than the sed filter.\n. While Phan requires PHP 7 to run, it is perfectly capable of analyzing PHP code meant to run on older versions of PHP.\nSo perhaps we do need a way to specify versions, although it gets complicated because if we do it all the way down to each extension version then you would need to specify your versions for every extension of your target PHP environment when you run a scan.\n. Well, more likely composer.lock since composer.json typically just gives a minimum version.\nPlus built-in extensions aren't actually in that file. That could change with the composer-pickle work that is ongoing, but it isn't there yet.\n. I think we can close this one as the specific issue here has been fixed. Some more work on variadics is likely needed, but we can open new issues for the the specifics of those.\n. This has nothing to do with Phan, does it? Phan has no opinion on style\nissues like that and the check is certainly not in Phan.\nAh, I see CodeClimate checks are enabled for the Phan repo now. Yeah, that is a silly check. I have no idea if it can be turned off.\nOn Fri, Nov 11, 2016 at 9:14 PM, Tyson Andre notifications@github.com\nwrote:\n\nAre the developers of phan planning to rename local variables to\ncamelCase? I see underscores in variable names as a very common convention,\nincluding in the example plugin.\nIf it's unimportant, can that specific codeclimate check be disabled?\nThe parameter $code_base is not named in camelCase.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/etsy/phan/pull/390#issuecomment-260102655, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADVcadFcI50gENOb_cChbmDV9dY21xYks5q9UsfgaJpZM4KwKBh\n.\n. Update your Phan. This works fine:\n\n10:36am debian:~> cat f\n<?php\necho (int)$a;\necho $b;\n10:36am debian:~> phan f\nf:2 PhanUndeclaredVariable Variable $a is undeclared\nf:3 PhanUndeclaredVariable Variable $b is undeclared. A git clone will always give you the most recent version.\nAnd no, Phan doesn't track runtime logic like that. In your example the conditions are constant which is a very artificial case. In real code those conditions require the runtime context in order to determine if they will be true or not and during static analysis we don't have the runtime context.. You have $names = $cache->getData() so Phan will look at the type returned by getData(). If getData() can return null then Phan is correct.. The extension is still in use with PHP 7. It is just not distributed with PHP 7 by default anymore. But perhaps we could add some indicator about deprecation to our function signature mechanism. Right now there is no support for that though.. The PhanCompatiblePHP7 freature was created for migrating from 5.x to 7.0. Void is legal in 7.0. It didn't become a reserved word until 7.1.\nBut yes, we should warn about that as well.. Did you paste the wrong snippet of code? The Phan errors have nothing to do with that code you provided. Also, please include line numbers in both your code example and corresponding ones for the associated Phan errors.. Yes, unfortunately it would be a massive job to update all of the PHP internals and all of its extensions to provide type information everywhere in order for reflection to be useful here. It will likely happen eventually but if we were to wait for that we wouldn't have a useful Phan until 2020 or so.. Map<Clazz> is not valid phpdoc syntax as per https://phpdoc.org/docs/latest/references/phpdoc/types.html\nAs far as Phan is concerned the fqsen_class_map can be either Clazz[] or a Map class. Because Map is an SplObjectStorage object which implements ArrayAccess in the end they are effectively the same.\nThe assignment here: https://github.com/etsy/phan/blob/master/src/Phan/CodeBase.php#L228 makes it look like a Clazz[] but elsewhere it looks like a Map. But yes, the Clazz[] part is somewhat redundant since I don't think we have anything that takes a Clazz[] as a parameter, but if we did that union type would tell Phan that it satifies it.. But templates/generics is a different thing. Are you suggesting we should overload the syntax? That seems too confusing to me. . Not extend, narrow. But yes, we have code for that check here: https://github.com/etsy/phan/blob/7503420202a68569973f7a1d5f223fbd3f608f88/src/Phan/Language/UnionType.php#L557-L596\nThere are just some issues to work out with it.. Phan does understand those defines, the problem is that the Prelude.php file has a very weird way of doing the defines:\n```php\n$define = function ($constantName, $constantValue, $case = false) {\n    if (!defined($constantName)) {\n        return define($constantName, $constantValue, $case);\n    }\nreturn false;\n\n};\n$define('SUCCEED',        true);\n$define('FAILED',         false);\n$define('\u2026',              '__hoa_core_fill');\n$define('DS',             DIRECTORY_SEPARATOR);\n$define('PS',             PATH_SEPARATOR);\n$define('ROOT_SEPARATOR', ';');\n``\nSince$define` is a dynamically created function this can't be analyzed statically without the runtime context. What you can do is cheat a bit and add a stub file with these defines.\nMake a .phan/config.php file like this:\nphp\n<?php\nuse \\Phan\\Issue;\nreturn [\n    'should_visit_all_nodes' => true,\n    'minimum_severity' => Issue::SEVERITY_NORMAL,\n    'file_list' => ['Consistency.php', 'Prelude.php', 'Xcallable.php', 'Exception.php'],\n    'directory_list' => [ '.phan/stubs', 'vendor' ],\n    'exclude_analysis_directory_list' => [ 'vendor' ]\n];\nThen create .phan/stubs/Prelude.php with:\nphp\n<?php\ndefine('SUCCEED',        true);\ndefine('FAILED',         false);\ndefine('\u2026',              '__hoa_core_fill');\ndefine('DS',             DIRECTORY_SEPARATOR);\ndefine('PS',             PATH_SEPARATOR);\ndefine('ROOT_SEPARATOR', ';');\ndefine('RS',             ROOT_SEPARATOR);\ndefine('CRLF',           \"\\r\\n\");\ndefine('OS_WIN',         defined('PHP_WINDOWS_VERSION_PLATFORM'));\ndefine('S_64_BITS',      PHP_INT_SIZE == 8);\ndefine('S_32_BITS',      !S_64_BITS);\ndefine('PHP_INT_MIN',    ~PHP_INT_MAX);\ndefine('PHP_FLOAT_MIN',  (float) PHP_INT_MIN);\ndefine('PHP_FLOAT_MAX',  (float) PHP_INT_MAX);\ndefine('\u03c0',              M_PI);\ndefine('nil',            (unset) null);\ndefine('_public',        1);\ndefine('_protected',     2);\ndefine('_private',       4);\ndefine('_static',        8);\ndefine('_abstract',      16);\ndefine('_pure',          32);\ndefine('_final',         64);\ndefine('_dynamic',       ~_static);\ndefine('_concrete',      ~_abstract);\ndefine('_overridable',   ~_final);\nAfter doing this I get:\nConsistency.php:253 PhanTypeMismatchReturn Returning type null but getPHPBinary() is declared to return string\nConsistency.php:286 PhanRedefineClassInternal Interface \\Throwable defined at Consistency.php:286 was previously defined as abstract Interface \\Throwable internally\nException.php:49 PhanUndeclaredExtendedClass Class extends undeclared class \\Hoa\\Exception\nThe first one there is a valid error. The second one is inside a PHP version check so it is a bit of a false positive, and the 3rd one is because Phan currently doesn't support the namespace aliasing being used there to define HoaException.. Note that this PR introduced this:\nsrc/Phan/Language/Element/Func.php:183 PhanTypeMismatchArgument Argument 3 (closure_scope) is T but \\Phan\\Language\\Element\\Func::getClosureOverrideContext() takes \\Phan\\Language\\Type defined at src/Phan/Language/Element/Func.php:80. That's not a PHP error. That is coming from xdebug. You shouldn't be running Phan with xdebug unless you are actually debugging/profiling it. It slows it down and causes problems like this one.. Yeah, I was noticing these problems with daemon mode. Merge it!. You don't really need a pull request for trivial changes like this. Just push directly.. Could spl_object_hash() not be used here instead of runkit_object_id()?. You can always turn the 32-byte string into an integer. You only need the object handle part which is in the first 16 bytes, so:\nhexdec(substr(spl_object_hash($class),0,16));\nand you effectively have the object id as an int. Surprised the runkit version is so much faster than that wrapper. Sounds like we should add spl_object_id() to PHP then because having a dependency on runkit is terrible, even if it is optional.. If you want to ignore all PhanUnreferencedMethod errors, then just add it to the list of suppress_issue_types in your config.php. See https://github.com/etsy/phan/blob/master/.phan/config.php#L163-L165. According to https://help.github.com/articles/transferring-a-repository-owned-by-your-organization/ it looks like we need to initiate the transfer from the Etsy side.. true, we can structure /phan however we want. Looks like the move is all done. The redirect is working, so you don't actually need to change the origins of existing checkouts, but it would probably be good to do so eventually.. Yes, we definitely should. phan file1.php file2.php file2.php ...\nworks. @golaod That should work on every version. If you don't want to have a .phan/config.php, simply passing the files will definitely work:\n\n. One thing I like about it is that since Phan a command-line tool, being able to output the logo from the command line is useful. Means we could do stuff like this:\n\nIf we use the big dot, \\u{2b24} it looks a bit less like a bullet point. But yeah, it could be PHP purple/blue.. It isn't easy to track function deprecation via PHP version because even completely removed extensions like the old mysql one live on in pecl. You can easily have PHP 7.2 with all the ext/mysql functions still available if you choose to.. What do you mean by imports? PHP doesn't have any concept of an import. There is a use for traits at the class level, and an include at the file level.. I think there would be a lot of false positives in trying to determine whether a trait was unused. Much like we don't warn you that a method or a constant in a class is never accessed. The check would be the same and there is a lot of dynamic magic that can happen at runtime that makes it really hard to determine statically if things are ever accessed.. Yeah, if $this->var is known to not be an object, or known to be an exact object which doesn't have that constant, it should warn. If it is mixed or if there is a generic (PHP 7.3) object in the union, it should stay silent.. Yeah, all it takes to fix it is to add a generic /* @var array / to that property. But I can see this confusing people.. I don't like having too many issue types that are essentially the same thing. It makes filtering them really annoying. This is still a return type mismatch and I think it should be declared as such. Right now it isn't super-easy to change the text that goes along with that type mismatch error. Perhaps that is what we should address instead of adding more issue types.\n. @TysonAndre wait, what is $classList for there? Seems like a stray line of code. If people start to alias their aliases like that they are on their own. Having support for a single level of aliasing should be sufficient for most cases.. We shouldn't emit PhanUndeclaredVariable on the left side of a ??. ",
    "ablyler": "@morria no worries! updating and re-running it now.\n. @morria looks good now, thanks!\n. ",
    "tkrajacic": "Yep, that fixed it. Thank you!\n. ",
    "christopherowen": "This is very exciting!\nHow would I scan my codebase for dead code?\n. Please consider making a new release with this?\nAlso, I believe the readme.md file's feature section can be updated?\n. this works quite well.  One of my code bases is now 1500 lines shorter.  I saw not obvious issues beyond lowercasing all the method names making verification with grep a slightly longer process (because I had to use grep -i)\n. actually, one issue is that I had to run the dead code detector many times as dead functions may reference other dead functions.  The second layer dead function will not be noticed on the first pass.\n. great success!\n. perhaps a non-default command-line option?\nor a notation method for entry points?\n. Thanks for the feedback!\nIt's something I do manually now when working with legacy code bases, it would have been cool to have it included in phan but is not necessary.\nCheers!\n. thank you!\n. I think I may be wrong here.  The problem I'm seeing doesn't appear to be related to this.\n. I wonder if it's possible to get extract() depreciated (deprecated?) in php?\n. how do I declare(strict_types=1) for testing?\n. I hadn't thought of it like this before.  I was under the impression that an AST would allow for both code paths ('if' is true and 'if' is false) to be examined - this must be my shortcoming.\nNone of my code bases are moved to php 7 yet.  Working with phan was one method I was using to get my code bases to the point where I could try.  \nI don't see any harm in declaring strict_types in my code, though it would be an awful lot of files that will need to be modified.  If one needs to make a choice of whether we care for this functionality or not, would a command line switch make sense?\n. I bet this has an obvious answer, but how does one display the checkstyle output from phan in jenkins if they already have phpcs (checkstyle) configured?\n. Not exactly, because I wanted one build to contain all of the code quality plugins.\nSince I already have the checkstyle plugin installed, I cannot add a new one.\nI cannot see a way to add a second xml file for the existing plugin to parse.\n. For now I will consume the checkstyle output by the violations publisher and use the checkstyle publisher for phan.  Thanks!\n. consuming the current output of phan checkstyle with the latest version of the Jenkins CheckStyle Publisher reports 0 warnings, though the file is 1mb in size.\nDifferences that I can notice between the output from the phpcs which does parse with the publisher and the output from phan are\n1) There are no newlines in the phan output\n2) The xml encoding of phpcs is UTF-8 and ISO-8859-15 in phan\n3) The checkstyle version is '2.5.1' from phpcs and '6.5' from phan\n4) XML attributes are ordered differently\nphpcs: line, column, severity, message, source. \nphan:  line, source, message, severity (with no column).\n. I've tried modifying each of the above 4 things to make phan act like phpcs.  They didn't allow the Jenkins Checkstyle Publisher to see the phan results.\n. The last difference that I can see is that phpcs reports severities of 'error' and 'warning', while phan reports 'low', 'normal', and 'critical'.\n. I was able to get the Jenkins Checkstyle Publisher working by changing phone's 'low' and 'normal' output to 'warning' and 'critical' output to 'error'.\n. I was recommending here: https://github.com/etsy/phan/releases\nbut linking to it in the readme would be helpful too :)\n. https://wiki.jenkins-ci.org/display/JENKINS/Violations\n. There appears to be an example here at 'File #4: findbugs.xml with four  entries':\nhttp://www.sw-engineering-candies.com/blog-1/howtotransformtheresultsfromfindbugscheckstyleandpmdintoasinglehtmlreportwithxslt20andjava#TOC-XML-from-Findbugs-Checkstyle-and-PMD-\n. here is the output from the phan.xml file generated from the build filtered for wp-includes\n<error line=\"1978\" column=\"1\" severity=\"warning\" message=\"Argument 2 (value) is int but \\phpmailer::headerline() takes string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/class-phpmailer.php:2155\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"167\" column=\"1\" severity=\"warning\" message=\"Call with 6 arg(s) to \\smtp::authenticate() which only takes 5 arg(s) defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/class-smtp.php:362\" source=\"PhanParamTooMany\"/>\n    <error line=\"186\" column=\"1\" severity=\"warning\" message=\"Call with 3 arg(s) to \\pop3::connect() which only takes 2 arg(s) defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/class-pop3.php:81\" source=\"PhanParamTooMany\"/>\n    <error line=\"301\" column=\"1\" severity=\"warning\" message=\"Argument 2 (detail) is int but \\smtp::seterror() takes string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/class-smtp.php:1039\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"24\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"25\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"26\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"21\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"22\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"28\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"31\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"32\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"32\" column=\"1\" severity=\"warning\" message=\"Argument 5 (in_footer) is string but \\wp_enqueue_script() takes bool defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"33\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"33\" column=\"1\" severity=\"warning\" message=\"Argument 5 (in_footer) is string but \\wp_enqueue_script() takes bool defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"34\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"34\" column=\"1\" severity=\"warning\" message=\"Argument 5 (in_footer) is string but \\wp_enqueue_script() takes bool defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"35\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"8\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"10\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"11\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"20\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"21\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"24\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"25\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"28\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"29\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"50\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"52\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"62\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"7\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"8\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"19\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"25\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"28\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"25\" column=\"1\" severity=\"warning\" message=\"Call to deprecated function \\get_settings() defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/deprecated.php:829\" source=\"PhanDeprecatedFunction\"/>\n    <error line=\"32\" column=\"1\" severity=\"warning\" message=\"Call to deprecated function \\update_usermeta() defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/deprecated.php:2291\" source=\"PhanDeprecatedFunction\"/>\n    <error line=\"33\" column=\"1\" severity=\"warning\" message=\"Call to deprecated function \\update_usermeta() defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/deprecated.php:2291\" source=\"PhanDeprecatedFunction\"/>\n    <error line=\"34\" column=\"1\" severity=\"warning\" message=\"Call to deprecated function \\update_usermeta() defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/deprecated.php:2291\" source=\"PhanDeprecatedFunction\"/>\n    <error line=\"48\" column=\"1\" severity=\"warning\" message=\"Call with 4 arg(s) to \\remove_action() which only takes 3 arg(s) defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/plugin.php:642\" source=\"PhanParamTooMany\"/>\n    <error line=\"51\" column=\"1\" severity=\"warning\" message=\"Call with 4 arg(s) to \\remove_action() which only takes 3 arg(s) defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/plugin.php:642\" source=\"PhanParamTooMany\"/>\n    <error line=\"52\" column=\"1\" severity=\"warning\" message=\"Call with 4 arg(s) to \\remove_action() which only takes 3 arg(s) defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/plugin.php:642\" source=\"PhanParamTooMany\"/>\n    <error line=\"266\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"267\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"268\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"269\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"270\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"271\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n   <error line=\"272\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"273\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"274\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"275\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"276\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:113\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"279\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:110\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"280\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:110\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"281\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:110\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"282\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:110\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"375\" column=\"1\" severity=\"warning\" message=\"Argument 2 (atts) is string but \\shortcode_atts() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/shortcodes.php:530\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"1112\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_register_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:110\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"49\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"60\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"71\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"82\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"21\" column=\"1\" severity=\"warning\" message=\"Call to deprecated function \\get_the_author_description() defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/deprecated.php:1304\" source=\"PhanDeprecatedFunction\"/>\n    <error line=\"9\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_style() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"10\" column=\"1\" severity=\"warning\" message=\"Argument 3 (deps) is string but \\wp_enqueue_script() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-scripts.php:221\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"227\" column=\"1\" severity=\"warning\" message=\"Argument 4 (ver) is null but \\wp_enqueue_style() takes bool|string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/functions.wp-styles.php:154\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"24\" column=\"1\" severity=\"warning\" message=\"Argument 1 (size) is bool but \\next_image_link() takes array|string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/media.php:2577\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"24\" column=\"1\" severity=\"warning\" message=\"Argument 1 (size) is bool but \\previous_image_link() takes array|string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/media.php:2561\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"776\" column=\"1\" severity=\"warning\" message=\"Argument 1 (credentials) is string but \\wp_signon() takes array defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/user.php:28\" source=\"PhanTypeMismatchArgument\"/>\n    <error line=\"229\" column=\"1\" severity=\"warning\" message=\"Argument 1 (msgNum) is int but \\pop3::delete() takes string defined at /var/lib/jenkins/jobs/project/workspace/src/wordpress/wp-includes/class-pop3.php:582\" source=\"PhanTypeMismatchArgument\"/>\n. ```\n$username = $_GET['username'];\n$query = \"SELECT pid from users where username = '$username'\";\nmysql_conenct(....);\nmysql_query($query);\n```\nThe above code will produce an sql injection.  99% of SQL injections will be stopped by using parameterized queries.\nSome more info here: http://php.net/manual/en/security.database.sql-injection.php\n. another example would be INSERTing user input directly into the database (parameterized or not) and then using it as trusted data as part of SELECTs later.\n. brew is currently using php 7.0.11, php-ast 0.1.1, and phan 0.6\n. dev-master works as expected.  Could we release a 0.7 so that brew can be updated?\n. I didn't install it via homebrew.  Instead I cloned the git repo and ran composer by hand.\nif you want to do it via homebrew, you'll have to edit the brew configuration file.  Either that or wait for the next release to be made of phan and for brew to be updated with the new version.\n. ```\n$ git show ~/projects/phan/\ncommit 0da4b0d19052abcd8a3d434059d81974c790cb02\nMerge: 7ac42ee e6f9e01\nAuthor: Andrew Morrison asm@collapse.io\nDate:   Mon Sep 26 12:41:45 2016 -0400\nMerge pull request #332 from muglug/patch-2\n\nFix erroneous return type for file function\n\n```\n. is there a recommended way to produce the file list that is in the correct order?\n$ find ~/projects/projectname/ -name \"*php\" | wc -l\n     596\n. ```\n$ git show ~/projects/phan/\ncommit 0da4b0d19052abcd8a3d434059d81974c790cb02\nMerge: 7ac42ee e6f9e01\nAuthor: Andrew Morrison asm@collapse.io\nDate:   Mon Sep 26 12:41:45 2016 -0400\nMerge pull request #332 from muglug/patch-2\n\nFix erroneous return type for file function\n\n```\n. the error is stopped if 1.php is changed to:\n<?php\n$dbh = \"blah\";\n. Thank you for looking!\nIn the mean time I'll manually verify the false positives and filter.\n. ",
    "kostajh": "If anyone takes this up please post a link here to your project when it's ready for contributions and testing!\n. ",
    "scaytrase": "Yes, replacing custom CLI with well-known components would be great for many reasons\n. @rlerdorf @morria I'll try to reimplement you CLI and Configs with Symfony Console component next few days. I want to implement multiple file-source options, multiple exclude options, automated fileset generaton (no need to run find -type f -name *.php) and another features possible with this component.\nI this work would be done well, should you consider to accept this? Or you want to stick to your own implementation?\n. I'm not sure I can really help you with features, but it is possible for infrastructure issues. travis, phar packaging is already done, now I want to make this stuff enjoyable (easy usage)\n. Returning to this thread - travis is already integrated and add (or not) nightly would be easy implementation, so I suggest to decide and close this.\n. I hope you register this project at https://packagist.org/ to be fetchable with composer require\nAlso you could Expose phan binary to be automatically available at project dir within ./bin/ folder\nsee phpmd as a reference\nhttps://github.com/phpmd/phpmd\nhttps://github.com/phpmd/phpmd/blob/master/composer.json#L50\nhttps://packagist.org/packages/phpmd/phpmd\n. thank you! I'll propose some improvements soon\n. I hope we will not need the whole wiki page to scan a single project :) \n. I hope we'll finish in running phan just like phan analyze -r src/ -r other_src/ -e vendor/ -p -o phan.out (and some other options for tune). I've already started some works on it using symfony console and other components to handle file aggregation process not involving bash.\n. @morria I can open a PR to get your thoughts on it. There is many things to do, as currently Cli is statically called among many classes (alongside the Log class)\n. thank for noting this\n. Yes, though to open another bug for this.\n. Partially fixes #37 (no nightly builds configured now)\n. As far as I understand currenly this behavior is only possible as Phan currently does not involves autoloading as class resolving mechanism but it needs a class content for analysing.\nI hope this will be fixed\n. The other problem is that you should pass files in correct order now. I fed my symfony-based project alongside the vendors dir to Phan and as the Kernel goes first - it complained that it does not know the bundle classes, despite of the fact they are on the list\n. Rebased onto accepted #48\n. Is their CLA that bad?\nAnyway, it would not be hard to merge a little own additions to parsed JB stuff, open an issue and support until resolved. \nAlso you can consider inspecting other stubs, netbeans one, for example\nAnd the third idea is to maintain a jb stub fork. It is still much easier than maintain the whole own set of stubs\n. I've set 20k to be sure, works well\n. I think you can also trigger a warning that xdebug has performance impact on phan. Like composer do\n. I've updated to latest master\nThe phan.txt file became 20 times smaller, but still a lot of vendors present\nphan.txt\n. Oh, you've pushed another commit. re-checking\n. Yeah, looks OK now\n. @rlerdorf how should I deal the file order problem? Do you have any recipe?\n. :+1: \n. duplicates #43 \n. Could we just do a kind of two-pass parsing to handle this? First time resolve symbols as mixed and do not argue on classes missing and second time resolve symbols with kind of \"strict\" mode (checking types and classes present). \nThis will throw away file order problem\n. the most interesting is that I found this by scanning Phan with Phan :) Thank for fixing this @morria \n. We could add return-populated type hints to functions even they do not match the function signature\n. Yes, I think this could be closed for now. I'm splitting this work into components as I am unable to support long-term fork for a single big patch.\nI'll open another PR when I'm ready to finish console\n. @morria Do the RasmusTests and PhanTest differ only in source and expected folder name?\n. @morria I thinks this one is ready for review\n. Merged it to local branch, this one fixed my travis, so :+1: \n. @morria I've intendend to split ast-working classes (the thing which know how the analyzing happens internally) and service wrappers which do some other logic (like providing env etc).\nNot sure what you mean abound combining as it was about 30% of idea of this patch.\n. If moving this way I think this should be \\Phan\\Phan (for current PhanWrapper) and \\Phan\\AstAnalyzer (or something like this, I personally prefer nouns for classes) for the second one. \nThe Wrapper name is indeed temporary as it should descript its role - it wraps the left Phan logic with file operations, LOG and most of CLI output. So it could be easily renamed, but for extenal user it would be the Phan object as the thing exposed to user.\n. I've renamed them to show up last variant, but your decision is anyway is more preferred, so I need a final variant from you.\n. @morria Log was wiped, but not deleted for now (needs some cleanup, created a new checkbox for it).\nYou can review the latest Wipe out log dc3a224 commit\n. @morria Lights are green, I'm think this one is ready for final review.\n. I'll try to fix it\n. @morria I've found out that \nrunning \nphp -c C:\\Work\\Tools\\PHP7\\php.phan.ini phan -3 vendor -l vendor -l src\nGives me src/ in file_list in this place\nhttps://github.com/etsy/phan/blob/master/src/Phan/CLI.php#L245\nphp\n            // Merge in any remaining args on the CLI\n            $this->file_list = array_merge(\n                $this->file_list,\n                array_slice($argv,1)\n            );\nAnd phan tries to analyze the folder but not a file. So it looks like it does not picks the last CLI argument for -l option\n. That's why we want to have well-known console component :)\n. I think having simple test for this case would be nice. To show did not work, to show it works now and to regress in the future.\n. I've already faced this in #58. We should really warn when running Phan with XDebug enabled. I've even have separate php.ini for rapid running phan without xdebug\n. I think these are echoes behind #55. Keeping own stubs would be difficult in the future.\n. :+1: Thank you\n. Sorry, we could not display the entire diff because it was too big.\nCould not review it all online :) I'll try to check more later\n. btw, automagick deploing phar to releases has been already configured with travis (#51), but missing @morria API KEY setting. I've mentioned this at #51 but as I see on last release tag - no setting was done\nhttps://travis-ci.org/etsy/phan/jobs/145125630\nPreparing deploy\nmissing api_key\nfailed to deploy\n. There are env variables for the Job here https://travis-ci.org/etsy/phan/settings\ncreate env var named API_KEY (mentioned here https://github.com/etsy/phan/blob/426eef4c6fd750412fb07028abd279034da87f17/.travis.yml#L31)\nput into the value a github token having public_repo or repo scope\nRefer the official docs https://docs.travis-ci.com/user/deployment/releases\n. is ast directory always present at this point?\n. Yes, no problen. it's phpstorm default setting and I just did'n noticed this. I'll check also other created files by me\n. Removed (also found 2 more files)\n. yes, planned to be removed\n. both yes. sure. will fix tomorrow \n. as you see, I've moved logic as is. can fix this. we should cover printers with tests layer\n. test assert analyzer output on source file (which should be equal to '' if output template was not created)\n. I've added a BufferedPrinterInterface which indicates that Printer should be explicitly flushed.\n. @morria This should be dev- only dependency\n. Was it autoformatted? Looks weird. I think it's better to keep this one-lined as PSR-2 does not hardly limit the line length \n. I think these ?? also can be kept one-lined as they look like extra method arguments \n. Okey, I think we can fix this later while further works\n. ",
    "TysonAndre": "This may work offline as a plugin (visitCall saves a record of an invocation to a DB/file, etc)\nPhp-language-server has functionality to find uses. It's more responsive, but requires phpdoc to exist. I implemented a POC of the daemon option in https://github.com/etsy/phan/pull/563. It accepts a single file (or a small list of files). The command line interface and request format may change in the near future. Also, the combination of pcntl (forking processes) and opening tcp streams before forking may or may not be reliable on all systems. There's still some bugs to work out when classes are added/removed (E.g. switching git branches)\nIt ended up being similar to what was mentioned in https://github.com/etsy/phan/issues/22#issuecomment-163243068. The startup time and the memory usage (when paused) should be roughly the same as the time needed for the parse phase alone.\n\n\nTo reduce latency, it uses --quick mode. It also skips steps such as plugins if a function/method/class/etc isn't the file being looked at at the moment (Not 100% correct, but close enough for many uses). It doesn't have support for getting files that depend on the analyzed files, either.\n\n\nEach request takes 100ms for phan itself\n\nEach request takes 300ms in a larger codebase. It's probably possible to bring this down a bit more with low effort, in two ways\nUsing the inotify pecl (or a separate helper process running inotify) to tell the daemon when files were added or removed from folders phan cares about (instead of making phan recurse through all of the directories on every new request). ~100ms of that time was looking up files\nAdding an additional data structure mapping file names to lists of functions, lists of classes, etc.\n      (If there's a lot of those methods when Phan loops through methods in the 'method' phase, calling $method->getContext()->getFile() to skip things if they weren't in a file we care about, on all of those methods, would add up to 100s of milliseconds.\n\n. A draft of the documentation is on the wiki at https://github.com/etsy/phan/wiki/Using-Phan-Daemon-Mode\nDaemon mode can be tried out if the master branch of phan (dev-master) is installed.\n\nThe service requires linux/unix because it requires pcntl.\nWindows would require a linux VM to run (i.e. in a VM with a shared folder or docker image, with the addition of SSH port forwarding or changing the Phan daemon code from listening on 127.0.0.1 (only requests from localhost) to listening on more/all interfaces.\n. The original issue has been addressed, please open new issues for related tickets (e.g. instructions for using it on windows, using a different protocol, autocompletion, etc).. The answer seems to be \"Yes, we do\", so I'm closing this\n\nAlso, there are a few additional reasons which weren't yet mentioned:\n\nit is much, much faster to parse a PHP file containing @return <some_array_constant> than it is to parse dozens of files into an AST, then extract doc comments and types from that AST.\n    (This could be extracted by PHP stubs, but would likely end up being committed as an array anyway)\nWhen issues with phan 0.x.y are reported, it's easier to get help (from people working on the same project, or on phan) if everyone is using the same stubs\n    (Conceptually, we could have phan-stubs as a package containing the raw data, and update the minimum required version in phan's composer version, and let various static analyzing projects use those stubs. It doesn't seem important or requested to do that. Different stubs may exist for php 7.0 than from 7.1, as a few function signatures change in minor releases, functions are added/removed).\nPHPStorm stubs are restricted to be syntactically valid PHP, so they can't duplicate functions (I guess?)\n    However, Phan's signature representation and error checking relies on being aware of multiple different supported signatures for a few functions (e.g. native functions such as implode, extensions such as apcu_store/apcu_fetch, etc.)\n    Compare https://github.com/etsy/phan/blob/28c106725bb8854cd514487f65ac2faf21ab34cf/src/Phan/Language/Internal/FunctionSignatureMap.php#L81 with https://github.com/JetBrains/phpstorm-stubs/blob/a46da018fbadee1e50347488f2a3b6a15fa40e11/apcu/apcu.php#L116 . The phpstorm signature merges multiple function signatures into a single less accurate signature, while Phan has two accurate signatures. (Also see https://github.com/JetBrains/phpstorm-stubs/blob/0f4caa98c115e31abd2c5b2936caadc729cd02db/standard/standard_1.php#L997 vs https://secure.php.net/manual/en/function.implode.php ). Most of this functionality is implemented and will be in the next release (disabled by default).\n\nA follow up task is to document @throws analysis and the relevant config setting on the wiki page for supported phpdoc annotations (after the release).. No, the master branch has the same issue.\nAble to confirm a similar issue with the below snippet:\n```\n<?php\nfunction foo() {\n    return function ($x = CONSTVAL) { return $x; };\n}\ndefine('CONSTVAL', 'value');\n$x = [CONSTVAL];\n```\n```\n0  Phan\\AST\\ContextNode->getConst() called at [/path/to/phan/src/Phan/AST/UnionTypeVisitor.php:1205]\n1  Phan\\AST\\UnionTypeVisitor->visitConst() called at [/path/to/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:24]\n2  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/path/to/phan/src/Phan/AST/UnionTypeVisitor.php:137]\n3  Phan\\AST\\UnionTypeVisitor::unionTypeFromNode() called at [/path/to/phan/src/Phan/Language/UnionType.php:174]\n4  Phan\\Language\\UnionType::fromNode() called at [/path/to/phan/src/Phan/Language/Element/Parameter.php:297]\n5  Phan\\Language\\Element\\Parameter::fromNode() called at [/path/to/phan/src/Phan/Language/Element/Parameter.php:180]\n6  Phan\\Language\\Element\\Parameter::listFromNode() called at [/path/to/phan/src/Phan/Language/Element/Func.php:185]\n7  Phan\\Language\\Element\\Func::fromNode() called at [/path/to/phan/src/Phan/Parse/ParseVisitor.php:687]\n8  Phan\\Parse\\ParseVisitor->visitClosure() called at [/path/to/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:24]\n9  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/path/to/phan/src/Phan/Analysis.php:163]\n10 Phan\\Analysis::parseNodeInContextInner() called at [/path/to/phan/src/Phan/Analysis.php:186]\n11 Phan\\Analysis::parseNodeInContextInner() called at [/path/to/phan/src/Phan/Analysis.php:186]\n12 Phan\\Analysis::parseNodeInContextInner() called at [/path/to/phan/src/Phan/Analysis.php:186]\n13 Phan\\Analysis::parseNodeInContextInner() called at [/path/to/phan/src/Phan/Analysis.php:186]\n14 Phan\\Analysis::parseNodeInContextInner() called at [/path/to/phan/src/Phan/Analysis.php:146]\n15 Phan\\Analysis::parseNodeInContext() called at [/path/to/phan/src/Phan/Analysis.php:121]\n16 Phan\\Analysis::parseFile() called at [/path/to/phan/src/Phan/Phan.php:129]\n17 Phan\\Phan::analyzeFileList() called at [/path/to/phan/src/phan.php:71]\n18 require_once(/path/to/phan/src/phan.php) called at [/path/to/phan/phan:2]\nsrc/105_const.php:4 PhanUndeclaredConstant Reference to undeclared constant \\CONSTVAL\n```. Logging a warning when xdebug is enabled will be added in 0.9.3 - see https://github.com/etsy/phan/pull/924. This reported issue should have been fixed in the latest Phan versions. There are other already open issues about instance properties that are unrelated to this one.. Assign the result of get active to a local variable, then do the null check on the local variable on the next line.\nPhan works that way for functions/methods deliberately. Real world methods can and will return different things when called multiple times (e.g. getNext()). No, there hasn't been any movement on this.\nIf you're asking about inheritdoc support, there hasn't been movement on https://github.com/etsy/phan/issues/198 either\n2 things to note:\n\nPhanSignatureRealMismatch* has been added on dev-master, and will be in 0.9.2. This is more reliable and close to php compatibility checks than PhanSignatureMismatch\nFor the example provided by the original post, when it is run in php 7(.1), the following fatal error is emitted: Fatal error: Declaration of NS1\\C1::m1() must be compatible with NS1\\I1::m1($param) in /.../inherit.php on line 4\n   So it seems correct phan to emit a signature mismatch for the specific case.. For projects written as composer libraries or using the composer autoloader, this (and things such as immediate dependencies) can be guessed from the autoloader configurations in composer.json\n\nAdding exclude_file_regex to exclude vendor/tests, doc, examples by default would be useful\nExcluding certain issue types by default (E.g. excluding PhanSignatureMismatch because PhanSignatureRealMismatch) would also be helpful.\nScanning uses of require_once/include_once may or may not be helpful, e.g. to infer file extensions such as .inc, .html, etc. are used. (check for presence of <?php?)\n--strict (default?) and --weak may also help. Rudimentary output coloring has been added to dev-master, and will be in Phan 0.9.2 (and the 0.8 backport). See https://github.com/etsy/phan/issues/646\nIt was also added to the plugins that were packaged with phan.\nNote that plugins outside of phan including severity, etc. will have to be changed to pass an array of 0 or more parameters after the issue format string(message).. https://github.com/etsy/phan/pull/368 was merged, adding the \"pylint\" option.\nI have had success using the \"pylint\" output format with the Jenkins plugin, and the reported errors show up in the \"Violations\" view.\nNot sure whether or not it supports multiple pylint report files, but it's easy to concatenate pylint reports.\n. I'm using pylint with Jenkins right now, and as I said, the violations view works properly.\nClosing this since I haven't heard anything. The other issue mindplay-dk mentioned should have been fixed in #465 and is unrelated\n$error = $e instanceof ErrorException\n            ? $this->determineSeverityTextValue($e->getSeverity())\n            : get_class($e);\nPhan still doesn't track the types of properties of specific instances of classes, just of the property as a whole\n- One possible workaround is $c = $this->c; if (cond($c)) {$c->work();}\n- If it were do start doing that, there would be pitfalls such as being unable to analyze if ($this->c instanceof subclass) { $this->changePropertyC(); $this->c->methodOnlyAvailableOnSubclass(); }\n  Magic getters and setters would also be unanalyzable. https://github.com/phan/phan/issues/1091#issuecomment-327336666 mentions the ideas for a solution.. Class properties are not inferred at all from instanceof conditionals (or any conditionals (is_string, !== Null, etc. ) right now.\nIt is in the long term plan, this ticket will be updated when they are inferred in the local scope.. This has been fixed by improvements to block analysis and condition visitors. This should work with the latest release or master.\nThis should work whether or not simplify_ast is set to true.. We seem to be fairly close to a 1.0 release:\n\nhttps://github.com/etsy/phan/issues/294 was mentioned by someone else (number alias as int|float), and had a proposed solution and implementation on my fork, but no comment (The workaround was merged)\nhttps://github.com/etsy/phan/issues/521 is the last remaining issue that I'd consider to be a major language feature. There's more work to do, owing to daemon mode and merge conflicts (done, may change)\nPHP7.1 support is mostly complete. https://github.com/etsy/phan/projects/7 doesn't seem urgent.\nhttps://github.com/etsy/phan/pull/809 fixes a rare crash.\n\nAre there any projects that you feel should be completed first?\n\n\nE.g. https://github.com/etsy/phan/projects lists some things that might be done in the short term. Reopening for discussion. Potential tasks:\n\n\n[x] Drop ast version 40 support (already planned for modifying 0.8 and dropping 0.9 in favor of 0.10)\n\n[ ]Drop V1 of the plugin system\n[x] php 7.2 support\n[x] IDE integration support, e.g. https://github.com/phan/phan/issues/1125 and https://github.com/phan/phan/issues/821\n[ ] Catching exceptions from analyzeFile\n[ ] Some (but not all) of the things labelled https://github.com/phan/phan/issues?q=is%3Aissue+is%3Aopen+label%3A%22phan+project+task%22 or https://github.com/phan/phan/issues?utf8=%E2%9C%93&q=is%3Aissue%20label%3Ausability%20is%3Aopen%20. I plan to release 1.0.0 soon and stop marking releases as pre-releases. When we were originally marking releases as pre-releases, new bugs, regressions, or crashes in Phan analysis were much more frequent.\n\nhttps://github.com/phan/phan/pull/1875 does that. It's currently just removal of deprecated methods, removal of legacy plugin support, and taking out one config option.\nAll of the most recent features were added to the 0.12.x point releases.\n\nThat PR has more details on future plans.. https://github.com/phan/phan/releases/tag/1.0.0 was created, so I'm closing this.\n\n. Side note: Case insensitive constant expressions will be deprecated in 7.3 (https://wiki.php.net/rfc/case_insensitive_constant_deprecation). This is unrelated to the previous comment.\n\nI don't think case sensitive class constants were ever supported.\n\nI'd think that it's possible to fix, and class names+namespace names are definitely useful in case sensitive filenames (e.g. linux's default file systems) depending on the autoloader you're using (e.g. composer when unoptimized)\n\nAdd Element->getDefiningCaseSensitiveName(string $name) to do that. Original example still isn't fixed, neither is the below:\n\n```\n<?php\nclass A254 {\n    /* @var ArrayObject /\n    public $prop;\n    public function __construct() {\n        $this->prop = new ArrayObject();\n    }   \npublic function set(string $a, int $b) {\n    $this->prop[$a] = $b; \n}\n\n}\n```\nsrc/array.php:11 PhanTypeMismatchProperty Assigning int[] to property but \\A254::prop is \\ArrayObject\n. We haven't added a super-strict config param to Phan yet. The current behaviour reduces the false positives.\nIf we were to do so, having an undefined type for union types alongside other types would be one possible way of warning about possibly undefined types. Yes, there's a check in Phan which is stricter about variables that aren't defined on all branches (e.g. if statements) if the code has strict_types=1 (as a heuristic for how strictly to analyze a file). Having something configurable in .Phan/config.php may be done in the future.. Closing this. The more general case is #1345. This would be caught by running php5 --no-php-ini -l $file, php7 --no-php-ini -l $file on the same files that Phan would parse/analyze (For the php minor versions you aim to support), and checking if any of those syntax checks failed (i.e. non-zero exit code)\nSee https://github.com/etsy/phan/issues/629 (not sure if this needs to be within the scope of what phan checks, phan checks are more useful for things relating to union types or across multiple files). InvokePHPNativeSyntaxCheckPlugin can be used to detect this.\nIf Phan ever supports target_php_version of '5.6' (Unlikely if support is dropped in December 2018), that warning could be added.. php 5 stopped receiving security support at the end of 2018.\nIt should be easy to write a plugin for this or use the above workaround. If anyone does write a plugin, feel free to link it here.\nThe php compatibility checks in Phan are mostly for behaviors that worked in PHP 5 but changed/were removed in PHP 7 (for migrating to php 7) - This is something that didn't work in PHP 5 and works in PHP 7.. Static constant access from a string isn't supported in phan. There's nothing we can do about that in the general case, phan tracks types, not string values\n($p = 'MyClass'; return $p::CNST would emit PhanUnanalyzable). https://github.com/TysonAndre/phan/pull/4/files is one way of doing this (handle immediately after parsing doc comment)\n(Not in etsy/phan, but could be redone as a PR against etsy/phan if this is useful to have. Emitting a issue if a key of 'experimental_invalid_phpdoc_types' exists as a class/builtin would be a TODO)\nnumber isn't a reserved name in php yet.\n(It's mostly meant for old invalid phpdoc, so it doesn't bother to expand number|null or number[] (to int[]|float[]). It would replace those vars, params, and return types which are exactly \"number\" with int|float.\n'experimental_invalid_phpdoc_types' => ['number' => 'int|float'], \n. See PR #1112, the phpdoc_type_mapping setting will be in the next Phan release. This may be expanded to individual parts of phpdoc types (including the inside of nullable types), but currently acts on the string as a whole.\nIn order to avoid unintuitive issues similar to https://github.com/phan/phan/issues/781 , I'd rather be conservative about adding types that aren't in phpdoc2 or other standards. php\n$ vendor/bin/phan --use-fallback-parser\nsrc/new.php:8 PhanSyntaxError syntax error, unexpected 'new' (T_NEW)\nsrc/new.php:9 PhanUndeclaredMethod Call to undeclared method \\a::invokeMissingMethod\nThe --use-fallback-parser mode may be of some use to people who want to parse this (Though just changing =& new a() to = new a() would be better.)\nIn addition to emitting PhanSyntaxError, it does its best to ignore invalid/missing tokens and analyze the remaining statements in the file to warn about those as well.\n\nThis setting only affects the files that are both parsed and analyzed. This does nothing for files excluded from analysis.\n\n```php\n<?php\nclass a {\n}\nfunction testNew() {\n    $a =& new a();\n    $a->invokeMissingMethod();\n}\n```\n. @slokhorst You should be using https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-closure-scope. Also, BlockExitStatusChecker (in dev-master) can be used to help with inferences\nFor code such as if (is_array($v)) { return 'string'; }, Phan could infer that $v is not an array for the statements following the if statement, as well as else/elseif statements\n\nif (is_array($v)) { break; } would be more complicated, may or may not need to change the context merging logic to skip a few levels.\nCan cut down on extra asserts if if (!is_string($v)) {return; } is analyzed properly, and Phan knows not to merge the context for that branch, and to infer the negation in the other Context(s)\n\nDue to 'quick_mode' => false,, this should probably be precomputed (after \\ast\\parse_code call? Once per method/function/closure declaration?). But $node->flags can be re-used for node types such as AST_IF, AST_IF_ELEM, for loops, etc., which don't have flags (e.g. bits which aren't already used, such as 1 << 24 for unconditional return, 1 << 25 for unconditional throw or return, etc.)\n\nThen, the ContextMergeVisitor can check that, e.g. for AST_IF, switch statements, etc.. More generally, it would be useful to have an annotation like @phan-class-of-closure C - The closure might end up being passed to a test framework as a function argument, etc.\nI'm not aware of a phpdoc way to specify this, but haven't looked.\n\nbindTo also exists as a method of a closure, and would need to be supported. The last time I tried, I got an error about callable not having a method bindTo\nphp\n$a = (function () {\n    return $this->_privateProperty;\n})->bindTo(new C);\n. Still need to change the file and line to use the file of the closure, not the file of the class. PhanClosureScope is a work in progress.\nEDIT: minor note: should be called @phan-closure-scope to be consistent with phpdoc conventions. Possible solution (not sure if this will actually work):\nSplit $class->hydrate() into 3 steps (each of which will be invoked once per class, and which will have logic to check if the phase is being called): \n\n\nhydrateAncestorClassElements, to ensure that the (hydrated or unhydrated) ancestors exist and are set as properties of the current Clazz object, and the ancestors of ancestors have called hydrateAncestorClassElements\nIn sane codebases, there won't be any loops of ancestors. Warn if there are.\n2. hydrateConstants, to ensure that the (possibly with unresolved types) class constants (and optionally global constants?) exist.\nThere may be loops in definitions of constants, which is why hydrateAncestorClassElements is called first (If hydration is still in progress for a superclass, and the constant doesn't exist yet, manually walk/process the tree of ancestors, calling hydrateConstants as necessary)\nWhen hydrating, hydrateConstants should call $ancestor->hydrateAncestorClassElements(); $ancestor->hydrateConstants(); in that order.\n3. hydrateMethodsAndProperties, to ensure that the methods (possibly with unresolved types of default values based on constants) exist.\n\n\ni.e. change code which needed to hydrate all of the methods and properties from $class->hydrate(); to $class->hydrateAncestorClassElements(); $class->hydrateConstants(); $class->hydrateMethodsAndProperties(); , in that order. (each phase should be separate, e.g. hydrateAncestorClassElements shouldn't indirectly call hydrateConstants)\nAs before, if Phan isn't finished with the hydrateConstants phase, and a constant isn't resolved, then walk the tree manually.\n\nAdditionally, it may help to add some of the constants in hydrate (the subset which don't depend on other constants and aren't from ancestors) before processing ancestors, such as MyClass::class, or resolving MyClass::PLAINCONST in  class MyClass { const MYCONST = 2;}\nphp\n//  PROPOSED: Iterate over the values of `foreach ($class->getConstantMap($code_base) as $constant) {` which were declared in the class, not it's ancestor, before calling hydrate(), it the types aren't dependent on other (unknown) types\n// Skip those the second time.\n858         // Make sure that the class imports its parents first\n1859         $class->hydrate($code_base);\n1860         $is_trait = $class->isTrait();\n1861         $trait_adaptations = $is_trait ? ($this->trait_adaptations_map[$key] ?? null) : null;\n1862 \n1863         // Copy properties\n1864         foreach ($class->getPropertyMap($code_base) as $property) {\n1865             // TODO: check for conflicts in visibility and default values for traits.\n1866             // TODO: Check for ancestor classes with the same private property?\n1867             $this->addProperty(\n1868                 $code_base,\n1869                 $property,\n1870                 $type_option\n1871             );\n1872         }\n1873    \n1874         // Copy constants\n1875         foreach ($class->getConstantMap($code_base) as $constant) {\n1876             $this->addConstant($code_base, $constant);\n1877         }\n1878. Recent commits to master have improved this a bit.\nHowever, protected $prop = self::CONST where CONST is only available from an ancestor class tends to prematurely hydrate the class.\nSearching the list of ancestor classes without hydrating is one solution (At least for before the parse phase is completely finished). I started working on hydrateConstants.\nprotected $prop = self::CONST is consistently a FutureUnionType now, and code was rewritten where necessary to avoid prematurely hydrating that. (Except when that has a template @var type, which should hopefully be very uncommon). This should be fixed for properties/param defaults depending on class constants.\nI also split up hydration for classes+constants from properties+methods.\nUnfortunately, this won't be fixed for constants depending on inherited constants. If a constant is defined in a class (i.e. not inherited), that won't trigger hydration. See src/Phan/Language/Element/Clazz.php\n1039     /** \n1040      * @return bool\n1041      * True if a constant with the given name is defined                                  \n1042      * on this class.\n1043      */     \n1044     public function hasConstantWithName(                              \n1045         CodeBase $code_base,                                      \n1046         string $name              \n1047     ) : bool {                      \n1048         if ($code_base->hasClassConstantWithFQSEN(\n1049             FullyQualifiedClassConstantName::make(\n1050                 $this->getFQSEN(),\n1051                 $name\n1052             )                                    \n1053         )) {\n1054             return true;\n1055         }\n1056         if (!$this->hydrateIndicatingFirstTime($code_base)) {\n1057             return false;\n1058         }\n1059         return $code_base->hasClassConstantWithFQSEN(\n1060             FullyQualifiedClassConstantName::make(\n1061                 $this->getFQSEN(),\n1062                 $name\n1063             )\n1064         );\n1065     }. The original reported issue was fixed. There will be issues in much less common edge cases of class constants depending on inherited class constants. (But I no longer expect hydration issues to be caused by  parameters/methods depending on class constants, inherited or otherwise).\nParameters/methods are hydrated in a separate phase (hydrate()) after class constants are hydrated. (hydrateConstants()). The original example is now supported on dev-master, through https://github.com/etsy/phan/pull/744. Also note that the below code will cause a fatal error (Solutions to this should check the value of strict_types in the file containing the catch statement). It works without the declare.\n<?php declare(strict_types=1);\ntry {\n    throw new Exception(\"message\");\n} catch(\\Exception $e) {\n        error_log($e);\n}\n. The next phan release (0.10.1) will introduced Phan\\PluginV2\\ReturnTypeOverrideCapability which should make writing this a lot easier.\nThe new capability can be used by an extension to hook into createMock (This may still require more work to get inheriting classes to also use that plugin)\nContextNode->resolveClassNameInContext() (Name may change) can be used to get the fully qualified class name from the Node for FormatterInterface::class\nhttps://github.com/phan/phan/blob/master/src/Phan/Plugin/Internal/ArrayReturnTypeOverridePlugin.php. I had plans for something similar, but preferably within a single file for user defined code.\nThose would be in phpdoc, within the same file\n- The only meta files which are bundled with a project appear to be https://github.com/JetBrains/phpstorm-stubs/blob/master/meta/.phpstorm.meta.php (Phan already analyzes array functions)\n- It seems like phpstorm files are distributed across a wide number of phpstorm plugins, making them inconvenient to get if you don't use phpstorm.\nPhpstorm's model doesn't really go well with phan's model.\n\nPhan parses or parse+analyzes, the stubs would be treated as invalid if analyzed\nHaving a half-complete implementation of whatever phpstorm's most recent plugin implementation was would be confusing for non-phpstorm users, and harder to set up (have to search for meta).\n\nAlso, PHPStorm's stubs don't seem to be included with composer libraries themselves, in my experience, so it's harder to use them (not sure if that would even work)\n\nE.g. not bundled with phpunit/phpunit, etc.\n\nIt might be possible for someone to write a third party plugin capable of parsing the phpstorm meta format for magic functions, and use that to generate ReturnTypeOverrides (E.g. provide that plugin with a config to a directory, use Config::getInstance()->get_value('plugin_phpstorm_directory') to get that directory, then list and process the directory, then return the overrides\n\nThere were plans to convert T[] to a return type of T, T to T[], etc. via a plugin or native functionality. Could also try to later add phpdoc syntax for mapping literals to varying kinds (e.g. @phan-pattern-match {$param1==\"foo\"} {return=FooInstance} 'foo' => FooInstance (Almost definitely not exactly that))\nE.g. via something like @template, but supporting static methods, as well as basing template types on passed in param types/values. Related: @template-typeof in psalm: https://github.com/vimeo/psalm/blob/master/docs/supported_annotations.md#template-and-template-typeof. Vaguely related: https://github.com/phan/phan/blob/master/.phan/plugins/PHPUnitNotDeadCodePlugin.php is just used for reducing false positives in --dead-code-detection right now, but would be a starting point for any plugins that affect only unit tests.\nBut return type overrides (as mentioned in https://github.com/phan/phan/issues/338#issuecomment-337277001) would be more useful for this specific use case.\nPregRegexCheckerPlugin uses AnalyzeFunctionCallCapability, and might be a place to start for modifying variable types after assertInstanceof, assertTrue, etc.. This will be doable via stubs or phpdoc annotation as well in the next Phan release. (by excluding the original file, replace it with a modified version of the original)\nPhan will also be able to infer that methods/functions create instances of the passed in class name. (phan-template, phan-param, and phan-return can be used to avoid conflicts with other tools)\nHopefully, a more user friendly way to configure this will be available in subsequent releases.\n/**\n * @template T\n * @param class-string<T> $className\n * @return T\n */\npublic function createMock(string $className) {\n}\n\nUnrelated: Also see assertinstanceof in https://github.com/phan/phan/blob/master/.phan/plugins/PHPUnitAssertionPlugin.php (API is still being finalized). This is on the master branch, but not released yet.\nFuture releases will have to change Phan\\CLI::PHAN_VERSION;. Misc thoughts\n\n\nTo start off with the simplest possible code, check if a variable is defined but never used. (As well as checking that it was never a reference or assigned by reference (left or right hand side (var/expr) of visitAssignRef)\n\n\nThis avoids edge cases in analyzing for loops, etc.\n\nSuperglobals ($_POST, etc.) are an exception\nCan be moved to a plugin or in the parse phase\nWill need to know the types of Variables, in order to figure out if an instance method call is creating references or not\nTry this at the statement level\nThis might be solveable by keeping a use count associated with Phan\\Language\\Element\\Variable, starting from the first time it was used (Internal, or external via [string $varName => bool $wasReferenced]\nForeach (array as $key => $value) can also create variables\n\nlist($x, $y, 'key' => $z) = expr can also create variables. Sounds interesting. Phan will emit a warning for the original example and many others if the plugin mentioned in https://github.com/phan/phan#features-provided-by-plugins (Unused variable detection) is used.\n\n\nThere are some known issues analyzing loops, etc. in that plugin's issue tracker\n\n\nThis may eventually become part of phan itself.. Done.\n. I'm not aware of a way to do that. (make signature map depend on the version of the extensions).\nAlso, if this is analyzing php 7 method signatures, there's no support for Memcached 2.2 in php 7, and bug fixes were made after these signature changes.\n. https://github.com/etsy/phan/pull/647 added the option exclude_file_regex, which allows excluding groups of files from parse and analysis\n\nThis is in dev-master, and will be in the 0.9.2 release\nFollow up extended that to work on the full relative paths within a project.\n\nAs an example, if one wanted to exclude all of the tests from src and vendor from parsing, add 'exclude_file_regex' => '@(src|vendor)/.*/[^/]*(tests|Tests)/@'\n\n\nThis can be extended to exclude files from within namespaces, files from doc or example folders of vendor, etc.\n\n\nThis is a PCRE regex (e.g. same as what preg_match uses), and it normalizes the directory separator to be / before comparing the relative path within the project against the regex (so it will also work on windows)\n\nThis is much less verbose than adding multiple entries to exclude_file_path. https://github.com/etsy/phan/issues/773 suggests warning about a similar but different issue related to confusion about duplicated classes.\n\nAlso, the exclude_file_regex setting can be used to exclude groups of files (tests, doc, examples) from the vendor directory.\n. After https://github.com/etsy/phan/pull/620 is merged, this will effectively be fixed.\nPhanParamSignatureMismatch can be suppressed, and PhanParamSignatureRealMismatch can be used to detect these errors with a much lower false positive rate. (Avoid php warnings and Errors in php 7)\n\nOther things, such as automatically inheriting phpdoc, haven't been done yet. (https://github.com/etsy/phan/issues/142)\n   That would help reduce some of the PhanParamSignatureMismatch issues.. I also have a similar use case in a project (but not using @property - This is custom logic in offsetGet() and __get(), which could be exported and used in a plugin)\n\nWhat parts of Phan would one look at in order to add a plugin to annotate types of dynamic properties and member variables?\nE.g. for requirements such as:\n- Foo->a (Fetched through __offsetGet) is of type ABC\n- Foo->b[$key] is of type BClass (possibly writeable as Foo->b is of type BClass[])\n- Bar['abc_key'] is of type AClass (Only expecting literals as keys, not expecting variables as keys)\n- Bar['xyz_key'] is of type XYZ[][]\nwhere Foo and Bar are class names\n. Actually, my use case is closer to wanting @property-read to be added\nhttps://phpdoc.org/docs/latest/references/phpdoc/tags/property-read.html\nhttps://phpdoc.org/docs/latest/references/phpdoc/tags/property-write.html\nhttps://phpdoc.org/docs/latest/references/phpdoc/tags/property.html\n. The way the page was worded suggested that plugins can only be used to emit issues, so I got confused the first time I read it.  (Didn't mention anything about annotating types, and none of the example plugins would set the type of variables/properties)\n\nAs the method names suggest, they analyze AST nodes, classes, methods and functions respectively.\nWhen issues are found, they can be emitted to the log via a call to emitIssue.\n\nSo, one would write a plugin which had a method analyzeClass which had similar code to PropertyTypesAnalyzer::analyzePropertyTypes (in addition to declaring extra properties). This would be based on the doc comment, and would replace (or add types) to what analyzePropertyTypes emitted.\nIs that right?\nhttps://github.com/etsy/phan/blob/master/src/Phan/Language/Element/Clazz.php\nPropertyTypesAnalyzer::analyzePropertyTypes(\n            $code_base, $this\n        );\n        // Analyze this class to make sure that we don't have conflicting\n        // types between similar inherited methods.\n        CompositionAnalyzer::analyzeComposition(\n            $code_base, $this\n        );\n        // Let any configured plugins analyze the class\n        ConfigPluginSet::instance()->analyzeClass(\n            $code_base, $this\n        );\n. @elliotchance - Your example should have the original error fixed if https://github.com/TysonAndre/phan/pull/1 is used (or manually merged into the latest dev-master).\nI think that my PR currently needs more work to actually be merged into the etsy/phan repo - The PR was created in case phan maintainers had any thoughts on what work was sufficient.\nAlso, I doubt that this can implemented through a plugin\nafter reading the documentation again.\nThe way to do this seems to be to create a fake property, as if there was a public $propName with a @var declaration. (And avoid incorrect inferences based on assignments)\nAlso, the documentation of plugins says that plugins should not mangle state\n(I assume that means modify, it's unclear). \nAlso, the documentation is vague on guarantees.\nE.g. will a given visit() step be executed in the parse phase, before forking multiple processes?\nFrom the example plugin documentation:\nphp\n/*...\n 36  * It is assumed without being checked that plugins aren't\n 37  * mangling state within the passed code base or context.\n 38  */\n 39 class DollarDollarPlugin extends PluginImplementation {\n. Any thoughts on adding this to Etsy/phan? I added an implementation to my fork(not as a plugin) - property, property-read, and property-write are currently all equivalent,\nAlso, something like @PhanHasCompletePropertyAnnotations would be useful for this as well.. In order for Phan to recognize an internal class as being defined, the corresponding extension needs to be enabled in php.ini (and the extension needs to be installed). Not sure if that's deliberate.\nAdd extension=pdo.so to /etc/php.ini in the docker image, and make sure that pdo/packages for pdo are installed.\n- This requires forking the docker image, and adding the additional packages to https://github.com/cloudflare/docker-phan/blob/master/builder/scripts/mkimage-phan.bash#L27-L30 and php.ini\n(Or invoke phar as php -d extension=pdo.so pharcommand.... pharargs...)\nhttp://php.net/manual/en/pdo.installation.php\n. Are the developers of phan planning to rename local variables to camelCase? I see underscores in variable names as a very common convention, including in the example plugin.\nIf it's unimportant, can that specific codeclimate check be disabled?\nThe parameter $code_base is not named in camelCase.\n. > Yeah, that is a silly check. I have no idea if it can be turned off.\nhttps://github.com/etsy/phan/pull/392\n. So, I think superglobals are working as intended now.\nI created https://github.com/TysonAndre/phan_example_project to test this (and the magic properties change in development)\nI still need to implement TypeMismatchGlobal or TypeMismatchVariable(Assign).\nI noticed that the below snippet emits no errors (On etsy/phan master branch),\nso I don't know where I should start with type checking assignments in the global scope.\n<?php\n/** @var int $a */\nfunction bad_assign() {\n    $a = new DateTime();\n}\n. I wasn't able to reproduce this bug using the latest version of Etsy/phan. Update or redownload phan.\n. Although I didn't test with 7.0.3, but with 7.0.13\n. Yes, I wasn't able to reproduce 399 with the latest php 7.0.13 and php-ast modules even before this PR.\n. EDIT: never mind, misread the original comment.\nPhan currently unifies the actual types and declared types for return types and param types (and variable types), so it would have to track both types separately to do that.\n. Phan tracks phpdoc types and real types separately now.\nRelated to https://github.com/phan/phan/issues/1549 as a specific example.. I figured out why I was having issues - The code in AssignmentVisitor hadn't been updated yet, and was checking only for stdClass.\nhttps://github.com/etsy/phan/pull/810 fixes my issues with assignment.\nThe below would have triggered the bug I had.\nphp\n<?php\n$movies = new SimpleXMLElement($xmlstr);\n$movies->newTagElement = 'newValue';. I implemented a proof of concept at https://github.com/TysonAndre/phan/pull/5 with most of those rewriting rules - The existing unit tests pass, and phan is able to analyze the phan codebase.\nI still plan to test this more.\nThe proof of concept contains a fix for https://github.com/etsy/phan/issues/407 and https://github.com/etsy/phan/issues/224\n(https://github.com/TysonAndre/php-ast-simplification is a standalone project to run this step, and view the old/new AST for single php files or snippets). #424 was merged. #735 may be worth investigating before trying to make this standard, Analysis with AST rewriting was much slower than without, the last time I tried it.. 'simplify_ast' => true is currently the best workaround. It helps for && expressions, negations, etc., but isn't comprehensive.. simplify_ast will be enabled by default in the next release. There's still going to be edge cases with || and assignments within function calls, etc., but if ($a = value() && cond($value)) {...} should be analyzed properly. Additionally, ConditionVisitor->visitAssign() now calls BlockAnalysisVisitor->visitAssign(), so the variable should now be picked up. This will go out in the next Phan release.\nThere's still some issues with variables that are created by reference (e.g. if (... !preg_match(...., $matches)){}. Closing this due to inactivity.\nMisc notes: \n- The current phan phpdoc parser implementation doesn't allow for spaces in generics (e.g. array<string, string>, fixable\n- php-ast doesn't emit comments for variable assignments, just for places where Reflection will get you the doc comments (function scope, etc.) (E.g. /** @var SomeType<T> */$x = $this->{$method}(); won't have a doc comment.\n- . > about pulling in phan to php-language-server.\nPhan has a language server now, also using the language server protocol. See https://github.com/phan/phan/wiki/Editor-Support#editors-with-phan-support . There's a PR to support composer's autoloader; that PR has a failing build and requested changes.\nThe way that these represent ASTs, determine which documents need to be loaded, etc. are fairly different.\n\nOther notes:\n\nhttps://github.com/phan/phan/blob/master/src/Phan/Language/Type.php is a huge class. In addition to the parsing logic, it has a lot of casting logic, helper methods to categorize types, etc. for use in type checking. Only the first part and small parts of the rest of it would be broadly useful.\n\nIn my opinion, either (1)forking src/Phan/Language into a separate project with a different namespace, or (2) depending directly on Phan just for that folder without executing Phan would be a better approach.\n\n\nFor the second approach: Note that Phan pins the tolerant-php-parser version to a specific version to uncertainty of what might become a backwards incompatible change (for Phan) in the 0.0.x releases (e.g. Any PHP notices, deprecation warnings) would trigger Phan's error handler and terminate Phan). Note that the Language/ folder doesn't even use tolerant-php-parser.\n\n\nAs mentioned earlier, many new features in Phan might require changing file both inside and outside the Language folder, and splitting that would slow down development of Phan. It's uncertain if a library like that would be used elsewhere without any other projects already using Phan's parser.\nPhan has added array shapes (array{key:T}) and literals such as @param 'my-string'|'other-string' $x and callable(T1):T2 after my last comment, as well as Phan-specific annotations such as @phan-param. I don't think 100% of that would be used, and it isn't configurable right now. See https://github.com/phan/phan/wiki/Annotating-Your-Source-Code and https://github.com/phan/phan/wiki/About-Union-Types\n\nThose extra union types are not part of any official standard that I'm aware of.. This is the same as https://github.com/etsy/phan/issues/388, it has to be installed and enabled on the environment running phan. Remaining tasks:\n\nThere's no property signatures for ast, so there's a lot of warnings when working with it. A lot of issues like:\nsrc/Phan/AST/ASTSimplifier.php:254 PhanTypeMismatchProperty Assigning int to property but \\ast\\Node::kind is null\n\nIn some ways, this is worse, since if (!is_string($foo)) return; $var = expr; is changed to if(is_string($foo) { $var = expr; } else { return; }, so there are false positives on $var being undefined. In addition to seeing if some branches have no exit, I would need to check if one of the branches (IF_ELEM)is the only way to continue past an if statement\n\n(The below type of false positive started showing up, haven't investigated what step caused it yet. The above is a guess.)\nsrc/Phan/Analysis/PreOrderAnalysisVisitor.php:93 PhanUndeclaredVariable Variable $clazz is undeclared\n.... This setting is off by default, and it should be safe to merge.\nBuild failures were also fixed.. Added documentation to the new functions in this PR.\nChanged variable and method names to follow phan's naming conventions.\nNo more changes are planned.. If there's no more comments, this will be merged on may 5th.. https://github.com/etsy/phan/pull/742/files includes a bug fix for ASTSimplifier, one of the optimizations was incorrect. I'm not aware of any way to do that - the php-ast plugin doesn't seem like it'd have a way to add a doc comment to a file.\n'globals_type_map' => ['site' => '\\\\SiteEntity'] in the phan config might be useful for you (in .phan/config.php), but would silently override other types assigned to $site (without emitting an issue). Related to https://github.com/etsy/phan/issues/313. A workaround is to put assert($site instanceof SiteEntity) before the first usage.. Adding PhanUndeclaredFunction, PhanUndeclaredMethod, PhanUndeclaredClass, etc. for the removed functionality would be another way to detect this.\n\nCould try to emit PhanDeprecatedFunctionInternal in addition to PhanUndeclaredFunction already being emitted if we know the function/method would be deprecated, FQSEN is missing. #829 is related, but tangential\n  (Same for methods). #915 is a way to augment that approach. Also, there's    'ignore_undeclared_functions_with_known_signatures' => false, in the latest releases. A script to update the list of issue types was added as internal/update_wiki_issue_types.php . The wiki is updated with all of the issue types from Phan 0.12.3 (roughly).\n\nCurrently, the wiki just has the template string for the issue message, for most of the new types.. This is very likely to have the same cause as https://github.com/etsy/phan/issues/537. The original issue should be fixed in the latest releases (When properties/methods depend on constants). I expect that constants will always be properly hydrated before properties and methods (using constants as default values) now.\nIf a class constant depends on an inherited class constant, you may still have issues, but hopefully that is uncommon. That can be fixed by depending directly on the ancestor's class constant instead of the subclass's class constant.. This has been fixed by morria on dev-master, and an array/ArrayObject is recognized as an iterable.. This will be fixed by https://github.com/etsy/phan/pull/744. Merged #744 (will be in 0.9.2), file new issues with example code snippets for any new issues seen. The phpdoc standard seems to be @param array ...$args for a variadic array of arrays, not array $args - see the test in https://github.com/phpDocumentor/phpDocumentor2/commit/14510b1833ed3ca3467169e8e9f5f6924342a977. If $args was an array of integers, I would expect\nphp\n/** @param int ...$args */\n// Or\n/** @param int[] $args */\nWhen reading it, instead of int $args (should be obvious from looking only at the doc comment, but I need to look in both places to know if it is an array of ints)\nI.e. the test should instead test\n/** @param array ...$args */ (and then the test would be correct)\n(Same comment for an array of arrays.)\n\nUnrelated: Types incompatible with array should be invalid(e.g. /* @param int $args*/ should warn that @param int ...$args was probably intended, but be ignored until that is fixed\n. > phpStorm is compatible with @param string[] $words when the code is function name(string ...$words), and becaie I'm using that IDE I am following that style, and honestly that make sense IMO, because inside the function body the variable $words will be an array of strings, just like string[] $wordssuggests.\nPHPStorm also supports @param string ...$words. You can use @phan-param string ...$words (I think) if you have a need to type @param string[] $words for other tools to work properly. (As of january 2018)\nhttps://youtrack.jetbrains.com/issue/WI-29429#comment=27-2680697\n. What's left to do on the 7.1 branch?\nAlso, what's the planned difference between Foo|null and ?Foo in terms of where violations would be emitted? (E.g. are there config settings which would change that?). That was just an example to reproduce the bug. It's possible for phan to assume an expression will only be some type(e.g. array), when it is occasionally a different type (e.g. function with no @param). If this is worked on, https://github.com/etsy/phan/pull/593 (PR to support @property) is a good example to base a proof of concept off of.. PR #640 was merged, and should be sufficient for the php mock objects framework. Try again with  dev-master.\nIf there are any bugs/requested features, discuss them in https://github.com/etsy/phan/issues/660 . Duplicate of https://github.com/etsy/phan/issues/204. PR https://github.com/etsy/phan/pull/529 will fix this. The default version changed to 40 today in php-ast : https://github.com/nikic/php-ast\nMay be worth upgrading it to 40 instead of 35 (E.g. statement list normalization makes writing plugins easier). I was thinking about something similar.\nNotes:\n\nProbably want to make things which are considered to be typos configurable.\n  Only treat a line of a docComment (e.g. @returns instead of @return) as a typo if it didn't match any of Phan's regexes\nChecking if a unionType in some recognized annotation (e.g. @param,  @method, @property) is invalid would be separate from those checks\nMay want to try to parse standard union types as Phan union types with a recursive regex, if Phan is configured to do so and it is feasible\n  (e.g. try to expand (int|string)[]|MyClass to int[]|string[]|MyClass, and treat it as if the latter was used)\n\nIt's possible to check for some common misspellings (e.g. people with a background in JS might use the JSDoc @returns annotation instead of @return, and we'd want to warn about that. However, we wouldn't want to warn about most things Phan doesn't recognize, such as http://apidocjs.com/ (which can be used for PHP))\nIt's also possible to check phpdoc being used in the wrong context (E.g. using @param on a property definition)\nFor some namespaced directives, it's possible to check for typos (e.g. @phan-some-custom-directive-or-typo isn't recognized by the current version of phan). This was completed on dev-master by #779. The issue type PhanExtractableAnnotation (Lowest severity) will be emitted for param/return/var. This may or may not change before the 0.9.2 release.\nIf it ends up being too noisy, or incompatible annotations are used for different reasons, the suggested approach is to temporarily blacklist that issue type.\nhttps://github.com/etsy/phan/pull/779/files#diff-78b008634bc091ba0df912893f83f017\n. One way to solve this would be to copy/move the AST node for $node = next to multiple places, with the same line numbers (e.g. as part of a default/special AST rewriting step)\nAnother way would to try to track this manually in the block/post order analysis visitor\n\nAt the end of the statement list of the for loop\nBefore any continue; statements that are closest to the for loop\n  (Aside: continue is a confusing alias for break in a switch, I think)\nIt's easiest if we don't support break 2; (Break out of more than one level)\n. Should as in planned to? Or are there examples of a false positive here.\n\nI thought that phan aimed for a low false positive rate, so if foo(X) worked, then foo(X|Y) would also work.\n. Overall, this doesn't affect me much as long as it's clear which one supports which php version - I use a fork of master\n\nI don't really like 7.0.x\n\nend up with patch releases that contain both patches and features (because you cannot update the minor version if you want major and minor to be in sync with the supported PHP versions)\n\nagreed, also about not having a stable release yet. 0.8&0.7(php 7.0) and 0.9(php 7.1) make sense.\nOr we could have 0.x.y be php 7.0, 1.x.y be php 7.1, 2.x.y be 7.2, php 3.x be php 8.0, etc.\nI don't think there's a reason for a 5.6 branch - The dependency php-ast has a minimum version of 7.0 - The branch corresponds to the php version running Phan, which is the maximum phan can analyze. \n\n(About a unified repo) PhpParser has a similar notion - you can parse 7.1 files in 5.5, and I find that functionality very useful in my own work.\n\nThis uses php-ast, which uses php internals, so it doesn't allow parsing newer php versions.\n\nAlso, we might want to start using things like nullables, iterable,  and void in Phan itself, so having multiple branches is useful for that\n. hasMethodWithName is used both in the constructor, and when analyzing new classname().\n\n// in src/Phan/Language/Element/Clazz\n    public function hasMethodWithName(\n        CodeBase $code_base,\n        string $name\n    ) : bool {\n        // All classes have a constructor even if it hasn't\n        // been declared yet\n        if ('__construct' === strtolower($name)) {\n            return true;\n        }\nA different check may have to be used when parent::__construct() or ancestorclass::__construct() is explicitly called.\nWill need to check if ReflectionMethod provides all details on constructor existence.. This should have been fixed by https://github.com/etsy/phan/pull/895. Related to https://github.com/phan/phan/issues/824 . PR https://github.com/etsy/phan/pull/523 will fix this. Are we parsing the type of =2 correctly in the default (should be int, may be empty since it is not a node instance). I was looking at the property code recently.\nIn order to reduce the number of false positives, when Phan sees a param (E.g. $data = 1) with no phpdoc type, it will:\n\nAdd the type mixed, to avoid false positives (E.g. =false may be used for something that is a string by default\nAdd the type of the default. In that case, it's int\nAs a result, $data is of type mixed|string, and haystack is of type mixed|string.\n\nPhan isn't designed to have two separate ways of analyzing the parameter types passed to a constructor. (Constructor isn't really special, init($data) would also contribute to the types of haystack)\n\nSo, we could try some approaches\n\nInstead of adding to the possible types, warn if assignment is not compatible with any of the phpdoc.\n    In addition to that, stop allowing adding new types to a property, if the property had 1 or more types added with phpdoc.\n    This adds a lot of false positives to codebases (E.g. /** @var int */ may also secretly be false, null, which phan currently does add.\nAdd a plugin, which will suggest adding types in places where phan is bad at analysis.\n    (E.g. prompt the user to document the types of things which have default values, but don't have any phpdoc or real types. \"Parameter $data with default 1 will be inferred as type mixed|int. We suggest adding a phpdoc type with all known types, or mixed|int if it isn't immediately obvious\")\n    Suggest running this plugin when setting up phan for the first time, and once every few months.\nAdd option to change phan's runtime behavior, and assume default value is the only possible value, for every default value except null/false.. Also, it might be inferring that mixed can cast to int, meaning the property types are compatible. So, mixed gets added to the types of the property.\nMaybe mixed should be a special case, and not be added to properties with declared phpdoc types?. https://github.com/etsy/phan/pull/525 will fix this. PR https://github.com/etsy/phan/pull/527 will fix this. !is_null is already supported on the master branch. I started working on this on my fork, not yet pushed to  https://github.com/etsy/phan/pull/806. This was fixed on the master branch (added to #806 , which was merged). also, catch (... $e) should unconditionally add Throwable to $e, as a workaround for a specific case of this exception\n\n(As well as to handle the fact that interfaces can be caught). The original issue was fixed months ago. There may be other issues with constants using constants, but those are much less common, and can be filed as new bug reports. Missed that this was a duplicate of https://github.com/etsy/phan/issues/517, pretty much. Possibly related to https://github.com/etsy/phan/issues/537. Other examples (e.g. mixed) can be seen in http://php.net/manual/en/reserved.other-reserved-words.php. The best solution I can think of involves 3 states:\n\nFROM_NODE = 0 (new state, to indicate that this type is directly from a param/return type/new classname declaration, or instanceof conditional, etc.)\n  (E.g. $x instanceof resource would check for the class resource, not the type)\nFROM_TYPE = 1 (previously $is_phpdoc=false - This will be used for types derived from a pre-existing type, e.g. $x = $b gets $b's type)\nFROM_PHPDOC = 2 (previously true). In the 0.8 releases for analyzing PHP 7.0 code, this will also have to handle iterable. Fixed by https://github.com/etsy/phan/pull/725. Seems unrelated to optional parameter, probably a duplicate of https://github.com/etsy/phan/issues/374. Once https://github.com/etsy/phan/pull/620 is merged, one way to work around this would be to completely/partially suppress PhanParamSignatureMismatch, since PhanParamSignatureSignatureRealMismatch would consistently detect more fatal Errors (due to actual incompatibilities) (instead of phpdoc incompatibilities). I just added the symlinks that would be created to the list of directories to exclude.\n\nNote: The best workaround is currently to use exclude_file_regex to exclude all of the files in a symlinked directory, during the parse phase. If you exclude a file from analysis, it would still be parsed, leading to duplicate classes, which Phan is less effective at analyzing.. Misc parts of this that I could split out into separate parts, if requested:\n\nLimiting analysis phase to a subset of files (Just Analysis::analyzeFile)\nVim plugin for that, instead of daemon mode\n\n\nOptimizations of phase between parse and analysis\nphplike output formatter (Or remove that, since it's not much use if the working directory isn't the project root)\nNon-zero exit codes in Phan\\CLI (should exit(1) if Phan quits due to an invalid option).\nSmoother progress bar CLI output. @morria , I was running a script that deleted all of the branches that were merged to my fork's master branch, and didn't notice this.\n\n. This is waiting for the next round of review comments.\nThis change should have limited effects on regular (non-daemon) phan runs.\nNo new changes, fixed merge conflicts with --extended-help.\nI finished cleaning up some unnecessary parts 8 days ago.\nNo further changes (unless bug fixes need to be made) are planned within this PR.\n\nSmall note: When phan supports class_alias, an additional undo step will have to be added\n\nThere's nothing else that makes sense split out of this PR, that hasn't been done already\n\nphan_client could have a mode to run the full phan checks without daemonizing, but that's only useful for very small projects. @morria - are there any more requested changes?. Merged upstream/master to confirm that tests were still passing. There were no merge conflicts.\nEdit: merged yet again due to PRs being merged. Resolved minor conflicts( in code comment), and rewrote condition in an equivalent manner\n\nIf there are no more requested changes on/after april 14th, this will be rebased, tested again, then merged.. Added notes on this extension to the NEWS file.\nAdditionally, mentioned that this would work on Linux/Unix, but not Windows (pcntl_fork() doesn't exist on windows, and there's no quick alternative).\n\nThe client would work, but not the server.\n   One way for Windows users to test this out is to create a tutorial for running the server with docker (or a VM with an exposed port 4846), and installing PHP with a few extensions/PECLs to imitate their environment\n\nAlso, added phan_client to the list of files that would be added to vendor/bin/ when phan is installed.. Rebased, and commented out an unused variable (The usage was a commented out TODO) in Language/Element/Clazz.php. Addressed review comments.\nIf there are no more requested changes on/after April 21, this will be rebased, tested again, then merged.. Correct, it's lost.\nPhan currently doesn't attempt to track the return type, param types, etc. of closures.\nIt's just something with the union type Closure. It would have to start being a template or something to track this. (e.g. if a variable which could be two Closures with different signatures) were invoked.\nTracking this additional information would be an enhancement, and . The code changes required for this issue may overlap with https://github.com/etsy/phan/issues/726. The PhanTypeArraySuspicious you mentioned will be fixed when https://github.com/etsy/phan/issues/517 is fixed\nif ($result !== null)\n{\n    // PhanTypeArraySuspicious Suspicious array access to ?array\n    echo $result[0];    \n}. The remaining issue is to adjust PhanTypeComparisonFromArray, to stop warning about strict equality/inequality comparisons between null and union types containing nullable arrays/nullable generic arrays.. The example that was given no longer emits issues on the master branch (will be 0.9.3), with Phan's default settings. PostOrderAnalysisVisitor->visitUnset is now created, but doesn't do this yet. I forget if we distinguish between dynamic properties (added but not declared) and declared properties. Fixed by https://github.com/phan/phan/pull/2052. https://github.com/etsy/phan/blob/master/README.md\n\nPhan does not have a strong understanding of flow control and does not attempt to track values.\n\nyeah, it doesn't understand that special case. Checking for statements like !isset($var), empty($var) is possible, but unlikely to be high priority for phan's core maintainers.\n\nIf you have an index.php including a file that sets a bunch of global variables and you then try to access those after the include in index.php the static analyzer won't know anything about these.\nIn practical terms this simply means that you should put your entry points and any files setting things in the global scope at the top of your file list.\n\nBut there's probably a bug/enhancement to be added in other places. If $var is a global variable (local variables I'm less sure about (A global variable within as isset conditional), but loops would complicate that), then I'd definitely expect the below variant to work, but even the modified one still emits an issue about $var not being defined\n```\n<?php declare(strict_types=1);\nif (isset($var)) {\n    $var = $var ?? 'meow';\n} else {\n    $var = 'meow';\n}\necho \"$var\\n\";\n```. > yeah, it doesn't understand that special cas\nvisitEmpty has been handled for a while, and Phan understands that the negation of empty($var) implies $var is set in the other branch.. Never mind, it's phpunit.\nThe globalstate plugin will serialize() and unserialize() the static variables before running a test case, unless the static attributes exist in $backupStaticAttributesBlacklist on the test case.\nThe memoize map or some other static property probably had those unserialized and serialized.\nOne possible way to detect similar is to prevent __clone() and __wakeup() from being called on Type and all but one of of the subclasses. This fixes https://github.com/etsy/phan/issues/409 , which seems to have been incorrectly closed (but can be closed again).\n\nThe commit linked earlier was for what seems like an unrelated caching fix. Is the codebase you're using and the phan config you're using public? I can't create a simple, self-contained example (The below snippet doesn't emit any issues when phan is run on it with the strict settings)\n\nWe might be caching the wrong type for string somehow, but that seems unlikely.\n```\n<?php\nfunction takesOptionalArray(?array $x) : array {\n    return $x ?? [];\n}\n/* @return null[] /\nfunction myOtherMethod() {\n    return ['a' => null];\n}\nfunction mymethod() {\n    takesOptionalArray(myOtherMethod());\n}\nfunction bar(?string $foo) {\n}\nbar('');\n```\n. This has the same cause as #567 . @Seldaek - The underlying bug should have been fixed in the 0.9.1 release, by #597 . Related to https://github.com/etsy/phan/issues/609. @mrmark - That's unrelated, and should be a separate issue. Also include the contents of .phan/config.php and the command line options used to run Phan\n\nComments on this issue should be related to Phan's nullable types feature (?T) , for ?array, ?SomeClass, etc.. Closing the original issue because it should have been fixed into 0.9.1, and I haven't heard any feedback to the contrary.\n\nFor the other comment about string[] and array, please open a separate issue and give a reproduceable example (e.g. codebase or self-contained file(s) for the method declaration and caller if that is still a problem on dev-master (will become 0.9.2). E.g. an '@phan-standalone-script' inline string annotation. > Still trying to figure out why, but running the tests with --filter '0271' runs the test on its own and works. But running the full test suite without filter fails on test 0271 (the new class_alias test). Advice appreciated.\nYou need to isolate the names used in a unit test. Phan runs unit tests on a group of files, not on files individually (The state isn't cleared after each test file)\n\nThis is partly done for performance, re-parsing information for all of the internal classes and functions for each file, and invalidating cached state, would be slow.\n\nInstead of A, B, C, I'd suggest using the names A271, B271, C271 for the new test classes (Because 271 is the number for this unit test) (and global functions). (Or something specific to what's being tested, AAliasSource, BAliased, etc.). Additionally, after https://github.com/etsy/phan/pull/563 (Phan Daemon Mode) is merged, this PR will have to be modified.\nClass aliases would have to be removed if they were removed from a file which was removed (Or if the file was edited and a line was removed)\nClass aliases would have to be added if that line was added to a file.\n\nSee https://github.com/etsy/phan/pull/563/files#diff-8337a4d0a543840186ee3e227bebbd96 and https://github.com/etsy/phan/pull/563/files#diff-c751b0fec138a443efefd42213266740 , as well as the uses of this.\n\nAlso, after rebasing, this PR should mention class_alias support in the NEWS file in the top level directory in the notes for the latest 0.9.x-dev code.. This PR had merge conflicts and pending review comments for a while.\nhttps://github.com/etsy/phan/pull/907 (which is based on this PR) fixed the merge conflicts, and most of the remaining review comments.\nThat PR was merged to the master branch. In order to analyze class_alias statements in the global scope, use the master branch (0.9.3-dev) with the following addition to .phan/config.php\nphp\n    // If true, Phan will read `class_alias` calls in the global scope,\n    // then (1) create aliases from the *parsed* files if no class definition was found,\n    // and (2) emit issues in the global scope if the source or target class is invalid.\n    // (If there are multiple possible valid original classes for an aliased class name,\n    //  the one which will be created is unspecified.)\n    // NOTE: THIS IS EXPERIMENTAL, and the implementation may change.\n    'enable_class_alias_support' => true,. We already have this functionality, but there are some bugs.\nSee the git branch mentioned in https://github.com/etsy/phan/issues/599. #424 was merged. Fixed by #703 , open new issues if non-quick mode passes incorrect types to a function. > One thing I'm wondering is whether all of the Analyzer classes should be structured as plugins. \nPhan is still under development, so...\n\nThe issue types that may be triggered by a given analysis step may change (or be unknown at the moment)\n    So disabling some steps might not do what you want. \nSteps have side effects that are relied on (E.g. if something fetches the UnionType for something, it might also be the only thing which would output the fact that there is an undeclared class)\n    dead code analysis (which you mentioned) is one example of that.\nPhan is easier to understand if there isn't the indirection of plugins for built-in features\n\n\nmaybe also the flycheck plugins it looks like you're experimenting with.\n\n--quick takes care of most of the performance issues. There's some other things which provide more speedup, such as by using inotify, as well as precomputing which classes/methods/etc. belong to which file path (as a PECL or external plugin). --disable-plugins (fork-specific for daemon mode) helps a bit, but not that much.. I can find the PR and cherry-pick a small number of those changes and attribute them to @adambaratz if that's picked up again. The discussion will still be there even if it's closed.\nPlanned PRs to the plugin system would be much smaller, fairly different, and aim to be backwards compatible with old plugins, and #689 itself can be closed.. A first draft of the proposal (with more detail than the original issue on how it would be implemented) is at https://gist.github.com/TysonAndre/9b126a4897739469146f66955fde8583 , and duplicated in this comment.\nThis proposed design continues to support return new PluginClassName(). It also aims to ensure that old plugins will continue to work. (But the new plugin \nPlugin V2 Proposal/Specification\nMotivation\nCurrently, there is only one plugin type, which is PluginImplementation,\nwhich is used for every single type of plugin behavior.\nIf you have 5 plugins, then analyzeNode(most frequent operation) will be called 5 times, even on plugins that don't do node analysis. Additionally, preAnalyzeNode is also called 5 times.\n\nThere are a lot of \\ast\\Node objects, so this becomes slow.\nMany plugins only handle a few possible node kinds. A few handle all possible kinds. We can optimize the first case.\n\nImplementation Architecture\nEnsuring Backwards compatibility\nPlugin::API_VERSION will be added in subsequent releases of Phan.\nThese changes will start off with the version 2.0.0 - if defined('Phan\\Plugin::API_VERSION') indicates the constant doesn't exist, it's the old PluginImplementation\n\nNew features (e.g. implementable interfaces) will bump the minor version, etc.\n\nPlugins that wish to permit backwards compatibility should return different classes based on what the current Plugin::API_VERSION is.\nNew Plugin classes and interfaces\n```php\n<?php\nnamespace Phan {\n// We add a new plugin type PluginV2\nabstract class PluginV2 {\n    public function emitIssue(\n        CodeBase $code_base,\n        Context $context,\n        string $issue_type,\n        string $issue_message_fmt,\n        array $issue_message_args = [],\n        int $severity = Issue::SEVERITY_NORMAL,\n        int $remediation_difficulty = Issue::REMEDIATION_B,\n        int $issue_type_id = Issue::TYPE_ID_UNKNOWN\n    ) {\n        // ...\n    }\n// We don't add **any** abstract methods to the base plugin in this proposal.\n// Implement AnalyzeClassCapability, etc. to do that.\n// As a sanity check, the plugin loader may throw if a plugin seems to do nothing.\n\n}\n// For backwardsV2\nabstract class Plugin extends PluginV2 implements\n        \\Phan\\PluginV2\\LegacyPreAnalyzeNodeCapability,\n        \\Phan\\PluginV2\\LegacyAnalyzeNodeCapability,\n        \\Phan\\PluginV2\\AnalyzeClassCapability,\n        \\Phan\\PluginV2\\AnalyzeMethodCapability,\n        \\Phan\\PluginV2\\AnalyzeFunctionCapability {\n// These signatures are unchanged, and are part of the interfaces this proposes\nabstract public function preAnalyzeNode(...);\nabstract public function analyzeNode(...);\nabstract public function analyzeClass(...);\nabstract public function analyzeMethod(...);\nabstract public function analyzeFunction(...);\n\n}\n}  // end of namespace Phan\n```\n```php\n<?php\nnamespace Phan\\PluginV2 {\n// There's no equivalent to \\Phan\\Plugin\\PluginImplementation. Plugins should extend \\Phan\\PluginV2 directly.\ninterface LegacyPreAnalyzeNodeCapability {\n    abstract public function preAnalyzeNode(...);\n}\ninterface LegacyAnalyzeNodeCapability {\n    abstract public function analyzeNode(...);\n}\ninterface AnalyzeClassCapability {\n    abstract public function analyzeClass(...);\n}\ninterface AnalyzeMethodCapability {\n    abstract public function analyzeMethod(...);\n}\ninterface AnalyzeFunctionCapability {\n    abstract public function analyzeFunction(...);\n}\n// This will subclassed for preAnalyzeNode and analyzeNode calls.\nabstract class PluginAwareAnalysisVisitor extends \\Phan\\AST\\AnalysisVisitor {\n    // Implicitly uses parent::__construct(CodeBase $code_base, Context $context)\n/** @return void */\nabstract public function visit(Node $node) {\n    // This is an empty visit() body. Don't override this unless you need to.\n    // If you override it, phan will have to call it on every node type, not just the ones the plugin implements.\n}\n\n/** @return int[] - an array of \\ast\\AST_* constants. */\npublic final function getHandledNodeKinds() {\n    // Create ReflectionClass(static::class), use this to find visit*() methods that are implemented in the subclasses,\n    // create a list of the corresponding \\ast\\AST_* kinds, and return those.\n    // If the plugin overrides visit(), it returns the full list.\n}\n\n}\n////////////////////////////////////////////////////////////////////////////////\n// New capabilities proposed in V2\n////////////////////////////////////////////////////////////////////////////////\ninterface ParseFinishedCapability {\n    // Called after the parse phase has finished.\n    // Useful if a Plugin needs to analyze the codebase exactly once.\n    abstract public function parseFinished() : void;\n}\ninterface FinalizeCapability {\n    // Called after we are done with the other forms of analysis.\n    // Useful if a Plugin needs to aggregate results of analysis.\n    // NOTE: This will be called once per forked process, and each process will have called\n    // node analysis (e.g. preAnalyzeNode and analyzeNode) on different subsets of node types.\n    // If possible, write plugins to emit issues immediately.\n    abstract public function finalize() : void;\n}\ninterface PreAnalyzeNodeCapability {\n    // Returns the name of the class to be instantiated and invoked in the preAnalysis phase.\n    // The class should be created by the plugin visitor, and must extend PluginAwareAnalysisVisitor.\n    abstract public static function getPreAnalyzeNodeVisitorClass(...) : string;\n}\ninterface AnalyzeNodeCapability {\n    // Returns the name of the class to be instantiated and invoked in the preAnalysis phase.\n    // The class should be created by the plugin visitor, and must extend PluginAwareAnalysisVisitor.\n    abstract public static function getAnalyzeNodeVisitorClass(...) : string;\n}\n// This will be called in the analysis phase, only on the files Phan analyzes\ninterface AnalyzeRawFileCapability {\n    /\n     * Analyzes the raw bytes of the file's source code from the file system.\n     * Useful to implement various source code checks that require the raw file source.\n     * Called after Phan parses this file.\n     \n     * This will be called on any readable file, even if the file doesn't contain any php statements.\n     \n     * (Example uses: Discourage PHP close tag at end of file,\n     * check for windows line endings, check if file is valid UTF-8,\n     * check for raw strings in comments, etc.)\n     */\n    abstract public function postAnalyzeSource(string $file_source, string $file_path);\n}\n// May or may not implement this.\n// Useful if you want to use your plugin with daemon mode,\n// and the plugin tracks state for parsed files.\n// Only AnalyzeRawFileFileCapability needs this?\ninterface DaemonAwareUndoCapability {\n    abstract public function undoAnalysisState(string $file_path);\n}\n// May or may not implement this. Use this for plugins such as DollarDollarPlugin,\n// where the inferred union type won't affect analysis at all.\ninterface QuickModeOnlyCapability {\n}\n}  // end of namespace Phan\\Plugin\n```\nChanges to existing classes:\n\\Phan\\Plugin\\ConfigPluginSet will have to change. It may stop extending Plugin.\nIn order to allow plugins, this part will be changed from the below:\nphp\n    /** @var Plugin[]|null - Cached plugin set for this instance. Lazily generated. */\n    private $pluginSet;\nto this:\n```php\n    // Note: If it's faster when there are no plugins for a given type, may replace PluginV2[][] with PluginAggregate[]|null[]\n    // A wrapper will be created to translate LegacyPreAnalyzeNodeCapability to a class implementing PreAnalyzeNodeCapability, etc.\n/** @var PluginV2[]|null - Cached plugin set for this instance. Lazily generated. Used for hasPlugins() and getPlugins() */\nprivate $pluginSet;\n\n/** @var PreAnalyzeNodeCapability[][]|null - Maps \\ast\\Node->kind to the corresponding list of plugins which can preAnalyze that node. */\nprivate $preAnalyzeNodePluginSet;\n/** @var AnalyzeNodeCapability[][]|null - Maps \\ast\\Node->kind to the corresponding list of plugins which can preAnalyze that node. */\nprivate $analyzeNodePluginSet;\n/** @var AnalyzeClassCapability[]|null - list of plugins which can analyzeClass. */\nprivate $analyzeClassPluginSet;\n/** @var AnalyzeMethodCapability[]|null - list of plugins which can analyzeMethod. */\nprivate $analyzeMethodPluginSet;\n/** @var AnalyzeFunctionCapability[]|null - list of plugins which can analyzeFunction. */\nprivate $analyzeFunctionPluginSet;\n// ... and so on, for the new capabilities.\n\n```\nOther optimizations to investigate\nChange from ConfigPluginSet::instance()->preAnalyzeNode to static methods.\n- Replace instance variables of singleton with static variables.\n. > Maybe instead of QuickModeOnlyCapability, create a more generic interface that ConfigPluginSet would use to determine whether to add a plugin to any of its plugin sets:\nThat's not quite what I meant by QuickModeCapability. If that were enabled,\n\nWhen quick_mode => false And the plugin implements QuickModeCapability, the plugin would be run exactly once on the nodes in the function/method/global scope (If it didn't, it may be run multiple times on a function/method, which is correct, but slow)\nWhen quick_mode => true, the plugin would be run exactly once on the nodes in function/method/global scope (whether or not QuickModeCapability was there)\n\n\nwould plugin choreography be simplified if capabilities were abstract classes? That is, if each plugin were restricted to only have one capability.\n\nThere might be a plugin which has to do multiple things, e.g. analyzeNode a node to add return types, and analyzeClass to get information needed for the analyzeNode phase. I want Phan to continue to be able to support that.\n\nOr preAnalyze and analyze in case it has to do complicated control flow analysis.\n\n\nI worry about the potential for abuse of CodeBase. It would be helpful to create a pathway for plugins to hold their own state, and maybe even emitted issues, which other plugins could then ask for.\n\nThey can use instance properties to hold their own state right now. If a plugin is aware of the existence of other plugins, it can call class_exists right now, and call a public getter (or use reflection) to coordinate with other plugins.. I assume you meant something like the below?\ninterface ConfigCapability {\n    // abstract public static function isPluginActive(\\Phan\\Config $config) : bool;\n    abstract public static function isPluginActive(\\Phan\\Config $config, string $capabilityName)\n}\nIf a plugin implemented functionality, it would also have to implement the corresponding methods, so I decided there might as well be interfaces to enforce it at runtime.. Some of this is possible, but there's probably things that have more impact that would be added first (e.g. ast simplification, better control flow analysis, etc.).\nLooping over loops at least twice, and merging the first iteration's and second iteration's possible types for variables, would somewhat help.\n\n\nGoes with Phan's approach to check for at least one possible type matching up, not the full set matching up\n\n\nPhan also has room for improvement analyzing break/continue/throw/return, and the impact those statements have on context (see AST simplification, again)\n. This would be useful to have for #1421 . Some of the time, the code isn't reached, so you don't notice it during testing.\nOn old code, PhanUndeclaredProperty may still be in the suppress_issue_list, due to a large volume of undeclared instance properties (e.g. set in constructor but not declared)\n\n\nConsider the below pseudocode:\n```php\nfunction render_important_widget() {\n   // ... code\n}\nfunction render_unimportant_widget1() {\n  // ... code\n  if (Class::$MISTYPED_STATIC_PROPERTY {\n    // intended to do something, but instead, an uncaught Error is thrown.\n  }\n}\nfunction render_unimportant_widget2() {\n  // ... code\n  if ($instance->mistypedStaticProperty) {\n    // do something\n  }\n}\nappend($output, render_important_widget());\nappend($output, render_unimportant_widget1()));  // proceeds normally\nappend($output, render_unimportant_widget2()));  // \ndisplay_output($output);\n```\n\nFor an undeclared instance property, the unimportant widget is still rendered. Users have a normal experience. The other instances are also rendered (assume the other widget isn't part of that request). A notice is logged to the log file, which may be seen/alerted on later.\nFor an undeclared static property, an uncaught Error is thrown (and has similar logging/alerting, with higher severity). Nothing is rendered. Users see a blank page, or an error page.. This is done on dev-master, and will be in phan 0.9.2. Never mind, this isn't necessary. See https://github.com/etsy/phan/issues/614. Updates:\n\nReturnTypeOverrideCapability of PluginV2 is able to generate a union type of SomeMockedClass if someone writes a plugin for SomeMockingFramework::createMock('SomeMockedClass'). The plugin receives the invoked method and the argument list.\nAs for tracking $params['somefield'], that might make sense to support in the type system itself (E.g. ArrayKeyType<'key', StringType> as a member of union type, rendered in a readable way.)\n\n\nE.g. field types could be inferred by a plugin parsing API filters, and added to the union type of the corresponding method.. Probably not going to do this.\n\n\nWe have array shapes array{key:string} after #1421 gets merged (May introduce new false positives)\n\nSee #338 . This has been in review for a while without any comments.\n\nIf no major problems are identified in this PR, it will be merged on April 14th or later. I don't have any more changes planned for the branch. Remaining TODOs have been clarified (LSP TODO details mentioned in review response).. Now that I think about it, function foo(string $x = null) should have a param type of ?string (as stored in php), not string. I should add a test for that.. > Now that I think about it, function foo(string $x = null) should have a param type of ?string (as stored in php), not string. I should add a test for that.\nI got around to implementing that. string $x = null and ?string $x = null are now equivalent declarations to Phan (like they are in the php interpreter, for purposes of checking compatibility). A small number of existing tests had to be updated, but the final output seemed like it would be clearer.\n\nhttps://github.com/etsy/phan/pull/620/commits/d2e188baf14d3dd37101bc3be5251c14624892c8#diff-a602ad36343f345762ddfe0801a28509\n\nI also fixed a logic error in the RealMismatchCheck (accidental double negation, when allowing nullable param in a method overriding a class with a method with a non-nullable param)\n\nhttps://github.com/etsy/phan/pull/620/commits/d2e188baf14d3dd37101bc3be5251c14624892c8#diff-ebf4842dcd6785a468f76f3ba9a9a5b8. If there's no issues found in reviews of this PR by other reviewers, this will be merged on the 10th. PhanTypeMismatchDimEmpty Assigning to an empty array index of a value of type string, but expected the index to exist and be of type int has been emitted for $str[] = 'hello world' (since 0.10.0), closing this and creating #1269 for the other task\n. Duplicate of #822. Expanded on the demo a bit, to make parseable php with most of the types/signature info. It's still not ready.\n\nhttps://github.com/etsy/phan/compare/master...TysonAndre:fix-627-mkstubs?expand=1. Also, that branch needs to (optionally) check if the method was defined in a parent class, and could skip redundantly outputting it (if that parent class was part of the core libraries, or part of the same extension (group?)). This has been merged in 00e28c93a8b236ee19294fceed2ff0b808ad714d. ## Example B\n\nint|string is ignored, it stays as int. I'm only interested in phpdoc overrides if they narrow the permitted types.\n\nExample C\nPassing in A or its subclass B should be treated as valid by phan. That code would also execute without errors.\nExample D\nProposed behavior would be the same as phan's old behavior\nI don't consider line 29 f3(new B()) to be an issue, it executes without any problems in php. \n\nIts also a bummer than on line 17 Phan is ignoring the phpdoc type without emitting an issue.\n\nWhat the expected behavior?\nThere's a check_docblock_signature_return_type_match - you could add something similar for param types. \n. Related: https://github.com/phan/phan/blob/master/tool/make_ctags_for_phan_project\nThis runs a binary (phptags) on all files in Phan's parsed file list.. https://github.com/etsy/phan/pull/631 should have fixed this issue.. Closing due to lack of feedback. (631 should have fixed this). This should be fixed in dev-master. There's 'exclude_file_list' in the config, if you're able to list files individually.\n\n.phan/config.php is an executable PHP file, so you can programmatically list the Test files\n\nIn src/Phan/CLI.php, you could add your own patch to exclude files by a regex (around line 350, with a similar array filter)\n```\n        // Exclude any files that should be excluded from\n        // parsing and analysis (not read at all)\n        if (count(Config::get()->exclude_file_list) > 0) {\n            $exclude_file_set = []; \n            foreach (Config::get()->exclude_file_list as $file) {\n                $exclude_file_set[$file] = true;\n            }\n        $this->file_list = array_filter($this->file_list,\n            function(string $file) use ($exclude_file_set) : bool {\n                return empty($exclude_file_set[$file]);\n            }\n        );\n    }\n\n```\n. This is something that can be done as a plugin, and already is.\nhttps://github.com/etsy/phan/blob/master/.phan/plugins/UnusedSuppressionPlugin.php\nAdd it to the project's 'plugins' => [ entry in .phan/config.php\nNOTE: This does not work if the number of processes is > 1, due to how non-quick mode works. Magic methods are slightly more complicated than magic properties.\nI think there may be more work on the following:\n\nsuppressing issues in magic methods - Do @suppress annotations work as intended? (E.g. returns an undeclared class)\nAllowing a magic method to be both static/instance (uncommon)\nDeciding what to do if there's a real method of the same name in a subclass or implementing class.\n  (Warn that the annotation is misused?)\n\nBut it's possible to turn this off in the config, so this shouldn't be blocking. InvalidVariableIssetPlugin.php does some of this, but not all of this.. The latest commits to phan master check all three of the examples mentioned in the issue description.. $array[$prop] ?? $default is more complicated than I thought.\nMy best solution idea is to add additional information to nodes in a completely separate phase for a file\n\nThe left hand side of a binary op AST_COALESCE would be marked as not warning about nullable arrays (etc) or undeclared offsets\nThe expressions of isset checks and unset statements would be marked as not warning about nullable\nThe array expressions of dimension checks would be marked as not warning about nullable if the node itself is marked as not warning about nullable. Similar for property accesses\netc (The reverse order of current heuristics)\n\nKnowing when all occurrences are fixed is somewhat complicated by the availab. After fixing https://github.com/phan/phan/issues/1095 , this seems to be unnecessary for USE_NORMAL. Could still emit for constants/functions.. The NEWS file was added in https://github.com/etsy/phan/pull/663. This is ongoing, and doesn't make sense to keep open.. I don't have any objections.\nI don't have a good idea of how to solve the \\@internal debate (File level? Class hierarchy level?) Namespace groups going both ways may be one way, e.g. \\A\\b can access \\A, \\A can access \\A\\b, etc., and the absense of a namespace is a completely different group?. src/multiclosure.php:12 PhanTypeMismatchProperty Assigning callable|callable to property but \\propTest::foo is \\stdClass\n```php\n<?php\nclass propTest {\n    /* @var stdClass /\n    public static $foo;\n}\nfunction testProp() {\n    $a = function() {}; \n    $b = function() {}; \n    $c = rand() > 20 ? $a : $b; \n    propTest::$foo = $c; \n}\n```. The issue description reflects the current state of the code.\nIt was implemented that way before I joined the maintainers; I assume because it was fast to implement and had low false positives. Also, converting these to the following syntaxes might make more sense for readability\n\n__closure_[DescriptionOfScopeOrFile]_[Line]_[Hash]\n__closure<ReturnType, ...ParamTypeDescriptions>. > point of order \u2013 shouldn't the type be Closure rather than callable?\n\nThe type was changed to \\Closure in https://github.com/etsy/phan/pull/979 (for closure literals). Information about the closures continues to be tracked. Closing this since they're now represented more usefully (e.g. Closure(int):void).. @morria - Are there any other things you want in a 0.9.2 release?\nThere were some major fixes that since 0.9.1.\nAlso, there's a few more PRs that would be nice to merge first:\nhttps://github.com/etsy/phan/pull/682 (Fix phan locating definitions of constants/functions relative to namespaces)\nhttps://github.com/etsy/phan/pull/682 (Make exclude_file_regex work on relative paths in project, not just basename) (Inconvenient if it's changed after an official release)\nhttps://github.com/etsy/phan/pull/681 (Also mention usage of exclude_file_regex in .phan/config.php\nhttps://github.com/etsy/phan/pull/677 (Extend support of --color to plugins, for consistency)\nOptional:\nhttps://github.com/etsy/phan/pull/424 (Rewrite AST so that phan is better able to analyze some conditionals, off by default). @morria - all of those were merged. Any updates?\n(Analysis changed a lot so far, and if changes keep accumulating, a large number of issues will need to be fixed (in projects using Phan) at the same time phan's point release is updated). Added the releases and the phars to https://github.com/etsy/phan/releases according to the instructions in https://github.com/etsy/phan/wiki/How-To-Create-a-Phan-Release\ncomposer.phar install --no-dev was used to install the dependencies for the package - The only dev dependency was phpunit, which doesn't seem necessary for the phar. This was fixed in #886. > Am I reading this correctly that we're making ?int[] equivalent to int[]?\nYes, you read this correctly.\nGenericArrayType never accepted a nullable param in the constructor so far.\nCreating a github issue and self-assigning this is one way to make it notable. Rewrote this. It's now possible to create a nullable version of a GenericArrayType, but all uses I can think of are only temporary (E.g. creating nullable version to check if the nullable version exists)\nMaybe something similar to /** @param string[] $x */ function foo($x = null) would end up creating that (That specific case just uses int[], though). Closing in favor of #691 . Fixed by https://github.com/etsy/phan/pull/719. Never mind, this seemed to be spurious. I'm not sure how this would happen.\nAside: phan-forbid-undeclared-magic-properties should also apply to AssignmentVisitor for set ($obj->foo = $bar). This was added in 121d6e72e801417c05c0e8c92f698139b932f1e4. https://github.com/etsy/phan/pull/886 fixes this issue.\nIt seems like Context->getNamespace() was sometimes the empty string for the root namespace.. I still need to add similar issues for ++ and -- operators.\n. > Did you try this method out on the other switch statements in Element.php?\nDidn't seem worth trying, much less of a performance benefit :\nThe other switch statements were around 5 elements long.\nThe other ones were much less frequently called or never called (The one I modified was called for every single visit() call, and only got a 3% speedup).. I'm not able to reproduce it with your example.\nhttps://github.com/etsy/phan/pull/672 (fix for 665) and #665 seem related. Yes, merge this PR instead of mine. That's currently how phan works\nhttps://github.com/etsy/phan/pull/424 (For issue #406) would help towards fixing this, but I don't believe Phan specially handles is_null yet.\n\nThe cause of the inconsistency that the equality operators === null, == null aren't used by phan yet. Implementing things like https://github.com/etsy/phan/issues/517 would help \n\nAnother cause of the inconsistency is probably that maybeNull doesn't have a declared type. The type from is_null($foo) leaks beyond the if statement (added to a possibly empty union type), because Phan doesn't have BlockExistStatusChecker (to know the block unconditionally throws) in master.. Also,\n\n\nupdateContextWithNegation is for the if (!is_null(expr)) or assert(!is_null(expr)) case, not for the code outside an if statement.\n\n\nTo work around the bug you are having, you can add assert(!is_null($foo)) after an if block that would always throw/return. @bpicolo You may also be interested in the simplify_ast setting. It was merged to dev-master in https://github.com/etsy/phan/pull/424, and will be included in the 0.9.2 release.\n\n\nIt slows down the analysis on large codebases noticeably. Not sure how large your codebase is.\n\n\nWith that setting ('simplify_ast' => true) set in your .phan/config.php, checks such as the below \nphp\n$foo = maybeNull();\nif (is_null($foo)) {\n    throw new \\Exception()\n}\n$foo->doSomething() // Fails phan checks (PhanNonClassMethodCall Call to method doSomething on non-class type null)\nWould be rewritten in a form allowing phan to infer that $foo is not null (Effectively sets all of the below statements in the statement list into an else block if it always throws/returns/etc.)\nNotes:\n\nStill haven't supported inferences from the loose/strict equality checks ($x === null) or ($x !== null) yet, but will eventually, so that may break. assert() can be used if that changes.\nThere's room for improvement in the analysis of control flow. Fixed in https://github.com/etsy/phan/pull/1020. In this example, Phan would emit an issue disallowing the casting of ?int to int in the call to f\n\nShouldn't change the behavior of comparing ?int to int change, to allow that? (The types that are inferred should remain the same, but the rules for checking if they are compatible should differ.)\n\nAlso, you'd have similar issues for casting @param ?int $x\n\nAlso, this affects PhanCompatibleSignatureMismatch, but thankfully not RealMismatch. Seems fine. This was fixed in dev-master in ca266eea55c63d2feb274701766a8c60e989356b. This should be possible to do: hook into the return type checks, or hooks for specific functions, in the new plugin capabilities.\nReturn type checks would also make constant('constname') have more accurate types within a project, if anything was found.. Tests have been written and they work, but they depend on tests that aren't in master yet: https://github.com/TysonAndre/phan/pull/38 https://github.com/TysonAndre/phan/pull/39. I may have started properly checking if something was the defining FQSEN before emitting an issue, to prevent this.. Never mind, it's overridden in subclasses. $name = static::canonicalName($name); is one example usage.. > Could spl_object_hash() not be used here instead of runkit_object_id()?\nThis would increase overall memory usage, spl_object_hash would be a 32 byte string and would need reference tracking and garbage collection. An int can be stored inline in the PHP's internal array representation, and doesn't need reference counting\n- Haven't yet checked if that choice would be better or worse than SplObjectHash\n- There would also be multiple copies of those spl_object_hash strings per object. @rlerdorf this exists already as https://github.com/TysonAndre/phan/blob/62f988bd726506a1c1d07714a5b53649682a0fc2/src/runkit.php. >  Sounds like we should add spl_object_id() to PHP then because having a dependency on runkit is terrible, even if it is optional.\nEDIT: Found an identical proposal at https://marc.info/?t=143835274500003&r=1&w=2\nEDIT: should be http://grokbase.com/t/php/php-internals/08chfwdavh/new-function-proposal-spl-object-id#2008121730trg75pyz8mn92dqwemjb14k8 (I assume the object id should be unique even if the pointer to object handler table can differ between object instances)\n\nSo if I XOR it with the same mt_srand() as spl_object_hash would for those bytes (representing object id), it's possibly acceptable?\n\nhttps://bugs.php.net/bug.php?id=52657\nIt's been requested for a while, but they hope to be able to move away from keeping object ids if they need to (The exact object id is currently also available inside a larger string in var_dump. \n\nAnd they want \"globally unique\" instead of \"unique for the lifetime of the object\" (runkit_object_id and spl_object_hash are the latter)\n\nAlso, spl_object_hash returns it xored() with a random number, to make php slightly harder to exploit in some cases I'm not familiar with (runkit_object_id extension could add that if needed))\nIt's not really a surprise pure PHP would be slow, since the wrapper would be called frequently in the proposed use case, and allocates a string, converts numbers to a string, allocates a substring of that string (and calls a function to do that), then converts the string back into numbers.. Fixed merge conflicts. Converted some relative function calls to fully qualified function calls.. > Surprised the runkit version is so much faster than that wrapper. Sounds like we should add spl_object_id() to PHP then because having a dependency on runkit is terrible, even if it is optional.\nThe spl_object_id with the obfuscated address has a POC at https://github.com/TysonAndre/php-src/pull/1 (but it assumes sizeof(zend_long) >= sizeof(intptr_t), and doesn't have an RFC.. https://phpdoc.org/docs/latest/references/phpdoc/tags/internal.html - Your suggestion would go in the exact same place as the description, which would be unintuitive\ne.g. * @internal A reason for that would make it accessible in namespace A, etc.. See the implementation of Phan\\Language\\Element\\Clazz->addProperty() and Phan\\Language\\Element\\Clazz->hydrateOnce()\n(When adding an ancestor class (addAncestor*()), Phan calls addProperty(), which is where a check for a missing type or a less specific type could be added.. FakePluginTest is fixed. Still need to handle the below case (single class name, using sayHello instead of HelloWorld::sayHello)\nphp\n// Alias method with changed visibility\n// sayHello visibility not changed\nclass MyClass2 {\n    use HelloWorld { sayHello as private myPrivateHello; }\n}. Finished handling the case where the visibility is changed. PHP permits making methods more visible and less visible.\nA private method used from a trait is treated as if it is private to that class. (but not visible to subclasses).\n- Make Phan analyze access levels of uses properly by changing the defining FQSEN's class to that class instead of the trait.\nAlso, start checking if methods of traits are visible. Before, PhanAccessMethodPrivate and protected would be skipped if the method was defined in a trait.. Updated code style and code comments, then rebased and squashed.. Thanks!. This could be added to the NEWS for \"New features (CLI/Config)\" section of 0.9.2.\nOtherwise, it's fine.. Could you mention the expected behavior?\nI assume it should still warn without __call\nIt can't analyze the semantics of the inside of __call, so it might make sense to have a different warning when @method is absent. Sorry, I didn't think part of this suggestion through all the way, need to check __callStatic instead for private static methods\n\nIf $method->isStatic(), __callStatic should be checked for instead of __call()\nRight now, the presence of @method won't affect the issue type (will be overridden)\n    Probably fine to work on that later\n    Edit: never mind, it's working\n\nThankfully, php forces __call and callStatic to always be public, so we don't have to work around it.. > The way the @method tag is documented, it suggests it's only for instance methods. \nSee https://github.com/phpDocumentor/phpDocumentor2/issues/822 and  https://github.com/etsy/phan/pull/640#issue-220432423\nThe phpdocumentor code supports that syntax, but it doesn't document that it supports it.. Filed https://github.com/phpDocumentor/phpDocumentor2/pull/1855 to update the documentation and main project.\nIt turns out the implementation in phpdocumentor didn't exist yet (silently ignored the value of isStatic()). I'm not sure why the inferred types for the parameter list are staying around, or if that's what was intended (To guess based on the first usage if there were no actual types).\nThis also happens for work ($x) { ... realWork($x); }\nDeclaring the types in the doc comment as /** @param mixed ...$x */ (or /** @param int|string ...$x */ (plus other known types) in that method's comments should stop those warnings. It's a bug.\nhttps://github.com/etsy/phan/pull/755 should fix it, if you use that (it fixes the analysis of the example you gave). Related to https://github.com/etsy/phan/issues/142\nOther miscellaneous thoughts on how this might be implemented:\n\nIf no phpdoc type is provided, and the base class exists (and isn't a duplicate class), inherit the type\nAllow different default values (of the same type) for properties\nIgnore it if a trait omits type information for a property and is used.\n\nAlso noticed https://github.com/etsy/phan/issues/759. No. There's several ways to work around this already\n\n\nthere's room for phan to improve the analysis of the code after the is_null($y) check (can't be null). See https://github.com/etsy/phan/issues/693 . Try the simplify_ast config setting on dev-master\n\n\nThe functionality you're proposing is already in phpdoc /** @var int $y */ (won't work inline in phan)\n\nPhan also allows the check you proposed in that place via assert(!is_null($y)) or assert(is_int($y))\n\nhttps://github.com/etsy/phan/wiki/Annotating-Your-Source-Code#invalid\n\nIn the case below, we have a valid comment type, but its not on a class, constant, property, method or function, so it will not be read.\n\nPhan uses the php-ast parser, which is much faster than the php-parser parser, but limits where phpdoc comments can be read.\nOther static analyzers (e.g. vimeo/psalm) have support for having doc comments inline, but have different features and different requirements for setting up your project. Done, and created https://github.com/etsy/phan/pull/764. See Phan\\Language\\Element\\Clazz->addProperty() and Phan\\Language\\Element\\Clazz->hydrateOnce()/importAncestor*(). https://github.com/etsy/phan/wiki/Different-Issue-Sets-On-Different-Numbers-of-CPUs#what-to-do-about-it describes this issue and mentions several workarounds\n\nThis limitation of PHP and Phan is a big bummer, and there isn't much I can say to make it better.\n\nAlso, the setting consistent_hashing_file_order (to true) (See src/Phan/Config.php) may help a bit in making the issue sets predictable. This will be available in AST version 45. Just PhanUndeclaredVariable, the same as regular static functions.\nA separate issue exists to warn about overwriting $this. Phan already does this. It only uses the phpdoc types for parameters if there was no real type available, in FunctionTrait::addParamsToScopeOfFunctionOrMethod(). Additionally, an option to unconditionally generate warnings for duplicate classes/functions/interfaces/traits in parsed files (even those which aren't part of the analyzed file list, or ones which aren't directly inherited from) would be nice. (for full analysis).\nThe error messages Phan users get when something extends a class that extends a duplicated class are really hard to debug.. You'll have to work around this, I can't see it being a supported use case, warning about undeclared properties of base classes is useful in the majority of cases.\nPossible solutions:\n\nAdd abstract function __get($name) to base classes, contribute upstream. I don't know if drupal maintainers would agree with that, haven't seen that code.\nUse a stub which matches how you think the base class should be declared. Add the path to the base drupal class to exclude_file_list so it won't be parsed(To avoid duplicate classes). Add a copy of that modified to abstract function __get($name) (e.g. in a new folder .phan/stubs), and add .phan/stubs to your parse_file_list in .phan/config.php\nAdd @suppress PhanUndeclaredProperty to the functions. If it's in the global scope, move the code to closures or helper functions/classes.\n    https://github.com/etsy/phan/wiki/Annotating-Your-Source-Code#suppress\n\nChange the @return Base to @return Wrapper|Dummy. Closing this.\n\n\nThere's no proposed solution mentioned to go with this issue which applies to phan itself, and I can't really think of a solution which applies to Phan itself. One of the workarounds mentioned in my previous comment should work.\n\nThis issue applies to drupal 7, but the most recent drupal release is 8, which doesn't have that?\nDidn't hear any feedback on the workarounds.. Thanks, your change to the wiki is correct. I'm fine with that.\n\nI don't think there are contribution guidelines for the wiki anywhere. The maintainers who work at Etsy may want to set that up.. This is probably possible to add - see src/Phan/Language/Type.php , src/Phan/Language/Type/GenericArrayType.php , and src/Phan/Language/Type/TemplateType.php \nI'm not sure how complicated it is to implement, I don't use this feature as much as other maintainers. It may end up being simple.\nIf it's complicated, this is related to https://github.com/etsy/phan/issues/522\nI also thought about something somewhat related for static methods, in https://github.com/TysonAndre/phan/issues/10 (Didn't work on implementing it). Other things to note:\nAfter this issue was filed, ArrayShapeType was added to Phan's type system (e.g. array{fieldName:T} where T is a template). All of those tasks are completed. I'm not able to reproduce this on dev-master or 0.9.1 using that snippet in its own file. No errors were emitted by phan for the return new static() line.\nWhich version of Phan are you using? If you're using an old version, update it.\nAlso, had to change the example to public static function to make it valid PHP. Should be fixed on dev-master. Related to #1555 \nFQSEN's include MyClass::CONSTNAME, MyClass::method(), MyClass::$static, MyClass->prop (?) Maybe phpdocumentor2's unit tests would be comprehensive.. The specific case that was mentioned should be fixed on dev-master by https://github.com/etsy/phan/pull/744 .\nPlease open new tickets for any remaining edge cases you find in trait analysis.. This will be merged on June 6th if there are no comments from other maintainers. This issue is a consequence of pre-existing issues: https://github.com/etsy/phan/issues/204 and https://github.com/etsy/phan/issues/538. Early (broken) work is included in https://github.com/TysonAndre/phan/pull/113 . This needs to be rebased, and tests are still failing.\nAdditionally, inferences in the global scope may require more work.. Another bug in this PR that I noticed (Related to issues such as https://github.com/etsy/phan/issues/518 , would also be triggered with null, which has additional checks to avoid false positives)\n```\n<?php\nclass A {\n    public function bar() {\n        $this->foo();  // must be in this order to trigger the bug\n        missingFunction();\n    }\n    /* @param $arg /\n    public function foo(bool $arg = false) {\n        // When non-quick analysis is called from bar(), $arg temporarily has the type set to false, and when it recurses, it warns. This is a bug in phan\n        $this->foo(true);  // Phan erroneously emits an issue for this line\n    }\n}\n```. Squashed, fixed merge conflicts and test failures, and rebased. Added TODOs and a few additional tests.\nStill need to improve inferences in some places. This will be merged on June 28th if there are no comments/bugs found from other maintainers. I've been using the recently committed fixes for a while without issues, on my fork.. This will be merged on June 14th if there are no comments. I've been running this on my fork for a while, and the crash is fixed, I haven't seen any problems, or changes in the quality of issue reporting.\nMerging earlier since this contains bug fixes.. This is fixed on dev-master. Rebased against the latest master branch, and added an update to NEWS.\nThis has been on my fork for a while, improved Phan's analysis of traits, and I haven't seen any problems.\nThe old/new test case coverage should cover the pre-existing expected behavior of traits, as well as expected new behaviors.\nThis fix seemed straightforward, merging it earlier.. This is pretty much done.. An in progress branch is in development on my fork in https://github.com/TysonAndre/phan/pull/82\nThe language server protocol mostly works (based on php-language-server), but three things still need to be done:\n\nFork off a process the same way the other (current) daemon mode does, and exit from the Sabre event loop used \nCollect the results and send them to the user. This will be similar to code in ForkPool and for daemon mode in src/Phan/Phan.php and src/Phan/Analysis.php\nFinish the prototyped plugin for vscode (Just for emitting issues/violations) and make it work and be usable, see https://github.com/TysonAndre/vscode-php-phan\n\n(E.g. have options to autostart the daemon for certain folders)\nOnce this is working, porting to other IDEs should be easy.. This was implemented in https://github.com/phan/phan/pull/1178 and https://github.com/phan/phan/pull/1183 .\nThis will evaluate union types for a Node more often, some sort of caching may help.. https://github.com/phpDocumentor/fig-standards/ PR 81 had ideas worth looking into, similar types are supported elsewhere.\narray<key, value>, and array<value> also exist. Being able to declare something as a Generator|iterator<MyClass> for a generator yielding MyClass would be useful (or even Generator<MyClass>, if an order could be standardized)\nCurrently, phan doesn't allow spaces. This may be optionally be relaxed for everything from < to > later (forbid $ within <>). https://github.com/phan/phan/pull/1213 supports this. https://stackoverflow.com/questions/29601411/how-to-properly-type-a-generator-function-in-hack suggests Generator<key, value, yieldValue>, and doesn't support PHP's return value. To be similar to this, and also be consistent with array<value>:\n\nGenerator<value>\nGenerator<key, value>\nGenerator<key, value, yieldValue>\nGenerator<key, value, yieldValue, returnValue> (For getReturnValue of https://secure.php.net/manual/en/generator.getreturn.php). Added a simple section to the end of https://github.com/phan/phan/wiki/Getting-Started. https://hub.docker.com/r/codeclimate/codeclimate-phan/tags/ seems to contain the plugin itself.\n\nSome bugs in Phan's codeclimate were fixed today.\nAfter the next release (0.10.2), file an issue with https://github.com/codeclimate/codeclimate or on the codeclimate developer tools?. The bugs were fixed; the Dockerfile should work if it was updated by codeclimated to Phan's latest release. There are projects which check the general case of API compatibility in other programming languages  (e.g. adding extra required param is backwards incompatible, changing param type of public method, getting rid of a class/method.)\nThat's doable, but you'd have to provide Phan with the source of earlier minor/patch releases. But that's different from what this issue is mentioning. Phan does an analysis pass processing files exactly once, processing files in the order they were listed in directory_list (randomize_file_order and consistent hashing may affect that, and it won't know the types if the process count is > 1\n\nWithin a file, expressions are parsed in order from top of the file to the bottom of the file\n\nPossible workarounds:\n\nglobal_type_map => ['example' => '\\Example'] in .phan/config.php\n\n// Override to hardcode existence and types of (non-builtin) globals in the global scope.\n        // Class names must be prefixed with '\\\\'.\n        // (E.g. ['_FOO' => '\\\\FooClass', 'page' => '\\\\PageClass', 'userId' => 'int'])\n        'globals_type_map' => [],\n2. assert($example instanceof Example) inside the function\n3. if ($example instanceof Example) { original code } else warn/throw inside the function\n4. Make sure that you analyze the files declaring globals before files using the globals, and limit process count to 1. What changes to Phan are you requesting in this issue?. Huh, thought that global variables would be imported, and line 19 would warn. May need to investigate further\n1 <?php\n  2 \n  3 $example = new Example834;\n  4 Oops();\n  5 \n  6 class Example834 {\n  7 \n  8     function hello() {\n  9         echo \"Hello, world!\\n\";\n 10     }\n 11 \n 12 }\n 13 $example->goodbye();\n 14 \n 15 function Oops() {\n 16 \n 17     global $example;\n 18 \n 19     $example->goodbye();\n 20 \n 21     $local_example = new Example834;\n 22     $local_example->goodbye();\n 23 \n 24 }\nsrc/834.php:13 PhanUndeclaredMethod Call to undeclared method \\Example834::goodbye\nsrc/834.php:22 PhanUndeclaredMethod Call to undeclared method \\Example834::goodbye. One solution is to have a phase (or check in analyzeFile) to check that all return types, param types, etc. exist. A wiki page was added to document how users can optimize Phan's setup and configuration manually: https://github.com/etsy/phan/wiki/Speeding-up-Phan-Analysis. Also, composer/composer has an XdebugHandler utility to automatically disable xdebug (It creates a tmp folder with copied ini settings (disabling xdebug), and replaces the running program with an invocation using those ini settings (EDIT: done). XdebugHandler was already implemented, and should be in 0.10.1. Confirmed this is still an issue, details on why it's happening are below\n```\n        // Get the type just to make sure everything\n        // is defined.\n        $expression_type = UnionType::fromNode(\n            $this->context,\n            $this->code_base,\n            $node->children['cond']\n        );  \n    // Look to see if any proofs we do within the condition\n    // can say anything about types within the statement\n    // list.\n    return (new ConditionVisitor(\n        $this->code_base,\n        $this->context\n    ))($node->children['cond']);\n\n```\n400     /**\n401      * Common visitor for binary boolean operations\n402      *\n403      * @param Node $node\n404      * A node to check types on\n405      *\n406      * @return UnionType\n407      * The resulting type(s) of the binary operation\n408      */\n409     private function visitBinaryBool(Node $node) : UnionType\n410     {\n411         $left = UnionType::fromNode(\n412             $this->context,\n413             $this->code_base,\n414             $node->children['left']\n415         );\n416 \n417         $right = UnionType::fromNode(\n418             $this->context,\n419             $this->code_base,\n420             $node->children['right']\n421         );\n422\n(above is in BinaryOperatorFlagVisitor, which is called in UnionType::fromNode())\nOne possible solution would be to ensure that visitConditional will make sure that all variables are defined, all method calls within variables are valid, etc. This may be error-prone.\n. The example you mentioned is fixed by https://github.com/etsy/phan/pull/898 , there are probably still other edge cases.. https://github.com/etsy/phan/pull/872 may also be related. I'm not able to reproduce this exact issue with my config, but seeing other issues.\narray_shift($x) became array_shift(&$x) - and the mixing of global variables with creating references in the local scope may cause problems.\n\nStill need to finish distinguishing between internal functions that do a combination of reading and writing and those that only write\nShould warn if a variable is initially undefined for a function that does a combination of reading and writing ($w_name vs $rw_name)\n\nWill open a different issue. An easy way to do this would be to convert exclude_directory_from_parse into an array, and to allow exclude_file_regex to be either a regex or a list of regexes. This was mostly done - See NotFullyQualifiedUsagePlugin. More focus was put on functions that have optimized opcode equivalents when unambiguous (is_string, etc.),. Mentioned in https://github.com/etsy/phan/issues/848#issuecomment-309630058\nThis should be fixed before the 0.9.3 release to reduce false positives, and to properly warn about passing a previously undefined variable to functions expecting a value to modify (e.g. array_sort but not preg_match). > Is there any way for phan to detect such issues before the users do? \nIt's possible to write a plugin which does similar checks with stricter comparisons, but none exist, to my knowledge. Phan's behavior is to check if any (i.e. at least one) of the types can be cast to the types expected by the function. Your issue requests if each (i.e. every single member of the set) of the types can be set to any member of the set of the allowed types\nFor plugins, see https://github.com/etsy/phan/wiki/Writing-Plugins-for-Phan  and https://github.com/etsy/phan/blob/master/src/Phan/Plugin.php and https://github.com/etsy/phan/blob/master/src/Phan/Analysis/ArgumentType.php#L243 (analyzeParameterList, search the code for what calls it)\n\nPhan is a static analyzer for PHP that prefers to minimize false-positives. Phan attempts to prove incorrectness rather than correctness.\nIn our code, \"@ param string|bool\" has been deemed undesirable.\n\nhttps://github.com/etsy/phan/pull/806 allows you to have phan analyze string|false (would reject the true literal, but accept values of type bool). Sort of. The check for references vs non-references(everything except the TypeMismatch) is redundant.\nThe issue name emitted should be something different, e.g. PhanPluginParamTypeMismatchStrict , so that it can be suppressed independently.\nThere's also return statement checking that's possible.\nIn the end, this might be a part of phan \nAlso,\n\nmost people would probably consider string|null and ?string to be the same\n\nChanging it all at once might cause false positives, but I meant to add an option to treat S|T|null like ?S|?T for phpdoc types. PostOrderAnalysisVisitor->analyzeCallToMethod is the place a plugin would need to be added. Or this functionality might be added behind a config, because Phan already knows return types, param types, etc.\n(Or to have the details of a new plugin type within the Phan\\Language\\Element\\Method itself, but that's unrelated to your use case)\n\nwhat about $x->y()->z( $w ) ?\n\nnew ContextNode(...)->getMethod('z') on the Node for  $x->y() will tell you the possible class types. See PostOrderAnalysisVisitor.. Manually adding the below patch to the commit/release you're using might be easier. (commit id is unrelated)\nIt adds a lot of false positives, and you might want to distinguish failing both with failing the strict check.\n```patch\ndiff --git a/src/Phan/Analysis/ArgumentType.php b/src/Phan/Analysis/ArgumentType.php\nindex 91ed586..0b68297 100644\n--- a/src/Phan/Analysis/ArgumentType.php\n+++ b/src/Phan/Analysis/ArgumentType.php\n@@ -337,8 +337,10 @@ class ArgumentType\n             // See if the argument can be cast to the\n             // parameter\n\n\nif ($argument_type_expanded->canCastToUnionType(\n$alternate_parameter->getUnionType()\nif ($argument_type->isExclusivelyNarrowedFormOrEquivalentTo(\n$alternate_parameter->getUnionType(),\n$context,\n$code_base\n                 )) {\n                     $alternate_found = true;\n                     break;\n```. Also see https://github.com/phan/phan/issues/807 (\"Normalize phpdoc types from T|?T2 to ?T|?T2\")\n\nPhan already does this when merging the results of conditional branches.. I added --strict-type-checking (which can be set using CLI or configs) already, but forgot to close this.\nFor any additional enhancements to strict type checking, please file follow up issues, with examples.\n1885 is related (Strict type checking of an invoked static method's object/class). The script internal/make_phar does this, and is documented on the wiki. I could add \"Create homebrew-php issues\" as part of the release process.\nI don't own a mac, so I'm not really able to verify that there aren't any mac-specific bugs, so I'm not sure if creating the PRs should be part of it.. Added Homebrew to a list of followup tasks in https://github.com/etsy/phan/wiki/How-To-Create-a-Phan-Release. The tarballs are created automatically by github, the phars are created by phan maintainers.\nDo you mean to say download them from github, and add the hashes to the release descriptions?\nAlso, where do you suggest tacking the SHA256 hashes?. E.g. redis takes the approach of https://github.com/antirez/redis-hashes (but phan doesn't have a website)\ndebian suggests https://wiki.debian.org/Creating%20signed%20GitHub%20releases , but I don't have gpg set up (not sure about the maintainers)\n- generated artifact should already be stable?\nOr could try https://gist.github.com/TysonAndre/0c2534d8509cc8a064e6e0ea144aa681. Closing this because there aren't any plans to do this at the moment.. Have you reported a bug with their extension as well? (getType of params and return values?)\nThis seems to happen if an extension returns class names for missing classes? Haven't checked.\nThis might be a catchable Error.. Isn't https://gitlab.com/pmjones/ext-request/tree/master the source?\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(AI(setVersion), 0, 1, IS_NULL, NULL, 0)\n    ZEND_ARG_TYPE_INFO(0, version, IS_STRING, 0)\nZEND_END_ARG_INFO()\nThey're providing IS_NULL, which isn't a valid return type. So getReturnType()->__toString() will fail. It should be IS_VOID in php 7.1 (Maybe? There aren't any examples in php-src), and omitted in php 7.0.. @remicollet @jbboehr - Attempting to fetch ServerResponse::setContentDownload will also hang/crash. (Only checked for the first place that had a problem if reflection return types weren't fetched)\nc\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(AI(setContentDownload), 0, 1, IS_NULL, NULL, 0)\n    ZEND_ARG_TYPE_INFO(0, fh, IS_RESOURCE, 0)  // <-- This won't work in reflection info, and will cause reflection to throw/hang, since `resource` would be treated like a class name in php (additionally, this can't be subclassed)\n    ZEND_ARG_TYPE_INFO(0, name, IS_STRING, 0)\n    ZEND_ARG_TYPE_INFO(0, disposition, IS_STRING, 0)\n    ZEND_ARG_TYPE_INFO(0, params, IS_ARRAY, 0)\nZEND_END_ARG_INFO()\nZEND_ARG_TYPE_INFO(0, fh, IS_RESOURCE, 0) . I don't see any configuration in settings, and I'm not familiar with the extension.\nDoes it wait to connect to a server? I saw a nodejs server mentioned as a step.\nDid any previous grpc versions avoid this issue? Which one are you using?\nDoes ./phan work? Does a short test script work?. Does ./phan -j 2 also crash? I assume it's runnable, just that grpc has problem with forking, so the test fails (and daemon mode would fail if grpc was installed and enabled)\nhttp://man7.org/linux/man-pages/man2/clone.2.html - the fork()ing may be what is causing problems with that extension. https://github.com/etsy/phan/issues/627 will help with that, it's eventually planned to allow analysis of uses of extensions with/without having the extension enabled.. There doesn't seem to be anything left to do on the phan side. This became more important to add due to the false positives that will be introduced by #1421 . My issues were resolved after rebasing against the latest master branch.. Yes, those are bugs. use Phan\\Language\\Type is an unused import, which was going to be removed in another PR.. Post the value of the following in a gist?\nvar_dump(get_defined_constants(true))\n(My best guess is that there's somehow a numeric-like constant key, which causes array_merge to renumber that constant to something that doesn't exist)\nAlso, what phan version?. This InvalidArgumentException should be caught in the next release of Phan.\nYou can build the phar package yourself from the current master branch with the following commands in a git checkout of etsy/phan.\n```\ngit clean\nrecursively delete the directory named vendor/ , may be different on Windows\nrm -rf vendor\nrm -rf tests\ncomposer.phar install --no-dev\nphp -d phar.readonly=0 package.php\n``. Ok, I can reproduce that..echo $argv ? 'args' : 'no args';` has a similar/same issue.\nI assume this has to do with BranchScope or another Scope subclass with a pointer to GlobalScope failing to realize that BranchScope also has access to variables in the global scope.\nAlso saw this issue with if (empty($_REQUEST)) { }. Also, this seems to be ignoring the setting 'ignore_undeclared_variables_in_global_scope' => true if it is set.\nI think we may have started emitting new issues in ConditionVisitor after 0.9.2?\nAlso, PhanUndeclaredVariableDim should be suppressed in the global scope when that setting is on (E.g. $var['x'] = true; may or may not be operating on a variable $var which already exists). The examples given were fixed in #929 . This will be fixed by https://github.com/etsy/phan/pull/977. Fixed by https://github.com/etsy/phan/pull/954 for any type of element( methods, properties, etc.). This can be turned back on via config option.. It's not really related to #811 \nPhan is currently only checking for the presence of a return type, to minimize false positives.\nBlockExitStatusChecker.php was already implemented, and will be useful to check if the method/function body will unconditionally return or throw. There's plans to use it, but it isn't used yet.\nThe most common type of false positive that I want to avoid:\nphp\nfunction Example( int $i ) : int {\n   while(true) {...; return $i; }\n}\nI'd also want to improve analysis of switch case statements as well.\n. This started in https://github.com/etsy/phan/issues/771 (If you're using a stable version such as 0.9.2, you won't be affected)\nThis affects functions which calls themselves. I'm aware of this bug, it's just that adding true and false types made it more obvious. The overall benefits of true/false made it worth merging it first.\n\nWith quick_mode => false, the argument list is overridden temporarily.\n  It annotates the type of $i_bRecursive as false. Then, when the function calls itself, it sees true passed where false is expected\nThe proper solution would be to have a separate immutable array generated from the phpdoc/real types, and use a separate array for analyzing the current function call.\n\nI'd suggest just suppressing the error until 0.9.3 is released/this is fixed (/** @suppress PhanTypeMismatchArgument */ function asString(...)). @jdwx - The example you gave should be fixed in #984 (merged to master), and will be in 0.9.3. Please open a new issue if you see any new related bugs after this \n\nSee https://github.com/etsy/phan/pull/984/files#diff-951fab5032ab10133e1cd70275d1cbca\nThe snippet you gave wasn't a full PHP file (no property declarations, etc.), so I couldn't test that directly. This issue will be solved when https://github.com/etsy/phan/issues/871 is finished.\n\nphp --no-php-ini -l snippet.php (PHP's builtin syntax check and sanity checks) will fail on the snippet you mentioned, so I'd suggest also running that on the same files you're running phan on, if you want better coverage. This is fixed on the current master branch, and will be in 0.9.3.\n https://github.com/etsy/phan/commit/13a715b5f126eeb838c31862f8f829bd2cd4f388 or newer is recommended.. Are you able to post the source code or a link to the project containing modules/field/field.api.php?\nHow is phan being invoked - I assume ./phan, but I assume an assertion would have noticed context was null. (maybe not)\nThe below looks like something's calling debug::printNode, maybe the below (Maybe visitList() was prematurely removed from 0.8.0 for some visitor types)\n131     /**\n132      * Accepts a visitor that differentiates on the kind value\n133      * of the AST node.\n134      *\n135      * NOTE: This was turned into a static method for performance\n136      * because it was called extremely frequently.\n137      */\n138     public static function acceptNodeAndKindVisitor(Node $node, KindVisitor $visitor)\n139     {\n140         $fn_name = self::VISIT_LOOKUP_TABLE[$node->kind] ?? null;\n141         if (\\is_string($fn_name)) {\n142             return $visitor->{$fn_name}($node);\n143         } else {\n144             Debug::printNode($node);\n145             \\assert(false, 'All node kinds must match');\n146         }\n147     }. I see the bug, will need to undo some of the changes from f3bfa45f754e1f7fd6028b00a533921e2c6353e4 (And make visitList() call/be implemented by visitArray(). I tried with php 7.0.15 and php 7.0.20. I wasn't able to reproduce this.\nThe only possible reasons I can think of is that your testing environment isn't really running 0.1.4, or you somehow have an ast_version override in your .phan/config.php (There's no reason to override ast_version for regular users)\nI'd suggest retrying with the latest commit on the 0.8 (dev) branch. See https://github.com/etsy/phan/pull/966. I verified that the unmodified versions of plugins in .phan/plugins continued to work after the latest changes.\ntests/plugin_test also continues to work.\nThings done since this PR was created:\n\nFinished documenting code for this, follow conventions\nKept the layout of classes, and functions\nAdd DemoLegacyPlugin alongside DemoPlugin, as an example of the same plugin in the old and new plugin version\nMark Phan\\Plugin as deprecated in favor of PluginV2\nUpdated NEWS. It shouldn't even be done in visitNew, but was. It should be done in \\Phan\\Language\\Element\\Clazz->analyze()\n\nphp\n    /**\n     * Take a pass over all classes/traits/interfaces\n     * verifying various states.\n     *\n     * @param ?array<string,mixed> $path_filter if non-null, limit analysis to classes in this array\n     * @return void\n     */\n    public static function analyzeClasses(CodeBase $code_base, array $path_filter = null)\n    {\n        $classes = $code_base->getUserDefinedClassMap();\n        if (\\is_array($path_filter)) {\n            // If a list of files is provided, then limit analysis to classes defined in those files.\n            $old_classes = $classes;\n            $classes = [];\n            foreach ($old_classes as $class) {\n                if (isset($path_filter[$class->getContext()->getFile()])) {\n                    $classes[] = $class;\n                }\n            }\n        }\n        foreach ($classes as $class) {\n            try {\n                $class->analyze($code_base);\n            } catch (RecursionDepthException $_) {\n                continue;\n            }\n        }\n    }. > So, the best suited may be ClassInheritanceAnalyzer::analyzeClassInheritance() that has the exact same foreach cycle:\nThat's probably the best place, adding an additional check makes sense. @morria @rlerdorf - This will be released on July 11th if no major bugs or breaking changes are noticed.\nNo crashes have been observed after a quick check on open source projects\nFrom now until July 11th, only bug fixes will be released.\nRecent changes:\n\n\\Closure was added as a first class type (ClosureType). It can cast to callable, but callable can't cast to Closure.\nEnabled phpdoc compatibility checks and narrowing by default. If there are both phpdoc and real types for a function/method, Phan will use phpdoc types if they were a narrower version of the signature types (Depends on other config settings being enabled). Versions 0.9.3 and 0.8.5 were released. Minor bugs were noticed post-release in PhanParamSignatureMismatch and a harmless php notice to stderr on windows.. The example in the issue description was fixed by #1420 . Fixed by https://github.com/etsy/phan/pull/1021. Odd. It may have to do with COMPILER_HALT_OFFSET being found within the code you're analyzing (doubt it). Or due to something different about windows builds.\n\n0.9.3 introduced that warning message to stderr, it shouldn't interfere with analysis, but is still annoying to have a false positive.. @morria - I don't have the necessary permissions to set up new CI runners.\nIf there's no issues, enable it via https://ci.appveyor.com/\nhttps://github.com/etsy/phan/pull/1049 will introduce an appveyor config (excludes non-phpunit tests, so far). No, I don't need anything else at the moment.\nI should be able to speed this up more by using the PECL DLL releases instead of building from source (forgot about those): https://pecl.php.net/package/ast/0.1.5/windows\nhttps://github.com/sebastianbergmann/phpunit/blob/master/appveyor.yml#L57 is related. The ability to reproduce this varies based on the config that is used, and possibly the order in which files are processed.\nSuggested remediations for users until the next Phan release\n\nIgnore PhanParamSignatureMismatch, or suppress it on the affected files. PhanParamSignatureRealMismatch* error types are much more reliable for finding incompatibilities that will become runtime errors.\nEnsure that your phan config contains 'prefer_narrowed_phpdoc_param_type => false,(This is new in phan 0.9.3/0.8.5, and part of why TestInterfaction gets inferred as?stringinstead ofstring|null`)\n\nFixes for the root cause of the problem:\n\nAlways infer testFunction(T $x = null) as ?T when parsing something with a default of null\n\nMake sure that the phpdoc of ancestor classes is fully resolved and inherited before analyzing phpdoc compatibility or inheriting from direct ancestors.\nBe sure to avoid infinite recursion loops analyzing code bases with dependency loops.\n3. Make sure that the phpdoc of the current class is inherited (if necessary), then checked if it is narrowed, then checked for compatibility with ancestors, in that order\n4. (Unrelated) https://github.com/etsy/phan/issues/1014\n\n\nwith src/a.php containing the TestClass, src/b.php containing TestB\n```php\n<?php\nreturn [\n// If true, missing properties will be created when\n// they are first seen. If false, we'll report an\n// error message.\n\"allow_missing_properties\" => false,\n\n// Allow null to be cast as any type and for any\n// type to be cast to null.\n\"null_casts_as_any_type\" => false,\n\n// If enabled, scalars (int, float, bool, string, null)\n// are treated as if they can cast to each other.\n'scalar_implicit_cast' => false,\n\n// If true, seemingly undeclared variables in the global\n// scope will be ignored. This is useful for projects\n// with complicated cross-file globals that you have no\n// hope of fixing.\n'ignore_undeclared_variables_in_global_scope' => false,\n\n// Backwards Compatibility Checking\n'backward_compatibility_checks' => false,\n\n// If enabled, check all methods that override a\n// parent method to make sure its signature is\n// compatible with the parent's. This check\n// can add quite a bit of time to the analysis.\n'analyze_signature_compatibility' => true,\n\n'check_docblock_signature_return_type_match' => true,\n'check_docblock_signature_param_type_match' => true,\n'prefer_narrowed_phpdoc_param_type' => true,\n\n'inherit_phpdoc_types' => false,\n\n// Set to true in order to attempt to detect dead\n// (unreferenced) code. Keep in mind that the\n// results will only be a guess given that classes,\n// properties, constants and methods can be referenced\n// as variables (like `$class->$property` or\n// `$class->$method()`) in ways that we're unable\n// to make sense of.\n'dead_code_detection' => false,\n\n// Run a quick version of checks that takes less\n// time\n\"quick_mode\" => false,\n\n// Enable or disable support for generic templated\n// class types.\n'generic_types_enabled' => true,\n\n'minimum_severity' => 0,\n\n'processes' => 1,\n\n'directory_list' => [\n    'src',\n],\n\n];\n```\n. Fixed by https://github.com/phan/phan/pull/1254 , #1253 was a duplicate. Created https://github.com/mgdm/Mosquitto-PHP/pull/73. https://github.com/etsy/phan/commit/1b67fa54577676fa0c9dd9189669dc11496c84d3#diff-5cbc61cc09cc000669fb94d3b8631ec4R69 is probably related. This may also be related to the introduction of NegatedConditionVisitor (refactoring), and the fact that it checks for undefined variables.\nMaybe this should conditionally skip checking for undeclared variables, apart from the main check.\n(\nphp\nfunction test() {\n  if (($x = myFunction()) && $x['prop']) {\n     return;\n  }\n  // The analysis to determine types here attempts to calculate the negation of the above assertion as a side effect.\n}. This issue was introduced before the 0.9.3 release, and was a side effect of trying to improve undefined variable detection in condition visitors\n\nThis worked well for the inside of functions, but not for the global scope\nNo pre-existing test cases existed.\n\nTry https://github.com/etsy/phan/pull/1039 and see if there's any other types of false positives for isset\n. This was fixed by an earlier PR modifying BlockExitStatusChecker. It's probably due to inheritance checks checking the class/trait/interface that defined a method.\nThe defining class is a trait, but we'd need to act as though it was defined in the class using the trait for this type of check.. Fixed by #1111 (Phan now only tracks the file number and line number of Variable. Variable is now a subclass of UnaddressableTypedElement, which converts Context to FileRef). This may have already been implemented. Fixed by #1409. @morria @rlerdorf - To avoid disruption for third party plugins or for projects using methods from Phan (not sure how many there are, I've only worked on the PhanUnusedVariable plugin), it might make sense to bump the release number from 0.9 (and 0.8, but probably not) to 0.10 at the same time. Thoughts?. Reverting this patch (for 0.8 only) and maintaining that seems possible without that much work after the initial change - Most of the code (except for entry points for analysis, which rarely change) deal with Nodes.. Various other changes to hydration have been done since this issue was filed. I'm not sure if this is still reproducible.\nIf anyone else has a similar problem, file a bug with a link to a codebase or a self-contained example.. https://github.com/etsy/phan/wiki/Annotating-Your-Source-Code#suppress exists to suppress issues on the function/method/class/etc level.. The code Phan uses to convert a relative path to an absolute path may be specific to Mac/Linux. It probably needs to be changed to something similar to https://github.com/symfony/filesystem/blob/master/Filesystem.php#L593\nRunning phan within the directory and omitting --directory may work as a workaround. (just c:\\wamp\\www\\project>.\\vendor\\bin\\phan). Try again with the source branch of https://github.com/etsy/phan/pull/1049/files (add-appveyor-support on my fork), replacing vendor/etsy/phan with a checkout of that branch. A similar issue was fixed.\nIt would help resolving the issue if you posted your .phan/config.php, as well as a self-contained project which reproduced that issue.\n\nIf you haven't created a .phan/config.php or finished setting up parse/analyze directories, you'd have the best results if you created one. \n\nDoes c:\\wamp\\www\\project\\src exist? Are the file and directory paths relative within the projects?. Closing due to inactivity. Lgtm. Appveyor build failure is due to bug mentioned in https://github.com/php/php-src/pull/2688. Related to https://github.com/etsy/phan/issues/407\nEnabling the simplify_ast phan config option may help in that specific case\nIt might be a recent regression, phan started checking deeper within argument lists within conditions, so it see that the 3rd parameter is an expression with undeclared variables ($matches), but the check isn't done with the knowledge it's a reference (output reference). simplify_ast will be enabled by default in the next release. There's still going to be edge cases with || and assignments within function calls, etc., but if (!preg_match($pattern, $string, $matches) {...} else {} should be analyzed properly. Possibly related to the change to defaults of simplify_ast.\nDisabling simplify_ast might fix it, but would make Phan less accurate.. php\nif (!preg_match('/foo/', 'foobar', $matches))\n        throw new Exception('Errr');\nThe above example succeeds (doesn't warn about $matches) in the latest phan master branch, and possibly earlier releases. Suppressing may be easier.\n\nThere's no way for a phan config to tell phan if a trait(or anything else) is used solely inside or outside of the project (library vs application). Maybe @internal, but not that great. If that trait was used outside the library, or with files outside the parse list, phan would be ignoring a potential bug.\n\nPhan currently only analyzes trait methods with the scope of the trait where they were defined, not in inheriting classes\nAlso, not sure if analysis process groups group together classes sharing traits and interfaces yet.\n2. You can declare an abstract static function get_data(), call that abstract function within the trait, and implement that in the class /coexisting traits, and the inheritance checks should tell you that.\n3. For now, you can @suppress the exception and document the reason for it\n4. Aside:  HHVM has an annotations that any class which uses a trait must implement an interface; doesn't help in this specific case, but may help if something similar was supported, for related issues. https://docs.hhvm.com/hack/other-features/trait-and-interface-requirements\n. > Aside: HHVM has an annotations that any class which uses a trait must implement an interface; doesn't help in this specific case, but may help if something similar was supported, for related issues. https://docs.hhvm.com/hack/other-features/trait-and-interface-requirements\nOne possible design: @phan-must-have-static-property T $my_property, along with @phan-must-implement-interface MyInterface? (And check for property existence on any classes (abstract or non-abstract) using that trait)\n\nPhan does that for various trait instance methods, e.g. in https://github.com/phan/phan/blob/0.12.4/src/Phan/Language/Element/FunctionTrait.php#L880-L890\n\n\nYou can declare an abstract static function get_data(), call that abstract function within the trait, and implement that in the class /coexisting traits, and the inheritance checks should tell you that.\n\nA short term solution would be to define an abstract getter public abstract static function getMyProperty(); in the trait, and implement getMyProperty() in the classes using that trait. (EDIT: I forgot that this was already mentioned)\n\nNote that abstract statics would cause a warning/notice in PHP 5, if I remember correctly. (Hopefully not a concern here)\n\nPhan doesn't support property_exists/method_exists/defined(), etc., right now, and I don't have plans for that right now. (Though it is technically doable, e.g. via making any invocations double as a suppression for any undeclared property issues, or via more specific assertions). I don't know what v.1.6.6.1 is supposed to be referring to.\nWhat do you mean by multiple targets? Multiple versions of some third party PHP library?. See #1070 . The change would be made in Issue::maybeEmitInstance()\nSee https://github.com/etsy/phan/blob/0.9.4/src/Phan/Issue.php#L2055 (after the rest of the suppression checks, add a plugin-defined issue check).\nThis doesn't seem to be a common use case of Phan, implementing this a plugin would make sense (e.g. plugin checking for @phan-plugin-suppress-in-group PhanTypeMismatchArgument [v.1.6.6.1] in the doc comment)\n. See the below, as well as analyzemethodcapability and analyefunctioncapability (No hooks for Issue yet)\nhttps://github.com/etsy/phan/blob/master/src/Phan/PluginV2.php\nhttps://github.com/etsy/phan/wiki/Writing-Plugins-for-Phan\nhttps://github.com/etsy/phan/tree/master/src/Phan/PluginV2. And the quick way to hack it in on a fork would be to patch https://github.com/phan/phan/blob/0.9.4/src/Phan/Language/Element/Comment.php#L324-L326 and https://github.com/phan/phan/blob/0.9.4/src/Phan/Language/Element/Comment.php#L613-L615 to check if there is a group, and ignore it if the group isn't included (You could call Config::getValue() to get a new 'group' setting from .phan/config.php (Would need to add to src/Phan/Config.php alongside pre-existing settings).\n. Closing this because it isn't a common use case of Phan.\nsetOutputCollector exists(and getOutputCollector exists), but just isn't configurable yet. Those can be used to filter out certain issues.\nvisitMethod(), visitClass(), etc. are also exposed to plugins, and can potentially be used to modify issue lists (Haven't tried that yet). This has been implemented. BuiltinSuppressionPlugin.php uses the new plugin Capability. I don't have any objections to the move - I think issue history, composer downloads, clones, etc. should still work (as long as another repo isn't created at etsy/phan after the move (HTTP 302 redirect))\nLong term, the name /phan/phan probably makes more sense, and related projects can be kept in the same organization (e.g. forks of plugins, tools wrapping or post-processing phan, etc). Yes, that's me.. I might want to do that when there was a major release, but that would be a while.\nMaybe do this at the same time as the next patch release (0.10.0/0.9.x/0.8.x, AST version 50(0.10 only) + minor changes). This has been added: https://packagist.org/packages/phan/phan\nAlso see #1132 (Prevent packagist from picking up releases for etsy/phan). This is related to Phan not tracking values.\nMaybe add a meta type (ClassString? ClassType?) to phan's type system (e.g. just ::class). Maybe add heuristics to include string literals $x = 'MyClass'; echo $x::a. if MyClass was in the types that were parsed.\n\nWould need to update ConditionVisitor for is_string, is_scalar.\n\n\nOr this could try inlining values if there's only one earlier definition that could be located, but we don't have a way to do that now.. This works now that \\Phan\\Language\\Type\\LiteralStringType exists.. tests/files/expected/0498_lookup_class_var.php.expected and the corresponding src/ file is an example similar to this.. https://github.com/phan/phan/blob/master/src/Phan/Language/Internal/FunctionSignatureMap.php\nIt's a bug in Phan. What PHP version, phan version?\nWhat file is that warning emitted from?\nWhat are the steps to reproduce? The PHP in settings used?. declare(encoding=...)  was probably part of the project being parsed, e.g. vendor.\nThe lack of multibyte support probably affects the strings (e.g. string literals, unicode class names) that ast\\parse_code('<?PHP declare(encoding=...)code...;?>', version) returns.\nMaybe printing a suppressable message to stderr if a lack of multibyte support is detected would help. This still should be fixed, but:\nYou may want to look at https://github.com/phan/phan/wiki/Speeding-up-Phan-Analysis#3-reduce-the-number-of-files-phan-parses.\nE.g. add the following section to your .phan/config.php for the project to exclude tests\n'exclude_file_regex' => '@^vendor/.*/(tests|Tests)/@',. Long term, it's going to be phan/phan, but it's currently inaccurate. It's something that would be convenient to have, but I don't think it exists yet.\nIf you're using linux/unix, https://en.wikipedia.org/wiki/Process_substitution is an option (Shell can create and clean up a temporary file \nOtherwise, --add-parse-file path/to/file1.php --add-parse-file path/to/file2.php or something would probably be how this would be implemented, similar to how phan_client accepts args (maybe with a different flag name)...\nThat's convenient for one parse file, but not many. Could you mention what command you're using, what you expect to happen, and what actually happens (and what project, if applicable).\nPhan should be invoked when the current working directory is the root of the project (i.e.. listing the directory contents contains .phan).\nThat should add the provided files and directories to the list of files to be analyzed . It's distinctive, anyway. graphic design isn't a song suit for me. Might get confused with a bullet point, but I'm fine with it as an org logo\nOther random ideas:\n- a \"fan\" shape(e.g. black spiral with 3 white/grey lines)\n- purple, because it's for PHP\n. Where will this go in the output? (Help messages, version messages, etc)\nCan we change the project image?\nAny thoughts on the color? (E.g. choose by majority vote). Updated the logo on https://github.com/phan to the one proposed in the issue. If needed, it can be changed later.\nNothing else was updated.. @morria - Thoughts?\nI'd think that a reasonable behavior in this case is that phan emits an PhanUndeclaredFunction warning (Both for third party extensions and for functions that aren't enabled for the current php version or php config settings)\ni.e. I'm proposing that phan shouldn't treat internal functions that were removed in the current PHP version, or missing from the list of enabled extensions, any differently from functions that don't exist (e.g. myFunctionWithTypo).\nIt seems to have behaved this way since 4938f870e or possibly earlier\nOne possible solution would be to change from this (in src/Phan/CodeBase.php):\nphp\n 718         // Check to see if this is an internal function that hasn't\n 719         // been loaded yet.\n 720         return $this->hasInternalFunctionWithFQSEN($fqsen);\nTo something like this (not yet tested) :\nphp\n 720         return function_exists((string)$fqsen) && $this->hasInternalFunctionWithFQSEN($fqsen);. Another solution would be to track the version when functions were removed, as well as what extension(s?) provided a given function.. This is related to the fix for https://github.com/phan/phan/issues/74 (We cut down on false positives by not warning about some functions (e.g. for extensions not loaded), but we might want to switch to recommending users add .phan/stubs  to the list of files they parse.)\nAlso see https://github.com/phan/phan/issues/627 (creating helper to dump these stubs). Adding 'ignore_undeclared_functions_with_known_signatures' => false, will help with this category of issue.\nThe new check has been described in the wiki: https://github.com/phan/phan/wiki/Incrementally-Strengthening-Analysis#just-backward-compatibility\nphp\n    // Set this to false to emit PhanUndeclaredFunction issues for internal functions that Phan has signatures for,\n    // but aren't available in the codebase, or the internal functions used to run phan (may lead to false positives if an extension isn't loaded)\n    // If this is true(default), then Phan will not warn.\n    // (Overridden to false for phan self-analysis)\n    'ignore_undeclared_functions_with_known_signatures' => false,. @morria - Thoughts on this change? What about if the current default (Don't warn) is preserved?. Changed this (didn't get any feedback) - ignoring is true by default for this PR. It may be changed to false later.. This has been implemented in the latest releases.. Duplicate of https://github.com/phan/phan/issues/445. Duplicate of https://github.com/phan/phan/issues/609 ?. Closing this as a duplicate of #609 . The original issue (i.e. first comment) reported in #582 had nothing to do with properties, which was why 582 was closed). This is the same issue category as https://github.com/phan/phan/issues/204 (issue discussion also mentions workarounds) - Phan doesn't track type assertions on properties right now, only variables.\nMy current thoughts on how to do this would be to mangle variable+property names and treat them the same way as variables. Obviously, there'll be complications ($a->clearCache() may invalidate the type assertions on $a->propName, and $b = $a will require more work to support).\nIt's doable, psalm implements assertions on properties\n\nThe other approach would be to add it to the union type (or intersection type) of the variable $x or $this (E.g. object{propName: string}). Closing this as a duplicate, the linked issues exist for the general case.\nhttps://github.com/TysonAndre/phan/pull/130 was a (broken, incomplete) first attempt. It needs to be rebased and brought up to date.. This may have been changed when supporting https://secure.php.net/manual/en/migration71.incompatible.php#migration71.incompatible.empty-string-index-operator (Should only assume string[] for $this->str[] =, not for $this->str[$key] =\n\nA special check would probably have to be made for array assignment to include string in addition to types compatible with string[]\n\nAn unrelated issue (Also something that would cause confusion) is https://github.com/phan/phan/issues/406 - Phan isn't checking the type of elements passed in for array accesses at the moment.\nAlso, Phan does not think 'b' is a string[] - $str[0] would be a 'a' (A single character is still a string).. Probably also an issue for local variables ($x = 'abc'; $x[1] = 'x';). Agreed that this is more like https://github.com/phan/phan/pull/243 , and should be doable.\nThere may be false positives in deeply nested expressions, where subexpressions aren't always analyzed right now. (e.g. something like foo() xor ($a instanceof SomeImportedClass && cond()) in a conditional)\n\n\nAdding a plugin type to consistently call visitName(), visitParam(), etc. may help work around that. Related to #645 . https://github.com/TysonAndre/phan/commit/6fa1cb98db4467e37adcb36dc2065473b0c6c5a1 (WIP branch for imports) is a possible solution for this. Might as well do that(and add upgrade/relocation messages to the last 0.9.x and 0.8.x installation scripts for Etsy/phan's repo?). Current plan for tomorrow (September 24th), unless there are comments:\n\n\n[x] Create github releases for 0.9.5 and 0.8.7 and publish to packagist for etsy/phan.\n\n[x] Change name in composer.json to \"phan/phan\" then release a 0.10.0 branch\n[x] Submit phan/phan to composer\n[x] Verify that phan/phan was created in composer.json with a 0.10.0 releases\n\n[x] Create 0.9.6 and 0.8.8 releases (Same as 0.8.7 except for the composer package name and documentation), publish to github, refresh phan/phan on packagist\nMention in the release notes that after this release, the project will move to phan/phan on packagist\n6. [x] Verify that those releases were created on phan/phan\n7. [x] Mark etsy/phan as abandoned, with message \"moved to phan/phan\". The last releases on etsy/phan are 0.9.6 and 0.8.8, there's no 0.10.0 release there.\n8. [x] Update wiki links\n9. [x] Notify repos distributing phan (homebrew-php)\n10.  [ ] and other repos\n11. [ ] Post on gitter room\n      Mention ext-ast dependency is now 0.1.5+ for the 0.10.x branch, will become 0.1.5+ in a future 0.8.x release. @morria created https://packagist.org/packages/phan/phan and added you as a maintainer (same as https://packagist.org/packages/etsy/phan )\n\n\nhttps://packagist.org/packages/etsy/phan still seems to be getting updated automatically. The fact that release tags are automatically created for an abandoned project was unexpected.\nOne workaround would be to create github.com/phan/phan-legacy with the same release tags and edit https://packagist.org/packages/etsy/phan to point to that (And make the README point to github.com/phan/phan). See Phan\\Analysis\\BinaryOperatorFlagVisitor. The example now emits PhanTypeInvalidLeftOperandOfNumericOp. Thanks! Should be fixed.. Created https://gitter.im/phan/Lobby# (The valid URLs seem to have changed, not sure how to create phan/phan)\nWill change links to https://gitter.im/phan/phan?utm_source=share-link&utm_medium=link&utm_campaign=share-link later. https://gitter.im/etsy/phan has had all of the room history migrated to phan/phan and is now an empty room.\n@rlerdorf @mrtazz  - Could one of you delete the etsy/phan room on gitter?. Thanks!. This was done for the 0.10.2 and ported releases. Users will do this eventually.. Probably not going to do this.. Done.\nWe're still using it for a maintainability score in the README (e.g. overly long functions/files), but it doesn't affect build status.. This is now easier because phan can resolve the values of class constants and global constants on dev-master (getNodeForValue). #1247 fixed this (Looked up the value of a constant). Current behavior: PhanUnanalyzable Expression is unanalyzable or feature is unimplemented. Please create an issue at https://github.com/phan/phan/issues/new.\nExpected: Should do nothing if union type is empty or mixed?\nAlso expected: Should have a different warning type if $this->var has an invalid type such as int, array, resource, etc.. This has been fixed while I was working on other issues.\nThe warnings for that were removed in 70465760610597e7aa97e1ed8311b99b0080c14d\nIf it is an exact object which doesn't have that constant (or a literal string that doesn't have that constant), it will warn.\nPhan will emit the following issues for invalid dynamic access of similar forms, depending on the union type\n\nPhanTypeExpectedObjectOrClassName\nPhanUndeclaredConstant\nPhanUndeclaredClass. > This is obviously horrible code, but phan -x has no complaints. Not even for the 2nd return in the function. If we run it through the optimizer like this:\n\nUnreachableCodePlugin can be used to detect this, but plugins aren't advertised well.\nMaybe -x should enable https://github.com/phan/phan/blob/master/.phan/plugins/UnreachableCodePlugin.php and suggest downloading https://github.com/TysonAndre/PhanUnusedVariable / https://github.com/mattriverm/PhanUnusedVariable\n\nThe easiest is to just indicate that the block of code indicated by the script.php:6-17 range contains dead/redundant code.\n\nThat might run into a lot of false positives. The variables are used, and constant expressions may have been written verbosely for code style, or to organize thoughts.\nE.g. the below is redundant code, but not dead code\nphp\n$secondsPerHour = 60 * 60;\n$secondsPerDay = $secondsPerHour * 24;\nreturn $secondsPerDay;\nas well as\nphp\nfunction foo(array $args, bool $enableFoo) { /* implementation */ }\n$enableFoo = false;\nfoo($args, $enableFoo);\nMaybe some special cases, such constructing objects when those objects are determined to have no side effects (e.g. __destruct() for RAII), are worth warning about (or unused array elements)\n. Functions that boil down to a return constant ((receive args, return value unrelated to args) might be a special case. (PhanComplexFunctionReturnsConstant)\n\nThat might be a false positive when running 64-bit phan on code that can also be 32-bit.\nThat might also be a false positive depending on constants (e.g. if (PHP_VERSION_ID > 70103) { return null; } /* ...statements */ could be reduced? (Not sure which constants PHP 7.3 will optimize out)\n. https://gist.github.com/TysonAndre/9690564a8f9f6a98102f35b1e689103e is a prototype checker (standalone CLI script). It works with php 7.3 alphas\n\nThings which could be done to improve on that:\n\nWill using the \"SCCP Values\" section given by the high bit of opcache.opt_debug_level=0x20020000 help when checking for dynamic behavior (can't link them to a line number right now)\nIf opcache dumped a machine readable format such as JSON instead of a text format, that'd make extraction of opcodes more reliable.\nIt should handle the ASSIGN opcode as well. $x = null; return $x; isn't worth warning about.\nCheck if ranges of line numbers get simplified from conditionals, object creation, function calls, etc. into nothing or a simple assignment. This would roughly correspond to blocks of code, e.g. within a loop or if statement.\n\nI'm not how well that that strategy will work.\n\nI expect that things that would pass Phan's --unused-variable-detection but fail SCCP would be fairly rare in practice (Again, checking for blocks of code instead of the whole function may help there). The SCCP plugin from that gist was added to https://github.com/phan/PhanPrototypes as a more permanent location. phan --init will include general use plugins, depending on the init-level setting.. This probably isn't going to get done.. https://github.com/Homebrew/homebrew-php/blob/f1873657ceaf2df4383704a98e2134684b88496a/Abstract/abstract-php.rb\nIt's an indirect dependency of phan, (caused by php7.0) and should be reported in homebrew-php. What happens if you just install php7 (7.0)?. https://github.com/Homebrew/homebrew-php/issues/4493 seems to be related. File an issue in https://github.com/Homebrew/homebrew-php/issues if it isn't.. Followed file formatting, fixed some type signatures, and marked optional parameters at https://github.com/phan/phan/commit/46440e2c1b2986b47baaf68b69a6b3dd65b6c1d7\n. Duplicate of #1159. For integers and floats and strings, php-ast returns the float itself, rather than a node wrapping the scalar.\nThis means there's no line number. Will have to guess from parent AST_STMT_LIST or adjacent nodes.. This was fixed in #1634 .\nThis added PhanNoopStringLiteral, PhanNoopEncapsulatedStringLiteral, PhanNoopNumericLiteral with approximate line numbers.\nIf php-ast gets modified to have an option to return a Node wrapping the literal (where the Node has the line number), Phan will use that instead.. Fixed in bd4aadc12ef4a83ec4534079bcc0fe1a41fe45b6. Not able to reproduce with Phan 0.9.6/0.10.0, if you're using an older version, I suggest updating . Which version of Phan are you using? Could you post a minimal affected project on github (.phan/config.php and a src folder)? A similar issue was fixed in an older release.\nThe exact file I analyzed:\n```\n<?php\nfunction variadic_func($bar, ...$rest) {\n // do stuff\n}\nvariadic_func('hello', 'world');\n``. See  see https://github.com/phpDocumentor/ReflectionDocBlock/blob/14f9edf1ae14d6ce417afb05a9ed37d7b3cc341e/tests/unit/DocBlock/Tags/ParamTest.php#L152-L168 for how the phpdocumentor implementation works. It parses the individual element types as string from @param string ...$varName - the phpdocumentor2 product does the same thing . Mixed or omitted will work.. No, there isn't. Phan currently treatsselfthe same way as the full name of the class declaring that method.staticcan be used as you said. There's also@return $this` in a future phpdoc proposal, which phan can't parse yet.\nhttps://docs.phpdoc.org/references/phpdoc/types.html#keyword\n\n\nClass B extends Class A and does not redefine method C(). As such it is possible to invoke method C() from class B.\n\nIn this situation ambiguity may arise as self could be interpreted as either class A or B. In these cases self MUST be interpreted as being an instance of the Class where the DocBlock containing the self type is written or any of its child classes.\nIn the examples above self MUST always refer to class A or B, since it is defined with method C() in class A.\nIf method C() was to be redefined in class B, including the type definition in the DocBlock, then self would refer to class B or any of its children.. In this case, phan deliberately chooses the strictest interpretation. Phan would miss some real bugs and emit fewer false positives, I don't see a significant benefit to changing the behavior. People may be accurately documenting code that says return new self(); or one of multiple subclasses, and I want their code to keep working the same way.\n\nYou can override the method in a subclass if it returns something different, and call parent::setFoo(), for example.\nIn many other cases, adding abstract/real base class methods will help.. And functions that have no return expressions (and methods with no overrides) as void. And generators. E.g. a plugin type could use this to be invoked only for printf, sprintf, etc.. And right now, call_user_func('global_function', $arg) isn't getting analyzed unless the return value is used, which isn't much use.. I'll aim for a release on the 20th/21st, to work on fixing bugs, improving plugins introduced in 0.10.1, and possibly updating the language server.\n0.9 will be discontinued after this release in favor of 0.10.\n0.8 will use AST version 50 (requires php-ast 0.1.5+ instead of 0.1.4+) in the next release\n. Thanks, this should be fixed in the latest dev-master. @suppress only works on the function/method/closure level, not on individual statements (or property/class). This is a limitation of php-ast, which phan uses (e.g. it has the same information ReflectionFunction would provide)\nSee https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#suppress\nAlternatives:\n\nhttps://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks\ncall_user_func(/** @suppress PhanTypeArraySuspicious */ function() { global $t; $t = generateTest(); $t[\naa'] = 3});. Also, see https://github.com/phan/phan/wiki/Getting-Started#creating-a-config-file if it's the third party library file that is emitting this error.\n\nThird party library code can be excluded from analysis (but still parsed) via the exclude_analysis_directory_list setting.\nand the exclude_file_regex/exclude_file_list can exclude files both from parse/analysis\n. Duplicate of https://github.com/phan/phan/issues/1143 , please search for issues with similar text in the future. Yes, that's a known special case that should be added to phan's permitted union type casts\nClosing as  duplicate of https://github.com/phan/phan/issues/609. Duplicate of https://github.com/phan/phan/issues/1074 , phan currently does not analyze new $className\nAlso see https://github.com/phan/phan/issues/338 , which suggests one solution. https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#var\nhttps://github.com/phan/phan/wiki/Annotating-Your-Source-Code#doc-blocks\n\nFurthermore, Phan can only see doc block comments on\n\nclasses\nconstants\nproperties\nmethods\nfunctions\n\nDoc blocks will not be read from any other elements (such as any kind of statement).\n\nThis is a limitation of php-ast, which phan uses. A future release may have the ability to work around this, based on the work for --use-fallback-parser. Yes, it should. Phan doesn't use the project's autoloader. It parses classes, etc. from the project without executing them.\nYou have to add files to the directory_list (see the wiki/readme), and probably want to exclude directories such as vendor?\nWhat version of Phan are you talking about?. Can you provide a repo with a Phan config, Phan command, and minimal set of files(delete unrelated)\n. Also see https://github.com/phan/phan/issues/1202. Closing this due to lack of response, will reopen if I get a (preferably minimal) repo which can reproduce this.. Duplicate of #1201 , see response for #1201. Phan's working as intended, there are several workarounds.\n\nInstall soap for the php version used to run phan\nUse stubs\n\nSee https://github.com/phan/phan/wiki/How-To-Use-Stubs for a fix for 0.10.0 and lower\nThe 0.10.1 release will also contain    'autoload_internal_extension_signatures and tool/make_stubs, which can be used to load and create stubs for soap (if latter script is run with a php version that includes the 'soap' extension)\nSee .phan/config.php for phan itself\n```\n// You can put paths to internal stubs in this config option.\n    // Phan will continue using its detailed type annotations, but load the constants, classes, functions, and classes (and their Reflection types) from these stub files (doubling as valid php files).\n    // Use a different extension from php to avoid accidentally loading these.\n    // The 'mkstubs' script can be used to generate your own stubs (compatible with php 7.0+ right now)\n    'autoload_internal_extension_signatures' => [\n        'pcntl'   => '.phan/internal_stubs/pcntl.phan_php',\n        'posix'   => '.phan/internal_stubs/posix.phan_php',\n        'sysvmsg' => '.phan/internal_stubs/sysvmsg.phan_php',\n        'sysvsem' => '.phan/internal_stubs/sysvsem.phan_php',\n        'sysvshm' => '.phan/internal_stubs/sysvshm.phan_php',\n    ],\n``. Have you tested with    'enable_class_alias_support' => false,in.phan/config.php`?\n`\n    // If true, Phan will readclass_alias` calls in the global scope,\n    // then (1) create aliases from the parsed files if no class definition was found,\n    // and (2) emit issues in the global scope if the source or target class is invalid.\n    // (If there are multiple possible valid original classes for an aliased class name,\n    //  the one which will be created is unspecified.)\n    // NOTE: THIS IS EXPERIMENTAL, and the implementation may change.\n    'enable_class_alias_support' => false,\n```. The original implementation was shallow, in order to reduce the cost of scanning for class_aliases in the most common case. Adding a (by default, disabled) option to make the search deep may work.. Able to reproduce on 0.10.0 but not on dev-master, should be fixed in 0.10.1. If you have an example that causes a problem in 0.10.1, post that.\n1142 may or may not be related. That would be difficult to implement, Phan\\Analysis\\ConditionVisitor currently only makes assertions on variables.\nStubs are one workaround.\nSee https://github.com/phan/phan/wiki/How-To-Use-Stubs for a fix for 0.10.0 and lower\nThe 0.10.1 release will also contain    'autoload_internal_extension_signatures and tool/make_stubs, which can be used to load and create stubs for xdebug (if latter script is run with a php version that includes the 'xdebug' extension)\nSee .phan/config.php for phan itself \n```php\n// You can put paths to internal stubs in this config option.\n    // Phan will continue using its detailed type annotations, but load the constants, classes, functions, and classes (and their Reflection types) from these stub files (doubling as valid php files).\n    // Use a different extension from php to avoid accidentally loading these.\n    // The 'mkstubs' script can be used to generate your own stubs (compatible with php 7.0+ right now)\n    'autoload_internal_extension_signatures' => [\n        'pcntl'   => '.phan/internal_stubs/pcntl.phan_php',\n        'posix'   => '.phan/internal_stubs/posix.phan_php',\n        'sysvmsg' => '.phan/internal_stubs/sysvmsg.phan_php',\n        'sysvsem' => '.phan/internal_stubs/sysvsem.phan_php',\n        'sysvshm' => '.phan/internal_stubs/sysvshm.phan_php',\n    ],\n```. One approach to actually interpreting function_exists would be to\n\nMake ConditionVisitor check for function_exists('literal_fn_name'), and add a mangled variable (e.g. \"__phan\\x00function\\x00literal_fn_name()\" to the local variable list\nBefore emitting PhanUndeclaredFunction, check if __phan\\x00function\\x00literal_fn_name() is in the local variable list and guaranteed to be defined. This coversif (function_exists('fn') && 'fn'), as well as assert(function_exists('fn'));\n\nI'd probably do property assertions first (e.g. if ($this->prop instanceof X) { $this->prop->foo();}), due to one being more common in practice and due this issue to having various workarounds mentioned above. That's not a feature of Phan right now. Alternately, you could extract the phars beforehand and parse some of the extracted directories?. This was merged manually, the github web UI wasn't updating when the branch was pushed.. Done, see https://github.com/phan/phan/wiki/Frequently-Asked-Questions. Array shapes make this issue redundant. This was done for the unused variable detection plugin.\nPhan is also going to start tracking literal strings and literal ints as union types in the next release.\n. It was a bug in https://github.com/phan/phan/blob/master/src/Phan/Language/Internal/FunctionSignatureMap.php\nThese were initially extracted from documentation pages in bulk, and that documentation had some inaccuracies. You can open PRs against FunctionSignatureMap.php if you notice anything else.. That'd be array_map([static::class, 'zzz'], [1, 2, 3]) from a method within class Test.\nI forget the exact name of the function, it was something similar.. https://github.com/phan/phan/blob/0.10.1/src/Phan/Plugin/Internal/ClosureReturnTypeOverridePlugin.php#L62\nUnionTypeVisitor::functionLikeListFromNodeAndContext() would be that function, it was not part of ContextNode.. For static::class in an array callable, it should be resolved immediately to the class in context.\nFor the callable that is the string 'static::zzz', that would be more complicated, but would still need to be handled (e.g. current class for internal functions, called method's class for user defined methods expecting callable)\n. https://github.com/phan/phan/wiki/Generic-Types is different from https://symfony.com/doc/master/bundles/SensioFrameworkExtraBundle/annotations/view.html\nPossible solutions:\n\nChange https://github.com/phan/phan/blob/master/src/Phan/Language/Element/Comment.php to be case sensitive (only intended use might end up being lowercase)\nAdd PhanInvalidCommentForDeclarationType to suppress_issue_list in .phan/config.\nAdd @suppress PhanInvalidCommentForDeclarationType to the same phpdoc comments where the issue occurs\nAdd 'generic_types_enabled' => false to .phan/config.php. On an unrelated note, I'm planning to add @template for methods and functions eventually. Something along the below lines:\n\nclass C {\n    /**\n     * @template T\n     * @param T[]\n     * @return T\n     */\n     public static function get_first($x) { return reset($x); }\n}\n(And phan should be able to infer the return type from the param types at the call site.)\nSo making @template specifically case sensitive would make sense, to avoid a conflict with symfony. No progress yet. I'm thinking of using the same mechanism as ReturnTypeOverrideCapability (for plugins) to make the return types dependent on plugins, but I haven't worked on it yet.\nThe other example @var callable<T>(array<T>):T can't be parsed, and wouldn't be part of the initial implementation\n/**\n * @var callable<T>(array<T>):T\n */\nprivate $pop;. This PR has been closed. The php72 branch will continue to exist for the near future, but won't be updated (Except for deprecation of those releases)\nThe 0.11.x releases were based on this PR.\nhttps://github.com/phan/phan/pull/1494 will be used as the basis of 0.12.x releases, which will support PHP 7.0, 7.1, and 7.2, which can be configured in .phan/config (target_php_version) or via --target-php-version. Done. php72 continues to be a separate branch for now.. Looks good so far.\nAdd a test for constants with values of true/false - PHP may emit a notice if you use those as array keys in the plugin, which would make Phan shut itself down. There's also assert() https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks\nThrowing if not an instance of the desired/expected type will also work.\nInline assertions and custom assert() functions may be supported in a future release, and already have open issues.. Note: I wasn't the developer who implemented the template feature, and I don't use it extensively\nhttps://github.com/phan/phan/issues/338#issuecomment-362763176 is related, but doesn't solve the issue in question.\nThere's no plugins I'm aware of that do anything similar. Also, EntityRepository's Type would have to be modified to include template types, and methods would have to be modified to become template types (see ReturnTypeOverrideCapability)  (unless you modified the third party PHP file for EntityRepository.php or used a stub for that)\n\n@TysonAndre is it possible to make use of generics in this plugins? for example, insted of just EntityRepository or MyEntityRepository return something like EntityRepository?\n\n\nType->getInternalScope()->addTemplateType(... make a Template type) might help if you're not modifying the third party PHP file.\nThen you'd have to modify the method declarations somehow (see Clazz->addMethod, but modify the existing Method instance instead)\nThen the code could use EntityRepository\n\nIt might be easier to do all of that from PHP as a subclass of EntityRepository, and just have MyEntityRepository->method return parent::method() and add the necessary phpdoc return types.\n\nUnrelated comment on the gist:\n\n `*  Phan's `isSubclassOf` method doesn't really works with interfaces`\n\n\nClazz->getUnionType()->asExpandedTypes() should include both the classes and the interfaces (I forget the exact command)\n. Thanks, this was merged to master in https://github.com/phan/phan/commit/ba72821fc894d17514aa72284843d18cddd66bfd after addressing review comments. Thanks, this should be fixed on dev-master, and will be part of the next release. Fixed by a872fd5d927153d048f3e9d3a080752af243c068. Will need to make AssignmentVisitor keep the \\ast\\Node|string|float|int of the right hand side, in addition to the inferred union type of the right hand side.\nThen, visitDim (I think) should be able to perform this check.. Appveyor build failure was spurious, failed to download composer.phar. Going with the different approach of LiteralStringType. Fixed in https://github.com/phan/phan/commit/d7acb8bfd50155e378dd085769a6b5101a9f875f. Also, warn if not int/string, being specific about int or string if there is no default\n. Related to #1977 . Also, Phan should be changed to reduce false positives of unknown properties : $x->someProp ??\n null is inferred to be of type null, but should be mixed for stdClass $x.. Fixed by https://github.com/phan/phan/commit/7dfc04e62cfe319b25226f7ea16cd7db29aa733c , the places where Phan uses this search for line numbers may be expanded in the future.. This can be done via a plugin - warn if functions such as DateTimeImmutable->add* are called without using the return value, but don't warn no warning for the subclasses (call analyzer)\nAnother planned task is to warn if array_map, strpos, and other functions that don't have output (or modify internal/global state or throw ) are called without using the return value. DateTimeInterface could be included there, but DateTime would not be, for immutables. It's possible to do that through Phan's plugin system. As an example, DemoPlugin is a plugin that warns if you call a function function. https://github.com/phan/phan/tree/master/.phan/plugins#demopluginphp. Also, this may already be possible through PHP_CodeSniffer, I haven't checked. (This issue doesn't involve cross-file analysis or union types). array<int,int|string> is now supported. This is still not yet supported.. Duplicate of #2008 . 27 times slower than \\ast\\parse_code(), comparing to ASTConverter from 0.10.1. The old fallback was 18 times slower than \\ast\\parse_code.\nIf php-ast is available, only 1 or 2 files (The ones currently being edited that \\ast\\parse_code threw a ParseError for) would require the use of the fallback parser.\n\nHowever, if we want to make this convenient for users to install, then all of the files would require this parser.\n   This could be sped up by mapping the sha1/sha256 of the file to a serialization of the file (E.g. serialize() or igbinary_serialize(), if available.)\n   igbinary_unserialize() would be faster and take up much less disk space.\n\nNative performance:       0.000288             \nold fallback performance: 0.005178             \nnew fallback performance: 0.007561\nBenchmark snippet was inserted into src/phan.php for simplicity:\nEDIT: Used 100 iterations, 300 iterations has the same ratios.\n```php\n// Create our CLI interface and load arguments\n$cli = new CLI();\n// Begin benchmark code\nconst BENCHMARK_ITERATIONS = 5;\n$run_benchmark = function() use ($cli) {\n    $fileList = $cli->getFileList();\n    $nativeTimes = [];\n    $oldFallbackTimes = [];\n    $newFallbackTimes = [];\n    $processed = 0;\n    foreach ($fileList as $file) {\n        if ($processed > 100) {\n            break;\n        }\n        $processed++;\n        $ast1 = null;\n        $ast2 = null;\n        $ast3 = null;\n        $contents = file_get_contents($file);\n        $t1 = microtime(true);\n        for ($i = 0; $i < BENCHMARK_ITERATIONS; $i++) {\n            $ast1 = ast\\parse_code($contents, 50);\n        }\n        $t2 = microtime(true);\n        for ($i = 0; $i < BENCHMARK_ITERATIONS; $i++) {\n            $converter = new \\Phan\\AST\\ASTConverter();\n            $converter->setShouldAddPlaceholders(true);  // won't matter\n            $ast2 = $converter->parseCodeAsPHPAST($contents, 50, true, $errors);\n        }\n        $t3 = microtime(true);\n        for ($i = 0; $i < BENCHMARK_ITERATIONS; $i++) {\n            $converter = new \\Phan\\AST\\TolerantASTConverter\\TolerantASTConverter();\n            $converter->setShouldAddPlaceholders(true);  // won't matter\n            $ast3 = $converter->parseCodeAsPHPAST($contents, 50, $errors);\n        }\n        $t4 = microtime(true);\n        $nativeTimes[] = ($t2 - $t1) / BENCHMARK_ITERATIONS;\n        $oldFallbackTimes[] = ($t3 - $t2) / BENCHMARK_ITERATIONS;\n        $newFallbackTimes[] = ($t4 - $t3) / BENCHMARK_ITERATIONS;\n    }\n    $computeAverage = function($elements) { return array_sum($elements) / count($elements); };\n    printf(\"Native performance:       %.6f\\n\", $computeAverage($nativeTimes));\n    printf(\"old fallback performance: %.6f\\n\", $computeAverage($oldFallbackTimes));\n    printf(\"new fallback performance: %.6f\\n\", $computeAverage($newFallbackTimes));\n};\n$run_benchmark();\nexit();\n``. Interesting, it's somehow slower to convert from TolerantASTConverter toast\\Node` than it is to generate TolerantASTConverter's AST. Will need to profile that.\nTime spent parsing vs converting AST format (total):                                           \n1.791 vs                                       \n2.045\n```\n    printf(\"Native performance:       %.6f\\n\", $computeAverage($nativeTimes));\n    printf(\"old fallback performance: %.6f\\n\", $computeAverage($oldFallbackTimes));\n    printf(\"new fallback performance: %.6f\\n\", $computeAverage($newFallbackTimes));\nglobal $__parse_time;\nglobal $__convert_time;\nprintf(\"Time spent parsing vs converting AST format (total):\\n%4.3f vs\\n%4.3f\\n\", $__parse_time, $__convert_time);\n\n```\nphp\n@@ -125,8 +125,16 @@ final class TolerantASTConverter\n             throw new \\InvalidArgumentException(sprintf(\"Unexpected version: want %s, got %d\", \\implode(', ', self::SUPPORTED_AST_VERSIONS), $version));\n         }\n         // Aside: this can be implemented as a stub.\n+        global $__parse_time;\n+        global $__convert_time;\n+        $t1 = microtime(true);\n         $parser_node = self::phpParserParse($file_contents, $errors);\n-        return $this->phpParserToPhpast($parser_node, $version, $file_contents);\n+        $t2 = microtime(true);\n+        $result = $this->phpParserToPhpast($parser_node, $version, $file_contents);\n+        $t3 = microtime(true);\n+        $__parse_time += $t2 - $t1;\n+        $__convert_time += $t3 - $t2;\n+        return $result;. After getting rid of the slow precomputation of line numbers (generators yielding from generators), the new fallback's performance is closer to the old fallback\nNative performance:       0.000296             \nold fallback performance: 0.005132             \nnew fallback performance: 0.005645. This was due to a bug in a helper to look up method implementations. Phan has logic that allows $str::callMethod() and new $str() (implicitly calls __construct(), but shouldn't have allowed $str->callMethod().. Which Phan version are you using?\nCan you post a self-contained file with both the trait and the class that encounters this issue? The example is missing the trait.\nIs the trait in your directory list?. > Which Phan version are you using?\nWhat is the output of docker-compose exec phan phan --version? Is phan an image you locally built?. Unable to reproduce with that snippet in 0.10.2, trait alias support was added in an earlier version.. Also, the 0.9.x releases using an older php-ast version were discontinued, upgrading to 0.10.2 (and upgrading php-ast to 0.1.5+) is recommended for php 7.1. Changing the annotation to @return ?string would work around that, but ?string isn't officially part of phpdoc.\nhttps://github.com/phan/phan/issues/609 is related. . It is, I forgot about this linked issue. This is a duplicate of https://github.com/phan/phan/issues/204 . Phan doesn't track types of properties of variables (even $this) at the moment, just types of variables. Does this happen when you edit a specific file? Specific project? Can you create a minimal project that will reproduce this?\nI'm not sure how to recover if Content-Length isn't being received, and not sure why Content-Length isn't included in the headers.\nhttps://github.com/tysonandre/vscode-php-phan#contributing includes instructions to set up the extension locally - <F5> can be pressed to start up the extension, which should emit all of the debugging output along with the below settings\n// Enable this to print messages to the debug console when developing or debugging this VS Code extension. (Modifying requires restart)\n  \"phan.enableDebugLog\": true,. Closing due to inability to reproduce. I don't think it has anything to do with invalid utf-8 (Can't reproduce with a simple example, at least).\n\nThe library used for language server checks was upgraded\nVS code would have updates.\n\nContent-Length might fail to be parsed if something was sending extra data over the console, but that seems unlikely (This is Phan parsing data coming from the IDE to Phan, not the other way around)\n. What OS are you using? What output of php-config?\nOther ideas:\n\nIt could be due to Phan using pcntl_fork() and having input streams\nHaving the full output of Phan\\LanguageServer\\ProtocolStreamReader would be useful. I could add a flag for that\nintellisense is using an older version of the Node.js language-server library. I doubt that's it, though\n\nAdd vscode-php-phan equivalent of https://github.com/felixfbecker/vscode-php-intellisense/commit/ddddf2a178e4e9bf3d52efb07cd05820ce109f43. Things I could try:\n\n\nI could try to add a CLI flag (and VSCode setting) to disable the didChange handler and keep the save handler\n\nUse TCP instead of stdin\nMore efficient parsing of input messages, make Phan deduplicate change notifications on the same file URI. vscode-php-phan v0.0.9 is released. It uses TCP instead of stdin, which may help if the issue is related to stdio blocking on large files.\n\nAdding \"phan.analyzeOnlyOnSave\": true, to your VSCode config may also help. It prevents Phan from reanalyzing the file in question during continuous typing, and only during saving.\n\n3. More efficient parsing of input messages, make Phan deduplicate change notifications on the same file URI\n\nStill working on the third thing.\n. All three of the mentioned changes have been completed and released.\nAnother option is to skip \"\\r\\n\" lines when there's no Content-Type index, and publish an error message about Content-Type in the language client (e.g. vscode)\n@adduc @hworld  - Is the issue still happening with 0.2.0? There were changes to use TCP by default, as well as to prevent unfulfilled requests from piling up.. Not able to reproduce. Also, this isn't truly async right now - The language server would ideally parse all pending requests, and if there are multiple requests for the same file, only execute the last one. However, it's assuming that the language client will delay update notifications to something shorter than the time needed to analyze. So far, it's good enough for many use cases, but not if there are large numbers of files to read\nhttps://github.com/phan/phan/wiki/Speeding-up-Phan-Analysis would somewhat mitigate slowness, if you were specific about excluding test/documentation folders and only listing specific source folders that are direct dependencies (vendor/x/y/src, etc.).\n--language-server-ignore-file-edit would have to be created in this repo, and passed in if a corresponding config setting was set by https://github.com/TysonAndre/vscode-php-phan. It might just be a matter of not advertising the file update capability (whatever it was called). There might be a way to completely disable sending those from the language server client.. This is fixed in vscode-php-phan v0.0.9. Ensure that the extension is upgraded, and add \"phan.analyzeOnlyOnSave\": true, in your VSCode config.. This is a duplicate of https://github.com/phan/phan/issues/407. Duplicate of #1652 . Similarly, Phan will emit PhanTypeMismatchArgument for using string or array as callable.\nAllowing object to be used as callable in the general case would result in a lot of uncaught bugs.\nOne idea: add nonstandard callable<string>, callable<object>, callable<MyCallableBaseClass> types.\nAnother idea: intersection types in general, which would be more complex and difficult to implement\nA third idea would be to extend template syntax to have a way of indicating a method accepts a class name and returns something a type based on the corresponding class instance.\nCurrent workarounds would be to check if(is_callable(...))) or to assert that.\n. > I've tried to work around this for several times in the last couple of days, but it just seems too hard, or even straight impossible - or I'm not skilled enough to find my way around in the codebase.\nI'd agree that it'd be difficult to implement, and would require changes in many place.\nI'm considering support for @param callable-object (and callable-string and callable-array).\n\nThis would require changing the type regex for Type and UnionType\n\nIntersection types might be easier to implement if they're limited to named objects and interfaces (or 0 objects and combinations of interfaces)\n\nI won't know until they're implemented.\nAnd I still might want to support callable-object&MyInterfaceOrClass. . You can use /** @param ?string $unitPrice in phpdoc, despite not being able to have it as a real type. Not sure if phpstorm complains about that..\n\nThis is a duplicate of various issues such as https://github.com/phan/phan/issues/609. Try again with the most recent dev-master in composer.json, this should be fixed by #1339 . It will be in the next release.. Hi!\nThe version of phan on codeclimate is very out of date and has many known causes, see https://github.com/phan/phan/issues/826\nI worked on various fixes for the codeclimate plugin in the current master branch, which should be out in the next release. (Although the current master branch at this date should be fine)\n\nI'd suggest creating a new plugin docker image with the current master branch and seeing if the issue persists on the same repo.\nI haven't had time to figure out how to request a new plugin image be created, or what preliminary steps were needed\n\nAside: https://github.com/phan/phan/issues/320 might be the cause of getClassConst. Closing this due to inactivity and lack of updates.\nI'd prefer that the docker image be updated, but I haven't gotten any feedback on this.. Thanks, hadn't seen those before.\nThe harder part would probably be supporting that in the union type (easier part would be parsing).\n@param array{require:bool,label:string} $options would probably be easier to introduce, because recursion is still going to be an issue\nE.g. I don't see how something like array[] $arrayOfOptions would work, or to have those in template types MyClass<array{require:bool,label:string}>, and I only see an example for @param so far (Property? Return?). It is.\nOther notes:\n\nAn intermediate step would be to implement parsing of the types, but convert the arrays to a generic array of string[]|bool[].\n\nAfter parsing is working, then actually work on making phan support the new \"option arrays\" types, and validate that literals use that.\n- @param array{} $options for an empty array is something I plan to support. (Psalm treats that as invalid, and internally represents empty arrays via a different type)\n- It is useful to be able to indicate that fields are optional via the type system (e.g. validating arguments). Would want @param array{requiredField: bool, optionalStringField?:string, optionalNullableStringField?:?string} $options.\n. This ticket will be reopened if https://github.com/php-fig/fig-standards/blob/f763070c718aeb0e1a3c953ad99682ea2e994c5d/proposed/phpdoc.md#713-param is part of the final approved standard.\nIt's inconvenient and doesn't have a reference implementation right now, if there are nested levels or if it's used with @method, @property, etc.\n\nAnd it currently doesn't seem to be widely used. Okay, this is a bit more complicated than I thought.\n\nOne solution would be to add empty/undefined as an additional possible type in a union type. Those are non-standard phpdoc.\n\nThis was going to be done eventually, for other reasons (E.g. it allows us to know if a variable is possibly undefined)\n\nWhat Phan currently does:\n\n\nPostOrderAnalysisVisitor->analyzeCallToMethod will, If pass-by-reference, make sure the variable exists, or create it if it doesn't exist. This results in a variable with an empty union type. Right now, this is a problem, because it can't be distinguished from a variable that exists but has no known types (not even mixed)\nThe proposed change would be to change that union type to empty\n2. Then, ArgumentType->analyzeParameter sees the variable with a union type of size 0, which it can't distinguish from an unknown type.. Another solution would be to stop adding the variable in PostOrderAnalysisVisitor, and instead try to create it in analyzeParameter.\n\n\nThis would require tracking if the parent node is a call, and if so, which call it was. (Phan checks for undefined variables in multiple places). Or it could be set to a union type with type null instead of an union type with no types?.. https://github.com/phan/phan/issues/1344#issuecomment-352962751 still needs to be addressed. This is technically possible via AnnotatedUnionType but not implemented yet, it shows up as T=\nI would need to change ContextMergeVisitor to generate these, and detect the undefined flag in variable/expression usages to warn.\nEDIT: Note that undefined will become null when assigned to a variable/dimension/property/etc.. Some care will need to be taken in AssignmentVisitor (e.g. $x = $possiblyMissingField['field']) and various other places when implementing this.. You can file a PR against that vendor's library (Unless it supports PHP versions predating the Closure class)\nTo fix your issue, use stubs to work around it being in the vendor library. See https://github.com/phan/phan/wiki/How-To-Use-Stubs#stubs\n\nCreating stubs that Phan has access to is pretty straightforward.\n\nCreate a directory .phan/stubs (like Phan's).\nPut code in there that stubs the constants/classes/properties/methods/functions of interest. (In your case, the stubs would be a copy of the code, but replacing callable with Closure)\nReference the .phan/stubs directory from within .phan/config.php under directory_list (like Phan's).\n\nIf you are using the stubs as a replacement for all/part of a third party library in directory_list, also add the replaced file(s) to exclude_file_list or exclude_file_regex.. Due to the fact that Phan doesn't have intersection types (E.g. callable&string or callable<string>), callable|string is currently the only way to indicate something is a callable string, if it's used in both ways.\n\n\nAlso see #1336 for discussion about ways of indicating that a callable is simultaneously something else.. Workarounds were suggested in https://github.com/phan/phan/issues/1346#issuecomment-354569249 , callable-string was added in the latest phan releases.\n. It'd help if you could narrow this down to a smaller self-contained test file or subset of files, leaving out methods, properties, lines of code, etc. that don't contribute to the bug.\n\nIt may be related to Phan expanding the class to the list of subclasses, then giving up early on finding alternate types of expr->setOperator, I'd have to check to know for sure.. It's working as intended. For performance reasons, Phan doesn't recurse into methods that have declared return types.\nhttps://github.com/AntoineTB/phan-debug/blob/master/Operation.php#L45-L53\nIf Google's code said @return static or @return $this ($this is non-standard), then Phan wouldn't warn about it. You didn't provide the signature of setOperator in the initial example, and I didn't have time to look it up.\n\nSee https://github.com/phan/phan/issues/1163#issuecomment-334807886 (and history) for the justification given for a similar issue.\nEven if the base class was guaranteed to return $this;, subclasses aren't guaranteed to return $this.\n\nThere's two ways to solve this:\n\nStubs and excluding the problematic files(See wiki article on stubs)\n\nFile a PR against Google's ad SDK changing the signatures to @return static. It seems unlikely that they're accepting those based on the README of https://github.com/google/google-api-php-client\n\nThis client library is supported but in maintenance mode only. We are fixing necessary bugs and adding essential features to ensure this library continues to meet your needs for accessing Google APIs. Non-critical issues will be closed. Any issue may be reopened if it is causing ongoing problems.\n\n\n\n. There's two other workarounds:\n\nImplement setOperator in the subclass, and annotate it as @return static, and return parent::setOperator(...);, ignoring emitted Phan issues for that method.\n\nAdd @method $this setOperator(...fill in args...) to the class declaration (Unfortunately, @method static foo would mean foo being a static method, i.e. implemented by __callStatic)\nPhan may warn about the example I gave not being a proper use of @method in the future, or ignore that signature in the future.. Phan won't emit PhanParamTooFew because it's optional.\n\n\nThe most likely cause is that you didn't provide enough annotations for Phan to know the type of $elasticRepository. assert($x instanceof ThatClass) above the statement in question would help with that.\nAlso, what Phan version are you using? Update to the latest release if you haven't.\nIf you can provide a standalone file and Phan config that can reproduce this, I'll reopen this; this issue doesn't tell me how to reproduce.\n. In your initial comment, you said @param array $filter. In your reproducing code, you said    * @param       $filter.\nAs a deliberate design choice, Phan does not infer types from parameter defaults.\nBecause you didn't provide a PHPdoc or real type signature for $filter, It's expected that it doesn't warn.\nRead https://secure.php.net/manual/en/functions.arguments.php#functions.arguments.default . In PHP, it's perfectly fine to leave out parameters where the signature has default values for those parameters. \n. Possibly related to this use case: guess_unknown_parameter_type_using_default was added to Phan. It can be set to true and will affect analysis if no real or phpdoc types are provided.\n// Set this to true to make Phan guess that undocumented parameter types\n        // (for optional parameters) have the same type as default values\n        // (Instead of combining that type with `mixed`).\n        // E.g. `function($x = 'val')` would make Phan infer that $x had a type of `string`, not `string|mixed`.\n        // Phan will not assume it knows specific types if the default value is false or null.\n        'guess_unknown_parameter_type_using_default' => false,. Thanks! . It doesn't, by design. Constant/Function/Class definitions have to be made available to Phan via either the runtime environment or stubs. You need to do either of the following:\n\nInstall and enable the intl extension when running Phan\nGenerate Internal Stubs for intl, and add those to your .phan/config.php: See https://github.com/phan/phan/wiki/How-To-Use-Stubs#internal-stubs\n\nAlso see https://github.com/phan/phan/wiki/Frequently-Asked-Questions#phan-says-that-an-internal-class-constant-or-function-eg-xdebug_is_enabled-soap-memcached-etc-is-undefined. That should be doable.\nI filed https://github.com/felixfbecker/php-advanced-json-rpc issue 12 back in October to be able to update that transitive dependency, and I see it's been released for a while.. PhanTypeMismatchDeclaredReturn and PhanTypeMismatchDeclaredParam were already implemented. This is found in tests/tool_test. Merged part of this as https://github.com/phan/phan/commit/fbf91725715bb1634ea0da9da3f9ccb8b54cb5bb\nIt'd be inconsistent to add error return values for too many/too few arguments to getClosure(), but not have it generic enough to cover other functions.\nAnd if PhanParamTooManyInternal is being suppressed in a project, there are probably other problems to solve.. I closed this before noticing the new commits. I'm having issues reopening due to the force push to your master branch.. Thanks!. In the latest releases, it fails when count is ?array.\nBoth array and Countable can be passed in to count.\nDue to Phan's history of allowing possibly valid casts, union types of array|int or array|null are allowed for the same union type checking rule.\nThere are GitHub issues to add new issue types when a cast is possibly invalid.. key() and array_search() were improved already. Will wait for array shapes to be implemented before doing more work on each(). An even simpler example (Not related to a dependency loop)\n```php\n<?php\nclass A{\n    public static $prop = [\n        'key' => B::KEY,  // does not warn\n    ];\n    public $prop2 = [\n        B::KEY2 => 'value',  // does warn, incorrectly\n    ];\n}\nclass B{\n    const KEY = 'key';\n    const KEY2 = 'key';\n}\n```. Similar problems:\nreturn my_fn(); will become an issue if the return type of my_fn() changes.\nreturn OtherClass::CLASS_CONST will become an issue if class constant declaration changes.\nI would suggest designing something like that differently:\n\nEmit all issues in a parseable format (e.g. json) for the old code. For comparison purposes, normalize at filename.php:123 to at filename.php:%d when comparing issues. (e.g. \\.php:\\d+\\b in regex). However, keep the original line number where the issue was emitted. Save those to a file. \nDo step 1 again for the new code, saving the issues to a new file.\n\nFor each file common to the old issues and new issues, do a git diff [-w]. Use the output of the git diff to figure out what the closest equivalent line is, and convert the line numbers of the old issues to the equivalent line numbers in the new issue.\nHopefully, there's already libraries or utilities to do this for you. But I don't remember if any exist.\n4. Emit new issues that aren't in the set of (renumbered+normalized) old issues. When emitting them, use the unnormalized issue text.\n. Also, you could pass in --quick to prevent phan from recursively analyzing functions/methods with the types of arguments Phan inferred for other calls.\n\n\nWhile quick analysis catches fewer bugs, it will be easier to figure out what part of the change caused the error (X called Y with Z, instead of X called T with Z which called A with Z). longest common subsequence problem would be helpful here, where the elements are the source lines without whitespace\n\n\nhttps://en.m.wikipedia.org/wiki/Longest_common_subsequence_problem\nEDIT: hit comment too early. This was closed by https://github.com/phan/phan/commit/14d8e2583ae4ddc8fe5a8edf780ae27ae5b774b9 (description has wrong issue number).\nAlso see #1397 for the root cause of the bug. I think the php72 branch probably already has code supporting the return type check, but that code should be in all active releases, including 0.8. Fixed by #1927. A short term fix is to add $response = null; above the try/catch. (Or loops, etc.)\n1409 makes Phan analyze catch statements as if the values defined in the try could have been defined. (May be null). This reduces false positives but may fail to report some bugs.\nThere's two separate issues:\n\nPhan deliberately emits PhanUndeclaredVariable when it appears to be guaranteed that the variable is undefined, even in ternary. (Not that great with loops)\nThe way Phan merged inferences on try/catch/finally was less than ideal. (It should act as though it is possible for most of the try block to succeed when analyzing the catch block(s).\n\nAny issues with null coalescing operators would probably be addressed by https://github.com/phan/phan/issues/1345\n(Phan would have a way to distinguish between variables being possibly undefined and guaranteed to be undefined in strict_mode=1, and stop warning (e.g. for ??) when the variable is possibly defined)\nAside (unrelated): Phan is deliberately stricter about variables being possibly undefined in if, try, etc. when declare(strict_mode=1); is used. Again, $response = null; above would work around that.. This is a bit more complicated than I thought, due to some issues being emitted in the \"parse\" phase, some in the \"method\" phase (e.g. analyzing overrides), and the rest in the final \"analyze\" phase (etc.)\nCurrent thoughts:\n\nOr a Context (\\Phan\\Language\\Context) could be changed to have a getInnerContext() method\n  (And Issue::maybeEmit() would use the suppression list from the element corresponding to getInnerContext())\nInstead of being able to get an FQSEN from a given context, get the FunctionLike?\n  (May or may not work with daemon mode, not sure)\n\nAlternate approach to being better at finding the function/method/property corresponding to a Context (Would probably be better)\n\nInstead of having TypedElement->suppress_issue_list : array<string,int>, (Maps issue name to number of occurences), have a new IssueSuppressionTracker class.\n   Unlike arrays, instances of IssueSuppressionTracker could be shared between Context and Element(e.g. Method) with clear semantics, and the use of Issue::maybeEmit() could be simplified.\n\nWith IssueSuppressionTracker, the function->hasSuppressIssue could be removed from the below part of ParameterTypesAnalyzer, and possibly other places.\nif ($o_method->isPHPInternal()) {\n                if (!$method->hasSuppressIssue(Issue::ParamSignatureMismatchInternal)) {\n                    Issue::maybeEmit(\n                        $code_base,\n                        $method->getContext(),\n                        Issue::ParamSignatureMismatchInternal,\n                        $method->getFileRef()->getLineNumberStart(),\n                        $method,\n                        $o_method\n                    );\n                }\n            } else {\n                if (!$method->hasSuppressIssue(Issue::ParamSignatureMismatch)) {\n                    Issue::maybeEmit(\n                        $code_base,\n                        $method->getContext(),\n                        Issue::ParamSignatureMismatch,\n                        $method->getFileRef()->getLineNumberStart(),\n                        $method,\n                        $o_method,\n                        $o_method->getFileRef()->getFile(),\n                        $o_method->getFileRef()->getLineNumberStart()\n                    );\n                }\n            }\n. The $method->hasSuppressIssue() check was added in the above snippet to work around the bug you mentioned where you couldn't suppress PhanParamSignatureMismatch on a method. https://github.com/phan/phan/issues/1396\nThe above comment describes a solution that should make the resulting code cleaner overall.. As a temporary workaround, you can add @suppress UnusedSuppression TODO: Remove after fixing https://github.com/phan/phan/issues/1413 and that will work as expected\nphp\n        if (\\array_key_exists('UnusedSuppression', $suppress_issue_list)) {\n            // The element's doc comment is suppressing everything emitted by this plugin.\n            return;\n        }. I tested again - This bug is fixed (for the provided example) in the most recent 1.1.1-dev commits (and also in 1.0.0 - haven't checked earlier versions)\n```php\n<?php\nclass A22\n{\n    /*\n     * @return string\n     /\n    public function run()\n    {\n        return '';\n    }\n}\nclass B22 extends A22\n{\n    /*\n     * @suppress PhanParamSignatureMismatch - this doesn't get warned about by UnusedSuppressionPlugin\n     * @suppress PhanParamTooMany - This does \n     /\n    public function run(): void\n    {\n    }\n}\n```. https://docs.phpdoc.org/references/phpdoc/tags/method.html\n\nWhen the intended method does not have a return value then the return type MAY be omitted; in which case \u2018void\u2019 is implied.\n\nIf the method is from a @method tag, Phan should compare the PHPdoc type of the @method against the real return type of the real method. But it isn't, which is a bug\n. It's possible to implement that, but Phan doesn't do that yet.\nCode from ContextMergeVisitor for visitBinaryOp would have to be copied into BlockAnalysisVisitor. Alternately, ASTSimplifier could convert ;X && Y; in a statement list into ; if (X) { Y; } ;, but some plugins would work better with the unsimplified versions.. http://php.net/iterator_to_array\n\narray iterator_to_array ( Traversable $iterator [, bool $use_keys = TRUE ] )\n\n```\n\u00bb php -a    \nInteractive shell                                          \nphp > var_export(iterator_to_array(['x']));                \nWarning: Uncaught TypeError: Argument 1 passed to iterator_to_array() must implement interface Traversable, array given in php shell code:1                                                                                                  \nStack trace:                                               \n0 php shell code(1): iterator_to_array(Array)\n1 {main}\nthrown in php shell code on line 1  \n```\nI misread that. Thought that was the documentation about iterator_to_array for \"not an array or instance of Traversable, a TypeError will be thrown.\"\nSee #1428 for the underlying cause. It could be, but that's more verbose (e.g. array[]|Traversable[] instead of iterable[] for a generic array of iterable)\nAlso, this allows us to use a union type with a single type to represent the real types in a signature such as function Foo(iterable $x) : iterable. An iterable is an instance of \\Phan\\Language\\Type\\IterableType. It can be thought of as a type that's either an array or a Traversable. But that isn't how Phan represents it internally.\nAlso, (T1|T2)[]is represented by Phan the same way as T1[]|T2[] in all releases, to reduce false positives when checking if two union types are compatible. I admit this isn't well documented.\n\n\nOther analyzers, such as TypeScript (for compiling to JavaScript), have a distinction between (T1|T2)[] and T1[]|T2[]. https://youtrack.jetbrains.com/issue/WI-20193 - Many IDEs don't support (T1|T2)[] yet, so PHP library authors type in T1[]|T2[]. So, it's not reasonable to infer that a majority of uses of the latter syntax meant \"either a array of T1 or a array of T2\"\n\n\nAlso, the PSR-5 draft is what mentions (T1|T2)[]. It is still a draft(marked as abandoned), so a lot of code doesn't use PSR-5 yet. See https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md#arrays\n\n\nT1[]|T2[] \nE.g. (Picking a random library)\nhttps://github.com/zendframework/zend-view/blob/master/src/Resolver/PrefixPathStackResolver.php#L26. Phan represents an array of iterable as iterable[], yes.\nI was saying if Phan were to expand it into two types (it doesn't), it would require representing the single iterable type as array|Traversable, array of those as array[]|Traversable[], etc.. This appears to be an unintended consequence of Phan not emitting an undefined variable warning in the global scope, and Phan not creating variables in ConditionVisitor in the global scope (e.g. for assert() here)\nE.g. if the assert() and below were wrapped in a function, you'd see the same union type error, in addition to undeclared variables\nAlso, the below example doesn't warn\n```php\n<?php\nclass A\n{\n    /*\n     * @var bool\n     /\n    public $b = true;\n}\n/* @return mixed /\nfunction getmixed() {\n    return $_ENV['x']; // This is unrealistic, but Phan assumes mixed\n}\n$a = getmixed();\nassert($a instanceof A);\nif ($a->b) {}\n``. A short term workaround could be to addif (!isset($a)) { $a = null; }` above the assert.\nNot sure why it's being inconsistent about warning about undeclared variables. https://github.com/phan/phan#features-provided-by-plugins links to Unused variable detection at https://github.com/mattriverm/PhanUnusedVariable . Closing as a duplicate of #345. Also see #1414. 0.10.5 was released today. Possible ideas:\nYour project could be swapping. See https://en.wikipedia.org/wiki/Paging#Performance . How much free RAM is there, what is the output of ./phan --print-memory-usage-summary\nThe project could have a large number of subclasses and class constants and resolving Future union types might become much slower. I really should redesign that change.\nThe change to cache union types of expressions might be less efficient in PHP versions earlier than PHP 7.2, or so on. (But if you're using 0.11.2, I assume PHP 7.2 is used)\nMaybe this became less efficient at hydrating only the necessary methods due to the change to properly hydrate parameter defaults. Hopefully not.\n\n\nwhat PHP version are you using?\n./phan --print-memory-usage-summary in PHP 0.10.3 and 0.10.4\nwhat are the contents of .Phan/config.php\nwhat CLI version is being used?. If the project is open source, could you link to that project?. If you haven't done so already, you may wish to look at https://github.com/phan/phan/wiki/Speeding-up-Phan-Analysis#3-reduce-the-number-of-files-phan-parses \n\nIf that helps, please let me know. It'd also be helpful to know about any composer dependencies, is case parsing any of those became much slower.\nAside: Phan started analyzing more than just the first 5 elements of large arrays in 0.11.2 and related releases. What about 0.11.3?. Closing this because this ticket doesn't contain a way to reproduce this. There are also no other similar reports, the increase in running time is significantly larger than before.\nMy best guess at the cause:\n\nPhan started analyzing more than just the first 5 elements of large arrays in 0.11.2 and related releases\n\nYou may also wish to look at the other steps in https://github.com/phan/phan/wiki/Speeding-up-Phan-Analysis (E.g. --processes 4, --quick, etc). Composer (e.g. a project depending both on phan and the plugin(s)), wget, curl, etc. should be sufficient for most plugins. . Can you link to a repo with source files and .phan/config.php to reproduce this?\nWhat Phan version are you using?\n. Upgrade to the latest releases and try again?. 0.8.13, then. All of the minor releases get patch releases at the same time.. Either:\n\nSuppress this entirely if this is too common\nIf the issue affects only a small set of files, it's possible to add @phan-file-suppress PhanUnreferencedUseNormal annotations (Either as a string literal statement or on the phpdoc of the class). See https://github.com/phan/phan/blob/master/tests/files/src/0427_file_suppress.php and https://github.com/phan/phan/blob/master/tests/files/expected/0427_file_suppress.php.expected\nWrite a plugin (Calling \\Phan\\Context\\getNamespaceMapFor(...) )\n\n\n```php\n// in .phan/config.php\n// Add any issue types (such as 'PhanUndeclaredMethod')\n// here to inhibit them from being reported\n'suppress_issue_types' => [\n    'PhanUnreferencedUseNormal',\n],\n\n```\nPlugin resources:\nhttps://github.com/phan/phan/wiki/Writing-Plugins-for-Phan\nCalling \\Phan\\Context->getNamespaceMapFor(\\ast\\flags\\USE_NORMAL, 'ORM') will mark that use statement for the namespace/class ORM as being referenced, as a side effect\nhttps://github.com/phan/phan/blob/master/.phan/plugins/DemoPlugin.php#L196 for an example of a plugin that can process the nodes\n\nIn the method     public function visitPropDecl(Node $node), $node->children['docComment'] would be null or the full doc comment text. Similar visitors exist for method/func/class/const(PHP 7.1+) declarations\n\n$this->context would be a Context object, $this->code_base would be a CodeBase object\n. I can see that being useful. Parsing may be more accurate (E.g. ignore /** in string literals) if you use token_get_all($file_contents) and check for T_COMMENT and T_DOC_COMMENT\nhttps://secure.php.net/manual/en/function.token-get-all.php#refsect1-function.token-get-all-examples\necho json_encode(token_get_all('<?php $a = 2; /** @var int $x */ $x = 3;'));\n[[379,\"<?php \",1],[320,\"$a\",1],[382,\" \",1],\"=\",[382,\" \",1],[317,\"2\",1],\";\",[382,\" \",1],[378,\"\\/** @var int $x *\\/\",1],[382,\" \",1],[320,\"$x\",1],[382,\" \",1],\"=\",[382,\" \",1],[317,\"3\",1],\";\"]. Fixed by #1475. Fixed by PR #1536 in Phan 0.12.2. Started inferring array{} in https://github.com/phan/phan/pull/1556. This is implemented, followup tickets will be filed for variable definition (e.g. $x = 2; ... ; use($x);) as well as enhancements/bugs. Duplicate of https://github.com/phan/phan/issues/1706 , which was filed later with more details.. This was implemented a while ago.. This is no longer planned, this can be checked for (and automatically fixed) by SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses for PHP_CodeSniffer. Fixed by #1502. This was probably caused by fixing https://github.com/phan/phan/issues/1436 - Previously, Phan would not have any inferences whatsoever for $a (undefined variable in global scope)\nThis would be a duplicate of https://github.com/phan/phan/issues/204. Closing this as a duplicate. The committed workaround should reduce false positives, but the inferred type should be array{a:array{b:string,x:stdClass}} instead.. This should be fixed in Phan 0.12.1.. Similarly, Phan should not warn about 'dim' being an invalid offset for $x['dim'] in any isset expression\nEDIT: Stopped warning, but still need to modify $x's array shape type.. After #1565, PhanTypeInvalidDimOffset should no longer be emitted for isset checks such as the above.\nAlso, Phan will only check one level of assertions on array shapes in 0.12.3 . Future releases may make nested changes to array shape types.. $x['a'] is related to https://github.com/phan/phan/issues/1479 ... Phan currently infers array instead of array{} to reduce false positives for loops, etc.\n$x['a']['c']['d'] = 0 ideally shouldn't be an issue, but Phan currently visits almost every expression, and when it visits $x['a']['c'] it performs the same for an invalid offset as it would for a normal expression (It's not aware of the full list of ancestors).. Related: the below example should infer $x['a'] as array{a:array|array{b:int}}, not array{a:array{b:int}}\nphp\n<?php                                                                                                                                                                                                                          \nfunction testmultidim(array $x) {                                                                                                                                                                                              \n    //$x['a'] = [];         //Initialization for $x['a'] not required... why?                                                                                                                                                  \n    $x['a']['b'] = 0;       //No error here even though $x['a'] is not defined                                                                                                                                                 \n    //$x['a']['c'] = [];    //Required initialization                                                                                                                                                                          \n    $x['a']['c']['d'] = 0;  //This line throws \"PhanTypeInvalidDimOffset Invalid offset \"c\" of array type array{b:int}\" when the above line is commented out                                                                   \n}\n. Similarly, this happens if the first assignment to Example->data is a multi-value array, and a single field of an array shape gets assigned. (Should add a new inferred union type for that field instead). --include-analysis-file-list /private/var/www/xxxx/test.php would need to be added. The Phan daemon responds with no_files for files that aren't in the final analysis. That approach is unrealistic, though\nOr you'd have to modify .Phan/config.php to include all PHP files and directories you plan to edit,for analysis.. It exits with status 2 if there was nothing requested that was in the list of analyzed files/directories (I should change that to 0). > Sorry for my ignorance, do you mean --include-analysis-file-list /private/var/www/xxxx/test.php server side? \nYes, that's what I meant.\nIf you're using symlinks, it's possible that that would also cause the phan daemon not to behave as expected.\nOr if you're using a case insensitive file system (Mac?) and your path to the file is a different case(upper/lower) from the file Phan is aware of.\nThe 'processes' => 2 could be left out or overridden to 1 when starting the Phan daemon (I don't think it'd matter much, anyway)\nMaybe it could be a file permissions issue, but I doubt it\n\n\nso I'm running the server with:\nphan --daemonize-tcp-port 4846 --quick\n\nDid you run cd /private/var/www/xxx before starting the server?\nAlso, I haven't tested daemon mode with absolute directories, so I think that that might be the cause of your issue. Try changing all of your paths in /private/var/www/xxx/.phan/config.php to be relative paths (relative to /private/var/www/xxx), then stopping any daemons and starting one in /private/var/www/xxx.\nphp\nreturn [\n  'directory_list' => [\n    '.',\n  ],\n  'analyzed_file_extensions' => [\n    'php', 'inc', 'module', 'install',\n  ],\n  'exclude_analysis_directory_list' => [\n    'includes',\n    'modules',\n  ],\n  'ignore_undeclared_variables_in_global_scope' => TRUE,\n  'processes' => 2,\n  'plugins' => [\n    '/Users/xxx/.phan/plugins/PhanUnusedVariable/src/UnusedVariablePlugin.php',\n  ],\n];\n\nWhat happens when you try to run Phan normally in /private/var/www/xxx?\nAre you able to get any analysis results for test.php (E.g. if you run cd /. I'm able to reproduce that bug when using.in directory_list. Try changing.phan/config.phpto put a list of all subdirectories (includes,modules, everything else) instead, andfile_list` to include all immediate file descendants of xxxx.\n\nwhen I run phan -l test.php in the xxxx directory\n\nI assume you mean phan_client -l test.php? . > I'm able to reproduce that bug when using . in directory_list. Try changing .phan/config.php to put a list of all subdirectories\nOr try installing phan/phan dev-master, I fixed the bug I was seeing in #1550 . Undeclared variable detection isn't a plugin.\nUnused variable plugin ignores $_ and $unused* by variable name, to reduce false positives.\nIt isn't currently possible to do that, but is possible to add. Phan does not support suppression on code blocks, this is a limitation of php-ast documented in the wiki at https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#invalid. This was merged as https://github.com/phan/phan/commit/d8ec0f933c7a9552a1e3406cab82fae4a21daebf  with some changes to add extra logging similar to the old logging, as well as to add vendor/composer/xdebug-version/src to Phan's own .phan/config.php. https://github.com/phan/phan/blob/master/README.md\n\nPhan has a good (but not comprehensive) understanding of flow control\n\nThis would be a feature request. Phan does not attempt to track the relationship between two or more variables; Phan tracks each variable's union type independently of the union type. This doesn't work because all of those assertions are constraints on a pair of variables, so Phan can't infer anything on individual variables\n\nThat would require significant changes to Phan's union type representation\nIf this was implemented, relationships between large number of variables (e.g. 10) would be significantly slower\n\nRewriting your code (to make variable assertions independent) would allow Phan to infer that the two variables were not null\n```\n        if (null === $foo) {\n            if (null === $bar) {\n                return 'both foo and bar are null';\n            }\n            return 'foo is null';\n        }\n    if (null === $bar) {\n        return 'bar is null';\n    }\n\n```. No, it was closed because there's nothing immediately actionable for this ticket, and the reason why it behaves this way was explained.\nPhan is working as intended; Phan likely won't support that for the reasons mentioned earlier, without a major refactoring. #90 hasn't been started yet. It'd be simplest to do this without checking the throw statements, but could probably check the direct throw statements inside the function/method (Would have to check catches)\nThis should be done at the same time as @uses and @used-by\n\n\nWarn about trait/interface/non-class being used for @throws, phpdoc2 seems to require a class to be used for that tag.\n. https://github.com/tomv564/LSP/blob/master/README.md you may also want to look at language server mode support, which would have\n\n\nMore features in the future\n\nAutostart/stop\n\nAlso see vscode-php-phan and the vim language server plugin for phan\nEDIT: Would be easiest to allow client to pass output-format to the server, and make the server return the serialized formatted issues . This should work with the phan_client from the next Phan release - The phan daemon already implemented the necessary functionality\n\u00bb ./phan_client --output-mode checkstyle -l src/undef.php\n<?xml version=\"1.0\" encoding=\"ISO-8859-15\"?>\n<checkstyle version=\"6.5\">\n  <file name=\"src/undef.php\">\n    <error line=\"3\" severity=\"warning\" message=\"Class \\SomeExample has no doc comment\" source=\"PhanPluginNoCommentOnClass\"/>\n  </file>\n</checkstyle>. Put a placeholder .phan/config.php in the root directory of the project that would be analyzed.\nphan_client checks for that to avoid sending unnecessary requests.. Adding a flag to the client to skip checks for config.php would also work. phan_client has only CLI flags, and checks only for the existence of a .phan/config.php, using the nearest ancestor directory. The client doesn't actually read the config file.. One potential issue is the config.php reading constants from Phan's codebase (e.g. Issue.php), but good idea overall.\n.phan/default_tcp_port.txt or something like that may also work (and can be customized for different developers). See https://github.com/vimeo/psalm/issues/580#issuecomment-374668507 and other discussion comments. This has already been done for closures, global functions, private methods, and final methods (including methods in final classes). This PR is making Phan recursively call itself for src/Phan/AST/ASTSimplifier.php. See my earlier comments (It's also possible to have a cycle of files referring to each other (A->B->A). XDebug will help you debug and analyze this, see the below command and https://xdebug.org/docs/display\n\nAlso, if we already started parsing a file, this would need to check that we don't re-enter parsing.\n\nYou can use this command to investigate the failures. (With xdebug 2.6.0)\nbash\nPHAN_ALLOW_XDEBUG=1 php -d xdebug.collect_params=3 -d xdebug.var_display_max_depth=1 -d xdebug.show_error_trace -d zend_extension=xdebug.so ./phan 2>&1 | tee errors.txt\nThe trace of that error is mentioned in this gist: https://gist.github.com/TysonAndre/7ad71b5a9b9d27272930a910b736c725 . It looks like the below:\n```\n    0.2069   17797232  49. Phan\\Parse\\ParseVisitor->visitClass(class ast\\Node { public $kind = 69; public $flags = 0; public $lineno = 11; public $children = array (...); public $endLineno = 530 }) /path/to/phan/src/Phan/Analysis.php:184\n    0.2069   17797232  50. Phan\\CodeBase->hasClassWithFQSEN(class Phan\\Language\\FQSEN\\FullyQualifiedClassName { private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}namespace = '\\Phan\\AST'; private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}asString = NULL; private ${Phan\\Language\\FQSEN\\AbstractFQSEN}name = 'ASTSimplifier'; protected $alternate_id = 0; private $memoized_data = array (...); private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}memoized_data = array (...) }, ???) /path/to/phan/src/Phan/Parse/ParseVisitor.php:109\n    0.2082   18625112  56. Phan\\CodeBase->hasClassWithFQSEN(class Phan\\Language\\FQSEN\\FullyQualifiedClassName { private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}namespace = '\\Phan\\AST'; private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}asString = NULL; private ${Phan\\Language\\FQSEN\\AbstractFQSEN}name = 'ASTSimplifier'; protected $alternate_id = 0; private $memoized_data = array (...); private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}memoized_data = array (...) }, ???) /path/to/phan/src/Phan/Parse/ParseVisitor.php:109\n0.2082   18625112  57. Phan\\CodeBase->lazyLoadClassWithFQSEN(class Phan\\Language\\FQSEN\\FullyQualifiedClassName { private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}namespace = '\\\\Phan\\\\AST'; private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}asString = NULL; private ${Phan\\Language\\FQSEN\\AbstractFQSEN}name = 'ASTSimplifier'; protected $alternate_id = 0; private $memoized_data = array (...); private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}memoized_data = array (...) }) /path/to/phan/src/Phan/CodeBase.php:776\n0.2082   18625336  58. Phan\\Analysis::parseFile(class Phan\\CodeBase { private $fqsen_class_map = class Phan\\Library\\Map { ... }; private $fqsen_class_map_user_defined = class Phan\\Library\\Map { ... }; private $fqsen_class_map_internal = class Phan\\Library\\Map { ... }; private $fqsen_class_map_reflection = class Phan\\Library\\Map { ... }; private $fqsen_alias_map = class Phan\\Library\\Map { ... }; private $fqsen_global_constant_map = class Phan\\Library\\Map { ... }; private $fqsen_func_map = class Phan\\Library\\Map { ... }; private $internal_function_fqsen_set = class Phan\\Library\\Set { ... }; private $method_set = class Phan\\Library\\Set { ... }; private $class_fqsen_class_map_map = class Phan\\Library\\Map { ... }; private $name_method_map = array (...); private $parsed_namespace_maps = array (...); private $file_level_suppression_set = array (...); private $should_hydrate_requested_elements = FALSE; private $undo_tracker = NULL; private $has_enabled_undo_tracker = FALSE; private $class_resolver = class Phan\\ClassResolver\\ComposerResolver { ... } }, 'src/Phan/AST/ASTSimplifier.php', ???, ???, ???) /path/to/phan/src/Phan/CodeBase.php:822\n\n0.2093   19452992  61. Phan\\Parse\\ParseVisitor->visitClass(class ast\\Node { public $kind = 69; public $flags = 0; public $lineno = 11; public $children = array (...); public $endLineno = 530 }) /path/to/phan/src/Phan/Analysis.php:184\n0.2093   19452992  62. Phan\\CodeBase->hasClassWithFQSEN(class Phan\\Language\\FQSEN\\FullyQualifiedClassName { private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}namespace = '\\\\Phan\\\\AST'; private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}asString = NULL; private ${Phan\\Language\\FQSEN\\AbstractFQSEN}name = 'ASTSimplifier'; protected $alternate_id = 0; private $memoized_data = array (...); private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}memoized_data = array (...) }, ???) /path/to/phan/src/Phan/Parse/ParseVisitor.php:109\n\n```\nRe: Gitter question:\nPhan normalizes namespaces and class names to lowercase to create a cache key (But not the FQSEN, as far as I remember). The first time it encounters an FQSEN, it uses that capitalization for the remainder of Phan's execution (Even in daemon mode)\n\nSo, if the phpdoc has the wrong casing, it might fail composer autoloading. I'm not sure if that's what you're seeing\nFunction names are also lowercased for class keys\nEven if that class name is in a doc comment.\nFor class constants, the name is case sensitive (And if I remember correctly, the namespace is not)\n\nThe calls I'm seeing to hasClassWithFQSEN via xdebug have the casing one would expect, and aren't cast to lowercase\n\nprivate ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}namespace = '\\\\Phan\\\\AST'; private ${Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement}asString = NULL; private ${Phan\\Language\\FQSEN\\AbstractFQSEN}name = 'ASTSimplifier';. Long-term, I'm in favor of having a mode to infer dependencies from the composer configuration. (e.g. it should be possible to run Phan if composer.json and vendor/ exist, but .phan doesn't.)\n@oligriffiths - Do you mind if I add commits to this to make this an optional mode, e.g. (./phan --infer-dependencies-from-composer or something roughly along those lines, as well as a config option that allows user to avoid specifying directory_list.)\n\n\nExisting unit tests will need to run and pass before this can be released.. You should add vendor/composer to .phan/config.php in the directory_list\n\nAside: tests can be run locally with tests/run_all_tests on Mac/linux\nRunning test suite: __FakeSelfFallbackTest\nsrc/Phan/ClassResolver/ComposerResolver.php:16 PhanUndeclaredTypeProperty Property \\Phan\\ClassResolver\\ComposerResolver::composer_class_loader has undeclared type \\Composer\\Autoload\\ClassLoader\nsrc/Phan/ClassResolver/ComposerResolver.php:21 PhanUnextractableAnnotation Saw unextractable annotation for comment '* @var <string,string>'\nsrc/Phan/ClassResolver/ComposerResolver.php:31 PhanUndeclaredTypeParameter Parameter of undeclared type \\Composer\\Autoload\\ClassLoader\nsrc/Phan/ClassResolver/ComposerResolver.php:46 PhanUndeclaredClassMethod Call to method findFile from undeclared class \\Composer\\Autoload\\ClassLoader\nsrc/Phan/ClassResolver/ReflectionResolver.php:9 PhanUnreferencedClass Possibly zero references to class \\Phan\\ClassResolver\\ReflectionResolver\nsrc/Phan/ClassResolver/ReflectionResolver.php:33 PhanPossiblyFalseTypeReturn Returning type false|string but fileForClass() is declared to return string (false is incompatible)\nsrc/Phan/CodeBase.php:247 PhanPluginUnknownMethodReturnType Method \\Phan\\CodeBase::init has no declared or inferred return type\nsrc/Phan/CodeBase.php:253 PhanThrowTypeMismatch \\Phan\\CodeBase::init() throws \\Phan\\Exception\\ClassNotFoundException, but it only has declarations of '@throws \\Phan\\Exception\\FileNotFoundException'\nsrc/Phan/CodeBase.php:281 PhanUnreferencedPublicMethod Possibly zero references to public method \\Phan\\CodeBase::getClassResolver\nsrc/Phan/CodeBase.php:289 PhanPluginUnknownMethodReturnType Method \\Phan\\CodeBase::setClassResolver has no declared or inferred return type\nsrc/Phan/CodeBase.php:943 PhanUndeclaredVariableDim Variable $analyze_file_path_list was undeclared, but array fields are being added to it.. Related to https://github.com/phan/phan/issues/1514 . This should be fixed once #1514 is fixed.\nI think that phan doesn't analyze @(cond) but analyzes @(cond) in if statements, etc. I'd have to check. (It doesn't analyze array_key_exist yet, either). The fix is on master. (code handling @ will be in 0.12.4). Huh. This seems like an issue affecting undeclared properties as well as properties that are declared, but have no type.\nPhan checks if assignments to property types are compatible with the property's union type before adding them to the property's union type. This is insufficient. It'd be more robust to track the original declared type separately from the dynamic assignments to the type, and check if assignments can cast to the original declared type before adding them to the dynamic union type. (Right now, I think there's only one union type being tracked, and that's the dynamic type)\nThere're issues open already for tracking assignments to properties within a scope.\n. In the meantime, this can be worked around by the following methods (Assuming that there isn't magic code inspecting properties)\n\nAdding /** @phan-property mixed $prop to myclass is probably the safest\nAdding /** @var mixed */ public $prop would also work.. This has been ensured by SlevomatCodingStandard.TypeHints.DeclareStrictTypes for PHP_CodeSniffer already. See https://secure.php.net/manual/en/function.getopt.php#refsect1-function.getopt-changelog\n\nVersion | Description\n-- | --\n7.1.0 | Added the\u00a0(third) optind\u00a0parameter.\nThere are two reasons I can think of\n\ntarget_php_version is '7.0'\nYou are using a PHP 7.0 binary to analyze the code (and target_php_version is not set), making Phan infer a target_php_version of 7.0\n\n. It looks like this is because you're using php 7.0 to run Phan.\nPhan's using ReflectionMethod for the method real parameter counts, but is using the signature map for the phpdoc parameter counts. The warning you're seeing is based on the real parameter counts, not the phpdoc parameter count ranges.\nI guess I'd need to override the real parameter counts as well, if a signature is in src/Phan/Language/Internal/FunctionSignatureMap_php71_delta.php or the other deltas. Thanks!. Same with EmptyUnionType.php (the plugin warns about the methods already existing). PhanCompatibleMultiExceptionCatchPHP70 is already a long name, but still shorter than\nPhanCompatibleMultiExceptionCatchPHPVersionsLessThanOrEqualTo70\n(slightly easier to type out suppressions or read phan output)\nI thought of various names, but couldn't think of any good ones. I'm able to reproduce the crash with the following snippet.\nphp\n<?php\n''();\nOr\n<?php\ncall_user_func_array('', []);\n\nPHAN_ALLOW_XDEBUG=1 php -d xdebug.collect_params=3 -d xdebug.var_display_max_depth=1 -d xdebug.show_error_trace -d zend_extension=xdebug.so [phan command] may be of help in identifying the file. Fixed by https://github.com/phan/phan/pull/1620. I'm in favor of getting PSR-5 released and the concept (of standardizing doc comments) as a whole.\nIf you want to ask me what I think about various changes to PSR-5 proposals, I'd be happy to comment on them.\nHowever,\n\nI'm in favor of PSR-5 being as small as possible (while being extendable for future syntax in separate PSR requests)\nIt's been open for a while, and minimizing changes for PSR-5 would hopefully help finish it faster.\nI like most of what was in the draft, with minor objections\nI feel like the PSR-5 \"options arrays\" proposal doesn't extend well to @property, @method, etc. The array shape syntax supported by Phan/Psalm. An equivalent to typedef (of C, within a single file) might be convenient, but out of scope\nThe template syntax is ambiguous when being applied to arrays\nPSR-5 has been open for several years; and I've seen many of the PSR working group members or organizers have dropped out of the PSR-5 for various personal/professional reasons.\n\n\nThe other maintainers haven't commented on this, so I'm closing this.. This seems similar to https://github.com/Homebrew/homebrew-core/issues/26170#issuecomment-378967654\nIt looks like the recommended installation method for this is now pecl install ast (Similar to linux)\n```sh\nbrew update; # updates local brew meta data\nbrew untap homebrew/php; # removes old homebrew php tab, now php is in homebrew core\nbrew list | grep 'php'; # check for all php related installs\nphp72-ast never existed, I think, so leave out brew uninstall php72-ast; # If you had that previously, also remove all the other libs\nbrew uninstall php; # or brew uninstall php72 if you had that before\nbrew upgrade; # make sure all the other libs are up to date\nbrew cleanup; # cleanup old files\nbrew prune; # cleanup old symlinks\nbrew install autoconf; # Required by pecl\nbrew install php;\npecl channel-update pecl.php.net;\nphp --modules | grep 'ast'; # should not echo ast, if it does it is already installed, no need to run pecl install apcu then\npecl install ast; # Install other pecl modules that you are still missing in a similar fashion\nphp --modules | grep 'ast'; # should echo ast\nbrew services start php; # If you want php fpm and such\n```\nYou can install phan globally in two different ways:\n\nhttps://github.com/phan/phan/wiki/Getting-Started#from-phanphar (Can rename phan.phar to phan if you want to keep the name, or add a wrapper script\nCreate a git checkout of this repo, run composer.phar install [--no-dev], and add path/to/phan-repo/phan to your path\n\nNote that because pecl is separate from homebrew, you may need to install and enable php-ast (with pecl install ast) in a year,  if homebrew-php upgrades the php formula to 7.3.. See https://github.com/phan/phan/wiki/Getting-Started#from-homebrew for a first attempt at documenting the new instructions. Let me know if there's anything missing.\nIt appears as if php-ast must be installed through pecl, it can't be part of homebrew (They only plan to support frequently installed PHP packages mentioned in https://brew.sh/analytics/install/). Created https://github.com/phan/phan/wiki/Getting-Started-With-Homebrew. Absolute file paths are possible but not implemented yet. Config::projectPath() can do that.\nhttps://github.com/gtache/intellij-lsp is potentially possible as an alternate approach. See the other editor plugins on the wiki.\n. Also note that some of Phan's issue types (E.g. warning about uses of methods, functions, properties, etc.) include defined at {FILE}:{LINE} in the issue template.\nSo any solution would probably involve checking if any arguments need to be converted from relative to absolute paths before the OutputPrinter interface can print (and optionally colorize) the issue messages.\n--print-absolute-paths would be my thought on a flag name (to be decided).. Currently, Phan adds the class constant with name class as part of hydration.\nInstead, phan should check if the name is (case insensitively) class when fetching a class constant.\n. Possible solution treat C::fn() like fn(...$varargs) (append after the fake phpdoc parameters, but make sure that realmismatch errors do not get emitted, and the real signature is not changed)\nA different issue type might make more sense. This isn't supported yet. Phpstorm style generics may be supported in the future.\nPhans own codebase leaves out the real return type.\nI think that both including the generic array and suppressing the mismatch might work.. Another approach would be to add @phan-return ArrayCollection<Requirement> alongside @return. Phan would use that and ignore the @return (I assume ArrayCollection uses Phan's @template syntax.)\nSee https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#aliases-of-phpdoc-annotations\n. Similar logic should apply to conditions of for statements. As well as if/else if statements that contain an assignment.\nNote that variables may be non-falsey within the inner statement list, but will sometimes/always be falsey after the end of the loop body (e.g. if there is no break statement). ConditionVisitor and Negated ConditionVisitor don't do that yet, but it should be possible.\nNote that superglobals such as $_SESSION don't have changes tracked in local scopes right now. See https://github.com/phan/phan/issues/1346\nPhan currently treats any param union type containing a callable as expecting a callable literal if the passed in value is a literal string or array.\nOnce intersection types are supported, Phan may have an option to disable this check. Until then, string|callable is currently phan's closest equivalent to a callable string.\n. (at least for analysis within the method body). On the doc comment for bar(). Phan currently does not support inline doc comments due to limitations of php-ast. See https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-file-suppress which was added for that purpose. A standalone string literal can be used if there's no class/function/etc. to add that annotation to.. > Which list is meant here? \nfile_list is what is meant. After the files in file_list are parsed, unique files in the directories of directory_list look like they'd be parsed next. Files are parsed in the order listed in that config, then a subset of those files (excluding exclusions) are parsed in that order.\n\nBut that doesn't seem to help. I think I also then run into the issue of phan saying that $autoloader is undeclared\n\nThat isn't much of a surprise to me. require (and include, require_once, etc.) aren't treated specially by Phan (eg. it won't load any variables or class declarations from that file before parsing/analysing remaining statements from public/app.php). See my below comments for possible ways to work around this issue:\n\nThere's several ways to get a passing Phan analysis. From your description, I'm not 100% sure of the most appropriate approach:\n\nAdd ['request' => 'Request', ...] to globals_type_map in .phan/config.php (useful if $request is used in many different files (Adding namespace if necessary):\n\nphp\n        // Override to hardcode existence and types of (non-builtin) globals in the global scope.\n        // Class names should be prefixed with '\\\\'.\n        // (E.g. ['_FOO' => '\\\\FooClass', 'page' => '\\\\PageClass', 'userId' => 'int'])\n        'globals_type_map' => [],\n2. Add '@phan-file-suppress PhanUndeclaredVariable' as a top level string literal statement: See https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-file-suppress\n3. Setting 'ignore_undeclared_variables_in_global_scope' => true in .phan/config.php may be useful, depending on the number of issues.. This should have been fixed as part of the work on https://github.com/phan/phan/pull/1665. I usually wait a few days before updating the vs code extension, in case of any unexpected crash reports.. Fixed in 0.12.7. This was completed a while ago. This is fixed if you upgrade to dev-master.\nThis can be detected via the latest version of PregRegexCheckerPlugin (Add 'PregRegexCheckerPlugin', to your .phan/config.php \"plugins\" config array or pass --plugin PregRegexCheckerPlugin). Thanks! This is fixed on dev-master.\nIf your CI setup doesn't have checks to detect this, see the plugin which invokes the native PHP syntax checks. (InvokePHPNativeSyntaxCheckPlugin). This will be part of the next Phan release.\n1698 was filed to track the enhancement of warning about array destructuring values being invalid.. https://secure.php.net/manual/en/tokenizer.installation.php\n\nThese functions are enabled by default. You can disable tokenizer support with --disable-tokenizer .\n\nI mistook it for a core part of php, will update the code to check if the functions exist.\nThis dependency is used for Phan's file-based and line-based suppressions.. That probably happens when that snippet is in a branch. I'm able to reproduce it with the folowing file:\nThe fix is probably to cast the array key in foreach to a string in more places\nphp\n<?php\nfunction x() {\n    if (rand() % 2) {\n        ${42} = 24;\n    }\n    echo ${42};\n}. > (AFAICS Scope::getVariableMap method is declared as returning an array with the string key).\ngetVariableMap is documenting what the array keys are in 99.9x% of use cases, not 100%.\nPHP would also always coerce string representations of integers into integers when inserting them into an array.\n\nIf PHP had an efficient, easy to use hash table data type which didn't do that, I'd use that, but PHP doesn't.\n\nphp\n$x = [];\n$x['k'] = 'v';\n$x['3'] = 'v';\nvar_export($x);\n/*\narray (\n  'k' => 'v',\n  3 => 'v',  // <- This was originally a string, but became an integer\n)\n*/. Changed getVariableMap to array<string|int,Variable> so that Phan would be better at detecting similar issues in self-analysis in the future.\nThe other uses (of variables, anyway) look like they already had (string) casts.. Fixed by https://github.com/phan/phan/commit/db90a8b69f39514c5064e6643d80a3baf030c2d1. @return static or @return $this.\nIt seems like there's a bug in __invoke specifically where the shorthand syntax isn't inferring the return type from the object being called.\n```php\n<?php\nclass C {\n    /*\n     * @return static\n     * (or (at)return $this)\n     /\n    public function g() {\n        return $this;\n    }\n/**\n * @return static\n */\npublic function __invoke(...$args) {\n    var_export($args);\n    return $this;\n}\n\n}\nclass D extends C {\n    public function methodOfD() {\n    }\n}\nclass E extends D {\n    public function methodOfE() {\n    }\n}\n$e = new E();\necho $e->g()->methodOfD();\necho $e->g()->methodOfE();\necho $e->g()->undeclaredMethod();  // warns\necho $e()->methodOfD();\necho $e()->methodOfE();\necho $e()->undeclaredMethod();  // should warn, but doesn't yet\necho $e->__invoke()->undeclaredMethod();  // warns\n```. Oh, wasn't sure what that syntax was meant to indicate.\n\n\nwrap A's __invoke in an __invoke method in B that just calls parent::__invoke but which has different type hinting or\nuse the @method style docblock comments Zend and other frameworks use\n\n\nThere's a third option (e.g. if you have hundreds of these methods in your codebase), to write a plugin to calculate it.\nSee src/Phan/Plugin/Internal/ClosureReturnTypeOverridePlugin.php and src/Phan/Plugin/Internal/ArrayReturnTypeOverridePlugin.php for examples. I'm not 100% sure if the Method's FQSEN is the FQSEN of the subclass. This is a duplicate of https://github.com/phan/phan/issues/1143 . The way we plan to solve this is described in that ticket.\nI'd recommend suppressing it.. https://github.com/phan/phan/pull/1743 noticeably improved the reliability of the fallback.. 1. https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#suppress or https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-suppress-current-line on the line in question\n2. If this is a common problem, you could write a plugin for it, and add that plugin file to your phan config. See https://github.com/phan/phan/wiki/Writing-Plugins-for-Phan and https://github.com/phan/phan/blob/master/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php (write a plugin implementing SuppressionCapability which checks if the method in scope is named __destruct())\n3. I'm assuming your use case is more complex, but after the object is destructed, the PHP Virtual Machine will properly decrement the reference count of all of the objects/arrays/strings referred to in the instance anyway\n. Closing this for the following reasons:\n\nThe question was answered\nImplementing this will make Phan fail to catch some valid bugs as well, e.g. if a helper method uses the property immediately afterwards\n__destruct() is used very infrequently in most PHP code\nWriting a plugin for it isn't a task for the Phan maintainers.. I agree that error message could be clearer for variadics.\n\nMaybe `src/some/file.php:20 PhanTypeMismatchDeclaredVariadicParam Doc-block of ...$bar in foo contains phpdoc param element type \\Bar[] which is incompatible with the param element type \\Bar declared in the signature.\nI'd recommend documenting this as @param \\Bar ...$bar\n. Phan interprets that as belonging to the method as a whole. It pretty much checks for the fragment @deprecated anywhere at the moment.\nhttps://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.deprecated.pkg.html\n\nThe @deprecated tag is used to document the deprecation version or other information of any element that can be documented except for page (global variable, include, constant, function, define, class, variable, method). If present, phpDocumentor will display the optional version/info string unaltered.\n\nThat list includes variables, methods, and global variables, but not method parameters.\nIt'd involve some work to support deprecating individual parameters (Automatically create a plugin to analyze parameters used, then add that plugin to the plugins for that method/function, etc, preferring plugins since 99.99% of parameters wouldn't be deprecated)\n\nAside: There seems to be a draft proposal for https://github.com/phpDocumentor/phpDocumentor2/issues/1604 (for @method on classes), but that involves a proposed syntax that Phan doesn't support. The closest equivalent right now would be to set the minimum_severity in your .phan/config.php to SEVERITY_CRITICAL.\n\nSome of the SEVERITY_NORMAL issues might also cause fatal errors, and might need to be updated.\n\nThis might not catch all errors (e.g. passing the wrong parameter type to some functions would cause an uncaught TypeError).\n// The minimum severity level to report on. This can be\n    // set to Issue::SEVERITY_LOW, Issue::SEVERITY_NORMAL or\n    // Issue::SEVERITY_CRITICAL.\n    'minimum_severity' => Issue::SEVERITY_CRITICAL,. Additionally, I'd recommend adding InvokePHPNativeSyntaxCheckPlugin to your .phan/config.php's 'plugins' setting, which will run php --syntax-check on files that are analyzed (i.e. not excluded from analysis) to report any checks that are part of PHP's built in checks already.. Type inference on properties is a known feature request. See https://github.com/phan/phan/issues/805\nCreating a local variable that is a copy of the property and type checking that is one workaround. Other workarounds were mentioned in your earlier discussion.. https://github.com/phan/phan/issues/805 would need to be done first.\nAfter it was completed, it might be possible to write a plugin to type check the inner body of the template.. // @phan-file-suppress PhanUndeclaredProperty might work.\nYou can also write your own plugin to just suppress undeclared property issues for the given issues.\nResources:\n\nhttps://github.com/phan/phan/blob/master/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php is what implements @phan-file-suppress\nhttps://github.com/phan/phan/wiki/Writing-Plugins-for-Phan\n\nAn alternative would be to add a way to specify that user-defined classes have arbitrary dynamic properties and to give up on warning about them (Phan does this if __get or __set are defined, but that probably doesn't help you). It's been a while since I've looked at the magic property code.\nIt turns out that \\Phan\\Language\\Element\\Clazz->getPropertyByNameInContext() only checks for __get() (unconditionally). There was a TODO for that.\n\nDefining only __set and not __get is a fairly rare case. It should work properly if __set is defined.\n\nChecking if the parent node was an assignment (to determine if __get()/__set() should be checked for) would be the proper way to do this check. Closing this and opening #1756 to track the code fixes I mentioned. A similar use case was mentioned earlier, but I'm having trouble finding it. https://github.com/Drenso/PhanExtensions#annotationsymfonyannotationplugin may fix it.\nThat's a third party extension which solves the same issue for Symfony style annotations.. I've had similar issues before.\nThat probably works (You might want a fallback if it couldn't be found, e.g. don't add it to 'plugins')\nAnother approach would be to change the global installation to a separate composer project \n\nIt allows you to run composer install/update in one step to upgrade the dependencies\nYou don't have to worry about hidden dependency conflicts of common libraries for complex plugins that need their own composer dependencies\n\nE.g. This could go in /opt/my-project-phan-installation/composer.json with the appropriate minimum php version and composer dependencies:\n(And you could put /opt/my-team-phan-installation/vendor/bin/phan in the user's PATH (or add a symlink)) \njson\n{\n    \"config\": {\n        \"platform\": {\n            \"php\": \"7.0.24\"\n        }\n    },\n    \"require\": {\n       \"phan/phan\": \"~0.12.12\",\n       \"drenso/phan-extensions\": \"^2.3.1\"\n    },\n}. Closing this because the original question was answered. You can add the following to your .phan/config.php as a temporary workaround\n// A regular expression to match files to be excluded\n    // from parsing and analysis and will not be read at all.\n    //\n    // This is useful for excluding groups of test or example\n    // directories/files, unanalyzable files, or files that\n    // can't be removed for whatever reason.\n    // (e.g. '@Test\\.php$@', or '@vendor/.*/(tests|Tests)/@')\n    'exclude_file_regex' => '@^vendor/.*/(tests?|Tests?)/@',. Thanks!\nI agree that it's a bug that should be fixed (I mentioned a temporary fix because I didn't know if you were stuck due to this issue).\nThis is fixed by be1152104221ac2e0dd3c465820dc36bf6394dec , and will be in the next Phan release. https://phar.io/howto/sign-and-upload-to-github.html seems easier than I thought.\nRandom thoughts I had when looking at Phive\n\nOther maintainers than myself might need to create releases (e.g. if I'm on vacation), this might complicate the release process or temporarily break user installation scripts if GPG is only partially supported. (I guess gpg key creation could be added later)\nKey expiry is suggested as 1 year. Are maintainers expected to generate a different .phar.asc every year for installation scripts to continue to work if they point at older directories?\nI'm not sure how they expect users to check that a given key belongs to the maintainers. (I guess we could mirror the key fingerprints in the repo itself, or in some other place such as github.com/phan/phan.keys)\n\n\nA single key is not a chain. Other people or organizations, potentially someone trusted, need to sign your key with theirs, increasing the level of trustworthiness and forming the actual chain. It's actually the same as with TLS certificates where a CA like letsencrypt signs your key and since your browser trusts letsencrypt it also trusts your key/certificate. Most projects though do not co- or cross-sign their release keys.\n. I generated a fingerprint with key DD0E 869F 43C6 D0B1 0E2E  2F19 AFA6 EAAB 339B 841E with gpg --gen-key (expiring in 2 years). Installation seems to work.\n\n\n\nThe key was uploaded for Phan 0.12.12\n\nI haven't looked into how other projects document what GPG keys the maintainers own.\nI should modify internal/make_phar to use PHAN_GPG_SIGNER_ID to create phan.phar.asc if the environment variable is set\n\n```php\n\u00bb phive install phan/phan\nPhive 0.10.0 - Copyright (C) 2015-2018 by Arne Blankerts, Sebastian Heuer and Contributors\nDownloading https://api.github.com/repos/phan/phan/releases\nDownloading https://github.com/phan/phan/releases/download/0.12.12/phan.phar\nDownloading https://github.com/phan/phan/releases/download/0.12.12/phan.phar.asc\nDownloading key AFA6EAAB339B841E\nTrying hkps.pool.sks-keyservers.net (51.15.53.138)\nDownloading https://hkps.pool.sks-keyservers.net/pks/lookup?search=0xAFA6EAAB339B841E&op=index&options=mr\nDownloading https://hkps.pool.sks-keyservers.net/pks/lookup?search=0xAFA6EAAB339B841E&op=get&options=mr\nSuccessfully downloaded key\n    Fingerprint: DD0E 869F 43C6 D0B1 0E2E 2F19 AFA6 EAAB 339B 841E\n\n    Tyson Andre <tysonandre775@hotmail.com> (2018-06-09)\n\n    Created: 2018-06-09\n\nImport this key? [y|N] y\nLinking /home/tyson/.phive/phars/phan.phar to /home/tyson/programming/phan_clean/tools/phan\n```. > Remains the problem of the interaction that makes impossible to use phive to install phan on CI servers...\nThe following list of commands works for me. Obviously, it'll have to change in two years when the key expires, or if other maintainers create releases, but that phive issue(134) should be closed by then\nsh\nphive update-repository-list \nphive  install --trust-gpg-keys AFA6EAAB339B841E phan. There's subtle differences in the way Phan represents these two types (empty string becomes an empty union type, 'mixed' becomes a union type with a single type of mixed).\nE.g. for return types, mixed indicates that we're fairly sure it has a return type (i.e. not void), while the empty string indicates something we know nothing about.\nThis introduces some new test failures: e.g. 0307_inheritdoc_tests for offsetGet()\n[^\\r\\n]+\\:22 PhanTypeMissingReturn Method \\\\B307\\:\\:offsetGet is declared to return mixed but has no return value\n\nAnd for param types, it isn't that important. I've just left them there as indications I haven't gotten around to filling in a type.. > Just to clarify for future reference - you mean the empty-string-as-return-type is equivalent to mixed|void, whereas empty-string-as-param-type means @todo\nYes, that's correct. The distinction is larger for return types. I mean that both are Todo, but the return type gets interpreted similarly to void|mixed . Thanks!\nThis was merged as https://github.com/phan/phan/commit/70be86b00c3fc8bed04f59e367e1543d2e6e6b5c after fixing the Phan-specific review comments and fixing the failing tests.. Fixed by https://github.com/phan/phan/pull/1773. Phan is working as intended here. See https://github.com/phan/phan/issues/1163#issuecomment-334807886\nYou can add phpdoc @return static or @return $this instead.. Similarly, (string|float) * (string|float) should have an inferred type of int|float, not float, because int is a possible outcome.\n(e.g. var_export('12' * '34')). Thanks, I don't see any issues with your config (e.g. no settings that you need to turn on). This is a bug in Phan.\nPhan sees /** @var string[] */ private $prop = [] and infers the type of $prop to be the union of string[] (from phpdoc) and array (from the default value).\n\nNew types are meant to be added to properties only when it would make the property's type more specific. This is accidentally making the property's type less specific.. Thanks!. This was already implemented. directory_list should include all of your project's direct dependencies, including those that are excluded from analysis. You need to add 'vendor/phpunit/phpunit/src', to directory_list. \n\n\nA list of directories that should be parsed for class and method information.\n\n// A list of directories that should be parsed for class and\n    // method information. After excluding the directories\n    // defined in exclude_analysis_directory_list, the remaining\n    // files will be statically analyzed for errors.\n    //\n    // Thus, both first-party and third-party code being used by\n    // your application should be included in this list.\n    'directory_list' => [\n        'src',\n        'tests',\n    ],. > Couldn't find PHP 7.0-related tests except at the place where I added this one, but I can't run the suite from that directory - looks like things are outdated there.\nIt's run by invoking ./test.sh, which requires bash (unix/linux)\nAt the time it was originally written, it seemed impossible to change certain config settings and plugins from the config that was originally loaded.\n\n\nNow, it seems like it is possible (some tests do exactly that), and a regular PHPUnit test would be more appropriate for those tests. I just haven't gotten around to trying that.. Done in 749da3782898f1be951f4227d94279ba3ac0a85e. This issue is no longer seen in vendor/symfony/var-dumper/Dumper/ServerDumper.php. Not easily. The redis extension's class structure for multi() is set up in a way that makes it inconvenient to analyze. (If it actually returned RedisPipeline, that'd be convenient)\n\n\nI suppose you could hack together a plugin to make Phan analyze RedisPipeline extends Redis from Redis->multi() and use that, looping through almost all of the methods and doing that. That would make the analysis as accurate as possible.\n\n\nThat would use the return type overrides capability to override Redis::multi and RedisCluster::multi\n- Example from a WIP plugin: https://github.com/TysonAndre/PhanSQLPlugin/blob/master/tests/src/stub.php and https://github.com/TysonAndre/PhanSQLPlugin/blob/master/src/PhanSQLPlugin.php does something similar with TemplateOraResult extends OraResult. (Doesn't need to be a template here, just needs to return Redis)\nAlternately, you could just suppress all of the redis-related issues. @phan-suppress-next-line (etc) are useful there.\nSay that 90% of the uses of redis were single instead of multi execs in a typical project:\n\n\nSetting the return type to bool|Redis would make Phan emit PhanPartial... issues for those 90% of use cases.\n  And it'd fail to warn about methods on what was really a boolean 90% of the time, etc.\n\n\nSetting the return type to mixed would make Phan fail to detect real issues with how redis is used 90% of the time\n\n\nhttps://github.com/phpredis/phpredis#return-value-123. I don't think it's obscure. I planned to do something like this eventually:\n\nFor compound conditions such as && and ||, this functionality would work much better if it was implemented within Phan's ConditionVisitor directly\n\nThe following things limit Phan's ability to do this:\n\nPhan doesn't yet distinguish between phpdoc and real union types (E.g. it analyzes the inner body of /** @param ?string $x */ function($x) {...} and /** function(?string $x) { ...} the same way.)\n\nIt'd make sense to implement this check, but avoid warning if the variable's type is inferred from phpdoc types instead of real types.\nOtherwise, you'd get a lot of false positives for phpdoc-only types.\n- Loops and try/catch also introduce false positives\nPsalm has this functionality, but it looks like there's a failure to warn about the union type false (which I've filed (EDIT: and they've fixed)). I don't have plans to work on this in the short term. If there are PRs implementing this functionality with tests, I can review them.\nInitial support for extract() was added to MiscParamPlugin.php. This does not affect unused variable detection (VariableGraph, etc.) right now, but it's feasible to do (e.g. by adding a property to ast\\Node to describe new methods created by a call, check to see if that property exists. This is similar to how calls such as preg_match() mark things as possible references for unused variable detection.)\n\nProbably don't want to warn about unused definitions from extract(). They didn't detect these because compactplugin is working independently of the unused variable plugin, and doesn't notify it that the variable is used. It's feasible to do, and planned eventually.\n\nNo version of Phan so far has supported compacted variables being accounted for in unused variable detection.\n. Thanks!. Thanks!. Thanks for reporting this, the extra type was getting added to the wrong object.. The fix for this will be in the next Phan release. It can be used right now by switching to dev-master.\nAlternately, Phan's exclude_file_list option can be used to exclude the file that is causing this crash from analysis.. Right now, one workaround would be to use more specific exclusions of directories and files\nI think there was a ticket for a CLI option to change the analyzed file list to a finite list of files.\nThere's also Phan's Daemon mode/ Language Server Protocol support, if you are analyzing a single file in a project while that file changes frequently.. blade.php won't work. Phan only considers the last extension component (php).\n\nThe docs don't make it obvious how the templating language can be converted to an AST, or what form that AST will take.\n   Generating an ast\\Node (that calls the same functions, has php code for @php/@endphp) is something that will need to be done before Phan can analyze anything. \n\nhttps://github.com/phan/phan/wiki/Writing-Plugins-for-Phan and https://github.com/phan/phan/wiki/Developer%27s-Guide-To-Phan may be useful.\n\n\nSkimming over the code, it sort of looks like the blade implementation converts the blade.php file to a regular php file.\n\n\nE.g. https://github.com/illuminate/view/blob/master/Compilers/BladeCompiler.php uses preg_replace_callback a lot to expand the templates\nSo, a Phan analysis of a project using blade might just get started with an automated step to run that on all blade files, dump those into a different directory and analyze the output files (line number mapping might be different, I'm not sure how phpstorm handles that)\nA hack would be to do that in .phan/config.php. A better approach would be a wrapper script running Phan. (plugins are only run after all files have already been parsed, by design). Closing this because the approaches I've recommended are external to Phan (e.g. in a wrapper external to Phan), and adding https://github.com/illuminate/view as a dependency of regular Phan seems excessive.\nIf you do get a wrapper script or other approach to work, feel free to post details in this issue. Also see FilesystemIterator::CURRENT_AS_SELF in https://secure.php.net/manual/en/class.filesystemiterator.php#filesystemiterator.constants\n\nMakes FilesystemIterator::current() return $this (the FilesystemIterator).\n\n. See https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#suppress and https://github.com/phan/phan/wiki/Incrementally-Strengthening-Analysis#suppressing-issues\nAlso see https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks and https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks-via-string-literals\nHaving some false positives an any analysis is typical. \nThis ticket contains observed behavior but does not contain any expected behavior, etc.. See https://github.com/phan/phan/wiki/Getting-Started#creating-a-config-file\nYou have to include 'vendor' (or './vendor') both in directory_list and in exclude_analysis_directory_list.\nPhan does not automatically read the composer project settings, though work to implement an option is planned to eventually do that.\nreturn [\n    'target_php_version' => '7.0',\n    \"allow_missing_properties\" => true,\n    \"null_casts_as_any_type\" => true,\n    'backward_compatibility_checks' => false,\n    \"quick_mode\" => true,\n    \"minimum_severity\" => 10,\n    'parent_constructor_required' => [\n    ],\n    \"exclude_analysis_directory_list\" => [\n        './vendor',\n        '.phan/stubs',\n    ],\n    'directory_list' => [\n        'app',\n        './vendor',\n        '.phan/stubs',\n    ],\n];. This isn't an issue with is_iterable. This is an issue with Phan's type assertions on object properties -- Type assertions aren't supported for object properties.\nIf $foo was a variable instead of a property access, this would work. One workaround is $pipeline = $this->pipeline, then working with $pipeline instead\nSee https://github.com/phan/phan/issues/1091#issuecomment-327336666 and https://github.com/sanmai/pipeline/blob/2d44915934931c00868e4d4770feab1363659bae/src/Principal.php#L54\n\nThis is planned; https://github.com/phan/phan/issues/204 tracks the general case of this issue.. This was done as part of #1859. > Is there already support for this that I have missed?\n\nNo, there isn't\n\nIf not, are there any objections to adding another cli parameter to allow the host to be passed as well?\n\nAs long as the default Phan setting stays at 127.0.0.1, then I don't have any objections to --daemonize-tcp-host. - https://symfony.com/doc/current/components/var_dumper.html is what this refers to?\n- See https://github.com/phan/phan/wiki/Writing-Plugins-for-Phan\n- finalize() and FinalizeCapability can be used to report aggregate results in plugins\n- https://github.com/phan/phan/blob/master/.phan/plugins/PrintfCheckerPlugin.php is a plugin that gets called analyze every call of printf()\nYou can write a plugin based on that to write your own function to check if dump() is called, or report the line number where dump is called depending on the file name or context, etc.. The other option is to add an option --dump-element-references, enable force_tracking_references, and print a JSON formatted representation of the elements to stdout after analysis is completed. \n\nActually, that won't work without extra setup\n\nPhan tracks references to functions, properties, classes, etc. so that it can warn about them being unused.\nIf the symfony dump() function is excluded from analysis, it won't be reported in the reference tracking. That's wrong.\n$function->getContext() is the context of the function being called, e.g. it is associated with the filename of the function declaration in vendor/, which you have probably excluded from analysis.\nYou want $context, which is the file and line of the function usage.\nUse the below instead ($context is what https://github.com/phan/phan/blob/master/.phan/plugins/PregRegexCheckerPlugin.php#L30-L59 uses):\nphp\n            $this->emitIssue(\n                $code_base,\n                $context,\n                'DemoPluginFunctionName',\n                \"Function {FUNCTION} should not be used.\",\n                [(string)$function->getFQSEN()]\n            );\n\n'dump' => $testCallback is correct\n. You may also be interested in the third party extension https://github.com/Drenso/PhanExtensions#phanextensions , which supports checking existence of symfony's uppercase phpdoc annotations.\nClosing this because the original question was answered.. This was merged in https://github.com/phan/phan/commits/5fdc7137fe167e7a6beaf6019e659487befa7d4b with some tests of expected behavior and adjustments for edge cases\nI forgot to mention some details in the original ticket (E.g. case insensitive suggestions such as -h for -H, examples of what expected output should look like, etc)\n. This is probably a bug with visitDim with multiple property array shapes in AssignmentVisitor and/or type comparisons with the empty array shape. There's another issue with assuming overly specific types for properties with no explicit phpdoc type, based on the first assignment (e.g. should be able to redefine $this->prop['a'] elsewhere.\nPhan doesn't yet track the original phpdoc type declaration of properties to compare assignments against. https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#invalid - due to limitations of php-ast, Phan currently does not parse inline var annotations. A future Phan release might parse those inline doc comments, but only with a polyfill.\nhttps://github.com/Drenso/PhanExtensions#doccommentinlinevarplugin is a third party plugin solving this issue.\nMarking as a duplicate of https://github.com/phan/phan/issues/313 (same underlying cause). Inside of interface A, self is just an alias for A. So in B, the method's return type of self is actually B. So, they're incompatible - PHP's return type overrides don't support contravariance.\n\nA draft proposal for supporting contravariance exists and provides more details on how PHP checks the compatibility of return types right now: https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters#introduction\n\nDo you have examples of where overriding a real/abstract method returning self with a different method returning self would succeed?\nI guess it's possible that the PHP interpreter would fail to warn/throw if the classes were loaded/autoloaded in a certain order - I've seen similar cases where the real code would run without throwing, if split across multiple files. (But I'd consider not warning in that case a bug/limitation of PHP that may change in future PHP releases).\nE.g. executing the below file would throw in PHP 7.0-7.3 (https://3v4l.org/Gf4E0)\n```php\n<?php\ninterface A {\n    public function foo() : self;\n}\nclass B implements A {\n    public function foo() : self {\n        return new self();\n    }\n}\n```\nFatal error: Declaration of B::foo(): B must be compatible with A::foo(): A in /in/Gf4E0 on line 7. And to compare, the following code can be executed without any runtime errors or Phan issues:\n```php\n<?php\ninterface A {\n    public function foo() : self;\n}\nabstract class B implements A {\n    public function foo() : A {  // Because the overridden method's self is A\n        return new self();\n    }\n}\n```. Parameter type widening is described in https://wiki.php.net/rfc/parameter-no-type-variance#future_scope\nIt has similar limitations - it handles some subtype casts but does not try to support class hierarchies.. > I am no computer scientist, but that seems safe. Is this something, that is also disallowed in other (stricter) languages?\nIt's safe to do from a theoretical standpoint. It just required a lot of work, and to eagerly invoke the PHP autoloader instead of lazily autoloader, which may itself cause issues. You want a return type of @return static in phpdoc, probably. There are other tools you may also wish to look into for backwards compatibility. Those include php7cc and php7mar, one of which is no longer maintained but still useful.\nAn example Phan config for detecting potential incompatibilities between php 5 and 7 is https://github.com/phan/phan/wiki/Incrementally-Strengthening-Analysis#just-backward-compatibility\nNote that Phan focuses mainly on static analysis, not on backwards compatibility checks, so it won't catch everything. E.g. there's no option to warn about the use of scalar types or return types yet (won't work in php 5 for int, for example), but it's possible to write a plugin, etc to do that . See https://github.com/phan/phan/wiki/Writing-Plugins-for-Phan for notes about writing plugins, that should work for string, ??, Etc.\n. Alternately, you could use a third party software repository to install PHP to an alternate directory, and run syntax checks and unit tests with both installation (or build php from source and use FPM to create your own packages if possible). Possibly related to https://github.com/phan/phan/issues/254 . The same workaround may need to be applied to variables (will need to check if this is specific to globals)\nWorkarounds until this is fixed include:\n\n@phan-file-suppress in a comment\nManually using offsetSet and offsetGet. It looks like your issue is probably because you're using $app in the global scope - Another file might be assigning to $app or a property of $app before you can manipulate it in this file.\n\nOptions:\n\n(Recommended) - Use the globals_type_map setting. See https://github.com/phan/phan/blob/1.0.0/.phan/config.php#L242-L245\n\nIn your case, it would be 'globals_type_map' => ['app' => '\\MyClass'],\n2. Make sure that the folder/file which declares this is evaluated first (e.g. first in directory_list and first alphabetically in that folder). I'm not sure if this is practical.\n3. Use https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks (E.g. a string literal with @phan-var)\n\nI'm unable to reproduce the issue you mentioned in Phan 1.0.0 with the following single-file project and default settings, whether or not it was in a closure\n```php\n<?php\nclass MyClass implements ArrayAccess {\n    public function offsetExists($offset) { / ... / }\n    public function offsetGet($offset) { / ... / }\n    public function offsetSet($offset, $value) { / ... / }\n    public function offsetUnset($offset) { / ... / }\n}\n//call_user_func(function() {\n$myInstance = new MyClass();\n// phan knows $myInstance is of type MyClass\n$myInstance['some.key'] = 'some value';\necho $myInstance->offsetExists('some.key');\necho $myInstance;\n//});\n```\nObserved output made sense:\nsrc/misc.php:4 PhanTypeMissingReturn Method \\MyClass::offsetExists is declared to return bool but has no return value\nsrc/misc.php:5 PhanTypeMissingReturn Method \\MyClass::offsetGet is declared to return mixed but has no return value\nsrc/misc.php:16 PhanTypeSuspiciousEcho Suspicious argument bool for an echo/print statement\nsrc/misc.php:17 PhanTypeSuspiciousEcho Suspicious argument \\MyClass for an echo/print statement. Phan has something similar to what you mentioned with --strict (Config settings strict_param_checking, and other settings starting with strict_) - E.g. that would enable issues such as PhanPossiblyNullTypeReturn. However, the specific use case you're referring to hasn't been implemented yet - It was only implemented for type checking parameters, return statements, and property assignments\n\nWhen it gets implemented, warnings about self::$thing->do(); would probably have a name similar to PhanPossiblyNonClassMethodCall. It's doing this deliberately right now, because Phan isn't tracking column numbers.\n\nIt's possible for Phan to track column numbers using its polyfill parser, which does have the column number information available. That would require a large number of small changes to pass along the column number, and to report the column number for every emitted issue.\nImplementing this may end up making the language server a lot slower.\nPhan uses https://github.com/nikic/php-ast , which uses PHP's internal representation of that AST.\n\nThe internal AST has line numbers but not column numbers. See https://bugs.php.net/bug.php?id=70024 . You need to add any newly used third party code to your parsed directory_list.\n\nSee the example in https://github.com/phan/phan/wiki/Getting-Started#creating-a-config-file\nIf you did add it but that didn't work, the file may have a parse error or a different name or different folder\nYou also have to composer install to create vendor beforehand.\nI can't tell you more without seeing the project, but one of those suggestions should fix that.. This can be done in NegatedConditionVisitor.php.\nConditionVisitor.php can also limit types to scalars where is_numeric can be true (string,int,float). > This is most likely related to @param spanning over several lines in https://github.com/doctrine/doctrine2/blob/2.6/lib/Doctrine/ORM/Query/Expr.php\nIt is. Phan expects param/property/return/var/property/etc annotations to use a single line. It parses that annotation as just @param \\Doctrine\\ORM\\Query\\Expr\\Comparison, without a parseable param name, which Phan then treats as the annotation for whatever the first parameter happens to be.\nStubs are one method you can use to work around the issues you are seeing. See https://github.com/phan/phan/wiki/How-To-Use-Stubs#stubs (Exclude Expr.php and add a stub that's the same as Expr.php but with annotations phan can parse). Thanks!. For the original issue: this may be made less common by having Phan scan for assignments in binary operations such as *, ===, etc. in ConditionVisitor and NegatedConditionVisitor. I haven't seen this happen recently. See https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks and https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#invalid - this limitations. And workarounds are documented there.. Fixed by https://github.com/phan/phan/pull/1934. Hi, it already exists.\nThe Phan daemon is a completely different protocol from LSP. The Phan daemon and client predate the language server implementation.\nThe option you are looking for is --language-server-on-stdin. See TysonAndre/lsp-phan or vscode-php-phan for examples. Note that you may run into issues with buffering stdin/stdout on Windows with Phan (tcp works on Windows). Also see php7cc/php7mar for more comprehensive php5 backwards compatibility checks (based on syntax, not on type checking). > It seems like its changing $obj from mixed to ?mixed because nothing is being created in the else statement?\nBasically. Supporting \"possibly undefined\" types is still in progress, but planned.\nThere were no definitions of $obj in the global scope prior to that, so it infers that it's undefined in the else, and that's the result.\n\nThe implementation currently used predates undefined variables, so it does the next-best thing (nullable/possibly null)\n\nPhan currently supports just possibly undefined offsets of array shapes, not possibly undefined variables.\nAdditionally, Phan does not have any checks if calls to user-defined functions/methods will unconditionally throw or exit (but those are planned). It just supports analysis of what branches can proceed (to the end of if/elseif/else) based on statements such as return/throw/break/continue/exit .../die .../trigger_error(depends on error code)\n\nAlso if you remove the @return mixed it does not report an issue.\n\nThis is a side effect of differences in how Phan treats the empty union type and the union type of mixed - The nullable version of the empty union type is currently the empty type. @remicollet  - Is there anything else that needs to be done before the next Phar is created?\nls vendor/*/* suggests that all composer dependencies now have LICENSE/LICENSE.txt. Phan 1.0.4 was released - The included Phar files include the LICENSEs that were mentioned.\nhttps://marketplace.visualstudio.com/items?itemName=TysonAndre.php-phan was updated to use Phan 1.0.4. That sounds right, but before that commit the behavior would have been dependent on ini settings for zend.assertions\n\nWorkarounds include adding that file to exclude_file_regex or exclude_file_list.\n\nA solution would involve catching this exception (maybe change to a new exception type) and creating a vaguer base type when it is seen (e.g. array)\nAdditionally, Phan could make this limit configurable (for increasing the limit). > A solution would involve catching this exception (maybe change to a new exception type) and creating a vaguer base type when it is seen (e.g. array)\nI went with that solution. Other issues that don't have tests yet (updated 2019-01-07)\nFailed to find text for PhanConstantAccessSignatureMismatchInternal\nFailed to find text for PhanParamSignaturePHPDocMismatchParamIsReference\nFailed to find text for PhanParamSignatureRealMismatchHasNoParamTypeInternal\nFailed to find text for PhanParamSignatureRealMismatchHasParamTypeInternal\nFailed to find text for PhanParamSignatureRealMismatchParamIsNotReferenceInternal\nFailed to find text for PhanParamSignatureRealMismatchParamIsReferenceInternal\nFailed to find text for PhanParamSignatureRealMismatchParamNotVariadic\nFailed to find text for PhanParamSignatureRealMismatchParamNotVariadicInternal\nFailed to find text for PhanParamSignatureRealMismatchParamTypeInternal\nFailed to find text for PhanParamSignatureRealMismatchParamVariadicInternal\nFailed to find text for PhanParamSignatureRealMismatchReturnTypeInternal\nFailed to find text for PhanParamSignatureRealMismatchTooFewParametersInternal\nFailed to find text for PhanParamSignatureRealMismatchTooManyRequiredParametersInternal\nFailed to find text for PhanIncompatibleCompositionMethod\nFailed to find text for PhanTypeExpectedObject (maybe impossible now that more specific issue types exist)\nFailed to find text for PhanVariableUseClause (impossible?)\nFailed to find text for PhanGenericGlobalVariable (not emitted yet). tests/php70_files/expected/006_iterable.php.expected\n1:%s:3 PhanCompatibleIterableTypePHP70 Return type 'iterable' means a Traversable/array value starting in PHP 7.1. In PHP 7.0, iterable refers to a class/interface with the name 'iterable'\n2:%s:6 PhanCompatibleIterableTypePHP70 Return type 'iterable' means a Traversable/array value starting in PHP 7.1. In PHP 7.0, iterable refers to a class/interface with the name 'iterable'\nKeep in mind that some of the PhanCompatible issues are mentioned in tests/php70_files already.\n\nand internal/update_wiki_issue_types.php should also start checking those (and other tests/**/expected directories). I'm able to reproduce this, and I double-checked that the program works as expected below\n\n```php\n<?php\ntrait T {\n    public static function f() {\n        echo \"In class T\\n\";\n    }\n}\ntrait U {\n    use T;\n    public static function f() {\n        echo \"In class U\\n\";\n    }\n}\nclass X {\n    use U { f as g; }\n    public static function f() { self::g(); }\n}\nX::f();  // echoes \"In class U\"\n```. Missed that one when looking at the rules; I probably won't reimplement that. Thanks!. Fixed by #1976\nThe two below methods should warn - array is a return type that is incompatible with static/$this\nAlso, PhanUnextractableAnnotationPart is emitted for setItems\n* @method array addItem(ScalarType $item)\n * @method array setItems(ScalarType[] $item)\n. Phan doesn't support switches on type or class (or even value) right now - it's possible to add, I forget if tickets exist\nEDIT: I wonder if it's possible to create a MetaVariable subclass just for ConditionVisitor, and make comparisons on that remove real types from those (e.g. get_class($x) is a metavariable, changes to that affect $x). There may be better approaches. This is something that I had planned, along with making --allow-fallback-parser the default.\nTwo things are in the way:\n\nThe way that doc comments of elements are added is different, meaning right now, the analysis results differ in edge cases. (E.g. fallback missing an @param annotation.) This is fixable.\nPerformance of the fallback - this can be motivated by serializing ASTs on disk (fallback only, and further optimized by using igbinary or another binary serializer.. On second thought, this should be fine, the error/warning messages are clear enough right now. https://developer.github.com/v3/repos/releases/#create-a-release will make creating a release less time consuming in the future (1 script to create and commit a tag that removes unneeded assets, another script using that API to upload the tag, create a release based on that tag, and upload the corresponding phar assets). The extra files were removed from the Phan 1.0.5 release tag. I'll try to switch to .gitattributes for 1.0.6, wasn't sure how it worked (so it's the client downloading zips/tarballs that have the files excluded?)\n\nA large part of the issue relative to other projects is that many of these files would cause static analyzers (older versions of Phan, and anything that assumes typical or valid code) to crash, because they're regression tests for crashes in Phan.\n. 1.0.6 is out - The zip and tarball both look good, and exclude those files.\nThe 1.0.6 git tag onwards is now back to being unmodified.. I think it's an issue with the class db or its ancestors, which you haven't included the source of.\nMaybe it uses class in a phpdoc annotation such as @inherits\nAlso, what Phan version are you referring to?. Thanks!. https://github.com/phan/phan/blob/master/src/Phan/Language/Internal/PropertyMap.php is what needs to be changed - it augments the information from reflection. I remember running into this same issue months ago. If you check if $node instanceof DomElement, Phan will correctly infer that tagName exists.\nA DomElement is a subclass of DomNode with a tagName. https://secure.php.net/manual/en/class.domelement.php#domelement.synopsis\nAnother subclass of DOMNode is DOMText. This does not have a tagName.\n```\nphp > error_reporting(E_ALL);\nphp > $n = new DOMText('example content');\nphp > var_export($n instanceof DOMNode);\ntrue\nphp > echo $n->tagName;\nNotice: Undefined property: DOMText::$tagName in php shell code on line 1\nphp > echo $n->nodeName;\ntext\n``. I agree,selfshould becomeMyClass` when calling the method MyClass inherits and any aliases\n\n@return self should get treated the same way (@return static should refer to the subclass of MyClass)\nUnrelated: Phan should also warn about real and PHPDoc return types of traits (@return T, someMethod(): T)\n\nhttps://3v4l.org/RdiQA\n```php\n<?php\nclass C1 {\n    use T;\n}\nclass C2 {\n    use T;\n}\ntrait T {\n    public function getC1() : self\n    {\n        return new C1();\n    }\npublic function getC2() : self\n{\n    return new C2();  // This is a fatal error when called on an instance of C1\n}\n\npublic function getC1AsT() : T\n{\n    // You can't have instances of traits. You can have instances of classes using traits.\n    return new C1();  // A return type of T is something Phan should warn about - This return statement would trigger : Uncaught TypeError: Return value of C1::getC1AsT() must be an instance of T, instance of C1 returned in /path/to/phan/trait_binding.php:lineno\n}\n\n}\n$c1 = new C1();\nvar_export($c1->getC1());\nvar_export($c1->getC2());\n```. I agree that it should be added. I was having some problems with type_regex the last time I tried supporting this.. Or it may have broken in an earlier refactoring. Thanks!. Your issue may be that you're using a duplicate class name - Phan will tend to only use the method definitions from the first definition, and may be using the definition from another class. If you do have duplicate classes in your project, we generally recommend to exclude all but one of the files in question.\nWhat's the actual issue you're seeing (what file, what class)\n\nIf you can give a standalone file reproducing the issue that's mentioned, that would help\n\nAnalyzing your file from https://3v4l.org/VKv5O in a standalone project does not result in any issues being emitted. > would be nice if the parser could parse the require/include and determine which definition to use.\nThat would require a lot of changes to Phan's code for an uncommon use case, so I don't expect it to be implemented (Classes are fetched in a lot of places)\n. This is working as intended.\nPhan allows phpdoc to be made more specific than what the real type is - (MyClass instead of nothing, MySubclass instead of MyClass, or string instead of ?string, or string instead of string|null).\n\nThe more specific phpdoc will be used when analyzing calls to those functions/methods\n\nExample use case:\n\nThe base class's signature forces you to accept null, but you want to deliberately indicate that a the current subclass doesn't want null when it's used, so you can write @param string $shortcut\n\nI forget if there's a way to warn about the default being incompatible with the phpdoc type.\nChanging to @param string|null or @param ?string is recommended. ?string isn't part of the standard for PHPDoc, and may or may not be accepted by other tools (e.g. phpDocumentor). I really should redesign parts of this to be a completely accurate version of a definition-use graph instead of a mostly accurate version if I want to fix every edge case for do-while.\n\nAlso known as a use-define chain : https://en.wikipedia.org/wiki/Use-define_chain\nAs part of this change, this should also treat break as going to a different node than continue\nSome statements are not Nodes, will need to handle this (e.g. Node). Creating empty ast\\Node to mark blocks in the def-use graph is one way to do that.\nWill need to refactor this to track definitions in a more generic way. (just check if it's possible to have any definition outside of a block of code instead of the current approach of tracking the specific definitions. The current approach does not work well with loops).\n\nIt'd also help in the long run if I wrote tools to represent a tool to convert the resulting definitions and usages generated by this plugin to a graph (e.g. dot file https://www.graphviz.org/doc/info/lang.html) for internal usages\n\nThis graph be used when debugging with graphviz as a visualizer; unit tests can verify that the resulting graphs are accurate and avoid regressions when fixing any other issues\nIf there are 3 ast\\Nodes on line 7, then label the first one L7N1, the second one L7N2, etc (Some nodes will have the same column and we don't track the column).\n\nhttps://github.com/phan/phan/blob/master/src/Phan/Plugin/Internal/VariableTrackerPlugin.php\nhttps://github.com/phan/phan/tree/master/src/Phan/Plugin/Internal/VariableTracker. This happens whether or not simplify_ast is enabled.\nThe recommended workaround is suppressing it, e.g. https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-suppress-next-line. The easier way in the short-term would be to analyze the while loop similarly to a do-while loop (but analyze the condition last)\nThis will remove the false positives and add false negatives.\nThen file a difficult issue to refactor this according to https://github.com/phan/phan/issues/2026#issuecomment-426836726. Duplicate of https://github.com/phan/phan/issues/1812 , it will be fixed when I have time. Suppressing the issue is recommended until then.. Thanks!. See https://github.com/phan/phan/pull/2077#issuecomment-431825240\nThat's probably because you're still using Phan 0.12.x (or ~1.0.0). Check your composer.json. Upgrade to Phan 1.1.0 or newer and you'll be able to use ast 1.0.0.\n. (Did you mean class \\Mosquitto\\Client or class \\Swoole\\Client or class \\Swoole\\Coroutine\\Client or class \\Swoole\\Coroutine\\Http\\Client or class \\Swoole\\Coroutine\\Http2\\Client or class \\Swoole\\Http\\Client or class \\http\\Client) was added because of the additional classes in the modules you've installed.\nUsing class names that won't have conflicts in different namespaces is one way to fix this.\nAdditionally, because the global namespace has many more class names (of each allowed string length for a substitute), Phan gave up on checking for selections of certain lengths because of suggestion_check_limit (https://github.com/phan/phan/wiki/Phan-Config-Settings#suggestion_check_limit).\nRaising that limit in tests is one way to avoid this.\n. @remicollet - do you have a link to the steps you used to set up that PHP binary?\nAlso, tests/run_all_tests may reveal more issues. The reported warnings were fixed. Followup issues can be filed if any other issues are seen.. Duplicate of #709. Best idea for a mitigation:\nIf at least one the below conditions hold for the alternate signatures which would accept the given number of arguments, then continue to warn. If neither condition holds, then don't warn.\n\nIf for all of the alternate signatures, one or more arguments can't cast to the expected parameter union type, or\nif for at least one of the alternate signatures, both of the arguments can cast to the swapped parameter (e.g. strtr($dynamicArray, 'literal') was called). Thanks!\n\n. Thanks!. Fixed by https://github.com/phan/phan/pull/2070. Closing in favor of #2067 - The test case included in the original issue was sufficient. 1. What docker config file are you using?\n2. What phan config are you using - What source path and target path\n3. What ssh client are you using?\n4. What Phan version are you using?\n. Thoughts on what it could be if it isn't ssh:\n\nan issue with the installed PHP module's reflection info crashing when being fetched https://github.com/phan/phan/issues/889 or https://github.com/phan/phan/issues/888\nan issue with Docker (doubt it for file system access that should just be reading files/folders)\nsomething crashing when \\r is emitted for the progress bar - does the same issue happen without the progress bar?\nan issue with the php-ast module in the alpine repos, if it crashes in the start of the parse phase\n\nWhat happens if you install valgrind in the VM and run USE_ZEND_ALLOC=1 valgrindwhich phpphan_command where phan_command is the command that was previously used?\n. Other thoughts:\n\nIt could be specific to the host OS (e.g. windows/mac) in combination with file access (e.g. stat)\nIt could be specific to a docker storage driver, but I doubt that.\nIt could be a file permissions issue - file_get_contents() is standard, but Phan also calls stat(), so maybe it's that.\nRunning phan in gdb (gdb -args PHAN_COMMAND_AND_ARGS) might reveal what part of the php interpreter crashed\n\nPossibly related to #2381 . > Just for the record, I'm getting errors with ast 1.0.0. E.g.\n\nError: Undefined constant 'ast\\AST_COALESCE' in src/Phan/Analysis.php:185\n\nThat's because you're still using Phan 0.12.x. Upgrade to Phan 1.1.0 and you'll be able to use ast 1.0.0.\nhttps://github.com/sanmai/pipeline/blob/53574da5fc02cba98ab6bf29c764d4bd2260eb3d/composer.json#L21. See https://github.com/phan/phan/releases\nMerging https://github.com/phan/phan/pull/2080 instead. Phan 0.12-1.0.x had require.\nPhan 1.1+ had suggest in composer.json. It's possible to adopt semantic versioning, but in practice, this would make almost every single Phan have a patch version of 0, which doesn't convey much meaning. Pinning exact versions in composer.lock (or phive), or using a separate installation folder, is typically what I do.\nPR https://github.com/phan/phan/pull/1875#issue-206830216 had the most recent description posted about how versioning is done for Phan.\n\nThoughts on plans for versioning:\n\nMajor backwards incompatible changes to Phan's internals or usage (e.g. dropping support for PHP 7.0, dropping major functionality) will be major version increments. Previously, this went from 0.x to 0.(x+n).\nSignificant new features can be added in a minor version release. (e.g. significant changes to analysis, CLI, configuration, APIs, plugins, etc.) \nBug fixes and minor new features  (e.g. significant changes to analysis, CLI, configuration, APIs, plugins, etc.) will be added in patch versions.\nNew issue types are frequently added (if those were all minor releases, there would practically never be a patch release)\nE.g. support for function signatures target_php_version 7.3 can be added in a patch release.\nThere may be simultaneous major version release lines in the future (1.x.y and 2.a.b), but not simultaneous minor version releases (e.g. not 1.0.u and 1.1.z).\n\nAn example reason for having simultaneous release lines : keep support for php 7.0 in 1.x.y, but develop 2.a.b with PHP 7.1's features and composer dependencies (and backport PHP 7.0 support to Phan 1 with a solution similar to Transphpile)\nSecurity support for PHP 7.0 ends in December 2018, but it's likely that this will still be used on PHP 7.0 codebases (e.g. by developers working on upgrading PHP, legacy code, etc)\n\n\n\nhttps://github.com/phan/phan/issues/488#issuecomment-274839399 is related discussion, but that predates the above comment by months.. Another approach to avoid unexpected changes may be an issues_from_phan_version: \"1.1.1\", which, if set, will automatically suppress issues if they were introduced in a Phan version which was > 1.1.1 (e.g. 1.2.0, 1.1.2). That would require tracking the @since <version> for Phan issue types.\nI don't think it'd be widely used.\nAlso, if we improve analysis of array_map, closures, loops, built-in function signatures, etc., a few new issues would still be emitted if Phan was upgraded (but much less than otherwise).. > Maybe a better way to avoid the .0 problem would be to release new analyzers in \"beta\" (disabled by default) with patch versions, and periodically release a minor version that enables all beta analyzers. That keeps the release cycle short without introducing breaking changes at a patch level.\nI'm not sure if a majority of static analyzers would have a release process similar to what you're proposing, with respect to disabling new issues by default in patch versions. Strict semver seems like a poor fit for a project where most changes (and open GitHub issues) are new minor features (and when most crashes have already been fixed).\n\nhttp://pylint.pycqa.org/en/latest/whatsnew/changelog.html seems worth mentioning because it's closer to semver - new issue types are added in new minor versions of 0.x, bug fixes/crash fixes are added in rarer patch versions.\n\nAlso, instead of having a few issues to fix each month, that would be 3/6 times as many issues for a team to fix every 3/6 months, depending \n\nMaking the documentation of what versions mean readily available is definitely something that should be improved.\n\nAgain, I'd recommend clients running Phan in CI/in teams continue pinning the Phan version used through the mechanisms mentioned earlier (and periodically update it manually to address new issues with fixes or suppressions). On the note on semver as a whole, there's also a question of what semver should apply to in terms of the \"public API\", which https://github.com/phan/phan/issues/2082#issuecomment-431892239 mentioned:\n\nCLI/Config options\nAPIs exposed to third-party plugins, language servers, etc.\nThe list of issues that can be emitted (discussed above)\nA combination of the above. One option is to use finalize() in a plugin. But that doesn't work with multiple processes.\n\nI really should have an explicit afterParse() function (for this and other reasons) to call after method analysis but before forking. That's easy to implement. You could hook into analyzeClass if you assume there's at least one class in the analysis file list and only do that the first time, but that's not ideal for cases when 0 classes are possible\nAnother thought would be to have a way to dump all class/method/function information, signatures, etc (And another option for dumping references tracked by dead code detection, the FQSEN, file, and line the references were within, etc.\n```\nin src/Phan/PluginV2.php\n\n\n\npublic function finalize(CodeBase $code_base)\n\n\nCalled after the analysis phase is complete.\n(implement \\Phan\\PluginV2\\FinalizeProcessCapability)\n``. Or you could add the code back and add an option inphan --extended-help`. I'd recommend it as a plugin over CLI setting, since it can only be used with one format (e.g. .phan/plugins or a separate repo).\n\nPlugin::__construct() is called at almost the same time afterParse() would be, but I feel like that's an implementation detail that shouldn't be relied on.. The original question was answered with some suggestions, closing this.\nBeforeAnalyzeCapability was added (See tool/phoogle for something similar - Third party scripts might get this information from environment variables instead of CLI options)\nThis can be reopened if any other issues or enhancements are thought of. https://github.com/phan/phan/pull/2197 (tool/dump_markdown_preview) is also related - It looks like you might need to do that in finalizeProcess instead if using visitClass, because visitClass is called after BeforeAnalyzeCapability.\n\nAn alternative implementation might be to use the CodeBase getters to read the class list inside of beforeAnalyze(), check for classes that are excluded from analysis, etc.. Thanks!. Possibly related to https://bugs.php.net/bug.php?id=66773 - I'm doing most of my testing with opcache enabled. What does php -m say?\nIt could also be related to the use of a Phar file.\nDoes it happen in php 7.1 or newer?. https://github.com/sebastianbergmann/phpunit/issues?q=is%3Aissue+%22the+name+is+already+in+use%22+is%3Aclosed seems to be related.\nWhich php 7.0 version are you using? Can you still reproduce in 7.0.13+?. This doesn't occur in 7.0.27 for me (in the Phars built for Phan 1.1.0 or 1.1.1). I don't plan to update composer.json. Maybe emit a warning on startup for 7.0.0-7.0.10, but this is the first time this has been reported, so it probably isn't common.\n\n7.0.10 is almost 2 years old, so I don't expect it to be installed on many machines or CI setups that have Phan 1.1.x (hopefully)\nChanging composer.json would break CI setups, etc. that didn't hit this bug because they enabled opcache.\n\nI also checked the composer.json of phpunit 6 - They also have a regular >= 7.0 constraint for the PHP version.. See https://github.com/phan/phan/wiki/Frequently-Asked-Questions#phan-says-that-an-internal-class-constant-or-function-eg-xdebug_is_enabled-soap-memcached-etc-is-undeclared\nhttps://github.com/phan/phan/wiki/How-To-Use-Stubs#internal-stubs\n\nThe motivation for that is to (1) catch accidentally using elements that are from internal stubs that you aren't using in your php installation, (2) The way the extensions/modules are configured differ between PHP versions and configuration flags used to build those extensions (in addition to whatever version number that extension has, for PECL extensions)\n\n\nAlternately, installing and enabling gd locally is another approach you can take. Thanks, I'm also able to reproduce this.\nI refactored Phan\\Language\\Scope recently to optimize checks if something was in a class scope, in a global scope, etc.\nIt's most likely a bug in that check (it thinks that it isn't in the global scope somehow, which causes it to warn). I should have a fix by tomorrow.. Never mind, it's probably that getVariableStrict doesn't work for regular hardcoded globals that Phan is aware of. So that should be fixed, somehow (e.g. return an unreferenced clone of the hardcoded global/superglobal if it's in the list of globals/superglobals) \n// in src/Phan/Plugin/Internal/MiscParamPlugin.php , which overrides Phan's analysis of array_shift\n        /**\n         * @param Node|int|string|float|null $node\n         * @return ?Variable the variable\n         */\n        $get_variable = function (\n            CodeBase $code_base,\n            Context $context,\n            $node\n        ) {\n            if (!$node instanceof Node) {\n                return null;\n            }\n            try {\n                return (new ContextNode(\n                    $code_base,\n                    $context,\n                    $node\n                ))->getVariableStrict();\n            } catch (IssueException $exception) {\n                Issue::maybeEmitInstance(\n                    $code_base,\n                    $context,\n                    $exception->getIssueInstance()\n                );\n                return null;\n            } catch (NodeException $_) {\n                return null;\n            }\n        };. We probably just have to change visitDefine in the analyzer to use ContextNode->getEquivalentPHPScalarValue instead of expecting a string for the name.\nEDIT: that's in ParseVisitor->visitCall. My current thoughts would be to support these checks with global functions and static method invocations (i.e. anything that can be inferred without knowing variable types and added to a more precise BlockExitStatusChecker)\n. opcache_get_status() looks good (it can return false for reasons outside of the caller's control, e.g. opcache failing to setup properly), getopt() is deliberately excluding false.)\nIn general, when deciding when to include return types into Phan's version of the signature map,\n\nReturn types are included in the union type if they can be returned because of valid param types (E.g. network functions can return false due to network unavailability, etc.)\nA lot of functions will return false for invalid argument types, and it'd add more drawbacks in false positives (With phan --strict-types) and bugs that weren't detected (e.g. passing getopt(...) to a function expecting a boolean, without --strict-types), than it would in terms of benefits.\n\nThis may change in a future release of Phan (e.g. if it detected redundant/impossible conditions), but the signature maps might take a different form if that happened, anyway.\n- I'm not sure what happens when apache/fpm/other SAPIs call getopt(), but don't think that's something to focus on in the majority of php projects\nThe argument to getopt is within the caller's control, and phan already warns about invalid arguments\n```\n<?php\nvar_export(getopt('a:::'));\nvar_export(getopt(null));\nvar_export(getopt(new stdClass()));\n```\n```\n<?php\nvar_export(getopt('a:::'));\nvar_export(getopt(null));\nvar_export(getopt(new stdClass()));\n```. > I don't know why it returns false for invalid arguments.\nThat's what a lot of PHP APIs do and doesn't matter for this issue - stripos, array_keys on non-array, etc. return false\n(args = zend_hash_find_ex_ind(Z_ARRVAL_P(&PG(http_globals)[TRACK_VARS_SERVER]), ZSTR_KNOWN(ZEND_STR_ARGV), 1)) != NULL || - PG(http_globals) is something that can't be modified by PHP code. The fallback to $_SERVER['argv'] is just so that it can do something for other SAPIs that don't have argv for whatever reason (e.g. embedded in other applications as a scripted language)\nphp\n<?php\n// test.php\nunset ($_SERVER['argv']);\nunset($argv);\nvar_export(getopt('a'));\nphp test.php -a\narray (\n  'a' => false,\n)\n\nI'm not sure what happens when apache/fpm/other SAPIs call getopt(), but don't think that's something to focus on in the majority of php projects\n\nand that it shouldn't be changed without a good reason to change it.. I'm able to reproduce this.\nThis may be related to changes in Phan that would resolve constant declarations lazily instead of immediately.\n\n\nThat was done because define() is parsed and added in the parse phase. As a result, some values might refer to classes/constants that were from files that weren't loaded yet.\n\n\nA constant that is define()d in one file might be used in files that will be parsed later on, which is why this is often needed.\n\nPhan doesn't track variable types in the parse phase. (It does that in only the last phase (analysis)).\nAvoiding emitting PhanUndeclaredVariable, etc. in the parse phase is one way to better handle this edge case (and inferring the empty union type or mixed).. Related to https://github.com/phan/phan/issues/1629. 1. Replace 'C:/my/project/dir//src', with a relative dir (e.g. 'src'),. Also, I think that may need to be 'C:\\my\\project\\dir\\src', but I recommend against absolute paths anyway\n\nWhat's the full error output (e.g. do you have a screenshot?)\n. Okay, it could be issues with any of the following:\n\n\nSomething is preventing php from forking processes or creating the temporary file. Or maybe the temporary file is an invalid config. See C:\\Users\\Marcelloh\\AppData\\Local\\Temp\\AC5D.tmp\n\nA bug in composer/xdebug-handler - Have you updated xdebug-handler to the latest version (1.3.0) of https://packagist.org/packages/composer/xdebug-handler (check composer.lock)\nA bug in the way Phan is using composer/xdebug-handler.\n\nI don't see this error on my laptop (linux)\n\u00bb php -d zend_extension=xdebug.so ../phan/phan           \n[info] Disabling xdebug: Phan is around five times as slow when xdebug is enabled (xdebug only makes sense when debugging Phan itself)\n[info] To run Phan with xdebug, set the environment variable PHAN_ALLOW_XDEBUG to 1.\n[info] To disable this warning, set the environment variable PHAN_DISABLE_XDEBUG_WARN to 1.\n[info] To include function signatures of xdebug, see .phan/internal_stubs/xdebug.phan_php\n[debug] Checking PHAN_ALLOW_XDEBUG\n[debug] The xdebug extension is loaded (2.6.1)\n[debug] Process restarting (PHAN_ALLOW_XDEBUG=internal|2.6.1|0|*|*)\n[debug] Running '/path/to/php-7.0.27-fast-nts-install/bin/php' '-n' '-c' '/tmp/HE3P5U' '../phan/phan'\nsrc/possiblyinvalidstatic.php:11 PhanNonClassMethodCall Call to method someMethod on non-class type ?string\n[debug] Restarted process exited 1. > When I change the dirctory list into '...\\mydir\\src'\nI asked about changing it to a relative directory, not an absolute directory.\n\nthose files are removed after the command is run, so I can't check\n\nYou can temporarily modify the files in your local copy of vendor/composer/xdebug-handler/src/XdebugHandler.php to remove the unlink. Remove and reinstall it or restore the original line for testing.\n// vendor/composer/xdebug-handler/src/XdebugHandler.php\n265:            @unlink($this->tmpIni);\nAlso, are you running any custom terminals, CI tools that aggregate linters, etc.? I'm not able to figure out what's causing the has occured spelling (Or is that your own wrapper script that emits that message?). Also, does Phan work if you disable xdebug (disable lines with something similar to extension=php_xdebug.dll? The output of php --ini will tell you where the config files are. It's warning you about the inline HTML being an unreachable statement. (the below snippet)\nPhan uses php-ast, which deliberately doesn't distinguish between echo 'foo'; and ?>foo<?php\nphp\n?>\n      <?php\nAlso, consider this alternative example:\nPhan will correctly warn about the line with <strong> being unreachable.\nphp\n    <?php foreach ($data[\"lastProducts\"]['products'] as $item) : ?>\n      <?php if (empty($item[\"link\"]) || empty($item[\"product_title\"])) : ?>\n        <?php continue; ?>\n        <strong>Some code we really want to show the browser</strong><!-- sadly, this is unreachable-->\n      <?php endif; ?>\n. Additionally, whitespace can be important in various cases:\n\nIn <pre>\nHaving no whitespace vs some whitespace before <span>, etc will shift the html element\nWhen generating text documents instead of HTML with PHP. > The @internal tag is used to denote that associated Structural Elements are elements internal to this application or library. It may also be used inside a long description to insert a piece of text that is only applicable for the developers of this software.\nThe @internal tag can be used as counterpart of the @api tag, indicating that the associated Structural Elements are used purely for the internal workings of this piece of software.\n\n\n\nPhan treats this as the former definition, all of the time. The phpdoc spec doesn't provide a way to distinguish between that and a hidden piece of text.\nhttp://docs.phpdoc.org/references/phpdoc/tags/internal.html\nFor some reason, the phpseclib lib marked this as @internal - https://github.com/phpseclib/phpseclib/blob/bee5fd70d8a60e76ad1ed3e27d7b0a9a8c54f7e5/phpseclib/Net/SFTP.php#L1942-L1946 (* @internal ASCII mode for SFTPv4/5/6 can be supported by adding a new function - \\phpseclib\\Net\\SFTP::setMode().)\nPossible workarounds:\n\nThey could put a comment inside of the method implementation instead.\nYou could suppress this\n\nUnrelated: This should be interpreted as \"ought not to access internal method.... (This is intended for the internal workings of that library. I think this may have been why I left this signature as is. I forgot about this limitation.\nSee src/Phan/Plugin/Internal/DependentReturnTypeOverridePlugin.php - It has a custom callback to handle this: 168:            'var_export'                  => $string_if_2_true,\nSee https://github.com/phan/phan/commit/e2a64ef521e17b9cfc349eb5d885dcd60b9423cb and https://github.com/phan/phan/commits/f670495bfde82df957e35098bd3fb1c57e9216b5. Could you link to an example project and how to manually run the Phan codeclimate docker plugin on that projects?\nf2ffee62769d40639a599b06af34bec36e6a82a3 was added to use the directory list from the Phan config in 0.10. Previously, it was using a list provided by codeclimate, if I remember correctly. This change was tested, but maybe the environment was wrong).\nf2ffee62769d40639a599b06af34bec36e6a82a3 may also be of interest  - you may want to document force-codeclimate-filelist or try it, which was added before 1.1.2. I didn't know who to contact.\nIf that option is enabled, that might restore the old behavior in those projects.\nMaybe it's an issue with the working directory. I'm not sure.\n```\ncommit f2ffee62769d40639a599b06af34bec36e6a82a3\nAuthor: Tyson Andre tysonandre775@hotmail.com\nDate:   Sat Jan 20 14:58:42 2018 -0800\nFix bugs in codeclimate plugin.\n\nIf a project already has a phan config\n(i.e. /code/.phan/config.php exists in the dockerfile),\nthen prefer to get the list of files to analyze from that config file.\n\n- `force-codeclimate-filelist: true` in the phan config section of\n  .codeclimate.yml can be used to imitate the old value.\n\nCheck the **value** of configs instead of simply checking if `isset`.\n\nFor #1342\n\n```. I think I may have found the issue - It was unintentionally looking for files in /usr/src/app, not /code .\nTry again with dev-master (1.2.7-dev) now that PR #2566 is merged - it's working for a small example project (emitting json issues). Thanks!. Thanks!. Thanks!. Add 'vendor/tuupola/callable-handler/src' to your directory_list in .phan/config.php. You've probably included vendor/tuupola/slim-basic-auth/src but not 'vendor/tuupola/callable-handler/src' (That's what phan --init will do right now - it doesn't analyze the project to search for transitive dependencies)\nThis is a special case of https://github.com/phan/phan/wiki/Frequently-Asked-Questions#phan-says-that-a-composer-dependency-of-my-projecta-class-constant-or-function-is-undeclared - It gets hidden because vendor is (probably) excluded from analysis. \n. Duplicate of #2163 - This is fixed on dev-master and is now in Phan 1.1.4. I see the same issue with the standalone snippet (along with other expected issues)\n```\n<?php\nclass C {\n    function test()  {\n        // Add information about the object's status\n        if (   $this->object_status_to_class\n            && isset($item[MIDCOM_NAV_OBJECT])\n            && $css_status_class = midcom::get()->metadata->get_object_classes($item[MIDCOM_NAV_OBJECT])) {\n            $classes[] = $css_status_class;\n        }\n    }\n}\n``. \nIt's because the library used by the polyfill is parsing this as($a && $c) = $d, which is unanalyzable nonsense. The library should be parsing it as$a && ($c = $d)`, which is what php-ast (i.e. not the polyfill) does. I'll file an issue for this\nA minimal way to reproduce this is with phan --force-polyfill-parser and the below script\nphp\n<?php\nif (   $a\n    && $c = $d) {\n    echo \"Fail\\n\";\n}. Thanks - This will be fixed when there's an official release for the linked issue (duplicate of issue 19 in tolerant-php-parser)\nThere are two workarounds I'd suggest\n\nInstall php-ast with the methods mentioned in https://github.com/phan/phan/wiki/Getting-Started-With-Homebrew (hopefully still up to date), or\nSuppress the issues (e.g. https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#phan-suppress-next-line). A fix for this issue is in review, in the tolerant-php-parser repo. array_combine currently just returns the type of the second array argument. I haven't gotten around to extracting key types from the values of the first argument yet (there are a lot of array functions), but it should be straightforward to do.\n\nsrc/Phan/Plugin/Internal/ArrayReturnTypeOverridePlugin.php\n381:            'array_combine'             => $get_second_array_arg,  // combines keys with values. The current approach that's recommended is to specify the files in .phan/config.php in the order that variable definitions will be used.\nIt's possible to build a graph of require/include dependencies and attempt to re-order the parsed file list based on that. I'm not sure it's a very common use case, and doing that might result in unexpected behavior for people using Phan (e.g. files loading in different orders after changing a file).\n\nThe example you linked also would conflict with --processes N - file2.php would get analyzed in one process, file1.php in another one.\n\nCurrent workarounds:\n\nglobals_type_map in .phan/config.php may help (e.g. set 'x' => 'array<string,mixed>'). Phan would stop saying it was undefined.\n@phan-suppress-next-line\n. A subset of the output is below (Changing @return to code is planned)\n\n\nPhan\\Language\\UnionType\nphp\nnamespace Phan\\Language;\nclass UnionType\nDescription:\nPhan's internal representation of union types, and methods for working with union types.\nThis representation is immutable.\nPhan represents union types as a list of unique Types\n(This was the most efficient representation, since most union types have 0, 1, or 2 unique types in practice)\nTo add/remove a type to a UnionType, you replace it with a UnionType that had that type added.\nPhan\\Language\\UnionType::__construct\nphp\npublic function __construct(array $type_list = [], bool $is_unique = null)\nPhan\\Language\\UnionType::__toString\nphp\npublic function __toString() : string\nDescription:\n@return string\nA human-readable string representation of this union\ntype\n. Thanks!. > #0 /var/www/owncloud/apps/data_exporter/vendor-bin/phan/vendor/phan/phan/src/Phan/Language/FQSEN/FullyQualifiedGlobalStructuralElement.php(217): Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement::make('\\', 'OCI-Lob', 0)\nThis crash is due to OCI-Lob being an invalid FQSEN, at least according to the regex used to parse by Phan (i.e. the oci8 extension is loaded in the runtime environment you're using to run Phan).\nI thought that OCI-Lob having a hyphen in its name was a typo in the phpdoc svn repo. That's not the case - https://github.com/php/php-src/blob/PHP-7.3.0/ext/oci8/tests/lob_026.phpt#L65-L69\n\nThe crash is in phan itself. It is not reporting to me information about something invalid in the code being analyzed???\n\nThat's because this occurred before it started parsing the project - It happens when extracting signatures from the php modules used to run Phan.\nCurrent workarounds:\n\nDowngrade to 1.1.5\n\nRun phan without oci8. That should be fixed in 1.1.7 (tested by building a different PHP module and changing a class name from that module to include a hyphen). https://bugs.php.net/bug.php?id=58319 is related. I'm not familiar with that extension, but I'm guessing that if there were progress there,\n\n\nI'd have to wait for the next major version of php (8.0) for this class name (with a hyphen) to be removed\n\nand for the next minor version for that extension (7.4.0) to include an alias such as OCI_Lob . Thanks!. The current best workaround is to set https://github.com/phan/phan/wiki/Phan-Config-Settings#ignore_undeclared_functions_with_known_signatures to false\n\nAlso see https://github.com/phan/phan/wiki/How-To-Use-Stubs for any false positives that setting ignore_undeclared_functions_with_known_signatures to true may cause.. Can you include the name/source of the file? I'm guessing it's crashing because it can't find a closure it should have parsed during the parse phase\nThere should be a line mentioning (Crashed when parsing/analyzing\n--include-analysis-file-list might be a better approach if you only want to analyze a single file. --directory . will parse everything, including tests and example files in vendor/\n. Similar issues can happen if you modify the parsed files between when they're parsed and when they're analyzed. I don't know if that's what's happened here, but it's possible.. This is doing that deliberately, for the same reason Phan emits PhanParamTooMany. Passing a closure expecting fewer parameters may cause notices/deprecation notices when called in a future version of PHP. (This has not happened yet, even in 7.3)\nI was planning to add a separate syntax to indicate that a function param would permit a closure with fewer parameters than expected (e.g. @param callable([int]) $f - No idea what syntax I'd use, probably not that)\nThe current workaround is @param callable(int)|callable() $f. I'll look into whether this is easy to add a configuration option for (affecting the casting logic of CallableDeclarationType, FunctionLikeDeclarationType, ClosureType, etc.. This is deliberate. E.g. if AObject is part of a library, then an application using this library would trigger this bug if they failed to define static::NAME.\n\nor if a static method is accessing static::SOMETHING, and that was called directly on AObject\n\nOne possible workaround is to set AObject::NAME to some default value (e.g. the empty string, null, etc.) and throwing in the constructor if the subclass fails to define the name.. >  the missing NAME is only found on runtime and not with the static analyzer.\nI had an idea for a similar issue a while ago and never got around to that: Add @phan-unimplemented, which would be the counterpart of @phan-override/@override (Name to be determined).\nThat'd require php 7.1+, due to limitations of PHP's internal AST, but is doable.\n(e.g. when analyzing classes, if they aren't abstract, loop through their properties and inherited properties and fail if any are marked as @phan-unimplemented (i.e. it was inherited without being overridden)\n```php\nabstract class AObject extends PObject {\n    /* @phan-unimplemented or some annotation indicating that subclasses of this abstract class should override the method/const/property /\n    const NAME = '';\n    public function __construct() {\n        if ( static::NAME === self::NAME ) {\n            throw new RuntimeException( static::class . ' does not define const NAME' );\n        }\n        parent::__construct( static::NAME );\n    }\n}\nclass BObject extends AObject {\n    const NAME = 'a name';\n}\n// Phan would emit a warning about AObject::NAME not being emitted. \nclass CObject extends AObject {\n}\n```. See https://github.com/phan/phan/wiki/Frequently-Asked-Questions#phan-says-that-an-internal-class-constant-or-function-eg-xdebug_is_enabled-soap-memcached-etc-is-undeclared\nPhan does not attempt to track internal constants of extensions that aren't enabled. Internal stubs are recommended instead.\nIt may be possible to in a future release, but the constant's types would have to be extracted from various sources (e.g. C source code, phpdoc-en svn repo, phpstorm stubs, etc.). Thanks!. This should be fixed in dev-master(1.2.0-dev) - it looks like it should only be possible if Phan is run in a way that would result in it not parsing (or analyzing) any files (e.g. it was run in a folder without a phan config, or the files to be analyzed were deleted). Class scope suppressions don't apply to the methods within the class right now, they apply to the class itself (e.g. issues about inheritance). Most issues are just suppressable in the nearest element scope.. Duplicate of https://github.com/phan/phan/issues/204\nPhan doesn't support assertions on properties of any variable, including $this\nI filed https://github.com/phan/phan/issues/2293 for the general case. A simpler example:\n```php\n<?php\nfunction test(?array $arr) {\n    // false positive PhanTypeArraySuspiciousNullable Suspicious array access to nullable ?array \n    return is_array($arr) && $arr['field'] >= 2 && $arr['field'] <= 4;\n}\n```. The main blocker on this (for me) was not having an idea of where (heroku, aws, etc.) I'd host PHP, how I'd limit functionality the PHP process could use (hopefully unnecessary), how I'd limit the maximum charge per month, etc.\n\nWhat are you using?\n\nI'd started working on https://github.com/TysonAndre/phan-demo as well several months ago (forked from https://github.com/oraoto/pib).\nIt used emscripten to run entirely in browser. (unfortunately, it's 12MB)\n\nTheoretically, this could be used on online tutorials for PHP, coding sites, etc. etc.\n\nUnfortunately, I couldn't find resources on how to recover from PHP shutdown. I'm guessing it's one of the APIs Phan was using (reflection, tokenization, including files, etc.), but I couldn't narrow it down at the time.\n\nusing an iframe or brand new global object might work.. Thanks!. Thanks, I was wondering when it would become stable. Yes, it is. This has been fixed\n\nAlso see #2091 . Seen with $changed = ($cond && array_key_exists($name, $oldArray) && $oldArray[$name] !== $value)\nProbably the same cause as https://github.com/phan/phan/issues/2304. It's possible that the developers of Homebrew removed php70 because it's no longer supported by PHP's development team. See https://secure.php.net/supported-versions.php (support ended a month ago)\nYou can use the php71 binaries to analyze a php 7.0 project - Set 'target_php_version' => '7.0' in .phan/config.php and Phan will warn if you use iterable, nullable types, void, etc.. Phan's instructions for homebrew are found at https://github.com/phan/phan/wiki/Getting-Started-With-Homebrew.\nAlso, I'm not very familiar with homebrew, and don't have a macbook. https://formulae.brew.sh/formula/php\nAlso, you should be using php, php@7.1, or php@7.2. The php70 formula no longer exists. I didn't check, but I'd expect php@7.0 to have also been removed.. Thanks!. @extends for classes, @inherits for interfaces, and for traits I don't know. (The implementation would probably make them interchangeable, anyway)\nAlso, I think that Phan won't work properly with @inherits for interfaces just due to how it was originally implemented (it replaces the real parent type). That should be fixable. It seems like we went with @inherits because there was a draft RFC using that instead of @extends. This was a year before I became a maintainer.\nhttps://github.com/phan/phan/pull/297#issuecomment-235014546\nThat RFC was a draft for PSR-5, but that version was on hold. Still need to apply the same fix as #2363 in PreOrderAnalysisVisitor->inferTypesForGenericForeachArrayDestructuring().\nAlso, there are very likely still edge cases with foreach ([[2]] as [$x[]])\n```php\n<?php\ndeclare(strict_types=1);\n/*\n * @param array>> $array\n /\nfunction test_nested_array_foreach(array $array) {\n    foreach ($array as $key => [[$_1, $_2], [$_3, $_4]]) {\n        echo \"{$key}: {$_1}, {$_2}, {$_3}, {$_4}\", PHP_EOL;\n    }\n}\n```. Thanks!. Yes, that's a false positive\nPhan analyzes array_push on variables, but doesn't analyze it on properties yet. See https://github.com/phan/phan/pull/1668/files in MiscParamPlugin . This should be doable (also see AssignmentVisitor->visitDim for how the latter is analyzed). The reported example was a false positive. \nFor @phan-internal-scope class, the suggestion sounds good, but would probably also need to include subclasses. (E.g. might be useful if the visibility needs to be preserved for serialize()/unserialize(), json encoding, or for unit tests (Can use ReflectionProperty for the latter)). That sounds like https://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.access.pkg.html , which I've seen before in legacy codebases.\nPhan does not currently support @access. It would be - I filed #2368 for that. Phan provides a helper method isAccessibleFromClass for checking if private/protected properties are accessible from elsewhere.\nIt's easier to start with just properties. Note that class constants only have doc comments in php 7.1+\nThese examples should warn:\nphp\n// Phan should just not warn for `@access` on elements it doesn't know how to handle, e.g. global functions, constants, and classes \nclass Base {\n    /** @access private */\n    public $x;\n    /** @access protected */\n    public $y;\n    /** @access public does nothing */\n    public $z;\n}\n// anywhere outside of the class\n$b = new Base();\necho $b->x;  // should warn\necho $b->y;  // should warn, unless accessed from somewhere on the class hierarchy that could access protected class elements\necho $b->z;  // should not warn. I'm able to reproduce this. I'm assuming there's some check to exclude files that assumes the data was in the json format when returned by the forked process (to extract the filename from the response and exclude entries with a different filename).\nPhanUseNormalNoEffect is seen with tests/files/src/0564_global_namespace_functions_constants.php copied to another folder, for example. What's the output of phan --version inside of the docker container?\nWhat PHP version is this (7.3 is the maximum supported version)? What php-ast version? What happens if you manually remove zend_extension=xdebug.so from your php ini file before running Phan in that image?. I'm also wondering if it's an issue with the storage driver, or an issue specific to the host OS (Windows/Linux) - Those use virtualbox and NFS instead of directly mounting the filesystem, so there's a delay between operations.\nI have a working image with a linux host, ubuntu guest, and Storage Driver: overlay2 (applications in unrelated containers have their own issues with overlay2, but Phan doesn't)\n\nWhen adding more extensions to \"analyzed_file_extensions\" it gives following results. (a crash with code 137)\n\nGoogling it, the error code 137 usually means that the process was killed by something. Probably not enough memory to parse all of the . If you're using multiple processes, try changing to a single process. Alternately, reduce the number of files.\n\nI'd suggest running phan --progress-bar as well, it might tell you when it runs out of memory and how much memory is there\nOr reduce the number of files in the directory_list (e.g. excluding tests/examples from being parsed entirely, and excluding files in vendor/ from analysis\nOr change your docker configuration to allow it to have more memory, or run phan on a host with more memory in CI\n\nhttps://success.docker.com/article/what-causes-a-container-to-exit-with-code-137\n\n\nThe application hit an OOM (out of memory) condition. With regards to OOM condition handling, review the node's kernel logs to validate whether this occurred. This would require knowing which node the failed container was running on, or proceed with checking all nodes. Run something like this on your node(s) to help you identify whether you've had a container hit an OOM condition:\n\n\n. > I think I got the issue\nclosing this since there's nothing left in this issue related to Phan itself\n\nBut let me know if there are any dependencies like this.\nI changed analyzed_file_extensions from\n'analyzed_file_extensions' => ['php','inc','module','theme','install','engine','profile','test'],\nto\n'analyzed_file_extensions' => [\"php\",\"inc\",\"module\",\"theme\",\"install\",\"engine\",\"profile\",\"test\"],\n\nPhan just calls require($pathToPhanConfig). Whether single quotes or double quotes are used doesn't matter, it gets the same config. 1. You could try downloading phan's master branch, running composer.phar install, and running that instead.\nThe recent changes may have fixed that specific issue, but I'm not completely sure what caused it (It looks like it had an overflow when trying to check if `::class` was visible, but I rearranged the checks so that isn't done for public class constants)\n\n\nYou could try adding print statements locally to see what type is expanded, what \\Phan\\Language\\Context it's being done from, etc. #2386 is a more general form of that\nIf this is open source, it would help to share the config and project being analyzed. @inheritdoc isn't a tag that Phan checks for. Inheriting type information is the default behavior.\n\nIf the method is declared in multiple ancestor class-likes, that may be the cause of your issue.\nI'll check if I can reproduce this locally - a standalone file or set of files and the config used may help. The way phan currently works is to check if the parameter has any non-empty union type (in the signature or in the phpdoc, combined, which is what param->getUnionType() is)\n\nThis heuristic works well for int, string, SomeClassName, but not for arrays.\n\nThe way this check should work is to check if the parameter does not have a phpdoc type. Then, it should allow it if either condition holds\n\nThe original parameter type was empty (current behavior), or\nThe phpdoc type (in $method->getComment()) is empty, and the type being inherited is a more specific version of the real signature (?array in this case)\n\n```php\n// In src/Phan/Analysis/ParameterTypesAnalyzer.php\n    private static function inheritPHPDoc(\n        Method $method,\n        Method $o_method\n    ) {\n        // Get the parameters for that method\n        $phpdoc_parameter_list = $method->getParameterList();\n        $o_phpdoc_parameter_list = $o_method->getParameterList();\n        foreach ($phpdoc_parameter_list as $i => $parameter) {\n            $parameter_type = $parameter->getUnionType();\n            if (!$parameter_type->isEmpty()) {\n                continue;\n            }\n            $parent_parameter = $o_phpdoc_parameter_list[$i] ?? null;\n            if ($parent_parameter) {\n                $parent_parameter_type = $parent_parameter->getUnionType();\n                if ($parent_parameter_type->isEmpty()) {\n                    continue;\n                }\n                $parameter->setUnionType($parent_parameter_type);\n            }\n        }\n    $phpdoc_return_type = $method->getUnionType();\n    if ($phpdoc_return_type->isEmpty()) {\n        $parent_phpdoc_return_type = $o_method->getUnionType();\n        if (!$parent_phpdoc_return_type->isEmpty()) {\n            $method->setUnionType($parent_phpdoc_return_type);\n        }\n    }\n}\n\n```\n\nThe original example can be simplified for a test case in Phan\n```php\n<?php\ninterface AssetRepositoryInterface\n{\n    /\n     * Find all assets optionally matching criteria and return a paginate object.\n     \n     * @param array|null $orderBy Ordering where the results should be returned by.\n     /\n    public function paginateByFilterCommand(array $orderBy = null): stdClass;\n}\nclass AssetRepository implements AssetRepositoryInterface\n{\n    /*\n     * @inheritdoc\n     /\n    public function paginateByFilterCommand(array $orderBy = null): stdClass\n    {\n        // Expected: should infer ?array instead of ?array in the error message emitted by the below line\n        echo strlen($orderBy);  // src/standalone.php:20 PhanTypeMismatchArgumentInternal Argument 1 (string) is ?array but \\strlen() takes string\n        return new stdClass();\n    }\n}\n``\n. Phan has something similar toarray-keyas the default&only option for the combination, and doesn't have a way to explicitly saymixed. I can't think of a good reason to addmixed`, except for phpstorm-style annotations (https://github.com/phan/phan/issues/1659)\narray<int|string,x>, array<mixed,x>, and x[] are all equivalent ways of representing an array with mixed integers and strings in Phan, in the latest versions. In Phan's issue output(etc.), all of them get printed as x[], for conciseness and to change issue messages as little as possible.\nSee https://github.com/phan/phan/blob/1.2.2/src/Phan/Language/Type/GenericArrayType.php#L30-L60 - That's KEY_MIXED = KEY_INT|KEY_STRING internally.\n\nWith phan --strict-types, that's already PossiblyInvalidArgument.\nPhan doesn't have an equivalent of MixedArgument. It's easy to add but just hasn't been added.\nPhan also offers scalar_implicit_partial in situations where code needs to allow integers to cast to strings/vice versa (can be combined with --strict-types to allowint|string->stringbut disallowint|bool->bool) . Usephan --strict-type-checkingor just--strict-param-checking`. This will introduce a lot of false positives.\n\nBy default, Phan won't warn if at least one of the possible types is compatible with the expected types.\n``\n --strict-param-checking\n  Warn if any type in an argument's union type cannot be cast to\n  the parameter's expected union type.\n  (Enables the config optionstrict_param_checking`)\n--strict-property-checking\n  Warn if any type in a property assignment's union type\n  cannot be cast to a type in the property's declared union type.\n  (Enables the config option strict_property_checking)\n--strict-return-checking\n  Warn if any type in a returned value's union type\n  cannot be cast to the declared return type.\n  (Enables the config option strict_return_checking)\n-S, --strict-type-checking\n  Equivalent to\n  --strict-method-checking --strict-param-checking --strict-property-checking --strict-return-checking.\n```\nThose enable the strict_* settings: https://github.com/phan/phan/wiki/Phan-Config-Settings#strict_param_checking\n\u00bb ../phan/phan --strict-type-checking -I src/2415.php\nsrc/2415.php:6 PhanPartialTypeMismatchArgumentInternal Argument 1 (var) is ''|array{} but \\count() takes \\Countable|array ('' is incompatible)\n. https://github.com/phan/phan/wiki/Getting-Started\nYou're probably not seeing it (PhanParamTooFew) because Phan doesn't have enough information to infer $user is a User.\nSee https://github.com/phan/phan/wiki/Annotating-Your-Source-Code#inline-type-checks\nAlso see https://github.com/phan/phan/wiki/Phan-Config-Settings#globals_type_map\n\nIf $users is a global variable frequently used in many files of your application, you could add 'globals_type_map' => ['user' => 'User'] to .phan/config.php\n\n. Yes, this can be done by adding --config-file /path/to/config.php to the options.\n-k, --config-file <path>\n  A path to a config file to load (instead of the default of\n  `.phan/config.php`).. Reordered the example - it will only happen when the if (!$person instanceof WalkableInterface) is before parent::__construct\nThis will be possible when https://github.com/phan/phan/issues/1629 is fixed. Until then, suppressing it in the method/line is usually the best approach.\n. Strange, I thought I updated packagist to grant the additional required GitHub hooks API. . In packagist, it's marked as \"(Legacy Auto-Update, Needs Attention)\"\nI triggered https://packagist.org/trigger-github-sync/ to try to fix this. https://packagist.org/packages/phan/phan now shows that 1.2.3 is available - Hopefully, future builds will not have this issue.. Thanks!. What phan version are you using? I'm not able to reproduce this with the latest master branch.\nWhat are the contents of your .phan/config.php for that project? (e.g. plugins) - Can you provide a minimal example of this?\nDo you have other extensions enabled, e.g. uopz (what xdebug-handler version is this?). Also, try setting PHAN_ALLOW_XDEBUG=1 - What does phan output (e.g. any errors?)\nWhat version of PHP are you using? What version of xdebug?. Thanks!. Duplicate of https://github.com/phan/phan/issues/1488. This is unsurprising; this functionality is not part of php-ast, and the polyfill right now just attempts to imitate php-ast.\nphp-ast only provides the doc comments that would be accessible via Reflection (i.e. on classes, closures, etc) - This is the same doc comment the php interpreter would see.\nThis is something that should be added eventually.\nSubtask of #2474. Thanks!. That's probably because Phan parses the parameters in the Context of the class - It should instead be parsing the parameters in the Context of the method.\n__FUNCTION__ is also affected.. That should be array{bar?:int}, but you'd still have the same issue.\nPhan currently doesn't read the documentation on class comments because it can be statically inferred. static::A might be handled differently from self::A, e.g. by tracking the constant type and (if compatible with the actual value) only using it for static. Thanks!. I can reproduce this with this simpler example as well:\n```php\n<?php\nclass AbuseFilterHooks {\n/**\n * @param array $tags\n * @param bool $enabled\n */\nprivate static function fetchAllTags( array &$tags, $enabled ) {\n    // Function that derives the new key value\n    return function () {\n        // This is a pretty awful hack.\n\n        $where = [ 'afa_consequence' => 'tag', 'af_deleted' => false ];\n        $where['af_enabled'] = true;\n    };\n}\n\n/**\n * @param string[] &$tags\n */\npublic static function onListDefinedTags( array &$tags ) {\n    self::fetchAllTags( $tags, false );\n}\n\n}\n```. Probably need to update PhanAnnotationAdder to recurse into closures as well - It adds FLAG_IGNORE_NULLABLE_AND_UNDEF to the left hand side of assignments\nphp\n// in PostOrderAnalysisVisitor\n        if ($node->flags & PhanAnnotationAdder::FLAG_IGNORE_NULLABLE_AND_UNDEF) {\n            return $context;\n        }\n        // Check the array type to trigger TypeArraySuspicious\n        try {\n            /* $array_type = */\n            UnionTypeVisitor::unionTypeFromNode(\n                $code_base,\n                $context,\n                $node,\n                false\n            );\n            // TODO: check if array_type has array but not ArrayAccess.\n            // If that is true, then assert that $dim_type can cast to `int|string`\n        } catch (IssueException $_) {\n            // Detect this elsewhere, e.g. want to detect PhanUndeclaredVariableDim but not PhanUndeclaredVariable\n        }\n        return $context;\n    }. Thanks!. ```\n// in src/Phan/Language/Element/Comment/Builder.php\n    /\n     * This regex contains a single pattern, which matches a valid PHP identifier.\n     * (e.g. for variable names, magic property names, etc.\n     * This does not allow backslashes.\n     /\n    const WORD_REGEX = '([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff])';\n/**\n * @internal\n */\nconst SUPPRESS_ISSUE_LIST = '(' . self::WORD_REGEX . '(,\\s*' . self::WORD_REGEX . ')*)';\n\n/**\n * @internal\n */\nconst PHAN_SUPPRESS_REGEX = '/@(?:phan-)?suppress\\s+' . self::SUPPRESS_ISSUE_LIST . '/';\n\n```\nThe issue you're having seems to be that the @suppress annotation doesn't support hyphens. It only supports the same identifiers that PHP could use as a constant name (because that's what Phan and its own plugins use - typically CamelCase)\nIf you change WORD_REGEX to '([a-zA-Z_\\x7f-\\xff-][a-zA-Z0-9_\\x7f-\\xff-]*)', that would probably fix it.. Can you give a short example file with the annotations you'd expect to work, but aren't working (or a link to a branch of the project)?\nAre you sure that the master branch you're using is up to date (e.g. not stale, i.e. vendor/phan/phan/src/Phan/Language/Element/Comment/Builder.php contains const SUPPRESS_ISSUE_LIST). This is deliberate. Phan is analyzing that method independently of what callers exist.\nCode can also call Foo::problem() directly, e.g. if Foo is part of a library that's used by an application that Phan isn't analyzing, or in a folder Phan isn't analyzing.\nI'd recommend suppressing it and documenting that problem() is only ever (and should only be) called on subclasses. Duplicate of #2279 - It's probably because you changed the path to run PHP, as well (or changed your php.ini settings to not load the mysqli functions). \nSee https://github.com/phan/phan/wiki/Frequently-Asked-Questions#phan-says-that-an-internal-class-constant-or-function-eg-xdebug_is_enabled-soap-memcached-etc-is-undeclared\nIf mysqli is installed and enabled, the output of php -m should contain the line mysqli. Can you post the output of php -m?\nI'm not able to reproduce this with the latest phar or dev-master of phan. \nIf you can narrow this to a reproducible test case (e.g. docker image), that would help. Done. > But this not belongs to my project, so it should not be warned.\nPhanDeprecatedInterface works this way intentionally, and there are no plans to change that. This is letting you know the third party code is deprecating it.. Oh, misread that.\nThis is a duplicate of #972. If the issue I linked was fixed,\nThen the issue would be emitted in vendor/pagerfanta/pagerfanta/src/Pagerfanta/pagerfanta.php (instead of the usage of the class)\nwhich would be suppressed because of the exclude_analysis_file_list setting applying to vendor, solving your issue. Adding STATUS_BREAK_2 and STATUS_CONTINUE_2 (and 3) to BlockExitStatusChecker is one way to fix that with the current design (change analysis of switch to check for break with a depth of 1.\n\nLarger depths aren't going to be needed very often\nRedesigning the analysis is another way, but is less realistic\n\nThe bug this is supposed to fix:\nphp\nswitch ($cond) {\n   case 0:\n   case 1:\n        break 2;  // $x is possibly undefined here, but use($x) really can't be reached\n   default:\n        $x = something;\n        break;\n}\nuse($x);  // should not infer that $x is possibly undefined or something other than the type of `something`\nA false positive if this was just changed to analyze break 2 like return/throw:\n```php\n            $contains_templated_type = false;\n            foreach ($parent_type->getTemplateParameterTypeList() as $union_type) {\n                foreach ($union_type->getTypeSet() as $type) {\n                    if (isset($template_type_map[$type->getName()])) {\n                        $contains_templated_type = true;  // false positive PhanUnusedVariable if we pretend the 'break' is a return.\n                        break 2;\n                    }\n                }\n            }\n        // If necessary, map the template parameter type list through the\n        // local list of templated types.\n        if ($contains_templated_type) {\n\n``. Phan uses the installed php binary's information about what functions are deprecated - **target_php_version` does not affect that yet.**\nIf you run Phan with php 7.3, then internal functions such as create_function will be shown as deprecated. Phan doesn't check ini_set.\nAs I mentioned already, you need to be running php 7.2 or newer for Phan to warn about create_function. You're running php 7.1\nYou have to call C->f() for it to warn about f() being deprecated. It deliberately only warns about usages, not declarations.. This would be a good candidate for \"plugins specific to code styles\" in Phan's .phan/plugins\n\ndon't use $this\ndon't override a parent method\ndon't have instance closures that use $this\nDon't get overridden in other classes (Related to #2539 - tested but not released yet)\n\n. Changing Base::instanceMethod from non-static to static causes a fatal error (same if the base class is instance but the subclass is changed to be static)\nI'd prefer reducing false positives over false negatives, especially when making the suggested fix causes fatal errors (e.g. when Phan focuses on low false positives). Some methods of abstract classes are stubs - return null;/throw new UnsupportedOperationException() would be one case\n```\n<?php\nclass Base {\n    // Because this is static, the following issue is emitted:\n    // Fatal error: Cannot make static method Base::instanceMethod() non static in class Subclass in /path/to/inherit.php on line 13\n    public static function instanceMethod() {\n    }\n}\nclass Subclass extends Base {\n    public function instanceMethod() {\n    }\n}\nvar_export(new Subclass());\n``.    'plugins' => ['UnusedSuppressionPlugin', 'UseReturnValuePlugin'],`\nChange it to 'plugins' => ['UseReturnValuePlugin', 'UnusedSuppressionPlugin'], and it'll work. Both of them do extra work in finalizeProcess - It's possible to add afterFinalizeProcess for use only by plugins that depend on other plugins.. vendor/symfony/console/Helper/ProgressBar.php has utilities that may help.\nI'm guessing utf-8 \"Full Block\" wasn't supported. Using > and - or some other normal characters on Windows may help.\nThe most likely cause is that the original bug reporter's terminal wasn't using utf-8\n\nhttps://en.wikipedia.org/wiki/Code_page#Windows_code_pages\nhttps://secure.php.net/manual/en/function.sapi-windows-cp-is-utf8.php seems to be what I need. (Requires PHP 7.1+, I'll just always use ASCII progress characters for php 7.0 since this is non-essential)\n\nChecking if ansi support exists (i.e. able to clear line contents) would be necessary if switching to imitate symfony's code for windows.\nAdding --legacy-progress-bar would also help. > Should the catch on line 2901 return an empty array as well?\nIt should.\nThanks, fixed!. Thanks for the report.\nPhan does not do anything with @inheritDoc right now. (and inheritDoc should be the default behavior, not a special case)\nWill have to look into what the issues are when I have time\n- It might be failing to inherit static or inheriting it as the wrong class name (see src/Phan/Analysis/ParameterTypesAnalyzer.php (EDIT: fixed wrong class))\n- It might infer that parent::create() has the type of the parent (A) - see ContextNode/UnionType if that's the case. It doesn't matter - inside a single quoted string, the first \\\\ is a single slash, and the next \\] is a backslash followed by the ]. The issue you're having in online tests is just not unescaping it properly before passing it to them.\nhaving two backslashes would be wrong, because that translates to one backslash (i.e. regex matching a literal ] token, I think). four would be clearer, but not worth fixing.\nphp > echo '\\\\\\]';\n\\\\]. I'd rather not have FullyQualifiedClassName->isAnonymous() at all until there's a need to this.\nInstead, Clazz->isAnonymous() should return ($this->getFlags() & \\ast\\flags\\CLASS_ANONYMOUS) > 0 (getFlags() is $node->flags) - that's how the name is decided on\n```php\npublic function visitClass(Node $node) : Context\n{\n    if ($node->flags & \\ast\\flags\\CLASS_ANONYMOUS) {\n        $class_name = (new ContextNode(\n            $this->code_base,\n            $this->context,\n            $node\n        ))->getUnqualifiedNameForAnonymousClass();\n    } else {\n        $class_name = (string)$node->children['name'];\n    }\n\n```\nlgtm after fixing that. Phan doesn't support symfony annotations, they're not a standard part of phpdoc.\nHowever, there is a third party plugin for symfony https://packagist.org/packages/drenso/phan-extensions that does this . Duplicate of #1757 , has a known solution via plugins. That's a known issue. Phan checks any parameter type containing callable and warns if strings aren't callable. This is because this was implemented prior to the callable-string type (and phan doesn't support intersection types yet) - also, many libraries would predate callable-string or intersection types, and use callable|string where callable&string would be the intended definition (or callable|string|null instead of (callable&string)|null.\nIt could be worked around by adding a plugin to override the param analysis of fetchAll based on the first argument, but it'd be more reasonable to fix the root cause in Phan's type system first to avoid extra code for special cases. Suppressing this is recommended until then (e.g. phan-suppress-next-line)\nsrc/Phan/Language/Internal/FunctionSignatureMap.php\n'PDOStatement::fetchAll' => ['array|false', 'how='=>'int', 'fetch_argument='=>'int|string|callable', 'ctor_args='=>'?array'],. Could you give a concrete example of code or a project that isn't working?\nhttps://github.com/phan/phan/wiki/Annotating-Your-Source-Code#method mentions support for static.\nPhan already supports @method static T method() - https://github.com/phan/phan/tree/master/tests/files/src/0282_forbid_undeclared_magic_methods.php. What phan version are you using?\nCan you give an example file?\nI just see src/define_empty.php:2 PhanInvalidConstantFQSEN '' is an invalid FQSEN for a constant in dev-master and older phan releases such as 1.2.4\n. Moved it and documentation of that flag into src/Phan/Config.php, which can be overridden\n. done\n. Done.\n. This change was intentional. See the new test file. https://github.com/etsy/phan/pull/393/files#diff-6f6dc83cf26ea242f7f2463670462f71\n$_GET['foo'] = 'b'; accidentally created a global variable $foo, in the line                      $this->context->addGlobalScopeVariable( below\n.  I have a different idea.\nKeep runkit_superglobals in the current schema . (or rename to superglobals_list)\nAdd a second parameter, globals_type_map for the broader purpose (regular globals+superglobals).\nhttp://php.net/manual/en/language.variables.superglobals.php\n\nSuperglobals \u2014 Superglobals are built-in variables that are always available in all scopes\n. Fixed other bugs caused by my change to src/Phan/Analysis/AssignmentVisitor.php, and other pre-existing bugs.\n. Wrong scope.\n. It is, I was undecided about getting the value of the class list in its own try block.\n\nThis line can be removed.. This was a part of a standalone project earlier, forgot to take this out.. nit: This should be 010, or everything else should be 1,2,3,4,5,6,7 (mixing octal and decimal). nit: // or we're a class with dynamic properties such as stdclass\nSame for other comments. Something like '*' => 'simplexmlelement' could be used to indicate that dynamic properties of SimpleXMLElement are expected to be SimpleXMLElements (https://secure.php.net/manual/en/simplexmlelement.construct.php#refsect1-simplexmlelement.construct-examples)\n(And \"*{ => '' for new UnionType()\nLow importance. The \"How to Generate\" section is misleading now (Or this is the wrong place to put it).\n\nIt suggests that the array might be overwritten with the results of that perl command.\nThe way it's worded makes other contributors unsure about modifying it manually?\n     (It had only one git commit)\nIf this will re-run the perl command to pick up new classes, maybe there should be a separate file\n    for entries overriding the php command?\nKeys would be more readable if sorted lexicographically (manually or by perl)\n\nOn an related note, ast\\node needs signatures here for kind (int), flags(int), docComment (optional string), children (Null, scalar, ast\\Node, or array, etc. in order for phan to analyze itself. I think it can actually be an int/float\nphp > var_export(ast\\parse_code('<?php 2;3.2;\"literal\";', 35));\nast\\Node::__set_state(array(\n   'kind' => 132,\n   'flags' => 0,\n   'lineno' => 1,\n   'children' => \n  array (\n    0 => 2,\n    1 => 3.2,\n    2 => 'literal',\n  ),\n)). The second one looked fine, but this is calling functionListFromReflectionFunction (return type Func) with a ReflectionFunction (always a function or a closure, never a method). They don't have to be, but I wanted to check that the code worked properly with namespaces (Doesn't really check across namespaces, though)\n\nAlso, I wasn't sure whether a different discussion on \"namespacing tests\" referred to using namespaces, or to using non-overlapping class names.. This seems like it could be int|string|callable\n\n```\n    PDO::FETCH_COLUMN: Returns the indicated 0-indexed column.\nPDO::FETCH_CLASS: Returns instances of the specified class, mapping the columns of each row to named properties in the class.\n\nPDO::FETCH_FUNC: Returns the results of calling the specified function, using each row's columns as parameters in the call.\n\n```. This confusing helper method was a workaround for issues I encountered investigating https://github.com/etsy/phan/issues/571\n\nFixing 571 first would be a better solution.. redundant, also in NativeType. Unlikely to be a bottleneck, since __toString() in scalars is also defined the same way, and won't call asFQSENString. This isn't useful to me at this point - If a user wants something to stand in for php -l, they probably also want to preserve the exact same relative/absolute paths, like phan_client is doing.\n\n. Seems ok overall as a first start, might want to have this behind a config (false by default and in .phan/config.php) since it might not be finished for a while.\nThere can be duplicates of classes.\nAlso, there might also be a class by the same name as an alias, and\n\nsomething like PhanDuplicateClass/PhanDuplicateClassAlias should be emit (may or may not check if the strings are equal)\nSee the other uses of withAlternateId() in Phan when adding class definitions\n\nAlso, people can call class_alias above (or in a different file parsed before) a class declaration.\nnit: Also, add doc comment with @return void, like the others in the file\nnit: also, remove space between ( and first param, remove space between last param and ) in function invocations\nLong term, there should be a step after the parseFiles phase but before the analyzeClasses/analyzeMethods phase, when all of the classes have been parsed. May want to check if $originalFqsen is valid, emit a new issue type here? https://secure.php.net/manual/en/language.variables.basics.php\n\nAs a regular expression, it would be expressed thus: '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'. Add a test of an undeclared class in anonymous namespace as well?\n\nOptionally, add a test of this working for traits\nOptionally, add a test of something extending an alias class\nAdd a test of using something from the original (e.g. calling a method of) a class alias (Defined in class A). And there can technically be a class_alias of class_alias of a class_alias ...., which also makes a complete implementation harder. A single level of aliasing seems fine.\nAlso, need to check that the original class exists in Phan\\CodeBase when adding an alias, emit an PhanUndeclaredClass if it doesn't. I meant that this doesn't make sense, neither in the PHP type system, nor in LSP checks. http://www.blackwasp.co.uk/lsp.aspx (couldn't find an official definition, using that)\n\nThe first rule is that there should be contravariance between parameters of the base class's methods and the matching parameters in subclasses. This means that the parameters in subclasses must either be the same types as those in the base class or must be less restrictive. Similarly, there must be covariance between method return values in the base class and its subclasses. This specifies that the subclass' return types must be the same as, or more restrictive than, the base class' return types.\n\n$o_parameter is the parameter in the base class. $parameter is the parameter in the subclass. So the current behavior of Phan is allowing the parameter to the subclass to be more restrictive (The base class has type mixed or empty, meaning it accepts anything, but the subclass only accepts a subset of that), which is the opposite of LSP.. This is a static method, when we have a string AST node and need to check if is really static (Case insensitively)\n\n$this is optional, and wouldn't be used by current uses of this PR. In the future, we might want to check for @return $this\n  See https://github.com/etsy/phan/issues/634\nCan simplify to preg_match('/^\\\\\\\\?static/i', $type_string)\n\nAlso, as a static function, there is no $this to call __toString on. What was the intention here?\nNote that '\\\\$this' is within single quotes, not double quotes. It isn't being evaluated, there's a literal being checked for within the regex.\nThis isn't being called very frequently. The more frequently called method may be the below:\n/**\n      * @return bool\n      * True if this type is a type referencing the\n      * class context 'static'.\n      */\n     public function isStaticType() : bool\n     {\n         return 'static' === strtolower(ltrim((string)$this, '\\\\'));\n    }. prefer Foo271 here, A271 above, this may conflict with other tests for namespace foo. testA271. asExpandedType seems like the wrong place, it converts Subclass to Subclass|BaseClass.\nIt'd make more sense to me if aliases were replaced with the original type(s), instead of adding aliases\nType::make() might work (But that returns only one type)\nEDIT: asExpandedType might end up being the best way to handle multiple possible original classes for a given class, not completely sure. This list may end up with duplicates if multiple files define the same alias. A map to a set of fqsens may make more sense. Seems fine overall.\nAlso, Phan doesn't use complex variable access in strings that often, and doesn't yet analyze those. Split this out into $file_path = $file_info->getRealPath(). The way this is written, this will read every single file from disk, and call \\ast\\parse_code twice.\nThis is inefficient, and will slow phan down (Especially the parsing from disk part).\n\nmost files in a typical process have 0 class_alias statements, but this step would parse them anyway.\na small fraction of lines in a file with class_alias are actually class_alias\n\nOn another note, I think that class_alias should take effect for all parsed files, not just the subset which is analyzed. Class declarations, function declarations, etc. are all parsed from parsed files, and creating classes from an alias is somewhat similar.\nA preferred solution would be:\n\nDuring the parse phase, when class_alias is encountered, add information with the context, source class name, and target class name to this.\n    E.g. create \\Phan\\Language\\Element\\ClassAlias with the properties sourceClassName, targetClassName, and maybe Context and maybe \\ast\\Node $node\n    Add those to a list\n    (Not 100% sure if the context is necessary, but MyClass::class would be a different string in namespace Foo. Actually, the file and line might be needed to warn about bad aliases (e.g. missing source class). $node probably isn't needed either.)\nDuring the analyze phase, loop over that list of ClassAlias, and perform the AliasAnalyzer steps\n    (The step to create aliases seems short enough to fit in one or two methods of the Analysis class.) . This should be moved into the parse phase\n\nYou'll need to track these somewhere. I suggest $code_base->recordClassAlias(sourceClass, targetClass, etc.). nit: strcasecmp. The other code is a bad example, but Phan should really be using strcasecmp(name, 'fnname') === 0 in a lot of places.\n(If it's invoked as CLASS_ALIAS or some other weird case-insensitive equivalent).. Would prefer a new issue type RedefineClassAlias with the same category/severity. I don't really care as much about what happens if class and alias conflict (for this PR), mostly mention this for the case of alias and alias conflict.\n\nThese are all done at the level of the global scope, and phan doesn't have a way to suppress an individual statement outside of a function/method.\nUsers may want a way to check for duplicate classes without checking for duplicate aliases, or vice versa\n  (E.g. Same alias may exist in different files).. The suggestion I made would involve taking this context and file/line from the AliasInfo. Add a test with NamespacedOriginal::class passed to the source of class_alias\n\nphp > namespace C{echo A::class;}\nC\\A. Okay, Type::make doesn't work. It needs to be at a higher level. This is out of scope of this PR.\nIt should be possible to do this in a way similar to the way phan handles imports use SomeNamespace\\Foo as Bar (Phan sees Bar, but expands it to SomeNamespace\\Foo everywhere - instanceof checks, parameters, phpdoc parameters, etc.)\nAll of the methods such as UnionType::fromNode(context, code_base, children) (Called in AnalysisVisitor), UnionType::fromStringInContext(type, context, true), etc. , all get a Context, which contains a link to the codebase.\n\nSee the implementation of Type::fromStringInContext, from the // Check to see if the type name is mapped via a using clause. part of the code.\n  (This would be checked after use statements are checked, and possibly in combination with a use statement). https://secure.php.net/manual/en/function.system.php#refsect1-function.system-description\n\nSystem already did that. All of the output is passed through to stderr (not applicable here) and stdout.\nThe return value of system() is the last line of it.\nThis logging statement also covers php interpreter missing from $PATH, file being somehow unreadable, etc.. https://phpdoc.org/docs/latest/references/phpdoc/tags/method.html\n\nThe parameter type is optional\nThe parameter name is optional\nMay want to support void, nullable types in php 7.0 if this is backported\n\nAdditionally, this is phpdoc, and uses phpdoc types. I assume @method boolean methodname() should be possible, but methodname() : boolean would be parsed as the class boolean\nAlso, this suggestion would prevent using union types @method int|string foo(). Consistency with what we're doing in the rest of Comment.php. I assume the role of Comment.php is to track information about the phpdoc annotations, and the logic to instantiate/valiadate instances of real parameters/properties/ the phpdoc annotations is mostly in Clazz, etc.\nPhan\\Language\\Comment\\Parameter isn't a subclass of Phan\\Language\\Element\\Parameter, either.\nAlso, the parameter list of Comment\\Method is a list of Comment\\Parameter\n```\n    /* \n     * @var CommentParameter[]\n     * A list of CommentParameters from var declarations\n     /\n    private $variable_list = []; \n/** \n * @var CommentParameter[]\n * A list of CommentParameters from param declarations\n */\nprivate $parameter_list = [];\n\n/** \n * @var CommentParameter[]\n * A map from variable name to CommentParameters from\n * param declarations\n */\nprivate $parameter_map = [];\n\n``. I'd suggest enforcing it on the concrete classes extending/implementing the interface, notabstract classorinterface`. Should that be a comma?. Nit: NSInternal, or something to distinguish these codes from the PHP internal type of codes?. (at)internal to avoid vagueness. IS_NS_INTERNAL. To namespace\nSame in other files. Add tests of subclasses of internal classes(what does phpdoc spec say?). Namespaces in PHP are case insensitive, use strcasecmp?. IsNSInternal, this will break extensions and forks in a wierd way, if anything called the old implementation of the same name. Internal {CLASS} so this covers traits and interfaces?\nAdd the type the same way as other generic issues. Nit: this can be a different category?. Yes, the lowercase version of class+namespace(fqsen) is used to store it in the class map of the code base.. : bool?. ok, just never saw that before.. Added it above.. This is a merge conflict. Fixed.. Agreed. Done.. Done for the warnings about slow settings.. Restored the version from etsy/phan master. Fixed for variables introduced in this PR. Other copies of this comment in phan, such as .phan/config.php should also be updated,\nnit: \"fewer issues\". Phan isn't able to analyze this, could move $original_config_value = [] outside of the if\ntests/Phan/AbstractPhanFileTest.php:163 PhanUndeclaredVariable Variable $original_config_value is undeclared. This should be done in a finally block, or (preferably) tearDown() for this method (Assign to $this->original_config_value)\nIf a test run with an overridden config fails, then its config would then stay around for other tests, causing confusing test failures with too few issues.. It's sort of helpful in many cases in catching typos, and no-ops (Places where the variable was once declared in a method, but no longer is)\nBut yes, this is a false positive. Can be called $v286a, $v286b, ->p286, etc. to minimize chances this will interfere with other tests. It's a noticeable speedup (8s to 7s), but not all of it (8s to 4.1s). spl_object_hash is a string, usually longer (and using more memory) than uniontype\nThere's no spl_object_id built into php - I was considering using something like that (a hash that's an integer instead of a string), since there would have to be billions of records before false positive collisions seemed likely. https://github.com/TysonAndre/phan/pull/2/files#diff-c8f1da4671805b4ad825f970ee070bc6 is vaguely related.. 8 seconds decreased to 7.4/7.7 seconds, compared to 4 seconds for the PR as a whole (for phan self-test). > Any reason it needs to be base64?\noutputting raw binary bytes into the terminal while debugging or in stack traces may break the display. Truncating the value to fit within a 64-bit/32-bit integer instead may be more appropriate. The recursion depth is 2.\nSo, if A calls B(T $x), and B calls C(T $a),\n\nWhen analyzing A(recursion_depth==0), we will recurse into B, passing type T for parameter $x\nWhen analyzing B(recursion_depth==1) (Skipped if already analyzed with type T), we will recurse into C, passing type T for parameter $a\nHowever, we won't recurse into any of the calls made by C(recursion_depth==2), since the global recursion depth limit for Analyzable was reached\n\nThere's some benefit to making the chains shorter - It avoids f1(T) calling f2(T) calling ... calling f100(T), so it's consistently practical for users to determine places T could have been inferred.\nAlso, we were failing to decrement recursion_depth before. So this ended up being a limit of 2 re-analysis steps on a function/method, total in the old implementation\n\nIts probably worth a comment explaining how this is being used.\n\nYep.. Keep these options around, explicitly set ASSERT_BAIL (false?)\nThe default may be overridden in php.ini in the environment phan run, which is why Phan overrides this yet again\n\nhttps://secure.php.net/manual/en/ini.core.php#ini.zend.assertions\n\nAlso, it seems like assert_options is deprecated, and ini_set is recommended for php 7.0+ code : https://secure.php.net/manual/en/function.assert.php#function.assert.expectations\n\nPHP 7 only code should use the two new configuration directives to control the behaviour of assert() and not call assert_options(). . Added a comment.. Switched to a platform-dependent 32-bit/64-bit signed integer, using unpack() to extract it from the first 4/8 bytes of the raw md5.\nIt doesn't seem like storing the string or computing the base64 encoding was expensive, at least for analyzing phan (This didn't affect performance noticeably)\n\n. You're confusing defined with isset\ndefined() looks up the name of a constant, and is a normal function. https://secure.php.net/defined\n```\nphp > $x = [];\nphp > error_reporting(E_ALL);\nphp > var_dump(defined($x['a']));\nNotice: Undefined index: a in php shell code on line 1\nbool(false)\n```. Currently, canonicalName is always the identity transformation.\nI'm not sure what your plans are to change this, or to inline the code.\n\"The canonical representation of the name of the object\" is unclear on the contexts in which that name is intended to be canonical.\nBy using this in the singleton lookup keys and canonicalName/$name in the error messages, the error messages end up mostly consistent with the code.\n```\nsrc/Phan/Language/FQSEN/FullyQualifiedMethodName.php\n16:    public static function canonicalName(string $name) : string\n17-    {\n18-        return $name;\n19-    }\nsrc/Phan/Language/FQSEN/FullyQualifiedFunctionName.php\n27:    public static function canonicalName(string $name) : string\n28-    {\n29-        return $name;\n30-    }\nsrc/Phan/Language/FQSEN/AbstractFQSEN.php\n69:    public static function canonicalName(string $name) : string\n70-    {\n71-        return $name;\n72-    }\nsrc/Phan/Language/FQSEN/FullyQualifiedClassName.php\n29:    public static function canonicalName(string $name) : string\n30-    {\n31-        return $name;\n32-    }\nsrc/Phan/Language/FQSEN.php\n48:    public static function canonicalName(string $name) : string;\n```. Fixed. Sure, will move emitting issues to the lines where $signature_error_cause were created. https://getcomposer.org/doc/04-schema.md#suggest\nrunkit_object_id isn't on PECL, so it may be hard to find. false?. emitPluginIssue is calling emitPluginIssue. --include-analysis-file-list, \"to the exclusion of other files from analysis\" (was vague). 1. This can be flipped into a set (e.g. array_flip and array_key_exists), to be more efficient if a long list of files is provided\n2. The current code is simpler as return in_array($file, $include_analysis_file_list, true). Done. No, this is optional to speed up parsing UnionType a bit (not yet tested). I didn't think many things would use new UnionType() directly, it's usually helpers from Phan such as UnionType::fromStringInContext, $type->asUnionType(), etc.. Also, this is either of two extensions https://github.com/runkit7/runkit7 or https://github.com/runkit7/runkit_object_id\nThe suggested option ( https://github.com/runkit7/runkit_object_id/blob/master/runkit_object_id.c ) would be an easier extension to understand.. Done. Phan ignores it. It doesn't give any information. It's just convention in this codebase to have doc comments for all of the params (or none of the params)... So if I document what one boolean/string/int does, I would also placeholders with no description for the other parameters.\n- Would be useful to have a description in this instance, but that's out of scope\nIn the general case, I think phan ignores phpdoc param types if there are real types (i.e. doesn't affect analysis). Also, fixed this. It should have been |, not , (Third arg is the maximum recursion depth for encoding). e.g. would prefer that this be kept static\n(e.g. the plugin framework could call get_class($returned_plugin) and check which interfaces (of static methods needed) before calling the static methods)\n\nActually, one can call static methods on object instances without issues in php, so that's another possibility. Addressed in PR 907. Addressed in PR 907. Addressed in PR 907. Addressed in PR 907. Addressed in PR 907. https://secure.php.net/manual/en/datetime.construct.php the time zone can be passed in and null at the same time.\n\nMost of the other changes look good. There should be space or \\b after @param. This allows two union types in a row because it used *, ? would make more sense.. \\b makes the most sense. Keep these?\nKeeping the extra installed extensions would minimize the false positives - Phan gets function signatures and class signatures from the extensions themselves by default.\nThere's https://github.com/phan/phan/wiki/How-To-Use-Stubs , but it doesn't have an equivalent in the codeclimate config file for a project.\nLooks good otherwise.. Null was left out deliberately.\nThe only case that I can possibly think of where this would be null is when the arguments are invalid.\nMy preference is to make the return values account for normal failure cases, not for users providing too many/too few arguments.\n(I can't think of a global function that doesn't have a closure. However, a ReflectionMethod can be of an abstract method)\n```\nphp > function foo(){}\nphp > $f = new ReflectionFunction('foo');\nphp > var_export($f->getClosure('extra'));\nWarning: ReflectionFunction::getClosure() expects exactly 0 parameters, 1 given in php shell code on line 1\nNULL\n```\nAside: On failure, ReflectionClass->getParentClass returns false.. If there is a different reason why ReflectionFunction would return null, I'll reconsider this. It doesn't look like it, though\n```c\n/ {{{ proto public mixed ReflectionFunction::getClosure()\n   Returns a dynamically created closure for the function /\nZEND_METHOD(reflection_function, getClosure)\n{\n    reflection_object intern;\n    zend_function fptr;\nif (zend_parse_parameters_none() == FAILURE) {\n    return;\n}\nGET_REFLECTION_OBJECT_PTR(fptr);\n\nif (!Z_ISUNDEF(intern->obj)) {\n    /* Closures are immutable objects */\n    ZVAL_COPY(return_value, &intern->obj);\n} else {\n    zend_create_fake_closure(return_value, fptr, NULL, NULL, NULL);\n}\n\n}\n/ }}} /\n```\n```c\nZEND_API void zend_create_fake_closure(zval res, zend_function func, zend_class_entry scope, zend_class_entry called_scope, zval this_ptr) / {{{ /\n{\n    zend_closure closure;\nzend_create_closure(res, func, scope, called_scope, this_ptr);\n\nclosure = (zend_closure *)Z_OBJ_P(res);\nclosure->func.common.fn_flags |= ZEND_ACC_FAKE_CLOSURE;\n\n}\n```\n(On php-src master branch from december). lgtm otherwise. I'm only going to focus on internal subclasses of ReflectionFunction that exist (In this case, there aren't any internal subclasses), and not what people may or may not do with subclasses of those (Unless php.net documentation indicates that user-defined subclasses may appropriately return those types).\n\nby \"focus on internal subclasses\", I mean ignore user-defined subclasses of ReflectionFunction that exist.\n\nE.g. a hypothetical library might make ReflectionMethod::setAccessible(bool $visible) end in return $this because they want a fluent interface, but handling that isn't in Phan's scope. Libraries and the code using those libraries can add suppressions/stubs to deal with any issues.. Oh, you're right (seriously?)\nphp > var_export(compact([[[[[['x']]]]]]));\narray (\n  'x' => 1,\n)\nstring|array (or string|string[]|array[]) would be more accurate, and catch more bugs. E.g. compact(0);. When phan is installed globally, it would point to Phan's vendor/ directory, not the project directory.\nnot your code: Also, I think the line comments might be switched?. This is a new feature, and should be disabled by default. We may enable it in a subsequent backwards incompatible release.\nAlso, check that the autoloader is actually the autoloader of the project being analyzed.. Add a check that this didn't already parse the file in question -- Some projects have inaccurate composer autoloading info, (E.g. for PSR unoptimized loading), and the file may not actually contain the class composer would expect it to have.. Set the parsed file to what it was before the autoloading started.\nAlso, if we already started parsing a file, this would need to check that we don't re-enter parsing\n(E.g. src/b.php references class NS\\B, but doesn't declare NS\\B, so the parser would try to autoload NS\\B, overflowing the stack. nit: class, not classs. This code may still parse the same file multiple times.\nPhan should only parse a file exactly once - It may end up with duplicate/alternate function/closure definitions, which may result in misleading error messages.. nit: This is immediately overwritten in both possible branches, remove this line. Phan is also distributed as a phar file. It can also be installed on its own and used to analyze a completely separate directory.\nIn order to be broadly useful, that would have to load composer from the other project (autoload_static.php)\n\nautoload_static seems to be used by php 5.6+, excluding HHVM\nThe autoloader can be created by create a (potentially) separate ClassLoader instance for the project being analyzed, then create an initializer, then invoke that initializer ( public static function getInitializer(ClassLoader $loader) in autoload_static.php).\nThe only file that would need to be loaded is autoload_static.php (Phan already declared ClassLoader)\n. Again, this feature will not be enabled for all projects. There are PHP projects that don't even use composer (E.g. collections of standalone scripts).\n\nsrc/Phan/CLI.php parses the command line options (E.g. options to set the analyzed project directory), so the ClassLoader instance to be used should be determined there, after the project directory is set.. > This is a new feature, and should be disabled by default.\nStill needs to be addressed. E.g. add a new option --use-project-composer-autoloader in src/Phan/CLI.php (see other comment in codebase.php).\nCould you point me at a small example project and .phan/config.php and composer.json as an example of what you're referring to? (I'm assuming the exact command used would be phan path/to/file.php) I'm not clear on what you mean.\n\nIs there a directory/file list for .phan/config.php in your use case?. The convention in the project is to use Phan\\ClassResolver\\ClassResolverInterface at the top, and use only the last part (class name) in the comments.\n\n(There's an exception for ambiguities such as ast\\Node and Microsoft\\PhpParser\\Node when both are used in the same file, but that is rare). Shouldn't this be file_exists($file_path) (And check if file_path is empty first (i.e. on the left) -- Short circuiting || evaluates the left hand side first). Emit an issue instead (E.g. with Issue::maybeEmit()). You can create a new Context()->withFile($file_path)\nSomething like PhanComposerLoaderMissingFile: Phan expected this file to exist for {CLASSLIKE} but no such file exists. (see src/Phan/Issue.php). Use FileRef::getProjectRelativePath instead. This should be vendor-dir, not vendor_dir.\nThis can be simplified to $vendor_path = $composer_settings['config']['vendor-dir'] ?? \"$cwd/vendor\";\nLGTM otherwise. Phan doesn't support numeric as a union type (e.g. no support for indicating that a variable is a string that represents a number). Remove this.. Phan has different casting rules for callable(Params): Return than what you have in mind.\nNotably, Phan does not allow callable(T1): X to be cast to callable(T1,T2=): X. This is why Phan is deliberately verbose here. (I was considering a separate syntax to somehow shorten this but haven't gotten around to it).\nAn example reason for why I chose to implement it that way:\n```php\n/*\n * @param callable(int,int=) $f\n /\nfunction test(callable $f) {\n    // Using this with a function expecting exactly one param is technically an error.\n    // Although current PHP versions don't warn about too many parameters,\n    // future releases might.\n    $f(1, 2);\n    $f(1);\n}\ntest(function(int $x) { echo $x * 2; });\n```. > If an integer between -128 and 255 inclusive is provided, it is interpreted as the ASCII value of a single character (negative values have 256 added in order to allow characters in the Extended ASCII range). Any other integer is interpreted as a string containing the decimal digits of the integer.\nThis block looks good. This failure case seems really unlikely in typical uses of deflate_add (E.g. invalid argument union types are provided), so I'd rather not include this.\nOther changes such as base64_decode seemed fine, e.g. a string could be passed in that was the correct type but a bad value.. https://secure.php.net/manual/en/eventbuffer.read.php (I guess that was for the older version)\nThe new signature took effect in april 2013, so I'm fine with this.. int|false according to https://secure.php.net/manual/en/eventbuffer.search.php#refsect1-eventbuffer.search-returnvalues if this is being modified.. This is stored in the deltas deliberately. With --target-php-version 7.2, Phan will reject resources. With 7.1, Phan will accept resources.\nsrc/Phan/Language/Internal/FunctionSignatureMap_php72_delta.php\n22:    'hash_copy' => ['HashContext', 'context'=>'HashContext'],\n141:    'hash_copy' => ['resource', 'context'=>'resource'],. Same comment about callable casting rules. callable():void can't cast to callable(mixed...):void. I'm aware that it causes false positives, but there's no syntax for accepting an infinite number of optional parameters right now.. lgtm for nearby changes. Prefer ?T in this map since there are small differences in the way Phan references T|null and ?T. LGTM otherwise. Would rather keep this until it gets put in a plugin like var_export.. same comment for all callables. Phan allows casting int to float, so this only affects error messages.\nI guess it still makes sense.. Good catch. https://secure.php.net/manual/en/soapclient.dorequest.php and all of the comments seem to indicate that $location exists. What's the reason for this change?. I should really replace these with string|string[]. > If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.\nCan be written as 'needle'=>'string|int' since that's the only difference. \nAlso, the same change should be made for the three other str[r][i]pos functions. As an implementation detail, Phan allowed T|null to cast to Other|null, the exact same way it would let T|false cast to Other|false or T|Common cast to Other|Common.\n\nHowever, Phan would warn about casting ?Other to ?T. It doesn't automatically normalize those, though there are tickets in the backlog to allow doing that.\n\n--strict-type-checking will make Phan warn about all of the above cases (with a separate weaker issue type). This needs a return type 'bool', as the first array element.. Done. Config::get_backward_compatibility_checks() is usually false. The new code should be added before this check.. The code that performs the check can go into its own helper method. $union_type = UnionTypeVisitor::unionTypeFromNode($code_base, $context, $node->children['expr']) is recommended for checking if something is a string (e.g. $union_type->isNonNullStringType() is similar to what you want as a check).\nThe code you have here would also warn about accessing negative indices of arrays, which is a false positive.. Add a test that this doesn't warn about negative offsets of arrays.\n. Remove this, using a non-integer as a string literal as a string offset is already a separate issue type and doesn't need to be checked for.\nsrc/008_negative_string_offset.php:17 PhanTypeMismatchDimFetch When fetching an array index from a value of type string, found an array index of type '-1', but expected the index to be of type int. I missed this the first time I looked at this code because I didn't expect it:\nAll of your changes to ParseVisitor need to be moved to visitDim in PostOrderAnalysisVisitor.\nThat's why you're seeing the strange undefined variables and undefined $this. UnionTypeVisitor::visitDim might be more appropriate, actually.\nThat already has checks if code is reading to or writing to that offset.. https://github.com/phan/phan/wiki/Developer%27s-Guide-To-Phan might be of help if you haven't seen it yet.\ne.g. https://github.com/phan/phan/wiki/Developer%27s-Guide-To-Phan#ast-node-visitors\n. Pretty much.\nThis code can be moved to the same place as PhanTypeMismatchDimFetch, since Phan is already checking the fetched offsets there\n. ```\n<?php declare(strict_types=1);\nerror_reporting(E_ALL);\necho bcmul(\"1236835138258123758135812\", 2) . \"\\n\";\n```\nFatal error: Uncaught TypeError: bcmul() expects parameter 2 to be string, integer given in ...\nI'd hoped they'd accept both, but apparently not.. Restore this. ...w_vars indicates that it will set those variables to string|int|float.\nIf the format specifiers match the argument count, would it set those to null?\nActually, I guess it might for end of file? I'd have to check. Phan's signature map default is 7.2 (latest), deltas are applied to move to 7.1 or 7.0 signatures.\n\nSo, you'd add this exact change, but remove it in the 70 delta file in the same folder\n\nPhan's target_php_version setting in .phan/config.php (Defaults to the runner's PHP version) is what chooses the PHP version to target.. Can also be array<string,string> for the majority of use cases, like it already was. This looks fine. I'd consider it a bug if you deliberately called $x = null; printf(\"%s\", $x);. There aren't any format specifiers I'm aware of that expect null. Users can pass printf(\"%s\", $x ?? '') if they want to be clear about what it should do.\nThis is also causing a test failure in tests/plugin_test. PREG_UNMATCHED_AS_NULL could be handled separately from this as a Phan plugin, and is rare, so I guess I'm fine with this.\nAnd preg_match can have named subpatterns, so string[] is right.. Same comment here. > I think it's too opinionated to report this as an error, because it works in PHP: \nWhich is fine for phpstan. Static analyzers can and already do have slightly different versions of the call maps (based on how their static analyzer is implemented, what philosophy they have on false positives/negatives, and what plugins they have) and just sync the most recent commits.\n. > There's a similar side-effect - strict_types=1 disallows passing objects with __toString somewhere string is accepted, but sprintf accepts it and it works...\nPhan also implements the same check when strict_types is not set to 1, allowing objects with __toString() to be passed to printf specifiers expecting string, etc.\nI reject null for reasons similar to rejecting true/false (they silently cast to 1 and the empty string, but are likely to be a mistake). Oh right, it's technically FunctionSignatureMap_php71_delta.php which contains the deltas from php70 to php71. Applying it (and php72_delta) backwards gives the signatures for php 7.0. I can add that after it's merged. This looks good to me. http://php.net/manual/en/sqlite3.createfunction.php#refsect1-sqlite3.createfunction-changelog\n\n7.1.4 | The\u00a0flags\u00a0parameter has been added.\n\nI should probably add these to the 71_delta as well\n. and any other uses of $flags. This is wrong. Leave it as is, it's perfectly acceptable to call a static method on an object.\nThe code checks if the method preAnalyzeNode is defined in the subclass of PluginImplementation that $plugin is.\nYour change to PluginImplementation::isDefinedInSubclass('preAnalyzeNode') is a no-op. Remove this from __set and __get; trigger_error(E_USER_DEPRECATED) calls Phan's own error handler, which immediately kills the process.\n. I think that $func->getFlags() === \\ast\\flags\\MODIFIER_STATIC might do the same thing. I'm not sure what type of suggestion this is trying to make.\nI also don't see much of a point in suggesting alternatives for single-character flags, and I'm not aware of other programs that do that.. This duplicates the above array, and they'll get out of sync\nThe flags array passed to getopt can be reused (by array_map(function(string $s) { return rtrim($s, ':'); })\n\nThe flags array should probably be moved into an @internal class const. This looks like it gives the user the least similar suggestions (e.g. if there were distances 5, 4, and 3, it would return the flags with distances 5 and 4, but not 3 (3 being the most suggestion)).\n\nasort would sort as [$key0=>3,$key1=>4,$key2=>5], arsort as [$key0=>5,$key1=>4,$key2=>3]. This block of code can be moved into a helper function getFlagSuggestionString($key) : string, which computes and returns $suggestionStr, returning the suggestion or the empty string.. An exception I just thought of was suggesting -h instead of -H, which was fixed on master (the above comment was referring to avoiding suggestions such as  --help for -P). nit: Host IP for Phan to listen for JSON requests on (just host, not IP), since this only supports IPs right now.\nMention that 0.0.0.0 can be used to listen for external requests, e.g. in docker\n(which you're doing)\n. 0.12.15 hasn't been released yet; Phan is still 0.12.15 (dev). Add this to the 0.12.15 (dev) section.. nit: Should just be $opt if strlen($opt) was 1. nit: Fix spacing. internal/phpcbf can do that (any any other style fixes) if you have phpcbf.phar in your $PATH. I still want to be able to have configured files in .phan/config.php.\nExamples of why files would be configured at the same time use_project_composer_autoloader is used:\n\nSpecify non-standard lib/ files, scripts, folders, etc. (e.g. Phan uses internal/ for some of it's own scripts)\nGlobal constants and functions (e.g. in vendor/) can't be autoloaded. You need to be able to specify the path to some_custom_dumper() if a composer module provides that\nProviding them in the CLI invocation every time is inconvenient.\n\nAlso, why is this setting file_list_only?\n\nThe way I see this being used is:\n\nUsers no longer have to specify vendor/A/B/src in directory_list and file_list, but specify their own source folders, miscellaneous scripts, etc to analyze\nSo they remove all of the vendor/A/B/src entries and enable use_project_composer_autoloader in .phan/config.php after upgrading to a Phan version that supports use_project_composer_autoloader\nUsers may still need to add some files in vendor/ manually because of class_alias(), autoloaders being unable to autoload global functions/constants, etc.. Change to @var array<string,string>. Support aliases for these ('composer', 'reflection') instead of making users provide the class name in config files.\n\n. Finish the sentence fragment. This comment doesn't apply, it looks like it was meant for init().\nAlso, it's awkward to have @throws between the @return bool and the description of what was returned. This issue won't be seen if the autoloaded file is in a directory excluded from analysis.\nMention that $file is missing in the file that caused the autoloading (pass $context to lazyLoadClassWithFqsen?)\nE.g. path/to/loadingfile.php:123 PhanAutoloaderMissingFile placeholder message for failing to load path/to/loadedfile.php. remove, Daemon::debugf should only be used in code related to the language server/phan daemon mode or when debugging. Use $autoload_path = Config::projectPath(Config::getValue('composer_autoloader_path')) - it will work with absolute paths in the config as well.. Add and document short aliases ('composer', 'reflection', etc.).\n. Expected autoloaded file to exist for {CLASSLIKE} at {FILE} but no such file exists.\nSee my other comment about exclusions excluding files in vendor/, etc.. Are there other files that were part of this unit test that haven't been committed yet? I think this is unreferenced.\nAlso, the naming conventions for unit test folders are usually tests/misc/autoload_test/{src,expected} or tests/autoload_test/{src,expected}. This type of test would also have composer.json and vendor/ as a subfolder?. Document that this returns the empty string on failure to resolve.. Also add this to plugins/codeclimate/engine (currently unused, but might as well be consistent about calling this before analyzeFileList)\n. Remove debugging code - This will crash the language server, etc.\nPrefer writing errors with fwrite(STDERR, ...)\nAlso, could emit a new type of Issue::Unanalyzable here to report the error. Call getCurrentParsedFile at the start and setCurrentParsedFile in a finally block.. What emits AssertionError?. Is there a check that we don't parse a given file twice?\nE.g. if the user-defined or composer autoloader falsely reports that A1 and A2 are in vendor/x/y/a.php (and it only contains A3), I think this might end up parsing a.php twice, which would lead to false positive PhanDuplicateClass, etc.. Looks good apart from this change - I already tried out assertContains and it doesn't work on all PHP installs\n\nNote: assertContains would call iconv_strpos(), which would emit a notice if phpunit is using symfony/polyfill-mbstring.\n\nContext: phan_error_handler deliberately terminates the program if a notice is seen. Undo this - This causes test failures (And phan sees the exact same parameter signatures so it ignores the latter 'parse_url\\'1' => ['string|int|null', 'url'=>'string', 'url_component='=>'int'],). Should be 'options'=>'int' to indicate that this signature should only be used when a second parameter exists. Did you mean to remove url_component from this, and make url_component mandatory in the alternate you added?\nWill also need to fix the test failure.\n```\n1) Phan\\Tests\\PhanTest::testFiles with data set \"0447_parse_url.php\" (array('./tests/files/src/0447_parse_url.php'), './tests/files/expected/0447_p...pected')\nUnexpected output in ./tests/files/src/0447_parse_url.php\nFailed asserting that './tests/files/src/0447_parse_url.php:5 PhanTypeMismatchArgumentInternal Argument 1 (string) is int but \\strlen() takes string\\n\n./tests/files/src/0447_parse_url.php:6 PhanTypeMismatchArgumentInternal Argument 1 (var) is string but \\count() takes \\Countable|array\\n\n./tests/files/src/0447_parse_url.php:7 PhanTypeInvalidDimOffset Invalid offset \"Host\" of array type array{scheme?:string,host?:string,port?:int,user?:string,pass?:string,path?:string,query?:string,fragment?:string}\\n\n' matches PCRE pattern \"/^[^\\r\\n]+\\:5 PhanTypeMismatchArgumentInternal Argument 1 (string) is int but \\strlen() takes string\n[^\\r\\n]+\\:6 PhanTypeMismatchArgumentInternal Argument 1 (var) is string but \\count() takes \\Countable\\|array\n[^\\r\\n]+\\:7 PhanTypeInvalidDimOffset Invalid offset \"Host\" of array type array{scheme\\?\\:string,host\\?\\:string,port\\?\\:int,user\\?\\:string,pass\\?\\:string,path\\?\\:string,query\\?\\:string,fragment\\?\\:string}\\|int\\|null\\|string$/\".\n```\nThis will require updating tests/files/expected/0447_parse_url.php.expected and possibly adding more tests. These unit tests can be run locally with vendor/bin/phpunit\n\nShould be assert_bool()\nShould add expectation for the warning about line 8.\n\nThere was 1 failure:\n1) Phan\\Tests\\PhanTest::testFiles with data set \"2138_version_compare.php\" (array('./tests/files/src/2138_versio...re.php'), './tests/files/expected/2138_v...pected')\nUnexpected output in ./tests/files/src/2138_version_compare.php\nFailed asserting that './tests/files/src/2138_version_compare.php:3 PhanParamTooFewInternal Call with 0 arg(s) to \\version_compare() which requires 2 arg(s)\\n\n./tests/files/src/2138_version_compare.php:7 PhanTypeMismatchArgument Argument 1 (v) is int but \\assert_bool() takes bool defined at ./tests/files/src/2138_version_compare.php:11\\n\n./tests/files/src/2138_version_compare.php:8 PhanTypeMismatchArgument Argument 1 (v) is int but \\assert_bool() takes bool defined at ./tests/files/src/2138_version_compare.php:11\\n\n' matches PCRE pattern \"/^[^\\r\\n]+\\:3 PhanParamTooFewInternal Call with 0 arg(s) to \\version_compare() which requires 2 arg(s)\n[^\\r\\n]+\\:6 PhanTypeMismatchArgument Argument 1 (v) is bool but \\assert_int() takes int defined at [^\\r\\n]+\\:10\n[^\\r\\n]+\\:7 PhanTypeMismatchArgument Argument 1 (v) is int but \\bool() takes bool defined at [^\\r\\n]+\\:11$/\".\n. Isn't microtime(true) a float?\nphp > var_export(microtime(true));\n1542841169.218598\nphp > var_export(microtime(false));\n'0.97055700 1542841174'. Same - this is a string. internal/phpcbf should be used to make this code consistent with Phan's coding style guidelines.\n~Prefer use ReflectionClass; and ReflectionException at the top.~ (EDIT: Don't use reflection - it won't work with Phan's support for internal stubs, for example)\nPrefer moving assignments outside of conditionals ($class_name) for readability. Use $code_base->hasClassWithFQSEN (and isPHPInternal) - Phan doesn't use Reflection for its checks of whether a class exists.. Now that I think about it, this definitely should be a plugin (e.g. add to MiscParamPlugin). See src/Phan/Plugin/Internal/MiscParamPlugin.php - e.g. define() is analyzed that way\n\nThis avoids cluttering up analyzeParameterList with multiple runtime checks (it only adds overhead to analysis of calls to that function, instead of all functions).\n\nSee $define_callback as an example of what this does. Also, Phan allows extracting strings from expressions such as concatenation, constant references (class_alias(self::SOURCE_CLASS, 'other')), etc.\nphp\n            if ($name instanceof Node) {\n                try {\n                    $name_type = UnionTypeVisitor::unionTypeFromNode($code_base, $context, $name, false);\n                } catch (IssueException $_) {\n                    return;\n                }\n                $name = $name_type->asSingleScalarValueOrNull();\n            }. ",
    "cweagans": "Fair enough. Read-only code analysis is still very useful. :)\n. @mindplay-dk After you've indexed everything initially (a process which takes some time even in commercial IDEs), the time-to-feedback in an editor should largely depend on how quickly you can query information from the sqlite database, which should be reasonably quick (or at least quick enough to not get frustrated at your editor). If it's not quick enough, the sqlite database could be moved to a ramdisk.\n. FWIW, I definitely want a choice as to whether or not Phan is running in the background. Ctags is really nice in that I can \"index\" my code, and then just do lookups in a file without having to have something hogging my RAM while I work with my other lightweight tools.\n. @mindplay-dk So what gain do you see by having a process running in the background? As I see it, the only thing that needs to be running is a file watcher, and when a file changes, the normal one-off analysis can be run on that file. Is that accurate? Or are you envisioning something else?\n. Oh, watchman looks cool. I was looking at https://github.com/koala-framework/file-watcher yesterday, but Watchman seems like a much nicer solution!\n. 1. Do we really need to run it against PHP nightlies? I think 7.0.0 is probably adequate for now.\n2. You could run it in a Docker container with the ast extension pre-installed. Happy to build this image if needed. I'm doing something similar for https://github.com/cweagans/mcrypt-polyfill, so happy to set it up for this project too if needed.\n. @jazzdan Well, it's not really \"officially\" supported, I guess. I'm just running arbitrary containers in https://github.com/cweagans/mcrypt-polyfill/blob/master/tests/run-tests.sh (and the specific contents of the container vary by environment).\nphpseclib takes a different approach (https://github.com/phpseclib/phpseclib/blob/master/.travis.yml#L30) which also works well.\n. I think we can close this now.\n. +1 for re-using the jetbrains php stubs. They're very complete and already have a well-established group of contributors.\n. Same question as @scaytrase here. I had written some code that generates stubs from the JSON version of the PHP manual, but that doesn't cover a lot of things, and frankly, the Jetbrains stubs are much better.\n. Ah, yeah, I was wondering if this was going to happen.\nProbably the easiest thing would be to do php -r \"echo PHP_VERSION_ID;\" > /path/to/cache/dir/version.txt at the end of a build, and then at the beginning of the build, compare the output of php -r \"echo PHP_VERSION_ID;\" with what's in version.txt. If they're different, nuke the php-ast directory and do a fresh build.\n. Yeah, go ahead. I have time to take care of it today.\n. Are there any plans to add this feature back in? It's extremely useful to me.\n. It should be there every time except the very first build (i.e. months ago). Even then, rm -rf won't complain.\n. ",
    "jazzdan": "@mindplay-dk can you elaborate on, or point us to, an example of how Hack's inference makes generics less useful?\n. This is great, thanks for explaining @mindplay-dk!\n. Could we just shell out to php -l for real-time feedback in an editor?\n. Hey @Seldaek,\nI had no idea about that! \nInteresting to note though that if file_get_contents fails then $http_response_header will not be populated, so we can't know statically if the variable will be set. See this code snippet that demonstrates this.\n. Note that this is going to be slightly tricky because of the dependency on the php-ast extension which isn't in pecl yet. I think we'll have to build the extension manually in the travis environment.\nThis restriction also means that we will not be able to run tests agains the nightly builds of PHP which is a bit of a bummer.\n. Hey @cweagans,\nWe definitely don't need to run it against the nightlies, but this feels like the type of code that might break with new versions of PHP so running it against nightlies will be valuable I think.\nAlso I know very little about Travis CI, this would be my first time setting it up! Can you provide them an arbitrary Docker container to run the tests in? If so then I think that's a great solution.\n. @morria it seems to me the problem is not that $p is null, it is that it is not int|null. It seems to me it should be both. Or maybe I am misunderstanding. :)\n. @morria we could consolidate them all into one issue as they are related, but this is a slightly different thing: find the definition of a given symbol, don't find the references to it.\nI also don't think this data is stored in the sqlite database yet.\n. I'll add this into a separate tool designed to provide functionality for IDEs.\n. Sure, I buy that. A separate \"binary\" designed to provide functionality for IDEs.\n. Holding off on this for now until the vim plugin is actually useful. For future reference we could use git subtree split to keep the change history. We would want the format of the new vim plugin repository to look like:\n```\n $ tree\n.\n\u2514\u2500\u2500 syntax_checkers\n    \u2514\u2500\u2500 php\n        \u2514\u2500\u2500 phan.vim\n2 directories, 1 file\n```\n. LGTM :+1: \n. @morria looks like sqlite3 is still required in composer, no?\n. All in all I think this looks great! Here are a couple possible tests/edge cases/topics for discussion.\nWe shouldn't allow generic types to be type annotations of static properties. Does this patch allow that?\nIf we have a generic collection, and we add disparate types to it, what happens? For example:\n``` hack\nclass Box {\n  private array $contents;\n  public function __construct() {\n    $this->contents = [];\n  }\n  public function addTo(T $item) {\n    $this->contents[] = $item;\n  }\n  public function get(): array {\n    return $this->contents;\n  }\n}\nfunction add_box_of_ints(Box $box): int {\n  return array_sum($box->get());\n}\nfunction unresolved(): void {\n  $box = new Box();\n  $box->addTo(4); // this should be fine\n  $box->addTo('Hi'); // but what now?\n}\nfunction resolved(): void {\n  $box = new Box();\n  $box->addTo(4); // this should be fine?\n  $box->addTo('Hi'); // what now?\n  $box->addTo(99); // and now?\n}\n```\nCan we use this functionality to enhance phan's support for typed arrays? Maybe be able to specify the array key type? I'm thinking it could be represented internally as array<string|int, T>.\nCan you annotate a parameter as accepting a generic class, but specify a concrete type? For example:\n``` hack\nclass Stack {\n   // this space intentionally left blank\n}\nfunction requireIntStack(Stack $stInt): void {\n  $stInt->push(10); // cool\n  $stInt->push(10.5); // not cool\n}\n```\nAnything weird to consider with generic interfaces?\nIt would be cool to have type constraints. Type constraints allow you to safely express specific operations inside of a generic class, sometimes expressed as T as U. This asserts that T must be a subtype of U. Here's an example lifted from the Hack docs:\n``` hack\nclass Complex {\n  private T $real;\n  private T $imag;\n  public function __construct(T $real, T $imag) {\n    $this->real = $real;\n    $this->imag = $imag;\n  }\n  public static function add(Complex $z1, Complex $z2): Complex {\n    return new Complex($z1->real + $z2->real, $z1->imag + $z2->imag);\n  }\npublic function __toString(): string {\n    if ($this->imag === 0.0) {\n      // cast the floating-point numbers to a string.\n      return (string)$this->real;\n    } else if ($this->real === 0.0) {\n      return (string)$this->imag . 'i';\n    } else {\n      return (string)$this->real . ' + ' . (string)$this->imag . 'i';\n    }\n  }\n}\n$c1 = new Complex(10.5, 5.67);\n$c2 = new Complex(4, 5);\n// You can add one complex that takes a float and one that takes an int.\necho \"\\$c1 + \\$c2 = \" . Complex::add($c1, $c2) . \"\\n\";\n$c3 = new Complex(5, 6);\n$c4 = new Complex(9, 11);\necho \"\\$c3 + \\$c4 = \" . Complex::add($c3, $c4) . \"\\n\";\n```\nWithout the as num constraint, a number of errors could be reported, such as:\n- The return statement in add performs arithmetic on a value of type T, yet arithmetic isn't defined for all possible type arguments.\n- The if statement in __toString compares a value of unknown type T with a float yet such a comparison isn't defined for all possible type arguments.\n- etc\nAnother possible constraint is super. T super U asserts that T must be a supertype of U.\nThe ability to express covariance and contravariance might be cool too. I like this explanation of the two in C#. This definitely shouldn't be in a v1 of generics, but food for future thought.\n. Looks like detecting this would require the same sort of facilities discussed in #277.\n. @aik099 ,\n\nIf col/line information of variable declaration is preserved in AST tree, then indeed we can get comment from original source file if it is present.\n\nJust as an FYI, only line number is preserved. Unfortunately column number is not preserved. :(\n. Hey @elliotchance, check this out https://github.com/etsy/phan/wiki/Writing-Plugins-for-Phan. Let us know if you have any questions.\n. Thanks, @a3020!\n. This was fixed in 669d376.. Looks good to me. Thanks @localheinz!. Looks good to me. Thanks for cleaning this up @localheinz!. Thanks @rcatlin!. I agree @localheinz. There are some problems with updating to a new version of the AST, which is required for phan to parse PHP 7.1 code but there should be no problem running phan on PHP 7.1 to analyze PHP 7 code.\nI'll merge this once Travis passes for this branch. THanks!. Thanks @localheinz!. To be clear: we can't check that a user misspelled @param, @var or @return but we can check that the arguments to those annotations make sense.. Anecdotally I've seen these fall in to disrepair without careful upkeep. If there are a lot of commits a maintainer might not know what to put in the NEWS file when cutting a release.\nI think it's important that we encourage PR authors to write descriptive commit messages to make it easy for the person cutting the release to put the NEWS file together.. Is it possible here that we won't know what types are being passed in? If so, what happens then?\n. Looks like we're missing type annotations on these constants.\n. Yoda condition?\n. Yoda condition? Also repeats a fair bit of code from hasGenericType.\n. Can generics be used for non-objects? For example:\nhack\nfunction maxVal<T>(T $p1, T $p2): T {\n  return $p1 > $p2 ? $p1 : $p2;\n}\n. Could we be more verbose with the error message here? Something like\nreturnInt() has a syntax return type of X but a docblock return type of Y\nMay need to make a new issue type for that, but I think overloading an existing one could be confusing.\n. When Phan checks to see if a class exists, does it do so in a case insensitive manner?. ",
    "mindplay-dk": "@jazzdan okay, let's have a look at Hack's idea of \"inference\":\n``` hack\nclass Repository\n{\n    public function add(T $entity) { ... }\n    ...\n}\n$repo = new Repository(); // (1)\n$repo->add(new User()); // (2)\n```\nIn (1) the type-argument is unknown.\nWait, no it isn't, because in (2) we see that a User is being added, so $repo must be a Repository<User> - so within this block scope, we \"infer\" the first declaration from the next.\nThis is opposite of what you might see in languages with actual inference, where you can infer the type of a local variable from a generic type, e.g. $user = $repo->getById(123) can infer $user as type User if we already know that $repo is Repository<User> and that getById() returns T.\nWhat Hack does is basically the opposite of inference - it's completely backwards, and also completely wrong in many cases, for example:\n```\n$repo = new Repository();\n$user = $repo->getById(123);\n```\nHere you can't infer the type of $user at all. I would have to call some arbitrary method that accepts T just to force the analyzer to \"infer\" the missing type-argument.\nOr worse, situations like:\n```\nfunction create_user() {\n    return new Dingbat();\n}\n$repo = new Repository();\n$repo->add(create_user());\n```\nThis will work just fine - unless I call $repo->add() more than once, with different argument types, within the same scope, the type-checker never be the wiser. It can't make any assertions about whether T in Repository<T> was supposed to be User or Dingbat, it just assumes I'm right. \nThe result is not type checking, but rather a form of implicit type-definition inferred from usage.\nBut usage is what we're supposed to be checking - if we use that as the source of type definitions, the whole thing is working against itself. It doesn't make any sense.\nI've brought it up here in the past, but \"fixing\" this would require a major language BC break, so it's not a popular request ;-)\nBy the way, Typescript's type system is an excellent source of reference, because it uses type-annotations to implement generics and inference, without any run-time footprint - much like what we would need to do in PHP with tags. And the JS type-system is even more dynamic than that of PHP - if it's possible with just annotations and inference, it's definitely possible in PHP as well, without attacking the problem from the flank and warping the concept of inference we know from other languages...\n. @morria language looks clearer in your patch, yes :-)\nI still wonder about the difference in handling generic arrays vs non-generic arrays though. I don't think there is such a thing as non-generic array; all arrays are generic - for example, array is simply short notation for array<int|string,mixed>, so there are really always two type-arguments, whether the source-code contains zero, one (value) or two (index and value).\nThe other thing I wonder about is arrays vs other collection-types, such as ArrayObject, Generator, Iterator, ArrayAccess, etc. - these are generic types in some future version, but also (now) are collection-types on par with array. In other words, you can already treat some known types as collection-types, and any userland type could already be a collection-type - I wonder if it would make sense to shape the type model to allow for that fact already at this point, e.g. with every type being capable of reporting this aspect of the type-system, e.g. with Type methods like:\n- isCollectionType() : bool\n- getIndexType() : Type\n- getElementType() : Type\n- isGenericType() : bool\n- getGenericTypes() : Type[]\n- getGenericTemplates() : Template[]\nWhere \"generic templates\" are the actual type-arguments a type accepts, e.g. I and T for array<I,T>, and \"generic types\" are known type-arguments a type has (which in the future may have been either defined or inferred) e.g. int and User for array<int,User>.\n(eventually a template type would likely carry more information than just it's name, is why I'm suggesting a class Template for that - for example, it might have a type constraint and/or a default type, which probably doesn't matter now, just to support array as the only generic type...)\nSo, for the time being, all type except array could be hard-coded to return false for isCollectionType() and isGenericType(), with getIndexType() and getElementType() returning null, and with getGenericTypes() and getGenericTemplates() returning [].\nSo for now, array might be the only type that returns true for isCollectionType() and isGenericType(), and of course reports it's element and index types, with getGenericTemplates hard-coded to return e.g. [new Template(\"I\"), new Template(\"T\")] and getGenericTypes() hard-coded to return [$this->getIndexType(), $this->getElementType()].\nAt that point, you could start hard-coding in support Iterator, Generator and all the standard collection-types, which would enable you to get inference for index and element types working in foreach loops for those types already, which would be nice either way.\nAnd then the road would be paved for eventually taking the type-arguments from those types and using them in generic method-definitions for the standard library, e.g. getting correct return-types and arguments for Iterator::current() : T and Iterator::key() : I etc. and then building towards full support for generics from there...\nThoughts?\n. Actually, it might look more like this:\n- isCollectionType() : bool\n- getIndexTemplate() : Template\n- getElementTemplate() : Template\n- isGenericType() : bool\n- getGenericTypes() : Type[]\n- getGenericTemplates() : Template[]\nNote the change from returning the actual index and template types, to returning the templates instead - these methods would throw if isCollectionType() is false.\nOf course you could still have Type::getIndexType() and Type::getElementType() declared as final in Type, just for ease of access.\nThe point is that collection-types have the index and element templates built-in.\nAnyways, maybe some of this would be more useful and easier to debate if I actually forked the project and hacked on it some? :-)\n. > You said \"The result is not type checking, but rather a form of implicit type-definition inferred from usage.\" In my understanding this is a requirement before we can even type check - inferring what the type really is, and keeping track of it or even writing that down as an annotation / type hint.\nYes, inference is a requirement - but what HH does in this case, is not infererence. I don't know what to call that - it's some kind of weird \"reverse inference\" or \"type patching\" - it's infering a type from usage rather than from context, which seems just incredibly wrong.\n\nDo you have a case where the inference in Hack did not work for you...?\n\nI don't recall. My bout with HH is ancient history by now. Since PHP 7, I now have zero interest in HH and would most likely never look at it again ;-)\nAn update on the php-doc PSR: it's fairly certain now, that generics will not be part of the PSR. We have been discussing it's inclusion in a future supplemental PSR, but it's unlikely to happen in this PSR.\nMeanwhile, I wrote a detailed RFC for the inclusion of generics in the core PHP language, and managed to grab the attention of (so far) two developers with past experience developing RFCs for PHP.\nThis is actually in-development now, though I expect it'll be a good while before we're ready to present this to internals - it's a pretty big challenge with lots of details and problems to work out.\n. It's great that you've been thinking about this :-)\nYour work on caching in a local DB isn't wasted anyhow, as it'll speed up offline testing, e.g. when you're frequently running an entire build, so that effort is worthwhile either way :-)\nBut even 200 msec would feel high if attempting to use this to generate real-time feedback in an editor - it shouldn't scan or report errors for the entire codebase, just for the file you're currently editing, so the design would need to allow for refreshing and inspecting only a specified file.\nThe fact that changes in the file you're editing could lead to failed inspections in other files, is less interesting in terms of real-time feedback - updating inspections across the codebase can happen 600 msec later, no problem, the issue is real-time feedback for changes made to the file in front of you before it's even saved. For that, I think daemonizing is probably the only real way to go.\n(of course, that's no necessarily part of your goals at all, but it would be nice, as I'm getting tired of waiting for a certain IDE to add certain, obvious missing inspections, which have been on their bug-tracker literally for years. I'd love to leave heavyweight IDEs behind, if I could get quality inspections and auto-completion from lightweight editors like Atom, Code, Brackets, etc.)\n. @allan-simon looks interesting - though the goal here appears to be auto-completion, not inspection?\n@cweagans SQLite also supports volatile/in-memory databases - so one could imagine a simple service which runs the full inspections, but doesn't hit the disk for a database or reloads PHP scripts. (Benchmarking this option should be as simple as switching to a memory database, then running the full inspection in a loop...)\n. > I definitely want a choice as to whether or not Phan is running in the background\n@cweagans of course! I wasn't suggesting that running analysis should replace on-demand analysis - running analysis would be a nice option, but on-demand analysis is crucial for use in continuous integration servers, build tools, etc.\n. @cweagans the idea is to bring the pace up to real-time, for integration with an IDE/editor. That's all.\n@morria I haven't really examined the model yet, but is there any reason why it wouldn't be possible to keep the model in memory and patch it when files change?\n. @morria if it's easy to keep and partially flush the model, that would be ideal - I'm going to bet it's a bit more work than just switching to sqlite::memory, but as @rlerdorf says, you'd still have the marshalling overhead.\nAnother issue that comes to mind, is resilience to incomplete/invalid code. I don't know that this is a feature you'd even want in your static analysis engine? It would need to be optional, since it doesn't make any sense to use it when analyzing a codebase for correctness.\nI think there's two ways to approach this: (1) in the analysis engine, with actual support for partial/invalid code, or (2) make it the client's responsibility.\nThe latter is probably much simpler on the analysis side, and moves some of the complexity to the client IDE/editor, since the analysis engine would simply reject invalid/incorrect code. The client would query an entire file at a time, getting a full map of all the available analysis information (e.g.indexed by line-numbers) whenever the file is in a valid state, and would then hold and modify the information locally - it would locally query this data set, and modify the map in-memory, by re-mapping line numbers when the user inserts/deletes line-breaks; it would get an updated analysis only when the file is in a good/valid state. This is probably a fair trade-off between complexity and reliability.\nIn either case, the client needs to be able to inject a file for analysis, e.g. submitting changes that haven't been persisted to disk yet. This is a daemon concern only, and probably could be implemented at the daemon-level easily. An alternative, simplified approach, would be for the client to mirror (PHP files from) the actual workspace into a temporary folder, and run the analysis against that folder - saving the working file on every keystroke to re-trigger analysis...\n. > An alternative, simplified approach, would be for the client to mirror (PHP files from) the actual workspace into a temporary folder\nFor the record, this is what PHP Storm does - it aggressively saves files to a temporary folder on every keystroke, and runs tools like CS and MD against the copy.\n. For the record, I searched first, but there is no real issue description in #43\n. I ran into this limitation while using the ternary operator with instanceof\nphp\n        $error = $e instanceof ErrorException\n            ? $this->determineSeverityTextValue($e->getSeverity())\n            : get_class($e);\nIn this example, $e is a known instance of ErrorException in the scope of the expression in the true condition only - but phan complains that $e doesn't implement getSeverity:\nPhanUndeclaredMethod Call to undeclared method \\Exception::getSeverity\nI bring this up merely to point out that this problem isn't limited to block scopes, but to scopes in general, which might help drive refactoring in the right direction from the get-go.\nI expect this is going to be tricky to change? Seems somewhat unavoidable though. This does pass inspection in PhpStorm, by the way.\n. Never implemented, and never fully spec'ed, but here's my draft for generics in php-doc, which was under discussion for a while, as part of the still-incomplete PSR for an official php-doc standard:\nhttps://github.com/mindplay-dk/fig-standards/blob/features/generics/proposed/phpdoc.md#generics\nThe person behind the PSR since gave up and didn't pursue this any further, as he felt it was generating too much discussion and the PSR was already doing enough of that without introducing a major new feature.\nLooks like @generic in your proposal is similar to @template in mine.\nTo address the issue of filling arguments (when inheriting a parent class or implementing an interface) my proposal has an additional annotation @extends, which can be used to fill type arguments, like this:\n```\n/*\n * @template T\n /\nclass Box\n{\n    // ...\n}\n/*\n * @inherits Box\n/\nclass HatBox extends Box\n{\n    // ...\n}\n``\n. > I ended up using@extendsinstead of@inherits` since in our case it only refers to the parent class (generic interfaces aren't supported). Does that seem reasonable to you?\n@morria I wouldn't recommend it - even if generic interfaces aren't supported at this time, someone might want to implement it down the line.\n\"extends\" implies class inheritance, being identical to the extends keyword; and \"implements\" suffers from the same problem, since it could imply interface implementation, which is why I settled on \"inherits\", which is more neutral.\nNote that extending generic classes and implementing generic interfaces is literally the same thing - both result in a public interface that follows the same set of rules, at least externally, the internal validation rules might differ, but in terms of the resulting interfaces there's no difference; a class that extends a generic parent class simply inherits the public interface of that class-type, same as inheriting the public interface of an interface-type.\nFor the same reason, I would argue that generic interfaces are just as important as generic classes - in fact, this would seem rather incomplete without it, and I expect it's absence would lead to problems. In other languages, in my experience, generic classes implement generic interfaces just as often as regular classes implement regular interfaces - without this feature you'll be facing some of the same problems you're facing due to absence of generics today, you just won't know it yet, because you don't have generic classes yet; once you do, I'm pretty sure the absence of generic interfaces will be just as problematic as the absence of generic classes is today.\nAnother way to think about this, is the reason we need generic classes in the first place - it's because generic type relationships can (and do) already exist in PHP code. The same is true for interfaces - generic type relationships already exist, we just don't have any means of declaring them. It's precisely the same problem, so I'm sure it'll surface once you start declaring generic classes.\n. > My plan is to leave typed arrays alone for the time being and treat them as a separate system\n@morria I'd recommend against it. Instead, I'd suggest treating array as essentially an alias for ArrayAccess, and array<T> as an alias for ArrayAccess<T>, e.g. with a built-in interface like:\n```\n/\n * @template TElement\n */\ninterface ArrayAccess\n{\n    /\n     * @param mixed $offset\n     * @return bool\n     */\n    public function offsetExists($offset);\n/**\n * @param mixed $offset\n * @return TElement\n */\npublic function offsetGet($offset);\n\n/**\n * @param mixed $offset\n * @param mixed $value\n */\npublic function offsetSet($offset, $value);\n\n/**\n * @param mixed $offset\n */\npublic function offsetUnset($offset);\n\n}\n```\nThen treat e.g. $a[1] as ArrayInterface<T>::offsetGet(1) and $a[1] = \"foo\" as ArrayInterface<T>::offsetSet(1, \"foo\") etc.\nIn other words, normalize the way you treat types at the lowest level possible - as opposed to mimicking how it's actually implemented in PHP; all that should matter is the type relationships. Even if there are no actual methods implementing ArrayInterface in the built-in array type, the behavior, validation and type-relationships are all the same.\n. > > It would be cool to have type constraints.\n\nWe'll leave that for the future.\n\nI agree, type constraints are not a critical feature.\nWhile generic type relationships are present in existing PHP code, the constraints on those relationships are much less important than the relationships themselves - it would of course be nice to have, some day, but it's not a must have.\n. ",
    "linse": "You said \"The result is not type checking, but rather a form of implicit type-definition inferred from usage.\" In my understanding this is a requirement before we can even type check - inferring what the type really is, and keeping track of it or even writing that down as an annotation / type hint. \nIf all the types are inferred (even to an \"any\" type, if that's the best we can do) then we can still do some valuable type checking. For example:\n``` php\n<?php\nclass A {\n  // Input: Type T1, Type T2 (doesn't matter what they are exactly)\n  public function example($a, $b) {\n    doSomething($a);\n    return $b; // return T2\n  }\n}\n```\nWe can know that example returns something of Type T2 (the second argument) without needing to know what exactly it is.\nThis example also applies to generics in Hack. I tried to expand your example into a complete code example.\n``` hack\n<?hh  // strict\nclass Adder {\n    public function doStuff(): void {\n        $repo = new Repository();\n    $repo->add(new User());\n\n    $thing = $repo->get();\n}\n\n}\n```\n``` hack\n<?hh // strict\nclass Repository {\n    private array $internalList = [];\npublic function add(T $entity): void {\n    $this->internalList[] = $entity;\n}\n\npublic function get(): T {\n    return array_pop($this->internalList);\n}\n\n}\n```\n``` hack\n<?hh // strict\nclass User {\n}\n```\nI put each of these in a separate file and ran the Hack type checker, asking it for the type of $thing here\n$thing = $repo->get();\n  ^\n$ hh_client --type-at-pos \"8:11\" < Adder.php\nUser\nIt correctly inferred that $thing is of type User. \nIf we add a new type, say Shop, and add it to the repository like so\n``` hack\n<?hh  // strict\nclass Adder {\n    public function doStuff(): void {\n        $repo = new Repository();\n    $repo->add(new User());\n    $repo->add(new Shop());\n\n    $thing = $repo->get();\n}\n\n}\n```\nWe can ask the type checker again what it thinks $thing is\n$ /usr/bin/hh_client --type-at-pos \"9:11\" < Adder.php\nUser& Shop\nWe see that it correctly inferred that the function returns both User and Shop now. Was this what you would have expected? It seems to be correct.\nDo you have a case where the inference in Hack did not work for you, aside from the generics case?\nFor generics in Hack I understand that it's intentional that the type arguments are not checked in the runtime (yet). I understand that it would be nice to have in the future.\nI understand why they took this intermediate step, and see a similar path for Phan in the future. This is a hard problem to solve in PHP.\n. ",
    "allan-simon": "Note that for autocompletion of php, padawan has taken also the way of being runned has a service running in background https://github.com/mkusher/padawan.php \n. @mindplay-dk , yup exactly, padawan is only meant for autocompletion , but they do type infering through inspection,  my point was mainly to show this project is build on a service architecture, which could be an inspiration if Phan was to go that way too :) \n. ",
    "staabm": "So you are discussing something like hh_client - the hhvm typechecker?\n. Your rename also changed mode-bits to 755 (+x)\n. @morria just a note. @var is also allowed within functions/methods\nfunction g() :int {\n    /** @var DateTime $var */\n    $var = false;\n    $var = f();\n    return $var->getOffset();\n}\n. @morria will phan detect those blocks in the future as dead code?\n. inheritDoc is meant to \"get the textual\" parts of a comment to be re-used in a textblock of a overridden methods docblock.\nhttps://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.inlineinheritdoc.pkg.html\n. fix confirmed\n. @morria thx, some of the warnings are gone.. I will check what the remainings are, but those could indeed be caused by wrong typing ;-).\nthank you!\n. fix confirmed\n. fix confirmed.\n. fix confirmed\n. Yeah the problem is that the return type in php7 is invariant.\nThis situation doesnt voliolate LSP, but implementation wise its not supported yet in php7.\nFeel free to close in case you target php7 return type compat.\n//cc @evert\n. Should phan itself also report un-used imports?\n. You should skip the test when the soap extension is missing\n. see https://github.com/etsy/phan/commit/96e116e85fa2ca721193b1f3fde89e65da783143 for reference\n. Should the singature map depend on the version of the extensions?\n. Maybe we could detect the expected versions based on composer.json\n. to go this idead a step further... would it be possible to detect actual BC breaks in the php code itself?\nlets say, I dont want accidental BC breaks in e.g. a stable release branch... could phan detect whether my changes constitute a actual bc break?. same for SoapVar\nphp\n                $authvalues = new SoapVar(\"http://www.example.org\", XSD_ANYXML);\n-> PhanUndeclaredClassMethod Call to method __construct from undeclared class \\SoapVar\nand SoapHeader\nphp\n                $header = new SoapHeader(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\", \"Security\", $authvalues, true);\n-> PhanUndeclaredClassMethod Call to method __construct from undeclared class \\SoapHeader. you are right... didnt think about cli needs those extensions. thank you so much!. those stups sound very usefull (especially when you dont want to add xdebug, which slows down things considerably)\nany eta for 0.10.1?. thx for the hint. 'enable_class_alias_support' => true didn't work for me, because my class_alias call is part of the bootstrap logic (which is also contained in a class-method). (just moved the alias into the global scoped, and its working then though). thx for the hints.\nis it possible to point phan to a phar-file so phan gets aware of all classes defined in this archive?\nwe use some libs as phars, e.g. deployer, phpunit etc. and it would be cool if phan would not error about missing functions/methods/classes which at runtime will be provided because the apps will be run with those phars.. no assertions in the test?\n. maybe pass system error thru?. ",
    "Seldaek": "True, that's even nastier behavior :) \nIn this case though we use it only after checking if it isn't empty which should enable a static analysis AFAICT, see https://github.com/composer/composer/blob/master/src/Composer/Util/RemoteFilesystem.php#L218\n. Cool thanks for the quick turnaround, I'll try to do another pass over the weekend and look at the less common errors to see if I find any other false positives :)\n. Great, that'll fix a bunch of issues I was seeing :)\n. Thanks but that's already quite cool. Does it also work with things like is_int/.. for type detection?\n. Oh well, that's just a dupe of #28 it seems.\n. Well as a workaround what I do is cat phan.log | grep -v vendor/ which eliminates those results but it'd be nicer to avoid analyzing them fully in the first place.\n. @morria oh.. that's not listed in the help though, is that intentional because it's an internal thing one should not rely on? Anyway I guess the best down the line would be to be able to say: Scan this directory, and include that file to have an autoloader capable of including things so all classes can be resolved. That way vendors are ignored by default but discoverable just in time (which would solve dependency errors with file ordering as well).\n. Indeed it isn't, I just started off with my situation but I didn't reduce it to the max.. anyway I updated the test (and fixed chmod.. not sure wtf happened there).\n. Thanks\n. Seems like I still get those errors actually. My repro case up here with the GitLab.php file still triggers the warning. Do you mind reopening?\n. Ah that could be the issue yeah, I use this pattern of \"optional dependency injection\" quite extensively. The type of $p is guaranteed to stay A though in this case.\n. Great thanks that'll fix a bunch of false positives I had! I'll run a new pass when I get a chance and dig in further into the leftover failures.\n. Ah.. I think xdebug defaults to 100 or 200? I tried with 500 and then \n50000, I guess I was unlucky there :)\n. Sounds good, didn't know you had a map like that, I'll PR next time ;)\n. I have a possibly related issue (demo: https://3v4l.org/cBUv2)\nBasically PHP allows you to re-type the return type hints when extending a class, as long as the return type isn't enforced by an interface. Phan freaks out on this with a PhanParamSignatureMismatch.\nIf you'd rather have a new issue for this let me know, as it's return-type and not args it may not be the same fix.\n. Yeah maybe we can leave it as is.. I guess I can live with the extra warnings in a few places. Thanks anyway :). Oh I wasn't aware of the @suppress, that is fine yeah. I can see that it's edge casey. Thanks for the pointer.\n. Not sure where to see your demo patch, but tbh I don't know if I would care enough about the couple createMock-related false positives to go the full length of creating a plugin. I suppose one could make a generic phpunit plugin handling this and perhaps other issues and then make it part of the phan distro somehow, that I might see value in. Doing it on a per-project basis doesn't seem worth the time unless you have a ton of false positives.. One should also add if (!is_null($x)) to the list I'd think. Just for completeness' sake.. Oh sorry didn't realize that :). Similarly, I have a case of PhanTypeMismatchArgument Argument 4 (foo) is string but bar() takes ?string. Might be related? Some mis-handling of the nullable type ?... syntax? If you don't think it's the same I can report in a new issue.\nBasically looks like:\n```php\nfunction bar(?string $foo) {\n}\nbar('');\n```. Unfortunately this isn't on public code. As for the config I run phan\nwithout any special switches.\nOn 9 Mar 2017 05:14, \"Tyson Andre\" notifications@github.com wrote:\n\nIs the codebase you're using and the phan config you're using public? I\ncan't create a simple, self-contained example (The below snippet doesn't\nemit any issues when phan is run on it with the strict settings)\nWe might be caching the wrong type for string somehow, but that seems\nunlikely.\n<?php\nfunction takesOptionalArray(?array $x) : array {\n    return $x ?? [];\n}\n/* @return null[] /\nfunction myOtherMethod() {\n    return ['a' => null];\n}\nfunction mymethod() {\n    takesOptionalArray(myOtherMethod());\n}\nfunction bar(?string $foo) {\n}\nbar('');\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/etsy/phan/issues/582#issuecomment-285250038, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALNfniU7TtyWI28zXUxpjGRbBzCcZGIks5rj3y7gaJpZM4MXC8b\n.\n. \n",
    "stanistan": "Would a good way of doing this be something like, linking to a pull request (or just a patch on a fork), and having that patch have all of the things needed to do to get phan up and running? And then link to these patches from that wiki page as concrete examples of what people are doing and how it works.\n. ",
    "addshore": "@rlerdorf @scaytrase It looks like no more CLA is needed https://github.com/JetBrains/phpstorm-stubs/commit/fe7f9f2549af1c86d9bf991c7d704a7d01a8cb0c#diff-6a3371457528722a734f3c51d9238c13\nAlso it looks like there is a PR to add a composer.json and add the repo to packagist, which would allow us to easily use it. https://github.com/JetBrains/phpstorm-stubs/pull/149. You can now include the phpstorm stubs via composer!\nSee https://packagist.org/packages/jetbrains/phpstorm-stubs. Thanks for the speedy merge!. ",
    "DerManoMann": "I'll see if I can isolate the file and reduce the code to make it eaiser to debug - opening the code is unfortunately not an option.\n. Ok, this should be simple enough I think:\n```\n<?php\nclass WhereIsApp {\nprotected function __construct() {\n    global $_APP;\n\n    if ($_APP) {\n        echo 'global app';\n    } else if (function_exists('get_APP')) {\n        $_APP = get_APP();\n        echo 'get_APP';\n    } else {\n        echo 'no app';\n    }\n}\n\n}\n```\n. Its a custom function that is not available in all code path in a very old code base. However, I do not think that is relevant as the function isn't even called in the code.\nAlso, there are other cases that are legitimate and common in older code. For example, the following fails with the same exception:\n```\nfunction my_strlen($s) {\n   return 4;\n}\n$s = 'abc';\nif (function_exists('mb_strlen')) {\n    echo mb_strlen($s);\n} else {\n    echo my_strlen($s);\n}\n```\n. Yes, that works - thanks. I do run into a segfault now ;) but I guess that is a different issue and I seem to remember having seen an issue for that already...\n. Yes, looks like an endless loop in PHP:\n```\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/php...Reading symbols from /usr/bin/php...(no debugging symbols found)...done.\n(no debugging symbols found)...done.\nMissing separate debuginfos, use: debuginfo-install php-cli-7.0.0-1.el7.remi.x86_64\n(gdb) run ../../phan/phan -f phan_files.txt -i\nStarting program: /usr/bin/php ../../phan/phan -f phan_files.txt -i\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nProgram received signal SIGSEGV, Segmentation fault.\n0x00005555557c45c2 in gc_mark_grey ()\n(gdb) bt\n0  0x00005555557c45c2 in gc_mark_grey ()\n1  0x00005555557c4656 in gc_mark_grey ()\n2  0x00005555557c4656 in gc_mark_grey ()\n3  0x00005555557c4656 in gc_mark_grey ()\n4  0x00005555557c4656 in gc_mark_grey ()\n5  0x00005555557c4656 in gc_mark_grey ()\n6  0x00005555557c4656 in gc_mark_grey ()\n7  0x00005555557c4656 in gc_mark_grey ()\n8  0x00005555557c4656 in gc_mark_grey ()\n9  0x00005555557c4656 in gc_mark_grey ()\n10 0x00005555557c4656 in gc_mark_grey ()\n11 0x00005555557c4656 in gc_mark_grey ()\n12 0x00005555557c4656 in gc_mark_grey ()\n13 0x00005555557c4656 in gc_mark_grey ()\n14 0x00005555557c4656 in gc_mark_grey ()\n15 0x00005555557c4656 in gc_mark_grey ()\n16 0x00005555557c4656 in gc_mark_grey ()\n17 0x00005555557c4656 in gc_mark_grey ()\n18 0x00005555557c4656 in gc_mark_grey ()\n19 0x00005555557c4656 in gc_mark_grey ()\n20 0x00005555557c4656 in gc_mark_grey ()\n21 0x00005555557c4656 in gc_mark_grey ()\n22 0x00005555557c4656 in gc_mark_grey ()\n23 0x00005555557c4656 in gc_mark_grey ()\n24 0x00005555557c4656 in gc_mark_grey ()\n25 0x00005555557c4656 in gc_mark_grey ()\n26 0x00005555557c4656 in gc_mark_grey ()\n27 0x00005555557c4656 in gc_mark_grey ()\n28 0x00005555557c4656 in gc_mark_grey ()\n...\n```\n. I do not know if/how to answer this. However, I installed some debug-info stuff and I get a few more details. Hope this helps:\nProgram received signal SIGSEGV, Segmentation fault.\ngc_mark_grey (ref=0x7fffe18c5d20) at /usr/src/debug/php-7.0.0/Zend/zend_gc.c:431\n431                                     ZVAL_OBJ(&tmp, obj);\n. ah, sorry, no that is unfortunately not an option. I might try to reduce it to something smaller that I can show.\n. ",
    "chorry": "Hey guys, seems like i've encountered similar bug with vagrant machine:\nIt does same SEGFAULT when analyzing files, but also crashes when used with just -h.\nDunno though, if its phan bug, or issues with vagrant machine\n```\nvagrant@php7dev:/vagrant_data$ gdb php\nGNU gdb (Debian 7.7.1+dfsg-5) 7.7.1\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from php...done.\n(gdb) run phan.phar -h\nStarting program: /usr/local/bin/php phan.phar -h\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nUsage: phan.phar [options] [files...]\n[most of help output was cut]\n -h,--help\n  This help information\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000a75732 in zend_string_release (s=0x7fffeb02a878) at /home/vagrant/php-src/Zend/zend_string.h:269\n269             if (!ZSTR_IS_INTERNED(s)) {\n(gdb) bt\n0  0x0000000000a75732 in zend_string_release (s=0x7fffeb02a878) at /home/vagrant/php-src/Zend/zend_string.h:269\n1  0x0000000000a75a16 in zend_restore_ini_entry_cb (ini_entry=0x14d2bb0, stage=8) at /home/vagrant/php-src/Zend/zend_ini.c:67\n2  0x0000000000a75a9a in zend_restore_ini_entry_wrapper (el=0x7fffeda60d00) at /home/vagrant/php-src/Zend/zend_ini.c:82\n3  0x0000000000a69541 in zend_hash_apply (ht=0x7fffeda59360, apply_func=0xa75a72 ) at /home/vagrant/php-src/Zend/zend_hash.c:1460\n4  0x0000000000a75c3f in zend_ini_deactivate () at /home/vagrant/php-src/Zend/zend_ini.c:142\n5  0x0000000000a53486 in zend_deactivate () at /home/vagrant/php-src/Zend/zend.c:990\n6  0x00000000009c6a06 in php_request_shutdown (dummy=0x0) at /home/vagrant/php-src/main/main.c:1810\n7  0x0000000000b13d15 in do_cli (argc=4, argv=0x14b2150) at /home/vagrant/php-src/sapi/cli/php_cli.c:1142\n8  0x0000000000b143fd in main (argc=4, argv=0x14b2150) at /home/vagrant/php-src/sapi/cli/php_cli.c:1345\n```\nPhar being used is https://github.com/etsy/phan/releases/download/0.6/phan.phar\nVagrantbox is \"rasmus/php7dev\"\nHost OS: Ubuntu 16.04\n. ",
    "netpalantir": "I have a segfault too. gdb just spits out this:\nProgram received signal SIGSEGV, Segmentation fault.\n0x00005555557ef242 in zend_objects_store_del ()\nAnything I can do to help debugging it?\nUsing Ubuntu 16.04 with PHP 7.0.10 from ~ondrej's ppa (7.0.10-2+deb.sury.org~xenial+1).\nIt works if ran with -a. When ran with -p, it will reach 100% of \"method\" and then segfault.\n. Ouch! I had a typo in my config file!!! \n\"exclude_analysis_directory_list\" => [\n        'siteTYPO_WAS_HERE/vendor/'\n    ],\nSummarizing, if I point exclude_analysis_directory_list to a non-existent directory it will reliably segfault. If I put a valid directory, it will work.\nShould I open a new Issue for this, as it looks like a separate problem? I don't know whether this is reproducible for other setups.\n. Yes. Here it goes. It looks reproducible to me. I've put a very small archive here: https://dl.dropboxusercontent.com/u/2411476/phanbug.tar.gz\n1. tar zxvf phanbug.tar.gz\n2. cd phanbug/site && composer install\n3. cd ..\n4. ./site/vendor/bin/phan\n. Right, so it must be something on my machine... This one segfaults reliably for me. I will try to see if I can build a virtual machine and reproduce it and I will let you know.\n. ",
    "acim": "Line 35 should be modified to:\nset_exception_handler(function(\\Throwable $exception) {\nSo, \\Throwable instead of \\Exception.\n. That's another way to fix it :)\n. ",
    "flodnv": "Hi @morria ! I found out that this also currently happens with global constants... Basically, in a file included everywhere and analyzed by Phan, we have:\ndefine('CONST', 'value');\nThen in another file (note: not a class, just a file full of functions) we use it in various functions, for example:\n$a = [\n     \"key\" => CONST\n];\nAnd all is well, no Phan error on this line. However, we also use it as a function's default param, as such:\nfunction f($param = CONST) {\n  ...\n}\nAnd Phan flags this as an error: \nPhanUndeclaredConstant Reference to undeclared constant \\CONST\nWe are using v0.8.6. Is this a known issue, or maybe has this been fixed in later releases?\nThanks, and cheers for this great tool! . ",
    "tpunt": "@scaytrase Done :)\n. I don't think php-ast will be able to do anything about it, since it only seeks to expose the internal AST, which has already discarded such inline comments. Maybe a naive regex could perform a quick search for such comments, or use another code parser (PHP-Parser?) to retrieve the AST of each method inspected with the (not discarded) inline comments.\n. ",
    "augmenter": "Same thing happened to me too, I had xdebug disabled in apache\\php.ini, but when running phar, it will actually use the php.ini under \\php folder, so keep an eye out for that too if you're still having issues with recursion. (I'm using wamp on windows, and it copies php.ini to apache and then wamp instance of php uses that ini file, instead of its own...)\n. ",
    "black-silence": "Great, thanks.\n. php\n$nulltest = null;\nif ($nulltest !== null) {\n    echo $nulltest->format('d');\n}\nSame message so I don't think it's related to try/catch? This example doesn't make sense but imagine the variable is set by some function that returns object|null.\n. Yes, looks good, thanks.\n. ",
    "henneboele": "@morria: Yes, there is a namespace for the class. It's a symfony command with a namespace representing the standard structure of a sf bundle. The property is a member of this command. So not through a dependency, though this command has of course some. The master is friday's version (b7a4a8db404f) cause I had trouble with the one I pulled today. I will add a class with your example above and see if I run into the same issue.\n. I did some tests now with a single class and no dependencies as your example above. No issues. I added a namespace, no issues. So it must be something about dependencies as I load a lot of more files. I will do some more investigation tomorrow.\n. So, finally here is a test case to reproduce.\n```\n<?php\nnamespace NS;\nclass C\n{\n    /*\n     * @var \\DateTime\n     /\n    private $p;\npublic function f()\n{\n    $this->p = $this->getDeleteDate();\n    $this->p->format('Ymd');\n}\n\n/**\n * @return \\DateTime\n */\nprivate function getDeleteDate()\n{\n    $deleteDate = new \\DateTime();\n\n    return $deleteDate;\n}\n\n}\n```\nInvoked phan with the following arguments:\n```\nphan -y=10 --progress-bar ./test.php\n   analyze \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% 23MB/23MB\ntest.php:14 PhanUndeclaredClassMethod Call to method format from undeclared class \\NS\\datetime\n```\n. ",
    "websmurf": "Hi, sorry to bump such an old issue. Is there a simple solution for this issue? Or should we just add PhanPossiblyNonClassMethodCall annotations on places where this happens?. Hm, I'm still getting this error, will have a look at why exactly.\nThis is my code: \n```php\npublic function paginateByFilterCommand(\n        FolderFilterCommand $filter,\n        array $orderBy,\n        int $perPage\n    ): LengthAwarePaginator {\n        $builder = $this->createQueryBuilder('f');\n    // Apply active filter (if it's set)\n    if ($filter->getActive() !== null) {\n        $builder->andWhere('f.active = :active')->setParameter('active', $filter->getActive()->getValue() ? 1 : 0);\n    }\n\n    if ($orderBy !== null) {\n        foreach ($orderBy as $field => $order) {\n            $builder->addOrderBy('f.' . $field, $order);\n        }\n    }\n\n    return $this->paginate($builder->getQuery(), $perPage);\n}\n\n```\nThis is the error: \nsrc/Data/Repositories/Doctrine/Asset/Folder/FolderRepository.php:64 PhanPossiblyNonClassMethodCall Call to method getValue on type ?\\Nostradamus\\ValueObjects\\BooleanValueObject that could be a non-object\nIt complains about this line: \nphp\n$builder->andWhere('f.active = :active')->setParameter('active', $filter->getActive()->getValue() ? 1 : 0);\nwhile there's a line before this one: \nif ($filter->getActive() !== null) {. Oki, that's good to know. Will try that. \nThanks!. Thanks for the update!. ",
    "nikic": "@morria Maybe I'm misunderstanding the issue, but from looking at that code it would seem that the problem here is that you neglect to do alias resolution for the first namespace component (and only do it for unqualified names). Namespace resolution for classes shouldn't require any non-local knowledge.\n. ",
    "terinjokes": "Most vim plugin managers can be configured to handle non-root plugins (usually via a \"rtp\" setting). For example, for Vundle it could conceivably be setup this way:\nvim\nPlugin 'etsy/phan', {'rtp': 'plugins/vim-syntastic/'}\n. @morria I do not, else I would have included it in the original report. I'm happy to help out in trying to narrow it down, but I don't know where to start.\nA first guess is to figure out what classes phan sees when it scans the files in question. Is it possible to output this information?\n. @morria thanks, for that. outputting the FQSENs parsed should really be a CLI flag for debugging. :smile: \nNo, the missing classes do not show up on that list, until I add \"vendor\" to directory_list. The documentation in the configuration file really makes it seem like the exclude_analysis_directory_list is in addition to directory_list, so I'm not sure what the expected behavior is.\n. @morria I think it's much more clear now, but I agree that it's not quite perfect. Perhaps this is any clearer?\ndirectory_list\nA list of directories that should be parsed for class and method information. After excluding the directories defined in exclude_analysis_directory_list, the remaining files will be statically analyzed for errors.\nThus, both first-party and third-party code being used by your application should be included in this list.\nexclude_analysis_directory_list\nA subset of the directory_list list that defines files that will be excluded from static analysis, but whose class and method information should be included.\nGenerally, you'll want to include the directories for third-party code (such as \"vendor/\") in this list.\n. @morria I asked a writer we have on staff to take a quick glance on this issue. He said it was \"solid\", and pretty clear for what is a complicated and technical topic.\nLet me know if there's anything I should change.\n. I think you had it correct the other way around, at least with respect to other standard UNIX tools.\n. > The ls utility exits 0 on success, and >0 if an error occurs.\nYes, that patch looks good.\n. ",
    "tybulewicz": "Hi @morria,\nIt works now, thanks a lot!\n. @morria after latest commit (6633c00) I'm getting warnings like:\nPhanSignatureMismatch Declaration of function\nbuildForm(\\symfony\\component\\form\\formbuilderinterface $builder, array $options) should be compatible with function \nbuildForm(\\Symfony\\Component\\Form\\formbuilderinterface $builder, array $options)\nit seems that namespaces from files included from file_list entry in config file are not lowecased\n. @morria No issues reported using f706209 revision, thanks!\n. I don't know if it's related, but I have similar error:\nphp\nclass c {\n    function f() {\n        if (list($a) = [1]) {\n        }\n        var_dump($a);\n    }\n}\nproduces: PhanUndeclaredVariable Variable $a is undeclared\n. ",
    "QuentinCurtet": "Hi @morria \nThank you for your answer,\nUnfortunately, i have nothing of this in my console or in my file.\nHere it's an extract of my file\nfunction if_mysql_query($sql, $is_master=0, $database='') {\n    ... some code ...\n    if (($query = mysql_query($sql.'#'.$from))) {\n        return $query;\n    }\n    ... some code ...\n}\nAnd then i ran : \nphan -b myfile.php\nAnd the output is : \nsql.php:54 VarError Variable $db is not defined\nAnd this error is caused by an extract of a sql request\nThanks for your help.\nCordially\n. I work on the php7dev Vagrant for information. I don't know if it can help you.\n. ",
    "OndraM": "Actually, by phpDoc standard, the inheritdoc should not be necessary at all, as the inheritance is implicit.\n\"If a PHPDoc does not feature a part, such as Summary or Description, that is present in the PHPDoc of a super-element, then that part is always implicitly inherited.\"\n\"Inheritance takes place from the root of a class hierarchy graph to its leafs. This means that anything inherited in the bottom of the tree MUST 'bubble' up to the top unless overridden.\"\n. ",
    "NoodlesNZ": "Any movement on this? I just came across the same problem.\nI have tried with/without {@inheritDoc}, but phan still complains with PhanParamSignatureMismatch. ",
    "monkeyphysics": "Thanks for your reply, that works perfectly.\nIt does give me a very wide graph, but I guess that's a matter of playing around with the dot attributes. Do you perhaps know how Rasmus made it \"radial\" (by lack of knowing the correct phrase; the tree being rendered outward in all directions)?\n. Awesome, thanks!\n. ",
    "bilogic": "I have\n```\n$v[\"price\"] = 1;\n$v[\"sku\"] = 2;\nextract($v);\necho $sku;\necho $price;\n```\nextract() is used to share internal variables inside a class so that one can access the values using $price instead of $this->price. Any idea if this false positive can be prevented? Thank you.\n. ",
    "Trainmaster": "Looks fine on my Windows 7 machine\n\n. @morria \nI didn't manually deprecate \\DateInterval. And I keep getting errors on my Windows machine for other classes, for example:\nPhanDeprecatedClass Call to deprecated class \\mysqli defined at internal:0\nPhanDeprecatedFunction Call to deprecated function \\mysqli::__construct() defined at internal:0\n. @morria I tested with etsy/phan:dev-master#7c39561, still the same problem.\n. bash\n$ echo '<?php echo (int)pow(2, 33) . \"\\n\";' | php\n0\n. @morria Tested with dev-master#4fba7cf and it finally works, nice :)\n. Similar issue with \\CachingIterator:\nphp\n<?php\n$iterator = new \\CachingIterator(new \\ArrayIterator());\nResult: \ntest.php:2 PhanParamTooFewInternal Call with 1 arg(s) to \\cachingiterator::__construct() which requires 2 arg(s)\n. @morria What about adding it as require-dev dependency? Since I'm also developing on Windows I did a git checkout and composer install, but running phpunit failed due to the missing extension.\n. @morria Well, it's not that phpunit requires it, but I get the following output:\n``` bash\n$ ./vendor/bin/phpunit\nPHPUnit 5.2.10 by Sebastian Bergmann and contributors.\n...C:\\xxx\\phan\\src\\Phan\\ForkPool.php:46 () The pcntl extension must be loaded in order for Phan to be able to fork.\n``\n. @staabm The current test set-up compares files with their expected output so it's not possible to use@requires extension soap`. Or do I overlook something?\n. @morria A pragmatic solution, why not... +1\n. https://github.com/etsy/phan/issues/179 should get resolved. And I'll check if there are some more serious issues.\nMaybe it's also an option to tag some more pre-releases before releasing 1.0.\n. @morria Any chances you tag a new pre-release?\n. @morria Yeah that works for me. The number of reported violations dropped but I need to check if there are some more serious issues.\n. +1 on fixing this issue\n. @morria I don't think that this one was fixed, shouldn't tests/files/expected/0188_prop_array_access.php.expected be empty? \n. @morria The error is gone but I try to figure out what caused it.\n. ",
    "simoncoggins": "That's great, thanks for the update.\n. Hmm, interesting. I ran composer update and confirmed I could still reproduce on commit 811b4a71d5521e3b156984e330b3b49453d007a9 (current HEAD of master).\nI also tried applying the patch from #672 and that did fix the issue for me (including removing the false positive) so definitely related.. I can confirm that both the new patch on #672 and the PR on #691 fix this issue for me.. Oops, missed that when searching due to it being in a dot directory. Patch updated.. ",
    "mnpenner": "Sorry, I shouldn't have said \"does nothing\" but rather \"outputs nothing\". You might consider adding a note to README to the effect of \"if no errors are found, nothing is written to stdout and the status code will be 0\".\nI checked out 7373f89. Re-ran ./phan --progress-bar on phan -- looks like it's running. Maybe a verbose mode would be nice so that I know which files it's inspected. But that's a separate issue.\nI'm running it again on my project....\nThe syntax errors that it finds -- would it be possible to give a line number for those? I know I shouldn't have any syntax errors in my project, but apparently there's some weird files in here :smile: \nIt's taking a long time to complete this time. I'll report back when/if it completes.\n. The description for -3 says\n\nA comma-separated list of directories that defines files that will be excluded from static analysis.\n\nI tried with\n~/Projects/phan/phan -f phan.in -3 vendor,plugins --progress-bar -o phan.out\nBut it's still reporting errors on ./plugins/media_library/media_library.cache.php. Shouldn't it not report errors on those files anymore?\nAlso, the progress bar is now showing\nanalyze \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% 3824MB/3829MB\nAnd the memory just keeps increasing. Up and up and up...\nHad to kill it just now, my computer was starting to die.\nN.B. phan.in contains 6050 files. And it's a lot of really atrocious code.\nI tried with -q too. Same problem. Just keeps chewing through memory even after it's hit 100%.\n. > Is there any chance you're running phan using many the -j N option or the 'processes' config option (such as in https://github.com/etsy/phan/blob/master/.phan/config.php#L71-L73) to have Phan run on multiple CPUs?\nI didn't touch either of those.\n\nAny chance its running on an interesting operating system?\n\nUbuntu 14.10. Is that interesting? It's got 16 GB of memory.\nThis project has tons of globals. Some $$s too. \nI'll see if I can run it with a debugger some time this week. I'm not sure if Phan is going to work out for us; it might be too much work to maintain the configuration. We have to include all the files in the order they're expected to execute, right? If that changes much, I don't know how we'll manage that. Maybe we can try with a subset of the code, just the newer OOP stuff.\n. Sorry, took me awhile to come back to this. Just tried with\n/home/mpenner/php7/bin/php -dxdebug.remote_enable=1 -dxdebug.remote_mode=req -dxdebug.remote_port=9000 -dxdebug.remote_host=127.0.0.1 /home/mpenner/Projects/phan/phan -f phan.in -3 vendor,plugins --progress-bar -o phan.out\nin PhpStorm but it ate up all my memory and crashed my computer before I could get any debugging info out of it.\nI can't release the source code, sorry. Company project.\nOh well, it's OK. We'll revisit this later once we have better CI in place.\n. ",
    "evert": "@morria your example is a bit of a bad one, because mixed is not a php type yet. So it's interpreted as a class name with name 'mixed'. Here's a corrected example that does work in PHP 7 without error:\n``` php\nclass C1 {\n    public function f()  {\n        return 42;\n    }\n}\nclass C2 extends C1 {\n    public function f() : int {\n        return 42;\n    }\n}\n```\n. Hm.. yea checking out the wiki it seems that this choice was mainly made for technical reasons, and in the future they might loosen it again, because this is how most language do it.\nI still believe though that even though it's not supported (currently) by return types, it shouldn't surface as a warning when it's done through docblocks. For example, someone might do:\n``` php\nphp\n\n<pclass DT extends DateTime {}\nclass C1 {\n    public function f() : DateTime {\n        return new DateTime();\n    }\n}\nclass C2 extends C1 {\n/**\n * @return DT\n */\npublic function f() : DateTime {\n    return new DT();\n}\n\n}\n```\n. I should add that I don't know if Phan throws an error on that last case. The issue @staabm posted about was a PHP 5.5 codebase where we only use php docblock return types. \n. Good to know as a workaround, but I think I'll just wait till #129 is fixed =) \n. You're right @morria ! Thanks! We'll re-run and take another look. Great tool!\n. ",
    "egonSchiele": "AFAIK this is a known issue. You need conditional to have their own scope. The patch would start with something like this: https://gist.github.com/egonSchiele/abe1a2da1401aa2b4988\n(not entirely accurate since that tries to get a function name).\nThis commit suggests that conditionals did have their scope once, but that functionality was removed.\n. Ah I see. Should I add this as a test case then @rlerdorf and explictly show that it outputs nothing? Might be good to document this behavior in case someone raises the same question in the future.\n. ",
    "theofidry": "\ud83d\udc4d it's always better to install applications with phars instead of Composer although hopefully phan has not many dependencies\n. ",
    "mrb": ":+1:\n. ",
    "patrickjahns": "While applying phan on our codebase, I also stumbled upon the issue, that class properties are not properly inferred via instanceof - example:\n```\ninterface A {\n    public function get() {}\n}\nclass B implements A {\npublic function get()\n{\n    return null;\n}\n\npublic function get2()\n{\n    return null;\n}\n\n}\nclass MyClass {\n    /* @var A /\n    private $var;\npublic function doStuff()\n{\n    if (!$this->var instanceof B) {\n        return;\n    }\n    $this->var->get2();\n}\n\npublic function doStuff2()\n{\n    $localvar = $this->var;\n    if (!$localvar instanceof B) {\n        return;\n    }\n    $localvar->get2();\n}\n\n}\n```\nThis will result in:\nsrc/TestClass.php:51 PhanUndeclaredMethod Call to undeclared method \\A::get2 (Did you mean expr->get())\nThe strange part is, that using a local scope var, phan works aas expected. Thank you for the very fast and detailed response on how to tackle this problem. \nThinking of it - you are correct - bool|Redis is not the solution for the wide. Initial I will probably follow through with suppressing the multi lines in our project - until I find the time to build the suggested plugin.\nFrom my side this is now very clear - please close as you see fit. . ",
    "oligriffiths": "Is there any way to do that globally? We have hundreds of thousands of lines of code that do the above. Annotating it all isn't going to be possible. \n\nOn 11 Apr 2016, at 12:38, Andrew Morrison notifications@github.com wrote:\nHi @oligriffiths\nYou can do the following to suppress the issue;\n/* @suppress PhanNonClassMethodCall /\nfunction foo()\n{\n    global $bars;\n    $foo = null;\n    if ($a = 1){\n        return array_pop($bars);\n    }\n    return $foo;\n}\n$foo = foo();\n$foo->bar();\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. Great. I'll try that. Thanks \nOn 11 Apr 2016, at 13:09, Andrew Morrison notifications@github.com wrote:\nHi @oligriffiths.\nIf you create a .phan/config.php file in the root of your code base (like this one), you can add a config like the one below.\n// Add any issue types (such as 'PhanUndeclaredMethod') here\n// to inhibit them from being reported\n'suppress_issue_types' => [\n    'PhanNonClassMethodCall',\n],\nPhan will automatically read that config file (at .phan/config.php) from the directory that its called from.\nLet me know if there's anything I can help with in setting that up.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. This works great, thank you.\n. @morria is it possible to whitelist to specific errors, namely PhanCompatibleExpressionPHP7. We want to scan our codebase for PHP7 compatibility errors and ignore everything else.\n. Yup, installed it yesterday. \n. Sure thing, gimme a min\n. I \"think\" this is due to executing phan on just one file, and it doesn't know what \\app\\utils\\streambuilder\\cursor is. I'm running phan app/controllers/* and this class is outside of that directory. If I change it to be an ArrayAccess typehint, it works fine \ud83d\ude04 \n. However, not quite sure why it doesn't pick up the other classes when directly pathing to the file...\n. When just running phan it seems to index all the files in the project, then run, however when pathing to a file directly it ignores everything except that one file. I see you have to define the directories in directory_list in the config for it to include all the files in the project. Is that correct?\n. I've no idea what it's failing on, that error is generated by Phan itself\n. Ah, I can see it's one of our compiled templates, let me take a look and see.\n. But looking at your code, you're allowing scope to be null in the constructor, but you're enforcing it to have a return value of Scope, so theres an issue there anyway...\n. Still getting the same error\n\n```\nTypeError: Return value of Phan\\Language\\Scope::getParentScope() must be an instance of Phan\\Language\\Scope, null returned in /home/oli/.composer/vendor/etsy/phan/src/Phan/Language/Scope.php:54\nStack trace:\n0 /home/oli/.composer/vendor/etsy/phan/src/Phan/Language/Scope.php(93): Phan\\Language\\Scope->getParentScope()\n1 /home/oli/.composer/vendor/etsy/phan/src/Phan/Language/Context.php(277): Phan\\Language\\Scope->getClassFQSEN()\n2 /home/oli/.composer/vendor/etsy/phan/src/Phan/Language/Context.php(296): Phan\\Language\\Context->getClassFQSEN()\n3 /home/oli/.composer/vendor/etsy/phan/src/Phan/Language/UnionType.php(535): Phan\\Language\\Context->getClassInScope(Object(Phan\\CodeBase))\n4 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/ContextNode.php(167): Phan\\Language\\UnionType->asClassList(Object(Phan\\CodeBase), Object(Phan\\Language\\Context))\n5 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/ContextNode.php(226): Phan\\AST\\ContextNode->getClassList()\n6 /home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php(1113): Phan\\AST\\ContextNode->getMethod('loadEnvironment', false)\n7 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(117): Phan\\Analysis\\PostOrderAnalysisVisitor->visitMethodCall(Object(ast\\Node))\n8 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\Analysis\\PostOrderAnalysisVisitor))\n9 /home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(124): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n10 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(237): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n11 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(117): Phan\\AST\\Visitor\\KindVisitorImplementation->visitMethodCall(Object(ast\\Node))\n12 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n13 /home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n14 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(312): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n15 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(147): Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList(Object(ast\\Node))\n16 /home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n17 /home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis.php(363): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n18 /home/oli/.composer/vendor/etsy/phan/src/Phan/Phan.php(162): Phan\\Analysis::analyzeFile(Object(Phan\\CodeBase), './app/bootstrap...')\n19 /home/oli/.composer/vendor/etsy/phan/src/Phan/ForkPool.php(101): Phan\\Phan::Phan{closure}(262, './app/bootstrap...')\n20 /home/oli/.composer/vendor/etsy/phan/src/Phan/Phan.php(190): Phan\\ForkPool->__construct(Array, Object(Closure), Object(Closure), Object(Closure))\n21 /home/oli/.composer/vendor/etsy/phan/src/phan.php(42): Phan\\Phan::analyzeFileList(Object(Phan\\CodeBase), Array)\n22 /home/oli/.composer/vendor/etsy/phan/phan(2): require_once('/home/oli/.comp...')\n23 {main}\n```\nWeirdly, app/bootstrap validates fine if I path directly to it\n. Seems like if the -l flag is set, you can't path directly to a file, it will evaluate every file in the directory specified in -l. Is there a way to tell it to analyze an entire directory but only parse a specific file?\n. Also getting the following error:\n```\n/home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis/ConditionVisitor.php:255 [8] Undefined index: name\n0  phan_error_handler() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis/ConditionVisitor.php:255]\n1  Phan\\Analysis\\ConditionVisitor->visitCall() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:49]\n2  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n3  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis/PreOrderAnalysisVisitor.php:564]\n4  Phan\\Analysis\\PreOrderAnalysisVisitor->visitIfElem() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:107]\n5  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n6  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:258]\n7  Phan\\BlockAnalysisVisitor->visitIfElem() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:107]\n8  Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n9  Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:209]\n10 Phan\\BlockAnalysisVisitor->visitBranchedContext() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:407]\n11 Phan\\BlockAnalysisVisitor->visitIf() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:105]\n12 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n13 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n14 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n15 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n16 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n17 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:281]\n18 Phan\\BlockAnalysisVisitor->visitIfElem() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:107]\n19 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n20 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:209]\n21 Phan\\BlockAnalysisVisitor->visitBranchedContext() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:407]\n22 Phan\\BlockAnalysisVisitor->visitIf() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:105]\n23 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n24 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n25 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n26 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n27 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n28 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n29 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:172]\n30 Phan\\AST\\Visitor\\KindVisitorImplementation->visitForeach() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:91]\n31 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n32 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n33 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n34 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n35 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n36 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:281]\n37 Phan\\BlockAnalysisVisitor->visitIfElem() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:107]\n38 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n39 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:209]\n40 Phan\\BlockAnalysisVisitor->visitBranchedContext() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:407]\n41 Phan\\BlockAnalysisVisitor->visitIf() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:105]\n42 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n43 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n44 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n45 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n46 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n47 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:369]\n48 Phan\\BlockAnalysisVisitor->visitClosedContext() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:459]\n49 Phan\\BlockAnalysisVisitor->visitMethod() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:115]\n50 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n51 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n52 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n53 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n54 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n55 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:369]\n56 Phan\\BlockAnalysisVisitor->visitClosedContext() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:446]\n57 Phan\\BlockAnalysisVisitor->visitClass() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:55]\n58 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n59 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php:114]\n60 Phan\\BlockAnalysisVisitor->visit() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:312]\n61 Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php:147]\n62 Phan\\AST\\Visitor\\Element->acceptKindVisitor() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:22]\n63 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/Analysis.php:363]\n64 Phan\\Analysis::analyzeFile() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/Phan.php:162]\n65 Phan\\Phan::Phan{closure}() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/ForkPool.php:101]\n66 Phan\\ForkPool->__construct() called at [/home/oli/.composer/vendor/etsy/phan/src/Phan/Phan.php:190]\n67 Phan\\Phan::analyzeFileList() called at [/home/oli/.composer/vendor/etsy/phan/src/phan.php:42]\n68 require_once(/home/oli/.composer/vendor/etsy/phan/src/phan.php) called at [/home/oli/.composer/vendor/etsy/phan/phan:2]\n. Still seeing the same errors being emitted.\n. Not that this issue also applies to any conditional/loop blocks too:php\nif ($a == 123) {\n    $c = 123;\n}\nif ($c == 123) {\n    $d = 123;\n}\n``. interestingly, if I dodeclare(strict_types=1);` then it does warn about $c not being defined. This is valid in PHP5 and 7\n. @morria Sure, happy to help. What do you need from me?\n. Hey folks\nHas any progress been made on this? It's something we do frequently in our codebase and causes many false positives.\nThanks for all the hard work :). Sure thing. We\u2019re on php 7.0 rn so we can\u2019t. Going to 7.1 shortly. Will see if the issue exists in newer versions somehow. \nWould be great if I could add a test for this.... Sorry for not updating, will try and sort out a repro. @TysonAndre thanks for the feedback, will do some debugging.\nRE the FQSEN capitalization, I confirmed that the method signature is using the correct casing, the issue is specifically caused by the lowercasing in the code, https://github.com/phan/phan/pull/720/files?diff=unified#diff-2ab884aa2002a82e22d7e4ca67efbc1bR136 and https://github.com/phan/phan/pull/720/files?diff=unified#diff-2ab884aa2002a82e22d7e4ca67efbc1bR159 this causes the FullyQualifiedClassName to be created with the lowercased class name, meaning I can't autoload it.. Sounds good. I have a branch in progress and working on tests. Let me push what I have tomorrow but I\u2019m pretty close to getting this working.. I\u2019m using php 7.0 but this arg does appear to actually work. Let me investigate further. . When a file is directly analyzed, like doing phan path/to/file.php then this https://github.com/phan/phan/pull/1586/files#diff-f9e2de20caef1fe6f6719d13f0f6c7cbR324 is executed. This is the explicit case where we do not want to do autoloading as that visitor subsequently adds the class in question to the codebase anyway, for all other use cases like finding a class in a property docblock or a method signature, we do want autoloading.. yeah i need to check this for sure.. oh, good call. > (I'm assuming the exact command used would be phan path/to/file.php) I'm not clear on what you mean.\nyeah that's exactly right (or a set of files). In this case, there would be no explicit directory/file list, or it would be skipped (as I believe is the case when you path directly to a file). Done. Would you mind elaborating, im not sure what you mean. Copied this block from here \nhttps://github.com/phan/phan/blob/271cc9567b719cf130803e40b15752dc8df49985/src/Phan/Phan.php#L153-L153. Yeah didn't mean to commit these yet, they're just tests for using composer autoloading.\nNot sure what the best way to test this functionality is, any advice appreciated.. There is now. Done. ",
    "marco-loche": "Same issue but with another core class \\SoapClient\nAnalysing this test.php:\n``` PHP\n<?php\n$soapClient = new \\SoapClient('foo.wsdl');\n```\nresults in \n./vendor/bin/phan test.php\ntest.php:4 PhanParamTooMany Call with 1 arg(s) to \\soapclient::__construct() which only takes 0 arg(s) defined at test.php:4\nwhilst SoapClient accepts 1 or 2 args.\n. :+1: yes sorry I was not sure  if I should open a new issue or add it as comment to this issue which looked similar :)\nand thank to you for this awesome tool!\n. ",
    "mathroc": "I've recently testes my code with phan 0.6 and it's much more useful than earlier version, there is very few false positives :) good job !\nI also added a few issues (#293, #294 & #295) but I'm not sure they should block a 1.0 release\n. thank you @morria both this and #305 are passing fine now. and phan discovered a few more issues in our code when using master.\nI really appreciate using phan and you being so quick to react, good work ! \ud83d\udc4d \n. ah thank you, (I didn't think to look into --extended-help) \nit's working nicely now (on linux). ",
    "Wolsten": "I understand this is an old issue and won't be fixed but I am interested to know what your thinking was? \nI recently came across an issue where I had this line of code:\nuse \\CC\\Queries\\NoteFActory;\nwhere the capital A should be lowercase. In the code it is referenced as:\n$note = NoteFactory::retrieve( $note_id );\nand on disk the source file name is spelt \"NoteFactory.php\"\nThis passed static analysis at the deepest level and works fine on MacOS but deploying on Linux this failed.\nIt would be great to catch platform dependent issues like this before deployment.\nThanks. Thanks for the feedback and reopening this one.. ",
    "ebernhardson": "I would probably be ok with not allowing variables to be newly defined (type narrowing would be reasonable though?) within a try/catch block. The most common solution I've seen to this problem is to pre-define the variable to null. Not sure how that would effect false positives though, I can see how it would potentially be large.\n. Fixed #230 \n. I took a poke at the related code (AssignmentVisitor::visitList / Variable::fromNodeInContext), but not entirely sure what to do here. The code makes the assumption of assigning to a variable, which is probably the 99% use case, but this particular bug we are assigning to a property of that variable.\nLikely that shouldn't involve any type changes, but instead check types and issue a warning where the types mismatch?\n. I think this could be debatable, but wasn't sure. If desirable perhaps I could add a config parameter?\n. we have so much deprecated code in our codebase, it's turned out we just have to disable the deprecated calls check anyways, so this ends up being not a big help. Closing as only useful in some edge cases, and not even my own.\n. This doesn't seem to be restricted to direct aliases, but also indirect aliases.\n```\n<?php\nnamespace Foo\\Bar {\n    class Baz {}\n}\nnamespace A {\n    use Foo\\Bar;\nvar_dump(new Bar\\Baz);\n\n}\n```\nPhanUndeclaredClassMethod Call to method __construct from undeclared class \\A\\Bar\\Baz\nAdditionally a git bisect suggests the problem started with 1121ab9f2a94b523e6b889f60698659f7a999d03\n. I realize this (the new private method) isn't really the standard pattern for analyzing code in Phan. If you have suggestions on a better way (new visitor?) i can work that out.. I'm happy with the patch, merge away.. Closing, as after testing more edge cases found a problem that isn't as easily fixed, namely\nif ($foo = 'bar') { ... }\nshould set $foo in the outer context, but\nif (isset($foo)) { ... }\nshould only set $foo in the inner context. I can't find a reasonable way to handle this currently.. Took me awhile to have the time to get back to this, but I've updated the patch for various reviews:\n\nNow uses an analysis pass after parsing. This was needed to emit duplicate class warnings on the class_alias call instead of confusing warnings from the definition to the aliased definition. I just couldn't make alternate id's work for this case.\nHandles the ::class constant as well as string arguments\nPassing the original object into something typed with the alias now works\n\nProblems:\n* Still trying to figure out why, but running the tests with --filter '0271' runs the test on its own and works. But running the full test suite without filter fails on test 0271 (the new class_alias test). Advice appreciated.. I double checked and php actually doesn't care, you can class_alias(\"Foo\", \"\\0\"); and then class_alias(\"\\0\", \"Bar\"); and Bar will be a valid alias (as is $nb = \"\\0\"; $x = new $nb();). While dirty, it's allowed so not sure we need an issue?. I've got most of this worked out, the one problem i'm having is code such as:\n<?php\nclass A {}\nclass_alias('A', 'B');\nclass B {}\nThe issue generated ends up looking like\n%s:4 PhanRedefineClass Class \\B defined at %s:4 was previously defined as Class \\A at %s:2\nBasically, the aliased class reports itself as the original class (like it does in php), but then when it comes time to report the error the original definition is reported as the original class definition, rather than the class_alias() call. It does work appropriately the other way around, when the issue is emitted from the class_alias call rather than from the class definition.\nWill update the patch with my latest work, but it won't be ready to merge yet while i ponder this issue.. Unfortunately make doesn't have CodeBase, and is called from plenty of places that don't pass around CodeBase. It would be pretty invasive to get the right information into make for it to resolve the alias back into the original class name.. That was exactly it, thanks! Tests passing locally now.. Set makes sense here, I've switched it over.. ",
    "cdekok": "Ah yes the return type was incorrect it mentioned a boolean in the used framework the source actually returned $this\n. Perhaps something could be added which disables xdebug in a way like composer did?\nhttps://github.com/composer/composer/blob/20c16f18f542a061aec90988bff250555e5b9576/src/Composer/XdebugHandler.php. ",
    "pminten": "Correction, it does appear that static[] is potentially a valid type and quite needed too when returning an array with objects of the called class (which extends the class containing the method returning the array).\n. It looks like changing public static function instance() : StaticType in src/Phan/Language/Type/StaticType.php to public static function instance() : Type does the trick. Looking at the usage sites I can't see a reason why instance() would have to return StaticType but maybe there's something I'm missing.\n. I'll try to take a stab at this myself when I get some time.\n. Diving into the code further I've looked up the commit that introduced the check that seems to be spuriously raised: https://github.com/etsy/phan/commit/db31e7a26eb6be5307a66c6f72869cbb6c25521a\nThe associated test points at this being used to prevent static::$foo outside a class causing a crash. However it also triggers on methods with a /** @return static */ annotation. Probably because of my own patch that changed Type::isStaticType to also consider \\static a static type.\nI suspect this is an instance of the overloading of the word static causing confusing bugs.\n. There aren't any incorrect static-related messages in the list. Looks like you've fixed it. Thanks.\n. ",
    "glensc": "[~/scm/eventum/phan (master)\u26a1] \u2794 php ./phan.phar\nUnable to read file src/Phan/Output/Printer/CSVPrinter.php\nUnable to read file tests/Phan/IntlTest.php\nUnable to read file tests/Phan/Output/Printer/CSVPrinterTest.php\nRecursiveDirectoryIterator::__construct(vendor/phpunit/phpunit/src): failed to open dir: No such file or directory\nPHP Fatal error:  Class 'SQLite3' not found in phar:///home/glen/scm/eventum/phan/phan.phar/src/Phan/Database.php on line 10\n[~/scm/eventum/phan (master)\u26a1] \u2794\nit's git checkout pointing to 80cda749843a5936e5422e4ce9997d980cc33966\n. @morria https://github.com/etsy/phan/issues/282#issuecomment-230265341 is now resolved that you closed?. strace shows the files were opened successfully:\n\u2794 strace -ff -efile php70 ./phan.phar 2>&1|grep -E 'src/Phan/Output/Printer/CSVPrinter.php|tests/Phan/IntlTest.php|tests/Phan/Output/Printer/CSVPrinterTest.php'\nlstat(\"src/Phan/Output/Printer/CSVPrinter.php\", {st_mode=S_IFREG|0664, st_size=1702, ...}) = 0\nstat(\"src/Phan/Output/Printer/CSVPrinter.php\", {st_mode=S_IFREG|0664, st_size=1702, ...}) = 0\nUnable to read file src/Phan/Output/Printer/CSVPrinter.php\nlstat(\"tests/Phan/IntlTest.php\", {st_mode=S_IFREG|0664, st_size=769, ...}) = 0\nstat(\"tests/Phan/IntlTest.php\", {st_mode=S_IFREG|0664, st_size=769, ...}) = 0\nlstat(\"tests/Phan/Output/Printer/CSVPrinterTest.php\", {st_mode=S_IFREG|0664, st_size=2269, ...}) = 0\nstat(\"tests/Phan/Output/Printer/CSVPrinterTest.php\", {st_mode=S_IFREG|0664, st_size=2269, ...}) = 0\nUnable to read file tests/Phan/IntlTest.php\nUnable to read file tests/Phan/Output/Printer/CSVPrinterTest.php\n\u2794\n. https://github.com/etsy/phan/releases\ncould you include release number in the title. currently can't distinguish without checking each url what version i'm there about to download...\n\n. thanks. i'm not actively using the tool. but i'll report if i spot again!. however, i still see assert being used in the code:\nhttps://github.com/etsy/phan/blob/d8f429f9efe7aa7562a779e1b2489dc5057d8b96/src/requirements.php\nso this issue has not been addressed at all.. ```\n[~/Downloads] \u2794 php70 -r \"var_dump(extension_loaded('ast'));\"\nCommand line code:1:\nbool(false)\n[~/Downloads] \u2794 php70 phan.phar  --version\nPHP Fatal error:  Uncaught Error: Undefined constant 'ast\\flags\\USE_NORMAL' in phar:///home/glen/Downloads/phan.phar/src/Phan/Language/FQSEN/FullyQualifiedClassName.php:21\nStack trace:\n0 phar:///home/glen/Downloads/phan.phar/src/Phan/Language/FQSEN/FullyQualifiedGlobalStructuralElement.php(174): Phan\\Language\\FQSEN\\FullyQualifiedClassName::getNamespaceMapType()\n1 phar:///home/glen/Downloads/phan.phar/src/Phan/Language/Element/Clazz.php(164): Phan\\Language\\FQSEN\\FullyQualifiedGlobalStructuralElement::fromStringInContext('stdClass', Object(Phan\\Language\\Context))\n2 phar:///home/glen/Downloads/phan.phar/src/Phan/Language/Element/Clazz.php(127): Phan\\Language\\Element\\Clazz::fromReflectionClass(Object(Phan\\CodeBase), Object(ReflectionClass))\n3 phar:///home/glen/Downloads/phan.phar/src/Phan/CodeBase.php(143): Phan\\Language\\Element\\Clazz::fromClassName(Object(Phan\\CodeBase), 'stdClass')\n4 phar:///home/glen/Downloads/phan.phar/src/Phan/CodeBase.php(118): Phan\\CodeBase->addClassesByNames(Array)\n5 phar:///home/glen/Downloads/phan. in phar:///home/glen/Downloads/phan.phar/src/Phan/Language/FQSEN/FullyQualifiedClassName.php on line 21\n[~/Downloads] \u2794 \n```. ",
    "jakoch": "It's not only about the verbosity of the reported error, but the error itself, which is a total show stopper.\nI could reproduce it using the latest phar, but not when using the dev-master branch via Composer.\n. Yes, unable to reproduce using dev-master - without building the Phar.\nMy guess is that this is somehow Phar stream handling related, but i'm not sure.\n. Well, the error message is gone now, \nbut processing stops and returns to the CLI after ~ 20 progress dots (using -p).\nFeels like a crash or exit with error suppression.\n. > Can you try and again and confirm that the updated 0.6 phan.phar is scanning files as expected?\n\ud83d\udc4d  it works! the phar is scanning files now. thank you.\n. ",
    "cviebrock": "I will be the first to agree that the code is pretty shitty. \ud83d\ude09 \nI'm just reporting the issue as instructed by phan. \n. Harsh, man.  Harsh.  ;)\n. FWIW (@yazfield, @zelazowy) this seems to work for me:\nphp\n    'exclude_analysis_directory_list' => [\n        'vendor',\n        '.phan/stubs',       // <<< ADD IT HERE\n    ],\n    'directory_list' => [\n        'app',\n        'bootstrap',\n        'config',\n        'database',\n        'public',\n        'routes',\n        'tests',\n        'vendor',\n        '.phan/stubs',       // <<< AND HERE\n    ],\nIt does require the _ide_helper.php generated by the helper to be in .phan/stubs instead of the project root (which is the default).  For now, I'm just symlinking things so I don't need to change my work flow too much.. Thanks @TysonAndre.\nHow would I go about handling this in a global scenario?  e.g. if I have a public/index.php entry-point script that calls Foo::old()?. Thanks!. Ok, so I re-RTFM and see https://github.com/phan/phan/blob/master/README.md#generating-a-file-list (emphasis mine):\n\nThis static analyzer does not track includes or try to figure out autoloader magic. It treats all the files you throw at it as one big application. For code encapsulated in classes this works well. For code running in the global scope it gets a bit tricky because order matters. If you have an index.php including a file that sets a bunch of global variables and you then try to access those after the include in index.php the static analyzer won't know anything about these.\nIn practical terms this simply means that you should put your entry points and any files setting things in the global scope at the top of your file list. If you have a config.php that sets global variables that everything else needs put that first in the list followed by your various entry points, then all your library files containing your classes.\n\nWhich list is meant here? file_list in my phan config?  I tried adding\nphp\n    'file_list' => [\n        './public/main.php'\n    ],\nBut that doesn't seem to help.  I think I also then run into the issue of phan saying that $autoloader is undeclared\n. Sorry for the lack of feedback.  All of your suggestions, @TysonAndre , are great.  I ended up doing a combination of global_type_map and @phan-file-suppress to get a passing analysis.. Thanks for the ideas @TysonAndre .  I'll look into those other tools, and then writing a plugin.\nLuckily, we upgraded all our servers faster than expected, so my question is moot now ... at least as my needs are concerned. \ud83d\ude09 . ",
    "CMCDragonkai": "Is static constant access from an object not supported in Phan? It's not a syntax error for PHP. http://stackoverflow.com/questions/5447541/accessing-php-class-constants. I get this as well with use Clue\\React\\Block; then Block\\await(...);. This error only goes away, if we use use function Clue\\React\\Block\\await;.. Is this going to be backported to 7.0 branch?. ",
    "agkozak": "The patch works for me; there is, however, a related problem.\nTry dividing the example into two files, the second of which is namespaced:\nFile foo.php:\n```\n<?php\ndefine('FOO', 'foo');\ninclude DIR . '/bar.php';\n```\nFile bar.php:\n```\n<?php\nnamespace Bar;\nclass Bar {\npublic function test() {\n    return FOO;\n}\n\n}\necho (new Bar)->test();\n```\nPHP falls back and looks for FOO in the global namespace. phan, however, returns the error\n\nPhanUndeclaredConstant Reference to undeclared constant \\Bar\\FOO\n\nActually, even if I specify the global namespace:\nreturn \\FOO;\nphan still returns the same error; it looks for \\Bar\\FOO, not \\FOO. This wasn't a problem in v0.5.\nThanks!\n. ",
    "valtonia": "Here's the output:\nhttps://gist.github.com/valtonia/fa07492e4060a62f0f311dab1f7d797a\nThere's no problem with files etc, this was a test with a single file in the phan.in list\nAlso, I tried using the source install and that version does seem to work correctly - at least on test files.  When I tried running it against my project it exited with an exception (which I think is the same one mentioned in issue #172)\nThanks.\n. Hi,\nYes, that's working for me now.  Thanks.\nI'm now seeing the same error as the source version when I run it against my project - that is it's throwing an IssueException and exiting.  Should I post that as a different issue?\n. @morria yes, this now works correctly.  Thanks.\n. ",
    "steffenweber": "The patch does the trick. Thank you! :smiley: \n. ",
    "slokhorst": "309 has been closed, yet the sample from https://github.com/phan/phan/issues/307#issuecomment-237316769 still gives PhanUndeclaredVariable Variable $this is undeclared in Phan 0.11.0.\nIs there another issue I should track?. Works perfectly now. Thanks!. ",
    "aik099": "Thanks for advice, but unfortunately that would double amount of code written, because method is used almost everywhere across codebase. Forcing developers to write instanceof if along with it would make their life harder.\nMaybe php-ast extension can be improved to support that.\n. > However, I still think the @var declaration in the method comment should pre-populate the uniontype for the variable in that method which would solve your problem.\nNot sure what you mean. How method DocBlock can specify type for a variables used inside that method.\n. I've created https://github.com/nikic/php-ast/issues/32 . Maybe it can be implemented in php-ast.\n. If col/line information of variable declaration is preserved in AST tree, then indeed we can get comment from original source file if it is present.\n. @jayson , as long as there is only 1 @var comment per line line number is sufficient.\n. ",
    "Sentoki": "Does this looks like solution?\n. Cant't reproduce this too, is this still actual? Another issues works.\n. Cant't reproduce this, is this still actual? Test such code near duplicated class, and get only PhanRedefineClass issue.\n. Sorry for stupid question. \nOf course \nphp\n$some_param = Config::get()->__get('some_param');\n. >the exclude_analysis_directory_list is meant to set directories that should be parse\nYep, useful enhancement, because large vendor leads to out of memory error :-(. Is this issue still actual? Can't reproduce it.. Does it have sense? Just i don't see any suitable node kind here: https://github.com/nikic/php-ast/blob/master/ast_stub.php\nAnd we don't have any ast Node for literal after \\ast\\parse_code() call  http://storage7.static.itmages.com/i/17/1028/h_1509195482_8998637_ae702a6892.jpeg. Can't reproduce this problem.\nTry analyze this code with dev-master:\n```\nclass Test {\n    public static function zzz($item){\n        echo static::class;\n        return $item;\n    }\n}\narray_map('Test::zzz', [1, 2, 3]);\n```\nAnd don't get any warnings. Do i do something wrong? And i can't find functionListFromNode. Is it correct to have \"static\" fqsen? Maybe better on expasions stage make \"late static binging\" and replace static with real class?. ",
    "muglug": "@morria at least according to the PHP docs, they have an explicitly false return type, as given in the docs \u2013\u00a0e.g. strpos:\n\nReturns FALSE if the needle was not found.\n. This is fixed on dev-master \u2013 thanks!. @morria yup, the code triggers the error when running on latest dev-master (a1993247f8ee7bf0c50cea7aa21d380e4f87c38b)\n. vendor/etsy/phan/src/Phan/Analysis/AssignmentVisitor.php:95 () Unknown left side of assignment in phan_test/test.php:42 with node type AST_METHOD_CALL\n. (I'm unable to reopen the issue)\n. Thanks!. Thanks!. Agree with including the ellipsis \u2013\u00a0if you can write a function param in raw PHP as int ...$args then you should be able to use exactly the same syntax in the docblock.\n\nI'm not sure, though, that int[] $args should be supported as a direct equivalent (because actually calling that function with an array will result in an error).. Shouldn't it emit an error?\nThe docblock param type here is wrong, and I feel there should be some sort of error to alert the developer to that fact.\n. ah ok sorry. @TysonAndre no false positives \u2013 but phan could keep the low false-positive rate and also reduce its false negative rate by limiting the number of assumptions it makes, which would mean it could correctly flag an error here:\ndeclare(strict_types=1);\nforeach ([1, \"a\"] as $key) {\n  foo($key);\n}\nfunction foo(int $a) {}\nNevertheless, happy to remove the last change if it's not in the spirit of this project.. I think there's an error in your example? CreatingClass and MyClass are used interchangeably.\nThis equivalent code doesn't generate any errors in phan:\n```\ninterface AdaptorInterface {}\nabstract class AbstractAdaptor implements AdaptorInterface {}\nclass Adaptor extends AbstractAdaptor {}\nclass ConsumingClass {\n  public function useCreatingClass() {\n      $adapter = new Adaptor();\n      $instance = new CreatingClass($adapter);\n  }\n}\nclass CreatingClass {\n   public function __construct(AdaptorInterface $interface) {\n           // construction\n    }\n}\n``. Inf246_4` an iterable is coerced to an array on the second line. Is that deliberate?. Why not put the target PHP version in the config? That way you could put each new feature behind a flag, and throw exceptions when encountering code that's not supported by the particular PHP version.\nThat would prevent an issue where the box running phan has a different version of PHP to a box in production and, as noted, would avoid patching each branch with fixes.\nPhpParser has a similar notion - you can parse 7.1 files in 5.5, and I find that functionality very useful in my own work.. > This uses php-ast, which uses php internals, so it doesn't allow parsing newer php versions.\nAh ok, didn't know that.. Reflection doesn't have specific type information for most parameters or return types, and is much slower to boot.. > Map<Clazz> is not valid phpdoc syntax\nTrue, but you use a similar annotation elsewhere in the codebase (as part of your @template implementation). e.g https://github.com/etsy/phan/blob/e4cafd8bcc9360d17991b38d75986c17051b878e/src/Phan/Language/Element/Comment.php#L53. I suppose I don't want to see generics in PHP used in such a limited fashion \u2013 coming from a Java/C# world, and having used flow's generics1.\nI imagine an implementation of Map<TKey, TValue> along the lines of\n```php\n/\n * @template TKey\n * The type of the map key\n \n * @template TValue\n * The type of the map value\n /\nclass Map extends \\SplObjectStorage\n{\n    / @var string */\n    private $t_key;\n/** @var string */\nprivate $t_value;\n\n/**\n * @param string $t_key     The key type\n * @param string $t_value   The value type\n */\npublic function __construct(string $t_key, string $t_value)\n{\n    $this->t_key = $t_key;\n    $this->t_value = $t_value;\n}\n\n/**\n * @param  TKey $key\n * @return bool\n */\npublic function offsetExists($key) : bool\n{\n    assert(get_class($key) === $this->t_key);\n\n    return parent::offsetExists($key);\n}\n\n/**\n * @param  TKey $key\n * @return TValue\n */\npublic function offsetGet($key)\n{\n    assert(get_class($key) === $this->t_key);\n\n    $value = parent::offsetGet($key);\n\n    assert(get_class($value) === $this->t_value);\n\n    return $value;\n}\n\n/**\n * @param  TKey $key\n * @param  TValue $value\n * @return void\n */\npublic function offsetSet($key, $value)\n{\n    assert(get_class($key) === $this->t_key);\n    assert(get_class($value) === $this->t_value);\n\n    parent::offsetSet($key, $value);\n}\n\n}\n```\nand used thusly:\n```php\nclass CodeBase {\n  /*\n     * @var Map\n     * A map from FQSEN to a class\n     /\n    private $fqsen_class_map;\npublic function __construct() {\n    $this->fqsen_class_map = new Map(FQSEN::class, Clazz::class);\n}\n\n}\n```\n1 flow annotations in JS are akin to PHP docblocks, as they're used to verify the program is correctly-typed, but they're not enforced at runtime. Additionally, it looks like the same pattern is used elsewhere \u2013 providing a hint as to the generic type of the traversable returned via a union type with the actual return type.\nThis seems to be more confusing than something like @return \\Generator<Clazz> which, to anyone who's used generics in other languages says:\n\na generator whose yield value is of type Clazz. Thanks, that makes a ton of sense!. With the large, sloppy code base I work with day-to-day, this is \"solved\" (when using a different tool) by an erroneous non-nullable return type on Foo::load, and then global suppression of an issue emitted when checking whether one union type does not contain another. But on the bright side, there are relatively few of these kludges necessary.\n\n```php\nclass Foo {\n  / @return static /\n  public static function load(int $id) {\n    return $id === 1 ? new Foo() : null;\n  }\npublic function bar() {}\n}\n$a = Foo::load(2);\nif ($a === null) { // TypeDoesNotContainType issue emitted here\n  throw new \\Exception('Bad');\n}\n$a->bar();\n```. Update for anyone who cares:\nNow using a different approach \u2013 a custom docblock tag specifies whether we care about the nullability of the function's return type, allowing automatic downstream issue suppression.\nSo given\n```php\nclass Foo {\n  /\n   * @psalm-ignore-nullable-return\n   /\n  public static function load(int $id) : ?self {\n    return $id === 1 ? new Foo() : null;\n  }\npublic function bar() : void {}\n}\n$a = Foo::load(2);\n```\nBoth these calls are fine:\n```php\n$a->bar();\nif ($a !== null) {\n    $a->bar();\n}\n``. IsDB` in the root namespace? This class is not. Maybe a return type is incorrect somewhere?\nUnless Laravel is creating classes on the fly, a la Mockery, in which case phan would need a special way of handling that.. Presumably you could just compare docblock return types to hard return types, to ensure they just extend the hard return types \u2013 for example, you might have an array return typehint but a string[] docblock return type.. Also just removed an impossible instanceof check thanks to @TysonAndre pointing out a mistake in a previous PR here. Maybe allow this to be configurable? Mocked objects have similarly magical properties. @TysonAndre maybe something like this?. @TysonAndre\n\nespecially apcu_store\n\nthank @paragonie-scott for that. It's reasonably simple:\n(new \\Composer\\XdebugHandler(\\Composer\\Factory::createOutput()))->check();. A bit more explanation: Hack calculates the number of times the loop analysis needs to be run here. Sample implementation in PHP here.\nYMMV, but adding that analysis slows down a self-scan by 5-10%. It did catch an error, though. Undecided as to whether it's worth it.. Related to #224, I think, but not a dupe. Not sure what benefits would accrue from the separation. In my experience undeclared instance properties are more annoying than static ones precisely because PHP does not throw an error (so typos are harder to spot).. Yup, but presumably Phan is not solely interested in what will break when the code is executed, but rather how the program might have unexpected consequences e.g.\nphp\n/**\n * @param User[] $users\n * @return void\n */\nfunction deleteUsers(array $users) {\n  foreach ($users as $user) {\n    if (!$user->prevent_deltion) {\n      $user->delete();\n    }\n  }\n}. point of order \u2013 shouldn't the type be Closure rather than callable?. Amended code with a working example:\n```php\nclass A {\n  function doSomething() : void {}\n}\nfunction maybeNull() : ?A {\n  return rand(0, 1) ? new A : null;\n}\n$foo = maybeNull();\nif (!is_null($foo)) {\n    $foo->doSomething();  // Passes phan checks\n}\n$foo = maybeNull();\nif (is_null($foo)) {\n    throw new \\Exception()\n}\n$foo->doSomething() // Fails phan checks (PhanNonClassMethodCall Call to method doSomething on non-class type null)\n$foo = maybeNull();\nif ($foo === null) {\n    throw new \\Exception();\n}\n$foo->doSomething();  // Passes phan checks\n```\n. This includes https://github.com/etsy/phan/pull/733/commits/98b5f99, which feels unnecessary. But :man_shrugging: . This is somewhat gauche, but I've added templated array support in my own static analysis tool.\nThe only thing that doesn't work is the /** @return Magic[] */, which needs to be rewritten as /** @return array<Magic> */ to work.. This is awesome. I disagree. I think @return self should behave exactly as : self { behaves, where self translates to the class in which the function is defined.\nAs @TysonAndre says, @return static (or @return $this) is perfectly adequate, and follows the pattern of a possibly-more-specific docblock return type than PHP currently allows e.g.\nphp\n/** @return string[] **/\nfunction foo() : array { return ['bar', 'bat']; }. Thanks @TysonAndre, fixed. How is this, performance-wise?. yup, caching those parser representations is a big win. Useful results, though.. Ooh I like, stealing this.. With Psalm I\u2019m setting a flag on the union type to denote \u201cpossibly undefined\u201d. Only using it for shapes atm.. No worries \u2013 I opened a new one instead. @TysonAndre this contains the changes requested in #1363 . YAY. Ha ok then, very happy I filed this as a separate PR from https://github.com/phan/phan/pull/1761. Just to clarify for future reference - you mean the empty-string-as-return-type is equivalent to mixed|void, whereas empty-string-as-param-type means @todo. Awesome! And thanks again for all your work on Phan!. PHP checks are done on the server (and I'd be happy to host it on the same server if you need a place to park it)\nI specifically disabled processing of includes so it'd be hard to break out of the sandbox - any bug would have to be really weird to be remotely exploitable (though I could of course be DoSed with a poor-performing query).. Next question: which do you prefer?. Oh Psalm also supports @template-implements for interfaces, but they're all currently interchangeable. . Awesome!. Yup! Fixing.... Ah right. So just more specific.. I've just undone and rebased.. So this code is wrong then?. answer: it is wrong.. And also maybe a bool?. Why do the names have to be namespaced?. ok!. Nah. But it should be bool \u2013 fixing. > My preference is to make the return values account for normal failure cases, not for users providing too many/too few arguments.\nI totally agree when it comes to functions and classes that can't be extended. But if this is the case there's always a potential issue when comparing this signature against overriding methods that extend this class and return null.. I don't feel strongly, though.... hmmm ok. Yeah, sorry. > small differences\nWhat ones?. ok!. Definitely not mine.... Totally fair. Sorry about that!. This maybe could be in the 7.1 function signature map, but good inclusion.\nI wonder whether this file should always support the latest public release of PHP, with the former versions supported in other files.. These should be added back. yeah I was wrong, good to know. ",
    "pdelre": "@morria I had the same issue on 0.6 which was resolved when using dev-master and does seem to be fixed by https://github.com/etsy/phan/commit/d2076ebdc6baa87344e0a6817ca62b4d17b3bea8.. ",
    "roba269": "Yes. It has been fixed on latest code. Thanks @morria !. ",
    "kellegous": "\ud83d\udc4d Can't reproduce this any longer. Thanks! \ud83d\udc4f \n. ",
    "jchatard": "Hi,\nUsing the latest master commit, I have the same error, but the origin seems different from the stacktrace:\n```\nTypeError: Argument 1 passed to Phan\\AST\\Visitor\\KindVisitorImplementation::__invoke() must be an instance of ast\\Node, string given, called in /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis/PreOrderAnalysisVisitor.php on line 585 and defined in /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:20\nStack trace:\n0 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis/PreOrderAnalysisVisitor.php(585): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke('sizeof($lines) ...')\n1 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(50): Phan\\Analysis\\PreOrderAnalysisVisitor->visitCall(Object(ast\\Node))\n2 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\Analysis\\PreOrderAnalysisVisitor))\n3 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(91): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n4 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(67): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n5 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(50): Phan\\AST\\Visitor\\KindVisitorImplementation->visitCall(Object(ast\\Node))\n6 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n7 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n8 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(57): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n9 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(46): Phan\\AST\\Visitor\\KindVisitorImplementation->visitBinaryOp(Object(ast\\Node))\n10 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n11 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n12 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(312): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n13 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(156): Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList(Object(ast\\Node))\n14 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n15 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(371): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n16 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(461): Phan\\BlockAnalysisVisitor->visitClosedContext(Object(ast\\Node\\Decl))\n17 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(124): Phan\\BlockAnalysisVisitor->visitMethod(Object(ast\\Node\\Decl))\n18 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n19 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis/Analyzable.php(103): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node\\Decl))\n20 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php(1758): Phan\\Language\\Element\\Method->analyze(Object(Phan\\Language\\Context), Object(Phan\\CodeBase))\n21 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php(1284): Phan\\Analysis\\PostOrderAnalysisVisitor->analyzeCallToMethod(Object(Phan\\CodeBase), Object(Phan\\Language\\Element\\Method), Object(ast\\Node))\n22 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(126): Phan\\Analysis\\PostOrderAnalysisVisitor->visitMethodCall(Object(ast\\Node))\n23 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\Analysis\\PostOrderAnalysisVisitor))\n24 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(124): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n25 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(237): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n26 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(126): Phan\\AST\\Visitor\\KindVisitorImplementation->visitMethodCall(Object(ast\\Node))\n27 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n28 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n29 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(312): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n30 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(156): Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList(Object(ast\\Node))\n31 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n32 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(371): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n33 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(461): Phan\\BlockAnalysisVisitor->visitClosedContext(Object(ast\\Node\\Decl))\n34 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(124): Phan\\BlockAnalysisVisitor->visitMethod(Object(ast\\Node\\Decl))\n35 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n36 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node\\Decl))\n37 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(312): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n38 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(156): Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList(Object(ast\\Node))\n39 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n40 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(371): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n41 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(448): Phan\\BlockAnalysisVisitor->visitClosedContext(Object(ast\\Node\\Decl))\n42 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(58): Phan\\BlockAnalysisVisitor->visitClass(Object(ast\\Node\\Decl))\n43 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n44 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/BlockAnalysisVisitor.php(114): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node\\Decl))\n45 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(312): Phan\\BlockAnalysisVisitor->visit(Object(ast\\Node))\n46 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/Element.php(156): Phan\\AST\\Visitor\\KindVisitorImplementation->visitStmtList(Object(ast\\Node))\n47 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php(22): Phan\\AST\\Visitor\\Element->acceptKindVisitor(Object(Phan\\BlockAnalysisVisitor))\n48 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Analysis.php(344): Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke(Object(ast\\Node))\n49 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Phan.php(169): Phan\\Analysis::analyzeFile(Object(Phan\\CodeBase), 'sites/all/modul...')\n50 /Users/jchatard/.composer/vendor/etsy/phan/src/Phan/Phan.php(210): Phan\\Phan::Phan{closure}(147, 'sites/all/modul...')\n51 /Users/jchatard/.composer/vendor/etsy/phan/src/phan.php(43): Phan\\Phan::analyzeFileList(Object(Phan\\CodeBase), Array)\n52 /Users/jchatard/.composer/vendor/etsy/phan/phan(2): require_once('/Users/jchatard...')\n53 {main}\n```\nWas this commit supposed to fix this as well?\nThanks,\n. Yep, it fixed it!\nAwesome, thank you! \ud83d\ude03 \n. Hi,\nHow can I install phan dev-master using homebrew?\nThanks,\n. Ok thanks, I ended up installing via Composer.\nCheers,\n. ",
    "apflieger": "Yes it works, thanks!\n. ",
    "michielrensen": "@morria yes it does, thanks!\n. ",
    "AJenbo": "Would it be possible to support the phpstorm meta format for magic function?\nhttps://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata. I would like to take a stab at porting XdebugHandler to Phan if no one else is currently working on it.. The point was actually that Phan should listen to the phpdoc (/* @var B /) instead of the return type of the function.. Ok, so we can't hint the type of variables? If I under the doc page correctly it would be possible to hint the value of a variable using assert()?\nSo this should solve my problem:\n```\n<?php\nclass A {\n}\nclass B extends A {\nfunction getValue() {return 1;}\n}\nfunction getClass($class): A {return new $class()}\n$b = getClass(B::class);\nassert($b instanceof B); // Using assert to indicate to phan that the variable is of the class B type.\necho $b->getValue();\n```. Thanks, thats really helpful.. ",
    "Oxicode": "+1. ",
    "mattriverm": "I have a plugin that checks for unused variables if someone is interested. Support for references are very limited.. https://github.com/mattriverm/PhanUnusedVariable\nI uploaded it sort of \"as is\". I've been running it against a big sloppy codebase and it has grown organically into what it is now. It's in need of a cleanup but I'm limited on time.\nI have fixed all the false positives in the codebase I've been running it against (and that does not contain a lot of reference use). It is very hard to find false negatives though.... My bad. The assert did actually solve it.. ",
    "srcspider": "Ah okey. Was confused because the docs themselves don't mention that as an acceptable annotation in the union BNF.\nhttps://github.com/etsy/phan/wiki/About-Union-Types\nClosing.\n. Ouch. Guess I'll have to go for some extreme measures.\n. ",
    "brzuchal": ":+1:\n. ",
    "frontowiec": "\n. ",
    "KennetPL": "+1\n. ",
    "romanoji": ":+1:\nIn addition it'd be nice to have \"package scope\" with @internal annotation not only for methods, but also for classes.\n. ",
    "adrian-enspired": "\nIf you have types in the code they will override the doc comments.\n\nThat's good to know, thanks.  And yes, we're going to fix them all \u2014 there's a ton of them, was just hoping to be able to distinguish the bad docs from the (conclusively) bad code.\nthanks again!\n. hey, cool.  thanks @morria \n. ",
    "elliotchance": "Yes, I'm aware of that. But that won't work because they are virtual attributes, if they were defined as instance variables the application would break. This is a deal breaker for many applications and frameworks that have to use some magic (against better judgment, I agree).\nCan a plugin be written for it?\n. @morria Where would we find documentation on how to create these plugins?\n. I have been using @TysonAndre fork and it's working well (cheers!). It would be great if this could be pushed upstream \ud83d\ude04 . Thank you, that fixed it.. Here is a complete example, test.php:\n```php\n<?php\ntrait LineCalculatorTrait\n{\n    public function variedPriceIncTax()\n    {\n        return 0;\n    }\n}\nclass LineCalculator\n{\n    use LineCalculatorTrait {\n        variedPriceIncTax as traitVariedPriceIncTax;\n    }\npublic function variedPriceIncTax()\n{\n    return $this->traitVariedPriceIncTax();\n}\n\n}\n```\nElliots-MacBook-Pro-3:kounta elliot$ docker-compose exec phan phan -q test.php\ntest.php:19 PhanUndeclaredMethod Call to undeclared method \\LineCalculator::traitVariedPriceIncTax. Phan 0.9.1-dev. It may have been fixed in the new version, I will update and try again.. As I said, I cannot use ?string in PHP 5.6 because PhpStorm doesn't understand what that means. For the time being I am using an assertion to get around the issue:\n```php\n        assert($unitPrice === null || is_string($unitPrice));\n    $line = $this->order->addLine(\n        $product,\n        1.0,\n        $unitPrice, // this is ?string\n        [],\n        null,\n        null,\n        $extraProperties\n    );\n\n```. Ah, whoops. That did not actually work, the error message was just further down in the list of errors.. @TysonAndre do you know any other work around for this?. ",
    "nospor": "THank you. I was pretty sure pdo was there but you are right - there is no PDO. Could you tell me how can I run this builder mkimage-phan.bash?\n. Ok, I've created my own image. When I was trying to run builder from cloudfire all the time I had errors about some common constraints.\nThank you once more for info about pdo :)\n. ",
    "krzysiekpiasecki": "@morria  - it's fix at dev-master... Please release a patch version.. ",
    "tam5": "@felixfbecker this is probably the wrong place for this but....\nI'm wondering more about @morria's suggestion and about pulling in phan to php-language-server. It seems like there are still some things that phan can do that php-language-server cannot; show incorrect implementation of inheritance, detecting function calls to methods that don't actually exist, mismatch between doc block and return type, to name a few.\nExcuse my ignorance, as I'm not even sure if pulling in some of phan would actually be helpful to achieve this. I guess I am just wondering more generally about being able to do what phan can do in php-language-server, and what the best way would be to utilize all the work that has already been done in both of these great projects.. just to document this, as likely part of the aforementioned \"eventually\"...\nif you have php installed with homebrew it might be looking for extensions in a different place than pecl will install to.\nso you either have to move it, or tell it where to look, etc.\nsimple fix would be to add, for example extension=/usr/local/Cellar/php/7.2.3_2/pecl/20170718/ast.so to php.ini... update as needed. I've added to the news and updated the help info, i hope i understood your comment correctly, but if not feel free to correct me. ",
    "joostshao": "why ?\ni download it from the  url:\nhttps://github.com/etsy/phan/releases/download/0.6/phan.phar\nis this not the lastest release version ?. ```\n<?php\n$a = 66;\nif ($a == 2) $caseVal = 8;\nif ($a == 22) $caseVal = 88;\necho (int)$caseVal;\n```\nwhy no out put but run time in error ?\n\u279c  t /home/ubt/vendor/bin/phan t.php     \n\u279c  t php t.php                             \nNotice: Undefined variable: caseVal in /home/ubt/t/t.php on line 6\nCall Stack:\n    0.0003     363648   1. {main}() /home/ubt/t/t.php:0\n0%    . thank you. ",
    "ArtemGordinsky": "Hi @morria,\nThanks, that definitely helps!\nWould it be okay if I contribute a new config option to allow for specifying file extensions?. Thanks!\nI guess exclusion by file/directory should work for now.\nGoing forward, do you think it's okay if I contribute an option to exclude files by suffix?. You are right, ast_version was set to 30 in our config for some reason.\nThanks a lot and sorry for wasting your time!. @TysonAndre Thanks! Done.. ",
    "localheinz": "Thank you, @jazzdan!. Thank you, @jazzdan!. Thank you, @morria!. Rebasing!. Thank you for reviewing, @morria!. Thank you, @jazzdan!\n. @morria \nWondering, are you planning to align your releases with the releases of PHP itself, then? Not sure if that is the best idea, would be nice to release independently from PHP, wouldn't it?\nJust to get an idea of how many branches we are talking about, which versions do you want to support?\nAlternatively to naming the versions after the corresponding PHP versions, why not make it (I take it the last release is 0.7) obvious in the platform requirements of the corresponding branches, and leave it with (for example):\n\n0.8 for 5.6\n0.9 for 7.0\n0.10 for 7.1\netc.\n\nI guess it's probably best (unless you want to tag a stable release) to stay with non-stable releases for now.\nWhat do you think?. @morria \nThe problems I see, though, is that if you adopt the same version major and minor version numbers for branches and releases, that you will \n\nend up with patch releases that contain both patches and features (because you cannot update the minor version if you want major and minor to be in sync with the supported PHP versions)\nhave stable releases and a hard time breaking BC (which we can do with non-stable releases any time)\n\nUnless I am mistaken, it probably means saying good bye to semantic versioning.\nI think the best documentation is that documentation that exists in code, so by specifying the platform requirements, it should be all fine, especially with using the ~ operator:\nFor PHP 5.6 branch, for example 0.8:\n```json\n{\n\"require\": {\n    \"php\": \"~5.6.0\"\n}\n\n}\n```\nFor PHP 7.0 branch, for example, 0.9\n```json\n{\n\"require\": {\n    \"php\": \"~7.0.0\"\n}\n\n}\n```\nFor PHP 7.1 branch, for example 0.10\n```json\n{\n\"require\": {\n    \"php\": \"~7.1.0\"\n}\n\n}\n```\nThis is what I would do, as \n\nrequirements are obvious, and composer will resolve the appropriate version\nreleases are non-stable, we can break BC any time (question is, is that even a concern, is anyone using etsy/phan to build PHP code on top of it? If so, maybe start marking classes as @internal, too)\n\nWhat do you think, though? I might be completely wrong. However, personally I like to avoid premature stable releases, hehe!\n\ud83e\udd13 . Can't harm to be a bit more specific here (using ^major.minor.patch documents which versions at were intended to be installed exactly).. While we are at it, can't harm to update these, too.. ",
    "legoktm": "Thank you!. Thanks!. #2525 is perfect, and does exactly what we needed. For reference, https://gerrit.wikimedia.org/r/c/mediawiki/tools/phan/+/493794 is the specific configuration we added.\nThanks! I think this can be closed now :-). ",
    "dereckson": "Meanwhile, you can use dev-master as version in your composer.json file, or clone the repository at master branch.. Furthermore, an array isn't currently recognized as an iterable, raising a PhanTypeMismatchArgument.. I've started to work on this issue \u2014 https://github.com/etsy/phan/compare/master...dereckson:iterable. Closed per pervious comment.. ",
    "rcatlin": "@morria Review?. Thanks @jazzdan !. ",
    "diegoholiveira": "I got the same problem with vendor/laravel/framework/src in my .phan\\config.php.\nmy .phan\\config.php:\n```\n<?php\nreturn [\n    'directory_list' => [\n        'app',\n        'vendor/laravel/framework/src/Illuminate',\n    ],\n    'exclude_analysis_directory_list' => [\n        'vendor/',\n    ],\n];\n```\nMy composer.json:\n{\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"laravel/framework\": \"5.3.*\",\n        \"moneyphp/money\": \"^3.0\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"phpunit/phpunit\": \"~5.0\",\n        \"symfony/css-selector\": \"3.1.*\",\n        \"symfony/dom-crawler\": \"3.1.*\",\n        \"laravel/homestead\": \"^4.0\",\n        \"squizlabs/php_codesniffer\": \"^2.7\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-install-cmd\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postInstall\",\n            \"php artisan optimize\"\n        ],\n        \"post-update-cmd\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postUpdate\",\n            \"php artisan optimize\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    }\n}\nUpdate: with this .phan\\config.php, it works:\n```\n<?php\nreturn [\n    'allow_missing_properties' => true,\n    'null_casts_as_any_type' => true,\n    'backward_compatibility_checks' => false,\n    'quick_mode' => true,\n    'minimum_severity' => 10,\n    'parent_constructor_required' => [],\n    'directory_list' => [\n        'app',\n        'vendor/laravel/framework/src/Illuminate/Auth',\n        'vendor/laravel/framework/src/Illuminate/Contracts',\n        'vendor/laravel/framework/src/Illuminate/Cookie',\n        'vendor/laravel/framework/src/Illuminate/Database',\n        'vendor/laravel/framework/src/Illuminate/Foundation',\n        'vendor/laravel/framework/src/Illuminate/Http',\n        'vendor/laravel/framework/src/Illuminate/Notifications',\n        'vendor/laravel/framework/src/Illuminate/Routing',\n        'vendor/laravel/framework/src/Illuminate/Session',\n        'vendor/laravel/framework/src/Illuminate/Support',\n        'vendor/laravel/framework/src/Illuminate/View',\n        'vendor/moneyphp/money/src',\n        'vendor/symfony/http-foundation',\n        'vendor/symfony/http-kernel',\n    ],\n    'exclude_analysis_directory_list' => [\n        'vendor/',\n    ],\n];\n```\n. @morria I found what is causing the error. The problem is in this file:\nhttps://github.com/laravel/framework/blob/5.3/src/Illuminate/Console/Command.php#L65-L78\nIf I remove the references to the constants of OutputInterface, it works. Here is the code that works:\n```\n    protected $verbosity = 32;\n/**\n * The mapping between human readable verbosity levels and Symfony's OutputInterface.\n *\n * @var array\n */\nprotected $verbosityMap = [\n    'v'      => 64,\n    'vv'     => 128,\n    'vvv'    => 256,\n    'quiet'  => 16,\n    'normal' => 32,\n];\n\n```\nI hope this can put some light into the issue.. ",
    "BenMorel": "I'm having the same issue on my codebase, and I am not using Laravel. Is there a way to make the output more verbose to find out which file is causing the issue?. ",
    "doctorallen": "Also experiencing this issue running Phan over a wordpress installation. . ",
    "AjkP": "+1 having the same problem on a different codebase :/. Thanks for fixing this! Tested it and confirming that it works.. Confirming seeing this warning. +1 for clearer error messages in general.\nFixing the exculde_file_regex worked fine for me.. ",
    "andrewsardone": "I could be missing something, but it seems like I could achieve what I want if I could pass in all directories that need parsing as a separate argument, and then just rely on stdin or --file-list for declaring the files to be analyzed.\nPerhaps that's what the --file-list-only argument is for, but creating a separate file list just to analyze a single file feels awkward and counterintuitive to phan's basic usage:\nUsage: /opt/phan/phan [options] [files...]\nWhat to parse should be an option, what to analyze should be the passed-in files.. @morria, why was this issue closed?. ",
    "gmazzap": "phpStorm is compatible with @param string[] $words when the code is function name(string ...$words), and becaie I'm using that IDE I am following that style, and honestly that make sense IMO, because inside the function body the variable $words will be an array of strings, just like string[] $wordssuggests.\nHowever, I got PhanTypeMismatchDeclaredParam for such code.\nWould be very nice if Phan could support that style, considering that it seems quite reasonable and a popular IDE uses it.. ",
    "algo13": "@morria Thanks for the comment!\nI overlooked it.\n(I was in trouble with php-ast#41)\n. ",
    "tersmitten": "It's about this one\nphp\nCatching undeclared class \\PDOException\nin the title. \n\nSoap errors are from this file. @morria I'm running it using docker-phan, so probably doesn't match. Thanks for the tip!. A 0.8.4 release would be appreciated too\nThank in advance.. Any updates on this?. Personally I'm more interested in all the variables the are detected as unused but are actually passed using compact.\nAny reason CompactPlugin is not detecting these? And I'm I right that this (compacted variables) were working in older versions?. ",
    "berndlosert": "It's not creating the classes on the fly; it is creating class aliases on the fly: https://github.com/laravel/framework/blob/4.2/src/Illuminate/Foundation/AliasLoader.php#L64. I added stub/_ide_helper.php and modified .phan/config.php accordingly. It fixed the problem. Thank you for the help gentleman.. ",
    "hughgrigg": "Sounds like Laravel IDE helper might be handy for generating the stubs file. https://github.com/barryvdh/laravel-ide-helper. ",
    "yazfield": "@berndlosert this is quite old but could you share your configuration with me? this isn't working for me somehow i'm not sure what i'm doing wrong.. ",
    "gavinr": "@cviebrock where do you get _ide_helper.php?. ",
    "zonuexe": "@gavinr Add barryvdh/laravel-ide-helper to your Lalavel project, and run php artisan ide-helper:generate.. @TysonAndre Thank you for review.  I reverted two commits, and I will submit them in other PR.. Hmm... This code cause run-time errors on lines 3, 6, and 7.\n```php\n<?php  declare(strict_types=1);\n/3/ printLineOnError(function () { $cond1 = version_compare(); }); // ArgumentCountError\n/4/ printLineOnError(function () { $cond2 = version_compare('0.1.1', '0.1.2-rc', '>='); });\n/5/ printLineOnError(function () { assert_int(version_compare('0.1.1', '0.1.2-rc')); }); // ok\n/6/ printLineOnError(function () { assert_int(version_compare('0.1.1', '0.1.2-rc', '>=')); }); // TypeError\n/7/ printLineOnError(function () { assert_bool(version_compare('0.1.1', '0.1.2-rc')); }); // TypeError\n/8/ printLineOnError(function () { assert_bool(version_compare('0.1.1', '0.1.2-rc', '>=')); }); // ok\nfunction assert_int(int $v) {}\nfunction assert_bool(bool $v) {}\nfunction printLineOnError(Closure $f)\n{\n    try {\n        $f();\n    } catch (\\TypeError $e) {\n        echo $e->getTrace()[0]['line'], ' ', get_class($e), PHP_EOL;\n    }\n}\n```\nI expect Phan to be able to detect types returned dependent on arguments.\nHowever, Phan seems to report that there are problems on lines 3, 7, 8.\n./tests/files/src/2138_version_compare.php:3 PhanParamTooFewInternal Call with 0 arg(s) to \\version_compare() which requires 2 arg(s)\n./tests/files/src/2138_version_compare.php:7 PhanTypeMismatchArgument Argument 1 (v) is int but \\assert_bool() takes bool defined at ./tests/files/src/2138_version_compare.php:12\n./tests/files/src/2138_version_compare.php:8 PhanTypeMismatchArgument Argument 1 (v) is int but \\assert_bool() takes bool defined at ./tests/files/src/2138_version_compare.php:12. @TysonAndre Thank you for last time's PR #2138 . I learned how to define Phan's type from your changes, so I think that this PR is no problem.. @TysonAndre Sorry again, its definition was reversed.  I fixed it.. ",
    "psampaz": "I can confirm this bug.\nI have the same issue with Guzzle's namespaced functions\nI get this error \nPhanUndeclaredFunction Call to undeclared function \\Psr7\\build_query()\nwhen I use Psr7\\build_query() in my code.\nIf I use the fully qualified name GuzzleHttp\\Psr7\\build_query() there is not problem\n. ",
    "fkooman": "```\nstrlen\n==============\nFunction [  function strlen ] {\n\nParameters [1] {\n    Parameter #0 [  $str ]\n  }\n}\n\nArray\n(\n    [0] => ReflectionParameter Object\n        (\n            [name] => str\n        )\n)\n\\Sodium\\compare\nFunction [  function Sodium\\compare ] {\n\nParameters [1] {\n    Parameter #0 [  $string ]\n  }\n}\n\nArray\n(\n    [0] => ReflectionParameter Object\n        (\n            [name] => string\n        )\n)\n```. ",
    "AaronSchulz": "This is causing a problem with some commits to mine in a repo where I'm trying to move a class to a namespace but without breaking backwards compatibility. Such commits don't make it past our CI due to phan tests failing.. ",
    "PatrickRose": "Possibly - though the stack trace shows it thought the constant was an issue because it wasn't defined. Phan's correct in thinking that, but it doesn't need to think it yet.\nI think the parsing process should be catching IssueException and silently ignoring them.. It doesn't complain if there's no docblock on the base method. I think Phan should be complaining but I'm not 100% sure what ParamSignatureMismatch is defined to return.. ",
    "bitwombat": "Rather than stack puke, phan should complain and exit... this behavior just tripped me up too.. ",
    "polothy": "Just incase another example is needed/helpful, I'm getting this:\nPhanTypeMismatchArgument Argument 1 (messages) is string but ... takes array|string[] defined at vendor/symfony/console/Style/SymfonyStyle.php:316\nThe PHPDoc definition is here: https://github.com/symfony/console/blob/master/Output/OutputInterface.php#L45\nAppears to be converting the string into array of strings (string[]) and I'm guessing it is because array is an optional type. \nEdit: phan version 0.9.1 installed via Composer.. ",
    "adambaratz": "This is an interesting idea. It would make the interface more self-documenting, for sure. And, yes, the performance gains.\nI'm still new to the code, so the rest of this comment is more thinking out loud than anything. By all means tell me if I'm scope creeping on you.\nOne thing I'm wondering is whether all of the Analyzer classes should be structured as plugins. As they're currently setup, they do their work whether or not the run is configured to emit the related messages. There's definitely a performance drag here. A more composable architecture would make it easier for to manage performance, and maybe also the flycheck plugins it looks like you're experimenting with.\nBut the way CodeBase instances are used, this might be tricky. Some analysis phases are dependent on earlier ones, in a way that's mostly implicit. I'm thinking in particular about dead code detection, via ReferenceCountsAnalyzer, which relies on accumulating reference counts in an earlier phase. You have to know that those counts won't be complete until the end, even though they're accessible to plugins in earlier phases. This might not really be a problem. The kind of encapsulation I'm suggesting might not be all that useful, or it might have a different set of performance drawbacks.\nIt could be helpful to add a plugin hook for after dead code analysis, when that complete CodeBase is available.. (Sorry for the very delayed reply on this.)\nI think what I'm suggesting would address the issues you're describing. They all sound like side effects of a monolithic codebase. By decoupling the analysis steps, it would become safer to drop any that a user isn't interested in.\nI don't think the \"under development\" status of Phan is at odds with this kind of change. Less monolithic code could possibly speed up development. That said, I realize that \"monolithic = bad\" is more \"academic argument\" than \"universal truth.\". I can take a pass at this.. I posted some WIP code in #689 but figured it's best to keep the big picture discussion here. I tackled two different changes simultaneously, which I have different feelings about. I'd like to get some feedback before I get much deeper into this.\nGeneralize the language element analyzers\nI don't feel great about the road I started down here. I think my main complaint is that it feels like there's more indirection added than boilerplate removed. @TysonAndre did call that out, so, um, there you go. But maybe that layer is just fine for plugins.\nRemove boilerplate from node analyzer plugins\nThis feels okay to me. Aesthetically/ergonomically, I like how slimmer those plugins look. There's maybe some more asserts I could put in ConfigPluginSet. That class could definitely get cleaned up... definitely POC quality.\nOther thoughts\nIt feels like a good idea to normalize the type that the plugin files should return. Maybe object or maybe string is goofy. But that would likely prompt backwards compatibility issues. It sounded like there was some desire to avoid those.\nDemoPlugin seems out of place now, since it does both language elements and nodes. Maybe such plugin \"suites\" should be phased out, but maybe there's some organizational utility to that. I certainly don't have a good handle on common use cases for plugins in the wild.. @morria / @TysonAndre: Any thoughts on the above? I realize it might be a little messy. Happy to do some further cleanup if that would help. Just didn't want to go too deep without getting feedback on the general direction.. Is there anything worth working with out of #689? No worries if you think it's the wrong direction. I'd just want to close the PR so it's not hanging around.. I like the general approach. I think event-driven is the right model.\nSome miscellaneous thoughts...\nConfiguration\nMaybe instead of QuickModeOnlyCapability, create a more generic interface that ConfigPluginSet would use to determine whether to add a plugin to any of its plugin sets:\nphp\ninterface ConfigCapability {\n    abstract public static function isPluginActive(\\Phan\\Config $config) : bool;\n}\nIf not present, it would be assumed that a plugin was active.\nDependencies\nSince plugins can touch global state -- i.e., CodeBase -- and may rely on updates from others, a capability that indicates dependencies could be used by ConfigPluginSet to determine ordering of its plugin sets. Or to throw an error if a plugin implementing AnalyzeRawFileCapability would depend on one implementing FinalizeCapability.\nphp\ninterface DependencyCapability {\n    abstract public static function getDependencies() : array; // array of ::class strings\n}\nI suppose that raises another question: would plugin choreography be simplified if capabilities were abstract classes? That is, if each plugin were restricted to only have one capability.\nPlugin State\nI worry about the potential for abuse of CodeBase. It would be helpful to create a pathway for plugins to hold their own state, and maybe even emitted issues, which other plugins could then ask for.\nThis idea (and the dependencies one) came up when I was looking into (ab)using Phan to do some analysis based on references to symbols. That information is only available at a late analysis phase if it was produced in an earlier one.. Thanks for the extra details.\nAll makes sense, except for the suggested signature change on ConfigCapability. What's represented by $capability? My thought was the plugin would know what it needed to pull out of the Config instance. Which could potentially be multiple fields.. Thanks for the feedback! I'll work on splitting out the changes that we both like.\nAt some point, I do want to come back to some of the other ideas presented here. I'm still suspicious of leaning too much on bundling operations into static methods. I understand the performance benefit, but I worry that the tight dependencies between classes could impede broader performance improvements. That said, at this point it's mostly an intuition. It would be more productive to think through those changes, instead of introducing performance regressions on a hunch.. Good calls, both. Updated accordingly.. I think I covered every change you requested. Is there anything else I should take care of before merging?. Thanks! I updated NEWS and added a note about a potential future optimization.. Yes, the issue is valid if there's no __call method. I wasn't sure what the appropriate behavior would be. A slightly different warning when __call is present, but @method absent, would be helpful, and easy enough to implement. I can look into that.. Interestingly, this doesn't result in any errors on master:\n```php\n<?php\nclass A\n{\n    private static function hidden()\n    {\n        return true;\n    }\npublic static function __callStatic($name, array $args)\n{\n    if ($name == 'hidden') {\n        return self::hidden();\n    }\n}\n\n}\nvar_dump(A::hidden());\n```\nBut you also don't get errors if there's no __callStatic. You will get a fatal for calling a private method if you run it. I'll create a separate issue for that.. Since the code is intertwined, I'll look at the issue with static methods before coming back to this one.. The way the @method tag is documented, it suggests it's only for instance methods. I merged master and updated the code to be structured that way. I think warnings that suggest solutions are nice, but they shouldn't necessarily be comprehensive.\nDo you agree with this? Anything else you'd like me to clean up before merging?. This might be a duplicate of #538.. Well, you can run on a Mac without Homebrew, so I don't think the testing part should block. Being able to install with Homebrew is just a convenience.\nThe PR process is as simple as updating the URL and hash. If you don't want to wrap that into the release process, a note on the wiki page saying that Homebrew isn't guaranteed to provide the latest version should be fine.. I think putting them in the release descriptions is fine. Kubernetes does that. This may not be all that an important thing. Just something I thought of when doing the Homebrew PRs.. This call was removed because true is the default.. I used print for consistency with the existing handler, but could switch to error_log() if that's better for use inside this class. Would just be curious then why the other handlers go straight to STDOUT.. All set.. I switched to error_log() because it felt better.. ",
    "brennen": "@TysonAndre thanks for the speedy response on this one!. Ah, sorry about radio silence.  To the best of my recollection it did, but I immediately encountered another similar issue and gave up on phan for the project.. ",
    "zefj": "@TysonAndre why does it only start emitting this error on SEVERITY_NORMAL? This is a critical issue that throws an unrecoverable fatal error since PHP 7.1.. ",
    "kevingessner": "Thanks @TysonAndre! That's just what I need.. This proved too difficult: the assignment target isn't always a variable (it could be a property or an array element), and there's no easy way to get a stringified version of that.  It might be a nice thing to add in the future.\n. ",
    "miniatureape": "Is this a dupe of https://github.com/etsy/phan/issues/353 ?. ",
    "kyleds": "\nWe're defining @internal to mean \"Internal to the Namespace\", which may or may not differ slightly from phpdoc's definition\n\n\"The @internal tag is used to denote that associated Structural Elements are elements internal to this application or library.\" Canonicalizing this as the Namespace does seem like a bit of a reach. I don't have another alternative handy and it doesn't bother me so I'm ok with this definition.\n\nWe're defining @internal to mean \"Internal to this exact Namespace\" and not to children or parent (as happens for package-private classes in Java)\n\n@rlerdorf suggested perhaps treating this in the way that the 'protected' access specifier works in OO languages - that child namespaces have access to (some of) their parent's internals. I think this makes sense if we consider sub-namespaces to be an implementation detail of some larger library. In that way, it's still considered part of the same logical grouping and thus could have that visibility.. Ah, true. Attaching semantic meaning to an otherwise agnostic mechanism does sound surprising. I'll close this out and open a different proposal.. I don't think we should infer the package from the namespace. From the @package expository text:\n\nThe @package tag can be used as a counterpart or supplement to Namespaces. Namespaces provide a functional subdivision of Structural Elements where the @package tag can provide a logical subdivision in which way the elements can be grouped with a different hierarchy.\n\nThe intent of the package annotation seems to specifically be to allow for the two to diverge. Given that, it seems surprising to assume one from the other.. Inheritance cascades the 'internal'-ness, then? I think that's right.. ",
    "dgafka": "Very :+1:  for implementing this feature, that went pretty fast :)\nFor me it has sense, when it's implemented this way: \nFirst example (Access from different namespace hierarchy)\n```php\n        namespace A\n        {\n            /*\n             * @internal\n             /\n            class Rabbit\n            {\n        }\n    }\n\n    namespace A\\D\n    {\n\n        /**\n         * This is fine.\n         * Child namespaces known about parent's internals\n         */\n        class OmegaRabbit extends \\A\\Rabbit\n        {\n\n        }\n    }\n\n\n    namespace B\n    {\n        /**\n         * This is not fine. Different namespace hierarchy \n         */\n        class OmegaRabbit extends \\A\\Rabbit\n        {\n\n        }\n    }\n\n```\n\nSecond example (access to child namespace internals)\n```php\n       namespace A\n        {\n            class Home\n            {\n                /*\n                * This is not fine\n                * As parent namespaces should not know about internals of child ones\n                /      \n                public function addRoom(\\A\\D\\Room $room)\n                { \n                }\n            }\n        }\n    namespace A\\D\n    {\n\n        /**\n         * @internal\n         */\n        class Room\n        {\n\n        }\n    }\n\n```\nThird example (Exposing internal via getter)\n```php\n        namespace A\n        {\n            /*\n             * @internal\n             /\n            class Container\n            {\n        }\n    }\n\n    namespace A\n    {\n\n        /**\n         * This is fine\n         */\n        class Storage\n        {\n            public function getContainer() : Container\n            {\n                /**\n                 * Public class exposes internal class via getter\n                 * This may or not be fine depending who's client of the api\n                 */\n                return new Container();\n            }\n        }\n    }\n\n\n    namespace B\n    {\n\n        class Airport\n        {\n            public function getStorageContainer(\\A\\Storage $storage)\n            {\n                /**\n                 * This is not fine. Container class is internal and should not be used\n                 * outside of A and child namespaces.\n                 */\n                $container = $storage->getContainer();\n            }\n        }\n    }\n\n```\n. ",
    "bpicolo": "@TysonAndre  I actually see this issue even if maybeNull is declared specifically to not return null. If the variable goes through an is_null check afterwards, phan seems to assume the variable can be null. =/. @TysonAndre  For now I'm leaning on (foo === null), which does the trick.\nCode practices at work historically suggest preferring is_null(), so a lot of phan noise is this currently, is all : )\nLove the work you guys have done with phan, so thanks for that! I'm somewhat tempted to try making a language-server version so I can get more continuous checks. Loading the entirety for all our definitions for our monolith is currently quite a feat, hah, so I stick to running a more tame config. ",
    "ennorehling": "There is Drupal 7 code that does this, for example view::render(). The PHPdoc says @return (string|NULL), but there are some early exit conditions that just return;\nthat leads to a PhanTypeVoidAssignment warning at the call site.. It appears that I cannot attach a PHP file to an issue. Here's the code:\n<?php\n\nabstract class Base {\n  protected $data;\n\n  function __construct(array $data = null) {\n    $this->data = $data;\n  }\n}\n\nclass Wrapper extends Base {\n  function __get($name) {\n    return $this->data[$name];\n  }\n}\n\nclass Dummy extends Base {\n  function __construct() {\n    parent::__construct(NULL);\n  }\n\n  function __get($name) {\n    return $name;\n  }\n}\n\n/**\n * @param array|null $data\n * @return Base\n */\nfunction make_wrapper(array $data) {\n  if ($data) {\n    return new Wrapper($data);\n  }\n  return new Dummy();\n}\n\n$bla = make_wrapper(['foo' => 42, 'bar' => 23]);\necho $bla->foo . PHP_EOL;\n\n. Thanks for your feedback. My chosen workaround was to extend Drupal 7's EntityDrupalWrapper class with my own, and add any @property PhpDoc I needed to that new class.. Note: When using colorized output, I get warnings instead:\nMissing argument for colorized output (Declaration of {METHOD} should be compatible with internal {METHOD} (the method override requires {COUNT} parameters, but the overridden method requires only {COUNT}) defined in {FILE}:{LINE}), offset 4\nMissing argument for colorized output (Declaration of {METHOD} should be compatible with internal {METHOD} (the method override requires {COUNT} parameters, but the overridden method requires only {COUNT}) defined in {FILE}:{LINE}), offset 5\n. Thanks for the reply, it turns out I didn't have the intl extension enabled.. I ended up installing through pecl, which I managed to get working eventually. Thanks.. Thanks, that is exactly what I needed.. ",
    "ericnorris": "I agree with @kyleds. If we infer the package from the namespace then we're really just talking about changing how @internal works. Since we decided to go with leaving @internal as-is (for the most part) that is not currently an option.\nIf we wanted to infer namespace access, then we'd need to answer the questions that have come up so far:\n1) can a sub-namespace access a parent namespace internal class?\n2) can a parent namespace access a sub-namespace internal class?\nI don't recall how the discussions on that have gone, but by going with @package + @internal we sidestep that by requiring explicit documentation on what is allowed.\nI wouldn't be against some namespace-aware solution. It'd have a nice side-effect of preventing people from just slapping @package in their code to get access to things, as it'd require you to actually be in the namespace (and due to PSR loaders, in the directory hierarchy) which is a slightly higher bar.\n. Thanks!. If I understand correctly, we would return true here - $this would be the int[]|string[] union, and the other ($union_type) must only be a UnionType consisting solely of array.\nSince the function is isNarrowedArrayFormOf, $this can be any number of generic arrays and the other UnionType must always be simply array, which is why I do the typeCount check.\nI could also change this to:\n$union_type->isEqualTo(new UnionType([ArrayType::instance()]));\nif that makes any more sense.\n. Will do!\n. This is the opposite of the isNarrowedArrayFormOf, in that isStaticFormOf only makes sense if $this is a UnionType consisting solely of static. Otherwise it would be something like static|SomeType, which would not match the other $union_type in specificity. Example:\nphp\nclass A {\n    /**\n     * @return static|SomeType\n     */\n    function meow() : A {\n    }\n}\nSince A is not SomeType, this would not match. The return type should probably be dropped at that point, because PHP cannot represent it.\nEven if A was SomeType, it would be more specific to leave the comment as @return static.\n. Good point, will do!\n. Oh... hmm... I honestly don't know. I suppose if you define \"narrowed array form\" as:\n\nFor a given UnionType A and B:\nA is a narrowed array form of B if and only if every type T in A is a subset of every type T in B.\n\nSo in the first example,\n$a->isNarrowedArrayFormOf($b);\nI would expect it would return false, because A[] is not a subset of int[].\nFor the second example,\n$b->isNarrowedArrayFormOf($a);\nI would expect it would return false because int[] is not a subset of A[].\nThe last example, too, would be false because A[] is not a subset of int[].\nAn example where my current logic would not fit this definition:\n``` php\nclass A {}\nclass B extends A {}\nclass C extends A {}\n$a = new UnionType::fromString('C[]');\n$b = new UnionType::fromString('B[]|A[]');\n$a->isNarrowedArrayFormOf($b); // should return true?\n```\nAn other option is that we do some combinatorial stuff trying to figure out if there exists at least one combination for each type that matches, but I honestly don't even know where to begin with that.\n. @morria So I looked into this a little bit more, and there is an issue in the final step of $type->isNarrowedArrayFormOfType($that). I believe this is a bit harder than it seems, as it would require access to a CodeBase to determine if $this is a subclass of $that (i.e. to check the case where it is Child[] and Parent[]).\nThis isn't impossible, but it does mean we would need to pass a CodeBase throughout the calls. I think readability could suffer a bit here.\nI am thinking that we may want to stick with the original logic, or perhaps change the return type to be a Type instead of a UnionType. PHP doesn't support union types for return types, so this doesn't seem like a bad option (there was an RFC for union types, but it appears to have been rejected).\nIf we do that, then the problem can be simplified to\nphp\n$union_type->isGenericArray() && $type == ArrayType::instance();\nWhat do people think?\n. I agree, maybe we should be more explicit about what we're looking for. How do you feel about adding isCompatibleWithReturnType() to UnionType?\nphp\npublic function isCompatibleWithReturnType(UnionType $return_type, Context $context) : bool\n{\n    return $return_type->isEmpty() ||\n           $this->isEqualTo($return_type) ||\n           ($this->isGenericArray() && $return_type->isType(ArrayType::instance)) ||\n           $this->withStaticResolvedInContext($context)->isEqualTo($return_type);\n}\nThis covers all of the cases, and although it is a little verbose I think it's explicit and readable.\n. ",
    "jdwx": "Nice work @TysonAndre !\n. As noted in the original message, using simplify_ast on the master branch, which we already tried, does not appear to detect this case for us.  Hopefully eventually that will change.\nThanks for the suggestion to use assert; maybe the PHP 7 \"Expectations\" version of assert will work for us to inform Phan of what's going on without runtime impact.\n. Thanks @TysonAndre, your work on this project is impressive and much appreciated!\n. Updating this with a shorter self-contained example that has come up today:\n```\n<?php\nclass Foo {\n    /* @var ?string $bar /\n    public $bar;\n}\n$foo = new Foo;\nif ( is_string( $foo->bar ) )\n    echo \"strlen = \", strlen( $foo->bar ), \"\\n\";\n```\n. In cases where the type information is not available, due to declaration in some other file that is not processed yet or some other complicating factor, the workarounds suggested seem like the best solution, at least for now.\nIn cases where the type information is available, e.g. if it is in the same file or in a file previously processed, it would be a nice enhancement if phan were able to find and use that type information without help.\nIf that's problematic or difficult, the workarounds suggested should be able to mitigate the issue in those cases as well.\n. After this change, phan treats argv in an unusual way.\nThis code:\n```\n<?php\n$x = array_shift( $argv );\nif ( $argv )\n    echo \"Argv yes.\\n\";\nelse\n    echo \"Argv no.\\n\";\necho $argv[ 0 ], \"\\n\";\n```\nGenerates the result:\nargv.php:5 PhanUndeclaredVariable Variable $argv is undeclared\nThe order is not important; the conditional produces a warning and the array usages don't.\nEdit: pasted wrong example.\n. Workaround is:\nif ( count( $argv ) ) ...\nor \nif ( ! empty( $argv ) ) ...\n. #806 sounds like a great change; so many internal functions exhibit that behavior.  But it doesn't really affect this case, as \"false\" is the value we're trying pushed out of the code in favor of null.\nThe \"minimize false positives\" approach is understandable, but phan isn't entirely consistent in this area, and that can be confusing.\nTo give one example that comes up quite often, most people would probably consider string|null and ?string to be the same (and indeed there's lots of code with pre-7.1 phpdoc that refers to string|null because ?string wasn't a thing back then).  But phan doesn't think they're the same.\nFor example:\n```\n<?php\nfunction Example( string $x ) : void {\n    echo \"x = \", $x, \"\\n\";\n}\nfunction Example2( ?string $x ) : void {\n    Example( $x );\n}\n/* @param string|null $x /\nfunction Example3( $x ) : void {\n    Example( $x );\n}\n```\nDespite that Example2 and Example3 appear to have the same string-or-null type, phan warns about one but not the other because that was expressed differently:\n$ phan nullable3.php\nnullable3.php:8 PhanTypeMismatchArgument Argument 1 (x) is ?string but \\Example() takes string defined at nullable3.php:3\nProvided a \"more strict\" option were to become available, perhaps it would be beneficial to square up the behavior here?\n. Here's a first rough bash at what a strict type checking plugin might look like.\nRight now it's ugly and only handles function calls, not methods, static methods, or constructors, all of which could benefit from this type of checking.\nThe only real change here is using UnionType::isExclusivelyNarrowedFormOrEquivalentTo() in lieu of the UnionType::canCastToUnionType().  Everything else is just framework to recreate ArgumentType:: analyzeParameterList() since that doesn't appear to be hook-able at a closer point.\nIs this on the right track?\nStrictTypePlugin-php.txt\n. Thanks, those notes have been taken and incorporated.\nWhile trying to expand this to handle method invocations, I've gotten jammed up because it's not super clear how to get from the Node given to the plugin's analyzeNode() method to the FunctionInterface needed by analyzeParameterList().\nIt seems like some sort of fairly complex evaluation routine may be needed to determine the class that the method is being called on from an expression of arbitrary complexity.  (I.e. $x->y( $z) could probably be figured out, but what about $x->y()->z( $w ) ?\nLooking upward through the code, the existing methods get called from something that's enumerating them, rather than looking them up.\nIs there a better way to get from here to there?\nBased on the experience so far, it does seem like incorporating this directly into phan, where the proper structures are already available, would be more straightforward, \nWith that said, it definitely would need to be optional and default-off.  However helpful these additional messages might be, the volume of them can border on severely depression-inducing.\n. Yes, inserting the test there seems more viable.  Doing it as a plugin just seems to run into more and more issues.\nAlthough it absolutely, positively has to be runtime-configurable due to the soul-crushing volume of false positives.\nWork on this is continuing as time permits.\n. My apologies, I pasted the wrong example in #848 .  To reproduce:\n```\n<?php\n$x = array_shift( $argv );\nif ( $argv )\n    echo \"Argv yes.\\n\";\nelse\n    echo \"Argv no.\\n\";\necho $argv[ 0 ], \"\\n\";\n```\nSorry about that!\n. To exonerate array_shift:\n<?php\nif ( $argv )\n    echo \"Yes.\\n\";\nproduces:\n$ phan argv2.php\nargv2.php:2 PhanUndeclaredVariable Variable $argv is undeclared\n. #1039 does seem to resolve the issues we were seeing with isset().\nIt also appears to introduce some new issues where testing a variable of known type against a wider type causes the wider type to override the previous narrower type.\nUnfortunately in the case in question the test was weak/lazy anyway, and got rewritten faster than I could extract it to be self-contained.  The gist of it was that Phan was treating a variable of previously-known type as ?object after an is_object() call on that variable.  But a simple test doesn't show that behavior, so there's likely more to it.\n. Never mind, I checked the old version out of source control and the method producing that error was missing some probably-crucial type hints that indirectly resulted in the new error, thus I question Phan's ability to interpret the type of the affected variable in the first place.\nSo the new code is probably doing the right thing here as well.\n. ",
    "maksimovic": "Would a new issue should be added for this, or simply do an early return in case that closure is a static one (thus, emitting a default PhanUndeclaredVariable Variable $this is undeclared)?\nI'm leaning towards a new issue, because in that case Phan could provide a bit more information about the problem. For exampe, at the moment even a PhpStorm with additional EA Inspections plugin doesn't warn about this.. I've tried to work around this for several times in the last couple of days, but it just seems too hard, or even straight impossible - or I'm not skilled enough to find my way around in the codebase.\nSince Phan isn't actually creating an object to be evaluated, and since there's no class reference alongside the actual variable being passed to the function/method (so, no way to check if an argument is an instance of the specific class and that it has __invoke() method), it does its best to figure out the type by all means available - and always ends up with an object.\nOn the other hand, treating the case when argument's type is an object and parameter's type is callable as an allowed case would do more harm then good. With strict typing (return = object, param = callable) it can't be done in a clean way, it's just shuffling one warning for another.. How should this issue be categorized - CATEGORY_ACCESS or CATEGORY_COMPATIBLE?\nI guess it's going to be a bit wrong regardless of the choice, but to me it's leaning more towards CATEGORY_COMPATIBLE. Actually, CATEGORY_ACCESS is the right choice, since it's okay in 7.2 and above. CATEGORY_COMPATIBLE would be the right choice if things don't work in 7.2+. Lots of self-tests failing with 7.0 and 7.1 and I'm not sure how to avoid that, since the failures are not only for __construct's access level.\nChasing them 1 by 1 and supressing each and every one of them doesn't sound like a solution, but at the moment have no idea how to make the tests pass in a different way. This has been fixed in #1795 \n...and it keeps bugging me that we've named the warning as PhanCompatibleMultiExceptionCatchPHP70, while it's not PHP 7.0-specific - it's for everything <7.1 :(. It could've been just PhanCompatibleMultiExceptionCatch, but too late anyway \ud83e\udd37\u200d\u2642\ufe0f . Fixed by #1723 . Looks like this one has been fixed in #1716 . Thanks for the feedback.\nI did come back to rearrange and improve the code. Also managed to run the tests for PHP 7.0 after fixing the test.sh file a bit (can't try to remove the file like this on osx):\n```\n- rm $ACTUAL_PATH -f || exit 1\n\nif [ -f $ACTUAL_PATH ]; then\nrm -f $ACTUAL_PATH || exit 1\nfi\n```\n\nHowever, I'm having issues with determining the node type with UnionTypeVisitor::unionTypeFromNode() when the variable is in the global scope (like $str in my first test file), or when trying to get the type of a node that is a class property.\n$str = \"string\";\n$char = $str{-1}; // PhanUndeclaredVariable $str is undeclared\n\nor:\n```\nclass a\n{\npublic $string = \"string\";\n\npublic function something()\n{\n    return $this->string{-1}; // PhanUndeclaredVariable Variable $this is undeclared\n}\n\n}\n```\nIt just emits the PhanUndeclaredVariable warning and returns EmptyUnionType for these nodes.\nI suspect that something could be wrong with the \"context\" for the $str variable, but I'm not sure how to get this properly. Class variable is a total mistery to me. I doubt that Phan is wrong, it's probably me missing something. If I sound confusing, then maybe it's best to push the example I've came up with and then you can run Phan against it to check.\nEdit: note that static class properties or class constants aren't triggering the PhanUndeclaredVariable, they're doing just fine.. Build finally passing \ud83d\ude0c Added the check to UnionTypeVisitor::visitDim(), at the place where we're pretty confident that the type is string-ish.\nI've also simplified the test file. All those cases from the previous version aren't really required now that the check is where it really should be.\nNote that I did some minor changes along the way:\n- test.sh checking if $ACTUAL_PATH exists before trying to delete it\n- conditions in some of the if statements swapped, so the ones whose execution costs less are evaluated first\n- merged two separate if statements into one\n- .idea/ added to .gitignore (PhpStorm...)\n- check for $config_file_name being false, because realpath() can return it and then file_exists() blows up\n- added several blank lines to make the code less \"compressed\" - sometimes it's hard to distinguish where one thing ends and another one starts, especially when dealing with unfamiliar code.\nI'm not emotionally attached to these small touches listed above, but I'd appreciate if they're not dismissed \ud83c\udf7a . Would you keep the method and throw a E_USER_DEPRECATED until some release, or just straight rename it?. Sorry, deleted the branch by mistake (had a few closure-related branches). You can exclude the tests/stubs folder if it's causing issues:\nRight click -> Mark directory as -> Excluded. I've moved the check to MiscParamPlugin. Can't believe I've missed the array key.\nSimplified the check itself according to your comment, too.. I've noticed that, and I was in doubt whether to dismiss this case or to take it into account (so both warnings get emitted by default).\nHowever, one could suppress/exclude PhanTypeMismatchDimFetch so this would go unnoticed, but... you are probably aware of that. My gut feeling is that we shouldn't do this, too. Will remove it.. Eh, sorry. Thought I've made myself sound like a total noob when opening the PR :)\nI knew that it must be something like that, but I couldn't figure it out myself. It's a bit overwhelming experience to dive into the internals of Phan, still struggling.. I actually failed to even check what the method does.\nNow that I took another look, I can see that it's always being called in object context. It's a perfectly valid method and producing desired results without being static.\nLooks like a copy-paste of PluginAwareBaseAnalysisVisitor::isDefinedInSubclass(), except that there it's defined and called statically.. Alright, this is something new - I'll revisit the PR later as I don't have much free time until the 2nd half of the week (or until the weekend). I had a brief look at the MiscParamPlugin and I think I've got the idea about the solution for this. Agreed on the overhead.. ",
    "TomasVotruba": ":+1: . Just wondering, how is this useful information for user when typehint is already there?. I understand. Has this convention any added value to you?. ",
    "JBerkvens": "Also a more specific problem is that Redis::connect is missing the \"reserved\" param.\n'Redis::connect' => ['bool', 'host'=>'string', 'port='=>'int', 'timeout='=>'float', 'reserved='=>'null', 'retry_interval='=>'?int'],. ",
    "remicollet": "\nHave you reported a bug with their extension as well? (getType of params and return values?)\n\nSorry, no, no point of contact\n(no link to sources, no link to bug tracker). > Isn't https://gitlab.com/pmjones/ext-request/tree/master the source?\nYes probably\nBut I'm not able to open issue there, and don't plan to contribute to anything hosted on gitlab \n(since they drop ext. auth, I lost all my work there... /me is angry). P.S. btw, mail sent to 1 of the extension leads @jbboehr. Comment on PHP PR very welcome. @TysonAndre I think everything is now fixed in upstream (including the \"resources\" bad type hinting), and phan test suite pass with these changes. Just not released yet.. @stanley-cheung  @jtattermusch   can you please also have a look, as related to gRPC extension. > Did any previous grpc versions avoid this issue?\nNo issue with grpc 1.3.2 (stable)\nHangs with 1.4.0RC2\n\nDoes ./phan work? Does a short test script work?\n\nYes phan (seems to) work as expected.\n. strace output\n...\nopen(\"/dev/shm/BUILDROOT/phan-0.8.4-1.fc25.remi.x86_64/usr/share/php/Phan/ForkPool.php\", O_RDONLY) = 6\nfstat(6, {st_mode=S_IFREG|0644, st_size=7451, ...}) = 0\nfstat(6, {st_mode=S_IFREG|0644, st_size=7451, ...}) = 0\nfstat(6, {st_mode=S_IFREG|0644, st_size=7451, ...}) = 0\nmmap(NULL, 7451, PROT_READ, MAP_SHARED, 6, 0) = 0x7fd159870000\nmunmap(0x7fd159870000, 7451)            = 0\nclose(6)                                = 0\nsocketpair(AF_UNIX, SOCK_STREAM, 0, [6, 7]) = 0\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fd159864450) = 13610\nclose(7)                                = 0\nfcntl(6, F_GETFL)                       = 0x2 (flags O_RDWR)\nfcntl(6, F_SETFL, O_RDWR|O_NONBLOCK)    = 0\nsocketpair(AF_UNIX, SOCK_STREAM, 0, [7, 8]) = 0\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fd159864450) = 13611\nclose(8)                                = 0\nfcntl(7, F_GETFL)                       = 0x2 (flags O_RDWR)\nfcntl(7, F_SETFL, O_RDWR|O_NONBLOCK)    = 0\nsocketpair(AF_UNIX, SOCK_STREAM, 0, [8, 9]) = 0\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fd159864450) = 13612\nclose(9)                                = 0\nfcntl(8, F_GETFL)                       = 0x2 (flags O_RDWR)\nfcntl(8, F_SETFL, O_RDWR|O_NONBLOCK)    = 0\nsocketpair(AF_UNIX, SOCK_STREAM, 0, [9, 10]) = 0\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fd159864450) = 13613\nclose(10)                               = 0\nfcntl(9, F_GETFL)                       = 0x2 (flags O_RDWR)\nfcntl(9, F_SETFL, O_RDWR|O_NONBLOCK)    = 0\nselect(10, [6 7 8 9], [], [], NULL)     = 4 (in [6 7 8 9])\nrecvfrom(6, \"a:4:{i:0;i:1;i:1;i:2;i:2;i:3;i:3\"..., 8192, 0, NULL, NULL) = 38\npoll([{fd=6, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 1 ([{fd=6, revents=POLLIN|POLLHUP}])\nrecvfrom(6, \"\", 1, MSG_PEEK, NULL, NULL) = 0\nclose(6)                                = 0\nrecvfrom(7, \"a:4:{i:0;i:5;i:1;i:6;i:2;i:7;i:3\"..., 8192, 0, NULL, NULL) = 38\npoll([{fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 1 ([{fd=7, revents=POLLIN|POLLHUP}])\nrecvfrom(7, \"\", 1, MSG_PEEK, NULL, NULL) = 0\nclose(7)                                = 0\nrecvfrom(8, \"a:4:{i:0;i:9;i:1;i:10;i:2;i:11;i\"..., 8192, 0, NULL, NULL) = 41\npoll([{fd=8, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 1 ([{fd=8, revents=POLLIN|POLLHUP}])\nrecvfrom(8, \"\", 1, MSG_PEEK, NULL, NULL) = 0\nclose(8)                                = 0\nrecvfrom(9, \"a:4:{i:0;i:13;i:1;i:14;i:2;i:15;\"..., 8192, 0, NULL, NULL) = 42\npoll([{fd=9, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 1 ([{fd=9, revents=POLLIN|POLLHUP}])\nrecvfrom(9, \"\", 1, MSG_PEEK, NULL, NULL) = 0\nclose(9)                                = 0\nwait4(13610,\nThe socketpair seems to come from  stream_socket_pair called in ForkPool::__construct(). > Does ./phan -j 2 also crash?\nIt hangs\n\nThere doesn't seem to be anything left to do on the phan side\n\nIndeed (perhaps, deny -j usage when grpc present ? and skip test ?). Thanks for the quick fix proposal\n(you were faster than me... planed to work on it later). I think This is the minimal way (already used by composer, phpunit, ...)\nNo idea how to make better. Terribly bad idea.\nSorry but tests are part of the project.\n. > @remicollet - do you have a link to the steps you used to set up that PHP binary?\nIt is my dev computer\nMostly Fedora 27 (for now) and \"dnf install php*\"\n. I add the second parameter in 7.0, especially because I see too much use of dirname(dirname(dirname(....  ;). ",
    "nicolasnoble": "The gRPC C core doesn't handle forking properly. This is a known problem. It's still possible to use gRPC while forking, but some care is needed. The PHP extension may require some massaging to handle this. . ",
    "cxfksword": "@TysonAndre my defined constants:\nhttps://gist.github.com/cxfksword/a1ca0bb0deb007abc37dff5f4912fd30\nmy environment:\nwindows7 x64\nphp7.1.6 x64\nphan 0.9.2\n. when i use composer to install, will be ok.\nbut use phar will get error.. ",
    "Aerendir": "Ok, so until now, I've only found where the error is emitted:\nhttps://github.com/phan/phan/blob/master/src/Phan/Analysis/PostOrderAnalysisVisitor.php#L1840-L1851\n```php\n// Phan\\Analysis\\PostOrderAnalysisVisitor::visitNew()\n...\n                foreach ($class->getInterfaceFQSENList() as $interface) {\n                    $clazz = $this->code_base->getClassByFQSEN($interface);\n                    if ($clazz->isDeprecated()) {\n                        $this->emitIssue(\n                            Issue::DeprecatedInterface,\n                            $node->lineno,\n                            (string)$clazz->getFQSEN(),\n                            $clazz->getContext()->getFile(),\n                            (string)$clazz->getContext()->getLineNumberStart()\n                        );\n                    }\n                }\n...\n````\nThis method is PostOrderAnalysisVisitor::visitNew(), so I imagine there is a method that visits the declaration, and not the new instance.\nBut I cannot find any visit*() method that reminds to the declaration of the class and not to its instantiation...\nAny suggestions?. Maybe is one of\n\nPostOrderAnalysisVisitor::visitPostDec()\nPostOrderAnalysisVisitor::visitPostInc()\nPostOrderAnalysisVisitor::visitPreDec()\nPostOrderAnalysisVisitor::visitPreInc()\n\nThey all call the same method PostOrderAnalysisVisitor::analyzeIncOrDec().... So, dumping with this code gives exactly what it is required:\nphp\nforeach ($class->getInterfaceFQSENList() as $interface) {\n                    $clazz = $this->code_base->getClassByFQSEN($interface);\n                    if ($clazz->isDeprecated()) {\n                        if ('\\Pagerfanta\\PagerfantaInterface' === (string)$clazz->getFQSEN()) {\n                            dump($clazz,\n                                $node->lineno,\n                                (string)$clazz->getFQSEN(),\n                                $clazz->getContext()->getFile(),\n                                (string)$clazz->getContext()->getLineNumberStart());\n                            dd($class,\n                                //$node->lineno,\n                                (string)$class->getFQSEN(),\n                                $class->getContext()->getFile(),\n                                (string)$class->getContext()->getLineNumberStart());\n                        }\n                        $this->emitIssue(\n                            Issue::DeprecatedInterface,\n                            $node->lineno,\n                            (string)$clazz->getFQSEN(),\n                            $clazz->getContext()->getFile(),\n                            (string)$clazz->getContext()->getLineNumberStart()\n                        );\n                    }\n                }\nconsole\n...\n\"\\Pagerfanta\\Pagerfanta\"\n\"vendor/pagerfanta/pagerfanta/src/Pagerfanta/Pagerfanta.php\"\n\"30\"\nSo, is the fix as easy as changing $calzz with $class \ud83e\udd14?\nSomething like\nphp\n                       $this->emitIssue(\n                            Issue::DeprecatedInterface,\n                            (string)$class->getContext()->getLineNumberStart()\n                            (string)$class->getFQSEN(),\n                            $class->getContext()->getFile()\n                        );. Ok, $class->analyze($code_base) is the entry point... But, then, the concrete analysis should be done in one of the static methods called by Clazz::analyze(), doesn't it?\n```php\nclass Clazz {\n...\n    /\n     * This method should be called after hydration\n     \n     * @return void\n     * @throws RecursionDepthException for deep class hierarchies\n     /\n    final public function analyze(CodeBase $code_base)\n    {\n        if ($this->isPHPInternal()) {\n            return;\n        }\n    // Make sure the parent classes exist\n    ClassInheritanceAnalyzer::analyzeClassInheritance(\n        $code_base,\n        $this\n    );\n\n    DuplicateClassAnalyzer::analyzeDuplicateClass(\n        $code_base,\n        $this\n    );\n\n    ParentConstructorCalledAnalyzer::analyzeParentConstructorCalled(\n        $code_base,\n        $this\n    );\n\n    PropertyTypesAnalyzer::analyzePropertyTypes(\n        $code_base,\n        $this\n    );\n\n    // Analyze this class to make sure that we don't have conflicting\n    // types between similar inherited methods.\n    CompositionAnalyzer::analyzeComposition(\n        $code_base,\n        $this\n    );\n\n    // Let any configured plugins analyze the class\n    ConfigPluginSet::instance()->analyzeClass(\n        $code_base,\n        $this\n    );\n}\n\n...\n}\n```\nSo, the best suited may be ClassInheritanceAnalyzer::analyzeClassInheritance() that has the exact same foreach cycle:\n```php\n// Phan\\Analysis\\ClassInheritanceAnalyzer\n/**\n * Checks if the given Clazz(class/trait/interface) properly inherits\n * from its classes, traits, and/or interfaces\n *\n * @return void\n */\npublic static function analyzeClassInheritance(\n    CodeBase $code_base,\n    Clazz $clazz\n) {\n\n    ...\n\n    // This foreach is the same of the one in\n    // Phan\\Analysis\\PostOrderAnalysisVisitor::visitNew()\n    foreach ($clazz->getInterfaceFQSENList() as $fqsen) {\n        $class_exists = self::fqsenExistsForClass(\n            $fqsen,\n            $code_base,\n            $clazz,\n            Issue::UndeclaredInterface\n        );\n\n        if ($class_exists) {\n            self::testClassAccess(\n                $clazz,\n                $code_base->getClassByFQSEN($fqsen),\n                $code_base\n            );\n        }\n    }\n\n    ...\n}\n\n```\nBut all the checks only ensure the class exists: do you want to add also the one about deprecation?\nIs this the best place where to do this check?\nAm I loosing some steps?. The same applies also to traits, I imagine.... @TysonAndre , first, thank you for your reply.\nGoing to my question, I don't like the idea of simply suppress PhanInvalidCommentForDeclarationType in any way (so, I don't like options 2, 3 and 4).\nThe only remaining option is the 1: I'll send a PR tomorrow.... Yes, I added exactly this line looking into the Phan's configuration.\nBut I reported anyway the error as I don't know if it is a bug or not and thought you would like to be aware of it.... Ok, it works accepting the download of keys...\nRemains the problem of the interaction that makes impossible to use phive to install phan on CI servers...\nThere is an open issue that may be relevant: https://github.com/phar-io/phive/issues/134. @TysonAndre , the problem is that I'm not directly using the interface but a concrete implementation that is not deprecated and that doesn't belong to my project.\nYour considerations are right, but if I implement the deprecated interface.\nIf I'm using a concrete implementation that is not under my control and that is not deprecated, this warning is useless and basically doesn't permit me to focus on real thing on which I have real control, nor use Phan in a CI to check the code as it will always alert of issues, but they don't depend on me.\nI've found the issue you linked, but it has only the title and I didn't understood it is related to this problem.\nBy the way, the curent behavior is very helpful: it helped me remove a deprecation of a Symfony interface (AdvancedUserInterface) that I used as type casting.\nBut, as told, in this case i simply create a concrete object from a third party library and incidentally this concrete object implements a deprecated interface that I don't use in any way in my code (nor as return type hint nor as parameter type casting).. @TysonAndre I've updated the code to reflect the fact that I'm using a concrete implementation from outside my project and not the interface directly.. ",
    "acrozes": "Yes you right, it seems work well even with this warning .... ",
    "jcchavezs": "I see but as far as I know @supress is not an standard annotation so it\nmight mean that we couple the code with the analysis library. Does it make\nsense to have something like phpstan were you can ignore error messages by\nregex?\nDen tir. 1. aug. 2017, 17.35 skrev Tyson Andre notifications@github.com:\n\nhttps://github.com/etsy/phan/wiki/Annotating-Your-Source-Code#suppress\nexists to suppress issues on the function/method/class/etc level. See\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/etsy/phan/issues/1047#issuecomment-319407936, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AC7sAuk7yr44G7YLQRFuou8EDnsQR4CZks5sT0W7gaJpZM4OpcxQ\n.\n-- \nJos\u00e9 Carlos Ch\u00e1vez\nSpain: (+34) 672921339\nPer\u00fa: (+51) 708-5422 Anexo 918\n\nhttps://github.com/jcchavezs\n. ",
    "2xblue": "with just c:\\wamp\\www\\project>.\\vendor\\bin\\phan I get\nRecursiveDirectoryIterator::__construct(src,src): The system cannot find the file specified. (code: 2). ",
    "arjenschol": "Thanks for the suggestion!\nEnabling simplify_ast does indeed help. The offending issues disappeared and some new valid issues appeared.. 0.10.2 fails when no else {} is specified:\nphp\nif (!preg_match('/foo/', 'foobar', $matches))\n        throw new Exception('Errr');\nWorked in 0.10.1, now fails in 0.10.2. Plenty of memory (32Gb),  running 7.2.2. No composer dependencies, private project. No xdebug loaded (even not installed on the machine running phan).\nSome xdebug profiling resulted in a 6Gb cachegrind file, which didn't fit in my workstations memory \nI aborted phan halfway, so I could load a 2Gb file. Most of the time was spent in UnionType related methods. I'm going to analyze this further.\n0.11.3 stil has a 10 minutes 50 sec execution time.... ",
    "brianlmoon": "I have a similar, but not quite the same issue. Because classes using a trait must define properties with the same initial value, we don't put properties in traits. But, this causes phan to report an undeclared property in the trait.\nsrc/Traits/MyTrait.php:30 PhanUndeclaredStaticProperty Static property 'my_property' on \\MyTrait is undeclared\nphp\n<?php\ntrait MyTrait {\n    protected function func() {\n        if (property_exists(get_class($this), \"my_property\")) {\n            $foo = self::$my_property;\n        }\n    }\n}. ",
    "torinaki": "It seems that Phan is not aware of Trait late static binding behaviour. self in the scope of a trait should refer to different classes in which it is used instead of trait is self.\nI have described this behaviour with an example of code in #2006. I\u2019m using PHP 7.0.10. Seems slightly outdated. I will check with latest 7.0 tomorrow. Thanks you!. @TysonAndre it works with 7.0.32. So I guess composer.json PHP version constraint should be updated: https://github.com/phan/phan/blob/master/composer.json#L25. ",
    "mridang": "@TysonAndre Sorry I wasn't verbose enough. The \"v.1.6.6.1\" was just a name and it could be any suppression group name. \nA practical use case for this is as follows. We use Phan to analyse a Magento and Prestashop extension against different versions of Magento and Prestashop. As those are rapidly moving codebases, there are often Phan issues detected in one version and resolved in another so name suppression groups would help quite a bit as suppressions affecting only that version would be used.. ",
    "mrtazz": "I just pushed the button to transfer ownership over, so everything should be redirecting now-ish.. ",
    "freezy-sk": "@morria you can suggest new package name in next patch release like guzzle did that https://packagist.org/packages/guzzle/guzzle#v3.9.3. ",
    "Synchro": "Sorry. PHP 7.1.8, phan 0.9.4. Call stack:\n```\nWarning: declare(encoding=...) ignored because Zend multibyte feature is turned off by settings in string code on line 17\nCall Stack:\n    0.0003     356696   1. {main}() /Users/marcus/.composer/vendor/etsy/phan/phan:0\n    0.0006     365056   2. require_once('/Users/marcus/.composer/vendor/etsy/phan/src/phan.php') /Users/marcus/.composer/vendor/etsy/phan/phan:2\n    4.5717   34069320   3. Phan\\Phan::analyzeFileList() /Users/marcus/.composer/vendor/etsy/phan/src/phan.php:54\n   40.3803  416905312   4. Phan\\Analysis::parseFile() /Users/marcus/.composer/vendor/etsy/phan/src/Phan/Phan.php:129\n   40.3806  416905584   5. ast\\parse_code() /Users/marcus/.composer/vendor/etsy/phan/src/Phan/Analysis.php:76\n```\nThe only use of declare() I've found is for strict_types=1.. Indeed, I found occurrences in my vendor folder:\nvendor/wimg/php-compatibility/Tests/sniff-examples/new_execution_directives.php:declare(encoding='ISO-8859-1');\nvendor/wimg/php-compatibility/Tests/sniff-examples/new_execution_directives.php:declare(encoding='invalid'); // Invalid - not a valid encoding.. Thanks for the fix!. ",
    "golaod": "@rlerdorf I don't know what you do that it works, but on version 0.8.6 passing files doesn't work. @TysonAndre it would work if that would be 100% manageable by me, but I use grumphp and phan is a task there, so I cannot propose a linux-only solution.. @rlerdorf thanks for pointing out .phan config. It looks like having directory_list set, ignores any direct files passed, so if we want to validate only picked files, directory_list cannot be set.\nFunny is that exclude can, so you would just expect both to behave as filters, whereas former behaves like a source.. ",
    "exussum12": "Thanks for the quick fix :) . ",
    "morozov": "The symptoms are similar to the ones described in #609. I did find #582 before filing this one but it's closed which is confusing.. > My current thoughts on how to do this would be to mangle variable+property names and treat them the same way as variables.\nI believe it's sane to treat properties as variables within method scope. In other words, to assume that during a method execution, the code doesn't rely on the variable type being changed by other methods.. ",
    "bobvandevijver": "I refer to the use statements to alias namespaces (so namespace imports)\n (http://php.net/manual/en/language.namespaces.importing.php). \nEdit: In #243 there are some of those removed in the codebase of Phan, and it is mentioned that such feature is currently missing. . However, it is not about traits but namespace imports, which need to be used in a file to have any sort of influence. I can not think of any scenario in which dynamic behavior would influence it. \nWhy would tools as PhpStorm and php_cs_fixer be able to such things, and Phan not?. Right, guess I will use the assert() functionality then. I was worried that such statements would impact production code, but now I've read the docs carefully I've found the production mode, which is default in our environment.. Note that with the latest version of Doctrine bundle (1.8.0), you can also use Symfony's autowiring to directly inject the correct class in you controller/service. See https://github.com/doctrine/DoctrineBundle/pull/727. . @TysonAndre Do you have any suggestion for parsing/suppressing custom phpdoc as for example commonly used in Symfony?\n```php\n<?php\nuse Doctrine\\ORM\\Mapping as ORM;\nuse JMS\\Serializer\\Annotation as JMS;\nuse Vich\\UploaderBundle\\Mapping\\Annotation as Vich;\nclass Event\n{\n  /\n   * @var integer\n   \n   * @ORM\\Id\n   * @ORM\\Column(type=\"integer\")\n   * @ORM\\GeneratedValue(strategy=\"AUTO\")\n   * @JMS\\Expose()\n   /\n  protected $id;\n}\n```\nWhich results in the following output:\nEvent.php:2 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace ORM (\\Doctrine\\ORM\\Mapping)\nEvent.php:3 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace JMS (\\JMS\\Serializer\\Annotation)\nEvent.php:4 PhanUnreferencedUseNormal Possibly zero references to use statement for classlike/namespace Vich (\\Vich\\UploaderBundle\\Mapping\\Annotation). The plugin I've written with your suggestion works like a charm, thanks for the suggestion!\nHowever, instead of visitPropDecl, you probably meant visitPropElem, as that does contain the children['docComment]` (and it is what I've used now). \n. If you have a large code base which does use inline @var statement all over the place, you might be interested in the InlineVar plugin I have released at https://github.com/Drenso/PhanExtensions. \nEven though it will be relatively inefficient as it scans the complete file, it might help you when you have a large code base which you might not want to clean on this level. . Thanks for the suggestion, I've added it to the extensions (and with extra bonus, it now also prints the correct line on errors :))!. ",
    "AnasT": "Indeed, thank you \ud83d\udc4d . ",
    "fesor": "\nOne to one mapping would make optimizing extensions later on easier.\n\nMaybe use phpparser's nodes? I mean, something like your php-parser-to-php-ast converter does. Or this approach has some drawbacks? . I had too many places in my current codebase where container->get() and getRepository is used. I made simple plugin for this reasons. It allows you to resolve types for this.\n@TysonAndre is it possible to make use of generics in this plugins? for example, insted of just EntityRepository or MyEntityRepository return something like EntityRepository<User>?\nI tried to find it out by reading sources of phan and it seems to be possible via subs and union types. But I'm not sure. Still I found this non trivial task to do.. Thanks! Will try it.. This not the case when you are dealing with legacy project. Firstly I needed static analysis and only then I could refactor code step by step so one day I will not have any need for this.\nBut I really think that some plugins like \"symfony best practice plugin\" which will enforce other developers to not use things like getRepository in code would be cool. . ",
    "diazwatson": "Make sense, I will continue treating the issue over there. Thanks. ",
    "far-blue": "I was using the cloudflare/phan:latest container which, apparently, isn't latest but actually v0.9.4 ;) However, having tested with cloudflare/phan:edge which is v0.10.1-dev I'm still getting the issue.\nI've investigated further and I think the problem is that the function I'm calling (which is part of amphp2) has a docblock defining the parameter as array:\n```\n<?php\n/\n * Do stuff.\n \n * @param string $bar A parameter.\n * @param array ...$rest Other parameters.\n \n * @return null\n */\nfunction variadic_func($bar, ...$rest) {\n // do stuff\n}\nvariadic_func('hello', 'world');\n```\nI guess this means phan expects each parameter gathered into the $rest array to itself be an array. I can put a PR into amphp to fix it - what's the recommended type for a ...$rest style parameter in this case? Something like mixed or any?. TBH, I expect that most developers not using phan would docbock the ...$rest parameter in exactly the same way because, from the perspective of the function itself, it is an array.. ok, so the parameter type of ...$rest should be mixed.. It's not that the subclass method deliberately returns something different - the method is inherited and not modified - it's that it returns itself so you can then chain setters. To my mind, in the situation that the docblock return type is self and the return statement in the function/method is return $this then phan should treat the return type as static so the subclass typing is preserved.. so, really, the best option is to wait until $this is supported.. Ok, I've found some of the errors are due to some symlinks. Replacing the symlinks with copies of the files helped.. I've setup vendor to be scanned but not analysed for errors. I think part of my problem is symlinks in the vendor folder which aren't being followed and part of it is aliases where code has been refactored for namespaces and then aliased back to the old name for compatibility. I've tried the experimental class_alias support but it's not helped. I'm on version 0.9.4. Thanks for the reply :)\nHowever, in this case @return static and @return $this won't help because the factories A and B are not returning instances of themselves but of different classes, 'A and 'B.. ok, thanks :) I'm not sure I'd want to go the route of a plugin so I think I'll opt for the @method docblocks.. Hi :)\nAh, hmm, that may work but I'm afraid I simplified the problem for the example. The real code does other things like a count - which phan also complains about. Here's the rest of the code:\n```\n    public function staticHostname()\n    {\n        if (!is_null($this->_staticHostnames)) {\n            $this->_index++;\n            if ($this->_index >= count($this->_staticHostnames)) {\n                $this->_index = 0;\n            }\n        return $this->_staticHostnames[$this->_index];\n    }\n    return '';\n}\n\n```\nAs you can see from the example, I've tried is_null() and it makes no difference. In this code I get:\nPhanTypeMismatchArgumentInternal Argument 1 (var) is ?array but \\count() takes \\Countable|array\nPhanTypeArraySuspiciousNullable Suspicious array access to nullable ?array. I've just tested and, interestingly if I use a local var instead of an instanceVar then it works fine. This works:\n```\n    public function staticHostname()\n    {\n        $foo = $this->_staticHostnames;\n        if (is_array($foo)) {\n            $this->_index++;\n            if ($this->_index >= count($foo)) {\n                $this->_index = 0;\n            }\n        return $foo[$this->_index];\n    }\n    return '';\n}\n\n```\nI guess this means it's a limitation or bug in phan. I'll try updating to the absolute latest (I'm currently on 0.12.8\n. an interesting idea and thank you for the suggestion but unfortunately it doesn't fit my needs. I am not unsure if an index in the array exists, I'm only unsure if the array itself exists and I (still!) need to support php5.6 so null coalescence isn't available to me.\nEven with the latest phan version it is still unhappy so I'm going to assume this is a current limitation of phan and look forward to a future improvement :). to do a block of code rather than a line you need to use triple backtick :) Oh, and it is safest to have the opening and closing triple backticks on their own lines.. Thanks for confirming it is a current limitation :) None of the in-code work-arounds such as is_null worked so, for now, I'll just leave the warnings and look forward to them going away in a future version of Phan :)\nThanks for everyone's help and input!. I'm not really bothered about the type safety of the values passed to the template engine because the templates themselves aren't php, I'd just prefer not to have (lots of!) warnings about references to undeclared properties on this one particular class which is the 'view' class.. Interestingly, my view class inherits from a parent that does have __set defined. I guess Phan doesn't notice this inheritance maybe?. thanks for your reply :) Adding a __get method did the job :). ",
    "ksamborski": "The error PhanUndeclaredClassInCallable is gone but I still get PhanUnreferencedMethod for this example.. I have excluded this library from analysis in my config file. I'll try with an assert.. ",
    "max-matiukhin": "yep, can't reproduce on dev-master\nThank you.  I have very similar issue: \nphp\n    function getComponentForModule($file) : string\n    {\n        if (!is_file($file) || !is_readable($file) || !($content = file_get_contents($file))) {\n            throw new \\InvalidArgumentException(\"Can not read file \" . $file);\n        }\n        if (!preg_match('~@component (\\w+)~', $content, $matches)) {\n            throw new \\InvalidArgumentException(\"Component not found in \" . $file);\n        }\n        return $matches[1];\n    }\nphan 1.0.0 returns:\n$ vendor/bin/phan -l src --strict-type-checking\nsrc/a.php:7 PhanPossiblyFalseTypeArgumentInternal Argument 2 (subject) is false|string but \\preg_match() takes string (false is incompatible)\n@TysonAndre  is it the same problem or shall I create a new issue ?. I've just found out  that phan 1.0.1 was released a few day ago. And this bug is not reproduced in 1.0.1. ",
    "vasily-kartashov": "\nOn an unrelated note, I'm planning to add @template for methods and functions eventually. \n\nWhat is the progress on this? At the moment the following types/methods cannot be annotated properly\n```\n/*\n * @template T\n * @param array $a\n * @return T|null\n /\npublic function pop(array $a) {\n   return array_pop($a);\n}\n/*\n * @var callable(array):T\n /\nprivate $pop;\n```\n. ",
    "black-snow": "really looking forward to 7.2. ",
    "pointlessone": "@TysonAndre Updated.. ",
    "kamazee": "Isn't it fixed by #1339?. Thanks, @TysonAndre!\nI considered this but to be honest, it seemed terribly complex at a glance (that moment with finding \"closest equivalent\", specifically, which is why I asked about an alternative approach with multiple possible causes); I'll try playing with diff, though!\nClosing the issue because it's barely relevant to phan but still open to suggestions!. > the suggestion sounds good, but would probably also need to include subclasses\nI think it depends on whether the marked entry is going to be turned into private or protected (or be treated as such), so maybe class-private and class-protected would work and be more explicit.. @TysonAndre yeah, it seems to be a great fit for my use case!\nWould such addition to phan be welcome?. @TysonAndre oh, this is likely my bad. Will double check and either get back with an example or close this one.. I should have checked it more thoroughly before reporting. I thought phan didn't support \"static\" in @method annotation for static method while in fact, parentheses were missing after the method name. Sorry about that!. ",
    "hworld": "I also get this error, which seems like it could be similar issues:\n/home/ddecarmine/.vscode/extensions/TysonAndre.php-phan-0.0.7/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57 [8] Undefined index: Content-Length. Geez you're fast, I pulled the second error into this issue: https://github.com/phan/phan/issues/1322. It seemed to happen pretty often. I was able to pull the debug info because I enabled debug logging already. I'll see if I can dig more with the extension locally.. The TCP thing didn't work for me in Fedora, but it looks like it's working now with your other changes. Thanks a bunch!. Also, I think @param array{require:bool,label:string} $options is more consistent with what https://github.com/vimeo/psalm is doing, yeah?\nI actually do like that \"brace\" annotation much more.. Any chance to add in \"publish vscode extension with latest version\" to the check list? =]. ",
    "adduc": "Replicated multiple times within VSCode Extension 0.0.8.\nThis might be an issue with the extension instead of Phan.\nFound in developer tools:\n```\n0  phan_error_handler() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57]\n1  Phan\\LanguageServer\\ProtocolStreamReader->Phan\\LanguageServer{closure}() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:311]\n2  Sabre\\Event\\Loop\\Loop->runStreams() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:233]\n3  Sabre\\Event\\Loop\\Loop->tick() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:194]\n4  Sabre\\Event\\Loop\\Loop->run() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/functions.php:122]\n5  Sabre\\Event\\Loop\\run() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/LanguageServer.php:333]\n6  Phan\\LanguageServer\\LanguageServer::run() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/Phan.php:205]\n7  Phan\\Phan::analyzeFileList() called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php:75]\n8  require_once(VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php) called at [VSCODE/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/phan:2]\n```\nWithin the output (Phan Language):\n```\nResponse:\n{\"Content-Type\":\"application\\/vscode-jsonrpc; charset=utf8\"}\nData:\n{\"method\":\"textDocument\\/publishDiagnostics\",\"params\":{\"uri\":\"file:\\/\\/\\/[REDACTED]\",\"diagnostics\":[{\"range\":{\"start\":{\"line\":21,\"character\":0},\"end\":{\"line\":22,\"character\":0}},\"severity\":3,\"code\":16000,\"source\":\"Phan\",\"message\":\" PhanInvalidCommentForDeclarationType The phpdoc comment for @property cannot occur on a property\"},{\"range\":{\"start\":{\"line\":22,\"character\":0},\"end\":{\"line\":23,\"character\":0}},\"severity\":3,\"code\":16002,\"source\":\"Phan\",\"message\":\" PhanUnextractableAnnotation Saw unextractable annotation for comment \\/* @property DBOSource \\/\"}]},\"jsonrpc\":\"2.0\"}\nFinished listening on stdin\nFinished serving requests, exiting\n/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57 [8] Undefined index: Content-Length\n0  phan_error_handler() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57]\n1  Phan\\LanguageServer\\ProtocolStreamReader->Phan\\LanguageServer{closure}() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:311]\n2  Sabre\\Event\\Loop\\Loop->runStreams() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:233]\n3  Sabre\\Event\\Loop\\Loop->tick() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:194]\n4  Sabre\\Event\\Loop\\Loop->run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/functions.php:122]\n5  Sabre\\Event\\Loop\\run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/LanguageServer.php:333]\n6  Phan\\LanguageServer\\LanguageServer::run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/Phan.php:205]\n7  Phan\\Phan::analyzeFileList() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php:75]\n8  require_once(/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php) called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/phan:2]\n```\nLet me know if this isn't enough, I've got a full copy of the output in Developer Tools and the Output/Phan Lanuage tab saved.. Ubuntu 17.10 (Vanilla Gnome)\nphp-config:\nUsage: /usr/bin/php-config [OPTION]\nOptions:\n  --prefix            [/usr]\n  --includes          [-I/usr/include/php/20170718 -I/usr/include/php/20170718/main -I/usr/include/php/20170718/TSRM -I/usr/include/php/20170718/Zend -I/usr/include/php/20170718/ext -I/usr/include/php/20170718/ext/date/lib ]\n  --ldflags           [-L/usr/lib/php/20170718  -L/usr/lib/x86_64-linux-gnu]\n  --libs              [-lcrypt   -largon2 -lresolv -lcrypt -lz -lpcre -lrt -lm -ldl -lnsl  -lxml2 -lssl -lcrypto -lsodium -lcrypt -largon2 -largon2 -lcrypt ]\n  --extension-dir     [/usr/lib/php/20170718]\n  --include-dir       [/usr/include/php/20170718]\n  --man-dir           [/usr/share/man]\n  --php-binary        [/usr/bin/php7.2]\n  --php-sapis         [cli ]\n  --phpapi            [20170718]\n  --configure-options [--includedir=/usr/include --mandir=/usr/share/man --infodir=/usr/share/info --disable-silent-rules --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --disable-maintainer-mode --disable-dependency-tracking --prefix=/usr --enable-cli --disable-cgi --disable-phpdbg --with-config-file-path=/etc/php/7.2/cli --with-config-file-scan-dir=/etc/php/7.2/cli/conf.d --build=x86_64-linux-gnu --host=x86_64-linux-gnu --config-cache --cache-file=/build/php7.2-SxTKef/php7.2-7.2.1/config.cache --libdir=${prefix}/lib/php --libexecdir=${prefix}/lib/php --datadir=${prefix}/share/php/7.2 --program-suffix=7.2 --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man --disable-all --disable-debug --disable-rpath --disable-static --with-pic --with-layout=GNU --without-pear --enable-filter --with-openssl=yes --with-password-argon2=/usr --with-pcre-regex=/usr --enable-hash --with-mhash=/usr --enable-libxml --enable-session --with-sodium --with-system-tzdata --with-zlib=/usr --with-zlib-dir=/usr --enable-dtrace --enable-pcntl --with-libedit=shared,/usr build_alias=x86_64-linux-gnu host_alias=x86_64-linux-gnu CFLAGS=-g -O2 -fdebug-prefix-map=/build/php7.2-SxTKef/php7.2-7.2.1=. -fstack-protector-strong -Wformat -Werror=format-security -O2 -Wall -pedantic -fsigned-char -fno-strict-aliasing -g]\n  --version           [7.2.1-1+ubuntu17.10.1+deb.sury.org+1]\n  --vernum            [70201]\nI may try and build the extension with additional debugging within ProtocolStreamReader instead of running the packaged version this weekend.. I wasn't able to replicate the issue on a separate machine this weekend, but was able to replicate it today.\nOn a largish repository (6490 PHP files including vendor), continuous typing/saving can cause the VSCode extension host to crash.\n\nPhan Language Server Log\n\n\n    Request:\n    {\"Content-Length\":\"3056\"}\n    Data:\n    {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:///[REDACTED]/ScratchController.php\",\"version\":377},\"contentChanges\":[{\"text\":\"php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]}}\n\n\n    Received message in coroutine: {\"method\":\"textDocument\\/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:\\/\\/\\/[REDACTED]\\/ScratchController.php\",\"version\":377},\"contentChanges\":[{\"text\":\"<?php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]},\"jsonrpc\":\"2.0\"}\n    Called didChange, uri=file:///[REDACTED]/ScratchController.php version=377\n    Called analyzeURI, uri=file:///[REDACTED]/ScratchController.php\n    Going to analyze this file list: /[REDACTED]/ScratchController.php\n    /home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57 [8] Undefined index: Content-Length\n\n    #0  phan_error_handler() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57]\n    #1  Phan\\LanguageServer\\ProtocolStreamReader-Phan\\LanguageServer\\{closure}() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:311]\n    #2  Sabre\\Event\\Loop\\Loop->runStreams() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:233]\n    #3  Sabre\\Event\\Loop\\Loop->tick() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:194]\n    #4  Sabre\\Event\\Loop\\Loop->run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/functions.php:122]\n    #5  Sabre\\Event\\Loop\\run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/LanguageServer.php:333]\n    #6  Phan\\LanguageServer\\LanguageServer::run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/Phan.php:205]\n    #7  Phan\\Phan::analyzeFileList() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php:75]\n    #8  require_once(/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php) called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/phan:2]\n\n    Request:\n    {\"Content-Length\":\"2072\"}\n    Data:\n    {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:///[REDACTED]/ScratchController.php\",\"version\":353},\"contentChanges\":[{\"text\":\"php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]}}\n\n\n    Received message in coroutine: {\"method\":\"textDocument\\/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:\\/\\/\\/[REDACTED]\\/ScratchController.php\",\"version\":353},\"contentChanges\":[{\"text\":\"<?php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]},\"jsonrpc\":\"2.0\"}\n    Called didChange, uri=file:///[REDACTED]/ScratchController.php version=353\n    Called analyzeURI, uri=file:///[REDACTED]/ScratchController.php\n    Going to analyze this file list: /[REDACTED]/ScratchController.php\n    Failed to fetch 'issues' from JSON:{\"status\":\"error_unknown\",\"message\":\"failed to send a response - Possibly encountered an exception. See daemon output.\"}\n\n    Request:\n    {\"Content-Length\":\"2072\"}\n    Data:\n    {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:///[REDACTED]/ScratchController.php\",\"version\":353},\"contentChanges\":[{\"text\":\"<?php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]}}\n\n\n    Received message in coroutine: {\"method\":\"textDocument\\/didChange\",\"params\":{\"textDocument\":{\"uri\":\"file:\\/\\/\\/[REDACTED]\\/ScratchController.php\",\"version\":353},\"contentChanges\":[{\"text\":\"<?php\\n\\nclass ScratchController\\n{\\n    public function a()\\n    {\\n\\n    }\\n\\n    public function b()\\n    {\\n\\n    }\\n\\n    public function c()\\n    {\\n    }\\n    \\n    public function d()\\n    {\\n\\n    }\\n\\n    public function e()\\n    {\\n\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n    public function f()\\n    {\\n\\n    }\\n\\n}\"}]},\"jsonrpc\":\"2.0\"}\n    Called didChange, uri=file:///[REDACTED]/ScratchController.php version=353\n    Called analyzeURI, uri=file:///[REDACTED]/ScratchController.php\n    Going to analyze this file list: /[REDACTED]/ScratchController.php\n    Failed to fetch 'issues' from JSON:{\"status\":\"error_unknown\",\"message\":\"failed to send a response - Possibly encountered an exception. See daemon output.\"}\n\n    /home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57 [8] Undefined index: Content-Length\n\n    #0  phan_error_handler() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/ProtocolStreamReader.php:57]\n    #1  Phan\\LanguageServer\\ProtocolStreamReader-Phan\\LanguageServer\\{closure}() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:311]\n    #2  Sabre\\Event\\Loop\\Loop->runStreams() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:233]\n    #3  Sabre\\Event\\Loop\\Loop->tick() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/Loop.php:194]\n    #4  Sabre\\Event\\Loop\\Loop->run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/sabre/event/lib/Loop/functions.php:122]\n    #5  Sabre\\Event\\Loop\\run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/LanguageServer/LanguageServer.php:333]\n    #6  Phan\\LanguageServer\\LanguageServer::run() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/Phan/Phan.php:205]\n    #7  Phan\\Phan::analyzeFileList() called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php:75]\n    #8  require_once(/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/src/phan.php) called at [/home/jlong/.vscode/extensions/TysonAndre.php-phan-0.0.8/vendor/phan/phan/phan:2]\n  \n\n. Of note, I am running PHP 7.3.0RC5\nEDIT: I was able to replicate this with PHP 7.2 as well\nEDIT 2: Release 1.1.1 does not appear to have this issue.. ",
    "YLivay": "Hey @TysonAndre , i'm working with @hworld and have encountered this issue pretty frequently on the old version, but with the latest update everything works flawlessly! Thanks for the quick fix!. ",
    "AntoineTB": "By the way, I am running on dev-master using composer global require.\nHere is my .phan/config.php:\n<?php\n    return [\n        'directory_list'                   => ['src','vendor','test'],\n        'file_list'                        => ['init.php'],\n        'exclude_analysis_directory_list'  => ['vendor/']\n    ];\n?>. I'll make a small github public repo and share it here asap.. https://github.com/AntoineTB/phan-debug\nThis is simpler version of the problem. It finds 2 other error about types but since those files are normally in vendor I don't care.\nI am pretty sure I isolated the cause, hopefully this will allow you to better understand the issue.\nIn the CampaignOperationsLogic class I chained 2 method calls by using the fact that the vendor code returns $this on every setter method.\nreturn (new AdGroupOperation())\n    ->setOperator(Operator::ADD)\n    ->setOperand(new Adgroup());\nWhen I switch the order of those setter calls, or remove the setOperator call, or remove the phpdoc from the setOperator method, I do not get the PhanUndeclaredMethod notice. I can also avoid the error by calling each setter in a different instruction.\nWhat I understand from this is that phan forgets the actual type of the variable when it passes through setOperator because it is following the phpdoc a tad too much. \nLet me know if you need anything else!\n  . Seems weird to me though that it doesn't raise a new notice when I switch the order of the setter since it should consider the return value in the same way and consider it invalid toward the function getAdGroupCreationOperation() : AdGroupOperation.. ",
    "CerebralFart": "If Phan didn't know the type of the $elasticRepository, it should still throw an error as the function findPersons would be undefined. Additionally, on the line before, there is the annotation /** @var PersonRepository $elasticRepository */.\nWe're running the latest version of phan, I'll be posting reproducing code shortly.. So some reproducing code (my apologies for not including this sooner)\n// config.php\nreturn [\n    \"allow_missing_properties\"        => false,\n    \"null_casts_as_any_type\"          => true,\n    'backward_compatibility_checks'   => false,\n    \"quick_mode\"                      => false,\n    \"minimum_severity\"                => 5,\n    'directory_list'                  => [\n        './',\n    ],\n    'exclude_file_list'               => [],\n];\n\n// repo.php\nclass PersonRepository{\n  /**\n   * @param       $search\n   * @param int   $limit\n   * @param       $filter\n   * @param bool  $filterEmployees\n   */\n  public function findPersons($search, $limit = 10, $filter = array(), $filterEmployees = true){\n    echo \"Just a stub\";\n  }\n}\n\n// controller.php\nrequire './repo.php';\n\nclass MarketController {\n  public function searchAjaxAction(){\n    /** @var PersonRepository $elasticRepository */\n    $elasticRepository = new PersonRepository();\n    $elasticRepository->findPersons(\"Shim\", 10, false);\n  }\n}\n\nThis emits no error, while findPersons is being called with one argument too little.\n. Just for good measure, we're running Phan 0.10.2-dev. ",
    "EvgenyOrekhov": "I use the \"dev-master\" version of Phan (commit 54d5269).. @TysonAndre In my example I used statements in the form of ;X && Y;, but I really meant X && Y expressions, including cases like return X && Y, Z = X && Y, if (X && Y), and others, where X is an A instanceof B expression.. @TysonAndre Sorry, I provided the wrong example of .phan/config.php. I actually was using the \"ignore_undeclared_variables_in_global_scope\" option. I fixed the example in the original message.. ",
    "pascal-hofmann": "Awesome. Thanks for the quick fix!. ",
    "morrisonlevi": "I looked briefly at what I think is the implementation of the iterable type. It appears to be an extension of a NativeType. Shouldn't it be a UnionType, maybe created from UnionType::of([\"array\", \"Traversable\"])? This is my first peak into phan's internals, so sorry if I'm wrong.. @TysonAndre I didn't understand your comment. An iterable is defined as a union of array and Traversable so an array of iterables would be iterable[] which is not the same as array[] | Traversable[]; it would be (array | Traversable)[]. Right?. > But that isn't how Phan represents it internally.\nCan you say why? Using a union seems to me the best option because it will automatically inherit the behaviors and semantics of other unions and would require the least amount of code because the only iterable-specific code is defining the union.\n\nAlso, (T1|T2)[]is represented by Phan the same way as T1[]|T2[] in all releases, to reduce false positives when checking if two union types are compatible.\n\nHmm. I see it is off topic for this issue but (T1 | T2)[] is definitely not the same as (T1[]) | (T2[]). Do you have documented cases for the false positives phan would have?. In the case of iterable though the union is named. It wouldn't have this issue, correct?. I still don't understand why it would need to do that, I guess. Oh well.. ",
    "mvangeest": "It looks like this is (now) a duplicate of  #1978.. ",
    "anubas": "This appears to be related:\nIn 0.12.2, the isset line throws \"PhanTypeInvalidDimOffset Invalid offset \"z\" of array type array{y:int}\".\nThis only happens if the first line is present.\n```php\n<?php\nfunction foo(array $vars = []) {\n    $vars['x']['y'] = 0;\n    isset($vars['x']['z']);\n}\nfoo();. I just tested 0.12.3 and found that the isset line throws \"PhanTypeInvalidDimOffset Invalid offset \"x\" of array type array{}\" for the following code:\n```php\n<?php\nfunction foo(array $vars = []): void\n{\n    isset($vars['x']['y']);\n}\nfoo();. Note: Last issue was fixed by version 0.12.5.. Related: Phan 0.12.9 and 0.12.10 throw errors like the following when run on PHP installations that do not have Tokenizer installed. Is Tokenizer now required?\n`Error: Call to undefined function token_get_all() in phar:///usr/home/www/bin/phan.phar/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php:181\nStack trace:\n0 phar:///usr/home/www/bin/phan.phar/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php(137): Phan\\Plugin\\Internal\\BuiltinSuppressionPlugin->yieldSuppressionComments('<?php\\n/**\\n * Ze...')\n1 phar:///usr/home/www/bin/phan.phar/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php(119): Phan\\Plugin\\Internal\\BuiltinSuppressionPlugin->computeIssueSuggestionList(Object(Phan\\CodeBase), '<?php\\n/**\\n * Ze...')\n2 phar:///usr/home/www/bin/phan.phar/src/Phan/Plugin/Internal/BuiltinSuppressionPlugin.php(68): Phan\\Plugin\\Internal\\BuiltinSuppressionPlugin->getRawIssueSuppressionList(Object(Phan\\CodeBase), 'lib/Zend/Auth.p...')\n3 phar:///usr/home/www/bin/phan.phar/src/Phan/Plugin/ConfigPluginSet.php(376): Phan\\Plugin\\Internal\\BuiltinSuppressionPlugin->shouldSuppressIssue(Object(Phan\\CodeBase), Object(Phan\\Language\\Context), 'PhanUndeclaredT...', 43, Array, NULL)\n4 phar:///usr/home/www/bin/phan.phar/src/Phan/Issue.php(3079): Phan\\Plugin\\ConfigPluginSet->shouldSuppressIssue(Object(Phan\\CodeBase), Object(Phan\\Language\\Context), 'PhanUndeclaredT...', 43, Array, NULL)\n5 phar:///usr/home/www/bin/phan.phar/src/Phan/Issue.php(3031): Phan\\Issue::shouldSuppressIssue(Object(Phan\\CodeBase), Object(Phan\\Language\\Context), 'PhanUndeclaredT...', 43, Array, NULL)\n6 phar:///usr/home/www/bin/phan.phar/src/Phan/Analysis/PropertyTypesAnalyzer.php(77): Phan\\Issue::maybeEmitWithParameters(Object(Phan\\CodeBase), Object(Phan\\Language\\Context), 'PhanUndeclaredT...', 43, Array, NULL)\n7 phar:///usr/home/www/bin/phan.phar/src/Phan/Language/Element/Clazz.php(2575): Phan\\Analysis\\PropertyTypesAnalyzer::analyzePropertyTypes(Object(Phan\\CodeBase), Object(Phan\\Language\\Element\\Clazz))\n8 phar:///usr/home/www/bin/phan.phar/src/Phan/Analysis.php(403): Phan\\Language\\Element\\Clazz->analyze(Object(Phan\\CodeBase))\n9 phar:///usr/home/www/bin/phan.phar/src/Phan/Phan.php(275): Phan\\Analysis::analyzeClasses(Object(Phan\\CodeBase), NULL)\n10 phar:///usr/home/www/bin/phan.phar/src/Phan/Phan.php(225): Phan\\Phan::finishAnalyzingRemainingStatements(Object(Phan\\CodeBase), NULL, Array, Array)\n11 phar:///usr/home/www/bin/phan.phar/src/phan.php(41): Phan\\Phan::analyzeFileList(Object(Phan\\CodeBase), Object(Closure))\n12 /usr/home/www/bin/phan.phar(6): require('phar:///usr/hom...')\n13 {main}\n`\n. ",
    "slifin": "Looks like I'm getting child process 11441 exited with status 2 server side every time I run the command. Sorry for my ignorance, do you mean --include-analysis-file-list /private/var/www/xxxx/test.php server side? (I assume that's why you said it's unrealistic)\nWhen you say modify the config.php to include all PHP files and directories, what key would I use to specify them? \nHere is what my config looks like at the moment:\nphp \nreturn [\n  'directory_list' => [\n    '/private/var/www/xxx',\n  ],\n  'analyzed_file_extensions' => [\n    'php', 'inc', 'module', 'install',\n  ],\n  'exclude_analysis_directory_list' => [\n    '/private/var/www/xxx/includes',\n    '/private/var/www/xxx/modules',\n  ],\n  'ignore_undeclared_variables_in_global_scope' => TRUE,\n  'processes' => 2,\n  'plugins' => [\n    '/Users/xxx/.phan/plugins/PhanUnusedVariable/src/UnusedVariablePlugin.php',\n  ],\n]; \n. ok I've changed my config to the above (with relative directories), without processes when I run \nphan -l test.php in the xxxx directory, I get \nAssertionError: Recursion has gotten out of hand in /Users/xxxx/.composer/vendor/phan/phan/src/Phan/Language/UnionType.php:1874\nbut If I run phan -k ~/.phan/config.php --include-analysis-file-list /private/var/www/xxxx/test.php -i -m checkstyle I get the correct linting\nWhen I run the server and client in the xxx directory with the new config I get the same {\"status\":\"no_files\"} error client side and child process 1827 exited with status 2 error server side. It works! (on dev-master) and even picks up issues that were not being detected via phan normally, that I'd reported today here: \nhttps://github.com/phan/phan/issues/1567\nedit: Looks like I'm missing $unused never used\nPhan error: UndefError: PhanUndeclaredVariable: Variable $hey is undeclared in lint.php on line 6\nPhan error: UndefError: PhanUndeclaredVariable: Variable $hey_2 is undeclared in lint.php on line 8\nPhan error: ParamError: PhanParamTooFew: Call with 0 arg(s) to \\oh_noes() which requires 1 arg(s) defined at lint.php:5 in lint.php on line 11\n```php\n<?php\nfunction oh_noes($unused) {\n  echo $hey;\nreturn $hey_2;\n}\noh_noes();\n```\nTwo of those come from the undeclared plugin. Is there a way to get checkstyle output via the daemon?. Ah yes, thank you. Can't replicate this with the daemon mode, which makes me suspect user error on my part. This was because I was passing -i to phan. Is there configuration that's client side only/ server side only, and or a mixture of both for certain config.php keys? . ",
    "nickvergessen": "Ah, too bad. Feel free to close then, or keep it open to collect and remind about the issue.. ",
    "jfcherng": "Children may use it though.. @TysonAndre That's what I am going to say :+1: . ",
    "vyshkant": "@TysonAndre This issue has been resolved?. @TysonAndre But I don't understand how is it possible to get an int value as the key (AFAICS Scope::getVariableMap method is declared as returning an array with the string key).\nSo we gonna cast the key to string, I think we should also change the return type of Scope::getVariableMap method. In other case (if we gonna keep the return type of Scope::getVariableMap method) we need to force it to return the proper (declared) value.. > 99.9x%\nWhich causes 0,0x% of completely unpredictable errors :)\nIMO, type declaration cannot operate with statistics of returned values: in my (weird) code it could be 50/50, for example. IMO actual return type isn't string in the fact (because it allows non-string values), so it need to be changed to mixed or something like that, I think.. ",
    "ilyaguy": "I work on several projects at the same time and configured daemonize-tcp-port in each project to use different ports.\nSo, I think it is good idea to read .phan/config.php by phan_client to determine tcp port to connect to daemon.. Use .phan/.env with priority between .phan/config.php and CLI?. ",
    "olleharstedt": ":+1: . Great, thank you!. ",
    "constup": "It's already there.\nhttps://github.com/phan/phan/wiki/Getting-Started#creating-a-config-file. ",
    "d0niek": "Ad.1. I don't want to put \"special\" comments for some external tools\nAd.2. It looks good. Detect if it's __destruct method and if yes we can omit this message.\nAd.3. Good to read https://speakerdeck.com/bitone/hunting-down-memory-leaks-with-php-meminfo. Looks like @param \\Bar ...$bar is Ok, because before I had other linter and for him \\Bar[] $bar was correct doc-block.. ",
    "Xyzor": "@TysonAndre Thanks for the fast reply.\nFor the first part of your answer: I was kind of expected that, thats the maximum, i can do, but i had to ask, in the hope of a hidden flag or something :smile: .\nI'll try out your suggestion.\nThanks.. ",
    "Lexidor": "This is just an untested guess. Currently stuck in a car with nothing better to do, but also unable to test. I think phan is confused because it does not understand that you just checked for not-nullness. Try !is_null() or !empty($x[0]) or the null coalescing operator??. I call it the null avoidance operator. I hope this magically solves it. . Home sweet home. Try this one\nclass Foo\n{\n    /\n     * An array of static hostnames.\n     \n     * @var ?array\n     /\n    protected $_staticHostnames = null;\npublic function staticHostname()\n{\n    return ($this->_staticHostnames[0] ?? '');\n}\n\n}\n`\n. I got your back. Try this monstrosity for a size. It actually allows your to store NULL as a hostname (previous one would assume default).\nclass Foo\n{\n    /\n     * An array of static hostnames.\n     \n     * @var ?array\n     /\n    protected $_staticHostnames = null;\npublic function staticHostname()\n{\n    return self::arrIdx($this->_staticHostnames, 0, '');\n}\n\n/**\n * For git help\n *\n * @param array|null $arr\n * @param integer $idx\n * @param mixed $default\n * @return mixed\n */\npublic static function arrIdx(?array $arr, int $idx, $default = null){\n    return (key_exists($idx, ($arr ?? [])) ? $arr[$idx] : $default);\n}\n\n}. Well, I went a bit overboard. I hope that you can make it work.. How did you make the indentation on github work btw? I have no clue. The double backtick code markup failed me.. Ah thanks man!. Triple backtick worked.\n```\nclass Foo\n{\n    /\n     * An array of static hostnames.\n     \n     * @var ?array\n     /\n    protected $_staticHostnames = [null];\npublic function staticHostname()\n{\n    return self::arrIdx($this->_staticHostnames, 0, '');\n}\n\n/**\n * For git help\n *\n * @param array|null $arr\n * @param integer $idx\n * @param mixed $default\n * @return mixed\n */\npublic static function arrIdx(?array $arr, int $idx, $default = null){\n    return (key_exists($idx, ($arr ?? [])) ? $arr[$idx] : $default);\n}\n\n}\n``. I want to thank you for reading my question. In retrospect, I wasn't very to the point with what I expected the reader to do with the information I presented. Thanks for adding code to help me with my issue overnight. It fills me with a weird sense of pride that myissue, turned out to be a bug. Thanks for the great work. You have transformed PHP into better language. Yourcompiler-likeerror checking makes me more certain about the code I write. Keep up the good work.No response required.. I want to thank you very much for the support. I clearly did not know as much about PHP as I thought. I have indeed not seen this override work. I just assumed it would work since the return type checks at runtime do support inheritance. (You are allowed to return subclasses). It appears now that the problem lies in the 'compile' stage.\nEven though these two classlikes are valid individually, the combination isn't, somehow. Just don't understand why PHP doesn't 'get it'. At the declaration of B it must know about A. It also understands the relationship between the two.\nThere is no situation in which the Liskov substitution principle is broken. All methods that exist on A do also exist on B. I am no computer scientist, but that seems safe. Is this something, that is also disallowed in other (stricter) languages?\nPHP does support parameter widening since PHP 7.2. And this is pretty much the same thing, but for returns. In order to allow a parameter to be widened, it should be a superset of the overridden parameter. I can't imagine how this would not work for returns. B is a complete superset of A, so foo(A $f) => foo(B $f) is allowed, but foo(): A => foo(): B is not allowed.\nEven though I might have to rewrite tons of code because of this, I am still happy I learned this. If phan wasn't as helpful as it is, I would never have though about these things. Thanks for your insight and the link to that RFC.. This is all new to me. It is on the one hand very great to learn the limitations of the language, but on the other hand... It locks out the typesafety I had wanted to build into this design. I want to let all setters in the codebase return $this, so I can chain them together. This does not work for inherited methods. Their return type is defined as their own. I think there is no way of writing around that sad fact. I will just have to call my setters like this:$f->setA($a); $f->setB($b);insteadof$f->setA($a)->setB($b);`. For something so cosmetic this is no big deal, but this will lock out many heavily inheritance based designs I am trying to think up.. You absolute LEGEND that you are. Yes that is indeed enforcing exactly what I need. I can only admire your patience and deep knowledge of the language and the ecosystem around it. Your help has been tremendous and all around amazing. Thanks for your  amazing insights. My issue has hereby been solved to the fullest extend.. Thanks for your response. It is nice to know where the edges of the analysis are. In the meantime, I'll put an _n after the property name. This will remind me of its nullability. Your program is making me a better programmer day by day. I hope the day comes where I feel competent enough (with phan by my side) to write bigger and better things than ever before. I really like the certainty that strict_types in PHP gave me. But finding a TypeError in production sucks. That is why we turn it of for production. I hope that this program gives us the confidence to keep it on in production. . ",
    "kiler129": "@TysonAndre I guess the plugin solves the problem. The only issue with usage of such is forcing it to work in CI as well as on other devs computers (since Phan is not included in the project but rather installed globally).\nFor futurecommers this is a leaky implementation of a solution:\n```php\n<?php\ndeclare(strict_types=1);\n$userHomePath = trim(shell_exec('realpath ~'));\n$guessPluginPath = function (string $pluginPath) use ($userHomePath): string {\n    if ($pluginPath[0] === '/' || file_exists($pluginPath)) { //Absolute path or local plugin\n        return $pluginPath;\n    }\nif (!empty($_ENV['COMPOSER_HOME']) && file_exists($_ENV['COMPOSER_HOME'] . '/' . $pluginPath)) {\n    return $_ENV['COMPOSER_HOME'] . '/' . $pluginPath;\n}\n\n//Fallback for default COMPOSER_HOME\nif (file_exists($userHomePath . '/.composer/' . $pluginPath)) {\n    return $userHomePath . '/.composer/' . $pluginPath;\n}\n\nreturn $pluginPath;\n\n};\nreturn [\n    //..\n    'plugins' => [\n        //....\n        'UnreachableCodePlugin',\n        $guessPluginPath('vendor/drenso/phan-extensions/Plugin/Annotation/SymfonyAnnotationPlugin.php'),\n    ]\n];\n```. ",
    "khadgarmage": "i find the bug of the code, e.g.\n<?php\nfunction randomSelectOneFomMulti($myarr) {\n    foreach ($myarr as $key => $value) {\n        return $key;\n    }\n    return false;\n}\n$arr = array();\n$key = randomSelectOneFomMulti($arr);\nunset($arr[$key]);\nbacktrace:\nxxxx/phan/phan/src/Phan/Language/Type/ArrayShapeType.php:79 [2] array_key_exists(): The first argument should be either a string or an integer\n(Crashed when parsing/analyzing 't.php')\n0  phan_error_handler()\n1  array_key_exists() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Language/Type/ArrayShapeType.php:79]\n2  Phan\\Language\\Type\\ArrayShapeType->withoutField() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Language/UnionType.php:2656]\n3  Phan\\Language\\UnionType->withoutArrayShapeField() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php:252]\n4  Phan\\Analysis\\PostOrderAnalysisVisitor->analyzeUnsetDim() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Analysis/PostOrderAnalysisVisitor.php:198]\n5  Phan\\Analysis\\PostOrderAnalysisVisitor->visitUnset() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/BlockAnalysisVisitor.php:1326]\n6  Phan\\BlockAnalysisVisitor->postOrderAnalyze() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/BlockAnalysisVisitor.php:375]\n7  Phan\\BlockAnalysisVisitor->visit() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:514]\n8  Phan\\AST\\Visitor\\KindVisitorImplementation->visitUnset() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/BlockAnalysisVisitor.php:400]\n9  Phan\\BlockAnalysisVisitor->analyzeAndGetUpdatedContext() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/BlockAnalysisVisitor.php:216]\n10 Phan\\BlockAnalysisVisitor->visitStmtList() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/AST/Visitor/KindVisitorImplementation.php:24]\n11 Phan\\AST\\Visitor\\KindVisitorImplementation->__invoke() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Analysis.php:530]\n12 Phan\\Analysis::analyzeFile() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Phan.php:320]\n13 Phan\\Phan::Phan{closure}() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Phan.php:370]\n14 Phan\\Phan::finishAnalyzingRemainingStatements() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/Phan/Phan.php:225]\n15 Phan\\Phan::analyzeFileList() called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/src/phan.php:41]\n16 require_once(/Users/funplus/Work/ffs/code/vendor/phan/phan/src/phan.php) called at [/Users/funplus/Work/ffs/code/vendor/phan/phan/phan:2]. @TysonAndre Can you help me? Thanks!. I want to use it as the hook of git to analyze some files which changed, so usage scenario is very common. Can you support it?  e.g. Support an option third_party_directory_list, the files to be analyzing can reference to the list, but the list will not be analyzing. I think it's more better.\n@TysonAndre . I found it's not work in the open source project grumphp, maybe this reason.. @TysonAndre I had supported it. Pull request #1836. ",
    "johnfoconnor": "+1 on this request. In older version of the tool combining --directory and --exclude-directory-list used to accomplish this, but that appears to have broken at some point. ",
    "cpuldev": "Thanks for your answer! It was very explanatory! Indeed a task like this is difficult. I'll check thoroughly your recommendations and experiment on this. . ",
    "MetalArend": "Awesome, thanks!. For reference: a first try to resolve this has been mentioned in https://github.com/phan/phan/pull/2138#pullrequestreview-175816701. ",
    "funivan": "@maksimovic Problem solved. Thanks.. ",
    "smileytechguy": "I'll take a look at this one (no promises though!). See #1866 !. This will use, for > 1 character incorrect flags, levenshtein distance, showing the first one or two flags which match with a distance of <= 1 (you can see sample distances at this site).\nFor single character incorrect flags, the flag is compared against valid single-character flags by its ASCII character number.  It will show the first one or two flags which are less than three characters apart.. @TysonAndre I think I've fixed all the changes you requested.  I added constants GETOPT_LONG_OPTIONS and GETOPT_SHORT_OPTIONS for this, as well as the protected getFlagSuggestionString method.. @TysonAndre Okay, that should be good.  Let me know if you have any other suggestions for the code.. Whoops, left the reverse sort on by accident from a previous revision.. Sounds good. \ud83d\udc4d \n. ",
    "mark-wff": "Yes the question refers to https://symfony.com/doc/current/components/var_dumper.html.\nI wrote a quick and dirty first Test for the Plugin. \nThis worked fine in my testcase where I defined a function named \"dump\" by myself.\nBut if I try to test the Plugin in a Symfony-App the Callback isn't called.\nIn my opinion the \"dump\"-function is in the global Namespace. Is there any posibillity to test\nin which namespace the function live? And how the returned name has to be?\n\nThe VarDumper component creates a global dump() function that you can use instead of e.g. var_dump.  (https://symfony.com/doc/current/components/var_dumper.html.)\n\nI tried these options:\n '\\dump' => $testCallback\n 'dump' => $testCallback\n 'Symfony\\Component\\VarDumper\\dump' => $testCallback\n 'Symfony\\Component\\VarDumper::dump' => $testCallback\n```\n<?php declare(strict_types=1);\nuse Phan\\CodeBase;\nuse Phan\\Language\\Context;\nuse Phan\\Language\\Element\\Clazz;\nuse Phan\\Language\\Element\\Func;\nuse Phan\\Language\\Element\\Method;\nuse Phan\\Language\\Element\\Property;\nuse Phan\\PluginV2;\nuse Phan\\PluginV2\\AnalyzeClassCapability;\nuse Phan\\PluginV2\\AnalyzeFunctionCallCapability;\nuse Phan\\PluginV2\\AnalyzeFunctionCapability;\nuse Phan\\PluginV2\\AnalyzeMethodCapability;\nuse Phan\\PluginV2\\AnalyzePropertyCapability;\nuse Phan\\PluginV2\\PluginAwarePostAnalysisVisitor;\nuse Phan\\PluginV2\\PostAnalyzeNodeCapability;\nuse ast\\Node;\nclass MyPlugin extends PluginV2 implements AnalyzeFunctionCallCapability\n{\n    /*\n     * @param CodeBase $code_base @phan-unused-param\n     * @return \\Closure[]\n     /\n    public function getAnalyzeFunctionCallClosures(CodeBase $code_base) : array\n    {\n        $testCallback = function (\n            CodeBase $code_base,\n            Context $context,\n            Func $function,\n            array $args\n        ) {\n            $this->emitIssue(\n                $code_base,\n                $function->getContext(),\n                'DemoPluginFunctionName',\n                \"Function {FUNCTION} should not be used.\",\n                [(string)$function->getFQSEN()]\n            );\n        };\n    return [\n        '\\dump' => $testCallback\n    ];\n}\n\n}\n// Every plugin needs to return an instance of itself at the\n// end of the file in which its defined.\nreturn new MyPlugin();\n```\n. Thanks a lot for the fast answers! \nIt works now! :)\nI will post the Plugin and add some more helpful checks for Symfony. :). Hi, \nI finished the Plugin. It's not very complex but it does exactly what it is supposed to do! :D\nhttps://github.com/mark-wff/SymfonyPhanDumpPlugin . ",
    "codejam1024": "\n. ",
    "arosolino": "Good work!. Thanks for the in depth explanation.\nAny reason for using \"else if\" throwing PhanNonClassMethodCall but \"elseif\" not?\n. ",
    "glen-84": "@TysonAndre I think I reported this in the wrong place because the extension points to this repository. Let me know if I should move it.. ",
    "mwernaert": "Thanks! I'll use exclude_file_list for now. Global config or annotation to define the recursion limit would be nice.. ",
    "danielarcher": "Perfect, let's cover this.. ",
    "carusogabriel": "There's already a PHPCodeSniffer rule for that :). As by preg_match's returns, I've refactored to this dedicated assertion. ",
    "NicklasWallgren": "Right, thanks.. Great :). ",
    "atekie": "You are correct, I have variables and functions documented with php doc annotation - once I removed these it removed the false positives.\n\nOn Sep 23, 2018, at 4:18 AM, Tyson Andre notifications@github.com wrote:\nI think it's an issue with the class db or its ancestors, which you haven't included the source of.\nMaybe it uses class in a phpdoc annotation such as @inherits\nAlso, what Phan version are you referring to?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/phan/phan/issues/1990#issuecomment-423809102, or mute the thread https://github.com/notifications/unsubscribe-auth/AAckvQe-ac5xk-Psr2FOMzx-aI7bnDGqks5ud236gaJpZM4W1js-.\n\n\n. ",
    "Pamblam": "I did double check that this is actually valid code, btw: https://3v4l.org/VKv5O. Confirmed.. You're right the class is included twice - one is slightly modified to do a specific task.. would be nice if the parser could parse the require/include and determine which definition to use.. it occurs to me that in some cases t may be impossible to edtermine the class that is referenced. the code using the class and the class itself could both be included by a third page, in which case there would be no way to tell given only the page that uses the class.. ",
    "mschop": "@TysonAndre Ok thanks for the information. I sent a PR to symfony regarding this.. ",
    "alkavan": "Hey, any updates on this?\nAST was just updated to aur/php-ast 1.0.0-1 (Archlinux) and now phan won't update for me via composer.. ",
    "meridius": "Hi @TysonAndre \n\nI don't know what you mean by \"docker config file\", but please see https://gist.github.com/meridius/5d15cbbff56154063bd19b1b8cde183b for Dockerfiles and other relevant files\nhttps://gist.github.com/meridius/fc2dfb3b22dd719816e0486a441645d5\nopenssh-7.5_p1-r9 from alpine3.7\nPhan 1.1.0. \n",
    "sanmai": "Just for the record, I'm getting errors with ast 1.0.0. E.g. \nError: Undefined constant 'ast\\AST_COALESCE' in src/Phan/Analysis.php:185\nTravis build with the error.. That upgrade I missed somehow on that branch. Thanks.. It seems like that these values actually act like version constraints:\nProblem 1\n    - phan/phan 0.12.9 requires ext-ast ^0.1.5 -> the requested PHP extension ast has the wrong version (1.0.0) installed.\n    - phan/phan 0.12.8 requires ext-ast ^0.1.5 -> the requested PHP extension ast has the wrong version (1.0.0) installed.\nhttps://travis-ci.org/sanmai/pipeline/jobs/444538433#L605. ",
    "MikkelPaulson": "Thanks for the detail. I looked for \"version\" in the issues, but didn't think to check pull requests. I'll respond here, since it seems like a more appropriate place for a discussion than in a closed PR.\nMaybe a better way to avoid the .0 problem would be to release new analyzers in \"beta\" (disabled by default) with patch versions, and periodically release a minor version that enables all beta analyzers. That keeps the release cycle short without introducing breaking changes at a patch level.. Coupling major version numbers to dropping support for PHP versions seems appropriate.\nUnfortunately, simply running composer require phan/phan will select version ^1.1, which will upgrade both minor and patch versions. ",
    "jdavidlists": "Your work on this project continues to amaze and impress!\n. ",
    "bugreportuser": "Thanks! That was fast.. That's reasonable. It should be rare to have dynamic functions that always exit.. There are actually many times that getopt() returns false. You're right that some are for invalid arguments, but the important one is when it can't find argv:\nhttps://github.com/php/php-src/blob/2d03197749696ac3f8effba6b7977b0d8729fef3/ext/standard/basic_functions.c#L4416-L4419\nI don't know why it returns false for invalid arguments. I would expect it to return null.. Good point. It's less likely than I thought. The request now only affects opcache_get_status().. > Phan doesn't track variable types in the parse phase. (It does that in only the last phase (analysis)).\nI don't know how easy it would be, but it could use the PHPDoc type and validate it later in the analysis phase.\n\nAvoiding emitting PhanUndeclaredVariable, etc. in the parse phase is one way to better handle this edge case (and inferring the empty union type or mixed).\n\nThis could help for cons3, but the others only have warnings when the constants are used (strpos), so I don't know if it'll help for those.. That makes sense but it may be reasonable to deal with the cases separately. Calling a function with too many arguments is a problem, unless the call matches the annotation.\nThe difficulty with changing the function's annotation is that the function doesn't know how it will be called and doesn't/shouldn't care whether the arguments are used.\nI think a configuration option is good compromise, but it shouldn't affect all calls. I don't see any reason to call var_export($a, $b, $c), for example.\nFYI, a bug about this is marked as WONTFIX, but I see your point.. Thanks!. > Don't get overridden in other classes (Related to #2539 - tested but not released yet)\nI think this would cause a lot of false negatives. Since static methods can be overridden, it's possible that all inherited methods can be made static too. I could see making it a separate warning to allow suppressing in the config.. I can understand that. Ignoring overridden methods it is.. Thanks, that fixes it. Should I open another issue for PhanUnextractableAnnotation? I thought the fixes would be more related.. That's better. Should be good once the tests finish.. ",
    "marcelloh": "That all it's giving me :-(\nWhen I change the dirctory list into  '...\\mydir\\src'\nit's still error[1] for me.\nI assume it looks for the config in the directory right where I start the phan?\nWith debugging active it gives me more, but nothing useful for me:\n[info] Disabling xdebug: Phan is around five times as slow when xdebug is enabled (xdebug only makes sense when debugging Phan itself)\n[info] To run Phan with xdebug, set the environment variable PHAN_ALLOW_XDEBUG to 1.\n[info] To disable this warning, set the environment variable PHAN_DISABLE_XDEBUG_WARN to 1.\n[info] To include function signatures of xdebug, see .phan/internal_stubs/xdebug.phan_php\n[debug] Checking PHAN_ALLOW_XDEBUG\n[debug] The xdebug extension is loaded (2.6.1)\n[debug] Process restarting (PHAN_ALLOW_XDEBUG=internal|2.6.1|0|*|*)\n[debug] Running php.exe -n -c C:\\Users\\Marcelloh\\AppData\\Local\\Temp\\AC5D.tmp vendor/phan/phan/phan -k phan_config.php\n[debug] Restarted process exited 1\nAn ERROR [1] has occured\n. 1. those files are removed after the command is run, so I can't check\n2. latest verson : 1.3.0\nso, I'm kindof stuck here.. Ok, I've tried to change the xdebug-handler, so the file is still there.\nIt's not PHP code however that is inside that temp file, it's a php.ini configuration.\nAbout debug:\nI do php command (which use a php ini especially without debug\nI do php debug command which loads a php.ini for debugging purposes\n(so I can swap)\nIt is the same output (only a little bit more when debug is loaded). uhm, I gave more info, but i see no reason to close it. :-(. ",
    "kalkin": "@TysonAndre Thank you for your fast answer and your time.. ",
    "davehenton": "Hey @TysonAndre, Dave here with Code Climate Support. We recently discovered a change in the way that Phan configs are interpreted. We suspect that this change began when we bumped our version of the Phan plugin from version 0.7 to version 1.1.2, which happened in November 2018. I've sorted through the Phan commit history and can't seem to find any mention of a configuration change, but this issue seems to be related. Are you aware of any changes (intentional or otherwise) that might be leading to this behavior? \nFor context, some files/directories which historically were analyzed on codeclimate.com were no longer being analyzed after we bumped to 1.1.2. \nFor example, the following configuration previously analyzed all code under the lib directory:\n'directory_list' => [\n        'lib',\n    ],\nHowever, after 1.1.2, that code is no longer analyzed.\nLet me know what other information I can provide. Thanks for your help!\n. ",
    "tabakhase": "Hi, we had talked on Gitter a while back, example to reproduce here: \nhttps://www.dropbox.com/s/2s8u7psr9o69vff/codeclimate-phan-demo.zip?dl=0\nonly diffrence between the two sets is .phan/config.php using 'src' in one, '../src/' in the other\n.codeclimate.yml is \"empty\" (no paths) in both cases - (see results.txt & test.sh)\n. ",
    "Rarst": "Thank you! I hadn\u2019t realized it didn\u2019t have access to source of the trait. I had gotten warnings about other elements missing declarations and added them manually already, so I am familiar with the need to. Just didn't guess this is the underlying cause here. :)\nMaybe something like \"undeclared trait\" would make sense as a sniff.. ",
    "phil-davis": "Thanks for the super quick response! phan 1.1.7 fixes the issue:\nhttps://drone.owncloud.com/owncloud/data_exporter/271/45\n+ make test-php-phan\nphan composer.lock is not up to date.\ncomposer bin phan install --no-progress\nChanged current directory to vendor-bin/phan\nDo not run Composer as root/super user! See https://getcomposer.org/root for details\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 15 installs, 0 updates, 0 removals\n  - Installing symfony/polyfill-mbstring (v1.10.0): Loading from cache\n  - Installing symfony/contracts (v1.0.2): Loading from cache\n  - Installing symfony/console (v4.2.1): Loading from cache\n  - Installing psr/log (1.1.0): Loading from cache\n  - Installing sabre/event (5.0.3): Loading from cache\n  - Installing microsoft/tolerant-php-parser (v0.0.15): Loading from cache\n  - Installing webmozart/assert (1.3.0): Loading from cache\n  - Installing phpdocumentor/reflection-common (1.0.1): Loading from cache\n  - Installing phpdocumentor/type-resolver (0.4.0): Loading from cache\n  - Installing phpdocumentor/reflection-docblock (4.3.0): Loading from cache\n  - Installing netresearch/jsonmapper (v1.4.0): Loading from cache\n  - Installing felixfbecker/advanced-json-rpc (v3.0.3): Loading from cache\n  - Installing composer/xdebug-handler (1.3.1): Loading from cache\n  - Installing composer/semver (1.4.2): Loading from cache\n  - Installing phan/phan (1.1.7): Downloading (100%)\nsymfony/contracts suggests installing psr/cache (When using the Cache contracts)\nsymfony/contracts suggests installing psr/container (When using the Service contracts)\nsymfony/contracts suggests installing symfony/cache-contracts-implementation\nsymfony/contracts suggests installing symfony/service-contracts-implementation\nsymfony/contracts suggests installing symfony/translation-contracts-implementation\nsymfony/console suggests installing psr/log-implementation (For using the console logger)\nsymfony/console suggests installing symfony/event-dispatcher\nsymfony/console suggests installing symfony/lock\nsymfony/console suggests installing symfony/process\nWriting lock file\nGenerating autoload files\nphp -d zend.enable_gc=0 vendor-bin/phan/vendor/bin/phan --config-file .phan/config.php --require-config-exists\nHow good is open-source!. ",
    "cmg-adam": "Sorry Tyson -- little anticlimactic but unfortunately I don't seem to have the exact state that was causing the issue anymore and can't reproduce again. I'd continued working not thinking I'd accidentally \"fix\" the problem. I stepped back through my commits and didn't find any that could reproduce the issue.\nThanks for taking the time to look at this anyway. (And all the work you've put into phan, it's phenomenal!). ",
    "umherirrender": "In my opinion phan should report an error when NAME is not definied in the sub class (or missing in the inheritance tree) to avoid a php fatal similar to an abstract function which is not defined in a sub class.\nYour suggestion seems to be:\n```\nabstract class PObject {\n    var $name;\n    public function __construct( $name ) {\n        $this->name = $name;\n    }\n}\nabstract class AObject extends PObject {\n    const NAME = '';\n    public function __construct() {\n        if ( static::NAME === self::NAME ) {\n            throw new RuntimeException( static::class . ' does not define const NAME' );\n        }\n        parent::__construct( static::NAME );\n    }\n}\nclass BObject extends AObject {\n    const NAME = 'a name';\n}\nclass CObject extends AObject {\n}\necho (new BObject())->name;\necho \"\\n\";\necho (new CObject())->name;\n```\nWhich is fine for phan, but the missing NAME is only found on runtime and not with the static analyzer.. Yes, that works (extension=yaml in php.ini).\nBut in my opinion this is incomplete error reporting, when only the function are known by default, but the constant are taken from the runtime php and its loaded extensions.. ",
    "GrahamCampbell": "Ah, ok. :). Great, thanks for the fix.. ",
    "ssudhak": "Hi Tyson,\nMy container is in php 7.3\nphan --version  = Phan 1.2.1\nphp ast version is 0.1.6\nWill check the extension part and let you know.. @TysonAndre ,\nI think I got the issue, It seems to be very weird. But let me know if there are any dependencies like this.\nI changed analyzed_file_extensions from \n'analyzed_file_extensions' => ['php','inc','module','theme','install','engine','profile','test'],\nto\n'analyzed_file_extensions' => [\"php\",\"inc\",\"module\",\"theme\",\"install\",\"engine\",\"profile\",\"test\"],\nAlso your point regarding memory is also valid, it comes when i am scanning whole root folder. I can anyways manage that via breaking it down.. @TysonAndre, i was expecting same. I even tried to add some other old functions listed below. but not getting any expected results. Really wondering what could go wrong. \n```\nini_set('magic_quotes_runtime', '0');\n$av = array(\"the \", \"a \", \"that \", \"this \");\narray_walk($av, create_function('&$v,$k', '$v = $v . \"mango\";'));\nconst C = 42;\n/\n * @deprecated\n */\nclass C {\n    /\n     * @deprecated\n     */\n    function f() {}\n}\n```. @TysonAndre thanks for the confirmation. The only thing that is confusing me is that I am getting deprecated errors while running from docker. Both have 7.1. really wondering why things are getting caught there, but not from other installation.\nI have tried issues mentioned in \n\nhttp://php.net/manual/en/migration56.deprecated.php\nhttps://secure.php.net/manual/en/migration70.deprecated.php\n\nBut still, it's not catching any deprecated issues. Is it still anyways related to our PHP settings.. ",
    "wapmorgan": "Yeah, it worked now! Thanks for fix!. ",
    "andreasschroth": "Nice one. \ud83d\udc4dI wasn't even aware a second parameter exists.. @remicollet Actually funny, I just wanted to suggest a new PhpStorm inspection for it (multiple dirname() calls) and noticed there's already an inspection for it (thus I guess I wasn't actively aware of it). Thanks for introducing the second parameter!. ",
    "quasarblue": "Please run phan on this test,\nit doesn't statically report/infer the fatal error raised\nad runtime by a method call getUser, because on php7 the\ntoo few arguments has turned from warning to fatal.\nI need to have a statically generated list of these, because I'm porting code\nfrom php5.5 to php7.2. Can phar do [this?\ntest.php:\n<?php\n        include(\"inc/lib.inc\"); \n        $user=new User();\n        $user->getUser();\n        $jhonny->wtf();\n    ?>\ninc/lib.inc::\n<?php\n        class User {\n            public function getUser($username) {\n                return $username;\n            }\n        }\n    ?>\n. ",
    "VictorDauchy": "Phan: phan/phan dev-master 15b2c1c\nPhp: PHP 7.2.10 (cli) (built: Nov  5 2018 15:56:38) ( NTS )\nXDebug:  Xdebug v2.6.1\nThanks for the hint about the 'extensions', the bug appears when plugin 'InvalidVariableIssetPlugin' is activated.\nThe 'assert' is not needed to reproduce the bug, only writing \"isset(self::TOTO['a']);\" will block phan.\nWith PHAN_ALLOW_XDEBUG=1 no debug trace is returned.\nMy config.php is:\n{\n    \"target_php_version\": null,\n    \"pretend_newer_core_functions_exist\": true,\n    \"allow_missing_properties\": false,\n    \"null_casts_as_any_type\": false,\n    \"null_casts_as_array\": false,\n    \"array_casts_as_null\": false,\n    \"strict_method_checking\": true,\n    \"strict_param_checking\": true,\n    \"strict_property_checking\": true,\n    \"strict_return_checking\": true,\n    \"scalar_implicit_cast\": false,\n    \"scalar_array_key_cast\": false,\n    \"scalar_implicit_partial\": [],\n    \"ignore_undeclared_variables_in_global_scope\": false,\n    \"backward_compatibility_checks\": false,\n    \"check_docblock_signature_return_type_match\": true,\n    \"check_docblock_signature_param_type_match\": true,\n    \"prefer_narrowed_phpdoc_param_type\": true,\n    \"prefer_narrowed_phpdoc_return_type\": true,\n    \"analyze_signature_compatibility\": true,\n    \"allow_method_param_type_widening\": false,\n    \"guess_unknown_parameter_type_using_default\": false,\n    \"phpdoc_type_mapping\": [],\n    \"dead_code_detection\": true,\n    \"unused_variable_detection\": true,\n    \"force_tracking_references\": false,\n    \"warn_about_redundant_use_namespaced_class\": true,\n    \"quick_mode\": false,\n    \"simplify_ast\": true,\n    \"enable_class_alias_support\": false,\n    \"generic_types_enabled\": true,\n    \"warn_about_undocumented_throw_statements\": true,\n    \"warn_about_undocumented_exceptions_thrown_by_invoked_functions\": true,\n    \"exception_classes_with_optional_throws_phpdoc\": [],\n    \"max_literal_string_type_length\": 1000,\n    \"consistent_hashing_file_order\": false,\n    \"globals_type_map\": [],\n    \"minimum_severity\": 5,\n    \"suppress_issue_types\": [\n        \"PhanUnreferencedPublicMethod\",\n        \"PhanPluginDescriptionlessCommentOnPublicMethod\",\n        \"PhanPluginDescriptionlessCommentOnPrivateMethod\",\n        \"PhanPluginDescriptionlessCommentOnProtectedMethod\",\n        \"PhanPluginDescriptionlessCommentOnPublicProperty\",\n        \"PhanPluginDescriptionlessCommentOnPrivateProperty\",\n        \"PhanPluginDescriptionlessCommentOnProtectedProperty\"\n    ],\n    \"whitelist_issue_types\": [],\n    \"exclude_file_regex\": \"@^vendor\\/.*\\/(tests?|Tests?)\\/@\",\n    \"enable_include_path_checks\": true,\n    \"include_paths\": [\n        \".\"\n    ],\n    \"warn_about_relative_include_statement\": true,\n    \"exclude_file_list\": [],\n    \"processes\": 1,\n    \"directory_list\": [\n        \"phanTest\"\n    ],\n    \"analyzed_file_extensions\": [\n        \"php\"\n    ],\n    \"exclude_analysis_directory_list\": [\n        \"vendor\"\n    ],\n    \"skip_slow_php_options_warning\": false,\n    \"autoload_internal_extension_signatures\": [],\n    \"ignore_undeclared_functions_with_known_signatures\": true,\n    \"plugin_config\": [],\n    \"plugins\": [\n        \"InvalidVariableIssetPlugin\"\n    ]\n}. ",
    "Daimona": "@TysonAndre Thanks! However, I'm afraid I have not explained properly. I just managed to recheck the issue with Phan master, and it's still there.\nTo say it in other words, it'd be cool if UnusedSuppression had a config variable where other plugins could add their issue types, to avoid reporting them as unused, or something like that.. Sure. First of all, this is the source of our custom plugin. This is an example of @suppress used with an issue caught by such plugin.\nI re-checked that I'm currently using the master (i.e. with the SUPPRESS_ISSUE_LIST constant), and it still doesn't work.\nFor testing this, you need much less: a simple file with content\n/**\n * @suppress SecurityCheck-XSS\n */\nfunction lol() {\n    echo 'lol';\n}\nIf I run phan on it, I get test.php:6 UnusedSuppression Element \\lol suppresses issue SecurityCheck-XSS but does not use it. The name of the issue doesn't make any difference (i.e. @suppress Lol has the same outcome). The way I envisioned it, UnusedSuppressionPlugin could provide a config variable where you may specify issue types to exclude from this analysis. In this case, for instance, I would add SecurityCheck-XSS so that it's not reported as unused. Other solutions are possible, of course.. Thanks!. That was quick, thanks!. ",
    "bawolff": "Part of the problem I think is we (Wikimedia) are running the security check stuff as a separate phan job from our main phan jobs (Partially because the security check stuff is currently stuck at an older version of phan, but also because the custom security plugin is a bit finicky), so the main job can't possibly know if the security suppressions are used or not because the plugin is only loaded on the other job.. ",
    "mokraemer": "no, this is not true. It is the same machine, all parameters are the same. Just used another phar-file downloaded here.. [marc@localhost devel]$ php -v\nPHP 7.2.14 (cli) (built: Jan 11 2019 09:51:36) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n[marc@localhost devel]$ php /opt/phan.phar -v\nPhan 1.2.2\n[marc@localhost devel]$ php /opt/phan.phar -i -z >/tmp/out-1.2.2\n[marc@localhost devel]$ cat /tmp/out-1.2.2|wc -l\n198\n[marc@localhost devel]$ grep \"undeclared class\" /tmp/out-1.2.2|wc -l\n0\n[marc@localhost devel]$ grep \"PhanUndeclaredClassMethod\" /tmp/out-1.2.2|wc -l\n0\n\n[marc@localhost devel]$ php -v\nPHP 7.2.14 (cli) (built: Jan 11 2019 09:51:36) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n[marc@localhost devel]$ php /tmp/phan.phar -v\nPhan 1.2.5\n[marc@localhost devel]$ php /tmp/phan.phar -i -z >/tmp/out-1.2.5\n[marc@localhost devel]$ cat /tmp/out-1.2.5|wc -l\n1082\n[marc@localhost devel]$ grep \"undeclared class\" /tmp/out-1.2.5|wc -l\n186\n[marc@localhost devel]$ grep \"PhanUndeclaredClassMethod\" /tmp/out-1.2.5|wc -l\n137\n. I've played some more. You're right - there are some modules missing in my install. I'm sorry! Older phan versions did not complain about this.\nPlease close this report - and thanks for your time.. ",
    "hscheffknecht": "@TysonAndre Thanks for fixing the issue so fast, this is great. It works now with the code from above, but still not with the original file.\nIt's reproducable when adding an addtional line inside the addField method:\n```\n<?php\nabstract class PhanUndeclaredClassFailure\n{\n    private $fields = array();\n    public function set($data, $value = null)\n    {\n        $class = $this->fields[0]['opt']['class'];\n        $test = new $class();\n    }\npublic function addField($field)\n{\n    $this->fields[$field] = [\n        'id' => 'xxx', // ADDITIONAL LINE\n        'opt' => [\n            'mode' => 'Foo'\n        ]\n    ];\n}\n\npublic function findFirst()\n{\n    $this->set([]);\n}\n\n}\n```. ",
    "Nacoma": "I appear to have posted this in the wrong repository. Sorry about that.. ",
    "splinter89": "You can forget about the resizing.\nMy point here is that the standard command line in Windows 10 supports the nice progress bar, but the fix that I referenced makes me see ugly dots instead (btw I didn't see it mentioned anywhere in the wiki).\nNow I am forced to manually comment out these lines.\nI don't need help, I suggest reverting that fix.. ",
    "IkeLutra": "@TysonAndre Thanks. I will try and take a look as well if I get time. ",
    "terjepe": "Ah sorry. Forgot to include the details:\n$ vendor/bin/phan --version\nPhan 1.0.5\non Windows 10 running under cygwin.\nSo it looks like I am using a fairly old version of phan. Ok then I suspect an update will make the problem disappear.  I'll test it after I update and see if this is the case.\nThanks!\n. Yes I now get the same result and a few more phan errors! Doh! :-)\nThanks!. ",
    "JanTvrdik": "Current real-world usage (based on top 1000 packages from packagist) is 0.006 % \u2013 it's used 12 times in total.. ",
    "duncan3dc": "Whoops, fixed now :+1: . ",
    "mpesari": "Hi, this was fixed in 075faef2c77190f07b966fe5f7bf34a625eb2da8 but is now broken again. Could you reapply that patch?. ",
    "ondrejmirtes": "I understand that this file is always complete with the latest stable minor PHP version and the differences are in the delta files in the same directory.. Definitely, my bad, will force push a fix.. Will do.. Removed the change. I got confused because of sprintf where the |null makes sense.. I understand that the null is silently converted to ''. There's a similar side-effect - strict_types=1 disallows passing objects with __toString somewhere string is accepted, but sprintf accepts it and it works.... I think it's too opinionated to report this as an error, because it works in PHP: https://3v4l.org/KB4rC\nI usually solve this by making the feature work in phpstan/phpstan but then writing a rule for phpstan/phpstan-strict-rules for those who want it to be reported.. About the getenv (GitHub does not allow me to comment on that diff, don't know why) - the delta file for php70 does not exist yet so I'm not sure what needs to be done to be able to add it - can you take over from here? \ud83d\ude0a. Alright \ud83d\ude0a. OK, so anything else that needs to be solved? I think I updated everything.. ",
    "guilliamxavier": "I think this file should be deleted, it is identical to 078_merge_bool_and.php.expected but misses the .expected extension. "
}