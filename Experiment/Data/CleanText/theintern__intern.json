{
    "csnover": "This was fixed in my repo at csnover/dojo2-teststack@d4f50c3c387499eddc8aa36065a49536b2d0ed53 and will be pushed here as soon as the outstanding PRs on that repository have been addressed.\n. The former condition should be solvable by using explicit tunnel-identifier. The latter seems to be less of a problem recently.\n. @vladikoff the problem is that sauce-connect-launcher throws spurious errors whenever it sees certain output from Sauce Connect that doesn\u2019t necessarily indicate failure. For instance, Safari 6 used to generate a Sauce Connect Error when it initialized even though it was actually working fine, due to not loading some unimportant file. So in order to improve that, we\u2019ll need 1. a test failure demo, and 2. to improve or replace sauce-connect-launcher to be more robust.\n. I haven\u2019t seen Sauce Connect hangs in a while, except for some bug that looks like it\u2019s on the Sauce side to do with Chrome. I\u2019ve had my own network issues with Chrome independent of Intern so I suspect they\u2019ve added bugs to its network stack with all their meddling trying to make things faster. I\u2019ve removed the most obvious potential source of problems within the Intern proxy and will call this issue resolved for now.\n. @agray This ticket is about Sauce Labs tunnel hanging the test process without throwing an error. An error is being thrown in your case, so it is not related to this issue.\n. The asymmetrical registration API in Web Components is probably a spec bug. Also, it\u2019s kind of a bad spec. Inflexible, high risk of collisions (as you see).\n. Committed in https://github.com/theintern/intern/commit/74ff28c733bc7882b91b72f41aa5c0bdb3e02a7d\n. Yes, it is definitely planned to have this registered as an npm package. The install instructions will be updated when it is.\n. There is now a registered npm package, but the documentation is not yet updated.\n. Do you have Git installed?\n. Documentation is always updated to reflect the current state of development. Version numbers are put in the documentation so you know what\u2019s supported or not. The copy of Intern currently available via npm exists to prevent package name squatting and to perform testing of installations via npm and is not yet an officially supported installation method. Official installation support via npm will first appear in 1.1. If you are using Grunt with Intern 1.0, you need to load the tasks as per the 1.0 instructions (loadTasks).\n. client.js is not only a Node.js application. This patch is not valid as-is.\n. This patch is still not valid. The runner topics are for the runner only.\n. Added in https://github.com/theintern/intern/commit/55d5644568f14a7418cce3b6293d9db4101293b7\n. Would it be possible for you to work up an example of how to use this to test performance regressions across two versions of a library?\nAlso, I am concerned that the version of benchmark.js being used causes problems with at least Chrome\u2019s optimizer, see http://mrale.ph/blog/2013/04/29/performance-tuning-as-weather-forecast.html (and more generally, http://mrale.ph/blog/2013/08/14/hidden-classes-vs-jsperf.html which has an aggregate list of posts about bad microbenchmarks).\n. @kitsonk Are you going to be able to handle this for 1.3? I\u2019d like to do a release within the next few weeks.\n. @jdalton FYI, there is preconfiguration you can do on Sauce Labs that can add the requisite registry keys. See prerun at https://saucelabs.com/docs/additional-config and https://github.com/bryanforbes/dojo/blob/intern-conversion/tests-intern/intern.js#L27-L28 for an example using Intern.\n. If it is installing and expecting Node.js dependencies, you need to use intern/dojo/node to load it.\n. Well, the promises are already self-chaining. Whenever you call a method on the remote, the returned promise is chained to the last registered promise. The problem is that the last registered promise is not necessarily the last resolved promise, but you don\u2019t know that the promise chain is going to be modified by a callback until it runs. It may be possible to keep a record of the last executed promise as well, and attach to that promise from inside a then call instead, which would avoid the need for an actual queue, but I haven\u2019t spent a lot of time thinking about solutions to this issue.\n. Thanks for pointing out this issue, and sorry for the trouble. Goes to show how often we actually use things directly from GitHub\u2019s tags page. :) I\u2019ll make sure that the links on the Web site are updated with something better and we\u2019ll make a quick decision on where to go from there tomorrow.\n. Fixed in c58d920d149f1f5b7bdb10ebbb7e219753bf002e\n. Based on my research, it looks like Testling-CI takes a fundamentally incompatible approach to ours, so we can\u2019t support it. It is not simply a continuous integration service like Travis or Jenkins, but rather, a test framework similar to (but much less feature-filled) than Intern. It controls the entire process of loading scripts, processing them with browserify, executing scripts, and retrieving results, so we can\u2019t load our own remote server to do anything like functional testing, code coverage, etc.\nI\u2019m planning on implementing a TAP reporter at some point for Intern, but in order for Intern to ever work with Testling, they would need to implement the standard WebDriver protocol, or at minimum provide a mechanism for loading arbitrary URLs instead of requiring CommonJS-formatted scripts. Sorry for the bad news!\n. @stdavis Looks interesting; could you please provide information on the licensing disposition of that code?\n. OK, since it seems there\u2019s not a huge interest in this at the moment, and we\u2019re not immediately seeing cases where map does not do what needs to be done, I am going to close this for now.\n. @iammerrick Could you provide details on your specific use case? Still trying to narrow down exactly what it is that people are wanting to accomplish. This could be as simple as a documentation issue.\n. Hi Christian,\nI\u2019m really sorry for not getting these right the first time. Writing the feature matrix was an extremely nerve-racking  process exactly for this reason. I tried really hard not to screw up, but it turns out I did anyway! : Thanks for being cool about it and not going after my throat with a shiv.\n. Thank you for being a worthless spammer. Have a great day!\n. It\u2019s OK. Istanbul (and esprima!) are really very cool and I am glad I didn\u2019t have to do it myself. I should probably figure out a way to name drop them 20 or 30 more times. :)\n. Congratulations on having the distinction of submitting the first (non-spam) community PR! :)\nBy the way, have you signed the Dojo Foundation CLA? It will only take a minute, but if you plan on submitting any more non-trivial fixes or enhancements in the future, it will be needed for them to be accepted.\n. I\u2019ve recently been informed that there was an error in the form that caused the duplicate registration message to be displayed incorrectly for people that submitted the form without a Dojo Foundation account. If you submit it again now, it should go through, properly this time. Really sorry for the hassle. If you want to wait until you actually submit another PR, I completely understand.\n. @vladikoff this issue is relevant to your interests now that it has landed. :)\n@milesj I swear if you try the form again it will work now (I personally tested it). It seems that sqlite pretends to drop indexes with unique constraints but actually doesn\u2019t drop the constraints even though the index is gone.\n. So what does this actually do, in terms of behavioural change to the end-user? The PR here is opaque because it is just a change to the dependency. I do seem to see that the Travis build no longer shows progress.\n. Do you have any thoughts on why it is not showing up in Travis? If this is breaking people I would like to land it but it seems bad that that\u2019s happening.\n. The TypeError is a bug in Dojo 1.8.3 and earlier, ticket #15616. Upgrade to Dojo 1.8.4 or later, or use the geezer branch, and it should work fine.\n. The Travis self-test won\u2019t succeed because it runs your new code against the current master version, and of course current master has no benchmark library in it so it tries to load benchmark.js and fails. :)\n. Is this still stable? Do you think we can safely put it in 1.2 instead of 1.3?\n. https://github.com/theintern/intern/wiki/Changelog#since-10\n. Travis is reporting failures in IE9 and Safari 6\u2026\n. If by temperamental you mean\u2026IE9 failures :)\n. It looks to me more like you\u2019re sometimes hitting the timeout, and sometimes not, indicating that there\u2019s an operation that is only sometimes fast enough/your timeout setting is too low.\n. I\u2019m going to close this PR for now since it is not able to be committed as-is. If you have time in the future to address the feedback please reopen it, otherwise we will revisit this future for a later milestone.\n. With regards to old IE, the only time this would ever be an issue was if you were comparing two objects that are identical in every way except one of them overrode one of the buggy enum methods and the other one didn\u2019t. I don\u2019t see anyone ever actually doing this except in a contrived example to prove a point, but even if they did, the test failure would show up in other browsers when the runner is used, so it\u2019s hard to want to invest effort here.\nWith regards to Safari 5, if the current getObjectKeys that\u2019s broken there it\u2019s also broken in Chai since their code is identical. Since this code is intended to be a drop-in replacement for Chai\u2019s assert interface, that includes not going out of our way to fix bugs that exist upstream.\nI won\u2019t refuse a patch for this if you want to send one, but I am not going to spend our time fixing it either when we can instead work on issues that impact people more deeply.\n. Fixed by 10a49df.\n. (CLA on file.)\n. 1. Yes, it does. If you are trying to load a Node module you need to use intern/dojo/node!../lib/HelloWorld as your dependency.\n2. This is the bug tracker. Support requests go to Stack Overflow, please.\n. These should be loading in parallel but executing in order (without shim). We\u2019ll look into it and fix it if it\u2019s not working correctly.\n. I\u2019ve confirmed that the loader is not working in the way it should be working for non-AMD modules. This will be resolved for 1.1.\n. @Abjorn This has been implemented using an AMD loader plugin (intern/order), rather than shim, because:\n1. I do not want to pollute the loader with features that allow people to shoot themselves in the foot by paving over the fact that they are not using any real dependency management in their code;\n2. While I can make changes to the dojo2-core loader today, I can\u2019t make the same changes to the Dojo 1 loader, so there would be a functional incongruity between the two branches for several months.\nThis feature will be available in 1.1, or if you are tracking master you can use it today. define(['intern/order!my/parentJavascript.js', 'intern/order!my/childJavascript.js' ], \u2026)\nThanks for the report!\n. Hi Abjorn,\nThose third party libraries are the code that I was referring to in point 1.\nThis is not a Dojo issue or a Dojo loader issue. Dojo 1, Dojo 2, curl.js, bdLoad, lsjs, almond.js, inject, pinf, NeedsJS, and brequire all do not implement shim. RequireJS is the only client-side AMD loader that I know of that implements this functionality. I am absolutely interested in supporting testing of as much code as possible, but I want to do so in a way that is also as responsible as possible.\nIf you really need shim for your own project, Intern does not use any Dojo-loader-specific functionality, so you can modify your client.html to use require.js instead and it should work just fine. I would strongly suggest that you contact plugin authors and request that they add proper AMD support to their libraries so you do not need any extra configuration to use them.\n. You can load CJS code today. If your module is in a Node path (i.e. node_modules), load it as a dependency using intern/dojo/node!package/module as your module ID. Obviously this only works for the server-side components.\n. It is a placeholder for an example module that is being tested. A more thorough tutorial will be available shortly that should help to ameliorate any other confusion. Also, please note that the GitHub issue tracker is for bugs; support questions should go to Stack Overflow. Thanks!\n. r-\n. Committed in 3693fe8.\n. To be clear, the reason for not using dojo/_base/array is because its behaviour is not exactly the same as that of the spec version?\n. Landed 10a49df.\n. Thanks for the report, but this is not an Intern bug. While we would like to be able to support all installation environments equally, it\u2019s not feasible for us to implement workarounds for specific firewalls. You may follow the advice that @neonstalwart gave, which should resolve the issue in your specific case.\n. As of version 1.1, Intern is installed via npm and uses git+https URLs for its git dependencies, which should obviate workarounds like the one @neonstalwart described.\n. @floreat-bangoria Sauce Connect doesn\u2019t install until you try to run the runner for the first time. If you are experiencing an issue when running npm install, the page you just linked to is unrelated.\n. This is the same issue as #30. You can replace the loader with RequireJS in client.html if you want and everything should still work.\n. https://github.com/theintern/intern/issues/59\n. Duplicate of #17.\n. I don\u2019t know what you mean by \u201croot MID\u201d since there is no such thing. Are you referring to the configuration file MID?\n. Fixed in 2dafae4.\n. Can you provide an example of what you expect to see and what the result actually is, and how it causes a failure when proxying a request through Apache? It is not entirely clear to me what is being described here or how it would break in the case of adding a transparent proxy.\n. Try setting AllowEncodedSlashes NoDecode or AllowEncodedSlashes On in your Apache configuration and let me know if it solves the issue.\n. I am not able to reproduce any issue with AndroidDriver, except that it appears to be broken and doesn\u2019t return data properly from execute calls. It does not hang. I added a basic functional test to self-tests and ran it against Android and aside from the execute call not returning the expected value (which is an upstream issue) it worked correctly.\n. Works for me. https://saucelabs.com/tests/6aa0a5498dc64870968be2ae585610ad\nAlso I don\u2019t know why are you are talking about safeExecute, it is different from execute and not what is used.\n. I don\u2019t think that we\u2019re at the point that we want to be introducing hacks to work around platform issues. If there really is an issue with AndroidDriver then we need to create a reduced test case and send it upstream.\n.  I disagree that it is not working.\n```\n$ node node_modules/intern/runner.js config=tests/selftest.intern\nDefaulting to \"runner\" reporter\nListening on 0.0.0.0:9000\nOpening local tunnel using Sauce Connect\nTesting tunnel ready\nInitialised android 15 on ANDROID\nTest main - basic functional test - basic test FAILED on android 15 on ANDROID:\nError: expected null to be true\nexpected null to be true\nTest main - basic functional test - nested commands FAILED on android 15 on ANDROID:\nError: expected null to be true\nexpected null to be true\n=============================== Coverage summary ===============================\nStatements   : 85.09% ( 291/342 )\nBranches     : 76.3% ( 132/173 )\nFunctions    : 83% ( 83/100 )\nLines        : 85.09% ( 291/342 )\n================================================================================\nandroid 15 on ANDROID: 2/58 tests failed\n--------------------------+-----------+-----------+-----------+-----------+\nFile                      |   % Stmts |% Branches |   % Funcs |   % Lines |\n--------------------------+-----------+-----------+-----------+-----------+\n   intern/                |     63.16 |         0 |     66.67 |     63.16 |\n      main.js             |        30 |         0 |        40 |        30 |\n      order.js            |       100 |       100 |       100 |       100 |\n   intern/lib/            |     84.98 |      76.3 |     81.16 |     84.98 |\n      EnvironmentType.js  |     33.33 |         0 |     33.33 |     33.33 |\n      Suite.js            |     94.79 |     89.39 |     92.86 |     94.79 |\n      Test.js             |      97.1 |     89.47 |       100 |      97.1 |\n      reporterManager.js  |     94.29 |        85 |       100 |     94.29 |\n      util.js             |     48.78 |     45.45 |        40 |     48.78 |\n   intern/lib/interfaces/ |       100 |       100 |       100 |       100 |\n      bdd.js              |       100 |       100 |       100 |       100 |\n      object.js           |       100 |       100 |       100 |       100 |\n      tdd.js              |       100 |       100 |       100 |       100 |\n   intern/lib/reporters/  |     73.91 |        65 |     85.71 |     73.91 |\n      console.js          |     73.91 |        65 |     85.71 |     73.91 |\n--------------------------+-----------+-----------+-----------+-----------+\nAll files                 |     85.09 |      76.3 |        83 |     85.09 |\n--------------------------+-----------+-----------+-----------+-----------+\nTOTAL: tested 1 platforms, 2/58 tests failed\nShutting down\nClosing Sauce Connect Tunnel\n```\nAs to the test failures\u2026something in AndroidDriver is obviously broken as these tests pass on all other platforms. I don\u2019t know if there is anything that we can do about that except complain upstream.\n. This is http://code.google.com/p/selenium/issues/detail?id=4816. There is no way we can work around it, since I don\u2019t think it is reasonable that we should perform ASI on people\u2019s code, and just replacing line terminators with other whitespace will break code that relies on it. I have tried replacing the \\n terminators in the script with various values that the EcmaScript spec allows and they all fail. The only way execute works in AndroidDriver is if you pass code that has no new lines anywhere.\n. Those get requests are not infinite loops, they are part of the heartbeat system. It means your tests are not ever resolving but the test runner thinks they are still running. I can\u2019t say how that would be possible, since the test should then time out. In any case, like I said, the self-tests work fine except for the AndroidDriver execute bug, so there is probably something else wrong with your environment or your test case since it is effectively identical to the basic self-test.\n. Sorry for not responding, my GH email notifications were broken.\nI don\u2019t understand why your AndroidDriver is would crash or close connection. The one on Sauce is not having any problem with the way Intern works right now (the issue with line endings is surmountable by not putting any in the code you execute on the client). It is difficult for me to add any workarounds for things that I can\u2019t actually reproduce.\n. According to Selenium, AndroidDriver is no longer a thing. Use https://github.com/selendroid/selendroid instead.\n. The whole point of all these products being based on the same open standard is that you don\u2019t have to \u201cget\u201d anything to use them, it all just works. All you need to do is look up the correct capabilities request in their documentation and paste it into your environments configuration.\n. @gitgrimbo Thanks for the information. If this is an OSS project you are working on I\u2019d love to have the opportunity to look at it if you can provide a link.\n. Wiki updated. Tagged, pending official release.\n. If we are going to include something to do this, I\u2019d prefer it to not be something that says \u201cyou are probably going to want something more robust\u201d in its readme.\n. No, there is no update. I have no new thoughts on whether or not this is likely to be included in the future.\n. It\u2019s not invalid, it\u2019s just not done yet. My thoughts are unchanged.\n. Fixed in 70c93086ee174fbae3960b8fc27d66871da26530\n. Setting excludeInstrumentation so that it applies to all files will keep instrumentation data from being generated. I don\u2019t think there\u2019s a strong case to implement a feature like this at the current time if its intent is to avoid an Android bug by disabling key functionality, so I am going to close this PR for now. It is also possible that the issues being experienced on Android are due to unrelated functional testing bugs like #46 which are due to be fixed in 1.2.\n. Improvements on documentation for PromisedWebDriver are something I am in the process of working on today. Based on the content of this ticket it is possible there is an issue with the way element context are being passed, but the limited stack trace in the error isn\u2019t very illuminating.\nThat last question about patterns for reusable code is better asked and answered on Stack Overflow.\n. OK, so the issue in the OP\u2019s test case is that elementBy* are treated as methods that are supposed to be passed an optional context element as the first argument, but actually what is supposed to happen is that those methods get called on the context element instance if one exists instead of on the main webdriver instance. (in intern/lib/wd.js, L53-66 and L475)\nWhat happens now (pseudo):\nif (this._context.length) {\n  this.method.apply(this, [ this._context[last], ...args ]);\n}\nwhat should happen:\nif (this._context.length) {\n  this._context[last].method.apply(this, args);\n}\n. @jperl I\u2019ve answered this before, but I can\u2019t find it. Anyway, it\u2019s because that code did/does not implement the entire WebDriver API (no touch support, for example, which is rather important).\n. Please verify whether or not this issue still exists in current master branch. Thanks!\n. Between fixes for #46 and #14 I expect this to no longer be an issue. Please comment if this is not actually the case.\n. My recommendation would be for you to include a loader plugin like https://github.com/jrburke/require-cs within your own unit testing code. It\u2019s not currently a priority to include support by default so I\u2019m going to close this ticket for now. I also have concerns that if we start bundling a bunch of plugins for support for things like CoffeeScript that then we have to start supporting every language that might compile to JavaScript. That said, if you can make a strong case for including something and provide a patch, it will definitely be considered.\n. The bug tracker is not a support system. Please use the available support channels to receive support.\n. The bug tracker is not a support system. Please use the available support channels to receive support.\n. The timeout argument is not optional in WD.js; if you want to wait forever, pass Infinity as the second argument. This is annoying and sucky and we\u2019ll be trying to improve this in future.\n. Indeed. I plan on fixing this along with #52; for now, here is a link to some inline documentation about these two methods that will make it into the master branch:\nhttps://github.com/theintern/intern/blob/issue-52/lib/wd.js#L548-L566\n. This has been addressed by the documentation for our new WebDriver client library, Leadfoot. Yay! https://theintern.github.io/leadfoot/\n. We need to fix dojo2-core so the dependent code (deep copy) is in the right place (lang). I don\u2019t want to land this until that has happened. I have retargeted this enhancement to 1.3 since there is more important stuff left to get 1.2 out.\n. In 2dafae4\n. Reimplemented based on this in 02ff6d8\n. The bug tracker is not a support system. Please use the available support channels to receive support.\n. You must have git. warning: templates not found /share/git-core/templates indicates that there is an installation issue.\n. The bug tracker is not a support system. Please use the available support channels to receive support. Thanks!\n. If everyone asks for support on the bug tracker then it becomes useless for tracking issues, so we have to be strict about making sure only legitimate bugs within Intern itself are kept open here. The paste you provided shows fairly clearly that the problem lies in your git/npm installation, and it even tells you exactly where you should submit your request for help: http://github.com/isaacs/npm/issues. Nevertheless, we are more than happy to provide support if you ask for it through one of the appropriate channels. This is not one of them.\n. You\u2019ll need to return a promise, not a Deferred. The bug tracker is not a support system. Please use the available support channels to receive support. Thanks!\n. (The fix was to correctly mock the info and groupEnd methods when necessary to prevent console tests from hitting the real console.)\n. I can comment on it insofar to confirm that nested beforeEach/afterEach are not all executed. It\u2019s not really a defect insofar that Intern never intended to execute beforeEach/afterEach from parent suites. I need to do more research to understand whether or not it\u2019s something we really ought to change.\n. This is scheduled for 1.3.\n. I\u2019m going to go ahead and upgrade this to a bughancement since it seems like it\u2019s working the way nobody expects it to work. :)\n. @RoystonS Do you expect remaining beforeEach/afterEach methods from parent suites to continue to execute if one of the earlier ones fails?\n. @RoystonS Also, do you expect that beforeEach/afterEach will not run when a child suite is entered? i.e. in the original example do you expect to see \u201ctop-level beforeEach\u201d before \u201cNested describe\u201d and then again before \u201cNested-level it\u201d, or only before \u201cNested-level it\u201d?\n. @RoystonS So the second question is basically, do you expect beforeEach/afterEach of a parent suite to execute when a child suite or child test is executed, or only when a child test is executed?\n. each describe is a new suite, and each it is a new test. So what you are describing matches what I expected, that beforeEach/afterEach would not execute on a child suite, only on a child test.\n. @RoystonS Please check current master and confirm that everything is working as expected.\n. @RoystonS Glad to hear it is passing! Looks like this fix is good then, but please let me know if you run into any problems with your full system tests.\n. Could you please provide an expected result & actual result example?\n. This is the same issue as #46. A pull request exists at #69. It will be tracked there. Thanks for the report!\n. Grunt is supposed to stop proceeding when a test fails; I will be sure to check it once #46 is fixed to make sure it is working properly. The manner in which the failure occurs here is indicative of the problems caused by #46. If I am a dolt and it turns out to not be the root cause, I will reopen this.\n. Having fixed #46 and coming back to verify this, I am actually not able to reproduce your reported output.\nIntern 1.1.0:\n```\n$ grunt intern\nRunning \"intern:all\" (intern) task\nListening on 0.0.0.0:9000\n\n\n0/0 tests passed\nWarning: FAIL: main - google homepage - fails (2409ms)\nError: expected 'Google' to equal 'Goggle'\nexpected 'Google' to equal 'Goggle'\nFAIL: main - google homepage - succeeds (3ms)\nError: expected 'Google' to equal 'Goggle'\nexpected 'Google' to equal 'Goggle'\n0/2 tests passed\n0/2 tests passed Use --force to continue.\n\n\nAborted due to warnings.\n```\nSo, wrong, but not what is reported in this ticket.\nOn the current master branch things look even better:\n```\n$ grunt intern\nRunning \"intern:all\" (intern) task\nListening on 0.0.0.0:9000\n\n\n0/0 tests passed\nPASS: main - google homepage - succeeds (2185ms)\nWarning: FAIL: main - google homepage - fails (1640ms)\nError: expected 'Google' to equal 'Goggle'\nexpected 'Google' to equal 'Goggle'\n1/2 tests passed\n1/2 tests passed Use --force to continue.\n\n\nAborted due to warnings.\n```\nCould you test again using the master branch and let me know what your results are? There is another change in master that I am wondering fixes the issue (Intern 1.1 and earlier quit the node process immediately once the tests are done running; 1.2 and later allow it to exit gracefully, so if there was stuff left in a buffer that had not been written out in 1.1, it may be written out correctly in 1.2). I\u2019ll reopen this for now so it is still on radar until you\u2019ve had a chance to test.\nIf you test on master and it still continues to occur, could you please verify your Grunt version and operating system? Thanks!\n. Thank you for tracking this down! In order to review/land this PR, I need to verify that you have e-signed the Dojo Foundation CLA. Could you please confirm that you have done so (and if not, do so :))? Thanks!\n. I hope to land this fix this week.\n. Landed as 7f61abb. Thank you!\n. Fixed in ae30df4.\n. I don\u2019t understand this question. Intern does not have any mechanism to \u201cconfigure\u201d reporters. You load a reporter and that\u2019s it. Is this a bug? Enhancement request? Are you proposing a new feature?\n. Adding the ability to pass configuration to reporters in a standard way would be great. If you can write a patch that does this well, I am sure we would accept it.\n. There\u2019s actually already a patch for configuring reporters more robustly at https://github.com/theintern/intern/pull/181 which will be landed once some other churn is addressed.\n. Working on this now at https://github.com/theintern/intern/tree/testable-wd\n. I don\u2019t see a CLA on file for you. Could you please submit one? Thanks!\n. I committed a derivative of this patch that uses the correct dot syntax for the event name so that people can use event wildcard.\n. The remove and stop APIs exist to enable unit testing of reporters and the reporterManager API. Reporters are never \u201cremoved\u201d during the course of a normal test run. This is by design. What are you trying to do where you think these methods should execute?\n. Yep, I got it.\nWhat are you trying to do with your reporter? There might be a way to do it another way for now.\n. If this is a runner reporter, you may perform teardown operations in the /runner/end topic.\n. A client reporter runs on the client (client.js). A runner reporter runs in the test runner (runner.js). https://github.com/theintern/intern/wiki/Using-and-Writing-Reporters\n. This is committed in 97318ba68c789f2986f0f3998f144ad5b41b7f61 though I would have hoped/expected a test fail so there might be a deeper issue related to this that is uncovered in future.\n. \u201cDoesn\u2019t work\u201d. What does this mean? Did you get an error? Did you get an unexpected value? Did you get nothing? Did the keyboard give you an electric shock? Did the computer burst into flames?\n. Do you know that Chrome\u2019s driver has already been updated to support the new version of Selenium server?\n. Running using Selenium 2.34.0 on Sauce Labs with Chrome works for me, so whatever is wrong is an issue with your local installation. Also, Selenium 2.35.0 was already released, so if you are trying to be on the latest and greatest, you will need to upgrade again.\n. Mysterious that Chrome on Sauce Labs works with 2.34.0. Maybe they are actually secretly still using 2.33.0 on those machines. Anyway, here is the issue, reported upstream: https://github.com/admc/wd/issues/167\n. Fixed in d8118df0e1cb7f0bf7725d0a76d4a2bdd07cf8ef (master) d5d01db4fb10e4c6b4880c5902b164de8658967c (geezer) 697961b23ce9c3622e474ac3c85195b34ee1203f (1.2.1) aec28f0bc21f7bb4349700a2f81d59a030b5e0ae (1.2.1-geezer)\n. I don\u2019t understand the last paragraph in your description; there is backwards compatibility code in wd/lib/main.js to massage the host appropriately. Also, I don\u2019t see the selftests being updated to 2.34.0+ and I don\u2019t see the selenium-version being updated in any test configuration so the selftests are still using 2.33.0, which is known to work fine.\n. Intern wasn\u2019t using wd/lib/main, but it should have been, to ensure compatibility without needing to double up the backwards-compatibility code. Once that was fixed, the remaining issue was that init has changed its signature and now invokes the callback with two arguments, which meant remote.sessionId was being set to an array of values instead of the actual session ID. The Travis CI passed because the version of Intern being used to test was the master branch with the old version of wd, and you didn\u2019t update the selenium version in the selftest configuration. I suspect that the self-tests weren\u2019t running properly on your local machine. I\u2019ll write better instructions on how to run the self-tests locally soon.\nAnyway, with the shift to use wd.remote instead of instantiating a new WebDriver instance directly, there was no need to adjust the configuration files, except to update the Selenium version to 0.34.0+ to confirm that the fix actually works. And it does. Hurrah!\n. I don\u2019t understand what you are requesting. Capabilities are already fully configurable.\n. The capabilities object is passed straight through to Selenium so it is implausible, though not impossible, that this is an Intern bug.\nSince this is the second \u201cdoesn\u2019t work\u201d-type report you\u2019ve sent, I would really appreciate it if you could please take a moment to review guidelines for writing good bug reports; it will help you get your issues sorted more quickly too. In particular, we need, at minimum, steps to reproduce, expected results, and actual results. Thanks!\n. I saw elsewhere that you figured out how to write your configuration file to do this.\n. An alternate implementation was committed at https://github.com/theintern/intern/commit/95ce92223d7ea7015396e1fb59e90f33c2f82f0c\n. Landed with minor modifications in https://github.com/theintern/intern/commit/81f90f2aab675384f3bd182a20cf8964ab523525\n. Is this an enhancement request, or are you asking for support? If you are asking for support, please read information on getting support. If this is an enhancement request I will schedule it into the milestone schedule.\n. I\u2019m treating this as an enhancement request. We\u2019ll add a Cucumber interface for 1.4.\n. Landed in c77dac8e19ee4c4490a5b9f8a42d71740f665c35\n. This is not an Intern bug. Please read the error message in the output from npm (it indicates a proxy issue). If you need help, please review the getting support wiki. Thank you!\n. I seem to vaguely recall there was an issue with updating to 1.6, but I don\u2019t remember any specifics. Updating your own dependency and running the self-tests should make it pretty obvious. In any case, any update to Chai needs a similar update to the API-compatible assert.js in the geezer branch, so it is more labour-intensive than simply updating the dependencies and calling it good.\n. This is currently being blocked by https://github.com/component/component/pull/459.\n. This is the Intern bug tracker. It is not for support questions. Please read the support wiki for information on how to ask questions. Thanks!\n. Would you be able to provide a test for this? Also could you please take a moment to sign the CLA? Thanks!\n. The code in this pull request is not valid. It references element which does not exist and there is no unit test. I don\u2019t see any obvious defect in the original code either. Please submit a new PR once you have a test, signed CLA, and code that is valid. Thanks!\n. This already has been reported at #74.\n. OK. I (or someone) will do a little more testing, make sure that this all checks out. I would like it to be more standard without making life difficult for the current use cases we support, so hopefully this can be landed OK.\n. I landed this in 3b28e9e83eb22777c4e60090e73ad14988faaa3e along with a few other tweaks (I am an exceptionally bad and lazy git user and no matter how much I try to make small commits, about 75% of the time I end up smooshing code together). The work dovetailed very well with the work to expand loader support so I\u2019m really happy with the results, though I still have to do some more testing. Thanks for your help making this work, and for putting up with me being a little dumb in the beginning there.\n. I have been working on a private local branch to try to add better support for this. It is surprisingly difficult to actually provide generic support for other AMD loaders because there is no mandate that a global require exist, no mandate that there be a way to configure the loader, etc. So I had been looking at trying to normalize some functionality between at least RequireJS, Dojo, and curl.js. Ultimately there may need to be opt-in for each individual loader. In any case, a boolean \u201cuse RequireJS or don\u2019t use RequireJS\u201d would not be an approach accepted in a PR. I will try to put together and upload the branch I had been working on so you can see it and maybe help make some good suggestions and improvements.\n. I\u2019ve pushed a branch alternamd containing the changes for consideration. https://github.com/theintern/intern/compare/master...alternamd\n. One of the biggest issues with the proposed branch is that it currently exposes any public installation of Intern to a potential XSS attack since it allows arbitrary script injection. Not sure if this is really a big deal, and is preferable to having to hard-code loader addresses. A reasonable middle ground would be to not allow absolute URLs.\n. FWIW, shim is not a mandatory part of the AMD specification and of all the client-side AMD loaders is only supported by RequireJS. No other AMD loader authors particularly care about it and instead use loader plugins (like use.js) to achieve the same ends.\n. This has been implemented in master and documentation added to the wiki. I would ask people to please test the current implementation and provide feedback on whether it is useful or not. I have some concerns about the complexity of the approach and would like to address anything else people have problems with so that a 1.3 release can be completed quickly.\n. Actually, I\u2019ve come up with a much better way to do this, which allows configuration from within the config file itself! So I will be replacing how this works with a newer, better way soon.\n. Oh, that last commit was the better way I was talking about. Now you can define your loaders within your configuration file along with everything else.\n. I\u2019m going to say this is done and seems to be working well.\n. Landed in https://github.com/theintern/intern/commit/e3b1585dfa5c3bd78da8f4c1dfefc41123858206\n. Tests for the functional interfaces are in tests/functional. executeAsync was not implemented the old OperaDriver, hopefully it has universal support now or testing it becomes kind of (more) difficult. But anyway I have some time today so I am just taking care of the bug-part, and later on all the remote interfaces need to be tested which is #72.\n. I think this would be the preference for _lastPromise over returnValue in lib/wd:857\n. I\u2019m not sure what exactly \u201cThere are some changes in the way the element and webdriver classes are passed around which may affect external wrappers. External wrappers should now subclass those 2 classes.\u201d means. Have you done any testing with the new version? (Obviously I can, I am just asking because I am lazy.)\n. In f3ada4ef0a9afaefba362927a1c42a8bd9a13a5b\n. This is related to #89\n. Does the use of the cwd in Intern 1.3 by default solve this problem or do you still need the Grunt task to change directories or something for you?\n. Sorry, I guess I was not clear. Intern 1.3 does not really have any directory structure restrictions. You can specify where the config is based on the current working directory, then set loader.baseUrl in the configuration file, and things will work normally. Given that, I am not sure what the need is for this option, so would need to understand more fully how the current capabilities of Intern don\u2019t match what you need.\n. This is the Intern bug tracker. It is not for support questions. Please read the support wiki for information on how to ask questions. Thanks!\n. This is by design. End the element selection chain using end if you want to click an arbitrary position and not the element you have selected. Please raising questions by following the support wiki instead of creating bug reports. Thank you.\n. I understand. One of the impetuses for ensuring people post questions to the support wiki is to ensure that such things which may not be fully documented are easily discoverable for anyone experiencing a similar issue.\n. I am a huge fan of the wd-sync API from the perspective of readability and usability and would love to be able to use it as the default syntax, but have deep concerns about requiring a C++ extension to Node.js (fibers) for it to work, especially if generators are going to become part of the language but fibers are not.\n. No; among other things (Sauce Connect is not required to use Intern, Sauce Connect can be run on another machine that is not the testing machine so it\u2019s not guaranteed the testing machine itself has Java), anything that makes synchronous calls without modifications to the engine to yield will hang the main event loop unless the runner is overhauled to be more complex and use cluster or something, which is experimental.\n. @jsdevel \n1. Since the WebDriver communication protocol is just a JSON/REST protocol, there is no requirement that Java be installed or used in order to test browsers. Intern already works without Java, and I would really not want to add a required dependency on a second language like this, just as I am not enthusiastic about requiring a C++ extension.\n2. Blocking the main event loop is a big deal because parallel testing of browsers is a thing. It is slow and unnecessary to run tests serially. If you have 10 platforms to test, and it takes 10 minutes to run the full suite, this is the difference between taking 10 minutes to run all your tests and taking an hour and forty minutes to do the same thing.\nHope that helps clarify things, let me know if you have any other questions or thoughts.\n. @neonstalwart yes, I think that is ultimately going to be the path forward.\n. We aren\u2019t going to implement wd-sync. We could implement a sync-interface in Leadfoot based on generators when those become available without a flag, but that\u2019s a separate ticket that needs to be created later when it\u2019s actually possible.\n. With regards to xmlbuilder, I wrote a very basic, very tiny xml \u201cgenerator\u201d for js-doc-parse at https://github.com/csnover/js-doc-parse/blob/master/lib/exporter/util.js that might be useful here.\n. @lbod You had asked if I would help provide pointers on writing a custom reporter (I said yes), and I suggested writing a TAP reporter instead of an xUnit/JUnit/Ant/whatever this format is actually called XML-based reporter and exploring SonarQube. Maybe you think you asked something else, but in my logs you did not ask what you just said you did. With regards to the likelihood of any thing happening or not happening: If someone else writes something and it\u2019s good, then it will probably be added. Otherwise, no. Which is kind of the case with pretty much all things.\n@phated The generator is so tiny I don\u2019t even think it is worth the effort of packaging separately.\n. Is anyone currently working on this task?\n. I do not understand where that question comes from\u2026it\u2019s the same license, the same CLA, and I\u2019m the author. So the answer is\u2026just use it. :)\n. I\u2019d say given nobody else has responded, nobody else is working on this right now.\n. In the stop method. We have someone working on this reporter as well.\n. I\u2019m not familiar with that system in order to know the answer to that question, but you can always write a custom reporter that outputs JUnit XML and use that instead of one of the built-in reporters, so you shouldn\u2019t ever have to wait for a reporter to be completed upstream.\n. It would be great if anyone could test this reporter to verify that it works with their CI service. There is no spec for this format, so many guesses were made, and I don\u2019t currently have a CI service readily available that uses JUnit XML to verify against. It is easy to update if it turns out to not work for some reason. Thanks!\n. @Blasz In my very brief testing it seemed that Jenkins had a problem handling nested suites, like it just collapsed them all into a single depth list. Outputting test.id instead of test.name in the name attribute might help, but then we would probably need to flatten everything to a single list of test cases ourselves, and I am not sure how other JUnit-style consumers will deal with it. Unspecified file formats are the worst.\n. The webdriver reporter contains a rudimentary HTML reporter for anyone that wants to work on this.\nThere is already a grunt task that lets you choose a reporter so I do not understand that request.\n. We can just make intern/chai! return the chai object itself. That\u2019s trivial.\n. Not exposing the chai object isn\u2019t a bug so it won\u2019t be resolved until 1.4. I am going to try to reduce the release cycle for it though.\n. In 9b66c9d.\n. The code example there says \u201ccontition\u201d not \u201ccondition\u201d. Can you confirm it is actually \u201ccondition\u201d in your source?\n. The code you pass is supposed to be an expression, not a statement. i.e. you would write waitForCondition('true'). It is passed to eval. It is wd\u2019s job to return errors on invalid input like this, so I would recommend raising an issue with them.\n. I just stuck a .waitForCondition('true') in the basic.html functional test of the self-tests (it doesn\u2019t normally exist) and it worked without hanging. Better testing of these interfaces will be conducted in Intern 1.4, see #72.\n. I added very basic waitForCondition and waitForConditionInBrowser tests in master and they do not hang.\n. Error 13 is \u201cUnknownError: An unknown server-side error occurred while processing the command.\u201d\nUnfortunately I am not able to reproduce any issue running against Sauce Labs, which is reporting Safari 6.0 rather than 6.1. I have added some basic tests for the keys command to the master branch that do what the functional test you provided above does, which seems to confirm Intern is working correctly.\nIf you can provide a reproducible test case I will be happy to reopen this ticket. On the surface the error indicates a problem with SafariDriver which is not something we have control over, though I can submit a bug report upstream if there is indeed an issue there.\n. The API for keys is not implemented in SafariDriver. Use type instead.\n. http://code.google.com/p/selenium/issues/detail?id=6615\n. Yes, it\u2019s a defect. The quickest way for me to tell you to get around it for the moment is to go to lib/util.js:178 and change amdRequire = to global.require = amdRequire =. I\u2019ll make sure a more permanent fix gets in ASAP.\n. @deeperx No, you are trying to load a Node.js module in a browser which you can\u2019t do for hopefully obvious reasons :)\n. @benlangfeld This ticket is for a bug that was fixed in Intern 1.3.2 and doesn\u2019t have anything to do with the issue you are describing, which is #491 and is fixed in Intern 3.0.3. Thanks!\n. This is the Intern bug tracker. It is not for support questions. Please read the support wiki for information on how to ask questions. Thanks!\n. In 45402ad. Thanks!\n. Good catch. Fixed. Thanks!\n. The best mid-term solution here will be to write a json-stream reporter (which would be useful for other things too) that can be easily consumed. Then there is no ambiguity about what is happening, and all the bells and whistles of Grunt (events, etc.) can receive the correct structured information for other more advanced applications.\n. I\u2019ll just repurpose this ticket. Do you want to work on it? I am not sure when I will have availability for this task otherwise. It should be really straightforward since everything is already designed to be serialized to JSON for transport from the browser to the test runner.\n. My thought was that it would output one line per event, as a stream. This is what the webdriver reporter does when reporting back to the test runner, and since the Grunt task already consumes per-line, it should be very easy to continue to consume.\n. 1. Make the proxy messages output to stderr instead of stdout\n2. Make the proxy publish topics for use by the console reporter instead of accessing console directly\n. Thanks for the exhaustive report but I think this is user error. config is an AMD module ID, not a file path. If you use tests/phantom, not tests/phantom.js, it probably works fine. Please verify.\n. That\u2019s OK, as long as the reports are clear and easily verifiable it is not a big deal. This is a common hang-up that people seem to have so I will probably add some error checking code to warn if someone passes a config that ends in .js.\n. Eventually I would hope that suites on the command-line would be superseded by a grep which would operate on test IDs instead, similar to other test frameworks that do filtering. I am not sure if it would be enough to solve all use cases though. In implementing something like grep, as I think I mentioned to @vladikoff, the biggest question would probably whether the filtering occurs at the time tests are registered or at the time tests are coming up for execution.\n. functionalSuites and grep options will exist in Intern 2.1.\n. I updated the wiki\u2026\n. yes, for anything within intern, it should not reference itself.\n. Is there a problem with there being empty coverage output or is this just a cosmetic defect?\n. how do buttons work\n. Will accept a PR if offered, but we\u2019re not going to work on this any time soon.\n. A response to @neonstalwart\u2019s question would be great and would help us to prioritise this request appropriately.\n. > If I have 5+ servers [\u2026]\nNone of us understands why you would ever have so many discrete servers that you have to manually choose from. This seems like there is a problem with your QA system. What is the rationale here?\n. Some technical notes:\nThose configuration files are shared across environments (browsers) so you can\u2019t just access process.env and now you\u2019re sharing configuration, since process.env doesn\u2019t exist in the browser. You can access environment arguments platform-agnostically via intern/lib/args, but you\u2019re still not going to get your server-side environment data copied over to the browser when doing that. If you\u2019re performing only functional tests, then you should be able to just access process.env directly from the functional tests; those are never loaded or executed in any environment other than the Node.js runner environment. Problem solved, for functional testing.\nFor unit tests in the test runner, the best I think we could really do is serialise and courier configuration data in another query string argument, but then we would be adding more discordance between the environments (in which environment does the configuration data apply, when is it ignored, what if there is browser-specific configuration that should not be overridden, etc.?), and there is also an added concern about query string size limitations depending upon what additional proxy might sit between the Intern server and the browser.\nIn any case, while I understand it sounds immediately appealing to specify things on the command line, in this specific case I\u2019m not sure how much you are really gaining by having to write the server address in the environment every time you run the tests instead of just writing it once in an inherited configuration file and then changing the configuration file. It\u2019s the same amount of data. You could also just write your own wrapper pretty easily, using sed or something to transform the value in the configuration file just before running the tests.\nPlease let me know your thoughts.\n. No, it shouldn\u2019t. They are two different reporters. The console reporter outputs for a single environment, and the runner reporter coalesces reports from multiple environments and includes additional information.\n.  milestone interface not so good sometimes.\n. There is not currently a built-in way to do performance testing. Watch issue #13. As @dylans said there is definitely interest on this, but it\u2019s a difficult thing to get right and we don\u2019t want to throw in some half-baked solution that doesn\u2019t really help people perform proper performance regression testing.\n. @neonstalwart So to confirm, you are saying we should update that module so it follows the module path resolution rules of Node.js to find the path to the module and then call the Node require to get it? It\u2019s so frustrating to have to do these things, but it makes sense.\n. This has been addressed within Intern itself, so the grunt task does not need to be changed.\n. The wiki page Using and Writing Reporters provides details about where each reporter is valid.\n. To be clear, you shouldn\u2019t ever be making arbitrary changes to the Test/Suite objects. You should only access the defined APIs on these objects. If you have state, use closure, as you said.\nI\u2019m not sure if it makes sense to use the Test object as the context for beforeEach/afterEach. I can see the arguments for and against this change.\n. Thanks for your additional insight. I\u2019ll close this for now but if it looks like there\u2019s a good use case in the future for making this change, we\u2019ll consider it.\n. Could you provide a little more information about what you are trying to do using the environment variables? As discussed at https://github.com/theintern/intern/issues/128#issuecomment-32310580 accessing environment variables is limited because they can\u2019t really make their way to the browser, which shares a configuration. I don\u2019t think that the Grunt task ought not to pass through the environment, but I just want to make sure that we\u2019re looking at whatever problem you are trying to solve rather than focusing specifically on the identified limitation.\n. Do you have a test case? Are you returning a promise from your test that does not have a cancel method on it?\n. config path is not adjusted for the difference between cwd at startup and baseUrl when the proxy is started. workaround: make sure your cwd is always the same as baseUrl.\n. @jason0x43 yes, that\u2019s the necessary fix.\n. This probably won\u2019t be fixed until https://github.com/theintern/intern/tree/testable-wd lands, but I\u2019m excited to see people trying to make it work today.\n. Dear friends,\nWe\u2019re now using https://github.com/theintern/leadfoot for functional testing. I added the transferPromiseness to that code, but I am not going to have time to test it before we go to RC. Could you please give it a try and let me know how it works and/or open a PR with tests on the Leadfoot repo? Otherwise I will probably just have to dig out the code and leave it for 2.1.\nThanks!\n. I\u2019m happy to report that the chai-as-promised transference code works great in Intern 2. You will need to run chai.use(chaiAsPromised); chai.should(); to set up the hooks (since they modify globals they will probably always be opt-in).\n. Reporter configurability is something that we want to do and something which has come up in the past, but not something that is possible yet. Is it OK to be able to configure from within your Intern configuration file, or does it have to be in the Gruntfile?\n. Reporters in Intern 3 are configurable. For reporters that support writing to files, you\u2019ll be able to specify the output file with the filename option, and output directory using directory. For coverage reporters you can specify the low/high threshold using the watermarks option. I\u2019m working on updating the user guide now for the new reporters so you\u2019ll be able to go there to see what to do when Intern 3 is released.\n. I\u2019ve added it. Thanks!\n. yeah, good call. reading the things i once wrote was apparently too much effort. :)\n. Is this ready? If it\u2019s not ready, please close the PR and submit a new one when it\u2019s ready.\n. Notifications aren\u2019t provided when you make new commits to the PR so unless you comment asking for additional feedback, none of us are likely to notice that there are additional changes or know to provide feedback. Since the last PR was left open for a long time I didn\u2019t want this one to also sit open and grow stale. It didn\u2019t seem like there was any clear path to land here which is why I asked if it was ready. I guess I was not clear enough that I was asking if it was ready for anyone to look at it. I have no idea if \u201cWIP\u201d means \u201cI\u2019m still working on it but here\u2019s a preview\u201d, or \u201cI think this should go into the program as-is but I need feedback\u201d, or what. I interpret it as \u201chere is a thing I am working on, you can comment if you want but I will let you know when it is ready for a proper review\u201d. We\u2019ll continue to work on the PR workflow. Discussion of the feature will continue at #13.\n. I\u2019d strongly recommend using setImplicitWaitTimeout instead of any of the waitFor methods. Setting the implicit wait timeout is part of the official WebDriver API and allows the Selenium driver to efficiently and accurately wait for and return an element once it exists; waitFor methods were added by the author of wd and perform the same commands against the Selenium server until a timeout occurs or a non-error occurs; I can only surmise that the waitFor commands exist and work this way because they weren\u2019t aware of the implicit wait system.\n. setImplicitWaitTimeout can be called multiple times, so I am not sure what it means that \u201cfiner\u201d control is provided by the waitFor methods. They could just as easily use setImplicitWaitTimeout themselves and be equivalent, but instead, they just hammer the server with extra requests. Since many people are going to be operating against a remote server (Sauce Labs), and since the waitFor commands pollute the Selenium log with their polling calls, it\u2019s still my recommendation to use setImplicitWaitTimeout until the waitFor commands use setImplicitWaitTimeout themselves (if that ever happens).\n. > There are also times when implicit waits can be less efficient (or at least slower), such as when checking for element deletion.\nCould you please explain this statement and/or provide a source for this information?\n. OK. In that case, I can see what is being said but I would not say it is \u201cmore efficient\u201d, since there is no method in the WebDriver API for waiting until an element is absent and the polling for an element to disappear is a hack. A more efficient and less hacky solution than repeatedly polling an elementBy* method would be to use executeAsync to watch on the browser-side until the element disappears.\nIn any case, this is tangential to the OP. @kornelc, waitForCondition code executes in the browser, and all the rest of the code you wrote executes in the Node.js runner, so no, your code won\u2019t work. If you put it all in an executeAsync, then it would do what you want.\nIf you have any questions in the future, please try posting them on Stack Overflow instead, since the bug tracker isn\u2019t for help. Take a look at the CONTRIBUTING.md for more information. Thanks!\n. This is a defect of the fallback dojo/has module in Dojo 1, which doesn\u2019t define all the rules that the dojo.js loader defines, not a bug in Intern. I will raise a bug in Dojo and address it there.\n. This has been reported upstream at https://bugs.dojotoolkit.org/ticket/17741 and will be fixed in the next version of Dojo. Thanks for the report!\n. This should be fixed for master branch as of https://github.com/csnover/dojo2-core/commit/e7ab42d3996d506c2afb544b0b79b856c9e5b294 which should be included in the next release of Intern, whichever that is (1.4.x, or 1.5).\n. This seems to be a duplicate of #153?\n. Instrumentation is already optional; excludeInstrumentation: /./ is the intended way to globally disable all instrumentation. \u201cProvide one correct way to do each thing, instead of multiple ways to do the same thing\u201d is a good tenet, and the current mechanism isn\u2019t at all hard to use.\nIt sounds to me like the real issue here is that line numbers in stack traces become confusing because instrumentation changes lines of code. In that case, we should either fix the instrumentation to not change the line numbers, or figure out a way to correct the line numbers in the traces.\n. I strongly disagree. That is disabling by default one of the key features of the tool, the feature which we promote very heavily on our home page.\n. If you want to set a default, set it to /(?:^|\\/)(?:node_modules|bower_components)\\//.\n. If the issue is that the stack trace line numbers are wrong, fix those instead\n. Expanding the surface of an API should never be done unless there is a significant benefit by doing so (adding something that was impossible before, significantly reducing the pain of performing a non-trivial task, etc.). You can\u2019t remove API later without breaking people that rely on the API, so you must exercise extreme discipline and not add new things willy nilly. Joshua Bloch\u2019s keynote slides on API design are a good reference here. In this specific case, creating a new API because you want to temporarily try to paper over something else that\u2019s not working in an expected manner is wrong. Please fix the actual problem.\nI would recommend closing this issue as invalid, open a new one that is about how the instrumentation is causing line numbers in stack traces to shift confusingly, then fix that issue.\n. The real fix for this is to implement https://github.com/theintern/intern/issues/120\n. This should be fixed as of https://github.com/theintern/intern/commit/a190825afe99972f0cc4ef4ffad29432f0de5c82. Yaaaaay!\n. Fixed in https://github.com/theintern/intern/commit/c3337f982443aa5537bf6eb7098b58f1b2a1d1b4 and https://github.com/csnover/dojo2-core/commit/0de22385174304fb0dc7a27eb6c2eabe9d8bc0d1\n. Thanks for the report, but this is not a bug. You\u2019ve created a circular reference (aa -> bb -> aa). In order to avoid an infinite loop, Node.js will resolve aa to an empty object for bb. The same thing happens if you try to load module aa directly in Node.js, without using Intern:\n```\n$ node\n\nrequire('./aa').test()\nWhat aa is to bb: {}\n```\n\nYou have a few options about how to resolve this issue, in order of preference:\n1. Don\u2019t create circular dependencies\n2. Set properties on the implicitly created exports object directly instead of setting a new exports object with module.exports (exports.test = function () { return bb.test(); }; etc.)\n3. Set module.exports = aa; before calling require('./bb')\n. Thank you for the report, but this is not really a bug as described. numCallsUntilResolution isn\u2019t an equivalent for an assertion on the number of times a callback is invoked, just an internal counter after which point the promise is resolved.\nOnce a test promise is resolved, the test is \u201cdone\u201d. It\u2019s the same situation in the case of a test that has a timeout and a long-running asynchronous operation that takes longer than the timeout. The test runner can\u2019t sit around and wait forever just in case an asynchronous operation is not actually finished at the time you\u2019ve told the test runner that your asynchronous operation is finished.\nWith regards to the specific matter of passing a too-low numCallsUntilResolution argument, we could just only resolve the promise when the value is equal, which would stop the spurious error. Some other option would be to introduce some sort of pass-to-fail event, where if a test that already is supposed to be done comes back and awakens itself, it\u2019s switched to a fail state, but depending upon how distantly that occurs it\u2019s potentially going to be just as destructive as the current way things work.\n. We\u2019ll consider a patch for this if you would like to submit one but we have no other plans to work on changing this API at this time. Thanks!\n. Landed in 9ad4964660652aa20dce4a6449c2be442f775365. Thanks!\n. Commited in 466ac3b6017f4767f9724e57dc798a3f3ae7e63a. Thanks!\n. Looks like 0.2.3 should have been 0.3.0. Well, incompatibilities like these just affirm that the testable-wd branch is probably going to be a good long-term solution. Let me know what the damage is and we\u2019ll look at reverting.\n. Hm. That sounds weird, since there is a waitForCondition test in the basic functional tests that passes. Which specific waitFor methods are you reporting failures on?\n. Are you able to provide the HTML of the page in question as a gist? You can send it to me privately if it is sensitive.\n. Yeah, sorry. We do our best to provide reasonable error messaging to users, but unfortunately some of our dependencies do not do the same. For either the next release or the next-next release, Sauce Connect will be replaced with the newly released Sauce Connect 4 which doesn\u2019t use Java.\n. I don\u2019t understand the purpose of this PR; Sauce Connect 4 doesn\u2019t seem to generate logs by default so there\u2019s no need to ignore anything.\n. No, it was generated whenever you ran Sauce-Connect.jar.\n. Thank you for your request, but the bug tracker is not a support forum. Please check out how you can get help by going to the wiki and reading the Getting Support page. Thanks!\n. When a test fails, the error object is placed at test.error so you should be able to retrieve it and get whatever information you need within a custom reporter. As @jason0x43 states, the newer version of WD.js on the master branch improves its error reporting, though it also might introduce some broken stuff. In total, WD.js error reporting make me hulk rage and I am working on a replacement in the testable-wd branch to solve things like this once and for all.\nIf you any have questions in the future please take a look at our documentation on getting support. This issue tracker is for bugs and feature requests; questions about usage are typically answered at Stack Overflow or through one of our paid support plans for people that need priority support. Thanks!\n. This is a duplicate of #127.\n. As @dylans noted, support for legacy 3-argument AMD signature was added to the loader for Intern 1.6. If you are using Intern 1.5, you can use an alternative loader with useLoader that supports this signature. However, as noted, the 3-argument signature is legacy and strongly discouraged when authoring any AMD modules, so if you are doing it yourself, you should remove it from your code. :)\n. Thank you for your question. Please be aware the bug tracker is not a support forum. You can check out where to get help by going to the wiki and reading the Getting Support page. Information about test timeouts\u2014which are separate from WebDriver timeouts\u2014also exists in the Writing Tests page in the wiki. Thanks!\n. This is possible as of Intern 1.6 by passing and using custom arguments.\n. Fixed in 7e2c546e4df970caca4a81ea13a70264a95b424f\n. This information is already covered in both the tutorial and the documentation on Running Intern.\n. @jason0x43 The issue is for people that are not us that are using Intern in conjunction with Travis-CI, with secure environment variables storing their own Sauce Labs access key.\n. This looks great! I\u2019m excited to review it soon.\n. @treasonx did you want to continue to work on this or have it taken over by someone else?\n. Good news! Once the refactor-execution branch is finished and landed for Intern 3, all reporters in Intern will become configurable. As such I am going to close this now in order to reduce the number of outstanding PRs. Thank you for your patches!\n. This should involve just adding the call to hook require in addition to the existing hook to runInThisContext, though might also require some meddling with dojo/node since I believe it holds its reference to require in closure from the time it is loaded. It presumably depends at which level the hook attaches itself to Node.js\u2019s module loader.\n. Please note the milestone on this issue at the right-hand side is 1.8.\n. Added in b49d8df35386ce6fcec58bcf48bac8d22ff6d877. Thanks!\n. Thanks for your request! The good news is that there is a patch already landed in master that improves error reporting that will be in the next minor release in a couple days. You can try it by changing your Intern dependency to git+https://github.com/theintern/intern.git#master.\nIn the next major release, we\u2019re going to be replacing WD.js with a better, more maintainable, more robust, more well-documented WebDriver library with much better error reporting. Since we will be providing a compatibility layer for people that already have written functional tests with the current API, we don\u2019t want to update to any of the newer versions of WD as they all add even more API calls and new signatures that we\u2019d then have to support in the compatibility layer. You can take a look at the testable-wd branch if you\u2019d like to see what this new code looks like.\n. Fixed in 12641fcdbde6a3e84e7d1013a8dfd2c8e4d904ae. A function can now be passed to registerSuite and it will call the function once per environment and use the return value as the set of tests to register.\n. Thanks for the report, but this is not an Intern bug. Please see https://code.google.com/p/chromedriver/issues/detail?id=762 for details on the upstream issue that is caused by an update to Chrome 34, not Intern 1.7. Testing against Chrome 33, the test case works as expected.\n. I verified at the time that this was reported that the test case as provided works in Intern 1.7 with Chrome 33, and does not work in Intern 1.7 with Chrome 34. If you have a test case that does not work in Intern 1.7 with Chrome 33, please let me know.\n. I personally have zero interest in this. If you want to retry after a failure and you are using Travis, you can just prefix your test commands today with travis_retry.\n. Do you have a test case? What browser(s) is this happening in? What WebDriver server are you running against? If Chrome, what version of ChromeDriver? If IE, what version of IEDriverServer?\n. Thanks for the report, but I\u2019m not able to reproduce any issue retrieving the hash of a URL. With Firefox 29.0.1 on Mac OS 10.9 running Selenium 2.41.0, the following test passes:\njs\nreturn this.remote\n    .get('http://example.com')\n    .execute('window.location.hash = \"#a\"')\n    .url()\n    .then(function (url) {\n        assert.include(url, '#a');\n    });\nIf you could modify this test case in a way that causes it to fail, then we can continue to troubleshoot the issue.\n. Thanks for the report! We\u2019re aware of this limitation and are tracking its resolution in #123. Let us know if there is anything else we can do!\n. Your code always has to be within the configured baseUrl path because that is the directory that is served by the instrumentation server, so I\u2019m not entirely sure how what you are asking for could ever work. Could you please explain your thoughts on how such a mechanism would operate, where you can load files outside of baseUrl that need to then be excluded by the server that does not serve any files outside of baseUrl?\n. The intern package gets defined with a special path (/__intern/), so it works when you use the test runner, but no other custom packages that are outside of baseUrl/basePath/proxyUrl will work.\nI\u2019ll close this now since it looks like it was just a misunderstanding, but please let me know if this is not the case.\n. I think that some Selenium drivers are broken and don\u2019t work if you try to right-click, for example https://code.google.com/p/selenium/issues/detail?id=5991. But, I\u2019m not sure if that is the case here. You could try making sure that you have no element context (call end first), since that is the only thing I can think of that might be causing a problem on our end. The next version of Intern comes with a better client library that will 1. verify that it is not a problem on our end, 2. provide a way for us to try to make it work anyway.\n. Since we haven\u2019t received any more information on this issue since it was reported, I am going to close it for now. When you are able to provide the additional requested information, please send it over and we will re-evaluate the ticket. Thanks!\n. Thanks for the report, but this is not an Intern bug. The loader that comes with Intern is not the loader that comes with Dojo 1, and it does not have the same non-standard APIs of the Dojo 1 loader. If you want to use the Dojo 1 loader, you\u2019ll need to change your useLoader configuration property to point to a different version of the loader.\nIf you have any other questions, please take a look at our getting support wiki page. Thanks!\n. Instead of doing this like this, I\u2019d prefer to implement a skip method and then call skip on tests that don\u2019t match the grep, instead of omitting registration of the tests.\n. Done with review\n. Merged in 00e2cb5e6c3a3ef7869c9b23dd0d4477377a65b0. Thanks!\n. Hi @pknepper and @richardruiter, this branch is under review to be landed but is lower priority than some of our other work. Our plan was to try to get this feature landed for the next major release, but we have had some shift in priority so it may actually end up in the n+1 release. If you want a guarantee that the feature will be introduced in the next release you may sponsor the work to get it finished more quickly. Otherwise, just watch this ticket and you will be the first to know when it\u2019s landed. Thanks for your interest!\n. @richardruiter I mean SitePen is a consulting company, so if you\u2019d like, you can hire us and we will convert your money into new features. :)\n. If the connection to the Sauce Labs REST API times out, it\u2019s almost certainly either that you have a firewall preventing outgoing connections, or Sauce Labs was broken at the time. The code for sending the request to Sauce Labs is not part of Intern.\n. The sauceJobUpdate command doesn\u2019t run through the WebDriver channel so this has nothing to do with Sauce Connect. It makes a standard HTTP request to http://:@saucelabs.com/rest/v1//jobs/ to store the result data.\n. r+ Feel free to land in master once the typos are fixed.\n. We\u2019re making no more updates to these dependencies, which are removed in Intern 2.0.\n. Hi everyone,\nI would just like to take a moment to remind you that the bug tracker is not a help desk or support forum, so please take these discussions to Stack Overflow. Thank you!\n. Hi,\nThanks for the pull request!\nUnfortunately, we are not accepting any PRs that involve changes to WD.js or sauce-connect-launcher at this time as these dependencies are being removed in the next version of Intern.\nFortunately, Intern 2 will use whatever proxy you specify for the tunnel for the back-channel requests to update job state information with the tunnel provider, so this should be resolved anyway in the next release.\n. Our release schedule can be found by going to milestones. However, even if the next release was a long way away (it isn\u2019t), we would not do any updating to WD.js since this would require us to spend a lot of extra effort to shim all the other API changes between 0.2.2 and 0.3.0 for the sake of compatibility, and we don\u2019t want to have to do that. Please feel free to try Intern from the master branch and see how it works for you when configuring the tunnel to use your corporate proxy, hopefully it works well!\n. Thanks for your report, but this is not an Intern bug.\nwaitForElementByName doesn\u2019t return an element, it just waits for one to exist. You actually need to call elementByName('username') after that in order to get the element. This is dumb, but unfortunately both of these methods come directly from the WD.js API. (So does that mostly useless error, which is trying to tell you you are attempting to type but haven\u2019t actually focused on an input element to type into since waitForElementByName didn\u2019t return anything to click on.)\nWe\u2019re removing WD.js in Intern 2 because of stuff like this, so it should be less confusing in the near future as all you will do soon is find the element you are looking for. With regards to the documentation, the replacement library is much more well-documented; preliminary documentation of all available commands of the new library can be found at https://theintern.github.io/leadfoot/Command.html.\nPlease let us know if you have any other questions.\n. Thank you for the report, but this is not an Intern problem.\nAndroidDriver, which SauceLabs is apparently still using, has been discontinued by Selenium for quite some time and is not supported. See https://github.com/theintern/intern/issues/44#issuecomment-31241832. Please use Selendroid. If SauceLabs is still using the discontinued AndroidDriver, they need to upgrade. Intern will not support the old AndroidDriver as it is buggy and no longer supported and the replacement is Selendroid.\n. To be clear, the error that AndroidDriver is having makes it impossible to do anything. It breaks if you send it JavaScript that contains any line breaks.\n. Hey, this looks great! The proxy code is one of those long term goals for improvements, and this is a great first step. As soon as we have finished a ridiculous merge that\u2019s coming soon, I\u2019ll put this in. Thanks!\n. Landed in d2a44c50da9a8960f6cac7f6227977aad72a8cbf. Thanks again!\n. Thanks for your report.\nCalling console methods should not cause a problem. Throwing and not handling an exception during the course of testing, however, will cause Intern to return a non-zero exit code. This will cause Grunt to say \u201cAborted due to warnings\u201d after Intern is done running. If your test run is stopping spontaneously at that point, it\u2019s because your code (or, possibly, some other part of the testing system) has thrown an error without it being handled. Your code should never throw errors that don\u2019t get trapped and handled by you; if it\u2019s coming from your code, this is a leak in either your test code or your application code that needs to be fixed. If it\u2019s coming from Intern, it\u2019s a bug.\nYou indicate that this does not happen when using the \u201cclient runner\u201d, but that could mean either intern-client or intern-runner; could you be more specific which one you are referring to? Could you also please provide the output of the failed run? Thanks!\n. If the error thrown by the loader in that failure case makes its way back up to window.onerror, then it will be treated as a fatal error in both cases, except that the browser client does not have a mechanism for reporting this, so it will look like everything is OK there.\nThere are two underlying issues here:\n1. The module loader needs to be enhanced to properly support returning promises from require calls so that failures can be handled in the usual and customary way. This is known and planned to be fixed in a future version of the loader.\n2. The browser client doesn\u2019t record and report fatal errors the same way that the Node.js client and runner do.\nIn your current scenario, you can either disable this particular test until we\u2019ve had the opportunity to fix the loader, or you can fix the loader yourself and override the normal loader with the fixed loader using useLoader.\n. Because setting window.onload is the only way to register unhandled global failures in browsers, you can temporarily override the value during your tests to avoid the client picking up the intentional failure.\njs\nregisterSuite(function () {\n  var errorHandler;\n  var errorArgs;\n  return {\n    setup: function () {\n      errorHandler = window.onerror;\n      window.onerror = function () {\n        errorArgs = Array.prototype.slice.call(arguments, 0);\n      };\n    },\n    teardown: function () {\n      window.onerror = errorHandler;\n    },\n    'bad load': function () {\n      // ...\n      assert.isDefined(errorArgs);\n      // ...\n    }\n  };\n});\n. @nickcmaynard Did the guidance above help? I would like to close this ticket if so. There is another ticket open now regarding making sure the console reporter outputs errors at #213.\n. Thank you for the report, but this is not an Intern bug. Please see comment 5 on the bug report you linked. \u201cThe --ignore-certificate-errors flag is built into Chromedriver.\u201d\nIntern does not set any extra browser-specific capabilities for you when requesting browsers. If you want to change the capabilities, including defaults set by the driver you are using, you need to add them yourself to your configuration\u2019s capabilities or environments property.\n. This is documented, though not especially well, at https://sites.google.com/a/chromium.org/chromedriver/capabilities\n. We are currently in the process of preparing the release of Intern 2. Thank you for your patience as we finalise the documentation. You may clone the wiki and check out commit \\b56dfa629c15fa0a996b4f35eeb8e940bb2c1933 which is the last version of the documentation for the 1.x line. The options you have mentioned no longer exist in Intern 2.\n. Breaking changes such as these happen less than once a year, so we don\u2019t have a policy regarding information notices since it\u2019s so rare. In the future, we will look into providing a longer migration period where obsolete options continue to be listed in the documentation. I apologise for the difficulty that you had over the weekend. All the documentation at this point should be up-to-date with the latest release.\nWith regards to assitance, we would be more than happy to get extra help improving the documentation. If you notice anything that you think can be improved, please feel free to open a ticket with changes. We will migrate to gh-pages sometime in the future instead of the wiki so that you will be able to submit pull requests directly for documentation changes instead.\n. Per the reporters documentation, the console reporter is not intended to work in conjunction with the test runner, so the behaviour in this case is undefined.\nIf there is additional information that you would like to have included in the runner reporter that the console reporter provides, it can be extended, or a new reporter can be provided with that information. We have plans to provide more robust and pretty reporting in the future, but would be happy to evaluate a pull request containing an interim change that would help you and others, if you\u2019d like.\n. Per the reporters documentation, the console reporter is not intended to work in conjunction with the test runner, so the behaviour in this case is undefined. However, currently, the console reporter only outputs test failures; it would probably be in our best interest to have it output fatal errors as well, so I will convert this to an enhancement request.\n. The actual defect that @jason0x43 identified has been reported at https://github.com/theintern/leadfoot/issues/1. In the future, please do not submit issues without a description of the problem, a list of reproduction steps, the expected result, and the actual result. Thank you.\n. Issue migrated to Dig Dug tracker, https://github.com/theintern/digdug/issues/1. Thanks for the report!\n. Actually, I\u2019ll leave this open until it is fixed upstream and the dependencies are updated.\n. Well, we\u2019re not able to support a WebDriver server that doesn\u2019t support the standard execute function for hopefully obvious reasons, so I am not sure we\u2019ll be able to do anything about this. Sauce Labs never had a really functioning iOS testing service; the only driver approaching usability with iOS is ios-driver, and Sauce don\u2019t use it. IPhoneDriver is deprecated, and Appium just isn\u2019t up to the task (it is missing way too many APIs).\n. To confirm, this is a problem with Appium? If so we can merge this into #223.\nOtherwise, there\u2019s no plan to support the deprecated IPhoneDriver that got superseded by ios-driver and Appium, since it\u2019s too broken in other areas to be treated as a useful test environment.\nWith regards to the issue only happening in Sauce Labs cloud specifically, that makes it difficult for us to fix since it\u2019s not a compatibility issue with the driver itself, but an issue with the cloud provider. We have lots of these issues with Sauce, not exclusive to their mobile testing stuff, which is one of the reasons why support for other providers was added in 2.0. I am not sure what our long-term plan needs to be to try to handle issues like these, since their team consistently fails to address known issues or communicate with us in any way.\n. @admc Great that you are aware and looking into it! Could you guys maybe respond now to the ticket that has been open since March about how your monocle proxy is broken (10498)? We asked for a status update on July 28 and have received no response.\n. Yes, a bug at this line: https://github.com/theintern/leadfoot/blob/master/Server.js#L721 (the isFulfilled call is invalid, it should just always call cancel now)\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. I have updated the documentation in the wiki and the tutorial to reflect this. Thanks!\n. The OP is correct, there is no built-in functionalSuites command-line argument. This is a duplicate of #123.\nIt is possible to work around this today with custom arguments.\n. Thanks for the report. This is https://github.com/joyent/node/issues/6041. We can work around it by destroying the read stream manually, in lib/createProxy.\n. I looked into this tonight and actually I can\u2019t see any file handles being retained when I look using lsof. Once the file has finished being transmitted, it\u2019s no longer held open by Node.js. So, I\u2019ll need more information from you in order to reproduce the issue. To start with, right before the test runner crashes, could you please run lsof |grep node? If file handles are being retained you should see a big long list there.\n. (For reference, I tested on both Mac OS 10.9.4 and Linux using Node.js 0.10.29.)\n. And this is only when using the BrowserStack tunnel, not a plain Selenium server, and only when interacting with Safari?\n. Sorry, nobody has been able to reproduce this issue so far. I know that @jason0x43 has been running tests against BrowserStack without a problem, after they recently fixed some issues. Could you please try again and re-report whether the problem still exists?\n. @jfridye That doesn\u2019t sound related, except that it\u2019s a problem with BrowserStack, unless you also get an EMFILE error. Do you?\n. @jfridye Could you open a new issue? I don\u2019t want to confuse two unrelated things. Thanks!\n@kitsonk I\u2019m going to close this for now since I haven\u2019t heard anything since July, if you have time to loop back please let me know. Nobody at SitePen has been able to reproduce the EMFILE problem.\n. During my testing of ios-driver and Selendroid it appeared that these servers would expose all windows, including the native one, through the list of window handles (getAllWindowHandles, getCurrentWindowHandle). Could you please verify this is not the case?\n. Both ios-driver hybrid testing docs and Selendroid hybrid testing docs state to use the window commands to switch between different \u201ccontexts\u201d. There is no need for a separate API. The endpoints specific in that draft appear to be completely redundant.\nSince the documentation for the two supported mobile servers states to use the window commands, I\u2019m going to close this for now, but if you (or anyone) can show that these other endpoints actually do something else, then this can be reopened as a feature request once those endpoints actually make their way into some production software and a spec.\n. getAllWindowHandles returns a Command promise that resolves to an array of strings.\n. Could you please confirm that with the resolution of #216, Appium is working and this request can be closed as well? Thanks!\n. Thank you for verifying. That documentation is about how to run your own servers; it is not a server support list.\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Thanks for the patch! We\u2019re actually planning on replacing the suites selection functionality with a straight grep feature from #195 but I\u2019ll leave this PR open until we land that feature for anyone else that wants to find and copy this patch.\n. I changed my mind, since this allows total exclusion of loading of test modules whereas grep only filters at runtime, I will add it to the repo. It\u2019s a pretty trivial patch, but could you please submit a Dojo Foundation CLA or let me know what name you are already registered under so all authors attributed in code have CLAs on file? Thanks!\n. In d84555720975671b17b7d510234b02ad60b94955\n. Thanks for the patch! Looking forward to many more ;)\n. There is already a handler in all environments for capturing unhandled exceptions and exiting with a non-zero status. The Node.js client and runner will publish the error at /error and then exit immediately with status code 1. The browser client hooks window.onerror and passes the error message back to the runner, which will trigger the hasErrors condition and cause it to exit with a status code 1. If the host browser doesn\u2019t support window.onerror, there is nothing that we can do about it. What browser environment are you testing with?\n. Closing due to no response from OP. If you are still having problems, please answer the question and we\u2019ll reopen. Thanks!\n. This report doesn\u2019t contain any actionable information. Please reopen this issue once you can provide any information at all about the code that is failing or how to reproduce the problem and we\u2019ll look into it. Thanks!\n. Only JSON serialisable data plus special element identifier objects can be passed between a client and server. Functions are not JSON serialisable, so cannot be passed. I will update the documentation to reflect this fact.\n. This is addressed in https://github.com/theintern/leadfoot/commit/1f442105cad6619eef05277f9a78f3ea8ed1cd08. Thanks!\n. According to the lcov manual\u2019s tracefile specification, it\u2019s required to provide the full path to the file for SF. Not providing a full path (as we accidentally did in an earlier version of Intern) is a violation of the tracefile specification and leads to broken tooling.\nIf you are trying to consume an lcov.info output with Coveralls, looks like you need to filter the output using node-coveralls with the correct options.filepath set. A better option would probably be to just generate the Coveralls output with a custom reporter yourself. In any case, this is not a bug in our code, since it is compliant to the lcov tracefile spec. We\u2019d be happy to accept a pull request for a direct Coveralls reporter! :)\n. It is difficult to handle capturing and forwarding configuration errors like these since the reporters aren\u2019t loaded until after the configuration loads. It may be possible to write something so that if the configuration fails to load then we fall back to a barebones default that just tries to dump error information back to the proxy. If you want to try your hand at making such a thing, it would go into client.js, hooking on window.onerror before lib/realClient.js takes it over later. Look at lib/reporters/webdriver.js for how to communicate back to the server.\n. This should be fixed in master.\n. I\u2019ll add something, but a couple of important comparisons: Nightwatch isn\u2019t a unit testing framework. It is only a thing that lets you run functional tests. Intern does both. Nightwatch also does not fix cross-platform defects in Selenium drivers, unlike Intern/Leadfoot, which fixes tens of defects across the different drivers to provide a consistent testing experience.\n. Here are the results, the Web site will be updated on Monday:\n\n\n\nFeature\nIntern\nNightwatch.js\n\n\nIncludes unit testing\nYes\nNo\n\n\nIncludes functional testing\nYes\nYes\n\n\nCode coverage analysis\nYes\nNo\n\n\nTrue browser events\nYes\nYes\n\n\nNative AMD support\nYes\nNo\n\n\nStand-alone browser support\nYes\nNo\n\n\nNode.js support\nYes\nNo\n\n\nSource map support\nYes\nNo\n\n\nAny assertion library\nYes\nNo\n\n\nDefault test interface\nTDD, BDD, object\nObject\n\n\nExtensible test interfaces\nYes\nCommands only\n\n\nExtensible reporters\nYes\nNo\n\n\nAsynchronous support\nPromises\nCallbacks\n\n\nSelenium support\nYes\nIncomplete\n\n\nFixes Selenium bugs\nYes\nNo\n\n\nTests native mobile apps\nYes\nYes\n\n\nBuilt-in CI support\nYes\nPartial\n\n\nBuilt-in Sauce Labs integration\nYes\nNo\n\n\nBuilt-in BrowserStack integration\nYes\nNo\n\n\nBuilt-in TestingBot integration\nYes\nNo\n\n\nBuilt-in Travis CI integration\nYes\nNo\n\n\nGrunt support\nYes\n3rd party\n\n\n\n. The Web site update is live now.\n. Could you try using 'intern/dojo/node!chai-as-promised' as the dependency instead? The documentation is probably wrong.\n. Thanks for verifying! I\u2019ve fixed the documentation.\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. What kind of link are you using to interact with the Intern proxy? Bandwidth, latency?\n. Since nearly all uses of the proxy are through low-latency connections (localhost to another localhost tunnel, or localhost to localhost via reverse proxy, or direct localhost to localhost), I\u2019ll accept this patch as-is.\n. Thanks!\n. \u201crequest\u201d and \u201crequire\u201d are two different words. :)\n. Refs #238\n. OK, great! We have https://github.com/theintern/intern-tutorial and https://github.com/theintern/intern-examples repositories that would be perfect for more examples.\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. There are only three \u201cinternal modules\u201d in AMD: require, exports, and module. If you want to load any other module, like a \u201crequest\u201d module, it has to exist, as @vladikoff noted. Also, in future, please don\u2019t open new issues when you already have an existing issue; GitHub allows you to edit issue descriptions by clicking the pencil icon at the top-right. Thanks!\n. Functional test pages can (and should) provide code coverage data for the code being tested on the page. This is by design. excludeInstrumentation applies to the live instrumenting proxy but not to any code that might exist that was pregenerated with code coverage instrumentation.\n. This is a bug! The Session#moveMouseTo method should be annotated with util.forCommand(fn, { usesElement: true } but is not.\n. This will break a configuration where suites is conditionally set by the configuration for a has('host-browser') or intern/main.mode === 'client', but is empty for the runner. Is that important?\n. This is addressed. Thanks!\n. > Is intern able to make coverage reports from tests running in the browser?\nCode coverage data is retrieved from all browsers when running with intern-runner. See Running Intern.\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Documentation updated, thank you!\n. I\u2019ve pushed a commit upstream that should fix this problem. Please try manually updating the Dojo dependency to dojo/dojo#1.9 and let me know how it works for you.\n. Could you please verify whether the updated dependency addresses this issue for you? Thanks.\n. OK, great! Thanks for testing and letting me know.\n(The \u201clink\u201d was actually not supposed to be a link at all, GitHub linkified that for me; npm 1.1.65+ allows dependencies to GitHub projects to be referenced as \"user/project#commitish\", so it was just a pointer to the latest commit on the 1.9 branch.)\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Yeah, unfortunately, I haven\u2019t managed to come up with a better way to do this. Using process.cwd() is natural and makes sense in 75% of cases (intern-client Node.js, intern-runner unit tests, intern-runner functional tests), and running the browser client directly is the odd man out. I\u2019d like to make things surrounding base path/base URL usage clearer and easier for people, especially those that don\u2019t follow the recommended directory structure, but I\u2019m not sure offhand what would work.\n. Unless someone can think of some other acceptable options that can allow us to harmonise this configuration automatically, I\u2019ll just mark this as a documentation issue for now.\n. What did you set your proxyUrl to? I don\u2019t understand why \u201c/my/webserver/location/\u201d parts are showing up in the generated URLs.\n. I guess that the baseUrl argument that gets passed to the client.html needs to contain the path-part from proxyUrl? Not sure what else needs to change, if anything, with regards to the /__intern/ path.\n. Please address the feedback and I will land this PR. Thanks!\n. Have you modified client.html in any way? Are you using the Geezer edition?\n. Sorry for the delay\u2014\nI am very confused as to how you could be encountering a condition where the document.body does not exist; there is not even any body element that needs to be processed in the document! (This is valid per HTML5; the browser is responsible for generating an empty body.) Beyond that, the loading and processing of everything else involves at least one event loop that guarantees the DOM parser has time to finish.\nMaybe you can try adding an explicit <body> the client.html and see if that causes it to stop happening? Otherwise I would rather move the initial setting of the suiteNode into the start method, but even still\u2026we\u2019ve run quite a few tests and I would think this would come up with more regularity if it was an Intern/Intern+IE issue.\nWith regards to the domReady module, it\u2019s not actually implemented in dojo2-core and won\u2019t work right.\n. I\u2019m going to close this ticket right now since we are preparing a release and I haven\u2019t heard back in over a week, but please feel free to respond with answers to the above if this is still an issue and we\u2019ll reopen. Thanks!\n. URL retrieval requests are the heartbeat command to prevent the connection from being closed during unit tests, which do not communicate via the WebDriver channel. A failure to transmit a /client/end message from the remote unit test suite will cause the runner to never proceed to functional testing.\nOne possible mitigation strategy to avoid an infinite wait would be to use an execute call instead of a URL retrieval to poll for a property of the unit testing system, to verify whether or not it thinks it is still running. This will result in the maximum duration of a failed unit test run to be equal to the length of the heartbeat interval, assuming that the unit test framework has not failed so catastrophically that it is not capable of even updating a flag. However, it will not fix the intermittent test failure issue; if the heartbeat interval becomes responsible for killing the unit testing session, that would need to be recorded as a failure, since it is outside the normal operating parameters of the system.\n. (Also, any intermittent failure with a service provider like this is likely to be an issue with the provider and not anything that can be addressed with Intern, but if you can provide any evidence or detail that this is not the case that would be great.)\n. @jason0x43 If you find some time in the next couple weeks could you reach out to @BrowserStack about this? (Or maybe they notice the @mention and come around :)) I am not sure what we can do about this\u2026 404 is technically not a permanent error, but I don\u2019t feel like hacking in retransmission to the reporter since the provider should be guaranteeing correct transit through their tunnel.\n. The downside is that I really dislike having to write more code because other people can\u2019t write code that works. :((((((((((\nNo, any downside is mostly just an argument based around the accrual of technical debt and the best use of limited resources.\n1. It is easier to solve a problem closer to the source. Stop dumping waste into the river, don\u2019t try to filter the sewage 100 miles downstream\n2. It takes a lot of time to figure out what is wrong and reliably fix it, which takes away from what little valuable time we have that we could spend on amazing new features and dealing with our own technical debt\n3. In some cases (probably not this one), we accidentally break things when it is fixed upstream due to an edge condition in the workaround that we failed to account for (shout out to my homey user-agent sniffing)\nThere are some secondary arguments about slippery slopes (what is the line that we absolutely do not cross, and who gets to make that judgment?) and giving unfair preferential treatment to groups just because they are large, rather than because they are good (a personal pet peeve) but they don\u2019t apply directly to this situation.\n. I haven\u2019t heard about this being a problem in quite a while so I am going to close this. Please feel free to open a new ticket or reply with reproduction case if this is still a problem!\n. Please try increasing RequireJS\u2019s timeout configuration property and try again. The instrumentation for code coverage can take some amount of time for large scripts, especially if the machine that Intern is running on is slow or overloaded. This is not a bug in Intern but rather an incorrect default assumption in RequireJS about how long it might take for a module to load. Please let me know how it works.\n. console.error doesn\u2019t throw an error or halt execution. If the reporter hasn\u2019t started yet because RequireJS has decided that loading has failed, then the messages can\u2019t be transmitted back to the runner to notify it of a load failure, since a reporter does that.\nI think that the client tries to load the reporter module in parallel with everything else, which isn\u2019t necessary and causes problems like this, so if we do that loading in two stages, reporting of test module load failures should become more reliable.\n. Do you happen to know offhand why we even put that extra slash on the end?\n. Were you editing any of your source code when the problem occurred? There should be no non-determinism in the code responsible for generating the maps, so it would either need to be a problem with input changing or\u2026I don\u2019t know what.\n. I\u2019m going to close this ticket right now since we are preparing a release and I haven\u2019t heard back in over a week, but please feel free to respond with answers to the above if this is still an issue and we\u2019ll reopen. Thanks!\n. As mentioned on IRC I\u2019d be happy to see if we can come up with something. @jason0x43 should also be added.\n. We\u2019ve introduced a new reporter interface for Intern 3. Unfortunately the js-reporters thing kind of fizzled out, but we can revisit this in the future if anything ends up coming out of that project.\n. We have an internal ticket to improve the reporting interface so that it looks more like this during a run:\n```\ntests/selftest.intern\nTunnel: Ready\nTotal: [\u2714\ufe0e~\u2714\ufe0e\u2714\ufe0e\u00d7\u2714\ufe0e/             ]  32/100\nPassed: 30   Failed: 1    Skipped: 1\nIE 9:       Unit [\u2714\ufe0e~\u2714\ufe0e\u00d7\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e] 100/100, 2 fail, 1 skip\nCov 100/89% Func [\u2714\ufe0e~\u2714\ufe0e\u00d7\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e\u2714\ufe0e] 100/100, 2 fail, 1 skip\nIE 10:      Unit [\u2714\ufe0e~\u2714\ufe0e\u00d7\u2714\ufe0e\u2714\ufe0e/   ]  65/100, 2 fail, 1 skip\n            Func [          ]   0/100\nFx 24.0.1:  Unit [/         ]   2/100\n            Func [          ]   0/100\nChr 32:     Starting\nSaf 7:      Pending\nAndroid 19: Pending\n```\n(ignore the bad maths)\n\u2026and then after the run is finished, dumps out all the test results. I was planning on outputting only the skips and fails messages, but if it\u2019s important to show the completed tests too, it can certainly do that.\n. Updated, thanks!\n. Thanks for the report, but this isn\u2019t a bug in Intern. \u201cAborted due to warnings\u201d comes from Grunt. So does the last error. All we do in the Intern task is spawn a process and pass output data from the process to grunt.log and grunt.event.emit.\n. I guess I was having a bad day. :disappointed: \n. This is by design. The unit testing environment needs to be as unmolested as possible for components under test. That means that extra CSS or extra DOM elements introduced by the HTML reporter cannot exist until the end of testing.\n. Why does the normal lcov reporter not just work with the \u201cgit repo root directory\u201d option set correctly inside the coveralls UI?\n. Closing due to no response from the OP in a week. If you have time to answer the above question, we\u2019ll reopen the PR and discuss further. Thanks!\n. The mode property in runner.js was already set before the config loads.\n. Anything loaded in the browser is always mode \"client\". This patch ensures that. Mode \"runner\" is for code running in the test runner, not the client via the test runner.\n. > If that is the case, then I guess this method isn't a solution to the problem of distinguishing between unit tests executed manually via client.html and those executed via the the test runner.\nWhat are you trying to do in this case? Reporters and baseUrl are both overridden when it is a runner-controlled client.html.\nmode is at least used right now by reporters that run in both the client and in the runner, in order to determine where they are and change operation appropriately (see the combined reporter for an example).\n. I see. useLoader paths are definitely no fun. I have an internal ticket to try to figure out how to fix them. I feel like I\u2019d like to just make it so that they are relative to wherever the configuration file is, but I am not sure if that is the right solution.\n. For the interim you could check location.pathname.indexOf('/__intern/') > -1?\n. There is no webdriver property in Intern 2.\n. @cloudbring please see the tunnelOptions configuration setting, which already does what you want.\n. Configuration related to reporters is an unresolved issue, see #181, that unfortunately probably needs to be addressed before this can be properly solved. I\u2019m not so sure about exposing that internal function, and would probably prefer to address this by adding configurability to the existing set of coverage reporters. It sounds like you have what you need today, at least, with your custom reporter; is there any special pressure that you have right now to get something final?\n. Probably in two releases cycles from now. Note that it\u2019s actually not strictly necessary to use the same instrumenter that the rest of Intern uses, you can just create and use a new one to generate empty coverage objects.\n. This PR wouldn\u2019t work right, it causes the suites to load to become [ '' ]. I submitted a replacement patch in be9753c.\n. Sorry, you\u2019re right, I guess I must have accidentally combined this and the other bug with functionalSuites not coercing in my brain. :clap:\n. Can we just do the same thing that we do at runner.js:111 for functionalSuites?\n. I did some reorganisation in the other ticket (#268) that invalidated this PR for the master branch (sorry!), to harmonize the direction in which configuration overrides were applied (the existing configuration override went from config to args, then the functionalSuites one went from args to config; I switched that back to override args, and look forward to having an opportunity to pave over client.js/runner.js :)).\n. uch, bughancements, do I land you in patch releases or don\u2019t i \u10da(\u0ca0\u76ca\u0ca0\u10da)\n. npm is not generating the symlink, we are, because Node.js doesn\u2019t care about browsers and so expects that you\u2019re always going to be using the node_modules path walking package resolution. This is done in support/fixdeps.js. What is the wrong symlink that is being generated?\n. Is the symlink at /project/node_modules/intern/node_modules/chai correctly pointing to /project/node_modules/chai?\n. I\u2019m not able to reproduce this issue. With the following reproduction steps on Mac OS 10.9 or Linux, everything works fine:\n\nInstall Chai & Intern to new package:\n\nbash\nmkdir root\necho '{\"name\":\"foo\"}' > package.json\nnpm install chai@1.9.1 --save-dev\nnpm install intern --save-dev\nmkdir tests\ncp node_modules/intern/tests/example.intern.js tests/intern.js\n\nMake test file tests/test.js that uses Chai:\n\njs\ndefine([ 'intern!object', 'intern/chai!assert' ], function (registerSuite, assert) {\n  registerSuite({\n    name: 'test',\n    'does chai work?': function () {\n      assert.ok('yes');\n    }\n  });\n});\n\nAdd 'tests' package to tests/intern.js\nAdd 'tests/test' suite to tests/intern.js\nRun node_modules/.bin/intern-client config=tests/intern\n\nResult:\nPASS: main - test - does chai work? (2ms)\n0/1 tests failed\n0/1 tests failed\nCould you please provide a failing test case? Thanks!\n. Good catch! This value from args needs to be coerced to an array in runner.js.\n. The arguments from the runner/Grunt task are passed to the client by ClientSuite, so will override correctly in lib/realClient.js. What makes you think they are being ignored? Do you have a test case? Can you please triple-check that you didn\u2019t typo \"suites\" as \"suits\" like in the topic and description of this ticket? Thanks!\n. Please try adding followRedirects: false to leadfoot/Server.js:42 and let me know if it fixes the problem.\n. It was only very lightly tested against Jenkins. None of the people that originally requested the reporter responded to my request to put it through its paces, and I unfortunately didn\u2019t have time to do much other than a cursory check to make sure it was at least showing up. I think some other people wanted the JUnit format so it would work with SonarQube; some people said they needed classname to point to the test file or something, but I haven\u2019t heard anything more from that group. I think it can be ignored and we can just assume for now that the primary target is Jenkins.\n. @Blasz were you still planning on sending a PR for this?\n. @kennytrytek-wf The internal workings of Intern are not restricted to the limitations of any output format. The information in the tutorial regarding subsuites is correct.\nAlso, there are at least two JUnit XSDs floating around on the Web, neither of which are written as official or authoritative, and this closed Jenkins ticket indicated that JUnit itself supports nesting, that some other producers create nested files, and that Jenkins was enhanced to support such nested suites.\nIf the suites need to be flattened in the output XML in order to be maximally compatible, please submit a patch. Thanks!\n. Sorry, I meant \u201cflattened\u201d. :)\n. Thanks for writing! Yes, such a feature exists.\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. \nThank you again for your interest!\n. Duplicate of #272.\n. There\u2019s an example of using Intern with AngularJS at https://github.com/theintern/intern-examples/tree/master/angularjs-example. This is linked from the main documentation page under \u201cIntegration examples\u201d. If there is an issue with the Angular example could you please open a ticket writing the specific issue in the examples repository? Thanks!\n. See https://github.com/theintern/intern/wiki/Configuring-Intern#capabilities and https://github.com/theintern/intern/issues/210#issuecomment-46800826 on how to set chrome\u2019s args capabilities. Thanks!\n. No, it is not a bug. Yes, it is feature detection. The feature detection normally does not take more than a few seconds unless you\u2019re on a high-latency link.\n(Also, please review the contribution guidelines. Thanks!)\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nOnce an Istanbul release supports ES6 we will be sure to upgrade dependencies to the supported version so it will Just Work.\nThank you again for your interest!\n. If you want to run tests and just not have code coverage for the time being (as you\u2019d get with any other testing system), you can set excludeInstrumentation: true in Intern 3 which will bypass the code instrumenter entirely. You can also probably just set it to /./ in Intern 2.\nIf full ES6 code instrumentation is something you want I am sure that the esprima/istanbul folks would be happy to receive patches, but I don\u2019t think the native implementations are ready for primetime yet.\n. What do you expect the result to be when you pass a generator instead of a function?\n. We can probably support a generator-like function natively but it should be done under a new enhancement request. The API right now doesn\u2019t say you can pass a generator, only a standard function that returns a promise.\n. I opened a separate ticket at #445 for tracking the Istanbul update.\n. Deprecated by #301.\n. The assert module is supposed to match the behaviour of Chai. Does it not?\n. Just removing the constructor check causes these test failures:\n```\nFAIL: deepEqual /regexp/ (2ms)\nAssertionError: expected /a/ to not deeply equal {}\nFAIL: deepEqual (Date) (3ms)\nAssertionError: expected Sun, 03 Mar 1901 00:00:00 GMT to not deeply equal {}\n```\nI\u2019d have to do some more digging to determine what different things Chai is doing in its deep equality code.\n. Fixed in 2395e3d7397576281a3feb7f143beec314020573\n. CI failure\n. Fixed the failure. That was some crazy complicated prototype/constructor chain walking when the apparent fix seemed to be to just use hasOwnProperty so @jason0x43 could you take a peek to verify?\n. @jason0x43 It is impossible to cover this case 100%. Consider:\njs\nfunction Btor() {}\nBtor.prototype = {\n  constructor: Btor\n};\nThe implicit value of Btor.prototype.constructor is Btor. The explicitly set value is also Btor. There\u2019s no way to tell the difference in browsers that make the property name non-enumerable, since the only thing being changed here in ES5 browsers is the enumerable flag of the constructor property, so the behaviour will have to be different in DontEnum bugged environments since we can\u2019t tell that someone did this vs the implicit value.\nI\u2019ve added another test case with the inheritance chain you described above and made some tweaks to the key enumeration function and the test suite is passing, so I think that\u2019s all that can be done.\n. Thanks!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. \nThank you again for your interest!\n. The async mechanism for suites would be different than the async mechanism for tests, though not by much. In suites, the async method would need to be restored after each lifecycle method finished executing. It also would not annotate the suite with isAsync. Off the top of my head I can\u2019t think of any other differences. The uniqueness of the way that the async method works would probably make it suitable for a separate module, since it\u2019s not a utility method. (Utility methods end up in lib/util.js)\n. @jason0x43 it\u2019s for convenience so people do not need to create their own promises to do async stuff in suite methods. it also helps to provide a more consistent api for test suites (i.e. there should be no case where this.async is available in one context and not in another context, even though they both do the same kind of async operation).\n. yes, i think you would want to be able to avoid hangs caused by your suite methods never resolving too.\n. i mean, the Suite ones are slightly different because they are different for each lifecycle method, whereas the Test one is directly associated with just the one test method used by the Test object. but to the end-user they are exposed the same way.\n. well, 1000ms at least :)\nit is just a convenience function to prevent boilerplate like this:\njs\nsetup() {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => { reject(new Error(\"Timed out\")); }, 5000);\n    doTheActualWork().then(\n      (value) => { clearTimeout(timer); resolve(value); },\n      (error) => { clearTimeout(timer); reject(error); }\n    );\n  });\n},\nbeforeEach() {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => { reject(new Error(\"Timed out\")); }, 5000);\n    doTheActualWork().then(\n      (value) => { clearTimeout(timer); resolve(value); },\n      (error) => { clearTimeout(timer); reject(error); }\n    );\n  });\n},\n\u2026\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. Address the registration timing question and this is good to land.\n. :+1: \n. > Remove the error callback for the tunnel.start promise since it duplicates the behavior of the uncaughtException handler.\nUnhandled exceptions aren\u2019t thrown from Dojo\u2019s promises, they are consumed (by instrumentation), so they will not get to uncaughtException.\n. Thanks for writing.\nThe modification to the test case is wrong, \"192.168.0.6:8080/index.html\" is not a URL. If you think this worked with PhantomJS\u2026it didn\u2019t. :)\n. Could you please let us know which documentation indicates that there is a reporter named youtrack that comes with Intern so it can be fixed, since there is no such thing? Thanks!\n. Thanks!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nIn this case, this is probably a Windows configuration issue; the path to your node executable is probably not defined in the PATH for whatever environment npm is running in.\nThank you again for your interest!\n. There\u2019s no hard and fast rule that says it has to be this way, but making it operate differently introduces extra complexity, and some inconsistency, to the way the system handles skipping tests. I think there are arguments that can be made for it to go in either direction, but since it\u2019s easier for it to work the way it is right now, it will probably continue to do so unless someone wants to discuss further and/or sponsor a change.\n. > Could you name at least one argument\nI did name two.\n. I\u2019m happy to accept a patch to address this. The code in Suite#run that makes calls to beforeEach/afterEach can check the grep and avoid making those calls if it doesn\u2019t match.\n. I\u2019m not sure why this is happening only on Travis and not my local environment, maybe because their connections are faster.\nThere is a bug/race condition in the upstream Dojo 2 library where if progress callbacks are scheduled on the same turn as a settlement, or someone attempts to send a progress notification after the promise has settled, the progress callbacks are null and it crashes.\nYou can work around this temporarily with this extra command before running Intern:\nbash\nsed -i -e 's/callbacks = progressCallbacks = null;//' node_modules/intern-geezer/node_modules/digdug/node_modules/dojo/Promise.js\n. Configurable reporters are definitely on our roadmap. The current plan is to implement this for version 3.0. See #141.\n. Nice work. Big improvement from the last IMO, much easier to review and understand.\nI have a couple general questions that hopefully you can answer more quickly than I can check myself:\n- What happens if someone tries to run in so many environments that they run out of space for reporters / have negative room? If the answer is \u201cthings break\u201d, put in a TODO about this edge case to be addressed later.\n- What happens when there are multiple environments and they have been throttled by maxConcurrency? Are all the environments displayed and the pending ones say \u201cPending\u201d or do they just pop into existence later?\n- Why did using /test/new not work? I think I saw you mention somewhere the numbers weren\u2019t matching up, can you go into a little more detail about what is up with that? They should be accurate though I very vaguely recall an issue where we get a couple too many showing up in the runner, IIRC because of the ClientSuite.\n. Landed in 66c1a89e8416441d707291a5c747fcb056315f03\n. Thanks for the report. Yes, this is a known problem when trying to use a directory structure where all the code modules are dumped into a root (in this case app/src) instead of being put in a package. #249 is the existing ticket about this.\nTo make this work, don\u2019t set baseUrl, keep it at your root directory, and define either paths for all your root modules or a package for your modules. Hopefully your modules are using relative paths (they should; if they aren\u2019t you\u2019ll want to fix this in your code right now) in which case you could just define loaderConfig.packages: [ { name: 'app', location: 'app/src' } ] and prefix app/ when you load your application\u2019s modules from your tests.\nClosing this since it is effectively a duplicate of #249.\n. Dear GitHub, I said to close this by 2395e3d7397576281a3feb7f143beec314020573\n. This PR has bitrot and I\u2019d like to get all the other great features from Intern 3 into peoples\u2019 hands so I\u2019m removing it from the milestone from now.\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. This is fixed in master\n. Thanks for the report, but this is not an Intern bug. That error is coming from a Sauce Labs server when contacted by their own tunnel software, so you\u2019ll need to complain at them. I\u2019ve verified that Intern is working fine against Sauce Labs in Windows 8.1 at the moment. Their service has been even more unreliable than usual lately, so this was probably a temporary issue. I would recommend choosing one of the other providers instead, at least until Sauce gets their act together. Thanks!\n. Hi Tom,\nThanks for writing!\nIt sounds like there are actually two things you want here. One, a server other than Selenium for instantiating browsers on different platforms, and two, the ability to automatically reload/rerun all your tests whenever some of your code changes.\n1. \u201cDon\u2019t use Selenium\u201d\n\nI think it's a bad idea to require selenium to automate running the unit tests\n\nIntern supports any service, device, or platform that implements the WebDriver JSON wire protocol[1][2]. It does not mandate the use of Selenium nor Sauce Labs; if you don\u2019t like these products, you can choose or write an alternative server that implements the WebDriver HTTP endpoints, and Intern will be able to use it.\nMore pertinently, Intern doesn\u2019t control where or how browsers are started; it only requests environments, and does so using the standard WebDriver API. We have no plans to implement an incompatible API for managing browser instances since there is already wide industry support for the WebDriver API, and the WebDriver API already covers this functionality (with much broader support for different environments than we\u2019d ever be able to maintain ourselves).\n\na FF driver bug introduced when evergreen FF updated itself to v 32\nthere's an issue w/ Safari driver after updating Safari \nI still have never gotten the IE driver to run on my PC\n\nAs browser vendors continue to introduce native WebDriver implementations as the Chromium team, IE team, and Mozilla team are doing, compatibility issues such as these will cease to exist since their WebDriver servers will be kept up-to-date with new browser releases. I\u2019m sorry that things are so frequently broken upstream. We don\u2019t have the manpower to make this any better.\n2. \u201cAutomatically re-run my tests\u201d\n\nit would be nice if the Intern shipped w/ a way for me to achieve what I get w/ Karma w/o having to do all that myself for each project.\n\nOK. I don\u2019t use TDD and neither does SitePen so Intern\u2019s internals are not designed to support this mode of operation. It would be very difficult right now to do this without simply using an external Grunt watch task, so my recommendation would be to use an external Grunt watch task to execute intern-runner when files change (or use Karma to load Intern\u2019s client.html with a custom reporter, I guess). I plan to refactor client.js/runner.js to be much less procedurally driven in Intern 4.0, at which point it will be much, much easier to implement rapid reload functionality directly within Intern.\nIt\u2019s not likely that we will implement either of these requests any time soon, given the above, but we would accept proposals/patches/financial sponsorship of the feature if you want to see it done.\nThanks again!\n. The version of ChromeDriver you are using is 4 versions out of date and is only certified to work up to Chrome 34. Could you please make sure you update to the latest version of ChromeDriver? You may also try running directly against ChromeDriver instead of through a Selenium server to remove Selenium/Java as being the problem.\n. Closing due to no response from OP. If you are still having problems, please answer the question and we\u2019ll reopen. Thanks!\n. I note in the Selenium logs it still says chromedriver=2.9.248307, so you probably have more than one ChromeDriver and the old one is the one Selenium is picking up by default.\nSince this issue tracker is for tracking and fixing defects/enhancements in Intern and not problems with Selenium configuration, you might want to check on/re-ask your question on Stack Overflow, where people can tell you what you need to do to correctly configure Selenium server to use the right version of ChromeDriver. Please check the contribution guidelines for more info. Thanks!\n. @agray The issue problem you are encountering has nothing to do with this ticket. Please do a quick read through the first bullet on our contribution guidelines. If you aren\u2019t sure your problem is actually a bug, please ask for help in one of the other support channels first. Thanks!\n. It is possible, there are typings you can use for the moment at https://github.com/dojo/dojo2/blob/master/tests/intern.d.ts\n. TypeScript typings for Intern were added at https://github.com/theintern/intern/commit/2cff175ee479866fcced1ce24b9584488400f062 and will be available in the next release!\n. Is it OK on master branch?\n. Given the previous comments on this ticket and lack of response from the OP I am going to assume this was simply a user error, though I am sure that non-Selenium-initiated page reloads will cause whatever command was being executed to fail with an exception. For the moment this is something that just needs to be handled by user code, though we can look into adding more mechanisms to Leadfoot to handle such cases in the future if it is needed.\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. If you have a question about how to address one of the open tickets please ask your question in the ticket. This is the second point in the contribution guidelines. Thanks!\n. We would be happy to make the coverage variable a configurable option. If you would like, please submit a PR containing the changes, otherwise we will look at scheduling this work for a future release. Note that we are working on some major refactoring right now so it will be a little while before a PR would be accepted, and it would probably need to be modified a bit once the refactor-execution branch is merged into master. As long as the PR is in place though that makes it a lot easier for us to move forward with finishing the feature.\n. Sorry, I totally missed this since I only double-check the issues list right now.\nWe are enhancing the reporting system to be fully configurable for the next release, so this patch can be used by people as a stop-gap but isn\u2019t likely to make it into any release. You can see progress of our reporting system enhancements in this file in the refactor-execution branch.\n(Basically, reporters will be passed a writable stream, created by the reporting system, so the reporter doesn\u2019t need to know where its output is going to end up.)\n. Good news! Once the refactor-execution branch is finished and landed for Intern 3, all reporters in Intern will become configurable. As such I am going to close this now in order to reduce the number of outstanding PRs. Thank you for your patches!\n. Thank you for the report. In order to take any action, could you please provide a test case that demonstrates this issue?\n. My guess is that you have not excluded your tests from code coverage instrumentation so it is point to line numbers post-instrumentation. https://github.com/theintern/intern/pull/339 might fix this, can you try applying it?\n. I\u2019ve verified the test case you\u2019ve provided works correctly in Intern 3.\n. Presumably the same as this report, https://code.google.com/p/selenium/issues/detail?id=8387\n. Selenium 2.45.0 is finally released with support for Firefox 35+.\n. DalekJS seems to be mostly a dead project, with a \u201cdon\u2019t use this in production\u201d warning on their home page and no substantial updates in two years, so I would just recommend\u2026not using it. Given its relative lack of popularity and the limited amount of space on the Web site this information won\u2019t be presented there, but for the sake of completeness, here are the results (based on reviewing their documentation):\n\n\n\nFeature\nIntern\nDalekJS\n\n\nIncludes unit testing\nYes\nNo\n\n\nIncludes functional testing\nYes\nYes\n\n\nCode coverage analysis\nYes\nNo\n\n\nTrue browser events\nYes\nYes\n\n\nNative AMD support\nYes\nNo\n\n\nStand-alone browser support\nYes\nNo\n\n\nNode.js support\nYes\nNo\n\n\nSource map support\nYes\nNo\n\n\nAny assertion library\nYes\nNo\n\n\nDefault test interface\nTDD, BDD, object\nObject\n\n\nExtensible test interfaces\nYes\nNo\n\n\nExtensible reporters\nYes\nYes\n\n\nAsynchronous support\nPromises\nCustom API\n\n\nSelenium support\nYes\nIncomplete\n\n\nFixes Selenium bugs\nYes\nNo\n\n\nTests native mobile apps\nYes\nYes\n\n\nBuilt-in CI support\nYes\nPartial\n\n\nBuilt-in Sauce Labs integration\nYes\nExtension\n\n\nBuilt-in BrowserStack integration\nYes\nNo\n\n\nBuilt-in TestingBot integration\nYes\nNo\n\n\nBuilt-in Travis CI integration\nYes\nNo\n\n\nGrunt support\nYes\nExtension\n\n\n\n. The tunnel name is NullTunnel, not nullTunnel. The only reason why it happens to work on Mac OS is because that filesystem is case-insensitive by default.\n. This will be resolved; for the moment you should be able to just var dfd = this.async(100); new Promise(\u2026).then(dfd.resolve.bind(dfd), dfd.reject.bind(dfd));. (edit: dfd.resolve(new Promise(\u2026)) won\u2019t work until Intern 3.)\n. Yes, this is a possibility. In the interim you can just write a simple helper function to perform a retry. Something like this might work (not tested):\n``` js\nfunction retry(maxRetries, test) {\n  var numExecutions = 0;\nreturn function () {\n    var self = this;\n    var args = arguments;\nfunction retry(lastError) {\n  var dfd = new Deferred();\n  var promise;\n\n  if (++numExecutions <= maxRetries) {\n    var result;\n    try {\n      result = test.apply(self, args);\n      dfd.resolve(result);\n    }\n    catch (error) {\n      result = error;\n      dfd.reject(result);\n    }\n\n    promise = dfd.promise.otherwise(retry);\n  }\n  else {\n    dfd.reject(lastError);\n    promise = dfd.promise;\n  }\n\n  return promise;\n}\n\nreturn retry();\n\n};\n}\nregisterSuite({\n  foo: retry(3, function () {\n    // this test will be run up to 3 times\n  })\n});\n``\n. https://github.com/theintern/intern/commit/0450494c616d7dcdd1360b6425c7667c1c6513d8\n. yes, it is the aspect call in the interface that does not pass the arguments correctly.\n. I\u2019m finishing unit tests for a fix so it\u2019ll be addressed soon.\n. Oh, just to mention in the meantime if you Just Can\u2019t Wait, this problem is isolated to the test interface so you can write and use a custom one that is fixed temporarily (by changing theaspect` calls).\n. Thanks for the patch! We\u2019re currently focused on getting the refactor-execution branch finished and landed and then will be evaluating all open PRs.\n. Thanks for the patch! We\u2019re currently focused on getting the refactor-execution branch finished and landed and then will be evaluating all open PRs.\n. Hi,\nThe coverage retrieval is not responsible for your test error, the error \u201cno such element\u201d is coming from the previous find element call. The coverage retrieval occurs after your first test fails and your second test starts, as the first thing the next test does is navigates to a new URL, which is when coverage data is retrieved from the remote client. Since the default test timeout is the same as your find timeout (30s) your test fails with a timeout just a little before the time that the find command would actually time out. If you decrease your find timeout you will see that instead of a timeout error it will be a NoSuchElement error on the line above your first comment.\n. Karma is already in the comparison table on the Web site. Selenium client libraries aren\u2019t testing frameworks, so aren\u2019t comparable in that way.\n. > I'm trying to improve docs\nThanks! I appreciate that.\n\nselenium-webdriver contain mocha integration in BDD style. \n\nIn this case please look to the Mocha comparison.\n\nREPL support ?\n\nI don\u2019t understand what this is meant to be. What are do you want to do in a repl where the testing framework would need to do something special?\n\nMocha and code coverage ?\n\nIt requires preprocessing and is not as good as Intern. The Mocha documentation should tell you about it.\n\nI don't get it why you close the issue answering only one of 3 suggestions with such a quick answer.\n\nThe comparison guide is a marketing tool to show people what features Intern gives you that you can\u2019t get all together in any other framework. It\u2019s just not intended to be an exhaustive comparison of every testing tool, library, and framework.\n. I\u2019m sorry if you were made to feel that way. Did you also ask all of those other projects to compare themselves to Intern? Did they respond in a way that you feel was more appropriate? If so, please send links to their responses and I will try to do that in the future. Thanks!\n. @dylans Looks like it\u2019s more honest because Mocha doesn\u2019t actually support code coverage, even though their documentation claims otherwise, and we made the comparison chart with the faith that the Mocha documentation was accurate. So I\u2019ve gone ahead and updated the comparison chart to say that Mocha does not come with code coverage analysis.\n. I\u2019ll make sure users aren\u2019t able to clobber the built-in star map but just FYI you should probably be using paths since you are trying to remap module IDs to different physical paths. (Probably so should Intern, but at some point I think there was a reason why node_modules was being treated as part of the module ID.)\n. It looks like there might be a bug in the built-in loader, I still need to investigate; you might try using useLoader to switch to the Dojo 1 loader in the meantime. Look to dojo-boilerplate to learn how to do this.\n. It looks like I am not going to have time to investigate this for quite a while, so I would definitely appreciate it if anyone could work on tracking down what is going on here.\n. @brakon That error isn\u2019t even close to the same as the one in the OP? Why do you think it has anything to do with loading Node.js modules? The loading has finished successfully by that point, something in your code is passing undefined as a callback to a transform stream, which is probably a bug that would be fixed if you were using the latest version of findatag instead of 0.0.9.\n. @brakon The issue you are describing has nothing to do with the original report in this ticket. Please feel free to create a new ticket, though what you say is happening would only happen if that other module was dynamically loaded (i.e. not in the factory function of the dependent module) and there is no way for us to guard against that, so I don\u2019t think there is any action that we could take.\n. Closing due to no response from OP. Please let us know if this is still a problem by answering the earlier questions and we will reopen the ticket. Thanks!\n. You can set the timeout by setting this.timeout from within a test. Is there something more that you need?\n. Thanks for the patch! We\u2019re currently focused on getting the refactor-execution branch finished and landed and then will be evaluating all open PRs.\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. OK, twice? I swear I do know how asynchronous is spelled, this is just embarrassing\u2026 thanks for the fix (again)!\n. I think this change really is a wise one.\nhttp://www.sadtrombone.com/\nThanks for your help!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. According to a Travis engineer the only ANSI codes that work are colours, \\r, and Clear Line.\n. Because the default runner reporter is ugly and confusing.\n. I just updated the Runner reporter for now, this can be revisited later if someone wants to try.\n. There are only two places in the code that use excludeInstrumentation and in both cases it should be easy to just run .replace(/\\\\/g, '/') on the path being passed to it.\n. The output for coverage reporters is handled by Istanbul so I\u2019m not sure how much control we have there\u2014at least, not without breaking those reporters. Is there a particular problem with the filenames in the coverage reports having backslashes?\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThe information you are requesting is also already in the user guide under the section on conventions.\nThank you again for your interest!\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. Thanks for the report, we\u2019ll take a look the next time someone has a chance!\n. This should be fixed when #312 lands.\n. This should be fixed in master today.\n. We are happy to consider new features that make life easier for Intern users, though as noted by @sholladay you may already call the scrollIntoView function yourself today with execute, and interaction functions that require scrolling will implicitly perform the scroll for you, so it sounds like this is probably due to some other issue with your tests.\nBecause \u201cweird error on the HTML\u201d isn\u2019t enough information for us to start troubleshoot any problem you are having, I am going to close this ticket for now. If you are continuing to experience a problem please definitely post about it on Stack Overflow for us to take a look at. If you would like I can also create an enhancement request for this API in the Leadfoot project, let me know if this would be useful. Thanks!\n. Reporters in Intern 3 will be able to asynchronously pause the flow of the test system in order to do things like request screenshots when a test fails!\n. This has already been fixed in https://github.com/theintern/intern/commit/0450494c616d7dcdd1360b6425c7667c1c6513d8 and will be part of Intern 3!\n. Landed in master\n. I have no objections to adding this at all, anything to improve the user experience is great, but I did also want to confirm you do see the checkbox for hiding all successful tests at the top of the list of tests?\n. Thanks!\n. > \"Runs stand-alone2 in browsers\" - Also karma supports running tests by navigating to url, by default port in 9018\nThis requires you to run a special Karma server which means it is not usable stand-alone, it requires Node.js and other stuff on the server in order to run. Intern doesn\u2019t need anything but your own Web server for basic unit testing in a browser.\n\n\"Can be used with any4 assertion library\" - As far as I know Jasmine does not limit choice of assertion library either. \n\nJasmine\u2019s internal assertion mechanism does not use errors for test result control, it uses calls to addExpectationResult, so you can\u2019t just swap out a different assertion library and have everything work the same as it would if you use Jasmine\u2019s built-in expect method (you will, at least, lose expected/actual details).\n\n\"Lets you write your own custom reporters\" - You can write own reporters or use 3rd party reporters for results collected by karma.\n\nThanks, this is updated.\n. loader is currently destined to change to loaderConfig, and useLoader to loaders, in Intern 3. Is this better?\ngrep is named what it is because that is the name used by other test systems for the same functionality. A regular expression gives you all the power of a list of arrays (use an expression group) plus fuzzy matching so is more powerful than using an array without any added complexity in the test system to support parsing multiple data structures from command-line, etc.\n. OK. Trying to avoid changing any more things for 3.0; if you want to submit a ticket/PR for the other one we can probably do it later.\n. In Intern 3 it\u2019s no longer necessary to use backslashes in Windows, so this config change is not necessary! :+1: \n. No, @dylans, this was a bug introduced in the 2.2 lifecycle. The suites from the configuration aren\u2019t supposed to be put into the arguments but that started happening because the override order was reversed. This won\u2019t happen in 3.0.\n. This has been fixed as part of the refactor for Intern 3!\n. I corrected the code example to match how it was supposed to be, thanks.\n. Thanks for writing!\nThe reported error isn\u2019t an Intern bug, it simply indicates that the server doesn\u2019t support the environment you are trying to test according to the capabilities you specified. You\u2019ll need to contact BrowserStack for information on the correct capabilities to send for mobile testing. If you have any other questions please try asking on Stack Overflow. Thanks!\n. CLA is on file.\n. What does this mean?\n. Thanks!\n. Just to make sure\u2026 are you aware you can use more than one reporter simultaneously, so you could use one of the other reporters to output this information too (like to the console)?\n. OK, since that fixes this issue for you I will close this ticket. The JUnit format doesn\u2019t provide a way to indicate that there was a fatal error like this that prevented the test system from running at all. If someone wants to try to wedge it in (like by outputting suites on a fatal error) I\u2019m happy to accept a pull request but I don\u2019t think the Intern team would commit to doing that work.\n. Well, this is\u2026 awkward.\nThe runner sends data back to the client using dojo/request, which is an abstraction. It doesn\u2019t use an XMLHttpRequest object directly, so we can\u2019t just retain a reference. I guess we\u2019ll need to update dojo/request upstream to accept being passed an XMLHttpRequest constructor, instead of getting it from the global scope, and then have the reporter retain a copy of that constructor and pass it explicitly for every request. It\u2019s doable, but I\u2019m not sure what the timeline would be to actually fix it without a support plan or pull request.\nAs far as the mutation of DOM prototypes goes\u2026 what are you testing that does such a thing? I\u2019m happy to implement more defensiveness in some of the code but I don\u2018t want to introduce complexity for theoretical problems. (Also the DOM prototypes thing, until pretty recently, wasn\u2019t a thing you could even really do, since old IE and Chrome didn\u2019t conform to WebIDL.)\n. Ironic sidenote: dojo/request is actually designed so users can mock requests through it, so its users don\u2019t modify and break global objects that other code relies on\u2026exactly like this case :)\n. Thanks for writing!\nThe reported error isn\u2019t an Intern bug, it simply indicates that you have a permissions problem on your computer. If you have any other questions please try asking on Stack Overflow. Thanks!\n. The creation of a bin symlink is done by npm, according to the bin property in package.json. It\u2019s not anything to do with Intern, except that Intern provides some command-line binaries. Maybe try not installing things into a Dropbox directory. Unfortunately I don\u2019t know what else to tell you.\n. Thanks for writing!\nthis is the global object so you would mock it by changing it in global during testing. If you have any other questions please try asking on Stack Overflow, the issue tracker is really not for questions (see the contribution guidelines). Thanks!\n. I used to have quantitative data but I can\u2019t find it at the moment. Here\u2019s what I can say, just anecdotally:\n1. Since switching to BrowserStack for Intern\u2019s self-tests we\u2019ve had 0 false positives. When we were using Sauce Labs, earlier in the year, we would normally have to rerun CI 2\u20133 times before it would not have any false positives due to random service failures in the middle of testing.\n2. We were never able to use Sauce Labs for CI with Dojo 1 because it was so slow everything would eventually time out. BrowserStack did not have this problem.\n3. Team members I\u2019ve polled all feel that BrowserStack is at least 2 times faster than Sauce Labs, and perhaps as much as 4\u20135x faster.\nThe good news is that outside of having to get an account with another provider, if you are using Intern switching to another provider is simply a matter of changing the tunnel configuration property and updating your access keys.\n. runEnd should not be dispatched this way, it should be sent by the client after the test run has completed. I don\u2019t know how the final suiteEnd would be sent but then runEnd is missing. Do you have a reproduction case?\n. Thanks, I\u2019ve reproduced with your repo and am investigating!\n. @cezarykluczynski I\u2019m not able to reproduce this after updating to the latest release of Chrome. Could you please make sure your Chrome installation is up-to-date (43.0.2357.65) and try again and let me know what happens?\n. See #378.\n. Intern 3 normalizes all arguments by mixing them into the configuration data, so this should already work as expected in the next release.\n. For the moment, using a GitHub fork archive until the issue is resolved upstream.\n. Thank you very much for sending this! There are only a couple of minor problems that should be easy to fix (in inline comments), plus a couple final considerations that don\u2019t necessarily need to be addressed in this PR (but it would be great if they were!):\n1. If glob patterns are encountered in the browser for suites, an error should be thrown to let users know that globbing only works in Node.js.\n2. We should be able to expand the globs in Node.js and send them to the client in the test runner. To avoid problems with URL length, the best way I can think to do this would be to extend lib/Proxy.js to listen for a special path (like /__intern/config.js) that will send something like this:\ndefine([ 'originalConfigId' ], function (config) {\n   config.suites = [ /* list of globbed suites */ ];\n   return config;\n   });\nThen, change lib/ClientSuite.js to tell the browser client to load this special config instead.\n. @cezarykluczynski OK, if you want guidance to take this to completion you can talk to some folks on IRC otherwise I can try to take over (the second one might take longer). Let me know. Thanks!\n. Can you please try with Intern 3? When there is a suite error it should not report success.\n. Uh, sorry, Intern 3 is the master branch.\n. Yeah you will just need to change the dependency version temporarily to theintern/intern#master to test.\n. Since I haven\u2019t heard anything else in a few weeks I will assume this is working properly. Please comment again if this is not working right in Intern 3.\n. Killing the process with SIGINT is the most graceful and correct way to stop a test run. If the proxy were going to be designed to allow a kill (and the proxy runs on 9000 by default, 4444 is the WebDriver server which Intern has no control over), it would probably just send a SIGINT internally anyway. So I\u2019m not super sure what this provides except for an HTTP-based way to kill an Intern server.\nAre any other people interested in this?\n. Seems that there is no interest in this so I am going to close this ticket for now. We can always reopen in the future if it turns out there is a lot of interest in such a feature.\n. Yep, they are, seems the failures are all related to path separators (as is always the case with anything related to Windows). I\u2019d be happy to accept a patch for this but since we don\u2019t currently have CI for Windows it\u2019s not a very high priority.\n. config is a module ID. When you specify intern as the module ID of the configuration file, this conflicts with the intern package which is already registered and causes node_modules/intern/main.js to be loaded instead. I\u2019m investigating just resolving the full path explicitly when retrieving the config since the module ID-ness of the config argument seems to baffle most.\n. Whatever shell you are using is probably responsible for detaching the process at the time the first signal is sent, this behaviour does not occur in bash (and can\u2019t actually occur unless it\u2019s the shell\u2019s fault, the Intern process has obviously not terminated or closed stdout/stderr or else it would not be able to write that message later).\nIf you could, please use the template from the contribution guidelines, I am having to make too many guesses and assumptions in your current tickets because I don\u2019t have enough information to go off of. Thanks!\n. I\u2019ve seen this happen from time to time; what it usually means is that the cancellation caused the Executor#run promise to resolve before the executor has actually finished cleaning up, so the hung code system activates and thinks the normal shutdown process is hanging (it isn\u2019t, it\u2019s just slow as F sometimes because it waits for the WebDriver server to respond to a quit message). I need to figure out what needs to be done, but since this is largely a cosmetic issue it will probably be deferred to a point release.\n. The Runner reporter is actually more colourful now but whatever you are using doesn\u2019t comprehend the ANSI escape codes. It is currently intentional that all output is sent to a single output stream for implementation simplicity and consistency.\nAs with the last ticket I would really appreciate it if you could use the template from the contribution guide so I can understand more easily and potentially reproduce what exactly is the problem. Thanks!\n. Great! I like it when things fix themselves. :)\n. The UI is separated from the rest of the test system so I don\u2019t know how this is possible or appropriate in the Intern architecture, can you please provide some use cases that make sense in the context of the way Intern runs?\n. OK, I will close this for now, please let me know if it turns out to be necessary later. You should be able to use custom arguments to specify the version by URL.\n. Yes it will help, it should be much easier to bail out of running any more tests now\n. In lib/Suite.js, if a test fails and fast fail is turned on then don\u2019t run any more tests. This changed code also needs to account for sub-suites: a parent suite should not continue to run either if a child suite failed. That\u2019s pretty much it.\n. Thanks for the patch!\n. The documentation should say loaderOptions.\n. try with this:\n``` patch\ndiff --git a/tasks/intern.js b/tasks/intern.js\nindex 0014d25..bf1cfe1 100644\n--- a/tasks/intern.js\n+++ b/tasks/intern.js\n@@ -43,6 +43,14 @@ module.exports = function (grunt) {\n        logOutput(data.slice(start));\n    }\n\nfunction serialize(data) {\nif (typeof data === 'object') {\nreturn JSON.stringify(data);\n}\n+\nreturn data;\n}\n+\n    grunt.registerMultiTask('intern', function () {\n        var done = this.async(),\n            opts = this.options({ runType: 'client' }),\n@@ -68,7 +76,7 @@ module.exports = function (grunt) {    if (Array.isArray(value)) {\n        value.forEach(function (value) {\n\n\nargs.push(option + '=' + value);\nargs.push(option + '=' + serialize(value));\n            });\n        }\n        else if (typeof value === 'boolean') {\n@@ -77,7 +85,7 @@ module.exports = function (grunt) {\n            }\n        }\n        else {\nargs.push(option + '=' + value);\nargs.push(option + '=' + serialize(value));\n        }\n    });\n\n\n\n```\n. @sholladay what about just this change:\n``` patch\ndiff --git a/lib/executors/PreExecutor.js b/lib/executors/PreExecutor.js\nindex 8ea79c1..2d05ccd 100644\n--- a/lib/executors/PreExecutor.js\n+++ b/lib/executors/PreExecutor.js\n@@ -214,7 +216,7 @@ define([\n                            [ 'suites', 'functionalSuites', 'reporters' ].forEach(function (name) {\n                                    var value = config[name];\n\n\nif (typeof value !== 'undefined' && !Array.isArray(value)) {\nif (value != null && !Array.isArray(value)) {\n                                                config[name] = value === '' ? [] : [ value ];\n                                        }\n                                });\n``\n. Well good because I already stuck it in there so it can\u2019t ever be changed now!! :)\n. Please feel free to submit a pull request to add the missing information!\n.process.stdout.isTTYmust be true for Istanbul to write coloured output, which it is not when spawning a Grunt process because it buffers output instead of passing throughprocess.stdout. You could try addingstdio: 'inherit'to the options passed togrunt.util.spawnfrom the Intern task and see what happens. This could very easily break everything, however\u2026\n. Version update is great as long as it passes tests! :)\n. Thanks for your patch!\n. We\u2019ve discussed this internally and won\u2019t be adding font bundling since the edge case nature of this problem doesn\u2019t really justify the extra space that these fonts would take for _every_ Intern user. You could write and use a [custom](https://theintern.github.io/intern/#custom-reporters) version of the HTML reporter that includes the fonts if this is a significant problem for your organisation.\n. Could you please pick a different name for this like LcovJson or JsonCoverage? There is already an open ticket for a JSON test reporter at #120 and I don\u2019t want to confuse anyone about what this is.\n. Is this ready to merge?\n. Nope just waiting for time to review and land.\n. Thanks for the patch!\n. Could you please try again running a stable and recent version of Node.js? Node 0.12.5 is the latest version, you are running 0.11.0 according to that log, which is over two years old and an unstable version.\n. Re:suite.name, the test runner creates one root suite corresponding to each environment that you are running against. The names of these suites are generated before the server says what the actual environment is, so if you don\u2019t provide explicit version information in yourenvironmentsconfig it will end up being \u201cany\u201d, since that\u2019s what was specified. It would be nice to mutate this once the information becomes available but changing the name changes the id of all sub-suites/tests, which could lead to some bad stuff happening, so if/until someone has time to figure out what might break it\u2019s just a little mysterious if you don\u2019t give explicit values to your environment.\n. Thank you for the patch! I made a slight adjustment to match the way skipped tests are reported at the end of a run, which is to say the skipped part only appears when there are actually any skipped tests at all.\n. This is a known issue that is already fixed in Intern 3.\n. Reporters should be configured through their passed options hash as described in [custom reporters](http://theintern.github.io/intern/#custom-reporters), not in the way this patch works, so I am closing this PR. I also don\u2019t actually want to accept any change related to that ticket until I hear from more than one reliable source that it\u2019s a problem, which is why I marked it as wont-fix to begin with. (If a 404 is actually returned for a font resource there is no FOUT so the report makes no sense.)\n. Thanks!\n. I presume you are wiping everything out ofdocument.bodyto cause this? The \u201csafer\u201d access prevents a crash but it doesn\u2019t do much else good, it just causes the reporter to ignore the fact thatthis.suiteNodelost its parent and retargets it to a wrong destination (document.body`).\n\nThe more correct solution for your case is probably to set runnerClientReporter.writeHtml to false in your config (in master only at the moment). A more correct patch for the reporter would probably be to write everything starting rooted at an anonymous container node instead of document.body, and then if someone blows up document.body it can be restored because a reference to the container will still be held and it can just be dumped back into the body.\n. OK, sounds like there is no issue here then. Alameda works fine in browsers which is the only environment it supports.\n. This is exactly what the Dig Dug library is for. Create a new Dig Dug tunnel that downloads and runs ChromeDriver, then every user can also have access to ChromeDriver simply by specifying tunnel: 'ChromeDriver' or whatever. The code for downloading and spawning is already there so this would be a very trivial enhancement to that library.\n. Please see https://github.com/theintern/digdug/issues/19\n. Is the resolution of this issue just the documentation change that Kitson suggested?\n. Thanks for your report! Hopefully the new documentation changes are clearer.\n. Duplicate of #410.\n. I am actually going to close this PR for now since, while it prevents the crash, there is a better way to do that now. More words about this are at https://github.com/theintern/intern/issues/435#issuecomment-125792652 !\n. Sorry, no more updates to Intern 2.x are planned. If you are having trouble with Intern 3, please open some tickets so those bugs can be fixed. Thanks!\n. Thank you!!!\n. The documentation for the config argument states:\n\nThe module ID of the Intern configuration file that should be used. Relative to the current working directory. This argument is required.\n\nSo, basePath is being set correctly in your example, it just does not apply to the config argument, which is defined to always be relative to the current working directory.\nOn a technical level this is because the runs this way:\n1. Load the base loader\n2. Load the configuration file\n3. Overwrite any configuration settings from the configuration file with arguments specified on the command line\n4. Configure the test system\nSo the configuration file is loaded before any other arguments are considered.\nIt would be very straightforward to change this so that the basePath from command-line is considered when loading the configuration file, but the documentation currently is pretty explicit that this is how config works at the moment, so this would be considered an enhancement.\nI would like to solicit opinions from others about whether they think that the current behaviour is good or that basePath should be considered specially when loading the config before making any change.\n. I\u2019ve removed the warning about the value of config since I had to introduce a workaround in Intern 3 for the fact that people kept using it as a file path anyway. :) If you are doing stuff from Grunt maybe the better enhancement is for cwd to be optionally configurable in the Grunt task?\n. I\u2019m OK with this the way it is, it will start crashing if internConfig goes away which is good since that would indicate a refactor took place that needs to fix up this code to get the value in the New Way.\n. > What is the API that is different?\nPresumably, steal.import(...modules): Promise instead of require(modules, callback).\n. Yeah, this happens at the place where we try to call into the new loader for the first time after injecting it. Since we aren\u2019t inside the loader we have to call a globally exposed API. I would not be opposed to receiving a patch that looks for some other loader API hooks, I believe you would need to patch just lib/util.getModule and lib/executors/PreExecutor#swapLoader.\n. Progress lines are terminated with a CR, not an LF. This character returns the cursor to the start of the line without advancing a line. I\u2019m not aware of any system that doesn\u2019t support this (and I know for a fact that Windows does). Could you please try from cmd.exe directly?\n. Guess someone\u2019s going to be booting into Windows tomorrow\u2026 :disappointed: \n. I\u2019m able to reproduce the issue on Windows. It seems likely that this is a Node.js bug. I can use type testfile on the command-line to type a file with \\r and it correctly overwrites the line but if I have Node.js output the exact same data with process.stdout.write(require('fs').readFileSync('testfile')) it seems to morph the line endings into \\r\\n. Continuing to investigate.\n. So, this is apparently thanks to meddling from libuv. To work around, we would need to create our own raw writable stream on fd 1 and send that to reporters instead\u2026 unfortunately doing this would break any reporters that actually need some of the other terminal emulation functionality from libuv. :\\\n. I submitted a patch upstream to libuv and put a hacky workaround into ReporterManager that appears to correct the problem. Please try running with theintern/intern#3.0 and verify that everything is working as expected.\n. 4c480525515924422610c3378478664c4d21acce. Thanks for the patch!!\n. Following the reproduction instructions I end up with a browser trying and failing to load http://127.0.0.1:3030/clear\n. @vladikoff Could you please provide a test case that I can run, or better instructions on how to use the original test case successfully? As discussed in IRC the reduced case at https://github.com/theintern/intern/issues/458#issuecomment-128130141 isn\u2019t valid because it\u2019s just showing that setup/teardown do run for all suites because they may have subsuites that match the grep. (If you\u2019d like, open a separate ticket for the change to the grep algorithm to suppress those extra calls and I will make that change.)\n. This is actually an upstream bug in the loader, but we can work around it by just enforcing forward-slash normalization on all paths within Intern.\n. Good catch; when we try to load the tunnel we can\u2019t use the global require as-is because accessing dojo/node relied on the loader map for intern.\n. The Web site is currently rights reserved. Could you maybe provide more information about what you are trying to do? Depending upon what you are doing you may be able to just do it, or I imagine we can come up with something.\n. I\u2019m going to close this ticket just so it is not active on the list of things since it isn\u2019t a bug/enhancement request for Intern, but I still await more details and am happy to try to help.\n. You say expected \u201cProject tests should run locally\u201d. Which tests should run locally, and how? It should just invoke tests/selftest.sh?\n. a2f226c5761773fab4ae842fedaaeeabc697d4cc\n. I actually think multiple of these things should be implemented, since batching is probably going to be a great performance improvement on its own! (Reducing the request size is also something that we should do in the future by introducing synthetic unique IDs for each node.) As far as the intermittent hangs caused by out-of-order requests goes, lib/Proxy.js really just needs to blast back 204 responses immediately if the client reporter config waitForRunner is not true (just like it did in Intern 2). The thing about Firefox and onload is a great catch too, I am sure that was a pain to debug, so definitely will want to fix that too.\nI think the best initial approach will be to fix Proxy to respond immediately, since this will unstuck some things, and add the onload fix, since that probably will impact people with large test suites. Limiting the requests should not be necessary but could also be added if desired. Maybe it\u2019s also worth adding a timeout-retry to the requests.\n. I\u2019m going to close this as resolved in 3.0.1 (since it is\u2026resolved in 3.0.1 :)), could you open some additional tickets for future enhancements to improve efficiency if you think it is still worth it? Thanks!\n. Hm. It looks like one of the VMs shut down in the middle of testing because the server thought it was not receiving any Selenium commands. Then the service sends that error when the final state of the session is set. I don\u2019t know why that would happen unless you have a test that never resolves. A reproducible test case or more information about when this happens (all the time? only when you have certain tests enabled?) would be useful.\n. @rodneyrehm 3.0.1 is released with fixes for #466, can you verify this is no longer broken in the new release? Thanks!\n. I don\u2019t see anything specifically about Dojo (outside of it\u2019s the library that Intern uses) or the Console reporter in there; I see that your module IDs are incorrect in your various configuration files (modules IDs do not end with \u201c.js\u201d), so the first thing to do would be to fix those, and then the second thing would be to breakpoint inside of dojo/node to figure out what is trying to use it in the browser.\n. I got a similar report from a second person, I think that reporter information might be leaking into the client that is supposed to be overwritten entirely instead of merged.\n. I am sure Firefox Developer Edition isn\u2019t supported by Selenium project; Mozilla changes APIs in almost every new Firefox release, and these changes break Selenium, so you\u2019re on your own if you want to try to target that environment (at least until Mozilla start maintaining their own stable WebDriver server). I\u2019m not saying that sessions should hang in Intern, ever, but for your own edification you\u2019re never going to get stable testing with developer edition of Firefox so you should probably stop trying.\n. Are you mocking the Date object or anything in your tests?\n. The only things I can think are that your system happened to run an adjtime call at exactly the wrong moment, or you don\u2019t have ECC RAM and had a memory error, or there\u2019s some crazy bug in the JS engine of Firefox 37. The elapsed time is Date.now() - startTime, startTime is Date.now() which is guaranteed to be first, and the value output by the reporter simply takes that value and divides it by 1000. There\u2019s not really a lot of room for this to occur. Since this is not reproducible I am going to close this for now but if you can find\u2026something that makes it happen reliably please feel free to post here and I will reopen.\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThe user guide describes how to use the test runner with a Selenium Grid, and even how to set up a Selenium Grid. If you are still having trouble I would recommend asking for help on Stack Overflow.\nThank you again for your interest!\n. Sorry this slipped through the cracks.\nSomething weird seems to be going on toward the end of the Appium log; the client test runner is loaded successfully, but then app/www/index.html seems to be loaded into the WebView even though I don\u2019t see the calls indicating that the unit test system finished.\nCould you please try with the latest Intern 3.0.3 and verify the problem still exists? You may also try disabling the heartbeat by setting 'idle-timeout': 0 in your environment capabilities and see if that stops index.html getting loaded prematurely.\nIt\u2019s also possible the unit test system just doesn\u2019t work in a Cordova app in which case you would set suites: null and only use functionalSuites.\n. If the server is creating garbage JSON, I doubt there is anything that we can do. We warn about using Sauce Labs in the user guide for a reason, it\u2019s not some kind of vendetta. :) What is your configuration?\n. Since I haven\u2019t heard any more information in two weeks I\u2019m closing this ticket, but if you could respond back with information if this is still a problem I will be happy to reopen it then.\n. Sorry, I don\u2019t understand this request. If you don\u2019t want colour output, don\u2019t set FORCE_COLOR and use a reporter that doesn\u2019t generate such output, or strip the ANSI codes by piping output through sed -e 's/\\x1b\\[[;0-9]*[a-zA-Z]//g' or similar.\nIf you can be clearer about what it is that you care about and it is something that we can reasonably implement I will be happy to reopen this ticket.\n. The shortest answer is no, it doesn\u2019t. However, there is nothing special that would stop you from starting a second session and managing that relationship yourself.\nIn any case, I am really not sure of how useful this actually is; given how seriously limited browser instances are on cloud providers (like, you get a handful of parallel browsers unless you spend crazy money), you\u2019re almost certainly better off testing just client-to-server interactions anyway. This seems like more of a gimmick feature that appears cool on the surface but actually just introduces additional points of failure into testing for no benefit.\n. That error says that because it\u2019s expected that the real error was already reported by a reporter. In any case I can\u2019t reproduce any issue with the test case you provided in latest 3.0 branch so please confirm this is still a problem?\n. Closing due to no response. If you are able to provide the requested information and this is still a problem I will reopen the ticket. Thanks!\n. As I mentioned earlier, any suite error should be reported by one of your reporters, so if you don\u2019t see any other error, please provide your reporters configuration.\n. Do you actually have a real world use case where you need to load over 5000 modules or are you just creating synthetic tests until things break?\n. Duplicate of #478.\n. There is probably not anything that can be done about this in Intern; the SafariDriver extension is unmaintained and is increasingly buggy as Safari gets new versions. You can set excludeInstrumentation: true to bypass this specific problem, but this will lose you code coverage everywhere.\n. How are you running the client? If you aren\u2019t doing anything funny like editing client.html, seems most possible that Chrome has a bug in its handling of the crossOrigin property and is not sending Authorization header even though the script is loading to the same domain so the CORS flag should not apply. You can check it by commenting out the node.crossOrigin = 'anonymous' line in the loader.js and see if it works then.\n. I\u2019m closing this ticket due to no response in two weeks. If you reply with the requested information I will reopen it. Thanks!\n. When you say starve, do you just mean that other things are slow because they are temporarily blocked or something else? The test system should either fill the browser\u2019s outgoing connection limit but in a way where the requests are short so other things can be safely interleaved (no waitForRunner), or it should limit to 4 outstanding requests (waitForRunner). Are you seeing some other behaviour? I am OK with the buffering approach except am concerned this patch will just introduce result latency since I don\u2019t know what it would fix otherwise.\n. OK, the delay seems like a reasonable trade-off. This should probably also remove the old queue code too, right, since there\u2019s no reason to have the queue any more (there\u2019s always only one request out to XHR no matter what)?\n. Ah, so it does. Well there is a reason why I say I am burnt out :)\n. As a side note, we\u2019re going to have to start dealing with reducing the memory utilisation of messages transmitted to the server Real Soon.\n. Well,\n- Messages are serialised at the moment they are received by the reporter,\n- Suite messages contain a serialisation of all their child tests as well,\n- Those strings are persisted in an array on the client, then that array gets serialised a second time before being passed on for transmission.\nSo it\u2019s quite a bit of memory (and bandwidth!) being used for these messages relative to how much more efficient it could be.\n. Sorry about that. Writing code when you\u2019re sick is a bad idea :)\n. What driver is being used by TestingBot? Appium and ios-driver are supported, the ancient iPhoneDriver is not.\n. Sorry, as a free volunteer-run project we do not have the manpower to chase down third parties like TestingBot. If they don\u2019t respond to you, they won\u2019t respond to us any better.\nThe last output you pasted is telling you that TestingBot doesn\u2019t support the capabilities you\u2019re asking for. This is not an Intern bug.\nYou can try putting fixSessionCapabilities: false in your environment settings for iOS, this will prevent capabilities detection so maybe it won\u2019t hang then, but otherwise I don\u2019t think there is anything that can be done on this side to resolve this issue if upstream is non-communicative so I\u2019m closing this ticket for now unless/until more information is forthcoming from TestingBot.\n. The lang.deepMixin to combine arguments into the configuration doesn\u2019t work \u201cright\u201d in the case that a target object is an array and a source object is an object. It mixes the object properties onto the array. So what happens here is that the reporters argument is { id: 'WebDriver' }, but the config has reporters: [ { id: 'Runner' }, { id: 'Lcov' }, { id: 'LcovHtml' } ] which ends up being like reporters: { 0: { id: 'Runner' }, 1: { id: 'Lcov' }, 2: { id: 'LcovHtml' }, id: 'WebDriver' }. The PreExecutor needs to promote arguments to arrays earlier than it is.\n. Thanks for having public code, that made it easy to find this bug, which has been reported a couple times in comments but never with an actual test case.\n. Thanks for the report, this is probably upstream bug https://github.com/SeleniumHQ/selenium/issues/813 which should be fixed in Selenium 2.48.0. In the meantime if you click on [id=it] instead of [widgetid=it], the click will be correctly registered.\n. You need to load requirejs as specified in the example configuration by installing the npm package and using requirejs, which points to r.js, and not requirejs/require.js. require.js is for Web browsers only and will not work in Node.js. Yes, this is confusing, so I\u2019ve added a documentation note calling it out specifically.\n. This ticket doesn\u2019t contain the information we need to investigate. Please read the contribution guidelines and make sure to provide all the necessary information. All I can tell you from what you have reported is:\n1. Intern doesn\u2019t come with any intern:sauce Grunt task\n2. Intern 3 doesn\u2019t load dojo.js so whatever is doing this is a custom configuration or unsupported modification you\u2019ve made to your copy of Intern\nPlease provide more detailed information including your configuration file and we can investigate further.\n. I\u2019m closing this ticket since we haven\u2019t heard back in a week. If you have the necessary information please reply and I will reopen the ticket. Thanks!\n. If Firefox window closes in the middle of your tests, then the browser is probably crashing. I don\u2019t think the Selenium log in the OP is complete, it only shows the feature detection running. Your inheritance code is wrong in your crashing example, you should never call anything on any superclass directly without using apply and you should never call anything on superclass except from a subclass override (e.g. call super.foo from this.foo).\n. Also, on Windows you should be able to find application crash logs in Windows Event Viewer.\n. Copying over from the closed PR #501\u2026\nThe issue here is:\n1. npm 3 doesn\u2019t ever install dependencies into the intern/node_modules` directory so everyone always ends up doing symlinks\n2. By default, non-admin and non-elevated admin users in Windows don\u2019t have permissions to symlink directories\nSo, you\u2019ll need to Run as administrator the command prompt when installing with npm 3 on Windows. \nThere are two possible fixes:\n1. Change 'dir' to 'junction' in the symlink call, since it seems creating a junction doesn\u2019t require extra permissions for some reason. Junctions have to be absolute directories, but these symlinks are already absolute so this should not matter.\n2. Catch the EPERM error and copy instead of symlinking.\n. Thanks for the patch, do you have an upstream bug report about this problem? It seems wrong that require.resolve and __dirname would provide paths with different cases on the drive letter.\n. Thanks for the pointers. I see the commit that was added to Node.js that broke this between 0.10 and 0.12. (Why would you ever normalise drive letters to lowercase? When are drive letters ever represented lowercase anywhere ever? Uppercase drive letters date back to at least CP/M in the 1970s. How cou\u2026 I jus\u2026 whatever. )\nI\u2019m surprised this isn\u2019t more of an issue more frequently.\n. So sorry, can you send a test that causes this to actually happen reliably outside of the context of npm 3? I am trying to get __dirname to not be what I expect it to be on Windows in Node 4.1.1 and I don\u2019t seem to be able to do so. I also don\u2019t see the bad code from 0.11 any more in lib/path.js and can\u2019t seem to find any equivalent code in current Node.js master or 4.x branches that would break the drive letter.\nI see an installation failure when using npm 3, but only npm 3.\n. OK, so the issue here is:\n1. npm 3 doesn\u2019t install dependencies into the intern/node_modules directory so everyone always has to do the symlinking\n2. By default, non-administrative users in Windows don\u2019t have permissions to symlink.\nSo, you need to run as admin when installing with npm 3 on Windows. The fixdeps command can also optionally be updated to perform copies when a symlink fails with an EPERM error, if anyone cares to make that modification.\n. Or actually junction links seem to work fine without any permissions changes, so maybe there is a way to have fixdeps do that instead.\n. the util function is returning the wrong variable :(\n. In order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Can you please tell me what is the value of coverageData in the top-most frame (node_modules/intern/lib/ProxiedSession.js:84) when this crash occurs?\n. Why are your widgets sending requests to endpoints that they don\u2019t know about during testing? I\u2019m happy to keep the proxy from crashing but filtering data is the wrong thing to do; your code is doing something bad and you should fix your code!\n. I am assuming based on the information you\u2019ve provided that the issue here is that the run was not marked as failure in the TestingBot interface, not that it didn\u2019t fail on the machine where it was running. Is that correct?\n. The purpose of fixdeps.js (install script) is to ensure that the dependencies are always available there. Maybe your Web server just is not configured to follow symlinks?\n. Options I can think of are:\n- Use path.relative, which would make it OK for you to rename the project directory, but this won\u2019t work for Windows (the junction points are absolute)\n- Just make a copy, but that\u2019s unpleasant and wasteful and could be a bummer if anyone runs dedupe (though to be honest I have no idea what happens now if someone tries to dedupe)\n- Make a copy using hard links, which won\u2019t waste space but is likely to confuse and confound and requires a lot of extra complexity (like recreating the entire directory structure)\n. I don\u2019t understand this ticket, since Intern\u2019s Proxy doesn\u2019t make outgoing requests. Could you please provide more specific detail about what you think is happening? Thanks.\n. The suggested fix will break if someone has a different version of dojo, chai, or diff installed to their own package.\n. Thanks for the report but I see no Intern/npm 3 bug in your repository. You are telling Intern to use your copy of the Dojo loader by the loaders configuration you\u2019ve defined, but you haven\u2019t properly configured the loader to run in pure AMD mode by setting async: true, so your tests crash on startup. The exact same thing happens regardless of whether installation is done with npm 2 or npm 3.\nIf you can provide a series of steps that demonstrate a working test system with npm 2 and a broken test system with npm 3 please let me know and I will reopen this ticket.\n. So I guess my gut reaction is thus:\nWhile I\u2019m happy to entertain adding features that would be useful, the way you are using pushState is\u2026 not correct, so I don\u2019t know how useful this would be as a built-in option (as opposed to, say, exposing the built-in HTTP server in a way that makes it easier to extend by some custom middleware).\npushState is intended to allow Ajax-like partial loads of pages that actually have distinct URLs on a server, where if you load the URL from the server it will return a complete page, and by using pushState you\u2019re just optimising to avoid retransmitting the entire page.\nThe whole \u201cunfortunately\u201d part from the article you linked is, well, the entire point of pushState. If the URL on the server is always some stub page because you are writing a pure client-side app, you should just be using location.hash. Redirecting every 404 to a stub page breaks the Web by never returning the correct 404 response for a URL that does not actually exist. You should never do what that article says to do.\nI\u2019d like to hear some opinions by other people as well before making a final decision on this.\n. This is the same problem as #516. Intern retries up to environmentRetries times if a session fails to be created. TestingBot is broken, creates the session, then redirects to the wrong URL so Leadfoot thinks the session creation failed. This is not an Intern bug, but a bug in TestingBot.\n. @testingbot Leadfoot does support redirects but the server has to actually reply with a correct redirect response. Other Appium installations like Sauce Labs work fine according to user feedback.\n. According to data from OP, the TestingBot server is responding with an incorrect Location header that is missing the port where the TestingBot tunnel runs, so the WebDriver client tries to retrieve session data from a URL that doesn\u2019t exist. This would be an ECONNREFUSED error, except the OP also has a Web server running on port 80 so it\u2019s a 404 instead.\n. wd uses a regular expression to parse against the redirect URL instead of actually following the redirect, which is wrong and fragile for other reasons. Leadfoot uses the capabilities information from the redirected URL, and must do this to be consistent with newer Selenium servers which do no redirect and just return the capabilities information in the POST response. At least the official Ruby and Python Selenium clients follow redirects too, so TestingBot\u2019s Appium installation seems to be broken for almost every configuration and needs to be fixed regardless.\n. Sorry, I didn\u2019t quite understand your response. Are you saying that TestingBot has addressed the problem on their end and everything is OK now for you?\n. I\u2019m not able to reproduce any issue when using RequireJS with the intern-tutorial, everything works fine. Could you please provide a reduced test case that demonstrates this problem?\n. This appears to be a bug in RequireJS 2.1.9 and earlier. 2.1.10 (released 8 Jan 2014) and later work fine.\n. There are mixed reports of success testing against Edge, there is an open feature request at https://github.com/theintern/leadfoot/issues/67 for Edge support so please watch that ticket for updates. Nobody has formally done the work to validate vanilla Edge compatibility (IIRC when it was originally released, Microsoft\u2019s WebDriver server wasn\u2019t using the REST endpoints so it wasn\u2019t compatible with anything). If this is still an issue once that other issue has been resolved, please let me know and I\u2019ll reopen this ticket. Otherwise we\u2019ll just track this problem over in the Leadfoot tracker, unless you have a problem with this. Thanks!\n. Thank you, all patches are greatly appreciated. Sorry for the delay landing.\n. By default test timeout is 30 seconds, this can be modified by the defaultTimeout configuration option if you think it\u2019s too low. Why do you think the test is successful?\n. Thanks for your interest in Intern!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Thanks!\n. Thanks!\n. Have you tried using getLogsFor?\n. Automatic test sharding/pooling across multiple remote instances is a feature that has been requested before, I don\u2019t know what to do about the other part. I opened a separate ticket at https://github.com/theintern/intern/issues/546 for the sharding. I think getLogsFor and clearLocalStorage is really the right solution for the other part of this ticket. Is there something else to be addressed here?\n. @wonnage Cookies with httpOnly flag are supposed to be accessible to Selenium and deleted when calling clearCookies, though I understand support from the various drivers may be weak here since it was not mandatory in the JsonWireProtocol due to early implementation limitations (I am not sure if this is an issue with any modern implementation). A separate enhancement patch to allow sessions to be restarted programmatically would be accepted, though the what was said about this being slow is still valid, so it probably isn\u2019t something anyone would actually want to do automatically for all tests, rather, only when you absolutely need it.\n. Tests that aren\u2019t passed and aren\u2019t skipped are considered failed (this is in order to fail-safe in case of a problem). If a test has never run before it will be considered failed because it hasn\u2019t passed and isn\u2019t skipped.\n. Thanks!\n. Thanks for the patch!\n. Thanks for your interest in Intern!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Thanks for your interest in Intern!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Thanks!\n. What do you mean by \u201ccan\u2019t seem to use it\u201d? What do you expect to happen, and what actually happens? How are you running Babel to convert your test code into code that your test environment can execute (as no runtime exists that supports this draft feature)?\n. Closing due to no response from OP. Please feel free to respond with the requested information and I\u2019ll be happy to reopen this issue if it makes sense.\n. Hi, happy to see a great accessibility project like ally.js using Intern!\nYou will probably need to increase your test timeout beyond 1 second. This is entirely speculative, but I believe that due to overallocation/CPU steal from other VMs running on the same physical hardware, sometimes the cloud VMs have long (several hundred ms) delays running code, so the tests end up timing out. The problem is more significant on Sauce Labs than BrowserStack because they seem to significantly overallocate, but the problem exists pretty much everywhere. This was an ongoing annoyance when Intern self-tests were put on the cloud; if you look through our commit history you\u2019ll see me progressively ramping up timeouts on some of our tests until they finally would pass reliably on cloud hosting, even though they always passed 100% of the time locally.\nI\u2019d like to figure out a better way of handling this but I am not sure what would be ideal, or if it is even possible. Because the lag is largely nondeterministic, it\u2019s not possible to do something like benchmark. If part of the problem is that timeouts are executing on the same event loop but in an undesired order (i.e. the timeout function fires, and then the callback for the test fires next during the same cycle)\u2014and again this is all speculative\u2014it would be simple to add an extra guard loop for the timeout so that it won\u2019t trigger a timeout failure until n+1 event cycles, and only does so on the second cycle if it turns out the callback was not executed during the last cycle. If you want to prototype something like that it should be pretty straightforward to modify intern/lib/Test#restartTimeout which is where the timeout handling occurs.\nYou can also manually reset the timeout from your tests now by calling this.restartTimeout, which is useful if you have some outside mechanism that lets you know that your async operation is still working, though this won\u2019t help in the situation where VM lag is greater than your timeout.\n. Thanks for your interest in Intern!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions. Thank you!\n. Hi,\nIt looks like you don\u2019t have a signed CLA on file (or I can\u2019t find it). Could you please sign the CLA at http://contribute.jquery.org/CLA/? It only needs to be done once, and thereafter you are able to contribute to any jQuery Foundation project.\nThanks!\n. Received, thank you!\n. Thanks for the patch!\n. I\u2019m OK with this. I\u2019d also love to talk about exposing Proxy functionality better for users anyway, so they can do things like add middleware so I opened https://github.com/theintern/intern/issues/547. :)\n. Thanks!\n. I feel weird about the level of output parsing. #199 was created partly because it provides an easy-to-use machine-readable format that\u2019s guaranteed not to change that can be used to exchange messages from Intern to Grunt. There\u2019s no guarantee with the text output of Istanbul that it won\u2019t change to some other human-readable representation in the future.\nI\u2019d rather add a new configuration to Intern itself that will make it fail the test run if code coverage is below a certain, configurable amount. Would you be willing/able to do that instead? I thought there was an open ticket for such an enhancement but I can\u2019t seem to find one.\n. I\u2019m sorry I don\u2019t know what is going on with this ticket. Once you configured npm correctly you were able to install Intern?\n. That\u2019s npm opening package.json, not Intern. Intern doesn\u2019t use lodash either so that message also has nothing to do with Intern. I am not sure what to do with this since it is not an Intern bug.\n. Thanks. I meant Intern doesn\u2019t use lodash directly, I just did not speak precisely. The older version of decompress is used intentionally because it works fine and has orders of magnitude fewer dependencies, so it is way faster to download and install than the newer versions which give zero benefit to users.\n. It would be possible to mark a test as async if someone tries to access remote, but no way to correctly handle the actual usage of the remote object, since it generates a Promise object chain rather than being a single object with an internally held stack or queue.\nMaybe it would be better to flag any access of remote, check if the test is async after the test function runs, and if remote was access and there\u2019s no async handling, emit a warning? That seems like it strikes the right balance between not insane to program and helpful to end-users. Let me know what you think.\nWith regards to the done-callback-signature, I don\u2019t feel that is the right approach generally, but of course if you really think this would help you/your team you can write a custom test interface that has something like that too, and if that is super popular for some reason then it could be included I guess.\n. Yep, it\u2019s on the right track! I sent some line comments.\n. Assertion count check is something that already exists in the QUnit test interface today. However I would think if someone forgets to return a promise they will just as easily forget to call a method for counting assertions too?\nAs an aside, the reason why there is no fully integrated assertion count now (i.e. why it is only in the QUnit interface) is because it\u2019s not possible to count number of assertion checks if someone is using their own assertion library, so it would either be some extra separate check-pass API, or we need to expose some thing to let people \u201cbless\u201d their preferred assertion library, or we would need to restrict what assertion library people use when they also want to use assertion count check.\n. > I don't see a clear way to get reporters to cause the spawned intern task to report a failure without causing a stack trace, thats why I incorporated grunt to have that control.\nThe trace on simple test run failure is a problem that can be addressed separately (the easiest way would probably be to set a flag on the error object that causes it to not be emitted through emitFatalError); don\u2019t let it stop you from implementing without Grunt by making these changes:\n1. Send messages to the user using the console object passed to the reporter constructor instead of grunt.log.\n2. To cause the executor to exit with a non-zero status: for now, I would recommend just exposing an extra property on lib/Executor and setting it through runEnd of this reporter (this event receives the executor as its first argument). Then if this property is true, fail the test run, just like this code does for suite errors.\nEventually, it makes sense for the reporter system to be expanded to be a general mechanism for hooks into the test system, so I\u2019m OK with having this functionality in a reporter, even though it seems a little weird to influence the result of the test system through a \u2018reporter\u2019. :)\nLet me know if this makes sense or you can think of some reason why this is a bad approach.\n. That\u2019s all I\u2019ve got. Thanks for sending this! Let me know if you have any questions on the feedback.\n. The best thing would be to run the Leadfoot test suite against Edge. That will run every command and tell you exactly which ones don\u2019t work. Basically you will be fixing https://github.com/theintern/leadfoot/issues/67 to make it work.\n. The test suite doesn\u2019t work well against cloud providers because they break additional things and I haven\u2019t ever managed to get them to not do that. (The error handling and getSessions failures are because BrowserStack doesn\u2019t respond to those calls correctly, even though Selenium itself does.) It\u2019s possible that some of those test failures are legitimate but you\u2019ll need to test against a local VM to know for sure. As far as \u201cnew insights\u201d, I\u2019m not sure what to tell you. To fix the problem, you\u2019ll need to troubleshoot the failing tests to learn why they are failing.\n. > If incorrect response means \"correct data, wrong format\", the ingestion of the response could handle that, right? Is that something you've considered? Or am I on the wrong track an it's technically not possible/worthwhile?\nIt maybe possible to deal with the bad getSessions response\u2014I don\u2019t know exactly what is wrong with the response. The error handling is a bigger problem, IIRC, because the test basically sends a request to an endpoint that should definitely be responding with a 4xx error, and instead BS responds with success. In a sense, that test doesn\u2019t need to exist at all, but in another, it means that it may be impossible to feature detect on that service.\n\nAny pointers on how to make that happen easily?\n\nI haven\u2019t looked into what you have to do to get an Edge WebDriver server running. If it is like ChromeDriver then all you need to do is run the Edge WD server. Otherwise you would need to get Selenium & the Edge WD and run it according to their instructions. Then as you described you would use the NullTunnel and set the tunnelOptions host/port/path to match the local service. If you are using an actual VM and running Intern outside of the VM you will also need to set proxyUrl correctly (IIRC in VirtualBox it\u2019s 10.0.2.2 to access the host machine so your proxyUrl would be http://10.0.2.2:9000). Hope that helps!\n. This is intentional and was noted in the 3.0.5 change log. If you don\u2019t want to see the skip messages, pipe your output to grep -v 'grep' or use a custom reporter that excludes them.\n. Based after the behaviour that the testSkip message wasn\u2019t being sent when tests were skipped by grep, which is a violation of the contract of the testSkip message\u2014namely, that it is to be sent whenever a test is skipped.\n. Did you see the already open PR for this at https://github.com/theintern/intern/pull/402 ?\n. If it works in one browser but not another, then it is one of two things:\n1. an upstream bug with the driver for the broken browser.\n2. a race condition in your page code or test code that is only triggered in one browser. (For example, if you disable keyboard interaction during an Ajax request or similar.)\nI know tabbing has worked for Firefox users in the past so I would recommend trying older versions of Selenium & Firefox until you find one that isn\u2019t broken, then report the regression upstream. If they\u2019re all broken then it is probably a race condition in your code.\nSince this is not an Intern bug I will close this issue. Thanks!\n. Thanks for the PR!\nI wasn\u2019t able to find you in our CLA database by name or email address. Could you please take a moment to e-sign the jQuery Foundation CLA? Once signed, you\u2019ll be eligible to contribute to all jQuery Foundation projects and do not need to sign again.\nOnce you have signed the CLA this PR will be reviewed as soon as someone is available to do so. Thanks again!\n. Thank you for interest in Intern!\nThe bug tracker is not a support forum. Please read the contribution guidelines to learn how to receive support. Thanks!\n. Duplicate of https://github.com/theintern/intern/issues/546.\n. This is related to the need to severely reduce the amount of data transmitted in response to tests being completed. If the WebDriver reporter did not try to serialise whole tests/suites this problem would not occur, and the system would be much faster and less breaky in general.\n. Obviously we are not going to merge Intern 1.5 into master. Be careful what you click on, this interface can be dangerous. :)\n. The exit codes are normally provided by the process.once('exit') event listeners. This is some new API change/regression in Node.js if it can\u2019t handle the zero-argument call to process.exit. What Node.js version does this start happening on?\n. Intern doesn\u2019t start Chrome, it doesn\u2019t run Xvfb either, so I am not sure what you mean by it \u201cdoesn\u2019t support Xvfb\u201d. Intern isn\u2019t a turing machine so it doesn\u2019t support all sorts of possible things, so I\u2019m not sure what action you want us to take; can you please explain? Also maybe take a look at the part of CONTRIBUTING.MD that describes how to report bugs? Thanks!\n. Intern cannot help you set up environment variables for programs that have literally nothing to do with Intern, like Xvfb. Please read the Xvfb documentation more closely. Or the Wikipedia article on Xvfb. Or any of the questions on Stack Overflow that are already answered about using Xvfb. Thank you.\n. nice regular expression bro.\n. avoid describing what the code is doing.\n. whitespace.\n. pretty sure this is wrong.\n. this is wrong.\n. this is wrong too.\n. if result, otherwise if error fail result.\n. relative mid.\n. docs?\n. 'why' not 'what'\n. don\u2019t access privates of other objects. create a new method on PromisedWebDriver like setHeartbeatInterval that does this, and call it here.\n. Is there a reason why this needs to be moved? This change makes the order of operation different between reject and resolve and potentially introduces backwards-incompatible changes to the order in which things occur (currently, /test/fail and /test/end publish, and then afterEach is called; this change makes it so afterEach is called, then /test/fail and test/end are published).\n. Tests shouldn\u2019t ever not have a parent; what were you running into that caused this change?\n. The CI failed with a timeout on this pull request on one of the environments; have you tried increasing the timeout above 5 seconds? Also, I\u2019d recommend using a local URL instead of example.com, to avoid any sort of network issue as the source of nondeterministic failure.\n. if you are going to add a comment, please use it to explain why not what. (I personally do not think a comment is actually needed here.)\n. The interval needs to be less than the idle timeout to account for latency.\n. This is incorrect; heartbeats are not intended to be shared across PWD instances.\n. Don\u2019t leak the timer ID here, it is an implementation detail.\nFunction should have new lines in it.\nThe call to self._wd.url() is unusual and should be commented.\nAny default setting for the timer should exist within the capabilities object, not here.\n. This waits for all other commands to complete on the first run, then unconditionally calls url() on a delay interval thereafter no matter what? I don\u2019t think there is any harm in just starting the heartbeat immediately, whereas there is harm in waiting like this because the wait method sends no commands to the server.\n. I don\u2019t understand why this is copying so much from Suite. Surely it can be inheriting most of that code?\n. since this is only done once anywhere i don\u2019t think it is needed to put it in util.\n. '' + Date.now()\n. this breaks symlinking of intern because node.js is too aggressive in using realpath, which is apparently by design. process.argv[1] is used very intentionally to allow symlinking to work.\n. this forces users to change to the \u201ccorrect\u201d directory before running intern.\n. Where does this get written to?\n. The teamcity reporting syntax is crazy simple, is there a real justification for a separate dependency?\n. I\u2019m not opposed to including this reporter, I would rather include many reporters in the framework than force people to hunt down external dependencies. So, it will get there, it\u2019s can just be a little frustrating to end up in some level of dependency hell when the output is just text.\n. Since the chai object is exposed directly now (so you can call chai.use yourself), is this the primary change that needs to happen for this to work?\n. Shortening variable names like this is verboten. Please use the identifier reporter, not r.\n. instrumentor is a typo, please correct\n. typo instrumentor \n. What shows up in the tests list that doesn\u2019t have a toJSON method?\n. Now that we\u2019ve fixed Intern not to log out any console messages except from reporters, is this necessary?\n. Let\u2019s start doing one var per var.\n. This reporter isn\u2019t suitable for use in a browser afaik?\n. Since there is not more than one XML reporter, I\u2019d prefer to just make this part of the reporter itself, at least until there is demand for it to be broken out\n. We don\u2019t normally do this kind of thing in the reporters\n. Why are these added?\n. why is there a typeof?\n. no abbreviation\n. Seems like this check should be done earlier (later in the function) to avoid running beforeEach/afterEach for tests that have been skipped by grep. However, this will lead to an inconsistency in execution if someone programmatically chooses to mark a test as skipped from within the test body. Thoughts?\n. isSkipped, or (probably better) skipped that is null -> a string value. This would allow things like this.skip('Does not match <grep regexp>') or this.skip('No mobile touch support'), for better reporting.\n. double brackets are not necessary\n. remove debugging message\n. Tell me some use cases.\n. If message argument is added, stick it at the end with + ' (' + test.skipped + ')'\n. Fixing the grammar here adds more code branches that need to be tested, so I\u2019d prefer not to do this\n. Regular expression against what?\n. Double brackets not needed\n. > 0 for clarity\n. Why is this returning a promise?\n. Why does this not inherit from a parent (like remote and sessionId) instead of forcing the registration interfaces to hand-copy over the value on every suite construction?\n. Doesn\u2019t need a second text node, just use test.name + ' skipped'\n. test.tests is always true for suites, is this intended?\n. This try/catch has several issues:\n1. e violates style guide\n2. console log messages outside reporters is verboten\n3. does nothing except log and rethrow\n. one line break only (throughout)\n. Abbreviation tmp violates style guidelines (is there no other more descriptive name for these variables?)\n. use var className\n. there is no such thing as integer in javascript; this sole type hinting is kind of weird\n. this entire method seems a little silly since all you have to do is node.className += ' ' + newClassName.\n. seems like this would be more accurate at line 173?\n. full stop at the end to match other documentation please.\n. return this._grep || (this.parent && this.parent.grep) || /.*/ ?\n. != null, unless you really want undefined to mean something different\n. != null\n. unresolved todo?\n. violate style convention, negative variables. also, this feels like a gross thing to expose as a part of the API\u2026\n. What should happen if someone calls skip twice on a test?\n. The use of an error throw in order to allow people to just write this.skip() without a return is interesting. Though I know some people feel bad about using exceptions as flow control (\u201cthey\u2019re supposed to be exceptional!\u201d), it seems like a super elegant solution since we already have an error handler set up to handle test flow control.\n. I wonder if we should throw a known object instead of creating a new one every time (var SKIP = {}, throw SKIP, if (error === SKIP)), and/or put the skip message in the error message?\n. Also, with putting the message in the error, I also wonder if we would benefit from improved code clarity if we put the code that annotated the skipped property and dispatched the topic in the run loop, since that is where the other topics are published?\n. It would come from the config as a RegExp object already.\n. The \u201cby default\u201d part implies override ability; do we want do put that out there?\n. Thanks for cleaning this up a little :)\n. \u201cA regular expression that will be used to filter tests. Only tests with IDs matching the expression will be executed. By default, all tests will be executed.\u201d\n. same issue with config.grep as in client.js\n. (To fix the negative variable thing just do if (shouldThrow === false))\n. 1. .* isn\u2019t necessary\n2. === true isn\u2019t necessary\n3. In this case, basePath.slice(-10) === '/__intern/' would work just as well without the overhead of running a regular expression\n. This code only runs in Node.js so use dojo/node!url instead\n. Change to urlUtil after updating the dependency to match other parts of the system\n. (Also note for future reference that constructors must always be referenced with an uppercase first letter.)\n. Does it make sense to make this registration earlier too?\n. It occurs after the tunnel & reporters are loaded in runner, before functionalSuites.\n. this doesn\u2019t appear to be used anywhere?\n. we can avoid setting these defaults here since they are set at start\n. var PAD = new Array(100).join(' '); helps us to not have to count characters :)\n. For counts, we conventionally prefix with num to provide some disambiguation (numFailedTests, numTests, etc.)\n. For increment/decrement unary operations, the codebase conventionally uses prefix operator instead of postfix operator. This is essentially due to historical force of habit when I wrote the code (postfix in very old engines will na\u00efvely save the current value before incrementing the value in order to be able to return the old value even if the returned value is unused); modern engines optimise everything to be equal, but for the sake of consistency it would probably be best to use prefix operators in this code.\n. width instead of max?\n. String#slice is the correct function (matches Array#slice); substr is not standard (Compatibility Annex B) and should basically never be used.\n. After running the reporter and watching its output, I feel like a better thing to do would actually be to stretch the progress bar by duplicating the character if the number of results is less than the character size of the window. What do you think?\n. Avoid introducing abbreviations that aren\u2019t on the list (str): https://github.com/sitepen/.jshintrc#naming; let me know if you think we need to update the list.\n. Please don\u2019t abbreviate length\n. (I actually also think that the really long progress bars are hella ugly and ought to get a maximum width, but we can discuss that separately and just leave things for now :))\n. Can we get a spinner in here for the ones that are not 100% complete? Once per render loop:\n``` js\nvar spinner = '\\';\nvar tick = 0;\nvar STATES = [ '/', '-', '\\' ];\nfunction next() {\n  tick = (tick + 1) % 3;\n  spinner = STATES[tick];\n}\n``\n. I think everywhere else in this file,String()is used to coerce to string, so it would be good to be consistent here\n. The tunnels should probably be sending this status, but just in case, once we get a '/runner/start' topic we should just go ahead and make sure it is set to \u201cReady\u201d. With NullTunnel right now we just get stuck at \u201cStarting\u201d the whole time.\n. Unfortunately this isn\u2019t quite working. Lines that wrap due to the window size throw off the total count and cause jumpy rendering until everything is finished. There\u2019s a DECAWM command to disable wrap but I think we can just truncate the lines todimensions.widthhere and allow them to be fully printed atstop.\n. Can we change the order of the final output so that it goes error log, then totals, then coverage report? It\u2019s nice not to have to scroll all the way up just to see the final tally. :)\n. Seems like we should implement a custom sort function here since errors are sorting to the top with the default sort.\n. Also, any chance that we can get the logs in colour too? It\u2019s too bad charm doesn\u2019t seem to expose a simple method for retrieving its escape codes for later use. (There are some hacky things we could probably do with a separate instance, like overridingwriteto return whatever is passed to it as a string, since that\u2019s what the other methods call internally.)\n. It would be great for these ones to be in colour too.\n. actual, then expected\n.equalis OK in these cases since nothing other than a string could be represented bymockCharm.outand still pass, but just for future reference, just like with===in code, it\u2019s preferred to usestrictEqualto avoid edge cases/scenarios where a type accidentally changes in code but the coerced value stays the same so the test passes even though the code changed incorrectly.\n. WouldisNaN` be a better test here? Just in case the values end up defined, but not as numbers. (I am honestly not sure how defensive we need to be here.)\n. :)\n. The spaces in these names were designed to have them always align to 4 characters, but since we also put version numbers and then fit the labels to match, this looks a little weird now to me. Do you think so too?\n. Could you put in a TODO here to split this onto two lines later so we can display title, OS, and code coverage percentages on the first line and the progress bar on the second?\n. > I'm not a fan of displaying all the pass messages\nI hear you on this one. I was going back and forth on it but as long as you don\u2019t like seeing those either then we should get rid of them until the final output\n. A good side-effect of doing that will be that it makes the progress bars less hella-long :)\n. As long as the full log is written out later, I think it makes sense to not print the entire trace here. Good point.\n. I\u2019ll take it.\n. Find and replace error\n. Should be a relative mid.\n. Should use real Test, Suite, EnvironmentType, etc. objects to avoid breaking stuff by passing in objects during test that aren\u2019t actually the object types that get passed in during real execution\n. This is actually really important until we drop Geezer because in Geezer there are many things that we need to use get/set for (from dojo/Stateful) since they are computed properties. When one just creates plain objects and makes them look kind of like the real thing for the purpose of one specific test that uses one specific code path/one specific property (like creating a fake Suite object with a numTests property), those tests can\u2019t be cleanly converted back to the Geezer branch without rewriting the mock objects to match the changes in the interfaces that Geezer requires. If the correct typed objects are used then we can successfully merge the tests and only need to worry about changing the get/set calls.\n. lol. Dtor, really?\n. we\u2019re better than this\n. who else would have attached window.onerror in client.html?\n. whitespace error\n. don\u2019t we still need to send and use basePath: '/' for the client when running through intern-runner?\n. IIRC the sort logic relies on the ! character at the start to put errors at the bottom, so I don\u2019t think it can just be removed?\n. splice = [ index, 1 ].concat(files);\n. One var per var, please (code style preference). It would also be better to define these further down, inside the anonymous function where they are used.\n. You\u2019ll either need to use config[name].slice(0).forEach above, or wait to splice in changes \u2019till after you\u2019ve finished running through the list. It\u2019s easiest to explain why by example:\njs\nvar array = [ 'a', 'b', 'c' ];\narray.forEach(function (item, index) {\n  console.log(item);\n  if (item === 'b') {\n    array.splice(index, 1, 'd', 'e', 'f', 'g');\n  }\n});\nlogs 'a' 'b' 'e' because the 3rd item in the array ('c') becomes 'e' on the splice, but we wanted to look at 'c'.\n. ie8 is not supported so this is not necessary\n. no spaces in array accessors please :)\n. this test doesn\u2019t test the various undefined handling branches so is not complete.\n. this test is mutating objects that are not reset! (QUnit.assert)\n. use a new object scoped to the test to test this utility function, there is no reason to run it against anything constructed outside of the test function.\n. Please use the environment variable FORCE_COLOR instead\n. This information is always provided via environment variable and shouldn\u2019t be put in the test file\n. This is testing literal implementation detail (does the reporter call add on its internal collector?) rather than that information passed to coverage ends up in the final output of the reporter, so isn\u2019t a very good test.\n. Same as previous\n. Verify here that the expected data is in the output.\n. The flag needs to be reset when the test is reset. It should also be listed explicitly in the prototype with its default value.\n. Messages should go through reporterManager so the user can handle and filter them, rather than sending messages directly to console.\n. I don\u2019t think you can just combine function, statement, line, and branch coverage and then divide to get an average like this since they are measures of different incompatible units.\n. One var per var per code convention, thanks!\n. One var per var per code convention, thanks!\n. Probably want to rename this to something like \u201cCoverageEnforcementReporter\u201d or something similar but better than what I can come up with :).\n. I\u2019d probably recommend getting defaults from istanbul/lib/report/common/defaults.watermarks() and use the low watermark as the default for failure, for consistency.\n. Use key in this.config.threshold instead of hasOwnProperty or else this breaks anyone that uses Object.create or a constructor with inherited properties.\n. If an earlier threshold fails this will short circuit and not run enforceThreshold for this key; is that really what is intended?\n. Is this to prevent out-of-sequence errors if the client restarts and then sends a fatal error, or\u2026?\n. The overall test run should fail if there is a suite error which is what this was doing. I don\u2019t think it really matters how it comes out at the end as long as it\u2019s a non-zero exit code for the run.\n. ",
    "vladikoff": "if there's Sauce Connect Error (happened with Travis CI), the test runner should exit with a failure.\n\n. I saw the Grunt Task PR, really awesome! can't wait to use it :)\n. On it! Thanks!\n. @kitsonk I was wondering what the state of this PR is? Seems like an awesome feature to have Benchmark.js support! @kitsonk , do you need help testing this?\n. Thank you!\n. Hey thanks for reporting the issue!\nI made the tests fail on purpose to demonstrate functionality and make it more exciting.\n. Really sorry for the confusion with the Grunt task example.\nThe trick here is that Set is supported in Firefox only, \nTo get all tests to pass just remove Chrome from intern.js and run grunt intern:runner. (Make sure Selenium is running)\nYou would get something like this:\n\nAll tests pass because Set works in Firefox.\nThanks for bringing this to our attention, I will work on making the Grunt example more thorough and understandable.\n. Let me know if you still need assistance with this!\n. @dargoan as you can see it tries to fetch a package from https://github.com..., a bit different than other packages\n. @dargoan you don't need a GitHub account, it just fetches it from a different source.\n. Awesome!\n. Thanks for fixing this so quickly! :cake: \n. Ah we were discussing this in IRC. \n@spotnape @brandonpayton What would be the best way for you to run a single test? By name?\ngrunt intern --test \"request(async)\" (or intern-runner), I guess the suite should also be specified.\n. @jason0x43 does that work with functionalSuites now? (currently only suites=something is available) \n. Hey @csnover ! yea cosmetic defect mostly \nP.S. late Happy new year :D\n. Sorry for a slow response.\nHere are the features that I'm looking for: \nOften we need to run tests with certain environment variables. Such as a server to test against. Due to the fact that there are a lot of servers to test against it is not feasible to create a configuration file for each of those servers.\nCurrent workaround for Node.js tests is add something like this to config:\nSERVER: typeof process !== 'undefined' ? process.env.SERVER : undefined,\nThen config has to be included in the test file and used with baseUri = config.SERVER;\ndefine([\n  'tests/intern',\nand run it\nSERVER=\"https://....\" node_modules/.bin/intern-client config=tests/intern\nNot sure how to get browser tests to get this configuration yet. \nTo me the ideal set of configurations is:\nintern.js - main config file\nintern_browser.js - local browser Selenium tests, with config inherited from intern.js\nintern_sauce.js - SauceLabs tests, with config inherited from intern.js\nand being able to run any of those configurations with a variety of parameters.\nI'm not really clear how https://github.com/amdjs/amdjs-api/wiki/Common-Config#config- would help. I don't want to alter the tests in any manner. It seems the test file should just be aware which config ran it. \n// cc @pifantastic @lawnsea\n. Hey thanks for the speedy response @neonstalwart!\nI think I understand how return module.config(); works. However why is the server hardcoded here:\n\n'app/tests/config': { server: 'http:// \u2026', other: 'stuff' }\n\nAs mentioned earlier: \n\nDue to the fact that there are a lot of servers to test against it is not feasible to create a configuration file for each of those servers.\n\nIf I have 5+ servers with different configurations, this will require 5 or more configs with hardcoded variables or will require editing the configuration files.\n. @csnover and @neonstalwart thanks again for your time and discussing this issue.\n\nFor unit tests in the test runner, the best I think we could really do is serialise and courier configuration data in another query string argument, but then we would be adding more discordance between the environments (in which environment does the configuration data apply, when is it ignored, what if there is browser-specific configuration that should not be overridden, etc.?), and there is also an added concern about query string size limitations depending upon what additional proxy might sit between the Intern server and the browser.\n\nI agree the query string argument solution is not great. I tried it via proxyUrl but ended up with www.localhost.com.... in my address bar. Didn't look too much into it.  \n\n... while I understand it sounds immediately appealing to specify things on the command line, in this specific case I\u2019m not sure how much you are really gaining by having to write the server address in the environment every time you run the tests instead of just writing it once in an inherited configuration file and then changing the configuration file. \n\nPersonally I would love to have the freedom to pass any possible parameter, either with --param or ENV variable. \nThe reason I went with ENV variables is because other Node.js modules and frameworks use this and it seems to be a common pattern. My current plan is to specify configuration flags (i.e SERVER=production, SERVER=local) and then matching that in my configuration. \nI'm going to test out https://github.com/neonstalwart/intern/commit/6bdce989eff11685800151d432d7b567154bc2ad now. Thanks so much for creating that pull request.\n@pifantastic, we've also discovered that config:\nloader: {\n  config: {\n    'app/tests/config': { server: 'http:// \u2026', other: 'stuff' }\n  }\n}\nis not available with the default loader. The map example might still work, but I haven't tried it.\n. Using node-config, how about something like this:\nexport NODE_ENV=production\nnode_modules/.bin/intern-client config=tests/intern env=$NODE_ENV\nThis should allow you to access the env argument by loading ['intern/lib/args'] in your modules\nPR https://github.com/theintern/intern/pull/137 takes care of this for the browser (doesn't put the whole process.env into the query string, just the env arg)\nPR https://github.com/theintern/intern/pull/133 makes it so you don't have to load the Intern config in your tests.\nRef: https://github.com/theintern/intern/issues/128\n. Yeah I think right now the grunt doesn't accept the custom arguments. Probably needs to be patched to support that.\n. While env=$NODE_ENV works, there is a problem when running npm test. \nExample in package.json:\n\"scripts\": {\n  \"test\": \"intern-client config=tests/intern\",\n},\nSadly it is not possible to to run something like: \nnpm test suites=suiteName, it will result in npm ERR! Error: ENOENT, because npm would try to open a package.json in the suites=suiteName directory.\nTo solve this, another idea: somehow \"whitelist\" the ENV variables, just like SAUCE_ACCESS_KEY.\nNot sure how to define that list though, but it would include env: ['NODE_ENV'], which would make NODE_ENV available in 'intern/lib/args'\n. Another idea is to look for 'generic' environment variables, such as 'ENV', 'NODE_ENV', and also add anything that matches 'INTERN_*' in process.env.\n. @SlexAxton updated the grunt task option management to pass all string / array options as args.\nEnjoy, and let me know if you got any feedback to make this better.\n. Made a new OSS Sauce Labs account and updated the credentials on the project, tests passed twice in a row... :confused: \nClosing this for now, until I have more details...\n. Just to update this issue if anyone else finds it. This indeed during a test timeout when using some other promise library where:\n\nreturning a promise from your test that does not have a cancel method on it\n. I like a single option to disable this (i.e excludeInstrumentation: /./).\nThe only issue is the minor style difference as mentioned here https://github.com/theintern/intern/issues/127\n. Looked at this a bit more and I think excludeInstrumentation: /./ should be the default setting.\nWith this really basic config:\n- intern.js\n\ndefine({\n  suites: [ 'tests/suites/basic.js' ]\n});\n- basic.js\ndefine([\n    'intern!tdd',\n    'intern/chai!assert'\n], function (tdd, assert) {\n    with (tdd) {\n        suite('basic', function () {\n            test('#name', function () {\n               assert.ok(true); \n            })\n        });\n    }\n});\nThe output would result in:\n$ node_modules/.bin/intern-client config=tests/intern\nDefaulting to \"console\" reporter\nPASS: main - basic - #name (0ms)\n1/1 tests passed\n1/1 tests passed\n\nActual\n```\n$ node_modules/.bin/intern-client config=tests/intern\nDefaulting to \"console\" reporter\nPASS: main - basic - #name (1ms)\n1/1 tests passed\n1/1 tests passed\n------------------------------------------+-----------+-----------+-----------+-----------+\nFile                                      |   % Stmts |% Branches |   % Funcs |   % Lines |\n------------------------------------------+-----------+-----------+-----------+-----------+\n   node_modules/intern/                   |        70 |        50 |       100 |        70 |\n      chai.js                             |        70 |        50 |       100 |        70 |\n   node_modules/intern/lib/               |     42.03 |     21.05 |     33.33 |     42.03 |\n      Test.js                             |     42.03 |     21.05 |     33.33 |     42.03 |\n   node_modules/intern/lib/interfaces/    |     76.19 |        50 |     55.56 |     76.19 |\n      tdd.js                              |     76.19 |        50 |     55.56 |     76.19 |\n   node_modules/intern/lib/reporters/     |     56.52 |        35 |     57.14 |     56.52 |\n      console.js                          |     56.52 |        35 |     57.14 |     56.52 |\n   node_modules/intern/node_modules/chai/ |      37.9 |      8.55 |     26.38 |     39.34 |\n      chai.js                             |      37.9 |      8.55 |     26.38 |     39.34 |\n   tests/suites/                          |       100 |       100 |       100 |       100 |\n      basic.js                            |       100 |       100 |       100 |       100 |\n------------------------------------------+-----------+-----------+-----------+-----------+\nAll files                                 |     39.67 |     10.39 |     29.93 |     41.04 |\n------------------------------------------+-----------+-----------+-----------+-----------+\n```\nThis feels overwhelming to me and it might feel overwhelming to new users\n. I started to get issues with .waitForElementById(...) after updating to 1.6.\nTests: https://github.com/mozilla/fxa-content-server/blob/master/tests/functional/sign_in.js#L66\nTravis: https://travis-ci.org/mozilla/fxa-content-server/builds/22122741#L1316\nTrying to track down what is different now...\n. The app is live at: https://accounts-latest.dev.lcip.org/\nI just got home so I will try to track down the issue.\n. From debugging this it seems a breaking change was introduced in wd 0.2.3\nHere is a reverse of webdriver.js changes that make tests work again: https://gist.github.com/vladikoff/fbed01ec8748de7e8e9e\nWhile the test blames the element selector, the actual error seems to happen during the waitForElement in the setup https://github.com/mozilla/fxa-content-server/blob/master/tests/functional/sign_in.js#L44\n. Just to update this, we traced the issue and it only affects the geezer branch.\nUse the example from here https://github.com/vladikoff/intern-examples/commit/ba2268aba0a36f098de4f844fdd42be7cbd06a2b to reproduce if needed.\n. Hey @jason0x43,\nIt seems there are no tests for waitForElement so that's why the issue was not caught.\n\nThat particular issue also affects intern master\n\nI could not reproduce this on master 1.6 with my example ( https://github.com/vladikoff/intern-examples/commit/ba2268aba0a36f098de4f844fdd42be7cbd06a2b ) or my project.\n. Hey @csnover , was sauce_connect.log only generated on error? \nI will check why sc.log appeared for me....\n. Well if sc.log becomes a problem we can reopen this or something. :dancers: \n. @jason0x43 related https://github.com/theintern/intern/issues/127 ?\n. See timeout under https://github.com/theintern/intern/wiki/Writing-Tests-with-Intern#returning-a-promise\n\nThe test will also fail if the promise is not fulfilled within the timeout of the test (the default is 30 seconds; set this.timeout to change the value).\n. :scream: \nThanks for letting us know!\n. :+1: \n. Make sure you can download https://github.com/csnover/dojo2-core/archive/7378ade167380ff86e8a530b6259db263800dbf9.tar.gz manually.\n\nMight be related to NPM downtime https://twitter.com/npmjs/status/459090748760014848\nTry to use the European mirror \nnpm --registry http://registry.npmjs.eu/ install intern --save-dev\n. Funny enough, an error occurred while running this PR:\n\n. Good point! travis_retry seems like a good solution for Travis. More info about it here: http://docs.travis-ci.com/user/build-timeouts/\n. @draperd In addition I made a test branch under intern-examples: https://github.com/vladikoff/intern-examples/blob/issue-188-url-hash/jquery-example/tests/functional/Todo.js \nassert.include(url, '#a'); test also passes for me.\n. Just a screenshot for the curious: \n\nLooks amazing!\n. Haven't tried this but this is exciting !\n. @wkeese how did you find chromeOptions ?\n. Thank you very much, this is really useful!\n. The only detail so far is that this only happens on Jenkins:\n\n. In your example repo it is not clear what request is. There are no files or modules named request at all. \nYou probably need this if you want to use Dojo's request.\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'intern/dojo/request'\n], function (registerSuite, assert, request) {\n. Link to https://github.com/theintern/intern/issues/150\n. This can be caused by hanging sc (SauceLabs) processes. \n. > @vladikoff : any clue on how to fix this? \n\nFirst actually make sure that is the problem. Try running sudo killall -v sc and running tests. \n. @vasikarla ok then it is probably caused by something else.\n. > Starting secure remote tunnel VM... Error: Not authorized Error: Not authorized at reject at \n\nMissing sauce labs credentials.\n. This makes it a lot harder to track down errors and see test progress.\nI at least suggest a compromise, show a simple view such as \"Running tests, please wait...\"\nmock up:\n\n\n. Here is what I get from my testing, seems like this works well in the end but while the tests are running there are issues with the console.\n\n. \u279c  fxa-js-client git:(master) \u2717 echo $TERM\nansi\nOS X, Default terminal app with zsh:\n\u279c  ~  zsh --version\nzsh 5.0.2 (x86_64-apple-darwin13.0)\n\u279c  fxa-js-client git:(master) \u2717 npm --version\n1.4.28\n\u279c  fxa-js-client git:(master) \u2717 node --version\nv0.10.32\n. Also experiencing this issue with latest Sauce Labs Tunnel sc tool. \n. @zanona Try downgrading to 2.0.1, I bet it will work\n. > there are arguments that can be made for it to go in either direction\nCould you name at least one argument that makes it better to run beforeEach and afterEach for skipped tests? I apologize but I honestly cannot think of one (outside of the introduces extra complexity, and some inconsistency to the existing skipping method). \n. > There\u2019s no hard and fast rule that says it has to be this way,  \nIs this one of them?\n. https://github.com/theintern/intern/blob/master/.travis.yml\n. @plumlee do you mean global. ? http://nodejs.org/api/globals.html#globals_global\n. ``` javascript\ndefine([\n  'intern/lib/args'\n],\nfunction (args) {\nvar config = {\n    proxyPort: args.proxyPort || 9090,\n   ....\n  }\nreturn config\n});\n```\nDoes something like this not work?\n. @jason0x43 this can be closed I think\n. Thank you @jason0x43 !\n. @zaach does it work in beforeEach ? \n. Looking at the tests for the PR https://github.com/theintern/intern/commit/0450494c616d7dcdd1360b6425c7667c1c6513d8 it seemed to work for that.\nOur beforeEach is here https://github.com/mozilla/fxa-content-server/blob/master/tests/functional/sign_in.js#L39 \n@csnover any idea?\n. @csnover should this be reopened?\n. No it's ok, no rush :dancer:  Thanks Colin!!\n. :cry: \n. @jason0x43 Awesome!! Do we need to update the docs as well (which is basically copy pasting your commit message)?\n. \n. Side node: reporter error throws strange issues:\n\n\nI would prefer to see the error stack, so I can debug where the test actually timed out.\n. @pifantastic any idea why it won't group things properly? \n3 suites each should have 10 seconds running time. No matter what I tried it would still add them all up together. I tried adding blockOpened and blockClosed and that didn't help either.\n\n. IRC discussion suggests we need to stabilize the flowId:\nhttps://confluence.jetbrains.com/display/TCD9/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingTests\n[11:37:31]  <codeasaurus>   It would appear from talking with the TeamCity developers that TeamCity test results reporter is generating incorrect output which is causing TeamCity to report tests as \"ignored\"\n[11:40:07]  <vladikoff> codeasaurus, I was trying to \"upgrade\" the teamcity reporter a few days ago, but i could not figure out the format\n[11:40:20]  <codeasaurus>   According to them (though their documentation doesn't mention it), the flowId must be the same for all the messages in the block\n[11:40:38]  <codeasaurus> https://confluence.jetbrains.com/display/TCD9/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingTests\n[11:40:47]  <vladikoff> codeasaurus, wat, i read that flowID supposed to be unique or something\n[11:40:49]  <vladikoff> codeasaurus, https://github.com/theintern/intern/issues/407\n[11:41:17]  <vladikoff> codeasaurus, \"The flowId is a unique identifier of the messages flow in a build. Flow tracking is necessary, for example, to distinguish separate processes running in parallel. The identifier is a string that should be unique in the scope of individual build.\" ah i guess\n[11:41:32]  <vladikoff> codeasaurus, currently i think we create a new flowId every time\n[11:41:39]  <codeasaurus>   Yeah, pretty ambiguous\n[11:42:08]  <codeasaurus>   correct, each message currently has a unique flow id\n. This should be fixed in TeamCity 9.1 : https://confluence.jetbrains.com/display/TW/Hajipur+9.1+EAP2+%28build+36518%29+Release+Notes#Hajipur9.1EAP2%28build36518%29ReleaseNotes-ANSIstylecoloringinbuildlogs\n. Good suggestion, I do agree that this is gonna useful for CI, especially if you retry tests with something like travis_retry.\n\n. @csnover in https://github.com/theintern/intern/issues/368#issuecomment-88585145 you mentioned that in Intern 3 it should be possible to pause flow, what this help this issue?\n. any pointers on how to do that? I think @miketaylr wanted to hook that up\nOn Aug 11, 2015 3:17 PM, \"Colin Snover\" notifications@github.com wrote:\n\nYes it will help, it should be much easier to bail out of running any more\ntests now\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/413#issuecomment-130026277.\n. Another error (same cause), happened when running via a CI:\n\n. -1 on this, we do not run tests in Chrome and do not the driver installed all the time.\n\nIf you need things auto installed see https://www.npmjs.com/package/selenium-standalone\n. The flowId should be some unique session identifier for each browser session. Taken from https://github.com/theintern/intern/issues/407#issuecomment-116793117\nBefore\n\nAfter\n\nIt also adds the \"Tests\" tab, that looks like this:\n\n. I've been debugging this a bit, but a PR is not ready yet...\n. > What APIs are you referring to? The loader plugin API is different from RequireJS, but RequireJS compatibility and AMD-compatibility are not the same thing.\nSorry if I missed a comment somewhere, how does RequireJS relate to this?\n. Branch link: https://github.com/vladikoff/fxa-content-server/commit/573e231efd6071a394749a6751897615719e99db\n. There seems to be the same issue with \"setup\", but not \"beforeEach\"\n. @csnover I added an easier STR:\ngit clone https://github.com/vladikoff/intern-quick-test.git -b teardown\ncd intern-quick-test\nnpm i \nnpm test grep=\"suite2\"\nyou can see that teardown of suite1 will be called https://github.com/vladikoff/intern-quick-test/commit/dfe892e43cb41f542fb628f0778842519ee34581#diff-9ef56bfba62c04cd5f2daa7c9b0b24fbR17\n. > (If you\u2019d like, open a separate ticket for the change to the grep algorithm to suppress those extra calls and I will make that change.)\nYeah let's do that, I will reopen this one once I have an easy way of reproducing the issue. \nThanks!\n. Invoking selftests.sh causes: \n\u279c  intern git:(master) ./tests/selftest.sh \nRunning client tests\u2026\nRunning runner tests\u2026\nStarting tunnel\nDownload NaN% complete\nDownload 0.4279162347682839% complete\nDownload 0.5750820532074855% complete\nDownload 0.783183718344169% complete\nDownload 1.163745326964292% complete\nDownload 1.2677961595326335% complete\nDownload 1.6839994898060004% complete\nDownload 2.272662763562807% complete\nDownload 2.861326037319613% complete\nDownload 3.4499893110764193% complete\nDownload 4.038652584833226% complete\nDownload 4.627315858590032% complete\nDownload 5.215979132346839% complete\nDownload 5.804642406103644% complete\nDownload 6.393305679860452% complete\nDownload 6.9819689536172564% complete\nDownload 7.570632227374063% complete\nDownload 8.15929550113087% complete\nDownload 8.747958774887676% complete\nDownload 9.336622048644482% complete\nDownload 9.92528532240129% complete\nDownload 10.513948596158096% complete\nDownload 11.102611869914902% complete\nDownload 11.691275143671707% complete\nDownload 12.279938417428514% complete\nDownload 12.868601691185322% complete\nDownload 13.457264964942128% complete\nDownload 14.045928238698934% complete\nDownload 14.634591512455739% complete\nDownload 15.223254786212545% complete\nDownload 15.81191805996935% complete\nDownload 16.40058133372616% complete\nDownload 16.989244607482963% complete\nDownload 17.57790788123977% complete\nDownload 18.16657115499658% complete\nDownload 18.755234428753383% complete\nDownload 19.34389770251019% complete\nDownload 19.932560976267% complete\nDownload 20.521224250023803% complete\nDownload 21.10988752378061% complete\nDownload 21.698550797537415% complete\nDownload 22.287214071294223% complete\nDownload 22.87587734505103% complete\nDownload 23.464540618807835% complete\nDownload 24.053203892564643% complete\nDownload 24.641867166321447% complete\nDownload 25.23053044007825% complete\nDownload 25.81919371383506% complete\nDownload 26.407856987591867% complete\nDownload 26.99652026134867% complete\nDownload 27.58518353510548% complete\nDownload 28.173846808862287% complete\nDownload 28.76251008261909% complete\nDownload 29.3511733563759% complete\nDownload 29.939836630132703% complete\nDownload 30.52849990388951% complete\nDownload 31.11716317764632% complete\nDownload 31.705826451403123% complete\nDownload 32.29448972515993% complete\nDownload 32.883152998916735% complete\nDownload 33.47181627267354% complete\nDownload 34.06047954643035% complete\nDownload 34.64914282018716% complete\nDownload 35.237806093943966% complete\nDownload 35.82646936770077% complete\nDownload 36.415132641457575% complete\nDownload 37.00379591521438% complete\nDownload 37.59245918897119% complete\nDownload 38.181122462728% complete\nDownload 38.7697857364848% complete\nDownload 39.3584490102416% complete\nDownload 39.94711228399841% complete\nDownload 40.535775557755215% complete\nDownload 41.12443883151202% complete\nDownload 41.71310210526883% complete\nDownload 42.30176537902564% complete\nDownload 42.89042865278244% complete\nDownload 43.47909192653925% complete\nDownload 44.067755200296055% complete\nDownload 44.65641847405286% complete\nDownload 45.24508174780967% complete\nDownload 45.83374502156647% complete\nDownload 46.42240829532328% complete\nDownload 47.01107156908009% complete\nDownload 47.599734842836895% complete\nDownload 48.1883981165937% complete\nDownload 48.777061390350504% complete\nDownload 49.36572466410731% complete\nDownload 49.95438793786412% complete\nDownload 50.54305121162093% complete\nDownload 51.131714485377735% complete\nDownload 51.720377759134536% complete\nDownload 52.30904103289134% complete\nDownload 52.89770430664815% complete\nDownload 53.48636758040496% complete\nDownload 54.07503085416177% complete\nDownload 54.663694127918575% complete\nDownload 55.252357401675376% complete\nDownload 55.84102067543218% complete\nDownload 56.42968394918899% complete\nDownload 57.0183472229458% complete\nDownload 57.60701049670261% complete\nDownload 58.19567377045941% complete\nDownload 58.784337044216215% complete\nDownload 59.37300031797302% complete\nDownload 59.96166359172983% complete\nDownload 60.55032686548664% complete\nDownload 61.13899013924345% complete\nDownload 61.72765341300025% complete\nDownload 62.316316686757055% complete\nDownload 62.90497996051386% complete\nDownload 63.49364323427067% complete\nDownload 64.08230650802747% complete\nDownload 64.67096978178428% complete\nDownload 65.25963305554109% complete\nDownload 65.8482963292979% complete\nDownload 66.4369596030547% complete\nDownload 67.02562287681151% complete\nDownload 67.61428615056832% complete\nDownload 68.20294942432513% complete\nDownload 68.79161269808193% complete\nDownload 69.38027597183873% complete\nDownload 69.96893924559554% complete\nDownload 70.55760251935233% complete\nDownload 71.14626579310914% complete\nDownload 71.73492906686594% complete\nDownload 72.32359234062275% complete\nDownload 72.91225561437956% complete\nDownload 73.50091888813637% complete\nDownload 74.08958216189318% complete\nDownload 74.67824543564998% complete\nDownload 75.26690870940679% complete\nDownload 75.8555719831636% complete\nDownload 76.44423525692041% complete\nDownload 77.0328985306772% complete\nDownload 77.62156180443401% complete\nDownload 78.21022507819082% complete\nDownload 78.79888835194762% complete\nDownload 79.38755162570443% complete\nDownload 79.97621489946124% complete\nDownload 80.56487817321805% complete\nDownload 81.15354144697486% complete\nDownload 81.74220472073166% complete\nDownload 82.33086799448847% complete\nDownload 82.91953126824527% complete\nDownload 83.50819454200207% complete\nDownload 84.09685781575888% complete\nDownload 84.68552108951569% complete\nDownload 85.2741843632725% complete\nDownload 85.8628476370293% complete\nDownload 86.45151091078611% complete\nDownload 87.04017418454292% complete\nDownload 87.62883745829973% complete\nDownload 88.21750073205654% complete\nDownload 88.80616400581334% complete\nDownload 89.39482727957014% complete\nDownload 89.98349055332694% complete\nDownload 90.57215382708375% complete\nDownload 91.16081710084056% complete\nDownload 91.74948037459737% complete\nDownload 92.33814364835418% complete\nDownload 92.92680692211098% complete\nDownload 93.51547019586779% complete\nDownload 94.1041334696246% complete\nDownload 94.69279674338141% complete\nDownload 95.28146001713822% complete\nDownload 95.87012329089501% complete\nDownload 96.45878656465182% complete\nDownload 97.04744983840862% complete\nDownload 97.63611311216543% complete\nDownload 98.22477638592224% complete\nDownload 98.81343965967905% complete\nDownload 99.40210293343586% complete\nDownload 99.99076620719266% complete\nDownload 100% complete\nTunnel: BrowserStackLocal v3.7\nTunnel: Error: The tunnel reported: You provided an invalid key\nError: The tunnel reported: You provided an invalid key\n  at Socket.<anonymous>  <node_modules/intern/node_modules/digdug/BrowserStackTunnel.js:201:16>\n  at Socket.emit  <events.js:117:20>\n  at Socket.<anonymous>  <_stream_readable.js:765:14>\n  at Socket.emit  <events.js:92:17>\n  at emitReadable_  <_stream_readable.js:427:10>\n  at emitReadable  <_stream_readable.js:423:5>\n  at readableAddChunk  <_stream_readable.js:166:9>\n  at Socket.Readable.push  <_stream_readable.js:128:10>\n  at Pipe.onread  <net.js:529:21>\nSeems like that would require a browserstack key.\nA few options come to mind:\n- set the key as part of npm test\nor\n- run tests locally (no browserstack) with local browsers (chrome, firefox, or both) via npm test.\n  let the CI do browserstack work\nor \n- provide npm test for local only testing, provide npm run test-remote to test with browserstack\n. With increased number of contributions I think it is crucial to fix this. (Also fix the CI Tests because they are always red)\n. > There is probably not anything that can be done about this in Intern; the SafariDriver extension is unmaintained and is increasingly buggy as Safari gets new versions. You can set excludeInstrumentation: true to bypass this specific problem, but this will lose you code coverage everywhere.\nI think I told @galas0330 to try excludeInstrumentation: true on IRC and didn't work either, @galas0330 please confirm. \n@csnover could it be possible to catch getCoverageData in Safari only and report that coverage is not supported. Where coverage in other browsers would still work...\n. We use Intern 3.0.0 on 0.10 everyday (our stuff is not 0.12 ready yet), so probably need more details about your setup or trace it with a debugger \n. > node 0.10.x\n\nmac yosemite\n\nYeah that's what we use on our dev machines and it's been fine. Really needs more info about the project or config setup. \n. Ah I see, never hit that issue personally, maybe because we don't use loaderOptions.\nThanks for providing issue details!\n. > It's of course possible that Selenium 2.47.1 and FF ESR 38 are not working together.\nWe've got tests constantly running against latest ESR and it works fine with latest Selenium \n. >  Why does FF get closed and opened again during the test?  \nI've never seen that happen. (Though I only use it on OS X). Could you try running this with a really simple test (just get some url) and also include fixSessionCapabilities: false, in your config. Let us know how it goes\n. the lodash thing is just a warning. ( npm WARN deprecated). don't worry.\n@titaniumbones npm probably went looking for a directory with a package.json. \nTry doing in npm init in /home/matt/totaltest, (follow all the steps) and then running npm install intern\nAlso, what version of node and npm are you using?\n. It is not clear to me why the install script went looking for package.json in parent directories:\nnpm WARN enoent ENOENT: no such file or directory, open '/home/matt/package.json'\n. > Intern doesn\u2019t use lodash \nNot 100% true, js-yaml uses it, so Intern uses it via a dependency.\nAnyways, this seems to be a new behaviour in npm 3+ to show a warning that it could not find a package.json. See below. The process exits with code 0 so it is not really an error just several warnings.\nYou can close this issue, not an intern bug indeed.\n```\n\u279c  tmp   npm install intern\nnpm WARN deprecated lodash@2.4.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^3.0.0.\n\nintern@3.0.6 install /Users/vladikoff/tmp/node_modules/intern\nnode support/fixdeps.js\n\n/Users/vladikoff/tmp\n\u2514\u2500\u252c intern@3.0.6 \n  \u251c\u2500\u252c chai@3.0.0 \n  \u2502 \u251c\u2500\u2500 assertion-error@1.0.1 \n  \u2502 \u251c\u2500\u252c deep-eql@0.1.3 \n  \u2502 \u2502 \u2514\u2500\u2500 type-detect@0.1.1 \n  \u2502 \u2514\u2500\u2500 type-detect@1.0.0 \n  \u251c\u2500\u2500 charm@0.2.0 \n  \u251c\u2500\u2500 diff@1.1.0 \n  \u251c\u2500\u252c digdug@1.3.2 \n  \u2502 \u2514\u2500\u252c decompress@0.2.3 \n  \u2502   \u251c\u2500\u2500 adm-zip@0.4.7 \n  \u2502   \u251c\u2500\u252c extname@0.1.5 \n  \u2502   \u2502 \u251c\u2500\u252c ext-list@0.2.0 \n  \u2502   \u2502 \u2502 \u2514\u2500\u252c got@0.2.0 \n  \u2502   \u2502 \u2502   \u2514\u2500\u2500 object-assign@0.3.1 \n  \u2502   \u2502 \u2514\u2500\u2500 underscore.string@2.3.3 \n  \u2502   \u251c\u2500\u2500 get-stdin@0.1.0 \n  \u2502   \u251c\u2500\u252c map-key@0.1.5 \n  \u2502   \u2502 \u2514\u2500\u2500 lodash@2.4.2 \n  \u2502   \u251c\u2500\u2500 mkdirp@0.3.5 \n  \u2502   \u251c\u2500\u2500 nopt@2.2.1 \n  \u2502   \u251c\u2500\u2500 rimraf@2.4.4 \n  \u2502   \u251c\u2500\u252c stream-combiner@0.0.4 \n  \u2502   \u2502 \u2514\u2500\u2500 duplexer@0.1.1 \n  \u2502   \u251c\u2500\u252c tar@0.1.20 \n  \u2502   \u2502 \u251c\u2500\u2500 block-stream@0.0.8 \n  \u2502   \u2502 \u251c\u2500\u252c fstream@0.1.31 \n  \u2502   \u2502 \u2502 \u251c\u2500\u2500 graceful-fs@3.0.8 \n  \u2502   \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.5.1 \n  \u2502   \u2502 \u2514\u2500\u2500 inherits@2.0.1 \n  \u2502   \u2514\u2500\u252c tempfile@0.1.3 \n  \u2502     \u2514\u2500\u2500 uuid@1.4.2 \n  \u251c\u2500\u2500 dojo@2.0.0-alpha.6 \n  \u251c\u2500\u252c istanbul@0.3.17 \n  \u2502 \u251c\u2500\u2500 abbrev@1.0.7 \n  \u2502 \u251c\u2500\u2500 async@1.5.0 \n  \u2502 \u251c\u2500\u252c escodegen@1.6.1 \n  \u2502 \u2502 \u251c\u2500\u2500 esprima@1.2.5 \n  \u2502 \u2502 \u251c\u2500\u2500 estraverse@1.9.3 \n  \u2502 \u2502 \u251c\u2500\u2500 esutils@1.1.6 \n  \u2502 \u2502 \u251c\u2500\u252c optionator@0.5.0 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 deep-is@0.1.3 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 fast-levenshtein@1.0.7 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 levn@0.2.5 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 prelude-ls@1.1.2 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 type-check@0.3.1 \n  \u2502 \u2502 \u2514\u2500\u2500 source-map@0.1.43 \n  \u2502 \u251c\u2500\u2500 esprima@2.4.1 \n  \u2502 \u251c\u2500\u252c fileset@0.2.1 \n  \u2502 \u2502 \u251c\u2500\u252c glob@5.0.15 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 inflight@1.0.4 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 minimatch@3.0.0 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 path-is-absolute@1.0.0 \n  \u2502 \u2502 \u2514\u2500\u252c minimatch@2.0.10 \n  \u2502 \u2502   \u2514\u2500\u252c brace-expansion@1.1.2 \n  \u2502 \u2502     \u251c\u2500\u2500 balanced-match@0.3.0 \n  \u2502 \u2502     \u2514\u2500\u2500 concat-map@0.0.1 \n  \u2502 \u251c\u2500\u252c handlebars@3.0.0 \n  \u2502 \u2502 \u251c\u2500\u2500 optimist@0.6.1 \n  \u2502 \u2502 \u251c\u2500\u2500 source-map@0.1.43 \n  \u2502 \u2502 \u2514\u2500\u252c uglify-js@2.3.6 \n  \u2502 \u2502   \u251c\u2500\u2500 async@0.2.10 \n  \u2502 \u2502   \u2514\u2500\u2500 optimist@0.3.7 \n  \u2502 \u251c\u2500\u252c js-yaml@3.4.6 \n  \u2502 \u2502 \u251c\u2500\u252c argparse@1.0.3 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 lodash@3.10.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 sprintf-js@1.0.3 \n  \u2502 \u2502 \u251c\u2500\u2500 esprima@2.7.0 \n  \u2502 \u2502 \u2514\u2500\u2500 inherit@2.2.2 \n  \u2502 \u251c\u2500\u252c mkdirp@0.5.1 \n  \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8 \n  \u2502 \u251c\u2500\u2500 nopt@3.0.6 \n  \u2502 \u251c\u2500\u252c once@1.3.3 \n  \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n  \u2502 \u251c\u2500\u2500 resolve@1.1.6 \n  \u2502 \u251c\u2500\u2500 supports-color@1.3.1 \n  \u2502 \u251c\u2500\u2500 which@1.0.9 \n  \u2502 \u2514\u2500\u2500 wordwrap@0.0.3 \n  \u251c\u2500\u252c leadfoot@1.6.4 \n  \u2502 \u2514\u2500\u252c jszip@2.5.0 \n  \u2502   \u2514\u2500\u2500 pako@0.2.8 \n  \u2514\u2500\u252c source-map@0.1.33 \n    \u2514\u2500\u2500 amdefine@1.0.0 \nnpm WARN ENOENT ENOENT, open '/Users/vladikoff/tmp/package.json'\nnpm WARN EPACKAGEJSON tmp No description\nnpm WARN EPACKAGEJSON tmp No repository field.\nnpm WARN EPACKAGEJSON tmp No README data\nnpm WARN EPACKAGEJSON tmp No license field.\n\u279c  tmp  npm --version\n3.3.12\n\u279c  tmp  node --version\nv0.10.38\n\u279c  tmp  npm install grunt\nnpm WARN deprecated lodash@0.9.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^3.0.0.\n/Users/vladikoff/tmp\n\u2514\u2500\u252c grunt@0.4.5 \n  \u251c\u2500\u2500 async@0.1.22 \n  \u251c\u2500\u2500 coffee-script@1.3.3 \n  \u251c\u2500\u2500 colors@0.6.2 \n  \u251c\u2500\u2500 dateformat@1.0.2-1.2.3 \n  \u251c\u2500\u2500 eventemitter2@0.4.14 \n  \u251c\u2500\u2500 exit@0.1.2 \n  \u251c\u2500\u252c findup-sync@0.1.3 \n  \u2502 \u2514\u2500\u252c glob@3.2.11 \n  \u2502   \u2514\u2500\u2500 minimatch@0.3.0 \n  \u251c\u2500\u2500 getobject@0.1.0 \n  \u251c\u2500\u252c glob@3.1.21 \n  \u2502 \u251c\u2500\u2500 graceful-fs@1.2.3 \n  \u2502 \u2514\u2500\u2500 inherits@1.0.2 \n  \u251c\u2500\u252c grunt-legacy-log@0.1.2 \n  \u2502 \u2514\u2500\u2500 grunt-legacy-log-utils@0.1.1 \n  \u251c\u2500\u252c grunt-legacy-util@0.2.0 \n  \u2502 \u251c\u2500\u2500 async@0.1.22 \n  \u2502 \u251c\u2500\u2500 lodash@0.9.2 \n  \u2502 \u2514\u2500\u2500 underscore.string@2.2.1 \n  \u251c\u2500\u2500 hooker@0.2.3 \n  \u251c\u2500\u2500 iconv-lite@0.2.11 \n  \u251c\u2500\u252c js-yaml@2.0.5 \n  \u2502 \u251c\u2500\u252c argparse@0.1.16 \n  \u2502 \u2502 \u251c\u2500\u2500 underscore@1.7.0 \n  \u2502 \u2502 \u2514\u2500\u2500 underscore.string@2.4.0 \n  \u2502 \u2514\u2500\u2500 esprima@1.0.4 \n  \u251c\u2500\u2500 lodash@0.9.2 \n  \u251c\u2500\u252c minimatch@0.2.14 \n  \u2502 \u251c\u2500\u2500 lru-cache@2.7.3 \n  \u2502 \u2514\u2500\u2500 sigmund@1.0.1 \n  \u251c\u2500\u2500 nopt@1.0.10 \n  \u251c\u2500\u2500 rimraf@2.2.8 \n  \u2514\u2500\u2500 underscore.string@2.2.1 \nnpm WARN ENOENT ENOENT, open '/Users/vladikoff/tmp/package.json'\nnpm WARN EPACKAGEJSON tmp No description\nnpm WARN EPACKAGEJSON tmp No repository field.\nnpm WARN EPACKAGEJSON tmp No README data\nnpm WARN EPACKAGEJSON tmp No license field.\n\u279c  tmp\n```\n. > This is intentional  \nWhat is this behaviour based after? Do other tools do this?\n. Ah I think I understand the logic behind this now, thanks!\n. @ksamp666 I used intern with xvfb several times, I did switch to VNC because it was faster, but here's an example that still uses xvfb: https://github.com/miketaylr/webcompat.com/blob/master/.travis.yml#L12-L34\n. Ignore the Python parts in that script.\n. I'm excited for this feature, thanks for working on this!\n. > @alekstorm has an interesting solution -- symlink the AMD dependencies into somewhere other than node_modules, and have browser-based code look there.\nThat is a weird pattern for npm / node based projects\n. What if we npm shrinkwrap the dependencies? Last time I tried this it force tree of dependencies in npm 3\n. @jrgm the output looks excellent!\n. @jason0x43 could you pull this in, we use the reporter all the time and I'll keep an eye on it. Thanks!\n. Hello @cch5ng, \nError: ENOENT, no such file or directory '/home/travis/build/cch5ng/webcompat.com-1/node_modules/intern/node_modules/digdug/browserstack/BrowserStackLocal'\nThe error means the file is not found, please check make sure you are calling it with the right path. \nIf you look here https://github.com/theintern/digdug/blob/1.2.0/BrowserStackTunnel.js the path to the tunnel should be digdug/BrowserStackTunnel.js and not digdug/browserstack/BrowserStackLocal\n. @SlexAxton are you able to debug this using https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27 to pinpoint the problem?\n. The debugger needs to be attached to either https://github.com/theintern/intern/blob/master/bin/intern-client.js or https://github.com/theintern/intern/blob/master/bin/intern-runner.js\n. > At the moment I lean towards shrinkwrap, or at most using '~'.\n\ud83d\udc4d . If I  update to Selenium 3.3.1 and Geckodriver 0.15.0 I get:\nError: [POST http://localhost:4444/wd/hub/session/611d26b4-6217-4eaa-bbbe-98e5f0af8559/element/28/value / {\"value\":[\"s\",\"i\",\"g\",\"n\",\"i\",\"n\",\"0\",\".\",\"9\",\"4\",\"7\",\"7\",\"3\",\"6\",\"1\",\"0\",\"7\",\"2\",\"7\",\"8\",\"6\",\"1\",\"5\",\"2\",\"@\",\"r\",\"e\",\"s\",\"t\",\"m\",\"a\",\"i\",\"l\",\".\",\"n\",\"e\",\"t\"]}] Expected [object Undefined] undefined to be a string\nBuild info: version: '3.3.1', revision: '5234b32', time: '2017-03-10 09:04:52 -0800'\nSystem info: host: 'Vlads-MBP', ip: '192.168.1.144', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.12.4', java.version: '1.8.0_111'\nDriver info: org.openqa.selenium.firefox.FirefoxDriver\nCapabilities [{moz:profile=/var/folders/p7/39d7lczd60q26jjqg29z57w00000gn/T/rust_mozprofile.ZdZtPYQsPWNT, rotatable=false, timeouts={implicit=0, pageLoad=300000, script=30000}, pageLoadStrategy=normal, platform=ANY, specificationLevel=0, moz:accessibilityChecks=false, acceptInsecureCerts=false, browserVersion=53.0, platformVersion=16.5.0, moz:processID=46688, browserName=firefox, platformName=darwin}]\nSession ID: d4d1378c-9ee2-454a-a0d4-472d0a7ee4dc\nThere might be some changes in the Spec for send keys. @jason0x43 Do you know if there is a way to get access to marionette logs while the Intern tests are running? I can never figure that one out :( . Ref: https://github.com/mozilla/geckodriver/issues/659#issuecomment-295727985. After the geckodriver issue addressed, there is a problem in feature detection\nif (!('dynamicViewport' in capabilities)) {\n  testedCapabilities.dynamicViewport = session.getWindowSize().then(function (originalSize) {\n   return session.setWindowSize(originalSize.width, originalSize.height);\n  }).then(supported, unsupported);\n} \nhttps://github.com/theintern/leadfoot/blob/4f11f10b5a4d429cc3eb5da74fc31a31d0da27a7/src/Server.ts#L536\nCommenting this out gets the tests working.... @jason0x43 meanwhile, I was wondering how do you get access to Marionette logs via Leadfoot?  This way I can file better bug reports or forward those logs to the Selenium team. @jason0x43 I'm trying to debug this a bit. If you look at this post:\nhttps://github.com/SeleniumHQ/selenium/issues/4664#issuecomment-328154261\nHow do we use the new FirefoxOptions class via Intern?\nCurrently I use the config.capabilities.firefox_profile but seems like that's the \"legacy way\" based on that comment. . Ok in case someone finds this the new firefoxOptions seem to work by updating the following:\n``diff\ndiff --git a/tests/intern.js b/tests/intern.js\nindex 67700a0..61b6915 100644\n--- a/tests/intern.js\n+++ b/tests/intern.js\n@@ -78,20 +78,20 @@ function (intern, topic, firefoxProfile) {\n       // this tells SeleniumTunnel to download geckodriver\n       drivers: [{\n         name: 'firefox',\n-        version: '0.16.0'\n+        version: '0.19.0'\n       }],\n       // version of Selenium\n-      version: '3.4.0'\n+      version: '3.6.0'\n     }\n   };\n-\n+  config.capabilities['moz:firefoxOptions'] = {};\n   // to create a profile, give it theconfig` option.\n-  config.capabilities.firefox_profile = firefoxProfile(config); //eslint-disable-line camelcase\n+  config.capabilities['moz:firefoxOptions'].profile = firefoxProfile(config); //eslint-disable-line camelcase\nif (args.firefoxBinary) {\n-    config.capabilities.firefox_binary = args.firefoxBinary; //eslint-disable-line camelcase\n+    config.capabilities['moz:firefoxOptions'].binary = args.firefoxBinary; //eslint-disable-line camelcase\n   }\n```\nOne issue I have is in FF56 I get: Missing 'handle' parameter\nError: [POST http://localhost:4444/wd/hub/session/89f3db64-29bf-1f4c-8e24-33cd4a6ba352/window / {\"name\":\"newwindow\"}] Missing 'handle' parameter\nBuild info: version: '3.6.0', revision: '6fbf3ec767', time: '2017-09-27T16:15:40.131Z'\nSystem info: host: 'vladikoffs-MBP', ip: '192.168.1.41', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.13', java.version: '1.8.0_144'\nDriver info: driver.version: unknown\n  at Test.signup [as test]  <tests/functional/sync_v3_email_first.js:105:10>\nSuite firefox on any platform - Firefox Desktop Sync v3 email first FAILED\nError: [POST http://localhost:4444/wd/hub/session/89f3db64-29bf-1f4c-8e24-33cd4a6ba352/window / {\"name\":\"2147483680\"}] Missing 'handle' parameter. @jason0x43 any ideas where name and handle get set for \nError: [POST http://localhost:4444/wd/hub/session/ab1cd1c6-3eb7-294e-ac4c-7c209307ff1e/window / {\"name\":\"2147483649\"}] Missing 'handle' parameter\nWith this code:\njs\n        .getAllWindowHandles()\n        .then((handles) => {\n          console.log('handles', handles)\n          myHandle = handles[1];\n        })\n        .switchToWindow('2147483649')\nI always get handles [ '2147483649', '2147483672' ] but even if hardcode it it is still missing the handler option. \nSome refs: https://github.com/SeleniumHQ/selenium/pull/2718 and https://github.com/SeleniumHQ/selenium/pull/2718. Also why are the handles always the same names... \ud83e\udd26\u200d\u2642\ufe0f . @jason0x43 ugh my bad, I searched for it but failed to find it :P. @jason0x43 so besides that handle fix, this scenario doesn't work anymore:\nIf a window is opened in an .execute, example\n```js\nfunction openWindow (url, name) {\n  var newWindow = window.open(url, name || 'newwindow');\n})\nreturn this.parent.execute(openWindow, [ url, windowName ]);\n```\nThe call to .switchToWindow('newwindow') will fail with:\nNoSuchWindow: [POST http://localhost:4444/wd/hub/session/79fd23b4-8d34-7348-9b44-7ab9a87617a1/window / {\"handle\":\"newwindow\"}] Unable to locate window: newwindow\nThe workaround is \njs\n.getAllWindowHandles()\n  .then(handles => {\n     return this.remote.switchToWindow(handles[1])\n  }). We switched the workaround to \ndiff\n--        .switchToWindow('newwindow')\n++        .then(switchToWindow(1)). I looked at porting our intern.js with custom configs: https://github.com/mozilla/fxa-content-server/blob/master/tests/intern.js to Intern 4 but no luck yet. \nWould I need a loader to just execute functional tests?\nTried reading https://theintern.io/docs.html#Intern/4/docs/docs%2Fchanges_from_3.md/execution . So would this:\njs\ndefine([\n  'intern',\n  'intern/browser_modules/dojo/has!host-node?intern/browser_modules/dojo/topic',\n  './tools/firefox_profile'\n],\nfunction (intern, topic, firefoxProfile) {\n  var args = intern.args;\nbecome something like: \njs\nvar intern = require('intern');\nvar firefoxProfile = require('firefoxProfile');\nintern.configure({    \n // ...\n  functionalSuites: [\n      'tests/functional/mocha',\n      'tests/functional'\n    ]});\nintern.run();\n?  \nI guess the docs are missing Node js usage, the import statements do not work in Node 6 (or 8?)?. For now for a quick fix I added leadfoot to dependencies and used\nconst pollUntil = require('leadfoot/helpers/pollUntil');, but there might be a better way . This is for the migration guide. To fix this the test must be listed under tests: {} object and not in the root.\nhttps://theintern.io/docs.html#Intern/4/docs/docs%2Fwriting_tests.md/the-test-lifecycle\nexample:\n```\nregisterSuite('mailcheck', {\n  beforeEach () {\n    return this.remote.then(clearBrowserState());\n  },\nafterEach () {\n    return this.remote.then(clearBrowserState());\n  },\n  tests: {\n    'tooltip works': function () {\n      var BAD_EMAIL = 'something@gnail.com';\n      var CORRECTED_EMAIL = 'something@gmail.com';\n  return this.remote\n    .then(openPage(EXP_MAILCHECK_URL, selectors.SIGNUP.HEADER))\n    .then(type(selectors.SIGNUP.EMAIL, BAD_EMAIL))\n    .then(click(selectors.SIGNUP.PASSWORD, selectors.SIGNUP.SUGGEST_EMAIL_DOMAIN_CORRECTION))\n    .then(click(selectors.SIGNUP.LINK_SUGGEST_EMAIL_DOMAIN_CORRECTION))\n\n    .then(testElementValueEquals(selectors.SIGNUP.EMAIL, CORRECTED_EMAIL));\n}\n\n}\n});\n```. woooo awesome!!!!. Same here:\n! Cannot read property 'numToReport' of undefined\nTypeError: Cannot read property 'numToReport' of undefined\n  at Pretty.suiteEnd  <src/lib/reporters/Pretty.ts:162:41>\n  at <src/lib/reporters/Reporter.ts:94:31>\n  at <src/lib/executors/Executor.ts:302:30>\n{ Error: One or more suite errors occurred during testing\n    at /Users/vladikoff/mozilla/fxa-local-dev/fxa-content-server/node_modules/intern/lib/executors/Executor.js:400:45\n    at /Users/vladikoff/mozilla/fxa-local-dev/fxa-content-server/node_modules/@dojo/core/async/Task.js:252:28\n    at handler (/Users/vladikoff/mozilla/fxa-local-dev/fxa-content-server/node_modules/@dojo/core/async/ExtensiblePromise.js:146:37)\n    at <anonymous>\n    at process._tickDomainCallback (internal/process/next_tick.js:228:7) reported: true }. Thanks for adding this \ud83d\udc4d going to use this!\nEdit: in our case, the CI logs grow way too much with the download progress. @jason0x43 I had a hunch that was it too! Thank you for looking into it!. The docs can be found here (just in case you missed it): https://theintern.io/docs.html#Intern/4/docs/README.md. This might fail on machines that don't have GIT in path. (i.e in some Windows CMDs) \n. do we need this new line if there will be no coverage results? i.e should the new line be included iff there is a report?\n. :+1:\n. Nit: New line after }, inconsistent with a different else if later in the code. \n. Nit: https://github.com/theintern/intern/pull/283/files?diff=unified#r18708003\n. please do not add these OS X specific things. see https://help.github.com/articles/ignoring-files/#create-a-global-gitignore\n. ",
    "agray": "I think I just experienced this issue.  Jenkins 1.597 connecting to SauceLabs building Intern angular-example.\nJenkins console:\n```\nC  \no  \nn  \nn  \ne  \nc  \nt  \ni  \no  \nn  \ne  \ns  \nt  \na  \nb  \nl  \ni  \ns  \nh  \ne  \nd  \n.\nReady  \nError: socket hang up  \nat createHangUpError \nat Socket.socketOnEnd \nat Socket.g \nat Socket.emit \nat <_stream_readable.js:944:16>\nat process._tickCallback \nTOTAL: tested 0 platforms, 0/0 tests failed; fatal error occurred\nnpm ERR! Test failed. See above for more details.\nBuild step 'Execute Windows batch command' marked build as failure \nbuildstep.4Finished: FAILURE`\n```\n. Any suggestions on where the error is emanating from so I can follow up\nwith someone else?\nOn Saturday, 24 January 2015, Colin Snover notifications@github.com wrote:\n\nThis ticket is about Sauce Labs tunnel hanging the test process without\nthrowing an error. An error is being thrown in your case, so it is not\nrelated to this issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/4#issuecomment-71304711.\n. I am got this today.  Could this issue please be reopened:\n\n```\nStarting tunnel...\n, build 1285 bd6579a\nUsing no proxy for connecting to Sauce Labs REST API.\n\nA newer version of Sauce Connect (build 1630) is available!\nDownload it here:\nhttps://saucelabs.com/downloads/sc-4.3.6-win32.zip\n\n24 Jan 17:54:21\nStarted sc proxy on port 7416.\n24 Jan 17:54:21-Please wait for 'you may start your tests' to start your tests.\n24 Jan 17:54:Starting secure remote tunnel VM...\nSecure remote tunnel VM provisioned.\nTunnel ID: eda5d37fd09a41cb96b345d82ef0b5ac\nSecure remote tunnel VM is now: running\nRemote tunnel host is: maki77010.miso.saucelabs.com\nUsing no proxy for connecting to tunnel VM.\nStarting Selenium listener...\nEstablishing secure TLS connection to tunnel...\nSelenium listener started on port 4444.\n24Jan17:54:34-Sauce Connect is up, you may start your tests.\n24 J\nConnection established.\nReady\nInitialised internet explorer 11 on WINDOWS\nInitialised internet explorer 10 on WINDOWS\nInitialised internet explorer 9 on WINDOWS\nundefined: Failed to load module angular/angular from /angular/angular.js (parent: 33)\nError: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at handler <intern\\node_modules\\dojo\\dojo.js:731:7>\nInitialised firefox 28.0 on MAC\nNo unit test coverage for internet explorer 11 on WINDOWS\ninternet explorer 11 on WINDOWS: 0/0 tests failed\nundefined: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731:7\nNo stack or location\nNo unit test coverage for internet explorer 10 on WINDOWS\ninternet explorer 10 on WINDOWS: 0/0 tests failed\nundefined: Failed to load module angular/angular from /angular/angular.js (parent: 33) \n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731\nNo stack or location\nundefined: Error: Failed to load module angular/angular from /angular/angular.js (parent: 33) \n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731\n at .run/window.onerror <__intern\\lib\\realClient.js:57>\nNo unit test coverage for internet explorer 9 on WINDOWS\ninternet explorer 9 on WINDOWS: 0/0 tests failed\nNo unit test coverage for firefox 28.0 on MAC\nfirefox 28.0 on MAC: 0/0 tests failed\nInitialised firefox 28.0 on WINDOWS\nInitialised chrome 39.0.2171.65 on Mac OS X\nInitialised chrome 39.0.2171.65 on Windows NT\nInitialised firefox 28.0 on LINUX\nundefined: Error: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731\n at .run/window.onerror <__intern\\lib\\realClient.js:57>\nundefined: Failed to load module angular/angular from /angular/angular.js (parent: 33)\nError: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at HTMLScriptElement.handler <__intern\\node_modules\\dojo\\dojo.js:731:13>\nNo unit test coverage for firefox 28.0 on WINDOWS\nfirefox 28.0 on WINDOWS: 0/0 tests failed\nundefined: Failed to load module angular/angular from /angular/angular.js (parent: 33)\nError: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at HTMLScriptElement.handler <__intern\\node_modules\\dojo\\dojo.js:731:13>\nNo unit test coverage for chrome 39.0.2171.65 on Mac OS X\nchrome 39.0.2171.65 on Mac OS X: 0/0 tests failed\nNo unit test coverage for chrome 39.0.2171.65 on Windows NT\nchrome 39.0.2171.65 on Windows NT: 0/0 tests failed\nundefined: Error: Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731\n at .run/window.onerror <__intern\\lib\\realClient.js:57>\nNo unit test coverage for firefox 28.0 on LINUX\nfirefox 28.0 on LINUX: 0/0 tests failed\nInitialised safari 6.0.5 on MAC\nInitialised safari 7.0.6 on MAC\nundefined: Error: __Failed to load module angular/angular from /angular/angular.js (parent: 33)\n at http://localhost:9000/intern/node_modules/dojo/dojo.js:731\nNo stack or location\nundefined: __Error: Failed to load module angular/angular from /angular/angular.js (parent: 32)__\n at http://localhost:9000/__intern/node_modules/dojo/dojo.js:731\nNo stack or location\nNo unit test coverage for safari 6.0.5 on MAC\nsafari 6.0.5 on MAC: 0/0 tests failed\nNo unit test coverage for safari 7.0.6 on MAC\nsafari 7.0.6 on MAC: 0/0 tests failed\nInitialised chrome 39.0.2171.71 on Linux\nundefined: __Failed to load module angular/angular from /angular/angular.js (parent: 33)\nError: Failed to load module angular/angular from /angular/angular.js (parent: *33)\n at HTMLScriptElement.handler <__intern\\node_modules\\dojo\\dojo.js:731:13>\nNo unit test coverage for chrome 39.0.2171.71 on Linux\nchrome 39.0.2171.71 on Linux: 0/0 tests failed\n ---------------------|-----------|-----------|-----------|-----------|\n File | % Stmts |% Branches | % Funcs | % Lines |\n---------------------|-----------|-----------|-----------|-----------|\n adm-zip\\ | 3.55 | 0.36 | 0 | 3.72 |\n adm-zip.js | 3.42 | 0.77 | 0 | 3.5 |\n zipEntry.js | 5.08 | 0 | 0 | 5.5 |\n zipFile.js | 2.53 | 0 | 0 | 2.65 |\n adm-zip\\headers\\ | 5.34 | 0 | 0 | 5.34 |\n entryHeader.js | 3.13 | 0 | 0 | 3.13 |\n index.js | 100 | 100 | 100 | 100 |\n mainHeader.js | 6.06 | 0 | 0 | 6.06 |\n adm-zip\\methods\\ | 1.4 | 0 | 0 | 1.49 |\n deflater.js | 0.38 | 0 | 0 | 0.38 |\n index.js | 100 | 100 | 100 | 100 |\n inflater.js | 3.25 | 0 | 0 | 3.81 |\n adm-zip\\util\\ | 16.04 | 3.64 | 4.17 | 16.67 |\n constants.js | 100 | 100 | 100 | 100 |\n errors.js | 100 | 100 | 100 | 100 |\n fattr.js | 17.39 | 12.5 | 0 | 17.39 |\n index.js | 100 | 100 | 100 | 100 |\n utils.js | 9.09 | 2.13 | 7.69 | 9.59 |\n---------------------|-----------|-----------|-----------|-----------|\nAll files | 3.06 | 0.41 | 0.46 | 3.21 |\n---------------------|-----------|-----------|-----------|-----------|\n TOTAL: tested 11 platforms, 0/0 tests failed; fatal error occurred\n```\n. ",
    "lbod": "@csnover I wondered if you had advice on this for users if it doesn't make it into intern?\nI saw on SO you answered a question\n\nso if you\u2019re going to modify native objects for the purposes of testing, you\u2019ll either need to restore them yourself later (in your suite teardown) or create your own sandboxing (by creating a new document or a new frame, depending upon what you are actually trying to test)\n\nIs there a pattern end users can implement to achieve this (without teardown)? Would the test fixture need to create the iframe? If so how could topics from the test be published to ClientSuite? e.g. /suite/end and /client/end\n. I've ran into a fundamental problem due to there being no sandboxing in intern.\nCustom components i.e. polymer/web components, means all components will need to be name spaced \nsee https://dvcs.w3.org/hg/webcomponents/raw-file/d7d1b718de45/spec/custom/index.html#terminology\n\nAn element definition can only be registered with one document\n\nWhilst name spacing the elements will work, it's more than cumbersome and sand boxing via an iframe would seem a much safer option all round \n. I don't agree it's a spec bug, it's clearly written in the draft; it is still draft though so could change but I wouldn't expect it to e.g. you wouldn't expect 2 HTMLElement elements defined in a document\nHowever, this isn't entirely relevant to the issue, it's just an example of where teardown won't work in unit tests. If you have to unit test a large number of tests it's almost certain collisions of some sort will occur.\nWhat would be helpful, if you could give me any pointers to implement sandboxing in intern unit tests whether it's an iframe or otherwise & I'm happy to do the work & submit a PR\n. @sbrunot I'm interested if you've managed to get any tests running through selendroid locally?\nOr does it just fail completely and no tests are ran?\nThere's the issue that Android runs behind a virtual router and I'm wondering if that's what the problem is i.e. the IP 10.0.2.2 must be used to resolve back to the host's loopback (for localhost). Is that the issue? e.g. http://developer.android.com/tools/devices/emulator.html#networkaddresses\nI notice that @csnover ran his tests through Saucelabs, I'm not sure if Saucelabs setup their Android VM's with an updated hosts file that maps localhost to 10.0.2.2\nI'm trying to run the delite tests now locally through android and was able to get the unit tests working manually by entering http://10.0.2.2:9000/__intern/client.html?config=delite%2Ftests%2Fintern.local&reporters=webdriver in the browser\ne.g. run through selendroid \n\ne.g. run manually through a browser with ip 10.0.2.2\n\n. Ignore all that, adding proxyUrl = 'http://hostip:9000/' I can run the delite unit tests, I do see errors in the functional tests so I guess that's what you're referring to?\n. +1 for sinon however we ran into issues with xhr2 when dojo 1.8 was released, though the maintainer seemed to be amenable to accepting patches, it looks like more changes have been made recently so it may work now\n. @csnover is there any update on this and have you any thoughts whether support for stubbing/mocking libraries is likely to be included in future? \n. Ok thanks, you should probably mark this enhancement as invalid then. At least it lets others know.\nAlso I suggest you update the comparison table on the README to include this, other libraries like Buster and Jasmine support stubs/mocks & spies\n. > I don\u2019t understand this question\nThe question was \"should the lcov reporter allow for configuration?\" So I suppose it'd be a feature request\nIf not then it should be made clearer on the wiki if you want a.n. other configuration of lcov reporting, just write your own reporter\n. nm, please ignore - what I was trying to do with html lcov reports wouldn't be easily configurable anyway\n. @phated , if you're interested I started a TAP reporter which I think is finished now, to be used as a custom reporter.\nI also created a cobertura lcov reporter for jenkins to consume which was simple, the OOTB console reporters aren't of any use to jenkins\n. @csnover I'm a bit confused about this, I asked you some time ago whether xunit i.e. junit format, could be added to intern and you advised a custom reporter instead, also advising the TAP reporter would be better, which I wrote.\nIs an xunit reporter format now likely to be included in intern?\nIf so then the lcovhtml and cobertura reports should also be included (these are just simple extensions of the istanbul lcovonly reporter) because both of these are standard Jenkins configuration and easily consumed.\nI can submit a pull request if so\n. @csnover  apologies if that's the case but I've been under the impression via our discussions it'd need to be a custom reporter and not part of intern.\nI believe I have an acceptable TAP reporter now, it's not committed to GH but if there's an xml unit reporter on it's way then that's my preference as the TAP reporter plugin in Jenkins is ugly. BTW xunit is just the x-compatible way to refer to xml unit reports e.g. for .net, java, c++, even cobol!\nIf you accept the lcov cobertura/html reports PR and this existing xml report enhancement, there's no more work left to support Jenkins (code quality reports are obviously straightforward  jshint --reporter=jslint > lintreport.xml)\n. Just wanted to make sure no one is actually working on this?\nIf that's the case I can look at using the TAP reporter I'd been playing with and make it write the necessary XML instead. It's not much work but I won't get a chance to do it for a cpl of weeks. Of course, I'll need @csnover to feedback and recommend changes till it's acceptable.\n. @csnover I've sent you a mail\n. @eisakson yeh that was me. I haven't taken this much farther as the project ended up using jasmine and karma instead (they were using jquery so it made sense to them).\nI have an almost complete xunit and tap reporter at work but didn't commit anything as it's messy and couldn't get answers on how best to collect all unit and functional tests, IIRC it does some brittle looking iteration on /runner/end to collect the results. Writing the tap and xunit reports was straightforward though.\nI think grouped tests were still to be done, can't remember.\nAlso, xunit eventually seemed a poor format for JS tests as compared to TAP (TAP's extensible), seeing as jenkins handles both I'd probably prefer TAP\nI could commit and you can finish them off if you want? It's very little code so shouldn't be difficult\n. @csnover thanks\n. Actually it doesn't seem to be a grunt only issue, it seems related to #111 \nI tried running via node node_modules/intern/runner.js and see the same problems\n. Thanks for replying, it's appreciated but..\nAre you saying don't use baseUrl in this circumstance and/or not using the Grunt task? I'd been trying to execute Grunt from the parent using grunt  test:local --gruntfile delite/Gruntfile.js but had the same problem (and also using grunt -b ..)\nThe only way I can get this to work is running node delite/node_modules/intern/runner.js config=delite/tests-intern/intern.local.js from the parent and removing the loader config which means I'm back to square one.\nI've been trying to debug through the Grunt task to see where it's going wrong too but none the wiser\n. @jason0x43 thanks for the quick turnaround, much appreciated. Just retested and it all works.\nI might be pushing this but what's the chance of a patch release soonish?\n. @jason0x43 hi, any update on that patch release? I tried to run against pre 1.5 but I saw npm errors.\nIt's no big deal but it would be nice to start using now\n. edit: Ignore all of that, 1.5.0-pre isn't npm registered so it certainly wasn't that\n. @jason0x43 thank you for landing that\n. Sorry I've been ill and haven't followed this up, @csnover and @jason0x43 does this fix https://github.com/theintern/intern/commit/c4d49e68b22bd38236d2ac6c86c43db5a33c4ecf#commitcomment-5632352 ?\n. turns out it was https://github.com/theintern/intern/commit/4f2eba3dc300e750608addcb70a2610a0f708b5b thanks @csnover \n. You are not understanding and/or I've not correctly explained, secure keys, please re-open\n. Interesting, this appears to be an intern issue.\nAfter some debugging and hacking I can get android tests to run in SauceLabs...\nLike I say, just hacking at the moment but see https://saucelabs.com/tests/a554ee02d9944987bda7272b1dec6dc8\nhttps://github.com/theintern/intern/blob/master/lib/wd.js#L730 captures an UnknownError from Webdriver (but doesn't actually log it) i.e. Error: Error response status: 13.. Not sure what the unknown error is referring to but at this point intern stalls and no further wd commands are sent.\nAll I did to get the test running was to comment out the : \n//  if (error) {\n//      dfd.reject(error);\n//      return;\n//  }\nObviously that isn't correct but as I say, this is an intern issue & not WebDriver nor SauceLabs.\nThat actual test fails in the functional tests for other reasons I've yet to investigate, could be bugs in the wire protocol or the tests or w/e, however it's clear this should be handled better in intern.\n. @csnover you're not telling me how to use selendroid, what capabilities do we need to specify? \nLike I say, that badly hacked change makes it work, have you chased this upstream? Can you help me explain how I can chase upstream?\nThe saucelabs guys have previously said they'll support or aim to pressure support of the androiddriver, so it's not currently dead from what I understand\n. Also, does it not concern you that intern rejects a deferred and doesn't log it?  IMO that needs to be cleaned up\n. Apologies, no gists yet, I'm trying to migrate locally to try out 2.0\nhttps://github.com/ibm-js/delite/blob/master/tests/functional/TabIndex.js#L21\n. And sorry I should have left more comments. If I add sleeps to that test after each execute it works\nWhy would that be needed or what should be the expected usage?\nreturn this.remote.findById(\"d1\").click()       // start on first element, before widgets\n        .execute(\"return document.activeElement.id\").then(function (value) {\n            // start focus on the node before the two widgets\n            assert.equal(\"d1\", value);\n        })\n        .sleep(500)\n        .pressKeys(\"\\uE004\")    // tab\n        .execute(\"return document.activeElement.parentNode.id\").then(function (value) {\n            // focused on <span> inside of widget\n            assert.equal(\"d2\", value);\n        })\n        .sleep(500)\n        .pressKeys(\"\\uE004\") // tab\n        .execute(\"return document.activeElement.parentNode.id\").then(function (value) {\n            // focused on <span> inside of widget\n            assert.equal(\"d3\", value);\n        })\n        .sleep(500)\n        .pressKeys(\"\\uE004\") // tab\n        .execute(\"return document.activeElement.id\").then(function (value) {\n            assert.equal(\"d4\", value);\n        });\n. > The failure I was seeing was due to waitForCondition timing out. The default async timeout on the remote is 0ms, and waitForCondition (and the new the pollUntil function) use executeAsync. I'm still looking into this.\nThanks, if it's any use I'm using pollUntil\n. @csnover it sounds like you're saying iOS tests are currently not supported (well), just so we can focus our testing efforts better.\nI do see the same in delite where tests will fail in intern 2.0.1 but run in 1.7. \nIt appears both Android and iOS emulators/simulators aren't stable and not worth testing against? SauceLabs have said they plan to have real device testing and selendroid (for chrome testing) by the end of the year so maybe that's the point when mobile web testing will be supported\n. It'll create an \"html-report\" folder in the \"root\" of the repository alongside the lcov.info, cobertura-coverage.xml files. I guess it can be configured but it's not important to Jenkins because you can configure the Jenkins project to look for a directory via the \"publish HTML reports\" post build action\n. ",
    "nickcmaynard": "Definitely a +1 from me.  In DOH, I addressed this issue by writing a wrapper page to test invididual tests.  In Intern, I'm finding it very difficult.\nManually tearing down tests is a pain, particularly when you've done some DOM manipulations, or altered some global state of your app.\nI'd hope to see this configurable on both suite and test function levels.\n. @csnover - thanks for getting back to me.\nThe Error in question is thrown by dojo's require - I'm testing a piece of application code handles a situation where it has been passed a \"bad\" module ID correctly.  Because we're in an async callback, we can't catch the exception nicely - dojo throws this particular error.\nGET http://localhost:9100/badPackage/badType.js 404 (Not Found) dojo.js:740\nUncaught Error: Failed to load module badPackage/badType from /badPackage/badType.js (parent: *54) dojo.js:731\nThis entire test suite passes in the browser client runner ie. intern/client.html\nSo I guess what we're seeing is that Errors thrown from outside the suite's execution context are killing the test run?  Ideally, that wouldn't be the case (as with the browser version).\n. Yep, understand that.  I have done some work attempting to make these classes work with the ReleaseJS loader, but it seems perverse to use a different loader simply to allow tests to pass.\nUnfortunately, we have some other tests that also exhibit this default window.onerror behaviour, but aren't caused by the loader - rather, it's another part of Dojo that's the culprit.\nI guess this is rapidly turning into a feature request, rather than a bug report.  I wonder if there'd be a way to ignore errors with stack traces that don't include the intern runner?  Perhaps as a switchable feature?\n. @csnover Thank you - for the loader situation, yes.  I was able to handle my other errors by adding /lots/ of try/catch blocks to handle misbehaving dojox/widget/Standby code.\nHere's hoping the Dojo 2.0 loader is updated soon to handle failure in a more friendly manner - hopefully via failure callback a la RequireJS.\n. ",
    "hakatashi": "@jason0x43 @dylans I'm very interested to work for solving this issue as my GSoC 2016 project. I'll apply, but I have several questions.\n- Are there any expectation of the way to implement this feature? At first glance I think iframe (for browsers) and child process spawning (for Node.js) is enough to accomplish this task. But I'm not sure this is the right way.\n- Are there any chance to make good use of my experience of coding with TypeScript? While Ideas List page is listing TypeScript as a part of knowledge prerequisite for this task, I couldn't find any working TypeScript code in this repository (except for typings files).\nThanks.\n. @dylans wow, thanks for the guidance. It seems relaxing.\n@kitsonk Fmm... OK. So, I'll include a certain period of time to investigate and discuss the way to implement this feature. Maybe I was hasty to jump to the conclusions.\n. Thanks, I'll fix this...\n. ",
    "dylans": "@hakatashi To answer the second question, there is a fairly substantial work in progress towards Intern 4 that is rewritten in TypeScript at https://github.com/theintern/intern/tree/experimental-ts\n. Take a look at the example at https://github.com/theintern/intern/wiki/Writing-Tests#functional . Rather than .wait(1000), I think you simply want .end() between the two steps. If you really want to use promises for this type of example, you would want to use .then(), though I don't think that's necessary or makes sense with your particular test case.\n. @zmorris it's on the roadmap for Intern 4. In the interim, https://github.com/theintern/intern/issues/650 has a good solution for use with Intern 3.x, though it basically calls out to Cucumber rather than supporting gherkin syntax within Intern.. > I'm also thinking that the true power of Intern is this ability to adapt other testing frameworks under a common convention of naming each test and specifying the steps inside of a suite.\n@zmorris To answer a small point from your comment, I often describe Intern's most important feature is that it's a really good glue architecture for combining things that are difficult to combine together normally, in a consistent, flexible, and coherent manner. It's also what I feel Dojo does pretty well, in particular the forthcoming Dojo 2. I would love to address those additions and a number of other things that we don't yet integrate with, as well as finally having a solid answer for Cucumber support!. I think the request is to create a non-rudimentary HTML reporter that visually shows off the results you get with your tests.\nBeyond that the request seems to be asking to be able to click links from within the report to rerun tests, which may or may not make sense depending on the context.\n. This is like a result of #105 , see module loading console error in http://d.pr/i/i3JT\n. Fixing #105 has resolved this for me.\n. #25 was an attempt at this, but it was unfinished, and no longer merges cleanly after recent updated to Intern. We would certainly consider and accept a well-tested patch to get support for Benchmark.js working with Intern.\n. @kitsonk I think many of us want performance testing as part of Intern, and we've had several requests asking about it. I don't have a clear idea of where help is needed...\n. I believe this is fixed in 1.6.0, see release notes: https://github.com/theintern/intern/releases/tag/1.6.0\n. Hi @rhpijnacker,\nWhile I can appreciate your desire to keep things as small as possible, this is not really feasible. Intern uses Node.js and npm to install its dependencies, for unit testing from the command-line and for functional testing against Selenium and/or Sauce Labs via its remote interface, and for the generation of code coverage reports. Unless you wanted to only do unit tests of your code in browsers on your local machine, you will need Node.js to be able to take advantage of the features of Intern.\nThe version of dojo that is used by Intern is a cleaned-up/streamlined branch of Dojo intended to make the performance and dependencies as small as possible (in other words, it removes the legacy content from 1.x). dgrid and dijit are not something that Intern depends on.\n. Thanks @OClement , pull request added at https://github.com/theintern/intern-tutorial/pull/11\n. I'm not sure I understand this one, as functionalSuites is available as a CLI argument, but will only have an impact when you use runner.js.\n. @bumbu The point we make in the contribution guidelines is, please first start by asking a question, and we're happy to help. If it's a bug, then open it here. It helps make it a lot more efficient to keep the issue system limited to bugs, etc. It sounds like there's a configuration issue, because if your behavior was common to everyone, then we would never have released Intern 2, as we would have run into this issue many times and solved it already. So please ask on Stack Overflow and we'll hopefully be able to help figure out what is causing this unexpected behavior. Thanks!\n. @parametrization presumably you are still using Babel to transpile your ES6 code into something that can be run in all browsers today? In that case, it's just a matter of following the steps at https://theintern.github.io/intern/#testing-other-module to test transpiled code (for example, https://github.com/theintern/intern-examples/blob/master/react-example/tests/support/jsx.js is how you could test React code that uses JSX), or to just transpile everything from ES6 modules to AMD modules prior to testing (e.g. like we suggest for TypeScript testing at https://www.sitepen.com/blog/2015/03/24/testing-typescript-with-intern/ ).\nSo I would think you can write your tests using ES6, and use Babel to transpile your tests into ES5 + AMD modules, and then then run them.\n. @siboulet We're late into the release candidate stage for Intern 3, but it's up to @csnover and @jason0x43 to decide on that, or if we wait until 3.1 or 4.0 for a change to Istanbul.\n. @kevingreen24 it depends how your modules are authored... you could use a map configuration setting when testing if you're using AMD modules (e.g. http://www.sitepen.com/blog/2013/07/03/dojo-faq-what-is-the-map-config-option/ )\n. Assuming this works as described, a huge :+1: \n. Reading through https://karma-runner.github.io/0.12/intro/how-it-works.html and https://github.com/karma-runner/karma/raw/master/thesis.pdf (the university thesis behind karma), basically this is what they are doing via a Node.js server:\n- Serve tests to browsers within a test runner\n- Collect test results from clients\n- Open web browsers and run tests\n- Automatically run tests again if files change within a project\n- If browser is already open and running tests, tell the browser to rerun the tests when files change (uses WebSockets to communicate to the open clients)\n- Made attempts to solve a few other problems along the way (DI, mocks, etc.)\nPerhaps a few shortcuts to get some of the things that Intern doesn't do today would be as follows, and perhaps make this easier for someone in the community to contribute to (as it could probably just be done as a few grunt tasks with the existing code, and there are already well established watch tasks with Grunt: https://github.com/gruntjs/grunt-contrib-watch ):\n- Grunt task to watch for changed files and run unit tests in all browsers listed within your Intern config by opening the browsers, and running intern, e.g. http://localhost:9001/__intern/client.html?config=foo\n- Grunt task to watch for changed files and run unit+functional tests in all browsers listed within your Intern config by running intern-runner\n- While useful, lower priority because there are so many other tools to do this already: A new reporter that can collect and aggregate tests results from many tests runs over time, rather than for just a single test run, so you can see regressions over time\n. > I'm not sure whether your suggestions include in some way the printing of test reports to the console.\nOne way I see to make that work with pure unit tests is to log the results to the server, which then returns those results to the console tab where the grunt task is running. I don't see a way to simply have a task to open a browser and return console results to it, without logging the results somewhere first.\n. As noted earlier by @jason0x43, intern-cli now helps quite a bit with this. Also, Intern's SeleniumTunnel will now make sure you have a local copy of all of the Selenium Driver dependencies that you need to run your tests. So I think we're just about there with regards to the use case of the original request, with the exception of having a watch task to auto test things (either rerun all tests, or rerun tests only for tests related to modules that have changed).. That's a question on a mailing list, not filed as a bug. As noted in https://github.com/theintern/intern/wiki/Support , we really want questions to be asked on Stack Overflow, and to keep the bug tracker for bugs.\nHow is their answer \"more honest\"? It looks like you got a one-off answer pointing to a project someone uses that's not part of Mocha?\nIt's a lot of work to keep track of what every other project is doing, much less what someone uses to add something to a project that doesn't include it.\n. This is a pretty frequently asked question, see the following links for some suggestions:\nhttps://stackoverflow.com/questions/27850786/take-screenshot-for-failed-test-in-internjs\nhttps://stackoverflow.com/questions/22531122/how-do-i-take-a-screenshot-and-write-to-a-file-in-intern-javascript-testing\nhttps://stackoverflow.com/search?q=[intern]+screenshot\n. @nwhite89 I also mentioned it as I'm hoping someone will be inspired to work on a patch / pull request, in case we don't have time to get to it soon!\n. @nwhite89 yes, a configuration setting for the location would be great\n. These are good suggestions, and I agree it makes things clearer and more consistent. I'm not sure if we have time to address this prior to Intern 3.0 as we're very close to release, meaning I probably wouldn't block a release for these changes, but they're worth considering if easy and if time permits.\n. This is one of the reasons why we will typically do something like https://github.com/dojo/dojo/blob/master/tests/unit/all.js within our tests (the other reason being that it's nice to not have to modify the configuration file each time we run a test). Other people have also written code that uses Node's fs module to load each test within a directory, as documented at https://theintern.github.io/intern/#option-suites\nAt a minimum, the documentation on this issue should probably more clearly state that if you have a large number of tests to run, you need to take one of these approaches.\n. Ok then, glad that wasn't intentional!\n. @bartoszkaczorek yes, it's lcovhtml. We'll get the guide updated, thanks for the report.\n. Yes, what @kitsonk said for DevTools a11y testing. For tenon.io, they have an API ( e.g. http://tenon.io/documentation/understanding-request-parameters.php ) to run accessibility tests and their API is the best option I've seen that's out there currently. If we're interested in this, we can reach out to them and see what they offer for open source projects that want to integrate with their API.\nThe thought process behind all of this is that a11y testing takes time, and if there's an opportunity to automate the verification of an application being accessible, we should try to offer that as part of a future Intern release.\n. I created a fairly simple PR for this. See my notes and question. I agree that this makes Intern simpler for people to use inside the firewall for testing.\n. It's been reported that this also causes issues when trying to run tests on a simulated slow connection to more accurately reflect mobile testing on a slow network.. We should really finish and land this one...\n. I would suggest landing it with the current tests. We can split the issue of improving the Lcov and Json Coverage reporter tests into a separate issue.\n. I don't think Alameda supports the AMD API for undefining a module, which is commonly needed when cleaning up after a test, or mocking/remapping a dependency ( https://github.com/requirejs/alameda#requirejs-tests-that-do-not-pass ). Though I'm not sure that's the issue here, that would be the first place I would look. Also, I assume you've included requirejs' packages for the needed loader plugins, as explained a few sections above the link on the tests that do not pass? Alameda doesn't include loader plugins for domReady, etc., so the expectation is that you'll pull those in with requirejs.\nRegardless, it would help to know more about how you're trying to use this, so we can look for anything else.\nAnd while we're on the topic, I guess I would be curious to know if Cajon ( https://github.com/requirejs/cajon ) works as well.\n. @httpete which version of Intern, 2.2.x or 3.0.rc2?\n. We should rebase and review, and decide what we're going to do with this one.\n. npm install intern\nnode 0.10.x\nmac yosemite\nSeparately confirmed by another engineer on the sitepen team...\n. fwiw, the config is rather stock/basic:\ndefine([ 'intern/dojo/has' ], function (has) {\n    return {\n        proxyPort: 9000,\n        proxyUrl: 'http://localhost:9000/',\n        capabilities: {\n            'selenium-version': '2.45.0'\n        },\n        environments: [\n            { browserName: 'chrome' }\n        ],\n        maxConcurrency: 3,\n        tunnel: 'NullTunnel',\n        loaderOptions: {\n            baseUrl: 'slides/internIntro',\n            packages: [ { name: 'app', location: 'activity/workspace' } ]\n        },\n        suites: [ 'app/unit' ],\n        functionalSuites: [ 'app/functional' ],\n        excludeInstrumentation: /(?:node_modules)\\//\n    };\n});\n. Here's the error being thrown, https://d.pr/i/11kXj\n. Which version of Node.js? It's possible this was fixed by 3.0.2 ( https://github.com/theintern/intern/releases/tag/3.0.2 ), see #489\n. dojo-node is a module to load CJS/Node.js modules within AMD inside of a Node.js environment. It does not allow you to load Node.js modules to run inside a browser. It is used for either loading modules for command-line tests, or for Intern's server for executing remote tests against a Selenium grid. When you use it in unit tests, you should use the dojo/has module before loading it. \nSee https://theintern.github.io/intern/#testing-commonjs-code and an example of dojo/has usage for Node.js at https://github.com/theintern/intern/blob/master/tests/unit/all.js#L15\nWhile dojo/node and dojo/has are well documented at Dojo, we should probably add a brief explanation of this within the guide.\n. The errors from your pastebin are as follows:\n- org.openqa.selenium.UnsupportedCommandException: driver (org.openqa.selenium.firefox.FirefoxDriver) does not support org.openqa.selenium.html5.WebStorage\n- org.openqa.selenium.UnsupportedCommandException: driver (org.openqa.selenium.firefox.FirefoxDriver) does not support org.openqa.selenium.html5.LocationContext\nIt would help to know if you're testing something using WebStorage or Geolocation, or if this is failing on Leadfoot's initial feature capabilities test before running your tests?\nfwiw, this is not an issue on OS X with FF 40.0.3.\nIf you are testing web storage or geolocation, it would be helpful to see your test cases.\nTo test if it is the Leadfoot capabilities test itself that is failing, you could start by changing https://github.com/theintern/leadfoot/blob/0da713f4dcbd086503feea92d45a376eb76e9dec/Server.js#L266 to false. If that fixes the issue for you, then you could set it back to true and try debugging further with the capabilities info in this file.\n. It's of course possible that Selenium 2.47.1 and FF ESR 38 are not working together. I would start by trying FF 40.\n. PR at https://github.com/theintern/intern/pull/519\n. Closed via b8b979a.\n. @jason0x43 we should probably make a decision on this one, given that @bartoszkaczorek has been waiting a while on this PR.\n. @bartoszkaczorek thanks for making the standalone module... we'll try to land all of this for Intern 4, though we're unlikely to look at it until our TS refactor is finished.. Thanks for the PR @wonnage ... did you get a chance to address @jason0x43's feedback?\n. @JSMike just checking in to see if you expect to have time for this in the near future. No rush, reaching out.\n. Sorry for the significant delay in reviewing this @croes . @jason0x43 please review when you have a chance.\nAlso, @croes , can you verify if you have a CLA on file? \n. @sandlerr well, both the dev who opened the PR and the reviewer work with us on the same team :) This should be pretty easy to land.\n. @jacobroufa looks like it would be pretty easy to address @jason0x43's feedback and then we can land this.\n. @jacobroufa want to address @jason0x43's feedback so we can land this?\n. At the moment, a mix of @jason0x43 , @devpaul , @kitsonk , and me are doing what we can to help maintain and add new features, so I think we should mark this as closed. Obviously the more high quality help we get, the better we'll do in moving forward with Intern's mission to provide a highly useful test stack.\n. @psingh4 this is probably already handed with https://github.com/theintern/intern/issues/674 which landed in master last week. There's still a fair amount of work to be done, but Intern master now leverages the real Dojo 2 and supports writing tests using ESM. . @rodneyrehm did you ever receive feedback on this elsewhere (e.g. IRC or StackOverflow)?\n. @michaeljota with Intern 4 (which is well underway in development), yes. I'm currently drafting a blog about the decisions around Intern 4, but here's the gist from the blog post which is not yet published (it's still a draft, but hopefully it's clear enough):\nWhen Intern began, AMD was the only practical way to effectively load modules both in a browser and within Node.js without a compile step. Since then, ES Modules (ESM) have become the preferred standard way of authoring modules, and various tools such as webpack have changed the way people think about module loading and bundling.\nGiven the diverse perspectives on how to load modules, we are removing module loading from Intern's purview. While this may seem like we're offloading work to the user, it will actually simplify test writing in most cases. Rather than requiring projects to adapt to Intern\u2019s AMD environment, Intern 4 will adapt to the user\u2019s environment.\nThe result is that Intern and its packages will be loaded like any other module, and Intern can be built/optimized for a target environment and/or loader. We believe this will make it simpler for users and developers to understand and use.\nAs part of the move away from assuming the presence of a module loader, Intern will no longer dynamically load modules (meaning the AMD loader plugins go away). Instead, when the user loads a particular test executor (e.g. Node.js), all relevant code for that environment is loaded, e.g. all usable reporters, interfaces, and utility functions.\nI don't yet know when Intern 4 will be ready, but we're pretty far along.. The short answer is, if it was super easy to get things working today with ES6 modules, it would already be done as we would prefer that as well. Our team at SitePen typically authors tests in TypeScript and then just transpiles the tests to AMD modules and use remap-istanbul to instrument our code coverage back to our original source, because we cannot really rely on alpha code for production releases.\nWe have a release coming soon that supports writing tests with ES6 features (there's an open PR currently under review/iteration at https://github.com/theintern/intern/pull/590 ).\nThe bigger challenge is native support for ESM (ES6 modules) or SystemJS. It's a very non-trivial switch, because AMD module loaders provide a lot of power and flexibility to Intern. We've done some initial work on trying to get things working with SystemJS, but it's not trivial.\nWe also have a branch for rewriting Intern with TypeScript (targeted for Intern 4) which could make this a bit easier to achieve as well. Again though, to reliably run the tests in most browsers today, some level of transpilation is needed, and you will of course need to limit the ES6 code in your tests to a feature set that is either easily transpiled, or else you need the relevant polyfills available (e.g. don't use features that cannot be polyfilled and are not natively supported by all target browsers).\nWe're definitely very much interested in this, it's just a really messy situation right now where it's far easier to author ES6 modules than it is to test and use them in every possible scenario.\n. @andyearnshaw well, we certainly have an interest in it, so we could perhaps collaborate on a solution together?\n. @LingSpb we just have a backlog we're working through, and we hope to get to it soon. We appreciate your patience.\n. Thanks for the PR @LingSpb.\nThis looks reasonable to me though I'm not that familiar with the pretty printing code (also I'm not sure if we want to accept the changed indentation on the case statement as I think the current format is consistent with the style guide, but that's a minor point). @devpaul or @jason0x43 , please review when time permits.\n. @LingSpb did you want to address the comment from @jason0x43 in https://github.com/theintern/intern/issues/629#issuecomment-221549650 ?\n. Thanks for the PR @ PavelVanecek, we'll land this asap.\n. @tobiastom did @sholladay's suggestion help? If so, I'll assume this is a documentation issue.\n. @SergeyBondarenko Which version of Firefox and which version of Selenium are you currently using?\n. Was this closed on purpose or by mistake?\n. Well, that seems a bit impatient honestly.\nYes, it's a trivial request, but we tend to batch review things that are not severe issues about once a month, rather than landing requests every day, as we prefer a workflow where we cluster similar work together.\n. We've been focused on working on a few larger additions to Intern which will often occur in a branch first, e.g. https://github.com/theintern/intern/tree/ranged_versions\nWe were still intending to land this and some other open PRs asap.\n. @lighterletter could you please provide an example of the approach that is failing, so we can determine if the issue is documentation or a bug?\n. I'm going to move this issue to theintern/leadfoot as this is related to leadfoot.\n. Issue moved to theintern/leadfoot #82 via ZenHub.io\n. I believe this is roughly the same request as https://github.com/theintern/leadfoot/issues/48 , as well as some work to improve/optimize/batch requests. A lot of the initial data is the feature testing that Intern runs in each browser prior to functional testing to verify features that are available, so that tests don't break due to buggy WebDriver implementations.\n. @eddiechihyi let us know what you find out... cc: @jlipps (perhaps he or someone at Sauce Labs can take a quick look).\n. Also, perhaps @jason0x43 can shed some light on some of the things he's been looking to add for 3.3 or later?\n. @lucaswxp to debug this, you you could try:\nmodule.exports = () => {\n  require(['intern/dojo/node!cheerio'], function(cherrio) {\n    ...\n  });\n}\nIt might also be worth trying ES5 rather than ES6 syntax, though I assume you're on a recent enough version of Node.js to support ES6 syntax?\n. @gitgrimbo I fixed the CLA check manually for this commit. Your CLA is clearly on file so I'm not sure what the deal is (and it looks like you resubmitted it today as well)... let me know if you have this issue with any future PRs.\n. @gitgimbro, had forgotten about it, will land this week probably.... @rhpijnacker I think we got to the point of debating whether Intern should be able to call out to Cucumber (which is what your PR does), or if Intern should natively support Cucumber syntax so that it could do more with that.\nI think we can reasonably make a persuasive argument for both approaches, but given that this is what we have, we should consider landing it for say a 3.5 before we finish the TS refactor for Intern 4? Or perhaps its better to have this as a separate package (e.g. intern-cucumber) since this does introduce a dependency on Cucumber for all Intern users, whether the use Cucumber or not?\nEither way, let's make a decision. :). @rhpijnacker I was thinking something along the lines of https://github.com/theintern/intern-visual or https://github.com/theintern/intern-a11y in terms of how they extend Intern, though admittedly I've not thought through the details enough to know if that would work well or not.\nI know we do want to eventually do what @jason0x43 suggested in the previous comment, \"ideally the cucumber interface should just be an interface that constructs regular Intern Suites rather than relying on Cucumber to run tests.\", though I appreciate what you have now is a workable solution (and why I think it probably makes more sense as an extension in its current form if possible).. Thanks @sallyx . It's a link fix in the docs, so no need for a CLA.\n. @rozaev I would say it's mostly that we started working on Intern 4 which sort of took our focus away from this and so we've sadly not really had time to test and verify it sufficiently.\nIf you can test and verify that it works well with Intern 3.x, then I think we could land it for the 3.x branch and have it be part of what will at some point be a 3.5 release that rolls up any remaining 3.x features.. \ud83d\udc4d You need the live human Intern module, e.g. require(['intern/human'], ...) to enable this feature.\n. Perhaps useful information as well at https://discuss.circleci.com/t/the-intern-javascript-tests/4543/2\n. Hi @Acanthostega , thanks, this sounds like a good addition to Intern!\nA few things you'll want to look into:\n- EnvironmentType is driven via configuration in https://github.com/theintern/intern/blob/master/lib/EnvironmentType.js\n- The conduit to open tests within a WebDrive implementation occurs in https://github.com/theintern/intern/blob/master/lib/executors/Runner.js which calls \n- Leadfoot capabilities ( https://github.com/theintern/leadfoot/blob/master/Server.js ). This is our collection of feature tests to run and verify in a functional testing environment before we run functional tests, so that we do not break against known defects of a particular driver implementation.\n- SeleniumTunnel, https://github.com/theintern/digdug/blob/master/SeleniumTunnel.js , which allows an end user to run a command to install the requested WebDriver instances for local testing\n@jason0x43 may have a few more suggestions. Let us know if you get stuck or if you have questions!\nAlso make sure you read through the contributing guidelines if you haven't already. One thing to note is that the Dojo Foundation has merged with the jQuery foundation, so you may use https://contribute.jquery.org/CLA/ for the CLA if you have not done so already.\n. @michaeljota I believe they are well placed, and some of us are VSCode users as well. I would check out a config, say from https://github.com/dojo/widget-core/blob/master/package.json , for an example of how we typically use Intern with TypeScript.. Funny, this was asked/requested at SeleniumConf this week. Agree this is a must have, just need a PR!\n. @bartoszkaczorek This could be challenging to track down as it could be an issue with Sauce Labs, with Firefox 49's driver, with an update to Intern, or with one of your tests. Is there any additional information you see from the Sauce Labs report for the times it failed?. Thanks @rozaev, we'll get this fixed asap (once everyone is back from the holidays). FWIW, the docs live in the gh-pages branch.. @rozaev, alive and well and another year older in fact. :) we'll land this now.... @rozaev I'm in there except when my irc client disconnects, and @jason0x43 is usually in there during his day. We've admittedly been very heads down on Intern 4 and Dojo 2, but feel free to ask. Or send us an email if we're not around at the same time of day as you.. @ervinb sure, we'd definitely appreciate the help! When I took a brief look at the docs for Semaphore, it wasn't clear where to specify configuration, other than using the Semaphore UI. For example, I see the docs for https://semaphoreci.com/docs/available-environment-variables.html , and I see a few references to a .yml for DB configuration, but can Semaphore read the equivalent of https://github.com/theintern/intern/blob/master/.travis.yml ?  Those were my initial questions in the few minutes I spent looking into this to decide to include Semaphore in the list of CI tools to add. I'm sure we'll figure out the answers when we spend some actual time on this, but if you want to accelerate our efforts, we'd appreciate it.. > Also, the dojo license still mentions the \"Dojo Foundation\"; is that intentional?\nNot intentional\n\nShould the license file point to the Intern license rather than duplicating its content?\n\nI believe we need to include the license itself.. One strategy is to just get rid of the year in the copyright statement. The main reason the years are different is based on the start year of the project, so if we keep the years, the end year should all be 2017. I believe for Intern both Colin and I have completed a copyright assignment, so it's probably best to rewrite it as something like this:\n(c) [JS Foundation](http://js.foundation/), [SitePen](https://sitepen.com/), Colin Snover, and contributors.. It should work when using remap-istanbul . This extension is needed until we switch to a newer version of Istanbul that will support source maps.. fwiw, we've had similar issues the past couple of months with Sauce Labs when testing Dojo 2, and Sauce Labs is aware of the issue and working on it by trying to improve performance and stability of Appium. For now, we have switched our tests over to use BrowserStack which resolved the issue for Dojo 2 at least.. We should verify this works as expected and add to the Intern documentation.. @thegecko let me know if this is a big problem and I'll see what we can do prior to Dojo 2 being released.. This is to support Leadfoot's ability to improve the WebDriver experience (described in the first two paragraphs at https://theintern.io/docs.html#Leadfoot/2/docs/README.md ), essentially the list at https://theintern.io/leadfoot/global.html#Capabilities (though this is the list from Leadfoot 1.x). \nThere is a way to skip this but I don't remember the command flag off the top of my head.. > I don't understand either how including this in the shipped runner is even useful to anyone\nMany Selenium WebDriver instances are broken in novel ways, and we can work around them (either by applying a known workaround, or by skipping tests that would otherwise crash the WebDriver instance). So it's very useful to end users to not have to know what is broken in every WebDriver instance out there. :)  And so we do this via feature testing, which requires a quick second or two of tests. It would be possible to provide a known list of capabilities by driver version, but this has the same issues as old browser sniffing techniques.\n\nIf you happen to encounter this magic flag you've mentioned, please share it with us!\n\nIn your configuration, under capabilities, set fixSessionCapabilities to false ( https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FNode/capabilities ). Note, leaving this ticket open as I don't see fixSessionCapabilities documented on the Intern website.. This is a duplicate of #871 and #862. See https://github.com/theintern/intern/issues/871#issuecomment-358334825 for details. It was unfortunate that a year or two after we named the project that a movie called the intern was released.\nThat said, other testing tools have names like Karma, Jasmine, Chai, Mocha, Jest, and Tape which are all very common names as well.\nPerhaps in hindsight we could have branded everything as theintern.io or Intern.js or intern.ts, but that would be a lot less fun.\nIn general when searching for tech projects, I add a qualifier to google. If you search for \"intern js\", \"intern ts\", \"intern test\" or \"theintern test\", all give you Intern as the first result. A few projects become big enough to become the first result over their more general usage, but that's pretty rare.. Additionally I would add that https://theintern.io/docs.html#Intern/4/docs/docs%2Fconfiguration.md/config-file contains a ton of information about the various ways in which things work in configuring Intern. Some of it is subtle, but for example the information about the command line settings at https://theintern.io/docs.html#Intern/4/docs/docs%2Fconfiguration.md/command-line should make it easy to understand how things passed in via the command line get evaluated.. Looks like your local package.json is behind the current release.\n. ",
    "kitsonk": "@hakatashi for the first point, I am not sure we would want to pre-suppose a solution. For Node.js I suspect running scripts in a sandbox context as a core API would produce better results. Also with browsers, an iFrame wouldn't be wholly different than loading a page in Selinium. I would expect that a part of the proposal would be to assess what different methods might work in discussion with the mentor/team, because I suspect there maybe challenges with any approach. I think the main thing would be focusing on making the consumable API as transparent as possible for the end user to not have to do a lot of work to \"sandbox\" themselves.\nAs @dylans says, I think we would consider supporting development of this feature in TypeScript even if we aren't quite ready with the rest of Intern being on TS.\n. @hakatashi feel free to jump to conclusions! I am really glad to see interest.\n. I was having some issues getting Benmark.js \"master\" working under the Intern.  I think it was the offloading to LoDash, but I rolled back to v1.0.0 and things worked.  I will try to tackle it when it gets an official bump to 1.1.0.\nI wouldn't mind some feedback on the PR once it gets here.  I am really going to try to get it done this weekend.  For and example of what a test case looks like all together, take a look here:\n- parser baseline\n- parser comparison\nThe first one tests several features of the module, which could be used for tracking performance over code revisions.  The second one is specifically comparing performance of features against other similarly functional implementations.  Again, maybe used for development but not \"checked in\".\n. Sorry, I have been away on vacation for a while and am starting a new job.  I will try to get some spare bandwidth to address the questions posed by @csnover.\n. @csnover I am really struggling to find any time.  The desire is there.  Looking at next weekend, I might actually have the time.  I will at least try to merge all the upstream changes and get a working patch again.\n. Taking a look at this again, Benchmark.js still seems to be \"stuck\" at v1.0.0.  There is the master branch, but the last tag/release was bestiejs/benchmark.js@985bdb69d60e259b7b4c7d35296d1d8638565296 over a year ago.  I don't know if @jdalton can provide any insight.  I would suspect integrating head of the the master branch wouldn't work well for a lot of people.\nI have issued a PR in #143 which is a working patch against master which is based off of Benchmark.js v1.0.0.\n. Since I have everyone's attention, as I am not sure exactly what is to blame, I am having a bit of challenge trying to integrate master of benchmark.js.\nIn the package.json I have the following, to install benchmark.js as a package:\njson\n{\n    \"dependencies\": {\n        \"benchmark\": \"https://github.com/bestiejs/benchmark.js/archive/master.tar.gz\"\n    }\n}\nIt will install lodash and platform perfectly fine in node_modules/benchmark/node_modules but I can't seem to get it to bootstrap properly, I get alternating:\nsh\n$ node client.js config=tests/selftest.intern\nDefaulting to \"console\" reporter\nError: Failed to load module lodash from /Users/kitsonk/github/intern/lodash.js (parent: intern-selftest/node_modules/benchmark/benchmark)\n    at /Users/kitsonk/github/intern/node_modules/dojo/dojo.js:742:12\n    at fs.js:207:20\n    at Object.oncomplete (fs.js:107:15)\nOr:\nsh\n$ node client.js config=tests/selftest.intern\nDefaulting to \"console\" reporter\nError: Failed to load module platform from /Users/kitsonk/github/intern/platform.js (parent: intern-selftest/node_modules/benchmark/benchmark)\n    at /Users/kitsonk/github/intern/node_modules/dojo/dojo.js:742:12\n    at fs.js:207:20\n    at Object.oncomplete (fs.js:107:15)\nI tried to add them to the package map in the client.js but to no avail.  I got a bit further adding them to the packages configuration, but it kept wanting then to load lodash/main.js.  I am sure it is just some sort of AMD configuration issue, but I am at a loss.\n. No, it is trying to use the AMD loader and benchmark.js defines itself as an AMD module.\njs\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\nWhat I appear to be missing is the correct AMD loader configuration for it to be able to find those modules which it's package JSON brings in as a dependency.  I've tried every flavour of map I can think of.\n. @jason0x43 that worked. Ugly, but works.\nThinking outloud, to answer @csnover question about how to test across different sets of code, I am thinking that we would need to enhance what I have already to generate a reporter that creates a \"baseline\" for a set of functional tests and outputs a JSON file that contains the baseline.  That file then could be used to a) track the performance of the code over different version, b) be used as the basis for then failing the tests.\nOf course an end user could edit the JSON file to modify what they considered \"acceptable\" performance, but this baseline reporter would at least generate the starting point.\n. Thanks for the bounty, and hopefully it will help.  My challenge is that I have zero time to dedicate to this (no matter how emotionally attached to it I am).  If anyone is interested, I would be more than glad to give them my thinking on it.\n. Ok, I am starting to pick this back up...  It has been bouncing around my head for far too long.\nStory\nAs a developer, I want to be able to baseline the performance of my code for two purposes:\n- To ensure that when given a problem, I can test to see which ways of solving the problem are most performant.\n- To ensure that once I have a set of code, as I perform continuous integration, that my code does not degrade unacceptably in performance.\nAPI\nI am thinking we need to add BenchmarkSuite, a benchmark interface and a BenchmarkBaseline and Benchmark reporters.\nThe BenchmarkSuite will allow you to assert tests that will be run within the benchmarking environment and deal with exposing the performance data returned from a run.  The benchmark interface will allow easy creation of test suites that do benchmarking.  The BenchmarkBaseline reporter will output a set of results given a benchmark suite which can be then consumed by the Benchmark reporter to determine if your benchmarking suites are \"passing\" or \"failing\" your benchmarks.\nObviously the \"success\" or \"fail\" criteria could be manually expressed too, to be consumed by the Benchmark reporter.\nTo Do\nI will be working on this in kitsonk/intern#benchmark.\n- [x] Integrate Benchmark.js\n- [x] BenchmarkSuite\n- [x] benchmark Interface\n- [ ] BenchmarkBaseline reporter\n- [ ] Benchmark reporter\n- [ ] Documentation\n. Ok, I have a working prototype now.  I think I have the workflow right in my mind, but feedback would certainly help me.  Here is what I see the main use case/workflow:\n1. Write benchmark tests, using the benchmark interface.  The would be the key performance areas that you want to benchmark.\n2. Baseline your tests.  The BenchmarkBaseline reporter will collect the performance benchmarks (ops/sec) from all the environments you have listed.  It then can write these to a JSON file which will be used as your baseline.  The baseline file will also contain the acceptable level of variance and change to warn and fail on.\n3. Execute your benchmarks.  Given a baseline file, when you run your benchmark tests, they will warn or fail if the variance falls outside of the thresholds.\nThe other main use case is just a plain Benchmark report, which would give you detailed information about your Benchmark tests.  I need to do more work on this, but I was thinking it would generate an HTML report that would do the following:\n- Provide you with performance information by environment.\n- Provide you with visual comparison of the performance by test, by environment.\n. benchmark.js tries its best to deal with those \"flukes\" and isn't necessarily designed for long running benchmarking of functional tests.  It does allow you to increase the run window (defaulting to 5 seconds) if you have a particular challenging test that is providing inconsistent results.  But in the end it is designed for very small units of code, not some sort of end to end integration test.  I would also say in practice that is the best way to do it, measure a lot of little points looking for regressions in performance.\nEvery test run emits two important numbers, the first is the cycles per second, the second is the relative margin of error.  If the RME is too large, then it is a sign that you are not getting an accurate number.  What I have been working on is that the baseline will be emitted for each test in each environment configured.  There will be some default \"warn\" and \"error\" thresholds.  If you are benchmarking against a baseline then variations of the CPS or RME outside of those thresholds will warm/error.  The baseline file will be just a JSON file and can be edited if the human knows best.\nIf you just want to track performance over a period of time, then you would need something external to aggregate the benchmarking reports and do some sort of tracking.\n. I have migrated my personal branch (with the contributions from @jason0x43) from my personal repo to the benchmark branch.  I merged in the latest master, but the Benchmark.js and lodash dependencies need a bit of updating.\n. I don't know if it is a \"chicken and egg\" issue with the self-tests.  Even though TravisCI seems to be having issues with it, I ran the tests rather extensively on my machine and SauceLabs account (even identified several issues and resolved them).  Here is what my last run provided before submitting the PR:\n```\n$ node runner config=intern/tests/selftest.intern\nDefaulting to \"runner\" reporter\nListening on 0.0.0.0:9000\nOpening local tunnel using Sauce Connect\nCreating tunnel with Sauce Labs\nTesting tunnel ready\nInitialised firefox 19.0 on LINUX\nInitialised internet explorer 9 on WINDOWS\nInitialised internet explorer 10 on WINDOWS\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nfirefox 19.0 on LINUX: 0/175 tests failed\n8 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 73.5% ( 330/449 )\nBranches     : 52.34% ( 112/214 )\nFunctions    : 73.08% ( 95/130 )\nLines        : 73.5% ( 330/449 )\n================================================================================\ninternet explorer 9 on WINDOWS: 0/126 tests failed\n7 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 83.96% ( 377/449 )\nBranches     : 68.69% ( 147/214 )\nFunctions    : 80.77% ( 105/130 )\nLines        : 83.96% ( 377/449 )\n================================================================================\ninternet explorer 10 on WINDOWS: 0/175 tests failed\n6 environments left to test\nInitialised chrome 26.0.1410.63 on LINUX\nInitialised firefox 19.0 on XP\nInitialised firefox 19.0 on MAC\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nfirefox 19.0 on XP: 0/175 tests failed\n5 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nchrome 26.0.1410.63 on LINUX: 0/175 tests failed\n4 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nfirefox 19.0 on MAC: 0/175 tests failed\n3 environments left to test\nInitialised chrome 26.0.1410.64 on XP\nSauce Connect Error\nInitialised chrome 24.0.1312.57 on MAC\nInitialised safari 6.0.1 on MAC\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nchrome 26.0.1410.64 on XP: 0/175 tests failed\n2 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 71.5% ( 153/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nchrome 24.0.1312.57 on MAC: 0/175 tests failed\n1 environments left to test\n=============================== Coverage summary ===============================\nStatements   : 84.19% ( 378/449 )\nBranches     : 70.56% ( 151/214 )\nFunctions    : 81.54% ( 106/130 )\nLines        : 84.19% ( 378/449 )\n================================================================================\nsafari 6.0.1 on MAC: 0/175 tests failed\n=============================== Coverage summary ===============================\nStatements   : 85.52% ( 384/449 )\nBranches     : 77.1% ( 165/214 )\nFunctions    : 82.31% ( 107/130 )\nLines        : 85.52% ( 384/449 )\n================================================================================\nTOTAL: tested 9 platforms, 0/1526 tests failed\nShutting down\n``\n. I was away for the weekend.  Let me rebase this branch and re-run the tests to see if there is anything I need to do.\n. Ok, it is passing the unit tests in the browser, but I must be missing something on running the selftest in general now, because runningnode client config=intern/tests/selftest.intern` returns an error of:\nbash\n$ node client config=intern/tests/selftest.intern\nDefaulting to \"console\" reporter\nError: Failed to load module intern-selftest/tests/all from /Users/kitsonk/tests/all.js (parent: *5)\n    at /Users/kitsonk/github/intern/node_modules/dojo/dojo.js:742:12\n    at fs.js:207:20\n    at Object.oncomplete (fs.js:107:15)\n. Yeah, sorry...  Should learn to read.  The client.js unit tests and the functional tests are coming back clean now.  Amazing what happens when you run the right command.\n. Yeah, I see the IE9 situation.  I am investigating but I am not sure what is going on as it used to run ok.\nOn Safari 6, it is coming back clean for me https://saucelabs.com/tests/8284e8cd7532411fa7396f7b26f79754 and:\n=============================== Coverage summary ===============================\nStatements   : 87.12% ( 399/458 )\nBranches     : 72.43% ( 155/214 )\nFunctions    : 85.07% ( 114/134 )\nLines        : 87.12% ( 399/458 )\n================================================================================\nsafari 6.0.4 on MAC: 0/178 tests failed\n. Ok, @csnover it is not throwing on Safari anymore, my tests are coming back clean but now it looks like the CI is being temperamental. Any thoughts?\n. @csnover No I meant temperamental as in temperamental. :-P\n. Yes, fair enough.  There were 4 async tests that had 250ms.  They \"should\" have been quick enough but obviously weren't all the time.  I have changed them to 1000ms.  That should produce a more consistent result.\n. Hrmmm... Ok, I changed it so BenchmarkSuite inherits from Suite, although I couldn't do it in the same fashion as ClientSuite does, because dojo/lang::mixin doesn't handle ES5 accessor properties properly.  Therefore I used Object.create() instead.\nI am not sure what is up with TravisCI/SauceConnect thought, because the failure in c26a7a5 is really odd, and I am not sure how I caused it, yet it passes when I run the tests myself with runner.  I might have done something silly again, but I don't think so.\n. I need to refresh the PR, I just haven't had the time at the moment, as my\nreal job has been distracting me.\n. @neonstalwart I didn't realise that, but even given that (which is useful) my suggestion is that intern should generate a default name.\n@csnover I see what I was saying wasn't making sense.  Yes the MID of the configuration file or functionalSuite could be the default name.  Point was unamed job appears useless.  Even if it default to the Intern (but was overridden by the capabilities mentioned above) that would be better in my opinion.\n. sinon now sometimes works properly without the built version, but I regularly have failures.  It frustrated me so much I started kitsonk/sutabu.  It does basic stubbing and spying.  It isn't fully compatible with sinon (nor was it intended to be).  Hopefully it can inspire some stuff for The Intern.\n. Yes, I have noticed this before (and when working on the benchmarking API).  You have a chicken and egg where when you are testing a reporter, it will close off some groups that shouldn't be closed off because a reporter can't easily determine when it is being tested and when it is actually doing the reporting, which causes the grouping to be skewed.\nLikely the only way to fix it is to keep a \"grouping state/level\" in the reporter.\n. Clearly it appears I am the only one who cares about this or even wants to participate in delivering it, even after @dylans asked for me to try to help out...\n. Well, requests to close down WIP PRs is certainly not my idea of collaboration.  I have tried to even tried a level of conversation on #13.  I keep plugging away at it in my spare time, but I can't even get feedback on my ideas, thoughts or commits.  So if no one wants to collaborate with me, then I will simply do as @csnover suggested and closed the PR, because obviously no one is interested in providing feedback on this feature.  If I ever get around to something, I will submit again, maybe.\n. It broke at a different point, so I didn't actually get the dump at the moment.\nsh\nInitialised safari 7.0 on MAC\nError: EMFILE, open '/Users/kitsonk/github/core/node_modules/intern/lib/Suite.js'\nNo stack or location\nI am on OSX 10.9.3.  I will try NodeJS 0.10.29 and the OSX upgrade tomorrow.\nHere it is (a big long list):\nsh\nnode      27113 kitsonk  cwd      DIR                1,1       1326  6639441 /Users/kitsonk/github/core\nnode      27113 kitsonk  txt      REG                1,1   20036016 16824679 /usr/local/bin/node\nnode      27113 kitsonk  txt      REG                1,1     600832 17644775 /usr/lib/dyld\nnode      27113 kitsonk  txt      REG                1,1  344443650 18220411 /private/var/db/dyld/dyld_shared_cache_x86_64\nnode      27113 kitsonk    0u     CHR               16,0   0t328362      691 /dev/ttys000\nnode      27113 kitsonk    1u     CHR               16,0   0t328362      691 /dev/ttys000\nnode      27113 kitsonk    2u     CHR               16,0   0t328362      691 /dev/ttys000\nnode      27113 kitsonk    3     PIPE 0x6b3b9394bc551103      16384          ->0x6b3b9394aec93263\nnode      27113 kitsonk    4     PIPE 0x6b3b9394aec93263      16384          ->0x6b3b9394bc551103\nnode      27113 kitsonk    5u  KQUEUE                                        count=0, state=0x2\nnode      27113 kitsonk    6u  KQUEUE                                        count=2, state=0x2\nnode      27113 kitsonk    7     PIPE 0x6b3b9394bc550a23      16384          ->0x6b3b9394aec93e13\nnode      27113 kitsonk    8     PIPE 0x6b3b9394aec93e13      16384          ->0x6b3b9394bc550a23\nnode      27113 kitsonk    9     PIPE 0x6b3b9394bc551733      16384          ->0x6b3b9394bc553573\nnode      27113 kitsonk   10     PIPE 0x6b3b9394bc553573      16384          ->0x6b3b9394bc551733\nnode      27113 kitsonk   11r     DIR                1,1       1190        2 /\nnode      27113 kitsonk   12u    IPv4 0x6b3b9394b58192db        0t0      TCP *:cslistener (LISTEN)\nnode      27113 kitsonk   13u   systm                           0t0          \nnode      27113 kitsonk   14u    unix 0x6b3b9394c52751d3        0t0          ->0x6b3b9394b1f5955b\nnode      27113 kitsonk   15u    unix 0x6b3b9394afb9a363        0t0          ->0x6b3b9394b1f5761b\nnode      27113 kitsonk   16u    IPv4 0x6b3b9394b5c832db        0t0      TCP localhost:cslistener->localhost:58288 (ESTABLISHED)\nnode      27113 kitsonk   17u    unix 0x6b3b9394b3c417ab        0t0          ->0x6b3b9394b7cecc63\nnode      27113 kitsonk   18u    IPv4 0x6b3b9394b85fcaf3        0t0      TCP localhost:cslistener->localhost:58296 (ESTABLISHED)\nnode      27113 kitsonk   19u    unix 0x6b3b9394c5274d23        0t0          ->0x6b3b9394c527574b\nnode      27113 kitsonk   20u    IPv4 0x6b3b9394b24502db        0t0      TCP localhost:cslistener->localhost:58237 (ESTABLISHED)\nnode      27113 kitsonk   21u    IPv4 0x6b3b9394b56d72db        0t0      TCP localhost:cslistener->localhost:58253 (ESTABLISHED)\nnode      27113 kitsonk   22u    IPv4 0x6b3b9394b58e72db        0t0      TCP localhost:cslistener->localhost:58254 (ESTABLISHED)\nnode      27113 kitsonk   23u    IPv4 0x6b3b9394b581b2db        0t0      TCP localhost:cslistener->localhost:58255 (ESTABLISHED)\nnode      27113 kitsonk   24u    IPv4 0x6b3b9394b87c0af3        0t0      TCP localhost:cslistener->localhost:58256 (ESTABLISHED)\nnode      27113 kitsonk   25u    IPv4 0x6b3b9394b87eeaf3        0t0      TCP localhost:cslistener->localhost:58257 (ESTABLISHED)\nnode      27113 kitsonk   26u    IPv4 0x6b3b9394b85e7af3        0t0      TCP localhost:cslistener->localhost:58258 (ESTABLISHED)\nnode      27113 kitsonk   27u    IPv4 0x6b3b9394b570baf3        0t0      TCP localhost:cslistener->localhost:58259 (ESTABLISHED)\nnode      27113 kitsonk   28u    IPv4 0x6b3b9394b38522db        0t0      TCP localhost:cslistener->localhost:58260 (ESTABLISHED)\nnode      27113 kitsonk   29u    IPv4 0x6b3b9394b8780af3        0t0      TCP localhost:cslistener->localhost:58261 (ESTABLISHED)\nnode      27113 kitsonk   30u    IPv4 0x6b3b9394b32b5af3        0t0      TCP localhost:cslistener->localhost:58263 (ESTABLISHED)\nnode      27113 kitsonk   31u    IPv4 0x6b3b9394b3e7f2db        0t0      TCP localhost:cslistener->localhost:58262 (ESTABLISHED)\nnode      27113 kitsonk   32u    IPv4 0x6b3b9394b24562db        0t0      TCP localhost:cslistener->localhost:58264 (ESTABLISHED)\nnode      27113 kitsonk   33u    IPv4 0x6b3b9394b5ce8af3        0t0      TCP localhost:cslistener->localhost:58265 (ESTABLISHED)\nnode      27113 kitsonk   34u    IPv4 0x6b3b9394b5da72db        0t0      TCP localhost:cslistener->localhost:58266 (ESTABLISHED)\nnode      27113 kitsonk   35u    IPv4 0x6b3b9394b9d132db        0t0      TCP localhost:cslistener->localhost:58267 (ESTABLISHED)\nnode      27113 kitsonk   36u    IPv4 0x6b3b9394b3eceaf3        0t0      TCP localhost:cslistener->localhost:58268 (ESTABLISHED)\nnode      27113 kitsonk   37u    IPv4 0x6b3b9394b5c4eaf3        0t0      TCP localhost:cslistener->localhost:58269 (ESTABLISHED)\nnode      27113 kitsonk   38u    IPv4 0x6b3b9394b581aaf3        0t0      TCP localhost:cslistener->localhost:58270 (ESTABLISHED)\nnode      27113 kitsonk   39u    IPv4 0x6b3b9394b8865af3        0t0      TCP localhost:cslistener->localhost:58271 (ESTABLISHED)\nnode      27113 kitsonk   40u    IPv4 0x6b3b9394b8863af3        0t0      TCP localhost:cslistener->localhost:58272 (ESTABLISHED)\nnode      27113 kitsonk   41u    IPv4 0x6b3b9394b8852af3        0t0      TCP localhost:cslistener->localhost:58275 (ESTABLISHED)\nnode      27113 kitsonk   42u    IPv4 0x6b3b9394b56a52db        0t0      TCP localhost:cslistener->localhost:58276 (ESTABLISHED)\nnode      27113 kitsonk   43u    IPv4 0x6b3b9394b89072db        0t0      TCP localhost:cslistener->localhost:58279 (ESTABLISHED)\nnode      27113 kitsonk   44u    IPv4 0x6b3b9394b8876af3        0t0      TCP localhost:cslistener->localhost:58280 (ESTABLISHED)\nnode      27113 kitsonk   45u    IPv4 0x6b3b9394b8874af3        0t0      TCP localhost:cslistener->localhost:58281 (ESTABLISHED)\nnode      27113 kitsonk   46u    IPv4 0x6b3b9394b8872af3        0t0      TCP localhost:cslistener->localhost:58282 (ESTABLISHED)\nnode      27113 kitsonk   47u    IPv4 0x6b3b9394b886faf3        0t0      TCP localhost:cslistener->localhost:58283 (ESTABLISHED)\nnode      27113 kitsonk   48u    IPv4 0x6b3b9394b8869af3        0t0      TCP localhost:cslistener->localhost:58285 (ESTABLISHED)\nnode      27113 kitsonk   49u    IPv4 0x6b3b9394b886baf3        0t0      TCP localhost:cslistener->localhost:58284 (ESTABLISHED)\nnode      27113 kitsonk   50u    IPv4 0x6b3b9394b8867af3        0t0      TCP localhost:cslistener->localhost:58286 (ESTABLISHED)\nnode      27113 kitsonk   51u    IPv4 0x6b3b9394b5c732db        0t0      TCP localhost:cslistener->localhost:58287 (ESTABLISHED)\nnode      27113 kitsonk   52u    IPv4 0x6b3b9394b44312db        0t0      TCP localhost:cslistener->localhost:58295 (ESTABLISHED)\nnode      27113 kitsonk   53u    IPv4 0x6b3b9394b21d4af3        0t0      TCP localhost:cslistener->localhost:58289 (ESTABLISHED)\nnode      27113 kitsonk   54u    IPv4 0x6b3b9394b85e6af3        0t0      TCP localhost:cslistener->localhost:58292 (ESTABLISHED)\nnode      27113 kitsonk   55u    IPv4 0x6b3b9394b5cd72db        0t0      TCP localhost:cslistener->localhost:58293 (ESTABLISHED)\nnode      27113 kitsonk   56u    IPv4 0x6b3b9394b8804af3        0t0      TCP localhost:cslistener->localhost:58294 (ESTABLISHED)\nnode      27113 kitsonk   57u    IPv4 0x6b3b9394b88f1af3        0t0      TCP localhost:cslistener->localhost:58340 (ESTABLISHED)\nnode      27113 kitsonk   58u    IPv4 0x6b3b9394b85e8af3        0t0      TCP localhost:cslistener->localhost:58297 (ESTABLISHED)\nnode      27113 kitsonk   59u    IPv4 0x6b3b9394b89462db        0t0      TCP localhost:cslistener->localhost:58298 (ESTABLISHED)\nnode      27113 kitsonk   60u    IPv4 0x6b3b9394b8883af3        0t0      TCP localhost:cslistener->localhost:58299 (ESTABLISHED)\nnode      27113 kitsonk   61u    IPv4 0x6b3b9394b887aaf3        0t0      TCP localhost:cslistener->localhost:58300 (ESTABLISHED)\nnode      27113 kitsonk   62u    IPv4 0x6b3b9394b87edaf3        0t0      TCP localhost:cslistener->localhost:58301 (ESTABLISHED)\nnode      27113 kitsonk   63u    IPv4 0x6b3b9394b87faaf3        0t0      TCP localhost:cslistener->localhost:58302 (ESTABLISHED)\nnode      27113 kitsonk   64u    IPv4 0x6b3b9394b87deaf3        0t0      TCP localhost:cslistener->localhost:58303 (ESTABLISHED)\nnode      27113 kitsonk   65u    IPv4 0x6b3b9394b58582db        0t0      TCP localhost:cslistener->localhost:58306 (ESTABLISHED)\nnode      27113 kitsonk   66u    IPv4 0x6b3b9394b878aaf3        0t0      TCP localhost:cslistener->localhost:58307 (ESTABLISHED)\nnode      27113 kitsonk   67u    IPv4 0x6b3b9394b3ca3af3        0t0      TCP localhost:cslistener->localhost:58308 (ESTABLISHED)\nnode      27113 kitsonk   68u    IPv4 0x6b3b9394b52102db        0t0      TCP localhost:cslistener->localhost:58309 (ESTABLISHED)\nnode      27113 kitsonk   69u    IPv4 0x6b3b9394b5ce92db        0t0      TCP localhost:cslistener->localhost:58310 (ESTABLISHED)\nnode      27113 kitsonk   70u    IPv4 0x6b3b9394b21ac2db        0t0      TCP localhost:cslistener->localhost:58311 (ESTABLISHED)\nnode      27113 kitsonk   71u    IPv4 0x6b3b9394b27f0af3        0t0      TCP localhost:cslistener->localhost:58312 (ESTABLISHED)\nnode      27113 kitsonk   72u    IPv4 0x6b3b9394b9c8d2db        0t0      TCP localhost:cslistener->localhost:58313 (ESTABLISHED)\nnode      27113 kitsonk   73u    IPv4 0x6b3b9394b5d712db        0t0      TCP localhost:cslistener->localhost:58314 (ESTABLISHED)\nnode      27113 kitsonk   74u    IPv4 0x6b3b9394b89062db        0t0      TCP localhost:cslistener->localhost:58316 (ESTABLISHED)\nnode      27113 kitsonk   75u    IPv4 0x6b3b9394b89052db        0t0      TCP localhost:cslistener->localhost:58317 (ESTABLISHED)\nnode      27113 kitsonk   76u    IPv4 0x6b3b9394b89032db        0t0      TCP localhost:cslistener->localhost:58318 (ESTABLISHED)\nnode      27113 kitsonk   77u    IPv4 0x6b3b9394b89022db        0t0      TCP localhost:cslistener->localhost:58319 (ESTABLISHED)\nnode      27113 kitsonk   78u    IPv4 0x6b3b9394b89012db        0t0      TCP localhost:cslistener->localhost:58320 (ESTABLISHED)\nnode      27113 kitsonk   79u    IPv4 0x6b3b9394b88ff2db        0t0      TCP localhost:cslistener->localhost:58323 (ESTABLISHED)\nnode      27113 kitsonk   80u    IPv4 0x6b3b9394b88fe2db        0t0      TCP localhost:cslistener->localhost:58324 (ESTABLISHED)\nnode      27113 kitsonk   81u    IPv4 0x6b3b9394b88fd2db        0t0      TCP localhost:cslistener->localhost:58325 (ESTABLISHED)\nnode      27113 kitsonk   82u    IPv4 0x6b3b9394b88fb2db        0t0      TCP localhost:cslistener->localhost:58328 (ESTABLISHED)\nnode      27113 kitsonk   83u    IPv4 0x6b3b9394b88fa2db        0t0      TCP localhost:cslistener->localhost:58329 (ESTABLISHED)\nnode      27113 kitsonk   84u    IPv4 0x6b3b9394b88f82db        0t0      TCP localhost:cslistener->localhost:58330 (ESTABLISHED)\nnode      27113 kitsonk   85u    IPv4 0x6b3b9394b88f72db        0t0      TCP localhost:cslistener->localhost:58331 (ESTABLISHED)\nnode      27113 kitsonk   86u    IPv4 0x6b3b9394b88a0af3        0t0      TCP localhost:cslistener->localhost:58443 (ESTABLISHED)\nnode      27113 kitsonk   87u    IPv4 0x6b3b9394b88f32db        0t0      TCP localhost:cslistener->localhost:58334 (ESTABLISHED)\nnode      27113 kitsonk   88u    IPv4 0x6b3b9394b8776af3        0t0      TCP localhost:cslistener->localhost:58335 (ESTABLISHED)\nnode      27113 kitsonk   89u    IPv4 0x6b3b9394b878b2db        0t0      TCP localhost:cslistener->localhost:58336 (ESTABLISHED)\nnode      27113 kitsonk   90u    IPv4 0x6b3b9394b5d2caf3        0t0      TCP localhost:cslistener->localhost:58337 (ESTABLISHED)\nnode      27113 kitsonk   91u    IPv4 0x6b3b9394b5d2d2db        0t0      TCP localhost:cslistener->localhost:58338 (ESTABLISHED)\nnode      27113 kitsonk   92u    IPv4 0x6b3b9394b88f2af3        0t0      TCP localhost:cslistener->localhost:58339 (ESTABLISHED)\nnode      27113 kitsonk   93u    IPv4 0x6b3b9394b88f0af3        0t0      TCP localhost:cslistener->localhost:58341 (ESTABLISHED)\nnode      27113 kitsonk   94u    IPv4 0x6b3b9394b88f02db        0t0      TCP localhost:cslistener->localhost:58342 (ESTABLISHED)\nnode      27113 kitsonk   95u    IPv4 0x6b3b9394b88ef2db        0t0      TCP localhost:cslistener->localhost:58343 (ESTABLISHED)\nnode      27113 kitsonk   96u    IPv4 0x6b3b9394b88edaf3        0t0      TCP localhost:cslistener->localhost:58345 (ESTABLISHED)\nnode      27113 kitsonk   97u    IPv4 0x6b3b9394b56b02db        0t0      TCP localhost:cslistener->localhost:58389 (ESTABLISHED)\nnode      27113 kitsonk   98u    IPv4 0x6b3b9394b8857af3        0t0      TCP localhost:cslistener->localhost:58390 (ESTABLISHED)\nnode      27113 kitsonk   99u    IPv4 0x6b3b9394b88ecaf3        0t0      TCP localhost:cslistener->localhost:58346 (ESTABLISHED)\nnode      27113 kitsonk  100u    IPv4 0x6b3b9394b7559af3        0t0      TCP localhost:cslistener->localhost:58391 (ESTABLISHED)\nnode      27113 kitsonk  101u    IPv4 0x6b3b9394b85e0af3        0t0      TCP localhost:cslistener->localhost:58392 (ESTABLISHED)\nnode      27113 kitsonk  102u    IPv4 0x6b3b9394b87ed2db        0t0      TCP localhost:cslistener->localhost:58393 (ESTABLISHED)\nnode      27113 kitsonk  103u    IPv4 0x6b3b9394b87fb2db        0t0      TCP localhost:cslistener->localhost:58394 (ESTABLISHED)\nnode      27113 kitsonk  104u    IPv4 0x6b3b9394b88052db        0t0      TCP localhost:cslistener->localhost:58395 (ESTABLISHED)\nnode      27113 kitsonk  105u    IPv4 0x6b3b9394b3ca42db        0t0      TCP localhost:cslistener->localhost:58396 (ESTABLISHED)\nnode      27113 kitsonk  106u    IPv4 0x6b3b9394b305baf3        0t0      TCP localhost:cslistener->localhost:58397 (ESTABLISHED)\nnode      27113 kitsonk  107u    IPv4 0x6b3b9394b85fb2db        0t0      TCP localhost:cslistener->localhost:58398 (ESTABLISHED)\nnode      27113 kitsonk  108u    IPv4 0x6b3b9394b85e72db        0t0      TCP localhost:cslistener->localhost:58399 (ESTABLISHED)\nnode      27113 kitsonk  109u    IPv4 0x6b3b9394b570c2db        0t0      TCP localhost:cslistener->localhost:58400 (ESTABLISHED)\nnode      27113 kitsonk  110u    IPv4 0x6b3b9394b56b4af3        0t0      TCP localhost:cslistener->localhost:58401 (ESTABLISHED)\nnode      27113 kitsonk  111u    IPv4 0x6b3b9394b56afaf3        0t0      TCP localhost:cslistener->localhost:58402 (ESTABLISHED)\nnode      27113 kitsonk  112u    IPv4 0x6b3b9394b56a8af3        0t0      TCP localhost:cslistener->localhost:58403 (ESTABLISHED)\nnode      27113 kitsonk  113u    IPv4 0x6b3b9394b892d2db        0t0      TCP localhost:cslistener->localhost:58404 (ESTABLISHED)\nnode      27113 kitsonk  114u    IPv4 0x6b3b9394b89302db        0t0      TCP localhost:cslistener->localhost:58405 (ESTABLISHED)\nnode      27113 kitsonk  115u    IPv4 0x6b3b9394b89342db        0t0      TCP localhost:cslistener->localhost:58407 (ESTABLISHED)\nnode      27113 kitsonk  116u    IPv4 0x6b3b9394b89322db        0t0      TCP localhost:cslistener->localhost:58406 (ESTABLISHED)\nnode      27113 kitsonk  117u    IPv4 0x6b3b9394b89382db        0t0      TCP localhost:cslistener->localhost:58408 (ESTABLISHED)\nnode      27113 kitsonk  118u    IPv4 0x6b3b9394b893b2db        0t0      TCP localhost:cslistener->localhost:58409 (ESTABLISHED)\nnode      27113 kitsonk  119u    IPv4 0x6b3b9394b89432db        0t0      TCP localhost:cslistener->localhost:58410 (ESTABLISHED)\nnode      27113 kitsonk  120u    IPv4 0x6b3b9394b89452db        0t0      TCP localhost:cslistener->localhost:58411 (ESTABLISHED)\nnode      27113 kitsonk  121u    IPv4 0x6b3b9394b576faf3        0t0      TCP localhost:cslistener->localhost:58412 (ESTABLISHED)\nnode      27113 kitsonk  122u    IPv4 0x6b3b9394b85e42db        0t0      TCP localhost:cslistener->localhost:58413 (ESTABLISHED)\nnode      27113 kitsonk  123u    IPv4 0x6b3b9394b88652db        0t0      TCP kitsonkellysmbp:58421->5.255.93.10:krb524 (ESTABLISHED)\nnode      27113 kitsonk  124u    IPv4 0x6b3b9394b87c12db        0t0      TCP localhost:cslistener->localhost:58415 (ESTABLISHED)\nnode      27113 kitsonk  125u    IPv4 0x6b3b9394b5b21af3        0t0      TCP localhost:cslistener->localhost:58416 (ESTABLISHED)\nnode      27113 kitsonk  126u    IPv4 0x6b3b9394b88532db        0t0      TCP localhost:cslistener->localhost:58417 (ESTABLISHED)\nnode      27113 kitsonk  127u    IPv4 0x6b3b9394b88582db        0t0      TCP localhost:cslistener->localhost:58418 (ESTABLISHED)\nnode      27113 kitsonk  128u    IPv4 0x6b3b9394b5c2c2db        0t0      TCP localhost:cslistener->localhost:58419 (ESTABLISHED)\nnode      27113 kitsonk  129u    IPv4 0x6b3b9394b86002db        0t0      TCP localhost:cslistener->localhost:58420 (ESTABLISHED)\nnode      27113 kitsonk  130u    IPv4 0x6b3b9394b58e6af3        0t0      TCP localhost:cslistener->localhost:58422 (ESTABLISHED)\nnode      27113 kitsonk  131u    IPv4 0x6b3b9394b85e62db        0t0      TCP localhost:cslistener->localhost:58423 (ESTABLISHED)\nnode      27113 kitsonk  132u    IPv4 0x6b3b9394b88692db        0t0      TCP localhost:cslistener->localhost:58424 (ESTABLISHED)\nnode      27113 kitsonk  133u    IPv4 0x6b3b9394b89272db        0t0      TCP localhost:cslistener->localhost:58425 (ESTABLISHED)\nnode      27113 kitsonk  134u    IPv4 0x6b3b9394b892a2db        0t0      TCP localhost:cslistener->localhost:58426 (ESTABLISHED)\nnode      27113 kitsonk  135u    IPv4 0x6b3b9394b892c2db        0t0      TCP localhost:cslistener->localhost:58427 (ESTABLISHED)\nnode      27113 kitsonk  136u    IPv4 0x6b3b9394b88702db        0t0      TCP localhost:cslistener->localhost:58428 (ESTABLISHED)\nnode      27113 kitsonk  137u    IPv4 0x6b3b9394b88732db        0t0      TCP localhost:cslistener->localhost:58429 (ESTABLISHED)\nnode      27113 kitsonk  138u    IPv4 0x6b3b9394b88742db        0t0      TCP localhost:cslistener->localhost:58430 (ESTABLISHED)\nnode      27113 kitsonk  139u    IPv4 0x6b3b9394b88722db        0t0      TCP localhost:cslistener->localhost:58431 (ESTABLISHED)\nnode      27113 kitsonk  140u    IPv4 0x6b3b9394b88772db        0t0      TCP localhost:cslistener->localhost:58432 (ESTABLISHED)\nnode      27113 kitsonk  141u    IPv4 0x6b3b9394b5818af3        0t0      TCP localhost:cslistener->localhost:58433 (ESTABLISHED)\nnode      27113 kitsonk  142u    IPv4 0x6b3b9394b5b222db        0t0      TCP localhost:cslistener->localhost:58434 (ESTABLISHED)\nnode      27113 kitsonk  143u    IPv4 0x6b3b9394b89152db        0t0      TCP localhost:cslistener->localhost:58435 (ESTABLISHED)\nnode      27113 kitsonk  144u    IPv4 0x6b3b9394b891a2db        0t0      TCP localhost:cslistener->localhost:58436 (ESTABLISHED)\nnode      27113 kitsonk  145u    IPv4 0x6b3b9394b5c4f2db        0t0      TCP localhost:cslistener->localhost:58437 (ESTABLISHED)\nnode      27113 kitsonk  146u    IPv4 0x6b3b9394b89122db        0t0      TCP localhost:cslistener->localhost:58187 (ESTABLISHED)\nnode      27113 kitsonk  147u    IPv4 0x6b3b9394b887b2db        0t0      TCP localhost:cslistener->localhost:58438 (ESTABLISHED)\nnode      27113 kitsonk  148u    IPv4 0x6b3b9394b89112db        0t0      TCP localhost:cslistener->localhost:58188 (ESTABLISHED)\nnode      27113 kitsonk  149u    IPv4 0x6b3b9394b89102db        0t0      TCP localhost:cslistener->localhost:58189 (ESTABLISHED)\nnode      27113 kitsonk  150u    IPv4 0x6b3b9394b890f2db        0t0      TCP localhost:cslistener->localhost:58190 (ESTABLISHED)\nnode      27113 kitsonk  151u    IPv4 0x6b3b9394b89082db        0t0      TCP localhost:cslistener->localhost:58191 (ESTABLISHED)\nnode      27113 kitsonk  152u    IPv4 0x6b3b9394b88eaaf3        0t0      TCP localhost:cslistener->localhost:58347 (ESTABLISHED)\nnode      27113 kitsonk  153u    IPv4 0x6b3b9394b88e9af3        0t0      TCP localhost:cslistener->localhost:58348 (ESTABLISHED)\nnode      27113 kitsonk  154u    IPv4 0x6b3b9394b88e8af3        0t0      TCP localhost:cslistener->localhost:58349 (ESTABLISHED)\nnode      27113 kitsonk  155u    IPv4 0x6b3b9394b88e7af3        0t0      TCP localhost:cslistener->localhost:58350 (ESTABLISHED)\nnode      27113 kitsonk  156u    IPv4 0x6b3b9394b88e0af3        0t0      TCP localhost:cslistener->localhost:58351 (ESTABLISHED)\nnode      27113 kitsonk  157u    IPv4 0x6b3b9394b88dfaf3        0t0      TCP localhost:cslistener->localhost:58352 (ESTABLISHED)\nnode      27113 kitsonk  158u    IPv4 0x6b3b9394b88deaf3        0t0      TCP localhost:cslistener->localhost:58353 (ESTABLISHED)\nnode      27113 kitsonk  159u    IPv4 0x6b3b9394b88ddaf3        0t0      TCP localhost:cslistener->localhost:58354 (ESTABLISHED)\nnode      27113 kitsonk  160u    IPv4 0x6b3b9394b4330af3        0t0      TCP localhost:cslistener->localhost:58355 (ESTABLISHED)\nnode      27113 kitsonk  161u    IPv4 0x6b3b9394b2256af3        0t0      TCP localhost:cslistener->localhost:58356 (ESTABLISHED)\nnode      27113 kitsonk  162u    IPv4 0x6b3b9394b56dbaf3        0t0      TCP localhost:cslistener->localhost:58357 (ESTABLISHED)\nnode      27113 kitsonk  163u    IPv4 0x6b3b9394b88dcaf3        0t0      TCP localhost:cslistener->localhost:58358 (ESTABLISHED)\nnode      27113 kitsonk  164u    IPv4 0x6b3b9394b88dbaf3        0t0      TCP localhost:cslistener->localhost:58359 (ESTABLISHED)\nnode      27113 kitsonk  165u    IPv4 0x6b3b9394b88d7af3        0t0      TCP localhost:cslistener->localhost:58360 (ESTABLISHED)\nnode      27113 kitsonk  166u    IPv4 0x6b3b9394b88d6af3        0t0      TCP localhost:cslistener->localhost:58361 (ESTABLISHED)\nnode      27113 kitsonk  167u    IPv4 0x6b3b9394b88d5af3        0t0      TCP localhost:cslistener->localhost:58362 (ESTABLISHED)\nnode      27113 kitsonk  168u    IPv4 0x6b3b9394b88d4af3        0t0      TCP localhost:cslistener->localhost:58363 (ESTABLISHED)\nnode      27113 kitsonk  169u    IPv4 0x6b3b9394b88d2af3        0t0      TCP localhost:cslistener->localhost:58364 (ESTABLISHED)\nnode      27113 kitsonk  170u    IPv4 0x6b3b9394b88d1af3        0t0      TCP localhost:cslistener->localhost:58365 (ESTABLISHED)\nnode      27113 kitsonk  171u    IPv4 0x6b3b9394b88cdaf3        0t0      TCP localhost:cslistener->localhost:58366 (ESTABLISHED)\nnode      27113 kitsonk  172u    IPv4 0x6b3b9394b88ccaf3        0t0      TCP localhost:cslistener->localhost:58367 (ESTABLISHED)\nnode      27113 kitsonk  173u    IPv4 0x6b3b9394b88c3af3        0t0      TCP localhost:cslistener->localhost:58368 (ESTABLISHED)\nnode      27113 kitsonk  174u    IPv4 0x6b3b9394b88c2af3        0t0      TCP localhost:cslistener->localhost:58369 (ESTABLISHED)\nnode      27113 kitsonk  175u    IPv4 0x6b3b9394b88bfaf3        0t0      TCP localhost:cslistener->localhost:58370 (ESTABLISHED)\nnode      27113 kitsonk  176u    IPv4 0x6b3b9394b88beaf3        0t0      TCP localhost:cslistener->localhost:58371 (ESTABLISHED)\nnode      27113 kitsonk  177u    IPv4 0x6b3b9394b88bcaf3        0t0      TCP localhost:cslistener->localhost:58372 (ESTABLISHED)\nnode      27113 kitsonk  178u    IPv4 0x6b3b9394b88bbaf3        0t0      TCP localhost:cslistener->localhost:58373 (ESTABLISHED)\nnode      27113 kitsonk  179u    IPv4 0x6b3b9394b88baaf3        0t0      TCP localhost:cslistener->localhost:58374 (ESTABLISHED)\nnode      27113 kitsonk  180u    IPv4 0x6b3b9394b88b9af3        0t0      TCP localhost:cslistener->localhost:58375 (ESTABLISHED)\nnode      27113 kitsonk  181u    IPv4 0x6b3b9394b88b7af3        0t0      TCP localhost:cslistener->localhost:58376 (ESTABLISHED)\nnode      27113 kitsonk  182u    IPv4 0x6b3b9394b88b6af3        0t0      TCP localhost:cslistener->localhost:58377 (ESTABLISHED)\nnode      27113 kitsonk  183u    IPv4 0x6b3b9394b88b5af3        0t0      TCP localhost:cslistener->localhost:58378 (ESTABLISHED)\nnode      27113 kitsonk  184u    IPv4 0x6b3b9394b88b4af3        0t0      TCP localhost:cslistener->localhost:58379 (ESTABLISHED)\nnode      27113 kitsonk  185u    IPv4 0x6b3b9394b88abaf3        0t0      TCP localhost:cslistener->localhost:58380 (ESTABLISHED)\nnode      27113 kitsonk  186u    IPv4 0x6b3b9394b88aaaf3        0t0      TCP localhost:cslistener->localhost:58381 (ESTABLISHED)\nnode      27113 kitsonk  187u    IPv4 0x6b3b9394b88a8af3        0t0      TCP localhost:cslistener->localhost:58382 (ESTABLISHED)\nnode      27113 kitsonk  188u    IPv4 0x6b3b9394b88882db        0t0      TCP localhost:cslistener->localhost:58439 (ESTABLISHED)\nnode      27113 kitsonk  189u    IPv4 0x6b3b9394b5bac2db        0t0      TCP localhost:cslistener->localhost:58440 (ESTABLISHED)\nnode      27113 kitsonk  190u    IPv4 0x6b3b9394b88a2af3        0t0      TCP localhost:cslistener->localhost:58441 (ESTABLISHED)\nnode      27113 kitsonk  191u    IPv4 0x6b3b9394b88a1af3        0t0      TCP localhost:cslistener->localhost:58442 (ESTABLISHED)\nnode      27113 kitsonk  192u    IPv4 0x6b3b9394b889daf3        0t0      TCP localhost:cslistener->localhost:58444 (ESTABLISHED)\nnode      27113 kitsonk  193u    IPv4 0x6b3b9394b889caf3        0t0      TCP localhost:cslistener->localhost:58445 (ESTABLISHED)\nnode      27113 kitsonk  194u    IPv4 0x6b3b9394b889baf3        0t0      TCP localhost:cslistener->localhost:58446 (ESTABLISHED)\nnode      27113 kitsonk  195u    IPv4 0x6b3b9394b889aaf3        0t0      TCP localhost:cslistener->localhost:58447 (ESTABLISHED)\nnode      27113 kitsonk  196u    IPv4 0x6b3b9394b8899af3        0t0      TCP localhost:cslistener->localhost:58448 (ESTABLISHED)\nnode      27113 kitsonk  197u    IPv4 0x6b3b9394b8898af3        0t0      TCP localhost:cslistener->localhost:58449 (ESTABLISHED)\nnode      27113 kitsonk  198u    IPv4 0x6b3b9394b8897af3        0t0      TCP localhost:cslistener->localhost:58450 (ESTABLISHED)\nnode      27113 kitsonk  199u    IPv4 0x6b3b9394b8896af3        0t0      TCP localhost:cslistener->localhost:58451 (ESTABLISHED)\nnode      27113 kitsonk  200u    IPv4 0x6b3b9394b888faf3        0t0      TCP localhost:cslistener->localhost:58452 (ESTABLISHED)\nnode      27113 kitsonk  201u    IPv4 0x6b3b9394b888eaf3        0t0      TCP localhost:cslistener->localhost:58453 (ESTABLISHED)\nnode      27113 kitsonk  202u    IPv4 0x6b3b9394b888daf3        0t0      TCP localhost:cslistener->localhost:58454 (ESTABLISHED)\nnode      27113 kitsonk  203u    IPv4 0x6b3b9394b88892db        0t0      TCP localhost:cslistener->localhost:58455 (ESTABLISHED)\nnode      27113 kitsonk  204u    IPv4 0x6b3b9394b32a32db        0t0      TCP localhost:cslistener->localhost:58456 (ESTABLISHED)\nnode      27113 kitsonk  205u    IPv4 0x6b3b9394b39742db        0t0      TCP localhost:cslistener->localhost:58457 (ESTABLISHED)\nnode      27113 kitsonk  206u    IPv4 0x6b3b9394b32ad2db        0t0      TCP localhost:cslistener->localhost:58458 (ESTABLISHED)\nnode      27113 kitsonk  207u    IPv4 0x6b3b9394b3e0eaf3        0t0      TCP localhost:cslistener->localhost:58459 (ESTABLISHED)\nnode      27113 kitsonk  208u    IPv4 0x6b3b9394b2893af3        0t0      TCP localhost:cslistener->localhost:58460 (ESTABLISHED)\nnode      27113 kitsonk  209u    IPv4 0x6b3b9394b3c072db        0t0      TCP localhost:cslistener->localhost:58461 (ESTABLISHED)\nnode      27113 kitsonk  210u    IPv4 0x6b3b9394b3c99af3        0t0      TCP localhost:cslistener->localhost:58462 (ESTABLISHED)\nBrowserSt 27114 kitsonk  cwd      DIR                1,1        102 22706676 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack\nBrowserSt 27114 kitsonk  txt      REG                1,1    7727472 22706684 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack/BrowserStackLocal\nBrowserSt 27115 kitsonk  cwd      DIR                1,1        102 22706676 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack\nBrowserSt 27115 kitsonk  txt      REG                1,1    7727472 22706684 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack/BrowserStackLocal\nkitsonkellysmbp:~ kitsonk$ lsof |grep node\nBrowserSt 27114 kitsonk  cwd      DIR                1,1        102 22706676 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack\nBrowserSt 27114 kitsonk  txt      REG                1,1    7727472 22706684 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack/BrowserStackLocal\nBrowserSt 27115 kitsonk  cwd      DIR                1,1        102 22706676 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack\nBrowserSt 27115 kitsonk  txt      REG                1,1    7727472 22706684 /Users/kitsonk/github/core/node_modules/intern/node_modules/digdug/browserstack/BrowserStackLocal\n. Upgraded to OSX 10.9.4 and NodeJS 0.10.29, same results.  I also did an rm -rf ~/.npm, npm clear cache, rm -rf node_modules and then npm install.\n. I don't have just a plain Selenium server.  I re-ordered my environments like this:\njavascript\nenvironments: [\n    { browserName: 'safari', version: '6.1', platform: 'mac' },\n    { browserName: 'safari', version: '7.0', platform: 'mac' },\n    { browserName: 'internet explorer', version: '11.0', platform: 'win8' },\n    { browserName: 'internet explorer', version: '10.0', platform: 'win8' },\n    { browserName: 'internet explorer', version: '9.0', platform: 'windows' },\n    { browserName: 'firefox', version: '29.0', platform: 'windows' },\n    { browserName: 'chrome', version: '35.0', platform: 'win8' }\n]\nI get this as output:\nsh\nListening on 0.0.0.0:9000\nStarting tunnel...\nBrowserStackLocal v2.2\nReady\nInitialised safari 7.0 on MAC\nInitialised safari 6.1 on MAC\nAnd it just \"hangs\" and I get Session timed out because the browser was idle for 90 seconds for each test in BrowserStack.  I can see the full suite executes fine in the session, and just sits there trying to \"post\" back the results.  I run the same tests locally in Safari 7.0.5 and it completes just fine.\nIf I switch to SauceLabs and adjust to:\njs\nenvironments: [\n    { browserName: 'safari', version: '6', platform: 'OS X 10.8' },\n    { browserName: 'safari', version: '7', platform: 'OS X 10.9' },\n    { browserName: 'internet explorer', version: '11', platform: 'Windows 8.1' },\n    { browserName: 'internet explorer', version: '10', platform: 'Windows 8' },\n    { browserName: 'internet explorer', version: '9', platform: 'Windows 7' },\n    { browserName: 'firefox', version: '29.0', platform: 'Windows 7' },\n    { browserName: 'chrome', version: '35.0', platform: 'Windows 7' }\n]\nAnd I can't seem to get consistent test runs... some sessions just seem to hang and maybe I get a \"clean\" run 1 out of 10 times (which is why I was trying BrowserStack), but they do eventually run.\nThe only thing that might be odd, is my whole test suite at the moment takes about 6 seconds to execute.\n. You are basically saying in that example \"wait until I tell you it is ok to continue\" \"ok, it is ok to continue\" \"no wait a minute I changed my mind\".  You should not resolve the deferred until you have completed the task.  If an error is thrown later on, then you didn't complete the task and you resolved too early.  How can the intern watch something when you have told it it is ok to proceed?\n. If you are looking for support, you should ask your questions on StackOverflow instead of here.  This is for once you identify an issue and it would be better to get support on StackOverflow and then if it identifies a defect then to raise it in the proper issue tracker, because even if it is an issue, The Intern uses LeadFoot to integrate and the issue needs to be addressed there.\n. I suspect this means providing an out of the box \"wrapper\" to the audit API for Google Chrome's Accessibility Developer Tools to \"audit\" any application and pass or fail on certain thresholds.\n. @phated @stimms @sholladay considering this has turned into a philosophical conversation about gulp, maybe there is a better forum than Intern issues?\n. @csnover I went and looked again, it does say loaderOptions, it is example.intern.js that says loaderConfig which doesn't work.  loaderOptions works fine.\n. @jason0x43 my typo in the issue, not in the observed behaviour, actually my configuration was technically:\njs\nreporters: [\n    { id: 'Console' },\n    { id: 'LcovHtml', directory: 'html-report' },\n    { id: 'Lcov', filename: 'lcov.info' }\n]\n. Also, to clarify, I am passing it in via a Gruntfile.js.\n. Yes, works for me too.  :smiley: :+1: \n. #427 updates Istanbul to v0.3.16 as a standalone update.\n. Since it isn't technically \"lcov\", I suspect JsonCoverage is more semantically correct.  Will go with that.\n. @csnover no, let me pull out the fix for the reporter from #435.  I should have created another branch without that commit.\n. Ok, it is ready for reviewing/merging.\n. @csnover @jason0x43 is there anything else you want me to do to get this merged?  The CI issues appear to be related to something other than this PR, as all I have been doing is rebasing.\n. I have rebased, I am not sure what to do with it though, as the tests are like the other tests in intern when dealing with the coverage, though Colin didn't feel there were sufficient.\n. \ud83d\udc4d awesome... thanks!\n. I tried the above in a personal branch and it resolves the issue where I am running tests the cause the reference to this.suiteNode to be lost.\n. > I presume you are wiping everything out of document.body to cause this?\nCorrect.\n\nThe more correct solution for your case is probably to set runnerClientReporter.writeHtml to false in your config (in master only at the moment).\n\nYes, fair enough.\n\nA more correct patch for the reporter would probably be to write everything starting rooted at an anonymous container node instead of document.body, and then if someone blows up document.body it can be restored because a reference to the container will still be held and it can just be dumped back into the body.\n\nOk, let me work on that.\n. I will rebase #451 again! \ud83d\ude06 \n. Fixed via #451 being merged. I suspect this is better left as a dev dependency of the containing project.  Adding the package, along with Intern, is trivial.  Hard bundling the dependency means that Intern will assume all users will require Chrome and ChromeDriver to do testing, an assumption/assertion that is probably not good to make.  Also, there are many use cases where local Web Driver testing is never used and again.  In addition there would be the need to try to keep up with version updates of a package that is not actually required to make Intern work.\nWhy is npm install intern chromedriver --save less easy?\n. So it is more accurate to say...\n\nFunctional test suite(s) to ~~run in~~ execute against each browser once non-functional tests are completed\n\nBut we are arguing semantics.  Because but they do not actually run in a browser is semantics too in the sense that they partly do, as you are obviously testing some sort of functionality you have loaded into the browser but require functional inputs supplied from a controller that sits within the \"server\".\nI guess @tmcw what sort of issue did the unclearness cause you as this may inform how to better clarify the documentation?\n. What does your intern configuration look like.  For me, most of the time, you just need to drop out the useLoader var from your config for 3.  I don't know if it has been removed from the reference files.\n. @dylans commented that he prefers a ternary operator to be more explicit about what is going on.  I would of course defer to whatever @csnover preferred.\n. The typings come from borisyankov/DefinitelyTyped and I can see that the current typings for chai reflect what is contained in Intern.  I suspect there will need to be a PR on DefinitelyTyped to fix it.\nOf course temporarily you could work around it by casting to ExpectStatic.\n. My opinion is that it would be \"surprising\" on the command line for basePath to affect the path of the config argument.  I could understand basePath being applied after the config is loaded, but I would logically assume the path for config is relative to where the command is being run.\n. While the changes to to the WebDriver reporter are still mergable, the unit tests for the WebDriver reporter (which don't exist in master) are a bit hopelessly beyond repair.  The original behaviour prior to the 3.0.4 refactoring is that when waitForReporter was false, the messages would be sent synchronously to request.  Now, the requests are sent asynchronously no matter what, but the only change is that when waitForReporter is false, it does not return the promise.  When waitForReporter is true, a promise is returned, which allows the runner to wait until the promise is resolved before continuing.  The unit tests use a mock for request, but the problem now is that because the request is not resolved in the same turn, the request data is never available for introspection when the test continues, but of course because there is not Promise returned, there is no reliable way to know exactly when the request has been sent.\nOf course, I could just hack the unit tests to wait a bit to introspect the request mock, but that doesn't seem to be the best way of handling things.\n. Actually, correction, it was a different change in behaviour... what gets posted to request is the data payload wrapped into an array.  Previous behaviour was only sending the request data payload as a JSON object serialized.  Updating the unit tests to reflect the change in behaviour.\n. Ok, double back on that... when more then one event is issued during the same turn, the first one is resolved synchronously, the second one is resolved in the next turn and there is no handle to that.  Working around the issue for the time being, but clearly there is no way of \"knowing\" when the messages get dispatched at the moment from the public WebDriver API.\n. I can't figure out why this is failing... The self tests don't actually report any errors, but it marks all the test cases in SauceLabs as failures.  It could be because I actually do throw errors in the WebDriver reporter to verify it does represent those correctly, but I still can't figure out why it is still exiting badly without reporting the error console side.\n. It is current with master already...\n. I have seen it before myself on OSX as well. :sob: I will try to reproduce.\n. You might also want to update selftest.intern.js to use loaderOptions now and title case the selftest.sh reporters. :wink: \n. Do you have useLoader set in your Intern configuration?  If you aren't using another loader, just remove that (assuming you migrated from Intern 2).\n. Oh yeah, I see it now... yeah, that would explain exactly the behaviour I am catching in the tests.\n. I :+1: making the Proxy more robust and surfacing up anything unexpected as either a hard fail (which is cruel, but accurate) or a warning (which is kind but cruel in a different way).\n. I just tried npm@3, after I did a rm -rf node_modules and then an npm install and there were no issues in running the client.html.  Obviously the important thing is the fixdeps.js running when the package is installed.\n. Strange, as I am running Intern under v5.0.0 and not having that issue.  Are you sure you don't have something else going on?  I also just tried master self tests and didn't have a problem.\nIn particular, fs in 5.0.0 still has createWriteStream which seems like your specific environment must be injecting some other module than fs.\n. All three of them answer questions on StackOverflow in their spare time, because they care, just like the other people who have contributed to Intern.\nOften times if you don't receive an answer in any forum, it can be for a number of reasons, including that you are asking a obvious answer, or the question you are asking is not clear, or people, who are giving of their own spare time to help others are busy.\n. You like just need to remove useLoader option in your intern configuration.\n. Just thinking out loud... would a better pattern, instead of convoluting the Intern config, is create a test interface that exposes some of these internals that an end user could then choose to pass or throw an error?  Then it would be up to the end user to have this final test case that throws under whatever arbitrary conditions it has or hasn't met?  For example something like:\n``` javascript\ndeclare([ 'intern!object' ], function (registerSuite) {\nregisterSuite({\n    name: 'the final stand',\n    'coverage threshold': function () {\n      if (this.coverage.branch < 0.90) {\n        throw new Error('Not enough coverage, try again!');\n      }\n    }\n  });\n});\n```\n. A browser doesn't have a cwd... so the analogy is a bit apples and oranges.  It is the more common practice to have things be relative to the cwd on a command line.\nThis was discussed largely in #249 though and why in Intern 3 the basePath and baseUrl were separated, because of the expected behaviours of a \"browser\" and a \"command line\".\n. For sure, someone is going to run config with globs in the browser.  It is unclear from this PR how that will be handled.  Also, wouldn't it make sense to have a test for that behaviour as well?\n. And what happens when client.html is used as the runner?\n. With 1 and 2, it sounds like you don't understand the difference between functional and unit tests.  Any console.log statements will be logged where the code is executing.  Functional tests are a harness which remote commands are run via the Selenium/WebDriver interface, where the code is running on the host machine and the commands are being run remotely.  For unit tests, the code is loaded in the browser, therefore the console.log statements are running on the browsers.\nI think 3 and 4 are related to your confusion about 1 and 2.\n. Again, you are missing some fundamentals.  You are not understanding the difference between function and unit tests and where the code actually executes, which would explain why your expectations of  console.log messages is not met.\nThis isn't really the support forum for Intern, as stated in the contributing guidelines which were available when originally opening this issue.\n\nbut If I make a change to the code, save the revised code, and explicitly re-run the test, then my expectation (and the expectations of those I've shown this to) is that it will actually run again!\n\nIt is hard to diagnose why this isn't meeting your expectations.  Either your expectations are wrong or you are doing something that is hard to diagnose.  I am afraid without seeing exactly what you are doing to cause this mis-alignment of expectations, it is impossible to inform you of why they are mis-aligned.\nIf the freely available sources of support don't meet your needs, there are commercial options available as well, but as the contributing guidelines state, this is not the support forum.\n. I have some unit tests for the WebDriver reporter in #451.  If this PR makes sense, we should find a way to integrate/port over those unit tests, even if we don't like the functionality that is in #451 (of course merging #451 and rebasing might also make sense).\n. Coolness! \ud83d\udc4d \n. I suspect it is a GitHub spam bot of some sort... I have seen them before.  Only repo, only activity.\n. We will do an npm release soon, but there is no actual distribution build step with Intern, so a dependency of \"intern\": \"theintern/intern#7b524a057a4a7140d0a4422b18f2084975746dfe\" works until it is released.\n. Please note, this is not a bug.  The documentation you are looking at is for a newer version of Chai's assertion library than what is available with Intern 3.0.6 and a workaround for updating the dependency is listed above.\n. I was thinking about this, the biggest challenge is trying to use the dojo-core modules in their \"SymstemJS ES6\" format where there is a default export which gets mapped to [module_factory_return].default and tagged with some meta data.\nWe could of course just change those modules which Intern uses back into \"standard\" modules, where there is export = foo; instead of export default foo, when importing to untranspiled AMD, it would work in the old way.\nIt looks based on this PR, it would only need to be dojo-core/has.  It would make a few changes into dojo-core to revert imports of import has from './has' to import * as has from './has' but that isn't the worst thing in the world.\n. I suspect I must be having a similar problem, because yes, I am getting almost exactly same thing.\n. Yes, I am seeing the same, reverting to 75c1472d6d1e3fcf7b1ed7f92deb14ea8b631a44 resolves the issue.  Seems like there is something more wrong.\n. Awesome @rodneyrehm!  Thank you!\n. Initial investigations are that current Edge does not support devtools type extensions.  While it is on their roadmap, they are focused on other extension types.  Therefore it is not currently possible.\n. @andyearnshaw we could expose additional methods if SystemJS doesn't handle AMD Plugin Specification.  We also use dojo/node and dojo/text as a loader plugins with Intern IIRC, but I think we could address those.  I am just not 100% sure what SystemJS requires as a plugin API.\n. @andyearnshaw thanks and ok, will look at incorporating that into the API... I will read up on the SystemJS plugin API as well, as I suspect it will be something folks will want in general.\n. Why don't you want to sign a CLA?\nWhile there is some debate on if a CLA is needed or not, most major projects require them (e.g. Angular 2, V8, Chromium, jQuery, TypeScript (and all Microsoft Open Source Projects), Dojo, etc...).\n. > Mostly because I don't want to share all this personal info just to contribute to a project.\nFirst Name, Last Name and an e-mail address are too much personal information?  That is what you would essentially be providing with a Pull Request anyways.\nIt is potentially a fair point that the Dojo Foundation one asks a bit too much information.  Since the foundations have merged though, either a jQuery or Dojo Foundation CLA would work for this project.  I am pretty sure we are going to abandon the Dojo Foundation one, once we merge the databases and rebrand the jQuery one to the combined Foundation.\n\nmost of open source projects\n\nThat is debatable, you listed 3, I listed 6 Open Source Projects.\n. > Sorry that was my mistake, I thought everything in CLA form was required. I have no regrets in sharing what is already public.\nWe need to update our documentation so that we are pointing to the jQuery form.  I do think the Dojo Foundation form does require additional personal information that is unnecessary.\n. The \"big\" difference I can think of off hand is that npm3 flattens the dependencies and was causing issues with the symbolic linking Intern did to make sure the browser modules were in a consistent \"knowable\" place.  browser_modules were introduced and the sym links moved there.  It could be some interaction there.\nIf you are upgrading an install, are you rm -rf node_modules, or just migrating to npm3?  It might be something with that.\n. Ok, I will close this then.  Thank you.. Works for me... just checked.. Sorry, it is a 404.. The end user sees it because there is no easy way to hide it from the end user. Most of these probing tests require specific Selenium commands which are not to be hidden from the user.. References this discussion on gitter: https://gitter.im/theintern/intern?at=59edb682f7299e8f531f514c. I was able to get it to work if I did the following: http://localhost/project/node_modules/intern/?basePath=/project/ but it feels like that is something that Intern would be able to resolve itself automatically.. Sounds perfect to me!. I guess the same could be said for the Lcov Reporter Tests as well.  I was just following the pattern set out in the project.  As I assume whomever wrote the Lcov unit tests, they also felt that unit tests should only check the implementation details of the code and that introspecting the output would actually be testing Istanbul...  Maybe the author of the Lcov unit wouldn't mind commenting on their logic...\n. ",
    "indolering": "I really like WebComponentTester's setup, in which they run each module its own iFrame and allow you to navigate over to the individual page.\n. Has anyone taken a look at testdouble.js?  It's got some commercial backing....\n. It sounds like they would accept a PR that provides that functionality.  That being said, it sounds like Sinon is finally up-to-snuff....\n. Yeah, this is as much a documentation issue as a missing feature.  Anyone feel like rolling up their sleeves and adding this to the user guide?. I came here with a similar request, to run unit tests in real a real browser in the background.\nComing from Polymer and their excellent WebComponentTester, I really enjoyed the ability to run unit tests in the browser.  Intern could match the UX of running unit tests in Node by controlling a Selenium standalone server running the (upcoming) headless version of Chrome.  \nI agree that moving away from Selenium would be a bad idea for all of the reasons outlined above.  Based on the summary about Karma's internals, the problem isn't with Selenium per se, but its focus on end-to-end functional testing.  If anything, we should be pushing upstream Selenium to provide similar features.\n. Firefox and Chrome have both announced headless modes.  Supporting this in the future should be as simple as altering the command used to launch Chrome.\nLock thread?. If you had BountySource integration, I would totally chip in a few mBTCs.\n. Maybe we could have Nyan cat show up in the JS console when running browser-based tests?  That keeps the project professional while still having a fun Easter egg.\n. ",
    "bitpshr": "I think this is a good idea. \nI have an open pull request to make an updated Intern Grunt task part of this repository, so being able to distribute everything as a single package via NPM for world domination of JavaScript testing would be a good thing.\n+1 for distributing Intern via NPM regardless of the route we take with Grunt.\n. In the process of debugging and cleaning up a fix for this based on work with @neonstalwart at https://github.com/bitpshr/intern/compare/deadlock-fix\n. I've had one other user voice concern over publishing their SL key, and this seems like a good approach to solving that issue. I can appreciate the idea of a grunt task being its \"own\" environment and that this method may seem awkward, but no immediate alternatives come to mind.\n. @eskimoblood, I'm having trouble thinking of a scenario in which it's beneficial to mock a dependency on a per-module basis using contexts rather than just using map. If I mock a dependency for one module, I want that dependency mocked for all modules that are dependent upon it, and I don't need different implementations per-module. Can you share some details about your specific use case?\n. Hi Ariya,\nWe tried to give credit where credit is due, and Istanbul definitely provides a good mechanism for code coverage. As such, we mention and link to Istanbul on http://theintern.io/ in the lead-in paragraph at the very top of the page, one of the first pieces of text users see. We also mention Istanbul in the Features section of the README.\n. Landed in 0a40a7af2aeea5529939ca12926d1c1cadd39f45. Thanks!\n. Yes, that is the reason we are not using dojo/_base/array in this case. It incorrectly handles holes and it also returns a nonstandard signature that accepts an extra last parameter.\n. refs #16 and #10\n. Nice! :+1: \n. dojo2-core PR tracking at https://github.com/csnover/dojo2-core/pull/10\n. refs #32, #41 \n. refs #49 \n. What are your thoughts on this one? Would you rather us just warn instead of fail?\n. Good lord, if my head wasn't screwed on... :-1: \n. ",
    "phated": "Hooray! Thanks Colin!\n. Could it work to add the dependencies as NPM dependencies using the https+git:// prefix and then point the package maps at them inside node_modules?\nSuggesting this because the one thing that seems universally needs to be done is npm install once you have the source.\n. Another project that might be worth looking into is https://github.com/iammerrick/Squire.js - @iammerrick has gone through a lot of trouble to handle a lot of the stubbing boilerplate.  Not sure if this is truly require.js specific or if that is the only loader he uses it with.\n. +1 for keeping it open\n. chai-spies is really slim in features and didn't work for many use cases I had.  I submitted a PR to Sinon.JS to add AMD (since it was never suggested before).\n. SinonJS accepted my PR for AMD support https://github.com/cjohansen/Sinon.JS/commit/7bf869e435b728e7c4a64ea845daa0db5ee89dd2\n. From the wiki:\n\nReporters can also include optional start and stop methods for performing any additional arbitrary work when a reporter is started or stopped:\n```\ndefine([\n  'dojo/aspect',\n  'intern/lib/Suite'\n], function (aspect, Suite) {\n  var handles = [];\n  return {\n      start: function () {\n          function augmentJsonValue() {\n              / \u2026 /\n          }\n      handles.push(aspect.after(Suite.prototype, 'toJSON', augmentJsonValue));\n  },\n\n  stop: function () {\n      var handle;\n      while ((handle = handles.pop())) {\n          handle.remove();\n      }\n  }\n\n}\n});\n```\n\nI am trying to do cleanup and send a message to my environment to shutdown.\n. More information: start is called, but stop isn't.\n. I am trying to shut down my custom environment when the tests finish.  I haven't switched tests over yet, so I can just wait until this is fixed.\n. Not sure I know the difference between a reporter and a runner reporter.  When I tried to subscribe to /runner/end, it didn't fire.\n. It is a client reporter, specifically client.html\n. Thank you.  This merge is very much appreciated.\n. Since Java is already a requirement for SauceConnect, would https://github.com/jsdevel/webdriver-sync be better? /cc @jsdevel\n. I am wondering if a template would be a better solution than using the xmlbuilder library from npm as it hasn't been updated in a year.\nAlthough, it does have a few noteworthy dependants.  Sorry, just thinking out loud.\n. Should the xml generator from js-doc-parse be split out or just duplicated into intern?\n. I can implement this, but how would we go about getting your xml generator into intern while satisfying the CLA?\n. Sorry, I was under the impression that someone wasn't able to duplicate another's code under the CLA.  Sounds good.\n. I didn't see any tests for the intern/chai plugin, so I just made the changes to the module.  Do you think this could land in a 1.3.2 instead of 1.4 (not sure if considered a bug)?\n. There's no real reason to create a gulp task, as the grunt task just spawns a child process.  Gulp lets you do that with standard node libraries\n. @sholladay creating a plugin for this goes against the gulp plugin guidelines, using vinyl-fs as a globbing mechanism is an anti-pattern.\n. @sholladay the plugins site isn't a representation of plugins that follow the guidelines, just ones that people have published with the gulpplugins tag.  Thank you for pointing all those out, I will take a moment to add them to our blacklist.  We don't always have time to go through the list and add things to the blacklist.\nIf a library's API doesn't need file contents passed in, then there is no reason to make a gulp plugin.  Test runners operate on file paths, not contents and therefore shouldn't be put in the middle of a stream.  Gulp isn't some magic library where everything should be part of a stream, it just enables you to write tasks in JS.\n. @stimms the biggest problem with that is that you would need to programmatically set the file paths you wanted to test for the suite.  Having a gulp task wouldn't solve this for you, as intern is configured with a file as far as I can tell.\n. @stimms gulp plugins are about streaming files through a set of transforms, not globbing and then writing to the filesystem, there was a good article on what belongs in a gulp plugin but I can't seem to find it. (I really dislike discoverability on Medium)\n. I used npm link and everything works excellent.  process.argv[1] basically means you wouldn't be able to do a bin file without other hackery\n. Change to \"correct\" directory or forcing people into a specific install pattern?\n. Also, note that you can just change where you are pointing at for config if you want to be in a different directory\n. If this is indeed a problem (which I don't see it as), there should be a test for it.\n. Come to think about it, it doesn't force people into being in any specific directory, it only forces you to base your config paths based on current directory.  You are already forcing people into specific considerations for directory vs where intern lives, so this allows for more flexibility.\n. ",
    "milesj": "Awesome, was going to ask for this. However, when trying to install intern through NPM, I keep receiving this error... which is weird because the repo looks fine.\n``\nnpm WARNgit config --get remote.origin.urlreturned wrong result (git://githu\nb.com/csnover/sauce-connect-launcher.git) undefined\nnpm WARNgit config --get remote.origin.url` returned wrong result (git://githu\nb.com/csnover/sauce-connect-launcher.git) undefined\nnpm ERR! git clone git://github.com/csnover/sauce-connect-launcher.git undefined\nnpm ERR! git clone git://github.com/csnover/sauce-connect-launcher.git undefined\n```\n. Yeah that was my mistake, I fixed it already. I have git installed but cygwin couldn't reference it.\n. Looks like I've already accepted the terms before!\n. I still get the \"The username or email address provided is already on file. Only one CLA needs to be filed per username/email address.\" message.\n. ",
    "altano": "So I'm confused.  This is an open issue for milestone 1.1 and is still open, but intern appears to be available and installable via npm as version 1.0.  But the \"Using Intern with Grunt\" page says:\n\nInstall Intern and load the Grunt task into your Gruntfile using grunt.loadTasks('path/to/intern/grunt'); (Intern 1.0.0) or grunt.loadNpmTasks('intern') (Intern 1.1+).\n\n... but loadNpmTasks() fails with Intern 1.0 currently on npm.\nSo, what does it mean to support loadNpmTasks() with Intern 1.1 if that's not on npm yet?  Was that documentation just jumping the gun on the release?\nI'm assuming that if I want to use Intern with Grunt right now, I can't use npm and I should just download via git and call loadTasks() pointing at the intern/grunt.  Right?\nThis stuff all looks pretty cool by the way, so thanks to all of you for working on this.\n. That makes sense.  I'm still having trouble but I'll start a new issue to discuss it.\n. ",
    "breerly": "Mega +1\n. I'm not sure what functionality this demonstrates other than convincing the user that intern is a waste of time.\nAny chance you can help me get this working?\n. ",
    "jdalton": "Also, let me know any issues, API awkwardness, or other things I might tweak. Always looking for feedback.\nI will be pushing a version bump soon v1.1.0, Benchmark.js has been simplified by offloading parts to Lo-Dash, and has also been updated to workaround some V8 issues. I'm also adding sugar to simplify creating benchmarks, to have default onComplete callbacks that will log output so it doesn't require any additional configuration.\n. > I was having some issues getting Benmark.js \"master\" working under the Intern. I think it was the offloading to LoDash, but I rolled back to v1.0.0 and things worked\nYap, moving forward Lo-Dash will be a dependency.\n\nI wouldn't mind some feedback on the PR once it gets here. I am really going to try to get it done this weekend. For and example of what a test case looks like all together, take a look here:\n\nCool, will review more thoroughly this evening.\n. The issues raised by mraleph are fixed in edge, and we'll version bump soon. The good thing about benchmark.js/jsperf is because of its high visibility it gets engine devs hammering on and catching issues (benchmark.js avoids gotchas in JaegerMonkey and TraceMonkey too), issues that go uncaught in other libs. As far as I know no other lib goes as far as Benchmark.js to avoid these engine issues (not even popular benchmark suites like Octane/SunSpider).\n. The 1.0 release should work for getting things off the ground. I know libs like Ember and React are starting to use Benchmark.js too. The last bump was over a year ago, it's due for another. We have tests running in travis-ci and recently added sauce labs too. I'd like to tweak the unit tests to get the sauce labs tests more stable before officially bumping. At the moment it hangs older browsers as the VMs aren't patched to increase their iteration count before the slow script warning pops up.\n. @csnover Yap, I thought about that but it's more than IE so I'm going to refactor the unit tests to run better in the VMs.\n. Since the point of the geezer branch is to smooth over older environments it would seem fitting not to let false negatives creep in. It's a trival fix that's been implemented by several libs.\nOlder enviros are also harder to debug in so you're throws more obstacles in devs way as devs chase down false negatives :/\n. This could affect testing object's constructor or toString property, which can be common when testing OOP sugar.\nAlso, this issue is currently tackled by Dojo's own mixin method.\n. Related to #26\n. I think there is an issue w/ the patch, I've commented on it over at 10a49df.\n. bash\n\u251c\u2500\u252c digdug@1.3.2\n\u2502 \u2514\u2500\u252c decompress@0.2.3\n\u2502   \u251c\u2500\u252c map-key@0.1.5\n\u2502   \u2502 \u251c\u2500\u2500 lodash@2.4.2\nUpdating digdug's dep of decompress should resolve the lodash warning.\nThe decompress package's current version is 3.0.0\n. Cool. I'll cc @kevva as a heads up.\n. ",
    "jason0x43": "You can configure the map in the test config:\njavascript\nmap: {\n    'intern-selftest': {\n        dojo: 'intern-selftest/node_modules/dojo',\n        benchmark: 'intern-selftest/node_modules/benchmark/benchmark'\n    },\n    'intern-selftest/node_modules/benchmark/benchmark': {\n        lodash: 'intern-selftest/node_modules/benchmark/node_modules/lodash/lodash',\n        platform: 'intern-selftest/node_modules/benchmark/node_modules/platform/platform'\n    },\n}\n. You don't need to do anything special in the test config for regular tests (not the selftest), but you will need mappings for lodash and platform in client.js and runner.js:\njavascript\nmap: {\n    intern: {\n        dojo: 'intern/node_modules/dojo',\n        chai: 'intern/node_modules/chai/chai',\n        benchmark: 'intern/node_modules/benchmark/benchmark'\n    },\n    'intern/node_modules/benchmark/benchmark': {\n        lodash: 'intern/node_modules/benchmark/node_modules/lodash/lodash',\n        platform: 'intern/node_modules/benchmark/node_modules/platform/platform'\n    },\n    '*': {\n        'intern/dojo': 'intern/node_modules/dojo'\n    }\n}\n. Added in Intern 3.4. I have an example project at https://github.com/jason0x43/intern-mocking-example that gives a couple basic examples using the sinon branch in intern. Both the branch and the example are still a work in progress, though.\n. @neonstalwart Just out of curiosity, what kinds of issues do stub behaviors cause with AMD?\n. Ah, that. I've been using intern's order module to load all the pieces, which has worked well enough in my limited testing.\n. Just using intern!order didn't work so well after some slightly more complex tests, and I ran into the race condition mentioned by @neonstalwart. The most recent commit gets around that problem by using a loader map to mock sinon's dependencies when the main sinon module is loaded.\n. @neonstalwart It looks like 1.11.0 includes some improved AMD support (is there more in master?). I'll try it out. I was going for a stable interim solution since getting upstream changes into libraries can take a while, but it would certainly be ideal if sinon has already take care of the issue.\n. You are correct. It's been pushed back a couple of releases.\n. I added basic support for Cucumber in the cucumber branch. I created an intern-cucumber-example test project if anyone wants to try it out.\n. You should be able to clone that project, run npm install, then run ./node_modules/.bin/intern-client config=tests/intern (intern-runner also works).\n. You need to be using the intern dependency specified in the project's package.json, which is what you get when you run npm install. A global install of intern won't work (unless you've globally installed the cucumber branch).\n. 1. The sauce key in Intern's .travis.yml (if that's the one you mean) file is there intentionally.\n2. My bad -- I hadn't pushed my latest update to the cucumber branch, and it was missing a function.\n3. I added an example of how support code can be shared between test modules to the example repo.\n. Oh, you mean that sauce key. (I was looking in the wrong repo.) Thanks for the heads up.\n. The UMD fix landed in 1.9.0, so we'll go with that for this issue.\n. I've added a json reporter and updated the grunt task in branch json-reporter; feel free to try it out. The reporter outputs a single-line JSON message for every topic message it receives. Messages contain the topic name, the object of interest (suite, test), and a default message. The grunt task uses the json reporter and assumes anything on intern's stdout is a JSON message. Anything on intern's stderr is passed directly to the console, and I changed the few console.log statements in Intern that weren't in reporters to console.error.\n. Just cleaning things up...\nA better solution now would be for the grunt task to directly register listeners with the Intern executor. If that seems worthwhile, we can open a new issue along those lines.. I've added support for this in the grep branch if anyone would like to try it out. There are two commands, both accessible from the command line:\n- grep: Takes a string that is converted to a JS regexp and used to filter which tests and suites are registered. For example, grep='main - foo' will keep all tests in the \"foo\" suite.\n- listTests: Causes Intern to output the set of registered tests (post-grep, if grep was specified) without running anything\n. It does.\n. Good catch -- we'll update it. I also agree that it's probably what most people are looking for when they want to know what's available on remote.\n. Shouldn't the requires just be dojo/node! rather than intern/dojo/node!?\n. I'm going to rework this a little and and merge it.\n. How about making the config relative to baseUrl when baseUrl is resolved?\nhttps://github.com/jason0x43/intern/blob/6b61b75b5108fbb13816481f02b22dd6a82480ec/runner.js#L86\n. The odds are not terrible; likely next week.\n. Should be out today. What kinds of errors are you seeing?\n. I ran afoul of the npm registry's new policy while publishing the npm. I published an unfinished version accidentally, and they've removed the ability to republish, so there's going to be a bit of a delay while we resolve that.\n. I added a retainRemote option to the issue-144 branch in my fork (https://github.com/jason0x43/intern/commit/d9a7f1fb839b9bef8cc1010115f5b442595cc13c). Just set retainRemote to true in the config file or from the command line and it'll keep the browser open after the test session finishes. This only applies to local tests, though; a Sauce session will still disconnect. (Keeping Sauce alive is possible, but it takes more configuration, and is potentially bad.)\nTake a look and see if it does what you were thinking of.\n. You can wait for an element based on text content in an atomic call using xpath selectors. For example, to wait up to 3 seconds for an element with the text content \"some text\" to appear:\njavascript\nbrowser.waitForElementByXPath('//*[text() = \"some text\"]', 3000);\nYou can use XPath syntax to search for elements by other attributes, too. It's a bit more verbose than using CSS selectors, but it gets the job done. To search for an element with the class \"box\" and text \"some text\", you would use:\njavascript\nbrowser.waitForElementByXPath('//*[contains(concat(\" \", normalize-space(@class), \" \"), \" box \")][text() = \"some text\"]');\n. The waitFor methods provide the same functionality as Selenium's explicit wait system, which works in a similar manner (by polling). They allow for finer control than setImplicitTimeout, which affects all findElement calls from that point for the life of the webdriver instance.\n. By finer control I just meant that you can set timeouts that only apply to the current operation. There are also times when implicit waits can be less efficient (or at least slower), such as when checking for element deletion.\n. When waiting for an element to be deleted, a check based on implicit waits will spend the implicit wait time looking for the element, whereas a check based on an explicit wait finish immediately after the element is no longer visible. Mozilla mentions dealing with this in https://blog.mozilla.org/webqa/2012/07/12/webdrivers-implicit-wait-and-deleting-elements/.\n. Merged and closed. Thanks!\n. The goal of this issue was to make working with compiled JS languages like TypeScript easier. However, source maps are probably also the best way to deal with #153.\n. Yes, the problem is that instrumentation changes the code. I can see having only one option to control instrumentation; I suppose more prominent documentation would work. \n. I also think that it would make more sense to disable this by default until we have a good way to work around the instrumenter's modification of source files (if we ever do). While it's easy to see that you need to enable the instrumenter to see test coverage results, it's less apparent that your stack traces are incorrect because the instrumenter is running.\n. Code coverage is definitely a worthwhile feature, but it seems like accurate stack traces are more useful in the general case. As you said before, it's trivially easy to enable instrumentation, so why turn something on by default that causes Intern to report inaccurate traces with no warning that this is occurring? It seems better to let the user walk into that knowing what's coming.\n. Providing a template test file that pointed out that instrumentation might break stack traces would probably be sufficient, though, because I assume most users start from a template and use it as a reference.\n. That's why I thought a simple disableInstrumentation flag would be useful. You could configure the instrumenter as you like, then just pass in boolean variable on the command line to disable or enable it.\n. @bryanforbes I don't want to make instrumentation any harder to use or reduce its functionality in any way. My goal with this proposal was simply to make intern easier to use by providing an obvious way to disable instrumentation. @vladikoff's idea of disabling it by default made sense to me because when a feature causes undesired side effects, I'd prefer to know that before turning it on rather than having to figure out why things are broken later.\n@csnover I plan on doing that at some point, but I don't see why that means we can't provide a simpler/more obvious way to disable instrumentation in the meantime. I think an activation option would make the most sense, but simply be adding a comment to the configuration template  that says \"change excludeInstrumentation to /./ to disable instrumentation\" would be better than nothing.\n. I not trying to temporarily paper over anything, I'm just trying to make intern easier to configure. The stack trace issue was a motivating factor, but the core issue is that we don't make it clear how to disable instrumentation. There is a canonical way to do this, but it's not obvious (it wasn't to me, at least) and we don't describe it in our documentation (that I've seen). A boolean flag would provide a clear and obvious way to enable or disable instrumentation, and it seems like a natural part of the configuration API. Better documentation of the existing idiom would also help. Regardless, my goal is to make intern more approachable and easier to use, even at the expense of an occasional bit of superfluous API (although I agree we should definitely tread lightly there).\n. Fixed in dacfcd86c6b99a38294188d945d0888b0a584f11\n. I went for the very near term solution.\n. I've added stack trace normalization and source-map support in the stacktrace branch. This only works for the node client and remote test runner, not with client.html. It uses my fork of istanbul, which adds support for returning source maps for instrumented code.\n. I tested this a bit in with a local Selenium server. The current version of wd used by intern master is 0.2.11. The waitForCondition method displays a deprecation warning, but works without error. The waitForElementByName method doesn't issue any warnings (the waitForElementByX methods have not been deprecated according to the docs) and works as expected.\n. Let me know if you find any issues. It doesn't look like there should be any show stoppers in the code, but my test wasn't extensive by any means. :)\n. The docs (https://github.com/admc/wd#waiting-for-something) state that the waitForElement methods return an element, so you're probably running into trouble by using waitForElement and then calling elementBy. You can reset the context between the waitForElement and elementBy calls using end (or just use one of them if you were waiting for the element you were planning to select).\n. That particular issue also affects intern master since it's an internal WD issue.\n. Interesting. I tried your example, and the behavior with intern master was the same as with geezer (slightly different error text, but still a no such element exception). \n. Yeah, Intern's functional self tests are still a bit thin.\n. No, this was a different problem.\n. Intern master uses a newer version of WD.js (0.2.11) that reports more meaningful error messages.\n. Sorry, I missed that one\n. Fixed in fc994f71cba4db84435e132cd57ebe6548aef346\n. Fixed in d57943e43e9\n. Resolved in 72822e57577\n. Our private keys have always been visible on Travis. Since they're in our .travis.yml file (intentionally, see Travis-CI-Integration), they're visibly exported during test runs.\n. Sorry, was thinking too much in the box.\n. It appears to install correctly this morning, so the problem was likely a transient network error. Could you try it again?\n. Fixed in 6f418cdad8\n. Related to #102\n. Cleaned up and refactored.\n. Corresponding documentation is in the grep branch of the wiki repo.\n. I redid this to skip filtered tests at runtime rather than during registration. I removed the listTests command in favor of just using a grep filter to skip everything since that implicitly takes the environment and any has conditions into account.\n. Documentation is in the cucumber branch of the wiki repo.\n. Hmmm...that failure on Travis actually looks significant (not just a random timeout).\n. The functional test failures are due to an incompatibility between Cucumber.js and IE (at least up to IE10). The problem appears to be related to some IE-specific behavior when calling methods with function pointers. All but one error is fixed wrapping a setImmediate call in an anonymous function (like this). Still working on the last one...\n. Updated and ready for review (again). I submitted a PR to cucumber-js for an IE issue, so this PR is using a custom cucumber dependency for now.\n. This PR will be replaced with a new implementation after the refactor-execution branch is finished.\n. Note that a modified version of istanbul is required for fixing stack traces broken by instrumentation. A PR has been submitted for this: https://github.com/gotwarlost/istanbul/pull/194.\n. This should be rewritten after the refactor-execution branch lands.\n. The problem is caused by the instrumentation used to generate code coverage data. We're working on a fix (#198), but for the time being you can disable instrumentation by setting the excludeInstrumentation property to /./ in your test config file.\n. You should not put your own files into the Intern directory to test them. The standard layout for a project using Intern is generally similar to:\nproject_root/\n    task-2/\n        my-module.js\n    tests/\n        intern.js      (your project's test config)\n    node_modules/\n        intern/\nThe Intern tutorial illustrates provides a simple example of testing an application with Intern, including where to install Intern in relation to the rest of the project's files.\n. What do you mean by an external source?\n. Your sources should always be outside of the intern folder. As shown in my layout above, intern will generally be under your project root, not the other way around.\n. I was using the structure from the original poster's second example, where task-2 is a module under a project root. In any case, baseUrl for the runner is actually set to your current working directory (that was changed a couple months ago) . For the structure I proposed, you'd be running Intern from the project_root directory, so your loader configuration would look like:\njs\nloader: {\n    packages: [\n        { name: 'task-2', location: 'task-2' }\n    ]\n}\nUsing @bryanforbes's example structure, you would run intern from your task-2 directory, and so you would use '.' as your package location.\n. Could you provide a more specific example of your issue?\n. I'm not sure why you'd need the sleep calls. Just adding a setExecuteAsyncTimeout(500) call on the remote in the setup functions of the functional tests let all the test succeed for me on FF 30 and Safari 7 on my MacBook. The KeyNav tests have some issues on Chrome 35, but everything else passes.\n. The failure I was seeing was due to waitForCondition timing out. The default async timeout on the remote is 0ms, and waitForCondition (and the new the pollUntil function) use executeAsync. I'm still looking into this.\n. The proxy config is only used by the tunnel application itself (Sauce Connect in this case), not for downloading the tunnel.\n. What's timing out and what's hanging (between Intern and BrowserStack)? Like, is the Intern runner hanging forever and BrowserStack is timing out?\n. Messages are POSTed from the client back to the test proxy, which in turn publishes them for the test runner to consume. What I've seen happen in the past is that at some point BrowserStack's localhost proxy returns a 404 for one of the client messages (something before \"/client/end\"). The test proxy will only publish messages to the runner when it has a continuous series of messages. If it receives sequence numbers 1, 2, 3, 5, 6, 7, 8, and 9 (assume 9 is \"/client/end\"), it won't publish 5-9 until 4 has been received. The proxy (and the test runner) will wait indefinitely for message 4 to be received.\nIt seemed like BrowserStack had taken care of this problem the last time I tested it. Maybe not.\n. Sure, I'll look into it.\nI'm not sure what the downside of having the client retransmit would be, though. I mean, it shouldn't be necessary...but it would make the testing process more robust without breaking anything else.\n. Hmmm, that's not quite right. Revising...\n. Never mind -- seems fine.\n. I would assume it's so we match \"/foo/bar/\" but not \"/foo/barroom\".\n. Reporting for dut... No, I didn't just say that.\n. That, or the console reporter should be officially supported by the webdriver runner.\n. A new grep feature was recently added to the code that includes skip functionality. #195.\n. Good point -- sorry.\n@sbrunot, we can discuss the grep feature more via Stack Overflow (use the 'intern' tag on your question), or in the IRC channel (#intern).\n. Please use Stack Overflow for questions, tagging them with the 'intern' tag.\n. Intern supports this now with the coverage config property.. I pushed a commit that handles this case. With regards to the regex and date handing, the deep equal used by chai only considers the type of the actual value when deciding whether to use specialized comparisons. Our current code requires both the actual and expected values to be RegExps or Dates to use specialized checks.\nChai isn't doing anything specific to handle the constructor property, it's just a difference in how old IE, with the wonderful DontEnum bug, works compared to modern browsers. Unfortunately the existing code for handling DontEnum properties doesn't work well for the constructor property because its shadowing rules are more complex. I've added logic to detect an explicitly assigned constructor that makes geezer behave the same as chai for both @neonstalwart's example and for the case of\njs\nfunction Ctor() { this.foo = 'bar'; this.constructor = 'baz'; }\nassert.notDeepEqual(new Ctor(), { foo: 'bar' });\n. hasOwnProperty doesn't cover every case. Consider a parent prototype with an explicitly assigned constructor property:\n``` js\nfunction Btor() {}\nBtor.prototype = {\n    constructor: 'foo'\n};\nfunction Ctor() {}\nCtor.prototype = new Btor();\nvar c = new Ctor();\n```\nIf you iterate over the keys in c you'll get 'constructor', but c.hasOwnProperty('constructor') is false.\n. Does anyone have an example of how this feature would be used? Suites are already run asynchronously, and setup and teardown now support async operations if a Promise is returned. Is the goal just to provide one of Intern's augmented Deferreds in the Suite lifecycle methods?\n. Do they actually do the same operation? I mean, I can see value in using this.async to get a promise in a suite lifecycle method, but would async's arguments be useful in a Suite context?\n. So saying this.async(1000) in a suite's setup method would put a 1000 second timeout on just the setup method, while calling it in a beforeEach would do so for each call of beforeEach?\n. Oh yeah, ms. :)  In any case, that makes sense.\n. I don't think the runner needs to be updated, at least not for that case. Any exception thrown before the current registration point will already be displayed to the console due to the default behavior for the process exit event. Our exit handler itself is what hides errors since it overrides the default behavior, so we only need to handle exceptions specially after we register the exit handler (which is after we load the reporters).\nThere are a couple of related cleanup actions that could be made to runner, though:\n1. Replace the process.exit(1) in the uncaughtException handler with just a process.exit() (the 1 is redundant since the exit handler overwrites it)\n2. Remove the error callback for the tunnel.start promise since it duplicates the behavior of the uncaughtException handler.\n. Ah. Chalk that up to insufficient testing on my part. It can at least call a shared handler, then.\n. Refactoring mark III. Errors throw in the tunnel.start().then callback currently freeze the runner, so I replaced the error handler with a dedicated catch (tunnel.start().then().catch() instead of tunnel.start().then() with an error handler). Also, exceptions caught in the otherwise handler of the main.run promise were just being logged directly to the console (unlike other unhandled exceptions). The unhandledException handler, tunnel.start promise, and main.run promise now all call an exitWithError function when exceptions occur.\n. That's how it's intended to work. grep is based on the same functionality as Test#skip, which skips test methods, not beforeEach or afterEach.\nWe could potentially enhance the skip functionality to include beforeEach and afterEach if the test object were passed to those methods.\n. The html reporter only works with the browser client (client.html).\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThank you again for your interest!\n. This will be taken care of in the refactor-execution branch.\n. I just ran a number of functional tests on a Sauce Windows 8 / IE10 box using Intern 2.1.0, both from a Mac 10.10 system and a Windows 8 system. The tests ran without error in all cases, so it seems unlikely to be an inherent problem with Intern.\nIf you'd like to open a question on Stack Overflow we can look into this in more detail.\n. There is now some support for this with intern-cli. You can run intern serve -o to start the Intern proxy server and automatically open the system-default browser to the client.html test page.\n. Headless mode is going to be great, but it won't eliminate the need for Selenium. Selenium isn't just used for functional tests, it's what enables Intern to start up and manage browsers. Intern-cli provides a very basic method for starting browsers without Selenium, but it's fairly limited. For more complete Selenium-free functionality, we would need to add a new tunnel type to Dig Dug, or make a new plugin entirely, that can manage browsers without Selenium.. I'm closing this in favor of https://github.com/theintern/digdug/issues/54 (Dig Dug is where this feature will eventually be implemented).. I see slightly different behavior on a Mac than I did on Windows, but it's consistent between master and 2.2.2. On the Mac, I get the pretty reporter header, but intern exits within a second or two if it being displayed rather than hanging. Still no progress or error message, just the reporter header, then back to a prompt.\n. I haven't been able to reproduce the hang; I'm going to chalk that up to just extremely slow execution. However, the pretty reporter in both geezer and master wasn't showing critical exceptions. The problem is that it stores them up until testing is done, but an uncaught exception simply exits Intern in client mode.\n. Selenium is throwing a StaleElementReferenceException. It looks like you never ended your original .findByCssSelector('form#login-form'), so assuming clicking login-button refreshes the page, the find for #customer-search-title afterwards is going to break because the context is still form#login-form, which doesn't exist anymore.\n. Progress! Now it just can't find the element on the new page. Don't use a '#' with findById.\n. This feature was added in 5e064c53 and 70ca3035.\n. This will be taken care of in the refactor-execution branch.\n. remote calls are async, so you need to return the call chain in your original then callback.\njs\n.then(function () {\n    return remote\n        ...\n})\n. You can also set excludeInstrumentation: true in your intern config to entirely disable code coverage. Since the main goal seems to be to disable coverage information, I'm closing this issue. We can reopen it if people really need output reorganization.\n. I've also experienced this. The problem is most likely an incompatibility between FF 35 and Selenium, which Intern uses to manage browsers. Occasionally a new Firefox will be incompatible with the current version of Selenium. The solution in that case is to use keep using a compatible version of Firefox until a new Selenium version is released.\n. In an upcoming release the test object will be passed to beforeEach and afterEach, at which point you could set test.timeout.\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nMake sure you're using intern-runner to run your tests and not intern-client, since intern-client will only run unit tests.\nThank you again for your interest!\n. intern-client will only run suites; intern-runner runs both suites and functional suites.\n. I haven't been able to reproduce this just by loading dijit/Dialog. Loading a module without a dependency array shouldn't be a problem; the default Intern config uses that format, and loading nls/common directly in a test doesn't break Intern's loader (at least not in the simple case below):\n``` js\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'dijit/nls/common'\n], function (registerSuite, assert, common) {\n    registerSuite({\n        name: 'something',\n    aTest: function () {\n        assert.ok(common);\n    }\n});\n\n});\n```\n. I'm closing this since there's not enough information to diagnose the issue. The current Html reporter handles async test errors as well as fatal events. I'll reopen it if any additional information is provided.\n. Just out of curiosity, why use the pretty reporter on Travis?\n. I just submitted a PR for this if anyone would like to review. It resolves globs in the suites and functionalSuites lists in both the browser and node context. The browser context, of course, assumes you're using Intern's proxy.\n. It sounds like you're running Intern via its Grunt task. When you run Intern with Grunt, the Grunt task processes everything logged to the console. When it sees PASS or FAIL messages it sets the Grunt logging state to 'ok' or 'error', and Grunt decorates the output.\nIn a future version of Intern we'll use a dedicated reporter for the Grunt task that allows it to mark up output more intelligently. With the current version, the easiest solution is to refrain from using text matching the regexes /\\bPASS/ or /\\bFAIL/ unless you want the decorations.\n. Thanks for writing!\nIn order to keep the bug tracker focused only on the development of Intern itself, we ask that people please follow the contribution guidelines and not submit questions to the bug tracker. Please read the Getting Support wiki for information on where to submit questions.\nThat said...\nThe error you're seeing generally indicates that you're trying to load a node module in the browser with dojo/node. Nothing in the config you've posted is doing that, and it works fine when I run it on my system. The only issue I see is that your assert syntax is off (it should be assert(expression, message)), but that's not going to cause the error you're seeing.\n. This was an issue with the SauceLabsTunnel in Dig Dug. The tunnel code was watching for a change event on a \"ready\" file; this file is touched by the Sauce Connect launcher when the tunnel is ready. In previous versions of Node, the first event received by the file watcher happened when the ready file was touched. In Node 0.12, a change event is being emitted before sc touches the file, which caused Dig Dug to pre-maturely report that the sc tunnel was ready.\nDig Dug master now verifies that the ready file was actually modified when a change event is received.\n. This functionality was added via https://github.com/theintern/intern-a11y. This has been overcome by events.. Added in 4e42a7a3e64580c86c2e5175e15793d50f43da82\n. @szydan proxyPort and proxyUrl are separate entities. Intern always serves on localhost, and proxyPort is the port on localhost that Intern should use. proxyUrl, on the other hand, is the URL that a remote client (like client.html) should use to communicate with Intern. This may or may not be localhost:<proxyPort> (for example, it could be different if Intern were running behind a proxy from the client's point of view).\n. Closing this in favor of #779. Resolved by 86193c293977ad70c74b0c0877fe2028c8d6a1c2\n. I added some basic usage (not implementation) information to the gh-pages-next branch. Take a look and let me know if you think it needs more.\n. I haven't seen this myself, at least not with current versions of Intern. I'm closing this for now, but feel free to reopen if this is still an issue.. There is now documentation for this at https://theintern.github.io/intern/#gulp. This issue can be reopened if that's not sufficient.\n. I believe the causes of this (hanging server connections, unresolved promises, non-canceled timeouts) have been resolved at this point. If this comes up again, we can reopen this issue or start a new one.. Well, start a new one since this is for Intern 3. :). That's the spirit!\nThat's a good idea -- having an option to hide skipped tests would actually be pretty handy.. Is it the missing quote?\n. The google fonts were removed in 0fb9352b.. Fixed in #426 . Better late than never...  16ae37a.  I updated the file output test to check the contents of the generated report (it was already an integration test, and now it just takes that to the logical conclusion).\n. I'm closing this out since it seems to have been resolved.\n. If you're using Node.js 0.12, there is a bug in the version of Dig Dug  used by Intern 2.2.2 that can allow Intern to try to access the SauceLabs tunnel before it is fully established. Intern 3 uses a more recent version of Dig Dug.\nNote that the Sauce Labs Connect system works by running a server at localhost:4444 for clients to communicate with Sauce Labs through. Intern connects to this local server, so seeing that address pop up in status messages isn't anything to worry about.\n. The Google font will be removed, probably in the next point release, and definitely in the next major release. Visual consistency across platforms is nice, but not that important.. The require.js npm package includes a Node-compatible AMD runtime that allows it to function in Node. The Alameda package only includes the bare loader, so it won't work as a Node loader for Intern.\n. Sorry about that, I misread the question. What're you using for your host-browser string? With the alameda npm module, and with Intern's loader settings at their defaults, you would use '../../node_modules/alameda/alameda.js'. Doing that it works for me, at least loading a simple unit test.\n. Functional tests always run in Node.js. They work by driving a browser, inspecting its state and acting upon it, but they do not actually run in a browser.\n. Yeah, we could use some better documentation for this. There really isn't any ambiguity about where code runs -- it's always Node unless you're calling a function that explicitly states that it runs code in the browser context (execute, executeAsync, pollUntil). Even those functions aren't really exceptional. Like the other Leadfoot functions, they're just instructing the browser to do something (\"execute this code\"). The Leadfoot user guide doesn't really explain the implications of running code in the browser, though, such as that it has access to the browser environment rather than the functional test scope.\nYou're right about functional tests and browser interactions. You don't have to talk to the browser in a functional test, but at that point Intern just started up a browser for nothing. :)\n. That, and maybe notes in exec and execAsync explicitly pointing out that the given code runs in the browser's context, and hence doesn't have access to the functional test context.\n. It seems like this may be tied to the max-height CSS transition. I've been able to reproduce this sporadically in IE and Chrome, but only in a VM and only at 125% zoom. Turning off the animation seems to resolve the issue.\n. The doc site has been overhauled, so this is no longer an issue.. The basePath can now be set from the command line, or via config. It is implicitly set to the location of the config file.. Merged in e4d461b. I haven't used steal, but the problem seems to be that steal's loader function has a large number of functions attached to it, including a then function. If the steal loader is used to resolve a Promise, which Intern does when loading a new loader, problems ensue. Promise implementations treat an object with a then property that's a function as a \"thenable\", and attempt to resolve it as such. The steal loader, however, is not an unresolved thenable and doesn't behave as such.\nThis also relates to https://github.com/stealjs/steal/issues/452.\n. Actually, after looking at steal a bit more, it doesn't appear to be compatible with Intern. While steal is able to load AMD modules, it is not an AMD loader (it provides a different API). Intern needs an AMD loader, so steal isn't going to work.\n. Sorry about that, it would have been clearer to say that steal doesn't currently return or globally provide a require-compatible loader, which is what Intern is currently looking for. After reading through the docs, I was under the impression that steal's goal was to be able to load AMD modules, not necessarily act like a require-based loader.\nIn any case, steal could provide a global require, or its default export could have a require function, and Intern could be patched to look for that.\n. npm test now works for running node-based unit tests. Run npm test config=@wd to run webdriver tests locally in Chrome.. Try adding an empty functionalSuites array: functionalSuites: []. This seems to be an issue with the runner -- it hangs if functionalSuites isn't specified.\n. In tunnelOptions, don't include the port in your hostname.\n. By starve I do mean that things are temporarily blocked. What I've observed is that Intern can queue up many (10+) requests at a time, because even though they're small, they still take a while to complete. The flood of test messages through much of the testing process can cause resources loaded by the tests to be delayed. (This is complicated even more in IE which doesn't always appear to process queued requests in order, and will occasionally abort queued requests for no discernible reason.) For example, in the dojo-core tests, a file loaded in one of the tests typically takes more than 5s in IE, which causes a test timeout. Most of that time is spent waiting for the request to be processed.\nBuffering the results prevents the above issues because it minimizes the connection resources being used by the test system (leaving more for the tests). It has a couple other advantages, too: it handles network latency much better than sending a flood of small requests, and it can simplify how Intern processes incoming messages because they're guaranteed to always be in order (this wasn't taken advantage of in the PR). Buffering can increase result latency somewhat, although I don't think it's that significant -- over time, all messages arrive back at Intern as fast or faster than they did when sent individually, so any particular message shouldn't be significantly delayed.\n. The PR does remove the queue code from the WebDriver reporter.\n. Like, the proxy is consuming large amounts of memory?\n. Oh, all that memory usage.\n. This is really a Node issue rather than specifically an Intern one. The Node loader doesn't support the concept of packages in the same way as an AMD loader, and relative paths are the standard way to require modules within a project.\nThere's a template floating around somewhere describing one way of loading CommonJS test modules. We could potentially adapt that and build it into Intern, giving users a designated way for loading CommonJS suites. Intern could then provide a project-level Node loader to test modules.\n. Intern now uses the native Node loader, so loading modules with Intern works the same as for any other Node project. You can set NODE_PATH to make application code look more like a package to Node.. Ensure that none of your unit tests are using Node modules (including uses of dojo-node).\n. As @dylans says, dojo-node is supported, but it only works when tests are run in Node.js (not in browsers). Unit tests run in Node.js when you use intern-client, and functional tests always run in Node.js.\n. Use dojo/has to automatically filter out suites based on the environment, or use this.skip.\njs\nsuites: [\n    'tests/unit/moduleA',\n    'intern/dojo/has!host-node?intern/dojo/node!tests/unit/moduleB'\n]\nor\njs\n'some test': function () {\n    // Use some environment specific test, such as has('host-node') or a check for process\n    if (typeof process === 'undefined') {\n        this.skip('needs Node.js');\n    }\n    // test\n}\n. Intern's configuration system is quite different now, and an external loader is no longer required when running on Node (assuming your code and suites are CommonJS). You can use multiple config files, or multiple config profiles in a single config file, to hold different loader configs. You could also load a config module as a plugin.. As of Intern 3.1.0 (942baa04), the Proxy will now respond with an HTTP 500 if there are errors processing a message. Does that resolve this issue?\n. Since there hasn't been any input for a while, I'm assuming this is in good shape now.. As @csnover pointed out, the Intern proxy doesn't make outgoing requests, and from looking at #519, @bartoszkaczorek's issue isn't with the Intern proxy, but with the WebDriver server.\nThe current assumption is that if a proxy server is being used, it will be needed for every request to an external URL. In other words, the system running Intern is assumed to be behind the firewall, and everything else is assumed to be outside. If this is the case, then I'm not sure what benefit there in separating the Tunnel proxy config from Leadfoot's.\n. Hmmm...I see. Presumably the assumption is that a proxy wouldn't proxy connections to localhost, which is what Server uses for SauceLabs. Assuming that's not the case, though, then it does make sense for Server to not use the proxy.\nJust out of curiosity, do you need to specify clientUrl? If you're using a non-standard Sauce host, you should just be able to set hostname to my-sauce-server.\n. Is this still worthwhile given that Intern has grep, and that suites can take globs?. Is this still an issue? TestingBot now appears to be providing an absolute URL under http://hub.testingbot.com/ in its session creation redirect.\n. Closing for now...\n. This functionality was added in a similar way in https://github.com/theintern/intern/commit/71c22829b1b51de0d2b6ba38ee7eda4ec9ec9cbc.. There have been a number of improvements to how Intern handles async test timeouts and manages remote tests since this issue was originally filed. I'm closing it for now, but feel free to reopen if the issue is still relevant.. This issue was resolved with #561.\n. Intern manages tests in a hierarchical fashion. At the lowest level are tests; these are functions that test some specific feature or function. Tests are grouped into suites. A top-level suite is created for each environment being tested. When Intern runs, it starts the top level suite for each environment in that environment, and that suite runs all of its tests and child suites.\nIt would be incredibly inefficient to start a new browser session for each test. We could potentially start a new session for each suite, but again it would be very inefficient if the suites were small (which is generally better for organizing tests).\nRegarding isolation, that's what the beforeEach, afterEach, setup, and teardown methods are for. If local storage should be cleared before or after a test, a suite's beforeEach or afterEach method should call localStorage.clear().\nThere are a couple of options for debugging tests. For both unit and functional tests, Intern's reporters will tell you which test is failing. For unit tests, you can use the remote browser's debugging tools to narrow down the problem further once you know which test is having problems. For functional tests, you can use Node's debugging mode, or something like node-inspector, to step through the functional test code.\n. Hmmm...well, I really can't see a session per test being viable in most cases; it would really, really, really slow down the testing process, like, by orders of magnitude. You would lose any gains in ease of reading test results because of increased test time.\nThere are a couple things you can do in the short term (until there's a better method for handling large test results). For screenshots, you can write a simple reporter that will take screenshots on test failures using the takeScreenshot method on the remote object (not videos, though). For examining failing tests in more detail, you can use the grep option to re-run just the failing test(s).\n. The issue here is that Intern expects something like node_modules/intern/client.html here instead of __intern/client.html. The code in PreExecutor that computes the default base path from the initial path in a browser assumes that the initial path will be at least 3 elements deep (node_modules/intern/client.html). If it is, the last 3 elements are replaced by '/'. When using __intern/client.html, the path is only 2 elements deep and is used directly as the base path. If you provide an initialBaseUrl config parameter, it is used instead of the computed default base path, which is why adding &initialBaseUrl=/makes the example work.\nThis seems like a documentation issue.\n. Hmmm...I'd say the defaults just assume you're accessing client.html on a real path. I was going to say that the '__intern' virtual path isn't meant to be used directly, but I see it mentioned in the guide, so...that should probably be fixed. I've always just run node-static when I want a static server, but I can see the utility in being able to use Intern's proxy for that purpose.\n. Intern's a bit smarter now about how it handles pathing. You can use either node_modules/intern/ or __intern/ (when using Intern's own server) to load the client runner, and you should not (in general) need to worry about the base path.. There is currently no --help option. There aren't many commonly used command line arguments; most configuration is intended to happen in a config file, which is a mandatory argument. A more helpful default message would be useful, though.\n. I agree, the command line interface could use some love.\n. I like where you're going here. My thought for this was to provide a new intern script alongside the existing intern-client and intern-runner scripts (we'd keep the old ones for now for backwards compatibility). This new script would provide standard command line flags like --help and --version, and would also provide an init command to generate a minimal config. This script would also need to take a command or flag indicating the mode (client or runner).\nRegarding config, I could see getting by with defaults in many cases. You'll still need a config for specifying remote environments when using a cloud testing service. One option would be a combination of init to generate a default config, and having Intern assume a config will be in something like tests/intern (so you can get by without specifying it if you follow the convention).\n. So, you're just looking for an easy way to kick off the proxy and open a persistent browser session? Because intern-runner already runs unit tests in a browser (or browsers) from the command line...\n. There is now an official Intern CLI that provides help and an easy way to start the proxy for serving local browser tests (it'll even open your default browser). I'm going to close out this issue since at least its initial focus has been addressed (hopefully). Please raise any new CLI issues in the intern-cli project. Grunt-related things can stay here.\n. The suiteEnd event is now always fired when a suite is finished. The error property on a suite indicates whether there were suite errors.. In combination with #803, this update should allow general test sharding.. Running npm init is not something you should have to do by default. This seems more like a troubleshooting step than something that should go at the top of the readme.\n. Closing this since it's not really an Intern issue\n. The overall goal is consistency. Different AMD loaders may have different defaults for baseUrl, and those may be environment-dependent (amdjs-api suggests that baseUrl should default to the current working directory). Intern is typically used in both Node and browser environments, and we want relative module locations to be the same in both environments to make reasoning about where things are easier (and to avoid the need for environment-specific paths).\n. Closing this for now; we can open a new issue if we want to consider assertion plans.\n. Rather than emitting a warning when remote is used without setting async, it might make more sense to throw an exception and fail the test rather than skipping it. I mean, if you're doing something nonsensical, the testing system might as well make it super obvious.\n. I went ahead and changed the skip to a failure and updated the unit tests. This has been merged into master. Thanks!\n. Updated in 28335afd\n. Is this still a problem? I've run Intern's self tests against Edge on Browserstack recently and they didn't have any issues.\n. chai was updated to 3.5.0 in fb0791f, and the typings were updated to the latest (for 3.4.0) in 6b21d22.\n. As I mentioned, in the browser context the suites list is sent back to Intern's proxy for resolution. So if the config has something like suites: [ 'app/tests/**/*' ], the Intern proxy will resolve it to a list of modules and send the result back back to the browser.\nThere aren't any Proxy tests at all at the moment (which is where the test for the browser resolution functionality would go). I'll work on that.\n. Ah, I see. Revising...\n. Many moons ago. The approach is similar to what I did, although I moved the glob resolving code to util so it could be shared with Proxy.\nI have something for client.html, I'm just trying to get it to report errors cleanly and similarly in the browser when using a regular static server vs the Intern proxy. \n. This has been revised to handle the client.html case. Basically, it still always tries to send suites back to the proxy for resolution. If the proxy isn't there and no suites use globs, everything is fine. If the proxy isn't there and a suite mid does use globs, the test run will fail.\nThe updated commit also includes some basic unit tests for lib/Proxy.js. It's not full coverage yet, but it exercises the functionality used for suite resolution and provides a basis for further tests.\n. Merged in 86193c293977ad70c74b0c0877fe2028c8d6a1c2\n. Th WebDriver reporter updates have been merged in 1d7a5d5. The other issues were handled a bit differently (but to similar effect):\n- Rather than have Proxy treat fatal errors specially, the WebDriver reporter and PreExecutor now share communication code so that the sequence number is always consistent.\n- error.relatedTest is still always set, because conceptually a nested suite is a \"test\" in its parent. However, Suite now checks to see if the related test is the Suite itself during serialization.\n- I left out the fatal vs suite error differentiation because it required additional changes to be complete, and while it did provide arguably more specific information about errors in some cases, it introduced new ambiguities in others.\n. I believe the problem was due to an issue we fixed in Dig Dug 1.3.0 where Intern running under Node 0.12 wasn't properly waiting for the SauceConnect tunnel to start.\n. This has been merged.\n. This doesn't seem to be related to the amount of data being transmitted -- the stack error is being generated in the browser while trying to serialize the suite, which in the given test case only contains a single test. From running the test myself, it looks like Suite.toJSON is entering into a recursive loop.\n. A call to JSON.stringify on the sample Suite object in reporters/WebDriver#_send is causing the stack size exceeded error.\n. Merged in 47c22a0\n. Merged in 0e4eccf\n. Merged in 4e42a7a3e64580c86c2e5175e15793d50f43da82\n. Merged in 9092e46\n. Two issues.\n1. Tests skipped via grep and Suite#skip aren't showing up because the executor doesn't emit testEnd for those, just testSkip, so the reporter will need to listen for skipped tests.\n2. Let's make skipped rows faded (maybe just decrease the opacity of the text in the row) rather than making the entire background stand out so much. Also, use a new icon, maybe pe-7s-less (circle with a line in it; this will require generating a new icon font in variables.styl), and make it purple or light gray.\n. This has been merged\n. It doesn't seem to be due to an intentional change in Node. At least, the current docs still list the exit code as optional, a number of Node's self tests call process.exit(), and simply doing what the exit handler does (calling process.exit() in an unrefed timer) doesn't produce that error, at least not in any of my trials.  (I tested with Node 0.10.35 ,0.11.0, 0.12.0, and 5.5.0.)\n. Is this still a recurring issue, or has it been overcome by events? I was getting a NodeJS hang message consistently when using one of the Dig Dug tunnels (it wasn't shutting down properly), but never saw a TypeError.\n. I like the idea. A better place to handle this would be in PreExecutor#getArguments, where command line argument preprocessing takes place. Also, the code should check for excludeInstrumentation === 'true' rather than using JSON.parse, because JSON.parse could return many types (string, number, object, array). The only valid values for excludeInstrumentation are true (to exclude everything) or a regular expression (to exclude some things).\n. Merged in 9410959. Thanks!\n. > publish releases using the automated release script\nSilly write-only NPM repo... /grumble. Anyway, I can review and merge, and maybe even publish.\n. This was overcome by events.\n. Merged in https://github.com/theintern/intern/commit/63e09383ede6502f80153a54461d532cb54e7f69\n. I like bail vs. failFast, and bail does seem to be the common term.\nI still prefer retries to tries. In general, all tests should run at least once unless explicitly skipped, and skipping should be done with Suite#skip, Test#skip, or grep, which provide a reason for skipping.\n. Soon...\n. 1) Yes, retries takes precedence over bail, in that the executor won't bail until a test has failed all of its retries. As far as Suite is concerned, a test hasn't really failed if it still has retries available, so bailing won't kick in.\n2) retries only comes into play for errors in the test functions themselves, not for errors from suite lifecycle methods. So an error in beforeEach would not result in a test being retried. This seems reasonable to me since the lifecycle methods aren't part of any particular test (but the case could be made that they should invoke retries).\n3) When a test is retried, beforeEach does get called again. Each try of a test is a complete run of that test (beforeEach, test, afterEach).\nI agree, retries are a tricky feature. Ideally, tests should either always pass or always fail, and making it easy to retry tests could also make it easier to write lower quality tests. On the other hand, WebDriver tests can be unstable due to both browser and network related timing issues, and I could see retries being a reasonable solution.\nWhen writing functional tests myself, I've generally attempted to make tests more robust, either by adjusting timings in individual tests or by implementing more robust operations in Command helpers that I can use in multiple tests. Something similar may be a preferable solution here; Intern or Leadfoot could include a wrapper function that would add retry functionality at the individual test or Command chain level. The main issue for that type of solution is that the user has to be more aware of what will be retried -- the wrapper function would be handling retries, so the suite lifecycle methods would not, by default, be re-run.\n. Hmmm...I think I may split retry functionality out into a separate PR for further analysis. On the one hand, making it globally available could lead to abuse (using retries to mask poor tests). On the other hand, one of Intern's goals is to make test writing easier, and I'd prefer not to end up with a more complex solution solely to keep people from shooting themselves in the foot.\n. Support for bail was merged in https://github.com/theintern/intern/commit/a6a732ef4864f23f68aee3bbb4ebb27c888f0992.\n. Because of the reasons stated above (i.e., at the time it wasn't clear that a generic retry feature was really a good thing to add). If it seems worthwhile, open a new issue and we can take a look again.. I'm not sure about getting rid of the stack traces (they can be useful), but I agree that the tests coming from a remote browser should include diff information if it's available. I pushed an update to master that includes that information with test errors. If you'd like to leave out stack traces, one option would be to write a simple reporter that simply doesn't print stack traces with its error messages.\n. The path normalization code is only intended to run on paths, not complete URLs. What is the use case where this issue appearing?\n. The problem is that the isAbsoluteUrl check in PreExecutor in a Node environment assumes that whatever is passed to it is a file path, not a URL. Updating it to consider URLs appears to fix the problem, but that only works with requirejs, which will try loading from both a URL and using Node's require (Intern's Dojo loader will only use Node's loader in a Node environment, which doesn't support URLs).\n. The issue isn't with normalizePath, because as it's name suggestions, it's meant to normalize paths. It is not intended to be applied to URLs. If it is, something else is wrong. In this case, the problem is that sometimes when normalizePath is used to create the loader's base URL, it's being applied to URLs.\nIf loaderOptions.baseUrl is a URL in a Node environment, PreExecutor will try to normalize it. That's not really a bug, though, because using a full URL as the baseUrl in a Node environment is an invalid use case. (Although all of the loaders, including Intern's Dojo loader, support loading modules from URLs, most/none of them can do so when running in a Node context.)\nIf loaderOptions.baseUrl is a schema'd URL in a browser, PreExecutor doesn't try to normalize it, so that's fine. However, PreExecutor will try to normalize a schema-less loaderOptions.baseUrl, and that's a bug.\nSo, there is a bug, and although changing how normalizePath works is one way to deal with it, I'd prefer to fix the root issue (improper use of normalizePath).\n. I made an alternative fix in 75c1472d6d1e3fcf7b1ed7f92deb14ea8b631a44.\n. @alekstorm has an interesting solution -- symlink the AMD dependencies into somewhere other than node_modules, and have browser-based code look there.\n. The whole fixdeps system is a weird pattern for node projects, but Intern has some browser-based requirements that are outside node's scope. This solution is at least weird in a way that doesn't directly conflict with npm's expectations. It leaves the existing node module structure intact, and confines the symlinking to a location not managed by npm. The key question is whether it breaks anything else. (Nothing immediately comes to mind.)\n. The problem is due to the old chai dependency. Upgrading chai in an Intern install is a bit tricky with node's de-duping and Intern's symlinking, but when you do, your test should pass (it does for me, at least). The next release should include an updated chai.\n. Unless it breaks functionality for someone (and offhand I don't see why it would), this will likely be merged.\n. Merged in 7b524a057a4a7140d0a4422b18f2084975746dfe\n. A couple of thoughts...\n- fixdeps should be updated to link dojo-loader into browser_modules, and that should be referenced in client.html\n- If we're using the new loader as the default loader, we shouldn't need to set loaders in the test config\n- I'm not sure we need to include selftest.intern.local, but if we did, it should just import selftest.intern and modify the couple of fields that need to be updated rather than duplicating the config\n. I had a bit more time to play with this over the weekend. So, to just use dojo-loader as Intern's loader, you don't need to specify the loader in Intern's config. Doing so will use the loader in self-tests with the testing version of Intern, but isn't necessary for using the loader with Intern itself when testing some other project. Also, when using dojo-loader, but using the existing dojo2 for everything else, you don't need to import core for dojo/text, because the dojo/text plugin should still work.\n. As @dylans noted, this functionality will be a part of Intern 4 (or at least, using Babel with Intern 4 will be a bit more straightforward). In the meantime, you should be able to use an intermediate Node-suite loading module, along with babel-register, to load ES6 suites in Node, something like this:\nts\n// intern.js\nsuites: [ 'tests/nodeSuites' ]\nts\n// tests/nodeSuites.js\ndefine([\n    'intern!object',\n    'dojo/node!babel-register'\n], function (registerSuite) {\n    require('dojo/node!tests/suite1.js')(registerSuite);\n    require('dojo/node!tests/suite2.js')(registerSuite);\n});\nts\n// tests/suite1.js\nmodule.exports = registerSuite => {\n    registerSuite({\n        name: 'suite1',\n        // ...\n    });\n};\nNote that the code above hasn't been tested. Also note that this will, of course, only work in a Node environment.. This has, I think, been overcome by events. Fixed in https://github.com/theintern/intern/commit/2d9c64c1b6947224d45253f86c118ad6c5df55ac\n. This should probably be an upstream enhancement request, either for https://github.com/dojo/dojo2 (which is what Intern uses now) or https://github.com/dojo/loader (which is what Intern will likely switch to at some point), or both, since that's where runInThisContext is actually called.\n. Merged in 2d9c64c1b6947224d45253f86c118ad6c5df55ac\n. This sounds reasonable. For the time being, you use this.skip in a suite before/setup method to skip an entire suite.\n. @kailo777 Not that I'm aware of, no. It sounded like a PR was incoming.. This shouldn't be too hard to do, though. The xdescribe and xit functions could just be wrappers that ignored the test function they were given and created a test containing skip(description). Something like that.. Ah IE, always making life exciting. Thanks for tracking that down.\n. This should be fixed\u00a0as of 942baa040a824477f1cda55abd9d029553873db5, which doesn't assume response.data exists (a warning is logged if it's missing) and which updates PreExecutor's error sending code to use the proper data format.\n. The upstream bug was fixed in https://github.com/dojo/dojo2/commit/20a03661c53ec3082db49d081050dd48d7f09cdc.\n. Gah, I need to modify the self tests to actually exercise Intern itself as part of the testing process (and remember that we're still supporting IE9).\n. Regarding reporters, the issue is that the reporters haven't loaded at the point suite resolution happens. A better solution would be for the client to only attempt resolution if it was required; then if it fails, the client can throw an error. The tricky part there is how to definitively check for globs in the suites list.\n. I'm working on some improvements in the browser-glob branch. A mid filter is now run before trying to resolve, both in node and the browser. This prevents certain constructs, like 'dojo/has!host-node?fs', from being interpreted as globs, and allows the browser client to skip resolution if nothing needs resolving. Intern will no longer attempt to resolve MIDs involving browser plugins. Resolution failures now show up as session errors, so they're much more visible. IE9 still can't resolve suites, but it now works when none of the suites actually involve glob expressions.\n. Fixed in https://github.com/theintern/intern/commit/7dc526a786e98f77e5d362e914060656a289bca1\n. This feature will be included in the next release of Dig Dug.\n. Fixed in https://github.com/theintern/digdug/commit/bcb3c40bf44e5f116fa7b72331f8f7f69788a947\n. Aaaaand that's a case that apparently doesn't have a unit test. Yes, that's a bug. You should still be able to set suites to null.\n. Fixed in https://github.com/theintern/intern/commit/d3304b68b75ac786ea5939d790f8c8736840a862\n. As mentioned above, a bug was introduced that broke Intern's handling of a null or undefined suites value. A fix will be included in the next point release.\n. Yeah, just using [] won't totally fix the issue you're seeing because a ClientSuite will still be created when suites is [], which means Intern will still try to load client.html. The committed fix restores the previous behavior.\n. In the Runner executor, there is a semantic difference between a falsey value for suites and an empty array. A falsey value means there are definitely no suites, so the runner doesn't even try to run unit tests. An empty array may only be empty on the Node side, but could be populated in the browser, so the runner creates a ClientSuite for unit tests.\n. Merged in https://github.com/theintern/intern/commit/d3304b68b75ac786ea5939d790f8c8736840a862. Thanks!\nI modified the PR to not coerce a null/undefined suites value to [] since there's significance to a null suites value.\n. How were you running the tests (Sauce Labs, BrowserStack, local server)?\n. What setup in particular? Appium or ios-driver or.... This looks good. How would you feel about nodeOptions rather than nodeFlags?\n. Merged in 05a28c7. Thanks!\n. Fixed in 12d0acc\n. Hi, and thanks for your interest! In an effort to keep this issue tracker focused on development, we prefer that questions about how to use intern be asked on Stack Overflow or our IRC channel. See the guide for more information.\nI can't say for sure, but it sounds like you may want to look into functional tests, which can load arbitrary pages and run tests against them.\n. I haven't read through this in detail, but it seems to have not been rebased against the current gh-pages (it has a Codeship/Bamboo commit).\n. Merged in adfe1f085f08b0db6bd20bcea2f0071a5ae29389, with a bit of cleanup/rewording. Thanks!\n. Merged in 12d0acc. I modified the check to be against files().length rather than store.keys() because files is part of the published API. Thanks!\n. Merged in 1369b356b. Thanks!\n. You can also use node-inspector to step through functional tests\n. Any chance you could you update this so that the internal APIs only deal with instrumenterOptions (instead of instrumenterOptions and coverageVariable)? We'll need to keep the coverageVariable config property separate for backwards compatibility, but it'd be cleaner internally to only have to pass around one options object instead of options and one separate property.\n. The external API as far as coverage variable is concerned is just the config property. So, basically, Intern should still understand config.coverageVariable, and config.coverageVariable should still be available for anyone that looks, but internally only instrumenterOptions should be passed around. Normalizing in getConfig is fine.\nThe unit test calling instrument without coverageVariable is fine in that case. That unit test isn't concerned with coverage, so the value of the coverage variable isn't relevant, just that instrumentation be performed.\nHmmm...I believe the current CI test failure is due to a commit I merged in that modified the Pretty reporter.\n. I did a little bit of cleanup and added a simple unit test for util#instrument. Merged in 2c0e0a4.\n. Merged in 72a862c1. Thanks!\n. Since this maps directly to stdio, would it be beneficial to just have the Grunt task understand a stdio option rather than adding a new rawIO boolean flag? This would be somewhat more flexible, since it would allow the grunt task to connect Intern's I/O channels to arbitrary streams or file descriptors as well as inheriting the parent's descriptors.\n. Hmmm...what do you mean?\n. The default behavior when creating a child process is for its output to be piped to the parent, which is what the task is doing now and why it needs the stdout and stderr readers. The new rawIO option is just a convenience for setting stdio to the string 'inherit'. If the user passes an array, then yes, I think we can inspect it and use the current behavior for the first two entries (hook up a reader if the value is 'pipe' or null/undefined). Otherwise, assume the user knows what they're doing.\n. For general questions, StackOverflow or the IRC channel are the best ways to go. If you have a bug to report or a feature enhancement to suggest, this is the place to do it.\nDo you have a pull request to make, or do you just want to post code to illustrate a potential bug? If it's just example code, feel free to post it, no CLA required. If you want to make a PR, you need to go through the CLA process.\nRegarding your question, you can import the 'intern' dependency in your suites, and command line arguments will be available on intern.args.\n. A simple timestamp check is probably sufficient for Intern's proxy. _codeCache could be updated to store objects with timestamps and file data (instead of just the file data), and _handleFile could then do a stat check when loading the file.\n. Go ahead with a PR\n. Merged in https://github.com/theintern/intern/commit/f375092837a69b8a4bbb156e7ec985094cc44cc3. Thanks!\n. I don't have a Windows 7 system handy, but the test case appears to work properly (following \"Steps to reproduce\") on Windows 10 + Intern 3.1.0 + node 6.0.0 and MacOS 10.11 + Intern 3.1.0 + node v0.12.0. It's possible there's a specific issue with Windows 7 or Node v0.12.2, but it'll be a bit before I have a test system setup.\nThe introduction of browser_modules didn't really change the structure of the intern install; previously, some or all of the packages symlinked under browser_modules were symlinked under node_modules (depending on whether Intern got it's own copies of packages during npm install).\n. Ok, I was finally able to reproduce this:\n1. Install a project with Intern as a dependency. npm will flatten the dependencies, ending up with node_modules/dojo, and node_modules/intern/browser_modules/dojo will symlink to that.\n2. Update the project to use its own dojo, or just npm install dojo@1.11.0. This will cause Intern's dojo to move from node_modules/dojo to node_modules/intern/node_modules/dojo. npm will not rerun Intern's fixdeps.js script, so the link in browser_modules will be out of sync.\nCurrently the simplest way to update the links is to remove and reinstall intern.\nThis wasn't an issue before because Intern always looked into intern/node_modules for its dojo, and npm moving dojo from node_modules into node_modules/intern/node_modules would simply overwrite the symlink, so nothing would change from intern's point of view.\nThis would be easy enough to fix automatically with the runner or client scripts; they could always check and update symlinks if necessary during intern's startup process. However, the browser client can't do that. Possibly the initial fixdeps script could copy the necessary packages into browser_modules rather than linking them. Another option would be to switch back to node_modules, but that can lead to extraneous warnings from npm, and breakage of things like shrinkwrap.\n. That will happen if the symlinks become invalid.\nI'm leaning towards just copying the packages into browser_modules rather than symlinking, and replacing the copies if the versions get updated.\n. Interesting. I haven't seen a lot of use of Tomcat as an Intern server, but that seems like another reason to consider copying the relevant packages instead of linking them.\n. The latest release of Intern copies the relevant packages into browser_modules rather than linking them. Give that a try.\n. This isn't really a bug. When a suite fails, Intern can't tell how many tests would end up failing because, for example, some might still have passed. Rather than guessing, it just indicates the suite failure and says nothing about the tests, because they never ran.\nAt the time this behavior was developed we didn't have the concept of explicitly skipped tests, so probably the most correct option would be to mark all the tests in the suite as skipped with a reason of 'suite failure' or something. We also probably shouldn't record the suite failure as a failed test, although some way of indicating a suite failure in the summary would be beneficial.\n. This was handled through commits 5f88f6b and 94234d2. The first updates Suite and the reporters to not consider un-run tests as failed. The second updates Pretty's test counting logic.. This is related to https://github.com/theintern/leadfoot/issues/78. The problem is that a new Leadfoot feature test was added for file upload capability, and it's mysteriously breaking for some users.\n. This is fixed in release 3.2.1.\n. Descriptions for setup and teardown have been added to the docs.\n. This was merged in ab9a24516a0e59e535d6dca2112b7c417b83ca05\n. This should be pretty easy to do by just giving the report items targeted links. Like, each suite item would have a link like <existing URL>&suites=<mid>. Test items would have links pointing to <existing URL>&suites=<mid>&grep=\"test id\". Clicking the link would run only that suite or test. The user could use the browser's back button to run all tests again.\n. @rodneyrehm pressKeys should be using /keys if it's available (which it should generally be), but since the supportsSessionKeys check was not properly implemented, /value was being used in cases it shouldn't be. @MartinDoyleUK I have this fixed locally, and I will hopefully have an update out this week that fixes this issue.\n. @seriema Yes, it was. I really need to be better about closing issues. :)\nWhat browser are you targeting?\n. @seriema, thanks for the test case, it does reproduce the issue for me. After looking into this a bit more, it seems like it's a known issue with IE 11 and IEDriverServer. Hopefully it's something Leadfoot can work around; if nothing else we can disable some/all feature tests for IE11 (like we do for Safari), but that won't protect a user from shooting themselves in the foot.\n. This PR does show a good understanding of how Intern manages test suites. However, while I can see adding adapters to allow suites written for other systems to work with Intern, I'm not sure we should add callback style support to Intern just to have it.\n. In either case you would need a shell-specific completion script to get completion working, unless the CLI also emits a help message detailing all the arguments so a completion system can learn them. \n. Ah, yes. That may end up being confusing, though, since the config parameter isn't a file path, it's a module ID. While those may look similar, they are not the same (a valid module ID doesn't have to mirror a real path).\n. @sholladay You are correct; I'm living in the past...\n. This now exists when using https://github.com/theintern/intern-cli\n. Fixed in https://github.com/theintern/intern/commit/7679fed6e015072f5383f1ee2e29c272bc01db93. This has been merged in the 3.4 branch (https://github.com/theintern/intern/commit/7679fed6e015072f5383f1ee2e29c272bc01db93) and will go out in the next point release. Thanks!. IE10 and 11 don't have native Promises, so can't directly call new Promise. You can use a Promise library, or you can call this.async() in an Intern test to get a Deferred object (it serves a similar purpose to a Promise, but works a bit differently). This also explicitly puts the test in async mode; if the user doesn't return a Promise from the test, Intern will wait for the Deferred created by the this.async call to resolve.\njs\ndefine(function (require) {\n    // ...\n    greet: function () {\n        var dfd = this.async();\n        someAsyncFunction(function () {\n            try {\n                assert.strictEqual('1', '1');\n                dfd.resolve();\n            }\n            catch (error) {\n                dfd.reject(error);\n            }\n        )};\n    }\n});\nThe Deferred object also has some convenience methods that can simplify this a bit.\n. I think ideally the cucumber interface should just be an interface that constructs regular Intern Suites rather than relying on Cucumber to run tests. Aside from being lighter weight, this would ensure that Cucumber tests are handled the same as other tests within Intern. The gherkin parser used by cucumber is a standalone project with no other dependencies; we should see what would be involved in using it.. This issue has been moved to the Leadfoot issue tracker\n. Merged in b57de6c. Thanks!\n. The problem is with a new feature test added in discoverServerFeatures. Most feature tests (including the new one) will break Safari, and I didn't add a guard around it.\n. Fixed in theintern/leadfoot@b8fe0df20062c2cb386c144e946a38a1a1624df8\n. New release shortly...\n. So the goal here would be to allow the test runner to be loaded as invoked as a JS module? Maybe something like:\njs\nvar intern = require('intern');\nintern.configure({ config });\nintern.on('someEvent', function () {\n    doSometing();\n});\nintern.run().then(function () {\n    cleanup();\n});\n. Fixed by #652. Cleaning out the queue (but this is quite good :) )...\n. It should be easy enough to do this in Suite itself (just have it emit a \"skipped\" message for undefined / null tests).\n. Poke one of the maintainers... :) (I restarted it)\n. This has been merged in 64e47e7d791aa4e765d63031ed5aae60ae1effdc. We don't have a date for the next release, but it shouldn't be too far out.\n. I believe this functionality was included with a PR I merged yesterday. Selecting the \"Show only failed tests\" link filters the table to show only the failed tests and their ancestor suites.\n. We plan to move to dojo/core etc. eventually, but there's not a firm time frame for that. Renaming the experimental dojo2 package should be fine, assuming nothing other than Intern projects are using it.\n. Webpack isn't, to my knowledge, a general purpose loader, so it's not something we can use here. However, it's possible that a loader plugin (something like the sample JSX transpiler) might work for this use case.\n. When Intern refers to a loader, it means a general purpose AMD-compatible loader. To load other types of things, you can use (or create) AMD loader plugins, like the JSX one I liked to earlier. The loader plugin will manage having Webpack do whatever pre-processing is required, and can return a bundled resource.\nNote that Intern doesn't have any built in support for resource bundlers like Webpack, so using it will be a bit of a manual process.\nHow you use your plugin, and how you write your tests, depends on whether they need to run in a browser or can run entirely in Node. Assuming you need to inject code into a browser, you'll need to write Intern functional tests. Such a test can load a test page and then interact with it. It would probably be simplest to create a test page that already includes a <script> tag referencing a built resource. The test will direct a browser to load the test page after Webpack has built the resource. The test itself might look like:\n``` js\ndefine(function () {\n    // this should use Webpack to build the resource, asynchronously resolving when\n    // Webpack is finished\n    require('myPlugin!resourceToBuild');\nvar registerSuite = require('intern!object');\n\nregisterSuite({\n    name: 'my suite',\n\n    'a test': function () {\n        return this.remote\n            // my_test_page.html has a script tag to load the resource that is built\n            // by myPlugin above\n            .get('my_test_page.html')\n            // do \n    }\n});\n\n``\n. This has been fixed in [intern-cli 0.1.1](https://github.com/theintern/intern-cli/releases/tag/0.1.1).\n.intern-runnerandintern-client` are separate because they work differently, not because they inherently serve different styles of tests. Either of them may be used to run unit tests, or e2e tests, or visual regression tests; the proper engine really depends on what work needs to be done (e.g., if a visual regression test calls an external service, it will run fine using the Node client, but if it needs to inject custom code into a page, it may need the WebDriver runner) .\nThe same thing goes for suites vs functionalSuites -- the distinction is mechanical (WebDriver vs non-WebDriver), not necessarily based on the type of test. It's quite possible a user may have unit tests that need to run in a browser (so intern-client wouldn't make sense), or they may have some e2e tests that run fine completely in the Node client, and some that need a browser.\nTo to this, we would need to provide a way to annotate tests so that Intern will know what type of environment is required (or desired, in case they're different). There's definitely some worthwhile possibility here, although it would require some significant internal changes. It would also probably work better if Intern could pre-enumerate its tests so that it could select the necessary engine(s) up front; that's planned for some indeterminate future release. A short term possibility is just to use separate configs for each testing stage (where the user could handle which tests were run, and how they were run, in the stage config).\n. The term \"instrumentation\" is already used for code coverage; \"test runner\" or \"engine\" would be preferable when talking about the thing that's running the tests. Unfortunately we kind of already used \"runner\" for \"webdriver runner\" (vs. \"Node client\"). So...engine? Test runner?\nThis seems like more of a usage pattern than a feature. I mean, most of this can already be handled easily via external scripts, or in the Intern config itself. Also, the concept of \"stages\" will be unique to the user, and it may not be something with universal appeal.\nIt's pretty trivial to select suite sets in a single config:\n``` js\ndefine([ 'intern' ], function (intern) {\n    var stage = intern.args.stage;\n    var config =  {\n        // stuff\n        suites: [],\n        functionalSuites: []\n    };\nswitch (stage) {\ncase 'visual':\n    config.suites = [ /* suites */ ];\n    config.functionalSuites = [ /* other suites */ ];\n    break;\ncase 'e2e':\n    // ...\n    break;\n}\n\n});\n```\nGetting some sort of automatic or configured test runner selection is a bit trickier. There isn't a good way for Intern to know whether unit tests need a browser or can run in the Node client (and the user might prefer one in any case). There are also cases where you may want to do both (like Intern's self tests).\n. That's a possibility. We could have something like nodeSuites, browserSuites, and webdriverSuites. It could also simplify how we handle the distinction currently, which usually involves a lot of intern/dojo/has!host-node?... MIDs.\n. The main issue I have is one of simplicity vs complexity. Currently, the available tools (Intern features) are pretty straightforward. We have a Node client and browser client and a WebDriver runner. You select your environment, and Intern runs the relevant tests. (There is some conflation between node vs browser suites because of the single suites list, but this could be alleviated by breaking it into separate lists.) If you need to restrict which tests run in which environment, this is very easy to do at either the suite or test level using whatever means the test writer desires (such as dojo-has flags), and it's easy to look at a list of suites or tests and see when they will run.\nA specialized lifecycle-based configuration layer adds complexity to Intern without actually achieving the goal of relieving the test writer of having to be aware of test runners since there is no direct mapping between lifecycle stage and test runner. That not to say that this sort of configuration wouldn't be valuable in some scenarios, but it may fit better in a front end rather than Intern's core.\n. I don't mean to sound like I think Intern doesn't need improvement. It could certainly be made more approachable and easier to configure. I just think we may be better served by focusing on making the core functionality easier to understand and utilize than we would by adding another layer of configuration.\n. tl;dr This proposal would fit better in intern-cli.\n\nThis may add some complexity to the configuration, but it removes the need for all of the engineers on a team to have a deep understanding of Intern's engines. They no longer need to look at Intern's configuration files to understand what suites are being run and they don't need to know when suites and functionalSuites are ran in conjunction to a particular engine.\n\nIn the projects I've seen and worked on, that kind of knowledge is abstracted away, as much as makes sense, with grunt, scripts, maven, or whatever test driver the project uses. Yes, the test writers need to have some understanding of how Intern works, but the proposed stage config does really help with that.\n\nToday if an engineer in charge of testing wants to have multiple test lifecycles that use various engines they need to write an Intern configuration file for each one and inform other engineers on their team which configuration to use and which engine to select. There are external solutions to this issue of information sharing (i.e. use npm scripts; grunt; gulp; intern cli; command line). These various solutions do nothing to reduce complexity on the whole; they only help compartmentalize it.\n\nI think this is the key point where I disagree with this proposal. I feel like this type of opinionated configuration should be handled with external solutions (including intern-cli). Everyone has a favorite interface. Some people are fine with the base Intern scripts, some prefer grunt (and we have a grunt task), and we've gotten requests a library version of Intern to allow for even more flexibility. External tools provide myriad ways of configuring the testing process, and that's great. Core Intern should focus on providing a simple, clear, and reasonably unambiguous API for running and managing tests. The CLI that's built into Intern is fairly raw, and that's fine; it should provide access to Intern's features, but it probably shouldn't provide a lot of functionality on top of that.\n. > I think we should discuss how we envision fixing usability issues with Intern. From what you said above it sounds like if we had to do it all over again that Intern would only have a programmatic API and we would produce external tools like intern-cli to handle configuration and execution.\nThis is a natural direction for Intern to take; there's no need to \"do it all over again\". It lets core Intern focus on providing testing facilities without shackling it to any particular UI or testing methodology.\n\nIf we are to reseat this feature request in intern-cli it wouldn't change the feature or the changes we'd need to make to Intern to support it.\n\nThis feature could be implemented in a UI without requiring any changes to Intern.\n\nAnd if we plan on offering an programmatic API we'll still need to do the same work we discussed above to move engine selection internal to Intern as part of the APIs.\n\nThere is no requirement that Intern handle engine selection. It certainly could (to some extent), but the UI could just as well. The main goal of creating a feature like this should be to improve usability for end users. Assuming automatic engine selection is something that's a significant pain point, it's not going to matter to an end user where that's handled in Intern's stack, just that it's handled. From an architectural perspective, I'm not sure that it's better to have Intern perform automatic engine selection vs letting the UI (or the user) make that decision.\n\nAnd if in some parallel universe Intern did only have a programmatic API and relied on external tools like intern-cli and (a separate) grunt-intern and (another) intern-browser-runner (browser tests) for executing that API those tools would still be relatively tightly coupled by their configuration since their use would need to be interchangeable.\n\nIntern's CLI is already a pretty thin layer over the underlying code; exposing an API won't be all that difficult. In any case, many users already rely on something else to provide the user-facing UI, like grunt, npm scripts, maven, etc., so this isn't a huge paradigm shift.\n\nLong story short, we need to revisit our vision for Intern before we come back around to this. I am OK moving this feature as long as it produces a cohesive ecosystem, but I don't think it is possible to move this feature out of Intern's core without also externalizing Intern's configuration.\n\nOne of the main benefits of separating the UI from the core is that experimentation with new UI concepts becomes both easier and less risky. No changes to Intern's core (that I can see) are required to implement this feature, so there's no reason it couldn't be implemented in a standalone UI right now (or added to intern-cli).\n. During some offline discussions, the following modifications to Intern were proposed that would allow the proposed feature to be implemented:\n- Split the suites list into browserSuites and nodeSuites. This will allow a front end to identify which engine(s) would be required to execute the suites in a config.\n- Give intern-cli the ability to list available config files. This means that the config files would need to live in a standard location.\n- Add support for a local config file for intern-cli, something like an .internrc. This will allow for project-specific modifications to intern-cli's behavior, such as changing where the app looks for the default config file.\n- Add a standard metadata property to the config files. This will allow interested parties (like intern-cli) to  display useful information about the available configs.\n- Give the browser client a query mode with the ability to list available configs (those with browser suites, at least). This will require some additional capabilities in the test proxy server.\nWith these updates, high-level organization can be implemented using individual config files. These can be queried using standard OS facilities such as ls, as well as intern-specific features. Each config config provide metadata describing the purpose and capabilities of the config, and will contain any environment-specific setup related to the config.\n. intern-cli looks for tests/intern by default.\n. This project is where this type of functionality (the user interface) is intended to go. There are no plans to remove intern-runner and intern-client any time soon, but this project is intended to take their place for day-to-day use.\n. There is actually a scroll listener in css/main.js that's used to sync the doc position with the contents on the left. I don't believe there are any issues with current Chrome (I'm using Chrome 53 and Safari 10 on Mac OS 10.12), so @sholladay is likely correct that the issue is a conflict between the code on the doc page and a browser extension. It'd be interesting to narrow down the issue, if you were up for some quick testing.\n. This looks like https://github.com/mozilla/geckodriver/issues/79, where pre-48 Firefox can't access global variables in execute scripts. (Coverage data is retrieved using an execute script.). I'm going to close this since the problem should be fixed by using FF 48+. Reopen if that doesn't fix the issue.. No problem! Glad it's working :). Try this for your environment line (tested with Selenium 3.0.1):\njs\n{ browserName: 'safari', 'safari.options': { technologyPreview: true } }\n. Just to make sure, tests are fine with Selenium <= 2.48, but are broken with Selenium > 2.48?\n. This is, as you suggest, likely due to the autocrlf setting. The report will always be generated with \\n, but with autocrlf=true, the test comparison file will have its line endings converted to \\r\\n.\n. There were actually a couple of issues here. One was the path issue (the test had hardcoded in a path with '/'), and the other was a race condition that comes up at least on Windows 7. ReporterManager creates its file indirectly using createWriteStream, and the test was checking for the presence of the file using statSync. I ended up modifying the test to do an initial async stat call, and then do the actual checks in the stat callback.\n. Merged in https://github.com/theintern/intern/commit/0852fe70c61374ad2a4b8187c7acd50ec3eb43a6. Thanks!\nI really need to iron out that IE11 test timeout issue...\n. Oooooo, that one fell off the table. I'll see about getting that one (or something like it) landed relatively soon.\n. Commit 68b20ca introduces some new communication code that ensures PreExecutor and the WebDriver reporter stay in sync, resolving this issue. Feel free to re-open it if the problem comes up again.\n. Fixed in 3.4.1. I totally agree!\n. The testEnd event is being emitted by the reporter manager for tests run locally on the Intern host, but not for unit tests run in a remote browser. It's being lost somewhere in the WebDriver message path.. But as you say, this wasn't the case in 3.3.2, so something is broken in 3.4.. Commit b622530d441299a7bfc7e5b40ac77dd4493c609d appears to be the culprit.. Fixed in d1cac5826185254b8c7108e104e24c73f3ee64a7. Closing this since there probably won't be new releases of geezer (unless specifically requested).. Thanks for the info. Someone else also had a similar issue recently. I've created an issue in the repo for Intern's dojo at https://github.com/dojo/dojo2/issues/24.. The Runner reporter is only intended for use with intern-runner; use Console or Pretty with intern-client.\nThe Pretty reporter should show a spinner in a status row while testing; the list of test results doesn't show until after testing has finished.\nTotal: [\u2713\u2713\u2713\u2713\u2713\\                         ] 42/217. Do you mean that you see the progress bar and all results at the same time, after your tests have completed? That can happen for very short/fast test suites; the tests run so fast that you never have a chance to see any progress.. The Runner reporter is only intended for use with intern-runner; use Console or Pretty with intern-client.\nThe Pretty reporter should show a spinner in a status row while testing; the list of test results doesn't show until after testing has finished.\nTotal: [\u2713\u2713\u2713\u2713\u2713\\                         ] 42/217. This seems to be a duplicate of #695. Some notes (to accompany all the commits that now reference this issue)...\nThe overarching goal here is to separate the loader from Intern, such that Intern can be loaded and used like any standard JS module, with or without a loader. It should run in a Node environment, and a browser, and be able to drive tests via webdriver, and the usage model should be reasonably consistent in all of these. The Test structure should be portable between these environments (i.e., you shouldn't have to write Intern tests differently to run in a browser vs Node). To that end, the basic architecture (which is still being refined) looks like this:\n\nExecutor (actually its subclasses) drives the testing process.\nReporters, Suites, and Tests can access the executor to get at global context.\nExecutors are event emitters, and serve as the main event hub for the testing process (i.e., no more ReporterManager). Reporters are just listeners for executor events.\nExecutors are environment-specific. For example, the Node executor only works in Node. The Browser executor only works in the browser.\nOnly one executor should be instantiated, and it will be assigned to an intern global. This allows suites to be loaded independently from Intern (once the intern global has been set).\nFor the browser, a single browser.js script is built that contains all the browser-compatible parts of Intern. Loading it will automatically instantiate a Browser executor and assign it to the intern global.\nThe built-in client.html test page will load code that processes query args and loads unit test suites via script injection. It will also provide a means for loading user-specified preamble scripts that could, for example, setup and configure a loader.\nKnown types of things like reporters and Dig Dug tunnels can be specified in config structures using strings (which the executor will map to constructors). For custom reporters, constructor functions can also be provided.\nReporters no longer have a special status; they're just event listeners. The built-in reporters all inherit from a base Reporter class, and use a method decorator to register their event handlers.\nEverything is as explicitly typed as possible.\n\nThings that currently work (to some extent):\n\nThe Node and Browser executors\nThe WebDriver executor (for functional tests)\nThe Simple (Node console), Console (browser console), and Pretty reporters\nThe object interface\n\nSome things that are still under development (this is not exhaustive):\n\nclient.html and its support script.\nInstrumentation in the browser (when running webdriver tests). The existing model of instrumenting code as it's loaded through Intern's proxy will probably continue to be the method of choice.\nPath resolution (tests can't depend on require.toUrl anymore). Status update:\n\nAll three environments (node, browser, webdriver) are now functional at a basic level. The 'object' interface works, as do the Html, Simple/Console, Runner, and Pretty reporters.\nOther changes/improvements:\n\nPath references are now standardized around basePath / process.cwd(). There are likely cases where this isn't working yet, but that's the goal.\nclient.html is now remote.html (and all associated class names are based on \"remote\" rather than \"client\"). It loads remote.js, which is where all the fun happens.\nIntern now has the concept of loader scripts for the browser. These basically let the user setup whatever loader they want and use it to load test scripts and app code. Intern includes 'dojo' and 'script' loader scripts.\nIntern now includes a simple logging facility. The base executor has a log method for convenience, but the basic concept is just to emit 'log' events that a reporter can pick up. This can be particularly useful for run tracing in a remote browser.\nChai is now loaded by the base executor and exposed via a getAssertions method. This removes the need for user tests to explicitly load chai.. Status update:\n\nI updated the dojo and jQuery intern-example projects to use the prelim Intern 4. That worked out relatively well, although it uncovered a couple of rough spots that still need some work.\n\nThe commits above from intern-examples have notes on what changes were required in each project.\nFor projects that don't inherently need a loader, like the jQuery one, there should be a way to load app scripts without needing a custom loader script. Intern already has browser/loaders/script, but that just loads things in the suites list, and it doesn't pay attention to order.\nI've only tried out the WebDriver runner, not the browser client.. I updated the grunt task to load Intern as a library rather than starting it as a subprocess. This led to a number of simplifications in the grunt task, and also removes the limitation regarding which properties can be passed in from grunt.\n\nI also ported over the grunt example in intern-examples to use the new task. This involved the standard modifications to the tests, as well as a minor change to the app module being tested. The app module assumed it would be creating a global value; however, this didn't work in node once the dojo loader was not longer in use, so the module was updated to make an explicit global assignment.. I started on an angular2/systemjs example. The repetition between the webdriver run script and the local browser index.html is annoying, so I'm working on sharing a bit more of that. I considered focusing on a user-constructed index.html for both local browser and webdriver testing, but that seems like it would be limiting in the long run (it would be harder to have intern divide up suites between browser sessions for parallelization, or have it run tests in more isolated environments). My current thought is to have a configurable runner page that the webdriver executor will use (as it currently does) and that the user can use as a browser client. Much as intern's browser client does now, the client will let the user provide a config.. After considering some other options, I think the current direction I'd been going for WebDriver + browser loading, which is is to use a standardized test harness/page that calls a runner script (potentially user-provided) to actually load the unit test suites and start intern, is probably the way to go. This minimizes the amount of code a user has to write while still allowing them to have full control over loader configuration (assuming there's a loader) and the test loading process.. The angular 2 example mentioned above shows what this looks like. For that one, I have a simple Node  script to kick off webdriver tests, along with a runner script to load SystemJS and the app dependencies, and the tests themselves. The example also includes a sample custom index.html script that uses the Browser executor. Out of laziness, it just loads the same runner script that's used for WebDrriver tests.. I made a number of updates to Intern's default usage model make it easier to get up and running. I also updated the angular2 example to work with this.\nIntern now has two built-in runner scripts: one for node + webdriver, and one for the browser. Both of these will make use of an intern.json config file if available, and will check a default location if the user doesn't provide one (the config isn't necessary, but it'll find it if one's there). Options can be overridden from the command line or via query params. The goal is that you can create a very simple intern.json file and just run node_modules/.bin/intern or go to http://localhost:8080/node_modules/intern/ and have things happen.\nI also changed how loader scripts work -- they register an async callback now that's called at the start of the run process rather than calling the run method themselves. This allows Intern to pass information to the loader, such a potentially modified version of the config.. I moved all the executors back into src/lib/executors; the idea now is that the built-in runners will be used by default. Loading and using executors directly in scripts should still be easy, but there's a bit less of a focus on that (e.g., the Node and WebDriver executors had been directly in src/  as a way to make them easier to get to).\nI also worked on making the argument processing code more flexible, which will allow for simpler config files and easier to work with command line and query args. For example, current intern requires environments to be specified as an array of objects. The new config processing code will handle environments=chrome from the command line, or \"environments\": \"chrome\" in the config file, normalizing both to environments: [ { browserName: 'chrome' } ].\nAnother feature of the new external config format (used by config files and arguments) is that it must be JSON serializable. This means that a config can be easily loaded or constructed in something like a grunt task, and then passed directly to an executor. All properties can be passed via the command line or as query args, making it easy to override any config property.. Updates in the last few days:\n\nThe event handling system has been fine tuned a bit. Everything that emits an event now pays attention to the return value of emit, so that the entire testing process will wait for async actions to complete. The testing process will also fail if a listener throws an error or rejects. Basically, executor events are now hooks into the execution process.\nThe intern config now supports a preload property that specifies a script or list of scripts to load before suites are loaded. This is a place to register before/after callbacks (e.g., to start and stop and external server), and also a good place to load global scripts before tests if you're using one of the built-in loader scripts.\nErrors are caught in a few places they were being missed.\nA couple of user-friendly errors are now reported. For example, the Browser executor throws a useful error when it sees a glob in the suites list (because it can't process globs).\nSuite/fatal errors aren't double-reported anymore\nExecutors now provide an environmentType property that indicates the general environment things are currently executing in (node vs browser vs webdriver).. Woo, there's a working Electron example. Implementing it exposed issues in Intern, Leadfoot, and Dig Dug, although nothing significantly broken in the architecture, so that's something. :) The config normalization process is a bit more consistent now, as are the Tunnel implementations in Dig Dug (less property repetition).. Just cleaning things up. I'm cleaning up Dig Dug and Leadfoot and creating prerelease packages, then I'll update the intern-4-pre branch and push it out here.. Merged in 074f8d8. Thanks!. Those appear to be failing feature tests, which is completely normal. When you run functional tests, Intern runs a bunch of checks against the browser when it first opens the connection to determine what features are supported. Some of these tests will fail, but it just indicates that a browser particular feature isn't supported or is broken in some way, not that there's a problem that will prevent tests from running.\n\nTo check that this is really what you're seeing, you can disable the feature tests by adding fixSessionCapabilities: false to your environment specifier (e.g. { browserName: 'phantomjs', fixSessionCapabilities: false}).. They are in dependencies because they're dependencies, not just dev dependencies. I mean, assuming you're using Intern in a TS project, you will need those types, and @types packages should be the way to handle those in a project. I can see how that would cause problems if you're using your own types, though. Does adding the @types to an exclude block in your tsconfig work?. I'll merge this. Until then, benchmarking should work fine if you provide benchmarkSuites as an array in the Intern config.. Merged in https://github.com/theintern/intern/commit/affb851cb1084d8444df08e3950a6398bf655d3b. One of the dependencies in the attached project, punycode, uses an AMD define call of the form define(id, factory). This is a case that isn't currently handled by Intern's internal loader.\nThe easiest fix would be to use an alternative AMD loader for tests, such as the normal Dojo loader or RequireJS. For example, to use requirejs, install requirejs as a project dependency and add the following property to the test config:\njs\nloaders: {\n    'host-node': '../../node_modules/requirejs'\n},. Glad to hear it worked!\nRegarding the error message, I'll take a look. It may be as easy to fix\u00a0the problem as it is to improve the error message.. Hi, and thanks for your interest! We prefer to keep this issue tracker focused on development, so issues should only deal with bugs and feature requests. For general usage questions, please try our IRC channel (#intern) or Stack Overflow.. beforeEach and afterEach are already passed the current Test object. I think this style of access (passing the current test Test to potentially interested parties) may be preferable to having a class-level reference since it will continue to work if, say, Suites are able to run tests concurrently.. Since beforeEach and afterEach are passed a reference to the test, you can already do what you were trying to do:\n```js\nbeforeEach: function (test) {\n    if (/abc/.test(test.name)) {\n        ...\n    } else if (/def/.test(test.name)) {\n        ...\n    }\n},\nafterEach: function (test) {\n    if (test.error) {\n    }\n},\n```\n\nAs I understand, if we use different sessions, then it should be fine (it is what I use and already tested)\n\nYes, currently the only level of concurrency generally used by Intern is running sessions in parallel. I just meant that if we wanted to run the tests themselves in parallel in a session (assuming we had dealt with the other relevant issues there), a single 'currentTest' parameter wouldn't work since multiple tests in a suite could be active at once.. Merged in https://github.com/theintern/intern/commit/46768c9344f276e875254db5e39a131a1de1de00 -- thanks!. We should add a list of sub-projects/plugins/etc. to the main Intern README, and add full installation and usage docs to the READMEs/repos for each project.. This sounds like an issue with webdriver-manager, not Intern. Intern doesn't try to start browsers itself, it just sends requests to Selenium (which is being managed by webdriver-manager in your case) saying it wants to use a particular browser. For example, in this case Intern will tell the Selenium server it wants to use \"phantomjs\" (this is a browser name, not an executable name). However, Selenium is what actually handles locating and starting up a browser binary.. I would say that Intern takes a reasonably consistent approach to its use of pinned dependencies; originally all dependencies were pinned, and currently all non-Intern dependencies are pinned. (Dig Dug and Leadfoot were unpinned so that bug fixes could come through without requiring a new Intern release.) I agree that only pinning top-level dependencies isn't particularly thorough, but while unpinning them may provide quicker access to new features, it magnifies the likelihood that something will break (as the CI test run shows).\nAt the moment I lean towards shrinkwrap, or at most using '~'.. > This doesn't look like semver abuse or anything like that. And again, yes, new bugs can happen occasionally with or without this PR. I would argue that this PR makes it more obvious why that can happen.\nI'm not so concerned with why something is broken so much as the fact that it's broken. With pinned dependencies, we (theoretically) know that users will end up with a product that has been tested. When we use tilde ranges, the odds go up that a user will encounter something broken, but those odds should still be reasonably low since tilde implies small changes. With caret ranges the odds of encountering breaks go up again, because much larger changes are allowed.\nNoticing that Intern is broken isn't too bad -- we can just run a daily or weekly CI cron job to check that current installs work. However, dealing with the problem becomes much more of an issue, because now all new installs of Intern are broken until we do something about it (either pinning to a known good version of a dependency or writing around the issue).\n\nAnother way to look at this is, which do you think is more common: new bugs OR (bug fixes AND new features)? Remember that we are talking about production releases here that have passed their respective test suites and CI runs, as all of Intern's immediate dependencies are high-quality projects that have these.\n\nMy main concern isn't that the projects aren't tested, it's that they aren't necessarily tested in the same environments that Intern is. The CI failure is a good example of this. At least one of the dependencies wasn't tested in, or may explicitly no longer support, Node 0.12, which Intern still technically does.\n\nIn regards to stability, note that many of your fellow testing frameworks such as AVA and Mocha use caret ranges and don't shrinkwrap. While I wouldn't use that as a reason alone to do this, I think it's meaningful to demonstrate that other stability-minded folks are getting along just fine with this.\n\nI'm not completely against using looser dependency versions, but I'm still not sure that the benefits necessarily outweigh the accompanying maintenance headaches.. Should the license file point to the Intern license rather than duplicating its content? The content is mostly the same (New BSD verbiage), except that the copyright in the Intern LICENSE has more history.. Also, the dojo license still mentions the \"Dojo Foundation\"; is that intentional?. > I believe we need to include the license itself.\nShould we modify or exclude the copyright line since the various Intern projects have different copyrights (e.g. Intern is (c) 2012-2013 Colin, 2013-2017 SitePen, while Leadfoot is (c) 2014-2017 SitePen)?. Updated in https://github.com/theintern/theintern.github.io/commit/d95c67b5ef3216781c913f8eba1f627f4821f729. The worker code will already be instrumented if it's loaded via the intern proxy. The trick will be to get the coverage data out of the worker without requiring the user to make it explicitly aware of code coverage.. They are optional in master, and I can push out a 3.4 update with that, too.. This is fixed in 3.4.4.. Source map support should work out-of-the-box with babel and TypeScript transpilation. It should also work with webpack using istanbul-loader). If you find cases where it doesn't, let us know!. This was addressed in https://github.com/theintern/intern/commit/bec9d5792dd4a8843d501a7b14d1daae74c6d9a8. The standard usage model for istanbul is now to use the nyc command line tool. That appears to work with SystemJS and pure Node-based projects out-of-the-box. For remote suites we may be able to use nyc to instrument the code and collect the coverage afterwards, use istanbul-api.. No, of course it's not that easy. nyc doesn't appear to work with SystemJS, which the self-tests are currently using.. We need to support instrumentation in at least the following situations:\n\nNode loader\nAn AMD loader in Node (which should default to the Node loader in a Node environment)\nSystemJS in Node\nAnything in the browser\n\nnyc can handle the Node loader case, or we can use the underlying istanbul-lib-hook and istanbul-lib-instrument libraries similarly to how Intern 3 does. SystemJS will probably need a transformer. The browser situation could be handled via the Intern proxy as it is now, or we could use nyc to pre-transform the files to be tested and then serve those.. Using nyc to pre-process the code has definite possibilities. It's usage is a bit weird, and it is essentially a build step (which I was trying to stay clear of as a base requirement for testing), but it has the advantage of working no matter how a module is loaded.. Ok, this seems to be in a good state, at least for the time being. Coverage basically works like it did in Intern 3: Intern adds hooks to the Node loader in Node, and instruments files in Server when they're requested by a browser client. Source-map support is now built in, and I've tested it with TypeScript and ES6 + babel projects.\nOne new feature is a functionalCoverage option. Coverage for functional tests can be disabled by setting functionalCoverage: false in a test config.. TypeDoc runs on Intern, Leadfoot, and Dig Dug. Unfortunately, the generated output isn't super well organizaed. Ideally we'd have something that looks structurally similar to Leadfoot's and Dig Dug's API docs now (not necessarily with the same styles; the bootstrap-like aesthetic of the default TypeDoc docs is probably fine), with top level modules in a side bar, and without a lot of noise in the property and function lists.\nA stretch goal would be to improve TypeDoc's ability to handle arbitrary markdown files (besides README) so that we could just use TypeDoc to generate the entire docset for a given tool (expository docs as well as API docs).. We're doing on-the-fly custom rendering from TypeDoc JSON for the Intern API docs (rather than using TypeDoc's renderer), so this is now moot.. There are the beginnings of some documentation in the docs directory, and there's a branch of updated examples in intern-examples#intern-4.. I have good coverage for most things other than the reporters (ooo, look at the fancy coverage), and the qunit test interface (which still needs to be ported).. Calling this done for now, will open a new ticket for the remaining tests. Definitely. I keep forgetting that JS's split always splits on every instance of a match, even when you specify a limit. :). Gah, it's annoying when feature tests break FF.\nOk, it looks like the issue is that geckodriver hangs when Leadfoot tries to do a window/x/size call. The W3C standard (and geckodriver 0.16) use a window/x/rect command instead, so in the long run we'll need to update Leadfoot to handle that (https://github.com/theintern/leadfoot/issues/108).\nIn the short run I'll push out an update to disable that check in FF 53+.. In theory, you'd pass verbose: true as a tunnelOption for SeleniumTunnel, which will cause Selenium to output debug logs to stdout. Unfortunately, there appear to be a couple of problems with that at the moment. Another issue for the day... https://github.com/theintern/digdug/issues/43. The FF 53 issues are fixed with Leadfoot 1.7.2 (at least, the get/set window size function doesn't hang). The verbose flag is more functional in Dig Dug 1.6.4.. Interesting. In the source for Selenium's FirefoxDriver it looks like the driver just takes the profile value from moz:firefoxOptions and converts it to a firefox_profile capability, so I'm not sure why that step would be necessary.. That handle parameter for switchToWindow is set in Leadfoot. I actually have a TODO there about the parameter name being changed to handle in the WebDriver spec. At the time everything still used name, but I guess geckodriver has switched over.. Also, it looks like moz:firefoxOptions is mentioned in the geckodriver docs: https://github.com/mozilla/geckodriver/blob/master/README.md#firefox-capabilities. I need to mention that in Intern's/Leadfoot's docs.... I spent a while today (technically yesterday) testing various combinations of FF + geckodriver + Selenium + cloud service (see https://github.com/theintern/leadfoot/issues/126). FF is a bit of a mess right now. I'm going to push out another leadfoot update tomorrow morning that will include some fixes to improve FF compatibility, but anything less than FF 55 + gd 0.18.0 + Selenium 3.5.0 has issues with at least window sizing and positioning.. Regarding the window switching issue, WebDriver handles are opaque identifiers rather than window names. Unfortunately I'm not sure of a straightforward way to associate names with handles, so you either have to retain the handle to a window you open, or guess it from the list of handles returned by getAllWindowHandles.. Excellent review, Paul -- thanks!\nSome questions/thoughts/points for discussion:\nPlugins\nDid you have any specific thoughts on what the plugin pattern might look like? Given that plugins may be loaded via script injection, they'll need to self-register (intern.registerPlugin, or the like). However, at that point we a have a fair amount of flexibility. For example, we could handle plugins like Suites, where there are some predefined lifecycle hooks (maybe just 'start' and 'stop').\n```ts\nintern.registerPlugin({\n    start() {\n    },\nstop() {\n}\n\n});\n```\nI'm a bit leery of having plugins rely on an external loader vs being standalone bundles. One of the main benefits of removing the loader from Intern is that Intern no longer affects the configuration or loading of an app, and it has a minimal impact on the runtime environmnent. A user could very easily end up in a situation where different plugins need different loaders (or different versions of the same loader), each with its own configuration, or a plugin and the app being tested may each require a different loader.\nAsync preload scripts\nWithout a loader, the code registration process needs to be managed (to some extent) by the script being loaded rather than by Intern. For something like registering a bit of async code, a script will need to call something on Intern to tell it that there's code to run rather than relying on Intern to manage the process.\nThat's not to say Intern can't provide more obvious or standardized hooks. For a while I had intern.runBefore(...) and intern.runAfter(...) registration methods, but eventually tossed those in favor of the event system (falling back on the 'there should only be one way to do a thing' philosophy).\nI'm not sure how a plugin architecture would make much of a difference in this particular case. At least, given how I envision a plugin architecture working, you'd be doing\nts\nintern.registerPlugin({\n    start() {\n        // do stuff\n    }\n});\nvs\nts\nintern.on('beforeRun', () => {\n    // do stuff\n});\nTest types and configurations\nI'm still not sold on the idea of building the concept of arbitrary test \"types\" or \"stages\" into Intern; it just feels too high level and use case-specific. These are inherently project and organization-specific concepts, and the features used to determine types or stages may differ between groups. For example, one org may want to separate benchmark tests from unit, which can both run in the same executor but use different reporters. Another org may want to group some visual tests in with their Node-based unit tests, which would require different executors and different reporters.\nIn some cases, separate configs may be sufficient to encapsulate different scenarios. In other cases, something even higher-level may be required, like a user script that runs multiple runs of Intern and collects the results.\nI think core intern should provide basic tools that make doing something like this easier, but it shouldn't try to push users into any particular organization. The simple JSON config files actually provide a pretty decent mechanism for this. A user can setup a base intern.json, and then create separate configs that extend it. A config will encapsulate all the settings required for a particular stage (reporters, suites, pre-run scripts, etc.).\nI'd like to keep the config format reasonably simple; ideally it should just mirror the internal Executor config object. We could allow for multiple configs to be stored in a single intern.json file rather than requiring separate config files, though, maybe something like (where each sub-config uses the same format as the overall config):\njs\n{\n    \"suites\": [ ... ],\n    \"benchmark\": false,\n    ...\n    \"configs\": {\n        \"browser\": {\n            \"loader\": \"dojo\",\n            \"suites\": [ /* some other suites */ ],\n            ...\n        },\n        \"visual\": {\n            \"reporters\": [ \"visual\" ],\n            \"suites\": [ /* visual suites */ ],\n            ...\n        }\n    }\n}\nRegarding your specific questions about configs:\n\nExtend configurations\nConfigurations can be extended via an \"extends\" property that points to another config file.\nInclude various sets of tests based on environment\nbrowserSuites and nodeSuites specify environment-specific sets of tests. For topical breakdowns, separate config files would be used.\nList available tests (visual regression, unit, functional, performance, integration, system, etc\u2026) with the cli\nWe can give the built-in CLI the ability to list avaible configs, and we can add additional properties to the config format (description, keywords, etc.) that will allow Intern to give the listing more context. For anything more advanced, we can add functionality to intern-cli or some other test management package.\nWrite tests against multiple loaders (e.g. node & @dojo/loader)\nThis can be handled with separate configs. One that would only select a different loader could be as simple as { \"extends\": \"intern.json\", \"loader\": \"otherloader\" }.\nOne feature that may be worth adding is the ability to specify environment-specific loaders (e.g., use SystemJS only in a browser environment). Currently a user would need to write a custom loader script that would handle setting up different loaders in different environments. I'm not sure how valuable this would actually be vs just saying that a separate config should be used when different environments require a different loader.. > For the first use case we should make it easy to augment Intern locally\n\nAre there any particular augmentations that are currently hard (or impossible) to implement that should be easier, or is it just that the APIs for doing so should be more centralized? I mean, a plugin API doesn't really do anything to make local augmentation easier, it seems to be focused more on redistributable code.\n\nAs far as what it would look like,\n\nThis looks reasonable, although I would go with something like start rather than load to prevent explicit dependencies on a loader. Any local code using this API will be aware of the loader and can access it on the global scope.\n\nIf you're concerned about plugins having access to a loader, don't be -- it's already too late \ud83d\ude02!\n\nPlugins can certainly access the loader if a user has set one up, that's not my concern. The issue is that redistributable plugins should not be able to mandate a particular loader and/or loader config because this could become a pain point for end users. Plugins should be self contained, at least from a configuration standpoint; adding a plugin should not require a user to setup a different loader or modify their existing loader config (beyond adding a package or some such). This may require that complex plugins be distributed as bundles, but this is desirable since it means a user can just drop in a plugin without having to worry about it disrupting their testing setup.. > Right now, someone needs to have pretty deep knowledge of the event system and intern lifecycle if they want to load an async preload task or wait for the loader to be registered (listening on the beforeRun and runStart events, respectively).\nIt's not that bad \ud83d\ude04 I mean, there are really only three attachment points that are available (outside of reporters): before anything runs (the intern config), before testing starts (config.before), and after testing ends (config.after). Preload scripts replace the configurability of the intern config, and the 'beforeRun' and 'afterRun' hooks handle config.before and config.after.\n\nAdding a registerPlugin() method would make it obvious where to add plugins. It would also be nice to have a name and a description that we could announce when plugins are registered.\n\nTrue.\n\nWe should also support ad-hoc plugins that allow a user to augment the system without requiring a bundler step. I wouldn't want us to remove AMD as a requirement only to make bundling another pain point.\n\nThere's nothing preventing ad-hoc plugins, so long as plugin loading happens after any loader is loaded (otherwise plugins will have to be built or not load external modules). For consistency, we should probably say that plugins will always be loaded after the loader just so there aren't 'preload' plugins and 'normal' plugins, etc. We'll still need preload scripts in case anything needs to happen before a loader is loaded, but any other hooks can be centralized into a plugin interface.\nPlugin functionality\nWhat specific functionality should plugins provide? It sounds like right now the goal is just to provide a more obvious place than preload scripts to register 'beforeRun' and 'afterRun' handlers. Also, what should the hooking mechanism be? (Something like Reporters currently use, or something else?)\nIn Intern 3, the closest thing to a plugin we have are reporters. They're managed by a ReporterManager, which acts as an event hub. When an event is received by the manager, it calls methods on any registered reporters. For example, when a testFail event is received, the manager calls the testFail method on any registered reporters. The other main attachment points were config.before and config.after handlers. These could be defined in the intern config and would be called before testing started and after it finished.\nIntern 4 attempts to standardize things a bit more around events. Instead of having multiple ways of hooking into Intern, there's only the event system. Any code can listen for any event. There's some infrastructure for writing reporters, but at their core reporters are just event listeners (a reporter can just be a preload script with a bunch of intern.on calls). Likewise, there's no special config.before and config.after mechanism, just more events. The event hub (executor) doesn't call specially named handler methods on listeners, it calls registered listener callbacks (how event systems generally work).\nRather than adding the complexity of another API, it'd be nice to standardize on something that could be used both for reporters and other plugins. Currently reporters are classes that can be configured and self-register for intern events.\n```ts\nclass Foo extends Reporter {\n    constructor(config?: ReporterConfig) {\n        // ...\n    }\n@eventHandler()\ntestStart(test: Test) {\n    // ...\n}\n\n// ...\n\n}\nintern.registerReporter('foo', Foo);\n```\nThe intern config declares which reporters will be used via the reporters property, which has the canonical form of:\nts\nreporters: [ { reporter: foo, options: {...} } ]\nReporters are loaded and registered, and then the set of reporters requested by the Intern config is instantiated in _beforeRun. Reporters register for specific events by decorating methods with @eventHandler() (this just reduces typing; a reporter could just as easily make a bunch of intern.on(...) calls in its constructor).\nAssuming plugins will just be event listeners, the basic structure could be the same. We could say that reporters are a special case of plugin, and replace the reporters property with plugins.\nIf we want plugins to include additional metadata, the registration function could accept some sort of descriptor object instead of a name and class, like:\nts\nintern.registerPlugin({\n    name: 'foo',\n    metadata: {...},\n    plugin: Foo\n});\nI'm not really sure of the value of any metadata beyond the name, though. Plugins will presumably only be used when a user includes them in an intern.json, in which case the user would know what a plugin was for.\nLoading plugins\nThere isn't currently a mechanism to load reporters through the Intern config; Intern assumes that reporters are already loaded and registered by the time the 'reporters' config property is handled. If we want the config to specify which plugins should be loaded as well as which ones should be used, we may want to do something more like:\nts\nplugins: [ { name: 'foo', script?: 'path_to_foo.js', options: {...} } ]\nIntern could scan the plugin list for descriptors with a 'script' property and load them (which would register the plugin classes), then later instantiate the plugins. The loading process might look like:\n1. run preload scripts\n2. resolve config\n3. load loader\n4. load/register plugins\n5. instantiate plugins\n6. beforeRun\n7. run\n8. afterRun. > Can we leverage this same pattern for preload scripts?\n\nWhich pattern? If we make plugins the standard place to do things, we should probably reduce the scope of what preload scripts are used for.\nThe original intention for preload scripts was simply to let Intern load scripts like babel-register very early in the loading process (kind of like mocha's require flag). The same mechanism ended up being used for other things, like registering beforeRun handlers, for consistency (there's one way to do things, event handlers, and a standard place to use them, preload scripts).\n\nIf script is present on the configuration, will it always load using the default loader (i.e. node/script injection)?\n\nI was thinking it would load using the currently configure loader; otherwise you'd miss out on being able to write local plugins without building/bundling them, or you'd always have to explicitly invoke loader (call System.import in a script vs writing plugins as standard modules).\n\nHow can users run an async preload script or plugin?\n\nIntern's event handler waits for listeners to resolve when processing an event, so returning a Promise from a handler (like 'beforeRun') is sufficient. If Promises aren't available, the executor provides a createDeferred method, and the deferred's promise can be returned.\n\nAssuming a user wants to write an ad-hoc plugin that uses their loader, it would look something like:\n\nCurrently, if a user wants to write something that uses their own loader, they would write a preload script that looked something like this (assuming, for example, their loader was SystemJS) and include it in the preload array:\nts\nintern.on('beforeRun', () => {\n    return SystemJS.import('my/module').then(module => {\n        // do stuff with module\n    });\n});\nThe only reason we'd need to actually load the script itself with an external loader is if the script imported other modules and wasn't bundled.\nts\nimport module from 'my/module';\nintern.on('beforeRun', () => {\n    // do stuff with module\n});. I have more thoughts on this. Great thoughts. The greatest.. After some thought, how about this runtime model:\n\nresolve config\nload plugins\ninitialize plugins\nload loader\nbeforeRun\nrun\nafterRun\n\nPlugins will be scripts (not modules), although those intended to run only in a Node context can assume the presence of the Node loader. (Plugins will not be able to whether they're Node-only, at least not programmatically.) Plugins can make use of an external loader in a callback that occurs after any loader has been initialized (such as a 'beforeRun' callback) if they know one will be available.\nPlugin API\nThe ability to run code directly in a script, and to register callbacks with intern.on, already covers most of what a plugin would need to do. A registerPlugin(name, (config) => {}) method would allow Intern to report friendly names for the currently loaded plugins, and would also provide a nice process for configuration (otherwise plugins could read their own config out of the intern.config object). It wouldn't necessarily make writing plugins any easier, though, since a plugin script can already do everything it needs to do by simply registering event listeners or running code immediately. Given that, plugin writers wouldn't have much reason to use a registerPlugin API even if we provided it unless they wanted the configuration assistance.\nTo really encourage the use of a registerPlugin API we would probably need to move the resource registration APIs off the intern global and instead inject them into plugins via the registerPlugin method. For example:\n```ts\nintern.registerPlugin('foo', (hub, config) => {\n    hub.on('beforeRun', () => {\n        // do async thing;\n    });\nhub.on('testEnd', () => {\n    // check for something\n});\n\nhub.on('afterRun', () => {\n    // do thing\n});\n\n});\n// intern.on would no longer be available\n```\nExternal resources\nIf plugins want to bring in external resources, they'll have a couple of options. Global resources can be loaded using the built-in script loading facilities (assume our 'cucumber' module/script provides a 'cucumberFactory' function):\nts\nintern.registerPlugin('cucumber interface', (hub, config) => {\n    return intern.loadScript('cucumber_global.js').then(() => {\n        hub.registerInterface('cucumber', cucumberFactory);\n    });\n});\nAnother option is to use Node require semantics and simply run browserify plugin.js to generate a portable plugin package.\n```ts\nimport { cucumberFactory } from 'cucumber';\nintern.registerPlugin('cucumber interface', (hub, config) => {\n    hub.registerInterface('cucumber', cucumberFactory);\n});\n```. Hmmm...the more I think about the idea of plugins, the more they end up looking like preload scripts. The simplest and most user-friendly option may just be to document the existing functionality (possibly renaming 'preload' to 'plugins') rather than creating an additional layer of API.. Use cases! I agree, though, this is going in a good direction.\nAsync tasks\nUnless we make a special plugin API with methods named \"first\", \"second\", etc., the user is going to have to have some background knowledge about when various events happen. We just need documentation that lists the events and when they might occur in relation to each other.\nIn-order plugins\nPlugins are currently loaded in-order, and any synchronous code within one is run to completion before the next one is loaded. If a config has\nts\npreload: [ 'one.js', 'two.js' ]\nthe processing order will be:\n\nLoad one.js\nExecute one.js\nLoad two.js\nExecute two.js\n\nAsynchronous callbacks are not currently run in-order, they're run simultaneously(-ish). So if one.js and two.js each register a 'beforeRun' listener, the listener added by one.js will be called before the listener added by two.js, but the executor will pass the promises returned by the listener callbacks to Task.all. This is simple enough to fix by making listeners run in-order rather than within a Task.all.\n\nIt seems like this could be resolved simply with\n\nI agree (that was in my last post :smile:).\nPlugin options\nI think this is the main reason for an explicit plugin API. Concerns like load ordering and async execution are already handled, but we don't currently have a good story for passing options to a plugin.\nWhat would a 'task' be? Intern does currently have some standardized components like reporters and interfaces that can be registered by name and instantiated through the config. Plugins can already interact with those simply by registering them, and it would be reasonable to do so within a plugin's initializer.\nAd-hoc project code\nIf you're running in Node, which is where I'd typically expect this to come up, there's nothing special to do -- require is available.\nFor other loaders, there are a couple of options available in the existing code. One is for users to write a custom loader script that would handle setting up the loader and doing any pre-loading of modules before testing starts. Loader scripts are typically pretty short (see the examples in src/loaders). This was actually how the loader system was initially intended to work; I added in the dojo, dojo2, systemjs scripts to handle simple use cases, but I assumed users would likely end up writing custom loader scripts for anything really interesting.\nAnother option is to do custom loading in an event callback, like:\nts\nintern.on('beforeRun', () => {\n    return SystemJS.import('lodash').then(lodash => {\n        // do stuff;\n    });\n});\nA new modules-to-load-with-the-loader property is certainly also an option, although I think doing that sort of thing in an event callback in a plugin (where we could pass in config data) would be more consistent and flexible.\nPlugins making code available during tests\n\nThe current rules require that plugins are bundled, which would make it difficult to reuse code outside of when the system calls the plugin.\n\nI think there are two different concepts being considered here. One is for code that runs at certain points during the testing lifecycle -- that's an intern-specific plugin. The other is for code that a user might want to manually run during a test -- that a generic module. \nA \"plugin\" shouldn't need to make code available during a test, it should just perform setup actions or register event listeners. So, for example, it could listen for 'testEnd' events and clear a database after each test.\nArbitrary functionality for use in tests can be provided via standard packages/modules. If a user needs to manually clear a database after each test, they could just import { clearDatabase } from 'database-clearer'; in a suite and then call the function directly.\nLifecycle\nI think we can still accomplish all the goals mentioned above with a fairly simple lifecycle:\n\nresolve config\nload plugins\nload loader\nload suites\nbeforeRun (emits a 'beforeRun' event)\nrun\nafterRun (emits an 'afterRun' event)\n\nConfiguration\nI don't think we need separate plugin and task registration. That separation is useful for things built into Intern, but if a user includes a plugin in the config, we can assume it should be loaded and run.\nWe should use paths for the plugins rather than short names because Intern won't always be able to use node lookup semantics. In general, paths will be relative to the project root (which will typically be '/' in a browser). That's how all paths within Intern currently work, so it should feel relatively consistent to users.\n```ts\n{\n    plugins: [\n        {\n            script: 'node_modules/intern-docker/index.js',\n            options: {\n                action: 'run', file: './Dockerfile', ports: [3066, 3066]\n            },\n        },\n        {\n            script: 'node_modules/intern-mysql/index.js',\n            options: { url: 'localhost', sql: './support/test.sql' }\n        }\n        {\n            script: 'node_modules/intern-visual/index.js',\n            options: {\n                ...\n            }\n        },\n        './support/custommodule.js'\n    ]\n}. Preliminary thoughts...\n\nAs a refresher, one of the take-aways we found was that configuration is hard. We wanted to have solutions for\n\nI was under the impression that we ended up with reasonable solutions for these points, at least as far as intern was concerned (vs intern-cli).\nSo, possibly configuration is still hard. What does that actually mean?\n\nIf the problem is that users are overwhelmed by the number of options or how/when to use them, we should provide better documentation, and give the CLI the ability to emit a documented config template (a la tsc --init).\nIf the problem is that creating task-specific configs is hard, where exactly is the difficulty? The proposal at the end of #669 was to use multiple json config files, which is easy to understand, easy to implement, and works with a variety of tools (e.g., ls). Allowing multiple configs in a single file is a fairly trivial extension of this.\nIf the problem is that users must know which executor to run to execute tests in a particular environment (Node vs WebDriver vs Browser), that's an execution issue rather than a configuration issue. The different environments are really very different; there's more to choosing WebDriver vs Node than just picking a different config (and using the Browser executor doesn't even involve the CLI). For example, to run WebDriver tests in a cloud service, a user has to provide credentials; these typically aren't going to be included in a config file. That said, we could at least combine the Node and WebDriver executors to make this a bit easier.\nIf the problem is that users may want to run multiple configs in a row, that can currently be handled by a task runner like grunt or intern-cli. (And again, it's an execution issue, not a configuration issue.) However, from the examples in the proposal it doesn't really seem like this is the goal vs just simplifying the process of running Node + WebDriver tests in the same run.\n\n\nMy main goals are to simplify the configuration by moving away from the current bag of options that we have today.\n\nThis proposal doesn't really simplify general configuration or move away from the bag of options (it really seems to be more focused on execution rather than configuration). I mean, test writers still have to understand what options are available and how to use them to create configurations. Test runners still have to understand what executor is being run at any given time and configure their external environment accordingly (e.g., provide cloud service credentials).\nThat said, I'm not opposed to making Intern's built-in runner more capable. One capability we're missing is a built-in way of running the Node executor and the WebDriver executor together and aggregating the results. Intern 3 provides the Combined reporter for this purpose, but the user still has to explicitly run the Node executor and the WebDriver executor. We could simplify that process by simply combining those executors, so that there would be only a single Node-based executor that would run node suites and would decide whether or not to create remote sessions based on the presence of environments and suites to run in those environments. The WebDriver executor already aggregates results from running unit and functional tests across multiple sessions. Simply loading the WebDriver executor brings in some dependencies that aren't used in for Node testing, but nothing that should really cause issues.\nAnother feature mentioned in the proposal is the ability to list what tests will run (I'm assuming individual tests rather than just suites). I'm not really sure how valuable this feature is; it will become readily apparent which tests will run when Intern is run. However, it would be possible to do this to a limited extent by providing a listTests flag or somesuch that would cause the current executor to load its suites and enumerate the tests. This would still be environment specific -- the Node executor wouldn't have a way to list which tests would run in a browser, for instance (just the suites that would be loaded). And of course this wouldn't take into account any test-level skip directives.. Going back to plugins...\n\ntasks are registered by plugin, which may be called through configuration after plugins are registered\n\nI can see when this might be useful, for consistency in test writing between Node and browsers. That could be extended to a general purpose export system for plugins, like (assume this is a built plugin):\n```ts\nimport { calculateFoo } from 'whatever';\nintern.registerPlugin(options => {\n    intern.registerExports('plugin id', {\n        calculateFoo: calculateFoo\n    });\n});\n```\nA test could use the functionality something like:\nts\nmyTest() {\n    const calculateFoo = intern.getExports('plugin id').calculateFoo;\n    calculateFoo();\n}. > What does the loader definition mean to the web driver? Does it refer to the loader used in the node.js environment or the loader used in the browser environment?\nThe loader only comes into play for unit tests. WebDriver tests are fundamentally different from unit tests --- they don't load or run application code, and so have no need to use the application's loader. \n\nWhat do plugins mean to the web driver executor? Are they only ran in the node context or are they passed to the browser during unit tests?\n\nCurrently, plugins (well, preload scripts) will be loaded in all environments all the time, and it's up to the plugin to determine, based on the environment, whether it wants to do anything.\n\nHow do I run plugins in the browser before unit tests?\n\nThey (preload scripts) run now.\n\nIs there a way to limit the context in which a plugin is ran? i.e. a plugin was written that I only want to run in node. Do I have to rely on that plugin to be aware that it should only run in node?\n\nAt the moment, plugins need to check their environment ('node', 'browser', 'webdriver') to decide whether they want to do anything. This seems like it would be desirable since it frees the user from having to worry about how to use a plugin, and the plugin writer is going to have the most knowledge about what environment the plugin was intended to run in. It would be easy enough to give the configuration more control here, though.\n\neliminate the dual-mode role of WebDriver so configuration like 'plugins' and 'loader' only apply to a single host (node/browser).\n\nIronically, that's how WebDriver behaves right now (it's only single-mode as far as things like plugins and loader are concerned), and I was planning to combine them because it should be easier for users to work with. :smile:\n\nbe able to configure loaders (and plugins) without the need to write additional loader.js files to handle node/browser situations.\n\nI agree. While my initial vision was for users to write simple loader scripts in most cases, that ended up seeming like a pain. browserLoader and nodeLoader options now exist (as of a few days ago). Similar properties could be added for plugins. At the moment I lead towards having a relatively flat config (browserLoader, nodePlugins, etc.) vs nesting (browser: { loader: xyz, plugins: [...] }, node: { loader: xyz }) as it makes property names more distinct. There's something to be said for grouping, though.\n\neliminate the branching/complexity of functionalSuites, browserSuites, and nodeSuites by only having a single suites configuration option\n\nThere are two types of tests: functional and unit. Functional tests always run in Node. Unit tests may run in node or the browser. Frequently, the same set of unit tests is run in both the browser and Node environments, which is why there has traditionally only been suites (I added browserSuites and nodeSuites for easy pre-filtering of tests that only work in one domain). This organization is clear and has worked out pretty well (at least, it's never seemed to be a major source of confusion). The main stumbling block I've seen from users is in how to run those tests (intern-client vs intern-runner).\n\nPlugins are responsible for initialization. They would register reporters, register loaders, attach event listeners, and register tasks. There would be no intern#registerPlugin() method.\n\nHaving plugins register things (reporters, etc.) makes sense. Initially I was also in the \"no intern#registerPlugin()\" method camp, but having such a method makes configuring plugins easier (if they need configuration), and also allows plugins to perform async initilization actions. We could get the async initialization with an event listener for some sort of plugin startup event, but configuration would be kludgier.\n\nTasks provide functionality that execute code and potentially register callbacks (e.g. afterRun handlers for cleanup). They would be called via configuration before tests run or explicitly during tests.\nThis delineation makes it easy to explain what a plugin is used for (registration) and what tasks and event handlers do (execute code).\n\nHmmm...I'm still not sure what a \"task\" is. I mean, the concept of \"plugin\" is pretty well established. Plugins for tools like vim, SystemJS, Atom, or Chrome provide some inherent functionality, and may also expose functionality that can be explicitly invoked by the user. Loading a plugin will implicitly make the plugin do things, possibly controlled by the configuration passed to the plugin. For example, loading the 'vim' plugin in Atom will immediately change the behavior of the editor, as well as providing various functions that can be manually invoked by the user. Similarly installing a Chrome plugin may change the behavior of Chrome, and may also provide controls the user can interact with.\nTasks sound more like the specific resources Intern supports, like reporters and interfaces; something you'd register to use later. Could you provide any specific examples of what functionality you'd like to package into a plugin and how that functionality would be broken down between \"plugin\" and \"task\"?\n. > Does this mean that there's no upgrade path for users with Intern 3?\nAt the moment, no, but that's a good point. So, lets say that functional tests will use whatever loader is being used for the Node environment (loader or nodeLoader).\n\nAs a user (or a plugin writer) how can I ensure that the plugin only runs once when using the webdriver either before unit tests or before webdriver starts?\n\nPlugins will be loaded once for an executor when that executor is started. To do things at the beginning of unit tests or remote tests, a plugin should react to new sessions. The current way to do that (in Intern 3 or 4) is to listen for suiteStart events, and take action if the suite doesn't have a parent (which means it's a session suite).\n\n99% of what a vim, SystemJS, Chrome, or Atom plugin does is attach listeners or add capabilities that can later be called (via button press or action).\n\nThat's what I'm assuming Intern plugins will do as well, hook events and potentially provide functions or resources that can be used in tests. I'm not sure how Grunt's concept of \"tasks\" fits in with Intern, because Intern isn't a task runner; it only has one flow of operations (load tests, run tests). Possibly we're just differing on terminology (where \"task\" == \"exported function\")? . > As a user, I want to be able to upgrade directly from Intern 3 to Intern 4 with a minimal amount of effort. I would prefer only needing to write a new config.json and include a plugin.\nThis is definitely a goal, but it hasn't yet been a priority (I've been trying to nail down the API before writing a compatibility layer/plugin).\n\nAs a user, I may want to install a plugin that provides functionality that can be executed multiple times and can be passed different options.\n\nThis is starting to look like it may be outside the scope of Intern. I think it's reasonable for a plugin to be able to expose functions for use in suites and tests, but having Intern manage a bunch of generic high-level tasks like starting up docker containers seems philosophically like the kind of thing that should go in a task runner, or a custom runner script, especially when we get into things like inter-task dependencies. Maybe. I'll have to think more about that one.\n\nAs a user, I want to be able to use AMD as my module loader in node (because I have a number of tests written for Intern 3), but now want to use a SystemJS loader in unit tests in the browser. I want to be able to define this in the config without needing to write a custom loader.js file.\n\nThis is how Intern 4 currently works.\n\nI've been thinking about these two packages and wondering what makes them different from a plugin. Is there something that LeadFoot or DigDug do that we cannot reasonably do as a plugin? Are plugins missing functionality as a result?\n\nFrom the individual project side, Dig Dug and Leadfoot are meant to be usable by any project, not just Intern, so they shouldn't have any explicit ties to Intern. From Intern's side, Dig Dug and Leadfoot provide core WebDriver functionality, so they're not something that a user should need to explicitly include in every project. Leadfoot is also fairly tightly bound to the WebDriver startup and management process. (A user can still use a different WebDriver in tests.)\nThat's not to say we couldn't restructure them as plugins, although I'd be more inclined to handle them like loaders currently are rather than as general purpose plugins. That would certainly be useful if we wanted to make those components more easily swappable with something else. Intern would just need \"WebDriver\" and \"WebDriver Tunnel\" resource interfaces then plugin wrappers would need to be written for Leadfoot and Dig Dug. Doing so wouldn't affect the basic Intern 4 API, though, so we could look into this more for a future update.\nI'm not really sure what is meant by \"Are plugins missing functionality as a result?\".\n\nWhat does the current, proposed WebDriver lifecycle look like?\n\nIt looks pretty much like what you're describing.\nAll executors follow the same lifecycle:\n\nResolve config\nLoad plugins\n'beforeRun'\nLoad suites, using the external loader if one was specified\nRun\n'afterRun'\n\nRemote executors are run as suites of the local Node executor using the RemoteSuite class. For example, based on the configured environments, the local executor may end up with a RemoteSuite named \"chrome - Windows 7\". When this suite is run, it starts up a remote session, runs it, and collects coverage data. As the remote suite runs, its events are forwarded back to the local executor and made available for any local listeners. A Node executor will run any local suites, then run each of the remote suites. The run process looks like:\n\n[Node] Run unit tests\n[Node] If no environments or no browser-compatible suites, goto 8\n[Node] Start remote session Remote for next environment\n[Remote] Executor startup\n[Remote] Run unit tests\n[Node] If functional tests, run functional tests for Remote\n[Node] If more environments, goto 2\n[Node] Done.\n\nCurrently a single config is shared by all executors. This is intentional, because in the past that's been the desired behavior -- the same unit tests with the same basic config are run in whatever environment you're running Intern in. If some tests were sensitive to their environment, users would use something like dojo/has to load only compatible tests. The goal wasn't to have Intern use entirely different lifecycles in Node and the browser.\nThe current config format does allow for this use case, though, via the browser* and node* properties. A user can use the basic suites, loader, etc. to have the same setup in all environments, or they can provide environment-specific options (e.g., browserSuites, nodeLoader). This handles the case where the user wants to have fully separate Node and browser setups as well as the case where only one property, such as the loader, should differ between the two environments.. Merged in 9a60c7e122b70491aeb7425921fa0847dae7210d, thanks!. A basic plugin API was added in c255624. The preload property has been replaced with plugins. Plugins may be simple scripts, like existing preload scripts, or they may use the registerPlugin API, which allows for configuration and async initialization.\nAs with loader and suites, there are specialized browserPlugins and nodePlugins properties.. This did turn out to improve the usage consistency of Intern. Basically, when called from the command line, there is a single intern script that always behaves the same based on whatever configuration is given it (no more separate intern vs intern webdriver).\nIf a config contains environments and webdriver-compatible tests, sessions will be created. If not, only unit tests will be run. To prevent webdriver tests from running in a config that would normally run them, a user can pass environments= on the command line, or can create a child config that enables or disables webdriver tests (see #741).. Closed with commit 1c1b99b. The only missing update was for a fix to the Pretty reporter statistics.. Could you post a test project somewhere that reproduces the issue?. A more worthwhile goal might be to provide a way to migrate an Intern 3 app to Intern 4 rather than just being able to run Intern 3 projects with Intern 4 since Intern 3 isn't going away any time soon.. Intern 4 should detect an Intern 3 project and provide instructions about how to migrate to Intern 4, such as suggesting the user install theintern/3to4 (or whatever it's called) and run it. The conversion process should automatically do what it can, and provide as much useful information as possible for things it can't automatically convert.. WIP is at https://github.com/jason0x43/intern-3to4. I added a simple conversion script that loads an Intern 3 config and converts it to an Intern 4 JSON file (at a very basic level -- still more to do here).. More details:\n\nThe 3to4 package will have both the config convert and compatibility modules\nThe converter will convert an intern 3 imperative config to an intern 4 intern.json, which will effectively denote that the project is now an Intern 4 project\nThe conversion will add loader mappings that remap the 'intern' package to proxies in the 3to4 package. This will allow imports like intern!object to work.. Progress...\n\nThe compat package can now convert the config and run unit tests for a simple Intern 3 project. Browser tests don't work yet due to some pathing issues.. No external loader is needed for functional tests, or when running unit tests in Node, assuming your suites are all CJS modules.. @bryanforbes did some work on this a while back, but I'm not sure what the current status is.. Much of the content from the guide has been integrated into the repo docs. Things that still need some work:\n\nConfiguration -- the configuration section is still thin (not all the properties described in the guide have descriptions in the repo docs, and the ones that do aren't always as detailed). \nCustomization -- this isn't in the repo docs yet\nAPI (\"Internals\" in the guide) -- the Suite and Test APIs could use more fleshing out\nHow To (\"FAQ\" in the guide) -- the FAQ questions should probably end up in \"How To\"\nRunning -- The \"Getting Results\" section in the guide, which is focused on reporters, could go here, or it could be a standalone page. The Continuous Integration section could go here. The guide also has a section on Gulp which should go here.. Support has been added in bf22ff5. A config file may now have a configs argument that is an object mapping config names to Config objects.\n\nA child config may be selected by appending @name to a config value. For example, if intern.json contains child configs named ci and browser, the user could select one with config=intern.json@ci (or just config=@ci when using the default intern.json).\nWhen a child config is selected, its values are shallowly merged with the containing config, and the result is used as the executor config.. Intern 4 registers handlers for unhandled promise rejections and uncaught errors and emits an error event. This doesn't cause individual tests to fail, but it does at least let the user know something weird happened.. Ironically enough, the window/rect check was added because calling window/$0/size in a Firefox 53 session will completely hang it (in Sauce or local Selenium). At least for local Selenium and BrowserStack, doing a window/rect test merely gets an unknown command error rather than causing a complete failure. In any case, though, both older and newer Firefox should work on Sauce; I'll look into it.\nNote that Sauce Labs does, indeed, support window/rect when using a Firefox 53 session (which defaults to Selenium 3.4.0 and an unspecified version of geckodriver, apparently 0.16.0), and trying to use window/size instead of window/rect will break Firefox 53 sessions.. This should be fixed with Leadfoot 1.7.3 (at least, FF 33 and 55, and IE9-11, work properly on Sauce, BrowserStack, and TestingBot).. We care, there just hasn't been a lot of time lately to look into this. :)\n@ajc24's solution of manually setting this.remote.session.capabilities.brokenMouseEvents = true; is the way to go for now. That flag should be automatically set by Leadfoot (Intern's WebDriver library) automatically for Firefox 49+, unless feature tests have been disabled by setting fixSessionCapabilities to false.. Try removing your ~/.npm directory and reinstalling. I experienced a similar issue with a different package just after upgrading to npm 5, and clearing the cache and re-running npm install fixed it. The new cache structure is incompatible with the old, and npm 5 doesn't seem to behave well with bits of the old cache hanging around.. Did clearing the npm cache work, or is this still an issue?. There's this now: https://github.com/theintern/intern/blob/master/docs/how_to.md#run-intern-in-my-own-test-page-in-a-browser.. I believe this has been addressed, but feel free to reopen if not.. Finished in fbdeea3a7beefc89be08454d215276a76471c899. Moved to theintern/intern-a11y#1. Moved to theintern/intern-visual#10. Good catch! I made a couple minor changes and merged this in 20ccd155.. The problem is that the test is defined using an arrow function, so it can't access this.remote. Use a regular function statement or method definition:\njs\n'basic test'() {\n  console.log('##', this.remote); // undefined\n  return this.remote.get('http://localhost:3000');\n}. Improved support for arrow functions was added in 4.0.0-alpha.6. Tests are now passed the test object as the first parameter.\njs\n'basic test': (test) => {\n    // use test.remote\n}. Try setting fixSessionCapabilities to false.\njs\nenvironments: [\n  {\n    browserName: 'chrome',\n    chromeOptions: { args: [ 'headless', 'disable-gpu' ] },\n    fixSessionCapabilities: false\n  }\n]\nIt looks like some of Leadfoot's feature tests aren't playing well with headless Chrome.. It does work (even feature tests work now). I added a section to the How To doc.. Hmmm...it seems to be up now. Possibly just a github.io fluke.. Ah, it's not. I see.. Fixed in https://github.com/theintern/intern/commit/8c026b9e2c775e77fd16d2b968dbb7225ad22a44. Thanks!. INTERN_ARGS is actually just a way to provide normal Intern arguments through an environment variable rather than a way for Intern to deal with environment variables in general.\nThat said, you should be able to load node_modules/dotenv/config as a plugin (in plugins, or node.plugins if your config is also used by browser tests):\njs\n{\n  \"plugins\": \"node_modules/dotenv/config\"\n}. The tunnel classes actually have their own support for environment variables (they're the only things where that generally comes up).. Is there another use case for this besides the tunnel variables? Otherwise I think we can close it for now.. @nicojs Yes, they just need some cleanup and tests to go from the single files in Intern to more complete type sets for DT.. Fixed by d3f8b20. Intern could use a coverage (or maybe instrument) property to indicate which files should be instrumented. It would follow the standard array-of-globs format commonly used for resources, e.g.\ninstrument: [\n    'app/src/**/*.js',\n    '!app/src/**/*-spec.js'\n]. One potential issue is: what will the user be specifying in instrument, the original sources or built files? The current assumption is that it's the built files; these are the paths that Intern will see in its Node VM hooks. If we want the user to be able to specify the original sources, Intern will need to be able to identify the original source corresponding to the built files that it will end up instrumenting.. #769 may have some bearing on this -- assuming we use something like https://github.com/webpack-contrib/istanbul-instrumenter-loader, what does it need as input for a TS workflow?. An example is in https://github.com/theintern/intern-tutorial/tree/completed. I extracted the loader into a standalone project at https://github.com/jason0x43/istanbul-loader. We can flesh that out and then move it under @theintern.. The loader is now in https://github.com/theintern/istanbul-loader. A beta is available on npm at @theintern/istanbul-loader@next. Usage with bundlers (at least webpack) is now something like this (assuming the user is running tests in a browser using webdriver):\n\nBuild a bundle of tests + app code. If code coverage is desired, use https://github.com/theintern/istanbul-loader.\nAdd the bundle in to browser.suites lists in intern.json\nEnsure a tunnel and environment are set in intern.json\nRun intern\n\nNothing special is needed to load the tests since they'll just register on the global executor. Istanbul-loader manages bundle instrumentation and source mapping.. With istanbul-loader and an example workflow, this is good enough for now.. This was fixed in https://github.com/theintern/intern/commit/1236a9af6de89229b740662397ea2c5628b062f7, which I did before seeing this PR (d'oh).. Try installing with npm 5.3.0. At least npm 5.2.0 had a package dedupe issue that would cause it to leave multiple copies of @dojo/shim in node_modules, which would cause the 'es6-symbol' issue you're seeing.. Basic watch functionality was added to the cli in https://github.com/theintern/cli/issues/11. Tests are watched automatically, and app files are specified by the user.. Fixed in 67b76b7 (in that the failures are no longer silent).. Merged in 694a247d4eb08acde64c6b57f76c159a8d0006fb. Yes, currently it just refers to running the same tests in different browsers at the same time. It sounds like you\u2019re interested in having a test runner partition a test set and run different groups on different instances of th same browser at the same time?. That\u2019s been in the idea bin for a while (#391, #546), but I don\u2019t believe anyone\u2019s spent much time on it yet. It\u2019s certainly something we\u2019d like to support. I also created #780; if we develop a solution for WebDriver tests, the same solution might as well apply to Node.. Closing this in favor of #546 . As an initial step, \"node\" will become an entry in the environments list. If the user doesn't provide any environments, Node will be assumed. If they do, only those environments will be tested.. The configuration aspect of this issue was done in fac9bf7. The remaining has been split off into #803.. Some thoughts:\n\nSince reference sharing is an issue, we may want to:\nduplicate the event data for every handler we call in emit (easy, but not the most efficient thing)\nrequire coverage data to be duplicated before merging rather than modifying the data in the executor's 'coverage' listener (more efficient, but you have to remember)\nWe should consider moving initial coverage generation to some point after testing (maybe after unit tests) for efficiency. Right now we spend a significant amount of time before testing even starts generating initial coverage data, then we're going to do it again for any files loaded by suites. We should only generate initial data for files that aren't loaded by suites (i.e., that don't have any coverage after testing is finished).. Also, rather than having Node's listener merge incoming data with initial coverage, we may want to just have the code that generates initial coverage emit 'coverage' events with that data.. The instrumenter will also need to be configured to handle ES modules if code is being served through Intern's server.. The current fix doesn't assume file extensions or rely on any special server behavior. Users can set instrumenterOptions: { esModules: true } to have Intern instrument ESMs, and can use tsconfig path mappings to allow the use of js extensions (e.g. import { something } from './module.js') in TypeScript.. False alarm.. Good catch! I moved this over to the Leadfoot issue tracker: https://github.com/theintern/leadfoot/issues/122. Lucky me for choosing the same character that's used to denote npm org packages. In the long run we should probably choose a different character or support escaping.. Intern may also need to take the path of the intern.json file itself into account. This could allow it to load modules relative to the config, which would be relevant if the config were itself contained in a node module that had a nested node_modules directory.\n\nproject\n    node_modules/\n        tester/\n            intern.json        <--- requires 'test-extras'\n            node_modules/\n                test-extras/. Resolved by 86e20c95d5cdb58c0f4148e941721d0349510cd0. Arrays can be passed as Grunt options, although the example above doesn't appear to contain any arrays. Passing an array option might look like:\njs\ngrunt.initConfig({\n    intern: {\n        options: {\n            suites: [ 'tests/unit/a', 'tests/unit/b' ]\n        }\n    }\n});\nGrunt options can be anything you could pass to Intern on the command line using property-value format. Internally, that's exactly what happens -- arguments are converted to property=value format and passed as arguments to a new Intern process. Arrays are converted to multiple arguments; for example, the suites property above would be converted to the two arguments suites=tests/unit/a and suites=tests/unit/b (this is how they would be specified on the command line).\nAn example gruntfile is available in the intern-examples repo.. Those appear to be more like test fixtures than arguments. Intern arguments are generally intended to control the operation of Intern itself. If your test needs configuration data, it's probably easiest to just store it in an external module and load that as a dependency in your tests.\nI'm going to close this since it's really more of a usage question than an issue. If you have further questions, check out the Gitter room (gitter.im/theintern/intern), or post them to Stack Overflow with the intern tag.. Correction: it doesn't ignore the tests, it treats the lifecycle methods as tests. The current logic used to identify an object suite descriptor is the presents of a 'tests' property with an object value. If a 'tests' property is present, the descriptor is assumed to have tests and lifecycle methods. If a 'tests' property is not present, everything is assumed to be a test.. This is resolved in 9f2c293. Since this isn't really an error case (the whole idea behind adding the tests property to the object interface was to reduce the number of reserved property names), the executor just emits log messages indicating that tests are being created with lifecycle method names. These aren't normally visible, but are displayed by the default reporter when the debug option is set.. Would this point to a JSON file or to a JS module? Assuming it's a JSON file, is the idea that Intern would load and parse the JSON file and pass it in as the 'options' value?. After some offline discussion, it sounds like this would be satisfied by a script loaded via plugins.. It actually does implicitly serve index.html, but it only works properly with /__intern/, not /node_modules/intern/.. It looks like this may be due to Intern failing or being shut down early locally. BrowserStack shows sessions as completed unless they're marked as failing, so if Intern can't communicate with the remote to fail the test for some reason, it looks like it passed.. Thanks for your interest! Could you rework this against the master branch? (The changes should be pretty similar there.) We'd prefer to put new features in the Intern 4 code, at least for now.. As far as the link styling goes, we can leave that at the default for now.. I like where this is going. Some thoughts:\n\nUse suites instead of grep (or both suites and grep if a specific test is being rerun) so that the only result in the re-run report will be the suite the user selected.\nAllow the location to be passed into the reporter, like the document property. Add it to HtmlProperties and make it a reporter property, then move createLinkNode and getFullName into Html as methods, or allow the location to be passed into createLinkNode. This will improve testability.. Also, the 'skipped' icon is rendering fine for me using Chrome on a Mac. Is there a particular browser you're seeing the issue with?. Assuming you want to use the same createLocation code in the browser and in Node, you don't need to deal with the plugin system, just do import { createLocation } from '../../../support/unit/mocks';. The setup used for DOM documents involves jsdom, and is a bit more complex than that to keep Intern from trying to load jsdom in browsers (or use the global document in Node).. So, how's this going? From the last CI error, it looks like the self tests are just missing a few commas.. You could aspect document.createElement for the reporter's document, and verify whether the expected elements were created or not, maybe something like:\n\n```js\nimport { after } from '@dojo/core/aspect';\n// ...\ntest() {\n    let nodes: HTMLElement[] = [];\n    after(reporter.document, 'createElement', (returnValue: any, args: IArguments) => {\n        nodes.push(returnValue);\n        return returnValue;\n    });\n// do test\n\n// make assertions about created nodes\n\n}\n``. Hah, good timing, I was just reviewing it.. I made a couple minor changes (updated the createLinkNode method to use@dojo/core/UrlSearchParams` and styled the URLs to use the text colors). Thanks for your contribution!. While Intern does support Node 4, it actually needs npm 3+ to properly install all of its dependencies. The error you're seeing is specifically due to an incompatibility between how Dojo 2 beta packages reference each other and npm 2.. That should definitely be noted in the compatibility info, though, so thanks for pointing that out!. Not directly. The issue is with how Dojo, one of Intern's core dependencies, manages its beta versions (https://github.com/dojo/meta/issues/204), so the problematic behavior isn't under Intern's control. The issue should be resolved when Dojo starts using actual version numbers for its dependencies, either with the next beta or the final release. Dojo does state npm 3+ as a requirement, though, so there is no guarantee that it will work properly with npm 2 even then.\nFor what it's worth, npm is separate from Node, so it's simple (and recommended by the npm maintainers) to update it.. Merged in def6346. Merged in 2ce94a2. Hmmmm...that page already says something to that effect:\n\nThis command will cause Intern to start a static server on the port set by serverPort. The main utility offered by this server over any other static server is that it allows glob expressions in the suites list to be resolved.\n\nWe could call it out a bit better, and update the suites config property documentation to say something about that.\nNote that this isn\u2019t new behavior \u2014 glob resolution from the browser client has always required that Intern\u2019s own static server be used.. That could cause problems if the user has an index.html at the project root. Browsing to just /__intern/ will work, though, and @theintern/cli can automatically open a browser when you start the server. We could possibly come up with something shorter than __intern.. Starting intern in serveOnly mode now shows the target address for the browser client:\n```\nListening on localhost:9000 (ws 9001)\nTo use the browser client, browse to\nhttp://localhost:9000/__intern/\n```. I'm going to close this for now. If someone has any new info we can re-open it, but this seems like it could cause confusion down the road since it would make Intern's server behave differently than other static servers at a basic level.. Intern 4 doesn't currently support IE 9 and hasn't been tested with it. Aside from the console issue, there's an arrow function in the browser client, and it looks like the xhr module from @dojo/core/request may have some issues with IE 9 as well. That's not to say we can't improve IE 9 functionality but it will likely involve some upstream changes as well as updates to Intern itself.. Now that I think about it, I'm kind of surprised that arrow function hasn't been more of a problem.... True. I'll mention the lack of IE9 support.. Good catch, thanks!\nRegarding the Firefox loader error, where were you seeing that? (i.e., what config, what HTML file, etc.). Intern has a programmatic API that seems like it should work with your TestRunner adapter. We have a simple how to section in the docs on using the programmatic API. The included grunt task is another example of using this interface.. Closing this since it should be resolved with the existing API. Feel free to re-open if that's not sufficient.. > ...the mix of Intern 3 and Intern 4 tutorials and documentation between the GitHub readme and the new manual\nThere shouldn't be any mix of Intern 3 and 4 material in the GitHub readme and manual -- it should all be Intern 4 at this point. (In fact, the new manual is just the GitHub documentation in a snazzier format.) If you can point out anything specific, though, we'll update it.\n\nHow about a tutorial that does not use TypeScript, SystemJS, Concurrently, CPX, and TSLib, and which uses only the programmatic interface Dylan Schiemann talked about in his LinkedIn post?\n\nYeah, there's a lot going on in that tutorial; we were trying to show a reasonably simple setup that still used enough tooling to be interesting. Ah, JavaScript development today.\nIn any case, we can come up with something simpler. What are you looking for? We have some documentation on using the programmatic API, and on configuring loaders (nothing specific on writing custom loader scripts yet). Some of the examples that have been updated for Intern 4, like the dojo example, might also be useful.. I actually fixed a similar issue with some of the other reporters fairly recently, so this won't be too bad. The problem is just that Intern's reporters have traditionally been focused on failures; if a test didn't fail, it was assumed to have passed. Luckily we have enough info to determined whether it passed or didn't run.. The Browser executor currently assumes the project root is / unless it's told otherwise because it it can be difficult to determine what the project root is from the current browser path. However, it could probably handle the majority of cases by guessing the basePath to be the parent of /node_modules/intern (assuming that's a path component).. @kitsonk mentioned this offline, and it sounds like a good starting point: how about we assume the location of intern.json (when we know what it is) is the project root?\n\nThe location of the config file will either be provided by the user, or will be assumed to be intern.json in a standard location (the parent of node_modules/intern in a browser environment, or process.cwd in Node).\nOnce we've loaded the config file, it's containing path is the initial basePath.\nIf the loaded config contains an absolute basePath value, that value will become the new basePath.\nIf the loaded config contains a relative basePath, that new value will be resolved relative to the config file to create the new basePath.\n\nIf this seems reasonable we can use this logic for both the browser and Node, which would provide consistency between the two environments.. Resolved in https://github.com/theintern/intern/commit/f307a8a062927b9c2527b6bcf7ec66c615431a60. These two properties (\"types\" in tsconfig.json vs \"types\" in package.json) serve two different purposes. The one in package.json tells TS where to find the main typings for our package. Intern handles that implicitly by putting them in index.d.ts. The \"types\" in tsconfig.json tells TS to automatically load those types when building. You could, instead, have an import 'intern'; in one of your source files, but the tsconfig property seems cleaner.. There is a functionalBaseUrl config property. This sets the base URL that will be used for any relative addresses in functional tests.. Closing this since there hasn't been any update. Feel free to reopen if the issue isn't resolved with functionalBaseUrl.. So, for example, if the user doesn't provide a value for serverUrl but specifies serverPort=9002, Intern should resolve the serverUrl config property to http://localhost:9002/.. Hmmm...it looks like the isTask function used in Test isn't discriminating enough. It was initially intended to differentiate Promises from Tasks in a fashion similar to dojo/core/async's own isTask, but more safely (dojo's method causes problems with chai-as-promised). Dojo 1 Deferreds have a cancel method, which makes isTask see them as Tasks, but they don't have a finally method, which means they're not actually compatible with Tasks.\nThis should be a simple enough fix.. Intern now understands a functionalBasePath config property that sets the base (root) path that the server will serve from during functional tests.. Oops, not quite there yet.... This is a bit more complicated than I had initially thought. My first solution was just to change the base path of the server during remote tests. However, this causes problems when multiple remote sessions are active because all remote sessions are using the same server. Some sessions may be running functional tests while others are loading unit tests, and that's going to break if we change the server's base path.\nWe'll probably need to spin up a secondary server with a different base path, which will need some internal rearchitecting. The remote in functional tests can be bound to this secondary server. This means we'll also need a second port option.. That code shouldn't actually be coming into play for Chrome; it's intended as a fallback for browsers that don't support native events via Webdriver. We'll look into that.\npressKeys takes a string of characters that should be pressed. To press the space key, send a space, like pressKeys(' ') or pressKeys(keys.SPACE) (if you've imported the keys module).. Yes, we can definitely add some examples (I added an issue to track this in the Leadfoot repo).\nThe current docs for pressKeys, as well as the other WebDriver functionality, are in the Leadfoot docs (Leadfoot is Intern's WebDriver interface). For pressKeys, see https://theintern.io/docs.html#Leadfoot/2/api/Command/presskeys.. @ajc24 See https://github.com/theintern/leadfoot/issues/129#issuecomment-348997790. Please try to keep comments relevant to the issue.. When runInSync is enabled and a Promise is returned in an event handler, Intern should wait for the Promise to resolve before continuing execution. This should work both locally and in remote executors. This behavior appears to be broken at least for remote executors (like, if a Promise is returned in a testEnd event handler on the host intern, remote executors aren't waiting for the event handler to finish before running more tests).. The proper name for MS Edge for WebDriver testing is \"MicrosoftEdge\". Even with that, though, getting Edge working with Intern locally was a multi-step process. We just published an update to the Dig Dug library (which is what Intern uses to manage Selenium) that simplifies the process a bit.\nInstall a fresh copy of intern@latest, and you should end up with a @theintern/digdug dependency of 2.0.2. Then add the following to your Intern config:\n{\n  \"environments\": [{\"browserName:\"MicrosoftEdge\"}],\n  \"tunnelOptions\": {\n    \"drivers\":[{\"name\":\"edge\"}]\n  }\n}\nAt that point, you should be good to go.. Closing this since it should be resolved. Feel free to reopen if there's still an issue.. So...what's happening there is kind of interesting. Config processing happens in 2 stages: in the first part, some code in common/util.ts loads the config and any parent configs, mixing options together along the way. This code isn't particularly smart and doesn't validate any options, it just mixes property values. It breaks when you have 'capabilities+' in both a parent and a child, because it treats 'capabilities+' as a name, so the value from a child config will overwrite the value of a parent that also uses 'capablities+'. (The assumption is that a base config would use 'capabilities' and a child would use 'capabilities+' to extend it.). The config processing logic has been moved out of the executors, allowing it to work during initial loading of config files.. Hmmm...not happy with that, and there appear to be other merging issues that can crop up with complex setups.. Never mind. Happy enough.. Also add something about reporters config to the 3-to-4 changes page.. Good catch, thanks!. Fixed in 13aa633 (the commit message referenced the wrong issue number). Hi! As the \"New Issue\" instructions mention, we'd really like to keep this tracker focused on bug reports or feature requests. General usage questions should be directed to Stack Overflow (using the 'intern' keyword), or to our gitter channel.\nThat said, the two most common ways to do this are 1) set the find timeout to something very short, search for the element, and catch a \"not found\" error, or 2) set the find timeout to something short and do a \"findAll\", then check that the resulting array has zero length (like your findElements(..).size() example).\njs\nthis.remote\n    .get('page.html')\n    .setFindTimeout(10)\n    .findByCssSelector('.errorDiv')\n    .then(() => {\n        throw new Error('element should not exist');\n    }, () => {})\n    .setFindTimeout(5000)\n    // continue\nor\njs\nthis.remote\n    .get('page.html')\n    .setFindTimeout(10)\n    .findAllByCssSelector('.errorDiv')\n    .then(elements => {\n        assert.lengthOf(elements, 0);\n    })\n    .setFindTimeout(5000)\n    // continue. There's also https://github.com/devpaul/intern-json-schema. Hmmm...I wonder if there's a decent vim plugin for using JSON schemas.... In addition to having a JSON schema, intern should also use something like avs to validate config files.. The above results are from the 'runner' reporter.. Merged in https://github.com/theintern/intern/commit/2bfd2d11e8a0e988151fba59bc5d74d7ec6b6d1f. This issue doesn't happen when installing intern, but when trying to run it, specifically in the tutorial. I created https://github.com/theintern/intern-tutorial/issues/40 to track this.. Can you post a sample project somewhere that reproduces the issue?. Hmmm...the project doesn't appear to build. Running npm install followed by npm run build, I get a number of build errors:\n[0] node_modules/@types/node/index.d.ts(156,11): error TS2300: Duplicate identifier 'Buffer'.\n[0] node_modules/@types/node/index.d.ts(163,13): error TS2300: Duplicate identifier 'Buffer'.\n[0] node_modules/@types/node/index.d.ts(727,11): error TS2430: Interface 'NodeBuffer' incorrectly extends interface 'Uint8Array'.\n[0]   Types of property 'slice' are incompatible.\n[0]     Type '(start?: number, end?: number) => Buffer' is not assignable to type '(start?: number, end?: number) => Uint8Array'.\n[0]       Type 'Buffer' is not assignable to type 'Uint8Array'.\n[0]         Property '[Symbol.toStringTag]' is missing in type 'Buffer'.\n.... Closing this issue in favor of the Stack Overflow question (which is the right place to ask this kind of question). It looks like the recent updates to make configuration merging more consistent are causing the default 'runner' reporter to be removed in bin/intern.\nA temporary fix is to explicitly add the 'runner' reporter to your config.. Need more integration tests, it seems.... When the dojo loader is used, its baseUrl option is set to the the user-supplied baseUrl or to the currently configured basePath, so there should be no need to use a relative path from the loader.\nYou can use absolute paths, or you can use MIDs for suites instead of file paths, so that Dojo's normal module resolution logic is used:\njs\n\"suites\": [ \"tests/unit/main\" ],\n\"loader\": {\n    \"script\": \"dojo\",\n    \"options\": {\n        \"packages\": [ { \"name\": \"myapp\", \"location\": \"src\" } ]\n    }\n}. You'll also need to configure an environment in which to run functional tests (e.g., { environments: 'chrome' }).. I created #861 to make this situation a bit more apparent.. That repo is gone, but we could publish a new package that uses the dojo-2alpha npm package.\nJust out of curiosity, is there a reason you're using Intern 2 vs Intern 3?. Ah, the dangers of relying on non-organizational GitHub dependencies. Luckily, we managed to scrounge up a copy of the missing one and published it to npm. Intern 2.2.3 is out now and uses the new dependency.. Have you defined the app package in your loaderOptions? It looks like app/dist/tests/ was resolved to /node_modules/fa-internjs-runner/app/dist/tests.. Define a baseUrl in loaderOptions, like:\nloaderOptions: {\n    baseUrl: '../../',\n    ...\n}. The original issue was fixed in https://github.com/theintern/intern/commit/f8ad1c1d435641702ae20d769823d14382e78b64. Regarding the grunt question, you could use a plugin to load babel or polyfills in the browser before tests run. Just load the polyfill script as a plugin:\n{\n    \"browser\": {\n        \"plugins\": \"/apps/libs/babel-polyfill/dist/polyfill.min.js\"\n    }\n}\nThat will cause the browser executor to script-inject the polyfill script into the page before testing starts.. Ah, yes. In that case, you could use a setup function in the config, maybe something like the following:\n```\n// intern.js\ndefine(..., function () {\n  // ...\nsetup: function () {\n    return new Promise(function (resolve) {\n      require([ 'apps/libs/babel-polyfill/dist/polyfill.min.js' ], resolve);\n    });\n  }\n});\n``. It looks like this issue may actually be due to a difference in howbasePathis processed between the config file and args. For example, using a config of \"/foo/bar/intern.json\" and settingbasePathin the config file to \"../../\", the resultingconfig.basePathis \"/\". However, if basePath is set to \"../../\" using a query arg, the resultingconfig.basePathis \"\", which is going to be problematic.. Fixed in b3b2f92. When intern is installed, dojo will be symlinked from its original location tonode_modules/intern/dojo. In the past this wasnode_modules/dojo, now it'snode_modules/@theintern/dojo`. \nUnfortunately, the fixdeps logic assumes that @theintern/dojo was hoisted up to the main node_modules directory, which Node 4 apparently isn't doing. sigh. #351 was never merged, but even without that, you can't override the config used in client.html (at least not at the point Intern is loaded) without modifying client.html.\nThe two fixes for this problem are to 1) fix the fixdeps.js script to link dojo properly, or 2) use the link currently created by fixdeps.js and update all the references to 'node_modules/dojo' to use 'node_modules/@theintern/dojo'. I'd prefer to do the former, because it involves fewer modifications to the source, but I haven't had a chance to test it yet.. Intern 2 had been using a custom version of dojo hosted in a developer's personal GitHub account. This version of dojo called itself \"dojo\" in its package.json, so that's where npm would install it (node_modules/dojo or node_modules/intern/node_modules/dojo). That repository was recently removed, so we made a new copy of it and published it to the npm repo (to prevent this sort of issue in the future). Since this dojo isn't the real dojo, we didn't want to publish it as \"dojo\" in the npm registry, so it was published as @theintern/dojo.. Fixed in f8ad1c1. When you run tests locally, are you using the 'selenium' tunnel (the default), or just running them in Node?. Ah. I apparently didn't scroll over far enough in the original error message, because it does say unknown error: Chrome failed to start: crashed.. What version of Intern are you using?\nWould it be possible for anyone to post a sample project that reproduces the issue? I have so far been unable to reproduce it.. Possibly, although I think it's probably better in the long run to just use getPlugin. Originally there was a bit more functionality involved, but at this point the getInterface method is simply an alias for getPlugin, and it may be deprecated at some point in the future.. Thanks!. Thanks!. In general, unit test suites will run in all specified environments, and functional test suites will run only in Node. However, you're specifying the same set of suites (build/**/*.spec.js) for both suites and functionalSuites, which isn't a support config since the two types of tests will often not be compatible.. Functional tests work by driving a browser externally. Tests send commands to a WebDriver that tells a browser to do something, but they don't run in the browser. They don't have direct access to window or the DOM or any of the things you would normally see in a browser's JS environment.\nRunning unit tests in multiple environments is supported. As I said, though, by providing the same list of suites to both suites and functionalSuites you've entered, well, untested territory. Try revising your suites list to only contain unit tests, and your functionalSuites list to only contain functional suites.. And you're right, Intern could provide more useful errors in certain cases. It wouldn't be perfect, because Intern can't currently tell for certain whether a suite it's given is intended to be a functional or unit test suite, but it could cover some cases.. The issue is that Chrome 65 is no longer compatible with the version of chromedriver Intern (via Dig Dug) is downloading. A fix is in progress. For now, you can do the following:\n\nSet tunnelOptions\njs\n\"tunnelOptions\": {\n  \"drivers\": [\n    { \"name\": \"chrome\", \"version\": \"2.36\" }\n  ]\n}\nDelete any existing chromedriver in node_modules/@theintern/digdug/selenium-standalone. See https://github.com/theintern/digdug/issues/60 for some additional info. Note to self: We would need to bump both the Intern 3.x minor version and digdug 1.x minor versions since simply having digdug use newer webdriver versions could break functionality for other users of Intern 3.. This has been fixed in Intern 4.2 and Dig Dug 2.1.x. This is included in Intern 4.2.0.. The browser property describes the resources that will be loaded in a browser (any browser). Since functional suites don't run in browsers (they drive browsers, but don't run in them), it doesn't really make sense to specify them there.\n\nThe cleanest way to specify functional suites (or regular suites) that should run only for a specific environment is to use child configs:\njs\n{\n  \"configs\": {\n    \"chrome\": {\n      \"environments\": [ \"chrome\" ],\n      \"functionalSuites\": [ \"suites_that_should_run_in_chrome\" ]\n    },\n    \"firefox\": {\n      \"environments\": [ \"fierfox\" ],\n      \"functionalSuites\": [ \"suites_that_should_run_in_firefox\" ]\n    }\n  }\n}\nThen run intern like npx intern config=@chrome to run chrome tests.. Intern does use Selenium, and it may work with IE9, but we no longer support IE < 10.\nWe want to keep this issue tracker focused on issues and feature requests, so please ask any general questions about Intern on Stack Overflow (use the tag intern) or on our Gitter channel (https://gitter.im/theintern/intern).. Hmmm... That may require an update to the loader script API so that Intern can teardown the loaders when it finishes a run. That, or loader scripts can check for the existence of their loader during initialization and reuse or replace it (probably replace).. > ...the loader script is actually just loaded and executed only once.\nThat, I think, is the real issue. The first time Intern is run, the loader script is loaded and it registers a loader callback. The second time Intern is run in the same Node session, the loader script is required but it isn\u2019t actually re-loaded or evaluated since it\u2019s already cached by the Node loader, so its registration function isn\u2019t called the second time.\nThere are a couple ways to try to deal with this. One is for Intern to keep track of individual modules it loaded and then de-register them at the end of the session. This process could potentially be simplified a bit by adding a \u2018deregistration\u2019 function to the loader and plugin APIs that Intern could use to unload them after a run.\nAnother (and probably much easier in the long run) would be for Intern to load everything it needs to in a sandbox that could simply be discarded after a test run.. Actually, the simplest immediate solution would probably be to run intern in a subprocess rather than loading it into Grunt's context (which is what the Intern 3 grunt task did).. Apparently I need to switch back to GMail, because Inbox makes it way too easy to build up a backlog of messages.\nCould you verify what version of Leadfoot is in your install? This issue sounds like https://github.com/theintern/leadfoot/issues/125, and should have been addressed in Leadfoot 2.0.3 in December.. In reviewing your original post, I see that the capabilities object wasn't actually defined during Leadfoot initialization. That issue was fixed a bit more recently (https://github.com/theintern/leadfoot/issues/139), and was published in Leadfoot 2.1.0, which is used by default in Intern 4.2.0. Give that a try.. In general, the options specified in the Grunt config should take priority over the options specified in the base Intern config. Just out of curiosity, though, why does the sample Grunt config above declare it\u2019s own \u2018subset\u2019 config?. If your intern config defines child configs and grunt just needs to run one of those, it should only need to specify a 'config' option with the subtask name.\n{\n    intern: {\n        subset: {\n            config: '@subset'\n        }\n    }\n}\nOther values provided in the grunt config, such as it's own version of a child config, will overwrite values loaded from the base Intern config.\nI haven't had a chance to look into this yet, but if grunt isn't able to properly load child a config from an Intern config, that's a problem.\n\nIn general, the options specified in the Grunt config should take priority over the options specified in the base Intern config.\n\nMy comment here was just to point out that this PR effectively flips the priority of the config sources, making the Intern config file have priority over the options from Grunt.. I haven't had a chance to look into this, but it's likely due to the use of synthetic events in Firefox and Edge.. I'll try to take a look at this in the next couple of days. @GARMBoshouwers Are you using Edge locally, or via a remote testing service?. Interesting... I've been having trouble lately getting Edge to work locally.. Intern 4.2.0 now uses dojo 0.5.0.. I agree, this would be pretty nice. It's a feature we've been interested in for a while (#546, #779), but nothing has been implemented yet.\nSelenium tests are the exception. Intern already runs WebDriver tests in different browsers concurrently, up to maxConcurrency sessions.. > I first tried to extend environments > chromeOptions with a mobileEmulation parameter as a sibling of args. It did not work. I found the piece of information that identifies capabilities > goog:chromeOptions in an issue related to DockerSelenium.\nThis shouldn't be an issue because chromedriver continues to support both chromeOptions and goog:chromeOptions. (It's chromedriver that cares about that property rather than Selenium.) At least in my own tests, both work equally well with Selenium 3.11 and chromedriver 2.37 (the versions used by default with Intern 4.2.0).\nAn example in the docs would certainly be helpful, though. We might also consider emitting a deprecation message for 'chromeOptions' just to let people know they should switch at some point.. I added documentation to master, and created #903 for notifying users about switching to goog:chromeOptions. I can no longer reproduce this; closing for now.. Does this happen all the time or only with specific browsers or operating systems on BrowserStack? Are you behind a proxy?. > allow customizing the network timeout tolerance\nYou can customize the timeouts:\n\nfunctionalTimeouts allows you to set defaults for the initial connectTimeout (and the other functional test timeouts)\ndefaultTimeout allows you to configure the overall timeout applied to async tests\n\n\nIt'll be great if intern provides an internal retry to resolve network connection issues\n\nWe've been reluctant to provide an automatic retry because having to retry typically indicates a problem in the tests or a problem in the network. An actual fix would be to make the tests more robust (less timing-sensitive) or to resolve the network issue, whereas a retry feature is more of a band-aid. That's not to say we're totally against a general retry function, but we haven't seen any situations yet that couldn't be resolved in better ways.. > I'm talking about retrying that lower-level REST API call because my network can be spotty. Does that make sense?\nIt does make sense, and that definitely seems like it's worth exploring.. So, the connect ETIMEDOUT errors aren't actually related to Intern's connectTimeout. Intern's option controls how long Intern will wait for the initial incoming connection from a remote browser. You would only ever see that error once per session (\"Timed out waiting for remote to connect\"), and if it happened the session never would end before it even got started.\nThe connect ETIMEDOUT error is a low-level Node error emitted when Node can't make an outgoing connection to a remote address. In this case, Intern was trying to connect to the BrowserStack hub, and your local system simply wasn't able to connect for some reason (maybe their hub was overloaded and wasn't accepting connections). The error isn't related to any particular remote browser.\nThis is a good use case for low-level retries in Intern. There's already some of that happing on the remote side, because we've traditionally experienced more flakiness getting back to Intern from a remote than trying to reach a remote from Intern. I created https://github.com/theintern/intern/issues/910 to track this.. This is a general issue with webdriver. Newer versions of Firefox, Safari, and Chrome do partially restrict access to browsers being used for tests (for example, you may have noticed a banner in Chrome stating \"Chrome is being controlled by automated test software\"), but it's not perfect. User actions, such as moving a window or removing focus from it, can still affect tests.\nThe most reliable way to prevent user actions from breaking functional tests while still getting to monitor them is to run tests in a VM, either locally or using a cloud service such as BrowserStack.. A better implementation would be to do as suggested in #435 and host the report nodes in a container node rather than directly in document.body.. Tricky. So, the problem isn't with Intern but with Dig Dug, which is what actually manages the remote browsers. A longstanding issue with Dig Dug was that it would often leave webdriver processes running after a testing session because Selenium wasn't great about cleaning them up. It turns out that's what was allowing leaveRemoteOpen to work. The most recent versions of Dig Dug use a more aggressive kill routine when stopping tunnels; in addition to ensuring the webdriver processes are killed along with Selenium, this routine also kills the browser processes started by the webdrivers.. I added a somewhat less aggressive kill function to Dig Dug and that seems to be doing the trick. Assuming the tests pass, I'll release a new version.. This is fixed in https://github.com/theintern/digdug/commit/8cb1ed2db2ddb8313f6e69aa6f685a84b351f436 and is part of digdug 2.1.1.. The code used to process markdown for the website can't properly handle this case yet (a relative doc link in source code). I added an issue in the site generator repo (theintern/theintern.github.io#18).. A fix is in and will go out in the next bug fix release (next couple of days).. Good catch -- thanks!. That was a typo.. Merged in 7cbdf62. Thanks!. The current plan for running Intern in parallel is to use multiple node processes. Intern would start up a separate node process to run tests, much like it starts a browser to run tests now. This will allow for the same logic to manage tests in Node and browsers, and will provide isolation between parallel Node sessions.. Yeah, we have https://github.com/theintern/intern/issues/546 for sharding across multiple instances of a single environment and https://github.com/theintern/intern/issues/803 for running Node as a standard environment. Between the two of those we should end up with a pretty nice parallelization platform.. It's high in the queue, but I haven't had time to get to it yet.\nIn the meantime you might consider writing a custom reporter that will output test results in a structured format, like JSON. That will make result aggregation simpler.. This was resolved in https://github.com/theintern/digdug/commit/f63c738dd13749d59951074fecaaead7a4336cea, which was released in @theintern/digdug@2.1.2.. Thanks!. There was an issue with path matching on Windows that broke instrumentation. This was resolved in ee5d0968 and was included in 4.2.1.. The component tests at the beginning are normal -- those are feature tests Intern performs to determine the browser's capabilities.\nThe ESRCH error means that Node couldn't find the given process to kill, presumably because the process had already quit. Is this happening all the time? And only with a normal (non-headless) Chrome browser?. It seems like the dojo loader might be involved here, because the default (node) loader exits with an error, as expected.. Finally getting a chance to look at this... The problem is definitely specific to the dojo1 loader; the dojo2 and Node loaders don't exhibit the issue.. The issue is that the dojo1 loader doesn't report loading errors from the node loader. Intern's dojo loader script Promisifies the dojo loader, but since it can't detect loader errors in some circumstances, loader promises don't resolve.\nThe immediate fix is to configure dojo's timer API, which will timeout if a load doesn't complete in a given amount of time. For example:\njson\n\"loader\": {\n  \"script\": \"dojo\",\n  \"options\": {\n    \"has\": {\n      \"dojo-timeout-api\": true\n    },\n    \"waitSeconds\": 1\n  }\n}\nThe  has block enables the timeout API, and the waitSeconds property tells the loader how long to wait for a load to complete before timing out. In a Node environment, this can be quite short (like, a second).. I'll update the dojo loader to enable the timeout API by default, using the default timeout (15 seconds, which should cover both local and remote tests).. There is a context stack maintained for chained commands; this allows earlier commands to change the scope that later commands operate on, and also allows operations to work implicitly on the current context element(s).\njs\nthis.remote\n  .get(page)\n  // Find an outer element of interest\n  .findById('table-2')\n    // Look for all rows in the found table\n    .findAllByCssSelector('tr')\n      .then(rows => assert.length(rows, 10))\n      // Pop the array of table rows off the context stack\n      .end()\n    .findByCssSelector('tr:nth-child(3) td.label')\n      // Get the text of the current context element (the td.label)\n      .getVisibleText()\n      .then(text => assert.equal(text, 'some label'))\n      // Pop the td.label off the context stack\n      .end()\n  // Pop the #table-2 off the context stack\n  .end()\n  // other commands\nAlternatively you can use async/await for a non-chaining syntax:\njs\nconst page = await this.remote.get(page);\nconst table = await page.findById('table-2');\nconst rows = await table.findAllByCssSelector('tr');\nassert.length(rows, 10);\nconst td = await table.findByCssSelector('tr:nth-child(3) td.label');\nconst text = await td.getVisibleText();\nassert.equal(text, 'some label');\nAs @gitgrimbo says, documentation PRs are always welcome :). Resolved in aaac9d9. Did you verify that tslib was present? It's a top-level dependency of intern, so it should be available in node_modules. I've seen a couple of cases recently with npm 5.x where running npm install on packages (intern and others) resulted in a node_modules that didn't actually contain all the dependencies.. I've been able to reproduce this. Setting NODE_PATH doesn't affect it one way or the other. The issue seems to be that the test server can't find modules on Windows.. I tried this on a Windows 10 system with a couple different versions of node and npm, and the tests are loading and running properly:\n\nMade a new clone of Intern\nChecked out 4.2.2\nnpm install\nnpm run build\nnpm start\nOpen http://localhost:900/__intern/\n\nDid you verify that tslib is present in your node_modules?. This was merged in 9c6f275. I switched the version modifier to ~.. This was resolved by removing Intern's use of @dojo packages in a1e4b1f (v4.3.0). The docs could definitely use some improvement here.\nA list of the main events are in the Executor.Events API docs. There are runStart and runEnd events for all tests, testStart and testEnd for tests, and suiteStart and suiteEnd for suites. A suite event where the suite doesn't have a parent (i.e., it's a top-level session suite) denotes a session, like an instance of Intern running in a remote browser.. When I run the self tests on Windows with Node 6.11.5, I get this:\n```\n\u00d7 node - lib/middleware/instrument - instrumented file - successful (0s)\n    AssertionError: expected true to be false\n      at Test.successful [as test]  \n      at \n      at node_modules\\@dojo\\core\\async\\Task.ts:351:13\n      at handler  node_modules\\@dojo\\core\\async\\ExtensiblePromise.ts:229:15\n\u00d7 node - lib/middleware/instrument - instrumented file - caches code (0s)\n    AssertionError: expected true to be false\n      at Test.caches code [as test]  \n      at \n      at node_modules\\@dojo\\core\\async\\Task.ts:351:13\n      at handler  node_modules\\@dojo\\core\\async\\ExtensiblePromise.ts:229:15\n\u00d7 node - lib/middleware/instrument - instrumented file - server stopped - readFile (0s)\n    AssertionError: expected true to be false\n      at Test.readFile [as test]  \n      at \n      at node_modules\\@dojo\\core\\async\\Task.ts:351:13\n      at handler  node_modules\\@dojo\\core\\async\\ExtensiblePromise.ts:229:15\n\u00d7 node - lib/middleware/instrument - instrumented file - HEAD (0s)\n    AssertionError: expected true to be false\n      at Test.HEAD  \n      at \n      at node_modules\\@dojo\\core\\async\\Task.ts:351:13\n      at handler  node_modules\\@dojo\\core\\async\\ExtensiblePromise.ts:229:15\nTOTAL: tested 1 platforms, 547 passed, 4 failed\n```\nDoes this happen for you, too?. Merged in 20e935c (a couple months ago). This was resolved with a1e4b1ff. The issue is that node_modules/.bin/intern is a shell script, not JavaScript. This is how npm works on Windows with all packages, not just Intern. Unlike linux and Mac, the scripts in node_modules/.bin on Windows are shell scripts or CMD scripts that load package JavaScript modules rather than symlinks to JavaScript scripts. These shell scripts can't be loaded directly by node.\nInstead, use node --inspect-brk node_modules/intern/bin/intern.js.. Try @dojo/framework PR 125 (commit 1cb5a94dd4f20aa4d64797898460e2cae815b58).\nAlso, Intern isn't displaying an error when SeleniumTunnel fails to start due to an incompatible Java version.. To express the issue with the above PR, run npm run test:browserstack (with appropriate credentials).. It turns out the issue with the above PR is actually with the reporter used in @dojo/scripts, which has an error handler that doesn't report errors.\nI think Intern will start reporting errors by default, and will rely on a setting to disable default error reporting.. Or come up with a more definitive way of recording when errors are reported.. After further consideration, I'm going to leave the behavior as-is. If a user is simply adding custom reporting behavior, like logging messages to a database or something, the default reporter will report errors. If a user is disabling the default reporter and completely replacing it with something else, presumably they're intentionally creating a fully custom UI, in which case they'll need to ensure errors are reported as well as other messages.. Intern uses Selenium + WebDriver for it's functional tests, so you can certainly inject code. For your situation, you might do something like:\njs\n'test video'() {\n  return this.remote\n    .get('test page.html')\n    .executeAsync(done => {\n      const videoPlayer = document.getElementById('video-player-id');\n      videoPlayer.play();\n      const videoDuration = setInterval(function() {\n        if (videoPlayer.readyState > 0) {\n          var minutes = parseInt(videoPlayer.duration / 60, 10);\n          var seconds = videoPlayer.duration % 60;\n          clearInterval(i);\n          done();\n        }\n      }, 200);\n    });\n}\nIn this example, Intern opens the test page, injects its code, and waits for the injected code to finish (by calling the done function implicitly given to it). If the injected code doesn't return within a timeout (30 seconds by default), the test will fail.. Hmmm...problem 1: npm run build doesn't even work on windows because it uses cp.. Interesting. I guess node in git bash still comes back with Windows-style paths, then? (Not terribly relevant, just curious). Merged in 308018080a5a0d7846c18e26946df832dfb317f1. This was due to a bug in @theintern/common, and was fixed in v0.1.1.. It was a bugfix to one of Intern's dependencies, so if you reinstall Intern you should have it.. Hmmm...maybe I missed something while testing. I\u2019ll take another look. Just to make sure, were the dependencies for digdug and leadfoot deduped, so that there is only one installed version of common?. npm rm intern && npm install intern@latest. That will uninstall Intern and all its dependencies, and remove them from the package-lock file, then re-install them.. Ah ha! I think I found the issue. It wasn't a problem with the code this time, but with the built webpack bundle. webpack was adding polyfills for node builtins and was breaking some explicit type checks.. Update to 4.3.1. That brings in updated common, digdug, and leadfoot dependencies.. This was a bug in @theintern/common, and was fixed in 0.1.1. Probably the best way to attack this would be to evaluate grep as tests are added (i.e., don't add tests that don't match the grep expression) rather than as they're run.. For reference, apparently the issue is that core-js is particularly aggressive about when to apply its polyfill, overriding native Promise implementations when this may not be desirable (https://github.com/zloirock/core-js/issues/283).. promise-polyfill apparently isn't a great choice either -- it polyfills finally separately from it's standard Promise polyfill and can cause timing issues (such as finally resolving asynchronously for a canceled Task).. I noticed some issues with es6-promise as well. All of these promise polyfills seem to have subtle but annoying implementation differences.. Actually, it seems the latest issue isn't so much with es6-promise as it is with some weird native Promise behavior  in older versions of Firefox (< 35). Intern's polyfilling just needs to install a basically functional Promise implementation, so the issue with es6-promise not polyfilling finally shouldn't be a problem. Really, though, Intern would be better off skipping the whole polyfill business; it should import a Promise for itself (that could use the native version or a shim) and not pollute the global namespace.. Unfortunately that might end up being a significant change for downstream users, so...polyfilling for now.. I haven't seen any IE11 hangs yet, although I've seen IE10 hang on a selector test. Does it happen all the time, or only sometimes?. I'm closing this for now, but we can re-open it if the problem comes up again.. From some experimentation, both ant and maven (which generate the XML reports for junit tests) handle suite errors in a similar way -- they create a new testcase within the suite for the suite itself. So, if there's an error in a suite.before, you'd end up with\nxml\n<testsuite name=\"suiteName\">\n  <testcase name=\"suiteName\">\n    <error>...</error>\n  </testcase>\n</testsuite>\nNote that none of the testcases are present. When there's an error in a before (technically a @BeforeClass in junit), none of suite's tests are considered at all (they're not even marked ask skipped).\nIf there's an error in a suite.after, you'd get something like:\nxml\n<testsuite name=\"suiteName\">\n  <testcase name=\"test1\"/>\n  <testcase name=\"test2\"/>\n  <testcase name=\"suiteName\">\n    <error>...</error>\n  </testcase>\n</testsuite>\nAll the tests pass, but there was still an error in the suite.\n\nThis PR will update the test report to fail any tests which have not been skipped with the suite error.\n\nThere's a distinction between showing tests as failing and showing that an error occurred, and suite errors should not fail tests. I mean it's good to indicate than an error occurred; including the error element in a testcase does that. However, explicitly marking the test as \"failed\" via its status attribute seems less reasonable. (To be honest, I'm not sure where the status attribute came from; it's not in the JUnit XML reports produced by maven or ant.)\nOverall,  we should probably go the same route as maven and ant and show a suite error when there's a suite error, but not show results for tests that are skipped due to suite errors, and not mark tests as failed when they haven't explicitly failed.. I looked at this a bit last week and am still reviewing it. I like separation of suite lifecycle methods from the rest of the interface, but I also agree the the current handling of beforeEach and afterEach is suboptimal. Ideally we should report the error (but not a test failure) on a test-by-test basis. I'm still poking around at that to see if there's a decent way to do that without significant rearchitecting.. What if we did something like this? (Well, a blending of this and your PR.) I think it might allow us to associate lifecycle errors with tests without breaking existing code: https://github.com/theintern/intern/compare/report-suite-errors?expand=1\nI'm adding test-related lifecycle errors to a Test.suiteError property, and recording the name of the lifecycle method on the suite error. Reporters can inspect the suite error to determine if it was test or suite-related, and they can inspect tests when there's a suite error to determine whether the test was associated with a suite error.\n[23:33:24] ~/D/W/s/i/intern git:report-suite-errors \u276e npm --silent test suites=_tests/tests/unit/lib/Environment.js coverage= environments=node reporters=junit | xmllint --format -\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"node\" failures=\"0\" skipped=\"0\" tests=\"2\" time=\"0.002\">\n    <testsuite name=\"lib/Environment\" failures=\"0\" skipped=\"0\" tests=\"2\" time=\"0.002\">\n      <testcase name=\"constructor with info\" time=\"0\" status=\"0\">\n        <error message=\"test error\" type=\"Error\">Error: test error\n  at Suite.afterEach  &lt;tests/unit/lib/Environment.ts:8:11&gt;\n  at &lt;src/lib/Suite.ts:383:27&gt;\n  at runLifecycleMethod  &lt;src/lib/Suite.ts:351:14&gt;\n  at next  &lt;src/lib/Suite.ts:525:33&gt;\n  at &lt;src/lib/Suite.ts:531:15&gt;\n  at runTestLifecycle  &lt;src/lib/Suite.ts:500:18&gt;\n  at &lt;src/lib/Suite.ts:624:30&gt;</error>\n      </testcase>\n      <testcase name=\"constructor missing info\" time=\"0\" status=\"0\">\n        <error message=\"test error\" type=\"Error\">Error: test error\n  at Suite.afterEach  &lt;tests/unit/lib/Environment.ts:8:11&gt;\n  at &lt;src/lib/Suite.ts:383:27&gt;\n  at runLifecycleMethod  &lt;src/lib/Suite.ts:351:14&gt;\n  at next  &lt;src/lib/Suite.ts:525:33&gt;\n  at &lt;src/lib/Suite.ts:531:15&gt;\n  at runTestLifecycle  &lt;src/lib/Suite.ts:500:18&gt;\n  at &lt;src/lib/Suite.ts:624:30&gt;</error>\n      </testcase>\n    </testsuite>\n  </testsuite>\n</testsuites>. It is a draft, and the points you mention do need a bit of work. Feel free to try it out if you get a chance, though. It seems like it should enable the desired behavior in the JUnit reporter, although I'm not sure it's handling failures in after in the best way possible yet.. Is this significantly preferable to specifying reporters: ['html'] in your test config? That will tell Intern to only use the html reporter. I'm leery of changing defaults unless they're causing problems for many users, at least not when there's a simple alternative.. Hmmm...I see. The browser test page should be working the same as the node runner, where there are default reporters that can be overridden.. Actually, after looking into this a bit more, the existing logic works.\nThere is a top-level reporter property, and also environment-specific properties:\njson\n{\n  \"reporters\": \"something\",\n  \"browser\": {\n    \"reporters\": \"html\"\n  },\n  \"node\": {\n    \"reporters\": \"runner\"\n  }\n}\nThe environment-specific reporters are merged into the top-level reporters in each environment; the assumption is that the base reporters are meant to be used everywhere, while the environment specific ones should only be used in their respective environments.\nThe default reporters in each environment are specified on the base property. So, in the browser, the setup looks like:\njson\n{\n  \"reporters\": [\"html\", \"console\"]\n}\nSimilarly, in Node the setup looks like:\njson\n{\n  \"reporters\": [\"runner\"]\n}\nSo if you want to override the defaults, you'll need to either set the top-level reporters property, or clear it and only use the environment-specific property. To remove the console reporter using a config that will only be used in the browser, you can do:\njson\n{\n   \"reporters\": \"html\"\n}\nTo do it in a config that will be shared between Node and the browser, you would do:\njson\n{\n  \"reporters\": [],\n  \"browser\": {\n    \"reporters\": \"html\"\n  },\n  \"node\": {\n    \"reporters\": \"runner\"\n  }\n}. Intern doesn't depend on flatmap-stream, nor do any of its dependencies. Could the issue possibly have been from something else in your project?. Ooo, this will be handy. I'll try to get to this in the relatively near future.. Good catch. The browser bundle uses a polyfill for URLSearchParms, so we should be able to use that for parsing.. Note: This is still an issue in Intern 4.3.x and 4.4.x. It's probably an off-by-one error in Html._setCollapsed.. Hmmm...well that's annoying. The self tests for 4.4.0 passed last week, both locally and on Travis, but today FF (64.0.2) is hanging for me. 4.3.3 and 4.3.4 appear to be working properly.. From a quick test, it looks like the issue may be with Leadfoot. Downgrading leadfoot to 2.2.3 seems to resolve the issue.. The issue is corrected in Leadfoot 2.2.5. I published Intern 4.4.1 to ensure the updated Leadfoot is picked up in new installs.. This appears to do the trick. Thanks!. Finally got a chance to look at this. In my own tests, it seems to work as described -- great!\nI agree, though, that the spaces seem less than ideal. What if we used a format more like Chrome's for the locations, like \nat regular suite @ http://localhost:9000/_tests/tests/unit/lib/reporters/Html.js:87:21\nThe <> were originally used so the output would look similar to browser stack listings. However, browsers seem to have adopted simpler formats at this point.. > Let me give you a list of questions about the simplest things, and you will add the necessary information to the documentation.\nThis would actually be very helpful. Writing documentation that is both introductory and useful to seasoned users can be quite difficult; in particular, it can be hard to know what's not obvious to a new user when you're deeply involved in a project.. There's still a chance that the OS or browser version you end up with might not be exactly what you asked for, but I can still see this being a useful indicator.. I tried it without, but I thought it was easier to read with the separation between the testing information and the TOTAL line.\n. We have both spellings in the current code; I grabbed the wrong one. Oops.\n. The idea was that you would always run suites; only tests can be skipped.\n. It's a debugging check that should have been removed.\n. For symmetry with run, and because runTest must return a promise.\n. Oops.\n. This is left over from my previous implementation and should have been removed.\n. How about getting rid of runTest and entirely skipping the call(test.tests ...) chain if a test should be skipped? Something like:\n``` js\nfunction shouldRun(test) {\n    // check if test is a suite, is explicitly marked as skipped, or matches the grep regex\n}\n...\nif (shouldRun(test)) {\n    // normal call(test.tests ...) chain\n}\nelse {\n    test.skip();\n    runNextTest();\n}\n```\n. I had actually considered that, but I can't really see a use case.\n. Overcome by events.\n. I didn't put the message in the Error because it seemed redundant since I'm also setting the test.skipped message, and the error should never make it out of the run loop, anyway. Given that, a shared object seems worthwhile.\nWith regards to handling annotation in the run loop, it causes issues with grep since Test#run isn't called when a test is grep filtered. Grep support is also why I have that unsavory shouldThrow argument for skip. I'll see what I can come up with.\n. The contents of the nodelist could be a string, or it could be one or more XmlNode objects.\n. Only the one ('/client/end') was added, and that was to ensure that a report would be written even if the client runner errored.\n. D'oh, didn't even think of that.\n. A browser extension or dojo (someday). Probably no one. It seemed better to be safe since it's easy to do so.\n. I cleaned it up, but document.write seems like the way to go in an error handler that could be called before the DOM is loaded.\n. No. For intern-runner, basePath is what controls where files are served from, and it's set to cwd by default. baseUrl is relative to basePath from a file-serving perspective. If it needs to point to a subpath, that's fine.\n. Prefer comments over code rather than after. Also, it's not necessary to comment reasonably obvious things (or things that will become obvious when reading the code).\n. Use\n}\nelse {\n(see https://github.com/SitePen/.jshintrc)\n. Maybe node.classList[infate ? 'remove' : 'add']('collapsed')\n. function ( (style)\n. Do we need to preventDefault here?\n. We should put back the extends and benchmark properties, or add them to CI. I just commented them out to make dev faster.. Should be coverage. We should be passing something in to testProperty indicating that a deprecation warning (or any other console output) is expected.. Rather than altering message data for other listeners, maybe we should:\n\ndo the duplication in emit\nemit the initial coverage with its own 'coverage' event rather than merging new data into it here. This adds quite a startup delay, and ends up instrumenting any files being tested twice. Could we do it at the end of unit tests, and only for files that didn't already have coverage data?. Don't specify a return type when it's not necessary. Also applies to createLinkNode.. For consistency, prefer arrow functions for simple callbacks.. We shouldn't need the string[] type since it can be inferred from the default arg. Also, should we have an overload that takes just an argv?. It'd also be nice to add typedoc @param comments so we can point out that argv args should at position 2.. configure is a weird name for this since its not configuring anything (although I don't suppose it matters since its internal). Also, Intern code typically has things like module-level constants and functions declare below exports.. Instead of deleting config from the passed-in options, it'd be nicer to return a new object that didn't have the config property (since we're returning options anyway).. If we made mockRun = sandbox.stub().resolves(), could we get buy with just calling sandbox.resetHistory() above (instead of sandbox.reset())?. This implies (to me) that Intern actually comes with various loaders. It might be better to say that Intern can work with a number of loaders.. Maybe make it clearer that \"default loader\" will mean \"no loader\" in the browser, which means no modules.. Maybe clarify the implications here a bit more. Plugins loaded before an external loader are available must be standalone scripts in the browser because there's no loader. Plugins with useLoader aren't just loaded after the loader becomes available but with the loader, meaning they can be modules.. They can also be modules if useLoader is true (so maybe \"standalone scripts or modules\").. \"Loader scripts\" is what I've been using, but I'm open to suggestion.. Might it be better to have shouldInstrumentFile work with normalized paths rather than feeding it non-normalized paths?. > denormalizing paths for source maps\n\nSource map paths aren't normalized?. ",
    "sholladay": "FYI, I have posted a rather large bounty for this issue, to help bring it home.\nhttps://www.bountysource.com/issues/1127630-add-a-performance-benchmarking-api\n. @paulirish, I will tackle that question from a high level.\nThe following are real use cases for me:\nCase 1: I am building dangit.js, a utility library similar in concept to Underscore. That means all the usual with 3rd party JS and needing to be sensitive to the environment. It will run across Node.js and IE9+ (and friends), so engine differences are of note.\nFrom this perspective, I want:\n- Easy to get going. Don't make me read a book, etc. I've got individual public APIs to tweak and I just want to know basic data on how quickly they finish up, given a specific input. I can A/B it live, don't need a ton of history data, etc.\n- Plug and play and config over code. Since it's early days for the project, it will be a pain to work with any additional code required by the performance testing API, So in this case, I'd rather have decisions made for me, and have it \"just work\" as much as possible, at the cost of flexibility I would desire in a later stage project.\nCase 2: I work on sitecues, a fairly mature project with a stable architecture. It's browser only and relies heavily upon the latest graphics and animations tech on the web to do deceptively simple things like throw up lightboxes. Which of course, doesn't always go as smoothly as we all would like.\nFrom this perspective, I want:\n- Easy to package and deploy the results and compare them across time. So give me JSON or directories with minimal clutter for gzipping, etc. I won't be too picky on the exact format, but it must be easy to serialize. We archive, transfer across servers, typical company stuff. Here, I don't mind consuming and presenting the data myself.\n. Thank you for all of the hard work on this, @kitsonk. Seems reasonable to me.\nI'm wondering if you can detail more of how baselining might work, such as generating that data. In my mind, this is one of the most important pieces. Any given test run can be a fluke (especially for functional tests), so I feel like it makes sense to baseline from an average of say 3 runs, with the user confirming the result is reasonable. It seems like a very interactive story. Or maybe this is a higher level than Intern ought to provide.\n. @csnover do you still have the same feelings about this? My team constantly asks why Intern spits out duplicate errors. And when in a non-colored terminal (default for many SSH connections to a server), it can be easy to overlook the fact that there are exactly half as many errors as there appear.\nIn addition, I'm not aware of any other projects that behave this way - other test frameworks or tools like jscs or jshint. Both of those have binaries that are generally ignorant of Grunt, but still don't exhibit this behavior when using their Grunt tasks.\n. I primarily want this for the Deferred sugar. Here is an example of how I would like to use it.\n``` javascript\ndefine(\n    [\n        'intern!tdd',\n        'request'\n    ],\n    function (tdd, request) {\n    var suite  = tdd.suite,\n        test   = tdd.test,\n        before = tdd.before;\n\n    suite('foo', function () {\n\n        var qaData;\n\n        before(function () {\n\n            var dfd = this.async(\n                // Error out and do not run the tests if we cannot get any\n                // data from QA services in a reasonable amount of time.\n                1000\n            );\n\n            request(\n                'https://qa.company.com/data.json',\n                dfd.callback(function (error, data) {\n                    if (error) {\n                        throw error;\n                    }\n\n                    qaData = JSON.parse(data);\n\n                    assert.isTrue(qaData.everythingIsFine);\n                }\n            );\n        });\n\n        test('bar', function () {\n            // make use of all the juicy qaData\n        });\n    });\n}\n\n);\n```\nThis is a contrived and not very fancy example, but you will notice that it is nearly identical to what is in the user guide for Test#async(). I feel that this is particularly useful for functional tests, which is where I plan to use it first. Since WebDriver tests are prone to failure cascades even if you are careful, it is useful to avoid doing any unnecessary work wherever possible there. Async suites help achieve that goal by making non-trivial network and file I/O more manageable, enabling you to inspect your surroundings before proceeding, and potentially bailing with more user-friendly errors if all is not well.\n. Presumably you are looking for something like this? https://github.com/benderjs/browser-launcher2\nI wonder if there would be a non-terrible way of doing this mostly in user-land, with only minor tweaks on a fork of Intern, as a proof of concept. That theory is based on the fact that, from what I've seen, Intern doesn't make too many assumptions about how the session gets started (for unit tests).\n. I would personally prefer a more standardized API for report locations, de-coupled from which exact reporter is being used. This could get very annoying when implementing a new reporter or switching between them as a user of Intern.\n. Great! And thanks for the example snippet.\n. Yeah, I take it back. Tried to be level headed about it, but this is the making of a footgun. Probably a plugin / external module is a better idea for the 1% case where you really can't live without it.\n. +1, I would really appreciate this. The workarounds for this are messy. And the idea of maintaining them across all projects is not desirable.\n. For the case of unit tests in the browser, what if there were simply a requirement that the Intern proxy be running in order to use glob patterns, which could provide a service route for retrieving data about the filesystem.\nSo as a user I do something like:\nnode node_modules/.bin/intern-runner config=tests/intern proxyOnly\n... then visit ...\nhttp://localhost:9000/__intern/client.html?config=tests/intern\nThis already works and I do it pretty regularly to use client.html since it means I don't need to host my own server. So all we have to do is ask localhost:9000/__intern/suites.json?glob=*/* or whatever to please send us a list.\n. Some actions, such as click(), cause scroll to happen implicitly. If that doesn't cover your use case, you can run any JavaScript you want in the browser itself by using the execute() or executeAsync() methods. Meaning, you can use the browser's native scrollIntoView().\nAlso, these commands are the responsibility of Leadfoot, which Intern simply uses under the hood, But it is a standalone project, with its own issue tracker.\n. Thanks and yeah, that's understandable. Since I'm guessing this would have to either land now or wait quite a long time (next major), I hereby offer to handle all documentation changes if the code gets refactored.\n. Good enough for me. Although I will point out that anymatch is perfect for this sort of thing, for projects that desire flexibility.\n. There's a Node.js API for this made by sindresorhus and addyosmani that could be automated pretty easily. https://github.com/addyosmani/a11y\n. +1, yes please.\nHaving to work around this is a common pattern for me.\n. A hackaround is to launch two instances of Intern with two different configuration files, set up to divide your suites between them.\nNot saying it's fun. But, do-able.\n. Yeah, they will need to be on different ports, for sure. I suggest you put what you tried in a gist and post a link to it, maybe I can spot what is wrong with it. Even better would be to post about it on StackOverflow so it gets more visibility.\n. That's a solid recipe. Maybe do a PR to intern-examples with it.\nReplace the first two lines with #!/usr/bin/env bash\n. That is a unix shebang, only the first one has any effect. The second one you had is super useful for writing command line programs with Node, but your script is meant to be run with bash. And again, it only makes sense to have one at a time. The reason for avoiding #!/bin/bash and using #!/usr/bin/env bash instead is because the first one \"hard codes\" the location of bash itself in there, while the second one effectively asks the $PATH to find it. This means that it will run with the user's preferred copy of bash.\nMost computers do have a bash at /bin/bash, but on OS X it is ancient, and rather than overwriting Apple's copy, people use something like Homebrew to install a modern version. And you generally want to respect that. As with most things, there are pros and cons, but I recommend it.\nAs for the PR, I am sure @vladikoff will help you figure out the best way to showcase this. But bash-example or parallel-example sounds good to me. :)\n. That is fantastic. Little things like this go a long way. :+1: \n. +1\nI do weird things like compute the user's name and overwrite the config file on disk just to shove it into capabilities.name, which helps a ton on my development team to keep track of issues on BrowserStack and understand where they are coming from. I am hoping the vinyl-fs approach in Gulp could be leveraged to speed this up by avoiding multiple file reads.\nEven if this cannot work, it would help to have a clean, configurable API maintained and supported by Intern for how it wants to manage the child process, and which is dead simple to drop into a build system.\n. @phated almost every single competitor to Intern has a Gulp task.\n- QUnit\n- Mocha\n- Jasmine\n- Buster\n- Karma\n- Nightwatch\nIn addition, most of these are official plugins from those projects and listed at gulpjs.com/plugins.\nOn top of that, they get plenty of use and are a critical part of any build process.\nSo why not Intern? Why does Intern, specifically, not belong in the Gulp ecosystem? I have seen people use this line before, elsewhere, without giving alternatives that are better (in my mind, the DIY approach is not better). Even if there is a decent explanation, it sounds like an issue that should be addressed within Intern itself.\nSo where is the disconnect here? We want a test system and we want a build system, are we simply fools for wanting a bridge between the two that doesn't have to be maintained in-house, per-project? Which part of this use case is illegitimate and why?\n. In fairness to me, that avoided many of my questions, but good to know about the plugins site.\nTo be clear, I'm suggesting precisely that Intern consume the contents of a file as part of its task. We desire to read and manipulate it without writing back to the disk only to have Intern read it back again later. In fact, it could be re-used by another mode (intern-client vs intern-runner) as well in another build step, so that's not the end of the road for it. The task could sanitize it and continue to pass it along, etc. and it would be super useful.\nBut if this isn't enough transformation, then you better get rid of JSLint, JSHint, ESLint, and JSCS on the plugins site, because they do none.\n. It can be even better. If Intern natively supports retries, it doesn't have to repeat the entire lot of suites or even restart the process. In my ideal setup, CI would probably retry a test once or twice before considering it truly failed and once that had been decided, would not continue. So combining these is indeed powerful, especially if it's handled within Intern itself.\n. Yeah, LcovHtml is missing a quote on the right.\n. Ah, I am able to reproduce this when putting the reporters property in Gruntfile.js, but it works as expected when used inside of the intern.js configuration file.\n. From a quick glance, I think the bug is at line 71 in tasks/intern.js\n. That works for me. How about you, @kitsonk ?\n. This patch fixes it for me. Not sure if it appropriately handles all of the edge cases or assumptions from the rest of the system.\n``` diff\ndiff --git a/lib/executors/PreExecutor.js b/lib/executors/PreExecutor.js\nindex 8ea79c1..818a47f 100644\n--- a/lib/executors/PreExecutor.js\n+++ b/lib/executors/PreExecutor.js\n@@ -213,9 +213,14 @@ define([\n                }\n            [ 'suites', 'functionalSuites', 'reporters' ].forEach(function (name) {\n\n\nvar value = config[name];\nif (typeof value !== 'undefined' && !Array.isArray(value)) {\nconfig[name] = value === '' ? [] : [ value ];\nvar value = config[name],\nisArray = Array.isArray(value);\n+\nif (value && !isArray) {\nconfig[name] = [ value ];\n}\nelse if (isArray && value.length < 1) {\nconfig[name] = undefined;\n                    }\n                });\n\n```\n. Good enough for me. :)\n. I will chip in to fix this within the next day or so, if no one else does so.\nThe offending code is line 167 in lib/reporters/Runner.js\n. EPERM means your permissions are not good enough to make that symlink. Most likely, some part of the path doesn't have write permissions, which are necessary for this to work. Ideally, fixdeps.js would validate the symlink is able to be created before attempting it and throwing a more friendly error if not. But still, it's probably an issue with your environment.\nIf you look and the permissions appear okay, it might be due to account ownership of the directory, etc.\n. There are also known bugs with path resolution in Node 0.11.x, so the suggestion to upgrade is not for nothing. ;)\n. Working on this, the value that is assigned to suite.name seems super weird. It is not the name of the test suite whatsoever. But I didn't look into it at all - maybe the variable called suite isn't really what it says it is and its just badly named?\nFrom IRC:\n13:45:15    <sholladay> it's strange that suite.name is \"firefox on any platform\"\n13:45:57    <vladikoff> sholladay, a bit, i guess if you have 2 browsers going then it makes more sense\n13:46:15    <vladikoff> sholladay, also \"any platform\" should say Linux but there is probably some configuration required\n13:47:27    <sholladay> Yeah, I would expect it to get computed and live at something like suite.environment\n13:49:15    <sholladay> or maybe not on the suite, per se, but the suite has a name defined in the test module that doesn't get put there, that's the real weirdness\n. Not sure how I overlooked that. I like how it ended up. :)\n. The first .then() call has no way to know when that request() thingy is finished. What you need to do is inform the promise chain about what you are doing. There are a few different ways to do that, the cleanest, best way is to return request(...). However, that will only work if request() returns a promise, which will cause the .then() promise to follow its lead / depend upon it.\nIf that's not an option, another would be to create your own promise to wrap the request call.\n. Here are two great links to help, in case it still isn't clear.\nFrom the beginning:\nhttp://www.html5rocks.com/en/tutorials/es6/promises/#disqus_thread\nPattern variations:\nhttp://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\n. To muddy the waters further, functional tests can have some lines of code that will run in Node, and others that will run in the browser, all from within the same file, by using .execute() and .executeAsync(). This can cause plenty of non-intuitive breakage of the normal rules around scoping, etc. unless you understand that it serializes that code and ships it off to a different environment. In fact, Intern makes extensive use of that (bi-directional) channel to allow you to reference actual browser DOM elements in your code that runs within Node.\nIt's one of those great power / great responsibility situations.\nI would summarize it like this, for functional tests:\n- 100% of your code is always defined within the Node environment, at least originally.\n- At runtime, your code is typically bound and executed in Node, per the usual rules there. However, some code (such as the callbacks to .execute() and .executeAsyc()) will be turned into strings, sent to the browser, and then re-evaluated and run within that environment.\n- Because of the use case for functional tests, most of your code will probably be designed to control the behavior of a browser through Leadfoot, which knows how to speak the WebDriver protocol and ships with Intern. But nothing demands that you do so, your functional tests could completely ignore that web browsers even exist - it would just be an odd thing to do.\n. To me, the currently documented behavior makes more sense.\n. One alternative to this is to use project relative paths, which are much more intuitive usually.\nhttps://www.npmjs.com/package/pkg-dir\n. Personally, I've always hated how the RequireJS optimizer scans a file for a require.config() call and parses its argument. It feels very hacky to me. And that whole paradigm is poisonous, since it leads to feature requests like this across many projects.\nWhat I do is define all of my AMD configuration in a real module that can be read by any tooling that can consume that module. Then, during my build process, any nonsense like require.config() is simply constructed and written to disk wherever it is needed. This setup is more flexible, maintainable, and declarative. Because this has treated me well, my vote is to avoid parsing like this.\nBasically, I'm suggesting to think from the other direction and treat require.config() as a special case, where your config needs to be serialized for the client. Once you get into that mindset, you regain all of the usual benefits of real modules, which the RequireJS optimizer really should not have stolen from you in the first place.\n. Well, no, but that led me to the answer.\nI had done the equivalent of:\nsh\nmv my-project my-fav-project\nSo that symlink pointed to a disk location that no longer existed.\nI'm not sure what I can really expect Intern to do about this. But maybe using the new paths and symlinking those to the npm@2 locations if necessary would make sense?\n. To avoid muddying the topic or confusing people, I'm closing this. My original problem was not related to using npm@3, but due to re-naming my project directory, which I just happened to do right after installing npm@3 and before re-running the browser client. So there were two variables at play and it didn't occur to me that re-naming the directory would have caused this, given that I was using the correct up-to-date URL for the browser client. I can confirm that a clean install of Intern on npm@3 without doing that works for me in this scenario. I've opened a new issue over at #510 for the inability to re-name project directories, for more clarity. @odoe I suggest you do the same, in case it has a different cause.\n. Well, it would only break if the dojo (etc.) version is not compatible with Intern, right? And that is something fixdeps.js could detect. Even in such a scenario where incompatible versions are already at those locations, fixdeps.js could be responsible for modifying the paths used in files like client.html (either directly, or by installing a slightly different copy of it) to point to the right place.\nIt should be possible to get away without any symlinking. I think. I hope.\n. I'm thinking relative symlinks, like you mentioned in #508, is the way to go.\n. This patch does it for me:\n``` diff\ndiff --git a/support/fixdeps.js b/support/fixdeps.js\nindex fffbe4e..2a537d0 100644\n--- a/support/fixdeps.js\n+++ b/support/fixdeps.js\n@@ -30,6 +30,6 @@ if (!fs.existsSync(expected)) {\n        var actualPath = path.dirname(require.resolve(path.join(dependency, 'package.json')));\n    if (actualPath.indexOf(expectedPath) !== 0) {\n\n\nfs.symlinkSync(actualPath, expectedPath, 'junction');\nfs.symlinkSync(path.relative(path.dirname(expectedPath), actualPath), expectedPath, 'junction');\n        }\n });\n```\n\nOn Windows, I expect this to work exactly as it did before, as the fs.symlink() docs claim the destination will be normalized to absolute in that case. Meaning, this fixes the bug only on POSIX, as you said.\n. PR #520 created for this. If anyone has ideas for what to do on Windows, I'm happy to work on it. I didn't see anything obvious, though, beyond the less ideal options mentioned in #508 or going back to dir-style symlinks which apparently require elevated privileges.\n. I agree that this isn't the right design choice. If you absolutely must do weird things like this, I think it would be good for you to take a look at hoxy and use that in your setup. It has a beautiful API and is probably a better tool for the job than Intern's own proxy would be, even after being exposed for middleware.\n. Do you know about the grep option? It can be given on the command line.\nUsing the new intern-cli:\nsh\nintern run --webdriver --grep='myMethod'\nUsing the old Intern CLI:\nsh\nintern-runner config=tests/intern grep='myMethod'\n. That option is available in the config file as well as on the command line. As of today, that's the way to go for singling out a test or two.\nYou should also try Test#skip() and Suite#skip(). You can quickly add those to the things you don't want to run, which is nice in some cases. See skipping tests.\n. I still support this and would use it if it were added. It would be less cumbersome to use than grep, for the reasons mentioned above.\nThe best argument against it, in my opinion, is that you can accidentally forget to remove .only(). The same could be said for grep if you are doing it via the config file, but I tend to use grep on the command line. AVA deals with this by logging a reminder to the console that .only() was used, which works pretty well, but could be overlooked.. > I'm asking this because I want skip all remaining tests if a previous one has failed.\nThis is now available with the bail option.\nsh\nintern run --webdriver --bail\n. So, in other words, the defaults are setup to assume that the browser client is being hosted by a custom static web server. This may or may not be what people typically do, I'm not sure. For me, I certainly find it easier to avoid that altogether. Are there any reasons to not use the proxy in this fashion? Might it make more sense to treat using what ships with Intern as the normal thing and using your own web server as the outlier?\n. Ah, yes. You are right of course. http://localhost:9000/node_modules/intern/client.html?config=tests/intern works without any initialBaseUrl. And if using the path as opposed to __intern/ is considered more canonical, it makes perfect sense to have the defaults set up that way. So agreed, it's a docs issue.\nPresumably fixing this would involve discouraging use of __intern, removing references to it, warning that using it requires initialBaseUrl, or some combination thereof.\nAlso, the wording about basePath should probably make it clear that it doesn't actually know where two directories above the Intern directory is, and that it uses a convention combined with the URL in the address bar to ascertain that. The straightforwardness of the current wording lead me to believe this was a bug.\n. I noticed that multiple issues of mine on this tracker have been edited by @morrinene and the code formatting is now broken.\nI assume it was just a mistake, but it would be nice to know how / why that happened.\nI will fix it later, so here is a screenshot for posterity.\n\n. I also think the CLI ought to get a makeover. Even --version doesn't work.\n. Going to collect some thoughts on the CLI here. Happy to file separate tickets if its helpful.\nProblems\n\nNewcomers on my team have been confused by the distinction between \"client\" and \"runner\". Not helping matters is that there is a Node.js client and a browser client, which aren't really related, and the \"intern-client\" command line tool only deals with one of them.\nSomewhat related to number one, most people expect one CLI with some flags. It takes a while to stop trying intern --runner, etc. even if they understand which one they should be using. I imagine a simple intern command that defaults to runner and uses the tunnel from https://github.com/theintern/digdug/issues/19 as a very clean out-of-the-box experience.\nConventional flags like --version, --help don't exist.\nconfig is required, even though Intern is pretty good at having defaults that Just Work. In many cases all it truly would need is probably a path glob for some tests. Any information it needs to share with the browser client could be handled by Intern's proxy, a temp file, or some other means that I wouldn't have to know about\nThere is no \"set up\" / init command to help people get started. This could be as simple as a mv from node_modules/intern/tests/example.intern.js to the default location where Intern expects it. Or it could be as feature rich as an Inquirer prompt that builds a config file for you. And/or Intern could have an official Yeoman generator.\n. Right, setup the browser client from the command line. I would :heart: that.\n\nI don't use a separate web server, though. proxyOnly and localhost:9000/node_modules/intern/client.html works awesome for me.\n. Yeah, that would be more about improving the experience of the browser client and the use cases it already exists for. Basically making run.html unnecessary. The thing is, you already have to set up the server/proxy that hosts the client.html (and optionally the run.html) page(s) from the command line. Then you have to jump through some hoops to open the browser and navigate to the right place. Even staying on the command line with open /path/to/run.html is a pain, because intern-runner proxyOnly (and things like it) sit at the prompt without returning (unless you break out your bash skills).\nA theoretical intern browser-client command would just do whatever necessary to open the browser client for you in one fell swoop.\n. FYI, the contributing guidelines here state that questions should be asked over on Stack Overflow. That's to help you get more answers, because more eyes will see it. The project maintainers regularly answer over there. This issue tracker is used for feature requests and bug reports, which don't really belong on Stack Overflow.\nThere is also an #intern channel on Freenode IRC chat.\n. There are thousands of Intern questions there. Obviously I haven't looked at even half of them, but the overwhelming majority of the hundreds I have seen are answered. Most of those get answered by either jason0x43 or kfranqueiro or csnover, all at SitePen.\nJust a guess here, but I would imagine they generally keep an eye on the tag \"Intern\" more than the general query and the number of results differs hugely between those two. So if you're having trouble getting a response over there, I suggest making sure that tag is part of your question and then pasting the link to it in the #intern IRC channel on Freenode that I mentioned earlier.\n. My second favorite test framework, ava, has the concept of an assertion plan that helps with this sort of thing a ton. In fact, it allows a test to be considered failed until proven otherwise. Could file a feature request for that.\n. If assertion plans are \"on\" (either by default or via an opt-in config), you wouldn't really be able to make a mistake with it. Since a test must end having made exactly the number of assertions specified in the plan count, if you forget anything, the test fails with a clear message (too many or too few assertions or no plan).\nCustom assertion libraries could be used by hooking them, akin to promisify-ing callback APIs, which is pretty painless.\n. Figuring out the Selenium compatibility matrix has definitely been a challenge, especially when there is a new release of either a browser or Selenium. It is surprisingly hard to find good data about that. And testing it on your own is frustrating because you typically get a confusing error, rather than a clean \"this isn't compatible\" message.\nFor keeping cloud browser/OS versions up-to-date, I would like to be able to use version math in the configuration, \"latest\" and \"latest-1\", etc. It would be great if that were available upstream, but a web service could be a stopgap. It would need to normalize the syntax across the various cloud providers. I currently leave commented out environment objects for switching between SauceLabs and BrowserStack ... yuck.\n. Presumably it at least wouldn't crash if it used iteration instead of recursion.\nI wonder how much easier that would be to implement vs simplifying what gets transmitted.\n. Another approach would be to replicate the purple that shows up on the command line, for consistency.\n. There have been some problems with unref'd timers recently, I wonder if they could be provoking this somehow.\nhttps://github.com/nodejs/node/issues/1264\nEven though that ticket was.closed in late 2015, they are still calling it out in the release notes under Known Issues.\n. Some bikeshedding on the names:\n- I vote for tries, with a default of 1. Seems easier to read / faster to type / more intuitive to me. And maybe tries : 0 could be useful for skip(), etc.\n- Some other test systems, namely Mocha, say bail instead of failFast. I don't feel like either name is particularly descriptive, but would probably choose whichever is more conventional / familiar to people.\n. Yeah explicitness is good, true that. Hooray for bail. I was starting to realize I would routinely mix up the order, \"fail fast\" vs \"fast fail\".\n. To clarify, the expected behavior is that retries takes precedence over bail, is that correct? In other words, bail typically means to exit upon the first failure, but that won't happen unless the test remains in a failed state after its allotted number of retries. That is something I could see people getting confused about, the order of precedence. I hadn't given that much thought before. Is it intuitive?\nAlso, would retries affect a suite that errored in one of its lifecycle methods? And for failed tests that are being retried, will their beforeEach methods get called?\nThe more I think about retries, the more wary I am of it. Since I originally filed #340, I have figured out techniques to make functional tests more resilient to transient timing glitches. So the value of it vs its maintenance cost and pitfalls seems blurry to me now. I was always concerned that it would mask genuine problems in a test suite, but it seemed worth taming the WebDriver beast. I think it only makes sense if a lot of tests are unnecessarily messy without it. What's the reality like for people?\n. That makes perfect sense to me. bail doesn't seem like much of a rabbit hole, beyond figuring out how to communicate the situation to the user clearly.\n. I hit this today, too. As someone who has worked on the symlinks that cause this, I am not sure offhand how to solve it. Intern uses this structure because AMD stuff in the browser has no way of walking the filesystem and thus needs to be able to make simple assumptions about where things live.\nThe original fixdeps.js commit that started doing symlinking: https://github.com/theintern/intern/commit/e9360701376f7e7915d1459d218cfd59fce8c040\nIt has caused plenty of problems, so it's not like Intern wants to do this, but there hasn't yet been a solution deemed truly superior.\n. Yeah, agreed. It does seem to do the trick, while being backwards compatible, though.\n. > What if we npm shrinkwrap the dependencies?\nAs far as I know this doesn't guarantee that npm will put chai (etc) underneath Intern's directory. Wouldn't it still be allowed to \"hoist\" them? I'm not 100% sure, but this would be interesting. Using shrinkwrap to make shrinkwrap possible would be tasty.\n. Hi @SwethaVitta. The answer is most likely yes. A lot more information is needed to be 100% certain.\nFYI, this is a bug tracker. The Contributing Guidelines state that you should ask questions like this on StackOverflow instead. You will get way more answers and help over there.\n. Do you have a link to your StackOverflow question?\n. This is merely a side effect of the fact that you are using a sub-dependency (a dependency of a dependency), which happens to be an older version than the Chai documentation you were reading when you discovered the isAtLeast API. You can look at Intern's package.json file to see which version of Chai your Intern version is using, then look up its documentation based on that. But the good news is you don't need to use Intern's version of Chai (it is provided for convenience).\nTo fix this, you can either wait for a new version of Intern with a newer Chai, or you can \"bring your own\", by doing npm install --save-dev chai and then simply import Chai a bit differently in your tests.\nFor example, this is the easiest way for functional tests:\njavascript\ndefine(\n    [\n        'intern/dojo/node!chai'\n    ],\n    function (chai) {\n        const assert = chai.assert;\n    }\n);\nI am not aware of any problems with this approach. I have done this too, when I feel like using a bleeding edge Chai feature.\n. Personally, I can't see any good reason why the behavior ought to differ between undefined, null, and []. These all seem to convey, \"I have nothing for you.\"\n. Debugging could definitely be better. But you'd probably still need to add .sleep() calls within functional tests, unless you're talking about slowing every WebDriver command by multiple seconds. And at that point it would be unbearably slow. So I'm not sure adding general configuration to do this would really help so much as it would just make you want to go get a coffee while its running.\n. Mmmm having a helper method that allows you to add one little chunk rather than sprinkling sleep() all over the place sounds like an excellent idea to me. Let's call it molasses() :). It would be great if it didn't even need to wrap any other calls. I wonder how much effort that would be.\n. Errors in lifecycle functions should definitely skip any remaining tests but mark the suite as failed.\nMarking tests as failed when they didn't run is misleading, especially bad for tooling that tracks test stability / regressions over time. In this case, people get blamed for code they never touched.\nBy the same token, errors in afterEach and after should not retroactively mark tests as failed or skipped (for example).\nI expect the output here to be:\n\nPassed: 0 Failed: 0 Skipped: 4\n\n... but with a non-zero exit code and a bright red stack trace.\n. I believe you are looking for config.setup and config.teardown, which are general purpose lifecycle hooks for the testing system.\nThis is not documented in the user guide, but I think it's just an oversight. Maybe @jason0x43 can comment on that.\n``` javascript\n// test/intern.js\ndefine(\n    [],\n    function () {\n    'use strict';\n\n    var proxyPort = 9000;\n\n    return {\n        setup : function (executor) {\n            console.log('setup:', executor);\n        },\n        teardown : function (executor) {\n            console.log('teardown:', executor);\n        },\n\n        proxyPort : proxyPort,\n        proxyUrl  : 'http://localhost:' + proxyPort + '/',\n\n        // Places where unit and/or functional tests will be run.\n        environments : [\n            { browserName : 'chrome' }\n        ],\n\n        // Which unit test files to load. These check our APIs.\n        suites : [\n            'test/unit/**/*.js'\n        ],\n        // Which functional test files to load. These check our\n        // user-facing behavior.\n        functionalSuites : [\n            'test/functional/**/*.js'\n        ],\n\n        // Ignore some code from test coverage reports, even if it loads\n        // during testing. The paths that match this pattern will NOT\n        // count against coverage.\n        excludeInstrumentation : /^(?:test|node_modules)\\//,\n    };\n}\n\n);\n```\nThese functions get passed the Executor instance.\nThe tricky bit is that if you are using intern-runner, the Intern configuration is run in both Node.js and the browser. So you are going to have to run your daemon managing code conditionally.\nYou could do the environment detection yourself or rely upon something like dojo/has to do it for you. Using that, the daemon manager wouldn't even be loaded except in Node.\njavascript\n// test/intern.js\ndefine(\n    [\n        // Daemon manager as an AMD module.\n        'intern/dojo/has!host-node?daemon-manager'\n        // Daemon manager as a Node / CommonJS module.\n        'intern/dojo/has!host-node?intern/dojo/node!daemon-manager'\n        ...\n. Out of curiosity, how long do your unit tests take to run? Is it really more convenient to go hunt down a link with your mouse and click it vs Command + Shift + R on your keyboard?\n. > our suites take about 10 minutes\nBut presumably that is mainly due to functional suites. Yes? The browser client doesn't deal with those. So this would only affect unit tests, which are usually very fast.\n\nIt's very useful to be able to focus in on one or a few unit tests\n\nAmen. I think https://github.com/theintern/intern/issues/514 is a better solution, though. E.g. it is generic (isn't specific to unit tests) and is probably still faster to work with, since you don't have to scroll a huge test result table and hunt for a button.\n. You should definitely try setting fixSessionCapabilities: false in your Intern config and seeing if that causes the problem to go away. I suspect that it will. Although, 8 MB sounds like too much to be just the capabilities testing.\nAt any rate, you should not leave fixSessionCapabilities set like that, as it will lead to problems with WebDriver as Dylan mentioned above.\nAnother contributing factor could be the tunnel that connects to Sauce Labs. I use BrowserStack - which is similar - and don't have these problems. Maybe run an experiment to see if using BrowserStack improves the situation.\n. @jason0x43 is that actually true still? I know there was some back and forth on this.\nIn particular, there is this commit and related discussion in https://github.com/theintern/intern/issues/409#issuecomment-111536458.\n\nconfig is a module ID. ... I\u2019m investigating just resolving the full path explicitly when retrieving the config since the module ID-ness of the config argument seems to baffle most.\n. I also wish that Intern had a nice programmatic API. This would make Gulp tasks cleaner and faster, too. For some projects I run the test runner multiple times with different configurations and cumulatively the overhead of the shell can be very expensive. Developers' .bashrc files can be huge!\n\nI could use execFIle() instead of exec() to alleviate this a little, but I do prefer to run a shell for flexibility (I/O redirection, etc) in lieu of a real API. Plus, then I would have to go down the \"where is Intern on disk\" rabbit hole.\n. Suite#skip() is now available, which should make this way easier.\n``` js\ndefine(function (require) {\n  var bdd = require('intern!bdd');\nbdd.describe('the thing being tested', function () {\n    bdd.before(function () {\n      this.skip('unwritten test suite');\n    });\nbdd.it('an unwritten test');\n\n});\n});\n```\nI don't use BDD and I haven't actually tried omitting a test function. You may have to supply an empty function for the test.\n. I just tried the code I sketched out above. It works for me.\nsh\nintern run --suites='test/foo'\nSKIP: the thing being tested - an unwritten test (unwritten test suite)\n0/1 tests failed (1 skipped)\n0/1 tests failed (1 skipped)\nAs I said, the trick is the Suite#skip().\n. I have never seen this before. Did you see a browser open up? My first guess is that process.cwd() is being run in the browser by accident.\nTo help debug this, it might be nice to try all three testing modes by themselves and see which ones fail.\n1. Unit tests in Node (intern-client)\n2. Unit tests in browser (intern-runner)\n3. Functional tests in browser (intern-runner)\nYou can fully disable the unit or functional testing systems to isolate them by setting the respective suites or functionalSuites array to null in the configuration. And in the Grunt task, you can switch between client and runner using the runType option.\n. Without going through the motions I described above, it is going to be a bit more difficult to find the culprit.\nBut either way, your next step should be to use longjohn and try to squeeze a stack trace out of it.\nI would also run a sanity check on your tests by running:\ngrep -R 'process.cwd' /path/to/test/dir\nIf that comes back with any results, you should consider those files suspect. Post any relevant code if you can.\n. Those module load failures would seem to implicate that the problem is with your configuration.\nThis part is suspicious:\n\nfrom tests/tests/render/functional/button.js`\n\nPresumably you don't have a tests directory nested within another tests directory.\nI would guess that you are misusing the basePath or something in loaderOptions, such as loaderOptions.baseUrl.\nIt seems like one of those might be ending in tests, while the module IDs you have specified in functionalSuites also begin with tests. When in doubt, it is usually best to leave out / disable any bits of configuration.\n. The table at the end is code coverage. Intern is actually able to determine code coverage for functional tests, so it is still applicable to you. I would recommend leaving it on. But if you really want to, you can set excludeInstrumentation to true.\n. Yes, please!\nSadly, Atlassian has announced that they are discontinuing Bamboo. We are now migrating to Circle CI. It is a great service.\nThis should be useful: https://circleci.com/docs/test-metadata/\n. That was fast. Thank you!\n. > the distinction is mechanical (WebDriver vs non-WebDriver)\nI think what would make this more intuitive for people is if it were intern --browser instead of intern --webdriver and say that functionalSuites requires that. Then it is more about the what and less about the how.\n. > There isn't a good way for Intern to know whether unit tests need a browser or can run in the Node client (and the user might prefer one in any case). There are also cases where you may want to do both (like Intern's self tests).\nHow about we add one more array to the config? The problem lies in the fact that suites is ambiguous, unlike functionalSuites. But that is easy to solve. We split it up into browserSuites and nodeSuites.\n. I personally use test/ instead of tests/, that was one less thing to type, until config became an optional argument. :)\n. The only place I see addEventListener at all is in css/main.js and that doesn't have any wheel listeners.\nWithout more information, I am going to guess it is caused by a browser extension you are using. Try Incognito mode.\n. @jason0x43 one thing that could help would be to turn on passive mode for event listeners wherever possible. However, this is incompatible with the use of preventDefault() so something would need to be done about that.\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners\n. So the SauceLabsTunnel wasn't able to connect to saucelabs.com ... interesting. That REST API does not require authentication and so the only two simple explanations are:\n- SauceLabs had a hiccup / partial server outage.\n- Your firewall is blocking the outbound connection (possibly from Node, specifically, if it's a local software firewall).\nAre you able to connect to https://saucelabs.com/rest/v1/info/platforms/webdriver using cURL or a browser without your corporate proxy settings? Not talking about your private network resources here, just the public internet.\nAssuming the answer is no, it might just be a proxy configuration issue. In which case, you should try specifying this in your Intern config:\njs\ntunnelOptions : {\n    proxy : 'hostname:port'\n    // If the proxy needs authentication, then 'username:password@hostname:port'\n}\n. @jimothyhalpert7 did my advice above help at all?. > This is adequate unless one considers that certain suites might be added, others removed or revised ...\nRight, all it would take is for someone to add a test at the top of the suite and all of your previous test pointers are worse than invalid, they are valid but incorrect.\nHow could this possibly be not brittle without strictly enforced code reviews and a convention to always add tests at the bottom?\nAnother huge issue is that if these are automatically generated at runtime, humans don't have an easy way to lookup a test by its number. Sounds self-defeating for what you are trying to achieve.\nFYI, tests do have a unique ID at runtime already. Access it in a test as this.id, for example.. > all non-Intern dependencies are pinned\nFair. It is consistent in that sense. I would ask, though, if you trust updates from yourself, why not new features?\n\nit magnifies the likelihood that something will break (as the CI test run shows).\n\nI haven't looked deep into the root cause of the Travis failure, but it failed only on Node 0.12 with a simple AssertionError, indicating that there may be a bug. This doesn't look like semver abuse or anything like that. And again, yes, new bugs can happen occasionally with or without this PR. I would argue that this PR makes it more obvious why that can happen. It embraces a much more common convention. Another way to look at this is, which do you think is more common: new bugs OR (bug fixes AND new features)? Remember that we are talking about production releases here that have passed their respective test suites and CI runs, as all of Intern's immediate dependencies are high-quality projects that have these.\nIn regards to stability, note that many of your fellow testing frameworks such as AVA and Mocha use caret ranges and don't shrinkwrap. While I wouldn't use that as a reason alone to do this, I think it's meaningful to demonstrate that other stability-minded folks are getting along just fine with this.\n. Closing for lack of interest combined with merge conflicts and CI failure. \ud83d\udc7b . ",
    "paulirish": "@sholladay can you describe a little bit about your specific usecases? What sort of performance insight are you looking to gather.\n. Gotcha. thanks very much for the use cases. In both of those cases it seems like you want to know about your costs so anything out of the ordinary stands out, and then monitor those over time for regressions.\n\"Benchmarking\" these would mean isolating each test into something benchmarky, fixing it up so it's not written poorly, and running it in tight, heavy loops.\nI think what we want is continuous performance measurement. We want a profiler to run against your tests and tell you about how you're doing when its run like a real user, not like a user who runs util.deepCopy 100,000,000 in a row.  \nI put out some ideas here: https://github.com/paulirish/automated-chrome-profiling#readme  Take a look. Having this performance data for your intern-driven tests would give you a heck of a lot of insight.\n. ",
    "RoystonS": "I just tripped up on this myself today. :(\nA few months ago, I built a promise'd layer on top of DOH Robot (and friends) and implemented the chaining without using a singleton queue (or the equivalent of PWD._lastPromise, or DOH Robot's own queue): I basically just let the promises chain and nest themselves, wrapping up any returned 'plain old' promises into my own 'augmented promises' (rather like the extra WD methods on PWD).\nI'm guessing I most likely missed a trick somewhere, but why would a queue be needed to fix the deadlock in PWD rather than just allowing the promises to self-chain?\n. By 'self-chaining', I was really referring to the normal '.then' chains on real Deferred objects rather than the similar mechanism offered by remote.  Because remote's methods return this rather than real new promises, they need to manage a chain manually.\nI'm curious: why do you need to chain the promises returned by calls on remote onto _lastPromise at all?\nIf, instead of having the methods on remote return this, they return a real, new, promise, Deferred itself can look after all of the chaining and nesting.  You can even run multiple parallel chains of action at the same time (handy if you want to simulate somebody releasing keys whilst dragging, for instance) and wait for them all to complete with promises/all.\nThat's basically the approach I took: I used genuine Deferreds, with each method (or then) returning a real new instance of Deferred, but I basically wrapped/converted those Deferreds with an augmented version of Deferred, which essentially added an API very similar to that of PWD, i.e. to avoid most need of 'then' calls.  No stack, no _lastPromise needed.  Again, I suspect I'm missing something?\n(Btw, whilst I'm here, I've got to say I love this project. In only a few days I've managed to get fully automated system tests up and running which involve launching a Silverlight app, running automation into that using a JS<->Silverlight bridge, then moving into an embedded iframe inside the Silverlight and automating the Dojo code running inside that.  Needed a bit of poking into the lower-level webdriver json wire protocol code as its implementation of frame/switchTo doesn't seem quite right, but Intern is looking to be a fabulous replacement for the spookily similar in-house system we've built over the last year. Thank you!)\n. Mocking (and other) libraries come and go. It'd be nice not to be forced to use any one particular type of mock library. Currently we use Sinon (with a tiny workaroudn for XHR2), pulled in via require, but right now there's nothing stopping us moving to another library, or migrating piece-by-piece as we like.\n. We've actually found integrating Sinon with Intern to be very straightforward, and have been happily using the two together since June 2013 without any problems, using the standard 'built' Sinon distribution.  We've a crazy-simple top-level sinon.js module, which works around Sinon's current AMD support:\ndefine([\"./sinon-dist/sinon.js\"], function() {\n    return sinon;\n});\nTests that want Sinon simply pull that module in and use the resulting module value.  If Sinon is changed so that it's more AMD-friendly later, we'll replace our module with a reference to that directly.\nWe used to have some nasty code that helped Sinon work with the XHR2 mechanism in Dojo, but they now work together out of the box.  We also used to remove the global sinon variable, but we now leave it in place so that sinon-chai works.\nIntegrating sinon-chai used to be slightly tricky in Intern, but when Intern exposed some more bits of chai, that's straightforward too:\ndefine([\"intern/chai!\", \"third_party/sinon-chai/lib/sinon-chai\"], function (chai, sinonChai) {\n        chai.use(sinonChai);\n        // Other bits: we also integrate Chai-as-promised and our own chai helpers too...\n});\nWe're currently on Sinon 1.10.3, Intern 2.1.1 and Sinon-Chai 2.5.0.  (We can't use Sinon-Chai 2.6.0 as it doesn't play nicely with Chai 1.9.1 from Intern.)\nHope this helps somebody: the integration of the existing public releases of Sinon and Intern doesn't have to be difficult.\n. What's the command-line you're issuing to run Intern with this code?\n. Can anybody comment on this?  (I've also just confirmed that Mocha's beforeEach also works the same way as Jasmine and RSpec, and runs before every test rather than everything at the current level.)\n. Thanks Colin.\nWhen you're working with nested contexts and the bdd interface, it's certainly extremely desirable that beforeEach does indeed run before each test, otherwise in the face of nested describes, beforeEach loses almost all utility as it then works in almost the same way as before.\nWith the current beforeEach semantics, we ended up writing, at each level of describe, a function that sets up the context for the current describe, but firstly calling the same function from the previous level.  Very ugly, error-prone and manual.\nTo test it all out, I've actually written a local extension which I've called beforeEvery/afterEvery, which works as the beforeEach in Mocha, Jasmine et al, and indeed runs before/after every test.  With that, we've ended up deleting all of that manual setup chaining.  In the face of beforeEvery/afterEvery, we no longer ever use the plain official Intern beforeEach as it's never a useful concept.\n(Btw, I'd much rather see Intern change its beforeEach semantics, of course, as that'd make it easier to switch between Intern and Mocha/Jasmine, and make the semantics match the name and expectations from other frameworks.  The local extension isn't really suitable for a pull request, I'm afraid, as it just fits into the bdd layer rather than modifying the underlying Suite object.)\n. Lovely. Thanks very much.\n. I ran this against some unit tests I already had for a temporary 'beforeEvery/afterEvery' implementation I already had, and it's exposing some unexpected afterEach rewind behaviour with the current version of this patch:\nIf I have three levels of beforeEach/afterEach (called 'top', 'middle' and 'bottom'), then I'd expect code to run in the following order for tests in the 'bottom' level:\ntop-level beforeEach\nmiddle-level beforeEach\nbottom-level beforeEach\nbottom-level test\nbottom-level afterEach\nmiddle-level afterEach\ntop-level afterEach\nHowever, the current version of this request produces the following order instead:\ntop-level beforeEach\nmiddle-level beforeEach\nbottom-level beforeEach\nbottom-level test\ntop-level afterEach\nmiddle-level afterEach\nbottom-level afterEach\nThat is, the afterEach unwinds top-to-bottom rather than bottom-to-top, which seems rather unexpected.\n. @csnover Excellent question about calling parent beforeEach/afterEach functions. I'd expect that if a beforeEach fails in a particular level, that level is dead: any tests in that level, and child suites below that level, would be expecting that beforeEach to have completed successfully, so they should not be run at all.\nafterEach is a bit more interesting: afterEach is rather like a 'finally' block, so I think I'd expect that it'd still try to run parent afterEach functions to get them to clear up even if ones lower down failed.  As a concrete example, if I had a top-level beforeEach that opened up a tab in a UI, then a nested series of describes where one of the afterEach calls failed, I'd still hope that as the suites unwound, the top-level afterEach would be called which would close that top-level tab again.\nI'm not sure I understand your second question there. I thought that all the code directly in a describe ran at test registration time, and then the beforeEach/it/afterEach comes along during test execution time?\n. I'm not absolutely 100% on Intern's mapping between suites and bdd describe blocks, so I'll talk in terms of the latter:  If I created a describe block containing a beforeEach and an afterEach, but had no tests or child describes in it, I'd not expect that beforeEach/afterEach to be called. But if I did add a child describe with a test in it, I'd expect them to be called around the test.  I think I'm saying that beforeEach/afterEach are just tied to tests rather than suites. Code directly inside a describe function isn't called each time up or down the chain - just once at registration time: beforeEach/afterEach are, I think, short for beforeEachTest/afterEachTest.   What would it mean in BDD interface terms if they were to execute when suite or test were executed rather than just test?\n. Code in master now passes the unit tests I had for my implementation of beforeEvery + afterEvery.  I'll try to get our full system tests running through against it later today.\n. Yep, all is good. We switched all our tests over from using my hokey beforeEvery/afterEvery to the new beforeEach/afterEach and all is well.  Thanks!\n. We upgraded to 2.34 (and then 2.35 to see if it was just 2.34 that was broken) a couple of days ago to try to work around a bug in the Firefox driver, and we were seeing the exact same problem with both.  So, @samdelagarza, it's not just you, and it's not just Chrome.\n. For some plugins you may be able to get away with injecting \"intern/chai!use\": that effectively gets you the 'use' property of chai (although you can't get the full chai object).\nWe do this to wire in the sinon-chai plugin and to register our own Chai extensions.\nsinon-chai is a little more challenging, as it also wants chai utils. We're currently working around it as follows:\n```\ndefine([\"intern/chai!Assertion\", \"intern/chai!use\", \"./third_party/sinon-chai\"],\n function (Assertion, chaiUse, sinonChai) {\n// In order to boot up sinon-chai, we need 'chai', and 'chai utils'.\n// Unfortunately we can't get at chai utils except through intern/chai!use,\n// but chai!use currently provides a broken value for the chai. Fortunately\n// it only needs the Assertion class out of it, so we can fake one up.\nfunction bootSinonChai(brokenChai, util) {\n    var fakeChai = {\n        Assertion: Assertion\n    };\n\n    sinonChai(fakeChai, util);\n}\nchaiUse(bootSinonChai);\n...\n\n```\n. In case it's of use to you, all of the code and tests we run in Intern are written in ES6.  We get it to run by using Babel to cross-compile it all over to ES5 beforehand.  (It's all automated in gulp, so it's automatic and instantaneous.)\nThat might not work for you if you're just interested in pure Harmony execution, but it works for us as we're ultimately targeting browsers that don't do ES6 properly anyway.  Also, be aware that one major pain area there is that Istanbul doesn't yet cope with reading in the source maps, so we can't get accurate coverage information against the ES6 source, only against the transpiled ES5.\n. We're happily creating Dialogs in our unit tests, and components derived from Dialogs (with Intern 2.2.2), so I don't think it's quite as simple as Dialog being a problem.\nWe've certainly seen the error you give before: it's usually emitted by Intern when it comes across a module with a define call that doesn't have a dependency array as its first parameter.\nOn the face of it, loading one of the nls files such as nls/common.js would cause this to break, as it defines a map with no dependencies array - and if you brought it in directly it would - but Dialog.js loads it through the i18n plugin, via dojo/i18n!./nls/common, which loads it in a different way which shouldn't trip up the Intern loader.\nDo you have some other module that is loading NLS files without going through the dojo/i18n plugin?\n. FYI, we tried to do this with a reporter a while back, but reporters currently have to run synchronously, so we couldn't do it that way.  (We'd request that a screenshot be taken, but the test would have been cleared down and the next test running by the time the screenshot happened.)\nAs a workaround, we ended up wrapping and intercepting 'bdd.js' with our own custom version that wraps all tests with an extra handler that takes a screenshot when erroring.  (That can work with, and return, promises, so we can block the teardown and next test until the screenshot completes.)\n. @nwhite89 The workaround we have means we don't touch any of our tests except for having all our test files bring in our own version of the 'bdd.js' interface file.  In that, we provide an alternative version of 'it' which delegates onto the real bdd it function, but wraps the function passed to take screenshots where errors are occurring.  We definitely didn't want to have to add afterEach calls to all of our suites.  (We were using an alternative bdd.js file anyway in order to provide ourselves with useful 'xit/xdescribe' functions (like Jasmine provides) which makes it easy to disable individual tests.)\nBut yes, ideally Intern would provide its own first class support for this directly, especially as it's not possible to do this with the existing reporter APIs.\n. The other use case for this feature is unrelated to execution speed: if you want to put a breakpoint in your code to see what happens during a failing unit test: re-running all the tests makes that problematic as the breakpoint will be hit for multiple running tests, not just the one you're interested in.  It's very useful to be able to focus in on one or a few unit tests.  Right now we end up going back to the code, commenting out (or skipping) uninteresting tests and running it again to ensure that if the breakpoint is hit, it's only during the interesting test.\n. Documentation for the command-line (and many other ways to launch Intern) are here: https://theintern.io/docs.html#Intern/4/docs/docs%2Frunning.md/node\n. What about making this a separate module that can be installed separately (e.g. 'npm install intern-teamcity')?  That way, the dependencies aren't an issue, and it would pave the way for other modules to do likewise.  I'm not a teamcity user, so it would be nice to avoid the teamcity dependencies...\n. ",
    "neonstalwart": "i collaborated on an approach that maintained a stack of promises related to a specific context and calling any promise methods on PWD (then, always, otherwise) created a new context.  processing of the stack in the outer context was blocked by a promise representing the processing of the inner context and once the inner context was finished it would allow the outer context to continue processing it's stack of promises.  this way, the remote.baz() call above would not be deadlocked but the .blah() was properly blocked by the return value of remote.baz().\n@csnover do you see any obvious issues with this approach?  i could see if we can clean it up and submit a PR against the latest code.\n. squire is definitely requirejs specifc - it uses the context concept (which is specific to requirejs) but could be changed to use the map config (which is standardized) and then work across more AMD loaders.\n. if the difficulty is due to limitations of AMD then i'd suggest bringing it up at https://groups.google.com/forum/?fromgroups#!forum/amd-implement - i've found that to be the best way to influence AMD.\n. presumably your corporate firewall will allow https so then you can use insteadOf to redirect git://github.com/ to https://github.com/.  i keep the following couple of lines commented out in my ~/.gitconfig so that i can uncomment them whenever i'm on site and blocked by a corporate firewall.  hopefully it works for you.\n[url \"https://github.com/\"]\n   insteadOf = git://github.com/\n. @breerly i think the point is that when it's showing errors from the tests then you have it working.  \nthe code has intentional errors to show you what errors look like when you use intern.  \nhowever, it probably would be good to have at least one test that passes to show what that looks like too :smiley: \n. have you tried setting name in the capabilities config?  i expect that should achieve what you want. \ni guess if you knew this then maybe you're suggesting that intern should generate a default name or did you just need to know that it was possible to do this?\nalso, if you're using travis, the build will be automatically filled in\n\nThe build capability will be filled in with the current commit ID from the TRAVIS_COMMIT environment variable automatically, if it exists.\n. fyi - https://saucelabs.com/docs/additional-config#desired-capabilities outlines the various things you can put into capabilities\n. see https://saucelabs.com/appium/tutorial/3 for what you need to use for the capabilities if trying to run this using sauce labs.  https://github.com/appium/appium/blob/master/docs/caps.md shows the appium docs for the capabilities that can be set.\n. @stdavis stubbing and mocking is independent of running tests.  that's not to say that intern couldn't include something but it explains how it's quite easy to get by without this functionality being in intern.  \n\ni use sinon in my tests but i've learned which parts not to use with AMD... one big hint with AMD is only use spies and stubs but not stub behaviors\ni put a few days effort into bringing sinon into better shape for working via AMD and it should be usable from master of sinon. waiting for a new release and hoping it doesn't get accidentally broken but wouldn't be surprised if it does get broken since i don't have the bandwidth to watch the codebase like a hawk.\n. @jason0x43 due to the way sinon/lib/sinon.js loads AMD dependencies in parallel there are potential race conditions. an example is that sinon.behavior may not be defined by the time this block of code is executed - https://github.com/cjohansen/Sinon.JS/blob/v1.10.3/lib/sinon/stub.js#L135-149\nthis issue usually reveals itself when you have something like sinon.stub().returns(...) and an error is thrown indicating that there is no returns method. \nthe general fix for this was to rewrite all the sinon modules to explicitly declare the other modules they depend on, create a method that defines the API of that module so that it can be called at a time which is appropriate for the way in which the code is being loaded, and finally, some code was extracted into a new module in order to break circular dependencies that existed in just about every module - they depended on sinon/lib/sinon.js for utility code defined there and sinon/lib/sinon.js depended on each of the other modules in order to generate the full sinon.* exported from sinon/lib/sinon.js\n. I should also point out that a built version of sinon, which would have all the dependencies available synchronously, has its own issues. in order to bundle 2 AMD libs as part of the distribution the build script creates a dummy define that is within scope of the source of those bundled external dependencies. unfortunately, it is also within scope of all the sinon modules which means that if you try to load the built distribution of sinon, the real AMD define is never called and so you can't get a reference to sinon as an AMD dependency - you need to reference the global instead. \nthe whole thing was a huge mess. @stdavis I think the question for me is how did sinon ever come so far in such a state :stuck_out_tongue_winking_eye: \n. > I've been using intern's order module to load all the pieces\ni've been doing a similar thing for a quite a while too.\n. @jason0x43 have you tried to use sinon from master?  apparently there should be a new release soon and i'd like to know if you've found anything broken.  it would be best to address all the issues within sinon if possible.\n. @jason0x43 1.11.0 was released very shortly after i left my previous comment - so 1.11.x has everything that i was talking about in master.\n. do you ever see the console.log(\"TEXT: \" + text);?\ni believe this is the same issue reported in #14 - nested calls (ie calling browser.xxx inside the callback to another browser.xxx call) are known to be broken - and in that case you wouldn't ever see that log.\n. @alexanderdean you can use any assertion library you want as long as it throws errors\n\nIf it throws an error on failure, it works with Intern.\n. the docs are the ones for loaderUrl at https://github.com/theintern/intern/wiki/Configuring-Intern#configuration-options and https://github.com/theintern/intern/wiki/Running-Intern\n. this is just a failing test.  i'm not actively working on a fix, but figured that at least the test might be useful if someone else has the time to work on fixing it.\n. the issue is calling dfd.resolve(returnValue); on line 858.  dojo/Deferred#resolve does not unwrap promise values.\n. this fix works.  :warning:  i have the same feeling that i think you have about the whole mechanism that implements chaining - something doesn't feel right about it but so far all tests are passing.\n. i haven't done any testing except that if that wording refers to admc/wd#185 (which i opened) then i've done some surface level testing in order to ensure i could use that feature via intern - and nothing obvious broke.  if i get time (probably not today) i'll add a PR to this issue and then travis can tell us if there are any issues.\n. quick update... running intern's tests locally (chrome and FF on osx) there are no issues.  however, i wanted to work on adding a test that failed before the update and will pass with the update - this is not exactly complicated but i have not had time to complete the test yet.\n\nsomething like the following should fail with 0.1.0 but work with 0.2.0\njs\nremote.get(require.toUrl('./data/basic.html'))\n    .elementByTagName('h1')\n    .then(function (h1Element) {\n        return remote.execute(function (node) {\n            node.innerHTML = 'touched';\n        }, [ h1Element ]);\n    });\nthe issue that should be seen is that in 0.1.0, the wd h1Element isn't serialized into something suitable such that the node argument is a reference to the corresponding h1 element in the browser.  this should be working in 0.2.0.\n. i'm doing this in 2 parts to confirm that this test fails using 0.1.0.  once it fails then i'll add the commit that upgrades to 0.2.0 to make it pass.  i also noticed that there's _codeToString in 0.2.0 that would replace the wrappedFunction code in intern's wd.js\n. ok, that's all the changes for now and it seems like everything still passes.\n. haven't tried it but... https://github.com/admc/wd/tree/v0.2.2\n. maybe at some point when generators are in a stable release of node we could consider something like yiewd?  if using generators is a desirable approach then i would think we could offer the promise-based or generator-based remotes as a configurable option so that you can opt-in to generators.  just a thought since as far as i'm aware generators seem to meet all of @csnover's criteria so far.\n. @JosePedroDias, who is also working on a JUnit reporter, opened #88 - maybe there's enough to piece together a PR between the couple of existing attempts?\n. yeah, this is a very basic structure that needs to be generated.  i would think the js-doc-parse util might be suitable.\n. there are a few config mechanisms already available so i'm curious what kind of things you'd like to configure so i can understand the scope of what you'd expect to do with this mechanism - it's possible something already exists that's suitable (e.g. AMD module config, a shared config module that resolves to either config1 or config2 depending on how you configure AMD map, etc) so i'd like to understand the shortcomings of all of the current mechanisms before we consider adding a new mechanism.\n. > To me the ideal set of configurations is:\n\nintern.js - main config file\nintern_browser.js - local browser Selenium tests, with config inherited from intern.js\nintern_sauce.js - SauceLabs tests, with config inherited from intern.js\nand being able to run any of those configurations with a variety of parameters.\n\nso, what's stopping you from doing this?  i'm still having trouble seeing the part that's missing - maybe i'm not looking at this with the right perspective.\n. > I'm not really clear how https://github.com/amdjs/amdjs-api/wiki/Common-Config#config- would help.\nhere's one idea\njs\nloader: {\n  config: {\n    'app/tests/config': { server: 'http:// \u2026', other: 'stuff' }\n  }\n}\napp/tests/config.js\njs\ndefine(['module'], function (module) { return module.config(); });\nin some test\njs\ndefine(['app/tesst/config'], function (config) {\n  this.remote(config.server);\n  // etc.\n});\nanother option is to use the AMD map config\nintern.js\njs\nloader: {\n  // set this file as the \"config\" dependency\n  map: { '*': { config: 'app/test/intern' } }\n},\nserver: 'http://default.server/'\nintern_browser.js\njs\nloader: {\n  // set this file as the \"config\" dependency\n  map: { '*': { config: 'app/test/intern_browser' } }\n},\nserver: 'http://other.server/'\nin some test\njs\ndefine(['config'], function (config) {\n  this.remote(config.server);\n  // etc.\n});\n. > However why is the server hardcoded here:\ni figured you could work out how to get some other value in there yourself - i was just demonstrating where the value goes once you've got it.\n. to properly fix the problem, it might be helpful for intern to have it's own intern/node plugin to resolve it's own node dependencies so that the resolution is as expected from within intern.\n. @csnover right, you want to ensure that within intern you get a Node require from a known place.  as of now, intern depends on dojo/node which is a deterministic module but dojo/node uses this.require.nodeRequire to facilitate path resolution and loading and that value is non-deterministic.  the only way to avoid this is with an intern/node module that gets it's Node require from somewhere deterministic - that will ensure path resolution rules relied upon by intern itself will be consistent.\n. i've been thinking about what it would take to provide a hook that makes it possible to replace/augment PromisedWebDriver (PWD) and have intern/lib/wd consume whatever you provide to it that implements some common API.  the API might need to be somewhat different to the current implementation of PWD in order to make it flexible but the ultimate solution should make it possible to provide something that does promise chaining or to provide something that uses generators or whatever else someone might think they need as remote.\ni'd be interested in pursuing something along those lines if anyone else has some ideas.\n. @draperd the initial scope for converting Dojo unit tests to intern is just dojo (not dijit) and as @csnover   said, intern 2 has a better client library that should either already work or be easier to fix\n. if your assertions (or in this case errors) happen asynchronously then you need to make sure you are using one of the patterns outlined in the asynchronous testing docs so that the test doesn't end before the async action is complete.\nleaving this open for someone to decide if the silent error should/can be addressed.\n. i believe it's working as expected (so maybe a doc change is in order) but if you want to do something that involves a function, it might be worth trying executeAsync.\n. i see what you're saying - in that case, we can't know that there are suites until after we load client.html.  i think there are probably enough alternatives that can work that it should be reasonable to say that if suites has no length at the time the runner is invoked then client.html will not be loaded.\n``` js\n// this would work ok\nsuites: [ 'has!host-browser?tests/browser' ]\n// so would this\nsuites: [ main.mode === 'client' ? 'tests/browser' ]\n// but this would not\nif (main.mode === 'client') {\n    config.suites = [ 'tests/browser' ];\n}\n```\nan alternative is to add a config option to explicitly control whether or not a ClientSuite is created by the runner.\n. as those docs point out, it should work with 'intern/dojo/node!Acme/Demo'\n. sorry, with your code snippet (which isn't node, my mistake) i'm not sure how you could access it at all.  the return Person isn't assigned to anything you can reference.  if instead you created a global Person then you could do\njs\ndefine([\n  ...\n  'Acme/Person'\n], function ( ... ) {\n    // access the global directly since the script is now loaded\n   var person = new Person();\n  ...\n});\nalternatively, as the docs suggest, you could try use-amd which provides a way to use globals as AMD dependencies and will provide a value to the module\njs\ndefine([\n  ...\n  'use!Acme/Person'\n], function ( ..., Person) {\n    // access the argument passed to the module's factory\n    var person = new Person();\n    ...\n});\n. you can test non-amd browser code too.  my point about needing to expose a global is that i'm not sure how you'd use this code anywhere\njs\n(function(){\n    function Person(){}\n    return Person;\n)();\nif you were to inject a script in the browser with exactly those contents, how would you get access to Person?\nyou'd need to do something more like this:\njs\nvar Person = (function(){\n    function Person(){}\n    return Person;\n)();\nor, assuming you're not doing anything else in that closure then your script could be just:\njs\nfunction Person() {}\n. duplicate of #102.  please search the issues before posting new ones.  a simple search for 'JUnit' would have found the existing issue.\n. it does not - compare these between intern and intern-geezer\njs\nfunction Ctor() { this.foo = 'bar'; }\nassert.deepEqual(new Ctor(), { foo: 'bar' })\n. do you have anything listening on port 4444? i just had the same problem and fixed it by stopping my local selenium server.\n. i believe https://github.com/theintern/leadfoot/issues/21 is related to this - i.e. leadfoot doesn't support appium but would be willing to if someone can help with working on the necessary changes.\n. ...and while i'm thinking of it, maybe some more distinct styling for the rows which represent skipped tests - a gray background perhaps?\n. :+1: \n. maybe add test.skip message too?\n. ",
    "wkeese": "You should remove the comment at https://github.com/theintern/intern/blob/master/lib/wd.js#L595, right?\n. Either selendroid or appium, see http://www.infoq.com/news/2013/05/appium-android.   The question is how to get Intern to use that driver.\n. I didn't mean \"get\" in some philosophical sense.   I meant, tell me what to text to put in the configuration file.\n. I'm wondering why you don't just do \"normal\" chaining, something like this:\nbrowser.get('http://www.google.com')\n                // Check if the browser is running on a touch device\n                .eval('\"ontouchstart\" in document || window.navigator.msMaxTouchPoints > 0').then(function(hasTouch){\n                        assert.true(hasTouch, \"touch device support not yet implemented in the test\");\n               })\n               .elementByName('btnI')\n               .clickElement()\n               .end()\n               .waitForElementById('top-content', 5000)\n               .elementById('top-content')\n               .text().then(function(text) {\n                      assert.equal('this assert is going to fail', text, 'test is failing as expected');\n                });\nAnother approach might be to split the tests into two suites, like:\n```\nvar touch;\nregisterSuite({\n    name: \"check for touch\",\n    \"check for touch\": function(){\n            var browser = this.remote;\n            browser.get('http://www.google.com')\n                // Check if the browser is running on a touch device\n                .eval('\"ontouchstart\" in document || window.navigator.msMaxTouchPoints > 0').then(function(hasTouch){\n                    console.log(\"hasTouch: \" + hasTouch);\n                    if (hasTouch) {\n                        assert.fail(true, false, \"touch device support not yet implemented in the test\");\n                    } else {\n                         touch = hasTouch;  // save result\n    }\n});\nif(touch){\n  registerSuite({\n    name: \"real tests\",\n    \"test 1\": function(){\n            var browser = this.remote;\n            browser.get('http://www.google.com')\n                        .elementByName('btnI')\n                        .clickElement()\n                        .end()\n                        .waitForElementById('top-content', 5000)\n                        .elementById('top-content')\n                        .text().then(function(text) {\n                            assert.equal('this assert is going to fail', text, 'test is failing as expected');\n                        });\n                    }\n                });\n            return browser;\n    }\n  });\n}\n```\n. OK.   Well, no matter how complicated the actual test is, I personally don't think it's reasonable to expect nested calls (ie calling browser.xxx inside the callback to another browser.xxx call)  to work.  It seems excessively complicated.   I don't see that pattern in https://code.google.com/p/selenium/wiki/WebDriverJs#Promises either.\nPS: To put it another way, I thought the test is supposed to return a promise that completes (resolves or rejects) when all the commands have finished running.  But your example is not doing that.\n. Well, for the example you gave, wouldn't it just be something like this?\nreturn this.remote.get('http://www.google.com')\n                .eval('\"ontouchstart\" in document > 0').then(function(hasTouch){\n                        assert.equal(true, hasTouch, \"touch device support not yet implemented in the test\");\n                }).clickElement()\n                .end()\n                .waitForElementById('top-content', 5000)\n                .elementById('top-content')\n                .text().then(function(text) {\n                     assert.equal('this assert is going to fail', text, 'test is failing as expected');\n                });\nIf your actual test case is more complicated, if you show me the actual test case then I'll tell you how I would implement it.\nAlternately you can just wait for them to fix #14, but I don't know when/if that will happen.   If it is fixed, your original code should work, except that you need to get the return statements correct (to return a promise that resolves after everything is finished), like the example given in #14.\n. I assume your test would hang too if your function returned the right thing (i.e. a promise that resolves when all the commands have completed, rather than returning \"this.remote\").\n. It might indeed be an error upstream or a problem on my end, but anyway, my test case is in https://github.com/wkeese/sf.   Clone sf as a sibling of the latest intern/ and run either \"runlocal.sh\" or \"runsauce.sh\".   Hopefully that reproduces the error for you.\nFYI, I checked out the latest intern and ran your unit tests successfully, using this command from the intern directory:\n$ node runner.js config=tests/selftest.intern.js\n. FYI, looks like this eventually implemented (although Colin initially closed the ticket as invalid).\nVersion 3 lets you set excludeInstrumentation: true, see https://theintern.github.io/intern/#common-config.. This ticket's title is rather vague, is it about <input autofocus> not working?\n. No, it's caused by an update to Intern 1.7.   Testing against Chrome 35 using Intern 1.6 works as expected, but then upgrading to Intern 1.7 (without changing anything else) causes test failures.   At least this is what I'm seeing with https://github.com/ibm-js/delite/tree/0.1.4-dev.\n. OK thanks, I only read to comment 4.   Apparently I'm supposed to pass the --test-type flag to Chromedriver.\nI looked at https://github.com/theintern/intern/wiki/Configuring-Intern which links indirectly to https://sites.google.com/a/chromium.org/chromedriver/capabilities, and tried various settings in my environments section, but no luck yet:\n{\n        browserName: \"chrome\",\n        args: [\"test-type\", \"--test-type\"],\n        \"chrome.args\": [\"test-type\", \"--test-type\"],\n        chrome: { args: [\"test-type\", \"--test-type\"] }\n    }\n. Ah, OK this gets rid of the warning message:\n{\n        browserName: \"chrome\",\n        chromeOptions: {\n            excludeSwitches: [\"ignore-certificate-errors\"]\n        }\n    }\nAnother approach is:\n{\n        browserName: \"chrome\",\n        chromeOptions: { args: [\"test-type\"] }\n    }\nUnfortunately I still see test failures.  Seems like WebDriver on Chrome 35 is just flaky.\n. I guessed it from https://code.google.com/p/chromedriver/issues/detail?id=799#c33.\n. For the record (i.e. in case anyone reads this ticket in the future) the test errors I was seeing (which seem to be unrelated to the warning messages I originally mentioned) go away with Chrome 36.0.1985.84 beta.\n. Needing the sleep(500) calls looks like a bug, not a migration issue.\n. BTW, as you saw, webdriver on Chrome 35 just seems badly broken, probably unrelated to Intern.  I upgraded to Chrome 36 beta and it worked better.\nWhat is your setExecuteAsyncTimeout(500) call for?  I can guess what it does, but why does it fix the test failure? \n. I don't know any way to fix it but we workaround it in our intern.js file via:\nloader: {\n    baseUrl: typeof window !== \"undefined\" ? \"../../..\" : \"..\"\n},\n. @kevingreen24, I'd like to see it fixed too, but in the meantime why don't you just use the workaround I listed above?  It's only one line of code.\n. > One possible mitigation strategy to avoid an infinite wait would be to use an execute call instead of a URL retrieval to poll for a property of the unit testing system, to verify whether or not it thinks it is still running. \nI guess what I expected was simply that the client would call webdriver's executeAsync() to run the unit test on the server (i.e. in the browser), and executeAsync() would presumably internally poll a few times a second until the test was finished.  \nWith the current code, I can confirm through logging that intern/lib/reporters/webdriver.js is calling publish(\"/client/end\") yet the client is not receiving it.  (I see the logs by pressing the \"interactive session\" link on BrowserStack and then doing F12.)  Pluswhich, manually publishing the topic from developer tools doesn't work either (i.e. require([\"dojo/topic\"], function(topic){ topic.publish(\"/client/end\", 12345); }))   I don't understand how you pass messages from the browser back to the client so I can't debug any further. \n. @csnover - yes, thanks, that fixes the problem I listed here.   I'm getting other test failures but I'll report them separately after investigating them some more.\n. Ah OK thanks.\n. It's \"about:blank\".\nBut I think you're asking the wrong question.  In 3.0.3 it would print messages as each unit test suite ran.  Now it doesn't print any of the messages.  So the error is presumably happening at the beginning, not when it's trying to collect code coverage.\n. Looks like the problem started with theintern/leadfoot@cecdc2f816bd5aa1a72df2678208d5662c14ae55.\n. Thanks, I didn't try 3.0.5 but 3.0.6 seems to be working.\n. ",
    "hoschi": "FYI: Bower also leaves the dojo/chai dirs emtpy when I added \"intern\":\"1.0.0\" to by components.js :(\n. Thanks, this worked :)\n. ",
    "Daiz": "Figured that might've been the case. Oh well, I guess I'll stick with mocha for cases I want to use Testling-CI with.\n. ",
    "stdavis": "Not sure if this would be helpful. I've created a module for mocking module dependencies using the Dojo loader: https://github.com/stdavis/StubModule\nWorks well for my needs. I don't see any reason why it wouldn't work in intern but haven't tried it yet.\n. @csnover That is a great question. Just moved the repository to my organization's account and added the license.\nhttps://github.com/agrc/StubModule\n. @csnover: How are people currently getting spy/mock functionality in intern without something like this? Seems like such a basic requirement for a testing framework that I'm surprised that intern has come this far without it. Am I missing something?\n. Yes, I was using \"condition\" and not \"contition\" in my source. Typo in issue has been fixed.\n. I've tried that also and it still says that the timeout was reached and never gets passed the waitForCondition. Do you have a working example?\n. Thanks. I will check them out.\nOn Thu, Nov 21, 2013 at 10:36 PM, Colin Snover notifications@github.comwrote:\n\nI added very basic waitForCondition and waitForConditionInBrowser tests\nin master and they do not hang.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/theintern/intern/issues/113#issuecomment-29050088\n.\n. @csnover You were right to be worried. Adding stdio: 'inherit' broke everything. :(\n\nI did find out that Istanbul supports a --color command line flag that overrides the check on process.stdout.isTTY via this pull request. The only problem is that this was added to Istanbul at v0.3.15. Looks like Intern is currently using v0.2.16.\nIs there any reason why intern is hanging back at v0.2.16 or am I free to submit a PR to upgrade it's dependency on Istanbul and add the --color flag to the grunt task. I was able to get the colored output working after making these changes.\n. You are welcome! Thanks for the great project.\nOn Wed, Jun 24, 2015 at 6:18 PM, Colin Snover notifications@github.com\nwrote:\n\nThanks for your patch!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/pull/423#issuecomment-115052247.\n\n\nScott Davis\nUtah AGRC http://gis.utah.gov/developer/\nstdavis@utah.gov\n@ScottAGRC https://twitter.com/ScottAGRC\n. ",
    "iammerrick": "Thanks for sharing @phated. Squire.js is very require.js specific. \n. Please note this repository which documents the difficulty in testing AMD. https://github.com/iammerrick/Testing-AMD it should serve as documentation and a test bed for resolving this issues. @jrburke.\n. I don't understand, how are people unit testing AMD code in isolation without mocking? Are their map configs obscene? Are they using one mock per any given context? Map isn't enough, sacrifices have to be made in the tests maintainability if one uses map heavily and it's my opinion AMD should come with as few trade offs as possible.\nPlease don't give up on this problem.\n<3 Merrick\n. I'm not saying we use Squire, I would like to make AMD itself more amiable to overrides. \n. ",
    "jrburke": "I gave some feedback at the Testing-AMD repo a little while back:\nhttps://github.com/iammerrick/Testing-AMD/issues/1\nIt does rely on a requirejs-specific \"context\" capability, but looking ahead to ES6 modules, multiple instance of a Module Loader can be created, which maps well to requirejs contexts (actually better, since it does not require a name) requirejs contexts. So asking the module loader for a way to create containers of modules seems reasonable. But yes, best to start that discussion on the amd-implement list, if the rest of the feedback in that Testing-AMD issue seems to work out.\n. ",
    "cjohansen": "Relax :)\n. ",
    "ariya": "Fantastic! Thanks a lot and looking forward to trying Intern.\n. Ah, I missed those links cause I was searching for yahoo/istanbul link (good call on linking to gotwarlost/istanbul). I apologize for the false alarm.\n. ",
    "gotwarlost": "Thanks guys!\n. ",
    "bryanforbes": "When grunt.util.spawn (which calls child_process.spawn) is used to run an instance of node, that instance of node thinks that it is not being run from a TTY (process.stdout.isTTY is undefined). The readline library then uses the flag to determine how to handle output and when the flag is falsey, it assumes a buffer is being passed to readline.Interface#write(). The progress library's tick() method calls readline.Interface#write() with a null first argument (and a key sequence) to clear the console before rewriting the line which causes readline.Interface#write() to throw an error because it cannot get the length property of the null first argument.\nThis patch updates the dependencies to point to a fork of sauce-connect-launcher that is using a fork of process that accepts an option to force the readline library to assume it is being run in a terminal. The relevant changes are as follows:\nhttps://github.com/bryanforbes/node-progress/commit/3cbe3467de7a0876095554f2886dd1d4b9434d1a\nhttps://github.com/bryanforbes/sauce-connect-launcher/commit/94e67ae4f4a0cdbb935b971273cc07ec92ed8b43\n. I misinterpreted your request. The end-user, when first using the grunt task, will get the following exception when a functional test suite is launched\n```\nWarning:\nstring_decoder.js:129\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n                 ^\nTypeError: Cannot read property 'length' of null\n    at StringDecoder.detectIncompleteChar (string_decoder.js:129:18)\n    at StringDecoder.write (string_decoder.js:99:28)\n    at Interface._normalWrite (readline.js:303:30)\n    at Interface.write (readline.js:294:49)\n    at ProgressBar.tick (/Users/bryan/Projects/sitepen/wwc/sow5/wwc-sow5/src/intern/node_modules/sauce-connect-launcher/node_modules/progress/lib/node-progress.js:114:11)\n    at IncomingMessage. (/Users/bryan/Projects/sitepen/wwc/sow5/wwc-sow5/src/intern/node_modules/sauce-connect-launcher/lib/sauce-connect-launcher.js:63:11)\n    at IncomingMessage.EventEmitter.emit (events.js:95:17)\n    at flow (_stream_readable.js:570:9)\n    at IncomingMessage.pipeOnReadable (_stream_readable.js:598:5)\n    at IncomingMessage.EventEmitter.emit (events.js:92:17) Use --force to continue.\nAborted due to warnings.\n```\nWhen the user tries running the grunt task again, it will hang after the proxy is started because the zip file has downloaded, but no jar can be extracted from it.\nWith this patch, the progress bar should show again while downloading, however I don't see it in travis.\n. The problem I've had with Sinon's AMD support is that it only really works in the built version, so you have to configure the loader to point to sinon/pkg/sinon. As long as we're using a version from npm, this probably won't be a problem, but it makes the package config a bit goofy.\n. I should also mention that I'm launching the test suite by navigating my browser to http://projects.dev/dojo/dojo/node_modules/intern-geezer/client.html?config=tests-intern/intern&reporters=console\n. Being a pretty heavy intern user and advocate, code coverage out of the box without much work is and was a huge selling point for me and other users. A more sensible default (like what @csnover suggested) is most likely a good thing, but for cases where dependencies aren't in those directories, excludeInstrumentation will still need to be customized. No matter what default is chosen, users that want easy to read stack traces and code coverage will need two configurations, so I vote to keep the out-of-the-box code coverage turned on.\n. task-2/\n    my-module.js\n    tests/\n        intern.js      (your project's test config)\n    node_modules/\n        intern/\ntests/intern.js should have the following loader configuration:\njs\nloader: {\n    packages: [\n        { name: 'task-2', location: '.' }\n    ]\n}\nAs @jason0x43 showed earlier (I think he mistakenly got the name of the project wrong), the intern or intern-geezer folder generally lives in a node_modules folder at the root of your project. Intern, by default, sets the loader baseUrl to two directories above its location (for the browser runner), so the location in the loader configuration above only needs to be set to '.'. If you have a package.json, make sure intern is referenced as a devDependency, so it will only install when you npm install within the package itself without the --production flag.\n. I've tested this with dojo-core and all tests pass (except those that we know should be failing).\n. ### ESM support/workflow (how it works now)\nRight now, ES modules must be transpiled into UMD or AMD modules in order to be loaded by intern. Test modules can be authored as ES modules, but because intern's module ID interface uses AMD plugins, those modules cannot be loaded by an ES module loader.\nWork through how ESM is used to author and structure tests\nI don't see (other than the AMD plugin module IDs) how authoring tests in ES modules would be substantially different than how they are authored today\nHow does Intern 4 load dependencies? How does someone include a loader for testing and/or running their app (is that a relevant question)\nI believe that Intern 4 (or possibly 5) should fundamentally change how it loads modules. To me, there should be some clear separations (forgive me if I use the wrong technical terms):\n- harnesses: interfaces for registering tests\n- assertions: interfaces for asserting test conditions\n- runner: mechanism for running tests registered with the test harnesses\n- loaders: mechanisms for loading test modules in environments\n- reporters: mechanisms for reporting test results\nRight now, Intern 3 has all 5 of these, but the runner and loader are conflated (for historical reasons). I would like to see the runner and loaders separated. For a browser environment, I could see Proxy sending the user's configuration, test runner, and the selected loader (AMD, SystemJS, etc.) inlined into the page. The runner would not need to know how to load things, but would offload that responsibility to the loader. Something similar could be done in Node.\nDo we need any dynamic behavior to replace loader plugins?\nIn my opinion, no. Intern currently uses AMD plugins to simplify loading test harness interfaces (intern!bdd -> intern/lib/interfaces/bdd) and the assertion interfaces. If we break the test harness and assertion interfaces into their own packages, there will be no need for simplifying library paths.\nHow do we replace usage of dojo/has?\nFrom what I can see, dojo/has is mostly used to determine if Intern is running in Node or the Browser. Given this usage, the Proxy or Node runner would determine which environment to set up for the test runner.\nTests using dojo/has to load specific tests for a specific environment could be broken out and the tests could be determined based on a command line flag in Intern's configuration.\nAnything special with how we distribute our packages\nWe would need to have a \"core\" package that would contain the generic test registration interfaces (like lib/Test.js, lib/Suite.js, etc.), browser runner, node runner, proxy, and configuration parser. From there, the harnesses, assertions, loaders, and reporters would be broken out into their own packages. Users would choose which of these latter packages they want to use and only bring in what they need.\nAnything special with test authoring structure or workflow to document?\nAuthoring shouldn't change much. Users using AMD now can use an AMD loader, users wanting to use SystemJS can use that loader, etc.\nWorkflow might change since how Intern works would fundamentally change. We would need to document that as we encounter workflow changes.\n. > Also, I'm all for splitting out Intern into separate packages as long as we still bring it all together under a single intern package. What are your thoughts on this?\nThat seems like a good idea: if someone wants a basic/standard install, they can use the intern package.\n\nIf the loader is externalized then how will Intern load suites provided to it in it's configuration?\n\nThe loader mechanism (which would be inlined into the environment) would read the inlined intern configuration and do its thing. The inlined configuration could (should?) have paths to the files resolved (especially for globs) so the loader doesn't have to do any crazy path manipulation.\n\ncreating a wrapper around popular loaders (dojo-loader, SystemJS, WebPack, etc...)\n\nThat's my thought. A small wrapper around the loader API or a hook to tell intern how to inline the loader (or loader script tag) into the environment.\n. I've moved the work for this over to a plugin and started updating it to the QUnit 2.0 API.. I've also found another strange behavior with \"capabilities+\" when extending from another file:\na.json:\n```\n{\n    \"capabilities+\": {\n        \"fixSessionCapabilities\": false\n    },\n\"configs\": {\n    \"browserstack\": {\n        \"tunnel\": \"browserstack\",\n\n        \"capabilities+\": {\n            \"browserstack.debug\": false\n        }\n    }\n}\n\n}\n```\nb.json:\n```\n{\n    \"extends\": \"./a.json\",\n\"capabilities+\": {\n    \"project\": \"My Project\",\n    \"name\": \"Thing\"\n}\n\n}\n```\nOutput from intern showConfig config=b.json@browserstack:\n{\n    \"bail\": false,\n    \"basePath\": \"/Users/bryan/Projects/dojo2/loader/\",\n    \"baseline\": false,\n    \"benchmark\": false,\n    \"browser\": {\n        \"plugins\": [],\n        \"reporters\": [],\n        \"suites\": []\n    },\n    \"capabilities\": {\n        \"browserstack.debug\": false,\n        \"fixSessionCapabilities\": false,\n        \"name\": \"intern\"\n    },\n    \"coverage\": [],\n    \"coverageVariable\": \"__coverage__\",\n    \"debug\": false,\n    \"defaultTimeout\": 30000,\n    \"environments\": [\n        {\n            \"browserName\": \"node\"\n        }\n    ],\n    \"filterErrorStack\": false,\n    \"functionalCoverage\": true,\n    \"functionalSuites\": [],\n    \"functionalTimeouts\": {\n        \"connectTimeout\": 30000\n    },\n    \"grep\": {},\n    \"instrumenterOptions\": {},\n    \"internPath\": \"/Users/bryan/Projects/dojo2/loader/node_modules/intern/\",\n    \"loader\": {\n        \"script\": \"default\"\n    },\n    \"maxConcurrency\": null,\n    \"name\": \"node\",\n    \"node\": {\n        \"plugins\": [],\n        \"reporters\": [],\n        \"suites\": []\n    },\n    \"plugins\": [],\n    \"reporters\": [\n        {\n            \"name\": \"runner\"\n        }\n    ],\n    \"runInSync\": false,\n    \"serveOnly\": false,\n    \"serverPort\": 9000,\n    \"serverUrl\": \"http://localhost:9000/\",\n    \"sessionId\": \"\",\n    \"showConfig\": true,\n    \"socketPort\": 9001,\n    \"tunnel\": \"browserstack\",\n    \"tunnelOptions\": {\n        \"tunnelId\": \"1510687879336\"\n    }\n}\nNot only are the capabilities from a.json not merged with the defaults, but the capabilities+ from b.json are not merged with the capabilities from a.json.. There are a few other stubs I've set up that need to be reset every time. I started down that path, but that would mean normalizing all of the paths that come in for the instrumentation hooks, denormalizing paths for source maps, etc. and it got messy quick. ",
    "cschram": "In my use case, the use of shim is in the interest of using third party libraries, rather than a lack of dependency management in the codebase itself. The problem arises where the project is using Require.js and jQuery, and Intern uses Dojo and it's AMD loader.\nMy codebase uses shim for third-party modules, so that I have them included in the arguments for a modules factory function. This becomes a problem when trying to use the Dojo loader without shim support - I could still access these libraries from window but because they're included in a factory function's arguments it gets overridden as undefined. I could use a work around, like checking for undefined dependencies and grabbing them from window, but ideally the test suite I'm using shouldn't force me to change my code for the testing environment.\nI can change my code to work this way today, but I think in the future it should be supported by Intern via plugin (like the now defunct use plugin for Require.js) for compatibility-sake, unless you're only interested in officially supporting Dojo-based projects.\n. Sorry that it was unclear.\nEssentially I have proxyUrl set to something like http://my.server.com/intern/, which is our Apache server that serves our web-app (or at least the development version), so we can properly test AJAX requests without worrying about cross-origin issues. The /intern path is reverse proxied by Apache to the Intern proxy server running on port 9000. When running tests, the runner then tells Selenium to load http://my.server.com/intern/__intern/client.html?config=path%252Fto%252Fintern&sessionId=....\nThe URI encoded config variable is then loaded by client.js through the Dojo loader (http://my.server.com/intern/path%252Fto%252Fintern.js). This would normally work finewhen connecting directly to the Intern proxy, however when going through the Apache reverse proxy first, Apache throws a 404 - our configuration isn't setup to deny URL's like this, so I imagine it's an issue with mod_proxy.\nThis isn't really the fault of Intern, but it's pretty easily avoided if decodeURIComponent is called on the config variable before being loaded by Dojo.\n. It does, thank you very much. Sorry to waste your time.\n. This is explicitly for a case outside of what's listed on the wiki page for directory structures (dictated by the project, I'm afraid), so it would require the ability to change the CWD in the grunt task with a config option.\nRight now I'm just using a modified version of the grunt task provided by Intern (I normally don't see the point in making a pull request for a one line change), but seeing as it's a small change and allows more flexibility in the directory structure I think it would be a nice addition.\n. My mistake. If that's the case then that should work just fine, thanks.\n. ",
    "floreat-bangoria": "My line manager wants me to abandon piloting of theintern because I haven't been able to get it (i.e. git/npm) to work properly through our proxy yet- our loss, but it's a shame that it's not readily accessible if you're in a corporate architecture -  this is not helpful for companies who previously used expensive bespoke tools and would like to invest in new ones like these. But I'll be using it for my own projects ;D Great work fellas\n. It's npm that has the problems installing for us - cloning from git is no problem, but actually installing is not happening because of the sauce connect launcher, which seems not to be readily accessible from behind these types of proxies https://saucelabs.com/docs/connect#faq\n. I linked the page because it seemed to imply that the sauce connect launcher did not work through firewalls, but you don't have to use that with your application, which is great, because - what I'm saying is- I couldn't if I wanted to!\nBut yes, since your last update to the installation (npm install intern command), i've been able to install this on my VM through our proxy. I think when this is more established and more guides have been written, there'll be less teething problems like this, for people like me - who do not understand what we have to do to make it do the all the things\n. ",
    "bittersweetryan": "Very cool, I'll give ir a shot tomorrow morning.  Thanks for the update!\n. ",
    "itay": "@csnover the issue I'm getting when I replace it is that there seems to be a call to has.js which is included in dojo.js but not in require.js\n. ",
    "webpro": "Here's a request to reopen this ticket, as the actual solution for enabling the use of require.js (and potentially other loaders as well) is here: https://github.com/dojo/dojo/blob/master/has.js#L18 (currently an older version of dojo/has is used in Intern which just reads require.has).\nUpdating to the latest version of dojo (at least dojo/has) seems to fix it (@itay is also referring to this).\nUsing shim config is fine, as long as require.js is used.\nRelates to webpro/Automated-SPA-Testing#3.\n. ",
    "sbrunot": "Hi,\nHere is a simple way to reproduce on my side (using the last version of intern + android driver version 2.32.0 with android 4.2.2 emulator):\n1) a simple functional test (SampleTests.js):\n```\ndefine([\"intern!object\",\n    \"intern/chai!assert\"\n], function(registerSuite, assert){\nregisterSuite({\n    name: \"sample test suite\",\n    \"sample test\": function(){\n            return this.remote.get(\"http://www.google.com\");\n    }\n});\n\n});\n```\n2) a config file for the intern (I'm using port 4444 in this example, forwarding tcp traffic on port 4444 to port 8080 on the emulator) - note that you will have to replace 'localhost' in proxyUrl by the IP address of the machine you're running the intern runner.js on - :\n```\n// Learn more about configuring this file at https://github.com/theintern/intern/wiki/Configuring-Intern.\n// These default settings work OK for most people. The options that must be changed below are the\n// packages, suites, excludeInstrumentation, and (if you want functional tests) functionalSuites.\ndefine({\n// The port on which the instrumenting proxy will listen\nproxyPort: 9000,\n// A fully qualified URL to the Intern proxy\nproxyUrl: 'http://localhost:9000/', // TODO: REPLACE LOCALHOST BY THE IP OF YOUR MACHINE\n// The list of reporters to use\nreporters: ['console', 'lcov'],\n// Default desired capabilities for all environments. Individual capabilities can be overridden by any of the\n// specified browser environments in the environments array below as well. See\n// https://code.google.com/p/selenium/wiki/DesiredCapabilities for standard Selenium capabilities and\n// https://saucelabs.com/docs/additional-config#desired-capabilities for Sauce Labs capabilities.\n// Note that the build capability will be filled in with the current commit ID from the Travis CI environment\n// automatically\ncapabilities: {\n},\n// Browsers to run integration testing against. Note that version numbers must be strings if used with Sauce\n// OnDemand. Options that will be permutated are browserName, version, platform, and platformVersion; any other\n// capabilities options specified for an environment will be copied as-is\nenvironments: [\n    { browserName: 'android'}\n],\n// Maximum number of simultaneous integration tests that should be executed on the remote WebDriver service\nmaxConcurrency: 3,\n// Whether or not to start Sauce Connect before running tests\nuseSauceConnect: false,\n// Connection information for the remote WebDriver service. If using Sauce Labs, keep your username and password\n// in the SAUCE_USERNAME and SAUCE_ACCESS_KEY environment variables unless you are sure you will NEVER be\n// publishing this configuration file somewhere\nwebdriver: {\n    host: 'localhost',\n    port: 4444\n},\n// Configuration options for the module loader; any AMD configuration options supported by the Dojo loader can be\n// used here\nloader: {\n    // Packages that should be registered with the loader in each testing environment\n},\n// Non-functional test suite(s) to run in each browser\nsuites: [],\n// Functional test suite(s) to run in each browser once non-functional tests are completed\nfunctionalSuites: ['../../tests/intern/SampleTests'],\n// A regular expression matching URLs to files that should not be included in code coverage analysis\nexcludeInstrumentation: /^dojox\\/(?:tests\\/)/\n});\n```\nWhen you run the tests, it hang and never returns.\nIf you then replace the content of wd/browser-scripts/safe-execute.js by the single line 'return eval(arguments[0]);' (without the quotes, and with no carriage return at the end) and run the test again, you've got the same result: it hangs and never returns.\nIn intern/lib/wd.js, line 116 and 117, if you comment the \"if (error)\" section:\nthis._wd.execute('return typeof __internCoverage !== \"undefined\" && JSON.stringify(__internCoverage)', function (error, returnValue) {\n                if (error) {\n                    dfd.reject(error);\n                    return;\n                }\nthen the functional test is launched.\n. Thanks for your answer. It's good to know that it can run on Android 4.0.4 browser (at least with sauce labs), I'll see if I can also get it running on Android 4.0 locally.\nProblem is that I still have the problem with Android 4.1.2, which is not available on Sauce Labs according to https://saucelabs.com/docs/platforms... \nI agree that the safeExecute bug might not be related, it's just that my original test was more complex and used a lot of waitForCondition methods that are internally calling safeExecute. So that you know, I was able to run a functional test written with wd.js against Android 4.1.2 browser (on emulator, using WebDriver apk android-server-2.32.0.apk) but I'm not able to run the same test written with the Intern. That's why I suspect that the problem come from the Intern...\n. I've ran a lot of tests today with wd.js on Android browser, and I also noticed that the execute method do not always return a correct value (sometime it is, sometime there is an error).\nOn the Intern side, as the problem appears when trying to retrieve the coverage data, I was wondering what you would think of adding an extra configuration option to disable coverage measurement (something like 'disableCodeCoverageAnalysis')... the proxy would be running, but no coverage would be measured at all and the webdriver implementation would never try to retrieve coverage data.\nDoes it sounds like a stupid idea or do you think it could be usefull ? If so, I can also try to provide a pull request for this (I've implemented it locally and, when setting disableCodeCoverageAnalysis: true in the config file, the functional tests are launched as expected on Android browser).\n. With the last version of Intern, functional tests are still not running with AndroidDriver (android-server-2.32.0.pak running on an Android 4.0.3 emulator).\nI'm using a very simple project, named 'simple', that has only one subdirectory named 'tests'. The content of the tests subdirectory is the following:\n- intern.js:\n``` javascript\n    // Learn more about configuring this file at https://github.com/theintern/intern/wiki/Configuring-Intern.\n    // These default settings work OK for most people. The options that must be changed below are the\n    // packages, suites, excludeInstrumentation, and (if you want functional tests) functionalSuites.\n    define({\n        // The port on which the instrumenting proxy will listen\n        proxyPort: 9000,\n    // A fully qualified URL to the Intern proxy\n    proxyUrl: \"http://YOUR.IP.ADDRESS.HERE:9000/\", // TODO: use your IP address here\n\n    // Default desired capabilities for all environments. Individual capabilities can be overridden by any of the\n    // specified browser environments in the `environments` array below as well. See\n    // https://code.google.com/p/selenium/wiki/DesiredCapabilities for standard Selenium capabilities and\n    // https://saucelabs.com/docs/additional-config#desired-capabilities for Sauce Labs capabilities.\n    // Note that the `build` capability will be filled in with the current commit ID from the Travis CI environment\n    // automatically\n    capabilities: {\n    },\n\n    // Browsers to run integration testing against. Note that version numbers must be strings if used with Sauce\n    // OnDemand. Options that will be permutated are browserName, version, platform, and platformVersion; any other\n    // capabilities options specified for an environment will be copied as-is\n    environments: [\n        { browserName: \"android\"}\n    ],\n\n    // Maximum number of simultaneous integration tests that should be executed on the remote WebDriver service\n    maxConcurrency: 3,\n\n    // Whether or not to start Sauce Connect before running tests\n    useSauceConnect: false,\n\n    // Connection information for the remote WebDriver service. If using Sauce Labs, keep your username and password\n    // in the SAUCE_USERNAME and SAUCE_ACCESS_KEY environment variables unless you are sure you will NEVER be\n    // publishing this configuration file somewhere\n    webdriver: {\n        host: \"localhost\",\n        port: 8080\n    },\n\n    // Configuration options for the module loader; any AMD configuration options supported by the Dojo loader can be\n    // used here\n    loader: {\n        // Packages that should be registered with the loader in each testing environment\n//      packages: [ { name: 'myPackage', location: '.' } ]\n    },\n\n    // Non-functional test suite(s) to run in each browser\n    suites: [ /* 'myPackage/tests/foo', 'myPackage/tests/bar' */ ],\n\n    // Functional test suite(s) to run in each browser once non-functional tests are completed\n    functionalSuites: [\"simple/tests/Tests\"],\n\n    // A regular expression matching URLs to files that should not be included in code coverage analysis\n    excludeInstrumentation: /^tests\\//\n});\n\n```\n- TestPage.html:\nhtml\n<html>\n    <head>\n        <title>Hello world</title>\n    </head>\n    <body>\n        <h1 id=\"message\">Hello world !</h1>\n    </body>\n</html>\n- Tests.js:\n``` javascript\ndefine([\"intern!object\",\n        \"intern/chai!assert\",\n        \"require\"\n        ], function (registerSuite, assert, require) {\nregisterSuite({\n    name: \"Hello world test\",\n    \"test message\": function () {\n        return this.remote\n            .get(require.toUrl(\"./TestPage.html\"))\n            .elementById(\"message\")\n            .text()\n            .then(function (text) {\n                assert.equal(text, \"Hello world !\");\n            });\n    }\n});\n\n});\n```\nThe functional tests is launched with node node_modules/intern/runner.js config=simple/tests/intern.\nThe following information are displayed in the shell console:\nDefaulting to \"runner\" reporter\nListening on 0.0.0.0:9000\nInitialised android 10 on ANDROID\nAnd then nothing happens...\nFrom the android webdriver logs, it look like Intern is caught inside an infinite loop trying to request (get) a page:\n10-24 11:18:27.477: I/AndroidWebDriver(514): Httpd started\n10-24 11:20:45.716: I/AndroidWebDriver(514): Executing: [new session: {platform=VISTA, idle-timeout=60, javascriptEnabled=true, browserName=android, version=, name=dui/tests/intern/intern-simpl...}] at URL: /session)\n10-24 11:20:46.576: I/AndroidWebDriver(514): Done: /session\n10-24 11:20:46.676: I/AndroidWebDriver(514): Executing: org.openqa.selenium.android.server.handler.GetCapabilities@405ee160 at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791)\n10-24 11:20:46.686: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791\n10-24 11:20:46.806: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:20:46.936: I/AndroidWebDriver(514): Executing: [execute script: return typeof __internCoverage !== \"undefined\" && JSON.stringify(__internCoverage), []] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/execute)\n10-24 11:20:47.066: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:20:58.006: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/execute\n10-24 11:21:45.836: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:21:45.846: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:22:44.896: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:22:44.936: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:23:43.876: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:23:43.876: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:24:42.865: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:24:42.865: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:25:41.815: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:25:41.825: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n10-24 11:26:40.835: I/AndroidWebDriver(514): Executing: [get current url] at URL: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url)\n10-24 11:26:40.835: I/AndroidWebDriver(514): Done: /session/5a67df0b-1036-400b-8ba1-f979bbe2f791/url\n. So you mean it's related to https://github.com/admc/wd/issues/129 ?\n. Strange thing is that I patched wd.js (the one in node_modules/intern/nopde_modules/wd) browser scripts to remove all carriage returns, and it's still failing with the same behaviour (inifinite loop, with a get every minute).\nEven more strange is that none of the AndroidDriver logs report any call of the executeScript method. The only two methods called are execute (with script 'return typeof __internCoverage !== \"undefined\" && JSON.stringify(__internCoverage)' as the parameter, no carriage return in it), and get.\nDo you want me to investigate it more ?\n. Hi,\nI had some more time to try running tests with Intern using AndroidDriver and I think I've located the issue.\nThe first HTML page that is loaded inside the browser under test by Intern is client.html, to run the unit tests (note that this is true even if no unit tests are defined).\nThis client.html page is loaded in the browser under test using the following command in ClientSuite.js:\nremote.get(config.proxyUrl + '__intern/client.html?' + ioQuery.objectToQuery(options)).otherwise(clearHandles);\nBecause the 'get' function is called on the remote object (that wraps wd.js), it is not directly send to webdriver: before that, an execute command is performed to retrieve the coverage data. Because no page has been loaded yet in the WebView of AndroidDriver, the execute command fails (the connection is closed by AndroidDriver). This may be a bug, but it's not ridiculous to think that this command is not supposed to complete if there is no loaded page (but it works on other browsers, I'll give you that).\nI've successfully fixed it by replacing the previous line in ClientSuite.js by:\nremote._wd.get(config.proxyUrl + '__intern/client.html?' + ioQuery.objectToQuery(options), function (error) {\n            if (error) {\n                self.clearHandles();\n            }\n        });\nIt works (and I can confirm that coverage data is successfully retrieved before the following calls to 'get' in the functional tests), but I'm not sure if this is the way to fix the issue: is there a guarantee that ClientSuite is always the first page loaded in the browser under test, and that it is only loaded once ? If not, another solution might be to load a dummy HTML page first thing in the browser before launching the tests...\nWhat do you think ?\n(Note that this fix does not solves all my issues, as it appears that only the first test of my functional test suite is run and then the runner exit without any report. I'll continue to work on this subject to understand what is happening after the test complete, knowing that it can be an issue in my test).\n. Another good news: wd.js is implementing a fix for the AndroidDriver defect you were previously referencing: https://github.com/admc/wd/issues/129\n. Hi Colin. You can reproduce using an android 4.3 device or emulator, with version 2.37.0 of android driver.\nThere is a full documentation page that explains how to run your tests using android driver: https://code.google.com/p/selenium/wiki/AndroidDriver\n. Hi @lbod I'm able to successfully run the deliteful intern tests (see https://github.com/ibm-js/deliteful/blob/master/tests/README.md), both unit and functional, locally using selendroid. Unfortunately, I didn't succeed in running the same tests on SauceLabs. I think that the primary issue is that SauceLab is not using selendroid, but I'm not sure of which webdriver implementation they're using. There also the possibility to use appium on SauceLabs to run android tests, but appium is only able to run your tests in the chrome browser: if you're looking for a way to run your tests in the android stock browser, that's not possible with appium. \n. Yes, I confirm I see the output of console.log(\"TEXT: \" + text); when running the test.\n. The example you read is a simplified one to demonstrate the issue.\n. Any solution that would allow me to use conditional (if (...) then {...} else {...}) in my test will do, as long as I can perform tests in the then and else blocks.\n. (note that my understanding of the wd.js code is that nested calls work, as every call to a method of PromisedWebDriver is set to execute when the previous promise is fullfiled (see line 152 and below in lib/wd.js).\n. I don't really see how this problem is related to #14, as there is no deadlock in my test, but hopefully the Intern team will be able to debug this case and explain what the issue is with test failures handling in the embedded then statement.\nThanks anyway for trying to help, I just hope it's not adding too much noise to this ticket.\n. Thanks, that solves the issue. As this is not documented, I really thought it was a defect. Sorry about that.\n. No, it's about the onfocus event not being triggered. Running the provided test is self explanatory.\n. For the record, it works fine using intern 1.6.\n. For the record, I've performed some further experiments and noticed that the test runs fine when using NullTunnel and a local instance of appium. So this is really a SauceLab related issue, not an appium issue.\n. I've narrowed down the issue to the features and defects discovery process of leadfoot/Server.js.\nIf I comment out the two following pieces of code in Server.js:\njs\n// At least ios-driver 0.6.6-SNAPSHOT April 2014 does not support execute_async\ntestedCapabilities.supportsExecuteAsync = session.executeAsync('arguments[0](true);').catch(unsupported);\nand\n``` js\n// At least ios-driver 0.6.6-SNAPSHOT April 2014 will never complete a refresh call\ntestedCapabilities.brokenRefresh = function () {\n    return session.get('about:blank?1').then(function () {\n        var dfd = new Promise.Deferred();\n        function cleanup() {\n            clearTimeout(timer);\n            if (!refresh.isFulfilled()) {\n                refresh.cancel();\n            }\n        }\n    var refresh = session.refresh().then(function () {\n        cleanup();\n        dfd.resolve(false);\n    }, function () {\n        cleanup();\n        dfd.resolve(true);\n    });\n\n    var timer = setTimeout(function () {\n        cleanup();\n    }, 2000);\n\n    return dfd.promise;\n}).catch(broken);\n\n};\n```\nthe test runs fine, without any issue.\n. @jlipps thanks for your feedback. No specific capability is set to request a particular appium version. I'll update the test to specifically request appium 1.2.1 and see if it fixes the issue.\n. @jlipps thanks to your help (and this blog post https://support.saucelabs.com/entries/50675504-iOS-Desired-Capabilities), I've updated the capabilities as following to run the test using appium 1.2.2:\njs\n{ platformName: 'iOS', platformVersion: '7.1', browserName: 'safari', deviceName: 'iPhone Simulator', \"appium-version\": \"1.2.2\" }\nUnfortunately, it also failed, but for a different reason: Intern does not report any failure (it doesn't report anything), but I can see on the SauceLab side that the test failed (the Saucelabs test execution result is here (I guess it is a public one): https://saucelabs.com/tests/dacc96e8173a42ae88a8aba5db82cd68).\nI haven't had time to debug Intern to understand at which stage it is failing this time.\n. I confirm that with @csnover 's fix, the test runs fine.\n. Thanks a lot.\n. I'm not sure of what you mean: I confirm that with the resolution of #216 one can test web applications on iOS safari using appium 1.2.2, but appium is not listed on the following documentation page: https://github.com/theintern/intern/wiki/Running-your-own-WebDriver-server I thought that meant it was not officially supported... If it is, maybe it could be added to the page ?\n. One other interesting feature would be to provide a way to skip some tests (because they should not be run on a particular platform, for example) and to report the tests that were skipped.\n. @jason0x43 Thanks, I was not aware of this.\nCan you specify a grep for one or more environments only or is it global (my understanding from the doc) ? Our use case is that we have test suites and an intern configuration that lists all the environments on which to run the test suites for a test campaign. But we want to skip some of the tests for some environments (so we launch intern once for a test campaign, and it runs a subset of the tests on each environment).\nLast, are the skipped tests reported as so in the final test execution report ?\n. ",
    "gitgrimbo": "FYI, I have successfully use Intern and the jquery intern sample project (https://github.com/theintern/intern-examples/tree/master/jquery-example) with this Selendroid config:\nhttps://groups.google.com/d/msg/selendroid/8n643YWN0Xo/R7c6aBjchLEJ\nPrior to this, I had a problem with an Intern/Selendroid/Jasmine combo (I had existing Jasmine tests that I wanted to check with Selendroid):\nhttps://groups.google.com/d/msg/selendroid/kMUiW5LuthA/WE21J7RhG9sJ\nI haven't fixed my Jasmine tests yet, but the fact that the jquery sample project works on desktop browsers and my two Android phones (Samsung Galaxy S3/Android 4.3, HTC Desire HD/Android 2.3.5*) has given me confidence I can fix it.\n(* with es5-shim patch)\n. Hi,\nI'm looking to specify the report output directory, and it appears that the existing reporters don't allow the customisation of the underlying Istanbul Report object.\nFor instance, Intern's lcov reporter writes its lcov.info file in the project root, because it passes no config through to Istanbul:\nhttps://github.com/theintern/intern/blob/301cb0bfe17222ffb5726e494961a91f7eb6a1df/lib/reporters/lcov.js#L6\nhttps://github.com/gotwarlost/istanbul/blob/v0.1.46/lib/report/lcovonly.js#L26\nAnd Intern's lcovhtml reporter writes its reports to the html-report folder in the project root, because it passes no config through to Istanbul:\nhttps://github.com/theintern/intern/blob/301cb0bfe17222ffb5726e494961a91f7eb6a1df/lib/reporters/lcovhtml.js#L7\nhttps://github.com/gotwarlost/istanbul/blob/v0.1.46/lib/report/html.js#L305\nIs there any way of enabling this?\nOr is this barking up the wrong tree - i.e. if you want custom options for a reporter then you should develop a new reporter with those customisations hard-coded in, even if they are just configuration?\nMaybe if the reporters array could take an object you could pass config as a key of the main config? E.g.:\n```\nreporterConfig: {\n    lcov: {\n        dir: './different/path/to/lcov.info'\n    },\n    lcovhtml: {\n        dir: './different/path/to/html-report'\n    }\n},\nreporters: [\n    'runner', {\n        name: 'lcov',\n        config: reporterConfig.lcov\n    }, {\n        name: 'lcovhtml',\n        config: reporterConfig.lcovhtml\n    } ]\n```\nOr if this config key became conventional, then it could be omitted and assumed:\nreporters: [ 'runner', { name: 'lcov' }, { name: 'lcovhtml' } ]\n(of course these changes assume the Intern reporters are written according to some convention that allows config to be passed to them)\nThanks.\n. Nope, I'm not using a mocking library or doing any other form of mocking.\n. I'm having the same issue.  I've checked the docs and samples and can't see an obvious way how to do this.\nThere are bits and pieces about writing tests in a CommonJS format, but I want to write the tests using AMD and write my Node modules using Node-style code.\nSo I'm currently using require('intern/dojo/node!... and relative paths in my tests to my module code (like you are) which I'm not happy with.\nE.g. I've looked at the Leadfoot code and it uses relative paths:\nhttps://github.com/theintern/leadfoot/blob/1.5.2/tests/unit/lib/util.js#L1-L5\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'intern/dojo/node!../../../lib/util'\n], function (registerSuite, assert, util) {\nrather than something like:\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'intern/dojo/node!leadfoot/lib/util'\n], function (registerSuite, assert, util) {\n(https://github.com/theintern/leadfoot/blob/1.5.2/lib/util.js is Node-style module)\n. Do the tests need successful assertions to be classified as passing?\n. I had already signed the Dojo CLA (as I have previously committed to Intern) but I think there is a name mismatch with my jQuery CLA submission.  I've tried resubmitting the CLA but it doesn't seen to have worked.  Can this be fixed?\nAnyway, this is what my test output now looks like, so the totals are correct (for me):\n```\ntests\\intern-selenium-grid\nTunnel: Starting\nTotal: [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u00d7\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 624/624\nPassed: 623  Failed: 1    Skipped: 0\nPhan 2 XP:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nChr 51 XP:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nFx 46 WIN:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nIE 11 WIN:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u00d7\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78, 1 fail\nIE 9 WIN:   [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nFx 45 WIN:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nIE 10 WIN:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\nFx 31 WIN:  [\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713] 78/78\n```\n. Great, thanks!\n. Hi, any progress on this?. Hi guys, any progress on this?  Is this a bug for anyone else or have I got an unusual setup?  I find myself having to patch this with each Intern 3.x version I install.  No idea if it's an issue for 4.x.. Any progress with this?. I have just reproduced the error. Intern 4.3.2.\nI attempted to run functional tests on my local PC with IE 11, but the \"Protected Mode\" was not set to the same value (I think a Windows update reset this setting).\nThis caused the Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information) error,\nwhich seems to lead to errors of the form Cannot read property 'xxx' of undefined thrown by Pretty.ts:\n```\nnode\nTunnel: Ready\nTotal: Pending\nPassed: 0  Failed: 0  Skipped: 0\nBUG: suiteEnd was received for invalid session\n(\u30ce\u0ca0\u76ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\nTypeError: Cannot read property 'numToReport' of undefined\n  at Pretty.suiteEnd  \n  at \n  at \n  at node_modules\\@theintern\\common\\index.js:16:7182\n  at process._tickCallback  \n(\u30ce\u0ca0\u76ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\nNoSuchDriver: [POST http://localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"name\":\"intern\",\"idle-timeout\":60,\"browserName\":\"internet explorer\"}}] Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 52 milliseconds\nBuild info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T15:15:08.936Z'\nSystem info: host: 'RYZEN5', ip: '10.14.10.6', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_171'\nDriver info: driver.version: unknown\n  at Server.post  \n  at Server.createSession  \n  at Suite.before  \n  at \n  at new e  node_modules\\@theintern\\common\\index.js:16:5076\n  at runLifecycleMethod  \n  at before  \n  at Suite.run  \n! Cannot read property 'numToReport' of undefined\nTypeError: Cannot read property 'numToReport' of undefined\n  at Pretty.suiteEnd  \n  at \n  at \n  at node_modules\\@theintern\\common\\index.js:16:7182\n  at process._tickCallback  \n! [POST http://localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"name\":\"intern\",\"idle-timeout\":60,\"browserName\":\"internet explorer\"}}] Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 52 milliseconds\nBuild info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T15:15:08.936Z'\nSystem info: host: 'RYZEN5', ip: '10.14.10.6', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_171'\nDriver info: driver.version: unknown\nNoSuchDriver: [POST http://localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"name\":\"intern\",\"idle-timeout\":60,\"browserName\":\"internet explorer\"}}] Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 52 milliseconds\nBuild info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T15:15:08.936Z'\nSystem info: host: 'RYZEN5', ip: '10.14.10.6', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_171'\nDriver info: driver.version: unknown\n  at Server.post  \n  at Server.createSession  \n  at Suite.before  \n  at \n  at new e  node_modules\\@theintern\\common\\index.js:16:5076\n  at runLifecycleMethod  \n  at before  \n  at Suite.run  \n  at \n  at FunctionQueue.next  \nnode\nTunnel: Ready\nTotal: Pending\nPassed: 0  Failed: 0  Skipped: 0\n(\u30ce\u0ca0\u76ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\nTypeError: Cannot read property 'browserName' of undefined\n  at Pretty._abbreviateEnvironment  \n  at Pretty._drawSessionReport  \n  at Pretty._render  \n  at Pretty.runEnd  \n  at \n  at \n  at node_modules\\@theintern\\common\\index.js:16:7182\n  at process._tickCallback  \nStopped\n```\n\nSome console.logging in the transpiled Pretty.js:\nBUG: suiteEnd was received for invalid session\nsuiteEnd suite.id=internet explorer on any platform\n_getReport\n_getReport suiteOrTest.sessionId=\"\" id=\"\"\n_getReport this._reports={}\n_getReport this._reports[id]=undefined\n_getReport this._reports[id]=new Report {\n  numTotal: 0,\n  numPassed: 0,\n  numFailed: 0,\n  numSkipped: 0,\n  results: [],\n  environment: undefined,\n  sessionId: undefined,\n  coverageMap: CoverageMap { data: {} },\n  suiteInfo: {} }\nsuiteEnd info=undefined\n. Related broken link on page https://theintern.io/docs.html#Intern/4/docs/docs%2Farchitecture.md.\n\n\"listening for events\" links to URL https://theintern.io/docs.html#Intern/4/docs/docs%2Fapi.md/on\nwhich shows \"Oops...\"\n. Does a call to end do anything?\n.findById('playGame')\n      .click()\n      .end(Infinity)\n      .sleep(2000)\n      ...\n. Hi, yes I think there is a context associated with each command which can either be a single element (when previous call was something like findXXX) or a list of elements (when previous call was something like findAllXXX).\nThis context is chained along in the commands you call.\nYou 'exit' out of this context by calling end() for exiting 1 context, and end(n) to exit n contexts. You don't have to call end(), but if you want to find elements in the 'global' document scope, then calling end(Infinity) will make sure that your selectors target the whole page.\n(think of it as the difference between calling document.querySelector and childElement.querySelector. If you want all your calls to target the document, then call end(Infinity)).\nI might have described this incorrectly, but that's my understanding.\nSo in your case, I expect .findById('playGame') sets the context to the #playGame element. The call to findById('modal-button') cannot find an element with id modal-button 'inside' the #playGame element.\nI'm not sure about the mouseMoveTo command, but I expect there something similar going on, where that call is not applicable 'inside' the #playGame element.\nAlternatively, it could be that the #playGame element is removed from the dom or modified in some way when you click it, and this might also make the element reference stale.. If you think the docs can be improved, I'm sure the maintainers would appreciate a PR.\nFYI, this page mentions the element context:\nhttps://theintern.io/docs.html#Leadfoot/2/docs/docs%2Farchitecture.md/element-context\n\nThe retrieved elements are stored internally as the element context of the Command chain. When element methods, such as getVisibleText, are called on a Command, they operate on the current context.\n\nas does this:\nhttps://theintern.io/docs.html#Leadfoot/2/api/Command/command-1\n\nOn the other hand, to perform element interactions, you first need to retrieve one or more elements to interact with. This can be done using any of the find or findAll methods, by the getActiveElement method, or by returning elements from execute or executeAsync calls. The retrieved elements are stored internally as the element context of all chained Commands. When an element method is called on a chained Command with a single element context, the result will be returned as-is:\n\nBut I agree it can take a while to get your head around the Command pattern.. Looks like a dupe of #683, but in the Intern 4 codebase.. In @dojo/core/request/providers/xhr.js:\n\nIn some error handler when trying to require(\"tslib\"):\n\n. Tried a clean build in VirtualBox/Ubuntu and works.\nGet Critical dependency: require function is used in a way in which dependencies cannot be statically extracted warnings in a Windows build - I don't see this in Ubuntu:\n```\nPaul@Ryzen5 MINGW64 /d/dev/git_repos/intern/intern (issue-927)\n$ npm run clean && npm run build\n\nintern@4.3.0-pre clean D:\\dev\\git_repos\\intern\\intern\nintern-dev-clean\n\n2:12:30 PM - Removing _build\n2:12:30 PM - Removing _tests\n2:12:30 PM - Removing _examples\n2:12:30 PM - Done cleaning\n\nintern@4.3.0-pre build D:\\dev\\git_repos\\intern\\intern\nintern-dev-clean && concurrently intern-dev-build intern-dev-api\n\n2:12:31 PM - Removing _build\n2:12:31 PM - Removing _tests\n2:12:31 PM - Removing _examples\n2:12:31 PM - Done cleaning\n[0] 2:12:32 PM - Copying src/browser/remote.html to _build\n[0] 2:12:32 PM - Copying src/favicon.png to _build\n[0] 2:12:32 PM - Copying src/index.html to _build\n[0] 2:12:32 PM - Copying src/lib/reporters/html/html.styl to _build\n[0] 2:12:32 PM - Copying src/lib/reporters/html/variables.styl to _build\n[0] 2:12:32 PM - Copying src/loaders/globals.d.ts to _build\n[0] 2:12:32 PM - Copying tests/globals.d.ts to _tests\n[0] 2:12:32 PM - Copying tests/selftest.local.intern.js to _tests\n[0] 2:12:32 PM - Copying tests/support/mocking.d.ts to _tests\n[0] 2:12:32 PM - Copying tests/unit/data/lib/executors/intern.js to _tests\n[0] 2:12:32 PM - Copying tests/unit/data/lib/reporters/JUnit/expected.xml to _tests\n[0] 2:12:32 PM - Copying tests/unit/data/lib/util/bar.js to _tests\n[0] 2:12:32 PM - Copying tests/unit/data/lib/util/baz.js to _tests\n[0] 2:12:32 PM - Copying tests/unit/data/lib/util/foo.js to _tests\n[0] 2:12:32 PM - Copying src/browser/remote.html to _tests\n[0] 2:12:32 PM - Copying src/favicon.png to _tests\n[0] 2:12:32 PM - Copying src/index.html to _tests\n[0] 2:12:32 PM - Copying src/lib/reporters/html/html.styl to _tests\n[0] 2:12:32 PM - Copying src/lib/reporters/html/variables.styl to _tests\n[0] 2:12:32 PM - Copying src/loaders/globals.d.ts to _tests\n[0] 2:12:32 PM - Copying package.json to _build\\src\n[0] 2:12:32 PM - Copying README.md to _build\\src\n[0] 2:12:32 PM - Copying LICENSE to _build\\src\n[0] 2:12:32 PM - Linting .\n[1] 2:12:32 PM - Generating API data\n[0] 2:12:35 PM - Compiling .\n[1] 2:12:38 PM - Scrubbing file paths\n[1] 2:12:38 PM - Wrote API data to docs\\api.json\n[1] intern-dev-api exited with code 0\n[0] 2:12:41 PM - Linting tests\n[0] 2:12:45 PM - Compiling tests\n[0] 2:12:53 PM - Linting tests/examples\n[0] 2:12:55 PM - Compiling tests/examples\n[0] 2:13:13 PM - [webpack]     Time: 14303ms\n[0] 2:13:13 PM - [webpack]     Built at: 06/26/2018 2:13:13 PM\n[0] 2:13:13 PM - [webpack]     Entrypoint intern [big] = intern.js\n[0] 2:13:13 PM - [webpack]     Entrypoint remote [big] = remote.js\n[0] 2:13:13 PM - [webpack]     Entrypoint config [big] = config.js\n[0] 2:13:13 PM - [webpack]     WARNING in ./node_modules/@dojo/shim/object.js\n[0] 2:13:13 PM - [webpack]     3:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\n[0] 2:13:13 PM - [webpack]      @ ./node_modules/@dojo/shim/object.js\n[0] 2:13:13 PM - [webpack]      @ ./node_modules/@dojo/core/lang.js\n[0] 2:13:13 PM - [webpack]      @ ./src/lib/common/util.ts\n[0] 2:13:13 PM - [webpack]      @ ./src/browser/remote.ts\n[0] 2:13:13 PM - [webpack]     WARNING in ./node_modules/@dojo/shim/global.js\n[0] 2:13:13 PM - [webpack]     3:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\n[0] 2:13:13 PM - [webpack]      @ ./node_modules/@dojo/shim/global.js\n[0] 2:13:13 PM - [webpack]      @ ./src/browser/intern.ts\n[0] 2:13:13 PM - [webpack]     WARNING in ./node_modules/@dojo/core/lang.js\n[0] 2:13:13 PM - [webpack]     3:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\n[0] 2:13:13 PM - [webpack]      @ ./node_modules/@dojo/core/lang.js\n[0] 2:13:13 PM - [webpack]      @ ./src/lib/common/util.ts\n[0] 2:13:13 PM - [webpack]      @ ./src/browser/remote.ts\n...\n``\n. - deletednode_modules- fetched upstreammasterbranch\n- rannpm i- installedcross-env- changed script to\"start\": \"cross-env NODE_PATH=_build node _tests/src/bin/intern.js serveOnly\"`\n- browse to http://localhost:9000/__intern/ in Chrome\nError is:\nVM52 providers_sync:4 Uncaught Error: Cannot find module \"tslib\".\n    at webpackEmptyContext (VM52 providers_sync:2)\n    at eval (VM51 xhr.js:15)\n    at eval (VM51 xhr.js:3)\n    at eval (VM51 xhr.js:12)\n    at Object../node_modules/@dojo/core/request/providers/xhr.js (intern.js:258)\n    at __webpack_require__ (intern.js:20)\n    at eval (Browser.ts:5)\n    at Object../src/lib/executors/Browser.ts (intern.js:1278)\n    at __webpack_require__ (intern.js:20)\n    at eval (intern.ts:4)\nproviders_sync:4 Uncaught Error: Cannot find module \"tslib\".\n    at webpackEmptyContext (VM52 providers_sync:2)\n    at eval (VM51 xhr.js:15)\n    at eval (VM51 xhr.js:3)\n    at eval (VM51 xhr.js:12)\n    at Object../node_modules/@dojo/core/request/providers/xhr.js (config.js:247)\n    at __webpack_require__ (config.js:20)\n    at eval (util.ts:3)\n    at Object../src/lib/browser/util.ts (config.js:525)\n    at __webpack_require__ (config.js:20)\n    at eval (config.ts:4)\n(index):26 Uncaught ReferenceError: internConfig is not defined\n    at (index):26\nindex:26 is:\n<!-- Load intern code in the body because Html reporter needs a DOM -->\n        <script src=\"browser/intern.js\"></script>\n        <script src=\"browser/config.js\"></script>\n        <script>\n-->     internConfig.getConfig()\n            .then(function (result) {\nThere are no network errors (404s and the like), only this console error.\n. Hi. I've\n\nchecked out the 4.2.2 release\ndone a clean install of node_modules\nrun npm start\n\nand am still seeing the same error at http://localhost:9000/__intern/.\n. Running the npm run build step seemed to be what I missed out, thanks.. I'm also seeing this with 4.2.0. I didn't see this issue a few months ago.\nI just reinstalled my node_modules, so maybe it picked up a new version of some istanbul dependency.. FYI @jason0x43 - I had some problems with es6-promise and polyfilling for Edge. Not sure if this impacts your work.\nhttps://github.com/stefanpenner/es6-promise/issues/330#issuecomment-425233364\nand\nhttps://stackoverflow.com/questions/50096031/typeerror-object-doesnt-support-property-or-method-finally\n. Hmm. It was hanging consistently. Then my PC crashed and restarted and now it's working. This is for Intern 4.2.4. The original error could be a false alarm.. ",
    "manoharank": "+1 for built-in spy library\n. ",
    "Bjornej": "A more robust library could be sinon.js in conjunction with sinon-chai which provides assertions for chai based on sinon.js.\nI've already used it in the past and it integrates very well with chai.\n. ",
    "devangnegandhi": "+1 for including sinon.js as a built-in for intern\n. I would like to see this feature too. I personally do not care where the config is placed as long as I can set the output directory for the report and the thresholds.\n. Nope there is no immediate need for this. Although an estimate on when this feature might be available would be appreciated.\n. ",
    "yagoferrer": "Do you guys have any documentation or example on how to use chai-spies or sinon.js with intern.js? thank you!\n. Thank you Jason! That's so cool! I'lll use your branch for my tests.\n. ",
    "mightyiam": "I did. I don't like that it doesn't allow mocking of external dependencies.\n. Apart from the specific issues that @tomwayson had with some selenium versions, I can honestly reiterate both his original report and his response almost word for word.\n@csnover thank you for your response.\nI absolutely love the way Karma launches browsers and reruns my tests on detected changes.\nI can set up livereload quite easily but is there any way that I would get console output for the tests on my terminal?\n. Thank you, @dylans.\nI'm not sure whether your suggestions include in some way the printing of test reports to the console.\n. Thank you, @dylans.\n. This issue inspired me write a little post just now:\nhttps://medium.com/@mightyiam/why-in-browser-unit-testing-is-declining-c0a7b14f60bf#.loyksxqwg\n. ",
    "skitterm": "It would still be nice if this were shown in the \"what can Intern do that others can't?\" overview. I'm not suggesting that Sinon needs to be coupled with Intern, but it would be good to know where Intern stands compared to other libraries in terms of integration with a mocking/stubbing library. And/or a section in the docs about how to use Intern with the more common mocking/stubbing libraries (like there is for the section on integrating Intern with grunt/gulp).. ",
    "jperl": "Thank you so much! \nIf I wanted to make those set of steps a reusable chainable function like .authenticate(), how could I go about doing that?\n. Thank you for looking into this. I will ask the second question on stackoverflow.\n. Out of curiosity, why not use WebDriverJs instead of wrapping wd since it is by default promise based?\n. @csnover Thanks!\n. ",
    "chrisfosterelli": "My bad, thanks for the clarification :)\n. ",
    "johnnyfreeman": "\nYou must have git.\n\nI have git. I use it everyday without issue. \nThe problem seems to something to do with cloning csnover/cloning dojo2-core.git. The error you're referring to comes after the 2 other errors messages that happen before that ...\nnpm WARN `git config --get remote.origin.url` returned wrong result (https://github.com/csnover/dojo2-core.git)\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git Cloning into bare repository 'C:\\Users\\someone\\AppData\\Roaming\\npm-cache\\_git-remotes\\https-github-com-csnover-dojo2-core-git-b4e5b8be'...\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git\nI was able to separately clone the dojo2-core repo so that rules out my git clone being broken.\n. The first few things resolve just fine...\n``\nnpm http GET https://registry.npmjs.org/intern/1.1.0\nnpm http 200 https://registry.npmjs.org/intern/1.1.0\nnpm http GET https://registry.npmjs.org/intern/-/intern-1.1.0.tgz\nnpm http 200 https://registry.npmjs.org/intern/-/intern-1.1.0.tgz\nnpm WARN package.json intern@1.1.0 No repository field.\nnpm http GET https://registry.npmjs.org/wd/0.0.32\nnpm http GET https://registry.npmjs.org/istanbul/0.1.35\nnpm http GET https://registry.npmjs.org/sauce-connect-launcher/0.1.4\nnpm http GET https://registry.npmjs.org/chai/1.5.0\nnpm WARNgit config --get remote.origin.url` returned wrong result (https://github.com/csnover/dojo2-core.git)\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git Cloning into bare repository 'C:\\Users\\jfreeman\\AppData\\Roaming\\npm-cache_git-remotes\\https-github-com-csnover-dojo2-core-git-b4e5b8be'...\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git warning: templates not found /share/git-core/templates\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git fatal: Unable to find remote helper for 'https'\nnpm ERR! Error: Command failed: warning: templates not found /share/git-core/templates\nnpm ERR! fatal: Unable to find remote helper for 'https'\nnpm ERR!\nnpm ERR!     at ChildProcess.exithandler (child_process.js:637:15)\nnpm ERR!     at ChildProcess.EventEmitter.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:735:16)\nnpm ERR!     at Process.ChildProcess._handle.onexit (child_process.js:802:5)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"C:\\Program Files\\nodejs\\\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\"\nnpm ERR! cwd C:\\xampp\\htdocs\\foo\nnpm ERR! node -v v0.10.10\nnpm ERR! npm -v 1.2.25\nnpm ERR! code 128\nnpm http 304 https://registry.npmjs.org/chai/1.5.0\nnpm http 304 https://registry.npmjs.org/istanbul/0.1.35\nnpm http 304 https://registry.npmjs.org/sauce-connect-launcher/0.1.4\nnpm http 304 https://registry.npmjs.org/wd/0.0.32\nnpm WARN package.json istanbul@0.1.35 No repository field.\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\xampp\\htdocs\\foo\\npm-debug.log\nnpm ERR! not ok code 0\nC:\\xampp\\htdocs\\foo [master +0 ~1 -0]> npm install intern\nnpm http GET https://registry.npmjs.org/intern\nnpm http 304 https://registry.npmjs.org/intern\nnpm WARN package.json intern@1.1.0 No repository field.\nnpm http GET https://registry.npmjs.org/wd/0.0.32\nnpm http GET https://registry.npmjs.org/istanbul/0.1.35\nnpm http GET https://registry.npmjs.org/chai/1.5.0\nnpm http GET https://registry.npmjs.org/sauce-connect-launcher/0.1.4\nnpm WARN git config --get remote.origin.url returned wrong result (https://github.com/csnover/dojo2-core.git)\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git Cloning into bare repository 'C:\\Users\\jfreeman\\AppData\\Roaming\\npm-cache_git-remotes\\https-github-com-csnover-dojo2-core-git-b4e5b8be'...\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git warning: templates not found /share/git-core/templates\nnpm ERR! git clone https://github.com/csnover/dojo2-core.git fatal: Unable to find remote helper for 'https'\nnpm ERR! Error: Command failed: warning: templates not found /share/git-core/templates\nnpm ERR! fatal: Unable to find remote helper for 'https'\nnpm ERR!\nnpm ERR!     at ChildProcess.exithandler (child_process.js:637:15)\nnpm ERR!     at ChildProcess.EventEmitter.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:735:16)\nnpm ERR!     at Process.ChildProcess._handle.onexit (child_process.js:802:5)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"C:\\Program Files\\nodejs\\\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"intern\"\nnpm ERR! cwd C:\\xampp\\htdocs\\foo\nnpm ERR! node -v v0.10.10\nnpm ERR! npm -v 1.2.25\nnpm ERR! code 128\nnpm http 304 https://registry.npmjs.org/wd/0.0.32\nnpm http 304 https://registry.npmjs.org/sauce-connect-launcher/0.1.4\nnpm http 304 https://registry.npmjs.org/istanbul/0.1.35\nnpm http 304 https://registry.npmjs.org/chai/1.5.0\nnpm WARN package.json istanbul@0.1.35 No repository field.\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     C:\\xampp\\htdocs\\foo\\npm-debug.log\nnpm ERR! not ok code 0\n```\n. > The bug tracker is not a support system. Please use the available support channels to receive support.\nWow. I'm in utter disbelief that I've filled an issue on the issue tracker and I'm told to go ask the community or to buy commercial support. It's not as if I'm having trouble customizing it in some way. I can't even get it installed.\n\nIf this did not work, nobody would have ever been able to install.\n\nTrue. But I never said it didn't work for everyone. It is possible to work on some platforms and not on others.\nSo, I think I already know where this is going, but I think you should reconsider your support strategy (or lack thereof). \n. ",
    "tomwayson": "It would be helpful if the Asynchronous Testing section of the Writing Tests with the Intern wiki page documented this functionality. Maybe something like: \nAsynchronous Before/Setup Functions\nIf you need your before()/setup() functions to run asynchronously, they must return a promise (this.async() is not supported). Example:\n```\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'dojo/Deferred',\n    'request'\n], function (registerSuite, assert, Deferred, request) {\n    var startupdData;\n    registerSuite({\n        name: 'async demo',\n   setup: function() {\n        var dfd = new Deferred();\n        request('http://example.com/test.json').then(function (data) {\n            startupData = data;\n            dfd.resolve(startupData);\n        }), function(err) {\n            dfd.reject();\n        });\n        return dfd.promise;\n   },\n\n    'test after async': function () {\n        assert.strictEqual(setupData, 'Hello world!');\n    }\n});\n\n});\n```\n. DOH! Nice catch @HeikoH. I've updated the example code in my comment above.\n. Thanks again @HeikoH - obviously the example was not taken from code I tested and I haven't been using the Intern for a while now.\n. Thanks @csnover for your very insightful response.\nGood to know where you guys are coming from, and what's on the roadmap. \nIt seems the Intern is just not well suited to the mode of unit testing that I'm used to. As this is not a way that you guys test, I wouldn't expect you to implement it w/o popular demand. I'm sorry to admit that I don't really understand how Karma launches and controls the browsers w/o Web Driver - but that's also the beauty of it, I don't have to know. It just works. If I did, or if I had time to research it, I definitely would have opened a PR instead of an issue.\nI think the Intern is a great framework, and I sincerely wish I could make better use of it. The first time I saw a coverage report that unified the results of both functional and unit tests, I was sold. Unfortunately, ever since then I've had nothing but trouble w/ the browser drivers. I hope, as you say, that will be fixed when the browser vendors introduce native drivers that work reliably.\nThanks again.\n. ",
    "HeikoH": "...and make sure to return the promise\nstartup: function() {\n            var dfd = new Deferred();\n            request('http://example.com/test.json').then(function (data) {\n                startupData = data;\n                dfd.resolve(startupData);\n            }), function(err) {\n                dfd.reject();\n            });\n            return dfd.promise;\n       },\n. ...and the function is actually setup, not startup\n. ",
    "kospiotr": "Wouldn't it be more convenient and more consistent to support this.async also in both functions as well. The documentation doesn't say anything about support only promises. Mind that this.async works in all environments, while promises must be additionally configured.\n. ",
    "atesgoral": "Fellow search result travellers.\nWhatever you do, don't waste hours like I did by doing this:\nvar beforeEach = bdd.before; // NO.\nInstead do:\nvar beforeEach = bdd.beforeEach; // YES.\n. ",
    "bmnielsen": "Sure, here's a minimal set of files to reproduce. Also reproduces issue 46.\nGruntfile.js:\njavascript\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        intern: {\n            all: {\n                options: {\n                    runType: 'runner',\n                    config: 'tests/intern',\n                    reporters: ['console']\n                }\n            }\n        }\n    });\n    grunt.loadNpmTasks('intern');\n};\ntests/intern.js:\njavascript\ndefine({\n    proxyPort: 9000,\n    proxyUrl: 'http://localhost:9000/',\n    capabilities: {\n        'selenium-version': '2.33.0'\n    },\n    environments: [\n        { browserName: 'chrome' }\n    ],\n    maxConcurrency: 3,\n    useSauceConnect: false,\n    webdriver: {\n        host: 'localhost',\n        port: 4444\n    },\n    loader: {\n    },\n    suites: [],\n    functionalSuites: [ 'tests/test' ],\n    excludeInstrumentation: /^tests\\//\n});\ntests/test.js:\njavascript\ndefine([\n    'intern!object',\n    'intern/chai!assert'\n], function (registerSuite, assert) {\n    registerSuite({\n        name: 'google homepage',\n        'fails': function () {\n            return this.remote.get('http://www.google.com')\n                .title()\n                .then(function (title) {\n                    assert.strictEqual(title, 'Goggle');\n                });\n        },\n        'succeeds': function () {\n            return this.remote.get('http://www.google.com')\n                .title()\n                .then(function (title) {\n                    assert.strictEqual(title, 'Google');\n                });\n        }\n    });\n});\nExpected result is one passed test and one failed test reported to console.\nResult when running node node_modules/intern/runner.js config=tests/intern reporters=console:\nListening on 0.0.0.0:9000\n0/0 tests passed\nFAIL: main - google homepage - fails (1596ms)\nError: expected 'Google' to equal 'Goggle'\nexpected 'Google' to equal 'Goggle'\nFAIL: main - google homepage - succeeds (2ms)\nError: expected 'Google' to equal 'Goggle'\nexpected 'Google' to equal 'Goggle'\n0/2 tests passed\n0/2 tests passed\nSo I get a report to the console, but it's reporting both tests failed (issue 46).\nResult when running grunt intern:\n```\nRunning \"intern:all\" (intern) task\nListening on 0.0.0.0:9000\n\n\n0/0 tests passed\nWarning: FAIL: main - google homepage - fails (6948ms) Use --force to continue.\n\n\nAborted due to warnings.\n```\nOnce intern hits the test failure, it crashes out and doesn't report anything further, and Grunt aborts.\nAnother note is that in both cases, the browser window is left open.\nIf I fix the failing test, both commands give the expected result and the browser window is closed.\nAn additional thing I noticed while setting this up: with the \"runner\" reporter, running via grunt doesn't output anything even if the tests succeed.\n. Please re-read, this isn't the same issue as #46. The issue I'm reporting here is that running intern through Grunt gives a different result from running it directly via the Node command line, namely that intern crashes and doesn't report anything.\nIssue #46 is only tangentially related to this, since the result from the Node command line is also incorrect. But the point here is that running it through Grunt doesn't work.\n. Looks like master works now. Thanks!\n. ",
    "vikki": "Yep, I've signed the dojo CLA - let me know if there are any problems with the PR :)\n. So, I figured out the issue with changing the finishRun order and getting null parents was due to a mistake in the functional test set up, so I've reverted those commits (and also pulled your more recent changes onto the branch) - really sorry about the original mistake, thanks for reviewing and spotting the issues! I also switched the func test to use the local file and bumped the timeout as you suggested, and travis seems much happier now.\nAnyway, let me know if there are any more issues.\nThanks!\n. I get timeout errors when I don't move it (when its moved I don't get a timeout on failure or success), though I have to admit I don't completely understand why, happy to try and figure it out; it does make sense to keep reject and resolve the same. Its also possible that I've something misconfigured, as I didn't get the timeouts when I first saw the problem in my own tests, would you mind trying it out to see if you get the same behaviour?\n. ",
    "xMartin": "Ok, I guess I have to remove the chai loader plugin from my tests. Sad that the geezer branch is incompatible here.\n. ",
    "DomDerrien": "A simple update to intern/lib/reporters/lcovhtml to include intern/lib/args would allow to pass the directory information to the module Istanbul/lib/report/html:\ndefine([\n    '../args', // ** 1. New dependency listed **\n    'dojo/node!istanbul/lib/collector',\n    'dojo/node!istanbul/lib/report/html',\n    'dojo/node!istanbul/index'\n], function (args, Collector, Reporter) { // ** 2. Corresponding parameter added **\n    var collector = new Collector(),\n        reporter = new Reporter({ dir: args.reportDir }); // ** 3. Reporter constructor updated **\n    return {\n        '/coverage': function (sessionId, coverage) {\n            collector.add(coverage);\n        },\n        stop: function () {\n            reporter.writeReport(collector, true);\n        }\n    };\n});\nThen just adding the parameter reportDir to the Intern configuration listed into the Gruntfile allow to change the destination folder of the HTML report:\nintern: {\n    'unit-tests': {\n        options: {\n            runType: 'client',\n            config: 'src/tests/internNode',\n            reporters: ['console', 'lcovhtml'],\n            reportDir: 'target/code-coverage'\n        }\n    }\n},\nColin, do you want a formal patch? Or will you update the 3 lines yourself?\nA+, Dom\n. Excellent news, I'm going to revert my local updates once the new feature is out with a new release. Thanks, Dom\n. ",
    "d48": ":+1: \n. hey @zanona, did you ever find out what this issue was? I'm running intern-tutorial version 2.0.0 that uses intern version 2.1.1 and get the exact same thing above\n. thanks for the info @zanona. will post if I find anything\n. Just to give context, when I initially ran intern-runner, I got this error:\nListening on 0.0.0.0:9000\nStarting tunnel...\nUsing no proxy for connecting to Sauce Labs REST API.\nStarted scproxy on port 57603.\nStarting secure remote tunnel VM...\nSecure remote tunnel VM provisioned.\nTunnel ID: 4f6deb05a2614d75acd7fdac6b2d9814\nSecure remote tunnel VM is now: booting\nSecure remote tunnel VM is now: running\nRemote tunnel host is: maki76037.miso.saucelabs.com\nUsing no proxy for connecting to tunnel VM.\nStarting Selenium listener...\nEstablishing secure TLS connection to tunnel...\nSelenium listener started on port 4444.\nConnection established.\nReady\nSyntaxError: Unexpected token .\n  at Function.vm.runInThisContext  <node_modules/intern/node_modules/istanbul/lib/hook.js:163:16>\n  at <node_modules/intern/node_modules/dojo/dojo.js:760:8>\n  at <fs.js:266:14>\n  at Object.oncomplete  <fs.js:107:15>\nAnd then when re-running intern-runner, I got same error as original post. I don't know the cause of the initial error in hook.js. Hopefully someone can give some insight.\n. @zanona I had some error in my functional test syntax. copy and pasting what they had on Step 5 made the tests run fine locally so the issue was my typing. The error was masked because when re-running intern-runner it gave me error like you noted originally. For anyone else getting this, make sure no other errors are reported initially\n. @kmoe that's what I had to do as well as it attached to the port on the initial run and blocked it\n. okay thanks for info\n. Okay great. I'll see when I can get some time to update and properly set up unit tests for it. Thanks\n. ha, of course!\n. ",
    "jonmumm": "Submitted! Same username as GH.\n. ",
    "samdelagarza": "LOL, @csnover good one. coffee isn't working by this time in the day. \nthe problem i experience is that chrome is opened via the webdriver and then just sits idling on a blank screen. The intern only reports that \"fatal error occurred.\" and the selenium hub reports that it's \"trying to create a new session\" while the node reports that it's done.\n. it's hard to tell if it's selenium or wd.js, any tips on how to isolate?\n. Yes, it all works fine with selenium 2.33, but the move to 2.34 broke it. \n. btw, great framework!\n. Chrome driver has the ability to set the binary to canary very latest\nchrome. Perhaps I'm missing something but I set the binary option in\ncapabilities and it doesn't pick up canary. Perhaps its something that\nWD.js doesn't expose?\nSam\nOn Aug 23, 2013, at 4:44 PM, Colin Snover notifications@github.com wrote:\nI don\u2019t understand what you are requesting. Capabilities are already fully\nconfigurablehttps://github.com/theintern/intern/wiki/Configuring-Intern#configuration-options\n.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/theintern/intern/issues/78#issuecomment-23192919\n.\n. ",
    "sebv": "The session initialization was updated from 2.34.0 which broke the wd driver. This was fixed, however I still see the same issues as you with Firefox+Selenium. Looks like some javascript callback are not triggered within the browser. \n. ",
    "edhager": "0.0.32 of WD.js is compatible with Selenium 2.33.0.  I needed to update WD.js to a version that is compatible with Selenium 0.34.0+.\nIn 0.0.32 of WD.js, the webdriver configuration defaults (path, host, port, auth, etc.) are being applied in the constructor and the init function of webdriver.  webdriver is also adding the protocol (\"http\" or \"https) when it constructs the URL.  \nIn 0.1.0, webdriver is not applying default values and is not adding the protocol.  Instead, it is relying on those properties to be set in the config passed into the webdriver constructor.  That is what lead to my changes in runner.js.  Also, this version of webdriver uses Node's URL module to manipulate the configuration.  Look at the _buildInitUrl function.  It calls url.parse(url.format(initUrl)).  That is why I changed the default config to use hostname instead of host.  The url.format documentation gives the rules as to which properties have priority: http://nodejs.org/api/url.html#url_url_format_urlobj\nIntern has its own version of wd.remote so it is not using wd/lib/main.js. \nI did not bump the Selenium versions in the test config files.  I can do that.\n. I moved the calls to beforeEach and afterEach from Suite#run to Test#run.  To reduce duplication, I moved the call function in Suite into the prototype so it can be called from Test#run.  I updated and added-to the unit tests.\n. I changed the Intern self test config to include \"tests/\" because without it, no Intern code is instrumented.  The tests have to be instrumented to cause the Intern code to be instrumented.  This problem does not exist in runner.js because it sees all file requests.\n. I used the dojo/has plug-in to conditionally load the node modules.  I ran the tests locally and with Sauce Labs and they all passed.\n. Here an example of the work-around I used to allow the tests to run:\njavascript\ntest.test('work around', function () {\n    var dfd = this.async();\n    var myDfd = new Deferred();\n    myDfd.then(function () {\n        dfd.resolve();\n    });\n    setTimeout(function () {\n        myDfd.resolve();\n    }, 500);\n});. @jason0x43 I updated the code to use @ instead of < >.. ",
    "diegopamio": "It looks like it wasn't included in 1.4, am I right?\n. ",
    "deonjo": "This would be incredibly helpful and a well used feature if implemented.\n. Hi jason0x43, how do I run the inter-cucumber-example tests?\nI tried running both: \nintern-runner config=tests/intern\nintern-client config=tests/intern\nand came across the error:\nError: Failed to load module intern/lib/interfaces/cucumber from /Users/bwang/.virtualenvs/env/lib/node_modules/intern/lib/interfaces/cucumber.js (parent: intern/lib/interfaces/cucumber!16!*)\n    at /Users/bwang/.virtualenvs/env/lib/node_modules/intern/node_modules/dojo/dojo.js:757:12\n    at fs.js:207:20\n    at Object.oncomplete (fs.js:107:15)\n. Hi Jason,\nThe code that you wrote as an example is really good. Pretty thorough. I just had a couple of comments and notes:\n1. (just a friendly watch out) I think, you included your sauce lab key in the example. you might want to regenerate it\n2. Was trying to run the example functional tests. They all seem to halt on \"Then\". I would comment out the \"Then\" and the tests would run, but when I put them back in they would halt. The test would not terminate.\n3. A question about the architecture. How would I go about implementing a global steps/functional file that several feature files would inherit steps from?\n. ",
    "wmayervfc": "This feature is something my team is very interested in using. Is this still in planning for development?\n. ",
    "zmorris": "It seems that jason0x43 got very close to making this work, but unfortunately I can't get https://github.com/jason0x43/intern-cucumber-example to work now.  Are there plans to integrate this into intern?  It seems like the new BDD aspect of intern should know how to handle running the feature files, or else it's only BDD-style but doesn't have the benefit of separating user stories and steps.  If someone has an example of using cucumber-js as a plugin, that could help too, thanx!. Thanks for your quick reply.  I tried using https://github.com/jason0x43/intern-cucumber-example with a package.json of:\n{\n    \"name\": \"intern-cucumber-example\",\n    \"dependencies\": {\n        \"intern\": \"git://github.com/rhpijnacker/intern.git#3d73693feec63d012b5e76e3a28d8e413a103f40\",\n        \"dojo\": \"~1.9.0\"\n    }\n}\nwhich loads the last commit on https://github.com/theintern/intern/pull/650 PR.  Changing loader to loadOptions in tests/intern.js to avoid the deprecation warning, I'm able to call:\nyarn\nnode_modules/.bin/intern-client config=tests/intern\nBut I get no output.  I've tried typing gibberish into the test files and it throws an error, so I think it is able to find the intern object 'intern!cucumber!tests/features/fib' for exercising the feature files, but it just doesn't do anything.\nI was hoping I might be able to feel my way through getting it working, but without an example, I can't really get anywhere.  Does someone happen to have a features/steps example I can try?  Thanx!\nUPDATE: I managed to get something working, I evidently just had to ask the universe:\nCopy:\nnode_modules/intern/tests/unit/lib/interfaces/cucumber.js\nto:\ntests/cucumber.js\nAnd change the top lines from '../../../..', to 'intern', except for main which is inferred:\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'intern!cucumber',\n    'intern',\n    'intern/lib/executors/Executor',\n    'intern/lib/Suite',\n    'intern/lib/Test'\n], function (registerSuite, assert, registerCucumber, main, Executor, Suite, Test) {\nThen change tests/intern.js to look like:\nsuites: [ 'tests/cucumber' ],\nHere is the output:\n$ yarn\nyarn install v0.21.3\nwarning intern-cucumber-example: No license field\n[1/4] \ud83d\udd0d  Resolving packages...\nsuccess Already up-to-date.\n\u2728  Done in 0.36s.\n$ node_modules/.bin/intern-client config=tests/intern\nPASS: intern/lib/interfaces/cucumber - test sanity checking (0ms)\nPASS: intern/lib/interfaces/cucumber - registering a cucumber creates one empty child suite (0ms)\nPASS: intern/lib/interfaces/cucumber - one scenario gives one test case (43ms)\nPASS: intern/lib/interfaces/cucumber - a scenario outline gives multiple test cases (10ms)\nPASS: intern/lib/interfaces/cucumber - it is possible to pass multiple step definition functions (4ms)\nPASS: intern/lib/interfaces/cucumber - in functional tests \"remote\" is part of the World (6ms)\nPASS: intern/lib/interfaces/cucumber - failing steps should give error (7ms)\nPASS: intern/lib/interfaces/cucumber - missing Given step definition should give error (4ms)\nPASS: intern/lib/interfaces/cucumber - ambigous step definitions should give error (7ms)\nPASS: intern/lib/interfaces/cucumber - syntax errors in feature source should give error (5ms)\n0/10 tests failed\n0/10 tests failed\nSo this is at least a starting point.  I may end up writing a loading loop to find all feature files in a directory and call registerCucumber() with each of their contents, unless someone knows how to pass the feature files to the cucumber interface another way (jason0x43 passed it in the define as 'intern!cucumber!tests/features/fib').\nHope this helps someone.\nP.S. The reason I used 3d73693feec63d012b5e76e3a28d8e413a103f40 above was to future-proof the dependency, which will work until the repo gets taken down (it's not a permanent solution).. Apologies, the above workaround may not be necessary.  Running npm install after cloning intern-cucumber-example did not work for me, as I received an error similar to https://github.com/theintern/intern/issues/81#issuecomment-41084715 but I happened to try yarn and then npm install and it worked!  I am learning node from a c++/php background so I don't know why it suddenly worked, here is the full output:\n```\nMy-Computer:intern-cucumber-example me$ npm install\nnpm WARN excluding symbolic link query -> vendors/jquery/src/\nnpm WARN deprecated buffer-browserify@0.0.5: Package not maintained. Recent browserify uses https://github.com/feross/buffer\nnpm WARN deprecated minimatch@0.4.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN excluding symbolic link query -> vendors/jquery/src/\nnpm WARN prefer global istanbul@0.2.16 should be installed with -g\n\nintern@2.1.0-pre install /Users/me/Desktop/intern-cucumber-example/node_modules/intern\nnode support/fixdeps.js\n\nintern-cucumber-example@ /Users/me/Desktop/intern-cucumber-example\n\u251c\u2500\u2500 dojo@1.9.11 \n\u2514\u2500\u252c intern@2.1.0-pre \n  \u251c\u2500\u252c chai@1.9.1 \n  \u2502 \u251c\u2500\u2500 assertion-error@1.0.0 \n  \u2502 \u2514\u2500\u252c deep-eql@0.1.3 \n  \u2502   \u2514\u2500\u2500 type-detect@0.1.1 \n  \u251c\u2500\u252c cucumber@0.4.2 \n  \u2502 \u251c\u2500\u252c browserify@1.15.5 \n  \u2502 \u2502 \u251c\u2500\u252c buffer-browserify@0.0.5 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 base64-js@0.0.2 \n  \u2502 \u2502 \u251c\u2500\u2500 commondir@0.0.2 \n  \u2502 \u2502 \u251c\u2500\u2500 crypto-browserify@0.4.0 \n  \u2502 \u2502 \u251c\u2500\u2500 deputy@0.0.4 \n  \u2502 \u2502 \u251c\u2500\u252c detective@0.2.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 esprima@0.9.9 \n  \u2502 \u2502 \u251c\u2500\u252c http-browserify@0.1.14 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 Base64@0.1.4 \n  \u2502 \u2502 \u2502 \u2514\u2500\u252c concat-stream@1.0.1 \n  \u2502 \u2502 \u2502   \u2514\u2500\u252c bops@0.0.6 \n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 to-utf8@0.0.1 \n  \u2502 \u2502 \u251c\u2500\u2500 nub@0.0.0 \n  \u2502 \u2502 \u251c\u2500\u2500 optimist@0.3.7 \n  \u2502 \u2502 \u251c\u2500\u2500 resolve@0.2.8 \n  \u2502 \u2502 \u251c\u2500\u2500 syntax-error@0.0.1 \n  \u2502 \u2502 \u2514\u2500\u252c vm-browserify@0.0.4 \n  \u2502 \u2502   \u2514\u2500\u2500 indexof@0.0.1 \n  \u2502 \u251c\u2500\u252c coffee-script@1.7.1 \n  \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.3.5 \n  \u2502 \u251c\u2500\u2500 cucumber-html@0.2.3 \n  \u2502 \u251c\u2500\u2500 gherkin@2.12.2 \n  \u2502 \u251c\u2500\u252c nopt@2.1.2 \n  \u2502 \u2502 \u2514\u2500\u2500 abbrev@1.1.0 \n  \u2502 \u251c\u2500\u252c pogo@0.5.1 \n  \u2502 \u2502 \u251c\u2500\u2500 uglify-js@2.2.4 \n  \u2502 \u2502 \u2514\u2500\u2500 underscore@1.4.4 \n  \u2502 \u251c\u2500\u2500 underscore@1.5.2 \n  \u2502 \u251c\u2500\u2500 underscore.string@2.3.3 \n  \u2502 \u2514\u2500\u2500 walkdir@0.0.7 \n  \u251c\u2500\u252c digdug@1.0.0 \n  \u2502 \u251c\u2500\u252c decompress@0.2.3 \n  \u2502 \u2502 \u251c\u2500\u2500 adm-zip@0.4.7 \n  \u2502 \u2502 \u251c\u2500\u252c extname@0.1.5 \n  \u2502 \u2502 \u2502 \u2514\u2500\u252c ext-list@0.2.0 \n  \u2502 \u2502 \u2502   \u2514\u2500\u252c got@0.2.0 \n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 object-assign@0.3.1 \n  \u2502 \u2502 \u251c\u2500\u2500 get-stdin@0.1.0 \n  \u2502 \u2502 \u251c\u2500\u252c map-key@0.1.5 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@2.4.2 \n  \u2502 \u2502 \u251c\u2500\u2500 nopt@2.2.1 \n  \u2502 \u2502 \u251c\u2500\u252c rimraf@2.6.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u252c glob@7.1.1 \n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 fs.realpath@1.0.0 \n  \u2502 \u2502 \u2502   \u251c\u2500\u252c inflight@1.0.6 \n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.2 \n  \u2502 \u2502 \u2502   \u251c\u2500\u252c minimatch@3.0.3 \n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c brace-expansion@1.1.6 \n  \u2502 \u2502 \u2502   \u2502   \u251c\u2500\u2500 balanced-match@0.4.2 \n  \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 once@1.4.0 \n  \u2502 \u2502 \u2502   \u2514\u2500\u2500 path-is-absolute@1.0.1 \n  \u2502 \u2502 \u251c\u2500\u252c stream-combiner@0.0.4 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 duplexer@0.1.1 \n  \u2502 \u2502 \u251c\u2500\u252c tar@0.1.20 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 block-stream@0.0.9 \n  \u2502 \u2502 \u2502 \u251c\u2500\u252c fstream@0.1.31 \n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c graceful-fs@3.0.11 \n  \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 natives@1.1.0 \n  \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.5.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 inherits@2.0.3 \n  \u2502 \u2502 \u2514\u2500\u252c tempfile@0.1.3 \n  \u2502 \u2502   \u2514\u2500\u2500 uuid@1.4.2 \n  \u2502 \u2514\u2500\u2500 dojo@2.0.0-alpha1 \n  \u251c\u2500\u2500 dojo@2.0.0-dev \n  \u251c\u2500\u252c istanbul@0.2.16 \n  \u2502 \u251c\u2500\u2500 abbrev@1.0.9 \n  \u2502 \u251c\u2500\u2500 async@0.9.2 \n  \u2502 \u251c\u2500\u252c escodegen@1.3.3 \n  \u2502 \u2502 \u251c\u2500\u2500 esprima@1.1.1 \n  \u2502 \u2502 \u251c\u2500\u2500 estraverse@1.5.1 \n  \u2502 \u2502 \u2514\u2500\u2500 esutils@1.0.0 \n  \u2502 \u251c\u2500\u2500 esprima@1.2.5 \n  \u2502 \u251c\u2500\u252c fileset@0.1.8 \n  \u2502 \u2502 \u251c\u2500\u252c glob@3.2.11 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0 \n  \u2502 \u2502 \u2514\u2500\u252c minimatch@0.4.0 \n  \u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.7.3 \n  \u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.1 \n  \u2502 \u251c\u2500\u252c handlebars@1.3.0 \n  \u2502 \u2502 \u2514\u2500\u252c uglify-js@2.3.6 \n  \u2502 \u2502   \u2514\u2500\u2500 async@0.2.10 \n  \u2502 \u251c\u2500\u252c js-yaml@3.8.2 \n  \u2502 \u2502 \u251c\u2500\u252c argparse@1.0.9 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 sprintf-js@1.0.3 \n  \u2502 \u2502 \u2514\u2500\u2500 esprima@3.1.3 \n  \u2502 \u251c\u2500\u252c mkdirp@0.5.1 \n  \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8 \n  \u2502 \u251c\u2500\u2500 nopt@3.0.6 \n  \u2502 \u251c\u2500\u2500 resolve@0.7.4 \n  \u2502 \u251c\u2500\u2500 which@1.0.9 \n  \u2502 \u2514\u2500\u2500 wordwrap@0.0.3 \n  \u251c\u2500\u252c leadfoot@1.0.1 \n  \u2502 \u2514\u2500\u2500 dojo@2.0.0-alpha1 \n  \u2514\u2500\u252c source-map@0.1.33 \n    \u2514\u2500\u2500 amdefine@1.0.1 \nnpm WARN intern-cucumber-example@ No repository field.\nnpm WARN intern-cucumber-example@ No license field.\nMy-Computer:intern-cucumber-example me$ ./node_modules/.bin/intern-client config=tests/intern\nError: Failed to load module intern/node_modules/cucumber/release/cucumber from /Users/me/Desktop/intern-cucumber-example/node_modules/intern/node_modules/cucumber/release/cucumber.js (parent: intern/lib/interfaces/cucumber)\n    at ReadFileContext.callback (/Users/me/Desktop/intern-cucumber-example/node_modules/intern/node_modules/dojo/dojo.js:757:12)\n    at FSReqWrap.readFileAfterOpen [as oncomplete] (fs.js:365:13)\nMy-Computer:intern-cucumber-example me$ yarn\nyarn install v0.21.3\ninfo No lockfile found.\nwarning intern-cucumber-example: No license field\n[1/4] \ud83d\udd0d  Resolving packages...\nwarning intern > istanbul > fileset > minimatch@0.4.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nwarning intern > cucumber > browserify > buffer-browserify@0.0.5: Package not maintained. Recent browserify uses https://github.com/feross/buffer\nwarning intern > istanbul > fileset > glob > minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfile.\n\u2728  Done in 2.09s.\nMy-Computer:intern-cucumber-example me$ ./node_modules/.bin/intern-client config=tests/intern\nError: Failed to load module intern/node_modules/cucumber/release/cucumber from /Users/me/Desktop/intern-cucumber-example/node_modules/intern/node_modules/cucumber/release/cucumber.js (parent: intern/lib/interfaces/cucumber)\n    at ReadFileContext.callback (/Users/me/Desktop/intern-cucumber-example/node_modules/intern/node_modules/dojo/dojo.js:757:12)\n    at FSReqWrap.readFileAfterOpen [as oncomplete] (fs.js:365:13)\nMy-Computer:intern-cucumber-example me$ npm install\nnpm WARN excluding symbolic link query -> vendors/jquery/src/\nnpm WARN deprecated minimatch@0.4.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN excluding symbolic link query -> vendors/jquery/src/\nnpm WARN gentlyRm not removing /Users/me/Desktop/intern-cucumber-example/node_modules/fstream/node_modules/.bin/mkdirp as it wasn't installed by /Users/me/Desktop/intern-cucumber-example/node_modules/fstream/node_modules/mkdirp\nnpm WARN prefer global istanbul@0.2.16 should be installed with -g\n\nintern@2.1.0-pre install /Users/me/Desktop/intern-cucumber-example/node_modules/intern\nnode support/fixdeps.js\n\n\nminimatch@0.3.0 node_modules/glob/node_modules/minimatch\nabbrev@1.1.0 node_modules/istanbul/node_modules/nopt/node_modules/abbrev\nminimatch@3.0.3 node_modules/rimraf/node_modules/minimatch\nglob@7.1.1 node_modules/rimraf/node_modules/glob\nchai@1.9.1 node_modules/intern/node_modules/chai\nintern-cucumber-example@ /Users/me/Desktop/intern-cucumber-example\n\u2514\u2500\u252c intern@2.1.0-pre \n  \u251c\u2500\u2500 cucumber@0.4.2 \n  \u251c\u2500\u252c digdug@1.0.0 \n  \u2502 \u251c\u2500\u252c decompress@0.2.3 \n  \u2502 \u2502 \u251c\u2500\u2500 adm-zip@0.4.7 \n  \u2502 \u2502 \u251c\u2500\u252c extname@0.1.5 \n  \u2502 \u2502 \u2502 \u2514\u2500\u252c ext-list@0.2.0 \n  \u2502 \u2502 \u2502   \u2514\u2500\u252c got@0.2.0 \n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 object-assign@0.3.1 \n  \u2502 \u2502 \u251c\u2500\u2500 get-stdin@0.1.0 \n  \u2502 \u2502 \u251c\u2500\u252c map-key@0.1.5 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 lodash@2.4.2 \n  \u2502 \u2502 \u251c\u2500\u2500 nopt@2.2.1 \n  \u2502 \u2502 \u251c\u2500\u252c rimraf@2.6.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u252c glob@7.1.1 \n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 fs.realpath@1.0.0 \n  \u2502 \u2502 \u2502   \u251c\u2500\u252c inflight@1.0.6 \n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.2 \n  \u2502 \u2502 \u2502   \u251c\u2500\u252c minimatch@3.0.3 \n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c brace-expansion@1.1.6 \n  \u2502 \u2502 \u2502   \u2502   \u251c\u2500\u2500 balanced-match@0.4.2 \n  \u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 once@1.4.0 \n  \u2502 \u2502 \u2502   \u2514\u2500\u2500 path-is-absolute@1.0.1 \n  \u2502 \u2502 \u251c\u2500\u252c stream-combiner@0.0.4 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 duplexer@0.1.1 \n  \u2502 \u2502 \u251c\u2500\u252c tar@0.1.20 \n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 block-stream@0.0.9 \n  \u2502 \u2502 \u2502 \u251c\u2500\u252c fstream@0.1.31 \n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c graceful-fs@3.0.11 \n  \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 natives@1.1.0 \n  \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mkdirp@0.5.1 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 inherits@2.0.3 \n  \u2502 \u2502 \u2514\u2500\u252c tempfile@0.1.3 \n  \u2502 \u2502   \u2514\u2500\u2500 uuid@1.4.2 \n  \u2502 \u2514\u2500\u2500 dojo@2.0.0-alpha1 \n  \u251c\u2500\u2500 dojo@2.0.0-dev \n  \u251c\u2500\u252c istanbul@0.2.16 \n  \u2502 \u251c\u2500\u2500 abbrev@1.0.9 \n  \u2502 \u251c\u2500\u2500 async@0.9.2 \n  \u2502 \u251c\u2500\u252c escodegen@1.3.3 \n  \u2502 \u2502 \u251c\u2500\u2500 esprima@1.1.1 \n  \u2502 \u2502 \u251c\u2500\u2500 estraverse@1.5.1 \n  \u2502 \u2502 \u2514\u2500\u2500 esutils@1.0.0 \n  \u2502 \u251c\u2500\u2500 esprima@1.2.5 \n  \u2502 \u251c\u2500\u252c fileset@0.1.8 \n  \u2502 \u2502 \u251c\u2500\u252c glob@3.2.11 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0 \n  \u2502 \u2502 \u2514\u2500\u252c minimatch@0.4.0 \n  \u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.7.3 \n  \u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.1 \n  \u2502 \u251c\u2500\u252c handlebars@1.3.0 \n  \u2502 \u2502 \u2514\u2500\u252c uglify-js@2.3.6 \n  \u2502 \u2502   \u2514\u2500\u2500 async@0.2.10 \n  \u2502 \u251c\u2500\u252c js-yaml@3.8.2 \n  \u2502 \u2502 \u251c\u2500\u252c argparse@1.0.9 \n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 sprintf-js@1.0.3 \n  \u2502 \u2502 \u2514\u2500\u2500 esprima@3.1.3 \n  \u2502 \u251c\u2500\u252c mkdirp@0.5.1 \n  \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8 \n  \u2502 \u251c\u2500\u2500 nopt@3.0.6 \n  \u2502 \u251c\u2500\u2500 resolve@0.7.4 \n  \u2502 \u2514\u2500\u2500 which@1.0.9 \n  \u2514\u2500\u252c leadfoot@1.0.1 \n    \u2514\u2500\u2500 dojo@2.0.0-alpha1 \n\nnpm WARN intern-cucumber-example@ No repository field.\nnpm WARN intern-cucumber-example@ No license field.\nMy-Computer:intern-cucumber-example me$ ./node_modules/.bin/intern-client config=tests/intern\nPASS: main - Fibonacci test - reset (6ms)\nPASS: main - Fibonacci test - nexting (8ms)\n2/2 tests passed\nPASS: main - Square test - reset (3ms)\nPASS: main - Square test - one next (2ms)\nPASS: main - Square test - two nexts (2ms)\nPASS: main - Square test - four nexts (4ms)\n4/4 tests passed\nPASS: main - Assertions - assert_equal (1ms)\nPASS: main - Assertions - assert_not_equal (1ms)\n2/2 tests passed\n8/8 tests passed\n-------------|-----------|-----------|-----------|-----------|\nFile         |   % Stmts |% Branches |   % Funcs |   % Lines |\n-------------|-----------|-----------|-----------|-----------|\n   app/      |       100 |       100 |       100 |       100 |\n      fib.js |       100 |       100 |       100 |       100 |\n-------------|-----------|-----------|-----------|-----------|\nAll files    |       100 |       100 |       100 |       100 |\n-------------|-----------|-----------|-----------|-----------|\n```\nI thought perhaps the difference was dojo@1.9.11 going to dojo@2.0.0-alpha1 but I tried changing the package to \"dojo\": \"dojo@2.0.0-alpha1\" and it still didn't work with just npm install.  I'm kind of out of my element here so maybe someone with a keener eye can figure out why yarn then npm install magically fixes it.\nAnyway, this provides a starting point.  I think that maybe the best thing to do is pull out these cucumber examples from the PRs into their own object class that inherit's from intern's object and provides BDD's Given(), When(), Then() commands similar to what jason0x43's does.  I am not certain about the feature file loader though, because other testing frameworks tend to scan a directory of feature stories and a directory of step definitions and derive a suite from them.\nI'm also thinking that the true power of Intern is this ability to adapt other testing frameworks under a common convention of naming each test and specifying the steps inside of a suite.  If you could write object interfaces for the testing frameworks on https://www.browserstack.com/support?tag=automate and https://watirmelon.blog/2015/12/08/comparison-of-javascript-browser-automation-and-test-specification-libraries/ you would really have something.  The biggest pain of all of these frameworks is having to repeat yourself writing domain-specific language implementations of tests and then translators between human tasks/accessor functions in page objects.  With a consolidated way of trying all these approaches, maybe a better way would evolve out of them.\nDoes anyone have an example of writing an object that calls something like cucumber.js?  The learning curve for reporters and executors and stuff is pretty steep.  Anyway, hope this helps someone.. @dylans on that note, I decided to make a local object class that calls cucumber.js, like what jason0x43 and rhpijnacker have done except not as a pull request:\nhttps://github.com/theintern/intern/blob/cucumber/lib/interfaces/cucumber.js\nhttps://github.com/rhpijnacker/intern/blob/master/lib/interfaces/cucumber.js\nThen I will have page objects import that, treating it like the BDD object you have now.  The trickiest part turned out to be loading cucumber.js, because I'm not super familiar with how Node.js modules work.  I lost about half a day trying every permutation of define(['cucumber'], ...) with 'intern', 'dojo', '/' and '!' in the string and adding it as { name: 'cucumber', location: 'node_modules/cucumber' } and permutations of 'map' etc in intern.js.  It was having a lot of issues where it couldn't find cucumber/main or the main of other classes.  For anyone curious, you can specify main in loaderOptions like:\nhttps://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md#packages-\n{ name: 'xyz', location: 'xyz', main:'main' }\nbut I found that it generally didn't work.  I finally stumbled onto this explanation of how dojo works:\nhttp://stackoverflow.com/a/21887408/539149\nSo using intern's dojo to load cucumber.js in the last line of define() like so:\ndefine([\n    'intern!../Suite',\n    'intern!../Test',\n    'intern',\n    'dojo/aspect',\n    'require',\n    'dojo/topic',\n    'dojo/Deferred',\n    'dojo/has!host-node?dojo/node!fs:dojo/request',\n    'intern/dojo/node!cucumber'\n], function (Suite, Test, main, aspect, require, topic, Deferred, requestor, Lexer) {\nin my local object worked perfectly, and I was able to remove references to cucumber from intern.js.  Here is my local package.json:\n{\n    \"name\": \"intern-cucumber\",\n    \"dependencies\": {\n        \"cucumber\": \"^1.3.1\",\n        \"dojo\": \"^1.12.2\",\n        \"intern\": \"^3.4.2\"\n    }\n}\nI still haven't figured out how to use intern's version of dojo when I need to call it directly, for example as 'intern!dojo/aspect' or 'intern!dojo!aspect' so unfortunately I still have dojo added locally.  I also couldn't get dojo 2.0.0-alpha.7 to work locally so my version differs from intern's.  If anyone knows how to do that, it would be great to get rid of my local dojo dependency.\nIf you could add a note about loading modules in the Intern documentation, it would be super helpful.\nSo after all that, I have cucumber imported but can't get it to work :-/  I think the issue is that since there is no global.window, cucumber isn't setting up its context correctly or something.  I don't know if I have to set cucumber up somehow in the runner instead of the object either.  I prefer jason0x43's calling convention but since it's 3 years out of date I don't know if I can get it working.  It would be so great though to have objects that call other testing frameworks so people could migrate to Intern.. I couldn't get the cucumber branch of intern to work so I started over with a new project, here is my package.json:\n{\n    \"name\": \"intern-cucumber\",\n    \"dependencies\": {\n        \"cucumber\": \"^1.3.1\",\n        \"dojo\": \"2.0.0-alpha.7\",\n        \"intern\": \"^3.4.2\"\n    }\n}\nI then downloaded:\nhttps://github.com/rhpijnacker/intern/blob/master/lib/interfaces/cucumber.js to /cucumber.js\nchanged top lines to:\ndefine([\n    'dojo/aspect',\n    'dojo/Promise',\n    'require',\n    'intern',\n    'intern!../Suite',\n    'intern!../Test',\n    'dojo/has!host-node?dojo/node!fs:dojo/request',\n    'intern/dojo/node!cucumber'\n], function (aspect, Promise, require, main, Suite, Test, requestor, cucumber) {\ndownloaded:\nhttps://github.com/rhpijnacker/intern/blob/master/tests/unit/lib/interfaces/cucumber.js to /tests/cucumber.js\nchanged top lines to:\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    '../cucumber',\n    'intern',\n    'intern/lib/executors/Executor',\n    'intern/lib/Suite',\n    'intern/lib/Test'\n], function (registerSuite, assert, registerCucumber, main, Executor, Suite, Test) {\nhere is my tests/intern.js:\ndefine({\n    proxyPort: 9000,\n    proxyUrl: 'http://10.0.1.105:9000/',\n    capabilities: {\n        'selenium-version': '2.42.0'\n    },\n    environments: [\n        { browserName: 'chrome' }\n    ],\n    maxConcurrency: 3,\n    tunnel: 'NullTunnel',\n    loaderOptions: {\n        packages: [\n            { name: 'app', location: 'app' },\n            { name: 'tests', location: 'tests' },\n            { name: 'dojo', location: 'node_modules/dojo' },\n        ]\n    },\n    suites: [ 'tests/cucumber' ],\n    functionalSuites: [ 'tests/functional' ],\n    excludeInstrumentation: /(?:node_modules|tests)\\//\n});\nHere is my output:\n```\n$ yarn\nyarn install v0.21.3\nwarning intern-testing: No license field\n[1/4] \ud83d\udd0d  Resolving packages...\nsuccess Already up-to-date.\n\u2728  Done in 0.37s.\n$ node_modules/.bin/intern-client config=tests/intern\nPASS: intern/lib/interfaces/cucumber - test sanity checking (1ms)\nPASS: intern/lib/interfaces/cucumber - registering a cucumber creates one empty child suite (0ms)\nFAIL: intern/lib/interfaces/cucumber - one scenario gives one test case (3ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nFAIL: intern/lib/interfaces/cucumber - a scenario outline gives multiple test cases (1ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nFAIL: intern/lib/interfaces/cucumber - it is possible to pass multiple step definition functions (1ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nFAIL: intern/lib/interfaces/cucumber - in functional tests \"remote\" is part of the World (1ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nFAIL: intern/lib/interfaces/cucumber - failing steps should give error (0ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nFAIL: intern/lib/interfaces/cucumber - missing Given step definition should give error (4ms)\nTypeError: Cannot read property 'hasPassed' of undefined\n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \n  at process._tickCallback  \nFAIL: intern/lib/interfaces/cucumber - ambigous step definitions should give error (0ms)\nTypeError: Cannot read property 'then' of undefined\n  at next  \n  at \n  at new Promise  \n  at runTests  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at _combinedTickCallback  \nPASS: intern/lib/interfaces/cucumber - syntax errors in feature source should give error (1ms)\n7/10 tests failed\n7/10 tests failed\n--------------|----------|----------|----------|----------|----------------|\nFile          |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n--------------|----------|----------|----------|----------|----------------|\n testing/     |    34.74 |     4.35 |    55.56 |    34.74 |                |\n  cucumber.js |    34.74 |     4.35 |    55.56 |    34.74 |... 404,415,417 |\n--------------|----------|----------|----------|----------|----------------|\nAll files     |    34.74 |     4.35 |    55.56 |    34.74 |                |\n--------------|----------|----------|----------|----------|----------------|\n```\nThe first two tests passed but then it failed due to a promise issue.  I tried going in and console.log() the heck out of node_modules/intern/lib/Suite.js but I can't figure out why current is undefined on line 438 in current.then(function () {.  Everything looks basically identical between the rhpijnacker fork and my local project except for file location.  I think that current = runWithCatch(); is returning undefined on line 414 but I don't really know why.\nIf you can help me fix this last thing, I'm hopeful I can adapt this to look very much like https://github.com/jason0x43/intern-cucumber-example by adapting parts from the cucumber branch so the Given(), When(), Then() calls are in the test suite and it loads feature files.  But I just can't seem to figure out the promises issue.  Thanks for all your help so far.. @jordangarvey Sorry for my late response, I just found out about https://github.com/notifications/participating haha.  I had the same problem and implementing a solution would have required digging further into the Intern internals than I could muster.  I ended up going with WebDriverIO running Mocha/Chai and Yadda on top of that.\nThe core problem here (that I've seen repeated over and over again in nearly all testing frameworks) is that BDD should have been a layer over TDD, not an alternative.  So we shouldn't need a separate runner for Gherkin/Cucumber.  We should be able to call out to a features/steps loader from within our unit tests, running TDD and/or BDD suites in one pass and printing all results through the same reporter, which is precisely what Yadda does.\nTo me, this is why BDD never caught on at nearly the level that it should have.  The main aha moment for me is that BDD is for setting up context for the tests.  This is perhaps more important than the human-readable aspect of it.  Context and mocking turn out to be the primary challenges with things like acceptance testing, and TDD generally only addresses mocking, which severely limits it in practice.. ",
    "jordangarvey": "Hi @zmorris, wondering if you managed to get this working? Been trying to find any latest news on using Cucumber with Intern but the trail seems to end here, but am really interested in being able to use it.. ",
    "rhpijnacker": "@jordangarvey, @zmorris  Maybe you want to check out https://github.com/rhpijnacker/intern-cucumber. This is a re-implementation of the earlier integration of cucumber-js for intern 4. The module is now available as a separate npm package and is loaded as a plugin.\nThe company I work for has used the previous integration for a few years now and is moving to intern 4. This prompted us to do the rewrite.. It is about half a year since this pull-request was posted. Any ideas on whether this will ever be integrated?. @dylans Putting this in a separate package seems to make sense. However, I could use some assistance on how to set this up, both package-structure wise (how do we get intern to know about the additional package) and location/publication wise (is just having another github repo enough?). This pull-request was superceded by https://github.com/rhpijnacker/intern-cucumber/.\nSo, I'm closing this.. At first I thought the latter would be trivial to implement, until I realized that the loader script is actually just loaded and executed only once. So \n\nloader scripts can check for the existence of their loader during initialization\n\nwould not actually work. \nTo solve this properly, at least some handling should be done in Executor, since it is the place that loads the scripts so can administrate whether a loader script was already loaded and executed.. Do you have a suggestion for what that deregistration function should look like?\n. | Just out of curiosity, though, why does the sample Grunt config above declare it\u2019s own \u2018subset\u2019 config?\nI'm trying to set things up such that we can easily run the tests from within a browser (during development) and also from our build scripts on a local selenium grid. Since not all tests run in IE11 (due to https://github.com/rhpijnacker/intern-cucumber/issues/10) we've split them up in batches (as per your suggestion). Doing so exposes some new issues, like this one and #894.. | In general, the options specified in the Grunt config should take priority over the options specified in the base Intern config. \nThat's what I would expect too. However I'm not sure this is what I see happening now, since the config as specified via intern:subtask gets overwritten. How should I set up things so I can run the subtask as specified.. ",
    "johanchouquet": "Indeed, I'm behind a proxy, but I've been installing some packages from npm before that, and it was working. And I was following the Readme file so I wanted to tell you.\nLine 1291 indicates \"cause=Parse Error\". I don't know what that is.\nAnyway, I'll see that tomorrow.\n. Absolutely @vladikoff . So, is this url \"wrong\" ? Should the package be declared on the npm site ? Tomorrow, I'll see how I can set correct user/password for accessing github. Thanks for your help.\n. @vladikoff : Ok, I understand that. But in this case, when doing \"npm install\" why does it fail? As I understand it, it tries to fetch this package, on github, and as I'm behind a authenticate proxy, it fails fetching it... is that right? So, maybe npm does not take my git config file, where I've defined my proxy user / password ?\n. ",
    "alexanderdean": "Thanks for clarifying @csnover As a short term workaround, what about me adding the latest Chai as a dependency to my project and then passing that into the test instead of intern/chai - is that crazy?\nhttp://stackoverflow.com/questions/16680396/replacing-chai-assertion-library-in-intern\n. ",
    "nmackey": "That would be great.  Let me know and I would be more than happy to take a look.  The biggest issue for us is we use 'shim' from requirejs and being able to drop our requirejs config into the intern loader would be really nice.\n. Sorry, been busy.  Looking at things now.\nJust as another possibility what if you just included a loader library as part of the intern (requirejs or curl.js or something else) that provides the ability to load non-amd libraries using some sort of 'shim'.\nI like the flexibility you are trying to implement, but I'm not sure if it is necessary if there is a loader that complies with the AMD spec.  So if the dojo loader ever adds support for 'shim' you can drop the other loader.\nJust an idea.\n. ",
    "kanchamreddy": "I hope this is the same issue I am running into, when using intern for testing my Node app modules, which are AMD and use RequireJS.  I see a couple of issues.\n- If a module is defined with a name, and the test is run , there is an error \"moduleName does not contain a method 'map' \"\n- The second one is it can't resolve require - I think this is what this issue is about.\ndefine('moduleName',[],function(require){ var r= require(request); })\n. ",
    "thedrow": "Nevermind. I saw the pull request on the examples repository. Thanks!\n. ",
    "jsdevel": "@csnover \n1.  Wouldn't most machines require java to support selenium?\n2.  Why is blocking the main event loop a big deal for browser testing?\n. 1.  I agree with these sentiments.\n2.  child_process with environment variables would solve this.\n. ",
    "eisakson": "Anyone working on this? @lbod is this your work? http://hellinterface.wordpress.com/javascript/theintern/javascript-and-jenkins-integration-using-intern-part-3/\n. ",
    "jgiffard": "Hello, I did a \"custom and very basic\" JUnit reporter for my tests (https://gist.github.com/JGiffard/11213636),  but my '/client/end' function is never called (I start my tests with client.js and intern 1.6.0). So, currently, I rewrite my xml output file at each end of suite and it's works but it's not very optimized. \nDoes anyone has a better idea on how to do specific actions at the end of tests ?\n. Thank you, I didn't see it in the \"Using and Writing Reporters\" topic, I am probably blind or I read it too fast... Nevermind, I would be glad to use a better JUnit reporter.\n. ",
    "mathieumg": "I don't mean to hijack this thread, but is this something I need to wait for if I want to setup regression testing on my intern tests with Bamboo CI?\n. The official Bamboo Node.js plugin refers to this module for mocha tests: mocha-bamboo-reporter. I imagine I could fork it/inspire myself from it to write an Intern reporter, using the custom reporter documentation you linked to.\n. @csnover Sorry for the delay, I'm awaiting our setup of Bamboo CI to be ready to give this a shot. I thought it would have been by now but there have been some delays. I plan on trying this as soon as that's done. Thanks for taking the time to write this!\n. @relcapp Sorry for the delay. Not yet, I've been nagging our admin to get our proper Bamboo setup and I'm still waiting for it. I'll report here as soon as I hear back and can test it.\n. ",
    "Blasz": "@csnover I've tested this with Jenkins, seems to be working okay. Unit test results are duplicated though. I.e. if I have 3 browsers, one test returns 6 test results instead of 3.\nApart from that it would be nice if the results are grouped into suites and functionalSuites to separate unit and functional tests.\nAlso would be good if a test result was associated with the browser it was tested in.\n. This should check against args.suites as well since config.suites could be set to null and the suites on the commandline wouldn't get executed.\n. It seems like this issue stems from the fact that the dojo dependency of intern is pointing to a dojo fork that is maintained separately from the main dojo repo which intern-geezer is using.\nThe dojo repo that intern points to contains the dojo part of the fix (commit), but the dojo@1.9.3 branch does not.\nIs there any possibility of this getting fixed in dojo@1.9.3 or intern-geezer using the same dojo repo as intern?\n. Updating the dojo depedency to dojo/dojo@af45feb8fdb71e014256ad4191d4ea49357c2a5b did indeed fix the issue. Unsure if that is the same commit you wanted me to update to since the link you provided wasn't parsed as intended.\nThanks for fixing this.\n. To fix this issue, could intern normalize the baseUrl value with ../../ for the browser client?\n. proxyUrl: 'http://<webserver-hostname>/my/webserver/location/' as per step 1 of the reverse proxy guide\nedit (merging comments):\nMy application directory root is not the same as the root of the web server, it is a subdirectory of the web server root, setting proxyUrl to the root of the server will not work.\nSimilar issue on stackoverflow: http://stackoverflow.com/questions/24896902/issues-with-intern-runner-and-proxyurl-that-contains-subfolders\n. Yes it would just be baseUrl changes in client.html and clientSuite.js. I am currently fixing this in my fork and will make a pull request soon.\n. Have we come to the conclusion that this is a bug? My pull request #251 fixes this issue.\n. Could someone have a look at this?\nCheers.\n. Feedback addressed.\n. I have also experienced this when I did not have the intern proxy url configured correctly. Trying to run the unit tests resulted in 404's and the 'get current url' heartbeat resulted in an infinite wait.\n. Thanks for the requireJS suggestion, I'll try it in the coming days.\nThe main concern of this issue, however, is the fact that if an uncaught error occurs during unit tests, regardless of what it is, it causes the runner to hang if the reportersReady boolean is false in the code I mentioned above.\nPerhaps the error could be thrown after the /client/end message has been published?\n. FYI, this also happens when there are any uncaught javascript errors in the test module, regardless of module loading issues, provided that the reporter hasn't loaded yet.\n. Ran it again, produced a different ordering:\n```\nRunning \"intern:runner\" (intern) task\nListening on 0.0.0.0:9002\nStarting tunnel...\nInitialised chrome 37.0.2062.102 on XP\nInitialised firefox 31.0 on XP\n=============================== Coverage summary ===============================\nStatements   : 29.82% ( 2982/10001 )\nBranches     : 20.32% ( 1789/8804 )\nFunctions    : 30.11% ( 583/1936 )\nLines        : 26.23% ( 1853/7064 )\n================================================================================\n\n\nchrome 37.0.2062.102 on XP: 0/2 tests failed\n\n\n=============================== Coverage summary ===============================\nStatements   : 29.96% ( 2996/10001 )\nBranches     : 20.51% ( 1806/8804 )\nFunctions    : 30.17% ( 584/1936 )\nLines        : 26.23% ( 1853/7064 )\n================================================================================\n\n\nfirefox 31.0 on XP: 0/2 tests failed\nInitialised internet explorer 11 on WINDOWS\nTypeError: Cannot read property 'length' of undefined\n    at /home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/object-utils.js:243:37\n    at Array.forEach (native)\n    at Object.mergeFileCoverage (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/object-utils.js:240:31)\n    at /home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/collector.js:70:44\n    at Array.forEach (native)\n    at Object.Collector.add (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/collector.js:67:31)\n    at Object./runner/end (/home/dev/public_html/gold_widgets_15644/node_modules/intern/lib/reporters/runner.js:87:35)\n    at Object.target.(anonymous function).dispatcher [as on/runner/end] (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/aspect.js:91:38)\n    at Function.on.emit (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/on.js:281:37)\n    at Object.Evented.emit (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/Evented.js:31:19)\n\n\n=============================== Coverage summary ===============================\nStatements   : 31.35% ( 3164/10091 )\nBranches     : 20.9% ( 1786/8547 )\nFunctions    : 30.56% ( 576/1885 )\nLines        : 27.55% ( 1967/7140 )\n================================================================================\n\n\ninternet explorer 11 on WINDOWS: 0/2 tests failed\n```\n\n\nAnd another:\n```\nRunning \"intern:runner\" (intern) task\nListening on 0.0.0.0:9002\nStarting tunnel...\nInitialised chrome 37.0.2062.102 on XP\nInitialised firefox 31.0 on XP\nInitialised internet explorer 11 on WINDOWS\n=============================== Coverage summary ===============================\nStatements   : 29.96% ( 2996/10001 )\nBranches     : 20.51% ( 1806/8804 )\nFunctions    : 30.17% ( 584/1936 )\nLines        : 26.23% ( 1853/7064 )\n================================================================================\n\n\nfirefox 31.0 on XP: 0/2 tests failed\n\n\n=============================== Coverage summary ===============================\nStatements   : 31.35% ( 3164/10091 )\nBranches     : 20.9% ( 1786/8547 )\nFunctions    : 30.56% ( 576/1885 )\nLines        : 27.55% ( 1967/7140 )\n================================================================================\n\n\ninternet explorer 11 on WINDOWS: 0/2 tests failed\n\n\n=============================== Coverage summary ===============================\nStatements   : 29.59% ( 2959/10001 )\nBranches     : 19.84% ( 1747/8804 )\nFunctions    : 29.86% ( 578/1936 )\nLines        : 26.2% ( 1851/7064 )\n================================================================================\n\n\nchrome 37.0.2062.102 on XP: 0/2 tests failed\nTypeError: Cannot read property 'length' of undefined\n    at /home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/object-utils.js:243:37\n    at Array.forEach (native)\n    at Object.mergeFileCoverage (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/object-utils.js:240:31)\n    at /home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/collector.js:70:44\n    at Array.forEach (native)\n    at Object.Collector.add (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/istanbul/lib/collector.js:67:31)\n    at Object./runner/end (/home/dev/public_html/gold_widgets_15644/node_modules/intern/lib/reporters/runner.js:87:35)\n    at Object.target.(anonymous function).dispatcher [as on/runner/end] (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/aspect.js:91:38)\n    at Function.on.emit (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/on.js:281:37)\n    at Object.Evented.emit (/home/dev/public_html/gold_widgets_15644/node_modules/intern/node_modules/dojo/Evented.js:31:19)\n``\n. Theb` key of the coverage objects (representing branches I think) of a file were of different lengths. Merging them hence resulted in this error.\n\n\nI am not sure what caused the problem, but when I removed browser environments from my config file to test 2 browsers at a time instead of 3, the issues disappeared and I now cannot reproduce the error.\nUnsure whether this is an intern or istanbul issue, it seems very similar if not identical to daniellmb/grunt-istanbul-coverage#10. Perhaps it is the way intern uses reporters in conjunction with istanbul that results in a scenario similar to the one described in that issue.\n. Can we keep this issue on topic please? The grep feature is completely unrelated to this thread.\n. That would be awesome.\n. While this does make client and runner mode execution distinguishable, for completeness I think the runner mode should be set correctly when executing via the runner. Judging by the commit, it only looks like client mode will be set.\n. Then the configuration isn't being read correctly in the runner unit test browser. After executing the runner with leaveremoteopen, I browsed to the unit test url and set a breakpoint to the configuration file and mode was null.\n. If that is the case, then I guess this method isn't a solution to the problem of distinguishing between unit tests executed manually via client.html and those executed via the the test runner.\nOut of interest, in what scenario would knowing that the mode is 'runner' be beneficial since it would only happen in functional test modules that are already explicitly set in the functionalSuites configuration item. The only scenario I can see is if you are using the same module for both unit and functional tests...which seems counter-intuitive.\n. I'm trying to dynamically set useLoader['host-browser'] so that it works in both environments. The browser unit test page does not have the same filepath 'depth' with respect to the project root.\nI.e.\n- Browsing manually - http:///node_modules/intern/client.html\n- intern runner - http://proxyUrl/__intern/client.html\nBrowsing manually is three levels deep from the project rooot whereas the runner is two.\n. That's fine, just curious how the suites become [ '' ] if\n[].concat('' || []) - lib/realClient#L32 \nresults in [] rather than [''] due to '' being falsey.\n. @csnover I will eventually unless someone else does so first.\n. In my opinion, grep has different semantics to skip and therefore should be handled differently. They are inherently different and so consistency should not matter.\ngrep implies that it does not execute the test at all (and therefore should not execute it's beforeEach/afterEach methods). skip is programatically called within the test itself and so intern doesn't know that a test is being skipped until runtime. beforeEach/afterEach should be running in this case.\nCommon sense says that grep should skip beforeEach/afterEach.\n. This issue is slightly different to #249.\nWhen baseUrl is changed from root, #249 says client mode (node and browser) path resolution conflicts (due to the relative path of baseUrl being interpreted differently) whereas this issue is saying runner and client (irrespective of mode) path resolution conflicts (due to baseUrl being forced to the root directory in the runner).\nEither way, the solution for @kevingreen24 is as @csnover states, to not set a baseUrl (as it defaults to root, only works in all modes when root and is coerced to root when using the runner anyway) and to create paths config entries for each path portion directly under your intended source's intended baseUrl (app/src).\nFor example if you had \n- Root/\n  - app/\n    - src/\n      - foo/\n        - something.js\nYou would define a paths config for foo:\npaths = {\n    ...\n   'foo': 'app/src/foo'\n    ...\n}\nSo that foo/something resolves to Root/app/src/foo.\n. ",
    "relcapp": "@mathieumg, any update on Bamboo CI and theintern integration?\n. ",
    "steveoh": "Yeah @dylans you have the idea. I figured you'd be familiar with jasmines html reporter/spec runner so I didn't get too detailed. thanks1 :thumbsup: \n. @stdavis\n. ",
    "inancgumus": "I've intern 3.0.0 and when I try to run functional tests it says:\nError: Error: Cannot find the Node.js require at http://localhost:8000/node_modules/intern/node_modules/dojo/node.js:14:59\nIs this the same problem or not?\nPS: I'm powering the server through python simple server\n. @csnover actually, I'm accessing the localhost inside a server not in a browser code directly. And, intern does that not me :)\n. ",
    "mweaver": "Yes, I believe it is.\n\nOn Aug 3, 2015, at 5:57 AM, deeperx notifications@github.com wrote:\nI've intern 3.0.0 and when I try to run functional tests it says:\nError: Error: Cannot find the Node.js require at http://localhost:8000/node_modules/intern/node_modules/dojo/node.js:14:59\nIs this the same problem or not?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "benlangfeld": "I see this issue with Intern 3.0.0:\n```\n\u27ad grunt intern:unit\nRunning \"intern:unit\" (intern) task\nListening on 0.0.0.0:9000\nTunnel started\n\u2023 Created session phantomjs on any platform (51e58e3b-ce2f-4860-8743-13f525896e92)\n\n\nSuite phantomjs on any platform - unit tests FAILED\nError: Error: Cannot find the Node.js require at http://192.168.88.1:9000/__intern/node_modules/dojo/node.js:14:59\nNo stack or location\n\u00d7 phantomjs on any platform - Basic chat operation - should load the correct page (0.237s)\nAssertionError: expected 'Browser test runner' to equal 'Candy - Chats are not dead yet'\n  at Assertion.assertEqual  \n  at Assertion.ctx.(anonymous function) [as equal]  \n  at Command. \n  at runCallback  \n  at Command. \n  at \n  at run  \n  at \n  at process._tickCallback  \n  at Command.then  \n  at Test.test  \n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \nNo unit test coverage for phantomjs on any platform\nphantomjs on any platform: 1/1 tests failed\nTOTAL: tested 1 platforms, 1/1 tests failed\nWarning: Test failure; check output above for details. Use --force to continue.\n\n\nAborted due to warnings.\n```\nI don't use NodeJS require() right now, and it seems neither does Chai at that line number, so I am utterly confused.\n. Has anyone seen the above issue before? This is, unfortunately, preventing Candy from upgrading Intern and using Webpack.\n. That seems to have fixed it. Thanks @csnover!\n. Instead of filtering on the name of the test, it might be nice to have tags associated with examples which could be used as a filter:\njavascript\nbdd.it('should do something one day', {skip: true}, function () {\n  throw 'Hold your horses';\n});\n. Is there any chance this could be backported to Intern 2.x? 3.x hangs when run against Selenium (try bumping https://github.com/theintern/intern-examples/blob/master/phantomjs-example/package.json#L8 and this becomes very clear; separate issue coming up soon for that) and I need this change for ES6 compat in Candy.\n. Demonstration of the breakage with Intern 3.0.0 is at https://github.com/theintern/intern-examples/pull/25.\n. ",
    "jayeshmori": "I am also in the same boat. I have took over a large DOJO application which has hundreds of DOH test cases which i would like to migrate to intern eventually. We started writing new test cases with intern and i did refactor few DOH unit test cases with intern without much trouble. When it comes to widget testing it gets tricky. \n. ",
    "evanrmurphy": "You're welcome, thanks for Intern!\n. ",
    "pifantastic": "I think that is an excellent idea and would suffice to solve my problem. Feel free to open a separate issue and we can close this one or we can repurpose this issue for that particular enhancement. \n. I might be able to work on it. What did you have in mind for the JSON schema? I see two approaches:\n1. Build a single object representing the entire test. Something like:\njson\n{\n    \"errors\": [],\n    \"sessions\": [\n        {\n            \"suites\": [\n                {\n                    \"tests\": []\n                }\n            ]\n        }\n    ]\n}\n1. Output objects as they become available. This could map directly to reporter events:\njson\n{\n    \"event\" : \"test/start\",\n    \"args\": [\n        {\n            \"name\": \"Some test\"\n        }\n    ]\n}\nThe former is simpler to consume, but requires buffering the JSON until the test completes. The latter makes  it simpler to stream the JSON so that it can be progressively rendered. However it makes consuming it more challenging.\n. @csnover it's almost that easy. The proxy outputs some of its own messages that get intermixed with the reporter's messages. I can think of a few hacky ways around that but none of them make me feel very good. \n. I'll write tests if you think this is something you'd like to merge. Looks like I can mostly snag the console reporter tests.\n. Sorry :/ I don't have time to unravel these. It's working for my needs. If someone else has the time, would be great if they pick it up.\n. This is something I've a desire to do as well. For environment specific configuration, it makes sense to live with the intern config. \n``` javascript\ndefine([\n    'internConfigurationThingHere',\n    'intern!object',\n    'intern/chai!assert',\n    'request'\n], function (config, registerSuite, assert, request) {\n    registerSuite({\n        name: 'homepage',\n    'title': function () {\n        var dfd = this.async(1000);\n\n        request(config.baseUrl + '/homepage')\n            .then(dfd.callback(function (data) {\n                assert.strictEqual(data, 'Hello world!');\n            }, dfd.reject.bind(dfd));\n    }\n});\n\n});\n``\n. @vladikoff this precisely states my needs as well.\n. I think the second option here is closer to what I'm looking for. And this is a good example of making this work. My thought was that intern could do this automatically, but that's up to the maintainers.\n. @csnover we just want to be able to run functional tests throughout the release process:\n- Run functional tests locally:local.hotshit.com- Run functional tests in qa:qa.hotshit.com- Run functional tests in stage:stage.hotshit.com- Run read-only functional tests in production:www.hotshit.com`\nEach environment has a few configs unique to it, specifically, which tests run and against which baseUrl. From the perspective of a user of intern, it'd be really nice if we could just require('config') in our tests, and have available to us the specific configuration that was used to execute the tests.\n. Nothing obvious to me. I'll try and dig a little deeper in the next few days.\n. Fair point. I have several other custom grunt tasks I'm authoring that output TC messages. There is a specific TC escaping syntax, as well as a few things that are nice to have abstracted (like flowIds). For me, it made sense to wrap that stuff up in its own module. There is a lot more this reporter can do (like provide diffs, and other more detailed test information). Down the road the TC dependency should become more handy.\n. I like that idea @RoystonS. How would you specify the reporter?\nnode runner.js config=tests/selftest.intern reporters=node!intern-teamcity\nLol, does that even work?\n. ",
    "lawnsea": "OH MAN. Verified. Dang it, I am 0 for 2 reporting bugs to this repo.\n. One change that might help is to the wiki page on the subject. Instead of \"Run node runner.js config=path/to/config\", \"Run node runner.js config=amd/module/path/to/config\" might be more clear.\nIn fact, \"Run node node_modules/intern-geezer/runner.js config=amd/module/path/to/config\" might be even better.\nThanks again for the quick response!\n. So it sounds like there are two features under discussion here:\n- reading the config of a test\n- overriding the config of a test\nThese both seem like reasonable things to want to be able to do. @neonstalwart's suggestions handle the first feature, but I don't see how they help with the second.\n. ",
    "brandonpayton": "I'd appreciate a feature like this as well, especially with functional tests which can be a bit slower.\n. What about a tests argument that is like the suites argument but for single tests? The strange part seems to be how to address a single test. Since multiple suites can be defined in the same module, it likely isn't enough to specify module ID and test name. Maybe something like tests=<moduleID>:<suiteName>:<testName>.\n. This could have been explained better. The issue is that assert.property({ foo: 0 }, 'foo') will fail on geezer due to this line which just checks !object[property]. A similar issue exists for assert.deepProperty. This pull request adds tests and addresses both.\n. ",
    "draperd": "Slightly off-topic... but which IRC channel/host are you using?\n. Apologies for the lack of information... this is Firefox - was previously working to return full URL (not sure about request parameters as we're not setting any, but definitely not returning hash fragment). Will check the WebDriver server and update the ticket with test case (won't be until tomorrow now though)\n. Test case info: We have a custom widget which sets the hash via the \"dojo/hash\" module. We other custom widget behaviour is triggered off hash changes. We have a functional unit test that makes the widget set the hash and then we have some test code that checks the URL fragment... the snippet of test code looks like this:\n.url()\n            .then(function(page) {\n               TestCommon.log(testname,54,\"Check fragment hash has been updated: \" + page);\n               expect(page).to.contain(\"#field1=test1&field2=test2\", \"Test #1 - form submit did not update hash fragment\");\n            })\n            .end()\nThis test was working fine before we did an npm install (to get the latest version of Intern and it's dependencies) going from 1.5.0 to 1.7.0. The test case was not modified in anyway. We noticed this failure against Firefox.\nNPM reports the version of \"selenium-standalone\" that we're using as: selenium-standalone@2.41.0-2.9.0\n. Is there likely to be any difference between using the .execute() function to set the hash as opposed to some code within page? I'd prefer that we were comparing like for like here, in this case it seems that we're not comparing apples with apples here, e.g. does this work when something other than .execute sets the hash? \nI've attached a screenshot showing the unit test page where you can clearly see that the hash has been set. As I said before, this was previously working prior to the upgrade. \n\n. My understanding is that Intern is going to be adopted for all Dojo unit tests (replacing DOH)... so at some stage this will need fixing (unless context menu tests have already been written and are passing?)\n. ",
    "bitmage": "The same link appears in the intern-tutorial in step 4:\nhttps://github.com/theintern/intern-tutorial#step-4-write-a-functional-test\nText is 'WD.js list of available methods'.\n. ",
    "tommahieu": "State in closure:  Ok.    We refactored approx. 1600 DOH tests to intern.  We had the (bad?) habit when using DOH of storing state in the test instance, particularly if the setup was done in a setUp function (can't recall if that was common practice in the Dojo toolkit as well, ...).   Some of those tests were created before the AMD era, where we did not have the reflex of creating a closure around a set of tests to store suite specific state in.  \nOn the discussion of context:  The only public API I am aware of in the context of writing a test (as opposed to writing a reporter), is the async() method and the remote property on a Test instance?  Calling the async() method from beforeEach() seems pointless.  The remote property is available from the Suite (Test#remote delegates to Suite...).  So this entire issue seems invalid.\nThanks for taking your time to look into this though,\nTom\n. ",
    "leohuber": "First of all, this applies only to our server side unit tests that run completely in node. It is clear that shell environment variables are not available in the browser. \nWe have a webserver that is also accessing a db. We created unit tests that test various aspects of the persistence layer (fetching, storing objects, etc.). The code that is accessing the db (db connection string, username, password, etc.) is configured using https://github.com/lorenwest/node-config which relies on an environment variable NODE_ENV to decide which properties to load. In our case we have different values for the db connection string and username, password for the unit tests, development environment, etc. However, because the persistence layer is relying on an environment variable NODE_ENV to decide which properties (db connection string, etc) to load, we would like to pass this variable to the intern process running our server side (node) unit tests. But with the current implementation of the intern grunt task I see no way to pass any environment variable to the process that is running the intern tests in node.\nI hope this makes it a bit more clear what we are trying to do. If not let me know, I will try to provide some code examples.\n. If I do\nexport NODE_ENV=production\nnode_modules/.bin/intern-client config=tests/intern env=$NODE_ENV\nit all works fine since the process that is running the tests has access to the NODE_ENV variable with process.env.NODE_ENV inside node (and I even have access to env on the client via intern/lib/args - I didn't know that, so thanks for the hint). However if I run the tests with a grunt task\nexport NODE_ENV=production\ngrunt intern\nwith a grunt file containing\ngrunt.initConfig({\n    intern: {\n        default: {\n            options: {\n                config: 'tests/intern'\n            }\n        }\n    }\n});\nThe environment variable NODE_ENV does not get exposed to the process running the tests.\n. For me a good solution would be if I could pass additional arguments to intern via grunt like\ngrunt.initConfig({\n    intern: {\n        default: {\n            options: {\n                config: 'tests/intern',\n                v1: 'value1',\n                v2: 'value2',\n                env : {\n                      e1: 'env1',\n                      e2: 'env2',\n                }\n            }\n        }\n    }\n});\nand this would be aquivalent with\nexport e1=env2\nexport e2=env2\nnode_modules/.bin/intern-client config=tests/intern v1=value1 v2=value2\n. Sorry for the delayed answer - I was on vacation. I made a quick fix for temporarily solving my problem by just adding NODE_ENV to list of variables that are added to process.env. In the intern task I adapted the statement in line 12\nvar environmentKeys = {\n    sauceUsername: 'SAUCE_USERNAME',\n    sauceAccessKey: 'SAUCE_ACCESS_KEY',\n    nodeEnv: 'NODE_ENV'\n};\nand the loop in line 34\n[ 'sauceUsername', 'sauceAccessKey', 'nodeEnv'].forEach(function (option) {\n      var environmentKey = environmentKeys[option];\n      env[environmentKey] = opts[option] || process.env[environmentKey];\n});\nand then my grunt config looks like\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        intern: {\n            serverTests: {\n                options: {\n                    config: 'tests/tests-server',\n                    nodeEnv: 'unittests'\n                }\n            }\n        }\n    });\n};\n. ",
    "SlexAxton": "Hey @vladikoff -- how would you go about using this with grunt-intern?\n. So fresh. Will try it asap.\n. :(\n. This is arguably a hack that wouldn't go in until that branch got merged into chai, which it should soon.\n. I believe transferPromiseness is the magic, yea.\n. ",
    "michelle": "This helps a bunch; thank you so much @vladikoff! :)\n. ",
    "owiber": "I did this in my functional test to use chai as promised:\n``` javascript\ndefine([\n  'intern',\n  'intern!bdd',\n  'intern/chai!',\n  'chai-as-promised'\n], function (intern, bdd, chai, chaiAsPromised) {\nchai.use(chaiAsPromised);\n  chai.should();\n  chaiAsPromised.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise);\n    if (promise._enrich) {\n      promise._enrich(assertion);\n    }\n  };\n...\n```\nA hassle to do in every test, but seems to work...\n. @SlexAxton Never mind, this still has the issue where you can't chain off of the chai promise. =(\n. I don't propose this as the actual solution, but as a POC, this is what does it:\njavascript\n  chaiAsPromised.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise);\n    [\n      'newElement','attach','detach','_init','_jsonWireCall','_sauceJobUpdate','init','status','sessions','getSessionId','getSessionID','execute','safeExecute','eval','safeEval','executeAsync','safeExecuteAsync','altSessionCapabilities','sessionCapabilities','newWindow','close','window','frame','windowName','windowHandle','windowHandles','logTypes','log','quit','get','refresh','maximize','windowSize','getWindowSize','setWindowSize','getWindowPosition','setWindowPosition','forward','back','setHttpTimeout','setHTTPInactivityTimeout','configureHttp','setImplicitWaitTimeout','setWaitTimeout','setAsyncScriptTimeout','setPageLoadTimeout','element','elementOrNull','elementIfExists','elements','hasElement','waitFor','waitForElement','waitForVisible','takeScreenshot','saveScreenshot','elementByClassName','elementByClassNameOrNull','elementByClassNameIfExists','hasElementByClassName','waitForElementByClassName','waitForVisibleByClassName','elementsByClassName','elementByCssSelector','elementByCssSelectorOrNull','elementByCssSelectorIfExists','hasElementByCssSelector','waitForElementByCssSelector','waitForVisibleByCssSelector','elementsByCssSelector','elementById','elementByIdOrNull','elementByIdIfExists','hasElementById','waitForElementById','waitForVisibleById','elementsById','elementByName','elementByNameOrNull','elementByNameIfExists','hasElementByName','waitForElementByName','waitForVisibleByName','elementsByName','elementByLinkText','elementByLinkTextOrNull','elementByLinkTextIfExists','hasElementByLinkText','waitForElementByLinkText','waitForVisibleByLinkText','elementsByLinkText','elementByPartialLinkText','elementByPartialLinkTextOrNull','elementByPartialLinkTextIfExists','hasElementByPartialLinkText','waitForElementByPartialLinkText','waitForVisibleByPartialLinkText','elementsByPartialLinkText','elementByTagName','elementByTagNameOrNull','elementByTagNameIfExists','hasElementByTagName','waitForElementByTagName','waitForVisibleByTagName','elementsByTagName','elementByXPath','elementByXPathOrNull','elementByXPathIfExists','hasElementByXPath','waitForElementByXPath','waitForVisibleByXPath','elementsByXPath','elementByCss','elementByCssOrNull','elementByCssIfExists','hasElementByCss','waitForElementByCss','waitForVisibleByCss','elementsByCss','getTagName','getAttribute','isDisplayed','displayed','isEnabled','enabled','isSelected','getValue','clickElement','getComputedCss','getComputedCSS','equalsElement','flick','tapElement','moveTo','buttonDown','buttonUp','click','doubleclick','type','submit','keys','clear','title','source','text','textPresent','alertText','alertKeys','acceptAlert','dismissAlert','active','url','allCookies','setCookie','deleteAllCookies','deleteCookie','getOrientation','setOrientation','setLocalStorageKey','getLocalStorageKey','removeLocalStorageKey','clearLocalStorage','isVisible','getPageIndex','getLocation','getLocationInView','getSize','uploadFile','waitForJsCondition','waitForCondition','waitForConditionInBrowser','sauceJobUpdate','sauceJobStatus','sleep','noop','chain'\n    ].forEach(function (method) {\n      if (typeof promise[method] === 'function') {\n        assertion[method] = promise[method].bind(promise);\n      }\n    });\n  };\nThe long crazy list of methods is basically the result of:\njavascript\nObject.keys(require('wd/lib/webdriver').prototype)\n... run from a node console in the intern directory. I'm not sure what a straightforward way of getting that list in the test is. I attempted to add intern/node_modules/wd/lib/webdriver as a dependency of the test, but that failed with:\n/usr/local/lib/node_modules/intern/node_modules/dojo/dojo.js:760\n                vm.runInThisContext(data, url);\n                   ^\nError: Attempt to require unloaded module events\n    at contextRequire (/usr/local/lib/node_modules/intern/node_modules/dojo/dojo.js:255:12)\n    at req (/usr/local/lib/node_modules/intern/node_modules/dojo/dojo.js:30:10)\n    at /usr/local/lib/node_modules/intern/node_modules/wd/lib/webdriver.js:1:20\n    at /usr/local/lib/node_modules/intern/node_modules/dojo/dojo.js:760:8\n    at fs.js:266:14\n    at Object.oncomplete (fs.js:107:15)\n...and I wasn't sure what to do from there, so just hardcoded the list to try it out. A better way to support this is probably to implement something like _enrich like in https://github.com/admc/wd/blob/master/lib/promise-webdriver.js#L102 so that my original code would work. =)\n. Boom!\n``` javascript\ndefine([\n  'intern',\n  'intern!bdd',\n  'intern/chai!',\n  'chai-as-promised',\n  'intern/dojo/node!wd/lib/webdriver'\n], function (intern, bdd, chai, chaiAsPromised, WebDriver) {\nchai.use(chaiAsPromised);\n  chai.should();\n  chaiAsPromised.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise);\n    Object.keys(WebDriver.prototype).forEach(function (method) {\n      if (typeof promise[method] === 'function') {\n        assertion[method] = promise[method].bind(promise);\n      }\n    });\n  };\n...\n``\n. I had this problem due to suites being null. Making it [] fixed it, but it's prob a bug since docs say \"suites can be set to null to skip loading the unit testing system when in runner mode\"\n. Prob same issue withfunctionalSuites(which you have commented out, so is probundefined`)\n. Some more context, it does successfully run a few tests before pausing and then causing memory to spike (and eventually crash). It also seems to consistently be the same tests that cause this, though I haven't narrowed down what exactly causes it. Something seems to cause a following interaction with leadfoot to break.\nAlso to clarify, the upgrade to npm3 also equates to blowing away our existing npm2 installed modules and reinstalling (so some deps probably got version bumped in that process). My suspicion is potentially some bad interaction between Intern (or its deps) and some other deps causes this since using our npm2 installed modules and just upgrading Intern didn't result in the problem. \n. The upgrade process is roughly:\nbash\nnvm use v6\nrm -rf node_modules npm-shrinkwrap.json\nnpm install # our package.json has ^3.1.1 for intern, so this brings in 3.2.3\nWe experience the issue at that point. If I then npm install intern@3.1.1, issue goes away.\nGoing back to npm2 land, if I just npm uninstall intern && npm install intern@3.2.3, the issue is not present.\nI'll give attaching a debugger a try.\n. Upon further investigation, while something in Intern 3.2.3 may have exacerbated it, I believe the root cause lies in other dependencies of ours.\n. ",
    "sjdemartini": "I'd love to be able to set the output directory for the reports. Very much looking forward to this functionality!\n. ",
    "kevin-miles": "+1 for configurable output directory/name\n. Expanding on this: is it possible to execute a separate test at any point in a test?\n. thanks to kgf on IRC. suggested moving the test to a separate function.\noriginal test will execute the function. other tests can build off of it.\n. ",
    "msssk": "Awesome, thanks! This line, further up, should probably be reworded:\n\"The async method accepts one argument\"\n. ",
    "pjekel": "An alternative would be to add a third, optional linger, argument to async() as in:\nasync(timeout, max, linger)\nLinger being an addition timer. If specified, the linger timer is started when the test is considered \"done\" entering a \"waitFinal\" state. If additional (spurious) calls are made to the callback during the \"waitFinal\" state the test state would change to \"failed\" or \"success\" otherwise.\nThis feature would be very helpful in event driven environments to specifically detect spurious events.\nThink of the following scenario:\nIf a tree node is expended, I should not receive more than X showChild events, X being the number of\nchildren of the given tree node\n. ",
    "plumlee": "You may wish to back this out - I\u2019ve been testing locally, and the API for various waitFor methods in wd has changed in a way that may break. No tests broke because there\u2019s none that explicitly call these methods. If I can determine what\u2019s needed, I\u2019ll update the pull request.\n. What\u2019s changed is that the WebDriver now uses asserters to determine when a \u2018waitFor\u2019 method should succeed. By default, they don\u2019t have to be passed, so I assume that the WebDriver has a reference to the built in asserters and can use those. Looks like the wrapper that intern puts around WebDriver doesn\u2019t properly expose them, do waitFor methods all error out saying the condition was not satisfied.\nLink to WebDriver asserters: https://github.com/admc/wd/blob/master/lib/asserters.js\n. waitForElementByName.\n. Maybe my local setup was borked then, or was just a bad test written by \nme. Good to know, thank you for testing this. I kept meaning to go back \nand try, but never found time. Thanks again.\nOn 27 Mar 2014, at 18:46, Jason Cheatham wrote:\n\nI tested this a bit in with a local Selenium server. The current \nversion of wd used by intern master is 0.2.11. The waitForCondition \nmethod displays a deprecation warning, but works without error. The \nwaitForElementByName method doesn't issue any warnings (the \nwaitForElementByX methods have not been deprecated according to the \ndocs) and works as expected.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/theintern/intern/pull/158#issuecomment-38870491\n. Will work on this and get a PR together - thanks.\n. Running into a bit of an issue that I will eventually resolve, but thought I'd ask here: \n\nhttps://github.com/theintern/intern/blob/master/runner.js#L282\nNot sure in what scope __internCoverage is defined here - I've tried a few different things but it's not clear to me. Seems that it's being inherited from the Tunnel but not sure. I'm trying to do something like \nif (scope && typeof scope[config.coverageVariable] !== 'undefined') ......\nbut I'm not getting scope correct.\n. I've tried global but it's not defined there (the property of global, I mean - global[config.coverageVariable]). At least when running it like this: ~/git/intern_MASTER/bin/intern-runner.js config=test/config/intern-unit-browser where intern_MASTER is my local forked copy. Tests run, but I do't see the output. I can go ahead push what I have so far to my fork if that's helpful to look at.\n. @vladikoff I'm a moron. I've been running my code against a project I'm in the middle of, and I do a browserify transform before I ever pass it to intern in that case. You're right, it's defined in the global scope.\n. Thanks for the heads up. I was using map because it seemed to be the simplest way to just put \u2018sinon\u2019 in a define statement, versus having to do \u2018PATH/sinon\u2019, but sounds like that\u2019s a misuse. I reread the docs on AMD and see where that\u2019s not the purpose.\n. ",
    "RainerAtSpirit": "Good to hear, I close this. Workaround for  version <= 1.5 would be to add java as described.\n. ",
    "Fatlog": "Hi,\nThanks for the quick response.\nThis is a functional test I am writing...\nthis.remote\n    .get(require.toUrl('./SomeTest.html'))\nThis is whats timing out. How do I access the async/timeout objects?\nRegards\n. Hi,\nApologies if this is the wrong place to post but I have been looking through the intern source code and noticed the following comment in ClientSuite.js...\nLine 18: // TODO: Timeouts are not working?\nIs this correct and if so should it be recorded as a bug?\nThanks\n. ",
    "Flowkap": "Thx!\n. How do I proceed if i want to dynamically read the current IP. In my case (As we proceeded) any user may check out the repository and run intern via grunt). \nIn that case the current network IP shoudl be used automatically. The solution up to now is to manually use a custom argument. \n. After deeper search together with the support of sauceLabs no timeout between our suite and sauce appeared (test succesfull finished). \nI found out whats happening here by digging into runner.js! In runner.js on line 264 the assumption is made that if an accessKey is provided the remote object has an sauceJobUpdate routine:\n```\nrunner.js, line 264\n\n\n\n\n\n\nif (config.webdriver.accessKey) {\n    return remote.sauceJobUpdate({\n        passed: suite.numFailedTests === 0 && !suite.error\n    });\n}\n```\n\n\n\n\n\n\nIn fact if using an external sauceConnect instance (useSauceConnect: false) the credentials are still needed but the routine fails as the webdriver does not provide it. \nSame effect if using a selenium grid but having an accessKey present in the ENV (e.b. statically added to user path). Sauce isn't used att all in that case but the same error happens as only existance of the key is checked but not the availability of the routine.\nPlease reopen and fix!\n. Ok I understand, but still if you're using no sauce connect at all (which is not in the duty of intern to know about) but have a SAUCE key present in the path (which is of course valid!) this should not be executed. So this isn't OK in my opinion. \nSecondly, if using sauce connect externally the result is updated anyway by sauce connect itself! So this is only needed if using sauce connect locally in my opinion which is just one possible configuration. \nAbyway, if using this at all it should support the configuration of a corporate proxy as this is causing it to fail in our case. And as said before, should not execute at all as we delegate to an external entity of sauce connect which does the job already, but therefore we need the accessKey present.\n. Do you have a scheduled release for versionb 2.0? If its not too far in  the future we're fine to use the forked repo as dependency instead. \nIf its farther in the future please rethink temporariliy updating wd.js as others may experience the same issues. The PR is quite small and not breaking the auto tests. \n. But if the tunnel config depends on dowloading something this needs to be fixed!\n. Sorry, of course it belongs to digdug. \n. Sorry,\nsomeone copied the client.html locally\u2026\nit didn't match anymore.\n. ",
    "scbird": "+1\nThe offending line is https://github.com/theintern/intern/blob/a808650c49e4fd97da63ad185a8e9b16346ae913/assert.js#L920\n. ",
    "treasonx": "I can continue the work.\n. ",
    "daleeidd": "This feature doesn't seem to work for me. I have updated Intern to version 1.7, and my source code hasn't changed from the question I posted on Stack Overflow. Is there something special I need to do to activate this feature?\n. Thank you. I just learnt something new.\n. ",
    "tnunamak": "Okay I see how this is bit of a weird request now.\nI'm reusing my RequireJS configuration in the loader property of the Intern configuration module, and Intern itself does not live under my baseUrl. My tests depend on intern modules like intern!bdd. \nYet, those modules still resolve, presumably because intern has been already been loaded? I was originally thinking maybe there were ways to load other modules outside of baseUrl, but from what you've described it sounds like that's not possible.\nAs a side-note, it looks like my tests deserve their own loader configuration after all!\n. ",
    "sayrer": "yes please!\n. ",
    "pocesar": "+1\n. ah thanks, maybe this could be documented somewhere in the wiki\n. ",
    "mweibel": "I'd also like a skip feature, but API-wise I'd like to have it like mocha does it:\njavascript\nbdd.skip('should do something one day', function() {\n  throw 'Hold your horses';\n});\n. Ok, thanks for your detailed answer!\n. ",
    "OClement": "Tutorial still mentions this feature is coming soon\nShould be updated: https://github.com/theintern/intern-tutorial/find/master\n. That was quick, Thanks!\nJust starting to look into Intern, looking great so far!\n. ",
    "pknepper": "When will this PR become part of an official release?\n. ",
    "richardruiter": "When is this going to be merged? :+1: it is really awesome!\n. What do you mean with sponsor the work?\n. ",
    "lenntt": "The latest link to refactor-execution is dead, I wondered if there are any updates on the status/planning of the integration with cucumber?\n. A dirty workaround is to put this on top of my file.\njavascript\nvar orginalit = bdd.it;\nbdd.it = function( description, test )\n{\n    if ( typeof test === \"undefined\" )\n    {\n        test = function() { this.skip( \"Pending\" ); };\n    }\n    return orginalit( description, test );\n};\n. Not being able to ommit the test function is my whole point :)\n. I was not saying your code doesnt work, I'm saying adding more code, instead of less, when doing BDD, isn't efficient.\n. ",
    "b-3-n": "Alright, thank you very much for your answer. While this is definitely helpful and I might just stay with your proposed setup I still would suggest to consider allowing to load sources from an external source as it offers for more flexibility IMHO.\n. I mean a location other than inside the root folder of intern or subfolders thereof.\n. Yes I understood that. What I actually meant though is that it should maybe also be possible to reference source which are located in a parent folder of interns root folder - which is currently if I made no mistake not possible using the intern-runnre.\n. Alright. I opened it really because I thought it may be a bug. Btw: http://stackoverflow.com/questions/22842469/loading-dependencies-outside-of-the-intern-directory-when-running-tests-through \n. ",
    "lai": "@csnover sorry to revive this closed thread but this is the closest I can find to my question.\n~~I'm not sure I fully understand how I'm supposed to use waitForElementByName in Intern 2 properly. A workaround solution for me is to use~~\n.then(pollUntil('return document.querySelector(\".someClassName\")', 10000))\n~~To me this is a very common use case that seems to should have an equivalent to waitForDeletedByClassName.~~\nI found out I'm doing .findBy nested inside another .findBy and forgot to use .end at the end to balance the calls. That's why an async .findBy was failing.\nThanks!\n. ",
    "Shurakai": "Thank you for your quick response!\nUnfortunately, I spent ~5 hours today trying to get Intern to work and I really thought its due to me. Of course, having installed Intern with npm I had version 1.7, but all your examples and tutorials are relating to version 2.0 already. That's why I ran into a couple of problems.\nPlease, please do me a favor and do not update your live documentation when that information is not stable yet OR add a highlighted note that you're currently converting the documentation and that the documentation is for a future release.\n(I clicked on \"Documentation\" on theintern.io and certainly did not even think about having a version that's outdated.)\nThanks for your consideration and thank you for your great work on the intern, which is certainly appreciated. (Can I help with docs somehow?)\n. ",
    "admc": "FWIW, we are aware of the frustrations some folks are having with Intern and Sauce, and have a roadmap project in the coming weeks to dig in and contribute fixes to as many as we can. To be clear, our cloud supports IOS simulators and Android emulators, each of which has many successful users. We will also be making real devices available in the coming months.\n. ",
    "jlipps": "Which appiumVersion are these tests sending in the desired caps? The minimal version expected to work on Sauce is appium 1.2.1 (this is the first version of appium that allows executeAsync to work properly when appium is on a different machine than the client).\n. OK, sounds good @sbrunot. Better yet, request 1.2.2 (just released that new version on Sauce)\n. not sure what's going on there. looking at the logs, you call a refresh() command after navigating to \"about:blank?1\", then we don't hear from you for 60s so the server ends the session. is there a reason your client would be stalling at that point?\n. great!\n. No idea offhand what role Sauce Connect could be playing in causing Intern to send more data than otherwise. I'll ask around though and see if anyone has some ideas.\n. ",
    "jfridye": "@csnover We have what appears to be a similar issue whilst running our unit tests on BrowserStack. Intermittently we get a timeout in BrowserStack for Firefox 31.0 on OS X and every time in Windows 7 environments, even though tests ran successfully. BrowserStack attempts to post back, but there is no resolve in our test runner, and the process hangs indefinitely until manually terminated.\nWe are on Intern 2.0.1 and Node v0.10.29.\n. We are not getting the EMFILE error. \nThe BrowserStack session terminates with a status of Session timed out because the browser was idle for 90 seconds. However, the Intern runner hangs forever with a last output of Initialised firefox 31.0 on XP until manually terminated. We are seeing this whether the test runner is executed from our dev machines or CI environment (Jenkins), and for every session in a Windows 7 environment on BrowserStack.\nCould this be a problem with the configured value of proxyUrl being the default of http://localhost:9000?\nHere is a sample of the last few lines of raw logs taken from a session on BS: https://gist.github.com/jfridye/2de70b4792128f78249e. Hope this helps, and thank you!\n. To follow up on my comment above, we are no longer seeing the issue on BrowserStack, but are not sure what the root cause of the issue was. It is likely the case there was an issue in one of our unit tests that was causing the problem. If the problem comes up again and we are unable to troubleshoot, I will open a new issue against it. Thanks!\n. ",
    "tkrugg": "getAllWindowHandles doesn't quite do what I want, as I'm trying to list the contexts within the same window, or did I misunderstand you?\n. You're right. I was able to switch to the right context using switchToWindow(<name of my context>). I should have tried that earlier.\nThat said, I had to guess <name of my context>. I was expecting getAllWindowHandles to return a list of names, but all I seem to get is a session object.\n. that was my problem, thanks a lot!\n. ",
    "dennisreimann": "I just signed the CLA, Dennis Reimann - thanks for accepting this patch! :)\n. ",
    "tcooc": "The main problem we've been having is that the async action completes successfully, but there was an oversight in our code that later throws an error. When this happens, we'd expect the runner to fail, but instead it stops prematurely with a \"success\" message.\nFor example, this test passes but later breaks the test runner:\ntestAsync: function() {\n    var dfd = this.async(2000);\n    setTimeout(function() {\n        dfd.resolve(); // test passed\n    }, 1000);\n    setTimeout(function() {\n        throw new Error('This will cause the runner to break');\n    }, 2000);\n}\n. I don't expect intern to resolve/fix it, but it should fail with an error so that the problem can be detected and fixed by the person who broke it. We work in a large team, and not everyone writes flawless code and tests.\nThe example I gave is just a simplification. Some of our modules do parallel asynchronous requests. Some tests finish and run their cleanup before a request is finished, causing an uncaught error when the callback is called.\n. ",
    "DimitryDushkin": "Seems like there is no way to work with own selenium?\n. I figured it out. Just use tunnel: 'NullTunnel' and do not forget to set proper proxyUrl.\n. ",
    "hustcer": "Thanks a lot.\n. Great! Thanks.\n. ",
    "kmiyashiro": "Works, thanks!\n. ",
    "liucougar": "browser is in windows 7 running under local virtualbox VM. intern is running in another virtualbox VM (gentoo linux with 3.x kernel). the inter-connection between these two VMs is a host-only LAN (defined in virtualbox)\n(My host is gentoo linux with 3.15 kernel)\nso I'd say latency is minimal, and bandwidth is very high\n. did another test in different configuration:\nintern is still running in my local host virtualbox VM, windows 7 VM is running in another linux host running KVM\nboth my local host and the other linux host are in the same LAN (ethernet connection). setting nodelay or not, does not affect the performance\nhowever, when I change my local host to connect to the LAN with wifi (not ethernet), turning on nodelay has a performance penalty of 10%-20%\nso it seems this could be exposed as a command line option: for user with low latency/high bandwidth connection to their browser VMs, nodelay is beneficial\n. we are not using geezer edition\nthis is observed in IE10/win7. we don't have modification in client.html\n. somehow, in firefox, my fix breaks loading of webdriver reporter:\n[18:03:56.039] TypeError: node.attachEvent is not a function @ http://192.168.28.128:9000/__intern/node_modules/dojo/domReady.js:50\nit seems has(\"dom-addeventlistener\") is somehow false\n. we have some local modification which would allow bringing up multiple browsers of the same type, and distribute tests across them. we encountered this bug when we start more browsers than there are unit tests: we have 2 unit tests suites, which can be executed in 2 browsers of the same type concurrently, if we start 4 browsers of the same type, I would see this error occurring in those 2 browsers which don't have any unit tests to run. (they can still continue to run our functional tests, which can fully utilized more than 2 browsers of the same type concurrently)\ni am fine with closing this for now, we will look into this further later ourselves. thanks for your info.\n. ",
    "mzedeler": "Ok. I'll reopen a new ticket with the right wording. The problem is exactly the same...\n. I've found the problem and expect to post an update tomorrow. I'll try to make my example usable as a stub for others who want to get started with intern.\nColin Snover notifications@github.com wrote:\n\nRefs #238\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. \n",
    "Suyogsawant11": "Request module not abel to load as i'm using tdd testing\neg:\ndefine([ 'intern!tdd' , 'intern/chai!assert' , 'intern/node_modules/dojo/request' ], function (tdd, assert, Request) {\n});\nListening on 0.0.0.0:9000\nError: Failed to load module https from /home/Sites/Projects/p1/p11/intern_tests/https.js (parent: intern/node_modules/dojo/request/node)\n  at <../node_modules/intern/node_modules/dojo/loader.ts:831:119>\n  at fs.js:207:20\n  at Object.oncomplete  fs.js:107:15\n. you can even try this \nto load http module first - \nvar http = require('intern/dojo/node!http')\nvar request = http.request // you will able to access request\n. ",
    "CRTX": "Ah, so the docs actually mean it can only test non-amd _node_ code?\n. ",
    "vasikarla": "@vladikoff : any clue on how to fix this?\n. @vladikoff \n sudo killall -v sc\nPassword:\nNo matching processes were found\n. @vladikoff  thanks for your help.  Also, i see the below error when i run it from jenkins -> sauce\n- grunt intern:sauce\n  ?[4mRunning \"intern:sauce\" (intern) task?[24m\n  Listening on 0.0.0.0:9000\n  Starting tunnel...\n  Using no proxy for connecting to Sauce Labs REST API.\n  ?[1m*********_?[22m\n  A newer version of Sauce Connect (build 1283) is available!\n  Download it here:\n  https://saucelabs.com/downloads/sc-4.3-linux.tar.gz\n  ?[1m***********?[22m\n  Started scproxy on port 44054.\n  Starting secure remote tunnel VM...\n  Error: Not authorized\n  Error: Not authorized\n  at reject \n  at readStartupMessage \n  at \n  at Array.some \n  at Socket. \n  at Socket.EventEmitter.emit events.js:117:20\n  at Socket. <_stream_readable.js:746:14>\n  at Socket.EventEmitter.emit events.js:92:17\n  at emitReadable <_stream_readable.js:408:10>\n  at emitReadable <_stream_readable.js:404:5>\nany clue?\n. is this issue resolved?\n. CRogers : As a security precaution try to mask the user name and api key from the code snippet.\n. ",
    "ghost": "Is there an ETA on resolving this bug? It's really hampering my organization's ability to adopt TheIntern as our testing technology.\n. @wkeese I tried that but it didn't work. It may have something to do with the way our modules are authored and how they reference each other. See my post on #304\n. Yeah, I want be able to this.async in {before,after}{,Each} as well.\n. Oh, if setup and teatDown are fine by returning Promise, than I am ok with that.\n. The same thing i have posted in stackoverflow http://stackoverflow.com/questions/26388792/how-to-test-the-functionalities-using-theintern-io-using-javascript please take a look.\n. Thanks for the reply.\nThe problem with your suggestion (I think) is that we have dependent modules being used in our tests that assume their paths are sourced from app/src. So yes, I could define a package pointing to app/src and change the path on our modules referenced directly in the test, but modules referenced by those modules will still have paths written assuming base of app/src, and it obviously isn't feasible to change all of those.\nHow do you suggest handling this situation?\n. @dylans Our modules are authored to all be AMD modules relative to app/src (the baseUrl) as shown in the first post. And our modules sometimes refer to other modules in the define array which may refer to other modules etc...which all have their reference paths relative to app/src.\nIt sounds like in order to get the runner to work the config for Intern cannot have a baseUrl defined. If there's a way to create one of these maps in the config so that we can have all the modules stay the way they are written now that would work, I'm just not seeing how to do it with a map, although I'm fairly new to the concept.\n. Great yes, doing that I was able to get my tests to run. It causes the intern loader paths config to be bloated but hey, at least it works :)\nThanks all.\n. Reopen, pls.\nintern still hangs when environment is empty / not specified in both config and gruntfile.\n. I don't know, really. As I said, intern connects and asks for session id, testingbot logs the request as well as the response; but then, nothing more. They mention Appium, but https://testingbot.com/support/other/configuration does not mention any iphone driver.\n. Could you please contact people in testingbot? I cannot answer what driver they use.\nEDIT: I tried to point them here, but they did not respond.\n. BTW, this is output from grunt task (same for iphone as well as android, just browserName is different):\n```\nRunning \"intern:e2e-testingbot\" (intern) task\nSUITE ERROR\nUnknownCommand: [POST http://(redacted)@localhost:4445/wd/hub/session / {\"desiredCapabilities\":{\"browserName\":\"galaxy\n_nexus\",\"name\":\"tests/e2e\",\"idle-timeout\":60}}] The requested resource could not be found, or a request was received\nusing an HTTP method that is not supported by the mapped resource.\n  at Server.createSession  \n  at \n  at retry  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \n\n\n4/4 tests failed\nError: Run failed due to one or more suite errors\n  at emitLocalCoverage  \n  at finishSuite  \n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \n``\n. (as I already answered on tb chat, it still is)\n. Yes, sorry for not specifying it properly. It was about incorrectly reporting \"success\" back to TestingBot.\n. (BTW thank you for reminding me, I didn't realize it (one error like the other) - I must look what do I have running onlocalhost:80at all ;-) I completely forgot there's something set up there)\n. @csnover I must admit though that there is something in that what @testingbot says. When using other runners (karma, grunt-mocha-webdriver) they both successfully connect, get the session id and go on with the test (then they fail later on different error). They both usewd, so it seemswd` is aware of this \"feature\" of Appium and actually parses the wrong redirect to gets the session id. Only intern's leadfoot fails getting the session id.\n\n\nEDIT: Neither karma not grunt-mocha-webdriver are testingbot-specific and use plain webdriver.\n. (I presume @testingbot serves all clients identically and is not using some client detection)\n. Testingbot already sends correct redirect.\nNevertheless, maybe it would be nice to check response.url in createSession in case of error and if it ends with session/:id (doable without regex by .split('/') and checking next to last element), to try to GET the caps (and close session when error, since id is known so session started). For other installations out there which may have this quirk.\n. In the specific situation of TestingBot, the redirect is not correctly working and returning what it should.\nNevertheless, as it clearly (from what testingbot was saying in \"it is not a bug, fake redirect is used in this manner\"), it would be beneficial to test response.url in createSession if the redirect that failed does not contain specific 'get session' path anyway, infer the session id from that and getting the capabilities using subsequent request using this inferred id (as you were bothered by getting the caps and therefore you argued inferring session id from redirect path is no-go).\n. Don't know, project was put on hold.\nYou xan close, I think. If that would be a problem, it xan ve reopenef / created anew.\n. ",
    "JamesMGreene": "@jason0x43 has been invited now.\n. ",
    "zopemanish": "I want write the function tests using intern which require session maintenance across pages. Can you please elaborate with example how it can be done?\n. ",
    "hilnius": "Came from the fact that I had a selenium instance running on my machine. I happened to stop it at the same time I added the functuonal suites. For those who run into the same error make sure that the port you bind to is open. (the webdriver port).\n. ",
    "cloudbring": "It would be great to have a webdriver config option. I would like to be able to change the port and host. This would allow me to have a local selenium server running for developing and debugging tests locally while being able to run my cloud configs periodically to validate.\nI cannot do that now because the webdriver defaults to connecting the Selenium server on port 4444 both for local development and for remote/cloud configs. This means I have stop my local selenium-server manually before running the could configs. This would be really helpful for my workflow.\n. Thank you! Works like a charm!\n. ",
    "necolas": "I see. I don't know what's wrong with it, but it's producing that error. What additional info would help you out?\n. Yeah it is\n. Ah, so the issue is because we're running that command in a VM that contains a mirror of the source code! Outside the VM there is no problem. I can work around it by using intern/dojo/node!chai to bypass the symlink. Thanks and sorry for the confusion.\n. ",
    "smebberson": "I just came up against this issue too. I had chai already installed, and the installed Intern. I had the same error Error: Failed to load module intern/node_modules/chai/chai.\nI run my tests inside a Docker container. My host doesn't have Node.js installed at all.\nTo rectify this, I uninstalled chai as an npm module, and reinstalled Intern. This time, it actually had chai within it's own node_modules folder.\n. ",
    "andrey-buligin": "apparently when there is only ONE functional test suite argument passed then \"args.functionalSuites\" variable inside runner.js contains string \"tests/functional/index\" rather than array [\"tests/functional/index\"] that makes intern to hang.\n. OK I find a typo thanks :)\n. ",
    "kennytrytek-wf": "It's not just an issue with Jenkins. As @nicknisi mentioned in #312, it happens anywhere. As part of fixing this, the README should be updated. It currently shows sub-suites as valid JUnit output, but that is not supported in the JUnit XSD.\nCurrent intern-tutorial README:\n\nJUnit XSD:\n\nI followed the tutorial for creating unit tests, and that results in this invalid output:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites>\n    <testsuite name=\"Node.js\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.005\">\n        <testsuite name=\"hello\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.002\">\n            <testcase name=\"greet\" time=\"0\" status=\"0\"/>\n        </testsuite>\n    </testsuite>\n</testsuites>\nThe expected output for the junit reporter also does not meet the spec:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites>\n    <testsuite name=\"chrome 32 on Mac\" failures=\"2\" skipped=\"1\" tests=\"5\"\n               time=\"1.234\">\n        <testsuite name=\"suite1\" failures=\"2\" skipped=\"1\" tests=\"5\"\n                   time=\"1.234\">\n            <testcase name=\"test1\" time=\"0.045\" status=\"0\"/>\n            <testcase name=\"test2\" time=\"0.045\" status=\"1\">\n                <error message=\"Oops\" type=\"Error\">Error: Oops\n                    at Test.registerSuite.basic tests ...\n                </error>\n            </testcase>\n            <testcase name=\"test3\" time=\"0.045\" status=\"1\">\n                <failure message=\"Expected 1 + 1 to equal 3\"\n                         type=\"AssertionError\">AssertionError: Expected 1 + 1 to\n                    equal 3\n                    at Test.registerSuite.basic tests ...\n                </failure>\n            </testcase>\n            <testcase name=\"test4\" time=\"0.045\" status=\"0\">\n                <skipped>No time for that</skipped>\n            </testcase>\n            <testsuite name=\"suite5\" failures=\"0\" skipped=\"0\" tests=\"1\"\n                       time=\"0.045\">\n                <testcase name=\"test5.1\" time=\"0.04\" status=\"0\"/>\n            </testsuite>\n        </testsuite>\n    </testsuite>\n</testsuites>\n. @csnover The incompatibility occurs because the suites are nested, and that is not supported by the Python xunitparser module. http://git.p.engu.in/laurentb/xunitparser/\nI am working on submitting a patch to xunitparser, in hopes that it will be flexible enough to support it. Personally, I don't like the idea of a testsuite inside a testsuite, but that seems to be the way the tide is pushing, so I'll go with it.\n. ",
    "httpete": "It's working perfectly now, in the latest. Thanks @csnover \n. I found it, sorry.  For anyone's learning this is how I did it.\n```\n/// \n/// \nimport * as intern from 'intern';\nvar config =  {\n    /* Mention the headless or regular browser environments */\n    environments: [\n         //  { browserName: 'firefox' },\n        { browserName: 'chrome' }\n        //{browserName: 'internet explorer'}\n    ],\n\n    proxyPort: intern.args.proxyPort || 9991,\n    proxyUrl: intern.args.proxyUrl || 'http://localhost:9991/',\n\n    //tunnel: 'NullTunnel',\n\n\n    maxConcurrency: 1,\n\n    capabilities: {\n        'selenium-version': '2.44.0',\n        'idle-timeout': 60\n    },\n\n    //suites: [ 'app/demo-unit_test' ],\n\n    loader: {\n\n\n        config: {\n            'app/cluster/cluster-service': {\n                'clusterEndpoint': '/mock_api_host'\n            },\n            'app/objects/objects-service': {\n                'volumesEndpoint': '/mock_api_host'\n            },\n            'app/volume/volume-service': {\n                'volumeEndpoint': '/mock_api_host'\n            },\n            'app/policies/policies-service':{\n                'policiesEndpoint':'/mock_api_host'\n            },\n            'app/events/event-service':{\n                'eventEndpoint':'/mock_api_host'\n            }\n        },\n\n        paths: {\n\n            /* Note ngMock is just loaded here in intern-config! */\n            ngMock: 'na_components/dist-nwf/bower_components/angular-mocks/angular-mocks',\n            /* commenting out till we need it: dojo: 'node_modules/intern/node_modules/dojo', */\n\n            /* everything from this point down is the same as main.js */\n\n            'nwf': 'na_components/dist-nwf/js/nwf',\n            'nwfAdmin': 'na_components/ocf-admin-ui/js/admin',\n            'jquery': 'na_components/dist-nwf/bower_components/jquery/dist/jquery.min',\n            'angular': 'na_components/dist-nwf/bower_components/angular/angular.min',\n            'angularCookies': 'na_components/dist-nwf/bower_components/angular-cookies/angular-cookies.min',\n            'uiRouter': 'na_components/dist-nwf/bower_components/angular-ui-router/release/angular-ui-router.min',\n            'ngResource': 'na_components/dist-nwf/bower_components/angular-resource/angular-resource.min',\n\n            'angulari18n': 'na_components/dist-nwf/bower_components/angular-i18n/angular-locale_en',\n            'messageFormat': 'na_components/dist-nwf/bower_components/messageformat/messageformat',\n            'messageFormatEn': 'na_components/dist-nwf/bower_components/messageformat/locale/en',\n            'angularTranslate': 'na_components/dist-nwf/bower_components/angular-translate/angular-translate.min',\n            'angularTranslateLoaderStaticFiles': 'na_components/dist-nwf/bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.min',\n            'angularTranslateInterpolationMessageFormat': 'na_components/dist-nwf/bower_components/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat.min',\n            'ngFileUpload': 'na_components/dist-nwf/bower_components/ng-file-upload/angular-file-upload.min',\n\n            'uiGrid': 'na_components/dist-nwf/bower_components/angular-ui-grid/ui-grid.min',\n            'ui.bootstrap': 'na_components/dist-nwf/bower_components/angular-bootstrap/ui-bootstrap-tpls.min',\n            'text': 'bower_components/requirejs-text/text',\n\n            'nsPopover': 'app/components/nsPopover/nsPopover',\n        },\n\n        'packages': [\n            { name: 'app', location: 'app', main: 'app' },\n            { name: 'lodash', 'location': 'bower_components/lodash-amd/modern' }\n        ],\n\n        shim: {\n\n            /* Note ngMock is just loaded here in intern-config! */\n            ngMock: {\n                deps: ['angular']\n            },\n\n            'jquery': {\n                exports: 'jquery'\n            },\n\n            'angular': {\n                deps: ['jquery'],\n                exports: 'angular'\n            },\n\n            'angulari18n': {\n                deps: ['angular']\n            },\n\n            ngFileUpload: {\n                deps: ['angular']\n            },\n\n            angularTranslate: {\n                deps: [ 'angular', 'app/utils/MessageFormatWrapper' ]\n            },\n\n            angularTranslateLoaderStaticFiles: {\n                deps: [ 'angular', 'angularTranslate']\n            },\n\n            angularTranslateInterpolationMessageFormat: {\n                deps: ['angular','angularTranslate' ]\n            },\n\n            messageFormatEn: {\n                deps: ['app/utils/MessageFormatWrapper']\n            },\n\n            'angularCookies': {\n                deps: ['angular']\n            },\n\n            'ui.bootstrap': {\n                deps: ['angular']\n            },\n\n            'uiRouter': {\n                deps: ['angular']\n            },\n\n            'nsPopover': {\n                deps: ['angular']\n            },\n\n            'ngResource': {\n                deps: ['angular']\n            },\n\n            'uiGrid': {\n                deps: ['angular']\n            }\n\n        },\n\n        deps: [ 'app/utils/MessageFormatWrapper'],\n\n        map: {\n            \"*\": {\n                // For app, define aliases for the OPM Utils files here.\n                // For the unit tests, you will need to copy these to intern-config.jsFor the app, you will have to add the mappings in the main.js file\n                MathUtils: 'app/utils/MathUtils',\n                DateUtils: 'app/utils/DateUtils',\n                StringUtils: 'app/utils/StringUtils',\n                LocaleUtils: 'app/utils/LocaleUtils',\n                PolicyUtils: 'app/policies/PolicyUtils',\n                /* Note I add another one here for intern/dojo */\n                'intern/dojo': 'intern/node_modules/dojo'\n            }\n        }\n    },\n\n    useLoader: {\n        //'host-node': '../../../bower_components/r.js/dist/r',\n        'host-browser': '../../bower_components/alameda/alameda.js'\n    },\n\n    excludeInstrumentation: /bower_components|module|unit_test/\n};\n\nexport default config;\n/*\n    if(intern.args.remote){\n        config.tunnelOptions = {\n            hostname: intern.args.seleniumServer || '10.97.151.122', //the new selenium host wintel-7 64 I have running on vSphere, machine name Tools/SeleniumHost\n            port: 4444\n        };\n    }\n*/\n\n```\n. Then don't add the font from google at all please, it's not worth it. Secure environments are the new norm - people will not be able to import things from the interwebs. It makes the whole test client.html hang..\n. @csnover @dylans if there is any way I could gently bump on this - it is going to make adoption harder in my org. The html browser reporter is so nice, and just because we are adding fonts from google I have to jump through hoops. It looks sweet without the fonts, it is so subtle.\n. The sizzle of the font isn't worth this IMHO. I am preparing to showcase this, and I have to wait till this times out until I can show the sexy ui inside my protected corporate environment :-(. It absolutely does FOUT. it is white for 1 minute and then shows the ui.. Jason thank you it looks great and now will load snappily\n\nOn Mar 9, 2017, at 7:49 PM, Jason Cheatham notifications@github.com wrote:\nThe Google font will be removed, probably in the next point release, and definitely in the next major release. Visual consistency across platforms is nice, but not that important.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is in the client.html browser runner.  Require.js works fine there. Alameda does not.\nOn Jul 23, 2015, at 7:45 AM, Jason Cheatham notifications@github.com wrote:\nThe require.js npm package includes a Node-compatible AMD runtime that allows it to function in Node. The Alameda package only includes the bare loader, so it won't work as a Node loader for Intern.\n\u2014\nReply to this email directly or view it on GitHub.\n. I am just using require.js in the browser, and r.js on the server.  That works fine all round.\n. 3.0 RC3\n. \n",
    "bumbu": "I run this things locally. My machine has enough power (i7, 16Gb ram).\nI read contribution guidelines. Sorry if it is not an issue. But it always takes around one minute, and if you say that it should take few seconds then something is wrong. And it is really hard to test with such a delay. I tried to solve this thing for half of a day, but nothings seems to work. Now I downgraded back to 1.7 as the only working solution.\n. ",
    "devpaul": "Messed up rebase.  Replaced w/ PR #283 \n. @vladikoff Thanks for the animated gif.  I'll try to reproduce this on my machine.  Can you tell me what os, terminal app, and terminal type you are using?  A good way to get the terminal type is to echo $TERM.  It looks like you're using the Intern runner with only unit tests.\n. > What happens if someone tries to run in so many environments that they run out of space for reporters / have negative room\nIt prints past the bottom of the screen and scrolls the top. Things don't break, but they look less good. Mitigation could be to only print the Total or Total + active suites. I'll add a TODO to this effect.\n\nWhat happens when there are multiple environments and they have been throttled by maxConcurrency?\n\nBecause we are listening to /suite/start rather than dealing with /suite/new and all the pain it brings, they pop into existence later .\n\nWhy did using /test/new not work?\n\nsessionId didn't exist.\n. I just experienced this issue while testing A-Frame since A-Frame replaces document.body there was no parentNode during SuiteEnd.\n. Now that I've had a chance to look at it fresh, I think Intern's declaration of intern/chai!expect is actually wrong. It says it's typed as Expect, but that would suggest you could use assertions directly off expect like expect.equals(1) which doesn't make sense and isn't reflected by chai (https://github.com/chaijs/chai/blob/master/lib/chai/interface/expect.js#L8-L10)\nIt looks like if we updated to the current typings we could use ExpectStatic in the intern/chai!expected declaration.\n. Sure, intern-runner and intern-client have different capabilities. I'm looking for a way to call out to these different mechanics for each type of testing strategy needed in a project using the 'platform' property. \nIn the above configuration a test stage with platform: client would use the current intern-client mechanism and platform: webdriver would use the intern-runner mechanism. Maybe the property names should be tweaked (it's only a first pass :), but essentially I'd like to change how we instrument our runner so it is driven by configuration rather than the execution of one of intern-runner or intern-client.\nIt would give us several benefits:\n1. support n-stages of test with a single Intern configuration\n2. reduce confusion regarding which executable should be run by pulling that choice into the configuration\n3. ability to list the configured stages of test via the cli\n4. explicitly configure a stage of test with instrumentation\n5. simplify url and command line arguments\n6. later, add other test instrumentation platforms in the config (e.g. Cucumber or WD.js)\nWe currently control the mechanics of how we test using intern-runner and intern-client. Long term I envision us using a single cli with instrumentation happening through configuration rather than execution.\nThe process would look something like\n1. cli starts Intern \n2. reads configuration\n3. selects instrumentation (runner/client) \n4. runs tests using the instrumentation\nThis type of selective instrumentation will also likely set us up for a plugable instrumentation architecture by allowing the configuration to define additional 3rd party instrumentation plugins.\n@jason0x43 regarding annotating test, I'm not sure I follow. Is this similar to the platform property in identifying whether the client or runner should be used? Could you explain more what you were thinking here?\n. It sounds like we're going to hold on this until around/after Intern 4 is released. I am still in favor of engine and suite selection via configuration rather than programmatically defining what engines and suites should run. All of these are problems that were mentioned here, engine selection (runner vs client), multiple suite configuration, and test selection (i.e. has!host-*), are very common for our users that I would like to resolve.\n\nWe could have something like nodeSuites, browserSuites, and webdriverSuites\n\nWhile selecting tests that run in node, browser, or webdriver are common filters, we should aim to generalize test filtering using dojo-has so engineers can say things like 'only run this suite of tests if you're in a browser with webvr support'. This would preferably be configuration driven.\nFinally, just to play devil's advocate for following the programmatic path...\nIntern provides information about what engine it is running so technically the separate suites and functionalSuite could be unified into a single list of suites and defined using the above switch statement example or users could write an AMD plugin or use dojo/has to select tests to run based on the engine detected. I only mention it because I think it highlights the odd state I feel we are in between how we've determined what should be configuration driven and what should be programmatic.\n. We're not adding an additional layer of configuration so much as moving choices that already need to be made by the developer into the configuration. Instead of making engine selection an external process that happens on the command line we are better served moving this into the configuration.\nToday if an engineer in charge of testing wants to have multiple test lifecycles that use various engines they need to write an Intern configuration file for each one and inform other engineers on their team which configuration to use and which engine to select. There are external solutions to this issue of information sharing (i.e. use npm scripts; grunt; gulp; intern cli; command line). These  various solutions do nothing to reduce complexity on the whole; they only help compartmentalize it.\nInstead we should move these choices into a configuration file that can be used as a single source of information.\nstages: {\n        unit: {\n            suites: [ 'tests/unit/all' ],\n            engine: 'client'\n        },\n        // functional tests of individual components\n        functional: {\n            suites: [ 'tests/functional/all' ],\n            engine: 'webdriver'\n        },\n        default: {\n                suites: [ 'tests/unit/all', 'tests/functional/all' ]\n                engine: 'webdriver'\n        }\n}\nThe above configuration moves engine and suite selection into a single configuration file, which could in turn be queried by the cli; e.g. intern list would return unit, functional, default which would be run using intern unit or intern functional or just intern to run the default stage. This may add some complexity to the configuration, but it removes the need for all of the engineers on a team to have a deep understanding of Intern's engines. They no longer need to look at Intern's configuration files to understand what suites are being run and they don't need to know when suites and functionalSuites are ran in conjunction to a particular engine.\nIntern is a very capable and complete testing framework. If we are going to have complexity, my preference is to keep it in a single location and use the cli to simplify usage for the overall team. We are not well served by keeping Intern simple if it makes it harder to use for everyone else.\n. > I think this is the key point where I disagree with this proposal. I feel like this type of opinionated configuration should be handled with external solutions\n\nwe've gotten requests a library version of Intern to allow for even more flexibility\nCore Intern should focus on providing a simple, clear, and reasonably unambiguous API for running and managing tests.\n\nI think we should discuss how we envision fixing usability issues with Intern. From what you said above it sounds like if we had to do it all over again that Intern would only have a programmatic API and we would produce external tools like intern-cli to handle configuration and execution.\nWe should use our review time on the roadmap to discuss where Intern 4 and 5 should take us. If we are to reseat this feature request in intern-cli it wouldn't change the feature or the changes we'd need to make to Intern to support it. And if we plan on offering an programmatic API we'll still need to do the same work we discussed above to move engine selection internal to Intern as part of the APIs.\nAnd if in some parallel universe Intern did only have a programmatic API and relied on external tools like intern-cli and (a separate) grunt-intern and (another) intern-browser-runner (browser tests) for executing that API those tools would still be relatively tightly coupled by their configuration since their use would need to be interchangeable. So if we were to move this feature to intern-cli and add a super-set of configuration, I would assume we would have to add it to Intern's grunt task as well as the browser runner.\nLong story short, we need to revisit our vision for Intern before we come back around to this. I am OK moving this feature as long as it produces a cohesive ecosystem, but I don't think it is possible to move this feature out of Intern's core without also externalizing Intern's configuration.\n. > One of the main benefits of separating the UI from the core is that experimentation with new UI concepts becomes both easier and less risky\nThis ticket started with adding to Intern's configuration to address a common use case and well-defined scenario and the level of effort has increased to creating an external UI. Creating an external UI with the same features of Intern means adding the configuration then building a cli, a grunt task, and a browser runner that can transform the new configuration into one Intern understands and then maintaining it separately as Intern is updated. This is an unrealistically high bar to set for any feature.\n. That's great! Can we merge this functionality into Intern or are there plans to deprecate intern-runner and intern-client?\n. Closing this. Talked w/ Jason and it sounds like moving forward we'll be following more a Grunt approach w/ a separate cli and application and we'll update documentation to better reflect this.\nWhile we are not going to remove intern-runner and intern-client anytime soon, we may want to consider adding a deprecation notice to them when users run them directly and point them to intern-cli.\n. @jason0x43 suggested we could remove much of the need for has by creating suite configurations based on the engine in #669.\nIntern could use some improvement in selectively running tests. For instance, if you want to conditionally register functional tests based on browser support, e.g. the test machine supports 4k resolution, there is no way to do this and skip() only works at the test level. Maybe we could support skip() in before() so the rest of the suite is skipped and the tests are still reported as part of the run?\nAlso, I'm all for splitting out Intern into separate packages as long as we still bring it all together under a single intern package. What are your thoughts on this?\nIf the loader is externalized then how will Intern load suites provided to it in it's configuration? To keep it like it is, I assume we'll need a way to dynamically load modules, either by creating a wrapper around popular loaders (dojo-loader, SystemJS, WebPack, etc...) or we'd need to only use Intern programmatically and do away with the configuration-driven approach. \n. Right now, from an 1000ft view, I'm looking at keeping the executors, interfaces, and reporters in the intern-core package. This should essentially give enough functionality to run tests programmatically and cut as much other stuff as possible. This includes the command-line utilities, grunt task, and likely things that do configuration parsing.\nI'm also looking at separating out the current intern/main module into an ExecutionContext module that is accessible to tests, suites, and reporters via the suite.parent chain. The singleton nature of the intern/main module was fine when the executors were driven by a binary, but to allow for programmatic use of the executors we'll want to allow for separate invocations of a context. Once decoupled and no longer a singleton, we could feasibly allow for client and runner tests to run simultaneously (or potentially test against multiple versions of node concurrently via docker or perhaps using the cloud with a DockerExecutor or SSHExecutor).\nThe last thing I have to fit into this approach is the browser tests that run though the Intern server (proxy), and for that matter how and where the server fits into the core. On one hand, I feel like this is a tool that is outside the fundamentals of intern-core, but on the other it's a requirement for the browser test feature. It would probably be more tidy as a separate package providing intern server support, but I expect moving it to a separate package would be a disservice to our users as it would be a dependency for a large number of use cases and in turn add complexity.\nEssentially these changes will allow us to instantiate an ExecutionContext create an Executor and pass the ExecutionContext, and allow suites to be registered to the executor. The last piece that I'm considering is registering the suites/tests provided to the interfaces in a global/singleton factory. Executors would then be able to instantiate the suite of tests from the factory. This should allow us to keep the same pattern for registering suites without limiting us to one executor. We'd still be limited to only one collection of suites. If that's problematic we could solve it by providing a test interface class that could be instantiated and used to collect tests. Unless this proves to be useful somehow for browser tests, I think it's fine if we just have one list of suites and tests and filter out ones we don't want added to a specific execution context.\nWith these changes we should be able to use intern programmatically\n```js\nimport Client from 'intern/executors/Client';\nimport Runner from 'intern/executors/Runner';\nimport registerSuite from 'intern/interfaces/object';\nimport suiteManager from 'intern/suiteManager'\nimport ConsoleReporter from 'intern/reporters/Console';\nimport RunnerReporter from 'intern/reporters/Runner';\nimport assert from 'chai/assert'\nconst clientExecutor = new Client();\nclientExecutor.executionContext.addReporter(new ConsoleReporter());\nconst runnerExecutor = new Runner();\nrunnerExecutor.executionContext.addReporter(new RunnerReporter());\nregisterSuite({\n    name: 'unit'\n    test() {\n        assert.isTrue(true);\n    }\n});\nsuiteManager.generate(... clientExecutor.suites, ... runnerExecutor.suites);\nPromise.all([clientExecutor.start(), runnerExecutor.start()])\n```. It's probably worth noting that this ticket stemmed from #685. I've pushed some work to the programmatic-intern branch. There's a lot of things in the works.\nWe want to complete the following:\n\nMigrate intern to use CommonJS and remove calls to dojo/node!\nAdd functionality to the Proxy to serve a client.html for browser tests\nUpdate client.html to act as a template and serve it w/ a global intern for the browser and an injected preamble\nCreate a global intern script. The global intern injected into client.html for browser tests should function like Electron and provide an RPC interface for communicating between browser and node. The global intern will need to be compiled separate from the rest of Intern. This will require a \"global\" module format in tsconfig, and the rest of Intern will use UMD.\nCreate preambles for dojo 1, dojo 2, Webpack, and SystemJS (optional, but we should do this)\nWrite tests for running in tests in node, webdriver, and the browser. Test supported preambles as well.\nConsider implementing various executors in line with the supported engines, Node (Client), WebDriver (Runner), and Browser (Currently Client, when started via CLI it also runs Proxy).\nUpdate current tests\nFix builds, build scripts, and configurations. Remove unneeded dependencies from package.json.\n\nSo far I've succeeded in two things. Making this plan, and making an utter mess of everything. The ts-conversion is still in progress as of this writing. I am sure changes will need to be merged in.\n. Spoke w/ @bryanforbes about serving up a global intern. We're considering using webpack to compile out a global w/o a loader.. I have made some progress on running typedoc and solving some of its issues in grunt-dojo2-extras with grunt and programmatic implementations available. Hopefully it'll be helpful. If we could leverage a single code base hopefully we can avoid needing to replicate work.. ## Intern Reference\nLifecycle\n\nPre-Executor\nDetermines the environment (Browser/Node/WebDriver)\nEnvironment specific steps (maybe starts selenium stuff in the case of WebDriver? Needs more info)\nResolve config\nPreload scripts\nBefore run\nEmits beforeRun\nReporters are loaded\nLoad suites\nLoader is loaded\nSuites are loaded\nRun\nEmits runStart\nRuns tests\nEmits error (if an error occurred)\nEmits runEnd\nAfter run\nNoop afterRun call\nEmits afterRun\n\nIntern Facts\n\nBrowser environments are browserified to avoid initially needing a loader\nBrowser environment\u2019s use script injection as a default loader\nNode environments use Node\u2019s require\nPreload scripts are loaded using the default loader (script injection/require)\nEvent handlers can return a Promise to handle async responses\n\nUse Cases\n\nAs a user, I want to pause execution during preload scripts so I can communicate w/ a server/initialize a system/perform an async process. How can I perform this action? (answer: prerun event handler can return a promise)\nAs a user, I want to extend Intern\u2019s functionality. For example, if I wanted to add a plugin that added support for Cucumber, or added additional commands to LeadFoot for testing Electron or Mobile, or added convenience methods to this on every test. Can we add a plugin configuration to add these scripts?\nAs a user, I want to run a complex preload script that may require a loader to load external libraries to perform tasks like communicate with a server via an API and procure a test environment or startup and initialize a database in a Docker container. What is the recommended way to load modules in a preload script?\nAs a user, I want to write a custom reporter. It seems like to do this in the browser, I need to do this sans loader and adds a browserify requirement or forces users to write everything in a single file. This sounds like a difficult user experience.\n\nTake Aways\nWe need a plugin pattern\nWe need an easy/standard way to extend the functionality of Intern. I would prefer to have an explicit plugins configuration to explicitly load plugins during a plugin phase.\nAs part of this pattern, it would be nice to also be able to explicitly state in what environments the plugin is loaded (Browser/Node/WebDriver) and if the default loader should be used (Node/script injection) or if the plugin requires/expects to use the configured loader.\nWriting a custom reporter for the browser is hard\nSince reporters are loaded before a loader is available it adds complexity to the user experience by requiring the user to write a Reporter that works with script injection. It makes using external libraries that require a loader more difficult to use. I think since reporters and plugins are fundamentally identical we could use the same pattern for reporters as we would for plugins. Allow reporters to be loaded via default loaders or post loader.\nAsync preload scripts\nIt looks like if I wanted to execute an async preload script, I could listen for beforeRun and return a task in my event handler. That feels a little complex. If we moved to a plugin architecture it seems like we could make this experience better.\nMultiple test types will pollute the root\nI like intern.json and I see that the intern cli can load alternative configurations. If a user wants to have separate tests for integration, functional, unit, system, benchmark, visual regression, etc\u2026 they need multiple intern-.json files. In Intern 3, the work-around was to add code to intern.js to select the correct set of suite based on command-line parameters or produce multiple tests/intern-.js files.\nConfigs are an issue\nI think we should revisit https://github.com/theintern/intern/issues/669 and find solutions that simplify the configuration and address the issues we discussed.\nI\u2019d like to know how users will\n\nExtend configurations\nInclude various sets of tests based on environment\nList available tests (visual regression, unit, functional, performance, integration, system, etc\u2026) with the cli\nWrite tests against multiple loaders (e.g. node & @dojo/loader)\n\nIt seems like bin/intern is a temporary solution and we can address these in theintern/intern-cli.\nConclusion\nOverall Intern 4 marks a massive improvement over Intern 3. Simply removing AMD as a dependency and supporting arbitrary loading mechanisms via a standard loader interface will make Intern more flexible for those responsible for configuring their testing framework and more familiar for those who need to use it. In a day, I haven't had a chance to do a deep code review, but from what I've seen the architecture is very good and the problems left to solve have more to do with streamlining the user experience (i.e. plugins, configuration, documentation, make it easier to load things) than making major changes. Well done!. ## Plugins\nMy thought behind plugins is we should formalize common patterns and encourage good usage of those patterns.  I anticipate there will be two types of plug-in usage\n\nad-hoc extension of Intern within a project or organization where the loader will be known to the plugin writer (similar to how we write Grunt tasks or npm scripts to augment our projects)\nredistributable intern extensions that provide additional functionality; e.g. intern-visual, intern-a11y, additional loaders, cucumber plugin, custom reporters, etc...\n\nIf you're concerned about plugins having access to a loader, don't be -- it's already too late :joy:! We can't stop someone from writing a preload script that waits for the loader and then loads the rest of the plugin using a loader, or worse, loading a loader in the preload scripts, or using the loader.script configuration to load a loader that then loads their stuff. We're better off defining proper patterns before users come up with creative solutions.\nFor the first use case we should make it easy to augment Intern locally and for the second we should create a document on writing plugins, provide a recommendation for a bundler (i.e. webpack/browserify), and provide a plugin boilerplate to get people started.\nAs far as what it would look like, plugins could replace the preload scripts in the config and could be initialized as part of the intern lifecycle.\n```typescript\n// synchronous code can run here\nintern.registerPlugin({\n    name: string;\n    description: string;\n    metadata: any;\ninit(intern: Executor): Task<any> | void {\n    // called immediately after preload phase\n}\n\nload(intern: Executor, loader: Loader): Task<any> {\n    // called after the loader has been loaded\n}\n\n});\n```\n\nThe name and description can be announced by intern when a plugin is loaded and used by a reporter.\nthe init() method makes it easy for a plugin writer to write an asynchronous action like load a database, call an API, start a server, procure a resource, etc.... This is where redistributable plugins would run\nthis load() method makes it easy for users to augment intern inside their project without creating a separate plugin bundle.\nplugins can attach to the intern event system during init() or load()\n\nI think this addresses the first three take aways listed above. It provides a formalized plugin architecture and further documentation and boilerplate would provide good patterns for writing redistributable reporters and plugins. It provides an easy way for users to augment intern inside of their project. It makes for an easy way to do async preload scripts with init().\nI have some ideas for the configuration section. I'll post them later when I have some more time :).. > Are there any particular augmentations that are currently hard (or impossible) to implement that should be easier, or is it just that the APIs for doing so should be more centralized?\nRight now, someone needs to have pretty deep knowledge of the event system and intern lifecycle if they want to load an async preload task or wait for the loader to be registered (listening on the beforeRun and runStart events, respectively). \nAdding a registerPlugin() method would make it obvious where to add plugins. It would also be nice to have a name and a description that we could announce when plugins are registered.\n\nThis looks reasonable, although I would go with something like start rather than load to prevent explicit dependencies on a loader\n\nThis works for me. The intention is that it'll run before tests start and after intern is fully initialized.\n\nredistributable plugins should not be able to mandate a particular loader and/or loader config because this could become a pain point for end users.\n\nAgreed. What I was saying is we can only encourage good practices and should do so by supplying documentation, boilerplate, and support to plugin writers. We should also support ad-hoc plugins that allow a user to augment the system without requiring a bundler step. I wouldn't want us to remove AMD as a requirement only to make bundling another pain point.. I love this. It goes a long way to normalize using external code. I have some questions.\nCan we leverage this same pattern for preload scripts?\nIf script is present on the configuration, will it always load using the default loader (i.e. node/script injection)?\nHow can users run an async preload script or plugin? I'm trying to imagine what the recommended pattern will be in the documentation. Is there a intern.async(): Done method that will pause execution at the next lifecycle event similar to how tests in Intern 3 has a tests.async()? That would make it simple to pause things anywhere.\nAssuming a user wants to write an ad-hoc plugin that uses their loader, it would look something like:\ntypescript\nconst task = intern.loadScript('path/to/module.js');\nintern.once('beforeRun', () => task);\nmaybe we can just replace the need to write this code by adding a useLoader parameter in the config?\nplugins: [\n    { name: 'myenvironment', script: 'support/intern/env', useLoader: true, options: { } },\n    { name: 'vr-reporter, script: 'vrreporter' }\n]. Lol. Me too. Let find a day to meet and talk. We've made a lot of good progress. I think we're having trouble resolving what plugins should be is because we have a number of use cases that we're using to identify functionality that may require multiple solutions beyond just plugins. Here are the use cases and patterns we need to address\nAsync tasks\nAs a plugin writer, I want to write a plugin that performs an asynchronous operation before intern continues on to the next operation; e.g. initialize a docker container then reset its database\nThe current solution requires adding an event handler to the next lifecycle event. It is clunky because it requires the plugin writer to know the next event.\nIn-order plugins and coordinating between tasks\nAs a plugin consumer, I want to use a plugin that will initialize a docker container for testing and use a second plugin to reset the container service's database to a known state before testing begins.\nThis type of coordination isn't feasible right now because plugins (preload scripts) are loaded one after another and even if they register event handlers that return promises, all of the event handlers are called one after another making it difficult to run one task to completion before running another.\nIt seems like this could be resolved simply with \njavascript\nintern.registerPlugin(string: name, (options: any) => Task<void> | void): void;\nRegistered plugins would be executed in-order and one-at-a-time.\nPlugin Options\nAs a plugin consumer, I want to use a plugin that will initialize a remote system and I need to supply a url to the plugin.\nAre plugins and tasks the same thing? Maybe we should separate the two concepts so plugins behave like preload scripts and tasks are things that plugins may register with intern and are ran in-order as described above? That would mean that plugins would register named tasks which could be ran later through configuration?\nIf this were the case then:\n\nplugins would be code that augments intern by adding additional functionality\ntasks are registered by plugin, which may be called through configuration after plugins are registered\n\nAd-hoc project code\nAs a project lead, I want to write a custom code that initializes my project or testing environment. The plugin is complex enough that I need to use a module loader or load external packages (e.g. lodash).\nWe could leverage plugins to do this, but the more we talk about it and the goals of plugins the more I think it's a distinct use case and could be addressed with a separate config parameter\n{\n    setup: [\n        'path/to/module.js'\n    ]\n}\nSetup scripts would always be loaded with the registered loader and be ran before suites are loaded. It would be nice to also provide options to the module, but I don't have a generic way to do this other than placing them on the config.\nPlugins making code available during tests\nAs a plugin writer, I want to add functionality that can be accessed from various points in intern's lifecycle. For example I want to create code that resets the database to a known state that may run as a plugin or may be called in the before block of a test suite.\nThe current rules require that plugins are bundled, which would make it difficult to reuse code outside of when the system calls the plugin.\nThis feels like another use case for the task pattern where a plugin registers one or more tasks that are executed automatically or can be made available later.\nProposed lifecycle\nDepending on the outcome of the above use cases, a proposed lifecycle may look something like:\n\nresolve config\nload plugins\nload loader\nload user setup scripts\nload suites\nrun before tasks\nbeforeRun\nrun\nafterRun\nrun after tasks\n\nProposed Configuration\nDepending on the outcome of the above use cases, a proposed config may look something like:\njavascript\n{\n    plugins: [\n        'intern-docker',\n        'intern-mysql',\n        'intern-visual',\n    ],\n    setup: [\n        './support/custommodule.js'\n    ],\n    tasks: [\n        { name: 'docker', options: { action: 'run', file: './Dockerfile', ports: [3066, 3066] } },\n        { name: 'mysql-reset', options: { url: 'localhost', sql: './support/test.sql' } }\n    ]\n}\nLooking at this config, one question I have is how would a user include a plugin so it can be found and included under a browser host or a node host? If I'm running intern in the browser then would I need to provide an absolute location or are we now assuming that all browser runs require the intern server and intern server will resolve them?. ## Async tasks\n\nUnless we make a special plugin API with methods named \"first\", \"second\", etc., the user is going to have to have some background knowledge about when various events happen.\n\nI think we can improve upon this user experience. We should be able to register a list of tasks in the configuration that happen in order. The case where a task is attached to an event handler and happens asynchronously should be the exception.\nAd-hoc project code\nI've been thinking about this one, and if we allow options to be passed to a task or plugin then we can write a task to address this: \ntasks: [\n    { action: 'loadModule', options: { src: 'support/customModule.js' } },\n    { action: 'loadModule', options: { src: 'support/otherModule.js' } }\n]\nPlugins/Tasks can be adopted into Intern as they become standard.\nTasks, Plugins, & Scripts\nFrom a user experience standpoint we want to have simple stories to tell about how a user can load a plugin, write their own before and after script using their loader, and run things from a plugin.\nIf I load a cucumber plugin, I would expect the plugin may augment Intern in some way, but I would also expect that it would provide some set of utility methods available to me during tests. As a plugin maker I have several options.\n\nI can require the user to load it as a module, but that means I need to package my plugin as a bundle and my modules need to be compatible with a loader\nI can create a global variable (i.e. cucumber) and attach methods there. Then I wouldn't need to worry about a loader.\n\nHonestly, the second option is the easiest to implement. It doesn't require a loader and if the global variable exists then I'm guaranteed that my plugin has been loaded. Otherwise, it's entirely possible for a user to use a plugin's module without the plugin having been loaded. The work-around for identifying if a plug-in has been loaded would likely follow the second pattern: create a global isCucumberPluginLoaded. \nTo avoid these issues, we should create a third option and find a place to house plug-in loaded functionality. I think allowing users to run registered tasks, or something similar in pattern is the answer.\nConfiguration\nI'm having difficulty resolving how this configuration will be used...\n{\n    plugins: [\n        {\n            script: 'node_modules/intern-docker/index.js',\n            options: {\n                action: 'run', file: './Dockerfile', ports: [3066, 3066]\n            },\n        },\n        {\n            script: 'node_modules/intern-mysql/index.js',\n            options: { url: 'localhost', sql: './support/test.sql' }\n        }\n        {\n            script: 'node_modules/intern-visual/index.js',\n            options: {\n                ...\n            }\n        },\n        './support/custommodule.js'\n    ]\n}\nQuestions:\n\nHow do options get passed to the plugin? If the plugin is loaded as a script.. how are we injecting options?\nDo I have to run a plugin twice if I need to run it with two different sets of options? I.e. if I need to start two docker containers would I have two intern-docker scripts in my configuration?\nIf a plugin is a script and I try to run a plugin twice with different options in node, won't it fail to run the second set of options because node has already cached the first instance of the module load?\n\nI don't see how we can resolve these issues with plugins alone. I think separate task and plugin sections do work.\njavascript\n{\n    plugins: [\n        'node_modules/intern-docker/plugin.js',\n        'node_modules/intern-mysql/plugin.js',\n        'node_modules/intern-visual/plugin.js',\n        'support/custommodule.js'\n    ],\n    tasks: [\n        { task: 'docker-run', options: { image: 'database', ports: [3066, 3066] } },\n        { task: 'mysql-init', options: { url: 'localhost:3066', sql: 'support/reset.sql' } },\n        { task: 'docker-run', options: { image: 'backend', ports: [80, 8888] } },\n        { task: 'custom-module' }\n    ]\n}\nDuring the lifecycle plugins would be loaded as script tags and be executed immediately where they could register tasks that are executed later after intern has been initialized. Passing option data to tasks or calling them multiple times is simple because they're already registered functions. If a plugin was not loaded then it will not register its tasks and we can throw an error. We can also make tasks available through intern; i.e. intern.runTask('mysql-init', options): Promise<any> that could be used during a test. Another example could be to get Cucumber's World object in a test intern.runTask('cucumber-get-world'): Promise<World>.. I haven't wanted to derail our discussion on plugins and solving associated take-aways, but I wanted to provide a potential solution for the configuration take-away before I ran out of time.\nTake aways\nAs a refresher, one of the take-aways we found was that configuration is hard. We wanted to have solutions for\n\navoiding the need for multiple intern-*.json files that pollute the root filesystem\nextend configurations\ninclude sets of tests based on the engine or environment selected\nlist available tests with the cli\nwrite tests against multiple loaders\nmake it clear what is being configured\n\nAdvanced Configuration\nOne of the issues I (and many others) have had with Intern was how the bag of options supplied in a configuration file related to what I was doing. To solve this we should consider narrowing the bag of options into separate categories related to the engine and environment selected.\njavascript\n{\n    \"root\": {\n        \"suites\": [ \"tests/unit/all\" ]\n    },\n    \"browserstack\": {\n        \"environments\": [\n            { \"browser\": \"internet explorer\", \"version\": [ \"10\", \"11\" ] }\n        ],\n        \"tunnel\": \"browserstack\"\n    },\n    \"unit\": {\n        \"engine\": \"node\",\n        \"extends\": \"root\"\n    },\n    \"browser\": {\n        \"engine\": \"browser\",\n        \"loader\": \"dojo\",\n        \"extends\": \"root\"\n    },\n    \"functional\": {\n        \"engine\": \"webdriver\",\n        \"suites\": [ \"tests/functional/all\" ]\n    },\n    \"combined\": {\n        \"runs\": [ \"unit\", \"browser\", \"functional\" ]\n    },\n    \"ci\": {\n        \"runs\": [ \"unit\", [ \"browserstack\", \"unit\" ], [ \"browserstack\", \"functional\" ] ]\n    }\n}\nThe most significant change to the configuration would be the elimination of functionalSuites and the narrowing of configuration to focus on a single test run. In the example above, test configurations with a webdriver engine are run using selenium; those with a node engine are run using node; and those with a browser engine can be run as unit tests using webdriver (they'll be run the same way suites are run by the webdriver today) or they can be run directly in the browser.\nThe other major change is the \"runs\" property. This indicates that tests are run one after another and their test coverage is combined into a single report. So in the \"combined\" configuation, unit tests would run in node, followed by unit tests being run in webdriver, followed by functional tests being run by webdriver. For the \"ci\" example, it would run \"unit\", then run a mixin of the browserstack and unit configuration, followed by a mixin of the browserstack and functional configuration.\nRegarding the cli, it would be easy to list configurations that specify an engine or add a flag to configs that should not be listed by the cli.\nRunning a configuration in the browser (assuming the intern server is running) would look something like\nhttp://localhost/__intern?suite=browser\nintern would assume the configuration file would be at ./intern.json, but if we wanted to specify the config file\nhttp://localhost/__intern?suite=browser&config=intern.json\nor if there's only one configuration with a browser engine specified then we could automatically run it\nhttp://localhost/__intern\nIf there's multiple configuration with a browser engine then intern could list tests the user could run\nConclusion\nMy main goals are to simplify the configuration by moving away from the current bag of options that we have today. I think how Intern 3 forks loader options and configuration for node and browser is (using nice language) not a good pattern. I am glad to see that we are not continuing with that pattern in Intern 4's configuration. We should continue to define the specific ways in which Intern runs tests by eliminating functionalSuites and nodeSuites and rely on explicit configuration of each test run scenario.\n. You're right. Most of my configuration comments likely belong with intern-cli. \nI think the part I'm trying to resolve is that tests are executed in two environments: node and browser and four different modes:\n\nbrowser unit tests\nnode unit tests\nwebdriver functional tests\nwebdriver driven unit tests\n\nThese relate 1:1 to the executors except for the WebDriver executor, which does both unit and functional tests.\nSo I don't have a clear picture of the user experience for the WebDriver case due to it's dual modes of operation. Some of the questions I have are:\n\nWhat does the loader definition mean to the web driver? Does it refer to the loader used in the node.js environment or the loader used in the browser environment?\nWhat do plugins mean to the web driver executor? Are they only ran in the node context or are they passed to the browser during unit tests?\nHow do I run plugins in the browser before unit tests?\nIs there a way to limit the context in which a plugin is ran? i.e. a plugin was written that I only want to run in node. Do I have to rely on that plugin to be aware that it should only run in node?\n\nFrom the intern-examples it looks like if somebody isn't using a loader that works in both node and browser (i.e. dojo) that they'll need to write a custom loader.js file. For the plugins it seems like the same config is passed to the browser intern, so it will be run in both contexts -- in node and in the browser.\nFrom an Intern perspective, I'm concerned about how configuration relates to this dual mode system found in the WebDriver executor. I think we must avoid conflating node and browser runs. From a user experience perspective I would like to define 3 modes of operation: [unit] tests that run in node, functional tests that run in node driven by webdriver, and unit tests that run in the browser but can be driven by webdriver.\nThat last definition of unit tests that run in the browser, makes it much more clear from a user experience perspective that the loader and plugins defined in that block of code will be run in the browser and it simplifies it as that browser run unit test experience. \nIn order to address these issues I think we need to\n\neliminate the dual-mode role of WebDriver so configuration like 'plugins' and 'loader' only apply to a single host (node/browser).\nbe able to configure loaders (and plugins) without the need to write additional loader.js files to handle node/browser situations.\neliminate the branching/complexity of functionalSuites, browserSuites, and nodeSuites by only having a single suites configuration option\n\nIf it helps, I can write up some use cases so we can be sure we're serving common patterns (or at least have plausible stories). Going back to plugins...\n\nI can see when this might be useful, for consistency in test writing between Node and browsers. That could be extended to a general purpose export system for plugins, like (assume this is a built plugin)\n\nI like having a way of registering additional functionality that can later be called in tests. I still favor having a list of tasks that can be called via configuration. In my view:\nPlugins are responsible for initialization. They would register reporters, register loaders, attach event listeners, and register tasks. There would be no intern#registerPlugin() method.\nTasks provide functionality that execute code and potentially register callbacks (e.g. afterRun handlers for cleanup). They would be called via configuration before tests run or explicitly during tests.\nThis delineation makes it easy to explain what a plugin is used for (registration) and what tasks and event handlers do (execute code).. > The loader only comes into play for unit tests. WebDriver tests are fundamentally different from unit tests --- they don't load or run application code, and so have no need to use the application's loader.\nDoes this mean that there's no upgrade path for users with Intern 3? It sounds like we're forcing functional tests to be written with the node loader or bundle them, while Intern 3 tests were typically written as AMD modules.\n\nCurrently, plugins (well, preload scripts) will be loaded in all environments all the time, and it's up to the plugin to determine, based on the environment, whether it wants to do anything.\n\nIf I write a plugin that works in both node and the browser. As a user (or a plugin writer) how can I ensure that the plugin only runs once when using the webdriver either before unit tests or before webdriver starts?\n\nHmmm...I'm still not sure what a \"task\" is\n\nWhen you think of a task, think of grunt. Grunt has a registration phase where you register capabilities and an execution phase where you instruct grunt what tasks to run. Plugins should register capabilities and tasks are one of the ways to execute them.\n99% of what a vim, SystemJS, Chrome, or Atom plugin does is attach listeners or add capabilities that can later be called (via button press or action). Even with an atom plugin that changes the behavior, look, and feel of the editor I assume it does this as part of the render callback and not immediately on the load of the plugin. We should follow this pattern. Plugins register functionality and tasks, event handlers, and intern execute it as part of its flow.\nI'll look into creating more user stories to help cover these use cases.. Ah, ok. I think we're basically saying the same thing. \n\nA plugin is a preload script that registers reporters, tasks, loaders, and callbacks\nA plugin can register any number of tasks, reporters, loaders, or event handlers\nA task is a function registered with a string name i.e. (options: any) => Task<any> | void\n\nSo in your example of registering a plugin it looks basically like what I'm calling a task, but I've associated the preload script with a plugin. It's also not clear from the example how it is called later or how options are passed to it.\n. Here's some more use cases to capture some of the scenarios we've been talking about. These are in addition to the previous set of use cases.\nUse Cases\nUpgrading from Intern 3\nAs a user, I want to be able to upgrade directly from Intern 3 to Intern 4 with a minimal amount of effort. I would prefer only needing to write a new config.json and include a plugin.\nExecuting Tasks multiple times\nAs a user, I may want to install a plugin that provides functionality that can be executed multiple times and can be passed different options. For instance, I want to register a docker plugin and a mysql plugin to assist with testing. The docker plugin needs to start a database container, the mysql plugin will initialize the database, followed by the docker plugin starting the server container linking it to the database.\nI tried to come up with a real-life example, but essentially the challenge is running a task twice with different options with a task that runs in the middle of the two. I imagine the configuration may look something like this:\nplugins: [\n        'node_modules/intern-docker/plugin.js',\n        'node_modules/intern-mysql/plugin.js'\n    ],\n    tasks: [\n        { task: 'docker-run', options: { image: 'database', ports: [3066, 3066] } },\n        { task: 'mysql-init', options: { url: 'localhost:3066', sql: 'support/reset.sql' } },\n        { task: 'docker-run', options: { image: 'backend', ports: [80, 8888] } },\n    ]\nSeparate Node and Host Loaders\nAs a user, I want to be able to use AMD as my module loader in node (because I have a number of tests written for Intern 3), but now want to use a SystemJS loader in unit tests in the browser. I want to be able to define this in the config without needing to write a custom loader.js file.\nMore Stuff\nLeadFoot and DigDug\nI've been thinking about these two packages and wondering what makes them different from a plugin. Is there something that LeadFoot or DigDug do that we cannot reasonably do as a plugin? Are plugins missing functionality as a result?\nLifecycle\nWhat does the current, proposed WebDriver lifecycle look like? Given things we've discussed, we want to run a node lifecycle + a browser lifecycle for unit tests with each being able to configure loaders and plugins.\nThis is what I've been putting together in my head from our discussions:\n\nresolve config\nload plugins\nload loader\nload functional suites\nload unit test suites\nstart RemoteExecutor\npass config to browser intern\nload plugins\nload loader\nload suites\n\n\nbeforeRun (emits a 'beforeRun' event)\nbeforeRun for browser (remote executor/unit)\nbeforeRun for node (functional)\n\n\nrun\nrun for browser (remote executor/unit)\nrun for node (functional)\n\n\nafterRun (emits an 'afterRun' event)\nbeforeRun for browser (remote executor/unit)\nrun for node (functional)\n\n\nrepeat (from step 4) for each remote environment\n\nIs this essentially correct?\nWhat I'd like to see is a user able to define a remote test session that can be shared between different test runs so we can reduce the complexity of this lifecycle to two separate lifecycle one for browser with its own set of plugins and one for node (functional) with its set of plugins. We'd be able to flatten lifecycles by using two runs\nBrowser test w/ WebDriver\n\nresolve config\nload unit test suites in browser\nstart RemoteExecutor\npass config to browser intern\nload plugins\nload loader\nload suites\nbefore run\nrun\nafter run\n\n\nrepeat for each remote environment\n\n(node loader or node plugin configurations are unnecessary. This lifecycle is similar to running unit tests in the browser)\nFunctional test w/ WebDriver\n\nresolve config\nload plugins\nload loader\nload suites\nbefore run\nrun\nafter run\nrepeat (from step 4) for each remote environment\n\n(browser loader or browser plugin configuration are unnecessary because the browser is only used for functional tests)\nSeparating the lifecycles allow for distinct configurations to be passed for browser, node, and functional tests.. Thanks.  else shouldn't be cuddled with the } according to https://github.com/SitePen/.jshintrc#style.\n. I must have missed that in the merge.  I'll make sure it gets updated.\n. I agree. I would look much better without the alignment.\n. holding down the spacebar until I made it to my IDE's line-length indicator was probably too lazy :)\n. I agree that the hella long progress bars are ugly. Stretching the progress bar would run into some corner-cases that should be considered in context. For instance, the first-time Intern user writing one test and getting a progress bar with 20 checkmarks is weird. Configuration coming in 3.0 could alleviate some of the aesthetic concerns allowing someone to set a maximum bar width. While we're talking about look and feel, I'm not a fan of displaying all the pass messages while the tests run. I'm much more concerned with failures, deprecated warnings, errors, and (maybe) skips. And what about in-line coverage? Let me think about a few adjustments that could be made now and features that could come with configuration when 3.0 drops.\n. This will change the simplicity of progress bar rendering a little. I'll change the Result compressor function to not return the last result if it is partial and render the spinner before padding.\n. Sure. I should probably fit the OS into the title since the self-test shows several ambiguous \"Fx ##\" lines without it.\n. Ok I'll add that to '/runner/start'\n. How important is a full stack trace while the tests are running? Too much information could scroll the test failure information off the screen. If I'm watching tests run and plan on being productive I mostly care about tests that produce errors first, then the line that caused the error, and the error name followed by the message. Everything else is mostly noise.\n. As far as escape codes, we could always just reproduce what charm does in creating the ASCII code. charm/lib/encode is available for encoding and the rest is mostly string concatenation and color value lookup. It's probably too late, but Blessed offers this https://github.com/chjj/blessed#lower-level-usage. We could also go crazy and capture the output on a separate stream and less hacky than overriding write.\nBTW, not a huge deal, but if we include ASCII codes as part of logs and concatenate long lines our calculation will be off due the the unseen ASCII codes contributing to the calculated length of the line.\n. No problem\n. Ok. I'll sort by pass < deprecated < skip < errors < fail\n. The docs claim it should be a number if it exists http://nodejs.org/api/tty.html#tty_ws_columns\nIf it doesn't exist then we make sure it is a number. Correct me if I am wrong, but testing for notIsNan would be a system test rather than a unit test because it would be testing nodejs.\n. I'll double-check my tests. I typically only use equal when I have complete control over the values within the scope of the test.\n. I'll refactor them.\n. How about maxWidth? getCompressedResults can return an array less than max.\n. I see that now. substring and slice are part of the standard. substr is not.\n. I can see where that's a bit confusing for a loaderless architecture. What's the terminology we're using for the \"loader\" scripts?. Loader scripts is good. I'm at a bit of a disadvantage in how to explain it because I'm familiar w/ the architecture. I think we'll be OK as long as we're consistent and take the time to highlight what a loader script does.. ",
    "rightaway": "Seems it still doesn't work, were you able to figure this out @BrainCrumbz?\n. I don't need instrumentation, but it doesn't seem to work with generators. I run it as iojs --harmony_arrow_functions ./node_modules/.bin/intern-client --config=intern.js and the output is\nPASS: main - unit - test (0ms)\n0/1 tests failed\n0/1 tests failed\nIt passes but it should fail.\n```\n'use strict';\nfunction *delay() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve('value'), 1000);\n  });\n}\ndefine((require) => {\n  const bdd = require('intern!bdd');\n  const assert = require('intern/dojo/node!assert');\n  bdd.describe('unit', () => {\n    bdd.it('test', function *() {\n      const value = yield delay();\n      assert.equal(value, 'wrongvalue');\n    });\n  });\n});\n``\n. Theyield delay()` would cause the promise to be resolved after a delay of 1000ms with a result string 'value', which would be compared against 'wrongvalue' in the assertion and fail.\nEven though Mocha supports ES6 too it still needs the https://www.npmjs.com/package/co-mocha library to be required to automatically make it work with generators. But then code equivalent to what's in my previous message would work as I described. Anything comparable for intern? Or plans to support such a case?\n. ",
    "BrainCrumbz": "No. We just dropped the whole thing at that time.\n. ",
    "siboulet": "@csnover Latest version of Istanbul (0.3.17) has an updated esprima dependency which apparently has better support for ES6. Any chances we can get an Istanbul version bump to 0.3.17 for Intern 3.x? https://github.com/gotwarlost/istanbul/issues/66\n. ",
    "parametrization": "If Istanbul could do ES6 coverage properly, is that all that is in the way of using Intern for both unit and functional tests, complete with coverage?  I ask because I'm in the midst of figuring out a new functional framework for my company.\nIf I don't care about coverage of the app for now, how painful is it to use ES6 features inside the test code?\n. ",
    "zanona": "@neonstalwart nothing running on 4444 unfortunately.\n$ lsof -wni tcp:4444\n$\nI don't have selenium locally installed as well, if that helps.\n. Hey guys, that persists even on 2.0.1, I have installed sc tool and apparently there is a firewall error since that is not connecting as well. I assume this issue might be with SauceLabs connect itself and not intern. I will try to get in touch with them.\nThanks for your help.\n. @d48 unfortunately I haven't found the issue. Since it was on my local machine and I was fine running tests remotely,  which seemed to work without problems.\n. @csnover thanks for your reply. However, could you please let me know how the issue is invalid?\nIt seems that it is either a bug or that the configuration invalid? Therefore, there is no geezer specific documentation available, giving the impression the same configuration should work on both branches.\n. Update:\nfrom URL generated by the test suite:\nhttp://localhost:9000/__intern/client.html?config=test%2Fintern.js&reporters=webdriver&functionalSuites=undefined&suites=test%2FsimpleTest&baseUrl=%2F&sessionId=15fdc508e5abf7b45a1817afa2f2494cc134c2f1\nYou can see the path __intern which seems to be correct at for client.html, however the errors on the log show the following errors.\nwhich means it looks for the test script under localhost:9000/__intern/test/intern.js but the URL where it lives is localhost:9000/test/intern.js instead.\n. Update: \n@csnover has replied here just in case someone stumbled in this question through this page:\nhttp://stackoverflow.com/questions/26349128/intern-geezer-never-responding-on-browserstacktunnel?noredirect=1#comment41362865_26349128\nThe mistake was to defined the file extension on the config=test/intern.js declaration where the correct is config=test/intern \n. Thanks for taking a look into this @csnover.\nI believe you are correct in regards the connection speed. I've noticed the same issue happened when testing under codeship.io so that might be true indeed.\nI will try the sed command as a work around for the moment.\n. ",
    "kmoe": "I'm still getting the \"Failed to start Selenium listener\" error too.\n. Fixed it by killing the process on port 4444.\n. ",
    "JohnBernardsson": "Great! I love doing ridiculous things like this and posting it to the internet...\nYou are totally right @csnover, it worked with PhantomJS because in that moment I was using the commented statement, as I was testing from local.\nI just tried it now, with a real URL \"http://192.168.0.6:8080/index.html\", and it worked perfectly, shame on me.\nClosing the ticket as it works great!\n. ",
    "toonevdb": "I confused youtrack with teamcity since we use both and it's from the same company :) my bad\n. ",
    "darkwing": "Interesting, I didn't know that is how it was meant to be.  Feel free to close.\n. ",
    "johntrandall": "my $0.02: I found it very counter-intuitive that before/afterEach was run on skipped or grep-flitered tests. \nI do understand the runtime-logic as Blasz explained it... but I can't get past the language. The assumption is that 'before each' is 'before each test that is run'. Skipped tests aren't really tests in my mind, they are placeholders. \nI've reverted to the somewhat messier method of commenting out tests that I don't want run, because I don't like the time that the extra 'beforeEach' commands add to the suite total-running-time. \n(I had just come here to file a bug report on the firing of beforeEach on skipped tests.)\n. ",
    "ghguy": "It's not Windows 8.1, it's Windows 8. Have you tested against 8 instead of just closing this ticket?\nTested again today, same issue.\n. Another offshore person helped us to identify that the same box, running Windows 8 with Protractor is working fine against SauceLabs using the same userid and key. At this point, we are thinking it is more like Intern issue(s) rather than Windows 8 or SauceLabs.\nCare to re-open this ticket to look into it again? +1: \n. We will record a screen cast or two to show you the error as well as the working with protractor on the same box, if that helps to rule out SaurceLabs. Meanwhile, let us know if you need anything else/logs or any troubleshooting tips that will help us all.\nThanks for your understanding and such a great product! :)\n. Here you go http://tinyurl.com/kn5azga.\nHTH\n. ",
    "Zensavona": "Sorry about the belated response, I've been overseas :)\nI updated chromedriver to 2.13.307650 (latest I believe at time of writing) and get similar results:\n```\n zensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0 node_modules/.bin/intern-runner config=tests/intern                         \ue0b2 16:45:12\nListening on 0.0.0.0:9000\nStarting tunnel...\nInitialised chrome 39.0.2171.95 on MAC\nTest main - index - Oscar can log in using the correct credentials FAILED on chrome 39.0.2171.95 on MAC:\nCancelError: Timeout reached on main - index - Oscar can log in using the correct credentials\nError: Timeout reached on main - index - Oscar can log in using the correct credentials\n  at Error  \n  at new ErrorCtor  \n  at null._onTimeout  \n  at Timer.listOnTimeout [as ontimeout]  \n=============================== Coverage summary ===============================\nStatements   : 66.94% ( 486/726 )\nBranches     : 56.35% ( 333/591 )\nFunctions    : 68.18% ( 75/110 )\nLines        : 66.8% ( 483/723 )\n================================================================================\nchrome 39.0.2171.95 on MAC: 1/3 tests failed\n-----------------|-----------|-----------|-----------|-----------|\nFile             |   % Stmts |% Branches |   % Funcs |   % Lines |\n-----------------|-----------|-----------|-----------|-----------|\n   requirejs/    |     66.94 |     56.35 |     68.18 |      66.8 |\n      require.js |     66.94 |     56.35 |     68.18 |      66.8 |\n-----------------|-----------|-----------|-----------|-----------|\nAll files        |     66.94 |     56.35 |     68.18 |      66.8 |\n-----------------|-----------|-----------|-----------|-----------|\nTOTAL: tested 1 platforms, 1/3 tests failed\n```\n```\n zensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0 node_modules/.bin/intern-runner config=tests/intern                         \ue0b2 19:05:06\nListening on 0.0.0.0:9000\nStarting tunnel...\nError: [POST http://localhost:4444/wd/hub/session] connect ECONNREFUSED\nError: connect ECONNREFUSED\n  at errnoException  \n  at Object.afterConnect [as oncomplete]  \nTOTAL: tested 0 platforms, 0/0 tests failed; fatal error occurred\nzensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0               cd webapp/                                                    \ue0b2 19:07:46\nzensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0 java -jar selenium-server-standalone-2.44.0.jar                             \ue0b2 16:41:42\n16:41:47.372 INFO - Launching a standalone server\n16:41:47.452 INFO - Java: Oracle Corporation 24.55-b03\n16:41:47.452 INFO - OS: Mac OS X 10.10 x86_64\n16:41:47.479 INFO - v2.44.0, with Core v2.44.0. Built from revision 76d78cf\n16:41:47.642 INFO - Default driver org.openqa.selenium.ie.InternetExplorerDriver registration is skipped: registration capabilities Capabilities [{platform=WINDOWS, ensureCleanSession=true, browserName=internet explorer, version=}] does not match with current platform: MAC\n16:41:47.813 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub\n16:41:47.818 INFO - Version Jetty/5.1.x\n16:41:47.819 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]\n16:41:47.821 INFO - Started HttpContext[/selenium-server,/selenium-server]\n16:41:47.821 INFO - Started HttpContext[/,/]\n16:41:47.894 INFO - Started org.openqa.jetty.jetty.servlet.ServletHandler@6c2e1e17\n16:41:47.894 INFO - Started HttpContext[/wd,/wd]\n16:41:47.904 INFO - Started SocketListener on 0.0.0.0:4444\n16:41:47.904 INFO - Started org.openqa.jetty.jetty.Server@44d40c4e\n^C16:44:55.881 INFO - Shutting down...\nzensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0 chromedriver                                                                \ue0b2 16:44:56\nStarting ChromeDriver 2.13.307650 (feffe1dd547ee7b5c16d38784cd0cd679dfd7850) on port 9515\nOnly local connections are allowed.\n^C\nzensavona@MacBook-Air.local \ue0b0 main \ue0b0 \ue0a0 experiment/testing-with-theintern \ud83d\ude33 \u2739 \u272d \ue0b0 java -jar selenium-server-standalone-2.44.0.jar                             \ue0b2 16:45:15\n16:45:19.184 INFO - Launching a standalone server\n16:45:19.288 INFO - Java: Oracle Corporation 24.55-b03\n16:45:19.288 INFO - OS: Mac OS X 10.10 x86_64\n16:45:19.326 INFO - v2.44.0, with Core v2.44.0. Built from revision 76d78cf\n16:45:19.549 INFO - Default driver org.openqa.selenium.ie.InternetExplorerDriver registration is skipped: registration capabilities Capabilities [{platform=WINDOWS, ensureCleanSession=true, browserName=internet explorer, version=}] does not match with current platform: MAC\n16:45:19.635 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub\n16:45:19.638 INFO - Version Jetty/5.1.x\n16:45:19.640 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]\n16:45:19.641 INFO - Started HttpContext[/selenium-server,/selenium-server]\n16:45:19.641 INFO - Started HttpContext[/,/]\n16:45:19.747 INFO - Started org.openqa.jetty.jetty.servlet.ServletHandler@6c2e1e17\n16:45:19.747 INFO - Started HttpContext[/wd,/wd]\n16:45:19.762 INFO - Started SocketListener on 0.0.0.0:4444\n16:45:19.762 INFO - Started org.openqa.jetty.jetty.Server@5a9e260c\n16:46:26.649 INFO - Executing: [new session: Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]])\n16:46:26.677 INFO - Creating a new session for Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]\nStarting ChromeDriver (v2.9.248307) on port 4572\n16:46:32.290 INFO - Done: [new session: Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]]\n16:46:32.337 INFO - Executing: [get: about:blank])\n16:46:33.925 INFO - Done: [get: about:blank]\n16:46:33.981 INFO - Executing: [get location context])\n16:46:33.981 INFO - Executing: [get local storage size])\n16:46:33.998 INFO - Executing: [take screenshot])\n16:46:34.001 INFO - Executing: [doubleclick: no args])\n16:46:34.002 INFO - Executing: [execute async script: arguments0;, []])\n16:46:36.904 INFO - Done: [take screenshot]\n16:46:36.914 INFO - Executing: [Long press: null])\n16:46:37.037 INFO - Done: [doubleclick: no args]\n16:46:37.116 INFO - Executing: [get window size])\n16:46:37.137 INFO - Done: [execute async script: arguments0;, []]\n16:46:37.137 WARN - Exception thrown\njava.lang.UnsupportedOperationException: Underlying driver does not implement advanced user interactions yet.\n    at org.openqa.selenium.support.events.EventFiringWebDriver.getTouch(EventFiringWebDriver.java:311)\n    at org.openqa.selenium.remote.server.handler.interactions.touch.LongPressOnElement.call(LongPressOnElement.java:40)\n    at org.openqa.selenium.remote.server.handler.interactions.touch.LongPressOnElement.call(LongPressOnElement.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n16:46:37.144 WARN - Exception: Underlying driver does not implement advanced user interactions yet.\n16:46:37.195 INFO - Done: [get window size]\n16:46:37.238 INFO - Executing: [set window size])\n16:46:37.356 INFO - Done: [set window size]\n16:46:49.308 WARN - Exception thrown\norg.openqa.selenium.WebDriverException: unknown error: Location must be set before it can be retrieved\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 9 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\n    at org.openqa.selenium.remote.RemoteExecuteMethod.execute(RemoteExecuteMethod.java:32)\n    at org.openqa.selenium.remote.html5.RemoteLocationContext.location(RemoteLocationContext.java:38)\n    at org.openqa.selenium.chrome.ChromeDriver.location(ChromeDriver.java:195)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocationContext.call(GetLocationContext.java:31)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocationContext.call(GetLocationContext.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n16:46:54.405 WARN - Exception thrown\norg.openqa.selenium.WebDriverException: unknown error: Runtime.evaluate threw exception: DOMException: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 24 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l/c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\n    at org.openqa.selenium.remote.RemoteExecuteMethod.execute(RemoteExecuteMethod.java:32)\n    at org.openqa.selenium.remote.html5.RemoteLocalStorage.size(RemoteLocalStorage.java:72)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocalStorageSize.call(GetLocalStorageSize.java:30)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocalStorageSize.call(GetLocalStorageSize.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n16:47:19.880 WARN - Exception: unknown error: Location must be set before it can be retrieved\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 9 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l/c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n16:47:45.370 WARN - Exception: unknown error: Runtime.evaluate threw exception: DOMException: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 24 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l/c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n16:48:36.378 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Ctitle%3Ea%3C%2Ftitle%3E])\n16:48:36.810 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Ctitle%3Ea%3C%2Ftitle%3E]\n16:48:36.832 INFO - Executing: [get title])\n16:48:36.841 INFO - Done: [get title]\n16:48:36.853 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n16:48:36.904 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n16:48:36.917 INFO - Executing: [execute script: return (function () {\n                        var bbox = document.getElementById('a').getBoundingClientRect();\n                        return bbox.right - bbox.left === 4;\n                    }).apply(this, arguments);, []])\n16:48:36.934 INFO - Done: [execute script: return (function () {\n                        var bbox = document.getElementById('a').getBoundingClientRect();\n                        return bbox.right - bbox.left === 4;\n                    }).apply(this, arguments);, []]\n16:48:36.942 INFO - Executing: [get: about:blank])\n16:48:37.022 INFO - Done: [get: about:blank]\n16:48:37.043 INFO - Executing: [fetching available log types])\n16:48:37.056 INFO - Executing: [find element: By.tagName: html])\n16:48:37.056 INFO - Executing: [find element: By.tagName: html])\n16:48:37.068 INFO - Done: [fetching available log types]\n16:48:37.151 INFO - Done: [find element: By.tagName: html]\n16:48:37.160 INFO - Executing: [tag name: 0 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> tag name: html]])\n16:48:37.165 INFO - Done: [find element: By.tagName: html]\n16:48:37.180 INFO - Done: [tag name: 0 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> tag name: html]]\n16:48:37.180 INFO - Executing: [get element attribute: 0 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> tag name: html], nonexisting])\n16:48:37.200 INFO - Done: [get element attribute: 0 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> tag name: html], nonexisting]\n16:48:37.209 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n16:48:37.246 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n16:48:37.253 INFO - Executing: [execute script: return document.getElementById(\"a\");, []])\n16:48:37.265 INFO - Done: [execute script: return document.getElementById(\"a\");, []]\n16:48:37.271 INFO - Executing: [tag name: 1 [org.openqa.selenium.remote.RemoteWebElement@fdfb49e8 -> unknown locator]])\n16:48:37.280 INFO - Done: [tag name: 1 [org.openqa.selenium.remote.RemoteWebElement@fdfb49e8 -> unknown locator]]\n16:48:37.288 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22opacity%3A%20.1%3B%22%3Ea%3C%2Fdiv%3E])\n16:48:37.346 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22opacity%3A%20.1%3B%22%3Ea%3C%2Fdiv%3E]\n16:48:37.353 INFO - Executing: [execute script: var o = document.getElementById(\"a\").style.opacity; return o && o.charAt(0) === \"0\";, []])\n16:48:37.372 INFO - Done: [execute script: var o = document.getElementById(\"a\").style.opacity; return o && o.charAt(0) === \"0\";, []]\n16:48:37.381 INFO - Executing: [execute script: document.getElementById(\"a\").style.opacity = \"0\";, []])\n16:48:37.388 INFO - Done: [execute script: document.getElementById(\"a\").style.opacity = \"0\";, []]\n16:48:37.395 INFO - Executing: [find element: By.id: a])\n16:48:37.421 INFO - Done: [find element: By.id: a]\n16:48:37.429 INFO - Executing: [is displayed: 2 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]])\n16:48:37.482 INFO - Done: [is displayed: 2 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]]\n16:48:37.497 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22left%3A%200%3B%20position%3A%20absolute%3B%20top%3A%20-1000px%3B%22%3Ea%3C%2Fdiv%3E])\n16:48:37.537 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22left%3A%200%3B%20position%3A%20absolute%3B%20top%3A%20-1000px%3B%22%3Ea%3C%2Fdiv%3E]\n16:48:37.547 INFO - Executing: [find element: By.id: a])\n16:48:37.565 INFO - Done: [find element: By.id: a]\n16:48:37.587 INFO - Executing: [is displayed: 3 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]])\n16:48:37.609 INFO - Done: [is displayed: 3 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]]\n16:48:37.617 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cform%20method%3D%22get%22%20action%3D%22about%3Ablank%22%3E%3Cinput%20id%3D%22a%22%20type%3D%22submit%22%20name%3D%22a%22%20value%3D%22a%22%3E%3C%2Fform%3E])\n16:48:37.678 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cform%20method%3D%22get%22%20action%3D%22about%3Ablank%22%3E%3Cinput%20id%3D%22a%22%20type%3D%22submit%22%20name%3D%22a%22%20value%3D%22a%22%3E%3C%2Fform%3E]\n16:48:37.685 INFO - Executing: [find element: By.id: a])\n16:48:37.704 INFO - Done: [find element: By.id: a]\n16:48:37.713 INFO - Executing: [submit: 4 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]])\n16:48:37.763 INFO - Done: [submit: 4 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]]\n16:48:37.768 INFO - Executing: [get current url])\n16:48:37.778 INFO - Done: [get current url]\n16:48:37.785 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22margin%3A%203000px%3B%22%3E%3C%2Fdiv%3E])\n16:48:37.830 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22margin%3A%203000px%3B%22%3E%3C%2Fdiv%3E]\n16:48:37.845 INFO - Executing: [find element: By.id: a])\n16:48:37.861 INFO - Done: [find element: By.id: a]\n16:48:37.868 INFO - Executing: [get location: 5 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]])\n16:48:37.879 INFO - Done: [get location: 5 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> id: a]]\n16:48:37.886 INFO - Executing: [get: about:blank?1])\n16:48:39.306 INFO - Done: [get: about:blank?1]\n16:48:39.324 INFO - Executing: [refresh])\n16:48:39.427 INFO - Done: [refresh]\n16:48:39.445 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cscript%3Ecounter%20%3D%200%3B%20var%20d%20%3D%20document%3B%20d.onclick%20%3D%20d.onmousedown%20%3D%20d.onmouseup%20%3D%20function%20()%20%7B%20counter%2B%2B%3B%20%7D%3B%3C%2Fscript%3E])\n16:48:40.196 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cscript%3Ecounter%20%3D%200%3B%20var%20d%20%3D%20document%3B%20d.onclick%20%3D%20d.onmousedown%20%3D%20d.onmouseup%20%3D%20function%20()%20%7B%20counter%2B%2B%3B%20%7D%3B%3C%2Fscript%3E]\n16:48:40.205 INFO - Executing: [find element: By.tagName: html])\n16:48:40.243 INFO - Done: [find element: By.tagName: html]\n16:48:40.251 INFO - Executing: [mousemove: 6 false])\n16:48:40.286 INFO - Done: [mousemove: 6 false]\n16:48:40.402 INFO - Executing: [doubleclick: no args])\n16:48:40.468 INFO - Done: [doubleclick: no args]\n16:48:40.478 INFO - Executing: [execute script: return counter;, []])\n16:48:40.488 INFO - Done: [execute script: return counter;, []]\n16:48:40.498 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n16:48:40.557 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n16:48:40.569 INFO - Executing: [execute script: return document.getElementById(\"a\");, []])\n16:48:40.586 INFO - Done: [execute script: return document.getElementById(\"a\");, []]\n16:48:40.594 INFO - Executing: [get element size: 7 [org.openqa.selenium.remote.RemoteWebElement@a29392ca -> unknown locator]])\n16:48:40.607 INFO - Done: [get element size: 7 [org.openqa.selenium.remote.RemoteWebElement@a29392ca -> unknown locator]]\n16:48:40.616 INFO - Executing: [get: about:blank])\n16:48:40.715 INFO - Done: [get: about:blank]\n16:48:40.741 INFO - Executing: [get current url])\n16:48:40.743 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:48:40.762 INFO - Done: [get current url]\n16:48:40.775 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:48:40.790 INFO - Executing: [get: http://localhost:9000/__intern/client.html?config=tests%2Fintern&reporters=webdriver&functionalSuites=tests%2Ffunctional%2Findex&baseUrl=%2F&sessionId=7e541252-b241-4110-8456-646ab58956de])\n16:48:43.273 INFO - Done: [get: http://localhost:9000/__intern/client.html?config=tests%2Fintern&reporters=webdriver&functionalSuites=tests%2Ffunctional%2Findex&baseUrl=%2F&sessionId=7e541252-b241-4110-8456-646ab58956de]\n16:48:43.439 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:48:43.497 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:48:43.598 INFO - Executing: [get: about:blank])\n16:48:43.651 INFO - Done: [get: about:blank]\n16:48:43.667 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:48:43.694 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:48:43.718 INFO - Executing: [get: http://127.0.0.1:8080/web-admin/public/#/])\n16:48:45.203 INFO - Done: [get: http://127.0.0.1:8080/web-admin/public/#/]\n16:48:45.212 INFO - Executing: [implicit wait: 5000])\n16:48:45.223 INFO - Done: [implicit wait: 5000]\n16:48:45.233 INFO - Executing: [find element: By.selector: form#login-form])\n16:48:47.163 INFO - Done: [find element: By.selector: form#login-form]\n16:48:47.175 INFO - Executing: [find child element: 8 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button])\n16:48:47.280 INFO - Done: [find child element: 8 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button]\n16:48:47.287 INFO - Executing: [click: 9 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]])\n16:48:47.476 INFO - Done: [click: 9 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]]\n16:48:47.484 INFO - Executing: [find child element: 8 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-error])\n16:48:47.670 INFO - Done: [find child element: 8 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-error]\n16:48:47.679 INFO - Executing: [get text: 10 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-error]])\n16:48:47.742 INFO - Done: [get text: 10 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-error]]\n16:48:47.780 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:48:47.790 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:48:47.803 INFO - Executing: [get: http://127.0.0.1:8080/web-admin/public/#/])\n16:48:48.011 INFO - Done: [get: http://127.0.0.1:8080/web-admin/public/#/]\n16:48:48.021 INFO - Executing: [implicit wait: 5000])\n16:48:48.028 INFO - Done: [implicit wait: 5000]\n16:48:48.039 INFO - Executing: [find element: By.selector: form#login-form])\n16:48:48.401 INFO - Done: [find element: By.selector: form#login-form]\n16:48:48.406 INFO - Executing: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_username])\n16:48:48.428 INFO - Done: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_username]\n16:48:48.434 INFO - Executing: [click: 12 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username]])\n16:48:48.500 INFO - Done: [click: 12 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username]]\n16:48:48.507 INFO - Executing: [send keys: 12 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username], [asdasdasd]])\n16:48:49.078 INFO - Done: [send keys: 12 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username], [asdasdasd]]\n16:48:49.085 INFO - Executing: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_password])\n16:48:49.105 INFO - Done: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_password]\n16:48:49.111 INFO - Executing: [click: 13 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password]])\n16:48:49.168 INFO - Done: [click: 13 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password]]\n16:48:49.174 INFO - Executing: [send keys: 13 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password], [catsandthings]])\n16:48:49.314 INFO - Done: [send keys: 13 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password], [catsandthings]]\n16:48:49.320 INFO - Executing: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button])\n16:48:49.341 INFO - Done: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button]\n16:48:49.348 INFO - Executing: [click: 14 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]])\n16:48:49.416 INFO - Done: [click: 14 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]]\n16:48:49.428 INFO - Executing: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-error])\n16:48:49.452 INFO - Done: [find child element: 11 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-error]\n16:48:49.460 INFO - Executing: [get text: 15 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-error]])\n16:48:49.500 INFO - Done: [get text: 15 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-error]]\n16:48:49.517 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:48:49.523 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:48:49.530 INFO - Executing: [get: http://127.0.0.1:8080/web-admin/public/#/])\n16:48:49.598 INFO - Done: [get: http://127.0.0.1:8080/web-admin/public/#/]\n16:48:49.605 INFO - Executing: [implicit wait: 5000])\n16:48:49.613 INFO - Done: [implicit wait: 5000]\n16:48:49.619 INFO - Executing: [find element: By.selector: form#login-form])\n16:48:49.959 INFO - Done: [find element: By.selector: form#login-form]\n16:48:49.965 INFO - Executing: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_username])\n16:48:49.985 INFO - Done: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_username]\n16:48:49.989 INFO - Executing: [click: 17 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username]])\n16:48:50.085 INFO - Done: [click: 17 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username]]\n16:48:50.093 INFO - Executing: [send keys: 17 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username], [oscar@dinotel.not.au]])\n16:48:50.407 INFO - Done: [send keys: 17 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_username], [oscar@dinotel.not.au]]\n16:48:50.419 INFO - Executing: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_password])\n16:48:50.443 INFO - Done: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: j_password]\n16:48:50.450 INFO - Executing: [click: 18 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password]])\n16:48:50.506 INFO - Done: [click: 18 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password]]\n16:48:50.513 INFO - Executing: [send keys: 18 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password], [dinotelpw]])\n16:48:50.603 INFO - Done: [send keys: 18 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: j_password], [dinotelpw]]\n16:48:50.609 INFO - Executing: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button])\n16:48:50.629 INFO - Done: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: login-button]\n16:48:50.636 INFO - Executing: [click: 19 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]])\n16:48:50.712 INFO - Done: [click: 19 [[[[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form]] -> id: login-button]]\n16:48:50.723 INFO - Executing: [get all cookies])\n16:48:50.791 INFO - Done: [get all cookies]\n16:48:50.803 INFO - Executing: [refresh])\n16:48:51.097 INFO - Done: [refresh]\n16:48:51.106 INFO - Executing: [find child element: 16 [[ChromeDriver: chrome on MAC (3bf427ab6b8ce13f631039e8b392d45b)] -> css selector: form#login-form], By.id: #customer-search-title])\n16:49:03.453 WARN - Exception thrown\norg.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 50 milliseconds\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l/c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:268)\n    at org.openqa.selenium.remote.RemoteWebElement.findElement(RemoteWebElement.java:171)\n    at org.openqa.selenium.remote.RemoteWebElement.findElementById(RemoteWebElement.java:204)\n    at org.openqa.selenium.By$ById.findElement(By.java:214)\n    at org.openqa.selenium.remote.RemoteWebElement.findElement(RemoteWebElement.java:167)\n    at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.openqa.selenium.support.events.EventFiringWebDriver$EventFiringWebElement$1.invoke(EventFiringWebDriver.java:331)\n    at com.sun.proxy.$Proxy2.findElement(Unknown Source)\n    at org.openqa.selenium.support.events.EventFiringWebDriver$EventFiringWebElement.findElement(EventFiringWebDriver.java:402)\n    at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.openqa.selenium.remote.server.KnownElements$1.invoke(KnownElements.java:63)\n    at com.sun.proxy.$Proxy3.findElement(Unknown Source)\n    at org.openqa.selenium.remote.server.handler.FindChildElement.call(FindChildElement.java:43)\n    at org.openqa.selenium.remote.server.handler.FindChildElement.call(FindChildElement.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n16:49:19.535 INFO - Executing: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n16:49:19.545 INFO - Done: [execute script: return (function getCoverageData() {\n        /global __internCoverage:false /\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n16:49:19.554 INFO - Executing: [delete session: 7e541252-b241-4110-8456-646ab58956de])\n16:49:20.198 INFO - Done: [delete session: 7e541252-b241-4110-8456-646ab58956de]\n16:49:23.856 WARN - Exception: stale element reference: element is not attached to the page document\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 50 milliseconds\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: 3bf427ab6b8ce13f631039e8b392d45b\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.XV2Xes}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n```\nJust a point of note: I also changed AMD library to RequireJS since my last update\n. Sweet, thanks so much for the fast reply. Do you mean just adding another .end() after the findByCssSelector 'block'? Here's my amendment and the subsequent error it produces:\n'Oscar can log in using the correct credentials': function () {\n      return this.remote\n        .get(require.toUrl('http://127.0.0.1:8080/web-admin/public/#/'))\n        .setFindTimeout(5000)\n        .findByCssSelector('form#login-form')\n          .findById('j_username')\n            .click()\n            .type('someone@somewhere.not.au')\n            .end()\n          .findById('j_password')\n            .click()\n            .type('password')\n            .end()\n          .findById('login-button')\n            .click()\n            .end()\n        .end()\n        .findById('#customer-search-title')\n        .getVisibleText()\n        .then(function (text) {\n          assert.strictEqual(text, 'Search Customers',\n            'When Oscar logs in he should see the Search Customers form');\n        });\n    }\nListening on 0.0.0.0:9000\nStarting tunnel...\nInitialised chrome 39.0.2171.95 on MAC\nTest main - index - Oscar can log in using the correct credentials FAILED on chrome 39.0.2171.95 on MAC:\nCancelError: Timeout reached on main - index - Oscar can log in using the correct credentials\nError: Timeout reached on main - index - Oscar can log in using the correct credentials\n  at Error  <anonymous>\n  at new ErrorCtor  <node_modules/intern/node_modules/dojo/errors/create.js:13:21>\n  at null._onTimeout  <node_modules/intern/lib/Test.js:180:38>\n  at Timer.listOnTimeout [as ontimeout]  <timers.js:110:15>\n07:16:06.137 INFO - Executing: [new session: Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]])\n07:16:06.148 INFO - Creating a new session for Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]\nStarting ChromeDriver (v2.9.248307) on port 28550\n07:16:09.631 INFO - Done: [new session: Capabilities [{idle-timeout=60, platform=LINUX, browserName=chrome, selenium-version=2.41.0, name=tests/intern, version=39}]]\n07:16:09.704 INFO - Executing: [get: about:blank])\n07:16:13.992 INFO - Done: [get: about:blank]\n07:16:14.155 INFO - Executing: [get location context])\n07:16:14.163 INFO - Executing: [get local storage size])\n07:16:14.169 INFO - Executing: [take screenshot])\n07:16:14.169 INFO - Executing: [doubleclick: no args])\n07:16:14.179 INFO - Executing: [execute async script: arguments[0](true);, []])\n07:16:14.276 INFO - Done: [doubleclick: no args]\n07:16:14.279 INFO - Executing: [Long press: null])\n07:16:15.517 INFO - Done: [take screenshot]\n07:16:15.519 INFO - Executing: [get window size])\n07:16:15.534 INFO - Done: [execute async script: arguments[0](true);, []]\n07:16:15.538 WARN - Exception thrown\njava.lang.UnsupportedOperationException: Underlying driver does not implement advanced user interactions yet.\n    at org.openqa.selenium.support.events.EventFiringWebDriver.getTouch(EventFiringWebDriver.java:311)\n    at org.openqa.selenium.remote.server.handler.interactions.touch.LongPressOnElement.call(LongPressOnElement.java:40)\n    at org.openqa.selenium.remote.server.handler.interactions.touch.LongPressOnElement.call(LongPressOnElement.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n07:16:15.546 WARN - Exception: Underlying driver does not implement advanced user interactions yet.\n07:16:15.551 INFO - Done: [get window size]\n07:16:15.595 INFO - Executing: [set window size])\n07:16:15.714 INFO - Done: [set window size]\n07:16:24.393 WARN - Exception thrown\norg.openqa.selenium.WebDriverException: unknown error: Location must be set before it can be retrieved\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 12 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\n    at org.openqa.selenium.remote.RemoteExecuteMethod.execute(RemoteExecuteMethod.java:32)\n    at org.openqa.selenium.remote.html5.RemoteLocationContext.location(RemoteLocationContext.java:38)\n    at org.openqa.selenium.chrome.ChromeDriver.location(ChromeDriver.java:195)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocationContext.call(GetLocationContext.java:31)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocationContext.call(GetLocationContext.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n07:16:39.680 WARN - Exception thrown\norg.openqa.selenium.WebDriverException: unknown error: Runtime.evaluate threw exception: DOMException: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 18 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\n    at org.openqa.selenium.remote.RemoteExecuteMethod.execute(RemoteExecuteMethod.java:32)\n    at org.openqa.selenium.remote.html5.RemoteLocalStorage.size(RemoteLocalStorage.java:72)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocalStorageSize.call(GetLocalStorageSize.java:30)\n    at org.openqa.selenium.remote.server.handler.html5.GetLocalStorageSize.call(GetLocalStorageSize.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n07:17:00.049 WARN - Exception: unknown error: Location must be set before it can be retrieved\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 12 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n07:17:15.347 WARN - Exception: unknown error: Runtime.evaluate threw exception: DOMException: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 18 milliseconds\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n07:18:16.472 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Ctitle%3Ea%3C%2Ftitle%3E])\n07:18:16.584 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Ctitle%3Ea%3C%2Ftitle%3E]\n07:18:16.597 INFO - Executing: [get title])\n07:18:16.607 INFO - Done: [get title]\n07:18:16.617 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n07:18:16.672 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n07:18:16.681 INFO - Executing: [execute script: return (function () {\n                        var bbox = document.getElementById('a').getBoundingClientRect();\n                        return bbox.right - bbox.left === 4;\n                    }).apply(this, arguments);, []])\n07:18:16.693 INFO - Done: [execute script: return (function () {\n                        var bbox = document.getElementById('a').getBoundingClientRect();\n                        return bbox.right - bbox.left === 4;\n                    }).apply(this, arguments);, []]\n07:18:16.703 INFO - Executing: [get: about:blank])\n07:18:16.931 INFO - Done: [get: about:blank]\n07:18:16.954 INFO - Executing: [find element: By.tagName: html])\n07:18:16.955 INFO - Executing: [find element: By.tagName: html])\n07:18:16.965 INFO - Executing: [fetching available log types])\n07:18:17.022 INFO - Done: [find element: By.tagName: html]\n07:18:17.048 INFO - Executing: [tag name: 0 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> tag name: html]])\n07:18:17.049 INFO - Done: [find element: By.tagName: html]\n07:18:17.055 INFO - Done: [fetching available log types]\n07:18:17.060 INFO - Executing: [get element attribute: 0 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> tag name: html], nonexisting])\n07:18:17.064 INFO - Done: [tag name: 0 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> tag name: html]]\n07:18:17.093 INFO - Done: [get element attribute: 0 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> tag name: html], nonexisting]\n07:18:17.104 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n07:18:17.184 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n07:18:17.195 INFO - Executing: [execute script: return document.getElementById(\"a\");, []])\n07:18:17.222 INFO - Done: [execute script: return document.getElementById(\"a\");, []]\n07:18:17.231 INFO - Executing: [tag name: 1 [org.openqa.selenium.remote.RemoteWebElement@aa189dd0 -> unknown locator]])\n07:18:17.238 INFO - Done: [tag name: 1 [org.openqa.selenium.remote.RemoteWebElement@aa189dd0 -> unknown locator]]\n07:18:17.256 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22opacity%3A%20.1%3B%22%3Ea%3C%2Fdiv%3E])\n07:18:17.299 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22opacity%3A%20.1%3B%22%3Ea%3C%2Fdiv%3E]\n07:18:17.306 INFO - Executing: [execute script: var o = document.getElementById(\"a\").style.opacity; return o && o.charAt(0) === \"0\";, []])\n07:18:17.330 INFO - Done: [execute script: var o = document.getElementById(\"a\").style.opacity; return o && o.charAt(0) === \"0\";, []]\n07:18:17.346 INFO - Executing: [execute script: document.getElementById(\"a\").style.opacity = \"0\";, []])\n07:18:17.380 INFO - Done: [execute script: document.getElementById(\"a\").style.opacity = \"0\";, []]\n07:18:17.388 INFO - Executing: [find element: By.id: a])\n07:18:17.413 INFO - Done: [find element: By.id: a]\n07:18:17.432 INFO - Executing: [is displayed: 2 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]])\n07:18:17.467 INFO - Done: [is displayed: 2 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]]\n07:18:17.476 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22left%3A%200%3B%20position%3A%20absolute%3B%20top%3A%20-1000px%3B%22%3Ea%3C%2Fdiv%3E])\n07:18:17.521 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22left%3A%200%3B%20position%3A%20absolute%3B%20top%3A%20-1000px%3B%22%3Ea%3C%2Fdiv%3E]\n07:18:17.527 INFO - Executing: [find element: By.id: a])\n07:18:17.540 INFO - Done: [find element: By.id: a]\n07:18:17.544 INFO - Executing: [is displayed: 3 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]])\n07:18:17.568 INFO - Done: [is displayed: 3 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]]\n07:18:17.587 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cform%20method%3D%22get%22%20action%3D%22about%3Ablank%22%3E%3Cinput%20id%3D%22a%22%20type%3D%22submit%22%20name%3D%22a%22%20value%3D%22a%22%3E%3C%2Fform%3E])\n07:18:17.657 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cform%20method%3D%22get%22%20action%3D%22about%3Ablank%22%3E%3Cinput%20id%3D%22a%22%20type%3D%22submit%22%20name%3D%22a%22%20value%3D%22a%22%3E%3C%2Fform%3E]\n07:18:17.674 INFO - Executing: [find element: By.id: a])\n07:18:17.694 INFO - Done: [find element: By.id: a]\n07:18:17.699 INFO - Executing: [submit: 4 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]])\n07:18:17.752 INFO - Done: [submit: 4 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]]\n07:18:17.760 INFO - Executing: [get current url])\n07:18:17.787 INFO - Done: [get current url]\n07:18:17.795 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22margin%3A%203000px%3B%22%3E%3C%2Fdiv%3E])\n07:18:17.834 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cdiv%20id%3D%22a%22%20style%3D%22margin%3A%203000px%3B%22%3E%3C%2Fdiv%3E]\n07:18:17.848 INFO - Executing: [find element: By.id: a])\n07:18:17.870 INFO - Done: [find element: By.id: a]\n07:18:17.879 INFO - Executing: [get location: 5 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]])\n07:18:17.892 INFO - Done: [get location: 5 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> id: a]]\n07:18:17.897 INFO - Executing: [get: about:blank?1])\n07:18:19.393 INFO - Done: [get: about:blank?1]\n07:18:19.402 INFO - Executing: [refresh])\n07:18:19.513 INFO - Done: [refresh]\n07:18:19.526 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cscript%3Ecounter%20%3D%200%3B%20var%20d%20%3D%20document%3B%20d.onclick%20%3D%20d.onmousedown%20%3D%20d.onmouseup%20%3D%20function%20()%20%7B%20counter%2B%2B%3B%20%7D%3B%3C%2Fscript%3E])\n07:18:20.685 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cscript%3Ecounter%20%3D%200%3B%20var%20d%20%3D%20document%3B%20d.onclick%20%3D%20d.onmousedown%20%3D%20d.onmouseup%20%3D%20function%20()%20%7B%20counter%2B%2B%3B%20%7D%3B%3C%2Fscript%3E]\n07:18:20.693 INFO - Executing: [find element: By.tagName: html])\n07:18:20.736 INFO - Done: [find element: By.tagName: html]\n07:18:20.764 INFO - Executing: [mousemove: 6 false])\n07:18:20.799 INFO - Done: [mousemove: 6 false]\n07:18:20.912 INFO - Executing: [doubleclick: no args])\n07:18:20.988 INFO - Done: [doubleclick: no args]\n07:18:21.002 INFO - Executing: [execute script: return counter;, []])\n07:18:21.015 INFO - Done: [execute script: return counter;, []]\n07:18:21.029 INFO - Executing: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E])\n07:18:21.147 INFO - Done: [get: data:text/html;charset=utf-8,%3C!DOCTYPE%20html%3E%3Cstyle%3E%23a%7Bwidth%3A8px%3Bheight%3A8px%3B-ms-transform%3Ascale(0.5)%3B-moz-transform%3Ascale(0.5)%3B-webkit-transform%3Ascale(0.5)%3Btransform%3Ascale(0.5)%3B%7D%3C%2Fstyle%3E%3Cdiv%20id%3D%22a%22%3E%3C%2Fdiv%3E]\n07:18:21.171 INFO - Executing: [execute script: return document.getElementById(\"a\");, []])\n07:18:21.192 INFO - Done: [execute script: return document.getElementById(\"a\");, []]\n07:18:21.200 INFO - Executing: [get element size: 7 [org.openqa.selenium.remote.RemoteWebElement@74b2c9cf -> unknown locator]])\n07:18:21.214 INFO - Done: [get element size: 7 [org.openqa.selenium.remote.RemoteWebElement@74b2c9cf -> unknown locator]]\n07:18:21.234 INFO - Executing: [get: about:blank])\n07:18:21.416 INFO - Done: [get: about:blank]\n07:18:21.441 INFO - Executing: [get current url])\n07:18:21.442 INFO - Executing: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n07:18:21.463 INFO - Done: [get current url]\n07:18:21.474 INFO - Done: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n07:18:21.485 INFO - Executing: [get: http://localhost:9000/__intern/client.html?config=tests%2Fintern&reporters=webdriver&functionalSuites=tests%2Ffunctional%2Findex&baseUrl=%2F&sessionId=1a381aa5-f470-4fff-ba88-6816aea42031])\n07:18:24.135 INFO - Done: [get: http://localhost:9000/__intern/client.html?config=tests%2Fintern&reporters=webdriver&functionalSuites=tests%2Ffunctional%2Findex&baseUrl=%2F&sessionId=1a381aa5-f470-4fff-ba88-6816aea42031]\n07:18:24.325 INFO - Executing: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n07:18:24.428 INFO - Done: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n07:18:24.525 INFO - Executing: [get: about:blank])\n07:18:24.572 INFO - Done: [get: about:blank]\n07:18:24.589 INFO - Executing: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n07:18:24.617 INFO - Done: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n07:18:24.629 INFO - Executing: [get: http://127.0.0.1:8080/web-admin/public/#/])\n07:18:25.629 INFO - Done: [get: http://127.0.0.1:8080/web-admin/public/#/]\n07:18:25.648 INFO - Executing: [implicit wait: 5000])\n07:18:25.656 INFO - Done: [implicit wait: 5000]\n07:18:25.672 INFO - Executing: [find element: By.selector: form#login-form])\n07:18:27.406 INFO - Done: [find element: By.selector: form#login-form]\n07:18:27.432 INFO - Executing: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: j_username])\n07:18:27.461 INFO - Done: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: j_username]\n07:18:27.469 INFO - Executing: [click: 9 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_username]])\n07:18:27.593 INFO - Done: [click: 9 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_username]]\n07:18:27.621 INFO - Executing: [send keys: 9 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_username], [oscar@dinotel.not.au]])\n07:18:28.632 INFO - Done: [send keys: 9 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_username], [oscar@dinotel.not.au]]\n07:18:28.648 INFO - Executing: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: j_password])\n07:18:28.677 INFO - Done: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: j_password]\n07:18:28.692 INFO - Executing: [click: 10 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_password]])\n07:18:28.918 INFO - Done: [click: 10 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_password]]\n07:18:28.934 INFO - Executing: [send keys: 10 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_password], [dinotelpw]])\n07:18:29.104 INFO - Done: [send keys: 10 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: j_password], [dinotelpw]]\n07:18:29.109 INFO - Executing: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: login-button])\n07:18:29.135 INFO - Done: [find child element: 8 [[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form], By.id: login-button]\n07:18:29.141 INFO - Executing: [click: 11 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: login-button]])\n07:18:29.207 INFO - Done: [click: 11 [[[[ChromeDriver: chrome on MAC (d8df9dbd8bcbdf9ff40cf52960591778)] -> css selector: form#login-form]] -> id: login-button]]\n07:18:29.219 INFO - Executing: [find element: By.id: #customer-search-title])\n07:18:45.424 WARN - Exception thrown\norg.openqa.selenium.NoSuchElementException: no such element\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 5.07 seconds\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:204)\n    at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:156)\n    at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:599)\n    at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:352)\n    at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:393)\n    at org.openqa.selenium.By$ById.findElement(By.java:214)\n    at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:344)\n    at sun.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.openqa.selenium.support.events.EventFiringWebDriver$2.invoke(EventFiringWebDriver.java:101)\n    at com.sun.proxy.$Proxy1.findElement(Unknown Source)\n    at org.openqa.selenium.support.events.EventFiringWebDriver.findElement(EventFiringWebDriver.java:184)\n    at org.openqa.selenium.remote.server.handler.FindElement.call(FindElement.java:47)\n    at org.openqa.selenium.remote.server.handler.FindElement.call(FindElement.java:1)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at org.openqa.selenium.remote.server.DefaultSession$1.run(DefaultSession.java:168)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\n07:18:54.635 INFO - Executing: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []])\n07:18:55.665 INFO - Done: [execute script: return (function getCoverageData() {\n        /*global __internCoverage:false */\n        return typeof __internCoverage !== 'undefined' && JSON.stringify(__internCoverage);\n    }).apply(this, arguments);, []]\n07:18:55.692 INFO - Executing: [delete session: 1a381aa5-f470-4fff-ba88-6816aea42031])\n07:18:56.333 INFO - Done: [delete session: 1a381aa5-f470-4fff-ba88-6816aea42031]\n07:19:05.826 WARN - Exception: no such element\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248307,platform=Mac OS X 10.10.0 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 5.07 seconds\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: '2.44.0', revision: '76d78cf', time: '2014-10-23 20:02:37'\nSystem info: host: 'MacBook-Air.local', ip: '127.0.0.1', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.10', java.version: '1.7.0_55'\nSession ID: d8df9dbd8bcbdf9ff40cf52960591778\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=MAC, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/var/folders/l_/_c6vfgld6n17j9qf5r98qyl40000gn/T/.org.chromium.Chromium.2WOEIK}, rotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, applicationCacheEnabled=false, takesScreenshot=true}]\nAm I missing something?\n. All good, I just patched it for my own use (I needed it immediately) so I figured may as well share if you guys want it also.\nIt would be nice to have a more regular way of doing this for all reporters though.\nCheers\n. :ok_hand: thanks so much\n. Updated OP with more information\n. I see. That makes a lot more sense, I'm looking into it now.\nThanks so much for your response :+1:\n. ",
    "davidofwatkins": "@Zensavona I was having this issue as well for awhile. It was finally resolved by reverting to JDK 1.8.0_45 (see here).\n. ",
    "blainesch": "\n. ",
    "edchat": "Also according to according to http://www.sitepen.com/blog/2014/09/12/intern-2-1-released/  runner.js is supposed to report which tests were skipped, but it doesn't.\n\nTest writers can also programmatically skip tests using the new skip function. A test can call this.skip() at any time to halt execution and move to the next test. The skip message will be reported by all built-in reporters\n. I don't mind adding my own skip message in a custom reporter, but I would like to see the skipped count on the /session/end, because I would like to be able to have my custom reporter used along with the runner reporter and I don't want to duplicate the /session/end lines.\n. \n",
    "anatoliyarkhipov": "I agree with that. It would be nice to add a parameter to the reporters config. Maybe, something like:\njavascript\n{\n  reporters: [\n    { id: 'console', coveragePosition: 'top|bottom|null' }\n  ]\n}\nI also was trying to implement a custom reporter and override the original console reporter to prevent the rendering of coverage, but I can't load the original because it requires the dojo/lang module from intern/node_modules/dojo and I can't understand how to properly define paths.\n. As I just learned, it's possible to prevent displaying of coverage by adding this line to the all.js (your main test script, which loads others):\nglobal.__internCoverage = undefined\n. ",
    "bartoszkaczorek": "Here's the example functional test (21 lines total):\n``` javascript\n define([ 'intern!bdd', 'intern/chai!expect' ], function(bdd, expect) {\n    \"use strict\";\nbdd.describe('Example Test', function() {\n\n    bdd.it('Hello World', function() {\n\n        this.timeout = 30000;\n\n        return this.remote\n\n        .get('http://www.google.com')\n\n        .findById('hplogo_non_existing_element').end();\n\n    });\n\n});\n\n});\n```\nHere's the output after running the test:\nListening on 0.0.0.0:9000\nStarting tunnel...\nInitialised chrome 39.0.2171.95 on XP\nTest main - Example Test - Hello World FAILED on chrome 39.0.2171.95 on XP:\nNoSuchElement: [POST http://localhost:4444/wd/hub/session/9265b7f5-75de-4086-8ee6-7514a2fe886a/element / {\"using\":\"id\",\"value\":\"hplogo_non_existing_element\"}] no such element\n  (Session info: chrome=39.0.2171.95)\n  (Driver info: chromedriver=2.9.248315,platform=Windows NT 6.1 SP1 x86_64) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 62 milliseconds\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: '2.43.1', revision: '5163bce', time: '2014-09-10 16:27:33'\nSystem info: host: 'VDDP03P-5CFEDE2', ip: '10.172.12.225', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_26'\nSession ID: cc206c359ebc90048271c5c58df4bf28\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities [{platform=XP, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=****},\nrotatable=false, locationContextEnabled=true, version=39.0.2171.95, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, nativeEvents=true, webStorageEnabled=true, applicationCacheEnabled=false, takesScreenshot=true}]\n  at Server._post  <node_modules\\intern\\node_modules\\leadfoot\\Server.js:68:9>\n  at ProxiedSession._post  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:57:30>\n  at ProxiedSession.Session.find  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:1053:15>\n  at CompatCommand.<anonymous>  <node_modules\\intern\\node_modules\\leadfoot\\Command.js:41:36>\n  at <node_modules\\intern\\node_modules\\leadfoot\\node_modules\\dojo\\Promise.js:235:37>\n  at runCallbacks  <node_modules\\intern\\node_modules\\leadfoot\\node_modules\\dojo\\Promise.js:11:18>\n  at <node_modules\\intern\\node_modules\\leadfoot\\node_modules\\dojo\\Promise.js:188:17>\n  at Object.run [as _onImmediate]  <node_modules\\intern\\node_modules\\leadfoot\\node_modules\\dojo\\Promise.js:131:29>\n  at processImmediate [as _immediateCallback]  <timers.js:330:15>\n  at new CompatCommand  <node_modules\\intern\\runner.js:213:14>\n  at CompatCommand.find  <node_modules\\intern\\node_modules\\leadfoot\\Command.js:22:10>\n  at <CompatCommand.prototype.(anonymous function) [as findById] (****\\node_modules\\leadfoot\\lib\\strategies.js:24:16)>\n  at Test.test  <exampleTests\\pocWrongLines\\exampleTests.js:25:61>\n  at Test.run  <node_modules\\intern\\lib\\Test.js:207:31>\n  at <node_modules\\intern\\lib\\Suite.js:237:13>\n  at signalListener  <node_modules\\intern\\node_modules\\dojo\\Deferred.js:37:21>\n  at Promise.then.promise.then  <node_modules\\intern\\node_modules\\dojo\\Deferred.js:258:5>\n  at runTest  <node_modules\\intern\\lib\\Suite.js:236:46>\n  at <node_modules\\intern\\lib\\Suite.js:249:7>\n  at new CompatCommand  <node_modules\\intern\\runner.js:213:14>\n  at CompatCommand.Command.end  <node_modules\\intern\\node_modules\\leadfoot\\Command.js:475:10>\n  at Test.test  <exampleTests\\pocWrongLines\\exampleTests.js:25:101>\n  at Test.run  <node_modules\\intern\\lib\\Test.js:207:31>\n  at <node_modules\\intern\\lib\\Suite.js:237:13>\n  at signalListener  <node_modules\\intern\\node_modules\\dojo\\Deferred.js:37:21>\n  at Promise.then.promise.then  <node_modules\\intern\\node_modules\\dojo\\Deferred.js:258:5>\n  at runTest  <node_modules\\intern\\lib\\Suite.js:236:46>\n  at <node_modules\\intern\\lib\\Suite.js:249:7>\n  at process._tickCallback  <node.js:415:13>\nAs you can see it is pointing to line 25 in exampleTests.js but it has only 21 lines:\nat Test.test  <exampleTests\\pocWrongLines\\exampleTests.js:25:101>\nIf you need any more info let me know.\n. Yes I was not excluding the tests from code coverage instrumentation, excluding them helped to fix that issue.\n. I'm using intern 2.2.2 - I'm installing it using npm and it says 2.2.2 is the latest currently, will try with 3 when I get updated.\n. One workaround for this issue is to increase firefox profile script timeout preferences i.e.:\n\"dom.max_chrome_script_run_time\": 120\n\"dom.max_script_run_time\": 120\nThese settings can accessed in firefox by navigating to about:config page but Selenium standalone server seems to override these settings - one alternative is to edit file in selenium standalone server jar: selenium-server-standalone-2.47.1.jar\\org\\openqa\\selenium\\firefox\\webdriver_prefs.json.\nAnother alternative is to add encoded firefox profile with those preferences applied to environments section in intern configuration file i.e.:\njson\n\"environments\": [{\n    \"browserName\": \"firefox\",\n    \"platform\": [\"WINDOWS\"],\n    \"firefox_profile\" : \"UEsDBBQACAAIAHF6V0gAAAAAAAAAAAAAAAAHAAAAdXNlci5qc5VWPW/bMBDd+ysKTy1QE02CLO3UJh0KFMgQBB0JijpJjCiSII9W/O97lKzUsj5sb7Tw3n3fO8cAnjsPxaeNcI5FlwsEJiLazZePhdABPn//EGdBYESmIZ/HZd62xGK5bY22ImeNMKKkD6Gy7d8KzDMKj8qU6/RfL39+MLsD71UOBEUfTwIaHHXIOyakBIddVMtYrUzNrAPD4Q3BG6HJ9O040cHuf6yBtlWGEloG26IgfAp0pnSDxSAK6N6UPbuoiAGEl9WhOfPGUyImKGsCy7SVtVYBLzUeOh5aD8xDiA3wwtuGSy9CNe/tPZUKtGayAlk/QiGixp9939dpKLLAWuHNk3nQNpyp1xH6iXq2bjqksYqOORo2Qn6db+qoBY3QFAusV2uwW9kGkm3egpb05tGn4dmIzEb8lmlh6s3YZw47tFYHRkNsvaQOWX3sbDqmuW1YrkLaLt5NaR49zQpPezSf/VH30+o+9uRnSexAjJuTMhzBtS3L8RxO4zmCH/RhdWqncGNRFfsX0oP58A1ga3190IjtYYu2VHOMKf6ZZRooFaIj3tuWCmtAYtqArQO/JWckGzPJj5iuUqHab5PAORHCVoMpMQ397f39uI1DUKSSgQmtbcuzPc/7qSfCtGyOlshhYDS/vLG50GcmDCS1GfesUBroxaxX1BrurFZyTx7uxgGFU3xAryTyU9pM8d6paQc5GNLANF/d54VlXKV0os6tkdeRWxA15XV5gIlwnS8NYnddamPGdd5CzBqFXJnLK7lTQEel5I16Wzql49KPCGfDU6WxhlS9gSYD/9z9XNioJFK1QnbYj+FeH4RodsIHCoImD+j36xM+hfcr0iV+cn6nWA+vtN8Ll/1V7ESQXjmku96JQFea3+ah19vZ8IcrlvS2v+wsj407SmK61C1kuVekLLz/p8GjIVCguLgEj6m2a6ReOLkRSDY47Gj3zlFIltJJ/u9H0YdO2aaOUiYkhrwvBffRcFRN2sqb25MbMEBlRTIFi4x/UEsHCK80KF/2AgAAIAoAAFBLAQItAxQACAAIAHF6V0ivNChf9gIAACAKAAAHAAAAAAAAAAAAIAC2gQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAAACsDAAAAAA==\"\n}]\nThis encoded firefox profile can be generated as follows using firefox-profile npm module:\n``` javascript\nvar FirefoxProfile = require('firefox-profile');\nvar fp = new FirefoxProfile();\nfp.setPreference('dom.max_chrome_script_run_time', 120);\nfp.setPreference('dom.max_script_run_time', 120);\nfp.updatePreferences();\nfp.encoded(function(encodedProfile) {\nconsole.log('firefox_profile: %s', encodedProfile);\n\n});\n```\n. We have around 2000 test modules in one of our projects and that's where we started to see issues with firefox - considering we have that amount of tests we could also hit 5000 at some point as well.\n. +1\nRefactoring paths starting like \"../../../../../\" is a nightmare.\n. Well I'm running tests in a browser using selenium server which is hosted on a different server (and I need to use proxy with authentication to connect with it) - so I need to configure my tunnel proxy settings to get it working, but then the same proxy settings are applied to intern's Proxy which makes my tests error out - I believe it's happening due to the same upstream bug as here: https://github.com/theintern/digdug/issues/17. Even if the mentioned upstream bug would get fixed and my tests start work ok with that setup I would still want to separate those settings since intern's Proxy is on my localhost I actually don't need any proxy settings here applied. Does that makes sense?\nBy the way - that issue did not occured in intern 2, it started to be an issue after update to intern 3.\n. I am currently using below intern configuration options to run intern tests on Sauce Labs (some of the real values are mocked):\njson\n    \"tunnel\": \"dojo/node!digdug-null-sauce-labs-tunnel/lib/NullSauceLabsTunnel\",\n    \"tunnelOptions\": {\n        \"clientUrl\": \"https://my-sauce-username:my-sauce-access-key@my-sauce-labs-server/wd/hub\",\n        \"proxy\": \"http://my-proxy-server:80\",\n        \"username\": \"my-sauce-username\",\n        \"accessKey\": \"my-sauce-access-key\"\n    },\nYou can take a look at the NullSauceLabsTunnel implementation here if you want (in short it's a Sauce Labs tunnel with fixed proxy behind authentication issue):\nhttps://github.com/bartoszkaczorek/digdug-null-sauce-labs-tunnel/blob/master/lib/NullSauceLabsTunnel.js\nNow if I use these options with intern 3.0.6 it will instantiate intern server as (it will use proxy from tunelOptions):\njavascript\nvar server = new Server(tunnel.clientUrl, {\n    \"proxy\" : \"http://my-proxy.server:80\"\n});\nThis then leads to below error when I try running test:\nCreated session chrome 41 on WINDOWS (123456)\nSUITE ERROR\nUnknownError: [POST https://(redacted)@my-sauce-labs-server/wd/hub/session/123456/url / {\"url\":\"http://my-intern-machine-hostname:8090/__intern/client.html?someParametersAddedHere\"}] An unknown server-side error occurred while processing the command.\n  at runRequest  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:88:40>\n  at <node_modules\\intern\\node_modules\\leadfoot\\Session.js:109:39>\n  at new Promise  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:575:15>\n  at <node_modules\\intern\\lib\\ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:462:21>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:482:10>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n  at runCallbacks  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules\\intern\\node_modules\\leadfoot\\Command.js:610:11>\n  at ClientSuite.lang.mixin.run  <node_modules\\intern\\lib\\ClientSuite.js:149:6>\n  at runWithCatch  <node_modules\\intern\\lib\\Suite.js:314:21>\n  at next  <node_modules\\intern\\lib\\Suite.js:322:18>\n  at <node_modules\\intern\\lib\\Suite.js:345:6>\n  at new Promise  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:411:3>\n  at runTests  <node_modules\\intern\\lib\\Suite.js:278:12>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n  at runCallbacks  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:317:4>\n[Suite chrome 41 on WINDOWS - unit tests FAILED\nUnknownError: [POST https://(redacted)@my-sauce-labs-server/wd/hub/session/123456/url / {\"url\":\"http://my-intern-machine-hostname:8090/__intern/client.html?someParametersAddedHere\"}] An unknown server-side error occurred while processing the command.\n  at runRequest  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:88:40>\n  at <node_modules\\intern\\node_modules\\leadfoot\\Session.js:109:39>\n  at new Promise  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules\\intern\\node_modules\\leadfoot\\Session.js:575:15>\n  at <node_modules\\intern\\lib\\ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:462:21>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:482:10>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n  at runCallbacks  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules\\intern\\node_modules\\leadfoot\\Command.js:610:11>\n  at ClientSuite.lang.mixin.run  <node_modules\\intern\\lib\\ClientSuite.js:149:6>\n  at runWithCatch  <node_modules\\intern\\lib\\Suite.js:314:21>\n  at next  <node_modules\\intern\\lib\\Suite.js:322:18>\n  at <node_modules\\intern\\lib\\Suite.js:345:6>\n  at new Promise  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:411:3>\n  at runTests  <node_modules\\intern\\lib\\Suite.js:278:12>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n  at runCallbacks  <node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n  at <node_modules\\intern\\node_modules\\dojo\\Promise.ts:317:4>[0m\n0/0 tests failed\nNo unit test coverage for chrome 41 on WINDOWS[0m\n[chrome 41 on WINDOWS: 0/0 tests failed; fatal error occurred[0m\nThis error does not occur if intern server is instantiated without proxy options (and this is how I currently fix this, but there's no option to fix it without changing intern source files which is sad) so this is basically where I come from.\n. I think our proxy does indeed bypass localhost connections, but in our intern config proxyUrl is not pointing to localhost but to machine hostname actually (setting it to localhost would not work with Sauce Labs for us):\n\"proxyPort\": 8090,\n\"proxyUrl\": \"http://my-intern-machine-hostname:8090\",\nRegarding clientUrl - I think the reason I used it was only because I thought it's more readable that way as it seemed a bit confusing to guess if hostname, protocol & port parameters are used to build clientUrl or maybe rather proxy url and it's easier to spot misspellings when looking at whole URL.\n. Any update on that one?. I have tried with intern 3.3.2 and can confirm that issue does not occur anymore. Thanks!\n. @dylans - I agree it can be hard to track down and I'm not sure how this can be reliably reproduced. Most of the times all tests pass OK without errors and I don't remember seeing such error when running locally. Haven't seen anything interesting in Sauce logs but will have a closer look at those next time I step on this issue. Was wondering if it could be some memory demand issue when there's too many tests running? Sometimes I also experience that intern just hangs (without any error message, looks like it just stops executing tests) and was wondering if this is somehow related to our test count.. ",
    "rahul286": "@csnover thanks for your time and advice. :-)\n. ",
    "Arnavion": "The workaround doesn't work. The deferred resolves itself with the promise, instead of waiting for the promise to be resolved and taking its state, so the test passes immediately instead of waiting for the timeout and failing. Instead, I had to do the equivalent of:\njavascript\nvar dfd = this.async(100);\nnew Promise(...).then(dfd.resolve.bind(dfd), dfd.reject.bind(dfd));\nreturn dfd.promise;\n. The code coverage report also shows filenames with backslashes on Windows right now, so doing it just for excludeInstrumentation is not ideal. Perhaps normalize filenames to forward slashes as soon as you get them?\n. It would be inconsistent - that filenames would be considered to be separted by / for the code coverage regex, even though the report shows them with backslashes.\n. Can you clarify where the separation between public and internal API is?\nIs Executor public or internal?\nShould I normalize the config in PreExecutor.getConfig or somewhere later down the pipeline?\nIf I do it there will reporters be affected?\n. - tests/unit/lib/util.js apparently calls util.instrument without a value for the coverageVariable, leading to it being coerced to the string \"undefined\" when used to index the instrumenters object. Deliberate? For now I've re-implemented that behavior by allowing instrumentOptions to be undefined and initializing it to an empty object.\n- I don't understand how my change caused the runner self-test failure in Travis, and I don't have a Saucelabs account to run the test myself.\n. Should I rebase the PR on top of your commit then?\nEdit: Looks like that worked.\n. Thanks!\n. This isn't strictly necessary, since even reinstalling will uninstall first (and thus delete the node_modules directory), so this directory cannot exist. I kept it for defensiveness, but I can take it out if you want.\n. Change this to use ncp or other such dependency instead of hand-rolling?\n. ",
    "mgingras": ":+1: That does work. Thank you.\n. ",
    "zaach": "I'm on 3.0 and this doesn't seem to work for me, e.g.:\n```\n    afterEach: function (test) {\n      console.log('test', test);\n      return FunctionalHelpers.clearBrowserState(this);\n    },\n'some test yadada': function () {\n.....\n\n```\nIs logging test undefined.\n. No, it's undefined there too.\n. ",
    "ainthek": "selenium-webdriver contain mocha integration in BDD style. \n. The selenium-webdriver/testing module may be used to write tests that may be run with Mocha,\nhttp://code.google.com/p/selenium/wiki/WebDriverJs#Writing_Tests\n. @csnover: \n-  REPL support ?\n- Mocha and code coverage ?\nI'm trying to improve docs, so I don't get it why you close the issue answering only one of 3 suggestions with such a quick answer. Thanx for understanding\n. as you have seen here \"incorrect\" marketing may really demotivate \"decision\" makers (architects considering your framework) .\nrepl- (console based read eval print loop)is bital tooling to quickly prototype tests or continue manually where possibly incorrectly implemed test fails (specially usefull with real browsers functional testing)\n. I see no sence prooving anything but, yes they answer more honestly: Just one example,  Support of Mocha and Code Coverage: https://groups.google.com/forum/#!topic/mochajs/zawMtAIb-A0\n. thanx a lot. will follow the guideline. anyway will search for docs am sure i have seen intern-client + suites in one of the docs. \n. ",
    "brakon": "I can reproduce the same error message by adding a test that uses \"supertest\" to simulate a request to a kraken/express app.\nTypeError: undefined is not a function\n  at Parser.<anonymous>  <node_modules/engine-munger/node_modules/localizr/node_modules/findatag/lib/parseStream.js:89:15>\n  at Parser.g  <events.js:199:16>\n  at Parser.emit  <events.js:104:17>\n  at Parser.end  <node_modules/engine-munger/node_modules/localizr/node_modules/findatag/lib/parser.js:300:10>\nExample of the test setup:\ndefine(['intern/dojo/node!kraken-js', 'intern/dojo/node!express', 'intern/dojo/node!supertest', 'intern!bdd'], function (kraken, express, request, bdd) {\nFrom what I've seen, it seems that even though we load kraken-js with intern/dojo/node so it supports commonJS modules, it is showing \"define\" as available when require'ing krakenjs dependent modules, for which some have if (typeof define !== 'undefined' && define.amd) { which basically mixes behaviors.\n. I see that intern does hide \"define\" for the right reason, but somehow, when doing through internal require calls on the dependencies, it is having the \"define\" function available making it think its an AMD loader, when it should actually be a Node/CommonJS loader.\n// Some modules attempt to detect an AMD loader by looking for global AMD `define`. This causes issues\n// when other CommonJS modules attempt to load them via the standard Node.js `require`, so hide it\n// during the load\n. This is an issue with how intern loads node/commonJS modules and the async library.\nWe load kraken in the intern test by doing:\nvar kraken = require('intern/dojo/node!kraken-js');\nThis is loading multiple dependencies including the v0.2 of the \"async\" module (caolan/async)\nThe async module does \nif (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // Node.js\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\nAnd it seems \"define\" exists in this context,  even though we told Intern to load kraken as a common js module. Hence require(async) becomes {} when called, since it doesn't expose the module.exports given \"define\" exists.\nOptions here:\n- Why does intern allow define to exist for loading dependencies of a module loaded with dojo/node\n- Dont use v0.2 of async for modules that will be tested with Intern (newest version of async first check for module.exports rather than checking for \"define\" first.\n  ** 0.2 is broadly use so it limits the use of intern\n. Yes that seems to be the case, I will submit a request for kraken to update the version of the async library for the newest one that doesn't check for AMD first.\nThanks for the help\n. ",
    "samplesizeofone": "Oh, I didn't realize this.timeout was the same as Test.timeout, though now that you point it out, it is abundantly clear :-)\nI'll go ahead and pivot my request to be for a built-in, global setting in addition to the ability to set the timeout per-test. If a global setting doesn't make sense, feel free to close this ticket and I'll work at the per test level and/or see about setting Test.prototype.timeout somewhere reasonable.\nThanks!\n. ",
    "abelmokadem": "@csnover hehe, can happen. I'm just glad I can use this amazing tool for work! When I have extra time I would like to work on some features for intern.\n. ",
    "MartinDoyleUK": "Thank you so much for this ... I hadn't even considered that Grunt was hijacking my output. Your patience and help is very gratefully welcomed!\n. Will close this PR and push a new one up using a \"proper\" email address to commit from, so I can sign the CLA!\n. Also, this might be a related Node.JS bug? https://github.com/nodejs/node-v0.x-archive/issues/8329\n. Closing and re-opening to force CI re-run\n. @jason0x43 Might you be able to review and possibly merge this, please?\n. The only problem with that is working out how to handle the conditional piping of the stdout/stderr from the child-process. Do you have any suggestions?\n. There are just two changes in the PR. One is this rawIO option being added to the child process, but the other is to conditionally enable piping of output from the child process. I'm not entirely sure how to handle the latter, if we just let them pass through the raw stdio option? Should we analyse the contents of the option they pass through? That's slightly complicated by the different ways in which you can pass through the options ...\n. Roger that. Will try and make those adjustments soon and push an update.\n. Sorry. Been moved to a new project at work, and not had time to look at this again. I'll try to get to it when I'm able.\n. Just to clarify, @rodneyrehm, are you commenting on how to fix the problem in my codebase, or in the Intern/Leadfoot codebase? I'm assuming the latter?\n. Thank you. I'm not sure that's really feasible though. I'll roll back and freeze our Intern version on 3.1.1 until this is fixed.\n. @jason0x43, I know you're very busy, but might you have a moment to suggest how long it'll be until you can have a look at this? Is it likely to be days or weeks?\n. Thank you very much, @jason0x43 :)\n. ",
    "nwhite89": "@dylans yeah I did come across both of them however, the soultions mean you have to write the screenshot for every test whereas really it would be better to add it to afterEach for the registered suite, or even better being able to have something in the overall intern configuration\n. So I have done this @RoystonS you may be interested, this needs doing in every place you set up a suite but is much more desirable than writing the code for every test.\njs\nvar counter = -1,\n    suite = {\n        beforeEach: function () {\n            counter++;\n        },\n        afterEach: function () {\n            var currentTest = this.tests[counter];\n            if (!currentTest.error) {\n                return;\n            }\n            this.remote\n                .takeScreenshot().then(function (buffer) {\n                    if (!fs.existsSync(path)) {\n                        fs.mkdirSync(path);\n                    }\n                    fs.writeFileSync('/tmp/' + currentTest.name + '.png', buffer);\n                });\n        }\n    };\n. I see @dylans, would you see this as a top configuration of intern passing the location you wish to write the screenshots? because I could try look at it at some point to do a PR into intern. \n. @dylans ok cool sounds good to me I'll try take a look at it next week :+1: \n. In all honesty I hadn't gotten around trying to but I have done now. . ",
    "jesucarr": "No it's not resolved, I just run into it. I had to downgrade to node v0.10 to be able to run the test. It looks like this fix has been added to milestone 3.0, although should be a fix to the current version too...\n. ",
    "albell": "Yeah, I've been using it. :smile: It just would be nice to have the option to go a bit more granular, dialing in between \"show everything\" and \"just the failures\" when the failure pattern isn't totally clear. It works well, but the option to inspect specific suites would be nice convenience, especially in large suites with multiple subsuites and sub-sub-suites etc.\n. ",
    "ajaswa": "I've put together an example of how I got automated accessibility testing working inside a test suite. It's not pretty and I'm working on abstracting it out into a helper and to use other things in Intern but it seems to work for now. It uses Deque Labs aXe core and Google Chrome Accessibility Developer Tools.\nhttps://github.com/ajaswa/a11y-intern-example\nI hope it helps someone.\n. ",
    "alekstorm": "Well, that definitely solves my problem. Thanks!\n. Hey, I'm not too enthusiastic either. But it solves the problem, and IMO is no worse than before.\n. ",
    "andyearnshaw": "Yeah, after some more investigation I realised just before I left for home\nthat the issue was in dojo/request, which does complicate things\nsomewhat.  I was able to work around the issue in the meantime by using\nsinon's clever built-in filters and applying the fake requests only to\nrequest URLs that started with a term that would likely be unique to my\ntests.\nWRT DOM prototypes, Internet Explorer 8 exposed Element and IE 9 exposed\nHTMLElement, and AFAIK Chrome has exposed them since version 1.  My\nreasons for using it were to test a function that adds scripts to the\ndocument, checking that the script is added with the correct src and other\nattributes.  I also attempted to stub the method directly on the <head>\nelement, but I've hit what looks like a bug in Phantom (works fine in\nChrome) where the stub doesn't get restored properly and it affects another\ntest later down the line.\nOn Fri, May 8, 2015 at 7:59 PM, Colin Snover notifications@github.com\nwrote:\n\nWell, this is\u2026 awkward.\nThe runner sends data back to the client using dojo/request, which is an\nabstraction. It doesn\u2019t use an XMLHttpRequest object directly, so we can\u2019t\njust retain a reference. I guess we\u2019ll need to update dojo/request\nupstream to accept being passed an XMLHttpRequest constructor, instead of\ngetting it from the global scope, and then have the reporter retain a copy\nof that constructor and pass it explicitly for every request. It\u2019s doable,\nbut I\u2019m not sure what the timeline would be to actually fix it without a\nsupport plan.\nAs far as the mutation of DOM prototypes goes\u2026 what are you testing that\ndoes such a thing? I\u2019m happy to implement more defensiveness in some of the\ncode but I don\u2018t want to introduce complexity for theoretical problems.\n(Also the DOM prototypes thing, until pretty recently, wasn\u2019t a thing you\ncould even really do, since old IE and Chrome didn\u2019t conform to WebIDL.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/390#issuecomment-100328574.\n. As mentioned in #626, https://github.com/andyearnshaw/intern-systemjs-loader provides an interim solution for using SystemJS, which allows running tests without a precompile step if there's a SystemJS plugin for doing it.\n. I've been experimenting along these lines over the past week or so and here's my take on things so far:\n- Intern doesn't support any \"new-age\" loaders that can load ES6 modules (see #615)\n- The version of Istanbul that intern depends on cannot currently instrument ES6 syntax (I believe the 1.0.0-alpha releases solve these problems).\n- You can write a simple AMD plugin to load a single ES6 module that has no imports by using https://github.com/Daniel15/babel-standalone. Once you get into the realms of importing other files it gets complicated fast as you need babel plugins that need packaging before they can be used.\n\nI think the best solution would be to implement #615 and be as agnostic as possible for module loading. That way, people could write their tests however they like.  A short-term fix might be to write a simple wrapper for SystemJS that works with Intern by implementing the AMD APIs.\n. @dylans thanks for the update, it's good to know some effort has been made towards this.  I've been playing around with writing a wrapper for SystemJS today and it's anything but trivial.  I've jumped through several hoops writing the wrapper script and configuring the loader, but it doesn't support AMD loader plugins and SystemJS plugins are very different, it seems, so it breaks as soon as it tries to do anything with dojo/has!....\nDo you have a timeframe for this next release? I'm just wondering if I should abandon my current efforts and wait, or if I should persevere.\n. @stsvilik unfortunately, babel-core isn't appropriate as the node require isn't available in browsers.  babel-standalone works, however.\n@dylans a collaboration sounds great.  I think I may have hit a dead end with dojo/has: after working my way through the errors, it appears that the module's main function is never called by SystemJS.  It does seem to work if I manually require the module via the console, though.  I'll keep investigating.\n. @kitsonk they have a similar plugin architecture that return hooks to different stages of module loading.  AMD has normalize and load, SystemJS has finer-grained control with locate, fetch, translate and instantiate.  These hooks, along with normalize, can be applied at the loader level to apply to all modules, and this is the approach I was investigating yesterday.\nI'm not fully sure if SystemJS does not support AMD plugins, as the problems I've encountered don't seem to produce any errors that I would expect to encounter from a plugin being loaded as a module.  In fact, once I set the undocumented pluginFirst configuration option with my WIP wrapper, there are no errors at all and it seems like it's more likely a bug in the loader that's preventing me from progressing.  Unfortunately, I haven't had time to drill down into the source code to isolate it yet.\nThere's already a text loader plugin for SystemJS, dojo/node and dojo/has probably wouldn't be too difficult to replicate if I can get that far.\n. https://github.com/andyearnshaw/intern-systemjs-loader\nI made a few breakthroughs today and now I've got SystemJS working as Intern's loader for browser environments, as well as loading babel-transpiled source files.  The next logical step is to get the runner environment working, which shouldn't be too difficult.\nHopefully, this will give some insight on how to add support for SystemJS in a future version of Intern, as well as provide an interim solution for people who want to use SystemJS with Intern 3.  Please test it out and give feedback.\n. OK, got intern-client working now, not fully tested all the different reporters and stuff, though.\n. I had a go at fixing this by adding a sessionData prop to the object returned by util.  However, it seems that, when using a custom loader, the require used by PreExecutor is different to the require used by WebDriver.  I guess this is because PreExecutor swaps out the loaders but doesn't start everything all over again, keeping its original modules.\nThis isn't a problem I can solve in intern-systemjs-loader as I don't have access to the original require cache (it's set to undefined before my script runs).  \nOne possible alternative is to allow fatal errors to be reported without a sequence id.  Since they're fatal, it doesn't seem like the sequence is important here.\n. Hmm... it looks like https://github.com/theintern/intern/pull/561 already tries to deal with this by ignoring sequence for fatal errors (as per my last comment), but that PR has been awaiting review for a disturbingly long time.  If that's not an acceptable solution, perhaps having a different sequence set each for PreExecutor errors and WebDriver messages would be better?\nIs it worth me submitting a separate PR without all the other changes in #561 to get this through?\n. Awesome, thanks!\n. ",
    "foooocus": "Looking for the same answer, is there a way to run parallel tests on same platform?\n. ",
    "DaveStein": "@sholladay I am confused about the default port of 9000. If I try to run two instances, the second instant blows up cause 9000 is in use. And in my very noob-like guessing, I changed proxy and proxyUrl to use 9001 instead of 9000 but then that finds nothing.\n. Ha in writing to SO I realize I made a typo! One extra zero.\n```\n!/bin/bash\n!/usr/bin/env node\n./node_modules/.bin/intern-runner config=tests/intern \\\nfunctionalSuites=tests/functional/sample1 \\\nproxyPort=9001 \\\nproxyUrl=http://localhost:9001/ &\n./node_modules/.bin/intern-runner config=tests/intern \\\nfunctionalSuites=tests/functional/sample2 \\\nproxyPort=9002 \\\nproxyUrl=http://localhost:9002/ &\n```\nThat hack worked. Mind you I never write bash so I gotta go look up how to make an array of suites to just iterate rather than copy paste over and over ;)\n. ```\n!/bin/bash\n!/usr/bin/env node\ndeclare -a suites=( \\\n  \"example1\" \\\n  \"example2\" \\\n)\narraylength=${#suites[@]};\nmkdir ./tests/functional/screenshots/$datetime/;\nfor (( i=0; i<${arraylength}; i++ ));\ndo\n  p=$(expr $i + 1);\n  ./node_modules/.bin/intern-runner config=tests/intern \\\n  functionalSuites=tests/functional/${suites[$i]} \\\n  proxyPort=900$p \\\n  proxyUrl=http://localhost:900$p/ &\ndone;\n```\n. What does that change exactly? As you can tell I did a bunch of copy pasting from the internet :)\nIf I made a PR, do you think that's just bash-example? lol not sure where i'd put it cause I'm not using anything whatsoever except intern and this script - loading up like google in my test for example\n. Expect PR in a couple days or so :) @sholladay apparently using selenium with java, you can even run tests from same suite in parallel. this gets me halfway there\n. ",
    "szydan": "@DaveStein Is is necessary to set both \nproxyPort and proxyUrl or it is enough to set only proxyPort \n. ",
    "dmitriz": "I even wrote answers about wrong permissions it on SO, e.g. this:\nhttp://stackoverflow.com/a/29787931/1614973\nHowever, in this case particular case, it doesn't look like permission problem:\nnpm ERR! Error: EACCES, symlink '../intern/bin/intern-client.js'\nWhy is it trying to up in the directory?\nIf there is no directory like that, it would miss it and throw the error that has nothing to do with permissions.\nMy permissions have worked with all other packages after I have set the right ownership as in my link above. \nI would really like to understand what is going on here, no satisfactory answers were found on SO, and it looks to me specific to this package here.\n. ",
    "cezarykluczynski": "I've been using Intern here: https://github.com/cezarykluczynski/qunit-desktop-notifications Now there's Intern 2.2.2 in package.json, cause I downgraded, but switching back to master, installing (npm install && bower install) and running grunt test, assuming selenium-standalone is running locally, will cause the freeze.\n. With the latest master and Chrome 43, this issue is gone (it was indeed present in Chrome 42). Thanks!\n. @csnover Thanks for reviewing! I hope to fix the raised issues in a two or three days.\nThanks for pointing out the splice thing. I don't know what i was thinking, modyfing array in the middle of iteration...\n. @csnover I think that's it. I'm afraid I won't be able to do sending expanded of globs to browser. There just too much code to go through. I also found and fixed one error in tests. I've tried to write some unit tests for PreExecutor, but it was hard to separate PreExecutor from the rest of code (util.getModule in getConfig was what got me).\n405 is another thing I found.\n. @csnover I'll pass. Please take over.\n. ",
    "stimms": "I made a first pass at implementing this at https://github.com/stimms/gulp-intern but it is very rough\n. So for the scenario where I'm building javascript using TDD practices what's the approach to take when using intern? I would really like to hook it into my gulp watch task and it would be nice if it didn't run my whole test suite but just a subset, perhaps just those in that module. For my code there is a pretty strong relationship between directory structure and module structure. \n. The configuration file is json based so there doesn't seem to be a huge technical barrier to prevent writing a configuration file and passing it in or allowing intern to read overrides from the command line/environment. Managing the overrides seems like an ideal use of gulp\n. So your objection is that philosophically we're not following the proper conventions for how streams work in gulp?\n. ",
    "brianmhunt": "I would agree that a plugin is unnecessary. That said, it is probably worthwhile for the project to note in the docs the canonical way (or a few options) to get Intern running when using gulp as the task runner.\n. @morenoh149 By convention the source should be at https://github.com/theintern/intern/tree/gh-pages\n. It would be quite good if rollup.js and Bubl\u00e9 were supported as well.\n. ",
    "morenoh149": "Indeed. I see the docs mention Grunt and I immediately wonder how to achieve similar functionality with an existing project using Gulp. If a plugin is unnecessary then documentation for adding Intern to a Gulp-using project should be added. Something like a watch task that reruns the test suite on the changed files. I'd be happy to submit a PR if that is the consensus.\nCould I be pointed to the source for https://theintern.github.io/intern/ page?\n. ",
    "arschmitz": "I don't think we actually need this. All I think we really need as far as configuration via the url is to be able to set the jQuery version we are testing against. \n. ",
    "airtonix": "Any way I can enable fail fast but not have my terminal spammed with all the skipped tests?\nNVM, i made my own reporter: \n```js\n// ./test/e2e/support/FailFastReporter.js\n/ global define /\ndefine([\n    'intern/lib/reporters/Runner',\n], function (Runner) {\nfunction extend (target, source) {\n    target.prototype = Object.create(source.prototype);\n    target.prototype.constructor = target;\n    return source.prototype;\n}\n\nvar FailFastReporter = function (config) {\n    Runner.call(this, config);\n};\n\nvar parent = extend(FailFastReporter, Runner);\n\nFailFastReporter.prototype.testSkip = function () {};\n\nreturn FailFastReporter;\n\n});\n```. ",
    "marklague": "I updated node to v0.12.5 and re-run the install successfully.\nNow, I remember that I downgraded the node version because of a conflict while installing Karma. I completely forgot about that.\nThanks to all.\n. ",
    "arvindh5686": "Thanks! I was able to solve the problem with deferred promises\n. ",
    "CRogers": "(I'm using intern 2.2.2)\n. I tried this on 3.0.0-rc.2 and it worked. It is very borked though and 2.2.2.\n. ",
    "snorripall": "That solved it, thanks :) !\n. ",
    "krishollenbeck": "@csnover @kitsonk , Yes this is where my misunderstanding came from as well. At first I was trying to do something like confg=my/path/tests/intern, but then I had read this.\n\nThe config argument is a module ID, not a file path. Providing a file path may cause confusing or unpredictable results.\n\nSo I knew that wouldn't work. But a bit further down in the documentation I read this.. \n\nYou can also specify any valid configuration option as an argument on the command-line.\n\nWhich lead me to believe I could use the basePath argument to set the base path via the command line. And yes I assumed that confg=tests/intern was relative to the basePath configuration. \nAnyways, my opinion on this as an enhancement is that this would be nice for project structure flexibility. For example, in our case we are running grunt and some other node modules from outside of our application (or technically a parallel directory from within). And ideally we would like to keep the intern node_module in the same location as our other node_modules. Versus having node_module directories all over the place.\nhttps://theintern.github.io/intern/#test-runner\n. I just ended up installing intern globally for now. This wasn't ideal as now we have to make sure to install intern global on our build machines. But I just add something into our build to install intern global for now. Anyways, I do think this would be a nice option to have in the future.\nMy solution here:\nhttp://stackoverflow.com/questions/31711594/internjs-how-to-set-base-path-on-command-line/31735386#31735386\n. ",
    "jsf-clabot": " All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.4 out of 6 committers have signed the CLA.:white_check_mark: LingSpb:white_check_mark: kitsonk:white_check_mark: croes:white_check_mark: bryanforbes:x: jason0x43:x: rodneyrehm.  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.vrozaev seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA.. ",
    "duongphuhiep": "Thanks for the explanation, so is it potentially a bug of inter / or we can simply say that stealjs is not compatible with intern, and we would not use it here?\n. ",
    "matthewp": "\nWhile steal is able to load AMD modules, it is not an AMD loader (it provides a different API). Intern needs an AMD loader, so steal isn't going to work.\n\nWhat APIs are you referring to?  The loader plugin API is different from RequireJS, but RequireJS compatibility and AMD-compatibility are not the same thing. \n. I'm referring to this comment:\n\nWhile steal is able to load AMD modules, it is not an AMD loader (it provides a different API).\n\nWhat is the API that is different?\nIf Steal is missing an AMD api i want to know about it and fix it.\n. the require([], callback) is supported in modules but looks like it's not in a script tag, I can't remember why this is.  Is this how Intern loads stuff?  Should be a fixable bug.  Let me know if there are other issues.\n. ",
    "dandv": "Sure. Unfortunately the problem persists. I've made sure that git's autocrlf was false, just in case.\n\n. ",
    "geekdave": "Just really liked your comparison chart and was interested in borrowing the\nstyling to use on our own site. So many times in open source it's difficult\nto articulate the commonalities and differences between two similar\nprojects so stuff like this really helps!\nOn Thu, Aug 6, 2015 at 7:41 PM Colin Snover notifications@github.com\nwrote:\n\nClosed #462 https://github.com/theintern/intern/issues/462.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/462#event-375911314.\n. \n",
    "rodneyrehm": "For OSS all tests are public. I seem to be hitting two issues:\n- Test did not see a new command for 60 seconds. Timing out.\n- Test exceeded maximum duration after 1800 seconds\nIn both cases all tests pass when opening node_modules/intern/client.html?config=test/browser in the respective browser. The same is true for the tests IE10 and Firefox dev - they're all green when run via the client.html, but fail in the Intern/SauceLabs stack. I have no idea where to begin debugging this.\n. I was still running 3.0.0-rc.3, let me update to 3.0.0 and try again.\n. Same issue with 3.0.0 - will wait for #466 to land as suggested in IRC.\n. The process exits on its own. But I'm getting the following errors and no success/failure output, only errors along the lines of:\n```\nSUITE ERROR\nError: Cannot find the Node.js require\n@http://localhost:9000/__intern/node_modules/dojo/node.js:14:1\n  at execModule  <__intern/node_modules/dojo/loader.js:332:54>\n  at checkComplete/<  <__intern/node_modules/dojo/loader.js:374:21>\n  at guardCheckComplete  <__intern/node_modules/dojo/loader.js:361:9>\n  at checkComplete  <__intern/node_modules/dojo/loader.js:366:1>\n  at injectModule/onLoadCallback  <__intern/node_modules/dojo/loader.js:428:17>\n  at injectUrl/handler  <__intern/node_modules/dojo/loader.js:514:65>\n0/0 tests failed\nSUITE ERROR\nError: Error: Cannot find the Node.js require at http://localhost:9000/__intern/node_modules/dojo/node.js:14:59\n  at <__intern/lib/executors/PreExecutor.js:294:32>\n  at dispatcher  <__intern/node_modules/dojo/aspect.js:66:47>\n0/0 tests failed\nError: Cannot find the Node.js require\n  at <__intern/node_modules/dojo/node.js:14:15>\n  at execModule  <__intern/node_modules/dojo/loader.js:332:62>\n  at <__intern/node_modules/dojo/loader.js:374:21>\n  at guardCheckComplete  <__intern/node_modules/dojo/loader.js:361:9>\n  at checkComplete  <__intern/node_modules/dojo/loader.js:366:32>\n  at onLoadCallback  <__intern/node_modules/dojo/loader.js:428:17>\n  at HTMLScriptElement.handler  <__intern/node_modules/dojo/loader.js:514:65>\nSUITE ERROR\nUnknownError: [POST http://(redacted)@localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"browserName\":\"firefox\",\"version\":\"dev\",\"platform\":\"Linux\",\"tunnel-identifier\":\"1441177503890\",\"name\":\"test/sauce\",\"idle-timeout\":60}}] The Sauce VMs failed to start the browser or device\nFor more info, please check https://docs.saucelabs.com/reference/troubleshooting-common-error-messages\n  at Server.createSession  \n  at \n  at retry  \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \n0/0 tests failed\nError: Run failed due to one or more suite errors\n  at emitLocalCoverage  \n  at finishSuite  \n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \n```\nI'm not sure what's going on with dojo and the missing console reporter - as far as I can tell it's configured properly in sauce.js and intern.base-config.js. The dojo thing is particularly weird considering there are successful tests on sauce.\n. > I don\u2019t see anything specifically about Dojo \nThe fix you provided to #491 solved the node require issue for me too. Waiting for 3.0.3 to properly retest\n. I've retested with 3.0.3 and it now seems to be running for the most part. The process still hangs at the end and the remaining VMs are not closed.\nI'm getting the following error (repeatedly):\nSUITE ERROR\nUnknownError: [POST http://(redacted)@localhost:4444/wd/hub/session/2ee6a2bad2754287a342909b4b2bbf99/url / {\"url\":\"http://localhost:9000/__intern/client.html?config=test%2Fsauce&basePath=%2F&initialBaseUrl=%2F&reporters=%7B%22id%22%3A%22WebDriver%22%7D&rootSuiteName=firefox%20dev%20on%20OS%20X%2010.10%20-%20unit%20tests&sessionId=2ee6a2bad2754287a342909b4b2bbf99\"}] Due to a previous error, this job has already finished. You can learn more at https://saucelabs.com/jobs/2ee6a2bad2754287a342909b4b2bbf99\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:59:30>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:523:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:482:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\n  at <node_modules/intern/node_modules/dojo/nextTick.ts:44:3>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at ClientSuite.lang.mixin.run  <node_modules/intern/lib/ClientSuite.js:149:6>\n  at runWithCatch  <node_modules/intern/lib/Suite.js:314:21>\n  at next  <node_modules/intern/lib/Suite.js:322:18>\n  at <node_modules/intern/lib/Suite.js:345:6>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at runTests  <node_modules/intern/lib/Suite.js:278:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n0/0 tests failed\nmay be connected to bad selenium version (according to SauceLabs docs) - not that I'm specifying any version at all (sauce config, base config).\n\nAnd this error exactly once (in one of the Safaris):\nSUITE ERROR\nError: TypeError: undefined is not a function (evaluating 'obj.GetPluginStatus()') at undefined:1:88\n  at <__intern/lib/executors/PreExecutor.js:306:32>\n  at dispatcher  <__intern/node_modules/dojo/aspect.js:66:47>\n268/268 tests failed\n. Thanks for the hint! I removed Firefox Dev and reduced the problem to the second error (the Safari one) - the process still hangs until I ^C it.\n. For the opionen part: I'm not sure I'd go as far as saying the OP is using pushState wrong. At best they're not using it as originally intended.\nDisregarding the reasons for doing this, implementing #547 should provide the API to configure the proxy to allow this use-case without having to spin up a secondary server.\n. strange indeed. deleted intern and installed it again with node 4.2.2 being active - and it works. I'm pretty sure that's the same thing I did to verify that the above stack trace wasn't caused by something I screwed up\u2026\n. while we're talking about the CLI, the following feature would help:\na way to simply have the intern proxy started and my browser open client.html with the given config. right now you have to run a separate HTTP server (e.g. http-server) to get access to your tests in a browser. \n. > So, you're just looking for an easy way to kick off the proxy and open a persistent browser session? \nwell, if you use open you're not really dealing with a browser, more telling the OS to open something in some application. So if I already have Chrome open and run open(\"http://www.google.com\", \"Google Chrome\"); it will simply open that URL in a new tab in the foreground window.\n\nBecause intern-runner already runs unit tests in a browser (or browsers) from the command line...\n\nThe difference is that intern-runner talks to a WebDriver endpoint. As far as I know WebDriver and DevTools don't work well together. intern-runner is great for running the tests - as that's what it's made for - but not so much for debugging tests.\n. > Hi, happy to see a great accessibility project like ally.js using Intern!\nconsider the compliment returned ;)\n\nI\u2019d like to figure out a better way of handling this but I am not sure what would be ideal\n\nIf a test fails because of CancelTimeout simply re-run the the test with doubled timeout (after a short delay to allow the VM to breathe). Allow specifying the times to retry-while-increasing the timeout in the async-call: this.async(timeout, {retry: 3}), with {retry: false} disabling the feature. In case a retry succeeded, print a warning so the developer has a chance to increase the initial timeout. (At least that was the naive approach I intended to take with DalekJS, back when we still thought we'd go through with Skaro).\nI'll try increasing the timeouts by 10x and see what happens. Thanks for the hint and thanks for all your efforts on Intern, much appreciated!\n. I'll take 3 successful builds in a row means increasing the timeouts \"fixed\" it. :dancers: \nthx!\n. thx for the pointer! I'll try to have a look at it soon :)\n. Are the leadfoot tests supposed to pass? I see several failures (without having touched anything):\n```\nFAIL: internet explorer 10 on WIN8 - leadfoot/helpers/pollUntil - early timeout\nFAIL: internet explorer 10 on WIN8 - Server - error handling\nFAIL: internet explorer 10 on WIN8 - Server - error output security\nFAIL: internet explorer 10 on WIN8 - Server - #getSessions\nFAIL: internet explorer 11 on WIN8 - Server - error handling\nFAIL: internet explorer 11 on WIN8 - Server - error output security\nFAIL: internet explorer 11 on WIN8 - Server - #getSessions\nFAIL: internet explorer 9 on WINDOWS - leadfoot/helpers/pollUntil - early timeout\nFAIL: internet explorer 9 on WINDOWS - Server - error handling\nFAIL: internet explorer 9 on WINDOWS - Server - error output security\nFAIL: internet explorer 9 on WINDOWS - Server - #getSessions\nFAIL: internet explorer 9 on WINDOWS - Session - frame switching (#switchToFrame, #switchToParentFrame)\nFAIL: internet explorer 9 on WINDOWS - Element - #type -> file upload\nFAIL: firefox 33 on WINDOWS - Server - error handling\nFAIL: firefox 33 on WINDOWS - Server - error output security\nFAIL: firefox 33 on WINDOWS - Server - #getSessions\nFAIL: firefox 33 on WINDOWS - Command - #moveMouseTo usesElement\nFAIL: firefox 33 on MAC - Server - error handling\nFAIL: firefox 33 on MAC - Server - error output security\nFAIL: firefox 33 on MAC - Server - #getSessions\nFAIL: chrome 38 on WINDOWS - Server - error handling\nFAIL: chrome 38 on WINDOWS - Server - error output security\nFAIL: chrome 38 on WINDOWS - Server - #getSessions\nFAIL: chrome 38 on WINDOWS - Session - geolocation (#getGeolocation, #setGeolocation)\nFAIL: chrome 38 on MAC - Server - error handling\nFAIL: chrome 38 on MAC - Server - error output security\nFAIL: chrome 38 on MAC - Server - #getSessions\nFAIL: chrome 38 on MAC - Session - window sizing (#getWindowSize, #setWindowSize)\nFAIL: chrome 38 on MAC - Session - geolocation (#getGeolocation, #setGeolocation)\nFAIL: safari 8 on MAC - Server - error handling\nFAIL: safari 8 on MAC - Server - error output security\nFAIL: safari 8 on MAC - Server - #getSessions\nFAIL: safari 8 on MAC - Session - frame switching (#switchToFrame, #switchToParentFrame)\nFAIL: safari 8 on MAC - Element - #type -> file upload\n```\nIn a second run I've added Microsoft Edge to the environment, for which I'm getting the following errors:\n```\nFAIL: Edge12 on WIN - leadfoot/helpers/pollUntil - basic test\nFAIL: Edge12 on WIN - leadfoot/helpers/pollUntil - without args\nFAIL: Edge12 on WIN - leadfoot/helpers/pollUntil - early timeout\nFAIL: Edge12 on WIN - leadfoot/helpers/pollUntil - iteration check\nFAIL: Edge12 on WIN - Server - error handling\nFAIL: Edge12 on WIN - Server - error output security\nFAIL: Edge12 on WIN - Server - #getSessions\nFAIL: Edge12 on WIN - Server - #getSessionCapabilities\na whole lot of\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session//url / {\"url\":\"about:blank\"}] Session not started or terminated\nFAIL: Edge12 on WIN - leadfoot/compat - #waitForElement\nFAIL: Edge12 on WIN - leadfoot/compat - #waitForElement context\nFAIL: Edge12 on WIN - leadfoot/compat - #waitForVisible\nFAIL: Edge12 on WIN - leadfoot/compat - #text\n```\nThe VM instance on BrowserStack presents the same as in the original report. I'm not sure I've acquired any new insights\u2026\n. > The error handling and getSessions failures are because BrowserStack doesn\u2019t respond to those calls correctly, even though Selenium itself does.\nIf incorrect response means \"correct data, wrong format\", the ingestion of the response could handle that, right? Is that something you've considered? Or am I on the wrong track an it's technically not possible/worthwhile?\n\n[\u2026]  but you\u2019ll need to test against a local VM to know for sure\n\nAny pointers on how to make that happen easily? Can I just fire up selenium-standalone in the VM, make the tests use NullTunnel and that's it? Happy to do the legwork, once I've figured out how to actually run the tests\u2026\n. The last time I tried this was with Edge 12. Currently you get Edge13 on BrowserStack. I just updated to Intern's master (9092e46) and tried running the ally.js suite on BrowserStack's Edge13 and got the following errors in the CLI (and the raw browserstack log):\nSuite Edge13 on WIN - unit tests FAILED\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session/<session>/url / {\"url\":\"http://localhost:9000/__intern/client.html?config=test%2Fbrowserstack&basePath=%2F&initialBaseUrl=%2F&reporters=%7B%22id%22%3A%22WebDriver%22%7D&rootSuiteName=Edge13%20on%20WIN%20-%20unit%20tests&sessionId=<session>\"}] Unable to communicate to node\n  at runRequest  <node_modules/intern/node_modules/leadfoot/Session.js:88:40>\n  at <node_modules/intern/node_modules/leadfoot/Session.js:109:39>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:575:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:478:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at ClientSuite.lang.mixin.run  <node_modules/intern/lib/ClientSuite.js:149:6>\n  at runWithCatch  <node_modules/intern/lib/Suite.js:314:21>\n  at next  <node_modules/intern/lib/Suite.js:322:18>\n  at <node_modules/intern/lib/Suite.js:345:6>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at runTests  <node_modules/intern/lib/Suite.js:278:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\nSuite Edge13 on WIN - intern/events FAILED\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session/<session>/url / {\"url\":\"http://localhost:9000/test/pages/intern.events.test.html\"}] Session not started or terminated\n  at runRequest  <node_modules/intern/node_modules/leadfoot/Session.js:88:40>\n  at <node_modules/intern/node_modules/leadfoot/Session.js:109:39>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:575:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:482:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at Suite.before  <test/functional/intern.events.test.js:146:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\nSuite Edge13 on WIN - maintain/tab-focus FAILED\nTypeError: callback.call is not a function\n  at runCallback  <node_modules/intern/node_modules/leadfoot/Command.js:526:31>\n  at Command.<anonymous>  <node_modules/intern/node_modules/leadfoot/Command.js:545:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\n  at <node_modules/intern/node_modules/dojo/nextTick.ts:44:3>\n  at doNTCallback0  <node.js:419:9>\n  at process._tickCallback  <node.js:348:13>\n  at Command.then  <node_modules/intern/node_modules/leadfoot/Command.js:542:10>\n  at Suite.before  <test/functional/maintain.tab-focus.test.js:45:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\nSuite Edge13 on WIN - fix/pointer-focus-children FAILED\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session/<session>/url / {\"url\":\"http://localhost:9000/test/pages/fix.pointer-focus-children.test.html\"}] Session not started or terminated\n  at runRequest  <node_modules/intern/node_modules/leadfoot/Session.js:88:40>\n  at <node_modules/intern/node_modules/leadfoot/Session.js:109:39>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:575:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:482:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at Suite.before  <test/functional/fix.pointer-focus-children.test.js:58:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\nSuite Edge13 on WIN - fix/pointer-focus-input FAILED\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session/<session>/url / {\"url\":\"http://localhost:9000/test/pages/fix.pointer-focus-input.test.html\"}] Session not started or terminated\n  at runRequest  <node_modules/intern/node_modules/leadfoot/Session.js:88:40>\n  at <node_modules/intern/node_modules/leadfoot/Session.js:109:39>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:575:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:482:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at Suite.before  <test/functional/fix.pointer-focus-input.test.js:62:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\nSuite Edge13 on WIN - fix/pointer-focus-parent FAILED\nUnknownError: [POST http://(redacted)@hub.browserstack.com:4444/wd/hub/session/<session>/url / {\"url\":\"http://localhost:9000/test/pages/fix.pointer-focus-parent.test.html\"}] Session not started or terminated\n  at runRequest  <node_modules/intern/node_modules/leadfoot/Session.js:88:40>\n  at <node_modules/intern/node_modules/leadfoot/Session.js:109:39>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at ProxiedSession._post  <node_modules/intern/node_modules/leadfoot/Session.js:63:10>\n  at ProxiedSession.Session.get  <node_modules/intern/node_modules/leadfoot/Session.js:575:15>\n  at <node_modules/intern/lib/ProxiedSession.js:86:25>\n  at getFinalValue  <node_modules/intern/node_modules/dojo/Promise.ts:462:21>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:482:10>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at Command.target.(anonymous function) [as get]  <node_modules/intern/node_modules/leadfoot/Command.js:610:11>\n  at Suite.before  <test/functional/fix.pointer-focus-parent.test.js:71:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\nSuite Edge13 on WIN - observe/interaction-type FAILED\nTypeError: callback.call is not a function\n  at runCallback  <node_modules/intern/node_modules/leadfoot/Command.js:526:31>\n  at Command.<anonymous>  <node_modules/intern/node_modules/leadfoot/Command.js:545:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\n  at <node_modules/intern/node_modules/dojo/nextTick.ts:44:3>\n  at doNTCallback0  <node.js:419:9>\n  at process._tickCallback  <node.js:348:13>\n  at Command.then  <node_modules/intern/node_modules/leadfoot/Command.js:542:10>\n  at Suite.before  <test/functional/observe.interaction-type.test.js:24:12>\n  at Suite.target.(anonymous function).dispatcher [as setup]  <node_modules/intern/node_modules/dojo/aspect.ts:102:35>\n  at <node_modules/intern/lib/Suite.js:351:33>\n  at new Promise  <node_modules/intern/node_modules/dojo/Promise.ts:411:3>\n  at setup  <node_modules/intern/lib/Suite.js:350:12>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:393:15>\n  at runCallbacks  <node_modules/intern/node_modules/dojo/Promise.ts:11:11>\n  at <node_modules/intern/node_modules/dojo/Promise.ts:317:4>\n  at run  <node_modules/intern/node_modules/dojo/Promise.ts:237:7>\n. @LingSpb I can confirm the tests are now executed in Edge 13 on BrowserStack. Thanks for the ping!\n. Agree about removing stack traces being a bad idea. If your fix already makes the diff show up in the Runner reporter, I guess we can close this. Thank You!\n. I'm experiencing the same problem. The data handed to JSON.parse() is the following string, which produces an object, not an array - hence the .map is not a function error.\njson\n{\n  \"sequence\": 0,\n  \"sessionId\": \"<session-id>\",\n  \"payload\": [\n    \"fatalError\",\n    {\n      \"name\": \"SyntaxError\",\n      \"message\": \"Invalid character\",\n      \"sessionId\": \"<session-id>\"\n    }\n  ]\n}\nI have then replaced this chunk with:\njs\nvar _data = JSON.parse(data);\nvar messages = Array.isArray(_data) ? _data.map(function (messageString) {\n  return JSON.parse(messageString);\n}) : [_data];\nAnd saw the following output (instead of that ungraceful stop):\n```\n\u2023 Created session IE9 on WIN ()\nSuite IE9 on WIN - unit tests FAILED\nSyntaxError: Invalid character\nNo stack or location\n\n\n\nTOTAL: tested 1 platforms, 0/30 tests failed (29 skipped); fatal error occurred\nError: One or more suite errors occurred during testing\n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at doNTCallback0  \n  at process._tickCallback  \n```\n. For the record, in my case the error was thrown in a `beforeEach` callback. I did not dig through that `dojo/aspect` thing to try to fix this, but maybe an uncaught error in `before`, `after`, `beforeEach` and `afterEach` should fail specific tests / suites, rather than _everything_.\n. after rolling back to 75c1472 my tests are running without a hitch again.\n. @jason0x43 looks like 86193c2 introduced this problem. reproducible with IE9 right after session is created, sadly `SyntaxError: Invalid character` is not a very useful message\u2026\n. I'm closing in on the problem.\n\nThe PreExecuter's [`resolveSuites()`](https://github.com/theintern/intern/blob/master/lib/executors/PreExecutor.js#L407) is failing because it is executing `JSON.parse(undefined)`. In IE9 `response.data` is not populated:\n\n``` js\n// request: request \"/node_modules/intern/__resolveSuites__?suites=\n\n// dump of response in Chrome\n{\n  \"data\": \"[\\\"test/unit/alpha\\\",\\\"test/unit/bravo\\\"]\",\n  \"nativeResponse\": {},\n  \"requestOptions\": {\n    \"method\": \"GET\"\n  },\n  \"statusCode\": 200,\n  \"statusText\": \"OK\",\n  \"url\": \"/node_modules/intern/__resolveSuites__?suites=\"\n}\n\n// dump of reponse in IE9\n{\n  \"nativeResponse\": {},\n  \"requestOptions\": {\n    \"method\": \"GET\"\n  },\n  \"statusCode\": 200,\n  \"statusText\": \"OK\",\n  \"url\": \"/node_modules/intern/__resolveSuites__?suites=\"\n}\n```\n\nreplacing this [`} else {`](https://github.com/theintern/intern/blob/master/lib/executors/PreExecutor.js#L406) with `} else if (response.data) {`avoids the catastrophic failure and my tests are run fine in IE9.\n. and here we have the root cause\u2026\n\n`request.data` is empty because [dojo/request/xhr](https://github.com/dojo/dojo2/blob/master/src/request/xhr.ts#L48-L53) only returns `request.response`, but not `request.responseText`. Replacing `response.data = request.response;` with `response.data = request.response || request.responseText;` means IE9 could also make use of the globbed suites\u2026\n. Thank you @jason0x43! I see you fixed the reason for the `JSON.parse()` issue on the sender's end - very nice :)\n. see the upstream-bug dojo/dojo2#19 for the IE9 not able to use suite resolution issue\n. @dylans if I did, I don't remember. I'm not patching utils.js locally, so I assume I don't have this problem anymore\n. It seems that `pressKeys()` is using [`/session/:sessionId/element/:id/value`](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidvalue) instead of [/session/:sessionId/keys](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidkeys). The former doesn't retain modifier state, thus your click does not see the CTRL anymore, because the key has already been released.\n\nThe test for [supportsSessionKeys](https://github.com/theintern/leadfoot/blob/79ca6f48e5a30457d82dfd47eb56235ba3c191f0/Server.js#L1025-L1026) calls [pressKeys()](https://github.com/theintern/leadfoot/blob/79ca6f48e5a30457d82dfd47eb56235ba3c191f0/Session.js#L1311-L1329), which itself relies on `supportsSessionKeys`. By simply reading the code, I'd assume this is an oversight?!\n. The latter. If you want to force the old behavior, you could try overwriting the capability:\n\n``` js\nbdd.it('should force capabilities.supportsSessionKeys', function() {\n  return this.remote\n    .then(function() {\n      this.session.capabilities.supportsSessionKeys = true;\n    })\n    // \u2026\n});\n```\n. Making intern 3.3.0 use [leadfoot 1.6.10](https://github.com/theintern/leadfoot/releases/tag/1.6.10) solves the problem. However I can't find any obvious issue in the [diff to 1.6.11](https://github.com/theintern/leadfoot/compare/1.6.10...1.6.11).\n. is there another way to make travis re-run the tests than pushing useless commits to this branch? without permissions, travis won't show the retry button\u2026 :/\n. thx! great, passing!\n\nCan we land this soonish? What's the planned date for the next release? I'm a bit \"blocked\" on this, unless I skip these tests in IE :/\n. If you already fixed it, this PR isn't necessary anymore\n. thank you!\n.",
    "hjain60": "I added the following :\nfunctionalSuites: [ ]\nHow ever I see the following error and also the test are hung with this error:\n- Error:This webpage is not available\n- ERR_CONNECTION_REFUSED\nThe URL on the browser is :\nhttp://xxx:9000/__intern/client.html?config=tests%2Funit-client-config-grid&reporters=webdriver&suites=tests%2Funit%2Fapp%2Fapplication&suites=tests%2Funit%2Fapp%2Fcommon%2FcommonUtil&suites=tests%2Funit%2Fcomponents%2Fnode-detail-general%2Fcontroller&suites=tests%2Funit%2Fcomponents%2Fnode-detail-general%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items-rules%2Fcontroller&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items-rules%2Fviews%2Fcondition&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items-rules%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items-rules%2Fviews%2Frule&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items%2Fcontroller&suites=tests%2Funit%2Fcomponents%2Fnode-detail-items%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-detail%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-layout%2Fcontroller&suites=tests%2Funit%2Fcomponents%2Fnode-layout%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-master%2Fcontroller&suites=tests%2Funit%2Fcomponents%2Fnode-master%2Fviews%2Findex&suites=tests%2Funit%2Fcomponents%2Fnode-search%2Fviews%2Findex&suites=tests%2Funit%2Fmodels%2Fnode%2Fmodel&baseUrl=%2F&sessionId=9e1d6fc6-2bd1-411f-bf3c-15fbd7a1b7b2\n. ",
    "LingSpb": "I face the quite same problem. The test just stopped after running several testcases, sometimes after 100, sometimes 200 or 300.\nI use intern 3.0.5 + Windows Server 2012R2 + Chrome, Firefox (maxConcurrency = 1)\nError message as following\n(Intern 3.0.0)\n\n[16:20:59]Error: One or more suite errors occurred during testing\n[16:20:59]  at <..\\node_modules\\intern\\lib\\executors\\Executor.js:301:13>\n[16:20:59]  at <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n[16:20:59]  at runCallbacks  <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n[16:20:59]  at <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:317:4>\n[16:20:59]  at run  <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:237:7>\n[16:20:59]  at <..\\node_modules\\intern\\node_modules\\dojo\\nextTick.ts:44:3>\n[16:20:59]  at process._tickCallback  node.js:355:11\n\n(3.0.5)\n\n[14:50:28]Error: Run failed due to one or more suite errors\n[14:50:28]  at emitLocalCoverage  <..\\node_modules\\intern\\lib\\executors\\Executor.js:351:18>\n[14:50:28]  at finishSuite  <..\\node_modules\\intern\\lib\\executors\\Executor.js:368:15>\n[14:50:28]  at <..\\node_modules\\intern\\lib\\executors\\Executor.js:376:8>\n[14:50:28]  at <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:393:15>\n[14:50:28]  at runCallbacks  <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:11:11>\n[14:50:28]  at <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:317:4>\n[14:50:28]  at run  <..\\node_modules\\intern\\node_modules\\dojo\\Promise.ts:237:7>\n[14:50:28]  at <..\\node_modules\\intern\\node_modules\\dojo\\nextTick.ts:44:3>\n[14:50:28]  at process._tickCallback  node.js:355:11\n. Sorry for the late reply. For the error, I use TeamCity reporter.\n. I just did it. Could you check again? Thanks.\n. @rodneyrehm The error you got (\"Unable to communicate to node\"), I guess on March 2nd, was BrowserStack error. I got the same error that day, and later they confirmed that it was their fault and they have fixed it. Maybe you can try to run your tests again?\n. This issue is quite obvious, I wonder why no one does anything, like, at least marking it as a bug or saying that we will not support? \n. Thanks for the response. I just wanted to know if we consider it as a bug, so that I will know whether I should spend sometime to investigate this issue on TeamCity :)\n. I'm fine with any of: \n- (a) skip all the tests in the suite and mark them as skipped\n- (b) indicate the suite as failure\n- or (c) keep as it is now - consider all the tests as failed when the suite fails\n\nIn my view,\n- with (a): Not hard to implement (I hope), but how about the case the suite fails in beforeEach? Currently we mark the test as failed when there are errors in beforeEach, but I think to make it consistent with before, we should mark it as skipped too?\n- with (b): It sounds a nice idea but not sure it will be good in practice, like how TeamCity (or other CI) will interpret and display the test results?\n- with (c): The implementation should be quite similar to (a), except, we don't need to change the code for beforeEach since it is marked as failed now --> less things to do if we choose (c)\n. This PR will fix the issue #659 \n. > Marionette and geckodriver are not yet feature complete. This means it does not yet offer full conformance with the WebDriver standard or complete compatibility with Selenium.\n\nYou can track the implementation status of the latest Firefox Nightly on MDN. We also keep track of known Marionette, Selenium, and specification problems in our issue tracker.\nMarionette support is best in Firefox 48 and onwards, although the more recent the Firefox version, the more bug fixes and features. Firefox 47 is explicitly not supported.\n. > beforeEach and afterEach are already passed the current Test object.\n\nI don't understand well what you meant here. Actually, my original purpose was something like \"in beforeEach: if the test name is in patternA, then do this, if patternB then do that..\", or: \"in afterEach: if the test fails, then do this..\". Is any other way I can do it?\n\nSuites are able to run tests concurrently.\n\nAs I understand, if we use different sessions, then it should be fine (it is what I use and already tested)\nOr maybe you can provide a solution?. I got it, thank you very much, @jason0x43 !. ",
    "vrozaev": "Thank you, @bartoszkaczorek your workaround works!\nHello @csnover, I have the same problem with firefox.\nIntern: 3.3.1\nnode.js: v6.2.2\nBrowser: Firefox 49.0\nPlatform: Windows 7\nSelenium standalone server: 2.52.0\n. @hakatashi @morrinene @agcolom @dylans\nHello everyone! \nRight now I am write the same sandbox for my project. This pull request is still actual? Why it didn't merged? Is there are any chance to see that feature in intern 3?\nIn this pull requests you turn test function to string, and evaluate it inside of iframe. It is really necessary?\nIn my case I use sandbox only for loading application code. If I load code via iframe then it will be interact with iframe global variables and seems that all what you need from sandbox.\nIt's looks like that:\n```JavaScript\nvar page, module;\nbdd.beforeEach(function () {\n    page = new PageWrapper();\nreturn page.loadModule(\"url/to/module\").then(function (loadedModule) {\n    module = loadedModule;\n});\n\n});\nbdd.afterEach(function () {\n    page.destroy();\n});\nbdd.it(\"module checks\", function () {\n        expect(module.foo()).be.equal(42);\n});\n```\nIn fact, PageWrapper just create iframe and pass coverage variable:\n``` JavaScript\nvar iframe = document.createElement(\"iframe\");\niframe.contentWindow.__internCoverage = window.__internCoverage = window.__internCoverage || {};\n```\n. Also PageWrapper allows to test such code (very artificial example, but still):\nJavaScript\ndefine([\n  \"dojo/xhr\",\n], function (\n  xhr\n) {\n  xhr(\"/some/url\").then(function () {\n    // branch 1\n  }).otherwise(function(){\n    // branch 2\n  });\n});\nRight now there are no way to run this code twice and check booth branches. This code will be execute only once - when we load this AMD module for first time.\n``` JavaScript\nvar page, module;\nbdd.beforeEach(function () {\n    page = new PageWrapper();\n});\nbdd.afterEach(function () {\n    page.destroy();\n});\nbdd.it(\"branch 1\", function () {\n        page.server.responseWith(\"\");\n        return page.loadModule(\"url/to/module\").then(function () {\n           // check branch 1 logic\n        });\n});\nbdd.it(\"branch 2\", function () {\n        return page.loadModule(\"url/to/module\").then(function () {\n           // check branch 2 logic\n        });\n});\n```\nOf course it's a very strange use-case, but it's exist.\n```. @dylans Okay, hers is a pull request: https://github.com/theintern/intern/pull/707. @dylans Any news? Who should merge this?. @dylans are you alive?). @dylans congratulations! PS: where I can find the intern community? I see nobody there: irc://irc.freenode.net/intern. I still have some questions but where I can ask?. @dylans Well I didn't see your and @jason0x43 email at all. So, I can't do this. Could you provide me an email? In our company we use dojo for development and intern for testing, so we are interested in cooperation. Maybe you could tell us about some best practices. We can try to participate in intern development and so on.. Please, do that. I want try to use intern-visual, but there are not much documentation.\nCan I help with it somehow?. @jason0x43 Hello Jason! The intern 4 was released several days ago. This feature works in intern 4 or not? I want this feature because in our company we use babel and it's will be good if we generate coverage report by non-transpiled code. If it's not work I can try to help with that.\n. Okay, I will re-check it.. Rework against master branch: https://github.com/theintern/intern/pull/802. > Also, the 'skipped' icon is rendering fine for me using Chrome on a Mac. Is there a particular browser you're seeing the issue with?\nIt was my mistake - I use outdated master branch.. > Allow the location to be passed into the reporter, like the document property. Add it to HtmlProperties and make it a reporter property, then move createLinkNode and getFullName into Html as methods, or allow the location to be passed into createLinkNode. This will improve testability.\nDone, but now i need window.encodeURIComponent function. So, can I just add window property to the HtmlProperties or I should write some provider for window.encodeURIComponent?\n\nUse suites instead of grep (or both suites and grep if a specific test is being rerun) so that the only result in the re-run report will be the suite the user selected.\n\n@jason0x43 Are you sure about that?\nSuites param is array of string like path/to/suite1.js, ...etc. Program suites has specific name, like bdd.describe(\"My first suite!\", () => {});. And it's can be several program suites in single file.\nI didn't understand how i can correlate them witch each other.\nMaybe we should build another html representation in case when grep property is specified? Show skipped tests in another (last) section or something like that?. @jason0x43 one more question. I tried to write tests but looks like i should register me mocks somehow. What i should do? Stacktrace:\n(\u30ce\u0ca0\u76ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\nError: A plugin named \"createLocation\" has not been registered\n  at Node.Executor.getPlugin  <src/lib/executors/Executor.ts:322:10>\n  at <tests/unit/lib/reporters/Html.ts:6:31>\n  at Object.defineProperty.value  <_tests/tests/unit/lib/reporters/Html.js:3:17>\n  at Object.<anonymous>  <_tests/tests/unit/lib/reporters/Html.js:9:3>. Well, I believe that feature itself is ready. There is only one little problem: \nI can't just add test for suiteStart method because it's didn't actually add link anywhere. It's just store it in private property: this._runningSuites[suite.id] = { node: rowNode };. (I add test for testEnd method - now it's check that link for test exist.) \nSo - only one unit test left. Seems that I should call multiply methods if I want test this. It's sad - I was sure that I can call only suiteStart.. @jason0x43 It's ready now. Thanks for core/aspect - it's very useful.. @jason0x43 any news?. done. done. ",
    "burashka": "Hello, @bartoszkaczorek \nYour code is incorrect: need two arguments (err and encodedProfile) for fp.encoded callback.\nBut I think better use promisify:\n```javascript\nconst FirefoxProfile = require('firefox-profile');\nconst util = require('util');\n(async function(){\n        const fp = new FirefoxProfile();\n        fp.setPreference('dom.max_chrome_script_run_time', 360);\n        fp.setPreference('dom.max_script_run_time', 360);\n        fp.updatePreferences();\n    const encodedProfile = await util.promisify(fp.encoded).call(fp);\n    console.log(`firefox_profile ${encodedProfile}`);\n\n})();\n```. We are use v3, because v4 is not backward compatible. Can you bump chromedriver for v3 too, pls?. ",
    "galas0330": "Confirmed, exclude instrumentation produced the same result. Thanks for\nyour help guys\nOn Sep 2, 2015 9:33 AM, \"Vlad Filippov\" notifications@github.com wrote:\n\nThere is probably not anything that can be done about this in Intern; the\nSafariDriver extension is unmaintained and is increasingly buggy as Safari\ngets new versions. You can set excludeInstrumentation: true to bypass this\nspecific problem, but this will lose you code coverage everywhere.\nI think I told @galas0330 https://github.com/galas0330 to try excludeInstrumentation:\ntrue on IRC and didn't work either, @galas0330\nhttps://github.com/galas0330 please confirm.\n@csnover https://github.com/csnover could it be possible to catch\ngetCoverageData in Safari only and report that coverage is not supported.\nWhere coverage in other browsers would still work...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/481#issuecomment-137080906.\n. \n",
    "naglalakk": "Nevermind, I got it running by doing\nnode node_modules/intern/bin/intern_client.js ....\nThe other issue was because intern-client was installed globally and there was some error related to dojo and Promises.\n. ",
    "testingbot": "This indeed doesn't sound like a problem with intern, more like an issue with our service at that time. Do you still experience this issue?\n. Hi,\nWe've done some investigation on this as well, our iPhone and Android both use Appium.\nAppium passes its sessionId through a redirect: https://github.com/appium/appium/blob/master/lib/server/controller.js#L180\nLeadfoot only checks the json body for sessionId, causing the session to fail during start: https://github.com/theintern/leadfoot/blob/master/Server.js#L314\nWe'll work to patch Appium on TestingBot to return sessionIds instead, since that's the normal way.\nHowever it might be worthwhile adding this functionality to Leadfoot.\n. ",
    "nicknisi": "Specifically, the error is that pathUtil.isAbsolute doesn't exist in 0.10 https://nodejs.org/docs/v0.10.40/api/path.html\n. True, but that does work fine in git-bash.. ",
    "disterics": "+1 \nI would also like not to use relative paths in my tests\n. ",
    "stas-vilchik": "Just tried with 3.0.2, it still fails.\nNode.js v0.12.2\n. @kitsonk no, I don't use useLoader. And I've never used Intern 2, I started with 3.0.0.\nFor the reference, my config is here.\n. ",
    "stsvilik": "I'm still running into this issue when running a test against local Selenium:\nError: Cannot find the Node.js require\n  at <__intern/browser_modules/dojo/node.js:14:15>\n  at execModule  <__intern/browser_modules/dojo/loader.js:332:62>\n  at <__intern/browser_modules/dojo/loader.js:374:21>\n  at guardCheckComplete  <__intern/browser_modules/dojo/loader.js:361:9>\n  at checkComplete  <__intern/browser_modules/dojo/loader.js:366:32>\n  at onLoadCallback  <__intern/browser_modules/dojo/loader.js:428:17>\n  at HTMLScriptElement.handler  <__intern/browser_modules/dojo/loader.js:514:65>\n. @jason0x43 I am using dojo-node which I thought was supported.\n. In intern-client everything runs fine, but running intern-remote invokes unit-tests as well, do you suggest commenting them out, or have two config files?\n. Well, I did some experimenting as well and managed to write a loader which transpiles ES6 (using babel-core) on the fly. That almost worked, by almost I mean that it could test files that do not import other dependencies. The stumbling block for me was exports object which transpiled code expects. If I set exports to an empty object it doesn't throw an error, but at the same it doesn't know how to resolve sub-dependencies.\n. Here is my loader (warning - very immature) in case you want to create a temporary solution:\n``` js\ndefine(function(require) {\n  var global = (function() {\n    return this;\n  })();\nvar nodeRequire = global.require && global.require.nodeRequire;\nif (!nodeRequire) {\n    throw new Error('Cannot find the Node.js require');\n  }\nvar module = nodeRequire('module');\n  var babel = nodeRequire(\"babel-core\");\n  var options = {\n    sourceMaps: true,\n    plugins: [\n      \"transform-es2015-arrow-functions\",\n      \"transform-es2015-block-scoped-functions\",\n      \"transform-es2015-block-scoping\",\n      \"transform-es2015-classes\",\n      \"transform-es2015-destructuring\",\n      \"transform-es2015-duplicate-keys\",\n      \"transform-es2015-for-of\",\n      \"transform-es2015-function-name\",\n      \"transform-es2015-literals\",\n      \"transform-es2015-object-super\",\n      \"transform-es2015-parameters\",\n      \"transform-es2015-shorthand-properties\",\n      \"transform-es2015-spread\",\n      \"transform-es2015-sticky-regex\",\n      \"transform-es2015-template-literals\",\n      \"transform-es2015-typeof-symbol\",\n      \"transform-es2015-modules-commonjs\",\n      \"check-es2015-constants\"\n    ]\n  };\nreturn {\n    load: function(resourceId, require, load) {\n      babel.transformFile(resourceId, options, function(err, result) {\n        if (err) {\n          throw err;\n        }\n    var code = result.code;\n    var compiled = new Function(\"exports\", code)({});\n    load(compiled);\n  });\n}\n\n};\n});\n```\n. @andyearnshaw I'll try to use babel-standalone. What else is not available in the browser is the use of intern dojo node loader. I get the same error you described.\n. ",
    "brunano21": "My test is quite simple and I'm not trying to access to WebStorage and/or Geolocation. \nIt consists in ask for a url - get(url) - type username and password e so far. It fails on creation, so basically the browser gets opened, but then for some reason it closes, and then a new instance is created - but with an empty page. Then, of course, the test fails because it does not find an element within it.\nWhat is not clear is why FF closes itself, and the opens again. Selenium however doesn't say nothing about. That's really weird, no?\nI tried switching that flag to false, but the behaviour is the same. However I do not get that exception about WebStorage and Geolocation. \nThe new pastebin is: http://pastebin.com/yPbAjZ55\nIs it maybe fault of FF ESR?\n. So, @vladikoff what are you thoughts about this? Why does FF get closed and opened again during the test? \nI also searched for FF crash log, but I have not been lucky. No crash log.\n. Ok, just tried as you suggested. and it works well, as expected. \nFirst of all, I switched that boolean to false. So I do not get the unsupported suff. I'm not sure if it's good or not, by the way.\nAnyway, I rewrote the test in order to do a get(url), type username and password and click submit. The original test, does more or less the same thing, except that being a bit cryptic. \nUsing the Page Object Pattern, I wrote an Login object, with following functions:\nNOTE: super is a superclass, which Login inherits from.\n```\nLogin.prototype.doLogin = function (args) {\n    var self = this;\n    var usernameValue = args[0];\n    var passwordValue = args[1];\n    var usernameInputId = _props.get(\"login.username.id\");\n    var passwordInputId = _props.get(\"login.password.id\");\n    var cssSelector = _props.get(\"login.submit.css\");\nreturn _super_\n    .setInputById.call(self, [usernameInputId, usernameValue])\n    .then(function() {\n        return _super_.setInputById.call(self, [passwordInputId, passwordValue]);\n    })\n    .then(function() {\n        return _super_.clickBtnByCss.call(self, [cssSelector]);\n    })\n    .then(pollUntil(\"return document.getElementsByTagName(\\\"core-app\\\")\", 10000))\n    .then(function (){ // NOTE This is wrong!\n        console.log(\"Then untilPoll\");\n    })\n    .getPageTitle()\n    .then(function (title) {\n        console.log(title);\n    })\n    .sleep(5000) // FIXME\n    .catch(function (err) {\n        console.log(err);\n    });\n\n};\nLogin.prototype.loadLoginPage = function(args) {\n    var self = this;\n    var remote = self._remote;\n    return remote\n        .get(require.toUrl(args[0]))\n        .setFindTimeout(5000)\n        .sleep(2000);\n}; \n```\nThen using a promise approach, I chain the above functions.\nThe test that I rewrote is instead:\n\"Test 2\": function() {\n    return this.remote\n        .get(require.toUrl(\"https://127.0.0.1/Client/\"))\n        .setFindTimeout(5000)\n        .findById('j_username')\n        .click()\n        .type('susan@example.com')\n        .end()\n        .findById('j_password')\n        .click()\n        .type('password')\n        .end()\n        .findByCssSelector('input[type=submit]')\n        .click()\n        .end();\n}\nNow I'll need to understand the difference between tests above. Maybe something that I'm using in a wrong way? Or,something that FF does not handle as Chrome does?\nAny suggestion would be really appreciated! Thanks!\nPS: even with the working simple test, FF gets closed and re-open (but after the test is completed!). This allows me to think that in the not working test, something goes wrong, closing then FF.\n. @csnover From my investigation I understood that the part which is creating issues is the .sleep(). Removing all of them the test works as expected. \nAs far as the super calls are concerned, I'm calling from the Login object, methods that its parent is exposing. Furthermore, .apply and .call should have been the same thing, except for how you can pass arguments.\n. Tests fail when a certain function returns an exception.\nIn other words, a generic functional test is written as follow:\n\"test1\": function() {\n   return myPageObject.run()\n },\nIf run() method returns an exception, then the test has to fail. Actually it works fine, I'm not only explaining why the suite's numFailedTests property is equal to the number of suite's tests at the beginning (into the before function in example). \nI'm asking this because I want skip all remaining tests if a previous one has failed.\nHope I have been clear.\nThanks. \n. Hi,\nis this recognized as a real issue?\nI am with the following situation - I have skipped 11 of 12 tests and the remaining one was successful.\n```\n\u2713 chrome on any platform - MySuite - SC05 (188.936s)\ninfo:    Test SC05 - Status: completed.\ninfo:    Test SC05 - Time(secs): 188.936\n\n\nSuite chrome on any platform - MySuite FAILED\n[object Object]\ninfo:    Test SC08 - Status: skipped.\nSuite chrome on any platform - MySuite FAILED\n[object Object]\ninfo:    Test SC09 - Status: skipped.\nSuite chrome on any platform - MySuite FAILED\n[object Object]\ninfo:    Test SC10 - Status: skipped.\nSuite chrome on any platform - MySuite FAILED\n[object Object]\ninfo:    Test SC11 - Status: skipped.\nSuite chrome on any platform - MySuite FAILED\n[object Object]\ninfo:    Test SC12 - Status: skipped.\ninfo:    Suite MySuite - Status: completed.\ninfo:    Suite MySuite - # Tests Failed: 0\ninfo:    Suite MySuite - # Tests Skipped: 11\nNo unit test coverage for chrome on any platform\nchrome on any platform: 0/12 tests failed (11 skipped); fatal error occurred\nTOTAL: tested 1 platforms, 0/12 tests failed (11 skipped); fatal error occurred\n\n\nError: One or more suite errors occurred during testing\n  at \n  at \n  at runCallbacks  \n  at \n  at run  \n  at \n  at process._tickCallback  \nWarning: Test failure; check output above for details. Use --force to continue.\nAborted due to warnings.\n```\n. So is it not a bug this? Everything is as expected?\n. @papowell have a look to this answer: http://stackoverflow.com/questions/32272598/intern-loop-on-promise-array-leadfoot-element\n@sholladay try to quantify the meaning of \"regularly\", since I have asked for possible bug and I have not received any reply yet.\n. ",
    "gwicksted": "Paths need normalizing before performing a string comparison for equality.  The two offenders:\njs\nvar expected = path.join(__dirname, '..', 'node_modules');\njs\n    var actualPath = path.dirname(require.resolve(path.join(dependency, 'package.json')));\na path.normalize ensures that C:\\ and c:\\ will be the same case before performing string comparisons.  I believe it's __dirname that returns the inconsistent case.\n. Travis CI build failed due to IE timeout (unrelated to this fix)\n. Closing PR in hopes of triggering a rebuild with Travis CI.\n. Reopen pull request to trigger Travis CI.\n. Sigh... another unrelated Travis CI error.  Please accept the PR!\n. I wish I did ... but I think they've rejected all previous attempts to fix related issues.  Instead it remains not well documented but a \"generally accepted practice\" when performing string comparison on two paths especially if they might exist on a case-insensitive file system (ie. NTFS/FAT on Windows).\nIt has some pretty scary side effects when loading modules using \"./\" vs __dirname and the module cache.\nOne of the better tickets:\nrequire() loads same module multiple times if case is different\nTicket that specifically outlines this issue (about half way down) when loading modules:\nhttps://github.com/nodejs/node-v0.x-archive/issues/7031\n. That about sums it up!  I suppose nodejs is less frequently run on Windows and those of us who have been burned by this bug just instinctively normalize ... at least it hasn't reached the point of the double claw hammer.  ;)\n. Very good!  Upon further testing you're absolutely right -- it seems they did fix that bug!\n. ",
    "eddiechihyi": "Hi Colin,\nOur widgets are running fine in normal environment. I am talking about unit test scenarios which the test is running against sandbox browser and now all the underlying AJAX POST will by default POST to root path if they have not been explicitly override. We already put in some prevention fixes in our test but it's every difficult to find which one actually cause the issue if you have a lot of modules with all the dependencies. \nA good testing framework should not stop the whole testing job just because one test failure not matter what. We have experience couple these kinds of issues and because of the AMD and async natural of Intern/Selenium. The debugging is not trivial especially for junior developers. We know Intern is new but we have high hope that it will keep improve to make the tool better. That's why I am reporting this issue. Hope that makes sense to Intern team.\nRegards,\nEddie\n. I modified Intern's Proxy.js to output more information. Below is the update.\n1) I was incorrect about the timing. When I said the test was not started, actually the test URL is loaded and Intern has started sending the data. Because it's so slow, I wasn't sure what's going on behind the scene. Now after I have Proxy.js to output all the outbound files, I can see Intern is sending all core Libs and every single file the test referenced. In a remote testing environment, this is the bottleneck. \n2) I also followed your instruction to disable \"fixSessionCapabilities\" which it helps. I can cut down maybe 5~10 secs of testing time at my home network (w/o proxy). In our proxied network, this saves even more time.\n3) The 8MB data I noticed is actually the total outbound data going through SauceLabs tunnel. For some reason, it's always almost tripled than the amount of data associated with the Node (Intern) process. I also tested with BrowserStack, I only saw maybe 20~30% inflation with its tunnel and I believe that's why BrowserStack always responds faster. I am still trying to find if this issue is related with Saucelabs tunnel configuration.\n4) I also tried adding zlib in Proxy.js to compress response data. This will reduce the overall size of the data sent through the wire, but Node is not a good place to perform such operation because it actually slows down the proxy. However, I feel it might be worthy to consider separating the Intern Proxy using a standalone webserver to support the compression. This will benefit the remote testing.\nRegards,\nEddie\n. ",
    "odoe": "I've run into issues (using npm3) when I include intern in a project that also does a Dojo build. In this case, I have a node_modules/dojo dep for my app using dojo 1.10. Intern has the same dep, but it's dojo2, and it looks like dojo 1.10 takes priority in that folder and breaks Intern. I've since reverted back to npm 2.x to avoid this issue on my machine.\nYou can see this happen with this repo https://github.com/odoe/esrijs-generator-demo\n. All our suites take about 10 minutes. It's not a huge deal while working on a particular feature. I can typically isolate the tests to a single suite. But I still have to test everything to make sure I don't introduce bugs or break anything. That's when it comes in handy to try and nail down those failing tests.\n. ",
    "bricejlin": "I'd also like to see this implemented! As our ta suite grows, it becomes more painful to have other tests running when we really want to just test one file. Right now, my workaround is specifying the path of the one file in intern config. Would be awesome to see something like this shipped!\n. @sholladay hrm, no I haven't used the CLI before. I guess that's another way to single out tests?\n. Thanks! Will try that out\n. ",
    "tplesnar": "Test default timeout is ok for my test, as the async code should execute in less than 2 seconds. \nMy concerns lies here:\n\u00d7 chrome on MAC - I want to have a suite reporting properly errors - Simple test should reports errors as and when they occur - And I execute async remote function\nCancelError: Timeout reached on chrome on MAC - I want to have a suite reporting properly errors - Simple test should reports errors as and when they occur - And I execute async remote function\n  at null.<anonymous>  <node_modules/intern/lib/Test.js:162:20>\n  at Timer.listOnTimeout  <timers.js:92:15>\nThis step throw no error or wrong assertion and so returns properly (never goes into this if https://github.com/tplesnar/Intern-bug-investigation/blob/master/test/support/helper/checkGUILoaded.js#L37-L43 ). From my understanding of intern, this step should pass, but it doesn't because of timeout. Moreover when you consider that this step https://github.com/tplesnar/Intern-bug-investigation/blob/master/test/support/helper/open.js looks very similar to the one timing out and passes properly. The next step And I execute async remote function and fail, supposed to fail, properly catches the first throw and logs Too big.\n. ",
    "croes": "Upon further investigation I found that there is a Suite object that has an error attached to it. suite.error.relatedTest points to the Suite itself, causing infinite recursion when trying to serialize the object with JSON.stringify.\nI will investigate further exactly how the Suite object ends up pointing to itself in its error.relatedTest.\n. Some more remarks:\n- The issues are caused by some Suites throwing errors in after/teardown\n- suite.error.relatedTest === suite if the teardown / after function of the Suite throws an error. This gives issues when serializing the Suite object in the WebDriver reporter. I solved this by not serializing the relatedTest property of error.relatedTest if it equals the suite itself (this).\n- If the after of the final suite throws, the error ends up at the PreExecutor, which will send a fatalError message to the Node Runner. The sequence number of this message is 0, while the WebDriver reporter has already sent messages with larger sequence numbers. The Proxy reports the following error:\nError: Repeated sequence for session 3864e420-dcff-4b06-bd21-7e74e9786f3b: 18 last 0 cur\n  at Proxy._publishInSequence  <ria/node_modules/intern/lib/Proxy.js:185:11>\n  at IncomingMessage.<anonymous>  <ria/node_modules/intern/lib/Proxy.js:67:39>\n  at IncomingMessage.EventEmitter.emit  <events.js:92:17>\n  at <_stream_readable.js:920:16>\n  at process._tickCallback  <node.js:415:13>\nThis error stops the Node runner process abruptly. Other sessions will not be gracefully terminated.\nI solved this by not checking the sequence number for these 'special' fatalError messages (see below) This allows the Node runner process to finish gracefully. Another solution would be to somehow send the correct sequence number.\nProxy.js\n``` javascript\nfunction isFatalErrorFromPreExecutor(message) {\n  return message.payload[0] === 'fatalError' && message.sequence === 0;\n}\n//...\nif (!isFatalErrorFromPreExecutor(message) && message.sequence <= session.lastSequence) {\n    throw new Error('Repeated sequence for session ' + message.sessionId + ': ' + session.lastSequence +\n                    ' last ' + message.sequence + ' cur');\n}\n``\n- Minor, but theWebDriverreporter could use asuiteErrorhandler that moves the HTMLsuiteNode` back up to its parent.\n``` javascript\n  suiteError: function() {\n          if (this.writeHtml) {\n              this.suiteNode = this.suiteNode.parentNode.parentNode || document.body;\n          }\n      return this._sendEvent('suiteError', arguments);\n  },\n\n```\n. Errors thrown in Suite.after was also the cause of issues in #525\n. An alternative would be to generate valid sequence numbers for fatal error messages, but I didn't quite figure out how to implement this.\n. Should fatal errors be thrown if a suite error has occured? I would assume not, as suite errors have their own handlers. Second opinions?\n. Reporting suite errors as fatal errors was confusing. I changed it so that suite errors are actually reported as suite errors and fatal errors as fatal errors.\n. Yes, exactly. If you have any suggestions on how to implement this in a better way, please let me know :)\n. True, re-adding this so it exits with a non-zero exit code. I also had to fix serialization of fatal errors.\n. ",
    "sap1ens": "Hey @jason0x43 \nThanks for your reply. Everything you mentioned is well-known, but it doesn't solve the original issue, BrowserStack (or any other tunnel) is practically useless after suite is finished. Of course it's possible to use various debugging tools, but when one single test fails I want to quickly see the execution log of that test, screenshots and video. Right now Intern doesn't allow to do that (performance reasons, fine), but I'm wondering if it's possible to introduce another option/flag/mode to use a session per test. \nI would love to contribute that myself, but it seems like the current codebase doesn't have a straightforward way to implement that. Some tips are welcome :)\n. It's not a problem to take a screenshot, BrowserStack provides all necessary information. The problem is following: I have to scroll through, let's say, 20 minutes of text log and screenshots to find the failed test in BrowserStack log :-/\ngrep helps a lot, but sometimes you can't reproduce the failure and you have to see the log from the original test run. \nAlso, additional time is not always a problem. For example, we run UI tests daily, not per commit, so we can afford to wait longer and have true isolation and test separation instead. \n. @csnover not really, but I'll try! \n. Btw, BrowserStack guys helped with a sample project: https://github.com/UmangSardesai/intern-browserstack/tree/master/Parallel%20Functional%20Testing/tests\nIt works for a very specific configuration and has some limitations, but it's a step forward. Any feedback about the \"intern-parallel.js\" file? \nThanks!\n. Agreed, https://github.com/theintern/intern/issues/546 should solve the original issue. Thanks!\n. ",
    "mehmetg": "I am trying to do the same using the bdd interface and like you said it is not a viable solution for anything other than that specific setup. It feels like the unit test approach is getting in the way of browser testing.\n. ",
    "wonnage": "@jason0x43 What happens if you use httpOnly cookies? There's no way to delete them in Selenium as far as I can tell. Only solution is to fire up a new session, which is impossible without some hacking. \n. I like the warning idea, does the approach in the patch look reasonable? \n. Updated with @csnover feedback; this now marks a test as skipped if you use this.remote without marking the test as async, with the warning as the skip reason. \nI was struggling to think of a case where you'd want a synchronous test while using a remote web driver and couldn't; hopefully we can agree that this is never useful. \n. Hey sorry, I forgot I had this PR out there. When I submitted it, the company I was working at had a bunch of tests \"passing\" due to this. The upgrade process would be easier/allow incremental fixing if intern gave a warning rather than just failing. \nI no longer work for them, so I'm open to making it throw if that gets this merged, though! \n. So should this just be a this.report('warnAsync') or something? I'm not sure how that part of the code works.\n. ",
    "tx4x": "+1 \nand whilst on it: command line args from grunt task are also not forwarded. would solve lots of things for me, eg: disabling certain tests,...\n. great, thanks a lot\n. being able to build on a \"testing framework\" would allow me to run tests directly from within my application instead of trying to mock every possible scenario (real data/context is more preferable to me).\n. yes, basically, anything like this.\n. ahm, i know it might be much asked, but it would be great if that could run in : client, node.js and electron. \nanyhow, thanks already for popping up. \n. sorry, will be there any progress on this? I am tempted to do this myself, it doesn't look too hard. \n. ah, never mind. at the end it is easy, you only need to build a custom version of \n- ./client.js\n- lib/PreExcecuter.js (this one is setting up all and fires the tests with a config)\ngot my tests running from within my application, done for me.\n. Here an example for running tests programmatically from within a Dojo based Node.JS application module:\n``` js\ndoTests:function(){\n         var _require = require;//dojo's require, hide it from gcc\n        _require([\n            'intern/lib/executors/PreExecutorEmbedded'\n        ], function (PreExecutorEmbedded ) {\n            var executor = new PreExecutorEmbedded({\n                executorId: 'client',\n                config:{\n                    // The port on which the instrumenting proxy will listen\n                    proxyPort: 9000,\n                    // A fully qualified URL to the Intern proxy\n                    proxyUrl: 'http://localhost:9000/',\n\n                    // Username and key should be set in the BROWSERSTACK_USERNAME and BROWSERSTACK_ACCESS_KEY environment variables\n                    tunnel: 'NullTunnel',\n\n                    // See https://www.browserstack.com/automate/capabilities for capabilities and environments\n                    capabilities: {\n                        name: 'dojo-loader',\n                        project: 'Dojo 2',\n                        fixSessionCapabilities: false\n                    },\n\n                    environments: [\n                        // Enter whichever browser you want to test here.\n                        // (It is unwise to test more than one simultaneously on one host,\n                        // due to potential for spurious focus test failures.)\n                        { browserName: 'internet explorer', version: ['9.0', '10.0', '11.0'], platform: 'Windows 7' } /*,\n                         { browserName: 'microsoftedge', platform: 'Windows 10' }*/,\n                        { browserName: 'firefox', platform: 'Windows 10' },\n                        { browserName: 'chrome', platform: 'Windows 10' },\n                        { browserName: 'safari', version: '9', platform: 'OS X 10.11' },\n                        { browserName: 'android', platform: 'Linux', version: '4.4', deviceName: 'Google Nexus 7 HD Emulator' }\n                        /*,{ browserName: 'safari', version: '7', platform: 'OS X 10.9' }*/\n                    ],\n\n                    // Maximum number of simultaneous integration tests that should be executed on the remote WebDriver service\n                    maxConcurrency: 2,\n                    loaderOptions: {\n                        // Packages that should be registered with the loader in each testing environment\n                        packages: [\n                            { name: 'dojo', location: './node_modules/dojo' },\n                            { name: 'dijit', location: 'dijit' },\n                            { name: 'dgrid', location: 'dgrid' },\n                            { name: 'dstore', location: 'dstore' },\n                            { name: 'xide', location: 'xide' },\n                            { name: 'xfile', location: 'xfile' },\n                            { name: 'dojox', location: 'dojox' },\n                            { name: 'xdojo', location: 'xdojo' },\n                            { name: 'xgrid', location: 'xgrid' },\n                            { name: 'xblox', location: 'xblox' },\n                            { name: 'xdocker', location: 'xdocker' },\n                            { name: 'wcDocker', location: 'wcDocker/src' },\n                            { name: 'dcl', location: './node_modules/dcl' },\n                            { name: 'tests', location: 'tests' }\n                        ]\n                    },\n\n                    // A regular expression matching URLs to files that should not be included in code coverage analysis\n                    //excludeInstrumentation: /^dojox?|^dijit|^dstore|\\/node_modules\\/|\\/tests\\/|\\/nls\\//,\n                    excludeInstrumentation : /(?:node_modules|bower_components|tests)[\\/\\\\]/,\n\n                    // Non-functional test suite(s) to run in each browser\n                    suites: [ 'tests/all' ],\n\n                    // Functional test suite(s) to run in each browser once non-functional tests are completed\n                    functionalSuites: []\n                },\n                defaultLoaderOptions:dojoConfig\n            });\n\n            // bad bad, if you use assert in one the tests, it's also crashing your surrounding app\n            try {\n                var promise = executor.run();\n            }catch(e){\n                console.error('error running tests ',e); \n            }\n        });\n\n    }\n\n```\nYou can find here the PreExecutorEmbedded. It only changes the getConfig() method. So this may can be moved to some boiler code, no need to fork anything.\nremarks: \n- that's a fairly old intern config i use here, not sure how this fits with the recent intern fork i am using.\n- you must extend your app's dojo config for making intern work: \npackages:[{\n                name: 'intern',\n                location: path.resolve('./node_modules/intern')\n            }\n        ],\n        deps: mainModule ? [mainModule] : null,\n        map: {\n            intern: {\n                dojo: 'intern/browser_modules/dojo',\n                chai: 'intern/browser_modules/chai/chai',\n                diff: 'intern/browser_modules/diff/diff'\n            },\n            '*': {\n                'intern/dojo': 'intern/browser_modules/dojo'\n            }\n        }\ntbc...\n. would be happy if the authors could have a look at this. there is probably much space for improvement. \n. just fyi: I went happy with http://typedoc.org/. ",
    "papowell": "Please excuse my post to the wrong board.  I found a solution but there are 2 places below where where  there is a comment \"// ** it doesn't work here **\"\nDue to these errors, I think it would be reasonable to create a utility function for this library to iterate over items -- the only solution I found (below) is where 'command = command. ...\" -- anything else gave error results.\n/*\n- Created by James on 11/21/2015.\n  /\n  define([\n  'intern!object',\n  'intern/chai!assert'\n  ], function (registerSuite, assert) {\n  registerSuite({\n      name: 'is this working?',\n      'Check Page body': function()\n      {\n          var command = this.remote;\n          return this.remote.get(require.toUrl(\"http://localhost:63342/InternFrames/html/index.html\"))\n              .findAllByTagName(\"iframe\")\n              .then(function(iframes, context1)\n              {\n                  console.log(\"iframes size: \", iframes.length);\n                  return Promise.all(iframes.map(function(element, index, array)\n                  {\n                      // everything works correctly\n                      command = command\n                          .switchToParentFrame()\n                          .switchToFrame(element)\n                              .findByTagName('body')\n                                  .getVisibleText()\n                                  .then(function(bodyText, context)\n                                  {\n                                      console.log(\"this is the -->body: \", bodyText );\n                                      console.log(\"it's working\");\n                                  })\n                              .end();\n                      return command;\n                  }));\n              })\n              .end();\n      },\n```\n  'can\\'t reassign to var': function()\n  {\n      var command = this.remote;\n      return this.remote.get(require.toUrl(\"http://localhost:63342/InternFrames/html/index.html\"))\n          .findAllByTagName(\"iframe\")\n          .then(function(iframes, context1)\n          {\n              console.log(\"iframes size: \", iframes.length);\n              return Promise.all(iframes.map(function(element, index, array)\n              {\n                  // * it doesn't work here ***\n                  var commandReponse = command\n                      .switchToParentFrame()\n                      .switchToFrame(element)\n                      .findByTagName('body')\n                      .getVisibleText()\n                      .then(function(bodyText, context)\n                      {\n                          console.log(\"this is the -->body: \", bodyText );\n                          console.log(\"it's working\");\n                      })\n                      .end();\n                  return commandReponse;\n              }));\n          })\n          .end();\n  },\n'can\\'t create new instance': function()\n  {\n      var command = this.remote;\n      return this.remote.get(require.toUrl(\"http://localhost:63342/InternFrames/html/index.html\"))\n          .findAllByTagName(\"iframe\")\n          .then(function(iframes, context1)\n          {\n              console.log(\"iframes size: \", iframes.length);\n              return Promise.all(iframes.map(function(element, index, array)\n              {\n                  // * it doesn't work here ***\n                  command =new command.constructor(command.session)\n                      .switchToParentFrame()\n                      .switchToFrame(element)\n                      .findByTagName('body')\n                      .getVisibleText()\n                      .then(function(bodyText, context)\n                      {\n                          console.log(\"this is the -->body: \", bodyText );\n                          console.log(\"it's working\");\n                      })\n                      .end();\n                  return command;\n              }));\n          })\n          .end();\n  }\n  ```\n});\n  });\n. ",
    "JSMike": "Are you trying to use dojo 1 for your loader? what's your config like?\n. I'm not sure why this is failing Travis-CI, it's passing locally in PhantomJS, and looks like it passed all of the tests in TravisCI before timing out on displaying the results\n. I just created a browserstack acct to run selftest locally, and it ran successfully with no issues. I'm calling shenanigans! Closing/opening to get travis to retry.\n. And success! It's weird that it hung the first time.\n. Note: There are currently 0 tests for the grunt task.\n. I agree it would be better to just have a configurable passing threshold.\nThere's a PR for adding a coverage.json reporter https://github.com/theintern/intern/pull/426, this should be compatible with https://www.npmjs.com/package/grunt-istanbul-coverage.\nWe can look to get something that's built in to intern instead, I'd have to do some digging to see how difficult that would be.\n. @csnover I'll take a look into a better solution for this. My initial thought was to give developers access to the spawn result so they can manipulate it as necessary, this was just one application of how it could be used. But I agree it's not the best way to get coverage.\nNote: I'm very busy through the end of the week, but next week I'll be able to look into this some more. \n. Closing this as I've come up with a different solution which I'll be posting separately.\n. @csnover thanks for the feedback. I'll work on implementing the suggested changes. I'll hop on IRC or msg here if I have questions.\n. Hi All, I just wanted to note that I'm still looking into this, I just have a bunch of other things I'm working on that are higher priority for me. I'll try to get this prioritized sooner than later.\n. Hi @dylans \nYes, I'm still here. I've been busy with full time job and half-time school. I'll see if I can get some time to work on this soon.\n. FYI, this is covered under a corporate CLA.\n. Only thing to mention is that i left in the 'overall' option, which averages the 4 columns. I know that @csnover mentioned that these columns measure different things, but for our project's CI we just wanted to enforce the average of the 4 coverage types instead of setting a specific threshold for each type of coverage.\n. Travis is being silly again with my PR's :frowning: closing/opening to restart travis.\n. Travis got stuck on testing IE again. Closing/opening to restart Travis.\n. Travis is doing it's thing, hanging at testing IE 10/11 without any output for 10 min. I don't want to spam you guys with closing/opening, but this appears to happen frequently.\n. @jason0x43 Thx, I'll look there and modify the PR.\n. @jason0x43 sorry for the delay, I just got priority to work on this during our sprint. I've updated the location that you suggested, and it's currently working with my grunt watch config that spawns intern via command line and limits the instrumentation to the changed files using a regular expression string.\n. Thank you :)\n. This is a followup to https://github.com/theintern/intern/pull/553 which was on a really old branch. This PR goes to 3.2 instead of master because master was breaking in CI.\n. Had to fix head for PR\n. changed to \"CoverageThreshold\"\n. Fixed.\n. Fixed.\n. done.\n. done\n. If any threshold fails we'd want to halt for CI.\n. ",
    "titaniumbones": "I should add that node_modules is not created, so the failure seems complete. \n. that worked. \ntotaltest  node -v\nv5.1.0\n\u279c  totaltest  npm -v\n3.5.0\n. I had to follow Vlad's instructions and run \"npm init\" first. I\nsubmitted a pull request #549 to add that instruction to the README. \nOn 02/12/15 12:56 PM, Colin Snover wrote:\n\nI\u2019m sorry I don\u2019t know what is going on with this ticket. Once you\nconfigured npm correctly you were able to install Intern?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/548#issuecomment-161380693.\n. np, just trying to reduce work for other people. But am probably too\nignorant to be helpful!\n\nOn 02/12/15 04:27 PM, Jason Cheatham wrote:\n\nRunning |npm init| is not something you should have to do by default.\nThis seems more like a troubleshooting step than something that should\ngo at the top of the readme.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/issues/548#issuecomment-161438720.\n. \n",
    "pizza2code": "I agree, it makes sense to have paths be relative to the cwd on the command line... when specifying paths on the command line.  If there's a path in a config file, unless it was an alias in .bashrc, I wouldn't expect the path meaning to change based on where I was when I referenced the file.\n. ",
    "metasean": "In regards to the tests not being re-run:\nI'm definitely learning how to do TDD and use intern, but If I make a change to the code, save the revised code, and explicitly re-run the test, then my expectation (and the expectations of those I've shown this to) is that it will actually run again! \nResults for each of three possible testing methods (minus the code coverage table):\n-  ./node_modules/.bin/intern-client config=tests/intern (run from C9 terminal):  \n:-) from with the \"greet\" unit test\n  PASS: hello - greet (3ms)\n  0/1 tests failed\n  0/1 tests failed\nNote: :-) from with the \"greet\" unit test is my console.log message for the unit test.  \nComments: Only the unit tests are run, but I get the console.log messages from the unit tests and the results of the unit tests.   This is as expected.\n-  ./node_modules/.bin/intern-runner config=tests/intern  (run from C9 terminal through BrowserStack):  \nListening on 0.0.0.0:9000\n  Tunnel started\n  \u2023 Created session firefox 37 on MAC (9d8a91d16b2d3b032d139e9b08c02ad9f145edba)\n  \u2713 firefox 37 on MAC - unit tests - hello - greet (0.002s)\n  from within the \"greeting form\" functional test\n  \u2713 firefox 37 on MAC - index - greeting form (2.641s)\nNotes: :-) from with the \"greet\" unit test is my console.log message for the unit test. from within the \"greeting form\" functional test is my console.log message for the functional test.  \nComments: Both the unit and functional tests are run, but I ONLY get the console.log messages from the functional tests.   Since this is running via the tunnel, I would expect to get all console.log messages reported. \nHow do I get console.log messages from both unit and functional tests to be displayed?\n-  client.html  (run through BrowserStack):  \nhello Console.js:76\n  :-) from with the \"greet\" unit test hello.js:9:13\n  PASS: greet (1ms) Console.js:85:4\n  0/1 tests failed Console.js:62:4\n  0/1 tests failed\nNotes: :-) from with the \"greet\" unit test is my console.log message for the unit test. \nComments:  Only the functional tests results are run, but I ONLY get the console.log messages from the unit tests.   Since this is running via the tunnel in the browser, I would hope all tests would be run and to get all console.log messages reported, but if it is analogous to the terminal's ./node_modules/.bin/intern-client config=tests/intern then I would expect only the functional test to be run, BUT I'd also expect the functional test's console.log messages to be displayed.\nHow do I run both unit and functional tests from the get console.log messages from both unit and functional tests to be displayed?\n. ",
    "jacobroufa": "@csnover CLA signed. Please advise.\n. @dylans I have addressed @jason0x43's feedback. Please let me know if you need anything else from me on this PR. Thanks!\n. @jason0x43 I rebased against origin and then squashed my work down into one commit. Please let me know if you need anything else for this PR. :+1: \n. Bumping this one up as I've recently run into a similar issue. I am using the same technique as @AlonMiz to usable effect, though it is kludgy as suggested.. ",
    "sandlerr": ":+1: would really love to use this feature!\nShame the developer couldn't get immediate feedback on the style issues and unblock this pull request. Would the maintainers consider adding ESLint or JSHint to the CI run?\n. ",
    "jonnycornwell": "Never got round to providing the workaround I found for this\nIn Suite:\n \nneeds to be\n \nEDIT:\nLooks like this has already been fixed in the latest codebase, so could close the issue, will retest when intern 4 is out. I am seeing these errors too with Firefox on Windows 7 (works fine on Mac FF 52.0.2). Not 100% convinced it is an intern problem.\nFirefox version: 47.0.2\nBroken versions:\nSelenium server: 3.3.1\nGeckoDriver: 0.15.0-x64\nWorking versions:\nSelenium server: 2.53.1\nGeckoDriver: 0.13.0-x64\nStack trace\nSUITE ERROR\nJavaScriptError: [POST http://localhost:4444/wd/hub/session/e626d6d6-30fe-49ad-9c3c-6b96e36f5bce/execute / {\"script\":\"return (function getCoverageData(coverage\nVariable) {\\n\\t\\tvar coverageData = (function () { return this; })()[coverageVariable];\\n\\t\\treturn coverageData && JSON.stringify(coverageData);\\n\\t}).apply(t\nhis, arguments);\",\"args\":[\"__internCoverage\"]}] Error: Permission denied to access property \"__internCoverage\"\nBuild info: version: '3.3.1', revision: '5234b32', time: '2017-03-10 09:04:52 -0800'\nSystem info: host: 'WIN-0V8BQ1LLB19', ip: '172.16.231.132', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.8.0_101'\nDriver info: org.openqa.selenium.firefox.FirefoxDriver\nCapabilities [{rotatable=false, raisesAccessibilityExceptions=false, appBuildId=20161031133903, version=47.0.2, platform=XP, proxy={}, command_id=1, specificat\nionLevel=0, selenium-version=2.53.0, acceptSslCerts=false, browserVersion=47.0.2, platformVersion=6.1, name=testconfig, XULappId={ec8030f7-c20a-464f-9b0e-13a3a\n9e97384}, browserName=Firefox, takesScreenshot=true, idle-timeout=60, takesElementScreenshot=true, platformName=Windows_NT, device=desktop}]\nSession ID: c5935425-9c5b-4998-a229-765e7bbd9d0e\n  at runRequest  <..\\..\\node_modules\\leadfoot\\Session.js:92:40>\n  at <..\\..\\node_modules\\leadfoot\\Session.js:113:39>\n  at new Promise  <..\\..\\node_modules\\dojo\\Promise.ts:411:3>\n  at ProxiedSession._post  <..\\..\\node_modules\\leadfoot\\Session.js:67:10>\n  at ProxiedSession.execute  <..\\..\\node_modules\\leadfoot\\Session.js:686:21>\n  at <..\\..\\node_modules\\intern\\lib\\ProxiedSession.js:95:19>\n  at <..\\..\\node_modules\\intern\\browser_modules\\dojo\\Promise.ts:393:15>\n  at run  <..\\..\\node_modules\\intern\\browser_modules\\dojo\\Promise.ts:237:7>\n  at <..\\..\\node_modules\\intern\\browser_modules\\dojo\\nextTick.ts:44:3>\n  at _combinedTickCallback  <internal\\process\\next_tick.js:73:7>\n  at process._tickCallback  <internal\\process\\next_tick.js:104:9>\n  at Command.target.(anonymous function) [as get]  <..\\..\\node_modules\\leadfoot\\Command.js:610:11>\n  at Suite.<anonymous>  <testsbuild\\functional\\reporters\\ScreenshotReporterTests.js:26:32>\n  at Suite.dispatcher  <..\\..\\node_modules\\intern\\browser_modules\\dojo\\aspect.ts:102:35>\n  at Promise.catch.suite.async  <..\\..\\node_modules\\intern\\lib\\Suite.js:237:51>\n  at new Promise  <..\\..\\node_modules\\intern\\browser_modules\\dojo\\Promise.ts:411:3>\n  at runLifecycleMethod  <..\\..\\node_modules\\intern\\lib\\Suite.js:219:12>\n  at runWithCatch  <..\\..\\node_modules\\intern\\lib\\Suite.js:349:15>\n  at next  <..\\..\\node_modules\\intern\\lib\\Suite.js:352:17>\n  at <..\\..\\node_modules\\intern\\browser_modules\\dojo\\Promise.ts:393:15>\n  at runCallbacks  <..\\..\\node_modules\\intern\\browser_modules\\dojo\\Promise.ts:11:11>\n. Moved to 52.1.1, seems to work fine now. Sorry I missed that geckodriver issue :(. I don't see why this needs to be a feature in intern itself, you could easily put a facade in front of the intern API to achieve the same result.\nYou then have the issue of finding the test in the source code which you will have to find by name anyway as the uid is transient :) (as @sholladay mentioned)\ne.g. (excuse the typescript example)\n\n// my-bdd.ts\nimport * as bdd from 'intern!bdd';\nimport Test = require(\"intern/lib/Test\");\nlet instance = 0;\nexport function describe(name: string, callback: () => void) {\n    // you could of course be smarter and figure out the depth too\n    return bdd.describe(++instance + \": \" + name, callback);\n}\nexport function it(name: string, callback: (this: Test) => any) {\n    return bdd.it(++instance + \": \" + name, callback);\n}\n// etc\n// test.ts\nimport * as bdd from \"my-bdd\";\nbdd.describe(\"a suite\", () => {\n    bdd.it(\"use as normal\", () => {\n});\n\n});\n. Do have a monkey patch for this at the moment, same applies for Command.executeAsync :). Any chance these PR's could be reviewed and/or merged? We are currently having to maintain an internal fork with these issues resolved.\nThanks,\nJonny. Thanks for taking a look. Sounds reasonable, agreed there was a bad small about failing all the tests if there was an error in the after. I wasn't too sure where status came from either but didn't want to remove it in case someone added it for a reason.\nI will have a look at doing what you suggested with regards to the before and after.. Sorry for the delay, so I have made some changes following suggestions by @jason0x43.\nIn summary:\n\nI have added a SuiteError which extends InternError and adds the associated lifecycle method.\nI have also centralised the typings for the lifecycle methods, see LifecycleMethod, using keyof Suite included more than just the lifecycle methods \nIf there are before/beforeEach errors then no children will be reported in that suite and will be replaced by a new testcase with the suite error\nIf there are after/afterEach errors then a testcase with the suite error will be added after the children. In this case I also added the associated test name for context.\nCheck that the test (it's really a test or suite) is actually a test before setting the related test. This meant that a comment + additional check in the toJSON method could be removed as the relatedTest will always be a test.\nAdded associated tests to suite and new tests for the updated JUnit report behaviour\n\nExample in jenkins:\nNote: There are duplicates as the tests have been run in both node and chrome\n\nAdditional comments:\n\nI feel it would be nicer to report beforeEach/afterEach errors on a test by test basis, rather than a suite error with an associated single test. For example, if an afterEach fails add an extra testcase after the test to represent that error or have the test itself throw with an AfterEach error. Changing this would also mean that there would be no need for a relatedTest on the InternError interface. Given these would be architecture changes I didn't really want to go down that route in this PR. LGTM and I like the fact it is additive. I have not cloned/tested though as I am assume this is a draft. Once there is a final proposal/beta I am more than happy to give the changes a test. \nNot sure if you want comments on the code given its a draft but two minor things:\nWould be nice for the InternError interface to have a string literal type for lifecycleMethod rather than string for syntactic sugar\nJUnit reporter, lines 140-144 and 152-156 look the same so could have a shared function?\n\n. Sadly I can't trigger a build but looks like it is a sporadic failure, very similar to this build https://travis-ci.org/theintern/intern/jobs/398455974. That would be preferred, however, the reporters specified in the config are additive to the defaults. This ultimately means that you are unable to remove the console reporter through the config.\nhttps://github.com/theintern/intern/blob/b99fe83a4816578aeb2c4cdf9f02d997e442b7c5/src/index.html#L38-L40\nEdit:\nI suppose this functionality could be extended to support removeFromExisting or a mechanism to override? (Removing the + on the index page has no effect)\nhttps://github.com/theintern/intern/blob/6a93567201e0e6cb8f9e813b5f6eaab8b4886962/src/lib/common/util.ts#L33-L37\n. Thanks for the investigation and explanation, I just missed clearing the top level reporters.. Just thought of a slight edge case related to my changes and have fixed accordingly. Upon investigating https://github.com/theintern/intern/pull/962, I noticed that there was a race condition in the name being set after the grep following the other changes in this PR.\nI have now added a failing tests for this and also a fix in 3a00d61\nhttps://github.com/theintern/intern/blob/6a93567201e0e6cb8f9e813b5f6eaab8b4886962/src/lib/executors/Executor.ts#L798-L799.\nI am 99% sure I have no more changes or PRs to raise and no more changes to make to this PR!. I am glad I left myself 1% wiggle room in my confidence. I have rolled this PR out throughout our builds and have found an issue with running unit tests via the Node runner. I haven't come across any issues when running functionalSuites or tests in the browser with the Html reporter.\nJust trying to find the appropriate fix and will add it to this PR once I get a clean run through our builds. Ok, will update accordingly. ",
    "ksamp666": "Hi csnover,\nWell, according to documentation we should do the following to run the test with Chromedriver:\n1. Download the latest version of ChromeDriver\n2. Set tunnel to 'NullTunnel'\n3. Run chromedriver --port=4444 --url-base=wd/hub\n4. Set your environments capabilities to [ { browserName: 'chrome' } ]\n5. Run the test runner\nBut this does not work, because chromedriver requires Xvfb to be up and running to open the browser. And just running Xvfb in background is not helping because chromedriver requires an additional configuration to use it (see here: https://code.google.com/p/selenium/issues/detail?id=2673). Intern should provide the possibilty to setup this configuration, but it does not.\nThank you!\n. ",
    "olemis": "I use the library in my personal projects and I'm in train of integrating it with code written by the brython-dev organization . As such , I'd be interested in fixing bugs (e.g. #584) and helping maintain this project .\n. I'm trying to replace dojo loader with require.js ; then configuring the later's baseUrl (via loaderOptions) to be an absolute URL , which seems to be supported . Nonetheless , the issue comes to light since intern pre-executor always normalizes paths at load time, thus breaking URL scheme prefix before actually supplying it to require.js AMD loader .\n. I see this issue from a different perspective .\nFirstly , the check for URLs is backwards compatible . IOW, after applying the patch, if a path is supplied in configuration entries , as usual , then the system behaves exactly the same as it did before applying the patch .\nBesides , if Intern offers the possibility of switching to a custom AMD loader, then there is no reason for polluting the configuration values that will be supplied in to that loader ( as I mentioned above normalization function breaks URL syntax ) . In that case it is obvious that Intern's Dojo loader is not meant to be used , so the fact that it (Intern's Dojo loader) does not support URL syntax is not applicable as a valid constraint or supporting argument anymore .\nThirdly , if URL syntax should be used under certain conditions (which is true in my particular case) , and a path should be supplied in when running tests on node environment , then conditional code may be executed prior to declaring config option values .\nFinally , all the following loaders seem to support URL syntax : requirejs , cajon , system.js , curl.js , melchior.js , browserify , steal.js , qoopido.demand ... and maybe others , I just stopped after these . Something else I noticed is that they also support the scheme-relative URL syntax e.g. //cdn.jsdelivr.net/jquery/2.1.4/jquery.min . In that case Intern's path normalization would also remove the two leading slash chars , thus breaking config semantics (again) not meant to be handled by Intern's Dojo loader .\n. ",
    "spalger": ":+1: excited to see this merged\n. We implemented a method similar to the one you described @jason0x43 and it has proved very useful when dealing with WebDriver.\nOurs is called tryForTime, it accepts a function and timeout and retries the function until its promise resolves or the timeout is reached. It behaves a lot like the find + findTimeout combo.\n. ",
    "kailo777": "It there are reason why the suppport for retry was not merged?. Is there any progress about the implentation from xit and fit?. @jason0x43 its there any progress about the implentation from xit and fit & xdescribe and fdescribe?. ",
    "arty-name": "@jason0x43, would it be possible to publish this fix to npm? The bug blocks us from updating any of our dependencies for quite some time now.\n. Thank you, @kitsonk!\n. ",
    "SwethaVitta": "Actually we have a application that uses leaflet js for displaying maps on browser. and we are doing lot of map operations using this leaflet library. we want to test this map functionalities by writing some automated tests.\nIs it possible through intern?\n. ",
    "laurentpayot": "Same bug here.\n. ",
    "jvanaert": "any news if this will be merged ? We also suffer from #586 \n. ",
    "tomdye": "@jason0x43 points addressed. Have maintained the setting of custom loader in the selfTest.local because otherwise the older version of intern does not use the dojo-loader when running selfTest, at least this way it will use the new dojo-loader locally.\n. dojo-core/has! plugin now used instead of dojo/has!\n. @kitsonk @jason0x43  Have updated in the dojo/loader issue, looks like intern is truncating the output somewhere thus it is not an upstream bug\n. Fine by me\nOn Monday, 4 April 2016, Jason Cheatham notifications@github.com wrote:\n\nThis looks good. How would you feel about nodeOptions rather than\nnodeFlags?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/theintern/intern/pull/604#issuecomment-205398608\n\n\nUrsa Minor Consulting Ltd\nMobile: 07793 024 793\nEmail: tom@ursaminor.co.uk\n. @jason0x43 have updated appropriately \n. Will this make the next release?\n. I needed to add the loaders config here to make the tests run with the dojo-loader otherwise I couldn't prove that it was working\n. ",
    "psingh4": "what is the plan to release/merge this? or is there a workaround/interim solution available for using es6 modules with intern to run in the node environment?. ",
    "jrgm": "This seems to give the right output, but need to run with this for a while and figure out what intern regression tests I need to run.\nhttps://github.com/theintern/intern/compare/3.0...jrgm:fix-record-stack-in-teamcity-reporter?expand=1\n\n. Okay, I know what to run now (I think). Now to figure out how to get the expected output to line up. Later.\n. Updated with tests. Not thrilled with the change in tests, but it does what it does ;-)\nhttps://github.com/jrgm/intern/commit/e29282f68e3c1670755f241f463e67d3623f184e\n@vladikoff - any comments? I'll put in a PR if it looks good (and I fill out the contributor thing).\n. ",
    "jquerybot": "Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).\n:memo: Please visit http://contribute.jquery.org/CLA/ to sign.\nAfter you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.\n\nIf you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.\n. ",
    "joshrhoades": "@d48 and are you going to give credit to who actually did this with our intern instance, which was actually me? :P\n. ",
    "ericuldall": "I don't believe I have any suites set to null:\nhttps://github.com/the-letter-e-production/termoil/tree/master/tests\n. Yes, uncommenting functionalSuites did the trick.\nNow set to: functionalSuites: [],\n. ",
    "erikdstock": "This broke tests in a test suite I'm running developing and running remotely from. I don't want to run unit tests (or more specifically visit client.html which does not exist on the system under test) but now that doesn't seem an option. My sauce tests tries to visit /__intern/client.html and gets lost.\nAm I missing something? Keeping suites out of my config did this before. now intern is trying to reduce on undefined.\n. Ah, sorry! Missed the full resolution and thought everyone had just settled on [].\n. ",
    "MahmudulHasan": "I was using the local server. \n. ",
    "mwistrand": "For what it's worth, when executing tests with { browserName: 'iPhone' }, this.remote.session.capabilities.touchEnabled is reported as false.. ",
    "chase-moskal": "Fixed as of #612 / 1369b35.\n. ",
    "gillyb": "You're right, although I still feel like running my tests locally happen so fast that it's hard to tell what's happening. I find myself adding various sleep() calls along with console.log() with information between different actions, until I manage to find out where exactly my test is breaking.\nIf we had a setting like this, then maybe it will be possible to add a helper method that will change the timeout configuration for each WebDriver command in a certain scope, so I'll be able to do something like this :\njavascript\nbdd.it('my test', function() {\n    let remoteDriver = this.remote;\n    return remoteDriver\n        .findByCssSelector('...')\n        .click().type('something').end()\n        // here starts the part i want to slow down by 1000ms for each WebDriver command\n        .slowdown(1000, function() {\n            return remoteDriver\n                .findByCssSelector('...')\n                .click()\n                .acceptAlert()\n                .end();\n        })\n        // more stuff that can happen fast...\n        .findByCssSelector('...').click().end()\n});\nDon't know... just a thought that might really help. :)\n. ",
    "michaeljota": "Is there any plans to support Webpack somehow? SystemJS it's not hard to configure, but Webpack it's also very popular.. I use VSCode and I'm not able to use the Typescript definitions with Javascript. This normally work out-of-the-box when types are well placed. . I'll post the issue there as well then. Keep this open just in case. \nUpdate: As a \"workaround\" (it works better actually):\nconfig.js\njs\n// Learn more about configuring this file at <https://theintern.github.io/intern/#configuration>.\n// These default settings work OK for most people. The options that *must* be changed below are the packages, suites,\n// excludeInstrumentation, and (if you want functional tests) functionalSuites\ndefine({\n...\n    tunnel: 'SeleniumTunnel',\n...\n});\n. ",
    "cch5ng": "thanks. I'm going to close this. I think possibly I had something missing in my configuration from Intern.js or Travis. I also upgraded my Intern version and right now I am not seeing this error.\n. ",
    "novemberborn": "@jason0x43 happy to do that as well. Just let me know.\n. ",
    "SaikiranHegde": "I was also facing the same problem in windows but when I changed the symbolic links of folders dojo, chai and diff to normal folder , my test started running..\n\n. ",
    "skrishnas": "Here's how I solved it:\nNavigate to this page and search for \"allowLinking\":\nhttps://tomcat.apache.org/tomcat-7.0-doc/config/context.html\nIn short what needs to be done is to enable linking by setting the aforementioned parameter in the server.xml file. Tomcat then is able to follow symlinks.\nHope this helps.\n. ",
    "tobiastom": "Sorry for the long delay. That is actually what I was looking for. \nLooks like @dylans is correct and it's only missing from the documentation. \nThanks for your help!\n. Thank you!\n. ",
    "sergibondarenko": "@dylans \nI use Firefox 46.0.1 and Selenium 2.53 from this package https://www.npmjs.com/package/selenium-standalone\n. I used setFindTimeout() method and now it works.\nreturn this.remote\n        .get(require.toUrl(kibiUrl))\n        .setFindTimeout(5000)\n        .findAllByLinkText('Dashboard')\n        .click()\n        .end()\n        .findByXpath('//ul[@class=\"nav nav-tabs\"]/li[' + tabNum + ']')\n        .click()\n        .end()\n        .findByXpath('//span[@title=\"' + tableName + '\"]/../../visualize//table/thead/tr/th[6]')\n        .moveMouseTo()\n        .findByXpath('./span/i')\n        .click()\n        .end()\n        .findByXpath('//span[@title=\"' + tableName + '\"]/../../visualize//table/tbody')\n        .getVisibleText()\n        .then(function (body) {\n          return body;\n        });\n. ",
    "seriema": "@jason0x43 was this fix the one in https://github.com/theintern/intern/releases/tag/3.2.3 ?\nWe still have the same issue with that version (ctrlKey is false). In 3.1.0 we can get the correct KeyboardEvent modifiers when we set requireWindowFocus: true, but Intern hangs in its capability testing phase as the mouse gets stuck outside the viewport. Setting fixSessionCapabilities: false bypasses that issue. But in 3.2.3 the ctrlKey is wrong, even with those settings.\n. @jason0x43 IE11, on Windows 10.\n. @jason0x43 Thanks. I had seen a similar issue, and the workaround in this comment is the one I mentioned above (it works in 3.1.x but not newer versions). Although sometimes one of our tests fail and trying again works, so it's not a stable workaround. Maybe knowing how requireWindowFocus and fixSessionCapabilities affects the kb modifiers will help Leadfoot work around it?\n. ",
    "sushantdhiman": "\nWhy don't you want to sign a CLA?\n\nMostly because I don't want to share all this personal info just to contribute to a project.\nYes there are some projects that still require CLAs but most of open source projects like (NodeJS, ROR, Bootstrap ) don't require CLA \n. > First Name, Last Name and an e-mail address are too much personal information? That is what you would essentially be providing with a Pull Request anyways.\nSorry that was my mistake, I thought everything in CLA form was required. I have no regrets in sharing what is already public.\n\nThat is debatable, you listed 3, I listed 6 Open Source Projects.\n\n:beers: \n. You mean https://contribute.jquery.org/CLA/\nThis can be my first PR :)\n. No, I did it on purpose. I was waiting from 20 days now :)\n. > Well, that seems a bit impatient honestly.\nYes, Its correct. But please see my point of view as well, A new contributor wants to merge something so trivial that can be reviewed in less than 1 minute, has no response from two weeks.\nLast PR was merged on 13 Apr (2 months ago). These facts disappoint me and makes me wonder if project is being maintained.\nSorry if I offended anyone in anyway, I never meant to. I just lost my enthusiasm to contribute after this wait.\n. I wasn't aware about ranged_versions :)\nBut I have already deleted my fork so can't revive this one. I am really busy with sequelize but will try to reopen it whenever I get chance.\n. ",
    "Tz3entch": "I faced exactly the same problems. And still looking for a solution.\n@dylans here is an example from my side.\nI tried to perform a swipe:\n\nreturn this.remote\n.pressFinger(360, 10)\n.moveFinger(360, 1000)\n\nAnd got an error from Appium:\n\n[debug] [MJSONWP] Calling AppiumDriver.touchDown() with args: [360,10,\"f36948ef-bec0-45c6-a374-bc7c51e2e0d0\"]\n[debug] [AndroidBootstrap] Sending command to android: {\"cmd\":\"action\",\"action\":\"element:touchDown\",\"params\":{\"elementId\":360,\"x\":10,\"y\":\"f36948ef-bec0-45c6-a374-bc7c51e2e0d0\"}}\n[AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got data from client: {\"cmd\":\"action\",\"action\":\"element:touchDown\",\"params\":{\"elementId\":360,\"x\":10,\"y\":\"f36948ef-bec0-45c6-a374-bc7c51e2e0d0\"}}\n[AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got command of type ACTION\n[AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got command action: touchDown\n[AndroidBootstrap] [BOOTSTRAP LOG] [debug] Returning result: {\"status\":13,\"value\":\"Invalid double: \"f36948ef-bec0-45c6-a374-bc7c51e2e0d0\"\"}. \n",
    "afunix": "The same issue here. I've tried touchDown action (Appium/Selenium: tap_and_hold())\nUsing Appium with WebUI works since MJSONWP passes only x and y:\n2017-04-18 19:38:20:086 - [HTTP] --> POST /wd/hub/session/950ae098-d25f-487d-80b5-c297759a2a7a/touch/down {\"y\":175,\"x\":0,\"sessionId\":\"950ae098-d25f-487d-80b5-c297759a2a7a\"}\n2017-04-18 19:38:20:087 - [MJSONWP] Driver proxy active, passing request on via HTTP proxy\n2017-04-18 19:38:20:092 - [debug] [JSONWP Proxy] Proxying [POST /wd/hub/session/950ae098-d25f-487d-80b5-c297759a2a7a/touch/down] to [POST http://127.0.0.1:8000/wd/hub/session/96ce73931daca48c4984de3a074d3965/touch/down] with body: {\"y\":175,\"x\":0,\"sessionId\":\"950ae098-d25f-487d-80b5-c297759a2a7a\"}\nAppium with native Android UI fails since MJSONWP maps arguments incorrectly (x is mapped to elementId, y is mapped to x, y is mapped to sessionId):\n2017-04-18 21:44:56:656 - [HTTP] --> POST /wd/hub/session/b0c30673-7ee4-40e9-8f99-1caed2141c43/touch/down {\"y\":946,\"x\":180,\"sessionId\":\"b0c30673-7ee4-40e9-8f99-1caed2141c43\"}\n2017-04-18 21:44:56:657 - [debug] [MJSONWP] Calling AppiumDriver.touchDown() with args: [180,946,\"b0c30673-7ee4-40e9-8f99-1caed2141c43\"]\n2017-04-18 21:44:56:660 - [debug] [AndroidBootstrap] Sending command to android: {\"cmd\":\"action\",\"action\":\"element:touchDown\",\"params\":{\"elementId\":180,\"x\":946,\"y\":\"b0c30673-7ee4-40e9-8f99-1caed2141c43\"}}\n2017-04-18 21:44:56:670 - [AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got data from client: {\"cmd\":\"action\",\"action\":\"element:touchDown\",\"params\":{\"elementId\":180,\"x\":946,\"y\":\"b0c30673-7ee4-40e9-8f99-1caed2141c43\"}}\n2017-04-18 21:44:56:671 - [AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got command of type ACTION\n2017-04-18 21:44:56:672 - [AndroidBootstrap] [BOOTSTRAP LOG] [debug] Got command action: touchDown\n2017-04-18 21:44:56:674 - [AndroidBootstrap] [BOOTSTRAP LOG] [debug] Returning result: {\"status\":13,\"value\":\"Invalid double: \\\"b0c30673-7ee4-40e9-8f99-1caed2141c43\\\"\"}\n. ",
    "npetrovi": "@afunix  I managed a fix in Appium for re-mapping x,y coords but it does not do anything.\nMy temp fix in Appium is like this : (however note that I hardcoded elementId but I definitely know it is 7 for my case).\n./node_modules/appium-android-bootstrap/lib/bootstrap.js line 108\n return await new Promise ((resolve, reject) => {\n  let cmd = Object.assign({cmd: type}, extra);\n  try {\n            if (cmd['params']['y'] !== undefined) {\n                    if (!Number.isInteger(cmd['params']['y'])) {\n                            console.log(\"WARN !!! y is not an integer. Try FIX\");\n                            cmd['params']['y'] = cmd['params']['x'];\n                            cmd['params']['x'] = cmd['params']['elementId'];\n                            cmd['params']['elementId'] = '7'; //temp\n                    }\n     }\n    }catch(err) {\n\n    }\n\nI have a list with multiple elements, and I am doing :  \n     browser.driver.touchActions()\n                      .tapAndHold(startLocation)\n                      .move(newLocation)\n                                                //\n                       .release(newLocation)\n                       .perform();\n\nwhere startLocation I take it from item1.getLocation() call  and : \n      var newLocation = {\n                                        x: startX,\n                                        y: startY + distance ; // distance is +300 or -300\n                                    };\n\nIt touches on the second element from the list but it does not scroll down (although I see scroll bar showing up). I tried both with distance negative or positive to test if y coords are down or up, but no effect.\nI have also asked a colleague of mine and the following works using the Java bindings:\n touchAction.press(startFromX, startFromY).waitAction(duration).\nmoveTo(endAtX, endAtY).release();       touchAction.perform();\n\nPlease tell me what to do to get scroll working with Protractor. Using latest appium 1.6.5-beta, latest protractor.\nUsing it on native Android app. I have not tested on iOS but probably same problem,. ",
    "henryprecheur": "Hi,\nI'm working on Sauce Connect at Saucelabs. I ran a short intern test on Linux: load google.com and return. I did see unecessary use of Sauce Connect for some assets that may explain your issues.\nI dumped the traffic between my computer and the tunnel:\n- tunnel \u2192 computer (1098 packets, 251kB)\n- computer \u2192 tunnel (841 packets, 1364kB)\nI saw around 1300kB of assets going through the HTTP proxy on the tunnel. I didn't see anything that would be cause for concerns on that front.\nHowever it looks like most of the assets going through Sauce Connect don't need to. For example there are lots of GET requests to apple.com, mozilla.org, & microsoft.com. Those requests can be taken out of Sauce Connect since they are requests to publicly accessible websites. The way Intern start Sauce Connect: all the traffic goes through it no matter if it is localhost or apple.com. Ideally only private assets are transferred through Sauce Connect, while public assets use the regular Internet which is faster.\nSauce Connect can ignore domains like apple.com with the --direct-domains option, or the --tunnel-domains option that allows you to specify which domains should use Sauce Connect.\nFor example, if the only private assets you have are on localhost and intern.org you can start up with the following:\n--tunnel-domaines localhost,intern.org\nI reran the same test but added args.push('--direct-domains', 'apple.com,microsoft.com,mozilla.org'); to digdug/SauceLabsTunnel.js in the _makeNativeArgs function to bypass those domains. Here's the traffic I saw:\n- tunnel \u2192 computer (748 packets, 220kB)\n- computer \u2192 tunnel (639 packets, 636kB)\nThat's half of what I saw before.\nLet me know if you have any questions.\nPS: We are aware that Sauce Connect's behaviour and the domain options should be better documented, it's unfortunate you had to struggle with this. We are working on better documentation.\n. ",
    "lucaswxp": "@dylans I get a error \"AssertionError: path must be a string\", so the require is the actual node js require I guess.\nES5 or ES6 generate the same error for me.\n. Can anyone reproduce this?\n. ",
    "lzhoucs": "I just want the file path part of it to be 'auto-expandable', currently it is blocked by the fact it starts as part of an existing argument config= instead of a fresh one. So as a workaround, I have to  type the file path first which is 'auto-expandable':\nnode_modules/.bin/intern-client tests/intern\nthen manually go back and add config=:\nnode_modules/.bin/intern-client config=tests/intern\n. ",
    "sophiecdd": "intern version: 3.2.3\n. Any updates on this issue?\n. Thanks @jason0x43 It works!\n. Sorry, I should have address my question as how to pass in args into intern test config as the format of my example...to be honest it is just a question, I shouldn't log it as an issue at the beginning.. ",
    "JeffHerb": "@sholladay sorry but no, the browser never opens up. This particular setup does not have an intern-client test, just functional test we send the a local selenium server. Our config file is using functionalSuites and the runner runType in the Gruntfile.\n. Some progress, not sure what changes, but these errors are showing on a Windows 7 test machine:\n\n. So i added basePath to my grunt config and my tests now load! But I now get new additional errors I have never seen before.\nBefore each set of functional test runs:\n\nAnd this new set after:\n\n. @sholladay Thanks for your help. I figured out my custom grunt task was causing the newer Suite Error as it generating a empty suites array in the intern.js config. Currently we are not doing unit testing, just functional. Though this is not really an issue, is it possible to disable that chart at the very end of the functional tests? \nClosing out this issue as it has been fixed. Thanks again!\n. ",
    "morrinene": "Per Jason, this is done!. Will create additional issues during review period as needed.. Some questions:\nESM support/workflow (how it works now)\nWork through how ESM is used to author and structure tests\nHow does Intern 4 load dependencies? How does someone include a loader for testing and/or running their app (is that a relevant question)\nDo we need any dynamic behavior to replace loader plugins?\nHow do we replace usage of dojo/has?\nAnything special with how we distribute our packages\nAnything special with test authoring structure or workflow to document?\n. This is done. Will create additional issues during review period as needed.. This is ok to close, discussion done. #784 . ",
    "ala85": "Hi, thanks. The problem is that I'd like intern to compile and run the test code using Webpack loaders. For example, in my Webpack configuration, I handle tpl files with an ejs-loader (https://github.com/okonet/ejs-loader) which I would like intern to use it when running the test against those tpl loaders.\nFrom your previous comment, I was expecting a reference of the jsx.js file in the intern loader section, but I havent found it. \nI am new to intern, but my understanding was that I should then create my own loader plugin which then calls Webpack loaders somehow to process the tested code?\n. Thanks. I am trying to create a custom loader, how would I use it in an intern.js configuration?\nI tried something like the following:\nloaders: {\n            'host-node': require.nodeRequire && require.nodeRequire('path').resolve('./intern/loader/customLoader.js'), // relative to package.json\n            'host-browser': './intern/loader/customLoader.js' // relative to this file\n        },\nwhere my customLoader.js file is defining an AMD module as the JSX file you provided, but I get an error about define not being a function. Do you have any examples about how to write a custom loader and how to link it in the intern file configuration?\n. ",
    "aFarkas": "There are multiple things that can be improved here, but probably the most heavy problem is the fact that the following lines are dead code. (i.e.: lastHash is always undefined.) Therefore you are running unneeded DOM mutations with every scroll.\n. ",
    "chuwy": "@jason0x43 yes, exactly. \nEdit: Sorry I confused <= symbol. Fixed now.\n. ",
    "Giwayume": "It looks like your loader is incorrectly mapping the define format:\ndefine('module/id', { factory: 'object' });\nAlso on a side-note, you're missing the isXdUrl utility on the local require that dojo/i18n uses.\nmix(mix(result, req), {\n    toUrl: function (name) {\n        return toUrl(name, module);\n    },\n    toAbsMid: function (mid) {\n        return toAbsMid(mid, module);\n    },\n        // Add me Add me Add me\n    isXdUrl: function(url){\n        if(/^\\./.test(url)){\n            return false;\n        }\n        if(/^\\/\\//.test(url)){\n            return true;\n        }\n        var match = url.match(/^([^\\/\\:]+\\:)\\/+([^\\/]+)/);\n        return match && (match[1] != location.protocol || (location.host && match[2] != location.host));\n    }\n});. The following changes fixed this problem for me:\nhttps://gist.github.com/Giwayume/15227d0ee5cf34a108cf799ed5a62d8f#file-intern-browser_modules-dojo-loader-js-L165-L174\nhttps://gist.github.com/Giwayume/15227d0ee5cf34a108cf799ed5a62d8f#file-intern-browser_modules-dojo-loader-js-L583-L597. ",
    "propafroz": "\"The Pretty reporter should show a spinner in a status row while testing; the list of test results doesn't show until after testing has finished.\"\nI see spinner and all test result at once after the tests got ended .Is there any other tweak/config required to display it ?. Yes ,my test suites were fast and small ,hence the progress bar was not visible .After adding some delay in some tests, it is now getting displayed. \nThanks for your prompt response .. ",
    "kulakowka": "You awesome! :beer:. ",
    "evil-shrike": "Any ideas?. @jason0x43 you were right, setting fixSessionCapabilities: false removes error from console. Thanks!. ",
    "cowwoc": "@jason0x43 The workaround worked perfectly. Thank you!\nAre you able to improve the error message so other users don't trip over this in the future?. ",
    "ervinb": "@dylans Let me know if you need a hand with Semaphore. :). @dylans Currently, we don't have support for configuration files per se, but the next best thing is to use shell scripts. For example, you'd have a ./scripts/ci.sh file, containing all your settings like dependency installation, language settings, etc. and you can initiate that script in your build steps.\nI'd love to help you guys out! Let me know if there's anything else I can do for you.. ",
    "ArtBlue": "@sholladay , under the specific use cases you've described the change would be meaningless and counterproductive. I completely agree there. However, I do think there is value in this for short-term references, whether for troubleshooting various tests in large suites when writing tests, or immediate references for tests that need to be looked at in the very near future. Depending on the frequency of changes one makes to a piece of code that requires new/updated tests, this could range from a day to months. My suggestion was not meant to solve the issues you've outlined in your specific scenarios.. @jonnycornwell , fair enough. Thanks for the consideration and the suggestion. . ",
    "alexre0": "Thanks!. ",
    "kimek": "from:  https://github.com/mozilla/geckodriver/issues/438\nandreastt commented an hour ago\n@kimek I\u2019m afraid Firefox 48 isn\u2019t supported. Please consider using Firefox Nightly with geckodriver whilst it is in a pre-release stage.\nOne of examples is random site on backbone : \n```js\ndefine([\n    'intern!object',\n    'intern/chai!assert',\n    'require',\n], function (registerSuite, assert, require) {\nregisterSuite({\n    name: 'Random Backbone test (functional)',\n    'submit form': function () {\n        return this.remote\n            .get('https://words-keeper.com/signup')\n            .findByCssSelector('.email-signup-link > a:nth-child(1)')\n                .click()\n                .end()\n            .sleep(2000)\n            .findByCssSelector('#signup-button')\n                .submit()\n                .end()\n            .sleep(3000);\n    }\n});\n\n});\n```\n```js\ndefine([ 'intern' ], function (intern) {\n    var config = {\n        proxyPort: 9000,\n        proxyUrl: 'http://localhost:9000/',\n        capabilities: {\n            fixSessionCapabilities: false,\n          },\n        environments: [ \n            { \n                browserName: 'firefox',\n                version: ['47'],\n                platform: 'Windows 7'\n            },\n        ],\n        maxConcurrency: 3,\n        tunnel:'SauceLabsTunnel',\n        tunnelOptions: {\n            verbose: true,\n          },\n        loaderOptions: {\n            packages: [\n            ]\n        },\n        functionalSuites: [ \n            // 'tests/functional/Todo', \n            'tests/functional/Recorder' \n        ],\n        defaultTimeout: 5000000,\n        excludeInstrumentation: true \n    };\nif (intern.mode === 'runner') {\n    config.reporters = [ 'Runner', 'Console', 'LcovHtml' ];\n}\n\nreturn config;\n\n});\n```\nThis works on 47 not on version above. Just informing about that as I spend days to crack on what's going on... ",
    "ajc24": "This has been here a while so I'm not sure where you still stand on this issue but I've had some issues with moveMouseTo() with Firefox myself lately and will update my experiences here in case it does help someone out.\nI initially posted about a hover event not working out for me on Stack Overflow as moveMouseTo() simply wasn't recognised when I was running my UI automation tests locally against Firefox. I since took that question down - simply because my suggested solution didn't work correctly after all, so I tried another, updated my response and found that wasn't reliable either. So rather than give anyone false information, I simply removed the question altogether.\nRight back to the topic - so what I was seeing was the same error you have highlighted here:\norg.openqa.selenium.UnsupportedCommandException: mouseMoveTo\nI'm also using the following version of Firefox:\n- Version 58.0.1 64 Bit\nI was running my tests with fixSessionCapabilities set to false and this, initially, was causing my problems with Firefox. What I did, then, was set that to true instead and, while this resolved the problem, I didn't want this set to true all of the time. I wanted to try and set an individual value in my configuration instead. I felt there had to be a better solution out there. Surely one of the settings that were in my capabilities list had to be the one I was looking for?\nSo firstly, I tried setting brokenMouseEvents and brokenHtmlMouseMove to true in my JSON configuration for Intern 4. However these didn't resolve my problem. In fact, these didn't affect things in a positive way at all. I found these only worked intermittently or not at all (right now I can't remember which one worked intermittently and which one didn't work at all).\nSo what I'm doing instead - and this works 100% of the time for me - was setting my mouse movements to work correctly in Firefox this way:\nthis.remote.session.capabilities.brokenMouseEvents = true;\nThis has never failed since I set my tests up to set the brokenMouseEvents parameter in this way. Never.\nYou also mentioned about using moveMouseTo() to scroll to an element. Truthfully I had not considered using that method at all for that purpose (just sheer inexperience on my end - didn't realise that I could use it for that). I am scrolling my window by using a simple piece of JavaScript in the execute method as follows:\nthis.remote\n  .execute('window.scrollTo(xPos, yPos);');\nThis may not be the ideal solution for everyone but it's working for me. I'm also using Intern 4 with tests that run on Sauce Labs and this method of scrolling is working on all devices - browsers, tablets, mobile phones etc.\nAnyway, I'm throwing it out there as an option.. ",
    "iulianvechiu": "Any more news on this? Still occurs, nobody seems to care :D. ",
    "Kiechlus": "I wait till I update to 5.0.0 again (way back was not too comfortable).\nThe problem later reappeared and could be solved with npm update -S. ",
    "geuis": "The problem I'm seeing is that there's not an easy (apparent) way to include environment variables into the config file, namely because its a static json document. Its probable I'm still missing something from the project documentation though. \nI tried your suggestion, loading dotenv as a plugin, in combination with adding the following as an environment variable in the .env file (real credentials omitted to protect the innocent). No bueno though.\nINTERN_ARGS=\"tunnelOptions='{\\\"username\\\":\\\"geuis-sauce\\\", \\\"accessKey\\\":\\\"abcdefg-0000-1111-2222-abcdefghijk\\\"}'\"\nThat's a kind of an awkward way of loading environment variables in any case, not a pattern I've really seen in any other projects.\nWhat would actually be really cool in the config json doc would be some kind of marker for a property that gets parsed as \"replace with matching environment variable\". Might look something like this:\n{\n  \"description\": \"Intern testing config\",\n  \"bail\": false,\n  \"connectTimeout\": 30000,\n  \"debug\": false,\n  \"maxConcurrency\": 4,\n  \"functionalSuites\": \"intern-tests/functional/**/*.js\",\n  \"tunnelOptions\": {\n    \"username\": \"@TUNNEL_USERNAME\",\n    \"accessKey\": \"@TUNNEL_ACCESSKEY\"\n  }\n}\nSo when intern.json gets loaded, @TUNNEL_USERNAME and @TUNNEL_ACCESSKEY get replaced by the matching values environment variables. Config might then fail with an error if any are missing, for example. . ",
    "CaptHarlock": "when using the filename option with the TeamCity test result reporter it doesnt output to the console . removing the filename option from my config resolved the issue. ",
    "bcoe": "\ud83d\udc4b hey, I'm one of the core contributors to Istanbul. Thanks for pulling these type definitions together. I'd love for these to be included in DefinitelyTyped (there aren't any competing definitions that I know of, certainly not any that are part of the project itself).. ",
    "nicojs": "Types can be found here: https://github.com/theintern/intern/tree/master/types. \ud83c\udf7e Thanks for providing the types to DT! \ud83d\udc90 . ",
    "rorticus": "We ended up using an istanbul loader for cli-build-webpack. It'd be great if this could be eventually moved to intern.\nhttps://github.com/dojo/cli-build-webpack/pull/209/files#diff-5b1a9474f4a8448cf3b8714376f9c9fa. For what it's worth, I just patched splitConfigPath locally to use the regex /^(.+?)(?:@([^\\/]+))?$/g and it seemed to work for my one case.. You could go with an emoji. That'd be fun to type in the terminal. node_modules/@dojo/cli-test-intern/intern/intern.json\ud83c\udf2dbrowserstack. ",
    "mo": "Also:\n$ npm ls\nintern-testing@1.0.0 /home/molsson/src/trying-out-web-e2e-frameworks/example-tests/intern\n\u2514\u2500\u252c intern@4.0.0-alpha.10\n  \u251c\u2500\u2500 @dojo/core@2.0.0-beta2.2\n  \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/has@2.0.0-beta2.2\n  \u251c\u2500\u2500 @dojo/interfaces@2.0.0-beta2.2\n  \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/shim@2.0.0-beta2.2\n  \u251c\u2500\u252c @theintern/dev@0.4.3\n  \u2502 \u251c\u2500\u252c chalk@2.0.1\n  \u2502 \u2502 \u251c\u2500\u252c ansi-styles@3.1.0\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c color-convert@1.9.0\n  \u2502 \u2502 \u2502   \u2514\u2500\u2500 color-name@1.1.3\n  \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.5\n  \u2502 \u2502 \u2514\u2500\u252c supports-color@4.2.0\n  \u2502 \u2502   \u2514\u2500\u2500 has-flag@2.0.0\n  \u2502 \u251c\u2500\u252c chokidar@1.7.0\n  \u2502 \u2502 \u251c\u2500\u252c anymatch@1.3.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 arrify@1.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c micromatch@2.3.11\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c arr-diff@2.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 arr-flatten@1.1.0\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 array-unique@0.2.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c braces@1.8.5\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c expand-range@1.8.2\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c fill-range@2.2.3\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u252c is-number@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2514\u2500\u2500 kind-of@3.2.2 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u252c isobject@2.1.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2514\u2500\u2500 isarray@1.0.0 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u252c randomatic@1.1.7\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u251c\u2500\u252c is-number@3.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u252c kind-of@3.2.2\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 is-buffer@1.1.5 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502 \u2514\u2500\u252c kind-of@4.0.0\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2502   \u2514\u2500\u2500 is-buffer@1.1.5 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u251c\u2500\u2500 repeat-element@1.1.2 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502   \u2514\u2500\u2500 repeat-string@1.6.1\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 preserve@0.2.0\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 repeat-element@1.1.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c expand-brackets@0.1.5\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-posix-bracket@0.1.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c extglob@0.3.2\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-extglob@1.0.0 deduped\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 filename-regex@2.0.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 is-extglob@1.0.0 deduped\n  \u2502 \u2502 \u2502   \u251c\u2500\u2500 is-glob@2.0.1 deduped\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c kind-of@3.2.2\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-buffer@1.1.5\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c normalize-path@2.1.1\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 remove-trailing-separator@1.0.2\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c object.omit@2.0.1\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c for-own@0.1.5\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 for-in@1.0.2\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-extendable@0.1.1\n  \u2502 \u2502 \u2502   \u251c\u2500\u252c parse-glob@3.0.4\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u252c glob-base@0.3.0\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u251c\u2500\u2500 glob-parent@2.0.0 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 is-glob@2.0.1 deduped\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 is-dotfile@1.0.3\n  \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 is-extglob@1.0.0 deduped\n  \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 is-glob@2.0.1 deduped\n  \u2502 \u2502 \u2502   \u2514\u2500\u252c regex-cache@0.4.3\n  \u2502 \u2502 \u2502     \u251c\u2500\u252c is-equal-shallow@0.1.3\n  \u2502 \u2502 \u2502     \u2502 \u2514\u2500\u2500 is-primitive@2.0.0 deduped\n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 is-primitive@2.0.0\n  \u2502 \u2502 \u251c\u2500\u2500 async-each@1.0.1\n  \u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY fsevents@^1.0.0\n  \u2502 \u2502 \u251c\u2500\u252c glob-parent@2.0.0\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-glob@2.0.1 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.3 deduped\n  \u2502 \u2502 \u251c\u2500\u252c is-binary-path@1.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 binary-extensions@1.8.0\n  \u2502 \u2502 \u251c\u2500\u252c is-glob@2.0.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-extglob@1.0.0\n  \u2502 \u2502 \u251c\u2500\u2500 path-is-absolute@1.0.1 deduped\n  \u2502 \u2502 \u2514\u2500\u252c readdirp@2.1.0\n  \u2502 \u2502   \u251c\u2500\u2500 graceful-fs@4.1.11 deduped\n  \u2502 \u2502   \u251c\u2500\u2500 minimatch@3.0.4 deduped\n  \u2502 \u2502   \u251c\u2500\u252c readable-stream@2.3.3\n  \u2502 \u2502   \u2502 \u251c\u2500\u2500 core-util-is@1.0.2 deduped\n  \u2502 \u2502   \u2502 \u251c\u2500\u2500 inherits@2.0.3 deduped\n  \u2502 \u2502   \u2502 \u251c\u2500\u2500 isarray@1.0.0 deduped\n  \u2502 \u2502   \u2502 \u251c\u2500\u2500 process-nextick-args@1.0.7 deduped\n  \u2502 \u2502   \u2502 \u251c\u2500\u2500 safe-buffer@5.1.1\n  \u2502 \u2502   \u2502 \u251c\u2500\u252c string_decoder@1.0.3\n  \u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 safe-buffer@5.1.1 deduped\n  \u2502 \u2502   \u2502 \u2514\u2500\u2500 util-deprecate@1.0.2 deduped\n  \u2502 \u2502   \u2514\u2500\u2500 set-immediate-shim@1.0.1\n  \u2502 \u251c\u2500\u2500 glob@7.1.2 deduped\n  \u2502 \u251c\u2500\u2500 semver@5.3.0\n  \u2502 \u251c\u2500\u252c shelljs@0.7.8\n  \u2502 \u2502 \u251c\u2500\u2500 glob@7.1.2 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 interpret@1.0.3\n  \u2502 \u2502 \u2514\u2500\u252c rechoir@0.6.2\n  \u2502 \u2502   \u2514\u2500\u2500 resolve@1.3.3 deduped\n  \u2502 \u251c\u2500\u252c tslint@5.5.0\n  \u2502 \u2502 \u251c\u2500\u252c babel-code-frame@6.22.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.3\n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.2.1\n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.5 deduped\n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0\n  \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.1.1\n  \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c strip-ansi@3.0.1\n  \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.1.1 deduped\n  \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2 deduped\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 js-tokens@3.0.2\n  \u2502 \u2502 \u251c\u2500\u2500 colors@1.1.2\n  \u2502 \u2502 \u251c\u2500\u2500 commander@2.11.0\n  \u2502 \u2502 \u251c\u2500\u2500 diff@3.2.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 glob@7.1.2 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 minimatch@3.0.4 deduped\n  \u2502 \u2502 \u251c\u2500\u252c resolve@1.3.3\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 path-parse@1.0.5 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 semver@5.3.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 tslib@1.7.1\n  \u2502 \u2502 \u2514\u2500\u252c tsutils@2.7.1\n  \u2502 \u2502   \u2514\u2500\u2500 tslib@1.7.1 deduped\n  \u2502 \u2514\u2500\u2500 typescript@2.4.1\n  \u251c\u2500\u252c @theintern/digdug@2.0.0-beta.7\n  \u2502 \u251c\u2500\u2500 @dojo/core@2.0.0-beta2.2\n  \u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/has@2.0.0-beta2.2 deduped\n  \u2502 \u251c\u2500\u2500 @dojo/interfaces@2.0.0-beta2.2 deduped\n  \u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/shim@2.0.0-beta2.2\n  \u2502 \u2514\u2500\u252c decompress@4.2.0\n  \u2502   \u251c\u2500\u252c decompress-tar@4.1.0\n  \u2502   \u2502 \u251c\u2500\u2500 file-type@3.9.0\n  \u2502   \u2502 \u251c\u2500\u2500 is-stream@1.1.0\n  \u2502   \u2502 \u2514\u2500\u252c tar-stream@1.5.4\n  \u2502   \u2502   \u251c\u2500\u252c bl@1.2.1\n  \u2502   \u2502   \u2502 \u2514\u2500\u2500 readable-stream@2.3.3 deduped\n  \u2502   \u2502   \u251c\u2500\u252c end-of-stream@1.4.0\n  \u2502   \u2502   \u2502 \u2514\u2500\u2500 once@1.4.0 deduped\n  \u2502   \u2502   \u251c\u2500\u2500 readable-stream@2.3.3 deduped\n  \u2502   \u2502   \u2514\u2500\u2500 xtend@4.0.1\n  \u2502   \u251c\u2500\u252c decompress-tarbz2@4.1.0\n  \u2502   \u2502 \u251c\u2500\u2500 decompress-tar@4.1.0 deduped\n  \u2502   \u2502 \u251c\u2500\u2500 file-type@3.9.0 deduped\n  \u2502   \u2502 \u251c\u2500\u2500 is-stream@1.1.0 deduped\n  \u2502   \u2502 \u251c\u2500\u2500 pify@2.3.0 deduped\n  \u2502   \u2502 \u251c\u2500\u252c seek-bzip@1.0.5\n  \u2502   \u2502 \u2502 \u2514\u2500\u252c commander@2.8.1\n  \u2502   \u2502 \u2502   \u2514\u2500\u2500 graceful-readlink@1.0.1\n  \u2502   \u2502 \u2514\u2500\u252c unbzip2-stream@1.2.4\n  \u2502   \u2502   \u251c\u2500\u252c buffer@3.6.0\n  \u2502   \u2502   \u2502 \u251c\u2500\u2500 base64-js@0.0.8\n  \u2502   \u2502   \u2502 \u251c\u2500\u2500 ieee754@1.1.8\n  \u2502   \u2502   \u2502 \u2514\u2500\u2500 isarray@1.0.0 deduped\n  \u2502   \u2502   \u2514\u2500\u2500 through@2.3.8\n  \u2502   \u251c\u2500\u252c decompress-targz@4.1.0\n  \u2502   \u2502 \u251c\u2500\u2500 decompress-tar@4.1.0 deduped\n  \u2502   \u2502 \u251c\u2500\u2500 file-type@4.4.0\n  \u2502   \u2502 \u2514\u2500\u2500 is-stream@1.1.0 deduped\n  \u2502   \u251c\u2500\u252c decompress-unzip@4.0.1\n  \u2502   \u2502 \u251c\u2500\u2500 file-type@3.9.0 deduped\n  \u2502   \u2502 \u251c\u2500\u252c get-stream@2.3.1\n  \u2502   \u2502 \u2502 \u251c\u2500\u2500 object-assign@4.1.1\n  \u2502   \u2502 \u2502 \u2514\u2500\u252c pinkie-promise@2.0.1\n  \u2502   \u2502 \u2502   \u2514\u2500\u2500 pinkie@2.0.4\n  \u2502   \u2502 \u251c\u2500\u2500 pify@2.3.0 deduped\n  \u2502   \u2502 \u2514\u2500\u252c yauzl@2.8.0\n  \u2502   \u2502   \u251c\u2500\u2500 buffer-crc32@0.2.13\n  \u2502   \u2502   \u2514\u2500\u252c fd-slicer@1.0.1\n  \u2502   \u2502     \u2514\u2500\u2500 pend@1.2.0\n  \u2502   \u251c\u2500\u2500 graceful-fs@4.1.11\n  \u2502   \u251c\u2500\u252c make-dir@1.0.0\n  \u2502   \u2502 \u2514\u2500\u2500 pify@2.3.0 deduped\n  \u2502   \u251c\u2500\u2500 pify@2.3.0\n  \u2502   \u2514\u2500\u252c strip-dirs@2.0.0\n  \u2502     \u2514\u2500\u2500 is-natural-number@4.0.1\n  \u251c\u2500\u252c @theintern/leadfoot@2.0.0-beta.10\n  \u2502 \u251c\u2500\u2500 @dojo/core@2.0.0-beta2.2\n  \u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/has@2.0.0-beta2.2 deduped\n  \u2502 \u251c\u2500\u2500 @dojo/interfaces@2.0.0-beta2.2 deduped\n  \u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY @dojo/shim@2.0.0-beta2.2\n  \u2502 \u251c\u2500\u2500 @theintern/dev@0.4.3 deduped\n  \u2502 \u2514\u2500\u252c jszip@3.1.3\n  \u2502   \u251c\u2500\u2500 core-js@2.3.0\n  \u2502   \u251c\u2500\u2500 es6-promise@3.0.2\n  \u2502   \u251c\u2500\u252c lie@3.1.1\n  \u2502   \u2502 \u2514\u2500\u2500 immediate@3.0.6\n  \u2502   \u251c\u2500\u2500 pako@1.0.5\n  \u2502   \u2514\u2500\u252c readable-stream@2.0.6\n  \u2502     \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502     \u251c\u2500\u2500 inherits@2.0.3 deduped\n  \u2502     \u251c\u2500\u2500 isarray@1.0.0\n  \u2502     \u251c\u2500\u2500 process-nextick-args@1.0.7\n  \u2502     \u251c\u2500\u2500 string_decoder@0.10.31\n  \u2502     \u2514\u2500\u2500 util-deprecate@1.0.2\n  \u251c\u2500\u2500 @types/benchmark@1.0.30\n  \u251c\u2500\u2500 @types/chai@4.0.1\n  \u251c\u2500\u252c @types/charm@1.0.0\n  \u2502 \u2514\u2500\u2500 @types/node@8.0.13\n  \u251c\u2500\u2500 @types/diff@3.2.0\n  \u251c\u2500\u2500 @types/lodash@4.14.69\n  \u251c\u2500\u2500 @types/mime-types@2.1.0\n  \u251c\u2500\u2500 @types/platform@1.3.0\n  \u251c\u2500\u2500 @types/source-map@0.1.29\n  \u251c\u2500\u252c @types/ws@0.0.42\n  \u2502 \u2514\u2500\u2500 @types/node@8.0.13 deduped\n  \u251c\u2500\u252c benchmark@2.1.4\n  \u2502 \u251c\u2500\u2500 lodash@4.17.4 deduped\n  \u2502 \u2514\u2500\u2500 platform@1.3.4 deduped\n  \u251c\u2500\u252c chai@4.0.2\n  \u2502 \u251c\u2500\u2500 assertion-error@1.0.2\n  \u2502 \u251c\u2500\u2500 check-error@1.0.2\n  \u2502 \u251c\u2500\u252c deep-eql@2.0.2\n  \u2502 \u2502 \u2514\u2500\u2500 type-detect@3.0.0\n  \u2502 \u251c\u2500\u2500 get-func-name@2.0.0\n  \u2502 \u251c\u2500\u2500 pathval@1.1.0\n  \u2502 \u2514\u2500\u2500 type-detect@4.0.3\n  \u251c\u2500\u252c charm@1.0.2\n  \u2502 \u2514\u2500\u2500 inherits@2.0.3\n  \u251c\u2500\u2500 diff@3.2.0\n  \u251c\u2500\u252c glob@7.1.2\n  \u2502 \u251c\u2500\u2500 fs.realpath@1.0.0\n  \u2502 \u251c\u2500\u252c inflight@1.0.6\n  \u2502 \u2502 \u251c\u2500\u2500 once@1.4.0 deduped\n  \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.2\n  \u2502 \u251c\u2500\u2500 inherits@2.0.3 deduped\n  \u2502 \u251c\u2500\u252c minimatch@3.0.4\n  \u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.8\n  \u2502 \u2502   \u251c\u2500\u2500 balanced-match@1.0.0\n  \u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1\n  \u2502 \u251c\u2500\u252c once@1.4.0\n  \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.2 deduped\n  \u2502 \u2514\u2500\u2500 path-is-absolute@1.0.1\n  \u251c\u2500\u2500 istanbul-lib-coverage@1.1.1\n  \u251c\u2500\u252c istanbul-lib-hook@1.0.7\n  \u2502 \u2514\u2500\u252c append-transform@0.4.0\n  \u2502   \u2514\u2500\u252c default-require-extensions@1.0.0\n  \u2502     \u2514\u2500\u252c strip-bom@2.0.0\n  \u2502       \u2514\u2500\u2500 is-utf8@0.2.1\n  \u251c\u2500\u252c istanbul-lib-instrument@1.7.4\n  \u2502 \u251c\u2500\u252c babel-generator@6.25.0\n  \u2502 \u2502 \u251c\u2500\u252c babel-messages@6.23.0\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 babel-runtime@6.23.0 deduped\n  \u2502 \u2502 \u251c\u2500\u252c babel-runtime@6.23.0\n  \u2502 \u2502 \u2502 \u251c\u2500\u2500 core-js@2.4.1\n  \u2502 \u2502 \u2502 \u2514\u2500\u2500 regenerator-runtime@0.10.5\n  \u2502 \u2502 \u251c\u2500\u2500 babel-types@6.25.0 deduped\n  \u2502 \u2502 \u251c\u2500\u252c detect-indent@4.0.0\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c repeating@2.0.1\n  \u2502 \u2502 \u2502   \u2514\u2500\u252c is-finite@1.0.2\n  \u2502 \u2502 \u2502     \u2514\u2500\u2500 number-is-nan@1.0.1\n  \u2502 \u2502 \u251c\u2500\u2500 jsesc@1.3.0\n  \u2502 \u2502 \u251c\u2500\u2500 lodash@4.17.4 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 source-map@0.5.6 deduped\n  \u2502 \u2502 \u2514\u2500\u2500 trim-right@1.0.1\n  \u2502 \u251c\u2500\u252c babel-template@6.25.0\n  \u2502 \u2502 \u251c\u2500\u2500 babel-runtime@6.23.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babel-traverse@6.25.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babel-types@6.25.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babylon@6.17.4 deduped\n  \u2502 \u2502 \u2514\u2500\u2500 lodash@4.17.4 deduped\n  \u2502 \u251c\u2500\u252c babel-traverse@6.25.0\n  \u2502 \u2502 \u251c\u2500\u2500 babel-code-frame@6.22.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babel-messages@6.23.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babel-runtime@6.23.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babel-types@6.25.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 babylon@6.17.4 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 debug@2.6.8 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 globals@9.18.0\n  \u2502 \u2502 \u251c\u2500\u252c invariant@2.2.2\n  \u2502 \u2502 \u2502 \u2514\u2500\u252c loose-envify@1.3.1\n  \u2502 \u2502 \u2502   \u2514\u2500\u2500 js-tokens@3.0.2 deduped\n  \u2502 \u2502 \u2514\u2500\u2500 lodash@4.17.4 deduped\n  \u2502 \u251c\u2500\u252c babel-types@6.25.0\n  \u2502 \u2502 \u251c\u2500\u2500 babel-runtime@6.23.0 deduped\n  \u2502 \u2502 \u251c\u2500\u2500 esutils@2.0.2\n  \u2502 \u2502 \u251c\u2500\u2500 lodash@4.17.4 deduped\n  \u2502 \u2502 \u2514\u2500\u2500 to-fast-properties@1.0.3\n  \u2502 \u251c\u2500\u2500 babylon@6.17.4\n  \u2502 \u251c\u2500\u2500 istanbul-lib-coverage@1.1.1 deduped\n  \u2502 \u2514\u2500\u2500 semver@5.3.0 deduped\n  \u251c\u2500\u252c istanbul-lib-report@1.1.1\n  \u2502 \u251c\u2500\u2500 istanbul-lib-coverage@1.1.1 deduped\n  \u2502 \u251c\u2500\u252c mkdirp@0.5.1\n  \u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8\n  \u2502 \u251c\u2500\u2500 path-parse@1.0.5\n  \u2502 \u2514\u2500\u252c supports-color@3.2.3\n  \u2502   \u2514\u2500\u2500 has-flag@1.0.0\n  \u251c\u2500\u252c istanbul-lib-source-maps@1.2.1\n  \u2502 \u251c\u2500\u252c debug@2.6.8\n  \u2502 \u2502 \u2514\u2500\u2500 ms@2.0.0\n  \u2502 \u251c\u2500\u2500 istanbul-lib-coverage@1.1.1 deduped\n  \u2502 \u251c\u2500\u2500 mkdirp@0.5.1 deduped\n  \u2502 \u251c\u2500\u252c rimraf@2.6.1\n  \u2502 \u2502 \u2514\u2500\u2500 glob@7.1.2 deduped\n  \u2502 \u2514\u2500\u2500 source-map@0.5.6 deduped\n  \u251c\u2500\u252c istanbul-reports@1.1.1\n  \u2502 \u2514\u2500\u252c handlebars@4.0.10\n  \u2502   \u251c\u2500\u2500 async@1.5.2\n  \u2502   \u251c\u2500\u252c optimist@0.6.1\n  \u2502   \u2502 \u251c\u2500\u2500 minimist@0.0.8 deduped\n  \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.3\n  \u2502   \u251c\u2500\u252c source-map@0.4.4\n  \u2502   \u2502 \u2514\u2500\u2500 amdefine@1.0.1\n  \u2502   \u2514\u2500\u252c uglify-js@2.8.29\n  \u2502     \u251c\u2500\u2500 source-map@0.5.6 deduped\n  \u2502     \u251c\u2500\u2500 uglify-to-browserify@1.0.2\n  \u2502     \u2514\u2500\u252c yargs@3.10.0\n  \u2502       \u251c\u2500\u2500 camelcase@1.2.1\n  \u2502       \u251c\u2500\u252c cliui@2.1.0\n  \u2502       \u2502 \u251c\u2500\u252c center-align@0.1.3\n  \u2502       \u2502 \u2502 \u251c\u2500\u252c align-text@0.1.4\n  \u2502       \u2502 \u2502 \u2502 \u251c\u2500\u2500 kind-of@3.2.2 deduped\n  \u2502       \u2502 \u2502 \u2502 \u251c\u2500\u2500 longest@1.0.1\n  \u2502       \u2502 \u2502 \u2502 \u2514\u2500\u2500 repeat-string@1.6.1 deduped\n  \u2502       \u2502 \u2502 \u2514\u2500\u2500 lazy-cache@1.0.4\n  \u2502       \u2502 \u251c\u2500\u252c right-align@0.1.3\n  \u2502       \u2502 \u2502 \u2514\u2500\u2500 align-text@0.1.4 deduped\n  \u2502       \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n  \u2502       \u251c\u2500\u2500 decamelize@1.2.0\n  \u2502       \u2514\u2500\u2500 window-size@0.1.0\n  \u251c\u2500\u2500 lodash@4.17.4\n  \u251c\u2500\u252c mime-types@2.1.15\n  \u2502 \u2514\u2500\u2500 mime-db@1.27.0\n  \u251c\u2500\u2500 platform@1.3.4\n  \u251c\u2500\u252c shell-quote@1.6.1\n  \u2502 \u251c\u2500\u2500 array-filter@0.0.1\n  \u2502 \u251c\u2500\u2500 array-map@0.0.0\n  \u2502 \u251c\u2500\u2500 array-reduce@0.0.0\n  \u2502 \u2514\u2500\u2500 jsonify@0.0.0\n  \u251c\u2500\u2500 source-map@0.5.6\n  \u2514\u2500\u252c ws@2.3.1\n    \u251c\u2500\u2500 safe-buffer@5.0.1\n    \u2514\u2500\u2500 ultron@1.1.0\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/shim@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/shim@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/core@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/has@next, required by @dojo/shim@2.0.0-beta2.2\nnpm ERR! peer dep missing: @dojo/shim@next, required by @dojo/core@2.0.0-beta2.2\n. I workaround this using:\nnpm install @dojo/has@next\nnpm install @dojo/shim@next\n...if that's the right thing to do, it would be nice if the readme mentioned this. My project does not use dojo outside of intern.\n. Installing using npm 5.3.0 worked indeed!. ",
    "codecov-io": "Codecov Report\n\nMerging #778 into master will decrease coverage by 0.04%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #778      +/-\n==========================================\n- Coverage    66.6%   66.55%   -0.05%   \n==========================================\n  Files          48       47       -1   \n  Lines        3539     3555      +16   \n  Branches      665      670       +5   \n==========================================\n+ Hits         2357     2366       +9   \n- Misses       1060     1063       +3   \n- Partials      122      126       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/node/util.ts | 89.83% <100%> (+1.36%) | :arrow_up: |\n| src/lib/executors/Executor.ts | 86.64% <100%> (-0.13%) | :arrow_down: |\n| src/lib/executors/Node.ts | 88.63% <61.11%> (-1.58%) | :arrow_down: |\n| src/intern.ts | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef65c52...ba5c897. Read the comment docs.\n. # Codecov Report\nMerging #781 into master will increase coverage by 0.28%.\nThe diff coverage is 60.49%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #781      +/-\n==========================================\n+ Coverage   66.96%   67.24%   +0.28%   \n==========================================\n  Files          47       47            \n  Lines        3566     3554      -12   \n  Branches      675      670       -5   \n==========================================\n+ Hits         2388     2390       +2   \n+ Misses       1046     1036      -10   \n+ Partials      132      128       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Runner.ts | 0% <0%> (\u00f8) | :arrow_up: |\n| src/lib/RemoteSuite.ts | 86.31% <0%> (-1.06%) | :arrow_down: |\n| src/lib/reporters/Coverage.ts | 100% <100%> (\u00f8) | :arrow_up: |\n| src/lib/executors/Node.ts | 89.5% <83.33%> (+0.9%) | :arrow_up: |\n| src/lib/Server.ts | 89.44% <96.66%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc3e690...c1af12d. Read the comment docs.\n. # Codecov Report\nMerging #802 into master will decrease coverage by 0.02%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #802      +/-\n==========================================\n- Coverage   92.96%   92.93%   -0.03%   \n==========================================\n  Files          54       54            \n  Lines        4349     4361      +12   \n  Branches      942      944       +2   \n==========================================\n+ Hits         4043     4053      +10   \n- Misses        306      308       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Html.ts | 90.16% <85.71%> (-0.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67ce151...4be0f00. Read the comment docs.\n. # Codecov Report\nMerging #810 into master will increase coverage by <.01%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #810      +/-\n==========================================\n+ Coverage   92.96%   92.96%   +<.01%   \n==========================================\n  Files          54       54            \n  Lines        4349     4351       +2   \n  Branches      942      942            \n==========================================\n+ Hits         4043     4045       +2   \n  Misses        306      306\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/Deferred.ts | 88.46% <83.33%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e21260...edcadb4. Read the comment docs.\n. # Codecov Report\nMerging #813 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #813      +/-\n==========================================\n+ Coverage   93.02%   93.04%   +0.01%   \n==========================================\n  Files          54       54            \n  Lines        4347     4358      +11   \n  Branches      943      945       +2   \n==========================================\n+ Hits         4044     4055      +11   \n  Misses        303      303\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/node/util.ts | 96.92% <100%> (\u00f8) | :arrow_up: |\n| src/tasks/intern.ts | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e543ba5...ed79b44. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@44fcdfd). Click here to learn what that means.\nThe diff coverage is 97.77%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #815   +/-\n=========================================\n  Coverage          ?   93.07%         \n=========================================\n  Files             ?       55         \n  Lines             ?     4393         \n  Branches          ?      955         \n=========================================\n  Hits              ?     4089         \n  Misses            ?      304         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Pretty.ts | 91.11% <100%> (\u00f8) | |\n| src/lib/reporters/Cobertura.ts | 100% <100%> (\u00f8) | |\n| src/lib/reporters/TextCoverage.ts | 100% <100%> (\u00f8) | |\n| src/lib/reporters/Simple.ts | 100% <100%> (\u00f8) | |\n| src/lib/reporters/HtmlCoverage.ts | 100% <100%> (\u00f8) | |\n| src/lib/reporters/Runner.ts | 98.89% <100%> (\u00f8) | |\n| src/lib/reporters/Coverage.ts | 96.96% <80%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44fcdfd...ee49a0b. Read the comment docs.\n. # Codecov Report\nMerging #819 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #819   +/-\n=======================================\n  Coverage   93.07%   93.07%         \n=======================================\n  Files          55       55         \n  Lines        4393     4393         \n  Branches      955      955         \n=======================================\n  Hits         4089     4089         \n  Misses        304      304\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ce94a2...ab8b07f. Read the comment docs.\n. # Codecov Report\nMerging #821 into master will decrease coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #821      +/-\n==========================================\n- Coverage   93.06%   92.99%   -0.07%   \n==========================================\n  Files          56       56            \n  Lines        4411     4411            \n  Branches      955      955            \n==========================================\n- Hits         4105     4102       -3   \n- Misses        306      309       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/executors/Executor.ts | 85.2% <100%> (-0.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6df7551...6d2e385. Read the comment docs.\n. # Codecov Report\nMerging #842 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #842      +/-\n==========================================\n+ Coverage   92.51%   92.51%   +<.01%   \n==========================================\n  Files          57       57            \n  Lines        4543     4544       +1   \n  Branches      981      981            \n==========================================\n+ Hits         4203     4204       +1   \n  Misses        340      340\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/executors/Executor.ts | 86.71% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a0685dd...8312880. Read the comment docs.\n. # Codecov Report\nMerging #879 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #879   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4598     4598         \n  Branches     1002     1002         \n=======================================\n  Hits         4251     4251         \n  Misses        347      347\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dde0e3d...3d5e33f. Read the comment docs.\n. # Codecov Report\nMerging #881 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #881   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4598     4598         \n  Branches     1002     1002         \n=======================================\n  Hits         4251     4251         \n  Misses        347      347\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a401c3a...0a58fe2. Read the comment docs.\n. # Codecov Report\nMerging #882 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #882   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4598     4598         \n  Branches     1002     1002         \n=======================================\n  Hits         4251     4251         \n  Misses        347      347\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a58fe2...f56177f. Read the comment docs.\n. # Codecov Report\nMerging #916 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #916   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4624     4624         \n  Branches     1012     1012         \n=======================================\n  Hits         4275     4275         \n  Misses        349      349\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7d20e5...d854704. Read the comment docs.\n. # Codecov Report\nMerging #918 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #918   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4624     4624         \n  Branches     1012     1012         \n=======================================\n  Hits         4275     4275         \n  Misses        349      349\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7d20e5...6726c0c. Read the comment docs.\n. # Codecov Report\nMerging #921 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #921   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4624     4624         \n  Branches     1012     1012         \n=======================================\n  Hits         4275     4275         \n  Misses        349      349\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8623430...7fa466f. Read the comment docs.\n. # Codecov Report\nMerging #930 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #930   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4624     4624         \n  Branches     1012     1012         \n=======================================\n  Hits         4275     4275         \n  Misses        349      349\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Html.ts | 86.81% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 457c09e...1810949. Read the comment docs.\n. # Codecov Report\nMerging #931 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #931   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4624     4624         \n  Branches     1012     1012         \n=======================================\n  Hits         4275     4275         \n  Misses        349      349\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 457c09e...be8f57c. Read the comment docs.\n. # Codecov Report\nMerging #934 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #934      +/-\n==========================================\n- Coverage   92.45%   92.45%   -0.01%   \n==========================================\n  Files          58       58            \n  Lines        4624     4623       -1   \n  Branches     1012     1012            \n==========================================\n- Hits         4275     4274       -1   \n  Misses        349      349\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/node/util.ts | 97.43% <\u00f8> (\u00f8) | :arrow_up: |\n| src/lib/browser/util.ts | 92.59% <\u00f8> (\u00f8) | :arrow_up: |\n| src/lib/middleware/instrument.ts | 97.43% <100%> (-0.07%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 457c09e...03d6c91. Read the comment docs.\n. # Codecov Report\nMerging #935 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #935   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4623     4623         \n  Branches     1012     1012         \n=======================================\n  Hits         4274     4274         \n  Misses        349      349\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 25effe5...b3f91ba. Read the comment docs.\n. # Codecov Report\nMerging #946 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #946   +/-\n=======================================\n  Coverage   92.45%   92.45%         \n=======================================\n  Files          58       58         \n  Lines        4623     4623         \n  Branches     1012     1012         \n=======================================\n  Hits         4274     4274         \n  Misses        349      349\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/JUnit.ts | 97.29% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3080180...2b159b7. Read the comment docs.\n. # Codecov Report\nMerging #955 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #955      +/-\n==========================================\n+ Coverage   92.62%   92.69%   +0.07%   \n==========================================\n  Files          58       58            \n  Lines        4567     4611      +44   \n  Branches      990     1007      +17   \n==========================================\n+ Hits         4230     4274      +44   \n  Misses        337      337\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/Suite.ts | 96.52% <100%> (+0.07%) | :arrow_up: |\n| src/lib/reporters/JUnit.ts | 97.91% <100%> (+0.65%) | :arrow_up: |\n| src/lib/common/ErrorFormatter.ts | 95.28% <0%> (-0.95%) | :arrow_down: |\n| src/loaders/dojo.ts | 100% <0%> (\u00f8) | :arrow_up: |\n| src/lib/reporters/Runner.ts | 97.4% <0%> (+0.05%) | :arrow_up: |\n| src/lib/reporters/Html.ts | 87.42% <0%> (+0.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0137f88...e411c83. Read the comment docs.\n. # Codecov Report\nMerging #956 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #956      +/-\n==========================================\n+ Coverage   92.62%   92.62%   +<.01%   \n==========================================\n  Files          58       58            \n  Lines        4567     4571       +4   \n  Branches      990      992       +2   \n==========================================\n+ Hits         4230     4234       +4   \n  Misses        337      337\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Runner.ts | 97.4% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0137f88...7b69a57. Read the comment docs.\n. # Codecov Report\nMerging #958 into master will decrease coverage by 2.47%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #958      +/-\n==========================================\n- Coverage   92.62%   90.14%   -2.48%   \n==========================================\n  Files          58       58            \n  Lines        4567     4567            \n  Branches      990      990            \n==========================================\n- Hits         4230     4117     -113   \n- Misses        337      450     +113\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/browser/util.ts | 0% <0%> (-92.5%) | :arrow_down: |\n| src/lib/ProxiedSession.ts | 31.57% <0%> (-59.65%) | :arrow_down: |\n| src/loaders/systemjs.ts | 80% <0%> (-15%) | :arrow_down: |\n| src/lib/common/ErrorFormatter.ts | 94.33% <0%> (-1.89%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0137f88...d4c7654. Read the comment docs.\n. # Codecov Report\nMerging #961 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #961      +/-\n==========================================\n+ Coverage   92.64%   92.67%   +0.03%   \n==========================================\n  Files          58       58            \n  Lines        4582     4601      +19   \n  Branches      997     1000       +3   \n==========================================\n+ Hits         4245     4264      +19   \n  Misses        337      337\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/Suite.ts | 96.67% <100%> (+0.22%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99fe83...3a00d61. Read the comment docs.\n. # Codecov Report\nMerging #962 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #962      +/-\n==========================================\n+ Coverage   92.64%   92.65%   +0.01%   \n==========================================\n  Files          58       58            \n  Lines        4582     4576       -6   \n  Branches      997      995       -2   \n==========================================\n- Hits         4245     4240       -5   \n+ Misses        337      336       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/browser/util.ts | 93.24% <100%> (+0.74%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b99fe83...df35327. Read the comment docs.\n. # Codecov Report\nMerging #968 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #968   +/-\n=======================================\n  Coverage   92.68%   92.68%         \n=======================================\n  Files          58       58         \n  Lines        4595     4595         \n  Branches      998      998         \n=======================================\n  Hits         4259     4259         \n  Misses        336      336\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/reporters/Html.ts | 87.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9df142...fcdad41. Read the comment docs.\n. # Codecov Report\nMerging #969 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #969      +/-\n=========================================\n+ Coverage   92.68%   92.7%   +0.01%   \n=========================================\n  Files          58      59       +1   \n  Lines        4595    4605      +10   \n  Branches      998     999       +1   \n=========================================\n+ Hits         4259    4269      +10   \n  Misses        336     336\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/Server.ts | 78.61% <100%> (+0.27%) | :arrow_up: |\n| src/lib/middleware/filterUrl.ts | 100% <100%> (\u00f8) | |\n| src/lib/common/ErrorFormatter.ts | 95.28% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 46c785a...7e641d9. Read the comment docs.\n. # Codecov Report\nMerging #978 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #978      +/-\n==========================================\n- Coverage   56.75%   56.74%   -0.02%   \n==========================================\n  Files          60       60            \n  Lines        4678     4679       +1   \n  Branches     1009     1009            \n==========================================\n  Hits         2655     2655            \n- Misses       2023     2024       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/lib/executors/Node.ts | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85bbebd...8e002e5. Read the comment docs.\n. \n",
    "stefaneidelloth": "I just saw in the feature matrix that Intern\n\"Runs tests in parallel for improved performance\"\nhttps://theintern.github.io/\nDoes that parallel \"only\" mean multiple types of browsers at the same,\nor also several tests for one type of browser at the same time?\n. >It sounds like you\u2019re interested in having a test runner partition a test set and run different groups on different instances of the same browser at the same time?\nYes, exactly.. ",
    "thegecko": "Are there plans to support the default npm shipped with node 4? 2.x I assume.. Ack, it simply makes it more difficult to explain requirements to our customers \ud83d\ude00. Thanks Dylan. It simply means our test system is using a newer version of npm than is shipped with the node version we support. It makes me marginally nervous that we support a setup not directly tested :). Ack, I'll pin 4.1.2 for now :). ",
    "dbow": "Got it, yeah I noticed that arrow function too! Might be worth mentioning explicitly in the docs? The main line from the README is \"Intern can run unit tests in browsers that support ECMAScript 5\" - it sounds like that's not entirely accurate for Intern 4.. ",
    "inad9300": "I was looking to the file that I modified in this request directly from Firefox, loading the intern.js file from unpkg. It complained about a missing default.js file, which I then loaded from my local version of Intern. (And for consistency then, I started loading intern.js from my local copy as well.). Thanks for the explanation. I still don't understand why the end users see this -- it makes no sense to us at all, creating confusion, and it delays the execution of the tests. (I don't understand either how including this in the shipped runner is even useful to anyone.) In any case, I suppose skipping it by default would be the most sensible option.\nIf you happen to encounter this magic flag you've mentioned, please share it with us!. Thanks, that works nicely. As you predicted, by setting the flag to false I managed to reduce the total time my tests last from ~10s to ~8s, which I appreciate very much. (Running Chrome in headless mode reduces another ~half a second; and bit by bit the feedback loop shortens and the value of the tests increases.). Thanks for the clarification! I think I would personally prefer an explicit import intern from 'intern';, so that everyone is clear about where the intern variable is coming from. But OK, I understood now, sorry for the inconvenience and thanks for your time :). Actually, is \"types\" allowed at the root level of tsconfig.json? I have stumbled upon this again and remembered this issue. I believe the correct configuration would be\njson\n{\n    \"compilerOptions\": {\n        \"types\" : [\"intern\"]\n    }\n}\nEdit I have opened a pull request in case you agree, https://github.com/theintern/intern/pull/881.. This has been merged already.. I simply run intern from package.json, with no arguments, so I suppose I'm using the Selenium tunnel.. I'm not yet sure if it's related with Intern, as I removed the \"pretty\" reporter but still got some unexpected errors from Travis CI. I opened an issue on their side too -- https://github.com/travis-ci/travis-ci/issues/9142. In that case, the error read \"Driver info: driver.version: unknown\".. It finally was not related to Intern. Chrome was not available (not installed, or didn't have enough privileges to run), possibly because some updates they did on the Travis CI side recently.. Indeed, I also didn't realize initially \ud83d\ude04. I have stumbled upon this issue again. This is my configuration:\njson\n{\n    \"environments\": [\"firefox\"],\n    \"capabilities\": {\n        \"fixSessionCapabilities\": \"no-detect\"\n    },\n    \"suites\": [\"build/**/*.spec.js\"],\n    \"coverage\": [\"build/**/!(*.spec).js\"],\n    \"reporters\": [\"pretty\"]\n}\nAnd this is the error:\nbash\n! Cannot read property 'numToReport' of undefined\nTypeError: Cannot read property 'numToReport' of undefined\n  at Pretty.suiteEnd  <src/lib/reporters/Pretty.ts:162:41>\n  at <src/lib/reporters/Reporter.ts:94:31>\n  at <src/lib/executors/Executor.ts:302:30>\n  at <node_modules/@dojo/core/async/Task.ts:351:12>\n  at handler  <node_modules/@dojo/core/async/ExtensiblePromise.ts:229:14>\n  at process._tickCallback  <internal/process/next_tick.js:109:7>\n! [POST http://localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"idle-timeout\":60,\"name\":\"intern\",\"browserName\":\"firefox\",\"moz:firefoxOptions\":{\"args\":[\"headless\"]}}}] Unable to create new service: GeckoDriverService\nBuild info: version: '3.5.2', revision: '10229a9020', time: '2017-08-21T17:54:21.164Z'\nSystem info: host: 'dlaptop', ip: '127.0.1.1', os.name: 'Linux', os.arch: 'amd64', os.version: '4.4.0-116-generic', java.version: '1.8.0_151'\nDriver info: driver.version: unknown\nSessionNotCreatedException: [POST http://localhost:4444/wd/hub/session / {\"desiredCapabilities\":{\"idle-timeout\":60,\"name\":\"intern\",\"browserName\":\"firefox\",\"moz:firefoxOptions\":{\"args\":[\"headless\"]}}}] Unable to create new service: GeckoDriverService\nBuild info: version: '3.5.2', revision: '10229a9020', time: '2017-08-21T17:54:21.164Z'\nSystem info: host: 'dlaptop', ip: '127.0.1.1', os.name: 'Linux', os.arch: 'amd64', os.version: '4.4.0-116-generic', java.version: '1.8.0_151'\nDriver info: driver.version: unknown\n  at Server.post  <node_modules/src/Server.ts:367:14>\n  at Server.createSession  <node_modules/src/Server.ts:412:14>\n  at Suite.before  <src/lib/executors/Node.ts:471:8>\n  at <src/lib/Suite.ts:388:19>\n  at new Task  <node_modules/@dojo/core/async/Task.ts:239:3>\n  at runLifecycleMethod  <src/lib/Suite.ts:355:10>\n  at before  <src/lib/Suite.ts:458:10>\n  at Suite.run  <src/lib/Suite.ts:477:6>\n  at <src/lib/executors/Node.ts:799:20>\n  at FunctionQueue.next  <src/lib/executors/Node.ts:923:16>\nI'm using elementary OS (0.4.1 Loki), and have Firefox 58 installed.. I've also noticed the following code:\n```ts\nregisterSuite('Performance', {\n    // ...\n'update values'() {\n    component.update({ value: 20 });\n},\n\n// An async test will be passed a Deferred object\nasync(request(dfd) {\n    component.request('something.html').then(\n        () => { dfd.resolve(); },\n        error => { dfd.reject(error); }\n    );\n})\n\n});\n```\nWhere I believe async(request(dfd) { should become async(function (dfd) {.\nPlease, confirm this and I'll add it to the pull request.. Did you have a look at my second comment? Please, do so when you have a moment :). OK, by giving it a filename it seems to work, i.e.\njson\n{\n    \"name\": \"benchmark\",\n    \"options\": {\n        \"filename\": \"test.json\"\n    }\n},\n{\n    \"name\": \"jsoncoverage\",\n    \"options\": {\n        \"filename\": \"coverage.json\"\n    }\n}\nBut the error message should be clearer. (And I still think the reporter should not run with benchmarking disabled.)\nNotice also the big inconsistency in the output of the two reporters above: the first creates test.json while the second one creates coverage/coverage.json (and the directory cannot be configured for the second case as far as I can tell).. I found another exception...\nbash\n! Cannot read property 'stats' of undefined\nTypeError: Cannot read property 'stats' of undefined\n  at checkTest  <src/lib/reporters/Benchmark.ts:240:34>\n  at BenchmarkReporter.testEnd  <src/lib/reporters/Benchmark.ts:340:20>\n  at <src/lib/reporters/Reporter.ts:94:31>\n  at <src/lib/executors/Executor.ts:302:30>\n  at <node_modules/@dojo/core/async/Task.ts:351:12>\n  at handler  <node_modules/@dojo/core/async/ExtensiblePromise.ts:229:14>\nIs there any real-world example of a benchmarking setup with Intern that I can have a look at? I'm trying to create a performance test for a function (such that I have the function in a file, unit tests in another file, and performance tests in a third file), but I have no clue how to properly configure Intern.. I do not understand. \"Functional tests suites will run only in Node\"? I thought it was the other way around, and that functional tests are those which involve interaction with a browser from the point of view of an end user.\nMy questions are still valid, I think: why is this not supported, and how can one achieve what I'm after (perhaps two different configs, perhaps child configs...)?\nIn general, I would say if some config is unsupported, validation should be put in place. Is there a plan to improve on this area?. So, by removing the unit tests from the functionalSuites option, i.e. by having this configuration\njson\n{\n    \"environments\": [\"node\", \"chrome\"],\n    \"suites\": [\"build/**/*.spec.js\"],\n    \"functionalSuites\": [\"build/**/*.func.js\"],\n    \"reporters\": [\"pretty\"]\n}\nThe unit tests still only run in Node. I get the same result as before:\nbash\n\u2713 node - specification - runs\n\u2713 chrome 64.0.3282.167 on Linux - functional - click button\nThe only difference being that now I cannot run the unit tests in Chrome, even if I leave Chrome as the only environment.. ",
    "fireundubh": "I think the majority of my confusion is coming from the mix of Intern 3 and Intern 4 tutorials and documentation between the GitHub readme and the new manual.. Trying to follow this tutorial, but the tutorial isn't quite as basic as the author believes. How about a tutorial that does not use TypeScript, SystemJS, Concurrently, CPX, and TSLib, and which uses only the programmatic interface Dylan Schiemann talked about in his LinkedIn post?. ",
    "varunjayaraman": "I see. the documentation is pretty sparse on this front. Any way you could add actual usage examples to the docs / how to import keys such that it's available? \nAs for the solution you suggested, i changed it to .pressKeys(' ') and my alert still logs out an undefined event code with:\njavascript\nalert(`Event Code: ${ event.code }`). ",
    "bright21051": "@jason0x43  Thank you.\nResolved.. @jason0x43 \nsample project:\ntraintest.zip\nThanks.\n. @jason0x43 \nerror TS2300: Duplicate identifier 'Buffer' appeared, because in the path: traintest\\src\\train\\libs\\modules\\main-web and node.js both have Buffer declared(repeat declare).\nAnd I tried to change the buffer name in node.js(but not sure whether affect the normal operation of node.js), it didn't appear about buffer's error. But still has the message of referenceError: puremvc is not defined.  . ",
    "alvaroortega": "Hello, I'm having exactly the same issue causing our dev env is broken. I checked and I saw the version 3 has some backwards incompatibilities and also 4 does. \nversion 4 seems to be significantly different to version 2 so I decided to upgrade to version 3 first and see how it goes. NPM was able to finish so our dev env is back and running tho we cannot run the tests suites anymore.\nWe use a customised interns runner with PhantomJS 2.1.1 and this is what I got:\n```\nRunning \"fa_internjs:unit\" (fa_internjs) task\nClient configured to: http://localhost:8888/node_modules/fa-internjs-runner/node_modules/intern/client.html?config=app%2Fdist%2Ftests%2Fintern.js&reporters=%2Fnode_modules%2Ffa-internjs-runner%2Freporters%2Fphantom.js\nPhantomjs test runner running PhantomJS: 2.1.1\n\n\nClient HTML config replaced\nServer listening to port: 8888\nServer started\n\n\ninfo: Error: Failed to load module /node_modules/fa-internjs-runner/app/dist/tests/intern.js from /node_modules/fa-internjs-runner/app/dist/tests/intern.js (parent: *11)\ninfo:\ninfo:   http://localhost:8888/node_modules/fa-internjs-runner/node_modules/intern/browser_modules/dojo/loader.js:518 in handler\n```\napp/dist/tests/internjs is in the root directory but for some reason dojo loader is searching there.\nAlso just out of curiosity. We just noticed this issue when we tried to bootstrap a fresh clone of our repo. Was the removal of this dependency noticed somewhere we missed? It seems the version 2 can't be used anymore.\nThanks. I'll give it a try right now. And let you know, thanks. Our target is to upgrade our tech stack but better if you are not under pressure of a broken build pipe hehe. \nAny thoughts on my issue above tho? I have tried setting a basePath I have tried changing \nloader by loaderOptions on intern.js as I understood from here https://github.com/theintern/intern/releases/tag/3.0.0\nand setting a basePath property but no luck.. not there. is a config option I pass to the task runner. What I'm not sure is when /node_modules/fa-internjs-runner is being injected to the path.\nI can see on client.hmlt this bit:\nvar initialBaseUrl = (function () {\n    var result = /[?&]initialBaseUrl=([^&]*)/.exec(location.search);\n    if (result) {\n    var baseUrl = decodeURIComponent(result[1]);\n    if (/^(?:\\w+:)?\\/\\//.test(baseUrl)) {\n        throw new Error('Cross-origin loading of test modules is not allowed for security reasons');\n    }\n    return baseUrl;\n    }\n    else {\n    // For users running client.html directly, assume that the initial base URL is two levels up\n    // (the parent directory of node_modules/intern); this is most common.\n        // Users that need something special can provide a different `initialBaseUrl`.\n    return internPath.replace(/(?:\\/+[^\\/]*){2}\\/?$/, '/');\n     }\n})();\nFrom the comment I guess I should define initialBaseUrl on intern.js? Within the loaderOptions properties?. No luck, same results. Also I have tried installing 2.2.3 but this time I'm getting xhrRequest Failing. I observed that now the dojo dependency is called \"@theintern/dojo\": \"2.0.0-alpha.1\" which creates an extra level. I have sorted out modifying the client.html to point to the correct path.\nI have created a ticket #871 and I tried to create a PR but I'm not allow to commit a branch into the repo. Upgrading to version 3.4.6 is looking good now. Apart from the changes on the config file I need to rewrite the reporter now according to these notes: https://github.com/theintern/intern/releases?after=3.0.4\nI have had to add the config param initialBaseUrl to tell the client where the config file is. Also basePath needs to be now a self property of the config file, not par of loaderOptions. @jason0x43 I got intern 3.4.6 up and running fine on my environment now. I have one last question I think.\nIn order to allow writing tests using ES6 we have babel. using grunt i got a custom task that among other things basically injects that dependency into client.html module:\n<title>Browser test runner</title>\n<script src=\"browser_modules/dojo/loader.js\"></script>\n<script src=\"/app/libs/babel-polyfill/dist/polyfill.min.js\"></script>\nIt works but I wonder if there is a civilised way to add this external support. Any ideas?\nThanks. thanks for that. This seems to be available only for version 4 no? we are using version 3.4.6. In case it is of any help. I just found a way to solve this in our side which is using the config file to set the map property.\nloader: {\n...\n        map: {\n            intern: {\n                dojo: 'intern/node_modules/@theintern/dojo',\n                chai: 'intern/node_modules/chai/chai',\n                diff: 'intern/node_modules/diff/diff'\n            },\n            '*': {\n                'intern/dojo': 'intern/node_modules/@theintern/dojo'\n            }\n...\n        },. Also, you are right. newer versions of node are hoisting the deeper dependencies to the main node_modules but this would break a big chunk of legacy code for us so it won't be easy to upgrade node version now.. I correct myself. I think the cache played on me. That fix I mentioned does not really have any effect. I need a way to update the path from outside the client.html. I think this basically prevents me doing what I intended to do. https://github.com/theintern/intern/pull/351 . Ahh, sorry I thought it was. Indeed I realised client.html is parsed by the browser before intern is taken into account so I abandoned that possibility. I thought I could use a custom runner task on grunt to parse the file and modify the string as changing node version is breaking loads of other things.\nI'm trying in parallel upgrading to version 3 but it also requires changing the config a bit and probably rewrite reporter according to release notes.\nJust out of curiosity, how happen the path had to be changed?\nThanks. That makes perfect sense. \nActually loader was not working right for us and we had to inject on client.html a dependency to dojo we had stored on lib. I wonder if that may be the cause.. ",
    "marzetas": "Same issue here.\n@jason0x43 Please do, it will alleviate the pain while moving to intern 3 (or 4) . ",
    "wiltshirek": "thanks Dylan.  appreciated.\nOn Thu, Jan 18, 2018 at 4:18 PM, Dylan Schiemann notifications@github.com\nwrote:\n\nClosed #873 https://github.com/theintern/intern/issues/873.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/theintern/intern/issues/873#event-1431298886, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE3y70n0g1PduODaHH3ftcIQabczPalZks5tL7UmgaJpZM4RjUOx\n.\n\n\n-- \nKen Wiltshire | Computer Applications Developer\n5715 Ave N | Brooklyn, NY 11234\nDirect (347) 675-5213\n. ",
    "mmarsella": "I am on OS X 10.11.6 and Chrome  v64.0.3282.186.  I am also getting the same error:\n! Cannot read property 'numToReport' of undefined\nTypeError: Cannot read property 'numToReport' of undefined\n  at Pretty.suiteEnd  <src/lib/reporters/Pretty.ts:162:41>\n  at <src/lib/reporters/Reporter.ts:94:31>\n  at <src/lib/executors/Executor.ts:302:30>\n  at <node_modules/@dojo/core/async/Task.ts:351:12>\n  at handler  <node_modules/@dojo/core/async/ExtensiblePromise.ts:229:14>\n  at <anonymous>\n  at process._tickCallback  <internal/process/next_tick.js:188:7>\nMy config for the test is:\n```\n{\n  \"proxyPort\": 9000,\n\"capabilities\": {\n    \"name\": \"single_test\",\n    \"build\": \"intern-browserstack\",\n    \"browserstack.local\": false,\n    \"fixSessionCapabilities\": false\n  },\n\"defaultTimeout\": 300000,\n\"environments\": [\n    {\n      \"browserName\": \"chrome\"\n    }\n  ],\n\"maxConcurrency\": 1,\n// \"tunnel\": \"browserstack\",\n\"tunnelOptions\": {\n    \"verbose\": true,\n    \"username\": \"myName\",\n    \"accessKey\": \"myKey\"\n  },\n\"reporters\": [\"pretty\"],\n\"loaderOptions\": {\n    \"packages\": null\n  },\n\"suites\": null,\n\"functionalSuites\": [\"dist/functional/tests/demo.js\"],\n\"excludeInstrumentation\": true\n}\n```\nThis error only occurs when I comment out \"tunnel: \"browserstack\" / using the default Selenium tunnel.. ",
    "agubler": "Hey @bthallion there is an incompatibility between the version of chromedriver that intern uses and version 65 of chrome. It has been updated in master of intern but until then you should be able to specify the chrome driver version in your intern config \n\"tunnel\": \"selenium\",\n            \"tunnelOptions\": {\n                \"hostname\": \"localhost\",\n                \"port\": 4444,\n                \"drivers\": [\n                    {\n                        \"name\": \"chrome\",\n                        \"version\": \"2.36\"\n                    }\n                ]. ",
    "bthallion": "That worked, thanks!. I'm also having this problem. ",
    "lethevimlet": "Nice, that makes total sense, thanks @jason0x43, missed  the config syntax.. I'm starting to feel alone in this post T_T . My project I'ts currently using intern 4.1.5 with its default Leadfoot version, which I believe to be 2.0.3.\n\n. My bad, this is already supported \ud83e\udd26\u200d\u2642\ufe0f \ntunnelOptions.restUrl\nThis link https://theintern.io/digdug/module-digdug_SauceLabsTunnel.html should be added to the Intern doc section explaining tunnel config.\nUnexpected output difference between US and EU servers\nI must be missing something or there's must be an issue using restUrl property, since using US account works like a charm whereas adding restUrl and using the EU account yields the following error\nUS account (Everything OK!):\n\nThe same config, just changing auth data to an EU account and adding restURL pointing to the EU rest API (Throws ERROR!):\n\nHere is the actual test:\nindex.html\n```\n\n  var greet = function (name) {\n    if (!name) {\n      name = \"world\";\n    }\n    return \"Hello, \" + name + \"!\";\n  };</p>\n<p>function internTest(callback) {\n    setTimeout(function () {\n      callback(greet(\"Murray\"));\n    }, 1000);\n  }\n\n```\ntest.js\n```\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\nsuite(\"hello\", () => {\n    test(\"greet\", ({ remote }) => {\n        return remote.get(intern.config.remoteUrl + \"/index.html\").sleep(1000).executeAsync(function (callback) {\n            internTest(callback);\n        }).then(function (value) {\n            assert.strictEqual(value, \"Hello, Murray!\", \"greet should return a greeting for the person named in the first argument\");\n        });\n});\n\n});\n```\nSo, unfortunately, in a way or another, the issue title still applies : (. Here is a workaround until this gets fixed:\nCreate an Intern plugin with the following code:\n```\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nintern.on(\"afterRun\", () => {\n  return new Promise(resolve => {\n    // Gracefully close tunnel\n    var testingbot_tunnel_pid = path.join(__dirname, \"testingbot-tunnel.pid\");\n    if(fs.existsSync(testingbot_tunnel_pid)) {\n      fs.unlinkSync(testingbot_tunnel_pid);\n    }\n    resolve();\n  });\n});\n```\nThis will delete testingbot-tunnel.pid file which will gracefully close the tunnel as specified by the TestingBot documentation.\nNote: You need to change the path of testing_tunnel_pid file according to your project layout . ",
    "Jun12121988": "Thank a lot!. ",
    "GARMBoshouwers": "Has anyone had time to check this? Is there something I can provide that is missing?\nThis is still an issue in my running tests on selenium 3.4.0 as in the latest selenium version 3.11.0. Did you have a chance to check this bug out?\nIt blocks me from automatically testing our application in FireFox and Edge.\nIs there anything I can provide that could help?. I tried this in newer versions, it is still an issue\nSelenium 3.14.0\nIntern version: 4.3.2\nNode version: 9.3.0\nChrome webdriver 2.43\nGecko webdriver 0.23 (32b)\nEdge webdriver 17134. These were all local tests.. You mean getting MicrosoftWebDriver to run, or running tests in general? I needed a new webdriver and a windows update this morning, but after that it went ok, except for this issue.\nAlso, the Edge developer tools seemed to stop working after that windows update, so update at your own risk, I guess.. @jason0x43 Did you have any time to check this yet?. ",
    "jiayexie": "I'm suffering from this problem too. It is intermittent, and it seems like actual network failure between the machine running tests and BrowserStack.\nI have seen this on Chrome, Edge and IE; I'm not behind a proxy.\nRight now my team is wrapping every step behind a retry to work around this issue. It'll be great if intern provides an internal retry to resolve network connection issues, or allow customizing the network timeout tolerance.. Hi @jason0x43 , thanks for your prompt response. I checked my code and connectTimeout is actually set to 2 minutes; I'm surprised if that is still not enough. I will add more logging to troubleshoot that.\n\nhaving to retry typically indicates a problem in the tests or a problem in the network. An actual fix would be to make the tests more robust (less timing-sensitive) or to resolve the network issue\n\nI understand your philosophy, but the issue is we are running tests on agent machines hosted outside our control that actually experience intermittent network issues. Our tests are not time-sensitive; it is just the API call (e.g. find element; click element, or even set window size, etc.) that is timing out.\nWhen I talk about a retry, I'm not talking about retrying a test case; I'm talking about retrying that lower-level REST API call because my network can be spotty. Does that make sense?. Thank you! :). ",
    "lzw5090": "Hi @jason0x43, our connectTimeout is set as 2 minutes,  but we got another \"connect ETIMEDOUT\" error about 20 seconds after we received the first timeout error when the API call was retrying. The config and timestamp are attached below:\n\n\n. Hi @jason0x43, I decreased \"connectTimeout\" to a small value such as 10-10. Our test results were unaffected and the \"connect ETIMEDOUT\" error didn't show up. It seems  \"connectTimeout\" not working in our test. We would highly appreciate your suggestion.. @jason0x43\nDoes this happen all the time or only with specific browsers or operating systems on BrowserStack? Are you behind a proxy?\nWe are not behind a proxy. This is intermittent. Our tests are running on windows 10 operating systems with Chrome, IE, and Edge. The \"connect ETIMEDOUT\" error shows in every browser.. Thanks so much!. ",
    "AlonMiz": "+1. A related issue is that you cannot run parallel functional tests at all.\nUnless they are configured on different browsers - which means I can't run 2 tests in parallel on chrome v66 for example.. @jason0x43 any news? :/\ncurrently, our solution is to spawn multiple child node processes, get the stdout and stderr, and parse the output to figure out fail and success suites and tests.\nthis is really hard and prone to errors, and really ugly.\n. ",
    "janpe": "Is this going to be a priority at some point? Hoping for a fix.. ",
    "Alon87": "I fixed this on my intern tests by giving the last spec the following  promise command:\nawait remote.end();\nThis will tell the remote (Webdriver) to close the current session. I hope this helps.. ",
    "ryuuji3": "Yes it happens all the time with a normal chrome instance.. ",
    "nialna": "This worked for me, thanks.\nIt seems that I have to call end() after every interaction though. Is that the expected behaviour? I thought running a new findById command implied not reusing the previous references, but maybe I misunderstood something from the samples.. Yeah, it seems to be the behaviour.\nAlso the mouseMoveTo command takes an optional element parameter, so I assume that when this parameter is omited, behind the scene it automatically takes the current element from the context and use that, which in my previous code caused the same stale reference.\nI had to findById another element that actually worked, in order to be able to use moveMouseTo, so it's relative to the current context.\nThe functional tests documentation does use end(), but it doesn't really mention why it's necessary and I think I just didn't notice it was there. Maybe it could be edited to make that context system more obvious? (I can make a PR if that's a good idea). ",
    "schontz": "In case you are running into this issue just downgrade to Intern 4.2.x until this bug is closed.. Great! This fix will be available in intern 4.3.1 then?. Reinstalled intern, confirmed intern is at 4.3.0 and @theintern/common is at 0.1.1 and the problem persists.. Ah, yes. I've got 0.1.1 in dependencies, but 0.1.0 in the sub-dependencies of @theintern packages in package-lock.json. What's the best way to solve that problem?. Ran those and the issue persists. \n`-- intern@4.3.0\n  +-- @theintern/common@0.1.1\n  +-- @theintern/digdug@2.2.0\n  | `-- @theintern/common@0.1.1  deduped\n  `-- @theintern/leadfoot@2.2.0\n    `-- @theintern/common@0.1.1  deduped. Great. I tried running 4.3.0 again and it still failed. I assume there's something that needs to be updated in npm or elsewhere first?. Yay! It works!. Related to this, if no tests in a suite match the grep condition, none of the before/after functions should run either. . \n. Awesome! Thank you.. ",
    "justinballerstein": "Thanks I will track this down, it was a basic template, closing the issue. ",
    "NikolayMakhonin": "For example, I not found in the documentation how to use command line. I think it is worthwhile to include such examples in the documentation:\nCommand line usage:\n...\nnode_modules/.bin/intern help\nnode_modules/.bin/intern config=env/intern.json configParam1=value1 configParam2=value2\nBriefly and clearly\nI not sure that this code is correct (I did not find this in the documentation):\nnode_modules/.bin/intern configParam1.subParam1.subParams2=value1\nI think the documentation should contain more examples, even if they seem obvious. And even better with links to the project with an example, so that I can see the context of this piece of code.\nNow it is very difficult to understand how to set up a project for the full use of the \"intern\". These examples are insufficient. I think it is worth to make one example project with implementation of the maximum number of intern functions.\nIt's 100 times easier for me to look at the sample code than to read the text description and guess how the code should look, where to place the files and what the possibilities of using the tool are. For example, after a long study of documentation and examples, I am not sure whether the \"intern\" can replace the \"karma\", because only a real example can show it.. ",
    "ascorbic": "That's great. Thanks for merging. When can we expect the next release?. ",
    "apsdehal": "Fixed!\n. ",
    "agcolom": "Hi, I just spotted a small typo: catched -> caught \n. "
}