{
    "nostalgiaz": "@nostalgiaz :heart: @volpino \n. ",
    "sectioneight": "@sds Looks good to me, although I'd probably refactor some of the common code out. Also, tests would be nice so we don't break this in the future. Thoughts?\n. I have the same failures. I mentioned this to @sds, but they pass on his machine. I assumed it was a fluke, but it's clearly a bug.\nI'll investigate this further.\n. @volpino: I identified the issue (Sass changed the internal representation of properties) and pushed a fix to master. Please rebase on top of cfadb81a7cb0c1566402e5c01ad010a45d34e098 and try your test again.\n. I believe this is now enforced, no?\n. Closed via af21f14f0e23fccd99133086d11990cf6ff90095\n. Thanks for the bug report. I've found a repro case and will work on fixing this up:\ncss\n  p {\n    margin: percentage(1 / 100) percentage(1 / 100);\n  }\n. Turned out to be a simple fix. I've just cut version 0.6.5 of the gem, which should work. Let me know if you're still having issues.\nCheers,\nAiden\n. @lifeiscontent as with most shell script variable parsing, spaces signify separation of flags. To pass multiple ignores to scss-lint, use a comma but no space:\nscss-lint app/assets/stylesheets -i declared_name_linter,sorted_properties_linter\n. The error message is misleading, however, since scss-lint is trying to lint files in \"sorted_properties_linter\" thinking that's another target you're specifying (since your space separated it out from the --ignore binding).\nI've got a fix forthcoming that will output a more helpful error message, rather than barfing and stacktracing.\n. Hmm, I see that you've chosen not to support the 1.8 series. Carry on then...\n. ",
    "sds": "@sectioneight Agreed. If outputting different formats is going to come up again it would probably make sense to encapsulate it in some kind of Reporter class which handles the responsibility of constructing the output from the list of lints.\nFor now though, since we're only supporting two output formats this seems fine to me, though I too would like to see tests written so we don't break the format down the road when a refactor occurs.\n@volpino You mention you're not a Ruby developer. Would you be comfortable adding some tests for this? Adding a cli_spec.rb file to the spec directory would be the start of specs to confirm the output of the command-line tool, which would be awesome.\n. Hey @volpino, thanks for all the work you put into this PR. I ended up coding up a slightly different solution after doing a bunch of refactoring, which made what you're trying to do easier. Thanks for your interest in scss-lint!\n. Thanks for the suggestion. This should be straightforward to implement. I'll get around to this as soon as I can, but feel free to submit a pull request if you need it now.\n. Great suggestion, and this wouldn't be hard to implement. When I have some spare cycles I'll add this, but if you're hankering for it now feel free to submit a pull request.\n. There's some work to be done traversing the Sass::Script::Node parse tree, which we didn't bother implementing since we weren't making heavy use of interpolation at the time. However, this sounds like something that we'll need to support, in at least not reporting lints for lines that use interpolation, since it's hard to do static analysis in situations where dynamic substitution is occurring. \nI'll schedule time to look into at least making this lint quiet when interpolation is used (but hopefully we won't need to be that strict).\n. Looks like we'll have to add a whitelist of properties to limit this lint check for. My quick research indicates the following properties are the ones where this shorthand syntax makes sense.\n- margin\n- padding\n- border-width\n- border-color\n- border-style\n- border-radius\n. @ghurrell agreed, will close as not an bug.\n. Thanks for the report! I've prepared a fix, and will merge it once it's gone through our code review process.\nThanks for using scss-lint!\n. We've made an executive decision at @causes to strictly enforce splitting rule declarations into a multi-line format. The reason for this is that it makes diffs easier to read, as you can add/remove properties without touching the selector sequence itself. It also promotes consistency, as we don't need to choose between one-lining and multi-lining, as the default is always multi-line.\n. After committing fcb1e05, running the above SCSS through the linter returns no lints.\nThanks for the report!\n. Good suggestion @neagle. I've added a Requirements section to the README in 1f56cc5.\nThanks for using scss-lint!\n. I believe you have stumbled across a bug, but looking at the stack trace I don't believe it has anything to do with recursively searching the directory. The problem seems to be triggered by a @media node within one of your SCSS files. I've come up with a repro case, and have renamed the bug accordingly.\nThanks for the report!\n. Sass doesn't differentiate between hyphens and underscores in variables/functions/mixin names as it is considered a stylistic preference (https://github.com/nex3/sass/issues/334#issuecomment-4687066), so you can just refer to sprite_names as sprite-names. At @causes, we feel that the hyphen is superior to the underscore as you don't need to hit the shift key in order to type it. :)\nWe also feel the same way about underscores in CSS classes, but we haven't implemented that as a lint yet (it'll come one day).\nRegarding your thoughts on _ prefixed mixins, you could easily transition these to - prefixes (it works fine). Though to be honest, a prefix naming scheme shouldn't be necessary as long as you isolate the mixins you want to share in a file that is imported everywhere, and have the mixins you don't want to share just appear inline in the file they are used. \nThis could also simply be a problem of using too many mixins when they aren't necessary, but that's entirely situation dependent. At @causes, we have our mixins defined under app/assets/stylesheets/shared, and they are included wherever they are necessary (usually just the main application manifest) so that they are available everywhere. When we want to include duplicate CSS in two or more locations, we use @extend.\nI'm going to close this issue, but feel free continue the discussion!\n. In general, manually coding vendor properties is probably a smell. You should be using a framework like https://github.com/chriseppstein/compass so that you never need to think in terms of vendor-specific prefixes. Writing something like\n@include border-radius(10px);\nIs so much nicer than the alternative boilerplate multi-line declaration.\nHaving said that, you may have very good reasons for needing to manually write vendor prefixes. It sounds like the underlying problem is you are writing SCSS properties with interpolated names, e.g. \n-#{$some-prefix}-#{$stuff}: $some-value;\nIt seems reasonable to me to simply ignore the sorting of properties that contain interpolated Sass script, since their names are dynamically evaluated.\nAny thoughts?\n. Perhaps I'm misunderstanding (or just lacking context), but is there a strong reason you can't use Compass' cross-browser filter implementation? http://compass-style.org/reference/compass/css3/filter/\nWe don't make significant use of that particular mixin, so I'm not sure of valid situations where you really need to manually write vendor-prefixed properties, but in general it feels like you should always use a Compass mixin where possible.\nSorry if I seem to be hammering the same point, I just want to make sure there's a real need here. Thanks for keeping the dialog going.\n. After talking this over with a few members of the team, including our in-house CSS expert, we'll probably end up implementing something different than a straight-up ignore of vendor-specific properties.\nInstead, what we felt was possibly worth implementing was a lint that enforces that all vendor-specific prefixes come before their non-prefixed form, sorted in alphabetical order of the prefix. For example, we'll enforce the following order:\ncss\nborder: 0;\n-moz-border-radius: 3px;\n-o-border-radius: 3px;\n-webkit-border-radius: 3px;\nborder-radius: 3px;\ncolor: #ccc;\n...where we do the regular alphabetical ordering of properties, but when the property is vendor-specific we'll make sure that the final non-prefixed property is the last in the list.\n@lifeiscontent, does this seem reasonable to you?\n. Running that code sample returns no lints for me. Also, we don't have a \"trailing whitespace\" lint (the closest thing is the check that ensures properties are of the form property: value;).\nAre you sure this is scss-lint, and not some other check you're running?\n. @mikesherov I had implemented an earlier draft of this a few weeks ago but never got around to merging it until now. I will have a look into the more comprehensive list you provided when I get a chance (but feel free to submit a PR if you would like to see a more comprehensive list sooner).\n. Not quite a duplicate. The problem here is that scaleY is actually a transform-specific function containing capital letter. We didn't think about this when we created the lint, so it seems like we're going to have to include a whitelist of functions that are allowed within the context of a transform.\nI've renamed this issue to correctly describe the problem and have reopened it.\n. I can't reproduce this locally with the given file, and concur with @wincent that this seems to be a bug with the version of Ruby, not scss-lint directly. Closing unless better information for how to reproduce can be provided.\n. scss-lint supports only Ruby 1.9.3+ since Ruby 1.8.7 was EOLed in July 2014.\nTechnically, Ruby 1.9.3 has also been EOLed as of February 2015, so we should probably drop support for it as well. Having said that, it is not as much of a burden to support 1.9.3 as it was to support 1.8.7\u2014most language features are still available, and the new features introduced in Ruby 2 aren't something we're missing (yet).\nWould strongly advise anyone doing serious development with Ruby to upgrade to at least Ruby 2.\n. Hey @asottile, thanks for the pull request!\nI've submitted your changes to our code review tool for the rest of the team to take a look at. I also made some modifications to match our style, which involved pulling some things into separate commits and adding the changes you made to the changelog.\nLastly, I changed the name of the flag from --list-linters to --show-linters (matching similar lint tools like Rubocop), and removed the -l flag shortcut in order to leave it open for specifying specific lints to run (something I'd like to do in future).\nYou can view the review process for each of the commits at:\nhttps://gerrit.causes.com/27622\nhttps://gerrit.causes.com/27623\nhttps://gerrit.causes.com/27624\nLet me know if you have any questions, and thanks for using scss-lint!\n. Merged in 7e89a9f4.\n. Hey @asottile, thanks for splitting your change up into atomic commits and addressing my comments.\nI added your changes for each commit to CHANGELOG.md, DRYed up one of the tests (in regards to a comment I forgot to leave), and added an additional test.\nYour changes have been merged and can be found on our internal code review system at:\nhttps://gerrit.causes.com/#/c/27801/\nhttps://gerrit.causes.com/#/c/27802/\nhttps://gerrit.causes.com/#/c/27803/\nThanks for contributing!\n. Thanks for addressing those comments. I removed an extra blank line and added a line to the changelog.\nYour commit has been merged as ec77dc2 and can be viewed in our internal code review system here:\nhttps://gerrit.causes.com/#/c/27814/\nThanks again for contributing to scss-lint!\n. The problem here is that #defa of the #defaultPaymentTable is triggering the hex format linter, as it's purposely implemented as a dumb regex which does not take the parse tree into account. We'll have to figure out a proper fix for this.\nThe linter that checks for capitalization has just been released, so the fact that no lint was reported here is just a result of not having the latest version of scss-lint on your machine (current version is now 0.9.0, which was released this morning).\nThanks for the bug report @joaomilho!\n. Thanks for your interest in scss-lint, @dsandstrom.\nWe currently do not have any plans to support Sass syntax, as internally we only use SCSS syntax. Furthermore, SCSS is considered the \"main\" syntax (https://github.com/nex3/sass/blame/aec3cc45e2e3e87afebede8da7eb012179a38293/README.md#L8)\nHaving said that, there is no strong reason we could not support both, but since there are some SCSS-specific linters we would have to start marking linters as belonging to one syntax form or the other.\nWe are certainly open to pull requests if you are interested in sending them our way.\n. There's always hope.\nTechnically speaking, this should not be terribly difficult to do. However, this will be a very tedious change, as many linters will need to have their tests written to check both Sass and SCSS syntaxes to ensure they still work as expected with Sass-style code.\nI'm happy to review a pull request if someone is willing to tackle this task. At this point in time, I can't offer to take it on myself, as it is indeed a significant undertaking (we have over 1,000 examples in our test suite, though the actual number of Sass-style code samples you would need to write would probably be about half that).\n. I'm open to any suggestions, but someone is going to have to take the torch and get the ball rolling.\nThere's also a path where we develop on master, since much of the work can be done without \"releasing\" it. I believe a potential path is to update the before(:each) block in spec/spec_helper.rb to look for scss and sass variables and parse each separately, run the linter being tested against each, and ensure their output matches.\nThis saves us from having to rewrite tests, and will for the most part just need to change tests from:\n``` ruby\ncontext 'when rule set contains no duplicates' do\n  let(:css) { <<-CSS }\n    p {\n      margin: 0;\n      padding: 0;\n    } \n  CSS\nit { should_not report_lint }\nend\n```\n...to:\n``` ruby\ncontext 'when rule set contains no duplicates' do\n  let(:sass) { <<-CSS }\n    p\n      margin: 0\n      padding: 0\n  CSS\nlet(:scss) { <<-CSS }\n    p {\n      margin: 0;\n      padding: 0;\n    } \n  CSS\nit { should_not report_lint }\nend\n```\n. Hey @mdiebolt, thanks for digging in to adding this feature.\nThe issue you're seeing is due to the monkey patching we do to the Sass parse tree nodes in https://github.com/causes/scss-lint/tree/master/lib/scss_lint/sass.\nThe monkey patching is necessary so the linters can easily define visit_script_* methods to visit Sass::Script::Tree::Node parse nodes while scanning for lints.\nI don't have the time to dig into this deeper, but it's odd that this is an issue when parsing .sass files but not .scss files. If you can figure out why that is, a workaround may present itself.\n. I'm not sure how that addresses the problem, @tbremer. All that would give you is a converted document, with lints which may not apply to the original document you had (there are some lints that are necessarily SCSS-specific or vice versa). \n. @mdiebolt Anything holding you back from submitting your changes back into the upstream project? (I have not tested your implementation, so I don't know if it's comprehensive or not)\n. We haven't heard back from @mdiebolt about merging his work into the main project. If you'd like to see this, you can nudge him for us. :wink: \n. Hey @joaomilho, thanks for your interest in scss-lint!\nThe gem was not explicitly designed to be used as only a CLI, but having said that all of our projects that utilize the gem use it via the CLI.\nIf you are interested in fixing this, we would happily accept a pull request if you submit one.\n. Thanks for the bug report, @joaomilho. \nLooks like we didn't consider attribute selectors when we accepted this pull request in #35.\nWill fix this the next opportunity I get.\n. We also have plans to add some Compass-specific lints soon (e.g. prefer @include opacity(...) over opacity: ...) \u2014 so there are plans to integrate deeply with Compass (though you'll still be able to disable lints you don't agree with).\n. Nice indeed! Merged in a0c14472.\nThanks for the fix @gsmendoza.\n. Hey @geekdave, thanks for using scss-lint!\nWhile I see why the error is happening, I'm not sure what kind of input would cause the parse tree to produce that output (the Sass parser is a little difficult to work with at times).\nCan you figure out which file the linter is failing on? If you're just running scss-lint on your entire codebase, you can find out which file is the culprit by modifying your installed gem's source code at /Users/dave/.rvm/gems/ruby-1.9.3-p392/gems/scss-lint-0.11.1/lib/scss_lint/linter/shorthand.rb by changing:\n```\ndef visit_prop(node)\n  property_name = node.name.join\n  return unless SHORTHANDABLE_PROPERTIES.include?(property_name)\ncase node.value\n  when Sass::Script::Tree::Literal\n    # HACK: node_parent may not be initialized at this point, so we need to\n    # set it ourselves\n    node.value.value.node_parent = node.value\n    check_script_string(property_name, node.value.value)\n  when Sass::Script::Tree::ListLiteral\n    check_script_list(property_name, node.value)\n  end\nend\n```\nto include a rescue at the end like so:\n```\ndef visit_prop(node)\n  property_name = node.name.join\n  return unless SHORTHANDABLE_PROPERTIES.include?(property_name)\ncase node.value\n  when Sass::Script::Tree::Literal\n    # HACK: node_parent may not be initialized at this point, so we need to\n    # set it ourselves\n    node.value.value.node_parent = node.value\n    check_script_string(property_name, node.value.value)\n  when Sass::Script::Tree::ListLiteral\n    check_script_list(property_name, node.value)\n  end\nrescue NoMethodError\n  puts engine.filename \n  exit\nend\n```\nOnce you have the filename, if you could pass along the contents of that file so I can reproduce on my end I should be able to fix this in no time.\nThanks!\n. Hey @maurizi, thanks for the bug report.\nCan you provide the contents of the file which caused this? It would help a lot in reproducing the problem.\nThanks!\n. Thanks for code sample @andrewberls.\nYou're right that the semicolon had something to do with it. In a nutshell, the Sass parser treats:\nscss\np { margin: 5px; }\nand\nscss\np { margin: 5px }\ndifferently, parsing the value of the first example as a string, and the second as a number (yay consistency!)\n. Hey @ahmednuaman,\nThe configuration loading system for scss-lint has not yet been released; it's on master but currently has one bug holding it back.\nI'm hoping to have this out very soon. Sorry for the discrepancy between the README and the tool.\nI'll close this issue once the next gem version has been released.\nThanks for using scss-lint!\n\nOn Nov 29, 2013, at 7:12 AM, Ahmed Nuaman notifications@github.com wrote:\nEg: scss-lint -c .scss-lint.yml test/fixtures/*.scss\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks! Merged in 0b3fc0de.\n. Hey @katgironpe, thanks for using scss-lint!\n\nThis is a great idea. We thought about it a while back, but at the time weren't sure about its practicality as it's possible it too would result in a lot of noise. Now that we've moved completely onto SCSS, we've noticed some clear patterns where deeply nested selectors (whether they're child or descendant combinators) not only result in poor performance, but are also a smell. The magic number for us seems to be 3, as in a depth > 3 is too deep.\nRegarding the comment about typos/spaces, I would agree that it is not a valuable use of time to correct an existing codebase to such a style for the sake of doing so. At @causes we value consistency, especially when we can create an automated tool to enforce such a consistency for us, and think that this does indeed bring value.\nHowever, if the more stylistic lints are bugging you, not to worry. We'll soon be releasing a configuration system that allows you to enable/disable particular lints.\nThanks for your comments and suggestions. We'll try to take a stab at this sometime this week.\n. Awesome idea. I merged this in 48a0064 and then added support for other statuses in ceeb53d.\nThanks for the pull request!\n. Hey @ahmednuaman,\nYes, 3.3.0.rc.1 opened up a bunch of possibilities with its addition of source map support. This gives scss-lint more information about where code was declared without resorting to brittle (and likely incorrect) regex hacks.\nWhere/how are you using scss-lint such that its dependency on 3.3.0.rc.1 breaks compass? I would think that this would have no effect so long as whatever Gemfile you have declares an explicit version for its sass dependency that isn't the release candidate.\nRegardless, the issue you're referring to is still very active, and considering a core contributor of sass is also the creator of compass, I'm sure it will be resolved soon (and yes, scss-lint will upgrade to the latest once it is released).\n. Thanks for the report @webgefrickel. A simple fix is en route.\nThanks for using scss-lint!\n. Hey @leebrooks0, thanks for using scss-lint!\nIt looks like you are running a really old version of scss-lint (0.7.0, which is six months old) which probably doesn't work with the latest version of sass (also, the latest version of scss-lint explicitly requires sass 3.3.0.rc.1).\nHope that helps.\n. If you specified scss-lint in your Gemfile without any version requirements, then bundle won't update it if an older version already satisfies the dependency. You have to explicitly update it with bundle update scss-lint. \n. @nroose this is a pretty old issue, so I'm not sure what the concrete complaint is other than we're using an improved version of sass which provides the features scss-lint needs to introspect the code it's parsing.\nI would strongly encourage you or your team to upgrade to sass 3.3.0+, as this probably won't be the only project where you'll run into dependency problems.\nBest of luck.\n. Hey  @edhenderson, thanks for using scss-lint!\nAssuming you installed scss-lint via gem install scss-lint and don't have it in your Gemfile, you should be able to solve the problem by pinning the sass version in your Gemfile to 3.2.12 so that bundler doesn't automatically try to load the latest available version.\nI would expect the core contributors to sass will be fixing this problem soon, as one of them is also the creator of Compass.\nHope this helps!\n. Hey @davidpmccormick, you simply need to not run scss-lint within the context of bundler. If you are running it via a rake task for example, then it will use the bundler context that is loaded by Rails.\nThe easiest way to get around this is to run scss-lint standalone, without including it in your application's Gemfile or running it in that context via bundle exec (or any rails command, which loads the bundler context for you).\nHope this helps.\n. Thanks @mikesherov! Merged in e716c7ce\n. Thanks for the contribution @mikesherov. Merged in c2d6b757\n. Thanks for the contribution @mikesherov. I've pushed your draft with a couple of small tweaks to our code review tool at https://gerrit.causes.com/#/c/32328/\n. Merged in bc71555.\nI'll be cutting a release shortly. scss-lint will be welcoming 2014 with a new version. :)\n. Hey @rodcisal,\nThe error message suggests that the encoding of the file you are linting is invalid (which scss-lint can't do anything about).\nFor example, if you do File.open(your_file, 'r').read.split(\"\\n\"), you should see the same error.\nDo you have any unicode characters in your file? If so, you'll need to change its encoding to UTF-8.\nAlternatively, perhaps you have accidentally given a binary file the extension .scss and the tool is trying to lint a binary file.\n. If you can figure out what the underlying cause is (so that I can reproduce locally), I will be happy to add some code to report this problem a little more gracefully.\n. Compass currently does not support the version of Sass (3.3.0.rc.1) that scss-lint requires in order to do some of its more complicated checks.\nHaving said that, the stack trace you provided doesn't suggest that this has anything to do with Compass. The literal line of code that can reproduce this problem is File.open(your_file, 'r').read.split(\"\\n\"), where your_file is the file that you're trying to lint.\nIt appears that this file might be not encoded properly, or is a binary file with the extension .scss, which causes scss-lint to choke when linting it.\n. @vanjacosic Can you send me a copy of the file that reproduces this problem? When I try including unicode characters in SCSS files I don't reproduce this problem.\nAlso, are you on Windows or some flavor of *nix? Also, what specific version of Ruby 1.9 are you running? (including patch level)\nThanks!\n. Hey @vanjacosic, thanks for trying to do some additional debugging. Unfortunately, I have no experience with Sublime Text 3, and quickly looking at the documentation it's not clear to me how it hands off the file to plugins. My only thought is that it's creating some sort of temporary file with a different encoding from the original file, and the existence of unicode characters causes problems due to an encoding mismatch.\nIf you could file an issue with the scss-lint Sublime Text plugin, perhaps they'll be able to help you.\nThanks!\n. Thanks @mikesherov, I've pushed this to our internal code review tool at https://gerrit.causes.com/#/c/32350/\nDoesn't look like there is anything holding it back from merging.\nWhile I think I mentioned it before, I just wanted to note that this will still report an error for code like:\nscss\np {\n  content: '( foo )';\n}\nThe solution is to write a much more involved check without using regexes, but I think this is \"good enough\" for now.\n. Merged in 5ae5791.\n. Yeah, we knew this was potentially a problem but unfortunately won't be able to properly address it until sass 3.3.0 is released. Since the sass team is still making changes to the implementation of source maps (which is what scss-lint uses under the hood), I'll be taking a stab at rewriting this linter to not use regexes once that API has reached stability.\n. Unfortunately, the current implementation of source maps in Sass prevents us from fully solving this problem due to a number of edge cases.\nI've whipped up a fix that will hopefully address this problem for most people. For an explanation of why this is a difficult problem, see 095b43345682385b49f35e04ae6d71537e288d5a.\n. I've actually been meaning to add this for a while now. Initial draft is up on our code review tool at https://gerrit.causes.com/#/c/32425\n. While I agree that an ideal world would have us ordering by some sort of semantic meaning for the properties, practically this just doesn't work. There are are too many individual preferences for what the order of the different groups should be.\nAlphabetical ordering may not have the largest adoption according to the link you provided, but even within the comments on that post you can see that there are a lot of pragmatic reasons for electing to go with alphabetical.\nRegardless, this leads us to the conclusion that any sort of tool that automatically checks the ordering of the properties needs to be highly configurable, both in terms of the ordering of the groups as well as the ordering within each group. That's more trouble than it's worth, IMO, but if someone would submit a pull request I would be open to accepting it so long as the general configuration system made sense and satisfied the majority use case (I'm personally not sure what that would look like, which is why I'm not interested in implementing it myself).\n. @kpeatt I would be amenable to that method of configuration.\n. I've merged @donaldpcook's pull request and changed the name of the linter to PropertySortOrder to match the convention of other linters.\nThis feature is available with the newly released version 0.18.0.\nThanks for everyone's feedback!\n. Whoops, forgot to include a file in the gemspec.\nPushed a new release 0.16.1 in e2c095e.\nThanks for the quick report!\n. Hey @geniou,\nThe problem is that there is a comma in the interpolation, which the linter's naive regex interprets as a separator for the selector sequence.\nWe'll need to update the linter to use source maps to find the actual start/end of each selector in the comma sequence.\nThanks for the report! \n. Thanks for your attention to detail, @geniou. \nI've modified your commit messages to match our preferred style, and merged your changes in 066c571 and 7e8353d.\n. I've definitely thought about this, and also think it would be useful. The include and exclude options on Rubocop linters makes it easier to consolidate configuration for your entire repo into one file.\nFor the moment, you can accomplish this by creating an .scss-lint.yml in the directory you want to customize, inherit_from the config at the root of the repository, and disabling the linter.\nIf you're interested in implementing this yourself, a pull request would be welcome!\n. Merged in 9f04cb82.\n. @peschee I can't reproduce the problem you're describing. Are you sure you've nested the NameFormat key under the linters key in your .scss-lint.yml file? For example, it should be:\nyaml\nlinters:\n  NameFormat:\n    enabled: true\n    convention: hyphenated_lowercase\n    exclude:\n      - \"relative/path/to/file.scss\"\nIf you're still seeing the issue, make sure your toolchain is invoking scss-lint from the correct directory so that it finds the relevant .scss-lint.yml file.\n. @peschee very strange. I don't see what could be causing this unless there's some path nuance here (e.g. your path contains special characters which we're not properly escaping or something similar).\nCan you reproduce the problem with a bare repo (i.e. it has the directory you're trying to ignore and a single file in that directory), verify it doesn't exclude it for you and send it to me? (or just post the shell commands you used to create said directory)\nThere's obviously a problem here, but until I get a reproducible case I won't be of much help to you.\nThanks!\n. Hey @geniou, looks like we had a bit of a race there.\nI've committed a fix which avoids the problem by ignoring the interpolation. This is probably better than relying on regexes.\nThanks for your willingness to contribute, however! If you see other areas for improvement, please do submit a pull request.\n. Thanks for the pull request, @geniou.\nThis code actually didn't work out-of-the-box, but that's not through any fault of your own (your tests passed).\nThe configuration system for scss-lint is ripe for a refactoring, which I will do at some point. Ultimately, it needs to always work with absolute file paths, otherwise you'll get weird results.\nI've fixed the issues and adjusted the specs to work. I merged the changes in 9f04cb82 since I don't think this feature should be held up by that refactoring work.\nThanks again for your suggestions and contributions to scss-lint!\n. Hey @geniou, thanks for the pull request.\nI've merged this in 0120b0ae.\n. Version 0.17.0 has just been released.\n. Hi @edhenderson,\nIt's possible that you are seeing a lint from the UsageName linter. The two linters were split into two in e4b16087, although in hindsight that seems ripe for potential confusion, and also isn't terribly useful from a customization perspective (as you need to remember to disable or enable both).\nI'll have a deeper look into remedying this when I get a chance. For now, you should be able to disable both the DeclaredName and UsageName linters.\nThanks for reporting the inconsistency!\n. If you're interested, we would happily accept a pull request with changes to the README.\n. Thanks for taking the time to improve our documentation, @edhenderson.\nI've merged your changes in c7e5d11.\n. Hi @nixpulvis, thanks for using scss-lint!\nThe error you are seeing is because the gem environment you are in is loading sass 3.2.12 instead of 3.3.0.rc.1. scss-lint needs to use the later pre-release of 3.3.0 in order to get additional information about the syntax tree.\nWith regards to your request for a rake task, feel free to submit a pull request if you'd like it sooner rather than later, although I believe you would run into the same problem unless you update your application's Gemfile to use sass 3.3.0.rc.1. \nOtherwise I'll get to it when I can.\n. Weird, I thought I solved that problem a long time ago in f8702359.\nCan you include the snippet of code you are linting that causes this error? It should be easy to fix, it's just not obvious to me what other conditions would trigger that bug. Thanks!\n. Sorry, I meant the SCSS that was being linted. From the error it's clear you're loading 3.3.0.rc.1 correctly, but I've seen that type of error before (and thought I fixed it), I just need the SCSS to go with it so I can reproduce locally. Thanks!\n. Hey @nixpulvis,\nLooking into this, I believe the problem is that you have an older version of scss-lint still installed. If you do a gem list scss-lint and you see a version of scss-lint earlier than 0.7.1, then you'll experience this problem. If you remove that version, run a bundle update scss-lint in your repo, then the problem should go away.\nThe reason this happens is because bundler seems to select the earliest gem that satisfies the dependency when generating the Gemfile.lock file.\nI understand this is a bit of a hassle at the moment. The sass team recently released 3.3.0.rc.3, so it looks like they're getting close to the next release, at which point scss-lint will upgrade and these kinds of problems should be easier to deal with.\nThanks for the report. Hope this helps.\n. A basic rake task was added in 04d2c77a55948d35badbcc8df4d718de50100f64.\n. Hey @utopicchaotica, thanks for your interest in scss-lint.\nI understand that the dependency on a release candidate is a bit of an annoyance, but scss-lint is leveraging the source mapping support that will be released in 3.3.0. Version 3.3.0.rc.3 was just released 4 days ago, so it seems like a stable 3.3.0 will (hopefully) be released very soon.\nUntil then, I would recommend that you remove scss-lint from your Gemfile so that the dependency on 3.3.0.rc.1 doesn't interfere with Compass.\nThanks for using scss-lint!\n. Unless you're running your application within the context of bundler, it's going to be difficult to not load what is considered a \"more recent\" version of sass when you run Compass.\nThis is a problem that bundler solves, so if you'd rather not run Compass via bundler then you need to manually uninstall sass 3.3.0.rc.1 so Compass doesn't attempt to load it (and hence not use scss-lint). This wouldn't be a problem if Compass specified its dependency on sass as ~> 3.2.0 instead of ~> 3.2.\nIf you're using rvm, you could create two different gemsets and run each application in a separate gemset so that Compass doesn't try to load scss-lint's dependencies.\n. I've released version 0.19.0 with the updated 3.3.0 dependency.\n. Hey @benfrain,\nAre you specifying this via a .scss-lint.yml configuration file? Or did you mean to say you were specifying this list of excluded linters via the command line?\nIf the former, you need to explicitly mark the linter as disabled, i.e.\nyaml\nlinters:\n  ...\n  CapitalizationInSelector:\n    enabled: false\n  SpaceBeforeBrace:\n    enabled: false\n  ...\nIf the latter, can you provide some SCSS that you are linting, along with the version of scss-lint you are using?\nThanks!\n. Ah, I see the problem. If you run the following command against the SCSS you provided above:\nbash\nscss-lint --exclude-linter=CapitalizationInSelector,Comment,SpaceBeforeBrace,Indentation,StringQuotes,SortedProperties,EmptyLineBetweenBlocks,NameFormat test.scss\n...then you'll find that scss-lint returns an error saying Linter NameFormat does not exist, which is correct as of version 0.17.1 of scss-lint. I don't maintain the SublimeLinter-scss-lint project, but I imagine the problem is that it ignores errors of this nature, giving the appearance that no lints were found.\nThe reason for this discrepancy is that the documentation had been updated to reflect this change, but a new gem version had not yet been released. I've released 0.17.2 to fix this.\nThanks for the report!\n. Hey @thejase, thanks for the suggestion.\nI would be open to enabling this via a configuration option on the NameFormat linter, so that this can be enabled for those who want it by adding:\nyaml\nlinters:\n  NameFormat:\n    convention: BEM\nPerhaps even better would be to just allow the user to specify a regex to match their convention, giving them the greatest flexibility.\nIf you are itching for it now I would certainly be open to a pull request, otherwise I'll get to it when I can.\n. Support for customizing the convention was added in f5d9a11faa5800059c4f48ef1a844e2e01ad9322.\n. @nickdunn Thanks for the input. That feature is pretty cutting-edge, as Sass 3.3 hasn't been released yet. (it's currently at release candidate 3)\nWe've set scss-lint to depend on Sass 3.3.0.rc.1 for the purposes of getting early access to the support for source maps, but the later versions include some breaking changes to the API as well as the features supported (including the one you list above--that code doesn't compile for 3.3.0.rc.1). We haven't upgraded since it's time-consuming to update our code only to have the API change again with the next release candidate, so we were planning on updating once 3.3.0 stable gets shipped.\nUntil then, the easiest way around this is to not include scss-lint in your Gemfile so it isn't subject to the dependencies specified there. Hopefully the Sass team will release 3.3.0 soon (they've been in release candidate stage for many months now).\nHope that helps.\n. Hey @lifeiscontent, thanks for the link. We'll have a look and see if there are any obvious things we could convert to lints (but feel free to submit a pull request yourself!)\nRegarding single versus double quotes, that is already customizable, see the StringQuotes linter documentation.\nRegarding your comment about property sort order, I'm not sure I completely understand the justification. In the example you provide, I don't see why you would mix the shorthand property border-radius with the long form properties (border-<top/bottom>-<left/right>-radius). It would be preferable to write those as a single property so you ship fewer bytes to the client, e.g.\nscss\nborder-radius: 4rem 4rem 0 0;\nLet me know if I'm interpreting your concern correctly. Ultimately, it might best be solved by implementing https://github.com/causes/scss-lint/issues/64.\nIn future, could you separate your suggestions into different issues so that it is clearer what each issue entails?\nThanks for using and caring about scss-lint!\n. Hey @sjdemartini, thanks for the pull request. \nI've merged your commit in dc4e1ad2 and released 0.17.3.\nThanks for using scss-lint!\n. Hey Nils,\nThanks for the suggestion. This problem actually bit me as well when I used Jekyll, and I ended up accepting that I didn't really need scss-lint for a small project (as Jekyll projects usually are).\nAt the end of the day, Jekyll .scss files aren't actually SCSS files--they are a strange hybrid. To add support for them wouldn't be too difficult technically speaking, but it would encourage what one should consider bad behavior: changing the meaning of a file extension. It also couples the implementation of scss-lint to Jekyll, which is usually a smell.\nA simple way you can get around this would be to us the sass --watch command to automatically compile your SCSS outside of Jekyll so you don't need the YAML header. Or, depending on how you run scss-lint you could augment a rake task or script to strip the header yourself before passing the file to scss-lint.\nI imagine this isn't the answer you'd like to hear, but I hope the justification makes sense. Please continue to send us feedback--we really appreciate it!\n. @rf- is correct: the asterisk is a special character in YAML.\nHaving said that, scss-lint should probably be a little more graceful here and report a problem with the YAML file.\nThanks for the report!\n. Thanks for the pull request @donaldpcook. \nI updated your implementation to prefer unspecified properties at the end (as it seems more sensible to have explicitly defined properties be at the beginning of the intended sort order), and updated some of the documentation.\nMerged in 125c6d5 \n. I'm certainly open to allowing some method of specifying that mixin includes should be sorted, although it does feel a little weird since they can insert more than just properties into the place they're included. However, since this will be something user-defined, it seems reasonable.\nIf you're looking to have this functionality sooner rather than later, feel free to submit a pull request!\n. Closed by #268.\n. Hey Nils,\nI've almost got 3.3.0 working, currently figuring out two specs. I'm hoping to have some free time later this evening to finish that up and release a new version of the gem. \nI'll close this issue when that's done.\n. I've released version 0.19.0 with the updated 3.3.0 dependency.\n. Hey @martijnrusschen, a couple of questions:\nAre you sure your Gemfile.lock has the latest version of scss-lint pinned? (current 0.20.2 at time of writing)\nIf you're positive, then what I need from you to help reproduce is:\n- A single SCSS file that causes this error\n- The contents of your Gemfile and Gemfile.lock files (or a subset of them where you still see the error)\n- The full backtrace for the error that you are seeing (I'm assuming you omitted it to keep your post short)\nThanks!\n. Thanks! Merged in e0f9bbcb5\n. This was fixed by bb570440d669224c552be5ca030e7725844d7154, and further improved in 4d5a39763a34b6fe6b3cb7b64cc35f1c9772fa51.\nThanks for the report! \n. Hey @chris-dura, thanks for your interesting in improving scss-lint.\nI think both suggestions are reasonable. If you're itching to have them added now, feel free to submit a pull request. Otherwise I'll get to them when I can.\n. @lightswitch05: To add to @geniou's answer, the reason we need 3.3.0+ is that version includes support for source maps, which scss-lint needs in order to do some of its more complicated checks. It basically allows it to extract extra information from the parse tree.\nFor now, the easiest approach is to not include scss-lint in your Gemfile.\nHopefully sass-rails will support the latest sass version soon.\n. @chrishough I don't understand your comment. Can you elaborate?\n. You are correct; this appears to be a bug.\nWill fix when I get a chance (or feel free to submit a pull request yourself).\nThanks for the report!\n. Fixed by #95.\n. Nope, the code you changed doesn't affect that code (they are separate lints).\nThanks for fixing this, Ben! Merged in d320dc91.\n. Hey @jtara, thanks for your interest in scss-lint.\nscss-lint is intended to be opinionated only in its default settings--anything else is simply due to not thinking about other potential use cases, but that is best left for the community to contribute. \nThe suggestion you give is something we would be totally open to accepting a pull request for, if you're so inclined to submit one. The practical drawback is complexity: more configuration introduces more complexity, so in the interest of getting something out there we may not make it fully configurable when we release a particular linter. Also, the notion of what is \"configurable\" is obviously subjective and depends on the use cases it needs to satisfy, which are difficult to predict ahead of time.\nFor SpaceAfterPropertyColon, it could simply be renamed to SpacesAfterPropertyColon to indicate that the number of spaces are configurable. If you look at the code, you'll see that it's trivial to convert it to expect \"at least one\" rather than \"exactly one\" spaces, and have the number of spaces be configurable.\nI'm excited to see your interest in making scss-lint more configurable, and look forward to your contributions!\n. Some examples of configurable linters:\n- Indentation\n- LeadingZero\n- NameFormat\n- PropertySortOrder\n- SelectorDepth\nA suggestion for a configuration value would be to make it as human readable as possible. -1 isn't terribly intuitive for \"one or more spaces\", but 1+ would be. This way you can be explicit by having just a single number, or relax it by adding a +. I would not split the linter into two different linters.\nYou had mentioned that it wasn't obvious to you that some of the linters were configurable. We've linked to the documentation from the README, but is there something else we could change to make this feature more obvious?\nThanks!\n. Thanks for the pull request, @benwhite-ext-nokia!\nI've merged your commit in f313ccb3574d8ed1ad27497ff2a0951ffc63aee4, and released version 0.20.2.\n. Implemented in 8ba05e96a0a66ca7da04695d2640a8e080920fdc.\n. Thanks for the bug report @chris-dura. Merged in ca74f02 and released in version 0.20.3\n. Hey @drublic, are you using the latest version of scss-lint? (currently 0.20.3 at time of writing)\nA bug similar to this was fixed in version 0.20.2. See #97 \n. Thanks for the pull request, @mikesherov!\nMerged in 89113fed\n. Hey @jonrohan, thanks for the suggestion. We've been thinking about introducing something like this as well.\nIt seems like we would also want to let you specify which level results in scss-lint returning a non-zero exit status, like in Rubocop.\nWould certainly be open to a pull request if this feature is desired sooner rather than later.\n. Implemented in f8efbd960a799bd08e35ef8e202c3d13ec82e9ef.\n. Hey @yujinakayama, thanks for your interest in scss-lint.\nThis definitely looks like something I'd be interested in seeing through. My only concern (and I'm sure you've noticed) is that the Sass parser is a little unpredictable when it comes to where it thinks a particular source range begins.\nThis means we'll likely have to add some logic to adjust the Location that is returned based on various edge cases on a per-linter basis, or submit upstream fixes to sass and hope they get merged in a reasonable amount of time. Would this be something you'd be willing to explore?\nThanks for starting the discussion.\n. Sounds like a reasonable course of action. We'll probably want to add a column or potentially location option to the report_lint RSpec matcher so writing specs will be easier. There will also be some linters for which Location#length doesn't make sense, so that will probably simplify things significantly.\nA potential pitfall with this process is that we'll be caught waiting on fixes related to source range bugs to be merged to the upstream sass project, though that may not necessarily be the case.\n. I've gone ahead and merged this in ba3c208 and 416f7ca, as it doesn't break existing functionality.\nGoing forward I will be making an attempt to ensure specs are written so that the column and length information is also accounted for. It may be a while before we get around to ensuring all linters fully support this information, however.\nThanks for the pull request!\n. Thanks for the pull request, @chris-dura!\nThis looks great. I merged your commit in a4db8eb5f59e4d4ffdedb9a5c1c6d51943b57872 and made the following adjustments:\n- Renamed the option to allow_single_line_padding so the name better conveys that the option only applies to single line blocks\n- Consolidated the node_on_single_line helper (which was duplicated from the EmptyLineBetweenBlocks linter) into the Linter class\nThanks for contributing to scss-lint!\n. Hey @chris-dura,\nThis actually looks like a bug. TrailingSemicolonAfterPropertyValue should not report an error in this case. The pattern you speak of is a totally reasonable way of splitting up a long declaration over multiple lines.\nThanks for the report! \n. I would be open to having a lint for this, likely called NestedSelector.\nI would not enable it by default, however, as I think this can result in extra verboseness with worse readability if blindly applied in all cases (I find your \"Bad\" example easier to read, for example). However, I acknowledge that the advantage to this approach is that you can easily add alternate descendant selectors in the future, so it seems reasonable to allow teams who want to take it to the extreme to do so.\nIf you'd like to see this sooner rather than later, feel free to submit a pull request!\n. I believe this feature has been implemented by @geniou in #143. Thanks for the suggestion!\n. Thanks for the report, @nschonni!\n. We've definitely thought about implementing this before, as it would be incredibly useful in identifying potentially duplicate code, or code that can be merged.\nNot sure when I'll personally have time to get around to this, but I'd certainly be open to a pull request with a healthy chunk of tests.\n. I believe this is intended behavior. The expected order in this case would be:\nscss\n.foo {\n  color: #fff;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke: 1px transparent;\n}\nThis is because the vendor prefix is essentially ignored, so you can think of it as sorting the properties color, font-smoothing, and text-stroke.\nPlease let me know if I'm misunderstanding the issue.\n. Fixed by @geniou in #113.\n. @nschonni Thanks for the suggestion. I think this would get too complicated with compound selectors, to the point of making it a not very useful lint. \nWhat happens with comma sequences? As a silly example, how do we order:\n``` scss\np,\n.bar,\nbaz { ... }\n.foo,\np,\nq { ... }\n```\nDo we put the first before the second because its comma sequence starts with a less specific selector? Do we sum the specificities of all the selectors in the comma sequence? What happens if the selector contains interpolation? (in which case we don't have access to a parse tree, so we can't calculate the specificity)\nI'm open to discussion, but my current leaning is to pass on this feature.\n. Good point, @Anahkiasen. Reordering could also affect which rule gets applied last in some cases, which could mean subtle changes could unexpectedly affect layout. I think we can safely close this issue.\n. Thanks for the fix, Nils! Merged in 7d95e71.\n. I think the problem here is a documentation issue. From the DuplicateProperty documentation:\n\nHaving duplicate properties is usually just an error. However, they can be used as a technique for dealing with varying levels of browser support for CSS properties. In the example below, some browsers might not support the rgba function, so the intention is to fall back to the color #fff.\nscss\n.box {\n  background: #fff;\n  background: rgba(255, 255, 255, .5);\n}\nIn this situation, using duplicate properties is acceptable.\n\nThe documentation here was intended to convey the notion that not all warnings reported by the linter are necessarily bad. As @geniou has pointed out, it is indeed difficult to detect whether a duplicate property was intentional. We could try to be more clever, but I don't think the juice is worth the squeeze.\nFallbacks in CSS are used for supporting older browsers. If you've made the decision to not support older browsers, then this lint is more helpful since you don't want to clutter your CSS with fallbacks. Otherwise, you may want to consider disabling this check in your .scss-lint.yml file.\nI will update the documentation to hopefully prevent this confusion in the future.\n. Updated documentation in c1bdbf2a.\n. Issue #102 requests the ability to configure the severity level of lints.\n. Thanks for the suggestion @jfelchner.\nThe option allow_extra_spaces was added by @geniou in #117.\nEnforcing that all property values be aligned would require adding another option on this linter, but could be done. If you'd like to see this, please open another issue.\nThanks for your interest in improving scss-lint!\n. Hey @FWeinb, thanks for your work in making scss-lint easier to use with other toolsets. \nThe problem you report has been solved by @geniou in #118, but we do know that SpaceBeforeBrace took some shortcuts in its implementation by using regexes instead of inspecting the parse tree directly. It was a tradeoff of a correct implementation versus a quick one that captured the vast majority of cases with a few false positives.\nIf you're still seeing this erroneous error in a lot of places, feel free to open another issue. Thanks for the report!\n. Fair enough. I've opened #119 to track the underlying issue.\n. Just a heads up that this has been fixed in 50029c9.\n. Thanks for the fix, Nils!\nMerged in bde427d.\n. Thanks for the fix, Nils!\nMerged in 05f8d81.\n. I should add that this still doesn't solve the underlying problem that we're using a regex for a lint that clearly should be inspecting the parse tree directly. This was a tradeoff that was made to get something that worked quickly for a majority of cases.\nShould another bug along these lines be reported, we'll probably want to implement a proper fix.\n. Fixed by 50029c9.\n. Implemented in efb7c7b0e2502c637c6d1cac135655be1a846a35. Thanks for the feedback!\n. Whoops, look like we implemented this in #123 and forgot to close this. Closing now!\n. Thanks for taking the time to help improve our code hygiene, Nils.\nI've merged all your commits except the one that removes the private access modifiers in c319fc6 and 4ab6028 (fixing up some spelling/grammar in commit messages).\nThanks!\n. Hey Nils, thanks for taking an initial stab at this.\nI don't think we should conflate the meaning allow_extra_spaces option with the idea that all property values should be aligned. Right now, allow_extra_spaces allows more flexibility with your formatting especially in regards to multiple \"groups\" of properties, e.g.\n``` scss\n.class {\n  prop1: 1;\n  prop2: 2;\n// These are aligned differently than above\n  another-prop1:   10;\n  another-prop2:   20;\n}\n```\nFurthermore, I think that any linter which checks the alignment of property values should not impose a specific number of spaces, but rather merely check that the net result is an aligned set of values. Thus whether you have:\nscss\n.class {\n  prop1: 1;\n  prop2: 2;\n  prop2: 3;\n}\nor\nscss\n.class {\n  prop1:        1;\n  prop2:        2;\n  prop2:        3;\n}\n...doesn't matter--what matters is that the values are aligned. This is useful when if a list of properties is modified you don't have to spend the time re-aligning all of them to use the correct number of spaces.\nIn summary:\n- Create a separate option align_values to toggle the check for alignment\n- Don't enforce a specific number of spaces for alignment--simply check that all property values are aligned\nSound reasonable?\n. @geniou Did you mean to close this? This still hasn't been implemented, and I think it could be a valuable feature.\n. I took this concept a step further in d4c45ce and added support for multiple options, replacing the allow_extra_spaces option with a style option that takes multiple possible options.\nThanks for the initial PR, @geniou.\n. I'll start doing this as of 0.23.0. \nThanks for the feedback!\n. Fixed by @sjdemartini in #130. Thanks!\n. Thanks for the report, @nschonni!\nFixed by 9866c230.\n. I also took your suggestion to heart and added an UnnecessaryMantissa linter to check for unnecessary zero values in numbers. See 740e7c9.\n. Thanks for the report, @nschonni.\nFixed by c056b09.\n. Thanks for the report, @nschonni!\nFixed by 9866c230.\n. This is not a bug with scss-lint. The error you are seeing is an actual parse error from Sass.\nUsing the example you provided above, I can reproduce by running sass -c test.scss\n```\n\nsass -c test.scss\nSyntax error: Invalid CSS after \"  font-size: 0\": expected \";\", was \".#{$size}em;\"\n        on line 2 of test.scss\n  Use --trace for backtrace.\n```\n. Thanks a ton for the fix, @sjdemartini! Merged as e08e2d8, fdb1837, and 345e779.\n. Thanks for the pull request, @michaelgmiller!\n\nMerged your changes in 0e8153c with some cleanup in 15c3407.\n. Hey @trevordmiller, thanks for your interest in using scss-lint.\nAre you referring to command-line options? If so, they are listed under the Usage section in the README.\nIf you're referring to linter options, under the Linters section is a link to a separate Linters Documentation describing each linter and its options, if any.\nIf there's something we could do to make this information more obvious or easier to find, please let us know.\n. Thanks for the pull request @nschonni. This looks like a great first pass that already brings a good amount of value.\nI've merged your commit in 40282d9 and tweaked some code style and documentation in 65afdce.\nWhile testing it against our codebase I then noticed that it would produce false positives for rule nodes declared in nested contexts, e.g. a media query or mixin include. I added some tests and fixed the problem in a215afa.\nThanks for consistently helping to make scss-lint a better tool!\n. Thanks @nschonni.\nMerged in 0dd95fba3\n. @B2o5T If there is something in the README that would make this more obvious, would love to hear your thoughts.\n. Thanks for the report!\nFixed by @geniou in #141 \n. Thanks for the fix, @nschonni!\nMerged in 091d4bc29.\n. Thanks for the fix, Nils!\nI merged it in 6bd8ef7dd after changing the changelog message to be a bit more descriptive.\n. Thanks for addressing those comments. I've merged your commit in 94ec88a and made some changes in bdc9ca0 and e64a2da.\n. Thanks for the pull request @geniou. There are a few things I'd like to see addressed before we move ahead with this new feature.\n. Merged in b947d7a, with some further amendments in 48193d6 and 4bcbe22.\n. Thanks for helping to make the coding style for scss-lint more consistent, @geniou.\nI've merged your commits (with some slight reordering to avoid Travis build failures), and enabled Rubocop in Travis in 6815307.\nIf you could circle back and fix some of the checks that you disabled, that would be great! (only exception to this would be the Encoding check--I'm not a fan of having an encoding: utf8 header at the top of every file)\n. I've merged most of your commits except for the FormatString and AssignmentInCondition cops. I may change my mind later, but I believe these provide more concise syntax that is convenient for writing linters.\nThanks!\n. Yeah, in the spirit of having linters that do one thing well, we should create a separate linter called HexColorCase for this particular check.\nWill get to it when we can, but certainly open to a pull request in the meantime.\n. Implemented in the HexNotation linter by @geniou in #158.\n. Cool. Merged in 6dc87dc. \nThanks!\n. @emiloberg there is currently no way to disable a linter over a subset of a file. As @edhenderson mentioned you can disable the lint for the entire file, or isolate all your offenses in a separate file.\nThere's some work that would need to be done to support this--adding a preprocessing step to create a map of all control comments and then utilizing that map to omit lints when they are found.\nA pull request would be welcome provided it was well-tested.\n. Implemented by @mbertolacci in #303.\n. Hey @acdha, thanks for the report.\nFirst of all, the warning message is incorrect. I've fixed that in 4b336a2.\nRegarding the control comment not working, this is a idiosyncracy of how DuplicateProperty is implemented.\nSince DuplicateProperty operates at the level of the RuleNode (e.g. .foo {...}), not the individual properties, the linter is not disabled (yet) when you nest the comment within the rule set. It would work if you had nested rule sets within this one, however.\nThis will definitely be a source of confusion. I'm not available at the moment to give some deeper thought to a solution. Perhaps @mbertolacci can have a look?\n. Hey @acdha, thanks for the report.\nThe first three examples you give are definitely bugs. They seem to be caused by https://github.com/causes/scss-lint/blob/master/lib/scss_lint/control_comment_processor.rb#L68 always taking the last child instead of the last Sass::Tree::Node child. We monkey patch the tree in https://github.com/causes/scss-lint/blob/master/lib/scss_lint/sass/tree.rb in order to make linting Sass::Script::Nodes easy, but this means that the last child might not be a Sass::Tree::Node, but the node still has a child that is a Sass::Tree::Node.\nRegarding inline comments at the end of the line: I agree. The ability to disable a single line is probably a common use case.\nRegarding EmptyLineBetweenBlocks: that looks like a bug that's unrelated to this feature, but thanks for catching it.\nI'm on the road today so I won't be able to get to this until later, if someone else has the time to fix.\n. Just following up to say the EmptyLineBetweenBlocks issue has been fixed in b19b4b8f82d2c8d412ac530a1ce387f6fab9eece.\n. @benesch Thanks for the report, and doubly so for filing an upstream pull request!\n. I'd be open to this feature. If anyone is interested in adding this sooner rather than later, feel free to submit a pull request!\n. Implemented in f07f04e14a7da0f7dcf9644a723f171d8139fe51. I named the option ignore_unspecified instead of ignore_unknown.\nThanks for the feedback!\n. Thanks for the report @emagnier! The @at-root directive was added after this linter was created, so we forgot to add support for it.\nFixed in b40692a.\n. @emagnier The quirks of the Sass parser strike again. Who would've known that\nscss\n@at-root {\n  .block { ... }\n}\nand\nscss\n@at-root .block { \n  ... \n}\nwould produce the same parse tree?\nFixed in e02ab7bc592ed92b0d526eefc1edb51bf8bf5ed1. Thanks for the report!\n. Fixed by @geniou in #155. \nThanks for the report, @jomo!\n. Thanks for the quick fix, @geniou.\nMerged in 965eb06.\n. Thanks for the report, @chris-dura!\nFixed in 16dfc11e3.\n. Thanks for the pull request, @asottile.\nMerged in d3f8a0f.\n. Taken care of in ea2ff57. Thanks!\n. Thanks for trying to make our linters more configurable, @geniou.\nI have some concerns about the use of modules in this change to de-duplicate code. I think it adds a layer of indirection that makes the code harder to read without offering significant value in terms of DRY-ness. Please read my comments for additional context.\nYou'll also need to rebase this change due to your other pull request being merged (https://github.com/causes/scss-lint/pull/159)\n. Thanks for the pull request @geniou.\nMerged in f3a8839.\n. Merged in 722c4152.\nIn future, could you hold off on submitting these kinds of pull requests until the Rubocop version in question has been released? Anything in the master branch is more likely to change, so changing code for the sake of matching whatever conventions are dictated by master is more likely to require us to change code again in future.\nIf we're going to keep up to date with Rubocop-enforced conventions, I'd rather have these changes included with a version bump to Rubocop in scss-lint.gemspec.\nThanks!\n. @geniou We do have the Rubocop version fixed in scss-lint.gemspec. You commit message suggested you were making changes due to the new cops available on the master branch of the Rubocop project (the Next cop, for example).\nIf the behavior of the Next cop were to change between now and when the next version of Rubocop is released, we might have to update scss-lint's code to match convention again. I'd rather make code convention changes at the point in time when we update the Rubocop version in scss-lint.gemspec.\nHope that clarifies my comments.\n. Hey @cameronjroe, thanks for reporting the issue.\nCan you provide your .scss-lint.yml and the contents of core.scss, or simplified versions that still reproduce the problem? As it stands it's not obvious to me what the conditions are that lead to the reproduction of this bug.\nThanks for using scss-lint!\n. Closing due to lack of response.\n. @marcogallotta: One of the big milestones that is holding scss-lint back from a 1.0 release is the ability for repositories to define custom linters. Ideally, what I'd like to see in such a feature is the ability for a developer to define their own hierarchy of linters, identical in structure to the https://github.com/causes/scss-lint/tree/master/lib/scss_lint/linter directory but located in the repository under a customizable directory (for example .scss-linters by default).\nI don't think this would be too much work to implement, but it requires some changes to the LinterRegistry and Configuration classes to support it.\nIf you're interested in having this added to scss-lint, we'd be totally open to a pull request.\n. @geniou: I'd accept a pull request for a ForbiddenProperty linter, preferring the singular name rather than the plural as that matches our other linter names.\n. Experimental support for custom linters was implemented in #459. Please check out the master branch to take it for a spin. Feedback would be appreciated!\n. Thanks for the fix and accompanying tests, @asottile!\nMerged in 7f69c95.\n. The error you are seeing appears to be an OS-level error, and nothing to do with a limitation imposed by scss-lint.\nI'm not familiar with grunt-scss-lint, but it appears to pass all files explicitly via the command line. There's a limit to how many files you can pass on the command line before you exceed the OS command line buffer.\nThe way you get around this on UNIX systems is to use xargs--I'm not sure what tools are available to solve this in Windows however.\nHope that helps.\n. Hey @chris-dura, this sounds like a great idea.\nWould love to merge a pull request if you want it sooner rather than later. Thanks!\n. The original difficulty with this linter was the issue that the Sass parser doesn't really give us the source range of a rule set. Thus enforcing based on raw line count would not be possible.\nConsidering the intent of this feature request as I perceive it, the goal seems to be flagging complexity and suggesting that a rule set be broken down into reusable components.\nI've implemented what I believe accomplishes this goal with the PropertyCount linter in 8ddfb6affeaeec8b4e74a59dbf4923044a96d95b, which lints based on the number of properties (allowing you to specify whether you want to include properties in nested rule sets in the count). Let me know your thoughts.\n. Hey @mhujer, thanks for using scss-lint.\nI'm unable to reproduce this locally on a Linux machine, but looking at your stack trace I believe a7f6053665228aa7e8be956c8e0e55ffa5aed406 will fix the problem. It appears that the Windows version of Ruby might have some differences in constant resolution? \nAs I don't have a Windows environment to test on, can you try pointing scss-lint in your Gemfile to a7f6053665228aa7e8be956c8e0e55ffa5aed406 and seeing if that fixes the problem? I'll push out a new version once I've got confirmation the fix works.\nThanks!\n. @mhujer Interesting. All the reporters should be getting loaded by lib/scss_lint.rb, so I'm not sure why that require 'scss_lint/reporter/default_reporter' is necessary.\nIf you go to the bottom of lib/scss_lint.rb, and change it to read:\nruby\nrequire 'scss_lint/reporter'\nDir[File.expand_path('scss_lint/reporter/*.rb', File.dirname(__FILE__))].sort.each do |file|\n  puts file # <-- Add this line to see what files it's trying to require\n  require file\nend\nI believe there might be something funny going on with that code on Windows which doesn't happen on Linux. If you can do a quick check for me, that would be awesome! (adding the require statement as you suggest would work, but it seems like an unnecessary hack that should be avoidable)\n. Awesome, thanks for your help in debugging, @mhujer. \nI've changed the glob pattern to use a double asterisk as you suggested in f810626788a1b59f90759097d524ab764180ad68. I'll be cutting a new release soon once I address one other issue.\n. Released fix in version 0.24.1\n. Thanks for the suggestion, @chris-dura. \nThis seems like it should be its own linter, as it's really checking for unnecessary ampersands rather than suggesting you merge selectors. I would probably call it UnnecessaryParentReference or something similar.\nWould happily accept a pull request for this feature.\n. Implemented in 09d1db90ecb1db941cc66d1e693b5c754598a76f. \nThanks for the suggestion!\n. Thanks @geniou. Merged in f3062fe.\nI'm not sure why you had problems adding a spec--I was able to add a spec and confirm your fix fixes the problem in 51622de.\n. Yes, I tested the spec I added without your change applied and it failed with the error reported.\n. Thanks for the report, @matthiassiegel, and doubly so for including some specs!\nI've fixed the issue in 28772f0 and cherry-picked your specs on top in 0d55b44.\n. Hey @branneman, thanks for helping to improve our documentation.\nI've merged your documentation change in 58a52e1. \nI won't merge the other commit because it does not do what you expect: it will only set the gems as dependencies when you build the gem. Since I will be building the gem on a Linux machine, it will have no effect.\nFurthermore, managing platform-specific dependencies for Rainbow should be a responsibility of the Rainbow gem. Please file an issue with them if you would like to see these dependencies auto-installed.\nThanks!\n. @manovotny thanks for using scss-lint!\nFrom the description you've provided this does not appear to be a problem with scss-lint. If I run scss-lint directly against a file containing border: none, like the following:\nscss\np {\n  border: none;\n}\n...it correctly displays the following output:\ntest3.scss:2 [W] `border: 0;` is preferred over `border: none;`\nPlease make sure you are running the latest version of scss-lint (0.24.1 at time of writing). If you are, please file an issue with the grunt-scsslint project, as this appears to be something wrong on their end.\nThanks!\n. Totally up for adding this. Will get to it when I can, otherwise feel free to submit a PR!\n. Implemented in 35488c9c2ba3f6f3627f09d5df66a766e6688218.\n. Hey @nickdunn, thanks for using scss-lint.\nCan you explain what context you would refer to the word \"black\" and not be referring to a color? In general, you should be using more intention-revealing names than the name of a color, e.g. $color-text-error or something along those lines so that should you change color schemes it is not a burden to do so.\nAlso, the Sass parser itself is treating your argument as a color, as is illustrated by this example:\n``` ruby\nrequire 'sass'\nengine = Sass::Engine.new(<<-SCSS, cache: false, syntax: :scss)\n  p {\n    color: my_colours(black);\n  }\nSCSS\nputs engine.to_tree.children.first.children.first.value.args[0].value.class\n```\n...which outputs Sass::Script::Value::Color. You are welcome to file a bug with the upstream sass project if you think this should not be the case.\n. I understand it's not necessarily correct to assume that black is always referring to #000. The problem is that the underlying Sass parser always treats that as a color keyword, so from Sass's perspective they are one in the same.\nBeing able to detect what your intention is with the use of the keyword is obviously difficult. Thus, if you find this lint annoying I would suggest that you disable it in your .scss-lint.yml and call it a day.\nyaml\nColorKeyword:\n  enabled: false\nFWIW, describing your colors in terms of the actual color they represent is brittle. For example, should you change your color scheme to use \"gold\" instead of \"pewter\", you would have to update all of those references to \"pewter\" in your SCSS to \"gold\".\nInstead, you should be describing the semantic purpose of the color. Is it a border? Is it the background color of a highlighted section? Is it the color of text corresponding to an error? Should you change these colors, you only need to update them in one place and they'll be reflected everywhere.\nNow, if you are simply using these colors for the convenience of assigning them to more semantic color variable names, then that's another matter. In that case, I would disable the linter for the file where you define those colors.\nyaml\nColorKeyword:\n  exclude: 'path/to/brand/colors/file.scss'\nHope this makes my explanation clearer, and provides you with options of how to address the problem.\n. Hey @triblondon,\nThe easiest thing to do in your situation is to disable the linter.\nThere's nothing scss-lint can do in this case--the Sass parser is telling us that white is a literal color (i.e. a Sass::Script::Value::Color), so there's nothing we can do to deduce that you actually meant for it to just be a string.\nHope that helps.\n. Hey @bobrocke, thanks for the suggestion.\nWould happily accept a pull request for this, otherwise I'll get to it when I can.\n. Implemented in #186.\n. I agree the middle example doesn't really make sense. The problem is that we don't want to conflate the concept of indentation with what this linter is checking (having the curly brace on the next line report a lint if it has a space preceding it requires that it know what its indentation level is, which is the responsibility of the Indentation linter, not SpaceBeforeBrace).\nSeems like if we were to fix this we would want the Indentation linter to report a problem. I'll get to it when I can, but pull requests are always welcome.\nThanks for the report!\n. I fixed a problem in 90132c14ddb09c07ca8917e3849a84c3617021a5 where we would report a lint for code like the following:\nscss\n.class\n{ # <-- Curly on its own line would result in lint\n}\nNot the original issue, but I believe it's the issue that lead you down this path. Thanks for the report!\n. Thanks for the report, @danielguillan!\nFixed in fd930f34c7999b4f6d56f085869f00b1fa462b32.\n. Hey @shawnzhu, thanks for the report!\nThe problem has been fixed in e3ccc96cb42616cb1aec985320623bbb6608696e.\nFeel free to grab the patched version 0.25.1.\n. Duplicate of #102. \nHappy to merge a pull request!\n. Thanks for the pull request, @rrrene!\nSounds like a great idea. I've merged your commit in fdb924173430990e466c0f33adb55c7e8aeb3435.\n. Hey @roadhump, thanks for using scss-lint.\nI wasn't able to reproduce the problem given your example. When I run against the latest version of scss-lint (0.25.1 at time of writing) scss-lint correctly reports lints for both #F3F3F3 and #eeeeee in both examples.\nTry running the latest version of scss-lint and see if you still see the problem.\nHope that helps!\n. Hey @pstierhoff, thanks for the report and for proposing a solution.\nThis was actually reported in #151, in which we established that it was an upstream bug with sass. The original reporter submitted a pull request https://github.com/sass/sass/pull/1236 which landed in sass version 3.3.7 (and I can confirm that version doesn't exhibit this behavior).\nI've bumped the gem dependency constraint in 7788f7b, but in the meantime you should be able to solve the problem yourself by upgrading sass.\nHope that helps!\n. Implemented in a40511f6a063456ccb5720be55439dfdea097fc7, and added some examples to the documentation in ce6fa052e6858656a184b25350db1c3d9d007dd5.\nThanks for the feedback! If you know of any other CSS property orderings, link us to them!\n. Hey @philgruneich, thanks for making an attempt to contribute despite your lack of familiarity with Ruby.\nYou didn't include tests with your change (and your initial draft broke some tests), but I fixed those up and added some tests.\nMerged in d614246 with tests in ecf4d4b and e764cc8.\nThanks for using scss-lint!\n. Hey @bichiliad,\nJust so I'm understanding what you're asking, allow me to rephrase:\n- When scss-lint has no errors or only warnings, it should return a exit status of zero to indicate success\n- Otherwise, it should return a non-zero exit status to indicate failure\nDoes this summarize what you're asking?\nI'm fine with this approach. The migration path would require implementing #102 and setting the default severity level of all linters to be error so that the existing behavior is preserved (i.e. a lint results in a non-zero exit status).\nIf you want it sooner rather than later, I would encourage you to submit a pull request!\n. Sounds good to me. I've gone ahead and implemented this in a5f69c1a1b39bb00aacfdba75fb06f77097fc6a8.\n. Thanks for the report, @sndrs!\nSeems like the TrailingSemicolonAfterPropertyValue linter was too specific. I've renamed it to TrailingSemicolon and added support for checking the cases you mentioned in 58689b1.\n. Hey @Anahkiasen, thanks for some suggestions of how to improve scss-lint.\nI've implemented your suggestion in c667c09.\n. Hey @Anahkiasen, thanks for the report.\nThe bug here is that scss-lint should not be attempting to lint selectors containing interpolation, since the Sass parser has not constructed a parse tree that it can inspect (since variables are interpolated during compile time, which is too late for scss-lint to do anything with).\nI've \"fixed\" the problem by changing the linter to ignore selectors with interpolation in 5da038b1a279486827aff5b8c85be01dc33e0926.\n. @Anahkiasen I've just released version 0.26.0.\n. Implemented in #192. Thanks!\n. Thanks for the pull request, @bichiliad.\nMerged in 1b4a501.\n. Hey @stephenwf, \nAs @edhenderson alluded to you can specify a regular expression to match against. Camel case is a bit odd because it requires some knowledge about valid words in order to know when to capitalize a certain letter.\nI would therefore recommend that you just disable the linter. You can do that by adding the following to your .scss-lint.yml configuration file.\nyaml\nlinters:\n  NameFormat:\n    enabled: false\nHope this helps!\n. Hey @Boldewyn, thanks for using scss-lint!\nThe best way you can help us track down this problem is to post the SCSS file that reproduces this problem. Bonus points if you keep removing bits of it until you've reduced it to a small piece of code.\nHappy to fix this once we have a reproducible example!\n. This is a bug with the upstream sass parser, which I've reported in https://github.com/sass/sass/issues/1343.\nUntil that gets fixed, I've included a shim in ad752fd74581bf3a407b6a9d4b309ef191f3bdfc that catches this case and ignores it. This means some lints might not get reported, but this should be a rare case that doesn't affect too many people.\nThanks for the report!\n. Hey @Harmageddon, \nI couldn't reproduce this issue with your example. However, I realized that my editor automatically strips trailing whitespace, so when I manually added some whitespace I was able to reproduce the problem.\nFixed in 2184fe16b62cda683c991e1d1e2f42bc40eefb5b. Thanks for the report!\n. Hey @jadjoubran, this is a pretty old issue. Are you still having problems with the latest version of scss-lint? (0.37.0 at the time of writing)\n. Hey @anthonyryan1, thanks for using scss-lint!\nThe reason we haven't specified the test_files list in the gemspec is because it's not clear whether the Rubygems project will continue supporting it in the long term (see https://github.com/rubygems/rubygems/issues/735).\nAt the same time, this isn't a huge ask, so I've added the spec directory to the list of files in 0285aa0acb46d6f60e230acbaaa951e3c33e29fe.\n. Hey @Anahkiasen, I think you accidentally included the wrong code sample. (you provided a YAML file instead of SCSS)\nSend a sample and we'll fix this right away!\n. Thanks for the report, @Anahkiasen!\nFixed in 4f31b41cc89c6e583e6f8ff7cff0b82623be3112.\n. Merged in 2b62017cf8019808f70ae14558696d9b1f368531. Thanks!\n. @dlogankeenan This should not be reporting a lint on either system, so that's the actual bug here.\nUnfortunately, I don't get an error when I run scss-lint against the following (what I assume to be equivalent) example (assume #inspect has been called on the string):\n\"a\\r\\n{\\r\\n  color: #000;\\r\\n}\"\nI don't know if there's some other system-specific differences that might be having an effect here. Which version of scss-lint are you running?\nSince I don't have access to a Windows system, I would appreciate a pull request that solves the problem on your end.\n. Closing since the main feature request was implemented in #257.\n. @pcaithness Did you set ignore_unspecified (underscore) or ignore-unspecified (hyphen)?\nThe latter won't work, though maybe it should.\n. I can't reproduce your issue then (as in, when I specify ignore_unspecified, I never get a lint about text-shadow being out of order). Can you post the SCSS file in question, the version of scss-lint you're using, and your .scss-lint.yml?\nIt's also possible that a different property is out of order--the linter can sometimes report a line that isn't immediately obvious.\n. The problem doesn't appear to have anything to do with text-shadow. When I run that SCSS file against the latest version of scss-lint (0.26.1 at time of writing) I get an error on line 26, which is:\nscss\nfont-weight: normal;\nLooking at  concentric.txt, font-weight should come after font-size, but in your example it does not. This appears to be working as expected.\n. My apologies @pcaithness--I just tried this again and was able to reproduce.\nFixed in 801729c336b33dba87d2d0942d170a50bcfdaff4.\n. Looks like @trotzig fixed this in 4258797953688222fb479bed8e22096dad915d30. Thanks for the report!\n. Thanks. Merged in 38a857a8ab4c47e14d9ec265d0cfbd3ff5693563.\n. Implemented by @davidtheclark in #250. Thanks!\n. Implemented in 0fc7ba821caf968505d3d130f60a94e832295803. Thanks for the suggestion!\n. Added in 52d615fcc38876303f1536185d7222aca81e383a.\n. I'm not sure the concept of a \"sub-property\" exists in CSS (if there is one, please link to it as I would be interested in understanding the need for the separate concept).\nIf you are using a pre-defined sort order, you are subject to using that order. I don't see any value in adding support for selectively ignoring certain classes of properties within the order.\nIf you think that the order of the concentric preset order is incorrect, then that is what could be discussed. However, I'm hesitant to continually make changes to that list as it's starting to stray from the original order suggested in #185. It should not be scss-lint's responsibility to dictate different kinds of predefined orders--the justification for those orders should be handled by the creator of said order.\nSort orders are highly subjective and I don't think it is valuable to create exceptions and special cases in order to enforce it, which is why I highly recommend everyone just use alphabetical ordering--it is simple to remember and free of special cases.\n. Implemented in 800a67b.\n. Fixed by #215. Thanks for the report!\n. Thanks for the pull request @pariser. While I believe the 8 character hex code only appears in Microsoft's filter property, I'm fine with this applying in general as practically I don't think it will affect anyone negatively.\nMerged in a5192034c050cdc8bb68bc2e89bcecda3aca19cf.\n. Hey @andywd7,\nYou cannot use both hyphenated_lowercase and a regex together, since using regular expressions give you all the power you need to define your naming convention.\nFor example, if you wanted to ensure all names were hyphenated lowercase or matched some other regular expression, you could add the following to your .scss-lint.yml:\nyaml\nlinters:\n  NameFormat:\n    convention: '^(([a-z][a-z0-9\\-]*)|(<your other regex here>))$'\nHope that helps!\n. Thanks for the bug report, @kaelig.\nFixed in a06fce5a1a37fc8560b132001a63e5041db6773d. \n. We're currently blocked on an upstream bug with the Sass parser 3.4.x series in https://github.com/sass/sass/issues/1416.\nOnce that gets fixed we'll be good to update the dependency to the latest Sass 3.4.x series.\n. I've implemented a workaround for sass/sass#1146 since the maintainers won't fix bugs related to changes in the internal Sass parse tree representation.\nSass 3.4 support is added in e3f568286c3b341fdd0a9fd549468684475a8d5e. \n. Thanks for the report @watilde! \nIn this case, we shouldn't have been trying to lint the string. Since it contains interpolation, there's no way we can statically determine which kind of quotes are appropriate, so we should just skip it.\nI've fixed this in 8aeecbbfc7cc01098a7eaca26527ba564c5cd082.\n. Hey @fosterinteractive, sorry for the delay in response.\n@sgregson is correct in his example. I've added some documentation in 6110d3536102bbf4818c63d4d8c9f938eb66d3ec to clarify this option. Thanks for the suggestion.\n. Hi @Anenth,\nWe are not the authors of the Sublime SCSS-Lint plugin, and don't have the background necessary to help you with issues related to its configuration. \nPlease report your issue on their issue page. Thanks!\n. @mcandre can you include the contents of fizzy.css? It's hard for us to help you without an example of the actual code.\n. @mcandre The error you reported mentions fizzy.css, not fizzy.scss. scss-lint is not intended to be run on auto-generated .css files.\nI would exclude them from being checked by adding the following to your configuration:\nyaml\nexclude: '**/*.css'\n. scss-lint isn't intended to be used to lint regular CSS files--you can since SCSS is a superset, but that's not what the tool was designed for.\nI would encourage you to use csslint for linting your CSS files, and scss-lint for your SCSS files.\nAlternatively, you can disable the Comment linter only for CSS by adding the following to your configuration:\nyaml\nlinters:\n  Comment:\n    exclude: '**/*.css'\n. scss-lint should not be intrusively excluding directories on your behalf. This is why the configuration system was made. :)\nYou can easily configure scss-lint to exclude these files for you by adding the following to your repo's .scss-lint.yml\nyaml\nexclude: node_modules/**\n. Hey @davidtheclark, thanks for suggesting ways to improve the tool. My apologies for the delay in responding to your suggestion.\nI think the proposal you made would be a useful linter to have, though I can't offer to implement it at this time. We'd definitely be open to a pull request, however.\n. Implemented by @golmansax in #239.\n. Hey @oller, thanks for the report.\nIt would be tremendously helpful if you included the SCSS file that caused this behavior so we can reproduce the issue. (bonus points for reducing it to a small example)\n. Thanks for helping us reproduce the problem, @oller.\nFixed in 59a87156ddce40cb1f0bfe73c22b6806c4785b95. Thanks for the report!\n. Hey @mscarchilli,\nAll of the linters available in scss-lint can be explicitly enabled/disabled. Add a .scss-lint.yml file to your repository with the following content:\nyaml\nlinters:\n  Comment:\n    enabled: false\nI would encourage you to check out the documentation for all linters.\n. Added by #231. Thanks!\n. Thanks for contributing to scss-lint's documentation, @trevordmiller. \nMerged in 09342e8399fa871434b860847dca8a14b99a2d88.\n. Rather than add a specific flag, I've changed the error message for syntax errors to always be prefixed with the text \"Syntax Error\" in 25ec426999230d74399fb133cdb483ca5ac3eb68 (since those are the only kinds of syntax errors scss-lint detects). \nI've also submitted a pull request adding support for categorizing syntax errors to the scss-lint Syntastic plugin in https://github.com/scrooloose/syntastic/pull/1240.\nOnce that lands, I'll close this issue.\n. Hey @arcanis, thanks for suggesting a way we can improve the tool.\nI can appreciate the convention you're describing here: you're optimizing the resulting CSS both in terms of bytes as well as rendering performance, while continuing to describe the hierarchy of the components you are styling. \nHowever, I would like to suggest that the effort required in following this convention is not worthwhile.\nIn your example, you represent your selectors in a hierarchy for readability purposes \u2014 .something-inside-foo is a descendant of .foo \u2014 but only conceptually rather than in actuality. The purpose of nesting selectors in a hierarchy is to introduce an explicit coupling.\nIf there isn't a need to explicitly define a hierarchy in selectors, you should bias yourself towards a flatter hierarchy. In other words, I would argue the better way to write your code would be to keep it flat:\n``` scss\n.foo {\n}\n.something-inside-foo {\n}\n.and-something-inside-its-parent {\n}\n```\nKeeping yourself to a flatter hierarchy promotes the development of more general components, which improves code reusability and reduces brittleness. Not to blindly reiterate the gospel, but it bears worth repeating: tying your CSS to your DOM structure should be avoided. [1]\nFurthermore, while I don't know the specifics of your particular application, I would put forth the claim that this kind of micro-optimization isn't worth the effort for the vast majority of applications. I doubt you'll experience a major difference in rendering performance if you avoid explicit nesting. [2]\nFor cases where there is a dependency, be explicit and use nested selectors. It protects your components from accidentally being styled by more general selectors when you don't intend it.\nHappy to hear your thoughts on this topic. I would be curious if you have specific data that provides a strong case for the convention you describe. If there is, please share!\n. Sorry for the delay in response, @ArmorDarks.\nThank you for clarifying how this style is used, especially for BEM projects. I stand by my comments, but I completely acknowledge that there are simply different strokes for different folks. I can see the advantage of using indentation to communicate additional information about hierarchy without the performance cost.\nAt the end of the day, I don't see a major issue with adding an option to the Indentation linter to support this. A pull request would be welcome. Thanks!\n. Implemented in 1b0f2e5b140cd2f7ac145a93901eee6296e93529.\n. Hey @kty, we would happily accept a pull request adding support for the feature you describe. Thanks!\n. @doertedev You'll notice scss-lint's output displays the name of the linter in question:\ntest.scss:1 [W] SingleLinePerSelector: Each selector in a comma sequence should be on its own line\ntest.scss:1 [W] SingleLinePerSelector: Each selector in a comma sequence should be on its own line\ntest.scss:2 [W] SingleLinePerSelector: Each selector in a comma sequence should be on its own line\n...\nFrom the README, you can disable a linter using:\nscss\nlinters:\n  SingleLinePerSelector:\n    enabled: false\n. @piyush-avantsoft submit a pull request :) \nYou can find the relevant code in https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/single_line_per_selector.rb\n. Merged in 904e0d8d91d3586d32aee5727f297522df354f8e. Thanks!\n. Thanks for the detailed bug report, @DerFrenk.\nThis was simply due to us not including media queries in the list of block types to check the sort order of properties contained within. It is fixed by caa54f0c5663f2a37f52629ca180d1187b391550.\n. Thanks for taking the time to write up a detailed bug report, @geebru.\nThis is fixed in 4175d4791cb9ba68d5442fb949f7c26b169116aa. The problem is the trailing comments immediately following the closing brace (e.g. } // END nav).\n. Thanks for the bug report @bartveneman!\nFixed in 39a506160ea3d5f325f278d53323b6c627c94b72.\n. Thanks for the pull request, @golmansax, and doubly so for writing thorough tests. This makes it much easier to merge.\nI fixed the small Rubocop warning and merged your change in 8370ceb6c8c713d71296ba762ebae1d25fa27702, added BEM as a preset in b32fbf1f249bd10ecc7065228c6a70a790b940e8, and removed the now obsolete CapitalizationInSelector linter in 9ddcf0dc6af5811da1c6e3136e1877d250c66785.\nThanks for contributing to scss-lint!\n. Sorry for the delay in response, @gmoulin.\nThe new SelectorFormat linter should solve this issue, as @davidtheclark already mentioned.\n. Hey @gmoulin, \nSo long as you have a working regex, you just need to add the following to your .scss-lint.yml:\nyaml\nlinters:\n  SelectorFormat:\n    convention: '[a-zA-Z0-9]+'\nObviously your regex will differ.\n. Hey @bendera, thanks for using scss-lint. \nI can't reproduce your issue using the code you've provided (and with the StringQuotes linter disabled, although that shouldn't have any sort of effect on the TrailingSemicolon linter).\nAre you sure there aren't any trailing characters (like spaces) after the semicolon (though that shouldn't cause a problem either)?\n. Not having access to a windows system (let alone a 32-bit one) makes this issue difficult to debug. I would appreciate a pull request from someone who can test this issue locally.\n. Hey @davidtheclark, thanks for investigating this issue.\nI'm fine with setting a default encoding to be UTF-8 in this context, if it solves this problem. I have a hard time seeing a good reason to not use UTF-8 by default.\nIf you can submit a PR that fixes the issue for you, I'd really appreciate it. Thanks!\n. Good question. It's occurred to me that explicitly setting the default encoding might not be wise, as it could affect other applications that happen to require 'scss_lint'.\nThus it probably makes sense to temporarily set the default encoding in the Engine class, load the file, and then restore the previous default encoding.\n. Fixed by #271.\n. This is ultimately a bug with the underlying Sass parser. However, my experience with reporting these kinds of issues in the past hasn't been met with much enthusiasm.\nTo that end, I've implemented workarounds in d2d81f51e304bc29aa1c7a3e9af9787d18599c26, e4d014f, and c37e8d0f14ffcc7b9b167f27345f6aa46fbef10d.\nIt's not pretty but it'll do.\nThanks for the report!\n. Hey @ArmorDarks, thanks for the suggestion.\nA pull request would be the quickest way to get a feature like this into scss-lint. \n. Implemented by @davidtheclark in #255. Thanks!\n. Hey @josh, thanks for the contribution!\nI've merged your change in bf7ea617ac5aeba180f2f44e477e1d6f4a7fd077 and a6a7a3ee61eee9092a9e2e02f7192b51030fa93b.\n. Hey @renatoi, thanks for your comments and suggestions.\nAvoiding nesting completely negates much of the usefulness provided by using a preprocessor like SCSS in the first place. The article that @thierryk linked to could probably be summarized as: \"with great power, comes great responsibility.\"\nHowever, if this is a recurring problem with your team, you can enforce a no nesting policy via the SelectorDepth linter by setting the max_depth option to 1 in your .scss-lint.yml, e.g.\nyaml\nlinters:\n  SelectorDepth:\n    max_depth: 1\nHope this helps.\n. My apologies; you're correct that SelectorDepth doesn't do what you want. \nI'm open to a pull request that adds support for a NestingDepth linter that takes a max_depth option.\nI think a policy of no nesting at all is still overkill, but different teams can decide for themselves what they are comfortable with. The key point from the SASS documentation is:\n\noverly nested rules\n\nNesting is not inherently bad; it has its uses.\nThanks for all your comments. Will happily merge a pull request.\n. Implemented by @renatoi in #259. Thanks!\n. Released version 0.29.0 in 06d2ada1963429c585bd8111954b6194d7685bf0.\n. Thanks for the report @diegoleme.\nFixed by bdeb415ea.\n. Thanks for the suggestions @RyanWarner and @davidtheclark.\nMy only comment on this front is that allowing arbitrary text to be specified seems like overkill given my current understanding of the style landscape. In other words, the only styles I'm aware of are no space, one space, or a new line.\nTo that end, I'd be happy to accept a pull request for this feature. Thanks!\n. Implemented by @davidtheclark in #257. Thanks!\n. Thanks for the pull request @davidtheclark. I've left some comments inline, but overall looks good.\nIn an attempt to quickly answer all of your questions:\n- The wording in the readme can be changed to \"Avoid vendor-prefixed properties...\" It suggests that they are to be avoided but does not say \"don't use them at all\".\n- A whitelist of properties with vendor prefixes is fine. You can create predefined lists for Compass and Bourbon as appropriate, but yes, having a configurable list would be ideal\nOther than that, I don't see any major impediments to merging this as a feature.\n. Thanks for addressing those comments, @davidtheclark.\nMerged in 21198e9fb5aade5ead8c7157b965eae346b4cf3a.\n. The default convention of hyphenated_lowercase should result in this not being an issue for most people by default. If you start customizing SelectorFormat to use a different convention, it's easy enough for you to modify the ignored_types list to include your team's specific exceptions.\nFurthermore, attributes, elements, and pseudo-selectors follow the hyphenated lowercase style anyway, so it doesn't seem harmful to enforce it.\nDoes that make sense, or is there a reason I'm missing as to why this default would be necessary?\n. We seem to agree that there aren't really valid/popular alternative conventions for elements, attributes, and pseudo-selectors. However, that doesn't mean we shouldn't enforce a convention at all--we don't want people writing element selectors in all caps.\nThe default convention of hyphenated_lowercase enforces the de facto convention on these types of selectors. If I understand your concern, it's that if you use an alternative convention you don't want it to apply to these particular types in those cases.\nIn that situation, you can then disable the check on those types. Otherwise, we would need to provide a way to specify an individual convention for each type of selector, which seems like overkill (but I'll accept a pull request if that's what people need).\n. Thanks for the PR, @oller. \nMerged in 850bc057e1feec03da8a5cdc26837514d7ad254b.\n. Thanks for the pull request, @rodolfo2488, and for addressing those comments.\nMerged in 0d73f59abc7fd519d71c4277b9dd99d1a00d56a3.\n. It is simple enough to add another convention to the list, but it's unfortunate that this particular convention does not seem to be standardized despite its relatively distinct name.\nIf people are fine with a strict_BEM convention being the one that @mrpavlikov describes, and continue using BEM for the newer version, I'd be happy to merge a pull request. \nIf there is significant debate over which convention deserves the pure title of BEM, then please post some evidence for which one deserves the glory.\n. I'm comfortable changing the default BEM to be the from as specified on the official BEM site, and refer to the more popular version as hyphenated_BEM.\n@mrpavlikov I took your regex as-is in 308b084041041f9a625a2bfa8ced1ffeba4970c5. Would be great if you could take it for a spin (or submit a PR with tests), as I'm a little strapped for time, and this isn't a feature I would use myself. Thanks! \n. Thanks for the contribution, @davidtheclark!\nMerged in e3a63e4e6e8172125ba1eecf5c4ed54873f35666.\n. Thanks for the pull request, @davidtheclark!\nMerged in f4169ba8afeb4f5bf9e18ed491d2f484a30a6037.\n. Hey @davidtheclark,\nI can't seem to reproduce this issue on my end with Ruby 1.9.3 on CentOS. \nThe json gem should come installed when you install Ruby. If that isn't the case, I'm not sure which distribution of Ruby 1.9.3 you're running. I'm also not sure which \"development kit\" you're referring to, but I don't think that is necessary to install the json gem (again, it should come pre-installed with Ruby).\n. Thanks for the pull request, @renatoi.\nI've left some comments/questions inline, but overall this looks good.\n. Thanks for addressing those comments, @renatoi.\nI've merged your change in 273c2e9746d979ad7946f0660c18b1c38b990149. I then realized there were some simplifications that could be made, and implemented those in 5b2e46442558c20949dce5531e2a88f541de8b7c. \nIn the process, I decided that enabling this by default and setting the max_depth to 3 was probably a good idea. I also changed the concept of max_depth to assume that all selectors have a depth of 1, rather than 0, as that seemed like a more natural numbering scheme to me.\nThanks for contributing to scss-lint!\n. Thanks for the pull request, @davidtheclark. Overall looks great, just a minor comment.\nRegarding the passing of types via argument: I think the approach you've used is appropriate\u2014it's explicit and easy to follow.\n. Thanks again for the contribution, @davidtheclark.\nMerged in 898b88794c53cb4b55a8a98e3879acb50ff0afe8. \n. Hey @davidtheclark,\nThe problem seems to simply be that Windows leads its paths with a double slash (which is curious, since that's more of a URI than a standard file path). Not having access to a Windows system, I'm not entirely sure if this is configurable on the Ruby side or what options are available to address this.\nIt seems that while the tests are failing in this case, nothing is actually broken. If there is a quick solution that results in the tests passing without requiring major code changes, I would be happy to merge.\n. Thanks for suggesting a solution, @davidtheclark. It's hacky, but seeing as it doesn't break anything I'm happy with it if it fixes these issues on Windows.\nMerged in c38e71b9ed2cd00b51973fcd4836a868b32dee1c.\n. Merged in c38e71b9ed2cd00b51973fcd4836a868b32dee1c.\n. Implemented by @davidtheclark in #269. Thanks!\n. Implemented by @davidtheclark in #275. Thanks!\n. Merged in d9f5af1 with some amendments in c7dfda9 and 4b83c6c.\nThanks for the pull request!\n. Merged in 4bc53af and renamed to ImportPath in d988f19.\nThanks for the pull request!\n. Thanks for the pull request, @davidtheclark.\nTo be honest, I'm not entirely sure if this is the right solution. However, I can only hope that most developers have turned to the light side of the force and have settled on UTF-8 everywhere. We'll implement this for now and see who complains, if anyone.\nMerged in f144f3431459af7b8c729dd15934125542407dde.\n. Thanks for the pull request, @aeberlin.\nCan you help me understand the value of this flag over using file redirection provided by the shell? In other words, what is the advantage of:\nbash\nscss-lint --out somefile.txt\n...over\nbash\nscss-lint > somefile.txt\nI'm hesitant to add functionality for which a solution already exists.\n. Sorry for the delay in response, @aeberlin. Some comments inline. \nWhile I'm not really a fan of using tuples in this way, since the @options hash isn't publicly exposed in any way it seems like a simple way to introduce this functionality internally. However, good naming is useful in helping readability when using tuples.\nMake those changes and I'll be happy to merge.\n. Thanks for addressing those comments, @aeberlin.\nMerged in 81ab90facc61dc5ce3e820b8d3fbf78d1f8443bc.\n. Looks great, @davidtheclark! \nMerged in e6bb628.\n. My initial thoughts on this is that specifying ordering of selectors at this level of granularity is overkill. \nFurthermore, comma sequences throw a monkey wrench into sort ordering. How would you order the following selector blocks? Would you enforce the ordering of the comma sequence itself?\n``` scss\nelement,\n.class,\n&.foo { ... }\n.class,\nid,\n&.bar { ... }\n```\nOr would we ignore this particular case? \n. Thanks for your thoughts, @davidtheclark.\nMy position on this is that there are many edge cases where ordering would not be well defined (or, conversely, a well-defined ordering would not make sense to most humans). Furthermore, I think that regardless of which ordering you pick, it will ultimately be arbitrary and people will want to configure it.\nI am open to accepting a pull request if you are up to the task, but it would need to add support for configuring the order if we're going to start enforcing ordering at this granularity.\n. Going to close this for now given the relative complexity versus benefit.\nAnyone is welcome to re-open if providing a pull request. Thanks!\n. Hey @mmozuras, thanks for the pull request.\nI'm not clear on why this is useful. The error message you originally got was pretty clear, and I'm not sure how this makes the issue more understandable. I'm also not entirely sure what your issue in #278 is asking about.\nIt would be helpful if you explained the problem you're trying to solve in the context of some sort of use case.\n. Ah, ok. I see the issue now. This looks like it's due to an upstream change in the sass gem.\nThanks for the fix! Merged in e0957f2eb3e9c525c3fab0a14c8547e2b74571cf.\n. I'm not clear on what you are asking about. I'm not familiar with Pronto, so I'm not sure what sort of integration you're expecting from scss-lint within the context of that project.\nAn explanation of the use case you're trying to solve for would be useful.\n. Yes, scss-lint monkey patches a number of Sass parse tree classes in order to easily enable some of the tree-traversing behavior.\nYou should only require scss-lint explicitly in your code. You can do this by changing your Gemfile to:\nruby\ngem 'scss-lint', require: false\n...so that the monkey patching code doesn't get loaded automatically. You can then explicitly load it for the cases where you need it.\nHope that helps.\n. The moment you run require 'scss_lint' in a Ruby process (which is what happens when you bundle exec rake scss_lint...) you're hosed\u2014SCSS-Lint has monkey-patched the parse tree which causes any other Sass library calls to likely fail.\nI've opened #750 to track fixing this issue.\n. Hey @berbaquero, thanks for the bug report.\nI've fixed this in 3952a9ddbfd5149d9d22990832f7f809f14871e6, but agree with @lencioni that this is a weird feature to use that doesn't help much with readability.\n. I'm not sure what \"fixmyjs\" is, but I'm assuming you mean if autocorrect of any sort is possible (like the functionality provided by rubocop --auto-correct, for example).\nThis is not possible with scss-lint because the underlying Sass parser does not allow us to rewrite and rerender the parse tree back into code, whereas the parser gem that powers rubocop does. Without this ability we would basically need to write our own parser from scratch (including source mapping), which is a huge undertaking in and of itself.\nThus, you will not see autocorrection from scss-lint unless some very enthusiastic volunteer offers to write a SCSS parser that supports tree mutation.\nHope that explains it. Thanks for the interest!\n. @evoactivity No, that doesn't expose a parse tree outside of the JavaScript runtime. Since it is written in JavaScript, integration would be difficult except via a command line interface of some kind. Even then, it does not support \"rewriting\" the parse tree and re-serializing back to SCSS.\n@thegranddesign: No, the problem is not parsing. The problem is being able to modify the parse tree and serialize it back into code without inadvertently changing the rest of the indentation/formatting in the document.\nSass::Tree::Node's to_sass method is not a 1:1 mapping of the original source code that generated the Sass::Tree::Node, making it impractical for use in an auto-correction feature.\n. Hey @michaelBenin,\nWhat is the actual problem here? This seems like expected behavior to me.\nWhen submitting bug reports, it is helpful to explain what you expected the behavior to be, and what you actually observed.\n. I've reworded the message in 23842684e101e27ec4537a9303e5a3c60d34792c. Thanks for the feedback.\n. Thanks for the pull request, @aeberlin!\nMerged in 6f566c3 with a slight amendment to the test in 329b3a8.\n. @aeberlin: I've released 0.30.0 just now.\n. Thanks so much for writing tests, @mrpavlikov!\nMerged in 835672fed1935b6d2137668aeacf3a5ad1d7efea.\n. Fixed by @davidtheclark in #293. Thanks!\n. Hey @felquis,\nI'm unable to reproduce this issue with the same OS, Ruby version, and scss-lint version.\nThis tells me there is something odd about how you are encoding your files. Make sure your editor is saving the files with UTF-8 encoding.\nAlso, can you tell me which version of the sass gem you are using? The output of sass -v would suffice.\n. Hey @felquis,\nI can't repro with that version of sass either. This strongly suggests a problem with how your editor is representing the UTF-8 characters contained within it. Are you sure it's being saved as UTF-8? Check your editor's settings to be sure.\nAt the end of the day, if you want to see this fixed you're going to need to dig deeper on your own system, as that's the only place it seems to be reproduceable at the moment.\n. Thanks for reporting your findings, @aju. I'm sure it will help others.\n. Thinking about this, it seems like IdWithExtraneousSelector wasn't being opinionated enough\u2014using IDs in selectors is a smell and should be avoided entirely.\nI've renamed IdWithExtraneousSelector to IdSelector and modified its behavior to report a lint if an ID ever appears in a selector (and thus made it stricter) in aea47bb8172f5d86a5388ff7cc4b67bc51028837.\n. Thanks @davidtheclark!\nI've merged this in d68ad20. Interestingly, the specs break with sass 3.4.0 due to some parser bug (which isn't reflected in Travis since that will always use the latest 3.4.x version of sass). At any rate, I've updated the minimum version of sass to 3.4.1 in 3cdefc7.\n. @EvanLovely The fix has not been released. Pin the gem to the git repo in your Gemfile to get it now.\n. Hey @red2678, thanks for the report.\nThis does indeed appear confusing. The issue seems to stem from the fact that the SelectorFormat linter allows you to specify the format of pseudo-selectors. Unfortunately, this means that if you change your preferred convention to camel case that it will start reporting errors for pseudo-selectors, since they are always written in hyphenated lowercase.\nI believe the simple answer here is to remove pseudo-selectors from the purview of SelectorFormat, and have done so in 5ce6292.\n. Thanks for the report, @eirikluka!\nFixed in f28cb2fc8d386c6ada1c8a891404384389c1bdee.\n. I personally use Vim, so I unfortunately don't have any knowledge of Sublime's internals or plugin system.\nHowever, it appears from the error message that you are trying to lint a .bat file, which likely does not contain SCSS code.\nI would suggest submitting this question to the SublimeLinter project, as from the information I see here this doesn't have anything to do with scss-lint. Thanks!\n. @cliener scss-lint does not create .bat files.\nThis is a Windows-specific issue which I simply do not have the expertise (nor the operating system) to help with debugging. If you are interested in seeing this fixed, I need you (or someone with Windows) to investigate on your end.\nHappy to merge any pull request that fixes this issue. Thanks!\n. Thanks for taking the time to submit this pull request, @mbertolacci.\nOverall, this looks like it'll do the trick. I've left some comments inline which once addressed will allow me to happily merge this feature. Thanks!\n. Thanks for addressing those comments, @mbertolacci!\nThis looks great. I've merged it in 6959dc6 and added some documentation in efada78c6b921ec2d0b1e32f068fb0ec6db49e07.\nThanks for your hard work on this pull request. I know a lot of people will appreciate it.\n. Thanks for the quick fix, @mbertolacci!\nI've merged this in ee7b197 and did some cleanup to match the project's coding style in 8c00d1b and 663819e.\n. Hey @EvanLovely,\nWhich version of scss-lint are you running? I can't reproduce this with the latest version (0.30.0 at time of writing) or on the current master branch (b6696cb).\n. Thanks for the fixes @mbertolacci.\nMerged in 8c6ffbc and 8932449.\n. Thanks for the contribution, @chipcullen!\nMerged in f1642e1fe216d26385007d92ab496c07247351f7.\n. This is a limitation of having each linter be entirely independent of other linters.\nIn order to fix this, the ColorKeyword linter would need to inspect the configuration of the HexNotation linter. This introduces a coupling that in this particular case is simple, but sets what I believe is a bad precedent that could make linters more difficult to test and reason about.\nIn the worst case, you'll correct the keyword to the lowercase hex form, and then get a different lint telling you to correct it to uppercase, so you'll ultimately end up with the correct format.\nMost people prefer lowercase, so this default message works for the majority.\nIf this is really troublesome, I would be open to changing the message to not mention the actual color code at all. Happy to hear your thoughts.\n. Hey @mmwtsn, thanks for wanting to make developing with scss-lint easier.\nIs there any reason you couldn't just execute:\nruby\nbundle exec bin/scss-lint\n...from within your fork of the scss-lint repo? This is how I test locally and it's perfectly adequate, but perhaps I'm missing something about your instructions.\nIf you're trying to develop against scss-lint by calling its APIs, that's another story, but these instructions don't seemed to be geared towards that either.\n. Thanks @mmwtsn!\nMerged in 1b45671be01244da7a63c39d46721bf39f3429f6.\n. Thanks for the pull request, @mmwtsn. This looks useful.\nI've made one small change, which is to allow leading underscores by specifying the allow_leading_underscore option, which you can use leading underscores regardless of convention. I've also made this the default, as I think it's a pretty common coding convention.\nMerged in 0dc0defb226b6cc3efd60e995f7b49be80668031 with the modifications mentioned in c53044161ca3389795ae0915e614dbc849604798.\n. Thanks @ruedap!\nMerged in ac3e3d1.\n. Thanks!\nMerged in dc87e536d4378419a95b66ad665ebca3a50776ad.\n. Hey @pavelbinar,\nThis exception looks like it's happening in the Sass parser, not scss-lint. This would be easier to debug if you included the actual file that causes this exception.\nThanks!\n. @blomeyer If you look in the changelog you'll see that the convention option of the SelectorFormat linter was changed from BEM to hyphenated_BEM, with BEM now representing \"traditional\" BEM syntax.\nSee https://github.com/causes/scss-lint/issues/254 for the full discussion. Thanks!\n. Thanks for the fix @alex-slynko-wonga, and especially so for writing tests so we don't break this again in the future.\nMerged in 890a2bcf673aa58d64418934cd35f07e2bdd820c.\n. Thanks for the fix, @davidtheclark!\nMerged in 7d6f8a2.\n. Hey @michaelBenin,\nI'm not sure what situation lead to this behavior, but in general scss-lint returns helpful error messages.\nFor this error message in particular, error code 66 means one of the files you specified on the command line does not exist. When I run scss-lint file-that-does-not-exist.scss, I get a helpful error message as expected.\nThis suggests a problem with grunt-scss-lint, not scss-lint itself. If you can give me a reproducible case using just the scss-lint executable, then I'm happy to pursue this further. Thanks!\n. Closing due to lack of response.\n. @michaelBenin you didn't read my original response. If I run \nscss-lint file-that-does-not-exist.scss\n...I get the following helpful error message:\nNo such file or directory\nThus the problem is that grunt-scss-lint must not be displaying the output.\n. Thanks! Merged in 02859a2.\n. Thanks for the pull request, @neoascetic.\nMy one issue with this is that it changes the intended behavior of the Options class to start modifying classes that have been loaded, rather than merely extracting options that were set by the user. Having said that, this means the Options class needs to have no knowledge of Reporter classes, so it should just record the strings.\nI've implemented a different solution in 1fcce198f9a6281952f8af4961f2655ec29e683e that maintains this intent.\nThanks for spotting the problem!\n. I'm hoping to try tackling #327 before releasing a new version. If you're using a Gemfile, you can pin the gem to the latest commit on the master branch to get the fix right away.\n. Hey @willemdewit, thanks for the report.\nThe issues you are seeing are ultimately caused by the Sass parser itself. \nIt appears that comments within a comma selector, e.g. \nscss\n.buttonText, // scss-lint:disable SelectorFormat\n.p-text {\n  margin-bottom: 0;\n}\n...are not parsed as CommentNodes by the Sass parser, and so they don't exist from the perspective of scss-lint.\nThe second issue is that the Sass parser always reports the first line of the selector for any part of the selector. So even though buttonText appears on a different line, the parser reports it as being on the first line of the rule set, which is why your first example doesn't work as expected.\nIn regards to @mprins's comment about the last example: that is expected behavior. Adding a comment at the end of the line should disable it only for that line (this is similar to other tools like RuboCop). Furthermore, his proposed solution would not work due to the first comment not being parsed.\nI'm going to leave this open for now to record this issue. However, when I have time I will investigate to see if there is a reasonable workaround we can do in scss-lint to address this; otherwise I will simply close this as \"won't fix\".\nThanks!\n. I've taken a stab at fixing part of this problem in 1d892e2a7b4405b2b0daf99abb960c57a4d76bf4.\nSee the commit messages for the fine print of where that solution breaks down, but it's probably good enough for most use cases. Would happily accept a pull request for a more robust solution!\n. Merged in e355c9c.\n. Thanks for the report, @mhujer. \nFixed in d8be7c5125e68b963111a538c162b425cddf3e2e.\n. Hey @yellowled, thanks for the report.\nCan you include your .scss-lint.yml file? This appears to be something to do with the configuration you're using, as it's not clear how you got into this state (and I can't reproduce locally).\n. Ah, your BangFormat options are not indented correctly. They should be written like this:\nyaml\n  BangFormat:\n    enabled: true\n    space_before_bang: true\n    space_after_bang: false\n...not this:\nyaml\n  BangFormat:\n  enabled: true\n  space_before_bang: true\n  space_after_bang: false\nThere might be something scss-lint can do to detect this and present a friendlier warning, so I'll leave this issue open for now. Thanks!\n. There isn't really a terribly elegant way of dealing with this that doesn't involve overly complicating the Config class, which is complex enough as it is.\nThanks for the report. Until we see more people tripped up by this, we're going to leave this as-is for now.\n. Hi @andrewhowdencom,\nThis project does not maintain the IntelliJ bindings for scss-lint. Please submit your issue to that project, which I believe is https://github.com/idok/scss-lint-plugin\nThanks!\n. 0.32.0 has now been released.\n. Hey @wli, thanks for the pull request.\nWhile my first reaction to this is that rake tasks should not return status codes (or, more specifically, call Kernel.exit explicitly), I appreciate the fact that this isn't a hard rule outlined anywhere. Bear in mind this does prevent scss-lint from being used as a dependency for another rake task.\nHowever, given I'm pretty sure the major use case for rake integration is to simply run rake scss_lint to lint, I'm fine including this for now. If this bites anyone else, feel free to open an issue and we'll revisit.\nMerged in 6aa9703 with some adjustments in bd0ffa9.\n. Duplicate of #319\n. Hey @olliebennett, thanks for suggesting ways we can improve scss-lint.\nI think there's value in something like what you describe, but done in a different way. \nFirst of all, the ColorKeyword linter still has value for developers who wish to standardize on always using hex codes for colors (the documentation perhaps doesn't capture this reason effectively, but it does exist). This removes the need to address the first two points in your list.\nI think what you're actually looking for is the ability to report a lint for any color that is not referenced as part of a variable definition. In this case, I would call it ColorReference.\nThus, we would not report lints for references where a color was being stored in a variable:\nscss\n$color-text-body: #333;\n...but we would report lints for references to explicit colors\nscss\np {\n  color: #333;\n  @include my-color-adjuster(#ccc, 50);\n  ... etc ...\n}\nI think this gets to the core of what you are looking for. Let me know if that's not the case.\n. A pull request would be appreciated. Otherwise I'll get to it when I can. \nThanks!\n. Implemented in #349.\n. Hey @olliebennett,\nThanks for pointing out this discrepancy. You are right that this particular issue as filed has not quite been addressed yet. I was a bit trigger-happy with closing it.\nThe VariableForProperty linter is still valuable on its own, but we still need a linter that enforces using color literals only in variable declarations. \n. I've added the ColorVariable linter in e72cb23. Thanks for your input, everyone.\n. Hey @tabolario,\nThis functionality was actually introduced by #334, in which I specifically mentioned this would be a problem when using the rake task as a dependency.\nNow that I have someone actually complaining, I'm happy to call Kernel.exit only in the event of a failure.\nFixed in f8b44ed68eccb96e5508105d2afd848f91513335. Thanks!\n. Hey @mattberridge, thanks for reporting this issue.\nThe problem here is the lack of expansion of the parent reference & in &_body. This is actually not entirely trivial to do, as we need to manually crawl up the rule set hierarchy through each selector and find all possible selectors that could be generated. You can see how the number of potential selectors we'd have to check can grow quickly with this example:\nscss\n.a1,\n.a2,\n.a3 {\n  &-b1,\n  &-b2,\n  &-b3 {\n    &-suffix {\n       ...\n    }\n  }\n}\nThe above example would generate the following selectors:\n.a1-b1-suffix\n.a1-b2-suffix\n.a1-b3-suffix\n.a2-b1-suffix\n.a2-b2-suffix\n.a2-b3-suffix\n.a3-b1-suffix\n.a3-b2-suffix\n.a3-b3-suffix\nTo handle this in the general case is possible (assuming we ignore any interpolation), but would take some work to implement.\nWould love to see a pull request for this if this is the level of detail that people want from this linter, but from my perspective the juice probably isn't worth the squeeze.\n. Looking into this a little deeper, I think I need to withdraw my statement about this being possible in the general case.\nSuppose you had a convention that all class names in selectors are of the form .<word>-<word>, i.e. every class has exactly one hyphen.\nNow consider the following SCSS:\n``` scss\n.one {\n  &-two { ... }\n&-three { ... }\n}\n```\nIn this case, you would expect no lints, since the classes .one-two and .one-three are rendered. However, the linter will still report a lint for .one, since it doesn't contain a hyphen, despite the fact that it won't get rendered on its own. scss-lint doesn't know it won't get rendered though\u2014all it sees when it visits .one is that it is a class selector.\nI don't think it's the place of scss-lint to figure out all the clever ways you can render selectors with Sass and gracefully handle those cases. It could probably be made more clever for some cases, but as I mentioned before I don't think the juice is worth the squeeze.\nI would think of parent references as dynamic content. It takes some actual execution of the language and understanding its semantics in order to evaluate a parent reference, and scss-lint should be seen as a static analysis tool. Obviously that line can be blurred a bit, but I don't think it's in the project's interest to cross that line in this case.\n. Added in f878fd5b4475c83d08dad66458bb8c507d84e148.\n. Thanks for the pull request, @bookwyrm!\nWe really appreciate you adding tests for this feature!\nMerged in c955f70cd12cf64cae77dabe37083f3dd0e783c5.\n. This is far from trivial, and so I don't think it is a worthwhile pursuit in scss-lint.\nThe rubocop project enjoyed this capability thanks to the underlying parser gem that they use. There is no matching capability available with the sass parser, and without that this sort of feature becomes an entire project unto itself.\nThus, as mentioned in #282, unless some very enthusiastic volunteer implements a custom Sass parser with tree mutation capability, you will not see this in scss-lint.\nHope that makes sense.\n. Fixed by #346. Thanks for the report!\n. Thanks for the pull request, @asottile.\nThe issue here is that the Sass parser doesn't give us the correct source range for the entire argument when the argument is split over multiple lines.\nYour solution works as a stop-gap for this particular issue, but it will cause some lints to not be reported, e.g.\nscss\n$z-list: (\n  (\n    name1\n  ),( // <-- no space after comma will not be reported\n    name2\n  )\nI'd rather we miss lints than loop infinitely, however, so I'm happy to merge this as-is for now.\nMerged in d2016f7 with some cleanup in c469b52.\n. 0.33.0 has just been released.\n. Hey @thedamon, thanks for using scss-lint.\nYou need to nest that configuration under the linters key. Please see https://github.com/causes/scss-lint/blob/master/config/default.yml for an example configuration.\nyaml\nlinters:\n  Indentation:\n    character: tab\n    width:1\n. I'm not sure what else to offer in terms of advice. When I create a file test.scss with the contents:\nscss\np {\n  margin: 0;\n}\n(using two spaces as indentation)\n...and then create an .scss-lint.yml file with the contents:\nyaml\nlinters:\n  Indentation:\n    enabled: true\n    character: tab\n    width: 1\nRunning the latest version of scss-lint (0.32.0 at time of writing) I get the following error as expected:\ntest.scss:2 [W] Indentation: Line should be indented with tabs, not spaces\nAre you sure your file contains errors? Otherwise, I'm not sure what advice to offer here.\nBest of luck with figuring out the issue.\n. Thanks for the pull request, @mikeholm! \nI've merged this in 10f9c68 and enabled it by default in a6abf87. I think this is valuable to enable by default given how often !important is (still) misused, and the fact that you can use a control comment to disable the lint for special cases.\n. Thanks for the pull request, @mikeholm.\nHappy to merge once the Travis build is fixed and my comments are addressed. Overall looks great!\n. Thanks for addressing those comments, @mikeholm.\nMerged in 53d4533 with some adjustments in 8c85f9f. Main difference is renaming the linter to match the conventions laid out in other linters.\nThanks for your contribution to scss-lint!\n. Hey @menslow, thanks for the report.\nSince you are using non-silent comments, Sass actually parses the contents of those comments in order to interpolate values that you may want inserted. This is part of the reason why it's advised to use silent comments all the time, as you probably didn't mean to have your comments parsed as code.\nHaving said that, the issue in this case is that the Sass parser also doesn't return correct source ranges for parse tree nodes in these comments, which causes the StringQuotes linter to fail.\nI've fixed this in e9b5eea by changing StringQuotes to simply ignore all Sass script in comments, as I doubt any developer wants to have code in their comments linted (and also because I'm skeptical the source range problem will be fixed upstream).\n. Thanks for the bug report, @mikeholm!\nFixed in 25f9d7b9d9.\n. Hey @lcalvy, thanks for the report.\nIt would be very helpful if you could post your grunt/rc/scss-lint.yml configuration file, as without it I'm afraid it's not obvious what could be causing the problem.\nThanks!\n. Closing due to lack of response.\n. Hey @lcalvy,\nThe problem is your last line. You need a space separating enabled: from false, otherwise it does not get parsed as a hash key in YAML.\nHope that helps!\n. I'm not sure why you're seeing a difference between running scss-lint normally and via the rake task, but the error you're seeing is definitely a bug that would happen regardless.\nI've fixed that bug in 1a12417d69a390748825a07ea124fbe7dd078076. Feel free to file another bug if there is a separate problem at play here.\n. @SebAshton yes, this is expected behavior. \nUnfortunately, passing the string nil in YAML does not actually set the value to nil, but rather to the string \"nil\". The ~ character is reserved for setting a value to nil in YAML (not obvious, I know).\nThus the best thing to do is to not specify order at all in this case, as you have done. Hope that explains things!\n. Thanks for the bug report, @kaelig!\nFixed in ccafdd92d6d7de8ba569711c5ed166824b88383c.\n. Thanks for the report, @olliebennett!\nThis was a regression caused by a refactor in 8637aa633. I've fixed it in da2961029ae43ba69d965abd3f45a5ea0ea1117d.\n. Hey @epavletic,\nWe didn't have text-size-adjust in our list of default properties. I've fixed this in 4f08034.\nYou can either download the latest master branch of the gem, or you can add text-size-adjust to the extra_properties option of the PropertySpelling linter to fix the issue until a new version is released.\nyaml\nlinters:\n  PropertySpelling:\n    extra_properties:\n      - text-size-adjust\n. I've added support for this in 5343c703. I was actually under the impression we already supported this, but I guess we never go around to it.\nI agree that this should be used with care as it's quite likely that a non-standard extension usually means it won't parse. However, if a user is being explicit about the file they wish to lint I don't see any reason to stop them from using an alternate extension.\n. I wouldn't go so far to say the expected behavior is for it to output color. Most CLI tools switch to non-colored output when outputting to a non-TTY (grep, ack, to name a few).\nI would say that it's reasonable to expect scss-lint to provide --color/--no-color flags to force either.\nThis will require some refactoring to extract all the random puts calls into an output class so the behavior can be toggled in a single place instead of throughout the code.\nA pull request would be welcome if you want this sooner rather than later.\n. Yes, scss-lint currently uses puts to display any output. \nSee the Logger class of the haml-lint project for a typical approach to this problem.\nOtherwise I'll get to it when I can.\n. Implemented in #651.\n. The originally reported issue is a bug with the to_sass method of the Sass::Tree::Node class of the sass gem. In other words, not a problem on scss-lint's end.\nHowever, I was able to work around the problem on scss-lint's side by removing our use of to_sass from a few linters in c72392b7e59f029be96ba8ee518b9a7403c9aff9.\n. Hey @cH40z-Lord,\nThe following configuration excludes all files in the node_modules directory from all linters. I've tested it locally with scss-lint 0.39.0 and it works as expected.\nyaml\nexclude:\n  - node_modules/**\n. 0.34.0 has been released.\n. Hey @giuseppeg,\nThis feature as you describe seems fine. I'd be happy to merge a pull request with tests!\n. Duplicate of #355.\n. @abpetkov I can't reproduce the issue you describe with scss-lint 0.34.0.\nAre you sure you're running the latest version? Check your Gemfile.lock, and run scss-lint --version to make sure.\n. Hey @digitalvapor,\nI'm not sure I understand what you're asking here. Can you be more specific about what feature you would like to see the UrlFormat linter support?\n. So you're not asking for a change to the UrlFormat linter (as that only deals with url). You're looking for a linter that enforces the use of the image-url helper over url wherever it makes sense to do so.\nYou need to provide a specific set of criteria for what you are looking for here. An enumerated list of cases the linter should detect would be useful.\nI'm open to a pull request for this, but won't have time to get to it soon. It should be nested under a new Rails namespace (see the Compass linters namespace for an example) as it is Rails-specific.\n. Without a specific list of cases that this proposed linter to support, I'm closing this issue. Feel free to reopen once you have a pull request prepared or proper list of cases it should handle. Thanks!\n. Given that scss-lint now supports plugins, and given that this is Rails-specific, I think it makes sense for this to be part of a plugin and not built in to the core.\n. Thanks for the pull request, @Sweetchuck. We really appreciate having developers create integrations for scss-lint with other tool sets.\nIn this case, I think this formatter is specific enough to warrant its own gem, which can then be loaded with the --require and --format flags. This relieves us of the burden of maintaining it, but allows others to use it.\n. I apologize--that documentation is clearly incorrect.\nWhen the XML formatter was first added (it was actually the first pull request to scss-lint; see PR #1) we merged it without verifying the author's claim that it was intended to be consumed by Jenkins. Thus we included it in the documentation without confirming ourselves that it was \"useful\". It has stuck around ever since.\nI've removed the confusing documentation in 8ea0292f234610079e0a00a0f036089e19ed5a6d. You'll have to talk to @volpino to understand how he is using it with Jenkins.\nNow let me explain why I don't want to merge this into the main scss-lint project.\nBy merging this, we are setting a precedent that scss-lint directly supports third-party tools (like the CheckStyle Jenkins plugin). This is not a claim we as a maintainer of the gem want to make. As we don't use the CheckStyle plugin internally, we can't promise to ensure it's well-tested and functional.\nThus the approach we suggest is that some other party (e.g. yourself) take the file lib/scss_lint/reporter/checkstyle_reporter.rb, place it into a separate gem, and then distribute that gem. We will happily include a link to it in our documentation. Anyone can then use the formatter by passing the --require=scss-lint-checkstyle-reporter --format=Checkstyle flags to scss-lint. This provides a clean way for reuse while relieving us of the burden of maintenance. This is a style that many open source projects use (see the Atom Linter project as an example).\nThese are the sorts of decisions any large open source project needs to make. I'm sorry if this seems unfair, but I believe it's in the best interest of the project.\n. @mprins I'm down for dropping the XML formatter. It's an old relic that in light of this new information isn't being used. (@volpino: you're the only known entity who might be using it; if so, speak up now)\nI'm trying to understand why this is being met with such resistance. Let's be clear: I want scss-lint to be easy to integrate with popular tools to make developer's lives easier. My opposition to this pull request is that it:\n- Puts the burden of maintaining a third-party integration on the scss-lint project (an integration that none of the maintainers use)\n- Couples scss-lint code to a third-party plugin (if that plugin introduces a breaking change, the integration in scss-lint breaks)\n- Ties any bug fixes to the scss-lint release cycle. For one third-party integration this is not a big deal, but down the line if we had many integrations there could be breaking changes happening all the time\nThe argument that this is supported by other tools and thus scss-lint should also support it is an altered form of the bandwagon fallacy.\nI understand that having this integration be a first-class citizen of scss-lint is convenient for developers, but what I am suggesting is not outrageous. For other developers who would want to use the CheckStyle integration, it changes the list of steps from:\nscss-lint --format=CheckStyle\n...to:\ngem install scss-lint-reporter-checkstyle\nscss-lint --require=scss-lint-reporter-checkstyle --format=CheckStyle\nYou write your Jenkins job once and never think about this again. I don't see how this is objectionable.\nIf the concern is that you then have to maintain this integration, then now you understand where I'm coming from! :wink: \nI don't think third-party integrations belong as first-class citizens in tools if there is a convenient way to support them as plugins. It introduces unnecessary coupling which is poor software design.\nHere's my offer: I am happy to write this gem for you and transfer ownership (this will take 10 minutes), and add documentation in the README with instructions on how to use the gem. Is that reasonable?\n. Thanks for setting up the gem, @Sweetchuck. \nI've left some comments in https://github.com/Sweetchuck/scss_lint_reporter_checkstyle/commit/9c6f20efc85a6b53701920089df25db2bf921ba2. I don't think there are any blockers, so feel free to fire when ready!\n. Added documentation for how to use plugin in 0c2dbfc.\n. @bartveneman thanks for the report. This is a problem with the sass parser. The previous comment (// [1]) is treated as the beginning of a multi-line comment, so the sass parser sees the following comment as just a continuation.\nThis is unexpected, and breaks some fundamental assumptions our control comment processing code makes.\nI won't have time to look into this for a while, so my suggestion is to avoid your commenting scheme, or submit a PR that addresses the issue. Thanks!\n. Fixed by #539.\n. Fixed by 53494a8.\n. Version 0.35.0 includes this fix.\n. Hey @Anahkiasen,\nWhat you're describing is adding additional complexity for a specific use case. \nYou've already made an explicit decision to opt-in to using VariableForProperty for the background-color property. Adding special cases to recognize what you would call \"modifiers\" would introduce what I believe is unnecessary complexity.\nBy making exceptions for darken, lighten etc. you are going against the spirit of the linter, as you are still \"redefining\" colors. You should create $color-primary-darker and $color-primary-lighter variables so your code remains DRY.\n. Which versions of scss-lint and sass are you using, @chris-dura? \nI don't see the above behavior with the ColorVariable linter with the latest scss-lint (0.34.0) and sass (3.4.13).\n. Thanks for the repro case, @JohnAlbin.\nIt looks like this only happens in specific contexts where the Sass parser parses the tree as Sass script instead of a string, which occurs when a list literal contains function calls (image-url in your example).\nFixed in 83654ec9031ef7477cef012754a59aa47f299e53.\n. Hey @matt-bailey,\nI can't reproduce the issue with the latest version of scss-lint (0.34.0 at time of writing). I believe this bug was fixed in #355.\n. Nope, there is no situation where scss-lint looping forever would be due to user error. :)\nI've fixed this in 0cbacccdaab3e0bb7e375626774421c68bec9f89. Thanks for the report!\n. Thanks for the report, @himedlooff.\nThis is an unfortunate oversight. This linter uses reserved config parameters include and exclude, which are intended to be used to specify which files the linter should/should not run on.\nIn this case, the keyframes entry is being interpreted as a file name, not an identifier. \nI've fixed this issue in 7edbc38 by renaming the options to additional_identifiers and excluded_identifiers, respectively. Since this is a breaking change, I've also gone ahead and renamed the linter to VendorPrefix so that it matches the convention used by our other linters (i.e. singular instead of plural).\n. Hey @jaasum, thanks for the report.\nPlease see the discussion in #175.\n. They seem similar, but actually serve different purposes.\nVariableForProperty allows you to specify a customizable list of properties that you always want to be assigned a variable as a value. The common use case is for the color property.\nThe ColorVariable reports the use of any color literal outside of a variable declaration. It has nothing to do with property values\u2014it only enforces that color literals are used in one place (variable declarations).\nThus the two use cases are different. Hope that explains things.\n. Duplicate of #175 \n. Hey @tolgaek,\nIt would be helpful if you posted the SCSS code you were editing when Syntastic reported that error. Also, are you on the latest version of scss-lint (0.34.0 at time of writing)?\n. Ok, if it's happening for every file then the issue is on your end. Are you using a Ruby version manager like rvm or rbenv? If so, it's likely that if your currently active Ruby version does not have scss-lint installed that you will get an abnormal error code.\nWhat happens when you close vim and run scss-lint -v outside of it?\nFWIW, scss-lint does not ever return an exit status of -1.\n. What happens when you run !scss-lint -v from within vim?\nAgain, if that also works then I'm not sure how I can help here, as I can't reproduce this myself and scss-lint doesn't return -1 as a status code, so it's likely an issue with an rvm/rbenv shim.\n. I'm glad you figured out the problem, @tolgaek. Thanks for posting the solution! Hopefully this saves someone else some time.\n. Hey @entipe, thanks for raising this issue.\nI agree that in this particular case the resulting code generated is not actually nested, but I believe the intent of the NestingDepth linter is also to help keep your SCSS code \"flat\". Thus even though introducing nesting doesn't really add another level of actual nesting, it's still desirable from a readability perspective to keep the amount of syntactical nesting in your SCSS code limited. The deeper your selectors are written the harder they can be to read.\nHaving said that, I would be open to a pull request adding an option to ignore these sorts of selectors. It would have to handle edge cases like &--state, .some-nested-class { ... } (which you would hopefully never write but nonetheless scss-lint would need to handle them).\n. Implemented in #490.\n. I don't think hyphenated_BEM makes sense for a variable name, as it is a convention that explicitly applies to selectors.\nThis actually points out an issue with NameFormat which hasn't been addressed, which is that it exposes BEM as a naming convention option, but that doesn't really make sense for reasons already mentioned. I think this was just an oversight when it was first implemented.\nNameFormat should expose snake_case and camel_case as options, and should not expose anything BEM-related.\n. Added snake_case in 21be0e3, camel_case in a2ddd68, and removed BEM in f73135a.\n. I think part of my desire to remove it entirely was because it felt weird to apply a convention intended for selectors to variables. Placeholders I guess would still be valid.\nHaving said that, even if we added it back, we would still need to differentiate between hyphenated_BEM and strict_BEM.\n. Hey @masi,\nNext time, it would be helpful if you posted the stack trace with the bug report. It makes the investigation much easier.\nFortunately, I am able to reproduce this locally. Thanks for the report.\n. Fixed in b0de02f59ec5c376e2e5d73e673ffea96e9dd826.\n. It is an issue in that you cannot exclude certain types (e.g. function names) from being linted by NameFormat. This relates to #389 so I'm going to close this as a duplicate.\n. I'd be open to a pull request adding an allowed_shorthands property to the Shorthand linter which allows you to specify which shorthands are allowed, e.g.\nyaml\nlinters:\n  Shorthand:\n    allowed_shorthands: [1, 4]\n...would allow for shorthands where you either specify just one number for all sides or all numbers explicitly.\n. Thanks for the pull request, @kristijanhusak.\nUnfortunately, the problem is more complicated than you think. Your code fails on the following input:\nscss\n.one {\n  color: #000;\n}\n  .two {\n      margin: 0;  // This is indented too much, but doesn't report a lint\n  }\nIn essence, you need to compare the indentation of a node to its parent's indentation to truly know if it has the correct indentation, since the parent could be arbitrarily indented.\nI've implemented a solution in 53494a8, since there seems to be enough people wanting a fix for this issue.\n. Version 0.35.0 has been released. \n. Not that I know of, and it is not something that we have any interest in looking into or maintaining.\n. Duplicate of #175. See comment in https://github.com/causes/scss-lint/issues/175#issuecomment-45644321\n. Duplicate of #390, which was fixed by b0de02f.\n. Which version are you running? The latest version 0.35.0 was just released today.\n. This looks like it would cover a majority of cases, @srawlins. Thanks for offering to take it on.\nI don't think we need to support a configurable number of spaces (i.e. I think space or no_space is acceptable). I've never seen a codebase that used a number of spaces other than zero or one for any language (but I'm happy to be shown an exception).\n. Implemented in #509.\n. It seems like a smell to hard-code a CDN domain in your Sass documents. What happens if your CDN were to change? Having to update all the references would be painful.\nWhy not define a helper function cdn-url (which takes a path to a resource and constructs a full URL) so you can change the CDN domain in one place?\nIn other words, I'm suggesting that this linter is pushing you in the right direction and that there is no need to add exceptions for certain domains.\n. Closing due to lack of response.\n. Sorry, didn't mean for the questions to sound rhetorical. I was genuinely interested in understanding the potential use case here.\nThanks wanting to suggest ways to improve scss-lint!\n. Please see the discussion in https://github.com/causes/scss-lint/issues/175#issuecomment-45644321 for why using red and green for key names is a bad idea.\n. Sorry, @apfelbox. I've seen a number of similar issues reported so I accidentally thought yours similar.\nI'm not exactly sure what answer to offer here, as it's hard to come up with a solution that is exhaustive. I suppose we could add some option to allow specifying literals in maps, but then why don't you just use control comments to disable linting on the map declaration? For example:\nscss\n// scss-lint:disable ColorVariable\n$shades-of-gray: (#4c4c4c, #626262, #7d7d7d, #979797);\n// scss-lint:enable ColorVariable\nThis is what control comments were meant for, so it's not clear to me why we need to start treating these special cases directly. Happy to hear your thoughts.\n. Those seem like good reasons to me. I think it makes sense for ColorVariable to support the two cases you describe, namely:\n- Color literals in map declarations should not report a lint\n- Color literals in the rgba(#fff, .5) helper should not report a lint\nI'll get to these when I can, but otherwise a pull request with tests would be welcome!\n. Implemented in 4b91c9e.\n. Thanks for the report, @gunnx!\nFixed in 9ee61dd46554e5b4d917c89f01412daf2df76744.\n. I agree that using the actual color name for the variable is a smell. It's not semantic (it doesn't tell you what the color is for) and it's brittle in that if you decide to change from white/black you still have to update all the white/black references to their new color names.\nAdding specific exceptions for white and black seems arbitrary to me.\nWhy not name the variables $foreground and $background (or whatever makes sense in your context)?\n. Closing due to lack of response.\n. See #397.\n. Merged in 3c4d32c with some cleanup in 305e576. Thanks!\n. Hey @imcnally, thanks for the pull request.\nI think taking this a step further would actually result in this idea being more useful in general.\nWhat if we were to rename this linter to PropertyUnits, and expose configuration options to specify which units are allowed not just globally, but also on a per-property basis.\nFor example, perhaps it makes sense to always use pixels for borders, but ems are best for font sizes. Each team will have different preferences on which units they want to enforce for different property types.\nThus a typical configuration for this linter would look something like:\nyaml\nlinters:\n  Units:\n    global: ['em', 'ex', '%', 'px', 'ch', 'cm', 'mm', 'in', 'pt', 'pc', 'rem', 'vh', 'vw', 'vmin', 'vmax'] # Allow any units globally\n    properties: \n      margin: ['em', 'rem']\n      border: ['px']\n      line-height: [] # No units allowed\nBy default the linter will allow all units by default, and developers can adjust the globally allowed units or set per-property exceptions as they see fit. The allowed units for a given property is the set intersection of global and that property's list of allowed units (if none is defined, use global).\nWhat do you think?\n. Thanks for implementing my suggestions, @imcnally. Overall looks good, just a few nits I'd like to see cleaned up before merging. Thanks!\n. Thanks @imcnally!\nMerged in 52b52db. After having a second look, I noticed some issues with the implementation. I implemented some cleanup in f847d02 and fixed the issues in 71e45df and 7ad604b. The full set of changes can be viewed here: https://github.com/brigade/scss-lint/compare/52b52db...7ad604b\n. Thanks!\n. Hey @iamdarrenhall, thanks for filing a report.\nI'm unable to reproduce this. When I copy/paste your example into a file and run scss-lint, it reports no lints (and doesn't dump a stack trace). I've tried this both with version 0.35.0 of scss-lint and the latest commit on master, and with the sass gem explicitly pinned to the version you list (3.4.3).\nCan you verify that pasting the code you provided reproduces this issue on your end? (there might be some weird control characters in your file that are lost in translation)\nIf it's still failing, can you try updating to the latest version of the sass gem (3.4.13 at time of writing) and see if that fixes anything?\n. Closing due to lack of response.\n. Thanks @iamdarrenhall, that information proved useful.\nI've fixed this in 28e42c1.\n. Hey @szarouski, as mentioned above this issue has been fixed on master, but has not been released. I'll try to put out a release by the end of this week.\n. Hey @lunaryorn, thanks for your interest in better integrating scss-lint with Emacs.\nCould you elaborate on why merging the Checkstyle reporter into the scss-lint project makes things easier?\nFrom my understanding (note: I don't use the Checkstyle reporter), the list of steps to get started with that reporter are:\ngem install scss-lint scss_lint_reporter_checkstyle\nscss-lint --require=scss_lint_reporter_checkstyle --format=Checkstyle [scss-files...]\n...whereas the list of steps if it was included in scss-lint would be:\ngem install scss-lint\nscss-lint --format=Checkstyle [scss-files...]\nThe difference is negligible, and I don't think it warrants having to burden the scss-lint project with maintaining the Checkstyle integration itself. I'm open to hearing your thoughts, but I think I've covered my position thoroughly in https://github.com/brigade/scss-lint/pull/372#issuecomment-76219850.\n. Also, regarding the inaccuracy of the README section on Emacs, you'll have to talk to @diogo149, who added it in #235.\n. Thanks for taking the time to share your thoughts, @lunaryorn. Apologies for my delayed response\u2014allow me to try and respond to your comments inline:\n\nIn theory, where users read documentation, I'd agree of course, but I think we both know that this theory is not our reality.\n\nI agree that relying on users to read documentation ahead of time is unrealistic. :smile: \n\nIn this reality, a Gem more or less does make the difference between flawless support of SCSS and a broken tool.\n\nI can agree to this depending on the context. I think the situation here is not as black and white as you suggest, which I'll elaborate on below.\n\nWhich puts a burden on my shoulder, since I either have to cope with these issue reports, or write code just to catch the error and turn it into a reasonable and visible error message that directs the user to install the Checkstyle extension.\n\nI don't know what's involved on Flycheck's side to support something like this, but to me handling a user error is something that is expected of any external integration. A quick digression on the library loading error:\nRight now, scss-lint fails poorly when attempting to load a library that doesn't exist. This is a bug, and I've implemented fda135ab67de590184eb93b45df214c3481cc5eb to return a better error message along with a semantic exit code. So at the very least, this situation will be easy to detect and display a helpful error message for any tool going forward.\nRegarding the burden this places on you as the maintainer of Flycheck: I understand burdens, which is why I take the stance discussed in https://github.com/brigade/scss-lint/pull/372#issuecomment-76219850. Your feeling is that since we support \"proprietary\" JSON/XML reporters that it is not much to ask to include another. The reason the JSON/XML reporters exist is mostly for legacy reasons (they existed before we had a plugin system).\nI've just checked, and larger projects like Rubocop also have Checkstyle formatting in a separate plugin. This is a common pattern, and one that scales.\n\nCheckstyle XML is the one format that everyone understands.\n\nThis statement is somewhat hyperbolic. It is a de facto standard, but not an officially adopted standard (e.g. endorsed via W3C).\n\nIf you have that, you don't need anything else, specifically no proprietary JSON and no proprietary XML anymore.\n\nThis is not true. Developers will always want to consume output in a variety of of different formats. There will never be \"one format to rule them all\" (as blissful a utopia as that would be :smile:).\nLet me be clear: I understand your desire to simplify the burden on the user, and I can appreciate arguments that appeal to the wide-scale adoption of certain toolsets (Checkstyle in this case). My position underlying all this is that the right choice given where this project wants to go is that we want to enable third-party integrations without placing the responsibility of maintaining them on ourselves. Keeping Checkstyle as a plugin keeps us in line with that goal.\nThis may not be an answer that satisfies you, but I hope you have at least consider my response as reasonable, even if it disagrees with your stance. I welcome any additional thoughts you may have, but barring any new viewpoints scss-lint will not be incorporating the Checkstyle plugin into master.\n. Implemented by 83a6273.\n. Hey @adutko, thanks for the report.\nI agree the line number being reported isn't very helpful. I've changed the implementation to report a more helpful error message including the line number of the first out-of-place node and the line it was expected to be placed in 047b2fe74d490db61ec4570300ec4c8cb406b76d.\n. Hey @marcobiedermann, thanks for the report. \nThis was reported in #402 and fixed in 4b91c9e6a73a8bb0d47ac2789a162133a798a908. In order to prevent further confusion, I've released a new version (0.36.0) of scss-lint with the fix.\n. Thanks for the report! Fixed in eb78c5633fb9719130a9a7437d028c0e4f8ed88f.\n. Fixed in aa0f8d06a1480c1f20834b025b5e3181ac06d64f.\n. Hey @conatus,\nI might be mistaken, but I believe the hyphenated_BEM syntax is what you are looking for? Please see the discussion in #335.\n. That's a fair point, @conatus. You're definitely not the first to be tripped up by this and certainly won't be the last unless we do something.\nI like your suggestion of renaming the convention. I've chosen strict_BEM and made the change in 4d253c8337d8a99a69e87dbc1d90b23a1f15e089. Thanks!\n. Hey @christophercochran,\nIt sounds like you are trying to use the hyphenated_BEM convention, not BEM? See the discussion in #335 for more information.\nOthers have been tripped up by this as well, so we may call greater attention to this by renaming BEM to strict_BEM.\n. It seems like your understanding is correct. Unfortunately, our team does not use strict_BEM ourselves, but hyphenated_BEM instead, so I'm not familiar enough with the definition of strict_BEM to really speak to this issue.\nThe original regex was provided by @mrpavlikov in https://github.com/brigade/scss-lint/issues/254#issuecomment-59002801, who I believe is also using strict_BEM. @mrpavlikov, can you speak to this issue at all?\n@christophercochran if you provide me a modified regex that matches the cases you expect and include some tests, I would happily merge a pull request. Thanks!\n. Version 0.37.0 is already out, and 0.36.0 was released on April 8th. \n. Implemented in 92c0c62d3594b61e65b7797f8262f7fc6abf779d.\n. Hey @imcnally, thanks for the report.\nOur tests didn't catch this because we define configuration directly rather than inheriting from the default configuration. However, it is definitely surprising no one has reported this issue yet, given this has been around since scss-lint first added a configuration system.\nI've implemented a fix in d59353cb66fa04feca87e47381b4fda7e549062e.\n. Thanks for the bug report @mrpavlikov.\nFixed in 6fb318effe4e10a6f67f8f7e3914b4519f414720.\n. See #422 \n. Thanks for the suggestion, @chris-dura.\nI've added a quick fix to this in 5a8cac9a2121c37b688712fc28f35e7aaa97dd36.\nCan you think of other property values for which it might make sense to ignore? We may need to create a dictionary of values to ignore based on the property in question.\n. I think a regex-based solution would be fine here. The Comment linter can add a allowed option which accepts a regex, so for this case you can have:\nyaml\nlinters:\n  Comment:\n    allowed: '^\\s*Copyright'\nThis allows arbitrary comments to be ignored, satisfying whatever policy a team requires.\nA pull request with tests would be welcome!\n. Whatever regex suits your needs. I provided it merely as an example, but thanks for clarifying that it doesn't work in this case.\n. Implemented by #431. Thanks!\n. I'm not sure the validation of the length of the property value is really necessary. I think simply allowing the user to allow newlines will get the job done (how often are you placing property values on their own lines anyway?).\nIf you really want the enforcement of allowing newlines only for property values over a certain length, you could codify the logic so that specifying an allow_newline_when_line_exceeds_length: 80 would enforce allowing of newlines only if a number was set. Specifying 0 could mean you allow newlines at any length.\nA pull request would be welcome!\n. Implemented by #441. Thanks!\n. Thanks for the clear bug report with reproducible steps, @srawlins!\nFixed in 85f6630f33e0aa1e5e4ce01f632133eeec589a3f.\n. Implemented in #527.\n. Merged in 3d6eee463622c2678db17ba38b78349eea5756fc. Thanks!\n. Thanks! Merged in f42486fbf1ba035ca4565498bad47521b9836140.\n. The behavior described does seem unintentional. The proposal to address it seems reasonable. :+1: \n. Hey @teoljungberg,\nI didn't realize HoundCI was using scss-lint in this manner. Can you elaborate on why passing the file directly is not possible?\nThe issue here is that the entire linting framework assumes a lint is associated with a file, so your lint warnings/errors will have to have some dummy filename in them if you're going to get this to work. Why not just write a temporary file?\nI suppose I'm not against adding support for this (I didn't realize this was possible before, so I'm not sure what exactly changed), but I'm wary of introducing a hack for a use case easily solved by passing through temporary files.\n. That functionality was added so we can easily write specs for linters, but you're right that it shouldn't be too bad to support files and raw strings.\nI'd like to have the Runner class act as the main point of contact between HoundCI and scss-lint's engine. I believe the best way to support what you're asking is to add support to Runner#run to accept an options hash that takes either files or sources as a key, and then have the Runner do the rest. I'd like to avoid the previous behavior of checking the existence of the file name and attempting to load it, otherwise parsing it as a string, as that seems a little too magical.\n. Hey @teoljungberg,\nApologies, I realize we kind of left this up in the air (I left with the impression that you were willing to take it on from your comment).\nFeel free to submit a pull request!\n. Hey @iainbeeston,\nI understand the desire here, but it is slightly at odds with how we believe this tool should be used.\nIdeally, you should have a .scss-lint.yml file for each of the repositories you lint with scss-lint. This ensures that anyone else working on your repository also uses the same configuration, as it is kept up to date with the repo.\nI understand that might be perceived as a pain if you have multiple repos, but the benefits are pretty significant once you realize that you get the distribution of the configuration for free when you do this: regardless of whether you are running in a CI environment or on another developer's machine, the configuration is the same and you don't need to ensure you're keeping all those locations in sync.\nDoes that make sense?\n. I'm open to accepting a pull request adding support for this (I don't think it would be hard to implement) if you want this sooner rather than later; otherwise I'll get to it when I can. I understand this is relatively standard with other UNIX tools, and if developers would rather use a generic user-level configuration in their home directory then we should let them.\nSome thoughts on your points, however:\n\nUnfortunately not every developer on my project uses scss-lint.\n\nThen I think you're doing it wrong! :stuck_out_tongue: A huge advantage here is enforcing consistency amongst your team for how to write SCSS. I understand that getting your team to agree on a set of standards can be a hurdle, but once done it ends up saving you time in the long run as you can now enforce these conventions in an automated way, instead of via code review or ad hoc discussion each time it comes up.\n\nI prefer to keep editor or linting config separate from the source control I use for code.\n\nEditor config I agree with here to some extent (no one stores their .vimrc in source control for projects), but projects like EditorConfig aim to provide a standard way to enforce things like tabs vs spaces etc. (most editors have a plugin to enable support), which is also something that should be linked to the repository. Having different developers using different tab/space results in unnecessary code changes when editing the same file (introducing the possibility of merge conflicts etc.)\nSimilarly with linting: why would you want to vary your lint configuration from person to person? That introduces inconsistency that can cause unnecessary work. If one developer prefers selectors with format X and another format Y, they'll keep changing each other's code when working on the same set of files. Storing it with the repository is the easiest way of guaranteeing this enforcement\u2014you don't need to ensure developers install another repo with all of your standardized lint configuration.\n\nI don't want other developers to be lumbered with config they don't use\n\nI don't understand the burden you're implying here. It's a file that doesn't affect anyone unless they choose to interact with it by running scss-lint.\n\nFiles that are checked into source control alongside the code have a habit of ending up deployed on production servers\n\nCan you elaborate on why this is a bad thing? You're not shipping an executable, you're shipping a small text file. That's not going to break the bandwidth bank on any deploy process, and unless you're doing something really funky it shouldn't result in that file being served by your web server.\n\neditor, linting and build config are each only useful on one environment.\n\nThis depends on your development process. At Brigade, we use Overcommit to run git hooks in development so that linters can run against code before it is even committed. We then double-check in CI test environment that these hooks actually ran by running the linters again, but this time against the entire repository. This is certainly a level up from what most development teams do, but we believe the consistency it provides (and the incredibly low cost to implement) makes it worthwhile.\nAt the end of the day, I understand different teams will have differing opinions with how they want to develop. Since Brigade maintains scss-lint, it is necessarily influenced by the philosophy suggested above, and so some features will lend themselves towards supporting that philosophy. Hopefully this doesn't preclude different uses, so your request is still a valid one.\n. Merged in c150a008a6c4ef0c1a40f27429abb826860b49dc with some adjustments in d134072d95d8062ee00e1b7e1db1dc4f178c5fd9 to pass CI.\n. Hey @justin808, thanks for the report.\nI'm having trouble reproducing this locally (even with Ruby 2.2.1). You're right that the Rainbow string extensions aren't getting loaded, but that doesn't seem to make sense since we explicitly require 'scss-lint/cli' in the Rake task, which runs require 'rainbow/ext/string'.\nDoes your Gemfile.lock list rainbow (2.0.0) in it, or some other version? If everything looks fine I might have to lean on you to submit a pull request that fixes the problem on your end, though at this point it seems like it's likely a local issue.\n. Closing due to lack of response. Feel free to reopen if more information can be provided!\n. Thanks for the clarification, @justin808.\nI would like to remove scss-lint's dependency on the rainbow gem once we address #364, so this should no longer be an issue once that's complete.\n. Hey @gilbox, thanks for contributing to scss-lint!\nThis seems like a highly opinionated, relatively new framework for how to organize your CSS. That's fine\u2014most of what scss-lint does is enabling developers to enforce opinionated rules\u2014but it's suggesting to me that scss-lint really needs to provide a plugin system (sort of like what's described in #161) so developers can maintain these custom linters separately from the main scss-lint project.\nSince @brigade doesn't subscribe to css-bliss, it's hard for us to justify taking it on and maintaining it as part of scss-lint proper. The same goes for Compass-related linters\u2014we added this \"section\" of linters as an afterthought, but we don't use Compass ourselves internally and so this section doesn't really get any love or forward-moving development.\nI think these are providing excellent reasons for why we should support a plugin-loading system for linters. This would allow developers such as yourself to maintain linters catered to certain frameworks, but still share them with a larger audience who can benefit from them.\nI don't have a timeline for when this will get done, but I've been itching to implement plugin loading for a while now, and seeing the need here makes this even more appealing. The code you've written here will not go to waste, but you'll have to maintain a fork for the time being if you'd like to share this with others.\nI've created an issue to track this in #440.\n. Experimental support for loading custom linters via gems was implemented in #459. Please check out the master branch to take it for a spin. Feedback would be appreciated!\n. Merged in f080325 with a fix to get the build passing in 9c27792.\n. Can you elaborate on why ImportNode#== is ill-defined? Can we not just compare the current node to its previous node and if they have the same line not report the lint? (I haven't looked into this deeply, but a monkey patch seems unnecessary to me)\n. That's unfortunate. Alright, I'd be open to merging a fix even if it requires a monkey patch for ImportNode#==. Thanks!\n. See #429.\n. Thanks for the report @littlebigbot.\nFixed in 8c344feb4237826d1bc72c921d7994096dcf9387.\n. Thanks for offering to implement this, @srawlins. Happy to merge a pull request when you get around to it.\n. Implemented by #498. Thanks!\n. Hey @kaelig, this linter definitely exists: https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md#spaceaftervariablename\nWhich version of SCSS-Lint are you running?\n. Whoops, nevermind. Different location that linter is checking. :)\nReopening.\n. Implemented in #711\n. Hey @decodedigital, thanks for the report. \nUnfortunately, I'm having trouble reproducing this issue. From your report, I've tried running the file specified against scss-lint 0.37.0 using sass 3.4.13 with the version of Ruby that ships with OS X 10.9.4 (2.0.0p481), and I don't see any lints reported (more importantly scss-lint doesn't crash).\nCan I lean on you to implement a fix that solves this problem on your end? Alternatively, some more information to help reproduce would be hugely beneficial (e.g. what does your .scss-lint.yml look like?)\n. Thanks for the additional info, @iamdarrenhall.\nFixed in 28e42c1.\n. Hey @peavers, thanks for the report.\nI can't reproduce this with the latest version of scss-lint. Running scss-lint 0.37.0 (latest version at time of writing) against the snippet you provided results in no lints reported.\nHowever, it's possible that this is related to #429 which is fixed on master, but as I already mentioned I can't reproduce with version 0.37.0, which doesn't have that fix.\nIf you have any other information to provide, that would be extremely helpful; otherwise I'm going to have to close due to lack of reproducibility.\n. Merged in 2b42faa04127e74d7be35b473d483594b88fc6c4.\n. I'm fine with merging this for now, but if we start seeing more BEM-specific linters it may be worth thinking about how to extract them into a separate repository as discussed in #439. I have a feeling that will be difficult, however, given the number of linters with BEM-related options which aren't strictly used for BEM.\nThanks for the pull request!\n. Merged in b4f6da97350aaebe782bd7450f5f3f7d9c1c0760.\n. Hey @AurelioDeRosa, thanks for suggesting ways we can improve scss-lint.\nThis makes sense to me. A pull request would be most welcome!\n. Looking back at this, I don't think I understand this issue/request. However, since you have found a way to work around the problem, I believe that suggests there is nothing necessary on scss-lint's side.\nFeel free to submit a pull request if you feel differently. Thanks!\n. Thanks for the pull request, @iainbeeston!\nMerged in 006a272.\n. Fixed in fbe680a31cfc8b489e5621e441cc1501a9bdb6ed.\n. Hi @FStop,\nSorry for the confusion; it looks like a recent edit to the README left out the fact that all configurations extend the default configuration, so even if you don't explicitly list a linter in your repo's .scss-lint.yml file it will still be run if it is enabled in the default repo.\nI've updated the README to better explain this in e7947ce0342c69db4790d74b2196c1da3a264257.\n. Hey @madpilot,\nCan you elaborate on why you're parsing the default scss-lint YAML configuration with something other than the default YAML parser that ships with Ruby?\nTo me, this is a problem with the syck parser itself, not scss-lint (and I'd rather see an issue posted with that project). I'd like a better idea of why it is necessary for this file to be parse-able by syck without fixing the problem upstream.\nWe structure our YAML file this way so changes to the list result in better diffs. It's easy to insert/remove a line without touching other lines, which can't be done when the ] shares a line as the last element.\n. Alright, given the syck project hasn't seen a commit since 2012 this issue isn't likely going to get fixed.\nMerged in 7f5badbb25b1d35791d1555eba11eddcda024fb5.\n. Hey @spenno,\nThis sounds like a good idea to me since oddly structured selectors like that can make it difficult to read, especially when combined with multiple comma-separated sequences. Would happily accept a pull request adding a linter for this, otherwise we'll get to it when we can.\n. Extended the SingleLinePerSelector linter to enforce sequences occupy a single line in f99c7d064fa98b1200bf6eab6235a8f89c1d10ef.\n. Hey @IschaGast,\nThe message for the example you provide makes sense given you have allow_non_nested_indentation: false. If you set that to true, you can arbitrarily indent.\n. Thanks for the pull request @cih!\nI've merged in in 55505e5 with some adjustments in 1d9d7ee...9b6307c.\nI've very excited for this feature, but it would be great if we could get some people trying it out. This represents a big step in the scss-lint project as it must now start to support an \"official\" (as opposed to private) API for writing linters.\nI've no doubt we'll discover some issues with this new feature. I'm hoping the community will help us discover and fix them as we go.\n. @Anahkiasen Can you elaborate on why using VariableForProperty doesn't solve that problem?\nI would suggest using variables is the best way to ensure your z-indexes are \"less random.\" You can define semantically named variables describing different \"layers\" of depths so you can easily deduce from the variable name which layer an element resides.\nIf using VariableForProperty does not allow you to enforce a specific set of z-indexes, what kind of system would you consider? I would think that having a linter which enforces a specific range of z-index values is pretty arbitrary and doesn't give you any semantic benefit from a readability perspective. Someone new to your project doesn't know the consequence of z-index 100 or 1000 relative to other z-indexes, but variables for the indexes would.\nInterested to hear your thoughts.\n. @Anahkiasen: I believe VariableForProperty does solve the problem. By having a predefined set of z-indexes, your developers always choose from that predefined set. If they try to create a non-sensical number, VariableForProperty prevents them from doing this since it enforces that you use a variable.\nIf your issue is that your developers would add to this predefined list of z-indexes, that's something that can easily be corrected. As long as you're using variables, the actual value of the z-index doesn't really matter unless you're integrating with third-party CSS code.\nIf your issue is that developers would create variables inline to skirt around the issue, it sounds like you have a process problem. :)\nAdding a linter to enforce a specific integer range for z-indexes doesn't seem to solve the actual problem, unless there's a particular situation you're thinking of that I'm not considering here.\n. Closing since I'm not seeing convincing arguments for the need for such a linter, especially given the high-level issue is solvable using VariableForProperty, as discussed above.\nFeel free to reopen if you have strong feelings otherwise, but at that point a pull request would be preferred.\n. Hey @malliapi,\nThere are two separate issues here. One is that we erroneously report a lint for color keys nested within maps (so there's an issue with nesting here). The other issue is using a color literal white as an argument to a function. \nPlease see https://github.com/brigade/scss-lint/issues/175#issuecomment-45644321 for an explanation of why the second issue is expected behavior (ultimately it's the Sass parser that interprets it as a color and scss-lint can't tell what your intention is). You should be able to get around it by using the string 'white' instead of just a literal white.\n. Hey @IschaGast,\nI can't reproduce the issue you're reporting using scss-lint 0.38.0. Can you run scss-lint directly on the problematic file and return the full stack trace? (it looks like you're running from another application or script)\n. Thanks for the detailed stack trace, @IschaGast.\nThis looks like the issue that was reported in #446, which has been fixed.\nI've released version 0.39.0 with the fix.\n. Hey @bassjobsen, thanks for the report. \nEven though your issue was fixed by adding a $, this is still a crash on what could be argued is valid input.\nI've implemented a fix in a9b8fe3963265af1e41fc7417801640e53564921.\n. Hey @rvock, \nIf I understand your request correctly, this would necessarily require that you could only lint one file at a time via STDIN unless you came up with some format to separate each file. This format would necessarily be arbitrary (unless there is a standard somewhere, though a quick search doesn't reveal anything obvious to me). In general, I think it's probably easier for you to work with temporary files, as that way you can lint multiple files at a time.\nI would encourage you to check out the Overcommit project, which already has support for scss-lint, rather than write your own pre-commit hooks.\n. Closing due to lack of response from @istro, specifically on the issue of why letter-spacing was separated from other text-related properties.\nThis raises an important point: I don't think it makes sense for scss-lint to be the discussion ground for third-party sorting presets, especially when those presets are not part of a published standard. Hopefully the work done in #459 makes it easier for individuals to \"own\" the SMACSS sort ordering. They could simply create a repository with a SMACSS sort order specified in the configuration for PropertySortOrder.order option.\n. This didn't work. See #483.\n. Thanks @lencioni! Merged in d6675f0626c56bfde1fb64d8d4cf6d2b1c2e52ba.\n. Hey @olafgleba,\nWe explicitly removed the BEM convention from NameFormat in f73135a47b5 since it didn't really make any sense (since BEM only applies to selectors). Placeholders aren't really selectors in this case.\nSince the SelectorFormat linter also lints placeholders, it seems like we should just remove placeholders from the NameFormat linter's purview. Any objections?\n. I've removed placeholder linting from NameFormat in b919a4228d1e885faacf03cbec5c0a2d2ac63a37. Thanks for your feedback, @olafgleba.\n. Hey @damianszczepanik,\nThanks for taking on the task of integrating scss-lint with Sputnik. If I'm understanding your question, the answer can be found in the README.\nIn a nutshell, all lints have a severity of warning by default, and you can configure them via the severity option.\n. Hey @starryeyez024,\nWe recently changed the name of the gem from scss-lint to scss_lint (i.e. changing from a dash to an underscore) to match Rubygems naming conventions. You can find the latest version at https://rubygems.org/gems/scss_lint and install it with gem install scss_lint.\nSee the 0.38.0 release notes for more information. Sorry for the confusion!\n. Fixed by #558.\n. NestingDepth does what it says: checks the depth of nested blocks. There is an open issue to have it ignore any blocks which are just parent reference suffixes (see #384).\nI think it's important that NestingDepth and SelectorDepth retain these separate behaviors. The behavior you are seeing here, while perhaps odd at first, makes sense to me given the goals of each linter. If you find it confusing, you can disable one or the other.\n. Hey @viveleroi,\nThis request sounds reasonable. The one gotcha is that while it may not be common, you can have a comma sequence that contains more than just pseudo classes, e.g.\n.panel {\n    > header {\n        .btn-clear {\n            &:hover,\n            .some-class { } // <-- Now increasing nesting depth is necessary\n        }\n    }\n}\nThus any implementation will need to handle this case.\nA pull request would be most welcome!\n. I'm realizing that this is a duplicate of #384, so closing in favor of that issue.\n. Hey @meowsus,\nYou want ignore_unspecified: true, since you want to ignore transition/overflow-y/box-sizing etc. since they are not defined in your custom order. \nIs there something in the documentation that would make this clearer?\n. Sorry @meowsus, I misunderstood what you were getting at.\nThe problem here is that Ruby's Array#sort method is not stable. As a result, the unspecified properties could have their relative order shuffled. When I run your example above, this is the order it expects:\nscss\n.selector {\n    position: absolute;\n    top:    0;\n    bottom: 0;\n    padding: 20px;\n    width: $drawer-narrow-width;\n    background: $drawer-bg-color;\n    overflow-y: auto;\n    transition: left 0.25s ease-out; // <-- Swapped places with overflow-y\n    box-sizing: border-box;\n}\nI've implemented a fix in 04f22b2.\n. Hey @meowsus, 0.39.0 has already been released. \nYour problem is likely due to the scss-lint gem being renamed to scss_lint. Please see the release notes for 0.38.0 for instructions.\n. Sorry @meowsus, I only read your comment about being unable to pull from Rubygems. I didn't look at the issue we were discussing. :)\nThis fix is only on master and has not been released.\n. I think @chris-dura captured a lot of what I would normally contribute to this discussion.\nOne thing I will acknowledge is that perhaps we could relax the check if you are assigning the result to a variable (though that starts to sound like we're making the linter itself less useful at capturing duplicate uses of a hex color). It's entirely possible that you have some clever function which you use to generate all of your core colors. However, ideally you would isolate those to a single file and just disable the ColorVariable linter in that file. \nDoes that sound reasonable?\n. Hey @wardpenney, thanks for the report.\nI think the answer here is to remove the checking of placeholders from the NameFormat linter, as it doesn't really make sense (as has already been discussed in #472).\nI've done that in b919a4228d1e885faacf03cbec5c0a2d2ac63a37.\n. Hey @mintuz,\nIt would be really helpful if you included a small sample of SCSS code that reproduces this issue and explain why it doesn't do what you expect. As it stands, it seems like the warnings you're seeing are legitimate (though it's hard for me to tell without your code). For example:\n``` scss\n.class {\n  ...\n}\n.class + input { ... }\n```\nThe above can become:\nscss\n.class {\n  ...\n  + input { ... }\n}\n...and thus scss-lint is doing the right thing by telling you that you can merge the selectors.\nI'm going to close this as it's likely just a misunderstanding of scss-lint's output. Feel free to reopen if not.\n. Which version of scss-lint are you using, @ryanmc2033?\nPlease upgrade to the latest version of scss-lint, as a similar issue was reported in #402 and has been fixed.\n. Thanks for the report, @ryanmc2033.\nFixed in 5b537a09eb6831fb1771c440db0dec5ea17e15e7.\n. Since we at @brigade don't subscribe to the SMACSS philosophy per se, I can't speak to whether this would be an appropriate place to order box-sizing.\nNow that an implementation for #440 has landed on master, I'm hoping someone from the community can step forward and \"own\" any SMACSS related configuration, so we can remove this default ordering from scss-lint and have it in its own plugin. Developers who want it can load the plugin separately.\nUntil #440 gets released, can anyone else who uses SMACSS vouch for this ordering?\n. Hi @anguspiv,\nThe ExtendDirective has not been released yet\u2014it is only available on the master branch of scss-lint at this point in time.\n. Hey @bassjobsen,\nIt appears that the comment control processing logic doesn't like you splitting up the scss-lint:disable lines across multiple lines. You can work around this by writing:\n```\n// scss-lint:disable ColorKeyword, ColorVariable\n@mixin test($color: red) {}\n```\nI'll leave this open to track the bug. Thanks for the report!\n. Fixed in e4a7513300c98f4e0db80a4b2b71f2b23619cef9.\n. I'm not sure I understand your question, @bassjobsen, but I'll try to answer.\nYes, the \"path\" inside url(\"path\") is a quoted string. It has quotes around it, so it is treated by the Sass parser as a string.\nIf you do not want to require quotes around URLs, you can disable the UrlQuotes linter using:\nyaml\nlinters:\n  UrlQuotes:\n    enabled: false\n. I'm not sure where you are getting the impression that url(\"path\") is the complete string for the parser. In this case, the Sass parser treats the URL as a Sass::Script::Tree::Funcall, and the string inside as a Sass::Script::Tree::Literal (which wraps a Sass::Script::Value::String).\n. I'm still not clear on what exactly you are asking, @bassjobsen. Sorry if I'm missing something terribly obvious.\nTo me, the question you asked was: \"does the Sass parser treat url(\"path\") as a string?\". The answer to this question is no. It is represented in the parse tree as a Sass::Script::Tree::Funcall. This is then rendered in the compiled CSS as a string, but that last step is obvious and not terribly interesting.\nurl(path) is treated differently, and will actually be treated as a raw URL type as defined in the CSS spec, in which case it is represented in the parse tree as a string (Sass::Script::Tree::Literal wrapping a Sass::Script::Tree::String). scss-lintencourages you to use quotes in the URL so that the Sass parser represents the URL as a Sass::Script::Tree::Funcall instead of a single string, and you avoid some special escape character behavior of the raw URL literal referenced above. It also tends to syntax highlight better in some editors.\nIf your question revolves around whether url is a special built-in that gets evaluated like a Sass builtin function like rgba, then the answer is no, it is rendered as a regular string.\n. I wouldn't say this is a regression due to #402, I would say we just never considered treating rgb/rgba/hsl/hsla as literal colors, but I suppose they would qualify.\nI'm open to adding support to ColorVariable to disable color functions as well.\n. @apfelbox your matrix looks reasonable to me.\n. Implemented in #569.\n. Hey @ptarjan,\nI think this gets complicated when you start having comma selectors, and imposing a particular ordering could mess with specificity. See the original discussion in #112 for more details.\n. Ah, I misunderstood. Within comma selectors I order based on the expected order of the elements within the document (which isn't something you could lint by just inspecting the SCSS code).\nI'm open to accepting a pull request for a linter that enforces sort order here, but I'm not really sure what kind of orders even make sense (ordering by length is something, I suppose).\n. Thanks for the pull request, @cih!\nMerged in ab88d135a717d6a36073894913b3881a1c1ac46b\n. Sorry for the delay in response, @viveleroi. 0.40.0 has now been released.\n. Hey @teoljungberg, thanks for the pull request.\nThe reason I don't want to revert back to the previous behavior of testing for file existence to determine whether to treat a string as code or a file is because it's not terribly clean.\nFor example (while perhaps a silly example) the string p{} is a valid file name as well as valid SCSS code. Do we prioritize loading the file over parsing it as code in this case? (again, we can argue about whether this is practical, but it is an issue).\nI was hoping we could adjust the runner to instead accept an options hash with files or source keys, and then lint based on whichever keys are present. This changes the signature, but I think is a cleaner approach if we want to support this in a proper way.\n. Closing this pull request as it seems to have been abandoned. Feel free to open a new one with the comments above addressed. Thanks!\n. Hey @Undistraction,\nThe latest version of scss-lint at time of writing is 0.39.0. scss-lint was renamed to scss_lint to follow RubyGems naming conventions. This was documented in the release notes for 0.38.0 and is also explained on the RubyGems page. \nPlease install using gem install scss_lint and/or update your Gemfile to say gem 'scss_lint'.\n. Thanks for the fix, @ivantsepp!\nMerged in 1d591fac254efc43b4746746e01038fe5bc1f521.\n. Good idea, @golmansax. I've done this in d495bc66b45920023855e76c5b8e8a55b38d3633. Thanks!\n. Thanks! Merged in bdc4521.\n. Nice, thanks!\n. Hey @ptarjan, that CSS looks perfectly valid to me from a syntactical perspective. If you are referring to the lack of units on padding, this kind of checking can get complicated since it's hard for scss-lint to know all the situations where specifying units would make sense (especially when you need to also work around interpolation). \nThere might be a solution where we can get the PropertyUnits linter to report a warning when no units are provided for certain properties. I'd be open to a pull request adding that functionality, otherwise I'll get to it when I can.\n. @ptarjan is there a documented list of CSS properties and their allowed units you could point to? That would make implementing this request pretty trivial.\n. Hey @karmasalad, thanks for the report.\nPlease see https://github.com/brigade/scss-lint/issues/339#issuecomment-72404341 for an explanation of why scss-lint won't detect this in the general case.\n. Hey @CamJN,\nCan you include the following information to aid in debugging this issue?\n- ruby --version\n- sass --version\nThanks!\n. I'm not able to reproduce this issue locally. \nA quick search reveals this may be a problem with the version of Psych you have installed, or your RubyGems version. Please see https://github.com/bbatsov/rubocop/issues/1510 for more information (there's not really anything scss-lint can do to help you in this case). \n. Unfortunately there isn't a simple way for scss-lint to work around this, so you need to augment your Gemfile yourself. See d495bc66b45920023855e76c5b8e8a55b38d3633 for details.\nRelated to #496.\n. Thanks for the report, @dustindowell22!\nFixed in bcd8ceaa08347332065a73617f73c22aa285d203.\n. I don't think it makes sense for scss-lint to support an arbitrary format used by a third-party tool. That introduces an unnecessary coupling (any changes to that format will break scss-lint).\nYou can easily convert csscomb's preset format to an scss-lint-compatible one with the following short script:\n``` ruby\nrequire 'json'\nrequire 'yaml'\njson = JSON.parse(File.read('zen.json'))\nputs({\n  'linters' => {\n    'PropertySortOrder' => {\n      'order' => json['sort-order'].flatten,\n    }\n  }\n}.to_yaml)\n```\nYou can modify this to insert nil between the groups if you would like that. \nConverting from an scss-lint preset order to csscomb's JSON:\n``` ruby\nrequire 'json'\norder = []\ncurrent = []\nFile.foreach('concentric.txt')\n    .reject { |line| line.start_with?('#') }\n    .each do |line|\n  if line.strip.empty?\n    if current.any?\n      order << current\n      current = []\n    end\n  else\n    current << line.strip\n  end\nend\nif current.any?\n  order << current\nend\nputs JSON.pretty_generate(\n  'sort-order' => order\n)\n```\nIf csscomb supported a JSON format that didn't have any keys (i.e. was just the array of arrays format under the sort-order key) I would be more open to considering this. Happy to hear your thoughts.\n. Thanks for your thoughts, @kristerkari.\nI'm happy to say that scss-lint supports plugins as of #440, so it sounds like the feature you are looking for is supportable if someone is willing to take on the responsibility of maintaining the plugin.\n@brigade can't take on the task of maintaining all of these different integrations (we aren't experts with every toolset\u2014no one is). Hopefully someone from the community will step up and and make those plugins a reality if the need for them is real.\n. They are indeed different, @Janther.\n[class=\"foo\"] will match elements with only the class foo. .foo will match elements where at least one of the classes is foo. For example:\nMatched by .foo and [class=\"foo\"]\n<p class=\"foo\">...</p>\nMatched by .foo only\n<p class=\"foo bar\">...</p>\nHope that helps.\n. Thanks for the report, @lencioni.\nHotfix was released in 0.40.1.\n. Thanks! Merged in be6c30fa2f7df4166473a5cf84c3f0decce5ead0 after fixing some trailing whitespace and commit message nits.\n. Hey @srawlins, thanks for tackling this feature!\nIt looks like this returns false positives for any variables with dashes in the name, e.g. $my-variable (these are valid variable names in Sass).\nCan I get you to fix that issue? Other than that this looks great.\n. Sorry for the lack of example, @srawlins.\nWhen running your linter I get false positives for dashed variables in expressions, e.g.\nscss\np {\n  font-size: em(16px / $base-font-size);\n}\n. Looking much better. Still seems to be some unexpected results when it comes to parentheses. A silly example:\nscss\ndiv {\n  top: ($padding) * -1;\n}\n...outputs:\n`$padding) * -1;` should be written with a single space on each side of the operator: `$padding ) -1;`\n. Thanks for continuing to dig into this, @srawlins.\nSome additional odd cases:\nscss\n@if $var == 1 or $var == 2 {\n...\n}\n`$var == 1 or $var == 2 {` should be written with a single space on each side of the operator: `$var == 1  or $var == 2 {`\n...and:\nscss\np {\n  margin: $var + $var2 + $var3;\n}\n`$var + $var2 + $var3;` should be written with a single space on each side of the operator: `$var + $var2  + $var3;`\nBoth these seem to illustrate the same problem, where the space separating the nested left expression from the right expression is not recognized.\n. Sorry for the delay in response, @srawlins.\nMerged in c44e3e5 with an additional fix for multiline expressions in c8c6a99. Thanks for your hard work on this!\n. Hey @awolkers,\nThis sounds like it could be useful, but I see some difficulty in identifying when certain kinds of comments are required (e.g. do you always want the @example directive present in your comments, or only for @function definitions?). \nDocumentation guidelines are extremely organization-specific, and so it's not clear to me where to start in enforcement. There are tools like Inch CI which specialize in giving you feedback about the quality of your documentation (right now only for Ruby/JavaScript/Elixir, but I believe you can write plugins to add support for other languages). It may make more sense to utilize a separate tool in this case.\nIf you could provide some concrete suggestions of the kinds of checks you would like to see (and how those checks could be configured) it would be helpful in getting a better sense of what's involved here.\n. Closing due to lack of response.\nFor what it's worth, I really do think this kind of linting would be best handled by a separate tool. Serious implementers should consider writing a plugin for Inch CI.\n. Hey @kristerkari,\nWe explicitly ignore vendor prefixes because it seems like overkill to specify their exact order. Being able to just write animation-delay in your order list, and automatically ordering the -moz-*, -ms-*, and -webkit-*, prefixes to be in alphabetical order saves you a lot of typing in the order list.\nIs there a strong reason you need to order the vendor prefixes a certain way?\n. Thanks for clarifying, @kristerkari. Happy to accept a pull request that implements this feature.\n. Hey @brunowego,\nNow that scss-lint supports plugins this feature request is something that can easily be added by a third party. Since @brigade does not use PostCSS (yet?) we would rather not be the authority on best practices for working with various PostCSS plugins.\nFeel free to create a plugin and share it with the community!\n. Quickly throwing something together from the Sass brand page:\n\nI'm no designer, but if we're gunning for a 1.0 release as discussed in #725 then we should probably have something as a logo. Would love other suggestions. \n. Nice! I find your last one very aesthetically pleasing. The dotted lines maintain the playfulness of the original logo, which I think people associate with the Sass brand (at least I do).\nWe're good to manipulate the logo. The Sass brand guidelines mention the work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License, which means we can modify as long as we mention we modified it and link back. Their only usage rule is to be respectful in its use (no sexist imagery), and I think we're good on that front.\n. I've gone ahead and added the logo in question to the README. Even if it still needs work, it looks \"good enough\" to me and gives the project a more welcoming home page.\nThanks for your work on this!\n. The issue you're referring to about multi-line comments being parsed as a single comment is captured here: #373.\nAs for the linter request: yes, happy to merge a pull request.\n. Implemented in #519. Thanks!\n. scss-lint used to support \"inheriting\" configurations but removed it in 56cbbd2f68779fd3906c5c136483a2cfafc12a29. Pasting the commit message here because I think it's informative about why:\n\nRemove inherit_from and per-directory configuration support\nThese two features were created very early in scss-lint's history, and\n   were largely a result of trying to emulating the rubocop project's\n   configuration system.\nOver time, it's become clear that the configuration system is the most\n   complex part of scss-lint, both in implementation as well as tests. At\n   the core of this complexity is the ability to \"inherit\" configuration\n   files via inherit_from, and to load directory-specific configurations\n   based on the location of an SCSS file.\nI think supporting these features encourages messier and harder to\n   understand configurations. After seeing scss-lint used in the wild,\n   it's clear that a majority of users only have an .scss-lint.yml file\n   in the root-level directory of their repositories, and furthermore those\n   who actually have custom configurations in subdirectories could easily\n   merge those configurations into the root config.\nBy allowing configurations to be located anywhere in the repository, the\n   developer now has to search multiple files in order to reconcile their\n   configuration, rather than consult a single file. While this may mean\n   the single file is larger, we're not talking thousands of lines of\n   configuration.\nRemoving these two features free us to simplify the configuration system\n   significantly, and opens up some other refactoring opportunities.\n\nThus I'm not terribly interested in re-introducing this functionality unless the implementor completely refactors the configuration system to be better-decoupled and well-tested.\n. I think I understand what you're asking, @webgefrickel. You're requesting that scss-lint support ascending directories (starting from the current working directory) until it finds an .scss-lint.yml file, and using the first one it finds.\nI would be open to adding such functionality, although it's always a bit surprising to accidentally be using the .scss-lint.yml from an ancestor directory when you forgot to create an .scss-lint.yml in your current directory.\n. Sorry for the delay in response, @srawlins.\nI like having a single location where default enabled/disabled configuration can be consulted. It eliminates the possibility of drift between the actual default configuration and the README.\nAt the same time it's rare for a linter to change from being disabled by default to enabled by default, so the opportunity for documentation to fall out of sync should be relatively low.\n. Thanks for the pull request!\nMerged in 3f459fe. \n. Yes, you can nest the + &__buttons portion under &__image.\n``` scss\n.b-some {\n  &__image {\n    width: 100%;\n+ &__buttons {\n  margin-top: 14px;\n}\n\n}\n}\n```\nHope that helps.\n. Thanks for pointing out my error, @KODerFunk.\n@geniou: you implemented MergeableSelector. Any thoughts on this particular issue?\n. @geniou yes, perhaps we shouldn't report the selector as mergeable if it contains multiple parent references.\n. Fixed in fa06a602a25bf1ef83273d47e21e2bb78274536d.\n. Ah, that's unfortunate. Looks like the original implementation in bdc4521 nested it under the incorrect module.\nI've fixed this in 5c29141. Thanks for the report!\n. Merged in ce7edf0a694cb56d85d3a3ef2e4c9551aac7ec61.\n. Implemented in #525.\n. Merged in 2062370304ce046138660a028e6cbb94b01e85b1. Thanks!\n. Thanks for the pull request, @srawlins.\nMerged in 2a8b0ba.\n. I'm unable to reproduce, and I agree this looks suspiciously like #478. \nClosing as duplicate.\n. Thanks @srawlins.\nMerged in 1fc6020fadcfa30c976dbf89e7b0564ba6c87a10.\n. Fixed in 27492d33322f87c3d47420db39cb39cddcc67983.\n. I haven't personally heard the term \"adjoining classes\" before, but I assume you are referring to this: https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes\nFeel free to submit a pull request!\n. Implemented in 948535e65b460019bbe215c995dc60f7fb39ea2b. I've opted for the name ChainedClasses as I think it is a more intuitive name (though have documented \"adjoining classes\" as an alternate name).\n. Hey @brauliobo,\nThere's a lot going on in this pull request without much documentation. From what I see, you are trying to do four separate things:\n- Replace scss-lint's monkey patching of Node#children with a separate linter_children method\n- Add support for automatically fixing lints? (the --apply flag name isn't very descriptive here. Other tools usually use the name --auto-correct)\n- Split MergeableSelector into separate linters (Why? An explanation of the purpose for this would be useful, as it introduces a backwards incompatibility with developers who configure MergeableSelector)\n- Add a new GroupableSelector linter (again, with no documentation--please add documentation to the linter README)\nPlease split these out into separate pull requests with clear descriptions of the problems they are trying to solve. This allows us to merge them individually without holding up the whole set due to problems/concerns with one of them.\nFurthermore, you've probably noticed that the lint checks are not passing. Please ensure all RuboCop-related warnings are addressed before submitting a pull request. Thanks!\n. Hey @brauliobo, thanks for the pull request. Really appreciate the effort to add support for something that I know a lot of users are looking for.\nSadly, I'm concerned with the general approach here. Relying on to_scss is not a viable option, as it will re-serialize the entire source code tree, likely leading to unwanted changes. As I've already explained in https://github.com/brigade/scss-lint/issues/343#issuecomment-70279869, other projects (such as rubocop) benefit from a better parse tree which can actually be changed at runtime and re-serialized without touching the rest of the source code. We don't have that flexibility with the sass gem here, so any solution will need to implement that from scratch (a huge undertaking, IMO).\nI'm open to other approaches if you have any suggestions.\n. Closing due to lack of response. Feel free to reopen if you can come up with a new approach!\n. Thanks for splitting out these pull requests, @brauliobo.\nThere are still some RuboCop errors and general style concerns that need to be addressed. Also, documentation needs to be added describing what these linters are intended to do.\n. Closing due to lack of response. Feel free to reopen with the issues identified corrected!\n. Thanks for the pull request, @brauliobo. There are still a number of RuboCop errors and general style concerns that need to be addressed.\n. Closing due to lack of response. Feel free to reopen with the recommended suggestions implemented!\n. Hey @wincent,\nYes, I have given this some (significant) thought. haml-lint and slim-lint are my attempt at converging on a design that is generalizable enough to be used in some form of generic linting framework. If you look at their code you'll notice they are (almost) exactly the same\u2014this is intentional as I try to wrap my head around how to think about extracting a reusable framework from them. Unfortunately it's slow going as they aren't the top of my priority list.\nAre you looking to create a linter of your own? \n. @if is tricky because of @else if/@else. I also think that since it deals with control flow the same rules need not necessarily apply.\nI would certainly be open to extending EmptyLineBetweenBlocks to accept a configuration option that allows you to choose which type of block statements for which you want to enforce blank lines.\n. I think allowing you to name each type of node separately would be sufficient, rather than introducing fancy names for entire types of blocks. So adding a spaced_blocks option where you can specify:\nyaml\nspaced_blocks:\n  - media\n  - if\n  - for\n  - each\n  ...\n...would likely suffice.\n. Thanks for the fix, @srawlins!\nMerged in 4cd853748070c0ae63c844231cde15eb38d70bae.\n. Thanks for the fix, @cih!\nI agree an early return would be preferred in this case. Otherwise this looks good!\n. Fixed in dd5696d54bbe2152488bdc11a9a429da360e3b75. Thanks for the report!\n. Fixed by @554.\n. Thanks for the report, @baileyparker!\nFixed in 34f62fea806d048c7b79a4af7fa1fc992067a9b6.\n. Hey @najela,\nI'd be open to a pull request adding support for a style option to allow you to choose which comment style to enforce, but can you give me some idea of why you want to enforce /* */? Those kinds of comments are actually rendered in your CSS, which increases the size of your assets (thus resulting in a slower page load). \nIn other words, I think this might be a Bad Idea\u2122, but I'd love to hear about your use case so I can better understand. Thanks!\n. Added a style option in 276668aa077d4f69fa1997ee2c54500a8c967048.\n. Hey @franz-josef-kaiser,\nThis is a feature YAML: the * is a special character that gets interpreted as an alias. You'll receive a parse error in this case.\nThe only workaround is to use quotes. Hope that helps!\n. I'm sorry @franz-josef-kaiser, I don't think I understand your issue.\nWhen I have the following .scss-lint.yml configuration:\nyaml\nlinters:\n  PropertySpelling:\n    extra_properties:\n      - '*zoom'\n...and I run it against the following SCSS:\nscss\np {\n  *zoom: 1px;\n}\n...no errors are reported, and thus everything works as intended. Can you provide a clear example of the output/behavior you are expecting?\n. What other configuration options are in your .scss-lint.yml file? Are those other configuration options working as expected? Are you sure scss-lint is using the correct configuration file?\nscss-lint 0.40.1 is working as expected for me locally, which tells me this is a configuration issue on your side. If you run scss-lint dev/assets/sass_new/global/_mixins.scss --config=path/to/your/scss-lint.yml directly (i.e. outside of grunt) do you still see the error? \n. Merged in 14417874f413d3ff0f2ebe9dfd1e2eb728d966ef. Thanks!\n. Fixed by #558.\n. Hey @montchr, I'm not able to reproduce this with the latest master branch of scss-lint (running Ruby 2.2.2 with sass 3.4.16).\nFeel free to reopen if this is still a problem on the latest master (e19a4b8be9ccbf47e33815c617355602553b48ac at time of writing).\n. Merged in 8c4d9464353f05adf1fa164edbe161c2468d3ad6. Thanks!\n. Implemented in #556.\n. Thanks! Merged in 62641033111fb3f2dc08cc6a1c0c0fc5237a1e41.\n. Thanks @srawlins! These kinds of issues are never fun since it requires so much work for what are ultimately edge cases. Thanks for taking the time to implement a more robust solution.\nMerged in e19a4b8be9ccbf47e33815c617355602553b48ac.\n. I understand where you are coming from, but you really have to ask yourself if using functions/maps is going with the spirit of what the check is intended to enforce.\nFrom the documentation:\n\nBy using variables, you can describe the semantics of the property value rather than just using the literal value (improving readability) and also make it easier to perform site-wide changes as you only need to change the value in one place, rather than several.\n\nIf you're defining your colors as ui-color(primary, darker) in more than one place, you're not using a \"semantic\" color like $body-text or $border-shadow. Thus when the time comes to change your scheme (and that time always comes sooner or later, as we all know), you'll be struggling to figure out which occurrences of ui-color(primary, darker) are referring to a border and which are referring to some other aspect of your color scheme.\nUsing semantic variable names makes it trivial to change the scheme: you change the value in one place and that is immediately reflected everywhere as intended. Maps kind of have this property, but I would argue that they are less semantic when compared to plain variables.\nWhat are your thoughts? Does this explain the intent?\n. I see your point, @VincentSmedinga (though to be honest I don't feel strongly either way). \nHappy to accept a pull request allowing VariableForProperty to allow maps. Thanks for your input!\n. Fixed in #563.\n. Happy to accept a pull request, @lpil!\n. Implemented in #585.\n. Fixed in #579.\n. Thanks for the fix, @srawlins!\nExposing source_from_range is a bit unorthodox but given this is isolated to a single class I'm fine with it.\n. Agreed that we should have all linters disabled by default for the 1.0.0 release. \nUntil then, any new linters should be automatically disabled going forward.\n. Yeah, we'll need to count the \\n characters and increment the line number appropriately (or submit a fix upstream). My experience with submitting patches to the sass project tells me it might be easier to fix it on our side.\n. Fixed in 596b96d4672a4efad4503fe02c4f0289cc5860f0.\n. Hey @starryeyez024,\nThe warning in this case is legitimate. In CSS you can use what are called \"shorthand\" forms for certain properties like margin and padding.\nFor example, instead of specifying:\nscss\nmargin: X Y 0 Y;\n...you can just write:\nscss\nmargin: X Y 0;\n...since the second Y is redundant. This is the case in your example above. Hope that helps!\n. Hey @samirchian,\nThis warning is legitimate. image_url can be written as image-url (with a hyphen), since _ and - are treated the same in Sass.\nIf you disagree with the lint warning, you should disable it.\n. Duplicate of #531. \nI've implemented a workaround that avoids linting interpolation in /*...*/ comments since the Sass parser returns incorrect source ranges, and I think for most developers it's not critical that this code be linted.\nIt looks like @srawlins has a pull request in https://github.com/sass/sass/pull/1875 which fixes the upstream issue, but given that might take a while to merge and eventually released in a gem version I'm inclined to go with the workaround I've implemented in 27492d33322f87c3d47420db39cb39cddcc67983 until then.\n. This looks good to me, @cih. Thanks for the PR!\n. Hey @shepmaster, \nWould happily accept a pull request for this feature!\n. Implemented in #573.\n. Hey @shepmaster, thanks for suggesting ways we can improve the tool.\nFortunately, this feature is already supported. See #273.\n. Hmm, I agree this is confusing (we don't make use of this feature at all internally, so that's probably why it's a bit janky).\nFWIW, I was able to get this to work with:\nbash\nscss-lint --require scss_lint_reporter_checkstyle --format Checkstyle --out foo.xml --format Default\nI'm more than happy to accept a pull request that better documents this capability!\n. Hey @josedrac,\nAre you sure all that has changed is your scss-lint version? That error message references ruby_executable_hooks, which is not a file in scss-lint. The No such file or directory looks like a standard missing file Ruby error message, but there's nothing from this report that allows me to deduce what the problem is. \nCan you raise the issue with the upstream editor you are using or provide the stack trace of the Ruby process itself? That would help determine if this is indeed an issue with scss-lint or something else.\n. Closing due to a lack of response, as well as the fact that the information given seems to suggest the problem does not lie with scss-lint.\n. Thanks for the pull request, @srawlins.\nMerged in e2a96cb0ab9547a6d3f3d5e00d88d69d2fd30903.\n. Fixed in #583. Thanks for the report!\n. Thanks! \nMerged in 6eaf4ed454814afe94ddf275de06a293e8551fac.\n. I've thought about this as well, and would be open to accepting a pull request. scss-lint should be relatively straightforward to parallelize.\nI would like the flag name to be called --concurrency/-C and accept a numeric value or auto to indicate scss-lint should just pick a number that \"makes sense\" based on the number of cores available. I haven't done any research on this, but if you find that on average half the number of cores is optimal, let's go with that.\nMy other comment is that you can go further than splitting the linters into groups. If you can create a queue of all linter/file pairs that should be run, you can spawn concurreny number of workers and have them all pull from the same queue, so each \"job\" is passed an instance of a linter and a file to lint. I'm willing to bet the cost of instantiating a linter per job would still be faster than trying to reuse the same linter instance across multiple jobs. In theory this should allow you to maximize parallelism.\nThanks for your thoughts. Look forward to seeing what you come up with!\n. I had a quick poke at trying to parallelize using the parallel gem, which forks into separate processes under the hood, getting past MRI's GIL which limits parallelism via threads (it also saves us from having to make any of the code thread safe since workers are isolated in separate processes).\nThe patch is pretty straightforward:\n``` diff\ndiff --git a/lib/scss_lint/runner.rb b/lib/scss_lint/runner.rb\nindex 16f4b5a..5cde35f 100644\n--- a/lib/scss_lint/runner.rb\n+++ b/lib/scss_lint/runner.rb\n@@ -1,3 +1,5 @@\n+require 'parallel'\n+\n module SCSSLint\n   # Finds and aggregates all lints found by running the registered linters\n   # against a set of SCSS files.\n@@ -15,9 +17,9 @@ module SCSSLint\n     # @param files [Array] list of file object/path hashes\n     def run(files)\n       @files = files\n-      @files.each do |file|\n+      @lints = ::Parallel.map(@files) do |file|\n         find_lints(file)\n-      end\n+      end.flatten\n     end\nprivate\n@@ -26,29 +28,35 @@ module SCSSLint\n     # @option file [String] File object\n     # @option path [String] path to File (determines which Linter config to apply)\n     def find_lints(file)\n-      engine = Engine.new(file)\n-\n-      @linters.each do |linter|\n-        begin\n-          run_linter(linter, engine, file[:path])\n-        rescue => error\n-          raise SCSSLint::Exceptions::LinterError,\n-                \"#{linter.class} raised unexpected error linting file #{file[:path]}: \" \\\n-                \"'#{error.message}'\",\n-                error.backtrace\n+      accumulated_lints = []\n+\n+      begin\n+        engine = Engine.new(file)\n+\n+        @linters.each do |linter|\n+          begin\n+            run_linter(linter, engine, file[:path], accumulated_lints)\n+          rescue => error\n+            raise SCSSLint::Exceptions::LinterError,\n+                  \"#{linter.class} raised unexpected error linting file #{file[:path]}: \" \\\n+                  \"'#{error.message}'\",\n+                  error.backtrace\n+          end\n         end\n+      rescue Sass::SyntaxError => ex\n+        accumulated_lints << Lint.new(nil, ex.sass_filename, Location.new(ex.sass_line),\n+                          \"Syntax Error: #{ex}\", :error)\n+      rescue FileEncodingError => ex\n+        accumulated_lints << Lint.new(nil, file[:path], Location.new, ex.to_s, :error)\n       end\n-    rescue Sass::SyntaxError => ex\n-      @lints << Lint.new(nil, ex.sass_filename, Location.new(ex.sass_line),\n-                         \"Syntax Error: #{ex}\", :error)\n-    rescue FileEncodingError => ex\n-      @lints << Lint.new(nil, file[:path], Location.new, ex.to_s, :error)\n+\n+      accumulated_lints\n     end\n # For stubbing in tests.\n\n\ndef run_linter(linter, engine, file_path)\ndef run_linter(linter, engine, file_path, accumulated_lints)\n       return if @config.excluded_file_for_linter?(file_path, linter)\n@lints += linter.run(engine, @config.linter_options(linter))\naccumulated_lints.concat(linter.run(engine, @config.linter_options(linter)))\n     end\n   end\n end\ndiff --git a/scss_lint.gemspec b/scss_lint.gemspec\nindex aa83e49..634136a 100644\n--- a/scss_lint.gemspec\n+++ b/scss_lint.gemspec\n@@ -25,6 +25,7 @@ Gem::Specification.new do |s|\n\ns.required_ruby_version = '>= 1.9.3'\n\ns.add_dependency 'parallel', '~> 1.6'\n   s.add_dependency 'rainbow', '~> 2.0'\n   s.add_dependency 'sass', '~> 3.4.15'\n```\n\nThis worked surprisingly well for one of our large repositories: execution time dropped from 5 seconds to 2 seconds.\nHowever, running this against another one of our large legacy repositories results in a strange marshal data too short error. I think it has something to do with the number of lints returned by the find_lints method, since if I change that to return an empty array no error occurs. This means we might need to serialize the lints to a file and then deserialize them on the master process in order to work around the issue.\n. Thanks! \nMerged in 41f3750f67135e476a79493de15c3dfe7edc41a5.\n. Hey @steelbrain, thanks for your work on integrating scss-lint with the Atom editor.\nPassing files via STDIN introduces a couple of edge cases, which I'm skeptical saving even thousands of temporary files every few hours is worth addressing. (that's not a lot of writes in my mind)\nFor example, one important question is what file path is the file passed via STDIN treated as having? scss-lint uses the file path in order to apply the correct configuration based on your .scss-lint.yml. I could easily see confusion from users piping a particular file to scss-lint and being surprised that linters they've disabled for that file in their configuration start reporting warnings.\nThis is a problem in general when you lint against a file with a different path than the original file you're linting\u2014you're bound to run into situations where configuration you expect to be applied doesn't apply because of differences in the path.\nI'm open to suggestions, but I think the pragmatic answer here is to stick with linting the file directly.\n. Ah, sorry, I missed your last sentence. That makes sense. Happy to accept a pull request!\n. Implemented in 8ad337a1a9d38f890b56ac355e44aadd36b7aa80. Thanks for the feedback!\n. @lunaryorn 0.43.0 has just been released, but I would probably give it some time to settle given the number of new features going out. There tend to be a lot of bug reports with new features whose behavior isn't fully understood until they're out in the wild.\n. @lunaryorn I anticipate we'll push out a bugfix release by the end of this week.\n. Thanks for digging into and figuring out this performance problem, @srawlins!\nMerged in 1ad110428724d129a8044263771f3551707ecda7.\n. Thanks for your work on this @srawlins.\nI'm not sure how significant these sorts of optimizations are, but none of these changes hurt readability so they seem fine.\nMerged in 954e22fd2f9ab352d07953ec6c62836abd747d6e.\n. Thanks for the fix!\nMerged in a998afcb3ca3c84274da5d1d45863db22ad9022b. \nThis also revealed a bug in how TrailingSemicolon handled trailing comments ending with semicolons, which I fixed in e29cc409979d3025b1f43dde36cd169cdc1250da.\n. Nice find, @srawlins. Thanks again for your efforts on improving the tool's performance.\nMerged in 33cf2bcd615d37d1797ea3fc4dff4a50a0506576.\n. Thanks for the pull request, @lpil, and doubly so for writing thorough tests!\nMerged in 364413d and 91fce0e.\n. Thanks! \nMerged in 98682b9bbee91eb3097ded7d82cce527212c6c02.\n. Merged in dd7466911f82f63f15a41aaf7c94d4fc3de9b880.\n. Hey @ste-m,\nThis bug should be fixed in the latest version of scss-lint (0.41.0 at time of writing). Please upgrade and let us know if you're still seeing the issue.\nDuplicate of #541.\n. Thanks for the pull request, @ivantsepp!\nMerged in f25e03978be633e329891db3e518d2627e4ac336.\nI would say that examples like font: $large arial, sans-serif; are a violation of what VariableForProperty is trying to enforce. If you'd be interested in submitting a PR addressing that case, we'd be happy to merge it!\n. Hey @webfeature,\nAs long as the .scss-lint.yml exists in the directory that you are running scss-lint from, scss-lint merges that configuration with the default.yml configuration by design. This is to encourage adoption of new features as they are released.\nWe'll be changing the default configuration to disable all linters by default in the 1.0.0 release (see #564).\n. Hey @ifyoumakeit, this request makes sense to me. It's a quirky behavior of Sass that ultimately makes sense but is initially confusing. Thanks for the suggestion\u2014happy to merge a pull request with the implementation.\n. Hey @SpenceDiNicolantonio,\nscss-lint does not create temporary files as part of a lint run. Notice that in the issue you reference the files have the substring scsslint in their name\u2014if you grep the scss-lint codebase for scsslint, you will not find it anywhere.\nThus a downstream tool is creating the temporary file, not scss-lint. Hope this helps.\n. Hey @juanfran,\nGlob patterns are expanded by the shell, which according to the Child Process documentation defaults to /bin/sh on UNIX systems. Depending on the distribution you're running, this could be bash, dash, or some other shell\u2014in your case it's one which doesn't seem to support glob expansion.\nRemember that files can technically have asterisks (*) in their name, so scss-lint can't perform this expansion for you. Please figure out on your side which shell you should be using to get this to work, or get the list of files ahead of time and pass the full list as arguments.\nHope that helps.\n. I can't think of a situation where you need a string to pass a hex color value, but it's perfectly valid to do so, and I could see some developers doing so so their syntax highlighter handles the color correctly.\nThe situation you describe above, however, is definitely something we should fix. In that case we can easily tell a color was not intended because there are no spaces on either side of the matched hex value.\n. Fixed in #610.\n. In the case of operators, I would consider a newline to be allowed by the one_space/no_space styles, since there are situations where both sides of the operator cannot fit on a single line.\nPerhaps the answer here is to allow newlines for these styles.\n. While I've never seen a codebase use the pre-operator newline style, e.g.\nruby\none\n  + two\n  + three\n...I suppose if that's preferred by your team, then there's no reason not to allow it. So allowing it on either side seems reasonable to me.\n. 0.42.0 has been released.\n. Hey @mlarcher,\nI don't develop on Windows, but it appears that you are passing a glob pattern (i.e. **/*.scss) to scss-lint via the command line and it is receiving those literal strings. This tells me you aren't using a shell to expand those patterns ahead of time.\nIn case you aren't familiar, any glob pattern is expanded by your shell (e.g. typically bash/zsh if you're on some *nix distribution; for Windows it's cmd.exe). Since cmd.exe does not support wildcard expansion, this explains why the literal string is being passed along.\nscss-lint doesn't expand these patterns for you because asterisks are valid characters in file names. Thus whatever is invoking scss-lint needs to expand the pattern and pass the list of files to scss-lint.\nHope that helps.\n. As long as all you're trying to do is lint files in a directory, you can just pass the directory. scss-lint will recursively scan for any files ending with .scss and lint them.\nbash\nscss-lint /path/to/project/dir\n. Fixed by #605. Thanks for the report!\n. Hey @nnorton,\nscss-lint will output a stack trace if it fails unexpectedly due to a bug, but in general the contract for the default output format is to output a single line for each warning/error encountered. If there are no lints found, the default is to output nothing.\nIf you are trying to integrate scss-lint into some kind of build process, the documentation on exit status codes will probably be useful.\n. Nice :+1: \n. Awesome, looks good :+1: \n. Thanks @srawlins!\n. Thanks for the report, @AESM!\nLooks like this was fixed by @srawlins in 8859b8a. Thanks @srawlins!\n. Hey @peacefulrespite, thanks for your question.\nThese warnings are expected behavior that was introduced in #569. See #488 for the full discussion.\n. Just circling back to say I misread this issue. This is certainly a bug, as you should be able to use color functions in color variable declarations.\nFixed in #612.\n. Merged in 0a9f0245294eb94c00a4d963c871d06b32b9be0f. Thanks!\n. Duplicate of #609. Fixed in #612.\n. Thanks for the fix, @cih!\n. Thanks for the bug report, @di5abled!\nFixed in fdd5caebda9a5dae29b10a438ebd7eacb123efd7.\n. Thanks for the report, @saneef.\nAs @srawlins points out this is actually quite difficult to do since the Sass parser doesn't give us any information about where the closing brace is located. I've thought about this long ago and came to the conclusion that any workarounds would be brittle and still have edge cases, but I'm open to a pull request that attempts to solve this problem.\nOne approach would be to find the \"next node\" (i.e. following sibling or an ancestor's sibling), and backtracking from that node until we find a curly brace. I'm sure there are edge cases where that won't work perfectly, however\u2014since we also need to detect whether a node contains curly braces, which is a feat in and of itself (remember that PropNodes can optionally contain curlies for nested properties).\nOpen to other proposals that solve this issue!\n. Implemented in 35159073027f6c0c503c8776de5041fffdcf6dbc.\n. Hey @ArmorDarks,\nscss-lint can't check the selector name if it contains interpolation because it can't know what the resulting output of the interpolation would be without additional processing. Sure there are some special cases, but the vast majority require explicit evaluation, and thus are not achievable through static analysis.\n. Unless I'm misunderstanding the report, this appears to be the same issue as reported as #618. Since that issue is more general I'm going to mark this as duplicate of that one.\nIf you think they are distinct issues, feel free to reopen. Thanks!\n. @srawlins @ArmorDarks Interestingly enough, we have a spec that explicitly considers this case an offense: https://github.com/brigade/scss-lint/blob/v0.42.2/spec/scss_lint/linter/indentation_spec.rb#L327-L334\nHowever, I couldn't tell you why it's considered an offense. :)\nI'm open to adding more nodes to the whitelisted set.\n. Nevermind, changing this to allow any node that is a direct child of the document root to have arbitrary indent makes sense here.\nThanks doing the investigation, @srawlins. I've implemented a fix in 67c5fe5b224489dd7a8df6ccbc4400e0deafc285.\n. Closing due to lack of response. Feel free to reopen with a reproducible test case (ideally a repository that can be cloned and tested against). Thanks!\n. Duplicate of #516.\nFWIW, vim doesn't change the working directory based on the file you are editing\u2014it uses the directory you were in when you first opened vim (unless you or some plugin you use changed it). I use scss-lint with Syntastic and I've never experienced this problem, but I'm always working from the root directory of the repository, which is where my .scss-lint.yml is located.\n. Ah, TIL about autochdir. Thanks for sharing!\n. Merged in 1652bfea532cdeba3f5a91b5a71dd994916c6676. Thanks!\n. Merged in 9ecc9aee3ee23119ef8ce4c12af707ffd02e0c30 with some amendments in d117ef4e1907a592e889f37f2176ed1da9780ab4 to fix RuboCop warnings.\nThanks!\n. Merged in 8af3c89. Thanks!\n. Thanks for the report, @pfac. \nI believe the issue is that guard-rake is invoking the scss_lint rake task with a list of files always explicitly passed. So if no files are passed perhaps you're getting an empty array since you invoke the rake task as scss_lint[] or similar. \nI don't use guard-rake, but perhaps this is something that can be fixed upstream, or in your configuration that invokes the scss_lint rake task in the first place.\n. Closing due to lack of response.\n. Which version of SCSS-Lint are you using @stowball? I believe this was fixed in 0.40.0. \nDuplicate of #528.\n. @stowball scss-lint was renamed to scss_lint in 0.38.0 to match Rubygems naming conventions. It's documented in the release notes. https://github.com/brigade/scss-lint/releases/tag/v0.38.0\nAlso note the message that displays when you install it warns you that it has been renamed.\n. Given the question as originally asked as been answered, I'm closing this issue.\nHappy to accept a pull request that adds a benchmark measurement script of some kind, but agree that it's preferable to not include its dependencies in the gemspec. Thanks!\n. Thanks for the pull request, @dspautz.\nIt seems like the purpose of this change is to report blacklisted properties separately. Right now a blacklisted property will report \"Unknown property ...\". That doesn't seem correct. Instead, we should report a different message in the case the property is blacklisted, e.g. \"Property 'property' is prohibited.\"\nCan we also add documentation to the linters README for this new config option?\n. Thanks for address those comments, @dspautz.\nMerged in f165d94.\n. Thanks for pointing out that spec, @sonalkr132.\nYes, it is allowed to separate the reason with a blank line.\n. Hey @nim23,\nWhat's the ASCII code of that character from the original file you're trying to lint? When I copy/paste that code as written in GitHub, I can't reproduce this issue.\nMy hunch is that the character is not a dash but an en dash or em dash, which is why you are seeing the error.\n. Duplicate of #655 (using that one as canonical as it has a more descriptive title).\n. @lencioni whoops, merged your commit before seeing your comment.\n. Sounds reasonable to me!\n. Hey @sblask,\nTo properly exclude all items under a directory, you need to use the ** pattern, e.g.\nyaml\nexclude:\n  - 'dist/**'\n  - 'node_modules/**'\nRegarding the behavior of scss_files: how are you invoking scss-lint? If you specify a file, then the scss_files option is ignored and that file is used instead. Thus running scss-lint . will ignore the scss_files option, which could explain why your dist and node_modules directories are getting linted.\n. Hey @sblask,\nThe reason the previous pattern didn't work (now that you mention it) is because (a|c) is not the way to do alternation with file glob patterns (though that is the way to do it with regexes). Thus if you had written {a,c} you would have had a working pattern.\nHaving said that, scss-lint doesn't support Sass syntax anyway, so you wouldn't want to be linting your .sass files.\n. Hey @callumlocke,\nYou can already disable a single line by using a trailing comment.\n@import 'normalize-scss/_normalize.scss'; // scss-lint:disable ImportPath\n. Thanks! Merged in a7d757a520547919ad1a5d1ac04288b0425051fa.\n. Thanks for the pull request, @lencioni.\nYes, we'll need to rewrite the reporters to use the Logger class, as all output should be delegated to it.\n. Thanks so much for implementing this, @lencioni!\n. You can add composes to the list of extra_properties configuration for the PropertySpelling linter.\n. Hey @adsteel, thanks for suggesting ways we can improve the tool.\nI'll answer each of your points separately\n\n\nAn error count if there are errors\n\n\nError count is easily obtainable by counting the lines of output with the default formatter, e.g. scss-lint ... | wc -l.\n\n\nA success message of there are no errors\n\n\nThis default behavior is the standard for most tools. If there is nothing interesting to report, scss-lint should say nothing interesting.\n\n\nAn error raise if there are errors, to trigger a failed build on CI tools like CircleCI or TravisCI\n\n\nThe tool already returns a non-zero exit status if errors are reported (see the exit codes documentation), and thus will trigger failed builds in CI.\nThis default behavior is valuable for integration with other tools. I am completely open to accepting a pull request adding a new formatter that adds the additional information you request, but I don't see it as a common use case for the tool, especially if you're using it the way it was intended, for example via Overcommit git hooks or in CI where all you care about is pass/fail status.\nThanks!\n. Ok, I'm fine to leave this open. Thanks for providing examples of other tools which default to this behavior.\nRegarding:\n\nI also had to explicitly program the exit code in my script, otherwise the build passed on CircleCI, so whatever is happening inside scss-lint isn't bubbling up and actually triggering a failed build.\n\nThere must be a problem with your build script. For example, with bash you need to specify the -e flag to make the script fail after the first command returns a non-zero exit status. scss-lint definitely returns non-zero when it fails as of version 0.43.2 (I've just confirmed), so if you're seeing otherwise please provide a reproducible case in a separate issue. You can check the exit status by running echo $?.\n. Thanks for the reminder, @adsteel. I had looked at this initially and was promptly distracted.\nMy concern with this is that this breaks SCSS-Lint's integration with Overcommit, since Overcommit uses SCSS-Lint's default formatter.\nHowever, I agree this change in default output is valuable, so we might as well bite the bullet. I just need to find some time to dig in and create a new formatter which behaves like the existing default formatter, and then update Overcommit to use that instead (or, alternatively, switch Overcommit to use SCSS-Lint's JSON formatter). Regardless, it will cause people using Overcommit/SCSS-Lint to have to upgrade due to the breakage.\nThanks for your patience. This will get merged eventually.\n. Hey @Vall3y,\nUnless I'm misunderstanding the question, as @chris-dura mentioned merging those selectors does indeed result in equivalent CSS. Feel free to reopen if you can provide a specific reproducible example to the contrary. \n. Hey @giacomozinetti, thanks for reporting this issue.\nAs you surmised, the problem here is string interpolation. scss-lint can't know in all cases what final result of the interpolation will be. While the case you have here seems simple and easy to detect, I can assure you that the representation returned by the Sass parser makes it impractical to handle this case gracefully.\n. Thanks!\nMerged in f555d9d5b54f0afd018f8b14bc9fb5b48efa8b5f.\n. Fixed in #665. Thanks!\n. Thanks for the report, @vonkanehoffen!\nFixed in f8a92f9c3788d976c8cba79bacc92f48179aeb46.\n. Thanks!\nMerged in bb92fdd2d8fa46eb9bb2ec4a1655888a689ce355.\n. Thanks! \nMerged in 2b6063a8e3cbe2fa9a0f4788b7ae2687a64f3550.\n. Thanks @lencioni!\nTravis has been really slow to fix this issue. I've modified your PR to use the explicit \"2.3.0\" for now since it's better than nothing.\nMerged in 47d3dfcb21f30509e6660ef6ba8acaa430089ff0.\n. Had to follow up with bb69ac673903ca1de4a3c2b679cd4deea05c8f16 in order to get the build working.\n. Thanks!\nMerged in 5f813e8c23a9c7c4c84341773b2c09400e7d96ce.\n. Syntastic added support for reading the JSON output of scss-lint in https://github.com/scrooloose/syntastic/commit/2db6f539d081baac7570186a96e7d9621893156c, so this is no longer a problem.\n. Thanks for the pull request, @lencioni.\nMy issue with this is that it is modifying the default reporter, which will require a couple of downstream tools to also be updated as well (Overcommit being one of them).\nIt looks like Syntastic has gone ahead and added support for reading JSON output from scss-lint anyway, so we can avoid breaking existing uses of the default reporter for now.\n. Merged in be66a65. Thanks!\n. Thanks!\nMerged in 402463cd4ac59148eb016720a596627f96557bbb.\n. Should be out by end-of-week.\n. Implemented in f6061d1d18210216e6ec438372d871f6efc0ed99. Thanks for the suggestion!\n. Thanks for the reports, @ndonohoe-bjss / @michaelhogg.\nFixed in 4ea7ed1baca52abc64085b39a063d40e6d604571.\n. Hey @stephanfriedrich,\nYou need to exclude your node_modules directory. By default scss-lint will lint every .scss file under the current directory, recursively searching subdirectories. \nYou can do this by adding the following to your .scss-lint.yml:\nyaml\nexclude:\n  - 'node_modules/**'\nHope that helps!\n. Thanks!\nMerged in a0465589d15ac35ec54d340e40642e898cd50d40.\n. Duplicate of #445.\n. Hey @ivancuric,\nRunning the following code against scss-lint with the default configuration:\n``` scss\n.installment-accordion-row {\n  display: none;\n  &.is-visible {\n    display: table-row;\n  }\n}\n.installment-accordion-toggle {\n  color: $b1;\n}\n```\n...I get the following correct output:\ntest.scss:3 [W] EmptyLineBetweenBlocks: Rule declaration should be preceded by an empty line\nThus nothing seems wrong here. The \"confusion\" you're referring to must be a quirk of the editor you're using (or the scss-lint plugin for that editor, neither of which this project maintains). \n. Cool, let us know if new information presents itself.\n. Thanks for reporting your findings, @ivancuric. It will help others if they run into this issue as well.\n. Hey @smnbbrv,\nMake sure you install the scss_lint gem (with an underscore) and not the scss-lint gem. It was renamed in 0.38.0 to follow proper Rubygems naming conventions.\ngem install scss_lint\n. Thought about this before a long time ago (it came up for the very same reason you're describing here) and decided against it. From a testing perspective I think we benefit by ensuring linters stay independent of each other.\nI justified this from a usability perspective by saying that we're not the only tool that does this (there are cases where fixing one RuboCop warning will result in a different warning being reported, or when rubocop --auto-correct needs to be run multiple times to converge), and I think this is OK (the amount of extra time it takes you isn't significant).\nIf linters defined their configuration options as some sort of public interface (something I've thought about doing for the purposes of auto-generating linter documentation from YARD comments, rather than the current system of maintaining documentation separately), then I think we'd have a stronger case for doing this, since if one linter changed the name of a configuration option the tests for another would fail as well, whereas right now all we have is a stub configuration in tests. As things currently stand, I'm not aware of enough situations like the one you describe to justify introducing coupling between linters.\nDefinitely open to your thoughts on this.\n. I think you could create some sort of function whitelist, but then specifying the level of granularity for things like argument order is another matter.\nSo in your case, you want to allow rgba(x, x, x, 1.0), so specifically the 4th argument of the rgba function. But you don't want rgba(x, x, x, some-func(y, z, 1.0)) to be allowed.\nI guess I find the desire to enforce 1.0 in this case a bit silly personally, but I can understand where you're coming from here (emphasizing it's a float for consistency reasons). If you can come up with a configuration system for this concept, go for it.\n. This is definitely one of my biggest gripes with Jekyll. It changes the format of the file without changing the extension, but that's not going to change anytime soon, sadly.\nThe haml-lint project supports a skip_frontmatter option to work around this exact issue, but it bugs me that it's so specific to Jekyll. In a perfect world we would have a flag allowing you to specify a program you can preprocess a source file with before scss-lint lints it. This way you can just have sed s/<some-regex>// quickly cut out the frontmatter. \nIf we're going to go down this route, I would prefer the more generic solution. We could call the option preprocess_command and have it take an array of arguments. Its input would be provided on STDIN and output should be sent to STDOUT. It would then be trivial for scss-lint to call it (I'm not worried about batching together files for performance in this case since it is already an exceptional situation).\nHappy to accept a pull request along those lines.\n. One thing quickly worth mentioning is that stripping content will potentially offset line numbers for the document unless you are careful. In the case of Jekyll frontmatter, you need to replace each line with a blank line so line numbers don't shift. However, this in turn could trigger other lints (for example if we had a linter that checked for unnecessary leading whitespace).\n. Implemented in #736.\n. Thanks for the fix, @ThomasR, and for taking the time to improve the set of tests for this linter.\nMerged in 20523e4.\n. Merged in 20523e4.\n. Fixed in 68918c03d80c1d9b40e7c7fd36e7c4dc5ed5205d. \n. I'm happy to have FileFinder#find return its files in a well-defined order.\nFixed in fe04ca9.\n. Hey @mturnwall,\nWe currently have an open issue (#494) for adding support for configurable orders to the DeclarationOrder linter. Would love a pull request!\n. Having a closer look at this I'm afraid this can't be merged as-is.\nThis results in this output being displayed for all formatters, not just the default formatter. Thus it will break other formatters such as the JSON formatter since you're appending non-JSON to the end of the output.\nYou'll need to do some refactoring to have this happen in the DefaultFormatter class. I'm definitely in support of making SCSS-Lint's default output better, but we can't be breaking other output formats in the process. It needs to be isolated to the DefaultFormatter.\n. Hey @adsteel,\nNo, this does not work. If I run scss-lint --format JSON, I get output like the following:\n..................................................{\n  \"test.scss\": [\n    {\n      \"line\": 1,\n      \"column\": 2,\n      \"length\": 140,\n      \"severity\": \"warning\",\n      \"reason\": \"Variable names should be followed immediately by a colon\",\n      \"linter\": \"SpaceAfterVariableName\" \n    }\n  ]\n}\n...which will obviously break any tools that rely on this format (Overcommit being one of them).\nThis needs to support writing output to a separate stream (STDERR) so that the output format isn't broken.\n. One potential source: https://libraries.io/rubygems/scss_lint/dependent-repositories\n. Certainly open to adding support, just curious where this is coming from (considering we haven't gotten this request before). Was there any particular tool that would benefit from this?\n. Hey @chris-dura,\nCurly braces must be escaped in valid URIs, so you are technically violating the linter in this case.\nIs there anything wrong with just replacing the string CACHE-VERSION (without braces)?\n. Thanks for the fix! I still consider myself pretty ignorant when it comes to encoding issues, so I'm not sure where this may introduce problems (if any). Happy to give it a shot!\nRegarding the test failures, the Ruby 2.1 seems like a spurious Travis issue, but the JRuby one may be related?\n. I've looked into this deeper, and I don't think this has anything to do with Sass or SCSS-Lint. The problem is in how Ruby parses literal carriage returns in Ruby source code.\nFor example, if you execute the following on JRuby:\nruby\nputs '^M{'\n...you'll get:\n{{\n...but if you execute it on MRI, you'll get:\ntest.rb:1: warning: encountered \\r in middle of line, treated as a mere space\n{\nI can't find a clear explanation of the rationale for this, but clearly the Ruby interpreter does not want to support literal carriage returns in source code.\nThe solution is to use the \\r\\n escape sequence in tests, which I prefer anyway. I've gone ahead and fixed that in 7c4c34491c74ce8b9736e1d4edfd66c19f54b430.\n. I did not. Looks like \\r\\n doesn't reproduce, but \\r does. I've updated the tests in c116766f30f6c1dc67402244d402fbeb7ade1eeb.\n. Thanks!\nMerged in f0bcc8ceb2debbbd8b94d69ef3ed843456761d96.\n. Hey @rammi987,\nSince font-range is not a standardized CSS property (it's provided by the postcss-responsive-type plugin), it doesn't make sense for SCSS-Lint to include it by default.\nYou can whitelist custom properties by adding them to the extra_properties option of the PropertySpelling linter, e.g.\nyaml\nlinters:\n  PropertySpelling:\n    extra_properties:\n      - font-range\nHope that helps.\n. Hey @dawidk92, thanks for the report.\nSee https://github.com/brigade/scss-lint/issues/339#issuecomment-72404341 for an explanation of why SCSS-Lint can't handle this in the general case. Thanks!\n. I'm not sure how many will actually discover such documentation, but I suppose it doesn't hurt.\nAdded in 7f2fa6920669e1a1fc4fcabdd00d9e5dd42b66d9.\n. Ah, I see the confusion now. Thanks for taking the time to clarify the documentation!\nMerged in 69329d967609cafc93dfcc5813f4495c70507a1c.\n. :+1: \n. Thanks for the pull request, @cih! Appreciate you taking the time to write thorough tests and documentation. :tada: \n. Hey @jesperronn,\nThis looks like you have an invalid .scss-lint.yml configuration file (it has the contents dummy instead of the expected format).\n. :+1: \n. Definitely open to a pull request! \nignore_consecutive seems like a clear option name to me.\n. I'm initially opposed to this because of the complexity involved and my belief that you can't do this properly in the general case. \nThe moment you allow linters to be configured on a line-by-line basis, you need to run each potential configuration of the linter against the file (i.e. each line which sets a custom configuration requires a separate run), since it may be nonsensical for a linter to \"switch configuration\" in the middle of the lint run. You can imagine a linter which scans the entire file in order to decide whether a lint is reported: it makes no sense to allow its configuration to be changed mid-run.\nNo doubt there are many linters where this concept would work fine. My concern is that this doesn't work in the general case, so I'm hesitant to introduce it as that could be a source of confusion/difficulty.\nI do think there is room for better support of different configurations based on the directory of the file being linted. We've avoided this in scss-lint because of the implementation complexity and my (highly opinionated) belief that this was also a bad idea for any development project. The reason being that it requires significant cognitive overhead to remember all the different configurations for different directories in a project. I feel that the most you should be able to customize on a directory-by-directory basis is whether or not a linter is enabled, which is supported by the single configuration file model SCSS-Lint currently supports. (and let me be clear: I totally understand there could be valid reasons to want different configurations, I just haven't been presented with a strong-enough case)\nHave you seen this feature (specifically line-by-line configuration changes) in other projects? How does it behave for those projects? Do you think such a feature has wide potential for adoption, or is it more of a \"power-user\" feature that benefits a minority of use cases?\n. Interesting. So does ESLint actually let you change the configuration part way through the file? Or do these comments only work at the top of the file?\nMy lack of familiarity with the kind of problems ESLint reports makes it difficult for me to see how they would implement this. If all their checks were simple syntax-related checks, this would make sense\u2013but changing the configuration of a linter that needs to scan the entire file during the course of the lint run? That seems riddled with problems, unless it's a \"use at your own risk\" kind of situation.\nTo provide a concrete example of what I'm talking about, consider the PrivateNamingConvention linter that was just added. This linter needs to scan the entire file in order to find all declarations and uses. Changing the prefix option with a comment in the middle of the file introduces problems here, because the linter has already processed much of the file using the original prefix, but now we're changing the prefix, meaning we might miss some uses/declarations for the old prefix.\nIf ESLint's answer to this is to only let you specify this custom configuration comment at the top of the file, then I'm more open to this idea. Reading their documentation doesn't suggest that's the case, however.\n. Nice! This also seems to address #646. :+1: \n. Interesting. What version of Ruby are you running locally? I can't reproduce the failure myself (and Travis isn't complaining), so I'm really curious why this is necessary for you locally. \nI'm not strongly against merging this, but non-reproducible failures are usually indicative of some other problem.\n. I'm still not able to reproduce using Ruby 2.3.0 on a Mac, even after installing travis (which is already installed from the Gemfile, but I tried installing the latest version anyway):\n```\n\u2a20 ruby -v\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin14]\n\u2a20 gem install travis\nFetching: travis-1.8.2.gem (100%)\nSuccessfully installed travis-1.8.2\n1 gem installed\n\u2a20 bundle exec rspec\nnFinished in 4.65 seconds (files took 0.77626 seconds to load)\n1566 examples, 0 failures\n``\n. I can indeed reproduce once I run withoutbundle exec`.\nI'm not sure we want to support running the tests outside a Bundler context. When you do that you throw away any guarantee of which dependencies you load, so you might get spurious failures which you spend way too much time debugging that would not actually affect anyone.\nIf you'd like to support running rspec without bundle exec, you can instantiate the Bundler context manually at the top of the spec/spec_helper.rb file:\n``` ruby\nspec/spec_helper.rb\nrequire 'bundler/setup'\n```\nThis should ensure appropriate gem versions are in your $LOAD_PATH. I tend to avoid this because it is \"magic\", but I'm open to it here since it's harmless if you still use bundle exec ... to run it.\n. Thanks for initially spearheading this push for 1.0.0, @lencioni.\nI'm closing this as the appropriate issues are now marked with this milestone (and we now have a logo thanks to you!)\n. Happy to accept a pull request with a fix. We don't use the Rake integration at @brigade so it would be appreciated to get some outside help on this. Thanks!\n. Sorry for the long delay in response, @svyatov.\nI've gone ahead and changed the implementation to respect the scss_files option if no files are explicitly defined when initializing the Rake task.\nThus the task will now respect file preference in the following order (first one to specify file paths/patterns wins):\n1. Files specified directly on the command line (e.g. via rake scss_lint[file1 file2])\n2. Files specified in Rake task initialization (e.g. SCSSLint::RakeTask.new { |t| t.files = [...] })\n3. Files specified in the global scss_files configuration option in .scss-lint.yml\nHope that helps!\n. Hey @tagliala,\nSorry this still doesn't seem to be working for you. Would really appreciate a pull request at this point, as I don't have the bandwidth to look into this myself. \nThanks!. Nice, thanks for the sweet tests! :+1: \n. :+1: \n. Merged in 9d4598f.\n. Thanks for writing thorough documentation and tests, @srawlins!\nMerged in f3d0f947fca27ffebffdd9aca797d16cafe96693. Happy to have a generalized solution for this problem. I'm not too worried about the options for the time being, though I appreciate your pointing it out.\n. Hey @s10wen,\nI can't reproduce your issue. When I paste the above code and run it against the latest version of scss-lint (0.47.0 at time of writing), it correctly reports:\ntest.scss:1 [W] SpaceAfterVariableName: Variable names should be followed immediately by a colon\nAre you running the latest version of SCSS-Lint?\n. Which version of scss-lint are you running, @zap-mueda?\nPlease ensure you're installing scss_lint (with an underscore) and not scss-lint.\n. I can't reproduce your problem, @zap-mueda. I created the following directory structure:\n.\n\u2514\u2500\u2500 .scss-lint.yml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 scss\n        \u251c\u2500\u2500 error.scss\n        \u2514\u2500\u2500 file\n            \u2514\u2500\u2500 excluded.scss\nUsing the configuration you specified above, it correctly reports lints in error.scss but not in excluded.scss.\nMake sure you are placing your .scss-lint.yml file in the correct location. Hope this helps.\n. Hey @vhaarr,\nlinter-sass-lint does not use SCSS-Lint, as mentioned in its documentation.\nPlease file your issue with the sass-lint project.\n. Unless I'm missing something, CSS Comb operates on CSS, not SCSS.\nThe two languages have significant differences. An SCSS parser can parse CSS, but not vice versa.\nA quick look at their documentation doesn't mention anything about SCSS. Thus I don't think it makes any sense for SCSS-Lint to support generating a config for this tool. \nAgain, let me know if I'm missing something.\n. Ah, thanks for clarifying, @connorshea. You would think that would be mentioned in their docs somewhere!\nI've no doubt that some would find such a tool useful, but I have reservations about including it directly in the SCSS-Lint project.\nTo me, this makes more sense as a separate tool. You have two projects whose available configuration options are changing over time\u2013it's not great for either project (referring to SCSS-Lint/CSSComb) to have to \"watch\" the other project for changes. It's good to be wary of integrating with other tools, as it's hard to anticipate or catch regressions, since you have two different entities managing each project. \nA separate project by someone who uses both tools extensively (and thus understands their configurations well) would be ideal.\nIf someone wanted to tackle the task of figuring out a (sensible, which may or may not be entirely possible) mapping of SCSS configuration to CSSComb configuration and ensure that mapping stays up-to-date, I'd be happy to link to the tool in our documentation.\nThank you for suggesting ways we can improve SCSS-Lint! I'm going to close this, but I'm open to hearing other thoughts.\n. The error could only be caused by your environment not having a HOME variable defined.\nYou can verify this by trying:\n\u2a20 ruby -e \"puts Dir.home\"\n/Users/shane\n\u2a20 env -i ruby -e \"puts Dir.home\"\n-e:1:in `home': couldn't find HOME environment -- expanding `~' (ArgumentError)\n    from -e:1:in `<main>'\nThere's not much else I believe I can offer here\u2013you'll need to dig into your CI environment to figure out what's going on.\n. The linter is working as expected here. NestingDepth doesn't refer to selector depth (that's what the SelectorDepth linter is for), it refers to the literal syntactic nesting you can do with Sass. In your case, your &:hover is at depth 4.\nThe rationale here is that the more nested your code is the harder it is to understand. Your example is a simple one, but it's quite easy to find examples where you are deep in a nested block and have to scroll-up to figure out what the parent reference & is actually referring to.\nIf you don't like the warnings in this case, disable it for the file in question, or disable the linter entirely.\nHope that helps.\n. Chained classes are reported by the ChainedClasses linter. Perhaps it could be enhanced to support a configurable maximum number of chained classes before reporting an error.\nIf that's something you'd like, feel free to open another issue/pull request!\n. Ah, I just looked at the implementation and realized it doesn't actually handle the case you describe.\nI'm not sure what to offer here. Disabling NestingDepth necessarily has its limitations. It's very difficult to resolve & selectors in the general case, especially when dealing with comma sequences. I'm definitely open to a well-tested pull request that solves this, however!\n. Fixed by #762.\n. SCSS-Lint loads the .scss-lint.yml file from the current working directory, so you shouldn't need to specify a configuration explicitly.\nIf the issue is that you are editing a file and your current working directory does not have the .scss-lint.yml file, #516 is tracking adding support for ascending parent directories until an .scss-lint.yml file is found.\n. As @abea mentioned, & + .bar and + .bar are equivalent, so the former is reported as a lint.\nThe same does not apply to selectors with two or more parent references, which is what the test in question is asserting.\nHope that helps!\n. Using globs with the -e flag isn't supported, simply because this is not how shell expansion works.\nTypically, your shell (bash/zsh, etc.) will take glob patterns and expand them before executing the command.\nThe result is that if you have a glob that matches nothing, you'll end up with an empty string being interpolated into the command.\nscss-lint -e no-matches/*.scss => scss-lint -e\nscss-lint -e matches/*.scss => scss-lint -e matches/one.scss matches/two.scss\nNotice that in the second case, only the first file is excluded. The second file is then interpreted as the file that scss-lint should lint (so ironically the exclusion is useless in this case).\nThus you shouldn't use globs for the --exclude flag. Hope this explains why!\n. Released in 0.48.0\n. Implemented in #764.\n. Thanks!\nMerged in 5cb125bc60cba34c8cad409f6061a0e869a50799\n. Thanks for the fix!\nMerged in 9fb936a.\n. Sorry for the delay in response, @srawlins.\nI'm not really sure where it would make sense to document this, but I'd certainly be happy to merge a pull request that speeds up our JRuby tests!\nPerhaps a small blurb in the Usage section of the README would suffice?\n. I agree that the RuboCop offenses formatter is a bit easier to consume in this case, though the additional information about the number of files affected might help give a high-level overview of the scope of the problem (quickly indicating if the problem is prolific or isolated to a single file, for example). I don't have a strong sense of how this information is intended to be consumed. If it's purely for human consumption, let's keep it easy to read. For example:\n25   Indentation             (across 4 files)\n9    PseudoElement           (across 1 file)\n4    EmptyRule               (across 2 files)\n...\n-- \n50   Total\nI do have a concern with calling this a StatsReporter however. To me, such a reporter would also include other information such as processing time for each linter, percentage of lint-free files\u2013you get the idea. Maybe calling it LintCountsReporter would provide a better description of what it does.\n. Thanks @srawlins!\nMerged in a7ddae5.\n. Thanks for taking the time to put together some of your ideas, @srawlins.\nI agree it's not ideal from a performance perspective that we're visiting the same nodes over and over again. I also agree it's not great to have very similar implementations and essentially duplicate tests for multiple linters. \nFor the performance perspective, I think #576 would \"cover up\" most of these concerns. However that doesn't address all the almost-duplicated code and tests as well as the frustration you mention developers would have with enabling all the linters they want.\nRegarding the format of the configuration: if you key it based on a rule \"name\" you can override configuration much more easily (modifying default rules or adding your own\u2013removing would require a separate enabled option):\nlinters:\n  PropertyValue:\n    enabled: true\n    rules:\n      border-none:\n        property_pattern: \"border(-top|-right|-bottom|-left)?\"\n        banned_pattern: none\n      font-weight:\n        property_pattern: font-weight\n        allowed_pattern: \"[1-8]00\"\n      ...\nOne thing to keep in mind is that moving this entire set of checks into a single linter limits your ability to change which directories are included/excluded on a per-check basis, since include/exclude apply to the entire linter. I'm ok with this, but there are always developers who want that fine-grained level of control.\nRegarding your idea to provide an abstract hook implementation: I also would be open to this. We'll have to figure out how we exclude these from being run (i.e. explicitly marking them as abstract in some way\u2013maybe storing in a special directory), and how we document them so they are easily discoverable. In general, making it easier for developers to write their own hooks sounds like a good thing.\n. Hey @monoblaine, sorry for the delay in response.\nYou can achieve what you desire by writing a custom linter that inherits from SelectorFormat. \nruby\nclass MyCustomSelectorFormat < SCSSLint::Linter::SelectorFormat; end\nYou can then configure this linter to apply to a different set of files, using a different convention.\nyaml\nlinters:\n  MyCustomSelectorFormat:\n    include: custom/set/of/files/**/*.css\n    convention: hyphenated_lowercase\nHope that helps.\n. Nice. 4 min 13 sec versus 2 min 47 sec with the patch. \nThanks again @srawlins!\n. Hey @mprins, thanks for the pull request.\nI'm not a JRuby user, so I'll need your help diagnosing this issue. Is this something that can be reported upstream?\n. Closing due to lack of activity, but would love to merge support. Feel free to reopen once the upstream issue is fixed. Thanks!\n. Sorry for the delay in response, @codedbypaul. \nThere is a test that explicitly considers the case you point out as incorrect: https://github.com/brigade/scss-lint/blob/v0.48.0/spec/scss_lint/linter/selector_format_spec.rb#L520-L524\nIt was added in: https://github.com/brigade/scss-lint/blob/835672fed1935b6d2137668aeacf3a5ad1d7efea/spec/scss_lint/linter/selector_format_spec.rb#L584 by @mrpavlikov.\nWe don't use BEM at @brigade, so it would be helpful to have someone from the community explain the behavior here, but I'm going to close this as not a bug.\n. After looking into this, this turns out to be a bug in the Sass parser.\nIf you include a non-standard space character on a line of Sass code as you have above, that entire line is parsed as a Sass::Script::Tree::ListLiteral instead of a Sass::Tree::VariableNode. This makes it impractical for SCSS-Lint to detect that we're in a variable declaration.\nPlease open this bug on the Sass project. Thanks!\n. Thanks for the clarification, @srawlins. \nI've bumped the minimum version in 786033e4f6504098d205c27d2e9268d3a0db13a3.\n. Thanks for the pull request, @abea.\nIt might make more sense to query the list of Sass functions directly, e.g.\n``` ruby\n\nputs Sass::Script::Functions.instance_variable_get(:@signatures).keys.grep(//).map { |name| name.to_s.tr('', '-') }.sort\nadjust-color\nadjust-hue\n...\nunique-id\nvariable-exists\n```\n\nThis is a form of tight coupling, but this project is already pretty tightly-coupled with the Sass gem anyway, given the parse tree hacks it relies on.\n. Closing due to lack of activity, but would be happy to merge support for these additional functions. \nFeel free to submit a new pull request when it's ready!\n. Closing as duplicate.\n. As mentioned in #695, modifying the output in this way breaks other formatters. Any attempt at changing the default output needs to not affect the output of other formatters.\nFeel free to open another pull request that addresses this concern. Thanks!\n. I'm not sure I understand your particular situation (it depends how you've organized your projects) but there is currently no way to extend the list of default scss_files specified in your configuration.\nIs there any reason you can't just run scss-lint from the root of the project and have it automatically lint all SCSS files?\n. See the section in the README on preprocessing.\n. Merged in a1cd658. Thanks!\n. This is a warning from Rake which SCSS-Lint has no control over. We don't use last_comment anywhere in our codebase.\nhttps://github.com/ruby/rake/issues/116\n. Hey @marcobiedermann, thanks for raising this potential source of confusion.\nIt seems like the BorderZero linter is misleading. Specifying none is indeed semantically different than 0: the former is specifying border-style while the latter is specifying border-width.\nPerhaps there's a reconciliation here in that usually when developers specify none they meant to use 0?\n@lencioni It looks like you originally added this linter in in 1fe3d5fa. Did you have any thoughts on this issue?\n. I've added some clarification to the documentation in d19d990. Thanks for your input!\n. Hey @oli, thanks for suggesting ways we can improve the tool.\nThe format you suggest would not work because of the YAML specification itself. YAML will treat duplicate keys as overwriting previously-defined keys, for example:\n``` yaml\ntest.yaml\nlinters:\n  SelectorDepth:\n    max_depth: 2\n    severity: warning\nSelectorDepth:\n    max_depth: 3 # Only permitted if overriding vendor CSS\n    severity: error\n```\nRunning the following command:\nbash\nruby -e \"require 'yaml'; puts YAML.load_file('test.yaml').to_yaml\"\nYou'll get:\n```\nlinters:\n  SelectorDepth:\n    max_depth: 3\n    severity: error\n```\nWe see that this is not supported by YAML itself.\nThus support for this would need to be added on a per-linter basis. I'm open to pull requests but I think you might be nearing the area of \"overcomplicating\" your rules. Warnings have their place but I would see the example you provide as being more annoying than useful. I personally want to see output when there is an actual problem.\nHope that helps!\n. Hey @honzabilek4,\nThanks for the report. Sadly, this stack trace is hard to interpret without a reproducible case. A clear example is necessary so that we treat the underlying problem and not simply mask this particular case.\nIf you manage to reproduce feel free to reopen with the example. Thanks!\n. Hey @jmeinerz, thanks for suggesting ways we can improve the tool.\nIs there any issue with having allowed_shorthands be the sole defining option here? In your case, for example, if you want to prevent shorthands of length 2, you can specify the following in your configuration:\nyaml\nlinters:\n  Shorthand:\n    allowed_shorthands: [1, 3]\nThe linter could then warn on the following:\nscss\np {\n  margin: 1px;\n  margin: 1px 2px; // Lint\n  margin: 1px 2px 3px;\n}\nYour pull request in #797 could then be simplified to not introduce a new option, but instead add this check. Since the default is to allow all shorthands, I think it's fine to have this be the default behavior going forward.\nLet me know if that makes sense, or if there's a nuance here I am missing. Thanks!\n. Implemented in #797.\n. Thanks for this, @jmeinerz! \nMerged in e283d1689699f581561fea344df3168128c46d7b.\n. I believe I've addressed this in d88401f. Thanks for your feedback!\n. Thanks for the detailed explanation of the issue, @jamieconnolly.\nWould love to get a pull request that addresses this, as it's a pretty specific issue that would take some time to fix but would only benefit a small cohort (I could be wrong). I personally don't have time available to support issues such as this at this time.\nAgain, happy to merge a pull request! Thanks so much for the report.\n. Thanks for the pull request @dnl!\nSince new linters are disabled by default, I'm fine including this so long as the relevant documentation is included. Users who want to opt-in to this can easily do so should they choose.\nSmall comment about a change that seems unrelated, but otherwise looks good! Just add the relevant documentation so others can know how to use this linter and I'll happily merge.\n. Thanks for adding documentation, @dnl!\nMerged in a1a6faa8e762df22dda04601cad4378d0c07d57c.\n. Thanks for the pull request, @abea!\nMerged in 1f1381142d56afd406aa27ad4e5bef44d5e3ec77.\n. Hey @philwhln, thanks for the report.\nWould really appreciate an SCSS code snippet that reproduces this problem (specifically, the contents of package/test/fixtures/spec/spec/libsass-todo-tests/scss-tests/109_test_selector_interpolation_in_string/input.scss). Without it, it's rather difficult to understand the situation that would lead to this. Thanks!\n. You must be executing SCSS-Lint outside the Bundler context (i.e. without bundle exec). Barring something really strange with how your PATH has been configured, that's the likely explanation.\nWhat does gem list scss_lint say? Do you see version 0.43.0 or newer in the list? That's likely how you're picking it up.\n. Hey @s7dhansh,\nThe error message here is pretty clear. You need to configure your editor to convert tabs to spaces in order for the Indentation linter to be able to correctly determine indentation of source code lines.\nIf this is noisy, feel free to disable it in your .scss-lint.yml:\nyaml\nlinters:\n  Indentation:\n    enabled: false\n. Thanks!\n. While this kind of information sharing wasn't considered when the Linter class was designed, you can currently get this information by accessing engine.filename from within your custom linter.\n. Ah sorry, I misread your question. Yes you would need to submit a pull request to the upstream Sass project.\nGlad you're finding the tool useful!\n. Hey all, \nNestingDepth is working as designed here. Its intention is to notify you when you are nesting (i.e. indenting) more than a given maximum.\nHaving deeply-nested/indented code is a smell once you start working with larger amounts of code within the nested blocks. You won't be able to easily tell what rule you are nested within without scrolling back up:\nscss\n.block {\n  &__element {\n    ... 200 lines ...\n    &--modifier {\n      &::before {\n        // ...which element is this modifier applying to again?\n      }\n    }\n  }\n}\nMy recommendation if you don't find this linter useful is to disable it in this case. I'm of course open to dialog on this, but even then a pull request would speak louder than words. Thanks!\n. Implemented in #825 \n. Hey @smnbbrv,\nThis has nothing to do with SCSS-Lint (though I can appreciate this behavior is confusing). When you use a glob pattern in your shell, it is expanded by your shell and then passed as arguments to the program you are executing.\nIt is likely that the shell you are using is not interpreting ** the way you expect. You can quickly test to see what a glob expands to by passing that pattern as an argument to the echo command:\n```\n\necho my/glob/pattern/*.scss\nmy/glob/pattern/one.scss my/glob/pattern/two.scss ...\n```\n\nHope that helps!\n. SCSS-Lint doesn't treat * as a wildcard because it is a valid character in a file name. \nWhile perhaps odd, you can totally have a file called *.scss, or a directory called ** (and thus a file path **/*.scss).\nTherefore we leave glob expansion to the shell so that you can fully specify whether you want a wildcard or a literal string for the path.\n. Would love to receive a pull request implementing this feature!\nFor anyone interested in implementing this, see @tysongach's set of tests in #816.\n. Thanks for taking the time to write tests for this feature, @tysongach.\nWould be happy to merge a pull request that implements this functionality. I'm closing this for now since there doesn't seem to be much movement here but will point to in in the original issue so that others can benefit from your work here.\nThanks again!\n. Hey @viridium,\nI can appreciate that without context some checks seem ill-conceived or not useful.\nI can assure you the logic behind ColorKeyword is sound. While @lencioni has already elaborated a bit on why this linter exists, please consult the documentation, specifically the closely-related linter ColorVariable.\nThanks!\n. Hey @renancouto,\nHave you actually installed the gem plugin with gem build scss_lint_plugin_example.gemspec && gem install scss_lint_plugin_example-0.0.1.gem (substituting the correct version) so that require 'scss_lint_plugin_example' works?\nIf you're actively developing the gem and using Bundler you can also run bundle config local.scss_lint_plugin_example /path/to/local/git/repository in the repository for which you're using SCSS-Lint + the plugin. See http://bundler.io/v1.12/man/bundle-config.1.html#LOCAL-GIT-REPOS for documentation.\n. Hey @renancouto,\nHave you actually installed the gem plugin with gem build scss_lint_plugin_example.gemspec && gem install scss_lint_plugin_example-0.0.1.gem (substituting the correct version) so that require 'scss_lint_plugin_example' works?\nIf you're actively developing the gem and using Bundler you can also run bundle config local.scss_lint_plugin_example /path/to/local/git/repository in the repository for which you're using SCSS-Lint + the plugin. See http://bundler.io/v1.12/man/bundle-config.1.html#LOCAL-GIT-REPOS for documentation.\n. Thanks for digging into this issue, @ibrahima.\nLooking at the commit that previously changed this, I can't see/recall why that particular approach was taken. Hopefully this doesn't have other unintended consequences.\nThanks again!\n. Hey @jamesarosen,\nFrom the perspective of the SCSS parser (which is outside of our control), green is a color keyword \u2014that's what it's parsed as and represented as in the parse tree (Sass::Script::Value::Color).\nYou can avoid this by wrapping it in quotes so it is parsed as a string, e.g. 'green'. There's not much SCSS-Lint can do here since it can't determine that you actually meant for the color keyword to be just a string.\nHope that helps!\n. Hmmm, it's unfortunate that the SCSS parser differentiates the two, though in hindsight it makes sense. I've added an exception to allow color keywords as arguments in map-* function calls in de91368.\n. Hey @calderJamNet,\nThe information you've provided makes it very difficult to determine if this is indeed a problem with SCSS-lint or some other issue. It would be immensely helpful if you could provide a snippet of code that reproduces the issue.\nFor now, I'm closing this. Feel free to reopen if you can provide a working example. Thanks!\n. Thanks for providing some additional information, @calderJamNet.\nThe SCSS-Lint project does not support third-party plugins to editors. I'm not sure which plugin implements the \"sort properties\" feature you demonstrate in the video, but it's definitely not an SCSS-Lint feature.\nFurthermore, when I run the latest version of scss-lint (version 0.49.0 at time of writing) against the code sample you provide:\n``` scss\nvisibility-dropdown {\nmargin: 0;\n  padding: 0;\n  width: 7rem;\n  &-input {\n    height: 2.46rem;\n    min-height: 0;\n    padding: .6rem;\n    resize: none;\n    vertical-align: bottom;\n  }\n}\n```\n...I get valid lints reported (and no errors):\ntest.scss:1:1 [W] IdSelector: Avoid using id selectors\ntest.scss:5:1 [W] EmptyLineBetweenBlocks: Rule declaration should be preceded by an empty line\nAgain, if you can provide a simple file that when running scss-lint my-file.scss causes a crash, I'm happy to look into it. Thanks!\n. Hey @ain,\nThis problem is due to a bug introduced in RubyGems and is unrelated to SCSS-Lint (you can find this exact issue on other projects, e.g. HAML-Lint, Overcommit, etc). \nYou can find out more at https://github.com/rubygems/rubygems/issues/1420. \nHope that helps!\n. Thanks for the report, @rvanlieshout!\nThis problem can be reproduced by splitting an asterisk-prefixed property across multiple lines, e.g.:\nTrigger Case\nscss\n.class {\n  width: 100%;*  // <-- Asterisk should come before `zoom` on next line\n  zoom: 1;\n}\nWorkaround\nscss\n.class {\n  width: 100%;\n  *zoom: 1;      // <-- Asterisk in correct location\n}\nUnfortunately fixing this is not quick due to a fundamental assumption in the SpaceAfterPropertyColon's implementation that property names span a single line. I'm not clear on if Sass itself should be failing to parse in this case, but if this is still valid it's rather odd.\nI won't have time to look into this for now. A pull request with a fix would be really appreciated!\n. Thanks for the detailed pull request, @ivantsepp. \nIncluding thorough tests and documentation makes this much easier to \ud83d\udc4d \nMerged in 21d244440408af65a1c696ea7c99b45218fa0b7f.\n. Thanks @ivantsepp!\nMerged in a229ca164ba028fd2ecc5f6ce256deed706ffd35.\n. Hey @amree,\nYou've likely done something wrong, as I wasn't able to reproduce. Using the following configuration:\nyaml\nlinters:\n  PseudoElement:\n    enabled: true\n...running against the following SCSS:\nscss\np:before {\n  content: '>';\n}\n...I received the following output:\ntest.scss:1:1 [W] PseudoElement: Begin pseudo elements with double colons: `::`\nPlease ensure you are using the latest version of scss-lint (0.49.0 at time of writing) and that your configuration is not malformed. \nHope this helps!\n. Hey @andreechristian,\nNestingDepth is working as designed here. See https://github.com/brigade/scss-lint/issues/748#issuecomment-192398322:\n\nThe linter is working as expected here. NestingDepth doesn't refer to selector depth (that's what the SelectorDepth linter is for), it refers to the literal syntactic nesting you can do with Sass. In your case, your &:hover is at depth 4.\nThe rationale here is that the more nested your code is the harder it is to understand. Your example is a simple one, but it's quite easy to find examples where you are deep in a nested block and have to scroll-up to figure out what the parent reference & is actually referring to.\nIf you don't like the warnings in this case, disable it for the file in question, or disable the linter entirely.\nHope that helps.\n. Hey @douglasdeodato,\n\nPlease ensure you are running the latest version of SCSS-Lint (0.49.0 at time of writing). This was fixed in 0.39.0. \n0.38.0 was the last version published as scss-lint, so make sure you gem install scss_lint (with an underscore) instead. The name change was so SCSS-Lint switched to proper Rubygems naming conventions.\nHope that helps!\n. Thanks for the report @AllSpeeds.\nFixed in e3a68d4 and released as a hotfix in 0.50.1.\n. Thanks for the report! Fixed in #834 and released as 0.50.2\n. Hey @otbpvose,\nIt would be very helpful for you to include some concrete examples so it's clear what behavior you are expecting versus what you are observing. For example, one or two SCSS code snippets along with the output you see, versus the output you expect.\nThanks for your help!\n. Thanks for clarifying the issue, @otbpvose.\nThe problem with supporting & parent selector expansion is that can get particularly gnarly with comma selectors, for example:\nscss\n.one, .two, .three {\n  &.a, &.b, &.c {\n    &.alpha, &.bravo, &.charlie {\n      ...\n    }\n  }\n}\nSass will compile the above into 27 selectors: .one.a.alpha, .one.a.bravo, ..., .three.c.charlie. This makes reporting errors difficult since you have to deduce which sequence of selectors lead to a compiled selector that violated the BEM depth limit, and present a message to the user that helps them understand which sequence lead to the problem. I think you can see why this is difficult.\nI'm open to a pull request that addresses this, but won't be implementing this myself.\n. Hey @nicolasmccurdy,\nThe reason you are seeing a discrepancy between running scss-lint <glob> and specifying that same glob in the files option of the Rake task is that your shell is expanding the glob pattern in the former, whereas SCSS-Lint assumes you are specifying a literal file name in the latter (since * is technically an allowed character in file names).\nThus the workaround you've specified is actually the correct way to use a glob pattern to match files using the files option of the Rake task.\nHope this helps!\n. Thanks for noticing this issue with the documentation, @nicolasmccurdy.\nI've updated it in 77552c4. Thanks again for the report!\n. Thanks!\n. Thanks @mexn!\n. Thank you for writing up a detailed proposal for this potential feature, @thegranddesign.\nThe PropertySort linter is already notoriously complicated. Each new \"option\" we add to it further complicates things.\nWith that said, I'm not against this, but I would like any implementation to provide backwards-compatible support with the existing implementation (i.e. there should be a single option that enables this and it should default to be off).\nI'm skeptical of the value such a specific check is providing, but that's entirely personal opinion, and it's likely the structure you're aiming for in your SCSS would benefit from automated enforcement of the pattern you've described.\nDepending on how complex the change is, I'd perhaps like to see a \"show of hands\" for how many others would benefit from this. However, if the change isn't too complicated, feel free to submit a pull request (with comprehensive tests!!!) and I'll be happy to merge it. Thanks!\n. Hey @leiboldm, thanks for the report.\nWhile I don't know anything significant about the Polymer project (which a quick search tells me this polyfill-unscoped-rule comes from), it appears to me to be a third-party (read: non-standardized) extension to CSS. If that's not the case, please point me to some documentation that indicates otherwise.\nI would rather not introduce custom logic for this third-party framework. Feel free to create a custom SCSS-Lint linter in your repository to handle this particular case. Thanks!\n. Closing due to lack of response.\n. While this convention is certainly a bit out of the ordinary (I've never seen a codebase that enforced spacing after a block), I am happy to accept a pull request with tests adding support for this to EmptyLineBetweenBlocks via some configuration option (for example, empty_line_before_and_after). Thanks!\n. Hey @astronati,\nI'm not sure what you mean by \"missing double comma.\"\nIt would be really helpful if you provided some example code with the output you saw from SCSS-Lint and the output you expected. Thanks!\n. Closing due to lack of response.\n. Definitely open to a pull request adding support for this. Thanks!\n. I'm not sure I understand where the regex comes into play here, @yoanmalie. The SpaceAfterComment linter does not support arbitrary regexes, just one of one_space, or no_space or at_least_one_space.\nI'm happy to accept a pull request (with tests!) that adds support for specifying an arbitrary regex. Thanks!\n. Sorry for the delay in response, @yoanmalie.\nThe error you're receiving is not from the Comment linter, but the SpaceAfterComment linter. Thus no change to the Comment linter's configuration will make the SpaceAfterComment linter warnings go away.\nThus my answer is that I'm happy to accept a well-tested pull request that adds support for /// comments to SpaceAfterComment (ideally any arbitrary regex representing the comment prefix). Thanks!\n. Hey @SchulteMarkus, thanks for the pull request.\nUnless I'm missing something, Bamboo is a proprietary solution with no free offering for open source projects. It has a 30 day free trial but that's not the same as a truly free open source offering like Jenkins.\nWith this in mind, I'm uncomfortable adding what is effectively free advertising to SCSS-Lint's documentation for a proprietary product. Hope that's understandable. Again, if there's something here I'm missing, do let me know.\nThanks!\n. Thanks!\n. Thanks for catching, @abrom!\n. I am not familiar enough with the BEM methodology to weigh in here. Would love a pull request fixing this issue if there is indeed a problem. Thanks!\n. Hey @petrgazarov,\nCode inside comments will only be linted if you are using \"loud\" comments (/*...*/).\nSince those comments are rendered to the resulting CSS, they support interpolation of Sass variables within them.\nThis is why we encourage you to always use silent comments // everywhere. We could disable other linters from looking inside loud comments, but that's slightly annoying since you have to modify every linter to not descend into loud comment nodes in the Sass parse tree.\nWith all that said, I'm open to a pull request with tests that attempts to address this issue. Thanks!\n. The README is correct, @sbdchd. You're probably on an old version of SCSS-Lint.\nThe latest is 0.50.3 as of today. Make sure you install the scss_lint gem and not scss-lint (with a hyphen).\n. Thanks for bringing this up, @lencioni.\nI don't think there is any bandwidth to support the upstream Ruby Sass implementation or maintain our own parser, and a rewrite seems unnecessary given the other tools out there.\nI've added a notice to the README which mentions stylelint and sass-lint, which both seem like excellent alternatives (though I personally have no experience with either).\nWe'll keep the project running as it's been running (that is, accepting pull requests from the community and answering simple support questions) but otherwise it seems like the time has come for the community to shift to something new. I've no doubt that Natalie and the rest of the core Sass team will do an excellent job with the new Dart implementation!\n. Thanks for the pull request, @remy-actual.\nYour command does not work for me. Here's what I get when I run the following using the built-in version of sed that comes with macOS:\nbash\n$ sed \"1{/^---$/{:a N;/---$/bash --version;d}}\" screen.scss\nsed: 1: \"1{/^---$/{:a N;/---$/ba ...\": unexpected EOF (pending }'s)\nPerhaps you are using a different version of sed? Ideally we'd have a command that works on both macOS and Linux. Thanks!\n. Merged in 2615dfade9b741e678931abdac1598cce3058fb1. Thanks!\n. Hey @ncino-cpezza,\nThis code is from the sass gem. I'm not sure how you're hitting this situation if you've uninstalled SCSS-Lint from your system. \nI'm going to close this unless you can provide more information. Thanks!\n. Hey @mprins, thanks for looking into running SCSS-Lint on Sass 3.5.\nLooks like Travis lied to you, as the JRuby build definitely failed but reported as a pass. Looks like this is because while the RSpec tests failed the second step of our tests passed because we skip the Overcommit pre-commit checks for JRuby (since they aren't useful and usually fail).\nIn any case, would love a pull request that changes to_sass -> to_s if it results in all the tests passing. We'll probably want to modify our Travis build matrix to test on both Sass 3.4 and 3.5, if possible.. Thanks for digging into this, @tagliala. Your general approach seems correct, but will not work in some cases. It seems Sass::Tree::PropNode#value now returns an array to represent interpolation in property values (see https://github.com/sass/sass/commit/8247d55b0).\nThus the solution you suggest probably passes in tests because we don't have too many tests explicitly using interpolation in property values. We should add some tests and fix the implementations appropriately. In general, most of the linters should ignore the property value if it is composed of interpolations, since that is dynamic code that we can't easily evaluate in static analysis.\nWould love to have someone dig into this and get this working, as it's not that difficult but just a bit tedious to ensure we're properly handling the Arrays returned by Sass::Tree::PropNode#value in all cases.. We're happy to accept a PR adding support for Sass 3.5! As mentioned above, this is doable (and @tagliala has a proof of concept that looks promising) but I think it's likely that the implementation will introduce some issues for codebases using interpolation in property values.\nIf someone applies the commit locally and runs SCSS-Lint against a sizable SCSS codebase (Bootstrap 4 is a good candidate) without issues, we'll be happy to take that as evidence that @tagliala's commit is sufficient and cut a release.. Hey @bennom, I can't reproduce this behavior with the latest version of SCSS-Lint (0.54.0 at time of writing).\nMake sure you have the NameFormat linter under the linters key, i.e.\nyaml\nlinters:\n  NameFormat:\n    enabled: true\n    ...\nFurthermore, you misspelled mixin_convetion (missing an n).\nUsing the following .scss-lint.yml:\nyaml\nlinters:\n  NameFormat:\n    enabled: true\n    variable_convention: hyphenated_lowercase\n    function_convention: camel_case\n    mixin_convention: camel_case\n...against the following SCSS file:\n```scss\n$myVar: 'hello';\n@function my-func() {\n}\n@mixin my-mixin() {\n}\n```\n...I get the following output:\ntest.scss:1:2 [W] NameFormat: Name of variable `myVar` should be written in all lowercase letters with hyphens instead of underscores\ntest.scss:3:1 [W] NameFormat: Name of function `my-func` should be written in camelCase format\ntest.scss:6:1 [W] NameFormat: Name of mixin `my-mixin` should be written in camelCase format\nHope that helps!\n  . Hey @emcniece, thanks for the report.\nUnfortunately I can't reproduce this locally. In the past, I have seen weird behavior from those installing Ruby via RVM. I would strongly recommend rbenv, as I've never seen load path issues like this with rbenv.\nIf you can track down what's going on here, we would be happy to merge a pull request that fixes the issue. Thanks!. Closing due to lack of response.. Thanks for catching, @tysongach. Fixed!. Closing due to lack of response.. Thanks @srawlins!. If you're referring to whether this PR has been released, as of a few minutes ago the answer is yes!\n0.54.0 includes the cubic-bezier addition to the whitelist.. Thanks!. Hey @ciar4n,\nThis is actually a bug with the Sass parser that SCSS-lint uses, which has been fixed in Sass 3.5. \nUnfortunately SCSS-Lint does not yet support Sass 3.5. There is an open issue to track adding support here. Closing this as a duplicate of that issue. \nThanks for the report!. Thanks for the PR, @nex3! And doubly so for the incredible work you've done on Sass over the years. \ud83d\ude47 . Thanks for helping keep our documentation up to date, @pocke!. Duplicate of #559. Happy to accept a pull request!. My mistake. This is actually a duplicate of #821.. Thanks for the pull request, @aar0nr. I don't think any of this project's maintainers are intimately familiar with the BEM methodology, so we'll take you at your word that this is what the original BEM creators intended.\nThank you for writing tests to ensure that this behavior is specified in code.. Thanks for taking time to dig into this issue, @printercu and @tagliala. I really appreciate the effort and understand it's frustrating that this doesn't seem to be working as hoped.\nGiven that the problem seems to be caused when we require scss_lint/sass/tree, my guess is that the nasty monkey-patching we're doing is causing issues. I figured this would one day come to bite us.\n750 suggests a potential workaround to this problem, which is to not have Linter inherit from Sass::Tree::Visitors::Base, but define its own methods for traversal.\nAs you can see, that issue has been around for a while. I no longer work at @brigade and I don't use scss-lint at my current employer, so any work I do on this project is entirely out of free time. I think it's possible for someone to hack a solution to #750 in a day, but there may be unknown challenges with that path. I would suggest someone solve #750 independently of everything here (getting all existing tests passing), and getting that merged. \nOnce we stop monkey patching we can proceed to tackle the challenge here. Hopefully the work will pay off and we won't hit this strange issue where we attempt to visit a String.\nHowever, as things currently stand I'm not comfortable with merging something that breaks on Twitter Bootstrap's codebase, especially when the reproducible test case is so simple. Open to hearing your thoughts.. Closing in favor of #927. Thanks for your help here!. Thanks for the pull request, @pocke. \nRebased and merged in bdde989d.. \ud83d\udc4f \ud83d\ude47 . Hey @tagliala, thanks for offering to move us forward on some of these issues.\n\n\nThe reason we explicitly declared the RuboCop gem in the Gemfile was to avoid a warning about duplicate dependencies. See the commit message in 98655a735 for details. At its core, if another project includes SCSS-Lint as a development dependency, we don't want to force them to use the RuboCop version specified in the gemspec, since it's pinned to a specific version. If this isn't a practical issue, I'm open to suggestions here (is this behavior no longer the case?)\n\n\nI'm fine with dropping Ruby 2.0 support, as it's been EOLed since February 2016. I know your suggestion is to simply remove it from the Travis build matrix, but at that point we're not ensuring we support it, so I'd rather just drop support.\n\n\nIs there a summary of what exactly has changed with coveralls_reborn?\n\n\nThanks!. Thanks for linking to the diff for coveralls_reborn. The update to SimpleCov doesn't seem like it would benefit the SCSS-Lint project just yet (but if I'm missing something let me know) as none of the changes seem to affect this project.\nIf you find yourself down the road having an issue with the coverage information reported by SimpleCov, then I would be open to merging coveralls_reborn. My hope is that your PR eventually gets merged into the main project soon.. Thanks @yoanmalie!. If you want to write a linter ElementSelector which forbids any references to elements, this would be pretty easy. See IdSelector as an example. Would essentially need to rename visit_id to visit_element.\nHappy to accept a pull request (but this linter should be disabled by default).\n  . Thanks @tobiashm.\nRebased and merged in 3dd8055b3a0e3d41c28acb8f0da2ba6901d37c27.. Implemented in #935. Thanks!. Implemented in #935. Thanks!. Thanks @tagliala. Was there a specific reason we dropped support for Ruby 2.0? Just want to make sure we record that reason in the change log.. Thanks @elstgav!. Hey @arpit9295, you can use style: at_least_one_space to work around this. \nIf you are requesting a feature to explicitly enforce alignment, happy to accept a pull request!. Thanks for the update, @tnir!. Happy to accept a pull request implementing this, @tnir!. Thanks @zacharydenton!. Duplicate of #516. Feel free to contribute to the discussion there, but at its core we are happy to add this if someone submits a pull request!. What version of SCSS-Lint are your using, @EthanNYT? I can't reproduce this with the latest version.\n```\n$ scss-lint -v\nscss-lint 0.57.0\n$ scss-lint <(echo '#{$var} {}')\nNo output\n```\nYou are likely using another tool. The error message SCSS-Lint displays is different (Avoid using id selectors).. Thanks for the fix, @mprins.. Happy to merge a pull request. Thanks!. Can you provide an example of what you mean by \"optimized SCSS\"?. Are you sure you are using version 0.5.0, @shiftgeist? That's quite old\u2014recommend you upgrade.. Perhaps good for another commit, but if you add the column number here I believe you'll set us up to have similar functionality with Syntastic.\n. These access modifiers were placed to emphasize that these constants are not referenced elsewhere. They may not have a functional purpose, but I believe they do help convey intent.\nThere doesn't appear to be anything in the Ruby Style Guide that says not to do this, but that document shouldn't be considered gospel anyway.\n. I think you could simplify this by using each_with_object instead of inject.\n``` ruby\n    def check_node(node)\n      node.children.each_with_object({}) do |child, rules_seen|\n        next unless child.is_a?(Sass::Tree::RuleNode)\n    rule = child.rule.join\n    if known = known_rule?(rules_seen, rule)\n      add_lint child.line,\n               \"Merge rule `#{rule}` with identical rule at same level \" \\\n               \"one line #{known[1].line}\"\n    else\n      rules_seen[rule] = child\n    end\n  end\nend\n\n``\n. Including aforce_nesting` option changes what this linter is ultimately doing, and so we'll need to change the name as a result. It no longer checks for duplicates--it's checking for selectors which can be merged with other selectors.\nI would change the name to MergeableSelector to reflect this change in behavior.\n. This method of checking if a rule is a single rule is brittle (suppose you have string interpolation with a comma in the string). \nYou should instead check RuleNode#parsed_rules (which is a Sass::Selector::CommaSequence) and check its members count--if it's 1 then it's a single_rule as you refer to it.\n. This context is not very descriptive--they should begin with \"when\" to indicate that this is specific to a context.\nIn this case, \"when force_nesting is enabled\", and \"when force_nesting is disabled\" (below).\n. This is a misconception. See:\n- http://stackoverflow.com/questions/5481009/why-is-enumerableeach-with-object-deprecated\n- http://www.ruby-doc.org/core-2.0.0/Enumerable.html#method-i-each_with_object\n. I would rather not have individual Linters have to remember to pass self in order for the linter property to be initialized. Developers will likely forget and this can lead to bugs.\nA cleaner way to enforce that a linter is always provided is to define a create_lint method on the linter class which handles this for you, e.g.\nruby\n  class Linter\n  ...\n    def create_lint(filename, location, description, severity = :warning)\n      Lint.new(self, filename, location, description, severity)\n    end\n  ...\n  end\nAs shown above, if we're going to be including the linter in the Lint, it should be the first argument to the constructor.\nAfter implementing this, you'll need to go back and update all manual creations of Lint to use create_lint instead.\n. This can be rewritten to use each_with_object.\n. in -> into\n. downcase is a Ruby method name that suggests it is a verb. We should use the adjectives uppercase and lowercase as the possible options.\n. Since the visit_* methods are specific to linters, it seems inappropriate to define them in a utility class.\nAlso, this adds a layer of indirection which I'm not entirely sure I'm comfortable introducing as a pattern to scss-lint. Having all necessary code in a linter, while perhaps not DRY, makes it easy for you to understand what's going on without needing to refer to externally defined modules. (i.e. when I look at HexLength for the first time and I don't see any visit_* methods defined, I'm confused as to how it actually works--It's not obvious that I should look at HexUtils).\nIf there is an opportunity for deduplication, I would rather see a helper method defined in the Utils module, which is already available to all linters.\n. These headings appear without an explanation for what they are. You should introduce them by adding a sentence:\n\nYou can specify whether you prefer shorthand or long-form hex colors by setting the style option to short or long, respectively.\n. Why are we changing this? It wasn't mentioned in the commit message, and seems unrelated.\n. node.to_s potentially normalizes the node to display something else that wasn't in the original source. We should always use source_from_range to ensure we're checking the original source code.\n\nFixed in fe0317ef8184d21af040ff74bb8dd4ba91eb4da4.\n. Could condense this to a single regex check rather than removing the leading @ if it exists:\nruby\nreturn unless name =~ /^@?[_-]/\n. Where does this ignore option get used?\n. This will result in the CLI being loaded all the time, which is not necessary. This require statement should be added to lib/scss_lint/rake_task.rb instead.\n. You should add the require under https://github.com/causes/scss-lint/blob/master/lib/scss_lint/rake_task.rb#L29 so it doesn't affect load time.\nHowever, it appears that even with that this task doesn't work--it doesn't allow you to specify a list of files to lint. If you're interested in fixing that, I'd be happy to accept a pull request.\n. It would probably be a good idea to not lint children if a lint was detected. Since you've already determined the developer has written a selector that is nested too deeply, there's no point in reporting nested selectors within that selector.\n. Why is this necessary? We only visit the RootNode once in any SCSS document, so your visit_root method above should suffice for resetting the depth.\n. Each context block should have a blank line separating them from the next one.\n. Could simplify this to:\nruby\nconvention_name = config[\"#{type}_convention\"] || config['convention'] || 'hyphenated_lowercase'\n. Grammar\n. i is not a descriptive name for this variable. You should split it into its components, e.g.\nruby\n@options.fetch(:reporters).each do |reporter, output|\nThis saves you from the nonsense of having to refer to .first and .last, and just refer to reporter and output explicitly.\n. This rescue seems unnecessary, unless you were to validate the path ahead of time.\n. I would write:\nruby\nlast_reporter, _output = @options[:reporters].pop\n...so you don't need to call .first below.\n. The one unfortunate side-effect of this approach is that any linter which defines visit_comment will override this implementation, so unless the subclass remembers to call super it will inadvertently break this functionality.\nAt the moment, this only affects the trivial Comment linter, but when #161 finally gets implemented who's to say whether this will be taken advantage of more often.\nWith this in mind, the easiest workaround is to rename this method to something like parse_control_comment and call it in the visit method above, right before super, e.g.\n``` ruby\nif node.is_a?(Sass::Tree::CommentNode)\n  parse_control_comment(node)\nend\nsuper\n...\n```\n. I'm happy to make the comma optional:\nruby\n/\\s*,\\s*|\\s+/\n. I find case statements DRYer for this sort of thing:\nruby\ncase command\nwhen 'disable'\n  @disable_stack << node.node_parent\nwhen 'enable'\n  @disable_stack.pop\nend\n. Why not just: \nruby\nreturn unless linters.include?('all') || linters.include?(name)\n. Can avoid this manual setup by changing line 19 of spec/spec_helper.rb to be a <= instead of <, which I feel is fine in this case.\n. Using let statements instead of instance variables matches the conventions used in the rest of our tests.\n. I can see the desire to have two separate linters defined in order to check that disabling one doesn't disable the other, but that can be checked by simply having a bogus control comment for one of the tests.\nSwitching to only having one linter being tested allows us to set the subject to that linter and then use the setup code defined in spec/spec_helper.rb as is. It will also simplify a lot of the it blocks below to:\nruby\nit { should ... }\n. I understand the perspective. From my point of view the code I suggested reads cleaner and accomplishes the same functionality (allowing you to do something silly like scss-lint:disable all,BorderZero, sure, but I feel that's not something worth worrying about.\nNot a blocker in any case.\n. Can just call this properties. Since there is no concept of excluded_properties, the included_ qualifier seems unnecessary.\n. Since this linter only serves a purpose if there are properties defined, you can short circuit running anything at all by writing:\nruby\nyield if @properties.any?\n. What about properties that are the result of a function call? I'm open to thoughts on this, but I can see the value of making this strict about requiring variables.\n. Including the version number here seems brittle. Is this absolutely necessary (i.e. does the CheckStyle plugin require this attribute be present)?\nHaving scss-lint need to update this formatter's output each time the CheckStyle plugin is updated isn't ideal.\n. The version number you've specified seems really out of date. The current version of the CheckStyle plugin is 3.41.\nMy issue with this is that this plugin is extremely specific to a particular testing platform (Jenkins).\nI would rather this be pulled into its own separate gem and loaded via the --require and --format flags. I don't think this formatter should be shipped with scss-lint.\n. This should be an empty hash rather than an empty array.\n. This gives me an idea for adding support for checking if a property where units are required is lacking units, but that might be harder to pull off. (just thinking out loud)\n. Can you run bundle exec rubocop against this commit? We're supposed to have Travis report back offenses but it currently seems to be broken, and there are a few style nits here that would be reported by that.\n. Should be an empty hash.\n. Is to_set necessary here? You can just iterate over the hash itself.\nruby\nconfig['properties'].each do |property, allowed_units|\n   ...\nend\n. The order that we're loading configurations here requires some closer attention. With this implementation, if I want to share a gem that sets configuration for linters included in the main scss-lint project (e.g. sets standard Indentation width or a maximum NestingDepth) that can be used across all projects in my organization, I can't.\nThis is because the default configuration that is automatically loaded with every configuration will override the plugin configuration here.\nThis suggests that this plugin loading code needs to be shimmed somewhere in the actual configuration loading process before the default configuration is merged. This preserves the load order of default \u2192 plugins \u2192 local .scss-lint.yml. I've implemented this in a382abf.\n. Would a relative link work here? \ne.g. [preset order](../data/property-sort-orders)\n. This will also require comments for the enable counterpart, so for code like the following:\nscss\n// scss-lint:disable ...\np {\n}\n// scss-lint:enable ...\n...I would get two lints. Perhaps we should only report disabling without a reason?\n. Is the check above necessary with this present, or are they testing something different?\n. I propose changing to:\nruby\nsource = source_from_range(node.source_range).gsub(/\\)\\z/, '')\nto remove trailing parentheses from the lint message.\n. Similarly, changing this to:\nscss\nright_source = source_from_range(right_range).gsub(/\\)\\z/, '')\n...will remove trailing parentheses if they exist, making the lint message easier to read.\n. This is not an ideal approach. Calling run should not return a list of engines. The runner should auto-correct if auto-correction has been called for. There are a lot of other issues with the Runner class that are unrelated to your change, but it's purpose is to be the central coordinator for the tool. The CLI class is simply intended to parse CLI options and hand those off to the Runner.\n. I don't think this works the way you think it does. Calling to_scss is likely to change more of the original source code than you originally intended due to the quirks of the Sass engine. \nFurthermore, using puts to output the results prevents us from controlling the file we output to via --out flags. A better solution would simply update the file at the end of the run.\nHowever, the big show-stopper here is using to_scss, which will butcher the original source tree.\n. Unless we intend to use the `null_selector elsewhere, it seems simpler (and less code) to have an early return.\nruby\nreturn unless node.parsed_rules\n. Can you explain why this option is no longer necessary?\n. The verbal or/and boolean operators aren't used anywhere else in this repository, and we'd like to keep it that way due to the way their precedence is handled. Please use ||/&& instead.\n. This is incredibly hard to read. Breaking out the message into a separate variable so we can write:\nruby\nmessage = \"...\"\nadd_lint message do\n  ...\nend\n...makes it much easier to read the block.\nAlso, given my comments on #534 I'm skeptical this block syntax for writing auto-corrections is going to make it in here, as a heads up (but I'm open to other solutions).\n. private would be preferred here since we don't intend to have other instances of this class refer to its methods.\n. I think a better name in this case is MergeEquivalentSelector, if perhaps more verbose.\n. We follow the Jim Weirich philosophy which includes parentheses when the return value matters.\nruby\nnestable_node = find_nestable_node(child_node, node.children)\n. Can we call these sub_rule? and parent_rule? to visually separate the words?\n. We should not be defining this override in the GroupableSelector linter. It's unorthodox and could change the behavior of other linters which rely on the current behavior of the == method (there may not be any right now, but that could change).\nCan we have a helper method same_literal? defined on GroupableSelector that accomplishes the same effect?\n. Split out the message into a separate variable to make this more readable, e.g.\nruby\nmessage = \"...\"\nadd_lint message do\n  ...\nend\n. Does this do what you think it does? There are multiple related fields defined on RuleNode: rule, parsed_rules, resolved_rules, etc. It makes me uncomfortable that we're relying on the behavior of this specific rule and hoping it will continue to work the same way in future.\n. Please prefer && over and due to precedence differences and for consistency with the rest of this repository.\n. Are there other examples of situations where this linter is useful? If this is the only case, I'm not sure having this linter is really worth it, as the number of times where you have the exact same set of properties in both selectors is likely quite rare.\n. I'm actually surprised this is disabled by default. Unfortunately I didn't explain why I disabled it by default in the original commit 800a67bb.\n. Can write as:\nruby\n@extra_properties = Array(config['extra_properties']).to_set\n@disabled_properties = Array(config['disabled_properties']).to_set\n. This file should be removed.\n. Lose the extra line\n. This can just be yield, to match what we do elsewhere. It's perhaps not as descriptive but at least consistent. I usually write:\nruby\nyield # Continue linting children\n. Should this be:\nruby\ns.add_dependency 'rake', '>= 0.9', '< 11'\nMy understanding is that all constraints must be satisfied, so ~> 10.0 will still require you to have rake >= 10.0.\n. This would read better as a case statement:\nruby\ncase child_node\nwhen Sass::Tree::FunctionNode\n  ...\n  ...\nelse\n  ...\nend\n. You can combine these into a single hash, i.e. repurpose DEFINING_CLASSES into something like (forgive the naming):\n``` ruby\nDEFINITIONS = {\n  Sass::Tree::FunctionNode => { use_type: Sass::Script::Tree::Funcall, human_name: 'function' },\n  ...,\n}.freeze\nDEFINITION_NAMES = DEFINITIONS.map { |k, v| [k, v[:human_name] }.freeze\nDEFINITION_TYPES = DEFINITIONS.map { |k, v| [v[:use_type], k] }.freeze\n```\nThen these implementations become:\n``` ruby\ndef humanize_node_class(node)\n  DEFINITION_NAMES[node]\nend\ndef defining_class_for(node)\n  DEFINITION_TYPES[node]\nend\n```\nThe advantage being you define all types once, rather than having to list these out in multiple places in verbose case statements. Not a big deal.\n. What are you trying to do here? result will be set to @files since you're using each...\n. The changes to this file seem unrelated. Can you remove them?\n. There will always be a parent (at the very least, a Sass::Tree::RootNode).. If you are adding a potentially unstable build (ruby-head), can you please mark failures as ignored? We don't want broken builds because we're testing on unstable software.. ",
    "volpino": "@sds I'll try :P\n. Some of your tests are failing in my installation. Is it a bug or my problem?\nrspec ./spec/linter/shorthand_linter_spec.rb:44 # SCSSLint::Linter::ShorthandLinter when a property has a value repeated 4 times returns a lint\nrspec ./spec/linter/shorthand_linter_spec.rb:48 # SCSSLint::Linter::ShorthandLinter when a property has a value repeated 4 times reports the correct line for the lint\nrspec ./spec/linter/shorthand_linter_spec.rb:60 # SCSSLint::Linter::ShorthandLinter when a property has exactly two identical values returns a lint\nrspec ./spec/linter/shorthand_linter_spec.rb:64 # SCSSLint::Linter::ShorthandLinter when a property has exactly two identical values reports correct lines for each lint\nrspec ./spec/linter/shorthand_linter_spec.rb:76 # SCSSLint::Linter::ShorthandLinter when a property has its first two values repeated returns a lint\nrspec ./spec/linter/shorthand_linter_spec.rb:80 # SCSSLint::Linter::ShorthandLinter when a property has its first two values repeated reports correct lines for each lint\nrspec ./spec/linter/shorthand_linter_spec.rb:92 # SCSSLint::Linter::ShorthandLinter when a property has its first value repeated in the third position returns a lint\nrspec ./spec/linter/shorthand_linter_spec.rb:96 # SCSSLint::Linter::ShorthandLinter when a property has its first value repeated in the third position reports correct lines for each lint\nrspec ./spec/linter/shorthand_linter_spec.rb:108 # SCSSLint::Linter::ShorthandLinter when a property has its second value repeated in the fourth position returns a lint\nrspec ./spec/linter/shorthand_linter_spec.rb:112 # SCSSLint::Linter::ShorthandLinter when a property has its second value repeated in the fourth position reports the correct line for the lint\n. I tried to write some tests, probably they'll need some polish but they work :)\nPlease review them, thanks!\n. Added code and tests for #2.\nFixed the test for checking the run with no files passed that was not called actually\n. Thank you!\nI'll look carefully at your code to learn some Ruby :) After this changes we'll definitely use scss-lint in production, thanks again!\n. Added in a30fc90\n. @sds hi! unfortunately i don't work anymore in the company where they were/are using scss-lint with Jenkins. Maybe @nostalgiaz know more than me on the matter.\n. ",
    "lencioni": "We could probably modify the regexen in PropertyFormatLinter to accommodate the existence of interpolation.\n. Yes, a whitelist makes sense. I can't think of anything that isn't in your list.\n. Indeed, this is just for variable names so far.\n. Not a bad idea. I also vote for //.\n. That is exactly what is happening. This linter just uses a pretty basic regex based on clusters of non-whitespace followed by clusters of whitespace, which is unable to take sass functions into account. So it sees 12px) in the second and fourth positions, thinking the last one can be left off.\n. Is this a duplicate of Issue #5?\n. I think this would be great.\nDo you know of a comprehensive list of valid words? Or, is there another tool that already does something like this that we could simply use or look at for inspiration?\n. Duplicate of https://github.com/causes/scss-lint/issues/27\n. @wincent I think we have a lint for capitalization in selectors, but not for under_scores.\n. Would it be helpful if we started a branch where the scss-lint community could collaborate on landing this feature? Maybe if everyone pitches in, the tediousness of the task would be minimized.\n. Thanks for the bug report!\n. Hi Nick, thanks for the feedback! I'm just noticing that this looks pretty related to #80. @sds will have better insight on this than I will, but it may end up being solved by the same solution, or may impact how we decide to resolve #80.\n. @sds Are you sure that fd01fd2 closes this issue? I glanced at the code and it looked unrelated.\n. Ah, I guess I misunderstood the issue then. I figured this was a problem with one of the linters complaining about a syntax you wanted to use, not that simply 3.3.0 wasn't supported. Carry on!\n. > People use mixins for @media queries, and on those occasions would have very good reason for putting the @include at the end of the rule set.\nRegarding this, it might work well to have a rule that any @include that has content should be after the properties, and any @include without content should come before the properties (and after @extend).\n``` scss\n.my-class {\n  @extend %placeholder;\n  @include mixin(1);\n  color: #000;\n@include enhance(tablet) {\n    float: left;\n  }\n}\n```\n\nThe other is mentioned by @jeffkamo: using mixins for vendor-prefixing, you might want to deliberately place them in sort order.\n\nI don't think we should worry about this. These people should just disable this lint.\n. Exactly! I was going to mention that, but I suspect there are still a lot of people using Bourbon and Compass for vendor prefixing.\n. :+1: \n. A good compromise would be to use a mixin that generates both the desired style and the fallback. That way you keep your code a bit DRYer, you avoid forgetting about using the fallback in each instance, and scss-lint won't complain about each instance you are using a fallback, just the instance where the mixin is defined.\n. Thanks for the report!\n. I believe that is intentional. If you look at the specs, this behavior has an example: https://github.com/causes/scss-lint/blob/master/spec/scss_lint/linter/hex_format_spec.rb#L24\nIt seems like this should be mentioned in the documentation, and it should probably be configurable. I don't know when we'll be able to get to this, but if you wanted to submit a pull request in the meantime we would be happy to review it!\nThanks for the report!\n. Or maybe it should be split out into its own lint. What do you think, @sds?\n. Thanks for your contribution to scss-lint! I pushed this through our internal code review tool and it is now in master at https://github.com/causes/scss-lint/commit/0488dc956c452067efac3f6d9e2937a507adf28f\n. scss-lint is not compatible with sass 3.4.0 yet (#218), so when you updated, your scss-lint got downgraded to a really old version (0.7.0, released June 2013) that bundler thinks is compatible. This old version does not contain the option that you are trying to use.\nIf you want to keep scss-lint in your gemfile, you should pin your scss-lint version >= 0.27.0 for now. This will mean that you can't use sass 3.4.0 until we release a new version of scss-lint that supports it.\nAlternatively, you can probably remove scss-lint from your gemfile and install it globally since it likely doesn't need to be part of your bundle. https://github.com/causes/scss-lint#installation\n. Thanks for the report. I believe I added this in 813b9e9c138fcea82f012ab162c0e818d6d79297 and it will be included in the next release.\n. Thanks for the pull request. I merged this in 55e3bbc16c0713ec09fedc69dd6c9a258a3bce30.\n. Also, thanks for helping out. It is really great to have more people involved in making scss-lint better.\n. I'm looking forward to seeing what else you come up with. Keep it coming!\n. I think linting the @import filenames is a good suggestion.\nYour suggestion about having files that are imports only makes sense too, but I agree that there might not be an established standard for this. In any case, it should be a different linter entirely.\n. Yeah, this would be nice to have coupled with #150, or just as a notice instead of an error (maybe related to #232).\n. I don't see any problems in adding this before those issues are resolved. It might make sense to disable it by default to begin with? On second thought, it may as well be enabled by default. People can always exclude the files where they need it or disabled it outright.\n. Thanks for the pull request! This is looking really good. Let me know if you have any questions about my comments.\n. Thanks for the contribution!\n. > Before I launch down that path I just wanted to ask @lencioni and @sds if you already know of any established or efficient way of doing this?\nI am not as familiar with Sass internals as @sds is, but I don't know of any established or efficient way of doing this.\n\nAlso, if we are able to create methods like is_nested_descendent_selector? and is_nested_pseudo-element?, there's a good chance those would be generally useful methods and should probably be unit tested on their own rather than just as part of a single linter ... right?\n\nSeems reasonable to me, but @sds again would be able to give you a more definitive answer.\n. Hi Snook! Thanks for the report. I think this has been discussed in #175. If there is anything to add, please re-open.\n. I believe that this linter was not designed with this Sass feature in mind. Your best bet for the time being, if you want to use this feature of Sass, is to simply disable this linter. We would be open to a pull request that improves compatibility.\nHowever, I am of the opinion that breaking down properties in this way is an anti-pattern that harms readability. I would also be in favor of adding a linter that can be enabled to explicitly disallow it.\n. Merged in 835aa1c55f48ded97865c0d4507e8c3ac0808c1b, thanks!\n. :zap: \n. Thanks for the contribution! This has been merged in 835aa1c55f48ded97865c0d4507e8c3ac0808c1b.\n. Thanks for the code! This has been merged in ce34a0cf0688513103cb50ea594386c65f5df2f2.\n. Thanks for the pull request! This has been merged in cd59cad77e092bb95d389ea7ca5491a9b487336f.\n. Thanks for the pull request! This has been merged in befe11dc0d83b4ac9ec41cfe5733ce128deb26ed.\n. :+1: I think this looks good. Thanks for the code!\nI'm going to wait until @sds has a chance to look at this, which likely won't happen before Monday. In the meantime, it would be great if you could add an entry to the changelog.\nI'm really looking forward to using this feature, so thanks again for working on it!\n. Thanks for the pull request! This has been merged in cff05b9e2213decd336574ad88a87736d859f5ca.\n. If you are using a common definition of \"digit\", where it refers to a number 0-9 and arose from the number of fingers and toes most people have, then you are correct.\nHowever, in a mathematical context, \"digit\" is often used to refer to any \"number\" within the positional numeral system. Since hexadecimal is a base-16 positional numeral system, the digits in this system are 0-9 and A-F, or 0-F.\nMore info:\n- http://en.wikipedia.org/wiki/Radix\n- http://en.wikipedia.org/wiki/Hexadecimal\nThanks for the pull request, but I think I'm going to leave this as-is.\n. Thanks for the report, but this is a new feature that has not been released yet. See: https://github.com/causes/scss-lint/blob/master/CHANGELOG.md#master-unreleased\nHere is the README at 0.30.0: https://github.com/causes/scss-lint/blob/bfd97838464bf5eec4415aa4b2bf1285f13d3913/README.md\n. Thanks for the suggestion. However, according to the documentation, I think this should already be the case:\n\nRule sets should be ordered as follows: @extend declarations, @include declarations without inner @content, properties, @include declarations with inner @content, then nested rule sets.\n\n...\n\nPlacing @include declarations without inner @content before properties serves to group them with @extend declarations and provides the opportunity to overwrite them later in the rule set.\n@includes with inner @content often involve @media rules that rely on the cascade or nested rule sets, which justifies their inclusion after regular properties.\n\nAnd, I think we have specs that verify this behavior as well: https://github.com/causes/scss-lint/blob/4b83c6c248e27f9896efc57621b23855c883510d/spec/scss_lint/linter/declaration_order_spec.rb#L168\nIs there a specific warning that you are seeing?\n. Also, what version of scss-lint are you using?\n. Thanks for the suggestion! This makes sense to me. We'd gladly accept a pull request that adds this feature.\n. :+1: I'm actually surprised we didn't have tests for hyphenated_BEM.\n. Thanks for the report @bartveneman. However, I think this is a duplicate of #175.\n. No worries! Thanks for the report!\n. @thedamon can you post your entire .scss-lint.yml file here? There might be something else weird about it.\n. Thanks for the report! I fixed this in 10f2725eaef871cfe454d06e5f07372ec7818826.\n. Thanks!\n. Thanks!\n. Are the files that you want to lint actually parseable by Sass? If they are not, allowing non-.scss file extensions will not benefit you very much since scss-lint relies on the Sass parser to do its work.\n. Thanks for the report @albertorestifo! It seems to be blowing up on this file: https://github.com/sass/sass-spec/blob/master/spec/libsass-todo-tests/libsass/lists/input.scss\nI'll need some more time to look into this, but in the meantime it would be helpful if you could whittle it down to a small repro case.\nAlso, it looks like you are linting your node_modules directory which contains third-party code that you probably don't really want to be linting. You probably want to add this to your configuration file:\nyaml\nexclude:\n  - 'node_modules/**'\n@sds do you think it would make sense to add this exclusion to the default.yml config?\n. As I mentioned, it seems to be blowing up on this file, which is already public: https://github.com/sass/sass-spec/blob/master/spec/libsass-todo-tests/libsass/lists/input.scss\n. Thanks @giuseppeg for the interest in scss-lint! This makes sense to me, but @sds really has the most context here so it would be best for him to chime in about this. I believe he will be unavailable at least until the weekend.\n. Thanks for the contribution! Merged in 52e69ac7c7766729cff4806502777df026b2e871\n. That sounds great to me in theory, but I don't think it will work with scss-lint because it would require scss-lint to make a full pass on all of your .scss files every time it runs, which is not how it operates.\n. Thanks for the contribution! This has been merged in fd1cc640d5cc517eb2bc79dab19bd34fb1d3aaf1\nI'm not very familiar with the concentric ordering, but might it make sense to put these close to transition?\n. Perhaps @Anahkiasen has an opinion?\n. Addressed by #386\n. Thanks! Merged in 544d39ad33581afd4e5852d41d5eaa8a1b5e4849\n. @sds I just noticed this now when upgrading to the latest scss-lint, but at Brigade we were relying on the BEM option of NameFormat, specifically for some placeholder names, but also in some local variable names. It is nice for these names to match up conceptually with the selector format we are using.\nI'm going to replace it with this regex I just cooked up for now ^[a-z0-9][a-z0-9-]*(?:__[a-z0-9-]*)?$, but it would actually be nice to have the same options here as we do for SelectorFormat. Thoughts?\n. Thanks for the pull request! I merged this in 6c26c8b8cd920ab237873da9a1be60ac013b9776 with some minor fixup in c83c945ff2aa62dfc8affbfbdf250056dfa2524b.\n. Via https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md#propertysortorder:\n\nBy default, will require properties be sorted in alphabetical order, as it's brain dead simple (highlight lines and execute :sort in vim), and it can benefit gzip compression.\n\nYou can also specify a custom order or use one of the preset orders found at https://github.com/causes/scss-lint/tree/master/data/property-sort-orders\nI hope that helps!\n. Thanks for the pull request! This has been merged in eef241de6c815b963982842386629f0ecc1249c4.\n. I think these people might be working on it: https://github.com/Snugug/sass-lint\n- https://github.com/Snugug/sass-lint/issues/2\n- https://github.com/Snugug/sass-lint/issues/3\n. Since we plan on disabling all rules by default (#564) I'm not sure how useful this will be.\n. Hi Flo, thanks for your interest in scss-lint! Unfortunately, this project is deeply tied to the Ruby Sass implementation and we have no plans of working on a node version. There is a little more information on this topic in #397.\nI think it would be great if libsass or a project like it exposed an AST that projects like Ruby Sass and scss-lint could rely on, which would make a node version of scss-lint a lot more practical, but I don't expect that to happen very soon.\n. Thanks for the pull request!\n. > Can you think of other property values for which it might make sense to ignore?\nI added currentColor to the list: https://github.com/brigade/scss-lint/pull/433\n. This is an interesting idea but it feels pretty awkward to configure and brittle. Why not just disable the linter for these special cases with the inline comments?\nscss\n// scss-lint:disable Comment\n/* Copyright */\n// scss-lint:enable Comment\n. @teoljungberg just checking in on the PR for this--have you made any progress?\n. When considering how to architect the plugin system, it is probably worth looking at ESLint for inspiration: https://github.com/eslint/eslint\n. :+1: This makes sense to me! You should probably implement SpaceAfterVariableName a la SpaceAfterPropertyName at the same time.\n. See #282 and #343.\n. Thanks for the pull request! :+1: but it looks like your commits don't pass RuboCop. Will you please fix the problems listed at https://travis-ci.org/brigade/scss-lint/jobs/61327640 ?\n. Thanks for the PR! This was fixed by #469.\n. Thanks!\n. What version of scss-lint are you running? You can find out by running:\nsh\nscss-lint --version\n. > When using a mixin for rendering breakpoints, it makes more sense for it to come after any nested classes.\nWhy do you say that it makes more sense for it to come after nested classes? I believe that things should be ordered in how closely they relate to the root selector. The example you give would be better written as:\n``` scss\n.Example {\n  @include example(yes);\n  width: 100%;\n@include bp(small-up) {\n    @include example(no);\n    width: 50%;\n  }\n.Icon {\n    color: red;\n@include bp(small-up) {\n  color: blue;\n}\n\n}\n}\n``\n. Would you also put other state such as:hover` after nested selectors?\n. Oh yeah, I totally agree. I just want to make sure that we thoroughly understand your problem before we solve it. :)\nRight now the declaration order is built into the linter and is currently\nruby\nDECLARATION_ORDER = [\n  Sass::Tree::ExtendNode,\n  Sass::Tree::MixinNode,\n  Sass::Tree::PropNode,\n  MIXIN_WITH_CONTENT,\n  Sass::Tree::RuleNode,\n]\nWould it satisfactorily solve your problem if that order was configurable?\n. Thanks for the report! In my tests, this seems to be affecting all quoted values that are similar to what you included in your example, not just quoted values in @font-face directives. I'll push a PR for a fix in a minute.\n. Thanks for the PR! This looks good to me, but will you push a new version that addresses the two minor things I mentioned in comments?\n. :+1: \n. I think this is a pretty good start! Here's my feedback:\n- I think the icon should be on the left\n- The text seems unbalanced with the icon. I think maybe either the icon is too small in comparison and/or the text is too bold. Maybe adjust the proportions a little?\n- While I like the intention, I'm not 100% on the red dotted underline. It is pretty subtle, the color doesn't feel right, and it makes me feel like something is wrong. JSCS uses a similar thing, but I think more effectively. I think we should just remove it.\nHere's something I hacked up real quick based off of your idea. Typeface is Avenir Next (Medium and Italic) with a -1% letter spacing for better kerning. I like the italics because I think it implies that this tool can help your team go faster. I shortened and rounded off the sprocket teeth (although I wasn't able to get it just right because I was only working off of your image here, so it is a bit lopsided).\n\nThen I got the idea to combine your dotted line and the cog and came up with this:\n\nWhich I quite like, although we'll need to fix the dashed line so each segment is the same size.\nIf you like one of these, I can try to work up a vector version. Although I don't have a vector program so I'll need to figure that out first, lol. Or, if you happen to have Illustrator or something handy and want to run with this, that sounds good to me too.\nAlso, I think we really need to chat with the Sass folks and make sure that it is okay to use their seal in our logo before we go forward with this concept. Once we agree on a concept, I'd be happy to reach out to them.\n. Great sleuthing on the license. I reached out to Hampton anyway just to make sure we are cool, but I think he is in Japan so it might take him a while to get back to me.\n. Thanks @jina! I didn't have a proper image editing program so I couldn't adjust kerning letter-by-letter, but I was planning on tweaking all of that when I do it in vectors.\n. I think this makes sense. We'd be happy to accept a pull request that adds this functionality.\n. > I think I also just assumed that all linters were enabled by default\nI think it would be a good idea to make this change at some point.\n. Thanks!\n. Duplicate of #38 \n. Thanks!\n. Thanks for helping out though!\n. Yep, looks like a bug to me. Thanks for the report!\n. Thanks for the report. I wasn't able to reproduce this problem with the cases you specified, but I was able to reproduce a problem when using !default and !global flags on variable declarations. I will push a fix for that shortly.\nI may be mistaken, but I believe that ImportantRule will warn on any uses of !important. If you want to use !important then you should disable this rule. What output are you seeing when running scss-lint on the repro cases you posted?\n. @XhmikosR thanks for the link! It would be helpful to be able to see the source that it is breaking on here, however, I'm having a hard time finding the .scss files that are reported there (scss/_variables.scss and scss/bootstrap-grid.scss). Can you point me in the right direction?\n. @XhmikosR great, thanks! I'm pretty sure that the fix I just pushed will fix this problem for you.\n. Also, if you happen to be setting up scss-lint with a git pre-commit hook, you might want to check out overcommit, our extendable Git hook manager. It has scss-lint built in along with a whole bunch of other things that you might find useful. Here's a list: https://github.com/brigade/overcommit#built-in-hooks\nIf you decide to not use overcommit, this is our scss-lint integration that you might find useful: https://github.com/brigade/overcommit/blob/master/lib/overcommit/hook/pre_commit/scss_lint.rb\n. @destefanis I noticed you closed this issue. Were you able to resolve it?\n. @srawlins It looks like you've been doing some good profiling. I think it would be great to add some sort of profiling/benchmark script/task or something that would make it easy for anyone who is interested in improving the performance of this project to hit the ground running. Would you be interested in submitting a pull request for such a thing?\n. I'm a little uncomfortable with a long-running git branch because I worry about things getting out of sync. I wonder if we could add a --profile flag or something that would turn on profiling for that run.\n. Thanks again for the code and tests!\n. :+1: Thanks for the code and tests!\n. :+1: Thanks for the pull request!\n. :+1: great work. Thanks for the code!\n. Oh funny I hadn't noticed this issue but just submitted https://github.com/brigade/scss-lint/pull/640\nI'll update mine to include some webkit and moz things.\n. On that site I am noticing stuff like this:\n\n:-ms-input-placeholder for IE. \n::-ms-input-placeholder for Edge (also supports webkit prefix)\n\nwhich probably means that we need a list of things that can be either : or ::.\n. Or perhaps things that should be both : and ::?\n. Thanks @alexbuijs! I added those in ddc23702f0259.\n. @XhmikosR Yes, I think we will likely cut a patch release soon.\n. And I found a bunch more to add. 8e0122645c0\n. Ack, it looks like this might not entirely do the job, since default reporter still adds color via the rainbow gem. Since the reporters in this project return strings instead of printing them, and since Logger prints things, how do you think we should tackle this @sds?\n. I think I'm just going to add a logger argument to the Reporter initialize and expose some methods for coloring text on the logger.\n. Alright, I just pushed a new version. Let me know what you think!\n. \\o/\n. I think it would be preferable to switch overcommit to the JSON formatter rather than introduce a new one if that isn't too much work--as long as it can maintain good, human-readable output.\n. Seems reasonable. :+1: \n. :+1: \n. Looks like this won't pass until https://github.com/travis-ci/travis-ci/issues/5361 is resolved. In the meantime we could use 2.3.0 instead of 2.3, but I think we may as well just wait.\n. I think the Atom plugin must use the JSON formatter, which includes the column information. The Default formatter, which the syntastic syntax checker uses, seems to not include the column number. Probably the best thing to do would be to include the column number in the Default formatter, and then update the syntastic checker to expect that format.\n@sds what do you think?\n. I still think this is worth doing. Perhaps this can be bundled with 1.0.0?\n. Hi @ntwb, thanks for opening the discussion. Can you be a little more specific about what you are proposing? For instance, which of these things (or is there something els) are you proposing?\n1. Make the rule allow either single colon or double colon syntax\n2. Make the rule require both single colon or double colon syntax\n3. Make the rule require only single colon syntax\n4. Make the rule configurable to support any of the above cases in addition to its current behavior\n. This appears to have already been done by 5f813e8c23a9c7c4c84341773b2c09400e7d96ce\n. Yeah, that's what I meant by https://github.com/adsteel/scss-lint/commit/da3ee26fe2e9f5926ef230ddf3cb55a7aaafccbd#commitcomment-15776473\n. I assume you are referring to composes from CSS modules? You are correct that needs to be first. However, since CSS modules is relatively new, none of SCSS-Lint's rules are set up to handle it properly. We would be open to reviewing a PR that improves compatibility with CSS modules.\n. I am working on an internal tool that knows how to read TAP output. But, any TAP consumer could use this. Here's a list: http://testanything.org/consumers.html\nIt looks like there's one available for Jenkins, for instance. https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin\n. Yeah, Ruby 2.1 looks spurious--or at least unrelated to this change since it is happening when installing gems. I tried retriggering a couple of times, but it keeps happening. /shrug\nThe JRuby one definitely looks related, but I think it is a problem in Sass with this input under JRuby, or potentially a bug in JRuby itself. :( I started by filing a bug in the Sass repo and we'll see what happens from there. https://github.com/sass/sass/issues/1985\n. @sds The Sass people were unable to reproduce the problem. They added a test case for CRLF which passes on JRuby.\nThis makes me wonder if there is some configuration in scss lint or some monkeypatching that we are doing that would lead to this problem. Do you have any ideas?\n. Ah interesting. I assume you did, but did you verify that \\r\\n in the test reproduced the issue without the fix?\n. Also, thanks for digging into this!\n. :+1: \n. Perhaps we should add a note to the documentation that points out this limitation. https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md#selectorformat\n. Updated!\n. Only one small comment from me, otherwise this looks great! Thanks for the PR.\n. Do you think it would be a good idea to make the ignore option be a whitelist instead of a boolean? Or at least use a whitelist internally? I ask because if you are one to sort your properties, you might end up with consecutive duplicates when you don't actually want them but won't be warned. Restricting this to a whitelist seems like a good way to go, to minimize this problem.\n. Oh, I meant using a whitelist in addition to the consecutive check. That way you don't end up allowing something like:\nscss\npadding: 0;\npadding: 5px;\n. Yeah, something like that. I think perhaps it should come with a default list of properties built in that commonly are used with fallbacks, so it might need to use two options--one to turn on/off this behavior and another to customize the list.\n. However, if you are using something like calc and want fallbacks for that, you might need to include a lot of properties in your whitelist. Perhaps the whitelist should look at values instead of properties? But that gets hard if you are using a Sass function...\n. Besides the comment about the code block, this looks good to me. Want to fix that and add a changelog entry?\n. > Have you seen this feature (specifically line-by-line configuration changes) in other projects? How does it behave for those projects?\nESLint has this, which is where I got the idea from.\n\nDo you think such a feature has wide potential for adoption, or is it more of a \"power-user\" feature that benefits a minority of use cases?\n\nGosh, it's really hard to say. \n. Yeah, you are right. The ESLint comment options apply to the whole file, no matter where they appear in the file (with the last one taking precedence), which I think is good enough for my use-case.\n. -f xml isn't working for you because scss-lint does not have an xml formatter. More info on the available formatters: https://github.com/brigade/scss-lint#formatters\n| xargs xml looks like it isn't working because you don't have an xml executable in your path. I'm not really sure what such an executable would do with the scss-lint output, but that definitely won't work unless you find or write xml and add it to somewhere in your path.\n. :+1: \n. Yeah, I thought it was weird.\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin14]\n. Here's the failure:\n```\n1) SCSSLint::Plugins::LinterGem#load when the gem does not exist raises an exception\n   Failure/Error: expect { subject.load }.to raise_error Exceptions::PluginGemLoadError\n expected SCSSLint::Exceptions::PluginGemLoadError, got #<RSpec::Mocks::MockExpectationError: #<File (class)> received :exist? with unexpected arguments\n   expected: (\"/gem_dir/.scss-lint.yml\")\n        got: (\"/Users/joe/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/extensions/x86_64-darwin-14/2.3.0-static/ffi-1.9.10/gem.build_complete\")\n  Please stub a default value first if message might be received with other args as well.\n > with backtrace:\n   # ./lib/scss_lint/plugins/linter_gem.rb:12:in `load'\n   # ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in `block (5 levels) in <module:SCSSLint>'\n   # ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in `block (4 levels) in <module:SCSSLint>'\n\n# ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in block (4 levels) in <module:SCSSLint>'\n```\n. So it looks like theffigem is doing something here.\n. Which looks like it might be a dependency of a dependency of a dependency of the travis gem. Do you get this if you install the travis gem?\n. I think it might be because I was runningrspecwithoutbundle exec`. Are you able to reproduce that way?\nFWIW, here's what I get on a different machine:\n```\n1) SCSSLint::Plugins::LinterGem#load when the gem does not exist raises an exception\n   Failure/Error: expect { subject.load }.to raise_error Exceptions::PluginGemLoadError\n expected SCSSLint::Exceptions::PluginGemLoadError, got #<RSpec::Mocks::MockExpectationError: #<File (class)> received :exist? with unexpected arguments\n   expected: (\"/gem_dir/.scss-lint.yml\")\n        got: (\"/Users/joe_lencioni/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/extensions/x86_64-darwin-14/2.3.0-static/bcrypt-3.1.9/gem.build_complete\")\n  Please stub a default value first if message might be received with other args as well.\n > with backtrace:\n   # ./lib/scss_lint/plugins/linter_gem.rb:12:in `load'\n   # ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in `block (5 levels) in <module:SCSSLint>'\n   # ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in `block (4 levels) in <module:SCSSLint>'\n\n# ./spec/scss_lint/plugins/linter_gem_spec.rb:18:in `block (4 levels) in '\n```\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin14]\n. Yeah, I think it is fine to not support running without bundle exec. Closing this out.\n. \ud83d\udc4d \n. I haven't seen a proposal for that. Feel free to open an issue!\n. Also yeah, this is definitely minor. My intention is to prevent people from having to comment about this in code review and to prevent unnecessary clutter from the stylesheet--both of which contribute to reviewers focusing on less important aspects of the code.\n. > Not every linter rule has to be enabled by default though, right?\nThat's right. And the plan for 1.0.0 is to disable all by default. #564 \n. What do you think about calling it disallowed_value: serif instead of value: serif? I don't have strong feelings about it, but I think that disallowed_value might be a little clearer.\nAlternatively, what about combining property and value like:\nyaml\nDisallowedValues:\n    enabled: true\n    blacklist:\n      - style: visibility: visible\n        reason: Use \"visibility: inherit\" instead, to avoid accidentally overriding \"visibility: hidden.\"\n. @sds I have tested this locally and it is working correctly now. Any chance we can get a patch release out today?\n. Yeah, I think you are right. I think I trace through the execution path more closely and see if I can find a missing link. Thanks!\n. @modkaffes I think I fixed it but it was too long ago now I don't remember what I did. Sorry!. :+1: want to submit a PR?\n. It depends heavily on the Sass parser internals, which is Ruby, so it would be difficult. You might be interested in one of these projects:\n- https://github.com/sasstools/sass-lint\n- https://github.com/stylelint/stylelint\n. I haven't worked with them before, but sass-lint is a linter for Sass and SCSS whereas stylelint is a linter for PostCSS, which can be configured to look like SCSS or other things. If I was starting a new project today, I'd likely explore PostCSS first.\n. Thanks!\n. Thanks!\n. > @lencioni It looks like you originally added this linter in in 1fe3d5f. Did you have any thoughts on this issue?\nNo, I don't think it matters much either way. I think the 0 behavior is likely less surprising for developers, but what matters most is consistency.\n. I think people might also be looking for the word \"rules\" instead of \"linters\"--perhaps it would help if we changed the terminology used here?\n. The trouble with color keywords in real world applications is that there are not many of them, so they are unlikely to match up with how you want things to look most of the time. Given that you likely won't be using a color keyword for every color, this rule intends to enforce consistency in how colors are used in an application by forbidding color keywords altogether. This is particularly effective when used alongside the ColorVariable rule, which requires that all colors are variables and that hex colors are only used when being assigned to variables.\nI think that there are people who find this rule useful, so I don't think it should be removed. As far as disabling it by default, I agree and believe that we should disable all rules by default (see #564).\n. Thanks!\n. Thanks!\n. Can you please link to some documentation or code somewhere that shows these?\n. Thanks for the links!\n. Thanks! \ud83c\udf7b \n. We had a good run here. Thanks for all of your hard work on this project @sds (and other contributors)! I know that SCSS-Lint has saved me and the teams I've been on a lot of time and effort.\n. Ah, I guess that's why my grepping for visit_children didn't really turn up much.\n. Ah, that could be. I'll update it.\n. Done!\n. Sounds like a plan\n. https://github.com/brigade/scss-lint/commit/8106117625a761962d3c5caba56644d442b419ae\n. Looks like CI failed because of these two blank lines. Will you remove them?\n. Since you are adding sass specific functions and all we previously had was CSS functions, it might be nice to use a separate set for these to keep things clear.\n. ",
    "ghost": "It definitely is in variable names; don't know about mix-ins though.\n. This ain't necessarily a bug; it turns out our code depended on the style being applied to the element with the id only when it appears nested inside a particular context: \nhttps://github.com/causes/causes/commit/2d3dca9cccd936c9f2c50932d62c0bebfb48984e\nI do think it's a smell in the code being linted, but it's probably not a bug or a missing feature in scss-lint.\n. As scss-lint is an opinionated tool, I think we should pick one recommended comment style and support that. (Part of the benefit is that the linter makes things look the same everywhere.) My vote: //.\n. +1\n. My coworker Andy and I just submitted a PR for this called UseVariablesForProperties that lets you specify the props for which you want to use variables. This way, you can enforce variables for 'color', 'font', etc...\n. Alright, Travis is happy and I think I've addressed your concerns. Take a look?\nThanks for this awesome tool and taking our PRs!\n. ",
    "awallace": "+1 to //\n. ",
    "vballdemigod": "Works great again!  Thanks for the super speedy response.\nOn 3/20/2013 10:19 AM, Aiden Scandella wrote:\n\nTurned out to be a simple fix. I've just cut version 0.6.5 of the gem, \nwhich should work. Let me know if you're still having issues.\nCheers,\nAiden\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/causes/scss-lint/issues/11#issuecomment-15190014.\n. \n",
    "lifeiscontent": "@sds cool, thanks for the feedback. I guess I'll start doing the same then :)\n. Ah, yes except I'm pretty sure this happens for both prop/value not just property.\u00a0\n\u2014\nSent from Mailbox for iPhone\nOn Sat, May 11, 2013 at 8:22 AM, Joe Lencioni notifications@github.com\nwrote:\n\nIs this a duplicate of Issue #5?\nReply to this email directly or view it on GitHub:\nhttps://github.com/causes/scss-lint/issues/15#issuecomment-17761730\n. never mind, I'm just tired. and forgot about capitalization so... sorry to waste your time.\n\n-Aaron\n. I totally agree with you there,\nsome parts of our site us the -ms-filter and filter properties though, to support specific things in IE.\n. @zakiwarfel prefixfree doesn't isn't related in this context, I'm talking about the very specific IE filter properties.\n. @sds that isn't the same thing. that is for supporting the new CSS3 filter features.\n. @sds I am really interested in using scss-lint full time, for all of my code, and I think the reason I've been hitting so many edge cases is because I truly use almost, if not all the features scss allows.\nI really like what you guys are doing, and I will continue to submit bug reports as they come across.\nyou guys have been very awesome with response time as well. so :beers: for you guys.\n. @sds this is exactly the solution I would invision, great call :+1: \n. @sectioneight thanks for the heads up. :+1: \n. @sds ah, it might be overcommit. I'll check later tomorrow.\nThanks!\n. @lencioni this might be a good starting point.\nhttp://morrow.github.io/CSS-Reference/\nI would suggest maybe running a linter against maybe 20+ sites in the wild and collecting the data from that.\nthen the linter could throw errors saying \"unknown word: diplay\" or whatever it may or may not know about already.\n. Cool, thanks Shane for the info on StringQuotes.\nI'll spend more time on my support requests going forward. :+1: \n. ",
    "neagle": "Hm. I just upgraded my ruby version using rvm and still seem to get the same errors.\nruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-linux]\n. Mysteriously, this started working. But after further research, this is clearly a version issue (http://stackoverflow.com/questions/8014090/rails-odd-number-list-for-hash), and not anything that the authors of scss-lint need to worry about. (Though maybe a note about the required Ruby version in the Readme would be useful?)\nCheers!\n. That's lovely! Thanks for this and for the great tool.\n. ",
    "zakiwarfel": "There's also this \nhttp://leaverou.github.io/prefixfree/\n\nTodd Zaki Warfel\nzakiwarfel@me.com\n(415) 379-0045\nOn Jun 6, 2013, at 5:34 PM, Shane da Silva notifications@github.com wrote:\n\nPerhaps I'm misunderstanding (or just lacking context), but is there a strong reason you can't use Compass' cross-browser filter implementation? http://compass-style.org/reference/compass/css3/filter/\nWe don't make significant use of that particular mixin, so I'm not sure of valid situations where you really need to manually write vendor-prefixed properties, but in general it feels like you should always use a Compass mixin where possible.\nSorry if I seem to be hammering the same point, I just want to make sure there's a real need here. Thanks for keeping the dialog going.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "kaelig": ":+1: \n. Thanks!\n. We're really desperate for this feature to land, should we consider a Bounty on https://www.bountysource.com/?\nIf so\u2026\nhttps://www.bountysource.com/issues/1890349-allow-linters-to-be-disabled-enabled-with-inline-code-comments\n. If we could enforce the long (6 chars) hexadecimal form it would be great. At the Guardian we like the long form because it makes the codebase more searchable and consistent (if my memory serves me well, Sass will compile to the shortest form anyway).\nCould that be an option in the linter?\n. Awesome, I did not have a look at the code and just read issue #148.\n. So it looks like the choices are:\n1. adding quotes around the keywords (eg, for white: @include setColorUseCase(badge, (border: 'white', background: 'grey-tint1')); and 'white': #ffffff)\n2. disabling the linter\nGood to know anyway!\n. Thanks very much, you're right!\n. @sds looks like this was actually never implemented, unless it was removed at some point?\n. @sds yes, but SpaceAfterVariableColon doesn't exist.\n. Cheers!\n. :+1: \n. ",
    "mikesherov": "This is about as comprehensive as it gets: http://www.chromestatus.com/metrics/css/popularity\n. What's nice about this list too is that this is the list blink / webkit use to determine when to cut or add support. We can use this information to also make a list of \"rare\" selectors, and a linter that warns against their usage...\n. @sds, great! Glad to see this commit. I'll run this on my codebase and report any missing properties I find. Thanks again!\n. Good catch @wincent. I'll correct those shortly. I suppose I should also note that this linter will give false positives on multi line parens. I'll fix that too. \n. @wincent updated. Thanks for reviewing!\n. @wincent I've updated the PR with the comments from gerrit code review.\n. Thanks @sds! Would it be possible to cut a new version once this lands? I'd like to able to use a released version on my codebase. \n. @sds true. I felt dirty using a regex even to begin with. I can update this to deal specific with FuncCalls, which should take care of it. If I find some time, I might try my hand at that.\n. 3.3.0 is out now. Can we get some love on this issue?\n. @lencioni https://github.com/causes/scss-lint/commit/fd01fd2#diff-af3679e518139ba5e8ba751b04df0c93R26 here it is.\n. FWIW, Behance's SCSS style guide specifies that mixins should be listed before other properties. Not to complicate this feature request further, but would be nice to have a separate option or rule for how mixins should be sorted: ignore, alpha, first, last.\n. Just for some context here... -moz-osx isn't really a vendor prefix. The property is called osx-font-smoothing to denote it only works in osx. FF has no plans to further use -moz-osx. This fix just happens to work, but wouldn't the provided test pass without this fix? Also, it will give a false negative for:\np {\n   -moz-real-prop: 1px;\n   -moz-osx-real-prop: 1px;\n   real-prop: 1px;\n}\n. @geniou, good point about where it's located in the property list. I wasn't thinking about this right. This fix is still fine and necessary.\nHowever, there still are no plans for firefox to consider expanding -moz-osx, nor even expanding -moz.\n. @sds, I can't tackle it at the moment, otherwise this would've been the PR already. If you can't get to it in the next week or so, I'll probably tackle it then.\n. Thanks @sds!\n. ",
    "wincent": "Nice fine, @mikesherov... 422 properties.\n. That error message is a little weird; the \"mix\" stuff in the error output isn't from the source code. I suspect some Ruby version shenanigans, perhaps?\n. Thanks for the report @asottile. We should actually update the gemspec to avoid this kind of surprise.\nspec.required_ruby_version = '>= 1.9.3'\nor something like that.\n. Pushed that change here:\nhttps://gerrit.causes.com/27597\n. This does look like the wrong lint, as it's evidently not a hex color, but I would expect to see a lint for that first line, as scss-lint is supposed to warn about camelCase or under_score selectors.\n. It should do, @matt-d-rat. We use Sass and Compass at @causes with scss-lint with no problems. If you do try it out and find any issues, let us know.\n. Nice.\n. Thanks @mikesherov. Looks good to me, other than what look to be a couple of copy-paste errors (cosmetic only) in the specs.\n. Thanks @mikesherov. I've pushed this into our code review system here:\nhttps://gerrit.causes.com/32214\nfor another pair of eyeballs to look at. I think it looks ready to merge, but it would be good for @sds to give it a quick look over as well.\n. Thanks @mikesherov. I updated the change on Gerrit to reflect your changes.\n. Nice. Thanks, @mikesherov. I'll push this into our Gerrit instance (although I will edit the subject line to fit on one line).\n. Up in Gerrit here:\nhttps://gerrit.causes.com/32216\n. > Are you looking to create a linter of your own?\nNah. ESLint has all my bases covered right now. I was just driving by and the thought occurred to me.\n. ",
    "asottile": "Ah I see in the description that this is intentional -- I wonder why gem allowed me to install it against 1.8.7 then...\n. Try installing openssl-dev?\n. I've updated my commits with your suggestions :)\nAdmittedly I'm not a ruby programmer (these commits and the last PR have been my first time writing ruby) so the suggestions are very welcome!\nThanks,\nAnthony\n. I've updated my branch addressing your comments :)\n. Travis build shows error.  Presumably due to: https://github.com/travis-ci/travis-ci/issues/2220 but other than that the build passes.\n. Ah dang, I forgot to update the README.  If you don't get to it before me, I'll do it tonight.\n. +1 custom repository-specific linters would be useful\n. I changed one of the tests to pass (6 -> 2) as it now points at the start of the line instead of the end of the line.\n. I think I've figured this one out, I'll make a PR for it\n. Actually never mind, I'm kinda lost as to what is causing this.  What I have noticed is the variable is actually a list of (mixed) strings and lists.\n. <3 thanks!\n. Any idea when the next planned release is?\n. Thanks!\n. ",
    "nelson6e65": "There is not a version compatible with ruby 1.8?\nruby 1.8.7 (2011-06-30 patchlevel 352) [i686-linux]\nI'm using Ubuntu (wich repositories always are outdated ._.)\nAnd I'm trying to compile ruby, but... I'm getting errors in each versions I try (not found solution yet). :disappointed: \nmake[2]: *** [ossl_ssl.o] Error 1\nmake[2]: se sale del directorio \u00ab/usr/local/src/ruby-2.1.3/ext/openssl\u00bb\nmake[1]: *** [ext/openssl/all] Error 2\nmake[1]: se sale del directorio \u00ab/usr/local/src/ruby-2.1.3\u00bb\nmake: *** [build-ext] Error 2\n!!! Compiling ruby 2.1.3 failed!\n. Yes, I'm using ruby-install. \nBut I'll try RVM.\n. $ openssl version\nOpenSSL 1.0.2d 9 Jul 2015\n```\n$ sudo apt-get update\n$ sudo apt-get install openssl-dev\nLeyendo lista de paquetes... Hecho\nCreando \u00e1rbol de dependencias     \nLeyendo la informaci\u00f3n de estado... Hecho\nE: No se ha podido localizar el paquete openssl-dev\n```\n(Sorry, my sistem is in spanish, but aparently openssl-dev package is not found).\nAlso...\n$ sudo apt-get install libssl-dev\nlibssl-dev ya est\u00e1 en su versi\u00f3n m\u00e1s reciente.\nlibssl-dev is already installed.\nRVM\nAlso, \\curl -sSL https://get.rvm.io | bash -s stable --ruby thows errors:\nError running 'requirements_debian_update_system ruby-2.2.1'\nRequirements installation failed with status: 100.\nSo, I'm unable to upgrade ruby, I need compatible lint for 1.8. :disappointed_relieved: \n. ",
    "srawlins": "I don't think anyone recommends using the system's Ruby on Linux or OS X or any other OS, nor compiling Ruby by source. Try rbenv or RVM.\n. Hi @jaepage, first of all you might get more response by opening a new bug or commenting on an open bug.\nSecondly, what is the integration between scss-lint and Sublime that draws the \"gutter light\"? I'm not aware of one. Does the integration respect .scss-lint.yml? What does the tool think of as \"the current directory\" in order to find .scss-lint.yml? Or are you using a .scss-lint.yml in your home directory?. To remove a layer of complexity, can you just run the scss-lint command line tool and verify that it is still linting your *.css files with the Comment linter?. I can take this one. There should be spaces around infix operators in:\n- properties (eg margin: 1px + 1px)\n- mixin inclusions (eg @include my-mixin(1px + 1px))\n- variable declarations (eg $x = 1px + 1px)\n- control flow expressions (@if, @for, @while, @each) (eg @if $x == 7)\nThis linter should not lint:\n- non-evaluated operations, like :nth-child(3n+1) (selectors like this are the only cases I can think of)\n- non-operations, like font: 10px/8px (see Sass's Division and / section)\n- stringed operators, like font: '1+1'\nThis linter should also lint interpolated expressions (eg content: \"I ate #{5 + 10} pies!\"), but this might be really hard to do. I'll try.\nI think there should be a configuration variable, spaces, which dictates the number of preferred spaces on each side of an operator, defaulting to 1. If this is overly complicated, it could instead accept one_space or no_space.\nDid I miss anything?\n. Thanks for the commenst, @lencioni.\nSome companies might have a policy of placing a copyright notice at the top of every file, so the inline comment commands would not scale.\nWhat do you think would be brittle about this idea? I can see the list idea maybe being brittle, and definitely awkward. I considered allowing regexen but that's even more extreme: just way too awkward.\nI think the example I have above is very concise, obvious as to its intention, and not brittle, at least with the example word \"Copyright.\" I can see it maybe being brittle with... different words there? Maybe... I dunno, let me know what you think.\n. Hrm, so the regex idea presents one problem in that the CommentNode that Sass provides us has the entire syntax of the comment as the value of the node. So:\nscss\n/*\n * Copyright someone\n */\na { color: red; }\ncontains a CommentNode with a value of \"/*\\n * Copyright someone\\n */\", which would not match '^\\s*Copyright. And I don't think there is a clean way to strip the comment \"text\" from it's syntax. For example, if I strip all asterisks at the beginning of a line, then I would strip these asterisks, unintentionally:\n``` scss\n/*\nComment paragraph, and a list:\n\nitem 1\nitem 2\n*/\n```\n\nSo maybe we should not encourage use of anchors (^, \\A, etc.).\n. Ah, good idea. I think I like the first suggestion. So in addition to one_space, no_space, at_least_one_space, and aligned, we could add:\nyaml\nlinters:\n  SpaceAfterPropertyColon:\n    style: one_space_or_newline\n. This would require new options to the scss-lint script. Examples of current options like this include:\n- GNU diff has --brief to \"only report when files differ\" and --report-identical-files to \"report when two files are the same.\"\n- GNU grep has --files-without-match and --files-with-matches.\nPerhaps scss-lint could have options --files-without-lint and --files-with-lint?\n. Or actually... it's just a reporter. I've opened #527 which gives reporters access to the list of files that were linted.\n. It's that #== is not defined on ImportNode. It's defined on Node:\nruby\ndef ==(other)\n  self.class == other.class && other.children == children\nend\nso ImportNodes are always considered equal :( so the previous_node() calculation comes out wrong.\n. Just so I don't mislead anyone: I would still be happy to write this, but it's not going to happen soon. I'm on vacation through the end of June.\n. IMHO, SpaceBetweenParens looks like it should be re-implemented to only look at values, similar to SpaceAfterComma, or TrailingZero. The blanket regex implementation is a little scary.\n. Does PropertyUnits not already have this functionality? I'm looking at the\nscss\n    border: ['px'] # Only pixels\nline here\n. Hi @sds. This shouldn't be the case; I added a test case though to track it.\n. Great catch, @sds! That example kind of revealed that my implementation was garbage.\nI totally re-implemented SpaceAroundOperator, and its shorter, cleaner, and restricts itself to the operators that Sass has identified. I added one more test as well with newlines.\n. Phhhhhhhhh another good catch, @sds ... This one is tough. I dunno why Sass doesn't parse the parens... differently. It's tougher because there could be more parens and whitespace, like top: (($padding   ) ) * -1. Hrm... I'll play with this.\n. OK the fix wasn't as bad as I thought. This is ready again.\nThe fix assumes that this parentheses is a weird special case of only the right parenthesis character, ), shifting them off the operand, onto the left operator, before evaluating whether there is lint.\n. Thanks for testing, @sds , it looks like this always happens when the left operator is an operation itself (as opposed to a simple value). I've fixed, and added more examples.\n. Oops, looks like one spec now fails on Sass 3.4.16 (Travis), but this spec does not fail for me on Sass 3.4.15. From Sass's CHANGELOG:\n\nParse a minus operator with no surrounding whitespace (e.g. 20px-10px) the same regardless of whether it's being used in a static property.\n\nSo newly in 3.4.16, margin: 2em-1em; has an operation in it. Unfortunately this should be a lint in 3.4.16, and should not be a lint <= 3.4.15, so I've just commented out the example for now.\n. PropertyUnits can enforce unitless line heights (see here for the exact example of line-height).\nI guess the suggestion is to change the default config of PropertyUnits?\n. So that its not a breaking change for everyone, it could be implemented as a feature that requires cascade: true at the top-level of a .scss-lint.yaml, in order to merge with a deeper one.\n. Not a bad idea. Consider Bootstrap's button styles which can be applied to <a>, <button>, and <input>, and there might be reasons to choose <a> in some cases and <input> in others... (is that true?), and then style a.btn differently from input.btn.\nSame with other elements that play similar semantic roles but maybe should be styled differently, like <th> and <td>, or <p>, <li>, and <blockquote>. This is all pretty handwavey... I don't have any great examples.\n. Yeah, I'm thinking the opportunity to drift is pretty low.\nI think I also just assumed that all linters were enabled by default, since there is no mention that this is not the case. (The README's Linters heading writes that scss-lint has \"opinionated defaults\", but that's it.) And I was surprised when this was not the case.\n(Except, of course, the Compass linters; \"They are disabled by default\")\nI'll open a PR adding a few lines to linters/README.md, and see if it makes it noisy.\n. Is your use case essentially that you sometimes use 0, and sometimes use 1, but more than 1 empty line is bad, so you want to configure EmptyLineBetweenBlocks to allow 0-or-1 empty lines? I think that max_lines doesn't immediately convey a meaning, like \"oh, sometimes you would want to allow up to 3, but not 4?\"\nI'm trying to think of a config parameter that's like \"meh, allow 0 or 1, cuz we mix it up, but 2 empty lines must be a typo.\"\n. I think this was fixed in 0.40.0, specifically in 04f22b2faa5e65ce1a10916d298d8a63bf3b4121.\n. For reference, EmptyLineBetweenBlocks currently appears to expect spaces around:\n- @mixin declarations\n- @include declarations\n- rule declarations\n- @function declarations\nand not expect spaces around:\n- @media declarations\n- @if declarations\n- @at-root declarations\n- @for declarations\n- @each declarations\n- @while declarations\nI would argue that EmptyLineBetweenBlocks should lint on @media and @at-root out of the box. But maybe control flow directives are special. So the configuration option special_block_types (?) could take the value :control_directives. I can't really identify better categorizations...\n. Updated regex. Thanks.\n. Wow, fun catch. It appears that Sass gives very wrong left and right operand source ranges within interpolated strings. I think I can send a fix.\n. Fascinating.\nI took your input, and ran scss-lint through ruby-prof. Gist\n| @ifs | Total time | #extract_command method calls | #extract_command total |\n| --- | --- | --- | --- |\n| 7 | 9.8 s | 50_000 | 0.43 s |\n| 8 | 20.3 s | 99_000 | 0.93 s |\n| 9 | 54.8 s | 197_000 | 1.63 s |\n| 10 | 169.5 s | 394_000 | 3.90 s |\nLooks like use of ControlCommentProcessor is doubling with each additional @if statement.\n. This one could be tough to fix. I think we're getting bad data from Sass. Using the test case above, and printing out every node in visit_sequence, I see that each node is supposedly on line 1!\n$ bundle exec bin/scss-lint issue-565.scss\nSass::Selector::Sequence [a] on line: 1\nSass::Selector::Sequence [\"\\n\", b] on line: 1\nSass::Selector::Sequence [\"\\n\", c] on line: 1\nSass::Selector::Sequence [\"\\n\", d] on line: 1\nSass::Selector::Sequence [\"\\n\", e, \"\\n\", f] on line: 1\nSass::Selector::Sequence [\"\\n\", g] on line: 1\nissue-565.scss:2 [W] SingleLinePerSelector: Each selector in a comma sequence should be on its own single line\n:frowning: \n. Not good. We're getting a badsource_range (3:25 to 3:36) for the Funcall node. Note that that range doesn't exist. I can't tell if an scss-lint monkey patch has broken this range, or Sass (I suspect Sass).\nWith this patch:\n``` diff\n$ git diff\ndiff --git i/lib/scss_lint/linter/space_between_parens.rb w/lib/scss_lint/linter/space_between_parens.rb\nindex 3a47173..db0beeb 100644\n--- i/lib/scss_lint/linter/space_between_parens.rb\n+++ w/lib/scss_lint/linter/space_between_parens.rb\n@@ -6,6 +6,10 @@ module SCSSLint\n     include LinterRegistry\n def check_node(node)\n\n\nputs \"NODE:     #{node}\"\nputs \"INSPECT: #{node.inspect}\"\nputs \"SOURCE:  #{source_from_range(node.source_range)}\"\nputs \"AT:      #{node.source_range.inspect}\"\n       check(node, source_from_range(node.source_range))\n       yield\n     end\n```\n\non your last test:\n```\n$ cat issue-568-2.scss\n$color: rebeccapurple;\n/ #{hue($color)} /\n```\nI see the following:\n$ bundle exec bin/scss-lint issue-568-2.scss\nNODE:     #<Sass::Script::Tree::Funcall:0x007fbc42e85070>\nINSPECT: `hue($color)`\nSOURCE:  ``\nAT:      (3:25 to 3:36 in issue-568-2.scss)\nSCSSLint::Linter::SpaceBetweenParens raised unexpected error linting file issue-568-2.scss: 'undefined method `count' for nil:NilClass'\n/Users/srawlins/code/scss-lint/lib/scss_lint/linter/space_between_parens.rb:109:in `trim_right_paren'\n/Users/srawlins/code/scss-lint/lib/scss_lint/linter/space_between_parens.rb:42:in `check'\n/Users/srawlins/code/scss-lint/lib/scss_lint/linter/space_between_parens.rb:13:in `check_node'\n...\nI'm using sass 3.4.17 (reporter is using 3.4.18)\n. OK this is supremely annoying. We can't even really use \\b or smoething similar, because you can do arithmetic on Hex colors, even without whitespace:\n$ bundle exec sass --scss\np {\n  color: #010203+#040506;\n}\np {\n  color: #050709; }\n$ bundle exec sass --scss\np {\n  color: #010203-#040506;\n}\np {\n  color: black; }\n$ bundle exec sass --scss\np {\n  color: #000000+red;\n}\np {\n  color: red; }\nHrm. So #ab-overlay could totally look like it was supposed to be a color.\n. That last comment was hasty: it turns out that Sass will blow up if you try to add two things that aren't proper hex, like #1234+#5678. So we don't have to worry about those cases.\n. I'm into it. Do you think the procedure should then be: if there is a newline on either side of an operator (anywhere amongst whitespace characters), then we don't lint that operator any further, and let anything through?\nOr be a little more strict?\n. I agree, it's kind of a weird style. I think people might split it that way if they're coming from Google's Java Style Guide, which suggests breaking on non-assignment symbols before the symbol.\n. @sds I agree this is a bug. But is this feasible to lint on? If I add a puts statement showing the source for the RuleNode, I get the following:\ncat issue-614.scss\n.foo {\n  font-size: 18px;\n  }\n$ bundle exec bin/scss-lint issue-614.scss\nNODE: Sass::Tree::RuleNode '.foo {'\nNODE: Sass::Tree::PropNode 'font-size: 18px;'\nLooks like we basically just get the source for the selectors of a RuleNode??? :frowning: \n. @sds Here's the code in question:\n``` ruby\ndef check_arbitrary_indent(node, actual_indent)\n  return if check_root_ruleset_indent(node, actual_indent)\nif @indent == 0\n    unless node.is_a?(Sass::Tree::RuleNode) || actual_indent == 0\n      add_lint(node.line, lint_message(0, actual_indent))\n      return true\n    end\n    # ...\n```\nIt seems like the general fix would just be to never lint if @indent == 0? Or do we want a long list of valid nodes in that unless condition? Variables, IfNodes, ForNodes, etc?\n. TL;DR This is not unusual in my experience. Try master. And try disabling linters from the list below if you really need it faster.\nI've been working on speeding scss-lint up (#577, #579, #580, #584, #622, #623, #624), but I haven't really seen any huge wins. What version of scss-lint are you running? My last 3 patches have not been released yet, so you might try again on the master branch. I wouldn't be surprised if a ~6.7s process now takes ~5s.\nIf you're interested in boosting performance, I'd recommend tmm1's stackprof, a truly beautiful tool, for Ruby 2.1+. You can call StackProf.run(mode: :cpu, out: 'tmp/stackprof.dump') do in Runner#run or CLI#scan_for_lints.\nI think I found that typically, Sass parsing (not under scss-lint's control) seems to take ~50% of the time, so right there, you're not going to make the the scss-lint process 10x faster, ever (on a single file).\nWe discuss in #576 the idea of parallelizing scss-lint. I've got a patch in the works that seems to reduce time linting by like ~15%. It's not great. It's also a very very ugly looking patch, so I haven't posted it yet. (I also discovered that something somewhere is not thread-safe: I could not parallelize all of the Sass-parsing, and scss-linting activities across all individual linters and across all files. I can't recall the details...)\nHonestly when talking about ~7s, I think a lot goes into Ruby's VM startup time.\nI also timed the individual linters, linting over a copy of Bootstrap 4's SCSS files. Here's the slowest 10 linters (before the patches in #622, #623, #624). Times in seconds:\nSCSSLint::Linter::FinalNewline: 0.362\n              SCSSLint::Linter::UrlFormat: 0.363\n             SCSSLint::Linter::NameFormat: 0.389\n      SCSSLint::Linter::PropertySortOrder: 0.396\n         SCSSLint::Linter::SelectorFormat: 0.397\n          SCSSLint::Linter::SelectorDepth: 0.408\n     SCSSLint::Linter::SpaceBetweenParens: 0.419\n SCSSLint::Linter::EmptyLineBetweenBlocks: 0.453\nSCSSLint::Linter::SpaceAfterPropertyColon: 0.462\n            SCSSLint::Linter::Indentation: 1.045\nSo you might consider disabling one or more of these, if the linting time is really bogging you down.\n. Yeah, I'd be into that. Unfortunately it means modifying code to run something like stackprof, so maybe we can have a long-running git branch named performance or something? And maybe a PERFORMANCE.md or similar document in the master and performance branches with steps on how to profile? I'd be interested in doing this.\n. Hmm, yeah. Might be able to do that. I'm not big on adding a dependency in the gemspec when there are currently only two dependencies.\n. Eek good call @XhmikosR , I took my list from MDN's All pseudo-elements. Could you open a bug?\n. You've got to help us out, @nim23: what is the scss content that led to this error?\n. I wouldn't say it's a confusing message... however I'd prefer the Unix Philosophy's Rule of Silence:\n\nRule of Silence: When a program has nothing surprising to say, it should say nothing.\n\nAs examples, ls, cd, grep, etc. follow this philosophy.\n. I'm on it. More comprehensive PR soon.\n. Oops thanks @lencioni . One more site that I found that included those is Caniuse: http://caniuse.com/#search=pseudo-element\n. @lencioni hmm. I think that the :-and-:: features are essentially relics. A tiny window where browsers were still sorting out what a pseudo-element is. I don't think its worth it to add support for \"both\" syntaxes.\nThat being said, IE 11 still has significant market share, so its presumably relevant for the next many months... shrugs\n. @lstanard, you should open a separate bug.\n. Good call. This would probably be too difficult to specify; too complicated.\n. I like this idea. However, to make it a little more performant, I think we could couple it with a subdirectory listing. So something like:\nyaml\npreprocess_command: strip-meta-stuff\npreprocess_files:\n    'some/folder/**'\n    'another/directory/**/*.scss'\n(Using the same glob syntax as scss_files and exclude.) This helps performance so that only a select few files are processed. The only shortcoming is you cant specify a preprocessor for directory A and another preprocessor for directory B. If a super user needs this, they just get to write a routing preprocessor.\nI'll send a PR.\n. Thanks so much for releasing this in 0.47.0 so fast!\n. Oh, my specific motivation here is for defining multiple transition properties, as the duration and timing function gets pretty long for each property when using variables:\nscss\na {\n  transition: opacity $some-speed $some-timing-function;\n  transition: background-color $some-other-speed $some-other-timing-function;\n}\n. I'd be happy to change it to that. Or maybe we could have both features.\nI like the consecutive lines solution because I think it has less chance of accidentally allowing a duplicate than the whitelist solution. The whitelist solution can definitely accidentally allow a duplicate of background where the duplicate is unintentional.\nThe consecutive solution, however, only allows duplicates by accident if the humans also missed a duplicate consecutive property.\n. Oh I see. So you would specify something like:\nignore_consecutive:\n    - background\n    - transition\nI like this idea.\n. Awesome, pushed and squashed. I didn't look into the values whitelist. Too complicated :grinning: \n. Thanks! Done\n. Sorry, #717 got borked when I was trying to squash commits. This should be ready to go.\n. I don't understand this. Why would this depend on the \"first rule in the file?\"  i.e.\n``` scss\na { position: relative; }\np { position: absolute; }\n```\n. I like this. I think it could be a generic DisallowedValues linter or something:\nyaml\nDisallowedValues:\n    enabled: true\n    blacklist:\n      - property: visibility\n        value: visible\n        reason: Use \"visibility: inherit\" instead, to avoid accidentally overriding \"visibility: hidden.\"\n      - property: font-family\n        value: serif\n        reason: We don't use serif.\nThe YAML is getting a little deep... but I think that list-of-dictionaries syntax works...\n. This is a fun and useful idea. I like it.\nOn Mar 11, 2016 2:10 PM, \"Jon Rohan\" notifications@github.com wrote:\n\nI think it would be great if the linter threw an error if I was disabling\na linter inline via // scss-lint:disable and I didn't need to.\nThis would allow for removal of unnecessary disabled lines. Preventing\nfuture bad code from getting in.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brigade/scss-lint/issues/760.\n. Sooo I looked into implementing this, but it's tricky.\n- I don't think this can be a proper linter (perhaps why you titled this \"Meta DisabledLinterNotUsed\"). It would have to be very \"aware\" of how all the linters are configured, or it would operate out of the normal linter flow, instead somehow working right into SCSSLint::Linter#run. It would be a can of worms then to allow this meta linter to be disabled/enabled, and configured. Yuck.\n- Then I thought this could be a Reporter, but it would require pretty significant infra changes, again in Linter#run, and in Reporter.\n\nAt that point, all we're left with is a top-level config parameter. Something like:\nyaml\nscss_files: 'app/assets/stylesheets/**/*.css.scss'\nexclude: 'app/assets/stylesheets/plugins/**'\nerror_on_unnecessary_command_comment: true\nWhat do you think, @sds, @lencioni? The top-level config parameter probably requires a new exit code, and I kind of hate my error_on_unnecessary_command_comment name...\n. @connorshea @sds OK updated to look like Rubocop's output.\nI kept the \"across N files\" output because I think that would come in handy when parceling out work across a large code base. \"Oh wow we have 65 Indentation violations. Oh but they're only in 1 file? I can fix that.\"\nREADME has updated example. Looks like sds@'s suggestion:\n- 2 blanks between count and name\n- 8 blanks between name and file count\n- aligned columns\n- total at the bottom\n. Mmm I think this would be a new linter, rather than a new feature for SpaceAroundOperator.\nI don't disagree with the sentiment though; SCSS can be very non-intuitive when it comes to SassScript vs CSS (as seen in the rules around /). Parens probably help indicate what's going on.. Thanks @sds!\nI'm not 100% sure that the .travis.yml changes worked. I'll watch a few builds for a few days, and comment on what the build times look like. The build times are frequently all over the map.\nI also just found that JRUBY_OPTS has default values: Environment Variables: JRUBY_OPTS=\"--server -Dcext.enabled=false -Xcompile.invokedynamic=false\".\n. Sorry, it looks like DisableLinterReason probably does not work at all if you are using Sass pre-3.4.20 (December 2015) (you have 3.4.15). My CommentNode fix was released in 3.4.20.\nscss-lint's stated minimum sass version is 3.4.15. Maybe we should bump this? I don't know how I didn't catch this before...\n. Dup of https://github.com/brigade/scss-lint/issues/655 which has many comments\n. @acconrad can you give a full example? I cannot recreate the error using 'gray-40', but I can using @artemartemov's (with an educated guess at the palette function):\n```scss\n$palettes: (\n  black: #000,\n  blue: #74dcff,\n);\n@function palette($color) {\n  @return map-get($palettes, $color);\n}\na {\n  color: palette(blue); // ColorVariable error.\n}\n```\nI just want to make sure that there isn't a warning with a string like 'gray-40'.... That is a very cool site.\nIs anything in particular missing from the \"Linters Documentation\" link here?\n. I agree, @varemenos, I wish it were one click to see the list of linters (i.e. in the top level README), rather than 2 clicks. Then again the top-level README is already really long and informative... not sure...\nLet's leave the issue open for the maintainers to give an answer.\n. Did you try enabled: false? https://github.com/brigade/scss-lint#configuration\n. I don't think so. Though if you have a purpose in mind, I bet you could monkey-patch something in, or submit an issue at http://github.com/sass/sass...\n. This is caused by https://github.com/sass/sass/issues/2284. I wouldn't wait on a fix, but we can work around it in scss-lint.. @dzhytomyrsky What is an scss whitelist?. That is a head scratcher... I'll try to look at this today or tomorrow.. Well, I guess you should be... proud to find a 2 year old bug! This was introduced in 8ad337a1a9d38f890b56ac355e44aadd36b7aa80, in Nov 2015 \ud83d\ude04 . Your patch is the right patch; I've opened #938.. Good catch, I removed the first check, and made the comment more clear.\n. I agree. Ok this only lints on scss-lint:disable now.\n. I added chop instead, which is working in all the examples I have (removing semicolons, right parens, left curly braces...).\n. I didn't see any guards elsewhere in this file for parent_node being nil. Should we sprinkle in some nil checks?. ",
    "joaomilho": "Ok @wincent , so we have 2 bugs instead of one :D\n. Thanks!\n. ",
    "kangax": "I would love to see this as well, as there seems to be no SASS linter out there at all at the moment...\n. Chiming in 9 months later \u2014 is there any hope for this at all?\n. ",
    "perry": "+1\n. ",
    "henrahmagix": "+1\n. ",
    "rogerhutchings": "This would be awesome, +1\n. ",
    "grahamgilchrist": "I'd really like to see support for this as well. \nAlthough SCSS is now the 'main syntax' it wasn't the case prior to Sass 3, so there are a lot of legacy codebases out there using the Sass syntax, as well as developers who prefer the cleaner indented style which is similar to python or ruby code style.\nIt's great that you are open to pull-requests, but as you say, the linters would likely need to be rebuilt for the different style.\n. ",
    "mprins": "legacy code can easily be converted/modernized to the preferred syntax using sass-convert style.sass style.scss \n(though for \"fixing\" developer preference something else would propbably be required :innocent: )\nThis conversion will yield the benefit of being able to use tools like SassDoc/sassdoc\nsee: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax\n. it fails to run with Sass 3.4.0 (so it shouldn't update); see eg.:  https://travis-ci.org/GeoDienstenCentrum/geodienstencentrum.github.io/builds/32963865#L122\n. :+1: because:\n1. it is triggered by an instruction comment preceding the code\n2. it automatically jumps back \"on\" when leaving the selector\n. I think the latter is a bug; the docs state that the comment should precede the statement to be in the proper scope.\ncss\np-text,\n// scss-lint:disable SelectorFormat\n.buttonText {\n     margin-bottom: 0;\n}\n// scss-lint:enable SelectorFormat\n. even though this was closed I would like to cast a +1 vote for merging this, and optionally dropping/replacing the existing xml formatter (which is fairly useless IMO)\nThe checkstyle output is well supported in many enterprise build and code quality reporting tools, Jenkins being just a single example, a longer list is available at http://checkstyle.sourceforge.net/index.html#Related_Tools\n. :blush:  yeah, convenience for me is my main drive  :blush: \ndefinitely more than reasonable!\nI have no objections to taking ownership and would probably pulled something like this into the maven plugin* I'm working on atm anyways.\n*see: https://github.com/GeoDienstenCentrum/sass-maven-plugin/pull/3\n. seems to be failing on this method, not sure what that means, it might be an encoding issue\n. I want to look into this, but short on time; also JRuby is working hard to release 9.1.0.0 which has many improvements over 9.0.x.x.\nFWIW i've been using 9.0.x.x with scss-lint for some time without issues, but please hold off merging this for now.\n. did a quick search-replace of to_sass -> to_s and ended up wit 60 or so test failures when using 3.5..; probably should start off with doing that code change first and try that with 3.4.x. sassc doesn't seem to provide a sass parser (which is required) and is only available on a limited number of platforms (eg. not on any of the BSD flavours last time I checked), sassc failed to run on jruby last time I checked, imo it's a major step back.. the gem is only a wrapper around a C library. ",
    "alp82": "+1\n. ",
    "camerond": "I'd also love to see this. Was looking into adding scss-lint to our projects but our team uses Sass syntax exclusively.\n. ",
    "mdiebolt": "@sds I started pursuing the approach you outlined for adding .sass support. You can see my changes at: https://github.com/mdiebolt/scss-lint/commit/0710e4440bb059bbbb428ffba3e1d34b47e4f565\nI ran into trouble and am pretty stumped.\nRunning \nruby\nbundle exec rspec spec/scss_lint/linter/bang_format_spec.rb:16\nI get the following error: http://monosnap.com/image/fd2Zwt4FXVe7dbW8MWLWuUvxusYsx0\nThe problem starts when generating the AST at: https://github.com/mdiebolt/scss-lint/blob/master/lib/scss_lint/engine.rb#L27\nDigging in, the code errors at: https://github.com/sass/sass/blob/stable/lib/sass/tree/node.rb#L193\nWorking through the stack trace I found the offending node:\n``` ruby\n\nself.name  # => [\"color\"]\n  self.value # => [#000000] \n  self.children # => [#000000]\n```\n#000000 doesn\u2019t have the expected each method, and the code blows up.\nThe strange thing is that if I spin up irb and run the same series of commands (I checked to make sure rspec and irb sessions were running the same version of Ruby and using the same version of the sass gem), it generates the tree correctly. \n``` ruby\nrequire \"sass\"\nusing the same parameters passed in at: https://github.com/mdiebolt/scss-lint/blob/master/lib/scss_lint/engine.rb#L51\nengine = Sass::Engine.new(\"p\\n  color: #000\\n\", cache: false, syntax: :sass) \nengine.to_tree # => correct SASS AST\n```\nInspecting the corresponding node in my irb example I found:\n``` ruby\n\nself.name  # => [\"color\"]\n  self.value # => [#000000] \n  self.children # => []\n```\nI\u2019m not sure why self.children is being set differently in those two examples. The only thing I can think is that somewhere scss-lint sets some configuration options on Sass or Sass::Engine. Any ideas?\n. @sds Thanks for the quick reply!\nI've made good progress thanks to your help and should have a passing .sass test suite by the end of the week.\nAt that point, I'll need to figure out a way to DRY up the specs and support .sass in the CLI.\n. I ran into lots of problems with the monkey patched Sass::Tree which caused line numbers to be incorrectly reported to the linter.\nAlso, the way I have the specs set up is not DRY at all. I split out specs into an \"scss\" context and a \"sass\" context, which makes for more than twice as much spec code: https://github.com/mdiebolt/scss-lint/commit/5027102cac9464755ed18e385f5e3ba81785674d\nA good amount of the linters work on my fork and there are some which are moot with Sass because they are language compile errors.\nIf someone wants to poke around my code and try to figure out how to work around the patched Sass internals that would be helpful. I'm not going to spend more time working on it.\n. ",
    "tbremer": "Jumping in way after a lot of people have made suggestions (and I didn't read them all).\nIs it possible to run a sass-convert and then lint the converted output?\n. Ahh, good point.\n. ",
    "CREEATION": "I'm so waiting for this /o/ thanks for your efforts!\n. yep, :+1:! @mdiebolt\n. ",
    "batizhevsky": "@CREEATION Looks line https://github.com/mdiebolt/scss-lint work for me. Thank you @mdiebolt\n. @blackst0ne you could check http://stylelint.io/ they support sass \u0435\u0440\u043a\u0449\u0433\u043f\u0440\u0435 postcss plugin\n. ",
    "brunowego": "+1\n. :+1: \n. @gunnx how you fix it?\nI get this linter message too.\nSelector `i__inbox` should be written in lowercase with hyphens (SelectorFormat)\n. @gunnx you disable it using .scss-lint.yml right?\nyml\nlinters:\n  SelectorFormat:\n    enabled: false\n. Sorry @gunnx, I find the solution. Thanks\nhttps://github.com/brigade/scss-lint/blob/master/config/default.yml\n. Nice, thanks @sds :+1: \n. ",
    "bartveneman": "For what it's worth, using the scss-lint plugin in sublime text already gives some feedback on .sass files. Of course not all of it, but for me it's enough to work with for the time being.\n. Another example use case: using rems and fallback px values. Currently have DuplicateProperty disabled because of this, but would be glad to be able to use it again.\n. > Granted, both of these might be an argument for DuplicateProperty becoming smart enough to track the units being set since it's often common to need multiple levels of fallback:\nSeems like a good point, but I've seen stuff at work lately.... :disappointed: \nBut then again: as scss-lint requires developers to be taught about why certain rules are applied, developers should be smart enough to recognise these exceptions :)\n. :+1: \nWould this also be a good case for allowing a maximum amount of properties per declaration, like in JSHint for example? This would encourage making small, independent selectors.\n. > Considering the intent of this feature request as I perceive it, the goal seems to be flagging complexity and suggesting that a rule set be broken down into reusable components.\nExactly that, in my opinion. Thanks!\n. That's quick, thanks!\n. +1 :+1: \n. Yay!!\n. > It might be worth adding a configuration option to ignore certain names, in case, say, Autoprefixer isn't working for a property and you feel you have to add the vendor prefixes yourself.\nThat could be the case for the appearance property, which isn't prefixed by Autoprefixer, but also -webkit-text-size-adjust, which is used in Normalize.css for example. \nOther than that, looks like a usable feature to me.\n. Looks good. A quick question: how to disable one/multiple linter(s) and enable others? It's probably an edge case, but I'm curious. Would it be like so?\nscss\n// scss-lint:disable all\n// scss-lint:enable BorderZero\np {\n  border: none; // Lints\n}\n. You're absolutely right. Sorry about that.\n. Perhaps a good use case to name here: mustache templates used for generating sprite scss files, like in gulp-svg-sprite. Now I declare the generation of the scss file a dependency for the scss-lint task, but ideally it would be better to test the mustache.scss file.\n. And what about currentColor, the same, I guess?\n. Had the same issue yesterday, thanks for fixing!\n. :heart: \n. As the grunt plugin mentions it depends on Scss-lint being installed: what version of scss-lint are you running?\n. Are you sure this is an Scss-lint issue and not one for the editor plugin you're using? Does the error also occur when you run scss-lint from the command line?\n. Adding flexbox to concentric won't help? I think adding flexbox would be a good addition anyway.\nBut I'd +1 a separate file for property sort order.\n. ",
    "Plummat": "So... has this been resolved?\n. ",
    "ryanmclaughlin": "+1 Wondering this as well for Atom\n. ",
    "skrzyszewski": "+1\n. ",
    "blackst0ne": "Any progress here?\nIt would be very nice to have support for sass files.\n. ",
    "geekdave": "Thanks for the response, @sds.  I was able to resolve the issue by uninstalling Sass/Compass/scss-lint, and installing them again using a Gemfile like so:\n```\nsource 'http://rubygems.org'\ngem 'sass', '3.2.12'\ngem 'compass', '0.12.2'\ngem 'scss-lint'\n```\nbundle install\nThen after that, running scss-lint src/scss produced the correct output.  Not sure what the original problem was, but now it's working! Thanks again.\n. ",
    "andrewberls": "I've actually run into this myself recently when linting this file. \n/Users/andrew/.rvm/gems/ruby-2.0.0-p247@payback/gems/scss-lint-0.11.1/lib/scss_lint/linter/shorthand.rb:36:in `check_script_string': undefined method `type' for 4px:Sass::Script::Value::Number (NoMethodError)\nI think I've traced it down to this line:\ncss\n.no-text-tiny { padding: 4px }\nPerhaps it's the lack of trailing semicolon? (which is valid SCSS for the last rule, no?)\n. ",
    "ahmednuaman": "Eg: scss-lint -c .scss-lint.yml test/fixtures/*.scss\n. Ah cool, thank you :D\n. Yeah I believe it's all working.\n. Ok cool, in the mean time I stuck a question on SO to see how I can use scss-lint alongside compass: http://stackoverflow.com/questions/20361074/multiple-versions-of-a-gem/20361417\n. ",
    "franz-josef-kaiser": "Any progress on this one?\n. thanks a lot!\n. @sds ok, that's something I understand. Problem still is: The parser does not work anymore when put in quotes. The statement simply gets ignored (hence I put \"works\" in quotes). Please reopen as this isn't fixed. \n. Well, we run it again (and re-ran it on Codeship) and got the following exit code:\ndev/assets/sass_new/global/_mixins.scss\n57: [W] PropertySpelling:  Unknown property *zoom\nThe used property is\n*zoom: 1;\nThat's from our diff:\nPropertySpelling:\n     extra_properties:\n-      - \"*zoom\"\n+      - '*zoom'\nResult: Still does not work.\nEdit: We are running it via Grunt and grunt-scss-lint.\nThe SCSS Lint version is 0.40.1 according to the Gemfile.\n. ",
    "kathgironpe": "The stylistic lints are not bugging me. I do not disagree with anything the gem does so far. \n. Issue fixed. Seems to be working now. I uninstalled the gem and installed again. Weird.\n. Still happens BTW. But closing this as gem install scss-lint works.\n. Is BEM syntax actually sensible or community-accepted? That's a rule I can never seem to accept. But sure probably the maintainers can fix the issue you mentioned.\n. ",
    "leebrooks0": "That makes sense, strange though as I just did a bundle install now, so I\nwould have thought that the latest version would be installed.\nOn Thu, Dec 12, 2013 at 12:10 AM, Shane da Silva\nnotifications@github.comwrote:\n\nHey @leebrooks0 https://github.com/leebrooks0, thanks for using\nscss-lint!\nIt looks like you are running a really old version of scss-lint (0.7.0,\nwhich is six months old) which probably doesn't work with the latest\nversion of sass (also, the latest version of scss-lint explicitly\nrequires sass 3.3.0.rc.1).\nHope that helps.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/causes/scss-lint/issues/53#issuecomment-30369424\n.\n. OK, thanks for your help! will upgrade tomorrow.\n\nOn Thu, Dec 12, 2013 at 12:15 AM, Shane da Silva\nnotifications@github.comwrote:\n\nIf you specified scss-lint in your Gemfile without any version\nrequirements, then bundle won't update it if an older version already\nsatisfies the dependency. You have to explicitly update it with bundle\nupdate scss-lint.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/causes/scss-lint/issues/53#issuecomment-30369944\n.\n. Don't use Bundler here, as sass-rails is locked to an older version of sass\n\ngem install sass # make sure it is the latest version\ngem install scss-lint\n. I did that myself this morning, pure coincidence, and it worked for me, as\nunhelpful as this is.\nIt seems you have an unrelated problem with paths or something...\nOn Tue, Aug 5, 2014 at 7:35 AM, Chris Hough notifications@github.com\nwrote:\n\n@leebrooks0 https://github.com/leebrooks0 If I head down that route I\nget...\nscss-lint app/assets/stylesheets/*/.css.scss\n/Users/chrishough/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/bundler-1.5.3/lib/bundler/rubygems_integration.rb:293:in block in replace_bin_path': can't find executable scss-lint (Gem::Exception)\n    from .bundle/binstubs/scss-lint:16:in'\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/causes/scss-lint/issues/53#issuecomment-51151764.\n. \n",
    "nroose": "Ugh.  SASS dependency goes from hard 3.2.10 to 3.3.0...  I guess I can't use it at the moment.\n. ",
    "chrishough": "I am getting the same error running scss-lint app/assets/stylesheets/**/*.css.scss using the rails sass gem https://github.com/rails/sass-rails\n/Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/media_node.rb:38:in `value': NotImplementedError (NotImplementedError)\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/sass/tree.rb:55:in `children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `visit_children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:37:in `block in visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:113:in `visit_media'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:37:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `block in visit_children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `map'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `visit_children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:37:in `block in visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:66:in `visit_mixindef'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:37:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `block in visit_children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `map'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:53:in `visit_children'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/base.rb:39:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/visitors/set_options.rb:5:in `visit'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/tree/node.rb:69:in `options='\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/engine.rb:348:in `_to_tree'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/sass-3.2.19/lib/sass/engine.rb:274:in `to_tree'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/engine.rb:20:in `initialize'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:38:in `new'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:38:in `find_lints'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:29:in `block in run'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:28:in `each'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:28:in `run'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/cli.rb:55:in `run'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:7:in `block in <top (required)>'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:5:in `tap'\n    from /Users/chrishough/BusinessHuedio/CodeHuedio/SocialPlatform/.bundle/ruby/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:5:in `<top (required)>'\n    from .bundle/binstubs/scss-lint:16:in `load'\n    from .bundle/binstubs/scss-lint:16:in `<main>'\n. @leebrooks0  If I head down that route I get...\nscss-lint app/assets/stylesheets/**/*.css.scss\n/Users/chrishough/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/bundler-1.5.3/lib/bundler/rubygems_integration.rb:293:in `block in replace_bin_path': can't find executable scss-lint (Gem::Exception)\n    from .bundle/binstubs/scss-lint:16:in `<main>'\nalso...\nSuccessfully installed sass-3.3.14\nSuccessfully installed scss-lint-0.26.2\n. interesting @leebrooks0, here is my path:\n.bundle/binstubs /Users/chrishough/.rbenv/shims .bundle/binstubs /usr/local/bin /usr/bin /bin /usr/sbin /sbin /opt/local/bin /usr/local/share/npm/bin\nI bet it's the first part, but I am not sure how to remove that... still researching now\n. @leebrooks0 I had to rm -rf .bundle and re-install via bundle install --path=.bundle --binstubs=.bundle/binstubs \nThis fixed it. \n. @sds @geniou so I guess we head to compass instead?\n. @sds np, I commented on a few posts, but have been tracking it here https://github.com/causes/scss-lint/issues/53#issuecomment-51151764  \nIt looks like sass-rails has issues\n. yep, that was it...  \nexclude:\n - '../app/assets/stylesheets/libraries/reset.css.scss'\n - '../app/assets/stylesheets/libraries/foundation.css.scss'\nif you want to post this http://stackoverflow.com/questions/25147906/scss-lint-exclusions-in-yml-not-being-excluded I can toss you credit! :) \n. ",
    "edhenderson": "@sds Thanks Shane. Just need to work out what a gemfile is now and I'm set. Ha ha. Happy Holidays.\n. Thanks for the info. I think it would make more sense to newbies if the readme used the actual linter names? It seems like a bit of a treasure hunt to match each to their label. Is this something I can help with?\n. @sds Thanks dude. Am doing now. Will be with you shortly once I work out how to do it. Happy for you to close this issue now.\n. No problem.\n. Could you get round it by using comments, e.g.:\nscss\n.something {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    display: block;\n    margin: auto;\n    height: 100px;\n    //\n    color: red;\n}\n. All the info on Linters is here - https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md - you can enable/disable them by using the config file.\n. Fair question.:\n- Why not find a modern solution that doesn't rely on a * hack? Check out http://davidwalsh.name/css-clear-fix or HTML5 Boilerplate version?\n- Or create a _shame.scss file for hacks and have scss-lint ignore it? HT http://csswizardry.com/2013/04/shame-css/\n. Thinking out loud. I like the idea of the feature. Could we implement it simply as a 1 liner, e.g.\nscss\ncolor: #FFFFFF; // special_ignore_control_word_here\nor some other comment type secret word/phrase?\n. Good idea. Although border-left-width appearing before and after border may produce different results in the browser?\n. Check https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md#nameformat\n. ",
    "davidpmccormick": "I'm having the same problem, but running a Rails app. Should I be changing gem 'sass-rails', '~> 4.0.0' in the Gemfile? Any ideas what to, if so?\nThanks\n. ",
    "rodcisal": "My boss just gave me some guidance.\nIt could be an issue with compass.\nHave you tried using both?\nI finally could lint some of another project files (not using compass) \n. I'm sure I'm opening a SCSS valid file, I've got 1500 CSS lines in it.\nThere is no way I'm giving a wrong extension to a binary file.\nI'm gonna keep trying to solve this, as soon as I get something I'll let you know.\nBest regards, happy new year\n. ",
    "vanjacosic": "Hey, sorry to reopen a closed issue, but I believe I have found another problem and a solution.\nJust like @rodcisal, I am getting the error: invalid byte sequence in US-ASCII when linting one of my files. \nI am sure it's a valid file, it's encoding is fine and it compiles correctly. But scss-lint is complaining because it contains a few UTF-8 characters that we use them for our icon fonts. So the file is perfectly valid SCSS, Ruby just chokes on the characters.\nNow the solution I found is a bit half-baked, but I tried adding:\nif RUBY_VERSION =~ /1.9/\n    Encoding.default_external = Encoding::UTF_8\n    Encoding.default_internal = Encoding::UTF_8\nend\nto the binary scss-lint file, and that fixed the issue. The file is now linted properly.\nNow obviously, this isn't a good long term solution and also I would like to contribute it back to the project so others don't have to deal with the same issue. But since I am not a Ruby developer and don't have much experience with the Gemfile/Gemspec environment, I am not sure which file to add this to.\nIf you point me in the right direction, I would like to do a PR with this snippet so that others don't have to deal with this in the future :) \n. @sds I just did some more testing, trying to figure out what's going on.\nIt seems when I run the files manually through scss-lint in the commandline, it lints fine with no errors. But when I run it in Sublime Text 3 (where I mainly use it) it gives me the ASCII error. So maybe the problem isn't with the core, but with the way it talks to ST3.\nHere's an example of two declarations that cause the issue (in Sublime):\n```\n&:after {\n    content: '\uf501';\n    color: #676d77;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    pointer-events: none;\n}\n.custom-checkbox:checked + label:after {\n    content: '\u2713';\n    color: #1d232c;\n}\n```\nFor reference, I'm on OS X 10.9.2 running ruby 1.9.3p374 (2013-01-15 revision 38858) [x86_64-darwin12.2.0].\nIf you can give me some hints that would be great, if not I guess I have to go ask the author of the SublimeLinter version.\nThanks!\n. Yeah, I have the same hunch about what could be wrong. I'll file an issue there and see if they can help out.\nThanks for you help though!\n. ",
    "jeffkamo": "Any word on the progress here now that 3.3.0 is out?\n. +1\nIf you make use of mixins for the sake of vender prefixes, it's reasonable that grouping them where its respective property would ordinarily live be enforceable.\n```\nPropertySortOrder: [\n    # ...\n'background',\n'border',\n'@include border-radius',\n'opacity',\n\n# etc.\n\n]\n```\n. > I don't think we should worry about this. These people should just disable this lint.\n...and use Autoprefixer. Which is what we ended up doing, making this issue null :)\n. @davidtheclark I dig that +1\n. ",
    "cole-sanderson": "Great, thanks @sds!\n. Thank you @donaldpcook and @sds! Its super useful! I created another issue on PropertySortOrder - https://github.com/causes/scss-lint/issues/88\n. Thank you for the quick fix! :+1: \n. Awesome! Thanks @sds :+1: \n. +1\n. +1\n. ",
    "kpeatt": "Could we follow a similar method to CSS Comb? They declare sort order via arrays in a JSON object. Might be able to absorb some of this work.\n. +1\n. ",
    "donaldpcook": "I agree with @cole-sanderson that sorting by group is more helpful and popular than sorting alphabetically. I submitted a pull request that allows configuration by explicitly defining the order in an array, like in Recess.\n. Awesome. Thanks @sds!\n. ",
    "geniou": "I added pull request #70 for this. Let me know what you think about this solution.\n. The files are not in a separate folder, so that is not working for me.\nI added the pull request #71 - let me know what you are thinking. I would be more than happy to improve my changes.\n. @sds thanks for the fix - works perfect.\n. @sds thank you adapting and applying my changes. I'm really excited how quick you react and taking issues and ideas serious.\nI really like scss-lint and the concept behind it - thanks for creating this project! If there is anything I should know or do to simplify your work after a pull request of mine just let me know.\n. @sds my pleasure - thanks for the merge.\n. Just a guess: what version of scss-lint are you using?\n. @trevordmiller sorry for not recognizing you :)\n. scss-lint is on its way to sass 3.3.0: #89 \n. Hi Shane,\nyou are right - scss-lint should not support such a bad behavior of jekyll. I think I'm going to switch to the asset pipeline (https://github.com/kitsched/japr) when I want to use scss-lint with jekyll.\n. I would keep the section about the benefits of alphabetic sorting. These are good reasons and the hint with the editor (vim) is very useful.\n. Maybe I can help. The exclude takes an array, this should work:\nexclude: \n  - app/shared/styles/_normalize.scss\n  - app/bower_components/**\nDose it help?\n. My results so far:\nThe error seems to come from the visit method of the Sass::Tree::Visitors::Base class while running @engine.to_tree in SCSSLint::Engine.initialize. The Sass::Tree::Visitor::Base has change since sass.rc.1: https://github.com/nex3/sass/commit/9bedd67711061dbac6ecdcd0326b4ec0d8551df4\n. Thank you! It's really amazing how fast you react!\n. It seams be easy to be solved: As you can see in the paths, you are using scss-lint-0.7.0\nYou should force scss-lint >= 0.17 in your Gemfile.\n. No problem. Had the same problem before.\n. @mikesherov why do you think that -moz-osx is no prefix? Its for firefox on osx, and the standard property is font-smoothing. You are right, at the moment there is only one property for this prefix combination, but I think this prefixed property should be next to the one without a prefix.\n. I tried it out, and it seams to come from this commit fd01fd2682e148d5a26820ea9ee2911b06cb0cb1 Before it worked and afterwards not.\n. Looks for me like a bug in sass: margin: 0 0 $jw-std-margin .8em; is parsed as 0 0 $jw-std-margin 0 by sass. Its the same for all versions with a variable and a dot in the value.\nA workaround would be: margin: 0 0 $jw-std-margin (8em/10); (but it's not really nice)\n. I have to correct my self.\nIf I do this in the console:\nrequire 'sass'\nSass::Engine.new(\"$jw-std-margin: 1.5em; dd { margin: 0 0 $jw-std-margin .8em; }\", syntax: :scss).to_tree.children[1].children[0].value\nIts fine, but if I do require 'scss_lint' before its wrong. So it seams not to be the mistake of sass. Now I curious and want to find out why its like this! :)\n. So I found out it has something to do with the monkeypatching of sass by scss-lint. With this conclusion I seam to reach my limits. Sorry, that I couldn't help - maybe the @causes has a solution.\n. Hi @lightswitch05 scss-lint requires sass ~> 3.3.0 - before 3.3.0 sass was totally different and didn't provide the functionality scss-lint is using.\nsass-rails 4.0.1 is running fine for me together with sass-rails and sass 3.3.0. But I know, that there is an issue with the new sass and sprocket, so I had to use sproket 2.11.0\nHope that helps you.\n. I can tell you I'm running rails 4.0.4 with sass-rails 4.0.1. I think this is only a proposal - so from this side it would be working.\nI had problems with scsss-lint in former times, and in this case I removed it from the Gemfile and installed it by hand. Is not perfect, but its working. :)\n. I could confirm the bug and added a pull request #113 \n. I can confirm this issue - but I'm not sure if and how it worked before..\n. The more and more I think about it, I come to the conclusion its not an easy topic:\nGood\n.box {\n  background: #fff;\n  background: rba(255, 255, 255, .5);\n}\n.box {\n  background: #fff;\n  background: linear-gradient(#fff, #000);\n}\nBad\n.box {\n  background: #fff;\n  background: #fff;\n}\n.box {\n  background: #fff;\n  background: linear-gradient(#fff, #000);\n  background: linear-gradient(#000, #fff);\n}\n. I think there could be configuration like it has been done here a4db8eb5f59e4d4ffdedb9a5c1c6d51943b57872 to allow allow_extra_spaces\n. I had some time.. this could be a solution: #117\n. @jfelchner sounds like an interesting project. How should we get started?\n. I opened a new issue to bundle the work on this new feature there: #121 \n. @sds you are welcome. I hope its fine for you that I propose stuff like this. If not or if you have any advises how I should contribute just let me know.\nThanks for fixing my spelling / grammar mistakes. :)\n. I thought there is no reason to have multiple spaces without aligning the values - but maybe you are right, its more flexible with an extra option.\nPersonally I would the like the linter to check for the minimal number of spaces and enforcing them. But its ok for me, if it only checks that all values are aligned.\n. The configuration file is .scss-lint.yml - starting with a dot. May this be the reason?\n. Which version of scss-lint are you using? Can you post the scss file, so that I can try to reproduce it.\n. @lencioni you are welcome - good to see that I could help.\n. Nice - I like it.\nWhat do you think, would it be \"easy\" to extend this to not only check the root? So that something like this would be bad too:\n.foo {\n .bar {}\n .bax {}\n .bar {}\n}\nAnother think: I tried it before, so I know its not that easy but wouldn't it be nice if the linter also complains about thinks like this:\n.foo.bar {}\na {}\n.bar.foo {}\nor\na {}\na.current {}\nThese are just ideas - let me know what you think.\n. Looking into the cli.rb tells me its 78 is a Configuration error.\nWhich version are you using? Can try to run it without a config file? If this helps: please check or post your .scss-lint.yml\n. I'm sorry, I can't reproduce it. Could you try to run it without grunt - so just like scss-lint [files]. With this you could maybe limit it to a single style, so that I can try to reproduce it here. Sorry that I couldn't help more, but its hard to figure out what the reason is.\n. I'm still just guessing, but isn't it saying line 40 column 14 - and the BEM stuff is at line 48 (regarding to your screen shot)?\n. Maybe it would be an idea to have an option like --auto-gen-config on rubocop to generate a .scss-lint file where all linters are disabled, that are failing. Then you can start with this file and enabling one linter after each other. What do you think about this?\n. What do you think about this: #142 ?\n. I rebased to master and extended the tests a little bit.\n. @sds Thanks!\n. I rebased to master.\n. @sds thanks for the feedback - all changes are done. What do you think?\n. I had to add a commit to use old rubocop - but there is also a commit to enable the new rubocop: #146 \n. @sds your are welcome!\nFor some cops I'm not sure if they are disabled on purpose, or need to / can be fixed. Could you do me a favor and mark all cop, that from your point of view need to be enabled (e.g. with a TODO comment above), or as you already started add a comment to all cops, that are disabled on purpose.\nThe Encoding cop makes sense if there are non ASCII characters in (and ruby 1.9). I'm about to propose a change to rubocop to force this comment only if there are non ASCII characters. After this I think this cop is useful.\n. see  #146 \n. Isn't this related to #140 or maybe already solved with #143 ?\n. Thanks for merging.\n. I played a little bit around:\n```\ndef node_children(node)\n  commented_out_lines = []\n  node.children.each do |child|\n    if child.is_a?(Sass::Tree::CommentNode)\n      if /scss-lint:enable/.match(child.value.join)\n        @comment_block = true\n      elsif /scss-lint:disable/.match(child.value.join)\n        @comment_block = false\n      end\n    end\nnext unless (child.is_a?(Sass::Tree::CommentNode) &&\n  /scss-lint:disabled/.match(child.value.join)) || @comment_block\n\ncommented_out_lines << child.line\n\nend\nnode.children.delete_if do |child|\n    commented_out_lines.include? child.line\n  end\nend\n```\nIts fare from being perfect, but with this things like this are possible:\nscss\np {\n  custom-property: 0; // scss-lint:disabled\n  // scss-lint:disable\n  color: red;\n  // scss-lint:enable\n}\nMaybe even this could be possible\nscss\np {\n  // scss-lint:disable PropertySortOrder\n  color: #fff;\n  border: 0;\n  // scss-lint:enable PropertySortOrder\n  font: 0;\n}\nThe syntax is inspired by rubocop\nIt would mean to replace every node.children by node_children(node) or to manipulate every node before visiting is in the linter.\n. With other words, the ZeroUnit linter should skip if the unit is s, ms, Hz, kHz, dpi, dpcm, dppx, deg, grad, rad or turn, right?\n. Sounds reasonable. Would you like to do it?\n. I think I can do it next week - so let me know when you start before.\n. It was easier than expected - added a pull request for it.\n. I know this issue on other projects.. it seams to be a problem with travis since there last update.\n. @sds thanks for the feedback. I adapted the code as proposed and rebased. Feel free to let me know if anything is missing.\n. Maybe its a good idea to have the rubocop version fixed.. otherwise every time the version has change there is the danger that rubocop will fail on the first commit afterwards.\n. Sorry - I forgot, that the rubycop version is fixed. With this your are totally right - the changes should have been done, when the new version is released.\n. Can you post your core.scss and .scss-lint.yml files, so that I can try to reproduce it?\n. Since version 0.12.0 there are a lot of changes - hard to say what's the reason. In General I would think it's always better to contribute to the project and introduce new (configurable) linters instead of keeping them private. So you also don't have to take care on every change, that your private code is still running.\nWhat kind of linters to you have?\n. Can you give an example, so that I understand what you are trying to achieve?\n. I think it would be a great linter where I can specify a list of properties, that are banned. It would be diabled by default, and can be enabled if needed.\nThe configuration could look like this:\nForbiddenProperties:\n  enabled: true\n  properties:\n    - pointer-events\n    - something-else\n@sds what do you think?\n. Sounds like #150 - or not?\n. Could you please provide the scss/_page-wishlist.scss file, so that I can try to reproduce it?\n. I was able to reproduce and provided a pull request for a fix. Thanks for reporting the bug.\n. @sds did this example failed before? Maybe I did something wrong, but for me the the spec was passing even without the change. Good if its working now.\n. Ok - don't know what I did wrong.. but at the end its good to know, that its fixed and that there is a spec for it.\n. It's not perfect, but you could extract these style in a separate file (and include it) and disable the checks for this file.\n. Yes - you can disable a linter for a single file - shouldn't that help?\n. @sds it looks like its a (valid) bug.. my first idea would be to check for multiple &and then not to report a possible merge.. or what do you think?\n. Sounds reasonable. I think in this case it would be good disable this cop in rubycop - maybe with an extra comment.\n. I didn't know each_with_object. But it seams to be deprecated: http://apidock.com/rails/Enumerable/each_with_object\n. ok - I'm confused.. :) Seams like its safe to change it so each_with_object..\n. You are right. Btw, there is now a new cop at rubocop to ensure this.\n. I get your point, but I would find it confusing to have a method add_lint and create_lint. Now I changed it that way, that the linters always use add_lint (there was only one linter, that didn't use this method).\nThe strange thing about having the linter as the first argument is, that there are checks which are no linter, so the linter has to be nil. Or we could change it that way, that we always pass in the class as first first argument, and in the reporter check if it is a linter or not.\n. Changed.\n. Thanks for the finding. Removed it.\n. Your are right - thanks.\n. I like the lowercase / uppercase - also I would like the have style as \"standard\" configuration option.\n. I just found it while dealing with COLOR_REGEX - since it was not a real regex for hex colors. While fixing it I found out, that node.to_s is exactly doing the same. So there is no real change - it should just be a refactoring.\n. ",
    "peschee": "@sds I tried the latest released version as well as the master branch, and the exclusion of single linters does not work for me. If I add the files to the global exclude, it works. However, skipping files from certain linters only does not. Example:\nyml\n  NameFormat:\n    enabled: true\n    convention: hyphenated_lowercase\n    exclude:\n      - \"relative/path/to/file.scss\"\nAnd lowercase errors are still raised for file.scss\nAny ideas?\n. @sds Yes, it is nested under linters and yet being ignored. The toolchain seems to be finding the relevant .scss-lint.yml file sind the global exclude (outside of linters: at the top, as my stated workaround) definitions work.\n. The problem seems to be gone in the latest version from the master branch.\n. ",
    "tleruitte": "Thank you! Have you pushed the fix to the gem servers? \n. ",
    "nixpulvis": "Nope still getting the error after forcing the gem to load 3.3.0.rc.1.\n/Users/nixpulvis/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.0.rc.1/lib/sass/tree/media_node.rb:31:in `value': NotImplementedError (NotImplementedError)\n. I'm guessing it's something weird with trying to run this within the environment of a rails app, but this functionality should work.\n``` ruby\nrequire 'rubocop/rake_task'\ndesc \"Lint the application. (Ruby/Coffeescript/SASS)\"\ntask :lint => [\"lint:ruby\", \"lint:coffee\", \"lint:sass\"]\nnamespace :lint do\n  Rubocop::RakeTask.new(:ruby) do |task|\n    task.patterns = ['*/.rb']\n  end\ndesc \"Lint Coffeescript.\"\n  task :coffee do\n    pass = system(\"coffeelint .\")\n    raise(\"failed coffeescript linting\") unless pass\n  end\ndesc \"Lint SASS\"\n  task :sass do\n    system(\"bundle exec scss-lint .\")\n  end\nend\nRake::Task['test'].enhance do\n  Rake::Task['lint'].invoke\nend\n``\n. It's all up on Github. https://github.com/party-shark/website/tree/master/app/assets/stylesheets\n. Addinggem 'scss-lint', '= 0.17.1'` for now, thanks.\n. ",
    "utopicchaotica": "My issue is that I use compass as a standalone for web development, therefore I don't have a Gemfile. Is there some sort of solution to my situation?\n. ",
    "benfrain": "@sds Sorry Sir, I didn't make it clear - I'm using the SublimeLinter version: https://github.com/attenzione/SublimeLinter-scss-lint but I wasn't sure if the issues were to do with that implementation or the linter itself.\nHere is some Sass I'm linting:\n.Sausages {\n    @extend %UiImg;\n    display: block;\n    position: absolute;\n    top: 0;\n    width: $size-double;\n}\nIf I use this setting:\n\"scss\": {\n                \"@disable\": false,\n                \"args\": [],\n                \"exclude-linter\": \"CapitalizationInSelector,Comment,SpaceBeforeBrace,Indentation,StringQuotes,SortedProperties,EmptyLineBetweenBlocks\",\n                \"excludes\": [],\n                \"include-linter\": \"\"\n            }\nWith those settings I get an error on the @extend %UiImg; line as expected. However, I don't want to see errors related to naming so I change the setting to this (note the additional NameFormat setting):\n\"scss\": {\n                \"@disable\": false,\n                \"args\": [],\n                \"exclude-linter\": \"CapitalizationInSelector,Comment,SpaceBeforeBrace,Indentation,StringQuotes,SortedProperties,EmptyLineBetweenBlocks,NameFormat\",\n                \"excludes\": [],\n                \"include-linter\": \"\"\n            }\nHowever, then I don't see any Linting errors anywhere else in the file (and there are issues). For example a property/value combo like this doesn't get 'error' status:\nbox-shadow:inset 1px 1px 0 #fff, 0 1px 1px rgba(0,0,0,0.1); (the leading 0 on 0.1 should be warned).\n. perfect, thanks :+1: \n. ",
    "thejase": "Sensibility is in the eye of the beholder, but yes, it is a form of OOCSS, and is quite valuable. \n. Thank you, Shane! \u00a0An option on conventions would be amazingly helpful.\u00a0\nLet me take a look at the code and see if I can handle it; I'd be happy to do a pull request.\nOn Mon, Feb 24, 2014 at 1:27 PM, Shane da Silva notifications@github.com\nwrote:\n\nHey @thejase, thanks for the suggestion.\nI would be open to enabling this via a configuration option on the NameFormat linter, so that this can be enabled for those who want it by adding:\nyaml\nlinters:\n  NameFormat:\n    convention: BEM\nPerhaps even better would be to just allow the user to specify a regex to match their convention, giving them the greatest flexibility.\nIf you are itching for it now I would certainly be open to a pull request, otherwise I'll get to it when I can.\nReply to this email directly or view it on GitHub:\nhttps://github.com/causes/scss-lint/issues/80#issuecomment-35918110\n. \n",
    "trevordmiller": "I am trying to use the BEM convention option in my .scss-lint.yml file like so:\nNameFormat:\n    enabled: true\n    convention: BEM\nHowever, I am getting an error code: 78 with no explanation for how to fix it. Am I doing something wrong?\nThank you @sds! You are awesome.\n. Thank you for responding! I give my details in the issue I opened that you also responded to:\nhttps://github.com/causes/scss-lint/issues/135#issuecomment-40737391\nSorry for the duplication.\n. Thank you @sds, that makes sense. I was referring to the linter options. I typically don't see configuration options in a separate README so I was looking for it, but it makes sense now. Maybe re-naming the section/link it to \"configuration options\" or something similar might help? I thought \"Linters\" was referring to the linters that were supported (like Sublime Linter and Atom-Lint).\n. Hi @geniou, I just updated scss-lint to the most recent 0.22 version. I was still getting the same error so I pulled out the \"convention: BEM\" line and it runs fine but it throws errors with all of my BEM syntax classes. I don't think this would matter, but I am using scss-lint via a Grunt plugin called Grunt-Scss-Lint (https://github.com/ahmednuaman/grunt-scss-lint).\nBelow is my .scss-lint.yml. Since I have the most recent version of scss-lint installed, do you have any other ideas? I love this plugin but I need to be able to use BEM syntax at my work.\n```\nSCSS-LINT\nSass linting\nhttps://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md\nlinters:\n  BorderZero:\n    enabled: true\nCapitalizationInSelector:\n    enabled: true\nColorKeyword:\n    enabled: true\nComment:\n    enabled: true\nDebugStatement:\n    enabled: true\nDeclarationOrder:\n    enabled: true\nDuplicateProperty:\n    enabled: true\nEmptyLineBetweenBlocks:\n    enabled: false\nEmptyRule:\n    enabled: true\nHexFormat:\n    enabled: true\nIdWithExtraneousSelector:\n    enabled: true\nIndentation:\n    enabled: true\n    width: 4\nLeadingZero:\n    enabled: true\nNameFormat:\n    enabled: true\n    convention: BEM\nPlaceholderInExtend:\n    enabled: true\nPropertySortOrder:\n    enabled: false\nPropertySpelling:\n    enabled: true\n    extra_properties: []\nSelectorDepth:\n    enabled: true\n    max_depth: 3\nShorthand:\n    enabled: true\nSingleLinePerSelector:\n    enabled: true\nSpaceAfterComma:\n    enabled: true\nSpaceAfterPropertyColon:\n    enabled: true\nSpaceAfterPropertyName:\n    enabled: true\nSpaceBeforeBrace:\n    enabled: true\nSpaceBetweenParens:\n    enabled: true\n    spaces: 0\nStringQuotes:\n    enabled: true\n    style: single_quotes\nTrailingSemicolonAfterPropertyValue:\n    enabled: true\nUrlQuotes:\n    enabled: true\nZeroUnit:\n    enabled: true\nCompass::*:\n    enabled: false\n```\n. I did as you said and I got back this error:\nInvalid configuration: (<unknown>): found a tab character that violates indentation while scanning a plain scalar at line 40 column 14\nSo it sounds like there is a weird \"tab\" character in the code? However, I have formatted the \"convention: BEM\" the same way as all of the other linter options and I can't find any weird tabs that are different than the other options:\n\nDo you have any ideas? I have tried removing the tab and adding two spaces instead (even though all of the other options have tabs in front) and I am still getting an error.\nThank you very much for your help @geniou, I really appreciate it.\n. I figured out the problem...I needed to remove all of the tabs from the .scss-lint.yml file (which I added to all of my custom configuration options like convention: BEM). It looked like all of the other options were tabbed the same way, but I think this was because my editor re-set the indentation automatically.\nBelow is my new .scss-lint.yml for anyone else having the same problem.\n@geniou, thank you for taking the time to help!\n```\nSCSS-LINT\nSass linting\nhttps://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md\nlinters:\n  BorderZero:\n    enabled: true\nCapitalizationInSelector:\n    enabled: true\nColorKeyword:\n    enabled: true\nComment:\n    enabled: true\nDebugStatement:\n    enabled: true\nDeclarationOrder:\n    enabled: true\nDuplicateProperty:\n    enabled: true\nEmptyLineBetweenBlocks:\n    enabled: false\nEmptyRule:\n    enabled: true\nHexFormat:\n    enabled: true\nIdWithExtraneousSelector:\n    enabled: true\nIndentation:\n    enabled: true\n    width: 4\nLeadingZero:\n    enabled: true\nNameFormat:\n    enabled: true\n    convention: BEM\nPlaceholderInExtend:\n    enabled: true\nPropertySortOrder:\n    enabled: false\nPropertySpelling:\n    enabled: true\n    extra_properties: []\nSelectorDepth:\n    enabled: true\n    max_depth: 3\nShorthand:\n    enabled: true\nSingleLinePerSelector:\n    enabled: true\nSpaceAfterComma:\n    enabled: true\nSpaceAfterPropertyColon:\n    enabled: true\nSpaceAfterPropertyName:\n    enabled: true\nSpaceBeforeBrace:\n    enabled: true\nSpaceBetweenParens:\n    enabled: true\n    spaces: 0\nStringQuotes:\n    enabled: true\n    style: single_quotes\nTrailingSemicolonAfterPropertyValue:\n    enabled: true\nUrlQuotes:\n    enabled: true\nZeroUnit:\n    enabled: true\nCompass::*:\n    enabled: false\n``\n. P.S. I lovescss-lint` and use it every day. Amazing work!\n. Just submitted PR #231 for this. Hope this helps ;)\n. ",
    "meleyal": "PropertySortOrder config based on recess\n. ",
    "rf-": "This is an issue with the validity of your YAML. Try putting quotes around \"*list-style\".\nOn Thu, Mar 6, 2014 at 8:58 AM, Michael Schulze notifications@github.com\nwrote:\n\nIf i use an asterisk in front of a property, scss-lint gives the following error as expected:\nbash\n_typography.scss:122 [W] Unknown property *list-style\nIn my configuration file i added this special IE property:\nyaml\n  PropertySpelling:\n    enabled: true\n    extra_properties: [ *list-style ]\nNow i got this ruby error:\nbash\n/Users/ms/.rvm/rubies/ruby-2.0.0-p247/lib/ruby/2.0.0/psych/visitors/to_ruby.rb:248:in `block in visit_Psych_Nodes_Alias': Unknown alias: list-style (Psych::BadAlias)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/causes/scss-lint/issues/85\n. \n",
    "michsch": "Thank you for your quick answer. YAML is not my daily business.\n. Are you sure? In Sass 3.3.2 it's compiled correctly into margin: 0 0 1.5em 0.8em.\n. ",
    "tbassetto": "Dang, it makes sense now. Thanks a lot!\n. ",
    "manovotny": "+1\nI'd love to see this implemented as well.\nNot sure about the ability to configure the location, but I'd for sure be up for making them listed first as that seems to be the standard.\nI would also suggest lumping in @extend along with @include for Sass placeholders. \n. Same seems to be true for other border properties, ie. border-top, border-bottom, etc.\n. @sds : : \nThanks for being so kind as to rule it out and politely point me towards grunt-scsslint.\nI'll see what they have to say.\n. @sds : : \nMy bad... I should have checked their open issues. It's already been reported.\nMy sincere apologies for wasting you time. But thanks again for handling it so professionally.\n. Just in case anyone else sees this, I made the switch to grunt-scss-lint vs. the aforementioned grunt-scsslint.\nNo only does it properly support the border none / 0 warning, it is significantly faster and way more configurable.\n. ",
    "RyanWarner": "+1\n. @davidtheclark's solution is much better than my original suggestion. +1 :+1: \n. ",
    "davidtheclark": "I think in most cases putting @includes at the top of rule sets is a good idea --- but two significant exceptions make this expectation problematic:\n1. People use mixins for @media queries, and on those occasions would have very good reason for putting the @include at the end of the rule set.\n2. The other is mentioned by @jeffkamo: using mixins for vendor-prefixing, you might want to deliberately place them in sort order.\nMaybe a solution would be to modify PropertySortOrder so that it will accept specific includes at specific points, as in @jeffkamo's example, and also accept an empty include elsewhere (e.g. at the top), where it would expect to find any unspecified @include declarations. Does that sound like a good approach?\n. So what you're suggesting would make sense as an enhancement to the PropertySortOrder linter, right? That's how it works in CSSComb, I believe -- you would indicate the different groups with distinct arrays: https://github.com/csscomb/csscomb.js/blob/master/doc/options.md#sort-order\nMaybe the order configuration option could be made to accept arrays of arrays, e.g.\nyml\norder:\n  -\n    - position\n    - top\n    - ...\n  -\n    - display\n    - margin\n    - ...\n  - ...\nAnd, as in CSSComb, you'd expect a space separating groups of properties.\n. This would be an awesome addition. I like your suggested comment syntax, @geniou --- fits the standard of other linters I know. Any chance you're interested in implementing that with a PR? I'd be happy to help write tests but since I'm a total Ruby ignoramus I don't right now feel up to writing the functionality itself.\nAnd while I understand @acdha's point I do think it doesn't affect the value of this feature; and also I, like @bartveneman, have seen CSS where duplicate properties with differing units was definitely not intentional.\n. PR https://github.com/causes/scss-lint/pull/257 addresses this issue of space vs new line before the opening brace --- but I did not think of addressing \\r vs \\n differences. @dlogankeenan if you want to take a look at that PR and see if it works for you --- I'd be happy to modify it to make sure it works on both platforms.\n. Adding that the CapitalizationInSelector linter does what I'm looking for --- checks selectors --- but only for the capitalization of the first letter.\n. Here's what I'm thinking:\nyml\nSelectorFormat:\n  enabled: true|false\n  type:\n    allow: true|false\n  id:\n    allow: true|false\n    format: [user-defined regular expression that matches valid ID selectors]\n  class:\n    allow: true|false\n    format: [user-defined regular expression that matches valid class selectors]\n(I suppose we could throw in attribute selectors as well?)\nDo you think that would make for a good linter?\nIf I am able to figure out a pull request I will try (but it would be my first time writing Ruby, so might not come quickly). Otherwise, there's the idea written down, for (1) feedback, and (2) anybody else who has the desire and opportunity to work on it.\n. Yeah, thanks @golmansax! The points where it doesn't exactly match what I was thinking above are less important than what it does do -- the vital part -- which is allow for arbitrary regular expressions tested against class names. Nicely done.\n@sds I guess there's the possibility for a separate linter that would be to restrict selectors by not allowing IDs (or types)? Have you already thought about that one, or is that a valid addition? Should I open another ticket?\n. I think this is a duplicate of https://github.com/causes/scss-lint/issues/227 ---- you see it in the new SelectorFormat linter in the code but it has not yet been released.\n. I was able to reproduce this on a 64-bit Windows system. I looked into it and think it's an encoding problem. The strings returneed by source_from_range are encoded as IBM437 --- despite the @charset declaration otherwise --- so it's reading that line as a cryptic content: '\u0393\u00fb\u255d.\nGiven that \"Sass will always encode its output as UTF-8\" (docs say), I wonder if scss-lint could just take this encoding for granted and declare it somewhere. If, for example, I add Encoding.default_external = Encoding::UTF_8 to the top of linter.rb, I no longer get the erroneous TrailingSemicolon lint. And all rspec tests still pass.\n@sds If you think explicitly declaring UTF-8 encoding for the app is appropriate, where is that best done?\n. Yeah, I can do that. But I guess I was wondering since I'm so inexperienced with Ruby if there was a particular place in the app where you would customarily declare such encoding. It works for this issue if I do it in linter.rb (where the source_from_range method is), but maybe there's a better place? Any recommendations?\n. I tried to look into this a little and found some strange stuff but I'm not sure yet how to handle it --- wondering if others have insight:\nIn the specs for these two linters throwing errors I created tests using @ArmorDarks's code. The TrailingSemicolon test, for instance, looked like this:\n``` ruby\ncontext 'when interpolation is used in an attribute selector' do\n  let(:css) { <<-CSS }\n    $test: 'text';\n[class~='#{$test}'] { width: 100% !important; }\n\nCSS\nit { should_not report_lint\nend\n```\nAnd that test did not cause a lint.\nSo then I just copied the code into a test file and ran the CLI against it, and I did get the same error @ArmorDarks got.\nSo for some reason the code in the test is causing a different output from that of actual SCSS in a file.\nI looked into the TrailingSemicolon linter, and saw that at line 58 there's the code source_from_range(node.source_range), which should output the string indicated by the source_range, if I understand correctly. Well, when the breaking test is run through a spec, that value is width: 100% !important; --- but when it is run through the CLI, that value is dth: 100% !important; }\nIt seems, then, that the actual node.source_range is different?\nI was able to fix that semicolon error by changing that line 58 to source_from_range(node.source_range) =~ /\\s;[\\s]*}?$, so it accepts lines that have a brace after the semicolon (or why does it even care if the semicolon is at the end of the line?) ... but I wonder if that would be glossing some deeper problem? @sds or someone else more knowledgeable about the program, any ideas?\n. To my mind one very straightforward use of nesting that might clarify code is for pseudo-stuff and some combinators. Something like:\nscss\n.element {\n  display: inline-block;\n  color: blue;\n  &:hover,\n  &:focus {\n    color: red;\n  }\n  & + & {\n    margin-left: 1em;\n  }\n}\nI think it's pretty subjective whether you find that easier or harder to read than repeating .element in each instance. So I think @sds's proposal for a NestingDepth linter would be able to satisfy both sides.\n. This suggests to me some value in using the approach that CSSComb uses -- e.g. https://github.com/csscomb/csscomb.js/blob/master/doc/options.md#space-before-opening-brace\n-- which is, instead of specifying a particular named \"style\" like \"new_line\" that fits a predefined pattern, you allow the user to define the pattern. So for your use case @RyanWarner you could do something like:\nyml\nSpaceBeforeBrace:\n  enabled: true\n  character: \"\\n\" # or \" \" by default\nThe same pattern -- specifying the string -- could also work to allow flexibility in EmptyLineBetweenBlocks, SpaceAfterPropertyColon, SpaceAfterPropertyName, SpaceBetweenParens. (Not that I myself would use anything but new line for the first and single spaces for the rest ... but it would enable flexibility for alternate conventions, which is a good thing in a linter.)\nThat could lead to some other possible linters inspired from CSSComb like SpaceBeforeClosingBrace, SpaceBeforeCombinator, SpaceBeforeSelectorDelimiter.\nThat idea is bigger than this particular issue --- so if you think it's a good one could be split off into another.\n. We may want to go so far as to try to find or collect a list of properties that aren't covered by Autoprefixer and by default ignoring those? I guess that's kind of a rabbit hole, though. I wonder if it might even be easier to maintain a list of properties that are covered ...\n. Thinking more about this I wonder if having a list of properties/values/selectors that are covered is the only way to go. It would be more reasonable than keeping a list of all non-standard vendor properties/values/selectors. And a tweet from @ai points out that Autoprefixer can generate a list of properties covered.\nI tried generating a list with all browser versions available, and it is long and includes things I had not remembered to deal with in the pull request, like values for linear-gradient etc.:\n```\nBrowsers:\n  IE: 11, 10, 9, 8, 7, 6, 5.5\n  Firefox: 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3.6, 3.5, 3, 2\n  Chrome: 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4\n  Safari: 7.1, 7, 6.1, 6, 5.1, 5, 4, 3.2, 3.1\n  Opera: 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 12.1, 12, 11.6, 11.5, 11.1, 11, 10.6, 10.5, 10.1, 10.0, 9.6, 9.5\n  iOS: 8, 7.1, 7.0, 6.1, 6.0, 5.1, 5.0, 4.3, 4.2, 4.1, 4.0, 3.2\n  Android: 4.4, 4.3, 4.2, 4.1, 4, 3, 2.3, 2.2, 2.1\n  IE Mobile: 10\nAt-Rules:\n  @keyframes: webkit, moz, o\nSelectors:\n  ::selection: moz\n  ::placeholder: webkit, -moz- old, moz, ms\n  :fullscreen: webkit, moz, ms\nProperties:\n  transition: webkit, moz, o\n  transition-property: webkit, moz, o\n  border-radius: webkit, moz\n  border-top-left-radius: webkit, moz\n  border-top-right-radius: webkit, moz\n  border-bottom-right-radius: webkit, moz\n  border-bottom-left-radius: webkit, moz\n  box-shadow: webkit, moz\n  animation: webkit, moz, o\n  animation-name: webkit, moz, o\n  animation-duration: webkit, moz, o\n  animation-delay: webkit, moz, o\n  animation-direction: webkit, moz, o\n  animation-fill-mode: webkit, moz, o\n  animation-iteration-count: webkit, moz, o\n  animation-play-state: webkit, moz, o\n  animation-timing-function: webkit, moz, o\n  transition-duration: webkit, moz, o\n  transition-delay: webkit, moz, o\n  transition-timing-function: webkit, moz, o\n  transform: webkit, moz, ms, o\n  transform-origin: webkit, moz, ms, o\n  perspective: webkit, moz\n  perspective-origin: webkit, moz\n  transform-style: webkit, moz\n  backface-visibility: webkit, moz\n  border-image: webkit, moz, o\n  box-sizing: webkit, moz\n  filter: webkit\n  columns: webkit, moz\n  column-width: webkit, moz\n  column-gap: webkit, moz\n  column-rule: webkit, moz\n  column-rule-color: webkit, moz\n  column-rule-width: webkit, moz\n  column-count: webkit, moz\n  column-rule-style: webkit, moz\n  column-span: webkit, moz\n  column-fill: webkit, moz\n  break-before: webkit, moz\n  break-after: webkit, moz\n  break-inside: webkit, moz\n  user-select: webkit, moz, ms\n  flex: -webkit- 2009, webkit, moz, ms\n  flex-grow: -webkit- 2009, webkit, moz, ms\n  flex-shrink: -webkit- 2009, webkit, moz, ms\n  flex-basis*: -webkit- 2009, webkit, moz, ms\n  flex-direction: -webkit- 2009, webkit, moz, ms\n  flex-wrap: -webkit- 2009, webkit, moz, ms\n  flex-flow: -webkit- 2009, webkit, moz, ms\n  justify-content: -webkit- 2009, webkit, moz, ms\n  order: -webkit- 2009, webkit, moz, ms\n  align-items: -webkit- 2009, webkit, moz, ms\n  align-self: -webkit- 2009, webkit, moz, ms\n  align-content: -webkit- 2009, webkit, moz, ms\n  background-clip: webkit, moz, o\n  background-origin: webkit, moz, o\n  background-size: webkit, moz, o\n  font-feature-settings: webkit, moz\n  font-variant-ligatures: webkit, moz\n  font-language-override: webkit, moz\n  font-kerning: webkit, moz\n  hyphens: webkit, moz, ms\n  tab-size: moz, o\n  touch-action: ms\n  text-decoration-style: webkit, moz\n  text-decoration-line: moz\n  text-decoration-color: moz\n  text-size-adjust: webkit, ms\n  clip-path: webkit\n  mask: webkit\n  mask-clip: webkit\n  mask-composite: webkit\n  mask-image: webkit\n  mask-origin: webkit\n  mask-position: webkit\n  mask-repeat: webkit\n  mask-size: webkit\n  * - can be used in transition\nValues:\n  linear-gradient: -webkit- old, webkit, moz, o\n  repeating-linear-gradient: -webkit- old, webkit, moz, o\n  radial-gradient: -webkit- old, webkit, moz, o\n  repeating-radial-gradient: -webkit- old, webkit, moz, o\n  flex: -webkit- 2009, webkit, moz, ms\n  inline-flex: -webkit- 2009, webkit, moz, ms\n  calc: webkit, moz\n  max-content: webkit, moz\n  min-content: webkit, moz\n  fit-content: webkit, moz\n  fill-available: webkit, moz\n  zoom-in: webkit, moz\n  zoom-out: webkit, moz\n  grab: webkit, moz\n  grabbing: webkit, moz\n  sticky: webkit\n```\nSo the complication increases.\n. Getting https://github.com/causes/scss-lint/issues/150 taken care of would ease this issue, because deliberate hacks like the -webkit-transform @ai mentions could be manually ignored without having to universally ignore transform.\nThe idea to only lint prefixes before an unprefixed property makes sense but I do see a problem: it would depend on the authors ordering properties that way already, whereas the point of the linter is to catch people breaking conventions ... Maybe we could check whether the unprefixed property is anywhere in the rule with the prefixed property, and if not ignore it? It wouldn't make for a 100% foolproof linter, but it would still have value.\n. I've thought about this some more and here's what I think could make this linter work:\n- Check against a finite list of selectors, properties, at-rules, and values. I think the Autoprefixer list should be the baseline -- and we write tests to make sure that all of the variations it represents are covered -- but theoretically we could also create distinct lists for Compass or Bourbon if people use those for vendor-prefixing. The user could be sure that she's only being linted for vendor prefixes that she has a better option for (whether Autoprefixer or a mixin). (e.g. If she's using Compass, she'll have to manually plug in font-feature-settings prefixes, so shouldn't be flagged for those.) And proprietary, non-standard properties, like webkit-text-size-adjust @bartveneman mentioned, would be ignored because they would not be on the list.\n- Enable user to select a predefined list and/or manually include and exclude names. So if they want to use a hack they can exclude that property. Ideally, they could just ignore it inline, in the one place it is used; but until that is possible, they could ignore it altogether.\nWould it be worthwhile to adjust my PR to fit those requirements? Do you think it would be incorporated? Or would there still be too many problems/ambiguities with it?\n. Great! I made all the changes discussed here. I created a Bourbon list in addition to the base list from Autoprefixer. A Compass list could come later if people are interested.\n. It's true that it's easy enough to modify the list, so I certainly don't mind doing that for my own work and wouldn't consider the current defaults harmful. But I just raised the issue because I was kind of confused by the configuration. Isn't there almost no situation when you would establish a naming convention for elements and pseudo-selectors and maybe attributes? Like you say, you're not really free to use your own convention with those. Unless I'm wrong --- that is why it makes more sense to me that those would be turned off by default, only turned on for special occasions. I think I could only imagine myself targeting id, class, and placeholder to enforce a naming convention. (Maybe I'm overlooking something?)\n. Makes sense to me --- If there's a desire to check elements, attributes, and pseudo-selectors for things like capitalization, but those selectors don't have much of a way to fit an alternate naming convention, then they need to be turned off or we need to be able to specify conventions for different types.\nI guess it doesn't seem like overkill to me to specify different conventions, because I don't think it would be uncommon for someone to have a naming convention for classes (and IDs) that wouldn't work with elements, attributes, and pseudo-selectors, but to still want to enforce lowercase on elements, attributes, and pseudo-selectors. At some point I may try to work on an a PR for that. Or maybe someone else can get to it first. Thanks @sds.\n. Yes, @mrpavlikov, I believe that throughout SCSS-Lint what's referred to as \"BEM\" is a modified version that has become more popular than the original, it seems -- which distinguishes modifiers with --modifier instead of _modifier-name_value. I think that if the linter were to add your regex it should probably be distinguished as \"strict\" BEM or something like that. Somehow, at least, both patterns should be available, not just the original one you bring up.\n. Hm, ok. I will look into it further.\n. Well, we were able to update to the latest version of Ruby on the build server, and that fixed the problem. Whatever went wrong was probably specific to our setup if you weren't able to reproduce it.\n. Hey I'm having a good time with this, thanks. I've convinced my workplace to adopt this tool as part of a significant frontend-process-overhaul, so I'm interested in doing what I can to make sure it's as helpful as possible. And congrats on setting up an application that's so easy to understand that even someone like me, who has almost no idea what's going on in Ruby, can contribute!\n. Another possibility for this one:\nList filenames that should be imports only. Force yourself to put actual rules into organized partials. I think this would have to be off by default because I'm not aware of any established standard name we'd want to put in for an import-only --- it's totally project-specific. But it would be nice if we could use globbing (e.g. I'd way to enforce this for main.scss and for main_*.scss).\n. Would you be open to a pull request for this linter before either of those issues are resolved? I myself think I would like to have it universally enforced on my team ...\n. Noticed that this linter should probably subsume IdWithExtraneousSelector\n. I think I addressed all of the comments above. I did not add any more functionality, though; instead, I opened https://github.com/causes/scss-lint/issues/276.\n. I think I addressed all the issues mentioned above --- and some of that work sparked a few new specs.\nTwo outstanding questions remain:\n- This one https://github.com/causes/scss-lint/pull/269#commitcomment-8215969 about how to handle default configuration\n- And regarding this one https://github.com/causes/scss-lint/pull/269#commitcomment-8216055 I decided just to check if the extension was .css and ignore that way. With that simplification all the specs still pass. Realized that the other CSS directives were being ignored by the visitor because they register as CssImportNodes and not ImportNodes. Does the code now seem ok with you?\n. Huh ... that's a bummer that the Travis build fails. rspec is passing fine on both Mac and Windows for me. Any ideas?\n. Figured out the Ruby 1.9.3 build problem. So now it's just a question of whether you think this is an acceptable way to solve the encoding issue.\n. I've looked into this a little ... and it looks awfully complicated.\nIt seems to me that the first step would be being able to take a given Sass::Tree::RuleNode's parsed_rules and categorize the represented selector(s) according to one of the \"declaration types\" listed above. \nBefore I launch down that path I just wanted to ask @lencioni and @sds if you already know of any established or efficient way of doing this? If not, I'll try to figure something out when I have some time.\nAlso, if we are able to create methods like is_nested_descendent_selector? and is_nested_pseudo-element?, there's a good chance those would be generally useful methods and should probably be unit tested on their own rather than just as part of a single linter ... right?\n. Essentially this would be adding another layer to the RuleNode position in the existing order. I can certainly see the value in establishing a standard convention for this order. The point would be to avoid code like this (which currently throws no DeclarationOrder lint):\nscss\n.foo {\n  font-size: 30px;\n  @media (max-width: 300px) {\n    font-size: 20px;\n    &:hover {\n      background-color: red;\n      color: white;\n    }\n  }\n  & + & {\n    &.is-active {\n      line-height: 2;\n    }\n  }\n  .bar {\n    background: white;\n  }\n  &.is-active {\n    &:before {\n      content: \"wow\";\n    }\n  }\n  @media (min-width: 1000px) {\n    font-size: 50px;\n  }\n  &:before {\n    content: \"oh no\";\n  }\n  span {\n    color: green;\n  }\n}\nHaving seen and dealt with some stuff like that, I think it would be nice to establish a regular logical pattern in a styleguide regarding nested rule node ordering, and then it would be nice to be able to enforce that pattern, as with the rest of scss-lint. \nSo I guess I don't feel like having such a convention would be \"overkill\"; but I do wonder whether that convention could be automatically enforced, or if there would be too many exceptions, ambiguous situations, etc., and we just wouldn't be able to pull it off effectively --- so the convention would be have to manually checked. To me that is the vital question about this linter. I would consider the linter overkill in a way if in practice it had to be too inflexible for real world SCSS.\nRegarding granularity: Above I listed the most granular breakdown I could think of; I could also imagine grouping descendants and siblings together for less granularity:\n- pseudo-elements\n- pseudo-classes\n- chained selectors (e.g. &.is-active)\n- descendants and siblings\n- nested media queries\nRegarding comma sequences: I don't know. Maybe we wouldn't care unless the comma sequence was nested; and if it were they would be enforced in the same way? Not really sure about that.\n. While I wouldn't say an ordering preference is \"arbitrary\", I definitely agree that it needs to be configurable as people's reasoning will differ. I also share the concern that there might be too many edge cases, variations, etc., to make this enforcement automated.\nHonestly, I'm probably not up to working on a PR for this right now. So if you feel like closing the issue, go for it. Or leave it open to see if others contribute opinions or PRs. Thanks.\n. Any reason you can't just exclude 3rd party stylesheets: https://github.com/causes/scss-lint#excluding-files ?\n. Here are the options that I am aware of (there may be more):\n- Set ignored_names in your SelectorFormat options: https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md#selectorformat\n- Put your overrides in a distinct file that you exclude via config\n- Wait for https://github.com/causes/scss-lint/issues/150\n. Good to know. My lack of higher mathematical education shows. Thought I was catching a typo -- sorry!\n. Good idea.\n. Ah, an aborted experiment. I'll update that test.\n. ",
    "martijnrusschen": "I'm getting the same error when using this gem in my application. Added the gem to my gemfile and started it with the following command: bundle exec scss-lint app/assets/stylesheets/\n/Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:35:invisit': undefined method visit_method' for Sass::Script::Tree::Literal:Class (NoMethodError)\nUsing the sass-rails gem (version 4.0.1). As you can see it's using Sass 3.3.2 so that might be no problem. Any idea why this is going wrong?\n. I continueed debugging and found out that's working fine on our Continuous integration server. When installing the gem system wide and using just the command scss-lint app/assets/stylesheets/ it also works fine for me. I'm not sure if this is a system problem or an issue with the gem.\nStacktrace:\nMartijns-MacBook-Air:core mrusschen$ bundle exec scss-lint app/assets/stylesheets/\n/Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:35:in `visit': undefined method `visit_method' for Sass::Script::Tree::Literal:Class (NoMethodError)\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `block in visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `map'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:36:in `block in visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:78:in `visit_prop'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:36:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `block in visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `map'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:36:in `block in visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:88:in `visit_rule'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:36:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `block in visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `map'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:52:in `visit_children'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/base.rb:38:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:15:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/visitors/set_options.rb:5:in `visit'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/tree/node.rb:100:in `options='\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/engine.rb:415:in `_to_tree'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/sass-3.3.2/lib/sass/engine.rb:305:in `to_tree'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/engine.rb:20:in `initialize'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:38:in `new'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:38:in `find_lints'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:29:in `block in run'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:28:in `each'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/runner.rb:28:in `run'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/lib/scss_lint/cli.rb:55:in `run'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:7:in `block in <top (required)>'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:5:in `tap'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/scss-lint-0.7.0/bin/scss-lint:5:in `<top (required)>'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/bin/scss-lint:23:in `load'\n    from /Users/mrusschen/.rbenv/versions/2.1.0/bin/scss-lint:23:in `<main>'\n. Thanks, overlooked the version numbers and hoped not pining at all would work fine.\n. ",
    "lightswitch05": "Both rails 4.0.4 and rails 4.1.0r1 force sass-rails, '~> 4.0.2'source. My problem is amplified by bootstrap-sass requiring sass, '~> 3.2'. I will continue researching options, thank you for the quick response!\n. ",
    "jtara": "It wasn't clear to me that linters can have options. Can you point me to one that has options, so that I can use it as a prototype?\nIn this particular case, I don't think there is any use case for specifying the number of spaces if it is more than one. Not sure what your conventions, are, though, with regard to options.\nHere, I think the possible options are: zero or more spaces, one space, or one or more spaces. So, those could be encoded numerically as 0, 1, -1, or 0, 1, any positive number. Or use character strings. 0, 1, \"any\".\nThis one is simple enough that another alternative would be to keep the existing SpaceAfterPropertyColon and add SpacesAfterPropertyColon, and not have any option.\nI'll take a look at all of the linters that deal with spacing, since I like to break rules if it makes code more readable. (Spacing out to line-up properties.) But not when it doesn't (eliminating all space after the colon.)\nI currently exclude SpaceBeforeBrace, NameFormat (I used underscores, but don't want to lose the rest of the rules!), EmptyLineBetweenBlocks, SpaceAfterPropertyColon.\n. ",
    "Anahkiasen": ":+1: \n. Wouldn't that possibly mess with the specificity of some rules ?\n. Shouldn't good be\n.foo > .bar {\n  color: red;\n}\nSince it's the only property here?\n. Hm ok I get it, then yeah :+1: \n. Well no because I still want the style themselves, properties etc to be linted, just not the selector.\n. Ah yes sorry misread you. It works indeed as a workaround in the meantime, still think this would make an useful addition but will let @causes decide\n. Thanks! In how long can we expect a new release ? I'd really like to use the new concentric option too.\n. No I provided the YAML in case I was missing an option or something. I'm not sure what to paste from the SCSS file itself, it doesn't really provide a faulty line. I'll try to isolate it see what I find.\n. Ok I isolated the failing case, it happens when you interpolate a function as a selector:\n``` scss\n{foo()} {\n}\n```\nPer example when using Compass's selector helpers.\n``` scss\n{headings(1, 3)}\u00a0{\ncolor: red;\n}\n``\n. Sorry duplicate of #198\n. No subproperty was just to \"name\" it, it's not official. But I understand the intention, got it.\n. Well my guess is background should come before background-image no ? Otherwise you're overwriting your gradient anyway\n. :+1: \n. Well yeah it's--modifiernot_modifierno?\n. Yes indeed I use the variant [Harry Roberts](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) popularised, never really encountered the \"original\" one, always saw this one being used.\n. :+1: \n. :+1: \n. No actually Harry here is advocating a BEM syntax which is not the standard (although that's the one I use too). To lint according to this article's syntax you need to setconventiontohyphenated_BEM` IIRC\nHence this at the end of the article:\n\nSo that\u2019s BEM (or a slight variation thereof)\n. I'd love to see that in\n. Isn't that already hyphenated_BEM ?\n. Would really love this, in particular for properties order which is really painful and long to correct on big codebases\n. Yeah I guess, valid point. I think my issue with VariableForProperty overall is that it doesn't take into account how many times a color is used. I have a lot of \"one off\" colors where it would actually be counterproductive to put them in variables.\n\nI think the VariableForProperty should have a configurable threshold of how many times a value is used before it is recommended to be put into a variable. Like \"Ok you used color: black once through the entire app, you can leave that\" but \"Ok you used #CCCCCC 5 times in all your stylesheets, would be best to put it in a variable\". Would that be more sensible?\n. :+1: \n. :+1: for this, absolutely agree. I would maybe add a rule to disable it on certain properties (like the variables linter). I know our designers use em/rem/etc on most things but pixels on certain things that do require them so that'd allow us to use the linter efficiently.\n. :+1: \n. Well currently the variables thing is easy to do by adding z-index to the VariablesForProperty linter\n. Well no, the original issue was about preventing z-indexes from being too random\n. Just basically a linter that takes the lowest and highest z-index and asserts that the range isn't greater than a configured X number, default being 10 per example or something. While VariableForProperty solves half of the problem, it doesn't prevent a bad developer from spamming nonsensical z-indexes like 99999999.\n. I'd like that as well. Makes more sense to me to have special cases after default styles\n. :+1: I would love a linter to enforce unitless line heights\n. I didn't even know PropertyUnits could do that. That solves it for me personally\n. > because everybody wanted to do sth. just a little bit different :/\nWouldn't that go, like, against the purpose of having a linter in the first place?\n. :+1: I try to do this myself but one sometimes slip from me, would love a rule to enforce it.\n. :+1: would love that\n. ",
    "arcanis": "+1\n@edhenderson The issue is not to put newlines between properties (we can), but to be warned when we forget to do so. That's something that exist in CSSComb, for example.\n. ",
    "aeberlin": ":+1: \n. :+1: \n. :+1: (promise I'm not a bot, there's just a lot of good feature requests here :smile: )\n. :+1: \n. Thanks for taking the time to review my pull request, @sds.\nTo answer your question, the --out flag is not so much a replacement of IO redirection as it is an enabler of multiple formatting options. Such a feature is crucial in maximizing the integration capacity of scss-lint with regards to development and build environments.\nFor example, say you have a build environment which requires a machine-parseable report (e.g. XML) for automatic background processing and the default reporter for human readable results digest of the build log. Admittedly, you could simply run scss-lint as many times as you have desired formatting options, but this is inefficient at worst and hackish at best.\nI believe this functionality can be integrated without breaking backwards compatibility, and this additional commit (reference: https://github.com/causes/scss-lint/commit/6617ba9c9e3cf8572264c9f63fed5c65a94ab4da) should satisfy that goal. To demonstrate, in my previous commit, the DefaultReporter was unintentionally executed every time on :stdout, regardless of what --format you specified.\n% bundle exec scss-lint --format XML foo.scss \nfoo.scss:111 [E] Invalid CSS after \"...d-image: image_\": expected \";\", was \"@import \"compass\";\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?><lint><file name=\"foo.scss\"><issue linter=\"\" line=\"111\" column=\"1\" length=\"1\" severity=\"error\" reason=\"Invalid CSS after &quot;...d-image: image_&quot;: expected &quot;;&quot;, was &quot;@import &quot;compass&quot;;&quot;\" /></file></lint>\nNow, as it should be, the DefaultReporter is overwritten by specified formatting options.\n```\n% bundle exec scss-lint foo.scss\nfoo.scss:111 [E] Invalid CSS after \"...d-image: image_\": expected \";\", was \"@import \"compass\";\"\n% bundle exec scss-lint --format XML foo.scss\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n```\nI understand your hesitation, but this would be a great feature to incorporate.\nLet me know if you have any further questions or need me to provide more tests.\nThanks, cheers!\n. Can we get this merged?\n. Hey, @sds. No worries, I'm just glad you haven't lost interest. I agree, regarding the tuples, and I went ahead and made the changes you requested, all great suggestions. I will push the changes shortly after I verify tests pass.\n. Thanks! Cheers.\n. Great. I definitely prefer the expect syntax there, I was simply trying to match test style.\nThanks for merging everything in. guard-scss-lint is nearly ready to go, much appreciated!\n. When do you think, approximately, the next gem release will be? (including these merged commits)\nThanks, cheers\n. Perfect, cheers!\n. ",
    "chris-dura": "gosh, I wish the devs on my team would address bugs this quickly, thanks @sds !\n. yep, that's a much better config option name :thumbsup:\n. I would argue that the problem in the bad .bar example, isn't that there are multiple properties on a single line, but that the props are not on the same line as the respective selector.\nThere have been some configuration enhancements to some linters to allow certain preferences when it comes to single lines, and if you consider this a valid pattern:\nscss\n.foo    { &:before { content: '^'; } }\n.bar    { &:before { content: 'v'; } }\nThen you should probably consider this a valid pattern as well (even though it's a little weird):\nscss\n.foo    { color: red;     background: blue;   }\n.bar    { color: magenta; background: yellow; }\nSo, any linter should be configurable to allow that pattern.\n. The result is the same, but this linter is about using & when you don't have to, not trying to \"unnest\" rules (there are other linters for that).\nSo, a better example might have been:\nBad:\nscss\n.foo {\n   & > .bar {\n      ...\n   }\n   & > .widget {\n      ...\n   }\n}\nGood:\n``` scss\n.foo {\n\n.bar {\n      ...\n   }\n.widget {\n      ...\n   }\n}\n``\n. did you try quoting the file path (like in the doc examples)?... also, make sure the path is relative to thescss_lint.yml` location.\n\nexclude:\n - 'app/assets/stylesheets/libraries/reset.css.scss'\n - 'app/assets/stylesheets/libraries/foundation.css.scss'\n. This doesn't mean it's not an interpolation bug, but what happens if you put a semicolon after your $test variable declaration... \nscss\n$test: 'text';\n. Sass 3.4.3 (Selective Steve)\nscss-lint 0.34.0\nSorry, my example was pseudo-code, not straight from my codebase... and my example code, as you said, is not throwing an error. So, it must be something else around that line in my actual code causing that line to report a lint error... \nI'll troubleshoot my codebase and see if the error is actually indicative of some other bug. Feel free to close this issue or leave it open.\n. I do believe that is exactly what https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md#shorthand does?\nWith that linter enabled both 0 1px 0 and 0 1px 0 1px should throw errors, recommending the more concise 0 1px.\n. > Why not name the variables $foreground and $background (or whatever makes sense in your context)?\n:+1: \n. More \"readable\", maybe... but the example below is arguably more \"semantic\". Attempting to enforce better semantics, which should translate to better code \"understandability\", is one major goal of scss-lint.\n``` scss\n$link-color: #3399ff;\n$link-color-visited: #9966ff;\n...\na {\n    color: $link-color;\n    &:visited {\n        color: $link-color-visited;\n    }\n}\n``\n. Can't you just pass a config file by using the--config` argument in the command...\nbash\nscss-lint project/**/*.scss --config ~/your/home/directory/scss-lint.yml\n. > but I don't want to create a generic $black variable just to use #000 to use in sass color functions\nWhy not? I agree with you that this seems a little silly:\n$black: #000;\nBut, it's still typically a better practice than using raw hex values...\nBut, that being said, it actually negates a good benefit of using variables, which is the opportunity to apply some semantic meaning to these color values. Think about how you're actually trying to use the color \"black\". For example, imagine it's going to be the default/primary text color for your site. What if, for some reason, you want to change the look and feel so that now the text color is just a really, really dark grey? You now have to go replace all the instances of #000 with #333. And having $black: #333; is an obvious smell.\nSo, instead you should consider an approach where you actually attach some semantics to the variable, so even if you change the color of your site from black to green, you could just change it in one place, and the actual CSS rules are still meaningful... just as a for instance.\n```\n$primary-color: #000;\n$inverse-color: #fff;\n$form-button-bg: mix($color-variable, $primary-color);\n```\n. >  If we use a particular color for a border and a link, we are specifically choosing for them to be connected. When one changes, all are supposed to change.\n\n... extra and unnecessary work, because for us, usage distinction isn't important.\n\n@karmasalad -- I would say the exact opposite can easily be true. And, in most of my projects it is. I've indeed had to change a color in all cases... e.g. our brand identity is no longer blue, so now we are red. \nHowever, it's just as often that a design changes where, for example, we still want borders to be blue, but only the links should now be red. Or, in a project I'm working on now, there's a high-contrast a11y \"mode\". In that mode, some usages need to be switched from blue to yellow. But, wholesale switching every blue to yellow would actually make some areas less accessible, so we need to make distinctions in how and where the colors are used.\n. > Rule of Silence: When a program has nothing surprising to say, it should say nothing.\n:+1: \n. In my test, both of these snippets produce the same CSS...\n``` css\n&_form {\n  display: flex;\n}\n&_form > * {\n   flex-grow: 1;\n}\n&_form > * + * {\n   margin-left: $double-gutter-width;\n}\n``\n. MDN recommends in this particular case that you might want to useinheritinstead ofinitialsincecolor` is an inherited property:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/initial\nThat being said, your question is still valid. It seems reasonably similar to the logical exceptions that already exist for things like transparent or currentColor.\n. >  so you are technically violating the linter in this case.\nYeah, I just meant the documentation didn't indicate that the linter was checking for validity of the URL, just that protocols and domains should not be in there.\n\nIs there anything wrong with just replacing the string CACHE-VERSION (without braces)?\n\nprobably not.\nThanks!\n. fixes https://github.com/brigade/scss-lint/issues/699\n. The PropertySpelling linter would only pick up mistakes in the property, not the value of the property. So, if it was text-algin: center, the linter would pick it up.\nThere's a way to disallow certain units from being used in property values, but not sure there is currently a way to blacklist a misspelled (or alternative spelling) of a valid value.\n. Isn't this like saying background: blue; is not equal to background: no-repeat;?\nYou're providing values to the shorthand that override completely different properties.\n. Following that rationale would cause every tool that uses a Checkstyle plugin/addon to be listed in this project's README, which obviously is not practical. The Checkstyle scss-lint formatter is germane to the scss-lint tool itself; whereas, every tool that has a Checkstyle plugin/implementation are not. I think @sds intent was just to provide an example of how a user might use the output, not to create an exhaustive list of workflows and tools that could use it.\nI think simply knowing that scss-lint can output Checkstyle format is enough for users who want to use Checkstyle in their tooling.\n. ",
    "drublic": "Thanks for the answer. Actually my version is 0.20.1 which is kinda weird since I just updated a couple of days ago. Updated now!\n. ",
    "yujinakayama": "\nThis means we'll likely have to add some logic to adjust the Location that is returned based on various edge cases on a per-linter basis, or submit upstream fixes to sass and hope they get merged in a reasonable amount of time.\n\nI think the latter is reasonable.\n\nWould this be something you'd be willing to explore?\n\nI'll do, but it would take a while and may be done step by step. Also it would be helpful if you could share some part of linters. :) So I think the workflow would be like this:\n- Introduce the Location class.\n- Pass line number as an integer to the new Linter#add_lint in all linters to keep them reporting the same line number as before.\n- Also, reporters does not emit column information as before so that nothing is changed in appearance.\n- Probably the above changes should be merged into master at this time.\n- Check if each linter can report correct column information with Sass::Source::Range and adjust it one by one.\n- Add column support to reporters when all are done.\nThoughts?\n. Thanks!\n. I didn't change the output of the default reporter intentionally since the reporter may be used by external tools currently and changing it breaks backward compatibility.\n. ",
    "zanettin": "just tried the option but it didn't seam to work for me\n// backgrounds\n&.section-gray-light            {   background-color: $color-gray-light;    }\n&.section-green-light   {   background-color: $color-green-light;   }\n&.section-white         {   background-color: $color-white;         }\nconfig\nSpaceBeforeBrace:\n    enabled: true\n    style: space # or 'new_line'\n    allow_single_line_padding: true\nerrors:\n[17:20:15] _shell.scss:23 [W] SpaceBeforeBrace: Opening curly brace in a single line rule set `{` should be preceded by at least one space\n[17:20:15] _shell.scss:24 [W] SpaceBeforeBrace: Opening curly brace in a single line rule set `{` should be preceded by at least one space\n[17:20:15] _shell.scss:25 [W] SpaceBeforeBrace: Opening curly brace in a single line rule set `{` should be preceded by at least one space\nUPDATE:\ni use tabs instead of spaces and this seams to occure the error. that should be handleable. thanks\n. ",
    "nschonni": "Didn't make much progress with this, but I thought I'd share the spec file I came up with.\nhttps://gist.github.com/nschonni/11133280\n. :+1: Thanks for a great tool\n. Sorry, my ruby is non-existant right now, but maybe I'll have to re-learn :wink: \n. I think you're probably right, here is the actual rule that finally worked\nscss\n%basic-font-format {\n    display: block;\n    font-family: \"gcweb\";\n    -webkit-font-smoothing: antialiased;\n    font-style: normal;\n    font-variant: normal;\n    font-weight: normal;\n    line-height: 1;\n    text-decoration: none;\n    text-shadow: 0 0 1px rgba(0, 0, 0, 0.3);\n    -webkit-text-stroke: 1px transparent;\n    text-transform: none;\n    transform: rotate(0);\n}\n. Thanks @geniou :+1: \n. @chris-dura you make a good point that maybe this is more than 1 rule. My original intent was more for the .foo case, but thought of the .bar example as I was typing up the issue.\n. Thanks, that's a good idea!\n. I think those are good ideas, but I'm not sure if I'd try to tackle those for the first pass (my Ruby is weak :wink:)\nThe first example I explicitly ignored, but may make sense for a broader \"DuplicateSelector\" rule.\nThe second one is interesting, but would require normalizing the rule before hashing plus some sort of explanation of the matching. I'm one of the \"nest all the selectors\" camp, so I don't think I'd tackle it.\n. Good catch with the media and includes!\n. @sds it might be helpful to have the reporters print the lint name like Lint_name: description so it is easier to look up the rule.\n. Dupe of #138, which I have a PR submitted for it #140 :wink: \nMight be a good extra test though since mine didn't test vendor prefixing\n. @kaelig that is what the proposed HexLength linter does :wink:\nI believe the shortening of the hex code depends on the output style (or the production flag?) in Sass compilation.\n. Think this file got copied from hex_utils\n. Guessing because of the + filename\n. Typo? style or stype\n. Maybe case: upper, case: lower, and case: any\n. I wonder if this should only match if it is =#\\h{8}, or is the MS/alpha transparency valid in any other places\n. ",
    "anselmh": "Could we just get a notice instead of an error maybe? This could be helpful\u2026\n. If you don\u2019t want to support this by default (I\u2019d love to set this also as option), #161 could help here.\n. ",
    "polybuildr": "CSSLint does this in an interesting way by ignoring duplicate properties if they're on consecutive lines.\n. ",
    "PCateNumbersUSA": "I like the way CSSLint does this as @polybuildr mentioned. Added this as an option would be great.\n. ",
    "jfelchner": "Personally I'd love it if there was another linter that could lint that all the values were lined up, but I'm not sure how feasible that would be.\n. @geniou if you're interested in pairing on an option to the linter to align values, I'd love to do it!\n. @sds absolutely.  Especially with regards to the \"not enforcing a specific number of spaces\" idea.\n. @geniou let's plan a time to do a Hangout and work on this. :smile:\nShoot me an email at info [at] thekompanee.com\n. YESSSSSSS!!!!!!!!!  Thank you @sds!!\n. ",
    "FWeinb": "Thanks for the fast fix. I  rerun scss-lint on SassyJSON with SpaceBeforeBrace included. Braces in comments shouldn't be taken into account. \nReduced test case:\n``` scss\n//  ({x})\n```\nWill emit:\nshell\ntest.scss:1 [W] Opening curly brace `{` should be preceded by one space\n. ",
    "ackernaut": "I would personally like to be able to enable or disable this proposed linter. Writing a single property per line would be the default for most stylesheets in the projects that I work on.\n. Thank you!\n. I agree that enabling/disabling all or specified linters with inline comments would be a big win. I could help test if someone forks for this feature.\n. :+1: thank you!\n. ",
    "sjdemartini": "Thanks for the comment. This seems to parse correctly with pyscss; I hadn't actually tried it with sass. Good to know. Thanks for looking into it!\nOn a separate note, I'll be making a pull request to fix the XML escaping issue I filed.\n. ",
    "shankarcabus": "For this, try:\n$size: 40em;\np.#{$name} {\n  font-size: ($size/10);\n}\n. ",
    "iansinnott": "Ah thanks, missed that. Still doesn't work though. I renamed the file and ran:\nscss-lint -c .scss-lint.yml sass/style.scss\nBut still no luck... The file get's linted fine, showing lint errors in the terminal but it's still showing PropertySortOrder errors which should be disabled.\n. Wow, that was obvious. Totally forgot to check the version... I was running 0.17. Updated to HEAD and now it works fine. Thank you @geniou for the quick response and helping me solve a silly problem.\n. ",
    "B2o5T": "thank u guys very much, it's amazing description, I think you need to add a link to it on the main description\n. ",
    "roadhump": "It seems more easier now to add case: any # or lower option to linter now. \n. ",
    "emiloberg": "@edhenderson See the example as what it is, an example. There are other instances where an ignore would be handy. A, maybe better, example is: My WCM has a variables.scss which I don't want to override (as that'll make life hard when updating etc). However I do want to reuse the variables in it, therefor I include it in my \"custom\" scss. All fine and dandy, the small problem is that the variables - for some reason - are in CamelCase meaning a $my-variable: $fromVariablesFile will stir up lint. In this example, what I'm saying is that I do want the NameFormat rule, but ignore it on some few instances. _shame.scss could help with that though! Thanks for the tip!\n@sds cheers!\n. ",
    "trotzig": "@emiloberg I'm with you. I used to program Java, and use Eclipse as the IDE. If there was a code warning in a class, you could add a @SuppressWarnings to avoid being bugged about it. That being said, as @sds mentioned it might require a good deal of work. \n. Thanks for the pull request @philgruneich, and welcome to the world of Ruby!\n. It would be good if you could add a test for this new behavior as well. There is already a test file for this linter in spec/scss_lint/linter/indentation_spec.rb. Even though you might not know rspec and all the details of ruby, I think you could follow the pattern in that file. \nIf you have a look at the block that starts with context 'when the indentation width has been explicitly set' do you should be able to figure out how to change the config before running the test.\nTo run the specs locally, just type rspec in your terminal from the root of the project.\n. I'm glad you're enjoying it! Those added commits both look good. Let me know if there's anything I can help you with in order to get the environment setup for running the tests.\n. Thanks @Harmageddon!\n. Hi @Steffen185, and thanks for using scss-lint!\nThis seems to be a regression in 0.26.0. I just tried the above example in 0.25.1 and it didn't report a lint. Probably related to https://github.com/causes/scss-lint/commit/58689b1d18c7449509168facb248fdf0ab772310 . \nI'll see if I can come up with a fix for this. Thanks for providing such a simple repro case!\n. I've pushed a fix to my scss-lint fork so that you can check it out https://github.com/trotzig/scss-lint/commit/9381c20bdfaf30db73ac060e2519f87185430fb3 . This commit is also pushed to our internal code review and will hopefully get merged soon.\n. Hrm, I'm going to need some more time on this. Thanks for digging deeper into this, and for adding yet another repro case!\n. I didn't mean to close this issue just yet. There's another commit coming for the second case.\n. That second commit (f955035eede38), closes this issue. Thanks for the reports @Steffen185!\n. Could you post the whole file itself? Or you could start cutting the file in halves and re-run scss-lint on it until you've narrowed down a block. \n. Awesome @Anahkiasen, that helps a lot!\n. Hi @kaelig, and thanks for using scss-lint!\nI like the suggestion, and I believe this thread covers most of it: https://github.com/causes/scss-lint/issues/150\n. Hi @chmuibk! Look above the @import line, there's probably something that hasn't been closed properly there. I managed to reproduce your issue with this scss:\nscss\n.foo\n@import \"compass/reset\";\nI hope that helps!\n. Did that help? Feel free to re-open this issue in case you're still seeing problems!\n. Hi Jeroen,\nYou should be able to switch to the hyphenated_BEM convention in your scss-lint config.\nyaml\nlinters:\n  SelectorFormat:\n    convention: hyphenated_BEM\nSee these issues for more detail: https://github.com/causes/scss-lint/issues/318, https://github.com/causes/scss-lint/issues/254. \n. Are you able to install other gems? \n. Thanks, I'm glad you were able to find at least a temporary solution.\n. Hi @teoljungberg! I'm glad to hear Thoughtbot is using scss-lint! (I've heard that you're also using React, which is even more awesome, but that's unrelated). \nWrapping these strings in backticks seems like a good idea. I'm just running the commit through an internal code review tool, but expect it to be merged soon. \n. Merged in https://github.com/causes/scss-lint/commit/09eee7e42d139602d6c94127b8a3a20c27a17e1a. Thanks for the contribution!\n. Alternatively, we could also write a linter that behaves similar to the ColorVariable linter, where only variables are valid for z-index. Then you can have a global configuration for all z-indexes and just reference them when you need them. This is what we do at Brigade. Here's our global configuration:\nscss\n$z-index-menu: 100;\n$z-index-navigation-main: 200;\n$z-index-floating-action-button: 300;\n$z-index-modal-wrapper: 400;\n$z-index-toast: 500;\n$z-index-n-progress: 600;\nI'm not actually sure why we leave a one-hundred gap in between. Since we have full control over the values, we might as well just use 1-6. \n. Ah, I forgot about that linter! Great that you mentioned it, I just spent a bit of time making sure that all our z-indexes were in fact variables (a few instances didn't use variables in our codebase). I'll make sure to add that to our project's scss-lint config.\n. I'm closing this issue now as it seems like we have something good enough in place already. Feel free to reopen if you think we need a linter more closely targeted at z-indexes.\n. Alright, cool. I'm happy to keep this open until we have something else. The VariableForProperty linter seemed enough to me. The upside of having that linter too is that you have to semantically name your z-index values. The names make it easier to reason about what the value means. Though I have to admit that it's hard to come up with good names.\n. Hi @brauliobo! This was previously discussed in https://github.com/brigade/scss-lint/issues/343.\n. This doesn't seem to be a bug in the scss-lint project. I tried to reproduce it with a simple test:\nbash\n\u2a20 echo \".foo {}\" > \u00f6rnsk\u00f6ldsvik.scss\n\u2a20 scss-lint \u00f6rnsk\u00f6ldsvik.scss\n\u00f6rnsk\u00f6ldsvik.scss:1 [W] EmptyRule: Empty rule\nAre you using the linter-scss-lint (https://atom.io/packages/linter-scss-lint) plugin for Atom? This might be a bug in that project. If so, I suggest you file the issue there and see what they say.\nBy the way, yay for \u00f6ml\u00e4\u00e5uts!\n. Can you check so that you are running the same version of scss-lint on the two os:es? It would also be good to see the contents of .scss-lint.yml. I'm running scss-lint on my mac without issues. \n. When I run scss-lint with that file, I get an error:\n`` bash\nhenrictrotzig@Henrics-MacBook:~/scss-lint-test\n\u2a20 scss-lint -v\nscss-lint 0.42.2\nhenrictrotzig@Henrics-MacBook:~/scss-lint-test\n\u2a20 echo '.foo {\n\u21b3 border: 0\n\u21b3 }' > test.scss\nhenrictrotzig@Henrics-MacBook:~/scss-lint-test\n\u2a20 scss-lint test.scss\nundefined methodkeys' for nil:NilClass\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/config.rb:96:in merge_wildcard_linter_options'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/config.rb:72:inload_options_hash_from_file'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/config.rb:19:in load'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/cli.rb:112:insetup_configuration'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/cli.rb:45:in act_on_options'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/lib/scss_lint/cli.rb:27:inrun'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/scss_l\nint-0.42.2/bin/scss-lint:6:in <top (required)>'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/bin/scss-lint:23:inload'\n/Users/henrictrotzig/.rbenv/versions/2.2.3/bin/scss-lint:23:in `'\nReport this bug at https://github.com/brigade/scss-lint/issues\nTo help fix this issue, please include:\n- The above stack trace\n- SCSS-Lint version: 0.42.2\n- Sass version: 3.4.18\n- Ruby version: 2.2.3\n- Contents of /Users/henrictrotzig/scss-lint-test/.scss-lint.yml\n\u2192 exit status: 70\n```\nThe problem is that the linters in the yaml file aren't indented (everything after linters: should be indented one step). If I indent those, it works:\nbash\nhenrictrotzig@Henrics-MacBook:~/scss-lint-test\n\u2a20 scss-lint test.scss\ntest.scss:1 [W] TrailingWhitespace: Line contains trailing whitespace\ntest.scss:2 [W] TrailingSemicolon: Declaration should be terminated by a s\nemicolon\n. I'm glad we figured it out. :)\n. You could make it a soft dependency (i.e. leaving it out from the gemspec) and document having to install it manually as part of running --profile (or however we end up running it).\n. Whoops, didn't mean to close!\n. I might have misunderstood something here. But if you want to treat everything as warnings, why don't you set severity to warning on all lints? \n. @ryanlloydfrench Judging by your example, I believe you should switch to hyphenated_BEM (which is that other syntax @widoz is referring to). According to \"strict\" BEM, modifiers use a single underscore. \n. Thanks @barraq! I'm waiting to hear back from a person with more context on the setup. I'll get back soon. . Thanks for the contribution @barraq! I'm going to include this in a 0.52.0 release which will be published as soon as I have permissions to push to rubygems.org. . Okay, it's been released now. . This sounds like a bug to me. I don't have time to look into this myself, but we're definitely open for a PR fixing this. . Hi @yoanmalie! I'm not sure I understand what you're trying to do. Do you want scss-lint to fail when a property is missing (omitted)? . Ah, okay. Thanks for explaining that. \nBy looking at the specs for this, it looks like we only report lints if ignore_unspecified is disabled, and the unspecified properties appear in the middle somewhere. If they are listed at the bottom the check will pass. See https://github.com/brigade/scss-lint/blob/da9edb7a4cbade21eccef4b0dd41c1e10a249448/spec/scss_lint/linter/property_sort_order_spec.rb#L307 for context. \nCan you verify that this is the behavior you're seeing too? If not, would you be willing to take a stab at fixing this in a PR?. That's okay. \nI'm trying to produce a repro case locally, but I can't seem to force the behavior you're describing. Perhaps you can help me out here? \n```sh\n\u2a20 echo \"\n\u21b3 PropertySortOrder:\n\u21b3   enabled: true\n\u21b3   ignore_unspecified: false\n\u21b3   order:\n\u21b3     - display\n\u21b3     - position\n\u21b3 \" > .scss-lint.yml\n\u2a20 echo \"\n\u21b3 .foo {\n\u21b3   display: block;\n\u21b3   top: 2px;\n\u21b3   position: absolute;\n\u21b3 }\n\u21b3 \" > styles.scss\n\u2a20 cat styles.scss | scss-lint\nstyles.scss:4:3 [W] PropertySortOrder: Properties should be ordered display, position, top\n\u2192 exit status: 1\n\u2a20 scss-lint -v\nscss-lint 0.52.0\n```. > It's could be nice if unspecified properties can be better visible in the warning.\nAh, that's a good idea!\nI'll change the title of this issue to make it clearer what change we want. I don't have the bandwidth to take this on myself, so we'll have to rely on the open-source community to help out. . I think you might get more luck posting this in the linter-scss-lint project: https://github.com/AtomLinter/linter-scss-lint/issues. I believe this is a duplicate of #794. Closing, let me know if you disagree!. What are the new attributes you're looking to add? Can you file a PR instead of the gist? I'll be happy to review it. . This is quite a big change to the order. Could you explain the reasoning a little? For instance, you've moved z-index from the \"other\" group into the \"box\" group. . Thanks. We're not using this rule ourselves at Brigade, so it would be good to have some outside feedback by people who use it. \nI'm pinging a few people who have made contributions to smacss in the past, to see if they have any input: @danny-andrews, @tobiashm, @bkzl, @ingdir, @tgecho. . The Travis failure is for the jruby build, most likely not related to your changes. Thanks @Yimiprod for contributing to this project!. I can't find the NoMisspelledProperties linter here: https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md\nDid you mean PropertySpelling? . Glad it worked out. . It looks like this might be a limitation in how LengthVariable works. We'd be happy to look at a PR fixing this!. Ouch. Can you help narrow this down by perhaps reformatting that if-statement a little and see if there is any change? . Okay, good to know. \nI don't have much time to focus on this now, so if you want to take a stab at it, I'd be happy for a PR.. Thanks!. > we use variables in our css sometimes because it is put into a cms\nCan you explain this a little more? Is the ${siteId} variable part meant to be in the serialized css code, and your cms handles replacing it (in a post-processing step of some kind)? In that case, I think it would be more pragmatic to just turn off the UrlFormat check. . Can you provide a small repro case for this behavior? I'm not able to reproduce it: \nbash\n\u2a20 echo \"\n.foo {\n  background: url('/foo/${someVar}/bar.png');\n}\n\" | scss-lint --stdin-file-path foo.scss\nyields no errors.\nAlso, it would be helpful if you could report back what version of scss-lint you are using. . Thanks! It turns out that my repro case had a bug. This will correctly reproduce the issue: \nsh\n\u2a20 echo \"\n.foo {\n  background: url('/foo/\\${someVar}/bar.woff');\n}\n\" | scss-lint --stdin-file-path foo.scss\nI don't know if it's worth the added complexity of being able to exclude certain instances of urls being used in your code. Unless you're able to target specific subsets of your tree using the exclude configuration, I think you're better off disabling the UrlFormat check. \nI could be convinced otherwise if you are willing to put together a PR. . Thanks!. > It would be nice, if separate_groups used without order would enforce a capsulated order of groups.\nI'm not sure I understand this suggestion. How would we know what to put in what group without specifying it through the order? . Ah, I see what you mean now. Arbitrary groups with alphabetic ordering enforced within the groups. I don't think this is possible with the current implementation. I'm happy to accept a PR though. . Interesting, I should have checked my assumptions! I didn't know $ is a reserved URI character, and that it has to be escaped. \nrb\nirb(main):003:0> URI.parse('http://domain.com/${foobar}.jpq')\nURI::InvalidURIError: bad URI(is not URI?): http://domain.com/${foobar}.jpq\nThanks for making me double-check this!. Nope! Your PR fixed that, it was just me making assumptions that weren't true. Thanks again for the contribution!. This is now released in v0.53.0. \ud83c\udf7e . Lol, my bad! Thanks @sds!. Hi @jrock2004! It looks like the error is coming from csslint, not scss-lint. Could that be the case? Also, what happens if you just put font-size above font-weight? . Hi @wheresrhys! It looks like you're trying to install an npm module named scss-lint. This project is bundled as a ruby gem, and installed through gem install scss_lint. . Thanks!. @yoanmalie Thanks for the reminder. Version 0.57.0 was just published.. Thanks!\n. To reduce indirection, this line could probably be inlined directly in the plugin_config method (since you don't use it elsewhere).  . This comment confuses me a little since we use merge_with_default: false below. What is indented to merge, and where does that happen? I don't have a lot of context on how scss-lint configuration works, so excuse me if I'm missing something obvious.. Thanks for the explanation, that makes sense. . Good call. I suggest you look into using something like autoprefixer to avoid having to use vendor-prefixes. . This would be better if it had the full string, e.g. '${some-var}'. I know that your code doesn't care, but I could see someone changing the check to a more involved regex matching the whole variable inject. . ",
    "escapedcat": "Just wanted to ask for the same feature :P\n+1\n. ",
    "rafaellyra": "+1\n. ",
    "acdha": "I have a very common case similar to @bartveneman's where it'd be really nice to be able to do something like this:\ncss\nmax-width: 400px;\nmax-width: 30vw; // -DuplicateProperty\nGranted, both of these might be an argument for DuplicateProperty becoming smart enough to track the units being set since it's often common to need multiple levels of fallback:\ncss\nmax-width: 400px;\nmax-width: 40vw;\nmax-width: calc(50vw - 120px);\n. @davidtheclark Yes, this would definitely make sense as an option for DuplicateProperty \u2013 in particular, I think it'd need to have an option to ignore duplicate properties on adjacent lines since it's most often a bug otherwise.\n. This looks great for several of the things I tried it for but I noticed that it doesn't appear to work with DuplicateProperty:\nscss\n.foo {\n            // scss-lint:disable DuplicateProperty\n            background-position: 98% center;\n            background-position: calc(100% - 4px) center;\n}\nproduces this warning:\nstatic/scss/_core.scss:4 [W] DuplicateProperty: Property `DuplicateProperty` already defined on line 3\n. @mbertolacci @sds With the commits from #306 the situation is improved, although there's still room for confusion.\nThese work:\nscss\n.foo {\n    background-position: 98% center;\n    background-position: calc(100% - 4px) center; // scss-lint:disable DuplicateProperty\n}\nscss\n.foo {\n    background-position: 98% center;\n    // scss-lint:disable DuplicateProperty\n    background-position: calc(100% - 4px) center;\n}\nscss\n.foo {\n    background-position: 98% center;\n    // scss-lint:disable DuplicateProperty\n    background-position: calc(100% - 4px) center; \n    // scss-lint:enable DuplicateProperty\n}\n``` scss\n.foo {\n    // scss-lint:disable DuplicateProperty\n// Keep the footer anchored on short pages using increasingly accurate/un-supported calculations:\nmin-height: 100%;\nmin-height: 90vh;\nmin-height: calc(100vh - #{($navbar-height * 2) + $navbar-padding-vertical});\n\n```\nscss\n.foo {\n    // Keep the footer anchored on short pages using increasingly accurate/un-supported calculations:\n    min-height: 100%; // scss-lint:disable DuplicateProperty\n    min-height: 90vh;\n    min-height: calc(100vh - #{($navbar-height * 2) + $navbar-padding-vertical});\n}\nI expected these to work but they currently don't \u2013 the whitespace requirement for adjacent comments is in particular a bit surprising:\nscss\n.foo {\n    // scss-lint:disable DuplicateProperty\n    background-position: 98% center;\n    background-position: calc(100% - 4px) center; \n}\nscss\n.foo {\n    // Keep the footer anchored on short pages using increasingly accurate/un-supported calculations:\n    // scss-lint:disable DuplicateProperty\n    min-height: 100%;\n    min-height: 90vh;\n    min-height: calc(100vh - #{($navbar-height * 2) + $navbar-padding-vertical});\n}\nscss\n.foo {\n    // scss-lint:disable DuplicateProperty\n    // Keep the footer anchored on short pages using increasingly accurate/un-supported calculations:\n    min-height: 100%;\n    min-height: 90vh;\n    min-height: calc(100vh - #{($navbar-height * 2) + $navbar-padding-vertical});\n}\nThis also raised a couple of related questions about this feature in general: since it's easier to miss, I feel like the inline comment at the end of a line with a property should only apply to that line \u2013 i.e. my first and third examples should be equivalent. (\u201cGet over it\u201d might be an acceptable answer for this)\nThe other question I had was whether these lines should be treated as empty for the EmptyLineBetweenBlocks \u2013 e.g. currently this will trigger a warning:\n``` scss\n// scss-lint:disable DuplicateProperty\n.foo {\n    \u2026\n}\n// scss-lint:enable DuplicateProperty\n.bar {\n    \u2026\n```\nObviously it isn't particularly onerous to add an extra line but it felt somewhat gratuitous when I was updating a test project.\n. @mbertolacci Thanks for racing through these! I'll test that later today.\n. ",
    "mbertolacci": "I've implemented a minimal variant of this feature in the above PR #303 following rubocop style pragmas. Take a look and see what you guys think.\n. Hey @sds and @acdha the above PR addresses both the multi-line comments bug and the 'comments at the end of a statement should only apply to that statement feature'.\nHaven't looked at the EmptyLine thing, I'll leave that to more informed minds :)\n. @bartveneman exactly like that, yup. A disable applies to a linter until\n1) The end of the current selector (or document if at the root); or\n2) An enable for that linter is encountered.\n. @lencioni I've updated the changelog. There's a merge conflict now but I'll hold off putting effort in to resolve it until others have had more time to look at the changes.\n. Update: rebased.\n. My pleasure @sds. I'm not surprised I missed some conventions, this is the first time I've written Ruby so I am essentially blind to bad/unconventional Ruby at this point. :)\nI've made all the edits except for the all one, pending a reply to my comment above (not unhappy to make the change, but I do suggest all should be treated as a special grammar).\nOne note: the Linter class is now at exactly 100 lines so rubocop is on the verge of complaining. I'm not confident enough that I've got the essence of the conventions of the project to refactor it so I have left it as is for now.\n. I am not really attached to it as it is, but in my mind I had the grammar:\n<list_of_linters> = <linter>\\s*,\\s*<linter>\\s*,...,\\s*<linter>\n<disable_statement> = all | <lint_of_linters>\n<disable_comment> = scss-lint:disable <disable_statement>\nso the idea was that all is not a linter in the list, it is a special kind of statement that means all linters. In practice it prohibits redundant statements like /* scss-lint:disable all,BorderZero */\n. ",
    "benesch": "Closing since this is an upstream bug.\n. My pleasure. Thanks for scss-lint! \n. ",
    "kinglozzer": "Great stuff, thanks!\n. ",
    "emagnier": "Thanks @sds for the fix!\n. Thanks for the last release. It works now well for the case I mentioned.\nBut there is another one:\n``` scss\n.block {\n@at-root &--element-1 {\n    font-size: 12px;\n}\n\n@at-root &--element-2 {\n    font-size: 14px;\n}\n\n}\n```\n. ",
    "jomo": "I would use a whitelist, since only zero lengths are allowed to be represented by the number 0.\n'em', 'ex', 'ch', 'rem',  'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'in', 'pt', 'pc', 'px'\nSo even 0% should not be replaced by 0 (I am unsure if the outcome would be any different, though)\n. I could try, but I probably won't find the time to do that soon :/\n. Thanks for the PR, looks like travis had problems downloading ruby 2.1.0\n. ",
    "slavingia": "I'm having this issue too. Open a new one?\n. .\n. ",
    "marcogallotta": "Our usage is fairly basic right now, but we plan to expand on it. We in particular have a linter that prevents pointer event attributes being used in CSS. Maybe other people would like that? Or we could turn it into a linter that disallows event types that a user passes in via config?\n. Oh yes, sorry I didn't see that one!\n. ",
    "rachelannmiller": "this is the one linter we currently have:\n``` ruby\nmodule SCSSLint\n  class Linter::NoPointerEvents < Linter\n    include LinterRegistry\ndef visit_prop(node)\n  add_lint(node) if node.name.first.to_s == 'pointer-events'\nend\n\ndef description\n  'IE doesnt support pointer-events.'\nend\n\nend\nend\n```\npretty simple, right?  'm not sure anyone else cares about keeping pointer-events out of their scss, but we were thinking it might be nice to let users keep arbitrary attributes of their choice out of their codebase.  ie somewhere in the config file for a linter, list disallowed attributes.\nbut you could also imagine all kinds of custom rules that don't make sense for everyone - like my PM hates orange, and wants to make sure no one adds any orange to the website.  I think first hand functionality to add custom linters would be really useful.\n. geniou - I love that.\n. ",
    "luizotcarvalho": "+1 I need to test some guidelines I use in my work, for example, we use variables of the colors palette instead of filling with large amount of hexadecimals on the project. Would be great if a could write a custom test for this.\n. ",
    "dnutels": ":+1:\n. ",
    "gunnx": "+1 for ForbiddenProperty\n. Sorry I see it does this already! \n. ",
    "mhujer": "Hi @sds, thanks for the answer!\nI just tried your patch, but unfortunately, it did not work. (I applied it manually to the file).\nAlthough I'm not a Ruby guy, I was able to fix it by adding require 'scss_lint/reporter/default_reporter' before the line you changed in the https://github.com/causes/scss-lint/commit/a7f6053665228aa7e8be956c8e0e55ffa5aed406 (see http://stackoverflow.com/questions/6181312/how-to-fix-the-uninitialized-constant-rakedsl-problem-on-heroku)\nThis may be a clue, why it does not work:\n```\n\nscss-lint --show-formatters\nInstalled formatters:\n - Config\n```\n\nThere are those files in the reporter folder:\nconfig_reporter.rb\ndefault_reporter.rb\nfiles_reporter.rb\nxml_reporter.rb\n(It works for linters and properly lists all of them)\n. Only the config reporter is loaded:\nC:\\xampp\\htdocs\\shopio\\trunk\\public_html\\www\\sass>scss-lint _bootstrap.scss\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/lib/scss_lint/reporter/config_reporter.rb\nuninitialized constant SCSSLint::Reporter::DefaultReporter\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/lib/scss_lint/cli.rb:189:in `report_lints'\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/lib/scss_lint/cli.rb:99:in `run'\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/bin/scss-lint:7:in `block in <top (required)>'\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/bin/scss-lint:5:in `tap'\nC:/Ruby193/lib/ruby/gems/1.9.1/gems/scss-lint-0.24.0/bin/scss-lint:5:in `<top (required)>'\nC:/Ruby193/bin/scss-lint:23:in `load'\nC:/Ruby193/bin/scss-lint:23:in `<main>'\nReport this bug at https://github.com/causes/scss-lint/issues\nBut when I changed the reporters path to 'scss_lint/reporter/**/*.rb',  it started working. (double asterisk was also used for linters, and they were loading fine). So it's probably something strange going on with the glob pattern on Windows.\n. My first Ruby code :-)\nOK, please just comment on this issue, when the new version is out. I'll verify, that everything runs smooth on Windows.\n. :+1: \n. :+1: \n. ",
    "monkomonk": "http://codepen.io/anon/pen/Ezydm\nThanks\n. Thanks for the help, glad it wasn't my code as I know its not the cleanest! \n. ",
    "matthiassiegel": "Excellent, thanks for the prompt fix!\n. ",
    "branneman": "It actually does what I expect, when i run bundle install on my project where I've got a Gemfile which specifies scss-lint as a dependency, it will then also install those 2 windows-specific dependencies. Bundler is awesome :)\nHowever you are right that it should be specified as a Rainbow dependency, it will still be installed by bundler anyway. I'll go send them a PR.\nCheers!\n. ",
    "nickdunn": "It's probably wrong to assume that the string black is always referring to #000.\nIn our case we have a list of brand colours that are part of a corporate style guide. We have a mixin that allows us to pluck these out by their official names and their default, light or dark tints.\n$brand-colours:\n// colour-name   base    light   dark\n'primary-red'    #de0011 #e05963 #b1000e,\n'dark-red'       #83000a #84262f #5e0009,\n'black'          #000000 #404040 #000000,\n'white'          #ffffff #ffffff #d9d9d9,\n'graphite'       #404040 #505050 #272727,\n'pewter'         #929292 #999999 #6d6d6d,\n'silver'         #d7d8d6 #e2e2e1 #afb0ae,\n'pearl'          #ededed #fdfdfd #c6c6c6,\n'light-slate'    #4d6474 #5a6b79 #344553,\n'slate'          #3e505d #4f5c66 #26323c,\n'dark-slate'     #253038 #3e454a #0e1215,\n'jade'           #00928d #34948e #0e6e68,\n'dark-jade'      #005e59 #2f6862 #09423c,\n'gold'           #e9a115 #e8a642 #c07b10,\n'antique-gold'   #ba8111 #b88434 #925e0e,\n'violet'         #37166d #5a487f #312054,\n'premier-indigo' #261452 #3e305d #0e0620;\nSuch as:\nbrandcolour(gold, light);\nOf course we can pass this lint issue by quoting the arguments but up til now our coding style has been to not quote arguments. So it's a shame that we have to do so to pass the linting.\n. Thank you all :-)\n. ",
    "triblondon": "I also have this problem.  We have a palette defined in a similar way to Nick, and a series of components that map palette colours to use cases that they then use in class rule sets, eg:\nIn palette:\nscss\n$palette: (\n   white: #ffffff,\n   grey-tint1: #999999\n)\nIn component:\n``` scss\n@include setColorUseCase(badge, (border: white, background: grey-tint1));\n.badge {\n  @include colorsFor(badge);\n}\n```\nLinting refuses to allow the use of 'white' in the mixin invocation that sets the use case, even though we are just using it as a key to a colour defined in a palette.\n. Ok. Thanks for your help.\n. ",
    "kevinmpowell": "I had a similar issue and used this workaround:\nbefore\n$colors: (\n  brand-primary:   #5298F1,\n  white:   #FFFFFF,\n  black:   #000000,\n  gray-darkest:    #454545,\n  gray-darker:     #686868,\n  gray-dark:       #848484,\n  gray-light:      #A4A4A4,\n  gray-lighter:    #F2F2F2,\n  gray-lightest:   #F8F8F8,\n  blue-dark:       #4379BD,\n  blue:    #4D8AD6,\n  blue-light:      #5298F1,\n  green:   #5B8C42,\n  green-light:     #82A827,\n  text-default:    #454545,\n  text-light:      #8D8D8D,\n  text-lighter:    #999999\n);\nSo my collisions with the linter were occurring on \"black\", \"white\", \"blue\", and \"green\". \nSince I already had things like \"blue-light\", I simply changed \"blue\" to \"blue-default\". They're still not semantic names, but when you're first building out a system you don't know what your border colors, link colors, etc. are, but you have already defined a palette. \nafter\n$colors: (\n  brand-primary:   #5298F1,\n  white-default:   #FFFFFF,\n  black-default:   #000000,\n  gray-darkest:    #454545,\n  gray-darker:     #686868,\n  gray-dark:       #848484,\n  gray-light:      #A4A4A4,\n  gray-lighter:    #F2F2F2,\n  gray-lightest:   #F8F8F8,\n  blue-dark:       #4379BD,\n  blue-default:    #4D8AD6,\n  blue-light:      #5298F1,\n  green-default:   #5B8C42,\n  green-light:     #82A827,\n  text-default:    #454545,\n  text-light:      #8D8D8D,\n  text-lighter:    #999999\n);\n. ",
    "victorhaggqvist": "Yep, this is happening.\nFor reference, downgrade to 0.24.0 is done by:\nsh\n$ gem uninstall scss-lint\n$ gem install scss-lint --version 0.24.0\n. ",
    "josephrace": "Yes, I am experiencing the same issue.\n. ",
    "shawnzhu": "@sds v0.25.1 works. Thanks.\n. ",
    "TychosDrunkElk": "Thanks for the quick reply!\n. ",
    "sammorrisdesign": "This is brilliant! I'll let you know if I can think of any other default orders.\n. ",
    "philgruneich": "This is fun! Thank you for all this feedback, I'm more often used to be bashed around on Stack Overflow. I still have to adjust the if clause from check_indentation, but I must seek for a testing environment before making any further progress (:\n. I found an article on rspec with an inviting title, may start from there. Thanks for all the help, let's see if I can handle this (:\n. Thank you, sds! Hope I can contribute more in the future. As soon as I wrap my head around procs, blocks and so (:\n. ",
    "noahsilas": "It seems like returning a (different) non-zero exit code when warnings are present, but no errors, would allow the caller to inspect the return value and change its behavior more explicitly, while preserving the existing behavior of \"non-zero exit code on warnings\".\n. ",
    "salemhilal": "I'm thinking more along the lines of Noah's approach. So, when scss-lint\nfinds only warnings, it exits with 65; when it finds an error, it exits\nwith some other code; when no lints are found, return 0.\nI'll have to brush up on my ruby chops, but I can do by way of a pull\nrequest some time later on this week.\nOn Wed, Jul 23, 2014 at 4:45 PM, Noah Silas notifications@github.com\nwrote:\n\nIt seems like returning a (different) non-zero exit code when warnings are\npresent, but no errors, would allow the caller to inspect the return value\nand change its behavior more explicitly, while preserving the existing\nbehavior of \"non-zero exit code on warnings\".\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/causes/scss-lint/issues/187#issuecomment-49932592.\n. Thank you!\n. \n",
    "sndrs": "great - thank you!\nand thanks for the linter :smile: \n. ",
    "stephenwf": "Thats great, yes its only temporary and is part of legacy codebase, so validation shouldn't be an issue.\nThanks for the snippet.\n. ",
    "Boldewyn": "This is the minimal file content, that reproduces the error:\n%button_disabled {\n    filter: progid:DXImageTransform.Microsoft.gradient(\n            startColorstr='#{ie_hex_str(rgba(255,255,255,.5))}',\n            endColorstr='#{ie_hex_str(rgba(255,255,255,0))}');\n}\nOtherwise it compiles just fine with Sass 3.3.4.\n. ",
    "jadjoubran": "We faced the issue here, 2 of my developers have this issue on mac where as on windows we're not having this issue.\nThe line endings are \\r\\n (windows)\n. $ scss-lint -v\nscss-lint 0.37.0\non my windows Machine\nHere's a more thorough explanation:\nWe have a fonts.scss file that contains something similar to the following:\n@font-face {\nfont-family: 'Open Sans';\nsrc: url('/fonts/OpenSans-Regular-webfont.eot');\nsrc: url('/fonts/OpenSans-Regular-webfont.eot?#iefix') format('embedded-opentype'),\nurl('/fonts/OpenSans-Regular-webfont.woff2') format('woff2'),\nurl('/fonts/OpenSans-Regular-webfont.woff') format('woff'),\nurl('/fonts/OpenSans-Regular-webfont.ttf') format('truetype'),\nurl('/fonts/OpenSans-Regular-webfont.svg#open_sansregular') format('svg');\nfont-weight: normal;\nfont-style: normal;\n}\n.scss-lint.yml:\nSpaceAfterComma:\n  enabled: true\nAnother thing that you need to consider is that line endines in fonts.scss is CRLF and the error only happens on Ubuntu and Mac (so Unix shell only). No errors on windows.\nYou might think that converting the line endings to LF would fix it, but I thought that it would be awkward as well because you'll then have to add a space at the end of the line which is useless (not sure of this because I haven't tried it).\nLet me know if you want more information!\nThanks\n. ",
    "steffenweber": "The patch has fixed the test-case. Thank you!\nUnfortunately, a slightly modified test-case still causes a warning:\n$ cat test.scss \n@include foo {\n  body {\n    background: #f00;\n  }\n}\n$ scss-lint test.scss \ntest.scss:1 [W] TrailingSemicolon: Declaration should not have a space before the terminating semicolon\n. The patch works fine, thank you! :smiley: \n. Thanks!\n. ",
    "blomeyer": "+1\n. Thanks, version 0.26.2 works fine for all of my test cases.\n. Thanks, works perfectly.\n. same after updating to 0.31.0\nbash\n$ scss-lint --version\nscss-lint 0.31.0\n$ scss-lint _island.scss\n_island.scss:7 [W] SelectorFormat: Selector `island--bordered` should be written in BEM (Block Element Modifier) format\n. @sds Thanks!\n. ",
    "logankeenan": "A little background on my side.  I'm using 0.26.0 and I have \nSpaceBeforeBrace:\n    enabled: true\nI think their are two problems now and I want to make sure we're on the same page.\nOn DOS/Windows a\\r\\n{\\r\\n  color: #000;\\r\\n} should not throw a lint error like it's Unix counter-part a\\n{\\n  color: #000;\\n}.  Correct?\nThe other issue is whether a newline character should be considered as a space.  \n``` css\na {\n    color: #000;\n}\na\n{\n    color: #000;\n}\n```\nIn terms of formatting, these two snippets are very different.\nI would suggest a feature request for such formatting.\n. ",
    "pcaithness": "Thanks for replying.\nDefinitely used  ignore_unspecified. I just double checked.\n. Thanks for having a look. Please see my relevant details below:\nscss lint version is: 0.26.0\nscss-lint yml config:\nlinters:\n  BorderZero:\n    enabled: false\n  Indentation:\n    severity: warning\n    width: 4\n  PropertySortOrder:\n    order: concentric\n    ignore_unspecified: true\n  SelectorDepth:\n    max_depth: 4\nscss file:\n```\n.related-item {\n    text-align: center;\n}\n.wpb_single_image.lightbox figure {\n    position: relative;\n}\n.wpb_single_image.lightbox figure:after {\n    display: inline-block;\n    position: absolute;\n    right: 1rem;\n    bottom: 1rem;\nmargin-right: .2em;\nwidth: 1em;\n\ntext-align: center;\ntext-decoration: inherit;\ntext-shadow: 0 0 10px rgba(0, 0, 0, .8);\n\ncolor: #fff;\n\nfont-family: 'fontello';\nfont-style: normal;\nfont-weight: normal;\nfont-size: 1.5rem;\n\ncontent: '\\e80B';\nspeak: none;\n\n-webkit-transform: rotate(-45deg); // Safari/Chrome\n-moz-transform: rotate(-45deg); // Firefox\n-ms-transform: rotate(-45deg); // IE\n-o-transform: rotate(-45deg); // Opera\nfilter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); // Internet Explorer\n\n}\n``\n. Strange. \nI get the warning on line 20, which for me is thetext-shadowline.\nI tried swappingfont-weight&font-size` around, but made no difference. Put the font properties into the font shorthand, no difference. Everything I do keeps pointing to the text-shadow.\nBTW, I installed scss-lint for the first time this morning and I got v0.26.0. I just updated the gem and got v0.26.1.\n. OK. cool. Thanks.\nLets hope there is a solution.\ncheers.\n. ",
    "davidosomething": "+1 http://screencast.com/t/wLqLUAwb\n. ",
    "totalgeorgie": "It's a little difficult to add a linter for this because the SASS engine appears to remove duplicate semi-colons.\ne.g.\n``` ruby\ntest added to trailing_semicolon_spec.rb\ncontext 'when a property ends with two semicolons' do\n  let(:css) { <<-CSS }\n    p {\n      margin: 0;; \n    }\n  CSS\n  it { should report_lint line: 2 }\nend\n\nwith a linting method added to trailing_semicolon.rb's like so\ndef has_double_semicolon?(node)\n  puts source_from_range(node.source_range)\n  #source_from_range(node.source_range) =~ /;;$/\nend\n\ncalled in trailing_semicolon.rb like so\nif has_space_before_semicolon?(node)\n  #\"...other linting methods...\"\nelsif has_double_semicolon?(node)\n  line = node.source_range.start_pos.line\n  add_lint line, 'Declaration should be terminated by only one semicolon'\n\nwill print\n.margin: 0;\n\nthus giving no warning\n```\n. ",
    "stobenski": "Oh. Sorry. My bad.\n. ",
    "jdfoster4": "I think this may solve the issue:\nruby\nHEX_REGEX = /(#(\\h{3}|\\h{6}|\\h{8}))(?!\\h)/\n. ",
    "pariser": "@jdfoster4 Yep, I agree. I realize I can also just submit a pull request.\n. ",
    "sgregson": "resolved, no changes necessary.\nyou can use the wildcard as long as it's in a file that's being inherited_from. The dot-star gets interpreted as regex by the config.rb:merge_wildcard_linter_options. Placing the dot-star in within your config will override everything because of the order of args in this smart_merge - which may be a bug? Should wildcards override all rules in a configuration?\nThe snippet below will only cause an error on the BorderZero rule.\n``` yml\n.scss-lint-reset.yml\nlinters:\n  .*:\n    enabled: false\n```\n``` yml\n.scss-lint.yml\ninherit_from: '.scss-lint-reset.yml'\nlinters:\n  BorderZero:\n    enabled: true\n    severity: warning\n``\n. Haven't played much with the compass linters, but I think (1) the ignore setting isn't passed down to the individual properties, so you'd need to set it on theCompass::PropertyWithMixin` linter explicitly and (2) the YML format for an array is to use a dashed line (as in PropertySortOrder).\n``` yml\nCompass::*:\n  # to override default.yml config\n  enabled: true\nCompass::PropertyWithMixin:\n  enabled: true\n  ignore:\n    - inline-bock\n```\n. ",
    "oller": "Hi Joe,\nThanks for the response, in the meantime I've rolled back the gem update and pinned the versions.\nThanks again!\n. Sure @sds, happy to help.\nI've condensed it down to this offending block : http://sassmeister.com/gist/0fa756fb55e0ed4ee45b\n. ",
    "watilde": "@sds Thanks for your commit and comment!\nLooks good to me, I'm really glad :)\n. ",
    "finteractive": "Thanks for the help!\n. Also regex-like matching use cases....\n[class=\"^foo\"] {\n    ...\n}\nwill target..\n.foo-bar\n.foo-fum\n. ",
    "mcandre": "As a workaround, I'm disabling Indentation checking altogether, though I'd really prefer to enforce a multiple-of-2-spaces rule.\n. My .css files are 100% generated by node-sass. Maybe it's outputting indented code?\nhttps://github.com/mcandre/mcandre/blob/master/sass/fizzy.scss\n. Works for me!\n. ",
    "jtheletter": "This isn't working for me. \nI've tried formatting as: \n```\nlinters:\nComment:\n    severity: warrning\n    exclude:\n      - '*/.css'\n```\nAnd as: \n```\nlinters:\nComment:\n    severity: error\n    exclude: '*/.css'\n```\nI can see the gutter light toggle between yellow and red, but it won't disappear from my /* \u2026 */ comments in CSS files. \nI know I can separately run a CSS linter, but it would seem preferable to run a single linter for Sass and CSS for consistency. \nThank you. \n\nmacOS 10.13.3 High Sierra\nSublime Text 3.0\n. Thank you for replying. I assumed it'd be better to comment on an existing thread. Perhaps not? \n\nThe filled yellow circle in this screenshot is what I mean by a \"gutter light\": \n\nThe config file appears to be respected, as evidenced by the toggling of warning vs error being reflected. \nMost linters I've used will look to the project root, then to the user home, for the config. I'm using the latter in this case. \n. Running scss-lint reset.css in Terminal outputs many lines, starting with:\nreset.css:1:1 [W] Comment: Use `//` comments everywhere\n. ",
    "mscarchilli": "Thanks @sds I'll check it out!\nThanks for the nice response btw, when you really should have just said RTFM! Fail on my part! lol :)\n. ",
    "blueyed": "@sds \nThanks for addressing this, it works as expected / much better now.\n. ",
    "ArmorDarks": "I vote for that feature.\n@sds Unfortunately, your suggestion applying poorly to heavy projects with tons of selectors. You simply don't have opportunity to name them in proposed by your way, since you'll quickly finish with extremely long class names, or you won't see clearly relation between components.\nWe're using BEM in our projects, and it means that class name always have component's (block) name inside, and in case someone is child of that block \u2014 it will have it's own reasonable name too.\nFrom the first glance it looks like it's good idea to write such classes in flat way:\ncss\n.component {}\n.component__image {}\n.component__text {}\nBut than you're quickly realizing that it will work good only on first levels. Just take a look at this code:\ncss\n.component {}\n.component__image {}\n.component__text {}\n.component-subblock {}\n.component-subblock__text {}\n.component-category {}\n.component-other {}\nWhat does it tells to you? Do you really see connections between blocks?\nWhile your page's number of blocks increasing, with flat CSS style you're slowly losing whole vision of the project's structure. With proper nesting just from a first glance you'll be able to understand current relation between blocks:\ncss\n.component {}\n  .component__image {}\n  .component__text {}\n     .component-subblock {}\n     .component-subblock__text {}\n  .component-category {}\n    .component-other {}\nNow you see what real page currently looks like? It's completely different from what you've imagined at first, while looking at flatted style.\nYour suggestion won't work for BEM, since it's main idea is abstraction and reusability. In your case to move block to another place I will need to heavily change both CSS and HTML (since class name is tied way too much to structure... just to keep flat style readable and understandable... so now I need to change it in all instances) or deal with simple fact that it's impossible to understand structure just from CSS, while in case of BEM if I decide that I need to move .component-other outside of .component-category I will need to change only HTML code, and simply to move selector with indentation to another position and I and other devs always have clear vision of current structure. It's way much easier than renaming class names, especially in large projects.\nBesides, just image distributed across different domains components \u2014 in such case you can't \"indent\" component and represent their structure by naming in your way.\nIn such situations indentation is the only possible way to keep reasonable connection between HTML and CSS structure without making them dependent on each other, like in case of nesting usage.\nTo be honest, I was surprised that SCSS-lint does treat such indentation as errors, since it's very popular, especially across BEM-devs.\nFor example, well-known Harry Roberts: https://github.com/csswizardry/work/blob/gh-pages/work.scss\n. Great, thanks a lot!\n. Ops, typo in my examples\nSorry for inconvenience\nUnfortunately, there is no such typo in my testing file.\nAnyway, it doesn't resolve issue. Such typo would simply throw SASS error.\n. That's great, thanks!\n. Hi\nThanks!\nI've checked out, misspellings in !important and !default declarations will indeed throw Sass error:\nfor !impwerortant\nError: Invalid CSS after \"      border: 1px \": expected \";\", was \"!impwerortant;\"\nfor !dewerfault\nError: Invalid flag \"!dewerfault\".\nSpaces in ! default will throw Sass error too:\nError: Invalid CSS after \"...      #ff6600 !\": expected identifier, was \" default;\"\nBut in case of ! important there won't be any errors\n. I confirm that comment in the end of map will throw error: [W] TrailingSemicolon:  Declaration should be terminated by a semicolon\nPasses:\nscss\n$map: (\n    test: ()\n);\nNot passes:\nscss\n$map: (\n    test: () // comment\n);\n. Sorry for hijacking your issue. I didn't realize at first place that you've described other issue.\nI should create new issue then, right?\n. Ouch, my bad!\nThanks a lot for figuring it out. I was ensured that I've checked out name of linter and it was correct.\nI probably was confused by the fact, that it ignored -webkit-#{$property}: $value; and so on, but now I realize that SCSS Lint just can't check selector name if it contains interpolation. Though, I wonder \u2014 is it correct behavior?\nAnyway, thanks a lot once again!\n. Thanks for reply\nI can't tell for sure, since I don't know how SCSS Lint treats this case and what it expects.\nBut for me it looks like completely another case.\nIn https://github.com/brigade/scss-lint/issues/618 variables declarations were deliberately placed with forced indendation, and it isn't what SCSS Lint expects. I think it's ok for default rule.\nHowever, here we're just nesting @if and @each declarations inside each other. May be I'm wrong, but it seems to me that by default it's proper to nest them, instead of flat \"list\", just like in any block-scoped language.\nFor example, in JavaScript:\njavascript\nif (myVar) {\n    for (item of myVar) {\n        console.log(item)\n    }\n}\nusually people don't write it like that:\njavascript\nif (myVar) {\nfor (item of myVar) {\n    console.log(item)\n}\n}\n. ",
    "kty": "This doesn't support class names with parent selectors.\nAs of Sass 3.3 parent selectors (&) can be used for prefixing class names, which means we can now rewrite this:\nscss\n.block {}\n.block__table {}\n.block__row {}\ninto this: \nscss\n.block {\n    &__table {}\n    &__row {}\n}\nLet's say &__row will always be inside &__table and I'd like to suggest that in the code:\nscss\n.block {\n    &__table {}\n        &__row {}\n}\nThis triggers a lint error, although being (IMO) a legitimate use of arbitrary indentation.\nWould you consider removing the condition that arbitrary indentation is allowed only for top-level rulesets? Thanks!\n. ",
    "piyush-dholariya": "I don't want to disable this linting but want to fix it.\nso how can I do that?\n. ",
    "geebru": "No problem - thanks for that quick fix!\n. ",
    "golmansax": "Cool!  Thanks for looking into the pull request so quickly!\n. updated the pull to include all links to data\n. gah sorry about that!  props for fixing it quickly!\n. ",
    "gmoulin": "Thanks for the response.\nBut I still do not how what I need to do to get it working.\nCan you please provide an example configuration ?\n. ",
    "TheDutchCoder": "For anyone interested, I'm using the more popular BEM notation (e.g. foo__bar--baz) and the following RegEx works on a good amount of cases:\nhttps://regex101.com/r/yP0eM7/1\nCheers.\n. ",
    "bendera": "Yes, I am. Maybe it depends on which version of Ruby do you have. Mine is: ruby 1.9.3p545 (2014-02-24) [i386-mingw32]\nI've tried some test cases with this file:\n```\n@charset 'UTF-8';\n.foo {\n    content: '\u25bc';\n}\n.bar {\n    content: 'a';\n}\n.baz {\n    content: '\u0151';\n}\n```\n1. StringQuotes: enabled, single_quotes. Result: passed\n2. StringQuotes: disabled, single_quotes. Result: passed\nAnd then I change the first line from @charset 'UTF-8'; to @charset \"UTF-8\";\n1. StringQuotes: enabled, single_quotes. Result:\ntest.scss:1 [W] StringQuotes: Prefer single quoted strings\ntest.scss:4 [W] TrailingSemicolon: Declaration should not have a space before the terminating semicolon\ntest.scss:12 [W] TrailingSemicolon: Declaration should not have a space before the terminating semicolon\n(The line 4 and 12 contains the non-ascii characters.)\n1. StringQuotes: disabled, single_quotes. Result:\ntest.scss:4 [W] TrailingSemicolon: Declaration should not have a space before the terminating semicolon\ntest.scss:12 [W] TrailingSemicolon: Declaration should not have a space before the terminating semicolon\n. I just tried on an Ubuntu system, but it works correctly. It seems to be a platform-specific error.\n. Thank you very much, guys!\n. ",
    "josh": "Thanks!\n. ",
    "thierryk": "fwiw, I totally agree with @renatoi: Beware of Selector Nesting in Sass\n. I'd vote for no nesting at all as I don't think selector nesting promote better CSS.\n. > Nesting is not inherently bad; it has its uses.\nFair enough. Please provide an example where it is not use as a shortcut, but rather as a way to improve maintenance or CSS output without impairing readability. \n. > I think it's pretty subjective whether you find that easier or harder to read than repeating .element\nI'm glad you provided an example that shows more than simple nesting as it also demonstrates that people need to know Sass to be able to understand what this code does.\nAlso, I'd argue that this:\n.element {\n  & + & {\n    margin-left: 1em;\n  }\n}\nis not as straight forward as this:\n.element + .element {\n  margin-left: 1em;\n}\neven though I removed part of the ruleset so we get proper context for the &.\nFurthermore, if we wanted to avoid redundancy with the margin declaration (for re-use), we'd end up relying on @extend inside the ruleset, rather than grouping selectors manually, which will make that code even tougher to decipher at a glance. \nAlso, note that in this case we'd write the exact same number of lines (11 line for scss vs. 11 for its output), so no gain there either.\n. > Will happily merge a pull request.\nOops! I missed the important part. Thanks a lot @sds \n. ",
    "renatoi": "Unfortunately, the selector depth is not an option as it also prevents normal selectors such as:\ncss\n.foo .bar {\n}\nI believe the usefulness of preprocessors like SCSS is much greater than just nesting. Nesting is just one aspect that can prove to be a bad practice if not used correctly. I believe the purpose of linters is to help to alleviate the great responsibility problem.\nTaken directly from SASS documentation:\nhttp://sass-lang.com/guide#topic-3\n\nBe aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice.\n\nI suggest adding a \"NestingDepth\" as an option.\n. Thanks a lot @sds! \n. @sds I fixed the issues you pointed out. Please let me know if they make sense.\n. Thanks @sds! Really good simplifications :)\n. Sorry, my comment was wrong. This condition is necessary to reset the @depth to 0 if the parent node of the current node is a RootNode, meaning, if it's a first level rule.\nscss\n.one {\n}\n// reset to 0\n.two {\n}\nI changed the comment to make it more clear. Let me know if this approach makes sense.\n. ",
    "SiTaggart": "+1 mainly because I'm setting up a new project and want to use https://github.com/causes/scss-lint/pull/239 :+1: \n. ",
    "ai": "But what about some vendor specific hacks like\n-webkit-transform: translate3d(0, 0, 0);\nwhich is used to fix render on some browser engine?\nAlso some Autoprefixer\u2019s users report, that Firefox had issue in transition and they use -moz-transition to fix it.\n. Maybe we can denide prefixes before unprefixed? Like:\n-webkit-transition: 1s;\ntransition: 1s;\n. ",
    "brousalis": ":+1: \n. ",
    "ashtonthomas": ":+1: \n. :+1: \n. ",
    "jvanderz22": ":+1: \n. ",
    "benja2729": ":+1: \n. ",
    "enovajuan": ":+1: \n. ",
    "kelmerp": ":+1: \n. ",
    "mrpavlikov": "@Anahkiasen seems not. \nAccording to https://bem.info/method/definitions/\nmenu__item_state_current\nAccording to http://xslc.org/jquery-bem/\nb-block4__elem2_mod1_val1\nAnd even if you look at http://yandex.ru\ninput__sample_js_inited\n. @Anahkiasen actially am pretty sure all of these should pass\n``` css\n.b-block__element-name_modifier {\n    border: 1px solid;\n}\n.b-block__element-name_modifier_value {\n    border: 1px solid;\n}\n.b-block__element-name_modifier-name_value {\n    border: 1px solid;\n}\n.b-block__element-name_modifier-name_value-long {\n    border: 1px solid;\n}\n```\nthis regex does the job it seems:\n^[a-z]([-]?[a-z0-9]+)*(__[a-z0-9]([-]?[a-z0-9]+)*)?(_[a-z0-9]([-]?[a-z0-9]+)*){0,2}$\n. @sds well, BEM has been developed by Yandex, so I'd rather stick to their syntax.\nAlso, according to official bem docs: http://bem.info/method/definitions/ (look at Element modifiers) it's single underscores.\nBtw, this doc says\n\nA modifier has a name and a value. \n\nSo this is not valid\ncss\n.b-block__element-name_modifier {\n    border: 1px solid;\n}\nand this is valid\ncss\n.b-block__element-name_modifier_value {\n    border: 1px solid;\n}\nso regex should look something like:\n^[a-z]([-]?[a-z0-9]+)*(__[a-z0-9]([-]?[a-z0-9]+)*)?((_[a-z0-9]([-]?[a-z0-9]+)*){2})?$\n. @sds even tho BEM rule should be compatible with bem-tools (set of utilities to generate bem css and layout), for the sake of backwards compatibility it is possibly wise to keep current rule as is to avoid people getting linting errors on update. But since scss-lint is not actually in release state and is just 0.29, 0.30 probably could change this behaviour.\nActually I'm perfectly fine with both ways (keep current BEM rule as is or rewrite to strict one).\n. @sds you are welcome :wink: \n. +1\n. Hello everyone!\n\nOr in writing BEM when using a modifier shouldn't it always be in key-value format?\n\nYes, correct, only key-value pair, like when you are writing css you write which property will have which value. Same goes for modifiers, you say what will be modified and which way. Check this out: https://en.bem.info/method/definitions/#modifiers-for-blocks\n\nA modifier has a name and a value. \n. \n",
    "shaneog": "Closing as I just discovered #253 \n. ",
    "quarterto": "Wow, this is totally wrong, it prints what order the properties are, not what it should be.\n. Fixed\n. ",
    "deathwish": ":+1:\n. ",
    "rodolfo2488": ":+1: \n. you're right. it is in https://github.com/rodolfo2488/scss-lint/commit/6193d80b00fe07e5b63a609e8b3da373ac864bf2. but I was trying to catch the way to say in the .scss-lint.yml the scss-files, is there a way now or that is something to implement?\n. @sds I added some basic hack to add it, but I will work in a good solution for adding this feature. Please review and make comments about how you want to approach this problem.\n. ",
    "hail2u": "Sorry, not updated.\n. I think finding .scss-lint.yml up to the project root directory (.git, .hg, package.json, or something else exists) is good choise.\n. ",
    "mmozuras": "@sds thanks for taking the time to reply.\nAdding scss-lint to Gemfile resulted in a failing build. The error was undefined method invalid_parent_method_name. That's not a very useful. It basically says scss-lint overrides sass stuff and doesn't define invalid_parent_method_name. It's not the root cause and without adding these lines, we can't see what the root cause is.\n. @sds with Pronto I'm trying to use scss-lint as a library. When pronto and pronto-scss are added to Gemfile, scss-lint also gets included in the (Rails, in this case) project. I suspect scss-lint was not meant to use that way. It does some overriding, which might be breaking sass? I didn't have the time to investigate it further, kinda hoped you might now the answer :smile: \n. @sds thanks, that helped :smile: :bow: \n. ",
    "agross": "How would you go about this with guard?\nI use guard with nanoc to compile static HTML (and SCSS to CSS). I never require scss_lint, just bundle exec guard. Whenever nanoc compilation kicks in I get:\nNoMethodError: undefined method `bubbles?' for 50px:Sass::Script::Tree::Literal\nAdding require: false to my scss_lint-related gems (+ checkstyle, guard-scss_lint) doesn't remove the error.\nJust found another case: Whenever I run scss_lint before nanoc with rake, nanoc compilation also fails.\n```\n\u00b1 bundle exec rake scss_lint nanoc\n[scss_lint]\nscss-lint found no lints\n[nanoc]\nLoading site\u2026 done\nCompiling site\u2026\n      create  [0.23s]  build/bin/index.html\nCaptain! We\u2019ve been hit!\nMessage:\nNoMethodError: undefined method `bubbles?' for 50px:Sass::Script::Tree::Literal\nCompilation stack:\n\n[item]   /stylesheet.scss (rep default)\n```\n. @sds Thanks! :+1: \n. \n",
    "berbaquero": "Alright, thanks for the feedback, @sds & @lencioni, and the quick fix.\nI definitely see your point about the readability of the feature \u2014 will keep it in mind. Thanks!\n. ",
    "peavers": "Sure does, thanks very much for the detailed response!\nOn Sat Nov 01 2014 at 07:51:07 Shane da Silva notifications@github.com\nwrote:\n\nI'm not sure what \"fixmyjs\" is, but I'm assuming you mean if autocorrect\nof any sort is possible (like the functionality provided by rubocop\n--auto-correct, for example).\nThis is not possible with scss-lint because the underlying Sass parser\ndoes not allow us to rewrite and rerender the parse tree back into code,\nwhereas the parser gem that powers rubocop does. Without this ability we\nwould basically need to write our own parser from scratch (including source\nmapping), which is a huge undertaking in and of itself.\nThus, you will not see autocorrection from scss-lint unless some very\nenthusiastic volunteer offers to write a SCSS parser that supports tree\nmutation.\nHope that explains it. Thanks for the interest!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/causes/scss-lint/issues/282#issuecomment-61310649.\n. I just rebuilt the server again and can confirm I'm no longer having any issues so it must have been something unique to me, or I just incorrectly configured something at one point. \n\nConfirmed working correctly with scss-lint 0.38.0\n. ",
    "evoactivity": "Could this postcss project help with this?\nhttps://github.com/postcss/postcss-scss\n. That make sense. I think my problem comes with how I use mix, I often use it in place of lighten and darken as I think it produces a more aesthetically pleasing result, so I only use it with black and white as the secondary color so there really isn't any semantic meaning for that colour. I suppose I could write my own lighten and darken functions that use mix instead.\n. ",
    "thegranddesign": "@sds is this a new addition to the Sass library since this was discussed? http://sass-lang.com/documentation/Sass/SCSS/Parser.html\n. ",
    "michaelBenin": "Hey @sds,\nThis issue was submitted because the error message was confusing as it's not using any underscores in the function name. \nI would change this error message to be:\n'should be written in lower case with a dash instead of snake_case or camelCase'\n. For example, giving the error:  file not found would be a better message.\n. ",
    "neoascetic": "Hmm. It seems like this feature doesn't work. I still getting those \"Invalid output format specified\" messages.\n. Thanks!\n. Could you tell when new version will be released?\n. ",
    "paulrobertlloyd": "A-ha\u2026 turns out the documentation is slightly wrong. Corrected in this PR: https://github.com/causes/scss-lint/pull/287\n. Wow, that was quick. Thanks!\n. Oops, this is a dupe of https://github.com/brigade/scss-lint/pull/667\n. ",
    "webgefrickel": "I can confirm this issue.\n. I know this is more a political issue. But regarding different teams: inside the team everybody sticks to their rules it is not really against the purpose of a linter (and they quite like it) \u2014 but the rules between the different teams don't match. Political stuff like tabs vs. spaces aside e.g. one team wants to be 'more strict' than the others, disallowing extend or extending from classes and making use of the new BemDepth-Linter. I know that those are edge-cases, just some food for thought :)\n. Ah, I see. Since I am not a ruby guy I can't be the implementor :/ Regarding 56cbbd2 I see why one would not be interested in re-introducing more code for such edge cases \u2014 and for all other projects I've worked on one .scss-lint file always was enough, so I totally understand your reasoning.\nBut (of course there is a but ;)) \u2014 another idea: would it be easier to (re-)introduce sth. that does not merge the configs, but at least tries to find the next config? E.g. I have a large project with lots of git-submodules with scss-files. I don't want to introduce one scss-lint-config for each submodule, rather one in the root-project-folder that is used even if my CWD is the submodule-folder (in the likes of: check for .scss-lint.yaml -> not there? -> check parent folder and so on, if one is found just use it, and don't merge with previous configs...). Now it just uses the .scss-lint-config from my home-directory and not the one from the project-root-folder.\nDo you understand what I am trying to achieve? Sorry for my english and thanks for all your time.\n. I understand your concern about \"ccidentally be using the .scss-lint.yml from an ancestor directory\" \u2014 maybe we could just print out a line when checking on the CLI, sth. like:\nUsing /Users/dude/Sites/test/.scss-lint.yaml as configuration\nIf there is anything I can help with, let me know.\n. I can confirm this false-positive issue with 0.42.1 and am running into it as well.\n. ",
    "felquis": "I can confirm this issue too\n. Thanks :D \n. sass -v Sass 3.4.7 (Selective Steve)\ncompass -v Compass 1.0.1 (Polaris)\n. I'm sorry @anselmh I don't have any experience with Ruby to help :/ \n. ",
    "HNygard": "Wrong project.\n. ",
    "aju": "Hi\nI have same issue I run scss-lint inside docker-container build with this image:\nhttps://hub.docker.com/r/shawnzhu/ruby-nodejs/\nI got error:\n[E] Unable to parse SCSS file: Invalid US-ASCII character \"\\xC2\"\nruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-linux]\nSass 3.4.18 (Selective Steve)\nscss-lint 0.41.0\noutput of file -bi\ntext/plain; charset=utf-8\nIn addition when I run scss-lint on this file from my OS (osX) it works (I get no errors).\n. Adding for docker fixed issue\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nThis is probably solution for this issue.\n. Passes:\n$fontSizes: (\n  header: 3rem\n);\nNot Passes\n$fontSizes: (\n  header: 3rem // 48px\n);\nIts an issue with comment in this case\n. @AESM sorry I was not clear - my code show another examples that was working and now it broken :)\n. ",
    "anahiruiz": "Hey, i got an issue similar to the first one, can you help me please, the error is this:\nError: Invalid US-ASCII character \"xC3\" on line 5 of /vagrant/*/assets/sass/archivo.scss\n1: //-----------------------------------\n2: //asdfasdf\n3: // Nombre : archivo.scss\n4: //\n5: // Ubicaci\u00f3n : /public/assets/scss/archivo.scss\nI know that the error is the accent, I changed it and it works, but that, i think its just a workaround, i want it to change it to utf-8 and i'm not using ruby, only sass, i'm on mac OS Yosemite, but i don't know where to do this, they suggest in the editor's settings, but where is this?, or if is in another file, where should I look for, and what should i look for?\n. ",
    "oliverklee": "With scss-line 0.29.0, the problem does not occur yet.\n. ",
    "EvanLovely": "This still occurs for us.\n. Thanks!\n. Hey, so it's working now... not sure what was up. Pretty sure it was that version. Sorry! Carry on ;)\n. ",
    "red2678": ":+1:  Thanks! \n. I would but I am overriding some of the lib's selectors in my own SCSS files. So the error is coming from my files, not the libs. \n. :+1:  Set ignored_names, thanks!\n. ",
    "enedellec": "I run into the exactly same issue with Ruby 1.9.3.\n. ",
    "iris00": "Same problem \nI have Ruby 2.0.0p481\n. ",
    "cliener": "I have the same problem running Ruby 2.15 etc.\n@red2678 has already raised this with SublimeLinter-scss-lint (https://github.com/attenzione/SublimeLinter-scss-lint/issues/15) and Sublime Linter (https://groups.google.com/forum/#!topic/sublimelinter/sb2Q3D_do0A) however the both suggest the problem lies with scss-lint.\nRegardless, we're left with an unresolved issue. It seems we need some more details but, I for one, don't know what you (or anyone else) needs to know. Suggestions?\n. It remains a question whether or not this has anything to do with scss-lint anyway - I can run scss-lint from the command line without issue. I'll be sure to report back with anything that's confirmed to involve scss-lint and, hopefully, the resolution!\n. The problem has been traced back to SublimeLinter-scss-lint (https://github.com/attenzione/SublimeLinter-scss-lint/issues/18) leaving scss-lint free and clear as suspected.\n. ",
    "PixelT": "@sds, @chipcullen \nPlease add support for CSS3 Flexbox Module\nI used this list: https://github.com/brigade/scss-lint/blob/master/data/property-sort-orders/smacss.txt but they still display warnings in flex properties\n. ",
    "mihai": "\nHere is the README at 0.30.0: https://github.com/causes/scss-lint/blob/bfd97838464bf5eec4415aa4b2bf1285f13d3913/README.md\n\nThanks @lencioni, makes sense :smile:\n. ",
    "mmwtsn": "Hey @sds, thanks for looking over my pull request.\nYou aren't missing anything. I actually wasn't aware that you could execute the scss-lint binary from inside your fork that way!\nYour suggestion is a better approach. I've updated the commit to simplify the documentation.\n. ",
    "pavelbinar": "OK, unfortunately, I don't know the file any more and therefore I am not able to replicate the bug.\nThanks anyway. \n. ",
    "anthonyryan1": "I just realized that that example I had been using was only valid because I was inlining the compiled css into the document. When including it via a link tag it broke and I should have instead been using:\nscss\n.test:after {\n      content: '\\2714';\n}\nThis issue is invalid.\n. ",
    "JeroenNelen": "Hello Trotzig, thanks for your reply! This indeed works as expected. \n. ",
    "alundiak": "Unfortunatelly no. looks like it's SSL/HTTPS issue for all ruby stuff.\nI fixed for some time by doing this:\ngem source -a http://rubygems.org/\nThen gem installed, but still with warning.\nU can close it, not scss-lint issue. As I see.\n. ",
    "ajman825": "Problem solved. Apparently I have Psych 2.0.8 and that doesn't work well together.\n. Remove gem psych so it downgrades to 2.0.0\n. ",
    "albohlabs": "How do you fix this issue?\n. Awesome. Thx.\n. ",
    "Raffaele": "I tried to remove gem, but the answer of my system was:\ngem \"psych\" cannot be uninstalled because it is a default gem\nHow can I delete the psych?\n. ",
    "keichinger": "@Raffaele I don't know the exact answer to your question as I'm not a Ruby nor Gem expert but it is possible to just install v2.0 side-by-side to your current installed version. In order to make it work for me I just ran \ngem uninstall psych\ngem install psych -v 2.0\nand then  gem list --local | grep psych then shows the following:\nbash\n\u279c  some_folder git:(master) \u2717 gem list --local | grep psych\npsych (2.0.8, 2.0.0)\n. @sds unfortunately v0.39.0 doesn't fix the problem for me.\nThe following errors occur:\n``` shell\n$ /bin/sh -c scss-lint /path/to/some/scss/file.scss --config=/path/to/scss-lint/config/scss-lint.yml --format=XML\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: foo bar:has(baz)\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: foo.x bar.y:has(baz.z)\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: .foo:has(.bar)\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: .bip .bap\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: .bip:has(.bap)\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: x:has(.bar)\nDEPRECATION WARNING on line 1, column 1:\nThe subject selector operator \"!\" is deprecated and will be removed in a future release.\nThis operator has been replaced by \":has()\" in the CSS spec.\nFor example: y:has(.bap)\nSCSSLint::Linter::LeadingZero raised unexpected error linting file node_modules/becklyn-gulp/node_modules/gulp-sass/node_modules/node-sass/test/fixtures/spec/spec/libsass-todo-tests/libsass/propsets/input.scss: 'undefined method []' for nil:NilClass'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter/leading_zero.rb:18:invisit_script_number'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:36:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:142:in block in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:ineach'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:38:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:142:inblock in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:in each'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:invisit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:38:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:142:in block in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:ineach'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:38:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:142:inblock in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:in each'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:invisit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:38:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:142:in block in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:ineach'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:140:in visit_children'\n/usr/local/lib/ruby/gems/2.1.0/gems/sass-3.4.14/lib/sass/tree/visitors/base.rb:38:invisit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:131:in visit'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/linter.rb:25:inrun'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:48:in run_linter'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:29:inblock in find_lints'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:27:in each'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:27:infind_lints'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:17:in block in run'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:16:ineach'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/runner.rb:16:in run'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/cli.rb:54:inscan_for_lints'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/cli.rb:48:in act_on_options'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/lib/scss_lint/cli.rb:27:inrun'\n/usr/local/lib/ruby/gems/2.1.0/gems/scss_lint-0.39.0/bin/scss-lint:6:in <top (required)>'\n/usr/local/bin/scss-lint:23:inload'\n/usr/local/bin/scss-lint:23:in `'\nReport this bug at https://github.com/brigade/scss-lint/issues\nTo help fix this issue, please include:\n- The above stack trace\n- SCSS-Lint version: 0.39.0\n- Sass version: 3.4.14\n- Ruby version: 2.1.2\n```\neven though the refernced scss-lint.yml file has the following settings\nyaml\nexclude:\n    - '/**/vendor/**'\n    - '/**/node_modules/**'\n    - 'node_modules/**'\n    - '../node_modules/**'\n    - '**/node_modules/**'\n    - '*/node_modules/**'\nThe massive amount of glob patterns were just a test to really make sure it's not a configuration issue on our side. It seems like scss-lint is still scanning the directories it shouldn't want which makes it slower as needed and more importantly cause exceptions.\nI've already tried removing everything that is related to ruby (by executing rvm implode) and then re-installed it via rvm again to make sure it's a fresh installation. The Ruby version I tested before I chose to go with the latest stable release (according to rvm) was v2.2.0 and it didn't like that either.\nAny ideas what I could try in order to fix the issue?\n. ",
    "apfelbox": "Everybody who is still seeing this error:\ngem update --system\nCould help. This was probably an issue in ruby gems itself (see here for a more detailed discussion https://github.com/bbatsov/rubocop/issues/1510)\nedit: fixed a typo, we need to run gem, not gulp as previously written :dizzy_face:\n. @sds the comment about color names as map keys is totally unrelated to my issue. Please see both my code examples.\n. @yeeyang this is not related to this issue, please see the comment as linked by @sds.\n. No worries :wink: \nI always see comments to temporarily disable the linting as a hack until some very complex cases are properly supported by the regular linting rules or the other way around: as a hack in the code, that I don't want to follow the linting rules in this particular piece of code instead of properly refactoring it.\nBut I think that maps and lists are common enough data structures, that they should be handled properly. Especially as the linter ColorVariable (in my understanding) implies that the color needs to be declared in a variable, it does not specify in which type of variable (scalar, list or map).\nAbout rgba(): this is both a built-in function by Sass, and a CSS defined \"pseudofunction\". Sass just adds the convenience to not just support rgba(255, 255, 255, .5) but also rgba(#fff, .5). Although this is technically a function call and therefore no declaration in a variable (but instead in a function argument), I think it would be the better way to just explicitly this function call.\nscss\n$v1: rgba(255, 255, 255, .5); // accepted\n$v2: rgba(#fff, .5); // marked as warning\nAlthough scss-lint is technically correct here, I would argue that the second version is not wrong and should also be enabled. What do you think?\n. @sds nice work, thanks!\n. Maybe regression by #402?\nHere is my understanding / proposal of the ColorVariable linter:\n| Type | Code Examples | SHOULD report? | DOES CURRENTLY report? |\n| --- | --- | --- | --- |\n| Regular color definition | color: red; | yes | yes \u2713 |\n|  | color: #fff; | yes | yes \u2713 |\n|  | color: #ffffff; | yes | yes \u2713 |\n|  | color: rgb(0, 100, 200); | yes | no \u2717 |\n|  | color: rgb(0%, 50%, 80%); | yes | no \u2717 |\n|  | color: rgba(0, 0, 0, .5); | yes | no \u2717 |\n|  | color: hsl(0, 100%, 50%); | yes | no \u2717 |\n|  | color: hsla(0, 100%, 50%, .5); | yes | no \u2717 |\n| Special CSS keywords | color: currentColor; | no | no \u2713 |\n|  | color: inherit; | no | no \u2713 |\n| Resetting a color | color: transparent; | no | no \u2713 |\n| Directly using a variable | color: $red; | no | no \u2713 |\n| Transforming a variable value in a function | color: rgba($red, .5); | no | no \u2713 |\n|  | color: lighten($red, 5%); | no | no \u2713 |\nTested with scss-lint 0.39.0 and sass 3.4.14\n. All right, thanks. I was under the impression that it was supported before, but then I don't use color definitions other than hex values regularly.\nSupport would be very nice. Does the support matrix above look good to you?\n. Variable definitions should never be flagged. Only the direct usage of colors, without storing it in a variable first.\n. ",
    "yellowled": "Right, sorry. .scss-lint.yml\n. Thanks, that fixes the error message for me. Guess I got screwed by automagic ruby indentation on that one.\n. ",
    "grrowl": "+1 tripped me up today, and indeed it was an yaml parse error (a stray single space, incorrectly indented comment, a UnnecessaryParentReference: without any values within).\n. ",
    "andrewhowdencom": "Oh! My apologies. Thankyou for the reply! \n. ",
    "robcolburn": "Ah, so my problem is even more of an edge case.  I want to be able add breakpoints (include w/ content) after nested rules.\n``` scss\n.cat {\n  // Default/Mobile case\n  &:before {\n    content: 'W';\n  }\n// Specific breakpoints\n  @include breakpoint($desktop) {\n    &:before {\n      content: 'Whiskers';\n    }\n  }\n}\n```\nThis example could easily be refactored, but I have more complicated cases.  Again, love everything else about DeclarationOrder.\n. I've decided in my specific cases, I'll just add inline disable rules, not too bad of an experience.\n. ",
    "wli": "Thanks for fixing this up @sds! Looking forward to the release.\n. ",
    "azizur": "Using this sample from http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/:\n```\n.person {\n  display: block;\n}\n.person__hand {\n  display: block;\n}\n.person--female {\n  display: block;\n}\n.person--female__hand {\n  display: block;\n}\n.person__hand--left {\n  display: block;\n}\n```\nI am seeing:\n[15:07:23] test.scss:9 [W] Selector `person--female` should be written in BEM (Block Element Modifier) format\n[15:07:23] test.scss:13 [W] Selector `person--female__hand` should be written in BEM (Block Element Modifier) format\n[15:07:23] test.scss:17 [W] Selector `person__hand--left` should be written in BEM (Block Element Modifier) format\nLooks like we are doing BEM all wrong.\n. According to @csswizardry on http://cssguidelin.es/#bem-like-naming\nThe convention is:\n\nElements are delimited with two (2) underscores (__), and Modifiers are delimited by two (2) hyphens (--).\n\nAccording to BEM developers on (http://bem.info/tools/bem/bem-naming/):\n\nAccording to original BEM-naming convention it looks like the following:\n'block[_block-mod-name[_block-mod-val]][__elem-name[_elem-mod-name[_elem-mod-val]]]'\n(Parameters whithin square brackets are optional)\nBlock \u2014 block-name.\n   Block's modifier in key-value format \u2014 block-name_mod-name_mod-val.\n   Block's boolean modifier \u2014 block-name_mod.\n   Block's element \u2014 block-name__elem-name.\n   Element's modifier in key-value format \u2014 block-name__elem-name_mod-name_mod-val.\n   Element's boolean modifier \u2014 block-name__elem_mod.\n\nI have this in my config:\nNameFormat:\n  enabled: true\n  convention: hyphenated_lowercase # or 'BEM', or a regex pattern\nSelectorFormat:\n  enabled: true\n  convention: BEM\n. ",
    "moubry": "Nevermind. It's working. I was in a funky out-of-date Gem situation.\n. @mmuneer I honestly have no idea. Maybe make sure you're running it in the context of the bundle bundle exec scss-lint. If that doesn't work, perhaps uninstalling all gems gem uninstall --all and trying again?\n. I agree that printing nothing would definitely resolve the issue.\nFor reference, this is what RuboCop prints after running:\n```\nRunning RuboCop...\nInspecting 40 files\n........................................\n40 files inspected, no offenses detected\n```\nAnd this is what CoffeeLint prints:\n\u2713 app/assets/javascripts/users.coffee\n  \u2713 app/assets/javascripts/documents.coffee\nBoth tools print green text that indicates the either the number of files or which specific files which passed, respectively. Maybe if this text was colorized green (even if the phrasing of the message isn't changed) it would be less confusing?\n. I\u2019m closing this. You\u2019re right\u2014it\u2019s not confusing. I just misread it as a configuration issue, thinking that \u201cfound no lints\u201d meant \u201cfound no linters\u201d.\n. ",
    "mmuneer": "@moubry do you remember how you fixed this? we just upgraded to rails4 and seeing this again.\n. ",
    "olliebennett": "Thanks @sds. I agree that ColorReference is more succinct, and yes - your example indeed provides what I am looking for.\nI can attempt to create a pull request for this if you don't have the bandwidth to tackle it?\n. Great to see work happening on this. While I think the new VariableForProperties linter is very useful, it doesn't quite meet the requirements of this issue because one can still use non-standard colours in their code.\nscss\ncolor: #EEE; // now successfully linted\nborder: 1px solid #EEE; // still not linted\nNaturally, I don't want to specify a variable for all borders (and configuring lint of border-color has no effect on the above). Perhaps we still need a color-specific linter to achieve this? Or could/should the new VariableforProperties linter be extended to support this?\nThe same would apply to fonts, where one could require the font-family to be a pre-configured, but not worry about font size.\nNot sure if the above has been considered? Again, thanks to @sds and @mikeholm for getting it this far!\n. Yep - working now. Awesome job! :+1: Thanks a lot\n. Hey @makotot - this new linter is just on master at the moment (it'll be released in v0.34).\nFor now, try this in your Gemfile, and bundle and it should work! :) (we can update this to 0.34 when it's released).\nruby\ngem 'scss-lint', git: 'https://github.com/causes/scss-lint.git'\n. ",
    "tabolario": "As a suggestion, would it make more sense to have the Rake task raise an exception if the result from SCSSLint::CLI.new.run is not CLI::EXIT_CODES[:ok], and just print a message and allow the task to return execution if there were no errors?\n. Sorry, I take back what I said about the exception. Calling Kernel.exit in the case of an error code from the CLI run is the way to do it, so my main issue is just back to Kernel.exit being called for a successful run :smile: \n. ",
    "bookwyrm": "The main differences are in the use of double hyphen for the modifier (.block__element--modifier) and the ability to put an element after a modifier (.block--modifier__element).\n. Oh, I hadn't seen hyphenated_BEM...\n. Ok, yes, hyphenated_BEM works for my purposes. I'll submit a new pull request with tests and to expose the convention in the default config.\n. ",
    "Dorian": "Yep, I think with CSS 95% of the \"warnings\" I got are auto-correctable (eg: the \"line too longs\", \"too many nested rules\", ... are impossible to auto-correct automaticaly\n. Hmm, yes right I think this should be another project, I might a simple regexp based + basic rule sorting one.\n. Actually I started a repo with some basic regexp based scripts: https://github.com/Dorian/scss-lint-auto-correct\n. That was fast! Thanks, BTW I love scss-lint\n. Thanks, I may go for the quotes solution\n. ",
    "thedamon": "Thanks for getting back to me. I did do that while troubleshooting but forgot to update the question.  file now looks like\nlinters:\n      Indentation:\n        enabled: true\n        character: tab\n        width: 1\nbut the rules are not being picked up.. anything else I can try?\n. It looks like I had another yml in the directory called myproject.scss-lint.yml that I created accidentally and didn't realize it came back when I switched branches. Once I deleted it the proper yml started being picked up (before that neither were).\nEither that or it was that I rebooted Sublime Text...\nAnyway it's working now!\nApologies for being a bother.\n. ",
    "lcalvy": "hi, sorry for delay\n``` yaml\nlinters:\n  BorderZero:\n    enabled: true\nCapitalizationInSelector:\n    enabled: false\nColorKeyword:\n    enabled: true\nComment:\n    enabled: false\nDebugStatement:\n    enabled: true\nDeclarationOrder:\n    enabled: true\nDuplicateProperty:\n    enabled: true\nEmptyLineBetweenBlocks:\n    enabled: true\n    ignore_single_line_blocks: true\nElsePlacement:\n    style: new_line\nEmptyRule:\n    enabled: true\nFinalNewline:\n    enabled: true\n    present: true\nHexLength:\n    enabled: true\n    style: short # or 'long'\nHexNotation:\n    enabled: true\n    style: lowercase # or 'uppercase'\nHexValidation:\n    enabled: true\nIdWithExtraneousSelector:\n    enabled: true\nIndentation:\n    enabled: true\n    width: 4\nLeadingZero:\n    enabled: true\n    style: exclude_zero # or 'include_zero'\nMergeableSelector:\n    enabled: true\n    force_nesting: true\nNameFormat:\n    enabled: false\n    convention: hyphenated_lowercase # or 'BEM', or a regex pattern\nPlaceholderInExtend:\n    enabled: true\nPropertySortOrder:\n    enabled: true\n    order: concentric\nPropertySpelling:\n    enabled: true\n    extra_properties: []\nSelectorDepth:\n    enabled: true\n    max_depth: 3\nShorthand:\n    enabled: true\nSingleLinePerSelector:\n    enabled: true\nSpaceAfterComma:\n    enabled: true\nSpaceAfterPropertyColon:\n    enabled: true\nSpaceAfterPropertyName:\n    enabled: true\nSpaceBeforeBrace:\n    enabled: true\n    allow_single_line_padding: false\nSpaceBetweenParens:\n    enabled: true\n    spaces: 0\nStringQuotes:\n    enabled: true\n    style: single_quotes # or double_quotes\nTrailingSemicolonAfterPropertyValue:\n    enabled: true\nUnnecessaryMantissa:\n    enabled: true\nUrlFormat:\n    enabled: true\nUrlQuotes:\n    enabled: true\nZeroUnit:\n    enabled: true\nCompass::*:\n    enabled: false\nSelectorFormat:\n    enabled:false\n```\n. you right. it's ok\nthank you\n. ",
    "SebAshton": "@sds I updated my bundle to that ref and the issue still persisted.\nHowever I tracked the issue do passing order: nil into the the PropertySortOrder linter. I removed this and the rake task worked perfectly.\n. ",
    "teoljungberg": "Thank you @trotzig, glad I could help out\n. I'll gladly help out doing this btw\n. We could re-write the actual linting to use temporary files, but I think it would be nicer to support both actual files and content of files. Since it seems to be baked in https://github.com/brigade/scss-lint/blob/b0de02f59ec5c376e2e5d73e673ffea96e9dd826/lib/scss_lint/engine.rb#L20-L24\n. I see, that makes sense.\nHaving Runner being the consumed API sounds like a good idea, that's\nwhat we're using in Hound anyhow. I like the interface of files and\nsources aswell.\nOn 04/26, Shane da Silva wrote:\n\nThat functionality was added so we can easily write specs for linters, but you're right that it shouldn't be too bad to support files and raw strings.\nI'd like to have the Runner class act as the main point of contact between HoundCI and scss-lint's engine. I believe the best way to support what you're asking is to add support to Runner#run to accept an options hash that takes either files or sources as a key, and then have the Runner do the rest. Make sense?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/brigade/scss-lint/issues/435#issuecomment-96429632\n. @sds Has there been any movement on this subject?\n. Great, I'll get back to you with a PR @sds \n. @lencioni I dropped the ball on actually making the PR. I opted to modify our code to take a Tempfile instead of a string. Which was resolved for our usecase in https://github.com/thoughtbot/hound-scss/pull/17 .\n\nIf anyone wants to take up my slack here, feel free to do so.\n. I'm unsure how a test-case for this should look, any ideas @sds ?\n. > I was hoping we could adjust the runner to instead accept an options hash with files or source keys, and then lint based on whichever keys are present. This changes the signature, but I think is a cleaner approach if we want to support this in a proper way.\n@sds - That's sounds like a good approach. I wanted to make the smallest imprint at first to get this kind of feedback. I'll update the PR with the comments you made\n. ",
    "piotrkulpinski": "Yep, there are more properties that are missing from your list like 'text-size-adjust' for example.\nMaybe it'd be a good idea to mix 2 or more property sources to make sure that all of them are covered.\nAnyway - thanks for fixing it so quick!\n. ",
    "karlhorky": "No problem :) Thank you as well for the linter!\n. There is a webpack loader called scss-lint-loader (setup instructions here), but scss-lint is pretty slow.\nA much faster alternative that is more viable with webpack is the sasslint-loader, which is based off of the node package sass-lint. sass-lint unfortunately doesn't have all features that scss-lint does.\n. Yeah, I'm not sure why that's in the readme. It reports line numbers just fine for me :)\n. For new projects it looks like stylelint (with stylelint-webpack-plugin) is a nice, extensible solution. \n. ",
    "JohnAlbin": ":+1: \n. > or should transparent be an exception to the Linter?\nFirst off, I find the new ColorVariable linter incrediably useful. It's helping me clean up a legacy code base with colors all over the place.\nBut when I use transparent in my stylesheet it is because I'm trying to remove a color that is cascading or from another ruleset. Creating a variable called $this-element-border: transparent; obfuscates the fact that the element does NOT have a border. Similarly, creating a $no-color or $transparent variable is \"overwrought\" as @chris-dura said.\nUnfortunately, if ColorVariable continues to complain about transparent needing to be in a variable, I'm going to have disable this linter after I finish my refactoring for today. And raw colors will inevitably sneak back into the stylesheets. :-p\n. I'm getting the lint error like this:\n``\n$ bundle exec scss-lint sass/\nsass/components/_progress-bar.scss:52 [W] ColorVariable: Color literals liketransparentshould only be used in variable declarations; they should be referred to via variable everywhere else.\nsass/components/_tabs.scss:21 [W] ColorVariable: Color literals liketransparent` should only be used in variable declarations; they should be referred to via variable everywhere else.\n$ bundle exec scss-lint -v\nscss-lint 0.34.0\n$ bundle exec sass -v\nSass 3.4.13 (Selective Steve)\n$ bundle -v\nBundler version 1.8.2\n$ gem -v\n2.4.5\n$ ruby -v\nruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-darwin14]\n```\nThe Sass its warning about is:\nscss\n%progress-bar--ajax__throbber {\n  background: image-url('throbber.gif') no-repeat 0 -18px transparent;\n}\nand:\nscss\n%tabs {\n  @include background-image(linear-gradient(bottom, $color-tabs-border 1px, transparent 1px));\n}\nwhere $color-tabs-border: #000; is set in a different file.\n. +1 to this feature.\nThough, I'm sad to report, I have written a selector like &--state, .js-added-class-on-parent & { ... }. Not exactly the selector you mentioned, but pretty close.\n. You mis-typed the name of the linter.\nChange // scss-lint:disable VendorPrefixes to: // scss-lint:disable VendorPrefix\nI usually copy and paste the name of the linter from the warning I receive. e.g. if I see 4: [W] VendorPrefix:  Avoid vendor prefixes., I'll copy and paste the linter from there. Prevents typos.\n. I'm getting this error on -moz properties. Specifically, scss-lint is complaining about button::-moz-focus-inner in this way:\n\nPseudoElement: Begin pseudo classes with a single colon: :\n\nBut I'm pretty sure that Mozilla browsers only recognize the double colon version of that selector.\nFor pseudo-elements and pseudo-classes defined in CSS2.1, all current browsers must support both single colon (:) and double colon(::) syntaxes. For pseudo-elements defined in later CSS specs, the single colon (:) version is invalid.\nAlso, note that IE8 (and other old browsers that don't understand the newer :: syntax) will see the double colon pseudo-elements and ignore the entire ruleset as per the requirements in the CSS 2.1 spec says to do.\nHere's a list of -moz prefixes: https://developer.mozilla.org/en-US/docs/Web/CSS/Mozilla_Extensions\n. ",
    "epavletic": "Thanks Shane, I could've swore I saw text-size-adjust in the base.txt-list but maybe I've misunderstood how it's implemented. Anyways, thank you for the extra_properties-syntax; will give it a spin!\nMuch\u00a0\u2764 for SCSS-Lint.\n. ",
    "fj": "It's not urgent, but I'd be happy to take a look. Is that how scss-lint generally writes things to $stdout, via puts?\n. ",
    "makotot": "Oops..\n@olliebennett Thank you for letting me know.\n. ",
    "albertorestifo": "Tested with Ruby 2.2.0, same result\n. @lencioni I'm really sorry but it's a private project, and also a quite big one (there are 41 different SCSS files).\nIf you see any specific file that's causing the bug I can post it\n. @lencioni  by the way, about the node_modules question, the behaviour I was expecting was the following:\nI have specified the files I wanted to lint, using:\nyaml\nscss_files: \"public/style/scss/**/*.scss\"\nWhat I expect is that only those files are going to be considered. I think this should be the correct behaviour\n. ",
    "giuseppeg": "@sds @lencioni awesome thanks!\n. @sds thank you for taking the time to implement this <3\n. ",
    "abpetkov": "@sds, I don't see how this is a duplicate of the issue you linked. The issue there seems to be the include itself, rather than the mixin. I'm still seeing the warning and I'm using the latest release of scss-lint (0.34.0). Here's a more detailed example:\n``` scss\n// _font-size.scss\n// scss-lint:disable DuplicateProperty\n@mixin font-size($size, $line: $size * 1.5) {\n  font-size: ($size * 10) + px;\n  line-height: ($line * 10) + px;\n  font-size: $size + rem;\n  line-height: $line + rem;\n}\n```\nJust one usage of the mixin out of many.\n``` scss\n// _main.scss\nbody {\n  @include font-size(1.6, 2.4);\n}\n```\nGetting the warning in the mixin file, not where it's being included:\nshell\napp/assets/stylesheets/helpers/_font-size.scss:9 [W] DuplicateProperty: Property `font-size` already defined on line 7\napp/assets/stylesheets/helpers/_font-size.scss:10 [W] DuplicateProperty: Property `line-height` already defined on line 8\nPlease let me know if you can reproduce that.\n. @sds I think I got this working. Thanks for the tips!\n. ",
    "rafek": "@abpetkov how did you get this working? I'm having exactly same issue with scss-lint 0.45.0\n. ",
    "nebulousdog": "@sds A simple example would be to always use image-url instead of url. This example could be for someone who uses sass-rails's asset helpers.\n. @sds Okay, thanks for helping me better specify this, and to know what is required for such a pull request. I'll try my hand at it this week.\n. ",
    "mockdeep": "Just came across this. I think it would be pretty handy to have a rule such as this, since we've run into it a few times. I could see either looking for specific selectors ('background', 'cursor' for ours) or just any url that ends in an image format ('jpg', 'png').\n. Would it make sense to do like rubocop and have a RunRailsLints option?\n. ",
    "Sweetchuck": "Sorry, I am not agree with you.\nI think the current --format=XML is useless because there is no such a tool which is able to use it.\nYou mention that in the readme.md about the XML output\n \"Suitable for consumption by tools like Jenkins.\" https://github.com/causes/scss-lint#xml \nBut I have not found any plugin which can do anything with that XML.\nThe Checkstyle is a standard format and widely used, just with Jenkins more than 12.000 CI server instance use it. https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin\nhttp://ant.apache.org/ and https://www.phing.info are also able to mark a build as unstable based on a checkstyle.xml file.\nI really do not understand why you don't want to support the checkstyle format.\n. Atom linter is bad example because it aggregates other linters.\nhttp://eslint.org/docs/command-line-interface/#-f,---format\nhttp://jshint.com/docs/cli --reporter option\n. How often changing the format of the jUnit or Checkstyle XML without backward compatibility?\nIf you are going to drop the XML output you should drop the JSON output as well, because it also suppose a third-part integration. (I do not know any tool which is able to work with such an output)\nI think the \"scss-lint\" should support the widely used output formats out of box, this is what the other linter tools do. And beside those formats one can use a customformat.js\nhttp://eslint.org/docs/command-line-interface/#-f,---format\n-f, --format\nThis option specifies the output format for the console. Possible formats are \"stylish\" (the default), \"compact\", \"checkstyle\", \"jslint-xml\", \"junit\" and \"tap\".\nExample:\neslint -f compact file.js\nYou can also use a custom formatter from the command line by specifying a path to the custom formatter file.\nExample:\neslint -f ./customformat.js file.js\n. @sds Before I publish a new gem on rubygems.org I would like to ask you to give a code review to this repository. Thank you.\nhttps://github.com/Sweetchuck/scss_lint_reporter_checkstyle\n. Thank you again.\nhttps://rubygems.org/gems/scss_lint_reporter_checkstyle\n. > Does the CheckStyle plugin require this attribute be present?\nI do not know, but this is how the PHP_CodeSniffer works. It also puts this version number into the generated XML. Maybe this indicates that the XML which version of the Checkstyle definition compatible with. \nThe version number has no any direct relation to the Jenkins Checkstyle plugin. \n. ",
    "ixley": "+1 stumbled onto this bug as well.\n. ",
    "meowsus": "I'm seeing this too.\nI confirmed this is occurring from version v0.7.0 through the current v0.34.0 build.\nIf it helps, I currently have:\ns.add_dependency 'sass-rails', '~> 4.0.3'\ns.add_dependency 'scss-lint', '~> 0.7.0'\nin my gemspec, but I've also bumped this up to:\ns.add_dependency 'sass-rails', '~> 5.0.1'\ns.add_dependency 'scss-lint', '~> 0.34.0'\nand I still see the issue.\n. Excellent! Do you know when this will be released?\nOn Fri, Mar 20, 2015, 2:07 AM Shane da Silva notifications@github.com\nwrote:\n\nFixed by 53494a8\nhttps://github.com/causes/scss-lint/commit/53494a8d9db54c468f8ef68ec5bac2f1202e2fb7\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/causes/scss-lint/issues/374#issuecomment-83922814.\n. ignore_unspecified: false seems to work almost perfectly for what I need, for the most part it allows all properties defined in the list to be forced in it's proper order, then, all other properties that aren't part of the defined order, should be put below the defined property order.\n\nWith ignore_unspecified: true the uncaught properties can be placed pretty much anywhere, because they are just ignored.\nWhat I'm looking for is, first, the defined order is enforced then, second, the properties that are not defined are forced to the bottom of the block, in any order.\nThe documentation made it seem like that was the concept behind ignore_unspecified: false\n. Righteous! I'll snag the new version today and test.\nThanks for your help @sds!\n. Hey @sds, do you know when v0.39.0 might be released? I'm unable to pull it down from the github repo or from rubygems.org.\n. Thanks for the link to the release notes! This will be very helpful.\nI'm still seeing the issue in v0.39.0 however. Using the same property order as I posted originally, this block exhibits the same behavior. transform -> box-sizing can't be ordered without an error being thrown.\nhttps://gist.github.com/89d80eb2436e27d63d91\n. No problem. I could have done a better job making sense. Thanks for the response!\n. I was just about to close this issue myself, since I just found that blurb. Thank you so much for your response.\n. Yeah, I have a bunch installed apparently. This is most likely SublimeLinter (which is what I use to run my linters in Sublime) running scss-lint and not bundle exec scss-lint.\n$ scss-lint -v\n0.48.0\n$ bundle exec scss-lint -v\n0.39.0\nThanks for your time and help.\n. ",
    "himedlooff": "I have the same issue as @nenadjelovac.\n. :smile: thanks @sds! \n. ",
    "matt-bailey": "Thanks @sds, I'll check the version I have installed.\n. ",
    "tolgaek": "Hi @sds,\nYeah I'm on version 0.34.0 (just confirmed) and this happens with any scss file (including an empty scss) file but in case you need to have a file. Here's the content of a file that throws the same message\nscss\n.alert {\n  background-color: $secondary-light;\n}\n. Yes I do use rvm but I installed scss-lint on my current version. \nI can use scss-lint -v (which is how I checked the version) I can also lint files outside of vim.\nAlso :SyntasticInfo does show scss-lint as a valid linter (it doesn't show up there if not installed)\n. When running from within vim, I do get a stack trace with ruby related error. I included it below. I don't know what the issue is, but you can close this ticket if it's not related to scss-lint. I will try to figure it out, thanks\n\n. Figured it out! It was due to my zsh set up with rvm. Basically it's this weird thing with Vim not loading .zshrc file. More info is found here https://rvm.io/integration/vim\nBasically you need to include set shell=/bin/sh in .vimrc to allow loading of rvm properly.\n. ",
    "nenadjelovac": "+1\nThis should also apply to &:hover, &:active, &:focus and other pseudo classes.\n. +1\n. +1\n. @sds so effin awesome! +1\n. > Would it satisfactorily solve your problem if that order was configurable?\nYes please! :)\n. ",
    "marcobiedermann": "+1\n. @sds Oh, thank you very much. I've taken a look at the closed issues but did not find it.\n. ",
    "wongjn": "+1\n. ",
    "masi": "Actually I have no idea what BEM is. I just copied all the available options :)\n. No, my issue is with the current behaviour of Shorthand.\nCSS allows for the follwoing two readable shorthands:\nmargin: top/right/bottom/left\nmargin: top/bottom right/left\nBut it allows also for that one (using 3 values):\nmargin: top right/left bottom\nI don't like the last one. So I would like to configure SCSS-Lint to allow the first two ones but report an error for the last one.\n. ",
    "mrowles": "Great, thanks @lencioni :+1: \n. ",
    "kristijanhusak": "@sds Yeah, you're right, I was just relying on tests. I'm not very familiar with Sass API, and this is my first time I tried to do anything in ruby :)\nThanks for the fix. Will you tag a release so we can update it?\n. @sds \nI'm having totally same problem as @decodedigital .\nSystem: Xubuntu 14.10\nruby version: 2.1.2p95\nsass version: 3.4.13\nscss-lint versions tried: 0.35.0, 0.37.0, 0.38.0\nNot sure, but problem may be with the linter not finding @else as node for some reason, and returning nil.\n. ",
    "nottrobin": "Thanks @lencioni that's really cool. I might get involved with that :)\n. ",
    "luqmaan": "FYI, sass-lint has moved to https://github.com/sasstools/sass-lint.\n. ",
    "davidjbradshaw": "I installed the latest version of this via gem install scss-lint today and that still has this issue. How do I get the version with the fix in it?\n. Ok just did an update and it's fixed now.\nThanks.\n. ",
    "nikolai-shabalin": "+1\n. +1\n. ",
    "franciscop": "I thought they were rethorical questions. I agree with your conclusion and the closing of the issue.\n. ",
    "yeeyang": "I was just looking at this as well. Use case is when I'm looping through my map.\n```\n// example\n$themes-map: (\n   some-theme: (\n      'red': #f00,\n      'green': #458b00\n   ),\n   ...\n);\n// function get-color() to grab the color usage\n.selector {\n   background: get-color(some-theme, 'red');\n}\n```\nThe key of 'red' and 'green' will return as a false positive as trying to declare a color literal. I'm probably doing something wrong anyway but wanted to report my findings.\n. ",
    "nene": "I add my vote for this feature request.\nWhat if the site background isn't pure white and the text pure black, but I still want to use pure white and black in several unrelated places? It would then be totally wrong to use $foreground and $background as a substitute for pure black and white. In that case it seems better to just use $black and $white, which is silly as we could just have used black and white keywords.\nThe thing is, one can't just blindly substitute all uses of black and white with some variable, on needs to consider why something is black or white and define a variable accordingly. Like some black might be our default text color, while some other black might be our default border color. One will likely end up with multiple variables for black and white. This is all nice and tidy in ideal world, but such effort takes considerable time.\nIn reality I need to confront with code bases where colors black and white are my smallest concern. I'd rather concentrate my effort in eliminating all the cryptic hex codes scattered around the code base.\nI'd very much like to use the ColorVariable linter, but it offers way too black-or-white choice in the world of colors. Currently ColorVariable considers this code:\ncss\na {\n    color: blue;\n    &:visited {\n        color: purple;\n    }\n}\nequally as bad as this code:\ncss\na {\n    color: #3399ff;\n    &:visited {\n        color: #9966ff;\n    }\n}\nwhich is IMHO totally unfair. The first snippet is clearly more readable then the latter.\n. ",
    "iamskok": "+1 for this feature :+1: \n- It\u2019s quicker to type #fff and #000 instead of $white and $black.\n- There is never a time where you will update the variables $white or $black to be anything other then #fff or #000. If you do update these to be anything else, then you clearly are not writing semantic code.\n. ",
    "ianmcnally": "great idea @Anahkiasen. Added it in  1eb3cb8.\n. Good idea @sds. I was looking at it from a disallow-these-things perspective, but I like the idea of globally allowed properties. It makes you consider what units you can and/or want to use more. And a property-by-property override is a good compliment to that.\n. Thanks for taking the time @sds. All rubocop and test work was updated in 12f9241. Everything should be good to go!\n. :+1: thanks!\n. :+1: \n. I'll think on that\n. I have such a love/hate thing with rubocop. Fixed in 12f9241.\n. Definitely wasn't. I made that harder than I needed to.\n. You're right. I was confused by yml > ruby types.\n. :bow: \n. ",
    "frontendbeast": "Sorry about the delay in responding. Further investigation has revealed that the bug is only being caused when the indentation linter is being used as follows: \n```\nlinters:\nIndentation:\n    allow_non_nested_indentation: true\n\n```\nI'm currently using sass 3.4.13 and scss-lint 0.38.0.\nAlso, disabling the linter inline either independently or globally has no effect.\n// scss-lint:disable all\n// scss-lint:disable Indentation\n. I know next to no ruby, but having a mess around with /Library/Ruby/Gems/2.0.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb it looks like an IfNode which is an Else doesn't get assigned a node_parent value. \nI added a couple of logs in the function at line 183:\n```\ndef one_shift_greater_than_parent?(node, actual_indent)\n  if node.is_a?(Sass::Tree::IfNode)\n    puts node\n    puts node.node_parent\n  end\nparent_indent = node_indent(node.node_parent).length\n  expected_indent = parent_indent + @indent_width\n  expected_indent == actual_indent\nend\n```\nWhich gives me\n```\n\n\n\n```\nSo the first IfNode has a parent of MixinDefNode, but the second IfNode (the Else) doesn't have a parent. \nI think that's about as much help as I can be without learning ruby, hope it's useful!\n. Glad I could help. Thanks for fixing this and all the other hard work you do on the linter, it's much appreciated!\n. See my comments on issue #409, seems to be the allow_non_nested_indentation setting in the Indentation linter. \n. Check the PropertySortOrder linter documentation for details and explanations, but it defaults to alphabetic sorting, and sorting results in better GZIP compression compared to no sorting. \n. ",
    "szarouski": "Hi @sds, the issue is happening for me with sass-lint -v 0.38.0 for following code:\nscss\n@for $i from 0 through 2 {\n    @if ($i) {\n    } @else {\n    }\n}\nand doesn't happen for following:\nscss\n@for $i from 0 through 2 {\n    @if ($i) {\n    }\n}\nstack trace\nSCSS Lint\nSCSSLint::Linter::Indentation raised unexpected error linting file live-style-guide\\specs\\RewardsCentre\\Shared\\grids\\temp.scss: \n'undefined method `line' for nil:NilClass' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:194\n:in `node_indent' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:184\n:in `one_shift_greater_than_parent?' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:159\n:in `check_arbitrary_indent' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:53\n:in `check_indent_width' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:39\n:in `check_indentation' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:17\n:in `check_and_visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:61\n:in `visit_if' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:131\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:62\n:in `visit_if' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:131\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:142\n:in `block in visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:140\n:in `each' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:140\n:in `visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `block in visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:20\n:in `check_and_visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:131\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:142\n:in `block in visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:140\n:in `each' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:140\n:in `visit_children' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `block in visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter/indentation.rb:10\n:in `visit_root' c:/Ruby2/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:131\n:in `visit' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/linter.rb:25\n:in `run' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:48\n:in `run_linter' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:29\n:in `block in find_lints' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:27\n:in `each' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:27\n:in `find_lints' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:17\n:in `block in run' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:16\n:in `each' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/runner.rb:16\n:in `run' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/cli.rb:54\n:in `scan_for_lints' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/cli.rb:48\n:in `act_on_options' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/lib/scss_lint/cli.rb:27\n:in `run' c:/Ruby2/lib/ruby/gems/2.2.0/gems/scss-lint-0.38.0/bin/scss-lint:6\n:in ` ' c:/Ruby2/bin/scss-lint:23\n:in `load' c:/Ruby2/bin/scss-lint:23\n:in ` ' Report this bug at https://github.com/brigade/scss-lint/issue\nthank you\n. Oh, sorry, I just looked at the commit above and in changelog.md it was saying 0.38.0. My bad.\n. ",
    "lunaryorn": "PS:  The README section on Emacs isn't exactly correct.  Flycheck doesn't yet support SCSS-Lint.\n. > The difference is negligible, [\u2026]\nIn theory, where users read documentation, I'd agree of course, but I think we both know that this theory is not our reality.  In our reality, where users do not read documentation, the steps to use scss-lint with Emacs and Flycheck are more likely to be as follows:\n1. Have Emacs and Flycheck\n2. Find out about scss-lint\n3. gem install scsslint. D'oh\n4. gem install scss-lint. Success\n5. Open SCSS file in Emacs\n6. Strange error message: Cannot load FOOBAR. LOL, wut?\n7. Report issue to Flycheck: \"IT NO WORKS FOR SCSS. PLZ HELP!\"\nOf course, I'm exaggerating, slightly sarcastically probably, but it's my reality nonetheless: Users don't read documentation.  \nRather they haphazardly install a tool and blindly hope that Flycheck supports it.  If it doesn't, they are much more likely to report an issue than reading the documentation about how to setup a tool for Flycheck.  \nIn this reality, a Gem more or less does make the difference between flawless support of SCSS and a broken tool.\nWhich puts a burden on my shoulder, since I either have to cope with these issue reports, or write code just to catch the error and turn it into a reasonable and visible error message that directs the user to install the Checkstyle extension.\nNow, I've read your comments in #372, but I cannot but admit that I have a hard time understanding your point.  I could understand it more if you had but a single output format, and no plugin interface.  But you seem to be maintaining already a proprietary JSON format, a proprietary XML format, and a stable and tested plugin interface, which makes me wonder why just one additional standardized XML is so much of an additional burden compared with the load that you already carry.\nI also find a slight contrast between your claim to make scss-lint easy to integrate in other tools and your refusal to add the one single output format that is universally supported by nearly every tool out there.  I mean, it's not like adding Checkstyle would open up a kitchen sink of dozen different formats.  Checkstyle XML is the one format that everyone understands.  If you have that, you don't need anything else, specifically no proprietary JSON and no proprietary XML anymore.\n. > I've just checked, and larger projects like Rubocop also have Checkstyle formatting in a separate plugin.  This is a common pattern, and one that scales.\nOTOH, phpcs and jshint include a checkstyle formatter, both arguably being larger than Rubocop in terms of users and integrations.  And considering that Rubocop has about eight different formatters built-in, I doubt that it's about \u201cscaling\u201d as in \u201cefficient use of your development resources\u201d.\nAnd I doubt whether the design and implementation of a generic plugin system for something as trivial as output formatting\u2014I may underestimate the complexity of this but we are talking about printing a list of errors to stdout, aren't we?\u2014scales any better than just implementing an established (I accept your correction and have adjusted my choice of words accordingly) structured output format once and for all.  \nAfter all, checkstyle is hardly a complex format:  Flycheck has twenty lines of code to parse Checkstyle XML into a list of errors, with a rather poor XML library, so how hard can it be to format a list of errors as Checkstyle XML?\n\nThis may not be an answer that satisfies you,\n\nI'm not convinced if that's what you wanted to know but I do not care anymore.  It's too small an issue for me to spend any more time on, and it's your tool after all, not mine\u2014I'm just the proxy that stands between you and your users.\n. Just for the record, Flycheck (a linting extension for Emacs) would profit from this feature as well :relaxed:\n. @sds Thank you.  That is great news!  \ud83d\ude0d\nMind if I ask whether there is an ETA for a release that includes this change?\n. @sds I hate waiting for the cool things \ud83d\ude0a\nHow long do you think will it take for the dust to settle?  Should we wait until the first bug fix release of 0.43?  Or should we wait for the next minor release?\n. ",
    "conatus": "Thanks for this - at least I made a PR to fix this \"problem\" amongst the other tickets!\nPerhaps you could make this clearer in the documentation or alternatively rename BEM to \"classic/strict/orthodox BEM\" or something? Every tutorial I have seen, including some very recent ones uses the format that diverts slightly from the original formulation. The fact I wasn't the first to have this problem illustrates something is afoot.\n. Thanks very much, this is cool.\n. ",
    "FloNeu": "ok. thx, anyway. Will  try harder to get ruby installed then :) g\n. ",
    "christophercochran": "@sds From my understanding hyphenated_BEM is for writing  BEM like classes like:\nblock-name--mod \nblock-name__elem--mod\nwhere the modifier is delimited by a '--' (double hyphen) instead of '_' (single underscore).\nblock-name_mod\nblock-name__elem_mod\nis following BEM naming convention set by BEM (https://github.com/bem/bem-naming/blob/master/README.md) and would use a single underscore instead of the double hyphen, so should still be within the convention of BEM and not hyphenated_BEM.\nblock-name_modifier_value\nblock-name__elem_modifier_value\nare currently allowed, but sometimes it is simpler to just write block-name_mod. Unless I am wrong and block-name_mod is not allowed, but in the link above it seems that it should be. \n. @mrpavlikov Thank you for your explanation. I saw one mention of boolean statements, but now that I think of it, in the world of CSS, these would be few anyways, and having the name and value does give more detail into what the modification is. Thank you again!\n. ",
    "ndarville": "Awesome, thanks so much. :+1:\n. ",
    "franzheidl": "+1 for support of linting strings.\nWould be great to use scss-lint for things like text editor/ide plugins to lint the current contents of a file, no matter whether the current state of the file is saved or not.\n. ",
    "iainbeeston": "I use scss-lint via my editor, so it's harder to pass through options.\nAlso an explicit option is harder to remember. With other linting tools it\nhappens automatically, so I can set options once and then forget about them.\nOn Thu, 23 Apr 2015 at 5:23 pm, Dura notifications@github.com wrote:\n\nCan't you just pass a config file by using the --config argument in the\ncommand...\nscss-lint project/*/.scss --config ~/your/home/directory/scss-lint.yml\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brigade/scss-lint/issues/436#issuecomment-95640391.\n. Yes it makes sense and I'm familiar with that viewpoint. Unfortunately not\nevery developer on my project uses scss-lint. I see it as part of my own\npersonal setup, and beyond the most fundamental config (like indentation\nlevel) I prefer to keep editor or linting config separate from the source\ncontrol I use for code.\n\nThere are a few reasons that I like to work this way. I don't want other\ndevelopers to be lumbered with config they don't use (or even understand).\nFiles that are checked into source control alongside the code have a habit\nof ending up deployed on production servers. It also feels like a better\nseparation of concerns to me - editor, linting and build config are each\nonly useful on one environment.\nOther linting tools allow both per-project and per-user config (as does\ngit, and other Unix tools). I could check .scss-lint.yml into my project\nbut at present it's the only tool I use that has this issue. The best\ncompromise I can think of is to include it in my .gitignore file but that\nstill means I'll need to copy or symlink the file into every project that I\nuse scss on.\nIf it's not a feature you guys want then so be it: I'll have to work around\nit in future.\nOn Thu, 23 Apr 2015 at 6:26 pm, Shane da Silva notifications@github.com\nwrote:\n\nHey @iainbeeston https://github.com/iainbeeston,\nI understand the desire here, but it is slightly at odds with how we\nbelieve this tool should be used.\nIdeally, you should have a .scss-lint.yml file for each of the\nrepositories you lint with scss-lint. This ensures that anyone else\nworking on your repository also uses the same configuration, as it is kept\nup to date with the repo.\nI understand that might be perceived as a pain if you have multiple repos,\nbut the benefits are pretty significant once you realize that you get the\ndistribution of the configuration for free when you do this: regardless of\nwhether you are running in a CI environment or on another developer's\nmachine, the configuration is the same and you don't need to ensure you're\nkeeping all those locations in sync.\nDoes that make sense?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brigade/scss-lint/issues/436#issuecomment-95662990.\n. Thanks for the detailed response. I'll see if I can compose a PR later this\nweek and see what people think the changes involved.\n\nOn Thu, 23 Apr 2015 at 20:32 Shane da Silva notifications@github.com\nwrote:\n\nI'm open to accepting a pull request adding support for this (I don't\nthink it would be hard to implement) if you want this sooner rather than\nlater; otherwise I'll get to it when I can. I understand this is relatively\nstandard with other UNIX tools, and if developers would rather use a\ngeneric user-level configuration in their home directory then we should let\nthem.\nSome thoughts on your points, however:\nUnfortunately not every developer on my project uses scss-lint.\nThen I think you're doing it wrong! [image: :stuck_out_tongue:] A huge\nadvantage here is enforcing consistency amongst your team for how to write\nSCSS. I understand that getting your team to agree on a set of standards\ncan be a hurdle, but once done it ends up saving you time in the long run\nas you can now enforce these conventions in an automated way, instead of\nvia code review or ad hoc discussion each time it comes up.\nI prefer to keep editor or linting config separate from the source control\nI use for code.\nEditor config I agree with here to some extent (no one stores their .vimrc\nin source control for projects), but projects like EditorConfig\nhttp://editorconfig.org/ aim to provide a standard way to enforce\nthings like tabs vs spaces etc. (most editors have a plugin to enable\nsupport), which is also something that should be linked to the repository.\nHaving different developers using different tab/space results in\nunnecessary code changes when editing the same file (introducing the\npossibility of merge conflicts etc.)\nSimilarly with linting: why would you want to vary your lint configuration\nfrom person to person? That introduces inconsistency that can cause\nunnecessary work. If one developer prefers selectors with format X and\nanother format Y, they'll keep changing each other's code when working on\nthe same set of files. Storing it with the repository is the easiest way of\nguaranteeing this enforcement\u2014you don't need to ensure developers install\nanother repo with all of your standardized lint configuration.\nI don't want other developers to be lumbered with config they don't use\nI don't understand the burden you're implying here. It's a file that\ndoesn't affect anyone unless they choose to interact with it by running\nscss-lint.\nFiles that are checked into source control alongside the code have a habit\nof ending up deployed on production servers\nCan you elaborate on why this is a bad thing? You're not shipping an\nexecutable, you're shipping a small text file. That's not going to break\nthe bandwidth bank on any deploy process, and unless you're doing something\nreally funky it shouldn't result in that file being served by your web\nserver.\neditor, linting and build config are each only useful on one environment.\nThis depends on your development process. At Brigade, we use Overcommit\nhttps://github.com/brigade/overcommit to run git hooks in development\nso that linters can run against code before it is even committed. We then\ndouble-check in CI test environment that these hooks actually ran by\nrunning the linters again, but this time against the entire repository.\nThis is certainly a level up from what most development teams do, but we\nbelieve the consistency it provides (and the incredibly low cost to\nimplement) makes it worthwhile.\nAt the end of the day, I understand different teams will have differing\nopinions with how they want to develop. Since Brigade maintains scss-lint,\nit is necessarily influenced by the philosophy suggested above, and so some\nfeatures will lend themselves towards supporting that philosophy. Hopefully\nthis doesn't preclude different uses, so your request is still a valid one.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brigade/scss-lint/issues/436#issuecomment-95694085.\n. \n",
    "justin808": "@sds Sorry about the slow response. The issue was https://github.com/bbatsov/rubocop/issues/1839\n. ",
    "gilbox": "yep, I had read issue #161 which prompted me to open this PR. :+1: to supporting 3rd-party repos\n. ",
    "pselden": "Thank you! Missed that issue!\n. ",
    "justinlocsei": "Ah, right!  I'll get this fixed.\n. The Rubocop failures should now be fixed.  Thanks for considering this pull request, and for the great tool!\n. ",
    "AurelioDeRosa": "Hi @sds, I hadn't the time to submit a PR but I might have found a temporary solution. Specifically, you can avoid the tool to raise the error by setting placeholder_convention: hyphenated_lowercase for NameFormat and placeholder_convention: hyphenated_BEM for SelectorFormat.\nWhat do you think of this approach?\n. I've just realized that there is no need to set placeholder_convention: hyphenated_BEM for SelectorFormat if it's the default. So, now I wonder if this issue is still valid since setting placeholder_convention: hyphenated_lowercase for NameFormat fixes the problem.\n. ",
    "isGabe": "Thanks for the response. I made sure all of the default linters were declared and everything is working well.\n. ",
    "madpilot": "I was following the instructions for including the default rake task in our Rails (3.2) app, which uses syck as the default YAML parser for legacy reasons. Since there isn\u2019t a way to tell scss-lint to never read the default (it tries to merge), it was failing.\nThe simplest fix was to modify the YAML file, but a better(?) long term solution might be allow ignoring the default file completely?\n\nOn 13 May 2015, at 2:03 pm, Shane da Silva notifications@github.com wrote:\nHey @madpilot,\nCan you elaborate on what context we're parsing the default scss-lint YAML configuration with something other than the default YAML parser that ships with Ruby?\nTo me, this is a problem with the syck parser itself, not scss-lint (and I'd rather see an issue posted with that project). I'd like a better idea of why it is necessary for this file to be parse-able by syck without fixing the problem upstream.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nMyles Eftos\nMobile: +61-409-293-183\nMadPilot Productions\nURL: http://www.madpilot.com.au\nTry our time tracking system: 88 Miles!\nhttp://www.88miles.net\n. ",
    "IschaGast": "Ow now I know why I set the false value because when I set it to true I get this error, don't know how to solve this\n```\n\n\nscss-lint failed with error code: 70\nand the following message:Error: Command failed: /bin/sh -c scss-lint -c\n.scss-lint.yml static/scss/base/_buttons.scss static/scss/base/_fonts.scss\nstatic/scss/base/_global.scss static/scss/base/_grid.scss\nstatic/scss/base/_icons.scss static/scss/base/_print.scss\nstatic/scss/components/_modules.scss static/scss/generic/_mixins.scss\nstatic/scss/generic/_reset.scss static/scss/generic/_settings.scss\nstatic/scss/generic/_utils.scss static/scss/ie.scss static/scss/style.scss\n```\n. This is what I get when I lint on my project folder:\n\n\nSCSSLint::Linter::Indentation raised unexpected error linting file static/scss/generic/_settings.scss: 'undefined method `line' for nil:NilClass'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:194:in `node_indent'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:184:in `one_shift_greater_than_parent?'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:159:in `check_arbitrary_indent'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:53:in `check_indent_width'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:39:in `check_indentation'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:17:in `check_and_visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:61:in `visit_if'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:131:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:62:in `visit_if'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:131:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:142:in `block in visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:140:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:140:in `visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `block in visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:20:in `check_and_visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:131:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:142:in `block in visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:140:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:140:in `visit_children'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `block in visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter/indentation.rb:10:in `visit_root'\n/usr/local/lib/ruby/gems/2.2.0/gems/sass-3.4.13/lib/sass/tree/visitors/base.rb:36:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:131:in `visit'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/linter.rb:25:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:48:in `run_linter'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:29:in `block in find_lints'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:27:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:27:in `find_lints'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:17:in `block in run'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:16:in `each'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/runner.rb:16:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/cli.rb:54:in `scan_for_lints'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/cli.rb:48:in `act_on_options'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/lib/scss_lint/cli.rb:27:in `run'\n/usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.38.0/bin/scss-lint:6:in `<top (required)>'\n/usr/local/bin/scss-lint:23:in `load'\n/usr/local/bin/scss-lint:23:in `<main>'\nI use grunt scss lint but he said I have to report my issue over here\n. Thanks, that fixed it :)\n. ",
    "mattdell": "That's also a good suggestion, @trotzig. It's funny you mention that solution because I just wrote everything to go into a configuration file for my current project.\n. I've added that to our scss-lint config. Works great!\nVariableForProperty:\n    enabled: true\n    properties: ['z-index']\n. ",
    "corysimmons": "Very cool. Thanks for the quick reply.\n. ",
    "bassjobsen": "seems to be due to  accidentally using test #{a} instead of  test #{$a}.\n. Thanks for your quick answer.\nWhat i tried to say. I think the complete url(\"path\") is the string for the parser and \"path\" is only a part of this string. url() differs from rgba() cause Sass got its own rgba() function.\n. From the same source you reference :) Sass::Script::Tree::Funcall:\n\nA function call either calls one of the functions in Functions, or if no function with the given name exists it returns a string representation of the function call.\n\nAs far as i understand url() is not one of the functions in Functions, so a string representation of the function call will be returned.\n. ",
    "istro": "That was quick \"lack of response\" :-)\nIn any case, I do agree with the point addressed in PR 459. This is better yet :+1:. I might be one of the people trying out the new feature :japanese_ogre:\nAs to @snookca's comment - makes sense, too. Then word-spacing being text-related also belongs in that same group with line-height and letter-spacing, while list style ones should be separate I guess.\n. it sorta does, but it's sorta ugly this way, too. I almost prefer the hardcoded link, it's at least readable at a glance.\n. ",
    "olafgleba": "Hi @sds,\nyeah, i fully agree. I was wondering why placeholders are included in both linters anyway. So removing placeholders from NameFormat would be fine by me. \nMight prevent such mixed up issues like https://github.com/brigade/scss-lint/issues/451 also because no clashing possible then. And the necessity to disable NameFormat inline when using placeholders with the hyphenated_BEM Syntax (as a valid workaround).\nThanks for your answer!\n. ",
    "viveleroi": "I would PR it but will have trouble finding the time, and am not up to speed on ruby ;p\n. Will you be tagging a new release soon? I want to get our project updated but would need to have my team update directly from source.\n. Commenting here as well.\nThe fix provided introduces a new rule that warns on comma-separated @extends. Problem is, that should be allowed (or at least configurable). This rule should enforce using placeholders with @extend and rejecting classes. I still want to allow the use of commas.\n. ",
    "danieldiekmeier": "I hope this is the right place for it. I also thought about putting it near the top, between display and position?\n. Would it also be possible to add support for something like order: 'my-ordering.txt', so I don't need to have the whole CSS definition inside my yml?\n. I take that back. Everything is fine the way it is!\n. ",
    "anguspiv": "Thanks, sorry about that should have read the changelog carefully.\n. ",
    "gsnedders": "This seems very much like #373, and I presume is caused by the same bug.\n. ",
    "darbyw": "I think this change might have made it so that the following is flagged as a ColorVariable violation:\n$panel-shadow-color: rgba(0, 0, 0, 0.3);\nIs this intended?  This is not covered by the matrix above, but it seems like it should pass since we're assigning the color to a variable to be used elsewhere (which is what ColorVariable is intended to promote).\n. @apfelbox I see - there might be a regression then.  We had to disable the rule to get our build to pass:\n// scss-lint:disable ColorVariable\n$dropdown-menu-shadow:          rgba(0, 0, 0, 0.2);\n$panel-shadow:                  rgba(0, 0, 0, 0.3);\n// scss-lint:enable ColorVariable\nLet me know if there's any further information I can provide!\n. Thanks @peacefulrespite, that makes sense...\nAlthough per @apfelbox's comment above, it sounds like this is not intended behavior.  Then again, @sds's comment in #609 seems to go the other direction.\nAt this point, things are a little bit unclear to me... but imho, it is not very intuitive that you can get a ColorVariable warning when you're defining a color variable, simply because the color was specified with rgba instead of in hex.\n. ",
    "brettchalupa": "@darbyw after exploring this more, the lint can be addressed with putting the RGB part of the color into a variable and then using that in your variable definition w/ the alpha. For example:\nscss\n$white: #FFFFFF;\n$dropdown-menu-shadow: rgba($white, 0.2);\n$panel-shadow: rgba($white, 0.3);\nwill satisfy the lint and should work as expected.\n. @sds thanks for the info and links to the discussion and PR. I appreciate it!\n. ",
    "ptarjan": "@sds yeah, specificity changes would be bad, but WITHIN a comma list, the ordering isn't semantic so I just wanted something. I'm also fine with shortest to longest ordering, or really anything.\n. Yes that's exactly what I meant, the missing units.\n. An nice. Then I'm proposing that by default all the allowed CSS units should be in there.\n. Sadly I don't, I'd be Googling for it like you would. Can you start small with the obvious ones and then grow it as we notice problems? I'd start with padding (and all the 4 -top, -right variants), margin (and variants) font-size, height, and width.\n. ",
    "tobiashm": "Maybe if the input was just a stream, which might come from a file, but could also come from stdin or in the form of StringIO.\nI would really like the CLI to be able to accept a stdin stream, as that would make integration with other tools, like editors, much easier.\n. I think this looks pretty good. There're not many specifics listed at https://smacss.com/book/formatting#grouping except for the general grouping principles. So maybe it would be a good idea to add some comments about this being based on SMACSS, with some additional principles for property orders, just so that others don't take this to be an official expression of Jonathan Snooks intent.. I think it would be a good idea to precede this with a comment about these properties being outside of the groups listed at https://smacss.com/book/formatting#grouping (sine the following rules are grouped by a comment \u201cheading\u201d). There're no other vendor prefixed rules in these lists, so I don't think it's a good idea to start adding these here.. ",
    "Undistraction": "Latest available from Ruby Gems: 0.38.0\n. @sds Thanks for the headsup\n. Well I suppose that's just a matter of personal preference. In your example you scatter state (breakpoints) down through children, meaning that to understand the state of a component you need to look at multiple (identical) breakpoints in different places. In mine I prefer each state to exist in one place so I don't have to go looking for where a breakpoint occurs within a component. I prefer to declare the default state (including any nested or BEM-style nested components) then move through each state in order so I can see how a component is effected by each breakpoint.\n. Yes. Because otherwise you might be defining the styles of a nested Icon when a button is hovered before you define its default styles. Obviously this isn't going to effect the outcome, but in terms of comprehension I think that avoiding this is preferable.\n. To be honest, this isn't about whether my way is preferable to yours or vice-versa, just that people do things differently, often with equally valid, different reasons, so it would be great to support both approaches.\n. That would be really great.\nIf we could treat mixins interchangeably with properties so that the name of a mixin could define its position, that would be even better ;)\n. +1 The following is incorrectly picked up by the TrailingSemicolon linter:\n$app-rhythm-value-map: (\n  default: (\n    vertical: 17px,\n    horizontal: 17px\n  )\n);\n. FWIW I think this is not desirable behaviour. It would make more sense to assume the comment is not broken, otherwise any unrelated comment will case the linter to pass it.\n. Sorry. Just found #639 \n. ",
    "adamsoffer": "I prefer to declare parent selectors before @includes with content. Currently, however, the following throws a warning:\n```\n.header__logo-container {\n    @include transition(top $header-toggle-speed);\n    background-color: $cobalt-blue;\n    display: table-cell;\n&:hover {\n    top: 35px;\n}\n\n@include media($large-screen-up) {\n    height: 130px;\n}\n\n}\n```\nIs it possible to include the parent selector in declaration order? Also, is there a reason the linter prefers parent selectors to come after @includes with content? Perhaps I'm missing something.\n. ",
    "ste-m": "+1 for configurable order\nActually i have the same media query approach as @Undistraction using the breakpoint-sass library.\nSo configurable order would be totally good, but would also allow any @include to be placed under normal properties which i would personally not consider good.\nSo maybe a keyword list would be better?\nLike excluding specific @include keyword from the ordering rule?\n. @sds sorry for that, didn't find the duplicate, works well. Thanx!\n. ",
    "dbox": "+1 to configurable order.\nMy current ideal flow would be:\n@extends, @includes without content, properties, nested rule sets, @includes wth content.\n. ",
    "jblandry": "+1 to configurable order.\nMy current ideal flow would be:\n@extends, @includes without content, @includes with content, properties, nested rule sets.\n. ",
    "cih": "No problem thanks for the feedback @lencioni \n. Hey @sethlopezme, this should be fixed in https://github.com/brigade/scss-lint/commit/c6ff3aee20aeb2e644e5605459ffee26306aa461. Would you mind using the master branch to confirm this resolves your problem?\n. No worries, cheers for the feedback @sds, updated.\n. Hey @danyshaanan,\nThe gem was renamed a while back to scss_lint rubygems has up to 0.41.0 https://rubygems.org/gems/scss_lint\n. Hey @lokesh,\nI can't spot anything from your example that looks wrong, I'm also having problems replicating this. I've created a test case here https://github.com/cih/custom_linter_test, if I run scss-lint from the root of this I see the expected output including that provided by the custom linter. Would you mind seeing if you could either update this example or provide one that fails with more details?\nThanks!\n. Hey @drwaky,\nThere is an issue open for this one https://github.com/brigade/scss-lint/issues/445, I did implement the SpaceAfterVariableName part and planned on getting round to implementing the SpaceAfterPropertyColon too, dropped the ball on that one. I'll take a look at this and get a PR up soon!\n. Hi @smnbbrv,\nBy default custom linters are loaded from .scss-linters in the root of your repository, this however is local to your machine, each machine you want to use the custom linters would need to have the directory and linters within. Although you could check the .scss-linters into your projects source control if you're looking for a more distributed solution I would recommend using the plugin_gems option which would allow you to publish your custom linters to a repository which your team can contribute to.\nThanks,\nChris\n. Could you provide a repo that demonstrates the problem? If so will be happy to dig a little deeper. What version of scss-lint is in the projects Gemfile and is that the same version used when running on your machine scss-lint -version?\n. From the looks of it the problem is with the scss-lint version, the custom linters feature was not added until the 0.40.0 release. If you upgrade from version 0.38.0 to > 0.40.0 then it should work as expected.\n. That sounds like a nice improvement and should be fairly straightforward, I'll have a go at this and push up a PR shortly.\n. ",
    "CamJN": "ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin14]\nSass 3.4.15 (Selective Steve)\n. ",
    "kristerkari": "Thanks for the scripts! This is exactly one part of the problem I have. Since scss-lint is Ruby based, I'm not able to easily write scripts like you just did. Could you consider to include those scripts to the repo, readme, wiki, etc. so that those are available to someone else that has the same problem?\nAlso, csscomb is not just any tool because it can quite powerful when used together with scss-lint (first apply linting, then comb the code using shared settings). It is too bad that open source library authors often overlook the benefits that their tool can bring when used together with another library. For example, would be nice to see these two projects sharing their property order configurations (at least the configurations, if not the format).\nUsing a script to convert csscomb -> scss-lint means that I have to have the sort order in two different files and need to update both files when something changes.\n\nI don't think it makes sense for scss-lint to support an arbitrary format used by a third-party tool. That introduces an unnecessary coupling (any changes to that format will break scss-lint).\n\nYes absolutely not, my request was mainly for supporting JSON in general, but having something that would support csscomb out of the box would have been a plus.\nSupporting a third party format does not mean that you have to create coupling. IMO the correct way of implementing something like that would be a plugin system that would enable any format to be supported. Look at PostCSS for example, with its plugin based architecture it can support almost any kind of tool/format. But anyway, these were just my 2 cents on how to support something without creating coupling.\n. Thanks! Sounds awesome.\n\n@brigade can't take on the task of maintaining all of these different integrations (we aren't experts with every toolset\u2014no one is). Hopefully someone from the community will step up and and make those plugins a reality if the need for them is real.\n\nIf you again look at PostCSS as an example, you can see that it is successful because of good documentation, guidelines, api docs, faq and community. Also the guy behind PostCSS goes around and gives conference talks about PostCSS. It is not easy, but it is doable.\n. > Is there a strong reason you need to order the vendor prefixes a certain way?\nI was converting existing configuration from csscomb -> scss-lint, and it includes prefixes. The problem is that csscomb will order the prefixes in the specified order, but then scss-lint will give linting errors if the order is not what it expects (it ignores the prefix ordering that coverted csscomb config has).\nSo, having this feature would make scss-lint work correctly when existing csscomb configuration is used.\n. ",
    "Janther": "Of course i didn't think of those use cases.\nThanks\n. ",
    "hcatlin": "I like it! It's fine usage-wise. If you want design blessing, ask Jina Bolton!\n. ",
    "connorshea": "I like the dashed line, although I think maybe \"sass\" should use a bolder weight and/or a rounded font? I also kind of preferred the pink text, but I don't feel too strongly on that front.\n. :+1: agreed, would like this change. Any idea of when 1.0.0 will be released?\n. Would really like this merged, one major thing I feel is missing from the gem right now :)\n. Just ran into this same issue with include-linter not working.\n- OS X 10.11\n- ruby 2.3.0p0\n- scss-lint 0.45.0\n. I've been having the same problem, now running into it on two different projects.\nLooks like the exclude option in the config doesn't have any effect either.\n. Here's the file with the Rake task and the most recent commit which seems to modify it.\n. This is kind of a major pain point for me, any updates @sds?\n. I think a DisallowZIndex rule would be a very good idea. z-index should be definitely be used sparingly, if not you can end up with absurd things like z-index: 99999999 to override someone else's super high z-index. So it might be nice to only allow its use when you explicitly disable the rule in the file.\nMaybe LimitZIndex, and then let the user limit it to an arbitrary max value or disable it entirely? Not sure, other people should chime in with opinions.\n. @sds the developers have fixed a few SCSS-related bugs, so it supports SCSS just fine as far as I can tell.\n. That's understandable, thanks for the consideration :)\n. Also happens with this bit of code:\nscss\n// Test\n-webkit-user-select: none; // scss-lint:disable VendorPrefix\n. @lencioni done :)\n. I think it'd be best to format it like Rubocop's offense reporter:\n```\n$ rubocop --format offenses\n87   Documentation\n12   DotPosition\n8    AvoidGlobalVars\n7    EmptyLines\n6    AssignmentInCondition\n4    Blocks\n4    CommentAnnotation\n3    BlockAlignment\n1    IndentationWidth\n1    AvoidPerlBackrefs\n1    ColonMethodCall\n--\n134  Total\n```\nSo something like this might be a good way of organizing it:\n25   Indentation\n9    PseudoElement\n4    EmptyRule\n4    Comment\n3    DuplicateProperty\n3    Shorthand\n2    SpaceBetweenParens\n-- \n50   Total\nI don't think the number of files affected is necessarily relevant, would just complicate readability IMO. Other people can feel free to chime in if they disagree.\nBeen really wanting this in the gem, so thank you for implementing it :D\n. Nice work, thanks :)\n. This is awesome, I don't know enough about the internals of the gem to comment on how reasonable it'd be to implement, but this is awesome.\n. Just FYI if you have this problem and all your stylesheets have the same number of frontmatter variables you can use preprocess_command: \"sed '1,3d'\", where 3 is the line upon which the \"closing\" --- is found.\nThought this might be useful to someone in the future.\n. @ibrahima thank you! \ud83d\udc4f \n. ",
    "jina": "I like the last logo on this page (dashed line, black text).\nIf you want some design feedback:\nThe kerning looks like it could use some love, but otherwise I'm fine with the font and weight. May I suggest trying to swap the weight&styles so that \"lint\" is more emphasized than the \"scss\" part?\nBut otherwise this is your project. Do as you like! :)\n. ",
    "deepfriedmind": "Didn't know about PropertyUnits either. That works fine. :thumbsup:\n. ",
    "di5abled": "Why don't add an extends option to explicit define which other settings should be used (as baseline)?\nESLint does this and it is really practical: http://eslint.org/docs/user-guide/configuring.html#extending-configuration-files\nFor example, we have one node_module where we store our default eslint settings (and more) and use this as baseline for each of our projects via the extends option.\n. ",
    "bensaufley": "My team has adopted eslint, haml-lint, and scss-lint. Both eslint and haml-lint support cascading up from the current directory until a config is found. This is a very helpful feature to share configs across multiple projects (say, within the same team/ directory) without defining at the root, and would be very helpful if implemented in scss-lint as well.\n. Confirmed in v0.47.1\n- OS X 10.11.3\n- Ruby 2.3.0p0\n. ",
    "mmzoo": "\nThis is a very helpful feature to share configs across multiple projects (say, within the same team/ directory)\n\nThis is our use-case as well. We have a one-scss-config-to-rule-them-all but there is no good way for us to use it in our projects.\nBecause that would involve copy-pasting the content into every project. Or at least forcing all developers to keep it in sync with their $HOME directory (symlinking it there). And we'd have to teach our CI to do the same thing.\nI propose an inherit_from directive just like rubocop has. So we can have a config file in every repository but it inherits from the global one.\n. ",
    "md5": "I'm not a fan of the idea of searching parent directories to implicitly inherit behavior, but the main use I've seen of inherit_from in Rubocop is to put things into .rubocop_todo.yml. I actually find this relatively useful since it's more self-documenting than adding comments in the main .rubocop.yml when cops are being disabled in a pinch due to time pressures.\nOne other feature of Rubocop that I'd like to point out is the ability to inherit configurations from another gem using inherit_gem (added in https://github.com/bbatsov/rubocop/pull/2270). We use this functionality in my team to centralize default Rubocop configuration into a shared gem, making it easy to roll out changes across all of our projects. I would love to see similar functionality in scss-lint.. ",
    "KODerFunk": "@sds, Your variant is bad. My code process:\ncss\n.b-some__image {\n  width: 100%;\n}\n.b-some__image + .b-some__buttons {\n  margin-top: 14px;\n}\nYour:\ncss\n.b-some__image {\n  width: 100%;\n}\n+ .b-some__image__buttons {\n  margin-top: 14px;\n}\nReopen issue please)\n. ",
    "brauliobo": "this was fixed on #534 \n. Could not resist and made a working version at #534. Please take a look at the code.\n. the intention was not to break the current API, so the change was quite small to achieve the apply behaviour\n. changed the monkey patch to be less intrusive and all tests pass now\n. @sds, nice, gonna follow your advices, hope I can find some time soon.\n. @sds applied your suggestions\nThe first two suggestions is in this PR, as the Sass::Tree fix is a core dependency for auto correcting\nJust created the #535 and #536 for the last two.\nStill there are Rubocop issues, sorry for this, I'm quite not used to it, will get used to it and fix the issues.\n. fixed rubocop warnings\n. ",
    "rbhalla": "I'm still experiencing this bug.\nruby 2.0.0\nsass 3.4.22\nscss_lint 0.48.0\nThis is the two selectors it is saying is mergeable:\n```\n.report-preview__item:not(.is-editable) {\n    &.is-section + &.is-story {\n        .report-preview__story {\n            padding-top: 20px;\n        }\n    }\n&.is-section {\n    .report-textarea {\n        margin-top: 30px;\n        margin-bottom: 20px;\n    }\n}\n\n}\n```\n. ",
    "pawelgrzybek": "That cold be cool!\n. ",
    "Globegitter": "You are bringing up a good point I didn't completely think about: Essentially we want to allow exactly 1 line. 0 would be a typo as well as 2 lines. \nSo I suppose the question is if that is even just possible with one setting. But in any case, the idea I got from eslint as you can see here: https://github.com/artificialio/sane/blob/master/.eslintrc#L17\nHope that clarifies things. \n. ",
    "ratherblue": ":+1: \n. ",
    "sethlopezme": "I am experiencing this issue, as well.\nException: https://pste.me/#/JZJGN\nMy config: https://pste.me/#/VnLM8\n- SCSS-Lint version: 0.40.1\n- Sass version: 3.4.15\n- Ruby version: 2.0.0\nThe offending code is below. I tried and failed to isolate exactly what the problem code was here.\n``` scss\n.row {\n    @include flex-container;\n// modifiers\n&.spaced {\n    @include flex-spaced;\n}\n\n&.spread {\n    @include flex-spread;\n}\n\n&.align-left {\n    @include flex-align-left;\n}\n\n&.align-right {\n    @include flex-align-right\n}\n\n&.valign-top {\n    @include flex-valign-top;\n}\n\n&.valign-bottom {\n    @include flex-valign-bottom;\n}\n\n&.equal-heights {\n    @include flex-equal-heights\n}\n\n}\n[class*=\"col\"] {\n    &.valign-top {\n        @include valign-top;\n    }\n&.valign-bottom {\n    @include valign-bottom;\n}\n\n&.valign-middle {\n    @include valign-middle;\n}\n\n}\n@for $i from 1 through $grid-columns {\n    $_col-size : (100%/$grid-columns * $i);\n.col-#{$i} {\n    @include grid-col($i);\n}\n\n.offset-#{$i} {\n    margin-left: $_col-size;\n}\n\n}\n@each $name, $val in $breakpoints {\n    @include media(\">#{$name}\") {\n        @for $i from 1 through $grid-columns {\n            .col-#{$name}-#{$i} {\n                width: (100%/$grid-columns * $i);\n            }\n        }\n    }\n}\n```\n. @cih: Ah, it does, indeed, fix my issues!\n. ",
    "baileyparker": "As I just realized in the PR, this issue has already been fixed. Apologies for the incorrect filing.\n. Just realized that I was accidentally running the wrong version of scss-lint. Seems that the version on master has this line added:\nreturn unless node.parsed_rules\nIn ignore_selectors?. That of course solves the problem.\n. ",
    "AchoArnold": "@sds Thanks for the explanation. I'm just used to the habit of using /* */ comments when writing code so I wanted to use the same commenting habit in my scss files\n. Thanks :+1: \n. ",
    "montchr": "This is still an issue for me even after updating to 0.41.0\u2026\nThe first line and the line beginning with \"offset\" throw an error:\nscss\n$c-title-bar-settings: (\n  title-font-weight     : map-get-strict( $o-blox-settings, 'title-font-weight' ),\n  title-font-weight-alt : map-get-strict( $o-blox-settings, 'title-font-weight-alt' ),\n  font-sizes            : $c-title-bar-font-sizes,\n  pd-v                  : $half-spacing-unit,\n  pd-h                  : ( map-get-strict( $c-title-bar-defaults, 'item-spacing' ) * 2 ),\n  item-spacing          : map-get-strict( $c-title-bar-defaults, 'item-spacing' ),\n  offset                : o-blox-offset-get(),\n  promo-bg              : $hello-yellow\n) !default;\nBut this does not throw an error:\nscss\n$c-title-bar-settings: map-merge( $c-title-bar-settings, (\n  m-t: ( o-blox-height-get() + $base-spacing-unit )\n) );\n. Thanks for the fix!\n. ",
    "VincentSmedinga": "Thanks for thinking along.\nOne of the reasons I still find this a logical suggestion, is that the combination of maps and functions in itself is just a further abstraction of using variables. Obviously, the specific maps I mention contain exactly that: plain variables for colors and their variations.\nChanging the scheme is possible in more than one way: either changing a color value or a variation function or argument. So this setup provides a easy to manage, consistent model for the entire palette. If a certain color variation is used for both a border-shadow and a panel-background, we explicitly chose them to be the same tint and we want them to change equally when modifying an underlying aspect of that color variation. The entire set of variations is related, as each basic color is derived into lighter or darker hues, or more transparent variations, in exactly the same way. Tweaking a specific border-shadow defined as a standalone variable would probably be more random than that.\nJust to be complete, and this shouldn\u2019t add to or remove from my argument, we use these only as intermediate values. For example, $ui-modal-border-color: ui-color(neutral, light) or $ui-text-color: ui-color(text). So there\u2019s still information on how the color variations are actually used. We would never find and replace one ui-color call with another all over the place.\nWith the font stacks, it\u2019s even more obvious. Why would $ui-font-stack(interface), which this check rejects, be any worse than $ui-font-stack--interface, which it accepts? Using maps here just makes it easier to add another variant or inject a different font into an existing variant, with no real setback in the way we invoke them.\nSo why would a Sass linter allow variables for properties, but not functions returning calculations on variables contained by a map? They are principally the same. Also, in neither case can the linter verify whether the names used are any kind of \u2018semantic\u2019, so no difference there as well. I\u2019m not really seeing why one would be going with the spirit of the check and another against it.\n. ",
    "karmasalad": "I concur that function or map returns should not be flagged by VariableForProperty. Similarly to @VincentSmedinga, our project has a core palette, which we store and access via maps or functions. \nIf we use a particular color for a border and a link, we are specifically choosing for them to be connected. When one changes, all are supposed to change. \nCreating vars like $border-color and $link-color becomes extra and unnecessary work, because for us, usage distinction isn't important. What is important is that when we use a blue, the same blue is used throughout the project.\n. ",
    "artemartemov": "We are using a very similar system as @VincentSmedinga . This would be an awesome feature, has anyone added this in yet or has gotten it to work?\n. This would be a fantastic feature. We are also using color maps for our platform and lint will hit as an error.\nWe have a font map in our base: \n`$color-base-grey: #CDCDCD;\n$palettes: (\n    black: (\n        base: #000000\n    ),\n```\nblue: (\n    xlight: #B6ECFF,\n    base: #74DCFF,\n    dark: #00AAE3,\n    xdark: #249CC3\n),\ngreen: (\n    base: #87DB88\n),\ngrey: (\n    base: $color-base-grey,\n    xxxlight: lighten($color-base-grey,24%),\n    xxlight: lighten($color-base-grey, 18%),\n    xlight: lighten($color-base-grey, 15%),\n    light: lighten($color-base-grey, 12%),\n    medium: darken($color-base-grey, 18%),\n    dark: darken($color-base-grey, 32%),\n    xdark: darken($color-base-grey, 40%),\n    xxdark: darken($color-base-grey, 55%),\n    xxxdark: darken($color-base-grey, 63%),\n),\npink: (\n    base: #EC008C\n),\nred: (\n    base: #F23A55\n),\nteal: (\n    base: #008080\n),\nwhite: (\n    base: #FFFFFF\n),\nyellow: (\n    base: #F6F489\n)\n```\n);`\nSo we pass it in our block files such as: \n$color-bg-lazy: palette( grey, light );\nor\n$color-bg-lazy: palette( black );\nIt will also error those guys out. Would love to be able to ignore those instances. \nAlso would be great to be able to whitelist certain properties such as box-shadows to allow rgba to be passed.\n. ",
    "starryeyez024": "Ah, I couldn't see the forest for the trees. Thanks!!\n. ",
    "storypixel": "Getting something similar fwiw \n. ",
    "shepmaster": "@sds Oops, sorry. Could you help me figure out where I should have learned that?\nI did try scss-lint --require 'scss_lint_reporter_checkstyle' --format Default --format 'Checkstyle' --out 'foo.xml', but that does not output the default formatter. Neither does scss-lint --require 'scss_lint_reporter_checkstyle' --format Default --out :stdout --format 'Checkstyle' --out 'foo.xml'. In both cases, the checkstyle output is present in the file.\nI'm happy to submit a PR to the README to mention how to do this, once I figure out how to make it work. :smiley_cat: \n. ",
    "steelbrain": "@sds I had specified the scenario about the file paths, jshint has a --filename argument, You can write to stdin and specify the path of the file there. It'll resolve the configuration files and all from there on automatically. so Yes, if you use that file path, You can read the .scss-lint.yml file automatically so no more linter re-enabling when they are disabled from the configuration file.\n. @sds I would love to send a PR but I don't know enough ruby to do that :(\n. ",
    "SpainTrain": "I also work on the scss-lint plugin for atom and know ruby reasonably well.  Maybe I can take a crack at this :smile_cat: \n. :clap: @sds you are awesome!\n. ",
    "danyshaanan": "@rousso1 FYI.\n. Thanks!\n. ",
    "lpil": "Thanks!\n. :+1: \n. ",
    "ifyoumakeit": "Edited and changed title for clarity.\n. ",
    "wouter-muller": "+1\nI have a similar case where i do the following:\n```\n  li {\n    .....\n& + li::before {\n  .....\n}\n\n}\n```\nSCSS-lint is complaining about the use of the 2nd li as it thinks it is an unnecessary parent selector, but if i replace it with & my CSS doesn't work anymore. \n. I never saw the benefit of having an empty line after the last child element. Doesn't seem to be a convention afaik. \n. ",
    "SpenceDiNicolantonio": "It looks like the temp files were created by the scss linter in WebStorm.\n. ",
    "AndyOGo": "I use PHPStorm, but I have the same issue with the newest version.\nIt's horrible it creates those tmp files inside source dir, and scsslint for js files does not make any sense...\ntasks/docs-scripts_scsslint_tmp1537225672253761620.js\ntasks/scripts-bundle_scsslint_tmp4377624646903046346.js\n. I created an issue at the scss-lint inteliJ plugin\nhttps://github.com/idok/scss-lint-plugin/issues/45\n. ",
    "mbardelmeijer": "Cool, thanks!\n. ",
    "akshayrawat": "Ah I see. This is intended.\n. ",
    "mlarcher": "Thanks for the quick reply.\nThe initial problem is that scss-lint needs to operate on a large collection of scss files, and the windows command line is limited to 8192 characters, which is quickly reached when listing a collection of file paths. \nWould it be possible to provide an alternative way for scss-lint to get to the actual files ? Surely there must be some options available, don't you think ?\n. Great, thank you.\n. I just stumbled on the same issue, it seems the TrailingSemicolon rule doesn't account for this case. I reverted to 0.41 for now to avoid the issue.\n. ",
    "samuelmartineau": ":+1: \nSame there with !global;\nSass 3.4.18\nSCSS Lint 0.42.0\nRuby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-linux\n. ",
    "XhmikosR": "Hi, @lencioni. See https://travis-ci.org/twbs/bootstrap/builds/82182873\n. @lencioni: it's in our v4-dev branch; that's where we switched to Sass. Or check the branch I pushed the scss lint update, it's based on the same one.\n. Thanks! I'll try it as soon as there's a new gem out.\n. Thanks! Confirmed https://travis-ci.org/twbs/bootstrap/builds/82208500.\n. @lencioni: This seems to need to be tweaked.\n::-ms-expand, ::placeholder, ::-webkit-progress-bar, ::-webkit-progress-value, ::-moz-progress-bar are the ones I notice in our Bootstrap v4-dev branch.\n. Do you plan to make a new patch release with this fix?\n. ",
    "davecranwell": "Just leaving off the \".\" seems to do the trick. That'll do :)\n. ",
    "AESM": "This is not a comment issue.\n@aju \u2013 Sorry if I didn't make it clear, but I only included the comments to point out where the warnings were showing up. No comments are actually contained within my work.\nAlso, the code you used is reminiscent of Case 3, the example I included to show that standard maps were indeed Passing, while long-form nested maps (Case 1A & Case 2A) were receiving the TrailingSemicolon Warning.\n. To lessen confusion, I want to point out that there are now two different [W] TrailingSemicolon issues on this thread: \n- The long-form Sass map nesting issue I presented initially\n- The comments inside of a Sass map issue that @aju & @ArmorDarks presented\n. @ArmorDarks \u2013 I'm only concerned that the two separate issues in a single ticket can get confusing because they are so similar, & that (because of all the referencing) my original issue may get overshadowed.\nIf the discussion can be kept clear & separate, I've got no problems.   : )\n. Much appreciated @sds & @srawlins!   : )\n. ",
    "richlocke": "I found this workaround worked for me:\n$map: ( // Comment ending with a semi-colon;\n    header: 3rem\n);\n- gem scss_lint version: 0.42.2\n- grunt package grunt-scss-lint version: 0.3.8\n- sass version: 3.4.18\n. ",
    "saneef": "scss-lint version I'm referring to is 0.42.2\n. ",
    "lokesh": "@cih \ncc: @sds \nThe test case @cih posted works locally. Also, I am unable to recreate my original issue locally any more. I spent some trying to isolate and recreate w/o any luck.\nSign this one off as most likely a user error. Sorry for the interrupt.\nThanks again for investigating and keep up the great work! :+1: \n. ",
    "ddaza": "vim does change the file directory if you have set autochdir flag on. I use this to have folder structure auto-complete localized to each file. This is extremely useful when you're deep in the folder structure and wanna update mixins/styles from some other file.\n. ",
    "pfac": "Damn, forgot to reply to you @sds, sorry about that. :stuck_out_tongue: \nUnless this is a problem in my configuration, IMO this is probably something to be fixed here, as guard-rake is working perfectly with every other tool I currently use (at least regarding this). My goal with this issue was merely to have someone with more knowledge of this project take a better look at it.\nNo need to reopen this issue, if and when I have the time I'll pick it up and try to dig deeper. If I ever find a solution I'll make a PR mentioning this issue.\nThanks :smile: \n. ",
    "Bitneko": "The version on the mac is 0.42.2. The one on window is probably older because I have that since last year, but I can only verify it when I get back to work tomorrow as that's my workplace's workstation.\n```\nDefault application configuration that all configurations inherit from.\nexclude: [\n'common/_bootstrap.scss',\n'common/_fonts.scss',\n'vendor/*',\n'ie.scss',\n'_normalize.scss'\n]\nlinters:\nBorderZero:\n  enabled: true\nCapitalizationInSelector:\n  enabled: true\nColorKeyword:\n  enabled: true\nComment:\n  enabled: false\nDebugStatement:\n  enabled: true\nDeclarationOrder:\n  enabled: true\nDuplicateProperty:\n  enabled: true\nElsePlacement:\n  enabled: true\n  style: same_line # or 'new_line'\nEmptyLineBetweenBlocks:\n  enabled: true\n  ignore_single_line_blocks: true\nEmptyRule:\n  enabled: true\nFinalNewline:\n  enabled: true\n  present: true\nHexLength:\n  enabled: true\n  style: short # or 'long'\nHexNotation:\n  enabled: true\n  style: lowercase # or 'uppercase'\nHexValidation:\n  enabled: true\nIdWithExtraneousSelector:\n  enabled: true\nIndentation:\n  enabled: false\n  character: space # or 'tab'\n  width: 2\nLeadingZero:\n  enabled: true\n  style: exclude_zero # or 'include_zero'\nMergeableSelector:\n  enabled: true\n  force_nesting: true\nNameFormat:\n  enabled: true\n  convention: hyphenated_lowercase # or 'BEM', or a regex pattern\nPlaceholderInExtend:\n  enabled: true\nPropertySortOrder:\n  enabled: false\n  ignore_unspecified: false\nPropertySpelling:\n  enabled: false\n  extra_properties: []\nSelectorDepth:\n  enabled: true\n  max_depth: 4\nShorthand:\n  enabled: true\nSingleLinePerProperty:\n  enabled: true\n  allow_single_line_rule_sets: true\nSingleLinePerSelector:\n  enabled: false\nSpaceAfterComma:\n  enabled: true\nSpaceAfterPropertyColon:\n  enabled: true\n  style: one_space # or 'no_space', or 'at_least_one_space', or 'aligned'\nSpaceAfterPropertyName:\n  enabled: true\nSpaceBeforeBrace:\n  enabled: true\n  allow_single_line_padding: true\nSpaceBetweenParens:\n  enabled: true\n  spaces: 0\nStringQuotes:\n  enabled: true\n  style: single_quotes # or double_quotes\nTrailingSemicolon:\n  enabled: true\nTrailingZero:\n  enabled: true\nUnnecessaryMantissa:\n  enabled: true\nUnnecessaryParentReference:\n  enabled: true\nUrlFormat:\n  enabled: true\nUrlQuotes:\n  enabled: true\nZeroUnit:\n  enabled: true\nCompass::*:\n  enabled: false\n```\n. Thanks, that solve the problem. The indentation somehow disappeared when I copied my working files from my workplace's workstation to my home machine. \n. ",
    "stowball": "@sds I'm using 0.38.0, which is the latest on Ruby Gems: https://rubygems.org/gems/scss-lint/versions. I see that it's not the latest tagged release on GitHub though :(\n. Aha! Thanks!\n. ",
    "msartintarm": "Our project is facing this issue. We are using grunt-scss-lint v0.3.8. Is this new naming convention going to prevent us from receiving this fix?\n.flex-container {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  align-content: flex-start;\n  align-items: center;\n  justify-content: flex-start;\n}\nProperties should be ordered display, flex-direction, align-content, flex-wrap, align-items, justify-content\n.flex-container {\n  display: flex;\n  flex-direction: row;\n  align-content: flex-start;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: flex-start;\n}\nProperties should be ordered display, flex-direction, flex-wrap, align-content, align-items, justify-content\n. scss-lint -v gives me scss-lint 0.31.0\nSo I did sudo gem uninstall scss-lint && sudo gem install scss_lint .. now grunt points to the new version! Thanks!\n. ",
    "alfaproject": "I'm really sorry, this is the wrong project. |:\n. ",
    "tysongach": "Nice! Thanks @srawlins!\n. :+1: \n. We didn\u2019t quite know how to handle implementation, but figured we get things started with a failing test.\n. ",
    "dspautz": "Please checkout my changes. Let me know when I can help.\n. ",
    "sonalkr132": "Check disable_linter_reason_spec.rb\n`` Ruby\n  context 'when a reason precedes a disabling comment, at a distance' do\n    let(:scss) { <<-SCSS }\n      // We like usingborder: none` in our CSS.\n  // scss-lint:disable BorderZero\n  p {\n    margin: 0;\n  }\nSCSS\n\nit { should_not report_lint }\n\nend\n```\nIt seems that it is valid to give explanation separated by line break.\n. ",
    "nim23": "@srawlins, sorry should have been more explicit\n.bag-page {\n    display: block;\n }\nAny class name's with - in them throws the warning.\n. it's definitely not en dash or em dash, something seems off to me about my config/settings, I have grunt scss-lint which eventually run's this scss-lint -c /Users/ngurung/.scsslint.yml /app/_small.scss command and does not throw an error but running the same command via command line seems to throw an error.\n. Apparently it's not the css as even .hello {} throws the warning, it's something to do with /usr/local/lib/ruby/gems/2.2.0/gems/scss_lint-0.42.2/lib/scss_lint/linter/selector_format.rb:79: warning: character class has '-' without escape: /^[_a-z0-9\\/-a-z0-9]+$/ . Not a ruby expert but seems like a ruby warning, for that specific file on line 79.\n. Finally found the culprit. On my .scsslint.yml file I had an regex ^[_a-z0-9/-a-z0-9]+$ which was invalid and unescaped. Fixed it by changing the regex to ^[_a-z0-9\\/\\-a-z0-9]+$ . Closing the issue, thanks for replying to my queries.\n. ",
    "crittelmeyer": "For the record, I agree that a nice \"no offenses detected\" message would mitigate confusion here.\n. ",
    "alexbuijs": "I've got ::-webkit-input-placeholder and:\n  ::-webkit-scrollbar\n  ::-webkit-scrollbar-button\n  ::-webkit-scrollbar-track\n  ::-webkit-scrollbar-track-piece\n  ::-webkit-scrollbar-thumb\n  ::-webkit-scrollbar-corner\n  ::-webkit-resizer\n. ",
    "gshaw": "The bug is with how guard-scss_lint is calling the runner.  It should be passing in array of Hashes but instead it's passing an array of paths.  I'll submit a line fix PR fix to that repository.\n. ",
    "sblask": "Thanks for the help! I was running scss-lint . because when I ran scss-lint I got No SCSS files matched by the patterns: (but no pattern was printed to screen, so not a big help figuring out the problem). I found the solution now, this: *.s+(a|c)ss did not work (we are moving from sass-lint to scss-lint and there it did work). I am not even sure it should work, but as all our files are *.scss anyway, I changed scss_files to src/app/**/**/*.scss and now I can run scss-lint and everything gets linted.\n. ",
    "bbugh": "The README doesn't specify the single line format, and I found this via a web search.. ",
    "adsteel": "@sds Thanks for the quick response. I built a script to do all of that, but I was expecting a more informative output out of the package a la Rubocop, ESlint or RSpec. I wouldn't say that the current behavior is standard for most tools, given the two primary linters used have informative output. I may open a PR for that, but I may not and it seems like a worthwhile feature to leave an issue open for.\nI also had to explicitly program the exit code in my script, otherwise the build passed on CircleCI, so whatever is happening inside scss-lint isn't bubbling up and actually triggering a failed build.\n. Thanks for reopening. I just realized the build was passing because I was printing the error count afterward, which was probably overriding the error code returned.\n. @sds Have you had a chance to review the PR for this?\n. I just realized this is because my script was printing the error count after the linting run. That was probably snuffing the error code returned.\n. Outdated commit with original conversation is here\n. @sds @lencioni I've updated the code to log in the default reporter, though I'm still logging each individual linting as a period in the runner. I'm not familiar at all with the ecosystem, however. Does this work? GIF preview updated as well.\n. @sds Okay, I'll take one more swing at this on Friday. Without more knowledge of the ecosystem, or tests that define the API spec, this is a little like groping around in the dark.\n. I wasn't able to come up with a solution I liked. I may re-attempt this at some point if someone else doesn't solve it, but in the meantime I need to stop working on it.\n. ",
    "Vall3y": "Woopsie, I am sorry\n. ",
    "abea": "Fair. It's possible that inherit might work in my use case. I'll submit a PR adding initial since it doesn't seem totally crazy.\n. Submitted pull request: https://github.com/brigade/scss-lint/pull/665/files\n. Closing to update test.\n. I'm thinking it's more of a Syntastic issue. Using the scss-linter in Atom I do get the column as well as the line.\n. This sounds like it might be related to your editor plugin as opposed to the scss-lint gem itself. I've made that mistake before. Does that sound right?\n. This feels more prescriptive regarding file organization than a Sass linter should be. This would probably work for our team in most cases, but that doesn't mean it should for everyone. For example, we could have site regions, including the page header, with display: relative; in a general layout file, then in a nav.scss file we have the logo or something position: absolute;.\nMore than that specific example, my point is that it seems more like a rule for a Sass framework than the linter.\n. If you're getting UnnecessaryParentReference on the first example, that's right. The ampersand is not needed there to achieve the same result. You shouldn't get the warning when you have two used like at the bottom.\n. This seems to conflict with the ::after pseudo element, which can still be written with one colon. I'd expect your second sample to compile to:\ncss\n.Base {\n  background-color: red;\n}\n.Base:after {\n  background-color: blue;\n}\nRegardless, I don't think disallowing parent selectors is possible right now. Since there isn't an alternative to &__element, I don't think I could see using this in production.\n. Ah, I misunderstood the examples. I can definitely see that.\n. Thanks for the comments, guys. I'll incorporate those and update this as soon as I can.\n. An option could be added to use none instead of 0. Then teams could maintain consistency but have the choice. The description could be expanded to something like border: 0; is preferred over border: none;, otherwise user property border-style\n. I created a Sass file with only that code on the latest version and only get a warning about the !important flag. Is this code isolated when you get the warning?\n. Would this be different from the EmptyLineBetweenBlocks linter?\n. A new config for the linter might be good here. Though it might be technically a QualifyingElement situation, I think pseudo-classes are different enough from regular classes to have them managed separately.\n. Have you tried .block-name__element-name--modifier-name? That's how I understand the syntax to work.\n. ",
    "youngwind": "@karlhorky  Yes!  I know sass-lint. What's more, here's what the author says.\n\nNote This loader is under development and does not yet provide line numbers for errors and warnings in SCSS/SASS source files.\n\nSo I have not use it.\nFinally, I take a compromise, using gulp-scss-lint instead, and found it not bad.\n. ",
    "KevinHerklotz": "Try this one: https://github.com/alleyinteractive/sasslint-webpack-plugin\nThat's the only one that works for me.\n. ",
    "thomasthesecond": "Good find! I'm happy to add these in as well.\n. ",
    "bignimbus": "@abea thanks - opened https://github.com/scrooloose/syntastic/issues/1660 in syntastic in case any other vim users see the same problem.\n. ",
    "cvrebert": "Sorry to ask, but roughly when do you expect to ship the next scss-lint release?\n. ",
    "michaelhogg": "I'm experiencing this issue in 0.43.2 too. It also occurs in 0.40.1.\nLinting this SCSS:\nscss\n.testing {\n    position:         absolute;\n    top:              0;\n    transition:       -webkit-transform .33s;\n    transition:       transform .33s;\n    background-color: hsl(0, 0%, 100%);\n}\nwith this config:\nyaml\nPropertySortOrder:\n    enabled: true\n    order: concentric\nresults in this error:\nPropertySortOrder: Properties should be ordered position, top, transition, transition, background-color\nRemoving one or more of these properties from the SCSS prevents the error: position, top, background-color.\n. ",
    "tdooner": "Hi @mrmckeb, I'm not able to reproduce this with Ruby 2.2.2. Can you give me the output of ruby --version and perhaps the exact stacktrace for the error message?\n. By the way, I noticed in your example that you indented the exclude items by one space and everything else by two spaces. I'm not sure if that matters, but you may consider trying a two-space indent to see if that solves the problem.\n. Glad to hear it's something simple. It usually is :). Cheers!\n. \ud83d\udc4f Well done, scss-lint team, especially @sds and @lencioni. This is a high quality piece of software that I am sad about its impending shutdown. You guys have rocked it this whole time. @sds especially, has put an incredible amount of time into this.\n. ",
    "mrmckeb": "Thanks @tdooner, you were spot on: indentation issues throughout the file. It's now working fine.\nI'm not sure why the author chose different indentation lengths, it's quite strange - but I also assumed the whitespace was for readability, which I'll watch out for in future.\nAgain, thanks for helping to resolve this.\n. ",
    "stephanfriedrich": "@sds thx.\nas you explained. with my config scss-lint should only search .scss files within the directory 'components/app/**/*.scss',, and not the node_modules.\nmy project-root directory-structure:\n- node_modules/\n- components/\n  -- apps/\n    ---- component_a/\n      ------ scss/\n. ",
    "ntwb": "\nwould work for me, 4. would be the most flexible in general though.\n\nI'd like to be able to define the rule so that when linting if ::before is detected I'd like that flagged as WordPress requires the single colon :before syntax for IE8 backward compatibility.\nAt the moment the only way around this is to explicitly define the PseudoElement rule as false which results in both single :before and double ::before pseudo syntaxes to be ignored completely.\n. ",
    "lstanard": "I just updated to 0.48.0 and added PseudoElement: enable: false to my .scss-lint.yml config file but it's still throwing warnings PseudoElement: Begin pseudo elements with double colons:::``\n. Good catch. Thanks @srawlins \n. ",
    "drwaky": "hi @cih,\nThanks for answer me so soon :) I'll be looking for your implementation.\n. ",
    "ivancuric": "Yep, the error was from the console output.\n. The console output was from the scss-lint command, not the editor. I'll see if the bug reappears and get back with some more helpful info. I've no idea what caused it. Might be some weird control characters popping out from the editor.\n. \nOk, found the bug.\nIn certain cases, Sublime Text, or a plugin inserts a non-breaking space instead of a regular space when auto-expanding. Still can't find the exact way to reproduce the bug, but it's definetly an editor bug.\n. It was a problem with using option+space when typing fast on on osx. Disabled it using Karabiner:\n\n. ",
    "smnbbrv": "I'm not sure I understand you right, but I run scss-lint from a command line, and a plugin is not an editor (IDE) plugin but a custom linter, which is just a Ruby file and is the same file across different computers.\n. Hi @cih,\nthank you for the fast response.\nI added the .scss-linters folder to the root of my frontend folder and shared it by a simple commit with other developers, so we have all the same code and the same .yml configuration. It is located exactly at the same place. We have the same Ruby version, same gem version. The only difference is that my OS is El Capitan and theirs is Yosemite (which should not be an issue, right?).\nWhat could be different to a standard people's setup is our project structure. Our frontend folder is located in a sub-sub-...-folder of a git root repository and we cannot change that. What I tried to check whether it is an issue: in configuration I put a fallback path from a repo's root e.g.:\nyml\nplugin_directories: ['first-subfolder/second/etc/.../.scss-linters', '.scss-linters']\nbut it still did not help to solve the problem. And on my machine it works even without plugin_directories in yml file.\nThe most annoying is that it works on my machine. The same code, the same files, the same location. Furthermore, they created another linter and it does not work at their computers but at mine their linter works fine. So it cannot be the git issue I guess.\nI am really lost. I would be happy to debug it and give you more information but I don't see any ability to do that. Also I am far away from being a Ruby expert.\nI don't understand why the tool doesn't throw errors when it can't find linters specified in the configuration.  If there were some I could at least share them here or try to understand what is going on. What it does instead it just silently swallows the fact that it does not find the linters modules which are explicitly given in the configuration and are assumed to be loaded. This could lead to the problems like not working linters on some machines (like in my case) which will lead to the fact that ones who has a properly working linter would fix the problems for others with linters skipped.\n. Btw, all the standard linters are working fine on all machines, including changing the configuration. So, if I change standard linters' setup, my colleagues' linting is also affected by that. So the only problem is enabling custom linters.\n. @cih it is a private repo, but I will try to reproduce it on a public one and come back here as soon as I can. Thanks!\n. OK, this is the repo where I can reproduce the issue: https://github.com/smnbbrv/sass-lint-problem (typo in the repo's name, scss-lint-problem of course, sorry)\nThat's the test environments:\nThe one 'where it works' fine:\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]\nscss-lint 0.43.2\nSass 3.4.20 (Selective Steve)\nOutput:\n- ordinary scss-lint in a project root folder:\n  test.scss:1 [W] IdSelector: Avoid using id selectors\n  test.scss:1 [W] MyLinter: MyLinter1 works!\n- ordinary scss-lint in a subfolder folder:\n  test.scss:1 [W] IdSelector: Avoid using id selectors\n  test.scss:1 [W] MyLinter: MyLinter2 works!\nThe one 'where it does not work':\nruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]\nscss-lint 0.38.0\nSass 3.4.19 (Selective Steve)\n- ordinary scss-lint in a project root folder:\n  test.scss:1 [W] IdSelector: Avoid using id selectors\n- ordinary scss-lint in a subfolder folder:\n  test.scss:1 [W] IdSelector: Avoid using id selectors\nBefore the one 'where it works' had the same versions (before I upgraded ruby etc), so I don't think it can be a versions problem. Also, problem is that I can reproduce it nearly on every Macbook in the office except for mine...\nThank you in advance.\n. Thank you for the hint, I will definitely try tomorrow! Could you please also tell how to upgrade it? I know, this is a dumb question, but we already tried a couple of times and did not succeed... As I already told we aren't \"Ruby\" guys :)\nJust a link with a good explanation would be enough. We don't use bundles...\n. Thank you guys, you are magicians :) Works like a charm!\n. @sds \nThank you for your help, but I had a similar problem with the typescript:\ntslint  -t verbose app/**/*.ts\nand changing it to\ntslint  -t verbose 'app/**/*.ts'\nsolved the problem. I am pretty sure that the problem is the same; but changing it to string did not help in the case of scss-lint. Could it maybe be implemented the way tslint does it?\n. but the wildcards work absolutely fine when I use them from the .yml file. In other words, the implementation of file and console ways of specifying files is different , although the meaning is the same. Shouldn't that be fixed?\n. ",
    "dak": "I should have checked... this appears to have been already applied in 5f813e8c23a9c7c4c84341773b2c09400e7d96ce\n. ",
    "ThomasR": "Awesome! All tests are passing now (on Win7).\n. ",
    "scottwarren": "Yep that's what I mean, I will look into creating this as a feature, but be aware Ruby isn't my first language :+1: :smile: \n. ",
    "outdooricon": "We're running into this now as well, it's a really big downer. Any hints on how to add a temp ignore until there's an actual rule for it?\n. The extra_properties solution takes care of one issue, but it still will complain if multiple composes are set inside of a single selector\n. ",
    "jonrohan": ":metal: \n. That sounds like a big project for sure. I don't think you need to make it a priority. I had a thought though that maybe we're approaching the problem the wrong way. \nI would settle for the ability to ignore the inline disabled comments from the cli. Then I can write some scripts in our CI process to run it, ignoring the inline comments and compare the error results to the linters listed in the comments. \nHow hard would a ignore disabled linters option be?\n. ",
    "jesperronn": "Thanks @sds \nThat was exactly the case! Thanks for spotting! This was my contents:\n```\nextends default Scss lint configuration found at\nhttps://github.com/brigade/scss-lint/blob/master/config/default.yml\n\nand https://github.com/brigade/scss-lint#configuration\nscss_files: 'app/assets/stylesheets/*/.scss'\nlinters:\n  some_name: dummy\n```\n. ",
    "fofr": "@lencioni I came here to raise the same bug.\nWith the same configuration, the following doesn't report any lints:\nsass\n.subsection-description {\n  margin-bottom: .9375em;   // 15px\n  @include media(tablet) {\n    margin-bottom: .625em;  // 20px\n  }\n}\n. ",
    "bernk": "Neither include nor exclude are working for me. It would also be nice if the readme was more explicit on how to use this, because I'm not 100% sure I'm doing it right:\nscss-lint file.scss -x HexNotation\nOS X 10.10.5\nRuby 2.0.0p481\nscss-lint 0.48.0\n. ",
    "ibrahima": "I agree @bernk . I think the above is right because if you change the name of the linter (eg. hex_notation) you'll get an error about the linter not existing. And I also can confirm that --include-linters does not seem to be working for me in v0.48.0\n. Found the issue, the problem is that a hash literal is being merged with the current linter options and returned, instead of returning the current linter options. See https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/config.rb#L273\nThere might be a fancier way of fixing the issue, but the simplest approach seems best to me.\n. No problem, thank you!\nThe hash literal+merge approach seems to be a common idiom for default parameters in ruby, but in this case you're not just generating default parameters, but also getting existing ones and potentially changing them, so it doesn't quite work the way you'd want.\n. ",
    "lotap": "I'm also experiencing this issue with v0.49.0. I was trying to pass --exclude-linter NameFormat as an argument via the Atom integration. When that didn't work, I tried in the console and still got warnings from any linter I tried to exclude. Creating a config yml with the options configured did successfully exclude the linter, though.\nOSX 10.11.4\nRuby 2.3.0p0\nscss-lint 0.49.0\n. ",
    "s10wen": "Ahhhh, I misread the docs sorry, I'll look into checkstyle. Thanks.\n. Thanks @sds turns out I wasn't on the latest release sorry! I saw: https://rubygems.org/gems/scss-lint/versions/0.38.0 and thought the latest release was 0.38.0 I've updated to 0.47.1 and it works now, thanks.\n. Thanks for the work on this, I'm trying it out using scss-lint --format=Stats and have had it working in some code bases, but in another I'm getting errors such as:\nSCSSLint::Linter::Comment raised unexpected error linting file _btn-mixins.scss: 'Length must be more than 0, passed -44'\nSCSSLint::Linter::Comment raised unexpected error linting file _site_variables.scss: 'Length must be more than 0, passed -45'\nHere's the full stack trace if it helps:\n``\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/location.rb:14:ininitialize'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:77:in new'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:77:inlocation_from_range'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:170:in extract_location'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:60:inadd_lint'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter/comment.rb:7:in visit_comment'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/sass-3.4.21/lib/sass/tree/visitors/base.rb:36:invisit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:138:in visit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:149:inblock in visit_children'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:147:in each'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:147:invisit_children'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/sass-3.4.21/lib/sass/tree/visitors/base.rb:38:in visit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:138:invisit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:149:in block in visit_children'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:147:ineach'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:147:in visit_children'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/sass-3.4.21/lib/sass/tree/visitors/base.rb:38:invisit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:138:in visit'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/linter.rb:41:inrun'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:53:in run_linter'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:35:inblock in find_lints'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:33:in each'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:33:infind_lints'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:19:in block in run'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:18:ineach'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/runner.rb:18:in run'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/cli.rb:74:inscan_for_lints'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/cli.rb:59:in act_on_options'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/lib/scss_lint/cli.rb:33:inrun'\n/Users/owensi/.rvm/gems/ruby-2.2.1/gems/scss_lint-0.48.0/bin/scss-lint:7:in <top (required)>'\n/Users/owensi/.rvm/gems/ruby-2.2.1/bin/scss-lint:23:inload'\n/Users/owensi/.rvm/gems/ruby-2.2.1/bin/scss-lint:23:in <main>'\n/Users/owensi/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:ineval'\n/Users/owensi/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `'\nReport this bug at https://github.com/brigade/scss-lint/issues\nTo help fix this issue, please include:\n- The above stack trace\n- SCSS-Lint version: 0.48.0\n- Sass version: 3.4.21\n- Ruby version: 2.2.1\n```\n. @monoblaine thanks, I just tried that, but it didn't work unfortunately.\n. @chris-dura ah, thanks.\nClosing in favour of https://github.com/brigade/scss-lint/issues/779\n. ",
    "ljharb": "In addition it would be nice to make the prefix configurable.\n. ",
    "svyatov": "Same for me, current workaround:\nSCSSLint::RakeTask.new do |task|\n    task.files = [] # hack, otherwise scss_lint doesn't respect scss_files option in .scss-lint.yml\n  end\n. @sds I'm happy to provide PR, but this is not actually a bug as it turned out, so I need your help to implement a proper fix.\nMethod which causing this issue is SCSSLint::FileFinder#find:\n```\n    def find(patterns)\n      # If no explicit patterns given, use patterns listed in config\n      patterns = @config.scss_files if patterns.empty?\n  matched_files = extract_files_from(patterns)\n  if matched_files.empty?\n    raise SCSSLint::Exceptions::NoFilesError,\n          \"No SCSS files matched by the patterns: #{patterns.join(' ')}\"\n  end\n\n  matched_files.reject { |file| @config.excluded_file?(file) }\nend\n\n```\nThis method is called in SCSSLint::CLI#scan_for_lints like so:\nFileFinder.new(config).find(options[:files]).map do |file_path|\n            { path: file_path }\n          end\nRakeTake sets default files as ['.']:\n```\n    # Create the task so it is accessible via +Rake::Task['scss_lint']+.\n    def initialize(name = :scss_lint)\n      @name = name\n      @files = ['.'] # Search for everything under current directory by default\n      @quiet = false\n  yield self if block_given?\n\n  define\nend\n\n```\nAnd this is what gets find method as patterns and then...\npatterns = @config.scss_files if patterns.empty?\nSo it has its pattern and ignores config scss_files option. We need to come to some conclusion about what gets precedence over what and just implement this logic. Or describe current state of things in README. Best option would be to do both, I think (fix it and document it).\nAs of now, looks like my workaround above isn't so hacky after all.\n. Yeah, that's a good idea. I liked this syntax at first, but it absolutely ruins search possibilities.\n@eldh although, I think your second example is completely irrelevant and confusing here :)\n. ",
    "tagliala": "Hi,\nI'm still having issues using scss_lint 0.50.3 with Rails 5.0.0.1 (and 4.2.7.1)\n.scss-lint.yml\n```yml\nscss_files: 'app/assets/stylesheets/*/.scss'\n...\n```\nscss_lint.rake\n```rb\nfrozen_string_literal: true\nif %w(development test).include? Rails.env\n  require 'scss_lint/rake_task'\nSCSSLint::RakeTask.new do |t|\n    # SCSSLint does not respect config file\n    # Workaround for https://github.com/brigade/scss-lint/issues/726\n    t.files = []\n  end\ntask(:default).prerequisites.unshift task(:scss_lint)\nend\n```\noutput:\n```sh\n$ rake scss_lint\napp/assets/stylesheets/test.scss:2:3 [W] SpaceAfterPropertyName: Property name should be immediately followed by a colon\nscss-lint found one or more lints\n```\nIf I change the rake file to\n```rb\nfrozen_string_literal: true\nif %w(development test).include? Rails.env\n  require 'scss_lint/rake_task'\ntask(:default).prerequisites.unshift task(:scss_lint)\nend\n```\nhere it is the output:\nbash\n$ rake scss_lint\n$\n. @sds I was about to take a look but it doesn't seem an issue anymore \ud83e\udd14 . Hi,\nI did an experiment in this commit: https://github.com/tagliala/scss-lint/commit/7aeb1ffe165740664452a3027534003c6b12e475\nAll specs are green but I'm not confident of the solution and I will not submit a PR. Please read commit's message to understand what I changed and why.\nThere should be a reason for node.value to return an Array instead of a String (multiple strings) but I don't have time to investigate.\nAnyway, hope it helps to speed up things. Hi,\nif you provide me some failing specs I could try to do a PR. @sds thanks for the hint.\nI can confirm that my approach passes test but doesn't work on Bootstrap 4.\nHere it is a failing css rule:\nscss\n:root {\n  --my-font-family: Helvetica;\n}\n``\nError: undefined methodvisit_method' for String:Class\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:35:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:15:invisit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in block in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:inmap'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:inblock in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:92:in visit_prop'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:invisit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:15:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:inblock in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in map'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:invisit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:in block in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:35:invisit_each'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:15:invisit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in block in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:inmap'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:inblock in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:102:in visit_rule'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:36:invisit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:15:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:inblock in visit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:in map'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:52:invisit_children'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/base.rb:38:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:15:invisit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/visitors/set_options.rb:5:in visit'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/tree/node.rb:102:inoptions='\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/engine.rb:420:in _to_tree'\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.5.2/lib/sass/engine.rb:321:into_tree'\n~/dev/scss-lint/lib/scss_lint/engine.rb:35:in initialize'\n~/dev/scss-lint/lib/scss_lint/runner.rb:31:innew'\n~/dev/scss-lint/lib/scss_lint/runner.rb:31:in find_lints'\n~/dev/scss-lint/lib/scss_lint/runner.rb:19:inblock in run'\n~/dev/scss-lint/lib/scss_lint/runner.rb:18:in each'\n~/dev/scss-lint/lib/scss_lint/runner.rb:18:inrun'\n~/dev/scss-lint/lib/scss_lint/cli.rb:67:in scan_for_lints'\n~/dev/scss-lint/lib/scss_lint/cli.rb:59:inact_on_options'\n~/dev/scss-lint/lib/scss_lint/cli.rb:33:in run'\n~/dev/scss-lint/bin/scss-lint:7:in'\n~/.rvm/gems/ruby-2.4.2/bin/scss-lint:23:in load'\n~/.rvm/gems/ruby-2.4.2/bin/scss-lint:23:in'\n~/.rvm/gems/ruby-2.4.2/bin/ruby_executable_hooks:15:in eval'\n~/.rvm/gems/ruby-2.4.2/bin/ruby_executable_hooks:15:in'\n```\nApparently, there are issues with custom properties. Master branch works fine.\nThis is the only issue while linting Bootstrap 4\nI've also rebased my branch with the latest master release: https://github.com/tagliala/scss-lint/commit/7aeb1ffe165740664452a3027534003c6b12e475\nHope that someone else could finish my job\n. ```\nBundler could not find compatible versions for gem \"sass\":\n  In Gemfile:\n    bootstrap (~> 4.0.0.beta2) was resolved to 4.0.0.beta2, which depends on\n      sass (>= 3.5.2)\nscss_lint (~> 0.55.0) was resolved to 0.55.0, which depends on\n  sass (~> 3.4.20)\n\n```\nThe time has come \ud83d\ude10 . Ref:\n- sass/sass#2383\n- twbs/bootstrap#24354\n- sasstools/sass-lint/issues/877. I have a failing spec for engine_spec.rb\n```rb\n  context 'when a custom property is present' do\n    let(:scss) { <<-SCSS }\n      :root {\n        --my-font-family: Helvetica;\n      }\n    SCSS\nit 'has a parse tree' do\n  engine.tree.should_not be_nil\nend\n\nend\n```\nand a clue. If you simply add a new line with stylesheet before this line: https://github.com/sass/sass/blob/3.5.2/lib/sass/scss/parser.rb#L41\nSpec will pass\nSorry, I cannot invest more time on this\nGit bisect result on Sass: https://github.com/sass/sass/commit/8247d55b051a63afdfad8bb92059658e63f7e3c5. Hi,\nSass released 3.5.3, with a fix that positively affects SCSS-Lint. I've update my commit with a failing spec. sass/sass#2394\nAt the moment the error is generated inside the Sass library, which is attempting to call the visit_method method on a string. I'm still unable to understand if the problem is in SCSS-Lint or in Sass itself.\nAny help would be hugely appreciated\nPS: I know I should give up on Ruby and go for JavaScript/node, but I will not do that \ud83e\udd37\u200d\u2642\ufe0f . @printercu please take a look at #877, https://github.com/brigade/scss-lint/issues/877#issuecomment-339966451 and https://github.com/tagliala/scss-lint/commit/ac247889acec6841c4aef81655d8ecc83a373f4d. >  it looks more like sass issue\n@printercu are you able to provide a spec which fails in Sass only? I'm still having troubles in understand what really happens when visiting the tree. SCSS-Lint pathces some Sass classes, it's quite time-consuming for me to understand what is going on. @sds thanks for your time and for your detailed explanation\nI think I need way more time of one day to implement #750, because I need to understand what's behind SCSS-Lint.\nAlso, I was experiencing #278 in Rails 5.1's system tests but I didn't have time to investigate. Now I realize that it is caused bt scss-lint's monkey patch to Sass, so I think that #750 is a must-have\n```\n$ rake scss_lint assets:clobber tmp:clear test:system\nscss-lint found no lints\nRun options: --seed 29292\nRunning:\nPuma starting in single mode...\n Version 3.10.0 (ruby 2.4.2-p198), codename: Russell's Teapot\n Min threads: 0, max threads: 1\n Environment: test\n Listening on tcp://0.0.0.0:62911\nUse Ctrl-C to stop\n2016-10-10 00:00:00 +0200: Rack app error handling request { GET /calendar }\n\n~/.rvm/gems/ruby-2.4.2/gems/sass-3.4.25/lib/sass/tree/visitors/check_nesting.rb:157:in `trans\n```\nOf course, by omitting scss_lint or by changing order of tests this issue doesn't occur. Please note that I do prefer having scss_lint before system tests because it is way faster on my codebase\n. Failures depend on RuboCop 0.51.0, which has issues and false positives. I will update this PR when a new version of RuboCop will be released. Partially included in #927 . @sds \nI want to submit a new PR that:\n\nMove development dependencies to the proper place (gemspec). Take a look here: having them in the Gemfile lists them as runtime dependencies\nDrop Ruby 2.0 support. This doesn't mean that Ruby 2.0 will not work anymore, but Ruby 2.1 will be required to develop the gem and we will exclude tests on Ruby 2.0, so we can also use RuboCop 0.51.0\nUse coveralls_reborn, my (temporary, I hope) fork of coveralls, which seems unmaintained.\n\nWhat do you think?. Hi,\n\nGot it, \ud83d\udc4d \nPerfect, will do a separate PR just for this (after RuboCop releases a new version, because it has a lot of issues right now)\nIt's not a big deal. It comes with updated development dependencies (mainly SimpleCov). I've submitted a couple of PRs in their repo three months ago, but it seems kinda unmaintained.\nRef: diff, comment\n. > Perfect, will do a separate PR just for this (after RuboCop releases a new version, because it has a lot of issues right now)\n\nRuboCop released a new version, but it has a lot of false positives, so I will keep waiting.\nMoreover, Sass 3.5.4 has an issue (fixed in the stable branch) and a lot of tests with this gem fail  sass/sass#2423, so I will wait for a new release of Sass, too\n. Hi @pocke , yes that was a Sass regression fixed in 3.5.5 (ref: sass/sass#2423)\nI've just opened a PR which includes #933 and #934.\nPlease note that I don't want to take credits of your work here, I'm working on that PR from a long while\nRef:\nhttps://github.com/brigade/scss-lint/pull/927#issuecomment-341992208\nhttps://github.com/brigade/scss-lint/pull/927#issuecomment-353352884. ",
    "janpaul123": "Hah, sure. Seems pretty minor as this typically doesn't break anything, but yeah we could do that.\nIs there a proposal yet for disallowing position: absolute unless you have position: relative/fixed in the first rule of a CSS file?\n. Because our most files look like this (using local scope):\n```\n:local(.componentRoot) {\n  position: relative; // for .somethingInsideOurComponent\n}\n:local(.somethingInsideOurComponent) {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```\nWe have the internal rule that you can only position things relative to the component root, to prevent implicit dependencies between components, so this rule would be super useful for us. /cc @lencioni \n. (Or, alternatively, specifying some rule name instead of the first rule in the file, but something like that.)\n. Not every linter rule has to be enabled by default though, right? I think this would work for a lot of teams \u2014 all 4 places I've worked in the last few years had a file organisation like this.\n. Point is though, that with the rule I proposed you won't get crazy numbers like that, since they won't be useful. The z-index: 99999999 will be bound by the stacking context of the first rule in the file, which works if you have a file organisation like ours (using local scope):\n```\n:local(.componentRoot) {\n  position: relative;\n  z-index: 0;\n}\n:local(.somethingInsideOurComponent) {\n  z-index: 1;\n}\n```\nThe z-index: 1 can be z-index: 99999999 or whatever, and it won't make a difference between it only interacts locally with other z-index declarations in the same file. So no surprises.\nI've seen many companies use a similar file organisation, so this could be a widely useful rule.\n. Ah yes, that sounds like a sensible abstraction!\n. ",
    "du-masa": "version of scss-lint is v0.47.0, and i'm installing scss_lint (with an underscore).\nthanks @sds \n. thanks @sds\nsorry, I using the text editor only, didn't try the command line.\nI did well!\n. ",
    "modkaffes": "@lencioni Did you ever find a solution to this issue? It's still plaguing my local env due to my lack of ruby experience.. @lencioni No problem, it was a really long shot posting in a thread this old. I'll try to find a solution myself, too. Thank you!. I'm putting this here for future self-reference in case this issue happens again, and of course for anyone that might have the same problem.\nAfter much research regarding how Ruby detects User's home dir, I stumbled upon this comment:\nhttps://github.com/AtomLinter/linter-rubocop/issues/168#issuecomment-254122274, which made me realize I also had some problematic zplug plugin in my .zshrc, namely knu/z.. ",
    "mbatyumov": "Thank you, Shane! It's realy helpful. But if I disable the linter NestingDepth, who will highlight this?\nscss\n.selector {\n    &.monster {\n        &.with {\n            &.a-lot-of {\n                &.classes {}\n            }\n        }\n    }\n}\n. ",
    "davelandry": ":+1:\n. ",
    "Quanthir": "I also would like to see an option like that.. ",
    "ijpiantanida": "OMG, this was the wrong repo.\nI was trying to open the issue on ahmednuaman/grunt-scss-lint. \nThat's what happens when you have 100 tabs open! Sorry about that!!\n. ",
    "paulkoegel": "thanks for fixing this. is there a chance to get a new gem release with this change included?\n. thank you!\n. ",
    "eldh": "@abea The alternative would be using the syntax from my third example. \nThe reason for this is that I find the &__element syntax can get really messy for bigger modules, and explicitly defining class names makes sure you can always search for a class name to see it's rules.\n. @abea Sorry that I was unclear!\n. Yeah, I just wanted to clarify that the rule shouldn't apply to all uses of &, but I see how it can be confusing.\n. I edited the description now to hopefully make it more clear .\n. ",
    "shukriadams": "I had the same need, so I hacked one together at https://github.com/shukriadams/selectorConcatenation/blob/master/lib/SelectorConcatenation.rb. It was done in a hurry but it seems to work. Basically, any selector that starts with & followed by letters, numbers dashes or underscores gets flagged. Too simplistic?\nAnd totally agree, this is one Sass feature that has created huge headaches for us when it comes to code maintenance.\n. @sds engine.filename is returning the file the variable is being used in, not the declaring file. I managed to find the filename another way - not as clean but still acceptable, so I can live with this.\nReally love this linter by the way, it's making my work life so much easier.\n. ",
    "juan-orca": "Very nice, thanks! Do you know the difference between either of the two\n. ",
    "monoblaine": "Have you tried the Shorthand option?\n\nIf you don't want to allow all possible shorthands, you can limit them by setting the allowed_shorthands array option to a subset of [1, 2, 3].\n\nSo setting allowed_shorthands as [] should supposedly forbid using any shorthands.\n. ",
    "etjossem": "Hold on, coworker and I are looking into this. Seems to have something to do with unicode characters for the spaces in between variable name and hexcolor.\n. Tracked it down. Using U+2002 (En Space) anywhere in the definition will cause this error to throw, regardless of whether it's a variable definition or not. \nCopypastable: \n. Opened as https://github.com/sass/sass/issues/2126.\n. ",
    "mathieuhays": "Duplicates of #678 \n. ",
    "LuigiRamosWeb": "You're right, it's working fine with Sass 3.4.20.\nThanks!!\n. ",
    "mir4a": "Added PR #785 \n. ",
    "ortonomy": "Check out this issue that I fixed myself - this will solve this problem with SCSS Lint + Jekyll. For those looking for it:\nInstall homebrew and brew install gnu-sed and then just use gsed in the suggest preprocess command and it works.. ",
    "acconrad": "@srawlins I would get warnings with a string as well since palette(blue) could be also read as palette('blue'). ",
    "jmeinerz": "Alright, I guess that would be fine. I will change the PR later. Thanks for the feedback.\n. @sds I have just updated #797 \n. ",
    "varemenos": "Ohh, I guess I missed that link, thanks a lot.\nNothing is missing in the list but the link needs to draw more attention, it's something that should be advertised more (or be linked somewhere in the beginning of the page).\nI also scanned the project's root for a directory that would be called docs or anything similar but didn't find anything, maybe you should consider giving higher priority to that too.\nShould I leave this issue open?\n. ",
    "philwhln": "Sorry, I no longer have more information on this and have forgotten what I was doing when I hit this. Feel free to close.\n. ",
    "else": ":+1: thanks a lot!\n. ",
    "thomasfrobieter": "I got this error too. But i use the default configuration [1, 2, 3, 4].\n\nShorthands of length 5 are not allowed. Value was 10px 60px 10px $grid !important\n. \n",
    "trcarden": "Ditto\n. ",
    "calazans10": "I had the same issue, @cdreve.\nSCSS\nsass\n.block {\n  ...\n  &__element {\n    ...\n    &--modifier {\n      ...\n      &::before {\n        ...\n      }\n    }\n  }\n}\nCSS\ncss\n.block {}\n.block__element {}\n.block__element-modifier {}\n.block__element-modifier::before {}\nWarning\nNestingDepth: Nesting should be no greater than 3, but was 4\n. ",
    "viridium": "Just so I understand, because I've read that bit (it was mentioned in the ColorKeyword documentation and it was right below, so it was tough to miss): is the variable specification designed such that it intrudes upon the color namespace? I should hope not, because otherwise how does it not intrude upon all the other keywords, like \"bold\", \"none\", \"middle\", and so on? I ask because, apparently, \"color names look like variables\".\nNow, as far as consistency is concerned, I might ask in turn: why don't we just design SCSS so people only have to work with bits -- zeroes and ones. Talk about consistency and uniformity, huh? Then we can translate those bits into CSS on the way out and produce all that nasty higher level ugly-looking CSS without having disturbed the engineer with it. The point here being: simplify away, but don't over-simplify (a play on Occam's razor). Why simplify away color names? The only argument I hear is an appeal to imperfection; the feature is imperfect because it doesn't cover enough colors. By the time we're done with our appeals to imperfection, we can comfortably be back to our zeroes and ones.\n(Since the ColorVariable bit was brought up, how would you comment on the value of this linter for theme files?)\n. ",
    "jamesarosen": "Sadly, map-get($some-map, foo) and map-get($some-map, 'foo') are not the same :/\nI could do map-get($some-map, 'foo') if I declared the map with 'foo': #123456.\n. ",
    "calderJamNet": "@sds sorry for the lack of info, I didn't include any code because I figured it would be irrelevant as the problem effects any and all css/scss code.\nI also just realized that the \"sort properties\" fix does work if you do it directly by hovering over the highlighted code and clicking intellij's lightbulb popup thing, but it still does not work from the from the inspect window after \"inspect code\" has been run. It would be great if I could get this to work as It would allow me to remedy many warnings at the same time.\nHeres a code snippet:\n#visibility-dropdown {\n    margin: 0;\n    padding: 0;\n    width: 7rem;\n    &-input {\n      height: 2.46rem;\n      min-height: 0;\n      paSCdding: .6rem;\n      resize: none;\n      vertical-align: bottom;\n    }\n}\nheres a video to better show the what I'm talking about.\nhttps://vid.me/zWAG\nI forgot to include the error popup I originally described. This happens when you click on \"sort properties\" under \"Problem resolution\" on the right hand column of the inspect window.\nAlso is there a list of \"fixes\" that should work? Because many of them don't seem to do anything, while others are not offered. For example:\n- shorthand property for margin should be written more concisely... does not offer a fix with the lightbulb dropdown, but in the inspection window it shows the option to \"sort properties\", which does nothing.\n- rule declaration should be preceded by an empty line... does not even highlight the code as containing an warning, however will show up in the inspection window if a code inspection is run. Like the example above, this offers the fix \"sort properties\" which doesn't do anything. Not sure if the fix is just called \"sort properties\" and should work but isn't because of the original issue, or if there is no fix/the wrong fix is being offered. \n. ",
    "ivantsepp": "Thanks for reviewing and merging! \n. Hey! great catch. I accidentally left the at_least_one_space value while doing some testing locally. I just made a PR to correct the default configuration\n. Thanks for the quick fix!\n. ",
    "deioo": "Thanks for solving this so fast! \ud83c\udf86 \n. ",
    "douglasdeodato": "thank you.\n. ",
    "otbpvose": "After writing it out (thanks @sds :D ), have figured out what the issue is, the BemDepth rule only works on fully constructed classes, and won't pick up ones constructed via referencing the parent selector (& tag).  So I guess the bug is that?\n\nMy config is set to run against: scss_files: 'app/assets/stylesheets/responsive/**/*.*css' and I've activated the rule in the following manner:\nlinters:\n  BemDepth:\n    enabled: true\nThen when I run the command scss-lint I get the following output:\n$ scss-lint\napp/assets/stylesheets/responsive/components/flight_result.scss:191:1 [W] BemDepth: BEM selectors should have no more than 1 element, but `flight-result__cta__message` has 2\napp/assets/stylesheets/responsive/components/lightbox.scss:77:1 [W] BemDepth: BEM selectors should have no more than 1 element, but `lightbox__content__scroll-fix` has 2\nThe code starting at 191 (in flight_result.scss) looks as follows:\n.flight-result__cta__message {\n  display: block;\n}\nand is wrapped in the following context:\n```\n.flight-result {\n  ...\n&__messages {\n    display: none;\n&:lang(en) {\n  @include responsive-max-width-xl {\n    background-color: $secondary;\n    border-bottom: 3px solid darken($secondary, 5%);\n    display: table-cell;\n    vertical-align: middle;\n    width: 30%;\n\n    .flight-result__cta__message {\n      display: block;\n    }\n  }\n}\n\n}\n...\n}\n```\nWhile ones it isn't identifying are as follows:\n```\n&__reason {\n  ...\n&__title {\n    ...\n  }\n}\n```\n. ",
    "nickmccurdy": "Thanks for the response! I did realize that in the case os scss-lint <glob> the glob pattern is being handled by my shell, but I was confused because the readme seems to imply that SCSSLint::RakeTask supports globs itself:\n\nRake Integration\n...\nruby\nrequire 'scss_lint/rake_task'\nSCSSLint::RakeTask.new do |t|\n  t.config = 'custom/config.yml'\n  t.args = ['--format', 'JSON', '--out', 'results.txt']\n  t.files = ['app/assets', 'custom/*.scss']\nend\n...\n``` ruby\nSingle quotes prevent shell glob expansion\nrake 'scss_lint[app/assets, custom/*.scss]'\n```\n\nWhile the workaround we suggested does work fine for me, can we please either update the documentation to mention that globs aren't supported or implement glob support internally to make the documentation more accurate?\n. \ud83d\udc4d Thanks!\n. ",
    "huwdavidevans": "Quick work! Thanks.\n. ",
    "elgervb": "Ai, my bad! \nJust did a scss-lint --v and it turned out I have an older version...\nscss-lint 0.38.0\nAfter updating, all my problems are resolved ;-)\n. ",
    "eqyiel": "@sds awesome!\n. ",
    "yoanmalie": "Hi,\ntoday, i have this error:\nFatal undefined\nwhen i remove the border: none on line 36, it's work :confused: \nEdit: more accurate:\nThis not work with the convention: 0 but work with convention: zero\nBorderZero:\n    enabled: true\n    convention: 0\nBut it's not a bug because, the doc say:\n\nWhether to prefer 0 (zero) or none (none) (default zero)\n\nand it's very confusing. Maybe the configuration can accept the 0 ?\n. Hi @sds the regex i'm looking for is for Comment.allowed :slightly_smiling_face: to accept // and /// Without messed up with the SpaceAFterComment\n. @trotzig I want a warning in the console, when scss-lint find a property which is not ordered in the scss-lint.yml file.\nWith this alert, then i can add the missing properties to the PropertySortOrder.\n. Ignore_unspecified is disabled by default. And that do not work, i've never seen an alert about an unspecified property :/\nBut in case, I have rewrote this rule in my scss-lint.yml, (see my first message), and it does not work either.\nI'm not a developer, it would have been a pleasure to contribute to fix issues.. Ok now i understand much better where unspecified properties going.\nSo my new question would be:\nIt's could be nice if unspecified properties can be better visible in the warning.\nI'm sorry about my poor english vocabulary, I have difficulty being understood sometimes.. You can do it with the custom linter file\nhttps://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md#propertyunits. @sds any idea on when it be deployed on a new version ?. ",
    "astronati": "An other blank line is added after the block not only before. When you have a lot of block within your scss file, adding a blank line after each of them helps to read better the code\n. The validator would allow to do this:\n```\n.#{$namespace}list-table {\n  @include list-table($namespace);\n.#{$namespace}list-table-body {\n.#{$namespace}list-table-row {\n\n  .#{$namespace}list-table-cell {\n    border-top: 0.0625rem solid;\n  }\n\n}\n\n}\n}\n```\nInstead of this that IMHO is harder to read even to figure out where is the } of the list-table-row:\n```\n.#{$namespace}list-table {\n  @include list-table($namespace);\n.#{$namespace}list-table-body {\n    .#{$namespace}list-table-row {\n      .#{$namespace}list-table-cell {\n        border-top: 0.0625rem solid;\n      }\n    }\n  }\n}\n```\n. ",
    "SchulteMarkus": "Hey @sds,\nyou are right about Bamboo - it's not open source, neither is it free at all. So I do understand your opinion, but I am having a different one. Of course, it is your good right not to accept this PullRequest, but maybe I can change your mind.\nIn my opinion Bamboo or the addon (I am author of!) itself should be listed here, because this platform/Wiki/ReadME is about information. Each reader can and will decide on it's own, what to do with this information, but without the information, the ReadME is a litte bit less useful. As an example: Imagine, Wikipedia would not list Microsoft. Or my thesis as a question: Wouldn't a Bamboo user benefit from this link to the Checkstyle-addon in the Atlassian marketpalce?\n. ",
    "nathanmarks": "@lencioni Certainly!\nHere's a bunch: https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/mediaControls.css\nThe -webkit-media-controls-start-playback-button one is specific to iOS:\nhttps://github.com/WebKit/webkit/blob/master/Source/WebCore/Modules/mediacontrols/mediaControlsiOS.css\n. ",
    "hendrikeng": "doesn't work either but according to https://en.bem.info the syntax i tried is correct .\n\n.block-name__element-name_modifier-name\n. @sds sorry i don't know how do fix it via a pull request, i just stumbled across it.\n. \n",
    "widoz": "There are two syntax for the bem convention, one of which is the @abea reply. \nSo, the lint should support both.\n. ",
    "ryanlloydfrench": "Keen to bump this issue.\nCurrently this is breaking for me when using the strict_BEM convention. Writing BEM but the linter is returning warnings. Seems to be when using the double hyphen for modifier. \nSee examples below:\n.box__heading works\n.box--large warning\n.box__heading--large warning. ",
    "joelmoss": "Ok, so I am also coming across the issue when using the strict_BEM convention. The following fails the linting:\ncss\n.nav__link_active {\n  color: #fff;\n}\nThe above is a valid BEM strict syntax, but scss-lint raises a warning.\nThe tests also seem to support the above as being invalid, but it is valid.\n```ruby\ncontext 'when element has not paired modifier' do\n  let(:scss) { '.block__element_modifier {}' }\nit { should report_lint }\nend\n```\n\"paired modifier\"?. ",
    "DanPurdy": "Just to throw my 2 cents in here, If you decide to take the Javascript route you could always come over and contribute to Sass-lint. It has support for both Sass and scss format which stylelint currently doesn't have (outside of experimental) and while we've been ironing out remaining issues with the AST we use we're certain that more contributors would only help improve that situation, it's in a pretty good place as of now!\nWe're already an established alternative to your ruby implementation with ~160k downloads a month and have certainly taken notice of many issues you've come up against and also followed certain rule implementations you had so as to not split the consensus between the two linters, having personally been big scss-lint users in the past! One of our main goals was to reach feature parity with yourselves.\nThere's also already a tool to migrate your scss-lint config over to Sass-lint https://github.com/sasstools/make-sass-lint-config.\nhttps://github.com/sasstools/sass-lint\nThanks!\np.s. Our roadmap currently is to move towards allowing users to include/distribute their own rules/formatters and configs as well as implementing the best bits from all the linters we use such as stylelint and eslint etc.\n. ",
    "remy-actual": "Yes, I am using gnu-sed installed from homebrew with --with-default-names flag.\nHowever, sed command currently in the README doesn't work with either gnu-sed or Mac OS X's default FreeBSD sed. The first --- line is removed, not the full front matter block. \nI've added a notice, as well as a little more info concerning the use case: #787\n. ",
    "apuntovanini": "No updates on this? Bootstrap 4 now moved to Saas 3.5. ",
    "barraq": "Hi @trotzig thanks for taking time to review this PR \ud83d\udc4d . Awesome :D thanks. Plugins are loaded in Config.rb (see https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/config.rb#L235 and https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/plugins.rb). Basically each plugin is loaded and brings its own configuration. Then all those configs are merged into one config and eventually (unless specified otherwise in the main .scss-lint.yml or cli option) merge with the default.yml config. Therefore, each plugin should avoid merging its config from default as it is done at the end of the process.\nI borrowed the comment from https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/plugins/linter_gem.rb#L25 for consistency.. I tried to keep as close a PluginGem structure (https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/plugins/linter_gem.rb#L44) but yes it can be inlined; unless we want to test it (which we don't). I can remove it ;). ",
    "Yimiprod": "Here's a PR https://github.com/brigade/scss-lint/pull/884. I'm not sure it's the good way, but since there's no reference about ordering this rules, in particular the others, it's based on way people tend to write those rules.\nSome of those choices certainly deserve more discussion and more people to talk about those orders.\nWhy moving other properties :\n- content on first position, almost only used in pseudo-elements, that way it's the first properties for those elements and never forgot to put that property.\n- quotes just after, same reasoning as content, since it's used in specific element.\n- visibility, since it's a display property, certainly deserve more reflection\n- z-index, some people tend to like it at last position, it's arguable, but it's a position property\n- overflow, missing x and y, it was let in other, but it certainly belong to box model\n- table-layout was missing, it's a box model\n- animations probably at the wrong place in this order, i'm not sure about that point, but they were missing\n- stroke was missing in border properties, it's the border of an svg element\n- opacity was left in other, moved it in background since it doesn't change box model but doesn't change the display, it subjectif\n- box-shadow should belong with background, it change the way the box appear\n- fill was missing, it's the background of an svg element\n- text many font properties was missing, ordered mainly by name.\nI hope it's clear, i've added some new properties in other, not knowing where to add thems, maybe deserve a User interaction section.\nI'm open to any changes, and if there's a place to talk about properties ordering, it would be good to have the link.. @snookca look not active on github, since i don't want to lure people, i'll ask him in a mail.\nIf no i get no anwser i'll add the comments.\nThank for the reviews.. Got a response by mail from @snookca where he seem to aggree\n\nHappy to hear the book has been helpful!\nI took a look at that PR. No specific objections with what you\u2019ve outlined. All makes sense to me. :) \n\n\n. Will do. Thanks. Well to be fair, i added them because those two properties are mandatory when doing a custom font and it's commonly used.\nBut i think i'll remove them, since it's not standard at the moment.. I'm thinking about deleting font-smooth and font-smoothing since they aren't standard.. ",
    "brtjkzl": "I like the changes proposed by @Yimiprod and agree with all of the above. +1. ",
    "CeliaLfd": "Following the proposal of @Yimiprod, it would be a good idea to think about the properties grid-layout that will be supported soon.. ",
    "gabrielmanara": "@trotzig Thank you I changed this propertie PropertySpelling before but in my text editor (Sublime Text3) doesn't reflect. Now I cleaned the cache and works.. ",
    "karezhest": "Easy fix for this would be allowed_lengths: [\"0\"]\nWhen you put smth like allowed_lengths: [0, 20px], config['allowed_lengths'] outputs [0, \"20px\"].\nI have no idea how to fix it in code though.. ",
    "gpoul": "@trotzig what I found was that this goes away as soon as you add a new line after the /* but simply inserting a blank doesn't fix it.. ",
    "radixhound": "I had the same problem and this fixed it for me:\n```bash\n\u279c  gem uninstall scss-lint\nRemove executables:\n    scss-lint\nin addition to the gem? [Yn]  y\nRemoving scss-lint\nSuccessfully uninstalled scss-lint-0.38.0\n\n\u279c  \u2717 gem uninstall scss_lint\nRemove executables:\n    scss-lint\nin addition to the gem? [Yn]  y\nRemoving scss-lint\nSuccessfully uninstalled scss_lint-0.53.0\n\n\u279c  \u2717 gem install scss_lint\nFetching: scss_lint-0.53.0.gem (100%)\nSuccessfully installed scss_lint-0.53.0\nParsing documentation for scss_lint-0.53.0\nInstalling ri documentation for scss_lint-0.53.0\nDone installing documentation for scss_lint after 2 seconds\n1 gem installed\n```. ",
    "ethikz": "Yes you are correct but I still think that there should be some exclusions because not all CSS files will have this in which case the UrlFormat would still be needed.\nMaybe a way that if it recognizes variables to ignore that string or maybe just ignore that specific variable but I think maybe ignoring the whole line if it notices a pattern in an ignore. When running scss-lint -v it returns scss-lint 0.52.0\n.scss-lint.yml\nUrlFormat:\n    enabled: true\nsrc/leadfusion/r-client-skin.scss\n/src/leadfusion/r-client-skin.scss:12:8 [W] UrlFormat: Invalid URL '/response/${siteId}/artifact/${campaignAndToolPath}/assets/fonts/roboto-light-webfont.woff2': bad URI(is not URI?): /response/${siteId}/artifact/${campaignAndToolPath}/assets/fonts/roboto-light-webfont.woff2\nthe actual code is \n@font-face {\n  font-family: 'roboto';\n  src: url('/response/${siteId}/artifact/${campaignAndToolPath}/assets/fonts/roboto-italic-webfont.woff2') format('woff2'),\n       url('/response/${siteId}/artifact/${campaignAndToolPath}/assets/fonts/roboto-italic-webfont.woff') format('woff');\n  font-weight: $regular;\n  font-style: italic;\n}. I'm sorry, I'm afraid I'm not that versed yet in order to submit a PR for it but maybe someone else would be willing to do so.  Until then I will just have to disable UrlFormat\nThere would be cases I'm sure where people will use JS frameworks that insert the serialized data as well and run into these issues.\nThanks for the help\nI have opened a question on Stack Overflow hoping maybe someone would have a way to allow that.  If so I will submit a PR. @trotzig Any clue why this keeps failing?  I only added the one thing?. @trotzig Thanks!  With what I did should your above referenced code be ignored?  Right now it reports as an error when it should be ignored because it is a variable.  The implementation I put in I thought would not report that as an error.\nurl('/response/${siteId}/artifact/${campaignAndToolPath}/assets/fonts/roboto-light-webfont.woff2')\nBefore the change this was reported as an error which it shouldn't be because it is a valid URL just with a variable that the CMS replaces.\nAm I missing some or misunderstanding what you're saying?. Ahh good catch!\nIs there anything I need to do? to fix it?. Ok awesome!!  Glad I could help and must say I had help as well from Stack Overflow since as stated I'm not a Ruby genius, I know a little here and there.\nWhen will this be released so I can update?. Well the idea is to not fail if the url has an sort of variable match.  I mean I can change it so it allows #{ or {{ but isn't the idea that leaving it open like that it doesn't matter?\nor should it be { '${url}' }? . @trotzig Because in some of our cases we use variables because the CSS goes into a CMS that replaces those variables but while we are prototyping it never passes linter because of that. ",
    "psa-dfegnoux": "I saw that property missing in recess order too but i'm not familiar with it sorry ;). ",
    "davidenke": "Okay, I'll try to improve the explanation:\nPer default ungrouped properties are sorted alphabetically. If you now insert a blank line the properties are splitted in two groups (as from the view of the editor) and the order has to remain alphabetically for all properties.\nThe suggestion is, that both property groups are now sorted indepent alphabetically, if the separate_groups option is used without the order option.\nBut maybe this suggestion should use a new option.... ",
    "daohewang": "I guess it is because  that the font-weight only applied successfully by 400 or 600, 300 is the wrong writing. ",
    "dzhytomyrsky": "Is cubic-bezier in scss whitelist?. ",
    "aar0nr": "If you decide you want to deprecate strict_BEM I can create a new issue for the 1.0 milestone to remove it.. ",
    "nlastukhina": "Sorry wrong github :) . ",
    "jeff1evesque": "Never mind, had VendorPrefix flagged off during lint.. ",
    "printercu": "Seems like not everything so clear :( I've got error with this configuration:\nSCSSLint::Linter::BorderZero raised unexpected error linting file app/assets/stylesheets/shared/_tables.scss: 'undefined method `to_sass' for [\"none\"]:Array\nDid you mean?  to_s'\nUPD: I've tried to fix this error, but it seems new sass version has too much other breaking changes :(\nClosing this PR?. @tagliala thanks! I've checked your commit, it helped to understand. I've used slightly different approach: I added #to_sass_value to Array and sass Node. This way it will work in both 3.4 and 3.5 sass versions.\nI think we should better add appraisal to test against different sass versions.\nUPD.  I saw your other comment with failing spec, it looks more like sass issue. It's also ok if it's decided not to use my pr in favour of dropping sass 3.4 support.. I even haven't thought of it before, just saw backtrace full of /gems/sass-3.5.3/lib/sass/tree/visitors/ and thought that it was sass. Now I see that it happens only after scss_lint/sass/tree is required. Everything is much more complicated than it seemed to be :)\nI'm not sure if i'll be able to try to fix it soon. Maybe i'll really try to migrate to other libs or use this gem until i face an error. For now, with this patch it seems to work for our small codebase.. ",
    "pocke": "Thank you!. Thank you for your pull-request!. ",
    "DarrenMack-OD": "Sorted, had to set the 0 to 1. ",
    "AlfredoRamos": "Thanks @srawlins\nFor me clean_files return an array of hashes [{path: 'file'}], and got it working with the following change:\ndiff\n--- a/lib/scss_lint/reporter/clean_files_reporter.rb\n+++ b/lib/scss_lint/reporter/clean_files_reporter.rb\n@@ -3,8 +3,8 @@ module SCSSLint\n   class Reporter::CleanFilesReporter < Reporter\n     def report_lints\n       dirty_files = lints.map(&:filename).uniq\n-      clean_files = files - dirty_files\n-      clean_files.sort.join(\"\\n\") + \"\\n\" if clean_files.any?\n+      clean_files = files.map { |file| file[:path] } - dirty_files\n+      clean_files.sort.join(\"\\n\") if clean_files.any?\n     end\n   end\n end\nHowever with this change tests fail. Surely there's a better and proper way to fix it.\n  . Installing the gem from GitHub seems to fix the problem but it does not print anything, I'll need to check if that's a desired output.\nThanks.. I see, so the major problem is the parser, I was hoping something could be done with that gem.\nThanks.. ",
    "EthanNYT": "My mistake, I believe this is the built-in SCSS linter in VSCode. Thanks for your help.. ",
    "jkjustjoshing": "My current workaround is doing\ncss\n:export {\n    #{'headerHeight'}: $header-height;\n}\nbut it's pretty ugly just to get around the linter rule.. ",
    "jlw": "FYI, the test scenario failures I added are:\n```\n$ bundle exec rspec spec/scss_lint/linter_spec.rb\n..........FF..FF.......................\nFailures:\n1) SCSSLint::Linter control comments when a linter is disabled within a rule using a CSS function split over multiple lines should not report a lint on line 12\n     Failure/Error: it { should_not report_lint line: 12 }\n       expected that a lint would not be reported\n     # ./spec/scss_lint/linter_spec.rb:150:in `block (5 levels) in '\n2) SCSSLint::Linter control comments when a linter is disabled within a rule using a CSS function split over multiple lines should not report a lint on line 13\n     Failure/Error: it { should_not report_lint line: 13 }\n       expected that a lint would not be reported\n     # ./spec/scss_lint/linter_spec.rb:151:in `block (5 levels) in '\n3) SCSSLint::Linter control comments when a linter is disabled within a rule using a CSS function split over multiple lines and has no child rules should not report a lint on line 5\n     Failure/Error: it { should_not report_lint line: 5 }\n       expected that a lint would not be reported\n     # ./spec/scss_lint/linter_spec.rb:175:in `block (6 levels) in '\n4) SCSSLint::Linter control comments when a linter is disabled within a rule using a CSS function split over multiple lines and has no child rules should not report a lint on line 6\n     Failure/Error: it { should_not report_lint line: 6 }\n       expected that a lint would not be reported\n     # ./spec/scss_lint/linter_spec.rb:176:in `block (6 levels) in '\nFinished in 0.08818 seconds (files took 0.28817 seconds to load)\n39 examples, 4 failures\n```. ",
    "shiftgeist": "Yes it is quite old, I try upgrading it monday \ud83d\udc4d . "
}