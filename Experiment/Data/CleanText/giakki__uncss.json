{
    "webjay": "p.s. I was asked to file it here from addyosmani/grunt-uncss#5\n. ",
    "giakki": "Just pushed a fix. Let me know if there are other issues!\n. Thanks, fixed\n. I'm going to push a temporary solution, but it seems like even cheerio is not adequate for this kind of job, since the whole 'filterUnusedSelectors' function is a nasty hack to make it work.\nLet me know if it works!\n. This looks like a job suitable for a CSS minifier, and, sadly, UnCSS does not implement its own (yet?).\nNevertheless it sounds like a good idea, I will look into it!\n. As @Tobino  said, for now you can use the ignore option.\nThe integration with PhantomJS is in the works, I might be able to release it this week.\n. Hey! I rewrote it from scratch, and it looks pretty good!\nI might be able to merge it by Saturday\n. Thanks for the feedback, I can't reproduce the errors you are getting, but I'm looking into it.\nI'll also add the examples in your repo and update the dynamic one, which was a placeholder for now.\n. Looks like a good addition, testing it now!\n. Thanks, looks like the two lines got switched!\n. Thanks for the contribution!\n. Yes, I think there are two major issues right now: unit testing / CI and fixing the CSS parser, since it still breaks on some selectors.\nI was starting to work on the latter, but testing is probably more important right now, as it would help with debugging the parser. If you have something in mind, you are more than welcome to submit a pull request!\n. Hey! Yes, I was out of town for the holidays, I'm checking all the issues now!\n. Thanks!\nYes, I have divided the uncss function in two parts, and now init should be run, instead of that. I couldn't think of better names, should I revert the change and call the (now) uncss function something else?\nAs for the second point, init can accept both an array of filenames or a string of HTML. I added that option because someone suggested to, maybe I should clarify that in the funciton signature.\nAlso, phantom_eval is called on line 129 ;)\n. Sorry for the delay!\nIt seems like 2b133e7e8ffe539e58fe17d4da812d57e96392be introduced the issue you mentioned. I haven't pushed the changes to npm yet, could you try now and see if the issue is solved? It looks like all the tests (not many for now) are passing, and the test page displays the green header for PhantomJS.\nThe problem was a misplaced \"!\", which caused the whole program to skip all the files.\n. It seems like it is not fixed afterall, I'm looking into it again!\n. Yes, it looks like all is working now! Have you had the chance to test it?\n. 0.6.2 is now available!\nBy the way, I watched the talks about uncss! Just wanted to say thank you and good job! :)\n. Thanks for the input!\nUnderscore was added when we supported regexes for ignored selectors (0181db9ecea8209f385ff81c6f124df8d47a4453), and it's used only for those two lines. I'm not even sure we need it, honestly :) Feel free to write a PR, I might look for other places where it makes sense to use it to make the code clearer!\n. This is a good idea!\nI originally didn't think this would have been used in conjunction with grunt/gulp, but I agree, it doesn't serve any real purpose, since everyone is probably using another CSS minifier in their build process.\n. Yeah, sorry, I was having trouble running the tests, but I realized it was the CSS output that is indented by two spaces instead of four, my bad :)\nI was actually thinking the same thing: having an expected directory would be great for checking that the output is actually the correct one!\n. Great job!\nThe only minor thing is that I'm not sure if the guys over at thenextweb.com would want their page scraped every time we run a test ;)\nIANAL, so if you think all is fine I'm ready to merge this!\n. Yes, that's what I was thinking! I'll merge this for now and start working on a Github page then :)\n. Yup, the intended behaviour was for PhantomJS to read the file on its own, and that should fixed now!\nThere was also a typo in the uncss function which caused the program to break if it was not passed a raw string of HTML. I'll try to add more code coverage to detect these regressions in the future, in the meantime could you confirm if it's fixed now? :)\n. See #22 for more info!\n. If you have a single page app and use grunt-uncss, I discussed the issue there (addyosmani/grunt-uncss#36).\nIf you are only using UnCSS though, you can pass it URLs and let it grab the different pages for you. Please note that this feature is not yet available in the npm plugin, we will release it soon!\n. Thanks again, all looks good!\n. Thanks!\n. Thanks for reporting this, should be fixed now!\n. It has!\n. Nice, thanks!\n. Sure, I just need to quickly fix some other issues, it should be out tomorrow!\n. Hey, @bezoerb, since I changed the way PhantomJS is called, and I don't have Maverick, could you check (from this repo, not from npm) if your fix still works?\nThanks!\n. Hey!\nI haven't tested UnCSS over HTTPS, could you describe which error it reports?\nThanks!\n. Hmm, that's weird.\nEither PhantomJS or request should be reporting an error.\nI'll look into it!\n. This should be fixed with #105 \nLet me know if you encounter the issue again!\n. Thanks!\n. Wow, I don't know how that one slipped through.\nThanks for the patch!\n. There could be two causes: PhantomJS ignores the noscript tag, or Cheerio does.\nSince both Chrome and Firefox seem to be reporting the content of s, the latter seems to be more likely. I'll test and report back as soon as I get a chance!\n. Yes, sorry for the lack of responses. I completely forgot about this issue.\nI'll look into it and hopefully update you by tomorrow!\n. The problem is that the contents of <noscript> tags are not parsed if JS is enabled.\n\nOne option would be to run PhantomJS a second time with Javascript disabled, but I'm afraid of the impact it could have on performance.\nAnother one would be to simply remove the noscript tag before checking which elements are in use.\nAny ideas?\nEdit: In the screenshot I select 'no-id' but the result is the same with no-js\n. I added the feature in v0.9.1.\nLet me know if you experience any issues with it!\n. I'm working on a partial rewrite that should solve many issues we are having in the phridge branch.\nIf you have the time, any feedback is appreciated! :)\n. Mainly it was to fix the issues with node-phantom-simple, but since I switched from async to promises, and simplified some functions, the call stack size should benefit as well!\n. Thanks!\n. Now I remember why I didn't use grunt: There is no good wrapper for mocha and istanbul.\nistanbul-grunt-mocha runs client-side, grunt-istanbul and grunt-istanbul-coverage aren't updated in months, and therefore don't support the latest versions of istanbul, which introduced the option to ignore some lines. Oh well, I guess I'll live with <100% code coverage ;)\n. Nice work, thanks!\n. Haha ;)\nThe only thing I can do right now is having only one run at a time, which would solve the memory issue, but would worsen the speed one.\nI will look into other PhantomJS wrappers, maybe someone has a solution!\n. Ooo, good point!\nI have added a patch for that, since my search for other modules hasn't led anywhere.\nI'll keep this open in case we get any other ideas!\n. I've made some progress on the performance branch, which led me to the discovery of a few bugs in master. It is still probably slower than the original, and there are a few bugs, but it will be ready soon!\n. Not really, I have some HDD problems which make the benchmarks unreliable. The slowdown is to be expected, because the new solution still uses only one PhantomJS instance. Hope to have some results soon!\n. The branch is merged!\nI'll wait a bit before publishing v0.8, since everything has been pretty much rewrote from scratch, and may need some more testing.\n. WOW! I didn't expect a 2000% speedup! Have you checked that the results are correct?\nEverything is now managed by a thread pool, with as many PhantomJS instances as cores, each opening more than one page, if necessary.\nI'm really happy to see those numbers!\n. Yeah, that error comes from node-phantom-simple. I'll look into that!\n. I'm waiting for the fix in node-phantom-simple to be pushed to npm, I'll start to bug @baudehlo ;)\n. Cheers! Looks like npm is down right now, I will publish it tomorrow!\n. Yea, that is to be expected, right now uncss does not discriminate between different types of stylesheets.\nI'll add an option to ignore stylesheets and push it in the new version with the #35 fix in place!\n. I was actually waiting to drop v0.8 support, because the only dependency that needs 0.10 is a devDependency, and I wanted to see if I can find something else that can replace it :)\n. npm install shows warnings for v0.8, but everything looks good, and the tests pass.\nThanks for the PR!\n. The resemble errors could be fixed now, I updated chai-resemble, but forgot to update the tests.\nThe weird thing is that, in your gist, mocha doesn't report what the actual error was. I will install nodejs on my Windows machine as soon as possible :)\n. coverage, selectors, and url tests should work now. I'll look into errors and resemble as soon as I get a chance, since it looks like another issue is causing them.\nThank you for the report!\n. Oops, sorry, didn't mean to close this yet.\n. closed as per #63.\n. Yup, I was seeing the same results on my windows machine.\nI rewrote the resemble library, hopefully this will fix it!\n. I finally found out that the problem is simply that, for whatever reason, if we open a page with an absolute path, PhantomJS fails to load the stylesheets associated with it. Since this happens only on Windows, I presume it is a bug with PhantomJS?\nIf we switch from\njs\nexpect(abs('...')).to.resemble(...\nto\njs\nexpect('tests/...').to.resemble(...\nall the tests pass.\nDo we even need abs?\nThoughts?\n. Ahah yeah, I was so excited to finally fix it that I pushed ASAP.\nCheers!\n. Thank you!\n. I'll look into why there are four tests still failing!\n. Thanks, didn't notice that!\n. Thanks! :+1: \n. Hmm, that's weird.\nWhat do you mean by \"near empty\"? Does it output very little CSS, like at-rules and empty media queries, or none at all?\nAlso, are you sure that the HTML is valid? It may be that PhantomJS is failing to parse your file.html, since in the second case the piped HTML is not passed to it to be evaluated. Either way, It's weird that it doesn't report any errors; could you please double check and, if the error is still there, maybe share a repro case?\nThanks!\n. I'm sorry to hear that. \nFWIW, uncss uses https://github.com/Obvious/phantomjs, which, if installed with -g, downloads PhantomJS from cdn.bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-x86_64.tar.bz2 even if it is already installed.\nIf you need PhantomJS in the future, you could try omitting the -g to have it use the already-installed version, if you have one, or replacing the binary in /node_modules/phantomjs with the BSD one (or ask the mantainer if he could add BSD support). ;)\n. I actually liked the idea of having a report object, because I might add some more reporting options in the future, for example which selectors were removed and which ones could not be parsed.\nI made uncss return the original CSS string in the report object under report.original.\nCheers!\n. Thanks for the suggestion :+1: \n. Thanks!\n. I tried updating load-grunt-tasks too, but it looks like it breaks node 0.8 support.\nI'll wait until we have a solution, thanks for the other fixes! :+1: \n. Nice, thanks!\n. :+1: \n. oops \n. Nice idea, I will get working to add it to the generated report! :+1: \n. I really wanted to put this feature in 0.8, but it might need some more testing before I can make it official.\nRight now you can inspect all the selectors in the original css and the ones in the uncss'd one under report.selectors.all and report.selectors.used (Bear in mind it's undocumented and probably buggy!)\n. I was actually thinking about that.\nOutputting the CSS to stdout is rather restricting: the CSS is going to be written to disk anyway. I might as well make that the default option, and use stdout for status messages / statistics.\n. Ooh, that's a cool idea, I'll try and play around with it a little, and report back! :+1: \n. Whoops, thanks!\n. Thanks ;)\n. That warning pops up in the test suite as well, if you enable the leak check. Since uncss uses no EventEmitters, I guess this is a possible issue with node-phantom-simple. I'll have a look as soon as I get a chance!\n. Merging this into #98\n. Thanks @ben-eb for the write-up.\nSince we removed CSSO long ago, there is no plan on supporting any optimizations as of now.\n. :+1: Good idea!\n. I added the support for an \"uncssrc\" file with f8964bd056c1ab04d68dc42871fedd6cfc357d40.\nIt's probably not optimal, since encoding RexExps in JSON is probably a flimsy way of going about it, but it works!\n. Thanks for reporting this.\nIt looks like the error is [RangeError: Maximum call stack size exceeded]: node-phantom-simple has a process.on('uncaughtException') handler, which hides the true error message.\nI'm not entirely sure what's causing this, I'll look into it!\n. Pushed a fix in v0.8.1, let me know if this solves the issue!\n. I'm not sure it's possible to skip errors, since we are using a third-party parser for the CSS (css-parse).\nUnCSS should however report the invalid line. What is the specific error you are getting?\n. Glad you managed to get it working!\n. Yeah, dropping 0.8 is the best option. Thanks! :+1: \n. Thanks for the idea, but I feel like that should not be the concern of uncss. As @p-j said, that would only save a step when shipping your code.\nSince integration would be trivial though (AFAIK, each of those CSS extensions has its own node module that handles its compilation), I am not completely dismissing the opportunity, it could be imlemented some time in the future\u2122 ;)\n. Hey, thanks for the report!\nDo you have a minimal test case that reproduces the issue?\n. Thanks and sorry for the delay!\n. Nice, thanks again for the Windows testing ;)\n. Whoops ;)\nThe resemble library was messily hacked together, I'll look into that as soon as I get a chance!\n. Hey, thanks for the report!\nHow are you invoking uncss? I tried running it on the news page, but I can't replicate your issue.\nAt the moment, uncss cannot automatically crawl your website, so, if you run it on the landing page (theneeds.com), it will only grab the styles used on there ;)\nLet me know if that was the issue!\n. Thanks for the great help! :+1: \n. Cool, I will give it a try!\nI'm not sure if failing silently is the best option though, people probably want to know if their stylesheets have errors in them. A list of errors would be more helpful!\n. Nice idea!\nThis is not possible at the moment, but I'll keep it in mind for a future release. :+1: \n. Sorry for the delay.\nYou are doing nothing wrong! At the moment, uncss does not process inline css.\nThe reason being that if you use inline styles, you probably wrote them by hand, or you have some reason for them being there.\nI'll keep the issue open though, I might add this feature in the next release!\n. Sorry for the delay.\nI am aware of some of the problems with the CLI, I'll look into them ASAP.\n. Github closed this automatically - let me know if this solved your problem!\n. Merging this into #70 \n. Thanks for the thorough report!\nI'm not familiar with responsive-nav, but as of now, uncss only executes Javascript on page load, it cannot detect user interaction.\nThe way to keep selectors from being stripped from the resulting stylesheet is to add them to the ignore option.\nLet me know if you manage to solve the issue, otherwise I'll take a look at the library!\n. Unfortunately, it's not possible to detect which classes would be used upon user interaction.\nThe only solution for now is to add the ngClass selectors to the ignore list.\nLet me know if that solves the issue!\n. Oh no, not that again ;)\nI'll look into it. Do you know if this also happens with just .app-bar.open, or .open ~ main?\nThanks!\n. Added a test.\nSeems like updating the dependencies was enough.\nLet me know if this was resolved!\n. ~~Update: I had to unpublish v0.8.2 because of some weird dependency issues. I'll let you know asap!~~\n. Thanks, I am already looking into it!\nSince I cannot replicate this on my Windows machine, could you share your PhantomJS / Windows version?\n. Closing this due to old age.\nLet me know if the problem wasn't fixed for you.\n. It looks like css-parse has an open issue like this right now.\nAre you sure all of the CSS is well-formed?\n. :+1: I actually tried cloning your repo in the past, but I had trouble setting up Jekyll.\nI am able to replicate the bug right now. I'm looking into it.\n. Update: it works fine from the CLI. Perhaps it's a problem with grunt-uncss?\nWhat I did:\nshell\nnpm install uncss\nshell\nnode_modules/uncss/bin/uncss _site/**/*.html --htmlroot=\"source\" --stylesheets=\"/assets/css/bootstrap.css,/assets/css/font-awesome.css,/assets/css/jquery.fancybox-thumbs.css,/assets/css/jquery.fancybox.css,/assets/css/style.css\"\n. Yup, I noticed that, too.\nI published 0.11.0 in the meantime, since we had already enough changes.\n. Sure thing, I'll let you know by tomorrow ;)\n. Yea, I figured the \"ReferenceErrors\" come from PhantomJS, I'm still looking into why it only reports the errors form the CLI, but it throws in Grunt.\n. For the first part, I guess we need to find a way to be able to specify the Javascript location.\nThis is related to #85\n. Yes, but the problem is that the error is thrown as soon as the page is loaded here (hence the \"local\" in the stack trace). We'd need to modify the HTML before passing it to PhantomJS.\n. Hey,\nYes, as of now, @keyframes are not considered for removal. I'm working on this feature right now!\n. Closing this due to age.\nLet me know if you managed to solve the problem!\n. Closing this.\nRegex parsing has been fixed since 7a80f69.\n. Thanks for the contribution! :+1: \n. Thanks! :+1: \n. Hey,\nare you still experiencing this issue?\n. Hey!\nI am not familiar with dust, but others are using uncss with other template engines.\nFrom a quick look at the website, the issue may be that the templates are loaded asynchronously.\nTry passing in the timeout option; that way you can tell PhantomJS how much to wait before returning the unused selectors!\n. It's probably a good idea to add an option to specify the location of JS files. Thanks for reporting this.\nAs for question 2, no, UnCSS cannot parse Javascript templates as of now.\n:+1: \n. Fixed, will be released with the new version of UnCSS!\n. Fixed.\nThanks for the report!\n. Sorry for the delay, are you still experiencing this problem?\n. @maxbucknell sorry for the long wait.\nIt looks like PhantomJS \"breaks\" upon loading Prototype.js. Removing it from the URL (http://www.made.com/it/minify/1416234427/js...) fixes the problem.\nI'll keep investigating, but unfortunately there isn't much I can do about that, since PhantomJS does not even report any errors.\n. No problem!\nTo test it, since you said removing the <head> was enough, I tried removing each script. Luckily, the one in question was number 3.\nSeeing that it was made of different paths, I tried removing each part, and again, out of luck, removing the first part was enough (I also tried removing other parts just to be sure I wasn't crazy, but only Prototype was troublesome).\nAgain, it's pretty hard to debug the real issue, since PhantomJS reports nothing.\n. Sorry for the delay, but uncss currently has an issue with regexes from the command line.\nI'll be releasing the fix soon!\nBTW, the syntax to use them will be the same as Javascript, that is /regex/flags.\n. Closing this because it has been fixed for a while.\nFor future reference, the syntax is --ignore \"simpleIgnore\",\"/regex1/\",...\nFor example, uncss index.html --ignore \"h2\",\"/\\.unused/\"\n. Thanks for reporting the issue upstream.\nI am working on a different bridge for PhantomJS, I hope that will solve many of the problems some are experiencing. :+1: \n. I'm not sure what is causing the errors over HTTPS. \nI am currently working on a replacement for node-phantom-simple, I'll let you know if that was the issue!\n. Should be fixed as of #105.\nLet me know if you have any more troubles\n. Sorry for the confusion, the fix has not been published yet in 0.9.0 ;)\n. Hey, thanks for the PR, but I had already added a fix for regexes on the command line.\nv0.9.0 has it!\n. Thanks again :+1: \n. A replacement for node-phantom-simple is up in the phridge branch.\nHopefully this fixes many of the issues we were having!\n. Yeah, it looks like the error in your logs is actually #76.\nCan you confirm there is no leak anymore, so we can close this?\n. Cool, I'll close this then ;)\n. The problem is probably that PhantomJS cannot parse PHP files, .\nA solution would be to serve the page on a local web server and  run UnCSS against that.\nLet me know it that solves the issue!\n. The htmland body tags are the only ones that cannot be removed, because PhantomJS adds them automatically if they are missing, much like your browser does.\nI'll consider adding this feature, it could be useful!\n. Good point, I didn't look into which modules could already accomplish this task.\ncss-byebye looks nice!\nThanks again @ben-eb!\n. Cool, thanks!\nI'm currently without internet due to a flood, and I can't test it right now, but looks good to me :+1: \n. As long as you are running UnCSS on a server, all your Asp.net files should work fine.\n:+1: \n. Good idea, I think the options.url feature has been deprecated enough.\nI will remove it in the next release, and add some info on the usage of the HTML option!\n. Cool, thanks! :+1:\n. Yup.\nAlso, this is already possible, we do it all over the place in the tests.\nIf you really want to use an unrelative path, you can use the csspath option ;)\n. Thanks, great idea! :+1: \n. Cheers!\nI'll try and finish 0.12 ASAP so you can both update safely ;)\n. :+1: \n. Huh I thought I already had the Appveyor project for uncss.\nAnyway, I added it, here is the badge, if you want to update the PR:\n[![Build status](https://ci.appveyor.com/api/projects/status/us2yo9qj5itk9n17/branch/master?svg=true)](https://ci.appveyor.com/project/giakki/uncss/branch/master)\nThanks for the addition!\n. - Unless it is a trivial task, I don't think we need coverage over here too, we have no platform-specific code, and I guess the coveralls badge is only for the latest build anyway ;)\n- node.js 0.11 support would be great, let's see how the testing goes and then I'll make adjustments if needed.\n. Cool, thank you again!\n. :+1: \n. Looks good on my end. The tests are failing because of the gh-pages change.\nI'll restart the build just to be sure, though.\n. All was well, I don't know why the travis tests were failing.\nThank you both!\n. Hey, since I an about to merge the phridge branch, could you move this over there, since I already split the utility function over to another file?\nThat would give me an easier time fixing all the conflicts.\nThanks!\n. It looks like the only option is to make a new PR.\nIf you have the time I'd love that, otherwise I'll make it myself, so you don't have to go trough all the new code again ;)\n. Ah, I knew some pseudos would have been left out ;)\nThanks for the addition!\n. That was painful. Thanks for the PR though, the gh-pages were collecting dust for a while now ;)\n. No problem, I haven't updated the branch since today's changes. I'll tidy up everything.\nThanks again!\n. You are correct. Proof that I should not be working this late. I'll revert this.\n. Yeah I'm having a hard time doing that ;)\nI'll try tomorrow morning!\n. Yes, the tests are quite messy right now.\nI'll try and fix the Windows resemble tests before changing anything else, though ;)\n. It looks like an error from PhantomJS.\nWhat version of UnCSS reported this error? Could you try again with ~~0.10.0~~ 0.11.0, and see if the problem persists?\nThanks!\n. Great!\nThe only thing is that we are using the \"1 true brace style\" for braces, instead of Stroustrup.\nI fixed the src files, I'll the tests now.\n. I actually didn't notice that jshint complains about redefining Promise.\nIf I put /* globals -Promise */ at the top of the file, it's eslint that complains, saying that -Promise is never used.\n. Should be ok now. :+1: \n. Thanks!\nI'll start working on it.\n. It would be great if \"space-in-brackets\" would not mark one-liners as errors.\nI don't know if it's a good idea to enable it, since you'd have to either write objects without spaces, which I don't think looks too great, or expand them to take at least 3 lines.\n. I think we are done then!\nI'm afraid I'll mess something up if I rebase myself, so I'll leave that to you, if you want ;)\nFor future reference, would that be git rebase -i a3244978534880684134598fe9088d213c56f726?\n. Oh, that explains many questions... Thanks!\nI'll merge this as soon as AppVeyor finishes, so that it doesn't error out again.\n. :beers: \n. Cheers!\n. Let's keep it until the next release in case some else has the same problem ;)\n. c90dc6b :+1: \n. Huh. Didn't know about the span / heading thing.\n:+1: \n. If only it showed the error message I wouldn't have to switch to Windows :P\n. :+1:\n. The problem is that url.parse.path returns a path like /C:/ on Windows, and path.join thinks that it needs to prepend C:\\ again onto it :\\\nI'm looking for a way to fix that without resorting to too many hacks.\n. @XhmikosR it should be fine to enable AppVeyor again\n. Thanks, I still have some testing to do, I'll squash them when I'm done!\n. @XhmikosR after spending the yesterday night and most of today looking at the debugger, flamegraphs, and trying to get dtrace to work on my machine, I still have no idea why this is having a stack overflow.\nI honestly see no other alternative than switching to another CSS parser, maybe postcss?\n. Yeah, I actually tried switching to postcss before creating this PR, but soon discovered I'd have to rewrite lib.js pretty much from scratch.\nAnyway, just before\njs\ntry {\n    parsed = css.parse(cssStr);\ncssStr is valid CSS.\nAnother possibility is that the grunt plugin has some has some problems, since it works from the CLI, but not from there.\n. @XhmikosR tested with your repo, this fixes the PhantomJS errors.\n. Wait, so the paths problem is not fixed on Windows :disappointed:\nI'll also probably revert d46fd33 because it's a bit hacky, and you said the performance got worse anyway.\n. If you are talking about the path problems, it's probably just that they weren't reported before ;)\n. Also, switching to css 1.6.0 fixes the problem AND passes all of the uncss test suite.\nI'm not sure if we should revert back to it, though. Thoughts?\n. @ben-eb there are two problems actually:\n- The CSS, before parsing, is 123.434 Kb. I tried stepping trough the debugger inside the parsing function, but I gave up after a while.\n- The problem appears only with grunt-uncss, not from the CLI, which is the strangest thing here.\n. Oh, I don't know how I forgot about that\n. Will do - Waiting for your input and Addy's to squash the commits.\n. I know about the performance hit, but it's the price for being able to load external Javascript properly ;)\n. Well, with css 1.6.0 i get:\nsh\nExecution Time (2014-12-30 23:47:15 UTC)\njekyll:site       1.7s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 18%\nuncss:dist        5.9s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587...\u2587\u2587\u2587 62%\ncssmin:minify    108ms  \u2587\u2587 1%\nuglify:minify    759ms  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 8%\nuglify:minifyIE   98ms  \u2587\u2587 1%\nusemin:html      136ms  \u2587\u2587\u2587 1%\nhtmlmin:dist     751ms  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 8%\nTotal 9.6s\nI'll try and find what's wrong with it, as soon as I manage to get Jekyll working ;)\n. :beers: \nIdeally, We'd want to add more extensions to that list. Just that change brings the build on my Windows machine from 50 seconds to 10.\n. The stack overflow is unrelated to this. I'm waiting for Addy to finish his testing and for some more comments on whether downgrading the css module to 1.6.0 could break something (the uncss test suite seems ok with it, but there were many changes since that release https://github.com/reworkcss/css/compare/1.6.0...master ).\n. @addyosmani thanks for the input, I'll switch to 1.6.0 then.\nThe performance hit is not due to css, that was introduced with c5c4152, but I have a solution for that.\n. Cheers!\nI think the performance can be improved a bit more, but I'll merge this, so we can get this out of the way.\n. Thanks for the report!\nThis happens with 0.11.0, right? I think there might be an issue with how the PhantomJS instance is handled.\nFor now, I'd advise you to run your second and third writeCSS functions only after the one before has finished.\n. Exactly what I think. :+1:\nHowever, since frameworks are here to stay, I was actually thinking of starting a wiki here on Github listing which selectors you should ignore given a framework or script. I already have a list of some defaults I use, and adding some for Bootstrap / Foundation / Pure / Web Components would be easy.\nI don't think baking this functionality into UnCSS is feasible, since their APIs change fast, and there are always new frameworks to build upon; a wiki that everyone can edit is probably the solution.\n. Yeah, that is the issue.\nThanks @ben-eb.\n. Hmm, not sure about this.\nI don't see the need to implicitly cast to Boolean, I think the way it is now is more expressive.\n. Okay, you have a good point :wink: I guess consistency is better!\n. :+1: Much more clearer, thanks!\n. Oh, I forgot, utility.isWindows is actually needed, because that is evaluated in the browser, and it can't find the variable if you don't tell it to. I'm reverting just that change and adding a test.\n. This is a limitation with the uncssrc format: \"/\\.success-page.*/\" is not valid JSON, while \"/\\\\.success-page.*/\" is.\nWe might change this behavior in the future, so that you can specify regexps directly, without the use of quotes!\n. @XhmikosR it's a simple change anyway, no harm in adding it ;)\n. Thanks everyone for the reports. I am looking into it!\n. I'm back working on uncss, sorry for the long wait.\nThis looks like a great place to start. I'll start the transition on a new branch, so you can review / add changes on it.\nCheers!\n. Thanks for the support!\nI have a Flattr thing over at https://flattr.com/thing/2388296\n. Cheers!\nThanks you again! :)\n. Not sure what you're asking. Is UnCSS reporting some errors? If you're fetching resources over the network, it should be able to find them without any help :)\n. Thanks for the report, it looks like the errors were indeed written to stdout by default!\n. Yeah, contain is definitely better ;)\n. Looks good!\n. Thank you for the fix :) Not sure why the travis build failed, everything looks good to me! I'll release this ASAP\n. Thanks for the contribution! LGTM, until we find another way to deal with this\n. Sadly even fixing the lint errors does not help, it breaks other tests... I'm going with #192 then!\n. Fixed them, it was just an indentation problem!\nThank you for the fix, we might need some testing for the CLI version...\n. Wowzers! Thanks @mikelambert! I've given you push rights, you can merge this in! :smiley: \n. @XhmikosR I agree, we can safely drop support for 0.10, maybe we can test against 0.12?\n. Thanks! :+1: \n. Yeah I was just browsing the docs, and it looks like I'd need to set up a new account.\nReference. Thank you @addyosmani \ud83d\ude04 \n@XhmikosR I added the project on AppVeyor, the @uncss/uncss team should have access to the CI. Done!\nOn 16 February 2018 at 15:02, XhmikosR notifications@github.com wrote:\n\nYeah, @giakki https://github.com/giakki please give admin rights to\nAddy and me for grunt-uncss just in case it's needed.\nWe also need someone else with admin rights for the whole org as a backup,\nin case giakki goes AWOL :P\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/uncss/uncss/issues/333#issuecomment-366243175, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA-HoeqVYYCtDnSNE9_YAfXNg-QBQCCdks5tVYqNgaJpZM4PkL63\n.\n. \n",
    "addyosmani": "Although it's a temp fix, I appreciate you patching this. The tests work fine now :)\n. Hey @giakki. Do you know what the status is of the Phantom integration? Thinking about moving it to master in the future?\n. Useful addition!\n. Okay. So I believe you can call uncss.init() to get the same behaviour as before. What I'm a little unsure of is the input form of files in init(files, opt, cb). The method signature comment says files should be an array of files (e.g ['app/index.html','app/about.html','app/contact.html']) but the code appears to expect the input to be a string. Could you clarify?\n. Some updates of what I've tried. I'm sure we'll figure out what I'm doing wrong :)\nNote: for each of the tests I'm trying out, I'm passing in filesArray, an array of the form ['app/index.html', 'app/about.html'] etc. options is only handling compression right now.\nFrom within a node module:\n1. Do var uncss = require('uncss'), do some setup. Later call uncss(filesArray, options, callback) - nothing happens. The callback is set to log the output returned and then write to file. This used to work but doesn't appear to atm.\n2. Do var uncss = require('uncss') then uncss.init(filesArray, options, callback). This doesn't work as init is the module export. Calling uncss on its own should be working but it doesn't appear to for some reason. \n3. In uncss.js, ~line 139, the final function function (res).. doesn't appears to get called at all. Related: In lib.js, the line page.stdout.on.. doesn't appear to get called from within the phantom_eval function either. I thought that perhaps this was timeout related, but increasing the timeout there doesn't appear to have made a difference.\nFrom within node itself (i.e at the prompt in terminal)\nvar uncss = require('uncss');\nuncss(['app/index.html', 'app/about.html'], function(output){ console.log(output); });\nthis appears to get completely stuck at the PhantomJS phase around page.on('close' again. Would it be possible to dig into the multi-file use-case and see whats breaking? This doesn't appear to work with either the uncss module on its own or via my grunt task.\nAny help at all would be hugely appreciated :)\n. Thanks for looking into this again! I noticed that the issue was closed after you re-opened. Were you able to discover a fix? :)\n. Latest version in master now works! :) Could you publish a new release? Thanks again!\n. Not at all. It's I that should be saying a huge thank you to you. Your project has been SO useful over the past few months and you've been an incredibly humble supporter - thanks for always answering my silly questions :)\nI'm trying my best to keep both projects in sync and just added a similar test suite as you've landed here so that way I can track regressions on my end and report them here when I notice.\nUpdating to 0.6.2 now. Thanks again! Happy new year :)\n. Would it make sense to have a local test which we host on say, gh-pages and just crawl that instead? I imagine that would be preferable and potentially more reliable long-term than relying on thenextweb as @giakki pointed out :)\n. Would it be possible to push out a 0.7.3 release with this fix in place?\n. Fantastic. Thanks!\n. @giakki I was wondering if there were plans to support a fix for this issue in a near-future release. I understand you're completely busy with other features and bug fixes, but just wanted to gauge priority :)\n. I wonder if a sane strategy around this would be checking to see if a rule A is included in any media queries that are discovered and excluding all As (that occur in mqs) from being stripped. I don't think we could otherwise easily determine whether rules in multiple media queries are used or not.\n. :+1: \n. We ran into it with .open ~main too if I remember correctly. Hope it doesn't cause too much trouble :)\n. @giakki the modern.ie VMs are pretty good for testing whether this issue is present in other Windows versions :)\nAt the moment, there doesn't appear to be a clear solution for this issue. We'll keep the issue open on the Web Starter Kit project in case it becomes more problematic.\n. :+1:  Nice work, @ben-eb! \n. Also worth looping in @XhmikosR here\n. It could well be a memory issue. I'll try profiling this evening and report back if I discover what is going wrong.\n. My testing using branch hasn't resulted in any stack overflow issues (OSX) using the latest version of the css module, which is relatively fast for me (1.6.x also appears to have similar levels of performance). That said, it is well possible the numbers are going to stay different on Windows. If we're really seeing as much difference as has been reported, perhaps we should move ahead with 1.6.x and re-evaluate if we can verify what breaks?\nSide: I'm +1 on reporting perf issues upstream. It seems a little strange we're seeing such drastic differences between latest and 1.6.0. \n. some Phantom integrations make use of a waitsFor option to delay DOM scraping until some condition or set of conditions are met. For example, a set of classes are present on specific nodes. Something like that could be explored, but it would be another layer to add in.\n. Wiki idea sgtm :+1: \n. Perhaps it's worth maintaining safe ignore lists for popular CSS/JS libraries.\n. Confirming this is still an issue.\n. I'm down with moving it over. If folks could give me a ping here or on\nTwitter once the new org is good to go, happy to move it.\nOn Nov 27, 2017 11:26 PM, \"XhmikosR\" notifications@github.com wrote:\n\nI don't mind moving grunt-uncss under the org but we need @addyosmani\nhttps://github.com/addyosmani's confirmation plus he's the owner so he\ncan only make the move when we have the new organization.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/giakki/uncss/issues/333#issuecomment-347436459, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGxab4z7RyeKJFfwqei6uN1Iegz9Xzeks5s67WggaJpZM4PkL63\n.\n. Repo moved :)\n\nOn Feb 16, 2018 1:52 AM, \"Giacomo Martino\" notifications@github.com wrote:\n\nYeah I was just browsing the docs, and it looks like I'd need to set up a\nnew account.\nReference\nhttps://www.appveyor.com/docs/team-setup/#setting-up-appveyor-account-for-github-organization\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/uncss/uncss/issues/333#issuecomment-366190346, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGxaZYwLWeRk5sO1_muXspnKX1tba_Wks5tVU_5gaJpZM4PkL63\n.\n. \n",
    "jrcryer": "Cheers for your feedback - if I get chance to take a look, I'll see if I can come up with something :)\n. ",
    "Tobino": "Hi,\nUncss will delete the class from the css file if it's not in the html file.\nYou can add all the css class in the option ignore, so uncss will not delete it.\noptions = {\n    ignore: ['.new-class', '.created_by_jQuery']\n    compress: true,\n};\n. ",
    "josenobile": "Hello, \nMaybe this will look as a support request.\nI use jQuery UI (modal), the \"dismissable\" functionality stopped working. Also this: http://mynameismatthieu.com/WOW/ stopped working.\nTo find the selectors that are being removed I inspect the HTML elements (Chrome  Developer tools) finding the CSS style tab and compare the full CSS against the uncss version. However for this two libraries I was unable to find any difference using this method.\nIs there a better way to detect the missing CSS that are affecting the functionality of the website?. ",
    "drschwabe": "Just thinking aloud, why not simply to have the option to pass/parse a JS file for any mention of CSS classes ie- make it detect and include the CSS class in this example: \nuncss -parseJS 'myscript.js' > styles.css\nWhere myscript.js has say 300 lines of code, with one such line being: \n$('#some-selector').addClass('.my-cool-class')\nand as such, .my-cool-class is included in the final output styles.css\nYou wouldn't need any JS logic specifically; just cross reference any \".class-names\" with what is in the source CSS files and if there is a match include it; otherwise don't include it; ie- it's not CSS; avoid false negatives. ",
    "RyanZim": "@drschwabe That's easier said than done without any false positives. https://github.com/purifycss/purifycss does something similar to this.\nLocking to avoid further noise on this thread, notifying all the earlier participants.. @RyoIkarashi Please open a new issue instead of bumping old threads.. @brutalcrozt Please open a new issue if needed instead of commenting on old outdated threads.. @mikelambert is this fixed? See #200.\n. @mikelambert @XhmikosR Since we use postcss now, isn't this unnecessary?\n. This seems reasonable, however, how would this work when using this as a postcss plugin?. My question was about how we would output the processed CSS. i.e. are we rewriting the HTML files, etc.\n\nThinking more about this, does this really make sense? Assume the HTML:\nhtml\n<html>\n  <head>\n    <style>\n    .red {\n      color: red;\n    }\n    .blue {\n      color: blue;\n    }\n    </style>\n  </head>\n  <body>\n    <p class=\"red\">Hello World!</p>\n  </body>\n</html>\nHow does uncss output the result?\nDoes it overwrite the HTML? (if so, this would be better suited for a wrapper library IMO)\nDoes it output the processed styles to a separate file? (This makes no sense, since you'd have to hand-edit your HTML to use the processed styles). @citrusui How would uncss output the result? (see my post above) Would like to know your thoughts here.. @lt7 Exactly what css selector(s) are you trying to match? If you are only trying to match one selector, you might be better off passing it as a string to ignore.\n. This is becoming pretty uncommon now that we have the <template> tag supported in everything except IE: http://caniuse.com/#feat=template\n@mikelambert @XhmikosR Thoughts?. Going to close this as wontfix; if anyone disagrees strongly, feel free to reopen.. @maxbucknell Is this still an issue?\n. @mrzool PR welcome IMO; FWIW, if you're ignoring more than a selector or two, you should probably use an uncssrc file.\n. @giakki @XhmikosR @mikelambert could you close this as per @1951FDG?\n. We now use jsdom, not sure how easy this would be.. > Unless someone wants to add a headless IE rendering that can be controlled/evaluated from JS\nCount me out! :grinning: \n. Should we consider this wontfix? @mikelambert @XhmikosR ?. This might be doable now that we switched to jsdom. PR welcome.. This would fix https://github.com/giakki/uncss/issues/327. PR welcome.. @mikelambert Wasn't this fixed in 7a1e1cfc9532946fec1f69869c23dc785f0058c5?\nSomeone should also file a bug with https://github.com/addyosmani/grunt-uncss to revert https://github.com/addyosmani/grunt-uncss/commit/af258f0b11e9c3a472b23ea68c8c9104505cf169. I'd be willing to, just let me know.\n. Uncss 0.15.0 no longer uses PhantomJS, so I assume this is fixed. CC: @XhmikosR . I got together an ignore list for bootstrap v3.3.6:\njs\n[/\\.fade/, /\\.modal/, '.affix', /\\.tooltip/, /\\.popover/, /\\.collaps/, /\\.carousel-inner/]\n@XhmikosR Should this be in the wiki or as a separate personal gist or repo (with a link from here)?\nEdit: This list is missing a few things; see the updated list at: https://github.com/giakki/uncss/wiki/Using-uncss-with-Bootstrap.\n. @XhmikosR I question the wisdom of putting this in the README. It would work for now, but this section could get to be pretty long if you have a list for Bootstrap v3 & v4, Foundation, Materialize, ... you get the idea. It's up to you though.\n. The only slightly better option I can think of is to campaign that frameworks prefix all their dynamic classes with .js-.\n. No; If you make one, we might post it on the wiki.\n. Closing for lack of action; feel free to add additional wiki entries for common framworks.. @ben-eb On the surface, this sounds good, but it all breaks down when you have user-interactively added classes/elements. For removing unused classes, you can use an ignore list; you can't here. Any other ideas?\n. This has been an interesting discussion; but I don't think we have any clear answers on how to reliably deal with all the edge cases. Gonna close this for now, I'd be inclined to think this would need to be a separate project anyhow.. @alanontheweb Is this still an issue for you?\n. @mikelambert This seems abandoned, can you close?\n. Is there a way to use uncss as a postcss plugin?\n. @mikelambert Any reason to keep open?\n. @mikelambert No reason to keep this open that I can see.\n. @cyberwombat UnCSS has switched to PostCSS. It hasn't been shipped in release yet, but is implemented in master. Could you confirm that the issue is fixed in master, and if so, close this. Thanks!\nBTW, if you are using PostCSS yourself, you can use https://github.com/RyanZim/postcss-uncss. That is tied to a specific git commit in UnCSS master.\n. @cyberwombat ping?\n. @mikelambert Any reason to keep this open?\n. @ArmorDarks If this is indeed resolved, please close this.\n. @ArmorDarks @addyosmani Is this still an issue? Is anyone using // protocols anymore?\n. @mikelambert Can you close this?\n. @CelticParser Is this still an issue for you?\n. @mikelambert @XhmikosR Any reason to keep this open?\n. @corysimmons When used as a postcss plugin, uncss serializes the requests to PhantomJS. (PhantomJS doesn't seem to enjoy running multiple instances side by side) Could you try using the postcss plugin and see if that resolves this?\n. Uncss 0.15.0 no longer uses PhantomJS, so this should be fixed.. Fixed in https://github.com/giakki/uncss/pull/214. Please close.\n. @mikelambert Can you close this as per @ben-eb?\n. X-Ref https://github.com/giakki/uncss/issues/186. What do you think would be best @mikelambert?\n. uncss 0.15.0 no longer uses PhantomJS, so closing. Feel free to open any new feature requests for the jsdom versions. Also see https://github.com/giakki/uncss/issues/323. @mikelambert Dupe of #176 IMO.\n. @vchouhan Is this still an issue for you?\n. This looks abandoned IMO. @mikelambert can you close?\n. @XhmikosR what do you think?\nA 404 is an error-worthy IMO. I don't think failing silently (or attempting to console.log) is a good idea.\n. @crazy4groovy I tend to shy away from libraries using console at all unless they are throwing an error. Is there a specific use-case for needing to process a 404?\n. In most cases I would agree with you; however, with the new capabilities of using uncss as a PostCSS plugin, is uncss a cli or library?\nSome people will probably use uncss by calling grunt, to call grunt-postcss, to call postcss, to call uncss.\n. Another reason I oppose using console is the difficulty of testing without interlacing the test results with logging.\nWhen all is said and done, the fact remains that I like the existing functionality, and you would prefer changes. I'll leave the final decision to @XhmikosR & @mikelambert.\n. I have nothing more to say on this.\n\nI'll leave the final decision to @XhmikosR & @mikelambert.\n. Going to close this as wontfix; if someone feels strongly otherwise, feel free to reopen.. @bjarnef Perhaps PhantomJS doesn't parse css classes directly after @.\n\nFooter:\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n@{\n    var site = CurrentPage.Site();\n    <footer>\n        <div class=\"contact-info\">\n...\nCopyright:\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n<div class=\"copyright\">\n...\nAnyhow, uncss can't support parsing server-side code. You'd be best off precompiling it to HTML and running that through uncss.\nCC: @mikelambert \n. @mikelambert Any reason to keep this open?\n. htmlroot should work.\n. @supervova What happens when you use htmlroot? Are there error messages?\n. @mikelambert It seems this issue has been abandoned by the OP. Could you close?\n. @mikelambert ping?\n. I'm not sure how we would do this. For your case, you could add user-agent sniffing for phantomJS in your js.\n. @XhmikosR What do you think of this feature?\n. OK, just wondered. If you're not going to implement this, might as well close this.\n. I agree with @mikelambert. Of course, as I said earlier, you could also do UA sniffing for PhantomJS in your JS.\n. @mikelambert Can you close this?\n. @hellsan631 Is this still an issue?\n. @hellsan631 ping?\n. @twiss I'm not sure what this PR is trying to accomplish. Can you give an example of how you would use this feature?\n. OK, I see what you mean.\n@XhmikosR @mikelambert Thoughts?\nBTW, it looks like tests failed due to getbootstrap.com being temporarily down while Travis was running.\n. This PR is so stale, resolving merge conflicts would probably be harder than reimplementing this, so closing.. If the classes are added on user interaction, they will be removed unless you list them in the ignore option. Please close this.\nCC: @mikelambert \n. @mikelambert Any reason to keep this open?\n. @Thomasdezeeuw Is this still an issue for you?\n. I'm away from my dev machine right now; is this reproducible with vanilla UnCSS (eg. using the CLI)? The command would be something like:\nuncss index.html -s '*.css' > bundle.css\n. OK, thanks. I'll look into adding a sanity check.\n. @mikelambert Any reason to keep this open?\n. To quote @mikelambert in https://github.com/giakki/uncss/issues/176:\n\nif PhantomJS supports it, then I assume it's just a matter of making an option that plumbs it all the way down to our use of the PhantomJS API If someone wants to do that...but I have no time to design or build such features myself, as they are not relevant for my personal use of uncss.\n\nPlease close this.\n. UnCSS is built only to handle .html files, not server-side files. So at the current time, no. This might be possible if we implemented https://github.com/giakki/uncss/issues/176 or https://github.com/giakki/uncss/issues/186.\n. I meant you can't parse .asp etc. directly.\n. @mikelambert Isn't this a dupe of #69?\n. @mikelambert Can you close this as per @ben-eb?\n. > I believe it comes from phantomJS having an issue with local Ajax calls\nThat's what I would guess. No idea how to prevent it. @mikelambert?\n. @HugoGiraudel I haven't tried it personally, but you could try using something like https://github.com/tapio/live-server.\nInstall it globally and run liveserver _site. Your browser will open to a localhost address (probably http://localhost:8080). Copy the url in the browser bar and run \nuncss <url> > _site/css/main.uncss.css in a new terminal window (replacing <url> with the localhost url, of course).\nIf that works, please close this. If not, let me know.\n. @HugoGiraudel Have you tried this?\n. @seffw Is this still an issue for you?\n. @seffw ping?\n. @seffw ping?\n. @seffw ping?\n. @mikelambert This looks abandoned IMO, can you close?\n. Don't know. @mikelambert?\n. Oops, dupe of #176. Please close @mikelambert.\n. What OS? I'm running vanilla uncss on a Lubuntu VM with ~750MB & 1 core.\n. @Ajeetlakhani Is this still an issue for you?\n. @mikelambert Should this be closed?\n. Don't know when I'll get time, collaborating at mde/ejs keeps me quite busy. Perhaps add the enhancement label and rename to something more descriptive of the task to be done (or open a new issue)?\nIf I get time, I'll let everyone know I'm working on it.\n. @mikelambert Would serializing PhantomJS requests also fix #136?\n. Translation:\n\nConditions / *! uncss: ignore * / not running in this example:\n\nI will look into this further.\n. You need to put /* uncss:ignore */ before the class that calls the keyframe.\nThis example will work:\n/*! uncss:ignore */\n.class {\n  animation-name: warp;\n}\n@keyframes warp {\n  from {\n    opacity: 0;\n    transform: rotate(-60deg) translateZ(-300px)\n  }\n  to {\n    opacity: 1;\n    transform: rotate(60deg) translateZ(300px)\n  }\n}\n\nTranslation/\u041f\u0435\u0440\u0435\u0432\u043e\u0434::\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c / * uncss:ignore * / \u043f\u0435\u0440\u0435\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043a\u0430\u0434\u0440.\n\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c:\n/*! uncss:ignore */\n.class {\n  animation-name: warp;\n}\n@keyframes warp {\n  from {\n    opacity: 0;\n    transform: rotate(-60deg) translateZ(-300px)\n  }\n  to {\n    opacity: 1;\n    transform: rotate(60deg) translateZ(300px)\n  }\n}\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0413\u0443\u0433\u043b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a\n. @Vadizar Can you paste your exact css?\n. @mikelambert It seems this was abandoned by the OP. Can you close this?\n. @mikelambert Any reason for this to be open?\n. @tobek ping?\n. Though this is a valid feature, I'm in favor of closing this since the PR is outdated and isn't being updated. @mikelambert @XhmikosR ?. I'm guessing you forgot to include jQuery in one of your html files. You could try opening each page in the browser and looking at the console.\n. Not sure. Perhaps @XhmikosR, @mikelambert, or @ben-eb  could help you better.\n. Confirmed.\nI'm getting ready to do a git bisect to find this bug.\n@jogaco Thanks for posting!\n. @lorvent Yes, moving JS to a separate file fixes it, but uncss should support inline JS.\nI'm currently running git bisect to find which commit is responsible for this error.\n. And the results are:\n```\n62145b351fa9eedccdd8eeb5b8d5f14db72e4100 is the first bad commit\ncommit 62145b351fa9eedccdd8eeb5b8d5f14db72e4100\nAuthor: Giacomo Martino martino.giacomo@gmail.com\nDate:   Sun Mar 8 17:09:16 2015 +0100\nOutput phantom.js errors to `stderr`.\nUse .contain\n\n:040000 040000 812459bd91a7e73965bcadc7f0519a4c7fb21716 0e4e481eabfb8712f441e5ee469d0ed14ee88446 M  src\n:040000 040000 21939bef4d3e7e6692b4725739e13591dc236480 88ee814adbd3125c385c4ec39232e8e18bedeea5 M  tests\n```\n@mikelambert You were right:\n\nMy guess as to the reason 0.12.1 doesn't throw these errors (this is for you too @XhmikosR) is that 0.21 just silently drops the warnings. This particular change was only included in 0.13: 62145b3\n\nThe first bad commit is 62145b351fa9eedccdd8eeb5b8d5f14db72e4100.\n. @XhmikosR Is this a PhantomJS bug? Perhaps https://github.com/ariya/phantomjs/issues/14422 or https://github.com/ariya/phantomjs/issues/14316?\n. Oops, didn't look at the test case close enough.\n. Can anyone check if this is fixed with uncss 0.15.0? We switched to jsdom in this release.. At the current time I think you have to do:\nignore: [\n\"nav.bottom ul.categories > li.active_mobile a.categories_main:before\",\n\"nav.bottom ul.categories > li.active_mobile a.categories_main:after\"\n]\n. Oops, my bad; should be: \nignore: [\n\"nav.bottom ul.categories > li.active_mobile a.categories_main\"\n]\nUnCSS ignores pseudo-selectors.\n. @mikelambert Can you close this?\n. I'm in favor of a wrapper project.\nmodule.exports=require('uncss').postcssPlugin;\nCould then have it listed in the postcss docs.\n. @mikelambert Any idea when the next version of uncss will be released?\n. @mikelambert I'll get that wrapper together as soon as I can. Should I add any of y'all as collaborators?\nAbout releases, I was just wondering since the postcss plugin hasn't been shipped yet (I'll have to use a GitHub endpoint for the dependencies).\n. @mikelambert In writing the docs, I'm not sure exactly what options the plugin accepts. I would assume:\n- html\n- ignore\n- timeout\nWhat about uncssrc?\nI haven't tried any of them yet.\nUpdate: Based on my experiments, htmlroot and uncssrc don't work. I haven't succeeded in creating a timeout yet. Does ignoreSheets work?\n. OK thanks, just wasn't sure if any other options were available. I agree that ignoreSheets shouldn't be in the docs. \n\nthough it's probably impossible to pass a RegExp in a commandline UI\n\nIf you're referring to postcss-cli, I'm using a json config file for the options, so they would be escaped anyhow.\n. @mikelambert After uncss ships the postcss plugin as part of an official release, how do you think would be the best way to version postcss-uncss in relation to uncss's version number?\n. Here it is:\nhttps://github.com/RyanZim/postcss-uncss\n:tada: :tada: :tada: :tada: :tada: \n. @mikelambert I hadn't thought of a peerDependency, but that sounds good to me. Will look into that further.\n. @mikelambert One question: Is there a possibility that uncss might break backwards-compatibility in a patch version during the pre-v1.0.0 stage?\nWith a peerDependancy, I would probably keep the major (or minor during pre-v1.0.0) version the same as uncss.\n. OK, gotcha.\nI have a policy of bumping the minor when I break backwards-compat in pre-v1.0.0; but that isn't part of the SemVer, just my convention.\n\nTo be honest, the owner of this project is rather MIA\n\n:grinning: Perhaps he could add one of the collaborators here as an owner/collaborator on npm?\n. @mikelambert I added docs for usage as a postcss plugin to the README in #240.\n. @mikelambert If there are no objections, I think I'll start submitting postcss-uncss to the various lists of postcss plugins.\n. :tada: Can you make the changelog entry at https://github.com/giakki/uncss/releases?\n. @mikelambert I've got postcss-uncss updated in a branch, loading uncss 0.14.0 as a peerDependency.\nCan you review it? Here is the link to the commit: https://github.com/RyanZim/postcss-uncss/commit/8331a567790f7a1289ac8fb0e60ec1e347d1d37f.\nBTW, peerDependencies and npm link don't play well together, so it's a bit hard to test locally. You have to install your local copy of postcss-uncss by file path instead of via npm link.\n. Done and published: https://github.com/RyanZim/postcss-uncss/releases/latest. :tada: \n. I know this is the normal behavior, this is a feature request for offering \"smarter\" matching behind a flag.\nI think this would be convenient. Writing a Regex that will match every rule, and no others, is not fun. I'd be willing to do a PR.\n. Thanks for the suggestion @mikelambert. The only problem with that Regex is that is will not match .class.another. I modified it to /.*\\.class([\\.].*|\\b)/ to handle this case. Thanks to you all for your help; I got things working the way I wanted them. Closing.\n. @lorvent Have you tried deleting node_modules, running npm cache clean, followed by npm i?\n. I'm not sure what you're asking. If you pass a single html file to UnCSS, you will get only the CSS required for each page.\n. I don't know of any way to do that at the present. I'm curious what your use-case for this is (as this adds an extra http request).\n. I agree that this should be a separate tool. Someone should write a postcss plugin. :grinning: \n. OK @mikelambert, added the example, rebased, and force-pushed. \n. BTW, what's the problem with the Windows build?\n. @XhmikosR exactly what is the problem(s) with Windows?\n. OK, just wasn't sure. Does anyone have a windows box to test on?\n. https://github.com/ariya/phantomjs/issues/14095 perhaps?\n. > I wonder if it has to do with phantomjs/phantomjs-prebuilt conflict.\nIs this due to the difference of version numbers required by uncss and chai-resemble?\nIf so, did you try removing chai-resemble as a devDep, deleting node-modules, npm i, commenting out the tests that rely on chai-resemble, and seeing if the rest of the tests pass?\n. Sounds good to me.\n. I haven't gotten a chance to try it; you might want to add a comment stating that require('webpage') is requiring a part of PhantomJS, not https://www.npmjs.com/package/webpage.\n. @XhmikosR I advise you to just go ahead and merge this when you're ready.\n. Duplicate of #69. Feel free to contribute a PR.\nAs far as a workaround, you could copy your inline CSS to a separate file and use the commandline -s option. https://github.com/giakki/uncss#from-the-command-line Take the output and paste it back into the html file.\nPlease close this.\nCC: @mikelambert \n. The tests pass locally, coveralls had spotty uptime when travis was running so the coveralls task failed.\n. @XhmikosR Perhaps you could trigger a rerun of the Travis build?\n. @XhmikosR Not sure what this error message means:\n```\nRunning \"mochacov:coveralls\" (mochacov) task\nWarning: Unable to fetch base options: Command failed: git cat-file -p b150c401ef56af463882ac719d8b77bfa0eea802\nfatal: Not a valid object name b150c401ef56af463882ac719d8b77bfa0eea802\nUse --force to continue.\nAborted due to warnings.\n``\n. @mikelambert Wow, that was fast! I'd still like to add tests, I just don't quite understand your setup.\n. I think you have a syntax error inapp.css. Perhaps a missing colon (:`)?\nTry running your complete css through w3's css validator: https://jigsaw.w3.org/css-validator/#validate_by_input.\nIf it turns out to be a syntax error, please close this.\n. I knew gulp-uncss used css-parse, but I wasn't aware that it didn't handle nested selectors.\nAs far as changing the dependency, @nundel could also use https://github.com/postcss/gulp-postcss & https://github.com/RyanZim/postcss-uncss to avoid manually changing gulp-uncss' dependency.\n@mikelambert We really should push a release; have you tried emailing @giakki?\n. @nundel It looks like there are a couple of different things going on here.\n\n\nReferenceError: Can't find variable: insertionQ\n\nI'm not sure where that's coming from. Do you have/use a variable named insertionQ in your gulpfile or JS?\n\n\nSECURITY_ERR: DOM Exception 18: An attempt was made to break through the security policy of the user agent.\n\nThis seems to be some sort of a CORS error. Are you using <canvas> on your page? See http://timdietrich.me/blog/dom-exception-18-security-error/. Try opening index.html in a webkit-based browser and see if it reports an error in the console.\n\n\nTypeError: 'undefined' is not a function (evaluating '$('.heroTrustIconsList').slick')\n\nIt seems you've encountered the mysterious bug https://github.com/giakki/uncss/issues/220. It has also been reported at #232. @XhmikosR said there:\n\n...In my case moving all JS to external files fixed the errors.\n\nIt is believed that this error does not affect the css output; of course, we can't be 100% sure.\n\nRegarding bootstrap:\n\nI'm getting some not bad result, though some styles I need are gone.\n\nYou can try using https://github.com/giakki/uncss/wiki/Using-uncss-with-Bootstrap. As noted there, this will make your css a little bigger, but should get it working (unless you are adding content with JS).\n. @nundel v0.14.0 has been released: https://github.com/giakki/uncss/releases/tag/0.14.0.\nPlease close this. Thanks!\n. @nundel gulp-uncss has not yet updated to the latest version of uncss.\n. > gulp-uncss uses: \"uncss\": \"^0.13.0\", which should pull in the latest version of uncss on install.\n@mikelambert Not during pre-v1.0.0. https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\n. Perhaps it would be best to try to make a reduced test case (remove everything that isn't relevant to the issue). If you don't uncover the issue in the process, you could post it as a repo on GH so that we can debug using your exact code.\n. @nundel How's that test case working?\n. @mikelambert It looks like this has been resolved or abandoned, can you close?\n. Only (+0.4%), but every bit helps! :smiley_cat: \n. LGTM\n. @mikelambert Perhaps https://github.com/giakki/uncss/blob/master/src/phantom.js#L17 has something to do with this. I haven't tested anything, just throwing out ideas. @saalmaan mentioned:\n\nPhantomjs instance took a lot more RAM then previous version up to 5GB\n\nPerhaps we need to use a new PhantomJS instance when proccessing large numbers of URLs.\nX-Ref: https://github.com/giakki/uncss/issues/171\n. Seems to me that PhantomJS should handle some of this, not us. Of course, workarounds are a necessary evil in the FOSS world.\nI did a little poking around in the PhantomJS issue tracker and found this issue: https://github.com/ariya/phantomjs/issues/13581. One of the collaborators said this:\n\nI'm sorry we took so long to get back to you about this.\nWith regret, I don't know if we're going to be able to do anything about this. It's probably some kind of memory leak or memory corruption in the interaction between Qt and Webkit, and we don't have the manpower to debug it. (I have debugged things like this before - it can take days of investigation.)\nPersonally, I would recommend quitting and restarting the PhantomJS process after every page load. I use PhantomJS as a scraper that way and it works well.\nIf you have time to debug this and work up a patch, though, we would be glad to take it.\n\nThat was Oct 14, 2015; and there has been no maintainer action on the issue since then. :disappointed: \nIt seems to me that restarting PhantomJS for each page would have a pretty big performance hit. \nPerhaps we should add an option to restart PhantomJS every n pages.\nCC: @mikelambert @XhmikosR \n. @saalmaan Have you figured out a workaround?\n. I don't have time to work on this right now.\nA very ugly workaround is to split the array into ~100 item chunks and run each one seperately (output to different files), then concat the resulting files and run that file through cssnano (or another minifier) to merge the duplicate rules.\n@mikelambert Thoughts on adding\n\nan option to restart PhantomJS every n pages.\n\n???\n. > I am more than happy to offer any help towards testing and debugging.\n@saalmaan One thing that could be done is to verify that this is a PhantomJS problem.\nBuild a test script using https://github.com/peerigon/phridge. Only call phridge.spawn() once. Attempt to load 200+ pages and see if your script crashes.\n. @saalmaan have you got a chance to try that yet?\n. @saalmaan A list of 500+ urls would be nice.\n@mikelambert Perhaps this will shed some lignt: http://stackoverflow.com/questions/32430426/phantomjs-2-0-0-select-invalid-argument-error. Take note of the comment below the accepted answer.\n. @saalmaan Do you have inline JS on any of your pages? If so, that is a known issue, see #232. In most cases, these errors will not affect your css unless you are dynamically adding classes/identifiers onload in your inline JS.\n. @mikelambert Can we close this?. LGTM\n. #256 has been merged. Is this a satisfactory resolution @atul-bajpai?\n. Looks like tests for node 4 failed due to coveralls (again). Don't worry about it.\n. Confirmed the issue.\n\nCould you make a timed-out script not stop the parsing?\n\nI'm not sure. Ping @XhmikosR @mikelambert.\nBTW, is there a way to operate without any kind of timeout? I never studied that much since my pages aren't JS-heavy and I don't use CDN links.\n@maskedcoder On another point: is there a specific reason for having the script in the head?\n. @maskedcoder On looking into this further, I don't think this is possible. The code that controls this is: https://github.com/giakki/uncss/blob/master/src/phantom.js#L91-L107.\n. > I guess for this to be resolved, PhantomJS would have to make a change to their API.\nYeah, given the number of issues open there, I don't anticipate such a change getting done anytime soon.\nSince this is a PhantomJS issue, this should be closed as out-of-scope.\n. @Herst This is out of scope IMO, use cssnano or similar.\nCC: @mikelambert \n. @mikelambert @XhmikosR Should this be closed or is this something you would consider adding?\n. @Herst That is due to something else in your toolchain, not uncss. Add cssnano to your toolchain to remove the font-faces.\n. @mikelambert Any reason to keep this open?\n. @mikelambert ping?. Not flatly opposed to this, but curious what the concrete use-case for this is.\n. BTW, I'd be in favor of adding https://uncss-online.com/ to the README here.\n. @chaihongjun Hard telling. Without a reduced test case, we really can't help you.\nCC: @mikelambert \n. @chaihongjun Good to hear! Please close this. Thanks!\n. @rajsek how are you running the code above?\n. @rajsek Has this been resolved? If so, please close.\n. @mikelambert This looks abandoned, can you close?. Not sure what the issue is here, I don't use grunt. @addyosmani @XhmikosR?\n. @thomas2411 @romanlelek It would probably be best to try opening an issue at https://github.com/addyosmani/grunt-uncss/issues.\n. @crico That isn't possible, uncss actually runs your files as html in a headless web browser. Some types of template files might work if the template is valid html, but raw javascript will not work.\nCurrently, the best solution for including error styles is to use the ignore option.\nNote that uncss will parse classes/selectors added by the javascript during the page load (when you run uncss on the html file), but not those dynamically added by user interaction.\nIf this answers your question, please close. Thanks!\n. @baomastr Globbing only works on local files, not on remote URLs. If you can't test against local files, you will have to pass each URL individually to uncss. If your site is large and you have a sitemap, it may be worth writing a script to get the list of URLs from the sitemap.\nIf this answers your question, please close this. Thanks!\n. @CaptainQuirk Not entirely sure what you're asking.\nIf you have multiple pages that use the same CSS, and you would like to keep it that way, you can pass multiple HTML files to one run of uncss. This will produce the CSS that is used by any of the pages, but with totally unused styles removed.. @vseventer Haven't tried it, but LGTM on the surface. Thanks for doing this; I just don't get time.. @vseventer I just tried out your branch, it works great! I did a little cleanup and submitted a PR to your fork https://github.com/vseventer/uncss/pull/1.\nI never had any actual issues with PhantomJS, other than the fact that it was slow, so I can't say if it actually fixes all the PhantomJS issues. @lorvent Have you tried this yet?\n@giakki @XhmikosR @mikelambert I'm very much in favor of merging @vseventer's fork in here; thoughts? @vseventer Looking forward to a PR here.. @vseventer Resemble tests work fine for me, not sure why they don't work for you.\nWasn't sure why you edited that test, thanks for explaining. In either case, I think we should release this as a breaking change since there is bound to be a few edge cases that are different from PhantomJS. The next release is planned to be breaking anyhow, due to dropping support for earlier versions of Node.. @vseventer Regarding resemble tests not working for you, have you tried running rm -rf node_modules && npm i on your jsdom branch?\nWhat's your OS & Node version?\nI'm running Lubuntu (an Ubuntu Linux derivative) and using Node v7.. @vseventer I don't have write access here, but please do open a PR for this. Thanks!. @mikelambert I appreciate your input on this.\n\nHowever, I am worried about it not actually being a 'real browser' from what I can tell (unlike PhantomJS's headless webkit), and what compatibility issues we might run into as a result\n\nI'm a bit worried about that too; from what I understand, jsdom is trying hard to act like a real browser; if any issues are encountered, I think jsdom would try to fix them. IIRC, PhantomJS has some edge cases where it doesn't quite act like a normal browser.\n\nSo upping the major version number obviously makes sense.\n\n:+1: \n\n\nBut I'd also like to see a few projects try this out and report success (or at least give us an idea of what kind of migration guide or \"known gotchas\" we need to list), before I commit to merging it upstream.\n\nNot a bad idea; FYI, my pages aren't js-heavy and I don't use any weird feature-detection stuff, so my usage of jsdom probably won't find any edge cases.\nI only wish that there was a good way to install the jsdom branch via npm. Perhaps you could merge the changes onto a jsdom branch in the main repo and publish a pre-release to npm (keeping the latest dist-tag set to the current version)? That way, we could do npm install -D uncss@1.0.0-beta.1 (or similar) to try the new version.\nI assume you saw @vseventer's comment about slow global lookups in jsdom. That would be one known gotcha. I would venture to suggest that a fair amount of uncss users wrap their JS in an IIFE or use a module bundler; in which case this gotcha doesn't \"get'em.\". @mikelambert Yeah, that's what I've been doing, however, if @vseventer deletes the branch or the fork after changes are merged here, won't npm install break for those projects?. @kapouer You'll need to feed uncss with a list of URLs. Let me know how it goes!. @sparanoid Thanks for the benchmark; I knew it would be fast, but I never tested just how fast.\n\nThe only downside to me is some CSS syntax cannot be parsed like @supports.\n\nI wasn't aware of that. Mind opening a separate issue for that?. @mikelambert @vseventer Test package: https://www.npmjs.com/package/uncss-jsdom. Source code: https://github.com/RyanZim/uncss/tree/uncss-jsdom.\n\nIf anyone wants/needs publish rights to this package, just ping me.. > So, it seems that jsdom branch can be used relatively safe on production for now?\nI believe so!. @Ferym26 You are using gulp-uncss-sp; try using https://github.com/ben-eb/gulp-uncss and see if that fixes your problem. If so, please close.\n. I'll try to take a look at this when I get time.\n. @Ferym26 Found the problem!\nThe script http://cdn3.adcombo.org/content/!common_files/js/jquery.min.js takes too long to load and uncss times out. You will need to set a timeout, like this:\n.pipe(uncss({\n  html: ['html/index.html'],\n  timeout: 200\n}))\n200 was long enough for me, it may vary depending on the machine.\n. This looks like a duplicate of https://github.com/giakki/uncss/issues/166. If that works for you, please close this. Thanks!\n. Try opening the pages in a normal browser and check the developer console. If there are no errors there, this is probably a duplicate of https://github.com/giakki/uncss/issues/232 or https://github.com/giakki/uncss/issues/220.\nSometimes this error doesn't affect the css output. Check if your pages are styled correctly with the filtered css. In that case, you can ignore the \"errors\".\nAlso, if you have inline JS code, sometimes moving it to an external file helps.\nI think this is a PhantomJS issue; #265 might solve this.\n. @supersonicBlonde Any progress on this? Can this be closed?. @mikelambert Can you close?. Try this:\nignore: [\n        /\\.comment-form input\\[type=email\\]/,\n]\nIf this works for you, please close this issue. Thanks!\n. https://github.com/giakki/uncss/wiki/Using-uncss-with-Bootstrap. Glad that helped, sorry for the short reply, I was in a hurry.. @crisdany6 You can't skip errors, a syntax error is a syntax error, and that will stop CSS parsing. You will need to fix your CSS syntax error anyhow.. @mikelambert Can you close?. @binarytrance This is pretty well a dupe of https://github.com/giakki/uncss/issues/257.\nLoading typekit (<script src=\"https://use.typekit.net/svf8acc.js\"></script>) either takes too long, or PhantomJS can't load it. It then gives up and processes your page as if it contained only the html up until your script tag. That html doesn't contain any of your content, unfortunately.\nIn short, uncss just doesn't play well with slow scripts in the head, especially typekit.\nPlease close this issue. Thanks!. @ix-xerri You don't need to use new RegExp, just do ignore: [/.*me.*/]. If you have your problem solved, please close this issue.. Any class that is dynamically added by JS after the page load (like when a user clicks a button) needs to be manually ignored.. @ix-xerri @mikelambert Can one of you close this?. @vseventer Can you force-push to re-trigger the travis build?. @giakki @XhmikosR @mikelambert Thoughts on this?. Current status of this: https://github.com/giakki/uncss/issues/265#issuecomment-270266120. You can test this branch with this package: https://www.npmjs.com/package/uncss-jsdom.. @davidtheclark The issue is the leading / in the asset path. Since assets are loaded via file://, a leading / bases the path off of the OS root directory.\nThe PhantomJS uncss had couldn't load these assets either, however, it failed silently, jsdom correctly reports the error.\nYou need to use htmlroot. > If the behavior is not changed, then a very common and widespread practice will break uncss, right?\nYes and No. PhantomJS would quietly output without processing the JS; jsdom fails hard (which is better IMO). Either way, this should be addressed (see https://github.com/giakki/uncss/issues/287#issuecomment-281682625).\nTo be clear, switching to jsdom was always intended to be a breaking change.. @ArmorDarks \n\nWIP PR to fix JS issue: https://github.com/vseventer/uncss/pull/2.\nHmm... needs investigation. Looks like a bug in jsdom. Edit: jsdom issue filed: https://github.com/tmpvar/jsdom/issues/1750. @davidtheclark @vseventer Looks like we still screwed absolute path handling; see @ArmorDarks comment above.\n\n\n@ArmorDarks As a temporary workaround, you can put 'svg:not(:root)' in the ignore list. Still, this should be fixed.. > Ouch, I supposed to configure htmlroot explicitly somewhere? Where should it be done? I've completely missed it.\nIt depends on your environment; the same place you'd set ignore.\n\nI'm still confused, why it's able to read CSS without htmlroot, but can't do same thing for JS?\n\nDo you use absolute paths for your CSS?. > so uncss always receives single large CSS file\nThe htmlroot option has no impact unless you're only passing your HTML to uncss. If you're passing the css file name directly to uncss, it doesn't use htmlroot, except for JS.\n\nYes, for images, like url(/assets/images/sprites/sprite.png).\n\nuncss doesn't load them anyhow, so it doesn't matter.\n\nSo, now we need to set htmlroot to full path, like J:/Work/TestProject/github/build/?\n\nCorrect. > If something somewhere needs full path, it always can append cwd internally.\nSorry, my bad; htmlroot can be relative to cwd.. @mikelambert That svg root problem is actually a hack in normalize css for an old version of IE (I think IE9?) You'd never use a selector like that in normal real life. ignore: ['svg:not(:root)'] might do the job.\nWindows does need fixed, but I'm stranded on a Linux box, so can't help there.. > Phantomjs loading a file from local disk, would have the same issue, right? (It possibly was too-silent about errors, and maybe the file just went missing when run from PhantomJS)\nI think that's what was happening; haven't verified though.. @mikelambert What else needs done here? (other than fixing merge conflicts). @vseventer Can you fix merge conflicts? (or should someone else do it). Does your HTML contain any external <script> tags in the head? If so, that could be the problem. See https://github.com/giakki/uncss/issues/257. Try setting the timeout option to a crazy high value, and see if that works.\nAnother thing, open the page in your browser and make sure there are no errors in the browser console (broken HTML) that could be causing problems.. If you're feeling adventurous, you could also try the experimental package: https://www.npmjs.com/package/uncss-jsdom. This package uses jsdom instead of PhantomJS and may solve some of these issues.. @gkatsanos Try timeout: 90000, or try the uncss-jsdom package. The jsdom package might at least give you an error message.. @gkatsanos Yeah, didn't think about the fact that you were using gulp-uncss. Glad to hear jsdom works for you.. All I can say is PhantomJS is: weird.\nSee https://github.com/giakki/uncss/issues/250, https://github.com/giakki/uncss/issues/220, & https://github.com/giakki/uncss/issues/232 for more weirdness.\nGuess there's not much more we can do until @mikelambert is ready to merge jsdom; should we close this?. @rowthan Either use the ignore option, or add an uncss:ignore comment to your css:\ncss\n/* uncss:ignore */\n.a {\n    /* ... */\n}\nPlease close this. Thanks!. @rowthan That is out of scope for the uncss project. It does recognize classes added by the JS on page load, but not the ones added by user interaction. https://github.com/purifycss/purifycss can process JS, but it doesn't catch all the unused classes.. @depiction Double Slash comments are not valid CSS. Valid CSS requires /* ... */ style comments.\nPlease close this issue. Thanks!. @depiction Supporting them would require adding a custom parser as a dependency which would add install size to an already large package. I'm not in favor of it, but I'll leave the final decision to @mikelambert or @XhmikosR.. I have a patch for this ready, will probably open PR against develop after https://github.com/giakki/uncss/pull/335.. Will be fixed in the upcoming release.. @marklegault Do the link tags in your HTML have absolute paths?\nExample:\n<link rel=\"stylesheet\" href=\"/assets/css/style.css\" />\n\n(Note the leading slash in the URL). @marklegault So is this issue fixed?. OK, thanks @XhmikosR. Closing; will reopen if I hear otherwise.. > uncss allows /css/main.css, so there is no reason why /js/main.js shouldn't be supported also.\nI agree with @vseventer.\nI don't know if/how this is possible via PhantomJS, however, in jsdom, this could be done via \n\nconfig.resourceLoader: a function that intercepts subresource requests and allows you to re-route them, modify, or outright replace them with your own content.\n\nI will submit a patch to the jsdom branch when I get a chance (unless someone gets there before me). When it is merged to the jsdom branch, I will publish a new version of uncss-jsdom.. Sorry so long; I finally got the patch released as uncss-jsdom v2.0.0. Just to clarify, are we talking about protocol-relative URLs or root-relative URLs?. @mikelambert This is an internal uncss error coming from https://github.com/giakki/uncss/blob/master/src/lib.js#L129.\nThe postcss version would be the same as what uncss is using. postcss does have a walkRules function. It seems somehow, uncss is passing that function an object other than a postcss root object.. @XhmikosR is it possible to reproduce this issue without using grunt? If so, I'd be willing to investigate if you could make a test case repo or gist.. Glad you found it. Them bugs can be mean. Can we close this now?. @G0dwin I don't have any experience with Ruby, but I'd be glad to try and answer any specific questions you may have.\nI don't know of any docs dedicated to the subject.. SGTM, do you mind closing this issue? Thanks!. > The travis-ci failure looks to be unrelated to my changes?\nYeah, it is. Try running git commit --amend to update the timestamp in your commit, then force-push to re-trigger the build.. You need to pass uncss the URL to the actual site (i.e. the HTML), not just the CSS.\nExample:\nuncss http://example.com/ > test123.css\n\nPlease close this issue. Thanks!. @shgga2016 Please copy the complete error, including the stack trace, and post it here.. Hmm... Post the relevant part of your gulpfile.. I'm no expert on gulp; @ben-eb do you have any ideas here?\n@shgga2016 It would be helpful if you could make a reduced test case repo that contains the minimal amount of code to reproduce the bug. You can then push the repo to GitHub, and post the link here. We can clone the repo and attempt to reproduce/debug locally. Thanks!. @ben-eb Yeah, I suspected PhantomJS myself. Can't wait for the switch to jsdom.. Going to assume this is fixed.. @joacim-boive It can parse anything that is valid HTML. JSP isn't valid HTML, so it can't parse that.\nHowever, uncss can load URLs as well as files, so if start your dev server on localhost, you can run uncss http://localhost/ > index.css to get the CSS for the homepage...you get the idea.\nPlease close this issue. Thanks!. @mikelambert Can you close?. @jackPanyj For SPAs, you are probably better off using https://github.com/purifycss/purifycss. It doesn't remove quite all the unused selectors, but it does remove some.\nPlease close this issue. Thanks!. @extensionsapp You need to use the ignore option. Example config:\njs\n{\n  ignore: ['open']\n}\nAlternately, you can add a comment before specific selectors:\n```css\n/ uncss:ignore /\n.open {\n    / this rule will be ignored /\n}\n.unused {\n    / this will NOT be ignored /\n}\n```\nPlease close this issue. Thanks!. Try:\nuncss -i /\\.open/ http://localhost:33333/en/ > style2.css\n\nThe string has to exactly match the entire selector. Passing a regex will allow it to match selectors that contain .open.. Not sure. Try -i /\\.open/ /\\.active/ or -i /\\.open/ -i /\\.active/. If that doesn't work, use an uncssrc file (see docs for usage).. @inspiraller If classes/elements are added with JS, you need to specify the relevant CSS selectors in the ignore option.\nPlease close this issue. Thanks!. > The css will look like its unused if the html is not in the page yet. How does your plugin detect that?\n@inspiraller That's what I'm saying; uncss can't detect that, so you would need to manually ignore those selectors.. Oh, now I understand the question. Sorry about that! :disappointed: . @inspiraller When elements are added after user interaction, you need to use an ignore list; uncss only detects elements added during page load.. @inspiraller @mikelambert Can one of you please close this?. @oleersoy This has been somewhat covered in https://github.com/giakki/uncss/issues/258. \nThe conclusion was that uncss shouldn't mess with font-face declarations. Even if there are no CSS rules that use the font, the font is still usable, because it can be referenced from a style property directly. https://github.com/giakki/uncss/issues/258#issuecomment-250952792\nFor your use-case, you could probably run uncss as a postcss plugin, using https://github.com/ben-eb/postcss-discard-unused later in the plugin chain.\nHope this explains things clearly for you.. Not sure what would be the best approach here.\nOne way would be to use uncss as a postcss plugin https://github.com/giakki/uncss#as-a-postcss-plugin and then write a custom postcss plugin to strip unneeded google font imports.\nAnother approach would be to consider using something like https://github.com/jonathantneal/postcss-font-magician. Just something to consider.. > But what if index.html or any other html or javascript file does not reference myFirstFont. It seems like it would be safe for uncss to remove the corresponding @font-face rule in this case or am I missing something?\nIn that case, it would be safe for uncss to remove the @font-face. However, uncss doesn't check style attributes. Also, it can't check what elements (potentially containing style attributes) the JS adds due to user interaction. In short, it just requires too much overhead for uncss to try and process this in a safe way.\nIf this clears things up for you, please close this issue.. > Uncss could be amended to check style attributes, and I would have no issues with that, as it's all very similar conceptually/procedurally to what is done with class attributes.\nYeah, it could; but what's the point? In this user's case, they were actually asking about stripping Google font @import statements. To me, it seems like a lot of work for minimal benefit. If someone really needs style attributes checked, we can bikeshed that then IMHO.. I've been thinking along similar lines, just never got time to open an issue/PR. I can try to do a PR for this, but don't know when I'll get time (some other pressing things ATM).. @srse Just curious, why do you want/need:\n<p class=\"example_not_recognised{{ handlebars_expression }}\"></p>\n\nYour handlebars expression result must start with a space to be recognized by the browser anyhow. Why not put a space between the class and the expression?. Closing as per @mikelambert's comment.. Please don't post +1 comments, use GH reactions instead: https://help.github.com/articles/about-discussions-in-issues-and-pull-requests/#reacting-to-ideas-in-issues-and-pull-requests. BTW, PR welcome to add this feature.. Thanks, I forgot about that.. @jhpratt This package relies on arch-specific PhantomJS binaries, contained in phantomjs-prebuilt. Coping code won't work since you need the correct binary for your platform.\nThere is an experimental fork of this project that uses jsdom instead of PhantomJS. This fork doesn't need binaries, so you might want to try it by installing uncss-jsdom instead of uncss. PR is here: https://github.com/giakki/uncss/pull/280. @mikelambert Can we close?. Should have tests, but code LGTM. Updated PR: https://github.com/giakki/uncss/pull/328. The latest version of PhantomJS does not support ES2015 Set.\nYou can try the experimental branch of uncss that uses jsdom instead of PhantomJS by installing uncss-jsdom instead. See https://github.com/giakki/uncss/pull/280. @mikelambert can you close?. Up for me. @mikelambert I'm all for it! :shipit:\nIf there's any patch-fixing that needs done as a result of this, I'll try to help as I'm able.. @mikelambert If you're using uncss as a postcss plugin, using plugins with differing major versions of postcss can cause issues.. Dupe of https://github.com/giakki/uncss/issues/165; see there for solution.. Use the ignore option:\n\nignore (Array): provide a list of selectors that should not be removed by UnCSS. For example, styles added by user interaction with the page (hover, click), since those are not detectable by UnCSS yet. Both literal names and regex patterns are recognized.. Closing for lack of action.. A major release is planned to include https://github.com/giakki/uncss/pull/307 & https://github.com/giakki/uncss/pull/280. Don't know how soon that'll be.\n\n@mikelambert Do you want to patch release before that?. @XhmikosR Yep, safe to close IMO.. Relevant jsdom issue for localstorage: https://github.com/tmpvar/jsdom/issues/1137\n\njsdom works fine without canvas-prebuilt installed; you only get problems when you try to use the canvas JS API. (without canvas-prebuilt, <canvas> is treated like a <div>)\nI question the wisdom of including canvas-prebuilt by default. Wouldn't it be better to just make a note in the readme to install canvas-prebuilt as a peer if your JS uses the canvas API?\nAnother option, not sure how good; would it be possible to simply add a mock canvas api that just calls noop functions, since the actual canvas drawing doesn't affect css AFAIK?. @bbarr @XhmikosR Is this still needed?. @gajus Why? What advantages does it have over jsdom?. // urls don't work because we're loading from file://. Chrome headless wouldn't fix this.. Thanks! Anything is better than nothing.. @mikelambert & I now have commit access to chai-resemble, who wants to update it?. @XhmikosR jsdom allows you to programmatically work with HTML & the DOM. jsdom can't actually perform a page render, though. The point of chai-resemble is to ensure that the page looks the same visually, so that requires an actual browser render.\nIf somebody wants to upgrade chai-resemble, I'm fine with it; chai-resemble is useful regardless of uncss using it or not. However, I'm wondering if uncss really needs these tests. Can't we just manually check for visual regressions and enforce that the CSS output stays the same?. I know it's a bit ugly, but I'm just gonna close this for the time being. Happy to revisit if someone wants to update chai-resemble.. I'd be willing to cut the grunt cruft and just roll a simple npm scripts solution. Thoughts?. @XhmikosR \n\nWe need it\nLeave --reporter html in place, you want it\nSet include/exclude in the package.json https://github.com/istanbuljs/nyc#configuring-nyc\n\nI'll test this locally tonight to check a few things. @XhmikosR I'll pull this down this evening and take a look.. > We might not want to run coverage every time we run npm test. What's the shortest/best way to do this without duplicating the scripts?\nThere's no clean way to handle this without duplication. Honestly, just get over it and run it every time. It's not that much of a perf difference.. Please post a minimal, reduced test case that includes only the code and dependencies needed to replicate this problem.. I'll be very frank with you. I do not have the time or resources to read all the code in your repositories to check if there's anything malicious; and I cannot take the risk of running untrusted code from anyone's repo without reviewing it first. Therefore, I cannot debug your issue.. Running uncss against that file just hangs uncss. I suspect the sheer size is just pushing the limits of uncss/postcss/jsdom/node as well.. You can\u2019t set a directory in the package.json. You can do @import \u201c module/path/relative/to/module/root.css\u201d however. . Yep, that's 100% correct.. No, I don't think so; the main field is a Node.js standard, and the style field is handled similarly by a de-facto standard. I don't want to introduce anything that's postcss-import specific.. Travis probably times out because uncss doesn't give any output while it's running, see https://docs.travis-ci.com/user/common-build-problems/#Build-times-out-because-no-output-was-received\nAlso, Travis builds only have 3GB of memory: https://docs.travis-ci.com/user/common-build-problems/#My-build-script-is-killed-without-any-error. There's no way to ignore it, other than commenting it out AFAIK. Personally, I'd just switch to https://; // isn't really needed anymore.. @armpogart We're using jsdom under the hood, so I'm not sure how this would be possible.. > Isn't there any way to ignore specific HTML from being parsed?\n<!-- ignore me -->\nIIRC, uncss continues despite this error, the script just isn't loaded. PhantomJS had the same issue, it just was too opaque to report the error. You're going to have the exact same problem if you open a local html file with a normal web browser. One possible workaround is to run a small http server, and run uncss on localhost.. Thinking a bit more about this, perhaps we could have a script blacklist implemented in the resource loader.. We're already using a custom resource loader; we just need to add this feature to our custom loader.. jsdom doesn't support window.matchMedia yet, unfortunately.. @indeyets Any progress on this?. Does this fix canvas issues?. OK, windows is passing now. I guess I'm just wondering what this is supposed to be fixing. Or is it just a general dep upgrade?. LGTM if we're OK with dropping Node 4 (I am). Not a Node 4 user either, but this definitely needs to be released as semver-major. If we're going to do this, we should remove Bluebird and upgrade our code to the ES6 supported by Node 6+ as well. \nThoughts everyone?. @mikelambert I agree. I changed the base branch to develop, and merged it. Whoever/whenever we get a chance, we can open PRs against that branch for further development for the next major release.. Working on ES6 syntax upgrades. I'm not upgrading to all ES6 syntax, only the parts supported by Node v4+. I've done this with all of my packages that don't support Node 4 with zero issues. We just should make a clear note in the README that we only support Node 4+, and tell users to downgrade to 0.15.0 if they need Node 4 support.. Agree :100: with @mikelambert. \n\nif you want to make an uncss flag that causes it to \"ignore errors and potentially generate malformed pages at your own peril\" escape hatch, then that would be fine with me too.\n\nI think this is a good idea.. I'm not clear on what problems this PR attempts to fix?. This is an interesting idea/approach, however, it'd be fairly complex to implement.\nI think it'd be better if we implemented https://github.com/giakki/uncss/issues/131 instead. That way, you could inject document.html.classList.add('csscalc', 'no-csscalc'); into the page, resolving this issue by having both classes set before uncss runs.. @mikelambert The issue here is that modernizer either adds csscalc or no-csscalc depending on whether browsers support CSS calc(). That way, you can write:\ncss\n.csscalc .foo {\n  width: calc(50% - 2rem);\n}\n.no-csscalc .foo {\n  width: 49%;\n}\nUncss is going to strip some of those selectors since they are unused, however, @mikemellor11 wants to preserve both of those rules. For that reason, we should have a way to add them to html so they both are used when uncss runs.. > Then myClass2 will remain unstripped even though it doesn't appear in the html.\nIncorrect. Here's the output from running that example:\n```css\n.no-csscalc .myClass1{\n    width: 100%;\n}\n.csscalc .myClass1{\n    width: calc(100% - 10px);\n}\n```\nYou can quickly check this yourself at https://uncss-online.com/. Closing as https://github.com/giakki/uncss/issues/131 would be the best solution.. @mikelambert Can you review?. @XhmikosR Thoughts on @mikelambert's comment?. @XhmikosR How is this going to work/look on windows?. > Any way, I'm not the author of this patch, I just resolved conflicts and stuff.\nYeah sorry, forgot about that. I guess I'll leave this to @mikelambert. At the end of the day, IDC as long as it doesn't create regressions.. > Not sure if anyone reading this, knows if there are any /:.*/ things that we wouldn't want to trim off? \n@mikelambert There are a few: :not(), :nth-child(), etc. Also, :root would match your regex as well.. @DamonHD I ran some quick tests and I'm not seeing the behavior you described. Can you post a minimal reproducible test case?. If each of your files contain a trailing newline, uncss will preserve that.. I'm still unable to reproduce; I'll need you to make a reduced test case repo for me to be able to investigate.. I'd prefer if you pushed the files to a github repository.. Yep. OK, now I see what you mean. I assumed you were saying uncss inserts blank lines between stylesheets; it doesn't do that, it just puts each sheet on a new line. I'd be open to changing this to not add the newline when -n is passed, though I don't think uncss should ever trim existing trailing whitespace from stylesheets. \nThis would be a breaking change, but we're currently working on a semver-major release anyhow, so I'll try to get it in.. For my own reference, we need to change https://github.com/giakki/uncss/blob/master/src/uncss.js#L143 to fix this.. We're not reconstituting the CSS; we're removing parts of it that aren't used by the HTML.\nNot inserting a blank newline; yes, I can see doing that. Removing newlines: No. That's what CSS minifiers are for; run a minifier after uncss.. I guess I'll call this PR welcome, since I don't have the time to do this myself.. @pajasevi is the maintainer of that. Closing this as a dupe of https://github.com/pajasevi/UnCSS-Online/issues/9.. I'm all for the migration. I assume GH transfers all the issues and pull requests as part of the migration?\nOne checklist item for myself:\n\n[x] Update https://github.com/RyanZim/postcss-uncss to link to the transfered repo.\n\nAlong with this, I'd be willing to consider transferring postcss-uncss to the uncss organization, if everyone else is OK with it.\nI'm willing to try and help out with the migration. Perhaps we should add a note to the README stating that we're in the process of migrating to an organization, so people aren't worried if badges/builds are broken, etc?. > We could also explore inviting the https://github.com/ben-eb/gulp-uncss and https://github.com/addyosmani/grunt-uncss projects to the combined 'uncss' repository. @ben-eb and @addyosmani , would you be interested in this?\ngulp-uncss is deprecated, so there's no point migrating that IMO, but :+1: if grunt-uncss wants to migrate (not saying I'll be able to help out there, though).. @giakki Anytime you want to do the migration, go ahead IMO.. Transfered postcss-uncss in: https://github.com/uncss/postcss-uncss\n@giakki could you give me admin access to that repo? The description is outdated, and I can't update it.. getbootstrap.com changed their site around; that page is now a redirect to https://getbootstrap.com/docs/3.3/examples/jumbotron/. uncss doesn't follow the redirect, so it doesn't work correctly. We need to update the docs to use an up-to date link; care to submit a PR?. Tests fail on Windows, investigating.. This is strange; I added a console.log for debugging, and the build passed: https://github.com/giakki/uncss/commits/appveyor\nI force-pushed here, and it failed except for the Node 6 job on the PR build. Can somebody on Windows pull this in and test locally?. Fixed @mikelambert's suggestion, and the CI passed. Blame appveyor weirdness, I guess.. Any objections to merging this?. Fixed in https://github.com/giakki/uncss/commit/4cb60b884b2693d0f9b222a0fbe772e4a8d5995e.. What\u2019s your os? Node.js version? UnCSS version?\nHow many files/how big files are we processing here?. Wow, that's a lot! How are you running uncss? Via the command line? As a postcss plugin?. I was able to crash uncss by running it against a huge list of URLs (I was using the JS API). I think this is basically an inherent limitation of how Node and UnCSS works. UnCSS basically loads all the pages, then all the CSS, and then begins its work.\nNode can't use all your system RAM, the heap is capped at a certain size. My task manager showed over 1.6 GB of memory usage before Node crashed. Edit: It can't use more than 1.7 GB.. Honestly, you're just going to have to run this in chunks. Node just can't handle loading all that data into memory and processing it.. Running it on a larger machine won't help, Node is hard-coded to only use so much memory.. @mikelambert That's not how it works, we need to load each page, get the CSS, then when we have all the CSS selectors, we need to check which selectors are used on each of the pages. So either we need to load them all at once, or we need to load them twice.. @oleersoy That's not how it works; we're using postcss, which doesn't really have support for parsing CSS bit by bit. Also, this would almost certainly make sourcemaps next to impossible.. @AhsenKh ping?. Closing for lack of response.. @zeratul1 There is a work-in-progress branch that migrates away from Bluebird to native promises. That should fix this issue. This branch's changes will be released in the next major release.. This has been fixed since 0.16.0; closing.. @twheel Yes, you need to pass them as a space-seperated list.. Looks pretty good, can you add an entry in the docs below the command line usage block?\nI guess changing the default user-agent won't break existing usage? . Just noting that this is based against the develop branch (which is correct).. > I can't see it causing any issues changing the default user agent string, but I can change it to whatever the default jsdom one is if you prefer (or just not pass the option if it's unset)\nI don't really forsee issues either, but I wanted the other collaborators opinions on it.. Yeah, sorry; I forgot about this PR and rebased develop onto master. My bad.. Need to fix merge conflicts here, will do tomorrow hopefully; @mikelambert feel free to manually merge and fix if you prefer.. @mikelambert Rebased and fixed conflicts. Please merge and release.. Dat dePseudify :grimacing: Attn @mikelambert @corpulentcoffee @joostlawerman . > Sometimes I think that this function would be easier to reason about if instead of using a regex replace, it just walked the selector while checking to see if an escape is present (for #345) until it hits the first non-escaped colon, if any, and then drop everything off after it unless there's some special case (i.e. use a blacklist for items like those identified in #330 (comment) rather than a whitelist).\nProblem with that approach is that the CSS spec keeps adding items that would need on the blacklist.\n\nIt would also be nice if dePseudify() was exported to be importable by the test suite to be tested directly independently... then we could just build up a bunch of test cases for this thing to make sure it's gotten right.\n\nAgree 100% on that one.\nAlternately, perhaps we should look into using https://github.com/postcss/postcss-selector-parser for this.. @corpulentcoffee Looking great, PR welcome.\n\nI'm thinking as a separate fix for the original issue, we need to add :focus-within to the list of ignored pseudos, right?. Sounds like schedule-compiled.css is a directory.. Also, just to verify, did you actually test that with HTML <div></div>, and CSS div:focus-within { background: red; }, the CSS isn't stripped?. @codedbypaul You're using :not() incorrectly. From https://developer.mozilla.org/en-US/docs/Web/CSS/:not\n\nThe :not() pseudo-class requires a comma-separated list of one or more selectors as its argument. The list must not contain another negation selector or a pseudo-element.\n\n(emphasis mine) :not(:disabled) is not valid.\nignoredPseudos is for things like :focus that only happen on user interaction.. Ah, good point; my bad.. My suspicion is that this is related to https://github.com/tmpvar/jsdom/issues/1750; it seems jsdom doesn't have proper :not() support. :not() works fine in cases like .foo:not(div), but it seems it doesn't work correctly with :not(:some-pseudo-class).. Thanks!. report.selectors.unused should only report the selectors that were cleaned from the CSS.\n\nand also does not skip all pseudo's.\n\nI'm not sure I understand?\n. Please post the error.. Closing for lack of response.. Unable to reproduce; please post a reduced test case repository.. Pinging @pajasevi as he's the maintainer of that.. Thanks!. Your patch might work; I'm not the expert on this. @mikelambert @XhmikosR thoughts?. SGTM, PR welcome.. Yes, PR welcome. The only other place is in the test fixtures for the gh-pages test. I don't see the point of changing this.. I feel this is too localized. It's better to add an option which injects any arbitrary JS into the page.. @mikemellor11 I hadn't really thought that far. Perhaps the command line option would pass a filename containing the JS? i.e. uncss index.html -I some.js. Yeah. I feel this gives a significant amount of versatility to this option.. @mikelambert has the publish bit; waiting on him to merge and publish a new version.. You need to be using Node version 6 or higher for uncss to work.. We cannot provide support here. The issue tracker is for bugs with uncss.. gulp-uncss is deprecated, use gulp-postcss.. The site now asks for permission first, so closing this.. I disagree here. If this site added a google ads banner, would we remove links to it for that? A cryptominer is simply an alternate way to earn money to keep the server running (I personally prefer cryptominers over ads).\nHowever, I think there is a case to be made for getting the user's consent before running the cryptominer. @pajasevi would you consider switching to https://authedmine.com/ to get the user's consent?. The site now asks permission before mining, so closing.. :not is a known issue; see https://github.com/uncss/uncss/issues/353.\nLooks like we don't have anything to remove empty @supports rules; that should be fixed.. I think there's a strong argument against stripping out CSS variables, since there's high probability they interact with the JS on the page in ways UnCSS can't detect.. We don't. One possibility would be an option to remove CSS vars (false by default). I personally don't have the bandwidth to implement this, but it probably could be done, though it'd be crazy complex.. What really needs done is getting :not() fixed in jsdom. I just don't have the time to do it.. I think https://github.com/uncss/uncss/blob/master/src/lib.js#L74 should be if (dePseudify(ignore[i]) === selector) {. Not 100% sure, but that's you're first pointer.\n. It contains a cryptominer that is used to support the costs of running the service https://github.com/uncss/uncss/issues/368. It's unfortunate that blockers detect it as malware, since it's not.\n@pajasevi any updates on switching to authedmine.com? My understanding is that it isn't blocked.. jsdom doesn't support matchMedia. Does your JS that uses matchMedia actually manipulate the DOM in a way the uncss needs to know about?. What Node.js version? Edit your gulpfile:\npatch\n  var postUncss = require('postcss-uncss');\n+ console.log(postUncss);\n      gulp.task('postcssZavhoz', function () {\nand post the output here.. Try replacing var postUncss = require('postcss-uncss'); with var postUncss = require('uncss').postcssPlugin;. Just realized the problem here, you have to be using Node v6 or higher; sorry for not thinking of this earlier. . @pajasevi can you look into this?. Thanks @pajasevi!. @pajasevi?. uncss\u4e0d\u652f\u6301jsx\n\nuncss does not support jsx. > Using stdout sometimes results in extra information (console.log statements) being included in the output.\nI'd argue that we should perhaps just fix these console.log statements, to ensure it's not included in the output. We should be only using console.warn and console.error to ensure any user-facing output goes to stderr.. Ah, that's an interesting case. I'd still argue we should figure out how to configure JSDOM to output JS in-page console.logs to stderr.. > I believe we'd need to capture all the utility logging methods\nThat isn't too hard. We can use the core console module for this: https://nodejs.org/api/console.html\nExample:\njs\nvirtualConsole: jsdom.createVirtualConsole().sendTo(new Console(process.stderr)),. True; good points. I'm not opposed to adding an output option, but I think we also need to fix problems with stdout as well.. https://github.com/uncss/uncss/pull/386#issuecomment-418382869. I remain unconvinced this change is needed if https://github.com/uncss/uncss/pull/386 is merged and released. Not merging https://github.com/uncss/uncss/pull/386 myself since it needs review from the other collaborators here, and I don't have publish access to release it anyhow.. Weird. I'm wondering, does jsdom support console.debug in the first place? Does jsdom follow Chromimum's lead of only showing console.debug in some kind of \"verbose mode\"?. Doesn't matter to me.. Don't you just want the report option?. Yes, it's API-only. Need to set htmlroot option to the document root.. uncss uses jsdom, which doesn't support canvas; you'll have to remove the canvas usage from your HTML for uncss to work.. You can set uncss to use a special useragent, and put useragent exceptions in your code.. Why don't you just set html to public/patterns/**/!(index|*.markup-only).html?. There may be some really complex patterns that can't be expressed with glob, but it covers most cases.. I'm personally not in favor of it, but I'll let the other collaborators weigh in.. I suppose I could, the exact method varies depending on the environment.\n. The postcss-uncss docs have an environment-agnostic example at https://github.com/RyanZim/postcss-uncss#example-configuration. I didn't include it here for brevity, but I can if you want.\n. Don't know when I'll get to investigate personally. @XhmikosR did you try setting L61 to something like:\nthis.on('onResourceRequested', true, function (requestData, networkRequest) {\nand L87 to }); ? \n. Gotta love node errors. :wink: No idea how to fix & no time to poke around myself. If you can think of what's causing the error, go for it!\n. @mikelambert Shouldn't this return a promise as well? (See JSDocs above.) This would also get the Travis build passing.\n. This was a mistake, however, the line should read:\npostcss([ require('uncss').postcssPlugin ]);. Should be\n\n\"eslint\": \"eslint \\\"**/*.js\\\"\",\n\nSince not all shells expand the globstar (**) correctly. Double-quoting passes the glob to eslint, which will properly expand it.. Why is the --reporter option set twice for mocha?\nShould also quote globs here too.. Can be \n\"mocha\": \"nyc --reporter=html mocha tests/*.js --slow 7500 --timeout 25000\",. `nyc` includes istanbul, no need to install it separately. Correct glob pattern for recursive search is `src/**/*.js`. Not an issue now, but will be if we add a subfolder in `src/` sometime.. `text-lcov`. No need for `--reporter` here. @XhmikosR Just realized you could make this shorter.\n\nnyc npm run mocha. `function XXX` declarations are hoisted, along with their values, so this works great. You can't do the same thing if you're doing `const xxx = function () { ... }`.. Looks like google changed the contents of that file. Tests still pass; ignore this.. Should be reworded, though this should be self-evident IMO.. Not sure what you're trying to say here?. If the `label` element isn't added on page load, UnCSS will remove the selector.\n\nBasically, UnCSS runs document.querySelector('.someClass label') on the page, and if no element is found, it removes the rule.. With the string and RegExp escaping of \\, it's pretty hard to read this regex at a glance; can you add a comment above this line something like this:\njs\n// Actual regex is of the format: /([^\\\\])(:hover|:focus)/g. This huge map of fixtures would be cleaner as an object:\njs\n{\n  'p:not(.fancy):hover': 'p:not(.fancy)',\n  ...\n}. Isn't this indented too far?. NVM, git just collapsed the diff at weird spots and made this look wrong. The indentation is perfectly fine.. ",
    "jjt": "+1, was looking for a way to do this.\n. ",
    "tomByrer": "Very cool!\nLong-term goal: weird selector characters.  I doubt we will see too many class=\u2665, but high-Unicode foreign characters are slightly more likely.\n. > Yes, I was out of town for the holidays\nI was thinking you had extra spiced wine ;)\nI'm planning on working on this PR; it is very good as-is, but not friendly to others adding more tests.\nEG: div>span is expected to fail, making it a poor test; I expect someone to accidentally make a span a child of a div.  \"Someone\" like me :)\nBetter fail test: footer>h1; only someone who knows 0% about SEO might accidentally do this ;)  This way, almost anyone who didn't memorize all the fail-tests can edit the .htm.\nIt may be a few days while we think about this more.\n@giakki do you have a style guide please?  Some like  footer>h1, & others like footer > h1\n& sorry, I could not resist: \n\n. Thinking out loud:\nCould make a 'recipes' wiki page, to store example scripts that call UnCSS then CSSO or other minifiers.\n. > Personally I believe it should try to stick to the original [whitespace] format\nMight be a separate issue ;)\n. I'm trying to have a 'separation of concerns' in Issues as well  ;) :P\nYou can link-reference to here.\n. Gracie.\nI can see including CSSO as a good idea if UnCSS was just for yourself, but most other programmers prefer to work with smaller pieces.\n. > we should have an expected directory as well\n:+1: :)\n. Workaround: Save all the rendered HTML manually, then have uncss use those.  Extra work, but IMHO uncss is a tool only to be used just prior to deployment.\n. ",
    "ben-eb": "@giakki Have you had a chance to look at this pull? Realise it's the Christmas period so no worries if you haven't. :-)\n. +1. In my initial test suite I've been comparing the output to the minified version, mostly because without it the output is different to the initial fixture; think UnCSS does some whitespace transforms as well. Personally I believe it should try to stick to the original format of the file as much as possible and just delete unused selectors.\n. ^ Agreed, but it was relevant here too.\n. @giakki Perhaps we should have an expected directory as well, to test what should be in the CSS file. The way I see it is that the tests should test that UnCSS is removing the selectors that aren't in the HTML, but the way they are set up they should probably have tests for what the CSS should still have. @tomByrer What do you think about having an expected directory as well?\nBut rawcss is not false, it is false until Phantom has run by which time it contains a CSS string to test against. It starts off false so that the tests aren't run until it contains a string. :-)\n. @giakki What do you think of UnCSS being an event emitter, so that consumers can listen for events such as style:removed, style:kept, or style:ignored? Thus removing the responsibility of UnCSS to produce a report of used/unused styles, and instead extract that into a reporter module that can listen to these events and act on them.\nI like this pattern in mocha. It means that you could have different reporters, even extracted into node modules themselves, to do different kinds of logging - a debug logger that logged all events, an unused logger that would only report unused CSS etc.\n. I think for code in media queries you have to assume that all declarations are used, however the selectors inside those are based on your markup, as per the normal way that UnCSS works.\nActually doing stuff like this is pretty tricky. There are projects out there like CSS Shrink and css-condense and even CSSO which have support for some structural optimisation. CSS Shrink is one of the most recent projects and I've found it can take even code run through clean-css or csso and make it even smaller.\nBut, CSS Shrink only dedupes selectors that are next to each other, such that you can't compress stuff such as:\n``` css\nh1 {\n    color: green;\n}\nh2 {\n    color: red;\n}\nh1 {\n    background: blue;\n}\n```\nEven css-condense tried to do selector rearranging but because the way CSS works is that it is very source order dependent, any rearranging or messing around with the author's original intentions may cause \"optimised\" CSS to display strangely. This is a contrived example but, depending on the optimisation path it could lead to breakage:\n``` css\n@media screen and (min-width: 300px) {\n    h1 {\n        color: green\n    }\n}\n@media screen and (min-width: 900px) {\n    h1 {\n        color: blue\n    }\n}\n@media screen and (min-width: 600px) {\n    h1 {\n        color: green;\n    }\n}\n```\nIn this, you combine the two green headings into a single media query; if you do this, then at widths of over 900px the heading will become blue instead of green, as the third declaration is no longer there to override the second one. Actually, this kind of case can happen more often than you think because of vendor code and concatenating files together. :smile:\nPersonally I'd recommend that such an optimisation not be part of UnCSS, as it's not really related to diffing a CSS file against some HTML; it is probably up to a minifier, as long as the minifier is bulletproof enough to understand the cascade and what could disrupt the author's original intentions. I think a lot of people are experiencing enough problems with CSSO's structure minimization, that it's probably worth instead making that optimiser more robust to handle this sort of use case.\n. @LoveAndHappiness Are you sure that you recompiled the CSS and then ran UnCSS on it and that all went up to your web server? The open class is what Bootstrap uses for most of its 'toggleable' components, if you view source of your working example you'll see it mentioned about 50 times in the source code. I can't find any mention of it in your non-working example.\n. You shouldn't delimit RegExps with quotes. If you pass:\njs\n{\n            html: ['uncss/uncss.html'],\n            ignore: [\n                \".fade\",\n                \".fade.in\",\n                \".collapse\",\n                \".collapse.in\",\n                \".collapsing\",\n                \".alert-danger\",\n                /\\.open/\n           ]\n}\nThat will match the .open class, and any selector that happens to use it.\n. Awesome. :+1:\n. @giakki It might be worth having a look at the ignore behaviour, such that it could test selectors such as button::-moz-focus-inner against just having a button element in the HTML code, rather than allowing the rule to pass. Imagine this should be a separate ticket though. :smile:\n. ping @Hotell - do you have the PhantomJS/Windows version?\n. @XhmikosR Might be worth trying to run that CSS through the css module to see if it is throwing the same error. I think as @boushley is suggesting, this is a regression in that module, but we would need to narrow down what exactly is causing the parser to throw an error so it can hopefully be fixed quickly. It might be failing on some perfectly valid CSS...\n. @XhmikosR Think this is referring to this pattern:\ntwig\n<script type=\"text/html\" id=\"template-contact\">\n  <div class=\"contact\">\n    <strong><%= name %></strong>\n    <span><%= email %></span>\n  </div>\n</script>\n. @corysimmons Not yet. There is an open issue for markup within script tags here: https://github.com/giakki/uncss/issues/81\n. Looks like you need to npm install uncss in your project's directory.\n. I'm not sold on adding this to UnCSS, I think it detracts from the scope of the module, which is to provide a CSS file that has been cleaned of unused selectors, and I would guess that most people's use cases for that CSS is to run it through a minifier and then put it into production.\nFor your diff example you can always try running both files through a beautifier and comparing them that way. In fact this is probably better because then the code is formatted consistently in both versions.\n. @giakki Can we close this as a duplicate of https://github.com/giakki/uncss/issues/76?\n. @giakki @XhmikosR Do you think this is related to the css lib and not phantomjs? The error being thrown is on this line: https://github.com/giakki/uncss/blob/master/lib/uncss.js#L206 - again I'm not on Windows so I can't test, but perhaps css has some parsing issues with your compiled file? Might be worth experimenting with reduced test cases on some more complex, or unusual selectors/declarations in your build, and just try to run them through css itself.\n. Sounds good to me. :+1:\n. @XhmikosR Any updates? I noticed the error in your second comment was identical to #76, also...\n. Can I suggest to close this ticket as I think it goes against what UnCSS is designed to do, which is to take a page, analyse it and then return used CSS rules. The way I see it is that such an optimisation is risky, because any CSS you wrote should probably be kept if the element exists. I can see a use case for using something like this for vendor code, but it should probably be delegated to another module.\nThis one should suit your needs: https://github.com/AoDev/css-byebye\n. Great! :smile: \n. Thanks! :smiley: \n. Awesome! :+1: \n. Should also add a test case for this?\n. Unfortunate, indeed. I don't have a Windows machine I can test on, either. Will keep an eye on this thread, hopefully the problem(s) can get resolved.\n. Ready for the new version. https://github.com/ben-eb/gulp-uncss/pull/23 :smiley:\n. @giakki Good to go?\n. @XhmikosR Yes, good point. I'm starting to prefer using a more modular approach instead of large utility libraries for my own projects, however since this has a dependency on _, we can use _.defaults instead. :+1:\n. Rebased, squashed. :smiley:\n. On my fork?\n. Updated, didn't need to rebase?\n. :beers: \n. Sure, how can I do that?\n. You're welcome. :smiley:\n. :+1: \n. 0.8.1 has a dependency on css @ 1.6.0 - as #76 reports, his issue was solved by downgrading that dependency from 2.0.0. I wonder if UnCSS 0.11.0 would work with your build if you downgraded to 1.6.0?\n. Just the fatal error at the end of the trace. But you're right, it could have been an issue before. :smiley:\n. @giakki I've probably said this before, but I think we need to find a reduced test case for replicating this issue and let the css guys know about it. There must be some valid CSS that isn't being parsed for some reason, and rather than just downgrading, it would be good to find the source of the regression so that others don't have to experience it. E.g. what is it about @XhmikosR's file that the parser is struggling with?\nI can confirm that running UnCSS 0.8.1 (via grunt-uncss) with css at 2.0.0 (just overriding the dep in node modules) fails with the same error, on OS X.\n```\nmpc-hc.org (master) $ grunt build\nRunning \"clean:dist\" (clean) task\n\n\n1 path cleaned.\n\n\nRunning \"jekyll:site\" (jekyll) task\njekyll build was initiated.\nJekyll output:\nConfiguration file: /Users/bbriggs/projects/mpc-hc.org/_config.yml\n            Source: ./source/\n       Destination: ./_site/\n      Generating... \n                    done.\n Auto-regeneration: disabled. Use --watch to enable.\nRunning \"useminPrepare:html\" (useminPrepare) task\nConfiguration changed for concat, uglify, cssmin\nRunning \"copy:dist\" (copy) task\nCopied 1 file\nRunning \"concat:css\" (concat) task\nFile _site/assets/css/pack.css created.\nRunning \"concat:js\" (concat) task\nFile _site/assets/js/pack.js created.\nRunning \"concat:jsIE\" (concat) task\nFile _site/assets/js/html5shiv-respond.min.js created.\nRunning \"uncss:dist\" (uncss) task\nFatal error: uncss/node_modules/css: Maximum call stack size exceeded\nExecution Time (2014-12-30 17:52:02 UTC)\njekyll:site        12.1s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 10%\nuncss:dist      1m 44.4s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 89%\nTotal 1m 56.8s\n``\n. @XhmikosR I'll test the gulp plugin.\n. @XhmikosR Works fine, both with css at1.6.0&2.0.0`. I just wrote the packed css to the root dir, but otherwise the task looks identical.\n``` js\nvar gulp = require('gulp');\nvar uncss = require('gulp-uncss');\nvar glob = require('glob');\ngulp.task('uncss', function() {\n    return gulp.src('./_site/assets/css/pack.css')\n        .pipe(uncss({\n            ignore: [\n                /(#|.)fancybox(-[a-zA-Z]+)?/,\n                // needed for Bootstrap's transitions\n                \".fade\",\n                \".fade.in\",\n                \".navbar-collapse.in\",\n                \".collapse\",\n                \".collapse.in\",\n                \".navbar-collapse\",\n                \".navbar-collapse.in\",\n                \".collapsing\",\n                /(#|.)navbar(-[a-zA-Z]+)?/,\n                /(#|.)dropdown(-[a-zA-Z]+)?/,\n                \".open > .dropdown-menu\",\n                \".open > a\",\n                // needed for the <noscript> warning; remove them when fixed in uncss\n                \".alert-danger\",\n                \".visible-xs\",\n                \".noscript-warning\",\n                // currently only in a IE conditional so uncss doesn't see it\n                \".close\",\n                \".alert-dismissible\"\n            ],\n            htmlroot: \"./_site\",\n            ignoreSheets: [/fonts.googleapis/],\n            html: glob.sync('./_site/*/.html')\n        }))\n        .pipe(gulp.dest('./'));\n});\n```\n@giakki Perhaps grunt is running out of memory?\n. /cc @addyosmani Any thoughts on this? I'm all out of ideas...\n. @XhmikosR Awesome! So are we ready to fix #111 yet? :wink:\n. @XhmikosR :beers:\n. UnCSS doesn't support selectors that were added through page interaction; clicks, hovers, focus, form updates etc. It will only be able to analyse those selectors that were added at runtime using the timeout option. For projects using a framework such as Foundation or Bootstrap you will have to maintain an ignore list for classes that are added by the JS components.\nI think another option is to write a layer for your functional/integration tests that can get the state of the DOM after a menu is clicked, or a form is updated, then pass all of those HTML pages through to UnCSS afterward; but that is indeed a bigger concern than an ignore list of selectors. :smile:\n. True, but more often that not classes will be present on DOM nodes after some user interaction. I think a good way of capturing that would be to use casperjs and get it to fill out forms, click on drop-downs etc. Then, a more accurate picture of what is being used will be shown, but also it means developing a comprehensive test suite which takes time.\nI wonder if another approach such as statically analysing the JS files for things like document.querySelector('li').classList.add('test'); or document.getElementById('form').className = 'submitted' might be appropriate; but if so, wouldn't that be a better standalone tool? If such a tool could find class names or ID attributes etc in JS files, then it would automatically be able to output an ignore list for UnCSS, which is the main point of contention here. But, there are problems with that too, such as dynamically created class names, or a helper function that wraps the classList API. :smiley:\nI think one of the flaws of these frameworks is that they make assumptions for you which you might not think is best. Many JS components therein squash together behavioural and presentational logic in the same CSS classes; whereas for your own components you might like to separate behavioural classes out into selectors such as .js-active, js-hidden, js-toggle etc. Then, you can just pass an ignore regex to UnCSS which matches .js-*, which is much simpler.\nI'm not sure if there's a simple solution for this problem.\n. @giakki Love the wiki idea. :+1:\n. @iandanforth Sorry, my experience with selenium is very limited. I think to pull this sort of thing off automatically you need a robust set of front-end integration tests, so the better option is probably an ignore list for your particular code base. :smile: \n. I think this is expected behaviour. Currently, UnCSS does not strip selectors that have pseudo classes/elements on them (for example, h1:hover) as it cannot test for this behaviour. Selectors such as these are therefore included regardless of whether the original element exists in the DOM.\nI would agree however that instead of testing that the rule contains these selectors, UnCSS should understand which parts of the selector it can ignore; so that when testing h1:hover it could actually test h1 instead. Then it could strip the rule if it didn't find any h1 elements in the DOM.\nI noticed this behaviour before in https://github.com/giakki/uncss/issues/74#issuecomment-67982080\n. @luketeaford Yes, it does; but only those added at runtime, not through user interaction. I would also be fine with having this kind of functionality behind a flag also, instead of it being the default behaviour.\n. Agreed that UnCSS would have to be able to analyse dynamically added classes. That's unfortunately one of the weak points of the tool right now...\n. This issue https://github.com/Medium/phantomjs/issues/275#issuecomment-70879593 seems to point to ncp being the culprit; so yes, indeed this does look like an io.js issue and not something we can fix in UnCSS.\n. I don't know, I think it's nicer to say if var has length, rather than if it has a length that's greater than 0. It reads a little better for me. The main point here was to ensure that the usage was consistent, at the moment there is greater than checking and strict equal checking, it's a little confusing. :smile:\nThis is really up to you of course!\n. @giakki Alright, didn't realise that was the case! :+1:\n. Does Sass move comments marked as important? e.g:\nscss\n/*! important comment */\n@media only screen and (max-width: 47.9375rem) {\n.page-document.expanded {\npadding-left: 3.75rem; } }\nIf so you might be interested in this patch, try replacing the uncss install in the gulp plugin with that one. https://github.com/giakki/uncss/pull/148\n. Both are accepted: http://phantomjs.org/api/command-line.html\n. @johntrandall You might want to look into setting up a http proxy for your site, which blocks the troublesome script, and then have UnCSS analyse the site via the proxy instead. I'm not sure what we can do in UnCSS that wouldn't be a hacky way of solving this.\nhttps://github.com/nodejitsu/node-http-proxy\nIn particular, you might be interested in harmon, which can transform the streaming html to not include a certain link tag.\nhttps://github.com/No9/harmon\n. I think the original report threw me off somewhat; I noticed a regression in https://github.com/cssstats/cssstats when I tried to upgrade gulp-uncss to 1.0.0:\n/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/main/async.js:36\n        fn = function () { throw arg; };\n                                 ^\nError: PhantomJS: Cannot open about:blank\n    at reject (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/lib/phantom/start.js:71)\n    at :4\n    at :/modules/webpage.js:281\n    -----------------------------------------------------------------------\n    at Phantom._send (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/lib/Phantom.js:165:20)\n    at Page.run (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/lib/Page.js:62:25)\n    at /Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/src/phantom.js:125:21\n    at tryCatchReject (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:845:30)\n    at runContinuation1 (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:804:4)\n    at Fulfilled.when (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:592:4)\n    at Pending.run (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:483:13)\n    at Scheduler._drain (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/Scheduler.js:62:19)\n    at Scheduler.drain (/Users/bbriggs/projects/cssstats/node_modules/gulp-uncss/node_modules/uncss/node_modules/phridge/node_modules/when/lib/Scheduler.js:27:9)\n    at process._tickCallback (node.js:419:13)\nIn this instance the build process is running UnCSS on handlebars partials, which seems to be fine when using the old version of UnCSS, but fails on newer versions.\n. :+1: for PostCSS.\n. @XhmikosR I'm actually using PostCSS for another project; the parser is up to twice as fast as the css module, and its way of handling plugins is done in a very modular way. From my initial experiments with it, it seems like it would be a good fit, especially as they are adding support for asynchronous transformations with promises.\n. Ahh, ok. I haven't no, been really busy with university stuff; would like to contribute a bit more to this project but it's hard finding the time. :smile:\nBut I can't imagine this being too difficult to develop, especially now that we have a good suite of tests.\n. @giakki Are you interested in switching over to PostCSS? I'd be happy to develop this feature, it would also be nice if I could get collaborator access. But I think we need some kind of refactoring to happen also; the problem is that many of the function calls for UnCSS have APIs that are tightly integrated into each other. I would only be happy to do a parser rewrite if it meant that the bulk of the module was rewritten to be less coupled together. That should also help with an event based architecture for reporting as I previously suggested.\n@XhmikosR What do you think of the current codebase? There are things in there that I don't think UnCSS should be handling, such as displaying error messages for CSS (https://github.com/giakki/uncss/blob/master/src/utility.js#L136-L172 - just let the error be thrown from the parser), or removing empty selectors/keyframes (https://github.com/giakki/uncss/blob/master/src/lib.js#L100-L134 - broadens module scope too widely, I wrote PostCSS alternatives), and again the reporting I feel should be delegated to other modules, much like https://github.com/substack/tape is just a test runner whose output can be consumed by other reporting modules.\nI think it is in our best interests to scope UnCSS's responsibilities to DOM traversal and finding unused CSS selectors that way, and then encourage people to use it in a PostCSS context alongside other dedicated tools such as https://github.com/ben-eb/cssnano for best results. Therefore we should also look at deprecating a lot of the existing auxiliary functionality and do a 1.0.0 release. \n. @cortopy @phlorie You are correct in your assumptions about UnCSS. It has no concept of being able to track a user's journey through a website, it can only load a page and calculate what styles are used at runtime. Therefore, for richer experiences which involve managing session data & logged in and logged out states, you have to feed UnCSS static files that contain all of that state.\nYou could do this in the case of a CMS by getting a spider to crawl your site and dump the HTML output into a directory, then have UnCSS analyse the files for anything unused. And in the case of some other dynamic content, it is possible to use something like CasperJS to interact with your site and write a HTML file at each state - load page, capture, do a form action, capture, etc.\nI admit that this isn't ideal, and hope that once the unused reporter is finished, then people can be more aware of what classes UnCSS is removing, and then be able to make better decisions about how to manage their ignore lists.\n. I don't think this should be UnCSS's responsibility; that should be up to a CSS minifier.\n. > Do you know any minifier that does it?\nNone, as far as I'm aware.\n. @szepeviktor This feature is supported in cssnano, if you would like to have it in your build. https://github.com/ben-eb/cssnano\n. :shipit: \n. The example you posted is missing its final curly brace; also, is the @media print necessary? The @page rule already defines styles for printed media.\nNonetheless, PostCSS's parser is more forgiving of this case - eventually the CSS parser in this module will be replaced by it: https://github.com/giakki/uncss/issues/153\n. This is the intended behaviour - if you pass a string, UnCSS will ignore selectors that match exactly that string. However, if you use a regex instead, you can be less specific:\njs\noptions: {\n    ignore: [\n        /\\.(odd|even)/\n    ]\n}\n. Yes, but you can also pass an array of regexes too. :smile:\n. Awesome! :+1:\n. Your server can already compile PHP templates into HTML, quicker and better than if someone were to bake this into UnCSS itself. UnCSS should not be responsible for server side compilation; if it were, why would it stop at PHP? What about Jade? Slim? Liquid? Twig? And countless others?\nYou already have a web server that can render out these languages. So, let it run on a local port and have UnCSS get the rendered HTML from those pages.\n. This could be achieved easily with a refactor based on PostCSS. I still don't currently have the time to work on this.\n. This is a duplicate of https://github.com/giakki/uncss/issues/49.\n. Please don't open a new issue referencing an old one. You can already see that the issue has not been solved.\n. Duplicate of https://github.com/giakki/uncss/issues/49.\n. gulp usage is fine, I think this is coming from phantomjs. Try googling the error message \"TypeError: Bad argument phantom\" and you will see a few issues, top one:\nhttps://github.com/clearhead/clearhead/issues/2#issuecomment-151115747\nLinking relevant issue: https://github.com/ben-eb/gulp-uncss/issues/77. usedRuleSelectors;\n. :beers: \n. _.isString(files) - sure, was just using the check that was there already. :smile:\n. ",
    "sindresorhus": "I strongly agree with this. Node modules should be small and focused and minifying CSS is an whole other thing which should happen separately.\n. ",
    "xdamman": "Sure it would be much better we a gh-page. I was just quickly looking for a page that was referencing a CSS stylesheet with an absolute path.\n. Awesome. \nThat doesn't fix my issue when a css file starts with a media query. I made a pull request with a test for it:\nhttps://github.com/giakki/uncss/pull/24 (and it passes all the other tests that you made!)\n. Adding filename as well in commit #2:\n\n. Really Travis? Come on, be nice!\n. ",
    "veeracs": "I got the same error.\n. ",
    "bezoerb": "+1\nThere was the same issue on grunt-spritemith.\nLooks like it has to be patched until next phantomjs version release.\n. Sorry, seems not. \nrunning npm test shows:\n```\n29 passing (23s)\n  6 failing\n1) ...\n2) Compile the CSS of an html page passed by path Should compile two stylesheets into one and keep the media query:\n     Uncaught AssertionError: expected '2014-01-20 16:48:56.828 phantomjs[81328:507] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead. \\n2014-01-20 16:48:56.937 phantomjs[81328:507] CoreText performance note: Client called CTFontCreateWithName() using name \"Helvetica Neue\" and got font with PostScript name \"HelveticaNeue\". For best performance, only use PostScript names when calling this API.\\n2014-01-20 16:48:56.938 phantomjs[81328:507] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.\\n' to be null\n3)...\n``\n. npm test -> 40 passing (41s) \nNice!\n. Hey @giakki,\njust did a quick look at thephridgebranch. \nIt currently only evaluates the first out of two stylesheets but it's blazing fast and does not produce any errors. Looks like you're heading in the right direction. \nI'll investigate this further as soon as i've some more time.\nAwesome work, thanks!\n. This issue was related to an.htpasswdfile in my project root. Renaming this file fixed the issue for me.\n. You can try this:ulimit -n 2048See: https://github.com/gruntjs/grunt-contrib-copy/issues/21#issuecomment-10840100\n. @phlorie you could use [php2html](https://github.com/bezoerb/php2html) to generate static HTML files for a specific set of routes in your local Wordpress project. You could then use the generated files as source for uncss\n. @cortopy what kind of errors? Would you mind adding an issue over at [gulp-php2html](https://github.com/bezoerb/gulp-php2html)? \n. You could also use [php2html](https://github.com/bezoerb/php2html) to compile your templates into HTML before uncss does it's work if you don't have a local web server available. You'll just need thephp-cgi` executable available in your PATH\n. ",
    "stevemao": "Hi, is this issue resolved? If not, can you reopen this and mark as enhancement? Thanks\n. No worries :)\n. ",
    "atuttle": "Thanks. Has the fix been published to npm yet?\n. ",
    "MathRobin": "It doesn't report any error, it just crashes and that's all. Frustrating a lot.\nI don't know the behavior when https certificate is valid. \n. ",
    "nevenduranec": "I can confirm that it doesn't work on ssl. \nCan you add the \"ignore-ssl-errors\" flag?\nuncss MYURL > uncss-homepage.css\nError: CERT_HAS_EXPIRED\nat SecurePair.<anonymous> (tls.js:1370:32)\nat SecurePair.EventEmitter.emit (events.js:92:17)\nat SecurePair.maybeInitFinished (tls.js:982:10)\nat CleartextStream.read [as _read] (tls.js:469:13)\nat CleartextStream.Readable.read (_stream_readable.js:320:10)\nat EncryptedStream.write [as _write] (tls.js:366:25)\nat doWrite (_stream_writable.js:226:10)\nat writeOrBuffer (_stream_writable.js:216:5)\nat EncryptedStream.Writable.write (_stream_writable.js:183:11)\nat write (_stream_readable.js:582:24)\n. I get the same error.\n[root@nitro css]# uncss https://domain.com > test.css\nError: CERT_HAS_EXPIRED\n    at SecurePair.<anonymous> (tls.js:1367:32)\n    at SecurePair.emit (events.js:92:17)\n    at SecurePair.maybeInitFinished (tls.js:979:10)\n    at CleartextStream.read [as _read] (tls.js:471:13)\n    at CleartextStream.Readable.read (_stream_readable.js:340:10)\n    at EncryptedStream.write [as _write] (tls.js:368:25)\n    at doWrite (_stream_writable.js:225:10)\n    at writeOrBuffer (_stream_writable.js:215:5)\n    at EncryptedStream.Writable.write (_stream_writable.js:182:11)\n    at write (_stream_readable.js:601:24)\n\u2514\u2500\u2500 uncss@0.9.0\n. ",
    "RyoIkarashi": "Hi, I'm using latest uncss and ran uncss https://sample.dev > /path/to/stylesheet.css to remove unused styles from my local server with HTTPS and self signed certificates.\nbut I got an TLS-related error.\nNode version: v9.4.0\nUnhandledPromiseRejectionWarning: Error: self signed certificate\n    at TLSSocket.onConnectSecure (_tls_wrap.js:1041:34)\n    at TLSSocket.emit (events.js:160:13)\n    at TLSSocket._finishInit (_tls_wrap.js:638:8)\n(node:34329) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:34329) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nI think self-signed certification options should be provided or ignoring TLS related errors should be applied with something like these options in src/utility.js at Line 112-113 when a request is issued.\nrequest({\n  url: filename,\n  headers: { 'User-Agent': 'UnCSS' },\n  // ignore TLS related errors\n  rejectUnauthorized: false,\n  strictSSL: false,\n  // OR just specify self-signed cert and key\n  agentOptions: {\n    cert: fs.readFileSync(\"/path/to/cert.crt\")\n    key: fs.readFileSync(\"/path/to/key.key\")\n  }\n}, callback);\n@giakki What do you think about this?. Any thoughts or workarounds on this?. ",
    "XhmikosR": "@giakki: any ideas why this happens?\n. Thanks in advance!\n. I think that the second solution seems the best and what is actually expected.\n. Unfortunately, I still can't use any version after 0.8.1 on Windows. So https://github.com/giakki/uncss/issues/97 is a show stopper here...\n. I'll try to give that branch a go and let you know. Just so I know, is that branch supposed to fix #97?\n. @giakki: I made a branch in grunt-uncss which is using the phridge branch. I still get the same error\n```\nRunning \"uncss:dist\" (uncss) task\nReferenceError: Can't find variable: $\nlocal:221\nReferenceError: Can't find variable: $\nlocal:285\n  local:290\nReferenceError: Can't find variable: $\nlocal:325\nReferenceError: Can't find variable: $\nlocal:352\nPotentially unhandled rejection [2] RangeError: uncss/node_modules/css: unable t\no parse undefined:\nMaximum call stack size exceeded\n```\nUsing node.js 0.10.33, Windows 7 32-bit SP1 and this code.\n. :+1: In my case, my VM almost runs out of memory due to the number of phantom instances.\n. Have you thought about limiting the number of processes to the number of threads? Because atm it's not only a RAM issue but disk thrashing too...\n. Thanks! Do you plan to release a new npm package? Otherwise I'll check out the master branch and report back.\n. ```\nRunning \"concat:css\" (concat) task\nFile \"_site/assets/css/pack-69dbf60fcec7db095827ee09b270959c66ce413b.css\" created.\nRunning \"concat:js\" (concat) task\nFile \"_site/assets/js/pack-69dbf60fcec7db095827ee09b270959c66ce413b.js\" created.\nRunning \"uncss:dist\" (uncss) task\nRunning \"cssmin:minify\" (cssmin) task\nFile _site/assets/css/pack-69dbf60fcec7db095827ee09b270959c66ce413b.css created.\nOriginal: 26679 bytes.\nMinified: 19140 bytes.\nRunning \"uglify:minify\" (uglify) task\nFile _site/assets/js/pack-69dbf60fcec7db095827ee09b270959c66ce413b.js created.\nOriginal: 68238 bytes.\nMinified: 30384 bytes.\nRunning \"uglify:minifyIE\" (uglify) task\nFile _site/assets/js/html5shiv-respond.min.js created.\nOriginal: 20232 bytes.\nMinified: 7227 bytes.\nDone, without errors.\nExecution Time (2014-01-26 10:52:18 UTC)\njekyll:site           1.9s  \u00a6 2%\nhtmlcompressor:html   4.8s  \u00a6\u00a6\u00a6 5%\nuncss:dist           80.2s  \u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6 91%\nTotal 88.3s\nC:\\Users\\xmr\\Desktop\\mpc-hc.org>\n```\nIt's only about 10 sec slower on the same machine, and no unresponsiveness or anything so I think this is a good change :+1: \n. Just had another idea... how about the number of threads * 1.5?\nEdit:\nEven threads * 2 seems to work fine but I don't see any noticeable speed improvement.\nAnyway, I'll wait for the next npm version :)\n. Awesome, will wait to test it out! Do you have any numbers yet?\n. Oh, nice! I will try it now on Windows.\n. +100000!\nPerfect!\nExecution Time (2014-02-28 17:41:25 UTC)\njekyll:site           1.9s  \u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6 28%\nincludereplace:dist  531ms  \u00a6\u00a6\u00a6\u00a6 8%\nhtmlmin:dist         453ms  \u00a6\u00a6\u00a6 7%\nuncss:dist            3.3s  \u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6 48%\ncssmin:minify        125ms  \u00a6 2%\nuglify:minify        406ms  \u00a6\u00a6\u00a6 6%\nuglify:minifyIE       78ms  \u00a6 1%\nTotal 7s\nWith 0.7.9 I get:\nExecution Time (2014-02-28 17:42:25 UTC)\njekyll:site     2s  \u00a6\u00a6 2%\nuncss:dist   77.5s  \u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6\u00a6 96%\nTotal 80.7s\nBTW, how many threads are now being used in master?\n. Yeah, everything appears to be fine in the final CSS.\nI only get one warning\n```\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nC:\\Users\\xmr\\Desktop\\mpc-hc.org>grunt build connect watch\nRunning \"jekyll:site\" (jekyll) task\njekyll build was initiated.\nJekyll output:\nActive code page: 65001\nConfiguration file: C:/Users/xmr/Desktop/mpc-hc.org/_config.yml\n            Source: ./source/\n       Destination: ./_site/\n      Generating... done.\nRunning \"copy:dist\" (copy) task\nCopied 1 files\nRunning \"includereplace:dist\" (includereplace) task\n\n\nProcessed _site/2012/06/21/welcome-to-the-new-website/index.html\nProcessed _site/2012/08/09/source-code-moved-to-github/index.html\nProcessed _site/2012/08/14/1.6.3-released/index.html\nProcessed _site/2012/09/24/open-call-for-contributors/index.html\nProcessed _site/2012/10/01/1.6.4-released/index.html\nProcessed _site/2012/12/16/1.6.5-released/index.html\nProcessed _site/2013/01/21/trac-was-moved/index.html\nProcessed _site/2013/02/24/website-was-moved/index.html\nProcessed _site/2013/02/25/binaries-are-signed/index.html\nProcessed _site/2013/03/17/1.6.6-released/index.html\nProcessed _site/2013/04/25/1.6.7-released/index.html\nProcessed _site/2013/05/16/fake-apps/index.html\nProcessed _site/2013/06/15/1.6.8-released/index.html\nProcessed _site/2013/09/29/1.7.0-released/index.html\nProcessed _site/2013/11/17/1.7.1-released/index.html\nProcessed _site/2014/01/19/switch-website-to-jekyll/index.html\nProcessed _site/2014/01/21/translations-moved-to-Transifex/index.html\nProcessed _site/2014/01/26/1.7.2-released/index.html\nProcessed _site/2014/02/02/1.7.3-released/index.html\nProcessed _site/404.html\nProcessed _site/about/index.html\nProcessed _site/acknowledgments/index.html\nProcessed _site/archive/index.html\nProcessed _site/changelog/index.html\nProcessed _site/contact-us/index.html\nProcessed _site/donate/index.html\nProcessed _site/downloads/index.html\nProcessed _site/faq/index.html\nProcessed _site/index.html\n\n\nRunning \"htmlmin:dist\" (htmlmin) task\nMinified _site/2012/06/21/welcome-to-the-new-website/index.html 7.46 kB > 5.68 kB\nMinified _site/2012/08/09/source-code-moved-to-github/index.html 7.44 kB > 5.66kB\nMinified _site/2012/08/14/1.6.3-released/index.html 7.19 kB > 5.41 kB\nMinified _site/2012/09/24/open-call-for-contributors/index.html 7.35 kB > 5.56 kB\nMinified _site/2012/10/01/1.6.4-released/index.html 7.45 kB > 5.65 kB\nMinified _site/2012/12/16/1.6.5-released/index.html 8.01 kB > 6.17 kB\nMinified _site/2013/01/21/trac-was-moved/index.html 7.92 kB > 6.13 kB\nMinified _site/2013/02/24/website-was-moved/index.html 7.48 kB > 5.7 kB\nMinified _site/2013/02/25/binaries-are-signed/index.html 9.44 kB > 7.57 kB\nMinified _site/2013/03/17/1.6.6-released/index.html 8.35 kB > 6.54 kB\nMinified _site/2013/04/25/1.6.7-released/index.html 7.25 kB > 5.47 kB\nMinified _site/2013/05/16/fake-apps/index.html 7.38 kB > 5.6 kB\nMinified _site/2013/06/15/1.6.8-released/index.html 7.83 kB > 6.03 kB\nMinified _site/2013/09/29/1.7.0-released/index.html 8.75 kB > 6.95 kB\nMinified _site/2013/11/17/1.7.1-released/index.html 7.8 kB > 5.98 kB\nMinified _site/2014/01/19/switch-website-to-jekyll/index.html 7.5 kB > 5.71 kB\nMinified _site/2014/01/21/translations-moved-to-Transifex/index.html 7.99 kB > 6.2 kB\nMinified _site/2014/01/26/1.7.2-released/index.html 7.82 kB > 6.01 kB\nMinified _site/2014/02/02/1.7.3-released/index.html 7.41 kB > 5.62 kB\nMinified _site/about/index.html 26.44 kB > 22.01 kB\nMinified _site/acknowledgments/index.html 7.41 kB > 5.69 kB\nMinified _site/archive/index.html 9.86 kB > 7.31 kB\nMinified _site/changelog/index.html 15.66 kB > 13.23 kB\nMinified _site/contact-us/index.html 8.22 kB > 6.49 kB\nMinified _site/donate/index.html 13.71 kB > 11.88 kB\nMinified _site/downloads/index.html 12.12 kB > 9.86 kB\nMinified _site/faq/index.html 8.22 kB > 6.42 kB\nMinified _site/index.html 13.36 kB > 10.37 kB\nRunning \"concat:css\" (concat) task\nFile \"_site/assets/css/pack-3510333b261fb82af1615304d54041c155418e5c.css\" created.\nRunning \"concat:js\" (concat) task\nFile \"_site/assets/js/pack-3510333b261fb82af1615304d54041c155418e5c.js\" created.\nRunning \"concat:jsIE\" (concat) task\nFile \"_site/assets/js/html5shiv-respond.min.js\" created.\nRunning \"uncss:dist\" (uncss) task\nRunning \"cssmin:minify\" (cssmin) task\nFile _site/assets/css/pack-3510333b261fb82af1615304d54041c155418e5c.css created.\nOriginal: 32333 bytes.\nMinified: 25437 bytes.\nRunning \"uglify:minify\" (uglify) task\nFile _site/assets/js/pack-3510333b261fb82af1615304d54041c155418e5c.js created.\nOriginal: 67464 bytes.\nMinified: 30448 bytes.\nRunning \"uglify:minifyIE\" (uglify) task\nFile _site/assets/js/html5shiv-respond.min.js created.\nOriginal: 20234 bytes.\nMinified: 7227 bytes.\nRunning \"connect:server\" (connect) task\nPoll Request error: Error: read ECONNRESET\nStarted connect web server on http://0.0.0.0:8000\nRunning \"watch\" task\nWaiting...\n```\nIf I just do grunt build I don't get that warning.\n. Do you have any news on this? No pressure, just wondering since the new version is so much faster and can't wait to be able to use it :D\n. Thanks! I tested the latest uncss master with v1.1.1 and I don't get that warning anymore.\n. ping @giakki :)\n. Thanks! I made a PR for grunt-uncss to be merged when you publish 0.8.0 :)\n. This happens with the htmlroot option set. If I remove that and set the stylesheets option then it doesn't happen.\njs\nuncss: {\n    options: {\n        ignore: [\n            /(#|\\.)fancybox(\\-[a-zA-Z]+)?/,\n            // needed for Bootstrap's transitions\n            \".fade\",\n            \".fade.in\",\n            \".collapse\",\n            \".collapse.in\",\n            \".collapsing\",\n            // needed for the <noscript> warning; remove when fixed in uncss\n            \".alert-danger\",\n            \".visible-xs\",\n            \".noscript-warning\"\n        ],\n        htmlroot: \"<%= dirs.dest %>\" // this has the fonts css too\n        //stylesheets: [\"../../../../../<%= concat.css.dest %>\"] //this is ok\n    },\n    dist: {\n        src: \"<%= dirs.dest %>/**/*.html\",\n        dest: \"<%= concat.css.dest %>\"\n    }\n},\n. I tried 0.7.7 with ignore_sheets: [/fonts.googleapis/] and works fine, thanks!\nThough I notice it's noticeably slower with this option and htmlroot. From ~80s to 128s.\n. I'll check again later and make a new pr if needed. :)\n. I only see 2 references in the code to \\n. My guess is that if you detect the file's line endings and use the same, the errors would go away.\n. Thanks for looking into this.\nYour approach only fixes the tests, if the source files use LF. uncss does not respect the line endings; it just uses LF.\nYou can see the tests still fail if you have autocrlf set in git.\n. There are still 4 failing tests using the latest master.\n. @giakki: since we can't see the full error on AppVeyor, this is what I get with the current master:\n```\n  60 passing (36s)\n  3 failing\n1) Pages should resemble the reference Bootstrap:\n     Uncaught AssertionError: expected C:\\Users\\xmr\\Desktop\\uncss\\tests\\output\\bootstrap\\jumbotron.html to resemble http://getbootstrap.com/examples/jumbotron/\n     misMatchPercentage: undefined\n     The screenshots can be located at C:\\Users\\xmr\\Desktop\\uncss\\node_modules\\chai-resemble\\screenshots\n2) Pages should resemble the reference Github pages:\n     Uncaught AssertionError: expected C:\\Users\\xmr\\Desktop\\uncss\\tests\\output\\gh-pages\\index.html to resemble http://giakki.github.io/uncss/\n     misMatchPercentage: undefined\n     The screenshots can be located at C:\\Users\\xmr\\Desktop\\uncss\\node_modules\\chai-resemble\\screenshots\n3) Pages should resemble the reference Selectors:\n     Uncaught AssertionError: expected C:\\Users\\xmr\\Desktop\\uncss\\tests\\selectors\\index.html to resemble C:\\Users\\xmr\\Desktop\\uncss\\tests\\output\\selectors\\index.html\n     misMatchPercentage: 1.2466666666666666\n     The screenshots can be located at C:\\Users\\xmr\\Desktop\\uncss\\node_modules\\chai-resemble\\screenshots\n```\nLooking at the screenshots, it's like the stylesheets aren't even loaded, see:\n\n\n\n. I'll check it out later and let you know.\nThe abs call might be overzealous here indeed.\nOn Dec 9, 2014 10:20 PM, \"Giacomo Martino\" notifications@github.com wrote:\n\nI finally found out that the problem is simply that, for whatever reason,\nif we open a page with an absolute path, PhantomJS fails to load the\nstylesheets associated with it. Since this happens only on Windows, I\npresume it is a bug with PhantomJS?\nIf we switch from\nexpect(abs('...')).to.resemble(...\nto\nexpect('tests/...').to.resemble(...\nall the tests pass.\nDo we even need abs?\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/39#issuecomment-66350338.\n. You couldn't wait :p\n\nThanks for looking into it. I hope we'll get the other blocking issues\nsorted too soon!\nOn Dec 9, 2014 10:41 PM, \"Giacomo Martino\" notifications@github.com wrote:\n\nClosed #39 https://github.com/giakki/uncss/issues/39 via b1a599e\nhttps://github.com/giakki/uncss/commit/b1a599e6ee8949e45d757b3affb4d44307529b47\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/39#event-205115413.\n. Thanks!\n. :+1: \n\nI had noticed it too and forgot to make a PR.\n. BTW, the Bootstrap tests need to be updated.\n. OK I will remove it then.\n. Done.\n. No worries, @giakki.\nBTW, that one failing test must be a one time thing since this PR passed the tests.\n. We had a little miscommunication it seems :P\nI meant the Travis tests passed for the PR. On Windows #39 is still valid.\n. ```\nC:\\Users\\xmr\\Desktop\\uncss>npm test\n\nuncss@0.8.1 test C:\\Users\\xmr\\Desktop\\uncss\ngrunt test\n\nRunning \"jshint:all\" (jshint) task\n\n\n12 files lint free.\n\n\nRunning \"mochacov:unit\" (mochacov) task\nOptions\n    \u221a options.stylesheets should override  tags\n    \u221a options.ignoreSheets should be respected\n    \u221a options.raw should be added to the processed CSS\n    \u221a options.ignore should be added to the output and accept a regex\n    \u221a options.htmlroot should be respected\n    \u221a options.urls should be processed\n    \u221a options.media should default to screen, all\n    \u221a options.media should be configurable\n    \u221a options.report should generate report object\nError reporting\n    \u221a No callback\n    \u221a Invalid options.stylesheets\n    \u221a Invalid options.stylesheets with url\n    \u221a Invalid options.raw\n    \u221a No stylesheet found should output an error\n    \u221a Outputs PhantomJS errors\n    \u221a Outputs css-parse errors\n    \u221a Report should be generated only if specified\nCompile the CSS of an html page passed by path\n    \u221a Should compile two stylesheets into one and keep the media query\nPhantomJS\n    \u221a Should process CSS\n    \u221a Should exit only when JS evaluation has finished\n    \u221a Should not wait for timeouts by default\n    \u221a Should respect options.timeout (5594ms)\nSelectors\n    \u221a Should output expected adjacent\n    \u221a Should not output unused adjacent\n    \u221a Should output expected child\n    \u221a Should not output unused child\n    \u221a Should output expected classes\n    \u221a Should not output unused classes\n    \u221a Should output expected complex\n    \u221a Should not output unused complex\n    \u221a Should output expected elements\n    \u221a Should not output unused elements\n    \u221a Should output expected generalsibling\n    \u221a Should not output unused generalsibling\n    \u221a Should output expected ids\n    \u221a Should not output unused ids\n    \u221a Should output expected mediaqueries\n    \u221a Should not output unused mediaqueries\n    \u221a Should output expected not\n    \u221a Should not output unused not\n    \u221a Should output expected nthchild\n    \u221a Should not output unused nthchild\n    \u221a Should output expected nthoftype\n    \u221a Should not output unused nthoftype\n    \u221a Should output expected pseudo\n    \u221a Should not output unused pseudo\n    \u221a Should output expected vendor\nCompile the CSS of an html page passed by url\n    \u221a Accepts an array of urls (3765ms)\n    \u221a Deals with CSS files linked with absolute url\n    \u221a Deals with relative options.stylesheets when using urls\n    \u221a Deals with absolute options.stylesheets when using urls\nPages should resemble the reference\n    1) Bootstrap\n    2) Github pages\n    \u221a Selectors\n52 passing (1m)\n  2 failing\n1) Pages should resemble the reference Bootstrap:\n     Uncaught AssertionError: expected C:\\Users\\xmr\\Desktop\\uncss\\tests\\output\\bootstrap\\jumbotron.html to resemble http://getbootstrap.com/examples/jumbotron/\n     misMatchPercentage: undefined\n     The screenshots can be located at C:\\Users\\xmr\\Desktop\\uncss\\node_modules\\chai-resemble\\screenshots\n2) Pages should resemble the reference Github pages:\n     Uncaught AssertionError: expected C:\\Users\\xmr\\Desktop\\uncss\\tests\\output\\gh-pages\\index.html to resemble http://giakki.github.io/uncss/\n     misMatchPercentage: undefined\n     The screenshots can be located at C:\\Users\\xmr\\Desktop\\uncss\\node_modules\\chai-resemble\\screenshots\nWarning:  Use --force to continue.\nAborted due to warnings.\nExecution Time (2014-05-21 17:37:27 UTC)\nmochacov:unit  1m 7.1s  \u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 99%\nTotal 1m 7.7s\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\n. No worries, it's only 2 tests knowingly failing on Windows only :)\n. @sparanoid: you should have made your changes either upstream (here) or fork the repo instead of creating a new one. What you did is basically useless for the majority of users.... Not sure. Maybe a new option to feed the HTML files to uncss?. @giakki: https://github.com/giakki/uncss/commit/db7415a8a4c6ed5a831b3b6a09cfe15802f2333d\nSame issue.\n. Well, it should be; it passes CSSLint. You can try the repo I use for this and see for yourself :)\nI still use 0.8.1 with grunt-uncss due to that issue. Perhaps you could publish an beta for people to try? I can then make a grunt-uncss branch for testing.\n. I'll try later again the master branch and let you know. Last time I tried\nit I was getting errors other than this like $ not found.\nOn Dec 27, 2014 7:03 PM, \"Giacomo Martino\" notifications@github.com wrote:\n\nUpdate: it works fine from the CLI. Perhaps it's a problem with\ngrunt-uncss?\nWhat I did:\nnpm install uncss\nnode_modules/uncss/bin/uncss site/*/_.html --htmlroot=\"source\" --stylesheets=\"/assets/css/bootstrap.css,/assets/css/font-awesome.css,/assets/css/jquery.fancybox-thumbs.css,/assets/css/jquery.fancybox.css,/assets/css/style.css\"\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/76#issuecomment-68183854.\n. Allright I'll make a branch in grunt uncss later and see how things will go.\nOn Dec 27, 2014 7:46 PM, \"Giacomo Martino\" notifications@github.com wrote:\nYup, I noticed that, too.\nI published 0.11.0 in the meantime, since we had already enough changes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/76#issuecomment-68185015.\n. https://github.com/addyosmani/grunt-uncss/compare/update-uncss\nhttps://ci.appveyor.com/project/addyosmani/grunt-uncss/build/14\n\nI still get the same errors I got before with the mpc-hc.org repository.\n```\nRunning \"uncss:dist\" (uncss) task\nReferenceError: Can't find variable: $\nlocal:230\nReferenceError: Can't find variable: $\nlocal:338\nReferenceError: Can't find variable: $\nlocal:365\nReferenceError: Can't find variable: $\nlocal:299\n  local:304\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\nExecution Time (2014-12-27 20:52:12 UTC)\njekyll:site  5.4s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 64%\nuncss:dist     3s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 35%\nTotal 8.5s\nC:\\Users\\xmr\\Desktop\\mpc-hc.org>\n```\nCan you have a look @giakki?\n. If i switch the jQuery protocol relative link to http or https in C:\\Users\\xmr\\Desktop\\mpc-hc.org\\source_includes\\footer.html I get:\n```\nRunning \"uncss:dist\" (uncss) task\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nlocal:243\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nlocal:378\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\n```\nAnd if I use <link rel=\"stylesheet\" href=\"http://assets/css/pack.css\"> in C:\\Users\\xmr\\Desktop\\mpc-hc.org\\source_includes\\header.html:\nRunning \"uncss:dist\" (uncss) task\nFatal error: getaddrinfo ENOTFOUND\n. @giakki: even using CLI gives those errors on WIndows with this repo although the resulting CSS seems to be OK?\n```\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nlocal:243\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nlocal:378\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\n/ uncss> filename: source/assets/css/bootstrap.css /\nfoo\n```\nhttps://gist.github.com/XhmikosR/cc9ebec79b0daad9d089\n. Can't it use the htmlroot option if specified?\n. @giakki: isn't this related to #31?\n. This fails atm since https://github.com/giakki/chai-resemble needs to be updated to the latest phantom-js too.\n. Still getting this with 0.10.\n. Closing in favor of #76.\n. https://travis-ci.org/mpc-hc/mpc-hc.org/builds/40411510\nSame error as I get on my Windows dev VM.\n. I think at this point we need @giakki to focus on finishing the phridge branch so that we don't have 2 places to do things. Then we need to make sure we manage to fix those long awaiting bugs so that we can finaly upgrade from 0.8.1.\nFor the time being I have rebased the phridge branch and if @giakki confirms it's OK I will force push it to this repository.\n. All the issues are present with 0.10.\nOn Dec 21, 2014 7:54 PM, \"Ben Briggs\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR Any updates? I noticed the error\nin your second comment was identical to #76\nhttps://github.com/giakki/uncss/issues/76, also...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/98#issuecomment-67778264.\n. https://travis-ci.org/mpc-hc/mpc-hc.org/builds/45239650 from https://github.com/mpc-hc/mpc-hc.org/compare/update-uncss\n\nSo, I don't get the EventEmitter warning but it fails with the same errors as on my Windows 7 dev VM: https://github.com/giakki/uncss/issues/76#issuecomment-68189910\n. Tests fail with this change.\n. @giakki: this is obsolete now, isn't it?\n. The issues I have reported are all still valid, unfortunately, even with 0.9.1.\nhttps://github.com/giakki/uncss/issues/98\nhttps://github.com/giakki/uncss/issues/97\nAnd even with the phridge branch we have new issues: 1 and 2...\n. I'm in the process of setting up AppVeyor for grunt-uncss so that we have Windows testing.\n. I guess so now that IE conditionals are basically ignored after IE 11.. PR updated. How about the questions in my OP?\n. @giakki: the only change you need to make in the AppVeyor project settings is enable the option Skip branches without appveyor.yml.\nPR updated with just running npm test instead of grunt test and I kept node.js 0.11. I'll update the Travis config in a new PR later.\n. I wonder, can't you do what you need with underscore instead of adding yet another dependency?\n. You'll also need to fetch and rebase :)\n. It seems tests fail  https://travis-ci.org/giakki/uncss/jobs/43370196\n. @ben-eb: can you fetch and rebase from upstream/master?\n. Yeah. Fetch upstream and rebase against it. Then force push.\nOn Dec 9, 2014 10:36 PM, \"Ben Briggs\" notifications@github.com wrote:\n\nOn my fork?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/115#issuecomment-66353026.\n. Hmm, this break the resemble tests. If you update the gh-pages branch after this goes in, it should be fixed.\n. You shouldn't need to do this; that branch should be rebased or whatever @giakki does to keep it in sync with master.\n. Just saying, that in Git, with two branches, this is just wrong. You aren't supposed to backport stuff like this.\n. Again, this is wrong since you merged https://github.com/giakki/uncss/commit/4f8911b7d5d0e9f5184bfba6e71c35af786277e0. But anyway, your repo, your choice.\n. Just do a rebase in that branch against master and skip any useless patches :)\n. On a side note, @giakki, maybe we should move and rename https://github.com/giakki/uncss/blob/master/tests/zzz_resemble.js#L11 somewhere shared by all tests?\n. @kokororin: bump for feedback ^^\n. Awesome, thanks!\n\nSo after that we only have these 2\njson\n\"space-in-brackets\": [2, \"never\"],\n\"key-spacing\": [2, {\"beforeColon\": false, \"afterColon\": true}],\nOn a side note, I'll try to export the unrelated changes from the first patch and merge to master, then rebase and update this branch. But I'll wait until you are done with your changes so that there are no conflicts.\nAnd then we can merge it <3\n. Yeah, I just saw that now. Perhaps we should stick with lowercase variable name and just disable that eslint warning for now (just comment it out).\n. Cool, I'll rebase and tweak some stuff probably tomorrow and let you know.\nOn Dec 26, 2014 7:51 PM, \"Giacomo Martino\" notifications@github.com wrote:\n\nShould be ok now. [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/132#issuecomment-68150776.\n. @giakki: rebased and cleaned up. I still think we should enable the commented out stuff for consistency, but I'll leave that for you to decide.\n. Looking good, keep the fixes coming :)\n\nWhen you are done, squash any patches that can be squashed or just CC me and I'll do it.\n. OK, just leave it in there in case this changes in the future. How about key-spacing?\n. I can do it now.\nWe can always tweak the settings later anyway.\n. Done!\nOn a side note, you forgot to add the email you use on your GitHub account and thus your commits aren't linked to your account :/\n. I have 2 small patches I will push here, so wait a few minutes :)\n. OK, now I think I'm done for the today :)\n. I wish AppVeyor was faster :/ It's almost 10 times slower than Travis... /CC @FeodorFitsner\n. https://github.com/giakki/uncss/compare/0.10.0...master\nSo yeah ;)\n/CC @giakki for closing or not the issue.\n. @FeodorFitsner: I just pushed a new branch named \"tests\" without any other changes pushed on master and AppVeyor is building two builds \nhttps://ci.appveyor.com/project/giakki/uncss/build/80\nhttps://ci.appveyor.com/project/giakki/uncss/build/81\nThis is an old issue BTW.\n. @FeodorFitsner: can't you filter the events or something? There's no point in having two build for the same thing apart from slowing things down...\n. Weird, only Windows fails :/\n. Let me try something first.\n. @giakki: https://ci.appveyor.com/project/giakki/uncss/build/113\nJust ping me to rebase the branch before merging it.\n. @FeodorFitsner: we really need to get node.js 0.10 that console fix. Can you report it upstream, please?\n. @giakki: rebased. I didn't squash the patches because I didn't know if you want to or not.\n. If it's just backporting that patch, it shouldn't be hard. I added that issue to my watch list, thanks.\n. @giakki: using this branch on my mpc-hc.org repository\n```\nRunning \"uncss:dist\" (uncss) task\nReferenceError: Can't find variable: $\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/2013/02/25/binaries-are-signed/index.html:230\nReferenceError: Can't find variable: $\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/downloads/index.html:299\n  file:///C:/Users/xmr/Desktop/mpc-hc.org/_site/downloads/index.html:304\nReferenceError: Can't find variable: $\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/index.html:338\nReferenceError: Can't find variable: $\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/index.html:365\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\nExecution Time (2014-12-29 10:00:10 UTC)\njekyll:site         5s  \u2588\u2588 4%\nuncss:dist      2m 15s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 96%\nTotal 2m 20.1s\n```\nIt's way slower and (still fails as expected).\nIf I switch all relative paths then\n```\nRunning \"uncss:dist\" (uncss) task\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/2013/02/25/binaries-are-signed/index.html:243\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nFatal error: UnCSS: could not open C:\\Users\\xmr\\Desktop\\mpc-hc.org_site\\C:\\Users\\xmr\\Desktop\\mpc-hc.org_site\\2008\\01\\19\\what-are-the-differences-between-guliverkli2-and-mpc-hc\\assets\\css\\pack.css\nExecution Time (2014-12-29 10:06:29 UTC)\nclean:dist   94ms  \u2588 1%\njekyll:site  4.9s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 63%\nuncss:dist   2.7s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 35%\nTotal 7.8s\n```\n. Do you think it's 100% an issue with the parser? I mean, it sounds like a big trouble which would be a pity to go through without first being sure it's the cause :)\nNow, correct me if I'm wrong, but the other issues I get regarding absolute paths are irrelevant to the parser, right? I mean, it must be, since 0.8.1 works fine with the same source. Perhaps if you fix those, the call stack issue would go away too? (though it's doubtful)\n. The grunt plugin basically does\n``` js\ntry {\n    uncss( src, options, function ( error, output, report ) {\n        if ( error ) {\n            throw error;\n        }\n    grunt.file.write( f.dest, output );\n\n    grunt.log.writeln('File ' + chalk.cyan( f.dest ) + ' created: ' + maxmin( report.original, output, options.report === 'gzip' ) );\n\n    done();\n});\n\n} catch ( e ) {\n    var err = new Error( 'Uncss failed.' );\n    if ( e.msg ) {\n        err.message += ', ' + e.msg + '.';\n    }\n    err.origError = e;\n    grunt.log.warn( 'Uncssing source \"' + src + '\" failed.' );\n    grunt.fail.warn( err );\n}\n```\nIf you could fix the absolute paths issue, we should be able to get more people to look into it. I, for one, use absolute paths in all the projects I use grunt-uncss.\n/CC @addyosmani for his thoughts.\n. @giakki: confirmed the fix about the paths!\nNow, I clearly get the maximum call stack size error.\n```\nRunning \"uncss:dist\" (uncss) task\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/2013/02/25/binaries-are-signed/index.html:243\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nTypeError: 'undefined' is not a function (evaluating '$(\".fancybox-thumb\").fancybox')\nfile:///C:/Users/xmr/Desktop/mpc-hc.org/_site/index.html:378\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2\n  http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js:2 in J\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\n```\n. Err, you are right, I misread the cmd output :/\nIt's weird that with 0.8.1 I have none of these issues; that's the reason we still use 0.8.1 in the grunt plugin.\n. I say we go with css 1.6.0 if it really fixes all the issues and then see if it's worth switch to another parser maybe.\nI will try this branch later on my dev VM and let you know.\n. Can someone try the gulp plugin too? IIRC it's using 0.8.1 too.\nOn Dec 30, 2014 8:58 PM, \"Giacomo Martino\" notifications@github.com wrote:\n\n@ben-eb https://github.com/ben-eb there are two problems actually:\n- The CSS, before parsing, is 123.434 Kb. I tried stepping trough the\n  debugger inside the parsing function, but I gave up after a while.\n- The problem appears only with grunt-uncss, not from the CLI, which\n  is the strangest thing here.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/135#issuecomment-68385491.\n. How about using \"os\" instead of process platform?\n\nBTW I still want to test this when I'm back on my dev machine just in case.\nOn Dec 30, 2014 11:28 PM, \"Coveralls\" notifications@github.com wrote:\n\n[image: Coverage Status] https://coveralls.io/builds/1675199\nChanges Unknown when pulling 24a9e82\nhttps://github.com/giakki/uncss/commit/24a9e82b42116ab645882e806418e66d5e787ef9\non phantom into * on master*.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/135#issuecomment-68400399.\n. Personally, I think it makes more sense to have the requires on top; it's\neasier for maintenance IMHO.\nOn Dec 30, 2014 11:43 PM, \"Coveralls\" notifications@github.com wrote:\n[image: Coverage Status] https://coveralls.io/builds/1675266\nChanges Unknown when pulling 5b84ccb\nhttps://github.com/giakki/uncss/commit/5b84ccbac8a9621f98f4d9f34901b0df3aaf9265\non phantom into * on master*.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/135#issuecomment-68401829.\n. @giakki:\n\n```\nRunning \"uncss:dist\" (uncss) task\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\nExecution Time (2014-12-30 22:46:12 UTC)\njekyll:site   5.7s  \u2588\u2588\u2588\u2588\u2588\u2588 11%\nuncss:dist   47.7s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 89%\nTotal 53.5s\n```\nSo, still slow and still fails with the same error. But no paths issue.\n. Hmm, seemed to work fine with 0.8.1 without being so slow?\nThe performance hit here is too big...\nOn Dec 31, 2014 1:35 AM, \"Giacomo Martino\" notifications@github.com wrote:\n\nI know about the performance hit, but it's the price for being able to\nload external Javascript properly ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/135#issuecomment-68410841.\n. See http://jekyll-windows.juthilo.com/.\n. @giakki:\n\n```\nRunning \"uncss:dist\" (uncss) task\nFatal error: uncss/node_modules/css: unable to parse undefined:\nMaximum call stack size exceeded\nExecution Time (2014-12-31 13:35:56 UTC)\njekyll:site   5.7s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 17%\nuncss:dist   26.8s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 82%\nTotal 32.8s\n```\n. I know, I just pasted the relevant bit to see the time spent ;)\n. I confirm it now works fine on Windows with my repo. It seems to be still slower than 0.8.1 though.\nThis branch:\nExecution Time (2015-01-02 12:20:27 UTC)\njekyll:site     6.1s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 17%\nuncss:dist     27.4s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 78%\nuglify:minify  438ms  \u2588 1%\nhtmlmin:dist   640ms  \u2588 2%\nTotal 35.1s\nUsing 0.8.1:\nExecution Time (2015-01-02 12:23:14 UTC)\njekyll:site     5.1s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 49%\nuncss:dist      3.8s  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 36%\nuglify:minify  422ms  \u2588\u2588 4%\nusemin:html    156ms  \u2588 1%\nhtmlmin:dist   625ms  \u2588\u2588\u2588 6%\nTotal 10.5s\n. @ben-eb: yes, I think the next release should be good to use. Only issue left is the slowdown.\n. Is this fixed? If so I should revert the grunt-uncss change.. Yeah, i already reverted this https://github.com/addyosmani/grunt-uncss/commit/cb270c5a09904cd2a928cafe2ced7bf06e55d9b7. While the idea seems nice, it's hard to stay up to date with all the frameworks and their JS selectors...\n. Again, it's not a foolproof solution. The tool should extract the selectors used.\n. It's a semi-measure. Javascript inserted selectors are so common nowadays.\n. We could put this in README.md.\nAgain, I still don't think it's worth maintaining a list but I guess it's better than nothing.\n. It's not my choice because personally I find this bad l. It beats the point\nof uncss if we are going to ignore selectors like that.\nRegardless, I will add it in the wiki and we'll see how maintained it the\npage will be.\nOn Jun 21, 2016 14:39, \"Ryan Zimmerman\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR I question the wisdom of putting\nthis in the README. It would work for now, but this section could get to be\npretty long if you have a list for Bootstrap v3 & v4, Foundation,\nMaterialize, ... you get the idea. It's up to you though.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/giakki/uncss/issues/139#issuecomment-227414857, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAVVtci0BHP7jUo71WeM1gZfZjjgyOueks5qN82KgaJpZM4DN7iF\n.\n. That is not the case for Bootstrap that I can speak of.\n. @RyanZim: https://github.com/giakki/uncss/wiki/Using-uncss-with-Bootstrap\n. @giakki: is this still an issue?\n. Closing this since we switched to jsdom.. Why would one want this?\n. @giakki: I still get the same error we got with 2.1.0.\n\nRunning \"uncss:dist\" (uncss) task\nFatal error: uncss/node_modules/css: unable to parse undefined: Maximum call stack size exceeded\nHave you tried reporting the issue upstream?\nEDIT:\nHmm https://github.com/reworkcss/css/issues/56. So I guess we should try PostCSS.\n. @ben-eb: have you tried making the switch? Not sure how complex it will be...\n. I meant if you tried switching to it for uncss :)\nI'm all for it especially since it is way more actively developed.\nOn Feb 28, 2015 12:26 AM, \"Ben Briggs\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR I'm actually using PostCSS for\nanother project; the parser is up to twice as fast as the css module, and\nits way of handling plugins is done in a very modular way. From my initial\nexperiments with it, it seems like it would be a good fit, especially as\nthey are adding support for asynchronous transformations with promises.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/151#issuecomment-76484505.\n. Don't get me wrong, but Git and GitHub don't really require collaborator status unless one needs to handle releases too. Or there are no other people to handle your contributions, but that's a future reference anyway.\n\nAs for the rest, sure they can be removed if the parser does things right and has a similar functionality.\nAs for cssnano, I'll personally keep using clean-css which is still better in compression and speed and more mature. It lacks other stuff but that's not for this issue.\nThat being said, I'd definitely be interested in a PR for this to see how things work. I expect it to be better than now, but that's just an assumption at this point.\n. Fixed in recent patches by @mikelambert !\n. For that specific error, try using paths like /foo/bar.js instead of foo/bar.js.\nFor the question itself, wait for @giakki.\n. @giakki: I added a simple replace to fix the Windows tests. Alternatively, we could change the test to contain and remove the line breaks. It's your call :)\n. Is this still the case with the latest release?\n. Closing since this isn't directly related to uncss but dependency related. Feel free to make a PR to add the info to README.md if it's still valid in the latest release.\n. Works perfectly fine here\n```\nC:\\Users\\xmr\\Desktop\\uncss>node -v && npm -v\nv0.12.5\n2.11.2\nC:\\Users\\xmr\\Desktop\\uncss>node bin\\uncss http://getbootstrap.com/examples/jumbo\ntron/ > unuse.css\n```\n. No idea to be honest. Are you able to access that link via the browser?\nMaybe @giakki has a better idea.\n. @pfrankov: please fetch and rebase.\n/CC @giakki for quick review.\n. @pfrankov: @giakki seems busy with real life and I don't see him reviewing this. So, be patient.\n. @mikelambert: shouldn't this be closed now with jsdom?. We no longer use phantom.js.. Is this still the case with the latest release?\n. I don't think this would help. If one is using the ignore option properly, there's no need for this.\n. @elamperti: there's also #195.\n. @charaplessa: please fix the lint errors and squash the patch.\n. I personally don't get the purpose of this patch. You can match specific selectors already.\n. Should be fixed by #211.\n. @jayfk: can you fix the tests?\n. @mikelambert: I think this was fixed by your patch in https://github.com/giakki/uncss/pull/211, right?\n. BTW this is duplicate of #199 \n. @mikelambert: is there any noticeable slowdown from this change?\n. I'd say we revisit that in a future PR.\n. @giakki: any objections to this?\n. Great job @mikelambert! I'll wait for @giakki to review this.\n. @giakki: this should be merged first since #214 depends on it.\n. Wasn't peerDependencies dropped in npm 3?\n. I'd say it's OK to drop 0.10 support if @giakki agrees too.\n. @giakki: it might be worth giving @mikelambert push rights.\n. @giakki: @mikelambert mentions above that he fixed 0.10 support so we should be OK for now.\n. 1. I'm not sure the file patterns part is needed.\n2. Can you remove that double space before URL while at it?\n3. Please add [ci skip] in your commit message.\n. So, we just need a new test for protocol URLs?\n/CC @giakki \n. @mikelambert: but things will work for protocol relative URLs, like before, or not?\n. I might have misunderstood this issue. Anyway, feel free to merge.\n. @mikelambert: any chance that we switch to phantomjs-prebuilt?\n. Hmm, scratch that, it's actually phridge that references it.\n. Perhaps we can remove some of the dependencies too?\n/CC @mikelambert \nOn a side note, @giakki, how about we test from newer to older versions? 5, 4, 0.12.\n. OK, I pushed a couple of patches to this branch. Feel free to add anything to it.\nAbout the dependencies, I was referring to object-assign.\n. So, any ideas, guys? Is this because of https://github.com/giakki/uncss/commit/62145b351fa9eedccdd8eeb5b8d5f14db72e4100 and it just didn't show the errors with 0.12.1?\n. Nope, that is the source obviously. It's just a Jekyll include.\n. Yeah. The dest dir has 52 HTML files and jQuery is loaded in all of them.\n\nSearch \"jquery.min.js\" (52 hits in 52 files)\n\n0.12.1 doesn't throw those errors.\n. See https://travis-ci.org/mpc-hc/mpc-hc.org/builds/114187093 and https://travis-ci.org/mpc-hc/mpc-hc.org/builds/114187157. The first is with grunt-uncss 0.4.4, which is using uncss 0.12.1, the latter is with uncss from master, but happens with 0.13.0 too.\n. I know the procedure, and I have tried to isolate this but it's hard. That is why I decided to make an issue in case someone else has better luck.\nThe thing is I get such parsing errors in other projects too.\n. What I can say for sure is that if i remove https://github.com/mpc-hc/mpc-hc.org/blob/master/source/_includes/fancybox.html the error goes away, i.e. I don't see any other parsing errors.\nI tried even doing this\nhtml\n<script>\n    $(document).ready(function () {\n        $(\".thumbnail\").fancybox();\n    });\n</script>\nstill the same error. It's like phantomjs doesn't like fancybox  :/\n. @giakki: so, do you have any ideas what's going on here? I looked at https://github.com/giakki/uncss/compare/0.12.1...0.13.0 and the only change I can think of is https://github.com/giakki/uncss/commit/b44948b20de34368a8772e0c954e24015bdc45c4 or https://github.com/giakki/uncss/commit/62145b351fa9eedccdd8eeb5b8d5f14db72e4100\nI have tried everything I could think of. The type error is thrown with fancybox regardless that jQuery is loaded and the call to it is fine.\n. Something else I noticed, is that if I include the fancybox snippet in pack.js then I don't get the error either.\n. @jegtnes: just to confirm, can you try 0.12.1? That version shouldn't give the error, or at least it doesn't for me.\n. That's weird because in my case 0.12 works fine.\nOn Apr 6, 2016 00:56, \"Alex Jegtnes\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR Sorry, missed this message. When\noriginally reported I tried this in both 0.12.1 and 0.13 with the same\nnoisy output.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/220#issuecomment-206000177\n. @mikelambert:\n\n``` html\n<!doctype html>\n\n\n\nuncss TypeError demo\n\n",
    "coveralls": "\nCoverage remained the same when pulling 690384e05c5b31c79c0a8cc0f42ddb262a62b8d2 on XhmikosR:master into 3b9cfe886f467cccdc3e45ed68926bdf2ecb5e79 on giakki:master.\n. \nCoverage remained the same when pulling b5d70728a23dd682547cb5dd4909aa8677fca9d1 on XhmikosR:master into c77420a2cf5f6586876dc345054635d49b8929dc on giakki:master.\n. \nCoverage remained the same when pulling f06d5b5ec35cb01237520f5ef5b5b8aeea0155c0 on XhmikosR:master into 8a159fc4e0df16d9e23501906d79141e2fd24251 on giakki:master.\n. \nCoverage remained the same when pulling 2b08b40b33c7657e728594e578120ec7a51fbaf7 on XhmikosR:master into 8a159fc4e0df16d9e23501906d79141e2fd24251 on giakki:master.\n. \nCoverage remained the same when pulling 785f6e9bc557fddf361c29b8d3b13b1a50ec3ee4 on XhmikosR:patch-1 into 0f9ce08d8e0f4ba15578215d006fce816e7dd76d on giakki:master.\n. \nChanges Unknown when pulling cea1964763f6cdc7b1ec6943d6c2649ac6118676 on duereg:master into * on giakki:master*.\n. \nChanges Unknown when pulling e9b83631abee2e22f91ea3046284c20c525d1e03 on stevemao:patch-1 into * on giakki:master*.\n. \nCoverage remained the same when pulling 231856d5b10dcdcd4bfb3f6fcc81969e307b5695 on XhmikosR:readme into 199e34cf2b32bd598fb72cce845ed060d3286480 on giakki:master.\n. \nCoverage decreased (-1.33%) when pulling e97a01e4fb907d924eead04e7220a9adbc4de4f6 on ducksoupdev:master into 199e34cf2b32bd598fb72cce845ed060d3286480 on giakki:master.\n. \nCoverage increased (+0.04%) when pulling bdf8cd4b02531eac63e30564d0e1400903ecff9d on ben-eb:glob-patch into b2a65b6f4c7f789f1a625f429a6f2c8870656a14 on giakki:master.\n. \nCoverage remained the same when pulling 9bf5b859b9fb4c2e2c0359c145e71154fe619a80 on ben-eb:svg-badges into b2a65b6f4c7f789f1a625f429a6f2c8870656a14 on giakki:master.\n. \nCoverage remained the same when pulling 861a980be7e39f7de32058f4d1e1f36a3c268403 on Maks3w:patch-1 into 043510f3d98d6c6b06f7d9bc9dad4df18e6272d6 on giakki:master.\n. \nCoverage decreased (-1.24%) when pulling ed5b2a01d53b716f682c4f97cfb8d2a62dbbf3cc on csbun:master into 7744770d6f7e6948e1ec0bd65f424f89e7488879 on giakki:master.\n. \nCoverage remained the same when pulling 2f163b439c63b371e9d5e9280e3e8a481dd77649 on XhmikosR:appveyor into 59883d85b3ccf5c6932fc739a725049cfc7f2f08 on giakki:master.\n. \nCoverage remained the same when pulling ce73866701306173055605538a54235dd100546e on XhmikosR:appveyor into 3d462c956a77be26e912ee76849d44b518b1c4e8 on giakki:master.\n. \nCoverage remained the same when pulling 6d724438c5d9dc451b9457975eea52cddbc497a9 on XhmikosR:appveyor into 3d462c956a77be26e912ee76849d44b518b1c4e8 on giakki:master.\n. \nCoverage remained the same when pulling 4cdafecc5f9a9aa7c66fee250b54fa9584d31985 on XhmikosR:deps into 59883d85b3ccf5c6932fc739a725049cfc7f2f08 on giakki:master.\n. \nCoverage decreased (-0.06%) when pulling 13d054b00af27af8222ba2a446ba1b9420027e58 on ben-eb:simplify-options into 59883d85b3ccf5c6932fc739a725049cfc7f2f08 on giakki:master.\n. \nCoverage decreased (-0.01%) when pulling bf5ff15444fc84109c7a3ddcabaaa451880dc294 on ben-eb:is-url into 59883d85b3ccf5c6932fc739a725049cfc7f2f08 on giakki:master.\n. \nCoverage remained the same when pulling a6019692768022cfc1a51dd3454401eb8600cafd on ben-eb:target-support into 59883d85b3ccf5c6932fc739a725049cfc7f2f08 on giakki:master.\n. \nCoverage remained the same when pulling f8ce615b192ad77887f596bc45e3f2e65db288a4 on XhmikosR:travis into 3d462c956a77be26e912ee76849d44b518b1c4e8 on giakki:master.\n. \nCoverage remained the same when pulling 43c1e31b8b43e0d4a236d71a6f9bf0023bdd3d68 on XhmikosR:travis into 5f20e2b3d4d8df5a50ff04d2b2727aebd8741ee3 on giakki:master.\n. \nCoverage remained the same when pulling 959af6ebc9e76729f1c85d4ce404e2c5e9f3cee5 on XhmikosR:camelcase into 597b268126fac6df8b8f6e4ade5fb7a601d79e56 on giakki:master.\n. \nCoverage remained the same when pulling 608d3e8d7c253c70e0621d1eff6d3f65394f49ab on XhmikosR:path.join into 597b268126fac6df8b8f6e4ade5fb7a601d79e56 on giakki:master.\n. \nCoverage remained the same when pulling 4a2c9097f4567048d1ba7bb5c8e9e15e3ee08302 on XhmikosR:banner into 597b268126fac6df8b8f6e4ade5fb7a601d79e56 on giakki:master.\n. \nCoverage remained the same when pulling 69332861f4b3cdb687ebd538725ada8771e2772f on XhmikosR:deps into 5d6d119150a963117417e62692e13ef0af253d56 on giakki:master.\n. \nCoverage remained the same when pulling c5e5ffe872b0dbc8e24636d703b752df139613da on XhmikosR:use-isX into 5d6d119150a963117417e62692e13ef0af253d56 on giakki:master.\n. \nChanges Unknown when pulling d1e4861fca83fe9218e4fa6e188852750e6b0ab8 on eslint into * on master*.\n. \nCoverage remained the same when pulling beb6c2d9e976553d07b105e4df7108449c019152 on tests into 81083eb150dfd34bbb3ab6a814f3b944d6c04c19 on master.\n. \nChanges Unknown when pulling 9050de26ece8b0a1757a2af2ccaa666777634ae1 on phantom into * on master*.\n. \nCoverage remained the same when pulling 3fda1684228259515f10b1064335a0809e826bb0 on phantom into ada28e5d4f1137a09c6f260b3777ceec404388e1 on master.\n. \nCoverage remained the same when pulling 4dd25f28a1b4f232f670402b4cf8fdb0ea9b7216 on temp into a77fb2d496dd194b2b84c1c0bb2358b9711c24e7 on master.\n. \nCoverage remained the same at 100.0% when pulling 5584859c8b60bd9c7fd7dbd892a5ca37e66d1152 on ben-eb:length-cleanup into ca476017bb4fc37d21a819e575e577b2772ed4e9 on giakki:master.\n. \nCoverage remained the same at 100.0% when pulling ee4bfbc7b96da77877b08d0d517bb80e1753164a on ben-eb:phantom-cleanup into ca476017bb4fc37d21a819e575e577b2772ed4e9 on giakki:master.\n. \nCoverage remained the same at 100.0% when pulling fb4ef00f40b96a62f50d32009a1fac2cdef2d7ad on levineuland:master into bfc95ad1a61f7b98b123d67ef1b30fa54fbc1fab on giakki:master.\n. \nCoverage remained the same at 100.0% when pulling 43639264e1be1389d0768f12eadb283b7c6d01bb on uncssrc-report into a1b7b7abc8e0269885f04e4f7628e400b3f07e40 on master.\n. \nCoverage remained the same at 100.0% when pulling 43639264e1be1389d0768f12eadb283b7c6d01bb on uncssrc-report into a1b7b7abc8e0269885f04e4f7628e400b3f07e40 on master.\n. \nCoverage increased (+1.7%) to 98.347% when pulling ea8649ebc65d30c5197ae7a37cd86ee0c17fe0b9 on tobek:master into 50cb679572d4723315f02c7e7fdbdaadf32021d0 on giakki:master.\n. \nCoverage remained the same at 96.68% when pulling 21dfd56109dc9fde5547bd5e7190a48b5f0544da on RyanZim:postcss into 50cb679572d4723315f02c7e7fdbdaadf32021d0 on giakki:master.\n. \nCoverage remained the same at 96.25% when pulling e8c22ee7c2eda7edb8543991d4a2fab92d7f47e9 on RyanZim:postcss into 059b18de948017a424e758667b953bae9a8a865d on giakki:master.\n. \nCoverage remained the same at 96.735% when pulling b2c143361c11bb9a00d555b9ad7214c4accdf999 on res-not-found into 7bf4a93afdd1c3853386b45e640f6b04ed44cc6f on master.\n. \nCoverage increased (+0.03%) to 96.281% when pulling bf97b98c8e811b38c8e48045fe47555b87df6ccd on RyanZim:anims into 22e99a8d0a61b7516338f64918ee372c9d3a7072 on giakki:master.\n. \nCoverage increased (+0.02%) to 96.266% when pulling 6cc3ff28b639e698bd52b516d987ae76d02baeea on RyanZim:pcss-list into 22e99a8d0a61b7516338f64918ee372c9d3a7072 on giakki:master.\n. \nCoverage remained the same at 96.266% when pulling f53ca85ebebedb2684a7f7198bc61c68498d0b1c on RyanZim:docs into aea178e95c9215fa98f7b6071dac9969f8be2227 on giakki:master.\n. \nCoverage increased (+0.4%) to 96.68% when pulling 624006c64fd88d42c238fe7ec29176908e340870 on RyanZim:tests into 558312b0c234a73add85b242f07de005f2f98af3 on giakki:master.\n. \nCoverage increased (+0.05%) to 96.735% when pulling 7a1e1cfc9532946fec1f69869c23dc785f0058c5 on mikelambert:serialized into d99d29238804ac7bcf8e2484994aff7b3b585e5f on giakki:master.\n. \nCoverage remained the same at 96.735% when pulling b6d6a3eccaf622bfdb5cb3a67640c9e0d24fa20a on mikelambert:master into bb01ea7cf7d68cac7440ad88364003232fcdca36 on giakki:master.\n. \nCoverage remained the same at 96.735% when pulling 37c56863c109447aa94a659106b497d49ad99ce9 on bump-tests-timeout into 9d696247593a111afbe1557cf30b54dd633b1385 on master.\n. \nCoverage remained the same at 96.735% when pulling 537b4c645256e8293f4345aa8427aace3029c7be on pconerly:issue-254-getAllSelectors-fix into ac2103a5d27dbb71d8fafb54cf5acb25a9cce90f on giakki:master.\n. \nCoverage increased (+0.01%) to 96.748% when pulling 37f007e736df65bc96004ba7d267774b7edb7d19 on pconerly:add-unused-selectors-to-report into 045a4eedae2843781e02cd7782d598d7657fd059 on giakki:master.\n. \nCoverage increased (+0.01%) to 96.761% when pulling 82ac626b7ec2d4a17329424f20c20c2d9cd48d09 on simi:no-banner into 37730d3a1b1eb232704791ab419e5be5c34cbd8f on giakki:master.\n. \n\nCoverage increased (+0.01%) to 96.761% when pulling 66cf707343c30e5856ea3c8fc07833e29b745a49 on simi:no-banner into 1520785035cfcd2ed533eb4dafa8d8803940c438 on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling 6258e6cf8ec37131b28dc33c1759532690be6f70 on vseventer:jsdom into 37730d3a1b1eb232704791ab419e5be5c34cbd8f on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling e109852f700e8fc3a29abbe10bf17b9f68320920 on vseventer:jsdom into 37730d3a1b1eb232704791ab419e5be5c34cbd8f on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling e109852f700e8fc3a29abbe10bf17b9f68320920 on vseventer:jsdom into 37730d3a1b1eb232704791ab419e5be5c34cbd8f on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling e109852f700e8fc3a29abbe10bf17b9f68320920 on vseventer:jsdom into 37730d3a1b1eb232704791ab419e5be5c34cbd8f on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling 6dffb723d0b84b90b182f83cf33398e72bef8cfd on vseventer:jsdom into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling 6dffb723d0b84b90b182f83cf33398e72bef8cfd on vseventer:jsdom into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nCoverage increased (+0.2%) to 96.983% when pulling 6dffb723d0b84b90b182f83cf33398e72bef8cfd on vseventer:jsdom into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nChanges Unknown when pulling 5537959ec75680b09cb590178f258944d65ecb52 on barnabycolby:phridge-args-bug into  on giakki:master.\n. \n\nChanges Unknown when pulling 5537959ec75680b09cb590178f258944d65ecb52 on barnabycolby:phridge-args-bug into  on giakki:master.\n. \n\nChanges Unknown when pulling 5537959ec75680b09cb590178f258944d65ecb52 on barnabycolby:phridge-args-bug into  on giakki:master.\n. \n\nCoverage remained the same at 96.748% when pulling f66c18b53b35d22872d5d0975f3e8d32b2acd434 on flip-it:patch-1 into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nCoverage decreased (-1.1%) to 95.635% when pulling 7070deb8ff8159df3bddf79cdcc0299c85a94100 on StrohhutMicha:extend-uncss-ingore-comment into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nCoverage remained the same at 96.748% when pulling e0af9edb18e32f0c75000fb14a7fe26da18d704c on RyanZim:postcss6 into 7d31a1ff067ae028c0dcff6d11869947eb95dcd7 on giakki:master.\n. \n\nCoverage remained the same at 96.996% when pulling 2b4968722c0cf9ca081ad0868d3fdff16bf1df81 on bbarr:master into eab053d5cf49c981d0b929593574ccddec0a17f6 on giakki:master.\n. \n\nCoverage increased (+0.3%) to 97.328% when pulling e59c067eebb882a9e8bdf9e3f8a870fc2fbc6cff on bbarr:master into af2bc116c5f34d7e0025e417e2eb4ad0fe0188ae on giakki:master.\n. \n\nCoverage increased (+0.3%) to 97.328% when pulling e59c067eebb882a9e8bdf9e3f8a870fc2fbc6cff on bbarr:master into af2bc116c5f34d7e0025e417e2eb4ad0fe0188ae on giakki:master.\n. \n\nCoverage remained the same at 97.328% when pulling e23db9ed4a7b58445f3cec00a55c1bce780f9351 on update-jsdom into e0c4243a89b4a0cbf0fd6a9097092df84cb141d6 on master.\n. \n\nCoverage remained the same at 97.328% when pulling c43804a7edd5c1ee7bb6fde9963fb619dc208020 on omitjserrors into c4333d2bf20914a536e804d12695095e56564411 on master.\n. \n\nCoverage increased (+0.07%) to 97.398% when pulling ab01a8dcb528f2f1be46af896de62d347c3169ef on uncss-ignore-block into 62a6841c423e019595204e1f476cdd0b8a821e9b on master.\n. \n\nCoverage increased (+1.8%) to 98.901% when pulling c2e9ddf6e7e78885af94a99c59346a18728e70b0 on #228 into e7aba63301e762997ca1abb82e64e46aaf2b170f on master.\n. \n\nCoverage remained the same at 97.328% when pulling 788c2eb24ba11c9ce467673cb89596f427f83a64 on corpulentcoffee:form-validation-pseudo-classes into 62a6841c423e019595204e1f476cdd0b8a821e9b on giakki:master.\n. \n\nCoverage decreased (-0.3%) to 97.059% when pulling 80254866ee6ee4c25ef3dcf238a1d11951ae03f4 on develop-ryanzim into 10c4337c973d1fc091556f467ba4ca9f3485a82e on develop.\n. \n\nCoverage remained the same at 97.398% when pulling 536077cfc30323591838504281bd03412308fe46 on docs into acb09f289e2cdda02cb591575440d822fc4c0aa3 on master.\n. \n\nCoverage remained the same at 97.059% when pulling 85de1e26672b6e47040cdb81ca015f4ce9865090 on keyframes into dfcf98e98ddd1fce81cf5c00cb63876e501032d1 on develop.\n. \n\nCoverage remained the same at 97.398% when pulling 940e60fc8f92918cba5e1e24b7b75fecff33515d on AhsenKh:patch-1 into 61f27b747de3797e91617ba69ee68582bc9de858 on giakki:master.\n. \n\nCoverage remained the same at 97.059% when pulling 02339d1c3675f6f751898ebcc383c65aeb4d35e2 on bbeesley:useragent into 4cb60b884b2693d0f9b222a0fbe772e4a8d5995e on giakki:develop.\n. \n\nCoverage remained the same at 97.059% when pulling f61b6e29826aad68b8fab69aacab68ffd9ac2f11 on bbeesley:useragent into 555993ba6b5eb3a567abbdd765b5034e69a97076 on giakki:develop.\n. \n\nCoverage decreased (-0.3%) to 97.059% when pulling 8f7b346c5c67716171ffdfe8167d10ad36c6416b on develop into 0170fe1a843c7c6d90c89647ece20c80558b141f on master.\n. \n\nCoverage remained the same at 97.398% when pulling 41220ff7b1927190d873f571c93da3796860a6db on joostlawerman:master into 61f27b747de3797e91617ba69ee68582bc9de858 on giakki:master.\n. \n\nCoverage remained the same at 97.059% when pulling 8329b1e916c499cc640558bd28bde8f2bbd0d9aa on deps into ebdc0d48596437961a296868338f26bb6e220267 on master.\n. \n\nCoverage increased (+1.8%) to 98.901% when pulling e2d0ff5f83d40a5fe7137b65a108cf1c7302c11c on tobek:master into e7aba63301e762997ca1abb82e64e46aaf2b170f on giakki:master.\n. \n\nCoverage increased (+0.06%) to 97.122% when pulling cbdfdab7737616b7025df90bd58b792b86efbd7f on corpulentcoffee:depseudify-via-psp into e7aba63301e762997ca1abb82e64e46aaf2b170f on giakki:master.\n. \n\nCoverage increased (+0.06%) to 97.122% when pulling 4816231bddb1d86a94552be1881ec4d01e4cac15 on corpulentcoffee:depseudify-via-psp into e7aba63301e762997ca1abb82e64e46aaf2b170f on giakki:master.\n. \n\nCoverage remained the same at 97.122% when pulling 4ccf44a57e71230acb37ba5568235ed6142b8804 on spookyUnknownUser:master into 6ca3dd3b472b963239c3347c92a192d84f4fe5ea on giakki:master.\n. ## Pull Request Test Coverage Report for Build 762\n\n0 of 0 (NaN%) changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 95.283%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 760: |  0.0% |\n| Covered Lines: | 270 |\n| Relevant Lines: | 278 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 769\n\n5 of 5 (100.0%) changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.1%) to 95.381%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 760: |  0.1% |\n| Covered Lines: | 275 |\n| Relevant Lines: | 283 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 776\n\n0 of 0 (NaN%) changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 97.248%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 773: |  0.0% |\n| Covered Lines: | 281 |\n| Relevant Lines: | 284 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 782\n\n5 of 9 (55.56%)  changed or added relevant lines in 3 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage decreased (-1.09%) to 96.163%\n\n\n|  Changes Missing Coverage | Covered Lines | Changed/Added Lines | % |\n| :-----|--------------|--------|---: |\n| src/lib.js | 3 | 4 | 75.0%\n| src/jsdom.js | 0 | 3 | 0.0%\n | **Total:** | **5** | **9** | **55.56%** | \n|  Totals |  |\n| :-- | --: |\n| Change from base Build 773: |  -1.09% |\n| Covered Lines: | 282 |\n| Relevant Lines: | 289 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 783\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 97.248%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 773: |  0.0% |\n| Covered Lines: | 281 |\n| Relevant Lines: | 284 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 788\n\n1 of 1 (100.0%)  changed or added relevant line in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.006%) to 97.254%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 773: |  0.006% |\n| Covered Lines: | 282 |\n| Relevant Lines: | 285 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 787\n\n4 of 4 (100.0%)  changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.05%) to 97.297%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 773: |  0.05% |\n| Covered Lines: | 285 |\n| Relevant Lines: | 288 |\n\n\ud83d\udc9b  - Coveralls\n. ",
    "baudehlo": "Which issue is it? I thought npm was up to date for node-phantom-simple?\n. nm, I see now. I'll release to npm.\n. And done.\n. ",
    "ArmorDarks": "I wonder, why does it output such strange font-faces, why just doesn't copy them to output file as they are?\n. I think technically it's right that uncss doesn't parse conditional comments, because, well, those are comments, they are non-existent for everything, but IE.\nThough, it would be good to have option to take conditional comments into account too.\n. Tested with 0.12.1 \u2014 issue still persists.\n. Seems that issue has been resolved in 0.5.1\n. Tested with 0.12.1 \u2014 issue still persists.\n. Nice, thanks!\n. Wow, glad to see some movement from phantomjs to jsdom. We're having a lot of issues with phantomjs and large codebase too, it just crashes.\nSo, it seems that jsdom branch can be used relatively safe on production for now?. Nice work!\nAny estimations when it will be released?. We've tested this branch on our relatively large project, which used PhantomJS-based uncss before.\nEverything seems to work perfectly, except few things:\n\nAlready mentioned issue with relative paths to js files\n\nMost annoying that so far it is unclear how to bypass this error.\nOur file:\nhtml\n   <script src='/assets/scripts/main.min.js'></script>\nResults in error\n```\n   Error: Could not load script: \"file:///J:/assets/scripts/main.min.js\"\n     at J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:44:23\n     at Object.check (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:88:11)\n     at Object.check (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:91:23)\n     at J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:107:12\n     at wrappedEnqueued (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:255:16)  at Request.request [as _callback] (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:203:9)\n     at Request.self.callback (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\node_modules\\request\\request.js:186:22)\n     at emitTwo (events.js:106:13)\n     at Request.emit (events.js:192:7)\n     at Request. (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\node_modules\\request\\request.js:1081:10)  at emitOne (events.js:96:13)\n     at Request.emit (events.js:189:7)\n     at Gunzip. (J:\\Work\\FASenergo\\github\\node_modules\\jsdom\\node_modules\\request\\request.js:1001:12)\n     at Object.onceWrapper (events.js:291:19)\n     at emitNone (events.js:91:20)\n     at Gunzip.emit (events.js:186:7)\n     at endReadableNT (_stream_readable.js:974:12)\n     at _combinedTickCallback (internal/process/next_tick.js:74:11)\n     at process._tickCallback (internal/process/next_tick.js:98:9)\n    { Error: ENOENT: no such file or directory, open 'J:\\assets\\scripts\\main.min.js'\n errno: -4058,\n code: 'ENOENT',\n syscall: 'open',\n path: 'J:\\\\assets\\\\scripts\\\\main.min.js' }\n\n```\n\nIf we delete links to js files, everything works fine. However, for some reason this class gets stripped in jsdom version:\n\ncss\n   svg:not(:root) { overflow: hidden; }\nI wonder why? It doesn't render :root properly?\nHowever, there are also few positive things:\n\nIt consumes two times less memory\nTurned out that PhantomJS version wrongly stripped those classes:\n\ncss\n   @media print {\n     *,\n     *:before,\n     *:after,\n     *:first-letter, /* this */\n     *:first-line /* and this */ { background: transparent !important; ... }\nIn jsdom version they preserved, as expected.. Guys, any ETA on this? :). @mikelambert I understand. We definitely need to attract more people explicitely. Not all checking issues regularly. Maybe you have someone to mention to ask for testing? Otherwise it is good practice to release new version of uncss which will echo into console invitation to tests. This might sound slightly invasive, but it's okay.\nHere are my results with uncss-jsdom 2.0.0:\n\nIssue with js files still persists. Each <script> declaration throws this error:\n\n```\n    { Error: ENOENT: no such file or directory, open 'J:\\Work\\TestProject\\github\\build\\J:\\assets\\scripts\\main.min.js'\n errno: -4058,\n code: 'ENOENT',\n syscall: 'open',\n path: 'J:\\\\Work\\\\TestProject\\\\github\\\\build\\\\J:\\\\assets\\\\scripts\\\\main.min.js' }\n\nError: Could not load script: \"file:///J:/assets/scripts/main.min.js\"\n     at J:\\Work\\TestProject\\github\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:44:23\n     at Object.check (J:\\Work\\TestProject\\github\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:89:11)\n     at ReadStream. (J:\\Work\\TestProject\\github\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:108:12)\n     at ReadStream.wrappedEnqueued (J:\\Work\\TestProject\\github\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:255:16)\n     at emitOne (events.js:96:13)\n     at ReadStream.emit (events.js:189:7)\n     at fs.js:1863:12\n     at FSReqWrap.oncomplete (fs.js:114:15)\n   ```\nNote how paths are screwed.\nHowever, now it doesn't prevent uncss-jsdom from actually finishing styles processing.\n\nOutput of processed CSS is still same as described in https://github.com/giakki/uncss/pull/280#issuecomment-283157456 and in most cases even mor accurate.\n\nUnfortunately, except related to :root elements, probably due to mentioned https://github.com/tmpvar/jsdom/issues/1750.\nFor us it's completely non-critical. Can't say for others.\n\nEverything else seems to work magnificently.. > As a temporary workaround, you can put 'svg:not(:root)' in the ignore list. Still, this should be fixed.\n\nyeap, that will do. As I've already mentioned, I don't think that it's super critical bug. But the issue with js paths seems to be.... @vseventer \n\nwhat is the absolute path to /assets/scripts/main.min.js\n\nFull path is J:/Work/TestProject/github/build/assets/scripts/main.min.js\nIn html declared as <script src='/assets/scripts/main.min.js'></script>\nDuring development all files served from J:/Work/TestProject/github/build/\n\nDid you set the htmlroot to J:\\Work\\TestProject\\github\\build?\n\nOuch, I supposed to configure htmlroot explicitly somewhere? Where should it be done? I've completely missed it.\nI'm still confused, why it's able to read CSS without htmlroot, but can't do same thing for JS?. > It depends on your environment; the same place you'd set ignore.\nAh, I see. Turned out that it was already defined in config with value build.\nuncss launched from project root with Node, J:/Work/TestProject/github/\nSo, now we need to set htmlroot to full path, like J:/Work/TestProject/github/build/?\n\nDo you use absolute paths for your CSS?\n\nYes, for images, like url(/assets/images/sprites/sprite.png).\nHowever, I do not use CSS imports, everything done through Sass, so uncss always receives single large CSS file. > The htmlroot option has no impact unless you're only passing your HTML to uncss. If you're passing the css file name directly to uncss, it doesn't use htmlroot, except for JS.\nI see. That's what exactly I'm doing \u2014 passing only HTML files to uncss.\nSorry for confusion. When I said \"so uncss always receives single large CSS file\" I meant that <link rel='stylesheet' href='/assets/styles/style.css'> always pointing to already built huge CSS file.\n\nCorrect\n\nHm, that's quite strange. Aren't there a way to avoid this, by using process.cwd() or something like this internally in uncss?\nThis isn't hard to workaround, but seems to be strange and uncommon for node modules. Usually libraries does not require to provide complete absolute paths and relying on current cwd. If something somewhere needs full path, it always can append cwd internally. Or I'm missing something?. > Sorry, my bad; htmlroot can be relative to cwd.\nYeap, tested with full paths \u2014 seems to be no difference.\nI thought that issue might be related to Grunt task. But I desicted it and simplified to plain example, and it made no difference too.\nHere is simplified case:\nGrunt task:\n```js\nconst uncss = require('uncss-jsdom')\nmodule.exports = function (grunt) {\n  grunt.registerMultiTask('uncss', 'Remove unused CSS', function () {\n    const done = this.async()\nuncss('build/index.html', { htmlroot: 'build' }, function () {\n  done()\n})\n\n})\n}\n```\n/build/index.html:\n```html\n<!doctype html>\n\n\n\n\n\n\n\n\n```\nbuild/assets/styles/style.css:\ncss\n.test { border: 0 }\nbuild/assets/scripts/main.js:\njs\nconsole.log('Hi!')\nYou can see full structure in Kotsu repository (though, you will need to build it to see build directory). In fact, you can install Kotsu, then go into /node_modules/grunt-uncss/tasks and change require inside js file to uncss-jsdom, and test whole thing with Kotsu to see same error.\nHm, I also peeked into error message again and thought \u2014 maybe it's related to OS-specific path normalization? Windows handles paths differently from Linux (uses \\ for paths instead of /), and I'm exactly on Windows 10.... So sad without this PR :(\n@vseventer Did you have any time to do test on PC?. @mikelambert Yeap, this seems to be right\n\nAFAIK, these are the only two known issues?\n\nSo far yes, That's the only ones we were able to find on our codebase. It should cover most part of use cases, but we don't use some part of CSS at all (for instance, deeply nested selectors with high specificity), so I can only hope that it won't break anything on more tricky codebases. But I think we'll never know untill will let it go into the wild, since it seems that not much people finding that PR and even less doing testing.\n\nIs it worth adding a built-in ignore to catch the svg/root issue? I'm not clear on this syntax, to know if a valid uncss ignore regex can be built that catches all these cases? (Then we could ship without breaking clients, and could just remove the built-in ignore when tmpvar/jsdom#1750 gets fixed.)\n\n\ud83d\udc4d \n\nAnd assuming it is broken on Windows (and not something unique to @ArmorDarks setup), I would consider that blocking bug (even though I also am only on Mac). @ArmorDarks , do you think you'd have any time to dig into the uncss/jsom code yourself and see where things are going wrong and where a patch might be devised? Otherwise we're just hoping @vseventer can find the time to do more testing... :)\n\nWell, I can try to do something, but I'm not very skilled JavaScript developer. So far I'm pretty much sure that it's related to Windows-specific paths formatting (\\ in paths instead of /).\nIt would be great if @vseventer or someone else on PC would finally test it, so we can be sure that it isn't related to my specific configuration, though, I tried to make build with stripped everything else, to minimize the effect of possible configuration flaws.. Hi\nThanks for update!\nIssue with local js-files finally fixed, thanks!\nBut there are a couple of other issues:\n\njsdom tries to execute everything on page, including JavaScript. If any JS file fails, obviously, jsdom will report about that issue and may fail. From one side, it is cool, since serves as additional testing tool, but the bad side comes exactly from its good side \u2014 testing should be done explicitly whenever developers chooses too, but, instead, uncss will enforce testing of all JS.\n\nNot sure we can do anything about it, though.\nI guess after merge of this PR we will receive a lot of issues in uncss repository like \"ahhh, uncss doesn't work, tons of errors!\", since it will unexpectedly shed light on all errors of local and 3rd party scripts, which won't be able properly execute in jsdom...\n\n\nLoading of remote scripts (when you have something like src='https/... somescript.js') isn't super-reliable and rarely, but fails. Well, nothing can be done about it, I guess\n\n\nThere seems to be quite specific issue with scripts, which injects something and relying on window location.\n\n\nFor instance, here is <script> which serves as loader of 3rd-party script (sorry for minification, it is as provided by service)\n```html\n   \n     ! function(t) {\n       function e() {\n         i = document.querySelectorAll(\".button-widget-open\");\n         for (var e = 0; e &lt; i.length; e++) \"true\" != i[e].getAttribute(\"init\") &amp;&amp; (options = JSON.parse(i[e].closest('.' + t).getAttribute(\"data-settings\")), i[e].setAttribute(\"onclick\", \"alert('\" + options.errorMessage + \"(0000)'); return false;\"))\n       }</p>\n<pre><code>   function o(t, e, o, n, i, r) {\n     var s = document.createElement(t);\n     for (var a in e) s.setAttribute(a, e[a]);\n     s.readyState ? s.onreadystatechange = o : (s.onload = n, s.onerror = i), r(s)\n   }\n\n   function n() {\n     for (var t = 0; t &lt; i.length; t++) {\n       var e = i[t];\n       if (\"true\" != e.getAttribute(\"init\")) {\n         options = JSON.parse(e.getAttribute(\"data-settings\"));\n         var o = new MangoWidget({\n           host: window.location.protocol + '//' + options.host,\n           id: options.id,\n           elem: e,\n           message: options.errorMessage\n         });\n         o.initWidget(), e.setAttribute(\"init\", \"true\"), i[t].setAttribute(\"onclick\", \"\")\n       }\n     }\n   }\n\n   host = window.location.protocol + \"//widgets.mango-office.ru/\";\n   var i = document.getElementsByClassName(t);\n\n   o(\"link\", {\n     rel: \"stylesheet\",\n     type: \"text/css\",\n     href: host + \"css/widget-button.css\"\n   }, function() {}, function() {}, e, function(t) {\n     document.documentElement.insertBefore(t, document.documentElement.firstChild)\n   }), o(\"script\", {\n     type: \"text/javascript\",\n     src: host + \"widgets/mango-callback.js\"\n   }, function() {\n     (\"complete\" == this.readyState || \"loaded\" == this.readyState) &amp;&amp; n()\n   }, n, e, function(t) {\n     document.documentElement.appendChild(t)\n   })\n }(\"mango-callback\");\n</code></pre>\n<p>\n   ```\nAnd it results in quite specific situation, when jsdom tries to load that resource as a local one:\n\nObviously, issue comes from window.location.protocol + '//' + options.host concatenation. I guess jsdom places as location file protocol, and it results in error. I wonder, can anything be done about this?\nIn this example we able to replace window location with hardcoded protocol, but it isn't always possible when script loaded from 3rd party.\n\njsdom seems to be not handling relative protocols\n\nhtml\n   <script src='//widget.mango-office.ru/js/c-t-w.min.js'></script>\nWill result in error: \n\nI guess because jsdom tries to resolve everything to local filesystem...\nNot big deal for us, I think those days relative protocols shouldn't be used anyway, but on some people it might come unexpectedly.\nAlso, in some cases you're unable to change relative protocol. For example, when you're fetching script from 3rd party.. All errors aren't warning, they are full errors with stack trace, but they do not crash jsdom, so uncss indeed can successfully finish. That's great!\nHowever, that's true only if it is impossible to load or execute properly remote script, but not CSS.\nFor instance, one of 3rd party scripts containing following line:\njs\nwindow.location.protocol + \"//widgets.mango-office.ru/css/widget-button.css\"\nor\njs\n\"//widgets.mango-office.ru/css/widget-button.css\"\nwill result in\nFatal error: UnCSS: could not open J:\\Work\\FASenergo\\github\\build\\widgets.mango-office.ru\\css\\widget-button.css\nEasy fix is to change relative protocol to static https, but. as I said, not all users will have access to 3rd party script content, and this concatenation, unfortunately, is very common (anti) pattern.\nThough, I guess, it can be fixed by simply ignoring such specific CSS files with something like /widgets.mango-office.ru/.\nAlso, in general, situation with window.location.protocol and relative protocols feels a bit regretful and a lot of users will bash into it, but so far I can't see too what we can do about it.. > So I wouldn't call it an anti-pattern. It certainly sucks for file:// based pages. But for any website (or script library!) that needs to work on both http and https, scheme-relative paths are actually the correct solution. But yes, it's an unfortunate consequence how they break with file:// pages. :(\nI definitely had to avoid mention about \"anti\" part to avoid this offtopic. Not, it isn't good solution. Whenever you have https resource, use https. There is no harm in serving https resource to http-served page, but there is if you use http one on https-served page. If you don't have https resource, relative protocol won't make situation with http resources served on https page any better. I think conclusions are quite straightforward.\nAnyway, it doesn't make any point, since a lot of sites still using it and we have to live with it for now.\n\nJust want to check though, does your hard-breakage error occur even with the original PhantomJS implementation? (It shouldn't)\n\nPhantomJS version raises identical error:\n\nSo, in this matter jsdom doesn't bring any breaking changes.\n. Just for the note, with jsdom uncss for some reason also strips this CSS:\ncss\n::placeholder {\n    color: #5a6066;\n    font-family: inherit;\n    font-size: 16px;\n    font-style: inherit\n}\nWhile browsers-specific placeholders will be left intact:\ncss\n::-webkit-input-placeholder {\n    color: #5a6066;\n    font-family: inherit;\n    font-size: 16px;\n    font-style: inherit\n}\n:-ms-input-placeholder {\n    color: #5a6066;\n    font-family: inherit;\n    font-size: 16px;\n    font-style: inherit\n}\nThough, jsdom seems to work with placeholder pseudo-selector.\nAs of right now, this is easily workaroundable with ignore rule.. > Why not delete it in the source html file, before you pass it to uncss?\nThe most prominent issue with that \u2014 it isn't always possible. A lot of 3rd-party scripts will load their own dependencies and additional files. You might need part of them, but the other half will yield those errors, or load something you didn't want to, at least affecting badly performance.\nBesides, with large amount of pages there is an issue with loading remote resources that you don't want \u2014 they start to fail (for instance, not all servers like 300 requests in a row), and this might lead to erroring in resources that you really wanted. But because my statement above, simple deletion of remote resources would not always solve the problem.\nHere said that skipExternalResources will continue to work, and for now it should be enough to fulfill current issue.\nAlso, here https://github.com/tmpvar/jsdom/issues/1567 said that another way is to use custom resource loader, though, I'm not aware how more difficult it is.. That would be really great. > Alternatively, I tried to provide the test page, which has proper HTML. However, looks like I use some script that is understood by modern browsers but not by jsdom, resulting in this error:\nThat error is easy to bypass by doing something like\njs\nif (window.matchMedia) {\n   // your code goes here\n}\nThen it will be simply ignored by jsdom.. ",
    "a-le": "It only outputs @rules, empty media queries and comments.\nHtml is valid.\nIt looks like phantomjs don't work in my setup : \n```\ncd /usr/local/lib/node_modules/uncss/node_modules/phantomjs/test\n../bin/phantomjs run-tests.js\noutputs weird stuff like : ????\u2022\u2665\u263b\u263b?\u263a\u263a8__TEXT: not found\n```\nDoes npm -g install uncss shipped PhantomJS linux binaries ?\nIf so it won't work as I am on freebsd.\nI guess I'll have to install it myself.\nThanks for your help !\n. I manage to install phantomjs binary compatible with my system (freebsd) to replace the one shipped during uncss install.\nWith the new binary, this command uncss -s style.css file.html behaviour is now different : it hangs  indefinitely.\nAnyway, I can use uncss with html piped to it. PhantomJS is not mandatory for me.\n. ",
    "brutalcrozt": "I still don't get the example on the read me page, what about gives them one. Which involve html and css?. ",
    "sedovsek": "Agree. Thanks for doing this.\n. Thanks for noticing. I made a PR here.\n. @fakewaffle There's an issue reported here (ability to output the removed css rules).\nThis would be very useful for maintainability.\n. @zafar-saleem, hey!\nCan you provide the minimum reproduction scenario?\nBest,\nRobert.\n. Very useful. Can't wait to try it.\n. ",
    "enapupe": "Hey.. maybe this could be accomplished by another way, not JS.. Just\ncomparing the output of the original file with the output of your\napplication, no need for JS, just diff? Editing bin/uncss ..?\n. I agree, that would make it easier to maintain and remove unused code... \nAbout \n\nThird, it seems way too complicated to be worth it. SASS/LESS have the ability to generate CSS selectors from lists (ie: looping over a list or up to a certain number) which means the tool would need a great understanding of SCSS and LESS (and Stylus and ) internals to optimize these files.\n\nWe already have vanilla file maps, it is already done, you won't have that trouble.\n. I think that pointing to the source of the generated CSS is quite enough.. Seeing uncss as a helper, not a compiler.\n. ",
    "firstactivemedia": "Would appreciate an update on this when you get chance, this would be really useful, especially from the commandline, thanks :)\n. ",
    "steffenweber": "You could continue to use stdout for the generated CSS and use stderr for status messages / statistics.\n. ",
    "Sparticuz": ":+1: \n. ",
    "jamesarosen": "My first attempt was just to calculate _.difference(report.selectors.all, report.selectors.used). The problem with that is that it doesn't take options.ignore or dePseudify into account.\n. ",
    "jepek": "+1\n. ",
    "sbeam": "this would be really useful as a way to generate a periodic report, not only usage %, but a list that designers could look over manually, since adding uncss as a post-compile workflow step won't work for us. Found the report.selectors.unused list easily enough and it looks good, but it won't make it through css.stringify without some more work (and not sure what is missing there :)\n. ",
    "ivanmayes": "+1, we have gone crazy a couple times trying to figure out why something didn't look right, would have been great to reference the removed styles.\n. Just wanted to link to someone doing this really well:\nhttps://github.com/nDmitry/grunt-autoprefixer\nthey output a file.css.diff with the additions and changes for your css.  Might be something worth considering for this option.  Makes it super easy to see and analyze changes to make adjustments if needed.\n. ",
    "AndyBean": "+1 to this great idea on reporting addition, understanding that it is perhaps contingent on other projects.\n. ",
    "silvenon": ":+1: This would be such an awesome addition.\n. ",
    "malcomio": "Yes, for sites using CSS preprocessors and compiling as part of the deployment, a simple list of the irrelevant selectors would be fantastic.\n. ",
    "corysimmons": "+1 Is there an ETA on this?\n. PurifyCSS can do this. Switched.\nhttps://github.com/purifycss/purifycss/pull/62\n. :+1: \n. PurifyCSS can do this: https://github.com/purifycss/purifycss#options-optional\n. +1\n@giakki mentioned he'd put this in the new version of UnCSS. Any ETA on that?\n. Did this ever happen? Can UnCSS parse JS templates within <script> tags now?\n. Thanks for the update Ben.\n. Nevermind, set it up as dev.foo.com in vhosts and that works.\n. Nope.\nIf I ever find time I'll write my own uncss'er. The current selection isn't very good.\n. > I want to solve this problem, but don't have the time between commercial applications :(\nme_irl\n. Sorry, I don't have access to that code anymore to test this out on. I'll try to test it out on future projects. Thanks for your work on this.\n. Use case: manually removing CSS blocks from the source (unclutter src code) that I'm not using on a project.\n. ",
    "gpszymczak": ":+1: \n. thanks @corysimmons \n. ",
    "andersonbarutti": "+1\n. ",
    "luan-nico-dextra": "That would be awesome!\n. ",
    "p-j": "Or you can turn your pattern in an array of matched files using glob\n$ npm install glob --save-dev\n``` javascript\nvar glob = require('glob');\nvar files   = glob('public/templates/*/.html');\nuncss(files, options, function (error, output) {\n    console.log(output);\n}); \n```\nIf you need more than one pattern, you can use flatten from either lodash or underscore and you should be all set.\n. Excuse me if I sound harsh but there is no need I can think of for such a feature.\nFirst, the purpose of this tool is to reduce the amount of CSS being sent to the browser\nSecond, you will always need to compile to vanilla CSS before shipping to the browser\nThird, it seems way too complicated to be worth it. SASS/LESS have the ability to generate CSS selectors from lists (ie: looping over a list or up to a certain number) which means the tool would need a great understanding of SCSS and LESS (and Stylus and ) internals to optimize these files.\nIt would be like minifying SCSS/LESS file... To what end ?\nUsing a build tool such as gulp or grunt can be really effective if your issue is \"I have yet another tool to run before shipping my CSS into production\". In this case, you could also add a couple more tasks : \n- compile SCSS/LESS to CSS\n- add vendor prefix using autoprefixr\n- remove unused css with uncss\n- compress the css with uglify\n- create a static gziped copy of the compressed file\nYou can trigger all or part of these on each change you make to your files and your all set.\nGrunt is probably easier to pickup at first, but Gulp's plugin are smaller and easier to chain which gives you more freedom.\nEdit: if you want to have a look at it, I have a static site boilerplate here that uses SCSS, uncss and gulp just like I mentioned above.\n. @enapupe so lets say you have that kind of code : \n``` scss\n// generate grid selectors\n$selectors: if($grid-classes, \"%\" \".\", \"%\")\n@for $i from 1 through length($selectors)\n  @for $j from 1 through length($numerators)\n    #{nth($selectors, $i) + nth($denominators, $j)},\n    #{nth($selectors, $i) + nth($denominators-plural, $j)}\n      width: percentage(1 / $j)\n      @extend %column\n      @for $width from 1 through $j\n        &#{nth($selectors, $i) + nth($numerators, $width)}\n          width: percentage($width / $j)\n          @extend %column\n      @for $right-left-skip from 1 through $j - 1\n        &#{nth($selectors, $i) + \"right-\" + nth($numerators, $right-left-skip)}\n          left: percentage($right-left-skip / $j)\n        &#{nth($selectors, $i) + \"left-\" + nth($numerators, $right-left-skip)}\n          right: percentage($right-left-skip / $j)\n        &#{nth($selectors, $i) + \"skip-\" + nth($numerators, $right-left-skip)}\n          margin-left: percentage($right-left-skip / $j)\n```\nsource and related doc\nIf you only use fourth and fifth how is your uncss for sass going to handle it ?\nIf you use SCSS/SASS/LESS/Stylus only for nesting and variables, yes, you can absolutely reduce the amount of code in the source file. But if you actually use for loops and class placeholders with enumerators like in the example, You'll need to run uncss on the SASS file, it will need to recognize and understand the structure, know that it shouldn't mess with it, and run on the generated css to remove the unneeded css. So uncss had to run twice for the same result as running only once on the generated css. \n. Ok, so it's for reporting more than for handling the clean-up of the source file ? It's quite different of what OP meant I think ? Maybe worth an issue of its own ?\n. ",
    "guillaumevincent": "Yes the solution works perfectly, for now I'm using your solution\nThank you @p-j \n. I had no doubt that the fault came from the me.\nThank you @esteinborn for the trick with web inspector.\n. I confirm, I doesn't use uncss anymore because my navbar is broken.\n@esteinborn solution doesn't work on firefox : http://jsbin.com/suyihoto/2/edit\n. maybe this is related : https://github.com/giakki/uncss/issues/70\nignore option is transformed in a strange array mixing RegExp and String : \nhttps://github.com/giakki/uncss/blob/master/bin/uncss#L63-L69\n[ \".fade\", \".fade.in\", \".collapse\", \".collapse.in\", \".collapsing\", \".alert-danger\", \".open\", \"/open+/\" ]\nbecome\n[ \".fade\", \".fade.in\", \".collapse\", \".collapse.in\", \".collapsing\", \".alert-danger\", \".open\", /open+/ ]\n. thank you @ben-eb \n. ",
    "mietek": "I'm getting similar error messages when using uncss-0.8.1 via gulp-uncss-0.4.5, with more than one gulp-uncss task running at the same time.  Only the first task finishes successfully.\nTraceback:\n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at process.addListener (events.js:160:15)\n    at process.on.process.addListener (node.js:773:26)\n    at /Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/node_modules/node-phantom-simple/node-phantom-simple.js:87:21\n    at Array.forEach (native)\n    at spawnPhantom (/Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/node_modules/node-phantom-simple/node-phantom-simple.js:86:31)\n    at Object.exports.create (/Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/node_modules/node-phantom-simple/node-phantom-simple.js:201:5)\n    at /Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/lib/phantom.js:37:21\n    at Object.async.whilst (/Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/node_modules/async/lib/async.js:663:13)\n    at /Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/node_modules/async/lib/async.js:667:23\n    at phantom.create.phantomPath (/Users/mietek/\u2026/node_modules/gulp-uncss/node_modules/uncss/lib/phantom.js:46:24)\n(repeats two more times)\nRequest() error evaluating createPage() call: Error: connect ECONNREFUSED\n(repeats four more times)\nWhat could cause the ECONNREFUSED?\n(See also https://github.com/ben-eb/gulp-uncss/issues/15 and https://github.com/baudehlo/node-phantom-simple/issues/2#issuecomment-53961796)\n. ",
    "toogle": "Works for me now. Thanks!\n. ",
    "andreavaghi": "after some debugging i've managed to add the css code to the error report. the line number was not easy to understand since the page have more than 10 stylesheets.\njust for info, if someone is trying to do the same thing, i've modified line 62 in the file node_modules/css/node_modules/css-parse/index.jsadding the variable cssto the error message.\nvar err = new Error(msg + ' near line ' + lineno + ':' + column + ' in ' + css);\nthanks for the reply\n. ",
    "fakewaffle": "I would certainly be interested in this.\n. What is the goal of uncss? Is it to just minimize the amount of CSS downloaded? Or, is it to make your CSS more maintainable by removing unused code?\n. ",
    "khusseini": "I don't have the files around right now but adding some markup with a css class via javascript in an html document and then run uncss. check if the class was found by it?\n. ",
    "zafar-saleem": "Solution: As my directory had some strict permission therefore when I execute above mention command with \"sudo\" then it worked.\n. ",
    "esteinborn": "Its not uncss, its user error ;)\nJust look at your DOM using web inspector. you'll see that dropdown also utilizes the \"open\" class.\nYou'll need to also ignore .open, or better yet /open+/\nsee: http://jsbin.com/suyihoto/2/edit \n. ",
    "LoveAndHappiness": "Hi there, \nI still require assistance. I tried your implementation by inclucing the ignore list, now the uncss-task of my gulpfile looks like this:\njavascript\ngulp.task('uncss', function() {\n    return gulp.src('style.css')\n        .pipe(uncss({\n            html: ['uncss/uncss.html'],\n            ignore: [\n                \".fade\",\n                \".fade.in\",\n                \".collapse\",\n                \".collapse.in\",\n                \".collapsing\",\n                \".alert-danger\",\n                \".open\",\n                \"/open+/\"\n           ]\n        }))\n        .pipe(gulp.dest(''));\n});\nBut my Navbar still doesn't work. You can see it here:\n1. http://metalotechnika.horyzon.de\nAnd here is the working part, where I didn't use uncss:\n2. http://metalotechnika.com\n. @ben-eb Yes, I see exactly what you mean. And yes I am 100% sure, that the css in the non-working version is my recompiled CSS and then ran UnCSS, since I am working with scss and have to always recompile it.\nI see tat the open class wents missing, although I added \".open\" to the ignore file, therefore I conclude the \"ignore\" part in my gulpfile must be the problem.\nAs I said, the reason those .open classes are not mentioned in my non-working example, is because uncss makes them disappear, though I have used this:\njavascript\n       .pipe(uncss({\n            html: ['uncss/uncss.html'],\n            ignore: [\n                \".fade\",\n                \".fade.in\",\n                \".collapse\",\n                \".collapse.in\",\n                \".collapsing\",\n                \".alert-danger\",\n                \".open\",\n                \"/open+/\"\n           ]\n        }))\n. @ben-eb additional information:\nI talked to @guillaumevincent and he also said, that he currently doesn't use uncss, because it doesn't seem to work with bootstraps navbar anymore. :) \nAppreciate your help\n. Splendid. Thank you ben-eb, seems to work perfectly now.\n. ",
    "7wonders": ":+1:  I also needed to add \".navbar-collapse.in\" for scrolling in collapse mode to work properly.\n. ",
    "damienh": "having had this issue today I have found that this is the best mix: \nignore: [/\\w\\.in/,\n                    \".fade\",\n                    \".collapse\",\n                    \".collapsing\",\n                    /(#|\\.)navbar(\\-[a-zA-Z]+)?/,\n                    /(#|\\.)dropdown(\\-[a-zA-Z]+)?/,\n                    /(#|\\.)(open)/,\n                    \".modal\",\n                    \".modal.fade.in\",\n                    \".modal-dialog\",\n                    \".modal-document\",\n                    \".modal-scrollbar-measure\",\n                    \".modal-backdrop.fade\",\n                    \".modal-backdrop.in\",\n                    \".modal.fade.modal-dialog\",\n                    \".modal.in.modal-dialog\",\n                    \".modal-open\",\n                    \".in\",\n                    \".modal-backdrop\"]\n. ",
    "gregbriandavis": "Anyone have a list of the classes included in a bootstrap3 carousel? \nFound answer to my question -->\nhttps://www.snip2code.com/Snippet/384946/Gruntfile-Uncss\n. ",
    "MadeByMike": "Yep, agree, list would be helpful.\n. ",
    "nickdima": "Was this implemented by any chance?\n. ",
    "raphaelokon": "Any news on this one?\n. ",
    "demohi": "wait for nex release\n. ",
    "sparanoid": "+1 for parsing inline css, I use https://github.com/sparanoid/grunt-assets-inline to inline css and js files to reduce HTTP requests, but uncss ignores inline css.\n. I just create a fork of addyosmani/grunt-uncss doing the exact same thing, but does focus on processing the inline CSS only: https://github.com/sparanoid/grunt-uncss-inline\nThis plugin do the following things:\n1. Search all <style> tags and combine all the inline CSS into one in the searching order.\n2. Pass combined inline CSS to uncss for the cleanup.\n3. Save cleaned CSS to the first <style> found in the DOM.\n4. Remove all other deprecated <style> tags.\nAny comment and suggestion are welcome.\n. @XhmikosR I just created a grunt plugin with this library to deal with inline styles, so nothing change to uncss code. It also has different purpose compared to addyosmani/grunt-uncss if you compare source code side by side you should understand.\nIt's just a quick workaround for this feature. It is not useless I think more or less it could help someone like the op since nothing update for this issue over 3 years.. @vseventer I tried the jsdom branch it's extremely fast, here's a simple benchmark tested along with grunt-uncss-inline:\njsdom:\n...\nloading grunt-uncss-inline  705ms  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 5%\nuncss_inline:dist            2.6s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 17%\nconcurrent:dist              1.9s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 12%\nTotal 15.4s\nPhantomJS:\n...\njekyll:dist            7.8s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 8%\nuncss_inline:dist  1m 19.5s  \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587 87%\nconcurrent:dist        1.7s  \u2587\u2587\u2587\u2587 2%\nTotal 1m 31.7s\nThe only downside to me is some CSS syntax cannot be parsed like @supports.. @vseventer @RyanZim sorry about that inaccurate information, I found it's not related jsdom but grunt-uncss-inline plugin after some tests, so far so good with jsdom.. ",
    "goschevski": "+1 for parsing inline css.\n. ",
    "zero-master": "+1 for parsing inline css.\n. ",
    "peixotorms": "+1 please. ",
    "citrusui": "Count me in as a supporter for inline CSS support for uncss. I currently use Jekyll's {% capture var %} to embed my styles right into the page. Since the CSS itself is so small (at 7.2K), I figured it would be easier to inline, rather than separate as its own network request.\n. Given the following output:\nhtml\n<html>\n  <head>\n    <style>\n    .red {\n      color: red;\n    }\n    .blue {\n      color: blue;\n    }\n    </style>\n  </head>\n  <body>\n    <p class=\"red\">Hello World!</p>\n  </body>\n</html>\nI'd expect uncss to produce this:\nhtml\n<html>\n  <head>\n    <style>\n    .red {\n      color: red;\n    }\n    </style>\n  </head>\n  <body>\n    <p class=\"red\">Hello World!</p>\n  </body>\n</html>\nThat's a fairly simple example, only dealing with custom classes. If you're writing * { box-sizing: border-box}, I'd expect the asterisk to be ignored (aka, never removed). Similarly, I'd expect anything -prefixed to be ignored, at least by default.\nALSO: uncss shouldn't try and rewrite inline element styles, e.g. <p style=\"color:red\">Hello</p> even if the styles are redundant or cancel each other out (<p style=\"color:red;color:blue\">Hello</p>). Neither should it rewrite any classes, even if they are .extremely-long. Main focus should be on modifying anything in <style></style> -- nothing else.. @sparanoid Nice plugin, but still too heavy for my personal use. I don\u2019t need to create Grunt or Node.js tasks just for uncss. If it had a CLI, that\u2019d be perfect. Otherwise... no.. ",
    "akhoury": "+1. ",
    "athaeryn": "Running into a very similar issue. What's the correct syntax for the --ignore flag's argument?\n. ",
    "seriema": "Maybe related, but my CSS keeps these selectors even though there are no buttons or input elements on my page:\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner { ... }\n. ",
    "letsila": "Hi !\nCombining tow classes selectors like so .first-class.second-class is still skipped. I have tried to ignore them but still doesn't work. The selectors are vanished by uncss.\n. ",
    "Hotell": "Hi guys, sry for late response.\nPhantom js version 1.9.7\nWindows 7 enterprise SP1 64x\noh and also I'm behind corporate proxy, but that's probably not related because I've setup proxy in .npmrc etc...\nthx\n. ",
    "joshas": "I have the same problem on Windows 7 too.\n. @kevva Using standard Windows command line, error still persists with node-cross-spawn.\n. ",
    "kevva": "Try this https://github.com/IndigoUnited/node-cross-spawn. Windows and spawning can sometimes cause troubles depending on what shell you're using. I can't replicate this on my Windows installation though.\nMight belong in https://github.com/baudehlo/node-phantom-simple though.\n. ",
    "gsklee": "@giakki This error shows up again when using io.js (v1.0.4).\n. Confirmed that this is an io.js (v1.0.4) specific problem; didn't happen when I used the latest node unstable version.\n. Ok cool, thanks!\n. ",
    "OleVik": "In regards to the just referenced issue, I am running gulp-uncss@1.0.5 locally in conjunction with uncss@0.13.0 globally, and get seemingly the same error as @ben-eb had back in June of 2014. See the downstream issue for a stack trace. Has anyone found a solution to it?\nUnfortunately I do not know how to debug from the trace, but as the error occurs on a fresh local installation of the project I suspect it has something to do with an uninstalled package that was dropped from my package.json.\n. ",
    "mikelambert": "This appears to be due to a half-completed installation of phantomjs-prebuilt, see this other issue for more info: https://github.com/Medium/phantomjs/issues/533\nIn my case, following these instructions fixed it for me:\n$ cd node_modules/phantomjs-prebuilt\n$ node install.js\n. Uncss runs PhantomJS to find out what classes are used, which is basically a headless webkit instance. So unfortunately any browser-specific code won't be run/detected unless it matches webkit too. So yeah, missing IE conditionals is a bug, but given the Uncss design is not really fixable. Unless someone wants to add a headless IE rendering that can be controlled/evaluated from JS.\n. Yes, that's what the patch mentioned in this issue fixed. If you look at the code for https://github.com/giakki/uncss/blob/master/src/uncss.js\nYou will see that it exports a variable called postcssPlugin:\nvar uncss = require('uncss');\nuncss.postssPlugin({html: [...]})\n. Just to followup with the original poster's question at the end. There is no integration with CasperJS inside uncss, but it would be possible to build something like that. Alternately, you could probably use CasperJS to dump out versions of the HTML after every modification, and feed those files to uncss, which would accomplish the same thing (but without needing to dig in and modify any of the uncss internals, or tie uncss to casperjs)\n. I've just created a pull request https://github.com/giakki/uncss/pull/249 that should fix the serialization issues. @corysimmons, if you're still investigating this issue, you could alternately try that tree (https://github.com/mikelambert/uncss/tree/serialized) from your gulp-uncss dependency to see if it helps your issue.\n. I have nothing further to add beyond what I said in #222 , \"if PhantomJS supports it, then I assume it's just a matter of making an option that plumbs it all the way down to our use of the PhantomJS API\" If someone wants to do that via the route proposed in #186, all the better, but I have no time to design or build such features myself, as they are not relevant for my personal use of uncss.\n. UnCSS operates on fully-rendered pages, asking the Phantom browser for what CSS classes are used.\nYou cannot pass in partial-pages templates, as they are not well-formed HTML, and may or may not work depending on how \"partial\" they are, and what Phantom is willing to accept and render. If you render a complete page and pass that in to UnCSS, does it correctly retain the 'copyright' class?\n. @DevBlaaast , can you generate the HTML pointing at an external CSS file, run the UnCSS on that? Then integrate the resulting CSS and HTML at server render time. That's what I've done in a case like that (AMP HTML requires that CSS be inlined in the HTML.)\n. @bjarnef Ah okay. Any idea what is different between Copyright and Footer? I'm sure you can do some debugging to figure it out (if the 'copyright' rule is in Footer.cshtml, does it work? What about putting footer css classes in Copyright.cshtml? Are the css classes defined differently in CSS, ie is one a child/descendent/nested selector that might be dependent on embedding?)\nAs for \"matching all pages from root\", I'm not sure how it would automatically know all the valid pages/servlets on your website? You could throw in some basic webcrawler and feed the resulting URLs in to UnCSS, or maybe autogenerate them with something akin to this pseudocode glob('./views/.cshtml').map(function(filename) {'http://localhost:50500/' + filename})?\n. \"Funny enough it does work if I just copy markup from Copyright to Footer\" should be a very big clue as to what is going wrong for you. What is special about Copyright that makes it different from Footer? (Hint: Check your filenames.)\n. They have two different extensions, but your glob you pass to UnCSS only includes one of them.\n. I think there may be a legitimate claim that uncss does not work with well with frames. Maybe that's worth a tracking bug, though this one isn't directly about that.\nIndependently, ignoring JS Isn't a feature I think is really workable to support. One could achieve it I'm this case by requesting a URL like \"/blah#skip-parent\", and check for that in the JS to avoid the parent redirect.\n. This should do what you want:\nuncss(\n  [files],\n  {\n    report: true,\n    ...\n  },\n  function (err, output, report) {\n    var all = report['selectors']['all'];\n    var used = report['selectors']['used'];\n    // var unused = all - used; (using some set subtraction, don't recall how to do this in js offhand)\n  }\n);\n. We have switched to using postcss for all processing, instead of css/css-parse. Postcss is much more robust, and should be able to handle this CSS. Feel free to try again with the github master and see if it fixes your issue.\n. Yes, my commit should have fixed this.\n. I'm not sure what you mean by \"not handle serverside files\", as uncss should be able to request web resources as well in its browser. (Though yes, there is no concept of session state as far as I can tell.) As far as passing credentials, yes that is covered by the other bug.\n. UnCSS intends to generate a new stylesheet, given an input stylesheet and html pages. Are you hoping that UnCSS would generate a new html page for you with all the style tags trimmed in-place?\nIt currently doesn't really have any mechanism for modifying/writing out html files.\nHave you considered putting the CSS in a separate file, running it through UnCSS with the relevant HTML file referenced, and then your build process generates a \"compiled\" HTML file that includes the CSS file?\n. Yup, closing.\n. uncss is not designed to be used on template fragments, just complete pages. (For my project, I am planning to render the relevant pages and run uncss against that.)\nTemplate fragments open a big can of worms, such as:\n- template fragments may not be parseable html\n- template fragments may use template macros to generate class=\"...\"\nThe existing system actually loads the pages and renders it in a browser (including running any on-load javascript that may add/remove css classes). Template fragments that attempt to be rendered like this can cause their javascript to fail horribly too.\nhttps://github.com/purifycss/purifycss might work better for you, as it appears to do more word-based matching and isn't based on whole-page-rendering-in-a-headless-browser like uncss.\n. I didn't run any benchmarks, but I wouldn't expect (and didn't see) any obvious slowdown. This regex will only apply if the pseudo-class begins with a \":\", and will abort the match quickly otherwise. So yes, it might be marginally slower, but only in proportion to the the number of vendor-specific prefixes you are using (and therefore potentially removing).\n(Though as a side note...why are we special-casing any of tthese pseudo-classes at all? Can't we just make a blanket assumption that all pseudo-classes are only relevant to the page if their parent selector is relevant? Could simplify this further by doing a /::?[a-z0-9-]+/ regex, if so.\n. Just a headsup on the test changes, postcss appears to preserve whitespace with the original files, which means running it through uncss will no longer normalize minified or unlinted CSS. This has resulted in a bunch of test data changes (I'm open to other solutions here if this bugs you, though).\n. This one is super-ceded as part of merging #214 , so will just close this one without merging.\n. Curious, should I be using peerDependencies for the postcss dependency?\n. Oh, hah, looks like I'm somehow still running npm 2 (I must have installed it ages ago, but really only started actively using npm a couple weeks ago, and must have gotten confused by the warnings I saw regarding peerDependencies).\nAlso potentially more worrisome, https://github.com/postcss/postcss says postcss doesn't work on 0.10.0 and provides a polyfill workaround. I've tried to set that up, but it still doesn't pass the travis build on 0.10.0. I suspect I'm going to need to install 0.10.0 locally to dig in before it's committable (assuming we want to retain bwcompat to 0.10.0)...but hopefully the rest of the change can be reviewed and stable in the meantime.\n. Well I got 0.10 to work, once I fixed my version comparison string.\nThough another point of mention, phantom (either our use of it, or the library itself) seems to perform very poorly with concurrency. If you combine CSS before passing to Uncss, things work fine, but if you process multiple files in parallel (as is done in webpack without a choice), execution errors and you get malformed CSS. I've solved this by serializing all Uncss use (and thus Phantom use) across Postcas plugin invocations, but technically the problem still exists with regular Uncss (I ran into this problem when using gulp based setup that ran two tasks that called Uncss in parallel)\nSo this is fixed for Postcss parallelizatiom in this pull request, but let me know if you want me to serialize it for any/all invocations altogether.\n. Can you paste the relevant lines of your gulpfile? Is this an issue of needing to add .on('error', console.log) to get better error messages from gulp pipelines?\n. Add it to the just before or just after the .pipe(...). I'm a bit unsure on the gulp semantics, myself.\n. Sorry it didn't help.\nWithout a repro case, not much to go on. My only remaining suggestion is to start chucking out large chunks of HTML/CSS until the error goes away, and then binary-tree search adding/removing chunks until you figure out what's triggering the error and have a small repro case.\n. I don't have access to a windows box to test with.\nOne possibility: We use npm's glob.sync(), and according to the documentation on https://github.com/isaacs/node-glob , it has some issues regarding backslashes. Not sure how that would play out in your relative vs absolute scenario.\nWithout a repro case, I suspect you're going to have to dig into your node_modules/uncss/src/uncss.js' getHTML or other functions to add logging and figure out exactly what's going on.\n. Uncss uses the phantom web browser to render web pages and figure out which css selectors are actually used. Yeah, a javascript error could interrupt things, same as a normal web page flow.\nAs far as why the above script src is giving you a Parse Error, it should support remote js without any issues. I suspect there's a problem with the actual contents of the js file, that the phantom (webkit) browser isn't parsing.\nMore thoughts for you:\n- Are you sure the file you are including is a js file? It appears to be general.html, which is suspicious.\n- Are you sure the js file you are including is valid js without parse errors? You didn't include the ### numbers, so I can't verify for myself.\n- Have you tried downloading the booking.com js file, and referencing that locally instead of remotely? Does it still give the same error?\n. My belief is that the existing test was flawed...we should not be supporting protocol relative URLs in the toplevel API at all, and so do not need a new test. If someone gives us a URL \"//www.google.com/app.css\", there is no way that we can fetch it, since we don't know through what port or protocol to request it.\n. Sorry, I don't really understand your question in the context of my\nexplanation. What is this \"before\" support that you want to keep working?\nIs it a fear of losing functionality we theoretically once had\n(functionally that I don't believe anyone in their right mind could have\nactually used, but was just an artifact of an overzealous test case). Or is\nthere a concrete use case you believe we need to keep supporting, and if so\ncan you describe how someone would be using those protocol urls in html\nurls without any protocol to be relative against?\n2016\u5e742\u670819\u65e5(\u91d1) 19:04 XhmikosR notifications@github.com:\n\n@mikelambert https://github.com/mikelambert: but things will work for\nprotocol relative URLs, like before, or not?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/pull/218#issuecomment-186172866.\n. Looks good to me.\n\nRe object-assign, according to http://stackoverflow.com/questions/28388885/ecmascript-6-features-available-in-node-js-0-12 , object.assign is not in node.js 0.12.\n. Because you're running uncss against all your html files.\nBut some of your html files are simple includes, and are not standalone html files that can execute properly on their own:\nhttps://github.com/mpc-hc/mpc-hc.org/blob/24e162148cfd9a842f3e28b78fb385f0256b717c/source/includes/fancybox.html\n. You sure that include is not being matched by \"<%= dirs.dest %>/*/_.html\"?\nThe error looks exactly like what you'd see if Uncss was processing an\ninclude html file that depended on Jquery, but did not import the Jquery\nlibrary explicitly...\n2016\u5e743\u67086\u65e5(\u65e5) 19:30 XhmikosR notifications@github.com:\n\nNope, that is the source obviously. It's just a Jekyll include.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/220#issuecomment-192877548.\n. No idea then.\n\nYou can of course try to isolate down to a single small html that repros\nthe issue, which is what ideally we'd request from someone asking for help\non these issues. ;)\nBut there's a year's worth of changes between 0.12 and 0.13? You could do a\nbinary-search on the changes over the past year, to figure out which change\ntriggers the error. Though that may or may not actually help fix the issue,\nand you might still need that small repro case to see what input data is\ncausing issues.\n2016\u5e743\u67087\u65e5(\u6708) 16:55 XhmikosR notifications@github.com:\n\nSee https://travis-ci.org/mpc-hc/mpc-hc.org/builds/114187093 and\nhttps://travis-ci.org/mpc-hc/mpc-hc.org/builds/114187157. The first is\nwith grunt-uncss 0.4.4, which is using uncss 0.12.1, the latter is with\nuncss from master, but happens with 0.13.0 too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/giakki/uncss/issues/220#issuecomment-193163682.\n. So what's interesting here, is that the abort-vs-cancel code should only run if ignoreRequests check passes. And ignoreRequests is /\\.css$|\\.png$|\\.gif$|\\.jpg$|\\.jpeg$|fonts\\.googleapis/. So I don't see why that would matter for the jquery js file at all...\n\nHowever, I see that you are using a file-relative URL, and the file is likely loaded locally off disk. So I wouldn't be surprised if the file:// URL checks are applying here, and according to phantom.js, it might try to rewrite them as http:// urls (which wouldn't work, and fail to load the jquery file). And a failed jquery load might result in the error you see?\nBut that's just a hypothesis here...I forget how uncss/phantom deal when it fails to load a javascript file referenced from html.\n. In your debugging, can you print ignoreRequests and url, and see what is actually running when your code attempts to run networkRequest.abort()? Is it the jquery file, or another file, that is triggering the abort/cancel for your proposed fix?\n. So if the JS is added at startup as part of page render, the browser will detect the CSS classes, and UnCSS will keep them. If they are only added in response to events, then UnCSS has no way to detect that they could be added. Trying to do this automatically is essentially an impossible task.\nAs another potential avenue for a solution here, you could generate a \"yourwebpage.html#RunForUnCSS\" of sorts (or if it doesn't work, we should add support for such a feature), where your chose of debug flags triggers all your requisite javascript handlers to add all the relevant CSS classes you like in the rendered page, so that UnCSS will retain those classes in the generated CSS.\nI'm going to mark this as closed. Please see #244 if you're curious why this is impossible to analyze JS code automatically in the general case.\n. Yes, there are many reasons why you'd use js to add classes after the page loads. I in fact use many in my own projects as well. And yup, it'd be much more useful if you could handle that all automatically, too!\nUnfortunately, you seem to miss that this is a very difficult task to do, and impossible to do correctly. You can add a js parser, and you can check for addClass and other similar names. But how deep do you want to go? For example, even this relatively straightforward code would fail to work:\n```\nfunction handleToggle(obj, visibleClass, invisibleClass) {\n  if (obj.something) {\n    obj.addClass(visibleClass);\n    obj.removeClass(invisibleClass);\n  } else {\n    obj.addClass(invisibleClass);\n    obj.removeClass(visibleClass);\n  }\n}\nhandleVisibility(h1, 'main-visible', 'main-invisible');\nhandleVisibility(h2, 'secondary-visible', 'secondary-invisible');\n```\nAnd any debug CSS classes you use would get caught by such a parser and kept:\nif (debug) {\n  obj.addClass('debugClass');\n}\n...when you actually don't want something like that in production.\nOr as another example, even bootstrap JS runs a lot of code to add/remove classes, most of which you might never use/call, but that would trigger those bootstrap CSS classes to be kept around, as a result of the bootstrap JS.\nSo yeah...I provided a workaround in the above post. If you don't like that workaround, you're welcome to tackle it yourself. You'd have to integrate a javascript parser (and trying to figure out how to work that into the webdriver-based approach the system uses), and make it an optional component (due to the false-positives and false-negatives described above). Or you can try to convince one of the other maintainers that this is worth keeping open and that they should tackle it. Either way, good luck!\n. No such feature/option right now...if PhantomJS supports it, then I assume it's just a matter of making an option that plumbs it all the way down to our use of the PhantomJS API.\n. How many CSS files are you passing through your gulp-uncss task? It may unfortunately try to run them in parallel and blow through your memory usage. FWIW, using the postcss version of uncss should fix this (if you are willing to use postcss), since I serialize execution in that pipeline.\n(I never felt comfortable doing that on raw uncss and slowing things down, but perhaps we should. Check \"serializedQueue\" in uncss.js for where this is done.)\n. I guess technically we should be supporting parallel execution requests of phantomjs by the same method I implemented it for postcss plugin (by serializing it). I was scared to do drastic changes at the time since I was new to the project, but given the support load and lack of other maintainer improvements, probably should be willing to make this trade-off...you interested? ;)\n. Grunt has a workaround fix, but gulp does not. Fixing this issue would also fix #136 and allow grunt-uncss to remove their hack.\nI have https://github.com/giakki/uncss/pull/249 which I believe should fix this, and passes all tests, but I haven't tested it in a proper parallelized environment. @Ajeetlakhani , are you interested in testing my pull request to see if it fixes your issue?\n. UnCSS works by rendering the page, which includes running all the associated JS.\nIf the JS adds the CSS tag, then UnCSS will detect the CSS as being used.\nIf the JS only runs in response to certain user input or events, then the browser has no way to detect that the CSS code will be used, and will remove it.\nNo, parsing Javascript code to understand intent is not an option. Consider:\n1) if (DEBUG) { addDebugCSSClass(element); }\n2) GetClassFromServerUrl(url, function (cssClass) {addCSSClass(cssClass); })\n3) fieldname = \"className\", AppendToField(fieldname, \" someClassName\");\n...etc... This becomes a very hairy and annoying problem very quickly.\nGoing to close this issue, as the \"parse JS\" won't be done, and the \"track CSS added through JS page load\" should already work.\n. Closing. It's possible the switch to postcss fixes keyframe handling.\n. Essentially, yes.\nHow would you recommend the Uncss code know that it's a dynamic style?\nMaybe if you prefix all dynamic styles with \"dynamic-\", it will also make it easy to make a regex selector to ignore all such styles. Does that work?\n. It doesn't need to be built-into a convention, since you can just make your own convention. Prefix everything with \"my-dynamic-prefix-\", and then add that single RegExp(\"my-dynamic-prefix\") to your list of ignores. Boom, now you have your own convention.\nCurrently, it actually does eval the js on the page, along with rendering all the html content, in an attempt to figure out what css is used. So any CSS that is stuck into fields at page startup will be detected as \"used\". (So if you want, that is another way to force UnCSS to see things as \"used\"). The problem with dynamic content, is that it requires user-input to trigger the use of the content, and our PhantomJS web browser cannot click everything on the page in all combinations, just hoping to exercise all your code paths.\n. Try: --ignore '/^.grid/'.\nBut if you're using regexes, you may want /^\\.grid/, as /^.grid/ will match agrid\n. I'll say the same thing I said in https://github.com/giakki/uncss/issues/220, if you want to give a relatively small reproducible test case, it's possible someone can look into it.\nMy guess as to the reason 0.12.1 doesn't throw these errors (this is for you too @XhmikosR) is that 0.21 just silently drops the warnings. This particular change was only included in 0.13: https://github.com/giakki/uncss/commit/62145b351fa9eedccdd8eeb5b8d5f14db72e4100\nSo you can downgrade, but I suspect you're really just hiding existing errors by doing so.\n. The above HTML file uses an async sync, meaning the calling page will not block to wait for that script to load before loading/running the rest of the page. So when the call to $('#div') occurs, there is no guarantee that the jquery code has been loaded yet. And if the jquery code has not been loaded, I would expect you to get an error very similar to Can't find variable: $.\nSo from my perspective, the above HTML file is broken code, and uncss/phantom is just errorring on the broken code.\n. Well the minimal repro example above has a bug, which uncss found. Your example in #220 is probably due to a different issue then (though due to the same issue of a jquery file not being loaded properly). I'll try to respond with some ideas in that thread.\n. You are still referencing the $ variable before jQuery is loaded, so you will still get that error. You can either write code that doesn't use $ until after the page is loaded (which your example tried but did not do), or you can stop using async (and ideally move your ",
    "boushley": "Also, having this update of a dependency as a patch version release seems odd.\n. ",
    "Batmensch": "Much appreciated!  Unfortunately, the author has already indicated that regex parsing is currently broken on the command line anyway, but I'll be glad to use this hint once he fixes it.\n. OK, I've been able to get ignore to work by using explicit syntax, ie. if I want to ignore something like \"::-webkit-scrollbar\" I can do\nuncss -i \"::-webkit-scrollbar\".  \nHowever, per the docs, I should be able to use a regex to get that one an similar ones, but I have not been able to find the correct syntax to make that work.  For instance, I want to ignore the following three similar psuedo classes:\n::-webkit-scrollbar\n::-webkit-scrollbar-track\n::-webkit-scrollbar-thumb\nWhat can I use to match all three?\n. Can no one give me a clue here?  Surely people are using regexes to (at least) deal with pseudo classes that uncss doesn't handle yet.\n. Sean, thanks for the idea, but it doesn't seem to work.  \nuncss -i \"::-webkit-scrollbar\\S\\w_\\g\"\nor\nuncss -i ::-webkit-scrollbar\\S\\w_\\g\nThe selectors that start with ::-webkit-scrollbar are not preserved.\n. Much appreciated!  Please let me know!\n. ",
    "srhise": "Similar issue, markup created dynamically via JS, e.g., image sliders, are not parsed by uncss. Makes it unusable in a lot of scenarios.\n. ",
    "JRigotti": "+1 \nAngular's ngTemplate not working either\n<script type=\"text/ng-template\" id=\"/tpl.html\">\n. ",
    "SyntaxRules": "+1\n@JRigotti Another angular use case.\nIf I have packaged html files in a template cache (put there by gulp-angular-templatecache) uncss can't read them. In the following example the css class blue would be uncss'ed away.\njs\nangular.module(\"myApp\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"aHtmlFile.html\",\"<p class=\\\"blue\\\">This is my styled paragraph</p>\");\n. ",
    "cklemming": "+1\n. ",
    "lt7": "+1\nI think my scenario is similar, I have an inline jquery script  that contains a CSS value that I'm unable to ignore via regex. I've tried using /a|\\[href|\\*=\"#\"|\\]:not|\\(|\\[href=\"#quote-carousel\"]/gmi, (and other variations) in the .ignore section but just get the following on execution - Error: Syntax error, unrecognized expression: a[href*=\"#\"]:not([href=\"#quote-carousel\"]\n. ",
    "tannerhodges": "Just got started with this and having the same issue. \nTried setting up a custom host (local.test.com) and running from the command line. Same error popped up - not sure where to go from here.\n. Just tried uncss --htmlroot . index.html > test.css and that ran fine. Just going to run off of static files for now.\n. Nope, thanks!\nNot sure what I was doing before - seems silly now. I just reinstalled and tried with a Mixture project: uncss http://localhost:7774/ > styles.css worked like a charm.\nDefinitely going to be using this a lot now. Thanks again, really appreciate it.\nUpdate: Other URLs work too. Just ran uncss http://local.test.com/ > styles.css too.\n. ",
    "cricanr": "Anyone still having this issue?\nBlockOpened: node _build/UnCss/uncss.js url=http://ww3.autoscout24.de/classified/007 file=as24.detailpagestyles.css\nwriting minified http://ww3.autoscout24.de/classified/007?no-uncss=false to file as24.detailpagestyles.css\n[Error: Status not 200]\nnode finished with exit code 0\nBlockClosed: node _build/UnCss/uncss.js url=http://ww3.autoscout24.de/classified/007 file=as24.detailpagestyles.css\nIf I test the status like: var webpage = require('webpage');\nvar page = webpage.create();\npage.open(\"http://ww3.autoscout24.de/classified/007\", function(status) { console.log('status: ' + status + ' '); }) I get success.\nBut when I try with: \npage.onResourceReceived = function(resource) {\n    console.log('Url: ' + resource.url);\n    console.log('Code: ' + resource.status);\n}\nI get most of the status codes 200, but still some 302, so just redirection.,, no 404, 500...\n. ",
    "umpirsky": "I can confirm last comment. README should be updated.\n. ",
    "maxbucknell": "I don't know what the issue is, but it's worth noting that I was able to make uncss work by manually sending it the stylesheets (-s) and removing the <head> element.\nI had to do both of these things.\n. That's bizarre. I will check what you say, but if that's true, I'd cheerfully strip JavaScript and leave stylesheets in there.\nThank you so much for figuring this out. I wouldn't have known where to start, so I'd appreciate a description of how you did it (assuming it wasn't just trying random stuff). If you're too busy, then don't worry.\n. @RyanZim Not for me. I mean, it's an issue for someone, somewhere, but @giakki pointed out a workaround that was sufficient for me.\nAre you doing a cleanup, or something? Happy for this to be closed.\n. ",
    "wulftone": "We were having the same issue, but opposite--it would not return a 200 if the stylesheet was included relative-style.  We had to switch it to an absolute path to get uncss to output anything... website worked fine when viewed in a browser or via curl.\n. ",
    "seanislegend": "Maybe something like \n/::-webkit-scrollbar\\S\\w*/g\n. ",
    "crybat": "Look at https://github.com/giakki/uncss/issues/79, I posted a regex that will prevent anything starting with :- or ::- from being removed\n. ",
    "mrzool": "@giakki Adding this syntax to the docs would be great, it took me a good while to dig it out.\n. Sorry, just realized I was looking at the wrong output file, the command above actually works.\n. ",
    "1951FDG": "This issue can be closed!\n. This issue can be closed! This enhancement is covered at https://github.com/beautify-web/js-beautify/pull/574 pull request. \n. ",
    "Maks3w": "Otherwise uncss die with the following message:\nFatal error: Cannot call method 'evaluate' of undefined\u0007\n. Another option is use the value TLSv1 but for preserve the BC I opted for any\n. ",
    "andrew-dixon": "Anyone got any ideas on this?\n. Thanks for the pointer. On my Mac (OS X 10.9.5) I had to do:\nlaunchctl limit maxfiles 2048 2048\nBefore I could issue\nulimit -n 2048\notherwise it just give me an error:\nbash: ulimit: open files: cannot modify limit: Operation not permitted\nOnce this was done, I retried and everything worked.\n. @mikelambert Problem is, from the documentation (https://www.w3.org/TR/css3-animations/#animation-shorthand-property), I don't believe that the name has to be in any particular position, the only two values that have to be in a particular order are the time references as the first is taken to be the animation-duration and the second the animation-delay. \nYou would need to parse the whole string and look for the item in the string that isn't a time definition or a valid value of animation-iteration-count, animation-direction, animation-play-state or animation-fill-mode.\nI'll have a think about it and see if I can come  up with something.. ",
    "jimmyjamieson": "Does anyone know how to fix this error on a windows machine?\n. It's the amount of url/processes windows can have open at any one time.\nThere's a fix for ubuntu as well, so it might be an option to run grunt through the vagrant box.\n. ",
    "farser": "Get a mac.. Sorry I couldn't resist.  :)\nThanks guys, this made my afternoon.\n. ",
    "csbun": "It\u2019s much appreciated if u can publish it on npm, so i can use it in my project :-)\n. ",
    "encodia": "We are on the same trouble. Do you know what error is mean?\n. Thank you @jimmyjamieson, we will use a vagrant box for this task. \nMy best.\n. ",
    "gianpaj": "+1\nanother implementation using cookies:\nhttp://stackoverflow.com/a/27178386/728287\n. ",
    "Aratramba": "same here with 0.8.1 and 0.10.0\n. ",
    "bjarnef": "I see this issue too.\nE.g. if your right after opening body tag have the following, it removes the class browserupgrade from css.\n<!--[if lt IE 8]>\n    <p class=\"browserupgrade\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>\n<![endif]-->\n. I am using gulp-uncss view razor / MVC views. I use it in an Umbraco install where the files are located in /Views/ and/Views/Partials/`folders.\nIt works with the following:\n.pipe(plugins.uncss({\n       html: ['./Views/*.cshtml', './Views/Partials/*.cshtml'],\n       ignore: ['footer .copyright', 'footer .copyright a']\n}))\nIn /View/Partials/Copyright.cshtml I have the following, but it removes css for copyright class if I not add it to the ignore list.\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n<div class=\"copyright\">\n    <div class=\"container\">\n        <span><a target=\"_blank\" href=\"http://www.mycompany.dk/\">Umbraco & Webdesign | My Company</a></span>\n    </div>\n</div>\nFurthermore it doesn't seem to like specifying **in path to .cshtml files.\nhtml: ['./Views/*.cshtml', './Views/**/*.cshtml']\nwhich returns Cannot communicate with PhantomJS process: Unknown reason\nIf I just pass in html: ['./Views/Partials/Copyright.cshtml'] it also removes styles for the class.\n. Well, it works fine for the other partials view - I am aware that some views has dynamic content, but can be ignored in those cases. But it is strange it it just Copyright.cshtml where it fails, which just content static html. In a Footer.cshtml in same folder it does retain the classes in css.\nYes, it works if I specify e.g. http://localhost:50500/but I just have to add all pages then.. is there a way to match all pages from root?\n. @mikelambert Copyright.cshtml is just the last bar here:\n\nFooter.cshtml\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n@{\n    var site = CurrentPage.Site();\n    <footer>\n        <div class=\"contact-info\">\n            <div class=\"container\">\n                <span>@site.companyName</span>\n                <span>@site.address</span>\n                <span>@site.ZipCity</span>\n                <span>Tlf: @site.phoneNumber</span>\n                <span><a href=\"mailto:@site.email\">@site.email</a></span>\n            </div>\n        </div>\n        @Html.Partial(\"Copyright\")\n    </footer>\n}\nCopyright.cshtml:\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n<div class=\"copyright\">\n    <div class=\"container\">\n        <span><a target=\"_blank\" href=\"http://www.mycompany.dk/\">Umbraco & Webdesign | My Company</a></span>\n    </div>\n</div>\nFunny enough it does work if I just copy markup from Copyright to Footer:\n@inherits Umbraco.Web.Mvc.UmbracoTemplatePage\n@{\n    var site = CurrentPage.Site();\n    <footer>\n        <div class=\"contact-info\">\n            <div class=\"container\">\n                <span>@site.companyName</span>\n                <span>@site.address</span>\n                <span>@site.ZipCity</span>\n                <span>Tlf: @site.phoneNumber</span>\n                <span><a href=\"mailto:@site.email\">@site.email</a></span>\n            </div>\n        </div>\n        <div class=\"copyright\">\n            <div class=\"container\">\n                <span><a target=\"_blank\" href=\"http://www.mycompany.dk/\">Umbraco & Webdesign | My Company</a></span>\n            </div>\n        </div>\n    </footer>\n}\nbut Footer is also added to Master.cshtml like this without issues:\n@Html.Partial(\"Menu\")\n@RenderBody()\n@Html.Partial(\"Footer\")\n. I can't see what the issue is with the file names as it is working fine without running uncss.\nIt includes Copyright partial view in Footer partial view.\nAnd all styling in included in same less file, which is compiled before running uncss.\n. Sorry, it was a typo.. both are MVC partial views, so .cshtml \nI have also passed the direct path to Copyright.cshtml, but with same result.\nhtml: ['./Views/Partials/Copyright.cshtml']\n. ",
    "jpvincent": "Hi there\nA quick note about headless IE rendering : it does exist :)\nhttp://triflejs.org/\nOf course you need a windows machin to run it but it promises to follow phantomJS API, so the integration (it one really wants to) could be done\n. ",
    "mikemellor11": "Any news on this yet?. #362 what about something like this?. So the issue with adding the relevant classes to the html just before uncss runs is this.\nSass\n```css\n.no-csscalc .myClass1{\n    width: 100%;\n}\n.no-csscalc .myClass2{\n    width: 50%;\n}\n.csscalc .myClass1{\n    width: calc(100% - 10px);\n}\n.csscalc .myClass2{\n    width: calc(50% - 10px);\n}\n```\nHtml (tags injected pre-uncss running)\nhtml\n<html class=\"no-js no-csscalc csscalc\">\n    <body>\n        <div class=\"myClass1\"></div>\n    </body>\n</html>\nThen myClass2 will remain unstripped even though it doesn't appear in the html. Which is why im thinking we'll need to strip the modernizr specific classes explicitly before doing the check against the html essentially treating them as though they're not part of the selector.. You're 100% correct, i've just updated to the latest version of the package and the classes are indeed being stripped correctly. I guess #131  would be a valid solution but in the meantime i'll add all modernizr classes directly to the html and remove them just before modernizr kicks in.. Would that option not be available as a command line parameter? I wasn't sure if that was too loose as an option giving too much control but i can look at changing it if you like.. Yeah that would work, i guess my fix was more directed at my issue #327 which i would have thought was a much more common use case. The injecting js just leaves more setup/config for an uncss user rather than providing them with an easy option for a common use case? Just my two cents.. Is this more what you had in mind?. Any updates on this? I'm currently including my fork as a git repo through npm and i'm hitting a few package-lock bugs. Could do with pointing it back at the published package.. Any chance of getting this merged in and published?. ",
    "henrjk": "This works for me now (as expected). Thank you :-)\n. ",
    "FeodorFitsner": "Yeah, this is because GitHub sends two events here: 1) push to \"tests\" branch and 2) open PR.\n. We could start from this PR: https://github.com/joyent/node/pull/7196 :)\nI'd like to do that myself, but don't have enough experience in C++.\n. ",
    "curtisblackwell": "Yes, 0.11.0.\nI wrote a dirty workaround yesterday that I'll use until I notice that it's no longer needed. Thanks for taking a look.\n. @craig-joseph-lucas It's been a while since I wrote it, but I'm pretty sure it's kind of engrained into a Grunt setup I put together for Statamic. You're free to take a look and tweak/use it, though.\nuncss.js\n. @craig-joseph-lucas Isn't Gulp also built on Node? If so, I think it should work, but I haven't dug very deep into Gulp yet \u00af(\u30c4)/\u00af.\n. ooh, good to know. I'll have to try that out so I can throw out my slop.\n. ",
    "craig-joseph-lucas": "@curtisblackwell can you provide your workaround please\n. Thanks I was actually looking for a solution that will work with Gulp\n. Looks like this problem was fixed for grunt-uncss. Any chance we can do the same solution for gulp-uncss\nhttps://github.com/addyosmani/grunt-uncss/commit/af258f0b11e9c3a472b23ea68c8c9104505cf169\n. Also does gulp-uncss support configuration like this\nfiles: {\n       'tests/output.css': 'tests/index.html',\n       'tests/output2.css': 'tests/index2.html',\n     },\n. Was there a resolution \n. ",
    "imolorhe": ":+1: \n. @XhmikosR the wiki can contain version-specific framework selectors to be ignored. Hopefully future updates to such frameworks would have a standard to how dynamically added classes are named for ease in specifying and using them.\n. @XhmikosR Don't you feel the wiki project would be alright for now, especially since the tool cannot currently extract all the selectors correctly?\n. @XhmikosR Well you're right about that.\n. ",
    "sagaio": "I'm trying to use this tool for a WordPress template which has it's own custom selectors, not selectors based on any particular framework. \nThe wiki project would be great for some. There will still be situations where new functionality will be needed to make this great tool work. I think a universal approach is the way to go to solve this.\n. ",
    "alanontheweb": "This script is amazing. I can almost use it in prod, except for this issue. Anything on the horizon for user interaction detection?\n. I think it still formats it, even if it won't remove it from the file after being minified.\n. ",
    "brettdewoody": "The issue I'm seeing in Foundation is the JS-injected classes aren't being injected. For example, I'm using Foundation's sticky top bar. Without uncss Foundation should inject several classes into HTML doc - into the body element and the nav wrapper, once the user scrolls past a certain point. I'm not seeing the classes injected after running uncss however. \nWhy would running uncss cause the JS-injected classes to not be injected?\n. Sounds like we'll need to maintain an ignore list to make UnCSS work with Zurb Foundation. Here's my current ignore array that's working for me:\nignore: [/^meta.foundation/, /f-topbar-fixed/, /contain-to-grid/, /sticky/, /fixed/]\nThe only JS module I'm using is topbar.\nAvailable as a Gist - https://gist.github.com/brettdewoody/ee8f235d418e8c08443b\n. Great idea @addyosmani. Perhaps a repo with files for each CSS/JS library? \n. ",
    "iandanforth": "@ben-eb Are you aware who's managed to do the selenium / uncss integration? That is the road I'd like to walk.\n. ",
    "crico": "Do you know any ignore list for bootstrap v2?\n. ",
    "luketeaford": "Seems like a great idea to me, but does UnCSS know about elements and classes added to the DOM with JavaScript?\nIt would be cool to have this be an optional feature. A sort of audit that would list the selectors UnCSS would optimize would allow me to feel more confident letting it rewrite.\n. ",
    "pconerly": "I love the idea of this, but I have another hairy edge-case to throw at you @ben-eb \nSometimes, to increase selector specificity, I write css like:\n.my-special-class.my-special-class\nIt's not great, but sometimes it needed if I'm doing surgical modifications of a css framework.\nWhat you'd need to do is:\n1. For each element, catalog the computed CSS\n2. Run Ben's selector optimizer\n3. Verify that the computed CSS stayed the same\nIf it helps, I've found the Firebug js code pretty useful in projects related to this. https://github.com/firebug/firebug\n. If you enable report:true and use my branch https://github.com/giakki/uncss/pull/256 then you can get a list of unused css selectors.  It's not quite what you want.\nThe source code is not very long either, you could probably download the source directly and edit it yourself to do that.\n. Thanks for the fast turn around :) \n. Thanks @mikelambert \n. I'm not a maintainer, but you should keep these settings as defaults. You can do this with:\noptions = _.assign({\n            ignoreSslErrors: 'yes',     \n            sslProtocol: 'any'\n}, options);\n. It might be more accurate to call this phantomSettings or phridgeSettings\n. Also, FYI, the project's linting rules failed the CI tests because there's a trailing comma on this line\n. ",
    "glenn-smith": "Ahh, ok. Many thanks!\n. ",
    "levineuland": "In order to use the comment method for uncss to ignore certain selectors it has to be used prior to most concat/minification/preprocessors to ensure the comments are not stripped. \ngrunt-contrib-concat, clean-css, less, and sass offer option to ignore \"loud comments\", which are standard comments that start with a \"!\". \nThis would provide much more flexibility to use uncss at various points within a build process without having to hard-code css selectors to ignore, making front end frameworks much more portable and reusable from project to project.\n. ",
    "johntrandall": "I just checked the source, and it seems that Phantom is already set to ignore SSL errors. So, as long as that is working, I guess I'm barking up the wrong tree. :(\nAny suggestions? \n. line25 in phantom.js\nShould \n// Convert to bluebird promise\nreturn new promise(function (resolve) {\n    resolve(phridge.spawn({\n        ignoreSslErrors: 'yes',\n        sslProtocol: 'any'\n    }));\n....\nbe\nignoreSslErrors: 'true',\nSorry for the speculation. I'm pretty green.\n. Thanks @ben-eb. I'll try that.\n. ",
    "abusada": "+1 i have the same problem\n. ",
    "candidosales": "+1\n. ",
    "piotrd": "I think I'm facing the same problem - I am passing a tree of local directories containing HTML files to UnCSS:\n/usr/local/lib/node_modules/uncss/node_modules/bluebird/js/main/async.js:36\n        fn = function () { throw arg; };\n                                 ^\nError: PhantomJS: Cannot open about:blank\n    at reject (/usr/local/lib/node_modules/uncss/node_modules/phridge/lib/phantom/start.js:71)\n    at :4\n    at :/modules/webpage.js:281\n    -----------------------------------------------------------------------\n    at Phantom._send (/usr/local/lib/node_modules/uncss/node_modules/phridge/lib/Phantom.js:165:20)\n    at Page.run (/usr/local/lib/node_modules/uncss/node_modules/phridge/lib/Page.js:62:25)\n    at /usr/local/lib/node_modules/uncss/src/phantom.js:125:21\n    at tryCatchReject (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:845:30)\n    at runContinuation1 (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:804:4)\n    at Fulfilled.when (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:592:4)\n    at Pending.run (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/makePromise.js:483:13)\n    at Scheduler._drain (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/Scheduler.js:62:19)\n    at Scheduler.drain (/usr/local/lib/node_modules/uncss/node_modules/phridge/node_modules/when/lib/Scheduler.js:27:9)\n    at process._tickCallback (node.js:442:13)\nEverything works fine when I point UnCSS to a single directory containing HTML files. But if there is another directory inside, UnCSS fails with the error shown above.\n. @arielespinoza: o_O \n\n. ",
    "overclokk": "+1 I have the same problem\n. ",
    "elamperti": "Temporary workaround: version 0.10.0 works correctly for me.\n. This problem was introduced on commit 9b032eeb where the function fromLocal() was changed in src/phantom.js. Turning it back to its original form solves this issue, though that would disable the feature introduced in the broken commit (reporting errors' filenames).\nI think the problem is around lines 131~140 of the current version of src/phantom.js, probably (but I'm not entirely sure) because it is trying to open a local path as a URL (which would be an invalid URL) and thus failing to fetch it.\nI propose a patch in PR #192 so uncss doesn't break until it's properly fixed.\n. @opoani which version of uncss are you using? This was fixed in 0.13.0\n. ",
    "leetomblin": "Couldn't seem to get 0.10.0 working with grunt.\nAny other fix for this?\n. ",
    "HugoHeneault": "Looking for a fix too... Any updates?\n. I can't believe this bug it still there... :sob: \nUncss is so awesome I'm having a hard time not using it... \n. Awesome! :smiley: \n. ",
    "Metrakit": "I have the same problem when I'm using symfony 2 with the twig template on a Vagrant\n. ",
    "arielespinoza": "Where can get the version 0.10.0 ??\n. Thanks!\nWhen I scan .html files works, but if I change to a php file throws me the error \"phantomJS: can not open about: blank\"\nFor example:\nuncss: {\n         dist: {\n             files: [\n                 { src: 'dist/index.php', dest: 'dist/css/tidy.css' }\n             ]\n         }\n     }\n. ",
    "AlexDubstone": "Same here, unfortunately. Works with html files but as soon as I switch to a php file I get phantomJS: can not open about: blank\n. +1\n. ",
    "PixelbarEupen": "Got the same problem. Could not find any fix\n. ",
    "yumyo": "same here : (\n. ",
    "monte-hayward": "Same is true for markdown .md files.\nVerifying property uncss.dist exists in config...OK\nFiles: 404.md, README.md, about.md, contact.md, index.md, pci-preflight.md, privacy.md, services.md -> assets/css/main.min.css\nOptions: report=false, ignore=[\"iframe\",\"about:blank\"], ignoreSheets=[{}], timeout=1000, htmlroot=\"public\"\nFatal error: PhantomJS: Cannot open about:blank\n``\n. ",
    "pascalhofmann": "Got the same problem. :(\n. ",
    "envomer": "Same issue here as well. any bugfix yet??\n. ",
    "garethtalty": "+1\n. ",
    "inkcreativ": "Please is there anyone here who have the answer?\ntxs\n. ",
    "adamkarb": "This is devilish\n. ",
    "anthonyjfio": "+1 same problem with command line interface\n. ",
    "AndrewLosseff": "I have the same problem :( \"Error: PhantomJS: Cannot open about:blank\"\nIt works with HTML and doesn't with PHP.\nI hope somebody could help))\n. ",
    "mikegyi": "+1 \nHad to temporarily change from .php to .html - wasn't too much fuss!\n. ",
    "chucklima": "Same problem here.\nI had bad characters in directory names - trademark, registered, single ticks.\n. ",
    "markau": "@elamperti Thank you, your patch got .cshtml files working for me.\n. Whilst the 0.13.0 update did fix the phantomJS error for .cshtml files (for gulp-uncss at least), the result was a lot of missing css from my bundled output. I expect this is due to the fact that .cshtml are html templates and not rendered html output; with the added complication of _Layout.cshtml (i.e. master templates). PhantomJS may have trouble parsing the tempates to find the pertinent CSS. I did not have time to investigate further. FYI @opoani.\n. ",
    "Rodrigo54": "@elamperti Thank you, I managed to use all my .php files with the changes of your pull request #192 \n. ",
    "opoani": "Anyone managed it to work with .cshtml files ? I constantly get:\nFatal error: PhantomJS: Cannot open about:blank\n. Im using 0.13.0 as far as i can tell \n. Im using it together with grunt-uncss ,\n        uncss: {\n  dist: {\n    files: [\n      {\n        src: './Views/*/.cshtml',\n        dest: './Stylesheets/tidy/tidy.css',\n            options: {\n                      report: 'min' \n                  }\n      }\n    ]\n  }\n}\n. ",
    "dr-martin": "@opoani Updating to 0.13.0 fix my problem, thanks!\n. +1 too, i have this situation, same here. ",
    "tonai": "Hi !\nAny news about the postcss transition ?\nThanks,\n. ",
    "dbkaplun": "+1\n. ",
    "doodzik": "+1\n. ",
    "stubailo": "This would make it much easier to use this plugin with Meteor.\n. ",
    "phlorie": "Hi\nThis is a question I am also interested about.\nWith frameworks and CMS these days, it is very rare to have a big project with just static HTML pages. It is common to use includes.\nEvery loaded CSS is in a file containing only the header and that file is loaded for all the pages. There is no CSS classes in the file containing the reference to the CSS files, even for a simple CMS like Wordpress.\nI'd like to know if there is a solution in that situation. A need would not only be to remove unused classes but also duplicated code or what has been overwritten. Is that something uncss does?\nThanks in advance.\n. ",
    "cortopy": "@phlorie would that work with phtml though? I've just tried php2html using gulp and it only gives error. \n. ",
    "szepeviktor": "@giakki When do you receive the \u20ac10?\n. > On the 10th date of the following month\n. If the css contains ..\\ uncss leaves it in the absolute URL.\n\n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken neh\u00e9z g\u00e9pelni. \nEln\u00e9z\u00e9st!\nOn March 8, 2015 5:14:21 PM CET, Giacomo Martino notifications@github.com wrote:\n\nNot sure what you're asking. Is UnCSS reporting some errors? If you're\nfetching resources over the network, it should be able to find them\nwithout any help :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/giakki/uncss/issues/156#issuecomment-77758276\n. I would agree....\n\nThis site http://refresh-sf.com/ has YUI and CleanCSS. None of them normalizes the relative URL.\nDo you know any minifier that does it?\ncss\na {\n    background: url(http://chrisdry.wp/wp-content/themes/scribe/css/../fonts/Pe-icon-7-stroke.eot);\n}\n. This lib seem very small. (IDN, query string etc. normalization)\n. Nodejs has it!\n``` js\n\nvar url=require('url');\nundefined\nurl.resolve('http://example.com/two', '../one')\n'http://example.com/one'\n``\n. Please consider addingurl.resolve()`.\nThank you!\n. OK\n. \n",
    "cyberwombat": "Ah the brace was just a typo. The @media print is probably not necessary but it's a 3rd party css so I would rather not modify it - it gets fetched and inserted into my build. I'll figure out a workaround until PostCSS. Thanks\n. Ah sorry. Ill go ahead a close this. I stopped using any kind of uncss or similar setup - was having to hard of a time not stripping css I wanted to keep - things in modals or dynamically inserted. \n. ",
    "penrillian-barry": "Thanks Ben. So I could string all of my classes into a single regex like this:\noptions: {\n    ignore: [\n        /.(odd|even|yes|no|otherClass|andAnotherClass)/\n    ]\n}\nThanks,\nBarry\n. Thanks Ben. I now have it working the way I want :-)\n. ",
    "digiltd": "Here is a great guide about WordPress and uncss:\nhttps://gladdy.uk/blog/2014/04/13/using-uncss-and-grunt-uncss-with-wordpress/\n. Though I had more luck ripping my local site with httrack, and then running the task on the exported html.\n. ",
    "dingo-d": "Thanks, I'll check this out :)\n. ",
    "mrhyde": "Same here, just tested it with lastest version and task just stuck, which makes it unusable on projects with Cyrillic path\n. Just tested it with lastes version, problem is still present. Any comment on this?\n. Upgrading to latest release gets me Fatal error: write EPIPE error.\n. Seems like issue was resolved. At least I'm not getting any problems with //\n. ",
    "gpapin": "I have the same issue here, any update on how to fix it ?\n. ",
    "uglymunky": "I just came across this while dealing with this problem on an unrelated project.  Not sure if this helps but the solution proposed here did the trick for me.\nbasically, there's a hidden dependency and you can install it with:\n```\n\nsudo apt-get install libfontconfig\n```\n. \n",
    "Awk34": "Hmmm same, thanks for the info @uglymunky \n. ",
    "jer0dh": "Same problem here.  @uglymunky solution is the answer!  Thanks\n. ",
    "piyush-mukati": "thanks @uglymunky \n\"sudo apt-get install libfontconfig\" is working for me too.\n. ",
    "DaleCox": "Thanks @uglymunky your solution solved my problem as well. \n. ",
    "yogieputra8": "@uglymunky mate, you saved my day! thank you \ud83c\udf7a. ",
    "qwertyI": "@uglymunky \nit's work for me, thanks.. ",
    "suprix": "@uglymunky Thanks it worked :DD. ",
    "lioncin": "apt-get install libfontconfig \nis very good!!!. ",
    "mathiasleroy": "I have the same error on cloud9\nd@html5:~/workspace/imb $ grunt uncss\nRunning \"uncss:dist\" (uncss) task\nFontconfig warning: ignoring C.UTF-8: not a valid language tag\nFatal error: Fontconfig warning: ignoring C.UTF-8: not a valid language tag\nd@html5:~/workspace/imb $\n. ",
    "fouadhjiyer": "Hi,\nHave you tried to type the following in the \"terminal screen\":\nLC_ALL=C\nI executed following \"locale -a\" and it showed me a list of all the fonts I could use then I selected \"C\".\nSo executed LC_ALL=C in the terminal screen and afterwards I could execute the command grunt uncss.\nGood luck!\nKind Regards,\nFouad\n. ",
    "edusis": "@fouadhjiyer thanks thats works for me.\n. ",
    "CelticParser": "Sorry, I missed this one; \nRunning $ LC_ALL=C did the trick.\n. ",
    "DevelopSmith": "The LC_ALL=C fixed the problem. THANKS!. ",
    "moschel26": "@DevelopSmith Maybe you can help this question :  https://stackoverflow.com/questions/51947226/how-can-i-install-gitextensions-in-mac-os. ",
    "rask": "+1\n. ",
    "YongX": "+1\n. ",
    "replete": "This has nothing to do with UnCSS IMO.\nYour best chances are to use a build system like Gulp with a PHP connect plugin like this\nI wish most of the requests on UnCSS were about working towards the biggest problem - missing essential classes!\n. Assuming project is dead, closing issue.\n. @corysimmons Out of interest, given that you seem to have advanced use of UnCSS, how do you approach the problem of dynamic styles and related selectors?\nI haven't used UnCSS in production because there is no easy way to find related styles (e.g. related :hover, >, selectors etc . I tried to write some regex for the selection, but didn't get very far and gave up. \nI want to solve this problem, but don't have the time between commercial applications :(\n. ",
    "murgatroydj": "did you ever solve this issue?\n. ",
    "Graham42": "+1 I also can't use this module unless there is sourcemap support\n. ",
    "panudetjt": "still don't work for me :cry:\n\u03bb node -v && npm -v\nv0.12.5\n2.12.0\n\u03bb uncss http://getbootstrap.com/examples/jumbotron/ > unuse.css\nC:\\Users\\Jame\\AppData\\Roaming\\npm\\node_modules\\uncss\\node_modules\\bluebird\\js\\main\\async.js:43\n        fn = function () { throw arg; };\n                                 ^\nError: uncss/node_modules/css: unable to parse http://getbootstrap.com/dist/css/bootstrap.min.css :\nmissing '}' near line 2:166\n        1:        /*** uncss> filename: http://getbootstrap.com/dist/css/bootstrap.min.css ***/\n\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u25b2\u0e4f\u0e1f\u0e1d\u0e2f\u0e18\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e33\u0e09<t;\u2302\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e4f\u0e1f\u0e1d?\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1dr{,\u2193\n        3:        \u263c/\u0e4f\u0e1f\u0e1d3 q\u0e4f\u0e1f\u0e1d?\u0e4f\u0e1f\u0e1dw\u0e4f\u0e1f\u0e1d5\u2195gz(a\u2192`L\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u263c\u0e4f\u0e1f\u0e1d4\u0e4f\u0e1f\u0e1d~\u0e3a\u0e12S\u0e4f\u0e1f\u0e1d-\u0e4f\u0e1f\u0e1dv\u0e4f\u0e1f\u0e1di\u0e4f\u0e1f\u0e1d?\u2660\n        4:        \u0e36\u0e07\u263c\u0e4f\u0e1f\u0e1d~\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d,\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1dy9u\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u25c4\u25ac\u0e4f\u0e1f\u0e1d~\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d?pg\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d.\n\u03bb node %appdata%\\npm\\node_modules\\uncss\\bin http://getbootstrap.com/examples/jumbotron/ > unuse.css\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'C:\\Users\\Jame\\AppData\\Roaming\\npm\\node_modules\\uncss\\bin'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:278:25)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n\u03bb node %appdata%\\npm\\node_modules\\uncss\\bin\\uncss http://getbootstrap.com/examples/jumbotron/ > unuse.css\nC:\\Users\\Jame\\AppData\\Roaming\\npm\\node_modules\\uncss\\node_modules\\bluebird\\js\\main\\async.js:43\n        fn = function () { throw arg; };\n                                 ^\nError: uncss/node_modules/css: unable to parse http://getbootstrap.com/dist/css/bootstrap.min.css :\nmissing '}' near line 2:166\n        1:        /*** uncss> filename: http://getbootstrap.com/dist/css/bootstrap.min.css ***/\n\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u25b2\u0e4f\u0e1f\u0e1d\u0e2f\u0e18\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e33\u0e09<t;\u2302\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e4f\u0e1f\u0e1d?\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1dr{,\u2193\n        3:        \u263c/\u0e4f\u0e1f\u0e1d3 q\u0e4f\u0e1f\u0e1d?\u0e4f\u0e1f\u0e1dw\u0e4f\u0e1f\u0e1d5\u2195gz(a\u2192`L\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u263c\u0e4f\u0e1f\u0e1d4\u0e4f\u0e1f\u0e1d~\u0e3a\u0e12S\u0e4f\u0e1f\u0e1d-\u0e4f\u0e1f\u0e1dv\u0e4f\u0e1f\u0e1di\u0e4f\u0e1f\u0e1d?\u2660\n        4:        \u0e36\u0e07\u263c\u0e4f\u0e1f\u0e1d~\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d,\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1dy9u\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u25c4\u25ac\u0e4f\u0e1f\u0e1d~\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d?pg\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d\u0e4f\u0e1f\u0e1d.\nI do something wrong ?\n. yes I can access that link perfectly every browsers in my computer (chrome, firefox, ie11)\nand I can uncss https://github.com/giakki/uncss/issues/175 > unuse.css works perfectly.\n. ",
    "mikeya": "It'd be nice to have the ability to send javascript event to phantomJS to show dynamically generated content that uncss would otherwise miss. \n. ",
    "8thnote": "+1 to both of the prior suggestions here, especially obihill's. I'm needing this feature as I write this. Hope to hear something soon on how I could modify my gulp task so it works only on the mobile version of the site in localhost. It's unfortunately not a responsive site I'm dealing with. Thanks in advance for any help. Also, great work on this project so far! Very exciting stuff!\n. ",
    "pfrankov": "1.5 month passed. Any chance to merge?\n. Done\n. @XhmikosR @giakki guys?\n. @XhmikosR @giakki meanwhile one more month passed...\n. @giakki done!\n. ",
    "crazy4groovy": "IMHO it's log worthy, not error. \nBrowsers can roll with it.. why not this tool?\n. @RyanZim Thanks, I appreciate your concern. For libraries I agree, they should never console.log (except debug). But I think for a cli it's perfectly reasonable to console.log/println/stdout/etc. any useful feedback/results of the execution. Since there's a human on the other side.\n. @RyanZim I could see the cli as catching the library errors and consoling them out, whereas the other tools you mention may which to throw (/not catch) any library errors.\n. ",
    "johnholtripley": "Regexs have saved the day - thanks to @ben_eb for the answer:\n'/\\.offCanvas/' did it\n. ",
    "jdahdah": "I just found the string in the exported build, so it would appear that UnCSS is no longer doing this. Cheers!\n. ",
    "EmilienBassez": "+1\n. ",
    "fionnayao": "What type of files are you trying to pass through UnCSS? I don't think UnCSS performs server side compilation. You might have to use a web server to render HTML, then run UnCSS on them :)\n. ",
    "DevBlaaast": "@fionnayao I want to do it on .hbs files. I actually use gulp to compile them right now, but I need the html files to be created after the css task.\nI need both the css files to be created with a md5 hash (for cache busting) and also to be uncss-ed. The thing is that I write the md5-hashed css files inside the html files, so I cannot run uncss after the html files are created :)\n. @mikelambert yes that's what I do too\n. ",
    "ourmaninamsterdam": "I realise now that the use of ignore is to actually ignore selectors within the CSS file, not within the HTML. I should have read the docs nore thoroughly.\nAnyway, having an option to ignore a block of HTML when running the page through Phantom would be great.\n. ",
    "diamondo25": "text\\css is not a valid mimetype. text/css is.\n. ",
    "hellsan631": "Unknown at this time. I tested it on an older stack and it worked, but that stack didn't have a specific implementation of rAF that was known to me. I will see at some later date if this is still a problem when I implement this on my Angular 2 stack (which uses Univeral JS to render on server)\n. Just tried it out today, and it looks like this issue is solved :)\n. ",
    "twiss": "Let's say you have a class, .hidden, which is added in javascript to two elements, one of which exists on the current page and one of which does not.\nWith ignore: [/\\.hidden/], uncss does:\n``` diff\n  .exists { color: blue }\n  .exists.hidden { display: none }\n\n.doesnt-exist { color: orange }\n  .doesnt-exist.hidden { display: none }\n```\n\nWith ignoreModifiers: ['.hidden'], uncss does:\n``` diff\n  .exists { color: blue }\n  .exists.hidden { display: none }\n\n.doesnt-exist { color: orange }\n.doesnt-exist.hidden { display: none }\n```\n\nIn other words, it ignores the selector only if it does match without the \"modifer\". This is what you want in most cases, and in my project it ended up making a significant difference in CSS size (although I don't remember the details since this is almost a year ago.)\n. Maybe a real life example helps. Take a look at this file: https://github.com/codexa/firetext/blob/3a08345/style/bb/input_areas.css#L293-337. It is part of a CSS library called \"building blocks\". We don't need all of the css in that library, so uncss helps. Most of the files in that library (and our own css too) have a section for rtl support, which starts with [dir=\"rtl\"]. The old way to ignore those would be ignore: [/\\[dir=\"rtl\"\\]/], which also ignores rtl support for parts of the library which we don't use. ignoreModifiers: ['[dir=\"rtl\"]'] does what we want.\n. ",
    "EyePulp": "Great, thanks for the response and the nifty module!\n. ",
    "dragthor": "var all = report['selectors']['all'];\nvar used = report['selectors']['used'];\nvar unused = all.length - used.length;\n. ",
    "atul-bajpai": "can you please tell me how to run this through grunt\n. yes\n. ",
    "Thomasdezeeuw": "Yes I still got the same error, another stack trace:\n/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/async.js:48\n        fn = function () { throw arg; };\n                           ^\nTypeError: Cannot read property 'map' of undefined\n    at getHTML (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/src/uncss.js:28:28)\n    at /Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/src/uncss.js:221:20\n    at tryCatcher (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/util.js:11:23)\n    at /Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/using.js:184:26\n    at tryCatcher (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/util.js:11:23)\n    at Promise._settlePromiseFromHandler (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:491:31)\n    at Promise._settlePromise (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:548:18)\n    at Promise._settlePromise0 (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:593:10)\n    at Promise._settlePromises (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:676:18)\n    at Promise._fulfill (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:617:18)\n    at PromiseArray._resolve (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise_array.js:125:19)\n    at PromiseArray._promiseFulfilled (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise_array.js:143:14)\n    at Promise._settlePromise (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:553:26)\n    at Promise._settlePromise0 (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:593:10)\n    at Promise._settlePromises (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/promise.js:676:18)\n    at Async._drainQueue (/Users/thomas/Dropbox/dev/websites/thomasdezeeuw.nl/node_modules/gulp-uncss/node_modules/uncss/node_modules/bluebird/js/release/async.js:125:16)\n. Can't reproduce this with the CLI. Power I did a little bit of digging, it seemed uncss was called with undefined as files paramater (uncss(undefined, options, callback)). Because there is no check against it was passed to getHTML which called map on it, assuming it's an array. Because you can't call map on undefined it crashes with this cryptic message.\nMaybe the function can use some sanity checking of the passes paramaters. But this issue can be closed.\n. ",
    "a1Gupta": "@giakki  I am facing the same problem. Any updates on this ?\n. ",
    "jacobbuck": ":+1: \n. ",
    "HugoGiraudel": "I did not, and unfortunately I don\u2019t think I\u2019ll have time any time soon. Maybe we could close and re-open if needed?\n. ",
    "ifraixedes": "I was wrong with my pervious observation https://github.com/ben-eb/gulp-uncss/issues/47#issuecomment-183052394\n. ",
    "seffw": "Hi. Here's the part of the script (two version, tried both, exactly same results):\n.pipe(uncss({\n    html: [sitepath + '/layouts/**/*.html'],\n    ignore: [/--/,/.in/]\n    }, function(err, output) {\n            if (err) {\n                gutil.log(err)\n            }\n    }\n))\nand\n.pipe(uncss({\n    html: [sitepath + '/layouts/**/*.html'],\n    ignore: [/--/,/.in/]\n    }\n))\nI have been trying to think what could have change from when it was working. The script hasn't (first version), i hadn't updated any node or gulp modules or plug-ins, although since the error I've updated everything. The things that changed were the html and css files being used, but all other pre-processing is working ok (css minification, useref), which happen after this part of the script.\nHow would i best add the .on('error' ...... here? I can try this.\n. I tried it at the start and end of the pipe. The script ran (so i guess i put the code in ok) but the same error without more info showed\n. I appreciate it's a bit of a strange one. \nI'm just testing one other thing. One change I made previously was to use relative rather than absolute paths. Although it worked ok after change to a relative path before, i've just tried one test with absolute path and it may have worked. I mean this if it needs more expanation:\n.pipe(uncss({ html: [sitepath +\ni had sitepath simply as 'site' (the relative location to where the gulp sccript was called from, which I'm using throughout the gulp script),   now trying the C:.........\\site  instead. \nDoes this highlight some obvious error in how I might be using relative paths?\n(I read somewhere that uncss performed better with relative paths)\n. Ok, I'll keep trying and report back\n. To update, I found the part of the HTML files that was causing the error. I don't why this is the case though.\nThis is it (id details replaced with ####): \n<div id=\"wrapper\" class=\"content\">\n    <script src=\"http://www.booking.com/general.html?tmpl=bookit;aid=#####;lang=en;hotel_id=######;hotel_cc1=en;hotel_page=#######\"></script>\n</div>\nIf I change the SRC to some local js file, the error is not shown. So it's the SRC as is causing it.\nTwo potential bugs here are 1) that the syntax error is preventing uncss working correctly (it seems to be stopping at that point).  2)  that this type of use of a script tag is not so uncommon\n. Sorry for late reply. I've been busy with other things. I'll try to re-test this soon and willl report back\n. ",
    "jegtnes": "I have the same issue as @XhmikosR. Not with Fancybox, but with a third-party Slideshare dependency on some of our pages (Slideshare) logging errors that don't appear on the live site.\nThis doesn't actually create any problems with the UnCSS output as the Slideshare assets aren't run through UnCSS. The only issue it's causing is the extra noise in our CI/build logs. That being said, I was just wondering if is there's a way to optionally silence or filter the output of Phantom's stderrs\u2014or any plans to do so?\nFor what it's worth (probably not much), the errors I'm getting are below:\n```\nTypeError: 'undefined' is not a function (evaluating 'this.displayProgressTooltip.bind(this)')\nhttp://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:1\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:1 in SSPlayerController\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:1 in SSPlayer\n  http://www.slideshare.net/slideshow/embed_code/8661735:29\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:1 in s\nTypeError: 'undefined' is not a function (evaluating 'this.displayProgressTooltip.bind(this)')\nhttp://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:1\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:3\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:1 in SSPlayerController\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:4\n  http://public.slidesharecdn.com/b/ss_foundation/combined_player_presentation.js?77549234d8:1 in SSPlayer\n  http://www.slideshare.net/slideshow/embed_code/13766370:21\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:2\n  http://public.slidesharecdn.com/b/ss_foundation/combined_jquery.js?7ce27c46c9:1 in s\n```\n. @XhmikosR Sorry, missed this message. When originally reported I tried this in both 0.12.1 and 0.13 with the same noisy output. \n. ",
    "jonmhutch7": "I'm having the same issues with the Mapbox API. Like @jegtnes says, it doesn't affect the actual CSS output, its just super freaking annoying in the console. \n. ",
    "aseem2625": "I've the same question.\n224\n. @mikelambert We've more use cases for adding the class dynamically (using js) on events than adding classes through js in the beginning. Just think, how much useful is this latter part in real world web applications? Not much. Most applications have former part because that is why people want to use js to add classes dynamically on event happening. I was thinking, if we can have some js parser which takes into consideration some rules like wherever addClass, className, id, etc. are found then those classes/ids much be kept in css files. What say?\n. You're correct that false-positive cases might get added. So, currently, I am fine with using ignore: [regex] to collectively ignore all the classes added with js(regex because, I've made prefix as \".jsa-newClass\" for every class/selector added through js.) This helps for css I would create. But for compression of Bootstrap or other vendor files, I think it's better to use other gulp plugin like purifycss if it helps get it done. But anyways, thank you to give insights.\n. ",
    "arturocastro": "Ah, I was hasty, error message is from the uncss-brunch project. Will close.\n. ",
    "Vadizar": "It does't works.\n. ",
    "cameronroe": "Yeah, anything is better than manually adding it in for the plugin. It should be built into a convention or something like that. I also have no clue what's even getting added a runtime. Ideally there could be a diff configuration that evals the js on the page and diffs the selectors from each other.\n. ",
    "tobek": "Sorry guys, was really busy when I made this PR and didn't have time to do the cleanup of pre-existing code that was requested in the comments. Thanks @XhmikosR for picking this up!. I agree that it should use be file://, my bad for using file: in my original pull request. As it turns out, the code as it is accepts file:///path/to/local/file.css just fine, so updating the docs and tests were all that's needed.\nI wasn't sure how to amend this pull request (looks like that's not possible for me since the PR is within this repo?) but I updated master on my branch and have submitted another PR #348.\nI haven't tested it on Windows since I don't have a Windows machine. I think the principle will work, and that the path would have to be file://c:/path/to/file or file:///c:/path/to/file (not sure which) but a Windows user should be familiar with that syntax and will know to supply it, and I assume that __dirname in the test will ensure the test passes on Windows.. ",
    "roryashfordbentley": "Thanks @mikelambert I will try this out! I know it was down to user error and I really appreciate the help!\n. ",
    "lorvent": "thats my mistake :cry: \npassing only required files to src array did the trick\n. I don't think so because everypage uses many jquery plugins including bootstrap so that should not be the issue\nbut can you help me finding out more information?\nlike using plumber to get file name etc...\n. hmm nice tip but that doesn't serve real purpose as its just hiding errors,\nwhereas my whole idea of using build systems is to improve code quality...\n. in mycase, if you add js in html page we will get this problem,\nmove it to seperate js file\n. i think that fixed the problem\n. phantomjs is causing some problems for sure and if jsdom can solve those problems and having all features of phantomjs....it would be great to replace with jsdom\n. Sure, i will check and let you know. ",
    "jogaco": "Found the same issue.\nThis minimal example reproduces the error.\n``` html\n<!DOCTYPE html>\n\n\n\n\n<script>\n  function a() {\n    $('#div').show();\n  }\n  a();\n</script>\n\n\n\n\n\n```\n. What about this?\n```\n<!DOCTYPE html>\n\n\n\n\n\n   $(document).ready(function(){\n      function a() {\n        $('#div').show();\n      }\n      a();\n    });\n    \n\n\n\n\n```\n. Got it!\n. :thumbsup:. ",
    "funbunch": "That is simply the name I gave to my task. I will be running multiple tasks not shown above. I could've just used 'default'. \nSuddenly now I'm getting a different error though saying cannot find module gulp.uncss. Even though it's shows installed. \n. ",
    "albertvolkman": "I'm saying that it'd look at a site as a whole, determine which selectors are common across all pages, save those to something like base.css, and then create a css file for each individual page. Does that make sense?\n. Thanks \ud83d\udc4d \n. ",
    "nundel": "Also, guys, I'm working now with my bootsrap.min.css - trying to reduce it and I'm getting some not bad result, though some styles I need are gone. But also  I'm getting this \n[13:41:44] Starting 'default'...\nReferenceError: Can't find variable: insertionQ\nlocal:157\nSECURITY_ERR: DOM Exception 18: An attempt was made to break through the security policy of the user agent.\nhttps://cdn.optimizely.com/js/2444890235.js:32 in ja\n  https://cdn.optimizely.com/js/2444890235.js:32 in v\n  https://cdn.optimizely.com/js/2444890235.js:134 in df\n  https://cdn.optimizely.com/js/2444890235.js:217 in Ih\n  https://cdn.optimizely.com/js/2444890235.js:234\n  https://cdn.optimizely.com/js/2444890235.js:237\n  https://cdn.optimizely.com/js/2444890235.js:240\nReferenceError: Can't find variable: insertionQ\nlocal:222\nTypeError: 'undefined' is not a function (evaluating '$('.heroTrustIconsList').slick')\nlocal:220\n  https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js:2\n  https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js:2\n  https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js:2\n  https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js:2 in J\nReferenceError: Can't find variable: insertionQ\nlocal:221\nReferenceError: Can't find variable: SwitchToErrorPage\nlocal:64 in CheckCookiesSupported\n  local:110\nTypeError: 'undefined' is not an object (evaluating 'a.checkSessionState')\nhttps://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:4\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com//scs/apps-static//js/k=oz.gapi.iw.FnS2zKMxWes.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPc_WQBlL01d1dseky4LqAWbUD1dw/cb=gapi.loaded_1:174\nSECURITY_ERR: DOM Exception 18: An attempt was made to break through the security policy of the user agent.\nhttp://static.olark.com/jsclient/loader0.js:1 in e\n  http://static.olark.com/jsclient/loader0.js:1\n  http://static.olark.com/jsclient/loader0.js:1\n  http://static.olark.com/jsclient/loader0.js:1 in r\n  http://static.olark.com/jsclient/loader0.js:1\n  http://static.olark.com/jsclient/loader0.js:1\n  http://static.olark.com/jsclient/loader0.js:1 in r\n  http://static.olark.com/jsclient/loader0.js:1\n  http://static.olark.com/jsclient/loader0.js:2\n  http://static.olark.com/jsclient/loader0.js:1 in r\n  http://static.olark.com/jsclient/loader0.js:1 in e\n  http://static.olark.com/jsclient/loader0.js:2\n  http://static.olark.com/jsclient/loader0.js:2\nTypeError: 'undefined' is not an object (evaluating 'a.checkSessionState')\nhttps://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:4\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com/js/platform.js:10\n  https://apis.google.com//scs/apps-static//js/k=oz.gapi.iw.FnS2zKMxWes.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPc_WQBlL01d1dseky4LqAWbUD1dw/cb=gapi.loaded_1:174\nTypeError: 'undefined' is not an object (evaluating 'a.checkSessionState')\nhttps://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:11\n  https://apis.google.com/js/platform.js:9\n  https://apis.google.com/js/platform.js:46\n  https://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:1\nTypeError: 'null' is not an object (evaluating 'iq(this).H')\n    at https://s.ytimg.com/yts/jsbin/player-en_US-vflAbrXV8/base.js:7157\n    at https://s.ytimg.com/yts/jsbin/player-en_US-vflAbrXV8/base.js:2172\n    at https://s.ytimg.com/yts/jsbin/player-en_US-vflAbrXV8/base.js:4142\n    at https://s.ytimg.com/yts/jsbin/player-en_US-vflAbrXV8/base.js:4229\n    at https://s.ytimg.com/yts/jsbin/player-en_US-vflAbrXV8/base.js:7147\n    at https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:484\n    at https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:16\n    at https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:484\n    at Th (https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:482)\n    at https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:475\n    at https://s.ytimg.com/yts/jsbin/www-embed-player-vfluPK2CM/www-embed-player.js:518\nTypeError: 'undefined' is not an object (evaluating 'a.checkSessionState')\nhttps://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:11\n  https://apis.google.com/js/platform.js:9\n  https://apis.google.com/js/platform.js:46\n  https://apis.google.com/js/platform.js:45\n  https://apis.google.com/js/platform.js:1\n[13:41:49] Finished 'default' after 4.86 s\nSO I just wonder are these error sufficient or my uncss works well?\nThnx\n. hey guys, still errror: \nmodule.js:327\n    throw err;\n    ^\nError: Cannot find module 'async'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\gulp-uncss\\node_modules\\uncss\\src\\uncss.js:4:13)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\gulp-uncss\\index.js:3:19)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n. done. also this Error: Cannot find module 'postcss'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\gulp-uncss\\node_modules\\uncss\\src\\uncss.js:11:15)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\gulp-uncss\\index.js:3:19)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n. I am using npm install. \nThat's how package.json looks\n{\n  \"name\": \"yes\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Get your contracts reviewed at a fraction of the cost\",\n  \"devDependencies\": {\n    \"grunt\": \"^1.0.1\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-clean-css\": \"^2.0.10\",\n    \"gulp-compass\": \"^2.1.0\",\n    \"gulp-install\": \"^0.6.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-postcss\": \"^6.1.1\",\n    \"gulp-purifycss\": \"^0.2.0\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-uncss\": \"^1.0.5\"\n  },\n  \"main\": \"Gulpfile.js\",\n  \"dependencies\": {\n    \"compass\": \"^0.1.1\",\n    \"css\": \"^2.2.1\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean-css\": \"^2.0.10\",\n    \"gulp-compass\": \"^2.1.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-concat-util\": \"^0.5.5\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-purifycss\": \"^0.2.0\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-uncss\": \"^1.0.5\",\n    \"node\": \"^0.0.0\",\n    \"postcss-use\": \"^2.2.0\",\n    \"purify-css\": \"^1.1.9\",\n    \"uncss\": \"^0.13.0\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n. @mikelambert I am using \"0.14.0\" version\n. still getting Error: Cannot find module 'postcss'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\uncss\\src\\uncss.js:11:15)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (C:\\wamp64\\www\\css-cleanup\\node_modules\\gulp-uncss\\index.js:3:19)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n. ",
    "saalmaan": "@mikelambert I just tried the latest master, phantomjs crashed again but with different error this time\n\nphantomjs(93419,0x700000947000) malloc: * error for object 0x7ec6a1048fb8: pointer being freed was not allocated\n* set a breakpoint in malloc_error_break to debug\nPhantomJS has crashed. Please read the bug reporting guide at\nhttp://phantomjs.org/bug-reporting.html and file a bug report.\n\nBut this time unlike previous crashes phantomjs returned output uncss>filename .... \nMore observations \n- In terminal I am seeing lots of select: Invalid argument log messages\n- This time output was minified and compressed, in last version it was unminified \n- Phantomjs instance took a lot more RAM then previous version up to 5GB\nUPDATE 1:\nok some progress, 100+ urls are parsed successfully, phantomjs crashed again with above error but produced the results, not sure if it parsed all urls or not. how can we validate that phantom parsed all URLS?\nUPDATE 2:\nwith 500+ URLS script just crashed and didn't even returned any error.  Output was 'undefined'\n. @RyanZim @mikelambert No, I tried this on another machine (with same settings) and got the same results, 100+ urls are fine, but the moment you want to scan 200 or 500 links everything stops working. RAM usage doesn't seems proportional to number of links. For now I have removed unused css from top 100 most used pages of the website. UnCSS is great tool but with this limitation (may be phantom is to be blamed) it can't be used for production large scale websites. Our eCommerce wesbite has over million pages (~30k unique, built over 10 years). Scanning for unused CSS for this many pages manually is impossible. I am more than happy to offer any help towards testing and debugging.\n. I just tried 500+ urls and it didn't work :( i saw lots of select: Invalid argument and then one undefined at the end. No output. see attached screen shot\n\n@RyanZim @mikelambert have you 500+ urls on your side?\n. @RyanZim here is the list of urls\nhttp://pastebin.com/BJ5Z9uaL\nand css files that needs cleaning \nhttp://currys.cdn.dixons.com/css/style.css\nI am debugging it now with node-debug\n. When I started to node-debug there were two instances of phantom and here is memory usage\n\nbut interestingly after select: Invalid argument it didnt crash and kept running for about 1 hour and then I saw undefined error and one of the phantom instances closed and here the memory \n\nit didn't close after undefined error like it use, its now running for about 1 hour and stuck at undefined\nafter about 2 hours of running I got following errors\nphantomjs(17371,0x700001aad000) malloc: *** error for object 0x7fd21e91c5b8: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\nand \nPhantomJS has crashed. Please read the bug reporting guide at\n<http://phantomjs.org/bug-reporting.html> and file a bug report.\nSee phantomjs crash report \nD640213E-E672-47AD-9E4D-D96D0B61ABEE.dmp.zip\n. I just did a fresh install of uncss and replaced @mikelambert version with default uncss. now I don't see select: Invalid argument error, instead \n\n\nSyntaxError: Parse error and INVALID_STATE_ERR: DOM Exception 11: are coming from page, these error goes away if I try a different URL, which means these error are coming from html/js on the page, so can we ignore them?\nlatest phantom crash dump\nC29C7B40-9F06-4201-B76C-142053B660A0.dmp.zip\n. Agreed js errors are not effecting unCSS results.\n@mikelambert on July 3rd I did see phantomJS consuming high memory. Which is shown in 6th Aug comment (before clean install) and screen grab. I also remember at the time I did try different version of phantom to see if that helped. on 6th of Aug I decided to remove all phantom and uncss version and do a clean/fresh installs and interestingly I didnt see any select: Invalid argument error (even when I tried 500+ urls). I saw parsing error. I then updated unCSS with your branch and repeated the test and say same parsing error and phantom crashing after a while.\nI tried node-debug on your branch, and put a breakpoint in phantom.js init function.\nfunction init(reuseLimit) {\n    if (phantom) {\n        phantomUsed++;\n        if (reuseLimit && phantomUsed >= reuseLimit) {\n            phantom = null;\n        }\n    }\n    // If we still have a phantom instance, our init() is a no-op\n    if (phantom) {\n        return null;\n    }\n    // Reset our usage counter\n    phantomUsed = 0;\n    // Convert to bluebird promise\n    return new promise(function (resolve) {\n        resolve(phridge.spawn({\n            ignoreSslErrors: 'yes',\n            sslProtocol: 'any'\n        }));\n    }).then(function (ph) {\n        /* Phridge outputs everything to stdout by default */\n        ph.childProcess.cleanStdout.unpipe();\n        ph.childProcess.cleanStdout.pipe(process.stderr);\n        phantom = ph;\n    }).disposer(phridge.disposeAll);\n}\nis this function supposed to be called for each link? if its called once then how does reuseLimit enforced?\nsimilarly uncss.js async.queue function doesn't seems to be called for each link\nvar serializedQueue = async.queue(function (opts, callback) {\n    if (opts.usePostCssInternal) {\n        return promise\n            .using(phantom.init(opts.reuseLimit), function () {\n                return getHTML(opts.html, opts)\n                    .spread(processAsPostCss);\n            })\n            .asCallback(callback);\n    }\n    return promise\n        .using(phantom.init(opts.reuseLimit), function () {\n            return getHTML(opts.html, opts)\n                .spread(getStylesheets)\n                .spread(getCSS)\n                .spread(processWithTextApi);\n        })\n        .asCallback(callback, { spread: true });\n}, 1);\nam I missing anything? also I am right in thinking that only 10 (defaultReuseLimit) links will be added to queue and when they are drained only then next 10 will be processed? this doesn't seem to be happening at the moment.\nI then tried debugging by adding \"--remote-debugger-port\": 8888 in phantom.js on line 38 and captured these screenshots\n\nhelp on debugging phridge and Phantom with remote debugging\nhttps://www.npmjs.com/package/phridge\nhttp://phantomjs.org/troubleshooting.html\n\nsee the screenshot below\n\nAll these parse errors are from individual page \nsee this screenshot from node-debug\n\nand\n\nSo you can clearly see in last screenshot that there were 70+ links, so how is this all working, \nCan you please try to run uncss on your side with the links I provided against the css file and see if you get the same results and will help you to debug it. or you can tell me next possible debugging ideas.\n. @mikelambert any thoughts?\n. ",
    "maskedcoder": "I originally discovered this when I added TypeKit to a page and the build immediately broke. TypeKit recommends that the embed code be near the top of the <head>. It's probably so the font can download sooner, so the FOUT (or FOIT, whatever you pick) shows up less.\nHere's an example TypeKit embed code:\nhtml\n<script src=\"https://use.typekit.net/######.js\"></script>\n<script>try{Typekit.load({ async: true });}catch(e){}</script>\nOther than TypeKit, I generally keep scripts at the bottom of the <body>.\n. Just to see if I understand correctly, I'll explain it in my own words. All UnCSS does for processing the html is hand it off to PhantomJS, and then uses a custom timeout to stop waiting for PhantomJS. When something takes a while in PhantomJS, the timeout will stop before PhantomJS finishes, and what PhantomJS has done already is all you get. Seems like a really good way to learn about the difference between blocking and non-blocking requests.\nI guess for this to be resolved, PhantomJS would have to make a change to their API. For example, they could make an option for disabling links to external scripts or something like that.\n. ",
    "Herst": "In my case the src of the font-faces became url(data:base64,) (that is empty) after running my whole toolchain (with tools for inlining and such), so in my case the fonts really weren't usable anymore.\n. ",
    "simi": "I'm motivated by some changes I did recently for https://uncss-online.com/.\n. I was thinking about that also.\n. I'm also missing more README.md changes. Will update soon.\n. @XhmikosR done.. ping @pajasevi. Do you mean https://uncss-online.com/? That's up for me. Feel free to ping @pajasevi, he's author and maintainer of this project if you'll see any problems.. ",
    "chaihongjun": "@RyanZim  Thanks\uff01 I have resolved it after reinstalling all the things.\n. ",
    "romanlelek": "Hello, I have similar issue - connected with Sierra update - before the update my settings worked perfectly, no problem, after update the same configuration stopped working anymore. But strange thing is that I cant see any error - when I run uncss task, it says Finished, but nothing is created in dist folder as before - the task doesnt create any output file.\nMy settings:\nmodule.exports = function(grunt) {\n    return {\n        dist: {\n            files: [\n                { src: '<%= paths.dist %>/all_transactional.html', dest: '<%= paths.dist %>/css/nomediaq.css' }\n            ]\n        },\n        options: {\n            compress: true,\n            ignore: ['.ExternalClass', '.ExternalClass p', '.ExternalClass span', '.ExternalClass font', '.ExternalClass td', '.ExternalClass div', 'a[href^=tel]',\n                'a[href^=sms]', 'a[x-apple-data-detectors]', 'a:hover', 'code', 'pre', '.btn_hoover', '.menuContent a', '.yshortcuts', '.ReadMsgBody'\n            ]\n        }\n    }\n}\nAnyone any idea what should I change? Thank you.\nBest regards,\nRoman\n. ",
    "baomastr": "Thanks for answer\n. ",
    "CaptainQuirk": "\nIf your site is large and you have a sitemap\n\nIn this situation, it's likely that all those pages will share the same css file(s). \nIf uncss is launched individually on all urls gathered in the sitemap, it is likely that the analysis of page A will report styles that are actually not used on page A but are on page B.\nWould one have to gather all the reports and filter them ?. ",
    "vseventer": "I ran into issues with PhantomJS as well, and have taken the liberty to port things over to jsdom (see jsdom branch). There are some minor issues I still need to figure out, and I'm sure code can be improved, but at least things are working.\n@RyanZim @lorvent If you fancy, you can try using the jsdom branch, and see if that fixes things for you.. @RyanZim Thanks - looks good. The resemble tests are currently not working, have to look into that, not sure what the point of them is anyway. EDIT: Looks like this is caused by chai-resemble#3.\nRegarding the switch to jsdom, I was running into #250, stumbled upon this ticket, and figured it was worth the try. For me, it solved the issues I was having, and the resulting CSS file is identical as when using PhantomJS (including classes added by scripts after page load).\nThe only gotcha is the way jsdom executes JavaScript (it uses Node.js vm), outlined here. I therefore changed the test in tests/jsdom/long_wait.html, otherwise it wouldn't terminate (or at least, I didn't have the patience to wait more than a few minutes).. I'm using OSX with Node 4, but also tried with Node 6 and 7. Seems to be a problem with PhantomJS (segmentation fault). Since the tests are passing for you, must be a local issue, so should not be a blocker for this to move into master, if interested.. Agreed more real-life testing would be welcome.\nPersonally, I'm using uncss for my blog, which uses Leaflet (classes added dynamically), Bootstrap and thus also jQuery (minimal custom build), bundled with webpack. I'm not running into any issues, in fact, everything works fantastic and as expected.\nBut yeah, jsdom definitely has some shortcomings - I think the known ones are best summarized in its \"html living standard\" issues.. Thanks, very useful. I've not encountered any major issues myself (other than the long_wait test I had to change).\n@sparanoid I tried running some tests with @supports, and everything seems to be working fine. Looking at the uncss source, it appears any conditions starting with @ are kept, and the group rules inside its body are still uncss-ed.. uncss allows /css/main.css, so there is no reason why /js/main.js shouldn't be supported also. This could be fixed by having htmlroot (or, more precise, utility.parsePath) apply to stylesheets and scripts (currently, it only applies to stylesheets).\nDon't think this is a particular issue with jsdom, especially if PhantomJS ignores the JS file anyway. But something that should be fixed regardless, imo.. @ArmorDarks I'm trying to replicate the problem - what is the absolute path to /assets/scripts/main.min.js? Did you set the htmlroot to J:\\Work\\TestProject\\github\\build? . @ArmorDarks It might be - I'm using the test files (on Mac) as you described and Hi! gets logged to the console. I will try the same on my Windows machine later today, and see if that makes a difference.. @ArmorDarks Sorry, this escaped my attention, I'm on Mac so this is not high priority for me. That said, I'll try and get to it in the next couple of days.. I'm able to reproduce the issue on Windows - a quick peek shows that the drive letter in Windows is the issue. (Root-)relative paths will always have the drive letter in front, so prepending the htmlroot will cause something like <htmlroot>/C:/<relative path>, while on Mac/Unix, we get the correct <htmlroot>/<relative path>.\nUnfortunately, JSDom does some manipulation on the script src before exposing it, preventing me from reading out the actual script src attribute value without drive letter.\nI will do some further testing later this week.. I added a commit which greatly simplifies the resourceLoader. Tests pass in both Mac and Windows.\n@ArmorDarks - maybe you can give it a go to see if it works for you?. I think we're pushing the limits of jsdom here. Regarding 1 and 2, ideally scripts should be executed within a sandbox, but don't think this is a priority for the jsdom maintainers. Given that jsdom loads the source from disk, yeah, it uses the file:// protocol, causing issues 3 and 4 you mentioned.\nHonestly, the issues you mention should be resolved. Not sure how, though.. ",
    "kapouer": "Am going to test this on a real world project tonight ! so happy !. I'm in a case where only generated web pages can be inspected, so i suppose it'd be best to crawl my website and feed uncss with that. Or maybe uncss could do that.. ",
    "Ferym26": ".pipe(uncssp({ or .pipe(uncss({\nnever mind. it doesnt work\n. it's great. Thank you!\n. ",
    "supersonicBlonde": "Yes. perfect. Thanks :)\n. ",
    "aitormendez": "yes, thanks!\n. ",
    "patmigliaccio": "\ud83d\udc4d. ",
    "ix-xerri": "I tried that but it didn't work. I'll try again tomorrow and will comment if it works. Closing this issue now. Thanks. It worked. ",
    "gkatsanos": "jsdom saved me from 2h of trying to find why phantomjs wasnt doing the job. please merge it :). @RyanZim unfortunately it's not the script tags. I hard-removed all scripts, just to be sure (I was loading jQuery from a CDN with defer set - but on the bottom of the page)\nI also added A LOT of timeout:\n``\ngulp.task('sass', function () {\n  let files =${config.sass.src}/*/.scsslet dest =${config.sass.dest}`\nconsole.log('=== Compiling SASS ===')\nreturn gulp.src(files)\n    .pipe(sourcemaps.init())\n    .pipe(sass({\n      outputStyle: 'expanded',\n      precision: 10,\n      errLogToConsole: true,\n      includePaths: config.bootstrap.src\n    }).on('error', sass.logError))\n    .pipe(autoprefixer({\n      browsers: ['last 6 versions', 'iOS >= 8.1']\n    }))\n    .pipe(uncss({\n      html: 'http://localhost:8888/',\n      timeout: 9000\n    }))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest(dest))\n    .pipe(browserSync.stream({once: true}))\n})\n```\n. update seems that command line uncss\n16:21 $ uncss http://localhost:8888 > AAAAA.css\nproduces correct results OCCASIONALLY (like once in 20 runs). @RyanZim 90000 didn't work, I'll try jsdom - Didn't really see any info on how to set it up though..\ngulp-uncss is pointing to the phantomjs uncss package... @RyanZim I changed the gulp-uncss require to be uncss-jsdom, and it worked. Damn. I lost like 2h looking into this. . @RyanZim I'm very curious as to why PhantomJS isn't.. any clue? . ",
    "davidtheclark": "@RyanZim I tried out this branch and had a problem. JSDom did not find an asset (a JS file) that PhantomJS was loading without trouble. I wonder if there's something wrong with the asset lookup.. Here is a simple test repo that reproduces the problem I was seeing: https://github.com/davidtheclark/uncss-jsdom-test\nWith the PhantomJS version, this test works. With uncss-jsdom, I see this error:\nError: Could not load script: \"file:///test.js\"\n    at /Users/davidclark/Downloads/uncss-jsdom-test/node_modules/jsdom/lib/jsdom/browser/resource-loader.js:44:23\n    at Object.check (/Users/davidclark/Downloads/uncss-jsdom-test/node_modules/jsdom/lib/jsdom/living/nodes/Document-impl.js:88:11)\n    at ReadStream.<anonymous> (/Users/davidclark/Downloads/uncss-jsdom-test/node_modules/jsdom/lib/jsdom/living/nodes/Document-impl.js:107:12)\n    at ReadStream.wrappedEnqueued (/Users/davidclark/Downloads/uncss-jsdom-test/node_modules/jsdom/lib/jsdom/browser/resource-loader.js:255:16)\n    at emitOne (events.js:77:13)\n    at ReadStream.emit (events.js:169:7)\n    at fs.js:1678:12\n    at FSReqWrap.oncomplete (fs.js:82:15) { [Error: ENOENT: no such file or directory, open '/test.js'] errno: -2, code: 'ENOENT', syscall: 'open', path: '/test.js' }\n@mikelambert sorry if the terminology wasn't clear. By \"asset\" I meant a file that is referenced with a <script> or <link> or something similar. This case is a basic <script> tag.. @RyanZim I tried it with htmlroot and got the same error. Do you not get that error with the test repo?. @vseventer @RyanZim Thanks for chiming in! I opened up #287 for this issue. I guess it still seems to me that this problem needs to be addressed before the JSDom implementation merges, or else the JSDom implementation should deliver a warning but not throw an error when it encounters root-relative paths. If the behavior is not changed, then a very common and widespread practice will break uncss, right?. @RyanZim: I agree that it's important to bring to the user's attention the fact that their JS is not loading; but a hard failure would mean that we suddenly can't use uncss with our valid HTML that worked before, right? For my case, as one example, I do not care whether the JS loads, would even prefer to be able to tell uncss not to try to load it.\nJust wanted to make sure I was being clear about my concern. Thanks for your work on the transition!. Forgot to mention: I created a simple test repo to illustrate the problem at https://github.com/davidtheclark/uncss-jsdom-test.. ",
    "rowthan": "all right. that's a way. But actually, the style.css have been made very long ago.\nnow why i use uncss is to solve the problem that the css is disordered.\ni want there is a option that the uncss could analysis the js file which class have been used.\nif you are not consider this, maybe i would try to do it.\nthanks anyway.. thank you very much, that's the very one I want.\nplease close this issue.. ",
    "depiction": "Per the SASS documentation (http://www.sass-lang.com/documentation/file.SASS_REFERENCE.html#comments), Sass supports standard multiline CSS comments with / /, as well as single-line comments with //. The multiline comments are preserved in the CSS output where possible, while the single-line comments are removed.\nThere are use cases for both versions of comments and both are supported by SASS, therefore I think UnCSS should support both.. ",
    "pajasevi": "Thanks guys! \u2764\ufe0f . Fixed!. It's already fixed, my VPS provider had some technical issues with the server.. Fixed. Hello folks. Uncss-online.com is an honest service and all the details about why it's using Coinhive script to mine Monero are explained on the bottom of the website.\nI would like to ask then: what is your particular problem with the miner?. Well if antivirus is not happy (which is sad), I will switch to authedmine.com - users will be asked for permission before the mining can start and antivirus won't yell at user.\nAll legit.\nHere, I created an issue for that: https://github.com/pajasevi/UnCSS-Online/issues/13. Hi folks. Thanks @RyanZim for noticing me.\nWhile any user can disable the miner using the link and miner only runs on non-mobile devices, I was thinking about switching to authedmine.com. But since users spend average 30 seconds on the page, I did not really see that as a big issue.\nI will reconsider it again.. Fixed for now - I removed CoinHive script until switch to Authedmine.. It got stuck again. I restarted it.. Fixed, thanks for the notice. ",
    "marklegault": "Dug a bit more. Seems to be an issue with trying to build this locally, in utility.parsPaths where PhantomJS is not showing the files with the file: prefix, so it's never getting the chance to hit the if statement for options.htmlroot\n\nconsole.log(sheet)\n        / Path already parsed by PhantomJS /\n        if (sheet.substr(0, 5) === 'file:') {\n            sheet = url.parse(sheet).path.replace('%20', ' ');\n            / If on windows, remove first '/' /\n            sheet = isWindows() ? sheet.substring(1) : sheet;\n        if (options.htmlroot) {\n            console.log(\"found it\")\n            return path.join(options.htmlroot, sheet);\n        }\n        sheet = path.relative(path.join(path.dirname(source)), sheet);\n    }\n\n\nresulted in assets/css/style.css for me. Sorry if I'm doing this wrong, first time trying to dive into someone else's code in grunt\n. Yes they do.. Using this as part of a Grunt-Jekyll build, trying to incorporate grunt-uncss, so this may be strictly a \"me\" problem, but it seems like htmlroot should be checked for before checking whether it's a url or file.. So as a test I went in and moved the options.htmlroot if statement out of the file:// check, and it had the added benefit of stopping the \"cannot find variable $\" error that it was also throwing... ",
    "G0dwin": "Thanks @RyanZim, I ended up writing my own Ruby Gem to calculate CSS code coverage: https://github.com/lingua-franca/marmara. I may come back to USS at some point to see if we can leverage some common code.. ",
    "barnabycolby": "The travis-ci failure looks to be unrelated to my changes?. Ok, that fixed it. Looks like a problem with coverall.. ",
    "imshgga": "\n@RyanZim . Its just the offical DEMO\n\n@RyanZim \n. Thanks. Thank you.. ",
    "joacim-boive": "Sorry, sorry... Closing. . ",
    "extensionsapp": "@RyanZim Thanks for the answer.\n\nIn style.css I have many .open classes. And if I use command:\nuncss -i .open http://localhost:33333/en/ > style2.css\n.open class not saved to style2.css. Thank you so much, @RyanZim.. @RyanZim, how to use multi classes.\nNot work.\n-i /\\.open|\\.active/\n-i /(\\.open|\\.active)/\n-i \"/\\.open|\\.active/\"\n-i /\\.open/, /\\.active/. Ignore only .open\n-i /\\.open/ /\\.active/\nIgnore only .active\n-i /\\.open/ -i /\\.active/\n.uncssrc nice work.\n{\n  \"ignore\": [\n    \"/.open/\",\n    \"/.active/\"\n  ]\n}. ",
    "inspiraller": "That's not what I mean. The css will look like its unused if the html is not in the page yet. How does your plugin detect that?. So if my javascript runs after user interaction, how can I then trigger uncss to run?. ",
    "oleersoy": "Hi @RyanZim \nI created a separate superfly-css-task-deploy that can be run once prototyping with superfly-css-task-build is complete.  \nIdeally developers would be able perform their work like this in the prototyping stage:\nhtml\n<div class=\"u-font-roboto-500i-condensed\">Some condensed and italicized looking roboto text</\n<div class=\"u-font-open-sans-100-expanded\">Some expanded looking opens sans text</div>\n<div class=\"u-font-open-sans\">400 weighted normal opens sans text</div>\n.... \nThe above could be done without having to import fonts because the superfly-css-utilities-fonts module takes care of all the compile time imports.\nSo within the scope of the the superfly-css framework being able to remove all unused @font-face declarations that are not tied to a corresponding utility declaration would be really helpful, because the designer should never apply an imported font without using a utility.\nI can see how it might not be desirable in the generic case though.  If there's any way I can \"plug into\" uncss to get this working I would definitely appreciate a heads up.\n. Hmmm thanks for pointing that out!  https://github.com/jonathantneal/postcss-font-magician might be the perfect thing.  If it works the way that it looks like it works I could create all the font utilities and just leave the importing to the magician.\nAll the task I've written (build, deploy) use postcss BTW.\nJust curious about one aspect of https://github.com/giakki/uncss/issues/258.  It says that uncss should not remove @font-face rules because an author could still inline the style.  I imagine that would be done sort of like this (import-css.css):\ncss\n@font-face {\n    font-family: myFirstFont;\n    src: url(sansation_light.woff);\n}\nindex.html\nhtml\n<div style=\"font-family: myFirstFont\"> My first font text </div>\nBut what if index.html or any other html or javascript file does not reference myFirstFont.  It seems like it would be safe for uncss to remove the corresponding @font-face rule in this case or am I missing something?\nIn any case https://github.com/jonathantneal/postcss-font-magician might actually make a lot more sense since it uses an on-demand approach rather than a push one.  I'll have a more detailed look.  Thanks again.. > uncss doesn't check style attributes.\nAha!  Gotcha.  I think I'm almost home free.\nAt compile and test time I'd like to make all the fonts available via utilities like these (The root variable is for baking in the font using the @apply(--u-font-open-sans) function):\n``` css\n:root {\n  --u-font-open-sans {\n    font-family: \"Open Sans\", var(--font-family-helvetica-neue) !important;\n  }\n}\n.u-font-open-sans {\n  font-family: \"Open Sans\", var(--font-family-helvetica-neue) !important;\n}\n.u-font-montserrat {\n  font-family: Montserrat, var(--font-family-helvetica-neue) !important;\n}\n``\nThese would be imported at the top of the main stylesheet like this:import 'superfly-css-utilities-fonts';`\nIn this case every all the corresponding @font-face rules would be created by font-magician, which is hopefully not a big deal at design time.\nI would then run the entire build again to produce the css to be deployed, but would run uncss before running font-magician and that would remove any of the unused u-font... utilities, and font-magician would then import only the ones that are used....Hopefully that does the trick!  Thanks again for all your input on this!. I built this superfly-css-task-deploy task that does ended up  removing unused @font-face and @import statements.  It works like this.\n1) At design time everything is compiled from the src directory to the target directory.\n2) At deploy time css is compiled from the target directory to the deploy directory but uncss strips everything that is not used in HTML (And soon javascript after I update the task).\nFull demo here superfly-css-component-button.\nRun npm run update to install everything.  Run npm run build to build the test.  Finally run gulp deploy:css and gulp deploy html to deploy the minified and uncssed css and test html page correspondingly. I think it might depend on the size of the CSS file.  PostCSS font magician generates a lot of CSS and the tests essentially include all of it, so the quantity of CSS being processed is very large.  If you run the deploy task do you see the infinite loop?  Sometimes Node has issues with large data sets, so it could be that it is a node issue.  I have a feeling that if I reduce the size of the test file, the loop problem will go away ... as I don't have this issue in other modules that use superflycss/font-utilties module.. @RyanZim I'll be frank with you.  You are probably one of the most awesome and brilliant people running / supporting amazing projects like uncss on github, and you have already helped me out a ton, so no worries at all.  I will note though that unlike Bootstrap and other CSS repositories I have purposely split components, utilities, and tasks into their own repository such that reviewing the files in a repository should take no more than a few minutes.  I'm also not expecting you to debug it.  I'm just curious if you see the issue.  If you see it at least we know that there is an issue.  The HTML file that uncss is targeting is very large in this case, so it's probably something that uncss will rarely run into, but I figured I'd report it, so at least we have awareness if anyone else sees it. . This is a visual demo of what uncss is running against.  You'll notice even Chrome has a hard time with the rendering of all of it (Even after splitting up all the google fonts by font weight), so it could be that this is simply pushing the limits of what node/postcss/uncss is capable of:\nhttps://superflycss.github.io/utilities-fonts/target/test/html/fw600.html\n. Another thing I wanted to mention is that the test css file that I'm running the above tests against get really large, so uncss has a lot of work to do.  The CSS utilities in general generate a lot of css, and most of the test css files import multiple repositories containing the css utility files.  For example the indent utility in the @superflycss/utilities-format module looks like this:\ncss\n@for $factor from 1 to 50 {\n  .u-text-indent-$(factor)px {\n    text-indent: $(factor)px !important;\n  }\nSo that's 100 lines or more of css right there.  So once module imports are complete for a src/test/css/index.css file like this:\ncss\n@import \"@superflycss/foundation\";\n@import \"../../main/css/index.css\";\n@import \"@superflycss/utilities-fonts\";\n@import \"@superflycss/utilities-layout\";\n@import \"@superflycss/utilities-colors\";\n@import \"@superflycss/utilities-format\";\n@import \"@superflycss/component-header\";\n@import \"@superflycss/component-display\";\n@import \"@superflycss/component-test\";\n@import \"@superflycss/component-body\";\nThere could be 60,000, perhaps even 100,000, lines of css.\n  . Indeed.  I'll experiment more with this later to narrow down the exact cause.  This sample has a lot of moving pieces like font rendering, etc.  It would be interesting to see what would happen if I generated 100K css lines of border colors and ran it against a simple html file with one element that is using a single border style and color.  . @RyanZim do you know by chance if the postcss-import plugin supports relative module imports.  Right now when I publish a module I set the package.json main attribute to src/main/css/index.css.  This module imports all the sub modules.  So if we @import \"@superflycss/utilities-layout\" we get every single sub module, including all the responsive ones, which might not even be needed.  If instead the package.json main attribute could be set to a directory value like src/main/css and the default resolve module would be index.css, but submodules could also be resolved by doing \"@superflycss/utilities-layout/flexbox\" or \"@superflycss/utilities-layout/margins\"  ... that would help cut down a lot on the total amount of css generated by some of the builds, make the build more responsive, etc. and provide more choice for users ... perhaps this is how it works already ...\nBTW - If you think these types of questions are better asked on SO, just throw a shoe at me :). OK - So IIUC if we declare a project dependency like this:\njson\ndependencies: \n    {  \"@superflycss/utilities-layout\" : \"1.0.0\" }\nThen we can have a css file in the project that imports a submodule like this?:\ncss\n@import \"@superflycss/utilities-layout/src/main/css/faucet.css\";\nSo when we want the whole kitchen sink we just do:\ncss\n@import \"@superflycss/utilities-layout\";\nWhich  resolves to (By means of the main attribute of the modules package.json file):\nnode_modules/@superflycss/utilities-layout/src/main/css/index.css\nBut if we only want the faucet then we can do:\ncss\n@import \"@superflycss/utilities-layout/src/main/css/faucet.css\";\nWhich will then resolve to:\nnode_modules/@superflycss/utilities-layout/src/main/css/faucet.css\n. In order to shorten import strings, and minimize the length of the main attribute on package.json, do you think postcss-import could detect whether the main attribute on package.json is a directory, and if it is automatically append index.css to load the default module?  Essentially mirror the way browsers work.  So for example instead of having the main attribute set like this:\njson\n\"main\": \"src/main/css/index.css\"\nIt could be set like this:\njson\n\"main\": \"src/main/css/\"\nNow it would be interpreted as a root module path, and index.css would be the default module.  If we wanted to specify sub modules we could import them like this:\ncss\n@import \"@superflycss/utilities-layout/faucet.css\";\nSubmodules:\ncss\n@import \"@superflycss/utilities-layout/valves/shutoff.css\";\nThis would end up resolving node_modules/@superflycss/utilities-layout/src/main/css/valves/shutoff.css.. The semantics for all the users of the main and style fields for all current packages and users stays the same.  This capability is only invoked when an author of a new package sets the main field to a directory.  For example if someone wants to set main or style to src/main/css/index.css they can do so.  If this is implemented then they can set main or style to src/main/css/ (Saving the index.css part) and postcss-import will still resolve it correctly.  However since the main or style attribute is a directory all submodules import strings are now shorter, and can leave off the src/main/css part.\nI'd also be willing to implement and test this.  I noticed a fork https://github.com/TrySound/postcss-easy-import that adds additional features.  I could perhaps build one as well, or see if postcss-easy-import could handle it, but wanted to check with you first.. I tried something simple.  Since the superflycss icon utility  repository also causes the deploy task to spin I simply removed the font utilities (Which I originally reported this bug against) from the CSS test imports (src/test/css/index.css) and ran npm run deploy again.  It now runs fine.\nconsole\n[18:32:50] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[18:32:50] Starting 'clean'...\n[18:32:50] Finished 'clean' after 9.44 ms\n[18:32:53] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[18:32:53] Starting 'build:css'...\n[18:32:59] Finished 'build:css' after 6.06 s\n[18:33:07] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[18:33:07] Starting 'test:css'...\n[18:33:08] Finished 'test:css' after 320 ms\n[18:33:10] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[18:33:10] Starting 'deploy:test:css'...\n[18:35:18] Finished 'deploy:test:css' after 2.13 min\n[18:35:28] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[18:35:29] Starting 'deploy:test:html'...\n[18:35:29] Finished 'deploy:test:html' after 26 ms\nSo that does not necessarily prove that it is the font css that is causing the issue, but now I'm going to generate a lot of CSS in the test css file (Like 500K color css not used by any of the markup), and we'll see if uncss has an issue.  If not then it's something about fonts that uncss does not like. . Wow - It finished!  It took 22 minutes but got the job done.  I generated over one million lines of css by adding the following loop to src/test/css/index.css (Which gets built to target/test/css/index.css and that's what uncss is run against to produce deploy/test/css/index.css - Note that I also included the current imports so it adds up to a lot of css):\ncss\n@for $x from 0 to 50 {\n  @for $a from 0 to 9 {\n    @for $b from 0 to 9 {\n      @for $c from 0 to 9 {\n        .u-background-color-$(a)$(b)$(c) {\n          background-color: #$(a)$(b)$(c) !important;\n        }\n        .u-border-color-$(a)$(b)$(c) {\n          border-color: #$(a)$(b)$(c) !important;\n        }\n        .u-text-color-$(a)$(b)$(c) {\n          color: #$(a)$(b)$(c) !important;\n        }\n        .u-fill-color-$(a)$(b)$(c) {\n          fill: #$(a)$(b)$(c) !important;\n        }\n        .u-stroke-color-$(a)$(b)$(c) {\n          stroke: #$(a)$(b)$(c) !important;\n        }\n      }\n    }\n  }\n}\nResults\nconsole\n[19:09:25] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[19:09:25] Starting 'clean'...\n[19:09:25] Finished 'clean' after 9.87 ms\n[19:09:28] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[19:09:28] Starting 'build:css'...\n[19:10:05] Finished 'build:css' after 38 s\n[19:10:08] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[19:10:08] Starting 'test:css'...\n[19:10:08] Finished 'test:css' after 318 ms\n[19:10:11] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[19:10:11] Starting 'deploy:test:css'...\n[19:31:27] Finished 'deploy:test:css' after 21 min\n[19:31:29] Using gulpfile ~/Junk/@superflycss/utilities-untest/gulpfile.js\n[19:31:29] Starting 'deploy:test:html'...\n[19:31:29] Finished 'deploy:test:html' after 22 ms\nole@mki:~/Junk/@superflycss/utilities-untest$ wc -l src/test/css/index.css \n92 src/test/css/index.css\nole@mki:~/Junk/@superflycss/utilities-untest$ wc -l target/test/css/index.css \n1169625 target/test/css/index.css\nole@mki:~/Junk/@superflycss/utilities-untest$ wc -l deploy/test/css/index.css \n25 deploy/test/css/index.css\nole@mki:~/Junk/@superflycss/utilities-untest$\nI'll try running running the deploy task on the font repository again now, just to see if it will finish within half an hour.. OK - It finished and fast.  Interesting.  It still times out on Travis, but perhaps thats because travis builds have limited resources.  I kept Chrome closed because it eats 95% of my memory (Have a lot of tabs open), so that could have been part of the issue.  I guess we can close this.. Good points.  I think the memory allowance should be OK.  I looked at my system monitor and the build does not hog that much memory - even with the one million+ line build.  I think Chrome was essentially eating all of it.  I also filed an issue with Travis as I can't get the travis_wait function to work right.  Tried a few different permutations and still no go.  Banzai Man is pretty awesome - so I'm sure he will have a brilliant fix for it.. I just published this module a few days ago:\nhttps://superflycss.github.io/utilities-icons/target/test/html/\nMy little brother says that this test page loads fast on his two year old google pixel phone, which surprised me because the CSS file for this page is 676,712 lines long.  Anyways running uncss against the css file and the single test page results in an infinite loop as documented earlier.  I'm starting to wonder though ... if a old google pixel phone renders the css and page fast, then surely uncss should be able to keep up ... Running it on the above test case uses 90% of my memory (16GB) and 30% of the CPU (8 cores).  . So I'm definitely not an expert here, but it seems like there has to be a really simple fast solution to this.  Something like (And this is a totally captain obvious - very easily said thing - might even just be rephrasing what someone else has said):\n1) Buffer the html document\n2) Buffer the first rule in the css document\n3) If the css rule is triggered by any of the selectors in the html document, save it to an output css file.\nRepeat until all the of css rules are examined.  This should only take a few MB at most of memory and be fast.  Anyways like I said I'm totally shooting from the hip here ... . @RyanZim I understand - just trying to trigger some brainstorming around how this can be improved.  I'm sure PostCSS or others will help us out if we can define a conceptual process that is more efficient and delivers the same end result - source maps included.\nI'll ask on SO as well.  Perhaps there some uncss genius out there that knows of a flux capacitor that we can just tweak a bit.. https://stackoverflow.com/questions/46993217/streaming-css-through-postcss-uncss-plugin-in-order-to-minimize-buffer-usage. Just wanted to make a correction to my earlier memory utilization number - It's not using that much memory - that was Chrome with a lot of tabs open that was eating up my 16GBs - one core is running at 100% though ... forever.... \nAttached a screenshot of what system monitor looks like while running:\n\n. You may want to have a look at: \nhttps://github.com/giakki/uncss/issues/319\nI just completed a test with over a million lines of css run against uncss and it completes in 22 minutes.  Before I had chrome open with a lot of tabs, and it was eating most of my laptops memory.  Without Chrome open (Leaving about 10 G of memory free) the build completes.. ",
    "srse": "Good question. Some arguments, why uncss should work with both (with and without a space before a handlebars expression):\n using a plugin to optimize the end product of your css should not limit you in how you actually write your code and which template engines you use\n minor, but still relevant, if you want to optimize for performance: one character less in the generated html, if there does not need to be a space before the handlebars expression for uncss to be able to parse class names in template html files\n* the handlebars expression does not need to start with a space to work, if you use handlebars in a nodejs backend as a server-side template engine.\nThe RegEx pattern approach (or maybe there is a better solution that achieves the same), will make it easier to let uncss parse different input sources correctly, especially if specifics of a template engine may require not to have a space before expressions (which is not the case with handlebars, but might be with others, I do not no the specifics of every existing html template engine) or may have other restrictions that let uncss miss some css selctors somewhere.. ",
    "paulradzkov": "+1, having same troubles. ",
    "dnwhte": "+1. ",
    "therayess": "anyone? im simply trying to target pages with parameters, how can i do that? any feedback would be great, thanks. doesn't have to be regex, is there any way to target dynamic pages? or urls excluding query strings?. Those options are coming from grunt-uncss actually, but the question is related to uncss config hence i'm asking here, so the problem is that the plugin is not usable in the case of dynamic pages, since you cannot specify ids for those pages, it could be id 61 or id=500, cannot list down the urls, would it be possible to include a functionality to target urls by regex or an option to set to have urls ignore query string (for future uses) ?. Thats why i thought a regex check if doable would be a great addition, then i can specify something like:\nhttp:\\/\\/sdfrontend.com\\/course\\/single(\\?|\\&)([^=]+)\\=([^&]+)\nand have uncss run on that base url ignoring the query string.\nYou clarified that a regex is not possible, so thanks for your response, i guess i'll have to find a way to make it work with a static list of urls as advised.\nThanks. ",
    "lukasoppermann": "Thanks for the info, will try this.. ",
    "pricelessbrewing": "Thanks!. ",
    "andreadd": "Dear @pajasevi https://uncss-online.com/ seems to be offline again. I was doing some tests to my pages with amazing results but I cannot reach the website. Thank you!. ",
    "ganlanyuan": "Thanks @RyanZim , this solved my problem!. ",
    "itsmerahul": "but there would be a lot of such classes. So it would not be a good solution as it would almost be similar to manual optimization. ",
    "Pumych": "As you say, my web page is using clientside javascript to turn that css-class into a proper class attribute, so this a right answer. Thank you.. ",
    "bbarr": "I am not totally clear on why some of these tests are failing. Perhaps it is because of the canvas-prebuilt package not working on Node 4.x.x?. Good question. I honestly just discovered this project, and when trying it out, discovered errors when I analyzed a page with canvas or localStorage in use. I can't say for sure if the Phantom version just worked, or if just no one had run into the problem.\nThis PR really conflates two changes, and if you were amenable to exposing the jsdom created callback, I suggest I break this into separate PR's, while I look a bit more into canvas-prebuilt / possible windows issues.. I agree with leaving canvas-prebuilt out. It is a lot of baggage, and people can just include it as needed. I have removed from this PR (which turns tests green, surprise surprise), leaving only the jsdomCreated hook. Thoughts?. Sure, it is a callback that is triggered on creation of the jsdom. It receives (e, window). This is how one can add on localStorage shims, etc. You can see it in action in the new test.\nUncss is currently using the \"old-api\" in the jsdom project, so the link is: https://github.com/tmpvar/jsdom/blob/master/lib/old-api.js#L153. ",
    "gajus": "It is a standards compliant browser engine.. > We do not want to have outside dependencies for Uncss that require more than just \"npm install\" to use.\nWhats the argument for this?\nYes, it does require to have Chrome pre-installed.\nYou can use CDP directly (see https://github.com/pocketjoso/penthouse/issues/169#issuecomment-313778774); chrome-pool is unnecessary.. > If this project had a ton of standards compliance issues, it might be worth considering. But I don't see many at all, so I'm not sure why it's worth making our users' lives more complicated, just to achieve standards compliance (which they don't seem to care about right now).\nThus far I did not manage to make it work. Spent the last 50+ minutes plus patching step-by-step resources that JSDom is unable to load.\n\nStorage objects fails with an error.\n// URLs fail with an error.\n\nAnd the extracted CSS is far from the CSS required to render page.\n\nAnyway, your project, do what you like.\n. Solved by https://github.com/gajus/usus. ",
    "SidKwok": "Thanks for your reply.. ",
    "armpogart": "@RyanZim I agree that nowadays it is safe to switch to https://, but anyways I don't see the need for it to parse Google Analytics. It would be better performance wise if we could just specify (with some begin and end comment) that it is unnecessary to parse it.. @RyanZim Does uncss give a way to configure jsdom as it had skipExternalResources property in old api which is still supported (as stated in their main documentation). If so we could give it regex and document the ability to ignore unneeded resources.. I still think the problem is not only on loading relative url. Why to load it in the first place, there can be many scripts that are there for other purposes and we don't need to load them (parse them) during uncss. So I still think it would be valid feature to have a way to ignore it.\nYeah, I agree that that we could simply delete it during uncss, but we don't do html preprocessing usually during css stage, for example when running gulp task and browserify, we may do css stage (which can compile sass, uncss, ...) but we don't preprocess html during serving dev, we usually process html only during build.. ",
    "chrismbarr": "I use a templating system and I have this line in my HTML template\nhtml\n<script src=\"{applicationPath}/assets/scripts.2.5.0.js\"></script>\nI was using UnCSS 0.14.1 before, and it had no problems.  Now on 0.15.0 is produces this error:\nWhich then produces this error\nError: Could not load script: \"file:///C:/my-project/templates/%7BapplicationPath%7D/assets/scripts.2.5.0.js\"\n    at C:\\my-project\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:44:23\n    at Object.check (C:\\my-project\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:89:11)\n    at ReadStream.<anonymous> (C:\\my-project\\node_modules\\jsdom\\lib\\jsdom\\living\\nodes\\Document-impl.js:108:12)\n    at ReadStream.wrappedEnqueued (C:\\my-project\\node_modules\\jsdom\\lib\\jsdom\\browser\\resource-loader.js:255:16)\n    at emitOne (events.js:115:13)\n    at ReadStream.emit (events.js:210:7)\n    at fs.js:1940:12\n    at FSReqWrap.oncomplete (fs.js:135:15) { Error: ENOENT: no such file or directory, open 'C:\\my-project\\templates\\%7BapplicationPath%7D\\assets\\scripts.2.5.0.js'\n  errno: -4058,\n  code: 'ENOENT',\n  syscall: 'open',\n  path: 'C:\\\\my-project\\\\templates\\\\%7BapplicationPath%7D\\\\assets\\\\scripts.2.5.0.js' }\nFor now my workaround is to remain on the older version so I can have my project continue to work.. That's not possible with my project, so I guess I'm either stuck waiting on the ability to blacklist certain scripts , disable all scripts, suppress errors, or just stick with the older version.. ",
    "DamonHD": "I tried to use the '-t 0' flag to get uncss NOT to try to load any JS.  May be worth using that as an official way of disabling load and run of JS.\nI don't touch any CSS in my JS, and almost all my JS is AdSense which I'd prefer that uncss didn't even try to run.  Indeed I get errors from the protocol-relative code recommended by Google, and which one is not meant to edit according Google's Ts&Cs.\nMaybe I'll fall back to purifycss for files with embedded scripts to avoid the errors at the cost of some extra bloat...\nRgds\nDamon.     % cat .note-on-carbon-cost-of-CDN.html | uncss -t 0 -n -m screen,print -i .container,.sidebar,.sml,.noprint,.ad -s img/css/base-20171001.css,img/css/desktop-20170906.css,img/css/fullw-20170606.css,img/css/table-20170622.css\n    h1,h2,h3{font-family:sans-serif}.sidebar{color:#000;background-color:#cfc;margin:1em 0}.sml{font-size:small}.pgdescription{font-weight:700;margin:1em 0}.ad{border:1px dotted red;margin:1em;padding:3px}.resp{max-width:100%;height:auto}.respfloatr{float:right;clear:right;height:auto;margin:1em 0 1em 1.5em}.respfloatr{max-width:50%}.respfloatr{border-radius:4px}@media screen and (min-width:640px){.container{max-width:800px;margin:auto}}@media print{.ad,.noprint{display:none!important}} \n    @media screen and (min-width:800px){.container{font-size:1.2rem}}\n.fullwcdisp{width:100%;width:100vw;position:relative;left:50%;right:50%;margin-left:-50%;margin-left:-50vw;margin-right:-50%;margin-right:-50vw}.fullwcdisp{clear:both;text-align:center}\n\ntable.tb1,table.tb1 td,table.tb1 th{border:1px solid}\n\n1) Note the blank lines between preserved CCS fragments for the separate files (currently I am stripping this out with an additional step in the pipeline.\n2) Secondary issue: note the trailing \\n not being stripped from the end of each file's preserved content even when it could be.. 1) Uncss is adding a newline of its own between files (even if all CSS dropped from that file) it seems.\n2) It's a shame for a minifier not to apply its built-in rules to eliminate trailing whitespace!  Another tool that shall remain nameless does eliminate whitespace between files (where safe).\n3) I don't have a blank line at the end of any* of my CCS files; they are already minified.\nRgds\nDamon\nPS. If you want to check, all CSS files under http://www.earth.org.uk/\n*PPS. OK, that turns out not to have been right for half of them: it depends how historically I generated the minified CCS file.. If I bundled up my input files and the result in a ZIP, along with the version output, would that be helpful?\nFWIW I am getting the same behaviour on a RPi (ie Linux) and on macOS, so I don't think that it's a weird one-off!\nRgds\nDamon. OK.  A new one for this purpose?. OK, see if this helps:\nhttps://github.com/DamonHD/201710-uncss-bug\nRgds\nDamon. Why don't you think trimming excess whitespace (leading, trailing, etc) in a non-breaking way isn't the obvious thing to do when you are otherwise helping remove redundancy and doing some fairly deep analysis?  I'm puzzled!  B^>\nAnyhow, thanks for looking into this!\nRgds\nDamon. Yes, that I understand.  And indeed if you look at my example you see there's now three adjacent blocks that could easily be merged, maybe we can talk about that one another time!  B^>\nBut you're (a) adding new whitespace here that I then need to run an extra process to remove incompletely and (b) as I understand it you're reconstituting the CSS from the semantics, so I'd suggest that preserving or re-injecting any non-functional content is the odd thing to do.\nRgds\nDamon. OK, I hear you.\nI'll be happy with uncss not adding a \\n, and I'll ensure that my new CSS handling will not leave a trailing \\n in the minified fragment .css files.  All should be happy.\nhttp://www.earth.org.uk/note-on-site-technicals-5.html#uncss\nThank you.\nRgds\nDamon. ",
    "jobe451": "I do have the same problem as chrismbarr. I have a template directory, path to js-scripts look like this (NEOS CMS):\n<script src=\"{f:uri.resource(path: 'js/libs/superfish.js', package: 'jobe.drsch')}\"></script>\nAlternatively, I tried to provide the test page, which has proper HTML. However, looks like I use some script that is understood by modern browsers but not by jsdom, resulting in this error:\nError: Uncaught [TypeError: window.matchMedia is not a function]\n\n. ",
    "michaelx": "+1 for a script blacklist option. That would be really useful.. ",
    "zaigham": "I think PhantomJS 1.x has problems with SNI based https.. ",
    "ahsenkh": "Windows 10 (8 GB of RAM), v6.11.2, 0.15.0\n~736 files with approx. 7.61 MB of size total.. The way this is done https://github.com/giakki/uncss#within-nodejs. But with options parameter.. Yeah I reckoned so. May need to run it on a server machine then, because running in chunks is no use to me. It adds duplicate css.\nI don't want to make much effort writing code to remove duplicates.. Yeah, memory can be utilized more efficiently, by unloading the pages that are processed.. .someClass label {\n    style: something;\n}\nBut in html, I have have a label element after someClass class. I create a label element on through Javascript. So, UnCSS would simply remove this css class.\nIt is understandable if I give an html file to clean. But for me, it even removed this class when I gave it the web page.. Yes I do understand. However, it removed the rule for me even though it was present inside the div. I gave 10 seconds timeout, but didn't work. However, I shall make a simpler example and try to experiment again.\nThis is the class I believe was removed. It was applied to a md-optgroup element. And angularjs automatically generates a label element after md-optgroup element.\n.filter-opt-group-field-policy-header label {\n    color: #D84315;\n}. ",
    "zeratul1": "Cool, \nthat is great :D\nChange to native promises should fix my issue.. ",
    "bbeesley": "Sure, I'll update the docs in the morning. I can't see it causing any issues changing the default user agent string, but I can change it to whatever the default jsdom one is if you prefer (or just not pass the option if it's unset). Not sure what you mean by that @XhmikosR \nI branched from develop, and the PR is against develop. Looks like a bunch of stuff was merged last night so I've had to rebase and push again, but there's nothing in the diff here that isn't related to this feature.\n@RyanZim I've updated the commit with a description of the option on the README. I haven't touched the default string, lmk if you want me to change it.. ",
    "joostlawerman": "@RyanZim added the comment.. ",
    "corpulentcoffee": "I guess dePseudify() is everyone's favorite.\nThis particular issue might be caused by the lack of an end anchor ($) on the regex that is used in that function. In a CSS selector, can anything follow after a pseudo that would be negatively affected by having a $ in the regex? Edit 12/7: Yes, see #351; dePseudify() can receive a selector with combinators where the individual elements can each have pseudos, so it would need to be split up first to add an anchor.\nSometimes I think that this function would be easier to reason about if instead of using a regex replace, it just walked the selector while checking to see if an escape is present (for #345) until it hits the first non-escaped colon, if any, and then drop everything off after it unless there's some special case (i.e. use a blacklist for items like those identified in https://github.com/giakki/uncss/pull/330#issuecomment-328698701 rather than a whitelist).\nIt would also be nice if dePseudify() was exported to be importable by the test suite to be tested directly independently... then we could just build up a bunch of test cases for this thing to make sure it's gotten right.. > Alternately, perhaps we should look into using https://github.com/postcss/postcss-selector-parser for this.\nI think this looks easier.\nI've only barely glanced at this but something like https://github.com/giakki/uncss/compare/master...corpulentcoffee:depseudify-via-psp might work?. > Also, just to verify, did you actually test that with HTML <div></div>, and CSS div:focus-within { background: red; }, the CSS isn't stripped?\nYes, I checked that out to make sure it would fix #349:\n```\n$ cat > test.html\n\n^D\n$ git checkout master \nSwitched to branch 'master'\nYour branch is up to date with 'upstream/master'.\n$ ./bin/uncss --raw 'div:focus-within { background: red; }' test.html \n$ git checkout depseudify-via-psp \nSwitched to branch 'depseudify-via-psp'\nYour branch is up to date with 'fork/depseudify-via-psp'.\n$ ./bin/uncss --raw 'div:focus-within { background: red; }' test.html \ndiv:focus-within { background: red; }\n```\n(This specific example is kind of silly, though, since one could argue it should strip the CSS rule since <div></div> has no child elements and therefore :focus-within would never match, but we don't have the machinery to do something that advanced.). > @corpulentcoffee :focus-within also matches the element itself, not just its children. If the HTML were something like <div tabindex=\"0\"></div> it would be focusable and the selector div:focus-within would match. I know it doesn't really matter because it detect this case either way, but just thought you'd like to know.\nAh, yes, thanks for the correction! That is indeed something I would like to know.. I actually didn't change the indentation of that (it's still in the 9th column after 8 spaces), but I can see how it looks weird followed by the new function (which is required by the func-style in-use by the project; I can't make it another const and have the linting pass) and const definition after that (which uses the function).\nI could give pseudosRegex its own const, but then eslint wants me to dedent the entire ignoredPseudos block since it would then by itself, and that's a bigger diff.\nI can change the formatting here to whatever you'd like, though, if you don't mind the bigger diff.. I agree! I'll change it.. ",
    "davidmurdoch": "@corpulentcoffee :focus-within also matches the element itself, not just its children. If the HTML were something like <div tabindex=\"0\"></div> it would be focusable and the selector div:focus-within would match. I know it doesn't really matter because it detect this case either way, but just thought you'd like to know.. ",
    "codedbypaul": "I suspect it's related to #349? . Adding :not\\(.*\\) to ignoredPseudos detects it.. :disabled isn't a pseudo-element though. It's a pseudo-class.. ",
    "renegeuze": "In trying to be short I might have phrased my needs incorrectly.\nI'll just try to make it clear with an example.\nUsing the following code\nvar uncss = require('uncss');\nvar pages = [\n    '',\n    'case/',\n    'case/factureren-volgens-finqle/',\n    'the-team/',\n    'about-us/',\n    'contact/',\n];\nvar options = {\n    ignore: [\n        /.*?.from\\-[a-z]+/,\n    ],\n    report: true,\n};\n\nvar files = [];\nfor (let i = 0; i<pages.length;i++) {\n    files.push(`http://local.example.com/${pages[i]}`);\n}\n\nuncss(files, options, function (error, output, report) {\n    console.log(report.selectors.unused);\n});\n\nIn the log I still get the following array items returned: \".site_content__page.from-left\" and \".team__member__header::before\"(and a lot more, but that's just for example)\nBoth these items are used but couldn't be checked by uncss. Because they are ignored by uncss I also expected these items not to be included in the \"report.selectors.unused\" list.\nWhich means I don't get a clean list of selectors that I'm supposed to delete from my source CSS.\n. ",
    "vivekaltruist": "This is only reproducible with a single css file. But when I do some edit on that file, it works fine. . ",
    "josh-g3": "Ran into the same thing writing a Chai integration test. If this is running somewhere you don't care about TLS verification, the line process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\" anywhere prior to sending the request seems to do the trick.\nIt is important to note that this is NOT SECURE AT ALL and should only be used for local testing.. ",
    "reddysridhar53": "Is this issue still open?.   rejectUnauthorized: false,\n  strictSSL: false\nAdding the above lines would be enough @RyanZim ?. ",
    "nvioli": "I'm having a related issue, though it looks like @RyoIkarashi's solution (and perhaps their problem) is around insecurely requesting the stylesheets.\nRather, I'm having a problem in jsdom when trying to request the html with an invalid certificate. The solution to my problem is to allow passing strictSSL option to jsdom. See my PR, and please let me know if my issue is different than this one and should be discussed separately.. ",
    "gbreux": "Interesting, that indeed makes sense.\nI just stopped using this technique and start to rev my assets, that was better anyway :)\nThanks for this explanation\n. ",
    "diego-betto": "The antivirus does not seem to believe the cryptominer something good seems to me.\nAt least the presence in the link should be notified.. ",
    "javve": "I want to use it in the same way. Seems to me like a very reasonable update? But I may have missed something as well? :) . ",
    "EugenGedroyc": "output: {}\nnodeJs v4.4.3\ni checked out node v.6.0.0 \noutput: { [Function: creator] process: [Function] }\nand message above \n\n(node:45684) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\n. if  i add any variable with require('uncss') or require('uncss').postcssPlugin;  console output for any gulp-task:\nC:\\work\\325\\layout\\node_modules\\uncss\\src\\uncss.js:64\nfunction getCSS([files, options, pages, stylesheets]) {\nSyntaxError: Unexpected token [\n    at exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:373:25)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object.<anonymous> (C:\\work\\325\\layout\\gulpfile.js:1:75)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10). \n",
    "brandonaaron": "The console.log statements might be coming from scripts run on the page. Threw a quick gist together to illustrate: https://gist.github.com/brandonaaron/eda9710e6c570f55f45f513a9565ed5d. Yeah, perhaps that is a better option of handling this. Maybe just silence the console.* methods entirely? Otherwise, I believe we'd need to capture all the utility logging methods like info, debug, table, etc that just go to stdout as well.\nEdit: According to the jsdom docs, I believe this would just involve dropping the sendTo here: https://github.com/uncss/uncss/blob/master/src/jsdom.js#L19\nI can submit a new PR for that if this is the best way for the project.\nEdit again... Although silencing the virtual console entirely might (seems likely) also hide JS errors that could make debugging why some styles didn't get included somewhat difficult. Would have to test that out.. Another reason why I like having the output file option is so that I can overwrite the desired css file in place. For instance I'm using parcel as part of a build-chain and it finger prints the css file. So I used find to grab the finger printed css file to use as the output. I believe redirecting stdout will clear the file for writing before uncss gets the chance to parse it.. Is there anything else I can do to get this PR and #385 merged?. Just wanted to follow up on this and #386. Anything else needed to get it merged?. Understood. Just want to highlight this comment as justification for this PR for the other collaborators. \nI still have that use-case. The css file name is hashed and I want to overwrite the file in-place.. AssertionError: expected 'log\\ninfo\\n' to include 'debug'\n    1) Should redirect console statements to stderr\nHmm... I'm surprised that the test failed by not including debug in the output.. Had some time to revisit this. console.debug did not exist in Node.js 6. Locally I was running the test suite against a newer version where the method did exist. In the newer versions it is just an alias for console.log. In fact, console.info is also just an alias for console.log. Perhaps I should simplify the code and just check console.log instead of looping on log and info. Thoughts?. ",
    "brandonkal": "@RyanZim as far as I can tell, report is not a CLI option: https://github.com/uncss/uncss#from-the-command-line\nI just tested using the flag and it had no effect on the output. I also found that no error is returned when invalid flags are used which is a seperate issue.. ",
    "slim16165": "Is it possible to force UnCSS to ignore canvas?\n\u1427\nIl giorno gio 24 gen 2019 alle ore 20:03 Ryan Zimmerman \nnotifications@github.com ha scritto:\n\nClosed #395 https://github.com/uncss/uncss/issues/395.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/uncss/uncss/issues/395#event-2095372563, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AD5b_RxMHFQ0irTVGLnRFgRUZe5_-OR_ks5vGgOWgaJpZM4aRa_f\n.\n. \n",
    "vaxul": "Good question. Maybe because I used it wrong and the https://github.com/isaacs/node-glob offered the ignore option which worked as expected in the first try.\nThank you for give me the right hint.\npublic/patterns//!(00-atoms-)/!(index|.markup-only).html seems to work woo.\nBut does this allow all possible ignore pattern? \ud83e\udd14 After this I'm wondering why the ignore option exists in node-glob at all.. So, reject this PR?\nOtherwise the option ignoreHtml would could be documented and is more easy to understand by others.. ",
    "billatgg": "@nvioli is out on family leave, but I can't reproduce any test failures in my dev environment.\n\"Cannot load http://getbootstrap.com/docs/3.3/examples/jumbotron/\" makes me think there was a (transitory?) issue in the CI environment? Or am I missing something?. ",
    "RobLoach": "Debugging information? There's a couple console.log()'s in there... Should either remove them, or use require('debug'), or another logging method.\n. ",
    "flip-it": "okey, both will work!. "
}