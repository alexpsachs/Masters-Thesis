{
    "tpope": "I've settled on adding a README instead. I don't want to complicate installation with a second file, seeing as how you can't use Pathogen to help you install Pathogen. ;)\n. You need to ensure pathogen is invoked before filetype plugin indent on. And on Debian based distributions and others that enable it automatically, you need to do filetype off first.\nThere's not much I can do about this but it does need to be better documented.\n. I'm as baffled now as I was a year ago, but I've refactored to remove that disabling logic from the glob, hopefully rendering the issue moot. Let me know if it's still an issue.\n. Accepted, thanks.\n. The vim-git-branch-info repository doesn't place its plugin file in the plugin/ directory; thus adding it to the load path doesn't cause the plugin to load. There's not much I can do about that.\n. Yeah, rson's comment is spot on. What is $VIM set to on Windows? Based on your response, I'm guessing it's blank?\n. You know it's possible (and, I dare say, more correct) to install add-ons in $HOME\\vimfiles, right?\n. Vim's file system APIs are pretty horrendous. I guess I could :silent! the errors but I worry that might swallow something informative.\n. I have the same thing in my vimrc and I agree it's a pain. However, just turning it off in pathogen#runtime_append_all_bundles() is kind of invasive (and also not the only function that's affected). I tried and failed to create a smarter solution several months back.\n. Accepted, thanks.\n. Sigh, this is why I'm so reluctant to accept pull requests. Fixed.\n. I was actually bitching about the original pull request that broke things (which I left lingering for days before blindly accepting after further pestering).\nI generally recommend a feature request or bug report before a pull request because (1) it oftentimes would take me minutes and you hours, and (2) some bugs may be deliberate behavior, and some feature requests may be deliberate omissions.\n. This confused me until I realized it was already fixed in f4f79bc7205b6c101955f32985a4d1b1da0be556. A release is overdue.\n. You've got DOS line endings in your file. Redownload it.\nAnd invoking helptags doesn't make sense before the load path has been changed.\n. You seem to be operating under the errant assumption that runtime files can only go under $VIM or $VIMRUNTIME. Just put them in $HOME\\vimfiles and everything should work fine.\n. The real issue is that Vim offers no API to check if a directory is writable, and $VIM usually isn't. This takes precedence over someone storing user preferences in Program Files like it's 1995.  Having done my time on Windows, I can most definitely assure you that messy though $HOME may be, strewing user preferences across Program Files is infinitely less maintainable.\nThis is not to say I'm not interested in a solution that works for everyone, just that doing things the normal way takes precedence over the weird way.\n. It looks like Vim stores the value of 'runtimepath' in Session.vim. You can prevent that with :set sessionoptions-=options, though that has the side effect of not persisting any global options, which may or may not be acceptable to you. Other than that, I'm afraid my hands are tied.\n. For me as well, but I can still clone from that URL, so I assume all is normal?\n. The section you quote mentions a vim.org url, not a github.com one. That should work.\nIf all else fails, drill into the repository and download pathogen.vim by hand.\n. Create your own custom excludes list and ignore tags there.\ngit config --global core.excludesfile '~/.gitexcludes'\necho tags > ~/.gitexcludes\nWay easier than modifying every plugin out there.\n. Looks pretty good, although it won't work on Windows. See if the variant I pushed up works for you.\n. Merged, thanks.\n. Fair enough, I added a note on the vim.org download page. If I ever get around to adding a README, I'll add it there too.\n. The crux of this issue is\n1. Vim doesn't provide an API to tell if a directory is writable or not.\n2. If I try to help-tag a $VIM directory on UNIX, it pitches a fit because of permissions.\n3. Storing your personal config outside of $HOME in 2011 is archaic, to say the list.\n4. I prioritize people doing the right thing on UNIX about people doing the weird thing on Windows.\nI highly recommend moving your plugins to $HOME\\vimfiles on Windows.\n. I could have sworn I closely investigated filewritable() back when I first implemented this, but apparently not. That's all I needed to fix it. Thanks!\nI stand by my \"weird\" assertion. These \"portable\" apps are intended for like a USB flash drive, right? That's a legitimate use case I hadn't considered (though personally I'd still prefer my personal config files to be separate from application files, if only for ease of backing up). However, nobody who has raised this issue has mentioned anything but a C:\\ path. Weird weird weird.\n. Bonus: now that this little inconsistency is cleared up, I feel confident claiming :Helptags as a pathogen#helptags() wrapper.\n. The underlying :helptags doesn't allow overriding a destination, so this is a non-starter. What I do is basically git config --global core.excludesfile '~/.cvsignore' and echo tags >> ~/.cvsignore (you can use any file you like, but .cvsignore is handily consulted by other tools like rsync).\n. I do something similar. My own plugins are all centralized, though, so I can handle them with a much cheaper\ncall pathogen#runtime_prepend_subdirectories(\"~/src/vim/bundle\")\nMy guess is you have a similar setup (with ~/.vim/plugins). If so, you could try that and see if it improves performance.\nI could add a loop if you really need it. But less code is better in my book.\n. By doesn't work, do you mean not at all, or just that it regresses to being slow?\n. Looks like I tried to reproduce this months ago and failed, but forgot to post back to the issue. I just made a fresh attempt to reproduce it and I still can't.  Note the Git version isn't distributed with a help file either; instead, it does some weird self mutilation to generate one (check git status in the repository after invoking Vim), and I'm guessing that's somehow to blame.  You can try to narrow it down by killing the showmarks tags file and seeing if the issue persists.  Other than that I'm tempted to pin the blame on showmarks and move on.\n. I can pretty much guarantee you that load order isn't the issue, as I'm using the same setup, and rails.vim doesn't check for surround.vim until long after all plugins have loaded. Here's the relevant code from rails.vim:\nhttps://github.com/tpope/vim-rails/blob/1bd7f2b8dc57f8e9e48d714a4b32218a0c67d53b/autoload/rails.vim#L4620-4642\nYou should try :echo b:surround_45 to see if it's successfully configured. If not, I'd try adding a bunch of :echomsg \"foo\"s all up and down that snippet of code and see if you can tell which conditional takes a wrong turn.\n. I've seen that done to support certain snippet plugins before. Seems kind of pointless to me, but it's pretty easy to support.\n. Hi Seth, this is some good stuff. To address your specific points:\n1. Even I can't remember the name of pathogen#runtime_append_all_bundles(). It took me a little too long to recognize the parallel between \"infect\" and \"pathogen\", but now that I do, I like it.\n2. :Helptags is a very recent addition. I hope some prominent documentation will take most of the pain away. That said, I'm not a big fan of forcing it each startup, and for better or worse, I'd rather stick with the Vim practice of making the user ultimately responsible for it. If users want to do that by putting it in their vimrc, that's okay.\n3. Dude, I spent a few hours on a rathole of trying to parse the output of :filetype so that I could do exactly this (it mostly worked). It never occurred to me to check for a global variable.\nIf you could make the following tiny changes, I'll be quite happy to merge:\n- Drop the l: prefixes.\n- Use separate lines rather than |. VimL is pretty damn hard to read as it is.\n- Ditch the pathogen#helptags() call. I might allow it at some future juncture.\n- Squash into the same commit and capitalize the commit message.\nThanks!\n. Sweet! Automatic pathogen#helptags() invocation is off the table until after the next release, which should hopefully happen within a week if I don't get too distracted. I want to draft a slick README to go with it.\n. Yeah, I can't reproduce either, so I'm killing it.\n. Yep, that's a recently added function that I need to cut a release for. It should hopefully clear up most of the confusion around this.\n. No can do, partner. Vim's :helptags takes a path to a directory, and that's it.\nSee the install instructions on the vim.org page for how to add tags to the global Git excludes list.\nBy the way, I recently added (but not yet documented) :Helptags for easier invocation.\n. Please fix the commit message and I'll merge it in. Thanks!\n. Yep, thanks!\n. Is there anything in ~/.vim/doc? If it's just a tags file, you may need to remove it.\n. I see you've already taken initiative in making this standalone, so I am closing the pull request.  For my part, I've added a README that takes a middle ground between completely automating the install and leaving the user to figure it out himself. :)\n. That's the new interface. It hasn't been cut into a release yet, but it will be soon.\n. Happy to merge, but was this actually breaking helptags on Windows? Surprised this is the first I've heard of it.\n. I just booted up my Windows VM and verified it does indeed generate tags on it. Were you getting an error, or just silent failure? You do not have 'shellslash' set, correct?\n. 'shellslash' is mainly used with setups like Cygwin. I don't have it set either (but it can be relevant so I thought I'd ask).\nI was looking for an error on :call pathogen#helptags() or :Helptags, not the actual :help invocation.\nI've gone ahead and merged in your changes, but I'd still like to isolate the cause, so that I can determine the priority of cutting a new release. If I can't find anything, I'm going to assume it's something really weird in your setup, and hold off on a release.\n. Obvious perhaps, but completely untrue. :echo isdirectory('C:/Windows') returns 1 (true). :e ~/_vimrc correctly edits the file. The only reason I bother with backslashes at all is so 'runtimepath' isn't an ugly mixture of the two. Something is broken on your machine. You can start investigating by running those two commands and seeing if they work for you.\n. :echo not :call\n. Ergh, I've reused this boilerplate in multiple repositories.\nThanks!\n. Where does :verbose set filetype? report that the option was set?\n. If you take out the call to pathogen but replace it with:\nfiletype off\nfiletype on\nWhat happens?\n. Okay, well therein lies the problem. If you're invoking pathogen after you've enabled filetypes, you can try moving the call to pathogen up and that should fix it.  If it's your Vim distribution doing it, however, you may have little choice but to invoke a workaround:\nautocmd BufNewFile,BufRead *.git/COMMIT_EDITMSG set ft=gitcommit\nAre you using a Linux distro's provided Vim? What distro?\n. For the record, I just tried that locally, and it didn't break file type detection for me. In fact, Debian does something similar (:filetype on) and I've never had an issue with that. I'm guessing something more nuanced is going on.\nI'd be interested to see if a second Gentoo user could reproduce this.\n. @wokka has reproduced this as well, this time on Ubuntu.\n. So :syntax on is the trigger, eh? That might give us some options.  Tell me, all of you affected, if you add syntax on to your vimrc after calling pathogen, does it fix the issue?\n. Well toggling the filetype off and on enables ftdetect files in bundles to be loaded.  That's the reason for infect.\nDebian does not have syntax on.  With that clue, I imagine I can figure something out.  I just need some time to dig in.\n. Interesting point. I'll add it.\nBTW, this is how I used to sidestep that problem on Windows:\nif has(\"win32\")\n  let &runtimepath =\n        \\ substitute(&runtimepath,'Documents and Settings[\\\\/][^\\\\/,]*[\\\\/]\\zsvimfiles\\>','.vim','g')\nendif\n. Looks to be the same as #38. If you take out the call to pathogen and put the following instead, does it still break?\nfiletype off\nfiletype on\n. Well there's your workaround. Are you on Gentoo as well?\n. Conf highlighting is a weird special case:  It's the last check in filetype.vim and looks for # comments near the top of the file. That doesn't explain much, though.\nI'm guessing you're just not looking hard enough for that filetype on.  Debian, for instance, used to have it in debian.vim (but it seems to have been removed). Maybe :grep '^ *filetype.*on' $VIM/**/*.vim /etc/vim.\nI'm closing this as a dupe of #38.  Additional information should be posted there.\n. My guess is the real problem is that you're trying to use fugitive.vim outside of a Git repository. There's no conceivable way for plugin loading to be deferred until after :Vedit is invoked.\n. Hi Daniel,\nIs there some advantage to ; \\ chaining I'm missing? Both seem equally copy-and-pastable to me.\n. Eh, an iffy argument, but I'll accept it.  Please squash those two commits into one and I'll merge it in.\n. Thanks.\n. Thanks. I fixed your commit message this time; please use a real one in the future.\n. This is as intended. Fugitive merely preps the runtime path so that Vim is aware of your bundles during plugin load time.  As far as fugitive#statusline() goes, if you add it to 'statusline', the plugin will be loaded before the function is invoked.\n. :help fugitive-statusline\n. It works fine in your vimrc. Copy the set line exactly from the help.\n. Works fine for me.\n. @jmcaffee, that solution causes every single directory inside every single bundle to be added, surely not what you had in mind.\nAs a first step, can you post the output of :set runtimepath? when pathogen is not activated?\n. I don't think there's a limit on length, just :set output length. Try :echo &runtimepath rather than :set runtimepath?\nThat's a weird mixture of \\ and / in your runtimepath, but it should work fine.\n. Then what did you mean by a \"limit on the length of the runtimepath\"?\n. It does look deeper once it hits the after directories in 'runtimepath'. That is, it adds ~/vimfiles/bundle/* when it hits ~/vimfiles and adds ~/vimfiles/bundle/*/after when it hits ~/vimfiles/after.\n. Not sure I follow. When I :set rtp?, I see paths with ~. But when I :echo &rtp, they're already expanded.\nAlso, that count thing sounds like a separate pull request.\n. Can you see if simplify() or resolve() fixes it? Those feel more appropriate.\n. Fair enough. Can you squash it into one commit?\n. Thanks. I fixed the commit message to be conventional; please do this in the future.\n. Okay, so I like this feature and want to keep it, although you wouldn't know that by looking because it's apparently broken. Easy to fix, though.\nAs for the issue at hand, it looks like it can be fixed without dropping the feature by using -range=1 instead. Right? I've pushed it up if you want to check for further issues with it.\n. What is the output of :set cp?. Pathogen does not work in compatibility mode.\n. Literally the only thing that can cause this is installing Pathogen in the wrong place, or not at all.\n. Indeed. Automatically generating helptags is kind of \"un-Vim-like\", and you won't catch me doing it, but the downsides are minimal.\n. Can you paste the output of :echo &runtimepath? Sounds like the after/ path is getting added but the root path is not.\n. See #38. I've been putting off revisiting it.\n. There's a fix in Vim now. http://ftp.vim.org/pub/vim/patches/7.3/7.3.430\n. I've wanted something like this for a while. Two big caveats:\n1. Calling pathogen#infect() a second time results in scanning not just the original runtime path, but also inside any bundles that were added the previous go around. With a lot of bundles, this is noticeably slow. Plus the path ends up in a weird order.\n2. If Vim has already loaded, we need to manually activate plugins and filetype detection. This is not necessarily unfeasible, but I'm guessing there are edge cases hiding in there (things like #38).\n. Thanks.\n. I don't understand how this would help. Are you trying to make .vim itself a submodule?\n. Sounds janky as hell, and would just confuse people. I'm gonna pass. Note that as the docs explain, there are other ways to make pathogen a submodule.\n. Try\ngit clone https://github.com/jelera/vim-gummybears-colorscheme ~/.vim/bundle/vim-gummybears-colorscheme\n. Yes, the root of each set of runtime files must sit in bundle.\n. Looks like it, but then again pathogen never shells out so I don't know why it would cause this. What makes you think pathogen is to blame?\n. If there's no backtrace, there's not much for me to work with here. What happens if you don't call pathogen#infect() but still load the file with :source ~/.vim/autoload/pathogen.vim?\n. Looks like glob() requires shelling out. In which case I'm afraid there's not much that can be done.\n. One thing you could try is set shell=/bin/bash early in your vimrc.\n. It should work fine. What makes you think it failed to load? Is it in :set runtimepath??\n/cc @sjl\n. Well it used to work :/. Thanks for bringing it to my attention.\n. Yes, I was going to say this is well tread territory. Can you try grabbing pathogen.vim out of each of commits that supposedly fixed each respective issue and see which of them are functional?\n. As a curiosity, here's how I solved the same problem. It makes some assumptions about the directory structure, but so far they've always held true:\nif has(\"win32\")\n  let &runtimepath = substitute(&runtimepath,'\\(Documents and Settings\\|Users\\)[\\\\/][^\\\\/,]*[\\\\/]\\zsvimfiles\\>','.vim','g')\nendif\n. According to :help 'rtp the default is based on $HOME. Are there cases where $HOME isn't set? I'm debating adding a function for this to pathogen proper.\nexpand('~') is probably the right solution actually. Should work on any platform.\n. If it were me, I'd kill the runtime! invocation (Vim does that automatically) and  move the post-config chunk to .vim/after/plugin/csapprox.vim (or whatever the corresponding filename is). Don't think too much about the after in the path; it will load regardless of whether the original plugin loaded.\nI don't think there's much that can be done about the pre-config chunk. I just have a section in my vimrc for plugin settings.\n. I just do silent! call pathogen#infect(). But that takes away the ability to conditionally load bundle_config.vim, if you care about that sort of thing.\n. Just took a quick peak at the implementation and I'm inclined to agree. It's actually hard coded to assume it's installed in the first directory in runtime path.\nMight I recommend https://github.com/kien/rainbow_parentheses.vim?\n. What's the use case for dot prefixed bundles?  All these glob() calls add up, unfortunately.\n. It's a trade-off. Automatic help tag generation means hiding or spamming errors on startup, and potentially a slower load time.  Whenever there's no clear right answer, I do what Vim does. And Vim does not generate help tags automatically.\n:Helptags is in the README. Perhaps it needs to be more prominent.\n. Yep. Note that particular file is already included with Vim (:edit $VIMRUNTIME/syntax/spec.vim), so in this case you didn't really need to do anything at all. :)\n. Sorry for letting this hang. Docs are now in scriptease.vim.\n. Let's start with pinning down your use case. Are these after/ files you're trying to edit? I usually get to those with :Vopen after/.... Other than that, I almost never need a count, so I'm curious why you do.\nAdding:Vopenall would turn :Vo into an ambiguous command, so I don't think I'll go that route. I like the 0 idea.\n. I've extracted the :Vopen command to scriptease.vim, and in the process, added support for loading all matches into the location list. Try it out, and feel free to open a new scriptease.vim issue if you have any ideas for improvements.\n. Does :Vopen ftp\\git<Tab> work as expected? If so, it should be a simple fix.\n. I took a blind stab at it. Let me know if it doesn't work.\n. This happens on firing of git commit, but not when running vim?\n. Sounds like Git is invoking Vim weird, maybe? Check ps aux while it's running and see if you can find exactly how vim was invoked.\n. You screwed up the copy and paste.\n. I've done something similar (use ~\\.vim rather than ~\\vimfiles on Windows) and it works fine. Please clarify \"does not work.\"\n. Is pathogen in ~/.vim2/autoload?\nOn Sun, Sep 9, 2012 at 4:38 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nI want to use vim -u .vimrc2 to read another vim configuration (vim\ndefault will read ~/.vimrc , so I use -u command to force vim read another\nvimrc)\nThat is , I want to read ~/.vim2 rather than ~/.vim when I use *vim -u\n.vimrc2' ,\nmy .vimrc2 settings is here:(I change the default runtimepath from ~/.vim\nto ~/.vim2)\nset\nrtp=~/.vim2,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim2/after\n\"\"pathogen settings\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nIt occurs error when I use vim -u ~/.vimrc2:E117:\nUndefined function: pathogen#infect\nI do not know why this happen?\nThanks for any comment\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8401812.\n. Before pathogen#infect(), try both runtime! autoload/pathogen.vim and source ~/.vim2/autoload/pathogen.vim. The success or failure of each of those will offer further clues.\n. Well it does not good to add them after the error has already happened. And\ntry them one at a time.\n\nOn Mon, Sep 10, 2012 at 8:17 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nThanks for your reply\nI have added both lines in ~/.vimrc2:\nset\nrtp=~/.vim2,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim2/after\n\"\"\"use pathogen insted of vundle\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nbut still occurs:\nE117: Undefined function: pathogen#infect\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8421549.\n. I mean try one, then remove it, then try the other. They're both different\nways of forcing Vim to load pathogen.\n\nOn Mon, Sep 10, 2012 at 10:10 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nSorry for my poor comprehension , I do not understand what you mean \" try\nthem one at a time\"\nCan you elaborate?\nI comment out these lines from ~/.vimrc2:\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nand I use vim -u ~/.vimrc2\nafter I have a vim window, I try each line in ex mode\nIt doesn't occurs error when I use :call pathogen#infect()\nIt means that vim can find the function\nI do not understand why this happen :(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8424465.\n. In that case, it sounds like .vim2/autoload/pathogen.vim doesn't contain\nwhat you think it contains. Try replacing it with a fresh download.\n\nOn Mon, Sep 10, 2012 at 10:34 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nThanks!\nI try vim -u ~/.vimrc twice by remove one of them each time:\nFirst try:\nruntime! autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\nSecond try:\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8424725.\n. Oh, looks like you need an explicit set nocompatible. Normally that's done automatically but I guess -u disables that.\n. Definitely not true. Maybe your system is missing some certificate authorities?\n. Deleted. Thanks.\n. Given the mention of Syntastic in that error message, I'm going to go out\non a limb and hypothesize that has something to do with Syntastic, not\nPathogen.\n\nOn Sep 25, 2012, at 12:51, Bill Zeng notifications@github.com wrote:\nWhen I try to write the file, it fails.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/tpope/vim-pathogen/issues/76.\n. Autoload is deferred until you call a function defined in a namespace matching the filename.  For example, calling foo#bar() would cause autoload/foo.vim to be loaded.\nIn the case of togglebg, there's some function you have to call to activate it. Check the docs.\n. Probably possible, but super tricky. The first challenge is to add it to the runtime path. What position does it belong in? The OCD part of me wants to inject it into the exact spot it would have appeared if it had been loaded with Vim. But I guess we could get by with something more predictable.\nThe harder part is actually loading plugins after they've been added. Do we :source them? :runtime them? Do we need to dispatch any autocmds?\n. As discussed on IRC, not really. .vimrc.before is probably the way to go\n. You're correct in that it's no longer strictly necessary. I've updated that comment accordingly.\n. This was supposed to be a warning to stop using pathogen#runtime_append_all_bundles() in favor of pathogen#infect(). Thanks!\n. Thanks! I think I've screwed this up in every conceivable way.\n. Weird. Try each of\ncall pathogen#infect('bundle/{}')\ncall pathogen#infect('bundle/*')\nWhat do they do?\n. My guess is you named .vim/bundle incorrectly. There is no s.\n. Oh, I just noticed your tree. Check the value of 'runtimepath' after each of those commands.\n. I don't know. Maybe you have something dumb in 'wildignore'?\n. @CostaMichailidis have you tried the same debugging steps I outlined above?\n. Try\n:echo glob(\"~/.vim/bundle/*\")\n. Okay, hmm, try\n:echo pathogen#glob_directories(\"~/.vim/bundle/*\")\n. Possible, but an unlikely culprit. Check your runtime path with this in your vimrc:\ncall pathogen#incubate(\"bundle/{}\")\n. Ding ding ding! Yes, fish will give you all sorts of issues with Vim due to it eschewing Bourne compatibility, and thus is best avoided.\nOne of the things Vim uses the shell for is some of the the more complicated globbing.  In newer versions, this includes things like curly brackets.  Looks like you discovered that older versions shelled out for even globs including brackets. (Or negated brackets. I'm not sure what the trigger is.)\nWe're already filtering out ~ directories another way, so this glob can be simplified, thus solving the issue.\nI'm going to assume this was the root cause for all parties involved.  Please reopen if you're still having issues.\n. Globbing does expand environment variables so that should work. I use it in my own setup.\n. Oh, huh, that's surprising but not that surprising. Does expand('$DOTFILES') work as expected on Windows? If so we can leverage that to make it work consistently across platforms.\n. Alright, just to be 100% clear, what does :echo glob('$DOTFILES') report?\n. Oh, then that my refutes my hypothesis of what was going wrong. Can you clarify \"\"$DOTFILES wasn't getting expanded in Windows\", keeping in mind that pathogen#expand() does not expand environment variables?\n. Can you try call pathogen#surround(\"$DOTFILES/vim/bundle/{}\") in your vimrc and see if that fails the same way?\n. Okay, one last thing (hopefully). Can you try with a ~/something/{} path and see if the ~ is correctly expanded to your home directory?\n. Finally dug in on Windows myself. @edbrannin, can you confirm the latest fixes it?\n. Does dropping -s and -S give an error? I don't want to drop SSL verification just to support people with a broken curl.\n. You're on the right track. Add a runtime! autoload/pathogen.vim at the top.\n. Do it in the respective after/ file (e.g. after/plugin/fugitive.vim). Or use a VimEnter autocommand.\n. Welp, I answered over there.\n. See #53.  This is a Vim bug. Try upgrading to 7.3.430 or higher, or try disabling bundles till you find the one that triggers it.\n. Not what I would have expected, but I don't doubt it. If you can't upgrade Vim, you can use a lower level function like pathogen#incubate() or pathogen#surround().\n. Note that those lower level functions won't trigger reloading any ftdetect files inside your bundles.\n. Should be fixed.\n. Maybe mention the error?\n. ~/.vim/doc should be empty, but you should find files like ~/.vim/bundle/command-t/doc/tags\n. Let the record show this is completely unrelated to the original issue.\nYou can try removing this silent! and see if an error shows up.\n. v:exception is kind of gross looking. I'm going to try silencing all failures and see if that's any better.\n. You don't have pathogen installed correctly. Check the README.\n. Pretty much. If you like how vundle works you should use vundle. I have some ideas about how a \"real\" package manager should work, and if I ever chose to execute on them, they will probably (but not definitely) go into another plugin.\n. Actually the latest returns an empty string. I have some ideas for how to leverage an :execute in the future.\n. The ordering isn't strict, but you definitely still want filetype plugin indent on in your vimrc. Pathogen only touches this stuff if it was already turned on.\n. Set g:pathogen_disabled to a list of bundle names.\n. Thanks\n. Right, it makes for a slightly cleaner history. Not something I'd normally bother with, but someone else added it and it seems pretty benign.\n. Is this a really old version of Vim?\n. Yep, that's nearly a decade old, and not supported.\n. -u NONE indeed.\n. Be sure to keep Windows support in mind.\n. Pathogen seems an unlikely culprit. Are you sure you have this problem even with no other plugins installed?\n. You could try changing :execute to :call but that's really a shot in the\ndark.\nOn Fri, Jul 26, 2013 at 2:38 AM, Andreas Mischke\nnotifications@github.comwrote:\n\nI emptied the /bundles directory (~/.vim/bundles) and the problem still\noccurs.\nWhen I comment out the line execute pathogen#infect() in .vimrc, the\nproblem is solved.\nIf it helps, here my .vimrc: http://pastebin.com/qKg8b197\nI should mention that I am a fairly n00b to vim and bash...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/102#issuecomment-21604003\n.\n. So a few other things to try:\n- Check :set rtp? with no plugins installed, and make sure pathogen hasn't found plugins where you don't expect.\n- Try call pathogen#infect('bundle/*'). This will add * paths directly to the runtime path, which mostly works the same, but short circuits some of the machinery in pathogen.vim (i.e., less to go wrong).\n. Oh, and regarding the \"more recent change\" part, if you could find a commit where this started happening, that would make it super easy to track down the problem.\n. Good detective work. If anyone else could confirm, that would be great.\n\nOne thing that might be good to rule out is pathogen#cycle_filetype(), which is called by pathogen#infect(). You can skip it by directly calling pathogen#incubate() instead.\n. I think the next logical step is to bisect $VIMRUNTIME/filetype.vim and find out what the real culprit is. Start by emptying it and seeing if the problem persists.\nBuffer events make no sense for an event that's supposed to happen on startup.\n. The event you're looking for is VimEnter, but I'd rather not resort to that as I want reloading the vimrc to retrigger filetype cycling, plus it's unclear to me that filetype cycling after loading all the user's autocmds won't cause trouble.\nLooking at the Vim source, ftdetect.vim plus optionally ftplugin.vim and indent.vim are run on filetype on, and ftoff.vim plus optionally ftplugof.vim and indoff.vim are run on filetype off. The optional ones are contingent on which features are enabled: check the output of a bare :filetype. As I read it, those 6 files are the only possible effects of the two commands, so emptying all 6 should give pretty conclusive results of if we're on the right track. (But note it's possible to have multiples of any of these files, so check :scriptnames to make sure you got them all.)\n. BTW now that we know the cause, a workaround to skip the filetype cycling call pathogen#incubate().\n. If you really want to get to the bottom if it, you'll need to tear apart pathogen.vim itself and try to figure out what line causes the issue.. Official interface is execute pathogen#infect(). The idea was that a future version might return VimL to be executed in the context of one's vimrc. I'll think further on allowing this for pathogen#incubate() and the like but pathogen#infect() is off the table.\n. Are you using fish shell?\n. I think ~/vim/bundle/.{} should work, but I haven't tested.\n. This should be fixed.\n. I can't dig into this now, but I think you're correct in blaming pathogen#join(). A tweak to the escape in the innermost while is probably all that's needed.\nTake a stab yourself, or post back both :set runtimepath? and :echo &runtimepath without pathogen, and I might have a look at some point in the future.\n. It's in an issue tracker, but you already knew that. And yes, I asked for those values because they would be helpful.\n. I don't see any UNC paths in there. Is this even the same issue?\nOn Fri, May 30, 2014 at 5:03 AM, padraic notifications@github.com wrote:\n\n:set runtimepath?\nruntimepath=X:\\vimfiles,X:\\vimfiles\\bundle\\vim-kolor,C:\\Program Files\n(x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files\n(x86)\\Vim/vimfiles/after,X:\\vimfiles/after\necho &runtimepath without pathogen\nX:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files\n(x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\nApologies for the earlier density. If I can add anything else that would\nbe helpful please let me know.\nI don't know if it's relevant or not but pathogen worked for adding a\ntheme [kolor] but not for adding NERDTree. This is the issue that prompted\nme to check github for existing issues.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/108#issuecomment-44629060.\n. So no, not the same issue. Please open a new issue with your actual symptoms.\n. Yeah you can call it no problem, but note that plugins have already loaded at that point. :runtime plugin/**/*.vim will reinitiate that; plugins may vary on how well this is supported.\n\nI don't see any good coming from creating an incompatible pathogen fork.\n. What does :set rtp? report back?. Looks okay to me. You only need the first of the two pathogen calls. You're sure surround.vim and nerdtree aren't loaded?\n. Two things to try independently:\n1. Remove vundle\n2. Change toexecute pathogen#infect('~/.vim/bundle/{}'). Clarify how you're installing nerdtree.\n. Really not sure what's going on. Check:scriptnamesand see if nerdtree is in there.\n. I just noticed that there's no~/.vimrcin that output. Instead there's a~/.vim/.vimrcwhich is loaded _after_ all the plugins are, meaning it's too late to activate pathogen.\n. Going to take that as the root cause. I'm not sure _why_ it loads that in that particular order, but that's a question the Vim source could answer.\n. Wrong repo, buddy.\n. Check:set compatible?and:set loadplugins?and make sure they're correct.\n. Dunno what to say. The only thing pathogen does is change'runtimepath', and it sounds like it succeeded at that. I'd speculate that the Vim shipped with Arch is super stripped down, but then I wouldn't expect pathogen to work at all.\n. @royaldark One other cause could be that you called pathogen after plugins have started loading, which is too late to add additional plugins to load. Check :scriptnames and make sure pathogen appears before any other plugins.\n. Unfortunate, but I'm not sure what to do about it. How do these users not notice their config is broken?\n. Yep. In particular, I want to make it possible for pathogen to returnfinishin some cases (most likely triggered by an environment variable) so that you can disable your vimrc but keep your plugins enabled, which can be very useful when debugging.\n. Looks like you meant to open this against Command-T instead?\n. I can reproduce, and also get weird error dumps if I poke at it. No idea what the root cause is but it's easy enough to work around.\n. 7.0.305 was my test case, for future reference.\n. Are you using the latest from GitHub? The workaround has not made it into a stable release.\n. Yes, please do send a patch.\n. Added a-L` to follow the redirect. Thanks for the heads up.\n. This pushes it over the 80 character mark, so I'm not changing it till I have to.\n. Not yet. It's a little unclear how that would interact with built-in plugins.\n. So fugitive, for example, will work just fine without Git, up till the point you explicitly invoke a command. I think plugins that don't are broken, generally speaking. My strategy for dealing with these \"broken\" plugins is to install them ad hoc on a per machine basis, and limit my shared config to safe plugins.\nThat said, I think the approach I assume you want (put everything you could conceivably want in submodules and then conditionally load them) is valid. I'm just not sure it's a great fit for pathogen. I think if I ever decided to pursue it, it would be in a different plugin entirely.\n. Since Pathogen doesn't handle installation, this would force the user to both install by hand and update their vimrc on install, and do the reverse on uninstall. That's a ridiculous amount of effort plus opens up 4 different edge cases if they forget a step.\n. You can call pathogen#interpose('bundle/YouCompleteMe') to add a single bundle to the runtime path. Is that what you're really after?\n. Wrap the commit message body to 72 characters as indicated in the contribution guidelines.\n. Oh, and present tense.\n. The $VIMRUNTIME dir is for files that ships with Vim. You probably want to put files in $VIM/vimfiles instead.\n. Pushed\n. -L follows redirects. What's the problem?\n. This has nothing to do with pathogen, just with some plugin it's loading.\n. Are you using the exact curl command given? -L should follow the redirect.\n. Dupe of #128 at any rate.\n. With .vimrc in $VIMBLACKLIST, pathogen#infect() returns finish, which when given to :execute handily short circuits the rest of the vimrc (occasionally useful when debugging). There should be no other difference.\nFirst step to debugging would be to check :scriptnames for any discrepancies between the two setups.\n. Looks good.\n. Check :scriptnames to find out when ftdetect/markdown.vim is loaded. The whole point of this function is to fix the exact problem you describe, so something else is whack.\n. Major red flag in ftdetect/mkd.vim, suggesting you installed a completely different markdown plugin than the one you posted on.\n. Cloned into .vim/bundle like any other plugin.\n. That conditional is only true after pathogen has loaded. You can explicitly load with runtime! autoload/pathogen.vim.\n. \"Infect\" needs to happen on Vim startup. Helptags generation needs to happen on installation. So I think it's quite inappropriate to add that to your vimrc. Instead, it should be handled as part of the install/update process, which is outside the scope of Pathogen.\nFor the de facto installation method of cloning a Git repository, it's possible to automate this with Git hooks, but since that's nontrivial to set up, I also provide :Helptags (and the semi-deprecated pathogen#helptags()) for interactive usage.\n. If it's even failing on the GitHub URL, that sounds like a problem on your end. Are there any https URLs you can successfully retrieve.\n. I'm thinking this should wait for 3.0.\n. It's your vimrc's job to load pathogen.vim so the ordering is correct. Confirm how you're invoking pathogen and the directory structure of your Vim directory.\n. Find the plugin echoing it. It's not pathogen.\n. I was waiting until 3.0 on the grounds that this is a breaking change (albeit interactive only so not sure it matters). I don't understand how it could break tab completion.\n. Tab completion is case sensitive and I don't know of a way to change that.\n. lol wow is there anything that option doesn't affect?\n. Not keen on officially endorsing a kludge like this. As you yourself noted, it doesn't even work for one of your three examples.\nThe \"trailing {}\" clause is obsolete. I'll remove it.\n. You can maybe start vim as vim -V99 to see a dump of everything that's happening on startup, in order to narrow down the precise trigger. Other than that, you can try installing a slightly different vim version, as the problem is likely a bug in your particular patch level.\n. When you give Pathogen an absolute path, it has no way to know where you want it inserted. Give it something runtime relative like .bundle/{} and it will nest it like you desire.\n. Check :set runtimepath? before that and make sure it includes /Users/me/.vim.\n. With Vim running, can you report the output of\n:echo pathogen#infect()\n. What's the first 5 lines of :version?\n. Wait, why do those errors say bash? Those aren't vim errors at all.\n. Don't source ~/.vimrc in bash.\n. Do your installed plugins work?\n. Yeah the instructions say vimrc. I don't really want to muddle them with things not to do.\n. I am thinking it might make more sense to accept a * wildcard in the existing blacklist options rather than add yet another. Would that still solve your problem?\n. Helptags should be called at installation time, not startup time. I deliberately omitted it from pathogen#infect() for that reason.\n. After each plugin installation. Ideally whatever you use to install Vim plugins would generate help tags automatically, but since git clone is the de facto install tool I provide :Helptags to ease that pain a bit.  I could see adding a FAQ entry for this.\n. If you upgrade a plugin you will need to rerun :Helptags to get full coverage for any doc changes.\n. You can give infect multiple arguments. Does that take care of everything?\n. The truncation is a function of :set output. See :echo &rtp.\n. Fixed, thanks.\n. Fixed, thanks. I used to point at the GitHub URL directly but I kept getting reports of failures I couldn't reproduce.\n. Thanks!\n. At this time I don't think the handful of use cases this would support justifies inventing a proprietary pathogen standard, no. If I ever did go down this road, I would just source a broad file glob (e.g., runtime! preload/*.vim), rather than dictate some weird autoload function convention. All your 6 line solution adds is more boilerplate and longer, more opaque error messages.\n. Yeah it absolutely has nothing to do with pathogen.\n. That file is already loaded by the system vimrc. You don't need it in your personal vimrc at all.\n. Needs to be wrapped to 80 chars\n. Yes that is the reason.. Dupe of #136\n. Check your 'runtimepath' on each version and see if anything changed. You can get it into a buffer with :call setline(1, pathogen#split(&rtp))\n. Nevermind, I see what it is.\n. Presumably it was down but it's up now.\n. Check :set runtimepath?\n. Get rid of all that crap you copied from your system vimrc.\n. Yeah, it's in one of the plugins that Pathogen is loading.\n. I might add reloading some day, but it would take a lot more work than just ripping the corresponding development tools out of scriptease. If you want to leverage that functionality in the meantime, I recommend copy and paste.\n. - I don't use the triple backslash notation because it's nonstandard and looks weird if you're reading the README directly. I might cave on real code examples for the syntax highlighting, but I see extremely limited value in highlighting a curl command, for example.\n- I favor \"vimrc\" over .vimrc because on Windows the file is often named _vimrc. My terminology is closer to that used within Vim's own help.\n- Most of the other changes (in particular the comma fiddling) seem pretty arbitrary. Any you care to defend?\n. /usr/share/vim/vimfiles will work for most setups.\n. How are you getting a capitalized command completed from a lowercase input?\n. I brought them back because I was trying to be diligent about semver and save the removal for 3.0. But it's a dumb user facing feature with a clear migration path so fine, y'all win.. It's actually been on my todo list to replace all my URLs with a hosting agnostic redirect. Something like\ngit clone https://tpope.io/vim/sensible.git\n. Thanks, fixed.. Was doing some server maintenance. Should be back up.. I don't know where you got ~/.config/vim from. If you're running Neovim, it should be ~/.config/nvim.. You're cloning a directory to a filename.. In Neovim you need to install in ~/.config/nvim instead (or add ~/.vim to your runtime path).. Yep!. Sessions load after plugins are already active, so changing 'runtimepath' in one will have no effect on what plugins are loaded.. Wrong repo.. I've settled on adding a README instead. I don't want to complicate installation with a second file, seeing as how you can't use Pathogen to help you install Pathogen. ;)\n. You need to ensure pathogen is invoked before filetype plugin indent on. And on Debian based distributions and others that enable it automatically, you need to do filetype off first.\nThere's not much I can do about this but it does need to be better documented.\n. I'm as baffled now as I was a year ago, but I've refactored to remove that disabling logic from the glob, hopefully rendering the issue moot. Let me know if it's still an issue.\n. Accepted, thanks.\n. The vim-git-branch-info repository doesn't place its plugin file in the plugin/ directory; thus adding it to the load path doesn't cause the plugin to load. There's not much I can do about that.\n. Yeah, rson's comment is spot on. What is $VIM set to on Windows? Based on your response, I'm guessing it's blank?\n. You know it's possible (and, I dare say, more correct) to install add-ons in $HOME\\vimfiles, right?\n. Vim's file system APIs are pretty horrendous. I guess I could :silent! the errors but I worry that might swallow something informative.\n. I have the same thing in my vimrc and I agree it's a pain. However, just turning it off in pathogen#runtime_append_all_bundles() is kind of invasive (and also not the only function that's affected). I tried and failed to create a smarter solution several months back.\n. Accepted, thanks.\n. Sigh, this is why I'm so reluctant to accept pull requests. Fixed.\n. I was actually bitching about the original pull request that broke things (which I left lingering for days before blindly accepting after further pestering).\nI generally recommend a feature request or bug report before a pull request because (1) it oftentimes would take me minutes and you hours, and (2) some bugs may be deliberate behavior, and some feature requests may be deliberate omissions.\n. This confused me until I realized it was already fixed in f4f79bc7205b6c101955f32985a4d1b1da0be556. A release is overdue.\n. You've got DOS line endings in your file. Redownload it.\nAnd invoking helptags doesn't make sense before the load path has been changed.\n. You seem to be operating under the errant assumption that runtime files can only go under $VIM or $VIMRUNTIME. Just put them in $HOME\\vimfiles and everything should work fine.\n. The real issue is that Vim offers no API to check if a directory is writable, and $VIM usually isn't. This takes precedence over someone storing user preferences in Program Files like it's 1995.  Having done my time on Windows, I can most definitely assure you that messy though $HOME may be, strewing user preferences across Program Files is infinitely less maintainable.\nThis is not to say I'm not interested in a solution that works for everyone, just that doing things the normal way takes precedence over the weird way.\n. It looks like Vim stores the value of 'runtimepath' in Session.vim. You can prevent that with :set sessionoptions-=options, though that has the side effect of not persisting any global options, which may or may not be acceptable to you. Other than that, I'm afraid my hands are tied.\n. For me as well, but I can still clone from that URL, so I assume all is normal?\n. The section you quote mentions a vim.org url, not a github.com one. That should work.\nIf all else fails, drill into the repository and download pathogen.vim by hand.\n. Create your own custom excludes list and ignore tags there.\ngit config --global core.excludesfile '~/.gitexcludes'\necho tags > ~/.gitexcludes\nWay easier than modifying every plugin out there.\n. Looks pretty good, although it won't work on Windows. See if the variant I pushed up works for you.\n. Merged, thanks.\n. Fair enough, I added a note on the vim.org download page. If I ever get around to adding a README, I'll add it there too.\n. The crux of this issue is\n1. Vim doesn't provide an API to tell if a directory is writable or not.\n2. If I try to help-tag a $VIM directory on UNIX, it pitches a fit because of permissions.\n3. Storing your personal config outside of $HOME in 2011 is archaic, to say the list.\n4. I prioritize people doing the right thing on UNIX about people doing the weird thing on Windows.\nI highly recommend moving your plugins to $HOME\\vimfiles on Windows.\n. I could have sworn I closely investigated filewritable() back when I first implemented this, but apparently not. That's all I needed to fix it. Thanks!\nI stand by my \"weird\" assertion. These \"portable\" apps are intended for like a USB flash drive, right? That's a legitimate use case I hadn't considered (though personally I'd still prefer my personal config files to be separate from application files, if only for ease of backing up). However, nobody who has raised this issue has mentioned anything but a C:\\ path. Weird weird weird.\n. Bonus: now that this little inconsistency is cleared up, I feel confident claiming :Helptags as a pathogen#helptags() wrapper.\n. The underlying :helptags doesn't allow overriding a destination, so this is a non-starter. What I do is basically git config --global core.excludesfile '~/.cvsignore' and echo tags >> ~/.cvsignore (you can use any file you like, but .cvsignore is handily consulted by other tools like rsync).\n. I do something similar. My own plugins are all centralized, though, so I can handle them with a much cheaper\ncall pathogen#runtime_prepend_subdirectories(\"~/src/vim/bundle\")\nMy guess is you have a similar setup (with ~/.vim/plugins). If so, you could try that and see if it improves performance.\nI could add a loop if you really need it. But less code is better in my book.\n. By doesn't work, do you mean not at all, or just that it regresses to being slow?\n. Looks like I tried to reproduce this months ago and failed, but forgot to post back to the issue. I just made a fresh attempt to reproduce it and I still can't.  Note the Git version isn't distributed with a help file either; instead, it does some weird self mutilation to generate one (check git status in the repository after invoking Vim), and I'm guessing that's somehow to blame.  You can try to narrow it down by killing the showmarks tags file and seeing if the issue persists.  Other than that I'm tempted to pin the blame on showmarks and move on.\n. I can pretty much guarantee you that load order isn't the issue, as I'm using the same setup, and rails.vim doesn't check for surround.vim until long after all plugins have loaded. Here's the relevant code from rails.vim:\nhttps://github.com/tpope/vim-rails/blob/1bd7f2b8dc57f8e9e48d714a4b32218a0c67d53b/autoload/rails.vim#L4620-4642\nYou should try :echo b:surround_45 to see if it's successfully configured. If not, I'd try adding a bunch of :echomsg \"foo\"s all up and down that snippet of code and see if you can tell which conditional takes a wrong turn.\n. I've seen that done to support certain snippet plugins before. Seems kind of pointless to me, but it's pretty easy to support.\n. Hi Seth, this is some good stuff. To address your specific points:\n1. Even I can't remember the name of pathogen#runtime_append_all_bundles(). It took me a little too long to recognize the parallel between \"infect\" and \"pathogen\", but now that I do, I like it.\n2. :Helptags is a very recent addition. I hope some prominent documentation will take most of the pain away. That said, I'm not a big fan of forcing it each startup, and for better or worse, I'd rather stick with the Vim practice of making the user ultimately responsible for it. If users want to do that by putting it in their vimrc, that's okay.\n3. Dude, I spent a few hours on a rathole of trying to parse the output of :filetype so that I could do exactly this (it mostly worked). It never occurred to me to check for a global variable.\nIf you could make the following tiny changes, I'll be quite happy to merge:\n- Drop the l: prefixes.\n- Use separate lines rather than |. VimL is pretty damn hard to read as it is.\n- Ditch the pathogen#helptags() call. I might allow it at some future juncture.\n- Squash into the same commit and capitalize the commit message.\nThanks!\n. Sweet! Automatic pathogen#helptags() invocation is off the table until after the next release, which should hopefully happen within a week if I don't get too distracted. I want to draft a slick README to go with it.\n. Yeah, I can't reproduce either, so I'm killing it.\n. Yep, that's a recently added function that I need to cut a release for. It should hopefully clear up most of the confusion around this.\n. No can do, partner. Vim's :helptags takes a path to a directory, and that's it.\nSee the install instructions on the vim.org page for how to add tags to the global Git excludes list.\nBy the way, I recently added (but not yet documented) :Helptags for easier invocation.\n. Please fix the commit message and I'll merge it in. Thanks!\n. Yep, thanks!\n. Is there anything in ~/.vim/doc? If it's just a tags file, you may need to remove it.\n. I see you've already taken initiative in making this standalone, so I am closing the pull request.  For my part, I've added a README that takes a middle ground between completely automating the install and leaving the user to figure it out himself. :)\n. That's the new interface. It hasn't been cut into a release yet, but it will be soon.\n. Happy to merge, but was this actually breaking helptags on Windows? Surprised this is the first I've heard of it.\n. I just booted up my Windows VM and verified it does indeed generate tags on it. Were you getting an error, or just silent failure? You do not have 'shellslash' set, correct?\n. 'shellslash' is mainly used with setups like Cygwin. I don't have it set either (but it can be relevant so I thought I'd ask).\nI was looking for an error on :call pathogen#helptags() or :Helptags, not the actual :help invocation.\nI've gone ahead and merged in your changes, but I'd still like to isolate the cause, so that I can determine the priority of cutting a new release. If I can't find anything, I'm going to assume it's something really weird in your setup, and hold off on a release.\n. Obvious perhaps, but completely untrue. :echo isdirectory('C:/Windows') returns 1 (true). :e ~/_vimrc correctly edits the file. The only reason I bother with backslashes at all is so 'runtimepath' isn't an ugly mixture of the two. Something is broken on your machine. You can start investigating by running those two commands and seeing if they work for you.\n. :echo not :call\n. Ergh, I've reused this boilerplate in multiple repositories.\nThanks!\n. Where does :verbose set filetype? report that the option was set?\n. If you take out the call to pathogen but replace it with:\nfiletype off\nfiletype on\nWhat happens?\n. Okay, well therein lies the problem. If you're invoking pathogen after you've enabled filetypes, you can try moving the call to pathogen up and that should fix it.  If it's your Vim distribution doing it, however, you may have little choice but to invoke a workaround:\nautocmd BufNewFile,BufRead *.git/COMMIT_EDITMSG set ft=gitcommit\nAre you using a Linux distro's provided Vim? What distro?\n. For the record, I just tried that locally, and it didn't break file type detection for me. In fact, Debian does something similar (:filetype on) and I've never had an issue with that. I'm guessing something more nuanced is going on.\nI'd be interested to see if a second Gentoo user could reproduce this.\n. @wokka has reproduced this as well, this time on Ubuntu.\n. So :syntax on is the trigger, eh? That might give us some options.  Tell me, all of you affected, if you add syntax on to your vimrc after calling pathogen, does it fix the issue?\n. Well toggling the filetype off and on enables ftdetect files in bundles to be loaded.  That's the reason for infect.\nDebian does not have syntax on.  With that clue, I imagine I can figure something out.  I just need some time to dig in.\n. Interesting point. I'll add it.\nBTW, this is how I used to sidestep that problem on Windows:\nif has(\"win32\")\n  let &runtimepath =\n        \\ substitute(&runtimepath,'Documents and Settings[\\\\/][^\\\\/,]*[\\\\/]\\zsvimfiles\\>','.vim','g')\nendif\n. Looks to be the same as #38. If you take out the call to pathogen and put the following instead, does it still break?\nfiletype off\nfiletype on\n. Well there's your workaround. Are you on Gentoo as well?\n. Conf highlighting is a weird special case:  It's the last check in filetype.vim and looks for # comments near the top of the file. That doesn't explain much, though.\nI'm guessing you're just not looking hard enough for that filetype on.  Debian, for instance, used to have it in debian.vim (but it seems to have been removed). Maybe :grep '^ *filetype.*on' $VIM/**/*.vim /etc/vim.\nI'm closing this as a dupe of #38.  Additional information should be posted there.\n. My guess is the real problem is that you're trying to use fugitive.vim outside of a Git repository. There's no conceivable way for plugin loading to be deferred until after :Vedit is invoked.\n. Hi Daniel,\nIs there some advantage to ; \\ chaining I'm missing? Both seem equally copy-and-pastable to me.\n. Eh, an iffy argument, but I'll accept it.  Please squash those two commits into one and I'll merge it in.\n. Thanks.\n. Thanks. I fixed your commit message this time; please use a real one in the future.\n. This is as intended. Fugitive merely preps the runtime path so that Vim is aware of your bundles during plugin load time.  As far as fugitive#statusline() goes, if you add it to 'statusline', the plugin will be loaded before the function is invoked.\n. :help fugitive-statusline\n. It works fine in your vimrc. Copy the set line exactly from the help.\n. Works fine for me.\n. @jmcaffee, that solution causes every single directory inside every single bundle to be added, surely not what you had in mind.\nAs a first step, can you post the output of :set runtimepath? when pathogen is not activated?\n. I don't think there's a limit on length, just :set output length. Try :echo &runtimepath rather than :set runtimepath?\nThat's a weird mixture of \\ and / in your runtimepath, but it should work fine.\n. Then what did you mean by a \"limit on the length of the runtimepath\"?\n. It does look deeper once it hits the after directories in 'runtimepath'. That is, it adds ~/vimfiles/bundle/* when it hits ~/vimfiles and adds ~/vimfiles/bundle/*/after when it hits ~/vimfiles/after.\n. Not sure I follow. When I :set rtp?, I see paths with ~. But when I :echo &rtp, they're already expanded.\nAlso, that count thing sounds like a separate pull request.\n. Can you see if simplify() or resolve() fixes it? Those feel more appropriate.\n. Fair enough. Can you squash it into one commit?\n. Thanks. I fixed the commit message to be conventional; please do this in the future.\n. Okay, so I like this feature and want to keep it, although you wouldn't know that by looking because it's apparently broken. Easy to fix, though.\nAs for the issue at hand, it looks like it can be fixed without dropping the feature by using -range=1 instead. Right? I've pushed it up if you want to check for further issues with it.\n. What is the output of :set cp?. Pathogen does not work in compatibility mode.\n. Literally the only thing that can cause this is installing Pathogen in the wrong place, or not at all.\n. Indeed. Automatically generating helptags is kind of \"un-Vim-like\", and you won't catch me doing it, but the downsides are minimal.\n. Can you paste the output of :echo &runtimepath? Sounds like the after/ path is getting added but the root path is not.\n. See #38. I've been putting off revisiting it.\n. There's a fix in Vim now. http://ftp.vim.org/pub/vim/patches/7.3/7.3.430\n. I've wanted something like this for a while. Two big caveats:\n1. Calling pathogen#infect() a second time results in scanning not just the original runtime path, but also inside any bundles that were added the previous go around. With a lot of bundles, this is noticeably slow. Plus the path ends up in a weird order.\n2. If Vim has already loaded, we need to manually activate plugins and filetype detection. This is not necessarily unfeasible, but I'm guessing there are edge cases hiding in there (things like #38).\n. Thanks.\n. I don't understand how this would help. Are you trying to make .vim itself a submodule?\n. Sounds janky as hell, and would just confuse people. I'm gonna pass. Note that as the docs explain, there are other ways to make pathogen a submodule.\n. Try\ngit clone https://github.com/jelera/vim-gummybears-colorscheme ~/.vim/bundle/vim-gummybears-colorscheme\n. Yes, the root of each set of runtime files must sit in bundle.\n. Looks like it, but then again pathogen never shells out so I don't know why it would cause this. What makes you think pathogen is to blame?\n. If there's no backtrace, there's not much for me to work with here. What happens if you don't call pathogen#infect() but still load the file with :source ~/.vim/autoload/pathogen.vim?\n. Looks like glob() requires shelling out. In which case I'm afraid there's not much that can be done.\n. One thing you could try is set shell=/bin/bash early in your vimrc.\n. It should work fine. What makes you think it failed to load? Is it in :set runtimepath??\n/cc @sjl\n. Well it used to work :/. Thanks for bringing it to my attention.\n. Yes, I was going to say this is well tread territory. Can you try grabbing pathogen.vim out of each of commits that supposedly fixed each respective issue and see which of them are functional?\n. As a curiosity, here's how I solved the same problem. It makes some assumptions about the directory structure, but so far they've always held true:\nif has(\"win32\")\n  let &runtimepath = substitute(&runtimepath,'\\(Documents and Settings\\|Users\\)[\\\\/][^\\\\/,]*[\\\\/]\\zsvimfiles\\>','.vim','g')\nendif\n. According to :help 'rtp the default is based on $HOME. Are there cases where $HOME isn't set? I'm debating adding a function for this to pathogen proper.\nexpand('~') is probably the right solution actually. Should work on any platform.\n. If it were me, I'd kill the runtime! invocation (Vim does that automatically) and  move the post-config chunk to .vim/after/plugin/csapprox.vim (or whatever the corresponding filename is). Don't think too much about the after in the path; it will load regardless of whether the original plugin loaded.\nI don't think there's much that can be done about the pre-config chunk. I just have a section in my vimrc for plugin settings.\n. I just do silent! call pathogen#infect(). But that takes away the ability to conditionally load bundle_config.vim, if you care about that sort of thing.\n. Just took a quick peak at the implementation and I'm inclined to agree. It's actually hard coded to assume it's installed in the first directory in runtime path.\nMight I recommend https://github.com/kien/rainbow_parentheses.vim?\n. What's the use case for dot prefixed bundles?  All these glob() calls add up, unfortunately.\n. It's a trade-off. Automatic help tag generation means hiding or spamming errors on startup, and potentially a slower load time.  Whenever there's no clear right answer, I do what Vim does. And Vim does not generate help tags automatically.\n:Helptags is in the README. Perhaps it needs to be more prominent.\n. Yep. Note that particular file is already included with Vim (:edit $VIMRUNTIME/syntax/spec.vim), so in this case you didn't really need to do anything at all. :)\n. Sorry for letting this hang. Docs are now in scriptease.vim.\n. Let's start with pinning down your use case. Are these after/ files you're trying to edit? I usually get to those with :Vopen after/.... Other than that, I almost never need a count, so I'm curious why you do.\nAdding:Vopenall would turn :Vo into an ambiguous command, so I don't think I'll go that route. I like the 0 idea.\n. I've extracted the :Vopen command to scriptease.vim, and in the process, added support for loading all matches into the location list. Try it out, and feel free to open a new scriptease.vim issue if you have any ideas for improvements.\n. Does :Vopen ftp\\git<Tab> work as expected? If so, it should be a simple fix.\n. I took a blind stab at it. Let me know if it doesn't work.\n. This happens on firing of git commit, but not when running vim?\n. Sounds like Git is invoking Vim weird, maybe? Check ps aux while it's running and see if you can find exactly how vim was invoked.\n. You screwed up the copy and paste.\n. I've done something similar (use ~\\.vim rather than ~\\vimfiles on Windows) and it works fine. Please clarify \"does not work.\"\n. Is pathogen in ~/.vim2/autoload?\nOn Sun, Sep 9, 2012 at 4:38 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nI want to use vim -u .vimrc2 to read another vim configuration (vim\ndefault will read ~/.vimrc , so I use -u command to force vim read another\nvimrc)\nThat is , I want to read ~/.vim2 rather than ~/.vim when I use *vim -u\n.vimrc2' ,\nmy .vimrc2 settings is here:(I change the default runtimepath from ~/.vim\nto ~/.vim2)\nset\nrtp=~/.vim2,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim2/after\n\"\"pathogen settings\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nIt occurs error when I use vim -u ~/.vimrc2:E117:\nUndefined function: pathogen#infect\nI do not know why this happen?\nThanks for any comment\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8401812.\n. Before pathogen#infect(), try both runtime! autoload/pathogen.vim and source ~/.vim2/autoload/pathogen.vim. The success or failure of each of those will offer further clues.\n. Well it does not good to add them after the error has already happened. And\ntry them one at a time.\n\nOn Mon, Sep 10, 2012 at 8:17 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nThanks for your reply\nI have added both lines in ~/.vimrc2:\nset\nrtp=~/.vim2,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim2/after\n\"\"\"use pathogen insted of vundle\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nbut still occurs:\nE117: Undefined function: pathogen#infect\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8421549.\n. I mean try one, then remove it, then try the other. They're both different\nways of forcing Vim to load pathogen.\n\nOn Mon, Sep 10, 2012 at 10:10 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nSorry for my poor comprehension , I do not understand what you mean \" try\nthem one at a time\"\nCan you elaborate?\nI comment out these lines from ~/.vimrc2:\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nand I use vim -u ~/.vimrc2\nafter I have a vim window, I try each line in ex mode\nIt doesn't occurs error when I use :call pathogen#infect()\nIt means that vim can find the function\nI do not understand why this happen :(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8424465.\n. In that case, it sounds like .vim2/autoload/pathogen.vim doesn't contain\nwhat you think it contains. Try replacing it with a fresh download.\n\nOn Mon, Sep 10, 2012 at 10:34 AM, Ming-Hsuan-Tu notifications@github.comwrote:\n\nThanks!\nI try vim -u ~/.vimrc twice by remove one of them each time:\nFirst try:\nruntime! autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\nSecond try:\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/73#issuecomment-8424725.\n. Oh, looks like you need an explicit set nocompatible. Normally that's done automatically but I guess -u disables that.\n. Definitely not true. Maybe your system is missing some certificate authorities?\n. Deleted. Thanks.\n. Given the mention of Syntastic in that error message, I'm going to go out\non a limb and hypothesize that has something to do with Syntastic, not\nPathogen.\n\nOn Sep 25, 2012, at 12:51, Bill Zeng notifications@github.com wrote:\nWhen I try to write the file, it fails.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/tpope/vim-pathogen/issues/76.\n. Autoload is deferred until you call a function defined in a namespace matching the filename.  For example, calling foo#bar() would cause autoload/foo.vim to be loaded.\nIn the case of togglebg, there's some function you have to call to activate it. Check the docs.\n. Probably possible, but super tricky. The first challenge is to add it to the runtime path. What position does it belong in? The OCD part of me wants to inject it into the exact spot it would have appeared if it had been loaded with Vim. But I guess we could get by with something more predictable.\nThe harder part is actually loading plugins after they've been added. Do we :source them? :runtime them? Do we need to dispatch any autocmds?\n. As discussed on IRC, not really. .vimrc.before is probably the way to go\n. You're correct in that it's no longer strictly necessary. I've updated that comment accordingly.\n. This was supposed to be a warning to stop using pathogen#runtime_append_all_bundles() in favor of pathogen#infect(). Thanks!\n. Thanks! I think I've screwed this up in every conceivable way.\n. Weird. Try each of\ncall pathogen#infect('bundle/{}')\ncall pathogen#infect('bundle/*')\nWhat do they do?\n. My guess is you named .vim/bundle incorrectly. There is no s.\n. Oh, I just noticed your tree. Check the value of 'runtimepath' after each of those commands.\n. I don't know. Maybe you have something dumb in 'wildignore'?\n. @CostaMichailidis have you tried the same debugging steps I outlined above?\n. Try\n:echo glob(\"~/.vim/bundle/*\")\n. Okay, hmm, try\n:echo pathogen#glob_directories(\"~/.vim/bundle/*\")\n. Possible, but an unlikely culprit. Check your runtime path with this in your vimrc:\ncall pathogen#incubate(\"bundle/{}\")\n. Ding ding ding! Yes, fish will give you all sorts of issues with Vim due to it eschewing Bourne compatibility, and thus is best avoided.\nOne of the things Vim uses the shell for is some of the the more complicated globbing.  In newer versions, this includes things like curly brackets.  Looks like you discovered that older versions shelled out for even globs including brackets. (Or negated brackets. I'm not sure what the trigger is.)\nWe're already filtering out ~ directories another way, so this glob can be simplified, thus solving the issue.\nI'm going to assume this was the root cause for all parties involved.  Please reopen if you're still having issues.\n. Globbing does expand environment variables so that should work. I use it in my own setup.\n. Oh, huh, that's surprising but not that surprising. Does expand('$DOTFILES') work as expected on Windows? If so we can leverage that to make it work consistently across platforms.\n. Alright, just to be 100% clear, what does :echo glob('$DOTFILES') report?\n. Oh, then that my refutes my hypothesis of what was going wrong. Can you clarify \"\"$DOTFILES wasn't getting expanded in Windows\", keeping in mind that pathogen#expand() does not expand environment variables?\n. Can you try call pathogen#surround(\"$DOTFILES/vim/bundle/{}\") in your vimrc and see if that fails the same way?\n. Okay, one last thing (hopefully). Can you try with a ~/something/{} path and see if the ~ is correctly expanded to your home directory?\n. Finally dug in on Windows myself. @edbrannin, can you confirm the latest fixes it?\n. Does dropping -s and -S give an error? I don't want to drop SSL verification just to support people with a broken curl.\n. You're on the right track. Add a runtime! autoload/pathogen.vim at the top.\n. Do it in the respective after/ file (e.g. after/plugin/fugitive.vim). Or use a VimEnter autocommand.\n. Welp, I answered over there.\n. See #53.  This is a Vim bug. Try upgrading to 7.3.430 or higher, or try disabling bundles till you find the one that triggers it.\n. Not what I would have expected, but I don't doubt it. If you can't upgrade Vim, you can use a lower level function like pathogen#incubate() or pathogen#surround().\n. Note that those lower level functions won't trigger reloading any ftdetect files inside your bundles.\n. Should be fixed.\n. Maybe mention the error?\n. ~/.vim/doc should be empty, but you should find files like ~/.vim/bundle/command-t/doc/tags\n. Let the record show this is completely unrelated to the original issue.\nYou can try removing this silent! and see if an error shows up.\n. v:exception is kind of gross looking. I'm going to try silencing all failures and see if that's any better.\n. You don't have pathogen installed correctly. Check the README.\n. Pretty much. If you like how vundle works you should use vundle. I have some ideas about how a \"real\" package manager should work, and if I ever chose to execute on them, they will probably (but not definitely) go into another plugin.\n. Actually the latest returns an empty string. I have some ideas for how to leverage an :execute in the future.\n. The ordering isn't strict, but you definitely still want filetype plugin indent on in your vimrc. Pathogen only touches this stuff if it was already turned on.\n. Set g:pathogen_disabled to a list of bundle names.\n. Thanks\n. Right, it makes for a slightly cleaner history. Not something I'd normally bother with, but someone else added it and it seems pretty benign.\n. Is this a really old version of Vim?\n. Yep, that's nearly a decade old, and not supported.\n. -u NONE indeed.\n. Be sure to keep Windows support in mind.\n. Pathogen seems an unlikely culprit. Are you sure you have this problem even with no other plugins installed?\n. You could try changing :execute to :call but that's really a shot in the\ndark.\nOn Fri, Jul 26, 2013 at 2:38 AM, Andreas Mischke\nnotifications@github.comwrote:\n\nI emptied the /bundles directory (~/.vim/bundles) and the problem still\noccurs.\nWhen I comment out the line execute pathogen#infect() in .vimrc, the\nproblem is solved.\nIf it helps, here my .vimrc: http://pastebin.com/qKg8b197\nI should mention that I am a fairly n00b to vim and bash...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/102#issuecomment-21604003\n.\n. So a few other things to try:\n- Check :set rtp? with no plugins installed, and make sure pathogen hasn't found plugins where you don't expect.\n- Try call pathogen#infect('bundle/*'). This will add * paths directly to the runtime path, which mostly works the same, but short circuits some of the machinery in pathogen.vim (i.e., less to go wrong).\n. Oh, and regarding the \"more recent change\" part, if you could find a commit where this started happening, that would make it super easy to track down the problem.\n. Good detective work. If anyone else could confirm, that would be great.\n\nOne thing that might be good to rule out is pathogen#cycle_filetype(), which is called by pathogen#infect(). You can skip it by directly calling pathogen#incubate() instead.\n. I think the next logical step is to bisect $VIMRUNTIME/filetype.vim and find out what the real culprit is. Start by emptying it and seeing if the problem persists.\nBuffer events make no sense for an event that's supposed to happen on startup.\n. The event you're looking for is VimEnter, but I'd rather not resort to that as I want reloading the vimrc to retrigger filetype cycling, plus it's unclear to me that filetype cycling after loading all the user's autocmds won't cause trouble.\nLooking at the Vim source, ftdetect.vim plus optionally ftplugin.vim and indent.vim are run on filetype on, and ftoff.vim plus optionally ftplugof.vim and indoff.vim are run on filetype off. The optional ones are contingent on which features are enabled: check the output of a bare :filetype. As I read it, those 6 files are the only possible effects of the two commands, so emptying all 6 should give pretty conclusive results of if we're on the right track. (But note it's possible to have multiples of any of these files, so check :scriptnames to make sure you got them all.)\n. BTW now that we know the cause, a workaround to skip the filetype cycling call pathogen#incubate().\n. If you really want to get to the bottom if it, you'll need to tear apart pathogen.vim itself and try to figure out what line causes the issue.. Official interface is execute pathogen#infect(). The idea was that a future version might return VimL to be executed in the context of one's vimrc. I'll think further on allowing this for pathogen#incubate() and the like but pathogen#infect() is off the table.\n. Are you using fish shell?\n. I think ~/vim/bundle/.{} should work, but I haven't tested.\n. This should be fixed.\n. I can't dig into this now, but I think you're correct in blaming pathogen#join(). A tweak to the escape in the innermost while is probably all that's needed.\nTake a stab yourself, or post back both :set runtimepath? and :echo &runtimepath without pathogen, and I might have a look at some point in the future.\n. It's in an issue tracker, but you already knew that. And yes, I asked for those values because they would be helpful.\n. I don't see any UNC paths in there. Is this even the same issue?\nOn Fri, May 30, 2014 at 5:03 AM, padraic notifications@github.com wrote:\n\n:set runtimepath?\nruntimepath=X:\\vimfiles,X:\\vimfiles\\bundle\\vim-kolor,C:\\Program Files\n(x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files\n(x86)\\Vim/vimfiles/after,X:\\vimfiles/after\necho &runtimepath without pathogen\nX:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files\n(x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\nApologies for the earlier density. If I can add anything else that would\nbe helpful please let me know.\nI don't know if it's relevant or not but pathogen worked for adding a\ntheme [kolor] but not for adding NERDTree. This is the issue that prompted\nme to check github for existing issues.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/108#issuecomment-44629060.\n. So no, not the same issue. Please open a new issue with your actual symptoms.\n. Yeah you can call it no problem, but note that plugins have already loaded at that point. :runtime plugin/**/*.vim will reinitiate that; plugins may vary on how well this is supported.\n\nI don't see any good coming from creating an incompatible pathogen fork.\n. What does :set rtp? report back?. Looks okay to me. You only need the first of the two pathogen calls. You're sure surround.vim and nerdtree aren't loaded?\n. Two things to try independently:\n1. Remove vundle\n2. Change toexecute pathogen#infect('~/.vim/bundle/{}'). Clarify how you're installing nerdtree.\n. Really not sure what's going on. Check:scriptnamesand see if nerdtree is in there.\n. I just noticed that there's no~/.vimrcin that output. Instead there's a~/.vim/.vimrcwhich is loaded _after_ all the plugins are, meaning it's too late to activate pathogen.\n. Going to take that as the root cause. I'm not sure _why_ it loads that in that particular order, but that's a question the Vim source could answer.\n. Wrong repo, buddy.\n. Check:set compatible?and:set loadplugins?and make sure they're correct.\n. Dunno what to say. The only thing pathogen does is change'runtimepath', and it sounds like it succeeded at that. I'd speculate that the Vim shipped with Arch is super stripped down, but then I wouldn't expect pathogen to work at all.\n. @royaldark One other cause could be that you called pathogen after plugins have started loading, which is too late to add additional plugins to load. Check :scriptnames and make sure pathogen appears before any other plugins.\n. Unfortunate, but I'm not sure what to do about it. How do these users not notice their config is broken?\n. Yep. In particular, I want to make it possible for pathogen to returnfinishin some cases (most likely triggered by an environment variable) so that you can disable your vimrc but keep your plugins enabled, which can be very useful when debugging.\n. Looks like you meant to open this against Command-T instead?\n. I can reproduce, and also get weird error dumps if I poke at it. No idea what the root cause is but it's easy enough to work around.\n. 7.0.305 was my test case, for future reference.\n. Are you using the latest from GitHub? The workaround has not made it into a stable release.\n. Yes, please do send a patch.\n. Added a-L` to follow the redirect. Thanks for the heads up.\n. This pushes it over the 80 character mark, so I'm not changing it till I have to.\n. Not yet. It's a little unclear how that would interact with built-in plugins.\n. So fugitive, for example, will work just fine without Git, up till the point you explicitly invoke a command. I think plugins that don't are broken, generally speaking. My strategy for dealing with these \"broken\" plugins is to install them ad hoc on a per machine basis, and limit my shared config to safe plugins.\nThat said, I think the approach I assume you want (put everything you could conceivably want in submodules and then conditionally load them) is valid. I'm just not sure it's a great fit for pathogen. I think if I ever decided to pursue it, it would be in a different plugin entirely.\n. Since Pathogen doesn't handle installation, this would force the user to both install by hand and update their vimrc on install, and do the reverse on uninstall. That's a ridiculous amount of effort plus opens up 4 different edge cases if they forget a step.\n. You can call pathogen#interpose('bundle/YouCompleteMe') to add a single bundle to the runtime path. Is that what you're really after?\n. Wrap the commit message body to 72 characters as indicated in the contribution guidelines.\n. Oh, and present tense.\n. The $VIMRUNTIME dir is for files that ships with Vim. You probably want to put files in $VIM/vimfiles instead.\n. Pushed\n. -L follows redirects. What's the problem?\n. This has nothing to do with pathogen, just with some plugin it's loading.\n. Are you using the exact curl command given? -L should follow the redirect.\n. Dupe of #128 at any rate.\n. With .vimrc in $VIMBLACKLIST, pathogen#infect() returns finish, which when given to :execute handily short circuits the rest of the vimrc (occasionally useful when debugging). There should be no other difference.\nFirst step to debugging would be to check :scriptnames for any discrepancies between the two setups.\n. Looks good.\n. Check :scriptnames to find out when ftdetect/markdown.vim is loaded. The whole point of this function is to fix the exact problem you describe, so something else is whack.\n. Major red flag in ftdetect/mkd.vim, suggesting you installed a completely different markdown plugin than the one you posted on.\n. Cloned into .vim/bundle like any other plugin.\n. That conditional is only true after pathogen has loaded. You can explicitly load with runtime! autoload/pathogen.vim.\n. \"Infect\" needs to happen on Vim startup. Helptags generation needs to happen on installation. So I think it's quite inappropriate to add that to your vimrc. Instead, it should be handled as part of the install/update process, which is outside the scope of Pathogen.\nFor the de facto installation method of cloning a Git repository, it's possible to automate this with Git hooks, but since that's nontrivial to set up, I also provide :Helptags (and the semi-deprecated pathogen#helptags()) for interactive usage.\n. If it's even failing on the GitHub URL, that sounds like a problem on your end. Are there any https URLs you can successfully retrieve.\n. I'm thinking this should wait for 3.0.\n. It's your vimrc's job to load pathogen.vim so the ordering is correct. Confirm how you're invoking pathogen and the directory structure of your Vim directory.\n. Find the plugin echoing it. It's not pathogen.\n. I was waiting until 3.0 on the grounds that this is a breaking change (albeit interactive only so not sure it matters). I don't understand how it could break tab completion.\n. Tab completion is case sensitive and I don't know of a way to change that.\n. lol wow is there anything that option doesn't affect?\n. Not keen on officially endorsing a kludge like this. As you yourself noted, it doesn't even work for one of your three examples.\nThe \"trailing {}\" clause is obsolete. I'll remove it.\n. You can maybe start vim as vim -V99 to see a dump of everything that's happening on startup, in order to narrow down the precise trigger. Other than that, you can try installing a slightly different vim version, as the problem is likely a bug in your particular patch level.\n. When you give Pathogen an absolute path, it has no way to know where you want it inserted. Give it something runtime relative like .bundle/{} and it will nest it like you desire.\n. Check :set runtimepath? before that and make sure it includes /Users/me/.vim.\n. With Vim running, can you report the output of\n:echo pathogen#infect()\n. What's the first 5 lines of :version?\n. Wait, why do those errors say bash? Those aren't vim errors at all.\n. Don't source ~/.vimrc in bash.\n. Do your installed plugins work?\n. Yeah the instructions say vimrc. I don't really want to muddle them with things not to do.\n. I am thinking it might make more sense to accept a * wildcard in the existing blacklist options rather than add yet another. Would that still solve your problem?\n. Helptags should be called at installation time, not startup time. I deliberately omitted it from pathogen#infect() for that reason.\n. After each plugin installation. Ideally whatever you use to install Vim plugins would generate help tags automatically, but since git clone is the de facto install tool I provide :Helptags to ease that pain a bit.  I could see adding a FAQ entry for this.\n. If you upgrade a plugin you will need to rerun :Helptags to get full coverage for any doc changes.\n. You can give infect multiple arguments. Does that take care of everything?\n. The truncation is a function of :set output. See :echo &rtp.\n. Fixed, thanks.\n. Fixed, thanks. I used to point at the GitHub URL directly but I kept getting reports of failures I couldn't reproduce.\n. Thanks!\n. At this time I don't think the handful of use cases this would support justifies inventing a proprietary pathogen standard, no. If I ever did go down this road, I would just source a broad file glob (e.g., runtime! preload/*.vim), rather than dictate some weird autoload function convention. All your 6 line solution adds is more boilerplate and longer, more opaque error messages.\n. Yeah it absolutely has nothing to do with pathogen.\n. That file is already loaded by the system vimrc. You don't need it in your personal vimrc at all.\n. Needs to be wrapped to 80 chars\n. Yes that is the reason.. Dupe of #136\n. Check your 'runtimepath' on each version and see if anything changed. You can get it into a buffer with :call setline(1, pathogen#split(&rtp))\n. Nevermind, I see what it is.\n. Presumably it was down but it's up now.\n. Check :set runtimepath?\n. Get rid of all that crap you copied from your system vimrc.\n. Yeah, it's in one of the plugins that Pathogen is loading.\n. I might add reloading some day, but it would take a lot more work than just ripping the corresponding development tools out of scriptease. If you want to leverage that functionality in the meantime, I recommend copy and paste.\n. - I don't use the triple backslash notation because it's nonstandard and looks weird if you're reading the README directly. I might cave on real code examples for the syntax highlighting, but I see extremely limited value in highlighting a curl command, for example.\n- I favor \"vimrc\" over .vimrc because on Windows the file is often named _vimrc. My terminology is closer to that used within Vim's own help.\n- Most of the other changes (in particular the comma fiddling) seem pretty arbitrary. Any you care to defend?\n. /usr/share/vim/vimfiles will work for most setups.\n. How are you getting a capitalized command completed from a lowercase input?\n. I brought them back because I was trying to be diligent about semver and save the removal for 3.0. But it's a dumb user facing feature with a clear migration path so fine, y'all win.. It's actually been on my todo list to replace all my URLs with a hosting agnostic redirect. Something like\ngit clone https://tpope.io/vim/sensible.git\n. Thanks, fixed.. Was doing some server maintenance. Should be back up.. I don't know where you got ~/.config/vim from. If you're running Neovim, it should be ~/.config/nvim.. You're cloning a directory to a filename.. In Neovim you need to install in ~/.config/nvim instead (or add ~/.vim to your runtime path).. Yep!. Sessions load after plugins are already active, so changing 'runtimepath' in one will have no effect on what plugins are loaded.. Wrong repo.. ",
    "evaryont": "True, but you do make a comment in the README about storing pathogen in ~/.vim/bundle/, which along with calling pathogen#helptags(), would help, yes? Either way, the README is great.\nPS: The .cvsignore trick? Brilliant.\n. True, but you do make a comment in the README about storing pathogen in ~/.vim/bundle/, which along with calling pathogen#helptags(), would help, yes? Either way, the README is great.\nPS: The .cvsignore trick? Brilliant.\n. ",
    "evtuhovich": "Thanx a lot, it works\n. Thanx a lot, it works\n. ",
    "LBdN": "mmm... this could explain why pyflakes doesn't work with pathogen\n. mmm... this could explain why pyflakes doesn't work with pathogen\n. ",
    "sunaku": "Yes.  I'm now using this snippet to activate bundles instead of pathogen:\n\" register bundles found in the runtimepath\nlet s:bundles = tr(globpath(&runtimepath, 'bundle/*/'), \"\\n\", ',')\nlet s:afters = tr(globpath(s:bundles, 'after/'), \"\\n\", ',')\nlet &runtimepath = join([s:bundles, &runtimepath, s:afters], ',')\nSee http://snk.tuxfamily.org/log/vim-script-management-system.html for details.\n. Hint: run vim -u NONE -c 'set runtimepath?'\n. Pathogen only generates helptags if they do not already exist.  There is some overhead for scanning directories in your runtimepath, but I would say it is negligible.  Run a benchmark to see for yourself:\nrm -f /tmp/vim.log\nvim --startuptime /tmp/vim.log -c quit\nless /tmp/vim.log\n. Yes.  I'm now using this snippet to activate bundles instead of pathogen:\n\" register bundles found in the runtimepath\nlet s:bundles = tr(globpath(&runtimepath, 'bundle/*/'), \"\\n\", ',')\nlet s:afters = tr(globpath(s:bundles, 'after/'), \"\\n\", ',')\nlet &runtimepath = join([s:bundles, &runtimepath, s:afters], ',')\nSee http://snk.tuxfamily.org/log/vim-script-management-system.html for details.\n. Hint: run vim -u NONE -c 'set runtimepath?'\n. Pathogen only generates helptags if they do not already exist.  There is some overhead for scanning directories in your runtimepath, but I would say it is negligible.  Run a benchmark to see for yourself:\nrm -f /tmp/vim.log\nvim --startuptime /tmp/vim.log -c quit\nless /tmp/vim.log\n. ",
    "leoluz": "btw,\nthis is my &rtp on linux:\n/home/leoluz/.vim,/home/leoluz/.vim/bundle/autocomplpop,/home/leolu/.vim/bundle/command-t,/home/leoluz/.vim/bundle/markdown,\n/home/leoluz/.vim/bundle/nerdcommenter,/home/leoluz/.vim/bundle/nerdtree,/home/leoluz/.vim/bundle/rails,/home/leoluz/.vim/bun\ndle/repeat,/home/leoluz/.vim/bundle/snipmate,/home/leoluz/.vim/bundle/surround,/home/leoluz/.vim/bundle/xmledit,/var/lib/vim/\naddons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/leoluz/.vim\n/bundle/snipmate/after,/home/leoluz/.vim/after\nand this is my &rtp on Windows:\nC:\\Users\\leoluz/vimfiles,C:\\Users\\leoluz\\vimfiles\\bundle\\autocomplpop,C:\\Users\\leoluz\\vimfiles\\bundle\\command-t,C:\\Users\\leoluz\\vimf\niles\\bundle\\markdown,C:\\Users\\leoluz\\vimfiles\\bundle\\nerdcommenter,C:\\Users\\leoluz\\vimfiles\\bundle\\nerdtree,C:\\Users\\leoluz\\vimfiles\\b\nundle\\rails,C:\\Users\\leoluz\\vimfiles\\bundle\\repeat,C:\\Users\\leoluz\\vimfiles\\bundle\\snipmate,C:\\Users\\leoluz\\vimfiles\\bundle\\surround,C\n:\\Users\\leoluz\\vimfiles\\bundle\\xmledit,C:\\Program Files\\Vim/vimfiles,C:\\Program Files\\Vim\\vim72,C:\\Program Files\\Vim/vimfiles/after,C:\\Use\nrs\\leoluz/vimfiles/after\nOn windows systems the $VIM_HOME/bundle/snipmate/after is missing.\n. Ok.. I've realized what was the problem debuging the script. \nThe pathogen#runtime_append_all_bundles(...) function at line 119 was using the sep variable inside the substitute() function which was evaluating the \\ character wrongly. What I did was moving all the concatenating structure outside the substitute() function and voil\u00e1! Everything is working on both systems. \nAlready sent a pull request.\nregards,\nLeoLuz\n. btw,\nthis is my &rtp on linux:\n/home/leoluz/.vim,/home/leoluz/.vim/bundle/autocomplpop,/home/leolu/.vim/bundle/command-t,/home/leoluz/.vim/bundle/markdown,\n/home/leoluz/.vim/bundle/nerdcommenter,/home/leoluz/.vim/bundle/nerdtree,/home/leoluz/.vim/bundle/rails,/home/leoluz/.vim/bun\ndle/repeat,/home/leoluz/.vim/bundle/snipmate,/home/leoluz/.vim/bundle/surround,/home/leoluz/.vim/bundle/xmledit,/var/lib/vim/\naddons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/leoluz/.vim\n/bundle/snipmate/after,/home/leoluz/.vim/after\nand this is my &rtp on Windows:\nC:\\Users\\leoluz/vimfiles,C:\\Users\\leoluz\\vimfiles\\bundle\\autocomplpop,C:\\Users\\leoluz\\vimfiles\\bundle\\command-t,C:\\Users\\leoluz\\vimf\niles\\bundle\\markdown,C:\\Users\\leoluz\\vimfiles\\bundle\\nerdcommenter,C:\\Users\\leoluz\\vimfiles\\bundle\\nerdtree,C:\\Users\\leoluz\\vimfiles\\b\nundle\\rails,C:\\Users\\leoluz\\vimfiles\\bundle\\repeat,C:\\Users\\leoluz\\vimfiles\\bundle\\snipmate,C:\\Users\\leoluz\\vimfiles\\bundle\\surround,C\n:\\Users\\leoluz\\vimfiles\\bundle\\xmledit,C:\\Program Files\\Vim/vimfiles,C:\\Program Files\\Vim\\vim72,C:\\Program Files\\Vim/vimfiles/after,C:\\Use\nrs\\leoluz/vimfiles/after\nOn windows systems the $VIM_HOME/bundle/snipmate/after is missing.\n. Ok.. I've realized what was the problem debuging the script. \nThe pathogen#runtime_append_all_bundles(...) function at line 119 was using the sep variable inside the substitute() function which was evaluating the \\ character wrongly. What I did was moving all the concatenating structure outside the substitute() function and voil\u00e1! Everything is working on both systems. \nAlready sent a pull request.\nregards,\nLeoLuz\n. ",
    "bluekeys": "Strangely I am having the exact same issue, when I move snipmate's after folder to ~/vimfiles everything works as expected again.\n-- Edit --\nPlease excuse me, I had somehow got an outdated version. Maybe from vim.org? All is well now. \nI saw you thinking about writing a book on vim scripting in vimcast's comments. Here's my +1. Thanks for all the great scripts!\n. Strangely I am having the exact same issue, when I move snipmate's after folder to ~/vimfiles everything works as expected again.\n-- Edit --\nPlease excuse me, I had somehow got an outdated version. Maybe from vim.org? All is well now. \nI saw you thinking about writing a book on vim scripting in vimcast's comments. Here's my +1. Thanks for all the great scripts!\n. ",
    "Raimondi": "I haven't used it, but you can override the use of runtime by setting the variable g:vimball_home to the dir you want to use. Read  :help g:vimball_home  .\n. I haven't used it, but you can override the use of runtime by setting the variable g:vimball_home to the dir you want to use. Read  :help g:vimball_home  .\n. ",
    "raphael-proust": "A simple solution is to do\n:UseVimballpath\nIf the vba is in its bundle directory :UseVimball %:p:h works well.\n. A simple solution is to do\n:UseVimballpath\nIf the vba is in its bundle directory :UseVimball %:p:h works well.\n. ",
    "bryanthankins": "I want to say the windows installer from vim.org actually put vimfiles under $VIM, but I could be wrong. I can see why $HOME\\vimfiles would be more correct. Thanks.\n. I want to say the windows installer from vim.org actually put vimfiles under $VIM, but I could be wrong. I can see why $HOME\\vimfiles would be more correct. Thanks.\n. ",
    "shawjia": "@bryanthankins thanks for your modification, now it works well.\n@tpope the gVim put the vimfiles directory under $VIM by default.\n. @bryanthankins thanks for your modification, now it works well.\n@tpope the gVim put the vimfiles directory under $VIM by default.\n. ",
    "sejaeger": "Replacing line 126, i.e.\nif dir[0 : strlen($VIM)-1] !=# $VIM && isdirectory(dir.'/doc') && (!filereadable(dir.'/doc/tags') || filewritable(dir.'/doc/tags'))\nwith\nif dir[0 : strlen($VIM)-1] !=# $VIM && isdirectory(dir.'/doc') && !empty(glob(dir.'/doc/*')) && (!filereadable(dir.'/doc/tags') || filewritable(dir.'/doc/tags'))\nfixes this problem. In case you want to include this huge change: I sent you a pull request.\n. Replacing line 126, i.e.\nif dir[0 : strlen($VIM)-1] !=# $VIM && isdirectory(dir.'/doc') && (!filereadable(dir.'/doc/tags') || filewritable(dir.'/doc/tags'))\nwith\nif dir[0 : strlen($VIM)-1] !=# $VIM && isdirectory(dir.'/doc') && !empty(glob(dir.'/doc/*')) && (!filereadable(dir.'/doc/tags') || filewritable(dir.'/doc/tags'))\nfixes this problem. In case you want to include this huge change: I sent you a pull request.\n. ",
    "brianarn": "A question relating to that reply - would you have preferred a pull request? I would have happily done that as well.\nI don't expect to be able to offer improvements or fixes to your work all that much (because seriously, you're awesome), but I'd like to know the preferred approach if I am going to submit an issue with a fix. :)\n. A question relating to that reply - would you have preferred a pull request? I would have happily done that as well.\nI don't expect to be able to offer improvements or fixes to your work all that much (because seriously, you're awesome), but I'd like to know the preferred approach if I am going to submit an issue with a fix. :)\n. ",
    "char101": "No, I made it that way. Just like I said, I want to make my vim portable. \nAlso it's windows, $HOME in windows is a mess.\nHere is what I put in the top lines of my vimrc\nset runtimepath=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after\nlet $HOME=$VIM\nlet $PYTHONHOME=$VIM.'\\python'\nlua package.path = vim.eval('$VIM')..'\\lua'\nlua package.cpath = vim.eval('$VIM')..'\\lua\\clibs'\nSo I think it's pathogen that should not assume that vimfiles can not reside under $VIM.\n. (1)  filewritable({file})                   filewritable()\n        The result is a Number, which is 1 when a file with the\n        name {file} exists, and can be written.  If {file} doesn't\n        exist, or is not writable, the result is 0.  If {file} is a\n        directory, and we can write to it, the result is 2.\n\n    if filewritable(dir) == 2\n        \" dir is writable\n    endif\n\n(3) I don't think so, it's called portable application and is a modern trend in windows\n(4) Actually people using portable applications is pretty common nowadays so I won't call it weird. It might be weird to you if you are not used to using portable app, or don't use windows, but portable applications are quite popular, e.g. portable firefox, portable chrome, so why not portable vim?\n. No, I made it that way. Just like I said, I want to make my vim portable. \nAlso it's windows, $HOME in windows is a mess.\nHere is what I put in the top lines of my vimrc\nset runtimepath=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after\nlet $HOME=$VIM\nlet $PYTHONHOME=$VIM.'\\python'\nlua package.path = vim.eval('$VIM')..'\\lua'\nlua package.cpath = vim.eval('$VIM')..'\\lua\\clibs'\nSo I think it's pathogen that should not assume that vimfiles can not reside under $VIM.\n. (1)  filewritable({file})                   filewritable()\n        The result is a Number, which is 1 when a file with the\n        name {file} exists, and can be written.  If {file} doesn't\n        exist, or is not writable, the result is 0.  If {file} is a\n        directory, and we can write to it, the result is 2.\n\n    if filewritable(dir) == 2\n        \" dir is writable\n    endif\n\n(3) I don't think so, it's called portable application and is a modern trend in windows\n(4) Actually people using portable applications is pretty common nowadays so I won't call it weird. It might be weird to you if you are not used to using portable app, or don't use windows, but portable applications are quite popular, e.g. portable firefox, portable chrome, so why not portable vim?\n. ",
    "mattn": "Ah, I found g:pathogen_disabled\nSorry.\n. Another case to reproduce this problem, if c:/docume~1/tpope/path/to/script is included in &rtp, glob() return C:\\Documents and Settings\\tpope\\path\\to\\script for that.\n. Ah, it seems that the patch should add more code.\nPlease want to include.\n. It's working good for me on my windows. :)\n. About cause of removing a:count for findfile(): findfile() return List if third argument is -1.\nMy last change set -1 for a:count.\n. Thanks for your reply. Try following:\nvim\n:set rtp=c:/docume~1/tpope\n:echo &rtp\nc:/docume~1/tpope\nThen\n:echo expand('c:/docume~1/tpope')\nc:\\Documents and Settings\\tpope\nNote to use the path exisits.\nAbout separate pull request, ok I'll split this.\n. No, it can't.\n:echo simplify('C:/Documents and Settings/mattn') is C:/Documents and Settings/mattn\n:echo simplify('c:/docume~1/mattn') is c:/docume~1/mattn\nAnd resolve() is not for this. I know the API well. (because, I added resolve to vim)\n. ok. But give me 30 minutes for that. I must go to meeting just now.\n. I added #48 #49\n. I don't mind. I'm not native speaker. sorry & thanks. :)\n. I guess that some pathogen.vim is exists in your rtp. try to check :scriptnames results.\n. me is real user name? or ec2-user  ?\n. Try following .vimrc \n```\nset nocp\n\" set rtp+=/path/to/rtp/that/included/pathogen/vim \" if needed\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\n``\n. Ah, I found g:pathogen_disabled\nSorry.\n. Another case to reproduce this problem, ifc:/docume~1/tpope/path/to/scriptis included in&rtp, glob() returnC:\\Documents and Settings\\tpope\\path\\to\\scriptfor that.\n. Ah, it seems that the patch should add more code.\nPlease want to include.\n. It's working good for me on my windows. :)\n. About cause of removinga:countforfindfile():findfile()return List if third argument is -1.\nMy last change set -1 fora:count`.\n. Thanks for your reply. Try following:\nvim\n:set rtp=c:/docume~1/tpope\n:echo &rtp\nc:/docume~1/tpope\nThen\n:echo expand('c:/docume~1/tpope')\nc:\\Documents and Settings\\tpope\nNote to use the path exisits.\nAbout separate pull request, ok I'll split this.\n. No, it can't.\n:echo simplify('C:/Documents and Settings/mattn') is C:/Documents and Settings/mattn\n:echo simplify('c:/docume~1/mattn') is c:/docume~1/mattn\nAnd resolve() is not for this. I know the API well. (because, I added resolve to vim)\n. ok. But give me 30 minutes for that. I must go to meeting just now.\n. I added #48 #49\n. I don't mind. I'm not native speaker. sorry & thanks. :)\n. I guess that some pathogen.vim is exists in your rtp. try to check :scriptnames results.\n. me is real user name? or ec2-user  ?\n. Try following .vimrc \n```\nset nocp\n\" set rtp+=/path/to/rtp/that/included/pathogen/vim \" if needed\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\n```\n. ",
    "dusans": "I think u should put this info into README. Took me days to find out why plugins would not load up.\n. I think u should put this info into README. Took me days to find out why plugins would not load up.\n. ",
    "fuzenco": "Hey Tim, thanks for confirming this. I'm a Rails/Command line newbie. I've got my environment set up with RVM so I'm plugging along well but could you tell me how to get around this issue then?\nI'm using the instructions at http://news.ycombinator.com/item?id=1590713 which encourages \"I'd advise putting your vim directory (or ALL of your dotfiles) under version control\u2026Install each plugin in its own self-contained directory under ~/.vim/bundle/plugin-name/\". But I'm getting this error which could be a combination of things:\nERROR: certificate common name \u201c*.github.com\u201d doesn\u2019t match requested host name \u201cgithub.com\u201d. To connect to github.com insecurely, use \u2018--no-check-certificate\u2019.\nSo I attempt to use:\nwget --no-check-certificate -O autoload/pathogen.vim https://github.com/tpope/vim-pathogen.git\nBut that gives me:\nERROR 404: Not Found.\nIs there another URL I can use?\n. OK. Thanks for your help Tim. I got it figured out.\n. Hey Tim, thanks for confirming this. I'm a Rails/Command line newbie. I've got my environment set up with RVM so I'm plugging along well but could you tell me how to get around this issue then?\nI'm using the instructions at http://news.ycombinator.com/item?id=1590713 which encourages \"I'd advise putting your vim directory (or ALL of your dotfiles) under version control\u2026Install each plugin in its own self-contained directory under ~/.vim/bundle/plugin-name/\". But I'm getting this error which could be a combination of things:\nERROR: certificate common name \u201c*.github.com\u201d doesn\u2019t match requested host name \u201cgithub.com\u201d. To connect to github.com insecurely, use \u2018--no-check-certificate\u2019.\nSo I attempt to use:\nwget --no-check-certificate -O autoload/pathogen.vim https://github.com/tpope/vim-pathogen.git\nBut that gives me:\nERROR 404: Not Found.\nIs there another URL I can use?\n. OK. Thanks for your help Tim. I got it figured out.\n. ",
    "bs": "Ah, that worked perfectly.\n. Ah, that worked perfectly.\n. ",
    "teranex": "I tried the variant and it works when starting pathogen with:\ncall pathogen#runtime_prepend_subdirectories('~/.vim/bundle/')\nbut it doesn't seem to work when starting it with:\ncall pathogen#runtime_append_all_bundles()\nso I added the same code to that method and now everything seems to work.\n. I tried the variant and it works when starting pathogen with:\ncall pathogen#runtime_prepend_subdirectories('~/.vim/bundle/')\nbut it doesn't seem to work when starting it with:\ncall pathogen#runtime_append_all_bundles()\nso I added the same code to that method and now everything seems to work.\n. ",
    "darylsew": "I don't see this note on http://www.vim.org/scripts/script.php?script_id=2332 - I spent quite some time confused before I found this :(\n. I don't see this note on http://www.vim.org/scripts/script.php?script_id=2332 - I spent quite some time confused before I found this :(\n. ",
    "solohan": "A workaround is to replace the two $VIM occurrences by $VIMRUNTIME in pathogen#helptags. Works for me.\n. A workaround is to replace the two $VIM occurrences by $VIMRUNTIME in pathogen#helptags. Works for me.\n. ",
    "abudden": "Great: I'm really pleased to see this is going to be resolved.  As I said in my original report: \"This has the significant advantage for me that I can either have it on a network drive or a USB stick and it'll work on any machine.\"\n. Great: I'm really pleased to see this is going to be resolved.  As I said in my original report: \"This has the significant advantage for me that I can either have it on a network drive or a USB stick and it'll work on any machine.\"\n. ",
    "kurkale6ka": "Hmm,\nI see. Following your suggestion I've changed the calls in my vimrc to:\n\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/plugins')\ncall pathogen#runtime_append_all_bundles()\n\nIt's seems to be faster. Thing is now I wanna use 3 calls but it doesn't work. How would I best achieve this?\nI've tried:\n\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/plugins')\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/bla')\ncall pathogen#runtime_append_all_bundles()\n\nTa\n. Hi,\nIn fact it has never been really slow & my latest statement is wrong (my testing must have been wrong) as I just thoroughly tested again and it all works perfectly well. Sorry, false alarm... and thanks.\nCheers\n. I tried this call pathogen#infect('~/vim/bundle/{}', '~/vim/bundle/.{}') without success. It warned me that I should use call pathogen#infect('~/vim/bundle/{}', '~/vim/bundle/.{}/{}') but that didn't work either.\n. Hmm,\nI see. Following your suggestion I've changed the calls in my vimrc to:\n\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/plugins')\ncall pathogen#runtime_append_all_bundles()\n\nIt's seems to be faster. Thing is now I wanna use 3 calls but it doesn't work. How would I best achieve this?\nI've tried:\n\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/plugins')\ncall pathogen#runtime_prepend_subdirectories($HOME.'/vimfiles/bla')\ncall pathogen#runtime_append_all_bundles()\n\nTa\n. Hi,\nIn fact it has never been really slow & my latest statement is wrong (my testing must have been wrong) as I just thoroughly tested again and it all works perfectly well. Sorry, false alarm... and thanks.\nCheers\n. I tried this call pathogen#infect('~/vim/bundle/{}', '~/vim/bundle/.{}') without success. It warned me that I should use call pathogen#infect('~/vim/bundle/{}', '~/vim/bundle/.{}/{}') but that didn't work either.\n. ",
    "jdevera": "@shalomb, I raised the self-modification issue in the scraper repository. The suggestion was to fork the repo and check the files in after the expansion. I never got around to doing this because I stopped using submodules and it was no longer an issue for me. However some of my workarounds might help you.\nI tried to contact the developers but their email addresses were no longer valid. I sent them a vimball, that they could put up in vim.org so that it would be correctly processed by the scrapper. If you want, you can give a try to that, You'd need to do this:\n1. Download this gist to your ~/.vim/bundle directory: https://gist.github.com/1124733\n2. Get the unball script: https://gist.github.com/1099639\n3. from your bundle directory run python unball.py showmarks.vba (this should create a directory called showmarks)\n4. Here you can remove both unball.py and showmarks.vba\nAt least this way we could rule out the peculiar installation mechanism of this script as the cause of your problem.\n. Actually, @harleypig forked the repository and fixed the layout, so I guess the simple test is to try his fork instead.\n. @shalomb, I raised the self-modification issue in the scraper repository. The suggestion was to fork the repo and check the files in after the expansion. I never got around to doing this because I stopped using submodules and it was no longer an issue for me. However some of my workarounds might help you.\nI tried to contact the developers but their email addresses were no longer valid. I sent them a vimball, that they could put up in vim.org so that it would be correctly processed by the scrapper. If you want, you can give a try to that, You'd need to do this:\n1. Download this gist to your ~/.vim/bundle directory: https://gist.github.com/1124733\n2. Get the unball script: https://gist.github.com/1099639\n3. from your bundle directory run python unball.py showmarks.vba (this should create a directory called showmarks)\n4. Here you can remove both unball.py and showmarks.vba\nAt least this way we could rule out the peculiar installation mechanism of this script as the cause of your problem.\n. Actually, @harleypig forked the repository and fixed the layout, so I guess the simple test is to try his fork instead.\n. ",
    "harleypig": "I don't know that what I did would fix this problem ... I haven't experienced a high cpu load with vim in any way.  All I did was separate the documentation from the code so the module would work with pathogen.  But I'd be curious to know if it did help.\n. I don't know that what I did would fix this problem ... I haven't experienced a high cpu load with vim in any way.  All I did was separate the documentation from the code so the module would work with pathogen.  But I'd be curious to know if it did help.\n. ",
    "sentientmonkey": "Ah, I see. I should have read through the code first, sorry!\nThe issue here is that my filetype is actually set to \"eruby.html\". Not sure where I picked that up from, but I've fixed it in my ftdetect, and all seems happy now.\nThanks for all your hard work (on all the various vim plugins that you've written)!\n. Yup. That was it. I'm using snipmate and wanted the html snippets as well as the erb ones.\nHere are the \"stock\" snippets...\nhttps://github.com/msanders/snipmate.vim/tree/master/snippets\nI think what I'm going to do is just create an eruby snippet file and just copy the html ones in. I guess ideally, I'd be able to \"include\" them in some way, but not a big deal.\n. Ah, I see. I should have read through the code first, sorry!\nThe issue here is that my filetype is actually set to \"eruby.html\". Not sure where I picked that up from, but I've fixed it in my ftdetect, and all seems happy now.\nThanks for all your hard work (on all the various vim plugins that you've written)!\n. Yup. That was it. I'm using snipmate and wanted the html snippets as well as the erb ones.\nHere are the \"stock\" snippets...\nhttps://github.com/msanders/snipmate.vim/tree/master/snippets\nI think what I'm going to do is just create an eruby snippet file and just copy the html ones in. I guess ideally, I'd be able to \"include\" them in some way, but not a big deal.\n. ",
    "blueyed": "JFI: There is something called scope aliases, at least in the recommended fork from MarcWeber:\nhttps://github.com/MarcWeber/snipmate.vim/blob/master/autoload/snipMate.vim\n. JFI: There is something called scope aliases, at least in the recommended fork from MarcWeber:\nhttps://github.com/MarcWeber/snipmate.vim/blob/master/autoload/snipMate.vim\n. ",
    "SethMilliken": "l:s are a bad habit from when I first starting writing vimscript. Gone.\n|s are gone. I had just been trying to keep it compact.\nI'll definitely defer to you on the pathogen#helptags(), and I do think :Helptags will indeed mitigate the out-of-date helptags issues. Nevertheless, I can't resist making an effort at advocacy: the folks most likely to be bothered by regenerating helptags on every startup are savvy enough to use the original porcelain functions instead; the folks that would most benefit from the automatic generation are the more novice users who will likely not even notice. pathogen.vim has become a gateway to other plugins, and excellent, immediately accessible help is arguably one of the greatest features of vim. :-)\nCommit squashed; message fixed. And learned a new git command in the process. Thanks!\n. Oh, I forgot to mention: I had tried the :filetype parsing initially, too. After staring at it for a few minutes, I thought, \"This is way too ugly. No way he'd accept it like this.\" :-)\nlet output = '' | redir! => output | silent filetype | redir END | let result = match(l:output, 'detection:ON') > -1\nThat lead to my digging into the help for filetype, and voila.\n. l:s are a bad habit from when I first starting writing vimscript. Gone.\n|s are gone. I had just been trying to keep it compact.\nI'll definitely defer to you on the pathogen#helptags(), and I do think :Helptags will indeed mitigate the out-of-date helptags issues. Nevertheless, I can't resist making an effort at advocacy: the folks most likely to be bothered by regenerating helptags on every startup are savvy enough to use the original porcelain functions instead; the folks that would most benefit from the automatic generation are the more novice users who will likely not even notice. pathogen.vim has become a gateway to other plugins, and excellent, immediately accessible help is arguably one of the greatest features of vim. :-)\nCommit squashed; message fixed. And learned a new git command in the process. Thanks!\n. Oh, I forgot to mention: I had tried the :filetype parsing initially, too. After staring at it for a few minutes, I thought, \"This is way too ugly. No way he'd accept it like this.\" :-)\nlet output = '' | redir! => output | silent filetype | redir END | let result = match(l:output, 'detection:ON') > -1\nThat lead to my digging into the help for filetype, and voila.\n. ",
    "narfdotpl": "mkdir bundle\ngit submodule add https://github.com/tpope/vim-pathogen.git bundle/pathogen\nln -s bundle/pathogen/autoload .\n. @carlotrimarchi\n~/.vim/bundle/YOUR_PLUGIN/plugin/SOME_FILE.vim\n~/.vim/bundle/YOUR_PLUGIN/syntax/SOME_FILE.vim\n~/.vim/bundle/YOUR_PLUGIN/colors/SOME_FILE.vim\netc.\n. @carlotrimarchi No problem. I guess you should close the issue. :)\n. mkdir bundle\ngit submodule add https://github.com/tpope/vim-pathogen.git bundle/pathogen\nln -s bundle/pathogen/autoload .\n. @carlotrimarchi\n~/.vim/bundle/YOUR_PLUGIN/plugin/SOME_FILE.vim\n~/.vim/bundle/YOUR_PLUGIN/syntax/SOME_FILE.vim\n~/.vim/bundle/YOUR_PLUGIN/colors/SOME_FILE.vim\netc.\n. @carlotrimarchi No problem. I guess you should close the issue. :)\n. ",
    "jinleileiking": "Oh, thanks :)\n. I know. when not using this plugin: pathogen, it worked, but command-t cannot work with pathogen\n. Oh, thanks :)\n. I know. when not using this plugin: pathogen, it worked, but command-t cannot work with pathogen\n. ",
    "lamnk": "Read this thread: https://wincent.com/forums/command-t/topics/425\nTL;DR you must compile Command-T against ruby version that your vim compiled against (probably 1.8.7). This is warned already in Command-T installation guide. If you use rvm you can switch temporarily to 1.8.7 then recompile Command-T against 1.8.7. After compiling you can switch back to your favorite ruby runtime.\n. Read this thread: https://wincent.com/forums/command-t/topics/425\nTL;DR you must compile Command-T against ruby version that your vim compiled against (probably 1.8.7). This is warned already in Command-T installation guide. If you use rvm you can switch temporarily to 1.8.7 then recompile Command-T against 1.8.7. After compiling you can switch back to your favorite ruby runtime.\n. ",
    "thomasjo": "Shouldn't this issue be closed? It's stale (and not really an issue as Command-T works perfectly fine with Pathogen.)\n. Shouldn't this issue be closed? It's stale (and not really an issue as Command-T works perfectly fine with Pathogen.)\n. ",
    "crodjer": "You can call pathogen#infact for making ftdetect to work: https://github.com/crodjer/vimfiles/commit/6868dcd6c3bf96cffe1d7b97059e621807cb8d36\n. You can call pathogen#infact for making ftdetect to work: https://github.com/crodjer/vimfiles/commit/6868dcd6c3bf96cffe1d7b97059e621807cb8d36\n. ",
    "dlee": "Yeah, I saw the suggestion of globally ignoring tags, but that's not going to work for me, since I want to commit files named tags in certain other repositories. Instead, I wrote a shell script:\nsh\nmkdir tmp\ncp vim/doc/* vim/bundle/*/doc/* tmp/\nvim -c \"helptags tmp\" -c \"q\"\nmv tmp/tags vim/doc/\nrm -rf tmp\nI don't know if you want to incorporate this logic into pathogen, but it's working great for me.\n. Yeah, I saw the suggestion of globally ignoring tags, but that's not going to work for me, since I want to commit files named tags in certain other repositories. Instead, I wrote a shell script:\nsh\nmkdir tmp\ncp vim/doc/* vim/bundle/*/doc/* tmp/\nvim -c \"helptags tmp\" -c \"q\"\nmv tmp/tags vim/doc/\nrm -rf tmp\nI don't know if you want to incorporate this logic into pathogen, but it's working great for me.\n. ",
    "JNRowe": "Another option is to only list submodules that contain new commits in git status output.  You can do this by modifying the listing in .git/config either by hand or with git config, for example:\n[submodule \"external/supertab\"]\n    url = git://github.com/ervandew/supertab.git\n    ignore = dirty\nSee the submodule.<name>.ignore section in git-config(1).\n. Another option is to only list submodules that contain new commits in git status output.  You can do this by modifying the listing in .git/config either by hand or with git config, for example:\n[submodule \"external/supertab\"]\n    url = git://github.com/ervandew/supertab.git\n    ignore = dirty\nSee the submodule.<name>.ignore section in git-config(1).\n. ",
    "kien": "Yep, this can definitely be done with Vimscript. I know because I wrote a function to do a very similar thing, but instead of moving the doc files it just combines the individual tags files into a big one in vim/doc/.\nA small tip: after generating the tags file in your tmp/, you might need to substitute the paths to the .txt files or :h and K won't be able to find the files. Not sure about you but that was what I had to do.\ne.g. from this:\n'NERDSpaceDelims'   NERD_commenter.txt  /*'NERDSpaceDelims'*\nto this:\n'NERDSpaceDelims'   /path/to/nerdcommenter/doc/NERD_commenter.txt   /*'NERDSpaceDelims'*\n. Yep, this can definitely be done with Vimscript. I know because I wrote a function to do a very similar thing, but instead of moving the doc files it just combines the individual tags files into a big one in vim/doc/.\nA small tip: after generating the tags file in your tmp/, you might need to substitute the paths to the .txt files or :h and K won't be able to find the files. Not sure about you but that was what I had to do.\ne.g. from this:\n'NERDSpaceDelims'   NERD_commenter.txt  /*'NERDSpaceDelims'*\nto this:\n'NERDSpaceDelims'   /path/to/nerdcommenter/doc/NERD_commenter.txt   /*'NERDSpaceDelims'*\n. ",
    "weynhamz": "Or otherway, you can just ignore those files, see http://stackoverflow.com/questions/4343544/generating-tags-to-different-location-by-pathogen and http://stackoverflow.com/questions/5127178/gitignore-files-added-inside-git-submodules\n. Or otherway, you can just ignore those files, see http://stackoverflow.com/questions/4343544/generating-tags-to-different-location-by-pathogen and http://stackoverflow.com/questions/5127178/gitignore-files-added-inside-git-submodules\n. ",
    "lparry": "I hope this matches up with what you were wanting, Thanks!\n. I hope this matches up with what you were wanting, Thanks!\n. ",
    "carlotrimarchi": "The same goes for colorschemes. I tried to put a \"colors\" directory inside \"bundle\" but it doesn't see the colorschemes in it.\n. @narfdotpl\nok, I get it now. It's just that I'm not talking about colors or syntax for a specific plugin, so I have to create a directory such as:\n~/.vim/bundle/my_colorschemes/\nand then:\n~/.vim/bundle/my_colorschemes/colors\nthanks\n. The same goes for colorschemes. I tried to put a \"colors\" directory inside \"bundle\" but it doesn't see the colorschemes in it.\n. @narfdotpl\nok, I get it now. It's just that I'm not talking about colors or syntax for a specific plugin, so I have to create a directory such as:\n~/.vim/bundle/my_colorschemes/\nand then:\n~/.vim/bundle/my_colorschemes/colors\nthanks\n. ",
    "bwickelias": "That did it -- Thanks \nB || E\n. That did it -- Thanks \nB || E\n. ",
    "Valloric": "Sorry for the noise then.\n. Sorry for the noise then.\n. ",
    "sofaking": "Surely, absence of helptags was the reason for my acquaintance with vim-script. Strange but seems like no one uses vim-rails under Win.\n. Aha I don't.\nNot quite silent. I got E149: Sorry, no help for rails after entered :help rails\n. Now I know why your plugins are so popular. Because of serious approach ;)\nI don't have Cygwin. Just clean gvim setup. On Cygwin, I suppose, shellslashes is *nix-like, so there are no problems.\nFor me it's more than obvious that standard slashes can't be used on Win platform.\n. Maybe we should check does filewritable() work with slashes under Win. I can't do it myself, I dunno how ;) I tried :call filewritable($HOME) from gvim, but it returned nothing.\nAslo, maybe this will help: http://vim.1045645.n5.nabble.com/Windows-path-and-quot-quot-HOME-td1151589.html\nThe guy said:\n\nThis depends on context. When Vim knows that some \nvalue is a file/folder name, it will usually interpret any of '/', '\\' \nor '\\' as a path separator, to be passed to the OS as a single \nbackslash, except where a backslash is obviously meant as an escape \nprefix.\n. Surely, absence of helptags was the reason for my acquaintance with vim-script. Strange but seems like no one uses vim-rails under Win.\n. Aha I don't.\nNot quite silent. I got E149: Sorry, no help for rails after entered :help rails\n. Now I know why your plugins are so popular. Because of serious approach ;)\nI don't have Cygwin. Just clean gvim setup. On Cygwin, I suppose, shellslashes is *nix-like, so there are no problems.\nFor me it's more than obvious that standard slashes can't be used on Win platform.\n. Maybe we should check does filewritable() work with slashes under Win. I can't do it myself, I dunno how ;) I tried :call filewritable($HOME) from gvim, but it returned nothing.\n\nAslo, maybe this will help: http://vim.1045645.n5.nabble.com/Windows-path-and-quot-quot-HOME-td1151589.html\nThe guy said:\n\nThis depends on context. When Vim knows that some \nvalue is a file/folder name, it will usually interpret any of '/', '\\' \nor '\\' as a path separator, to be passed to the OS as a single \nbackslash, except where a backslash is obviously meant as an escape \nprefix.\n. \n",
    "betelgeuse": "with pathogen:\nfiletype=conf\n        Last set from /usr/share/vim/vim73/filetype.vim\nwithout pathogen:\nfiletype=gitcommit\n        Last set from /usr/share/vim/vim73/filetype.vim\n. The file gets detected as conf\n. Yeah it's Gentoo provided. The relevant snipped from the original comment:\nModified by Gentoo-7.3.266\n. And I did have pathogen as the first thing in my vimrc\n. I found this in /etc/vim/vimrc\n```\n\" {{{ Filetype plugin settings\n\" Enable plugin-provided filetype settings, but only if the ftplugin\n\" directory exists (which it won't on livecds, for example).\nif isdirectory(expand(\"$VIMRUNTIME/ftplugin\"))\n  filetype plugin on\n\" Uncomment the next line (or copy to your ~/.vimrc) for plugin-provided\n  \" indent settings. Some people don't like these, so we won't turn them on by\n  \" default.\n  \" filetype indent on\nendif\n\" }}}\n```\nDon't know what the best course of action here but maybe we can at least add something to the documentation. I will try asking Gentoo vim maintainers for their input.\n.  The patch by @llorens was accepted upstream and it seems to fix this so I think we can close here as pathogen does not need modifications.\n. with pathogen:\nfiletype=conf\n        Last set from /usr/share/vim/vim73/filetype.vim\nwithout pathogen:\nfiletype=gitcommit\n        Last set from /usr/share/vim/vim73/filetype.vim\n. The file gets detected as conf\n. Yeah it's Gentoo provided. The relevant snipped from the original comment:\nModified by Gentoo-7.3.266\n. And I did have pathogen as the first thing in my vimrc\n. I found this in /etc/vim/vimrc\n```\n\" {{{ Filetype plugin settings\n\" Enable plugin-provided filetype settings, but only if the ftplugin\n\" directory exists (which it won't on livecds, for example).\nif isdirectory(expand(\"$VIMRUNTIME/ftplugin\"))\n  filetype plugin on\n\" Uncomment the next line (or copy to your ~/.vimrc) for plugin-provided\n  \" indent settings. Some people don't like these, so we won't turn them on by\n  \" default.\n  \" filetype indent on\nendif\n\" }}}\n```\nDon't know what the best course of action here but maybe we can at least add something to the documentation. I will try asking Gentoo vim maintainers for their input.\n.  The patch by @llorens was accepted upstream and it seems to fix this so I think we can close here as pathogen does not need modifications.\n. ",
    "novas0x2a": "I'm also a gentoo user with the same problem; if I comment out both syntax on and filetype on in /etc/vim/vimrc the problem goes away; syntax on (syntax.vim) keeps its own script-local state about whether filetype detection was run, it looks like. If I invoke :doautoall filetypedetect BufRead after everything loads, the filetype ends up (correctly) as python instead of conf. (For some reason, filetype off | filetype on | doautoall... does not fix it, but there's probably something in my config causing that)\n(relevant snip of syntax.vim)\n```\n\" Load the Syntax autocommands and set the default methods for highlighting.\nruntime syntax/synload.vim\n\" Load the FileType autocommands if not done yet.\nif exists(\"did_load_filetypes\")\n  let s:did_ft = 1\nelse\n  filetype on\n  let s:did_ft = 0\nendif\n\" Set up the connection between FileType and Syntax autocommands.\n\" This makes the syntax automatically set when the file type is detected.\naugroup syntaxset\n  au! FileType *    exe \"set syntax=\" . expand(\"\")\naugroup END\n\" Execute the syntax autocommands for the each buffer.\n\" If the filetype wasn't detected yet, do that now.\n\" Always do the syntaxset autocommands, for buffers where the 'filetype'\n\" already was set manually (e.g., help buffers).\ndoautoall syntaxset FileType\nif !s:did_ft\n  doautoall filetypedetect BufRead\nendif\n``\n. Unfortunately, no, once syntax on has been invoked once, invoking it again doesn't fix it (since it doesn't calldoautoall filetypedetect BufReadagain). Forcing another call with:doautoall...` after vim finishes loading a file fixes it, also probably putting in a last-ditch au to invoke it again would probably work.\nHonestly, this seems a bit like a vim bug; why does it use s:did_ft rather than just using did_load_filetypes directly? Using a script-local variable to control it makes it impossible to undo. syntax on performs operations that syntax off (i.e. nosyntax.vim) does not undo.\nI'm also available on freenode/#vim right now if you want to guinea-pig on me live.\n. I'm also a gentoo user with the same problem; if I comment out both syntax on and filetype on in /etc/vim/vimrc the problem goes away; syntax on (syntax.vim) keeps its own script-local state about whether filetype detection was run, it looks like. If I invoke :doautoall filetypedetect BufRead after everything loads, the filetype ends up (correctly) as python instead of conf. (For some reason, filetype off | filetype on | doautoall... does not fix it, but there's probably something in my config causing that)\n(relevant snip of syntax.vim)\n```\n\" Load the Syntax autocommands and set the default methods for highlighting.\nruntime syntax/synload.vim\n\" Load the FileType autocommands if not done yet.\nif exists(\"did_load_filetypes\")\n  let s:did_ft = 1\nelse\n  filetype on\n  let s:did_ft = 0\nendif\n\" Set up the connection between FileType and Syntax autocommands.\n\" This makes the syntax automatically set when the file type is detected.\naugroup syntaxset\n  au! FileType *    exe \"set syntax=\" . expand(\"\")\naugroup END\n\" Execute the syntax autocommands for the each buffer.\n\" If the filetype wasn't detected yet, do that now.\n\" Always do the syntaxset autocommands, for buffers where the 'filetype'\n\" already was set manually (e.g., help buffers).\ndoautoall syntaxset FileType\nif !s:did_ft\n  doautoall filetypedetect BufRead\nendif\n``\n. Unfortunately, no, once syntax on has been invoked once, invoking it again doesn't fix it (since it doesn't calldoautoall filetypedetect BufReadagain). Forcing another call with:doautoall...` after vim finishes loading a file fixes it, also probably putting in a last-ditch au to invoke it again would probably work.\nHonestly, this seems a bit like a vim bug; why does it use s:did_ft rather than just using did_load_filetypes directly? Using a script-local variable to control it makes it impossible to undo. syntax on performs operations that syntax off (i.e. nosyntax.vim) does not undo.\nI'm also available on freenode/#vim right now if you want to guinea-pig on me live.\n. ",
    "idbrii": "\nDebian does something similar (:filetype on) and I've never had an issue with that. \n\nDoes your /usr/share/vim/vimrc have syntax on? Mine does (on Ubuntu 11.04) and that's where the problem is. Of course a local build of vim first loads my vimrc and it has no such problems.\nI'm only missing filetype detection now because I just upgraded to pathogen 2.0.  If I revert my .vimrc to use runtime_append_all_bundles() instead of infect(), then there's no problem. I'm not trying to use multiple bundle locations and I load pathogen at the top of my vimrc, so I don't see any benefit to infect.\nIs there any other reason to use infect? Is it necessary to toggle filetype to use multiple bundle locations?\n. Hm. I didn't think to prefix it with after. I'll have to try that for a bit and see if I still have the same frustration.\n. Hm. Looking into this more I found that if I use :set shellslash, I have completion again. (And vim now uses forward slashes to delimit paths).\nSo it's not a bother for me, but it still differs from vim's behavior. (Vim converts the slash for you.)\n. Yes. If I used a backslash, then it worked as expected.\n. I use shellslash now, but I turned it off and tried out your patch and it's great! Converts / to \\ just like vim.\nThanks a lot!\n. > Debian does something similar (:filetype on) and I've never had an issue with that. \nDoes your /usr/share/vim/vimrc have syntax on? Mine does (on Ubuntu 11.04) and that's where the problem is. Of course a local build of vim first loads my vimrc and it has no such problems.\nI'm only missing filetype detection now because I just upgraded to pathogen 2.0.  If I revert my .vimrc to use runtime_append_all_bundles() instead of infect(), then there's no problem. I'm not trying to use multiple bundle locations and I load pathogen at the top of my vimrc, so I don't see any benefit to infect.\nIs there any other reason to use infect? Is it necessary to toggle filetype to use multiple bundle locations?\n. Hm. I didn't think to prefix it with after. I'll have to try that for a bit and see if I still have the same frustration.\n. Hm. Looking into this more I found that if I use :set shellslash, I have completion again. (And vim now uses forward slashes to delimit paths).\nSo it's not a bother for me, but it still differs from vim's behavior. (Vim converts the slash for you.)\n. Yes. If I used a backslash, then it worked as expected.\n. I use shellslash now, but I turned it off and tried out your patch and it's great! Converts / to \\ just like vim.\nThanks a lot!\n. ",
    "denilsonsa": "I'm also on Gentoo, I can confirm that Python filetype detection is broken too.\nAnd I can confirm that using runtime_append_all_bundles() instead of infect() is a workaround that solves this issue for me.\nIf you need, this is the Gentoo's /etc/vim/vimrc:\nhttp://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/app-editors/vim-core/files/vimrc-r4?view=markup\n. I'm also on Gentoo, I can confirm that Python filetype detection is broken too.\nAnd I can confirm that using runtime_append_all_bundles() instead of infect() is a workaround that solves this issue for me.\nIf you need, this is the Gentoo's /etc/vim/vimrc:\nhttp://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/app-editors/vim-core/files/vimrc-r4?view=markup\n. ",
    "mlmoses": "I don't know if this is helpful or not, but I was not experiencing this issue until I installed the following script (proto.vim):\nvim\naugroup filetype\n    au! BufRead,BufNewFile *.proto setfiletype proto\naugroup end\nSo, performing either of the following actions clears the issue for me:\n- Delete the aforementioned proto.vim script.\n- Remove call pathogen#infect() from my ~/.vimrc.\nI'm using Funtoo, a Gentoo derivative.\n. I don't know if this is helpful or not, but I was not experiencing this issue until I installed the following script (proto.vim):\nvim\naugroup filetype\n    au! BufRead,BufNewFile *.proto setfiletype proto\naugroup end\nSo, performing either of the following actions clears the issue for me:\n- Delete the aforementioned proto.vim script.\n- Remove call pathogen#infect() from my ~/.vimrc.\nI'm using Funtoo, a Gentoo derivative.\n. ",
    "und3f": "Good day.\nI have same issue on a gentoo (vim 7.3.409). I've tried to find what makes most of files to detect as a conf and minimized my .vimrc just to two lines:\nruntime bundle/vim-pathogen/autoload/pathogen.vim\ncall pathogen#infect()\n.vim/ contains just pathogen and nothing else.\nAlso I confirm that receipt with runtime_append_all_bundles() solves the problem\n. Good day.\nI have same issue on a gentoo (vim 7.3.409). I've tried to find what makes most of files to detect as a conf and minimized my .vimrc just to two lines:\nruntime bundle/vim-pathogen/autoload/pathogen.vim\ncall pathogen#infect()\n.vim/ contains just pathogen and nothing else.\nAlso I confirm that receipt with runtime_append_all_bundles() solves the problem\n. ",
    "llorens": "Hi,\nI also experienced the issue. I investigated it, described it and provided a patch for the stock $VIMRUNTIME/filetype.vim: http://code.google.com/p/vim/issues/detail?id=52\nHope it gets upstream soon.\n. Hi,\nI also experienced the issue. I investigated it, described it and provided a patch for the stock $VIMRUNTIME/filetype.vim: http://code.google.com/p/vim/issues/detail?id=52\nHope it gets upstream soon.\n. ",
    "orpheuslummis": "Thank you.\n. Thank you.\n. ",
    "flowchartsman": "It is still broken, yes.\n. The 'filetype off' followed by the 'filetype on' is definitely what breaks it.  If I alter my .vimrc to read:\n\"call pathogen#infect()\ncall pathogen#runtime_append_all_bundles()\nsyntax on\nfiletype plugin indent on\nIt works peachy.\n. Nope, Ubuntu, actually.  Which is odd, because I couldn't find any\nreferences to 'filetype' in any of the files included by default.  So,\nindeed, it's my .vimrc that issues the first 'filetype on', which\nsuggests that this is a bug in vim.\nOn Tue, Aug 30, 2011 at 1:31 PM, tpope\nreply@reply.github.com\nwrote:\n\nWell there's your workaround. Are you on Gentoo as well?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tpope/vim-pathogen/issues/40#issuecomment-1945525\n. Also, it seems to only affect certain filetypes.  .vim files are just\nfine, whereas perl (and apparently git commit) files are not.\n\nOn Tue, Aug 30, 2011 at 1:41 PM, Andy Walker walkeraj@gmail.com wrote:\n\nNope, Ubuntu, actually. \u00a0Which is odd, because I couldn't find any\nreferences to 'filetype' in any of the files included by default. \u00a0So,\nindeed, it's my .vimrc that issues the first 'filetype on', which\nsuggests that this is a bug in vim.\nOn Tue, Aug 30, 2011 at 1:31 PM, tpope\nreply@reply.github.com\nwrote:\n\nWell there's your workaround. Are you on Gentoo as well?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tpope/vim-pathogen/issues/40#issuecomment-1945525\n. It is still broken, yes.\n. The 'filetype off' followed by the 'filetype on' is definitely what breaks it.  If I alter my .vimrc to read:\n\n\n\"call pathogen#infect()\ncall pathogen#runtime_append_all_bundles()\nsyntax on\nfiletype plugin indent on\nIt works peachy.\n. Nope, Ubuntu, actually.  Which is odd, because I couldn't find any\nreferences to 'filetype' in any of the files included by default.  So,\nindeed, it's my .vimrc that issues the first 'filetype on', which\nsuggests that this is a bug in vim.\nOn Tue, Aug 30, 2011 at 1:31 PM, tpope\nreply@reply.github.com\nwrote:\n\nWell there's your workaround. Are you on Gentoo as well?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tpope/vim-pathogen/issues/40#issuecomment-1945525\n. Also, it seems to only affect certain filetypes.  .vim files are just\nfine, whereas perl (and apparently git commit) files are not.\n\nOn Tue, Aug 30, 2011 at 1:41 PM, Andy Walker walkeraj@gmail.com wrote:\n\nNope, Ubuntu, actually. \u00a0Which is odd, because I couldn't find any\nreferences to 'filetype' in any of the files included by default. \u00a0So,\nindeed, it's my .vimrc that issues the first 'filetype on', which\nsuggests that this is a bug in vim.\nOn Tue, Aug 30, 2011 at 1:31 PM, tpope\nreply@reply.github.com\nwrote:\n\nWell there's your workaround. Are you on Gentoo as well?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tpope/vim-pathogen/issues/40#issuecomment-1945525\n. \n\n",
    "Spoygg": "My bad, although in Git repository, still have to have a file from repository opened for edit. Thanks for response.\n. My bad, although in Git repository, still have to have a file from repository opened for edit. Thanks for response.\n. ",
    "dbb": "I've had some weird issues with pasting text from the primary X selection when it was copied in a browser. It's hard to tell whether you've actually got the final newline or not, but that could apply to both versions.\nI think one advantage of having a longer, single command is the shell's history. If, for some reason, you need to install pathogen again, you need only execute one history event, rather than two. I should have mentioned that initially. Of course, since you already made the directories, you would probably only need to recall the curl command anyway, but maybe you want to rm-rf them and get a clean start. In that case, I think it would be nice to have that single history even handy. \nSo, admittedly, there's really only a small advantage to using a single install command. But, as far as I can tell, it wouldn't hurt anything either.\n. Ok, that worked. So, do all such scripts have to be in the format ~/.vim/bundle/DIR/script.vim?\nI also tried putting the gummybears dir in ~/.vim/bundle/colors/gummybears, but it wasn't recognized.\n. I've had some weird issues with pasting text from the primary X selection when it was copied in a browser. It's hard to tell whether you've actually got the final newline or not, but that could apply to both versions.\nI think one advantage of having a longer, single command is the shell's history. If, for some reason, you need to install pathogen again, you need only execute one history event, rather than two. I should have mentioned that initially. Of course, since you already made the directories, you would probably only need to recall the curl command anyway, but maybe you want to rm-rf them and get a clean start. In that case, I think it would be nice to have that single history even handy. \nSo, admittedly, there's really only a small advantage to using a single install command. But, as far as I can tell, it wouldn't hurt anything either.\n. Ok, that worked. So, do all such scripts have to be in the format ~/.vim/bundle/DIR/script.vim?\nI also tried putting the gummybears dir in ~/.vim/bundle/colors/gummybears, but it wasn't recognized.\n. ",
    "deadlyicon": "heheh sorry for the mistake =P\n. heheh sorry for the mistake =P\n. ",
    "vsviridov": "But doesn't it say in the fugitive readme to add it to the statusline? how would I go about that then?\n. I guess I'm saying \"where would I put it if it doesn't work in the .vimrc?\"...\nI'm a vim noob...\n. /facepalm\nwhy wasn't it working with my statusline...?\nset statusline=%t\\ %y\\ format:\\ %{&ff};\\ [%c,%l]%{fugitive#statusline()}\n. Oh, crap i had an extra space before the %{fugitive and it was causing it to blow up...\n/doublefacepalm\nthanks for your help.\n. But doesn't it say in the fugitive readme to add it to the statusline? how would I go about that then?\n. I guess I'm saying \"where would I put it if it doesn't work in the .vimrc?\"...\nI'm a vim noob...\n. /facepalm\nwhy wasn't it working with my statusline...?\nset statusline=%t\\ %y\\ format:\\ %{&ff};\\ [%c,%l]%{fugitive#statusline()}\n. Oh, crap i had an extra space before the %{fugitive and it was causing it to blow up...\n/doublefacepalm\nthanks for your help.\n. ",
    "jmcaffee": "I found that changing:\n.sep.'*[^~]'\nto:\n.sep.'**[^~]'\nin lines 153 and 155 results in the 'after' dirs being included in the rtp.\nI don't know if it's an issue (or matters) but the 'after' dirs are included in the middle of the list produced by :scriptnames and I'm expecting them at the end. ie. they come 'after' all other *.vim files. My snipmate plugin is still not working (maybe because of this?)\n. You are correct about every single directory being added. And it appears that there is a limit on the length of the runtimepath that I am now hitting...\nHere's the runtime path:\nC:\\Users\\killer/vimfiles,C:\\tools\\vim/vimfiles,C:\\tools\\vim\\vim73\\runtime,C:\\tools\\vim/vimfiles/after,C:\\Users\\killer/vimfiles/after\n. :set runtimepath? didn't work for me. The paths listed above are a result of :echo &runtimepath (with no plugins enabled).\n. Additionally, the directory C:\\tools\\vim\\vimfiles doesn't actually exist on my system. So, I don't know where that is coming from.\n. I had added ruby_debugger plugin to the bundle directory and I started getting errors about spelling files not being found. When I checked the runtimepath at that point, it was being truncated (visually, anyway) and I assumed it was because it had been made so long. I was using echo &runtimepath to check the it at the time.\nKeep in mind that there are a lot of directories in the ruby_debugger tree and they were all being added due to my change (**) to the pathogen function.\nAfter removing the ruby_debugger plugin from the bundle dir, the missing spell files errors went away.\nWhen I started gvim using the command line given by @sunaku, set runtimepath? returned an error:\nError detected while processing command line: \nE20: Mark not set\nStarting gvim with gvim -u NONE then running :set runtimepath? returns:\nruntimepath=~/vimfiles,C:\\tools\\vim/vimfiles,C:\\tools\\vim\\vim73\\runtime,C:\\tools\\vim/vimfiles/after,~/vimfiles/after\n``\n. I did want to point out that I was calling pathogen from my vimrc file with the following signature:call pathogen#infect()This gives me the problems mentioned above (afterdirs not added to path) because it is callingpathogen#runtime_append_all_bundles()`\nI changed the infect call to:\ncall pathogen#infect(\"~/vimfiles/bundle\")\nand this gives me the desired results (due to it calling pathogen#runtime_prepend_subdirectories())\nIt appears that runtime_append_all_bundles() doesn't look any deeper into the directory trees than the initial level -- meaning that it would find bundle/after but not bundle/somedir/after.\nI'm not sure if this is the intended result or not.\n. I found that changing:\n.sep.'*[^~]'\nto:\n.sep.'**[^~]'\nin lines 153 and 155 results in the 'after' dirs being included in the rtp.\nI don't know if it's an issue (or matters) but the 'after' dirs are included in the middle of the list produced by :scriptnames and I'm expecting them at the end. ie. they come 'after' all other *.vim files. My snipmate plugin is still not working (maybe because of this?)\n. You are correct about every single directory being added. And it appears that there is a limit on the length of the runtimepath that I am now hitting...\nHere's the runtime path:\nC:\\Users\\killer/vimfiles,C:\\tools\\vim/vimfiles,C:\\tools\\vim\\vim73\\runtime,C:\\tools\\vim/vimfiles/after,C:\\Users\\killer/vimfiles/after\n. :set runtimepath? didn't work for me. The paths listed above are a result of :echo &runtimepath (with no plugins enabled).\n. Additionally, the directory C:\\tools\\vim\\vimfiles doesn't actually exist on my system. So, I don't know where that is coming from.\n. I had added ruby_debugger plugin to the bundle directory and I started getting errors about spelling files not being found. When I checked the runtimepath at that point, it was being truncated (visually, anyway) and I assumed it was because it had been made so long. I was using echo &runtimepath to check the it at the time.\nKeep in mind that there are a lot of directories in the ruby_debugger tree and they were all being added due to my change (**) to the pathogen function.\nAfter removing the ruby_debugger plugin from the bundle dir, the missing spell files errors went away.\nWhen I started gvim using the command line given by @sunaku, set runtimepath? returned an error:\nError detected while processing command line: \nE20: Mark not set\nStarting gvim with gvim -u NONE then running :set runtimepath? returns:\nruntimepath=~/vimfiles,C:\\tools\\vim/vimfiles,C:\\tools\\vim\\vim73\\runtime,C:\\tools\\vim/vimfiles/after,~/vimfiles/after\n``\n. I did want to point out that I was calling pathogen from my vimrc file with the following signature:call pathogen#infect()This gives me the problems mentioned above (afterdirs not added to path) because it is callingpathogen#runtime_append_all_bundles()`\nI changed the infect call to:\ncall pathogen#infect(\"~/vimfiles/bundle\")\nand this gives me the desired results (due to it calling pathogen#runtime_prepend_subdirectories())\nIt appears that runtime_append_all_bundles() doesn't look any deeper into the directory trees than the initial level -- meaning that it would find bundle/after but not bundle/somedir/after.\nI'm not sure if this is the intended result or not.\n. ",
    "graudeejs": "snipmate worked fine for me with pathogen\n. snipmate worked fine for me with pathogen\n. ",
    "dennishostetler": "I'm having this issue too. Under Cygwin and Linux there is not an issue with the length of the runtimepath set rtp shows everything. On Windows however 7.3.46 my rtp gets truncated at 1023 characters.\nThe Cygwin/Linux Vim versions are a bit newer (7.3.353/7.3.154). I wonder if the rtp limit was removed in a later patch or if it's just a Windows thing?\nNever mind. I'm an idiot. It's just the path display (as you indicated earler) that's truncated. The issue is with snipmate. Not the amazingly awesome pathogen :-).\n. I'm having this issue too. Under Cygwin and Linux there is not an issue with the length of the runtimepath set rtp shows everything. On Windows however 7.3.46 my rtp gets truncated at 1023 characters.\nThe Cygwin/Linux Vim versions are a bit newer (7.3.353/7.3.154). I wonder if the rtp limit was removed in a later patch or if it's just a Windows thing?\nNever mind. I'm an idiot. It's just the path display (as you indicated earler) that's truncated. The issue is with snipmate. Not the amazingly awesome pathogen :-).\n. ",
    "FigmentEngine": ":set cp? results in:\nnocompatible\n. got this:\n1: /home/ec2-user/.vimrc\n2: /home/ec2-user/.vim/autoload/pathogen.vim\n3: /usr/share/vim/vim72/syntax/syntax.vim\n4: /usr/share/vim/vim72/syntax/synload.vim\n5: /usr/share/vim/vim72/syntax/syncolor.vim\n6: /usr/share/vim/vim72/filetype.vim\n7: /home/ec2-user/.vim/ftdetect/go.vim\n8: /usr/share/vim/vim72/scripts.vim\n9: /usr/share/vim/vim72/ftplugin.vim\n0: /usr/share/vim/vim72/indent.vim\n. ec2-user is the current user (i did a search and replace on \"ec2-user\" to \"me\" on first post)\n. fixed! adding \"set nocp\" just before the call fixed the error\nthanks!\n. :set cp? results in:\nnocompatible\n. got this:\n1: /home/ec2-user/.vimrc\n2: /home/ec2-user/.vim/autoload/pathogen.vim\n3: /usr/share/vim/vim72/syntax/syntax.vim\n4: /usr/share/vim/vim72/syntax/synload.vim\n5: /usr/share/vim/vim72/syntax/syncolor.vim\n6: /usr/share/vim/vim72/filetype.vim\n7: /home/ec2-user/.vim/ftdetect/go.vim\n8: /usr/share/vim/vim72/scripts.vim\n9: /usr/share/vim/vim72/ftplugin.vim\n0: /usr/share/vim/vim72/indent.vim\n. ec2-user is the current user (i did a search and replace on \"ec2-user\" to \"me\" on first post)\n. fixed! adding \"set nocp\" just before the call fixed the error\nthanks!\n. ",
    "marblenix": "I would like to update this page for future googlers, as I just ran into this problem with a slightly different solution and this is the first result when searching for \"Unknown function: pathogen#infect\". \nMy setup is slightly different. I prefer to have all my personal config files in ~/.config. I run Mac OS X 10.9 and install the latest vim with homebrew. I have a export variable in my bashrc that tells programs where to install config files (for me it's export DOTFILES=~/.config). In vim though, the first vimrc read is always /usr/local/share/vim/vimrc, followed by ~/.vimrc. \nSo future googlers, if you were hoping to find a fix for pathogen when you enjoy having a nonstandard vim directory, this is the /usr/local/share/vim/vimrc file that works for me:\nset nocp\nif exists('$DOTFILES') \n  source $DOTFILES/vim/autoload/pathogen.vim\n  source $DOTFILES/vim/vimrc\nendif\nApologies if this annoys anyone with an email.\n. I would like to update this page for future googlers, as I just ran into this problem with a slightly different solution and this is the first result when searching for \"Unknown function: pathogen#infect\". \nMy setup is slightly different. I prefer to have all my personal config files in ~/.config. I run Mac OS X 10.9 and install the latest vim with homebrew. I have a export variable in my bashrc that tells programs where to install config files (for me it's export DOTFILES=~/.config). In vim though, the first vimrc read is always /usr/local/share/vim/vimrc, followed by ~/.vimrc. \nSo future googlers, if you were hoping to find a fix for pathogen when you enjoy having a nonstandard vim directory, this is the /usr/local/share/vim/vimrc file that works for me:\nset nocp\nif exists('$DOTFILES') \n  source $DOTFILES/vim/autoload/pathogen.vim\n  source $DOTFILES/vim/vimrc\nendif\nApologies if this annoys anyone with an email.\n. ",
    "dpurrington": "Similar experience, different solution. I'm sharing my vimrc between Windows and OSX machines and encountered this issue on Windows, where I've gone to using the Unix folder layout (.vim folder). As a result, autoload stopped working on Windows. The guidance from this article hit the nail on the head with this suggestion: \nif has('win32') || has('win64')\n  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after\nendif\n. Similar experience, different solution. I'm sharing my vimrc between Windows and OSX machines and encountered this issue on Windows, where I've gone to using the Unix folder layout (.vim folder). As a result, autoload stopped working on Windows. The guidance from this article hit the nail on the head with this suggestion: \nif has('win32') || has('win64')\n  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after\nendif\n. ",
    "Jeff-Tian": "Cool, thank you! Your command works on my Windows 7!\nif has('win32') || has('win64')\n  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after\nendif\n. Cool, thank you! Your command works on my Windows 7!\nif has('win32') || has('win64')\n  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after\nendif\n. ",
    "jakup": "I just ran into this error as well.   The problem is I put pathogen.vim in $HOME/vimfiles/autoload.   vim from Git for windows will only recognize $HOME/.vim by default.\nHere is how I fixed the error.\ncd $HOME\nln -s vimfiles .vim\n. I just ran into this error as well.   The problem is I put pathogen.vim in $HOME/vimfiles/autoload.   vim from Git for windows will only recognize $HOME/.vim by default.\nHere is how I fixed the error.\ncd $HOME\nln -s vimfiles .vim\n. ",
    "LRengel": "I'm using vim on a mac running El capitan version 10.11.4 and am using vim 7.3 and i'm using the same code as above and I get this error:\n Error detected while processing /Users/smrengel/.vimrc:\nline    1:\nE117: Unknown function: pathogen#infect\nI've tried using the method above , but no luck\n. I'm using vim on a mac running El capitan version 10.11.4 and am using vim 7.3 and i'm using the same code as above and I get this error:\n Error detected while processing /Users/smrengel/.vimrc:\nline    1:\nE117: Unknown function: pathogen#infect\nI've tried using the method above , but no luck\n. ",
    "jacob-israel-turner": "Getting this problem again as well, on a new Mac.\n. Does it need to be installed differently for neovim than vim? Cause it works fine with vim and breaks with neovim.\n. Scratch that, definitely a user error here.\n. Getting this problem again as well, on a new Mac.\n. Does it need to be installed differently for neovim than vim? Cause it works fine with vim and breaks with neovim.\n. Scratch that, definitely a user error here.\n. ",
    "nodox": "I got this same error and I saw that I indeed installed it in the wrong directory.\nInstall in that autoload directory.\nfixed!\n. I got this same error and I saw that I indeed installed it in the wrong directory.\nInstall in that autoload directory.\nfixed!\n. ",
    "Starefossen": "Solved this for latest NeoVim by moving theautoload directory into ./config/nvim/\n. Solved this for latest NeoVim by moving theautoload directory into ./config/nvim/\n. ",
    "dgodfrey95": "I'm getting this error on Windows and I've tried the \"if has()\" solution but it still gives the same error. . I'm getting this error on Windows and I've tried the \"if has()\" solution but it still gives the same error. . ",
    "winder": "Solved this on OSX (running bash) by linking my .vim directory to .config/nvim and creating an init.vim file in there linking to my .vimrc.\nln -s ~/.vim ~/.config/nvim\nln -s ~/.vimrc ~/.config/nvim/init.vim. Solved this on OSX (running bash) by linking my .vim directory to .config/nvim and creating an init.vim file in there linking to my .vimrc.\nln -s ~/.vim ~/.config/nvim\nln -s ~/.vimrc ~/.config/nvim/init.vim. ",
    "sic-f": "It's IMPORTANT that you create the symlink:\nln -s ~/.vim ~/.config/nvim\nFIRST, before the second one:\nln -s ~/.vimrc ~/.config/nvim/init.vim\nfor this to work.\nIf you create the symlink for the vimrc file first (init.vim) then you'll end up creating a nvim folder instead of a symlinked one, which will put the vim folder inside it and not it's contents. That's how the pathogen install will fail.. It's IMPORTANT that you create the symlink:\nln -s ~/.vim ~/.config/nvim\nFIRST, before the second one:\nln -s ~/.vimrc ~/.config/nvim/init.vim\nfor this to work.\nIf you create the symlink for the vimrc file first (init.vim) then you'll end up creating a nvim folder instead of a symlinked one, which will put the vim folder inside it and not it's contents. That's how the pathogen install will fail.. ",
    "kalahooo": "For windows, I've just rename ~/.vim to ~/vimfiles. For windows, I've just rename ~/.vim to ~/vimfiles. ",
    "AnwarShah": "I installed pathogen from Ubuntu repository and caused this error in neovim, though vim was running file. Installed it in autoload, now the error is gone. I installed pathogen from Ubuntu repository and caused this error in neovim, though vim was running file. Installed it in autoload, now the error is gone. ",
    "rzuritamilla": "I am getting the same error. I am a new user of vim 8 (Windows 10). \nI moved autoload to the vimfiles folder (after deleting all files in that folder) and installed pathogen.vim. Then i created a bundle folder in vimfiles and installed vim-markdown. Any suggestions?    . I am getting the same error. I am a new user of vim 8 (Windows 10). \nI moved autoload to the vimfiles folder (after deleting all files in that folder) and installed pathogen.vim. Then i created a bundle folder in vimfiles and installed vim-markdown. Any suggestions?    . ",
    "MrGrumbleBee": "This has been an open issue on Ubuntu for some while, Ubuntu users may refer to https://bugs.launchpad.net/ubuntu/+source/vim/+bug/572627\n. This has been an open issue on Ubuntu for some while, Ubuntu users may refer to https://bugs.launchpad.net/ubuntu/+source/vim/+bug/572627\n. ",
    "KevinSjoberg": "@tpope have you thought a bit more regarding this? I'm currently using pathogen for my standalone plugin manager and it would be awesome not having to close the editor when you install a new plugin.\n. @tpope have you thought a bit more regarding this? I'm currently using pathogen for my standalone plugin manager and it would be awesome not having to close the editor when you install a new plugin.\n. ",
    "exu": "I have the same issue \nWykryto b\u0142\u0105d podczas przetwarzania function pathogen#helptags: \nwiersz    4: \nE151: No match: /home/exu/.vim/bundle/vim-markdown/doc/*```\n. I have the same issue \nWykryto b\u0142\u0105d podczas przetwarzania function pathogen#helptags: \nwiersz    4: \nE151: No match: /home/exu/.vim/bundle/vim-markdown/doc/*```\n. ",
    "eddiemonge": "Yes, exactly. Pathogen would be the submodule that creates the .vim directory. Under there I have a script that pulls all the other plugins into the subfolders.\n. Yes, exactly. Pathogen would be the submodule that creates the .vim directory. Under there I have a script that pulls all the other plugins into the subfolders.\n. ",
    "denzuko": "Current versions of pathogen use pathogen#infect() instead of pathogen#runtime_append_all_bundles().\n. Current versions of pathogen use pathogen#infect() instead of pathogen#runtime_append_all_bundles().\n. ",
    "thornomad": "I guess I'm not sure that pathogen, specifically, is at fault here; only that when I comment this out call pathogen#infect() VIM loads with no errors.  With that line left in, I get the multiple shell errors and the packages in my bundle aren't loaded.\nI tried installing my own locally compiled version of vim at ~/bin/vim but I had the same error with that version as the one provided by my host.\n. Sorry about the lack of info, should have thought to do this to begin with.  I ran vim using -V9.  Here is (what I think to be) the pertinent bit of output at startup.  Running it via :source doesn't throw any errors but it doesn't appear that anything is loading. \n```\nfinished sourcing /etc/vimrc\nsourcing \"$HOME/.vimrc\"\nSearching for \"autoload/pathogen.vim\" in \"/home/kissbeta/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim70,/usr/share/vim/vimfiles/after,/home/kissbeta/.vim/after\"\nSearching for \"/home/kissbeta/.vim/autoload/pathogen.vim\"\nline 1: sourcing \"/home/kissbeta/.vim/autoload/pathogen.vim\"\nfinished sourcing /home/kissbeta/.vim/autoload/pathogen.vim\ncontinuing in /home/kissbeta/.vimrc\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/0 /home/kissbeta/.vim/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/1 /usr/share/vim/vimfiles/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/2 /usr/share/vim/vim70/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/3 /usr/share/vim/vimfiles/bundle/*[^~]/after\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/4 /home/kissbeta/.vim/bundle/*[^~]/after\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\n```\n. Okay. Thanks so much for your quick response. I will have to get it to work the old fashioned way. Ta\n. Boom - that seems to have solved it in one fell swoop!  Thank so much.  No more errors.  Quick test and plugins are loading!\nThanks again.\n. I guess I'm not sure that pathogen, specifically, is at fault here; only that when I comment this out call pathogen#infect() VIM loads with no errors.  With that line left in, I get the multiple shell errors and the packages in my bundle aren't loaded.\nI tried installing my own locally compiled version of vim at ~/bin/vim but I had the same error with that version as the one provided by my host.\n. Sorry about the lack of info, should have thought to do this to begin with.  I ran vim using -V9.  Here is (what I think to be) the pertinent bit of output at startup.  Running it via :source doesn't throw any errors but it doesn't appear that anything is loading. \n```\nfinished sourcing /etc/vimrc\nsourcing \"$HOME/.vimrc\"\nSearching for \"autoload/pathogen.vim\" in \"/home/kissbeta/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim70,/usr/share/vim/vimfiles/after,/home/kissbeta/.vim/after\"\nSearching for \"/home/kissbeta/.vim/autoload/pathogen.vim\"\nline 1: sourcing \"/home/kissbeta/.vim/autoload/pathogen.vim\"\nfinished sourcing /home/kissbeta/.vim/autoload/pathogen.vim\ncontinuing in /home/kissbeta/.vimrc\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/0 /home/kissbeta/.vim/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/1 /usr/share/vim/vimfiles/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/2 /usr/share/vim/vim70/bundle/*[^~]\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/3 /usr/share/vim/vimfiles/bundle/*[^~]/after\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\nCalling shell to execute: \"unset nonomatch; echo >/tmp/v68255/4 /home/kissbeta/.vim/bundle/*[^~]/after\"\nCannot execute shell /usr/local/cpanel/bin/jailshell\n```\n. Okay. Thanks so much for your quick response. I will have to get it to work the old fashioned way. Ta\n. Boom - that seems to have solved it in one fell swoop!  Thank so much.  No more errors.  Quick test and plugins are loading!\nThanks again.\n. ",
    "edwardbeckett": "Yep ... that works .... Thanks for the saving thread ... ;-) \n. Yep ... that works .... Thanks for the saving thread ... ;-) \n. ",
    "mrthebob": "Works for me too!  THANK YOU!\n. Works for me too!  THANK YOU!\n. ",
    "ghost": "works :)\n. I appreciatte greatly all your help.\u00a0 I did decide to tart over with a clean install. Hope I get it right this time. All the thanks will go to you \n:) \nDuane\n\nFrom: Tim Pope notifications@github.com\nTo: tpope/vim-pathogen vim-pathogen@noreply.github.com \nSent: Sunday, January 20, 2013 9:04 AM\nSubject: Re: [vim-pathogen] pathogen not loading bundles - clean install (#83)\nI don't know. Maybe you have something dumb in 'wildignore'?\n\u2014\nReply to this email directly or view it on GitHub.\n. works :)\n. I appreciatte greatly all your help.\u00a0 I did decide to tart over with a clean install. Hope I get it right this time. All the thanks will go to you \n:) \nDuane\n\nFrom: Tim Pope notifications@github.com\nTo: tpope/vim-pathogen vim-pathogen@noreply.github.com \nSent: Sunday, January 20, 2013 9:04 AM\nSubject: Re: [vim-pathogen] pathogen not loading bundles - clean install (#83)\nI don't know. Maybe you have something dumb in 'wildignore'?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "sjl": "Slimv has always worked fine under Pathogen for me.\nThere are some cases where it'll break when used with Fugitive (see comments on http://stackoverflow.com/questions/7525519/slimv-segfaulting-on-os-x-lion for that) but it's fine with Pathogen.\n. Slimv has always worked fine under Pathogen for me.\nThere are some cases where it'll break when used with Fugitive (see comments on http://stackoverflow.com/questions/7525519/slimv-segfaulting-on-os-x-lion for that) but it's fine with Pathogen.\n. ",
    "aperiodic": "This does seem to be a slimv issue, and not a pathogen issue. I thought it was a pathogen issue because I didn't know how to query the runtimepath, and found that slimv didn't work when installed via pathogen, but did work when I placed the slimv files into the typical runtimepath folders in ~/.vim/. However, now I see that ~/.vim/bundle/slimv is in the output of :set runtimepath?. Sorry for the bother, tpope.\n. This does seem to be a slimv issue, and not a pathogen issue. I thought it was a pathogen issue because I didn't know how to query the runtimepath, and found that slimv didn't work when installed via pathogen, but did work when I placed the slimv files into the typical runtimepath folders in ~/.vim/. However, now I see that ~/.vim/bundle/slimv is in the output of :set runtimepath?. Sorry for the bother, tpope.\n. ",
    "darcyparker": "This seems to be an old issue and here and here ...\nI am using the latest version and experiencing the issue, so maybe it creeped back in by accident?\n. Issue Resolved!!!! Pathogen is fine. It turns out it was a misunderstanding that I made (and I think others have made too).  Here's the two key things I learned:\n1. (Obvious) pathogen#infect() looks for the bundle folder under each path in &rtp that does not end with after.\n   - In my case there was no issue in finding the bundle folder because the bundle folder's root path was already in the &rtp.\n2. (Not Obvious) If and only if there is also a corresponding entry for the path in the &rtp of the form path\\after\", then pathogen#infect() adds the after folders found in each bundle in bundle.\n   - In my case, I had $HOME\\.vim in my &rtp but not $HOME\\.vim\\after. Therefore, the $HOME\\.vim\\bundle\\*\\after folders were skipped over.\n   - The ~\\.vim folder is standard in cygwin and other unix flavours. So the $HOME\\.vim and $HOME\\.vim\\after folders are defined in the &rtp by default. But on windows (outside of cygwin) this is not the case. I wrongly assumed the $HOME\\.vim\\after folder was accounted for because $HOME\\.vim was in the &rtp. \nAfter figuring out this second rule about the after folder (from lots of :debug and insertions of echom into pathogen.vim), here's a fragment of what I inserted into my vimrc to fix it:\nvim\nlet g:my_vim_dir=expand(\"$HOME/.vim\")\nif has(\"win16\") || has(\"win32\") || has(\"win64\")\n  \"add g:my_vim_dir to the front of the runtimepath\n  execute \"set rtp^=\".g:my_vim_dir\n  \"add g:my_vim_dir\\after to the end of the runtimepath\n  execute \"set rtp+=\".g:my_vim_dir.\"\\\\after\"\nendif\n\"Now calls to pathogen#infect() will add the bundle\\*\\after folders \n\"to the &rtp as required\nSo the key to solving this was adding the after folder to the end of the &rtp as shown above.\nHopefully this helps others.  Maybe it should be added to the docs?\n(I suspect this finding will help resolve this open issue too?)\n. Thanks for sharing your solution.  I like how you don't add to the &runtimepath and instead just modify the vimfiles folder to .vim when it is appended to your user's folder.  This way you're saving 2 entries in the &runtimepath compared to my previous solution.\nI couldn't use yours as it was because I don't have a &runtimepath with 'Documents and Settings' or 'Users'... so inspired on your solution, I changed mine as follows:\nvim\nif has(\"win32\") || has(\"win64\") || has(\"win16\")\n  let &runtimepath=substitute(&runtimepath,\n                              \\escape($HOME,'\\').'[\\\\/]vimfiles',\n                              \\escape($HOME,'\\').'\\\\.vim',\n                              \\'g'\n                              \\)\nendif\nIn my case, I set $HOME on my windows machines to point to the same $HOME as my cygwin user's home dir. Others may wish to setx HOME %USERPROFILE% on their windows boxes if they don't use cygwin.\nAs a side note, I wonder if your solution may be cleaner if you used $USERPROFILE in your regex? It will expand to the appropriate location so you don't have to make the assumptions in your regex about where it is stored (ie under 'Documents and Settings' or 'Users' or where ever....)\n. This seems to be an old issue and here and here ...\nI am using the latest version and experiencing the issue, so maybe it creeped back in by accident?\n. Issue Resolved!!!! Pathogen is fine. It turns out it was a misunderstanding that I made (and I think others have made too).  Here's the two key things I learned:\n1. (Obvious) pathogen#infect() looks for the bundle folder under each path in &rtp that does not end with after.\n   - In my case there was no issue in finding the bundle folder because the bundle folder's root path was already in the &rtp.\n2. (Not Obvious) If and only if there is also a corresponding entry for the path in the &rtp of the form path\\after\", then pathogen#infect() adds the after folders found in each bundle in bundle.\n   - In my case, I had $HOME\\.vim in my &rtp but not $HOME\\.vim\\after. Therefore, the $HOME\\.vim\\bundle\\*\\after folders were skipped over.\n   - The ~\\.vim folder is standard in cygwin and other unix flavours. So the $HOME\\.vim and $HOME\\.vim\\after folders are defined in the &rtp by default. But on windows (outside of cygwin) this is not the case. I wrongly assumed the $HOME\\.vim\\after folder was accounted for because $HOME\\.vim was in the &rtp. \nAfter figuring out this second rule about the after folder (from lots of :debug and insertions of echom into pathogen.vim), here's a fragment of what I inserted into my vimrc to fix it:\nvim\nlet g:my_vim_dir=expand(\"$HOME/.vim\")\nif has(\"win16\") || has(\"win32\") || has(\"win64\")\n  \"add g:my_vim_dir to the front of the runtimepath\n  execute \"set rtp^=\".g:my_vim_dir\n  \"add g:my_vim_dir\\after to the end of the runtimepath\n  execute \"set rtp+=\".g:my_vim_dir.\"\\\\after\"\nendif\n\"Now calls to pathogen#infect() will add the bundle\\*\\after folders \n\"to the &rtp as required\nSo the key to solving this was adding the after folder to the end of the &rtp as shown above.\nHopefully this helps others.  Maybe it should be added to the docs?\n(I suspect this finding will help resolve this open issue too?)\n. Thanks for sharing your solution.  I like how you don't add to the &runtimepath and instead just modify the vimfiles folder to .vim when it is appended to your user's folder.  This way you're saving 2 entries in the &runtimepath compared to my previous solution.\nI couldn't use yours as it was because I don't have a &runtimepath with 'Documents and Settings' or 'Users'... so inspired on your solution, I changed mine as follows:\nvim\nif has(\"win32\") || has(\"win64\") || has(\"win16\")\n  let &runtimepath=substitute(&runtimepath,\n                              \\escape($HOME,'\\').'[\\\\/]vimfiles',\n                              \\escape($HOME,'\\').'\\\\.vim',\n                              \\'g'\n                              \\)\nendif\nIn my case, I set $HOME on my windows machines to point to the same $HOME as my cygwin user's home dir. Others may wish to setx HOME %USERPROFILE% on their windows boxes if they don't use cygwin.\nAs a side note, I wonder if your solution may be cleaner if you used $USERPROFILE in your regex? It will expand to the appropriate location so you don't have to make the assumptions in your regex about where it is stored (ie under 'Documents and Settings' or 'Users' or where ever....)\n. ",
    "bukzor": "Thanks! I was able to pare it down a little.\nCan this be simpler?\nvim\n\" keep plugins nicely bundled in separate folders.\n\" http://www.vim.org/scripts/script.php?script_id=2332\n    runtime autoload/pathogen.vim\n    if exists('g:loaded_pathogen')\n        call pathogen#infect() \"load the bundles, if possible\n        Helptags \"plus any bundled help\n        runtime! bundle_config.vim \"give me a chance to configure the plugins\n    endif\nhttps://github.com/bukzor/buck_dotfiles/commit/1c19e90c0b7d10b3c6da9412bf052b384b714ba8\n. Thanks! I was able to pare it down a little.\nCan this be simpler?\nvim\n\" keep plugins nicely bundled in separate folders.\n\" http://www.vim.org/scripts/script.php?script_id=2332\n    runtime autoload/pathogen.vim\n    if exists('g:loaded_pathogen')\n        call pathogen#infect() \"load the bundles, if possible\n        Helptags \"plus any bundled help\n        runtime! bundle_config.vim \"give me a chance to configure the plugins\n    endif\nhttps://github.com/bukzor/buck_dotfiles/commit/1c19e90c0b7d10b3c6da9412bf052b384b714ba8\n. ",
    "ggustafsson": "This is a bug in the plugin and got nothing to do with pathogen. The script uses several fixed paths and it will be a lot easier to install it outside of pathogens bundle directory. This should be marked as closed.\n. This is a bug in the plugin and got nothing to do with pathogen. The script uses several fixed paths and it will be a lot easier to install it outside of pathogens bundle directory. This should be marked as closed.\n. ",
    "gmunkhbaatarmn": "Default glob('/path/to/*) function's * does not match hidden dot files. In the shell, default globbing style could be changed to do so (shopt -s dotglob in Bash), but it is not possible in Vim.\nIn other words default glob('/path/to/*') call can add\n- /path/to/fugitive,\n- /path/to/tlib\n- /path/to/snipmate etc...\nBut can't add\n- /path/to/.fugitive\n- /path/to/.tlib\n- /path/to/.snipmate etc... (And this is problem)\nI mean if pathogen can load bundle with any name, that is awesome.\nAnd about for use case of dot prefix bundle: I preferring dot prefixed name for some dependency bundle.\nIn example: bundle/.tlib, bundle/.addon-mw-utils (dependency libraries of snipmate). These bundles loaded in vim, but I don't want always see in my file browser. And maybe many people may prefer this way.\n. Default glob('/path/to/*) function's * does not match hidden dot files. In the shell, default globbing style could be changed to do so (shopt -s dotglob in Bash), but it is not possible in Vim.\nIn other words default glob('/path/to/*') call can add\n- /path/to/fugitive,\n- /path/to/tlib\n- /path/to/snipmate etc...\nBut can't add\n- /path/to/.fugitive\n- /path/to/.tlib\n- /path/to/.snipmate etc... (And this is problem)\nI mean if pathogen can load bundle with any name, that is awesome.\nAnd about for use case of dot prefix bundle: I preferring dot prefixed name for some dependency bundle.\nIn example: bundle/.tlib, bundle/.addon-mw-utils (dependency libraries of snipmate). These bundles loaded in vim, but I don't want always see in my file browser. And maybe many people may prefer this way.\n. ",
    "dkowis": "Oh wow, that was easier than I thought:\nOne can simply make a directory naming the bundle, in my case I called it spec. And then you make a syntax dir and put the file in there, because it's a syntax highlighting file! \nThanks for making an awesome, and intuitive tool. Even for morons like me! :D\n. Oh. And Derp. Thanks again!\n. That's correct. Everything works just fine when using vim or gvim\n. Somewhat disappointing:\ndkowis    5491  0.0  0.0 116476  1812 pts/5    S+   18:28   0:00 git commit -a\ndkowis    5492  0.0  0.0 118220  1484 pts/5    S+   18:28   0:00 vi .git/COMMIT_EDITMSG\nI always type in vi when I edit a file, rarely ever vim so I don't think that's the problem..... Actually....\nThat does seem to be the problem I entered vi /tmp/foobar:\ndkowis    5760  0.5  0.0 154576  3672 pts/7    S+   18:29   0:00 vim /tmp/foobar\nSo somehow, git doesn't know about my alias. HRM. I shall export EDITOR=vim and see if that rectifies the situation. Yep, that did it. Aliases that git was ignoring caused my problem and EDITOR was unset, so it just happily used vi.\nProblem solved! Thanks :D\n. Oh wow, that was easier than I thought:\nOne can simply make a directory naming the bundle, in my case I called it spec. And then you make a syntax dir and put the file in there, because it's a syntax highlighting file! \nThanks for making an awesome, and intuitive tool. Even for morons like me! :D\n. Oh. And Derp. Thanks again!\n. That's correct. Everything works just fine when using vim or gvim\n. Somewhat disappointing:\ndkowis    5491  0.0  0.0 116476  1812 pts/5    S+   18:28   0:00 git commit -a\ndkowis    5492  0.0  0.0 118220  1484 pts/5    S+   18:28   0:00 vi .git/COMMIT_EDITMSG\nI always type in vi when I edit a file, rarely ever vim so I don't think that's the problem..... Actually....\nThat does seem to be the problem I entered vi /tmp/foobar:\ndkowis    5760  0.5  0.0 154576  3672 pts/7    S+   18:29   0:00 vim /tmp/foobar\nSo somehow, git doesn't know about my alias. HRM. I shall export EDITOR=vim and see if that rectifies the situation. Yep, that did it. Aliases that git was ignoring caused my problem and EDITOR was unset, so it just happily used vi.\nProblem solved! Thanks :D\n. ",
    "twmht": "I want to use vim -u ~/.vimrc2 to read another vim configuration (vim default will read ~/.vimrc , so I use -u command to force vim read another vimrc)\nThat is , I want to read ~/.vim2 rather than ~/.vim when I use vim -u ~/.vimrc2 ,\nmy .vimrc2 settings is here:(I change the default runtimepath from ~/.vim to ~/.vim2)\nset\nrtp=~/.vim2,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim2/after\n\"\"pathogen settings\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nand I put pathogen.vim into ~/.vim2/autoload\nIt occurs error when I use vim -u ~/.vimrc2:\nE117: Undefined function: pathogen#infect\nI do not know why this happen?\nThanks for any comment\n. Yes, I put pathogen.vim into ~/.vim2/autoload\n. Thanks for your reply\nI have added both lines in ~/.vimrc2:\nset rtp=~/.vim2,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim2/after\n\"\"\"use pathogen insted of vundle\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nbut still only occurs:\nE117: Undefined function: pathogen#infect\nIt seems vim still did not find pathogen#infect() even I source ~/.vim2/autoload/pathogen\nBy the way, The other plugin in .vim2/autoload works fine, so that I do not have spell mistake on the folder name:(\nI am not sure if the the problem occurs when using vim -u command, because pathogen occurs error in vim -u command even though I use default runtimepath\nHave you ever tried vim -u ~/.vimrc ? \n. Sorry for my poor comprehension , I do not understand what you mean \" try them one at a time\"\nCan you elaborate?\nI comment out these lines from ~/.vimrc2:\nruntime! autoload/pathogen.vim\n source ~/.vim2/autoload/pathogen.vim\n call pathogen#infect()\n syntax on\n filetype plugin indent on\nand I use vim -u ~/.vimrc2\nafter I have a vim window, I try each line in ex mode\nIt doesn't occurs error when I use :call pathogen#infect()\nIt means that vim can find the function\nI do not understand why this happen :(\n. Thanks!\nI try vim -u ~/.vimrc twice by remove one of them each time:\nFirst try:\nruntime! autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\nSecond try:\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\n. Hi,\nI replace ~/.vim2/autoload/pathogen.vim with a fresh download\nbut still occurs the error:(\nCan you reproduce my problem?\nFor simplicity, I just create new runtime directory called ~/.vim3\nand  my ~/.vimrc3 settings are:\nset rtp=~/.vim3,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim3/after\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nI put pathogen.vim into ~/.vim3/autoload\nBut still occurs error\nE117: Undefined function: pathogen#infect\nI've done something similar (use ~\\.vim rather than ~\\vimfiles on Windows) and it works fine.\n=> Can you show the related settings of your vimrc in Windows?\n. Yessssssssssssss!\nset nocompatible at first line of .vimrc2 solved my problem\nThanks for your patience and lots of help:)\n. I want to use vim -u ~/.vimrc2 to read another vim configuration (vim default will read ~/.vimrc , so I use -u command to force vim read another vimrc)\nThat is , I want to read ~/.vim2 rather than ~/.vim when I use vim -u ~/.vimrc2 ,\nmy .vimrc2 settings is here:(I change the default runtimepath from ~/.vim to ~/.vim2)\nset\nrtp=~/.vim2,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim2/after\n\"\"pathogen settings\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nand I put pathogen.vim into ~/.vim2/autoload\nIt occurs error when I use vim -u ~/.vimrc2:\nE117: Undefined function: pathogen#infect\nI do not know why this happen?\nThanks for any comment\n. Yes, I put pathogen.vim into ~/.vim2/autoload\n. Thanks for your reply\nI have added both lines in ~/.vimrc2:\nset rtp=~/.vim2,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim2/after\n\"\"\"use pathogen insted of vundle\nruntime! autoload/pathogen.vim\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nbut still only occurs:\nE117: Undefined function: pathogen#infect\nIt seems vim still did not find pathogen#infect() even I source ~/.vim2/autoload/pathogen\nBy the way, The other plugin in .vim2/autoload works fine, so that I do not have spell mistake on the folder name:(\nI am not sure if the the problem occurs when using vim -u command, because pathogen occurs error in vim -u command even though I use default runtimepath\nHave you ever tried vim -u ~/.vimrc ? \n. Sorry for my poor comprehension , I do not understand what you mean \" try them one at a time\"\nCan you elaborate?\nI comment out these lines from ~/.vimrc2:\nruntime! autoload/pathogen.vim\n source ~/.vim2/autoload/pathogen.vim\n call pathogen#infect()\n syntax on\n filetype plugin indent on\nand I use vim -u ~/.vimrc2\nafter I have a vim window, I try each line in ex mode\nIt doesn't occurs error when I use :call pathogen#infect()\nIt means that vim can find the function\nI do not understand why this happen :(\n. Thanks!\nI try vim -u ~/.vimrc twice by remove one of them each time:\nFirst try:\nruntime! autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\nSecond try:\nsource ~/.vim2/autoload/pathogen.vim\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nStill only occurs error:\nE117: Undefined function: pathogen#infect\n. Hi,\nI replace ~/.vim2/autoload/pathogen.vim with a fresh download\nbut still occurs the error:(\nCan you reproduce my problem?\nFor simplicity, I just create new runtime directory called ~/.vim3\nand  my ~/.vimrc3 settings are:\nset rtp=~/.vim3,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim3/after\ncall pathogen#infect()\nsyntax on\nfiletype plugin indent on\nI put pathogen.vim into ~/.vim3/autoload\nBut still occurs error\nE117: Undefined function: pathogen#infect\nI've done something similar (use ~\\.vim rather than ~\\vimfiles on Windows) and it works fine.\n=> Can you show the related settings of your vimrc in Windows?\n. Yessssssssssssss!\nset nocompatible at first line of .vimrc2 solved my problem\nThanks for your patience and lots of help:)\n. ",
    "lexander": "totally possible. thanks for the quick reply.  \nOn Monday, September 10, 2012 at 11:00 AM, Tim Pope wrote:\n\nDefinitely not true. Maybe your system is missing some certificate authorities?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/tpope/vim-pathogen/pull/74#issuecomment-8431954).\n. totally possible. thanks for the quick reply.  \n\nOn Monday, September 10, 2012 at 11:00 AM, Tim Pope wrote:\n\nDefinitely not true. Maybe your system is missing some certificate authorities?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/tpope/vim-pathogen/pull/74#issuecomment-8431954).\n. \n",
    "ZeroKnight": "I see, that would explain it. Thanks for your response, Tim :)\n. I see, that would explain it. Thanks for your response, Tim :)\n. ",
    "lifepillar": "\nThe harder part is actually loading plugins after they've been added.\n\nIndeed. In general, you need plugin-specific code for that. For example, YouCompleteMe is bootstrapped through a function called on a VimEnter event, which needs to be called manually if the plugin is loaded later.\nAnyway, I have this code in my .vimrc, which mostly does what the OP is asking for:\n```\n  \" Enable a blacklisted plugin.\n  fun! s:loadPlugin(plugin_name)\n    \" Remove the plugin from Pathogen's blacklist\n    call filter(g:pathogen_blacklist, \"v:val !=? '\" . a:plugin_name .\"'\")\n    \" Update runtimepath\n    call pathogen#surround($HOME . \"/.vim/bundle/\" . tolower(a:plugin_name))\n    \" Load the plugin\n    \" Note that this loads only one file (which is usually fine):\n    runtime plugin/.vim\n    \" Note that this uses the plugin name as typed by the user:\n    execute 'runtime! after/plugin/*/' . a:plugin_name . '.vim'\n    \" Plugin-specific activation\n    if tolower(a:plugin_name) == 'youcompleteme'\n      call youcompleteme#Enable()\n    endif\n  endf\n\" See h :command\n  fun! s:loadPluginCompletion(argLead, cmdLine, cursorPos)\n    return filter(copy(g:pathogen_blacklist), \"v:val =~? '^\" . a:argLead . \"'\")\n  endf\ncommand! -nargs=1 -complete=customlist,s:loadPluginCompletion LoadPlugin call loadPlugin()\n```\n. Same here. A problem is that, if you add more paths later, paths start to get truncated. For example:\n:call pathogen#surround('~/.vim/bundle/youcompleteme')\n:set rtp\nruntimepath=~/.vim/bundle/youcompleteme/,~/.vim [...] ~/.vim/bundle/youcompleteme//after\n:call pathogen#surround('~/.vim/bundle/foobar')\n:set rtp\nruntimepath=~/.vim/bundle/foobar, [...] ~/.vim/bundle/youcompleteme//after,~/.vim/bundle/foobar/afte\n:call pathogen#surround('~/.vim/bundle/didgeridoo')\n:set rtp\nruntimepath=~/.vim/bundle/didgeridoo, [...] ~/.vim/bundle/youcompleteme//after,\n. Ah, there seems to be a typo here:\nlet path = fnamemodify(a:path, ':p:?[\\\\/]\\=$??')\nShouldn't that be ':p:s?[\\\\/]\\=$??'?\n. See https://github.com/tpope/vim-pathogen/pull/160.\n. > The truncation is a function of :set output. See :echo &rtp.\nThanks, I was having a hard time trying to understand what was causing that!\n. > The harder part is actually loading plugins after they've been added.\nIndeed. In general, you need plugin-specific code for that. For example, YouCompleteMe is bootstrapped through a function called on a VimEnter event, which needs to be called manually if the plugin is loaded later.\nAnyway, I have this code in my .vimrc, which mostly does what the OP is asking for:\n```\n  \" Enable a blacklisted plugin.\n  fun! s:loadPlugin(plugin_name)\n    \" Remove the plugin from Pathogen's blacklist\n    call filter(g:pathogen_blacklist, \"v:val !=? '\" . a:plugin_name .\"'\")\n    \" Update runtimepath\n    call pathogen#surround($HOME . \"/.vim/bundle/\" . tolower(a:plugin_name))\n    \" Load the plugin\n    \" Note that this loads only one file (which is usually fine):\n    runtime plugin/.vim\n    \" Note that this uses the plugin name as typed by the user:\n    execute 'runtime! after/plugin/*/' . a:plugin_name . '.vim'\n    \" Plugin-specific activation\n    if tolower(a:plugin_name) == 'youcompleteme'\n      call youcompleteme#Enable()\n    endif\n  endf\n\" See h :command\n  fun! s:loadPluginCompletion(argLead, cmdLine, cursorPos)\n    return filter(copy(g:pathogen_blacklist), \"v:val =~? '^\" . a:argLead . \"'\")\n  endf\ncommand! -nargs=1 -complete=customlist,s:loadPluginCompletion LoadPlugin call loadPlugin()\n```\n. Same here. A problem is that, if you add more paths later, paths start to get truncated. For example:\n:call pathogen#surround('~/.vim/bundle/youcompleteme')\n:set rtp\nruntimepath=~/.vim/bundle/youcompleteme/,~/.vim [...] ~/.vim/bundle/youcompleteme//after\n:call pathogen#surround('~/.vim/bundle/foobar')\n:set rtp\nruntimepath=~/.vim/bundle/foobar, [...] ~/.vim/bundle/youcompleteme//after,~/.vim/bundle/foobar/afte\n:call pathogen#surround('~/.vim/bundle/didgeridoo')\n:set rtp\nruntimepath=~/.vim/bundle/didgeridoo, [...] ~/.vim/bundle/youcompleteme//after,\n. Ah, there seems to be a typo here:\nlet path = fnamemodify(a:path, ':p:?[\\\\/]\\=$??')\nShouldn't that be ':p:s?[\\\\/]\\=$??'?\n. See https://github.com/tpope/vim-pathogen/pull/160.\n. > The truncation is a function of :set output. See :echo &rtp.\nThanks, I was having a hard time trying to understand what was causing that!\n. ",
    "hjwp": "nothing - no error messages, but no incsearch either...\n. the third \"system\" is PythonAnywhere, which you can try out at http://www.pythonanywhere.com... either I've made some stupid mistake, or it's something to do with the config there.  everything else seems to behave like a perfectly normal *nix tho...\n. at startup:\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after\nafter :call pathogen#infect('bundle/{}'):\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after\nafter :call pathogen#infect('bundle/*'):\nruntimepath=~/.vim/bundle/*,~/.vim,/usr/share/vim/vimfiles/bundle/*,/usr/share/vim/vimfiles,/usr/share/vim/vim72/bundle/*,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/usr/share/vim/vimfiles/bundle/*/after,~/.vim/after,~/.vim/bu\n. nothing - no error messages, but no incsearch either...\n. the third \"system\" is PythonAnywhere, which you can try out at http://www.pythonanywhere.com... either I've made some stupid mistake, or it's something to do with the config there.  everything else seems to behave like a perfectly normal *nix tho...\n. at startup:\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after\nafter :call pathogen#infect('bundle/{}'):\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after\nafter :call pathogen#infect('bundle/*'):\nruntimepath=~/.vim/bundle/*,~/.vim,/usr/share/vim/vimfiles/bundle/*,/usr/share/vim/vimfiles,/usr/share/vim/vim72/bundle/*,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/usr/share/vim/vimfiles/bundle/*/after,~/.vim/after,~/.vim/bu\n. ",
    "wamoyo": "I think I'm having the same issue. I'm on Ubuntu, vim7.3. \n. :call pathogen#infect('bundle/{}') gives me runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/sh\nare/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/\n.vim/after\n:call pathogen#infect('bundle/*') gives me runtimepath=~/.vim/bundle/*,~/.vim,/var/lib/vim/addons/bundle/*,/var/l\nib/vim/addons,/usr/share/vim/vimfiles/bundle/*,/usr/share/vim/vimfiles,/\nusr/share/vim/vim73/bundle/*,/usr/share/vim/vim73,/usr/share/vim/vimfile\ns/after,/usr/share/vim/vimfiles/bundle/*/after,/var/lib/vim/addons/after\n,/var/lib/vim/addons/bundle/*/after,~/.vim/after,~/.vim/bundle/*/after\n. Thanks for working with me, I know my files are a mess, I have tried to do a clean install, but haven't been able to do that either.\n/home/costa/.vim/bundle/vim-jade\n/home/costa/.vim/bundle/vim-surround\n. ['/home/costa/.vim/bundle/vim-jade', '/home/costa/.vim/bundle/vim-surround']\n. Is it possible I've messed something up in my system files?\n. I actually switched over to Vundle, and although that gave me some trouble I got it working. But now I can't get syntax highlighting for stylus. It's been humbling switching over to Vim : ) Feel free to close this out.\n. Sorry, I'm a little (a lot) late on this, @dlukes. Hope you've managed to resolve the issue. My vim install has been super stable. It's been really consistent : )\n. I think I'm having the same issue. I'm on Ubuntu, vim7.3. \n. :call pathogen#infect('bundle/{}') gives me runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/sh\nare/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/\n.vim/after\n:call pathogen#infect('bundle/*') gives me runtimepath=~/.vim/bundle/*,~/.vim,/var/lib/vim/addons/bundle/*,/var/l\nib/vim/addons,/usr/share/vim/vimfiles/bundle/*,/usr/share/vim/vimfiles,/\nusr/share/vim/vim73/bundle/*,/usr/share/vim/vim73,/usr/share/vim/vimfile\ns/after,/usr/share/vim/vimfiles/bundle/*/after,/var/lib/vim/addons/after\n,/var/lib/vim/addons/bundle/*/after,~/.vim/after,~/.vim/bundle/*/after\n. Thanks for working with me, I know my files are a mess, I have tried to do a clean install, but haven't been able to do that either.\n/home/costa/.vim/bundle/vim-jade\n/home/costa/.vim/bundle/vim-surround\n. ['/home/costa/.vim/bundle/vim-jade', '/home/costa/.vim/bundle/vim-surround']\n. Is it possible I've messed something up in my system files?\n. I actually switched over to Vundle, and although that gave me some trouble I got it working. But now I can't get syntax highlighting for stylus. It's been humbling switching over to Vim : ) Feel free to close this out.\n. Sorry, I'm a little (a lot) late on this, @dlukes. Hope you've managed to resolve the issue. My vim install has been super stable. It's been really consistent : )\n. ",
    "singerb": "I'm also hitting this issue right now. Interestingly, the setup is as follows:\n- Ubuntu (12 something) with Vim 7.3\n- within that, a Debian Lenny chroot with Vim 7.1\nThe chroot (set up by schroot) binds my home directory into it, so my .vimrc, .vim/ etc are all shared between the two environments. In Ubuntu, pathogen is working fine, whereas within the chroot it is not (easy to see as vim complains about not finding the colorscheme, which should be added by pathogen). I've been diving into pathogen.vim and adding echo statements to try and find the problem, and I've found the following; when run inside the chroot, at startup my echos give me:\n/home/bzsing/.vim/bundle/*[^~]\nglob no split:\nfiles split:\n[]\npure glob:\n[]\nfiltered glob:\n[]\nWhereas outside the chroot I see the expected:\nhome/bzsing/.vim/bundle/*[^~]\nglob no split:\n/home/bzsing/.vim/bundle/minibufexpl.vim\n/home/bzsing/.vim/bundle/vim-colors-solarized\nfiles split:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\npure glob:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\nfiltered glob:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\nSo it seems that the glob() call is failing on startup. But, inside the chroot, when I run :echo glob('/home/bzsing/.vim/bundle/*[^~]') I see:\nhome/bzsing/.vim/bundle/minibufexpl.vim/\n/home/bzsing/.vim/bundle/vim-colors-solarized/\nThis suggested that something in my .vimrc was fixing the problem, and indeed that was the case. I use fish for my shell in both environments, and as a result have set shell=sh in my .vimrc to deal with some weirdness (can't remember what now). If I add that to the top of pathogen.vim, then it works perfectly.\nSo something about Vim 7.1 and fish means that shell/globbing behaves badly unless you tell vim to use sh instead. Not sure why 7.3 doesn't have this issue or what fish is doing to trigger it in 7.1 but not 7.3. For now I'm happy to maintain a personal copy of pathogen.vim with this change. It's entirely possible it's a fish bug, since this is still a pre-2.0 beta release.\n. I'm also hitting this issue right now. Interestingly, the setup is as follows:\n- Ubuntu (12 something) with Vim 7.3\n- within that, a Debian Lenny chroot with Vim 7.1\nThe chroot (set up by schroot) binds my home directory into it, so my .vimrc, .vim/ etc are all shared between the two environments. In Ubuntu, pathogen is working fine, whereas within the chroot it is not (easy to see as vim complains about not finding the colorscheme, which should be added by pathogen). I've been diving into pathogen.vim and adding echo statements to try and find the problem, and I've found the following; when run inside the chroot, at startup my echos give me:\n/home/bzsing/.vim/bundle/*[^~]\nglob no split:\nfiles split:\n[]\npure glob:\n[]\nfiltered glob:\n[]\nWhereas outside the chroot I see the expected:\nhome/bzsing/.vim/bundle/*[^~]\nglob no split:\n/home/bzsing/.vim/bundle/minibufexpl.vim\n/home/bzsing/.vim/bundle/vim-colors-solarized\nfiles split:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\npure glob:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\nfiltered glob:\n['/home/bzsing/.vim/bundle/minibufexpl.vim', '/home/bzsing/.vim/bundle/vim-colors-solarized']\nSo it seems that the glob() call is failing on startup. But, inside the chroot, when I run :echo glob('/home/bzsing/.vim/bundle/*[^~]') I see:\nhome/bzsing/.vim/bundle/minibufexpl.vim/\n/home/bzsing/.vim/bundle/vim-colors-solarized/\nThis suggested that something in my .vimrc was fixing the problem, and indeed that was the case. I use fish for my shell in both environments, and as a result have set shell=sh in my .vimrc to deal with some weirdness (can't remember what now). If I add that to the top of pathogen.vim, then it works perfectly.\nSo something about Vim 7.1 and fish means that shell/globbing behaves badly unless you tell vim to use sh instead. Not sure why 7.3 doesn't have this issue or what fish is doing to trigger it in 7.1 but not 7.3. For now I'm happy to maintain a personal copy of pathogen.vim with this change. It's entirely possible it's a fish bug, since this is still a pre-2.0 beta release.\n. ",
    "dlukes": "@CostaMichailidis : I've just spent the better part of an hour trying to solve a similar issue, until I realized that buried in the depths of my vimrc (which I seriously need to clean up) is a command that re-sets the runtimepath after the call to pathogen#infect() (i.e. set runtimepath=...), which explains why vim couldn't find any of the directories that pathogen worked so hard to scrounge up. I probably found the snippet in someone else's vimrc way back when I started using vim, and copied it over not really knowing what it did. What is more, the offending runtimepath is the same as the one you're reporting in your comment. Perhaps your problem is the same as mine? Pathogen itself is working like a charm (thank you, @tpope !), so if this solves your issue, it's not too late to switch ;)\n. @CostaMichailidis : I've just spent the better part of an hour trying to solve a similar issue, until I realized that buried in the depths of my vimrc (which I seriously need to clean up) is a command that re-sets the runtimepath after the call to pathogen#infect() (i.e. set runtimepath=...), which explains why vim couldn't find any of the directories that pathogen worked so hard to scrounge up. I probably found the snippet in someone else's vimrc way back when I started using vim, and copied it over not really knowing what it did. What is more, the offending runtimepath is the same as the one you're reporting in your comment. Perhaps your problem is the same as mine? Pathogen itself is working like a charm (thank you, @tpope !), so if this solves your issue, it's not too late to switch ;)\n. ",
    "edbrannin": "For posterity: I was having this problem too, and it was because I wrongly expected pathogen to expand environment variables in its argument.\nBroken:\ncall pathogen#infect('$DOTFILES/vim/bundle/{}')\nWorking:\ncall pathogen#infect($DOTFILES.'/vim/bundle/{}')\n. Actually, that would explain why it ever worked on my Mac -- but perhaps the glob syntax is system-dependent?\nI should have mentioned in my previous comment that \"$DOTFILES\" wasn't getting expanded in Windows.\n. I'll check on Monday.\n. :echo Pathogen#expand('$DOTFILES')\n['$DOTFILES']\n:echo expand('$DOTFILES')\nc:\\dev\\dotfiles\n. :echo glob('$DOTFILES')\nc:\\dev\\dotfiles\n. I said \"wasn't getting expanded in windows\" because calling #infect with a string that starts with $DOTFILES does not cause my bundles to load.\n(To add to my confusion, At some point before arriving at pathogen#infect($DOTFILES.'/vim/bundle/{}') I managed to get a runtimepath with several entries like c:\\dev\\dotfiles\\$dotfiles\\vim\\bundle\\... that didn't resolve properly.  I'm not sure what caused that one.)\nSteps to reproduce:\n\ncall pathogen#infect('$DOTFILES/vim/bundle/{}')\nredir @a | set runtimepath | redir END | normal \"ap\n\nObserved Result:\nruntimepath=C:\\dev\\dotfiles/vim,H:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,H:\\vimfiles/after,C:\\dev\\dotfiles/vim/after,~/\nExpected result:\n(This is what I get if I call pathogen#infect($DOTFILES.'/vim/bundle/{}') in Step 1.)\n  runtimepath=C:\\dev\\dotfiles\\vim\\bundle\\abolish,C:\\dev\\dotfiles\\vim\\bundle\\ack,C:\\dev\\dotfiles\\vim\\bundle\\confluencewiki.vim,C:\\dev\\dotfiles\\vim\\bundle\\dwm.vim,C:\\dev\\dotfiles\\vim\\bundle\\gundo.vim,C:\\dev\\dotfiles\\vim\\bundle\\html-match-tag,C:\\dev\\dotfiles\\vim\\bundle\\jinja2,C:\\dev\\dotfiles\\vim\\bundle\\kwbdi,C:\\dev\\dotfiles\\vim\\bundle\\markdown-preview,C:\\dev\\dotfiles\\vim\\bundle\\matchit,C:\\dev\\dotfiles\\vim\\bundle\\nerdcommenter,C:\\dev\\dotfiles\\vim\\bundle\\nerdtree,C:\\dev\\dotfiles\\vim\\bundle\\puppet,C:\\dev\\dotfiles\\vim\\bundle\\robotframework.vim,C:\\dev\\dotfiles\\vim\\bundle\\simplenote.vim,C:\\dev\\dotfiles\\vim\\bundle\\snipmate.vim,C:\\dev\\dotfiles\\vim\\bundle\\sparkup,C:\\dev\\dotfiles\\vim\\bundle\\tabular,C:\\dev\\dotfiles\\vim\\bundle\\taskpaper.vim,C:\\dev\\dotfiles\\vim\\bundle\\vagrant-vim,C:\\dev\\dotfiles\\vim\\bundle\\vim-colors-solarized,C:\\dev\\dotfiles\\vim\\bundle\\vim-commentary,C:\\dev\\dotfiles\\vim\\bundle\\vim-easymotion,C:\\dev\\dotfiles\\vim\\bundle\\vim-indent-guides,C:\\dev\\dotfiles\\vim\\bundle\\vim-indent-object,C:\\dev\\dotfiles\\vim\\bundle\\vim-javascrip\n(Truncated because apparently too long for vim to display them all.  I can tell more bundles than shown are loaded because vim-surround still works.)\n. No improvement when doing any of the following:\n1. call pathogen#surround(\"$DOTFILES/vim/bundle/{}\") in vimrc instead of pathogen#infect\n2. Call pathogen#surround in ex mode with a thus-broken vimrc\n3. Call pathogen#infect after step 2\nThis works:\n- call pathogen#surround($DOTFILES.\"/vim/bundle/{}\")\n. For posterity: I was having this problem too, and it was because I wrongly expected pathogen to expand environment variables in its argument.\nBroken:\ncall pathogen#infect('$DOTFILES/vim/bundle/{}')\nWorking:\ncall pathogen#infect($DOTFILES.'/vim/bundle/{}')\n. Actually, that would explain why it ever worked on my Mac -- but perhaps the glob syntax is system-dependent?\nI should have mentioned in my previous comment that \"$DOTFILES\" wasn't getting expanded in Windows.\n. I'll check on Monday.\n. :echo Pathogen#expand('$DOTFILES')\n['$DOTFILES']\n:echo expand('$DOTFILES')\nc:\\dev\\dotfiles\n. :echo glob('$DOTFILES')\nc:\\dev\\dotfiles\n. I said \"wasn't getting expanded in windows\" because calling #infect with a string that starts with $DOTFILES does not cause my bundles to load.\n(To add to my confusion, At some point before arriving at pathogen#infect($DOTFILES.'/vim/bundle/{}') I managed to get a runtimepath with several entries like c:\\dev\\dotfiles\\$dotfiles\\vim\\bundle\\... that didn't resolve properly.  I'm not sure what caused that one.)\nSteps to reproduce:\n\ncall pathogen#infect('$DOTFILES/vim/bundle/{}')\nredir @a | set runtimepath | redir END | normal \"ap\n\nObserved Result:\nruntimepath=C:\\dev\\dotfiles/vim,H:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,H:\\vimfiles/after,C:\\dev\\dotfiles/vim/after,~/\nExpected result:\n(This is what I get if I call pathogen#infect($DOTFILES.'/vim/bundle/{}') in Step 1.)\n  runtimepath=C:\\dev\\dotfiles\\vim\\bundle\\abolish,C:\\dev\\dotfiles\\vim\\bundle\\ack,C:\\dev\\dotfiles\\vim\\bundle\\confluencewiki.vim,C:\\dev\\dotfiles\\vim\\bundle\\dwm.vim,C:\\dev\\dotfiles\\vim\\bundle\\gundo.vim,C:\\dev\\dotfiles\\vim\\bundle\\html-match-tag,C:\\dev\\dotfiles\\vim\\bundle\\jinja2,C:\\dev\\dotfiles\\vim\\bundle\\kwbdi,C:\\dev\\dotfiles\\vim\\bundle\\markdown-preview,C:\\dev\\dotfiles\\vim\\bundle\\matchit,C:\\dev\\dotfiles\\vim\\bundle\\nerdcommenter,C:\\dev\\dotfiles\\vim\\bundle\\nerdtree,C:\\dev\\dotfiles\\vim\\bundle\\puppet,C:\\dev\\dotfiles\\vim\\bundle\\robotframework.vim,C:\\dev\\dotfiles\\vim\\bundle\\simplenote.vim,C:\\dev\\dotfiles\\vim\\bundle\\snipmate.vim,C:\\dev\\dotfiles\\vim\\bundle\\sparkup,C:\\dev\\dotfiles\\vim\\bundle\\tabular,C:\\dev\\dotfiles\\vim\\bundle\\taskpaper.vim,C:\\dev\\dotfiles\\vim\\bundle\\vagrant-vim,C:\\dev\\dotfiles\\vim\\bundle\\vim-colors-solarized,C:\\dev\\dotfiles\\vim\\bundle\\vim-commentary,C:\\dev\\dotfiles\\vim\\bundle\\vim-easymotion,C:\\dev\\dotfiles\\vim\\bundle\\vim-indent-guides,C:\\dev\\dotfiles\\vim\\bundle\\vim-indent-object,C:\\dev\\dotfiles\\vim\\bundle\\vim-javascrip\n(Truncated because apparently too long for vim to display them all.  I can tell more bundles than shown are loaded because vim-surround still works.)\n. No improvement when doing any of the following:\n1. call pathogen#surround(\"$DOTFILES/vim/bundle/{}\") in vimrc instead of pathogen#infect\n2. Call pathogen#surround in ex mode with a thus-broken vimrc\n3. Call pathogen#infect after step 2\nThis works:\n- call pathogen#surround($DOTFILES.\"/vim/bundle/{}\")\n. ",
    "maxsum-corin": "Ha! That's fair enough :)\nYes, dropping both does give an error (suggesting the --cacert or --insecure options). In fact dropping only the -s gives the error.\nI should have mentioned that I'm on an old OpenBSD (4.8) machine and using curl 7.20.0.\n. Ha! That's fair enough :)\nYes, dropping both does give an error (suggesting the --cacert or --insecure options). In fact dropping only the -s gives the error.\nI should have mentioned that I'm on an old OpenBSD (4.8) machine and using curl 7.20.0.\n. ",
    "nesono": "Thanks! Could you even give me another tip if I wanted to set mappings for subsequent bundles only if they are available (just like with pathogen).\nI tried using basically the same method as before: checking, if some variable/function exists...\n. thanks again, even you changed your face ;)\n. Thanks! Could you even give me another tip if I wanted to set mappings for subsequent bundles only if they are available (just like with pathogen).\nI tried using basically the same method as before: checking, if some variable/function exists...\n. thanks again, even you changed your face ;)\n. ",
    "graywh": "Or use silent! call pathogen#infect()\n. You essentially moved ~/.vim/ftplugin/javascript.vim to ~/.vim/bundle/vim-ftplugin/javascript.vim?\n. Take a look at /usr/share/vim/vim73/ftplugin.vim.  When Vim loads ftplugins, it looks for directories named ftplugin in your 'rtp' (via :runtime!).  See how ~/.vim is in your 'rtp', not ~/.vim/ftplugin.  You would need to move ~/.vim/ftplugin to ~/.vim/bundle/vim-ftplugin/ftplugin.\n. Did you intend to open an issue on http://github.com/tpope/vim-endwise instead?\n. Or use silent! call pathogen#infect()\n. You essentially moved ~/.vim/ftplugin/javascript.vim to ~/.vim/bundle/vim-ftplugin/javascript.vim?\n. Take a look at /usr/share/vim/vim73/ftplugin.vim.  When Vim loads ftplugins, it looks for directories named ftplugin in your 'rtp' (via :runtime!).  See how ~/.vim is in your 'rtp', not ~/.vim/ftplugin.  You would need to move ~/.vim/ftplugin to ~/.vim/bundle/vim-ftplugin/ftplugin.\n. Did you intend to open an issue on http://github.com/tpope/vim-endwise instead?\n. ",
    "YorikSar": "I've disabled all bundles - renamed whole bundles dir. The problem remains until I comment out cycle_filetype.\n. Oh, thanks for a push. Updated Vim to the last available ebuild (Portage looks pretty conservative with bumping versions). Everything works fine now. Sorry for the buzz.\n. I've disabled all bundles - renamed whole bundles dir. The problem remains until I comment out cycle_filetype.\n. Oh, thanks for a push. Updated Vim to the last available ebuild (Portage looks pretty conservative with bumping versions). Everything works fine now. Sorry for the buzz.\n. ",
    "claman": "I kind of hate to do this, but I'm encountering the same error.\n. That's the thing: as far as I can tell, it's not throwing up any errors, but it's not working. :Helptags doesn't return anything when I run it, and ~./vim/doc is empty. :set runtimepath? returns\nruntimepath=~/.vim,~/.vim/bundle/command-t,~/.vim/bundle/indentLine,~/.vim/bundle/nerdtree,~/.vim/bundle/numbers,~/.vim/bundle/syntas\ntic,~/.vim/bundle/vim-airline,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-surround,/usr/local/Cellar/macvim/7.4-73/MacVim.app/Contents\n/Resources/vim/vimfiles,/usr/local/Cellar/macvim/7.4-73/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/7.4-73/MacVi\nm.app/Contents/Resources/vim/vimfiles/after,~/.vim/bundle/indentLine/after,~/.vim/after\n. Typing :h command-t returns the error E149: Sorry, no help for command-t\n. Should I make a new issue?\nSorry.\n. I kind of hate to do this, but I'm encountering the same error.\n. That's the thing: as far as I can tell, it's not throwing up any errors, but it's not working. :Helptags doesn't return anything when I run it, and ~./vim/doc is empty. :set runtimepath? returns\nruntimepath=~/.vim,~/.vim/bundle/command-t,~/.vim/bundle/indentLine,~/.vim/bundle/nerdtree,~/.vim/bundle/numbers,~/.vim/bundle/syntas\ntic,~/.vim/bundle/vim-airline,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-surround,/usr/local/Cellar/macvim/7.4-73/MacVim.app/Contents\n/Resources/vim/vimfiles,/usr/local/Cellar/macvim/7.4-73/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/7.4-73/MacVi\nm.app/Contents/Resources/vim/vimfiles/after,~/.vim/bundle/indentLine/after,~/.vim/after\n. Typing :h command-t returns the error E149: Sorry, no help for command-t\n. Should I make a new issue?\nSorry.\n. ",
    "lsff": "Did you put your help doc in the direcory $VIM/doc;\nthe command is :helptags\nnot :Helptags.\nAt 2013-03-19 16:07:31,teoric notifications@github.com wrote:\nH!\nWhen I run :Helptags, I get an E154 (double helptag). This means that Helptags does not proceed to the other directories. Would it make sense to wrap the call to (lower case) helptags in try/catch and just list the errors in the end?\ntry\n  helptags `=dir.'/doc'`\ncatch /E154/\n  echo v:exception\nendtry\nRegards,\nb\n\u2014\nReply to this email directly or view it on GitHub.\n. Did you put your help doc in the direcory $VIM/doc;\nthe command is :helptags\nnot :Helptags.\nAt 2013-03-19 16:07:31,teoric notifications@github.com wrote:\nH!\nWhen I run :Helptags, I get an E154 (double helptag). This means that Helptags does not proceed to the other directories. Would it make sense to wrap the call to (lower case) helptags in try/catch and just list the errors in the end?\ntry\n  helptags `=dir.'/doc'`\ncatch /E154/\n  echo v:exception\nendtry\nRegards,\nb\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "teoric": "Sorry if I was unclear. :Helptags with a capital H is a command registered by Pathogen. (I thought the reference was obvious from the place where I posted this remark.) As Pathogen's vim script home page suggests:\n\nUse :Helptags to run :helptags on every doc/ directory in your 'runtimepath'. \n(http://www.vim.org/scripts/script.php?script_id=2332)\n\nMy suggestion concerned this :Helptags (not the one with the lower case \"h\", really!) which loops over the directories: It stops the loop once it encounters an error. I would prefer it to loop on; hence my suggestion.\n. Sorry if I was unclear. :Helptags with a capital H is a command registered by Pathogen. (I thought the reference was obvious from the place where I posted this remark.) As Pathogen's vim script home page suggests:\n\nUse :Helptags to run :helptags on every doc/ directory in your 'runtimepath'. \n(http://www.vim.org/scripts/script.php?script_id=2332)\n\nMy suggestion concerned this :Helptags (not the one with the lower case \"h\", really!) which loops over the directories: It stops the loop once it encounters an error. I would prefer it to loop on; hence my suggestion.\n. ",
    "qstrahl": "Stop me if I'm getting ahead of myself but I'm pretty sure this is well beyond the scope of Pathogen and that the lack of update management and Pathogen-native plugin installation is a feature and one of the reasons someone might use Pathogen over other more ambitious solutions.\n. I have YCM and pathogen without any issue. Maybe @spiritedRunning is using an older version of YCM?\n. > I just move .vimrc file from ~/.vim/ to my home directory (now .vimrc placed in ~/.vimrc), and all working fine!!!\nIt's ~/.vim/vimrc, not ~/.vim/.vimrc; note the lack of . before vimrc. That may be the source of your woes.\n. I believe this has been addressed before and the answer is \"it might be used some day\".\nOn 16 March 2014 07:36, HokieGeek notifications@github.com wrote:\n\nI was wondering about this too\n\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/116#issuecomment-37754849\n.\n. Stop me if I'm getting ahead of myself but I'm pretty sure this is well beyond the scope of Pathogen and that the lack of update management and Pathogen-native plugin installation is a feature and one of the reasons someone might use Pathogen over other more ambitious solutions.\n. I have YCM and pathogen without any issue. Maybe @spiritedRunning is using an older version of YCM?\n. > I just move .vimrc file from ~/.vim/ to my home directory (now .vimrc placed in ~/.vimrc), and all working fine!!!\n\nIt's ~/.vim/vimrc, not ~/.vim/.vimrc; note the lack of . before vimrc. That may be the source of your woes.\n. I believe this has been addressed before and the answer is \"it might be used some day\".\nOn 16 March 2014 07:36, HokieGeek notifications@github.com wrote:\n\nI was wondering about this too\n\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/116#issuecomment-37754849\n.\n. \n",
    "xolox": "Touch\u00e9, very clever :-).\n. Touch\u00e9, very clever :-).\n. ",
    "nikmartin": "Ok, I'm chasing a red herring then, I can't get plugins under .vim/bundle/ftplugin to properly be detected, :verbose set filetype shows:\nfiletype=javascript\n        Last set from /usr/share/vim/vim73/filetype.vim\nOn Debian Wheezy + Vim 7.3\n. Ahh, thanks! But I think you answered what I originally set out to discover: If ftplugins would work by simply being in runtime path, and it appears they won't, there IS special sauce there.\n. Reading your second post, that may work but it didn't in one iteration when I moved ftplugin under bundle, it still wasn't being loaded, but I may have just been too tired to think clearly, It was real late when I was doing that.\n. Ahh, I think I see it now, ~/.vim is in rtp, and ~/.vim/bundle/*, but not ~/.vim/bundle itself, and pathogen adds ~/.vim/bundle/yada on startup, then if ftplugin runs AFTER, it will find vim-ftplugin, and look for ftplugin under it. yeah, I was waaay to tired to figure that out\n. That worked, my grep-fu must have been off.  Thanks\n. Ok, I'm chasing a red herring then, I can't get plugins under .vim/bundle/ftplugin to properly be detected, :verbose set filetype shows:\nfiletype=javascript\n        Last set from /usr/share/vim/vim73/filetype.vim\nOn Debian Wheezy + Vim 7.3\n. Ahh, thanks! But I think you answered what I originally set out to discover: If ftplugins would work by simply being in runtime path, and it appears they won't, there IS special sauce there.\n. Reading your second post, that may work but it didn't in one iteration when I moved ftplugin under bundle, it still wasn't being loaded, but I may have just been too tired to think clearly, It was real late when I was doing that.\n. Ahh, I think I see it now, ~/.vim is in rtp, and ~/.vim/bundle/*, but not ~/.vim/bundle itself, and pathogen adds ~/.vim/bundle/yada on startup, then if ftplugin runs AFTER, it will find vim-ftplugin, and look for ftplugin under it. yeah, I was waaay to tired to figure that out\n. That worked, my grep-fu must have been off.  Thanks\n. ",
    "xaizek": "\nWhy would you want to have these characters there?\n\nProbably to make it possible to copy&paste those three lines from the README into terminal and execute two commands at once.\nSee this on escaping end-of-line and this on executing several commands in sequence.\n. How about simply renaming your vimrc and opening it. Or you could just run Vim without config by specifying -u NONE argument, like this:\nvim -u NONE ~/.vimrc\n. It seems your pathogen setup is correct. Something is wrong with YCM, it would probably crash Vim even without pathogen.\n. @qstrahl, I didn't mean YCM is incompatible with pathogen. I'm just saying that it looks more like YCM issue to me, because pathogen loads YCM almost as Vim would.\n. @Integralist, the simple way is to:\n1. Temporary rename .git directories to something else.\n2. Add everything except those directories to root git repository.\n3. Rename .git directories back.\nIt's enough to do this once now and with moved/newly added .git directories (try not to forget about this on moving/adding plugins, I often do...).\nYou could also consider using git submodules for plugins.\n. From CONTRIBUTING.markdown:\n\nAnd please, if I ask you to change something, git commit --amend.\n\nProbably not the reason why this isn't merged, but still.. @Rycieos, 'smartcase' just modifies behaviour of 'ignorecase' and does nothing if 'ignorecase' isn't set.\n. I think this code is responsible for the behaviour in question. But I don't understand whether it's planned or accidental, because documentation differs from the code. I personally find the behaviour useful sometimes (e.g. :gc<tab> expands to :Gcommit), but it looks strange and feels like too much for one option (a set-like option that gives more control would be more useful). Maybe this should become an issue in Vim repository?\n. > Why would you want to have these characters there?\nProbably to make it possible to copy&paste those three lines from the README into terminal and execute two commands at once.\nSee this on escaping end-of-line and this on executing several commands in sequence.\n. How about simply renaming your vimrc and opening it. Or you could just run Vim without config by specifying -u NONE argument, like this:\nvim -u NONE ~/.vimrc\n. It seems your pathogen setup is correct. Something is wrong with YCM, it would probably crash Vim even without pathogen.\n. @qstrahl, I didn't mean YCM is incompatible with pathogen. I'm just saying that it looks more like YCM issue to me, because pathogen loads YCM almost as Vim would.\n. @Integralist, the simple way is to:\n1. Temporary rename .git directories to something else.\n2. Add everything except those directories to root git repository.\n3. Rename .git directories back.\nIt's enough to do this once now and with moved/newly added .git directories (try not to forget about this on moving/adding plugins, I often do...).\nYou could also consider using git submodules for plugins.\n. From CONTRIBUTING.markdown:\n\nAnd please, if I ask you to change something, git commit --amend.\n\nProbably not the reason why this isn't merged, but still.. @Rycieos, 'smartcase' just modifies behaviour of 'ignorecase' and does nothing if 'ignorecase' isn't set.\n. I think this code is responsible for the behaviour in question. But I don't understand whether it's planned or accidental, because documentation differs from the code. I personally find the behaviour useful sometimes (e.g. :gc<tab> expands to :Gcommit), but it looks strange and feels like too much for one option (a set-like option that gives more control would be more useful). Maybe this should become an issue in Vim repository?\n. ",
    "DineshReddyK": "I am using 6.3.82. \n. I am using 6.3.82. \n. ",
    "spiritedRunning": "oh, it's ok.But why add this vim can't work.  Should I  add \"execute\npathogen#infect()\" when I install pathogen?\nOn Fri, Jul 19, 2013 at 1:28 AM, xaizek notifications@github.com wrote:\n\nHow about simply renaming your vimrc and opening it. Or you could just\nrun Vim without config by specifying -u NONE argument, like this:\nvim -u NONE ~/.vimrc\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/100#issuecomment-21200056\n.\n. well, I use the newest version of YCM,  but why I add \"execute\npathogen#infect()\" then vim will deadly with vimrc. I have already compiled\nYCM successful, but seems that  not work. So I tried to installed the\npathogen.\n\nOn Sat, Jul 20, 2013 at 2:13 AM, Quinn Strahl notifications@github.comwrote:\n\nI have YCM and pathogen without any issue. Maybe @spiritedRunninghttps://github.com/spiritedRunningis using an older version of YCM?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/100#issuecomment-21267104\n.\n. oh, it's ok.But why add this vim can't work.  Should I  add \"execute\npathogen#infect()\" when I install pathogen?\n\nOn Fri, Jul 19, 2013 at 1:28 AM, xaizek notifications@github.com wrote:\n\nHow about simply renaming your vimrc and opening it. Or you could just\nrun Vim without config by specifying -u NONE argument, like this:\nvim -u NONE ~/.vimrc\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/100#issuecomment-21200056\n.\n. well, I use the newest version of YCM,  but why I add \"execute\npathogen#infect()\" then vim will deadly with vimrc. I have already compiled\nYCM successful, but seems that  not work. So I tried to installed the\npathogen.\n\nOn Sat, Jul 20, 2013 at 2:13 AM, Quinn Strahl notifications@github.comwrote:\n\nI have YCM and pathogen without any issue. Maybe @spiritedRunninghttps://github.com/spiritedRunningis using an older version of YCM?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/100#issuecomment-21267104\n.\n. \n",
    "mirlord": "Actually, one these two commits (4ab96f5) is useless. Those, which adds list of paths as a correct #infect argument. From user's point the same can be achieved by several #infect() invocations for each list item.\nBut the second commit (545dcc0) is ok. I'll create an another pull-request, that doesn't mix things. Sorry for that.\n. 1. What's the problem to extend a returned object with VimL or anything else later?\n2. So I'll wait for your decision on pathogen#surround() and pathogen#incubate() return values. Please provide me your opinion on how to fix pathogen#infect() to keep it aligned with your roadmap view. For my own needs - it's ok to use them directly, passing pathogen#infect(), so it's ok for me just to revert the returned value of pathogen#infect() to an empty string.\n. I can't find a way to contact you directly, Javran, so I have to leave a public comment here.\nPlease, try to play with this: https://github.com/mirlord/vim-profiles (note, that now you have to install a forked pathogen version from my repo).\nI use it on a daily basis and it works pretty cool for me.\n. Actually, one these two commits (4ab96f5) is useless. Those, which adds list of paths as a correct #infect argument. From user's point the same can be achieved by several #infect() invocations for each list item.\nBut the second commit (545dcc0) is ok. I'll create an another pull-request, that doesn't mix things. Sorry for that.\n. 1. What's the problem to extend a returned object with VimL or anything else later?\n2. So I'll wait for your decision on pathogen#surround() and pathogen#incubate() return values. Please provide me your opinion on how to fix pathogen#infect() to keep it aligned with your roadmap view. For my own needs - it's ok to use them directly, passing pathogen#infect(), so it's ok for me just to revert the returned value of pathogen#infect() to an empty string.\n. I can't find a way to contact you directly, Javran, so I have to leave a public comment here.\nPlease, try to play with this: https://github.com/mirlord/vim-profiles (note, that now you have to install a forked pathogen version from my repo).\nI use it on a daily basis and it works pretty cool for me.\n. ",
    "andreasmischke": "I emptied the /bundles directory (~/.vim/bundles) and the problem still occurs.\nWhen I comment out the line execute pathogen#infect() in .vimrc, the problem is solved.\nIf it helps, here my .vimrc: http://pastebin.com/qKg8b197\nI should mention that I am a fairly n00b to vim and bash...\n. That did not help, I am afraid.\nPerhaps the error is caused by some other settings in my bash. Therefore never mind, I will investigate that problem later when there is time for that.\nUntil then I will just install the 1-2 packages manually. At least on that machine.\n. I emptied the /bundles directory (~/.vim/bundles) and the problem still occurs.\nWhen I comment out the line execute pathogen#infect() in .vimrc, the problem is solved.\nIf it helps, here my .vimrc: http://pastebin.com/qKg8b197\nI should mention that I am a fairly n00b to vim and bash...\n. That did not help, I am afraid.\nPerhaps the error is caused by some other settings in my bash. Therefore never mind, I will investigate that problem later when there is time for that.\nUntil then I will just install the 1-2 packages manually. At least on that machine.\n. ",
    "aroneous": "For what it's worth, I get the same issue on Windows 8 with cygwin, but only when running with the 'mintty' terminal that comes with cygwin. Starting cygwin bash under a Windows command shell and opening vim from there works fine. Commenting out the Pathogen call stops the problem for me as well.\n. For what it's worth, I get the same issue on Windows 8 with cygwin, but only when running with the 'mintty' terminal that comes with cygwin. Starting cygwin bash under a Windows command shell and opening vim from there works fine. Commenting out the Pathogen call stops the problem for me as well.\n. ",
    "Wyatts": "I can also confirm seeing this issue with MinTTY and nowhere else.  I tried setting an autocommand to just hit escape, but couldn't get it to work.\nI'm pretty sure I didn't have this problem a couple months ago (though the vintage of the pathogen I was using at the time is unclear), so this may be a more recent change?\nEDIT, it's a dirty, dirty hack, but what DID work (as far as I can tell) is to have it like this in your vimrc:\nnnoremap R <Esc> \" Disable replace mode\ncall pathogen#infect()\nau BufEnter * nnoremap R R \" Reenable it after entering the buffer\n. My Windows workstation has been a glorified SSH/screen terminal for a while (because the IT department loves rebooting the blame thing and losing all my state), but having gotten the bugmail, I probed a little more and noticed with an (almost) empty config it wasn't happening.  Bisecting my own config, I tracked it to this particular bit:\nautocmd BufReadPost *\n    \\ if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") |\n    \\ exe \"normal! g`\\\"\" |\n    \\ endif\n(This is from the vimrc_example.vim that comes with the standard vim distribution.  I'm probably not alone in having based my own vimrc on that example when I started using it years ago.)\nIn particular, this line:\n\\ exe \"normal! g`\\\"\" |\nI found that it seems to work as expected if I change it to:\nautocmd BufEnter *\n...but I'm not familiar enough with the nuances to know what possible negative side effects that has.  Regardless, as long as it remains in its original form in the upstream example, this will probably keep coming up (to say nothing of people who haven't touched that line in a decade.)\nI'll see if I can find a chance to git bisect over lunch and figure out where it started.\n. And there it is!  I experimentally replaced pathogen#infect() with  pathogen#cycle_filetype(), and it started in replace mode just like that.\nI fooled with it a little more and was amused to find that if you change the condition in cycle_filetype() to if(g:did_load_filetypes), it (apparently) only starts in replace mode every other time you start vim. (No really, what.)\nI gather the intent of that function is to re-detect file type in the event pathogen loaded more filetype definitions from the plugin path, so would it be sufficient to make the invocation au BufEnter * call pathogen#cycle_filetype()? \n I tried that and can verify it still executes, and it doesn't cause me to start in replace mode (I'm no vimscript guru, so it's a bit unclear which buffer event would be the right one, here).\n. Well, I emptied $VIMRUNTIME/filetype.vim and... it still happened.\nOkay, so not buffer events.  Some other event?  (I'm having an awful time finding clear documentation on what happens when in vim startup.)\n. I can also confirm seeing this issue with MinTTY and nowhere else.  I tried setting an autocommand to just hit escape, but couldn't get it to work.\nI'm pretty sure I didn't have this problem a couple months ago (though the vintage of the pathogen I was using at the time is unclear), so this may be a more recent change?\nEDIT, it's a dirty, dirty hack, but what DID work (as far as I can tell) is to have it like this in your vimrc:\nnnoremap R <Esc> \" Disable replace mode\ncall pathogen#infect()\nau BufEnter * nnoremap R R \" Reenable it after entering the buffer\n. My Windows workstation has been a glorified SSH/screen terminal for a while (because the IT department loves rebooting the blame thing and losing all my state), but having gotten the bugmail, I probed a little more and noticed with an (almost) empty config it wasn't happening.  Bisecting my own config, I tracked it to this particular bit:\nautocmd BufReadPost *\n    \\ if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") |\n    \\ exe \"normal! g`\\\"\" |\n    \\ endif\n(This is from the vimrc_example.vim that comes with the standard vim distribution.  I'm probably not alone in having based my own vimrc on that example when I started using it years ago.)\nIn particular, this line:\n\\ exe \"normal! g`\\\"\" |\nI found that it seems to work as expected if I change it to:\nautocmd BufEnter *\n...but I'm not familiar enough with the nuances to know what possible negative side effects that has.  Regardless, as long as it remains in its original form in the upstream example, this will probably keep coming up (to say nothing of people who haven't touched that line in a decade.)\nI'll see if I can find a chance to git bisect over lunch and figure out where it started.\n. And there it is!  I experimentally replaced pathogen#infect() with  pathogen#cycle_filetype(), and it started in replace mode just like that.\nI fooled with it a little more and was amused to find that if you change the condition in cycle_filetype() to if(g:did_load_filetypes), it (apparently) only starts in replace mode every other time you start vim. (No really, what.)\nI gather the intent of that function is to re-detect file type in the event pathogen loaded more filetype definitions from the plugin path, so would it be sufficient to make the invocation au BufEnter * call pathogen#cycle_filetype()? \n I tried that and can verify it still executes, and it doesn't cause me to start in replace mode (I'm no vimscript guru, so it's a bit unclear which buffer event would be the right one, here).\n. Well, I emptied $VIMRUNTIME/filetype.vim and... it still happened.\nOkay, so not buffer events.  Some other event?  (I'm having an awful time finding clear documentation on what happens when in vim startup.)\n. ",
    "ljani": "Just to let you know, I'm seeing a similar problem (vim randomly starts in replace mode) in a totally separate environment with vim-autoclose, if it helps debugging this issue. Removing vim-autoclose fully fixes the problem for me.\nI'm using spf13-vim and thus Vundle to install the plugin, not pathogen.\nOn Cygwin and Cygwin x64:\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Apr 23 2014 23:56:13)\nIncluded patches: 1-264\nCompiled by <cygwin@cygwin.com>\nHuge version without GUI.  Features included (+) or not (-):\n+acl             +farsi           +mouse_netterm   +syntax\n+arabic          +file_in_path    +mouse_sgr       +tag_binary\n+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static\n-balloon_eval    +float           +mouse_urxvt     -tag_any_white\n-browse          +folding         +mouse_xterm     -tcl\n++builtin_terms  -footer          +multi_byte      +terminfo\n+byte_offset     +fork()          +multi_lang      +termresponse\n+cindent         +gettext         -mzscheme        +textobjects\n-clientserver    -hangul_input    +netbeans_intg   +title\n+clipboard       +iconv           +path_extra      -toolbar\n+cmdline_compl   +insert_expand   +perl/dyn        +user_commands\n+cmdline_hist    +jumplist        +persistent_undo +vertsplit\n+cmdline_info    +keymap          +postscript      +virtualedit\n+comments        +langmap         +printer         +visual\n+conceal         +libcall         +profile         +visualextra\n+cryptv          +linebreak       +python/dyn      +viminfo\n+cscope          +lispindent      +python3/dyn     +vreplace\n+cursorbind      +listcmds        +quickfix        +wildignore\n+cursorshape     +localmap        +reltime         +wildmenu\n+dialog_con      +lua/dyn         +rightleft       +windows\n+diff            +menu            +ruby/dyn        +writebackup\n+digraphs        +mksession       +scrollbind      -X11\n-dnd             +modify_fname    +signs           -xfontset\n-ebcdic          +mouse           +smartindent     -xim\n+emacs_tags      -mouseshape      -sniff           -xsmp\n+eval            +mouse_dec       +startuptime     -xterm_clipboard\n+ex_extra        -mouse_gpm       +statusline      -xterm_save\n+extra_search    -mouse_jsbterm   -sun_workshop    -xpm\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/etc\"\n f-b for $VIMRUNTIME: \"/usr/share/vim/vim74\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -I/usr/include/ncursesw  -ggdb -O2 -pipe -Wimplicit-function-declaration -fdebug-prefix-map=/usr/src/ports/vim/vim-7.4.264-1.x86_64/build=/usr/src/debug/vim-7.4.264-1 -fdebug-prefix-map=/usr/src/ports/vim/vim-7.4.264-1.x86_64/src/vim74=/usr/src/debug/vim-7.4.264-1 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: gcc   -L.   -L/usr/local/lib -Wl,--as-needed -o vim.exe        -lm -lelf    -lncursesw -liconv -lintl   -Wl,--enable-auto-import -Wl,--export-all-symbols -Wl,--enable-auto-image-base -fstack-protector  -L/usr/lib/perl5/5.14/x86_64-cygwin-threads/CORE -lperl -ldl -lcrypt\n. Just to let you know, I'm seeing a similar problem (vim randomly starts in replace mode) in a totally separate environment with vim-autoclose, if it helps debugging this issue. Removing vim-autoclose fully fixes the problem for me.\nI'm using spf13-vim and thus Vundle to install the plugin, not pathogen.\nOn Cygwin and Cygwin x64:\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Apr 23 2014 23:56:13)\nIncluded patches: 1-264\nCompiled by <cygwin@cygwin.com>\nHuge version without GUI.  Features included (+) or not (-):\n+acl             +farsi           +mouse_netterm   +syntax\n+arabic          +file_in_path    +mouse_sgr       +tag_binary\n+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static\n-balloon_eval    +float           +mouse_urxvt     -tag_any_white\n-browse          +folding         +mouse_xterm     -tcl\n++builtin_terms  -footer          +multi_byte      +terminfo\n+byte_offset     +fork()          +multi_lang      +termresponse\n+cindent         +gettext         -mzscheme        +textobjects\n-clientserver    -hangul_input    +netbeans_intg   +title\n+clipboard       +iconv           +path_extra      -toolbar\n+cmdline_compl   +insert_expand   +perl/dyn        +user_commands\n+cmdline_hist    +jumplist        +persistent_undo +vertsplit\n+cmdline_info    +keymap          +postscript      +virtualedit\n+comments        +langmap         +printer         +visual\n+conceal         +libcall         +profile         +visualextra\n+cryptv          +linebreak       +python/dyn      +viminfo\n+cscope          +lispindent      +python3/dyn     +vreplace\n+cursorbind      +listcmds        +quickfix        +wildignore\n+cursorshape     +localmap        +reltime         +wildmenu\n+dialog_con      +lua/dyn         +rightleft       +windows\n+diff            +menu            +ruby/dyn        +writebackup\n+digraphs        +mksession       +scrollbind      -X11\n-dnd             +modify_fname    +signs           -xfontset\n-ebcdic          +mouse           +smartindent     -xim\n+emacs_tags      -mouseshape      -sniff           -xsmp\n+eval            +mouse_dec       +startuptime     -xterm_clipboard\n+ex_extra        -mouse_gpm       +statusline      -xterm_save\n+extra_search    -mouse_jsbterm   -sun_workshop    -xpm\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/etc\"\n f-b for $VIMRUNTIME: \"/usr/share/vim/vim74\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -I/usr/include/ncursesw  -ggdb -O2 -pipe -Wimplicit-function-declaration -fdebug-prefix-map=/usr/src/ports/vim/vim-7.4.264-1.x86_64/build=/usr/src/debug/vim-7.4.264-1 -fdebug-prefix-map=/usr/src/ports/vim/vim-7.4.264-1.x86_64/src/vim74=/usr/src/debug/vim-7.4.264-1 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: gcc   -L.   -L/usr/local/lib -Wl,--as-needed -o vim.exe        -lm -lelf    -lncursesw -liconv -lintl   -Wl,--enable-auto-import -Wl,--export-all-symbols -Wl,--enable-auto-image-base -fstack-protector  -L/usr/lib/perl5/5.14/x86_64-cygwin-threads/CORE -lperl -ldl -lcrypt\n. ",
    "Oberon00": "I had the same symptoms on Ubuntu/gnome-terminal but tracked it down to this line in my vimrc:\nnnoremap <silent> <Esc> :nohlsearch<CR>\nIt seems like remapping escape only leads to problems.\n. I had the same symptoms on Ubuntu/gnome-terminal but tracked it down to this line in my vimrc:\nnnoremap <silent> <Esc> :nohlsearch<CR>\nIt seems like remapping escape only leads to problems.\n. ",
    "defndaines": "For me, the problem seems to be inherent to using vim 7.4. I've tried playing with all the fixes and hacks on this page, and none of them solve the problem. In the meantime, I'm just forced to stay on vim 7.3. I see the problem on OS X and Ubuntu 14.04.\n. For me, the problem seems to be inherent to using vim 7.4. I've tried playing with all the fixes and hacks on this page, and none of them solve the problem. In the meantime, I'm just forced to stay on vim 7.3. I see the problem on OS X and Ubuntu 14.04.\n. ",
    "Carlodf": "Same issue with:\nnnoremap <silent> <Esc> :nohlsearch<cr>\nremapping to something else fixed the issue.\nPersonally I replaced it with\nnnoremap <silent> <leader>/ :nohlsearch <cr>. Same issue with:\nnnoremap <silent> <Esc> :nohlsearch<cr>\nremapping to something else fixed the issue.\nPersonally I replaced it with\nnnoremap <silent> <leader>/ :nohlsearch <cr>. ",
    "Zabanaa": "Thanks a lot @Carlodf I did just that and it fixed the issue for me.\nI'm on xubuntu 16.04 - gnome terminal - vim 8\ncheers . Thanks a lot @Carlodf I did just that and it fixed the issue for me.\nI'm on xubuntu 16.04 - gnome terminal - vim 8\ncheers . ",
    "AstroProfundis": "I can confirm this issue been fixed as @Carlodf suggested. Thanks a lot!\nI'm running ArchLinux with vim 8.0.628, and the issue is fixed by commenting out this line in my .vimrc:\nnnoremap <esc> :nohl<cr>\nSo the question now becomes: how can I continue use <ese> as :nohl if that's my favorite?. I can confirm this issue been fixed as @Carlodf suggested. Thanks a lot!\nI'm running ArchLinux with vim 8.0.628, and the issue is fixed by commenting out this line in my .vimrc:\nnnoremap <esc> :nohl<cr>\nSo the question now becomes: how can I continue use <ese> as :nohl if that's my favorite?. ",
    "ajzafar": "An autoload file isn't sourced until one autoload function or variable in that file is referenced. If you're putting the snippet on that page directly into the autoload file without any changes, then your file doesn't have anything autoloadable and consquently is never sourced. To fix it, change the function names to MoveWinToTab#MoveToPrevTab and MoveWinToTab#MoveToNextTab, making them autoloadable, and also update their names at the call site(s). See :h autoload for more information.\n. An autoload file isn't sourced until one autoload function or variable in that file is referenced. If you're putting the snippet on that page directly into the autoload file without any changes, then your file doesn't have anything autoloadable and consquently is never sourced. To fix it, change the function names to MoveWinToTab#MoveToPrevTab and MoveWinToTab#MoveToNextTab, making them autoloadable, and also update their names at the call site(s). See :h autoload for more information.\n. ",
    "1-61803": "Thanks!\nIn ~/.vim/bundle/MoveWinToTab/autoload/MoveWinToTab.vim I changed the function names to MoveWinToTab#MoveToPrevTab and MoveWinToTab#MoveToNextTab and called them in ~/.vimrc with map.\n\" MoveWinToTab\nmap <C-m> :call MoveWinToTab#MoveToNextTab()<CR><C-w>H\nmap <C-n> :call MoveWinToTab#MoveToPrevTab()<CR><C-w>H\n. Thanks!\nIn ~/.vim/bundle/MoveWinToTab/autoload/MoveWinToTab.vim I changed the function names to MoveWinToTab#MoveToPrevTab and MoveWinToTab#MoveToNextTab and called them in ~/.vimrc with map.\n\" MoveWinToTab\nmap <C-m> :call MoveWinToTab#MoveToNextTab()<CR><C-w>H\nmap <C-n> :call MoveWinToTab#MoveToPrevTab()<CR><C-w>H\n. ",
    "zerobatu": "yes\n. thanks, I added this in .vimrc\nset shell=/bin/bash\nand works\n. yes\n. thanks, I added this in .vimrc\nset shell=/bin/bash\nand works\n. ",
    "jkarmel": "I just had a few plugins that were having problems, my bad!\n. I just had a few plugins that were having problems, my bad!\n. ",
    "padraic7a": "Not that I'm offering any useful help but I wonder if this issue is on a to-do list?\nWould it be any help for me to post :set runtimepath? and echo &runtimepath without pathogen as mentioned above?\n. I'm feeling a little stupid now. I'll paste those values tomorrow when I'm back on that Windows machine. \n. :set runtimepath?\nruntimepath=X:\\vimfiles,X:\\vimfiles\\bundle\\vim-kolor,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\necho &runtimepath without pathogen\nX:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\nApologies for the earlier density. If I can add anything else that would be helpful please let me know.\nI don't know if it's relevant or not but pathogen worked for adding a theme [kolor] but not for adding NERDTree. This is the issue that prompted me to check github for existing issues.\n. The X drive is a networked drive \n. Not that I'm offering any useful help but I wonder if this issue is on a to-do list?\nWould it be any help for me to post :set runtimepath? and echo &runtimepath without pathogen as mentioned above?\n. I'm feeling a little stupid now. I'll paste those values tomorrow when I'm back on that Windows machine. \n. :set runtimepath?\nruntimepath=X:\\vimfiles,X:\\vimfiles\\bundle\\vim-kolor,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\necho &runtimepath without pathogen\nX:\\vimfiles,C:\\Program Files (x86)\\Vim/vimfiles,C:\\Program Files (x86)\\Vim\\vim74,C:\\Program Files (x86)\\Vim/vimfiles/after,X:\\vimfiles/after\nApologies for the earlier density. If I can add anything else that would be helpful please let me know.\nI don't know if it's relevant or not but pathogen worked for adding a theme [kolor] but not for adding NERDTree. This is the issue that prompted me to check github for existing issues.\n. The X drive is a networked drive \n. ",
    "MIRAMAXED": "runtimepath=~/.vim/bundle/vundle,~/.vim/bundle/surround.vim,~/.vim/bu\nndle/The-NERD-tree,~/.vim/bundle/*/~/.vim/bundle*,~/.vim/bundle/*,~/.vi\nm/~/.vim/bundle*,~/.vim,/var/lib/vim/addons/~/.vim/bundle*,/var/lib/vim\n/addons,/usr/share/vim/vimfiles/~/.vim/bundle*,/usr/share/vim/vimfiles,\n/usr/share/vim/vim74/~/.vim/bundle*,/usr/share/vim/vim74,/usr/share/vim\n/vimfiles/after,/usr/share/vim/vimfiles/~/.vim/bundle*/after,/var/lib/v\nim/addons/after,/var/lib/vim/addons/~/.vim/bundle*/after,~/.vim/after,~\n/.vim/~/.vim/bundle*/after,~/.vim/bundle/*/after,~/.vim/bundle/*/~/.vim\n/bundle*/after,~/.vim/bundle/vundle/,~/.vim/bundle/vundle/after,~/.vim/\nbundle/surround.vim/after,~/.vim/bundle/The-NERD-tree/after\n. Yes, I'm sure. When I try to use these plug-ins, nothing happens. When i try run NERD tree, i see \"Not an editor command: NERDTree\"\n. I deleted .vim/ and all references to vundle in the file .vimrc. Then i install vim-pathogen and NERDTree, but nothing new happend :) May be problem in ElementaryOS ?\n. cd ~/.vim/bundle\ngit clone https://github.com/scrooloose/nerdtree.git\nThen, in .vimrc i write: \nmap  :NERDTreeToggle \nimap  :NERDTreeToggle \n. :scriptnames return:\n  1: /usr/share/vim/vimrc\n  2: /usr/share/vim/vim74/debian.vim\n  3: /usr/share/vim/vim74/syntax/syntax.vim\n  4: /usr/share/vim/vim74/syntax/synload.vim\n  5: /usr/share/vim/vim74/syntax/syncolor.vim\n  6: /usr/share/vim/vim74/filetype.vim\n  7: /usr/share/vim/vim74/plugin/getscriptPlugin.vim\n  8: /usr/share/vim/vim74/plugin/gzip.vim\n  9: /usr/share/vim/vim74/plugin/matchparen.vim\n 10: /usr/share/vim/vim74/plugin/netrwPlugin.vim\n 11: /usr/share/vim/vim74/plugin/rrhelper.vim\n 12: /usr/share/vim/vim74/plugin/spellfile.vim\n 13: /usr/share/vim/vim74/plugin/tarPlugin.vim\n 14: /usr/share/vim/vim74/plugin/tohtml.vim\n 15: /usr/share/vim/vim74/plugin/vimballPlugin.vim\n 16: /usr/share/vim/vim74/plugin/zipPlugin.vim\n 17: ~/.vim/.vimrc\n 18: ~/.vim/autoload/pathogen.vim\n 19: /usr/share/vim/vim74/ftoff.vim\n 20: /usr/share/vim/vim74/syntax/nosyntax.vim\n 21: /usr/share/vim/vim74/ftplugin.vim\n 22: /usr/share/vim/vim74/indent.vim\n:)\n. Not work :( I tried move 'vimrc' from /etc/vim but plugins don't load... I think problem in ElementaryOS Linux, because on Ubuntu pathogen working well.\n. @tpope i fix it!!! :D I just move .vimrc file from ~/.vim/ to my home directory (now .vimrc placed in ~/.vimrc), and all working fine!!! Plugins loading now!!!\n. @qstrahl may be :)\n. @qstrahl 100% you right :D Thanks!\n. runtimepath=~/.vim/bundle/vundle,~/.vim/bundle/surround.vim,~/.vim/bu\nndle/The-NERD-tree,~/.vim/bundle/*/~/.vim/bundle*,~/.vim/bundle/*,~/.vi\nm/~/.vim/bundle*,~/.vim,/var/lib/vim/addons/~/.vim/bundle*,/var/lib/vim\n/addons,/usr/share/vim/vimfiles/~/.vim/bundle*,/usr/share/vim/vimfiles,\n/usr/share/vim/vim74/~/.vim/bundle*,/usr/share/vim/vim74,/usr/share/vim\n/vimfiles/after,/usr/share/vim/vimfiles/~/.vim/bundle*/after,/var/lib/v\nim/addons/after,/var/lib/vim/addons/~/.vim/bundle*/after,~/.vim/after,~\n/.vim/~/.vim/bundle*/after,~/.vim/bundle/*/after,~/.vim/bundle/*/~/.vim\n/bundle*/after,~/.vim/bundle/vundle/,~/.vim/bundle/vundle/after,~/.vim/\nbundle/surround.vim/after,~/.vim/bundle/The-NERD-tree/after\n. Yes, I'm sure. When I try to use these plug-ins, nothing happens. When i try run NERD tree, i see \"Not an editor command: NERDTree\"\n. I deleted .vim/ and all references to vundle in the file .vimrc. Then i install vim-pathogen and NERDTree, but nothing new happend :) May be problem in ElementaryOS ?\n. cd ~/.vim/bundle\ngit clone https://github.com/scrooloose/nerdtree.git\nThen, in .vimrc i write: \nmap  :NERDTreeToggle \nimap  :NERDTreeToggle \n. :scriptnames return:\n  1: /usr/share/vim/vimrc\n  2: /usr/share/vim/vim74/debian.vim\n  3: /usr/share/vim/vim74/syntax/syntax.vim\n  4: /usr/share/vim/vim74/syntax/synload.vim\n  5: /usr/share/vim/vim74/syntax/syncolor.vim\n  6: /usr/share/vim/vim74/filetype.vim\n  7: /usr/share/vim/vim74/plugin/getscriptPlugin.vim\n  8: /usr/share/vim/vim74/plugin/gzip.vim\n  9: /usr/share/vim/vim74/plugin/matchparen.vim\n 10: /usr/share/vim/vim74/plugin/netrwPlugin.vim\n 11: /usr/share/vim/vim74/plugin/rrhelper.vim\n 12: /usr/share/vim/vim74/plugin/spellfile.vim\n 13: /usr/share/vim/vim74/plugin/tarPlugin.vim\n 14: /usr/share/vim/vim74/plugin/tohtml.vim\n 15: /usr/share/vim/vim74/plugin/vimballPlugin.vim\n 16: /usr/share/vim/vim74/plugin/zipPlugin.vim\n 17: ~/.vim/.vimrc\n 18: ~/.vim/autoload/pathogen.vim\n 19: /usr/share/vim/vim74/ftoff.vim\n 20: /usr/share/vim/vim74/syntax/nosyntax.vim\n 21: /usr/share/vim/vim74/ftplugin.vim\n 22: /usr/share/vim/vim74/indent.vim\n:)\n. Not work :( I tried move 'vimrc' from /etc/vim but plugins don't load... I think problem in ElementaryOS Linux, because on Ubuntu pathogen working well.\n. @tpope i fix it!!! :D I just move .vimrc file from ~/.vim/ to my home directory (now .vimrc placed in ~/.vimrc), and all working fine!!! Plugins loading now!!!\n. @qstrahl may be :)\n. @qstrahl 100% you right :D Thanks!\n. ",
    "m42e": "Did you succeed finally? It seems I have the same probleme here. Any suggestions?\nUsing gVim on Win7.\n. Did you succeed finally? It seems I have the same probleme here. Any suggestions?\nUsing gVim on Win7.\n. ",
    "dkucinskas": "Had the same issue on Win7 and Debian moved ~/.vim/.vimrc to ~/.vimrc (debian) and ~/vimfiles/_vimrc to ~/_vimrc (Win7) now everything works, thanks. \n. Had the same issue on Win7 and Debian moved ~/.vim/.vimrc to ~/.vimrc (debian) and ~/vimfiles/_vimrc to ~/_vimrc (Win7) now everything works, thanks. \n. ",
    "maxfl": "Oops, indeed, sorry. I've followed the link from vim-endwise to pathogen and mixed up the windows.\n. Oops, indeed, sorry. I've followed the link from vim-endwise to pathogen and mixed up the windows.\n. ",
    "tantignac": "Oops, sorry about that!\n. Oops, sorry about that!\n. ",
    "boreq": "All combinations of :set compatibile and :set loadplugins failed to solve this issue.\n. OK, just wanted to let you know about the issue.\n. I removed vim, made sure that all files were deleted and copied them again. That fixed the problem and I have no idea what was the issue here. Apparently it was vim/OS related, which is weird because I used pacman to install it both now and earlier.\n. All combinations of :set compatibile and :set loadplugins failed to solve this issue.\n. OK, just wanted to let you know about the issue.\n. I removed vim, made sure that all files were deleted and copied them again. That fixed the problem and I have no idea what was the issue here. Apparently it was vim/OS related, which is weird because I used pacman to install it both now and earlier.\n. ",
    "thomasba": "I'm using Arch Linux too, but I don't have any issues using pathogen. Have you tried it with a plain .vimrc, which just contains \"execute pathogen#infect()\"?\n. I'm using Arch Linux too, but I don't have any issues using pathogen. Have you tried it with a plain .vimrc, which just contains \"execute pathogen#infect()\"?\n. ",
    "royaldark": "I am having the exact same issue, but on Windows 7, Vim 7.3.89. Everything in :set rtp looks good, but many plugins are missing from :scriptnames. \nThen I noticed, however, that it seemed only .vim files in any bundle's ftdetect folder were getting loaded. And sure enough, if I move my .vim files from plugins or autoload to ftdetect, everything starts working. This doesn't seem like a great solution, though - any ideas?\n. @tpope Thanks! Turns out I was accidentally loading the default gvim plugins before Pathogen. Problem solved.\n. I am having the exact same issue, but on Windows 7, Vim 7.3.89. Everything in :set rtp looks good, but many plugins are missing from :scriptnames. \nThen I noticed, however, that it seemed only .vim files in any bundle's ftdetect folder were getting loaded. And sure enough, if I move my .vim files from plugins or autoload to ftdetect, everything starts working. This doesn't seem like a great solution, though - any ideas?\n. @tpope Thanks! Turns out I was accidentally loading the default gvim plugins before Pathogen. Problem solved.\n. ",
    "HokieGeek": "I was wondering about this too\n. I was wondering about this too\n. ",
    "haya14busa": "Oh, I see. Thanks for your answer.\n. Oh, I see. Thanks for your answer.\n. ",
    "benjamincburns": "Yes. Apologies!\n. Yes. Apologies!\n. ",
    "ameidatou": "This still doesn't work in my vim:\nVIM - Vi IMproved 7.0 (2006 May 7, compiled Nov 12 2010 05:24:19)\nIncluded patches: 1, 3-4, 7-9, 11, 13-17, 19-26, 29-31, 34-44, 47, 50-56, 58-64, 66-73, 75, 77-92, 94-107, 109, 202, 234-237\nModified by bugzilla@redhat.com\nCompiled by bugzilla@redhat.com\nHuge version without GUI.  Features included (+) or not (-):\nAs a workaround I'm running vim with the below command:\n$ VIMBLACKLIST='Y' vim\n. Yes I'm using the latest, and I checked the commit that closed the issue and it's in the version I'm using but vim still hangs.\n. This still doesn't work in my vim:\nVIM - Vi IMproved 7.0 (2006 May 7, compiled Nov 12 2010 05:24:19)\nIncluded patches: 1, 3-4, 7-9, 11, 13-17, 19-26, 29-31, 34-44, 47, 50-56, 58-64, 66-73, 75, 77-92, 94-107, 109, 202, 234-237\nModified by bugzilla@redhat.com\nCompiled by bugzilla@redhat.com\nHuge version without GUI.  Features included (+) or not (-):\nAs a workaround I'm running vim with the below command:\n$ VIMBLACKLIST='Y' vim\n. Yes I'm using the latest, and I checked the commit that closed the issue and it's in the version I'm using but vim still hangs.\n. ",
    "LeoGalleguillos": "Using pathogen with Vim 7.0 also hangs for me. The solution, as mentioned above, was:\nexport VIMBLACKLIST=Y\nvim\nI'm on CentOS 5, so Vim 7.0 is the latest version of Vim available for now. We'll upgrade to CenOS 6 or 7 sometime during 2016.\nAny chance we could get a patch for this in the meantime?\n. Using pathogen with Vim 7.0 also hangs for me. The solution, as mentioned above, was:\nexport VIMBLACKLIST=Y\nvim\nI'm on CentOS 5, so Vim 7.0 is the latest version of Vim available for now. We'll upgrade to CenOS 6 or 7 sometime during 2016.\nAny chance we could get a patch for this in the meantime?\n. ",
    "nschley": "With all due respect to @LeoGalleguillos, I think his solution is somewhat shallow, especially as this ticket is remaining open so for all intelligent civilization to review.  I propose the following revision, to incorporate a little valuation.\nexport VIMBLACKLIST=TIM.P_ROCKS\nvim\nThanks for sharing your work, Tim!\n. WZC*,\n7.0/7.1?  That's kinda vintage.\nIs there a reason your organization is holding back?  It may be whoever's responsible to maintain it doesn't use vim, doesn't care, and doesn't have time.  Maybe also doesn't even know about vim, poor guy....\nWithout regard to the specific cause of your issue, can't you put in a ticket to your IT folks to upgrade?\nOtherwise, I refer you to https://github.com/tpope/vim-pathogen/issues/118.\nbon appetit! afiyet olsun!\n. With all due respect to @LeoGalleguillos, I think his solution is somewhat shallow, especially as this ticket is remaining open so for all intelligent civilization to review.  I propose the following revision, to incorporate a little valuation.\nexport VIMBLACKLIST=TIM.P_ROCKS\nvim\nThanks for sharing your work, Tim!\n. WZC*,\n7.0/7.1?  That's kinda vintage.\nIs there a reason your organization is holding back?  It may be whoever's responsible to maintain it doesn't use vim, doesn't care, and doesn't have time.  Maybe also doesn't even know about vim, poor guy....\nWithout regard to the specific cause of your issue, can't you put in a ticket to your IT folks to upgrade?\nOtherwise, I refer you to https://github.com/tpope/vim-pathogen/issues/118.\nbon appetit! afiyet olsun!\n. ",
    "hattya": "I found that filereadable() and filewritable() don't accept the glob syntax.\nI fixed that and force-pushed.\n. I removed unnecessary copy() and force-pushed.\n. @tpope :help help-translated\n. I found that filereadable() and filewritable() don't accept the glob syntax.\nI fixed that and force-pushed.\n. I removed unnecessary copy() and force-pushed.\n. @tpope :help help-translated\n. ",
    "kevin1024": "Oh, sorry, just saw you added the -L option.  Feel free to close, but you might still want to update the URL in case they remove the redirect.\n. Oh, sorry, just saw you added the -L option.  Feel free to close, but you might still want to update the URL in case they remove the redirect.\n. ",
    "FrostyX": "I would prefer function for loading specific plugin rather than whitelist (or both).\nI think it would be great to have possibilty to do:\ncall pathogen#load('nerdtree')\ncall pathogen#load('YouCompleteMe')\ncall pathogen#load('vim-fugitive')\n...\nInstead of call pathogen#infect(). I mean, infect() is awesome, but few plugins has dependency on some system package so you could do conditional load, e. g.\nif executable('ctags')\n    call pathogen#load('taglist.vim')\nendif\nOk, we can negate the condition and instead of load we can do call add(g:pathogen_disabled, 'taglist.vim'), but it's a bit hacky and I think we can't do try-catch for specific plugins.\nUnfortunately I can't code this feature and send pull request, so I hope my opinion was constructive and will help to someone who will.\nFrostyX\n. > will work just fine without Git, up till the point you explicitly invoke a command. I think plugins that don't are broken\nI totally agree with this, so I will open new issues in that plugins trackers\n\nI think the approach I assume you want (put everything you could conceivably want in submodules and then conditionally load them) is valid. I'm just not sure it's a great fit for pathogen.\n\nWhy not? I know there is a Vundle which is doing it this way, so those who wish this feature could use it, but why? I think that pathogen#infect() must go through every bundle and do exactly that, what requested pathogen#load(...) function would do. So tecnically we are talking about a little refactoring and adding some boolean g:pathogen_lazy_import variable.\nOr did you meant it in a way, that is a philosophical problem?\n. That's right, pathogen is awesomely easy to use - just one command and new bundle is installed and prepared to use. My suggestion (actually simplier now) is to keep all of this right as it is, cause it's great, and just add one function pathogen#load(...) to load specified bundle by its name.\nMost of pathogen users will keep call pathogen#infect() in their .vimrc file, but few of us will skip the infect and use load methods. Any swithich variable is not needed.\n\nSo fugitive, for example, will work just fine without Git, up till the point you explicitly invoke a command.\n\nI want to mention plugins which \"run all the time\". For example YouCompleteMe which provides code completion. This kind of plugins have no choice than print errors at the time they are loaded. When call pathogen#infect() is on the table, we can try-catch loading it, and when it fails, use alternative plugins or settings. Real use-case: YouCompleteMe fails, use supertab and jedi-vim which can almost substitute its features.\nBut of course, its your code, so your last world :-). I am just trying to suggest you, what I think it can be good.\n. Exactly. I was just trying this function but probably somehow wrong cause it didnt work for me, but now copy&paste worked. For convenience I would prefer pathogen#load('YouCompleteMe') but this is it. Thank you\n. I would prefer function for loading specific plugin rather than whitelist (or both).\nI think it would be great to have possibilty to do:\ncall pathogen#load('nerdtree')\ncall pathogen#load('YouCompleteMe')\ncall pathogen#load('vim-fugitive')\n...\nInstead of call pathogen#infect(). I mean, infect() is awesome, but few plugins has dependency on some system package so you could do conditional load, e. g.\nif executable('ctags')\n    call pathogen#load('taglist.vim')\nendif\nOk, we can negate the condition and instead of load we can do call add(g:pathogen_disabled, 'taglist.vim'), but it's a bit hacky and I think we can't do try-catch for specific plugins.\nUnfortunately I can't code this feature and send pull request, so I hope my opinion was constructive and will help to someone who will.\nFrostyX\n. > will work just fine without Git, up till the point you explicitly invoke a command. I think plugins that don't are broken\nI totally agree with this, so I will open new issues in that plugins trackers\n\nI think the approach I assume you want (put everything you could conceivably want in submodules and then conditionally load them) is valid. I'm just not sure it's a great fit for pathogen.\n\nWhy not? I know there is a Vundle which is doing it this way, so those who wish this feature could use it, but why? I think that pathogen#infect() must go through every bundle and do exactly that, what requested pathogen#load(...) function would do. So tecnically we are talking about a little refactoring and adding some boolean g:pathogen_lazy_import variable.\nOr did you meant it in a way, that is a philosophical problem?\n. That's right, pathogen is awesomely easy to use - just one command and new bundle is installed and prepared to use. My suggestion (actually simplier now) is to keep all of this right as it is, cause it's great, and just add one function pathogen#load(...) to load specified bundle by its name.\nMost of pathogen users will keep call pathogen#infect() in their .vimrc file, but few of us will skip the infect and use load methods. Any swithich variable is not needed.\n\nSo fugitive, for example, will work just fine without Git, up till the point you explicitly invoke a command.\n\nI want to mention plugins which \"run all the time\". For example YouCompleteMe which provides code completion. This kind of plugins have no choice than print errors at the time they are loaded. When call pathogen#infect() is on the table, we can try-catch loading it, and when it fails, use alternative plugins or settings. Real use-case: YouCompleteMe fails, use supertab and jedi-vim which can almost substitute its features.\nBut of course, its your code, so your last world :-). I am just trying to suggest you, what I think it can be good.\n. Exactly. I was just trying this function but probably somehow wrong cause it didnt work for me, but now copy&paste worked. For convenience I would prefer pathogen#load('YouCompleteMe') but this is it. Thank you\n. ",
    "hermeszr": "A problem I had with plugin loading is that from time to time I wanted to disable plugins, either for checking other plugins or disable something temporarily. Instead of disabling a plugin by altering my .vimrc, I preferred a file system solution which will not require me to change my .vimrc. For that purpose I've developed PathoMan, which manages enabled plugins by creating a hidden folder with \"disabled\" plugins which will not be loaded by pathogen#infect(). \nPerhaps pathoman can help you manage plugins that are loaded (That is, simply disable all plugins which you wish not to be loaded). \n. A problem I had with plugin loading is that from time to time I wanted to disable plugins, either for checking other plugins or disable something temporarily. Instead of disabling a plugin by altering my .vimrc, I preferred a file system solution which will not require me to change my .vimrc. For that purpose I've developed PathoMan, which manages enabled plugins by creating a hidden folder with \"disabled\" plugins which will not be loaded by pathogen#infect(). \nPerhaps pathoman can help you manage plugins that are loaded (That is, simply disable all plugins which you wish not to be loaded). \n. ",
    "koalaman": "Oops, sorry about that. That's what I get for using the github web interface\n. Oops, sorry about that. That's what I get for using the github web interface\n. ",
    "Cemenyave": "Thanks a lot!\n. Thanks a lot!\n. ",
    "alet": "Github seems to change its url redirecting. Original url gets 404\n. Github seems to change its url redirecting. Original url gets 404\n. ",
    "lkebin": "Okay, Thanks\n2014\u5e745\u670827\u65e5 \u4e0a\u53482:31\u4e8e \"Tim Pope\" notifications@github.com\u5199\u9053\uff1a\n\nThis has nothing to do with pathogen, just with some plugin it's loading.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/129#issuecomment-44209656\n.\n. Okay, Thanks\n2014\u5e745\u670827\u65e5 \u4e0a\u53482:31\u4e8e \"Tim Pope\" notifications@github.com\u5199\u9053\uff1a\nThis has nothing to do with pathogen, just with some plugin it's loading.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/129#issuecomment-44209656\n.\n. \n",
    "okonomiyaki3000": "I copy pasted but somehow it didn't work. I was able to get it with the above url though. \n. I copy pasted but somehow it didn't work. I was able to get it with the above url though. \n. ",
    "jrmlhermitte": "(@tpope not sure where to post this, don't want to start a new issue)\nFrom a fresh start, execute didn't seem to work for me but rather call:\npython\ncall pathogen#infect()\nI'm not sure why (maybe something broke in most recent vim version?)\nIt seems changing to call works and gives expected behaviour, but I'm ignorant of details. I just thought I would mention as feedback; maybe a mention of this issue should be mentioned in the docs?\nthanks for great plugin!. (@tpope not sure where to post this, don't want to start a new issue)\nFrom a fresh start, execute didn't seem to work for me but rather call:\npython\ncall pathogen#infect()\nI'm not sure why (maybe something broke in most recent vim version?)\nIt seems changing to call works and gives expected behaviour, but I'm ignorant of details. I just thought I would mention as feedback; maybe a mention of this issue should be mentioned in the docs?\nthanks for great plugin!. ",
    "bitwombat": "Here's that output.  I have a feeling there are a few embarrassing things in here... like that I've unzipped vim-markdown in .vim instead of .vim/autoload.\nRegardless:\n1: /usr/share/vim/vimrc\n  2: /usr/share/vim/vim73/debian.vim\n  3: /usr/share/vim/vim73/syntax/syntax.vim\n  4: /usr/share/vim/vim73/syntax/synload.vim\n  5: /usr/share/vim/vim73/syntax/syncolor.vim\n  6: /usr/share/vim/vim73/filetype.vim\n  7: ~/.vim/ftdetect/mkd.vim\n  8: ~/.vimrc\n  9: /usr/share/vim/vim73/ftplugin.vim\n 10: ~/.vim/plugin/matchit.vim\n 11: /usr/share/vim/vim73/syntax/nosyntax.vim\n 12: /usr/share/vim/vim73/colors/darkblue.vim\n 13: /data/www/uf/4_Greg/configs/vim_abbreviations.vim\n 14: ~/.vim/autoload/pathogen.vim\n 15: ~/.vim/plugin/snipMate.vim\n 16: ~/.vim/bundle/nerdtree/plugin/NERD_tree.vim\n 17: ~/.vim/bundle/nerdtree/autoload/nerdtree.vim\n 18: ~/.vim/bundle/nerdtree/lib/nerdtree/path.vim\n 19: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_controller.vim\n 20: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_item.vim\n 21: ~/.vim/bundle/nerdtree/lib/nerdtree/key_map.vim\n 22: ~/.vim/bundle/nerdtree/lib/nerdtree/bookmark.vim\n 23: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_file_node.vim\n 24: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_dir_node.vim\n 25: ~/.vim/bundle/nerdtree/lib/nerdtree/opener.vim\n 26: ~/.vim/bundle/nerdtree/lib/nerdtree/creator.vim\n 27: ~/.vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim\n 28: ~/.vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim\n 29: /usr/share/vim/vim73/plugin/getscriptPlugin.vim\n 30: /usr/share/vim/vim73/plugin/gzip.vim\n 31: /usr/share/vim/vim73/plugin/matchparen.vim\n 32: /usr/share/vim/vim73/plugin/netrwPlugin.vim\n 33: /usr/share/vim/vim73/plugin/rrhelper.vim\n 34: /usr/share/vim/vim73/plugin/spellfile.vim\n 35: /usr/share/vim/vim73/plugin/tarPlugin.vim\n 36: /usr/share/vim/vim73/plugin/tohtml.vim\n 37: /usr/share/vim/vim73/plugin/vimballPlugin.vim\n 38: /usr/share/vim/vim73/plugin/zipPlugin.vim\n 39: ~/.vim/after/plugin/snipMate.vim\n 40: /usr/share/vim/vim73/syntax/modula2.vim\n. Ah.  That's what I meant by there probably being something embarrassing in there.\nHow is vim-markdown supposed to be installed?\n. Sorry, excuse the ignorance.  Nothing in the name or readme tipped me off to that.\nIt's getting picked up now.\nThanks for the help!\n. Here's that output.  I have a feeling there are a few embarrassing things in here... like that I've unzipped vim-markdown in .vim instead of .vim/autoload.\nRegardless:\n1: /usr/share/vim/vimrc\n  2: /usr/share/vim/vim73/debian.vim\n  3: /usr/share/vim/vim73/syntax/syntax.vim\n  4: /usr/share/vim/vim73/syntax/synload.vim\n  5: /usr/share/vim/vim73/syntax/syncolor.vim\n  6: /usr/share/vim/vim73/filetype.vim\n  7: ~/.vim/ftdetect/mkd.vim\n  8: ~/.vimrc\n  9: /usr/share/vim/vim73/ftplugin.vim\n 10: ~/.vim/plugin/matchit.vim\n 11: /usr/share/vim/vim73/syntax/nosyntax.vim\n 12: /usr/share/vim/vim73/colors/darkblue.vim\n 13: /data/www/uf/4_Greg/configs/vim_abbreviations.vim\n 14: ~/.vim/autoload/pathogen.vim\n 15: ~/.vim/plugin/snipMate.vim\n 16: ~/.vim/bundle/nerdtree/plugin/NERD_tree.vim\n 17: ~/.vim/bundle/nerdtree/autoload/nerdtree.vim\n 18: ~/.vim/bundle/nerdtree/lib/nerdtree/path.vim\n 19: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_controller.vim\n 20: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_item.vim\n 21: ~/.vim/bundle/nerdtree/lib/nerdtree/key_map.vim\n 22: ~/.vim/bundle/nerdtree/lib/nerdtree/bookmark.vim\n 23: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_file_node.vim\n 24: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_dir_node.vim\n 25: ~/.vim/bundle/nerdtree/lib/nerdtree/opener.vim\n 26: ~/.vim/bundle/nerdtree/lib/nerdtree/creator.vim\n 27: ~/.vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim\n 28: ~/.vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim\n 29: /usr/share/vim/vim73/plugin/getscriptPlugin.vim\n 30: /usr/share/vim/vim73/plugin/gzip.vim\n 31: /usr/share/vim/vim73/plugin/matchparen.vim\n 32: /usr/share/vim/vim73/plugin/netrwPlugin.vim\n 33: /usr/share/vim/vim73/plugin/rrhelper.vim\n 34: /usr/share/vim/vim73/plugin/spellfile.vim\n 35: /usr/share/vim/vim73/plugin/tarPlugin.vim\n 36: /usr/share/vim/vim73/plugin/tohtml.vim\n 37: /usr/share/vim/vim73/plugin/vimballPlugin.vim\n 38: /usr/share/vim/vim73/plugin/zipPlugin.vim\n 39: ~/.vim/after/plugin/snipMate.vim\n 40: /usr/share/vim/vim73/syntax/modula2.vim\n. Ah.  That's what I meant by there probably being something embarrassing in there.\nHow is vim-markdown supposed to be installed?\n. Sorry, excuse the ignorance.  Nothing in the name or readme tipped me off to that.\nIt's getting picked up now.\nThanks for the help!\n. ",
    "bk2204": "I see this as well, except instead of a hang, I get a segfault. This only happens if there are any bundles to load; if I remove all the bundles, Vim works just fine.\n. I see this as well, except instead of a hang, I get a segfault. This only happens if there are any bundles to load; if I remove all the bundles, Vim works just fine.\n. ",
    "Spenser309": "Can confirm this bug as well.  Reset to just before this commit and it works on the default vim in RHEL5.\n. Can confirm this bug as well.  Reset to just before this commit and it works on the default vim in RHEL5.\n. ",
    "ajh17": "Hmm, actually it seems to be a GitHub issue. I can download https files from Bitbucket for instance, just fine with curl. \n. Yep, it was a problem on my end, it was an expired certificate. \nThis helped me fix it, if anyone else runs into the same problem: https://blog.digicert.com/expired-intermediate-certificate/\nThanks! Closing.\n. Hmm, actually it seems to be a GitHub issue. I can download https files from Bitbucket for instance, just fine with curl. \n. Yep, it was a problem on my end, it was an expired certificate. \nThis helped me fix it, if anyone else runs into the same problem: https://blog.digicert.com/expired-intermediate-certificate/\nThanks! Closing.\n. ",
    "antiusninja": "Hi. I'm pretty new to linux and stupid enough to not be able to setup things correctly. I just follow orders , but the curl -LSso.... command gives me\ncur:(23) Failed writing body (O!= 12476).\nCan you help me out?\n. Hi. I'm pretty new to linux and stupid enough to not be able to setup things correctly. I just follow orders , but the curl -LSso.... command gives me\ncur:(23) Failed writing body (O!= 12476).\nCan you help me out?\n. ",
    "athaeryn": "Didn't know there was a 3.0 in the works. Cool! I've removed these functions from my copy of pathogen, so I don't care if you merge this or not. It was for posterity.\n. Didn't know there was a 3.0 in the works. Cool! I've removed these functions from my copy of pathogen, so I don't care if you merge this or not. It was for posterity.\n. ",
    "mmikeww": "Given 020ab25 , this PR should probably be closed. This is so annoying. I really hate tab completing incorrectly\nThe open PR #138 in 2014 says you are waiting for v3.0 to remove these commands. But then a year later in 2015 in 84a3dd0d the :Vsplit was removed. But then the very next commit Jan 2016 b4f20ff its added back in. \nWhich also means that the pathogen README is incorrect..\n@tpope Are the :Vedit comamnds solely moved to scriptease or not?\n. Given 020ab25 , this PR should probably be closed. This is so annoying. I really hate tab completing incorrectly\nThe open PR #138 in 2014 says you are waiting for v3.0 to remove these commands. But then a year later in 2015 in 84a3dd0d the :Vsplit was removed. But then the very next commit Jan 2016 b4f20ff its added back in. \nWhich also means that the pathogen README is incorrect..\n@tpope Are the :Vedit comamnds solely moved to scriptease or not?\n. ",
    "Integralist": "Looking at the :scriptnames output it seems like maybe the .vimrc is being loaded before the pathogen file? But if that's the case I'm not sure how to resolve that so it's always loaded first?\n. @tpope so my full dotfile structure can be seen here: https://github.com/Integralist/dotfiles (technically it's the linux branch)\nSpecifically I call it here: https://github.com/Integralist/dotfiles/blob/linux/.vimrc#L119-L120\nNote: these dotfiles work fine on my Mac and it's only since loading them on a Linux machine have I noticed an issue with plugins not being loaded by Pathogen.\nThe top level tree structure can be seen below...\n.\n\u251c\u2500\u2500 .agignore\n\u251c\u2500\u2500 .bashrc\n\u251c\u2500\u2500 .gitconfig\n\u251c\u2500\u2500 .gitignore_global\n\u251c\u2500\u2500 .irssi\n\u251c\u2500\u2500 .tmux.conf\n\u251c\u2500\u2500 .vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .netrwhist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 autoload\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pathogen.vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bundle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CSApprox\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Gist.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Tabmerge\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ZoomWin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ack.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 camelcasemotion\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ctrlp.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 emmet-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gruvbox\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 html5.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nerdtree\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 rainbow_parentheses.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 supertab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 syntastic\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tabular\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 targets.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 textutil.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tomorrow-night-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-airline\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-bookmarks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-choosewin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-clojure-highlight\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-clojure-static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-colors-pencil\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-commentary\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-cucumber\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-dispatch\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-endwise\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-fireplace\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-fugitive\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-gitgutter\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-haml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-leiningen\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-localrc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-node\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-polyglot\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-repeat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-ruby\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-sexp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-sexp-mappings-for-regular-people\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-surround\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-tbone\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 webapi-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 wildfire.vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 colors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Tomorrow-Solarized.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 badwolf.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 blazer.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 flatland.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 github.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gruvbox.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kellys.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vividchalk.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 whitebox.vim\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plugin\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 BufOnly.vim\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scratch.vim\n\u251c\u2500\u2500 .vimrc\n. @tpope OK it looks like my plugins haven't been uploaded to GitHub :-/ I'm not sure why though. I need to figure out how to upload folders that are themselves git repos (e.g. they have a .git file) then that will resolve the problem I'm having. Any one have any ideas (I've tried Googling but surprisingly this doesn't come up often?)\n. @xaizek thanks for the feedback, I went with the following /cc @tpope \n\nJust to clarify for anyone else reading this thread... \n\nSo it seems the problem wasn't with Pathogen but with Git and it not committing my submodules (i.e. each plugin had a .git folder and so they were being treated as submodules of my main repository). \nApparently there is a way to work around this using a .gitmodules file but I didn't have time to investigate it further so I solved the problem using some basic Unix commands:\nfind . -type d -name '.git' | xargs rm -rf\nI then was able to commit the contents of the submodule folders.\n. Looking at the :scriptnames output it seems like maybe the .vimrc is being loaded before the pathogen file? But if that's the case I'm not sure how to resolve that so it's always loaded first?\n. @tpope so my full dotfile structure can be seen here: https://github.com/Integralist/dotfiles (technically it's the linux branch)\nSpecifically I call it here: https://github.com/Integralist/dotfiles/blob/linux/.vimrc#L119-L120\nNote: these dotfiles work fine on my Mac and it's only since loading them on a Linux machine have I noticed an issue with plugins not being loaded by Pathogen.\nThe top level tree structure can be seen below...\n.\n\u251c\u2500\u2500 .agignore\n\u251c\u2500\u2500 .bashrc\n\u251c\u2500\u2500 .gitconfig\n\u251c\u2500\u2500 .gitignore_global\n\u251c\u2500\u2500 .irssi\n\u251c\u2500\u2500 .tmux.conf\n\u251c\u2500\u2500 .vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .netrwhist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 autoload\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pathogen.vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bundle\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CSApprox\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Gist.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Tabmerge\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ZoomWin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ack.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 camelcasemotion\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ctrlp.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 emmet-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gruvbox\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 html5.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nerdtree\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 rainbow_parentheses.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 supertab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 syntastic\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tabular\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 targets.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 textutil.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tomorrow-night-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-airline\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-bookmarks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-choosewin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-clojure-highlight\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-clojure-static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-colors-pencil\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-commentary\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-cucumber\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-dispatch\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-endwise\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-fireplace\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-fugitive\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-gitgutter\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-haml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-leiningen\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-localrc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-markdown\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-node\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-polyglot\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-repeat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-ruby\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-sexp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-sexp-mappings-for-regular-people\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-surround\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vim-tbone\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 webapi-vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 wildfire.vim\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 colors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Tomorrow-Solarized.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 badwolf.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 blazer.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 flatland.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 github.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gruvbox.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kellys.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 vividchalk.vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 whitebox.vim\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plugin\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 BufOnly.vim\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scratch.vim\n\u251c\u2500\u2500 .vimrc\n. @tpope OK it looks like my plugins haven't been uploaded to GitHub :-/ I'm not sure why though. I need to figure out how to upload folders that are themselves git repos (e.g. they have a .git file) then that will resolve the problem I'm having. Any one have any ideas (I've tried Googling but surprisingly this doesn't come up often?)\n. @xaizek thanks for the feedback, I went with the following /cc @tpope \n\nJust to clarify for anyone else reading this thread... \n\nSo it seems the problem wasn't with Pathogen but with Git and it not committing my submodules (i.e. each plugin had a .git folder and so they were being treated as submodules of my main repository). \nApparently there is a way to work around this using a .gitmodules file but I didn't have time to investigate it further so I solved the problem using some basic Unix commands:\nfind . -type d -name '.git' | xargs rm -rf\nI then was able to commit the contents of the submodule folders.\n. ",
    "suy": "Odd, I've been using g:pathogen_disabled for a while instead. I've just looked at the code, and seems the \"disabled\" may be the preferred one. At least the comment before the function lead me to understand that when I started using it, I think.\n. El Thursday 06 November 2014, Gr\u00e9goire Paris escribi\u00f3:\n\n@suy : The subject line of d7be5c77 lead me to think the contrary.\n\nOh, true. My bad then, sorry.\n. In the lines above, it says \"Currently only a trailing {} is supported.\". It might be that this invocation can stop working in the future, then?\n. Odd, I've been using g:pathogen_disabled for a while instead. I've just looked at the code, and seems the \"disabled\" may be the preferred one. At least the comment before the function lead me to understand that when I started using it, I think.\n. El Thursday 06 November 2014, Gr\u00e9goire Paris escribi\u00f3:\n\n@suy : The subject line of d7be5c77 lead me to think the contrary.\n\nOh, true. My bad then, sorry.\n. In the lines above, it says \"Currently only a trailing {} is supported.\". It might be that this invocation can stop working in the future, then?\n. ",
    "greg0ire": "@suy : The subject line of d7be5c77 lead me to think the contrary.\n. ping @tpope \n. Yearly  ping @tpope \n. @suy : The subject line of d7be5c77 lead me to think the contrary.\n. ping @tpope \n. Yearly  ping @tpope \n. ",
    "tarruda": "@btipling soon there will be changes to the python plugin infrastructure, and pythonx will no longer be required, so this will no longer be a problem\n. @btipling soon there will be changes to the python plugin infrastructure, and pythonx will no longer be required, so this will no longer be a problem\n. ",
    "btipling": "Ok, thank you for the update!\n. Ok, thank you for the update!\n. ",
    "AndrewVos": "Fair enough.\nIt breaks tab completion because I type :vs<tab> to get :vsplit but instead I get Vsplit which is mildy irritating.\n. Sigh. Just realised I can type :vs to get the same.\n. I have this in my vimrc set ignorecase.\nMaybe I should remove it.\n. I don't know but I have stricken it from my vimrc forever.\n. Fair enough.\nIt breaks tab completion because I type :vs<tab> to get :vsplit but instead I get Vsplit which is mildy irritating.\n. Sigh. Just realised I can type :vs to get the same.\n. I have this in my vimrc set ignorecase.\nMaybe I should remove it.\n. I don't know but I have stricken it from my vimrc forever.\n. ",
    "callumacrae": "I forgot to run :Helptags! I'm a noob :-(\n. I forgot to run :Helptags! I'm a noob :-(\n. ",
    "jayrajput": "With -V99 option it is stuck at this line:\nfunction pathogen#infect..pathogen#interpose..pathogen#is_disabled returning #0\ncontinuing in function pathogen#infect..pathogen#interpose\nRunning strace from a different window, shows it is stuck at a lock\n[bundle]$strace -f -p 17718\nProcess 17718 attached - interrupt to quit\nfutex(0x389b5539e0, FUTEX_WAIT_PRIVATE, 2, NULL\nI will try to get a different version of vim. I do not have root privilege on the system, so I will have to compile a vim binary and put it my ~/bin to get a different version of vim for this one.\nThanks for your inputs\n. With -V99 option it is stuck at this line:\nfunction pathogen#infect..pathogen#interpose..pathogen#is_disabled returning #0\ncontinuing in function pathogen#infect..pathogen#interpose\nRunning strace from a different window, shows it is stuck at a lock\n[bundle]$strace -f -p 17718\nProcess 17718 attached - interrupt to quit\nfutex(0x389b5539e0, FUTEX_WAIT_PRIVATE, 2, NULL\nI will try to get a different version of vim. I do not have root privilege on the system, so I will have to compile a vim binary and put it my ~/bin to get a different version of vim for this one.\nThanks for your inputs\n. ",
    "ikirker": "FWIW, I can reproduce this on a Scientific Linux 5 (based on RHEL5) vim:\n$ vim --version\nVIM - Vi IMproved 7.0 (2006 May 7, compiled Sep  8 2010 13:28:24)\nIncluded patches: 1, 3-4, 7-9, 11, 13-17, 19-26, 29-31, 34-44, 47, 50-56, 58-64, 66-73, 75, 77-92, 94-107, 109, 202, 234-237\nModified by <bugzilla@redhat.com>\nCompiled by <bugzilla@redhat.com>\nHuge version without GUI.  Features included (+) or not (-):\n+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent \n-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic \n+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path \n+folding -footer +fork() +gettext -hangul_input +iconv +insert_expand +jumplist\n +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap +menu \n+mksession +modify_fname +mouse -mouseshape +mouse_dec +mouse_gpm \n-mouse_jsbterm +mouse_netterm +mouse_xterm +multi_byte +multi_lang -mzscheme \n-netbeans_intg -osfiletype +path_extra +perl +postscript +printer +profile \n+python +quickfix +reltime +rightleft -ruby +scrollbind +signs +smartindent \n-sniff +statusline -sun_workshop +syntax +tag_binary +tag_old_static \n-tag_any_white -tcl +terminfo +termresponse +textobjects +title -toolbar \n+user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace \n+wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp \n-xterm_clipboard -xterm_save \n   system vimrc file: \"/etc/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_FORTIFY_SOURCE=2    -D_REENTRANT -D_GNU_SOURCE  -Wdeclaration-after-statement -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/include/gdbm  -I/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE  -I/usr/include/python2.4 -pthread   \nLinking: gcc   -Wl,-E -Wl,-rpath,/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE   -L/usr/local/lib -o vim       -lncurses  -lselinux  -lacl -lgpm   -Wl,-E -Wl,-rpath,/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE  /usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/auto/DynaLoader/DynaLoader.a -L/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE -lperl -lresolv -lutil -lc -L/usr/lib64/python2.4/config -lpython2.4 -lutil -lm -Xlinker -export-dynamic\nI only have pathogen and vim-sensible in my ~/.vim.\nGiven that this version is kind of an antique at this point, though, I'm not exactly considering it a major issue. (I can't update this version directly, sadly, since this isn't my system.)\n. FWIW, I can reproduce this on a Scientific Linux 5 (based on RHEL5) vim:\n$ vim --version\nVIM - Vi IMproved 7.0 (2006 May 7, compiled Sep  8 2010 13:28:24)\nIncluded patches: 1, 3-4, 7-9, 11, 13-17, 19-26, 29-31, 34-44, 47, 50-56, 58-64, 66-73, 75, 77-92, 94-107, 109, 202, 234-237\nModified by <bugzilla@redhat.com>\nCompiled by <bugzilla@redhat.com>\nHuge version without GUI.  Features included (+) or not (-):\n+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent \n-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments \n+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic \n+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path \n+folding -footer +fork() +gettext -hangul_input +iconv +insert_expand +jumplist\n +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap +menu \n+mksession +modify_fname +mouse -mouseshape +mouse_dec +mouse_gpm \n-mouse_jsbterm +mouse_netterm +mouse_xterm +multi_byte +multi_lang -mzscheme \n-netbeans_intg -osfiletype +path_extra +perl +postscript +printer +profile \n+python +quickfix +reltime +rightleft -ruby +scrollbind +signs +smartindent \n-sniff +statusline -sun_workshop +syntax +tag_binary +tag_old_static \n-tag_any_white -tcl +terminfo +termresponse +textobjects +title -toolbar \n+user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace \n+wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp \n-xterm_clipboard -xterm_save \n   system vimrc file: \"/etc/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/share/vim\"\nCompilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_FORTIFY_SOURCE=2    -D_REENTRANT -D_GNU_SOURCE  -Wdeclaration-after-statement -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/include/gdbm  -I/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE  -I/usr/include/python2.4 -pthread   \nLinking: gcc   -Wl,-E -Wl,-rpath,/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE   -L/usr/local/lib -o vim       -lncurses  -lselinux  -lacl -lgpm   -Wl,-E -Wl,-rpath,/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE  /usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/auto/DynaLoader/DynaLoader.a -L/usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/CORE -lperl -lresolv -lutil -lc -L/usr/lib64/python2.4/config -lpython2.4 -lutil -lm -Xlinker -export-dynamic\nI only have pathogen and vim-sensible in my ~/.vim.\nGiven that this version is kind of an antique at this point, though, I'm not exactly considering it a major issue. (I can't update this version directly, sadly, since this isn't my system.)\n. ",
    "wzc00703": "I also meet this crash while my VIM is 7.0 and gvim is 7.1. \nWhen I start vim -V99\nit shows:\ncalling function pathogen#infect..pathogen#surround..pathogen#is_disabled..pathogen#slash()\nline 1:   return !exists(\"+shellslash\") || &shellslash ? '/' : '\\'\nfunction pathogen#infect..pathogen#surround..pathogen#is_disabled..pathogen#slash returning '/'\ncontinuing in function pathogen#infect..pathogen#surround..pathogen#is_disabled\nline 5:   let blacklist = map( get(g:, 'pathogen_blacklist', get(g:, 'pathogen_disabled', [])) + pathogen#split($VIMBLACKLIST), 'substitute(v:val, \"[\\\\/]$\", \"\", \"\")')\nBut, this is my company's system, I can not directly update the VIM.. \nCan anyone help?\n. I have worked it out now with updating the pathogen to the latest on github.\nthx\n\n\u53d1\u4ef6\u4eba: Schley notifications@github.com\n\u53d1\u9001\u65f6\u95f4: 2016\u5e7411\u67083\u65e5 10:38\n\u6536\u4ef6\u4eba: tpope/vim-pathogen\n\u6284\u9001: wzc00703; Comment\n\u4e3b\u9898: Re: [tpope/vim-pathogen] Pathogen causing vim to crash (#148)\nWZC*,\n7.0/7.1? That's kinda vintage.\nIs there a reason your organization is holding back? It may be whoever's responsible to maintain it doesn't use vim, doesn't care, and doesn't have time. Maybe also doesn't even know about vim, poor guy....\nWithout regard to the specific cause of your issue, can't you put in a ticket to your IT folks to upgrade?\nOtherwise, I refer you to #118https://github.com/tpope/vim-pathogen/issues/118.\nbon appetit! afiyet olsun!\n\u2015\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/148#issuecomment-258109457, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ASnxSVJ1Hs9_fVxEqFKb73lXxAoyQxBSks5q6bmTgaJpZM4DOJSk.\n. I also meet this crash while my VIM is 7.0 and gvim is 7.1. \nWhen I start vim -V99\nit shows:\ncalling function pathogen#infect..pathogen#surround..pathogen#is_disabled..pathogen#slash()\nline 1:   return !exists(\"+shellslash\") || &shellslash ? '/' : '\\'\nfunction pathogen#infect..pathogen#surround..pathogen#is_disabled..pathogen#slash returning '/'\ncontinuing in function pathogen#infect..pathogen#surround..pathogen#is_disabled\nline 5:   let blacklist = map( get(g:, 'pathogen_blacklist', get(g:, 'pathogen_disabled', [])) + pathogen#split($VIMBLACKLIST), 'substitute(v:val, \"[\\\\/]$\", \"\", \"\")')\nBut, this is my company's system, I can not directly update the VIM.. \nCan anyone help?\n. I have worked it out now with updating the pathogen to the latest on github.\nthx\n\n\u53d1\u4ef6\u4eba: Schley notifications@github.com\n\u53d1\u9001\u65f6\u95f4: 2016\u5e7411\u67083\u65e5 10:38\n\u6536\u4ef6\u4eba: tpope/vim-pathogen\n\u6284\u9001: wzc00703; Comment\n\u4e3b\u9898: Re: [tpope/vim-pathogen] Pathogen causing vim to crash (#148)\nWZC*,\n7.0/7.1? That's kinda vintage.\nIs there a reason your organization is holding back? It may be whoever's responsible to maintain it doesn't use vim, doesn't care, and doesn't have time. Maybe also doesn't even know about vim, poor guy....\nWithout regard to the specific cause of your issue, can't you put in a ticket to your IT folks to upgrade?\nOtherwise, I refer you to #118https://github.com/tpope/vim-pathogen/issues/118.\nbon appetit! afiyet olsun!\n\u2015\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/tpope/vim-pathogen/issues/148#issuecomment-258109457, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ASnxSVJ1Hs9_fVxEqFKb73lXxAoyQxBSks5q6bmTgaJpZM4DOJSk.\n. ",
    "Hippimuro": "Ah, that was indeed the problem.\nThanks, and sorry for bothering.\n. Ah, that was indeed the problem.\nThanks, and sorry for bothering.\n. ",
    "nafooesi": "Thanks for the quick response.   I checked, and it doesn't print anything. My .vim directory tree is the following:\n/home/bchi/.vim\n\u251c\u2500\u2500 autoload\n\u2502\u00a0\u00a0      \u2514\u2500\u2500 pathogen.vim\n\u2514\u2500\u2500 bundle\n\u2502\u00a0\u00a0      \u2514\u2500\u2500 vim-flake8\n. VIM - Vi IMproved 7.3 (2010 Aug 15, compiled May  4 2012 04:25:35)\nIncluded patches: 1-429\nModified by pkg-vim-maintainers@lists.alioth.debian.org\nCompiled by buildd@\nHuge version without GUI.  Features included (+) or not (-):\n. The error was from \"source ~/.vimrc\" under bash, but I tried\n\":source ~/.vimrc\" under vim, then \n\":echo pathogen#infect()\"\nand it shows nothing.\n. \":source ~/.vimrc\" under vim didn't make a difference.\nHow do I know if it loads pathogen?\n. Thanks for the quick response.   I checked, and it doesn't print anything. My .vim directory tree is the following:\n/home/bchi/.vim\n\u251c\u2500\u2500 autoload\n\u2502\u00a0\u00a0      \u2514\u2500\u2500 pathogen.vim\n\u2514\u2500\u2500 bundle\n\u2502\u00a0\u00a0      \u2514\u2500\u2500 vim-flake8\n. VIM - Vi IMproved 7.3 (2010 Aug 15, compiled May  4 2012 04:25:35)\nIncluded patches: 1-429\nModified by pkg-vim-maintainers@lists.alioth.debian.org\nCompiled by buildd@\nHuge version without GUI.  Features included (+) or not (-):\n. The error was from \"source ~/.vimrc\" under bash, but I tried\n\":source ~/.vimrc\" under vim, then \n\":echo pathogen#infect()\"\nand it shows nothing.\n. \":source ~/.vimrc\" under vim didn't make a difference.\nHow do I know if it loads pathogen?\n. ",
    "auscompgeek": "Why are you setting up vim to only run pathogen when you open a GUI?\nAnywho, see https://github.com/tpope/vim-pathogen/issues/114#issuecomment-31900934.\n. Why are you setting up vim to only run pathogen when you open a GUI?\nAnywho, see https://github.com/tpope/vim-pathogen/issues/114#issuecomment-31900934.\n. ",
    "Alloyed": "It would, sure. I can also think of a few contrived instances where it would break backwards compatibility, but I don't think it'd affect anybody in a serious way\n. It would, sure. I can also think of a few contrived instances where it would break backwards compatibility, but I don't think it'd affect anybody in a serious way\n. ",
    "gravyboat": "@tpope Are you still merging in changes to vim-pathogen or is it no longer supported?\n. When you say installation time do you mean installation of a plugin? Or installation of vim-pathogen? I'd just like to make it clearer as it took a visit to Stackoverflow to figure out why the Helptags weren't being loaded correctly. I see the notes here:\nNormally to generate documentation, Vim expects you to run :helptags on each directory with documentation (e.g., :helptags ~/.vim/doc). Provided with pathogen.vim is a :Helptags command that does this on every directory in your 'runtimepath'. If you really want to get crazy, you could even invoke Helptags in your vimrc. I don't like to get crazy.\nBut those don't really help new users to get up and running quickly.\n. Does :Helptags load the help docs permanently?\n. @tpope Are you still merging in changes to vim-pathogen or is it no longer supported?\n. When you say installation time do you mean installation of a plugin? Or installation of vim-pathogen? I'd just like to make it clearer as it took a visit to Stackoverflow to figure out why the Helptags weren't being loaded correctly. I see the notes here:\nNormally to generate documentation, Vim expects you to run :helptags on each directory with documentation (e.g., :helptags ~/.vim/doc). Provided with pathogen.vim is a :Helptags command that does this on every directory in your 'runtimepath'. If you really want to get crazy, you could even invoke Helptags in your vimrc. I don't like to get crazy.\nBut those don't really help new users to get up and running quickly.\n. Does :Helptags load the help docs permanently?\n. ",
    "assarbad": "Sorry for the noise. I feel stupid now :)\nYeah, that will do the job. Thanks a lot for your quick help.\n. Sorry for the noise. I feel stupid now :)\nYeah, that will do the job. Thanks a lot for your quick help.\n. ",
    "askb": "@tpope My bad, I should have opened the issue with vim-go. thanks anyways!\n. @tpope My bad, I should have opened the issue with vim-go. thanks anyways!\n. ",
    "rickbeacham": "https://github.com/fatih/vim-go/issues/191\n. https://github.com/fatih/vim-go/issues/191\n. ",
    "reynum2": "Ok I found !\nthe line \nvim\nruntime! debian.vim\nIn .vimrc refer to the file :\n/usr/share/vim/vim74/debian.vim\nwhich contains \n``` vim\n\" Debian system-wide default configuration Vim\nset runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after\n\" Normally we use vim-extensions. If you want true vi-compatibility\n\" remove change the following statements\nset nocompatible    \" Use Vim defaults instead of 100% vi compatibility\nset backspace=indent,eol,start  \" more powerful backspacing\n\" Now we set some defaults for the editor\nset history=50      \" keep 50 lines of command line history\nset ruler       \" show the cursor position all the time\n\" modelines have historically been a source of security/resource\n\" vulnerabilities -- disable by default, even when 'nocompatible' is set\nset nomodeline\n\" Suffixes that get lower priority when doing tab completion for filenames.\n\" These are files we are not likely to want to edit or read.\nset suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc\n\" We know xterm-debian is a color terminal\nif &term =~ \"xterm-debian\" || &term =~ \"xterm-xfree86\"\n  set t_Co=16\n  set t_Sf=\u001b[3%dm\n  set t_Sb=\u001b[4%dm\nendif\n\" Some Debian-specific things\nif has(\"autocmd\")\n  \" set mail filetype for reportbug's temp files\n  augroup debian\n    au BufRead reportbug-*      set ft=mail\n  augroup END\nendif\n\" Set paper size from /etc/papersize if available (Debian-specific)\nif filereadable(\"/etc/papersize\")\n  let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\\p*')\n  if strlen(s:papersize)\n    exe \"set printoptions+=paper:\" . s:papersize\n  endif\nendif\nif has('gui_running')\n  \" Make shift-insert work like in Xterm\n  map  \n  map!  \nendif\n```\nSo the line \nvim\nset runtimepath=~/...\nredefine the vim runtimepath, and in my .vimrc I put the line \nvim\nexecute pathogen#infect()\nOn the top of the file before the line \nvim\nruntime! debian.vim\nSo the runtimepath define by pathogen is erase.\nThere is two solutions :\nPut the line \nvim\nexecute pathogen#infect()\njust below the line \nvim\nruntime! debian.vim\nin the .vimrc file. Or comment the line \nvim\nset runtimepath=~/...\nin the /usr/share/vim/vim74/debian.vim file.\n. Ok I found !\nthe line \nvim\nruntime! debian.vim\nIn .vimrc refer to the file :\n/usr/share/vim/vim74/debian.vim\nwhich contains \n``` vim\n\" Debian system-wide default configuration Vim\nset runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after\n\" Normally we use vim-extensions. If you want true vi-compatibility\n\" remove change the following statements\nset nocompatible    \" Use Vim defaults instead of 100% vi compatibility\nset backspace=indent,eol,start  \" more powerful backspacing\n\" Now we set some defaults for the editor\nset history=50      \" keep 50 lines of command line history\nset ruler       \" show the cursor position all the time\n\" modelines have historically been a source of security/resource\n\" vulnerabilities -- disable by default, even when 'nocompatible' is set\nset nomodeline\n\" Suffixes that get lower priority when doing tab completion for filenames.\n\" These are files we are not likely to want to edit or read.\nset suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc\n\" We know xterm-debian is a color terminal\nif &term =~ \"xterm-debian\" || &term =~ \"xterm-xfree86\"\n  set t_Co=16\n  set t_Sf=\u001b[3%dm\n  set t_Sb=\u001b[4%dm\nendif\n\" Some Debian-specific things\nif has(\"autocmd\")\n  \" set mail filetype for reportbug's temp files\n  augroup debian\n    au BufRead reportbug-*      set ft=mail\n  augroup END\nendif\n\" Set paper size from /etc/papersize if available (Debian-specific)\nif filereadable(\"/etc/papersize\")\n  let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\\p*')\n  if strlen(s:papersize)\n    exe \"set printoptions+=paper:\" . s:papersize\n  endif\nendif\nif has('gui_running')\n  \" Make shift-insert work like in Xterm\n  map  \n  map!  \nendif\n```\nSo the line \nvim\nset runtimepath=~/...\nredefine the vim runtimepath, and in my .vimrc I put the line \nvim\nexecute pathogen#infect()\nOn the top of the file before the line \nvim\nruntime! debian.vim\nSo the runtimepath define by pathogen is erase.\nThere is two solutions :\nPut the line \nvim\nexecute pathogen#infect()\njust below the line \nvim\nruntime! debian.vim\nin the .vimrc file. Or comment the line \nvim\nset runtimepath=~/...\nin the /usr/share/vim/vim74/debian.vim file.\n. ",
    "ffledgling": "@tpope bump, anything else that needed to be done here? . @tpope squashed commits and rebased on top of the latest master. Reformatted commit message in accordance with http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html as far as I could. Please let me know if you need anything else.. @tpope bump, anything else that needed to be done here? . @tpope squashed commits and rebased on top of the latest master. Reformatted commit message in accordance with http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html as far as I could. Please let me know if you need anything else.. ",
    "yann-morin-1998": "Hi!\nOK, here's the diff:\n--- pathogen.OK 2015-12-22 18:31:51.208985272 +0100\n+++ pathogen.KO 2015-12-22 18:32:25.957468290 +0100\n@@ -6,12 +6,10 @@\n /home/ymorin/.vim/bundle/snipmate\n /home/ymorin/.vim/bundle/snippets\n /home/ymorin/.vim/bundle/tlib\n-/home/ymorin/.vim/bundle/update.me\n /home/ymorin/.vim/bundle/vim-troll-stopper\n /var/lib/vim/addons\n /usr/share/vim/vimfiles\n /usr/share/vim/vim74\n /usr/share/vim/vimfiles/after\n /var/lib/vim/addons/after\n-/home/ymorin/.vim/bundle/snipmate/after\n /home/ymorin/.vim/after\nOK, two differences:\n- update.me: this one is OK, it's a file (a hint for my auto-update script to update sub-dirs).\n- /home/ymorin/.vim/bundle/snipmate/after: this one is the culprit, I guess.\nThanks!\n. Aha! :-)\nThanks!\n. Confirmed, it's fixed.\nThanks for the quick response! :-)\n. Hi!\nOK, here's the diff:\n--- pathogen.OK 2015-12-22 18:31:51.208985272 +0100\n+++ pathogen.KO 2015-12-22 18:32:25.957468290 +0100\n@@ -6,12 +6,10 @@\n /home/ymorin/.vim/bundle/snipmate\n /home/ymorin/.vim/bundle/snippets\n /home/ymorin/.vim/bundle/tlib\n-/home/ymorin/.vim/bundle/update.me\n /home/ymorin/.vim/bundle/vim-troll-stopper\n /var/lib/vim/addons\n /usr/share/vim/vimfiles\n /usr/share/vim/vim74\n /usr/share/vim/vimfiles/after\n /var/lib/vim/addons/after\n-/home/ymorin/.vim/bundle/snipmate/after\n /home/ymorin/.vim/after\nOK, two differences:\n- update.me: this one is OK, it's a file (a hint for my auto-update script to update sub-dirs).\n- /home/ymorin/.vim/bundle/snipmate/after: this one is the culprit, I guess.\nThanks!\n. Aha! :-)\nThanks!\n. Confirmed, it's fixed.\nThanks for the quick response! :-)\n. ",
    "trkrameshkumar": "@tpope\nSoon after i got this error, i was trying to visit this url ''https://tpo.pe/pathogen.vim'' on browser it was opening at that time too, but even then got this error curl: (7) Failed to connect to tpo.pe port 443: Network is unreachablethat was the reason why i replaced this url ''https://tpo.pe/pathogen.vim'' with github raw code url  to install vim-pathogen\n. Anyway now i tried to reinstall vim-pathogen with short url , it is installing without any issue, Thanks for your reply\n. @tpope\nSoon after i got this error, i was trying to visit this url ''https://tpo.pe/pathogen.vim'' on browser it was opening at that time too, but even then got this error curl: (7) Failed to connect to tpo.pe port 443: Network is unreachablethat was the reason why i replaced this url ''https://tpo.pe/pathogen.vim'' with github raw code url  to install vim-pathogen\n. Anyway now i tried to reinstall vim-pathogen with short url , it is installing without any issue, Thanks for your reply\n. ",
    "Gankarloo": "Did you put your plugins under ~/vim/bundle/\nOn Jan 13, 2016 18:30, \"zwhitchcox\" notifications@github.com wrote:\n\nI used the script\nmkdir -p ~/vim/autoload ~/vim/bundle && \\\ncurl -LSso ~/vim/autoload/pathogenvim https://tpope/pathogenvim\nand added execute pathogen#infect() to my vimrc, but it still is not\nloading plugins\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169.\n. Do you have both ~/.vim and ~/vim\nYou said you installed into ~/vim\nOn Jan 13, 2016 18:34, \"zwhitchcox\" notifications@github.com wrote:\nI put them under ~/.vim/bundle/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169#issuecomment-171373520.\n. Indeed the . got lost somewhere between github and gmail.\nOn Jan 13, 2016 18:44, \"zwhitchcox\" notifications@github.com wrote:\nThat is incorrect. I believe the client you are using is removing the dot\nfrom the file path.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169#issuecomment-171376343.\n. Did you put your plugins under ~/vim/bundle/\nOn Jan 13, 2016 18:30, \"zwhitchcox\" notifications@github.com wrote:\nI used the script\nmkdir -p ~/vim/autoload ~/vim/bundle && \\\ncurl -LSso ~/vim/autoload/pathogenvim https://tpope/pathogenvim\nand added execute pathogen#infect() to my vimrc, but it still is not\nloading plugins\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169.\n. Do you have both ~/.vim and ~/vim\nYou said you installed into ~/vim\nOn Jan 13, 2016 18:34, \"zwhitchcox\" notifications@github.com wrote:\nI put them under ~/.vim/bundle/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169#issuecomment-171373520.\n. Indeed the . got lost somewhere between github and gmail.\nOn Jan 13, 2016 18:44, \"zwhitchcox\" notifications@github.com wrote:\nThat is incorrect. I believe the client you are using is removing the dot\nfrom the file path.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/169#issuecomment-171376343.\n. \n",
    "zwhitchcox": "I put them under ~/.vim/bundle/\n. No, I only installed pathogen to .vim. I added execute pathogen#infect() to .vimrc. I just used the script in the README: \nmkdir -p ~/.vim/autoload ~/.vim/bundle && \\\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n. That is incorrect. I believe the client you are using is removing the dot from the file path.\n. from :set runtimepath\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim\n/vimfiles/after,~/.vim/after\n. fixed: was using vi instead of vim\n. vimrc:\nvim\n  2 let vimDir = $HOME.'.vimfiles'\n  3 let &runtimepath.=','.vimDir\n  4 \" Nerd Tree\n  5 execute pathogen#infect($HOME.\".vimfiles\\\\bundle\")\n  6\n. fixed it...problem with pathogen...had to change name of directory from .vim to .vimfiles and had to change the vim runtime directory like so:\nvim\nlet vimDir = $HOME.'\\\\.vimfiles'\nlet &runtimepath.=','.vimDir\n. I put them under ~/.vim/bundle/\n. No, I only installed pathogen to .vim. I added execute pathogen#infect() to .vimrc. I just used the script in the README: \nmkdir -p ~/.vim/autoload ~/.vim/bundle && \\\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n. That is incorrect. I believe the client you are using is removing the dot from the file path.\n. from :set runtimepath\nruntimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim\n/vimfiles/after,~/.vim/after\n. fixed: was using vi instead of vim\n. vimrc:\nvim\n  2 let vimDir = $HOME.'.vimfiles'\n  3 let &runtimepath.=','.vimDir\n  4 \" Nerd Tree\n  5 execute pathogen#infect($HOME.\".vimfiles\\\\bundle\")\n  6\n. fixed it...problem with pathogen...had to change name of directory from .vim to .vimfiles and had to change the vim runtime directory like so:\nvim\nlet vimDir = $HOME.'\\\\.vimfiles'\nlet &runtimepath.=','.vimDir\n. ",
    "Simbaclaws": "Thank you that seem to have fixed it :) I basically copied my vimrc from system and edited it from there so I forgot to remove it.\n. Thank you that seem to have fixed it :) I basically copied my vimrc from system and edited it from there so I forgot to remove it.\n. ",
    "gfontenot": "ugh god damn it wrong repo I'm an idiot.\n. ugh god damn it wrong repo I'm an idiot.\n. ",
    "pinggit": "is there a way to resolve/workaround this issue?\n. is there a way to resolve/workaround this issue?\n. ",
    "MinimaxHeadroom": "\nI don't use the triple backslash notation because it's nonstandard and looks weird if you're reading the README directly. I might cave on real code examples for the syntax highlighting, but I see extremely limited value in highlighting a curl command, for example.\n\nI understand.\n\nI favor \"vimrc\" over .vimrc because on Windows the file is often named _vimrc. My terminology is closer to that used within Vim's own help.\n\nSo to be clear, you also see no need to enclose \"vimrc\" in backticks either, right?\n\nMost of the other changes (in particular the comma fiddling) seem pretty arbitrary. Any you care to defend?\n\nYes, in particular this modified line which answers the first question in the FAQ. I feel it more clearly accords with the path shown in the vimrc config line immediately following it, i.e., runtime bundle/vim-pathogen/autoload/pathogen.vim.\nFurther, I'm hoping you'll allow the merging of the two mkdir commands under Installation. It makes the overall install command a touch more compact.\nIf you agree with the above two changes, I'll make any further tweaks that you need and otherwise revert all else before re-committing.\n. @tpope just checking in. Hoping you'll find the above satisfactory.\n. > I don't use the triple backslash notation because it's nonstandard and looks weird if you're reading the README directly. I might cave on real code examples for the syntax highlighting, but I see extremely limited value in highlighting a curl command, for example.\nI understand.\n\nI favor \"vimrc\" over .vimrc because on Windows the file is often named _vimrc. My terminology is closer to that used within Vim's own help.\n\nSo to be clear, you also see no need to enclose \"vimrc\" in backticks either, right?\n\nMost of the other changes (in particular the comma fiddling) seem pretty arbitrary. Any you care to defend?\n\nYes, in particular this modified line which answers the first question in the FAQ. I feel it more clearly accords with the path shown in the vimrc config line immediately following it, i.e., runtime bundle/vim-pathogen/autoload/pathogen.vim.\nFurther, I'm hoping you'll allow the merging of the two mkdir commands under Installation. It makes the overall install command a touch more compact.\nIf you agree with the above two changes, I'll make any further tweaks that you need and otherwise revert all else before re-committing.\n. @tpope just checking in. Hoping you'll find the above satisfactory.\n. ",
    "solderjs": "For those of us that need a little hand-holding: ~/.vim/ becomes /usr/share/vim/vimfiles/\n```\nmkdir -p /usr/share/vim/vimfiles/autoload /usr/share/vim/vimfiles/bundle && \\\ncurl -LSso /usr/share/vim/vimfiles/autoload/pathogen.vim https://tpo.pe/pathogen.vim\npushd /usr/share/vim/vimfiles/bundle\ngit clone git://github.com/tpope/vim-sensible.git\ngit clone https://github.com/scrooloose/syntastic.git\npopd\n``. For those of us that need a little hand-holding:~/.vim/becomes/usr/share/vim/vimfiles/`\n```\nmkdir -p /usr/share/vim/vimfiles/autoload /usr/share/vim/vimfiles/bundle && \\\ncurl -LSso /usr/share/vim/vimfiles/autoload/pathogen.vim https://tpo.pe/pathogen.vim\npushd /usr/share/vim/vimfiles/bundle\ngit clone git://github.com/tpope/vim-sensible.git\ngit clone https://github.com/scrooloose/syntastic.git\npopd\n```. ",
    "proggga": "I'm sorry, found that 'filetype plugin ident on', break it, but idk what this command do for pathogen\n. Now I clear understand, it was 'jedi-python', how it destroy code, idk\n. I'm sorry, found that 'filetype plugin ident on', break it, but idk what this command do for pathogen\n. Now I clear understand, it was 'jedi-python', how it destroy code, idk\n. ",
    "Rycieos": "I assumed that it was a default option, but after a search I discovered that it was the ignorecase option.\nIt seems weird to me that this applies to commands, but since the smartcase options does not seem to, I will use that instead. This does fix this problem for me, so unless you wanted to remove the warning commands, I will close the issue. Thanks for pointing it out.\n. That would explain why it made the issue go away. I'll reopen this then, since having lazy search is extremely handy. Does anyone know why it is applying to command tab completion instead of just a search?\n. That is a handy feature, I use vim-fugitive as well, and did not know that that was possible with ignorecase. I will leave it on for now, since the benefits outweigh the drawbacks.\nI have removed the commands mentioned in this issue from my version of pathogen (Rycieos/vim-pathogen@90220d5e144ceee1b5d83a64703bdd120efe6968), which fixes the problem for me. I will leave it up to @tpope to resolve or close this issue.\nAs for the setting having weird reaching effects, I agree. I have created vim/vim#991 on this topic.\n. I agree with @mmikeww, I think that if @tpope took a look at those 2 commits, he would agree with us and revert the revert.. I assumed that it was a default option, but after a search I discovered that it was the ignorecase option.\nIt seems weird to me that this applies to commands, but since the smartcase options does not seem to, I will use that instead. This does fix this problem for me, so unless you wanted to remove the warning commands, I will close the issue. Thanks for pointing it out.\n. That would explain why it made the issue go away. I'll reopen this then, since having lazy search is extremely handy. Does anyone know why it is applying to command tab completion instead of just a search?\n. That is a handy feature, I use vim-fugitive as well, and did not know that that was possible with ignorecase. I will leave it on for now, since the benefits outweigh the drawbacks.\nI have removed the commands mentioned in this issue from my version of pathogen (Rycieos/vim-pathogen@90220d5e144ceee1b5d83a64703bdd120efe6968), which fixes the problem for me. I will leave it up to @tpope to resolve or close this issue.\nAs for the setting having weird reaching effects, I agree. I have created vim/vim#991 on this topic.\n. I agree with @mmikeww, I think that if @tpope took a look at those 2 commits, he would agree with us and revert the revert.. ",
    "ypid": "\nIt's actually been on my todo list to replace all my URLs with a hosting agnostic redirect.\n\nSounds good. In that case you could maybe even completely self host the mirror instead of redirecting?\n. > It's actually been on my todo list to replace all my URLs with a hosting agnostic redirect.\nSounds good. In that case you could maybe even completely self host the mirror instead of redirecting?\n. ",
    "vitaly-zdanevich": "sorry, I do not know why but directory with my plugin was empty.\n. It is possible to move ~/.vim to any other place?. sorry, I do not know why but directory with my plugin was empty.\n. It is possible to move ~/.vim to any other place?. ",
    "d5ve": "https://tpo.pe/pathogen.vim is timing out for me now too.\nIs it worth updating the instructions to point to https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim ?\nCheers,\nDave. https://tpo.pe/pathogen.vim is timing out for me now too.\nIs it worth updating the instructions to point to https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim ?\nCheers,\nDave. ",
    "scottwhudson": "I just wrote a shell script to automate my vim installation and I ran into this error as well using the default file configuration. Is there another step I'm overlooking here?\ninstall.sh\n```\necho 'cloning pathogen'\ngit clone https://github.com/tpope/vim-pathogen.git ~/.vim/autoload/pathogen.vim\necho 'cloning ctrl-p'\ngit clone https://github.com/ctrlpvim/ctrlp.vim.git ~/.vim/bundle/ctrlp.vim\necho 'cloning nerdtree'\ngit clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree\n```\n.vimrc snippet\nexecute pathogen#infect()\nset nocompatible\nsyntax on\nfiletype plugin indent on\nset ts=2 sts=2 sw=2 expandtab\nerror message\nError detected while processing /Users/swh_personal/.vimrc:\nline    1:\nE117: Unknown function: pathogen#infect\nE15: Invalid expression: pathogen#infect()\nPress ENTER or type command to continue. Ah, duh... Thanks.. I just wrote a shell script to automate my vim installation and I ran into this error as well using the default file configuration. Is there another step I'm overlooking here?\ninstall.sh\n```\necho 'cloning pathogen'\ngit clone https://github.com/tpope/vim-pathogen.git ~/.vim/autoload/pathogen.vim\necho 'cloning ctrl-p'\ngit clone https://github.com/ctrlpvim/ctrlp.vim.git ~/.vim/bundle/ctrlp.vim\necho 'cloning nerdtree'\ngit clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree\n```\n.vimrc snippet\nexecute pathogen#infect()\nset nocompatible\nsyntax on\nfiletype plugin indent on\nset ts=2 sts=2 sw=2 expandtab\nerror message\nError detected while processing /Users/swh_personal/.vimrc:\nline    1:\nE117: Unknown function: pathogen#infect\nE15: Invalid expression: pathogen#infect()\nPress ENTER or type command to continue. Ah, duh... Thanks.. ",
    "ikouchiha47": "https://github.com/argentum47/vim-rust-ide/\nMy ^ setup works with vim not with neovim. What am I missing. I get the same Unknow function pathogen#infect error. also I updated the version of pathogen in my autoload.. https://github.com/argentum47/vim-rust-ide/\nMy ^ setup works with vim not with neovim. What am I missing. I get the same Unknow function pathogen#infect error. also I updated the version of pathogen in my autoload.. ",
    "shmcgrath": "This is from the FAQ in the README:\nCan I put pathogen.vim in a submodule like all my other plugins?\nSure, stick it under ~/.vim/bundle, and prepend the following to your vimrc:\nruntime bundle/vim-pathogen/autoload/pathogen.vim\nI have my Pathogen set up this way. I manage it with all the rest of the submodules. In your case, replace ~/.vim with /vimfiles.. This is from the FAQ in the README:\nCan I put pathogen.vim in a submodule like all my other plugins?\nSure, stick it under ~/.vim/bundle, and prepend the following to your vimrc:\nruntime bundle/vim-pathogen/autoload/pathogen.vim\nI have my Pathogen set up this way. I manage it with all the rest of the submodules. In your case, replace ~/.vim with /vimfiles.. ",
    "mskadu": "Sounds like a good idea. Thanks!\n--\nMayuresh\nOn 8 Mar 2017 6:36 pm, \"Tim Pope\" notifications@github.com wrote:\n\nYep!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/185#issuecomment-285127666,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABbBNy8nOzefuoyisfHv3xpFp4we1qyks5rjvUWgaJpZM4MWrYS\n.\n. Sounds like a good idea. Thanks!\n\n--\nMayuresh\nOn 8 Mar 2017 6:36 pm, \"Tim Pope\" notifications@github.com wrote:\n\nYep!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/185#issuecomment-285127666,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABbBNy8nOzefuoyisfHv3xpFp4we1qyks5rjvUWgaJpZM4MWrYS\n.\n. \n",
    "frioux": "Thanks.\n-- \nSent from a telephone. Pardon my brevity.\nOn May 20, 2017 9:25 AM, \"Tim Pope\" notifications@github.com wrote:\n\nClosed #187 https://github.com/tpope/vim-pathogen/issues/187.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/187#event-1090585267, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAf4_qi0Zc3RH_wEJDjJGc85qCFbIfsks5r7xQAgaJpZM4NhUDc\n.\n. Thanks.\n\n-- \nSent from a telephone. Pardon my brevity.\nOn May 20, 2017 9:25 AM, \"Tim Pope\" notifications@github.com wrote:\n\nClosed #187 https://github.com/tpope/vim-pathogen/issues/187.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tpope/vim-pathogen/issues/187#event-1090585267, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAf4_qi0Zc3RH_wEJDjJGc85qCFbIfsks5r7xQAgaJpZM4NhUDc\n.\n. \n",
    "ORESoftware": "wxyz. wxyz. "
}