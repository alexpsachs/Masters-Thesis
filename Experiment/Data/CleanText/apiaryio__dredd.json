{
    "coveralls": "\nCoverage decreased (-3.98%) when pulling e2aa37ebad0cdf0b4a40400273085d26b1e3734a on v0.1 into 54896800186fbfeb6e8d97d568a59bacb19fe0ce on master.\n. \nCoverage remained the same when pulling 7c5b53c8e4bb6ea8368fb2f441d13899f678a152 on localmed:xunit-reporting into 0585416da881f480d1d36ebef7b3390184549dbc on apiaryio:master.\n. \nCoverage decreased (-12.63%) when pulling 2ec0af68b92ef6cac0ed6840d63ce5abeedba72d on localmed:xunit-reporting into 0585416da881f480d1d36ebef7b3390184549dbc on apiaryio:master.\n. \nCoverage increased (+2.95%) when pulling b148206a9de24421d087606d409d6bc3d7ce68d2 on localmed:xunit-reporting into 0585416da881f480d1d36ebef7b3390184549dbc on apiaryio:master.\n. \nCoverage remained the same when pulling cf17fcebecc1b775f2cd13e995be68ed49a5e222 on localmed:allow-auth-headers into e22c4b0d0b27e7423679818479feb1e5f9f1cba4 on apiaryio:master.\n. \nCoverage remained the same when pulling 1bcaade0d49740dd73d5352d3ee9cb4d5fc904ad on localmed:allow-auth-headers into e22c4b0d0b27e7423679818479feb1e5f9f1cba4 on apiaryio:master.\n. \nCoverage remained the same when pulling 1bcaade0d49740dd73d5352d3ee9cb4d5fc904ad on localmed:allow-auth-headers into e22c4b0d0b27e7423679818479feb1e5f9f1cba4 on apiaryio:master.\n. \nCoverage remained the same when pulling 50815cc31ec88b52d883fca2a58ae89b1a0e7977 on localmed:allow-auth-headers into e22c4b0d0b27e7423679818479feb1e5f9f1cba4 on apiaryio:master.\n. \nCoverage remained the same when pulling bda6b2701816cc82e3ab5726e34ca636bd753a3c on theodorton:implicit-content-length into 517d7ef1073aa296f9ae61c22382137d9e4b087c on apiaryio:master.\n. \nCoverage remained the same when pulling 42ac53431a6c27de74ad6a91ae5c4a399562100e on fix-10 into 517d7ef1073aa296f9ae61c22382137d9e4b087c on master.\n. \nCoverage remained the same when pulling 19872556bec8777bde7c365f872b9d28b951bfa1 on localmed:js-api-docs into 2a70bfa1c3ac5c5d38677a9f665b9ebbb88b041d on apiaryio:master.\n. \nCoverage remained the same when pulling faa1b8f376c8e363360bbd8103291fdb9b11b3d6 on content-length into 2a70bfa1c3ac5c5d38677a9f665b9ebbb88b041d on master.\n. \nChanges Unknown when pulling f794a9de2fa43abf1b4356340cccc6499073e25d on netmilk/cli-pre-runtime-errors-fix into * on master*.\n. \nCoverage remained the same when pulling a1e582c7eb30b5b5038eff740ee2b22d68b075c5 on namuol:patch-1 into 2c1f0d7b42d86a5da3338261c0242582ac316615 on apiaryio:master.\n. \nCoverage remained the same when pulling a8c1b64b2c3fcb62354a7b948ec0f9d5d202e268 on cmdrkeene:master into 2c1f0d7b42d86a5da3338261c0242582ac316615 on apiaryio:master.\n. \nCoverage decreased (-2.54%) when pulling 768f5ea190a0e1ef073fee2842d8cec0a0aa97ec on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage decreased (-2.54%) when pulling fec7ae299a7106f9cfb823ecaeee4d96beb09584 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage decreased (-1.22%) when pulling 3afc40b8c8a262e4a4968ad388f63d76b685453b on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage decreased (-1.22%) when pulling 044ef35a9eb8c61a291d862d61f4ab70f28d245f on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage remained the same when pulling e95fba295d10c91dd45806ed59de9597ea451997 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage remained the same when pulling 7037c1555f5128bbae2a5420d13ba6207ff11a96 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage remained the same when pulling 23bb4eb81083cff10fe46accd820c64622b389f8 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage remained the same when pulling c78e0f846b78511f17429fd307a8a0d1955a9d72 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage decreased (-0.77%) when pulling 1efdc85299c4cbead5fea1e10de3e9d1734ea140 on localmed:event-reporters into 8adbe924a8fbea035a73267e78f2c21ab8ec562f on apiaryio:master.\n. \nCoverage remained the same when pulling 3209b4e85f5fcb11f007dcccc3433899f3a83963 on localmed:master into 1efdc85299c4cbead5fea1e10de3e9d1734ea140 on apiaryio:master.\n. \nCoverage remained the same when pulling 3209b4e85f5fcb11f007dcccc3433899f3a83963 on localmed:master into 1efdc85299c4cbead5fea1e10de3e9d1734ea140 on apiaryio:master.\n. \nCoverage remained the same when pulling c0be9add803b4133dcaac9c93ef5793770709f84 on zdne/fix-dredd-gavel-interface into badcc899a79063328ab224a9de8c24c50c9ff47a on master.\n. \nCoverage remained the same when pulling 132eca1be2163c2ce52baf746c8ff837ee2d25c5 on zdne/fix-dredd-gavel-interface into badcc899a79063328ab224a9de8c24c50c9ff47a on master.\n. \nCoverage remained the same when pulling 781e9ce1aa0832ef4104a9615d2b049452b62b3c on localmed:friendly-files into cef670fa5c50b3d9ffb3cc7e629ba4b906501706 on apiaryio:master.\n. \nCoverage decreased (-1.68%) when pulling f08f080ff267300093a8e00a2baadfed7d892d43 on netmilk/new-rest-reporter into 6cedbc7e711d3bcbaa56aaeca356f9cb5f1ce702 on master.\n. \nCoverage decreased (-0.1%) when pulling 553cd88df1d80fd271d4fc75749d2d8434da6b5e on netmilk/new-rest-reporter into dc86f2bdc425d03887aa454508c79178a16fa03e on master.\n. \nCoverage increased (+0.1%) when pulling 6baaee3b7082dc0f635df2ba7657b90ab610444d on netmilk/update-gavel into 210e7a8edf9600446e7229f11a92d947e816972c on master.\n. \nCoverage increased (+0.02%) when pulling 6aa2827b669a5e610246b4cdb2eb2f763689f826 on netmilk/protagonist-update into e0bb039880e175395e034de4b9cd78a8ddd7341b on master.\n. \nCoverage remained the same when pulling e5968b02ae4e80868fa5493df8cce093d68eb952 on netmilk/udpate-dependencies into fce31e7572f8442353fc7d8d5fcf8e740eaa46a5 on master.\n. \nCoverage decreased (-0.1%) when pulling 7dbc750879771a23808555db0e89e2d796293101 on netmilk/documentation into 759e203bffbeec3cf79c0ed1ddde2c7c631c7f9d on master.\n. \nCoverage decreased (-0.23%) when pulling 62924efa99495b5d8d87759949fc1807e2a11dda on localmed:test-errors-skips into d7355ce994aa820369f2957cfb957e4869ff5962 on apiaryio:master.\n. \nCoverage remained the same when pulling cd23be03dd43cd52e21a487b5b7c1a7dd368347b on frio:patch-1 into 814823d116490ca5b1814b6511b3227886a3a5f3 on apiaryio:master.\n. \nCoverage increased (+0.05%) when pulling d3f8baaf125213f710b3460604c53a2e554944bb on HBOCodeLabs:master into 814823d116490ca5b1814b6511b3227886a3a5f3 on apiaryio:master.\n. \nCoverage decreased (-0.05%) when pulling cccb71c292603f4ebaca022f8667d3ab86d40d32 on HBOCodeLabs:master into 814823d116490ca5b1814b6511b3227886a3a5f3 on apiaryio:master.\n. \nChanges Unknown when pulling da262a6b99124863a01f216a4bd669b5efff29da on netmilk/deps-update into * on master*.\n. \nCoverage decreased (-0.07%) when pulling 3e1f78a2ffb9fc9402777de52380777a46d9b293 on rikardq:master into 9dec2cc9e307dda8cd6fbf79ab52dbd8c521ed9c on apiaryio:master.\n. \nCoverage decreased (-0.07%) when pulling 4e3a6ce368ef6d155e7815342028b87be6b0951b on rikardq:master into 9dec2cc9e307dda8cd6fbf79ab52dbd8c521ed9c on apiaryio:master.\n. \nCoverage decreased (-0.09%) when pulling 86b054fd5709aeeee80f1357c8d9146e84ddbf57 on netmilk/readme-update into 9dec2cc9e307dda8cd6fbf79ab52dbd8c521ed9c on master.\n. \nCoverage decreased (-0.09%) when pulling 56550cd503bd795e6335dc82c212b6332d53d5dd on netmilk/readme-update into 9dec2cc9e307dda8cd6fbf79ab52dbd8c521ed9c on master.\n. \nCoverage decreased (-0.09%) when pulling cec7c92993be0df31ebf73de7588f09e0a69124d on netmilk/fix-119 into 9dec2cc9e307dda8cd6fbf79ab52dbd8c521ed9c on master.\n. \nCoverage increased (+0.1%) when pulling 384e1928e3472c263087a24c3bb76671a183cd8e on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.1%) when pulling e6445174b325dcd935ef59c0b7aca73dd75669f8 on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.1%) when pulling 34098d878665f38e5f009690d132f491af72051f on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.1%) when pulling 67d145c6a7d212d463b8b14a17d97972490e17d0 on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.1%) when pulling 5c96ca7b8d804dd066ffcdcb4dc5f019453ea73b on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.1%) when pulling f974fab266953a09e696635787739a2f72dd488d on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage increased (+0.14%) when pulling 655454b8533ba8b803c7e9d6bad8ba9cae2c09b6 on netmilk/multi-blueprint into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage decreased (-0.09%) when pulling 31ef4e283c67435dd912f7abf7b0c11c90602d8f on netmilk/fix-124 into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage decreased (-0.26%) when pulling f596889dbc80f48548d8dfc767006f6ee39f995a on netmilk/fix-105 into 5206e9cb6905ffb1c286b2028812b1bd3a5e1fbc on master.\n. \nCoverage remained the same when pulling 13e264b9afc8eedbdc072df76a4f473f96241f3a on abtris/travis-notification-fix into 71114de76d5c8947c394c664fd6c6b0bbb97dbdf on master.\n. \nCoverage increased (+0.01%) to 95.54% when pulling 6d9c58dacbe5fa5a5c03515acf3a4634c962898f on netmilk/js-api-backward-compatibility into 182cc92e9e98783315d84794b8091979ee1e3c74 on master.\n. \nCoverage decreased (-0.14%) to 95.4% when pulling f7230278f381e7e428c925e0e59a48a932d52833 on netmilk/anonymous-apiary-reporter into 3bba00e0dcbdc8d7173dc471ff75a2ff56a8f005 on master.\n. \nCoverage decreased (-0.14%) to 95.4% when pulling 2d4de996432770d923f1b93f1424720ac28b74d0 on netmilk/anonymous-apiary-reporter into 3bba00e0dcbdc8d7173dc471ff75a2ff56a8f005 on master.\n. \nCoverage decreased (-0.05%) to 95.49% when pulling f008c0e2aa11cee5d4d5c2c2741473206c13f477 on netmilk/anonymous-apiary-reporter into 3bba00e0dcbdc8d7173dc471ff75a2ff56a8f005 on master.\n. \nCoverage decreased (-0.05%) to 95.49% when pulling 5d2aac4bb84e78dee1bad5d9afdd59e968337423 on netmilk/anonymous-apiary-reporter into 3bba00e0dcbdc8d7173dc471ff75a2ff56a8f005 on master.\n. \nCoverage decreased (-0.05%) to 95.49% when pulling 6a830d5b1b7612ee394d7f46b0ddb39c68cfbafd on netmilk/anonymous-apiary-reporter into 3bba00e0dcbdc8d7173dc471ff75a2ff56a8f005 on master.\n. \nCoverage remained the same at 95.49% when pulling e2057ca9add66cd7a0837b4fa217955bcf5062b1 on kubula/bump-deps into 82299db5eab625fbafda67658bb4e44b5bce88b0 on master.\n. \nCoverage increased (+0.25%) to 95.74% when pulling 12a6e34f123422e86e42426735d1e992cbe2f055 on kubula/transaction-runner_send_along_all_gavel_results into a11765b14315bf50db0f10f438125cbdc3c3e5fb on master.\n. \nCoverage decreased (-0.0%) to 95.49% when pulling cb0b1286aa47bff57c3ed1c5fea734dbf6119a09 on netmilk/eradicate-marked into 3363f10334eb42397e5dac00805b3f582d9e6271 on master.\n. \nChanges Unknown when pulling 82330393284d29aa73a23120b6d9b4036bff1a45 on kubula/update_hipchat_notification into * on master*.\n. \nCoverage remained the same at 95.74% when pulling 967c744296d9cc594534170aa2f15665cce92299 on kubula/v0.4.4 into 2dce1dcd22a30a9b46219daaa77b45327b84efa3 on master.\n. \nCoverage decreased (-0.84%) to 94.95% when pulling 06c7699588ce109ec24d6a80773f0aea477099ad on kubula/source_files_at_results into 85463fd51e7f989d41f2378d551c01e7ffbc0899 on master.\n. \nCoverage decreased (-0.84%) to 94.95% when pulling 0787bfec837f3c75b82130ca28c23767ba077cf9 on kubula/source_files_at_results into 85463fd51e7f989d41f2378d551c01e7ffbc0899 on master.\n. \nCoverage decreased (-0.84%) to 94.95% when pulling 8fb977b69dcf1fc69ef5fec782994780a5220c5d on kubula/source_files_at_results into 85463fd51e7f989d41f2378d551c01e7ffbc0899 on master.\n. \nCoverage remained the same at 94.95% when pulling 38bcab69d9a3e7f12ed992244d6c7aec7fdcee16 on gitter-badger:gitter-badge into 967d6087f8bf661516a5fc837b835abd85c0a4bd on apiaryio:master.\n. \nCoverage increased (+0.83%) to 95.77% when pulling daf7d253e821f73bad46c83148d0487de4dbe8fe on kubula/source_files_at_results into 967d6087f8bf661516a5fc837b835abd85c0a4bd on master.\n. \nCoverage increased (+0.03%) to 95.81% when pulling c373e79d58c3b764def8acbf7ec1df64f690725f on netmilk/multipart into fe6f186fdf590d2ec4a251fb47291417790a1ee1 on master.\n. \nChanges Unknown when pulling 7b76e6933ec92479332606e5c7019544ca677d68 on kubula/coffeelint into * on master*.\n. \nChanges Unknown when pulling ef1e110579eeabb1925c0013f085fb0241c75fc0 on kubula/coffeelint into * on master*.\n. \nChanges Unknown when pulling a6011d04e8fbac3377b31ce56570616fa291293f on kubula/update_deps into * on master*.\n. ",
    "Almad": "I say you should call process.exit in callback handlers, not directly inside function. This way, functions are completely unresuable.\nAlso, you are not calling callbacks with (err | null) as first argument, breaking important node convention. \n. Also, please leave newlines at the end of your files. \n. I am basically adding +1 for all suggested refactorings. \n. This feels bad. Node should automatically add Transfer-Encoding: chunked to the request headers and stream properly...am I getting it right that Rails cannot handle chunked encoding?\n. Fixed in #31 \n. Question is whether this shouldn't be pattern\u2014when logging with fatal and err instance of Error, maybe use console.trace always? Thoughts? @netmilk \n. error.stack printed on error with #31 \n. This is definitely a limitation we'd like to overcome. \n. Fixed in #31 \n. Hi Erik,\ncould you please post full log of npm install dredd and information about your node environment? \nThanks,\nLukas\n. Wow, thanks for the patch! Will take a while to digest, but we'll provide feedback soon. \n. Sorry about the delay. Going into it right now. \n. Thanks again for the patch and sorry for the longer review and delays, it's quite a few lines to work through ;)\nI like the overall approach however and I things most of those are small issues. I need to go AFK now, but I'll merge it in the evening. \n. @ecordell Testa are not passing for node 0.8...\n. We aim for 0.8+: lots of people (including us) are still stuck with it because of Stream2 incompatibility introduced in 0.10 :/\n1. 1. 2014 v 0:36, Evan Cordell notifications@github.com:\n\n@zdne That sounds great! Can't wait to see that trickle through all of the projects.\n@Almad It looks like EventEmitter 0.8 doesn't have the listenerCount method. I didn't know there was a specific version of node that was being targeted?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!\n\nFinally merged. I'll leave it in master for a few days and issue a release after that. \n. (I'll go through other issues later as I'll verify them one by one, just to be sure)\n. @zdne I agree it might be misleading, but IMO it's more useful than the current solution. \nIf this PR will be fixed, I'd be for merging. It will be deprecated by proper scenarios/background from api blueprint, but will make dredd more useful until then. \n. Ack, thanks! \n. It isn't. Thanks, we'll retag. \n. That said, we are still going to look into it in gavel. \n. Hi,\ndo you use rvm or system ruby? What's the ruby version? What is the exit code? \nThanks,\nLukas\n. Oh my, sorry, I thought I am in another project :/ \nWhat's node.js you are using and is it from system or from NVM? \n. Test is sorely missing. \n. Thanks for the report, that should fail and we'll take a look. \n. Looks good. \n. @ecordell Agreed! \n. :+1: for supporting it\n. Thanks for the report. We plan to actually support binary files properly in the blueprint, but until it happens, it's true that we should provide a way for the api to pass the validations\n. @sameergarg Would you mind providing the related part from apiary.apib? Feel free to encrypt it with our GPG keys in case it's sensitive. \n. :joy: :neckbeard: \n. In the current state of things, I'd recommend using clingwrap instead\n. > I would be strictly against it being in the parser. It should be a downstream tool.\nI agree it shouldn't be in snowcrash, but any reason why it shouldn't be part of fury toolchain? . I casted my vote with dredd.api.sexy :trollface: \nAgreed about CNAME, and project landing pages in general...but it kinda goes back to branding. Maybe oss.apiary.io/dredd? Or separate top-level for dredd, akin to apiblueprint.org? @paraskakis ? \n. If process.exit ends process, how can it call callback? \n. BTW, you may also use block string with string interpolation, I'd say it will be a bit more readable http://coffeescript.org/#strings\n. req.on error should be assigned before calling req.write and req.end or you will run in variety of race conditions. \n. OK I love proxyquire\n. /me don't like dead tests that are not even marked as skipped\n. I'd be cautious and add configuration on per test-case basis, not globally. This can lead to nasty bugs. \n. dead test\n. dead test\n. dead test\n. ...I'd DRY those three tests and make them configurable via params. \n. Oh I see, you rely on the fact that cliUtils.exit is mocked.\nHuge antipattern, please fix. \n. typo\n. I dislike being bound to fragile master. If we cannot use release, I'd prefer having particular revision fixed using git://repo#revision syntax. \n. I'd say we should warn for invalid reporters. \n. Hmm, we should log what we are skipping. \n. I think in case of error, err should be emmited as first argument for possible introspection. Also, err-first is standard node convention. \n. I think this is a bad pattern.\nAll reporters should have the ability to do something async at the end. We have them in registry (config.reporters), thus they should be should all be listening to .once 'end', (cb) ->; cb should be then used as an accumulator and the final callback shall be called once all reporters have confirmed end of the end event. \n. Nitpick: FWIW, I am not a fun of methods that can be mistaken for attributes. getDefaultStats is better in my opinion as it expresses an action. \n. What is this for? \n. I don't like the name: this doesn't return JSON, but objects. \nPretty JSON would be returned with something like JSON.stringify parsed, 2\n. FWIW, {}s are not needed (and may be even on the same line if you'd prefer)\n. How come that the index is [1] and not 0? I presume it is because it relise on previous describes to run? That sounds like leaky tests, should be fixed. \n. Same as above: tests should be isolated.\nIf anything else, if you want to depend on the order of the tests, then describe blocks should be nested. \n. I am for creating fresh reporter in beforeEach to prevent leaks. \n. This should be done in top-level before and restored in after to prevent test leaks. \n. This should be done in top-level before and restored in after to prevent test leaks. \n. ...then what? \n. Also, I don't quite understand why it should be called twice. \n. it should not delete the (nonexisting) file I guess\n. Bogus test: no assertion anywhere...\n. Awesome! \n. Ah, missed that. Renaming to reporterCount is fine. \nI thought about once as well, but even so you have duplicates of other listeners. I think proper approach is to have a class wrapper that is instantiated for every run. \n. :+1: \n. I was more talking about the particular line than the method as a whole ;) (I don't get the obj/parsed reference switching). \nOtherwise, I just think it should be consistent with i.e. transaction.body when text/html and it should contain string. IMHO, JSON.stringify parsed, 2 should do the trick. \n. I know we are not consistent as we should be ;)\n. You can do just if not process.env.DREDD_REST_TOKEN or not process.env.DREDD_REST_SUITE\n. You can also do\nfor varName, varValue of proess.env\n. +1. Leftover? . I'd leave it as it is currently as it is in sync with rest of the software. I guess copyright transfer is something we'll be doing later down the line.... ",
    "ecordell": "Working on refactoring as listed above, one at a time.\n. Hi, \nThanks for the support! \nI've added a configurable array of reporters (for e.g. printing to the command line as well as to a file). Does that cover what you needed for chainable reporters, or is there something I'm missing?\nI'm working to get the coverage back up - I broke a lot of tests from refactoring and I just got all of the original ones passing again. Just need to add some more to cover the code I've added to the project.\n. Adam,\nI've addressed everything that I mentioned in the first message, so I think it should be ready to go. There are always things to improve but I think this PR is getting a bit big!\nA couple of things I wanted to mention:\n- Went ahead and bumped the version number to 0.1.2\n- Added some documentation to the readme about the new command line options.\n- Refactored things a bit. Aside from the major things like making dredd an object (coffee class) rather than a function, I also split up some larger sections into smaller parts. \n- There's a base Reporter class that other reporters can inherit from. Each reporter can have any number of child reporters, and passes events down to them. Dredd initialized with defaults has a single base Reporter (that doesn't write to anything) with one child reporter that prints to the console (which can be removed with --silent). This lets you build arbitrarily complex reporter-tree structures to use with dredd. \n  - I think a future revision should make the reporters just listen for events from an instance of Dredd, like mocha reporters do. This would make profiling especially easy, it also feels more node-y. In fact, if the events were similarly named it might be pretty easy to just drop existing mocha reporters into the project (they have like 12).\nThat's it! Thanks for the support while I was working on this. I'll be using dredd in one of our own projects soon, and when I do that I'll shoot another pull request with documentation on consuming dredd from a node app rather than the command line. (I need to do auth as well, so that might cover #3).\nCoverage is 100% on all but execute-transaction.coffee, which is at 96% (looks like coveralls stopped pulling this branch?)\n. I had to add /lib to the project so that it could actually be used in other projects. Am I missing something? Should I revert those commits?\n. Reverted the /lib stuff. I was trying to point npm to a branch on my fork of dredd so that I could test it in production. For whatever reason that doesn't actually build the library, so I mistakenly thought to add the compiled source. \nAs for the headers: I saw that the spec supports inheriting headers, but that doesn't help when you need to generate the header dynamically (for sessions or auth or something else). \nThanks!\n. Do you have a test showing this? Errors should be passed up through to the callback on run and then call cli.fatal() (which should give exit 1)\n. Fixed in #31 \n. Not valid anymore, closing this.\n. Is there an eta for when this will be merged into master?\n. According to this list, HTTP status checking is planned but not yet implemented.\n. @netmilk You can define multiple responses in the blueprint, but Dredd isn't aware of them yet (it doesn't know how to pair example requests with example responses). At the moment it ignores additional requests/response per endpoint. \nI'm not sure what the AST looks like now, but it may have enough information to properly pair a requests and responses? I tried to implement this a while back but found that I didn't have enough information to do so.\n. This seems like a great solution for your specific case (which does seem like a pretty common one).\nBut I was wondering how this would work in the general case? How could one specify an arbitrary ordering of the tests?\nThree solutions come to mind:\n- Set up the server such that order of requests doesn't matter. \n  - This takes a bit more work upfront, but it does force you to think about your testing and environments more, which is probably a good thing in general. \n  - This is what we do where I work and has been going well so far.\n  - This assumes (rightly? wrongly?) that any ordered series of api calls can be made order-independent by mocking/seeding/changing things on the server.\n- Have language support for ordering (in the api blueprint syntax)\n  - Could assume that order written = order performed.\n  - Could have some attribute for each transaction specifying order.\n  - At the same time, seems like something that should be a concern of a testing tool like dredd, rather than of the blueprint format/parsers.\n- Have some sort of configurable ordering through dredd\n  - Could be a configuration file that simply lists the order that operations should occur.\n```\nGET /collection/\nPUT /collection/{object_id}/\n```\n\n\n\nOr maybe using the names of the transactions from the blueprint format\nObjects > Collection > Retrieve Object Collection\n Objects > Resource > Update Single Object\n  - Seems like more work than should be necessary. Maybe this + a good default --sorted option?\n\n\nAny thoughts? I'm liking the third option + the functionality in this pull request.\n. It looks like this was fixed already? b9ad4c5f8edd19d9881f718e710622e629985efb\n. @Almad @netmilk:\nI've finished everything I wanted to get done (minus the things that I noted can't be done just yet), and I'm pretty pleased with the result. If you could take a look and decide if it can be merged, I'd appreciate it. If I need to do anything else to get this moving, please let me know.\nEdit: I should add that I wasn't able to get the vagrant setup working as outlined in the docs, so I haven't tested this in the official build environment. I would be surprised if there are any issues with that, though, and I'm happy to fix any that arise.\nThanks!\n. > Thanks again for the patch and sorry for the longer review and delays, it's quite a few lines to work through ;)\nThanks for taking the time to look it over so that I can fix it enough that you're comfortable merging! I know it's a lot and I appreciate the receptiveness to such large changes.\nI need to fix the (embarrassing) things in the tests that you pointed out, otherwise all should be well.\n. Didn't get to the tests tonight, got sidetracked fixing the request/response formatting (spurred by a comment you made). I'll work on the tests in the morning.\nOh, also added a nice cleanup on SIGINT that lets you stop mid-testing and get partial reports. Will add tests for that as well.\n. Everything should be good to go! Let me know if there's anything else I need to do.\nOh, and it would be nice if you could also close out the issues this addresses? Thanks!\n. @zdne That sounds great! Can't wait to see that trickle through all of the projects.\n@Almad It looks like EventEmitter 0.8 doesn't have the listenerCount method. I didn't know there was a specific version of node that was being targeted?\n. After wrangling with nvm/npm for a while and not getting any 0.8 installs working properly, I just made the changes and it looks like it's fixed in the Travis build.\n. Thanks!\n. Just so we're clear: the first of these two commits has been merged already, and there is a --sorted flag that sorts tests by method. This commit just retains the internal ordering within each group (i.e. if Users came before Posts, then GET /users/ would come before GET /posts in the GET section).\nI think it's useful (I'm using it!) but is not the proper, long-term solution as @zdne pointed out. \nThis doesn't have unit tests but I covered it in an integration test (figuring it was temporary), see here. The assertions in the test could be modified very slightly to cover this new pull request.\n. If you need Auth on every endpoint, you can pass the credentials in with -u username:password and dredd will attach the headers for each request.\nWhat you have should be working, though. You can try running with -d to show request details and perhaps see why it's failing? In my experience this error is usually a problem with the network or the server (have you checked with some other tool that the server is responding? Have you checked it responds to basic auth properly?)\nThis type of error should be caught and the displayed nicely in the future.\n. Validation is handled by gavel.js and not by dredd, so this should really be an issue over there.\nWhat happens is that the body is parsed into a representative json schema, and I suspect it's just not generating a schema properly for your case. Support for root-level arrays is the most recent addition to gavel, and I wouldn't be surprised if there isn't coverage for this situation.\nShort term solution for you: if you provide your own json schema, it will validate against that instead, so you can manually specify that the number of items is important.\n. So there are a few things that need to change (I doubt it will even work as-is):\n- The reporter needs to be rewritten to use the reporting events (it's not too complex, see the conversion for the cli reporter)\n- The reporter needs to be added to dredd in a different way (see configure-reporters)\n- /lib shouldn't be in the repo\n- A cli test for the rest reporter should be added\n- And...I suspect that more unit tests are needed, since I don't see how this could run at the moment, but they're passing.\n. @zdne Absolutely, sorry about that. I got a little overzealous with the --amend flag. \n(also, I bumped the version to 0.3.0 because this adds features rather than fixes bugs, but if you want to de-emphasize the hooks it could be changed back to a 0.2.x)\nI've recently identified a bug I introduced with this refactoring. This PR breaks dredd's cleanup if interrupted with a SIGINT (ctrl+c in the terminal). I'll write a test for it and a fix and push it up (I can make the other changes you mentioned at the same time, unless you just want to do it yourself). \n. Moved the docs to the wiki and fixed the sigint bug. (I didn't write a good cli test for it because I couldn't figure out how to make a child process emit a SIGINT event - must be missing something.)\nAlso changed a couple of things so that multiple hooks can be registered for the same endpoint (pretty small change, and a test is included).\n. Ah, I'll pull in the new changes and push up a merged version. I actually didn't know about git mv, good to know for the future. I try to do a tiny bit of refactoring each time I touch Dredd, so hopefully it's becoming more and more loosely coupled and 'DRY'.\nAside: Have you considered writing a sort of \"Dredd manifesto\" detailing the intended use of Dredd as a blueprint testing tool rather than writing detailed integration tests? (Could probably just put the text of your previous comment in the readme.)\n. It should merge cleanly now. Also made a small addition to expose the transactions to a hookfile.\n. @mgaut72 Can definitely reproduce this locally. Validation is handled by gavel which in turn calls amanda for schema validations.\nJust a note for investigating this issue:\n- Type validation is handled here\n- And in particular the isNumber method (which should be called)\nHaven't yet installed gavel and amanda locally to figure out exactly where this issue is happening, but the test project definitely helps.\n. I get this output when running with -d\n```\nexpected:\nheaders:\n    Content-Type: application/json\nbody:\n{\n  \"data\": {\n    \"token\": \"234khsdfs9d8fsdf\",\n    \"expires\": 1424641830\n  }\n}\nstatus: 200\nschema:\n{\n  \"type\": \"object\",\n  \"required\": true,\n  \"properties\": {\n    \"data\": {\n      \"type\": \"object\",\n      \"required\": true,\n      \"properties\": {\n        \"expires\": {\n          \"type\": \"number\",\n          \"required\": true\n        },\n        \"token\": {\n          \"type\": \"string\",\n          \"required\": true\n        }\n      }\n    }\n  }\n}\n```\nWhich suggests that the expected['schema'] is getting set (it would be blank otherwise). Just to be safe, I added:\ncoffeescript\nexpected['schema'] = response['schema'] if response['schema']\nif response['schema']\n  console.log 'Schema is truthy'\nand got this output:\ninfo: Beginning Dredd testing...\nSchema is truthy\nSo it was a good thought, but it doesn't appear that's the issue...I also tried printing transaction.expected right before it gets passed to gavel.isValid, and it's definitely the right schema there. That leads me to believe it's something in gavel, since Amanda looks like it's handling numbers properly at first glance.\n. Couple of things:\n1. At the moment, the base url can't have a path in it (see #43). This is solved in #45 but hasn't yet been merged. So your command should be 'dredd apiary.apib http://somehost.de:8443/' and then '/imp-endpoint' should be a prefix on the urls.\n2. The URI template is incorrect in your apib file. Instead of /api/V0/Resources/CarSharing/Cars?{lat}&{lng}&{radius}, it should be /imp-endpoint/api/V0/Resources/CarSharing/Cars{?lat,lng,radius}. See RFC6750 for reference.\n3. The line-endings should be Unix style, not Windows (\\n, not \\n\\r). When I first ran the apib you provided, I got the error: the use of carriage return(s) '\\r' in source data isn't currently supported, please contact makers (this is actually enforced by the blueprint parser, see snowcrash)\nI wasn't able to to reproduce your \"undefined\" problem. When making the changes above, however, I got the following output:\nFail: GET /imp-endpoint/api/V0/Resources/CarSharing/Cars?lat=52.52&lng=13.39&radius=1000\nMessage\n```\nheaders: Value of the \u2018content-type\u2019 must be application/hal+json.\nbody: No validator found for real data media type 'text/plain' and expected data media type 'application/json'.\n```\nRequest\n```\nbody: \nheaders: \n    User-Agent: Dredd/0.3.0 (Darwin 13.0.0; x64)\nuri: /imp-endpoint/api/V0/Resources/CarSharing/Cars?lat=52.52&lng=13.39&radius=1000\nmethod: GET\n```\nExpected\n```\nheaders: \n    Content-Type: application/hal+json\nbody: \n[\n    {\n        \"actions\": [\n            {\n                \"name\": \"book\",\n                \"method\": \"POST\",\n                \"uri\": \"Resources/CarSharing/Cars/215992/Process?action=book\"\n            }\n        ],\n        \"id\": 215992,\n        \"description\": \"B-GO3336\",\n        \"type\": \"CarSharingCar\",\n        \"uri\": \"Resources/CarSharing/Cars/215992\",\n        \"location\": {\n            \"latitude\": 52.51138,\n            \"longitude\": 13.39313,\n            \"system\": \"WGS_84\"\n        },\n        \"provider\": \"Car2Go_Berlin\",\n        \"operator\": \"Car2Go_Berlin\",\n        \"address\": {\n            \"citycode\": null,\n            \"city\": null,\n            \"street\": \"Kronenstra\ufffde 24, 10117 Berlin\",\n            \"houseno\": null,\n            \"district\": null,\n            \"region\": null,\n            \"country\": null\n        },\n        \"licenseId\": \"B-GO3336\",\n        \"category\": null,\n        \"fuelType\": \"PETROL\",\n        \"imageLink\": null\n    },\n    {\n        \"actions\": [\n            {\n                \"name\": \"book\",\n                \"method\": \"POST\",\n                \"uri\": \"Resources/CarSharing/Cars/215993/Process?action=book\"\n            }\n        ],\n        \"id\": 215993,\n        \"description\": \"B-GO2356\",\n        \"type\": \"CarSharingCar\",\n        \"uri\": \"Resources/CarSharing/Cars/215993\",\n        \"location\": {\n            \"latitude\": 52.52053,\n            \"longitude\": 13.39428,\n            \"system\": \"WGS_84\"\n        },\n        \"provider\": \"Car2Go_Berlin\",\n        \"operator\": \"Car2Go_Berlin\",\n        \"address\": {\n            \"citycode\": null,\n            \"city\": null,\n            \"street\": \"Stadtbahnbogen 177 - 182, 10117 Berlin (Umkreis 100m)\",\n            \"houseno\": null,\n            \"district\": null,\n            \"region\": null,\n            \"country\": null\n        },\n        \"licenseId\": \"B-GO2356\",\n        \"category\": null,\n        \"fuelType\": \"PETROL\",\n        \"imageLink\": null\n    },\n    {\n        \"actions\": [\n            {\n                \"name\": \"book\",\n                \"method\": \"POST\",\n                \"uri\": \"Resources/CarSharing/Cars/215994/Process?action=book\"\n            }\n        ],\n        \"id\": 215994,\n        \"description\": \"B-GO2733\",\n        \"type\": \"CarSharingCar\",\n        \"uri\": \"Resources/CarSharing/Cars/215994\",\n        \"location\": {\n            \"latitude\": 52.51228,\n            \"longitude\": 13.39639,\n            \"system\": \"WGS_84\"\n        },\n        \"provider\": \"Car2Go_Berlin\",\n        \"operator\": \"Car2Go_Berlin\",\n        \"address\": {\n            \"citycode\": null,\n            \"city\": null,\n            \"street\": \"Jerusalemer Stra\ufffde 27, 10117 Berlin\",\n            \"houseno\": null,\n            \"district\": null,\n            \"region\": null,\n            \"country\": null\n        },\n        \"licenseId\": \"B-GO2733\",\n        \"category\": null,\n        \"fuelType\": \"PETROL\",\n        \"imageLink\": null\n    },\n    {\n        \"actions\": [\n            {\n                \"name\": \"book\",\n                \"method\": \"POST\",\n                \"uri\": \"Resources/CarSharing/Cars/215995/Process?action=book\"\n            }\n        ],\n        \"id\": 215995,\n        \"description\": \"B-GO3325\",\n        \"type\": \"CarSharingCar\",\n        \"uri\": \"Resources/CarSharing/Cars/215995\",\n        \"location\": {\n            \"latitude\": 52.51299,\n            \"longitude\": 13.38648,\n            \"system\": \"WGS_84\"\n        },\n        \"provider\": \"Car2Go_Berlin\",\n        \"operator\": \"Car2Go_Berlin\",\n        \"address\": {\n            \"citycode\": null,\n            \"city\": null,\n            \"street\": \"Glinkastra\ufffde 19, 10117 Berlin\",\n            \"houseno\": null,\n            \"district\": null,\n            \"region\": null,\n            \"country\": null\n        },\n        \"licenseId\": \"B-GO3325\",\n        \"category\": null,\n        \"fuelType\": \"PETROL\",\n        \"imageLink\": null\n    }\n]\nstatus: 200\n```\nActual\n```\nheaders: \n    server: nginx/1.4.1\n    date: Thu, 27 Feb 2014 14:53:41 GMT\n    content-type: text/html\n    content-length: 1073\n    connection: keep-alive\n    x-powered-by: Servlet/3.0 JSP/2.2 (GlassFish Server Open Source Edition 3.1.2.2 Java/Oracle Corporation/1.7)\n    pragma: No-cache\n    cache-control: no-cache\n    expires: Thu, 01 Jan 1970 01:00:00 CET\n    www-authenticate: Basic realm=\"imp-realm\"\nbody: \n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n\nGlassFish Server Open Source Edition 3.1.2.2 - Error report\n\n      <!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;}\n      H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;}\n      H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;}\n      BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;}\n      B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;}\n      P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A\n      {color : black;}HR {color : #525D76;}-->\n      \n\n\nHTTP Status 401 - \n\ntype Status report\nmessage\n\ndescriptionThis request requires HTTP authentication ().\n\nGlassFish Server Open Source Edition 3.1.2.2\n\n\nstatus: 401\n``\n. What version of dredd are you using? (dredd --version`)\n. I've been putting in a little time on this issue here and there when I can.\nGood news: I've got a windows vm running with dredd 0.2.1 and I can reproduce your problem.\nBad news: I can't easily test why it's happening because all of the build tools are written for mac/linux. So a fix will take a little more time. \n. Today, I booted up the windows vm, downloaded the apib from the dropbox link, converted it to unix line endings, and dredd worked as expected.\nI thought I had narrowed it down, but everything is working now. Can no longer reproduce the undefined.\n. Looks like file.path.abspath(path) in the file package would fix this cleanly:\n\nExpands \".\", \"..\", \"~\" and non root paths to their full absolute path. Relative paths default to being children of the current working directory.\n. The nodejs people think it's not worth implementing in the http/https libraries.\n\nIt looks like it might be worthwhile to switch from node's http/https libraries to request, and then add this functionality to request (already being discussed here). \n. I think this is a duplicate of #24?\n. @netmilk Invalid URI Templates seem to be a pretty common mistake, maybe it's worth validating them and emitting warnings?\n. Can I ask what you need to do in a hook for every endpoint that can't be done with flags? \nThere's a fairly easy way to do this right now: run with --names, copy the list of names, make it an array, and then iterate over them.\nHere's an example of mine:\n``` coffeescript\n{before, after} = require 'hooks'\nendpoints = [\n  \"Authentication > Users Collection > Create a User\",\n  \"Authentication > Sessions > Create a Session\",\n  # all endpoints ...\n]\nfor endpoint in endpoints\n  before endpoint, (transaction) ->\n    delete transaction.expected.headers['Location']\n    delete transaction.expected.headers['X-Total-Count']\n    delete transaction.expected.headers['Link']\n```\nYou can have multiple hooks for the same name, so it won't affect anything else.\n. Transactions are exposed in hooks so you can do something like:\n``` coffeescript\n{before, after, transactions} = require 'hooks'\nendpoints = transactions.map (currentValue, index, array) ->\n  currentValue.name\nfor endpoint in endpoints\n  before (transaction, done) ->\n    #do something\n    done()\n```\n. > Unfortunately it seems that 'transactions' isn't populated until after the hook file is executed.\nHmm, that shouldn't be true - the whole point of exposing the transactions is so that they're available to use in hookfiles. Are you using the latest version of Dredd? Can you post an example of code that doesn't work?\n. Definitely a problem that should be fixed. I see these errors from time to time as well.\nThe root cause can be traced back to this issue on Gavel which then points to an issue on Amanda. \n. @nenadalm I've been working on fixing this bug (it's become a problem for us) since yesterday.\nThe issue you linked to in Amanda doesn't actually fix the problem, unfortunately. I've applied that patch to the current codebase (the one used by gavel, anyway) and I still get the body: Validator internal error: Maximum call stack size exceeded errors.\nSince Amanda is falling behind spec (no draft-04 support, no $ref support) I decided to evaluate the other options. Gavel is well designed and it was fairly simple to switch out the json schema libraries. Here's what I found:\nJaySchema -  runs out of memory quickly. There may be a way to call it so that this doesn't happen, but it wasn't obvious to me.\nZ-Schema - Lots of errors when testing against a real datasource. Looks like several bugs in how $ref is handled, and I didn't have any $ref fields in my schemas. (Or I was setting it up improperly somehow).\nJSV - has not been updated in a long time, and has been forked countless times. Not clear which one to use, and may not be updated to future drafts.\ntv4 - Works, but the error messages are nowhere near as informative as Amanda's. \nI've pushed up a branch of Gavel that uses tv4, and honestly, it works pretty well...but ~20-30 unit/spec tests are failing in Gavel with tv4 instead of Amanda, and it looks pretty hopeless getting them to pass without modifying tv4 to output all of the data that Gavel wants. (I'm not sure if I can assume that certain parts of Gavel aren't working; the output that I see from my api tests with dredd look exactly the same as with Amanda, just with less informative errors and no false-positives because of call stack errors).\nWhich led me to try applying #32, which as I mentioned, doesn't work as far as I can see.\nSo that's the state of affairs. Trying to hunt down the bug in Amanda since that seems the least painful route at the moment. On the other hand, could probably use tv4, but the failings tests are concerning.\n. So it turns out that I just wasn't building things properly, and the fix in #32 does work! \nI applied the patch to the new codebase so it would merge cleanly, and sent PRs on Baggz/Amanda and apiaryio/Amanda.\nOnce they're merged, Amanda needs to bump its version, then Gavel needs to, and then dredd can use the fix.\n. For what it's worth, I've been using the patched Amanda in a patched Gavel in a patched fork of Dredd for months with no issue.\n. This isn't currently supported, but it's something I've been wanting as well. I may be able to throw up a pull request to support skipping tests sometime soon.\n. Running dredd apiary.apib http://localhost:3000 --no-color suppresses the color codes.\n. Thanks!\n. In my opinion this should be refactored a bit first. The isMultipart and replaceLineFeedInBody are defined in the TransactionRunner class as top level methods but aren't actually related to running transactions (imagine wanting to use the replaceLineFeedInBody elsewhere in the project - you'd need to instantiate a TransactionRunner and then call the method).\nThey could/should separated into their own modules and simply used by the runner (similar to flattenHeaders and company).\n(Just my $0.02 - I can't merge PRs).\n. I haven't tested out your sample to try to reproduce, I just wanted to note that any time you change the body you'll also need to update the content-length. Most servers don't like when they don't match.\ncoffeescript\nbefore \"My > API > Transaction\", (transaction) ->\n  body = JSON.parse transaction.request.body\n  body.property = \"something else\"\n  transaction.request.body = JSON.stringify body\n  transaction.request.headers['Content-Length'] = transaction.request.body.length\nA good feature request would be to automatically ensure that the content-length is in sync with the actual length of the content.\n. Hi, I think I might be able to clear up some of your questions.\n\nI guess that the intention is that after Dredd is done, the database should be in the same state as it was before the testing.\n\nThat's certainly an option but it's not the only way you can do things. For example, you could seed your database so that it's ready for testing, run your api tests, and then reseed your database to get it back to a known state.\n\n--sorted sorts requests only based on the method but not based on the URL. When I am posting new data, I want to first post root data and then nested like:\n1. POST /universities\n2. POST /universities/42/faculties\n3. POST /universities/42/faculties/43/sections\nDredd does not include this kind of sorting and I think it should.\n\nYou're correct that --sorted does not take the url into account. Part of the problem with doing that is that the url doesn't actually have to be related to the resources and transitions being manipulated through the api - It would be perfectly valid for an API to not follow the strict hierarchical urls you're using.\nIt may be that this case is common enough that it would be good to include it in dredd?  But I think it only solves part of the problem - it is likely that even with a more advanced sorting like you're suggesting, there will be order dependencies outside of that sorting (e.g. maybe POST /universities requires that you reference a unique \"accreditation\" resource that must already exist)\nYou can however build arbitrary dependency graphs using hookfiles. Here's a quick example based on the requests you mentioned:\n``` coffeescript\n{before, after, transactions} = require 'hooks'\nbefore 'Universities > Faculties > Create Faculty', (transaction, done) ->\n   # create a new university (omitted for brevity)\n   # store universityId in a variable\n   body = JSON.parse transaction.request.body\n   body.universityId = universityId\n   transaction.request.body = JSON.stringify body\n   transaction.request.headers['Content-Length'] = transaction.request.body.length\n   done()\nafter 'Universities > Faculties > Delete Faculty',  (transaction, done) ->\n   # delete university created in earlier hook\n   done()\n```\nThis can get complicated and unwieldy pretty quickly, but it does allow you to test any workflow you want.  Careful code organization can make things a bit nicer.\n. To clarify - this is only true if no schema is provided, correct? (i.e. the issue is with the automatic schema generation and not validation?)\n. I think I can help out here - there are a couple of idiosyncrasies with changing the request url. The actual attribute used to construct the request is fullPath. This is how I change the url in before hooks:\njavascript\nbefore(\"Hook Name\", (transaction) => {\n  transaction.fullPath = \"/new/path\";\n  return transaction.request.uri = transaction.fullPath;\n});\ntransaction.fullPath sets the path the request will be sent to, and transaction.request.uri sets the path that will be recorded in logs and reports. It's a little confusing - I think it would be a good plan to promote \"transaction\" to an object with getters/setters so that you only need to change one of those properties. On the other hand, it can be useful to see the difference between the \"request as sent\" and \"request as written in the blueprint\".\nThe above code works for me with the latest dredd version, so if it doesn't work for you you might try upgrading? And you're right - those docs are incorrect. The property has always been uri.\n. I can confirm a similar issue. Here's an example from our blueprint:\n+ Attributes\n        + subject (object, required) - The subject the widget is displaying.\n            + id: `us_1003830829_9vg5jyuwn4w04d8_7b5eaeb` (string, required)\n            + type: `provider` (enum[string], required)\n                + Members\n                    + `organization`\n                    + `office`\n                    + `provider`\nOutput:\njson\n{\n  \"subject\": {\n    \"id\": \"us_1003830829_9vg5jyuwn4w04d8_7b5eaeb\",\n    \"type\": null\n  }\n}\nUnnested enum[string] types render fine.\n. It's a little hacky, but what we do is keep all of our hook files in a /hooks/ directory, then compile them to /compiled-hooks/ and reference that when running Dredd. I put our wrapper script up in a gist, if it helps.\nAlso, I wrote the \"direct\" hook loading way back when Dredd was a monolingual baby and can verify that if you loaded hooks directly they could be written as Coffeescript, because that's what Dredd is written in. Skimming the current source it looks like this would still work, though I agree that it would be nicer to see various \"hook servers\" take over that role so that javascript and it's ever-changing dialects can continue to be supported.\n. @netmilk That works, thanks!\n. I think you want the --reporter=dot argument to get that output. Other options are:  junit, nyan, dot, markdown, html, and apiary. See: https://dredd.readthedocs.io/en/latest/usage-cli/#-reporter-r\n. That's what's happening now, it's just that the \"fileBasedReporters\" is what's tracking the accumulation. \nSo: Dredd's emitter emits an 'end' event, the reporters all listen and wrap things up, and call the cb in your example, which decrements the fileBasedReporters counter.\nI dislike keeping track of that number, though, so I changed it to count based on the number of listeners to the 'end' event. (commit forthcoming). Does that address your concerns?\n(also: using on instead of once so that one could theoretically call run() more than once in the js api)\n. I went ahead and switched to the package in npm (even though it's not well maintained), and added the things I was using from the fork manually. \n. Fixed\n. Changed it to \"Dry run, skipping API Tests...\"\nI'm not really clear on the use for this (there are other tools that will tell you if there are issues with your blueprint), but this was basically the only cli param already here when I started.\n. Fixed\n. js\ntransactionsComplete = () ->\n  reporterCount = EventEmitter.listenerCount(config.emitter, 'end')\n  config.emitter.emit 'end' , () ->\n    reporterCount--\n    if reporterCount is 0\n      callback(null, stats)\n. Just went ahead and added the default values in the constructor. \n. When printing body/schema data that's json, it tries to print it nicely.\nExample without the prettify method:\n\"bodySchema\": \"{\\n  \\\"type\\\":\\\"object\\\",\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-03/schema\\\",\\n  \\\"required\\\"\nSo obj is a string of collapsed json. We parse it into an object, if possible, so that when the transaction object as a whole is stringified, we get nice looking JSON instead of a string of collapsed JSON.\nI realize that this seems like really confusing nomenclature now ;) I'll work on something better. But that's where it comes from.\n. Just trying to follow the style of the tests that were there when I started. Thanks for the tip though!\n. I actually have several issues with the overall architecture/design that I'd like to address \"sometime\"...\nI drew up my ideas for a general-purpose dredd-like tool before I started contributing here:\n\nSo obviously most of this is taken care of already, but I think in terms of separation and such this might be something to move towards. (also it doesn't map 1-1 with existing tools, e.g. gavel).\n. I typed up a response but realized I was misunderstanding what you were saying.\nI'm going to remove this from the executeTransaction and let the reporters handle it....\n. Are you saying I should check for program exit? Test errors and test failures shouldn't halt execution of the test suite. \n. When --inline-errors is false (default) cli output looks like this:\ninfo: Beginning Dredd testing...\nfail: POST /machines duration: 5091ms\npass: GET /machines duration: 2232ms\nWhen --inline-errors is set to true, the cli output looks like this:\n```\ninfo: Beginning Dredd testing...\nfail: POST /machines duration: 1449ms\nfail: body: The \u2018mesage\u2019 property is required.\nrequest:\nhost: machines.apiary.io\nport: null\npath: /machines\nmethod: POST\nheaders:\n    Content-Type: application/json\n    User-Agent: Dredd/0.2.0 (Darwin 13.0.0; x64)\n    Content-Length: 45\nexpected:\nheaders:\n    Content-Type: application/json\nbody:\n{\n  \"mesage\": \"Accepted\"\n}\nstatus: 202\nactual:\nheaders:\n    content-type: application/json\n    date: Thu, 16 Jan 2014 16:19:26 GMT\n    x-apiary-ratelimit-limit: 120\n    x-apiary-ratelimit-remaining: 114\n    x-apiary-transaction-id: 52d8068d15c6d30200016a12\n    content-length: 27\n    connection: keep-alive\nbody:\n{\n  \"message\": \"Accepted\"\n}\nstatus: 202\npass: GET /machines duration: 330ms\n```\nSo fail is called twice: once to say it failed, again to show the fail info.\n. Wouldn't it be good to wrap this in a conditional?\njs\nif (error.stack) {\n  console.error(error.stack);\n}\n. It looks like this isn't indented enough to be considered a code block by markdown (you can see in the preview for the file).\n. There are methods in applyConfiguration to take care of this, see: https://github.com/apiaryio/dredd/blob/master/src/apply-configuration.coffee#L43\nThe transformation could be removed from here and replaced by two lines added in apply-configuration:\njavascript\n configuration.options.path = coerceToArray(configuration.options.path)\n configuration.options.only = coerceToArray(configuration.options.only)\nUnless I'm misunderstanding and there's a reason they need to be parsed before the rest of the options?\n. This is just my opinion, but I think this section would be more readable if every part that starts with a # descriptive name comment were replaced with a call to descriptiveName() function. A couple of cents from the peanut gallery.\n. Sorry! I should've described it better.\nI just meant that I personally would find it easier to read (since it's a fairly long method) if it were split up into parts - and I thought the comments describing the parts suggested natural places to split.\nA quick pseudo-example:\ncoffeescript\nexpandAllGlobs(config)\nremoveDuplicateFilenames(config)\nloadAllFiles(config)\nparseAllBlueprints(config)\nrunAllTransactions(config)\nThen each \"task\" would be self-contained in its own method/module/file/etc.\n. ",
    "netmilk": "Hi Evan,\n  I'm glad to see your awesome work and thanks for all your suggestions! I agree with all your hints and I'm counting with your proposed refactorings. I'll be working on abstraction for chainable reporters in few next days. I'll do my best to prevent duplicate work.\n  Just a note, I see as very important to have whole project properly tested. Please try to keep the coverage level over 90%. You can see coverage reports for each commit on Coveralls\nAdam\n. Evan,\n  this is awesome! Thanks a lot for all your effort! Let me know when you'll be done and I'll merge it.\nAll the best\nAdam \n. Hi Evan,\nthanks a lot for all your work. I've already reviewed most of you code this morning and I think it's more than OK. I have also figure out some minor conflicts and I think it's ready to release. I'll bump it in dredd-example to let others see it live. If you have any public repo tested with Dredd, just let me know. It would be great to see more real-life use-cases. I look forward to future collaboration!\nThanks!\nAdam\n. @ecordell Btw, it seems that Travis-CI stopped building your fork. It's probably the reason why the coverage is not updated any more. \n. I have one more little note. :) I was using cliTools module to stub/mock stdout and sdterr output and to avoid unwanted mess during running Dredd's test suite. I found it very useful...\n. This is solved yet. You can use --user command-line option.\n. It's easy. I tried it on Dredd example application: \nInstall dredd to your project:\n$ npm install dredd\nCreate  run_dredd.coffee with content:\n```\nDredd = require 'dredd'\nopts =\n  server: 'http://localhost:3000'\n  blueprintPath: './apiary.apib'\n  options:\n    'dry-run': true\ndredd = new Dredd opts\ndredd.run (error) ->\n  if error\n    throw error\n    process.exit 1\n  process.exit 0\n```\nAnd then run it: \n$ coffee run_dredd.coffee\nINFO: Dry run, skipping...\nINFO: Dry run, skipping...\nINFO: Dry run, skipping...\nINFO: Dry run, skipping...\n. Hi Evan,\n/lib folder should not be versioned and definitely should not be part of the GitHub repository. /lib directory is distributed as a part of the NPM package, it's built during the prepublish hook and the main section in the package.json is pointing to the compiled pure JavaScript. This mean that coffee-script is not a runtime dependency at all and Dredd can be used programatically in other software as I mentioned here.\nPlease revert all commits regarding /lib dir, I'll merge this PR afterwards and I'll publish the new version to the NPM repository.\nThanks again for the bunch of awesome work! \nAll the best\nAdam \n. Just one note about the headers inkjection. Headers and parameters injection (top to bottom inheritance) should be part of the API Blueprint format. You will be able to define some global headers and parameters in the API Name & Overview Section like tokens, paging or sorting.\nFor this moment I see headers injection on the Dredd level as very useful. Especially for purpose of HTTP basic authentication.\nA\n. Evan,\n  /lib dir comes from the distributed npm package from the NPM registry only when you install it wit npm install dredd If you want to use dredd package code without installing from it the NPM registry in your local environment just run the script/build command manually. \n  Obviusely, you can use some more intelligent solution e.g grunt watch which will watch for changes is /src dir and it will rebuild the /lib on every change to prevent \nAdam\n. Hi,\nI've also faced this problem, but I didn't managed to replicate it. I'll give it one more try and I'll let you know. It seems to me that there is some problem with relative/absolute path to the package.json in cli module.\nAdam \n. Thanks, @mambre. I'm still investigating. I'll let you know immediately when I succeed.\nAdam \n. This is solved. Just use --header switch for the dredd command. \n. Hi Evan,\n  the CLI is unfortunately uncovered, see #9 . :( I hope I'll manage it today. I'll create something similar to my CLI tests which I've created in some another project.\nAdam\n. I've added basic test cases for the CLI here 944d366a93197e9dd12d43b8d80dd8ab96d5abd8 Now I'm working on the fix.\n. Hi Theodor,\nthanks a lot for the report, for the example Rails app and for the PR! It's awesome! I'll add it to the Dredd's Readme immediately when it will be working. Please have a look at my comment on your PR #12 \nAll the best\nAdam\n. Hi,\n  is this issue still actual? My feeling is that PR #12 closes this issue.\nA\n. Solved by PR #31\n. Cool! :) Thanks, I'll review it and maybe I'll refactor it to the separate file.\n. Fixed in #21 \n. Thank you very much for the report. It should be fixed/solved asap in the Gavel project and tested in Dredd to avoid regression. \n. Hi,\n  please try to upgrade dredd version ~> 0.3.0. It should work as you expect. I created a  example and as you can see in  Travis-CI it's failing.\nAdam\n. Hi @rjocoleman, \n  multiple responses are now supported in the latest release of API Blueprint. Is this what are you looking for?\nA\n. @ecordell Multiple request and response pairs are part of the AST in the new Protagonist 0.10.0. I already have upgrade of Protagonist in Dredd in my TODO queue. \n. After update to the latest protagonist AST, there is possible to specify multiple request and response pairs. Multiple responses or requests are still omitted. So if you want to test multiple different responses for a single URI endpoint you have to specify request for each single response. Unfortunately there is no way how to specify different query (URI) parameter for each request and invoke particular response, yet.\n```\nResource [/]\nDo Someting [POST]\n\n\nrequest A\nA\n\n\n\nresponse 200\n200\n\n\n\nrequest B\nB\n\n\n\nresponse 200\n400\n\n\n\n``\n. Please refer to this [comment](https://github.com/apiaryio/dredd/issues/88#issuecomment-70084799). I will create some example on this, definitely soon. \n. @GregorioDiStefano If you have given multiple request and responses under one action, It should compile to multiple examples and you should be able to address them in hooks. See output of--names` \nWould you mind sharing some snippet of your API Blueprint with me?\n. The discussion about how to address multiple request and responses in the future is being discussed here: https://github.com/apiaryio/dredd/issues/227#issuecomment-174529415\n. Hi,\n  any update here? @bensleveritt, can you provide working example application? I'd like to replicate your situation and fix it.\nAdam\n. I try to replicate it on latest dredd v0.3.7 and it seems to be no longer valid. Gavel generates schema for each member in the array so real response array must contain at least same amount of members as specified in blueprint.\n```\ninfo: Beginning Dredd testing...\n127.0.0.1 - - [Tue, 01 Jul 2014 14:07:58 GMT] \"GET /machines HTTP/1.1\" 200 70 \"-\" \"Dredd/0.3.7 (Darwin 13.2.0; x64)\"\nfail: GET /machines duration: 11ms\ninfo: Displaying failed tests...\nfail: GET /machines duration: 11ms\nfail: body: The \u20181\u2019 property is required.\nbody: The 1 property must be an object (current value is undefined).\nbody: The \u20181,_id\u2019 property is required.\nbody: The \u20181,type\u2019 property is required.\nbody: The \u20181,name\u2019 property is required.\nrequest: \nbody: \nheaders: \n    User-Agent: Dredd/0.3.7 (Darwin 13.2.0; x64)\nuri: /machines\nmethod: GET\nexpected: \nheaders: \n    content-type: application/json\nbody: \n[\n  {\n    \"_id\": \"52341870ed55224b15ff07ef\",\n    \"type\": \"bulldozer\",\n    \"name\": \"willy\"\n  },\n  {\n    \"_id\": \"12345\",\n    \"type\": \"car\",\n    \"name\": \"tommy\"\n  }\n]\nstatusCode: 200\nactual: \nstatusCode: 200\nheaders: \n    x-powered-by: Express\n    content-type: application/json\n    content-length: 70\n    date: Tue, 01 Jul 2014 14:07:58 GMT\n    connection: keep-alive\nbody: \n[\n  {\n    \"_id\": \"12345\",\n    \"type\": \"car\",\n    \"name\": \"tommy\"\n  }\n]\ncomplete: 0 passing, 1 failing, 0 errors, 0 skipped\ncomplete: Tests took 20ms\n``\n. Hi,\n  Dredd itself is tested on linux box on Travis-CI and I also performed tests personaly in Vagrant enviroment on Ubuntu Precise (12.04) and everything is green. I've also tried to installdreddglobaly and--help` command is working as expected. \nCan you be please more specific about your system?\nAdam\n. JFI Dredd-example application works on Ubuntu Precise. \n. Cool, thank you for the information.\n. So the summary is:\nGiven I'm on Windows system\nAnd I have some API blueprint with CR+LF line endings\nAnd I have dredd 'v0.3.0' package installed\nWhen I run Dredd\nThen I get the undefined message \nAnd no test is performed\nAm I right?\nAdam\n. It seems that CR+LF line endings are not suported in Sundown, markdown parser used by Snowcrash API Blueprint parser. So this is a Snowcrash issue. \n. Hi @pickerflicker,\n  I'm sorry, but binary blobs are not supported in the API Blueprint format at this moment and can't be used for testing with Dredd. As a hairy workaround you can specifying empty http body and proper content-length header so testing of body will be omitted.\nAdam\n. Just for information: It's solved in #24\n. Related  to #204\n. Hi,\n  I can't replicate your situation. It works for me. Can you please submit more information about your system, npm version and node.js version.\nAdam\n. Hi,\n  my observation is that your issue is caused by usage of square brackets inside uri template. When I remove square brackets everything works as expected.\nAdam\n. Thanks for the report, can you be more specific about Jenkins's environment? Especially which C++ parser do you use. \n$ c++ --version\n$ echo $CC\n. @OrCharles thanks a lot for the report and I'm sorry about any inconvenience. I think this is more likely a Protagonist related issue, so report it there, please.\nProtagonist is a wrapper around Snowcrash API Blueprint parser, so you can try to install Snowcrash directly on osx:\nbash\n$ brew install --HEAD \\\n  https://raw.github.com/apiaryio/snowcrash/master/tools/homebrew/snowcrash.rb\nIf this will fail, it's definitely a problem with installation of Protagonist.\nBtw: my osx system outputs this:\nbash\n$ echo $CC\ngcc-4.2\nMaybe figure this out and it will work.\n. Dredd supports node v0.10, node v0.12 and io.js as well for some time already. Closing this one, please reopen or submit new issue if you'll experience any further inconvenience regarding this.\n. Hi, we are working on it. We are merging Baggz/amanda and apiaryio/amanda together under apiaryio. It will be promoted in Dredd and Gavel.js afterwards. It should be done this week.\n. Hi, it's finally done, now. New Dredd v0.3.3 fixing this issue is released. \n. Thank you for the report, but this is still a Snowcrash issue as you mentioned.\n. Thank you very much for the report, but I think this is more related to the snowcrash parser itself. I've created an example and posted it to snowcrash issue tracker: https://github.com/apiaryio/snowcrash/issues/126 \n. Fixed in the blueprint parser: https://github.com/apiaryio/snowcrash/issues/109#issuecomment-49035122\n. Hi, I think this is more Snowcrash and Blueprint related issue then issue of Dredd itself. Bodies for both request and response are taken from the parser AST as they are. I think it will be solved in the future by possibility to submit raw binary blobs as assets of the blueprint. But please refer to the api-blueprint documentation project. \n. Hi, I'm reopening it. I actually realised that Dredd can identify the multipart media type and add proper line endings to the request. \n. Hi, thank you very much for the report, can you provide an example body, which you are trying to test?\n. Thanks for the mention about version change. It seems to be related to Amanda validator update in Gavel.\n. Fixed in freshly released Dredd v0.3.7. Regression tests added, so it should not appear any more. \n. Thanks for the report! Can you provide here raw blueprint for replicating the issue?\n. Ok, this is verified. But what's the proposed behaviour? Should Dredd test the response for each request? \n$ curl -s https://raw.githubusercontent.com/apiaryio/apiblueprintorg/master/apiary.apib > multi-blueprint.md\n$ dredd multi-blueprint.md http://localhost --names\nwarn: Runtime compilation warning: Multiple requests in example, using first.\n on Blueprint Manipulation > Blueprint Composer > Compose\ninfo: Beginning Dredd testing...\ninfo: API > Service Root > List\ninfo: Blueprint Manipulation > Blueprint Parser > Parse > Example 1\ninfo: Blueprint Manipulation > Blueprint Parser > Parse > Example 2\ninfo: Blueprint Manipulation > Blueprint Composer > Compose\n. Maybe I'm not right, but I don't think so. This code will mean that in the example if there is no request but only responses, no test is created and also if there is no response only request no test is created either. \n. Hey @obihann,\nthank you very much for offering help! It's awesome! Would you be so kind and share a blueprint example with multiple request and responses and proposed test matrix for these examples and request -response pairs?\n. Thank you for the suggestion. Unfortunately Dredd does not support it at this moment.  For now, you can iterate over more than on file by yourself in your test scritpt file as a workaround.\n. Hi, just a note that this was implemented some time agou. You can now use glob expression or url as a blueprint path and you can specify asditional paths with use of -p or --path parameter.\n. This can be solved by using before and after hooks and database fixtures.\n. Of corse, you can use JSON Schema instead of JSON example in the blueprint. Here is an example.\n. I'm sorry, I'm not sure what do you mean. Can you be please more specific?\n. Hi, this feature is included in new release of Dredd 0.3.9. Just update your npm package. \n. Merged, added note about skipping to the readme and released...\n. Just a note: You don't need to disable the entire test for the action, though. You can just disable validation for some particular response body and let Dredd validate only headers with this simple workaround: https://github.com/apiaryio/dredd/issues/510.\n. Thank you for interesting use case, but t this moment there is no way how to prevent parameter substitution. When parameter is defined, example value is always used in the request, even if parameter is optional. \n. Just a little update:\nYou can specify two different examples (implicit requests and response pairs for the same action, and then modify request parameters in the before hook very similar way as in this example.\nMore straightforward syntax for this is discussed also in API Blueprint project: https://github.com/apiaryio/api-blueprint/issues/132 https://github.com/apiaryio/api-blueprint/issues/58#issuecomment-34958639\n. This is blocked by support for Parameters under each Request secction in the API blueprint https://github.com/apiaryio/api-blueprint/issues/58\nAt this moment, as a workaround, you can change the request URI in the before hook and describe used parameters in the Request description section.\n. Should be fixed here: https://github.com/apiaryio/dredd/commit/384e1928e3472c263087a24c3bb76671a183cd8e#diff-4fe94b7f756f84c61823b246b6738096R48\n. I suspect that it can be caused by trailing newline character in the expected or real response which should not be noticeable. \n. When you try it to parse it with curl https://raw.githubusercontent.com/sameergarg/rest/master/apiary.apib | snowcrash you can see that hello string in the AST is  wrapped with an apostrophe sign '. Remove apostrophes from the blueprint or add it to the response body of your server and it should work. I'll investigate why apostrophes are not shown in the Dredd's output result. \n. @sameergarg, did you manage to figure out why it was failing? Can you provide me the backend code to test it and investigate on my own?\n. We definitely want to support it, but it takes larger refactoring in Gavel to normalise validation output to avoid breaking dependent tooling.\n. Just for information, there is a fork and PR of Gavel using tv4 validator for v4 schemas. It will be probably supported in the master soon. I want to preserve backward compatibility for v3 to do not break existing builds of blueprints using v3 and any dependent tooling. \n. It's supported now, please update your Dredd.\n. Thank you for reporting this. It really seem to be a bug.\n. I'm sorry I'm not sure if I understand what you want to do. Can you be please more specific. What's jar? Can you provide some example?\n. I think this is an anti-pattern. Server for RESTful API should be stateless. So no cookies jar and no sessions. An API should not contain any protection against CSRF because it relies on some saved state of the client on the server.\n. HI, this will be solve in next release of Dredd respectively Gavel which is used in Dredd for validating HTTP messages. Only value of content-type headers will be validated. Other header values will not be validated, so your location header will pass.\n. Hi, this can be solved by creating response stash in hooks and replacing expected header value in the transaction before its execution.\n. Reopening after discussion in #108\n. Hi, \nwe recently changed the way how we validate headers in Gavel, please refer to: https://github.com/apiaryio/gavel.js/pull/53. Only values of content-negotiation significant headers are treated as constants. This functionality is in Dredd > 0.4.8. \nFor example: value of the Location header can be different in real response then given in blueprint. \nThis should fix this issue when you rely on data provisioned by server and you have no way how to retrieve it and modify expectation in before hooks. \nAdam\n. Thank you for the report. I'll try to replicate it and let you know.\n. Hi, this was implemented and  closed by https://github.com/apiaryio/dredd/pull/102. Please refer to  documentation how to use it.\n. Hi,\nmy opinion is, that best solution is to install Node.JS and Dredd locally even if it could mess up with user's or CI system as you mention.  If you don't wont to install it in global scope, just install it without -g option and run Dredd from ./node_modules/bin/dredd\nDredd is an additional tool in the stack for example same as JMeter or something else. In Rails I think it will be reasonable to create some kind of rake task wrapper for the Dredd CLI and make it part of your rake test:all task.\nI understand the need to use Ruby/Rails native tooling e.g. FactoryGirl in before and after hooks, but unfortunately I don't see lot of possibilities how to integrate Node.js Dredd HTTP transaction runner tighter with Ruby RSpec. Using Exec.JS or therubyracer to call Node.JS code in Ruby it seems to be crazy for me.\nFor me it sounds more reasonable to create some API and some inter-process socket/pipe to enable possibility to write hooks in any language with their native tools. But I think it will be always little bit complicated.\n. @gonzalo-bulnes Thanks a lot for the example and more info on your approach! My goal is to make Dredd as convenient as possible in non-node.js environments, in Ruby and Rails especially. And this is perfect contribution.\nI also saw some people using Dredd's --only argument from the rake task to run test cases from the blueprint one-by-one separately and doing setup and teardown between tests directly in the rake task in ruby.\nAbout not running a server: It's imho not possible with use of Dredd. It's because Dredd works on the HTTP layer. When you are testing controllers e.g. in Rails, you are testing Ruby interface of controller classes, not an interaction on the HTTP layer.\n. Hi @gonzalo-bulnes,\nthanks a lot! This is absolutely mind-blowing! I really like that Dredd CLI wrapper class! I think it's worth extracting it to dedicated gem. On the other hand passing Dredd configuration to the rake task is not much straightforward.\nPlease have a look on my fork of yours example application. I've created a concept of possible approach for hooks worker in Ruby. Run rake blueprint:verify and look for Yay! Failed in ruby hook in its output. :)  Dredd starts worker and connects to it in hooks and sends every transaction for execution in Ruby worker thru TCP socket. \nSo, you can write hooks in Ruby in doc/hooks/dredd-worker.rb for now . There's support only for before and after hooks, but it can be easily extended. Please, have a look at that and please let me know what you think and if it's useful for you. I'm also curious if it will work with FactoryGirl and company.\nDisclaimer: It's mostly a throw-away code. It must be refactored into modules and tested. I was just curious if is anyone really willing to use it. \nAny hints on usability of hooks are more than appreciated! :)\nAll the best!\n. This is good idea, I definitely want to add it.\n. Hi,\n  this was implemented and documented\nJust set fail property on transaction object in any hook to true or string with message and transaction will result to failed regardless result of its validation. \nYou can use chai library for setting custom assertions as well.\ncoffee\nbefore 'My resource > Create', (transaction) ->\n  transaction.fail = 'Failed in before hook'\nAdam\n. Thanks a lot for your contribution. Bumping version and releasing it afterwards.\n. Thanks a lot for the report, it will be fixed soon.\n. New package released including this patch.\n. @rickke Why do you think it's not a usable workaround?\n. @rickke You can modify both, the request and the expectation as well in the before hook. \nBut you are right that in blueprint example form #96 there is no previous request, where expected id of the entity can be retrieved from the server for later  modification of the expected response. (for example in when creating entity in the collection).  So this does not solves #96. Thanks for noticing that! \n. @pocketmax Do you mean this issue or #96?\n. Hi, this can be solved by using stash for responses in hooks and replacing desired value in transaction dynamically in before hook. Here is an example application using this pattern. \n. Thanks o lot for the fix, merged.\n. Released now in v0.3.14.\n. Good point with Hex string values, I agree.\n. Released now in v0.3.14.\n. Thanks a lot for the fix! Merging...\n. Released now in v0.3.14.\n. Fixed here: https://github.com/apiaryio/dredd/pull/114\n. This is more a Gavel issue, but I think the right way is to validate value only of some specific headers e.g. content-type and company.\n. Just for clarification, presence of all headers given in the blueprint will be validated as they are validated now, but exact match of value will be validated only for some headers.\n. @honzajavorek I agree. Would you mind providing some hooks code snippet and maybe add it to the documentation and provide link here?\n. This is solved in #148\n. @rikardq It's based on your work, thanks!\n. @JackuB Thanks for reporting this! I'm afraid this issue is not connected with the original one. The original issue was pointing out possible problem in validation of the real HTTP response to expected HTTP response given in the blueprint. \nI'm afraid in this case the RFC you're referencing to isn't relevant. In the example you've given you're manipulating a javascript object representing the HTTP request you're going to send over the wire with a javascript code.\nIn my opinion, if you'd like to set securely a value of some header even though it has been already defined to be sure it won't be sent twice you should access the object some case-insensitive way.\nThis points out another problem of current design of the request and expected response object. Dredd doesn't support using one header twice although you could want / need it. And you actually came up with a workaround solution for that :) Good job!  Let's track it here #412\n. Could it be hooks driven? Something like:\n``` coffee\n{before, after, dependsOn} = require 'hooks'\nbefore \"Machines > Machines collection > Get Machines\", (transaction) ->\n  dependsOn \"Machines > Machines collection > Create Machine\"\n```\n. @MarcusFulbright I'm sorry I totally didn't notice your EDIT in the original issue. It's very important, but I can't replicate it. Is this still valid? What version of Dredd and Node.js do you use?\n. @MarcusFulbright thanks a lot for finding time to provide me this feedback! It's super helpful even if you don't have access to the machine anymore. Your stress on missing of support for Windows is what's very important as well. I created an issue regarding that #204.\nDo I assume correctly that's the reason why you can't update Dredd to the latest which is 0.5.4 at this moment?\n. @MarcusFulbright Created new issue for crashing Dredd mentioned in EDIT here: #260\n. @JefStat Thank you very much for the feedback! There is a generic issue regarding Windows support here #204. Let's continue the discussion there.\n. Hi,\nthanks for the report! \n2485 at the end of the warning means the count of characters from beginning of blueprint file and 20 means count of characters belonging to that warning.\nI now it's little bit confusing, converting these numbers to line numbers is definitely what we want.\n. @pocketmax This was fixed, merged and released. Are you experiencing any inconvenience regarding this issue?\n. Thanks for the report, can you please try this fork of Dredd wich supports multipart messages if it works as you wish?\n. This topic is also mentioned here #74 and also in API Blueprint project  https://github.com/apiaryio/api-blueprint/issues/100\n. @igzsergiofernandez This is solved in #148\n. Hi, this was discussed here. There is work in progress on support for JSON schema v4 in Dredd (resp. Gavel). If you want to use it now, you can try this fork of Gavel linked with Dredd. It should work.\n. @hamczu It's supported now, please update your Dredd.\n. Thanks for question, I'll add some example how to use oAuth with hooks.\n. So, if you have access token  for the service under test, the situation is pretty easy. All you need is to add this access token as a header to all requests. It can be done: \n1. From the CLI with -h argument. If is this token confidential and you don't want to spread it, you can use your CIs environment variable.\n$ dredd blueprint.h http://localhost -h \"Authorization:Bearer tOkEn\"\n1. Programatically in hooks:\n   - Create hook file hook.coffee with following code:\n ``` coffee\n hooks = require 'hooks'\n\n # work around function to run some stuff before each hook\n hooks.beforeEach = (hook) -> \n   hooks.beforeAll (done) ->\n     transactionKeys = Object.keys hooks.transactions\n     for key in transactionKeys\n       hooked = hooks.beforeHooks[key] || []\n       hooked.unshift (transaction, done) ->\n         hook(transaction)\n         done()\n       hooks.beforeHooks[key] = hooked\n     done()\n\n hooks.beforeEach (transaction) ->\n   transaction.request.headers['Authorization'] = \"Bearer tOkEn\"\n ```\n\n\nrun Dredd with this hook:\n\n$ dredd blueprint.md http://localhost --hookfiles=hooks.coffee\nAdvantage of the hooks approach is that you can dynamically retrieve the token from somewhere with code before setting it to the request. If you want to OAuth authenticate only some API calls, just use only before hook for some specific transaction. \nPlease, let me know it this works for you.\nDisclaimer: this is based on my limited knowledge of OAuth\n. @MariMax Thanks for letting me know. :candy:\nIn the  latest Dredd, there is a direct support for beforeEach hooks, so you can omit declaration of the beforeEach function when you are using hooks:\nhooks = require 'hooks'\nhooks.beforeEach (transaction) ->\n  transaction.request.headers['Authorization'] = \"Bearer tOkEn\"\n. Hi @gonzalo-bulnes, thank you very much for your ideas. FactoryGirl, DatabaseCleaner and company in other languages are definitely tools which are testing-friendly people used to use and I definitely want to make them available in Dredd envronment.\nAbout bowels inside: \nMy idea was to use some type of *nix-like inter process communication: signals and named pipes or sockets\nWhen Dredd want to execute some hoook, it will emit JSON with type of hook, compiled HTTP transaction and its name to the pipe and it will wait for the response form hook worker/workers. Worker in some specific language will process all related hooks for passed transaction and after hook execution it will return transaction back to Dredd for execution and/or examination of transaction result.\nAll ideas, thoughts, improvements, requirements, or contributions are more than welcome! :)\n. @gonzalo-bulnes,\nit's totally cool what you did! I did some investigation about how to figure it out as well and I found out that the most straightforward solution will probably be to use a netowrk socket instead of named pipes. The reason is that node.js doesn't support named pipes, so there is not available mkfifo in node's file module. It would need some workarounds to use pipes in node.js which can be problematic on non-unix platforms and unlike named pipes sockets are fully duplex-capable.\nAdam\n. Hi @gonzalo-bulnes,\nhere are some notes about working proof of concept for hooks in Ruby. Let me know what you think, please.\n. Why is this feature not using already existing options.data property? I strongly prefer using existing options with same functionality insetad of adding new redundant one.\n. Nice!\n. Nice, thanks! But I'm nitpicking... :) This PR extends functionality of Dredd class, but you are not introducing any new unit tests for this in Dredd class unit tests, despite the fact you have tested this new functionality very nicely in the integration tests for the CLI, which I really appreciate. .\n. I also miss some update of README taking account of this change.\n. Nice! Thanks!\n. Hi, \nthis is an interesting one :)\nGenerally, at this moment Dredd is more focused on isolated testing of each entry in the blueprint (resource action examples) and hooks on to serve for doing setup and teardown between each transaction. It's because API Blueprint is designed as an API reference documentation format and it respects REST paradigm in its DSL. So I'm thinking about each action example as as it is a unit.\nI'm totally in for support of workflow oriented documentation and testing this workflows with Dredd, but it will need support in API Blueprint syntax. It's discussed here in the API Blueprint project.\nBut if you want to just pass data from one transaction to another, you can use response stash and modify request in the before hook. You can use same pattern for mixing in header with session data. You can also organise your blueprints in separate files and then run them all by specifying multiple paths with -p switch or by a glob. I hope it will be useful in this case. \n. @tkoomzaaskz, thanks a lot for valuable feedback! Here in the dredd-example repo is an example how to pass data between transactions in the hooks - from previous response to next request.\n. Hi,\n  I'd like to demonstrate one possible approach how to test chain-calls. As I mentioned above, main objective of API Blueprint is to describe REST APIs. But on the other hand, you can use API Blueprint's simple syntax for writing down any HTTP calls.\nFor example you have following blueprint in blurpint.md:\n``` markdown\nFORMAT: 1A\nMy scenario\nPOST /login\n\n\nRequest (application/json)\n{  \n  \"username\": \"john\",\n  \"password\":\"d0e\"\n}\n\n\n\nResponse 200 (application/json)\n{\n    \"token\": \"s3cr3t\"\n}\n\n\n\nGET /cars\n\nResponse 200 (application/json)[\n  {\n    \"id\": \"42\",\n    \"color\": \"red\"  \n  }\n]\n\n\n\nPATCH /cars/{id}\n\nParameters\n\nid (string,required, 1)\n\n\nRequest\n{\n  \"color\": \"yellow\"\n}\n\n\n\nResponse 200\n[\n  {\n    \"id\": 42,\n    \"color\": \"yellow\"  \n  }\n]\n\n\n\n```\nNow, get transaction names for hooks from Dredd CLI:\n$ dredd blueprint.md http://localhost:3000 --names\ninfo: Beginning Dredd testing...\ninfo:  > /login > POST\ninfo:  > /cars > GET\ninfo:  > /cars/{id} > PATCH\ncomplete: 0 passing, 0 failing, 0 errors, 0 skipped, 3 total\ncomplete: Tests took 4ms\nCreate a hook file hooks.coffee using these names:\n``` coffee\nhooks = require 'hooks'\nsetup response stash\nstash = {}\nhooks.after ' > /login > POST', (transaction) ->\n# stash transaction response for later usage\n  stash[transaction.name] = JSON.parse transaction.actual\nhooks.before ' > /cars > GET', (transaction) ->\n# add retrieved authentication token to headers\n  loginResponseBody = stash[' > /login > POST']['body']\n  transaction.request.headers['X-Api-Key'] = loginResponseBody['token']\nhooks.after ' > /cars > GET', (transaction) ->\n# stash transaction response for later usage\n  stash[transaction.name] = JSON.parse transaction.actual\nhooks.before ' > /cars > GET', (transaction) ->\n# add retrieved authentication token to headers\n  carsResponse = stash[' > /cars > GET']['body']\n# replace id in URL with ID retrieved in previous response body\n  newId= carsResponse.body[0].id\n  transaction.request.url = transaction.request.url.gsub(1, newId)\n```\nFinally run Dredd with hooks:\n$ dredd blueprint.md http://localhost:3000 --hookfiles ./hooks.coffee\nPlease let me know if this works for you and if does it fit your needs for testing of chained AJAX calls.\n. @tkoomzaaskz  Dredd command is testing data from API blueprint (HTTP tranasctions), and hooks are used to pass data from real responses to next requests. I'm really interested in what are you doing and I'm trying to achieve it. I'm available for a skype call if you want to discuss it, anytime.\n. Hi @LinusU,\nI'm sorry, but I have to repeat, that all functionality needed to achieve this is already present in Dredd and re-implementing Dredd in Mocha is in my opinion very hard and time consuming and it still doesn't make lot of sense for me. Can you please articulate the motivation behind this your effort and what you can't do using Dredd and you can with your approach?\nThanks a lot!\n\ud83c\udf6c\n. @LinusU answered here in #192\n. Just a little remark: Example for handling session in hooks was added to the documentation\n. Tracking now in #358 \n. Hi,\nthere is not direct support for adding any query parameters to all transactions. Dredd supports adding headers to all transactions with -h argument, so this is a reasonable enhancement in my opinion.\nThe only way how is this possible, at this moment, is with use of before hooks with workaround discussed in #63. Just define hook to be executed before each transaction:\n``` coffee\nhooks = require 'hooks'\nhooks.beforeEach = (hook) -> \n  hooks.beforeAll (done) ->\n    transactionKeys = Object.keys hooks.transactions\n    for key in transactionKeys\n      hooked = hooks.beforeHooks[key] || []\n      hooked.unshift (transaction, done) ->\n        hook(transaction)\n        done()\n      hooks.beforeHooks[key] = hooked\n    done()\nhooks.beforeEach (transaction) ->\n  # add query parameter to each transaction here\n  paramToAdd = \"api-key=23456\"\n  if transaction.fullPath.indexOf('?') > -1\n    transaction.fullPath += \"&\" + paramToAdd\n  else\n    transaction.fullPath += \"?\" + paramToAdd\n```\nDisclaimer: not tested, just an example of possible approach, if will not work for you let me know\n. Nice! :thumbsup:\n. Dredd validates only presence of keys in JSON bodies, so values are not tested for exact match. \nAt this moment problem is when you wont to validate only some presence of some keys and some mark as optional. But in the API Blueprint, there is ongoing work on support of MSON for describing data structures and their validations.\nIf you want to know more about how validation mechanisms works pleas refer to Gavel project and it's js npm.\n. @ducin Just letting know here's the way how to render MSON's from JS: https://tonicdev.com/zdne/mson-renderer\n. I'm sorry, but:\n- I can't find out any clear purpose of this pull request. It's not explained anywhere and it should be evident.\n- I assume it's a combination of:\n  1. refactoring of layer handling CLI\n  2. extension of Dredd class JS API to support custom configuration data e.g. for reporters\nMy 0,02$:\n- Please never refactor and introduce new functionality in one PR\n- It's fine that junk form bin/dredd was refactored and sliced into separate, more readable, JS testable layer under DreddCommand class\n- It's not fine that test/unit/command-test.coffee does not test functionality in DreddCommand, it's only a copy of CLI integration test which is end-to-end testing whole Dredd functionality through CLI interface. Unit tests for DreddCommand should test functionality and units in DreddComand class, such is:\n  - Handling expanded globs from shell and filling option['path']\n  - Showing help\n  - Showing version\n  - Error handling on missing arguments for blueprint and server\n  - Running Dredd\n  - Error handling for Dredd#run\n- It's* not* fine extending surface of DreddCommand class interface only for purpose of testing, it should be through mocking output from process.cwd etc..\n. Ok, thanks for the explanation. In my opinion it's not needed at all, because if you want to test behavior of  DreddCommand class, you can spy on console.log and use proxyquire with stubs and spies for loading dredd-command module. Get rid with it please and please don't be afraid to write proper unit tests. ;p\n. It's no problem with use of beforeAll hook.\n1. Create a hook file e.g. in hooks.coffee\n``` coffee\nhooks = require 'hooks'\nhooks.beforeAll (done) ->\n  requests = {}\n  for name, transaction of hooks.transactions\n    requests[name] = transaction.request\nconsole.log JSON.stringify requests, null, 2\n``\n1. Then dry-run Dredd with-yargument and suppress its output with-q` argument and the hookfile\n$ dredd blueprint.md http://localhost:3000/ -q -y --hookfiles=hooks.coffee\nPlease notice that if you want to debug hooks code, you have to remove -q from the command to see some output.\nLet me know, please, if it works for you.\n. @arvenil I'm afraid that you have to create some template by yourself :)\n. Hi,\nI'm sorry, but all keys given in JSON example for the response body are considered as required, so at this moment there is no other way than write a custom JSON schema for the response in the blueprint.\nAdam\n. But don't panic! :) There is upcoming support for MSON in API blueprint format for describing body attributes. This will allow to mark particular body attribute / property / field as optional.\n. Hey @andrerigon! MSON is supported since Dredd 0.5.1. I think it closes this issue. Did it help you?\n. Hi,\nprotagonist is updated in pending PR #167. It will be merged and released this week. I'm more curious if whole Dredd will work with node 0.12 and io.js :). Dredd is tested only on node 0.10 at this moment, so it's good point. \nI'm renaming this issue.\nCheers!\nAdam \n. @cades You can expect it very soon. It's WIP right now.\n. Hi dmtrs, this is released for more then one month when this issue was closed. Just update your Dredd installation. \nHave a look on build targets in .travis.yml:\nnode_js:\n  - \"0.10\"\n  - \"0.12\"\n  - \"iojs\"\n. Hi, thanks @ecordell for the response and @RassaLibre for forking Dredd and your contribution and I'm very sorry for the late reaction on my side. \nMy opinion is that URL and method is only an implementation detail or a mean how to do some transition (action) and it has nothing to do with API workflow or design. So general functionality for sorting based on URL space will probably not be implemented or it will not be merged to the upstream Dredd if you file a pull request. I'm sorry about that.\nBut if you want to make this functionality reusable and available for other users, you can write it as a beforeAll hook function where you have access to an array of transction objects before all transactions are executed. So you can do any magic there and it will be definitely better testable, because hooks have stable API, so you won't be forced to deal with stdout etc..\nIf you let me know where you host it I'll definitely make it part of the documentation.\n. WIP :muscle: \n. Just letting know that new Dredd was released right now and it brings support for MSON and Body Attributes description. \n. This issue shouldn't be closed because Dredd still doesn't support URI under actions. \n. API blueprint 1A8 is fully supported since Dredd 0.5.4\n. Used mkdoc instead. \n. I'm sorry about late response. I think this can be cause by not supported version of node.js. Which version node.js do you use? Dredd currently works only with node.js v0.10.x\n$ node -v\nIssue about update to node.js 0.12 is here https://github.com/apiaryio/dredd/issues/169\n. @berislavlopac I recommend to use Node Version Manager (NVM and install node 10.x as a workaround. Support for 12.x and io.js depends mainly on adding this support to dependant modules.\n. @berislavlopac I just released new version of Dredd which should fix this issue. Can you please update Dredd and let me know whether it works for you?\n. @berislavlopac Thanks for the information! I'm glad it works. \n. @smizell , would you mind adding brief manual how to install & run MKdocs locally?\n. @ecordell Of course, yes, you're right! :) This is valid only for automatic expectations based on example JSONs.\n. it's worth mentioning that solves #169\n. ...and this imho solves request for support of MSON in #171 because Drafter automatically expands MSON Attributes to body and bodySchema in the AST\n. @philsturgeon Thanks for the report. I'll release new version of Dredd with support for node 0.12 in a while and I hope your problems will go away.  :)\n. @philsturgeon Released, please try it and let me know whether it does work for you.\n. Thanks for opening this issue. I would love to help you, but I'm little bit confused, because you're mentioning Drafter in the attached stackoverflow question, but this is a Dredd repository. Is your problem Dredd or Drafter related? If it's Drafter related, please refer to its issues. \n. And just for information, Windows support for Dredd is WIP and it can be expected soon. It will include using Appveyor Ci for builds on Windows.\n. Hi @itsthatguy,\nthank you very much for the feedback. This feature you want to use is still in private beta in Apiary, and I agree that it can be confusing, so I removed it from the interactive setup in the latest release. If you want to use it just ping me at testing@apiary.io, I'll enable it to you and I'll be happy to give you further support.\nAdam \n. Hi @jolleon thanks for the report! I'm excited you're using Dredd and the test inspector in Apiary! I'll have a look on it asap.\n. Hi,\ntanks a lot, @ecordell for make it clear. Transaction object passed to the function object is very messy at this moment and there is some duplicate data (e.g. request.uri and fullPath). It's legacy of the evolution and it was never properly designed to be convenient even tough it's a regular API for writing hooks. My goal is to clean it up in some of next releases and make it as convenient as possible. I'll definitely create a proposal, and I'll carefully deprecate old structure. It will throw a deprecation warning  for some time.\n@jolleon Please note that one of things I will definitely move somewhere else is that uriTemplate key under origin against which you're programming. I apologise, but It was very unlucky decision to merge this change adding uriTemplate under the origin key. In the future, there will be probably some uriData object where will be available complete uriParameters from the blueprint and this uriTemplate for more convenient way to modify URI in hooks.\nHere is an issue to kick it off #187\n. Related to this issue i propose to unify structure of the transaction compiled in blueprintAstToRuntime, transaction object passed to hooks, test object emitted to reporters and the testStep sent to Apiary test reporter.\n. I'm most conecerned about unfortunate placement of /origin/uriTemplate in the transaction object. It will be probably moved somewhere else in the transaction object. This operation should be part of some deprecation process to do not make users of this property upset..\n. Hi @LinusU, thank you very much for the report. It should be definitely consistent. I'll try to find out whether it's not an intention and fix it in the next release eventually.\nI'm curious how you do you use Dredd. What's your application for Dredd's JS API?\n. Interesting, can I ask why do you prefer using Dredd JS API  and putting it into Mocha it block instead of use of CLI Dredd or grunt-dredd wrapper to make a test of your blueprint part of the overall test suite and analyse unix exit status?\n. @LinusU I'm not sure, if it's a lucky decision, because, you're actually reinventing the wheel which was already invented by writing Dredd. You will have to solve everything what's Dredd doing e.g. URI template expanding, URI parameters and headers inheriting, JSON schema generation, generating body, headers comparison etc..\n. Just letting know @LinusU I'm going to extract this HTTP transaction compiler which you call dredd-engine soon for possible reuse in other projects\n. @LinusU I think that you can solve this with beforeEach hooks. \nLet's try something like this:\n``` javascript\nvar hooks = require('hooks');\nhooks.beforeEach(function(transaction){\n  var user = 'john.doe';\n  var secret  = 'youS3cret';\n  var time = new Date().getTime();\n  transaction.request.headers['X-API-Sign'] = HMAC(user \":\" time \":\" transaction.request.body, secret)\n  transaction.request.headers['X-API-Key'] = 'someTokenProbably';\n  transcation.request.headers['X-API-Time'] = time;\n})\n```\nIf is the X-API-Key common for all API calls, you can pass it via CLI or JS API header option.\nUnfortunately, there is no way how to add hooks code (or string with code) via JS API. Dredd uses proxyquire module for hooks loading which does not support loading from string. \nYou will probably have to create separate hook file and it make part of the test suite and use JS API option hookfiles to point Dredd to its location.\n\nDisclaimer: Code is not tested, it's just a draft of possible solution.\n. Please, if you can let me know whether it worked for you, I would appreciate it.\n. This part of configuration is used only for sandboxed hooks and it accepts a string, not a function. I'm sorry, it's not particularly mentioned in the documentation. I'll fix it.\n\nhooksData: {\n    'sign.js': generateSignFunction(res.env, res.apiKey)\n  }\nYou have to create a file on the filesystem and this hookfiles: ['sign.js'] should point to that file relatively. \n. hooksData are not evaluated when the sandbox mode is not on.\n. Thanks a lot for this one. :) It's definitely an error in the documentation. I'll fix it. It should be:\n```\nvar hooks = require('hooks');\nvar before = hooks.before;\nbefore(\"Machines > Machines collection > Get Machines\", function (transaction) {\n  // parse request body from blueprint\n  requestBody = JSON.parse(transasction.request.body);\n// modify request body here\n  requestBody['someKey'] = 'someNewValue';\n  transaction.request.body = request.body;\n});\n```\n. You're right, It should. :smile:  As I said, I only drafted a possible solution. I apologise, I didn't test it at all.\n. Hi @jolleon, it's awesome and I'm glad to hear that you're using Apiary reporter! Saving reports under a suite in Apiary is a feature in private beta at the moment in. Please send me your Apiary sign-up email address to adam@apiary.io and I can let you in.\n. Hi @LinusU,\nthis is a reply for your question in #151. I think it fits more here than to that issue.\nI'm so sorry it took me this long time to respond you and thank you for pinging me. \ud83d\ude0f It's super awesome how you are thinking about Dredd and how to connect it with Mocha. It's very helpful to have a feedback from a experienced JS developer like you.\nAbout your points:\n1. Deep property testing\nBest practice for doing this is to use chai in Dredd's hooks and write an imperative assertion on properties and values which you want to validate. You can easily write a function for dynamically generate assertion for all properties by traversing the object. Dredd is able to catch Chai assertion errors (e.g. assert.deepEqualwhich you mentioned above) as a reportable errors the same way as Mocha is doing it. Think about hook functions like about Mocha's it blocks.\n2. Sending requests imperatively\nJSON bodies for request and expected response come from the blueprint as text. They are always serialized to string, so you can't avoid body deserialization if you want to validate the object structure or change it before or after execution.\nI'd like to stress that Dredd is suppose to be language agnostic testing framework for HTTP APIs and their documentation. Think about Dredd as about integration framework. Avoiding the HTTP stack does not make lot of sense, because APIs can be split across\nThe signature for the hooks functions is exactly the same how you wrote above: (transaction, done) Please take a look at the transaction object documentation, there are accessible both request and expected response objects. You can do anything with these objects before and after the transaction is fired. It's only an upside-down approach in comparison to what you propose, but it does absolutely the same in my opinion.\n3. Integration with existing test suite\nThank you very much for stressing how important is to lowering the barrier for users with existing test suites. Developer experience and steep learning curve has to be first class citizen in Dredd. This is the reason why dredd init was introduced and lot of documentation was added in the past.\nMy strong belief is that Dredd is completely different test framework than Mocha and it should not be part of Mocha itself. It's a different tool for running and testing HTTP transactions. Dredd is intended to be language agnostic with future support for hooks written in Ruby, Python etc... \nIt's something very similar to jMeter or other testing tools. They are part of the overall test suite and they are not integrated into main Mocha. You can wrap them in some grunt or gulp task. And pipe the exit status to tthe CI or you can create a simple shell script wrapping all test suites together.\nPlease let me know what you think. I'd love to discuss it further if you want. As I said I totally welcome any feedback and new points of view. If you want, we can schedule a call regarding this, just let me know when it works for you at adam@apiary.io.\n. Hey @LinusU I anything I can help you with? As I mentioned I'd love to discuss it further to make everything mentioned above more convinent. I'm happy to have a call with you anytime it fits to you regarding this. Just ping me. \n. Hi @neonichu,\nthanks a lot for reporting this issue and sorry for late response. \nCan you please submit the evidence blueprint? I'll try to find some workaround. I suspect that you are using Body Attributes section, where is specified that the value of the httpBasicUsername key should be a string. In that case simple null is not valid value, because null is primitive type null not string.\nBut problem is that as far as I know there is no way how to describe null type in the MSON which is used for Body Attributes description in the blueprint.\nI reported it here.\nAdam\n. Interesting. It seems that it's a drafter.js or drafter issue. Drafter takes parsed MSON AST and transforms it into a JSON schema representation which Dredd with use of Gavel uses for validation of the body. But generated JSON schema doesn't validate values, only their types. \nThis is JSON schema generated from your MSON. When there is no type given in the MSON it should definitely not expect that value is a string.\nI reported it here\njson\n{  \n   \"type\":\"object\",\n   \"properties\":{  \n      \"sys\":{  \n         \"type\":\"object\",\n         \"properties\":{  \n            \"type\":{  \n               \"type\":\"string\"\n            },\n            \"id\":{  \n               \"type\":\"string\"\n            },\n            \"version\":{  \n               \"type\":\"number\"\n            },\n            \"space\":{  \n               \"type\":\"object\",\n               \"properties\":{  \n                  \"sys\":{  \n                     \"type\":\"object\",\n                     \"properties\":{  \n                        \"type\":{  \n                           \"type\":\"string\"\n                        },\n                        \"linkType\":{  \n                           \"type\":\"string\"\n                        },\n                        \"id\":{  \n                           \"type\":\"string\"\n                        }\n                     }\n                  }\n               }\n            },\n            \"createdBy\":{  \n               \"type\":\"object\",\n               \"properties\":{  \n                  \"sys\":{  \n                     \"type\":\"object\",\n                     \"properties\":{  \n                        \"type\":{  \n                           \"type\":\"string\"\n                        },\n                        \"linkType\":{  \n                           \"type\":\"string\"\n                        },\n                        \"id\":{  \n                           \"type\":\"string\"\n                        }\n                     }\n                  }\n               }\n            },\n            \"createdAt\":{  \n               \"type\":\"string\"\n            },\n            \"updatedBy\":{  \n               \"type\":\"object\",\n               \"properties\":{  \n                  \"sys\":{  \n                     \"type\":\"object\",\n                     \"properties\":{  \n                        \"type\":{  \n                           \"type\":\"string\"\n                        },\n                        \"linkType\":{  \n                           \"type\":\"string\"\n                        },\n                        \"id\":{  \n                           \"type\":\"string\"\n                        }\n                     }\n                  }\n               }\n            },\n            \"updatedAt\":{  \n               \"type\":\"string\"\n            }\n         }\n      },\n      \"url\":{  \n         \"type\":\"string\"\n      },\n      \"httpBasicUsername\":{  \n         \"type\":\"string\"\n      }\n   },\n   \"$schema\":\"http://json-schema.org/draft-04/schema#\"\n}\n. @nevir Thanks for proposing this solution! My humble opinion is that it's supposed to be not a workaround in Gavel but in Dredd. \nIt's interesting, I was initially going to recommend to achieve this without hacking Dredd by writing a beforeEach hook, where you can traverse the parsed response object and modify it by striping keys with null values or convert them to strings.  \nBut then I realised it needs the server response to be modified before the validation which is not supported in Dredd at this moment. So the proper workaround is to write support for beforeEachValidation and beforeValidation hooks in Dredd and then write appropriate hook :) Something like:\n```\ntraverse = require('traverse');\nhooks = require('hooks');\nhooks.beforeEachValidation(function(transaction){\n  var response = JSON.parse(transaction.real.body);\n  var newResponse = traverse(response).map(function(){\n    if(this.node === null){\n      this.update(String(this.node));\n    };\n  transaction.real.body = newResponse.stringify()\n});\n```\nI created issue #221 for support for this types of hooks.\n. Stressed in Drafter.js issues\n. Hi @neonichu,\nthanks for the report and for opening this issue and for the feedback! I'm excited you're using Dredd! \nI'm sorry, but I'm afraid this is not a bug. My intention here was when you declare body should be a parseable JSON in the content-type header, Dredd tries to parse it regardless the status code 204 No Content. \nMy opinion is that it makes no sense to send any content-type header, because there is no content. :)\nSee [RFC2616, \u00a77.2.1]http://tools.ietf.org/search/rfc2616#section-7.2.1()\n\nAny HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body.\n. Thanks for pointing this out. Do you think that Dredd should not parse body on 204 status code and throw an error if the body is present?\n. Well, I'll rename this issue if you don't mind :) Thank you!\n. @milch Thanks! :candy: \n. Just letting know I proposed a solution for this issue here #556 with a temporary workaround solution with use of hooks.\n. HI @milch, thanks a lot for the report! I'm excited to see you're using Dredd! \n\nIt's interesting it's working on your local computer and it doesn't work in Jenkins. Does your Jenkins have an access to the internet? Can you please send me output from dredd --version;  node -v from both environments? Which version of rails do you use? I would love to replicate it. It would  be super awesome if you could create a stupid simple rails app with isolated controller for this specific problem, verify that it fails in Jenkins and send it to me.\n. Thanks a lot @milch for all the info and for you effort with isolating it! I'm looking forward to it!\n. Hey @milch!  I'm sorry for responding this late. Thank you very much for all your time spent on this. You did an extra good job! It's incredible how you manage to debug this super obscure causation. I confirm it does the same for me. It's a valid bug.\n. I apologize, but I miss documentation update for this feature. May you please, @kuba-kubula ?\n. With \"this feature\" I mean hooks.log and log.\n. @kuba-kubula I think that it would be nice to have section called \"Logging and Debugging\". What do you think?\n. \ud83c\udf6c\n. Interesting feedback is here: https://github.com/apiaryio/dredd/issues/126#issuecomment-125994574\n. I assume this was fixed by freezing the async dependency to specific patch-level version and it has to be refactored to be working with recent async in the future. Am I right @kuba-kubula?\n. Hi @muthuegrove,\ncan you please upgrade to 0.6.0? We froze some dependencies in last version. Can you please try it and let me know whether it works for you?\n. Hi, it's was a problem in the async library. It changed behavior in minor release and it wasn't limited in package.json to patchlavel updates only.\n. Hi @hutchi, \nthank you very much for opening this issue and for providing feedback. I'm excited you're using Dredd!\nI absolutely agree, this \"Canonical blueprint path convention\" behaves inconsistently and it's almost not documented. The reason is it evolved by time and it was never designed for this purpose. \nThis inconsistency with single and multiple blueprints is for keeping it backward compatible after introduction of support of multiple blueprint files.\nI would prefer document the transaction and path compiler properly and to extract it to a dedicated package. It would find usage in various other applications. Imagine for example a wrapper for nock based on this convention.\nAdam\n. Will be solved by introduction of Canonical Transaction Paths in #227\n. HI @Abhinay12,\nthis is repository and issues tracker for Dredd - testing tool for API Blueprint, can you please be more specifc about how Dredd and Postman are connected?\n. @Abhinay12, btw did you find out how to do it in Postman? Is it possible?\n. @Abhinay12 Just for you information, this is exactly possible with use of Dredd hooks Please let me know in case of any questions. I'm happy to help. \n. Hi @chrislondon, this is unfortunately not possible at this moment. I consider it as very useful future feature.\n:+1: \n. Actually, this is maybe even better then I thought initially. This could make possible to do a huge clean-up in Dredd codebase and move lot of stuff under hooks - some kind of plugin architecture.\nAll this all functionality should be moved under hook architecture:\n--dry-run\n--names\n--only\n--header\n--sorted\n--user\n--method\n. Hi @chrislondon! \nThis newline comes from the API Blueprint parser and I'm sill not sure whether Dredd should automatically strip it or not.\nThanks a lot for your code snippet, I made it a part of Dredd's documentation.\n. Hi @yzaslavsky!\nThanks a lot for opening an issue here! It's super awesome you're using Dredd and you can provide this valuable feedback.\nI'd love to help you, but I may need more information. Are you mentioning JSON schema generated from MSON or it's a schema authored by you? If you could send me the blueprint and the response body which is not passing the validation it would be very helpful.\n. Hey @nevir! Great job! Thank you very much. I extended your work in #224 with some test to don't drop coverage and with some little documentation. Once it will be merged I'll close this PR and do a release immediately and let you know.\n. @nevir Just letting know that support for beforeValidation and beforeEachValidation was released yesterday in Dredd 0.6.1. Thanks again for great contribution!\n. Hey @carrollgt91! Thank you very much for perfect report. I confirm I can replicate it and it's doing the same.\n. Will be probably coupled with #227\n. Implemented here https://github.com/apiaryio/blueprint-transactions/pull/1. To be implemented in Dredd's hook handler.\n. Thanks @honzajavorek so much for this proposal incorporating solution for identifying multiple request and responses addressing #25 #294 #361 and others\nMy $0.50 would be:\n- Dredd should throw a description error and exit with non zero status code if some path isn't unique across all API documents loaded to the runtime\n- Please provide Transaction Path Origin and Path Examples for all Request-Response pairs in the \"Full Notation with Multiple Requests Each Having Multiple Responses\" example\n- When you are referring to some Transactionorigin object, please distinguish between the legacy Transaction Name Origin used for the Transaction Names or the actual Transaction Path Origin used for these Canonical Transaction Paths\n- Please stress the fact this change isn't braking the backward compatibility for integrations with the Transaction Name Origin object in the transaction object being passed to hook functions and hooks using Transaction Names. \nThe Transaction Name Origin and Transaction Name  will be still supported but it will be considered as deprecated. The name compilation will be maintained in the reporters not in the transaction compiler in the future.\nRegarding the Multiple Request and Responses support:\n- For keeping the backward compatibility I propose Dredd to test only the first Transaction (first request and first response in the Example) by default.\n- All other transactions from the Example will be passed to the runner as skipped (transaction.skip = true)\n- Any skipped transaction can be enabled by \"unskipping\" it in hooks (transaction.skip = false)\n- Introduce JS and CLI option for enabling all transactions (request-response pairs) to be tested by default e.g. --unskip-all or --all-pairs\n. @d0ugal Thanks a lot! \ud83c\udf6d\n. Hi @muthuegrove! Thank you for the question. I'm afraid it's an expected behavior. It's the Gavel library what's responsible for the validation of bodies.\na/ Structure of objects in the Array is not validated. Request for this feature is here  #177 \nb/ Gavel validates presence only of keys given in the example, additional keys are allowed. I think it's meaningful to make additional keys in bodies a warning. I created an issue #232 for that\n. This is possibly a duplicate of #177\n. Hi @marlandy, thank you very much for raising this issue! I would totally love to have support for application/xml mediatype in Dredd and Gavel validator respectively. Definitely +1\n. @marlandy @honzajavorek I think all needed infrastructure is already in place. I've quickly drafted some possible workaround solution here\n. Adressed in #332 \n. Hi, can you please be more specific? What do you mean with implement? Write a API Blueprint?\n. @kylef, unbelievable, how can you know I today switched to a new MBP?\n. Wow! @MichaelHirn, thank you very much for contributing!\n. Hi @pgconreaux,\nI'm sorry for response this late and thank you very much for the report. Dredd definitely should not crash like this in any case. Would you mind sending me whole blueprint or at least parent section for this request? It will be very helpful.\nThanks!\nA\n. Hi @MichaelHirn,\nthis will be solved in the next release by adding Chai to the proxyquire path for hooks, so manual npm install chai --save won't be necessary anymore. \n. Hi @efavre,\nthis make perfect sense. Thank you very much for your suggestion! Much appreciated. \ud83c\udf52\n. Hi @ddelnano, first of all, this all is absolutely awesome and it's definitely a Dredd issue! Huge respect! I'm super excited about it! I'll do my best to give you the best possible support. Just give me a while, I have to learn PHP a bit and make it work locally :)\nThank you very much for your excellent work!\n. note: It was discussed here: https://github.com/cucumber/aruba/issues/296\nSolution: use @announce instead of @debug tag in Aruba/Cucumber tests...\n. @honzajavorek Workaround solution for this could be one afterEachValidation hook and adjusting the transaction object:\n- remove the Gavel results and the test.valid property\n- do the custom validation based on expected data from the transaction object\n- set the test.status\n- set the test.isValid\n- use the same results data structure for the custom validator output\n. You can do that already! Just look to the documentarion for custom chai\nexpectstions in hooks.. Hi @jessedc @stianborgesen,\nthis should work, Dredd/Gavel should support both Json Schema v3 and v4. This is a v4 feature, but the functionality in Dredd depends on underlaying JSON schema validator. I suspect it's a bug or feature of this validator. I'll investigate further...\n. Hi @ddelnano, it's absolutely super awesome, I'm just waiting for the graphics, because I want PHP logo to be part of the banner in the readme. I'll let you know soon!\n. @ddelnano And that Lavarel example? Very lovely... \ud83d\ude3b\n. @ddelnano I think the best way how to propose a feature for dredd hooks for all languages is to rise an issue here in Dredd repo. It would be nice to keep discussion related to all languages and implementations here. :)\n. @ddelnano Once again many thanks for you contribution! Send me your address and size to adam@apiary.io and I'll send you one of these:\n\n. Hi @ddelnano,\nmay I know why did you close this? Is it not valid anymore?\n. Looking forward @obihann! Thanks a lot for all your contributions!\n. Hey @snikch,\nI must say I'm amazed. It would be absolutely awesome to have support for Go hooks in Dredd! Thank you for pioneering the way in Dredd for compiled languages. \nCan I ask what's the status of your effort? Can I help with anything? Is anything blocking in Dredd I can help with? Do you have any public repository, where you're developing this which could I watch?\nAdam\n. @snikch Thank you very much! That's perfect! I'm super excited about it! \ud83d\ude46\ud83d\udc81\ud83d\ude45\ud83d\ude46\ud83d\ude4b\nWhen you feel it's stable it would be super cool if you could write similar set of examples as provided for other languages and file a pull request. For inspiration have a look at the PR with PHP hooks. (https://github.com/apiaryio/dredd/pull/255).\nSend me please your tee size at adam@apiary.io, I'll send you one of these:\n\n. Hi @earnaway,\nI made it part of requirements for hooks handler client in Dredd refactoring in #235.\n. Big move forward - addressed in #332, implementation in CLI will come in one of next releases.\n. Hey @VimalDhaduk1,\nthank you very much for reporting this issue! According to line 605 It seems there is problem with installing package clone@1.0.0 on windows. May you please try to install this package and paste the output here?\nJust to let you know, Dredd is not officially built on windows, but it should work. :) See issue #204\n. @wvi, squashed. \n?\n. Should be hopefully adressed in #332. It's an issue with idle event-loop. I and @w-vi  we didn't manage to debug it, but little setTimeout is succesfully waking the event-loop. \n. Hi @obihann,\nyou're right, this a Drafter issue. Drafter compiles JSON schema from MSON and this JSON schema is used for Gavel validation of server response. Since this feature will be introduced in Drafter it's only a matter of bumping Drafter version in Dredd to support it.\n. Hi @obihann,\nMainly, thank you very much for all your enthusiasm and and contributions but at this moment, updating to the latest protagonist won't solve your issue with nullable parameter. Drafter (not .js) used in the latest protagonist doesn't have feature parity with drafter.js (yes, .js) which supports JSON schema rendering from MSONs. Updating to the protagonist would cause complete disabling of validation of MSON structures in Dredd.\n@zdne confirmed the Blueprint team is working on support of JSON schema rendering in the Drafter (not .js) used in the latest protagonist and they are treating it as a priority.\nIf this is a limitation for using Dredd in your actual project, I would propose some workaround in beforeAll hooks where you can modify the generated schema in the transaction object under the expected.body.schema property.\n. # Nullable Attribute MSON type workaround\nHere's a little workaround. If you use these hooks given bellow and include a #nullable hashtag in the Attribute description, the null will be added as an acceptable type to the JSON Schema. The only catch is the #nullable hashtag will be rendered in the documentation.\ncc @justinabrahms @philsturgeon @obihann\nExample blueprint:\n``` apib\nMy API\nMy Resource [/my_resource]\nIts Action [GET]\n\n\nResponse 200 (application/json)\n\n\nAttributes (My Structure)\n\n\nData Structures\nMy Structure (object)\n\nmyKey: myValue (string)\ndestination:  (object, nullable, optional) - Some description #nullable\nsomeObject: (object)\nitsKey: (string, nullable, optional) - Some other description #nullable\n```\n\nJSON Schema before:\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"myKey\": {\n      \"type\": \"string\"\n    },\n    \"destination\": {\n      \"type\": \"object\",\n      \"description\": \"Some description #nullable\"\n    },\n    \"someObject\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"itsKey\": {\n          \"type\": \"string\",\n          \"description\": \"Some other description #nullable\"\n        }\n      }\n    }\n  },\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n}\n```\nJSON Schema after:\n``` json\n{\n  \"type\":\"object\",\n  \"properties\":{\n    \"myKey\":{\n      \"type\":\"string\"\n    },\n    \"destination\":{\n      \"type\":[\n        \"object\",\n        \"null\"\n      ],\n      \"description\":\"Some description #nullable\"\n    },\n    \"someObject\":{\n      \"type\":\"object\",\n      \"properties\":{\n        \"itsKey\":{\n          \"type\":[\n            \"string\",\n            \"null\"\n          ],\n          \"description\":\"Some other description #nullable\"\n        }\n      }\n    }\n  },\n  \"$schema\":\"http://json-schema.org/draft-04/schema#\"\n}\n```\nJavaScript hook:\n``` js\nvar hooks = require('hooks');\n// Recursively add null as acceptable type if there is string\n// \"#nullable\" present in the property description\nvar patchPropertiesWithNullable = function(schema) {\n  if (typeof(schema['properties']) == 'object' && ! Array.isArray(schema['properties'])){\n    for (property in schema['properties']){\n      var partialSchemaToPatch = schema['properties'][property];\n      schema['properties'][property] = patchPropertiesWithNullable(partialSchemaToPatch);\n    };\n  };\nif (schema['description'] !== undefined) {\n    if (schema['description'].indexOf(\"#nullable\") > -1) {\n      if (schema['type'] === undefined) {\n        schema['type'] = 'null';\n  } else if (typeof(schema['type']) == 'string') {\n    schema['type'] = [schema['type'], 'null'];\n\n  } else if (Array.isArray(schema['type'])) {\n    schema['type'].push('null');\n\n  };\n};\n\n};\nreturn(schema);\n};\nhooks.beforeAll(function(transactions, callback) {\n  for(index in transactions) {\n    var transaction = transactions[index];\n    if(transaction['expected']['bodySchema'] !== undefined){\n      var schema = JSON.parse(transaction['expected']['bodySchema']);\n      schema = patchPropertiesWithNullable(schema);\n      transactions[index]['expected']['bodySchema'] = JSON.stringify(schema, null, 2);\n    };\n  };\ncallback();\n});\n```\nRuby hook port:\n``` ruby\nrequire 'json'\ninclude DreddHooks::Methods\nRecursively add null as acceptable type if there is string\n\"#nullable\" present in the property description\ndef patch_properties_with_nullable schema\n  if !schema['description'].nil?\n    if schema['description'].include? \"#nullable\"\n      if schema['type'].nil?\n        schema['type'] = 'null'\n      elsif schema['type'].is_a? String\n        schema['type'] = [schema['type'], 'null']\n      elsif schema['type'].is_a? Array\n        schema['type'].push 'null'\n      end\n    end\n  end\nif schema['properties'].is_a? Hash\n    schema['properties'].each do |key, value|\n      schema['properties'][key] = patch_properties_with_nullable value\n    end\n  end\n  schema\nend\nbefore_all do |transactions|\n  transactions.each_with_index do |transaction, index|\n    if ! transaction['expected']['bodySchema'].nil?\n      schema = JSON.parse transaction['expected']['bodySchema']\n      schema = patch_properties_with_nullable schema\n      transactions[index]['expected']['bodySchema'] = schema.to_json\n    end\n  end\nend\n``\n. @philsturgeon Tanks for the feedback! I'll check it. \n. @philsturgeon, I updated the JS hooks above. Please try it again. I should work\u2122. Please note this workaround will work only withnpm install -g dredd@1.0.1`. Ping me on Twitter DM in case it won't work and you need any mental support. We can schedule a little Skype or whatever else. I'm happy to help.  \nAnd I have bad news regarding support of nullable without this dirty hack. Last release of Protagonist and last release Dredd enabled support for Node 4 and Node 5, but unfortunately it still doesn't support nullable in JSON schemas. Many apologies for misleading information. \n. Hi @o5,\nthe upgrade is waiting for full MSON support and its JSON schema representations rendering in the protagonist dependency. Once it will be available it will be upgraded in Dredd as soon as possible, added build for Node 4 and released.\n. @romansklenar Thanks for reporting this! Would you mind providing some more information about your system and version of Dredd you're using?\n. @masone may you please share the whole Dredd command and/or dredd.yml configuration file, please?\n. @masone Thanks for additional info! BRB :)\n. @masone Thank you again for the super helpful debug info you submitted here. I manage to hunt this bug down and here is a PR with fix #331. I'll do the release after PR review and merge. wink-wink @honzajavorek @w-vi\n. @ouziel-slama I think it's a great idea, tracking it here #323. +1 it has to be tested properly and tests have to pass. Please feel free to re-open this or file a new PR.\n. Hi @trimonkee, this is a known issue. Node > 0.12 is not supported yet due to dependency on drafter.js and waiting for release of new protagonist with support for rendering JSON schemas from MSON. \n. Tracking issue is #292 \n. @3dtomato If is this an issue feel free to reopen.\n. @kylef Thank you very much for mentioning it here. It's already reported here: #294 and there's a pull request in the blueprint-transaction repo waiting for review, merge and regression tests here in Dredd. https://github.com/apiaryio/blueprint-transactions/pull/3 \nWould you mind confirming this issue and PR is solving your problem? Please fell free to reopen this issue if not.\n. @w-vi Thanks for the info!\n. Hey @amuino! Is this still an issue? Did you figure out?\n. @amuino Thanks for the info! :)\n. Totally +1 for this!\n. @ascripcaru Would you mind reviewing why are tests failing and open the PR again?\n. Bloody flaky tests, closing, trying to redo on master.\n. > Ok, finally the installation is working.\nGlad to hear that! \ud83d\ude03\n\nAnyway, VS2015 takes approx. 9GB.\n\nSad to hear that. \ud83d\ude14\nPerhaps @kylef, @pksunkara, @w-vi or @klokane may help?\n. @honzajavorek @XVincentX Do you mean the format of the message sent to the language hook handler via TCP socket?\n. @XVincentX I think it's generally a good idea! TCP server was used intentionally because of a need of duplex, real-time, synchronous communication. I was considering HTTP, but it would need two HTTP servers. One, in the hook handler for submitting transactions and one in Dredd for accepting transactions after hook execution. \n. The idea of testing Dredd with Dredd sounds \ud83d\udc4c. But it's a lot of work and we don't control all of the hook handler repositories, so coordinating the migration to a different API is something that we should consider as well.\n. @XVincentX \n\nworking on dotnet ones\n\n\ud83d\ude3b\ud83c\udf89\ud83d\udc4d\ud83d\udcaf\ud83d\udd1d\n. If you mean configurable wait time to spawn the hook handler, it's a WIP feature. Comming soon. :)\n. @honzajavorek I think it's CONNECT_TIMEOUT. Right @XVincentX ? The worker client is trying to reconnect to the server repeatedly until this times out.\n. Thanks for the issue. I think it should gracefully fail at least :) \nHow was the message malformed? Was it an invalid JSON or a valid JSON with some unexpected structure?\n. It's WIP in the big hooks spawner refactoring branch.\n. I'm aware of the fact the coverage dropped, but I was manipulating some hardly testable corner-cases.\n. @masone That's strange. Would you mind sending me the output from npm install and your node and system details?\n. I suspect coverals and coverage reporter for not including CLI integration tests.\n. @honzajavorek I know. It's hella complex. This is paying back the technical debt made during the hook handler implementation and the --server feature introduction and we should probably review it with @w-vi because he's familiar with the hook handler TCP bridge implementation.\nI tried to fix all developer experience and productivity issues like flaky tests, build time, poor test isolation and code readability caused by all the cut corners.\nPlease wait with review until I remove the do not merge warning and I ping you.\n. @Almad Thanks a lot for this!\n. +1 for shielding Dredd users from this infomration. But please note, this is only a Node,js < 0.12 issue.\n. @honzajavorek This is perfect! I'm so excited! \ud83d\udc81\ud83d\ude45\ud83d\ude46\ud83d\ude4bThank you!\nPlease feel to merge when my comments are addressed. \n. Awesome! Merging!\n. HI @romansklenar, \nThis makes perfect sense to me. I think it will be very easy to implement and it can be coupled with some work on CLI arguments in very near future.\n328, #235, #323, #321, #270, #251\n. @ddelnano Not at all. I'm sorry I was travelling. Merging now! Thanks a lot for updating it!\n. Good idea I think. Might improve the integration possibilities. +1\n. Hey @mypark,\nWould you mind trying it again with an Apiary reporter and send me the link to the report? I'll try to investigate and help you.\n. Hey @lusol @jakehow, thank you for reporting this! It is definitely a valid bug. \nIt's probably caused by having a sub-directory in some glob path.\nI was able to replicate it with:\nnetmilk$ ./bin/dredd ./test localhost:3000\n/Users/netmilk/projects/dredd/lib/dredd.js:223\n          return readCallback(readingError);\n                 ^\nReferenceError: readCallback is not defined\n  at /Users/netmilk/projects/dredd/lib/dredd.js:223:18\n  at fs.js:305:16\n  at FSReqWrap.oncomplete (fs.js:95:15)\n@honzajavorek It's because readCallback is not even defined in this file. It's supposed to be callback instead. We need to add a test for a glob path with some subfolders.\n. @lusol @jakehow It will be fixed asap with high priority. Thank you again for reporting this! All your feedback was super helpful for tracking it down.\n. This is know limitation of the current implementation:\n- order of headers in the AD is ignored\n- it's not possible to use same header multiple times, value of the last defined header is used\n. I'm sorry, AD = API Description a.k.a API Blueprint document :)\n. Hey @Mkax,\nDredd is designed at this moment to be more a tool for unit testing of each entry in the API Blueprint API reference and hooks are meant as a tool how to isolate and do some setup and teardown for each transaction. \nIf you'd like to test some workflows or scenarios (more integration or functional-like testing) I would recommend using the simple API Blueprint notation which is not resource oriented and is focused more on describing the HTTP calls. You can use multiple blueprint files - one per each workflow (scenario) using the --path CLI parameter and the \"stash\" pattern in hooks for passing data between transaction responses and requests.\n. @Mkax And I would totally love to have native support for scenarios/workflows in both Dredd and API Blueprint and using items from the reference as steps in these scenarios.\nOr at least, some support for custom ordering of transactions.\n. @Mkax Thank you so much for the explanation! I think it's totally testing of API scenarios / workflows. I would absolutely love to have this functionality so I'll try to come up with some proposal or workaround.\n. Here is another real-world insight: https://github.com/apiaryio/dredd/issues/151#issuecomment-82647333\n. @abtris @honzajavorek Guys! Beware! I suspect there's a typo in the original doc/hooks-perl.md documentation for the Perl hooks. It should be cpan no cpanm. \n@w-vi, would you mind confirming?\n@honzajavorek If it is a typo, would you mind fixing it in the doc?\n. I'm not sure if this is an actual solution for the confusing message about decreasing coverage when editing Documentation. Coverage should be calculated from the annotated JS code and no Markdown files can be annotated. But it's nothing bad to exclude the documentation explicitly. \n. I think it has no effect. Closing.\n. @kuba-kubula Please elaborate, I'm afraid I don't understand what do you mean.\n. @kuba-kubula @honzajavorek I meant this:\n\nUnfortunately Coveralls is in READ-ONLY mode due to database Upgrade event today... :(\n. Hey @ungrim97,\n\nThis is absolutely awesome! It's super exciting to have support for Perl in Dredd! Thank you so much for this fantastic contribution.\nWould you mind doing several tweaks?\n- [x] Please set-up Travis CI for the repository\n- [x] Please add the Cucumber/Aruba test suite to the Travis file\n- [x] Add the Travis badge to the Readme\n- [x] Please file a PR for Dredd documentation with examples a brief how-to similar to other languages \nLet us know here when it's done, please. We'll add your project repo to our integration builds for the pre-release QA.\nThanks!\nPS: Send me your t-shirt size and address If you're interested in one of these:\n\n. @ungrim97 That's perfect! Thank you so much again!\n. @abtris What do you think is wrong on that? dredd init is adding the before_script part to the document.\n. @abtris Dredd is using before_script because script is usually running the main test suite for the project (rake test or grunt test) and if Dredd was using script it would overwrite the script inferred by  Travis if it's not given in the travis.yml\n. @honzajavorek Update the Changelog end append it to the every release PR, please.\nThere's a npm script changelist command for that. It will generate the temporary changelog with a skeleton for the next release.\n. It is a bug. \ud83d\udc1e\n. This is amazing! Thank you!\n. :+1: \n. @honzajavorek I'm not sure if Coveralls can see the same coverage as you locally: https://coveralls.io/builds/5255948\n\nCoverage this PR brings: ~95.6%\n. @xvalentino This is awesome! Thank you very much for the contribution! I'll have a look and I might have some comments. :)\n. @xvalentino Thank you for addressing my comments! It's perfect. I think it's good to merge if we update the documentation on CLI and JS interface and remove the possibility to configure the message delimiter.\n\nWe might also consider mentioning those configuration options in the documentation of the TCP language bridge. It can be helpful for debugging when implementing a new language.\n. @ddelnano You mean babel, right? If so, totally, go for it! I'd be excited to have it in Dredd. \n@honzajavorek Actually, it might be a good thing to move the JS sandbox hooks to a separate hook handler as well because the add-hooks.coffee is a hot mess and it's worth refactoring and simplifying anyways.\n. @ddelnano I'm not sure if it will work for you. I tried following the thing bellow which should be an equivalent of what you're proposing and it didn't work.\nI installed babel-cli\nshell\n$ npm install -g babel-cli\nI had following hookfile using ES2015\n```\nimport hooks from './hooks';\nhooks.beforeAll( callback => {\n  console.log('babel works');\n  callback();\n});\n```\nThen I ran Dredd as you proposed to run the Node.js hooks runner\n$ babel-node `which dredd` test/fixtures/single-get.apib http://localhost:3000 --hookfiles=./es2015.js\nAnd I got this result with this error\n```\nnfo: Beginning Dredd testing...\ninfo: Found Hookfiles: ./es2015.js\nwarn: Skipping hook loading...\nwarn: Error reading hook file \"/Users/netmilk/projects/dredd/es2015.js\"\nwarn: This probably means one or more of your hookfiles is invalid.\nwarn: Message: /Users/netmilk/projects/dredd/es2015.js:1\n(function (exports, require, module, __filename, __dirname) { import hooks fro\n                                                              ^^^^^^\nUnexpected reserved word\nwarn: Stack: /Users/netmilk/projects/dredd/es2015.js:1\n(function (exports, require, module, __filename, __dirname) { import hooks fro\n                                                              ^^^^^^\nSyntaxError: Unexpected reserved word\n  at exports.runInThisContext (vm.js:73:16)\n  at Module._compile (module.js:443:25)\n  at loader (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/babel-cli/node_modules/babel-register/lib/node.js:126:5)\n  at Object.require.extensions.(anonymous function) [as .js] (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/babel-cli/node_modules/babel-register/lib/node.js:136:7)\n  at Object.require.extensions.(anonymous function) [as .js] (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/proxyquire/lib/proxyquire.js:243:43)\n  at Module.load (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/coffee-script/lib/coffee-script/register.js:45:36)\n  at Function.Module._load (module.js:310:12)\n  at Module.require (module.js:365:17)\n  at Proxyquire._withoutCache (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/proxyquire/lib/proxyquire.js:177:12)\n  at Proxyquire.load (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/proxyquire/lib/proxyquire.js:134:15)\n  at loadHookFile (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/add-hooks.js:66:7)\n  at addHooks (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/add-hooks.js:142:9)\n  at TransactionRunner.run (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/transaction-runner.js:59:12)\n  at Dredd.startRunner (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:317:24)\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:125:30\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:309:18\n  at EventEmitter. (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/reporters/cli-reporter.js:24:14)\n  at EventEmitter.emit (events.js:129:20)\n  at Dredd.emitStart (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:301:39)\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:121:28\n  at Dredd.compileTransactions (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:294:12)\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:117:26\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:272:16\n  at done (/Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/async/lib/async.js:132:19)\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/node_modules/async/lib/async.js:32:16\n  at /Users/netmilk/.nvm/versions/node/v0.12.2/lib/node_modules/dredd/lib/dredd.js:245:18\nerror: GET /machines duration: 5ms\nerror: Error connecting to server under test!\ninfo: Displaying failed tests...\nfail: GET /machines duration: 5ms\nfail: Error connecting to server under test!\ncomplete: 0 passing, 0 failing, 1 errors, 0 skipped, 1 total\ncomplete: Tests took 19ms\n``\n. It seems like @w-vi's feature request #351 for support for some pre-runtime scripts/hooks would finally make sense.\n. @ddelnano And what's the difference between running whole Dredd withbabel-node` and only the hooks handler you're proposing to write? I think I understand what you mean and I'm concerned it won't work.\n. @ddelnano, my bad, I haven't installed and enabled the babel ES2015 preset. Ignore my comments above. I think it's solved. Would you mind trying it?\nThis works for me:\nnpm install -g babel-cli babel-preset-es2015\necho '{ \"presets\": [\"es2015\"] }' > .babelrc\nbabel-node `which dredd` test/fixtures/single-get.apib http://localhost:3000 --hookfiles=./es2015.js\nWith this hook file in es2015.js\n```\nimport hooks from 'hooks';\nhooks.beforeAll( callback => {\n  console.log('babel works');\n  callback();\n});\n``\n. Verified it works withdredd.yml` configuration and \nbabel-node `which dredd`\ncommand without all the CLI arguments too.\n. @ddelnano So it's this solving the issue?\n@ecordell Would you mind trying this workaround too?\n. @honzajavorek Please review my PR with documentation: https://github.com/apiaryio/dredd/pull/398\n. @ddelnano My pleasure\n. I smell some race condition. Can it be connected with this flaky test: https://travis-ci.org/apiaryio/dredd/jobs/114224085?\n. @xvalentino \n\nI tried to reproduce this on top of current master, but unsuccessfully. Could you please try to assemble the minimal app or, at least, share your dredd.yml?\n\nOr just the hooks file and the dredd.yml :) I'm keen to know what's going on there. :)\n. I totally agree. We need more control.  Regression in parser can actually cause Dredd users will be unable to deliver changes to their API or even worse false positive builds.\n. This is connected with my intention to clean-up the transaction object because some data there aren't an actual API and unify all related data structures as test passed to the reporter and possibly testStep passed to the Apiary reporter API.\n. That's a good plan imho. Thanks!\n. Hey Lucy,\nDredd is meant at this moment for testing of the API reference item by item in isolation (analogy to unit tests) and this sounds to me like a cross-server integration scenario testing. \nBut I'd like to get Dredd there (#358) and I like your approach and thinking. I think the usage of two API Blueprints and after&before hooks for saving and retrieving from the request stash is something what I'd recommend.\nYou can also create the data retrieving HTTP transaction programatically in beforeAll hooks by manually creating the transaction object and injecting it to the transaction array (first parameter of the beforeAll hook function). \nDisclaimer: Dredd wasn't design for this and this usage is not tested. :)\n. @honzajavorek Ah.Thanks for pointing it out!\n. Hey! I think It's a super useful feature and we totally need it, but I'm not 100% if this is the right way how to implement it.\nA super quick workaround would be to use a afterEachValidation hook and replace the header value there.\n``` js\nvar hooks = require('hooks');\nSECRET_HEADERS = ['x-my-secret-header'];\n// headers are case-insensitive\nfor (var i = 0; i < words.length; i++) {\n  SECRET_HEADERS[i] = SECRET_HEADERS[i].toLowerCase());\n}\nhooks.afterEachValidation(transaction, callback){\n  for(var key in transaction['real']]['headers']) {\n    if(SECRET_HEADERS.indexOf(key.toLowerCase()) > -1){\n      transaction['real']]['headers'][key] = \"HIDDEN SECRET DATA\";\n    }\n  }\n}\n```\n. Hey @nweber,\nThanks for the contribution! I'd prefer to call this functionality skip to be consistent in naming with the rest of the project.\n. Hey! I proposed a solution and came up with a temporary fix for this here #556. Your thoughts and suggestions are welcome. I'd appreciate if anyone could actually try it out if it works for a real-life API. If it does I'd make it a part of Dredd.\n. Hey @paddingme,\nThank you for giving Dredd a try! When you leave the media type empty in the response Dredd is setting expected media type to default text/plain. Your server is returning content-type: application/json;charset=utf-8, please try to add it to the response in the blueprint like this:\n+ Response 201 (content-type: application/json;charset=utf-8)\n@paddingme, would you mind letting me know if this workaround solution helped?\n@honzajavorek We should question if the current behavior is correct and if the validation of the body should be performed even though the body is not present in the API Blueprint. \n. @ddelnano @honzajavorek This is caused by how the skipping works internally. It just skips the actual HTTP call and it's validation - it's more like a dry-run then actual skip. I'm not sure if we should not call the hooks for skipped transactions at all because you may want to un-skip the programmatically in hooks.\nI'd vote to change the implementation of --only and filter the transactions before it's passed to the transactinoRunner and not to change the actual implementation of transactionRunnner\n. @ddelnano lol - you're blazing fast. \nI think it's totally worth redoing and your contribution will be more than welcome! :) I think it's a bigger project to make it right but we can kick it off! \nWhat I propose:\nI would pull code from transactionRunner implementing:\n- --sorted\n- --only\n- --method\n- --names\n- --headers\nand move all this functionality to a new transactionsPostprocessor which will be hooked in Dredd#run after compileTransacions. \nThis transaction postprocessor will have functions with the same interface like beforeAll hooks called conditionally based on the Dredd options. This postprocessor will take care of removing or modifying  the transactions in the compiled runtime (transactions variable on Dredd instance).\n@ddelnano Please let me know if it makes sense to you.\n. Hey @JefStat!\nThank you for giving Dredd with Swagger a try and providing this feedback. \nHave you tried to use default property for the parameter?\nWould you mind sharing with me a snippet of your Swagger document with this problem?\n. @honzajavorek I think fallback to default value would be reasonable with some warning even though it doesn't' really make sense to provide defaults for required parameters. #555 \n. Hey @castarco! I ran into the same issue and I had to manually add a content-type header with the charset to all requests and responses and leave the produces and consumes without it as a workaround.\nThank you for reporting it, this limitation is something that we'd like to overcome very soon.\n. @castarco Have a look at the example below. The operation header parameter and the response header are overriding the produces and consumes.\n``` yaml\nswagger: \"2.0\"\ninfo:\n  version: 1.0.0\n  title: Life Saving API\nschemes:\n  - http\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /112:\n    post:\n      parameters:\n    - in: header\n      name: content-type\n      type: string\n      required: true\n      default: application/json; charset=utf-8\n\n    - in: body\n      name: body\n      schema:\n        type: object\n        required: ['emergency']\n        properties:\n          emergency:\n            type: boolean\n            default: true\n\n  responses:\n    201:\n      description: \"Successful response\"\n      headers:\n        Content-Type:   \n          type: string\n          default: application/json; charset=utf-8\n\n      schema:\n        type: object\n        required: ['message']\n        properties:\n          message:\n            type: string\n            default: You will live!\n\n```\n. @castarco\nI'd say there's a very low-hanging workaround solution to just wrap the server command into a shell script.\n``` bash\n!/bin/bash\nexport RAILS_ENV=test\nbundle exec rails serevr\n```\n. @ungrim97 @honzajavorek So I would suggest taking other 205 int changing this:\n| Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| non-empty string | any | 204 | any | :x: | response with 204 status code should not have body |\nto:\n| Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| non-empty string | any | 204 | any | :white_check_mark: \u26a0\ufe0f | response with 204 status code should not have body but Dredd's purpose is not to validate RFC7231 compliance so Dredd's going to emit a warning |\n. I'm afraid the matrix will be much more complicated.\nWe should reflect on some points:\n- We should point out we're talking about Expected body in the tables above, right?\n- We should distinguish between \n  - Empty string in the body (\"\") - it's expected to have an empty string in the request or response body\n  - Empty expected body - the body wasn't given in the AD - no expectations were set on the body\n  - Real Body - the data to be validated - it shoudn't be null - not given under any circumstances once the response is received - but it can be the Empty string in the body\n  - Expected Content Type\n  - Real Content Type\n  - Expected Status Code\n  - Real Status Code\n  - Parseable JSON vs. Not parseable JSON for both Real and Expected\n  - Valid JSON vs. Invalid JSON in sense of validaion real vs expected (based on either expected JSON or JSON schema)\n. Hey @castarco! Thank you so much for providing this priceless feedback! \nAll the non-optimistic (non 2xx) response compiled from a Swagger/OAI API description document are in Dredd skipped by default because they are testing different states of the same resource. As long as Swagger/OAI doesn't support request-response pairs as you mentioned you will probably have to set the state to be tested with hooks anyways.\nI wanted to send you a code snippet how it works, but you actually uncovered another bug (#558), so please don't get scared by the complex code. It will be fixed in upstream Dredd soon.\nFor enabling non-2xx responses please do following: \nGiven this document in swaggger.yml:\n``` yaml\nswagger: \"2.0\"\ninfo:\n  version: 1.0.0\n  title: Life Saving API\nschemes:\n  - http\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /112:\n    get:\n      responses:\n        200:\n          description: \"Successful response\"\n        400:\n          description: \"Not so successful response\"\n```\nGet transaction names:\n$ dredd swagger.yml http://localhost --names\n...\ninfo: /112 > GET > 200 application/json\nskip: /112 > GET > 400 application/json\n...\nSave the hookfile into hooks.js:\n``` js\nvar hooks = require('hooks');\n// This is patching https://github.com/apiaryio/dredd/issues/558\nhooks.beforeAll(function(transactions, callback){\n  // Case insensitive object lookup\n  var getValueCaseless = function(object, key){\n    var objectKey = undefined;\n    var objectKeys = Object.keys(object);\nobjectKeys.forEach(function(currentObjectKey){\n  if(currentObjectKey.toLowerCase() == key.toLowerCase()){\n    objectKey = currentObjectKey;\n  };\n});\n\nvalue = object[objectKey];\nreturn(value);\n\n};\n// Append statusCodes and content-types to the transaction names and ids\n  transactions.forEach(function(transaction, index){\n    statusCode = transaction['expected']['statusCode'];\n    contentType = getValueCaseless(transaction['expected']['headers'], 'content-type')\n    suffix = ' > ' + statusCode + ' ' + contentType;\n    // do not patch it twice\n    if(transaction['name'].indexOf(suffix) == -1){\n      transaction['name'] += suffix;\n      transaction['id'] = transaction['name'];\n    }\n  });\ncallback()\n});\n// Unskip the transaction\nhooks.before('/112 > GET > 400 application/json', function(transaction){\n  transaction.skip = false\n})\n```\nRun Dredd with hooks:\n$ dredd swagger.yml http://localhost --names --hookfiles=hooks.js\nAnd you can see the 400 application/json transaction unskipped and ready for execution:\ninfo: /112 > GET > 200 application/json\ninfo: /112 > GET > 400 application/json\n. @castarco Please let me know what you think and if this work for you. I think it's better to have more control then just let Dredd pass with any possible response even though it can be and error. \n. Hey @jesuscreyes!\nI'm excited you're giving Dredd a try! I'm sorry for the inconvenience and thank you for reporting it.\nWould you mind sending the dredd.yml again? I'd need to see it from the very first line. I think the key could lay there.\nIs the backend server set to spawn to background and run as daemonized? Can you increase log level of your backend server?\nI wouldn't suspect Dredd doing something wrong or unexpected in your case. The info: Backend server exited means your backend server process ended. If it was Dredd who tried to terminate it, it would emit either Sending SIGTERM to the backend server or Killing backend server.\n. Hey @guillemcanal! Thank you for your thoughts! lThis is exactly what we plan to do. We're going to add x-example to the parameter object very soon. We also want to do a fallback to the default if no example is given (#555). \n. Hey @TheElk205! Thank you so much for reporting this. I think it's a duplicate of #225. Would you mind sharing with us the Swagger or API Blueprint document you're using? \n. @ddelnano Thanks for helping here! I'd like to keep this issue open because it's just a workaround not resolution. The solution is coming soon and it will be solved by using of drafter.js instead of compiled protagonist. It should solve this issue and speed up the install process tremendously.\n. The reasoning why this is happening: https://groups.google.com/forum/#!topic/nodejs/0W6UqKy_klk\n. I just realised this could be similar to this very old and closed issue: #126\n. \ud83d\udc4d \n. This all is awesome! Thanks a lot!\n. @honzajavorek Thanks for preserving the permalink to the Transacion Object Structure. \ud83d\udc4d\ud83c\udffc \n. Good job! Accepted and merging.\n. @honzajavorek If we're talking Windows support - did you consider hooking up Appveyor to make sure it's actually working in some time?. Is this really needed? Do we have any means how to monitor coverage in multiple environments? . if it exists, it's not re-decalred\n. Yes, it is. I was also wandering, but you can write hook files in coffee, so it's needed as a production dependency.\n. What the same? :) Marked as a prouction dep?\n. It will be treated as a number.\n. I'm sorry, but I think, it works like you described:\ncoffee> isNaN(Number('666'))\nfalse\nI'v added a test for this situation.\n. This will work only for only arg, because some terminals are expanding globs and concating them as CLI arguments and I need fill those into option['path'] which couldn't be an array at that moment.\n. I'm sorry, but I don't get it. What do you mean with # descriptive name comment. This part is expanding globs  paths of blueprints.\n\nA couple of cents from the peanut gallery.\n\n:sunglasses: LOL! \n.  :+1:  AKA despaghettisation :)\n. Bodies can be the same, they are not subject of test. If they will, they must be changed\n. Thx, but I consider it readable enough.  :) \n. This is doing something completely different. I'm not matching mocks based on request body, I'm mocking all requests with any body in that url, but I'm setting expectations on the body itself, regardless it will be mocked or it will be not.\n. blueprintData.filename should not me never empty\n. Please set specific version here.\n. Added scenario for this\n. Fixed\n. I thought this part was supposed to be moved and handled in apiary-reporter class\n. Why changing/extending the interface here? I thought custom configuration will be maintained under configOrigin['options']['custom'] and it can handle an object when using JS API directly and it will contain an array of encoded key-value pairs if initiated via CLI --custom interface.\n. :thumbsup:\n. And tested there :)\n. And this logic will be handled and tested under apply-configuration\n. This does not make sense for me. Why it can't custom config passed in the configuration object? Isn't it extension of the interface only for purpose of testing?\n. I prefer to rename it to something like customOrEnv\n. Does this mean that JS API of Dredd must be initiated with the config for custom configuration something like:\nconfig = \n  options:\n    custom:\n      env: \n        'APIARY_API_KEY': \"secretkey3456789\"\nI don't like that encapsulation, under env key. It's overcomplicated imho,\n. Not needed refactoring imho.\n. I'm sorry, but I don't get this change. For what is it good for? Isn't it only for DreddCommand unit class testing? \n. ditto\n. :+1: \n. I don't get this. Isn't console in global scope, yet?\n. ditto\n. ditto\n. ditto\n. ditto\n. Theese below are not unit tests for logic handled in DreddCommand class. \n. :thumbsup:\n. Get what? I prefer to name methods/functions based on what they are doing. \n. three or four?\n. Why interesting? Please name it properly. I can imagine something like truncated or limited.\n. @kuba-kubula you mean that condition statement or usage of if? I agree, but it was there before this PR :)\n. @kuba-kubula Sorry, I don't get what do you mean.\n. I assume you propose this statement instead.\nanswers.apiary is true && answers.apiaryApiKey && config.custom?.apiaryApiName\n. There is empty string '' in the blueprint when it's not present in the code.\n. What's the difference between ' and \" in JS?\n. Is it really necessary to have this in separate file?\n. :+1: for breaking it down to separate methods\n. :+1:  ditto\n. :+1:\n. File naming convention is: lowercase, dash separated imho\n. I'm strictly against modifying existing fixtures and tests especially when this functionality should preserved. Please create separate fixture utilising the hooks.log and leave this console.log one for backward compatibility,\n. ditto\n. Why are you declaring log variable when you are not using later?\n. ditto, please do not modify existing fixtures\n. ditto, please do not modify existing fixtures\n. Boom tschaca boom! :+1: \n. This should be imho _ prefixed as well. It's kind of a private variable, which we don't want to let users manipulate.\n. Can you please articulate your motivation for this? I think that it's never used and it's only making the interface more confusing.\n. Ok, I get it, but where is this functionality used? Is it exposed to hooks users? I think that user facing hook.log should preserve same interface as native console.log.\n. Brilliant! I apologise, I didn't realise it.\n. results\n. test.results = result\n. Because it's documented here and it's still not implemented. You should be able to access it in hooks for programatically bypassing some type of validation errors.\n. Reordered, sir.\n. Lol gif. \nSame reason as here: https://github.com/apiaryio/dredd/pull/222#discussion_r32629729\n. This is only a change making the documentation conforming with reality. Code is not changed in this way.\n. It's a general error for the test step. It's not related to body, headers  or statusCode. Where do you propose to place it?\n. Thx for stressing thi. Fixing...\n. \ud83d\ude46\n. Lol\n. @ascripcaru Hi, why are we locking build to some particular Ubuntu release here?\n. @ascripcaru Why is sudo required?\n. This is my bad. I admit it never should have worked. I'm sorry.\n. I would definitely prefer some nested object example to be tested here. May we @honzajavorek?\n. I'm sorry, I'm not sure about the style of bracket usage. Closing / parameter encapsulating brackets for functions aren't used in the entire project. Would you mind refactoring it?\n. I would love to see an expectation for Dredd failing scenario when the backend doesn't reply with the expected response (missing required response key or different value type)\n. It would be awesome to have the nullable type attribute tested here to be absolutely sure we're actually delivering solution for the #283\n. @wvi @honzajavorek This script is running the npm test in a while true cycle and it stops if the test suite fails. It's for finding flaky tests.\n. This is an old issue. I have no idea why it doesn't simply work with data = receivedMessage.data but it doesn't. Some deeper knowledge how JS works is probably needed. Or it's some Coffee > JS \ud83d\udca9.\n. The configuration object is already passed  to the HooksWorkerClient on the runner object. I think there's no need to add ab additional argument.\n. I think we can get rid of these constants at all and move the defaults to the constructor as instance variables and override them if the configuration is present.\n. The reason is I'd like to make almost all of them configurable. It was requested here https://github.com/apiaryio/dredd/issues/328\n. I'm not sure if the hook-timeout configuration parameter isn't confusing because it applies to the HookWorkerClient only and it doesn't apply for native Node.js hooks.\nI suggest:\na) to make it work for the native Node.js hooks as well\nb) rename it  ti somethinglike:hook-worker-timeout`\nOption a) makes more sense in my opinion\n. Mentioned here: https://github.com/apiaryio/dredd/pull/382/files#r54400093\n. Mentioned here: https://github.com/apiaryio/dredd/pull/382/files#r54400093\n. This is awesome! Would it be possible to have it in the original bin/dredd file and enable the functionality by exporting some ENV variable? I would love to have one file because I'm afraid diverging of these two might happen.\n. I'm so sorry for the delayed response. I'd use @runnner.configuration.\nI'd be up for removing hooks.configuration to prevent data duplication and having a single source of truth in the future.\n. This entire chapter might be totally outdated and obsolete.\n. But it's not worth the headache redoing it for now. :) \n. This is amazing. Would you mind add the description to all of them and updating the documentation of the CLI and JS interface. Let me know if I can help deciphering the true meaning of the variable names. :)\n. I'm sorry, haven't noticed this one originally. Please exclude this from the options. The message delimiter should be private property. It's not anything that should change at all.\n. Just remove the options overriding, please. The configuration can totally be in the constructor.\n. Maybe \"Supported API Description formats\" ?\n. Is the article correct?\n. Maybe \"validated >the< case-insensitive way\" ?\n. This is how it should be, but it is buggy in the implementation, right?\n. I would rephrase this to say - by default it validates only structure of the JSON bodies\nJSON schema used on background in Gavel is something what's not important for the user in this paragraph.\n. I'd mention here inferred content-type header can be overridden by explicitly setting the in header parameter. And it's a known bug, because it doesn't work like that atm.\n. What about schema examples? Please verify how it works and clarify it here. \n. This should be extended for whatever+json media types and for support of application/json; whatever. In other words, to support JSON suffixed media types and omit the parameters.\nConsider using this npm: https://www.npmjs.com/package/media-typer\n. Maybe: \"Supported API Description Formats\" as well?\n. @miiila @honzajavorek Do not touch it please unless you find a way how to test it! \n. Lol\n. @miiila @honzajavorek What didn't I forget? lol\n. I'd rename this to \"Note on Security\" or something less negative than \"concern\":). omit please a company called. I'd be specific here, find the ENV variables in the code we're looking for and list them here, please.. - I'd explecitely mentioned here \"details of all request made to the server under test and their responses\"\n- I'd make clear we store unencrypted communication to HTTPS servers under test (reword and elaborate please) if Apiary reporter is used. We should stress here it's no only Apiary where the data can end up. The CLI output containing sensitive data can be saved in CIs.. Making the Dredd Validation Stricter?\n. What about chapter on expecting specific values?\n```\nAPI\nGET /\n\nResponse 200 (application/json)\nAttributes\nid: 5 (string, fixed)\nvalues (array, fixed)\n(object)\nkey: value (string)\n```. Isn't this about \"Avoiding Additional Properties\" ?. \n\n\n\n\n\n\n\n\n",
    "ghost": "Same problem here.\nnpm 1.3.11\nnode 0.10.0\n. Hey @netmilk,\nthank you for answers. I know about the simple way, but there is problem in duplicate resource definition (even if i use different method, this rule should be disable-able) :-) and even i would write some parser to make new apib files with custom sorted transactions because I cannot change our apiary docs, it should stay as is - its not good way.\nCustom sorting would be nice, for example.. if I could specify list of transactions in dredd.yml like parameter 'only'.\n@ddelnano hooks works good, but cannot do what i need.\nexample: what I need..\nPOST Create new Item - this new item has status draft.\nPUT Update Item - make revision, final changes and put it to status published.\nPOST Create Child for Item - this child item belongs to Item, but its possible only to published items.\nThis is strict functionality in our app, so I cannot create child before Item is published.. I'll get 404 - which is correct behavior.\n. Thanks for the Documentation Points! I'm using swagger. \n. That is a really good question! :-)\nDo you have an example for testing of multiple requests for one path in swagger? In the documentation there is only a \"how-to-execute-skipped-tests\" description. \nE.g:\nTest #1: /task/123 -> Response 200 with Task Body\nTest #2: /task/4321 -> Response 404 -> Item not found\nThanks!\n. thanks, I will try it \ud83d\udc4d . Hi, thanks! I think this issue is solved. \nAs I understand I have to duplicate the paths to cover more then one scenario, but in this case I have to manipulate and \"blow up\" the documentation. And I am currently not able to design \"collaborations\" between different parameters.\nI think Ineed a possibility to design example descriptions, something like:\nexamples: [\n    example1: {\n      Parameters: [\n            parameter1: \"1234\", //required\n            parameter2: \"{name: \"test\", description:\"short description\"}, //optional\n            parameter3: \"inactive\" //optional\n            ],\n        expectedResult: 200     \n    },\n    example2: {\n      Parameters: [\n            parameter1: \"1234654321\"\n            ],\n        expectedResult: 200\n    },\n    example3: {\n      Parameters: [\n            parameter2: \"{name: \"test\", description:\"short description\"}, //optional\n            parameter3: \"inactive\" //optional\n            ],\n        expectedResult: 400\n    }\n]\nbut that is not an issue :-)\n. ",
    "theodorton": "I think Rails supports chunked encoding as Rack supports it. The problem is that instead of reading from the Request#body stream in ParamsParser, it reads from the the Request#raw_post. When Transfer-Encoding: chunked is used, Request#raw_post returns an empty string and the controllers read the params as empty.\nI'll see if I can post a pull request this weekend.\n. I believe #12 solved this, yeah.\n. Hey :) Sorry for breaking this. I've put the repo back up.\n. ",
    "Baggz": ":+1: \n. after \"Machines > Machines collection > Get Machines\", (transaction) ->\n  console.log \"after\"\nDescription of the transaction object would be helpful here.\n. :heart: \n. ",
    "rjocoleman": "+1\n. ",
    "arvenil": "Any plans for this?\n. It works! Thank you! :)\nAs a bonus question: any way to produce curl command line? :)\n(probably easy to do by myself, but maybe there is already a way)\n. ",
    "GregorioDiStefano": "Is there anyway to use a before hook multiple times on the same name/api call?\nI have an API that has several different responses, depending on the request, and I'm trying to get dredd to test each response possibility.\nI can modify my request using a before hook, but multiple before hooks on the same hook are modify the single request. \n. This is what I'm working with:\n`````` apib\nDevices in deplyment [GET /api/0.0.1/deployments/{deployment_id}/devices]\nDevice statuses for the deployment.\n\u200b\n+ Parameters\n    + deployment_id: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (string,required) - Deployment identifier\n\u200b\n+ Response 200 (application/json)\n    + Attributes (array)\n        + attribute (DeploymentStatic)\n            + id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6 (string) - Device identifier\n            + status: pending (enum[string]) - Deployment status\n                + Members\n                    + pending - Pending to start\n                    + inprogress - In progress\n                    + success - Finished with success\n                    + failure - Finished with failure\n                    + noimage - Do not have apropriate image for the device model.\u00a7\n            + finished: 2009-11-10 24:00:00 +0000 UTC (string, optional) - Deployment finish time\n\u200b\n+ Response 404 (application/json)\n    + Attributes (Error)\n\u200b\n+ Response 500 (application/json)\n    + Attributes (Error)\n\u200b```\nI'm interested in testing the 404 and 500 errors as well,  is the only way to split this in to separate request and responses?\n``````\n. Sill not getting anywhere, I've tried with the following:\n``` apib\nDeployment status [GET]\nCheck status for specified deployment\n\n\nParameters\n\nid: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (string,required) - Deployment identifier\n\n\n\nResponse 200 (application/json)\n\nAttributes (DeploymentStatic)\nid: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (string)\nfinished: 2009-11-10 24:00:00 +0000 UTC (string, optional) - Deployment finish time\nstatus: pending (enum[string]) - Current deployment state\nMembers\npending - Pending to start\ninprogress - In progress\nsuccess - Finished with success\nfailure - Failed\n\n\n\n\n\n\n\n\n\nRequest\n\nid: f81d4fae-7dec-11d0-a765-00000000000 (string,required) - Deployment identifier\n\n\n\nResponse 404 (application/json)\n\nAttributes (Error)\n```\n\n\n\nbut my original parameter f81d4fae-7dec-11d0-a765-00a0c91e6bf6 is being overwritten with the re-declared value f81d4fae-7dec-11d0-a765-00000000000. \n. ",
    "hueter": "This feature would help clean up our docs.\nWe currently have to have empty Request headers to enable separate Dredd hooks for different responses like so:\n+ Request Bad \n+ Response 400\n+ Request Not Found\n+ Response 404\nThis results in the warning:  warn: Parser warning in file 'apiary.apib': (6) empty request message-body on line 689 \nThis is only an issue for GET requests with different responses. Still, it would be less clumsy if Dredd could just check how many responses there are instead of insisting requests and responses be paired.\ntl;dr +1 \n. +1\n. +1\n. ",
    "austinmcorso": "+1. ",
    "adamrneary": "@ecordell totally agreed. \nFor option 1, ideally I would want to limit the degree to which I need to get too cute with server changes (e.g. mocking/seeding). If we're going to be deleting a given object we're creating and updating, seeding doesn't really get us there, as the tests would need to be able to be run repeatedly without having changed state. Speaking more broader, this is a dredd problem, so I would rather avoid a server solution (to your point in option 2).\nFor option 2, I agree that since this is a dredd problem, this should be a dredd solution rather than a blueprint solution.\nFor option 3, I think it makes sense to open the feature up to configuration. A plain \"sorted\" approach that sorts by method is really a bit of a blunt object. However, I think the case is pretty common if you are doing CRUD activities on simple objects. As janky as it might be, I would actually suspect that the simple solution in place so far might solve 80% of the ordering problems people encounter.\nSo maybe phase 1 for this feature is the default --sorted option, and we comment in that a more configurable solution is a logical follow-up to that?\n. ",
    "cmdrkeene": "Addressed in #29 \n. Must have had an old version of dredd lying around.\n. ",
    "ivan-koval": "Hi,\nI have the same problem. Here is my npm install log:\nroot@debian:/home/fake# npm install -g dredd\nnpm http GET https://registry.npmjs.org/dredd\nnpm http 304 https://registry.npmjs.org/dredd\nnpm http GET https://registry.npmjs.org/gavel\nnpm http GET https://registry.npmjs.org/protagonist\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/winston\nnpm http GET https://registry.npmjs.org/uri-template\nnpm http GET https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/cli\nnpm http GET https://registry.npmjs.org/html\nnpm http GET https://registry.npmjs.org/htmlencode\nnpm http 304 https://registry.npmjs.org/commander\nnpm http 304 https://registry.npmjs.org/gavel\nnpm http 304 https://registry.npmjs.org/winston\nnpm http 304 https://registry.npmjs.org/uri-template\nnpm http 304 https://registry.npmjs.org/protagonist\nnpm http 304 https://registry.npmjs.org/async\nnpm http 304 https://registry.npmjs.org/html\nnpm http 304 https://registry.npmjs.org/cli\nnpm http 304 https://registry.npmjs.org/htmlencode\nnpm http GET https://registry.npmjs.org/glob\nnpm http GET https://registry.npmjs.org/pct-encode\nnpm http GET https://registry.npmjs.org/colors\nnpm http GET https://registry.npmjs.org/cycle\nnpm http GET https://registry.npmjs.org/eyes\nnpm http GET https://registry.npmjs.org/pkginfo\nnpm http GET https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/stack-trace\nnpm http GET https://registry.npmjs.org/curl-trace-parser/0.0.7\nnpm http GET https://registry.npmjs.org/googlediff/0.1.0\nnpm http GET https://registry.npmjs.org/http-string-parser/0.0.4\nnpm http GET https://registry.npmjs.org/json-pointer/0.0.4\nnpm http GET https://registry.npmjs.org/async/0.2.9\nnpm http 304 https://registry.npmjs.org/pct-encode\nnpm http 304 https://registry.npmjs.org/glob\nnpm http GET https://registry.npmjs.org/minimatch\nnpm http GET https://registry.npmjs.org/inherits\nnpm http 304 https://registry.npmjs.org/colors\nnpm http 304 https://registry.npmjs.org/cycle\nnpm http 304 https://registry.npmjs.org/pkginfo\nnpm http 304 https://registry.npmjs.org/request\nnpm http 304 https://registry.npmjs.org/stack-trace\n\nprotagonist@0.5.7 install /usr/local/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\nmake: Entering directory /usr/local/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/HTTP.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/MarkdownBlock.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/MarkdownParser.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/Parser.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/ParserCore.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/Serialize.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/SerializeJSON.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/SerializeYAML.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/snowcrash.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/autolink.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/buffer.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/html.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/html_smartypants.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/markdown.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/stack.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/src_map.o\n  AR(target) Release/obj.target/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\n  CXX(target) Release/obj.target/protagonist/src/blueprint.o\n  CXX(target) Release/obj.target/protagonist/src/parse.o\n  CXX(target) Release/obj.target/protagonist/src/protagonist.o\n  CXX(target) Release/obj.target/protagonist/src/result.o\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node: Finished\n  COPY Release/protagonist.node\nmake: Leaving directory/usr/local/lib/node_modules/dredd/node_modules/protagonist/build'\nnpm http 304 https://registry.npmjs.org/curl-trace-parser/0.0.7\nnpm http 304 https://registry.npmjs.org/googlediff/0.1.0\nnpm http 304 https://registry.npmjs.org/http-string-parser/0.0.4\nnpm http 304 https://registry.npmjs.org/json-pointer/0.0.4\nnpm http 304 https://registry.npmjs.org/minimatch\nnpm http 304 https://registry.npmjs.org/async/0.2.9\nnpm http 304 https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm http GET https://registry.npmjs.org/sigmund\nnpm http 304 https://registry.npmjs.org/lru-cache\nnpm http 304 https://registry.npmjs.org/sigmund\nnpm http GET https://registry.npmjs.org/foreach\nnpm http GET https://registry.npmjs.org/commander/1.2.0\nnpm http 304 https://registry.npmjs.org/eyes\nnpm http GET https://registry.npmjs.org/form-data\nnpm http GET https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/cookie-jar\nnpm http GET https://registry.npmjs.org/hawk\nnpm http GET https://registry.npmjs.org/aws-sign\nnpm http 304 https://registry.npmjs.org/foreach\nnpm http GET https://registry.npmjs.org/oauth-sign\nnpm http GET https://registry.npmjs.org/forever-agent\nnpm http GET https://registry.npmjs.org/tunnel-agent\nnpm http GET https://registry.npmjs.org/json-stringify-safe\nnpm http GET https://registry.npmjs.org/qs\nnpm http 304 https://registry.npmjs.org/commander/1.2.0\nnpm http GET https://registry.npmjs.org/keypress\nnpm http 304 https://registry.npmjs.org/cookie-jar\nnpm http 304 https://registry.npmjs.org/hawk\nnpm http 304 https://registry.npmjs.org/node-uuid\nnpm http 304 https://registry.npmjs.org/mime\nnpm http 304 https://registry.npmjs.org/aws-sign\nnpm http 304 https://registry.npmjs.org/form-data\nnpm http 304 https://registry.npmjs.org/oauth-sign\nnpm http 304 https://registry.npmjs.org/json-stringify-safe\nnpm http 304 https://registry.npmjs.org/tunnel-agent\nnpm http 304 https://registry.npmjs.org/forever-agent\nnpm http 304 https://registry.npmjs.org/qs\nnpm WARN engine hawk@0.10.2: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.10.24\",\"npm\":\"1.3.21\"})\nnpm http 304 https://registry.npmjs.org/keypress\nnpm http GET https://registry.npmjs.org/combined-stream\nnpm http GET https://registry.npmjs.org/boom\nnpm http GET https://registry.npmjs.org/cryptiles\nnpm http GET https://registry.npmjs.org/hoek\nnpm http GET https://registry.npmjs.org/sntp\nnpm http 304 https://registry.npmjs.org/combined-stream\nnpm http GET https://registry.npmjs.org/delayed-stream/0.0.5\nnpm http 304 https://registry.npmjs.org/cryptiles\nnpm http 304 https://registry.npmjs.org/sntp\nnpm http 304 https://registry.npmjs.org/boom\nnpm http 304 https://registry.npmjs.org/hoek\nnpm WARN engine cryptiles@0.1.3: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.10.24\",\"npm\":\"1.3.21\"})\nnpm WARN engine sntp@0.1.4: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.10.24\",\"npm\":\"1.3.21\"})\nnpm WARN engine boom@0.3.8: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.10.24\",\"npm\":\"1.3.21\"})\nnpm WARN engine hoek@0.7.6: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.10.24\",\"npm\":\"1.3.21\"})\nnpm http 304 https://registry.npmjs.org/delayed-stream/0.0.5\n/usr/local/bin/dredd -> /usr/local/lib/node_modules/dredd/bin/dredd\ndredd@0.1.7 /usr/local/lib/node_modules/dredd\n\u251c\u2500\u2500 commander@2.0.0\n\u251c\u2500\u2500 htmlencode@0.0.3\n\u251c\u2500\u2500 async@0.2.10\n\u251c\u2500\u2500 html@0.0.7\n\u251c\u2500\u2500 uri-template@0.4.1 (pct-encode@1.0.1)\n\u251c\u2500\u2500 cli@0.4.5 (glob@3.2.8)\n\u251c\u2500\u2500 gavel@0.2.8 (async@0.2.9, http-string-parser@0.0.4, googlediff@0.1.0, amanda@0.4.8, json-pointer@0.0.4, curl-trace-parser@0.0.7)\n\u251c\u2500\u2500 winston@0.7.2 (cycle@1.0.3, stack-trace@0.0.8, eyes@0.1.8, colors@0.6.2, pkginfo@0.3.0, request@2.16.6)\n\u2514\u2500\u2500 protagonist@0.5.7\n. myself@debian:~$ gcc -v\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Debian 4.8.2-14' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --with-arch-32=i586 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.2 (Debian 4.8.2-14)\n. npm -g install protagonist\nnpm http GET https://registry.npmjs.org/protagonist\nnpm http 304 https://registry.npmjs.org/protagonist\nnpm http GET https://registry.npmjs.org/protagonist/-/protagonist-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/protagonist/-/protagonist-0.6.1.tgz\n@zdne as you see there is npm protagonist. But I still have the same problem. Or this is not the version you wanted me to check?\n. @zdne still have a problem. Now I see errors after npm install:\nnpm ERR! protagonist@0.6.1 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the protagonist@0.6.1 install script.\nnpm ERR! This is most likely a problem with the protagonist package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls protagonist\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Linux 3.12-1-amd64\nnpm ERR! command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /home/myself/fubo/dredd\nnpm ERR! node -v v0.10.25\nnpm ERR! npm -v 1.3.24\nnpm ERR! code ELIFECYCLE\n.....\nnpm http 304 https://registry.npmjs.org/core-util-is\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/myself/fubo/dredd/npm-debug.log\nnpm ERR! not ok code 0\n. @zdne thanks for the answer. npm cache clear fixed the problem.\n. ",
    "alonisser": "Getting this error also... any ideas?\n. ",
    "zdne": "@eriknyk @ivan-koval @alonisser \nGuys can you run gcc -v for me? \n. Thanks @ivan-koval ! This is what I have expected. There was an issue in upstream. Bumping Protagonist to v0.6.1 should fix it. Can you please verify (from the source, npm not published yet)?\n. @ivan-koval \nThe Protagonist version as used by Dredd has to be 0.6.1. I'd suggest not to install Protagonist globally. \nCan you for the sake of the test remove Protagonist and Dredd from your system. Clone the actual Dredd repo from GitHub; cd into Dredd directory; run npm install and the try to reproduce the segfault from there?\n. @ivan-koval \nCan you sudo npm cache clear and \nsh\n$ npm install protagonist\n...\n$ cd node_modules/protagonist/\n$ npm install\n$ npm test\nI have just tested in on three platforms and it works great for me on OS X Mavericks:\nsh\nhiro:protagonist zdenek$ uname -a\nDarwin hiro.local 13.0.0 Darwin Kernel Version 13.0.0: Thu Sep 19 22:22:27 PDT 2013; root:xnu-2422.1.72~6/RELEASE_X86_64 x86_64\nhiro:protagonist zdenek$ gcc -v \nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/c++/4.2.1\nApple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)\nTarget: x86_64-apple-darwin13.0.0\nThread model: posix\nhiro:protagonist zdenek$ node -v\nv0.8.25\nhiro:protagonist zdenek$ npm -v\n1.3.17\nUbuntu 13 with gcc 4.8\nsh\nvagrant@packer-ubuntu-13:~/T/node_modules/protagonist$ uname -a\nLinux packer-ubuntu-13 3.11.0-12-generic #19-Ubuntu SMP Wed Oct 9 16:20:46 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\nvagrant@packer-ubuntu-13:~/T/node_modules/protagonist$ gcc -v \nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.8.1-10ubuntu8' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.1 (Ubuntu/Linaro 4.8.1-10ubuntu8) \nvagrant@packer-ubuntu-13:~/T/node_modules/protagonist$ node -v\nv0.10.21\nvagrant@packer-ubuntu-13:~/T/node_modules/protagonist$ npm -v \n1.3.11\nUbuntu Precise64 with GCC 4.7\nsh\nvagrant@precise64:~/T/node_modules/protagonist$ uname -a\nLinux precise64 3.2.0-29-virtual #46-Ubuntu SMP Fri Jul 27 17:23:50 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\nvagrant@precise64:~/T/node_modules/protagonist$ gcc -v\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.6/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.6.3-1ubuntu5' --with-bugurl=file:///usr/share/doc/gcc-4.6/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.6 --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.6 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --disable-werror --with-arch-32=i686 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) \nvagrant@precise64:~/T/node_modules/protagonist$ node -v\nv0.10.21\nvagrant@precise64:~/T/node_modules/protagonist$ npm -v\n1.3.11\nThe output should be something like\n``` sh\n\nprotagonist@0.6.1 test /home/vagrant/T/node_modules/protagonist\nmocha --ui tdd --reporter spec --compilers coffee:coffee-script test/test.coffee\n\nAPI Blueprint parser\n    \u2713 parses API name \n    \u2713 parses API description \n    \u2713 parses resource group \n    \u2713 parses resource \n    \u2713 fails to parse blueprint with tabs \n    \u2713 parses blueprint with warnings \n    \u2713 parses blueprint metadata \n    \u2713 accepts options \n    \u2713 parses resource parameters \n    \u2713 parses action parameters \n10 passing (22ms)\n```\nCan you verify on a Virtual dev environment using Vagrant?\n. @ecordell \n\nMultiple request/response pairs. This would be easy if the blueprint format supported naming Responses (you can only name Requests right now) - it could simply pair them by name. As it stands, there's no way to tell which response goes with which request.\n\nAt this moment the response \"name\" is its status code. Request-response pairing has already support in the AST in the form of HTTP Transaction Example (AST key examples). \nFirst I plan to add the implicit pairing support to the parser \u2013 https://github.com/apiaryio/snowcrash/issues/53 followed by an explicit transaction example specification at some point later. \nPlease let me know if you think this will suffice. Probably in another discussion thread (issue) to not pollute this PR.\n. :+1: \n. Ordering the tests assuming the CRUD sequence might be misleading. I do understand the use case and the need however this arbitrary ordering might lead to unexpected behavior.\nThe real solution for this would be direct support for testing in API Blueprint with scenarios / background support as discussed here.\nI would advice to close this PR; Add support for scenarios/background to API Blueprint first, and then properly support it in Dredd.\nComments? CC @ecordell\n. @ecordell  would you be open for a quick Skype / Hangout on this PR and overall Dredd concept? I would like to discuss with you the gist of Dredd and its possible future directions also in regards to this PR. \nI feel this PR is continuing the trend that goes against the original idea of Dredd testing API Blueprint and I would love to discuss it with you as you are VIP in this project.\nThanks.\n. @ecordell \nSorry for the delay. I have finally found time to review this PR. I do not have any technical comments, so from this point it looks all good. \nAs per our Skype-discussion: what I would do is to move the \"Writing Hooks\" sections from the README.md to a Wiki article (and reference it from the README) to put a little bit less emphasis on hooks. Is this OK with you Evan?\nNo action necessary on your side, I will merge it, modify the README and create the Wiki entry for this. \nAfter that I would publish a new Dredd release.\n. ## Note on Dredd design\n(my thoughts on introducing hooks to Dredd)\nThe goal of Dredd is to test an API blueprint against the service it describes. Not to test an API per se. The difference may be subtle at a first glance but the implications and consequences are substantial. Consider you find a bug that occurs in your API implementation under some special circumstances. Should Dredd test it? Most likely not. If the special circumstances are so important you need to inform your API user about it then yes. You write it in your blueprint and Dredd tests it. \nThe rule of thumb is \"Unless it is something user should know about it should not be tested by Dredd\".\nIdeally the Dredd should take only an API blueprint as its input and nothing else. No external knowledge, no hook files no cucumber features, nothing. Just a blueprint. The result should be yes or no \u2013 does the blueprint conform to the API it was run against?  The hooks are out of band information and as such should be avoided.\nWith that being said. As of now the blueprint is not 100% ready for testing. With the implementation of  https://github.com/apiaryio/api-blueprint/issues/21 pending there is a gap in this story that hooks (this PR) can temporarily help to bridge. \nOnce API Blueprint supports scenarios and backgrounds the need for hooks should diminish. Later with scenarios & backgrounds in place hooks can still remain part of the Dredd to provide extension for future tools built upon it. But again the spirit and purity of Dredd in API testing driven by the API Blueprint should be preserved.\nhttp://blog.apiary.io/2013/10/10/No-more-outdated-API-documentation\nhttp://blog.apiary.io/2013/10/17/How-to-test-api-with-api-blueprint-and-dredd\n. No worries @ecordell , also I think it is OK to go with 0.3.0 as this is a new feature that still deserves version bump. \nPlease proceed as you want (including the Wiki entry if you will) and let me know when done. I will be happy to merge this! \nThanks\n. @ecordell \nAwesome. Going to hit the sac. Will review and merge it tomorrow.\n. @ecordell \nI was about to merge the PR. However during the review process there were some changes to master and this cannot be now merged. \nI have tried merging it manually both using merge and rebase. Unfortunately seems your refractor of execute-transaction.coffee to transaction-runner.coffee seemingly was not done using git mv and thus I cannot project the fixes we have made to execute-transaction.coffee into transaction-runner.coffe. \nTo pull our latest master in your fork run:\n$ git remote add upstream https://github.com/apiaryio/dredd.git\n$ git pull upstream master\nNow ideally we would need to rebase test-hooks over the master. But since the refactor it has to be done manually. Can you please take a look into it? Thank you and sorry about it.\nAlso refer to https://github.com/apiaryio/dredd/pull/49 and https://github.com/apiaryio/dredd/pull/45\n. @ecordell no worries, I will refrain from any commits to master until this PR is merged.\nAs for manifesto \u2013 Good point but I hope the README should say it all if not we (I) should modify it so it is more clear. Also the aforementioned blogposts by @netmilk should help here..\nWill revisit the README when time allows. Thanks! \n. @ecordell @mgaut72 \nLooking into this and @fdragu is indeed right! There is a domain model mismatch between what Gavel.js expects and what is Dredd feeding in: \nGavel's input from Dredd (the expected value in this call:\ncoffee\ngavel.isValid real, expected, 'response', (error, isValid) ->`\n)\nis:\njavascript\n{ headers: { 'Content-Type': 'application/json' },\n  body: '{\\n    \"data\": {\\n        \"token\": \"234khsdfs9d8fsdf\",\\n        \"expires\": 1424641830\\n    }\\n}\\n',\n  status: '200',\n  schema: '{\\n    \"type\":\"object\",\\n    \"required\":true,\\n    \"properties\":{\\n        \"data\": {\\n            \"type\":\"object\",\\n            \"required\":true,\\n            \"properties\":{\\n                \"expires\": {\\n                    \"type\":\"number\",\\n                    \"required\":true\\n                },\\n                \"token\": {\\n                    \"type\":\"string\",\\n                    \"required\":true\\n                }\\n            }\\n        }\\n    }\\n}\\n' }\nHowever Gavel.js expects (and takes) this:\njavascript\n{ statusCode: undefined,\n  statusMessage: undefined,\n  headers: { 'Content-Type': 'application/json' },\n  body: '{\\n    \"data\": {\\n        \"token\": \"234khsdfs9d8fsdf\",\\n        \"expires\": 1424641830\\n    }\\n}\\n',\n  headersSchema: undefined,\n  bodySchema: undefined }\nI will fix it.\n. @imp-partner-test I will try it and keep you posted.\n. @ecordell I can reproduce it right now. Do you have any pointers where I can look? \nC:\\Users\\zdenek\\Documents\\GitHub\\dredd [master +1 ~0 -0 !]> dredd .\\apiary.apib.txt https://as.production.imp.mobilitaetsdienste.de:8443/\ninfo: Beginning Dredd testing...\nundefined\nC:\\Users\\zdenek\\Documents\\GitHub\\dredd [master +1 ~0 -0 !]>\n. OK I have updated to latest Dredd (v0.3.0) and removed the \\r line endings (using just \\n) and it seems to work, albeit I do not know whether it is because of v0.3.0.\n@imp-partner-test can you still reproduce the problem with Dredd v0.3.0 and unix line endings?\nC:\\Users\\zdenek\\Documents\\GitHub\\dredd [master +1 ~0 -0 !]> dredd .\\apiary.apib.txt https://as.production.imp.mobilitaetsdienste.de:8443/\ninfo: Beginning Dredd testing...\nwarn: Runtime compilation warning:\nAmbigous URI template: /imp-endpoint/api/V0/Resouces/CaShaing/Cas?{lat,lng,adius}\nParameter not defined:'lat'\n on  > Getting fee-floating Cas > Getting fee-floating Cas Action\nwarn: Runtime compilation warning:\nAmbigous URI template: /imp-endpoint/api/V0/Resouces/CaShaing/Cas?{lat,lng,adius}\nParameter not defined:'lng'\n on  > Getting fee-floating Cas > Getting fee-floating Cas Action\nwarn: Runtime compilation warning:\nAmbigous URI template: /imp-endpoint/api/V0/Resouces/CaShaing/Cas?{lat,lng,adius}\nParameter not defined:'adius'\n on  > Getting fee-floating Cas > Getting fee-floating Cas Action\ncomplete: Tests took 32ms\n. @cjha \nDuring the course of this week. \n. @ChrisWeiss \nCan you be please more specific? How would you expect this to work?\n. @OrCharles @nenadalm I will check the status and will keep you updated. Sorry for the delay!\n. Thanks @ecordell ! I will push it forward.\n. :+1: \n. :construction_worker: \n. @mjza please see my comment on SO \u2013 http://stackoverflow.com/a/29878878/634940\n. For the record the root cause is in the underlaying parser https://github.com/apiaryio/snowcrash/issues/29\n. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameter-object collectionFormat for examples of such a swagger document. ",
    "abtris": "We cannot merge without tests, this PR wait for missing tests.\n. We today publish latest version v0.2.1.\n. I cannot reproduce problem. Please can you try latest Dredd version from npm 2.1.0?\n. It's problem with npm, i missed lib folder. Try npm cache clear && npm install -g dredd again.\n. Thanks for review, i close PR.\n. You have to add to blueprint. API Endpoint now don't use path. \n. Added integration test.\n. ok, i close #50 \n. :+1: \n. ok, I look into.\n. I'm not sure how add go lang into hooks-worker-client.\n. @honzajavorek I think this looks ready. Please make review.\n. @honzajavorek I add perl, but I'm not sure if this works.\n. @netmilk both exists cpan and cpanm. I check it. But I'm not sure what is right.\n. Before env just modify or add in script. Now you twice dredd running.\n. ok, I understand.\n. \ud83d\udc4d \n. You don\u2019t need change code, just set env variable as dirty hack. \nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;. I think you can add stage after release to build and push docker image. Travis support build docker (but only in sudo:required type builds) images - https://docs.travis-ci.com/user/docker/#building-a-docker-image-from-a-dockerfile and dockerfile is available and build.sh and simple script to get latest tag there too. \nMake separate repository only for dredd-docker and trigger travis using API after your semantic-release. \n. @honzajavorek I can prepare repo and PR if you think that my proposal is ok.. @honzajavorek Here is test version https://github.com/apiaryio/dredd-docker/pull/1. I make update that. Good point!\n. Try add semicolon as \n```\nvar express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n  res.json({message: 'Hello World!'});\n});\nvar server = app.listen(3000);\n``\n. SimilardevDependecies` in nodejs.\n{\n    \"require\": {\n        \"silex/silex\": \"~1.2\"\n    },\n    \"require-dev\": {\n        \"ddelnano/dredd-hooks-php\": \"~1.0.0\",\n        \"phpunit/phpunit\": \"3.7.*\"\n    }\n}\n. Yes, but helping with coverage for lines with others options (php, python, perl).\n. This can be valid version or publish npm package\n\"apiaryio/commonjs-html-prettyprinter\": \"https://github.com/apiaryio/commonjs-html-prettyprinter\",\n. ",
    "bensleveritt": "Thanks!\n. Ah, looks like I figured it out at some point and forgot to update the issue.\nIn my example I've written the key/value pair in double quotes, when it shouldn't be. An additional indent might help too, not sure.\n``````\n+ Request\n    + Header\n    ```\n        Authorization: Basic YmVuOnBhc3M=\n    ```\n\n``````\nThanks for the help!\n. ",
    "pierrickchabi": "Same error with latest Dredd 2.1.0 from NPM.\n. Error: Cannot find module '../lib/parse-package-json'\n    ...\n    at Object.<anonymous> (/Users/prx/.nvm/v0.10.25/lib/node_modules/dredd/bin/dredd:3:24)\n    ...\nI'm using Node 0.10.25 (installed via NVM) and I can't see any lib folder in my dredd installation:\n\n. It works now. Thanks!\n. ",
    "gaxunil": "OK thanks a lot.  I appreciate the replies. Very cool stuff.\n. ",
    "rodbv": "Hi Lukas,\nI'm using Ruby 1.9.1, and apparently the dredd command is returning 1 (I am using that bash script provided on the example, and added a echo $RESULT command before the exit command)\n. Hi,\nI think I have found the root cause of the problem: I've installed node via apt-get, and that version is quite old.\nInstalling from source seems to take care of it.\n. ",
    "BRMatt": "\nWould it be possible, in the future, to separate \"refactor\" commits from the \"new feature\" commits for easier PR review (what is new code and\n. \n",
    "mgaut72": "Here is a very simple sample that demonstrates the problem that I am having:\nhttps://github.com/mgaut72/dredd_incorrect_schema_validation\n. I just did a quick test, and it also turns out that if you set the schema to\n...\n                           \"token\": {\n                                \"type\":\"string\",\n                                \"required\":flase\n                            }\n...\nthen omit the token part of the response in api.py, the dredd test still fails, saying that \"token is required\".\nI know nothing about your codebase, nor about coffeescript, but this line, taken completely out of context, seems of interest?\nexpected['schema'] = response['schema'] if response['schema']\nperhaps response['schema'] is false-y, and gavel is taking to determining what the schema is based on parsing the expected response body?\n. @ecordell should I move this over to the gavel.js issues, or how should this proceed?\n. ",
    "fdragu": "I have the same problem and by looking at both Dredd and Gavel it seems there is a mismatch between the domain model for the expected request/response in Gavel (in http-response-test.coffee and sampleHttpResponseSchema in fixtures.coffee) with what Dredd (in execute-transaction.coffee) sends to Gavel.\nIt seems like the gavel model has an 'expected' object as part of the expected http response and the schema should be set on the inner expected object vs the top level object.\nAny chance to get someone to try to match them?\n. ",
    "imp-partner-test": "Hi Evan,\nthank you. I removed the \\r from the test.sh. and changed the blueprint as\nyou described. I'm still getting the undefined :(\nI'm running dredd on Windows, in cmd and on Cyqwin. And i get this\nundefined even if do provide a dummy host...\nI connected API to github. And pulled the apiary.apib from github... so\nthere are no \\r\\n characters.\nPlease find the screenshot of it and files I'm working with now in the\nattachment.\nthank you,\nOxana\nhttps://www.dropbox.com/s/p9zexrj3g6htzlq/apiary.apib\nhttps://www.dropbox.com/s/vqn6gch91vwqc16/test.sh\nhttps://www.dropbox.com/s/xckrn6x99a2bllv/undefined.png\nhttps://www.dropbox.com/s/07qkiexeph49oos/Untitled2.png\n. dredd - v0.2.1 on windows.\nyou ran the tests above with v0.3.0. How can I get this version? It seems not to be available..\n. Could you please kindly try to run the version v0.2.1 on windows? I'm curious if it is the versions problem or maybe there is smth wrong with my installation.\n. @zdne, @ecordell  I updated dredd to v0.3.0 and removed the \\r stuff. Now it works. Thank you!!\n. It used to be... After the last update of dredd v0.3.0 package I get the warning: \"the use of carriage return(s) '\\r' in source data isn't currently supported, please contact makers\" in case the tested apiary blueprint contains \\r in like endings\n. I also ran into this. How do I tell dredd to use a http proxy?\n. The complete console output:\nBuilding in workspace /data/jenkins/jobs/Automatic APIary Test/workspace\nCheckout:workspace / /data/jenkins/jobs/Automatic APIary Test/workspace - hudson.remoting.LocalChannel@14e4ed4\nUsing strategy: Default\nLast Built Revision: Revision 367475bec30334f138309b9c28e63e953b773adc (origin/master, origin/HEAD)\nFetching changes from 1 remote Git repository\nFetching upstream changes from origin\nSeen branch in repository origin/HEAD\nSeen branch in repository origin/master\nCommencing build of Revision 367475bec30334f138309b9c28e63e953b773adc (origin/master, origin/HEAD)\nChecking out Revision 367475bec30334f138309b9c28e63e953b773adc (origin/master, origin/HEAD)\nWarning : There are multiple branch changesets here\n$ /data/jenkins/tools/nodejs/bin/npm install -g dredd\nnpm http GET https://registry.npmjs.org/dredd\nnpm http 304 https://registry.npmjs.org/dredd\nnpm http GET https://registry.npmjs.org/protagonist\nnpm http GET https://registry.npmjs.org/uri-template\nnpm http GET https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/optimist\nnpm http GET https://registry.npmjs.org/html\nnpm http GET https://registry.npmjs.org/htmlencode\nnpm http GET https://registry.npmjs.org/marked\nnpm http GET https://registry.npmjs.org/advisable\nnpm http GET https://registry.npmjs.org/proxyquire\nnpm http GET https://registry.npmjs.org/coffee-script/1.6.3\nnpm http GET https://registry.npmjs.org/glob\nnpm http GET https://registry.npmjs.org/file\nnpm http GET https://registry.npmjs.org/gavel\nnpm http GET https://registry.npmjs.org/winston\nnpm http 304 https://registry.npmjs.org/async\nnpm http 304 https://registry.npmjs.org/proxyquire\nnpm http 304 https://registry.npmjs.org/htmlencode\nnpm http 304 https://registry.npmjs.org/uri-template\nnpm http 304 https://registry.npmjs.org/glob\nnpm http 304 https://registry.npmjs.org/html\nnpm http 304 https://registry.npmjs.org/coffee-script/1.6.3\nnpm http 304 https://registry.npmjs.org/optimist\nnpm http 304 https://registry.npmjs.org/winston\nnpm http 304 https://registry.npmjs.org/advisable\nnpm http 304 https://registry.npmjs.org/file\nnpm http 304 https://registry.npmjs.org/marked\nnpm http 304 https://registry.npmjs.org/protagonist\nnpm http 304 https://registry.npmjs.org/gavel\nnpm WARN engine uri-template@0.4.1: wanted: {\"node\":\"~0.10.4\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm http GET https://registry.npmjs.org/pct-encode\nnpm http GET https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/minimist\nnpm http GET https://registry.npmjs.org/minimatch\nnpm http GET https://registry.npmjs.org/inherits\nnpm http 304 https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/eyes\nnpm http GET https://registry.npmjs.org/pkginfo\nnpm http GET https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/stack-trace\nnpm http GET https://registry.npmjs.org/colors\nnpm http GET https://registry.npmjs.org/cycle\nnpm http 304 https://registry.npmjs.org/wordwrap\nnpm http 304 https://registry.npmjs.org/minimatch\nnpm http 304 https://registry.npmjs.org/minimist\nnpm http 304 https://registry.npmjs.org/pct-encode\nnpm http 304 https://registry.npmjs.org/eyes\nnpm http 304 https://registry.npmjs.org/colors\nnpm http 304 https://registry.npmjs.org/stack-trace\nnpm http 304 https://registry.npmjs.org/pkginfo\nnpm http 304 https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm http GET https://registry.npmjs.org/sigmund\nnpm http GET https://registry.npmjs.org/async/0.2.9\nnpm http GET https://registry.npmjs.org/commander/2.0.0\nnpm http GET https://registry.npmjs.org/curl-trace-parser/0.0.7\nnpm http GET https://registry.npmjs.org/http-string-parser/0.0.4\nnpm http GET https://registry.npmjs.org/googlediff/0.1.0\nnpm http GET https://registry.npmjs.org/json-pointer/0.0.4\nnpm http 304 https://registry.npmjs.org/lru-cache\nnpm http 304 https://registry.npmjs.org/commander/2.0.0\nnpm http 304 https://registry.npmjs.org/curl-trace-parser/0.0.7\nnpm http 304 https://registry.npmjs.org/googlediff/0.1.0\nnpm http 304 https://registry.npmjs.org/async/0.2.9\nnpm http 304 https://registry.npmjs.org/sigmund\nnpm http 304 https://registry.npmjs.org/http-string-parser/0.0.4\nnpm http 304 https://registry.npmjs.org/json-pointer/0.0.4\nnpm http 304 https://registry.npmjs.org/cycle\nnpm http GET https://registry.npmjs.org/form-data\nnpm http GET https://registry.npmjs.org/mime\nnpm http GET https://registry.npmjs.org/hawk\nnpm http GET https://registry.npmjs.org/node-uuid\nnpm http GET https://registry.npmjs.org/cookie-jar\nnpm http GET https://registry.npmjs.org/aws-sign\nnpm http GET https://registry.npmjs.org/oauth-sign\nnpm http GET https://registry.npmjs.org/forever-agent\nnpm http GET https://registry.npmjs.org/tunnel-agent\nnpm http GET https://registry.npmjs.org/json-stringify-safe\nnpm http GET https://registry.npmjs.org/qs\nnpm http 304 https://registry.npmjs.org/form-data\nnpm http 304 https://registry.npmjs.org/hawk\nnpm http 304 https://registry.npmjs.org/node-uuid\nnpm http 304 https://registry.npmjs.org/cookie-jar\nnpm http 304 https://registry.npmjs.org/tunnel-agent\nnpm http 304 https://registry.npmjs.org/mime\nnpm http 304 https://registry.npmjs.org/json-stringify-safe\nnpm http 304 https://registry.npmjs.org/forever-agent\nnpm http 304 https://registry.npmjs.org/oauth-sign\nnpm http 304 https://registry.npmjs.org/aws-sign\nnpm http 304 https://registry.npmjs.org/qs\nnpm WARN engine hawk@0.10.2: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm http GET https://registry.npmjs.org/combined-stream\nnpm http GET https://registry.npmjs.org/hoek\nnpm http GET https://registry.npmjs.org/boom\nnpm http GET https://registry.npmjs.org/cryptiles\nnpm http GET https://registry.npmjs.org/sntp\nnpm http 304 https://registry.npmjs.org/boom\nnpm http 304 https://registry.npmjs.org/combined-stream\nnpm http 304 https://registry.npmjs.org/sntp\nnpm http 304 https://registry.npmjs.org/cryptiles\nnpm http 304 https://registry.npmjs.org/hoek\nnpm WARN engine boom@0.3.8: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm WARN engine sntp@0.1.4: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm WARN engine cryptiles@0.1.3: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm WARN engine hoek@0.7.6: wanted: {\"node\":\"0.8.x\"} (current: {\"node\":\"v0.11.12\",\"npm\":\"1.4.3\"})\nnpm http GET https://registry.npmjs.org/foreach\nnpm http GET https://registry.npmjs.org/commander/1.2.0\nnpm http GET https://registry.npmjs.org/delayed-stream/0.0.5\n\nprotagonist@0.8.0 install /data/jenkins/tools/nodejs/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\nmake: Entering directory /data/jenkins/tools/nodejs/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/HTTP.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/MarkdownBlock.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/MarkdownParser.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/Parser.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/ParserCore.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/Serialize.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/SerializeJSON.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/SerializeYAML.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/snowcrash.o\n  CXX(target) Release/obj.target/libsnowcrash/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/autolink.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/buffer.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/html.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/html/html_smartypants.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/markdown.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/stack.o\n  CC(target) Release/obj.target/sundown/snowcrash/sundown/src/src_map.o\n  AR(target) Release/obj.target/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\nIn file included from ../src/annotation.cc:1:0:\n../src/protagonist.h:12:47: error: expected class-name before \u2018{\u2019 token\n../src/protagonist.h:27:48: error: \u2018Arguments\u2019 in namespace \u2018v8\u2019 does not name a type\n../src/protagonist.h:27:63: error: ISO C++ forbids declaration of \u2018args\u2019 with no type [-fpermissive]\n../src/protagonist.h:34:54: error: expected class-name before \u2018{\u2019 token\n../src/protagonist.h:46:48: error: \u2018Arguments\u2019 in namespace \u2018v8\u2019 does not name a type\n../src/protagonist.h:46:63: error: ISO C++ forbids declaration of \u2018args\u2019 with no type [-fpermissive]\n../src/protagonist.h:53:44: error: expected class-name before \u2018{\u2019 token\n../src/protagonist.h:67:48: error: \u2018Arguments\u2019 in namespace \u2018v8\u2019 does not name a type\n../src/protagonist.h:67:63: error: ISO C++ forbids declaration of \u2018args\u2019 with no type [-fpermissive]\n../src/protagonist.h:74:46: error: \u2018Arguments\u2019 in namespace \u2018v8\u2019 does not name a type\n../src/protagonist.h:74:61: error: ISO C++ forbids declaration of \u2018args\u2019 with no type [-fpermissive]\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h: In static member function \u2018static void protagonist::SourceAnnotation::Init(v8::Handle<v8::Object>)\u2019:\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:768:13: error: \u2018v8::HandleScope::HandleScope()\u2019 is private\n../src/annotation.cc:19:17: error: within this context\n../src/annotation.cc:21:58: error: invalid conversion from \u2018v8::Handle<v8::Value> (*)(const int&)\u2019 to \u2018v8::FunctionCallback {aka void (*)(const v8::FunctionCallbackInfo<v8::Value>&)}\u2019 [-fpermissive]\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:3346:34: error:   initialising argument 1 of \u2018static v8::Local<v8::FunctionTemplate> v8::FunctionTemplate::New(v8::FunctionCallback, v8::Handle<v8::Value>, v8::Handle<v8::Signature>, int)\u2019 [-fpermissive]\n../src/annotation.cc:25:61: error: no matching function for call to \u2018v8::Persistent<v8::Function, v8::NonCopyablePersistentTraits<v8::Function> >::New(v8::Local<v8::Function>)\u2019\n../src/annotation.cc:25:61: note: candidate is:\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:5591:4: note: static T* v8::Persistent<T, M>::New(v8::Isolate*, T*) [with T = v8::Function, M = v8::NonCopyablePersistentTraits<v8::Function>]\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:5591:4: note:   candidate expects 2 arguments, 1 provided\n../src/annotation.cc:26:68: error: no matching function for call to \u2018v8::Object::Set(v8::Local<v8::String>, v8::Persistent<v8::Function, v8::NonCopyablePersistentTraits<v8::Function> >&)\u2019\n../src/annotation.cc:26:68: note: candidates are:\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:2057:8: note: bool v8::Object::Set(v8::Handle<v8::Value>, v8::Handle<v8::Value>, v8::PropertyAttribute)\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:2057:8: note:   no known conversion for argument 2 from \u2018v8::Persistent<v8::Function, v8::NonCopyablePersistentTraits<v8::Function> >\u2019 to \u2018v8::Handle<v8::Value>\u2019\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:2061:8: note: bool v8::Object::Set(uint32_t, v8::Handle<v8::Value>)\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:2061:8: note:   no known conversion for argument 1 from \u2018v8::Local<v8::String>\u2019 to \u2018uint32_t {aka unsigned int}\u2019\n../src/annotation.cc: At global scope:\n../src/annotation.cc:29:43: error: \u2018Arguments\u2019 does not name a type\n../src/annotation.cc:29:54: error: ISO C++ forbids declaration of \u2018args\u2019 with no type [-fpermissive]\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h: In static member function \u2018static v8::Handle<v8::Value> protagonist::SourceAnnotation::New(const int&)\u2019:\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:768:13: error: \u2018v8::HandleScope::HandleScope()\u2019 is private\n../src/annotation.cc:31:17: error: within this context\n../src/annotation.cc:33:17: error: \u2018class protagonist::SourceAnnotation\u2019 has no member named \u2018Wrap\u2019\n../src/annotation.cc:33:27: error: request for member \u2018This\u2019 in \u2018args\u2019, which is of non-class type \u2018const int\u2019\n../src/annotation.cc:34:29: error: request for member \u2018This\u2019 in \u2018args\u2019, which is of non-class type \u2018const int\u2019\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h: In static member function \u2018static v8::Handle<v8::Value> protagonist::SourceAnnotation::NewInstance()\u2019:\n/home/jboss/.node-gyp/0.11.12/deps/v8/include/v8.h:768:13: error: \u2018v8::HandleScope::HandleScope()\u2019 is private\n../src/annotation.cc:39:17: error: within this context\n../src/annotation.cc:40:41: error: base operand of \u2018->\u2019 has non-pointer type \u2018v8::Persistent<v8::Function, v8::NonCopyablePersistentTraits<v8::Function> >\u2019\n../src/annotation.cc: In static member function \u2018static v8::Local<v8::Object> protagonist::SourceAnnotation::WrapSourceAnnotation(const snowcrash::SourceAnnotation&)\u2019:\n../src/annotation.cc:55:47: error: base operand of \u2018->\u2019 has non-pointer type \u2018v8::Persistent<v8::Function, v8::NonCopyablePersistentTraits<v8::Function> >\u2019\n../src/annotation.cc: In static member function \u2018static v8::Handle<v8::Value> protagonist::SourceAnnotation::New(const int&)\u2019:\n../src/annotation.cc:35:1: warning: control reaches end of non-void function [-Wreturn-type]\nmake: *** [Release/obj.target/protagonist/src/annotation.o] Error 1\nmake: Leaving directory/data/jenkins/tools/nodejs/lib/node_modules/dredd/node_modules/protagonist/build'\ngyp ERR! build error \ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/data/jenkins/tools/nodejs/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:267:23)\ngyp ERR! stack     at ChildProcess.EventEmitter.emit (events.js:107:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1045:12)\ngyp ERR! System Linux 3.5.0-47-generic\ngyp ERR! command \"node\" \"/data/jenkins/tools/nodejs/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /data/jenkins/tools/nodejs/lib/node_modules/dredd/node_modules/protagonist\ngyp ERR! node -v v0.11.12\ngyp ERR! node-gyp -v v0.12.2\ngyp ERR! not ok \nnpm http 304 https://registry.npmjs.org/foreach\nnpm http 304 https://registry.npmjs.org/commander/1.2.0\nnpm http GET https://registry.npmjs.org/keypress\nnpm http 304 https://registry.npmjs.org/delayed-stream/0.0.5\nnpm http 304 https://registry.npmjs.org/keypress\nnpm ERR! protagonist@0.8.0 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the protagonist@0.8.0 install script.\nnpm ERR! This is most likely a problem with the protagonist package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls protagonist\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Linux 3.5.0-47-generic\nnpm ERR! command \"/data/jenkins/tools/nodejs/bin/node\" \"/data/jenkins/tools/nodejs/bin/npm\" \"install\" \"-g\" \"dredd\"\nnpm ERR! cwd /home/jboss/apache-tomcat-7.0.37/apache-tomcat-7.0.37/bin\nnpm ERR! node -v v0.11.12\nnpm ERR! npm -v 1.4.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/jboss/apache-tomcat-7.0.37/apache-tomcat-7.0.37/bin/npm-debug.log\nnpm ERR! not ok code 0\n. ",
    "awesome": "FWIW: Had this issue and fixed it with: https://www.npmjs.com/package/gulp-convert-newline . Formatted lined endings like:\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n  concat = require('gulp-concat'),\n  config = require('./config/apib_config.js'),\n  // [\u2026]\n  soften = require('gulp-soften'),\n  template = require('gulp-template'),\n  convertNewline = require(\"gulp-convert-newline\");\nvar srcDir = './src/*/.apib',\n  outDir = './build/',\n  outFile = 'output.apib';\ngulp.task('main', function() {\n  gulp.src(srcDir)\n    .pipe(template(config))\n    .pipe(soften(4))\n    .pipe(concat('output.apib'))\n.pipe(convertNewline({\n  newline: \"lf\"\n}))\n\n.pipe(gulp.dest('./build/'));\n\n});\n```\n. ",
    "cjha": "Any idea when this change will be published to npm? \n. ",
    "pickerflicker": "It is working now.  I must have had a typo somewhere.\n. I see.  Thanks for the tip.\n. ",
    "ChrisWeiss": "If the environment variables http_proxy and/or https_proxy are set, they should be leveraged in the call. I think this StackOverflow answer has a somewhat correct implementation (to be platform agnostic, it'd need to function if those variables are not set). (disclaimer, I'm completely new to node/coffeescript) http://stackoverflow.com/questions/3862813/how-can-i-use-an-http-proxy-with-node-js-http-client\n. ",
    "honzajavorek": "Related: https://github.com/apiaryio/dredd/issues/591\n. This is going to be implemented \ud83c\udf89 I'd appreciate if all of you commenting here (and adding @alex-glv from #591) could give me some pointers. Do you think this kind of support would be sufficient to fulfill your dreams? \ud83d\ude42 . Support for HTTP(S) proxy has been implemented in Dredd v3.3.0. See documentation on how to use it.. Please see https://github.com/apiaryio/dredd/issues/87#issuecomment-187958406.\n. With https://github.com/apiaryio/dredd/pull/737, both npm install and npm test should work on Windows. There are going to be some *NIX-specific scripts, but only those related to the Travis CI build runtime (Semantic Release, Coveralls), which is fine, I think.\nWhen https://github.com/apiaryio/dredd/pull/737 gets merge, I'm going to close this issue.. @HansHauge I believe it's a different issue. Recent changes cause that to be able to install newer Dredd, one will need a C++ compiler able to compile C++11. In the future we will eventually migrate to js-only parser by default and no compiler will be needed, but as of now, this change is needed in order to make Dredd work with your CI (especially Travis CI config files need changes - see e.g. https://github.com/apiaryio/dredd-hooks-python/pull/19).\nDetails on why all this: https://github.com/apiaryio/protagonist/blob/master/CHANGELOG.md#breaking\n. Related to #343.\n. This is still an issue. Workaround can be done by hooks.\n. This is specific to API Blueprint and quite dependent on how Drafter (the API Blueprint parser) handles the situation. The nature of the format makes it difficult for the parser to decide whether the body payload ends with a newline or not. Hence the parser always adds the newline. In JSON, this is not a problem, but in plain text formats, this is a serious issue.\nDredd could implement a strategy around this, but I'm not sure what would be the best way to approach this. In most cases, the newline is unwanted, but what if user expects the newline? Dredd cannot just always remove the newline.. My proposal for solution would be to implement following algorithm. If the list items below are all true:\n\nThe API description is API Blueprint\nGavel.js assumes the expected response body is textual\nGavel.js assumes the real response body is textual\nThe expected response body is equal to the real response body except of exactly one trailing \\n character in the expected response\n\n...then assume those response bodies are equal. As this is specific to one API description format, it should be implemented in Dredd, not in Gavel.js.. Sure, here: https://github.com/apiaryio/apiblueprintorg/blob/master/apiary.apib\nCompose [POST] (line 214) has two possible inputs (two requests), but only one output (one response).\n. As there can be multiple requests as well as multiple responses, I think the algorithm would be following (high-level coffee-like pseudocode):\ncoffeescript\nfor example in examples\n  for request in example.requests\n    for response in example.responses\n      test(request, response)\nThat's probably the best dredd can do.\n. Well, yes, good catch. I did not think about these cases while writing the code. Depends on what is the intended behavior, what the blueprint author expects in such situation - one option is to skip cases where the pair is not complete (code above) or to provide a default request and default response:\ncoffeescript\nfor example in examples\n  for request in (example.requests or [defaultRequest])\n    for response in (example.responses or [defaultResponse])\n      test(request, response)\nRight now I don't know what's Apiary app's behavior in these cases and if there's a concept of default request/response already. I'd need to experiment with it for a while.\n. This is biting me again as well as #25. The use case is pretty much the same as before - I am working on similar parsing service as in my previous comments. It uses multiple requests and responses (M:N relation) heavily. I can not use Dredd for testing such API as it always takes just the first pair.\n. @pksunkara As we discussed previously, I think adding new transactions is still a breaking change, but that could be solved. We could either make this breaking change, or to skip the transactions by default and allow people to unskip them in hooks.\nAnd when I was thinking about writing you the sentence above, I just realized a problem with this. What would be transaction names of the added requests? There is no way how to distinguish such transactions in current transaction names. According to how it works now, the transaction names would be:\nA-200 ... Lorem > Ipsum > Lorem Ipsum > Example 1\nA-400 ... Lorem > Ipsum > Lorem Ipsum > Example 1\nB-200 ... Lorem > Ipsum > Lorem Ipsum > Example 1\nB-400 ... Lorem > Ipsum > Lorem Ipsum > Example 1\nC-403 ... Lorem > Ipsum > Lorem Ipsum > Example 2\nThat's it. They wouldn't be addressable. So I'm really afraid this will be possible only after #227 are done \ud83d\ude1e . Related: #52\n. @jaydiablo I think that would be a preferred workaround as of now. Not sure how the original workaround scenario is handled now, but I'd say hooks are the way to go and should work even in the future.\nRegarding out of the box support for binary files, this all boils down to https://github.com/apiaryio/api-blueprint/issues/20, i.e. support for external assets in the API Blueprint language. Feel free to subscribe to the issue or contribute with ideas/opinions.\nAPI Blueprint has a public roadmap and at the time of writing this post, the \"External Assets\" is number 6 top priority.\n. @markfink Hi, current version of Dredd, i.e. v1.1.0, should work with the workaround. Do hooks work for you the way they're documented in http://dredd.readthedocs.io/en/latest/hooks/ ?\n. @markfink I don't have time right at this moment to test out the thing, but using before hook for setting relevant bodies/headers to the same values for real and expected should generally work, regardless the intention. Also, HTTP headers should be checked just for presence (i.e. whatever headers are in expected, need to be present also in real). If it doesn't work, then it smells like bug :eyes: \nSee http://dredd.readthedocs.io/en/latest/how-it-works/#automatic-expectations\n. Reminder: work in https://github.com/apiaryio/dredd/pull/836 should be considered once we're working on binary files support.. While this was resolved for a while since the moment we fixed working with empty responses, in https://github.com/apiaryio/dredd/pull/1094 this is going to get proper tests, examples, and docs. Thank you all in participating here! It was really helpful.. @pakore \n\nThis is blocked by support for Parameters under each Request secction in the API Blueprint https://github.com/apiaryio/api-blueprint/issues/58\n\nThe implementation in the API Blueprint format still isn't in general availability. Please express your feelings under the linked issue. Dredd isn't in a position it could easily overcome the problem, as it is a limitation of the format.\nAlso, note there are workarounds in the comments above.. @pakore I'm sorry, I did not notice the issue is locked. My apologies. It is the first thing on the public roadmap though.. Even though it's not an officially rolled-out feature in API Blueprint and Apiary, the parser supports request parameters for a long time already and Dredd does as well. Please open other issues if you find the behavior buggy. Closing this in favor of https://github.com/apiaryio/dredd/issues/1118.. @webnard is right that plain text hello world might be a problem due to extraneous newline (known bug), but your payloads are JSON. I'll try to get to this and reproduce the behavior. If you happen to find more info meanwhile, please share it here. Thanks!\n. Any updates on this? Do you experience the same problems with the latest version of Dredd?\n. I didn't hear back, so it seems it went away with later versions of Dredd. Thanks everyone for investigating! \ud83d\udc4d If this is still relevant, feel free to get back and re-open or file a new issue.. @gonzalo-bulnes @netmilk since Dredd now supports Ruby hooks and Dredd::Rack exists, do you think we can close this discussion now?\n. Thanks! :balloon: \n. @cw-peter @bmironer @netmilk This is now possible thanks to Dredd's hooks. Do you think we can close this now or that a built-in support would be still appreciated?\n. @base698 I still don't have the examples @netmilk mentioned prepared, but you have access to the transaction object in the hooks. You can modify it in any way you want. You can affect both request or response headers. See e.g. Node.js hooks examples or sanitation examples.. I think you should be able to use beforeValidation and transaction.test for that - https://github.com/apiaryio/dredd/issues/253#issuecomment-258203400. Transitively it is a Dredd issue as Dredd's behavior isn't correct, but I think it needs to be fixed in Gavel. (Also ideally, this would be a monorepo where Gavel lives as well since those two projects are very close to each other.). Just to make possible readers sure this is rightfully closed issue, couple of weeks ago I spent some time to verify that we handle HTTP headers in case-insensitive way in Apiary Documentation Console, Apiary Inspector Page, Dredd, Gavel.js. We do treat them correctly everywhere. Hence the problem why the original issue was opened and the problem @netmilk mentions in\n\npossible problem in validation of the real HTTP response to expected HTTP response given in the blueprint\n\nisn't present for some time already. I didn't notice there was an open issue for this, otherwise I'd close it at the time I performed the verification.\n. @tunovic I think there's a regression and we've lost the line numbers somehow on the way with updating the code around. Probably integration test missing to guard the behavior is there.. Since 0.21.0 the fury-swagger-adapter now provides the line and column numbers directly in the parse result.\nIf we have the same information provided by the API Blueprint adapter, we can get rid of a lot of code in Dredd and it would be a nice opportunity to revamp this feature.\n. @cilf @jolleon I think your issue was not related to the original one. When using Attributes, the API Blueprint parser generates the JSON Schema asset for you and Dredd uses that asset. There were some bugs in the parser since your comments and some of them are already fixed. If you still experience the problems, file another issue please.\nIf one doesn't use Attributes, but writes the JSON asset manually in API Blueprint but doesn't specify JSON Schema manually, then Gavel.js generates a simple JSON Schema for the JSON asset and uses it for validation. And that's what the original issue is about.\n. @cilf Thanks for verifying!\nI'll keep an eye on this. I still think that internally those are two separate issues and if I'm able to distinguish them myself by example, tests or inspecting code, I'll probably separate them, but until then I'll leave it as it is.\nThanks again for getting back to this and testing the thing with the newest Dredd version!\n. @beyourselfman Both JSON Schema and MSON take by default some things as required, others as optional. In both there are means to go out of the default behavior (i.e. required, optional, additionalProperties, fixed, ...). However, mostly, the default behavior in JSON Schema is to strictly validate given structure, whereas the default behavior MSON is usually to just describe what may appear in given structure. This is why MSON lacks some means to behave more strictly. One of these means is to strictly limit contents of arrays.\n\nPlease, move the discussion to https://github.com/apiaryio/mson/issues/31, since this isn't a place where the issue can be resolved, neither it's a place where other people interested in the matter would find your notes and opinions.\n. I'm going to split the issue, since it's getting polluted from an unrelated problem. The original issue here is about Gavel.js. What people now report here has nothing to do with Gavel.js.\nIf you use the Attributes keyword and array member objects won't get validated, you are affected by https://github.com/apiaryio/dredd/issues/449. It's feature/bug of MSON discussed at https://github.com/apiaryio/mson/issues/31. If you use raw payloads instead, you may be affected by bug in Gavel.js described and reported in first posts of this issue and feel free to subscribe here to be notified when it's fixed.\n. @netmilk @ecordell Gavel.js generates correct JSON Schema (works on http://www.jsonschemavalidator.net/). E.g. having JSON body\n```apib\n+ Response 200 (application/json)\n    [{\"sub\": 1}]\n\n```\nGavel.js generates:\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"#\",\n  \"additionalItems\": true,\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"id\": \"0\",\n      \"additionalProperties\": true,\n      \"type\": \"object\",\n      \"required\": [\n        \"sub\"\n      ],\n      \"properties\": {\n        \"sub\": {\n          \"id\": \"sub\"\n        }\n      }\n    }\n  ]\n}\nThat schema lets [{\"sub\": 1}] pass, but won't let [{\"woohoo\": 1}] to pass.\nBut Gavel.js provides true with gavel.isValid even if it shouldn't pass, so Dredd considers the test as passed. Classifying as a bug. I filed https://github.com/apiaryio/gavel.js/issues/91 as well.. This is probably related: https://stackoverflow.com/questions/45568397/dredd-apiary-mson-array-of-any-size/45591800?noredirect=1#comment78147949_45591800. @liront2 Just for the record, I'll reply under https://github.com/apiaryio/dredd/issues/597 which you filed separately.\n. First step towards cleaning up is documenting the mess. Ta da! \ud83c\udf89 \n. The original subject of this issue was just fixed by #386.\n. I think we don't have this bug anymore. The feature is not in beta anymore and for most people works as expected: http://dredd.readthedocs.io/en/latest/how-to-guides/#using-apiary-reporter-and-apiary-tests\n. @netmilk @LinusU Any updates on this?\n. @netmilk @LinusU Feel free to re-open or get to a new issue with more ideas! Closing this now for inactivity.. @lippea AFAIK this shouldn't be an issue anymore, we just forgot to close it. The behavior should be, as far as my knowledge goes, following:\n- properties marked as string in MSON, which have no sample value, get rendered as \"\" in sample JSON\n- any properties marked as nullable in MSON can contain null\nE.g. See Dredd's tests or MSON spec.\nYou noted that you are using 2.14.12 version of Dredd, but that's not possible, since currently the latest Dredd version is 1.5.0. Could you please file another issue, which would exactly describe what is your problem, your input and what's expected? Thanks!\n. Hi folks, please check out a new proposed behavior and let me know if that would work for you: https://github.com/apiaryio/dredd/issues/556#issuecomment-252206782\n. I believe this is already addressed by v4.7.1 and further, I just forgot to close this one. Thanks everyone involved and I'm sorry it took so long to fix this.. I was unable to to reproduce this with the latest version of Dredd. @milch Would you be able to try it out? I think this might be fixed already.. Great! \ud83c\udf89 . I created Windows label which lists all related issues.\n. @netmilk I've renamed this issue so its scope is clearer. It'd like to close it once we have the AppVeyor badge. Individual problems should have their own issues with a Windows label.. I don't think we have this bug anymore. Please feel free to comment here in case you experience any related issues.\n. I was able to successfuly use custom options in JavaScript hooks, but it's pretty hidden feature and I don't believe it's possible in other languages as of now:\njs\nvar hooks = require('hooks');\nvar userId = hooks.configuration.options.custom.userId || {};\n...\nAlso, I don't know if this is intended or hack, so I'd be cautious when using it. We may rebuild this \"feature\" in the future.\n. If you're using non-JS hooks, you can load the YAML file in the language of your choice and easily parse out the values yourself.\nIt's going to take a long time until non-JS hooks will be able to access custom data from Dredd, because it means we'd need to change the protocol how Dredd communicates with the hook handlers and all the hook handlers would need to implement it.. I guess this is related to #343 and https://github.com/apiaryio/dredd/issues/67. @netmilk I think we should decide whether this is a feature or bug and deal with it. To me, it looks like bug and should be either propagated to the parser or worked around in Dredd. It's very, very intuitive behavior and it even bitten myself in the past.\n\nNote: The docs @netmilk mentions above moved here.\n. This is still an issue, but I decided to close duplicates.\n- The main issue to track this problem is now: https://github.com/apiaryio/dredd/issues/67\n- Workaround can be done by hooks: http://dredd.readthedocs.io/en/latest/hooks-nodejs/#remove-trailing-newline-character-in-expected-plain-text-bodies\n. I'd like to address the problem. I added a comment explaining the situation: https://github.com/apiaryio/dredd/issues/67#issuecomment-287759448 If you have any ideas, I'd be very glad to discuss possible solutions.. @yzaslavsky I'd love to solve this issue, but as @netmilk mentioned, we need more info here. Would you mind getting back to this and sharing something we could easily reproduce? Thanks!\n. I'm sorry, it's been a long time and we haven't hear from you @yzaslavsky. I'm closing this, but still, if you feel like getting back, please do so and comment here.\n. I am proposing a slightly different approach.\n\nIntroduction\nThe proposal below attempts to address following issues:\n- Transaction Examples are hard to identify (just by enumeration: Example 1, Example 2) and because they're implicit, people do not know their concept well and confuse them with Requests. I removed them from the Transaction Path. (https://github.com/apiaryio/blueprint-transactions/pull/3)\n- Since Transaction Examples and Request-Response pairs are different things, the original specification above doesn't allow addressing complex combinations, such as multiple Requests with multiple Responses. I included identifiers for Requests and Responses as components of the Transaction Path. (https://github.com/apiaryio/dredd/issues/25, https://github.com/apiaryio/dredd/issues/78, https://github.com/apiaryio/dredd/issues/294)\n- Resulting Transaction Path should be much more descriptive and unique. It still won't catch all scenarios though. Example of an edge case:\napib\n  + Request\n  + Response 200 (application/json)\n      + Body ...\n  + Response 200 (application/json)\n      + Body ...\nHowever, while such thing is valid API Blueprint syntax, it is ambiguous and should be treated as such. Transaction Path won't distinguish between the two Responses and Dredd will refuse to consume such blueprint. That would be considered as correct and expected behavior, because Dredd can't possibly guess what to test.\nTransaction Path (string)\nCanonical, deterministic way how to address a single HTTP Transaction (single Request-Response pair). It can serve as a unique identifier of the HTTP Transaction.\nThe Transaction Path string is a serialization of the pathOrigin object according to following rules:\n- Colon : character as a delimiter.\n- Colon character, which happens to be part of any component of the path, is escaped with backslash character \\.\n- No other characters than colon : are escaped.\nComponents\n\nIf certain component isn't available in the source data, it is present in both the pathOrigin object and the Transaction Path as an empty string.\nThe requestName component is defined as name of the request followed by parentheses containing effective value of the Content-Type header. Any of those two parts can be omitted. If both parts are present, they're separated by a single space  character.\nThe responseName component is defined as HTTP code of the response followed by parentheses containing effective value of the Content-Type header. The Content-Type part can be omitted. If both parts are present, they're separated by a single space  character.\n\nExamples\nFull Notation with Multiple Request-Response Pairs\n``` markdown\nSample API Name\nGroup Sample Group Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nRequest (application/json)\n\nResponse 200 (application/json)\n\n\nRequest (application/xml)\n\nResponse 200 (application/xml)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"Sample Group Name\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"(application/xml)\",\n  \"responseName\": \"200 (application/xml)\",\n}\nTransaction Path:\nSample API Name:Sample Group Name:Sample Resource Name:Sample Action Name:(application/xml):200 (application/xml)\nFull Notation with Implicit Request\n``` markdown\nSample API Name\nGroup Sample Group Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nResponse 200\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"Sample Group Name\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"\",\n  \"responseName\": \"200\",\n}\nTransaction Path:\nSample API Name:Sample Group Name:Sample Resource Name:Sample Action Name::200\nFull Notation with Multiple Requests within One Transaction Example\n``` markdown\nSample API Name\nGroup Sample Group Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\n\nResponse 200 (text/plain)\n\n\nRequest Sample Request Name (application/json)\n\nRequest Another Sample Request Name (application/json)\nRequest (application/json)\nResponse 200 (application/json)\nResponse 401 (application/json)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"Sample Group Name\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"Another Sample Request Name (application/json)\",\n  \"responseName\": \"401 (application/json)\",\n}\nTransaction Path:\nSample API Name:Sample Group Name:Sample Resource Name:Sample Action Name:Another Sample Request Name (application/json):401 (application/json)\nFull Notation with Multiple Requests Each Having Multiple Responses\n``` markdown\nSample API Name\nGroup Sample Group Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nResponse 200 (application/json)\nResponse 401 (application/json)\n\nResponse 500 (application/json)\n\n\nRequest (application/xml)\n\nResponse 200 (application/xml)\nResponse 500 (application/xml)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"Sample Group Name\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"\",\n  \"responseName\": \"401 (application/json)\",\n}\nTransaction Path:\nSample API Name:Sample Group Name:Sample Resource Name:Sample Action Name::200 (application/json)\nFull Notation with Resolution of the Effective Content-Type Value\n``` markdown\nSample API Name\nGroup Sample Group Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\n\nRequest\n\nHeadersX-Request-ID: 30f14c6c1fc85cba12bfd093aa8f90e3\nContent-Type: application/hal+json\n\n\n\n\n\nResponse 200\n```\n\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"Sample Group Name\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"(application/hal+json)\",\n  \"responseName\": \"200\",\n}\nTransaction Path:\nSample API Name:Sample Group Name:Sample Resource Name:Sample Action Name::200 (application/json)\nFull Notation without Group\n``` markdown\nSample API Name\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nRequest (application/json)\nResponse 200 (application/json)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"Sample API Name\",\n  \"resourceGroupName\": \"\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"(application/json)\",\n  \"responseName\": \"200 (application/json)\"\n}\nTransaction Path:\nSample API Name::Sample Resource Name:Sample Action Name:(application/json):200 (application/json)\nFull Notation without Group and API Name\n``` markdown\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nRequest (application/json)\nResponse 200 (application/json)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"\",\n  \"resourceGroupName\": \"\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"(application/json)\",\n  \"responseName\": \"200 (application/json)\"\n}\nTransaction Path:\n::Sample Resource Name:Sample Action Name:(application/json):200 (application/json)\nFull Notation without Group and with API Name Containing a Colon\n``` markdown\nMy API: Revamp\nSample Resource Name [/resource]\nSample Action Name [POST]\n\nRequest (application/json)\nResponse 200 (application/json)\n```\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"My API: Revamp\",\n  \"resourceGroupName\": \"\",\n  \"resourceName\": \"Sample Resource Name\",\n  \"actionName\": \"Sample Action Name\",\n  \"requestName\": \"(application/json)\",\n  \"responseName\": \"200 (application/json)\"\n}\nTransaction Path:\nMy API\\: Revamp::Sample Resource Name:Sample Action Name:(application/json):200 (application/json)\nSimplified Notation\n``` markdown\nGET /message\n\n\nResponse 200 (text/plain)\nHello World\n```\n\n\nTransaction Path Origin:\njson\n{\n  \"apiName\": \"\",\n  \"resourceGroupName\": \"\",\n  \"resourceName\": \"/message\",\n  \"actionName\": \"GET\",\n  \"requestName\": \"\",\n  \"responseName\": \"200 (text/plain)\"\n}\nTransaction Path:\n::/message:GET::200 (text/plain)\n. @kaikun213 There is no such feature right now and it wasn't planned. Could you share more about why it would be useful for you?. @kaikun213 I still don't quite understand how origins are more useful then the transaction names themselves. The transaction names are just origin object properties joined together. You can list origins and all the other info in the hooks just by inspecting the transaction object.\nIntroducing the transaction paths suggested in this issue would probably solve your problems though, because from what you write it seems to me you're experiencing some of the non-determinism of transaction names.. Note: We should drop any structure from the transaction path. Its only purpose should be to \"hash\" individual requests present in the API description into a single human-readable declarative string, in a deterministic way. We should forget about XPath / JSON Pointer. This is mapping, not breadcrumbs.\nFor cases when this couldn't be deterministic, user should always be able to give the request/response a name in the API description to distinguish them and to address them.. @halfvector We had some design sessions around this in April and per my last comment I have a better idea on how it should work. Currently there's no ETA though. It needs finalization of the design before anyone can implement it. I recognize it as one of the largest Dredd pain points, but as such it also requires me to carve out a significant block of uninterrupted time to tackle it.. I think this is indeed a duplicate of #177. Also see https://github.com/apiaryio/dredd/issues/232#issuecomment-279975082 on how to make Dredd testing stricter.. You can now tackle the problem by using several techniques:\n\nIn API Blueprint in the + Attributes section (which is powered by a language called MSON), you can now use a brand new type attribute fixed-type, which doesn't allow additional properties.\nIn API Blueprint, you can also write your own JSON Schema with additionalProperties: false on the objects. That was always possible, BTW.\nIn Swagger, you specify your data structures as JSON Schema, thus just use the power of the language and specify additionalProperties: false on your objects.\n\nAll these options should work with current Dredd versions. Please report under this issue if you find any obstacles when trying to get it working.\nI'd say by introducing fixed-type to the mix, the problem is sufficiently addressed and this issue could be closed, but I'd like to hear back from all of you involved. Also, I think something like what I just wrote should be in the docs, so I'm turning this into a docs issue. . @netmilk Making Dredd extensible as described in https://github.com/apiaryio/dredd/issues/253 would allow others to implement this themselves. Hm? :wink: \n. Resolved by #332 :tada:\n. #332 was merged :tada: \n. @hellboy81 To implement what you described, you should use Protagonist or a different Drafter binding (depends on your programming language), parse your API Blueprint file and generate the JSON file. @w-vi pointed you to the right place. Feel free to ask more on this topic on our Slack.\n. Since @pgconreaux didn't get back and at the same time I think we've resolved an issue with the same error message, I'll consider this as closed. Feel free to come back and comment if this is still broken in the latest Dredd version.\n. @netmilk Do you know what is the status of this?\n. @kylef That doesn't prove it's available in Node.js hooks as described in http://dredd.readthedocs.org/en/latest/hooks-nodejs/#using-chai-assertions. The easiest way to get status of this issue would be to try it out. I may get to that and if chai works in hooks without installing, I'll close this.\n. I confirmed it works.. It's not in the JavaScript hooks yet. But you can easily code your own:\njs\nhooks.beforeEach(function(transaction, done) {\n  if (transaction.name.match(/^Admin > Member actions > /)) {\n    // do what you want\n  }\n  done();\n}\n. Now that Dredd supports hooks, wouldn't adding parameters using hooks solve this issue?. @netmilk I'd personally like to see \"not implemented yet\" flag right in the API Blueprint syntax, but making it happen in Dredd would allow us to support it immediately and in all formats (thinking about Swagger).\n. I'd say the best way to achieve this at the moment is to use Dredd's hooks and to mark transactions for not implemented endpoints as skipped.\njs\nhooks.before('Machines > Machines collection > Get Machines', function (transaction, done) {\n  transaction.skip = true;\n  done();\n});\nI'm not very skilled in Ruby, but you can do the same with Ruby hooks. Feel free to comment here if this won't solve your particular problem.\n. test.valid or test.isValid? (you mention both)\nOtherwise, your proposal make sense to me. However, this would mean Gavel would always run and user could just overwrite it's results, but I guess that's not an issue.\n. Dredd's life cycle, as it was designed and documented, was broken until now - you could not change the transaction.test object in hooks and in some cases, Dredd would emit test fail events to reporters right after Gavel validation. This is now fixed in https://github.com/apiaryio/dredd/pull/648.\nI'm pretty confident we have now, as @netmilk wrote, everything in place. Moreover, everything should also work as expected and documented.\nHence implementing this in hooks should be entirely possible now and not only with afterEachValidation hooks, but also with after and afterEach hooks. This issue can be closed if the use case gets a nice, working example in documentation (and preferably also test).\n. @joaosa this is the issue we're solving in https://github.com/apiaryio/gavel.js/issues/25, right?. No problem, just linking it together\nOn Thu, 9 Mar 2017 at 07:35, Jo\u00e3o Sousa Andrade notifications@github.com\nwrote:\n\n@honzajavorek https://github.com/honzajavorek yes that seems to be the\ncase. Must've mixed the issues\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/254#issuecomment-285267872, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARTMWDxr6imULAeayWzRffS2Doqe1I6ks5rj52agaJpZM4Fe3kT\n.\n. I think this should be fixed by #767 and will be in the next Dredd release, thanks to @joaosa's work on Gavel.js!. @mrname Good! I'm glad it works.. Should be fixed in Dredd v3.4.2.. @ddelnano \nthe hooks should have the same feature set\n\nMy opinion would be that all hooks implementations should conform to the same base feature set and it's up to their authors to try out innovations. If those innovations prove to be useful, they can get incorporated back as a standard feature in Dredd (one thing which pops in my head would be * operator in transaction names to pattern-match them in hooks, which I think is a great idea and should be part of the transition to https://github.com/apiaryio/dredd/issues/227).\nOf course, when introducing innovations, authors of hooks risk future need for backwards-incompatible changes when the common implementation would be slightly different or behave slightly differently than what was originally introduced. But that's life. Without innovations and risk, there's no progress! \ud83d\ude80 \n. @coagulant I'm sorry we didn't get to this for so long :disappointed_relieved: Do you think you could try to rebase this against current master and revisit this PR?\n. @coagulant OK, thanks for letting me know! I'll try to use your code anyway if applicable, thanks very much for the contribution!\n. Closing this, replaced by #662 and released in v2.2.4. @coagulant Thank you for contributing, even though this PR didn't make it to master. You still inspired others to contribute this and finally, it's fixed! And I'm sorry it took such a long time.. @Mkax I think it should be possible to achieve that with Dredd Hooks: http://dredd.readthedocs.org/en/latest/hooks/ Do hooks solve your issue or do you think this would make more sense as a built-in Dredd feature?\n. I'm sorry, actually, I'm not completely sure this can be implemented with hooks :confused: This is, I believe, related to https://github.com/apiaryio/dredd/issues/253.\n. @Mkax You can achieve this now thanks to https://github.com/apiaryio/dredd/pull/648. You can use Dredd for testing as usual, but then have an afterEach hook, which will remove all test results from the transaction.test object, except of those related to status codes.\nClosing this, but if you have any questions or if you bump into any problems when implementing the hooks, let us know, please!\n. I believe @pksunkara was hit by this as well.\n. Thanks for the report! I think this should be handled by the API Blueprint parser, Drafter. IMHO similar issue to https://github.com/apiaryio/drafter/issues/350. I'll file a corresponding issue there.. @obihann I'm sorry we did not respond for a longer time :cold_sweat: Thanks for your work! :+1: As master is fixed now, would you mind to rebase with it and try whether tests pass?\n. And since you're already touching the content type logic in your PR, I'd prefer if it would be able to deal also with content types such as application/hal+json, application/vnd.geo+json and similar ones. What do you think?\n. @obihann Awesome! If I may provide hints, I'd use media-typer for the heavy lifting.\n. I think we should incorporate this as part of #765.. I'm very sorry we were not able to get back to this. I need to close this as we're going to work on #705 first, which requires having no pending Pull Requests. We'll get back to this proposal as soon as we're revamping the CLI reporter: #765\nThanks for all the work! I'll do my best for this contribution not to be forgotten!. @revett We thought about revamping the whole CLI reporter: #765 . Yes, that would be nice!. The current status is that Go hooks exist a we (maybe a bit too early) even integrated them right into Dredd, but to be sure we have them working, we need to implement https://github.com/snikch/goodman/issues/1 first and add Goodman also to our integration tests for hooks handlers.\nIf anyone feels confident to finish this and help @snikch (and us) with making the tests pass, it would be super awesome. Golang heroes wanted! :smirk_cat: :rocket: :raising_hand: \n. @ddelnano This is absolutely awesome! :tada: :two_hearts: :dancer: :+1: :balloon: :sparkles: \n. :tada: :trophy: :tada: \n. @w-vi @snikch @ddelnano I'm not sure what's the action point here. Is there anything for Dredd to fix or change?. OK, good! \ud83d\udc4d . Reopening this. This backfired with Rust hooks (#834) and it needs to be properly documented and explained.. This issue is going to be addressed in #382.\n. Hey, @VimalDhaduk1 any updates on this?\n. @vimaldhaduk1 Hey, just to let you know that Dredd now doesn't need a compiler to get installed, so it should install on any system easily without issues.\nPlease let us know if your problems persist.\n. @borekb Looks like it's worth a new issue. I have an idea what's happening, but it's just hypothesis. Let's discuss it under the new one. Thanks!\n. @hobofan With the same request and different state of the server, shouldn't your API return different responses for each of the transactions? I struggle to find a good use case for this.\nE.g. when I request a user representation while user with given ID doesn't exist, I expect the response to be 404. When I request a user representation while user with given ID does exist, I expect the response to be 200. For that you'd need to have two different transactions specified in your API description and no rerun would help.. I think I understand better now. Workaround: In the beforeAll hooks, one should be able to re-order the transactions array / duplicate transactions in the array. I don't think the re-run is worth a separate feature if we keep the possibility to modify the transactions array according to one's needs in before hooks. @hobofan What do you think?. Closing in favor of https://github.com/apiaryio/dredd/issues/995. Closing in favor of https://github.com/apiaryio/gavel.js/issues/90. It's Gavel.js improvement request rather then something Dredd should care about.. I reported this as Dredd user. Now I've became Dredd maintainer, so I can fix it for myself :smile: However, haven't seen this for a while and I have no clue now how to reproduce this. If @JackuB doesn't have any idea and also doesn't experience this problem anymore, then this was probably fixed as side-effect of some other work on Dredd (most likely #332) and I'm closing this.\n(Yeah, I copied this text from https://github.com/apiaryio/dredd/issues/280, but I really mean it!)\n. I reported this as Dredd user. Now I've became Dredd maintainer, so I can fix it for myself :smile: However, haven't seen this for a while and I have no clue now how to reproduce this. If @JackuB doesn't have any idea and also doesn't experience this problem anymore, then this was probably fixed as side-effect of some other work on Dredd and I'm closing this.\n. This could be related: https://travis-ci.org/apiaryio/dredd/jobs/98479333 Seems like something in the first test fails to finish/close and then it blocks port for several subsequent tests.\n. I haven't seen this for a while. Closing. If it appears again, let's re-open this.\n. Once https://github.com/apiaryio/dredd/pull/338 is merged, nullable should be supported in Dredd. Although the original goal of the Pull Request is slightly different, it contains basic integration test also for nullable and it seems to work correctly.\n. Yes, nullable should work.\n. @philsturgeon Would you mind to raise the question in https://github.com/apiaryio/fury-adapter-swagger/issues/ ? If it's becoming a de-facto standard even for 2.0, I quite like the idea.. I managed to get this error when testing the reporter while having the server down. Just noting this so we could write tests for that scenario.\nInitial implementation of the fix is in #331, we're soon about to get to it and finish it, but #332 had to go first.\n. I haven't had time to try to reproduce this, but it seems to me like a Drafter issue. There has been some fixes recently, so if anyone can confirm whether this bug report is still valid with the latest Dredd version, that would be awesome. Maybe we can already close this.\n. Since today we're testing Dredd on both v4 and v5 (see https://github.com/apiaryio/dredd/pull/310) and tests are passing. I think we can consider this to be done and if there are any particular problems found when using these Node.js versions, let's create individual issues for them. Thanks everyone! :balloon: \n. I just noticed I replied in https://github.com/apiaryio/blueprint-transactions/pull/3, but not here. This is something we are going to work on when #227 develops into a final specs on how to handle this all. It's definitely on our roadmap.\n. @runk Hi, just letting you know, that the revamp is done and out in current version, so the \"improvements freeze\" recommended by @w-vi is over!\n@netmilk What do you think about this feature?\n. @macdao Could you please verify this still doesn't work with the newest Dredd?\n. @macdao I didn't hear back. Try to install Dredd using npm install dredd --no-optional to avoid compilation. I'm curious whether you'd experience the error as well. Closing for now, feel free to get back and re-open the issue.. Thanks! :balloon: \n. @netmilk I think it is worth squashing these two commits, but YMMV\n. Squashed the commits for @netmilk, rebased with master & merging :balloon: \n. Is this some special Markdown syntax supported by Sphinx? Never seen this before in Markdown.\n. Ah! I get it (facepalm) I thought it's something different than it is. Thanks for clarification.\n. This is awesome! Can't wait! :gift: \n. Sorry for hijacking the PR, but I felt like I could help.\n- Addressed @w-vi's comment.\n- Reworded the sentence and ordered the versions so the newest ones are mentioned first.\n- Removed ~0.8.15 since we do not test against it - we can't guarantee Dredd will work with it.\n. @w-vi rebased\n. Great, thanks!\n. @frejsoya \nLooks like this is a known regression in the parser which Dredd 1.0.2 is using. If you downgrade to Dredd 1.0.1 it should resolve these problems. This can be installed via:\n$ npm install dredd@1.0.1\nYou can track the issue at https://github.com/apiaryio/drafter/pull/199 where we're working on a fix for this which should be released soon.\n. @w-vi We're upgrading to the latest Protagonist and releasing new Dredd in #347, so this should be closed soon.\n. Dredd@v1.0.4 released! :balloon: \n. This was closed by #362.\n. @pcman312 This would be definitely a wanted feature, but I think the maintainers should focus on bigger challenges now, which are hard to contribute. This is a kind of thing anyone can easily send as a Pull Request.\nWe're keen to guide and support anyone willing to work on this. Just let us know here and we'll point you to what needs to be done. The original #293 can work as a good starting point as well.. I don't know how the communication of hooks and Dredd is done exactly, but from @XVincentX's comment I believe the architecture is TCP as transport protocol and something custom as application protocol.\n@XVincentX asks for HTTP, which is application protocol (running on top of TCP), but isn't fully duplex. While I like HTTP, I think we should use the right tool for particular problem. Can't we find a different, at least somewhat standardized application protocol, which we could use in Dredd instead of the custom one? Something which works on top of TCP socket, which allows us full duplex and at the same time it is popular enough that there exist libraries which can simplify the heavy lifting?\nI'm not expert on existing, popular TCP-compatible protocols, but wouldn't e.g. WebSockets fit here better than HTTP?\n\nWebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application. The WebSocket Protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request.\n. I think we can close this. Sockets work well and HTTP isn't duplex, which is one of the requirements. No other thoughts shared for a year long period.\n. The link isn't pointing to the original place anymore. @XVincentX which one was it?\n\n```\nHOOK_TIMEOUT = 5000\nCONNECT_TIMEOUT = 1500\nCONNECT_RETRY = 500\nAFTER_CONNECT_WAIT = 100\nTERM_TIMEOUT = 5000\nTERM_RETRY = 500\n```\n. #332 was merged :tada: \n. @netmilk \nI'd appreciate smaller & multiple PRs in the future instead as I'm not that proficient in the Dredd codebase yet and it's not easy for me to distinguish various refactorings and fixes you do \"on the way\" while originally addressing something else.\nI believe I did my best in understanding the changes :microscope: and it looks good to me. Leaving open if you want to address my comments before merging, otherwise feel free to do the merge yourself when you're at it, I approve :+1: \n. :open_mouth: \n. @netmilk Review finished, please address comments. The most serious one seems to be https://github.com/apiaryio/dredd/pull/332#discussion_r50229577, the others are nitpicks.\n. We agreed with @netmilk that I'll take over this PR and I'll get it ready to be merged. So far I'd like to see addressed following items:\n- [x] Tested against each hook handler test suites (gets enabled by #359)\n- [ ] Clarification of https://github.com/apiaryio/dredd/commit/552e13bf9c9834bf7e29d928fc74ed85bece312e#commitcomment-15883870\n- [x] Clarification of https://github.com/apiaryio/dredd/pull/332#discussion_r50236691\n- [ ] Why has coverage dropped? (Is https://github.com/apiaryio/dredd/pull/332#issuecomment-167741430 the answer?)\n. Looks like language hooks are failing on this:\nWhen I run `dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language \"dredd-hooks-python\" --hookfiles ./hookfile.py`\n...\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: ./hookfile.py\ninfo: Spawning `dredd-hooks-python` hooks handler\ninfo: Hook handler stderr: ./hookfile.py:1: RuntimeWarning: Parent module 'hookfile' not found while handling absolute import\n  import sys\n./hookfile.py:2: RuntimeWarning: Parent module 'hookfile' not found while handling absolute import\u001b[0m\n  import dredd_hooks as hooks\ninfo: Hook handler stdout: Starting Dredd Python hooks handler\ninfo: Connected to the hook handler, waiting 0.1s to start testing.\nlocalhost - - [10/Feb/2016:10:33:29 UTC] \"GET /message HTTP/1.1\" 200 14\n- -> /message\npass: GET /message duration: NaNms\ninfo: Sending SIGTERM to the hooks handler\ninfo: Hook handler stderr: \nConnection closed\nHook handler 'dredd-hooks-python' was killed\ninfo: Sending SIGTERM to the backend server\n== Sinatra has ended his set (crowd applauds)\ninfo: Sending SIGTERM to the backend server\ninfo: Killing backend server\nerror: Hook handler 'dredd-hooks-python' was killed\nSimilarly for PHP or Ruby. Failing scenarios:\n- cucumber features/execution_order.feature:23 (Python, PHP, Ruby)\n- cucumber features/failing_transaction.feature:23 (Python, Ruby)\n- cucumber features/hook_handlers.feature:23 (Python, PHP, Ruby)\n- cucumber features/multiple_hookfiles.feature:22 (Python, PHP, Ruby)\n. @w-vi So you say we need to fix all the hooks?\nThe dependent builds pass for Dredd master, but not here. That means something has changed in this refactoring. At the same time, the Cucumber test suite did not change.\n. Got slown down by https://github.com/apiaryio/dredd-hooks-template/issues/6, but I'm able to reproduce the error also on my machine now. There seem to be three problems:\n- [x] rebase against master after v1.0.5 was released\n- [x] Incorrect exit status/SIGTERM/SIGKILL handling in refactored Dredd. It's probably a problem with lifecycle of this property.\n- [x] Problems with logging cause several tests to fail. logger.log sometimes doesn't appear on output.\n- [ ] The most serious one: The problems above were not caught by Dredd's own unit/integration tests... (e.g. this one)\n. So after all, there are three outstanding issues:\n-  Clarification of https://github.com/apiaryio/dredd/commit/552e13bf9c9834bf7e29d928fc74ed85bece312e#commitcomment-15883870\nI discussed it slightly with @netmilk and it looks like it's an intention. I've added comments noting the fact in 9de0f0e.\n-  Why has coverage dropped? (Is https://github.com/apiaryio/dredd/pull/332#issuecomment-167741430 the answer?)\nI investigated coverage reports and there should be no problems with picking up the CLI tests. However, the CLI tests seem to be somewhat incomplete - the biggest gap is this:\n\n-  The problems above were not caught by Dredd's own unit/integration tests... (e.g. this one)\nRelated to previous point. Since the CLI tests are not as thorough as they look like, they probably missed some of the behavior which was then discovered by the cucumber integration tests performed individually with each hook handler implementation.\nVerdict\nI refuse to continue with snowballing of this PR. The implementation looks all right and passes all tests we came up with and it is also manually tested by myself. Evidently, there is a gap in coverage/CLI tests. I'm suggesting that we merge this PR and revisit quality of the CLI tests in small, subsequent PR.\nCommits to review before merging\n\n40a9998\nff85ec9\n0822af4\n. This is not possible for a package installed from NPM. We could do this for local development, but I don't see much value in it. If spending time to something, in this regard, let's spend it on #422.\n\nAlso, I'm not sure we suffer many problems caused by version bumps etc. at the moment. We have to monitor (David DM, Snyk), be consistent, be prompt and careful with upgrading. I don't see other ways around it.\n. This is now \"solved\" by https://github.com/apiaryio/dredd/issues/660.. If merged, this should now fix https://github.com/apiaryio/dredd/issues/319 and https://github.com/apiaryio/dredd/issues/283 and https://github.com/apiaryio/protagonist/issues/113.\n. @netmilk Addressed comments, added negative scenarios. :christmas_tree: Everything seems to work. :heavy_check_mark: However, I made significant changes, so I'm a bit hesitant to do the merge myself now.\n. Implemented by #548!\n. I think this should be implemented using the TAP protocol: https://testanything.org/. Let's do this. The idea is:\n\nLet's only keep the default CLI reporter, Apiary reporter, and let's add TAP reporter. Something like this.\nUsers could use --reporter=cli, --reporter=apiary, or --reporter=tap to indicate which reporter they want to use. They should be able to somehow use multiple reporters (e.g. to see CLI output and to produce xunit file at the same time), on both NIX and Windows. It needs investigation whether this is possible with TAP. We also need to write docs on this with ready-made examples for NIX and Windows. And we should test the basic cases. This is gonna be a breaking change for Dredd, so let's have some solid \"migration docs\" in place when the version hits the npm. The --output option would possibly disappear.\nWe need to think about capturing server output - https://github.com/apiaryio/dredd/issues/593 - and how does it play together with TAP as the server output is obviously an additional noise to TAP. Also, what about hooks logging -  hooks.log, console.log, and hook runners stdout?\nUsers then could use any TAP tools to do whatever they want - xunit, dots, HTML, nyan cats, ... We will maintain less reporters. Dredd's E2E tests could benefit from Dredd having a machine-readable output. That's win-win-win.\nMaybe we could use tape to ease our work, needs investigation.\nWe could add Dredd to this page and here.\nReworking Dredd's E2E tests to use TAP instead of parsing the CLI reporter output allows us to revamp the CLI reporter - https://github.com/apiaryio/dredd/issues/765 - in the future without consequences to E2E tests.\n\nOpen questions\nFollowing needs to be answered before we do this:\n\n[ ] Is TAP a good idea at all?\nhttps://github.com/avajs/ava/issues/920#issuecomment-304694295\n[ ] Do current Dredd reporters have working equivalents on npm?\ndot - https://github.com/scottcorgan/tap-dot\nhtml - https://github.com/gabrielcsapo/tap-html, https://github.com/Quobject/tap-to-html (ugly)\nmarkdown -  https://github.com/Hypercubed/tap-markdown (insecure, outdated deps)\nnyan - https://github.com/calvinmetcalf/tap-nyan\nxunit - https://github.com/aghassemi/tap-xunit\n[ ] How to replace multiple reporters support?\nLooks like TAP doesn't support anything like that. User would need to save an intermediate file \ud83d\ude15 We would essentially lose multiple reporters support out of the box.\n[ ] How would Windows support look like?\nAccording to searching the internet, Windows shell should support | > < >> << redirections, I did not expect that. Thus this is probably a non-issue, I'd test it though.\n[ ] How to handle server and hooks/hook handler output?\nCapture & let the user control whether it's outputted or not. Possibly output to stderr alongside the stdout TAP (that's what AVA seems to do).\n\nResources\n\nhttps://testanything.org/\nhttps://github.com/sindresorhus/awesome-tap\n\nhttps://www.node-tap.org/tap-format/. @garyluu @juliengerboud @mlambley I noticed you are using the HTML reporter. What is your use case for it? Why do you prefer it?. Thinking about this further:\n\n\nAlthough the TAP protocol is vague and underspecified, it's superset is pretty well described here. We could make the TAP reporter according to that spec and I think everything important could fit there.\n\ndot, xunit, nyan reporters can be easily provided by tap- libraries.\nBoth the html and markdown reporters we have right now are so low-quality I'm actually surprised anyone is using them. The HTML tap- libraries are better than what we have, so let's recommend them. I could not find a single person in Dredd issues using the markdown reporter. I wouldn't be very sad to deprecate it without replacement. After all, anyone is welcome to build whatever they like on top of TAP, the data are going to be there.\n\nSo the remaining issue is how to support multiple reporters. I've seen quite a few people here to use Dredd with dot reporter together with apiary or html reporters, as in\n\nas a Dredd user I can see whether anything failed in the console and I can go to the file to see the verbose output\n\nTAP steals stdout, so that wouldn't be possible. And the stderr would be probably ocuppied by redirected server and hooks output... \ud83e\udd14 . With @michalholasek we designed following steps to take:\n\nUse debug for Dredd application logging. Separate application logging from the reporters output completely.\nOutputs debugging info only if asked.\nFixes brievity of the dot reporter (https://github.com/apiaryio/dredd/issues/593), the --names option, and other parts of Dredd.\nEnables https://github.com/apiaryio/dredd/issues/765 in the future.\n\n\nAdd the TAP reporter alongside current reporters and add respective tests and docs. Add deprecation warning to reporters intended to be replaced by TAP with a link to this issue and a call for comments.\nLet's see whether TAP covers all use cases for people. If yes, let's remove the other reporters in the future. If not, let's design the solution together with interested users.\n\nRegarding the server/hooks output, we can capture it as suggested in https://github.com/apiaryio/dredd/issues/593#issuecomment-251946163 and put it into special TAP comments as part of the stdout. The stderr would be reserved for output of the debug utility.. @garyluu @juliengerboud Thanks for sharing! Did you need the CLI output as well or was the HTML file sufficient for you? I mean, if you run Dredd like you described, did you care about what it outputs to the console at all?. Thanks, Dredd@v1.0.4 released!\n. Could https://github.com/apiaryio/dredd/issues/305 be related?\n. I was able to reproduce this problem. It indeed looks like some issue with whitespace. Simple response with text/plain content type doesn't pass Dredd test. If changed to something with JSON content type, it passes.\n. This is still an issue, but I decided to close duplicates.\n- The main issue to track this problem is now: https://github.com/apiaryio/dredd/issues/67\n- Workaround can be done by hooks: http://dredd.readthedocs.io/en/latest/hooks-nodejs/#remove-trailing-newline-character-in-expected-plain-text-bodies\n. I'd like to address the problem. I added a comment explaining the situation: https://github.com/apiaryio/dredd/issues/67#issuecomment-287759448 If you have any ideas, I'd be very glad to discuss possible solutions.. @mypark Could you please try whether the problem persists with v1.0.7 of Dredd? Thanks!\n. @mypark In this case, I'm not sure what can we do to help you :disappointed: If you happen to find any new info proving Dredd is guilty and ideally also some clues supporting the case and allowing us to resolve the issue, please get back and don't hesitate to re-open this. We'll make sure Dredd will be judged!\n. @mypark If it's still valid, check https://github.com/apiaryio/dredd/issues/450, it might be a similar problem.\n. @romansklenar This should be now possible thanks to #648. Could you please confirm this now works for you? BTW, I think setting transaction['skip'] = True should be sufficient now (see emitResult in the transaction runner, the skip flag is checked and taken care of before anything else).\n. :+1: I wanted to do this myself for a long time :)\n. Could you please try whether the problem persists with v1.0.7 of Dredd? Handling of hooks and server processes went through a significant revamp. Thanks!\n. @romansklenar Thanks! :blush: \n. Thanks! :balloon: \n. Thanks! :balloon: \n. @w-vi We discussed this feature with @netmilk thoroughly and we both agreed this feature isn't needed in Dredd currently. People can perform actions before and after they run Dredd itself in their wrapping shell scripts. Maybe there are more concrete use cases for this and more users will vote for this feature, but until that time, I'm closing this.\n. Awesome, thanks! :gem:\n. Maybe also something like \"CI configuration\" generator could be useful?\n. Actually... https://docs.apiary.io/tools/automated-testing/testing-ci/ It exists, but somewhere else. We could at least link it.\n. If https://github.com/apiaryio/dredd/issues/497 will be put into action, Dredd & CI docs should be updated to use npm install dredd@stable.\n. So there are three places where to look for CI configuration now:\n\nhttp://dredd.readthedocs.io/en/latest/how-to-guides/#continuous-integration\nhttps://help.apiary.io/tools/automated-testing/testing-ci/\nhttps://github.com/apiaryio/dredd-example/\n\nThis really needs more love.. We'll have new Jenkins configuration examples in Apiary Help and in the dredd-example: https://github.com/apiaryio/dredd-example/pull/19/files\nMy plan for future would be to move the example from dredd-example to Dredd's dredd init and leave dredd-example just with those CIs, which are plugged in there. Also, it would be nice to have the Jenkins example in the Dredd docs. We could add jUnit integration also to CircleCI.\nThe dredd init should also be smarter when creating or modifying the configuration.. Four places:\n\nhttp://dredd.readthedocs.io/en/latest/how-to-guides/#continuous-integration\nhttps://help.apiary.io/tools/automated-testing/testing-ci/\nhttps://github.com/apiaryio/dredd-example/\ndredd init\n. More thoughts on improving the docs: https://github.com/apiaryio/dredd/pull/1102#discussion_r209567655. I will \"check\" it by adding it to our regression tests. If they pass, then\nI'll consider this to be fixed in Dredd.\n\nOn Wed, Feb 24, 2016 at 2:08 PM, Pavan Kumar Sunkara \nnotifications@github.com wrote:\n\n@honzajavorek https://github.com/honzajavorek This should be fixed too.\nPlease check once.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/354#issuecomment-188249185.\n. @pksunkara @w-vi I'm sad to announce that this is not fully fixed yet. Using Include as part of MSON definitions in the Data Structures section is fixed indeed (and can be used now like a workaround for this issue), but using Include in resources won't produce correct assets.\n\nHow to reproduce the issue\n\ngit clone Dredd repository, perform git fetch to get all branches.\ngit checkout honzajavorek/regression-354\nnpm install\n./scripts/test --grep='Regression: Issues #319 and #354'\nYou should get 32 passing, 10 failing.\n\nSee the test and the API Blueprint in this PR: #380\nWorkaround for Dredd users\n\nMake sure you have protagonist@1.2.6 installed. Go to your Dredd installation and run npm update.\nMove all your definitions using Include from definitions of resources to the Data Structures section, at least temporarily until this issue gets fixed.\n\n@philsturgeon Could you please try to upgrade Dredd to the latest version and check if this works for you as a workaround?\n. @lusol I'm afraid I can't help you without more information. When this error happens? What are you trying to achieve? Under which circumstances? How does the full input and output looks? Mainly, how can we reproduce this error?\n. @netmilk :+1: \n. I was not able to reproduce this. Could you please share a full minimal example or at least the exact command you used, dredd.yml you used, dredd version, etc.?\nI see you are using node v5.5.0. I tried it on older version of node, maybe that could be the issue.\n. Still not able to reproduce, even when using 5.5.0.\n. I was able to reproduce this! :scream: Thank you @ergosarapu. This minimal example crashes on my computer as you reported. Reproduced on both Node 5 and Node 0.10 (didn't try other versions).\n. I believe this was fixed in #648. @ergosarapu could you please confirm?\n. @ergosarapu I didn't hear back, but feel free to re-open should you ever encounter this. Thank you very much for filing this and helping to debug the problem! \ud83d\udc4d . Let's keep this as a tracking issue for the feature request that Dredd should support scenarios / workflows in the future. Related issue describing the current possibilites: https://github.com/apiaryio/dredd/issues/995. @w-vi Thanks, awesome! Do you think 87c2fd4 solves the problem?\n. Awwww :smile_cat: Thanks!\n. This isn't relevant anymore as we migrated from CoffeeScript to JavaScript.. Hi @hussainjunaid, at the moment it's not possible to go beyond the implicit transaction examples. However, we are working on an improved way how to address HTTP Transactions in Dredd hooks. There is a fresh proposal on how it could look like: https://github.com/apiaryio/dredd/issues/227 The new way should allow you to properly address any request-response pair. Do you think it would solve your problem? Feel free to drop a comment there.\n. Thanks! There is an issue for this: #321 It mentions we should also add it to the --language switch. Could you please look into that?\n. Sorry for delay. Could you please also add Perl :camel: from #364? Thanks! :heart_eyes:\n. It should, presence of the dredd-hooks-{language} command is tested by the Cucumber test suite. Also see https://github.com/ungrim97/Dredd-Hooks/blob/master/script/dredd-hooks-perl.\n. I can fix cpan / cpanm in #368 if there are mistakes. Maybe @ungrim97 himself can give us a hint?\n. @ungrim97 Thanks for clarification! :camel: I'd go with cpanm then the same way we rely on people being able to get pip on their machine, regardless what they're provided with by default.\n. Thanks! :balloon: \n. @kuba-kubula Does it support something like *.md? Otherwise seems OK to me, but I am also unsure about how coffeecoverage treats this and whether it's going to help. Did you try it out?\n. @netmilk I think he is trying to make some actual changes in README to see whether they affect coverage with the new setting. However, he's unable to evaluate the attempt as Coveralls won't report back now due to maintenance.\n. It looks like we had fork of it? https://github.com/apiaryio/dredd-test-rails It seems @theodorton moved the original repository to GitLab.\nAnyway, I'd prefer to keep the link and just change it in favor of our copy or the GitLab copy.\n. Fixed by https://github.com/apiaryio/dredd/pull/400.\n. Interesting. @netmilk, what do you think?\nBTW this is already possible if you add Apiary CLI to your toolchain - you can fetch the blueprint as a first step and then test it by Dredd.\n. BTW, it is possible to specify URL as a path to your API description file. If you have a public API project in Apiary, link http://my-lovely-project.docs.apiary.io/api-description-document goes to your API description file in plain text. You can use this URL instead of path to your API description:\n$ dredd http://my-lovely-project.docs.apiary.io/api-description-document http://localhost:8000\nAnd you can use it also in dredd init or dredd.yml. Of course, this is not very seamless and should be improved.\n\nYou can also go to your rendered documentation, log out from Apiary and you should see this link:\n\nIf you copy the link, you have URL of your API description document in Apiary.\n. So far, the only ways as of now would be to:\n\nUse the GitHub Sync to get the document on your machine\nAutomate fetching the document before testing with the Apiary CLI\n\nIdeally, in the future fetching the document would be builtin to Dredd, or Dredd would be builtin to Apiary CLI.. Looks good, awesome! :balloon: \n. Nope, GitHub serves the SVG with incorrect Content-Type and the image won't render :cry: \n. I think this was already fixed by #464.\n. @jandvorak Thanks very much! :+1: \n. @netmilk yup, that's something I wanted to ask you about - how to work with the changelog generator. Once I learn that as a young Padawan of yours, I'll add missing changelogs.\n. Ideas:\n- The dep builds could just comment under PR, without blocking the Node 0.10 build.\n- Just found https://github.com/bahmutov/dont-break - is it worth using? Needs investigation.\n. Yes, this is still an issue. I haven't got to fix it due to working heavily on #388 and #389 these days. I think the fix wouldn't be difficult. It's probably somewhere in the CLI reporter. I guess there's some formula to calculate seconds and one of the variables comes as undefined in some cases:\ncoffee\n$ coffee\ncoffee> undefined + 1\nNaN\ncoffee> null + 1\n1\ncoffee> 0 + 1\n1\nAlso, if fixed there, it would be nice to look into the other reporters if there's not a similar bug. Would anyone of you like to work on this?\n. Released as v3.5.1 \ud83c\udf89 . This has been fixed now with Dredd 1.0.8, but just by copy-pasting current output of --help to the usage.md file. I will consider this issue to be closed once we have better and automatic documentation of CLI in place. My idea would be:\n1. Put description of CLI parameters from usage.md into a separate file (e.g. cli.md), which would be a product of compilation and would be ignored by Git.\n2. Link the new file from existing docs.\n3. Write a script, which takes existing options, their descriptions and defaults and produces a nicely formatted Markdown file.\n4. Make the script part of the build process.\n. @jgjadaoag It would be awesome! \ud83d\ude04 . @netmilk Updated, now bin/dredd and bin/dredd-coverage are merged into one.\n. @netmilk That smells :disappointed: This means I had to break the coverage report somewhere (in the last commit? uh..), because in the past Coveralls were catching up correctly on this branch:\n\nWill investigate. Thanks for spotting this!\n. @netmilk addressed in https://github.com/apiaryio/dredd/pull/392\n. @amuino Thanks for filing the bug and initial investigation! @apiaryio/apiary-parser could you please help me to confirm this?\nIf this is valid Drafter/Protagonist output, then I assume we'll have to teach Dredd how to behave when the AST is \"empty\" and ensure by tests it behaves correctly.\n. Just for the record, this issue consists of two problems:\n- Drafter issue https://github.com/apiaryio/drafter/issues/217\n- Dredd issue https://github.com/apiaryio/dredd/issues/403\n. @RyanHavoc This is fixed in the underlying parser tooling, but since it wasn't released as stable version yet, I'm still hesitant to upgrade. If you feel adventurous, workaround would be to update Dredd's protagonist dependency in package.json to version 1.3.0-pre.0 and install it into Dredd's node_modules.\n. And I'm sorry for the trouble, really. I see it's not a good first time experience to run into a bug like this :disappointed: MSON (a.k.a. Attributes) still isn't completely bug-free and officially released as a production-ready technology in all the tooling around API Blueprint. In Apiary we're working around the clock to get it polished on all fronts! :triumph: \n. I haven't seen this since 1.0.7 has been released. Closing for now.\n. It just changed message, but it's on the same place and it's still there.\n1) Hooks worker client when methods dealing with connection to the handler are stubbed should include the status in the error if spawned process ends with non-zero exit status:\n     Uncaught TypeError: Cannot read property 'message' of null\n    at test/unit/hooks-worker-client-test.coffee:109:49\n    at [object Object]._onTimeout (src/hooks-worker-client.coffee:64:9)\n\n. @netmilk Thanks very much! During #379 I bumped exactly into this - complete magic. I think the comment clarifies the situation a lot.\nThe linter doesn't like trailing whitespace :stuck_out_tongue_winking_eye: Fixed it for you :heart: Will merge once it passes.\n. The file in question has been renamed from cli-test.js to hookfiles-cli-test.js in https://github.com/apiaryio/dredd/pull/1054/. @netmilk Just realised we also need to somehow deal with the fact that Apiary Reporting API has API Blueprint AST as part of it's contract:\napib\n...\n  - blueprints (array, required) ... Array of blueprints used for the test run\n      - filename (string, required) ... file name\n      - raw (string, required) ... raw bleuprint content in Markdown\n      - parsed (object, required)  ... parsed blueprint from raw data\n        - ast (object, required) ... parsed blueprint ast\n        - sourcemap (object, optional) ... sourcemap from protagonist\n        - warnings (array, required) ... bleuprint parser warnings\n...\n. One thing I omitted: There's a lot of similar content in https://github.com/apiaryio/dredd/blob/master/docs/index.md and it should be updated, too.\n. Hi, are you sure you are passing the compiled version of the file or that\nit correctly compiles imports to requires? It seems like the file you are\nrunning contains keyword import, which is ES2015 syntax, not ES5.\nOn 2 Mar 2016 05:12, \"Dom Del Nano\" notifications@github.com wrote:\n\nFor the current project I am working on we are using babel so we have\naccess to ES2015 features and such. I am trying to write the hooks file\nthat dredd will use with the features that must be compiled by babel. What\nI am trying to do is first build to hooks file then have dredd used the\ncompiled version to run but I am running into issues. The nodejs hooks\ncan't seem to use my compiled version of the file since I receive the\nfollowing error message.\n[image: screen shot 2016-03-01 at 11 10 58 pm]\nhttps://cloud.githubusercontent.com/assets/5855593/13450398/eb7d2a02-e002-11e5-89da-428d2dc9c6c6.png\nSo I am not asking why this compiled version isn't working but more is\nthere a better approach to this? Can I get the dredd to spawn the nodejs\nhooks via babel instead of node?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/391.\n. @netmilk What do you think of supporting hooks in Babel/Coffee/whatever-compiled JS out of the box? User would just specify in config / argument what to use to compile the thing, similar to mocha's --compilers='coffee:coffee-script/register'.\n. I think the main logic you are looking for is in hooks-worker-client.coffee. However, Node.js hooks have some special handling. They can be ran directly within the Dredd process (loading here) or in sandbox mode using pitboss. I believe you can pass --language=your/arbitrary/node/script.js as a custom hooks handler, but it would have to be a complete separate implementation, the same way as PHP hooks are.\n. I think that's something for @netmilk to answer.\n. @xvalentino We tried to make sure this won't happen with loads of tests, so it's hard to hear that it broke despite our efforts, but I'm really glad you discovered the problem before new Dredd version got released. Thank you very much for that! You've just shielded a lot of users from the problem :+1: \n\nCould you please elaborate on what's exactly wrong and how can I reproduce it? Again, thank you very much for reporting this!\n. @xvalentino Thank you!\nI tried to reproduce this on top of current master, but unsuccessfully. Could you please try to assemble the minimal app or at least share your dredd.yml?\n. > When I npm run prepublish this commit, and run dredd with a ruby hook, I get the output...\n@xvalentino Did you try that also on top of current master or is it just the commit you mentioned? The commit alone won't work all right and won't pass tests.\n\nI smell some race condition.\n\n@netmilk The flaky test is documented in #384, it's still the same. I can give it some time.\n. @xvalentino There is very similar bug described in #404. Could you please confirm whether it is the same problem you are experiencing?\n. @Alexorz Thanks for the example! I think the problem might be that your + Parameters section is nested under the GET specifically, so in the context of POST Dredd can't have an idea what pn and pb are and whether they're optional or not.\nIf you move the + Parameters one level higher, it should work (worked for me when I tried to reproduce your problems):\n``` apib\nCoupons Collection [/api/coupons{?pn,pb}]\n\nParameters\npn: 1 (optional) - Page number\npb: 20 (optional) - Page by\n\n\n\nList All Coupons [GET]\n\nResponse 200 (application/json)\nAttributes\nsomething\n\n\n\n\n\nCreate a New Coupon [POST]\n\n\nRequest (application/json)\n\nAttributes\ntitle: another coupon (string, required) - title of the coupon\nsomething\n\n\n\n\n\nResponse 201 (application/json)\n\nAttributes\nsomething\n```\n\n\n\n\n\nIs this solution of the issue?\n. @Alexorz Feel free to re-open this issue if you get back to this and will think that my answer isn't solution to your problem. As of now I consider this as solved.\n. @Alexorz Thanks for pointing this out! If Apiary picks your markup as you expect, then there's an inconsistency and I should look into it - if it's not a bug, then at least to find out reasoning behind it so I'm able to answer here.\nPossibly related issues: https://github.com/apiaryio/api-blueprint/issues/277, https://github.com/apiaryio/api-blueprint/issues/58 (Note for myself, I need to verify this.)\nI'll try to get to this soon and verify the behavior, but I can't promise you any ETA now. However, thank you again for sharing this. This may be a valid bug report either for Dredd or Apiary!\n. @kylef Yes, thanks for providing all the details! I thought this is the case and that was my reasoning why Dredd doesn't work well with this and the API Blueprint needs to be written in a different way. However, as @Alexorz explained on screenshots, Apiary is somehow able to support his syntax. And that's what surprised me and I wanted to explore that a bit deeper and learn how is that possible.\n. > document is being rendered with the attributes kit feature flag\nAh! I didn't realise that. Thanks for spotting, now that all makes perfect sense.\n@Alexorz Apiary with the attributes kit feature flag turned on is a bit ahead than Dredd and you've ran into a beta feature being under development. @kylef thanks again for bringing light into this.\nI'm turning this issue into a request for improvement - we should eventually catch up with RFC 4: Request Parameters and make sure it's properly supported in Dredd once it's fully present in Drafter.\n. I can confirm it is experimentally supported since Drafter supports it to some extent. Not sure how complete the implementation in Drafter is at the moment.\nDredd should be ready to inherit the parameters correctly, but there might be other little things needed to be done. The feature wasn't ever discussed yet in its entirety as a Dredd feature, with all the corner cases. Also it is not tested nor documented yet.\n. Just a reminder, once this is going to be closed, https://github.com/apiaryio/dredd/issues/88 should be closed, too.\n. @kylef What's the status of request parameters in Drafter? Is it finalized?. Even though it's not an officially rolled-out feature in API Blueprint and Apiary, the parser supports request parameters for a long time already and Dredd does as well. Please open other issues if you find the behavior buggy. Closing this in favor of https://github.com/apiaryio/dredd/issues/1118.. :+1: \n. Great! :+1: \n. This did not prove as a solution. Even tried to return to drafter.js, but the result wasn't something we could use. Dropping this idea and PR. All we can do is pin protagonist to the latest version as in #399 and urge fixing Drafter bugs.\n. I don't think this is an issue anymore with new Dredd Transactions, but I didn't find a test for it, so I can't close this yet \ud83d\ude12 \n. @charliemaffitt Thanks for reporting this! If you stumble upon any details on why the new version stopped to work for you, please share it here. I'm keen to fix any possible issues ASAP. You can try to run dredd with --level silly to raise logging output.\n. @charliemaffitt No change is expected on user's side. We did some refactoring of those parts and although I believe we did our best in testing the thing, something apparently slipped through the net and under some circumstances spawning of processes breaks.\nIf anyone would be able to assemble something I could replicate, that would be awesome. Sample hooks and dredd.yml or minimal app... I'll try to get to this behavior myself, but so far I don't have many clues to follow.\n. OK, looks like I made some progress...\n\nIs this the same thing you are experiencing?\n. @romansklenar @charliemaffitt Thanks for confirmation! I'm glad this is resolved!\n382 will definitely be part of the next release. It is 99% done and if @xvalentino doesn't have time to finish @netmilk's nitpicks, I'll do it myself before new version will be released. Much praise to @xvalentino for the hard work in issues here and also for noticing this problem in #393 first.\n. I removed all stuck event loop workarounds and performed 250 iterations with ./scripts/stress-build without getting #282. I'll leave it like that and if the flakiness reoccurs, I'll try to debug the problem again.\n. @netmilk :tophat::ok_hand:\nBTW, since the original PR was already reviewed, I consider this to be OK to merge when tests pass. If anyone thinks otherwise, write a comment now :smirk_cat: \n. Closing in favor of https://github.com/apiaryio/dredd/issues/995. @netmilk IMHO dupe of https://github.com/apiaryio/dredd/issues/356, but the workaround is a new information, thanks!\n. Closed in favor of #464.\n. @netmilk Since you wrote earlier\n\nI think it's good to merge if we update the documentation on CLI and JS interface and remove the possibility to configure the message delimiter.\n\nI consider this my PR to be good to merge once tests are green. If you find any problems though, feel free to comment and I'll fix them in subsequent PRs.\n. @netmilk @w-vi Feel free to review also after my self-merge, I can address your comments in subsequent work. I couldn't wait longer.\n. https://github.com/nbedos/termtosvg. This makes sense to me! Thanks for the idea. What would be @netmilk's thoughts on this?\n. @realityking We're in the process of designing how removing sensitive data from Dredd reports could work in https://github.com/apiaryio/dredd/issues/623#issuecomment-246737489. Would you mind looking at the proposal and comment / give us feedback if that would work for you?\n. More ideas:\n- Dev-focused image should come with pre-linked libraries, such as dredd-transactions, fury adapters, etc.\n- The dev-focused image should use .gitmessages and commitizen to help people with Conventional Changelog as much as possible\n- I should use the dev-focused image myself, because only such dogfooding will prevent the thing to die for unsufficient maintenance :trollface: \n- Maybe we could have a docker image dedicated to reproducing bugs? Does it even make any sense?\n. Since we're starting to support Windows now, I think it would be nice to have a Windows Docker container or a way how to quickly provision a Windows machine to develop and test Dredd.. https://github.com/apiaryio/dredd-docker/pull/1 will bring user-oriented Docker image.\nI'm not sure whether Dredd developers struggle to install Dredd that much and if so, I'd rather pursue the idea of having a monorepo #704, where everything is handled within one repository instead of reinventing the wheel by npm link-ing separate projects inside a Docker image. Also, Dredd supports Windows and it seems it's not so easy to have this all handled by Docker https://github.com/apiaryio/dredd/issues/1093#issuecomment-427020850.\nWhile I'm adding user-oriented Docker image now, the developer-oriented one is no priority for me as of now. However, I'm happy to accept contributions for such Docker image.. Monorepo with Lerna in place is the way to go. Closing.. @lippea\n\nMSON describes structures that MAY be observed versus what MUST be observed.\n-- MSON Spec\n\nWhat you want to achieve goes against the \"MAY\" nature of MSON, so it won't be easy to implement, if even possible. The only exception from this behavior is fixed, but as @kylef noted, that might sometimes bring too much constraints.\nThere are two ways out of this:\n1. Do not check what simple arrays MUST contain, just document what they MAY contain.\n2. Use manually-crafted JSON Schema (API Blueprint's Schema section) to ensure what the array MUST contain. If Schema section is present, it overrides anything what could get auto-generated from MSON.\nIf you think this all isn't the way it should be, you can suggest changes in MSON issues.\n. @lippea Good! Thanks for sharing. I really recommend you to file an MSON issue to discuss the use case. 600 vs 100 lines is, I believe, quite strong argument.\n\nBut so far, I like the BluePrints stuff.\n\nGreat! Don't forget you can find out more docs and list of Open Source tools at API Blueprint's website.\n. Hi @lippea, this happens when parser doesn't return anything Dredd could consume. It's Dredd bug documented at #403. However, Dredd crash is just a consequence of a prior error from parser, not a reason why the testing doesn't work.\nThe true reason can be probably tracked down by inspecting the warning you are getting:\n\nwarn: Parser warning in file 'BluePrints/analytics-enquiry-course.apib': (4) no property name\n\nYou write that\n\nThe error is gone if the last line of \"- name:abc\" is removed\n\nbut I can't see any - name:abc part in the sample you provided. It seems like the sample is indeed missing a property name on the last line, as the parser warns. Could you please check your input and verify, whether your blueprint is valid? If your blueprint is valid and parser or Dredd crash, then we'll definitely treat this as a bug, but currently it seems to me that parser just fails to parse your blueprint and Dredd fails to gracefully terminate (#403).\n. @lippea Now I can see it, thanks! It seems like GitHub originally didn't format properly the issue description for me, not sure why. I'll try to investigate what might be the problem.\n. I was able to reproduce the issue. I created following API Blueprint document:\n``` apib\nFORMAT: 1A\nHotels API\nGroup Hotels\nHotels [/hotels]\nGet Hotel [GET]\n\n\nResponse 200 (application/json)\n\nAttributes\n_source (object, required)\nevents (array, fixed)\n(object)\nname: Sent\ntimeUtc: Wed, 16 Mar 2016 22:29:50 GMT (string)\nmetadata\nresponse\nFormfields\nitem (array)\n(object)\nname: abc\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen I tried to validate it with Drafter:\n```\n$ brew install --HEAD https://raw.github.com/apiaryio/drafter/master/tools/homebrew/drafter.rb\n$ drafter ./blueprint.apib\nelement: \"parseResult\"\ncontent:\n  -\n    element: \"annotation\"\n    meta:\n      classes:\n        - \"warning\"\n    attributes:\n      code: 4\n      sourceMap:\n        -\n          element: \"sourceMap\"\n          content: []\n    content: \"no property name\"\nOK.\nwarning: (4)  no property name\n```\nSo indeed, given MSON produces a warning and an incomplete output (which causes Dredd to fail - #403). Now let's investigate whether this is expected behavior or a Drafter issue. I tried to reduce the blueprint to a minimal failing example and came to this:\n``` apib\nFORMAT: 1A\nHotels API\nGroup Hotels\nHotels [/hotels]\nGet Hotel [GET]\n\n\nResponse 200 (application/json)\n\nAttributes\nproperty\nproperty\nproperty\nproperty\nproperty\nproperty\nproperty\nproperty\nproperty: value\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf I remove a single property (one indentation level) from this, Drafter successfully parses the document. That makes me think this is Drafter limitation to process 9 and more levels of nesting. Not sure whether it's a known limitation or a bug, but since @lippea's example came from a real world situation, it seems to me we should be able to parse this. I filed https://github.com/apiaryio/drafter/issues/252.\n@lippea Thank you very very much for filing this issue and getting back to this! It really helped us to find a real issue here.\n. @lippea I'm sorry for my late response. To break down large structures, you can use advanced MSON techniques, such as inheritance or includes. In repository of API Blueprint examples you can find Data Structures example, which shows inheritance:\n``` apib\n...\nCreate a Coupon [POST]\nCreates a new Coupon.\n\n\nAttributes (Coupon Base)\n\n\nRequest (application/json)\n\n\nResponse 200 (application/json)\n\nAttributes (Coupon)\n\n\n\nData Structures\nCoupon Base (object)\n\n\npercent_off: 25 (number)\nA positive integer between 1 and 100 that represents the discount the coupon will apply.\n\n\nredeem_by (number) - Date after which the coupon can no longer be redeemed\n\n\n...\n```\nYou can also use includes (a.k.a. mixins). I haven't found any official examples of full blueprints with includes, but the code fragments shown in the MSON Specification for the Include statement should give you the clue. My take would be:\n``` apib\nRetrieve a User [GET]\nRetrieve a User.\n\n\nRequest (application/json)\n\n\nResponse 200 (application/json)\n\nAttributes (User)\n\n\n\nData Structures\nUser (object)\n\nsocks_size: 42 (number)\nInclude CustomerMixin\n\nCompany (object)\n\nname: Apple (string)\nInclude CustomerMixin\n\nCustomerMixin (object)\n\naddress (object)\ncustomer_id (string)\n```\n\nDo you think employing these techniques would work for you as a workaround?\n. @lippea I'm sorry, I'm not sure I understood your comment. You didn't manage to get working inheritance or mixins? If that's the case, I can help with concrete examples using your data structures.\n. @realityking Thanks very much! We'll take a look at it with @netmilk and let you know.\n. I'm glad to hear that! Thanks for giving it a try and getting back. I think I'll create another issue anyway to add this to docs.\n. @w-vi Thanks! Should be fixed now. It was required in some files. I removed the requires as the thing shouldn't really be needed with coffee-script 1.7.0+.\n. This can be really confusing. We should definitely put this to docs and think of possible workarounds so the message won't appear.\n. @teone I'm glad we worked it out! However, I'll leave this open to have a reminder this needs to go to docs. I added respective labels.\n. This won't go to docs! \ud83d\ude31 Why? Because it's no more an issue thanks to https://github.com/apiaryio/dredd-hooks-python/pull/20! \ud83c\udf89 \n. Hi, thanks for the report! Dredd isn't very well tested on Windows (see https://github.com/apiaryio/dredd/issues/204), unfortunately. It uses which to locate the handler. I guess which won't work in standard Windows environment :cry: \nWorkaround would be to create something executable called which in your PATH, which would do the same thing, i.e. determine whether something exists or not. I believe Windows actually have a similar utility called where, so maybe just aliasing it or wrapping in a simple .bat script would do the job.\nPlease note I did not try the workaround, so it's not 100% solution. If you go that way, I'd love to hear your experiences. Also, any debugging in the direction towards Windows compatibility would be extremely helpful. For instance, we don't even have a list of things which would have to be changed so Dredd works seamlessly on Windows and e.g. noting such blockers in comments under https://github.com/apiaryio/dredd/issues/204 would be a tremendous help with broader compatibility.\n. @Crimack That is a great insight, thanks! Thank you very much for all this!\nIf you have git-bash or cygwin, I'd focus on making Dredd correctly executable there first and then moving to having it working in cmd.exe. However, I experienced some problems when trying to make virtualenv and git-bash working together. I think the virtualenv has to be created from within the git-bash, otherwise it will install cmd.exe-compatible scripts and those won't run elsewhere. It's a minefield :grimacing: \nI think the aim here should be to have a bash prompt (inside virtualenv or not), where you can run following commands, exactly as they are written:\nshell\n$ which\n$ dredd-hooks-python\n$ dredd\nIf they can be executed like that, I believe the thing should work together. If python .../dredd-hooks-python is necessary or something similar, we're still not there. I wouldn't be afraid npm-installed stuff won't pick up binaries from virtualenv - from my experience, as far as virtualenv is activated and the binaries can be found in the altered PATH under their names, it is not an issue.\nRegarding where, I think it shouldn't matter how much output is there. I believe we check just exit code or at most just any output vs. no output.\n. @Crimack That actually might be the case, spawnSync could have problems on Windows. That would explain your situation, exactly as you write! I believe there is no special reason we use specifically spawnSync as a drop-in replacement for child_process.spawnSync missing in earlier versions of Node. I think it could be replaced by anything else doing the job. If cross-spawn would pass all tests, I'm willing to give it a try.\nDo you think you might be able to work on a Pull Request? I'd be happy to provide any missing clues to contributing.\n. @Crimack I'm pretty confident https://github.com/apiaryio/dredd/pull/737 solves all the issues we've been discussing here. Once it's merged and a new version of Dredd gets released, I'd greatly appreciate if you could go and try, whether Dredd works for you with the Python hooks (beware #742, please).\nYour prior investigation has been a great help in implementing the basic Windows support and I'd like to say thank you again for the help \ud83d\udc4d. @Crimack I completely understand. Anyway, I would like to thank you for all the time and attention you paid to debug Dredd on Windows. I'm sorry it didn't turn out to have a successful results right away. If your former colleagues bring any feedback, it would be appreciated! Good luck with your studies \ud83c\udf93 \ud83d\ude09 . Hi, that's a good point. I'll ask @netmilk about pointers on how we could improve this. Feel free to use --reporter=apiary as a workaround for better debugging (you don't need Apiary account for that).\n. @lippea That is also a nice work around suggestion, thanks! :balloon: \n. @GiritharanR Thanks very much for reporting this!\n. Does this happen for all kinds of transactions or just for some with certain data or structure? Could you disclose how the blueprint looks like for the transaction you are trying to force to fail?\n. @GiritharanR And how does your blueprint look like? Could you share at least anonymized structure of it?\n. @GiritharanR Thank you very, very much! This is an excellent report. I'll do my best to investigate and find a fix. :hammer: \n. @GiritharanR Could you please upgrade to the latest Dredd and try out if this is still an issue? There were related fixes in #648.\n. @GiritharanR Feel free to re-open this if you experience any issues \ud83d\ude42 Thanks for reporting this and helping to debug it! \ud83d\udc4d . Thanks for reporting this! Similar bug is already reported many times already:\n- https://github.com/apiaryio/dredd/issues/343\n- https://github.com/apiaryio/dredd/issues/67\n- https://github.com/apiaryio/dredd/issues/217\nThe only difference is that the old bug is being usually reported with text/plain content type and you use application/x-www-form-urlencoded. I'll make sure this thing gets higher in our priorities :sweat:\n. This is still an issue, but I decided to close duplicates.\n- The main issue to track this problem is now: https://github.com/apiaryio/dredd/issues/67\n- Workaround can be done by hooks: http://dredd.readthedocs.io/en/latest/hooks-nodejs/#remove-trailing-newline-character-in-expected-plain-text-bodies\n. I'd like to address the problem. I added a comment explaining the situation: https://github.com/apiaryio/dredd/issues/67#issuecomment-287759448 If you have any ideas, I'd be very glad to discuss possible solutions.. I think you can use custom (see http://dredd.readthedocs.org/en/latest/usage/ ) and then access it through hooks.configuration in the hooks, but I believe that works only for the Node.js hooks. Would that solve your problem?\n. @GiritharanR did it work for you? I just realised there's actually an older issue for this: https://github.com/apiaryio/dredd/issues/215\n. Hi, this looks like protagonist dependency isn't correctly installed on your machine. Could you please find your Dredd installation directory and check whether there is protagonist directory in it's node_modules directory?\ndredd/\n    node_modules/\n        protagonist/\nYou may try to uninstall Dredd and install again:\nnpm uninstall dredd\nnpm install -g dredd\nAlso please mind Dredd's support on Windows is rather experimental than official at the moment (#204).\n. @leomperes Could you please file another issue with all the output you get? I'd like to keep this issue Windows-specific. Mac is definitely a supported platform, we should be able to resolve your problem.\n. I just verified it's possible to install Dredd on Windows, both globally and in a project with package.json, as a dependency. I was also able to successfully run and finish dredd init.\n@sumangongali @leomperes I'm closing this now, please upgrade to the latest Dredd and if you experience any issues, let us know!. Awesome, thanks! :+1: \n. @colinrymer Wow, thanks very much for the suggestion! I'll check it out at least briefly first and let you know :+1: \n. I scanned through semantic-release and commitizen. While I see it can be useful for some projects, I feel like it's a lot of added automation and special convention and, frankly, I'm a bit satisfied with the fact that I'm doing releases manually. While I'm fan of continuous delivery, I like that I'm the one who does the final decision what gets released with what and when. I feel it still has some benefits, because there are many edge cases to be handled:\n- Sometimes there are multiple PRs needed to deliver a complete feature, so releasing a new version right away isn't something I would want.\n- Sometimes tests pass even if the code is wrong, because there is a bug in them.\n- npm defaults to \"package\": \"^version\", so small changes propagate very fast through the ecosystem. At the same time, it's very easy to overlook a mistake in PR review or introduce regressions with a single PR.\n- Dredd is a CLI app rather than library, so I need to care also about what gets installed when people just type npm install -g dredd.\n- We do some extensive integration testing with all hook handlers when new Dredd version is about to be released.\nThis all makes me pretty defensive in what I allow to be released. It's possible that all these cases can be handled also with the automatic system, but my perception is that it would need me to set it all up, maintain some set of rules and exceptions, take care about format of my commits and commits of contributors, etc. Currently, all I need to do is to\n- spend 3 minutes evaluating, thinking, planning\n- spend 5 minutes releasing and editing the Changelog to be more reader-friendly (add headings)\nI see the benefits fast releasing brings to contributors - merged stuff goes live quickly. OTOH, it feels to me like it's on-the-edge vs. pretty-stable tradeoff. I lean more to pretty-stable & well-tested before I release stuff.\nHowever, since the issue got quite some support :+1: in GitHub reactions, I'll try to be more fast in releasing patch versions. I agree your contribution could have been released right away. I will prepare some degree of release automation to make it easier for me to spawn a new version and I'll try to do it more often in cases like yours.\n. This issue initiated internal discussion in Apiary. Some other teams liked the idea more than me and started to adopt it on several smaller projects. After some time and positive testimonials from these early adopters, we as a company decided to standardize our commit messages to use the conventional changelog format.\nI tried Semantic Releasing on dredd-transactions and it seems to be really very helpful and takes away a lot of maintainer's overhead. (It turned out to be so addictive I now hate to contribute to projects which do not use it!) It seems to bring great benefits especially to smaller projects which don't have my constant attention, such as gavel.js or gavel2html and I'm planning to put Semantic Releasing also on those, ASAP.\nIn mid-term, I'd like to also get Dredd closer to Semantic Releasing. That's why I\n- made integration tests for hooks more friendly in https://github.com/apiaryio/dredd/pull/579\n- and closed https://github.com/apiaryio/dredd/issues/440 right now in favor of re-opening this.\n@colinrymer Thank you again for bringing this issue up! I'll try to report here later about progress or to mention possible blockers.\n. Anyone knows how does it work with npm dist-tags and pre-releases? Currently, we have #497 in place:\n- All versions get dist-tagged as latest and stable by default.\n- If we're in the process of developing a new feature, we publish pre-releases, which get tagged only as latest.\nPeople putting Dredd to CIs are encouraged to use npm i dredd@stable there. My notes on how semantic release works with dist-tags:\n\nIf you want to use another dist-tag for your publishes than 'latest' you can specify that inside the package.json\u2019s publishConfig field.\n-- README\n- publishConfig\n- config.tag\n\nCurrently I'm not sure how to make the process automated.\n. One approach would be:\n- use sem rel and see if any pre-releases are still needed\n- publish every version with both tags\n- if there's real need for pre-releases and stable in the future, then\n  - make an integration branch for the feature, change tag in publishConfig, configure sem rel to release also from that branch and to make just pre-releases from that branch\n  - make feature branches out of that branch and let sem rel publish pre-releases when something gets merged\n  - (what would happen if I'd like to get commits from master to this branch?)\n  - once the feature is ready, remove the extra setting for sem rel and merge the integration branch to master (what would be resulting version bump on master then?)\n. @beyourselfman Thank you very much for reporting this! Your problems were confirmed as a bug in a recent version of the API Blueprint parser, Drafter: https://github.com/apiaryio/drafter/issues/288 You are experiencing different outputs because Apiary is a bit behind in what Drafter version it uses.\nAs a workaround, you could temporarily provide manually written JSON payloads for Dredd. Hopefully this gets fixed right in the next Drafter release. I'll release new Dredd immediately when it's rolled out.\n. @beyourselfman Could you please try whether it's still a problem with dredd@v1.1.0-pre.2?\n@pksunkara Don't you know if this is already fixed in Protagonist?\n. @beyourselfman Any updates?\n. @beyourselfman Didn't hear back, but thanks very much for reporting this and for helping to debug the issue \ud83d\udc4d Should you ever encounter this problem again, please feel free to re-open this.. Note: It would be nice to use npm publish --tag unstable for unstable versions. Travis CI can't do that. Also, tagged Travis builds suffer from https://github.com/apiaryio/dredd/issues/374, so the deployment after merge could be hard to achieve.\n. Closed in favor of https://github.com/apiaryio/dredd/issues/438. See reasoning in https://github.com/apiaryio/dredd/issues/438#issuecomment-237360012.\n. @Teapane Awesome! This is a big help, thank you! :+1: Please address my comments and I'll merge it right away :sunglasses: \n. Thanks! :balloon: \n. This is basically a duplicate of https://github.com/apiaryio/dredd/issues/294.\nYes, you are right. The current way of compiling of the transaction name won't allow you to address specific Request, just implicit Transaction Examples. There is a spec in progress on this topic, which should solve the problem: #227. Feel free to review and comment there! :speech_balloon: \n. Hi @beyourselfman, this is actually a feature of MSON and cannot be improved or fixed on Dredd level. See @w-vi's comment at https://github.com/apiaryio/dredd/issues/177#issuecomment-211294577 and most importantly, read and feel free to comment under issue https://github.com/apiaryio/mson/issues/31. Thanks!\n. This limitation has been resolved by https://github.com/apiaryio/mson/issues/66 and https://github.com/apiaryio/mson/pull/67. The solution is to use fixed-type.. That's really strange. Just from top of my head:\n- It might be network issue or hooks socket issue.\n- Which kind of hooks are you using? Node.js hooks?\n- In Dredd v1.0.6 there was a huge refactoring of how hooks work. Could you please try the same run with v1.0.5 if the behavior is the same?\n- Does the same thing work outside of the Docker container, i.e. on Mac or in regular Linux OS like Ubuntu, Fedora, etc.?\n. That seems to indicate that the hooks shouldn't be a problem and it might be an issue in your own implementation indeed. If some actions are consistently hanging, you may try to inspect those. Feel free to provide minimal anonymized blueprint which can reproduce the thing for you, but since it works with other server (e.g. Apiary Mock Server), I guess the problem really points to your implementation.\n. @lethalpaga Interesting! I think we could put this into docs to some tips & tricks! Re-opening and applying Docs label.\n. Hm, good catch! Docs are wrong. QA is the source of truth.\n. @w-vi Just created another one: https://github.com/apiaryio/dredd/pull/452\n. @w-vi Thanks! Yeah, it would be tough to achieve the same coverage with this one! :smile: It probably dropped by 0.00001 or something.\n. @w-vi There's ApiaryReportingApi.md.\n. @w-vi I see. Then I think this should live in the Dredd Documentation as it has nothing to do with the actual API, it's about usage of Dredd's Apiary reporter.\n. Closing in favor of #464.\n. @timgent Thank you, this is generally a feature request for Dredd to handle auth, in this particular case OAuth2.\nBefore we start to add support for auth to Dredd we would like to first bake in the support to the underlying API description language. Swagger (see plans in #389) already supports describing auth. There are proposals on how to bring description of auth to API Blueprint: https://github.com/apiaryio/api-blueprint-rfcs/tree/master/rfcs But it's not implemented yet in the parser. If that gets implemented, we could teach Dredd how to respect it. Would that be a solution for you?\nWhat is your use case? Do you test your production API or it's about CI, development, etc.? In development, you could work around auth headers by hooks.\n. I remember @netmilk told me this should be current behavior already except for blueprint and endpoint (see reference). I didn't have time to try out what actually works now and what does not.\nWhat you describe here is probably already implemented (except for those two). Of course, there might be a bug. Also, it's subject for discussion whether the two properties shouldn't be also allowed to override as when they're not it can be confusing.\n. What is actually the reason you usually need to override the API description and/or the server? Debugging? Trying whether a different server fits the same description? I'm trying to understand the common behavior properly.. @victorsferreira All options except of the API description and the server URL should be possible to override. Overriding the two needs a larger changes, roughly outlined in https://github.com/apiaryio/dredd/issues/1101\nAs a workaround, you can have multiple dredd.yml files and switch between them using the --config option. See an example in the  dredd-example repository.. @Souler This is an interesting solution!\nJust to add to the discussion, Dredd is primarily a tool designed to perform isolated tests and hooks are here to help you to isolate each test. See docs on this.\nIf you need to order your transactions, it's a sign you're not creating isolated tests. YMMV if that's good or bad.\n. Closing in favor of https://github.com/apiaryio/dredd/issues/995. I think this is duplicate of https://github.com/apiaryio/dredd/issues/433.\n. ...and since #433 is even duplicate of https://github.com/apiaryio/dredd/issues/215, I'm closing this :) The https://github.com/apiaryio/dredd/issues/215 now contains an example on how to use the custom configuration key for passing data to JavaScript hooks.\n. Related to https://github.com/apiaryio/dredd/issues/692.. Related to https://github.com/apiaryio/dredd/issues/692. @c0 This might be a bug. Some special characters may cause problems due to Markdown nature of API Blueprint (e.g. underscore, which invokes italics), but escaping them with backticks should work :neutral_face: \n. @T0nyACr0ntum That's because API Blueprint is based on Markdown and in Markdown the underscores have a special meaning. You can escape the name of the attribute as well:\napib\n+ Request (application/json)\n    + Attributes\n        + id: 2 (number)\n        + q_number: ACT0002 (string)\n        + `role_name`: `hq_calendar_reader` (string)\n        + markets: [1] (array)\n        + activated: true (boolean)\n        + isDeleted: false (boolean). @webmato Hi, I'm glad you managed to solve the issue :) Please note the + Model is a sort of old syntax to bring modularity to your API Blueprint. + Attributes and MSON alone should be already more convenient and powerful than + Model.\n. @MikeRalphson How exactly the erroneous blueprint look like? There are some sections left out from the original poster's blueprint. Would you be able to provide a minimal failing version of it? We could add it to the test suite and figure out how to properly report about the problem.. @MikeRalphson Please do, this is getting interesting. If it's Swagger, it could be a completely new issue. Also post the solution to the problem which works for you, please \ud83d\ude4f . @MikeRalphson Thanks so much! This looks like a new bug. Either in https://github.com/apiaryio/dredd-transactions or https://github.com/apiaryio/fury-adapter-swagger. We should file it here on Dredd separately and inspect it further, probably with @kylef's help.. @MikeRalphson Please do if you can - I'm author of way too many issues on this repo already \ud83d\ude04 . This is exactly what Dredd should do. Could you please share an example of what doesn't work?\n. @marker452 Ah, I understand now! Thanks for clarifying. So this is something Dredd doesn't do as of now. There might be some other tools providing the feature, check out suggestions from @GiritharanR or scan the list at https://apiblueprint.org/tools.html.\nValidating body samples against JSON Schema samples might be an interesting feature of Dredd, but I personally see it fitting more to a concept of something like \"API Blueprint linter\". Not sure whether there are some Open Source ones, but in Apiary we provide SaaS one as part of our plans.\nEither way, will leave this open for people to comment and let @netmilk decide whether this makes sense as built-in part of Dredd.\n. @dhoffman34 Thanks for sharing this! This could go to http://dredd.readthedocs.io/en/latest/hooks-nodejs/#examples, actually.\n. I actually think this is something Dredd could (and should) do. It's relevant for both API Blueprint and Swagger and I think it is a common mistake, which is hard to debug. The question would be, whether it makes sense to have this directly in the parser tooling? @apiaryio/adt. It is! But it's so low hanging and straightforward, that I think it's a matter of user experience to offer this out of the box.. > API Blueprint vs. API Description Document\nThere'll be a separate search/replace PR for that once I'll have #389 finished.\n\nJust a few things!\n\nThanks! I think I addressed all of them.\n. Looks like the best way to reproduce this is to use node 0.12. Almost every second build on Travis CI for that node version fails with this.\n. Node 0.12 isn't in the testing matrix anymore and this test doesn't seem to be flaky anymore.. I doubt it, it's mkdocs & RTD. But I can try.\nOn 30 Apr 2016 2:15 p.m., \"Jakub Mikulas\" notifications@github.com wrote:\n\nI've noticed docs link that got changed\n- https://dredd.readthedocs.org/en/latest/usage/+ https://dredd.readthedocs.org/en/latest/usage-cli/\nCan a 301 redirect be added? For the old one?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/467\n. Tried this\n\n\nbut still experiencing 404s. Not sure whether I should wait or whether it just doesn't work.\n. The redirect should cout with that:\n\nI added one more, but without success to change anything:\n\nI'm afraid we're being hit by https://github.com/rtfd/readthedocs.org/issues/1826 here.\n. @JackuB @smizell Tried to address this by https://github.com/apiaryio/dredd/pull/489. Please review.\n. It works! Also, I think https://github.com/apiaryio/dredd/pull/491 will fix the rest.\n. Thanks for reporting this! It looks like Dredd is trying to parse the empty body as JSON and fails, although there's no content type specified. It's definitely a bug.\n. @galenandrew Great to hear that! I'll try to look into it and give you some pointers.\n. I'm sorry, I didn't have time to get back to this. Looks like @netmilk could provide some input. It seems that setting the content type of the empty response to text/plain could force Dredd to treat the empty body as empty text/plain string. It could work as a workaround, but I didn't try it out yet.\n. Hi folks, please check out a new proposed behavior and let me know if that would work for you: https://github.com/apiaryio/dredd/issues/556#issuecomment-252206782\n. I've decided to close duplicates. The main issue for this problem is now https://github.com/apiaryio/dredd/issues/556. Please continue any discussions and add workarounds there. Thanks!\n. @demianh Thanks for trying out v1.1.0-pre.0 and reporting this! That's very valuable feedback for us. It's definitely a bug, since even if we would like the behavior to change (and that's not the case actually), you should get normal error or warning, but not a stack trace.\n. The problem seems to be that now dredd-transactions do pass such transaction to Dredd although in the past they did not. Working on a fix.\n. Thanks! :balloon: \n. Just about to release 1.1.0-pre.1. Sorry for the delay, #440 still isn't ready!\n. I would like to also hear opinions from @netmilk, @abtris, @Almad, @JackuB.\n. Just for the record, this already has an internal Trello ticket.\n. > I casted my vote with dredd.api.sexy\nYeah... there was also internal Trello ticket to disable dredd.api.sexy :trollface: \n. Let's leave the effort to mirgate somewhere else as an internal ticket or let's create another issue. I'll close this issue by simply moving .org links to .io now.\n. @davepoon I know, I'm fighting issues described in https://github.com/npm/npm-www/issues/537. My intentions were to release new version right after merge.\n. Linking my comment: https://github.com/apiaryio/dredd/pull/473#issuecomment-217369049\n. \n. I don't know why exactly, but it seems that it's because you're installing by npm install -g apiaryio/dredd instead of npm install -g dredd. Why did you use the command you posted? Did you find it somewhere in documentation?\nAccording to npm docs, your syntax will be resolved as npm installing from GitHub repository. Dredd is a library compiled from CoffeeScript and with all sorts of native dependencies. I'm not sure how much friendly installation of Dredd directly from repository is as of now.\n. Yes, I had some problems to publish new npm package, so it was out of sync\nwith master and tags here for a while. I figured out it was due my network\nand now the latest version is correctly published.\nOn 6 May 2016 5:40 p.m., \"Ilia Lobsanov\" notifications@github.com wrote:\n\nI was trying the github variant of npm install because the standard\ninstall had failed for me. Now it's working. I guess you uploaded the\nlatest version to npmjs?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/475#issuecomment-217478231\n. I can consider it, but it would mess up branches, since all the current work is in master now. I didn't really think anyone would need Node 6 that early after release and considered adding the support as nice to have task. Honestly, I'd rather spend time with fixing the issues you have than backporting Node 6 support. Would you please help me with that and file issues related to problems you experience? Thanks!\n. @LinusU I'm sorry, but I couldn't react yesterday. Thanks very much for reporting the issue!\n\nI created the v1.0.x branch. Once all integration tests pass, I'll make the release.\n. Tests are still running :) https://travis-ci.org/apiaryio/dredd/builds/129089159\n. console\n$ npm dist-tag ls\nlatest: 1.0.11\nunstable: 1.1.0-pre.1\nIf I may present a wish here too, please do continue with testing 1.1.0-pre.x as it's tremendous help for us. We need to find and kill all regression issues.\n. Hi, unfortunately there's no official Windows support yet. There are some known issues, you're specifically talking about one from https://github.com/apiaryio/dredd/issues/429. I'd definitely love to have Windows support, but as of now I can't dedicate much resources to it myself. If you'd be willing to work on the issue and nail down at least part of the Windows problems, it would be completely awesome and you'd gain eternal glory.\n. Thanks for reporting this! That's definitely a regression we need to fix. Yes, downgrading is a preferred option right now.\n. The problem seems to be that now dredd-transactions do pass such transaction to Dredd although in the past they did not. Working on a fix.\n. @kylef Thanks, updated!\n. @pksunkara Comments addressed. Thanks!\n. @pksunkara I'll also squash the three commits before merging. Thanks!\n. This should be now solved by installing Dredd without compilation.. The behavior is actually behavior of dredd-transactions, not of Dredd.\n. @lteacher Hello! Thanks for getting here. This is not resolved and I agree with you this can lead into flawed trust into how Dredd is able to test your contract, which is a fundamentally the reason why Dredd exists in the first place. This needs a bit more analysis though on how we want to approach and execute this. I'll get some opinion from @netmilk and get back here.. @bkuhl I admit it took some time to find a matching response, but I think you might want to check out https://github.com/apiaryio/dredd/issues/253. It contains an example on how you can write your own validation and rewrite Gavel.js validation results with it. Do you think that would work for you?. Let me know please and feel free to re-open!. Coverage drop is probably due to removal of files and corresponding tests. There's nothing to cover in this PR.\n. The coverage dropped (-0.002%), but actually probably just because the overall percentage of lines has changed. I'm not going to add any tests, there's nothing left to cover in parts of the code I touched. Most of my PR are actually added tests :neutral_face: \n. I found a similar issue in the wild: https://github.com/mscdex/mmmagic/issues/66 Could you please, @wise007, try out the hints mentioned in the issue I linked? This really looks like problem with your setup, not with Dredd.\n. @wise007 Thanks for praise and for sharing! I hope this issue helps anyone bumping into the same problem. I'm glad it works for you now :+1: \n. @asbjornu @alexey-sh Did you try the solutions mentioned above? You could also give a try to the pure JS version to avoid compilation:\nsh\n$ npm uninstall dredd\n$ npm install dredd --no-optional. @freaz said (in person) it's okay now.\n. @JackuB Good point! Added!\n. @JackuB It's mkdocs and those are very simple.\n. Merging, feel free to continue commenting \u21e2 I can provide fixes in subsequent PRs if necessary.\n. Starting a transitional period - introduced the stable tag:\n$ npm dist-tag ls\nlatest: 1.0.11\nstable: 1.0.11\nunstable: 1.1.0-pre.4\n. Proposal on how the warning could work:\n\n. I suggest we add the warning now, but we switch the behavior no earlier than with next major release, so people aren't surprised. It's basically a \"breaking change\" sort of thing.\n. Dredd version 1.1.0 should be released as\n$ npm dist-tag ls\nlatest: 1.1.0\nstable: 1.1.0\nunstable: 1.1.0\nand should close this issue.\n. This has been put into action, hence I'm closing this as implemented.\n. @donbobbo4 I'm afraid I don't understand your issue very well. We want to better document it (see https://github.com/apiaryio/dredd/issues/496), but Dredd goes like this:\n1. If response was defined in the API Blueprint with + Schema section containing JSON Schema, then such schema used for validation.\n2. If response was defined in the API Blueprint by example and there's no + Schema section, gavel.js takes the example and checks whether the real response has at least object properties of the same names.\n3. If response was defined in the API Blueprint by + Attributes (a.k.a MSON), then API Blueprint parser generates both example and schema and Dredd uses the generated schema for validation.\nAs of now validation of headers is done by checking whether all documented headers are present in the real response (i.e. headers with the same names are present). Only values of headers significant for content negotiation are validated also by value.\n. The behavior was documented (https://github.com/apiaryio/dredd/issues/496) and there's no follow up from @donbobbo4. Closing this for now.\n. @ddelnano The change in this PR probably doesn't have a large impact on the issues you have, but in my opinion it's wrong and won't work in some cases, so it should be fixed anyway.\n. @MitMaro Thank you very much! This is terrible mistake I made, fortunately, only in pre-release. Next time I need to really check everything thoroughly before doing something like this :disappointed: I'll try to release this ASAP.\n. @MitMaro I've just released a new version. Thanks again!\n. @pksunkara I believe the reason why hooks in Dredd contain require 'coffee-script/register' is to support user-provided hooks written in Coffee Script. So it has nothing to do with publishing.\nNice solution to that could be to provide a way to specify transpilers as arguments (i.e. the same way as Mocha or other JavaScript test frameworks). That would touch also direct Babel support https://github.com/apiaryio/dredd/issues/391.\n. It's there just because of this test. I think the test could use Fury. Willing to contribute? :stuck_out_tongue_winking_eye: \n. @argos83 I'm sorry, this issue is about something slightly different. Previously, Dredd was using protagonist as a way to parse API Blueprint. This has changed with introducing Fury.js to the codebase, which encapsulates all parsing, for both API Blueprint and OpenAPI 2. This issue reminds us there's still one place left in the tests where Dredd depends on protagonist directly, which shouldn't be.\nActually, it is interesting you found the dredd > gavel > curl-trace-parser > api-blueprint-http-formatter > protagonist dependency path, I was not aware of that one. And it's strange, because installing Dredd with --no-optional does avoid any compilation, even though according to this dependency path it should still compile protagonist as a dependency of the api-blueprint-http-formatter \ud83e\udd14 \nAnyway, what you want is to avoid protagonist as a dependency completely to avoid parsing. That is not possible as of now. Currently it works as opt-out. A solution would be to help the @apiaryio/adt to finalize https://github.com/apiaryio/drafter-npm/pull/16, which installs drafter.js as default and makes the protagonist an opt-in. See also Why Is the Installation So Slow? and Compiled vs pure JavaScript.\nThere are no nice workarounds. You need to always run npm with --no-optional (I'd try to check whether it cannot be specified in .npmrc in the root of the project). Another way to hack this, in case you do not need to compile anything else in your dependencies, is to tell npm to use Python 3 for node-gyp. This can be done by directing the --python npm option or python option in the .npmrc to a Python 3 binary. Python 3 is not supported by node-gyp, so the compilation fails, but right in the beginning, which could shorten your suffering until Drafter supports Node 10.. I think there are some tests to address this, but not very thorough in means of corner cases:\n- https://github.com/apiaryio/dredd/blob/0b1721a889eb420b39b7ec68dbaf46b808f5b574/test/integration/cli/cli-test.coffee#L836\n- https://github.com/apiaryio/dredd/blob/0b1721a889eb420b39b7ec68dbaf46b808f5b574/test/unit/dredd-test.coffee#L110\n- https://github.com/apiaryio/dredd/blob/22c029382332520f07ee6c274bf117bc95d889bd/test/integration/cli/api-description-cli-test.coffee#L60\nWould anyone be interested to contribute at least failing tests reproducing the issue?\n. >  The blueprints files are loaded since all my actions are tested. The problem is that it looks like the code in the hooks are not executed since I do not have data in my database.\nSo loading blueprints by glob pattern works well? But loading hooks by glob pattern may not work? I think we need to isolate the issue a bit first.\nAFAIK Dredd's behavior is to load all given blueprints and all given hook files and test them. There is no blueprint/hookfile pairing involved and no concatenation. Blueprints are parsed separately and transactions from each of them are put together into a single list, then executed. Hooks are loaded and executed accordingly according to matching transaction names.\n. > Do you mean an integration test like the one you linked?\nExactly, that would help tremendously!\n. Regarding CoffeeScript, I can recommend to look at http://coffeescript.org/ to check at least the basics of the syntax (more advanced: https://arcturo.github.io/library/coffeescript/).\nRegarding tests, I think the easiest way would be to add new test which would be the same as this one, but would load also blueprints by glob pattern.\nTo develop, check out the Contributing Guidelines. There are many pointers on how to develop Dredd. I'd also welcome feedback on the document - what can be improved etc.\n. @aledeg Awesome, thanks! :+1: \n. @vitkoczi @Zoltamcsak @matthiasKaeser We understand this is a wanted bug fix, but next time please use GitHub Reactions to express your feelings. Spamming a particular issue by +1 comments doesn't help anyone. . My hunch would be this has been silently resolved by https://github.com/apiaryio/dredd/pull/803 in the past, so it's not possible to reproduce the problem anymore. However, @vitkoczi @Zoltamcsak, and @matthiasKaeser were adding +1 just recently. Folks, what Dredd version are you using? Could you help us to reproduce the problem? Otherwise we'll have to close this.. @ddelnano Great! I asked our Go lover @pksunkara to look at it once he has a free moment, so expect him to land & comment here soon.\n. @ddelnano I should release another one within a day.\n. CI just timeouted when waiting for dependent builds (#374), let's just wait and manually check if all the individual branches pass, then we can merge and publish.\nTo use fury-adapter-swagger@0.8.0-pre.8 I'd have to put it to dredd-transactions first, so next time. Let's treat this release just as the CS bug fix.\n. Everything is passing. Will you merge?\n\n. Not yet, thanks for bumping this. I didn't have time to investigate exactly what's the root cause of the problem. Since in https://github.com/apiaryio/mson/issues/61 they report it should not be an issue in the parser, my first guess would be that dredd-transactions do not transform API Elements to transactions correctly. Any help or at least failing tests appreciated.\n. @JeppeKnockaert Awesome! Thanks for the investigation and for filing https://github.com/apiaryio/drafter/issues/455!. This was fixed in Drafter. Soon it should propagate to Dredd.. As your \"QA guy\" (quoting @pksunkara) I'd like to have this (and this https://github.com/apiaryio/dredd/issues/283#issuecomment-385720973) tested, at least superficially, in Dredd.. @apiaryio/adt is the behavior described by @octalmage expected?. @brettneese I didn't have an immediate idea on how to solve your problem when I was first reading it. But now I got back to this issue and I've got an idea. Do you think that multiple hooks like following would work for you?\njs\nhooks.beforeEach(function(transaction, done) {\n  if (transaction.fullPath.indexOf('{formID}') > -1) {\n    // alter transaction.fullPath and transaction.request.uri\n  }\n});\n. Thanks!\n. This seems to break all hook tests:\n\nAll of them seem to fail at exactly this test. It's probably just something silly, about to investigate reasons. Example build: https://travis-ci.org/apiaryio/dredd/jobs/136387109\n. Thanks for the idea! :bulb: I believe it is duplicate of https://github.com/apiaryio/dredd/issues/339 though.\n. Implemented by #548!\n. Hi, which version of Dredd are you using?\n. Ha! I was wondering how the header mismatch happened, hence I asked for Dredd version to find out if it's not regression. I didn't notice it's response content type, not request.\nNot validating at all if body isn't present would probably solve also https://github.com/apiaryio/dredd/issues/468, but I'm not sure about the consequences. I think we should:\n- Provide warning if we assume text/plain.\n- Provide warning if there is no body specified in API description unless the status code is 204.\n- Continue validation even though the body isn't present.\nIf it's 204, people shouldn't specify content type, Dredd defaults to text/plain and empty body will equal to empty body. Everything will pass.\nIf it isn't 204, then body shouldn't be empty or if it intentionally is empty string, then the content type should be set correctly to text/plain. Everything will pass too.\n. Since opening this issue nobody ever needed to add a new variable. I think this is way too \"nice to have\".. Cannot be merged and released due to https://github.com/apiaryio/dredd/pull/511#issuecomment-224866725\n. @ddelnano Sorry about the delay, we're trying to perform the release in https://github.com/apiaryio/dredd/pull/516, but it got delayed again by an issue in hooks tests.\n. Already addressed in ac8c695, I hope, waiting to see the tests when they spin up.\n. The status is solely dependent on whether Drafter team introduces this feature or not. According to what @w-vi told me, until they drop sundown as a dependency, this cannot be done in any way.. Possible workaround would be to convert the document to UNIX newlines before testing by Dredd. You could create a script along the lines of this (batch file, untested):\nbatch\nREM See http://stackoverflow.com/a/27844521/325365\nTYPE apiary.apib | MORE /P > apiary-unix.apib\ndredd apiary-unix.apib %*\nThe apiary-unix.apib file would also be in your .gitignore. While some source maps could be off, I don't think they play such an important role in Dredd output, so it's not that likely you would have any problems reading the test reports.. @kylef mentioned in Dredd, we could try to come up with an internal workaround:\n\nThere could be some kind of work around in Dredd, such as replacing \\r with \\u{000b} and thens stripping \\u{000b} from the bodies or even converting them back to \\r\nperhaps it would end up in other parts though, might be tricky to remove them from everywhere\nobviously horrible, but probably works:\nJSON.parse(JSON.stringify(drafter.parseSync(source.replace('\\r', '\\u{000b}'))).replace('\\u{000b}', '\\r'))\n\nNoting this down here in case someone would like to work on it.. Glad to hear that! Adding full support for Windows is on our roadmap, let's see how it goes. Hooks can be tricky \ud83d\ude04 If you didn't completely give up on running Dredd on Windows, see this section in docs.. Note - there is a nice workaround mentioned here: https://github.com/apiaryio/snowcrash/issues/29#issuecomment-289614192. Currently there is no manpower to maintain more support channels than Dredd issues and Stack Overflow. I'm not monitoring the Gitter anymore myself. Closing for now.. :+1: \n. @pksunkara rebased\n. @pksunkara All tests passed. Let's release!\n\n. Released:\n$ npm dist-tags ls\nlatest: 1.0.11\nstable: 1.0.11\nunstable: 1.1.0-pre.6\n. - if package.json is present and dredd is not there, offer adding it\n    - yes?\n        - run npm install dredd --no-optional --save-dev\n        - if running dredd is not present in the CI config, add npx dredd to the CI config\n        - ensure the CI config contains something like npm install\n- else\n    - ensure dredd in globally installed in the CI config npm install dredd@version --no-optional --global\n    - if running dredd is not present in the CI config, add dredd to the CI config\nIndepotent!\n. Okay, I gave it a bit of focus and it's way too complicated. Programmatic editing of CI configurations is a difficult task full of assumptions. I'll go with an easier solution and let's see how that works, anyone is welcome to improve my work and to catch corner cases, afterwards.. I had a feeling some examples were added just to JS hooks docs. When I'm looking at it, just Remove trailing newline character in expected plain text bodies is present in JS hooks docs and not anywhere else. And while it's very common issue, it should be accessible for users of any hooks, thus it should be potentially moved to How-To Guides.\nI'm still a bit grappling with the fact these examples are IMHO dispersed all over the docs. In ideal world, all of them would be available in all the languages and it would be all in one page, e.g. the How-To Guides one. And they would be tested \ud83d\ude08 (I know, I'm dreaming here). I'll rename this issue to better represent my actual issue.. Proposal on solution. Script, which would:\n1. Get contents of master branch of dredd-example with current dredd code in special folder called ./__dredd__, the same way test-hooks-handlers.coffee does it.\n2. Remove any files in ./__dredd__/ which are ignored by git. (Or just make somehow sure that only git-visible files are copied to ./__dredd__).\n3. Use npm prune --production in ./__dredd__ folder.\n4. Use npm pack to pack the ./__dredd__ folder as tarball.\n5. Edit dredd-example's package.json so it uses Dredd from the tarball (probably this or npm install <tarball file>.\n6. Install & run test suite of dredd-example. Check for result.\nThe script would run either as the last part of any build or as a separate \"service\", similar to hook handler integration tests.\n. @netmilk All comments addressed. Good to merge?\n. :heart: \n. :+1: \n. I'm sorry we didn't reply, this somehow slipped through our net.\nThe background of this is that Dredd uses JSON Schema generated from the Attributes syntax, a.k.a. MSON, by the API Blueprint parser, a.k.a. Drafter.\nSo this is more of a feature request to Drafter. However, Dredd allows you to override the generated JSON Schema by specifying a + Schema section - see related docs. You can write your own schema validating the payload in exactly the way you want. Also, you can have your own, programmatic assertions by using hooks.\n@c0 Do you think those approaches would work for you?\nAlso, if you would be able to come up with a general approach on how to validate the structure in JSON Schema, share it with Drafter creators and I'm sure they'll gladly implement it.\n. @c0 Actually, reading your post once again, I see I answered a bit of a different question than you actually asked. Your test run is failing and it shouldn't. I wonder what's current support for MSON's *arbitrary* properties in the parser...\nAre you sure the schema\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"todosById\": {\n      \"$ref\": \"#/definitions/id\"\n    }\n  },\n  \"definitions\": {\n    \"id\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ]\n    }\n  }\n}\nis something generated from\napib\n        + todosById\n            + *8*\n                + text: Prepare Dinner (string, required)\nor is it something you wrote on your own to the + Schema section?\n. If I try to parse\n``` apib\nFORMAT: 1A\nBeehive API\nHoney [/honey]\nRetrieve [GET]\n\n\nResponse 200 (application/json)\n\n\nAttributes\n\ntodosById\n8\ntext: Prepare Dinner (string, required)\n```\n\n\n\n\n\n\n\n\n\nwith the latest drafter, I get\nJSON\njson\n{\n  \"todosById\": {\n    \"8\": {\n      \"text\": \"Prepare Dinner\"\n    }\n  }\n}\nJSON Schema\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"todosById\": {\n      \"$ref\": \"#/definitions/8\"\n    }\n  },\n  \"definitions\": {\n    \"8\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"text\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ]\n    }\n  }\n}\nI think the schema is incorrect, because the property is variable and the schema looks like it forces you to have a property called 8 exactly. In my opinion this is a bug.\n. @c0 I learned the issue got addressed in the latest parser, so soon fix should be also available in Dredd.\n. @c0 Did the fix resolved your issue?\n. @c0 I didn't hear back from you. I'll assume this is fixed now. Thanks very much for filing this and helping to debug the issue! \ud83d\udc4d Really appreciated. Feel free to get back and re-open this should you ever have any problem with this.. I think the problem might be, as you more or less pointed out, that the implementation of --only is done by skipping. skip is just an attribute of the internal transaction object and can be changed by hooks, so it won't prevent hooks to run. While for --only it doesn't make much sense to have the ability to unskip some of the skipped transactions, there are other use cases when it makes some sense (e.g. newly added http://dredd.readthedocs.io/en/latest/how-to-guides/#testing-non-2xx-responses-with-swagger), so the fact that skipped transactions go to hooks is desirable behavior. And I think there is no standard thing/flag yet in Dredd to completely prevent transaction to get handled by hooks.\nI'm also not sure whether we should focus on this rather than on the original cause of your problem - Dredd testing with hooks can be slow. I think there is quite a space for speed optimizations.\n. Wow, great to see such activity here! I'd be glad to help if guidance is needed. However, I'm not really sure this is a \"bug\", I think it's rather an improvement of current state of things. I'll re-label and discuss with @netmilk eventually.\n. @grounded042 1.1.0 will be released very soon. In the pre-releases, we were developing #389 and basically, I incorrectly merged also @ddelnano's contributions into it. In an ideal world, I'd backport his contributions to Go into the 1.0.x branch and I would release it separately as 1.0.12.\n. Since we'll put #497 into action since 1.1.0, from that point you should get all new stuff in the latest release and only get stuck on something older if using npm install dredd@stable.\n. @ddelnano Maybe just wait, we really really want to release 1.1.0 during today.\n. No problem! At least this can eventually help someone using search :+1: \n. @JefStat This is Swagger format's limitation. You are correct that Swagger doesn't allow specifying example values for parameters which aren't \"in\": \"body\".\nWhat Dredd currently supports is to specify the value by:\n- default - That obviously doesn't make sense when the parameter is required.\n- enum - Dredd chooses the first provided enum value.\nNeither one of those ways is very convenient if you want to describe just sample value. One way could be to use hooks to inject values, the other way would be to enhance the Swagger format - either by proposing sample values as part of the standard or introducing something like x-example.\n. This example can provide an idea on how the hooks working around the issue could look like.\n. @kostadinstoilov You are right, that won't work as I thought \ud83d\ude10 \n. @hskrasek I'm glad it works! We will introduce x-example soon, that should be definite solution.\n. @tomas-fp x-example is already implemented. See docs. This issue should have been closed already (https://github.com/apiaryio/dredd/issues/555 and https://github.com/apiaryio/dredd/issues/561).\n. Hi, I'm sorry for a rather late response. There were some changes in how sample vs. default values are being picked up.\nYou are using older syntax for parameters. The API Blueprint format transitioned to the MSON format for parameters notation, so I'd better provide my examples using that. Also, request-specific parameters are work in progress and they're rather experimental feature as of now. What are your exact intentions?\n``` apib\nRetrieve balance [GET]\n\nParameters\nperson_id: 1 (number, required)\n```\n\n\n\nThis will mean the person_id URI (either path or query) parameter is required, it should be number and the value 1 is a sample value of the parameter.\n``` apib\nRetrieve balance [GET]\n\nParameters\nperson_id: 1 (number, default)\n```\n\n\n\nThis will mean the person_id URI parameter is optional, it should be number and the value 1 is a default value of the parameter if not specified.\n``` apib\nRetrieve balance [GET]\n\nParameters\nperson_id: 1 (number)\nDefault: 42\n```\n\n\n\n\n\nThis will mean the person_id URI parameter is optional, it should be number and the value 1 is a sample value of the parameter. Moreover, this notation provides also default value, which says that if not specified, the parameter will default to 42.\nIn Dredd, sample values now take precedence over the default ones. If you want Dredd to use default value, do not specify any sample values. If you want the documentation to specify default value, but you'd rather Dredd to use a different one for testing, provide it as a sample value. Note there are brand new docs on this topic.\n. @jakubzapletal Any updates on this?\n. Thanks! \ud83d\udc4d \n. @castarco Hi, I'm sorry I wasn't very responsive in the past. I think I cannot accept this patch. First, I think https://github.com/apiaryio/dredd/issues/554#issuecomment-237683530 is the right way to go if you need this, second, IMHO it would be very hard to get this working under Windows. Anyway, I really appreciate you took the effort and sent a PR. It's a shame we didn't pick it up sooner and decided sooner.. Related to https://github.com/apiaryio/dredd/issues/692, I'd say.. Related to https://github.com/apiaryio/dredd/issues/623#issuecomment-246737489 now.\n. Related to #421.\n. Thanks!\n. Please ignore AppVeyor.\n. Hmm, I think it won't pass, because there is no npm install dredd -g which could be replaced, in the https://github.com/snikch/goodman/blob/master/.travis.yml file.\n. It's just that the testing script doesn't count with such setup, that's\nall. It looks for \"npm install dredd\" in the Travis' file and attempts to\nreplace it with \"npm install ./dredd/...\", which is a folder where the\ntested version of Dredd lives during the test.\nIn this case, we would probably have to also check for package.json and\nsomehow inject the tested Dredd installation there.\nOn 1 Jul 2016 10:22 p.m., \"Dom Del Nano\" notifications@github.com wrote:\n\n@honzajavorek https://github.com/honzajavorek does it need to be\ninstalled globally?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/pull/547#issuecomment-230039194, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AARTMeww6w5kEihWInAdg81QGRvmPjeDks5qRXcEgaJpZM4JDXdR\n.\n. @ddelnano Protagonist should install all right. There were some issues with the latest version on Mac, but they released a fix (1.4.1) immediately - https://github.com/apiaryio/protagonist/releases\n\nFrom the build you linked it seems to me you need to turn Travis into a sudo mode, otherwise Protagonist will have hard time during installation, since there are probably some essential libs / build tools missing. See dredd-example's minimal config: https://github.com/apiaryio/dredd-example/blob/master/.travis.yml\nI didn't realise this before, but since Protagonist is Dredd's prominent dependency, we should probably mention this somewhere and test out again (and update) our Travis CI configs we have all over the docs :grimacing:\nWe soon plan to depend on js-only version of the parser by default though.\n. See https://github.com/snikch/goodman/pull/10. Just tested out on our hooks repos and it seems to work now.\n. @ddelnano Thanks! That should do the trick for our testing script without any changes. Let's see how it goes.\n. \ud83c\udf89 \nhttps://travis-ci.org/apiaryio/dredd/builds/145563920\n\n. I had to cancel some builds since Travis CI was very slow this afternoon in spinning up builds. However, I checked everything important twice and made sure both Dredd test suite and hooks' test suites pass.\n. Idea: Get build status from RTD API, wait for it in the CI - https://readthedocs.org/api/v2/build/5578661/. RTD have a badge! \ud83d\ude0f . @rmharrison AFAIK there are two reasons why this happens:\n\nUntil now, the Swagger adapter was skipping any other content type than application/json (exactly). That is something @kylef and his team are working on right now. I believe the outcome should allow any content type in the future, not only application/json; charset... or application/hal+json etc. IMHO for JSON-based content types, the adapter should provide generated examples, but at this moment I don't know exactly how the final mechanics are going to work.\nGavel.js, the library Dredd uses for validating the HTTP response, validates the content type without any sophisticated logic. If the content type string isn't equal to what's expected, it is evaluated as not valid. I think that is correct - if you send charset, you should state it in the API description as well.. I'm sorry for not responding promptly (vacations). I'll check the situation around the adapter and whether it's current behavior in this regard is final or whether it's awaiting changes - related to https://github.com/apiaryio/dredd/issues/897#issuecomment-341432814. Related: apiaryio/fury-adapter-swagger#143. @castarco @rmharrison This should be now fixed in v4.7.1. Would you mind to confirm it's okay now?\n\nThe new behavior is described in docs: https://dredd.readthedocs.io/en/latest/how-it-works.html#choosing-http-transactions. @castarco Thanks! Sorry for late response, we've been hit by vacation time. I'll take a look soon and will give you pointers or try to incorporate your contribution.\n@netmilk In my opinion it is a good idea to be able to pass env vars to the server, what do you think?\n. The change is not propagated to Dredd yet, it's only implemented in dependency now. Hence I'm reopening this not to confuse anyone about current state of things.\n. Thanks for correcting! This is an issue which is very high on our task list, but there are still some details we would like to discuss before we proceed to fix this. With @netmilk we composed following break down of the problem:\nThe issue\nDredd currently has inconsistent behavior when it comes to validating empty request or response bodies. Even when it behaves in the right way, it doesn't help user to understand what's the actual problem and how they can solve it.\nPossible Scenarios\nFollowing table show how Dredd should correctly behave in various scenarios. However, it's still subject to be discussed. The \"Content Length\" means value of Content-Length header provided by user in the API description. N/A means user didn't provide any specific value in the description for given HTTP header.\n| Expected Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| :-- | :-- | :-- | :-- | :-- | :-- |\n| empty | text | any | 0 or N/A | \u2705 | empty string is valid text |\n| empty | N/A | any | 0 or N/A | \u2705 | when Content-Type is not specified, Dredd assumes text and empty string is valid text |\n| empty | json | any | 0 or N/A | \u274c | empty string is never valid JSON |\n| empty | json | 204 | 0 or N/A | \u274c | empty string is never valid JSON |\n| non-empty string | json | 204 | 0 or N/A | \u274c | response with 204 status code should not have body |\nSo in most cases, the solution is not to provide (erroneous) JSON Content-Type for empty bodies or to explicitly say it's text/plain:\n``` apib\nFORMAT: 1A\nThe Simplest API\nGET /message\n\nResponse 204\n```\n\n``` apib\nFORMAT: 1A\nThe Simplest API\nGET /message\n\nResponse 204 (text/plain)\n```\n\n...instead of:\n``` apib\nFORMAT: 1A\nThe Simplest API\nGET /message\n\nResponse 204 (application/json)\n```\n\nI haven't done examples for Swagger yet - if someone would be able to contribute corresponding Swagger examples to this discussion, it would help a lot.\nAt the same time, there should be available examples in documentation which work around the rules above (possibly using hooks), based on real world cases provided by Dredd users. If you think you know about any right now, please share them here.\nFeedback?\nWhat do you guys think about this? If Dredd worked correctly according to the table above, all covered by tests, would that work for you?\n. Just for the record, links to spec for the 204 and 205 status codes:\n- https://tools.ietf.org/html/rfc7231#section-6.3.5 - 204\n- https://tools.ietf.org/html/rfc7231#section-6.3.6 - 205\nThe section about 205 has a whole paragraph about how the body should be treated :open_mouth: \n@ungrim97 The main difference between solution proposed by me and you, if I read it correctly, is that if the response is 204 (let's leave 205 for later now), then Content Type should be ignored, while my solution says it should be respected during validation.\nSeems like it is the main point to discuss. The spec isn't crystal clear about this, which doesn't help much - I found no RFC saying exactly \"when you have 204, do X with Content-Type\". I'm not strongly opinionated about this and I can see how the clues you mention support your proposal.\nBoth options make sense in some way. We can also work with more granular verdicts - as in, it doesn't need to be only \u2705 or \u274c, but also \"\u2705 with warning that this and this isn't a violation, but doesn't make much sense\".\n. @netmilk But in that case, should it then validate according to the Content Type? I mean:\n| Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| non-empty string | text | 204 | any | :white_check_mark:\u26a0\ufe0f | response with 204 status code should not have body (warning) |\n| non-empty string, valid json | json | 204 | any | :white_check_mark:\u26a0\ufe0f | response with 204 status code should not have body (warning) |\n| non-empty string, invalid json | json | 204 | any | :white_check_mark:\u26a0\ufe0f | response with 204 status code should not have body (warning) |\nversus\n| Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| non-empty string | text | 204 | any | :white_check_mark:\u26a0\ufe0f | response with 204 status code should not have body (warning) |\n| non-empty string, valid json | json | 204 | any | :white_check_mark:\u26a0\ufe0f | response with 204 status code should not have body (warning) |\n| non-empty string, invalid json | json | 204 | any | :x:\u26a0\ufe0f | invalid JSON (error) & response with 204 status code should not have body (warning) |\n. I'm sorry for pointing you wrong way. I'm afraid you'll have to use hooks then to fix this, e.g. like this: https://github.com/apiaryio/dredd/issues/468#issuecomment-256343379\n. @duczen That's strange. The parsing happens in Gavel, which is triggered during validation.\n. @galenandrew There has been no follow-ups to the design sessions we had and the tables we produced above. I currently have no ETA on when this gets our attention, but the \"Epic\" label means we recognize it as one of core Dredd problems, which definitely needs to get addressed.. I propose following as a final solution. The \u2699\ufe0f symbol means that actual validation takes place.\n| Expected Body | Expected Schema | Real Body | Content Type | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| none or empty string | none or implying empty string | none or empty string | any  | :white_check_mark: | |\n| none or empty string | none | non-empty | any | :white_check_mark: | no assertions = no validation |\n| none or empty string | non-empty | any | any | \u2699\ufe0f | schema = validation | \n| non-empty | any | any | any | \u2699\ufe0f | body example = validation | \nAdditional rules\nIf the expected body, expected schema, or real body are non-empty and the status code is 204 or 205, Dredd provides warning that such status codes should not have body according to RFC.\nHow to avoid body validation\nDo not specify any body example and schema\nHow to force validation to require empty body\nDo not specify body example. Specify schema implying an empty string, such as\njson\n{\"type\": \"string\", \"enum\": [\"\"]}\nEven if you do not specify such schema, Dredd will warn in case of non-empty bodies of 204/205 HTTP status codes.. I found out that technically\njson\n{\"type\": \"string\", \"enum\": [\"\"]}\ndoesn't imply an empty string, but a string \"\", because that would be a representation of an empty string in JSON:\n```\n\nJSON.parse('')\nSyntaxError: Unexpected end of JSON input\nJSON.parse('\"\"')\n''\n```\n\nAlso using JSON Schema implies the response should have JSON content type. I wonder whether there is any other way how a Dredd user could signalize they want to force an empty response \ud83e\udd14 . Proposal (add \ud83d\udc4d to this comment if you think it's a good idea, comment if you disagree):\n\nNo body and no schema in the API description means there are no assertions. No validation will happen, any response body will pass.\nNo body and any schema will fail, because Gavel supports only JSON Schema as schema and there is no way to describe an empty response in JSON Schema.\nIn case anyone would want to force empty body validation, they can do so by hooks \ud83d\ude42 It should be pretty simple:\n\njs\nhooks.beforeValidation('My API > ...', function (transaction, done) {\n  if (transaction.real.body) {\n    transaction.fail = 'The response body must be empty';\n  }\n  done();\n});. Rejoice! v4.7.1 brings the solution and new docs on this topic. Dredd should finally be able to correctly deal with empty bodies! \ud83c\udf89 . Of course, thanks everyone involved! \u2764\ufe0f . The docs: https://dredd.readthedocs.io/en/latest/how-it-works.html#empty-response-body. Just a note that the intended behavior is also documented here.\n. I didn't hear from you @castarco for a while, but feel free to get back and re-open \ud83d\ude42 . @arielkirkwood That's good point - https://github.com/apiaryio/dredd/issues/776. @netmilk Is the workaround also a proposal for a fix? In other words, if Dredd gets fixed, should it generate following transaction names?\n/112 > GET > 200 application/json\n/112 > GET > 400 application/json\nThe application/json isn't needed at the moment, since Dredd supports only application/json as of now, but it's true that it could be needed in the future. Also we need to verify the proposal in #227 counts with Swagger.\nAnother question: Do we want to consider this to be a bug fix or a breaking change? Because it is breaking change and can break people's existing hooks.\n. Discussed several things with @netmilk in person and the outcome is:\n- From external (user's) point of view, this is a bug.\n- From internal (dredd's codebase) point of view, this is a new feature and a bit of something what's proposed in #227 \n- From any point of view, this will be a breaking change and thus will need to bump Dredd's major version number\nThe final form of the names discussed is:\n/112 > GET > 200 > application/json\n/112 > GET > 400 > application/json\n. Reminder for myself: Closing this will also need documentation update of all Swagger examples.\n. @guillemcanal Would you be willing to work on this? I can provide you with pointers and any support you may need during implementation \ud83d\udd28 \n. @guillemcanal Great, thanks! I'm already working on https://github.com/apiaryio/dredd/issues/555 which should provide workaround. And yes, we're trying to write new stuff in plain JS as it started evolve :)\n. @guillemcanal Any chance you had time to look into it?\n. @guillemcanal Just in case you get back to this, I took care of it. It should bubble up the dependency chain and be published as part of Dredd soon. It turned out to be a bit more tricky after all :)\n. Looks like there are various issues for this:\n- https://github.com/rtfd/readthedocs.org/issues/1088\n- https://github.com/rtfd/readthedocs.org/issues/1633\nRTD-MkDocs integration to blame. With Dredd documentation growing, I'm really tempted to migrate to Sphinx and ReST.\n. https://github.com/rtfd/readthedocs.org/issues/1088 contains some crazy workarounds, implemented e.g. in https://github.com/docksal/docksal/pull/120.. @netmilk Good catch, I didn't know about https://github.com/apiaryio/dredd/issues/225!\n. This is still an issue, but I decided to close duplicates. Please continue any discussions or tips on workarounds at #225.\n. My bad! Silly mistake in my code.\n. Thanks, let me fix the issues before merging.\n. @miiila Updated. All checked for duplicity. (Note: Tests here are not relevant, since these blueprints are tested on Apiary side, not Dredd side. That means this can be considered OK to be merged only once the change which mirrors these changes on Apiary side will pass tests.)\n. Yup, @netmilk's right that we're in the process of introducing compilation-free Dredd in one of soon-to-be issued PRs. Teaser: https://github.com/apiaryio/dredd-transactions/pull/51\n. This was now fixed by #573 \ud83c\udf89 \n. @RomainEndelin Could you please confirm this works for you now?\n. @RomainEndelin Great, thanks! \ud83c\udf89 \n. @iamharish The errors should not fail your build though. Read Why I'm Seeing node-gyp Errors?. The build matrix was removed, everything worked well for both versions for more than a month.\n. I think this might get fixed by #648, but without test, we can't be sure.\n. Related to https://github.com/apiaryio/dredd/issues/692, I'd say.. @galenandrew Ah, we just merged our own crafted fix. Good! I'll put back upstream dependency.\n. @danilvalov It works for me:\n``` js\nhooks = require('hooks');\nhooks.beforeEach(function(transaction, done) {\n  console.log(new Date());\nsetTimeout(function() {\n    console.log(new Date());\n    console.log(transaction.request.method);\n    done();\n  }, 5000);\n});\n```\nThen:\nsh\n$ dredd arbitrary-blueprint.apib http://example.com --hookfiles=hooks.js\nI get following output:\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: hooks.js\n2016-08-01T11:54:50.172Z\n2016-08-01T11:54:55.174Z\nGET\nfail: GET /arbitrary/path/ duration: 310ms\ninfo: Displaying failed tests...\n...\n. @danilvalov I'm sorry, I couldn't reproduce this.\n5000ms (5s)\njs\n    ...\n    done();\n  }, 5000);\n});\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: hooks.js\n2016-08-04T13:14:18.711Z\n2016-08-04T13:14:23.714Z\nGET\nfail: GET /machines duration: 305ms\ninfo: Displaying failed tests...\n...\n80000ms (80s)\njs\n    ...\n    done();\n  }, 80000);\n});\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: hooks.js\n2016-08-04T13:19:17.102Z\n2016-08-04T13:20:37.110Z\nGET\nfail: GET /machines duration: 311ms\ninfo: Displaying failed tests...\n...\nMaybe you're hitting limits set by some of the --hooks-worker-* options? Try experimenting with those. I'm a bit out of ideas here, but please let me know if you managed to beat this or not \ud83d\udcaa \n. @danilvalov Any updates on this?\n. @danilvalov Feel free to get back and re-open. Didn't hear from you, closing for now.. @BrydenR You are correct! Thank you!\n. Could we do some kind of fallbacking and try/catching?\n\nIf Dredd gets a string localhost, it resolves it automatically to ::1 and tries to connect.\nIf ::1 fails to connect, Dredd tries 127.0.0.1.\nIf 127.0.0.1 fails to connect, then just pass localhost to the system and let it resolve \u00af\\_(\u30c4)_/\u00af\n\nBut that brings quite some overhead of reconnecting. This would have to happen just once, in the beginning, and then Dredd would need to respect the selected strategy for the rest of the requests.\nAlso, this could be an option:\n\nIf localhost is given to Dredd, let the system to resolve it.\nIf Dredd gets ECONNREFUSED, then try again with ::1 instead of localhost.\n\nAgain, Dredd would remember the selected strategy for all requests within the test run.. Superseded by dadaef7bcbe55b8fcd6667ee00d38ee0322b8488.\n. I don't think there's any way, currently, but maybe @netmilk knows about something.\n. Hmm, this could go to docs \ud83d\udcd6 \n. @alex-glv Closing this as a duplicate of https://github.com/apiaryio/dredd/issues/51. I won't put your example to docs, because I'm going to work on a proxy support in Dredd \ud83d\ude42 I'd appreciate if you watch out for new versions of Dredd and once the feature is released, if you could let me know it solves your problem.. Support for HTTP(S) proxy has been implemented in Dredd v3.3.0. See documentation on how to use it.. Ha, I forgot about --reporter=dot. @aledeg Would that work for you?\n. Seems like a bug to me. My fault, I should have better check if everything works as expected when closing #594.\nLooks like the dot reporter never properly worked and you are digging it up from its tomb. I'm sorry for the issues, but many thanks for going through this! I'll try to look into it in following days.\n. @aledeg I wasn't able to reproduce this. What exactly is your setup? This is what I get:\n$ dredd apiary.apib http://localhost --reporter=dot\ninfo: Beginning Dredd testing...\nF..F.F\ninfo: Displaying failed tests...\nfail: POST /machines duration: 336ms\n...\nHow do you run Dredd, what is your dredd.yml, version, etc.? Do you use --level?\n. Thanks for getting back! Do you think it's possible that PHP hooks produce the extra output? What is the output if you run Dredd without them? Or maybe the server (php -S 127.0.0.1:8888 -t web/)? Could you try it out with a different one, e.g. http://example.com? (Mind that we don't need the test run to pass, just see what's on the output.)\n. Ah, I'm sorry for advicing you to use http://example.com as a server. It was 7 PM and my brain was probably already turned off. Server needs to be a command.\nIf you have Python, you can use this for a server: python -m SimpleHTTPServer (for Python 3, use python -m http.server).\n. Then the logging comes from the server. The question is, whether Dredd should mute the server output or redirect it. Is it useful? Maybe it would be better if it was debug output level and could be turned on for debugging, but would be muted by default. What do you think?\n. @aledeg Any updates on this?\n. @aledeg @ddelnano That's a question. Should Dredd generally swallow server output or not? In current codebase, it's hard to swallow the output just for a certain reporter (moreover, you can have multiple reporters). I see three options:\n1. Dredd should just silence all server output.\n2. Dredd should redirect all server output as it happens and have switch for silencing it.\n3. Dredd should capture all server output and after testing it should output it separately. There should be switch for silencing it.\nWhat would be most useful, in your opinion?\n@aledeg Regarding the logging level, the priority goes like this, but I'm not sure if it's possible to achieve what you want. Which is not good, since that's what people probably expect from dot reporter.\nThanks again for this \"dot reporter adopter\" job, it really helps! We think of revamping reporters and logging output in the future and these limitations, while it might not be possible to fix them easily right away, can help us to design it the right way at least for future.\n. Good! Thanks for sharing! I hope this helps also to other dot reporter users.\nI think this should be qualified as improvement of Dredd's CLI output. We plan to rethink it a bit in the future and the inconvenience of how dot reporter works is definitely something we should address.\n. I was able to reproduce this by\n$ dredd test/fixtures/single-get.apib http://example.com --reporter=dot\ninfo: Beginning Dredd testing...\nand that's it, no other output. nyan works, apiary works, cli works. markdown and junit create report.md and report.xml, respectively. According docs there are no other available reporters, so the only one broken now seems to be the dot reporter.\n. @aledeg Thanks for filing the issue! This really helps! \ud83c\udf88 \n. @JackuB It should! Good point. I'll edit it in subsequent PR.\n. @JackuB thanks!\n. @liront2 \nI tried to reproduce your issue and I think the advices in #186 were correct. @netmilk later fixed the docs accordingly in 6a8b90f44422f5e72b50f5979c67cca67c80a7c9, but unfortunately, it seems like there are still some leftovers advising users to change the URL in a wrong way - e.g. http://dredd.readthedocs.io/en/latest/hooks-nodejs/#adding-or-changing-uri-query-parameters-to-all-requests\nTo change the URL, you have to change both transaction.request.uri and transaction.fullPath:\n``` js\nvar hooks = require('hooks');\nhooks.beforeEach(function (transaction, done) {\n  var id = '123456';\ntransaction.request.uri = transaction.request.uri.replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', id);\n  transaction.fullPath = transaction.fullPath.replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', id);\ndone();\n});\n```\nAlso note I'm using asynchronous hooks with the done parameter. The code above works for me, using the same Swagger document you posted:\nyaml\nswagger: '2.0'\ninfo:\n  title: Accounts API\n  version: '1.0'\npaths:\n  '/accounts/{id}':\n    get:\n      description: Returns an account data based on a single ID\n      parameters:\n        - name: id\n          in: path\n          description: ID of an account to fetch\n          required: true\n          type: string\n          pattern: \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\"\n          enum:\n            - \"2eadb261-afa1-2a47-bf20-26bb6f5e1df2\"\n      responses:\n        200:\n          description: Account\n          schema:\n            type: object\nDon't get confused by what Dredd prints out, since in its output, it still uses the documented URLs, not the changed ones:\nGET /accounts/2eadb261-afa1-2a47-bf20-26bb6f5e1df2 duration: 407ms\nQuestion to @netmilk: If user changes the URL, shouldn't we print both the documented and the changed URL in the CLI output so user knows that Dredd makes the actual request to a different location under the hood? \u2911 https://github.com/apiaryio/dredd/issues/603\n@liront2 Please let me know if this works for you. I'm classifying this issue as a docs issue for now.\n. They do not lie, they just show the documented URL, because such URLs identify what part of documentation is Dredd testing at the moment. I filed https://github.com/apiaryio/dredd/issues/603 to address that.\n. I filed #603, a duplicate of https://github.com/apiaryio/dredd/issues/405, but I didn't close this issue \ud83d\ude42 @liront2 If you have any other issues with Dredd, don't hesitate to file an issue, please! Thanks for reporting and discussing this \ud83d\udc4d . @Pablodotnet I resurrected my long-forgotten magical skills of writing PHP and produced this sample for you, but I haven't try it out \ud83d\ude04 Take it as a PHP-like pseudo code.\n```php\nuse Dredd\\Hooks;\nHooks::beforeEach(function(&$transaction) {\n    $id = '123456';\n$transaction->request->uri = str_replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', $id, $transaction->request->uri);\n$transaction->fullPath = str_replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', $id, $transaction->fullPath);\n\n});\n```\nLet me know if it helps!. @thevikas Modifying the URI works, it just needs a specific set of changes to the transaction.. Apparently, GitHub qualifies words \"not fixed\" as a reason to close an issue :octocat: \n. There are two things the Dredd Transactions library does. It parses the API description document and it compiles HTTP transactions from the parse result.\nWith time I'm filling with doubts whether it's the correct approach. It began with https://github.com/apiaryio/dredd-transactions/issues/27, continued with @netmilk's thoughts about Dredd being used also in other then CLI runtimes (such as browser, see also #704), and it boils down also to this particular issue.\nBasically, I think it would be nice to have dredd-core (the closest current representation would be the Dredd class), which takes API Elements (parse result) and configuration as an input. The dredd CLI package (the closest current representation would be the DreddCommand class) or a wrapper for any other environment would be responsible for providing the inputs (parsing CLI arguments, parsing the API description document).\nBut that would mean parsing is responsibility of a different package then compilation of the HTTP transactions. That would mean current Dredd Transactions should be split. They should do just one \"simple\" thing. Take API Elements and compile the list of HTTP transactions.\nWhat do you folks think of this? @XVincentX @kylef @michalholasek @netmilk . I'd remove most reporters in favor of TAP, actually: https://github.com/apiaryio/dredd/issues/341#issuecomment-293890205 So I'm not sure about the reporters package. I'd do dredd-hooks to contain the whole hook-handling beast. Also, for backward compatibility, I think it makes sense to keep Dredd's CLI as just dredd.\nThe parsing is just a couple of lines. I don't know if it even deserves it's own package. Honestly, it does three things:\n\nDefaults unrecognizable API description formats to API Blueprint, with a warning (could this be a part of Fury.js, by an option? at the same time - it's quite specific to Dredd and its history)\nMakes sure source maps are available - that's something the compilation can assert later (throwing error if source maps are not available in given API Elements) and ideally it wouldn't be needed at all after #227\nFreezes the API Elements tree - that's something the compilation can do itself as a first thing\n\nI think the parsing can be just part of the CLI package. If any other environment needs the parsing, it won't need the 1 and they can just call Fury.js with the source maps option (2).. This is actually duplicate of https://github.com/apiaryio/dredd/issues/405 \ud83d\ude1e \n. I'm afraid I'll need more info about the server and it's certificates etc. to reproduce and debug this issue. Do you think it's possible to mimic similar situation in a standalone example?\n. I'm sorry, I'm not familiar with Kubernetes. Would you mind to provide an isolated example, i.e. steps I can follow and get the error?\n. Possibly related to #323. @kvacquier I didn't hear back from you and I have no idea how to reproduce this problem. I'm sorry. Should you find a way how we could fix this, please get back and re-open the issue. . Thanks! Just out of curiosity, can I ask which API description format do you use? Swagger or API Blueprint?\nAnd yes, it looks like --names needs some revamp \ud83d\ude2c \n. @aledeg We're still missing a good canonical example for sending/testing binary data in Dredd using hooks. It's on my roadmap to prepare related examples, write tests for them so we're sure Dredd really works the way we recommend and put them to documentation. Related issues: #52 #87 and maybe even more.\nFrom what you shared I can't tell exactly whether it's PHP hook handler issue, Dredd issue or issue in your hooks. Please try to investigate further what exactly might be happening so we can take a closer look.\n- What command line options do you use? $ dredd ( write your CLI options here )\n- What is in your dredd.yml?\n- What's your dredd --version output?\n- Does dredd --level=debug uncover something?\n. This is an interesting situation I didn't realise previously. You modify the transaction in PHP hooks by setting body to a binary data.\nPHP hooks handler then encodes the transaction to JSON message to send it to Dredd over a socket. Dredd listens on socket, receives the JSON message, decodes this message, and then applies the changes to transaction according to what it received in the JSON message.\nThis error seems to happen when Dredd is receiving the JSON message from socket. The error message you posted makes me think Dredd receives incomplete JSON message from the socket. How is that possible? From what I see in the Coffee code, Dredd recognises \\n as a separator of messages coming from the hook handler in the socket. So when Dredd meets \\n, it thinks the JSON message is complete and tries to parse it. Obviously, when sending a binary file, the binary code, if interpreted as text, can contain any kind of characters, including \\n.\nThis is my hypothesis on what happens, but I didn't perform any experiments to confirm my thoughts. Also, if this is really the case, I don't think there's an easy solution. In general, I would say Dredd isn't really ready to do any image comparison. It's something we didn't really try much nor have working examples prepared for.\nCurrently, the standard way dealing with binary responses would be to skip comparison of the body payload and let Dredd to judge only headers, parameters, status code, etc. That should be possible by hooks, but as I mentioned, needs some more tests, docs, and maybe fixes, since reportedly people are a bit grappling with it: #52 #87 ...\n. Once https://github.com/apiaryio/dredd/pull/906 is done, we should add following tests and examples into docs, which work with binary responses:\n\nexample with response body\nexample ignoring response body\nexample with request body\nexample ignoring request body. Reminder: work in https://github.com/apiaryio/dredd/pull/836 should be considered once we're working on binary files support.. This is going to get resolved, tested, and documented in https://github.com/apiaryio/dredd/pull/1094. Thank you @aledeg @ddelnano in participating here! It was really helpful.. Hi @yarandoo, that is correct. URI Template was never meant to be part of the origin object and was intentionally undocumented in all resources:\nTransaction Object structure in Dredd docs\nblueprint-transactions README (superseded by dredd-transactions README)\n\nWhen moving Dredd towards API Elements and Swagger support, we removed the property, since from the very beginning, it was considered rather a pollution of the public interface than a part of the contract. For that reason, there was also no major version bump.\nTo change the URL, you have to change both transaction.request.uri and transaction.fullPath:\n``` js\nvar hooks = require('hooks');\nhooks.beforeEach(function (transaction, done) {\n  var id = '123456';\ntransaction.request.uri = transaction.request.uri.replace('42', id);\n  transaction.fullPath = transaction.fullPath.replace('42', id);\ndone();\n});\n``\n. \ud83c\udfaf \n. Merged into https://github.com/apiaryio/dredd/issues/784. @BrydenR Thanks for the suggestion! Could you please elaborate on your use case and why do you need this? What are you trying to achieve?\n. Closing in favor of https://github.com/apiaryio/dredd/issues/995. Related to #248 \n. @aledeg No problem! It's a bit different use case. I wanted to leave this open for that reason. However, you're right it's better to concentrate the ideas around it under a single issue. Would you mind to share this idea for--only` in a comment under #248?\n. Let's see if docs-first approach could help us to discuss the interface before we get the implementation done. I'm proposing this new section to the How-To Guides page in the documentation:\n\u26a0\ufe0f The text below is a proposal and it won't work until this issue is closed. \u26a0\ufe0f\nRemoving Sensitive Data from Test Reports\nSometimes your API sends back sensitive information you don't want to get disclosed in Apiary Tests or in your CI log. In that case you can use Hooks to do sanitation. Before diving into examples below, do not forget to consider following:\n- Only the transaction.test object will make it to reporters. You don't have to care about sanitation of the rest of the transaction object.\n- The transaction.test.message and all the transaction.test.results.body.results.rawData.*.message properties contain validation error messages. While they're very useful for learning about what's wrong on command line, they can contain direct mentions of header names, header values, body properties, body structure, body values, etc., thus it's recommended their contents are completely removed to prevent unintended leaks of sensitive information.\n- Without the transaction.test.results.body.results.rawData property Apiary reporter won't be able to render green/red difference between payloads.\nSanitation of the Entire Request Body\njs\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  transaction.test.request.body = '';\n  done();\n});\nSanitation of the Entire Response Body\n``` js\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  transaction.test.actual.body = '';\n  transaction.test.expected.body = '';\ntransaction.test.message = '';\n  delete transaction.test.results.body.results.rawData;\n  done();\n});\n```\nSanitation of a Request Body Attribute\njs\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var body = JSON.parse(transaction.test.request.body);\n  delete body.token;\n  transaction.test.request.body = JSON.stringify(body);\n  done();\n});\nSanitation of a Response Body Attribute\n``` js\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var body;\nbody = JSON.parse(transaction.test.actual.body);\n  delete body.token;\n  transaction.test.actual.body = JSON.stringify(body);\nbody = JSON.parse(transaction.test.expected.body);\n  delete body.token;\n  transaction.test.expected.body = JSON.stringify(body);\n// sanitation of error messages (product of validation)\n  var results = test.results.body.results;\nvar errors = [];\n  for (var i = 0; i = results.results.length; i++) {\n    if (results.results[i].pointer[0] !== 'token') { errors.push(results.results[i]); }\n  }\n  results.results = errors;\nvar rawData = [];\n  for (var i = 0; i = results.rawData.length; i++) {\n    if (results.rawData[i].property[0] !== 'token') { rawData.push(results.rawData[i]); }\n  }\n  results.rawData = rawData;\ntransaction.test.message = '';\n  done();\n});\n```\nSanitation of Plain Text Response Body by Pattern Matching\n``` js\nvar tokenPattern = /([0-9]|[a-f]){32,}/;\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var body;\nbody = transaction.test.actual.body;\n  transaction.test.actual.body = body.replace(tokenPattern, '--- CENSORED ---');\nbody = transaction.test.expected.body;\n  transaction.test.expected.body = body.replace(tokenPattern, '--- CENSORED ---');\n// sanitation of diff in the patch format\n  delete transaction.test.results.body.results.rawData;\n});\n```\nSanitation of Request Headers\nFollowing example uses the caseless library to ensure we're dealing with HTTP header names in case-insensitive way.\n``` js\nvar caseless = require('caseless');\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var headers = caseless(transaction.test.request.headers);\n  var name = headers.has('Authorization');\n  delete headers[name];\n  transaction.test.request.headers = headers;\n  done();\n});\n```\nSanitation of Response Headers\nFollowing example uses the caseless library to ensure we're dealing with HTTP header names in case-insensitive way.\n``` js\nvar caseless = require('caseless');\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var headers;\n  var name;\nheaders = caseless(transaction.test.actual.headers);\n  name = headers.has('Authorization');\n  delete headers[name];\n  transaction.test.actual.headers = headers;\nheaders = caseless(transaction.test.expected.headers);\n  name = headers.has('Authorization');\n  delete headers[name];\n  transaction.test.expected.headers = headers;\n// sanitation of error messages (product of validation)\n  var results = test.results.headers.results;\nvar errors = [];\n  for (var i = 0; i = results.results.length; i++) {\n    if (results.results[i].pointer[0] !== name) { errors.push(results.results[i]); }\n  }\n  results.results = errors;\nvar rawData = [];\n  for (var i = 0; i = results.rawData.length; i++) {\n    if (results.rawData[i].property[0] !== name) { rawData.push(results.rawData[i]); }\n  }\n  results.rawData = rawData;\ntransaction.test.message = '';\n  done();\n});\n```\nSanitation of URI Parameters\n``` js\nvar url = require('url');\nvar qs = require('querystring');\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var urlParts = url.parse(transaction.test.request.uri);\n  var parameters = qs.parse(urlParts.query);\n  delete parameters.token;\n  urlParts.query = parameters;\n  transaction.test.request.uri = url.format(urlParts);\n  done();\n});\n```\nSanitation of Any Content by Pattern Matching\n``` js\nvar tokenPattern = /([0-9]|[a-f]){32,}/;\nhooks.after('Resource > Update Resource', function(transaction, done) {\n  var test = JSON.stringify(transaction.test, function(key, value) {\n    if (value.replace) {\n      return value.replace(tokenPattern, '--- CENSORED ---');\n    }\n    return value;\n  });\n  transaction.test = JSON.parse(test);\n  done();\n});\n```\nUltimate afterEach Guard Using Pattern Matching\nFollowing code is an example how to abort testing in case sensitive data could leak to test reporters. It uses the chai library for asserting.\n``` js\nvar assert = require('chai').assert;\nvar tokenPattern = /([0-9]|[a-f]){32,}/;\nhooks.afterEach(function(transaction, done) {\n  JSON.stringify(transaction.test, function(key, value) {\n    if (typeof value === 'string') {\n      assert.notMatch(key, tokenPattern); // if it makes sense to check also keys...\n      assert.notMatch(value, tokenPattern);\n    }\n    return value;\n  });\n  done();\n});\n```\n. Hi @greghuc, Apiary, Dredd included, is indeed heavy CoffeeScript user, however mainly for historical reasons. Once JavaScript started to evolve again, we decided to write new projects in ES2015. We keep CoffeeScript codebases, but mainly because of the fact that it's hard to migrate them. We don't see the benefit in using CoffeeScript just as a syntax sugar.\nI'll consider \"voting\" in the survey you posted. Thanks for bringing this up! It helped me to realise that it might not be that hard to decaf at least Dredd Transactions.\n. @greghuc Okay! Posted in the Survey.\n. Hi @thejuan, sorry that it took me so long to reply. I didn't have time to reproduce the problem, but this is really strange. There might be glitches in what resulting JSON is generated and sent, but it should be definitely generated and sent towards the server.\nHow do you run dredd? If you use dredd.yml, could you paste the settings here? Thanks! And sorry again for the delay.\n. Okay, thanks. I'll get back here if I'm able to replicate this and find out what's the issue.\n. @thejuan Just realised you could experience a problem described in https://github.com/apiaryio/dredd/issues/449. Could you please confirm this?. @thejuan Thanks! The solution is to use fixed-type. I'll add it to the issue I linked as well. Thanks for drawing attention to this and for filing this issue! Please let me know whether fixed-type works for you.. Hi, there's already an issue for this: https://github.com/apiaryio/dredd/issues/341 Would you please add your comment there? The link is interesting. Thanks!\n. @alikh31 Hi, Dredd should not require global CoffeeScript to be installed. At the time of postinstall local coffee-script package should be already available in the node_modules. The package.json scripts should look for binaries in the node_modules/.bin folder by default, so when given \"my-script\": \"coffee ...\",, then npm run my-script should evaluate coffee as node_modules/.bin/coffee.\nI see you have npm v2.15.1, not sure whether it makes any difference. I just tried it out with npm 3.8.6 and it works.\n. @alikh31 I'm completely okay with rewriting scripts/print-installation-guidelines.coffee to ES5 JavaScript if it makes portability better. Would you be willing to contribute it?\nThe multiline string could be probably easily implemented as\njs\n[\n  'line',\n  'line',\n  'line',\n  ...\n].join('\\n')\nand the rest would be basically just adding semicolons \ud83d\ude04 \n. @alikh31 Dredd's older than ES6/ES2015 :) It isn't that similar either and porting the whole codebase to ES2015 would mean a lot of time and effort while not a single new feature or bugfix would be there for Dredd users. That's something we can't afford with current resources. See https://github.com/coffeescript6/discuss/issues/32#issuecomment-246619091 for details.\nThanks for the PR, btw!\n. Thanks Ali!\nIt seems like there's a glitch in our hooks tests when code is pushed by a non-Apiary user \ud83d\ude2c . I will investigate that. Meanwhile, I prepared a separate PR with your commits: #632\n. Hm, looks like the builds failed and even failed to report back under the PR, but for no obvious reason. Glitch in the universe?\n. @w-vi I didn't want to interfere much with the contributed commits. Leaving it as it is. Thanks!\n. Hi @zmorris, thanks for such elaborate investigation! We're aware of the fact Dredd is slow when booting and wanted to find out why is that. There are actually many factors that can play a significant role in it. As a first step to help with any kind of debugging, I'm preparing a version of Dredd with extensive verbose logging. Currently, as you noticed yourself, it doesn't help much to lower the logging level. So one option is to wait until new release with extended logging is out and see what takes the largest portion of time.\nHowever, at the same time from what you write, it feels like the largest portion of time is taken by parsing your API Blueprint document. It's not very well documented, but we provide two ways to parse API Blueprint - by our C++11 parser and by our JS-only parser. Historically, the C++ parser was the only way to parse the documents, but it caused a lot of troubles when installing Dredd. That's why we provide the JS parser now as a fallback if installation of the C++ one fails. See https://github.com/apiaryio/drafter-npm/ for details.\nUnfortunately, Dredd has no diagnostic tools as of now to tell you which parser you are using (see #625). However, it should be visible during the npm install dredd process - if there's failure in protagonist package installation, then you're using the JS parser. Try to make sure to have the C++ parser and compare the times if the C++ version happens to be faster - usually it's enough to install a C++11 compatible gcc (if you're on Windows, then... it can be a different story). To me it seems like natively you have C++11 available thus faster parser is used, but in the virtual box it's not provisioned, not available, so JS parser is used and thus parsing your rather large API Blueprint happens to be very slow. But that's just my theory.\nAction points for us\n\nDocument how people can use C++ parser instead of JS one - #634\nEnable diagnostics - #625 \nAdd logging to enable better debugging - #635\n\nAction points for you\n\nTry to make sure C++11 can be used and protagonist can install, then see if times are lower\n. > So only the loading stage is an issue (although there does seem to be an unrelated delay between tests that I'm not as concerned about).\n\n@kuba-kubula Your points would be valid and relevant for the delay between tests, but wouldn't help to inspect the delay on startup. Good points though! I think we could make Dredd to report \"real\" delays caused by network more transparently so users know e.g. that the underlying server is slow in responding.\n. Dredd 1.0.11 was a branch off the main development just to backport support\nfor Node 6 to v1.0.x line of development while there were pre-releases for\nnext minor version in master branch. That means in context of this issue,\n1.0.11 is probably no different from 1.0.10. Would you be willing to try to\nfind out which version introduces the slowness using following order?\n1. 1.0.11 (we know this version is okay)\n2. v1.1.0-pre.0\n3. v1.1.0-pre.1\n4. v1.1.0-pre.2 (we know this version is slow)\nThis way we could exactly tell which version causes the problems. Thanks to\nyour investigation we got some more clues, but still there is a gap of two\npre releases.\n. Thanks! This clearly indicates that Dredd became slow with the same blueprint after https://github.com/apiaryio/dredd/pull/445, i.e. after it switched to API Elements to support both API Blueprint and Swagger. You seem to have C++ parser (protagonist) installed correctly.\nIf I checked the commits correctly, both 1.0.11 and v1.1.0-pre.0 Dredd versions use protagonist 1.3.0, so the slowdown shouldn't be a drafter issue.\nSo it seems compilation of transactions from API Elements in the dredd-transactions library got slow. I filed a related issue here: https://github.com/apiaryio/dredd-transactions/issues/66\n\n@zmorris Thanks very much for all this! Speed of Dredd is important and I think we should really pay some attention to it.\n. @o5 Hello! The slowness is probably caused by this issue: https://github.com/apiaryio/dredd-transactions/issues/66 You can try C++ versus JS versions, but I think the main problem is in processing the parse result in Dredd Transactions.. I believe this has been fixed by recent upgrades of Dredd Transactions. Thank you all! Let me know if you experience improvements \ud83d\ude80 . @miiila Addressed everything (including those two you mentioned) and tests passed.\n. Hi @adrianObel, thanks for filing this issue! Unfortunately I can't say what happens just from looking at the bug report and I need some time to replicate the problem and see what's wrong. I'll get back to you once I do it.\nJust a note, both API Blueprint and Swagger are internally parsed into API Elements as the firstmost step and then Dredd works with those. Most of the features for both the formats is the very same code, but sure, there can be some differences in some cases.\n. @CBarraford Thank you! This is valuable input. I'd suspect this is an issue of asset generation in fury-adapter-swagger.\nYou're providing just schema of the request body, so the actual example payload gets generated for you. This is done by the fury-adapter-swagger library. When generating the example, this library can ignore any optional fields. This means if you specify a JSON Schema where none of the fields are in the required array, the example can be {} as well (empty object). If I'm looking correctly, this could be the reason behind what @adrianObel reported, since I don't see anything required in his Swagger.\n@CBarraford In your case, it looks like a bug in fury-adapter-swagger, because you clearly specify the email field as required, so it should be always generated.. Thanks! \ud83d\udc95 \n. @w-vi That won't help, stable is only avoiding pre-releases \ud83d\ude10 I'm really not sure how to catch these kinds of errors in CI before releasing the package.\n. @w-vi I have @XVincentX for that. I need something before release. Filing an issue: https://github.com/apiaryio/dredd/issues/642\n. Duplicate of https://github.com/apiaryio/dredd/issues/528, actually \ud83d\ude1e \n. Thanks!\n. Since https://github.com/theodorton/dredd-test-rails now exists again on the original link, I think we can close this now. @vdaubry thanks for bringing this up! @theodorton thanks for reinstantiating the repo :). ...and this is why: https://docs.travis-ci.com/user/pull-requests#Pull-Requests-and-Security-Restrictions\n. Closed by https://github.com/apiaryio/dredd/pull/782, in favor of https://github.com/apiaryio/dredd/issues/784.. @miiila fixed\n. Closed by https://github.com/apiaryio/dredd/pull/782, in favor of https://github.com/apiaryio/dredd/issues/784.. Thanks! Addressed some in 6c4e44d.\n. @w-vi If hooks crash, Dredd emits test error with transaction.test object. There's no way to prevent it, so you have to use the power of your hook language and catch all errors by try/catch or similar constructs and turn \"errorring\" hook into \"manually failing\" hook. There are examples for that use case and two tests - one proves that erroring hook leaks sensitive data and one proves that user can handle this situation gracefully.\n. Hi @timrcoulson, thanks for reporting this. So this is regression from 2.2.1 to 2.2.2. The list of related changes is here: https://github.com/apiaryio/dredd/pull/646 I went through all of them, but I wasn't able to identify exactly which one of the Fury adapter changes broke the behavior. @pksunkara @kylef could you help, please?\n. So it is a feature of the tested API that it drops the payload whenever\npassword is sent? If I understand it correctly then, it is not anything\nwhat could be fixed on Dredd's side.. Closing - this wasn't Dredd's fault. The behavior is related to https://github.com/apiaryio/dredd/issues/637.. @bkuhl Thanks! This is interesting. We use the same notation in our dredd-example and it works: https://github.com/apiaryio/dredd-example/blob/master/package.json#L15:L16\nThe dredd.yml looks like this:\n- https://github.com/apiaryio/dredd-example/blob/master/api-blueprint/dredd.yml (API Blueprint)\n- https://github.com/apiaryio/dredd-example/blob/master/swagger/dredd.yml (Swagger)\nAre you sure your dredd.yml is at the right place, it is valid YAML file, etc.? Even if you find some glitch on your side, I think this is bug in Dredd, because you passed the config path to Dredd and if Dredd isn't able to consume it, it should give you reason and hint what to fix.\n. @thesageinpilani Thanks for the provided fix! I think you helped us to uncover many pitfalls current implementation of dredd.yml loading has. I suggested a way how to fix those in my review https://github.com/apiaryio/dredd/pull/1083#pullrequestreview-137751143 and I'm happy to help anyone to work on the solutions.\nThis particular issue could be caused by loading the config file from an absolute location, which I'm not sure how Dredd is dealing with right now in case of config files. The behavior is possibly undertested and undefined.. Hi, thanks for filing this! Let me look at the issue.\nThe warning about headers: Since API Blueprint is built on top of Markdown, there are some rules, which sometimes seem to be not important for describing APIs, but are important for Markdown to correctly understand the document. This is one of them. The correct version is with newline between + Header and actual headers (because Markdown needs this new line to detect \"code block\" with headers).\n``` apib\n+ Request\n+ Header\n\n        Api-Key: a111d3b2-3e01-46c1-8ab9-a879b6af2fbc\n\n```\nThe JSON parsing error: That's caused by a bug/feature in Dredd which is on our radar and we discuss the correct behavior in https://github.com/apiaryio/dredd/issues/556. I'll close this issue in favor of https://github.com/apiaryio/dredd/issues/556 and let's talk about possible solutions there. This is what should, I believe, work as a workaround for now:\napib\n+ Response 204 (text/plain)\n. And by the way, big thanks for following the issue template! \ud83d\udc4f Great work, the contents really helped me to identify what are issues you have and I could quickly point you to the right places.\n. @stefan-endouble Thanks for filing this! Currently, the API Blueprint format doesn't support multiple files out of the box. It's not in the spec, but it's on API Blueprint's public roadmap (https://github.com/apiaryio/api-blueprint/issues/8).\nAglio or other tools often overcome this limitation by their own solutions, such us the comment notation you mentioned. However, Dredd does not respect any of those notations as of now.\nWhat we usually recommend is to use Hercule for composing the API Blueprint document from multiple files, since it's closest to our ideas how it should work (https://github.com/apiaryio/api-blueprint/issues/8). You can employ it as part of your build step and then run Dredd on top of the final, compiled blueprint.\nThere's no plan to introduce custom support in Dredd for composing API Blueprint from multiple files (unless the team behind the format's spec will introduce the official, standard way), so I'll close this.\nStill, thanks for bringing this up here as others may find this and get pointed at the right places \ud83d\udc4d \n. @stefan-endouble I think you can still achieve this having Hercule and testing either individual blueprints or the compiled blueprint.\n. Thanks! My first idea would be following: Dredd internally uses Drafter to parse API Blueprint. There are two versions of Drafter - one faster in C++11 and one slower (but more portable) in pure JavaScript. The npm package for drafter decides which one to use based on success of installation of the C++11 version. If it fails, it continues to use the JavaScript version.\nYour installation seems to be the case. However, usually people do not have C++ compiler at all, so the failure doesn't look so severe. My hypothesis would be that you have some kind of C++ compiler present in the system, but it's not able to compile C++11, so the C++11 drafter installation fails with some unusual, terrible hairy errors. At the same time, the Dredd installation continues, finishes (I can't say, because the very bottom of the output isn't on your screenshot) and Dredd then runs correctly.\n@w-vi @pksunkara @kylef What do you think?\n\nMandatory disclaimer: Dredd isn't officially supported on Windows yet (it's planned!) and especially non-JS hooks probably won't work for you. However, there are people happily using Dredd on Windows.\n. @borekb Just to reiterate, if the installation finishes correctly and Dredd works for you, you should not need to fix anything. The JS version of Drafter is fully equivalent to the C++11 version and the red output during installation is just result of finding out that Dredd isn't able to use the C++11 version and will use the JS one. If the whole Dredd installation finishes normally and Dredd works for you, you can ignore the error output for building the native module.\nOf course, with correctly installed C++11 Drafter the parsing will be faster, but most of the time it's barely noticeable, in my humble experience.\n. @pksunkara you mean post-installation of Drafter or Dredd?\n@borekb I agree, the message is scary at the first sight. Not good first\nuser experience, that's a good point.\nOn Tuesday, 8 November 2016, Pavan Kumar Sunkara notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nIf the whole Dredd installation finishes normally and Dredd works for you,\nyou can ignore the error output for building the native module.\nI think the post-installation process should check for this and output a\nhelpful message.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/659#issuecomment-259157639, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARTMYmnK_Lp6IwSwgrtquCHmVY2bFPBks5q8I1CgaJpZM4KsJ6z\n.\n. BTW I believe the performance boost is more significant larger your\nblueprint is, I believe. But yes, this is not even properly documented yet.\nIt should be clear that the C++11 version is an optional dependency and\nit's not the case at the moment.\n\nOn Tuesday, 8 November 2016, Honza Javorek honza@apiary.io wrote:\n\n@pksunkara you mean post-installation of Drafter or Dredd?\n@borekb I agree, the message is scary at the first sight. Not good first\nuser experience, that's a good point.\nOn Tuesday, 8 November 2016, Pavan Kumar Sunkara notifications@github.com\nwrote:\n\nIf the whole Dredd installation finishes normally and Dredd works for\nyou, you can ignore the error output for building the native module.\nI think the post-installation process should check for this and output a\nhelpful message.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/659#issuecomment-259157639,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AARTMYmnK_Lp6IwSwgrtquCHmVY2bFPBks5q8I1CgaJpZM4KsJ6z\n.\n. @pksunkara then Drafter NPM should expose an interface where I could programatically determine which version was actually installed (JS or C++11). I remember @kylef offered me such interface in the past (in the context of https://github.com/apiaryio/drafter-npm/issues/3), but I so far didn't feel I need it.\n. If following is ran as a postinstall script, it prints to the terminal right after the protagonist installation fails:\n\n\n```js\ntry {\n  if (require.resolve('protagonist')) {\n    process.exit(0);\n  }\n} catch (e) { }\nprocess.stderr.write(`\nMESSAGE BLAH BLAH\n`);\n```\nIt looks like this:\n``\n...\n  File \"/Users/honza/.nvm/versions/node/v8.9.4/lib/node_modules/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py\", line 118, in GetXcodeArchsDefault\n    xcode_version, _ = XcodeVersion()\n  File \"/Users/honza/.nvm/versions/node/v8.9.4/lib/node_modules/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py\", line 1265, in XcodeVersion\n    version = re.match(r'(\\d\\.\\d\\.?\\d*)', version).groups()[0]\nAttributeError: 'NoneType' object has no attribute 'groups'\ngyp ERR! configure error\ngyp ERR! stack Error:gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/Users/honza/.nvm/versions/node/v8.9.4/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:336:16)\ngyp ERR! stack     at emitTwo (events.js:126:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:214:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)\ngyp ERR! System Darwin 17.7.0\ngyp ERR! command \"/Users/honza/.nvm/versions/node/v8.9.4/bin/node\" \"/Users/honza/.nvm/versions/node/v8.9.4/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/honza/Projects/dredd/node_modules/protagonist\ngyp ERR! node -v v8.9.4\ngyp ERR! node-gyp -v v3.6.2\ngyp ERR! not ok\n\njsonpath@1.0.0 postinstall /Users/honza/Projects/dredd/node_modules/jsonpath\nnode lib/aesprim.js > generated/aesprim-browser.js\ndredd@0.0.0-semantically-released postinstall /Users/honza/Projects/kappa-workshop/node_modules/dredd\nnode ./scripts/postinstall.js\n\nMESSAGE BLAH BLAH\nnpm WARN rollback Rolling back nan@2.11.1 failed (this is probably harmless): /Users/honza/Projects/dredd/node_modules/nan is not a child of /Users/honza/Projects/kappa-workshop\nnpm WARN rollback Rolling back protagonist@1.6.8 failed (this is probably harmless): /Users/honza/Projects/dredd/node_modules/protagonist is not a child of /Users/honza/Projects/kappa-workshop\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 (../dredd/node_modules/protagonist):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 install: node-gyp rebuild\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1\n\ndredd@0.0.0-semantically-released\nadded 247 packages and updated 1 package in 31.413s\n```\n\nThat's nice, but I believe people will overlook it as it's not the last thing in the output. I don't know if assembling an advice about the failure makes sense in such case. I'd rather vote for https://github.com/apiaryio/drafter-npm/pull/16. @phenixiim The asterisk should work, but I believe there's a bug which causes it's not working at the moment: https://github.com/apiaryio/dredd/issues/504 However, I think using --path you can overcome this limitation.\n. @phenixiim Regarding authentication, please look at the Isolation of HTTP Transactions and Testing API Workflows section in the documentation. They should give you pointers on how you can achieve what you need.\n. @browniebroke Thank you very much for sending your first Pull Request here, moreover first in Coffee Script! That required some courage \ud83d\ude0f \nWe have a public holiday here in the Czech Republic, so my answers aren't very timely, but I'll take a look next week for sure! \ud83c\udf88 \n. @browniebroke Very good! Thanks very much for the PR. Please ignore the pending hooks tests, they are broken for contributed PRs (https://github.com/apiaryio/dredd/issues/644).. I'm sorry, as of now, Dredd is not officially supported on Windows. This is a known limitation.\nHowever, there are plenty of happy Windows users of Dredd - it should correctly install and should work well as far as you don't need other than JavaScript hooks. Any other hooks do not work at the moment.\nSupport for Windows is on the roadmap though - https://github.com/apiaryio/dredd/issues/204\n. @AlexTes Thanks for the Pull Request! I checked both projects:\nnode-uuid\n\nhttps://www.npmjs.com/package/node-uuid\nhttps://github.com/broofa/node-uuid\nI see no deprecation notice\nLast change 5 days ago\nIs fork of https://github.com/kelektiv/node-uuid according to GitHub\nUsed in Dredd\n\nuuid\n\nhttps://www.npmjs.com/package/uuid\nhttps://github.com/kelektiv/node-uuid\nI see no deprecation notice\nLast change 2 days ago\nIs upstream according to GitHub\nIntroduced by your Pull Request\n\n\nI'm a bit confused about which one of those two is preferred and actively developed as of now \ud83d\ude15 . @AlexTes Thanks for linking the issue and the explanation! Both helped me to get an idea on what's going on there.. This is basic Dredd functionality - to show differences and issues with JSON. The error does need to be more clear. I hope we can address this somehow once we're improving the CLI output.. @RedDevilHat I'm afraid there's no way to do this. However, most of the settings can be overridden by a command line parameter: http://dredd.readthedocs.io/en/latest/usage-cli/\nYou can use dredd.yml for configuration which doesn't change and if there's something dynamically set according to what's in a different file, give it a sensible default in the dredd.yml file and then run Dredd with a command line option which overrides it. You could also easily script it - imagine a bash file like this:\nsh\nvalue=$(' ... read the other yaml and extract the option value ... ')\ndredd --option=\"$value\"  # the rest of options is in ./dredd.yml\nWould that work for you?. @RedDevilHat Feel free to get back and re-open. Didn't hear from you, closing for now.. @netmilk I'd love to, but Dredd's test suite isn't ready to run there. I want to hook up AppVeyor to dredd-example with big fat \"experimental\" warning so we have at least little proof Dredd installs on Windows and is able to test simple Blueprint/Swagger with JavaScript hooks.\nI want to add related docs (Windows and installation in general) in subsequent PR, later today.\nTo run the whole Dredd test suite on AppVeyor would be awesome, but needs more time.. When working on https://github.com/apiaryio/dredd/pull/737, I was able to debug the problem.\n\nWindows do not support graceful termination of command-line processes or not in a simple way. CLI process can be only forefully killed, by default. Thus the functionality around SIGTERM needs to be either marked as unsupported or some special handling needs to be introduced.\nKilling a process on Windows requires a bit smarter approach then just calling process.kill(), which is what Dredd does as of now. For that reason, Dredd isn't able to effectively kill a process on Windows.\n\nRelated:\n\nhttps://www.npmjs.com/package/tree-kill\nhttp://serverfault.com/questions/151196/how-is-the-windows-kill-process-works/151788#151788\n\nhttp://stackoverflow.com/questions/42303377/gracefully-terminate-a-command-line-application-on-windows. The newest version of Dredd v3.4.0 was supposed to introduce consistent killing of subprocesses for *NIX and Windows, but the outcome is it correctly kills processes on macOS and Windows, but doesn't kill them on Linux - it hangs. This is a serious issue and it's being worked on. Pin your version of Dredd meanwhile, if you're experiencing problems.. Closed by https://github.com/apiaryio/dredd/pull/782, in favor of https://github.com/apiaryio/dredd/issues/784.. @henricavalcante Hi, thanks for the suggestion, but this won't be so easy, I believe.\n\n\nVerifiability. Did you test Dredd is actually installable by yarn? I did not. Promoting the option means the project actually declares it's installable by yarn and if that's not the case, it's a bug. There are already sometimes problems to keep this promise for npm (see https://github.com/apiaryio/dredd/issues/528). I'm far from adding yarn before we can even rely Dredd is always installable by npm (thus before we have https://github.com/apiaryio/dredd/issues/528 implemented).\n\nChanges not sufficient. There is more related documentation and you didn't make the change everywhere, especially in the Installation Guide in the docs.\nDocs usability. npm is a current standard for installing Node.js packages. So far yarn's audience is early adopters or people who seek for optimization - let's call them power users of the JavaScript ecosystem. Dredd aims to be installable by anyone, even people not very skilled in the JS ecosystem. I believe anyone using yarn already knows they can install any npm package they wish and seeing npm install -g dredd in docs is for them easy to translate into respective yarn command. On the other hand, Node.js newbie gets easily confused by the fact there are multiple options. For that matter I would not suggest adding yarn like this.\n\nIf you attach some reasoning around this or in some way address my comments, I'm fine with further discussing this and re-opening, but for now, I'm closing this, I'm sorry.. This is actually a feature. If the input specifies the payload is JSON in the content type, Gavel (and thus also Dredd) respects that. In case the content type says otherwise, but the body is a parseable JSON, Gavel (and thus also Dredd) assumes it should compare the body as if it was JSON. This is a wanted behavior, which implies https://github.com/apiaryio/dredd/issues/531 already works for comparing bodies. There is actually an open issue about this, which explains the behavior as well: https://github.com/apiaryio/gavel.js/issues/20\nThis is a wanted behavior I believe most of the users expect and benefit from. It could be actually considered as an instance of the Robustness principle:\n\n...be liberal in what you accept from others\n\nTherefore, I close this issue and close https://github.com/apiaryio/gavel.js/issues/20 as well.\nWorkaround No. 2\nThe workaround mentioned in the issue description has a flaw - the assert usually doesn't provide a nice comparison of the bodies and user is often dragged towards reimplementing some of the Gavel's logic. Another workaround could be to force Gavel to a plain text validation by changing the body to a something not possible to parse as JSON. This is a bit of a hack, but it does the job if you really must:\n```js\nlet expectedContentType, realContentType;\nhooks.beforeEachValidation((transaction) => {\n  // save the original content types\n  expectedContentType = transaction.expected.headers['Content-Type'];\n  realContentType = transaction.real.headers['content-type'];\n// override the content types to force plain text validation in Gavel\n  transaction.expected.headers['Content-Type'] = 'text/plain';\n  transaction.real.headers['content-type'] = 'text/plain';\n// adding a character to make sure the body is not a parseable JSON so Gavel doesn't fall back into JSON validation\n  transaction.expected.body = '\u25cf' + JSON.stringify(JSON.parse(transaction.expected.body), null, 2) + '\u25cf';\n  transaction.real.body = '\u25cf' + JSON.stringify(JSON.parse(transaction.real.body), null, 2) + '\u25cf';\n}\nhooks.afterEach((transaction) => {\n  // compare the original content types\n  assert.equal(expectedContentType, realContentType);\n}\n```\nNote we're saving the content type headers and compare them later on. Since we override them to force Gavel to plain text comparison, we need to compare them ourselves. However, doing this prior to Gavel validation makes the hooks fail the transaction prior to any useful debugging output, so we move the assertion to the afterEach hook.. Hi, thanks for an interesting suggestion! This is not planned and unfortunately, I don't know about an easy workaround.\nOne would be to write beforeEach hook, where you extract filename of the API description document (see transaction object structure and origin.filename), where you'd load the original document and parse again (either using fury.js to get the same thing dredd-transactions get, or swagger-parser directly) to get the information. Obviously, it would be good to cache the parse result for given filename between transactions so each of them isn't parsing the document again and again. \nI'm not sure the filename is recorded in the origin object every time though. I didn't check tests, but I have a feeling that it appears only when you provide multiple API description documents by the --path option. You'll probably have to experiment with that a bit. Please let me know here if you were able to get it working!\nBTW, I'd generalize this problem to:\n\nThere is data in the API description, which Dredd doesn't need, but might be important for hooks.\nSince Dredd strips the data down to HTTP transactions, the data is lost and is not accessible in hooks.\nHooks can do their own parsing, but that seems inefficient since Dredd previously already had all the data in memory.\nDredd probably doesn't even consistently provide filename for hooks.\n\nI think we should make sure in the future hooks can somehow access the parse result.. @tiagoalves Great, thanks!. Hi @scflode, this is not possible as of now, because including random files like this can be a security issue. We do plan to have some sort of support for multiple files in both API Blueprint and Swagger, but there's no ETA yet. Maybe @netmilk could share some thoughts on this topic here as well.\nWorkaround would be to glue the pieces together by a different tool (there are surely tools like that for Swagger or JSON Schema) before you pass them to Dredd as a single document.. The security issue is described on following links:\n\nSnyk's VulnDB\nNode Security Platform\n\nAlso, I wrote similar concerns in https://github.com/apiaryio/gavel.js/issues/25 / https://github.com/apiaryio/gavel.js/issues/89:\n\nWe need to make sure (means there should be tests for it) user cannot reference an external file in the $ref or that only JSON Schema files are supported when referenced.\n\n...and:\n\nRegarding external file refs, I think it's okay to support it in Gavel, but we really need to test that it will interpret only valid JSON Schema files, not files like /etc/passwd (would disclose sensitive data), /dev/zero (can eat all memory), etc. People run Dredd on their CIs, we need to prevent any vulnerabilities. Would you mind adding tests for this?\n\nwhen referencing external file with valid content, Gavel reads the file and correctly validates according to the schema\nwhen referencing external file with (possibly sensitive) plain text content, Gavel refuses to read the file and doesn't disclose the file's contents\nwhen referencing huge or infinitely large external file (not sure how to test this on Windows very well), Gavel refuses to read the file and doesn't eat all computer memory or doesn't crash\n\n\nI think we could add support for including files by $ref, but the mentioned cases need to be tested. @scflode would you be willing to work on that?. Well I think in case of Dredd this should be opt-out rather than opt-in. The risk is there basically mostly in case you provide Dredd as a service for other people to use and you have no guarantee what people's inputs are going to be. When you run Dredd locally, it's your responsibility to be already aware of what the document contains. Dredd allows loading the document by URL, in which case the risk is similar to sth like\nsh\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\ni.e. you run something from the internet and you're vulnerable in case the document you are downloading does contain sth malicious, or in case it's not what you think it is (the URL is attacked and file replaced by attacker, or there's man in the middle serving you different content).\nBut that's my opinion. Would be nice to talk about this with @netmilk. Also, I think the requirement other than JSON-parseable files should not be includeable still holds.. Thanks for reporting this! To fix this, we need to track it down and to create a reproducible example (test) if possible.\nI think it can be a bug either in drafter itself or in how dredd-transactions process URI parameters. If you have any additional time to hunt this thing down, the first step would be to find out which one of these two dependencies causes it.. Then this looks like a problem in Dredd Transactions, suspecting the compileParameters logic.. @motoyasu-saburi Thank you for reporting this and looking into this! \ud83d\ude04 . @motoyasu-saburi That is an excellent investigation. Thank you! This is great.\nI think we need to change both the conditions to check for null and undefined instead of just relying on falsy value to mean that there is nothing to work with. You can use CoffeeScript's ? operator, which should do this in quite a convenient way:\ncoffee\nif param.example?\n  ...\nHere you can see how it compiles to JavaScript. I think that should solve the issue.\nWould you like to send a Pull Request, including a test? The test would probably go here as I think this problem is valid for both API Blueprint and Swagger. If you're not familiar with Swagger, just write an API Blueprint fixture for the test case and I can help with providing an equivalent Swagger one. What do you think?. I believe closing this issue closes https://github.com/apiaryio/dredd-transactions/issues/70 as well.. Tests are passing except for #672. I'll address that in #679. Thanks for this!. This has been implemented and released as v4.1.0. @w-vi @gonzalo-bulnes @snikch @ungrim97 @ddelnano I hope this did not break anything (it shouldn't!) Related to https://github.com/apiaryio/dredd-hooks-template/issues/22 as well.. Thanks for such amazing report! \ud83d\udc4d \nI didn't have much time to dig deeper, but do you think it is the same problem as described in https://github.com/apiaryio/dredd/issues/637#issuecomment-264127407? Would you be willing to experiment and verify whether required works correctly?. Calling @apiaryio/descriptions-team for help \ud83d\ude4f . @pksunkara \n\nDo you think user could be notified about this in a warning by the fury adapter?\n\n\nOkay, I figured it out: I was simply missing 'consumes' definition. Without that, it just doesn't create the body.\n\n\nI think @whiskeyseven is right in the sense that we're supposed to support the Swagger spec here in the first place. So if the faker adheres to the JSON Schema spec but the spec diverges from what Swagger supports, I think we need to extend it in the adapter (or in the upstream, sending PRs) and start to support whatever Swagger offers. I'm not sure what possibilities of extending the faker offers though.. @pksunkara \n\n\nRegarding the consumes definition, I am not sure if we need to do that. We don't create body even in APIB when there's no application/json.\n\nI'm wondering whether it would make sense to warn every time the adapter happens not to generate a body. Is there a valid use case when user might want to do exactly that? Maybe we could just note only application/json is supported etc. Give user a hand in writing the Swagger document.\n\nCan you create a swagger adapter issue for this?\n\nSure: https://github.com/apiaryio/fury-adapter-swagger/issues/99. @resistdesign Thank you for the report, but it's a bit minimalistic and I'm afraid we won't be able to find the problem like this. Could you please provide following information?\n\nWhat is your OS? What is your terminal?\nWhat command did you run and what exact output did it print?\nWhat is in your dredd.yml?\nWhat's your dredd --version output?\n\nThanks!. @resistdesign Thanks for the details, similarly to author of that line, I overlooked the missing c. It looks like a bug in the debug library, which seems to be a dependency of a Dredd's dependency. Since that dependency probably has benevolent range of accepted versions for debug, the problem also sneaked into Dredd. It seems they fixed it in https://github.com/visionmedia/debug/pull/356, two days ago and released new patch versions, so the same way the problem came, it also went away.. @justin-calleja You can override that particular dredd.yml option by command line option in case you test locally during development. Would that work for you?. I didn't really try it out, but I see no reason why the beforeAll hook should hang if its callback gets ran. Only thing which comes to me from the top of my head is that Dredd doesn't really act on errors passed to the hook callback (which I consider a wrong behavior to be fixed), so if for some reason Express calls the callback with error, maybe the error gets silently passed or something. I can try to build a working example, but it might take some time.. Just noticed you use ES2016 in the example you shared. Would you mind to try a minimal example with plain old ES5, just for the sake of eliminating options where the problem might be?. Great, thanks!. @netmilk What about now?. @Heanthor Unfortunately, yes, at the moment. This is a known issue:\n\n\n177 (for cases when you provide JSON example in + Body and let Gavel.js to generate the underlying JSON Schema for you)\n\nhttps://github.com/apiaryio/dredd/issues/449 (for cases when you use + Attributes and let Drafter to generate the underlying JSON Schema for you) UPDATE: resolved! \ud83c\udf89\n\nAs a workaround, you can:\n\nEither write hooks with custom assertions to ensure array items have the desired structure,\nor add a custom + Schema section with your own JSON Schema, which will override any generation and will result in validation according to your own rules.\n\nI hope this helps!. @adityasaxena You mean the + Schema mention?. @adityasaxena I've added an example to the specification: https://github.com/apiaryio/api-blueprint/pull/385 . @al-the-x This is a very good point. There was an attempt in the past to move to asynchronous functions with a callback, but according to your report and the warning, this is still half-way and obviously under-tested.\nI would only add that the callbacks are broken in such way that passing an argument to them (e.g. done(new Error('Ouch'))) also isn't tested and to my knowledge doesn't work correctly as of now.\nI think this should be followed up, finished, tested, documented. Any help is appreciated. @al-the-x Would you be willing to contribute at least parts of the work?. Sure, I'll be happy to give you pointers on what to do and where. Let me just discuss this with @netmilk so we're all on the same page. I'll get back shortly.. I'm having a hard time to get @netmilk to sort this out, but I think we're fine without having his opinion for now and we can arrange later to fix any possible discrepancies.\nSo in the first place, I think we should sort out how the hooks are supposed to work. I think it should be like this:\nAsync API\njs\nhooks.before(function (transaction, done) {\n  done();\n});\njs\nhooks.beforeAll(function (transactions, done) {\n  done();\n});\nSync API\njs\nhooks.before(function (transaction) {\n});\njs\nhooks.beforeAll(function (transactions) {\n});\nError - callback not called\njs\nhooks.before(function (transaction, done) {\n});\nError - callback called with an error\nIdea: Maybe it could be a failed test instead of an error in case the passed Error object would be an instance of an AssertionError (from Chai)?\njs\nhooks.before(function (transaction, done) {\n  done(new Error('ouch'));\n});\nFailed test - custom assertion failed\nTricky part: assert throws, but we're in an async flow \ud83d\ude48 \njs\nhooks.before(function (transaction, done) {\n  assert.isOk(false);\n  done();\n});\nFailed test - custom assertion failed\njs\nhooks.before(function (transaction) {\n  assert.isOk(false);\n});\nFailed test - manually failed\njs\nhooks.before(function (transaction, done) {\n  transaction.fail = 'Terrible mistake happened';\n  done();\n});\nFailed test - manually failed\njs\nhooks.before(function (transaction) {\n  transaction.fail = 'Terrible mistake happened';\n});\n\n@al-the-x @netmilk Any other cases to test and ensure they work correctly? Mocha supports also promises as a return value, but that would a new feature. I wouldn't make the scope much larger now - if we want to support promises and we want to work on it, then awesome, but let's do it in a next step. Also, I think the whole thing of consolidating how JS hooks work can be broken down to multiple steps and we could work on them incrementally - I'm not a big fan of huge PRs.\nWith having all the above in place working correctly, I'd remove also any related deprecation warnings, fix documentation to reflect reality and made sure we're correctly notifying users about changing / fixing the interface by marking relevant commits as a breaking change.\nI'm willing to give pointers and help with any work done on this. Also I'm very keen to write any related tests or docs. @al-the-x I'll point you to the sources, but first let's sync on the behavior.\n\nNote: I'm not quite sure what the following point means:\n- `transactions` object in `hooks` module object will be removed\nLooks like an ancient remnant of some legacy interfaces.. @al-the-x That's the \"callback\" way of doing things in Node.js (before Promises came). Couldn't find a good resource on the topic, but it's basically a convention saying:\n\nevery asynchronous function takes callback function as the last parameter\nthe callback function expects potential error object as the first argument, any other arguments are treated as \"return values\" of the asynchronous function\n\njs\nasynchronousFunction(argument1, argument2, function (error, result) {\n  if (error) { ... }\n  else { ... }\n});\nSo if the Dredd hook function is asynchronous function with callback, it can use the callback in two ways:\n\ndone(error) in case of an error\ndone() in case everything goes well (because there is no result to pass, otherwise it would be done(null, result))\n\nThe error is usually expected to be an instance of Error. Usually, one does not create the error manually (error = new Error('ouch!')), but gets it from somewhere:\njs\ntry {\n  JSON.parse('{incomplete...')\n} catch (error) {\n  done(error) // passing synchronous error to asynchronous callback function\n}\nDoes that make sense?\n\nIn my opinion, throwing AssertionError or passing AssertionError to done() should result in test failure. Throwing any other kind of Error or passing Error to done() should result in test error.\nThe problem is that throwing from asynchronous functions is impossible - they expect the error to come to the callback, not to be thrown, and if throw happens, the program flow breaks down. It's not possible/easy to catch thrown errors in asynchronous flow. I wonder how e.g. Mocha does it.. Hi, I think this is the same problem as described in https://github.com/apiaryio/dredd/issues/536. It's definitely an issue and I'm afraid there's currently no workaround available. The logic responsible for skipping needs to be reworked in order to fix this.. I can see --names in the command you were using. Wasn't it a similar problem as in https://github.com/apiaryio/dredd/issues/697? According to the output, it seems like exactly the same issue.\nI just want to point out it's not entirely your fault not to notice it - at the moment it's very easy to get confused by the current output of the option - see https://github.com/apiaryio/dredd/issues/564.. Thank you!. Yes, the --names option is just to get the transaction names. It just lists the names and stops Dredd.. @yuriabaevzooz Thank you for filing this and @kylef thank you for trying to find a solution. It would be good to revisit tests, docs and examples on how Dredd handles binary requests/responses. I think this is kind of related and could go together with it.\nIt would be nice if we could first think about what would be the best expected solution to this. I don't think having buffer in transaction.real.body is a good API, because you cannot transfer buffer like that to other than JS hooks (the interface between Dredd and non-JS hooks is a socket).\n\nShould Dredd decode/encode gzipped requests/responses?\nIf so, how do you test if the response was gzipped or not?. I agree with @w-vi that Dredd should take care of it. I think for most people gzipping is something which happens automatically. And you should be still able to test it, thanks to the header, as @vejja points out.. @jackbentley \n\n\nNot really...\n\nIt actually does! Thanks! According to the dredd --level=debug output it looks like the problem is in the communication between Dredd and the PHP hooks (cc @ddelnano). It seems like Dredd gets something from the PHP hooks in the socket message, which cannot be parsed as valid JSON.. @jackbentley I made the assumption from the output you posted and knowledge of Dredd's execution life cycle.\nYou are right the problem might be with 204 - I didn't realise that from the bug report at first. There are issues related to empty content and 204: https://github.com/apiaryio/dredd/issues/468 / https://github.com/apiaryio/dredd/issues/196 / https://github.com/apiaryio/dredd/issues/556\nCould you please confirm the problem you have is already described in those?. I believe this is already addressed by v4.7.1 and further, I just forgot to close this one. Thanks everyone involved and I'm sorry it took so long to fix this.\nIt would be awesome if you could verify the issues you had are no longer relevant. Thanks!. The #633 was resolved by different optimizations and currently I don't feel caching is something Dredd needs at the moment.. This would have significant consequences to behavior, code, architecture, expectations, docs, CLI output. It's not in my powers to pursue this feature, especially given it limits the range of tests Dredd is able to do in exchange for performance.. Closed by https://github.com/apiaryio/dredd/pull/782, in favor of https://github.com/apiaryio/dredd/issues/784.. When this happens, investigate whether lerna wouldn't help with managing. (Thanks @XVincentX for the tip.). That is an implementation detail to be decided. I mean multiple packages in the first place.. This should be linked from contributing docs.. Thanks to @michalholasek we are JavaScript now!\n\n. I made some experiments in the https://github.com/apiaryio/dredd/tree/honzajavorek/fast-cov branch and I've got stuck on https://github.com/StevenLooman/mocha-lcov-reporter/issues/16.. I suspect the build is failing just because some deps probably already dropped node 0.10 (#660). Thanks for the update! \ud83d\udc4d . Thanks! Related to https://github.com/apiaryio/dredd/issues/683.. @motoyasu-saburi I'll take a deeper look later, but at first sight, I'd say there might be a problem with using 2 spaces for indentation of the + Parameters list items. I think API Blueprint parser can correctly handle only 4 spaces indentation.. Moreover, it looks like you even use mixed indentation:\n\u2423\u2423+ offset (number, optional)\n\u2423\u2423\u2423\u2423\u2423\u2423- Default: `0`\n(by two, then by two + four). I went to Apiary and tried to render documentation from your API Blueprint. It looks like the markup is definitely correct, because the documentation renders correctly:\n\nWhen I try to run the latest Dredd, I was able to reproduce your problems:\nshell\n$ dredd apiary.apib http://example.com\ninfo: Beginning Dredd testing...\nfail: GET /api/applications?offset=0&limit=20&sortOrder=DESC&text=20&unreadOnly=false duration: 314ms\ninfo: Displaying failed tests...\nfail: GET /api/applications?offset=0&limit=20&sortOrder=DESC&text=20&unreadOnly=false duration: 314ms\n...\nThis is a bug in Dredd, or more precisely, in Dredd Transactions. Thanks for reporting this!\nIf you want to work on a fix, I'd expect compileParameters() to be the culprit. If you don't feel like contributing a solution, you could at least send a failing test. What do you think?. I suspect there would be a variable in a loop iterating over parameters, which doesn't get cleared out between iterations, thus text, while it should stay empty, erroneously inherits the value specified for limit. But I didn't look into the code, that's just how I imagine the problem could happen.. @motoyasu-saburi I think that's it! Would you send a PR to fix this? I'd be happy to provide help on how to approach this and how to write a test.. Actually, related or duplicate to https://github.com/apiaryio/dredd/issues/232#issuecomment-279975082.. Docs should point out https://github.com/apiaryio/dredd/issues/449 can happen and how to fight it. Basically it should say \"beware arrays in MSON\".. @swang-pro, thank you for such a great report! I think multipart/form-data isn't correctly supported as of now in the fury-adapter-swagger, which transforms Swagger to API Elements (consumed by Dredd): https://github.com/apiaryio/fury-adapter-swagger/issues/96 You can help by commenting under the linked issue or contributing your example with expected results to the swagger-zoo, which is where the test cases for fury-adapter-swagger live.. This is going to be solved with the next upgrade of Dredd Transactions in Dredd. There are some changes we want to add before upgrading, so although in Dredd Transactions this is fixed, it still may take some time before it gets to Dredd.. @MikeRalphson @swang-pro This should be now fixed in v4.7.1. Would you mind to confirm it's okay now?. I'm sorry for not being prompt in answering (got sick). @ddelnano thanks very much for checking all the hooks! This is amazing work.\nI see three options how to proceed:\n\nLet the older Go hooks installations crash. I don't like it very much, but I can't decide, since I have very little insight into how many people use the Go hooks, how prompt they are in upgrading to newer versions, etc. Probably up to @ddelnano and @snikch to consider.\nThe features event mentioned by @w-vi in https://github.com/apiaryio/dredd-hooks-template/pull/17#issuecomment-279988469 I like the idea, but implementing it would involve a lot of coding - both on hooks and Dredd sides. I'd prefer to have this as a future improvement instead of an instant solution. (I turned it into a separate issue: https://github.com/apiaryio/dredd/issues/723)\nHardcoded check. Is there a way we could hard code a simple check for Go hooks version? It's the least visually appealing solution, but doesn't involve much coding, doesn't make anything crash, and gets the job done.\n\nWhat do you think?. @ddelnano Whoa! \ud83d\ude91 Whatever it was, I wish you to get better quickly!\nThe fact there is no way we can hardcode a check for go hooks version is unfortunate. I'll think about the trial & error approach. At first sight, I don't like it very much, but at the same time, it can be the only way we're left with to save the situation \ud83d\ude42 . @ddelnano What is the current behavior of go hooks if they're provided with --version? Do they start and wait for connection, do they crash, ...?. Then I think we're okay with what you proposed in https://github.com/apiaryio/dredd/pull/712#issuecomment-287864558. Dredd could try to run the hook handler with options and if it crashes, it tries to run it without the options. If it doesn't crash, Dredd respects the test results.. I'm very sorry we were not able to get back to this. I need to close this as we're going to work on #705 first, which requires having no pending Pull Requests. We'll get back to this proposal as soon as we're addressing #917. Finishing this PR is listed on #917 as one of the necessary steps, so it shouldn't get forgotten. Thank you for the contribution! I hope we'll have the chance to tidy up the template soon.. @ddelnano That's very good point! Are you sure Travis' default Node version is less than 4? I found this: https://github.com/travis-ci/travis-ci/issues/5218. I found this, but to me it seems to be overly complicated. Maybe\nyaml\nbefore_install:\n  - \"nvm install node && nvm use node\"\n  - \"node --version\"\n  - \"npm --version\"\nwould be sufficient. node should be an alias for the latest version of Node.. I think the only missing part is https://github.com/apiaryio/dredd-hooks-ruby/pull/32 now.. @miiila @w-vi I requested a review from both of you, but one review from either of you will do the job. So who comes first, wins \ud83e\udd47 If the changes are all right, please merge this right away.. @kxmatejka You can influence the order of transactions by the --sorted CLI option. Also please see Isolation of HTTP Transactions and Testing API Workflows in the documentation. You may want to isolate your tests and have some setup/teardown in your hooks.. @kxmatejka Actually, I forgot about one more option! It's a workaround mentioned here: https://github.com/apiaryio/dredd/issues/456#issuecomment-247545197 Would that work for you?. Good! \ud83d\udc4d . Closed by #720.. Thank you for catching this! \ud83d\udc4d . Thanks for filing this! I've bumped into a similar problem when working on Windows support, but it's clear from your logs that you're using macOS. This needs tests and further investigation. Are you sure your computer correctly resolves localhost to an IP address?. @karpilin Could you please verify localhost is directed to 127.0.0.1 in your /etc/hosts file?. @karpilin I think this might be the problem you're experiencing: https://github.com/apiaryio/dredd/issues/586. @karpilin Thanks! How does the command, which you use to run the server, look like? Or maybe you use standalone server, such as Apache?. @Pablodotnet @karpilin So you say this is not related to 127.0.0.1 vs. localhost routing? The 127.0.0.1 doesn't work as well? \ud83d\ude1e . Then I think this is really the same issue as #586. localhost is just a placeholder for an IP address, but the problem is, in IPv4 the meaning of the placeholder is different then in IPv6.\nFrom what you describe, it seems the php server resolves the word localhost to the IPv6 address (::1), while Dredd resolves localhost to the IPv4 address (127.0.0.1). That's why it works when you force the php server to the IPv4 address.\nI'm merging the two issues together. In the https://github.com/apiaryio/dredd/issues/586#issuecomment-286123492 I proposed several solutions. Feel free to comment on what you think would be the best.. @arpitbhatt027 Do other clients work with the same address? Like browser, curl. Could you please file a new issue with the whole Dredd output with --loglevel=debug? Thanks!. @ywett02 Thanks! This looks like bug for sure. First, there's the Gavel.js error:\nGavel.js validation errored: TypeError: invalid media type\nIt's probably caused by something in your apiary.apib file. Is it possible for you to disclose contents of the file or at least a relevant part of it, anonymized?\nWhen the Gavel.js error happens, Dredd isn't able to recover, gracefully report the error and abort testing, but crashes on\n```\n/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:638\n        this.emitError(isValidError, test);\n             ^\nTypeError: this.emitError is not a function\n```\nThat's definitely a bug.. I was able to reproduce the problem with given API Blueprint. I've ran the latest Dredd (3.0.0) like this:\ndredd apiary.apib http://google.com --level=silly\nI've got the same output as @ywett02 reported above. In the output, following part is the most important:\nverbose: Processing transaction #26: Instructors > Instructor photo > Get photo of instructor\nverbose: Running 'beforeEach' hooks\ndebug: Running hooks...\nverbose: Running 'before' hooks\ndebug: Emitting to reporters: test start\nverbose: About to perform an HTTP request to tested server\nverbose: Handling HTTP response from tested server\nsilly: Recieving some data from tested server\nsilly: Recieving some data from tested server\nsilly: Recieving some data from tested server\ndebug: Response from tested server was recieved\nverbose: Running 'beforeEachValidation' hooks\ndebug: Running hooks...\nverbose: Running 'beforeValidation' hooks\nverbose: Validating HTTP transaction by Gavel.js\ndebug: Determining whether HTTP transaction is valid (getting boolean verdict)\ndebug: Gavel.js validation errored: TypeError: invalid media type\nFrom the first line it's possible to see the problem is in the Instructors > Instructor photo > Get photo of instructor transaction. The relevant part of the API Blueprint looks like this:\n```apib\nGet photo of instructor [GET]\nReturns photo of instructor of given id. Real image data is returned, usually in jpeg format. Additional request attributes can be used to retrieve the image with specific width and height.\nDefault (phantom) picture is returned in case the instructor has no photo set.\n\n\nRequest (application/json)\n\nHeadersAuthorization: Bearer xyz\n\n\n\n\n\nResponse 200 (image)\n```\n\n\nThe output from Gavel isn't very helpful (it doesn't mention the invalid media type value), but from the API Blueprint it's possible to see the input: image. However, image isn't a valid media type. If you want to test this endpoint, you may need to change the API Blueprint to something like this:\n```\n+ Request (application/json)\n    + Headers\n        Authorization: Bearer xyz\n\n\nResponse 200 (image/png)\nResponse 200 (image/gif)\nResponse 200 (image/jpeg)\n```\n\nBasically, you want to list all possible image formats your API supports in the response and which user of your API can expect.\nThe problem is, Dredd has some problems with testing binary endpoints: https://github.com/apiaryio/dredd/issues/87 So you may want to completely avoid testing this endpoint at the moment. To do that, you can use hooks to skip this particular transaction.\n\nTo sum it up, you should:\n\nuse specific media types to avoid Dredd crashing\nuse hooks to deal with the fact Dredd currently doesn't support testing image responses very well\n\nI should:\n\nfile an issue (improvement) that it would be nice if Gavel printed also the actual media type when it's invalid\nfile an issue (bug) that Dredd crashes if Gavel crashes like this, instead of gracefully aborting. I filed https://github.com/apiaryio/dredd/issues/731 and https://github.com/apiaryio/gavel.js/issues/88 as follow-ups. @ywett02 Thank you very much for filing this issue and drawing attention to these problems! \ud83d\udc4d I hope this helped!. Not as easy as it looked like: https://github.com/mkdocs/mkdocs/issues/206#issuecomment-293965195. @miiila @w-vi I marked you both as reviewers, but it's a race again - one review is sufficient from whoever comes first \ud83d\ude42 \ud83c\udfc1. @austin-a And how do media types in your API description look like?. It could be related. How does the expected response look like in your API description document? I can see only the request from your snippets.. I think this is not tested very well at the moment \ud83d\ude2c This needs to be fixed. I think it is related to #556.. Fixed by https://github.com/apiaryio/dredd/pull/772. @austin-a your issue needs to be resolved together with #556, but you should experience a better error reporting with v3.4.3.. @miiila @w-vi I marked you both as reviewers, but it's a race again - one review is sufficient from whoever comes first \ud83d\ude42 \ud83c\udfc1. @miiila @w-vi I marked you both as reviewers, but it's a race again - one review is sufficient from whoever comes first \ud83d\ude42 \ud83c\udfc1 The drop of coverage is explained in the PR description. If the PR is okay and you agree with my reasoning about the coverage, feel free to use your admin rights to force the merge even though a required status didn't pass.. @miiila @w-vi I marked you both as reviewers, but it's a race again - one review is sufficient from whoever comes first \ud83d\ude42 \ud83c\udfc1. @w-vi You're super fast! \ud83c\udfc5 Thank you!. More info: https://unix.stackexchange.com/questions/99112/default-exit-code-when-process-is-terminated. @abtris Adding a dependency: ps-node. @miiila This one is a bit hairy, but very necessary cleanup of integration tests. I offer pairing for the review \ud83d\udc68\u200d\ud83d\udcbb\ud83d\uddef \ud83d\udc68\u200d\ud83d\udcbb\ud83d\udcac\n\nAlso:\n\ncookies \ud83c\udf6a\nbeers \ud83c\udf7b\nor other goods \ud83c\udf81\n\n...can be in the game if we're able to get this to master during Monday \ud83d\ude3c \ud83d\ude4f \ud83d\uddd3. @miiila Thanks for the review! I'm waiting for @abtris for his review of dependencies, so I guess I'm just going to add commits addressing your comments.\n@abtris Any ETA on getting review from you?. @miiila Added several commits. OK to merge?. @miiila Going commit-by-commit might help \ud83d\udd2c . @miiila Thanks! \ud83d\udeaa \n. This could be done as Sphinx extension now.. Not relevant anymore, we should use eslint instead as the code is JavaScript now.. This has been implemented and released as v4.1.0. @w-vi @gonzalo-bulnes @snikch @ungrim97 @ddelnano I hope this did not break anything (it shouldn't!) Related to https://github.com/apiaryio/dredd-hooks-template/issues/22 as well.. Closed by https://github.com/apiaryio/dredd/pull/782, in favor of https://github.com/apiaryio/dredd/issues/784.. Dredd uses the JSON Schema you provided to validate the response:\njson\n{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"users\"],\"properties\":{\"users\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"userId\",\"name\",\"unreadCount\",\"created\",\"modified\"],\"properties\":{\"id\":{\"type\":\"integer\",\"example\":1},\"userId\":{\"type\":\"string\",\"example\":\"custom-user-id-0001\"},\"name\":{\"type\":\"string\",\"example\":\"custom user 0001\"},\"pictureUrl\":{\"type\":\"string\",\"example\":\"http://example.com/img/rick.png\"},\"informationUrl\":{\"type\":\"string\",\"example\":\"http://example.com/user/rick\"},\"unreadCount\":{\"type\":\"integer\",\"example\":0},\"created\":{\"type\":\"integer\",\"example\":1488294000000000000},\"modified\":{\"type\":\"integer\",\"example\":{\"key\":\"value\"}}}}}}}}\nThe schema says the response should return an array of certain items. Your response, however, returns an object:\njson\n{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"userId\": \"099b0836-a253-4f69-89d4-e3f095caaf98\",\n      \"name\": \"sit mollit magna\",\n      \"unreadCount\": 0,\n      \"customData\": {\n        \"k\": \"v\"\n      },\n      \"created\": 1488958113425505500,\n      \"modified\": 1488958113425505500\n    }\n  ]\n}\nThus Dredd correctly reports fail: body: At '' Invalid type: object (expected array), which means that at root path (that's the empty string '') an array is expected, but the server under test returned an object.\nI agree the error isn't very readable \ud83d\ude1e . No problem!. @honzatrtik What @w-vi wrote you is exactly what we do in tests. We use dummy script (e.g. this) as a value for the --language option, so Dredd thinks it's been able to successfully start/run/terminate a hook handler, and then we run a mock hook handler for testing purposes on hook handler port.\nSo this should work perfectly. Feed Dredd with dummy script and expose the hook handler on correct port. You will just need to start and stop the hook handler yourself.\nI'll close this as solved, but please come back and comment in case it doesn't work, so we can re-open and find a solution \ud83d\ude42 And thanks for using Dredd and for bringing this up! \ud83d\udc4d . @TotempaaltJ Actually, I think a new issue linking this one would be nice! I agree it's a good idea to give a standard option to bypass the handler logic.. Would --hooks-worker-handler-host and --hooks-worker-handler-port help you?. No, having them in YAML should be enough. Are you able to see anything interesting using --loglevel=debug?. If the language is nodejs, there is no hook handler started, because Dredd can handle it within its own process in more efficient way, that's correct. In your original post you mentioned Ruby, so I replied in that context. For Ruby Dredd does try to spawn a separate hook handler process.\nIf you're about to use the JavaScript hooks, this should be enough to get you going:\n```js\nconst hooks = require('hooks');\n//example hook just to get things going!\nhooks.before('auth > Facebook Auth > Callback (Get) > 200 > application/json', (transaction) => {\n  transaction.request.headers.Authorization = 'Basic: YWxhZGRpbjpvcGVuc2VzYW1l';\n});\n```\nSave it as hooks.js and use --hookfiles to let Dredd to load the file. The hack with endlessly running process is needed only to fool Dredd in case you're using a different language than JS and you want to run the hook handler process in a separate Docker container.. @miiila Addressed, thanks!. @IngmarStein Thanks a lot for tracking this down! I realized we soon may not need the content-length calculation at all - https://github.com/apiaryio/dredd/issues/751.. @IngmarStein I think it's good to go! Would you just amend the last commit message so it has a prefix (style:  Simplify expression)? I'm happy to merge that right away then.. Thanks very much! \ud83d\udc4d \ud83c\udf89 . @w-vi @miiila Who comes first wins \ud83c\udfc1 This one is tricky, feel free to ask if something isn't clear.. @m1ome Thanks for reporting this! I believe this is a duplicate of https://github.com/apiaryio/dredd/issues/432, hence duplicate of https://github.com/apiaryio/dredd/issues/67. Workaround can be done by hooks: http://dredd.readthedocs.io/en/latest/hooks-nodejs/#remove-trailing-newline-character-in-expected-plain-text-bodies. I added a comment explaining the situation: https://github.com/apiaryio/dredd/issues/67#issuecomment-287759448 If you have any ideas, I'd be very glad to discuss possible solutions.. According to this document it's better to wait for Node 8 to become LTS and then to switch.. I tried to build Dredd on Node 8, it fails - https://travis-ci.org/apiaryio/dredd/jobs/292155038 Needs more work than just adding to the build matrix.\n. Update: Everything works except some nuances in the sandboxed hooks (specificially, the test/unit/transaction-runner-test.coffee file). The Pitboss library doesn't seem to support Node 8 correctly, but I am yet to verify that. Two possible solutions:\n\nFix Pitboss NG\nRemove Pitboss in favor of pure vm\n\n\nUpdate: Verified it's Pitboss inconsistency between Node versions https://github.com/apiaryio/pitboss/issues/13. Node 8 is already in .travis.yml for some time.. It can also look like this:\n```\n  1) CLI when called with arguments when using language hook handler and spawning the server and handler is killed during execution should return with status 1:\n      AssertionError: expected 0 to equal 1\n      + expected - actual\n      -0\n      +1\n  at Context.<anonymous> (test\\integration\\cli\\cli-test.coffee:226:18)\n\n2) CLI when called with arguments when using language hook handler and spawning the server and handler is killed during execution should return message announcing the fact:\n     AssertionError: expected '' to include 'exited'\n      at Context. (test\\integration\\cli\\cli-test.coffee:231:20)\n``. Most likely fixed, let's close this and reopen if we see it again.. Thanks for reporting this! [There is a test](https://github.com/apiaryio/dredd/blob/8d40ae8c158734b3211f76bdd679aefc32e9468f/test/integration/cli/cli-test.coffee#L303:L323) trying to address exactly this scenario. Would you be able to dig into this and find out why the test passes while it doesn't work for you?. @Simulalex Thanks for help with debugging! So this looks like a problem with overridingdredd.yml` configuration with short CLI options \ud83e\udd14 I don't believe there are any tests for that.\nThanks for reporting the issue. If you feel brave, I could help you to write a test for this, let me know.. @C-D-Lewis Thanks for reporting this!\nI think the Swagger adapter treats each of the keys of your example object as a separate media type. It looks like the adapter isn't able to consume examples in form of a single free-form object. I'm not sure what you do is according to Swagger specification:\n\nThe name of the property MUST be one of the Operation produces values (either implicit or inherited). The value SHOULD be an example of what such a response would look like.\n\nIt looks like we could at least fix the adapter to fail with error whenever the examples key doesn't match any of the produced media types. What do you think, @pksunkara?. @C-D-Lewis I'm glad we could help! So do you think this is all sorted and we can close the issue? Or do you think something should get changed to improve the experience?. Thanks!. @ddelnano I see your \ud83d\udc4d Does that mean you approve? \ud83d\ude04 I'm not really well educated in the Go ecosystem. But the changes look good to me, the code makes sense.\n@hcliff Thanks very much for the PR! \ud83e\udd47 I think I'll merge it! Just out of curiosity - I see npm run lint doesn't work for you. What was the issue?. @hcliff Thank you very much! \ud83c\udf89 It will get auto-released shortly.. \ud83d\udc4d \ud83c\udf89 . The coverage has dropped because of https://github.com/apiaryio/dredd/issues/763 and I have no quick solution to that at the moment. Needs significant work.. @netmilk I'd say Coveralls should display a sum of coverage sent for a particular PR, from all CIs. But I did not verify that. If that's not the case, then of course this would be useless.. @driesvints So the\nMachines > Machines collection > Create Machines\n  \u2192 POST /path/to/something (application/json)\n  \u2190 200 (application/json)\n  \u2714 PASS ... 234ms\noutput would still be way too verbose for you?. @driesvints There already is a dot reporter: dredd --reporter=dot However, I can imagine dredd --reporter=line as well \ud83d\ude04 . You should be, Dredd supports multiple reporters.. @clementgarnier That is definitely not intentional. Could you please file a separate issue for that? This would be a serious error and should be fixed right away.. I found some old notes we should eventually take into account:\n\nShow transaction names and blueprint source file in Dredd CLI reporter, show summary of errors at the end of report without payloads.. Note: We should not forget about separating (or not) hook handlers output as well - https://github.com/apiaryio/dredd/issues/910#issuecomment-343499508. I understand your point, but Dredd is meant to check end-to-end compliance of your server.\n\nWhile different languages can have a similar complete-http-as-code functionality, it would be very difficult to make this work and maintain such feature cross-language. On the other hand, all languages talk HTTP. For Dredd, HTTP is the integration layer and the thing to test.\nYou are correct in that even if you filed this issue specifically for the dredd-hooks-php project, for the PHP hook handler it's not possible to intercept the actual HTTP request from hooks as the hooks handler is not the one performing it. Performing the HTTP request is an essential part of the actual testing and Dredd needs to have that part fully under its control to ensure correct and uniform behavior (in other words, you can make the request in various ways with various parameters and if Dredd wasn't the single entity responsible for making the request, you couldn't rely on how the request is made - e.g. whether HTTP proxy support is present or not, etc.).\nI don't think this is a direction we would like to pursue. I'd rather focus on making the HTTP roundtrips and overall Dredd performance faster, but I'd keep the HTTP as an essential, core, and the only integration layer with the server under test.\nMentioning @netmilk to put his thoughts here as well, but closing for now. If there's more people gathering around this idea or proposals on how to implement it, I'm happy to re-open.. Thanks for filing this @liront2, I think this is already discussed in https://github.com/apiaryio/dredd/issues/692. It is definitely a bug.. @adambabik Thank you! Looks great! I'd say this fixes https://github.com/apiaryio/dredd/issues/731 for sure.. Released as v3.4.3 \ud83c\udf89 . I appreciate the reviews very much! Thanks! I'll look into this as soon as I have a free moment \ud83d\udc4d . @kylef Addressed your comments. Won't merge before I get green from you as well \ud83d\udc9a . \n. @arielkirkwood @castarco Does this explain the behavior?. Hi @thevikas, for body request parameters you can use schema.example. For query parameters, you can use the x-example extension. Does that solve your problem?. No, usually, you can provide just one sample value. Specification:\n\nA free-form property to include an example of an instance for this schema.\n\nAlso, see the x-example vendor extension specification.\nWhy would you want to use multiple examples? Dredd would probably always choose the first one anyway. What are you trying to achieve?\nIf you want to specify an exact list of allowed values, you can use JSON Schema's enum.. @thevikas I'm closing this for inactivity, feel free to come back and discuss anything unclear. I'd be happy to re-open if needed.. Hi @robinsonrengaraj, what exactly is \"Sprint rest\"? This is something you'd normally do by Dredd hooks.. Spring is a framework in Java.\nThere are no Java hooks yet. You would either use a different language particularly for the hooks (Go, JS, Perl, PHP, Python, Ruby), but then you might be limited in what's possible to do with your application in the hooks. E.g. to setup some fixtures in the database, you'd need to create an ad-hoc connection just for the hooks, not being able to leverage any of the goodies the Spring framework offers you. For instance, see the JS example of modifying the transaction and adding a header.\nThe other option would be to contribute Java hooks.. Thanks! Let's see how the result of the build will look like \ud83d\udc4d . Looks great!\n\n. This has been fixed: https://dredd.readthedocs.io/en/latest/installation/#why-am-i-seeing-network-errors. I discussed this with @netmilk in person - let's remove this for now and let's revisit soon what can we do to re-introduce the tests.. I'm requesting review from both @abtris (to verify the steps to set proxy are correct) AND @miiila (to review the rest of the text and correct English).. @abtris @miiila Thanks!\n@miiila would you please re-read the \"Compiled vs pure JavaScript\" part, please? I tried to make it more clear.. https://circleci.com/docs/2.0/workflows/. I just realized this wouldn't solve anything - we need the whole status (Travis CI + AppVeyor + ...).. @fidransky Thanks for reporting this! This is a bug. I was able to reproduce the problem. Steps to reproduce:\n\nCreate a public API project on apiary.io\nUse following API Blueprint:\n\n```apib\nFORMAT: 1A\nTest Form Data API\nPOST /data\n\n\nRequest (multipart/form-data;boundary=---BOUNDARY)\n\nBody---BOUNDARY\nContent-Disposition: form-data; name=\"text\"\nContent-Type: text/plain\n\nHello\n---BOUNDARY\nContent-Disposition: form-data; name=\"json\"; filename=\"filename.json\"\nContent-Type: application/json\n\n{\"test\": 42}\n---BOUNDARY--\n\n\n\n\n\nResponse 200 (application/json)\n\nBody{\"test\": \"OK\"}\n\n\n\n\n\n```\n\nSave the API project.\nGo to Traffic Inspector, copy the URL of the Mock Server.\nVerify Mock Server works correctly (should return HTTP 200):\n\n```\ncurl --include \\\n     --request POST \\\n     --header \"Content-Type: multipart/form-data;boundary=---BOUNDARY\" \\\n     --data-binary \"---BOUNDARY\nContent-Disposition: form-data; name=\\\"text\\\"\nContent-Type: text/plain\nHello\n---BOUNDARY\nContent-Disposition: form-data; name=\\\"json\\\"; filename=\\\"filename.json\\\"\nContent-Type: application/json\n{\\\"test\\\": 42}\n---BOUNDARY--\" \\\n'https://private-xxxxxx-abcdefg.apiary-mock.com/data'\n```\n\nGo to your local terminal and use Dredd with the same API Blueprint and with the address of the Mock Server. Use --level=silly to see all details.\nDredd hangs on About to perform an HTTP request to the server under test: ... for a long time.\nDredd successfully finishes testing, reporting that the responses do not match, because the Mock Server returns HTML page with <title>Application Error</title> and HTTP 500 status code. That means unlike in our previous curl call, Dredd performed an invalid call the Mock Server isn't able to process.\n\n\nI don't think there's any kind of test for sending multipart/form-data. So the first step to fix this would be to add a failing test for this.. Unfortunately, I can't think of an easy workaround just out of my head. If someone is keen to provide a failing test (above I provided steps to reproduce), it would speed up the fix.. Also, it looks like this thing worked in previous versions. It would be helpful if someone could verify which version introduced the problem. I suspect v3.1.0.. This has been fixed in #841 and released as v4.1.3 \ud83c\udf89 . This has been resolved a long time ago.. This got fixed and released with https://github.com/apiaryio/dredd-transactions/pull/80.. This still doesn't work as expected: https://github.com/apiaryio/fury-adapter-swagger/issues/123 Until there are tests on Dredd side for this feature so we're sure there are no gaps in the implementation, it should be used only experimentally.. The issue I linked above is irrelevant (see https://github.com/apiaryio/fury-adapter-swagger/issues/123#issuecomment-324061449), but the experimental status of array URI parameters holds, because the feature is untested on Dredd side. It should probably work as expected, but use it with caution.. Thanks for filing this! beforeValidation should have transaction.real.body set. Could you please point me to a place where this is incorrectly mentioned in the docs? Or would you send a PR with a fix? \ud83d\ude09 . Thanks for this issue! The workaround you mention should definitely work and it worked before. My hunch is that the behavior got broken with introduction of https://github.com/apiaryio/dredd/pull/761.\nFor that reason, I think this should be a matter of adding a test to test/integration/child-process-test.coffee, where the tested process would be a bash script spawning a server-like process. Feel free to leave the AppVeyor (Windows) tests broken for now, I can add an equivalent test with a Batch file later.. By the way, this is an excellent bug report \ud83d\udc4d . Hi @ayushoo7, this is an issue tracker of Dredd testing tool. Dredd tests API implementation against the Swagger API description documents, which is useful with the design-first approach when creating HTTP APIs.\nUnfortunately I do not understand what is your problem and to me, it seems to be unrelated to Dredd. It looks like you have some problems with the swagger-codegen-cli tool. In that case, you should probably file an issue here.\nIf I'm wrong and you manage to explain the issue in other words, I'd be happy to re-open this.. @ayushoo7 No problem, that happens \ud83d\ude42 . Thanks for an excellent report!\nI need to check with @netmilk what is the intended behavior, but I think you're right, this looks like a bug. I can imagine Dredd would follow redirects, but probably only if asked, e.g. by a specific command-line option. My hunch is that this behavior was introduced with replacing the native HTTP(S) request implementation with the request library in https://github.com/apiaryio/dredd/pull/749 The next steps should be:\n\nInstall version of Dredd before https://github.com/apiaryio/dredd/pull/749 and try whether it follows redirects. If yes, then this is clearly a bug. If not, this is a feature request \ud83d\ude04 \nWrite a failing test for the correct behavior\nFix the behavior, make the test passing\n\nAny help with the above would be greatly appreciated.. I checked with @netmilk and he says previously Dredd did not follow redirects. This is a bug, regression.. Released as v3.5.1 \ud83c\udf89 . To me that sounds more like testing a workflow. In fact following redirects means you are doing multiple requests to the API and you expect keeping some state between them.. @yogevglucome Dredd is, currently, definitely better as a unit/isolated test tool. Hooks give you some flexibility, but not as much convenience as there could be. The problem is also with API descriptions, which have basically zero support for workflows as of now.. Turned this into a feature request \ud83d\ude42 . @MikeRalphson Dredd currently does not follow redirects. That means when the test request is redirected, Dredd validates the API description response spec against the 3xx response.\nAs I understood your wish, you want Dredd to have an option (either a real CLI option or a way to turn the thing on in hooks) to follow redirects, i.e. when provided with 3xx response from the server under test, it would follow the Location header and validate the API description response spec against the resulting response (let's say 2xx, 4xx, whatever is there).\nAm I correctly interpreting your wish?. (If Dredd follows the redirect, it is a bug again, but 516c941 contains regression test, so that shouldn't happen...). @MikeRalphson Ah! That's something else then. By default Dredd tests only 2xx responses in Swagger, but you can use hooks to unskip any other ones to test them. Example of such hooks is here.. @MikeRalphson If you think the default behavior should be different, let's talk about it, but better let's file a separate issue.. Hi Stanislava! You should be able to run Dredd with multiple API descriptions like this:\ndredd something1.json http://example.com --path=something2.json --path=something3.json\nThis should load all three descriptions. You should be able to specify this also in the dredd.yml configuration file. Make sure you have the path and blueprint entries like this:\nyaml\nblueprint: something1.json\npath: ['something2.json', 'something3.json']\nWould that work for you?. @sisillV I hope your question is answered. If you have anything more to this, feel free to comment or file a new issue.. Thanks for the report! array request parameters are not supported yet. The support needs to be added to the Fury Swagger Adapter. cc @pksunkara . I'd actually merge this with https://github.com/apiaryio/dredd/issues/791.. Thanks for the report! Looks like this is something which needs to be fixed in the Fury Swagger Adapter, cc @pksunkara @kylef . @pksunkara It's compilation / syntax error, and those are from Fury. Dredd doesn't add any custom syntax errors AFAIK.. This gets fixed and released with https://github.com/apiaryio/dredd-transactions/pull/80 in several minutes.. This is awesome! Thank you \ud83c\udf89 Finally someone shot down this one \ud83d\ude04 . Released as v3.5.1 \ud83c\udf89 . Released as v3.5.1 \ud83c\udf89 . Thanks!. Except for what I described above there's:\n\nbehavior change, which should probably mark breaking changes, but I don't presonally use it much.\nI use duplicate to mark duplicate issues before closing them, so if someone finds them, they can immediately see it's closed because there's equivalent issue, not because it's fixed.\nThere's security issue, which I used to mark vulnerabilities. Should be probably named vulnerability instead, to be consistent with terms used by Snyk.\nI'm not sure how much improvement label is useful, because basically anything else then bug is improvement or discussion/question.\nI don't mark discussion/question, I just try to answer and close the issue ASAP if the OP is satisfied with the outcome or when they won't come back.\nlow hanging fruit is something we use for issues we identified with @netmilk as small tasks anyone can easily come and do. I think they could work as good tasks for first time contribution or as something maintainers choose to work on when they're out of stories in the sprint. Or when they're bored in train.\nI thought of a label which would indicate I'm willing to coach someone to deliver an issue. But I'm willing to coach anyone on any issues, so this is probably equivalent to the one above.\nThere are Epic: something labels in golden color (I was corrected by @netmilk it's gold, not dirty yellow). Dredd has several big areas which need significant attention and which are root causes for many issues. We call them epics and treat them as epics in our sprints. Some are just tidying up (make sure we work correctly with URI parameters), some are product development (rethinking of transaction names).\nThere are Context: something labels, which help us identify issues related to a specific dependency, operating system, API description format, etc. Those are useful for basic orientation in context of the issues and ideally, ADT could actually watch issues having certain contexts. But there's not so many of such issues at the moment, so I'm okay with mentioning you explicitly. Looking at current context labels I personally think JS hooks should be actually an epic. \n\nBTW I don't keep the same labels elsewhere then in the Dredd repo, which is maybe a shame.... Note: mention in docs we're using specific colors for expressing the context (red = bug) or colors from this palette.. @m00sey Thanks for the change! Could you please just edit the commit messages so they're prefixed with docs:? Dredd uses Semantic Release, which needs these tags to know whether it should automatically release a new version or not when PR gets merged.. @m00sey To me the commits still don't seem to be completely right, but I sense some fighting with git complexity here and I'm here to help - https://github.com/apiaryio/dredd/pull/824 It just took me a bit longer then I anticipated, I'm sorry for that. Thanks for the change!\n@ddelnano Would you have any ideas on how we could easily sync the docs? Now that #728 is fixed by #775, almost anything is possible \ud83d\ude0e . @elias-garcia The problem is that Dredd tests your app in isolation. It communicates only over HTTP, so it cannot easily collect any kind of test coverage. If you run the app using the --server option, then Dredd has the stdout of the app. If the app prints the coverage data to stdout, Dredd could collect it. But to me, this seems to be quite far from Dredd should do and it also seems fragile.\nI suggest the app code gets instrumented in a way that it reports the data to a file. E.g. Dredd itself has some integration tests where the Dredd binary is being ran as a subprocess. To collect coverage, there's this hack to instrument the code and report to file. Then the reported data gets merged with data from other tests. See docs. You could implement something similar. It's not Istanbul though, it's LCOV.. @elias-garcia I noticed your \ud83d\udc4d, so I guess we can close this now \ud83d\ude42 . Poor man's implementation in Sphinx extension could be:\n```python\nfrom sphinx.util import logging\nlogger = logging.getLogger(name)\n...\nres = requests.get(refuri)\nif 'class=\"State State--green\"' not in res.text:\n    logger.info(\"GitHub Issue linked, but not open: {}\".format(refuri))\n``. Currently this is a non-issue. Once we need directories and we bump into any limitations, this should be re-opened or a new issue should be created.. This is a nice idea, but I'd rather invest my time in closing the issues. I made easier to mention GitHub issues from docs though, using the:ghissue:extension.. If this was included in https://github.com/apiaryio/dredd-transactions/pull/78, it should get propagated today or so.. Merging with https://github.com/apiaryio/dredd/issues/799. Thanks @philsturgeon for filing though! \ud83d\ude4f . This gets fixed and released with https://github.com/apiaryio/dredd-transactions/pull/80 in several minutes.. Thanks for the report! We need to figure out where exactly the thing hangs. Please, try out running Dredd in all your CI builds with--level=debugor even better, with--level=silly`. When you experience the hang again, copy-paste the output here, please. It will be clearer whether it's a network problem, hooks problem, Dredd problem, ... . @driesvints Not yet, unfortunately. I'll try to prioritize this when I'm back in work on Mon.. So with the most verbose logging turned on, the output looks like this:\nverbose: Running 'beforeEach' hooks\ndebug: Running hooks...\nverbose: Sending HTTP transaction data to hooks handler: uuid...\nwarn: Hook handling timed out.\nAccording to @driesvints' Dredd output I have access to, for a single transaction it's possible for multiple hook calls to timeout, while other pass correctly. E.g. beforeEach and afterEach times out, but before and after execute correctly.\nMy hunch is this is probably something with PHP hooks (cc @ddelnano). Unless we prove this can be reproduced with other hook handlers, I consider this bug to be PHP-specific.\n@driesvints What version of PHP hooks do you have? How does your dredd.yml look like? Did you update the PHP hooks recently? Also, are you able to track down at which moment this started to occur in your builds?\nOne more idea - the only recent change affecting hook handlers was https://github.com/apiaryio/dredd/pull/803, released as v4.1.0. Could you try downgrading Dredd for a while to test whether it fixes the problem?. > I can't use the same dredd.yml for each\nBTW, you could use --config (docs, example).\n\nWhy downgrading?\n\nBecause in v4.1.0 there was a feature which could theoretically affect hooks. But since you're running v3.5.1 (which I did not notice previously, I'm sorry) it's irrelevant suggestion.\nWe need to factor out the root cause somehow. There're still way too many things in the mix and very little clues. I have one more idea, but let me check some things first.. My idea would be that the brand new cross-platform subprocess implementation introduced in v3.4.0 could have an impact on how the hook handlers are being started and treated.\nDo you think you could run couple of builds with Dredd v3.3.1 to see whether you experience the timeouts as well? Branch out from master, downgrade Dredd, then push to CI and retry 10+ times, to see how reliable it is compared to what you have in master.. @driesvints Any updates on this? \ud83d\udc40 . Honestly, I'm quite out of ideas. It can be something specific to your environment, network, OS, or to PHP hooks. The fact it's flaky doesn't really help to debug it. I'm afraid without some digging on your side we can't do much to find the root cause \ud83d\ude1e I'll get back here if I come up with any new ideas what else could help.. Maybe CircleCI user support would have some ideas. They helped us in Apiary to resolve various cryptic issues, many times.\nOn 7 Sep 2017, 00:36 +0200, Dries Vints notifications@github.com, wrote:\n\n@ddelnano it's only specifically happening on CircleCI\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @driesvints Thanks for bringing this up. I'm glad you don't experience the timeouts anymore. I hope this issue will help to debug similar problems in the future! No regrets to the time dedicated to debugging. It could uncover a serious issue as well, you can never know \ud83d\ude42 . This looks like something we might have caused with @kylef by https://github.com/apiaryio/dredd-transactions/pull/80 yesterday or by one of the other recent Pull Requests on Dredd Transactions. Would you please try out whether one of the previous versions work correctly?\n\nWe'll try to look into it meanwhile.. We're still about to find the root cause. Workaround is to downgrade Dredd Transactions meanwhile.. Not correct, we already have https://github.com/apiaryio/dredd-transactions/pull/81 to fix this.. It gets automatically released once this build passes. There are some flaky tests and we did not notice it failed and the release did not happen.. @clementgarnier Here it is - v4.1.2. > Coverage decreased (-0.09%)\nThis is correct \u2b06\ufe0f It's hotfix without tests.. Schema of inner Dredd architecture should be added to docs and explained as well. This is from our secret archives:\n\n. https://twitter.com/mtnygard/status/1079471792291491840\n\nWhen diagramming, make sure your readers know a) what the elements are; b) what the relationships mean; and c) what the constraints are. That\u2019s the meta-model necessary to understand the model.. Hi @gmile, thanks! The CI fails, because we need the commit to be formatted as docs: Fix jenkins link, so Semantic Release could automatically release correct Dredd versions according to commits. I appreciate the contribution, but the commit message needs to be fixed first.\n\nAlso, there's https://github.com/apiaryio/dredd/pull/775, which already contains the change and will be merged soon. It also contains checker for broken links and redirects, so this shouldn't happen anymore.\nIt's great to see someone fixing Dredd docs! Small change, but I'm actually quite excited :) I leave it up to you if you want to get this passing & merged or if https://github.com/apiaryio/dredd/pull/775 is good enough for you. I'd be happy to have your name in contributors.. This looks like a problem of my browser, exclusively, not a general issue.. Just to be clear, this is 100 % my responsibility. I merged the new docs and in the excitement I did not click through the new ones sufficiently. I'm working on a fix.. Not able to get the builds passing. This needs to be rebased on top of https://github.com/apiaryio/dredd/pull/829. However in that case, the CI will stop building the docs, so we won't be sure whether docs are building correctly \ud83d\ude15 (related to #551) But that's as good as it gets for now.. Hi @miendt, I'm happy you're interested in Dredd! This topic is elaborated in docs: https://dredd.readthedocs.io/en/latest/how-to-guides.html#isolation-of-http-transactions Let me know if this helps. Cheers!. I made some preliminary investigation. To reproduce the issue, it's best to:\n\nSet dist: \"trusty\" in .travis.yml\nRun Node 6 builds, which fail almost always\n\nI'm playing with it in the honzajavorek/travis-trusty branch. It seems the most violating tests are:\nwhen gracefully terminated by childProcess.signalTerm() process with support for graceful termination...\n...logs a message about being gracefully terminated\n\nexpected '' to include 'exiting'\n\n...does not get terminated directly by the signal\n\nexpected 'SIGTERM' to equal null\n\n...returns zero status code\n\nexpected null to equal 0\n\nwhen child process terminates intentionally gracefully with non-zero status code returns non-zero status code\n\nexpected null to be a number or a date\n\nwhen gracefully terminated by childProcess.terminate() process without support for graceful termination\nemits an error\n\nexpected undefined to be an instance of Error\n\ndoes not get terminated\n\nexpected true to be false\n\nAlso, we should not forget there's https://github.com/apiaryio/dredd/issues/756, which could be IMHO related.. To debug this, it might be worth spinning up Travis CI docker container locally and to repeatedly run the tests for managing child processes. My attempts:\n\nhttps://travis-ci.org/apiaryio/dredd/builds/263091960. Hi @miendt, sorry for such late response. One API Blueprint file typically describes one API. The /signin/ and /signup/ are usually called endpoints or resources. If you use Dredd with an API Blueprint file containing two endpoints, Dredd should automatically test each of them.\n\nI recommend you to go through the Quickstart, step-by-step. Also, dredd-example contains full working example of Dredd and a simple API.\nDoes that answer your question?. @miendt Good! Still, this would be rather called running a single endpoint, but I'm glad you found what you needed \ud83d\ude42 . @ddelnano @snikch What do you think about this?. This is being addressed by @vladosaurus' own PR: https://github.com/apiaryio/dredd/pull/835 \ud83d\udc4d . I believe this has been already tackled by https://github.com/apiaryio/dredd/pull/928.. This is amazing! @hobofan \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f It will take me some time to go through the changes, but in advance, thanks for all the work! Don't worry about the image, we'll ask @tjerabek to get a new one \ud83d\ude04 . Just to let you know, I'm on it, but I've got carried away by investigation of https://github.com/apiaryio/dredd/issues/834.\nHowever, I already asked for the new image with Rust logo added :wink:. @hobofan awesome! \ud83c\udf89 . @hobofan I think you deserve all the praise, for contributing the Rust hooks \ud83d\ude04 It's so great. Thanks very much \ud83d\udc4d . Just an update, this didn't get released yet, because of https://github.com/apiaryio/dredd/pull/854, but the docs are built and up to date, so Dredd now features the how-to and Rust logo.. Finally, v4.2.0!. @hobofan Thanks for all the work and the investigation. I need to take a look at the before and after events, because it sounds suspicious to me that they are not sent. I mean - it might be a bug in Dredd, not in docs \ud83d\ude31 I need to verify that part.\nRegarding beforeAll and afterAll, they get an array of all transactions in the API description document. If you tested with just one endpoint, you get an array of a single transaction.. > I took that bit of arcane knowledge from the golang implementation.\nI've just realized that in the time I was learning about Dredd, there were some issues from @snikch filed, which addressed certain things which came up during his work on the Go hooks. Digged them up and found https://github.com/apiaryio/dredd/issues/271, which sounds completely relevant to this issue.\nThe hook handling API should certainly get more attention. There are multiple issues to be addressed, some work in progress, ... Need to find time to tidy up there.. @hobofan If the second part of your issue about beforeAll & afterAll and array of transactions is resolved, would you mind if I merge this with https://github.com/apiaryio/dredd/issues/271?\nBTW I found also https://github.com/apiaryio/dredd/issues/269, where the architecture is discussed as well.. Thanks! \ud83d\udc4d I think this is very important confirmation of the issue and it should be getting attention together with polishing the hook handler API and hook handlers' integration test suite.. I'm very sorry we were not able to get back to this. It's a significant change, which needs some design work and a lot of tests to be completely sure it works as it should be and that we're not breaking something.\nI need to close this as we're going to work on #705 first, which requires having no pending Pull Requests. We'll get back to this proposal as soon as we're addressing the rest of the \"empty responses and binary files\" epic (the empty responses were implemented in https://github.com/apiaryio/dredd/pull/906).\nThanks for all the work! I'll do my best for this contribution not to be forgotten!. @bb010g I'm trying to revisit this and I'm struggling to reproduce the problem you had:\n\nRequest keeps on messing up higher bytes in some binary data I want to test in a hook.\n\nWould you be able to provide an example of such data so I can make it part of Dredd's test suite? I thought I'd be able to reproduce this with any binary data, but I wasn't successful with an arbitrary PNG image.. This is going to get resolved, tested, and documented in https://github.com/apiaryio/dredd/pull/1094. Thank you @bb010g for pointing the issue out, for trying to provide a solution, and for discussing the issue. It was really helpful!. It could! Basically, adding support for a new API description format goes like this...\nDredd consumes API Elements. It uses Fury.js to turn any API description format (currently API Blueprint and Swagger 2.0) into API Elements.\nTo produce API Elements for various formats, Fury.js uses adapters. So the first and the most important step to add support for RAML to Dredd would be to create an adapter for Fury, similar to the one for Swagger. The Fury.js maintainers (@apiaryio/adt) would definitely give a hand and advice to anyone who starts with this.\n\nNote: A scheme of Dredd's parsing stack is in https://github.com/apiaryio/dredd/issues/820, I'd be happy to re-draw it and add it to docs if there's someone who actually needs it.. @ChrisDillinger I'd say you need a knowledge of RAML, API Elements, and JavaScript.. Does this announcement change something? Does it still make sense to support RAML in Dredd?. @basavind Thanks for filing this! That's amazing bug report. I think the problem is in how drafter is processing MSON. In my opinion it's responsibility of the parser to recognize the duplication, warn user about it and to internally provide JSON Schema with just one occurrance of the field in required. @apiaryio/adt what do you think?. The drop in coverage is caused by \"statistics\". There's less lines in the transaction runner now, which means the uncovered part takes larger percentage of it. The drop is thus caused by Dredd consisting of less lines in overall, not by adding uncovered code:\n\n. Got verbal approval from @michalholasek of the coverage drop explanation, merging.. Addressed, thanks!. The same issue with coverage as in https://github.com/apiaryio/dredd/pull/843#issuecomment-321004610 \ud83d\ude15 . The coverage is confused, not sure why \ud83d\ude15 There are no changes in transaction runner in this PR, but it shows there's coverage drop in that file, recorded in the CI builds under this PR. That doesn't make any sense.. Another discovery by @abtris: https://oclif.io/. \ud83d\udc4d fixed \ud83d\ude1e . Failing in all builds:\n```\n  Babysitting Child Processes\n    when gracefully terminated by childProcess.signalTerm()\n      process without support for graceful termination\n        ...\nTypeError: Cannot read property 'indexOf' of undefined\n```\n. @hobofan This is wonderful. Thank you so much! I have to ping @w-vi as well, he'll be so happy \ud83d\ude04 Just yesterday we've been talking about this and the fact the API between Dredd and hooks really needs some love.. @w-vi I'm confused as well. IMHO hiccup on AppVeyor side. I have two ideas about this:\n\nYou could try to do empty --amend and force push to the branch to re-trigger CIs.\nGiven under https://github.com/apiaryio/dredd/pull/857, which I opened later, the AppVeyor works, and given this is just docs change, we could ignore this and just merge this.\n\nUp to you \ud83d\ude04 . Hi, this somehow slipped through my notifications \ud83d\ude40 I'm going to take a look at this right away.. @gellati Would you please share the relevant piece of your Swagger document here? The https://github.com/apiaryio/dredd/issues/460 and https://github.com/apiaryio/dredd/issues/481 issues might be relevant to this one, but they're talking about API Blueprint. I see from your dredd.yml that you're using ./kapa-api/kapa-api.yaml as your API description document, which would be Swagger, I believe. From the top of my head I'm not sure how this topic is handled in the Fury adapter for Swagger, so it would be best to have an example of what exactly you have defined in your description.. @gellati Any updates on this?. > Coverage remained the same at 96.147% \nThis does not address the thing I wanted to address \ud83d\ude15 . Hi, you are right! \ud83d\ude4c  The output doesn't help much. It's because the code for the reporting is there since the beginnings of Dredd and it did not catch up yet on many new features Dredd now has.\nWe have a proposal on how to revamp the output completely - #765. It would be awesome if you take a peek and drop your ideas there as well. I think what you propose here is a small change we can definitely do to improve the current situation \ud83d\udc4d . Thanks for the suggestion! Ideally, we wouldn't need this at all - see #705. However, if it helps you to hack on Dredd, then whatever works \ud83d\udc4d I tried it out and I think the command you want is\ncoffee -b -w -o lib/ src/\nUsually, it's possible to add extra params to npm scripts, like this:\nnpm run test -- -b\nThat would run underlying mocha with the -b parameter. However, this isn't possible in this case, since we need to change the parameters. Adding doesn't work, I tried. So the only solution to this would be adding an extra script. I suggest build:watch to keep it in line with the other names, it would be a special version of the build command. What do you think?\n@michalholasek What do you think? Would this help you to deal with CS as well?. Yes, but that's better solved by releasing a fix. One fix is already out, the other one will follow shortly.\nOn 18 Aug 2017, 17:03 +0200, Anthony Davis notifications@github.com, wrote:\n\n@antkazam commented on this pull request.\nIn package.json:\n\n@@ -35,7 +36,7 @@\n    \"coffee-script\": \"^1.12.5\",\n    \"colors\": \"^1.1.2\",\n    \"cross-spawn\": \"^5.0.1\",\n-    \"dredd-transactions\": \"^4.3.0\",\n+    \"dredd-transactions\": \"4.2.0\",\nSorry I thought I linked the issue. Currently the latest version of dredd-transactions has an issue introduced by one of its dependencies - apiaryio/dredd-transactions#93\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @antkazam I see all builds passing on the last commit. I guess you figured it out then? I'll get back shortly to do review.. Just a nitpick from looking at the commits, you may want to fix your git or GitHub email settings to have your authorship correctly associated:\n\n\n\nOnly noting for your own good, this by no means blocks the PR.. This needs to wait until https://github.com/apiaryio/dredd/issues/872 gets fixed. We need to release a fix in patch so it auto-propagates to installations the same way as did the bug. Adding a feature would close the way to auto-propagate by bumping the minor version number.. @antkazam Thanks for the PR! \ud83d\udc4d . Hi, thanks for reporting this! We're aware of this issue (tracked previously as https://github.com/apiaryio/dredd-transactions/issues/93) and the fix is on its way! \ud83d\ude8c \ud83d\udca8 . Hi @karpilin! Thanks for the report. This looks like a bug. Is this something what worked in previous Dredd versions?. Thanks! I'll look into it.. I was able to reproduce this. Working on tests and fixes in https://github.com/apiaryio/dredd-transactions/pull/98.. I'm sorry for the regression. https://github.com/apiaryio/dredd-transactions/pull/98 should soon fix the problem and since it's going to result in another patch version, the fix should automatically spread the same way as the problem did.. . @iamharish Yes please, this looks like a different issue. Please try to cut down a minimal example consistently reproducing the error - from the traceback I'm unable to see what could be the problem. Thanks!. @erinaceous Exactly as @kylef wrote. Does it solve your problem?. @erinaceous If you have any issues with this, feel free to continue here and we can re-open this if needed.. @runk If you have any issues with this, feel free to continue here and we can re-open this if needed.. Hi @ignaciolarranaga, first of all, thank you very much for the report! I was able to identify multiple problems.\n\nproduces/consumes other than application/json are not supported (yet). That's why in the expected section of the Dredd output, you can't even see the text/csv content-type header. This would be a feature request.\nI don't think Dredd correctly supports {\"type\":\"file\"} in the response (yet). Dredd uses JSON Schema to validate the response and this is a Swagger extension to the spec. Linking relevant docs (also mentioned in the Data Types section). Since this is something specific to a certain format, I think Dredd shouldn't be the one dealing with it. The Swagger adapter should take care of the specifics and pass on something which looks like raw HTTP request-response pair and which Dredd already understands - cc @apiaryio/adt This would be a feature request.\n\nThe output says Can't validate real media type 'text/plain' against expected media type 'application/schema+json', which doesn't make any sense. Dredd should handle the situation more gracefully and provide you with the information something you use isn't supported and cannot be tested. This is a bug in Dredd's user interface.. @jpjpjp Dredd can validate non-JSON payload when using API Blueprint. If the payload isn't JSON-like, the validation is done by comparing the payloads 1 to 1 as a plaintext.. @MikeRalphson Which one do you mean?\n\n\nreading YAML OpenAPI document (should be supported)\n\ncorrectly producing transactions with YAML media types (should work soon as plaintext comparison after fixing the bugs like this one)\n\nsmart validation of payloads with YAML media types in Gavel.js (how should this work? YAML converted to JSON and validated with JSON Schema?). @MikeRalphson Hmm. I think you're first to have such feature request. Would you be willing to file it on https://github.com/apiaryio/gavel.js/issues? Gavel.js is the validation engine Dredd uses under the hood. It is basically a tool, which takes an expected and real HTTP transactions and then provides a validation verdict.. Related: apiaryio/fury-adapter-swagger#143. As follow-up to https://github.com/apiaryio/dredd/issues/883#issuecomment-329151438:\n\n\nPartly resolved in current version of the Swagger adapter, but not completely. I filed https://github.com/apiaryio/fury-adapter-swagger/issues/145 for you. I don't think this is the problem causing the issue you have - basically it's duplicate to https://github.com/apiaryio/dredd/issues/553.\n\nI filed https://github.com/apiaryio/fury-adapter-swagger/issues/146 for you. I believe that's the main problem this bug report represents.\nI'm going to work on fixing that at once.. One thing is API using XML content types in its payloads. That should be definitely testable by Dredd.\n\nAnother thing is SOAP API. While in theory SOAP should be testable by Dredd, because it's still just plain old HTTP, I think the nature of SOAP API will make it very difficult with Dredd for you and I would personally advise against it. There are many other tools for working with SOAP APIs and checking their correctness.\nFrom the error you mention it seems Dredd is trying to validate the XML payload as JSON. Could you share the relevant part of your Swagger? If you want to skip the validation, check these docs.. @sajantha I tried to reproduce your issue, without success. Moreover, I think it's not related at all to the original issue. Following example is working for me correctly, npm test passes.\napp.js\n```js\nconst fs = require('fs');\nconst express = require('express');\nconst app = express()\napp.get('/foo', (req, res) => {\n  res.header('content-type', 'application/xml');\n  res.send(<xml>\n    <title>ugly SOAP XML</title>\n    <envelope>\n        <envelope>\n            <envelope>\n                <envelope>data</envelope>\n            </envelope>\n        </envelope>\n    </envelope>\n</xml>);\n});\napp.listen(3000, () =>\n  console.log('Listening on http://localhost:3000')\n)\n```\nhooks.js\n```js\nconst fs = require('fs');\nconst hooks = require('hooks');\nhooks.before('/foo > GET > 200', (transaction, done) => {\n  transaction.expected.body = fs.readFileSync('soap.xml', { encoding: 'utf-8' });\n  done();\n});\n```\nsoap.xml\nxml\n<xml>\n    <title>ugly SOAP XML</title>\n    <envelope>\n        <envelope>\n            <envelope>\n                <envelope>data</envelope>\n            </envelope>\n        </envelope>\n    </envelope>\n</xml>\npackage.json\njson\n{\n  \"name\": \"dredd-xml\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"dredd app.yaml http://localhost:3000 \\\"--server=node app.js\\\" --hookfiles=hooks.js\"\n  },\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"dredd\": \"^5.1.8\"\n  }\n}\napp.yaml\nyaml\nswagger: \"2.0\"\ninfo:\n  version: \"1.0\"\n  title: \"app.js API\"\nschemes:\n  - http\nproduces:\n  - application/xml; charset=utf-8\npaths:\n  /foo:\n    get:\n      responses:\n        200:\n          description: my SOAP response\n\nAs I mentioned, I wouldn't recommend testing SOAP API by Dredd. Even the example I posted tests the response as a plaintext, which means even change in the (insignificant) white space would break the build. That's probably not something you want to do. Since gavel.js does not support XML directly, you'd have to implement smarter comparison of the XML documents in the hooks yourself.\nIn case you want to continue discussing your topic, please file a separate issue. Thanks!. Note: The OpenAPI 2 adapter 0.21.0 introduces better support for file in HTTP requests, but it still doesn't seem to work well for HTTP responses.. Not \"easy to fix\" anymore due to #1053 . This isnt fully supported yet:\n\nhttps://github.com/apiaryio/fury-adapter-swagger/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20formdata\nhttps://github.com/apiaryio/dredd/issues/711\n\nThat's also why the docs are missing an equivalent Swagger example.\nSomeone would need to contribute support for multipart / form data / files to the Fury Swagger adapter.\nI'll close this as a duplicate of other issues here, but feel free to continue the discussion. Let us know if you would like to contribute - happy to provide details on what needs to be done.. Hi @johngluckmdsol! Thanks for using (or trying to use) Dredd, and for filing this issue. On the first sight I'd say this looks like a strange bug. There is no \"smart\" logic which should add properties. The problem needs investigation and we need to be able to reproduce the problem.\nRegarding the Open API 3.0, at the moment a clear decision is still pending in Apiary. Of course anyone can come and contribute the support at any time, and we'll be there to help them - see https://github.com/apiaryio/dredd/issues/837#issuecomment-320020909 Opening a separate issue dedicated to Open API 3.0 support is the least you can do to bring attention to the matter at this moment (there's none existing yet, AFAIK).. Thanks for noticing this! I think this is clearly a typo/mistake, which unfortunately bubbled up to the public interface. I think we should rename it to xunit everywhere (also everywhere in docs). For backward compatibility, we should accept junit as an option as well though, at least for some time.. This is a behavior of the Swagger Fury adapter. I personally do not like the behavior exactly for the reasons you wrote - in the context of Dredd, randomly generating or not generating optional properties makes the tests random as well.\nUnder the hood, the adapter uses json-schema-faker and IIRC previously I had some discussions on this topic with the @apiaryio/adt, but it always ended with \"this is how the faker does the generating\".\nAt the same time, it is strange to me Gavel gives you different results according to what's generated, because it should still validate according to the same schema from which the faked body comes from \ud83e\udd14 So with or without optional properties, the bodies should pass the schema.. @antkazam Could you share the whole API description? Or a minimal anonymized version of it, which still reproduces the behavior?. @antkazam Any updates on this?. Thanks very much for the PR! \ud83d\udc4d \ud83d\ude80 I'm sorry for the delay in response - there has been some vacations on our end. @michalholasek has been implementing this recently, so he'll take care of the review.. Thanks! The tests are indeed failing for a different reason than your PR. It's probably related to failing master in Dredd Transactions - https://github.com/apiaryio/dredd-transactions/pull/108#issuecomment-337252277 No fear! \ud83d\ude0e Special Judicial Squad member @michalholasek is on his mission to figure it out.. Default responses are ignored by Dredd (we didn't really figure out how to properly test them so the result would make sense). Dredd is looking for regular responses with status code.\nI see several issues:\n\nDocs probably do not mention at all default responses are not supported and tested. We need to make sure it's there. \u27a1\ufe0f docs bug\nDredd crashes as reported by @bagrat (thanks for the issue! \u2728) and that's definitely not nice. It should give a comprehensible error or warning and it should end gracefully \u27a1\ufe0f bug\nDredd ignores the default response. \u27a1\ufe0f feature request, solution design needed\n\nFor the last one, feel free to file a separate issue if there isn't an existing one. Let's track the first two in this issue.. We agreed assuming 200 on a single default response would be a good way to go. Also, I'm not sure, but Gavel.js might be able to validate the rest without status code provided - that needs exploration.. @bagrat This should be now fixed in v4.7.1. Would you mind to confirm it's okay now?. It looks like we fixed the problem with default response, but there is more of them in the Petstore example, so the title of this issue still holds \ud83d\ude42\nI think the easiest way to fix this would be to just put the Petstore to Dredd's integration tests and to make sure Dredd is able to deal with it. The main problem here is now auth, which Dredd doesn't support, but it should gracefully inform about that fact and it should skip it.\nThe preferred way to implement auth with Dredd at this moment is to use hooks, which is exactly what you do \ud83d\udc4d . Regarding the Open API 3.0, we plan to support it, the question is when and the answer is yet to be determined. Of course anyone can come and contribute the support at any time, and we'll be there to help them - see https://github.com/apiaryio/dredd/issues/837#issuecomment-320020909\nRelated issues: https://github.com/apiaryio/fury-adapter-swagger/issues/131. @tombevers @jonas-depop @JurRutten @veewee We understand this is a wanted feature, but next time please use GitHub Reactions to express your feelings. Thanks! \u2728 \nBy the way, one of the benefits is we can sort by the reactions:\n\n. Just to reiterate, adding support for a new API description format goes like this...\nDredd consumes API Elements. It uses Fury.js to turn any API description format (currently API Blueprint and Swagger 2.0) into API Elements.\nTo produce API Elements for various formats, Fury.js uses adapters. So the first and the most important step to add support for OpenAPI 3.0 to Dredd would be to create an adapter for Fury, similar to the one for Swagger. The Fury.js maintainers (@apiaryio/adt) would definitely give a hand and advice to anyone who starts with this.\n\nNote: A scheme of Dredd's parsing stack is in https://github.com/apiaryio/dredd/issues/820, I'd be happy to re-draw it and add it to docs if there's someone who actually needs it.\n. @joost @jcagarcia @jurgob @orontee I'm sorry, but this is not helpful. See https://github.com/apiaryio/dredd/issues/894#issuecomment-348152513 I'm going to lock this issue now.\nWe, as the team behind the Apiary tools, would like to start with the adapter very soon.\nIt has two phases. First we need the Fury adapter mentioned earlier, which is the responsibility of @apiaryio/adt. When the adapter is ready, @apiaryio/sjs (currently me) can start working on bringing the very desired OAS3 support to Dredd. The adapter is going to be a parallel repository to https://github.com/apiaryio/fury-adapter-swagger, possibly something like https://github.com/apiaryio/fury-adapter-oas3, so watch out for that and when we kick it off, don't be afraid to give us a hand to make it all faster. See https://github.com/apiaryio/dredd/issues/894#issuecomment-354987264 to understand and do not hesitate to contact us in other issues for help and guidance.\nThis should stay as a tracking issue of OAS3 support in Dredd. We do track this as the most important thing to be worked on, so there's no need to add more \ud83d\udc4d . We hear you.\nThanks!. The latest news about the adapter are under https://github.com/apiaryio/fury-adapter-swagger/issues/131#issuecomment-444849321. I'll keep updating this issue regarding support of OpenAPI 3 in Dredd specifically.. With https://github.com/apiaryio/dredd/pull/1214 Dredd has an experimental support for OpenAPI 3 now!\n\nPlease see the status page for the list of supported features. The support of OpenAPI 3 in Dredd is experimental, beta, early, you name it. It is everything but finished. However, it already works - see https://github.com/apiaryio/api-elements.js/issues/71 for examples. The OAS3 adapter is now developed publicly at the new api-elements.js monorepo and accepts contributions.\nI'd like to thank you all very much for waiting for so long. I'm very happy today Dredd is one very significant step closer to be again a great tool for everyone using API description documents as a source of truth for their APIs.. @realityking Thanks for the PR! \ud83d\ude80 I'm sorry for the delay in response - there has been some vacations on our end.\nThe problem with inquirer is that we do not have much tests for the interactive config logic. If you check the coverage, you can see even if tests were passing, it gives us little confidence to approve the upgrade:\n\nSo either the logic needs to be tried out manually to be sure nothing got broken (especially given the upgrade is 2 major and 2 minor versions) or we need to test it. Any help with that would be much appreciated.\n\nThe tests are indeed failing for a different reason - https://github.com/apiaryio/dredd/issues/892. It's probably related to failing master in Dredd Transactions - https://github.com/apiaryio/dredd-transactions/pull/108#issuecomment-337252277 Special Judicial Squad member @michalholasek is on his mission to figure it out.\n. @realityking I think it shouldn't be hard to go through it. It is isolated in the interactive-config.coffee file, and I can see only a couple of things to pay attention to:\n\nCheck the Inquirer's interface - inquirer.prompt(questions).then(callback) But since you tried it out and it worked, I guess that's okay.\nLook at the when: functions and see whether they need any changes.\n\nI didn't check the Inquirer's roadmap so I don't know if the breaking changes were due to dropping old Node support or whether they were actually changing something important. If you confirm you gave it a scan and you think it's all right, I'll merge this \ud83d\udc4d . Thanks! All looks good! Except for\n\nDrop support for Node < 4\n\nDredd still supports Node 4. We plan to support it until its maintenance end on 2018-04-01. However, it seems they dropped the support only because of their own maintenance convenience, not because they actually write code incompatible with Node 4. I'm willing to risk it. If it stops working, we can always pin/downgrade the version.. And looking into the CI config, the Node 4 version is even still there \ud83d\ude42 . !!! You are right \ud83d\ude04 . All CIs failed. There's something broken with the behavior of Dredd with Swagger.. This needs to wait for https://github.com/apiaryio/dredd-transactions/pull/118 and then it should be revisited.. Incorporated into https://github.com/apiaryio/dredd/pull/906.. To me this seems like a bug in Dredd Transactions we should fix. Probably this line:\ncoffee\nresponse.schema = schema if schema\n...should be\ncoffee\nresponse.schema = schema or {}\nWith API Blueprint, it cannot happen there is no schema, because either it's provided by the user, or the parser generates it. In Swagger when it is not provided by user, the parser leaves it blank.. @kylef What would be the final behavior of the Swagger adapter? I recall you thought of some changes after the latest updates. How exactly will the Swagger adapter process produces/consumes and non-JSON media types?\nLet's see what would be the ideal behavior for Dredd based on what the adapter will be doing. Then we should write some tests in Dredd Transactions to support the designed behavior and then let's implement it and release a final fix of the situation.. Related: https://github.com/apiaryio/fury-adapter-swagger/pull/143. I discovered this is most likely duplicate of https://github.com/apiaryio/dredd/issues/556 or its very close relative. I'm working on a fix.. Thanks! This definitely makes sense. node-mkdirp could help. Would you be willing to work on this?. Up to you, if you want to try it out \ud83d\ude04 I'm happy to assist. This is pretty much \"nice to have\" feature, although useful, so I can't promise we'll get to this very soon ourselves.\nThe x-unit reporter would need to create the directory prior to reporting to the file. Using the node-mkdirp package would be probably the most robust way to do so. This would need to happen in the emitter.on 'start' part, because the node-mkdirp needs a callback (it is asynchronous).\nOptionally, the other file reporters, such as markdown or html reporters would get similar treatment.. Very good job! \ud83e\udd47 . Looking at the commits, could you please:\n\nremove 7a94ba071b4cb071dced3afc80c8abc6806618ca\nreword e0829bc69ccc1ee6f2de325ec4781f444d14347e so it's prefixed with fix:? (fix: limit stack depth...)\n\nThanks! That should fix the failing tests and allow us to get this auto-released when merged.. Thanks for the report! I assume the screenshots are from the Apiary reporter. I see some Cyrillic in the JSON, so my first guess would be there are encoding issues. But let's try to debug this properly \ud83d\ude42 \nWould you be able to post here a simple (as simple as possible) API Blueprint or Swagger, which consistently reproduces the problem?\nOne more question - does this cause the actual validation to fail? Does Dredd testing pass with/without the --reporter=apiary?. Could you please provide the failing sample API description so I could reproduce it?\nBTW, by specification JSON is always UTF-8, so the charset is redundant, although many applications and frameworks add it by default. Regardless of that, it is definitely treated as UTF-8 in most places and definitely in all places in Dredd.\n\nHeader 'content-type' has value 'application/json; charset=utf-8' instead of 'application/json'\n\nThis is a valid error in case your backend uses application/json; charset=utf-8, but you have Content-Type specified as application/json in your API description and not as application/json; charset=utf-8.. Ah! I'm sorry, I didn't get this bit from the previous discussion. Hmmm \ud83e\udd14 Would you be able to fork & modify the dredd-example's server implementation in app.js so it fails in a similar way? E.g. the first response.. Windows builds get caught in an endless loop:\nerror: Command to start backend server process failed, exiting Dredd Error: Unable to forcefully terminate process 2336\n    at ChildProcess.<anonymous> (C:\\projects\\dredd\\src\\child-process.coffee:19:15)\n    at emitTwo (events.js:111:20)\n    at ChildProcess.emit (events.js:191:7)\n    at ChildProcess.cp.emit (C:\\projects\\dredd\\node_modules\\cross-spawn\\lib\\enoent.js:40:29)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:219:12)\nI don't have time to debug this right now, but this cannot be merged until this is resolved. I suspect one of the dependencies is causing the problem. It needs to be tried out by upgrading one-by-one.. I need to close this as we're going to work on #705 first, which requires having no pending Pull Requests. Let's get back to this later.. This is interesting. With newer npm versions it seems this is only issued as a warning, not as an error.. This is going to be solved with the next upgrade of Dredd Transactions in Dredd. There are some changes we want to add before upgrading, so although in Dredd Transactions this is fixed, it still may take some time before it gets to Dredd.. @bunchesofdonald This should be now fixed in v4.7.1. Would you mind to confirm it's okay now?. @michalholasek I'm thinking maybe some of the regression tests I've been writing as the first ones are now superseded by normal integration tests I wrote later on. Also, some could become normal integration tests, instead of regression tests. Up to you. Also, we can do it as a next step, if you think it's a good idea.. Regarding blank lines, that's fight topic \ud83d\ude0f Airbnb doesn't say anything about them, so I'm free to choose. And I chose to follow this:\n\nSurround top-level function and class definitions with two blank lines.\nMethod definitions inside a class are surrounded by a single blank line.. I added 5a436ff with beforeEach -> before in the affected integration and most regression tests. There was one regression test which looked like it's one of the older ones, so I rather didn't touch that one \ud83d\udc40 . I'm afraid we have a little blocker here: https://github.com/substack/node-mkdirp/pull/138. I'm sorry I suggested mkdirp in the beginning. I should have inspect the quality of the package first and not to suggest the first thing npm search offered me.\n\nI think make-dir should be fine, fs-extra as well. The latter includes many common utilities we could use in Dredd in other places as well - especially in the ./scripts, which we would like to eventually keep in form of JavaScript rather than bash, for Windows compatibility. @michalholasek which one would you prefer? Do you think fs-extra is a smarter choice in this case? I've seen you already using rimraf somewhere.. When this gets merged, we should create a new issue \"Remove junit from codebase\" so we don't forget about it. It could be easily done together with the next major version.. This may be more complicated problem then it seems. Glob means we have no idea how many files were supposed to be loaded. We can probably assume the user wanted Dredd to load 1 or more files. Also, loading hook files has probably the same issues.\nI suggest we make sure (= write tests) that for each given path, if the path evaluates to zero files, Dredd ends with an error. And I suggest we do this for both the first argument (API description file), the --path option, and the --hookfiles option.. @samekmichal Hi! Would you please share how your hook file looks like?. I agree the developer experience could be better.. This issue has no traction and I think Dredd has better things to do. Feel free to comment and prompt re-opening if you find this issue and have answers to any of the questions above.. I would be quite cautious exposing the whole options, but from the description I understand you need it primarily for testing an API with complex SSL setup - certs, keys, etc. This would be related to https://github.com/apiaryio/dredd/issues/323. Let me rename your issue to \"Support SSL certificates\".. I think I'll solve the problem in a different way - 2e74abc, but thanks for pointing out this is a problematic part for the reader. Feedback on broken docs is always very valuable! \ud83d\udc4d . @jdcrecur Would you mind reading the new docs and letting me know if it's better now?\n\nhttps://dredd.readthedocs.io/en/latest/how-it-works.html#choosing-http-transactions\nhttps://dredd.readthedocs.io/en/latest/how-to-guides.html#multiple-requests-and-responses. It should be provided by the global stash object, see docs. Hi, this is a duplicate of https://github.com/apiaryio/dredd/issues/905 and I believe it will be resolved soon by https://github.com/apiaryio/dredd/pull/906, which I'm currently working on. Bear with us! \ud83d\udc3b . @Simo72 This should be now fixed in v4.7.1. Would you mind to confirm it's okay now?. @stipsan These are awesome ideas! In https://github.com/apiaryio/dredd/issues/765, we thought about supporting TAP (see also this). That would allow people to easily extend Dredd with any reporter they like, and it would allow us to completely remove some of the built in reporters.\n\nDo you think that would solve your issues? Is TAP protocol powerful enough to support everything you would need to implement the reporters you mentioned?. Great! Thanks, this validates the thoughts we had about TAP \ud83d\ude42 . It looks like there are some issues with compiling the native API Blueprint parser Dredd includes. See Why I\u2019m Seeing node-gyp or python Errors? in the Dredd docs.\nWhen the compilation fails, npm should skip it and Dredd should use the JavaScript version of the parser. I'm not sure why npm didn't skip the compilation in your case - maybe the errors were so fatal they brought down npm as well. Would you mind using npm install -g dredd --no-optional instead to completely avoid the compilation?. @naumanbasheer Any updates on this?. @kratz74 Did npm install -g dredd --no-optional work for you?. An official and up-to-date Docker image is now available at apiaryio/dredd-docker. Please check it out and let me know if it works for you. Thanks!. Thanks!. Travis fails to install Node 6 \ud83e\udd14 . Hi, sorry for the late response, vacations stepped in. Could you please share your swagger.yml and point out the problematic parts? Thanks!. I suspect this could be caused by the behavior of the swagger adapter. It generates body examples in a way it randomly omits properties which are not required etc.\nHowever, looking at the Swagger file you provided I'm not able to figure out why the adapter should decide to omit the AdditionalTransInfo part in this case. This needs more investigation by either me or @kylef.. Thanks! This is something related to issues with the transaction object duality (transaction vs transaction.test) and with the revamp of the CLI reporter proposed in #765. However, both are rather big areas to tackle, so if someone sends a PR with a hot fix, it would be warmly welcomed \ud83d\ude42 . Thanks! \ud83d\ude80 . @pksunkara Does it add new functionality?. According to changelogs, it's mostly just compatibility changes. According to semantic versioning, such change doesn't deserve minor bump. It's not a feature, it's merely refactoring or fix.. @jceplaras @alejandropg Amazing job, thanks for the contributions! I just switched the library and I think we're good to get this merged \ud83d\ude80 I'm sorry it took us so long.. Could you give us an idea of how the /2.0/task_assignments definition looks like and how the hooks look like?. Also, how did you pin the Dredd version? Using strict 4.4.0, loose ^4.4.0, using shrinkwrap, ...?. @iamharish Is it possible your API description is rather large? Seems like similar issue to https://github.com/apiaryio/dredd/issues/957.. Nope I didn't have time yet to reproduce this. Full stack trace would help to localize the problem, at least whether it's in dredd-transactions (which would indicate the issue is in minim or in how we use it) or in dredd itself.. @juliengerboud Hi, I'm sorry! This had to slip through our radars, somehow. Let us check what could be the issue.. So the issue can be either in the Swagger adapter (cc @kylef) or in Dredd. We need to figure out that one first. Also, I'm wondering whether https://github.com/apiaryio/fury-adapter-swagger/issues/99 isn't related to this, somehow.\n  . Hi, thanks for the contribution! However, we're just in the process of migrating the whole project from CoffeeScript to JavaScript - #705, so ideally this would wait after that's done. CoffeeScript is still necessary as a dependency, because it's supported as a first-class citizen in JS hooks, but I would rather separate those two changes (language migration & package migration).. @polc Would you mind to rebase this with current master? We're JavaScript now! \ud83c\udf89 https://github.com/apiaryio/dredd/issues/705#issuecomment-363105927. @michalholasek relying on #705 to address this, sooner or later \ud83d\ude0f . @michalholasek If you like the changes, leaving up to you whether you want to merge this now or cherry-pick the commits at the end of your decaff PR and merge those together when the thing is ready.. @michalholasek It is a breaking change:\n\n. @yyamano Thanks for the work, I think this is worth a PR, but we need to finish #705 first. So let's wait a bit until that one is done (currently in progress).. @mlambley Please check out the execution life cycle in the docs. If you want to prevent the HTTP request from happening, you should be using \"before(Each)\" instead of \"before(Each)Validation\".. Thanks for reporting this!. @kylef \n\nThe property example is used to describe a parameter example value in OAS 2.\n\nSince when? I don't believe that's true. There is a reason we have x-example.. OK, let's leave this closed. It's one year old \ud83d\ude1e If the issue was (also) in interpreting 0 as false, I'm aware of that and I have other issues to track that.. Hi, there are hundreds of references to Swagger throughout the docs, so if we want to change it, let's change it everywhere.\nI'm wondering whether we want to do this at all, but I'm open to discussion. My thoughts: the format is still very well known and searched for as \"Swagger\". I'm aware of the renaming, but so far I decided to go with the naming like this:\n\nReference the 2.0 version of the format consistently as Swagger\nReference the 3.0 version of the format consistently as OpenAPI\n\nThe latter isn't in effect as #894 isn't done yet. When Dredd supports both, I'd call the formats Swagger 2.0 and OpenAPI 3.0, to clearly distinguish them. What do you think?. Hi, thanks again for bringing it up. I filed a separate issue for discussing this: https://github.com/apiaryio/dredd/issues/994. Hi, this is a known issue tracked in https://github.com/apiaryio/dredd/issues/913 / https://github.com/apiaryio/dredd/issues/323.. Hi, wouldn't the built-in dot reporter combined with html/apiary reporter solve your issue?. . @znevrly Why would you want to do that? I can't see benefit in testing erroneous API description file. Also, some errors prevent Dredd to be able to run the tests at all. Would you try to better explain what exactly you want to achieve?. Ha! Now that sounds way more reasonable. In that case, I'd probably propose Dredd to allow additional properties and at worst to just report them in warnings as unsupported/ignored. This would need to be implemented in the Swagger adapter though. @kylef, what do you think about this?. IMHO this is resolved then.. Thanks for reporting this. The skip feature is pending a redesign. We should have large API description documents in mind as well. I'm wondering what other features of Dredd blow up with documents as large as 5100 lines \ud83d\ude10 . @spawnia Thanks! This is something I've met previously as well. But it looks like I forgot to file an issue. This is an important bug we need to resolve once we're revamping the config.. Yup, we should revamp how the JS hooks work. I would like them to work similar to tests in Mocha - if you pass callback, it's called, otherwise a promise is returned.. Hi, thanks for the issue! I'm sorry for not being responsive, it had to slip through my radar. This would indeed make the experience more smooth, so \ud83d\udc4d However, I think this is almost the same story as in https://github.com/apiaryio/dredd/issues/366, so I'm going to close this issue as a duplicate. Also note this workaround - https://github.com/apiaryio/dredd/issues/366#issuecomment-258211867. Thanks! This is definitely a good idea. It will take me some time to check licensing etc. of the packages, will track the progress here:\n\n[x] async@2.6.0\n[x] chai@4.1.2\n[x] cross-spawn@5.1.0\n[x] glob@7.1.2\n[x] js-yaml@3.10.0\n[x] markdown-it@8.4.1\n[x] proxyquire@1.8.0\n[x] uuid@3.2.1\n[x] which@1.3.0\n[ ] winston@2.4.0 - depending on cycle@1.0.3, which is Public Domain, which is not pre-approved in Oracle (unlike The Unlicense) and needs to be checked by lawyers first\n[ ] eslint-config-airbnb-base@11.3.0 - https://github.com/airbnb/javascript/issues/1744. @realityking I think once the eslint-config-airbnb-base is sorted, we're good to go, but without winston for now. With regard to #765 and the long-term intention to replace winston with something like debug I'm honestly a bit lazy to proceed with the upgrade internally right now.. > I'm happy to split this into another PR\n\nLet's wait just a little bit, my hunch would be this one could get resolved in a timely manner. It's Airbnb, they could care about licensing \ud83d\ude04 . @ljharb Thanks! \ud83d\udc4d I answered to your comment under airbnb/javascript#1746.. @ljharb I'm sorry, but it seems the interpretation may differ from lawyer to lawyer. In that case, I may have the bad luck of having stricter lawyers behind my back. They require me to have only dependencies with copyright notice including a copyright holder and with a full license text.\nVast majority of projects I've seen on npm or elsewhere just include the full license text, even the smallest ones. (Probably thanks to GitHub, which puts you the license file into the repo from the very beginning.) Observing that, I have no particular reason to fight our lawyers and persuade them that three letters are enough. I've seen myself projects using MIT licenses, but with their license wording being slightly different. I've seen MIT in package.json and a completely different license text or dual licensing in the LICENSE file. It can be quite a mess. So I suppose this is mostly defensiveness and just being 100% sure what were the intentions of the project author.\nI'm happy to go and contribute licenses anywhere where they're missing or file issues for discrepancies, because licenses are important, it's the main glue of the FOSS.\nThat said, we started to properly care about licenses just about recently and any dependencies we're already using previously are a priori pardoned. So when talking about removing eslint-config-airbnb from this PR, it's just about not upgrading its version yet, not removing the dependency from the project \ud83d\ude42 (cc @realityking ). @realityking btw I'm sorry for the failing Windows builds, they got very flaky recently. I plan to focus on fixing them, but until that time I'll keep retrying the builds for you \ud83d\ude15 . Ha, I haven't noticed it's classified as chore:. If it was feat: or fix:, it gets autoreleased. Hmm.... Yeah, I think fix fits better. Maybe I can find time to do upgrades on Dredd Transactions and to release a new Dredd with those propagated.. Decided not to block on DT or other PRs, this resolves the issue: https://github.com/apiaryio/dredd/pull/980. @michalholasek #969 does a lot of (good!) things, let's do this first as a hotfix.. This is amazing! Thanks so much. I hope the eslint-config-airbnb-base gets released soon so this PR won't get outdated or won't get merge conflicts.. BTW it looks like there are still some leftovers - the Travis build fails rightfully, on linter.\n\ncli-test.js\n336:179  error    new Buffer() is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead  no-buffer-constructor. Unfortunately blocked by https://github.com/apiaryio/dredd/issues/1047, https://github.com/apiaryio/dredd/issues/1046, https://github.com/apiaryio/dredd/issues/1045.. Yup.. @realityking I'm sorry, I had vacation, hence the delay. I'll re-check, but recently I did some re-checks because we resolved a lot of dependencies and I think ESlint is still problematic. We're currently hunting down a lot of this stuff, but dev dependencies have lower priority.. I think you could use the beforeAll hook for that. It takes a list of transactions and it's up to you how you modify the list before the Dredd testing starts. Would that work for you?. Closing in favor of https://github.com/apiaryio/dredd/issues/995. Hi, this is described in the docs as the Making Dredd Validation Stricter section. Would the suggestions in the section solve this for you?. It is a sort of limitation/feature of the API description format. The transaction object you get in the hooks has transaction.expected.bodySchema, where you can find the JSON Schema. In a beforeAll or beforeEach hook, you could go and make the schema stricter by appending \"additionalProperties\": false (ref) wherever you like (recursively?).. I don't know about anything from the top of my head, but try to check out the examples in the sanitation docs.. You're welcome! Thank you for using Dredd!. @realityking Just did :). > if configuration.options.user is a number\n\nCan we just always coerce it to a string in the configuration?. Thanks!. This change makes the Windows builds to run indefinitely. Needs more investigation.. This PR is a bit of a mess as I used it for trying out several versions and to basically debug the issues. Let's close it and keep https://github.com/apiaryio/dredd/issues/1088 as the tracking issue.. Thank you! Just a missing prefix in the commit message - docs:, which allows us to auto-release Dredd after each merged commit. I corrected it for you in https://github.com/apiaryio/dredd/pull/988. @realityking I don't think so. There are various license issues, which need to be resolved etc. Internally I'm working on speeding up accepting pull requests like this one, and on generally improving the situation so this is at least transparent and automated. Thanks for the patience. . I created a new label called \"licensing\" with individual issues featuring details to each of the dependencies. While I'm very grateful for your work, I'm going to close this now and let's sort it out one by one, as you suggested originally. I'll upgrade all dependencies without issues myself as soon as possible.. @realityking Thanks! I retried the build yesterday and it passed. It's flaky.. Read Choosing the right format in the Apiary Help. Regarding Dredd specifically, I don't think there are many \"superpowers\" on top of the basic differences between the formats:\n\nMarkdown vs YAML/JSON\nhuman vs machine\nrequest-response HTTP vs custom structures\nMSON/JSON/JSON Schema vs JSON/JSON Schema\ndesign first vs code generation\n\nAt this moment, for historical reasons there are certain limitations / behavior regarding multiple responses: Choosing HTTP Transactions. Otherwise the formats should work the same.. @frankandrobot Does this answer your question?. Amazing, thanks! \ud83d\udc4d  The CoffeeScript files used to be linted by coffeelint, but it has been removed.. I suggest we use:\n\nOAS2, oas2, OpenAPI 2, openapi2, with optional \"fka Swagger\" added\nOAS3, oas3, OpenAPI 3, openapi3\n\nI already employed this at https://github.com/apiaryio/dredd-example#api-description-examples. Yes, that's the case and it's good to have it in mind. This issue was primarily about docs, README, etc.. But it is a validation they're using openapi themselves as an identifier for the format. I'd just attach the number in my identifiers (variables, etc.).. Implementing a global flag for this wouldn't be straightforward, as this is something specific to each format and your usage of the format. In both API Blueprint and Swagger you can write your own JSON Schema - see docs. Dredd just takes whatever JSON Schema it gets and validates against it.. This could be problematic as often you test different APIs (production, staging, development) with the same document. The host is \"environment\", which can change easily. Surely Dredd could pick up the default value from the API description document - the API Elements provide the value. However, is it really so useful? If people just run Dredd without specifying host and it defaults to testing production, isn't it possibly harmful / leading to mistakes? (Consider Dredd testing of POST/DELETE/etc. or with hooks, which could affect the API state.). I don't think we want to do this for the reasons I wrote in my previous comment. I'm open to a discussion though and happy to re-open this issue in the future.. This is interesting. What is the output of running Dredd with --names when you try it on your Swagger files with and without tags?. I suspect this is a problem in the underlying toolchain for parsing the Swagger. @apiaryio/adt, are you aware of any special treatment tags would get? From the output @VaN-dev shares it looks like they behave like resource groups or something like that. Is that an expected behavior? . Isn't it a misinterpretation of the tags feature?. @VaN-dev So it seems when you use tags, they put the resources into logical groups. This affects the \"transaction paths\" used in Dredd hooks to address requests. If you update the \"transaction paths\" in hooks to reflect the output of dredd --names, everything should work as expected.\nFollow-up discussion could be whether tags should be interpreted this way (up to @apiaryio/adt and the Swagger adapter project), or whether resource groups should appear in the paths at all (IMHO they should not and their planned redesign in #227 should have that in mind).\nPlease let us know if the solution works for you.. I agree. I think this really is related to #227 than anything else then.. I don't think this is specific to you, because you followed the instructions in Dredd docs and those brought you to a broken situation. That means the instructions are broken.. Thanks for reporting this! This is definitely an issue worth reporting here. Let's see what we can do. I think the reporting API as it's designed now has the flaw that Dredd reports to it step by step. First it reports it started with testing, then the steps, then the result. I suspect the issue you are talking about is caused by the fact the result gets never reported to Apiary and on the Apiary side there is no cutoff time, which would close the reports as \"unfinished\".\nBTW Dredd should support overriding CLI arguments, only the document and server parts cannot be overriden: https://github.com/apiaryio/dredd/issues/455#issuecomment-218673919. Thanks! It might take us a while to go through this. First let's get the Windows build passing - just needs retries, we have some flaky tests \ud83d\ude1e . @pksunkara I'd be interested in what is exactly the use case, because if we need this, I think there's more stuff wrong with Dredd's output. I've been delaying this because I wanted to revisit #765 until the end of this year.. Hi! That depends on the API description format you are using - API Blueprint or Swagger. Some (hopefully) relevant pointers to the docs:\n\nChoosing HTTP Transactions\nMultiple Requests and Responses. And do the points solve your problem? :-). Would something like this work for you?\n\nyaml\nswagger: '2.0'\ninfo:\n  title: \"My API\"\n  version: '1.0'\nproduces:\n  - application/json; charset=utf-8\npaths:\n  '/task/123':\n    get:\n      responses:\n        200:\n          description: 'Task exists'\n          examples:\n            application/json; charset=utf-8:\n              test: 'Task #123: wash dishes'\n  '/task/4321':\n    get:\n      responses:\n        404:\n          description: 'Task does not exist'\n          examples:\n            application/json; charset=utf-8:\n              test: 'Task #4321 does not exist'. @WldmrSbrt Did it solve your issue?. This would be a limitation of the API description format. I don't think this is possible with Swagger at this moment. Look at using $ref, could help you to make the document DRY.. You are right, Dredd does not support proxy for testing. It supports proxy for reporting, i.e. --reporter=apiary, and fetching the API description document from URL address, i.e. dredd http://example.com/apiary.apib http://localhost:3000.\n\nFor corporate users, it may be good to have an option which enable proxy.\n\nI understand corporate users often live behind a proxy, but the paragraph you quoted still holds.\nWhen you test through proxy, you are testing the proxy instead of the API, and the test results become irrelevant. Imagine you have some headers in your specification, Dredd sends them, but the proxy strips them on the way. The request fails, although both Dredd and your API are fine. False negative, very hard to debug.\nWorse example - imagine the proxy adds something, which accidentally makes your API compliant with the spec. Tests pass and you may think everything is fine. You deploy the API to production and make it public, with no proxy, and it won't work as intended. False positive. The whole purpose of Dredd gets beaten.\nI'm fine leaving this issue open - let's discuss the topic, I can be missing something. But I'm yet to hear about a good way how to overcome the problem mentioned in the documentation.. I am willing to think about a solution where the user is allowed to use proxy for testing, but Dredd's output shows a clear warning/disclaimer that using the proxy means testing the proxy itself, not the target API. Then it's up to the user whether they accept the risks or whether they know what they're doing.. @erajkovic I'm glad you could get it working! And yes, beware running Dredd against live API instances \ud83d\ude42 . >\u00a0I am willing to think about a solution where the user is allowed to use proxy for testing, but Dredd's output shows a clear warning/disclaimer that using the proxy means testing the proxy itself, not the target API. Then it's up to the user whether they accept the risks or whether they know what they're doing.\nI propose this as a solution to the problem. This isn't a priority issue though - I invite everyone interested in getting this implemented to add reaction to the original post so your desire to use this is visible for us.\n\n. The protagonist installation failure is okay. It is an optional dependency and it gets skipped.\nThe installation fails on this:\n```\n\njsonpath@1.0.0 postinstall /usr/lib/node_modules/dredd/node_modules/jsonpath\nnode lib/aesprim.js > generated/aesprim-browser.js\n```\n\nWould you mind to help with debugging why exactly the line node lib/aesprim.js > generated/aesprim-browser.js fails to execute?. @wideklev Any updates on this?. There is a dedicated Docker image now: https://github.com/apiaryio/dredd-docker. The URI Template syntax limitations are specified by the RFC6570. I agree though that Apiary and Dredd should be consistent in what URI Templates they consider as valid or erroneous. This needs verification.. @kylef Thanks for the investigation! At first sight, it seems like apiaryio/uritemplate-js or whatever is used, should take care of it (cc @char0n). However, your second thought mentions double encoding and that could be a real problem... \ud83e\udd14 . I think that's a tricky question, because \"/{set name}\" may not be a valid URI Template according to the RFC, but could be treated as valid by the Swagger tooling, thus being a valid part of a Swagger document.\nI think the parser should not escape the parameters. In fact, I think it should unescape them in case user provides them escaped (if that's even deterministic task). Then the URI Template parsing library should unescape the parameters in the template. In that case, the result is Dredd or any other tooling ends up comparing unescaped values, which is IMHO correct, because the escaping is just an implementation detail of the URI or URI Template spec, while parameters are something going beyond the URI space, especially in Swagger.. I am afraid this needs more investigation and is generally a part of the whole URI parameters epic.. One more thing - could you please modify the commit so it is prefixed with docs:?\ndiff\n- Modifying Multipart Transaction Request Body Prior to Execution Example\n+ docs: add example of modifying multipart transaction request body prior to execution\nDredd uses Semantic Release to automate releases, so the commit message format, especially the prefixes, matter.. Oh. The commit message I suggested is too long, the linter complains \ud83d\ude1e I'll fix this, don't worry. The example is awesome and useful.. Does dredd https://gitlab.<my-company>.com/<path-to-docs>/public.apib https://<my-api>.apiary-mock.com/ work for you? Fetching from URL should work.\nCould you put a dummy blueprint file on GitLab the same way and post it here so we could inspect how exactly GitLab serves the file, which headers, etc.?. I went to the GitLab page representing the file and clicked the Open raw icon in the top right. I got following address pointing at the raw document:\nhttps://gitlab.com/Voyku/apib-dredd/raw/master/api-description.apib\nI was then able to successfully run Dredd without dredd.yml like this:\ndredd https://gitlab.com/Voyku/apib-dredd/raw/master/api-description.apib http://localhost:5000\nThen I tried to modify dredd.yml to contain following and I was able to successfully run Dredd as well:\nyaml\n...\nblueprint: 'https://gitlab.com/Voyku/apib-dredd/raw/master/api-description.apib'\nendpoint: 'http://localhost:5000'\n.... This won't work, because the link forwards to GitLab sign in page. Dredd effectively downloads the sign in page and tries to use its HTML as the API description document. You would have to figure out how to get a public link of the private file, which I'm not sure is possible with GitLab. Try to ask around GitLab support channels.\nAnother option would be to wrap Dredd into a bash script, in which you first use git to fetch the file and then run Dredd with the up-to-date local file.\nIf you use Apiary, you could also use the Apiary CLI to fetch the API description document prior to running Dredd. Of course, that wouldn't be needed in case https://github.com/apiaryio/dredd/issues/366 is fixed.\nI'm closing this as I believe this isn't an issue with Dredd itself anymore. As mentioned, https://github.com/apiaryio/dredd/issues/366 would solve it for Apiary, otherwise I don't think Dredd should support fetching the file directly from random code hosting services like GitHub, GitLab, BitBucket, etc. You should make Dredd a direct part of your project life cycle by using it in CI.. The latest Dredd should not have this issue anymore. Please report back and let's reopen this if it's still a problem! Thanks!. This is already the case (or at least should be) in the Apiary Console, where the missing values get inferred from the parameter names. It never occurred to me Dredd could do the same. I think it's actually a pretty good idea!\nI'm just wondering whether this would be responsibility of the Fury adapters (since the Swagger adapter already infers whole body examples in case they're missing) or of the API Elements tooling (Dredd). What do you think, @apiaryio/adt?. Things, which I'm not completely sure about:\n\nRequired URI parameter 'id' has no example or default value means there is any kind of value missing in the original document. Dredd could use the parameter name by default, but is it useful? E.g. in this particular case, is it useful for Dredd to go with id if the value should be numerical? The test will probably fail again, but the user gets confused on why it fails.\nAmbiguous URI parameter in template means there is no spec about the parameter in the API description document. Dredd doesn't know anything about it, nor does the user of the API. Looks like a genuine error for testing to me. Yes, it doesn't error when generating docs in Apiary, because it's possible to generate incomplete docs. Again, Dredd could fill the gap with id, but isn't it just postponing the failure one step further and obfuscating the root cause? Because if the service awaits anything else than string, this is going to fail anyway, as in the previous case.\n\nOpinions?. Dredd is designed to verify whether the API correctly follows the API description in the description document, in the development phase of the API. Running Dredd gives you yes/no answer to the question whether the API can go to production.\nThe testing step is meant to be done before deployment, so the target server is supposed to be a development version of the application, either on your local machine, or your continuous integration server, possibly with some fixtures and without any risk of causing harm by non-idempotent requests.\nThe intention is usually to get the API description document into shape when it describes real requests and then to verify whether the API responds correctly to such requests. Using Dredd to check production-deployed APIs isn't really a common use case, I believe. It could probably make some sense as a smoke test, with Dredd hooks limiting the testing only to specific endpoints or methods... \ud83e\udd14 \nIf I read you correctly, your use case is more about getting Dredd running without touching the original API description document, possibly testing just a few endpoints and getting \"expected\" errors when the tests could modify the server state (POST, DELETE, etc.). With unspecified parameters defaulting to dummy values, also getting 404 errors on GET endpoints. But how is it useful? What questions can be answered by such tests?\nThe errors we're discussing here is a way for Dredd to say: \"I don't have enough information to perform useful tests.\" I guess one option would be to skip such endpoints with a warning, and to test the rest, instead of halting at once.\nAfter initial cheer, I'm now doubting whether default dummy parameter values are something aligned with the Dredd's original idea.. @erajkovic, I'm glad you opened the broader topic of testing production by this issue. I created this \"meta\" issue to discuss how Dredd should approach that: https://github.com/apiaryio/dredd/issues/1103. You could do this:\nyaml\nreporter: [xunit, apiary]\n...\noutput: [./report.xml]\n...\nDoes it work for you?. The only way which comes to my mind is to override the output every time:\n$ dredd \"--output=report-$(date +%s).xml\"\nThis way the output file defaults to report.xml (specified in dredd.yml), but every time you execute Dredd with argument --output=report-$(date +%s).xml Bash calculates a timestamp for you and something like report-1526386009.xml will be used as a name for the output file.. @KonstantinxVx Would something like that fulfill your requirements?. Hi @erajkovic, if I understand the issue correctly, does it mean that a user reporting tests with apiaryApiKey and apiaryApiName is presented with a link to https://app.apiary.io/public/tests/... instead of https://app.apiary.io/{apiaryApiName}/tests/...?. In case one uses --reporter=apiary, Dredd looks for the apiaryApiKey and apiaryApiName configuration values. If Dredd fails to find values for those, it prints following warning in the beginning of the CLI output:\nwarn:\nApiary API Key or API Project Subdomain were not provided.\nConfigure Dredd to be able to save test reports alongside your Apiary API project:\nhttps://dredd.readthedocs.io/en/latest/how-to-guides/#using-apiary-reporter-and-apiary-tests\nThen I can see public link at the end of the output:\nhttps://app.apiary.io/public/tests/run/...\nIf the configuration is in place (e.g. by adding -j apiaryApiKey:abcd... -j apiaryApiName:gargamel), the warning is gone and I can see correct link at the end of the output:\nhttps://app.apiary.io/gargamel/tests/run/.... @erajkovic Is this still happening to you? Were you able to resolve the issue or to discover the root cause?. I retried the Windows build two times already... a different flaky test \ud83d\ude44 As soon as you get it passing, feel free to merge.. cc @ddelnano, I believe this typo could have propagate through multiple docs files.. Oh, okay then. Thanks for verifying!. @acy76 Thank you very much! The failing test is unrelated and has been fixed meanwhile. I apologize for the delay.. @pksunkara I think this won't pass, because as far as I remember updating Mocha on Dredd gets the Windows builds running forever, for some reason \ud83d\ude1e . Thanks! This is definitely a flaw of the UI. When one runs Dredd with --reporter=apiary, there is a direct link to that particular test run printed to the console. However, later on the user has no way to get the permalink from the UI and cannot share the URL with anyone, unless they write down the link Dredd had printed.\n@tjerabek Do you have an idea how to improve the current UI? One way would be to make each test run a permalink itself by modifying URL when clicking on them. Another way would be to add a share button/URL field to each test run, with the URL pointing to the separate page each test run currently has.. Hi, thanks for the issue! Dredd is designed to not to follow redirects, intentionally. See previous discussion here: https://github.com/apiaryio/dredd/issues/795#issuecomment-337818031\nI take this issue as a feature request and I'd be happy to discuss the use cases when this is useful under this issue.. Oh! You're fast \ud83d\ude04 I already created https://github.com/apiaryio/dredd/pull/1028. It seems the new Gavel causes Dredd tests to fail for some reason. I need to investigate on why is that.. It's back \ud83d\ude1e . How do you specify the bodies in your Swagger document? As examples or as schemes?. Hmm \ud83e\udd14 Are you sure you don't specify required anywhere? Dredd (or, more precisely, Gavel) follows whatever is in your schema. If you do not specify required anywhere, it should not require the properties to be present.. \ud83d\ude04 no problem. So, does it work for you now?. Thank you for filing this! The code responsible for this part is here. The issue is that\n./build/My Very Long Spaced File Name\nis not recognizable from e.g.\nnode ./build/server.js 5000\nso spawn-args parses it as a command ./build/My and its arguments. I believe there is no automatic solution to your problem. You need to give spawn-args a clue on how to parse the input, the same way you would need to do on command line:\n\"./build/My Very Long Spaced File Name\"\nDoes\nyaml\ndry-run: null\nhookfiles: null\nsandbox: false\nserver: '\"./build/My Very Long Spaced File Name\"'\nserver-wait: 10\ninit: false\n...\nwork for you?. @asmodehn Any updates on this?. Great, thanks!. Would it work for you to specify example value instead of default value? Swagger 2.0 doesn't really support example values for request parameters, but we do: x-example\nFor path parameters, Dredd needs to know what to put into the URL, otherwise it wouldn't be able to test the endpoint. Any value is good enough for this - default or example.. You're welcome! \ud83d\ude42 . Got this on Travis:\n1) Respecting \u2018no_proxy\u2019 Environment Variable Using Apiary Reporter \"before each\" hook for \"requests the server with regular HTTP method\":\n     Error: timeout of 120000ms exceeded. Ensure the done() callback is being called in this test.\nTrying retrying \u267b\ufe0f . It passed \ud83d\ude15 Hopefully it was just a hiccup of the universe and not another flaky test.. This is being worked on in https://github.com/babel/babel/pull/8524, we're only waiting for a release. Another approach would be to upgrade to Babel 7.. @kylef It was designed the way it is now because we wanted to prepare Dredd for browser support and to run Dredd in browsers. Currently I can't imagine we'd focus on this in short-to-mid term, so I'd be inclined to accept PRs removing these dependencies from the chain for now and re-introducing them once they're really needed.\nDredd doesn't use import and other more advanced stuff, because it does funky stuff with requires and the migration was just too hard to achieve during the decaff itself.. This is being worked on in https://github.com/babel/babel/pull/8524, we're only waiting for a release. Another approach would be to upgrade to Babel 7.. This is being worked on in https://github.com/babel/babel/pull/8524, we're only waiting for a release. Another approach would be to upgrade to Babel 7.. Hi, I think I need an example of what you're trying to do.. @thesageinpilani  The issue you mention looks strange. The code you posted should work correctly. If it doesn't, it might be a bug. In that case, I'd appreciate if you could contribute a failing test so we could fix it, or if you could otherwise try to help us investigating the root cause.\nThere are several issues with the JS hooks. Try to read through them first - maybe you bumped directly into one of those known issues.\nTo be honest, I wish we could just go and rewrite the hooks completely, instead of fixing them.\n\nBTW, I'm very happy you are using Dredd and I'm glad I can help you using Dredd, but please do not ping me like you did in your last comment. I have noticed your issue, but didn't get to it for a reason. It's been two days since you posted the issue. It's not in my abilities to provide you with a realtime support.\nAlso, there are other people who can help you, not only me. Sometimes it just happens that other issues get higher priority and there are no replies for weeks. And that's fine, this is Open Source.. @thesageinpilani The internet is full of tutorials and videos on that topic.. This has been closed already! \ud83d\ude40 Closing now.. One idea: what about\n/ dredd\n    / test\n        / e2e\n        / integration\n        / unit\n? We could have a e2e folder for tests running Dredd as a subprocess, and integration for anything else which is not a unit test.. Oh, you're fast. Okay then.. Filing separately, as an idea: https://github.com/apiaryio/dredd/issues/1072. Thanks for looking into this, @realityking. I think it should be possible to drop proxyquire from the codebase. It is there mostly as a relict of the CoffeeScript codebase and many old tests use it. I'd be happier if we could introduce Jest for mocking or just refactor the code so it's testable without tricks like proxyquire.\nAnd yeah, Jest has also some licensing issues (mostly because of https://github.com/lerna/lerna/issues/1213), but I'm keen to work on those (which I do https://github.com/lerna/lerna/pull/1441, https://github.com/lerna/lerna/pull/1465) instead of sticking to proxyquire.. Oh, it injects the hooks. Hmm. Wondering whether there is an alternative solution to that \ud83e\udd14 . I like the option 2! We could do this as a separate change, or in the wider context of JS hooks revamp. The current implementation has many issues. If you found any of those worth your time, it would be totally awesome. I'm definitely eager to have breaking changes if they improve the software and people's lives \ud83d\ude04 \nJust for the sake of consistency, let's see how other languages do it:\n\nPerl: use Dredd::Hooks::Methods;\nPHP: use Dredd\\Hooks;\nPython: import dredd_hooks as hooks\nRuby: include DreddHooks::Methods\nRust: extern crate dredd_hooks;\nGo: well...\nSandboxed JS: global methods out of the box\nJS: var hooks = require('hooks');\n\nI think having dredd/hooks pretty much fits in.. @realityking I can upgrade to the latest proxyquire now. I'll reform this issue though into one tracking we should remove proxyquire in the future. I think we had a valuable discussion about the topic here.. Tracking issues:\n\nhttps://github.com/request/request/issues/2971\nhttps://github.com/joyent/node-http-signature/issues/74\nhttps://github.com/joyent/node-sshpk/issues/37. bcrypt-pbkdf@1.0.2 has been released a few hours ago. Details here.. Winston can be upgraded now, but it is quite a rocket science. I spent half day trying to upgrade to v3, but I don't have a usable outcome and I won't risk breaking Dredd's output just for the sake of upgrading, given we want to get rid of it in the future anyway: https://github.com/apiaryio/dredd/pull/1099. Closing.. Thanks! This is definitely a good catch. Dredd consumes API Elements and I'm not sure at this moment whether they contain any hint of request body in case there is no content type. In that case Dredd is pretty helpless trying to show a warning and we'd probably need to produce the warning in parser. I need to check.. That's good news and bad news. It means Dredd itself can do something about it. At the same time it might be even a bug in Dredd.. I didnt see the failing test (on mobile phone), but let me guess it\u2019s the flaky beast we are trying to tame for second time in https://github.com/apiaryio/dredd/pull/1069. Hmm, interesting. Looking at the failures I can't exactly say what could happen. The code seems to be the same. I suspected some implicit returns missing, I couldn't spot something right away tho, or Windows not being able to find node in PATH. But from the last error it's obvious the server process got started, so node is fine.. Yes, you can do this using hooks: https://github.com/apiaryio/dredd/issues/995. > Is it possible to set my own User-Agent in dredd.yml ?\n\nThat's not possible. But I believe you could use the beforeEach hook to modify the request in this regard before Dredd sends it. Would that work for you?. You'd need to use hooks. See docs for an intro to hooks. They're available in multiple languages.\nGiven your hooks are in JavaScript, following hooks.js could solve your problem:\n```js\nvar hooks = require('hooks');\nhooks.beforeEach(function (transaction) {\n  transaction.request.headers['User-Agent'] = 'FooBar/1.2.3';\n});\n```\nWriting it from the top of my head though.. --only should work. First, run Dredd with --names, which lists the \"transaction names\". Then use the \"transaction name\" as value for --only.. I believe transaction.request.body['/data/attributes/email_address'] = email; won't work, because body is a string.\nPossibly something like...?\njs\ntransaction.request.body = transaction.request.body.replace('myemail@mail.com', email);. @KonstantinxVx I'm sorry for the delay. Is is still an issue? Could you please post here the whole output of Dredd with all errors, the expected body, and the real body sections?. Closing for inactivity.. Amazing! Thank you! Could you just amend the commit message to\ndocs: add tutorial about using Dredd in Rails\n(we have Semantic Release here). Thank you! \ud83d\ude80 . @kylef Feel free to give it a green if you like it, I'd actually prefer not to distract @michalholasek from his work currently.. Thanks!. It might take me a while to review and think through all the consequences, but I love this! One thing which is sure is this needs a BREAKING CHANGE: section in the commit as it is a breaking change for anyone using the CoffeeScript hooks.. > I didn't add any new tests as the feature is covered with existing tests that use coffeescript.\nAre there dedicated tests to verify hooks work with CoffeeScript as such, or do we rely on the rest of the tests using not-yet-decaffeinated hooks?\nSince we have both CS and Babel in the (dev)deps, it would be nice to have two dedicated e2e test cases to be sure at least those two compilers are supported and tested.. > I figured this would take a while to merge because it does make sense to batch it with some other breaking changes.\nI don't see an issue with that. I'm fan of continuous delivery. When debugging, it's easier to identify what change caused the problems, for both the maintainers and the users (they can try granular versions and say which is the last one working and it's clear what change the version brings).\nJust add the BREAKING CHANGE: section to the end of the commit, with an explanation and possibly a migration hint. Once it's merged, it gets autoreleased and I'm totally fine with major bump.\n\nMight be a few days until I get to this\n\nNo problem, it took me quite a few days to get to reviewing this gem \ud83d\udc8e, so I should be apologizing mysefl. Let's skip apologies and make awesome stuff when we have the time \ud83d\ude09 . I see some linter errors, but I guess that's not the real issue. Both AppVeyor and Travis agree there's a problem with\nSpecifying neither response body nor schema in the API Blueprint\n    when the server returns non-empty responses\nTypeError: Cannot read property 'code' of null\n    at runDredd (/home/travis/build/apiaryio/dredd/test/integration/require-test.js:67:28)\n    at recordLogging (/home/travis/build/apiaryio/dredd/test/integration/helpers.js:141:7)\n    at fn (/home/travis/build/apiaryio/dredd/test/integration/helpers.js:35:5)\n    at configuration.emitter.emit (/home/travis/build/apiaryio/dredd/src/dredd.js:29:3501)\non multiple Node versions. Doesn't look flaky to me. Let me see if I can find a while to reproduce or debug this. For now I'd focus on looking for discrepancies between your local setup and the CI setup.. I\u2019m sad to read that, but I suppose it\u2019s true. The tests are way too complex sometimes, especially when taken as the whole suite.\nI\u2019ll definitely leave this open and hopefully it gets into my pipeline soon.. I'd like to revive this soon. I know I neglected it for quite some time, so I'm ready to take over the responsibility of rebasing etc., but any help is appreciated \ud83d\ude4f . I'm actually wondering whether the current setup with Coveralls makes any sense. Coveralls don't report back under PRs and I wasn't able to debug it. Without that integration, it's just a useless number on a README badge, which requires a lot of complexity in how we run tests.\nAlso, after discussing the usefulness of coverage with @smizell on Twitter I have heretic thoughts about removing coverage altogether... . I think I've considered these as alternatives in the past, but didn't finish the evaluation:\n\nhttps://www.codacy.com/\nhttps://codeclimate.com/\nhttps://codecov.io/. \ud83d\udc4f\ud83d\udc4f\n\nAlready in action: https://github.com/apiaryio/dredd/commit/d0a2957. Here it is: https://github.com/apiaryio/dredd/pull/1196. I forgot it\u2019s breaking change as well \ud83e\udd26\u200d\u2642\ufe0f\nLet's do it as a next step then. We can rebase on top of current master and make another release, I\u2019m not against it.\nActually, I should drop the \u201cmajor release ceremony\u201d sentiment altogether. With a release for every change people will have version granularity when upgrading and it\u2019s easier for them to debug problems on the way.\nI\u2019ll release this early next week.. Thank you! Be sure I'm internally working on it!. There is a vulnerability which should be fixed by this PR. Still working on being able to merge this (internal processes). Since the vulnerability is not high severity, I'm inclined to wait for the internal processes to finish. In case of high severity vulnerabilities I'd merge it right away, regardless any processes.. Done. Hopefully next time we can do faster. I'm still learning how to do these things properly internally, so please don't take this as a general benchmark on how fast we're able to solve such things.. @thesageinpilani I think this won't be easy to implement at all and will better be carried out by @michalholasek or me. I don't want to turn you down, I just do not expect this to be a nice experience and we could actually be able to figure it out ourselves.\nI did review your previous PR and I'd be very grateful if you could work on that instead so we can fix all the issues mentioned there.\nIf this issue gets without addressing for 2 or 3 weeks, we failed to deliver the change on time and anyone is very welcome to contribute it if interested. But now I'd prefer if the maintainers could focus on the issue first.. @michalholasek one thought - looking at this it might be beneficial to keep the --level option or rename it to --debug and treat it as if setting DEBUG=dredd to simplify this for people.\nThe downside is that the code executed between $ dredd --debug and applying the setting (i.e. all code taking care of parsing CLI options etc.) won't be affected and won't output anything. It's the same case now - setting --level won't affect any code until actually set in the configuration, so you can't see any verbose etc. logging of the initial setup.\nMight be still worth for all the cases where people do not need to debug the setup code. They wouldn't need to play with environment variables. What do you think?. ievms works, but it doesn't support any additional provisioning: https://github.com/xdissent/ievms\nsh\n$ brew cask install unar virtualbox virtualbox-extension-pack\n$ curl -s https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh | env IEVMS_VERSIONS=\"EDGE\" bash\nVagrant options:\n\nbasic tutorial: https://codeblog.dotsandbrackets.com/vagrant-windows/\nchoco might be useful to simplify scripts: https://chocolatey.org/packages/git\n\nSomething like...?\nrb\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"Microsoft/EdgeOnWindows10\"\n  config.vm.box_version = \"1.0\"\nend \nVagrant + PowerShell seems to be the best option as of now.. I can't see an easy to have & viable solution at this moment. I'm not going to dig into this further.. @michalholasek Addressed your comments. Would you mind looking at the additional commits and saying \ud83d\udc4d or \ud83d\udc4e ?. @radoslawkojdecki The installation did not fail, only installation of an optional dependency did fail. See Why I\u2019m Seeing node-gyp or python Errors? Running dredd --version should work for you.. It's second time jenkins.io failed the build \ud83d\ude44 They should do something with their site availability.. Hi @schoepke, I'm sorry for answering after such a long time. This somehow slipped through my radars and now I found it during regular triaging.\nThank you for pointing this out. It's a serious discrepancy! The docs really say after is executed first and then afterEach. You are completely right that this needs to be fixed either in code or documentation.\nAnother documentation for Dredd hooks is here:\n\n\nafter called after some specific HTTP transaction regardless its result\nafterEach called after each HTTP transaction\nafterAll called after whole test run\n\n\nThis again indicates after is executed before afterEach. We have this test which verifies the order for hook handler implementations in other languages:\n\n0 ... before all modification\n1 ... before each modification\n2 ... before modification\n3 ... before each validation modification\n4 ... before validation modification\n5 ... after modification\n6 ... after each modification\n7 ... after all modification\n\nThus I think all historical records and all implementations in other languages indicate the intention was to have after executed before afterEach.\nThis means it is a bug in the code \ud83d\ude31 . I gave it 1.5 hrs of rebasing and couldn't get to an end \ud83d\ude1e However I'm keeping this open as I believe I can get inspired from the changes when I get to implementing this.. Depends on\n\nhttps://github.com/sindresorhus/lcid/issues/3\nhttps://github.com/yargs/yargs/pull/1195. \n--hooks=... (files)\n--hooks-handler=... (binary path or keyword like python, js, js-sandbox)\nremove --sandbox in favor of the -sandbox suffix (see above)\njs, nodejs, and javascript are aliases\nthe --hooks-handler value default is detected from the --hooks value (extensions) or set to JavaScript, so most of the time the option isn't needed at all\nspecial value custom allows for https://github.com/apiaryio/dredd/issues/755, doesn't spawn anything, but sends the data to given hook handler host and port (prints out where it's sending the data... could do this always anyway)\nrename --hooks-worker-* to --hooks-handler-*\n--server=... (binary path). @kylef Thank you very much for the review! \u2764\ufe0f . @pksunkara Do you think this should be solved on a level of language design? Is there a similar feature in OpenAPI? IMHO it could be solved by having multiple API descriptions for every environment and DRYing them out somehow (Hercule, https://github.com/apiaryio/api-blueprint/issues/20).. In the original post I mention a possible solution:\n\n\nDredd modifies real data. Should it only run safe HTTP methods, such as GET?\n\nDredd is able to test what you describe, using hooks and asserting over a schema. But you have a good point that to make testing on top of real data useful, we need to be able to test workflows. Current Dredd testing is conceptually an isolated unit testing, which isn't possible nor really desired on production.. With @netmilk we had an idea Dredd would have better separated the concerns of constructing the list of transactions and the transactions running.\nImagine Dredd could get a list of transactions representing a workflow instead of an API description, and whatever it gets, it replays it on top of the tested API, asserting the expected responses.\nAnd there are even already some formats able to capture a plain collection of transactions (Postman).\nSo implementing workflows, in a primitive form, isn\u2019t so impossible, it just needs some decoupling in the codebase.. I just scanned through the issue, but I believe your example even touches the #67. But yes, this is generally about nicer diffs in the CLI reporter as being designed in #765 and #305 is only a part of the problem.. Hi, it is, but we should set up some kind of pipeline to update the version after each release, especially given Dredd releasing itself is automated.\n@apiaryio/sre would you be able to help with this? (At least with designing the solution?). @abtris Sounds good to me! Dredd's stable and latest tags point to the same version for a long time already and we're not using pre-releases or anything like that, we have Semantic Release. So I wouldn't bother with that, just use latest.. Thank you all, I'll get to this soon-ish and finalize this. I'm sorry for the delays.. Working on https://github.com/apiaryio/dredd-docker/pull/1, stay tuned! Sorry for the delay.. An official and up-to-date Docker image is now available at apiaryio/dredd-docker. Please check it out and let me know if it works for you. Thanks!. I\u2019m glad you got it working!. Thanks @GrahamWalters for the issue and for the investigation. I'll put your reproduction into Dredd's test suite and let's see if upgrading the json-schema-faker resolves the problem.. @kylef's right. There is an issue for that: #894 Please, vote it up - it helps us to prioritize our work.\nThe previous issue you had is a duplicate of https://github.com/apiaryio/dredd/issues/659, basically. We need to give people more clues on what happened, these errors are not cool.. @travis5491811 You're welcome! Thank you for trying to use Dredd and for filing the issue!. @lenertovalucie Does @kylef's comment solve your problem?. @lenertovalucie Great! I'm glad we could help.. @skyellin I don't think this way of providing examples is supported in Swagger/OpenAPI 2.0. You can provide examples for request parameters using x-example. You can provide examples for response bodies using the example object.. @skyellin You are right. Let me verify the Swagger adapter supports that.. So this is not currently supported correctly and should be supported once https://github.com/apiaryio/fury-adapter-swagger/pull/203 gets done.. @apiaryio/adt Could you please verify what is the problem? 5 is a valid int64 number and 0 is a valid int32 number, right? \ud83e\udd14 . @kylef @pksunkara BTW I don't expect anyone to review the migration from MD to RST itself, but it would be great just to have second eyes on how the Sphinx setup has changed, Travis, and the CLI options extension.\nLet's leave the rest to visual verification after deploy and let's fix stuff on the fly once we bump into it later. I personally went through all pages locally to spot any discrepancies and I could have miss something, but it's not in the powers of the mortals to catch such stuff in a huge review like this.. @kylef Thanks! \ud83d\ude4f . All dependencies licensing processed. Merging!. Thank you for spotting this! This is definitely a mistake. I have this bomb in progress https://github.com/apiaryio/dredd/pull/1119, but once it's merged, I'll make sure this gets incorporated \ud83d\udc4d . @kylef I added a few commits to address your comments. I'd be grateful if you could just quickly scan them.. @kylef Thanks very much! This was helpful.. @apiaryio/sre Would you have any ideas on what could go wrong in this case? From the top of your head, I don't mean like debugging it right away.. Hi @shilpa2112, thanks for trying Dredd! This is because of https://github.com/apiaryio/dredd/issues/913 and https://github.com/apiaryio/dredd/issues/323.\nThere is a workaround mentioned in https://github.com/apiaryio/dredd/issues/913#issuecomment-381419699, would it work for you?. @shilpa2112 Does that answer your question?. @shilpa2112 I hope my answer has helped you. I'm closing this now, but feel free to comment if you have further questions.. Merging without reviews as a HOTFIX cc @kylef @pksunkara . I need to fix this first. Fixed. @kylef Comments addressed. I employed unittest and added the tests to the CI to motivate myself (and anyone else adding an extension) to write them as they're actually useful now.. Hi @larnouch, Dredd does not generate documentation, it tests the API description document against the implementation of the API and tells you whether it fits the description. Unless I know what tool exactly you use to generate the documentation (is it Apiary?), I can't help you.\nI'll close this now, but feel free to continue commenting if you can provide more info. Thanks!. @larnouch API Blueprint is the underlying API description document format. Do you know which tool you use to generate documentation from it? Do you run a particular command or do you upload the API Blueprint document somewhere to get the documentation rendered as a HTML page?. @larnouch I'm afraid Fury also isn't the documentation renderer. Fury parses the API description document into something (API Elements) other tools (such as documentation renderers or Dredd) can consume.\nAre you using Apiary to render the documentation? Or maybe Aglio?. @larnouch In that case there is no way to hide certain endpoints or requests/responses from your documentation. What you could do is to have one documentation-oriented API Blueprint, and then additional one, which is more testing-focused. You'd generate user-facing documentation from the first one, and test with Dredd with both of them (Dredd accepts multiple documents). Would that work for you?. @kylef @pksunkara Merging without a review not to bother you with small stuff. Pinging for awareness (i.e. if you see the diff ex-post out of curiosity and see something fishy, feel free to speak up).. It's just nitpicks, merging (cc @pksunkara @kylef ). @kylef Thanks! \ud83d\ude80 . @kylef thanks! comments addressed. @JackuB If you like it how it is, feel free to Merge pull request. @JackuB Thank you!. @JackuB @kylef comments addressed. Thanks! \ud83d\udcdd . @kylef This is now ready \ud83d\ude80 . Hi, this would need a bit of refactoring, but I think it is a good idea to have the data from the API description somehow accessible in the hooks.. Hi @kvokka, I'm sorry, I must have missed this issue.\nDo I understand correctly that you're trying to test 204 No Content response in a document where everything produces JSON by default, and Dredd considers this to be a problem, because the 204 No Content response should not have a Content-Type?\nWhile this seems to be correct rigorously, I can see it can be annoying from user's perspective. @apiaryio/adt Do you think it would be a good idea to suppress Content-Type for 204 and 205 responses in the Swagger adapter? . You are right, this is nicer solution. Maybe even this could work (did not try)?\nyaml\ndelete:\n  tags:\n    - Users\n  description: User logout\n  produces:\n    - \"\"\nI agree that it would be convenient to omit the content-type, but at the same time, the document should be universal and describe the API as it is, in the most real way. The semantics of OpenAPI 2 unfortunately lead to this, but omitting the content-type in the Swagger adapter or in Dredd means the API stays described with the problem in place for other Swagger tools you may use or integrate with.\nIn other words, if you have produces with JSON and 204 No Content response, other tools will/should still translate it to a response with a JSON content type and that's not how the API truly behaves, and Dredd wouldn't be able to warn you about it.\nSo at the end, I tend to think we should not introduce any specific behavior in this regard. Opinions?. @kvokka I'm sorry, I don't know why this always slips through my notifications \ud83d\ude1e Perhaps this section could contain an example of API descriptions with empty response bodies? https://dredd.org/en/latest/how-it-works.html#empty-response-body. Hi @ianwremmel, the API Blueprint parser (let's refer to all the projects with this name to make it easier) is delivered in two forms - a compiled parser written in C++, and an equivalent, slower, but more portable JS parser compiled from the same C++ code.\nIt's true the parser doesn't support Node 10 correctly in the version Dredd uses, but even if the compilation fails, the parser should work correctly as there's fallback to the JS form. Making the compilation pass won't speed-up the installation though, it only speeds up Dredd's parsing of API Blueprint documents.\nI'd say that what you really want (and I really want as well) is to get https://github.com/apiaryio/drafter-npm/pull/16 finished so that Dredd installs with the JS form by default, which avoids any compilation when managing the lifecycle of your project with npm, and so that the C++ form is an opt-in for deployments of Dredd where speed of parsing of API Blueprint documents is more important than the speed of installation.\nSee also docs on this topic. Pinging @apiaryio/adt so they know this is still an issue for Dredd users and we should prioritize it.. So @kylef suggested we could use npm-shrinkwrap.json instead of package-lock.json. npm respects it in distributed packages and recommends it for things like CLI tooks. We could craft it so it doesn't contain protagonist (the compiled part) at all. It would remove some performance in parsing large API Blueprint files, but my hunch is the installation performance of Dredd is a bigger issue, hurting everyone.\nI'd consider it a sort of a temporary hack though, as I still think the API Elements tooling should have a way to opt-in to compiling instead of opting-out by --no-optional. OTOH AFAIK opt-in is not an easy workflow to achieve with current npm's capabilities.\nshrinkwrap docs\n\nhttps://docs.npmjs.com/files/shrinkwrap.json\nhttps://docs.npmjs.com/files/package-locks\n\npostshrinkwrap\n\n. To the published Dredd artifact.. @mdular If you have Dredd as a local (dev)dependency, then you can install it with --no-optional and npm shouldn't compile. But then npm will try to compile every time you'll be manipulating with the package. There's no simple solution to that - there's no .npmrc setting to add --no-optional to all npm calls. The only workaround at this moment is to add --no-optional manually to all further npm commands manipulating with the package. See also the note here.. > Given Node 8 doesn't reach end of life until December 2019 I don't think we will be dropping support for Node < 10 until then\nYes, that's the rule now. We would have to have really good reasons to break it and personally I'd prefer to support Node 6 as long as possible. People migrated to Node 6 quite fast from Node 4, to get the ES2015+ features, but I don't see everyone abandoning it now in the same hurry as there are usually no really good reasons and it is no pain to have the codebase to still support Node 6. (I might be wrong in my observations, of course, happy to hear other opinions.). Leaving it up to @apiaryio/adt to try N-API and to decide around that. The discussion should probably move to Drafter.js issues.\nRegarding versions, Dredd itself is flexible I guess. I'd say Dredd should support \"the latest version of the major version\".\nI'm going to remove Protagonist from Dredd by shrinkwrap as a workaround. The performance benefit does not overweight the installation and distribution downsides. I should have done it way earlier already. Hopefully I can get to issue the PR during today.. I removed the Git docs in a4f1fc74e4706ec126dd2c8a7bd93ac028fa5501, but it would be nice to verify it's really true Dredd installation now doesn't depend on Git before this gets merged.. I've crafted this temporary Travis CI config:\nyaml\ndist: \"trusty\"\nlanguage: \"node_js\"\nnode_js:\n  - \"10\"\nbefore_install:\n  - \"npm -g install npm@6\"\ninstall:\n  - \"echo \\\"git bin: $(which git)\\\"\"\n  - \"sudo rm $(which git)\"\n  - \"echo \\\"git bin: $(which git)\\\"\"\n  - \"npm install --no-optional --no-save\"\njobs:\n  include:\n    - env: \"JOB=node10\"\n      script: \"echo 'Yay!'\"\nIt failed to pass with jsonlint in the dependency tree and it passed with the latest Gavel. Thereby I consider the case of Dredd being dependent on git as closed. Thanks @abacaphiliac \ud83c\udf89 . @timbeynart-nbcuni Could you be more specific about your last comment? From the issue you filed it seems there is a bug on Dredd's end in how it generates the junit/xunit file. If you found some pitfalls, please let us know here. E.g. if there are competing \"standards\", one with skip and the other one with skipped, we can have both in the file for larger compatibility.. @timbeynart-nbcuni What do you think of my suggestion then? Would including both skip and skipped with the same value make the Dredd output more interoperable?. If you could test that having both in place helps and it doesn't break anything, I'm for including it. Then feel free to update your PR and let's go with it \ud83d\ude80 . @timbeynart-nbcuni Did you have any luck with reproducing whether skip gets ignored if skipped is provided as well?. @timbeynart-nbcuni Feel free to revive this if you have new findings. Without your investigation I can't settle on any conclusions. Closing this for now.. All the tests have passed, but the checks have failed on the commit message format. Could you please put Conventional Changelog prefixe in front of the commit and run npm run lint?\nfix: change the skip attribute to match jUnit spec\n. Closing, see https://github.com/apiaryio/dredd/issues/1152#issuecomment-450165140. I'll wait for 16.. @floggle Hi! Thanks for trying to use Dredd and thanks for the issue!\n\nThe install docs are woefully inadequate.\n\nCould you please be more specific which docs exactly you mean? I recently updated the installation docs to be as adequate and detailed as possible, but I might have miss something of course, or you may be referring to other docs (READMEs etc.). In that case I'd very much like to fill the gaps.\nYou are experiencing problems with the C++ dependencies, which have their dedicated section.. @khvr000 You can document a wrong HTTP request with an expected HTTP response. E.g. a request where the API consumer is sending invalid data in the request body, and the server responds with a 500. An example in the API Blueprint format:\n```apib\nCustomers [/customers]\nCreate a new customer [POST]\n\n\nRequest (application/json)\n\nAttributes\nemail: hello@example.com (string)\n\n\n\n\n\nResponse 201 (application/json)\n\nAttributes\nid: 123 (number)\nemail: hello@example.com (string)\n\n\n\n\n\nRequest Invalid e-mail address (application/json)\n\nAttributes\nemail: hell@. (string)\n\n\n\n\n\nResponse 400 (application/json)\n\nAttributes\nmessage: Invalid e-mail address (string)\n```\n\n\n\n\n\nThis leverages multiple requests and responses.\nThe OpenAPI 2 (Swagger) format only supports multiple responses though. In that case, one option is to have multiple API descriptions (one for documentation of positive scenarios, another for some edge cases, ...) and test with all of them using --path. Another option would be to have hooks, which alter the requests, or which modify the transactions list.. Let me know please if this answers your question.. @khvr000 Did my answer solve your problem?. I think https://github.com/apiaryio/dredd/issues/1160#issuecomment-448145458 answers this issue as well, but please feel free to comment further if you don't think the same.\nAll Dredd's automatic expectations are documented in the docs. Regarding Gavel in particular, there's a whole language-agnostic BDD spec documenting (and testing) its behavior.. I forgot this counts with a PR I'm yet to make \ud83d\ude04 Parking it, will revive once I can rebase against the other work.. Waits for https://github.com/apiaryio/dredd/pull/1165. @opichals The plan is to have only the WASM version and no compilation https://github.com/apiaryio/dredd/issues/1149#issuecomment-448181314 What you're talking about is attempted in https://github.com/apiaryio/drafter-npm/pull/16, but it isn't as simple as it seems (I don't remember all the concerns @kylef expressed in previous discussions). I don't know what's the best solution for everyone for the interim period. I decided the best solution for Dredd is this one, and I only hope I won't get surprised by some side-effects I did not anticipated when this gets merged.. So I guess I'm merging this! Merry Christmas, everyone \ud83c\udf84 \n. Well it still compiles locally when I do npm install something --save or npm uninstall something --save etc. Not sure how to get rid of that. But when I install Dredd from npm, it doesn't compile anymore. Except it takes eternity because of dev deps, but fix for that is on its way https://github.com/apiaryio/dredd/pull/1170. Yes. I'll try to strip down dependencies meanwhile, at least. Feel free to file a new issue to have a place where to track that the current solution still isn't ideal.. @kylef Updated \ud83d\ude4f . @kylef The last commit is automated code changes, so don't bother with it.. @kylef When you approve, merge it right away pls. So apparently, locally npm is still able to somehow magically evaluate that protagonist is a dependency of drafter and adds it to the lock file.\n\nI'm giving up on this broken tool. I don't know about Yarn's lock file, but my impression from both package-lock.json and npm-shrinkwrap.json is that they do a lot of stuff, mostly random or magic, but they rarely lock anything the way I need it.\nI don't think a lock file is really needed on Dredd, it is a nice to have. So will add a commit here removing it. Hopefully that will bring an end to all this hassle with protagonist for a while.. The commit is there.\nSo the current state is - installing Dredd from npm shouldn't compile protagonist and the surface of the hardwired dependencies should be smaller as after this PR we're distributing only Dredd Transactions's dependencies locked, not all Dredd's dependencies. This is probably the best we can achieve.\nFor local installations (cloning Dredd's repo and executing npm install, adding a dependency to Dredd, etc.), npm generously ignores whatever is locked, and attempts the compilation every single time. I see no way how to prevent it. I don't know whether this happens for people having Dredd as their dev dependency as well. It is very annoying, but I'll hope that with the arrangements made, me and my imaginary team are the only ones left suffering the compilation on everyday basis.\nCompletely removing lock file from Dredd at least avoids the need for preventing npm to regularly put the protagonist back to Dredd's locked dependencies (again, I don't know how to avoid this), and avoids the need for custom correcting of that file (postshrinkwrap script, etc.).. I'm also wondering whether a certain combination of bundling dependencies wouldn't get rid of the compilation altogether.. So if I install Dredd now, it takes much less time and generates a smaller lock file. However, if I install it as a dev dependency of something, the compilation appears with all subsequent npm manipulations:\ntext\n$ npm init -y\n$ npm i dredd --save-dev  # doesn't compile\n$ npm i sinon --save-dev  # triggers compilation\n$ npm i  # triggers compilation\n$ cat package-lock.json | grep protagonist\n            \"protagonist\": \"^1.6.0\"\n    \"protagonist\": {\n      \"resolved\": \"https://registry.npmjs.org/protagonist/-/protagonist-1.6.8.tgz\",\n\ud83d\ude1e \nThis really isn't a robust solution to the problem. I hope it's gonna be temporary, I'm done with hacks for now, this should be solved on the level of the drafter packages.. Oh! Thanks for reporting this, this is an unwanted breaking change.. @axelssonHakan @FredrikFolkesson I believe https://github.com/apiaryio/dredd/pull/1188 should fix it. Hi @davidgengenbach, thanks for using Dredd! I've checked out the gist and I see you're using an OpenAPI 2 in: body parameter:\nyaml\n      parameters:\n        - in: body\n          name: response\n          schema:\n            $ref: \"#/definitions/HttpBinResponse\"\nSuch parameter describes a request body though. Since we're talking about a GET request here, I believe you wanted to have this as a description of the response body. That can be achieved by providing a schema property within the Response Object.\nBy the way, you could also provide an example property with a specific example with your own values, so Dredd doesn't make up the values and can follow the specification by example approach to testing.\nWould that work for you?. Not sure about spring given the weather in Prague just covered me in snow, but otherwise you're right \ud83d\ude00\nI\u2019ll add a commit regarding junit later \ud83d\udc4d\nMaybe we could call it snow cleaning instead of spring cleaning, just saw this car\n\n. Yes, after this I can almost imagine someone even contributing to make the JS hooks better \ud83d\ude40 . Ha ha, no problem. I\u2019m glad we still get at least a few days of snow with all the global warming in action \ud83c\udfdc . @kylef I added two more commits, but I don't want to sneak them in after you approved the PR. Will wait for you to rubber stamp it again.. Thanks! Cherry-picked to https://github.com/apiaryio/dredd/pull/1196 so we don't have two major version bumps done by Semantic Release.. Nothing to be sorry about. It's the same for me :) I'd have ideas on how to make the test suite better / faster, it's just that I think it's better to focus on making the code better first while the tests stay intact. Can't change both at the same time.. \n1) MarkdownReporter\n       when ending\n         when can create output directory\n           should write buffer to file:\n     AssertionError: expected false to be truthy\n      at Context.it (test\\unit\\reporters\\MarkdownReporter-test.js:101:16)\nA consistent failure across systems, but only in Markdown reporter? Wow, that's weird. Will check it out.. Seems like init.js uses fs-extra as well \ud83d\ude40\nDiscovered thanks to the smoke tests. I didn't expect to realize their usefulness so soon \ud83d\ude04 . . @kylef I replied to your comments and added two commits to address some. Most of your comments lead to follow-up work, which I'm to document somewhere soon.\nI'm defending my evil approach in https://github.com/apiaryio/dredd/pull/1213#discussion_r253211888 and I'm interested in your opinion on this before I merge the PR.\nAnd thanks very much for the review! \ud83d\ude4f . The smoke test is failing as the dredd-example uses --level \ud83d\ude10 I'll remove it from there for the time of merging this PR and then I'll replace it with --loglevel.. The smoke test failing is a valid alert that every setup using dredd.yml would fail the same way. While I could probably do that given it's a breaking version of Dredd, I don't think it's nice. I'm fine breaking someone's workflow in the terminal when they can correct it in a second, but to break Dredd setups all around the globe when upgrading, and requiring people to manually edit their dredd.yml files, that doesn't sound nice.\nThis all is because Dredd's configuration is so badly designed, but that's out of the scope of this PR, so I'll try to prepare a commit with a solution, albeit ugly. I'll properly deprecate all options which make the dredd-example build to fail.. I added some ugly code to deal with the deprecations \ud83d\ude48 At least it's tested. I'll think of a better way to do this in the future, but it probably won't get much better unless I decide to dive into #1101 . Here it is: ff55694. @kylef please re-review \ud83d\ude4f . The same is valid for \"Regression: Issues #319 and #354\" tests. Thanks! The first step would be to figure out where does the current uuid validation come from. Whether it's the JSON Schema validator we use, the Swagger parser, or something else. I'd say this is a bug.. Thanks for filing this as an issue!\n\nIs there an intention to update or replace the packages that use nomnom ?\n\nDefinitely. Currently there's https://github.com/apiaryio/dredd/pull/1220 open, but it's failing, so I need to figure out upgrading the dependencies one by one. I don't recall from where exactly nomnom comes, but I remember we've been urging a maintainer of one project to replace it. If you feel like helping with investigation on which package exactly is the culprit and what exactly needs to be upgraded, it would be awesome.. @realityking It would help to have a somewhat minimal example to reproduce this.. Oh! Dredd now depends on Drafter v4, which drops the API Blueprint AST support. It only supports API Elements. The AST has been deprecated for a long time, and we're trying to remove it from all our products, newly integrating on top of the API Elements exclusively everywhere. Since Dredd is not using the AST since the moment we added support for Swagger (long, long time ago), I didn't realize this could be an issue. But it makes sense - you can have only one version of Drafter compiled in your node_modules.\nI'm not sure what would be a workaround for this \ud83e\udd14 . I don't think npm supports having multiple versions of compiled dependencies. I.e. you can have multiple versions of drafter.js, but not multiple versions of protagonist.. Honestly this has surprised me as well \ud83d\ude04 . It works. The confusion comes from the fact that in certain circumstances the Apiary reporter fails to connect (wrong certificate, wrong port, wrong subdomain) and it prints out the error, but then floods the terminal with other output, so the error isn't very visible. The correct combination for local development is following:\nAPIARY_API_URL=http://api.apiary.test:8000 ./bin/dredd ./test/fixtures/apiary.apib http://example.com --reporter=apiary. @djragsdale Thanks for filing this! I just noticed a similar issue here: https://github.com/apiaryio/dredd-example/issues/36\nI didn't have time to dig into it in a thorough way, but my hunch would be it might be all because of https://github.com/apiaryio/dredd/issues/793 Both your case and the dredd-example case uses npm start, which might behave in a similar way as running from a bash script.\nI'm not able to reproduce this on Windows and not even on macOS most of the time, so it might besomething Linux-specific as well.\nThis is definitely a bug we should be looking into. The right place where to look is the enhanced child process and its tests.. I usually open the file very quickly, only jumping to the option I am interested in by search in my editor. That's why I probably didn't notice it. Definitely not the state I'd like the file to be in.. Looks like there's an issue with AppVeyor \ud83e\udd37\u200d\u2642\ufe0f We have the push build passing, so I'm merging.\n\n. Oh yeah, the troublesome indentation \ud83d\ude42 Thank you!. @lulco Thanks for the issue! The warning is from the OAS3 parser and means the example key is not supported yet. The error comes from Dredd as it needs an example value.\nWe're working on improving the parser every day, but you can help us to speed things up by contributing. It should be a matter of making additions to this directory in accordance with the contributing guide.. I believe we should move this issue here.. Wow, thanks for reporting this! Did you run dredd init in an empty folder or do you have any files there? Could you send me ls of that folder in that case? I'm interested mainly in filenames and extensions. The init script does some guessing on which programming language you might be using or which API description format you're using and the bug could be there.. Thanks, I'll try to debug the issue \ud83d\ude05 If you by any chance manage to isolate the problem to a certain combination of files, please let us know here.. Awesome, thanks! \ud83d\ude4f . Thanks @kettanaito for figuring out the issue. Not using the default when the question isn't asked is not the intended behavior, I assumed Inquirer would use the default in that case when I was writing the code.\n\nprompt's answers serve as an overrides to the default config\n\nThat sounds like a good idea.. Closes https://github.com/apiaryio/dredd/issues/958 and https://github.com/apiaryio/dredd/issues/763 as well.. Coveralls had a temporary problem and it was fixed. Codecov works on implementing the GitHub App integration. Let's still give coverage a chance.. Thanks! Somehow Greenkeeper feels unreliable \ud83d\ude15 I already had to restart it once on the repos to get it working again.. @garyluu In case the response is binary, Dredd sends it encoded as Base64. This is indicated in the bodyEncoding property. I notice you're using Python, in that case you could use following to decode it:\n```python\nimport base64\n...\nif transaction['real']['bodyEncoding'] == 'base64':\n    data = base64.b64decode(transaction['real']['body'])\nelse:\n    data = transaction['real']['body']\n```\nLet me know if that works.. Since we're talking about transaction['real']['body'] response, it is important to know what exactly your API server is returning to Dredd. I suppose transaction['expected']['body'] will match what's in your OpenAPI document.\nAre you able to use curl or httpie to see what exactly the server returns for the GET /api/ga4gh/v2/tools request?. @garyluu Is it possible the response body contains the \\ufffd UTF-8 character for some reason or something which cannot be encoded to UTF-8?\nhttps://github.com/apiaryio/dredd/blob/8e9035b/lib/performRequest.js#L150\njs\n/**\n * @param {Buffer} body\n */\nfunction detectBodyEncoding(body) {\n  // U+FFFD is a replacement character in UTF-8 and indicates there\n  // are some bytes which could not been translated as UTF-8. Therefore\n  // let's assume the body is in binary format. Dredd encodes binary as\n  // Base64 to be able to transfer it wrapped in JSON over the TCP to non-JS\n  // hooks implementations.\n  return body.toString().includes('\\ufffd') ? 'base64' : 'utf-8';\n}. Great! I'm glad we could figure it out \ud83d\udc4d . Thanks!. Hi @alikh31! \ud83d\ude4b\u200d\u2642\ufe0f Nice to still see you around the Apiary realm \ud83d\ude42 \nI believe the bug you're experiencing is a problem with encoding/decoding URI parameters we already have around. I think related issues are https://github.com/apiaryio/dredd/issues/1012, https://github.com/apiaryio/dredd/issues/856, https://github.com/apiaryio/dredd/issues/481.\nI'd say the bug happens somewhere here and is caused by the fact that the parameter name can/must be encoded in the URI template, but isn't encoded in the parameters list, so Dredd doesn't correctly match them together.\nI wanted to focus on fixing this soon, together with agreement with @apiaryio/adt that the parser would always provide a valid and correctly encoded URI template, regardless what the user provides. In that case Dredd could just decode the parameter name from the template and deterministically match it with the name provided in the parameters list.. Now the PR contains a commit using feat: and then a refactor: commit reverting the feature. I'm wondering what's the best way to solve this, perhaps Squash & merge, where I squash to something like this?\nrefactor: rename 'configuraton.data' to 'configuration.apiDescriptions'. Not yet, need to upgrade manually, gradually, as in https://github.com/apiaryio/dredd/pull/1259/. Will issue this change together with the ones I'm working on right now.. Yeah, working on it! Thanks, Greenkeeper, for the reminder \ud83d\ude00. First of all, it might be good to look at https://github.com/apiaryio/dredd/issues/1103 in case one of your testing environments is production.\nWhat you probably want is to use hooks, which allow you to modify the request sent by Dredd in any way you like. Let me know if you think it would solve your problem.. Looking at the code again after reading your comment.\nThe way it is wired together now is that the init() takes output from the optimist as the initial config. This way it can set CLI arguments with priority.\nI took a moment to read the init.js code and I found out the language should be a single \"init question\" where the fix is needed. All other questions actually seem to correctly count with the Inquirer behavior, i.e. if when doesn't pass, there will be no value and default gets ignored.\nI think the fix is probably easier than it seems. The problem is caused by the fact that for various historical reasons, config.language's effective \"empty\" value is \"nodejs\".\nSo the flow goes as follows. When user doesn't specify the hook language in the CLI, it defaults to nodejs (see options.json file). In that case, the line 71 passes and the question about hooks gets asked:\njs\n    {\n      name: 'hooks',\n      message: 'Do you want to use hooks to customize Dredd\\'s behavior?',\n      type: 'confirm',\n      default: true,\n      when: () => config.language === 'nodejs',\n    },\nIf user wishes to set the hooks language, they are presented with the following question:\njs\n    {\n      name: 'language',\n      message: 'Programming language of the hooks',\n      type: 'list',\n      default: detected.language,\n      choices: [\n        { name: 'Go', value: 'go' },\n        { name: 'JavaScript', value: 'nodejs' },\n        { name: 'Perl', value: 'perl' },\n        { name: 'PHP', value: 'php' },\n        { name: 'Python', value: 'python' },\n        { name: 'Ruby', value: 'ruby' },\n        { name: 'Rust', value: 'rust' },\n      ],\n      when: answers => answers.hooks,\n    },\nThere is no \"empty\" answer. The \"empty\" answer is nodejs. If the question isn't asked, the answer will be undefined though. I think we could take it as a possible, valid outcome of the prompting, and just make sure the applyAnswers() correctly deals with it:\ndiff\n- config.language = answers.language;\n+ config.language = answers.language || 'nodejs';\nThen testing this in applyAnswers-test.js as follows:\njs\nit('sets the language if not provided', () => {\n  const config = applyAnswers(createConfig(), { language: undefined });\n  assert.equal(config.language, 'nodejs');\n});\n\nThe code, and especially the line when: () => config.language === 'nodejs' was a bit confusing to me until I realized the nodejs is the effective empty value for that particular option. Unfortunately it's something not easy to spot without a larger context of the codebase, making contributions harder \ud83d\ude1e . Just a nitpick - could you please change the commit messages so they adhere to the Semantic Release convention?\ndiff\n- test: Fixes a typo in \"applyAnswers\" unit test\n+ test: fix a typo in \"applyAnswers\" unit test\n- fix: (dredd.yml) fallbacks to \"nodejs\" when no language prompted \n+ fix(dredd.yml): fallback to \"nodejs\" when no language prompted\nYou can check it locally by npm run lint as well. It helps us to employ Semantic Release for automatic releases, which lowers maintenance overhead.. @rayzeller Thanks! Fixing it right away in https://github.com/apiaryio/dredd/pull/1272. Thanks!. @kylef I was able to fix all Windows tests, the PR is ready for review. Sorry for asking you for a review before everything was passing.. Hi, thanks! I think this would tackle #913 in a sense (btw, did you try the workaround mentioned in https://github.com/apiaryio/dredd/issues/913#issuecomment-381419699 ?), but if we're going to implement a solution to SSL certificates, I'd like it to be on a global level (configuration options and CLI options) rather than per transaction.. Is different certificates for different Dredd requests the reality you're coping with in your project or is it something you think might be useful?. \ud83d\ude13 . Thanks for reporting the issue. According to the OAS3 support status (it's still very experimental) the type should be already supported. I wonder whether the OAS3 adapter already correctly generates the schemas for Dredd in this case. @kylef would you be so nice and check where the problem could be? If there is something we don't support yet, I think there would be a warning about it \ud83e\udd14 . This function could be simplified by caseless, I believe.\n. diff\n- confitional\n+ conditional\n. in or before?\n. double the\n. js\nbuffer += chunk\n. I think this comment is useless to future generations without URL to an actuall issue on GitHub with description of the bug.\n. dtto\n. coffee\nPORT + 1\n. dtto...\nmaybe we could have sth like wakeUpEventLoop() function shared among all these tests, which will be documented by the comment on one place and the implementation will be at one place and it will be clearly marked as workaround for a bug?\n. I'm sorry, I got heavily used to following our CoffeeScript Style Guide and I didn't realize I should check for an existing style in Dredd. Won't force parentheses here if it doesn't make sense in the context of the existing codebase.\n. Addressed in fdfd577.\n. Addressed in fdfd577.\n. Addressed in a162380.\n. Addressed in 786ad36.\n. typo: sandnoxed\n. should be external module :-P\n. why this all? why transaction = receivedMessage.data doesn't work and if it really doesn't work, why not clone()?\n. typo: hoooks\n. transaction = receivedMessage.data is in the comment, but data is the name of the variable used below\n. Missing test file for negative exit codes, at least one.\n. hooksWorkerClient.start(callback)?\n. typo: desn't\n. typo: fixtres (how does it work?!)\n. typo: announing\n. typo: annoucing\n. typo: execeute (pls do search/replace, it's on many many places)\n. dtto annoucing (pls do search/replace, it's on many places)\n. maybe: when methods dealing with connection to the handler are stubbed\n. (on multiple places)\n. typo:\ndiff\n- as a array\n+ as an array\n. typo: hadler\n. typo: perfotm\n. typo: perforom\n. Addressed in c9b6a33.\n. Thanks! @w-vi's comment addressed in  9a06f1e.\n. I know why. We are receiving data function argument and here we are directly modifying it. Neither data = ... nor data = clone(...) will work. Is there any reason why we have to modify function argument and why we can't leave it unchanged and pass the new data to the hookCallback or something similar? IMHO this is heavy magic, modify function arguments like this and letting the surrounding code pickup the changes from the original objects.\n. Addressed in 96c4999.\n. missing closing parenthesis\n. Does this really work? It's not in the README of the project (there are no installation guidelines :( ).\n. Why we do specify version here? And what does the --dev mean?\n. Missing test for Perl.\n. Aren't these tests redundant? I'm not sure how important the language is for this particular test. I think it tests just basic functionality of the dredd init command itself.\n. Ah, thanks!\n. I don't know what's best practice in that case :( Having several tests just to keep coverage sounds like smell to me, but YMMV. Calling @netmilk for an opinion.\nIf we are keeping them, can we at least rename this to\ndiff\n- describe '\"init\"', ->\n+ describe '\"init\" (nodejs)', ->\nand then add the language also to the new ones?\ndiff\n- describe '\"init\"', ->\n+ describe '\"init\" (python)', ->\netc.\n. facepalm This is my mistake. Thanks!\n. Awww! :smirk_cat: Good idea. This didn't occur to me. Will do.\n. This won't easily move as all the hooks handler implementations use the dredd-hooks-template repo as a base, so we don't change it much (actually, I'd even say we don't change it at all). I'd use commit if there would be a link to specific line, but this way I'd say it's as stable as any other internet link.\n. I know. The thing is - I want the first section to be TL;DR and this one to be elaborate explanation of things. Either I'd have to route all people to elaborate text or not to write that Dredd is in CS in the TL;DR section to make this DRY.\n. Good point. I took this from the original document. I always wondered why GitHub prefers HTTPs in their UI and docs and now it makes sense :-)\n. :+1: There are plans on having a dedicated microsite for Dredd similar to https://apiblueprint.org/ in the future, so I guess that would sort it out. I'll fix the HTTPs though.\n. Can't add HTTPs to RTFD one due to https://github.com/rtfd/readthedocs.org/issues/328 :disappointed: \n. I think we should go Docker in the future... :whale: \n. Turned into https://github.com/apiaryio/dredd/issues/408.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 46a4154e79acd4bf0d9528bbee7495b387e6e861.\n. Addressed in 822cbfed1794050a730eb1b94546ee25ed6a9a7f.\n. Addressed in 822cbfed1794050a730eb1b94546ee25ed6a9a7f.\n. Addressed in 822cbfed1794050a730eb1b94546ee25ed6a9a7f.\n. @netmilk I tried to remove runner.hooks.configuration, but it seems it's there on purpose and it's part of the Node.js API: http://dredd.readthedocs.org/en/latest/hooks-nodejs/#api-reference\n. Sure, see http://dredd.readthedocs.org/en/latest/usage/#cli-interface. I know the docs aren't ideal (copy-pasted output of --help), I'd like to change them and possibly auto-generate them by a script before release or sth similar (tracking issue would be probably #377).\n. They should. Not sure if dredd init automatically picks them up, but they should definitely work if inserted to the YAML manually. If it doesn't work for you, please file an issue, that would be a bug.\n. :sweat_smile: \n. This was actually correct, please put it back to localhost.\n. This was also correct in the previous version (see protocol: ... couple of lines below).\n. Same as https://github.com/apiaryio/dredd/pull/442/files#r59837089.\n. This is the main change in this PR, actually.\n. Yes.\n. I should stop doing before thinking. Happens to me a lot lately :neutral_face: (this is genuine neutral face, not Dredd's smile)\n. Addressed (commit amended).\n. The semi-official claim right now is \"HTTP API Testing Framework\" for a longer time and it was already in the README. Not sure why here it was as \"API Blueprint testing tool\".\n. Yup, some places are still left intact. E.g. here the sentence says \"API Blueprint structure conforms to the REST paradigm\", which isn't valid to OAI in my opinion. Rephrasing such sections should be part of \"Let's add Swagger docs\" PR.\n. The same: https://github.com/apiaryio/dredd/pull/492#discussion_r64224991\n. when checking validity of response? I think it shouldn't\n. yes, should be fixed or filed as an issue on Dredd/Swagger Adapter cc @pksunkara \n. Also I'm not sure this is 100% true as of now. Should be fixed or filed as an issue on Dredd/Swagger Adapter cc @pksunkara @netmilk \n. https://github.com/apiaryio/fury-adapter-swagger/issues/65\n. Addressed in 5e5c81bdf4a78b98edf4172e580823ffd6308686.\n. Addressed in 5e5c81bdf4a78b98edf4172e580823ffd6308686.\n. Addressed in 5e5c81bdf4a78b98edf4172e580823ffd6308686.\n. Addressed in 5e5c81bdf4a78b98edf4172e580823ffd6308686.\n. I think this is a larger story - AFAIK most of the Dredd stack can't deal with +json media types (namely Gavel or see this PR https://github.com/apiaryio/dredd/pull/262).\n. https://github.com/apiaryio/fury-adapter-swagger/issues/66\n. https://github.com/apiaryio/dredd/issues/531\n. Checked with Pavan and addressed in 1ff8e52.\n. Nope, but asked @netmilk about it and got response \"debone it\".\n. They're just reversed and then I sorted them. It's change in the Winston logger package.\n. Trust me! The previous test used dummy structure to test something. Since async.js got more strict about what can go inside, the dummy structure didn't work anymore. I replaced it with more real-world examples to make the test work.\n. I would love to, but no time today. The whole interactive config wizard would deserve facelift.\n. This is just workaround for Read The Docs to redirect /example to /quickstart. I merged those two pages.\n. I merged this page with /quickstart.\n. This is just workaround for Read The Docs to redirect /example to /quickstart. I merged those two pages.\n. This is bug (the URL already has it's own #hash).\n. This is bug (the URL already has it's own #hash).\n. This was way too nested in the left column, making it more flat.\n. These items were outdated for longer time and I noticed it only now.\n. No, only dredd init starts interactive config.\n. We discussed this internally, but for the record, it's inquirer's strange API: https://github.com/sboudrias/Inquirer.js#installation\n. The thing is, for npm install <something> it works: https://docs.npmjs.com/cli/install\n\nNote: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed by a slash.\n\nnpm install githubname/reponame\nBut it doesn't work for package.json: https://docs.npmjs.com/files/package.json#github-urls\n. I usually use two lines to separate top-level module content and one line to separate everything else. The CS style guide surprised me by suggesting that after class there should be three new lines or something like that, so if that popped up on me, I obeyed, although I don't think 3 lines are in any way better than 2.\n. I'm afraid many developers and users of Dredd do not know anything about signals, so I'm trying to move away from these terms, at least for user-focused info logging (I'm fine with such expressions in debug etc.). Also, I'm not sure SIGKILL will be appropriate term to use when we'll start supporting Windows, would need to check.\n. Yes. But I didn't want to snowball even more than I already did \ud83d\ude1e It would be probably worth to make a dedicated PR to fix some of the most outstanding linter issues in Dredd codebase.\n. I don't understand your comment. But when I look at the change, {options: options, body} could be written as {options, body}.\n. Good point! This could be handled in a better way. I'll address this in this PR when you finish the initial review.\n. This logging happens before logging level is set, so it can never make it to the output.\n. Yes. It's poor man's implementation of #625 - with @netmilk we decided we'll just print this kind of info in the beginning of every Dredd run for now.\n. The thing is, the Dredd option is --method, but accepts also multiple values, so in configuration handling, it's coerced to array while the original singular name sticks. Not ideal and it's on multiple places in Dredd currently. Confused me too, at the first sight.\n. Ha, it's not unnecessary. See @spawnHandler, @connectToHandler, etc.\n. they is a gender-neutral way how to refer to a person in modern English - https://en.wikipedia.org/wiki/Singular_they\n. I'm not going to change it for 3rd time :D subsequent pull requests welcome\n. @theodorton moved the repo to https://gitlab.com/theodorton/dredd-test-rails. @netmilk do you know which one of the repos (https://gitlab.com/theodorton/dredd-test-rails vs https://github.com/apiaryio/dredd-test-rails) is the one we should recommend in docs?\n. Ha, no problem! I assumed it's easier to fix the link than to maintain repo mirror :) Just wanted to know if the apiary repo is some sort of backup fork of the original repo or what. Not sure if it contains any differences from your repo, will have to check.\n. It's preferred to use isnt instead of != and is instead of ==, but it's just nitpick, it will work and it's okay.. What does and '/' or '' mean? I think this will just evaluate as follows:\nrequestPath != '/'\nAND\nrequestPath.slice(-1) == '/'\nAND\n'/'  # always true\nOR\n''  # always false. I think it's not needed to link the issue, the comment is explanatory enough and the issue will be fixed by the PR.. I've just moved this block above so it's not between two Ruby hooks tests.. Nock could not be updated until now, because they dropped 0.10 and 0.12 support in their new versions. See https://github.com/apiaryio/dredd/issues/660.. This file isn't actively used anywhere and should be deprecated by #422 in the future, but since it's still in the repo, I've updated it.. Is this a debugging leftover? Maybe it was meant as logger.info?. In this case, I'd probably call the variable args instead of pathGlobs (with subsequent changes in the code below).. Also, lately I tend to prefer to have all Dredd options in the GNU-style --option=value format, consistently. In the case of Dredd itself, both formats should work, I just wanted to choose one way to go and stick with it.. Applies also for\n\napi-description-cli-test.coffee\napi-blueprint-cli-test.coffee\n\nswagger-cli-test.coffee. Addressed in cf601cd.. Addressed in 2dfdca3. Addressed in 47ec552. Addressed in 1de2b69. Addressed in bd27e5f. It's not always possible. There are two different situations:\n\n\nThe callback receives (err, object) and I need the object:\n\n\ncoffee\nobject = undefined\nfn((err, obj) ->\n  object = obj\n  done(err)\n)\n\nThe callback receives (err, object) and I need a property of the object:\n\ncoffee\nproperty = undefined\nfn((err, obj) ->\n  return done(err) if err\n  property = obj.property\n  done()\n)\nIf I skipped the return done(err) if err in the second case, the line property = obj.property would blow up \ud83d\udca5 in case of error (accessing a property on null or undefined).. Interesting, https://github.com/chaijs/chai/commit/e5071edd8b3488d1d074c1bb9a6f6b36a64a4ff0 happened 2 years ago, but I didn't notice. I think I use assert.ok or assert.isOk unknowingly interchangeably for the whole time.\nIn that case, it would be probably worth to unify this across the Dredd codebase, but I wouldn't do that in this PR. Thanks for pointing this out!. In all the tests in this section the endless-nosigterm process is used to imitate a running server process. It's basically a placeholder to pass as an argument and for Dredd to spawn and then terminate. But in fact, Dredd requests http://127.0.0.1:#{DEFAULT_SERVER_PORT}, which is where the app = createServer() above serves. So Dredd is feeded with a dummy process to work with, while any of its requests target an express server created in the test.\nIn this particular test, the same goes for the hook handler process. We feed Dredd with a dummy endless-nosigterm process, but in fact the actual socket connection goes to the receiver created on the hookHandler = net.createServer (socket) -> line.\nThe test checks a situation when Dredd is successfully launched with valid server and hook handler processes, but during server request the hook handler is, for some reason, forcefully killed.. Added to To Do to find out. Thanks, good point!. I think we should be all right even with this:\ncoffee\nif transaction.request.body and not caseInsensitiveRequestHeadersMap['content-length']\n  ...\nAlso, I'm thinking whether something like this wouldn't make sense as well:\ncoffee\nif not caseInsensitiveRequestHeadersMap['content-length']\n  if transaction.request.body\n    logger.verbose('Calculating Content-Length of the request body')\n    ...\n  else\n    transaction.request.headers['Content-Length'] = 0\nWhat do you think?. It's one millisecond. I have the same concerns, but wanted your opinion on whether you think one millisecond is too much to have active waiting. You're the as close to HW as possible person here \ud83d\ude09 . Discussed in person - 1 millisecond is OK (too small time). I could not use in in that case. I'd have to iterate over PROXY_ENV_VARIABLES and check each item by caseless.has().. The indentation of the nested lists was not correct. It was just 2 spaces and it did not render correctly. Changing to 4 spaces helped.. This is the actual change in the file - added Termination section.. Fixing indentation again.. Unfortunately, MkDocs / ReadTheDocs render it just as code. Boring! Maybe in the future I'll attach my own CSS to render it as nicely as it's on GitHub.. I wanted it to be consistent with this: https://github.com/apiaryio/dredd/pull/761/files#diff-87b95d9ff10c614943af8e7c498228e5R4. But I get your point. Previously I even had it the way you suggest. I'm not sure what's better.. Basically, yes. It's there so the check function could rely that the first iteration is no different from any other iteration. Thanks to that the check function can be simpler.. \ud83e\udd14 good question. The code isn't very helpful to explain why there's try/catch and the # do nothing comment isn't either. And it's quite important, actually. I'll add a comment or something.\nExplanation: The kill test helper is meant to \"kill if the process exists, do nothing if it doesn't exist\". That's why there's no error handling for the taskkill subprocess, no return code checking, and why there's try/catch for the process.kill(), since it throws an error when the pid is a non-existent process.. Yup, it's non-standard termination of the hook handler. Note: The logic follows what was already there.. Addressed in efc753a568f19cf2a98885d4d043cdcc58f85657. This is actually generated from options.coffee (should be solved by #775). Edit options.coffee and then run npm run build.. AppVeyor failed for this PR, so I guess this doesn't work. When I've seen AppVeyor failing, I was afraid we will need to do some hairy debugging, but reading the code, the problem needs to be on this line, so luckily this is pretty isolated and should be easy to track down :). I'd prefer better variable name then item - e.g. path or file or something specific like that.. The same goes for input. Is it resolvedPaths? Is it something else?. \ud83d\udc4d honestly, I didn't even know there's customConfigCwd \ud83d\ude04 . This assert won't happen if the implementation returns empty actual array. assert.deepEqual(actual, expected) works for me, usually, in these simple cases.. Why this require was moved?. I haven't try it out, but I believe it should be okay with any Python 3. RTD has 3.5, so it might make sense to pin the version to that (at least by mentioning it in docs).. No :( https://github.com/jamesramsay/hercule/issues/378. No idea \ud83d\ude31 cc @abtris @nadade ... I guess any changes apply to all our package.json files as well.. Yup, I just wanted to be sure somebody won't execute this locally and cause some mess on their computer. Leaving out the if in the config file would make the config file's logic less clear, I think. So I better made this redundant.. Nope, it refers to the upcoming paragraph:\n```\n To display the Hercule syntax, escaping is needed, because this document itself\ngets processed by Hercule. But escaping by backslashes doesn't work inside\nMarkdown code blocks, so manual <code> element is added. \nBy default, [Hercule][] is attached as an extension, which means you can\nuse the :[Title](link.md)\nsyntax for including other Markdown files. All other extensions are custom and\nare automatically loaded from the docs/_extensions directory.\n``. It is related to https://github.com/jamesramsay/hercule/issues/378. Yup - http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/#drop-2-5-3-1-and-3-2. In the steps below this sentence I specified it should be 3.5 and higher, particularly because the build happens on 3.5.. I don't think this is necessary. Dredd is being published on CI exclusively, by Semantic Release. Also, theenginesfield clearly states\"node\": \">= 4\".. I don't like the subprocess call that much. Also, I'm not sure whether this would work correctly on Windows. If Go spec clearly states the default value is$HOME/go`, I think we can do something like\n```coffee\nos = require('os')\n...\nelse\n  gobin = \"#{os.homedir()}/go/bin\"\n```\nWhat do you think? This would also be synchronous and we wouldn't need to wrap it in the getGobin function.\nAlso note that typically, require statements appear on the top of each CoffeeScript (or JavaScript) file. It's not very usual to do conditional requiring.. Ah, I did not notice the commit message during review:\n\nSee https://iamakulov.com/notes/npm-4-prepublish/ , npm/npm#16685 , and https://stackoverflow.com/a/44136814/1098906\n\nCould you send this change in a separate PR, please? At the same time, I'm still not completely sure about it, because Dredd is being published on CI exclusively, so we could just make sure that package.json contents match the npm version which publishes the package. That basically means just pinning npm to a specific version in the Travis CI config and then having the package.json specific to that npm version.. Addressed in 3055aba. Ha, I though that was typo of yours, I did not know that's valid CoffeeScript \ud83d\ude04 \ncoffee\nreturn false if not contentType else contentType.indexOf('multipart') > -1\nwon't compile. I'll change it to normal if/else \ud83d\ude0f . Addressed in a4da5dd. I just realized we probably want to do this in case of any kind of error happening to the backend server child process. If the process errors, Dredd cannot ensure the testing will make sense, and it should stop testing and terminate. So I propose we actually keep @serverProcess.on 'error' here. What do you think?. I just realized there's one more side to the problem: The process starts, but Dredd isn't able to connect to it using HTTP. Looking into coverage, this scenario seems to be untested:\n\ntransaction-runner.coffee\n\nI hope it would still work as expected (Dredd fails all tests and it ends with exit code 1), but it would be awesome if we had a test for that as well. What do you think?\nIt should be fairly easy to test, with the same approach, just spawning an existing script, which hangs the same way as server would do (endless setTimeout loop?), but which doesn't handle HTTP in any way. Maybe there's even already a script like that in test/fixtures, I haven't take a look.. Hmm makes sense. Let's do this, then!. My attempt is in https://github.com/apiaryio/dredd/pull/862. If the section screenshoted  above won't get green, then the test is useless and my PR should get closed.. I was reading https://github.com/apiaryio/dredd/issues/867 before this one, hence my comment there. The only important part is that I'd suggest the name of the command to be build:watch instead of watch.. Why this change?. This has been already done in https://github.com/apiaryio/dredd/pull/871/files, but thanks!. Good. But given the changes, I would turn this test into sth like\n\nwhen Swagger document has multiple responses\nthe responses with status code 200 are not skipped\nthe responses with status code 500 are skipped\n\nI'd keep recognizes all 6 transactions, but the rest would iterate over expected values and inspect the matches more. I think this way we rely too much on what is in the fixture and what the structure is and the outcome of the test isn't very clear anymore.. Similar to above. Make an array of expectations about the individual matches and iterate.\ncoffee\n[\n  {statusCode: 200, skipped: false, reason: 'unskipped by default'}\n  {statusCode: 500, skipped: false, reason: 'unskipped in hooks'}\n  ...\n].forEach((expectation, i) ->\n  context(\"the transaction ##{i}\", ->\n    it(\"has status code #{expectation.statusCode}\", ->\n      assert...\n    )\n    it(\"is #{if expectation.skipped then '' else 'not '}skipped (#{expectation.reason})\", ->\n      assert...\n    )\n  )\n)\n(Just out of my head, can contain mistakes). I understand this was necessary for you to use your fork, but it cannot be accepted to upstream \ud83d\ude42 . Forgotten .only \ud83d\ude42 . I made unrelated change - I changed the configureTransaction() method to be synchronous (because there was nothing async inside...). It looked like a small change, but then I realised I broke a lot of unit tests \ud83d\ude48 Anyway, I'm sorry for that. I should have send that separately.. This is unrelated change as well. When there are no hooks, this method should skip directly to callback, not to feed async.timesSeries() with zero... I'm also guilty here for not sending this separately.. This is unrelated change, see https://github.com/apiaryio/dredd/pull/906/files#r152850808. This is unrelated change, see https://github.com/apiaryio/dredd/pull/906/files#r152850808. I'm definitely for using before where it makes sense, but I wouldn't share before blocks between multiple describes, as I think that's over the line of keeping the tests isolated. You don't want to go that way, it easily erodes.. Yup, I didn't know about it :) AppVeyor has some pretty cool features.. I should have been more specific - this just enables future implementation of https://github.com/apiaryio/dredd/issues/356 \ud83d\ude04 . I'd add also this assertion:\ncoffee\nit 'should not request server', ->\n  assert.isFalse runtimeInfo.server.requested\nOtherwise we wouldn't need the server in this test at all.. I've read the tests and the behavior seems right now. I think the implementation could be a bit more polished though. At this moment, we're abusing the interface of reduce to pass errors along, which doesn't seem very elegant to me. Since reduce is fully synchronous code, why not to use exceptions?\n```coffee\ntry:\n  files = hookfiles.reduce((result, unresolvedPath) ->\n...\n\nif not unresolvedPaths.length\n  throw new Error(\"Hook file(s) not found on path: #{unresolvedPath}\")\n\n...\n\n, [] # Start with empty result\n  )\ncatch err:\n  return callback(err)\nreturn callback(). I added some commits. Not sure if I actually addressed this comment though, because the resulting flow avoids reduce, but now the throw still happens in a .map() iteratee.\nI think throwing exceptions isn't anything a pure function couldn't do. It's not mutation, it's just one of the possible outcomes of the pure function.. This change looks suspicious. Removal of the ! flips the meaning of both the lines. Is that intentional?. I'm missing a comment mentioning the GitHub issue about /bin/dredd coverage being ignored.. Typo:\ndiff\n- is meants\n+ is meant. to the npm registry (?). styleguide link?. and the rules are disabled not to fit our own preferences, AFAIK, but to allow us to have dirty post-decaffeinate code which we're going to gradually improve until one day, all overridden rules are gone \ud83e\udd24. ...in the coverage directory. Wondering whether @realityking wasn't right about setting the target to 6.0.0 instead of removing it altogether.. Why is this necessary?. Ah, it's because of hooks. OK.. I'll check all upgrades from the licensing standpoint, but under this one I can comment right away.\ncoveralls do not have a license distributed with the package, nor they have the license in the GitHub repo. I tried to contribute a solution - https://github.com/nickmerwin/node-coveralls/pull/175, but there's no activity. When trying to figure out the copyright notice, I was surprised to find out the company uses two different names: \"Coveralls, LLC\" (on their site) and \"LEMUR Heavy Industries\" (lemurheavy - author organization of the GitHub integration apps). There is no contact page on the coveralls.io website, no way to figure out who actually runs the business. Maybe it's just a lack of organization, maybe sloppiness, but it doesn't really build trust.\nAt the same time, the library itself is at @nickmerwin's personal GitHub profile, and the author field in package.json mentions someone called \"Gregg Caines\". The maintainers field mentions nick@coveralls.io, so I suppose it's not Nick's \"hobby\" project. Anyway, it's a mess. And I've seen a lot of npm packages, but this is one of the messiest I've seen.\nI've tried to contact the maintainers over the GitHub issues and by email. No response. At about the same time (not implying anything though) the integration stopped to work under Dredd's Pull Requests. I tried to debug the issue like 10 times with no success. I tried to contact coveralls.io, no response.\nHonestly, I think I'm giving up on Coveralls. While I believe the test coverage is very important, I also believe there are Coveralls competitors and we should go with them. So if I may, I'd kindly ask you not to upgrade the coveralls dependency and if you have a spare time, a Pull Request removing coveralls from the toolchain would be awesome.\nI discovered following alternatives:\n\nhttps://www.codacy.com/\nhttps://codeclimate.com/\nhttps://codecov.io/\n\nDo you have any experience with any of them?. Yeah, I really tried hard to fix it and to continue using Coveralls before I gave up \ud83d\ude04 . Is this standard Node.js library or is it something user needs to install? dtto with stream-to-string. The examples should use standard library as much as possible, or at least mention any dependencies explicitly.. The title is \"Paykan\", but the photo is \"peykan\". Is it a typo? This is really just a nitpick, but it could contribute to confusion of inexperienced readers.. Wow, didn't know about this one. I thought it's it.skip(. This is global setting (process.stdin) in a section of code relevant to spawning a server process. As the server process isn't the only child process Dredd spawns (server process & hook handler) and the setting influences both child processes and the Dredd process as whole, I wonder whether this shouldn't be on a common, neutral place.\nMaybe DreddCommand#constructor?. I can see the reasoning on why it's in a separate file, but in that case let's call it ignore-pipe-errors.js :). Shouldn't this be\njs\nif (proc.stdout) { proc.stdout.on('error', () => {}); }\nif (proc.stderr) { proc.stderr.on('error', () => {}); }\nif (proc.stdin) { proc.stdin.on('error', () => {}); }\n?. Nitpick: The comment could be in the ignore-pipe-errors.js file as it's basically a documentation of the ignorePipeErrors function's purpose, but YMMV. I'm fine leaving it like it is.. It's for the Rust hooks. I thought crates.io is something like pypi.org for Rust.. I think we don't need this output as many times people do not use Dredd with dredd.yml and this would be always printed out. If there's any issue in this case, we can use the verbose logging above to do any debugging, which logs the contents of configPath.. I'm not sure it's safe to assume ./dredd.yml means the root of the project directory user is currently working on. For robustness, it should be concatenated with process.cwd(), which can be actually set to a custom value in the CLI. Neither the current implementation nor yours respect that (which might be actually the bug):\nhttps://github.com/apiaryio/dredd/blob/7da6936ab21621bc2e8722a01608dc6718a9e8dd/src/config-utils.js#L26 . We need to change wording of this, because it's not entirely true: https://github.com/apiaryio/dredd/issues/455#issuecomment-218673919 Also, in your implementation this comment gets omitted if Dredd uses ./dredd.yml, which isn't correct.. I think we should treat this situation as an error.. Once we have it in the tool chain only to verify --require=coffeescript/register works, we could actually upgrade it to 2.x to get rid of the annoying warnings. But that's just a note for future from the top of my head, nothing to care about now.. Can we test and ensure whether Dredd is able to gracefully handle errors here?\n\nDredd aborting with a sane message in case the path is wrong\nDredd aborting with a sane massage in case the required module blows up (at least try/catch synchronously or something). It doesn't interfere with any other headers. It detects the name of the content-length header if it exists, and sets it to the correct value. In case it doesn't exists, it adds the header. IMHO the name is right.. lol (inspiration). I did some research and dropped some thoughts on this to https://github.com/apiaryio/dredd-transactions/pull/179#discussion_r206897044. Let's continue there.. \ud83e\udd14 . I'll trust you this is more javascriptonic  \ud83d\ude04 Python doesn't have switch so I never think of using it, even in situations where it probably makes sense.. ae58682. 1f6c251. Those are good points. I'm recording them here: https://github.com/apiaryio/dredd/issues/353#issuecomment-422000571. I don't think so \ud83e\udd14 I've seen similar changes in the past, not sure why this happens.. I think I went with this setup in the past for some reason. Maybe because there were some discrepancies between the two themes and I wanted to have the docs always with the latest fixes from RTD? I don't recall why.\n\nWe can definitely try it out though.. I think it is:\n\nBut I'll have to rewrite them almost from scratch anyway...\n\nI thought of maybe having a short version in MD, which would link the long version. And the long version can then document everything without intimidating people who just want to send a simple PR.. That's a good idea \ud83d\udc4d I'll play with that as a follow-up.. It is a GitHub-specific thing to skip the list of files and to navigate the browser to the file-on-display's content.. \ud83d\ude40 . I'd like to have a single source of truth. FOSSA is nice, but could be misleading as it could have different results or opinions than Oracle's internal processes. Since @w-vi's squad is already internally working on a tool to provide some information under PRs, I'd rather wait for that one and to lobby for the tool to be Open-Source-repos-compatible.. Yeah, well, I wrote the new contribution docs three weeks before the ghissue extension has existed \ud83d\ude04\nBut it's a good point I'll be probably forgetting to keep this list updated \ud83d\ude1e . What would a \"test\"/\"test-local\"/\"preflight\" command do? I don't get the TODO. Nitpick: extra space before the list item. > Not usually a good idea to use {} and [] as default arguments to a function in Python. Advisable to use None\nHa, I know that, but I didn't think of this line at all as it was just copy-pasted from some Sphinx extension sample code \ud83d\ude40 . For tests, coverage, etc. I'd stick to CI and ad-hoc remediation and we don't need to put them into the guide.\nFor the commit message, I'd like to alert people in advance, as it's PITA to change it afterwards for both them (not so many people feel comfortable with the rebasing flow even though they're using git) and for me (I need to get their branch from their fork etc.).\nThe npm run lint validates the commit message so it is the preflight command you're looking for. It is even mentioned in the PR template: https://github.com/apiaryio/dredd/blob/master/.github/PULL_REQUEST_TEMPLATE.md. It is so hard to orientate in them I want to keep them, even if only for my own reference \ud83d\ude05 . Note for myself: We should link the full guide from https://github.com/apiaryio/dredd/pull/1139 here in the future as people can get into problems and should be directed to a place where they can troubleshoot.. I'd mention that to run Dredd locally and to manually test what you've developed you need to build the code and you can run ./bin/dredd. Not sure how to write it in a concise way.\nIt would be great if we can get rid of the build step soon to simplify the process.. I decided to keep the commands there. The official docs do not contain easy-to-copy-paste examples and people who don't know how to work with npm might get just more confused on what they're supposed to do to fix the problem. I'll link the docs tho.. (These proxy sections are added based on real people struggling with it and reporting me back that the installation guide doesn't work for them... and they were not very skilled with npm.). Funny. So from the examples it looks like they understand uppercase as \"capitalization\", even though Wikipedia describes it in the sense in which you understood it. The reasoning,\n\nWhy? Names are for readability, not to appease a computer algorithm.\n\nalso supports the idea that they mean uppercase. I think I will send a PR \ud83d\ude04 . https://github.com/airbnb/javascript/pull/1972. Once I get to rewrite this to use source maps with line numbers, I think I can get rid of the whole module.. I think the a got in because it was a billion, but then I changed it to billions \ud83d\ude02 . Oh this is just unindented. I don't like the code, I could make a comment about every single line of it myself, but I don't want to go into rewriting it now, especially given I think I should be able to drop the whole file soon.. Oh I forgot to commit this. Will do in a follow-up.. Hmmm, I didn't think of this behavior of console.error.. It actually blows up if one passes an exception to process.stderr.write(). It's the same. This is more broad as I think it tests for all truthy values. I did not want to change the test itself for now, so keeping it there.. Ideally, this wouldn't need to be an end-to-end test. We could call new Dredd(), then run it and capture what happens through a custom EventEmmiter, but I wasn't really in a mood to get it working now as Dredd's configuration through JavaScript is ugly. This is an initial proof-of-concept of this approach and we'll need e2e tests later as well anyway, so this code is still going to be useful even if I get the JS interface working.. This is necessary to prevent ESLint warnings on step definitions, where it makes no sense to give names to every function and we need the function expression as we need to access this.. suggestion\n~~~~~~~~~~~~~~~~~. suggestion. I don't think there is such case in real world usage, but many existing tests didn't pass without it, because they don't properly init the configuration. So it seemed easier to do this fallback in the codebase than to debug all the (unit)tests and set hookfiles to empty array everywhere configuration is being used as an input \ud83d\ude1e . My plans are to revamp the JS hooks in some future after this. As I commented above, I can even imagine someone contributing relevant changes to the JS hooks when this gets merged. My ideas around the JS hooks API would be:\n\nsync support (no callback parameter, no return value)\nasync callback support (accepts callback)\nasync promise support (returns promise)\ntested async/await support\ntransaction.fail = ... gracefully fails the hook\nthrown error gracefully fails the hook (both sync and async)\ncallback(error) gracefully fails the hook\nrejected promise fails the hook\n\nAlso thinking whether there's a way to make the hooks pure functions in the future, but I'd leave that aside for now as such change is a big one and sort of spans across the languages.. suggestion\n  const filePath = pathmodule.resolve(untildify(path));. suggestion\n  const filePath = pathmodule.resolve(untildify(path));. suggestion\n  const filePath = pathmodule.resolve(untildify(path));. suggestion\n        sinon.stub(fsStub, 'writeFile').callsFake((path, data, callback) => callback());. suggestion\n        sinon.stub(fsStub, 'writeFile').callsFake((path, data, callback) => callback());. suggestion\n      it('should write buffer to file', done => emitter.emit('end', () => {. It's only for clarity, -l stays. I take it for granted the optimist deals with the options correctly, so they're not tested in both versions, usually just with one. If the CLI was better isolated, why not, but at this point it just an overhead.. That's a good point.. Yes, I realized this when reading one article about CLI apps later after issuing the Pull Request already. I'd like to do it exactly as you write, I think it's easy to detect TTY in the Node.\nI wasn't sure though whether to snowball it here or to make the change separately. Also, I'm not sure the stdout and stderr are completely well separated (they weren't even before this change, the logger seems to print each message to whatever it feels is right... I want to fix that as a next step as well), which could make this complicated now.. Good point, will do in a separate PR. It doesn't seem that anyone ever thought about consistency in that.. js\n// This thing-a-ma-bob here is only for purpose of testing\n// It's basically a dependency injection for the process.exit function\nIf I'm ever touching that code, I'll do that in order to find and implement less crazy way how to test how the program exits.\nA closure could be an improvement, but I'd rather see the code to go away.. I'm intentionally doing evil here by skipping the deprecation period for things to allow myself a major series of breaking changes to tidy up Dredd's codebase.\nThe major release version should be a warning for people to read the changelog and there are always clear steps they need to take to make their setup work.\nSo yes, I could deprecate this gradually, but I'm afraid I'd end up managing deprecation warnings in the codebase instead of going forward with cleaning up the project from technical debts the fastest way I can. What do you think of this? Is it way too evil?. Yes, exactly my wish as well. At this point I'm only separating the loggers, but ideally the reporters would render the output using something completely else than Winston and whatever it is, it would be dependency injected for sure.. Tried to improve this in 67b6b2e46ae4e272ef6011fbf0daa9032b42d8a3. Tried to improve this in 67b6b2e46ae4e272ef6011fbf0daa9032b42d8a3. I'd say there is:\n1. Dredd (reporter) standard output to communicate results to the user, in this PR represented by the reporter-specific logger\n2. Dredd logging to log details about running Dredd itself, in this PR represented by the original logger\nThe 1. contains all information about the tests, i.e. including test failing assertions or tests erroring (e.g. not able to connect to the server). Such errors are IMHO specific to the reporter's output method - they get printed out, they can get sent away over an API, or serialized into JSON or TAP.\nThe 2. contains all details from Dredd's runtime (debug) and application warnings and application errors (i.e. not errorring tests).\nWith this separation in mind, I think the warning you point out is an application-specific warning, and as such should be handled by the original logger. It's just a coincidence that reporters can produce application-specific warnings and errors as well. I'd say if Dredd cannot connect to server under test, it should be considered \"output\", but if Apiary reporter gets error response from Apiary, it should be considered \"logging\". So I might check the file again and perhaps move more errors into logger.\nI think the reporters should ideally be provided with some means to do application logging, but perhaps that should get injected to their API as well.. Addressed in 01b042e. Seems nice! I also worked on some localized apps before, mostly using Babel, which leverages gettext. Using constants like this could be a nice poor mans gettext. Would you file it as an idea to issues?. You're right. But while I could translate some of the options to the new ones, certain features are just gone. What word should I use to alert the user about the fact the feature is gone? If I don't do this, optimist silently passes even with extra options (yeah, facepalm).\nI want Dredd to fail fast in case I know someone just tried to use a feature which is not in place anymore.. > I think you can rename it to now include \"deprecated\"\nTook me a moment to parse the sentence, but if you meant\n\nI think you can rename it to not include \"deprecated\"\n\nthen I could do that, yes \ud83d\ude04 . ff55694. \ud83e\udd14 I'd expect . to include ./bin. Oh I guess it's because ./bin/dredd doesn't match *.js. Okay then.. Oh, hmm. I don't think that's very useful for application logging. It seems to me it would rather obscure it for the reader. Perhaps for the output of the reporters, IDK. I don't see that much value in having the strings at one place if we don't do localisation. It's easier to read and edit it in place, within the context of the code which triggers it.. I have to admit I've written the tests ex post. They were useful in catching bugs in the function I wrote prior to them \ud83d\ude13 \nYour points are completely valid. I consider the whole file to be a brownfield. The fact Dredd is in general silent about mistyped options is terrible, but it is an existing behavior. It's solvable probably only by switching the CLI options parser and changing how the configuration is processed \ud83d\ude1e\nPerhaps _coerceRemovedOptions could have been checked also by an integration test, but ideally I remove all the checks after a period of time with a major release and introduce a better configuration management for Dredd (#1101).. tl;dr I completely agree, but I think fixing this is out of the scope of this PR. I added ugly things, I know it, and I hope I'll have time to improve the CLI later. And I hope if I won't have time to do it, future generations of people working on Dredd at least find these comments and won't hate me that much \ud83d\ude4f \ud83d\ude04 . This is an attempt to have at least minimal dependency injection for tests. Not a great solution, but will do for now. I want to refactor this part of the codebase further in future PRs.. I plan to remove this whole file in the future.. This section is a bit messy, but works for now. I plan to continue refactoring this code further to make it more readable and testable, but didn't want to snowball everything into a single PR.. Using the JS Sphinx domain here. I changed the interface for this to a plain array of strings, as I don't see a reason for the user to provide an artificial filename/URL/... or anything like that. In configuration.js this is then coerced to something like\njs\n[{ content: 'FORMAT: 1A\\n# Sample API\\n', location: 'configuration.apiDescriptions[0]' }]. This function is intentionally here and in the configuration.js as these files are to be further refactored and I don't want to introduce more dependencies between them or any \"utility functions\" file just because of this.. This function is intentionally here and in the Dredd.js as these files are to be further refactored and I don't want to introduce more dependencies between them or any \"utility functions\" file just because of this.. Will be renamed to this.files as the next step, as it is something completely local to the Dredd class \ud83d\ude44 . I didn't bother refactoring this part now. The multiBlueprint is something used only for the following code further down the file, and I didn't have the time to figure out all the consequences of it yet:\njs\n    // Backward compatible transaction name hack. Transaction names will be\n    // replaced by Canonical Transaction Paths: https://github.com/apiaryio/dredd/issues/227\n    if (!this.multiBlueprint) {\n      transaction.name = transaction.name.replace(`${transaction.origin.apiName} > `, '');\n    }. Not robust, but will get fixed later: https://github.com/apiaryio/dredd/issues/1257. I'd like to have more separation between what user provides to Dredd and what's Dredd's resolved, internal configuration, but that requires to pretty much revamp how Dredd gets configured. So doing this for now, coercing user's input to a data structure Dredd then uses internally.. I didn't really try to make the tests better, I primarily wanted to make them pass.. There is sorting on multiple places, because Dredd currently resolves the apiDescriptions in an asynchronous way (downloading remote API description files, resolving glob patterns, ...), i.e. in non-deterministic order. To make the resolution deterministic would mean to rewrite half of the Dredd.js file, so I opted for sorting the array in tests for now.. It is only for the purpose of printing it out in the annotation. So if the annotation text is considered to be a public API, then this should be feat, but otherwise no. I don't know why this code creates the transaction name from scratch, but since I'm about to delete it, I don't care that much.. That's a subject of discussion / pending design. I need to read the spec first to properly understand what's possible to describe with it and what default behavior makes sense for the users.\nEventually, I'd like to unify the behavior across the formats, but that's a long way to go as that's something which depends on the transaction names 'epic' \ud83d\ude2c . I guess I could use a custom sorting function in that case. It's such a pain to sort in JS \ud83d\ude1e I miss Python's key approach.. \"other than OpenAPI 2 document\", so it should be anything else than Swagger. For consistency, yes. Or the filename to be .json.. Oh, looking into the code now and it's because Dredd takes whatever Fury returns as the first media type from the .detect() function. That way it always gets application/swagger+json, even for YAML files.\nIt's not an issue for Dredd, but it is an issue once it's propagated to the transaction object. This is actually a blocking problem \ud83d\ude1e . Solved in a dirty way in 32f3864. Typo: phyton. Typo: phyton. If it's for the sake of portability, path.join() can correctly handle this on Windows.\n(The reason why Windows tests were failing was actually the fact I wasn't using path.join() everywhere in the tests, which translates the separators.)\nIf it's for the sake of readability, the current version feels better (to me).. ",
    "weejames": "It would be great to see this made available. The lack of this makes Dredd difficult to use behind our company proxy.. ",
    "cilf": "hey guys,\nthe suggested workaround is not working for me :-/ \nI have a \n```\nGet photo [GET]\n\n\nResponse 200 (image/jpeg)\n\nHeaderscontent-length: 6347\n\n```\n\n\n\n\nbut it fails with fail: body: Real and expected data does not match.\nDo you have any idea how to skip validating image data and only check the response status code?\n. Hey guys,\nI'm having same issue as @jolleon. Do you have ETA on this getting fixed?\n. Hi! Thanks for looking into it.\nI just tested the behaviour with latest Dredd@1.0.7 and unfortunately it still ignores errors in objects in arrays. \nI'd rather keep this issue since to me it looks like it's still the same problem. And the title says it all :-)\n. ",
    "mikz": "Having the same issue. Would be nice to have at least a working workaround.\nLooks like that would be properly supported by https://github.com/apiaryio/api-blueprint/issues/20\n. Installed latest version from npm and have the same issue. Also rails 5 + puma stack.\nedit:\nUnfortunately it fails even when the server is running. It just doesn't make any request to it.\nedit2: because puma starts on ipv6! \nso starting the server with bin/rails server --bind=127.0.0.1 makes it work.\n. ",
    "SimonRichardson": "Indeed. Thanks.\n. ",
    "TangMonk": "Thanks ,I solved, It OS X 10.9.2 problem, I update node to latest version, everything is ok.\n. ",
    "TNikolai": "TangMonk could you write which steps concrete you made, to update node?\n. ",
    "peterstrapp": "I'm templating parts of the blueprint file, substituting place-holders for values. I can't know upfront what endpoints exist as the blueprint file will be modified by other users. I don't want them to have to modify the hook file each time an endpoint is added.\nIf there's a way of getting the list of endpoints pragmatically, within the hook file, then your approach would be ideal.\n. Thanks for the suggestion, I've just given it a try. Unfortunately it seems that 'transactions' isn't populated until after the hook file is executed.\n. Yes, I'm using Dredd v0.3.1.\nExecuting the below hook file prints an empty object (\"{}\") therefore, when attempting to execute map on it (as in the code above) it fails. \ndredd test.md http://a.domain.com -d -m POST --hookfiles=hook.coffee -l error\n{before, after, transactions} = require 'hooks'\nconsole.log transactions\n. ",
    "BrianHicks": "I'm seeing this too, also on Dredd v0.3.1.\n. ",
    "vadim-hbo": "Ditto Dredd 0.3.9\n. ",
    "dbryand": "I'm doing something very similar to this, but I set it all up in the beforeAll hook:\n``` javascript\nvar hook  = require('hooks');\n// This patches Dredd so that we can run a function beforeEach.\nfunction setBeforeEach() {\n  _.each(hook.transactions, function(transaction) {\n    var hooked = hook.beforeHooks[transaction.name] || [];\nhooked.unshift(function(transaction, done) {\n  console.log('seen before each');\n  done();\n});\n\nhook.beforeHooks[transaction.name] = hooked;\n\n});\n}\nhook.beforeAll(function(done) {\n  setBeforeEach();\n});\n```\n. This is a great idea--thanks!\n. ",
    "conord33": "Awesome patch @dbryand!  I generalized it, in coffeescript, a little more to be used like the before hook.\n``` coffeescript\nbefore each patch\nhooks.beforeEach = (hook) -> \n  hooks.beforeAll (done) ->\n    transactionKeys = Object.keys hooks.transactions\n    for key in transactionKeys\n      hooked = hooks.beforeHooks[key] || []\n      hooked.unshift (transaction, done) ->\n        hook(transaction)\n        done()\n      hooks.beforeHooks[key] = hooked\n    done()\n```\nThe method can be called like this\ncoffeescript\nhooks.beforeEach (transaction) ->\n  hookToRunBeforeEachTest()\n. ",
    "kuba-kubula": "Hi everyone,\nIn last month Dredd has undergone some refactoring (it also touched the hooks implementation) so the best approach right now is described in hooks documentation where the beforeAll workaround is taken from pieces of code here and there.\nI'll keep this issue open until Dredd has direct support for the beroreEach method, ok?\ncc. @conord33 @dbryand @peterstrapp @ecordell @BrianHicks \n. :+1: looks good to me\n. @cw-peter Latest version of Dredd shows line-numbers at the same position, but in a human-readable format now. :white_check_mark: \n. Fixed in #161 \n. Looks good, just the Buffer.byteLength stuff would make me worried in future.\n. @demianh I'm looking into this regression. It looks like there are problems when we're passing all the context (hook especially) around.\n. I've fixed one possible regression that was triggered by our last release, also I've added a regression test about this feature request... So it shouldn't (\u2122) happen again.\nThe code to use hooks beforeEach might look like e.g.:\n``` coffee-script\nhooks = require 'hooks'\nNew hooks helper function\nhooks.beforeEach = (hookFn) ->\n  hooks.beforeAll (done) ->\n    for transactionKey, transaction of hooks.transactions or {}\n      hooks.beforeHooks[transaction.name] ?= []\n      hooks.beforeHooks[transaction.name].unshift hookFn\n    done()\nhooks.beforeEach (transaction) ->\n  # add query parameter to each transaction here\n  paramToAdd = \"api-key=23456\"\n  if transaction.fullPath.indexOf('?') > -1\n    transaction.fullPath += \"&\" + paramToAdd\n  else\n    transaction.fullPath += \"?\" + paramToAdd\n```\ncc. @demianh\n. @netmilk Understood most of the problems about \"why is there console, why is there the config.options.custom.env.\nUnfortunately, you can't simply mock process or even process.stdout. Those two can't be even cloned. If you try to mock these two, you are facing problems deep in your dependencies. Really.\nThere are some articles about it, programers suggest to actually pass console or stdout into the script, and work on top of that. That is the reason I am passing stdout or console separately.\nhttp://yahooeng.tumblr.com/post/75054690857/code-coverage-for-executable-node-js-scripts\nOther option would be to use config.custom instead of taking it from the really deep config.options.custom.\nWhy I chose custom.env? Because there are other possible things you actually want to wrap. One is env, the other one would be a stdout, then maybe anything else like process.exit function? The list gets longer really soon.\n. Please welcome 96% coverage\n:tada:\n. Wheeeeeeeeee :tada: \n. iojs and node 0.12+ support has been added in https://github.com/apiaryio/dredd/pull/179\ndredd release incoming soon in your npm install\n. Hi @jdrake,\nI can assure you that Dredd will definitely use Attributes in future. It will take us some time to implement all the MSON + Attributes things, but\u2013hell yeah :bomb: :christmas_tree: \n. Will be released soon, fixed at the moment with https://github.com/apiaryio/dredd/pull/179\n. @netmilk thanks\n. @netmilk I just added it to the description of the PR, thanks for reminder. And also - it might solve #175 ... maybe.\n. @netmilk I've reverted the fixtures, restricted sandboxed hooks use of console (with a test for it) and fixed one more typo and one leftover (see last 2 commits).\nFeel free to merge.\nAnd btw, this should be 0.6 version, since it breaks usage of console.log in sandboxed hooks.\n. @netmilk is it better now? _logs and deduplication. And one more test for transaction-runner.\n. @netmilk I might be missing some places when updating the documentation, but do we want the hooks.log function to be described with a separate example, or is usage of hooks.log in other examples \"enough\"? If the usage is ok, can we merge this and bump to 0.6 please?\n. Hi guys, there is an upcoming fix in Dredd. I'll dig much deeper into this, as it just looks like something async developers might not be aware of = variables sharing / context loosing.\nJust please wait a bit.\n. @philsturgeon Thanks for finding this missing link. I'll fix that soon. It's in Dredds' docs folder.\n. @netmilk please merge\n. @netmilk please read and review and possibly merge\n. @netmilk just one small, but important fix regarding beforeResults\n. ### Large ToDo\n- refactor hooks running from \"sync\" into \"async\" callers (without proxyquire)\n- process.exit (used at Hooks) should be some runner callback to bubble up through all the flow back to dredd.run callback\n- DRY hooks-worker (factory for ...All and ...Each)\n- Get rid with hard sleeps with while true with refactoring to async callbacks\nMaybe:\n\nintroduce \"prepared\" message from worker/process/ruby/python back to Dredd that the hook-machine is prepared so Dredd can actually start connecting to the server (or introduce a Dredd.connectToHookMachine with a retry mechanism)\n. Please see @netmilk @w-vi see the Large ToDo comment above - we just got caught by it in issues with hooks-worker-client\n. @netmilk so is it free to merge?\n. Unfortunately Coveralls is in READ-ONLY mode due to database Upgrade event today... :(\n. Note: Speed depends on speed of client request body size and server response body size.\nThe larger the request-bodies and/or response-bodies, the more Gavel must validate.\n\nIf the response body is JSON, Dredd also tries to compare objects based on JSON Schema, and/or against the example response (if JSON Schema is not present). And that definitely doesn't have linear complexity based, unless the response is really really similar, or almost the same.\nAlso to consider - network speed effects, server backend times... Those are too many effects.\nThings to consider - look into comparing the real transaction-times of all transactions.\nAnd it'll be also great to discount time of \"request sent, but still waiting for server response\" from the transaction-time.\n. Is coffee-script really used as a production dependency?\n. the same as with coffee-script\n. Should the body be different from the previous Example-Action request-response pair, so it can be actually tested, and the response / request are not taken from the first example-action pair?\n. :+1: \n. Can we be assured that transaction.request['body'] will always be only String, without any multi-byte chars?\nI'd say this will fail when used together with utf-8 characters.\neasily fixed with Buffer.byteLength(transaction.request['body'], 'utf8')\n. I'd prefer to see it with some extension, thus anyone else wouldn't be mistaken it is path to directory, but path to a file.\n-> \"./path/to/blueprint.file\"\n. file or filename\nalso a typo reqiured vs required\n. You used file key in test-run definition . Please make these two choices the same.\n. I'd probably add a line with \"setup\" for the filename here too. Something like:\nblueprintData.filename ?= blueprintPath\n. it's actually not a hack, since nock developers even say it loudly as a PROTIP https://github.com/pgte/nock#protip\n. fixed\n. I'd love to use https://www.npmjs.com/package/caseless here.\ncaseless(requestOptions.headers).get('content-type')?.indexOf('multipart') > -1 ... but I can see we might refactor more parts of it soon.\n. please use Buffer.byteLength here too (as seen before)\n. My only hope is that if you do modify the body during hooks, and you do this ^^^ replace by yourself, you won't introduce double \\r\\r into the body.\nE.g.: \n1. user has hooks to modify (replace \\n with \\r\\n) request body before transaction happens\n2. we will do this replacement again\nSo I'll propose to check that the body does not contain any \\r character. If it does, we don't have to do the replacement by ourself.\ncc. @netmilk \n. you are not checking order of calls.\nI'd vote to use loggerStub.info.firstCall.calledWith 'first'or similar.\n. Definitely four ;-)\nFeel free to fix it.\nDne 18. 3. 2015 18:26 \"Adam Kliment\" notifications@github.com napsal(a):\n\nIn test/unit/utils-test.coffee\nhttps://github.com/apiaryio/dredd/pull/161#discussion_r26685990:\n\n\nmaybe it is\nif you say so\n  +\n\n\nResponse 201\n  +\n\n\nyup!\n\"\"\"\nprotagonist.parse blueprint, (err, results) ->\nwarnings = results.warnings or []\nranges = (utils.warningLocationToRanges(warn.location, blueprint) for warn in warnings)\ndone err\n  +\nit 'shows ~ 4 warnings', ->\nassert.lengthOf warnings, 4\n  +\nit 'prints lines for those three warnings', ->\n\n\nthree or four?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/pull/161/files#r26685990.\n. wirth -> with\n. I'd vote to use options.coffee file as source for aliases here. It might resolve any possible problems with argv\n\nAlso - mutating args is probably not the best idea.\n. It'd be good to check for presence of the file first via fs.existsSync\n. Ok, please ignore... I see it down in the code now\n. these pieces probably can be DRYied out.\n. @netmilk this if really bothers me. It's hard to read, really. :-1: \n. @netmilk answers.apiary is true && answers.apiaryApiKey && config.custom?.apiaryApiName ?\n. this could be easily written as if action.attributes.uriTemplate, or am I missing any specialities here?\nProbably \"0\"?\nWe might expect that uriTemplates start with \"/\" all the time, so they are true if set.\n. Empty string equals to false when used in if conditions.\n. this is a testfile, copying file naming conventions from other test files.\n. It allows you to have logs more verbose, if you want to, according to the log-level you are using.\nBecause it uses the same logger as the rest of Dredd, it actually is usable when used as\nhooks.log('verbose', 'Just starting validations')\n. hooks.log now behaves as calling logger.info logLevel, things (as it works for winston - our logging platform).\nBut I would really appreciate to use just hooks.log as simply as possibly. So no, it is not the same as console.log since it obeys the used log-level.\nAlso you can use console.log with as much arguments as you want, but they might get stringified, instead of rendered through util.format\n. None, but in coffee-script, \" are used for string variables interpolation.\n. It is needed, because for sandboxed context libraries - only this file is required as _log property and used along the code.\n. Why only ECONNREFUSED? ENOTFOUND or EHOSTUNREACH are very similar.\n. typo: warInings\n. you know I like coffee-script, can this line be more coffee-scriptish? E.g. if error.code in connectionErrors\nand also - connectionErrors might become a constant at the beginning of the file?\n. typo - transaciton\n. @netmilk Can you please write it more DRY-way? The HTTP vs HTTPS share a lot of logic, but differ only in the message written to verbose logger.log. Thanks..\n. Am I about to see this array defined at many places? If so - DRYness? Put it into some utils, reusables?\n. If you reorder these things here ( @errors.push, logger.error and the if error.code in connectionErrors), you can write just one if :+1: \n. :+1: I like this\n. > --- @ netmilk results or result? blocking ---\nnow I see it in apiary-reporter :-1: \nresult: test['results']\n. Maybe a comment about \"using similar interface as Gavel to keep better interoperability\" would be nice.\n. please report that into Changelog as breaking change\n. wait wait wait... general is used to report connection errors, not hooks emitted Chai Assertion errors.\nI'm :-1: here for the re-use of general here, since it mixes up with connection errors together and you'll have a list of connection error together with possible before or after hook error?\n. please be consistent in style. Either use [ ] everywhere, or use dot-notation where applicable (above or below in a lot of places).\n. is this duplicating a lot of things onto just another object? Who has introduced that and why?\n\n. inconsistent \"copy\" of results compared to the previous comment https://github.com/apiaryio/dredd/pull/222/files#diff-ecda976d2e1aba1fa8512ff2c6e505d7R83\n. Why does transaction should have results object?\n\nShouldn't it be just at the test subkey?\n. I'd prefer to use testOrigin be untouched, and test = clone(testOrigin) :+1: \n. again, the same problem with cloned and origin. In first batch of beforeEach (in the beforeHooks) you just set the skip to true.\nBut - you've changed the transaction [origin] in that.\nclonedTransaction is mutated again and again because transaction (origin) is changed first.\n. should be data? or just local variable with the same name as the clonedTransaction / transaction?\nRight now it is a bit confusing.\n. please test for 'warning' too, or add another it to test the severity warning (or add the warning filter into the .map function :100: \n. dtto - isn't checking severity of the message although the it message says so\n. dtto\n. should be beforeValidation\n. I wonder - didn't we wanted to keep the order of hooks as it actually should be in this one-long-example?\nSo please move it after before.\n. dtto about \"move this behind before hook\"\n. should it be test.results['general'] ?= [] ? Because before hooks might've added something there already?\n. should be opposite order of beforeEachValidation and beforeValidation?\n. typo: Addd vs. Add\n. unfinished sentence?\nalso the link should be docs/hooks-new-language.md file?\n. link should probably point to docs/hooks.md (not hook.md)\n. typo: Sndbox vs. Sandbox\n. should beforeEach or afterEach be beforeAll or afterAll respectively?\nbeforeEach receives one transaction object\n. all links should point to docs folder\n. comment above said at least runner.configuration is always accessible, so no need to runner?.configuration?\n. reqBody can't be false here?. ",
    "OrCharles": "I am also experiencing errors with this on OS X 10.10, here is my console output:\n```\n$ c++ --version\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin14.1.0\nThread model: posix\n$ echo $CC\n```\nnothing is outputted for $CC but I do get the same output w/r/t protagonist/node-gyp as shown above:\n```\nnpm ERR! Darwin 14.1.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"update\"\nnpm ERR! node v0.12.0\nnpm ERR! npm  v2.5.1\nnpm ERR! code ELIFECYCLE\nnpm ERR! protagonist@0.17.1 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the protagonist@0.17.1 install script 'node-gyp rebuild'.\nnpm ERR! This is most likely a problem with the protagonist package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls protagonist\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/cwisniewski/Documents/dev/git/api/tests/node/npm-debug.log\n```\nShould I reach out here as well? https://github.com/apiaryio/protagonist/issues\n. Any progress on this?  I am really looking forward to testing resources that are non trivial\n. many thanks, I was about to start patching code myself :)  let me know if you want a hand with anything\n. @tu1ly thanks, let me know if there is anything you want me to do: testing a beta release or something\n. bump\n. +1000 Karma points\n. ",
    "bugthing": "i can not npm install dredd as it depends on protagonist 0.17 and node 0.12.2 (on arch linux) does not build this .. it will however build protagonist 0.19 .. therefore it would be super rad if dredd depended on version 0.19 of protagonist\nnot sure why, etc., just reporting my findings\n. ",
    "kylef": "This issue is due to installing dredd with NPM on NodeJS v0.12. I experienced it before, the current release of dredd requires NodeJS v0.10 due to depending on an older protagonist that doesn't work on NodeJS v0.12.\nTL;DR: dredd 0.5.0 will require NodeJS v0.10 instead of v0.12 (latest).\n. Second though, although this would simplify the usage. It will no longer be testing using the real production HTTP server. The WSGI implementation may slightly differ against the production WSGI server used for the application in some way.\nI think it's best to use the real production server in tests, therefore I'm going to close.\n. Hi @MichaelHirn,\nIf you are using chai, I think you will first need to install the chai dependency so that it can be loaded.\n. @honzajavorek This seems resolved to me, it's in the dependencies: https://github.com/apiaryio/dredd/blob/master/package.json#L30\n. @justinabrahms There is no keyword called nullable in JSON Schema, you will need to add null to the list of types for the property you want to allow to be null.\ndiff\n \"price_per_seat_cents\": {\n-  \"type\": \"number\",\n+  \"type\": [\"number\", \"null\"],\n   \"description\": \"price in cents to avoid poor decimal support\"\nOriginal JSON Schema:\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n   \"required\": [\n    \"price_per_seat_cents\"\n  ],\n   \"type\": \"object\",\n   \"properties\": {\n    \"uuid\": {\n      \"type\": \"string\"\n    },\n     \"title\": {\n      \"type\": \"string\"\n    },\n     \"url\": {\n      \"type\": \"string\",\n       \"description\": \"url of the module\"\n    },\n     \"price_per_seat_cents\": {\n      \"type\": \"number\",\n       \"description\": \"price in cents to avoid poor decimal support\"\n    },\n     \"course\": {\n      \"type\": \"string\",\n       \"description\": \"url of the parent course\"\n    },\n     \"subchapters\": {\n      \"type\": \"array\"\n    }\n  }\n}\nNew JSON Schema:\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n   \"required\": [\n    \"price_per_seat_cents\"\n  ],\n   \"type\": \"object\",\n   \"properties\": {\n    \"uuid\": {\n      \"type\": \"string\"\n    },\n     \"title\": {\n      \"type\": \"string\"\n    },\n     \"url\": {\n      \"type\": \"string\",\n       \"description\": \"url of the module\"\n    },\n     \"price_per_seat_cents\": {\n      \"type\": [\"number\", \"null\"],\n       \"description\": \"price in cents to avoid poor decimal support\"\n    },\n     \"course\": {\n      \"type\": \"string\",\n       \"description\": \"url of the parent course\"\n    },\n     \"subchapters\": {\n      \"type\": \"array\"\n    }\n  }\n}\n. @philsturgeon I just want to point out, support for nullability was added to dredd in master (release pending). So you should be able to build Dredd from source and test out nullability without these workarounds.\n. https://github.com/apiaryio/dredd/pull/993 will make this available to Dredd.. @InfopactMLoos Looks like you're hitting a bug because x-nullable is not being applied recursively (only at root of the schema). I've fixed this in https://github.com/apiaryio/fury-adapter-swagger/pull/172, hopefully we can get this reviewed tomorrow and released into production/Dredd.. @InfopactMLoos Dredd 5.1.7 should include a fix for your problem.. Now that Protagonist was updated with JSON Schema generation this is now possible, and it's made it into master of Dredd via #309.\nThanks very much for your effort here @obihann and @tobiashm and nice to see this has made it in :balloon:.\n. Hi @vsejed,\nCould we just confirm which version of node you are using? Unfortunately some of the dependencies do not support node 3 and 4 at the moment.\nshell\n$ node --version\nv0.10.40\n. Hi @amuino, please see the comment at https://github.com/apiaryio/dredd/issues/292#issuecomment-160549620:\n\nWe need protagonist to generate JSON Schema and that's the bit I'm now working on, basic stuff is already working...\n\nClosing this issue since it's already tracked by #284 and #292. For now, Dredd requires node 0.12.x.\n. @3dtomato As of Dredd 1.0.2, Node 4 and 5 is supported like mentioned in the README.\n. @3dtomato What exactly is the build error you are facing? Can you paste the logs?\n. @3dtomato opened #318, so gonna close this one again.\n. Huge :+1: on squashing these commits, it's a good practise to have since otherwise git-bisect is difficult to use.\n. @honzajavorek This is in a code-block, it's valid Ruby change. :+1: on merging, this was incorrect before.\n. I hit rebuilt and it's passing now, not sure what's flaky with it.\n. That would be great, I'd love to see some suggestions/guides on using cache for the dredd/protagonist installation to improve CI time. In some of my personal projects it adds a significant time for CI (from under 10 seconds to over a minute), due to having to build protagonist.\nYou can find some example on this build for polls-api: https://circleci.com/gh/apiaryio/polls-api/67 where it would've taken 11 seconds without dredd, but 1 minute and 34 seconds by installing and using dredd.\nThe Travis documentation mentions using cache directories, perhaps we can make use of it, for example:\nyaml\ncache:\n  directories:\n  - node_modules\n. Future versions of API Blueprint allow you to attach parameters to requests, as per RFC 4: Request Parameters. The last pre release of Drafter and Protagonist provide a partial implementation of this feature, however semantic validation around these parameters is not yet complete.\nI'd say this isn't a bug in either Dredd or Apiary, they are just lacking this feature. I believe https://github.com/apiaryio/dredd/issues/388 is around adding support for this in Dredd.\n. @honzajavorek From the screenshot, you can see this document is being rendered with the attributes kit feature flag, which means it's using the latest pre-release of the parser which adds partial support for parsing these parameters. However they are not rendered in Apiary documentation or utilised in the Apiary mock server since they haven't adopted this feature yet.\n@Alexorz I'd recommend you stick to using the resource or action level parameters until we've finalised the support otherwise the information will be missing in your documentation at Apiary and not utilised in Dredd.\n. I think this was actually supported since Dredd 1.1.0. I tested this in https://github.com/apiaryio/api-blueprint/issues/58#issuecomment-230025964, where you can find an example.\n. @honzajavorek It's supported, but validation is not implemented fully. Nothing has changed since https://github.com/apiaryio/api-blueprint/issues/58#issuecomment-230025964. @gustaff-weldon How about the following:\n```apib\nGists Collection [/gists]\nList All Gists [GET /gists{?since}]\n\n\nParameters\n\nsince: 2016-12-30T10:00:00Z (string, optional) - Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ Only gists updated at or after this time are returned.\n\n\n\nResponse 204\n\n\nCreate a Gist [POST]\n\n\nRequest (application/json)\n\nAttributes\ndescripton: sth sth (string, required)\ncontent: here goess content (string, required)\n\n\n\n\n\nResponse 201 (application/json)\n```. Just want to link this together with https://github.com/apiaryio/drafter/issues/255.\n. You can make the array fixed for it's contents to show in the schema:\n\n\ndiff\n + Response 200 (application/json)\n     + Attributes\n           - tobreak: abc (string, fixed)\n-          - errors (array)\n+          - errors (array, fixed)\n               - (object, fixed)\n                   - desc: Sent\nThen it would result in the following schema:\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"tobreak\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"abc\"\n      ]\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"desc\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"Sent\"\n              ]\n            }\n          },\n          \"required\": [\n            \"desc\"\n          ],\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"tobreak\",\n    \"errors\"\n  ]\n}\nHowever, fixed has more meanings and this probably adds unwanted constraints.\n. @ungrim97 This might not be very clear from the spec. But in API Blueprint, parameters and attributes where the value contains - or _ must be escaped, so we can differentiate between the sample value and the description.\nYou will want to escape your value as such:\n``` apib\nBar Item [/bar/{barid}]\nGet Bar [GET]\n\nParameters\nbarid: 1-foo (string)\n```\n. Linking in some prior relation suggestion (from before I worked at Apiary): https://github.com/apiaryio/snowcrash/issues/154. This was for JSON validation, I'd see JSON Schema as next step. Although I am not sure it makes sense in the parser itself, perhaps additional tooling between the parser(s) and Dredd.\n\n\n\nThinking further, isn't this a style guide rule? \ud83d\ude09 . I think this would be a good opportunity to switch to our own CNAME. Perhaps something like dredd.apiary.io which shields us from these kinds of changes in the future.\nCurrently we're tied to, and giving away links to readthedocs. If the service ever goes away, or if we decide to move away from them in the future we will have a lot of broken links. It would be good to have our own CNAME that we have full control over, if we ever need it.\n. \ud83d\udc4d \nMinor questions:\n- Can Vagrantfile be ignored too?\n- I don't see HISTORY-Dredd.md in the project, can this be removed from ignore?\n. This sounds like you've installed dredd and then upgraded or changed the version of node you are using. To solve this, you will need to reinstall dredd with the version of node you want to run it from.\nshell\n$ npm install -g dredd\n. The fix from Drafter should be in Dredd by now, is there any remaining problems? Perhaps this issue can be closed.. The x-nullable flag only adds null to the type of the JSON Schema. The problem here is when enum is present in JSON Schema, validators don't look at type since the type information isn't needed when you have typed-values. I think it makes sense for nullable to add null as a value to the enum when nullable is set and there is also enum. This logic should be added to fury-adapter-swagger. The specific code for this logic is found at https://github.com/apiaryio/fury-adapter-swagger/blob/46af39bbdd88b5a40910fb7d016e792e77299752/src/json-schema.js#L13-L17 and the tests at https://github.com/apiaryio/fury-adapter-swagger/blob/46af39bbdd88b5a40910fb7d016e792e77299752/test/json-schema.js#L53-L71 if anyone is interested in contributing this change as a PR. We should hopefully schedule this soon into one of our engineering sprints, but external contributions are always welcome.. @andybarilla I've prepared a fix in https://github.com/apiaryio/api-elements.js/pull/59, I hope you don't mind that I've taken parts of your example Swagger 2 document to reproduce in our test fixtures.. Linking together #964 for the supporting async/promises:\njs\nhooks.beforeAll(async function (transactions) {\n  await ...\n});. @guillemcanal I think these changes would be outside of Dredd itself and actually in the Swagger adapter we use for converting Swagger to the API Elements format that Dredd internally consumes.\nThe change should be as simple as adding the sample to the structure for Href within https://github.com/apiaryio/fury-adapter-swagger/blob/master/src/parser.js#L1182. It should just add the sample to the \"value\" part (example of an API Elements document with a Href sample: https://github.com/apiaryio/drafter/blob/master/test/fixtures/api/action-parameters.json#L55)\n. This should be relatively easy to implement. Some pointers if anyone is interested in contributing a PR (providing the maintainers would accept).\n\nYou can detect that it is a parse result JSON object (https://github.com/apiaryio/dredd-transactions/blob/7f6f62e65f562b2f4cdc737001ee526a29ab1d08/src/parse.coffee#L14) decardcain already returns for API Elements.\n\nWhen parse result, get the parse result using following:\njs\nconst result = fury.load(JSON.parse(source))\n- This would replace the code at https://github.com/apiaryio/dredd-transactions/blob/7f6f62e65f562b2f4cdc737001ee526a29ab1d08/src/parse.coffee#L26 for API Elements.. I just noticed the --only option already allows filtering by transaction so going to close my silly feature request which is already implemented.\n. We could probably allow remote referencing in the Swagger adapter based on an opt-in argument. That way it is down to the author on what they want to do providing they trust and understand what they are doing.\n\n\n```js\nimport FurySwaggerAdapter from 'fury-adapter-swagger';\nconst adapter = new FurySwaggerAdapter({allowExternalRef: true});\nfury.use(adapter);\n```\n@honzajavorek If it was optional (opt-in), do you have some idea how you could signal that from Dredd. Perhaps via a CLI option or in the dredd.yml config.. I've attempted to solve this using a dredd hook to decode gzip, but unfortunately since dredd deals with strings and not buffer this doesn't appear to be possible.\n@honzajavorek perhaps dredd could handle this, or provide the hooks to get hold of the raw buffer of data instead of providing it as a string (which could loose information).\nHere's what I tried:\n```js\nvar zlib = require('zlib');\nvar hooks = require('hooks');\nhooks.beforeEachValidation(function (transaction, done) {\n  if (transaction.real.headers['content-encoding'] === 'gzip') {\n    zlib.gunzip(transaction.real.body, function(err, buffer) {\n      transaction.real.body = buffer.toString('utf-8');\n      done();\n    });\n  }\n});\n``. > I don't think having buffer intransaction.real.body` is a good API, because you cannot transfer buffer like that to other than JS hooks (the interface between Dredd and non-JS hooks is a socket).\nThat is not correct, sockets send bytes over, strings are being converted from a string representation into unicode in the current implementation in Dredd.\nNodes socket.write is actually encoding strings as utf8 by default (https://nodejs.org/api/net.html#net_socket_write_data_encoding_callback) and in Python hook this is decoded from bytes into a String (https://github.com/apiaryio/dredd-hooks-python/blob/master/dredd_hooks/dredd.py#L77).. That's correct, the PR at https://github.com/apiaryio/dredd-transactions/pull/108 should update Dredd exposing this fix. Will need some testing in Dredd to see how Dredd handles multipart form.. @MikeRalphson The multi-part form generation is handled at https://github.com/apiaryio/fury-adapter-swagger/blob/master/src/generator.js#L26-L36 (tests: https://github.com/apiaryio/fury-adapter-swagger/blob/master/test/generator.js#L59-L75).\nI think you are right, there should be an additional two -- at the end of the boundary identifier for the LAST part. I will try and prepare an additional patch shortly.. There are two problems here, the problem with x-example not showing up for array parameters is solved by https://github.com/apiaryio/fury-adapter-swagger/pull/106.\nThe second problem regarding collectionFormat support, https://github.com/apiaryio/fury-adapter-swagger/pull/107 adds support for csv and multi formats. ssv, tsv, and pipes remain unsupported at the moment.. @pksunkara the adapter is generating a URI Template (/partner{?status[],limit,offset}) which is not valid. The [ and ] character should be escaped within the template I believe.. A fix for this problem should be contained within https://github.com/apiaryio/fury-adapter-swagger/pull/109.. I'd like to sync on this so we can have consistency across our OSS in ADT too.. I am not entirely sure the specific problem you are hitting, but I have fixed a few bugs which are extremely related in the Swagger adapter. These changes will fix a bug with the example values in your parameter not showing up, and also adds support for multi collectionFormat used in this example. Then finally a fix to ensure that [ and ] are escaped in resultant URLs.\n\nhttps://github.com/apiaryio/fury-adapter-swagger/pull/107\nhttps://github.com/apiaryio/fury-adapter-swagger/pull/106\nhttps://github.com/apiaryio/fury-adapter-swagger/pull/109\n\nThese are not yet available in Dredd, Should be available once https://github.com/apiaryio/dredd-transactions/pull/78 is released.. In that case, it's fixed via https://github.com/apiaryio/fury-adapter-swagger/pull/109. Just need to get this change propergated to Dredd /c @honzajavorek . Hi @tislib, would you be able to provide me with the full Swagger document that is causing this problem so I can reproduce and solve it easier. Feel free to email it to me: kyle.fuller@oracle.com.\nThanks!. @iamharish I believe this was released 2 days ago when the PR was merged: https://github.com/apiaryio/dredd/releases/tag/v4.3.1. Hi @erinaceous,\nThe key for an example is x-example and not x-examples. Although, in this case you have a schema so you can place examples directly into your schema.. I'm able to confirm this behaviour, looks like the specific Swagger document doesn't contain any status code in the response for the post method of /user.  dredd-transactions is assuming there is one. The specific part of the Swagger document causing the problem:\njson\n      },\n      \"/user\":{  \n         \"post\":{  \n            \"tags\":[  \n               \"user\"\n            ],\n            \"summary\":\"Create user\",\n            \"description\":\"This can only be done by the logged in user.\",\n            \"operationId\":\"createUser\",\n            \"produces\":[  \n               \"application/xml\",\n               \"application/json\"\n            ],\n            \"parameters\":[  \n               {  \n                  \"in\":\"body\",\n                  \"name\":\"body\",\n                  \"description\":\"Created user object\",\n                  \"required\":true,\n                  \"schema\":{  \n                     \"$ref\":\"#/definitions/User\"\n                  }\n               }\n            ],\n            \"responses\":{  \n               \"default\":{  \n                  \"description\":\"successful operation\"\n               }\n            }\n         }\n      },\nThis results in the underlying parser returning a httpResponse which doesn't have a status code. I am not sure what the expected behaviour should be here @honzajavorek, perhaps Dredd can either show a warning/error and not validate the status code in this case. This should help support default responses when the user does not define a status code.. Also note, it appears that Apiary rendered documentation would assume a 200 status code in this case.. Note, to confuse the matter the Swagger adapter uses strings/JavaScript string character offset which we need to address (I say JS specifically because it doesn't follow unicode grapheme breaking rules, character != unicode character).. https://github.com/apiaryio/dredd-transactions/pull/149 will make it so that optional properties are always present in the request/response bodies which should solve the problem here.. @towns This is obviously a work around and not a solution to solve the problem. You may have some luck by increasing the maximum stack size in Node. You can invoke node passing the --stack_size with a reasonably large stack size (keep increasing number until it works). Then you can pass in the location to dredd (I'm using which dredd to get hold of this) followed by all Dredd arguments. For example:\nshell\n$ node --stack_size=2000 $(which dredd) --config <location_of_dredd_config_file>\nThe default stack size seems to be around 1000:\nshell\n$ node --v8-options | grep stack_size -A1 | head -n2\n  --stack_size (default size of stack region v8 is allowed to use (in kBytes))\n        type: int  default: 984\nThis will increase the stack size limit in Node therefore allowing Dredd to continue further. This should hopefully let you continue using Dredd with extremely large API Description documents until Dredd can handle it properly.. @honzajavorek Do you happen to know what is causing this? I'm wondering if it is something like recursiveChildren or similar in minim causing the high stack depth. If so we can refactor recursiveChildren to be implemented without recursion itself. If you can get hold of a stack trace we can confirm where the problem would lye.. @juliengerboud This problem should be fixed in Dredd 4.9.3, could you give it a go and confirm the fix is working for you please.. The property example is used to describe a parameter example value in OAS 2. \"x-example\" is purely an unknown extension to the parser. If you switch out the line for example this should work as expected.\nyaml\n      parameters:\n        - name: id\n          in: path\n          type: integer\n          format: int32\n          required: true\n          example: 0. @honzajavorek My apologies, you are correct. I am getting Parameter Object and Schema Object confused. The behaviour of example is the opposite.\nI've just tried to verify this bug and I believe it has already been fixed, either in Dredd or our OAS 2 parser and when I run the latest version of Dredd with the document I am not seeing the error and the path contains the example value so I think we can leave this issue closed.\n```\n$ dredd foo.yaml  http://127.0.0.1:3000\ninfo: Beginning Dredd testing...\nerror: GET (200) /v1/users/0 duration: 9ms\nerror: Error connecting to server under test!\ninfo: Displaying failed tests...\nfail: GET (200) /v1/users/0 duration: 9ms\nfail: Error connecting to server under test!\nrequest:\nmethod: GET\nuri: /v1/users/0\n...\ncomplete: 0 passing, 0 failing, 1 errors, 0 skipped, 1 total\ncomplete: Tests took 15m\n```. Something like the following would be a start at supporting the current behaviour alongside returning promises (or using async function as the hook):\n```diff\ndiff --git a/src/transaction-runner.js b/src/transaction-runner.js\nindex cbdf1cc..b391165 100644\n--- a/src/transaction-runner.js\n+++ b/src/transaction-runner.js\n@@ -315,12 +315,18 @@ Interface of the hooks functions will be unified soon across all hook functions:\n     }\n   }\n\nrunHook(hook, data, callback) {\nasync runHook(hook, data, callback) {\n     // Not sandboxed mode - hook is a function\n     if (typeof hook === 'function') {\n       if (hook.length === 1) {\n         // Sync api\nhook(data);\nconst promise = hook(data);\n+\nif (promise) {\n// Promise or async/await API\nawait promise;\n}\n+\n         callback();\n       } else if (hook.length === 2) {\n         // Async api\n```\n\nThis doesn't handle errors (rejected promises) properly to cause a failing test, but sharing as a start if anyone is tacking this issue.. The official media type is application/vnd.oai.openapi as per https://github.com/OAI/OpenAPI-Specification/issues/110#issuecomment-364498200. The version becomes optional parameter, for example: application/vnd.oai.openapi;version=2.0 is the suggested media type for Swagger 2. Although we're using application/swagger+yaml in the Fury Swagger adapter and in our APIs.\nI think we will need to rehaul the Fury Adapter API because right now parameters for media types are unsupported so existing media type comparison needs to have version information too: https://github.com/apiaryio/fury.js/blob/bbbf45d37eaaf3c71ba0fa4142dd2f2e1f5d7e09/src/fury.js#L14.\nI am just adding additional information regarding Fury which is related but not nessecerily what the issue is about. We should update the adapters because I believe you may be using media types and names exposed from fury-adapter-swagger.. > Isn't it a misinterpretation of the tags feature?\n@honzajavorek It is, and the way they are interpreted can be a little confusing. Especially when a resource is contained within multiple tags. It will only be in the first tag. This was a decision made during the initial development of Swagger support in Apiary.\nWe've been wanting to do this right, but that unfortunately is blocked by documentation rendering in Apiary to be on API Elements so that we can rehaul this section and introduce a tag concept into API Elements. Then tags can be supported in documentation render and we can move to them in the parser so we don't introduce a regression by removing this implicit resource group creation.. @honzajavorek When it's time for this change, this will have implications in Dredd too so we will have to think through it all and a path forward once we're unblocked. This could allow users to create hooks at the tag level in Dredd which could be neat! . > ```\n\nnpm ERR! Error: EACCES, unlink '/usr/local/bin/dredd'\nnpm ERR!  { [Error: EACCES, unlink '/usr/local/bin/dredd'] errno: 3, code: 'EACCES', path: '/usr/local/bin/dredd' }\n```\n\nThe error of installation is due to running npm install with -g (global) and the user doesn't have permission to write to the /usr/local directory.\nYou can check out the instructions from the NPM documentation on \"How to Prevent Permissions Errors\".\n\nnpm WARN engine dredd@5.1.4: wanted: {\"node\":\">= 6\"} (current: {\"node\":\"v0.10.25\",\"npm\":\"1.3.10\"})\n\nOnce you get past that hurdle you will still have problems using Dredd because you have a very old version of Node that is incompatible.\nInstalling Node.JS from package manager link includes instructions on how to install the current long term stable version of Node.JS. The version you have (0.10.25) is over four years old.. @StrikoMirko After the exception (When running dredd against my swagger.json I am getting a error: Cannot assign to read only property 'parent' of object '#<AuthScheme>') was you presented a stack trace? If so could you please share, it would help me identify where the problem is easier.. This was fixed in https://github.com/apiaryio/fury-adapter-swagger/releases/tag/v0.18.2, we need to have this updated and released in dredd-transactions and dredd.. That's a correct assumption. Thanks for moving it over!. I don't think the limitation here is RFC6570, it's likely a bug in either fury-adapter-swagger, dredd and Apiary Console, or a combination of all. Spaces should be escaped in the property name (space becomes %20).\n\nIt seems that there is more than one issue. I found a related problem(s) while reproducing with a query parameter instead of path parameter. Original issue is regarding spaces in a path parameter, but can also be produced with query. I believe the problem is generic and regarding all sorts of escaping of parameter key names in URI Template.\nExample Swagger to Reproduce\nyaml\nswagger: '2.0'\ninfo:\n  version: '1.0'\n  title: httpbin\nhost: httpbin.org\nbasePath: /\nschemes:\n- https\nproduces:\n- application/json\npaths:\n  /get:\n    get:\n      summary: Get\n      parameters:\n        - name: hello world\n          in: query\n          type: string\n          x-example: lol\n      responses:\n        200:\n          description: Successful Response\n          schema:\n            type: object\n            properties:\n              args:\n                type: object\n                properties:\n                  'hello world':\n                    type: string\n                required:\n                  - hello world\nDredd\nshell\n$ dredd thing.yaml https://httpbin.org\nwarn: Compilation warning in file 'thing.yaml': Ambiguous URI parameter in template: /get{?hello%20world}\nParameter not defined in API description document: hello%20world ( > /get > Get)\ninfo: Beginning Dredd testing...\ncomplete: Tests took 1ms\nApiary Console\n\nFury Swagger Parse Result\n\nhref: /get{?hello%20world}\nhrefVariables:\nkey: hello world\n   value: lol\n\n\n\nHere, the URI Template seems to be correctly escaped. However hrefVariables has the key un-escaped, which I think I expect (so attributes table is rendered with space as user written). However, should it be escaped?\nPerhaps we do a third variant in the element where we provide the key name escaped and the original string as the title?\n{\n  \"element\": \"member\",\n  \"content\": {\n    \"key\": {\n      \"element\": \"string\",\n      \"attributes\": {\n        \"title\": { \"element\": \"string\", \"content\": \"hello world\" }\n      },\n      \"content\": \"hello%20world\"\n    },\n    \"value\": {\n      \"element\": \"string\",\n      \"content\": \"lol\"\n    }\n  }\n}\nJust to jot some of my incomplete thoughts quickly so I don't forget next time I look at this issue:\n\nI could also see it as it may be expecting that tooling handles escaping of the keys (although that is really annoying as consumer), it is kinda an implementation detail of URI Template regarding escaping. When a parameter is re-used in other sections (such as JSON or if URL format was changed) it would be broken. If escaping is a rule of where the key is used, then the escaping should be applied when parameter is applied to a URI Template. So that if/when the parameter key is applied to other formats it is down to tooling to encode it as necessary.\nThere can also be problems if parser or tooling does escaping, because user could have escaped it and then there is double escaping\nCould we restrict parser to require user to escape URI parameter names? Warn when not and escape for user but expect it is escaped. How do other Swagger tooling handle this?\nHow does API Blueprint parser handle this? I think it has similar problems.. This is likely a bug in fury-adapter-swagger's Swagger detection logic (https://github.com/apiaryio/fury-adapter-swagger/blob/master/src/adapter.js#L14) where it is failing to detect your specific case.\n\n\n\n@erajkovic could you please share the first few lines of the Swagger document (the ones that say something like \"swagger\": \"2.0\" and I'll get this fixed. No need for entire document.. The other thing, do you really need to be transpiling? If you're targetting Node 6 then a lot of ES6 is already available and it will simplify a lot of how the development of Dredd happens. No build step when you are trying to debug code, stacktraces are simpler and easier to follow (right now they are from the transpiled code last time I tried to dev dredd). You'll also be able to remove this somewhat larger dependency.. > AFAIK our very own @apiaryio/adt uses Dredd as a post-deployment check.\nIn ADT our services are idempotent and stateless which makes this pretty simple for us. Given same input we always return same response. There is no database or state.. This is similiar to #305, I am not entirely sure if it is a duplicate as that specifcally mentions whitespace. I am talking more generically that it should be a diff, just happens to be my example is whitespace.. I've hunted it down and the underlying cause appears to be a bug in JSON Schema Faker where it is throwing an error for this particular schema, (filed https://github.com/json-schema-faker/json-schema-faker/issues/458).\nMinimal schema to produce this problem is the following:\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"pattern\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"pattern\"]\n}. Equivilent to https://github.com/apiaryio/dredd/pull/1107 although made from NPM 6.4.1 because I saw in #1107 some https was changed to http.. @travis5491811 It does look like Dredd has been successfully installed. An optional dependency has not been installed however. This doesn't affect the functionality of Dredd. The important lines are near the bottom of your output:\n``\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 (node_modules/dredd/node_modules/protagonist):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 install:node-gyp rebuild`\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1\n\ndredd@5.2.0\nadded 248 packages from 260 contributors in 89.883s\n```\n\nProtagonist cannot be installed because the last stable release does not support Node 10.. @travis5491811 OpenAPI 3 is not currently supported in Dredd. We are working on support in the future though but cannot provide a timeframe at the moment.. Status is of type array in your JSON example, but there is an enumeration in the JSON Schema which takes presidence. The enumeration says that the value for status can be either \"Success\" \"ReducedCount\" or \"Error\".\nyaml\nstatus:\n  enum:\n    - Success\n    - ReducedCount\n    - Error\n  type: array\n  items:\n    type: string\nI expect you instead want to do something like:\nyaml\nstatus:\n  type: array\n  items:\n    enum:\n      - Success\n      - ReducedCount\n      - Error\nWhere you define an array which can contain the enumeration values.. The value 5 is valid in the following schema tested by some validators I have tried:\n{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}\nIt seems that the validator in Dredd thinks that 5 is not a valid int64. Here is minimal example to reproduce:\n```\n$ dredd test.apib https://httpbin.org\nfail: body: The json,message property must be an int64 (current value is 5)\n```\n```apib\nHOST: https://httpbin.org\nAPI Name\nPOST /post\n\n\nRequest (application/json)\n\nAttributes\nmessage: 5 (number)\n\n\n\n\n\nResponse 200 (application/json)\n\nSchema{\n  \"type\": \"object\",\n  \"properties\": {\n    \"json\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"message\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        }\n      }\n    }\n  }\n}\n\n``. Actually, since \"int64\" is an extension to JSON Schema. It isn't designed the same everywhere. The \"int64\" format is for the string type in some (https://developers.google.com/discovery/v1/type-format) specs and implementations and I suspect that the validator is treating int64 as a string type whcih here it is a number. NOTE, the Swagger spec says it should be an integer which contradicts other definitions for the int64 format.. I think the best behaviour would be the validator in Dredd usingtypeto know if it should be an integer or a string which should cover both cases.. I can see why this used to work, due to the implementation details of the Swagger parser. However I don't believe it *should* have worked, because of the semantics of$ref` replaces the entire object reference object thus discarding the example.\n\n\n\n\nHere's a quote from JSON Schema Draft 4 specification:\n\nAn object schema with a \"$ref\" property MUST be interpreted as a \"$ref\" reference. The value of the \"$ref\" property MUST be a URI Reference. Resolved against the current URI base, it identifies the URI of a schema to use. All other properties in a \"$ref\" object MUST be ignored.\n\nThe OpenAPI 2 Specification doesn't show that any other properties are permitted in a 'Reference Object': https://github.com/OAI/OpenAPI-Specification/blob/50c152549263cda0f05608d514ba78546b390d0e/versions/2.0.md#reference-object\nYou can move the example from the parameter schema into the 'Schema Object' itself:\n```diff\n@@ -12,6 +12,8 @@ definitions:\n     properties:\n       a:\n         type: string\n+    example:\n+      a: qwertyuiop\npaths:\n   /:\n@@ -21,8 +23,6 @@ paths:\n           name: body\n           schema:\n             $ref: '#/definitions/Foo'\n-            example:\n-              a: qwertyuiop\n       responses:\n         200:\n           description: OK\n```\nYou can also move it directly into the property, this usually helps DRY up examples as every time the property is referenced from anywhere else the example will be used:\n```diff\ndiff --git a/test/fixtures/dredd.yaml b/test/fixtures/dredd.yaml\nindex bba1075..fda7d84 100644\n--- a/test/fixtures/dredd.yaml\n+++ b/test/fixtures/dredd.yaml\n@@ -12,6 +12,7 @@ definitions:\n     properties:\n       a:\n         type: string\n+        example: qwertyuiop\npaths:\n   /:\n@@ -21,8 +22,6 @@ paths:\n           name: body\n           schema:\n             $ref: '#/definitions/Foo'\n-            example:\n-              a: qwertyuiop\n       responses:\n         200:\n           description: OK\n```\nIf you do indeed want a separate example specifically for the paramerer, than you can use allOf, for example:\ndiff\ndiff --git a/test/fixtures/dredd.yaml b/test/fixtures/dredd.yaml\nindex bba1075..616bf39 100644\n--- a/test/fixtures/dredd.yaml\n+++ b/test/fixtures/dredd.yaml\n@@ -20,7 +20,8 @@ paths:\n         - in: body\n           name: body\n           schema:\n-            $ref: '#/definitions/Foo'\n+            allOf:\n+              - $ref: '#/definitions/Foo'\n             example:\n               a: qwertyuiop\n       responses:. I think it needs a proof of concept to see if it works as intended. Long-term we are working on a WASM version of our API Blueprint parser. It should offer better performance than drafter.js (transpiled parser), it isn't clear how the performance metrics will compare to Protagonist. If it is negligable (I think there is a chance it may be) then I would consider us removing Protagonist from our API Elements API Blueprint adapter so that most consumers won't know about it.\nWe may still need that little edge in performance for some of our internal services where performance is a concern, and in that case I think it can become an opt-in parser. We can alter the API for the API Blueprint API Elements adapter so that a user can inject a version of the parser into it when it has different requirements or use Protagonist directly. One concern that I have with this is that we won't have semantic version locking between the adapter and parser and it can be tricky to manage manually especially when a consumer might not depend on a specific version and that running npm install one day can bring a broken experiance to a once working environment. For example \"does version 1.2 of Protagonist work with the API Elements Adapter 2.3 etc\".  There is a feature request to NPM which can solve this for us: https://github.com/npm/npm/issues/20646\nUnfortunately the WASM build is a little behind and it is blocked by a larger rollout of an entirely new version of the API Blueprint parser so it is going to be a little while before we can finish this off, I am hoping early next year. So I would persue removing Protagonist via the npm-shrinkwrap for an interim solution.. @mdular If you are explicitly installing Dredd in CI, you can skip optional dependencies if that helps you work around this quicker http://dredd.org/en/latest/installation.html#installing-c-dependencies\n$ npm install dredd --global --no-optional. @realityking I'd explore how WASM performs first as that has the potential to make it so most consumers don't even need to worry about Protagonist / compilation at all. Even if we ship binaries of Protagonist the end user will still need a moden C++ runtime which can be problematic. Drafter 4 brings more modern compiler requirements over (which isn't released yet into Dredd and would likely make this problem worse).\nAs for N-API, a lot of the APIs are only available in newer versions of Node (8, 10 etc) whereas we support all the LTS releases at the moment. N-API stability only came in Node 10, we're still supporting Node 6 in Dredd, and given Node 8 doesn't reach end of life until December 2019 I don't think we will be dropping support for Node < 10 until then (please correct me if I am wrong @honzajavorek).\nI do think we should experiment with N-API at some point, but I think it is a bit too early as we support Node LTS. I'd be interested to see how it performs compared to native (current implementation of Protagonist) and WASM. Some benchmarks have seen WASM can outperform both native and N-API.. > The Babel transpilation was introduced with browsers in mind, but we do not expect Dredd to support browsers any soon and the Babel integration stays as a unnecessary burden for anyone developing Dredd. Once we really do want to introduce browser support it may as well be in time when the relevant browsers are so capable there will be no transpilation needed.\nThat said, making a separate browser bundle with rollup from the Node source may be a more ideal solution. Then you get to develop with Node, and then the package (npm run build or so) would contain a browser bundle.. Had a quick look into this and wanted to share my findings so far. The latest version of the Swagger parser is emitting the following JSON Schema:\njson\n{\n    \"definitions\": {\n        \"HttpBinResponse\": {\n            \"additionalProperties\": false,\n            \"required\": [\n                \"SomeWrongAttributeWhichIsNotInResponseButRequired\"\n            ],\n            \"type\": \"object\",\n            \"properties\": {\n                \"SomeReference\": {\n                    \"$ref\": \"#/definitions/SomeReference\"\n                },\n                \"SomeWrongAttributeWhichIsNotInResponseButRequired\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"SomeReference\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"property\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/HttpBinResponse\"\n        }\n    ]\n}\nWhich would appear to be correct JSON Schema derived from the Swagger Schema. Going to a site like https://www.jsonschemavalidator.net/ and pasting the schema and the response body, I am greeted with an error as expected.\njson\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Connection\": \"close\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"curl/7.60.0\"\n  }, \n  \"origin\": \"::1\", \n  \"url\": \"https://httpbin.org/get\"\n}\nIt would appear that the library used in Dredd for JSON Schema valdiation (https://github.com/geraintluff/tv4) is not behaving as expected. I would gather it might be a problem with allOf support. tv4 does say they support references. I think the next step would be to confirm if there is a problem with tv4 with the given body and schema.. It may also be easier to debug the problem with API Blueprint as we can directly alter the JSON Schema easier as it isn't derived from Swagger:\n```apib\nHTTPBin\nGET /get\n\nResponse 200 (application/json)\nSchema{\n    \"definitions\": {\n        \"HttpBinResponse\": {\n            \"additionalProperties\": false,\n            \"required\": [\n                \"SomeWrongAttributeWhichIsNotInResponseButRequired\"\n            ],\n            \"type\": \"object\",\n            \"properties\": {\n                \"SomeReference\": {\n                    \"$ref\": \"#/definitions/SomeReference\"\n                },\n                \"SomeWrongAttributeWhichIsNotInResponseButRequired\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"SomeReference\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"property\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/HttpBinResponse\"\n        }\n    ]\n}\n\n``. @realityking If you can share the underlying compiled API Blueprint that would really help debug, otherwise you could add some logging into/Users/rouven/PhpStormProjects/doc-app/node_modules/minim/lib/serialisers/json.js`. If you added something like:\n\n\n\n\njson\nconsole.log(JSON.stringify(value, null, 2));\nJust above the if statement in line 56, like the following:\n\nThis should print every element before deserialisation and should print the couple of elements leading up to the exception being raised, the bug may be in Minim deserialiser or in Drafter 4 producing incorrect element structure.\n. @realityking As a wordaround, you could potentially depend directly on drafter.js (https://github.com/apiaryio/drafter.js/), as that's pure JavaScript it should be safe to have both drafter.js @ 2.6.7 and the one Dredd requires in its own tree (3.0.0-pre.2). Drafter.js should be a drop in component for Drafter providing you have similiar versions.. > I think it does support that.\nYou'll get undefined behaviour (depending on platform) where you have two dynamic libraries that have same symbol names. Which can cause odd behaviour such as https://github.com/apiaryio/protagonist/issues/136.\nHere's some more details copied from an internal ticket back in 2016:\n\nAlthough https://github.com/apiaryio/protagonist/issues/136 says it's fixed, it's still not fixed. I was hit by this multiple times. Since it's normal for node modules they can be installed within one project with different versions (once as a dependency and second time as a dependency of a dependency) and they normally work.\nImagine situation I depend on a library which I haven't created and I don't have it under control. The library uses protagonist of version A, e.g. as a devDependency for some tests, whilst I want to use version B as a regular dependency for my project. I'm screwed in that case, since the only thing I'm left with is \"unknown visitor type\" error for any blueprint I send to my protagonist.\n\nThere isn't much we can do here, it's a limitation of NPM / how dynamic loading works.\nWe recommend that users use the drafter NPM package, which would allow a user to work around these limitations by using the pure javascript parser. If you need to use multiple / different versions of the parser in the same code-base, you can use --no-optional when installing the dependencies to use the pure JS version only.. @realityking Agreed, the wordaround I mentioned in https://github.com/apiaryio/dredd/issues/1223#issuecomment-459329181 should work for you for now, just change your own dependency to \"drafter.js\" and update the require statements and you should be good to go. Make sure you don't use any of the pre-releases though as they don't offer API Blueprint AST. (I would encourage you to move off of that at some point, it is deprecated for nearly 4 years https://github.com/apiaryio/api-blueprint-ast#deprecation-notice. Any new language features in API Blueprint won't be available to our older parsers).\n\nWe're just wrapping up with our OAS 3 parser, next up we will attempt to roll out Drafter 4 to our entire infrastructure and then once that's live we'll go ahead and try to solve https://github.com/apiaryio/fury-adapter-apib-parser/pull/37.. Nice! That has a decent impact.. The status for Dredd at https://github.com/apiaryio/api-elements.js/issues/71 remains up to date, see this part specifically:\n\nValidation of response body is done from an example value in content. Therefore you should include an example to get response body validation\n\nThat said, we have an update coming out soon (https://github.com/apiaryio/api-elements.js/blob/4139afabdc50750380afbe65bf2d01f41ec4466b/packages/fury-adapter-oas3-parser/CHANGELOG.md) which contains more support for examples (referencing Example Object) and inferring an example from a schema (provding the schema is not a reference at the moment). Producing a schema is planned, but this won't happen until our schema parser is improved somewhat. I don't think it's worth us targetting old JSON Schema specs and I think we should go straight for draft-07 (or draft-08 depending on when that comes out) so it will also be worth thinking about making Dredd compatible with the newer versions of JSON Schema.. I wonder if it would be better to instead use the trusty image on Travis (https://docs.travis-ci.com/user/trusty-ci-environment/). Since it already has modern compilers it should speed up the CI time and also removes many lines from the .travis.yml file.\nWhat do you think?\n. @netmilk See my comment here: https://github.com/apiaryio/dredd/pull/310#discussion_r47811905 it's basically the new image on Travis CI that has modern compilers. The default is much older.\n. master? should probably tie this link to a specific tag or commit because it's a moving target. This could be a 404 in the future\n. This is duplicated with - Dredd is written in [CoffeeScript][]. above in the \"Coding\" section, perhaps we can merge these sections together to prevent repetition?\n. What about https?\n. Also, perhaps it would be nice to setup a CNAME using dredd.apiary.io or such. So that we're not tied to readthedocs and can move away easily in the future without breaking the URL.\n. diff\n- recomended\n+ recommended\n. I'd change this to use https://. Git over https has less upfront expectations. Using SSH as you have, it requires users to already have setup a GitHub account and to have an associated SSH keys. The HTTPS clone URL works for people who don't have an account or haven't setup an SSH key. Or even when a user is behind some firewall preventing SSH access (I know many companies who do this).\nExample from those who don't:\n``` shell\n$ git clone git@github.com:apiaryio/dredd.git\nCloning into 'dredd'...\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\nshell\n$ git clone https://github.com/apiaryio/dredd\nCloning into 'dredd'...\nremote: Counting objects: 4523, done.\nremote: Compressing objects: 100% (30/30), done.\nremote: Total 4523 (delta 9), reused 0 (delta 0), pack-reused 4492\nReceiving objects: 100% (4523/4523), 1.53 MiB | 1.22 MiB/s, done.\nResolving deltas: 100% (3053/3053), done.\nChecking connectivity... done.\n. You can with CloudFlare (which I think we're already using), I'm doing it with https://swiftenv.fuller.li/ and https://curassow.fuller.li/\n. Would it also override NO_PROXY?. Any Python 3? Perhaps \"Python > 3.3\" or such?. I think it's more common to call it venv over env. Prevents any confusion with environment variables files (often in .env files).. Couldn't you use markdowns backticks here for the code block instead of using HTML <code?. Is this correct anymore?. Maybe for the case on ReadTheDocs (when READTHEDOCS is set) this should error to prevent the documentation from being stored and served with the wrong version.. Perhaps this check is redundant. You are already checking for the env variable before executing this file:\npython\nif os.environ.get('READTHEDOCS') == 'True':\n    installation_output = subprocess.getoutput('bash ' + os.path.join(docs_dir, 'install-node.sh'))\n    .... Yeah, the reason I asked is that lots of libraries (even those that support Py 2.7) dropped Python 3 < 3.3 support because some 2.7 behaviours were reintroduced (% etc).\nLooking at Sphinx release notes, they did drop Python 3.3 too (https://www.sphinx-doc.org/en/stable/changes.html#release-1-5-released-dec-5-2016)\n\nDrop python 2.6 and 3.3 support. The instructions at https://github.com/apiaryio/dredd/blob/master/.github/CONTRIBUTING.md#recommended-workflow tell me to use npm lint, which now requires python, pip/python dependencies. I think either the docs should be updated to explain these new requirements or perhaps docs lint shouldn't be default from lint. When an external contributor is trying to submit a small patch they likely don't want to have to deal with setting up Python environment too.. Instead of linking to crates, perhaps instead just look to official page at PyPI? https://pypi.org/project/dredd_hooks/. Oh sorry, my bad. I think there used to be some service with similar name for PyPI and I got confused thinking it was that one.. Might also be worth mentioning that apiaryio/dredd image can be used if all you need is Dredd like in your example.\n\nIn real world you will need an image capable of running Dredd alongside the users app, so I think it is worth mentioning that the circle CI images -node-browsers images adds Node to other languages, for example: circleci/python:3-node-browsers image can be used for Python apps.. Some of these changes don't seem right, moving away from https? Did you perhaps use npm config set registry http://... when switching from internal registry?. I think we can set html_theme to sphinx_rtd_theme regardless of environment. If it is built on RTD, it will then be built with the exact version locked in our python dependencies too. The local result should be closer to production.. Is it permitted for CONTRIBUTING to be in RST?\nhttps://blog.github.com/2012-09-17-contributing-guidelines/ mentions Markdown only.. Perhaps worth moving the hooks into a directory, for example:\nhooks/\n  index.rst\n  go.rst\n  nodejs.rst\netc, then you can make use of toctree to automatically produce this list.\nSomething like:\n.. toctree:\n  .\nThe only problem, is that this can be a breaking change for the URLs, but perhaps worth it using redirect, will leave to your judgement though (and perhaps should be changed separately if  it is).. - https://github.com/apiaryio/fury-adapter-swagger/issues/67 is closed as implemented\n- https://github.com/apiaryio/fury-adapter-swagger/issues/68 is also closed, `in: header is also implemented except for array headers.\nI think this comment can either be removed to altered to remove some parts of it.. Should we perhaps invoke this on CI?. If your proposing changes, you likely already had Dredd installed. I think instructions on how to run Dredd development may be better suited, such as npm install and running dev-Dredd via ./bin/dredd.. Is #readme needed on the URL fragment? I don't see any heading called README in CONTRIBUTING.md. Perhaps a note that you can run the dev-Dredd via ./bin/dredd would be nice, I'd expect if someone is contributing then they will likely want to test it directly out.. C++11, more like C++14 now. Perhaps even some C++17.. Supported compiler list is found at https://github.com/apiaryio/drafter/#compiler-support, we require more than C++11 these days.. I wonder, does it make sense to enable FOSSA? FWIU it is free for OSS to some extent. At least then there is a status badge on PRs indicating if the license of a dependency is problematic so people are aware upfront.. \ud83d\ude31 . and ghissue https://github.com/apiaryio/dredd/pull/1127 ?. This paragraph is a little awkward and I am not sure how to completely fix it.\nI'd suggest changing the first part to:\n\nDredd supports many programming languages thanks to the work of several contributors\n\nThe part \"who were so awesome\" feels off to me but I don't have a suggestion on how to improve it.. Yeah, and it's also in separate PR so wasn't nessecerily saying this PR blocks it (I just assumed the other PR would be merged already when I wrote it). Just wanted to point it out so it wasn't forgot. This doesn't really matter since it's just a redirect but paranoid me with https. Feel free to ignore this suggestion :)\nsuggestion\n        <a href=\"https://bit.ly/dredd-hiring\" class=\"btn btn-neutral\" target=\"_blank\">. Makes sense to the extensions here \ud83d\udc4d . Not usually a good idea to use {} and [] as default arguments to a function in Python. Advisable to use None and then handle it later in the body of the function:\npython\ndef foo(content=None):\n    ...content or []\nThis is problematic because the the same instance of these instantiated array/dict will be passed as the default argument to link each time, any mutation will apply to further invoations of the function.\nTake the following example:\npython\ndef addHello(content=[]):\n    content.append('hello')\n    return content\n```python\n\n\n\naddHello()\n['hello']\naddHello()\n['hello', 'hello']\naddHello()\n['hello', 'hello', 'hello']\n``. Down to you, but I feel like these references are a little ambiguousDraft 3could mean anything. I think it would be better to name them withJSON Schemain the name.. I also realise I think I let this slip through in separate PR inghissue`.. If I understand correctly, only links to Draft 3 and 4 are used. Perhaps we can just delete these other ones? No use in unused code/links.. > Acronyms and initialisms should always be all capitalized, or all lowercased.\n\n\n\nWouldn't this change be going in opposite direction? (although personally I dislike this rule). Maybe it would be nicer to rename this getGoBinary, it's a lot clearer on what it does.. \ud83d\udcad We're using CLI elsewhere so this becomes inconsistent (CLIReporter).. Maybe it would be better to:\njs\nconst { warningLocationToRanges, rangesToLinesText } = require('./blueprintUtils');\nNot gonna comment on the whole \"utils\" module :).. I know this is what the AirBNB rules say, but wish this rule wouldn't exist and it would be valid to use HTMLReporter.. suggestion\n// roughly billions of installation & distribution problems.\nNot quite billions either but ok \ud83d\ude04 . I have seen this too and was quite confused by it. This explains a lot!. What about using flatMap instead of imperitive loop/concat?\njs\nconst location = annotation.attributes.sourceMap.flatMap((sourceMap) => sourceMap.content);. I wonder, is this as useful for debugging?\nI thing coercing an error to string won't show stacktrace like console.error will so this might make it harder to debug tests. But it is late so I didn't dig into this, will proceed with review tomorrow.. I don't really know chai's assert that well, but should this be assert.isTrue?. Is there a case where hookfiles doesn't default to empty array?\nShould there be a test case to cover this change?. This reminds me how very simple it would be to support async/promise returning callbacks:\n```js\nconst result = callback();\n// Once Node >= 10 use https://nodejs.org/api/util.html#util_util_types_ispromise_value\n// Or perhaps only support Promises if Node >= 8 or Node >= 10 to simplify code\nif (/ node >= 8.2 where callbackify is existant? / && result && result.then) {\n  const {callbackify} = require('util');\n  callbackify(result)(() => callback()); // shouldn't we support errors? I saw below async API doesn't?\n} else {\n  callback();\n}\n``. I think it would be nicer if the loggers we're dependency injected into the reporters. It will make it easier to adapt and simplify the testing removing the need for stubbing.. If I understand correctly, you are changing the test for clarity and the old argument (-l`) is still supported?\nAre we removing test coverage for the -l option here? Perhaps worth having tests for both -l and --level. Wondering, would be possible / make sense for us to detect this argument still and map it to log level and provide a deprecation warning to the user? Should make it simpler for users to upgrade and understand why some arguments no longer work.. NIT, it would be easier to review if the commit that removed the option also removed it from the code. It's harder to review when things like level is removed but a test using level was updated in separate commit etc. Mostly feedback for consideration in future PRs I don't expecyou to change anything at this point.\nNot to mention this separation would make it problematic for anyone to use git-bisect on this project as tests may not pass on some commits.. \ud83e\udd14 is this log message useful to anyone? Dredd exiting with a status code should already be pretty clear.. This line is duplicated and since it contains a log message perhaps it would make sense to use the same string to prevent any potential for typos in messages only if Dredd is used with certain options.\nPerhaps something like the following closure and using some form of composition to use it with the other two closures.\njs\nconst logExit = exitStatus => logger.debug(`Exiting Dredd process with status '${exitStatus}'.`);\nOutside the scope of this PR but just a thought while reading.. Are these messages really warranted? (same with pritning version, etc).\nIt should be pretty clear already. Some places we're adding fullstop and quotes around variables in the message and other times relying on the logger behaviour of multiple arguments. Should we have some consistency here?\nlogger.debug(`Exiting Dredd process with status '${exitStatus}'.`);. Should this message be a warning from the reporter? It is a reporter specific warning.. Unsure about the behaviour here, generally in CLI tools it is good idea to detect the default value based on if the shell is TTY (example at https://github.com/kylef/Commander/blob/314f8d7455e25e60e9e9b850040eebd0a87f2527/Sources/Commander/Error.swift#L42-L56, although in this case you should simply be able to use an isatty method instead of the TERM parsing, that works around Xcode specific logger that don't apply here).\nThat way if I do something like:\ndredd > somefile\nColours will automatically be disabled and the written file won't include ANSI codes.\nOf course, --colour and --no-colour would override from automatic behaviour.. As a user it would be nice, it doesn\u2019t have to be for long though. 3-6 month period. It\u2019s up to you though not blocking on this.. This is completely out of the scope of these changes but a potentially useless idea I wanted to share.\nI was also thinking / wondering how localisation is done for Node CLI apps (guessing that no one is tackling that). I've dealt with internationalisation / localisation in the past in other languages and environments and you usually end up one with language specific file that declares all of the human readable messages which might be nice to separate them from the logic. Makes it easier for people to change and potentially easier to spell check them in CI.\nThere's a nice example for iOS I wrote at https://github.com/cocodelabs/palaver-l10n/ (even has Czech locale and linting of the language files). In a past life I also wrote django-request which has localisation (https://github.com/django-request/django-request/tree/master/request/locale).\nIn this case we could have a language or similiar file that could contain all of the output messages, it might be a nice separation.\n```js\n// language-en.js\nconst EXIT_DEBUG_MESSAGE = exitStatus => Exiting Dredd process with status '${exitStatus}'.;\n```\n```js\n// some-file.js\nconst { EXIT_DEBUG_MESSAGE } = require('./locale.js');\nconsole.log(EXIT_DEBUG_MESSAGE(1));\n```. Since this is erroring, this is not deprecation. It's removal. Deprecation would be when it still works but is discouraged and potentially scheduled for removal in the future:\n\nIn several fields, deprecation is the discouragement of use of some terminology, feature, design, or practice, typically because it has been superseded or is no longer considered efficient or safe, without completely removing it or prohibiting its use. It can also imply that a feature, design, or practice will be removed or discontinued entirely in the future\n\nFrom Wikipedia on Deprecation.. To fix, if you want to keep this behaviour I think you can rename it to now include \"deprecated\". Alternatively you could actually deprecate it and set config.options.equivilent option = foo etc. I don't like the way we are testing the specific unit for a few reasons (firstly we have to export this internal method for testing), but the biggest reason is it is perhaps error prone. Especially considering Dredd does not error out for invalid options. For example, if I invoke dredd with --foo or even a typo of a valid option, dredd will continue instead of erroring out:\n$ dredd api-description.apib http://127.0.0.1:3000 --dry-run --foo\ninfo: Beginning Dredd testing...\n...\ncomplete: Tests took 5ms\nIMO this is a huge anti pattern because if a user typos or misenters an option it could result in undesired behaviour which could potentially be destructive.\nI'll show you perhaps an example outside of Dredd scope:\nshell\n$ rm -fr --dry-run /\nrm: illegal option -- -\nusage: rm [-f | -i] [-dPRrvW] file ...\n       unlink file\nNow, if --dry-run (perhaps I typoed --dri-run) doesn't exist the potentially destructive command did not proceed. An example closer to Dredd could be perhaps attempting to use Dredd CLI options to skip certain destructive methods. For example if I wanted to run Dredd on production and wanted to skip method DELETE for obvious reasons and I typoed the skip command I would hope that Dredd errors out due to invalid arguments instead of running a mis-understood command.\n\nAnyway, my actual point (sorry got distracted on side-bug story/tangent \ud83d\ude00) is what if _coerceRemovedOptions created a invalid option that doesn't exist we would never know. Since the test is for the unintegrated unit (and also Dredd doesn't validate invalid options) we could have room for invalid code. Perhaps right now we can be 100% sure with careful review, but what about in a few years times when (future) you or someone else decides to remove an option --color because it is spelt wrong :trollface: and they add --colour these tests would continue to work so they cannot protect against this type of bug. The tests don't actually know that the option was parsed correctly.\n_coerceRemovedOptions could produce invalid options and our tests cannot catch them. If _coerceRemovedOptions created an option during conversion of -c to --color where value was wrong type, perhaps --color was refactored to take other values like --color red and not boolean, and this logic returns boolean (which is what its tests expected) the integration into test of the options parser is incorrect. Tests could continue to pass.. I didn't nessecerily mean supporting localisation. I was thinking of it as a way to expose all the human readable output in a single source file instead of the user facing strings skattered across the code base.. Anyway, tl;dr I am not sure these specific tests add much value over what the code does. They do not protect you against future refactoring which is the key reason I do TDD.. We're adding new component to the transaction name which is a feature? This commit is tagged as a fix.. Shouldn't this be a Swagger media type?\n\nwhen processing other than OpenAPI 2 document and given transaction has non-2xx status code. const filename = 'api-description.yml';\n\nShouldn't the media type be the YAML variant?. Is localeCompare correct to use here? Perhaps the tests could fail on some users system where they use a locale that is pretty different to our assumptions in the file order as we're expecting the result to be consistent with assertions below. . Outside scope of this PR but brings it to my attention, should the same rule apply to OAS3?. Oh my bad, misread.. What's the point in passing in the current working directory when it can always be found with process.cwd()?. Since you're using path.join, perhaps we shouldn't hard-code the rest of the path separators in this too?\njs\npath.join(CWD, 'test', 'fixtures', 'multifile', 'greeting.apib'),\nSame applies to all joins below.. I later realised that this doesn't always represent the current working directory and the name is maybe tricky.\nPerhaps it would be clearer to rename this from cwd to something else, like directory, base or working_directory. \"cwd\" stands for current working directory which I don't believe this is.. ",
    "HansHauge": "For what it's worth we just had this issue. We ended up needing to update gcc on our Jenkins server.\n. ",
    "nenadalm": "example:\nserver.js: http://pastebin.com/2uJeg7VW\ndoc.apib: http://pastebin.com/TRnZ0gEc\n$ node server.js\n$ dredd doc.apib http://localhost:8888\nnow it should throw message from the title\n. thanks - hopefully it will be merged soon\n. @OrCharles problem is hanging here: https://github.com/apiaryio/Amanda/pull/1 (nobody wants to merge for unknown reason)\n. ",
    "tu1ly": "@OrCharles it takes quite longer as we expected, but we are on good way\nhttps://github.com/apiaryio/Amanda/pull/1#issuecomment-45597975\n. according to conditions in expand-uri-template-with-parameters.coffee\nimho it should be if param['required'] == true and (param['example'] == ''  or param['example'] == undefined)\n. what if example: 666\n. example: 666 and type string, imho it should cause error\"URI parameter '#{paramName}' is declared as 'string' but it is a number.\" - now it is treated as string\n. yes, sorry didn't noticed unless\n. ",
    "pimpin": "My bad, the blueprint was not valid (although it was said valid in APIARY.IO editor).\nI had non parsable json responses.\n. ",
    "JanBednarik": "Because it can't be solved in snowcrash, what do you think about command line option for dredd --ignore-newline  which will ignore trailing newline in body?\n. ",
    "JaredReisinger": "Awesome... thanks for tracking it down and forwarding the issue!\n. ",
    "ErikPettersson": "Hey,\nI've also commented on the Blueprint project (https://github.com/apiaryio/api-blueprint/issues/100), but that also includes syntax additions to keep things a bit sparser.\n. ",
    "manuel84": "I get this failure since v 0.3.3. Now I'm working with Version 0.3.2, which accepts null values.\ninfo: Displaying failed tests...\nfail: GET /api/status.json duration: 5705ms\nfail: body: The \u2018build\u2019 property is required.\nbody: The \u2018revision\u2019 property is required.\nbody: The \u2018message\u2019 property is required.\nrequest: \nbody: \nheaders: \n    User-Agent: *** Test/0.9.9 (iPhone; iOS 7.0.4; Scale/2.00)\nuri: /api/status.json\nmethod: GET\nexpected: \nheaders: \n    content-type: application/json; charset=utf-8\nbody: \n{\n  \"version\": 2,\n  \"build\": null,\n  \"revision\": null,\n  \"locales\": [\n    \"de\",\n    \"en\"\n  ],\n  \"deploy\": \"2014-06-17T11:36:02+02:00\",\n  \"boot\": \"2014-07-01T09:49:09+02:00\",\n  \"message\": null\n}\nstatusCode: 200\nactual: \nstatusCode: 200\nheaders: \n    access-control-allow-origin: *\n    access-control-allow-methods: POST, GET, OPTIONS\n    access-control-max-age: 1728000\n    content-type: application/json; charset=utf-8\n    x-ua-compatible: IE=Edge,chrome=1\n    etag: \"d96b14b424d1d39e16aaad2ac2a97529\"\n    cache-control: max-age=0, private, must-revalidate\n    x-request-id: f724995a543d54bb6e6dffb8bf8f3d77\n    x-runtime: 0.000000\n    server: WEBrick/1.3.1 (Ruby/2.1.2/2014-05-06)\n    date: Tue, 01 Jul 2014 09:51:37 GMT\n    content-length: 151\n    connection: Keep-Alive\n    set-cookie: _session_id=BAh7BkkiD3Nlc3Npb25faWQGOgZFVEkiJTc1ZGVmOTZhMDZiZWFmODkwNjllZmNiMzYzYmI2YmZiBjsAVA%3D%3D--0fa9cee0c816e76742a03335b0477066246e80b7; path=/; HttpOnly,_session_id=BAh7BkkiD3Nlc3Npb25faWQGOgZFVEkiJTc1ZGVmOTZhMDZiZWFmODkwNjllZmNiMzYzYmI2YmZiBjsAVA%3D%3D--0fa9cee0c816e76742a03335b0477066246e80b7; path=/; HttpOnly,_paij_backend_session=BAh7BkkiD3Nlc3Npb25faWQGOgZFVEkiJTc1ZGVmOTZhMDZiZWFmODkwNjllZmNiMzYzYmI2YmZiBjsAVA%3D%3D--0fa9cee0c816e76742a03335b0477066246e80b7; path=/; HttpOnly\nbody: \n{\"version\":2,\"build\":null,\"revision\":null,\"locales\":[\"de\",\"en\"],\"deploy\":\"2014-06-17T11:36:02+02:00\",\"boot\":\"2014-07-01T09:49:09+02:00\",\"message\":null}\n. ",
    "obihann": "poke This issue is coming up for me now, any progress?\n. @w-vi If this is a manpower issue let me know I can likely help out. Thanks for the reply though.\n. Just a poke to bring this back on the table. @w-vi @netmilk\n. No problem, I'll have that for you later today.\n. ``` md\nDelete a Object [DELETE /{id}{?permanent}]\n\n\nParameters\n\npermanent: 0 (number, optional) - Set if the object will be permanently deleted\nMembers\n0 - Flag the object as deleted however do not remove it from our system\n1 - Permanently delete this object\n\n\n\n\n\n\n\nRequest\n\n\nResponse 202\n```\n\n\nSo this is an example of some markdown I have, it represents a single API endpoint that accepts an optional URL param that can be either 0 or 1. Ideally I would like dredd to acknowledge this and execute the request for each of the possible URL param values.\nAn alternative solution that may required updates to the MSON spec would be a way to outline what URL param values are includes in each request.\n. Another use case would be two request's one with a body one without, the one without would return something like a 400, perhaps with a explicit error. The request with a body would return something like a 200. The point here being to test that invalid requests do not break (500) the server and are handled properly.\n. @netmilk I'm also looking for this feature, could I possible be added to the beta?\n. Just a note that their is now a pull request in the MSON specifications to allow null as a type - apiaryio/dredd/issues/194 \n. @honzajavorek sure, I'll rebase this and see how it goes. I'll also try to add those content types in.\n. @w-vi @netmilk thanks for the reply, glad you agree its a useful idea. Honestly this is causing me a bit of trouble on a current project and I'm more than likely going to have to fork dredd and implement my own solution, so if you would like we can discuss the best way to handle this and then when I make the change I can submit a pull request.\n. That works for me. I'm currently skipping my tests that relate to LINk and UNLINK, however they can stay in that state for a few more days haha. \n. Just a poke to bring this back on the table. @w-vi @netmilk \n. Awesome! @pksunkara when can can we expect a new release of drafter? I know nullable is in the master branch since I was so involved in that, but it seems that we need a new tag release so that Dredd can point specifically to that.\n. @pksunkara thanks, I'll try to take a look at that tonight and help you guys out a bit.\n@netmilk I just want to verify all that is holding this up is in fact apiaryio/drafter, I ask this because I understood dredd uses apiaryio/drafter.js (which is being replaced by apiaryio/protagonist)? \n. I think I have my confusion figured out @netmilk... Dredd uses drafter.js which is a wrapper (?) for protagonist which uses drafter via a git module. Right?\n. That makes perfect sense, thanks. I'm kind of afraid to ask but what is waiting on moving dredd to protagonist 1.x?\nThanks.\n. Sounds good, thanks.\n. @netmilk I'm running into some difficulty right now testing an update to dredd so that it will use drafter.js and the latest (currently master branch) version of drafter. I have a feeling this may be because (as @pksunkara) dredd needs to use protagonist 1.x directly and eliminate the reference to drafter.js.\nMy question is how complex or simple do you think that will be, and what are the blockers preventing it from happening?\nI have a high priority issue right now with the project I am on that we cannot properly test our API with dredd due to the null limitations, I've been working closly with @pksunkara to implement this on MSON, snowcrash, and drafter, now that that is close to complete dredd is the next focus of my attention. I can help out on this, I just need to know what the blockers are so I can tackle them.\n. Hi @netmilk, thank you for your reply. Yes, this may be a limitation, so I will have to look into your suggested work around.\nRegarding protagonist, drafter, and drafter.js... Let me see if I fully understand this.\nDredd (latest release) uses Drafter.js (latest release), which uses Protagonist (older 0.x release), which finally uses Dredd (older release again). \nThe latest version of Protagonist (1.x) uses a newer version of Dredd (not the latest though), however this results in a different feature set than what Dredd.js (using 0.x Protagonist) provides? Because of this my attempts to migrate Dredd to Protagonist 1.x and eliminate Drafter.js is actually a very large task that will not solve my original issues.\nAdding all that together, I am seeing that the latest version of Drafter does have the features I need, and the scheduled 1.1.0 release of Drafter will also include 'nullable'. So this is a rough outline of what has to happen before Dredd can properly support nullable\n1) 1.1.0 release of Drafter\n2) Protagonist updated to 1.1.0 version of drafter\n3) Dredd updated to use the above mentioned release of Protagonist\nDoes all that sound about right? Sorry, if I am way off.\nIf I am actually correct, then I think I need to work with @zdne currently to get the 1.1.0 release of Drafter taken care of, and then Protagonist updated to use that. Then I can return to Dredd.\n. @pksunkara thanks. What is involved in #1 and how can I assist?\n. Not complete yet, just starting the pull request so its ready.\n. @w-vi Just to make sure I'm not going in a wrong direction, the \"do not merge\" label is only here because of my comment and the failing tests, correct? Or am I just handling this the wrong way?\n. @w-vi makes sense thanks. \n. Closing this because after hearing from @netmilk and @pksunkara this is not the solution I need for my problems, and is much more complicated than I thought.\n. I started a similar PR #285 but after talking to @netmilk and @pksunkara I learnt that their is a big difference between drafter.js and protagonist, specifically, drafter does not render json the same as drafter.js does. Check out #283 and you can see the full conversation. I think this may have to wait until drafter us updated to match the same functionality as drafter.js, @pksunkara should be able to speak to a timeline or what is needed for that, but I think that is our first step before we do this.\n. I'm stuck waiting for it as well but more because of the new nullable attribute that will be added. As I understand it drafter has to be changed to include JSON schema rendering, after that they can release 1.1.0 of drafter, then update protagonist to that version, and lastly dredd.\nThey have setup a 1.1.0 milestone for drafter however I'm not sure if that list of issues includes the JSON schema rendering. \nHopefully that helps :+1: \n. ",
    "w-vi": "Hi @obihann this hasn't been addressed yet, next week we'll be able to give you some ETA.\n. @obihann It is a manpower problem at least to some degree but first we have to decide how to handle the edge cases (missing request/response etc.), I guess we will discuss it once @netmilk is back in game.\n. Just out of curiosity, could it possibly be that expected header is Content-Type: application/json but the actual one is content-type: application/json without the capital C ?\n. This is not really a bug but a feature I'm afraid. The issue is that in MSON everything is optional by default and therefore the JSON Schema generated cannot enforce the type in the array as there could be something else as well. The main issue is that in MSON things MAY but in JSON Schema they MUST ... see the discussion in MSON repo https://github.com/apiaryio/mson/issues/31\n. @netmilk I'm done with it.\n. If I undrestand you correctly, you need to parse the Blueprint and get some json output describing the endpoints defined in the Blueprint, am I corect? If so than have look at https://github.com/apiaryio/protagonist\n. Looks legit, merging\n. @kylef sounds good we can discuss it next week in person as we've got some more plans with it.\n. The output needs to be unbuffered, so maybe locally you have set it but on Travis it probably is buffered. Regarding the cucumber I don't know as I'm not familiar with it.\n. And what about using the ini_set as in:\nphp\nini_set('implicit_flush', 'on');\nini_set('output_buffering', 'off');\n. @ddelnano Wicked job man! We'll improve our test suite, thanks for all the work and feedback. I'm really happy that you've made it work!\n. Hi @sdepold you can easily do the throttling for yourself using the before_each hook and pause the progress there for a bit to achieve the needed rate. \n. Hi @icambridge thanks for the report, we'll have a look into this. Cheers.\n. Quick fix is in place see PR #264 \n. @obihann good suggestion I'll leave the decision on @netmilk how to approach this including the #268 issue as they are related and may be solved in one go.\n. @obihann Can we postpone the discussion to the next week when @netmilk is around? \n. Hi @snikch first thanks a lot for the feedback and for sharing your tribulations with writing a hook handler for compiled language, I'll try to address what I can straight away and cover the rest a bit later.\n- --hookfiles you don't need that, unfortunately as you have discovered it needs to be specified as an argument event though it is completely useless. I have created an issue 270 for it.\n- I'm very sorry that the example features are misleading, being this a beta thing we have to polish a lot of edges. We are likely to change that in foreseeable future anyway. But thanks a lot I'll update it with either ruby or python version.\n-  The last one the execution _order.feature - can you please share the code? I'll have a look what it might be. One issue is stdout buffering. I don't know if you are using fmt but have you tried os.Stdout.Sync()\nI haven't addressed the hooks issue, I'll have to dig a bit deeper to understand what actually is the problem. When you say internal hook handlers what are you talking about? Maybe I'm just tired, so forgive me.\nAnyway thanks a lot for the feedback and don't hesitate to ask more questions, I'm a big Go fan so I'm exited that somebody has started integrating it with dredd before me.\n. @snikch Are you modifying the transaction object in any other way than adding the hooks_modifications key to it or appending it? Also one tiny change, could you change in the .feature @debug at the beginning of the scenario for @announce as the @debug does a bit more than is needed and in case of php handler it was causing us headache.\n. @snikch I've just noticed that the you get a fail in the dredd test itself and the output is not showing the expected body, see example below. What version of dredd are you using? Can you just bypass all the hooks to see if you get the dredd test passing i.e. the implementation matches the blueprint?  \n``` sh\n - -> /message\n      fail: GET /message duration: 72ms\n      FOR TESTING ONLY\n      0 before all modification\n      1 before each modification\n      2 before modification\n      3 before each validation modification\n      4 before validation modification\n      5 after modification\n      6 after each modification\n      7 after all modification\n      FOR TESTING ONLY\n      info: Displaying failed tests...\n      fail: GET /message duration: 72ms\n      fail: body: Real and expected data does not match.\n  request: \n  body:\n\n  headers: \n      User-Agent: Dredd/0.6.2-pre3 (Linux 3.18.20-1-MANJARO; x64)\n\n  uri: /message\n  method: GET\n\n\n  expected: \n  body: \n  Hello and World!\n\n\n  headers: \n      Content-Type: text/html;charset=utf-8\n\n  statusCode: 200\n\n\n  actual: \n  body: \n  Hello World!\n\n``\n. I see, well currently there is abeforeEachevent only and the handlers, looking atruby,pythonandPHPare handling this event twice, basically run allbeforeEachhooks and then thebeforehooks for given transaction name. It is confusing and should be properly documented. if you look at the ruby  hook handler or python it is clear. The information that each event is fired it is directed to end users, that is for those writing the hooks not the handlers. Thanks a lot for pointing this out.\n. Not at the moment, in case of thebeforeEachandbeforethey will do their thing on thetransaction objectand then  the handler returns that object to dredd. Is there a use case where this is a big issue?\n. @honzajavorek Actually it was a question how handlers should handlebeforeandbeforeEachthere is no actionable item here or if any then  better docs :). As you can see itis fixed now, but definitely should be part of user input. Are your hooks doing so much that 5 sec is blocking you now? Sorry fort he inconvenice it is still a beta feature which needs polishing but thanks for your input, we really appreciate it. Just out of curiosity which hook handler are you using?\n. I meant fixed as in it is a constant now but will be made as part of user input. Quick hack to as workaround is to fork dredd and use your fork until it is fixed, which i suppose will be quite soon as we are going to improve the hook handlers within next month. I'll let you know.\n. @NGMarmaduke cheers! :balloon: \n. @netmilk ... possibly squash to single commit? Or two commits one from miiila and one from you?\n. @netmilk approved!\n. Indreddit is expected to have some sample value, otherwise the value isnulland that's not a number. Hope that helps.\n. Strange, obviously the system still has the port taken so it looks like it is not cleaned up properly when dredd finishes, looking at the code it looks like the server receivesSIGKILLand there any cleanup is left for the kernel. I guess we know what's going on now.\n. Yes, I guess it was fixed by #332 as it has cleaned up the shutdown\n. @philsturgeon Yes it is ... without fixing the JSON Schema it won't work.\n. Done in #309 therefore closing \n. @obihann It's WIP right? So this is here to make sure that nobody tries to merge it until you say it's done, than I will remove theDO NOT MERGElabel.\n. @obihann Also another thing is that dredd now goes through big overhaul internally, so if you are going to make bigger changes it will probably need rebase ... @netmilk could you please comment on this.\n. @vsejed glad that it is working. Support for node 4.x.x is on our radar.\n. @nick13jaremek Hi, the dependency causing the crashes was fixed last week, so I suppose next week there will be dredd release supporting Node.js 4.x.x\n. @nick13jaremek : I have some bad news, the dependencyprotagonist` is not fully working yet (some features are not there for 4.x.x yet), we have to wait until that gets fixed completely. So this week there will definitely not be any dredd release for 4.x.x\n. @lulco see the note in the README\nNote: Dredd works smoothly with node.js 5.x.x, 4.x.x, 0.12.x, 0.10.x, and iojs v2.x.x.\n. We have to fix our protagonist dependency, which I am going to work on now. Dredd for v4.x should be out in 2-3 weeks, depends on how much bugs we encounter on the way.\n. Just to clarify what's missing. We need protagonist to generate JSON Schema and that's the bit I'm now working on, basic stuff is already working, now figuring out the edge cases and darker corners of both, MSON and JSON Schema, specs\n. Just merged the #309 so it should work on node v4 and v5 not properly tested yet but if somebody wants to give it a shot from master feel free. Travis test will get updated soon to test for those as well. Once that is done and npm package released I will close this one.\n. @ouziel-slama : The tests are failing, please have a look. And ideally try to come up with some way how to test it, otherwise we can't merge it. \nAlso why the options are sent to hooks?\nOtherwise good idea. Cheers!\n. Hey @runk I'm excited that dredd can be so easily bent to make a benchmarking tool, nice job. It is something we are considering to add, but as there is a bit overhaul of the dredd internals in progress I wouldn't recommend doing it just yet. As the code might have changed a bit and it would be a waste of time. But I'll keep this open so we can come back to it once the overhaul is done. Cheers\n. Hi, @aimer1124 , thanks for the report although node 4.x is not supported yet, watch for updates on this issue https://github.com/apiaryio/dredd/issues/292 , I'll close this one as it is a duplicate. Cheers.\n. @nschloe yes, please watch for updates on https://github.com/apiaryio/dredd/issues/292\n. @netmilk after bit of fiddling I have come to conclusion that it is one of the dependencies causing it. So I would have a look on what dependency has been updated in the last commits and see if downgrading it would help\n. fixed in #309 it was dependecies ...\n. @macdao thanks a lot for the report, we'll have look into it.\n. Hi @amuino thanks for the report, we haven't seen this before, can you provide us with a minimal example having this behavior?\nSometimes it gets a bit confusing as you get after and after_each hook calls with the same transaction, isn't this by chance the case?\n. @amuino  you can check in the hook handler if the transaction is skipped and in that case just quickly return without the setup/teardown. See the transaction object for more details\nAlthough I agree that this could be for convenience a configuration option as in skip hooks for skipped transactions. \n. Sometimes people want their hooks to be called because they create a chain of actions on the DB level, not saying that it is a good practice :) but it happens so I'd go for configuring this behaviour  and having the skip the hook too as a default.\n. @honzajavorek please review and merge\n. It's an example block triple back tick watch it closely\n. @ascripcaru Wicked! Nice job! Thanks a lot. the node 0.12 seems to either have flaky test or there is something wrong .... restarting the build one more time if it fails then it needs investigation.\n. @ascripcaru possibly flaky test then ... good news, cheers.\n. @netmilk  it works also on iojs 2.x.x so i would update the readme thatit supports iojs too, we are actually not testing iojs 1.x.x see the travis file\n. @honzajavorek  can you squash it? 3 commits for changing README feel a little bit too many :)\nOtherwise legit and ready to go :sunny: \n. @honzajavorek is this still valid with protagonist 1.2.5?\n. once the tests are green feel free to merge\n. Sorry guys, but sending newline delimited messasges using TCP sockets is a basic skill, nothing fancy, pick any tutorial on TCP and you will have the code there. You don't need any library, because it is bultin everywhere, where you get at least some networking. And this is not the famous NIH syndrome, it's like asking for a library to write a simple text to console. Am I so old that I think this is a basic school stuff but kids don't know about it?\n. I see some benefits in the HTTP, but it's not ease of use, it is the ability to have hooks running in cloud but otherwise I don't see any benefit really.\nMore overhead, more code, not duplex ... \n. @honzajavorek the issue is that current python hook handler is not catching the SIGTERM signal and so is SIGKILLed and the return value is not present anymore.\nFix needs to be done hook handler side, just catch SIGTERM and stop gracefully.\n. Regarding the clarification, it is intentional, as  it sends data  to socket and then it is done it doesn't need to wait for the sending being done as that it would not proceed further and wait there forever.\n@honzajavorek you have my approval ... go for it, this is a big step in paying off the debt.\n. @honzajavorek still looks good, so :+1: for merging\n. @netmilk might be related https://github.com/apiaryio/drafter/issues/207, any particular blueprint causing the SIGSEGV?\n. So it is the same issue as mentioned above, please follow the https://github.com/apiaryio/drafter/issues/207 issue for updates.\n. @honzajavorek @netmilk please verify that new protagonist 1.2.5. is fixing it for you as well.\n. @mypark very often there are some whitespace characters somewhere which are causing this seemingly matching responses ... there is an issue #305 on this topic already. \n. @justinabrahms is it possible that your hooks file is not compiling or has some sort of error that the handler fails to import it? Try python -m py_compile yourhooks.py. This behavior usually is caused by some error while importing hook files. \n. IC, so on OSX it runs in docker too? Well than it is more of the docker on OSX issue, I have never tried it in docker on OSX, can you please describe in more detail the setup, is it that hooks are local and dredd in docker or how is it? Docker on OSX is a VirtualBox VM and the networking is different a lot, like binding to 0.0.0.0 etc so it very well maybe some of this sort.\nIf the command produces no output then everything is good, it compiles the python code without errors.\n. The bridge between Dredd and hooks handler is a TCP connection where the server is started by the hook handler listening on 127.0.01 and port 61321 and Dredd connects to it again using the loopback and that may be the issue that it relies on loopback device. See https://github.com/apiaryio/dredd-hooks-python/blob/master/dredd_hooks/dredd.py for the details.\n. I think that it has something to do with how Virtualbox exposes 127.0.0.1 maybe we should try to bind to 0.0.0.0 on the hooks handler side or something similar, will have to find a OSX machine and give it a try. \n. @romansklenar If you want to give it a bit more time, can you try to change the binding address in the dredd_hooks package https://github.com/apiaryio/dredd-hooks-python/blob/master/dredd_hooks/dredd.py#L32\n. Hmmm, so something really fishy here. next thing I would try is to run the dredd_hooks alone without dredd, using https://github.com/apiaryio/dredd-hooks-python/tree/master/bin this file and then either with netcat or telnet manually connect to it using 127.0.0.1:61321 and see if it works\n. So it looks like there is something wrong in dredd, will have to look a bit deeper, thanks a lot for providing all this debugging info.\n. Circle supports the same thing, so caching node_modules should help. Somebody should try it first though.\n. This is a bug in drafter,  it is not correctly generating schema for Include statements, please track the issue  on dratfer repo https://github.com/apiaryio/drafter/issues/223\n. @xlexi Do not use the Include statement .. not really a workaround. The issue should be fixed very soon.\n. It is now fixed in the drafter/protagonist and released so no more workarounds needed, just update the protagonist dependency to 1.2.6\n. @honzajavorek please document it bit more in the README or maybe better in the test-hook-handlers.coffee comments. What it actually does is not obvious, add the caveats as well to make sure it is known to everybody.\n. otherwise I am giving it go ... :fireworks: \n. @honzajavorek perfect :clap:  so now it is :checkered_flag: \n. cpanm FTW http://www.cpan.org/modules/INSTALL.html\n. It didn't change the coverage at all, you can have a look  https://coveralls.io/builds/5046573\n. @honzajavorek just one thing, otherwise it's good to go\n. @honzajavorek :+1: \n. @honzajavorek  seems like coffee-errors are still needed.\nFrom the Travis build log Error: Cannot find module 'coffee-errors'\n. Hi @teone the warning is harmless, as the hooks are importing modules dynamically from given files it causes this warning in Python 2 because it is geared towards Python 3. So it looks like you have no issue actually. The reason you don't see the print output in dredd is that print() uses buffered io and to make sure that it get's propagated you need to add sys.stdout.flush() after your print statement. See https://github.com/apiaryio/dredd-hooks-python/issues/16\n. @honzajavorek Yes it is bit confusing and it is one of the things to be fixed once there is a time for it, as always :)\n. @honzajavorek Haven't got time to do thorough detailed review but I haven't noticed anything suspicious so if nobody else volunteers go ahead and let's wait for new issues :)\n:+1: \n. In docs I see support for node 0.8 https://github.com/apiaryio/dredd/blob/master/docs/quickstart.md#quickstart\nso how is it?\n. This PR should fix the docs too then :)\n. cool, so I think this is good to go even if the coverage has decreased :)\n. 0.002 so a serious drop :D\n. Another coverage decrease, more of this and you will end up with no coverage at all ;)\n. I don't know but apiary reporter still exists and the settings are still the same aren't they? Is this information described somewhere else?\n. @honzajavorek that is API Blueprint of the apiary reporter not the client side settings.\n. @timgent Yes you can use hooks as a workaround, see Dredd docs on hooks for some examples. You can utilize beforeAll hook to get the token and then beforeEach to add header. See session handling example for insipration. I hope this helps.\n. Just to add my 5 cents, overriding config file values from CLI is a common and sensible thing. Look at git or gdb or just any more complex command, the usual behaviour is that config file is the default and it gets get overridden by CLI specified values.\n. These examples are in other languages too, all of them were rewritten. \nhttp://dredd.readthedocs.io/en/latest/hooks-perl/#examples\nhttp://dredd.readthedocs.io/en/latest/hooks-php/#examples\nhttp://dredd.readthedocs.io/en/latest/hooks-python/#examples\nhttp://dredd.readthedocs.io/en/latest/hooks-ruby/#examples\nSo I think this one can be closed.\n. @pksunkara see https://github.com/apiaryio/boutique.js/blob/master/test/formats/samples-json-schema-v4/variable-property.json\n. @jesuscreyes Debugging CI issues is terrible, but it looks that for some reason your server shuts down almost straight away. Can you start the server out of dredd and give dredd a nop server start so that the server is decoupled from dredd? something along these lines:\n```\nbefore_script:\n  - server_start\n  - dredd --server \"echo X\"\n  - server_stop\n``\n. :+1: \n. Possibly squash it to single commit.\n. This has ruined my CI run , switching to stable :)\n. @honzajavorek maybe after publishing you can have a special CI run which would install dredd and run it, so at least you can catch it fast.\n. @honzajavorek what about build local package and then trying installing that?rm -rfing node_modules so it starts clean?\n. Just a question how the error-ing  hooks work in the language hooks like ruby, python etc?\n. @borekb I think so.\n. @phenixiim Well not always, see the dredd documentation covering what is tested and when. http://dredd.readthedocs.io/en/latest/how-it-works/#automatic-expectations\n. It is a strange sounding error, but actually it is caused by the trailing,at the end of \"name\": \"\u0420\u043e\u0441\u0441\u0438\u044f\",`in the apiary json. If you try to validate the apiary json in http://jsonlint.com/ you'll get the same error.\nDeleting that , solves the problem.. LGTM. It looks like drafter is not the problem as the output from drafter seems valid, no errors or warnings:\n```\n/home/wvi/bin/drafter -f json -u /home/wvi/src/drafter/x1.apib\n{\n  \"element\": \"parseResult\",\n  \"content\": [\n    {\n      \"element\": \"category\",\n      \"meta\": {\n        \"classes\": [\n          \"api\"\n        ],\n        \"title\": \"stanby\"\n      },\n      \"attributes\": {\n        \"meta\": [\n          {\n            \"element\": \"member\",\n            \"meta\": {\n              \"classes\": [\n                \"user\"\n              ]\n            },\n            \"content\": {\n              \"key\": {\n                \"element\": \"string\",\n                \"content\": \"FORMAT\"\n              },\n              \"value\": {\n                \"element\": \"string\",\n                \"content\": \"1A\"\n              }\n            }\n          },\n          {\n            \"element\": \"member\",\n            \"meta\": {\n              \"classes\": [\n                \"user\"\n              ]\n            },\n            \"content\": {\n              \"key\": {\n                \"element\": \"string\",\n                \"content\": \"HOST\"\n              },\n              \"value\": {\n                \"element\": \"string\",\n                \"content\": \"http://localhost:8080\"\n              }\n            }\n          }\n        ]\n      },\n      \"content\": [\n        {\n          \"element\": \"category\",\n          \"meta\": {\n            \"classes\": [\n              \"resourceGroup\"\n            ],\n            \"title\": \"\"\n          },\n          \"content\": [\n            {\n              \"element\": \"resource\",\n              \"meta\": {\n                \"title\": \"hoge\"\n              },\n              \"attributes\": {\n                \"href\": \"/api/jobs{?bar}\"\n              },\n              \"content\": [\n                {\n                  \"element\": \"transition\",\n                  \"meta\": {\n                    \"title\": \"foo\"\n                  },\n                  \"attributes\": {\n                    \"hrefVariables\": {\n                      \"element\": \"hrefVariables\",\n                      \"content\": [\n                        {\n                          \"element\": \"member\",\n                          \"meta\": {\n                            \"description\": \"failed\"\n                          },\n                          \"attributes\": {\n                            \"typeAttributes\": [\n                              \"required\"\n                            ]\n                          },\n                          \"content\": {\n                            \"key\": {\n                              \"element\": \"string\",\n                              \"content\": \"bar\"\n                            },\n                            \"value\": {\n                              \"element\": \"boolean\",\n                              \"content\": false\n                            }\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  \"content\": [\n                    {\n                      \"element\": \"httpTransaction\",\n                      \"content\": [\n                        {\n                          \"element\": \"httpRequest\",\n                          \"attributes\": {\n                            \"method\": \"GET\"\n                          },\n                          \"content\": []\n                        },\n                        {\n                          \"element\": \"httpResponse\",\n                          \"attributes\": {\n                            \"statusCode\": \"200\"\n                          },\n                          \"content\": []\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\nOK.\n``\n. I think thatcontent-encoding: gzipcould be handled by Dredd itself. User could just pass a flag saying ifcontent-encoding: gzip` then unzip and it can be expressed somehow in the reporter that given response was encoded. Or maybe the other way around as I think that for most folks the compression is almost invisible (handled by nginx at the front) and therefore it could work out of box in dredd too.  I actually feel that gzip encoding is not part of the API but more part of the transportation layer so it should work without any effort on user's side.. When you say multiple projects, do you mean multiple repos?. I'll check Python hooks and see if I can implement this feature quickly.. Python hooks won't do anything bad, will skip the args so no issue here.. @hj @miiila done\n:medal_sports:  :trophy: . At the moment the hook server is started by dredd but you can at least in theory pass dredd the custom hook handler command in your case the docker run <your hook server> and dredd will start it. I haven't tried it myself yet but was thinking along these lines. I am happy to help you get this setup running.. Some info is available in the relevant part of the docuemntation http://dredd.readthedocs.io/en/latest/hooks-new-language/#writing-dredd-hook-handler-for-new-language. I see, In that case I'd just put some script which would run and stop on SIGTERM, something along these lines should suffice.\n```sh\n!/bin/bash\nfunction term() {\n    echo 'Caught SIGTERM, exiting.'\n    exit 0\n}\ntrap 'term' SIGTERM\nwhile true\ndo\n   sleep 1\ndone\n``. Look at the default values of all the related to hook handlers settings so that you listen on correct port and so on http://dredd.readthedocs.io/en/latest/usage-cli/#-hooks-worker-after-connect-wait.closeevent is fired when subprocess stdin/stdout are closed, this is not always the case if the subprocess shares them with others so it is not reliable, good move to useexit`.. :heart: . @honzajavorek  I am bit confused about the failed AppVeyor, I don't understand what went wrong and what can I do about it.. Merge it then :)\n. Hi @jamiehannaford  really good to see another docker attempt, I hope I will find some time to actually make this working easily as I've played with it couple of times but haven't had a chance to put it together and finalize it somehow. \nAs @ddelnano said the networking in docker is the crucial point and most of the issues I have encountered are related to networking. I'll add some questions and notes to each attempt so that we gather enough information to be able to help.\nAttempt 1 -  Now what networking are you using are correct ports exposed? Have you tried it using  the host network?\nAttempt 2: AFAIK the correct port for hook handler server is 61321, can you please verify on which port the hooks server is actually running?. Goodman or any other hooks implementation do not care whether you are using API Blueprint or Swagger, these are abstracted away. It looks like there is something wrong with the hooks. You can test it locally by starting the hooks manually and try netcat, telnet etc to connect and send it a message like \n{\"event\": \"beforeAll\", \"data\": [{}]} and a newline you should get something back.. We definitely plan to support OpenAPI 3.0 the question is when and the answer is yet to be determined.. @samekmichal You can invoke the hook handler standalone see https://github.com/apiaryio/dredd-hooks-python/blob/master/bin/dredd-hooks-python\nThis can provide some hints on what is wrong. Not perfect solution but usable workaround.. In my previous job we used to have complex live testing and needed to test workflows as it was a web based game server for flash games. We had test scenarios where two bot players played againts each other in a predictable way. We used to have a simple python based framework which interpreted the scripts it was fairly specific but used to have variables (you could save a value from a response for later use) so that you could accomodate dynamic values like ids etc . Otherwise it was similar to Dredd as it validated the expected to real results of calls although it allowed for regex expressions instead of values. I think for Dredd most of the code is there the only bit missing is the ability to chain calls. Hooks can save values for later use and replace values before the calls as well as validate so I think we should focus on making the chain of calls easy to use. I don't think that API Blueprint or Swagger file suffice in this case as an input I think you need extra input describing the flow.. It is updated on the need basis not tracking dredd versions. We can definitelly improve it and follow the dredd releases and I think it should become a part of dredd repo and build chain so it is easier to fix/update.. Whats this doing? :)\n. :+1:  for making it a function ... DRY it !!!\n. Please add comment on what this is good for and possibly how to use it.\n. newline\n. Order of the hook execution is incorrect, see execution life cycle after hook is exectued before afterEach. So the test cases should respect that.\n. Please reword the describe it's not clear.\n. Should state that the child process was stopped / killed by dredd.\n. exit statuses are not used at all, so just state exit status != 0\n. is it really a fency command?\n. is the perl repo correct? I ca't find it in apiaryio.\n. Dirty hack but should work, would not a sleep as in setTimeout work better. Depends on how out of sync the time is though.. Kill is an error, as the hook handler did not respond to SIGTERM so I think if it is correct to treat it as an error.. Yeah, killing processes is not an easy and simple task .... I actually prefer the current version as I don't have to go and lookup somewhere what the ASCII_CTRL_C is and how it is created.. OSS repos compatibility is in our mind so this should be covered.. ",
    "pksunkara": "Since we have moved to API Description Refract, we can support this in a backward compatible way.\nAssume, we have request response pairs (RRP from now) in an API Blueprint as shown below:\n+ Request A\n+ Request B\n+ Response 200\n+ Response 400\n+ Request C\n+ Response 403\nAPI Description refract generates 5 RRP. They are as follows:\n```\nRRP 1\n====\n+ Request A\n+ Response 200\nRRP 2\n\nRequest B\nResponse 200\n\nRRP 3\n\nRequest A\nResponse 400\n\nRRP 4\n\nRequest B\nResponse 400\n\nRRP 5\n\nRequest C\nResponse 403\n```\n\nActual Behaviour\nDredd currently only tests RRP 1 and RRP 5 as the first pair and the second pair.\nExpected Behaviour\nDredd needs to test all 5 pairs. But to ensure the backward compatibility of the order of the pairs that are being tested, we will add the newer pairs to the end. Which means dredd will test them in the following order: RRP 1, RRP 5, RRP 2, RRP 3, RRP 4. The transaction names would be:\nA-200 ... Lorem > Ipsum > Lorem Ipsum > Example 1\nA-400 ... Lorem > Ipsum > Lorem Ipsum > Example 3\nB-200 ... Lorem > Ipsum > Lorem Ipsum > Example 4\nB-400 ... Lorem > Ipsum > Lorem Ipsum > Example 5\nC-403 ... Lorem > Ipsum > Lorem Ipsum > Example 2\nI thought that part was clear from my comment.. I would love to have the option to say that dredd needs to validate the exact values of the responses even if it's application/json.\n. Unfortunately, we can't announce nullable support until https://github.com/apiaryio/drafter/issues/121 is done. But other than that, we have a bit of work currently happening after which there will be a new drafter release.\n. Dredd uses drafter.js which uses protagonist 0.x. We need to move dredd to protagonist 1.x.\n. I think @netmilk will be more suited to answer this.\n. I think this is more of a correct outline.\n1) JSON Schema rendering support in Drafter\n2) 1.1.0 release of Drafter\n3) Protagonist updated to 1.1.0 version of drafter\n4) Dredd updated to use the above mentioned release of Protagonist\n. @philsturgeon Dredd hasn't updated to the latest protagonist yet.\n. @philsturgeon @netmilk can give you a better update than me. /cc @zdne \n. > Last release of Protagonist and last release Dredd enabled support for Node 4 and Node 5, but unfortunately it still doesn't support nullable in JSON schemas\nOuch. We need to fix that soon. /cc @w-vi @kylef \n. @honzajavorek This should be closed, right?\n. @nicolasiensen Swagger is just JSON Schema, so, you can write something similar for nullable.. You can use VS2013.\n. @honzajavorek This should be fixed too. Please check once.\n. @honzajavorek Yes, this has been fixed in protagonist@1.3.3\n. I would be strictly against it being in the parser. It should be a downstream tool.. @honzajavorek Waiting for tests.\n. Can you try running it using sudo?\n. He probably doesn't have access to the folder where protagonist.node is lying which is why I asked him to try sudo.\n. \ud83d\udc4d \n. Looks good except my comments.\n. Tests failing. Otherwise \ud83d\udc4d \n. \ud83d\udc4d \n. Ideally hooks should be converted to js before publishing dredd and thus making coffee-script dev only dependency.\n. Just 2 minor comments regarding docs. Will merge it after they are fixed.\n. Does the above crash happen with other language hook files or only golang? Depending on that, we need to fix it in a separate PR. I am merging this for now.\n. CI is failing.\n. And also, you should probably use fury-adapter-swagger@0.8.0-pre.8\n. Yes, x-nullable by default would mean null in enum. But when you provide a different enum, then they would contradict and enum gets priority since it is actually directly JSON Schema instead of an extension.. @honzajavorek Conflicts. Please rebase.\n. It's [ci skip]\n. \ud83d\udc4d \n. @honzajavorek How would the schema work here?\n. Merge away when tests pass. \ud83d\udc4d \n. \ud83d\udc4d \n. Yeah, glancing at it, I think it's either a bug in fury-adapter-swagger while evaluating the allOf or a bug in json-schema-faker package.. @adrianObel You need to say which of your body keys are required for dredd to be consistent. Since you marked them as optional, json-schema-faker sometimes doesn't input values for them.\nyaml\n        - name: user\n          in: body\n          description: User body\n          required: true\n          schema:\n            type: object\n            properties:\n              firstName:\n                type: string\n              lastName:\n                type: string\n            required:\n              - firstName\n              - lastName. @CBarraford Similarly, you have to use required to say that user is necessary.\njson\n    \"UserCreate\": {\n      \"properties\": {\n        \"user\": {\n          \"$ref\": \"#/definitions/UserInput\"\n        }\n      },\n      \"required\": [\n        \"user\"\n      ]\nThat should fix the inconsistency. Other than this, there are no bugs in body generation at all. My earlier comment is wrong.. Probably caused by this commit? https://github.com/apiaryio/fury-adapter-swagger/commit/f2e5dc2eed9170bdcc168339051843d8947cf2bd. It is the only one recently.\n. @borekb Can you make sure you have C++ installed from the latest visual studio community edition and try again?\n. > If the whole Dredd installation finishes normally and Dredd works for you, you can ignore the error output for building the native module.\nI think the post-installation process should check for this and output a helpful message.\n. Post installation of dredd.\n. @whiskeyseven I am not sure why that is happening. The JSON Schema from your swagger is used by json-schema-faker to generate JSON. Your schema looks straightforward. I don't understand why there is an inconsistency. I need to dig much deeper.. Is date and url valid formats under JSON Schema spec?. json-schema-faker is more concerned about JSON Schema according to their spec. I am not sure if swagger extends JSON schema and adds date format or date is already a format in JSON Schema specification.. @honzajavorek What do you think about this?. AFAIK, swagger spec was supposed to strictly follow JSON Schema but I am wondering if something changed recently. Definitely need to look into this. Can you create a swagger adapter issue for this?\nRegarding the consumes definition, I am not sure if we need to do that. We don't create body even in APIB when there's no application/json.. @honzajavorek I think that's a part of onboarding and documentation rather than parser and error-warnings.. They can be custom media types, so I don't think we should be changing the swagger parser at all. Because this is still a valid document.. No, it is not supported in swagger adapter.. @honzajavorek How so? Adapter doesn't do anything regarding it. It just forwards it to dredd.. @honzajavorek Can you create an issue in drafter repo and link it here? Thanks.. Sorry about being late to review, but lgtm.. Yes, tags are resource groups.. @honzajavorek What's the status of this?. No, this should be left to the tools that are consuming the API elements on how to interpret.. Also, if we want to run dredd post-deployment, we would need to make API Blueprint better at data representation with multiple samples and the option to choose which sample.. Different descriptions for different environments is an entirely separate problem which would be solved by the transclusion mentioned above in your comment. But the issue I am talking is a different one which can only be better represented by an example.\nFor example, I am running a Blog service and I want to test it's API in production. Since we are dealing with real data in production (even though it maybe a demo account), that would mean we can't mock the data. Let's model our data structures:\n```apib\nBlogpost\n\npost: A sample post in our blog (string)\n```\n\nI have 2 endpoints dealing with the above Blogpost model. One is viewing a blog post (GET /posts/1234), another is editing a Blogpost (PATCH /posts/1234)\nNow, testing the first endpoint on real world data is easy. We just need to have a demo account with a demo post \"A sample post in our blog\". But how would you test the second endpoint? Let's say the request of the second endpoint that is sent by dredd is as follows:\njson\n{\n  \"post\": \"Modified post\"\n}\nThen, the actual blog post will change and also the response returned will be different than the sample which you can assume from the Blogpost data structure in API Blueprint. This is what I would call the \"Multi Sample Problem\".\n. You don't have to have this.\n. and this is not needed too.\n. You should have README.md and Changelog.md in the npm package.\n. API Description Testing Framework\n. API Blueprint?\n. Blueprint?\n. diff\n- hookfiles flags will be compiled hook binaries\n+ hookfiles flags should point to compiled hook binaries.\ndiff\n- get an idea of what this would look like\n+ get an idea of what the source file behind the go binary would look like.\n. @honzajavorek What is this server option used for? I thought localhost:3000 is the server.\n. @ddelnano If you are talking about hook server, maybe rename it to ./golang-hook-server\n. Ah, thanks. I didn't know that.\n. POST\n. I just made the sentences a bit more clear. My comment has the updated sentences which you need to copy.\n. I think response.examples is given preference.\n. ",
    "mojzis": "great thanks ! is there a way of serving the data to the client then ? or keep 2 instances of the file ?\n. ",
    "jaydiablo": "Has there been any updates with regards to this?\nThe workaround mentioned in #52 doesn't seem to work any longer, but I haven't seen any mention of binary responses being supported in the API Blueprint format either.\nAm I missing something, or is this still not supported?\nThanks!\n. Well, another workaround, which is working for me, is to modify the transaction in a preValidation hook:\nhooks.beforeValidation(\"Machines > Machines collection > Get Machines\", function (transaction) {\n    transaction.real.body = '';\n});\nProbably not ideal, but only solution I've been able to come up with so far.\n. ",
    "leompeters": "+1 to @jaydiablo with Content-Length header > 1\n. As a workaround, you can use:\njavascript\nhooks.beforeValidation('User > Avatar > Get Mine', function (transaction) {\n  transaction.expected.headers['content-length'] = 9999;\n  transaction.real.body = '';\n});\nOr even, set content length header on the blueprint, like this:\n``` apib\n+ Response 200 (image/png)\n+ Headers\n\n    Content-Length: 26572\n\n```\nNow, I am looking for an example to a POST request to send an image... :P\n. Hey @markfink, try to use the code below on your hook to make your expected empty body equals to the real:\njavascript\nswitch (transaction.expected.headers['Content-Type']) {\n  // case 'text/plain; charset=UTF-8':\n  // case 'text/html; charset=utf-8':\n  case 'image/png':\n    transaction.expected.body =\n      transaction.expected.body.replace(/^\\s+|\\s+$/g, '');\n}\nSource: http://dredd.readthedocs.io/en/latest/hooks-nodejs/#remove-trailing-newline-character-in-expected-plain-text-bodies\n. +1 The same error on Mac too...\n. Hey @honzajavorek , now it worked, only when install the package globally with npm install -g dredd. I was trying to install into the project.\n. ",
    "markfink": "I use the following DREDD version:\n$dredd --version\ndredd v1.1.0\n@leomperes : I tried to set the content-length like you suggested as a workaround but the problem still shows up in DREDD :disappointed: I installed DREDD this morning - do I need to use a different version?\nbody: Real and expected data does not match.\n...\nbody: \n\ufffdPNG\n. @honzajavorek the hook workaround works fine but I can't fix this by providing content-length or other image/png related headers like @leomperes suggested in above post.\n. ",
    "Pablodotnet": "Is there a solution for this? I'm having the same problem, my expected response has no body because I have no way to set the image there, and in actual response body it comes with an image like this:\nbody: \n\ufffd\ufffd\ufffd\ufffdJFIF``\ufffd\ufffd;CREATOR: gd-jpeg v1.0 (using IJG JPEG v80), quality = 90\n\ufffd\ufffdC\n\ufffd\u07a39\ufffd\u056d#\ufffdE\ufffd\u0374\ufffdh\ufffd\ufffd\ufffd\ufffd~g\ufffd?\ufffd\ufffd\ufffds\ufffd\ufffd~g\ufffd\ufffd\ufffdX\ufffd{  \nAnd more and more digits... So how I can workaround this? What's the trick?. @honzajavorek what would be the PHP method for this answer you gave? \n```\nhooks.beforeEach(function (transaction, done) {\n  var id = '123456';\ntransaction.request.uri = transaction.request.uri.replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', id);\n  transaction.fullPath = transaction.fullPath.replace('2eadb261-afa1-2a47-bf20-26bb6f5e1df2', id);\ndone();\n});\n``. @honzajavorek before you answered me I did exactly that and all worked great, thanks a lot :D. +1. Same problem here! I use server: 'php -S 127.0.0.1:3000 -t public' `. ",
    "hendrikmaus": ":+1: \n. ",
    "pakore": "+1. 4 years since this and it's a pretty basic functionality IMHO.... ",
    "sameergarg": "@netmilk I have already checked that newline or extra space scenario, unfortunately that is not the problem.\n. https://github.com/sameergarg/rest/blob/master/apiary.apib\n. Hi Sorry it was my mistake to add apostrophe in the version of documentation i passed. I was trying few things and i forgot to remove apostrophe.\nThe problem is still there even after removing the apostrophes.\n. ",
    "teone": "I'm having a similar issue:\n```\nrequest:\nbody:\nheaders:\n    User-Agent: Dredd/1.0.8 (Darwin 15.4.0; x64)\nuri: /api/tenant/cord/subscriber/1/\nmethod: GET\nexpected:\nbody:\n{\n  \"humanReadableName\": \"cordSubscriber-1\",\n  \"id\": 1,\n  \"service_specific_id\": \"123\",\n  \"features\": {\n    \"cdn\": false,\n    \"uplink_speed\": 1000000000,\n    \"downlink_speed\": 1000000000,\n    \"uverse\": true,\n    \"status\": \"enabled\"\n  },\n  \"identity\": {\n    \"account_num\": \"123\"\n  },\n  \"related\": {\n    \"instance_name\": \"mysite_vcpe\",\n    \"vsg_id\": 4,\n    \"c_tag\": \"432\",\n    \"instance_id\": 1,\n    \"wan_container_ip\": null,\n    \"volt_id\": 3,\n    \"s_tag\": \"222\"\n  }\n}\nheaders:\n    Content-Type: application/json\nstatusCode: 200\nactual:\nbody:\n{\n  \"humanReadableName\": \"cordSubscriber-1\",\n  \"id\": 1,\n  \"features\": {\n    \"cdn\": false,\n    \"uplink_speed\": 1000000000,\n    \"downlink_speed\": 1000000000,\n    \"uverse\": true,\n    \"status\": \"enabled\"\n  },\n  \"identity\": {\n    \"account_num\": \"123\"\n  },\n  \"related\": {\n    \"instance_name\": \"mysite_vcpe\",\n    \"vsg_id\": 4,\n    \"c_tag\": \"432\",\n    \"instance_id\": 1,\n    \"wan_container_ip\": null,\n    \"volt_id\": 3,\n    \"s_tag\": \"222\"\n  }\n}\nheaders:\n    date: Tue, 29 Mar 2016 18:52:07 GMT\n    content-type: application/json\n    vary: Accept, Cookie\n    allow: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\n    server: WSGIServer/0.1 Python/2.7.6\nstatusCode: 200\n```\nThe only thing that differ looks to be the headers section, but only content-negotiations headers should be checked in tests. What can cause this error?\nI've checked withe spaces and Apiary is not about syntax errors.. .apirb is available here: http://docs.xos.apiary.io\n. @w-vi I'm not sure, I think I don't have the ability to change it as the definition is:\n+ Response 200 (application/json)\nanyway that is not giving errors in other tests, only in this one...\n. Thanks @webnard, passed through drafter and seems to be fine, I'll keep investigating and will report something in case of success...\n. @w-vi thanks, it works... I'm new too python and this looks confusing, for sure adding this note to the documentation will help!\n. ",
    "webnard": "@teone @w-vi Current versions of Dredd shouldn't be affected by case-differences in headers (see #122).\n. @teone You might pass your API document through drafter to see if it shows anything off. For what it's worth, I struggled getting even a basic \"Hello World\"-esque test to work. Dredd was adding newlines to the message body even when the file doesn't even end with one (cf #67).\n. ",
    "oklaiss-gpsw": "I'm having very similar issues as well as GET requests not being tested at all.\n. ",
    "jwoudenberg": "Ok. Good to know it's on the radar.\n. Thanks for the update!\n. ",
    "IGZgustavomarin": "+1 for supporting v4 of the draft.\n. +1 to this feature. It'll very useful. \nwhen is the next version scheduled?\n. ",
    "AlecTaylor": "Sure, something like this:\njar = request.jar()\nrequest.get {url: \"http://ident.localhost\", jar: jar}, (err, response) ->\n    url = 'http://localhost/db/foo'\n    headers = 'x-csrf-token': response.headers['x-csrf-token']\n    form = bar: 'haz'\n    request.post {url: url, headers: headers,\n                  form: form, json: true, jar: jar}, (err, response, body) -> return\n. ",
    "gobengo": "@netmilk Would that help at all with trying to do a flow where I create a resource, the server provisions an id and responds with it, and another endpoint is exposed at a path that needs that dynamic ID passed to it?\n. ",
    "surtich": "+1 I would like this too. Other similar things can be solved with hooks. But I think hooks are not useful in this case.\n. ",
    "stephanheinze": ":+1: \n. ",
    "rajish": "My bad - there is the junit reporter\n. ",
    "gonzalo-bulnes": "Hi!\nFor two weeks I have being validating little Sinatra applications against their blueprints using a Rake task as @netmilk suggested.\nThe blueprint:verify rake task that I use does depend on Dredd being available and the API being served. That's not ideal, particularly because those two steps must be handled manually.\nHowever, after adding a few hints to quickly spot the missing Dredd errors and unresponsive API issues and having ensured that the API server is automatically reloaded when files change (see rerun for example), I must say that I found the result usable enough to add it to my default Rake task. (See the last line of the gist.)\n@themasterchef I would also like Dredd to validate the blueprints accuracy without having to start a server (as RSpec, Rack::Test do). If you have any idea of how we could build that, I'd love to hear about it. The gem idea doesn't sound at all crazy to me : )\nFor now, here is a gist of my blueprint:verify rake task.\nBest regards!\n. @netmilk About the HTTP layer: I think you're right and writing RSpec when meaning Capybara (even if Capybara does extend RSpec) is abusive and sometimes unclear. Well, Capybara does rely under the hood on browser engines and allows to describe the behaviour of the app when users intetact with it. What's interesting is the 'under the hood' thing: as a developer you only have to set the RSpec javascript: true tag to have the feature spec handled by a browser engine. I have no idea how that's done, but it may be an example to explore, and I believe that's what I have in mind when thinking about RSpec-Dredd integration (RSpec matchers and automatic database setup and teardown). I'll take a closer look at Capybara.\nBy the way @netmilk, thanks for Dredd, it's really awesome!\n. Hi @netmilk,\nI solved the inconvenience of having to start a server manually (looking at Capybara was a good thing to do). I would like to package this rake task as a gem, along with what may result of #134. Any suggestion for a gem name?\nYou said in a previous comment:\n\nI also saw some people using Dredd's --only argument from the rake task to run test cases from the blueprint one-by-one separately and doing setup and teardown between tests directly in the rake task in ruby.\n\nI don't see right now why I could want to run the blueprint test cases one by one separately, however, I'm sure there must a lot of good reasons to do that and I think these good reasons could be well served by appropriate RSpec matchers.\nAlong with the possibility of writing Dredd hooks in Ruby - I'm thinking aloud - that may result in the gem to provide some elements of a DSL for API-blueprint-driven acceptance testing in Ruby (in the same way Capybara extends the RSpec DSL with vocabulary for non API-blueprint-related acceptance testing).\nMaybe I should open a separate issue to discuss this... what do you think?\n. Hi @netmilk, @themasterchef\nHere is an early version of Dredd::Rack. And here is the corresponding (minimal) example application.\nDredd::Rack does provide integration for Dredd into a Rack environment and is meant to make enjoyable to verify the API blueprints of any Rails, Sinatra, Padrino, Grape... application.\nThe enjoyable part consists in making unnecessary to start a local server when testing API blueprints. Dredd::Rack takes care of doing it and ensures that the app is served when required by Dredd and that the server is stopped once the verification is done. Verifying the API compliance with its blueprint does take two words: rake dredd, which makes realistic to use the API blueprints to practice BDD as soon as the blueprint is not excessively long, more on that later.\nBy the way, I named the default Dredd::Rack task :dredd, but creating a custom task named blueprint:verify is possible and (I hope) easy: the example app Rakefile features both tasks.\nConcerning the Rake task by itself, it is pretty much the same of the gist I shared before.\nThe runner behind it is quite capable, and my idea is to extend both the code and the documentation to make easy to define custom Rake tasks with distinct Dredd options to cover as much scenarios as there are usages of Dredd. The runner should not limit the Dredd possibilities and that should allow to define tasks to run parts of the blueprints only, or in given circumstances, which should make easier to test-drive development with large API blueprints.\nUntil I complete the README, you can look at the Travis CI output as documentation, and at the code for details. Feedback would be very welcome!\nBest regards!\n. Hi @netmilk,\nI glad you like the Dredd::Rack::Runner, I really enjoyed writting it : )\nI preferred releasing earlier and ommitting the options passing mecanism in the first release, but I'm working on it, and I'll document it as soon as I can.\nI'm trying to apply the same \"release early, release often\" idea to the possible division into several gems. I also thought about that, but for now I prefer to release first, get to something usable, stable, then extract as many gems as it is worth, one step at a time.\nI'll try your fork, and try to write hooks, it's really great you're working on it! Many many thanks! I'll give you feedback.\nBest regards!\n. Hello!\nDredd::Rack v0.4.0 does allow to configure the runners when creating custom rake tasks. See this example. : )\n@netmilk I started experimenting with hooks support from your fork and referred to it in #134.\n. Hi @honzajavorek, I think so.\n. Hi @netmilk, I was thinking about that this morning in relation with #100.\nIn Ruby environments, there are usually resources available that could be used to do the tests setup (e.g. FactoryGirl) and tear down (e.g. DatabaseCleaner). Usually, those resources are themselves tested (e.g. factories validity checking is part of the test suite) and it makes a lot of sense - in my opinion - to use them if possible.\nDo you have ideas about how the communication could be established between the Javascript program and support scripts written in other languages?\n(I can only imagine a stop/resume mecanism: Dredd runs until there is time to trigger a hook, it stops returning the hook name, the hook then runs and resumes Dredd.  But I doesn't seem to be a good idea to me.)\n. I've no idea of how signals, named pipes or sockets work but I'd love to implement the Ruby side of something alike! I'm doing some research.\nBy the way, pointers are welcome if there is any documentation you specially appreciate on these topics ; ) \n. Hi @netmilk,\nI did some experiments of inter-process communication with named pipes. Unless I'm missing something, in order to allow Dredd to send the JSON with type of hook, compiled HTTP transaction and its name to the pipe (let's say the hook request) one named pipe should be defined which Dredd could write and the hooks handler could read. And in order to hold the response, another named pipe should be defined which the hooks handler could write and Dredd could read. Am I right?\nNow this question: could these two named pipes be provided to Dredd as command-line arguments? (That could be seen as some kind of worker registration.)\n``` bash\nExample: the tmp/dredd_to_worker.pipe can be written by Dredd and\nthe tmp/worker_to_dredd.pipe will contain the resulting transaction\nonce the hook will be processed\ndredd doc/*.apib.md http://localhost:4567 --additional-hooks-handler-input tmp/dredd_to_worker.pipe --additional-hooks-handler-output tmp/worker_to_dredd.pipe\nthe flags names are arbitrary and were only chosen to be unambiguous\n```\nIf they could, then I have an idea about how the communication between Dredd and a Ruby test suite could be implemented (see this example, where the main program would be Dredd, and the worker_provider would be part of a Ruby test suite).\nIs that more or less what you had in mind? I'm looking forward for comments : )\nBest regards!\n. Hi @netmilk,\nI'm glad you liked the examples! I'll take a look at sockets, for what I've seen so far, using them instead of pipes sounds right to me. (By the way, note that Ruby doen't support creating named pipes either - at least I didn't found how to create them. Both maned pipes do pre-exist in the examples I wrote.)\nRegards!\n. Hi @berislavlopac,\nDid you install it globally? That requires the -g flag and sudo and is necessary every time you want to be able to use a NPM package from anywhere:\nbash\nsudo npm install -g dredd\n`\n. Can you check where Dredd got installed?\n``` bash\nwhich dredd\nshould print /usr/bin/dredd\n``\n. On Ubuntu 14.04 Dredd is indeed installed in/usr/local/bin/dredd` (I had checked a 12.01 installation earlier). That's doesn't seem to be the issue.\nCould there be any reason for the error output being redirected somewhere in that terminal?\nI mean: dredd 2>/dev/null doesn't print anything at all, it's doing its job however.\nSince you are running Dredd in a Vagrant box, maybe one of the box settings could be interfering?\n. Hi @v-kolesnikov,\nI might be wrong, but based on these examples I think that rewording your commit message to something in the lines of: docs: Fix typo in hooks-ruby code snippet would fix the failing build.\nHow-to:\n```bash\nEdit the commit message (will also change its identifier - a89f8ab)\ngit commit --amend -m \"docs: Fix typo in hooks-ruby code snippet\"\nPush it again to your branch (using the --force-with-lease option to acknowledge the identifier change)\ngit push origin patch-1 --force-with-lease\n```",
    "jpemberthy": ":+1: \n. ",
    "rickke": "Request stash is a great idea. But I do not think it could fix the issue in #96. \n. @netmilk  For my understanding, stashing response use after event to get server response from one transaction and modify the request info in another transaction use before event. Is it right? The id mentioned in #96 is from server side and nothing to do with client request. So there is no way to fix it with stashng response. Am I wrong? Thanks\n. ",
    "pocketmax": "Sorry for my confusion but was this ever fixed?\n. ug, sorry, yeah I mean #96\n. Does anyone know the status of this?\n. ",
    "patrickbcullen": "That worked great for me. Thanks for the help.\n. ",
    "jonathanbp": "No problem.\nOn Wednesday, October 22, 2014, Adam Kliment notifications@github.com\nwrote:\n\nThanks o lot for the fix, merged.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/pull/110#issuecomment-60076623.\n\n\n\nJonathan Bunde-Pedersen\n. ",
    "cw-peter": "Yes, this is vital for testing ie set-cookie where the expiry is a dynamic time for example.\n. I think the library should support flexibility here. I want to test for a cookie on a header, but ignore the expires time.\n. Ah, that's good to know. Was pretty confusing :)\n. Great, thanks!\n. ",
    "base698": "How do you ignore headers?  Or provide a regex to match dates?\n. ",
    "ralucas": "Is it possible to do this in hooks without modifying anything, just overriding Gavel's expectations?. ",
    "webmaven": "Blocks: https://github.com/tastejs/todomvc-api/issues/6\n. ",
    "kettanaito": "According to the #1086 this is not a Dredd's issue. Should this still be open?. Bear in mind that questions which when resolves to false are not getting asked, and thus their default value gets ignored (https://github.com/SBoudrias/Inquirer.js/issues/740). For example:\nhttps://github.com/apiaryio/dredd/blob/07c8c8157de47658d5e8f8f4c58ee10ea1f8ef21/lib/init.js#L117-L123\nWhen detected.ci doesn't include the mentioned string, the question won't be asked, and the gathered answers will not have key appveyor: true. If this is the intended behavior then leave it as-is.\nHowever, if the intended behavior is to use defaults even when the question is not asked, we may need to adopt a generic handler for such cases. I would suggest that for such keys their default values reside outside the prompt (i.e. in a default config Object), while prompt's answers serve as an overrides to the default config.. Will provide tests. As of now, I'm not sure if grabbing the default value from config is a proper solution. Based on tests I can see that config can be empty, and thus the proper default value of the language is, most likely, the detected.language value. However, that would complicate the unit testing, as it would require to detect the language as a part of a unit test.\n\nI see that config seems to get initial values by the CLI initial values. Does this mean we can omit detected in this case?. Thanks for the detailed insights, @honzajavorek.\nOkay, in this case we can fallback to a hard-coded \"nodejs\", as I don't see something as defaultLanguage variable any where. That should be fine.\nI've fixed the typos, and adjusted the init.js and corresponding test. Should be good now :) Sorry for forced pushes, I'm still getting used to the commit naming convention and wanted to preserve a clean commit history. Hope it's fine.. @honzajavorek, yes, done. I've spotted that's the reason why CI fails, so rewrote the commit history. Hope it's aligned with the rules now.\nI probably would need to install Commitizen locally to format commits on pre-commit hook :) That'd be useful.. I've noticed Promise rejection was not handled, thus the following line would never resolve in case of error:\nhttps://github.com/apiaryio/dredd/blob/07c8c8157de47658d5e8f8f4c58ee10ea1f8ef21/lib/init.js#L25. Thanks. Fixed by d64c8d7.. Thanks. Fixed by d64c8d7.. ",
    "fosrias": "@Almad @tu1ly This seems pretty minor and has been open a while and has tests. Any reason this has no comments by us or is not merged.\n. ",
    "JackuB": "Bump\nTo elaborate:\nI'm setting \n``` apib\nExchange credentials for token [POST]\n\nRequest (application/json; charset=utf-8)\nHeadersAuthorization: Basic ABCDEF\n\n```\n\n\n\n\nand then in my hook I have:\njs\ntransaction.request.headers.authorization = header;\nwhich results in:\nheaders:\n    Content-Type: application/json; charset=utf-8\n    Authorization: Basic ABCDEF\n    User-Agent: Dredd/1.0.6 (Darwin 15.3.0; x64)\n    authorization: Some other header\n    Content-Length: 42\nRFC2616 specifies that header names should be case-insensitive\n\nEach header field consists of a name followed by a colon (\":\") and the field value. Field names are case-insensitive.\n. Nope, still 404. Not sure how RTD redirect works, but maybe it needs also the /en/latest/ part http://docs.readthedocs.io/en/latest/automatic-redirects.html\n. Sadly dredd.apiary.io is taken.\n. LGTM \ud83d\udc4d \n. Since you are changing URLs, have you considered using HTTPS by default?\n. Thought RTD works like Jekyll. That it'll create index.html for you. LGTM.\n. Should https://github.com/apiaryio/dredd/blob/master/CONTRIBUTING.md be updated with required commit format for PRs?\n. Looking good then\n. \ud83d\udc4d \n. Updated. Using <kbd>, sneaky. I was thinking, for this contribution guideline, you either let CI pipeline do the talking (\"your tests/lint/\u2026 failed here\") and we don't even mention it in the guide. Idea being that once you already have a PR on GitHub it's fairly easy to debug failing test, give feedback etc.\n\nOr we provide a preflight command - before you push, run this. Not necessarily as a precommit hook as everybody hates them.. I think from a doc standpoint - you should either recommend it or not mention it. Might be better to link to the npm's docs on this use case as the npm commands could change https://docs.npmjs.com/misc/config#https-proxy. According to this https://git-scm.com/book/en/v2/Getting-Started-Installing-Git it should be available by default.. Would advise to show the correct way of resolving it first, then sudo. ",
    "MarcusFulbright": "This issue can be closed. The problem was with how the php web server behaves. For future reference, I got the php server to work by doing this:\nphp -S 0.0.0.0:8000\nNot entirely sure why, but hopefully this helps others.\n. As originally listed, I had dredd v0.3.14, not sure about the node version. The machine I was using is no longer in my possession so I cannot check. Furthermore, the office has migrated a Windows environment. Since then I haven't been able to install dredd. One of the dependencies, either poltergeist or protagonist, caused me lots of grief. I checked out their repos for troubleshooting help to no avail, though others seem to report installing them just fine.\nUnfortunately, I can't do anything to try and replicate the issue at this time. Thanks for taking the time to re-open the issue. Hopefully you can get to the bottom of it. Wish I could help more.\n. @netmilk correct. Again, the installation woes I'm having on windows seem to be due to a dependency, not dredd itself.\n. ",
    "ramsey": "Sweet, @MarcusFulbright. That got it working for me! :-)\n. ",
    "JefStat": "The issue title is correct for me, but the description is not the same as mine. \nTLDR: Dredd sometimes doesn't run any tests not even validating the blueprint. It just exits without any messaging at all. I cannot reproduce it well, I think it can be reproduced by running dredd several times in a row, such as while testing the dredd configuration settings.\nCurrent setup \nI have a batch file that runs a powershell file that spin up the api host and then runs dredd. The batch file is ran in Teamcity and the Dredd junit report is parsed by Teamcity.\nIssue 1:\n\nDredd, well apiary doesn't work with windows line endings.\n\nThis .gitattributes file works around this issue.\n```\napiary.apib requires lf line endings\napiary.apib text eol=lf\n```\nIssue 2:\n\nDredd xaml configuration doesn't start the api service in the background\n\nThis powershell file fixes the issue \n```\nnode Elasticsearch/Setup.js\nStart-Process -FilePath \"api.exe\" -PassThru\nwait for api to startup\nStart-Sleep -s 3\nnode dredd.js\nStop-Process -Name \"api.exe\"\nnode Elasticsearch/Teardown.js\n```\nIssue 3:\n\nNode_gyp is slow and half the time it fails for one reason or another. ie missing MSBuild environment variables. So it's often a pain to use npm install dredd\n\nTo workaround the tooling issues installing Dredd from npm I committed the node_modules to the repo. About 140mb tax on the repo size. \n. I've not tried default since the path value is required. \nHere's the path. \n\"/events/{id}\": {\n            \"get\": {\n                \"tags\": [\"Events\"],\n                \"operationId\": \"EventsByIdGet\",\n                \"produces\": [\"application/json\"],\n                \"parameters\": [{\n                    \"name\": \"id\",\n                    \"in\": \"path\",\n                    \"required\": true,\n                    \"type\": \"string\"\n                }, {\n                    \"name\": \"Authorization\",\n                    \"in\": \"header\",\n                    \"description\": \"access token\",\n                    \"required\": true,\n                    \"type\": \"string\"\n                }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Event\"\n                        }\n                    }\n                },\n                \"deprecated\": false\n            }\n        },\n. ",
    "tunovic": "dredd v4.3.0 (Windows_NT 10.0.15063; x64)\nNo line numbers in the parse. Do I miss something?. ",
    "hamczu": "Dredd relies on gavel.js validation and there is only draft 03 support there. But still explicit definition would be nice to have in docs.\n. ",
    "MariMax": "It works for me thanks for idea!\n. ",
    "ducin": "Again, thank you for your response, Adam.\nI was kinda afraid that you'll write that the tests are isolated due to REST nature. But the real world is more complicated than REST which seems a little utopian. In big systems you have to separate a process into steps and this breaks REST philosophy willy-nilly. And since such big interfaces are SPA-based, they use kinda-REST, which is not fully supported. And that's a big pitty.\nIt will take me some time until I figure out whether this response stash thing or multiple files approach suits my needs. But it would be a great thing if API blueprint supported related resource - it would become the ultimate docs & test solution for enterprise interfaces.\n. Wow, thank you very much for this extensive tutorial, Adam! Great work!\nThe entire API blueprint stack is in the roadmap of the project I'm designing architecture for, but I'll need to do the blueprint/dredd research as soon as possible, so again, thank you. I need to decode it from CoffeeScript first:\n```\nvar hooks, stash;\nhooks = require('hooks');\nstash = {};\nhooks.after(' > /login > POST', function(transaction) {\n  return stash[transaction.name] = JSON.parse(transaction.actual);\n});\nhooks.before(' > /cars > GET', function(transaction) {\n  var loginResponseBody;\n  loginResponseBody = stash[' > /login > POST']['body'];\n  return transaction.request.headers['X-Api-Key'] = loginResponseBody['token'];\n});\nhooks.after(' > /cars > GET', function(transaction) {\n  return stash[transaction.name] = JSON.parse(transaction.actual);\n});\nhooks.before(' > /cars > GET', function(transaction) {\n  var carsResponse, newId;\n  carsResponse = stash[' > /cars > GET']['body'];\n  newId = carsResponse.body[0].id;\n  return transaction.request.url = transaction.request.url.gsub(1, newId);\n});\n```\nAs far as I can see, each AJAX call chain would have its own separate hooks file and what you're doing is registering resource-call-callbacks, right? I mean - you are creating something analogical to a deferred that you register .then() callbacks to execute next AJAX calls and so on and so on and when the first AJAX is fired, the chain is processed. Is that more or less what is happening here?\nThe way I imagine testing API with Dredd is creating directories like test/dredd/* that would consist of js/coffee scenarios (implementing hooks), where dredd command line tool is the actual test runner. Does that make sense?\n. Adam, thank you for your response. This was not clear for me after reading Dredd docs.\nI've got a further questions related to MSON that you mentioned - don't know if I understand it correctly. Please correct me in case I'm wrong... here is how I see this:\nJSON Schema and MSON work together. JSON schema tool stack can be used with all supported platforms (e.g. python jsonschema module, or java's json-schema-validator or just other implementations) and MSON is just another automate-friendly alternative syntax that works together with api blueprint stack. In some way, MSON to JSON Schema is like Jade to HTML. I can use MSON to define structures of my API on the design and I can still use java's json-schema-validator to do automatic API validation. And everything works together: MSON is used to generate JSON schema structures which are eventually used for automatic API tests.\nIs that right?\n\nAfter a quick-read, I love MSON. But I haven't found the most important thing yet - its generator. Is there at least a MSON->JSON schema converter written already? Where can I find current status of MSON work? What is available for MSON in the entire stack already?\n\nAnd concerning Gavel - I can see that it's a tool that validates HTTP communication (comparing requests and responses by checking both headers and body). The question in: if gavel is here, then... what does dredd do? Do they work together somehow? Or are these alternatives to each other?\n. ",
    "LinusU": "@tkoomzaaskz I'm trying to accomplish something very similar and have gotten a bit on the way. Check out LinusU/mocha-api-blueprint-example for something that actually works right now.\nYou use case is very simliar to what I've done in Usage.apib and which is then automatically tested in test/rest.js.\n. Hi @netmilk,\nNo problem, I've been moving very fast forward to try and land on what I want so it's been a bit all over the place :)\n1. Stricter validation of the values returned from my REST API.\nThis is a snippet of code from Usage.apib. The idea here is to both generate a \"quick-start\" tutorial that my users can follow, and it should also be tested.\n``` markdown\n/messages\nShout your message to the world [POST]\nNow that you are logged in your are free to post messages for others to see.\n\nRequest\nHeaders\n    Content-Type: application/json\n\nBody\n    { \"text\": \"Listen to me!\" }\n\n\nResponse 201\n\nHeaders\n    Content-Type: application/json\nBody\n    { \"id\": \"{messageId}\", \"text\": \"Listen to me!\" }\n\nListen in on the conversation [GET]\nListen to the conversation by retreiving all the messages.\n\nResponse 200\nHeaders\n    Content-Type: application/json\nBody\n    [\n      { \"id\": \"{messageId}\", \"text\": \"Listen to me!\" }\n    ]\n```\n\nAs you can see I have specified \"{messageId}\" in two places, this is actually validated to be the same. All the other values are checked with deepEqual which ensures that it has the exact same values, instead of only being the same type as dredd currently does.\n2. I want to send my request myself\nI would like to send my request away to the server myself, and then be responsible for passing the answer back. As I have made it in my repo I get to specify the function for doing this.\nThe signature for that function looks like this: (transaction, done). It gets the transaction, with .response, .request, and a function to call when it's done. It also provides a function for validating the response, suite.validateResponse(actual, expected).\nThis can be seen in lib/rest.js line 14-20.\nWhat is really cool with this approach is that I don't actually have to send the request over HTTP. More often than not the server is being run in the same process as the tests and I can just pipe them right in, without hitting the network stack. I can also skip the serialization and deserialization of the request body.\nThis brings potentially huge speed boosts to the tests (I just did this for multer and we went from 5 seconds to 0.1 seconds), which is really helpful when working with test driven development.\n3. I would like it to integrate with my test framework of choosing\nThis is a very nice to have since it lowers the barrier for people who already are using a test framework. mocha is wildly popular in the Node.js community but I don't at all think that it should limit itself to one framework.\nI want dredd to be a strong foundation which it should be easy to click it in to other frameworks, but it shouldn't at all require them.\nThis could either be accomplished by shipping glue for the most popular frameworks, or exposing good enough hooks so that it's easy accomplished.\nHere is how I did it in my tests. Basically it has to call describe for every ResouceGroup and Resource that it enters, and call it for every Action. Below is the beautiful output that it yields, do note that this is 100% generated from the API Blueprints Spec.apib and Usage.apib.\n\nI hope that this sheds some light over what I want. I'm very open to contributing code and having good discussions.\nHere are some related pull requests that I have submitted: apiaryio/protagonist#69, apiaryio/api-blueprint#198, apiaryio/snowcrash#332.\n. Hi @netmilk, if you could give some thoughts on the three points I provided it would really help me to move forward.\nThanks :+1: \n. I'm currently trying to run automated tests from the blueprint and stumbled on to this project which seem to have the same goal. I'm in the very early stages but currently I've added a new file to my test/ directory which gets run with mocha.\nI want to use it like this:\n``` javascript\n/ eslint-env mocha /\nvar Dredd = require('dredd')\nvar dreddCfg = {\n  path: ['Spec.apib']\n}\ndescribe('API', function () {\n  var dredd\nbefore(function () {\n    dredd = new Dredd(dreddCfg)\n  })\nit('follows the blueprint', function (done) {\n    dredd.run(done)\n  })\n})\n```\nThis is how I noticed the problem since mocha outputed the following:\ntext\n  1) API follows the blueprint:\n     Error: done() invoked with non-Error: {\"message\":\"Blueprint file or files not found on path: ''\"}\n    at test/blueprint.js:19:23\n    at Context.<anonymous> (test/blueprint.js:17:11)\nIt obviously also have some problem with locating my file but that's another issue altogether.\n\nWhat I really would want would be something like this:\n``` javascript\ndescribe('API - Blueprint', function () {\n  var tests = Dredd.loadSync(...)\ntests.forEach(function (test) {\n    it(test.name, function (done) {\n      test.run(done)\n    })\n  })\n})\n```\nThis would let mocha output the status of each individual test.\n. You most certainly can :)\nI'm using mocha for all my other tests and I do think that I will need to have manually specified tests in addition to api blueprint to catch all the edge cases. Therefor I wanted it to integrate nicely with the current test framework instead of being a different tool needed to be run.\nI'm not using grunt-dredd since I'm not using grunt (currently for this project no build system at all but I usually use gulp), but the code in that module is very similar to the code that I have in my test file.\nBasically it boils down to keeping it in line with the rest of the tests. It will live under test/ and it will be run as part of the test-suite at large when running npm test.\n. @netmilk I've modified protagonist and are using that to give me the raw ast. It gives me the option to hook into mocha in a very nice way:\n``` javascript\ndescribe('API', function () {\n  var source = fs.readFileSync('Spec.apib', 'utf-8')\n  var parsed = protagonist.parseSync(source)\nit.skip('should not emit any warnings', function () {\n    assert.equal(parsed.warnings.length, 0)\n  })\nparsed.ast.resourceGroups.forEach(function (resourceGroup) {\n    describe(resourceGroup.name, function () {\n      resourceGroup.resources.forEach(function (resouce) {\n        describe(resouce.name, function () {\n          resouce.actions.forEach(function (action) {\n            it('should ' + action.name, function (done) {\n              // TODO: do the actual test\n              done()\n            })\n          })\n        })\n      })\n    })\n  })\n})\n```\ntext\n  API\n    - should not emit any warnings\n    People\n      People List\n        \u2713 should List People\n        \u2713 should Create New Person\n      Person\n        \u2713 should Get Person\n        \u2713 should Update Person\n    Pets\n      Pets List\n        \u2713 should List Pets\n        \u2713 should Create Pet\n      Pet\n        \u2713 should Get Pet\n        \u2713 should Update Pet\n        \u2713 should Delete Pet\n. I agree, I hope to be able to use Dredd, but I'm just testing the water.\nI really want to find the best way to integrate Dredd and Mocha, and I think that more people than me would benefit from that. Maybe it will be feasible to extract some part of dredd into dredd-engine or something similar, mainly the part that takes a part of an ast and generates a request, and the part that validates the response. Anyhow, just thinking out loud...\n. Hmm, this is starting to look very much as a hack but here goes :)\nIt seems like the hook is never called, this is what I did:\n1. Create a function to generate the contents of the hook file:\n``` javascript\n   function generateSignFunction (env, apiKey) {\n     function hook () {\n       var hooks = require('hooks')\n       var crypto = require('crypto')\n   hooks.beforeEach(function (transaction) {\n     var date = new Date()\n     var userId = $$$USERID$$$\n     var apiKey = $$$APIKEY$$$\n     var apiSecret = $$$APISECRET$$$\n\n     var hmac = crypto.createHmac('sha256', apiSecret)\n\n     hmac.update(userId + ':' + date.toISOString() + ':' + transaction.request.body)\n\n     transaction.request.headers['X-API-Key'] = apiKey\n     transaction.request.headers['X-API-Sign'] = hmac.digest('hex')\n     transaction.request.headers['X-API-Time'] = date.toISOString()\n     transaction.request.headers['X-API-User'] = userId\n   })\n }\n\n var str = hook.toString()\n var body = str.substring(17, str.length - 1)\n var result = body.replace(/\\$\\$\\$([A-Z]+)\\$\\$\\$/g, function (m, field) {\n   switch (field) {\n     case 'USERID': return JSON.stringify(env.userId)\n     case 'APIKEY': return JSON.stringify(apiKey.key)\n     case 'APISECRET': return JSON.stringify(apiKey.secret)\n   }\n })\n\n return result\n\n}\n   ```\n2. Use that hook when instantiating Dredd.\njavascript\n   var dredd = new Dredd({\n     server: res.host,\n     options: {\n       path: ['Spec.apib'],\n       hookfiles: ['sign.js']\n     },\n     hooksData: {\n       'sign.js': generateSignFunction(res.env, res.apiKey)\n     }\n   })\n3. Run it\njavascript\n   dredd.run(done)\nThe output dosen't show the headers and the server responds that the api-key is missing.\n. As a simple test I changed the hook file data to throw new Error('TEST'), this didn't trigger any error so I don't think that it's loading the hooks-file at all...\n. It might not be all to clear but generateSignFunction returns a string, so I think that it should work.\n. Hmm, ~~maybe that should be reflected better in the documentation~~ found it. I'm also looking at Advanced Hook Examples > Modifying Transactions Prior to Execution and it clearly has a bug.\n\n```\nvar hooks = require('hooks');\nvar before = hooks.before;\nbefore(\"Machines > Machines collection > Get Machines\", function (transaction) {\n  // parse request body from blueprint\n  requestBody = JSON.parse(transasction.request.body);\n// modify request body here\n  requestBody['someKey'] = 'someNewValue';\n});\n```\n\nrequestBody is a newly created value so modifying that won't affect anything at all...\nBack to the issue, sandbox isn't documented under Configuration Object for Dredd Class and setting sandbox: true inside of options dosen't seem to affect anything at all...\n. Actually, shouldn't the last line be:\ntransaction.request.body = JSON.stringify(requestBody)\n. ping @kuba-kubula \n. Hey @netmilk, I've been pulled over to another project for at least a week more so I don't have anything in my head. The next thing on the roadmap is this again so I'll be back shortly.\nI'm going to take another stab at implementing it they way you suggested in your post and get back with my comments. It would be great to have a call, but lets take that when I'm sitting with it :+1: \n. Are you sure that you upgraded from 0.5.4 to 0.5.5? The only change between those versions was just some typos, I doubt that it affected your test results.\n. Cool! I'd be happy to help any way I can!\n. Awesome :+1:\n. Actually, it's very easy to do it without messing up branches.\n``` sh\nCreate a new branch for the 1.0.x release line, starting at the v1.0.10 tag\ngit checkout -b v1.0.x v1.0.10\nApply the fix for Node.js 6\nnpm install --save protagonist@1.3.2\nMake a commit\ngit commit -am 'Add support for Node 6'\nCut a new patch release\nnpm version patch\nPublish the new branch to github\ngit push --follow-tags --set-upstream origin v1.0.x\nPublish to npm\nnpm publish\n```\nI would really appreciate if you would do this for me \ud83d\udc4c \n. @honzajavorek I have reported my error with the pre-release here: #478. I would really appreciate it if you could publish a patch release to fix Node 6 compatibility while fixing the bugs in the newer version. I have outlined all the steps necessary, and it shouldn't take you more than 5 minutes...\n. No problem, thank you! \ud83c\udf89 \n. @honzajavorek Seems like the version wasn't published to npm, did you forget to run npm publish?\n. Cool \ud83d\udc4c \n. @honzajavorek All is green, time to publish \ud83d\ude4c \n. > If I may present a wish here too, please do continue with testing 1.1.0-pre.x as it's tremendous help for us. We need to find and kill all regression issues.\nWill do, thanks for resolving this \ud83d\udc4d \n. ",
    "demianh": "works perfectly! thanks a lot :)\n. This solution does not work with 0.4.6 release anymore. I am now going with the following code, although i do not fully understand what id does.. ;)\n``` coffeescript\nhooks = require 'hooks'\nhooks.beforeEach = (hook) ->\n  hooks.beforeAll (done) ->\n    transactionKeys = Object.keys hooks.transactions\n    for key in transactionKeys\n      paramToAdd = \"apikey=abc\"\n      if hooks.transactions[key].fullPath.indexOf('?') > -1\n        hooks.transactions[key].fullPath += \"&\" + paramToAdd\n      else\n        hooks.transactions[key].fullPath += \"?\" + paramToAdd\n    done()\nhooks.beforeEach (transaction) ->\n  # this is needed, no idea why...\n```\n. @smizell yes, i can confirm that removing the subfolder from the url makes the error go away (tested with v1.1.0-pre.1 this time)\n. ",
    "ofrobots": ":+1:\nFWIW, dredd tests pass on my machine (OS X Yosemite) with the latest io.js (1.6.3). I didn't run them in a Vagrant virtual development environment though.\n. ",
    "cades": "want node 0.12 +1\n. ",
    "dmtrs": "Any update on when the new release would be> @kuba-kubula could it be a minor release for the #179 so we could enjoy working with dredd?\n. +1\n. ",
    "RassaLibre": "Ehm... Is that just a stupid notice oooooor? Maybe I should clarify why this would be helpful - I would like to first execute the POST requests in the right order, so I can store the IDs of the created objects (I get them form the response) in a variable in the hooks file and use the same IDs for GET, UPDATE and DELETE. This would mean that one does not need to enter the IDs in the Blueprint file + the database would be in the same state before testing like after testing. The documentation is a bit incomplete when it goes about this.\n. Hi, thank you for your reply. It gave me some very useful information. You are right that what I am describing can be helpful in some cases but it is not a silver bullet. I have already implemented the sorting in my repo here and I even managed to clone Dredd and extend the sorting function. It is just hard to test because the test for the sorting takes stdout and then compares the indexes of each method. It would be super difficult for me to test it based on stdout so that is why there is no pull request so far. I do not dare without tests :-) Maybe I will just try something one day and then we will see if it gets accepted or not.\nYou are right that the problem is not black and white as I thought. At least I have something to think about. I think you can close this \"issue\" and you may expect a pull request from me with the advanced sorting in the future. Thanks!\n. Hi, thanks for your answer @netmilk. It seems like I closed the issue exactly in the moment when you commented on it. Thank you for the tip with beforeAll, this actually sounds like a good idea! This could actually solve my problem. I am writing a thesis about MDD of REST APIs and I generate API Blueprint file along with the REST API so the user can test it with Dredd. IDs are the only required input from the user and I wanted to make some sort of a work around so even that is automatic. Just to explain. But thank you guys, this discussion was actually very helpful! :)\n. ",
    "jdrake": "Pummmped :+1: \n. :heart:\n. ",
    "nevir": "Edit: Nevermind! My comment is a dupe of https://github.com/apiaryio/dredd/issues/194\n\nOptional attributes don't seem to be honored, either:\nmd\n+ Attributes (object)\n    + foo (optional, string)\nResults in\njson\nbodySchema: {\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\"type\":\"string\"}\n  },\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n}\nfail: body: At '/foo' Invalid type: null (expected string)\n. As a workaround, would it work to have gavel strip all null properties from JSON responses (maybe as an option)?\nI'd be interested in making a patch for that, but I'm having a heck of a time tracing through gavel's validation logic to find the right point for that\n. Yes please! :)\n. Actually, not too bad! PR incoming once I write a few tests\n. Sweet :)\n. Sweet! Thanks :)\n. :+1: \n. ",
    "berislavlopac": "Update: managed to install dredd, but getting no response from it whatsoever. :disappointed: \n. Yep, in that second instance. I also installed node and npm separately. Right now any dredd command returns nothing at all, not even an error.\n. I've got /usr/local/bin/dredd -- perhaps I should install as root rather than via sudo?\n. I'm afraid not, I've just installed dredd on a virgin box, with no additional provisioning, with the same results.\n. I see, this might be the cause -- so is the update mentioned in that issue coming soon?\n. Thanks, I'll take a look next week!\n. Just wanted to let you know that it works great now, thanks! :smiley: \n. ",
    "smizell": "@netmilk Here we go. This is kind of the first run in my opinion. It would be good to have @DeeStrong read over this and make sure it looks good. We can do all that editing in another PR or do it here.\n. @netmilk Great idea. I will put it in the README.\n. @netmilk This has done with commits squashed.\n. BTW, I simply linked to the installation instructions for MkDocs so you don't have to keep the instructions in sync.\n. @lethalpaga did you have any luck finding out what was going on here? As it seems it may be an issue with the implementation, we may close this, but if you have more feedback/questions for this, we'd love to hear it! Thanks for posting this.\n. @andyantrim @tu1ly would you all be able to maybe provide a simply use case here? As in, what is the situation where you would want to override hook files? What are the benefits this functionality would give you? What other configurations have you wanted to override? Thanks a lot!\n. Very cool! So you're mainly changing the URL Dredd calls and the hookfiles? \n. @andyantrim Thanks for fielding all my questions. This decision for a feature like this will be handled by @netmilk, but I'm curious if your use case would be helped by having multiple configuration files instead of overwriting values? \n. @tu1ly Cool idea :) Did this cause an issue for you? Would it be difficult to keep track of two lists of transactions\u2014one in the blueprint and one in your Dredd hooks/configuration?\nWould the ability to randomize the tests be a solution here?\n. @tu1ly Could you provide a simple example here? What do you mean when you talk of external data? Thanks!\n. @tu1ly I've confirmed this. This actually also happens if you pass in a function without any arguments.\n``` js\nvar hooks = require('hooks');\nhooks.before(\"Machines > Machines collection > Get Machines\", function () {\n});\n```\n. @tu1ly is this what you are seeing (see output below)?\nAPI Blueprint\n``` apib\nFORMAT: 1A\nMachines API\nGroup Machines\nMachines collection [/machines]\nGet Machines [GET]\n\nResponse 200 (application/json)[{\"type\": \"bulldozer\", \"name\": \"willy\"}]\n\n```\n\n\nHook File (test_hooks.js)\n``` js\nvar hooks = require('hooks');\nvar assert = require('assert');\nhooks.before(\"Machines > Machines collection > Get Machines\", function (transaction) {\n  assert(false);\n});\n```\nServer\n``` js\nvar http = require('http');\nhttp.createServer(function(request, response) {\n  var body = [];\n  request.on('data', function(chunk) {\n    body.push(chunk);\n  }).on('end', function() {\n    console.log(request.url);\n    response.statusCode = 200;\n    response.setHeader('Content-Type', 'application/json');\n    response.end('[{\"type\": \"bulldozer\", \"name\": \"willy\"}]');\n  });\n}).listen(3000);\n```\nDredd Command and Output\n``` sh\n$ dredd ./apiary.apib http://localhost:3000 --hookfiles=*_hooks.js\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: test_hooks.js\nerror: GET /machines duration: NaNms\nerror: AssertionError: false == true\n  at /Users/smizell/Sandbox/dredd-testing/test_hooks.js:5:3\n  at TransactionRunner.runHook (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:314:9)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:151:28\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:246:17\n  at iterate (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:146:13)\n  at async.eachSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:162:9)\n  at _asyncMap (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:206:20)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:92:26\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:207:16\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:251:17\n  at async.eachSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:142:20)\n  at _asyncMap (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:206:20)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:88:24\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:246:17\n  at iterate (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:146:13)\n  at async.eachSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:162:9)\n  at _asyncMap (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:86:22\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:207:16\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:251:17\n  at async.eachSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:142:20)\n  at _asyncMap (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:206:20)\n  at TransactionRunner.executeAllTransactions (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:81:17)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:64:22\n  at addHooks (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/add-hooks.js:142:16)\n  at TransactionRunner.run (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:59:12)\n  at Dredd.startRunner (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:274:24)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:115:28\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:266:18\n  at EventEmitter. (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/reporters/cli-reporter.js:24:14)\n  at emitTwo (events.js:92:20)\n  at EventEmitter.emit (events.js:172:7)\n  at Dredd.emitStart (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:258:39)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:111:26\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:249:16\n  at done (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:132:19)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:32:16\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:241:18\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/dredd-transactions/lib/dredd-transactions.js:31:14\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/dredd-transactions/lib/parse.js:17:12\npass: GET /machines duration: 45ms\ninfo: Displaying failed tests...\nfail: GET /machines duration: NaNms\nfail: Machines > Machines collection > Get Machines\nrequest:\nmethod: GET\nuri: /machines\nheaders:\n    User-Agent: Dredd/1.1.0-pre.0 (Darwin 15.3.0; x64)\nbody:\ncomplete: 1 passing, 0 failing, 1 errors, 0 skipped, 1 total\ncomplete: Tests took 59ms\n```\n. I did a quick check and found the issue was in the URI template and not the parameters (as @c0 linked to). The following blueprint gives this same compilation error and warning.\n``` apib\nFORMAT: 1A\nHyphen Test\nFoo Bar [/{foo-bar}]\nGET\n\nResponse 200\n```\n\n@honzajavorek Please also note the issue referenced by by @c0, saying that according to the spec, hyphens are not allowed.\n. I believe you are able document URIs with hyphens, however you cannot use hyphens within URI template parameters. In other words, /foo-bar{?baz} is valid while /{foo-bar} is not. I just verified this.\n. However, we'd love to hear your use case here. :) Do you have any requirements pushing you toward using hyphens for parameters?\n. Oh, I see here, as the issue with the query string since it is both the query parameter name and the URI parameter name. That makes sense. :) Thank you for sharing.\n. @c0 I've done a little more research here. The issue is actually in the blueprint parser, so I believe we can close this for now from a Dredd perspective. I found this comment, and thought even though it is a couple of years old, maybe it can give you a glimpse into the opinion on RFC6570 :) I'd encourage you to bring up your desires on the blueprint repo if you are interested in pursuing this issue there.\nHowever, I've opened another Dredd issue #481 that is really a superset of this issue you've opened. Maybe the solution there would allow you to use hyphens in the short term? If your server decodes anything that is URL encoded, maybe it will actually work for you now without any changes to Dredd. Please let us know on that PR if that is a helpful solution.\nAnd thanks for opening this issue. Please continue to bring these things to our attention in the future, even if you think they are small things :)\n. @honzajavorek Just a few things!\n. @honzajavorek looks like one hack is to do what is mentioned here:\nhttps://github.com/rtfd/readthedocs.org/issues/1826#issuecomment-214753550\n. @demianh I was able to figure this. Your input was great in helping me reproduce it. Thanks!\nThis issue requires two things to reproduce it.\nFirst, use an ambiguous URI parameter. This means there is a parameter included in the URI template, but it is not defined in the blueprint. This example has one of these parameters.\n``` apib\nFORMAT: 1A\nMy API\nItem [/item{?foo}]\nA parameter for foo should be defined here, however it's not.\nGET\n\nResponse 200\n```\n\nNote: if a directory is not included on the Dredd call, it results in a GET request to null.\nsh\n$ dredd ./apiary.apib http://localhost:3000\nwarn:  Compilation warning in file './apiary.apib':\nAmbiguous URI parameter in template: /item{?foo}\nParameter not defined in blueprint:'foo' on  > Item > GET\ninfo: Beginning Dredd testing...\npass: GET null duration: 43ms\ncomplete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total\ncomplete: Tests took 48ms\nSecond, to get the error you are getting, you add a subdirectory to the Dredd call. Notice above I used http://localhost:3000. If I call with a subdirectory, I get this out:\n``` sh\n$ dredd ./apiary.apib http://localhost:3000/foo\nwarn:  Compilation warning in file './apiary.apib':\nAmbiguous URI parameter in template: /item{?foo}\nParameter not defined in blueprint:'foo' on  > Item > GET\ninfo: Beginning Dredd testing...\n/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:339\n      fullPath = '/' + [this.parsedUrl['path'].replace(/^\\/|\\/$/g, \"\"), request['uri'].replace(/^\\/|\\/$/g, \"\")].join(\"/\");\n                                                                                      ^\nTypeError: Cannot read property 'replace' of null\n  at TransactionRunner.configureTransaction (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:339:87)\n  at TransactionRunner.configureTransaction (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:3:57)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:246:17\n  at iterate (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:146:13)\n  at async.eachSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:162:9)\n  at _asyncMap (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at TransactionRunner.run (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/transaction-runner.js:56:11)\n  at Dredd.startRunner (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:274:24)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:115:28\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:266:18\n  at EventEmitter. (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/reporters/cli-reporter.js:24:14)\n  at emitTwo (events.js:92:20)\n  at EventEmitter.emit (events.js:172:7)\n  at Dredd.emitStart (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:258:39)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:111:26\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:249:16\n  at done (/Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:132:19)\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/async/lib/async.js:32:16\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/lib/dredd.js:241:18\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/dredd-transactions/lib/dredd-transactions.js:31:14\n  at /Users/smizell/.nvm/versions/node/v5.0.0/lib/node_modules/dredd/node_modules/dredd-transactions/lib/parse.js:17:12\n```\n@demianh would you be able to confirm this is the situation for you? When you remove the subdirectory from your dredd command, does the error go away? The ambiguous warning should still be there.\nAnd thanks a ton for reporting this. I'm sorry your build was broken!  We definitely want to prevent that from happening.\n. @nurey I'm only closing because it looks like your issue is resolved, but please feel free to open it back up if you are still having issues. Definitely want to help resolve anything you come across!\n. @LinusU I was wondering if you include any additional information to help debug this? I have seen this issue come up when people have a URI template but did not define the parameters for it.\nExample:\n``` apib\nFORMAT: 1A\nMy API\nItem [/item{?foo}]\nParameters should be defined here, but they are not.\nGET\n\nResponse 200\n```\n\nDo you have anything like this in your blueprint?\n. @LinusU I have added some more information to an issue that may be related. Maybe this is what you're seeing as well? https://github.com/apiaryio/dredd/issues/469\n. This is feedback from issue #469 of a user's expectation.\n\nIn earlier versions of dredd, they just were omitted. Now i get an Exception. Not sure if this new behaviour is intended, but the old behaviour was definitely more convenient :)\n\nAlso, it appears that trying to test these could possibly break some builds, so making it error may be considered a breaking change. Also, to some implementations, a query parameter may actually be required to make it a valid URL like /posts.php?id=4. Hitting /posts.php may not be what the user is testing.\nThis decision is of course up to you and @netmilk, but I think in the short term path may be to provide warnings, say what is skipped, and then (if you plan to do the above) add a deprecation warning. But I'm just thinking out loud here :)\n. \"...provides a comfortable interface...\"\n. will appear on the _Tests_ page\n. This maybe should say:\n\nIn addition to using parameters and dredd.yml, you can also use environment variables:\n. \"You can use the following...\"\n. Nit: extra line\n. Note, this applies to the whole doc. It looks like it goes between one and two lines between these options. Might be nice to have them synced.\n. API Description Document instead of blueprint?\n. API Description Document instead of API Blueprint?\n. API Description Document?\n. API Description Document?\n. \n",
    "jolleon": "Hi, I'm seeing the issue with array members not getting validated also when using a Data Structure.\nFor instance consider this blueprint:\n```\nGroup Users\nUsers [/users]\nRetrieve all users [GET]\n\n\nResponse 200 (application/json)\n\n\nAttributes (array[User])\n\n\nUser [/users/{id}]\n\n\nParameters\n\nid (required, number, 1) ... The user ID\n\n\n\nRetrieve a User [GET]\n\n\nResponse 200 (application/json)\n\n\nAttributes (User)\n\n\nData Structures\nUser (object)\n\nid: 1 (number)\nname: jules (string) - full name\n```\n\nIf I break my app's /user/{id} endpoint and make it return e.g. a string rather than a number for the id attribute, dredd catches the error (which is awesome!).\nUnfortunately this doesn't work for the array case: if I break my /users endpoint in any way but still return an array at the top level dredd doesn't catch the problem.\n. Yep this works, thanks! I also found the \"uriTemplate\" on the transaction object which seems to be a relatively clean way to handle my use case:\ntransaction.fullPath = transaction.origin.uriTemplate.replace('{id}', stash['userId']);\ntransaction.request.uri = transaction.fullPath\n. ",
    "jmachan": "Hi guys! We updated Dredd on: User-Agent: Dredd/1.0.9 (Linux 3.13.0-24-generic; x64) and it still ignores errors in objects in array :( \n. ",
    "beyourselfman": "@w-vi I have trouble to follow your MAY-MUST argumentation. In my opinion the distinction in json schema between may and must is made by the required field. In the following example:\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"fields\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"field-a\": {\n            \"type\": \"string\"\n          },\n          \"field-b\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"field-a\"\n        ]\n      }\n    },\n    \"required\": [\n      \"name\",\n      \"fields\"\n    ]\n  }\n}\nThis response should be valid\n[\n  {\n    \"name\": \"name\",\n    \"fields\": {\n      \"field-a\": \"value-a\"      \n    }\n  }\n]\nThis response should be not valid (error: Invalid type. Expected String but got Integer.)\n[\n  {\n    \"name\": \"name\",\n    \"fields\": {\n      \"field-a\": 1    \n    }\n  }\n]\nWhat am I missing here? ;-)\n. Hi all,\nI am also using hooks, like this:\nbeforeEach(function (transaction) {    \n    transaction.id = getRequestNameFromId(transaction);    \n});\nfunction getRequestNameFromId(transaction) {\n    return transaction.origin[\"actionName\"] + \"_\" + transaction.expected[\"statusCode\"];\n}\n. Hi all, I am currently quite busy, but will test and report on Monday.\nBest regards,\nMichael Boehnke\nPavan Kumar Sunkara notifications@github.com schrieb am Fr., 20. Mai\n2016, 17:20:\n\n@honzajavorek https://github.com/honzajavorek Yes, this has been fixed\nin protagonist@1.3.3\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/439#issuecomment-220635448\n. \n",
    "philsturgeon": "Thanks! That fixed it :D\u00a0\n--\u00a0\nPhil\nFrom:\u00a0Adam Kliment notifications@github.com\nReply:\u00a0apiaryio/dredd reply@reply.github.com>\nDate:\u00a0April 24, 2015 at 2:11:12 PM\nTo:\u00a0apiaryio/dredd dredd@noreply.github.com>\nCc:\u00a0Phil Sturgeon me@philsturgeon.uk>\nSubject:\u00a0 Re: [dredd] Pitboss error (#180)  \n@philsturgeon Released, please try it and let me know if it does work for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. I am currently having this issue, and @netmilk has been looking at it on http://slack.apisyouwonthate.com. No idea wtf is going on, we're both stumped. \n. Hey whats happening here? I've got a field - destination (object, nullable, optional) and it's giving the error: fail: body: At '/trips/destination' Invalid type: null (expected object). \nAny ideas?\n. Ahh, so im currently trying to get my API docs back up to date and using dredd to do this, should I just give up? Is there a workaround? I'll need to make a LOT of custom nonsense MSON data structures if I can't use nullable.\n. I see comments in here talking about that work around fixing the JSON Schema, but I'm not concerned about that, I just want dredd to work. Is that one and the same? \n. I added some logging and my hooks are definitely running (using your JS example) but it's just not adding null to the JSON schema. Debugging where exactly it's going wrong.\n. Haha ouch:\nerror: undefined duration: NaNms\nerror: TypeError: Cannot read property 'description' of undefined\n  at patchPropertiesWithNullable (/Users/phil/src/foo-app/hooks.js:7:13)\n  at patchPropertiesWithNullable (/Users/phil/src/foo-app/hooks.js:26:43)\n  at /Users/phil/src/foo-app/hooks.js:37:16\n  at TransactionRunner.runLegacyHook (/opt/boxen/nodenv/versions/v0.12.9/lib/node_modules/dredd/lib/transaction-runner.js:240:9)\n. Any luck on this @netmilk?\n. Excellent news! Thanks for the updates :)\n\nPhil Sturgeon\nSent from my iPhone and there's probably typos because I'm probably at the pub.\n\nOn Dec 16, 2015, at 5:07 PM, Kyle Fuller notifications@github.com wrote:\n@philsturgeon I just want to point out, support for nullability was added to dredd in master (release pending). So you should be able to build Dredd from source and test out nullability without these workarounds.\n\u2014\nReply to this email directly or view it on GitHub.\n. Well installing via source has not gone well. I tried a few things, including npm install -g git+ssh@github.com:apiaryio/dredd.git and it is missing the lib folder which causes some issues. I tried fixing that running ./scripts/build but it doesnt do anything, aaaand a git log inside the installed dredd folder is:\n\n```\ncommit f851881958aa0e17c4f942fe4b5419e6de7c9ab5\nAuthor: cronopio aristizabal.daniel@gmail.com\nDate:   Sat Jul 18 23:49:29 2015 -0500\n:ship: Bump version v0.3.4\n\n```\nAKA old as f**k.\nI guess I'll just wait for the tagged version? \n\n. > Swagger is just JSON Schema,\nOh I really really wish this was true, but it isn't. \nUnlike @fungjj92 suggested, type: [string, 'null'] is not valid Swagger (even though it is valid JSON Schema). \nhttps://github.com/swagger-api/swagger-editor/issues/1302\nOpen API 3.0 supports nullable: true, which ReDoc also backported so is what a lot of folks use in v2.0. It's what im using too. \nCan we get some support for this?. I wrote an essay. https://github.com/apiaryio/fury-adapter-swagger/issues/112. I think I'm also suffering this same problem.\n. \n. \ud83d\ude4c \n. Oh! The error is: \nerror: Compilation error in file './docs/index.yaml': Failed to parse URI template: /v1/office_holds/fetch_active_by_reservable_uuids{?reservable_uuids[]}\nError: SyntaxError: Expected \"(\", \"*\", \",\", \":\", \"}\" or [a-zA-Z0-9_.%] but \"[\" found. (Office Holds > /v1/office_holds/fetch_active_by_reservable_uuids > Fetch active by Reservable UUIDS)\nerror: Error when processing API description.\nSorry, forgot to include that. . Great news! Thank you. . ",
    "bootstraponline": "https://github.com/apiaryio/dredd/pull/185\n. ",
    "mjza": "@netmilk \nYes you are true.\nActually I mentioned this error in the following link at first:\nhttp://stackoverflow.com/questions/29878710/how-to-install-apiaryio-drafter-on-windows-8/29878878?noredirect=1#comment47905350_29878878\nBut someone with username @Almad asked me to write here as an issue, and unfortunately I didn't noticed that he suggested a wrong page to me.\n@netmilk thanks for your reply. \n. ",
    "liront2": "Hi all\nI tried replacing uri in every way described here but it did not help.\nI believe the problem is that my swagger has a defult value, so Dredd overrides my hook somehow.\nHowever, if default is not presented, dredd will fail the test cause value is required.\nSwagger:\n/accounts/{id}:\n    get:\n      description: Returns an account data based on a single ID\n      operationId: find_account_by_id\n      parameters:\n        - name: id\n          in: path\n          description: ID of an account to fetch\n          required: true\n          type: string\n          pattern: \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\"\n          default: \"2eadb261-afa1-5947-bf20-26bb6f5e1df2\"\nHow can I override the default value?\nThanks\n. @honzajavorek I read the issue you referenced and tried everything, problem is the enum in Swagger, which won't let me change the fullpath. Moreover, when I remove the enum, compilation fails.\n. You are right! Apiary shows the new and real id!\nWhy do Dredd logs lie about the id?\nThanks\nLiron\n. ",
    "neonichu": "The MSON I use looks like this:\n``` markdown\nWebhook Definition\n\nsys\ntype: WebhookDefinition\nid: foobar\nversion: 0 (number)\nspace (Space Link)\nInclude Resource Metadata\n\n\nurl: https://www.example.com\nhttpBasicUsername\n```\n\nAs far as I understood it, leaving out the value leads to null in the JSON, see https://github.com/apiaryio/mson/blob/46081361555a77f2085b89d53b1418a982c10122/README.md#objects--arrays\n. Dredd is awesome, thanks a lot for making it :+1: \nI guess this is an edge case :) \nSection \"10.2.5 204 No Content\" of the same RFC states:\n\nThe 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.\n\nFeel free to close this, though, if this works as you intended.\n. I think so, as \"MUST NOT\" is defined as \"absolute prohibition\" in RFCs, sending a body with a 204 response is clearly an error.\n. ",
    "lippea": "I have the same problem in dredd 2.14.12. \nShall I go for the workaround or is there a fix in another version?\n. Hi netmilk\nThanks for your suggestion. I'm actually testing one item in isolation. The second transition is not for testing, but get the data for verification for the first transition. That means I have no way to verify the data but put another transition to the second item.\nI'm currently thinking of two possible ways to solve it: 1. save the response into a temp file 2. modify the blueprint of second transition in the after hood of the first transition.\nThe second solution is why I ask if there is a way to another transition object in a hook. \n. Thanks kylef for your so quick reply.\nDoes that mean all the items in the array needs to be exact the same as listed under the array?\nBut I only concern the item listed under it.\n. @honzajavorek I have achieved it by using schema section, but it's a bit too long (more than 600 lines)\nSo I would like to see if it's possible to do it with MSON, which would contain just over 100 lines.\nOr maybe I will explore other ways to solve my problem. But so far, I like the BluePrints stuff.\n. Hi @honzajavorek, I believe the input is valid. The \"- name: abc\" is at the bottom of the input. If you search it, you can get a hightlight of it.\nI agree with you that it's a prior error from other part. But I'm not sure how can I check further on generated schema or something else to identify which part exactly causes the error.\n. @honzajavorek Thanks very much for investigating this.\nIn the drafter issue, this interests me: \"break down their blueprint into separate data structures.\"\nLooks like a way to get around this issue. Is it customized data structure?\n. Is there an example of how to break it down?\nI tried the following, but doesn't look work: it's always pass.\n```\n+ Response 200 (application/json; charset=UTF-8)\n+ Attributes\n    # customizedobject (object)\n        - name: Sent\n        - timeUtc: Wed, 16 Mar 2016 22:29:50 GMT (string)\n            - metadata\n                - response\n                    - Formfields\n                        - item (array)\n                            - (object)\n                                - name: abc\n    - _source (object, required)\n        - events (array, fixed)\n            - (customizedobject)\n\n```\n. Tried below as well. It's still always pass.\n```\n+ Response 200 (application/json; charset=UTF-8)\n+ Attributes\n    # customizedobject (object)\n        - name: abc\n    - _sourced (object, required)\n        - eventss (array, fixed)\n            - (object)\n                - name: Sent\n                - timeUtc: Wed, 16 Mar 2016 22:29:50 GMT (string)\n                - metadata\n                    - response\n                        - Formfields\n                            - item (array)\n                                - (customizedobject)\n\n```\nLooks like the schema generated is empty:\n```\nexpected:\nheaders:\n    Content-Type: application/json; charset=UTF-8\nbody:\n{}\nstatusCode: 200\nbodySchema: {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {}\n}\n```\n. I ended up not using a solution from our developers, not the customized data structure.\nDidn't manage to make it working.\n. Hi @honzajavorek Thanks! That helps. The blueprint passes with below modified mson.\n```\n+ Response 200 (application/json; charset=UTF-8)\n+ Attributes (customizedtype)\n\nData Structures\ncustomizedtype (object)\n\n_source (object, required)\nevents (array, fixed)\n(object)\nname: Sent\ntimeUtc: Wed, 16 Mar 2016 22:29:50 GMT (string)\nmetadata\nresponse\nFormfields\nitem (array)\n(object)\nname: abc\n```\n. Hi @honzajavorek Thanks! I have used beforeEach hook to print the name before every case for a debugging, but it doesn't help with CI build report. I'll try -reporter=apiary as well.\n. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "milch": "I ran into a similar issue, because I am using rails for my API. rails is using rack, which is always emitting the Content-Type header, even if there is no body. To solve this, I put this script I found on StackOverflow (and adapted it) into my application.rb:\n``` ruby\nclass RemoveContentType\n  def initialize(app)\n    @app = app\n  end\ndef call(env)\n    status, headers, body = @app.call(env)\n    bbody = body.body\n#Remove Content-Type if there is no body\nheaders.delete('Content-Type') if bbody.length == 0\nreturn [status, headers, body]\n\nend\nend\n```\nAnd then called config.middleware.use \"::RemoveContentType\" in the config part of the same file.\n. Yes, my Jenkins instance has internet access. Here's the output from your commands, it's the same on both machines (which are running OS X by the way):\n$ dredd --version\ndredd v0.5.4\n$ node -v\nv0.12.4\nThe rails version is 4.2.1 on both machines as well. \nI'm trying to isolate the issue right now, I'll report back again if I manage to create a working sample.\n. Alright, I found the issue! I still don't know if it has to do with dredd, however. It happens if there is a space somewhere in the directory name. I've already set up the repo at milch/dredd-demonstration, so if you want to use that to check it out, run this: \ngit clone https://github.com/milch/dredd-demonstration.git dredd\\ demo\ncd dredd\\ demo\n./run-dredd.sh\nAfter that, dredd should crash with the same message I posted above.\n. @honzajavorek I think you're right, it seems like it's been fixed. . ",
    "ungrim97": "I am hitting this issue as well. Returning from an OPTIONS request is failing in Dredd as it attempts to parse the JSON when there is no content.\nI would argue that there doesn't have to be a Body if there is a Content-Type header, but there must be a Content-type header if there is a body.\nCertainly the RFC indicates that in the event of a 204 then the Body should be ignored.\n. cpanm is the preferred installation manager for perl (https://metacpan.org/pod/App::cpanminus). If you are using the perl pre installed on the system rather than installing it via perlbrew/plenv then it is likely not already installed. \ncpan is the client that comes packaged with system builds of perl and should work fine (cpan Dredd::Hooks) but may require sudo access if its installing against system perl.\ntravis (and most perl devs) install perl using either perlbrew or plenv and cpanm to install modules to.\n. Cheers @netmilk,\nWill add those suggestions and let you know\n. All done\n. @kylef Cheers\n. A server should return no content length header on a 204 response\nFrom the HTTP RFC (7230):\n\nA server MUST NOT send a Content-Length header field in any response\n   with a status code of 1xx (Informational) or 204 (No Content).  A\n   server MUST NOT send a Content-Length header field in any 2xx\n   (Successful) response to a CONNECT request (Section 4.3.6 of\n   [RFC7231]).\n\nAlso the response should always be terminated by the first empty line after the headers. A 204 MUST NOT have a message content.\nFrom the HTTP RFC (7231):\n\nA 204 response is terminated by the first empty line after the header\nfields because it cannot contain a message body. \n\nI can't see anything about a Content-type on a 204 being erroneous (though that does make sense). That said it would seem that the best thing to do would be to:\n| Body | Content Type | Status Code | Content Length | Dredd's Verdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| empty | text | any | 0 or N/A | :white_check_mark: | empty string is valid text |\n| empty | N/A | any | 0 or N/A | :white_check_mark: | when Content-Type is not specified, Dredd assumes text and empty string is valid text |\n| empty | any | 204 | N/A | :white_check_mark: | Any empty body is valid for a 204 |\n| empty | json | any | 0 or N/A | :x: | empty string is never valid JSON |\n| empty | json | 204 | 0 or N/A | :white_check_mark: | An empty body is always valid for a 204 |\n| non-empty string | any | 204 | any | :x: | response with 204 status code should not have body |\n. This discussion is also valid for a 205 response and other responses that are explicitly no content\n. @honzajavorek Agreed.\nBasically I believe that if the response is a 204 then the content-type is irrelevant (or that null is always valid).\nA warning if you have a content-type with no content would certainly make sense.\n. That behaviour matches my expectations\nOn 8 November 2017 4:48:49 pm Honza Javorek notifications@github.com wrote:\n\nI propose following as a final solution. The \u2699\ufe0f symbol means that actual \nvalidation takes place.\n| Expected Body | Expected Schema | Real Body | Content Type | Dredd's \nVerdict | Explanation |\n| --- | --- | --- | --- | --- | --- |\n| none or empty string | none or implying empty string | none or empty \nstring | any  | :white_check_mark: | |\n| none or empty string | none | non-empty | any | :white_check_mark: | no \nassertions = no validation |\n| none or empty string | non-empty | any | any | \u2699\ufe0f | schema = validation |\n| non-empty | any | any | any | \u2699\ufe0f | body example = validation |\nAdditional rules\nIf the expected body, expected schema, or real body are non-empty and the \nstatus code is 204 or 205, Dredd provides warning that such status codes \nshould not have body according to RFC.\nHow to avoid body validation\nDo not specify any body example or schema\nHow to force validation to require empty body\nDo not specify body example. Specify schema implying an empty string, such as\njson\n{\"type\": \"string\", \"enum\": [\"\"]}\nEven if you do not specify such schema, Dredd will warn in case of \nnon-empty bodies of 204/205 HTTP status codes.\n--\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/apiaryio/dredd/issues/556#issuecomment-342879248\n. \ud83d\udc4d\n\nOn Fri, Nov 10, 2017 at 9:35 PM, Honza Javorek notifications@github.com\nwrote:\n\nProposal (add \ud83d\udc4d to this comment if you think it's a good idea, comment\nif you disagree):\n\nNo body and no schema in the API description means there are no\n   assertions. No validation will happen, any response body will pass.\nNo body and any schema will fail, because Gavel supports only JSON\n   Schema as schema and there is no way to describe an empty response in JSON\n   Schema\nIn case anyone would want to force empty body validation, they can\n   do so by hooks \ud83d\ude42 It should be pretty simple:\n\nhooks.beforeValidation('My API > ...', function (transaction, done) {\n  if (transaction.real.body) {\n    transaction.fail = 'The response body must be empty';\n  }\n  done();\n});\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/556#issuecomment-343593680, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACMuMPWRv7kK7EYoEmzF4MhQmncGaHhRks5s1MG-gaJpZM4JJLJV\n.\n. Will require an update to the perl hook script to support the port/host arguments. Passing them in to the current version shouldn't break anything. (it will look for hookfiles files called --port=1234 and --host=127.0.0.1 but obviously won't find one and will skip them)\n\nWill make an update to accept the new params. https://github.com/ungrim97/Dredd-Hooks/pull/7 should cover whats needed to make the Perl version work for this. Fixed\n. ",
    "cula011": "We've been facing a similar problem after doing a fresh npm install that resulted in pulling down async@1.1.0. Dredd is configured to accept minor revisions of the async library. When we modified the package.json to fix the dependency at async@1.0.0 (see: https://github.com/cula011/dredd/commit/7f84b17b1ec04f4d2c05e52d5ddd2e9231b75ac9), the problem went away.\nNot sure at this point whether this is an issue caused by async or its usage in dredd.\n. ",
    "DevAlien": "So, easy fix would be to change the package.json and the real fix would be to change those lines I've posted above.\n. @kuba-kubula  thanks :) \n. ",
    "muthuegrove": "We tried with the dredd@0.5.1 working properly with same API & BluePrint. But dredd@0.5.4 & dredd@0.5.5 only getting the above errors. Exactly after 2015Jun1 only we got this error, Before that it's working fine.\n. Hi @netmilk ,\nThanks for your suggestion.\nI have upgraded dredd@0.6.0 and the dredd tool is working fine.\nCan you explain what is the problem of that time ? We can use the dredd@0.6.0 in future or any new upgrade will release with the above error fixed ?\n. ",
    "Abhinay12": "sorry sir ...........................\nOn Mon, Jun 8, 2015 at 1:20 PM, Adam Kliment notifications@github.com\nwrote:\n\nHI @Abhinay12 https://github.com/Abhinay12,\nthis is repository and issues tracker for Dredd - testing tool for API\nBlueprint, can you please be more specifc about how Dredd and Postman are\nconnected?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/211#issuecomment-109894907.\n. no sir i have not found it i am just finding solution for\nthis.........................\n\nOn Mon, Jun 8, 2015 at 4:03 PM, Adam Kliment notifications@github.com\nwrote:\n\n@Abhinay12 https://github.com/Abhinay12, btw did you find out how to do\nit in Postman? Is it possible?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/211#issuecomment-109944919.\n. thanx sir but i have to do in postman if u have any solution then just\ninform me................\n\nOn Mon, Jun 8, 2015 at 5:35 PM, Adam Kliment notifications@github.com\nwrote:\n\n@Abhinay12 https://github.com/Abhinay12 Just for you information, this\nis exactly possible with use of Dredd hooks\nhttps://dredd.readthedocs.org/en/latest/hooks/ Please let me know in\ncase of any questions. I'm happy to help.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/211#issuecomment-109969300.\n. \n",
    "petebrowne": "I've run into similar performance issues on large apib files. If I use a glob, performance is fine\n``` bash\n$ dredd apibfiles/*/ test.local --names\n...\ncomplete: 0 passing, 0 failing, 0 errors, 0 skipped, 269 total\ncomplete: Tests took 86ms\ncompiled.apib is the same set of apib files, concatenated into a single large file\n$ dredd compiled.apib test.local --names\nnever finishes...\n```\n. ",
    "kaikun213": "Is there a feature to see the transaction origins? E.g. as the transaction names with dredd --names a command dredd --origins. Otherwise I would suggest such feature.. @honzajavorek I am quite new to dredd and at the moment debugging my apib and hooks. Somehow some requests get not invoked and others get unwillingly invoked twice. So it would be useful to fastly list the origins and convert the used transaction names to origins. . ",
    "halfvector": "@honzajavorek Is there any movement on this? I'm very interested in clearly defining various request/response pairs for the same 200 status code for contract testing purposes.. ",
    "efavre": "Hi,\nI agree, this would be very nice to ensure an ever better API vs blueprint match.\n. ",
    "sixers": "Hey! Any progress on this?. ",
    "hellboy81": "\nI have well-formed Apiary documentation in Markdown\nI have 3rd party test REST client that can loads requests from JSON settings file\nThe requests object in JSON has following fomrat:\n\njson\n\"requests\": {\n   \"endpointName\": {\n        \"url\": \"/endpoint/{param0}/{param1}\",\n        \"method\": \"GET\" // Or POST, DELETE PUT, HEAD\n        \"params\": { // Parameter values\n             \"param0\": \"param0value\",\n             \"param1\": \"param1value\"\n         }\n   }\n}\n- I should every time for each new service add requests by hand \n- As I mentioned  this job can be scripted\n- As I mentioned this script can be/should be written in  JavaScript.\n- As I mentioned  I should use  modules which can parse Apiary description? In need suggestions how can I implement this in best way.\n. ",
    "MichaelHirn": "Sure and thanks @netmilk for merging it into your docs.\n. ",
    "ddelnano": "This is implemented in the php hooks although I am waiting to merge the PR.  I would like to add this to all the other ones so the functionality is kept consistent across all of the hooks.\n. Yea in my php I use \nphp\nfprintf(STDOUT, \"text to output\");\nflush();\nThat worked for me locally but it does not on Travis.\n. Just made that change and it still is failing.  I don't think its just related to the php buffer output.  For the features/execution_order.feature test the output actually comes from the javascript in dredd and not the php.  There are 3 tests where the output is dependent from my php code and one where it comes from dredd.\n. I realized I did not post a link to the repository.  It is here\n. I appreciate the help!  I came across dredd from using apiaryio at the new startup I am working at and once I saw how awesome it was I had to write php hooks.  Let me know if I can be of any help.  Some of my code is not as readable as I would like it to be which I definitely plan on making cleaner once these tests can pass on Travis.\n. I also opened an issue on aruba's repository.  So far all the suggestions there have not worked but just wanted to post it here. \n. Finally have my tests passing!!!  Check out the issue I linked to above but it was due to the fact that the cucumber tests had the @debug on my Scenario: blocks and I was instructed by an aruba contributor to use @announce instead so that all the output would be flushed properly.  I will be improving the documentation of my repo and will be adding some runnable examples for people wanting to use it and then I will setup a pull request for the Dredd documentation to include my hooks handler.\n. Please let me know if there is anything I can help with to expedite this.  Being my first open source contribution, I am very excited to have this merged in. \n. Hey @netmilk.  Thanks for getting back to me.  Sounds awesome.  Haha thanks.  Yea I want to have some kind of framework agnostic (something really simple like how sinatra could be done in a single file) for people that don't have Laravel or framework X experience.  The idea being that any reasonably experienced php dev no matter their framework experience can wrap their head around the example.\n. Also if I wanted to propose a feature for the dredd-hooks implementations what is the best way of doing that before actually spending time implementing??  A Github issue?\n. Just did.  This is awesome!\n. Ah forgot about the nodejs hooks but same holds true.\n. I was assuming when I opened this that there was going to be some discussion about the request.  The reason I say that is cause I didn't want to incorporate something into the PHP hooks unless the others all had the same feature set.\n. Do you agree with my thinking on that the hooks should have the same feature set???  I also closed it because to allow transactions would be hard cause it would require the user to provide the same database connection that their application is using and so it causes potential issues where users would be seeding the database in one connection and the web app would be accessing the database in another.  Allowing an interface to run migrations before and after tests would be a much better option since it wouldn't require the same connection and still allow the database to be clean between tests.\n. @honzajavorek I just learned go very recently so since I am familiar with the cucumber tests I am gonna give it a try and see where it is currently at.\n. @honzajavorek so to give an update just spent a little bit of time tonight.  The go hooks definitely need some work but I think I should have the cucumber tests passing by the end of the weekend.\n. @honzajavorek I think this should be closed now.\n. I believe the issue is here\n. @netmilk I can't speak for the Go hooks but if this was implemented I would update the php hooks for the new functionality.\n. @netmilk any reason why this hasn't been merged yet?\n. You don't want to use a before hook handler to seed the data that your other hook transaction would populate?\n. Looks dope\n. I am running Babel and I can verify that I don't see the import statements but I do see generators (function *) so something is weird. I'm gonna look into it more today\n. However, I am wondering if I could do the following.  I wrote the php hooks so I understand how the process works but I am struggling to find where to hooks server is in the dredd repo from the minimal searching I did.  I was thinking about just using the pieces of the hooks server inside a new executable file that instead of using #!/usr/bin/env node I could do #!/usr/bin/env babel-node and then in that file create the server.  That would allow dredd to execute it like normal and I would pass the new executable to dredd.yml via the language option\n. Ah I see, I was expecting it to be the same as the other languages hooks.  I believe if it was separate that would solve my issues cause then I could launch the server with babel-node.  Is there a reason the node hooks were not broken off like the other language hooks?\n. If they were broken off like the others than coffeescript/babel/whatever compiled would work like I described.  I could do that if the contribution would be accepted.  Is there any reasons for keeping it the way it is?\n. @netmilk would nodejs hooks be accepted as a contribution?\n. I mean separating the nodejs hooks to their own server like the other ones are.  That way when starting up the server you could use babel-node, or whatever for all the different javascript variants.\nIf it were separate I wouldn't need to have this build step then run dredd I could just use babel-node to run the hooks server.\n. Sorry what I proposed was probably not clear.\nWhat I meant was to develop nodejs hooks that are equivalent to the other ones like the php ones I wrote.  Then instead of using the hooks as an executable the user would use the hooks as a library and write an executable for it that could be executed by babel-node or coffeescript or whatever and dredd would run that executable command to start the server and parse the hooks.  So the command would look like this dredd --language babel-node bin/hooks.js\nDoes that make more sense?\n. That would make the hook usage different between others so maybe not a good idea.  But yea @w-vi's feature seems like it could provide this functionality.\n. Ah I didn't think of that but it works for me.  You definitely need to configure babel, in its newest version it just does nothing by default\n. Yea I got it working too.  Cool well this works just fine for me then, wish I would have thought of that earlier haha.\n. Yea that solves my issue.  I just didn't want to have a build step for my hooks.\n. Thanks for the help\n. @honzajavorek also linking to this to discover my findings after making it a less strict comparison link\n. @honzajavorek Yea I have dredd-hooks-go working properly as of last night.  Will be pushing my changes.  I was still not able to figure out what the root of the problem was for the issue I experienced but the work around to prevent dredd crashing was the to make sure the request body had some data in it.\n. @aledeg I am thinking this is probably a dredd issue.  I am not exactly sure how dredd treats multiple blueprint files but in order for that to work dredd would need to execute all transactions for a given blueprint file together (and not merge them) and also shutdown and restart a new hook server for each blueprint file.\n. Took a look into this some more and I don't think dredd supports wildcards for the blueprint config field.  Someone that contributes to dredd would know more but from what I saw doesn't seem like it is supported.\n. @honzajavorek The PR this depended on is finally merged\n. @honzajavorek deleted my previous comments, cause I thought this was on an issue and not this PR.  Sounds good to me \ud83d\udc4d \n. @pksunkara @honzajavorek I updated the PR addressing the feedback before this get merged, however, I am thinking there might be something that might need addressed first.  Dredd crashes with the Go hooks if the API Blueprint transaction has an empty request body.  See the difference between the Go tests and the template tests\n. Here is an example of the dredd crash, I am going to try and prepare a fix.\n\n. @honzajavorek, @pksunkara  not sure exactly what the deal is with the findings in my previous comments.  I wrote out a full example using a sample go app, goodman, and dredd compiled from this branch and blueprint files that have empty request bodies run fine.  You can see the example here.  Either of you could run the example if you wanted to following the instructions in the Wiki to verify my claims that it works as expected, however, you would need to update the path in the Makefile since I needed to use dredd compiled from this branch (since it uses these changes).\nLet me know what you think.\n. @pksunkara when I developed the php hooks I never ran into this.  I also tried to reproduce it with a real example instead of the cucumber tests (where I was seeing it) and I was unable to do so.  I opened a PR for another crash that I found that indicates a hook server failure ( #511 ).  This would just provide better information to the hook server dev instead of seeing the error cannot read property 'length' of undefined.\n. @pksunkara @honzajavorek when do the pre releases go out?  I would like to merge my example in the goodman repo but since npm's support for installing repos via commit hashes is lacking (coffeescript would not be compiled) I can't merge until this change is in a new release.\n. awesome thanks!\n. Didn't realize that the tag was made but not on master like i thought.\n. yea no problem partially my fault with that hooks delay.  I am looking into that as well\n. I tried doing something like this when using the --only flag.\n\nHowever, the transactions passed to each of my beforeEach hooks has the skip property set to false, which does not allow me to prevent the hooks from running its time consuming operation.\n. I took a look at the code and noticed that the only option is checked after both the beforeEach and before hooks are run and it decides to not run it just before it makes the request.  So it sets the skip property, but at a much later point in execution.\n. @honzajavorek that makes sense.  So in order to understand why I am putting up with this expensive hooks step I am going to detail how I am using Dredd differently in this situation.\nSo previously when I had used Dredd, in the hookfiles I would insert records into the DB and reset the data.  However, what I am trying to do now is use Dredd to not only test the API but also force the devs on this project to maintain a fully complete data set for the application.  So essentially all dredd does in the hooks is start and stop docker containers and when the database container starts up it sucks in a sql dump file that has all the test data.  This is awesome because our api tests can't pass unless we have updated our data set.  The purpose of keeping this dataset current is that this dataset will be used to integration test across all of our micro services.  So basically we will be using a container orchestration tool to create an ephemeral environment to launch all pieces of our infrastructure and each microservice will be using a database container that uses the test data set that I have been describing.  So it allows our API docs to stay up to date and our integration tests to be current.\nSo there are two reasons why I would love this feature.  For running dredd locally, it really only makes sense for our developers to run a few (if not just one) dredd transaction that is related to the feature they are working on because our CI pipeline will run all of them.  However, there is also massive benefit for doing this in CI as well.  Imagine I have a apiblueprint file with 30 transactions and my application is two containers: web app and database.  The way our dredd is run in CI is it is a docker container that can run docker-compose applications.  So if I wanted to, I could launch each dredd container specifying to only run 1/3 of the transactions each and they in term would spawn their own instance of the application and I could have parallel dredd tests since docker containers are so lightweight.  So in this example, I could launch 3 dredd containers, which would spawn 2 more containers each (for a total of 9 containers) with 10 transactions and cut the Dredd test runtime to 1/3 in theory.\n. @netmilk I see you labeled this as a bug?  So does that mean if I were to give implementation a shot it would be accepted?  From @honzajavorek 's previous comments it seemed to me that its current behavior was desired.\n. haha\n@netmilk yea all of that sounds good to me.  I'll have time this weekend to start digging into it.\n. @benneely I started working on this and got a first pass at the post processor done.  Didn't get to try integrating it into dredd.  I am going on vacation until Monday but will work on it once I get back.  I will try to update this issue with my progress and push some stuff once I get closer.\n. @grounded042 have you checked out the complete worked out example in the Go hooks repo?  Also if you had previously used the Go hooks before the made rewrite was done you are using an ~~updated~~ outdated version that must be upgraded. \nDid you install the goodman hook binary to your $GOPATH? And what version of dredd are you using? You must be using 1.1.0-pre.5 or higher, see the example package.json. \nI am willing to bet it is the dredd version since instead of dredd passing your hook binary to goodman it is trying to run it directly which is what dredd does for languages it doesn't know about.\n. No problem, that dredd version is too old. The pre leases for 1.0.11 is too old which is kind of weird because you would think a pre release would come before the non pre one. Did you install from the package.json I pointed to?\nLike I said before if you have an old version all dredd will do is run the --language flag as the command which in this case will just run the go command like you are experiencing. \n. Sorry on Imobile and realize my second sentence did not make sense. Look at the dredd releases on the GitHub page, I was trying to say 1.0.11 is older than 1.0.11-pre.5.\n. @grounded042 I was expecting people to run the example and install dredd through the package.json provided in the example.  I will update the goodman repo to reflect that you must use a prerelease until 1.1.0 is out.\n. @honzajavorek ok cool, well I will still update the docs, but to say that 1.1.0 is required.  But I will wait until that is released.\n. This might help you #391.\n. @honzajavorek does it need to be installed globally?\n. @honzajavorek I keep getting build errors on the npm install when it is trying to build protagonist.  Here is one of the failed jobs.  I originally was using whatever node version travis pre installs (something 0.10.x) but then tried using 5.11.x and still received the same failures.\n. @honzajavorek so I had another PR open on the goodman repo that I tried re running the build (it was failing for a different reason) and now it can't npm install either.  I looked at protagonist and saw they released a new version yesterday and that the current dredd package.json would have installed that version.\n. @honzajavorek I will try using sudo in the travis build but what is weird is how my other build worked previously and now it is failing on the install.\n. @honzajavorek I updated the build with sudo: required and it is still failing on installation, when 2 weeks ago when I was working on the PR it was working fine https://travis-ci.org/snikch/goodman/jobs/142013584 .\nHere is the PR https://github.com/snikch/goodman/pull/8\n. @honzajavorek I updated Goodman to use a global install of dredd.  If there needs to be anymore changes to goodman to make this work let me know.\n. \ud83d\udc4f \n. Try adding this line, I believe you are getting this failure because the default OS does not have a C++11 compiler installed by default.\n. @aledeg what is the problem with the php server??\n. @aledeg ok I see.  So I am thinking that would probably be a concern of Dredd's.  It should properly swallow the server's stdout / stderr in order to print clean dot reporting.\n. @honzajavorek I am thinking that option 3 makes the most sense.  ~~2 is obviously bad from the context of this situation because it is responsible for causing what @aledeg is trying to avoid.~~ Oops did not finish reading all of two and missed the \"silencing\" part.  1  I think would be ok but it might be helpful to enable it during certain debugging times.\n. @aledeg can you give more information about the http request you are trying to send??  What the type of file this is, content type of the req should be, etc.\n. @aledeg the hooks server always JSON encodes the payloads fyi.  https://github.com/ddelnano/dredd-hooks-php/blob/master/src/Server.php#L111-L119\nSo because of that I would expect Dredd to still need to decode the JSON but instead it needs to understand how to treat that data.  Is the point you highlighted where Dredd decodes the json initially from the hooks server?\n. @aledeg what I mean is from the sample hookfile you showed where you add the picture contents to the request body the hook server json encodes your data in this key.  Dredd is then going to take that data and decode the json, which I would assume is correct since I would expect dredd to need to decode the json to get the original image content back.  \nSo I am wondering if that area you identified in Dredd's source is the where Dredd decodes the json from the hooks server since my thinking would be it still needs to do that json decoding to get the original image content back.\nIf that is the area where Dredd decodes it maybe the way the text is encoded in the original json is the problem.\n. @honzajavorek hm I have not seen this before.  Also its not like the php hooks have had any changes to it anytime recently.\n@jackbentley what version of the php hooks are you using?  Can you share you hookfiles?. Can you share your beforeAll?. \ud83d\udc4d\ud83c\udffb. ## Todo\n- [x] Find out impact for existing hook servers\n  - php: compliant on most recent release (1.1.5), prior to that would have been unaffected.\n  - go: would break existing hook servers.\n  - ruby: should be ok ~~(need to verify with test since I'm not confident with my ruby knowledge :) )~~ Update: verified it is good.\n  - python: should be ok -- passes argv to glob which should ignore the new flags (need to verify but I'm more confident than the ruby one)\n  - perl: @ungrim97 can you help out?  Literally know nothing about perl.  Also you might want to checkout this if you haven't seen it already.\n- [x] Finish discussion on if this is what we want.  I like the idea of Dredd being able to discover if hooks support these flags at runtime but this is a much bigger change.. @honzajavorek @w-vi @ungrim97 so looks like all existing hooks servers will not be affected by this change except the Go ones.  How do we want to handle that?  I can get those updated soon but wanted to understand better what the plan was.. But what I mean is do we want to continue down this path?  It's going to cause existing go hook servers problems.  All other hooks seem fine but still. . @honzajavorek I definitely want to avoid option 1 :).  And since the features event seems like alot more work than what we need for now some type of hard coded check will be necessary.  I am going to brainstorm some ideas the rest of today and post back some potential ideas.. @honzajavorek sorry for the long delay, had an unexpected hospital trip but I'm doing much better.\nAnother way we could check the hooks server that I thought of that would be very dumb but get the job done.  We could have dredd try and run the hooks server with the --host and --port arguments and if it fails try it without the --host and --port flags.  The drawback is that unrelated failures will probably fail twice.  For the hardcoded version check on the Go hooks how would we accomplish that?  There is no way to check the version using the go hook binary.. @honzajavorek thanks, things are back to normal now :).\nOne thing I didn't think of for the hardcoded check.  In the next version of the go hooks we could add a command to output the version and then if it doesn't support the version command we can assume that it won't support the --host and --port.. It's going to crash.... Ok. Yea obviously not ideal but there aren't many options unfortunately. This weekend I will have some time I'll give that a shot. And work on getting the go hooks updated to use the new flags. . @honzajavorek we should make sure the hook servers use node > 0.12 in their travis jobs.  I just had both the goodman and php hooks repo break on the way it was installing dredd previously.  And I believe the Travis default is not > 0.12. @honzajavorek doesn't look like it on the latest dredd-hooks-php build that I had to fix a few days ago.\n\n. Here is the link for reference https://travis-ci.org/ddelnano/dredd-hooks-php/jobs/199693011. @honzajavorek anything else that needs updated before this can be merged?. I believe this solves the issue I mentioned here.  @IngmarStein what version of node are you using?. Yea Dredd technically does not support it yet since its not covered by the Travis build.  But thanks for tracking this down before I had a chance to :). @honzajavorek i'm still pretty new to go which is why I didn't have this implemented but this is definitely the right move so thanks @hcliff!. Its probably good to have it in both since the other languages have similar docs but I agree it needs to be thought of when any of the hook servers are updated.. @driesvints it would be helpful to have a tcpdump when things are behaving both normally and abnormally. @driesvints while running the dredd tests you need to capture packets using the following command.\nsudo tcpdump -i lo0 -w capture.pcap -Xnnvvs0 port 61321\nBefore attempting the saving of it though you should make sure you see traffic by omitting some of those flags.\nsudo tcpdump -i lo0 port 61321\nMake sure you see something like this before running the first command.\n\nIf you send me pcap files that captures one timeout and one success test run I'd be happy to take a look (ddelnano@gmail.com).. @driesvints well that is definitely not expected haha.  What does ifconfig show looks like you don't have a loopback interface.. @driesvints oops sorry I realized you are doing this on Circle CI.  Unfortunately I don't think you will be able to tcpdump on a cloud based ci platform.  Are you able to reproduce this on a host you have access to?. @driesvints do you have some type of contract or paid plan with them?  Can you ask them for assistance?  Maybe they can capture a tcpdump for you?  I'm afraid its hard to debug random network issues if you can't snoop on the traffic on the host.\nAlso if you can I would open a support ticket.  The dredd hooks bind to localhost and the error you posted from tcpdump is showing me that there is no lo0 interface,  If this is the case then the kernel is never going to pass packets to the dredd hooks server.. @honzajavorek the default should be $HOME/go if it is not set.  So we just need to provide that as a default.  I can try and submit a patch for that sometime this week.. @jamiehannaford I'm happy to talk through on the other issue you have open on goodman.  Also its probably worth sharing your Dockerfile and any code if possible.  I'm not sure what your app hostname is but you have to be careful about your container networking.  I have done this before using dredd, docker-compose and the js hooks all in the same container and in order to do it the way I wanted I had docker compose to spin up my application and then add the dredd container to the docker-compose network.  But due to the many ways you could be setting this up its very hard to offer help without more details.. @w-vi for attempt 2 you are correct that the hooks server runs on 61321. However, the way the go hooks work is that the hooksfile is also its own server since the same implementation as the php, Ruby and python could not be ported exactly as is. So the main Goodman process will act as a client to hooks. @jamiehannaford are you using go hooks at all? Your docker images are not providing Goodman with any hook files so it's not surprising that attempt 2 is failing with that error because you never provided it any hookfiles.  It's disappointing you don't see a better error message and I forget the context unless I look at the code but I'm pretty confident you must provide a hooksfile.. @jamiehannaford will have to look at the details of what you sent later but if you are unsure of how goodman should be run you should refer to the example in the goodman repo.  As for if goodman supports swagger, goodman doesn't know anything about what the format of the api documentation is.  Dredd handles that.  Goodman is just responsible for running code when events are about to happen.. \ud83d\ude13 really dropped the ball on coming back to #712 . lgtm. @honzajavorek it looks like this is the only occurrence of using a variable like this across transactions (there aren't any in the https://github.com/ddelnano/dredd-hooks-php docs).. @pksunkara the --server option is the command to get the server that will be under test started.  So the command assumes that the ./go-lang-web-server is a go web service that will start a webserver that listens on localhost port 3000.\n. @pksunkara That is not referring to the hook server.\n. @pksunkara the hooks server command gets set here.\n. @pksunkara updated.\n. @pksunkara can you be more specific?  Is this just not clear?\n. @pksunkara awesome thanks for clarifying.  I updated it.\n. Yep, removed it.. Updated both of these.. Yea sorry my rebase to fix the commit message accidentally picked this up.. ",
    "aledeg": "As I mentioned in #622, it could be neat to also have this syntax supported in the --only command line option and in the config file as well.\n. It would be nice to be able to override blueprint and endpoint as well on CLI.\n. I encountered the same problem with different characters. I'm using [ and ] in my URLs for my PHP API.\nI checked the syntax on apiary.io and it is recognized. I checked the syntax with aglio and it is also recognized.\nBut when I use it with dredd, I get the following error:\n\nerror: Compilation error in file 'contacts.apib': Failed to parse URI template: /contacts{?givenName,familyName,state,birthDate[before],birthDate[after],order[givenName],order[familyName],order[birthDate]}\nError: SyntaxError: Expected \"(\", \"*\", \",\", \":\", \"}\" or [a-zA-Z0-9_.%] but \"[\" found.\nerror: Error when processing API description.\n\nHere is an example:\n``` md\nCONTACT API\nGroup Contacts\nContacts Collections [/contacts]\nLists contacts [GET /contacts{?givenName,familyName,state,birthDate[before],birthDate[after],order[givenName],order[familyName],order[birthDate]}]\n\n\nParameters\n\ngivenName: John (string, optional) - Filter by given name\nfamilyName: Smith (string, optional) - Filter by family name\nbirthDate[before]: 2015-01-01 (string, optional) - Filter by birth date\nbirthDate[after]: 2015-01-01 (string, optional) - Filter by birth date\norder[givenName]: desc (string, optional) - Order by given name\norder[familyName]: desc (string, optional) - Order by family name\norder[birthDate]: desc (string, optional) - Order by birth date\n\n\n\nResponse 200 (application/ld+json)\n\nAttributes (object)\n@context: /contexts/Contact\n@id: /contacts\n@type: hydra:PagesCollection\nhydra:totalItems: 1 (number)\nhydra:itemsPerPage: 30 (number)\nhydra:firstPage: \"/contacts\",\nhydra:lastPage: \"/contacts\",\nhydra:member (array[])\n@context: /contexts/Person\n@id: /contacts/1234 (string, required)\n@type: http://schema.org/Person\ngivenName: John (string, required)\nfamilyName: Doe (string, required)\nbirthDate: 1981-09-30 (string, required)\n```\n\n\n\n\n\n\n\nI am currently using dredd 1.5.0\n. I am not sure what happens under the hood. But when I provide multiple blueprint files, with wildcards or not, I have the same result.\nThe blueprints files are loaded since all my actions are tested. The problem is that it looks like the code in the hooks are not executed since I do not have data in my database.\n. In my configuration, I am trying both glob pattern on blueprints and hooks.\nI made a test where I have one blueprint and many hooks (either with glob pattern or full path) and it works fine.\nI made a test where I have multiple blueprints and multiple hooks and it fails. But it has nothing with pairing. I am thinking that none of the hooks are executed in that configuration.\n\nWould anyone be interested to contribute at least failing tests reproducing the issue?\n\nDo you mean an integration test like the one you linked?\n. I'll try, I've never used CoffeeScript. Any recommendation?\n. @honzajavorek after some fighting, I think I have a valid failing test. I hope it helps !\n. @honzajavorek  you're right. I missed the issue #339. Good job. I'm looking forward to use that feature :)\n. @ecordell I wasn't aware of that option. Good catch!\n@honzajavorek Sure! as soon as I can make it work. So far, no luck.\n. I think the dot reporter is not working. Dredd stall when used with that reporter.\n. I am using the dot reporter, but for some reason, the output is not what I am expecting.\nInstead of having something like\n...F..\nI have something like:\n[Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [200]: /dredd.php/book\n.[Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [201]: /dredd.php/book\n.[Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [400]: /dredd.php/book\n.[Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [200]: /dredd.php/book/1\nF[Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [400]: /dredd.php/book/1\nHow should I configure dredd to get the output I'd like?\n. @honzajavorek Thanks!\n. @honzajavorek I use dredd 2.0\nHere is my config file:\nyaml\ndry-run: null\nhookfiles: [tests/dredd/*Hook.php]\nlanguage: vendor/bin/dredd-hooks-php\nsandbox: false\nserver: 'php -S 127.0.0.1:8888 -t web/'\nserver-wait: 3\ninit: true\ncustom: {}\nnames: false\nonly: []\nreporter: dot\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: info\ntimestamp: false\nsilent: false\npath: []\nhooks-worker-timeout: 50000\nhooks-worker-connect-timeout: 15000\nhooks-worker-connect-retry: 500 \nhooks-worker-after-connect-wait: 1000\nhooks-worker-term-timeout: 50000\nhooks-worker-term-retry: 500 \nhooks-worker-handler-host: localhost\nhooks-worker-handler-port: 61321\nblueprint: apiary.apib\nendpoint: 'http://127.0.0.1:8888/app_dredd.php'\nWhen I wrote that ticket, it was with the previous stable version. But I did reproduced the same behavior. It might be linked to my environment though.\nI run it on Ubuntu 16.04, with Bash 4.3.46. I either use Terminator 0.98 or GNOME terminal 3.18.3.\n. @honzajavorek Here are the tests I ran:\n- without hooks: same output\n- change server to http://example.com: it does not work at all\n- change endpoint to http://example.com: I don't see the output anymore.\nIt looks like I need some changes on my end. I'll keep you posted\n. No problem. We all have the same problem in the morning :P\nI replaced 'php -S 127.0.0.1:8888 -t web/' by 'python -m http.server' and it works as expected.\nI need to find out what is logging in the console on my end. But I have no ideas at the moment.\nFYI, I am testing an API written in PHP using Symfony 3 and API platform\n. In my use case, I don't need the output when it's normal. But if there is an error, I want to see it.\nSo I think the way dredd works now is adequate. I have to figure how to change the output in my project.\n. @honzajavorek unfortunately no :( I didn't have the time to investigate. I'll keep you posted though\n. @honzajavorek I found the culprit. It's the PHP server launched by dredd. I need to find how to silent it.\n. @ddelnano Everytime you call the server, it outputs something like [Tue Aug 23 11:51:39 2016] 127.0.0.1:44062 [200]: /dredd.php/book\nYou can try by starting the built-in server with the following command php -S 127.0.0.1:8888 and requesting any file.\n@honzajavorek As I am using Symfony for my developments, I've changed php -S 127.0.0.1:8888 -t web/ by bin/console server:start 127.0.0.1:8888 and it works fine. I think in a non-Symfony environment you have to use a router file with php built-in server.\nYou can have an example here.\nI still have a problem with the output, though.\nIf I keep the default level, I have the following output:\n```\ninfo: Connected to the hook handler, waiting 1s to start testing.\n.....info: Sending SIGTERM to the hooks handler\ncomplete: 5 passing, 0 failing, 0 errors, 0 skipped\ncomplete: Tests took 10321ms\n```\nIf I set the level to warning, I have the following output:\n.....\nI wish I could have something in between, for instance:\n.....\ncomplete: 5 passing, 0 failing, 0 errors, 0 skipped\nMaybe adding a level ci that shows warnings and errors but also the tests summary. That would be really nice when using with travis or other CI systems.\n. @ddelnano @honzajavorek \nI think that option 1 is not good especially during debug sessions.\nI really don't have a preference for the 2 other options as long as there is a switch to swallow everything.\n. @honzajavorek So I made a test where I set the level to complete and I've almost got the output I wanted :)\nNot perfect but quite close. Here is an example:\n```\ninfo: Configuration 'tests/dredd/dredd.yml' found, ignoring other arguments.\n[OK] Web server listening on http://127.0.0.1:8888\n.....\ncomplete: 5 passing, 0 failing, 0 errors, 0 skipped\ncomplete: Tests took 9388ms\n``\n. I also added thequiet` flag to start the Symfony command. Now, I have the following output:\ninfo: Configuration 'tests/dredd/dredd.yml' found, ignoring other arguments.\n.....\ncomplete: 5 passing, 0 failing, 0 errors, 0 skipped\ncomplete: Tests took 9388ms\nWhich is much nicer.\n. @honzajavorek my pleasure. I am glad you reproduced the bug. I was not completely off :)\n. I am using API Blueprint!\n. @ddelnano here is the information you wanted.\n- method used: POST\n- type of file: jpeg image\n- content type: image/*\nHere is the actual image used for the tests:\n\nI know that my api is working because I've tested it with behat and manually. It seems limited to dredd so far.\n. @honzajavorek Any insight about that issue?\n. @honzajavorek I've made some more tests. Here is what I've got now.\n- error message:\nSyntaxError: Unexpected end of JSON input\n  at Object.parse (native)\n  at Socket.<anonymous> (/usr/lib/node_modules/dredd/lib/hooks-worker-client.js:279:34)\n  at emitOne (events.js:96:13)\n  at Socket.emit (events.js:188:7)\n  at readableAddChunk (_stream_readable.js:176:18)\n  at Socket.Readable.push (_stream_readable.js:134:10)\n  at TCP.onread (net.js:548:20)\n- dredd --version output:\ndredd v2.2.3 (Linux 4.4.0-45-generic; x64)\n- cli options:\ndredd --config tests/dredd.yml --level silly\n- dredd.yml content:\nyaml\ndry-run: null\nhookfiles:\n  - tests/Hook.php\nlanguage: vendor/bin/dredd-hooks-php\nsandbox: false\nserver: 'bin/console server:start 127.0.0.1:8888 --force --quiet --env=test'\nserver-wait: 3\ninit: true\ncustom: {}\nnames: false\nonly: []\nreporter:\n  - apiary\n  - dot\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: complete\ntimestamp: false\nsilent: false\npath: []\nhooks-worker-timeout: 50000\nhooks-worker-connect-timeout: 15000\nhooks-worker-connect-retry: 500\nhooks-worker-after-connect-wait: 1000\nhooks-worker-term-timeout: 50000\nhooks-worker-term-retry: 500\nhooks-worker-handler-host: localhost\nhooks-worker-handler-port: 61321\nblueprint: [test.apib]\nendpoint: 'http://127.0.0.1:8888/app_dredd.php'\n- Hook content:\nphp\nHooks::before('Test picture', function (&$transaction) {\n        $transaction->request->body = file_get_contents('dredd/default.jpg');\n});\n- Apib content:\n``` md\nAdd picture [POST /picture]\n\n\nRequest (image/*)\n\n\nResponse 204\n```\n\n\nFor what I understand, it looks like dredd is expecting JSON in the request. But obviously, I didn't provide some since I am pushing an image.\nDigging in the code, I found this. It probably is the root of the problem.\n@ddelnano I think that dredd-hook-php is not faulty.\n. @ddelnano I wasn't aware of that.\nI am not sure I understand your question. Could you please explain what you mean?\n. @ddelnano I see what you mean.\nFor what I understand in Coffee, it's the location where the server is decoding the input from the hook. But I am not 100% sure.\n. @honzajavorek My bad! I didn't see it.\n. @honzajavorek sure\n. ",
    "JViolante": "Hi,\nthis feature (wildcards in transaction names) is implemented only for the php hooks? or is already available for the other languages like node.js(JavaScript)? \nThanks!\nJo\u00e3o\n. ",
    "sdepold": ":clap: got it working like this (not very smart but works):\n``` js\n'use strict';\nvar hooks = require('hooks');\nvar delay = 1000/6.0; // Allow 6 reqs/sec\nhooks.afterEach(function (transaction, done) {\n  setTimeout(done, delay);\n});\n```\nIdeally one would calculate the time that the tests were taking in the current second but this is quick and dirty solution which works good enough for me :dancer: \n. ",
    "RobbieMcKinstry": "Any update on this?\n. ",
    "stianborgesen": "+1\n. I just found out you MUST use regex special characters for string beginning and end for this to work, e.g. \"^a$\"\nNow the Dredd test fails.\n. ",
    "joaosa": "@netmilk I am also experiencing this. Any news? :)\n. @honzajavorek yes that seems to be the case. Must've mixed the issues. Any updates on this? :)\n. ",
    "mrname": "Does #767 also address this issue for swagger specifications? I would assume so, since I am using swagger 2.0 which utilizes json schema draft 4.\nOnly asking because I just installed from master and seem to be having this problem still.\nEDIT: Scratch that, it was an error on my end where the dredd CLI command was still looking at the build installed from npm. Master seems to be working fine, thank you!. ",
    "luizs81": "I'm facing the same situation in Python side. \nYeah, it's 2016 now but still waiting for this feature. \n. ",
    "coagulant": "@honzajavorek sorry, but no, not using dredd anymore\n. ",
    "revett": "@honzajavorek Have you come back to this feature yet?. @honzajavorek Ah okay \ud83d\udc4dThat seems like quite a large piece of work but this issue is a simple fix. If I put in a PR for this, would it be merged before #765?. ",
    "snikch": "Here's the feature and output. The issue almost looks to be with the server call and expectation rather than the hook handler. From what I can see I appear to be getting the correct results from the ordering test output. Also, I'm not printing to stdout but sending on the socket, so I don't think it will be a syncing issue.\n``` cucumber\nFeature: Execution order\nBackground:\n    Given I have \"go\" command installed\n    And I have \"dredd\" command installed\n    And a file named \"server.rb\" with:\n      \"\"\"\n      require 'sinatra'\n      get '/message' do\n        \"Hello World!\\n\\n\"\n      end\n      \"\"\"\nAnd a file named \"apiary.apib\" with:\n  \"\"\"\n  # My Api\n  ## GET /message\n  + Response 200 (text/html;charset=utf-8)\n      Hello World!\n  \"\"\"\n\n@debug\n  Scenario:\n    Given a file named \"../../hookfile.go\" with:\n    \"\"\"\n    package main\n    import \"github.com/snikch/goodman\"\n    // NewTestRunner creates a test runner\n    func NewTestRunner() goodman.Runner {\n        runner := goodman.NewRunner()\n        runner.BeforeAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"before all modification\")\n        })\n        runner.BeforeEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each modification\")\n        })\n        runner.Before(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before modification\")\n        })\n        runner.BeforeEachValidation(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each validation modification\")\n        })\n        runner.BeforeValidation(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before validation modification\")\n        })\n        runner.After(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after modification\")\n        })\n        runner.AfterEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after each modification\")\n        })\n        runner.AfterAll(func(t []*goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"after all modification\")\n        })\n        return runner\n    }\n    \"\"\"\n    When I compile to \"hookfile-go\"\n    And I set the environment variables to:\n      | variable                       | value      |\n      | TEST_DREDD_HOOKS_HANDLER_ORDER | true       |\nWhen I run `dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles *.rb`\nThen the exit status should be 0\nThen the output should contain:\n  \"\"\"\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  \"\"\"\n\n```\n``` sh\nFeature: Execution order\nBackground:                            # features/execution_order.feature:3\n      Killing server...\n      Killing handler...\n    Given I have \"go\" command installed  # features/step_definitions/dredd_steps.rb:5\n    And I have \"dredd\" command installed # features/step_definitions/dredd_steps.rb:5\n    And a file named \"server.rb\" with:   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      require 'sinatra'\n      get '/message' do\n        \"Hello World!\\n\\n\"\n      end\n      \"\"\"\n    And a file named \"apiary.apib\" with: # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      # My Api\n      ## GET /message\n      + Response 200 (text/html;charset=utf-8)\n          Hello World!\n      \"\"\"\n@debug\n  Scenario:                                                                                                                        # features/execution_order.feature:23\n    Given a file named \"../../hookfile.go\" with:                                                                                   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      package main\n      import \"github.com/snikch/goodman\"\n      // NewTestRunner creates a test runner\n      func NewTestRunner() goodman.Runner {\n        runner := goodman.NewRunner()\n        runner.BeforeAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"before all modification\")\n        })\n        runner.BeforeEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each modification\")\n        })\n        runner.Before(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before modification\")\n        })\n        runner.BeforeEachValidation(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each validation modification\")\n        })\n        runner.BeforeValidation(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before validation modification\")\n        })\n        runner.After(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after modification\")\n        })\n        runner.AfterEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after each modification\")\n        })\n        runner.AfterAll(func(t []*goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"after all modification\")\n        })\n        return runner\n      }\n      \"\"\"\n    When I compile to \"hookfile-go\"                                                                                                # features/step_definitions/dredd_steps.rb:44\n    And I set the environment variables to:                                                                                        # aruba-0.6.2/lib/aruba/cucumber.rb:79\n      | variable                       | value |\n      | TEST_DREDD_HOOKS_HANDLER_ORDER | true  |\n    When I run dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles *.rb # aruba-0.6.2/lib/aruba/cucumber.rb:93\n    Then the exit status should be 0                                                                                               # aruba-0.6.2/lib/aruba/cucumber.rb:197\n      Exit status was 1 but expected it to be 0. Output:\n  Starting server with command: ruby server.rb\n  Waiting 3 seconds for server command to start...\n  [2015-09-01 08:25:15] INFO  WEBrick 1.3.1\n  [2015-09-01 08:25:15] INFO  ruby 2.2.3 (2015-08-18) [x86_64-darwin14]\n  == Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from WEBrick\n  [2015-09-01 08:25:15] INFO  WEBrick::HTTPServer#start: pid=97571 port=4567\n  warn: Parser warning in file './apiary.apib': (10) message-body asset is expected to be a pre-formatted code block, separate it by a newline and indent every of its line by 8 spaces or 2 tabs on line 3\n  info: Beginning Dredd testing...\n  Spawning `../../hookfile-go` hooks handler\n  Hook handler stdout: Starting\n\n  127.0.0.1 - - [01/Sep/2015:08:25:20 +1200] \"GET /message HTTP/1.1\" 200 14 0.0127\n  localhost - - [01/Sep/2015:08:25:20 NZST] \"GET /message HTTP/1.1\" 200 14\n  - -> /message\n  fail: undefined duration: 69ms\n  FOR TESTING ONLY\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  FOR TESTING ONLY\n  info: Displaying failed tests...\n  fail: undefined duration: 69ms\n  fail: statusCode: Status code is not 'undefined'\n\n  request: \n  body:\n\n  Headers: [object Object]\n  uri: /message\n  method: GET\n\n\n  actual: \n  statusCode: 200\n  headers: \n      content-type: text/html;charset=utf-8\n      content-length: 14\n      x-xss-protection: 1; mode=block\n      x-content-type-options: nosniff\n      x-frame-options: SAMEORIGIN\n      server: WEBrick/1.3.1 (Ruby/2.2.3/2015-08-18)\n      date: Mon, 31 Aug 2015 20:25:20 GMT\n      connection: close\n\n  body: \n  Hello World!\n\n\n\n\n\n  complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total\n  complete: Tests took 2129ms\n\n   (RSpec::Expectations::ExpectationNotMetError)\n  features/execution_order.feature:64:in `Then the exit status should be 0'\nThen the output should contain:                                                                                                # aruba-0.6.2/lib/aruba/cucumber.rb:156\n  \"\"\"\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  \"\"\"\n\nFailing Scenarios:\ncucumber features/execution_order.feature:23 # Scenario: \n1 scenario (1 failed)\n10 steps (1 failed, 1 skipped, 8 passed)\n0m10.205s\n``\n. I'm not altering thetransactionobject apart from the requiredhooks_modifications` key.\nI'm confused by these lines in the output, it almost feels to me like the code is trying to assert the actual 200 response against an expected undefined response.\nfail: undefined duration: 40ms\n      fail: statusCode: Status code is not 'undefined'\nUpdated output.\n``` sh\nFeature: Execution order\nBackground:                            # features/execution_order.feature:3\n      Killing server...\n      Killing handler...\n    Given I have \"go\" command installed  # features/step_definitions/dredd_steps.rb:5\n    And I have \"dredd\" command installed # features/step_definitions/dredd_steps.rb:5\n    And a file named \"server.rb\" with:   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      require 'sinatra'\n      get '/message' do\n        \"Hello World!\\n\\n\"\n      end\n      \"\"\"\n    And a file named \"apiary.apib\" with: # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      # My Api\n      ## GET /message\n      + Response 200 (text/html;charset=utf-8)\n          Hello World!\n      \"\"\"\n@announce\n  Scenario:                                                                                                                        # features/execution_order.feature:23\n    Given a file named \"../../hookfile.go\" with:                                                                                   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      package main\n      import \"github.com/snikch/goodman\"\n      // NewTestRunner creates a test runner\n      func NewTestRunner() goodman.Runner {\n        runner := goodman.NewRunner()\n        runner.BeforeAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"before all modification\")\n        })\n        runner.BeforeEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each modification\")\n        })\n        runner.Before(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before modification\")\n        })\n        runner.BeforeEachValidation(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each validation modification\")\n        })\n        runner.BeforeValidation(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before validation modification\")\n        })\n        runner.After(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after modification\")\n        })\n        runner.AfterEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after each modification\")\n        })\n        runner.AfterAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"after all modification\")\n        })\n        return runner\n      }\n      \"\"\"\n    When I compile to \"hookfile-go\"                                                                                                # features/step_definitions/dredd_steps.rb:44\n    And I set the environment variables to:                                                                                        # aruba-0.6.2/lib/aruba/cucumber.rb:79\n      $ export TEST_DREDD_HOOKS_HANDLER_ORDER=\"true\"\n      | variable                       | value |\n      | TEST_DREDD_HOOKS_HANDLER_ORDER | true  |\n    When I run dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles *.rb # aruba-0.6.2/lib/aruba/cucumber.rb:93\n      $ cd /Users/mal/Code/src/github.com/snikch/goodman/cucumber/tmp/aruba\n      $ dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles .rb\n      Starting server with command: ruby server.rb\n      Waiting 3 seconds for server command to start...\n      [2015-09-01 09:02:05] INFO  WEBrick 1.3.1\n      [2015-09-01 09:02:05] INFO  ruby 2.2.3 (2015-08-18) [x86_64-darwin14]\n      == Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from WEBrick\n      [2015-09-01 09:02:05] INFO  WEBrick::HTTPServer#start: pid=99548 port=4567\n      warn: Parser warning in file './apiary.apib': (10) message-body asset is expected to be a pre-formatted code block, separate it by a newline and indent every of its line by 8 spaces or 2 tabs on line 3\n      info: Beginning Dredd testing...\n      Spawning ../../hookfile-go hooks handler\n      Hook handler stdout: Starting\n  127.0.0.1 - - [01/Sep/2015:09:02:09 +1200] \"GET /message HTTP/1.1\" 200 14 0.0066\n  localhost - - [01/Sep/2015:09:02:09 NZST] \"GET /message HTTP/1.1\" 200 14\n  - -> /message\n  fail: undefined duration: 40ms\n  FOR TESTING ONLY\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  FOR TESTING ONLY\n  info: Displaying failed tests...\n  fail: undefined duration: 40ms\n  fail: statusCode: Status code is not 'undefined'\n\n  request: \n  body:\n\n  Headers: [object Object]\n  uri: /message\n  method: GET\n\n\n  actual: \n  statusCode: 200\n  headers: \n      content-type: text/html;charset=utf-8\n      content-length: 14\n      x-xss-protection: 1; mode=block\n      x-content-type-options: nosniff\n      x-frame-options: SAMEORIGIN\n      server: WEBrick/1.3.1 (Ruby/2.2.3/2015-08-18)\n      date: Mon, 31 Aug 2015 21:02:09 GMT\n      connection: close\n\n  body: \n  Hello World!\n\n\n\n\n\n  complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total\n  complete: Tests took 2077ms\n\nThen the exit status should be 0                                                                                               # aruba-0.6.2/lib/aruba/cucumber.rb:197\n  Exit status was 1 but expected it to be 0. Output:\n\n  Starting server with command: ruby server.rb\n  Waiting 3 seconds for server command to start...\n  [2015-09-01 09:02:05] INFO  WEBrick 1.3.1\n  [2015-09-01 09:02:05] INFO  ruby 2.2.3 (2015-08-18) [x86_64-darwin14]\n  == Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from WEBrick\n  [2015-09-01 09:02:05] INFO  WEBrick::HTTPServer#start: pid=99548 port=4567\n  warn: Parser warning in file './apiary.apib': (10) message-body asset is expected to be a pre-formatted code block, separate it by a newline and indent every of its line by 8 spaces or 2 tabs on line 3\n  info: Beginning Dredd testing...\n  Spawning `../../hookfile-go` hooks handler\n  Hook handler stdout: Starting\n\n  127.0.0.1 - - [01/Sep/2015:09:02:09 +1200] \"GET /message HTTP/1.1\" 200 14 0.0066\n  localhost - - [01/Sep/2015:09:02:09 NZST] \"GET /message HTTP/1.1\" 200 14\n  - -> /message\n  fail: undefined duration: 40ms\n  FOR TESTING ONLY\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  FOR TESTING ONLY\n  info: Displaying failed tests...\n  fail: undefined duration: 40ms\n  fail: statusCode: Status code is not 'undefined'\n\n  request: \n  body:\n\n  Headers: [object Object]\n  uri: /message\n  method: GET\n\n\n  actual: \n  statusCode: 200\n  headers: \n      content-type: text/html;charset=utf-8\n      content-length: 14\n      x-xss-protection: 1; mode=block\n      x-content-type-options: nosniff\n      x-frame-options: SAMEORIGIN\n      server: WEBrick/1.3.1 (Ruby/2.2.3/2015-08-18)\n      date: Mon, 31 Aug 2015 21:02:09 GMT\n      connection: close\n\n  body: \n  Hello World!\n\n\n\n\n\n  complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total\n  complete: Tests took 2077ms\n\n   (RSpec::Expectations::ExpectationNotMetError)\n  features/execution_order.feature:64:in `Then the exit status should be 0'\nThen the output should contain:                                                                                                # aruba-0.6.2/lib/aruba/cucumber.rb:156\n  \"\"\"\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  \"\"\"\n\nFailing Scenarios:\ncucumber features/execution_order.feature:23 # Scenario: \n1 scenario (1 failed)\n10 steps (1 failed, 1 skipped, 8 passed)\n0m10.050s\n```\n. Ah, awesome I got it. So I wasn't unmarshalling all of the transaction fields, which in turn weren't returning them on the socket, so Dredd was losing information it needed. Doh!\n``` sh\nFeature: Execution order\nBackground:                            # features/execution_order.feature:3\n      Killing server...\n      Killing handler...\n    Given I have \"go\" command installed  # features/step_definitions/dredd_steps.rb:5\n    And I have \"dredd\" command installed # features/step_definitions/dredd_steps.rb:5\n    And a file named \"server.rb\" with:   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      require 'sinatra'\n      get '/message' do\n        \"Hello World!\\n\\n\"\n      end\n      \"\"\"\n    And a file named \"apiary.apib\" with: # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      # My Api\n      ## GET /message\n      + Response 200 (text/html;charset=utf-8)\n          Hello World!\n      \"\"\"\n@announce\n  Scenario:                                                                                                                        # features/execution_order.feature:23\n    Given a file named \"../../hookfile.go\" with:                                                                                   # aruba-0.6.2/lib/aruba/cucumber.rb:29\n      \"\"\"\n      package main\n      import \"github.com/snikch/goodman\"\n      // NewTestRunner creates a test runner\n      func NewTestRunner() goodman.Runner {\n        runner := goodman.NewRunner()\n        runner.BeforeAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"before all modification\")\n        })\n        runner.BeforeEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each modification\")\n        })\n        runner.Before(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before modification\")\n        })\n        runner.BeforeEachValidation(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before each validation modification\")\n        })\n        runner.BeforeValidation(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"before validation modification\")\n        })\n        runner.After(\"/message > GET\", func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after modification\")\n        })\n        runner.AfterEach(func(t goodman.Transaction) {\n            t.AddTestOrderPoint(\"after each modification\")\n        })\n        runner.AfterAll(func(t []goodman.Transaction) {\n            t[0].AddTestOrderPoint(\"after all modification\")\n        })\n        return runner\n      }\n      \"\"\"\n    When I compile to \"hookfile-go\"                                                                                                # features/step_definitions/dredd_steps.rb:44\n    And I set the environment variables to:                                                                                        # aruba-0.6.2/lib/aruba/cucumber.rb:79\n      $ export TEST_DREDD_HOOKS_HANDLER_ORDER=\"true\"\n      | variable                       | value |\n      | TEST_DREDD_HOOKS_HANDLER_ORDER | true  |\n    When I run dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles *.rb # aruba-0.6.2/lib/aruba/cucumber.rb:93\n      $ cd /Users/mal/Code/src/github.com/snikch/goodman/cucumber/tmp/aruba\n      $ dredd ./apiary.apib http://localhost:4567 --server \"ruby server.rb\" --language ../../hookfile-go --hookfiles .rb\n      Starting server with command: ruby server.rb\n      Waiting 3 seconds for server command to start...\n      [2015-09-02 05:56:21] INFO  WEBrick 1.3.1\n      [2015-09-02 05:56:21] INFO  ruby 2.2.3 (2015-08-18) [x86_64-darwin14]\n      == Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from WEBrick\n      [2015-09-02 05:56:21] INFO  WEBrick::HTTPServer#start: pid=6917 port=4567\n      warn: Parser warning in file './apiary.apib': (10) message-body asset is expected to be a pre-formatted code block, separate it by a newline and indent every of its line by 8 spaces or 2 tabs on line 3\n      info: Beginning Dredd testing...\n      Spawning ../../hookfile-go hooks handler\n      Hook handler stdout: Starting\n  127.0.0.1 - - [02/Sep/2015:05:56:25 +1200] \"GET /message HTTP/1.1\" 200 14 0.0075\n  localhost - - [02/Sep/2015:05:56:25 NZST] \"GET /message HTTP/1.1\" 200 14\n  - -> /message\n  pass: undefined duration: NaNms\n  FOR TESTING ONLY\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  FOR TESTING ONLY\n  complete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total\n  complete: Tests took 2112ms\n\nThen the exit status should be 0                                                                                               # aruba-0.6.2/lib/aruba/cucumber.rb:197\nThen the output should contain:                                                                                                # aruba-0.6.2/lib/aruba/cucumber.rb:156\n  \"\"\"\n  0 before all modification\n  1 before each modification\n  2 before modification\n  3 before each validation modification\n  4 before validation modification\n  5 after modification\n  6 after each modification\n  7 after all modification\n  \"\"\"\n\n1 scenario (1 passed)\n10 steps (10 passed)\n0m10.035s\n```\n. Hey @netmilk. I've pushed up what I've got so far here: https://github.com/snikch/goodman\nI'm just working through a project getting them working, and everything seems to be working ok, with a couple of fixes I've got that haven't been pushed up yet. I'll ping you back here once it's all stable and I'm comfortable.\nCheers\n. Will dredd handle two responses to an event with the same UUID?\n. Oh, I misinterpreted how you described  the Ruby client handling the request. So they run both callbacks and then return the single response - got it. I can do this in the Go handler too.\nCheers\n. Makes sense to me \ud83d\udc4c . Makes sense to me.. ",
    "earnaway": "Thanks for your reply. Even though it's a beta feature, it's still very useful and happy to use and test it out. Do you say it's fixed now? Not sure if I can see the changes? I'm using php hook handler, but my slow test is one which registers a user on facebook, processes it and then deletes the user. Sometimes that takes a bit more than 5 seconds and fails. All other hooks are super quick. For us, the abilty to set the timeout would be excellent.\n. Sounds great, thanks. Will fork it for now until the update is pushed. Appreciate it.\n. ",
    "hobofan": "+1 I am also currently using a fork with an increased timeout. My ruby hooks have to load a whole Rails environment to correctly do database cleaning between tests.\n. This was resolved in #842.. Could probably be done with remark + a new rule. https://github.com/davidtheclark/remark-lint-no-dead-urls looks like a good starting point.. > However, I already asked for the new image with Rust logo added\u00a0\ud83d\ude09\nThanks! :). Not yet. After opening this PR, the first thing I did was integrating the dredd hooks template test suite and get it running, but I haven't set up Travis for it yet. Will do so ASAP.. @honzajavorek \nI added Travis CI with the test harness in https://github.com/hobofan/dredd-hooks-rust/pull/6.. \ud83c\udf89  Yay! Thanks @honzajavorek and @tjerabek for the smooth process! :). I'm not in a rush ;). > I mean - it might be a bug in Dredd, not in docs \ud83d\ude31 I need to verify that part.\nI took that bit of arcane knowledge from the golang implementation.\nFixing that bug would very certainly break the Go and Rust implementations. Considering that this would be another breaking change besides https://github.com/apiaryio/dredd/pull/712#issuecomment-281220810, I feel that there is a need for introducing versioning of the hook handling API to allow for a more robust API evolvement in the future, but thats a topic for its own issue... \ud83d\ude05 . I saw #269, but didn't find #271, which is definitely a duplicate, so I'll close this now.. @honzajavorek The Rust hooks are fine there. As of now, Transactions are parsed as a pretty loosely structured JSON type, so changes to the structure or unknown fields won't easily break it.. ",
    "borekb": "I'm seeing this error trying to install Dredd on Windows:\n\nAm I doing something stupid or is this worth of a new issue?\n. @honzajavorek Thanks, I've created a new issue here: https://github.com/apiaryio/dredd/issues/659\n. For the record, on my laptop where it all works fine, I've got Visual C++ Build Tools installed. Not sure about the home PC where I saw the errors above, can't check it at the moment.\n. Should the C++ Build Tools linked above suffice? I'm hesitant to install the full Visual Studio (even the Express edition is large) on my PC.\n. @honzajavorek Thanks, I understand, just the user experience is not very good :) Perhaps the post-installation message could mention this, or the entire C++ compilation process could be wrapped in something like \"try/catch\" (if npm allows that, I don't know). Or the entire native package could be dropped if it's not significantly faster than JS :) (Hello, @klokane!)\n. ",
    "justinabrahms": "I'm having some difficulty with the workaround. Can someone validate that this is roughly what you guys were expecting?\n``` python\n@hooks.before_all\ndef make_moudle_price_nullable(transactions):\n    for t in transactions:\n        try:\n            schema = json.loads(t['expected']['bodySchema'])\n            schema['nullable'] = ['price_per_seat_cents']\n            t['expected']['bodySchema'] = json.dumps(schema)\n        except KeyError:\n            pass\n```\nIt still fails with the error fail: body: At '/price_per_seat_cents' Invalid type: null (expected number). I'm using dredd @ 1.0.1.  I've also tried making expected.bodySchema.price_per_seate_cents.type = 'number,nullable' and it didn't seem to work.\nYou can find the offending code at https://github.com/mitodl/ccxcon/tree/project-skeleton   The relevant files are apiary.apib and apiary_hooks.py in the root of the repository. Full failure below.\n``\nConfiguration dredd.yml found, ignoring other arguments.\ninfo: Using apiary reporter.\nwarn: Apiary reporter environment variable APIARY_API_KEY or APIARY_API_NAME not defined.\ninfo: Beginning Dredd testing...\nSpawningpython` hooks handler\nHook handler stdout: Starting Dredd Python hooks handler\nHook handler stderr: apiary_hooks.py:1: RuntimeWarning: Parent module 'apiary_hooks' not found while handling absolute import\n  import json\napiary_hooks.py:2: RuntimeWarning: Parent module 'apiary_hooks' not found while handling absolute import\n  import os\napiary_hooks.py:4: RuntimeWarning: Parent module 'apiary_hooks' not found while handling absolute import\n  import django\napiary_hooks.py:5: RuntimeWarning: Parent module 'apiary_hooks' not found while handling absolute import\n  import dredd_hooks as hooks\napiary_hooks.py:10: RuntimeWarning: Parent module 'apiary_hooks' not found while handling absolute import\n  from courses.models import Course, Module\npass: GET /api/v1/coursexs/ duration: NaNms\npass: POST /api/v1/coursexs/ duration: NaNms\npass: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ duration: NaNms\npass: DELETE /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ duration: NaNms\nskip: PATCH /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/\npass: PUT /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ duration: NaNms\npass: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/ duration: NaNms\nfail: POST /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/ duration: 57ms\nskip: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1db1a8439cbf4a8f8c395ad63fb43e8a/\nskip: DELETE /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1db1a8439cbf4a8f8c395ad63fb43e8a/\nskip: PATCH /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1db1a8439cbf4a8f8c395ad63fb43e8a/\nskip: PUT /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1db1a8439cbf4a8f8c395ad63fb43e8a/\nskip: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs\nskip: POST /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs\nskip: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs/bcfa43b4\nskip: DELETE /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs/bcfa43b4\nskip: PATCH /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs/bcfa43b4\nskip: PUT /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/ccxs/bcfa43b4\nskip: GET /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules\nskip: POST /api/v1/ccxs/7e0e52d0386411df81ce001b631bdd31/modules/bcfa43b4\nskip: DELETE /api/v1/ccxs/7e0e52d0386411df81ce001b631bdd31/modules/bcfa43b4\ninfo: Displaying failed tests...\nfail: POST /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/ duration: 57ms\nfail: body: At '/price_per_seat_cents' Invalid type: null (expected number)\nrequest: \nbody: \n{\n  \"title\": \"Introduction to Quantum Bits\",\n  \"subchapters\": [\n    \"Quarks and Similar things\",\n    \"Things that are not quarks\"\n  ]\n}\nheaders: \n    Content-Length: 140\n    Content-Type: application/json\n    User-Agent: Dredd/1.0.1 (Linux 3.19.0-23-generic; x64)\nuri: /api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/\nmethod: POST\nexpected: \nbody: \n{\n  \"uuid\": \"1140283aa1b24f5e895e97a76a339040\",\n  \"title\": \"Introduction to Quantum Bits\",\n  \"price_per_seat_cents\": null,\n  \"subchapters\": [],\n  \"course\": \"http://localhost:8000/api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/\",\n  \"url\": \"/api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1140283aa1b24f5e895e97a76a339040/\"\n}\nheaders: \n    Content-Type: application/json\n    Location: /coursexs/7e0e52d0386411df81ce001b631bdd31/modules/{uuid}/\nbodySchema: {\"$schema\": \"http://json-schema.org/draft-04/schema#\", \"required\": [\"price_per_seat_cents\"], \"type\": \"object\", \"properties\": {\"uuid\": {\"type\": \"string\"}, \"title\": {\"type\": \"string\"}, \"url\": {\"type\": \"string\", \"description\": \"url of the module\"}, \"price_per_seat_cents\": {\"type\": \"number\", \"description\": \"price in cents to avoid poor decimal support\"}, \"course\": {\"type\": \"string\", \"description\": \"url of the parent course\"}, \"subchapters\": {\"type\": \"array\"}}, \"nullable\": [\"price_per_seat_cents\"]}\nstatusCode: 201\nactual: \nbody: \n{\n  \"uuid\": \"1143d755c5e547d39a715c17460ddd76\",\n  \"title\": \"Introduction to Quantum Bits\",\n  \"subchapters\": [\n    \"Quarks and Similar things\",\n    \"Things that are not quarks\"\n  ],\n  \"course\": \"http://localhost:8000/api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/\",\n  \"price_per_seat_cents\": null,\n  \"url\": \"/api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1143d755c5e547d39a715c17460ddd76/\"\n}\nheaders: \n    vary: Accept, Cookie\n    server: WSGIServer/0.1 Python/2.7.9\n    location: http://localhost:8000/api/v1/coursexs/7e0e52d0386411df81ce001b631bdd31/modules/1143d755c5e547d39a715c17460ddd76/\n    allow: GET, POST, HEAD, OPTIONS\n    date: Fri, 06 Nov 2015 19:43:01 GMT\n    x-frame-options: SAMEORIGIN\n    content-type: application/json\nstatusCode: 201\ncomplete: 6 passing, 1 failing, 0 errors, 14 skipped, 21 total\ncomplete: Tests took 5098ms\nHook handler closed with status: null\ncomplete: See results in Apiary at: https://app.apiary.io/public/tests/run/89718e6a-bf63-450f-8875-f18c009be39e\n```\n. Just wanted to update that this did in fact solve my issue. Thank you, @kylef!\n. You can use nullable, but you have to do it in your dredd testcase. It looks something like this:\nhttps://github.com/mitodl/ccxcon/commit/a999c12d80e5cbc3e3dd00140aa2f0c3ad2edae5#diff-e2c3cc6906fca70b577ef650a4fdcf54R29\n. @w-vi: This all happens in Docker, a virtualization mechanism. It works in linux, both locally and on travis. It does not work on OS X. This points me to networking issues rather than issues with the hooks themselves. \nThe command you posted produces no output on linux, osx, or docker (using both osx and linux as hosts).\n. Yes, the failure is with linux guest (via virtualbox) and OSX as the host\nOS. Everything is in the docker instance. I'm mostly in need of information\nabout how the system looks for the underlying hooks implementation, so I\ncan trace it through docker's routing mechanisms.\nOn Tue, Jan 12, 2016 at 4:15 PM, Vilibald notifications@github.com wrote:\n\nIC, so on OSX it runs in docker too? Well than it is more of the docker on\nOSX issue, I have never tried it in docker on OSX, can you please describe\nin more detail the setup, is it that hooks are local and dredd in docker or\nhow is it? Docker on OSX is a VirtualBox VM and the networking is different\na lot, like binding to 0.0.0.0 etc so it very well maybe some of this\nsort.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/348#issuecomment-171056868.\n. If you think you have a fix and you have some experience with docker + osx, you should be able to reproduce the problem here: https://github.com/mitodl/ccxcon/issues/83. Happy to walk you through the problem on our end if you need a reproducable test case.\n. \n",
    "nicolasiensen": "I know that Swagger doesn't support nullable yet, but is there any workaround to define nullable properties in Swagger in a way that Dredd can resolve?. ",
    "fungjj92": "@nicolasiensen did you get null to work for Swagger? Running into it now. Update: Got it to work with:\ntype: [string, 'null']\nhttp://stackoverflow.com/questions/38139657/nullable-fields-in-swagger-on-node-js/38140597#38140597. ",
    "synthecypher": "For those who just want there tests to work when a response returns null for a field just change the type in the specification from.\nyaml\n      id:\n        type: integer\n        description: The ID of something.\n        minimum: 0\nTo the following.\nyaml\n      id:\n        type:\n          - integer\n          - 'null'\n        description: The ID of something.\n        minimum: 0\nYour Dredd tests should now accept null for the field.\nEDIT: Don't do this although it passes validation its technically not valid and breaks tools like swagger-codegen \nThe x-nullable extension attribute is the way to go, I just need to find I way to make the tests pass in the same way it does when defining type: ['integer', null].. ",
    "scythargon": "@synthecypher Hi! Have you found it? Regarding\n\nThe x-nullable extension attribute is the way to go, I just need to find I way to make the tests pass in the same way it does when defining type: ['integer', null].\n\nI'm struggling with the same issue currently. ",
    "InfopactMLoos": "Since the fury-adapter-swagger issue got solved (https://github.com/apiaryio/fury-adapter-swagger/issues/112) when can we expect this to be available in Dredd? . I must be missing something, I \n\nupdated to dredd 5.1.6,\nadded the x-nullable attribute with value true\n\nBut I still get an error:\n\nbody: At '/customer_reference' Invalid type: null (expected string)\n\nThis is my swagger definition for the property:\n\"customer_reference\": {\n  \"type\": \"string\",\n  \"description\": \"(Optional) reference tag for customer\",\n  \"x-nullable\": true\n}\nI thought this would work but did I forget or misunderstood something? . Ah ok that explains it, thanks for the quick response and work. I will await the fix, let me know if I can be of any help.. ",
    "tobiashm": "I've started a pull-request #286 \n. Okay. Didn't look at closed PR before starting this.\nI'll look more into the differences, and where they're going with Dredd.\nI still think this needs to happen; Dredd will currently not build with Node 4, due to the version of protagonist that Drafter.js depends on.\nHopefully some of the apiary.io folks will help out :-)\n. @kylef good news! Thanks\n. ",
    "vsejed": "Hi, I used v4.2.1... with node v0.10.40 all is ok... \nthank you very much\n. ",
    "aurelienappere": "Hi @w-vi,\nThanks for your answer here that helped me :-)\nDo you have any plan on supporting node 5?\n. @w-vi Sorry, just saw that you are working on: issue #292\n. ",
    "o5": "Support for node.js 4.x.x is on the way\nWhen? :)\n. Hello @honzajavorek, \nI would like to discover slowness of Dredd testing in our CI pipeline. We are using dockerized version (apiaryio/dredd:2.2.5) but I think there is JS parser used. Or not?\nThere is a response from Dredd:\n```\n$ dredd /blueprint.apib http://api --hookfiles /hook.js\n// there is about 40sec sleep\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: 0=/hook.js\npass: PUT /v1/users/4 duration: 41ms\npass: PUT /v1/users/4 duration: 38ms\n....\ncomplete: 76 passing, 0 failing, 0 errors, 0 skipped, 76 total\ncomplete: Tests took 11124ms\n```\nThank you!. ",
    "romansklenar": "I've run into same issue using Apiary reporter.\n. Thanks! :heart: Looking forward!\n. Current workaround for that use case is to have a list of transactions you want to skip and skip them in before hook. Caveat is that developers need to keep that list updated.\n``` python\nimport dredd_hooks as hooks\nTransaction that we want to skip\nskip_transactions = [\n    'Users > Avatar resource > Upload avatar',\n    # ... all the other endpoints\n]\n@hooks.before_each\ndef skip_transaction(transaction):\n    if transaction['name'] in skip_transactions:\n        transaction['skip'] = True\n```\nSo ability to modify test result from after hooks would be nice thing to have but definitely not necessary.\n. @honzajavorek \ud83d\udc4d \n. I've run into similar issue - for me tests are running fine on CirleCI and locally on OSX (tried on several machines) but they don't run in vagrant.\nOnce I change dredd's config to don't load hook files (written in python), tests at least runs although they all fails.\npython -m py_compile test/hooks.py runs without error. Also whole app and tests are linted by pylint which is also clean.\nVersions\nUbuntu 14.04 LTS (tried also 15.10)\nnode v4.2.6 (tried also v0.10.35)\nnpm  2.14.12 (tried also v3.5.3)\ndredd v1.0.4\ndredd-hooks-python v0.0.2\nPython v3.5.0\nError\nbash\nSpawning `python` hooks handler\nError connecting to the hook handler. Is the handler running?\n{ [Error: connect ECONNREFUSED 127.0.0.1:61321]\n  code: 'ECONNREFUSED',\n  errno: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '127.0.0.1',\n  port: 61321 }\nmake: *** [test] Error 3\nI've spent already several days debugging this but without any success.\n. @justinabrahms Does your coworker installed python and node directly from homebrew? I've installed it using pyenv and nvm (which I've installed using homebrew) and it's running fine. Might worth to try it.\n. Thanks for tip! Here's what I've tried:\n``` bash\nuninstall dredd and install if from my fork\nsudo -H pip3 uninstall dredd_hooks\nsudo -H pip3 install https://github.com/romansklenar/dredd-hooks-python/archive/host_change.zip\nfind installed location\npython3\n\n\n\nimport dredd_hooks as hooks\nhooks.file\n'/usr/local/lib/python3.5/dist-packages/dredd_hooks/init.py'\nexit()\n\n\n\ncheck that fork's change is really present\ncat /usr/local/lib/python3.5/dist-packages/dredd_hooks/dredd.py | grep 0.0.0.0\nHOST = '0.0.0.0'\n```\nBut output of dredd looks still the same. It's even still reporting the same address 127.0.0.1 instead of 0.0.0.0\nbash\nSpawning `python` hooks handler\nError connecting to the hook handler. Is the handler running?\n{ [Error: connect ECONNREFUSED 127.0.0.1:61321]\n  code: 'ECONNREFUSED',\n  errno: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '127.0.0.1',\n  port: 61321 }\n. That seems to be working:\nbash\n$ dredd-hooks-python\nStarting Dredd Python hooks handler\nbash\n$ telnet 127.0.0.1 61321\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n. Yes it fixes the issue for me.\nThanks @honzajavorek for great effort with 1.0.6 & 1.0.7 releases :100:\n. +1 for that. I get that every time when test case passes but when it fails it shows actual time in miliseconds (using python hooks).\n. :+1:\n. Same thing here. Just using python hooks and dredd.yml config file and Circle CI.\n. @honzajavorek Yes, exactly.\n. Confirmed that issue is fixed for me by 1.0.7 release. Thanks guys!\nBut now I sometimes get \"Connect timeout 1.5s to the handler on localhost:61321 exceeded, try increasing the limit.\" but there is no way how to increase this configuration cause it's hard coded in source code. \nhttps://github.com/apiaryio/dredd/pull/382 seems that it's on a good way to address this. Would love to see it in next release :heart: \n. Is there any documentation or examples how we can pass options to hook worker?\nEDIT: nevermind, I see it in your PR.\n. Are these supposed to work also from dredd.yml config file?\n. Tried it now - works! :+1: \n. ",
    "masone": "```\n\u276f sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.2\nBuildVersion:   15C50\n\u276f npm -v\n3.5.1\n\u276f node -v\nv4.2.3\n\u276f rails -v\nRails 5.0.0.beta1\n\u276f dredd --version\ndredd v1.0.2\n```\nI get a similar error as @netmilk. Running a rails 5 beta server powered by puma.\nI just started with apiary, so my blueprint is minimal. \n```\ninfo: Beginning Dredd testing...\nI, [2015-12-25T11:25:37.524800 #87312]  INFO -- : Celluloid 0.17.2 is running in BACKPORTED mode. [ http://git.io/vJf3J ]\nPuma 2.15.3 starting...\n Min threads: 0, max threads: 16\n Environment: development\n* Listening on tcp://localhost:3003\nerror: GET /walls duration: 5ms\nerror: Error connecting to server under test!\n/Users/cfelder/.nvm/versions/node/v4.2.3/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159\n        if ((base = data['resultData']['result'])['general'] == null) {\n                                                 ^\nTypeError: Cannot read property 'general' of undefined\n  at EventEmitter. (/Users/cfelder/.nvm/versions/node/v4.2.3/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159:50)\n  at emitThree (events.js:102:20)\n  at EventEmitter.emit (events.js:175:7)\n  at ClientRequest. (/Users/cfelder/.nvm/versions/node/v4.2.3/lib/node_modules/dredd/lib/transaction-runner.js:517:33)\n  at emitOne (events.js:77:13)\n  at ClientRequest.emit (events.js:169:7)\n  at Socket.socketErrorListener (_http_client.js:259:9)\n  at emitOne (events.js:77:13)\n  at Socket.emit (events.js:169:7)\n  at emitErrorNT (net.js:1253:8)\n  at doNTCallback2 (node.js:441:9)\n  at process._tickCallback (node.js:355:17)\n``\n. Sure, thanks for looking into this Adam! Here's a gist: https://gist.github.com/masone/a9d29cd314388ccaffbf\n. The config is generated by the cli tool. In case you're wondering about hooks: I haven't set up any. Just installed thedredd_hooksgem. \n. :tada: thanks Adam!\n. Awesome, thanks! I would love to test this, but am hitting a road block installingprotagonist`. Let me know if you need me to give it another shot.\n. Typo: Remeainings -> Remainings\n. ",
    "adriaanbalt": "+1\nSometimes it responds with errors, sometimes it fails immediately.  I recognize that my apiary.apib isn't correct, it's a WIP, but I would still expect to see the errors as I do in the 2nd attempt.\nFirst attempt fail response:\n/Users/ascholvinck/.nvm/versions/node/v4.2.0/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159\n        if ((base = data['resultData']['result'])['general'] == null) {\nSecond attempt no changes made to files, see below\n```\n ~/PROJECTS \ue0b0 \ue0a0 dev \u25cf \ue0b0 dredd\nConfiguration dredd.yml found, ignoring other arguments.\ninfo: Using apiary reporter.\nStarting server with command: npm start\nWaiting 3 seconds for server command to start...\n\nBoilerplate-React@1.0.0 start /PROJECTS\ngulp\n\n[12:08:36] Using gulpfile ~/PROJECTS/gulpfile.js\n[12:08:36] Starting 'build:development'...\n[12:08:36] Starting 'clean'...\n[12:08:36] Finished 'clean' after 16 ms\n[12:08:36] Starting 'fonts'...\n[12:08:36] Starting 'iconFont'...\n[12:08:36] Starting 'images'...\n[12:08:36] Starting 'video'...\n[12:08:36] Starting 'data'...\n[12:08:36] gulp-imagemin: Minified 0 images (saved 0 B - 0%)\n[12:08:36] Finished 'images' after 17 ms\n[12:08:36] Finished 'video' after 15 ms\n[12:08:36] Finished 'data' after 27 ms\n[12:08:36] gulp-svgicons2svgfont: Font created\n[12:08:36] Finished 'iconFont' after 165 ms\n[12:08:36] Finished 'fonts' after 186 ms\n[12:08:36] Starting 'sass'...\n[12:08:36] Starting 'html'...\n[12:08:36] Finished 'html' after 24 ms\ninfo: Beginning Dredd testing...\nerror: GET /api/v1/me duration: 4ms\nerror: Error connecting to server under test!\n/Users/ascholvinck/.nvm/versions/node/v4.2.0/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159\n        if ((base = data['resultData']['result'])['general'] == null) {\n                                                 ^\nTypeError: Cannot read property 'general' of undefined\n  at EventEmitter. (/Users/ascholvinck/.nvm/versions/node/v4.2.0/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159:50)\n  at emitThree (events.js:102:20)\n  at EventEmitter.emit (events.js:175:7)\n  at ClientRequest. (/Users/ascholvinck/.nvm/versions/node/v4.2.0/lib/node_modules/dredd/lib/transaction-runner.js:517:33)\n  at emitOne (events.js:77:13)\n  at ClientRequest.emit (events.js:169:7)\n  at Socket.socketErrorListener (_http_client.js:259:9)\n  at emitOne (events.js:77:13)\n  at Socket.emit (events.js:169:7)\n  at emitErrorNT (net.js:1253:8)\n  at doNTCallback2 (node.js:439:9)\n  at process._tickCallback (node.js:353:17)\n\u2718 \ue0b0 ~/PROJECTS \ue0b0 \ue0a0 dev \u25cf \ue0b0 dredd\nConfiguration dredd.yml found, ignoring other arguments.\ninfo: Using apiary reporter.\nStarting server with command: npm start\nWaiting 3 seconds for server command to start...\n\nBoilerplate-React@1.0.0 start /Users/ascholvinck/PROJECTS\ngulp\n\n[12:08:59] Using gulpfile ~/PROJECTS/gulpfile.js\n[12:08:59] Starting 'build:development'...\n[12:08:59] Starting 'clean'...\n[12:08:59] Finished 'clean' after 15 ms\n[12:08:59] Starting 'fonts'...\n[12:08:59] Starting 'iconFont'...\n[12:08:59] Starting 'images'...\n[12:08:59] Starting 'video'...\n[12:08:59] Starting 'data'...\n[12:08:59] gulp-imagemin: Minified 0 images (saved 0 B - 0%)\n[12:08:59] Finished 'images' after 17 ms\n[12:08:59] Finished 'video' after 15 ms\n[12:08:59] Finished 'data' after 24 ms\n[12:09:00] gulp-svgicons2svgfont: Font created\n[12:09:00] Finished 'iconFont' after 152 ms\n[12:09:00] Finished 'fonts' after 173 ms\n[12:09:00] Starting 'sass'...\n[12:09:00] Starting 'html'...\n[12:09:00] Finished 'html' after 27 ms\n[12:09:00] Finished 'sass' after 657 ms\n[12:09:00] Starting 'webpack:development'...\n[12:09:00] Starting 'watch'...\n[12:09:00] Finished 'watch' after 9.23 ms\ninfo: Beginning Dredd testing...\nListening at localhost:3000\nfail: GET /api/v1/me duration: 326ms\ninfo: Displaying failed tests...\nfail: GET /api/v1/me duration: 326ms\nfail: headers: Header 'content-type' has value 'text/html; charset=utf-8' instead of 'text/plain'\nbody: Can't validate real media type 'text/plain' against expected media type 'application/json'.\nstatusCode: Status code is not '200'\nrequest:\nbody:\nheaders:\n    User-Agent: Dredd/1.0.2 (Darwin 14.4.0; x64)\nuri: /api/v1/me\nmethod: GET\nexpected:\nheaders:\n    Content-Type: text/plain\nbody:\n{\n    \"success\":true,\n    \"result\":{\n        \"gpid\":\"12345\",\n        \"firstName\":\"John\",\n        \"lastName\":\"Smith\",\n        \"email\":\"johnsmith@email.com\",\n        \"firstTime\":true,\n        \"uiLanguage\":\"en\",\n        \"accceptLanguages\":[\n            \"en\",\n            \"sp\"\n        ],\n        \"locations\":\"\",\n        \"emailFrequencey\":\"highPriority\",\n        \"pushFrequencey\":\"highPriority\",\n        \"image\":{\n            \"url\":\"\",\n            \"mimeType\":\"image/jpeg\"\n        }\n    }\n}\nstatusCode: 200\nactual:\nstatusCode: 404\nheaders:\n    x-powered-by: Express\n    x-content-type-options: nosniff\n    content-type: text/html; charset=utf-8\n    content-length: 22\n    date: Tue, 12 Jan 2016 17:09:01 GMT\n    connection: close\nbody:\nCannot GET /api/v1/me\ncomplete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total\ncomplete: Tests took 483ms\ncomplete: See results in Apiary at: https://app.apiary.io/pepfeed/tests/run/4d118a1d-d000-444f-9c71-67520e8c17fe\n```\nSystem details:\nbash\nnpm: 2.14.7\nnode: v4.2.0\nruby: ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin12.0]\nDredd.yml\nreporter: apiary\ncustom:\n  apiaryApiKey: xyz\n  apiaryApiName: superApiFeedName\ndry-run: null\nhookfiles: null\nlanguage: nodejs\nsandbox: false\nserver: npm start\nserver-wait: 3\ninit: false\nnames: false\nonly: []\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: info\ntimestamp: false\nsilent: false\npath: []\nblueprint: apiary.apib\nendpoint: 'http://localhost:3000'\n. started to work all the time now.\n. ",
    "nick13jaremek": "@w-vi Awesome! Thank you for the prompt reply\n. @w-vi No worries! :D For now we just switched off dredd from our project until the dredd release for NodeJS 4.x.x. Thank you for the feedback on the work you're doing!\n. ",
    "lulco": "some good news about this issue?\n. Ah, great. Thank you\n. I think we can close this issue. Maybe I will try to add schema.example to OAS3 parser too.. ",
    "jamesramsay": "To clarify, this example is the simplest form I could replicate the issue with. In practice this is a problem when trying to provide multiple examples of POST request/responses for more complex interactions.\nReferencing the example above, we'd like to have multiple examples depending on the action specified. In our API, action is an enum with 5 different values and the contents of the data object vary action to action.\n. ",
    "dignifiedquire": "I just checked and protagonist installs fine on node@4.0, but I do not see it as a dependency in package.json. So what exactly is the issue here? \n. Greatly appreciated! Thanks\n. ",
    "chrisse27": "+1\n. ",
    "runk": "+1\n. Cool. Let me know when it's ready and I'll prepare a PR with my changes. :+1: \n. @netmilk can you let me know if PR with such functionality would be accepted?\n. ",
    "bchew": "+1\n. ",
    "clems71": "+1\n. ",
    "nschloe": "Just bumped into this with\n$ node --version\nv5.1.0\nGuess we'll just have to wait.\n. ",
    "trimonkee": "Thank you !!!!\n\nOn Dec 2, 2015, at 8:31 AM, Adam Kliment notifications@github.com wrote:\nHi @trimonkee https://github.com/trimonkee, this is a known issue. Node > 0.12 is not supported yet due to dependency on drafter.js and waiting for release of new protagonist with support for rendering JSON schemas from MSON.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/apiaryio/dredd/issues/297#issuecomment-161290209.\n. \n",
    "3dtomato": "Does Dredd works on Node 5.x.x / 4.x.x  or works only on Node 0.12.x?\nOn the Dredd Readme.md you have Note: Dredd works smoothly with node.js 5.x.x, 4.x.x, 0.12.x, 0.10.x, and iojs v2.x.x.\nSo where is the truth?\n. I am not able to install Dredd on Windows 10 + Python 2.7 + Visual Studio 2015 + NVM Node 5.3.0 or 4.2.3.   It is working for me only on Node 0.12.9. \nWhats are the requirements for Dredd 1.0.2? Is there any detailed installation manual? \n. Ok, finally the installation is working. I have had to make custom installation of MS Visual 2015 and check Common Tools for Visual C++ 2015. Anyway, VS2015 takes approx. 9GB. Isn't there any other option with smaller SDK?\n. ",
    "amuino": "In my debugging, I got two after events (no after_each) with different event ids and start_at, but was unable to build a minimal example, sorry.\nOnly strange thing that I can think of is that the hooks usually time out on the first example. Also, we are running dredd from dredd.yml with two blueprint files.\n. Sorry for the very delayed response. I have just tested latest dredd on node 5.6 and I couldn't reproduce it. I'm closing the issue.\n. Sure, I just would prefer to skip that boilerplate from all before/after hooks when the transaction is skipped.\nWhat's the use case for notifying them?\n. Might be related to https://github.com/danielgtaylor/aglio/issues/237, which causes the same error and has a minimal blueprint to reproduce\n. One additional note, the blueprint looks perfectly valid to me, that's why I think that it might be a problem with drafter, in addition to teaching dredd how to handle empty AST.\n. @RyanHavoc  We were able to get rid of the non-object types (an array) and inline them. The cause is fixed on drafter, so I expect it to be fixed in the next dredd release\n. ",
    "HowardSterling": "I'm the person who had the confusion/issue - if anyone needs further clarification.\n- I might suggest \\n, \\t, and similar 'eyeballing' strings for text output.\n. ",
    "ascripcaru": "can someone restart travis for node 0.12 ?\n. @w-vi i have node v0.12.9 on my machine and all is green. I really don't know what is the problem. If this fails again I'll try to take change my node version and try again\n. @w-vi all is green now\n. @honzajavorek now the bastard version of node that fails without a good reason is 4. if you could give it a restart? if you like the approach I'm glad that I could help\n. @w-vi forgot about this dependency on the last PR\n. I'll give it a try\n. ",
    "frejsoya": "Thanks for the pointer. I'll downgrade to node 0.12 again :)\n. The existing tests I have appear to work for me, except for Include mson directive . But switched I just switched it to inheritance.\nBut it is hard to check that dredd actually sees the json schema generated from mson and verifies it against the response json.\n. You don't have wait for a new release of dredd. \nA simple npm install dredd would fetch the latest protagonist release (up to 2.0.0)\n\nOn 12. jan. 2016, at 16.59, Honza Javorek notifications@github.com wrote:\n@w-vi https://github.com/w-vi We're upgrading to the latest Protagonist and releasing new Dredd in #347 https://github.com/apiaryio/dredd/pull/347, so this should be closed soon.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/apiaryio/dredd/issues/319#issuecomment-170956891.\n\n\nFrej Soya\n. ",
    "kurko": "I can confirm that downgrading to 1.0.1 solves the issue for me.\n. ",
    "nstielau": "The option to specify the Certificate Authority and the client-side certificate would also be helpful.. ",
    "pcman312": "Are there any plans to implement this? This is use case that we have and we can't use this tool unless this feature is implemented.. ",
    "XVincentX": "Yes, I do.\n. I agree that it may look like a bit tricky, but I think that there are more benefits than disadvantages.\n1. Easier for developer to write hooks - http libraries are everywhere, and stop to use home made delimiters and so on\n2. Super easy to make dredd hooks work in the cloud\n3. Apiary documentable (that's a feature)\n. In my opinion TCP server should be left there forever for legacy reasons. Given that, me may try to move forward.\n. @ddelnano Good to know - I had this idea while working on dotnet ones\n. I mean the ability to configure the time to wait between process spawn and hooks execution.\nBasically, this number.\n. Hey!\nWould you mind sharing with me the aspnet project (with .json file as well) and the APIBlueprint you're actually using?\n. @mypark \nIt is correctly passing on my machine (MacOSX with coreclr mono rc2)\nThe same goes with the nodejs version you provided in the repo.\nThe only thing I had to change in my application was the startup command:\ndnx run --server Microsoft.AspNet.Server.Kestrel\nbut I do not really think that is the problem here.\n\n. @mypark \nI am using 1.0.0-rc2-16357/mono/linux/osx with Kestrel 1.0.0-rc1-final\nTested it again, it works here.\nI am not really sure what I can do to help you.\n\n. @mypark \nAs stated before, the only change I made is to change the startup command in dredd.yml: dnx run --server Microsoft.AspNet.Server.Kestrel\nA good idea would be to create to test it on a Linux environment, which could be easily provided by TravisCI or CircleCI, which are free for open source projects.\n. Dumb console.log\nduration:698\nend:2016-08-15T15:55:46.078Z\nerrors:0\nfailures:1\nfileBasedReporters:0\npasses:0\nskipped:0\nstart:2016-08-15T15:55:45.380Z\ntests:1\n. Given I hit a round issue number (600), this one will have top priority on the to do list.\n. Same here. I'd love to put the express-gateway API under tests but our specs are written in Open API 3.0!. Niptick:It could be written in a single statement\n. I am quite sure this won't work since .then does not handle exceptions.\n. ",
    "mike-marshall0164": "I just went searching to see if this was possible, glad I'm not the only one!\n. ",
    "prasanna981": "+1\nWould be useful to add something like this https://www.npmjs.com/package/newman#json-reporter-options. This would make it easier to integrate with CI tools\n. ",
    "garyluu": "didn't end up using the html reporter, but i was trying to create a web link that quickly displayed the results. The last time I tried, I needed the CLI output as well (in order to get the summary):\nhttps://github.com/apiaryio/dredd/issues/1001. So that works for my hook, but I think the main issue for me right now is figuring out why it's base64.\nI've simplied the process:\ndredd thing.yaml https://dockstore.org:8443 -l error --no-color\nwhere thing.yaml is:\nbasePath: /api/ga4gh/v2\ndefinitions:\n  Tool:\n    description: A\n    properties:\n      aliases:\n        description: \"a\"\n        items: {type: string}\n        type: array\n    type: object\ninfo: {description: 'Thing', title: Thing, version: 2.0.0}\nparameters:\n  limit: {default: 100, description: thing,\n    format: int32, in: query, name: limit, type: integer}\n  offset: {description: 'a',\n    in: query, name: offset, type: string}\npaths:\n  /tools:\n    get:\n      description: \"a\"\n      operationId: toolsGet\n      parameters:\n      - {description: 'A', in: query, name: id, type: string}\n      - {description: \"A\", in: query, name: alias,\n        type: string}\n      - {description: A, in: query, name: registry,\n        type: string}\n      - {description: A,\n        in: query, name: organization, type: string}\n      - {description: A, in: query, name: name, type: string}\n      - {description: A, in: query, name: toolname, type: string}\n      - {description: A, in: query, name: description,\n        type: string}\n      - {description: 'A', in: query, name: author,\n        type: string}\n      - {description: A, in: query, name: checker, type: boolean}\n      - {$ref: '#/parameters/offset'}\n      - {$ref: '#/parameters/limit'}\n      responses:\n        '200':\n          description: A\n          headers:\n            current_limit: {description: A, type: integer}\n            last_page: {description: A, type: string}\n            self_link: {description: A, type: string}\n          schema:\n            items: {$ref: '#/definitions/Tool'}\n            type: array\n      summary: List all tools\n      produces: [application/json;charset-utf-8]\n      tags: [GA4GH]\nproduces: [application/json, text/plain, application/json;charset=utf-8]\nswagger: '2.0'\ntags:\n- {description: A,\n  name: A}\nAnd it returns that its failing because of bodyEncoding: base64\nNow if I:\nnpm i -g dredd@4.7.0 --unsafe-perm\ndredd thing.yaml https://dockstore.org:8443 -l fail -c false\nIt passes as expected\nI don't believe it's truly base64 because from my browser, it looks utf-8. curl -X GET \"https://dockstore.org/api/api/ga4gh/v2/tools?limit=35\" -H  \"accept: application/json\"\ngives me the base64 body on transaction['real']['body']\ncurl -X GET \"https://dockstore.org/api/api/ga4gh/v2/tools?limit=30\" -H  \"accept: application/json\"\ngives me what's expected on transaction['real']['body']. Ok, that might actually be it.  This is the problematic part of the json:\nhttps://staging.dockstore.org/api/api/ga4gh/v2/tools/quay.io%2Fcancercollaboratory%2Fdockstore-tool-samtools-view\nThere's replacement chars for the >= sign\nI'm content with this answer.  Thanks for your help.. ",
    "michalholasek": "Regarding the stdout noise of parent process coming from server and hook instances - it could be good idea to leverage subprocess.send() method to handle incoming information from server/hooks and decide in main Dredd's process what should go to stdout instead of just writing directly to main process' stdout from server/hook processes.. I'm very sorry we were not able to get back to this. I need to close this as we're going to work on #705 first, which requires having no pending Pull Requests. Having said that, we plan to revamp whole CLI layer (along with transaction names / paths) in the future, so it is possible we will consider adding --skip functionality aswell.\nThank you for all the work you've put into this!. Tracking issue.. Hello @vitkoczi @Zoltamcsak @matthiasKaeser,\nI am not able to reproduce the issue using dredd@4.7.3. I tested it with:\ndredd.yml\nyaml\ndry-run: null\nhookfiles:\n  - ./test/fixtures/glob1_hook.js\n  - ./test/fixtures/glob2_hook.js\nlanguage: nodejs\nsandbox: false\nserver: node ./server.js\nserver-wait: 3\ninit: false\ncustom: {}\nnames: false\nonly: []\nreporter: []\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: info\ntimestamp: false\nsilent: false\npath: []\nhooks-worker-timeout: 5000\nhooks-worker-connect-timeout: 1500\nhooks-worker-connect-retry: 500\nhooks-worker-after-connect-wait: 100\nhooks-worker-term-timeout: 5000\nhooks-worker-term-retry: 500\nhooks-worker-handler-host: 127.0.0.1\nhooks-worker-handler-port: 61321\nconfig: ./dredd.yml\nblueprint:\n  - ./test/fixtures/glob1.apib\n  - ./test/fixtures/glob2.apib\nendpoint: 'http://127.0.0.1:3000'\nNote: Using blueprint: ./test/fixtures/glob* or\nblueprint:\n   - ./test/fixtures/glob1.apib\n   - ./test/fixtures/glob2.apib\nalso works. (Same for hookfiles.)\n./server.js\n``` javascript\nconst express = require('express');\nconst app = express();\napp.set('port', (process.env.PORT || 3000));\napp.get('/machines', (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.status(200).json([{\n    name: 'willy',\n    type: 'bulldozer'\n  }]);\n});\napp.get('/planes', (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.status(200).json([{\n    name: 'El Chupacabra',\n    type: 'Gee Bee Model R'\n  }]);\n});\napp.listen(app.get('port'), () => {\n  console.log('Server started: http://localhost:' + app.get('port') + '/');\n});\n```\n./test/fixtures/glob1_hook.js\n``` javascript\nconst hooks = require('hooks');\nhooks.before('Machines > Machines collection > Get Machines', function (transaction, done) {\n  transaction.request.headers['header'] = '123-machine';\n  return done();\n});\n```\n./test/fixtures/glob2_hook.js\n``` javascript\nconst hooks = require('hooks');\nhooks.before('Planes > Planes collection > Get Planes', function(transaction, done) {\n  transaction.request.headers['header'] = '123-plane';\n  return done();\n});\n```\n./test/fixtures/glob1.apib\n``` apiblueprint\nFORMAT: 1A\nMachines API\nGroup Machines\nMachines collection [/machines]\nGet Machines [GET]\n\nResponse 200 (application/json; charset=utf-8)[\n  {\n    \"type\": \"bulldozer\",\n    \"name\": \"willy\"\n  }\n]\n\n\n\n```\n./test/fixtures/glob2.apib\n``` apiblueprint\nFORMAT: 1A\nPlanes API\nGroup Planes\nPlanes collection [/planes]\nGet Planes [GET]\n\nResponse 200 (application/json; charset=utf-8)[\n  {\n    \"type\": \"Gee Bee Model R\",\n    \"name\": \"El Chupacabra\"\n  }\n]\n\n\n\n```\nResult\nMichals-MacBook-Pro:dredd michalholasek$ ./bin/dredd\ninfo: Configuration './dredd.yml' found, ignoring other arguments.\ninfo: Starting backend server process with command: node ./server.js\ninfo: Waiting 3 seconds for backend server process to start                                                                  /dredd/test/fixtures/glob2_hook.js\nServer started: http://localhost:3000/\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: 0=/Users/michalholasek/Repository/dredd/test/fixtures/glob1_hook.js, 1=/Users/michalholasek/Repository\n/dredd/test/fixtures/glob2_hook.js\npass: GET (200) /planes duration: 53ms\npass: GET (200) /machines duration: 24ms\ncomplete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total\ncomplete: Tests took 95ms\ninfo: Backend server process exited\nWould you mind sharing dredd version, dredd.yml and API Description / hookfile fixtures you are using? Thank you.. As @honzajavorek mentioned in his comment, this issue was fixed in https://github.com/apiaryio/dredd/pull/803, which has its own set of tests. Thank you @aledeg for the time you have put into this.\nCloses #504.. \nAs @honzajavorek said, I think we could divide Dredd \"ecosystem\" to at least 5 modules / packages:\ndredd-core - test runner\ndredd-parser - description document parsing\ndredd-transactions - transaction \"compiler\"\ndredd-cli - command line interface\ndredd-reporters - base, HTML, nyan, ...\n. I don't necessarily mean that dredd-core, dredd-parser, dredd-transactions etc. have to be individual repos and/or npm packages, on the contrary - I would like Dredd to be a monorepo.. Hello @sajantha, absolutely! Provided the server location will use valid URL scheme, it will work as expected.. In the context of server location it is protocol://hostname, eg. https://example.com/. Add a protocol (I presume you are using http, so http://xxxxxxx.xxxxxxx-xx.eu-west-1.amazonaws.com) and it will be valid server location.. Hello @rmharrison, there is no progress unfortunately. Would you be willing to look into this? Good starting point would be to write a failing test case (as @honzajavorek pointed out in his comment above).. @honzajavorek Addressed all your comments, hopefully we'll have a green light in all checks.. Hello @wanghuanjing, you can try to play a bit with --hooks-worker-* CLI options (docs) and see if that helps. If not, could you please run dredd with --level=debug and paste the ouput here? Thanks.. Hello @clementgarnier,\nThank you for the issue! As @honzajavorek said in https://github.com/apiaryio/dredd/issues/765#issuecomment-314994049, this is a serious issue and should be fixed ASAP - I'll start to dig into it right away.. I'll investigate. Makes me wonder if the solution I came up with originally was more suited or not.. \n@honzajavorek Fixed.. Hello lcofre,\nThank you for using Dredd!\nYou are correct, but you probably want use before (per transaction) instead of beforeEach (all transactions) for your use case.\nShould you have any more questions, feel free to ask.\n. Hello @yurrriq,\nDredd does not support external file references in $ref attribute as of now. Please see @honzajavorek's comments in https://github.com/apiaryio/dredd/issues/676.. Hello @runk,\nIt seems to me you have minim@0.19.1 installed for some reason. Could you please try remove all the packages (rm -rf node_modules) and install them from ground up (npm install)?. Fixed by https://github.com/apiaryio/dredd/pull/891.. Hello @matthewl-biomatters, we solved the issue with failing Swagger test you filed in https://github.com/apiaryio/dredd/issues/892 - could please rebase on top of current master to see if the tests pass? Thank you.. I looked into the failing test and it seems to be related to ./test/fixtures/sandboxed-hook*.js glob pattern resolving to sandboxed-hook.js and sandboxed-hooks-log.js files, but I am not sure why it is causing the timeout. When I delete the glob pattern and replace previously used sandbox-hook*.jsfiles with for example /foo/bar/hook1.js and /foo/bar/hook2.js (non existent files), it passes \ud83e\udd14 \n@matthewl-biomatters, would you be willing to dig deeper and resolve the issue?. @matthewl-biomatters Agree, please modify the test file and squash all commits into one. Thank you.. Fixed by https://github.com/apiaryio/dredd/pull/900.. @YGeorge Implementation for initial OAS3 support is scheduled to start soon, but we don't have more accurate timeframe yet.. @nesl247 There's no update on the timeframe yet, unfortunately.. Hello @realityking, we solved the issue with failing Swagger test https://github.com/apiaryio/dredd/issues/892 - could please rebase on top of current master to see if the tests pass? Thank you.. @honzajavorek Yep, I am looking into it.. @honzajavorek Both look good to me, but fs-extra is more \"futureproof\" (featurewise) for us.. Hello @jgjadaoag, thank you for the PR! Looks good, I have just one nitpick - could you please change the error message to something like No API Description document(s) were found on path:? I think that it sounds a little bit better than the one you used. What do you think?. @jgjadaoag I am sorry for the delay, we were buried in other work.\nUnfortunately, last change (https://github.com/apiaryio/dredd/pull/909/commits/a7dc1ddcced8e9e6a0cc69fc249e2d39f5186895) does not work as expected (and tests you added fail aswell) because it is enclosed in a callback function of hookfiles.reduce method (return callback(new Error(...)) is a return value of hookfiles.reduce, not addHooks).\nI think something like\n```diff\ndiff --git a/src/add-hooks.coffee b/src/add-hooks.coffee\nindex 11e2e7d..d9251c1 100644\n--- a/src/add-hooks.coffee\n+++ b/src/add-hooks.coffee\n@@ -43,7 +43,7 @@ addHooks = (runner, transactions, callback) ->\n       fixLegacyTransactionNames runner.hooks\n catch error\n\n\nlogger.warn(\"\"\"\\\n\nlogger.error(\"\"\"\\\n         Skipping hook loading. Error reading hook file '#{filePath}'. \\\n         This probably means one or more of your hook files are invalid.\n         Message: #{error.message}\n@@ -105,9 +105,6 @@ addHooks = (runner, transactions, callback) ->\n       # glob.sync does not resolve paths, only glob patterns\n       unresolvedPaths = if glob.hasMagic(unresolvedPath) then glob.sync(unresolvedPath) else [unresolvedPath]\n\n\nif unresolvedPaths.length == 0\n\n\nreturn callback(new Error(\"Hook file(s) not found on path: #{unresolvedPaths}\"))\n# Gradually append sorted and resolved paths\n   result.concat unresolvedPaths\n     # Create a filename / filepath map for easier sorting\n@@ -129,6 +126,11 @@ addHooks = (runner, transactions, callback) ->\n , [] # Start with empty result\n )\n\n\nif files.length is 0\n\nmessage = \"No hookfiles found on path(s) #{hookfiles.join(', ')}\"\nlogger.error(message)\n\nreturn callback(new Error(message))\n+\n     logger.info('Found Hookfiles:', files)\n# Clone the configuration object to hooks.configuration to make it\n```\n\n\ncould be a good solution. Would you agree?. @honzajavorek\n. @honzajavorek I am ok with merging it before decaff branch is done, just one note - shouldn't we consider this a breaking change, since we are dropping Node 4 support?. I created new branch / PR with \"resolved\" merge conflicts. . @honzajavorek Addressed your comments.. Closing if favor of https://github.com/apiaryio/dredd/pull/962 due to dumb git rebase.. @honzajavorek I overlooked it has been already done in https://github.com/apiaryio/dredd/pull/969. Will you have some spare time tomorrow to go trough that PR? \ud83d\ude4f . If I understand your use case correctly, you can use afterAll hook to achieve that \"global\" level assertion whether your response payload contains empty array(s) (or not).. Hello @BastianHofmann, I am sorry for getting back to you so late.\n\nI'm open to providing a pull request.\n\nThat would be wonderful, please do! \ud83d\ude42 . Hello @VaN-dev, thank you for the report. I don't have much time to look into this at the moment unfortunately, it would be a great help if you would be willing to provide failing test case - if you would be interested, but don't know where to start / look into, I can provide you with guidence.\nThanks!. \ud83e\udd14  Seems to me that it could be an issue in minim. @kylef Could you please have a quick look? Thanks!. Hello @garyluu, thank you for the report. I don't have time to look into this at the moment, it would be a great help if you would be willing to look into this - it won't take much time probably, good starting point would be html-reporter.js file.. Hello @acy76, thank you for the PR! Could you please remove the dot at the end of the commit message, the build is failing on lint stage:\ninput: docs: Fixing php hooks doc.\n\u2716   message may not end with full stop [subject-full-stop]\nThank you!. @honzajavorek Addressed in https://github.com/apiaryio/dredd/pull/1054/commits/e22b00979d5f0de6ff98807fc0b795de9e804b83 and https://github.com/apiaryio/dredd/pull/1054/commits/409ae1727c6af7956ba75b94f60cf5cdbd76cb0b.. I wonder if coffee is doing file path delimiter normalization (\\ vs. /). Might be worth it to try path.normalize or path.join.. @realityking I am sorry for the delay, we've had quite a lot of other work on our plates. Thank you for the PR, it's great!. @realityking It's because you are using npm@<5, npm version >5 installs growl@1.10.5.. > keep the --level option or rename it to --debug and treat it as if setting DEBUG=dredd to simplify this for people\n@honzajavorek Yep, I agree.\n. After discussion with @honzajavorek, we decided on the following:\nA) DEBUG=dredd|* dredd\n\nAll levels combined (debug, info, warn(ing), error)\ndebug npm package\n\nB) --loglevel|-l=debug|info|warn(ing)|error (renamed from --level)\n\nWinston used only for reporter(s) output\nApplication (dredd) output\nLevels:\ndebug (debug + info + warn + error)\ninfo (info + warn + error)\nwarn (warn + error)\nerror\n\nLoggging abstraction:\n\nIndependent from Winston (logger.js moved to reporters/logger.js)\ndebug -> debug package API\ninfo -> process.stderr.write(...)\nwarn + error -> process.stderr.write(...). It seems that Travis build is failing on docs build \ud83e\udd14 . This works as intended, the problem was in cli-test.coffee - fixed by https://github.com/apiaryio/dredd/pull/803/commits/5273b321aee06c08c7fa8a00dad1f3f815c89f61.. Addressed in https://github.com/apiaryio/dredd/pull/803/commits/60d2a4fdce00d10dccc66cfbca5d7c0bbe11be8e.. Addressed in https://github.com/apiaryio/dredd/pull/803/commits/c09efdb98fe2fe5ba294baefdd481b52e4aae413.. Addressed in https://github.com/apiaryio/dredd/pull/803/commits/e867e4ad0e11b95ff53cb867c5ea3c5943d7e6e3.. Just a habit - I like to differentiate between default and destructured imports (requires). . You can join these two returns into one - return false if not contentType else contentType.indexOf('multipart') > -1.. Honestly, I think that change made in https://github.com/apiaryio/dredd/commit/3055aba05315ca2e4a9f68a23c124c5ed1562890 is worse than the original two returns. I think that solution from above reads a little bit better, yours has a little bit of Yoda tongue in it \ud83d\ude42 . . I have no problem with that, we can differentiate between different type of runtime errors in single error handler hub.. Agree, I'll have a look.. Reflected in https://github.com/apiaryio/dredd/pull/851/commits/ab90347f3db951441f0cfaa3b30ff9cae901c12d.. Just a note: Interesting syntax for cache wipe \ud83d\ude42 . I don't think it is necessary to use beforeEach here (use before), the server is the same for each assertion. Same also goes to other occurrences in this file.. NIT: I don't like this empty space \ud83d\udef0 . NIT: I don't like this empty space \ud83d\udef0 . I think that server creation for this and subsequent describe's can be moved to upper scope and reused for all assertions, correct? Small things like this add up and are slowly degradeting performance of our test suite. . Same as previous comment (move server creation to upper scope and reuse it for all assertions, since it is the same for all of them).. Again, dummy server is created for each assertion. I think it is not necessary to create the same server over and over again (aka use before, not beforeEach) \ud83d\ude42  . Transforming header array -> header object is probably not what you want - headers with the same name get overwritten in the process and only last one will remain.. I don't like the fact that throw new Error(...) is used inside a reduce method. I would rather seen it rewritten in forEach or some imperative equivalent.. Well, since the original (decaffed) code looked like this:\n\njavascript\nswitch (false) {\n  case !(methodIndexA < methodIndexB): return -1;\n  case !(methodIndexA > methodIndexB): return 1;\n  case methodIndexA !== methodIndexB:\n    return a['_index'] - b['_index'];\n}\n...it is correct. Also, test were failing for previous version.. Probably older API, but still works \ud83d\ude42 . Addressed in https://github.com/apiaryio/dredd/pull/1035/commits/b205cc9a65bb447d1ac231971a5583c9ce633878.. Addressed in https://github.com/apiaryio/dredd/pull/1069/commits/f8117e78ac2dcee4b7a103733c9d215614023394.. Addressed in https://github.com/apiaryio/dredd/pull/1069/commits/f8117e78ac2dcee4b7a103733c9d215614023394.. I think that setContentLength is a little bit misleading here, normalizeHeaders or something like that would be more fitting in this case.. Nit: I would personally use switch instead if(s) wherever possible, something like:\njavascript\nswitch (lcEncoding) {\n  case 'utf-8':\n  case 'utf8':\n    return 'utf-8'\n  case 'base64';\n    return 'base64';\n  default:\n    throw new Error(`Unsupported encoding: '${encoding}' (only UTF-8 and `\n      + 'Base64 are supported)');\n}\nBut it is not an issue, just an idea.. When we are exposing private/internal APIs for testing purposes, I think it would be good idea to prefix the names with leading underscores __ - see this for inspiration \ud83d\ude42 . normalizeContentLengthHeader then Q___(-_-)Q. ",
    "juliengerboud": "@honzajavorek The idea was to \"store\" the report as an artifact of TeamCity build. This way, users checking a build creating the report would just had to click on the file and the report would have been display directly into the browser.. @honzajavorek The CLI log is quite useful! It is easier to read IMHO.. @honzajavorek Sorry to ping you like that... Would it be possible to have some insights? Thanks for your help!. It does! \nThanks a lot @kylef @honzajavorek . ",
    "mlambley": "It's been... quite a while, but I'll try to remember my use case. I wanted the cli to give brief information (a single line for each test, showing perhaps method, url, result). The problem I had was that the cli reporter was cluttered with json dumps of failed tests. There were two options for the cli reporter: show errors inline or show errors at the end. I wanted the option to not show errors at all.\nThe dot reporter wasn't ideal either because you couldn't see the test information (and if memory serves, it still dumped json data anyway).\nA HTML file is a much easier place to review long strings of json and identify where the errors are. I wanted the cli reporter to give summary info, with detailed information in the html.\nI don't know how TAP will fit into this, but my suggestion was to have an interface for creating custom reporters and be able to configure dredd to say \"read extra reporters from this directory\". I think another suggestion I had was to create a \"quiet cli reporter\" which was a copy of cli reporter with all of the \"show errors\" code removed.. Dot reporter still displays failed tests anyway, so the issue of my long json cluttering up the terminal isn't abated by that.\nAlso, I like seeing pass/fail/skip next to each action/url/duration. I still want the CLI reporter, just without the clutter.. I've gone ahead and created a PR for the least intrusive option. Please give feedback. Thank you.. ",
    "mypark": "I checked the white space in the response and in the blueprint files, and there were no extra white spaces in the response, and none in the bluprint file.  Does dredd add some white spaces after the parsing of the blueprint file?\n. Ok here it is, https://app.apiary.io/mikedemo/tests/run/d1c5bd6b-ec0c-45f7-ba04-6dccbb3f5362\nIt looks like the diff sees an extra trailing character of some sort (space or newline?  I can't tell) but the actual code itself and the response doesn't have the extra character - looking at the real and expected responses doesn't seem to show the extra character.\n. this is the blueprint\n```\nGET /message\n\nResponse 200 (text/html; charset=utf-8)hello\n\n```\n\n\nand this is the node.js code\napp.get('/message', function (req, res) {\n  res.send('hello');\n});\nneither of which have a trailing space after the hello\n. here's the project  https://github.com/mypark/mvc6demo, look at test.apib rather than the apiary.apib.  I'm testing with the simpler blueprint.  I've actually modified the controller file to also contain the simple hello controller as stated above.  Looking at the logs dredd makes the request and the server sends a response back, but it just seems to hang\n```\nGET /message\n\nResponse 200 (application/json; charset=utf-8){\"foo\":\"bar\"}\n\n```\n. so it looks like I have the same issue with all node.js client requests, wether it's dredd or not.  Seems to be an issue with kestrel rc1 https://github.com/aspnet/KestrelHttpServer/issues/406 .  I upgraded to 1.0.0-rc2-16357 using dnvm upgrade and still getting the same timeout issues.  Which version of kestrel server are you using?\n. @XVincentX  I'm using the same version as well, 1.0.0-rc2-16357/mono/linux/osx with Kestrel 1.0.0-rc1-final, not sure why mine fails and yours works.  Did you make any changes to the project?  If so can you push changes back to my demo git repo and I can compare my code with yours?\n. still failing - I think it's a kestrel issue and less so a dredd issue as it fails with node.js http requests overall rather than just dredd.\n. \n\n",
    "TheKiteEatingTree": "I had a very similar issue.  Added a newline to my response and it validated correctly.  That may not be the greatest solution though.\n. ",
    "HerrKater": "Hi,\nI'm facing with the same issue.\nOS : Ubuntu 14.04\nDNX :  1.0.0-rc1-update1    mono\nlibuv: v1.7.0\nI've tried with libuv 1.8.0 but it was throwing a \u201cSystem.EntryPointNotFoundException: uv_loop_size\u201d.\nWhat am I missing?\n. Hi,\nI use \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\". Shall I downgrade to an earlier version?\nThanks!\n. Could you please test it on Linux?\n. ",
    "pwilkins": "I'm the co-worker.  :-)  I'm using the Yosemite system Python 2.7.10 and node installed through Homebrew.  When I get to work I'll try what you propose.\n. ",
    "xlexi": "Is there any workaround for this? I am also experiencing it.\n. ",
    "jakehow": "@lusol how did you resolve this?\n. ",
    "ergosarapu": "I have tried also older versions of node, but the result is same. Here is the current setup:\n```\n$ node -v\nv5.5.0\n$ dredd --version\ndredd v1.0.4\n```\nI created minimal example with apiary.apib, dredd.yml and hooks.js files. The command I run is simply\n$ dredd\nI noticed that test results are reported to apiary successfully when setting transaction.fail=true in 'before' hook, so the issue is with 'after' hook. \nBelow are the contents of files.\napiary.apib\n```\nFORMAT: 1A\ndredd-test\nHello World API\nGroup Hello\nHello [/message]\nGet Hello [GET]\n\nResponse 200 (application/json){\"hello\":\"world\"}\n\n```\n\n\ndredd.yml\nreporter: apiary\ncustom:\n  apiaryApiKey: < REMOVED >\n  apiaryApiName: dreddtest2\ndry-run: null\nhookfiles: hooks.js\nlanguage: nodejs\nsandbox: false\nserver: null\nserver-wait: 3\ninit: false\nnames: false\nonly: []\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: info\ntimestamp: false\nsilent: false\npath: []\nblueprint: apiary.apib\nendpoint: 'http://private-34257-dreddtest2.apiary-mock.com'\nhooks.js\n```\nvar hooks = require('hooks');\nhooks.after('Hello > Hello > Get Hello', function (transaction) {\n  transaction.fail = \"Fail message\";\n});\n```\n. ",
    "hussainjunaid": "Thanks @honzajavorek i'll follow #227 for updates\n. ",
    "Georgian": "Thanks for the workaround suggestion, but private API projects cannot be accessed like this. Any workaround for the workaround? \n(related SO question here). ",
    "jandvorak": "\n. ",
    "miiila": "\n. No :bomb: found.\n. :+1: \n. :+1: \n. OK from my point view, but I have to admit I haven't followed the tutorial and just read the content.\n. Review done, did my best to improve something, but - as usual - I am not confident to consider all impacts.\n. @honzajavorek \ud83d\udc4d I don't want to overflow the discussion with same comments, so please check mentioned issues for duplication.\n. Review finished, waiting for finish on Apiary side.\n. Review done - \ud83d\udc4d \n. \ud83d\udc4d will merge after tests get passed\n. @honzajavorek Could you please just briefly comment https://github.com/apiaryio/dredd/pull/636#discussion-diff-82753444R22 and https://github.com/apiaryio/dredd/pull/636#discussion-diff-82754205R11? It's neither addressed in last commit nor commented, so I don't know, if you missed it or didn't consider as important. Thanks.\n. @honzajavorek so LGTM!\n. Based on note in description, code coverage is not considered being an issue. So... LGTM!\n. @honzajavorek Tests are not passing...\n. \ud83c\udf4c \n. \ud83c\udfb1 . (\u2795row + \u2796 rows < 0\ufe0f\u20e3 ) == True, therefore \ud83d\udc4d :trollface: . Awesome! \ud83c\ude51 . Do you know, what was this comment about?\n. I know it was here before, but IMHO improvement can be done..\n(answers['apiary'] == true && ! config['custom']?['apiaryApiKey']? && answers['apiaryApiKey'] != '')\nalso, following coffee wording can make better job as well\n(answers['apiary'] == true and not config['custom']?['apiaryApiKey']? and answers['apiaryApiKey'] != '')\n. Where are these numbers come from?\n. I have lack of knowledge/time to understand, if you changed assertion correctly. I have to believe you...\n. I am not so familiar with Dredd params, so just ensure me, it won't start interactive config :-)\n. Has to be matches really filled two times? From my reading, it would be enough to do matches = [] on line 614.\n. Typo?\n. typo: bleuprint => blueprint\n. I'd take .. off and put - instead.\n. Shouldn't be type ((string)) included too?\n. NIT: s/is/are\n. NIT: Unnecessary \"\"\".\n. Is the new line necessary? Same for line 20.\n. I'd keep 'Sending SIGKILL... wording, but YMMV.\n. Unnecessary fat arrow.  Same applies to similar statements on lines below.\n. Is caught error ignored intentionally? Wouldn't it help for faster orientation in JSON parse error?\n. Looks weird with one extra key only.\n. When compared with previous version ? is missing. Please consider, whether it should be present or not.\n. Sentence Starting Apiary reporter HTTP request doesn't make sense for me, but I can be missing some context.\n. req.on('error', handleReqError)\n. Only strings have special handling here. I would change comment in a way to emphasise it (e.g. coerce string color to bool, leave others).\n. I am not sure with the filename apply-configuration, when it expose more then one function. Maybe configuration only would be enough? \n. I am not sure with logging policy, so just pointing this removal for reconsideration, whether it should be really removed or not.\n. \ud83c\udf86 \n. Is it intentional to output the debugging info always? It seems to me with every Dredd run, debug info will be printed.\n. Shouldn't it be configuration.options.methods? I think name should reflect the fact it's array.\n. nit: I'd go with Releasing process for {version} instead of Releasing {version}.\n. Either s/author/authors or s/they/he.\n. Concatenation of all messages from all...\n. and sometimes present => but sometimes is\n. What I did not forget? => What did I not forget?\n. Ah, I missed the indentation, sorry for that.\n. Maybe some comment what's going on would be useful...\n. NIT: concat(value)\n. Same as above, I don't understand what is functionName() after comma. Applies to all similar outputs in this commit.\n. I don't understand part in hooks, emitResult(). \n. I can see this for multiple times, would think of some helper.\n. NIT: assert.ok(runner.skipTransaction.called)\n. IMHO you could use runDreddWithServer helper to prevent some repetitive work. Also applies to other similar situations.. Omitted res.send; consistency check.. Could you please verify whether --no-color is really needed?. not following GNU convention. I'd say exit status should not be 0, when there is an error message expected. . You are usually skipping these returns and sticking to done(err); I'd keep it for the sake of the consistency.. I can't find assert.ok in Chai's docs; only assert.isOk. No big deal, but interesting.. It would require my deeper knowledge, so I'll rather ask - should --server and --language argument be the same?. Missing : at the end of the sentence, IMHO.. I'd consider for for key, val of process.env more readable and efficient, but YMMV.. Switch upper if to if proxySettings.length would make more sense and could save some rows, but YMMV.. NIT: Missing parentheses around function call.. I somehow don't like the hardcoded timeout, I'd vote for extracting to the constant with some meaningful name at least, but I am not exactly sure about the use case, so it's up to you.. if err.code in CONNECTION_ERRORS sounds more coffee-scriptish for me.. NIT: you are using options.proxy = @configuration.options.proxy if @configuration.options.proxy at https://github.com/apiaryio/dredd/pull/749/commits/02633099e2f070654fcf313335a5347ceec26545#diff-4fe94b7f756f84c61823b246b6738096R156, so you can unify the style, but not big deal.. I don't understand the naming - once IMHO tells me, it was done exactly 1 time. But it looks like it's just a negation of serverRuntimeInfo.requested.. I saw a caseless library for checking the string, so it could be used here as well.. TIL ; very \u2328\ufe0f . I would setup ASCII_CTRL_C = String.fromCharCode(3), it doesn't require me to think about the operations, just using the constatnt.. setTimeout is here to prevent other if for https://github.com/apiaryio/dredd/pull/761/files#diff-eb16fc34daf4fcbea88cea0d7406b87aR105, right?. Is kill always an error?. Maybe I lost a concentration, but what error can occur?. Why am I seeing. in a restricted network... you can see errors. Because this can cause a lot of troubles in some environments, there's also...\nDrafter.js is fully equivalent, but it can have slower performance.\nTherefore there's...\nwhich tries to compile the C++11 version of the parser and uses the JavaScript equivalent in case of failure. That's the reason why you can seenode-gyperrors and failures...\neven though installation ended correctly and Dredd... \nLast sentence doesn't make sense for me - are you trying to fix this issues? Is it necessary if it seems to be working? I would appreciate more explanation on the goal you want to achieve with the following list.. ",
    "akondas": "+1, the same problem, every test case: duration: NaNms but when fails time is correct number.\ndredd --version\ndredd v1.0.7\nHooks: PHP\n. ",
    "jakubkratina": "Same in dredd v1.0.11\n. I'll take a look, but no promises with solving it :)\n. Thank you for a quick answer. I have reinstalled the dredd and still not working, same error.\nnpm install -g dredd\n/usr/local/bin/dredd -> /usr/local/lib/node_modules/dredd/bin/dredd\n/usr/local/lib\n\u2514\u2500\u2500 dredd@1.0.11\n. @honzajavorek: Yeah, it is possible (a probably is) problem with my setup, but every command after upgrade works fine, except dredd. I'll try and post a response.\n. So reinstallation of node and npm and it solved the problem. Thank you for your assistance. Great job with dredd.\n. Just edit like this:\n```\nAlbum (object)\n\nid: 1 (number)\nname (string)\nitems \ndata (array[Item])\n```\n. \n\n\n",
    "jgjadaoag": "Would it be alright if I make a fix for this?. @michalholasek yup, that looks better, I just copied the error message from a similar error.\n@honzajavorek got it, it seems that there are already unit tests and integration tests that test the opposite (that dredd shouldn't fail if a path evaluates to zero files) which I am changing to accommodate the new behavior. I'll try and push a commit today or tomorrow for the hookfiles.\nBtw, should I add something to the docs that will explicitly state this behavior?. @michalholasek Sorry for the late reply, I have been busy as well the past few weeks. I think that solution won't work for cases when there is a mix of hookfiles which have a valid and invalid path. \nI pushed an improvement to my fix and I also corrected my tests.. Ok, got it.. Ok, I also changed my implementation to make sure that every hook file is available and it seems to have affected multiple tests. I'll try and fix them later or on the weekends.. ",
    "RyanHavoc": "I'm experiencing this issue as well. My first time using Dredd and I get it straight away so I don't actually know what success results look like at this stage. :-S\nIs there a work around?\n. ",
    "jch254": "Any solution for Windows users?\n. Looks like utilising where.exe instead of which should do the trick ;)\n. Pls pls pls!\n. ",
    "webmato": "How to run Dredd + Babel + ES6 dreddhooks on Windows? \n```\nC:\\Users\\tom\\Work\\Project>where.exe dredd\nC:\\Program Files\\nodejs\\dredd\nC:\\Program Files\\nodejs\\dredd.cmd\n```\nbut \n```\nC:\\Users\\tom\\Work\\TouchArt\\Project>babel-node where.exe dredd\nmodule.js:341\n    throw err;\n    ^\nError: Cannot find module 'C:\\Users\\tom\\Work\\Project\\where.exe'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Function.Module.runMain (module.js:447:10)\n    at C:\\Users\\tom\\AppData\\Roaming\\nvm\\v5.6.0\\node_modules\\babel-cli\\lib_babel-node.js:159:24\n    at Object. (C:\\Users\\tom\\AppData\\Roaming\\nvm\\v5.6.0\\node_modules\\babel-cli\\lib_babel-node.js:1\n60:7)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Function.Module.runMain (module.js:447:10)\n```\n. Ok, I missed the model of the response in the Apiblueprint file\nCorrected Apiblueprint file:\n```\n...\nProduct Item [/api/products/product]\n\n\nModel (application/json; charset=utf-8)\n\nAttributes (LoadedProductItem)\n\nBody\n{ \n    ...\n}\n\n\n\nSchema   \n{ \n    ...\n}\n\n\n\n\n\n...\nSave New Product Item [POST /api/products/product]\n\nAttributes (NewlyCreatedProductItem)\nRequest (application/json)\nResponse 201 [Product Item][]\n\n\n\n...\n```\n. ",
    "xvalentino": "Yeah sure thing!\nWhen I npm run prepublish this commit, and run dredd with a ruby hook, I get the output \ninfo: Configuration dredd.yml found, ignoring other arguments.\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: ./dreddhooks.rb\nThen the process stops, but raises no error. It silently fails. It works fine if there is no hook being ran. If this doesn't reproduce the error, let me know and I can get a sample app up reproducing the error.\n. @honzajavorek #404 was what I was experiencing. Thanks!\n. @netmilk The tests use @runner.hooks.configuration, is there a reason not to use @runner.configuration?\n. Sounds good to me!\n. Cool, I'm not totally sure what a majority of the variables mean, I can look into it later and ask for specific ones. If there are any other names as well that'd make more sense just let me know!\n. Will do! Thanks!\n. ",
    "Alexorz": "Hello @honzajavorek , the dredd testing works fine in your way. But as a document, I think it's more reasonable to put + Parameters under each request, because there always be some parameters which only works for single request type. Just like the pn and pb is only needed in GET request in this case.\nAnd I saw apiary.io has already read the .apib in the way that I want:\n```\nFORMAT: 1A\nHOST: http://polls.apiblueprint.org/\ntest\nCoupons Collection [/api/coupons{?pn,pb}]\nList All Coupons [GET]\n\n\nParameters\n\npn: 1 (optional) - Page number\npb: 20 (optional) - Page by\n\n\n\nResponse 200 (application/json)\n\n\nCreate a New Coupon [POST]\n\n\nRequest (application/json)\n\nAttributes\ntitle: another coupon (string, required) - title of the coupon\n\n\n\n\n\nResponse 201 (application/json)\n```\n\n\n\n\n. Cool! Looking forward to a better dredd and API Blueprint.\nThank you all :)\n. ",
    "gustaff-weldon": "I'm still having this issue. POST is ignored if parameters are only specified for GET.  As for OP they only apply to GET and does not make sense for POST. \nBelow is an example spec that can be used to reproduce:\n```\nFORMAT: 1A\nExample API\nThe API for the EatBacon IOT project\nGists Collection [/gists{?since}]\nCollection of all Gists.\nList All Gists [GET]\n\n\nParameters\n\nsince (optional, string) ... Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ Only gists updated at or after this time are returned.\n\n\n\nResponse 200\n\n\nCreate a Gist [POST]\nTo create a new Gist simply provide a JSON hash of the description and content attributes for the new Gist. \n\n\nRequest (application/json)\n\nAttributes\ndescripton: sth sth (string, required)\ncontent: here goess content (string, required)\n\n\n\n\n\nResponse 201 (application/json)\n```\n\n\nDrakov runs the server and picks up two routes:\nDRAKOV STARTED\n[LOG] Setup Route: GET /gists List All Gists\n[LOG] Setup Route: POST /gists Create a Gist\n   Drakov 1.0.4      Listening on port 3000\nBut Dredd, complains about ambiguous parameter and completely ignores POST:\ninfo: Configuration './dredd.yml' found, ignoring other arguments.\nwarn: Compilation warning in file 'apiary.apib': Ambiguous URI parameter in template: /gists{?since}\nParameter not defined in API description document: since ( > Gists Collection > Create a Gist)\ninfo: Beginning Dredd testing...\npass: GET (200) /gists duration: 40ms\ncomplete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total\ncomplete: Tests took 893ms\nApiary editor picks parameters just fine only for GET.\n@honzajavorek @kylef  any suggestions other than moving parameters one level up (which I'd like to avoid since it makes API spec less clear)\n. @kylef cool, I think moving parameter down to GET, will work for us. Thanks! \nBtw, apiary.io was fine with a previous version, is that a feature of Dredd or is it apiary.io that uses older parser/validator?. ",
    "charliemaffitt": "@honzajavorek raising the log output level to silly surprisingly didn't change anything. That would suggest it's not initiating at all. I'll keep working on it.\nUPDATED:\nSo far the difference I see is that the ruby hooks worker doesn't seem to be getting spawned anymore:\nSpawning ruby hooks handler and Starting Ruby Dredd Hooks Worker are both present in the log output of v1.0.5, and absent when run with v1.0.6. Is there a change to how I need to initiate those hooks? Right now I'm doing it with --language ruby --hookfiles ./lib/dredd/hooks.rb\n. Fixed for me by 1.0.7 as well. I sincerely appreciate your quick attention to the issue. :confetti_ball: :tada: \n. ",
    "realityking": "Interesting workaround, didn't think of that approach.\nOut of curiosity, what downsides do you see with the approach I took?\n. I finally got around to testing @netmilk's workaround. Turns out there's no afterEachValidation hook but it does work with the afterEach hook.\nMy code:\n``` js\nvar hooks = require('hooks');\nconst SECRET_HEADERS = ['Authorization'].map(header => header.toLowerCase());\nhooks.afterEach(function(transaction, done) {\n  Object.keys(transaction['request']['headers']).forEach(function(key) {\n    if(SECRET_HEADERS.indexOf(key.toLowerCase()) > -1){\n      transaction['request']['headers'][key] = \"HIDDEN SECRET DATA\";\n    }\n  });\ndone();\n});\n```\nFrom my perspective this can now be closed. \ud83d\udc4d \n. As far as I can tell the failure is not directly related to inquirer. Any guess why it fails?. Saw the issue being closed :) I\u2019m traveling right now, I\u2019ll rebase ASAP.. @michalholasek @honzajavorek Rebased and tests pass.\nI did run through the interactive mode a couple of times, choosing different options. I can't claim that this was comprehensive as I don't know all the option that there are. If you want some more through testing I'll have to take a look at the code and see what paths I might have missed.. Good point on actually checking the changelog \ud83d\ude06 \nHere's the changelog for 2.0\n\nAnswer name with . are now expand in the answer object. e.g. name.sub would generate an answer object formatted as {name: {sub: 'answer'}}.\nexpand prompt default value if not specified is now help.\nDrop support for node 0.10 and 0.12\n\nand the one for 3.0\n\nDrop support for Node < 4\nAllow failing async validation by rejecting the returned Promise\nFix bug with bottom bar\n\nThe node requirements are obviously harmless and expand is not used. I think we're safe (unless there are bugs \ud83d\ude09). I think you missed the < in \n\nDrop support for Node < 4\n\nBut yeah, the changelog doesn't make much sense \ud83d\ude04 . Thanks @honzajavorek! I pushed a new version without the bump for winston.\nAs for eslint-config-airbnb-base, that's already a dependency through eslint-config-airbnb but I'm happy to split this into another PR.. Based on the above discussion I removed the eslint-config-airbnb since I assume you'll want to update to a version that includes the License file.\nI'll open a separate PR to track that.. @honzajavorek Looks like this all passes now :). @honzajavorek Would it be possible to release a new minor version that includes this PR? \ud83d\ude42 . Ah, good to know. Now I wish I had made #979 a fix: - I was debating that \ud83d\ude06 . I had another PR I wanted to make this week - let me do that now and I'll put it in as a fix :). @honzajavorek I didn't quite get that far last week but I've made a separate PR for that change as it's independent of the eslint upgrade. See #979. Ouch, that's gonna take a while to unblock. @honzajavorek Rebased on master and updated everything to the newest version. I know that some of the licensing issues have been resolved but not all of them. Can you re-run the license check?. @ChALkeR Only if configuration.options.user is a number. I assume it's a string so it'll be this behaviour: https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding. @honzajavorek The tests on Node 8 failed. Could you restart that job?. > Can we just always coerce it to a string in the configuration?\nThat'd be possible. Behaviour with the patch as it is would be to throw the error TypeError: \"value\" argument must not be a number.. Alternatively you could merge #982 which I classified as a fix.. @honzajavorek Would it help to split this into individual PRs?. Makes sense \ud83d\udc4d\nI'll give you a bit to sort things out with the easy stuff, then I'll jump back in \ud83d\ude42 . Not sure why this has failed on Windows. Maybe someone could restart it to see if it was a fluke?. Opened eugeneware/unique-stream#15. PR to fix the licensing issue https://github.com/jbgutierrez/path-parse/pull/2\nLooks like the package is essentially unmaintained, I doubt it'll ever get merged. Instead I took a look what it'd take to drop the dependency all together. Not looking to good either: https://github.com/browserify/resolve/issues/168. For tests yes, but proxyquire is also used to set up the hook files: https://github.com/apiaryio/dredd/blob/5cd3529a612913e72da71d8fa2d5ee330fb4eafb/src/add-hooks.js#L6. I see two options:\n\nSimply make hooks available as a global in the execution context.\nInject a global variable like above with the actual logic but expose an entry point dredd/hooks that contains the definitions of all functions. This would have the sweet advantage of giving us working autocomplete in IDEs.\nLike in the sandboxed version, directly expose beforeEach, afterAll, etc. like in the sandboxed hooks.\n\nI like option 2 and would be happy to test any of them out (tell me which one you prefer!) but it'd be a breaking change.. Why would it work on Linux but fail on Windows? \ud83e\udd14. I don't think that's it. There are actually 32 failures, by the looks of it in places I've touched in this PR.. It looks like most of the failures (all but one) are related in child-process-test.js which invokes the scripts differently (it's the only using spawn). I'll back out the things that are failing and make another PR for those.. A lot smaller in scope but at least the tests pass for what's in here :). @michalholasek no worries, I know what it's like \ud83d\ude42 . I figured this would take a while to merge because it does make sense to batch it with some other breaking changes.\nCurrently there's no dedicated test to cover this functionality, I'll add some. (Might be a few days until I get to this). Changes I've made:\n\n[x] Added error handling\n[x] Test for coffeescript\n[x] Test for babel-register\n[x] test for error case\n[x] added breaking change to the commit  \n\nThis leaves the sandbox case, I need to play with that and understand how it works.. Hmm, tests are failing on Travis but working locally. Any idea what would cause this?. I discovered that the difference is in whether the test suite is called directly (npm run test) or with coverage (npm run test:coverage).\nI tried the naive thing of replacing Istanbul with nyc, but that just got me a new set of errors.\nI think this is the point where I have to give up, the test suite (and dredd itself) are too complex. I'll leave this open in case you wanna take a stab at it, otherwise feel free to close it.. I took care of the rebasing and new eslint errors, I hope that makes things a little easer for you. The error from https://github.com/apiaryio/dredd/pull/1082#issuecomment-412450512 is still present.. Looks like I actually got it work \ud83d\ude33 \nThe errors now are only from coveralls. I'll see sometime later this week if things still work when I go back to Istanbul, otherwise I'll see what's up with nyc.. I pretty much rewrote half the changes but it wasn't too bad \ud83d\ude06 \nAs for coverage, if you wanna keep it around, I had a much better time with codecov than with coveralls.. It\u2019s green \ud83d\ude2d\ud83e\udd73\nThat leaves the problem of sandboxes hooks. I saw the proposal to simple rip them out (#1178). Is that an option?. Perfect!. Curios, why didn\u2018t you make this PR part of 6.0?. Rebased on top of master.. Ups, wrong button. But I\u2019ve done the requested changes. :). I don't think this actually work. As soon as I run npm install it reverts to 1.9.2.. Hmm using npm 6.1 running npm install I get a diff of the lock file that looks like this\ndiff\ndiff --git a/package-lock.json b/package-lock.json\nindex 0d5640e..6e07c99 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -6235,7 +6235,7 @@\n         \"diff\": \"1.4.0\",\n         \"escape-string-regexp\": \"1.0.5\",\n         \"glob\": \"7.0.5\",\n-        \"growl\": \"1.10.5\",\n+        \"growl\": \"1.9.2\",\n         \"json3\": \"3.3.2\",\n         \"lodash.create\": \"3.1.1\",\n         \"mkdirp\": \"0.5.1\",\nand npm list growl reports\ndredd@0.0.0-semantically-released /Users/rouven/dredd\n\u251c\u2500\u2500 growl@1.10.5  extraneous\n\u2514\u2500\u252c mocha@3.0.0\n  \u2514\u2500\u2500 UNMET DEPENDENCY growl@1.9.2\nBut mocha does seem to work - that's rather confusing.. It\u2019s not a trivial task but have you considered moving protagonist to N-API? It would allow either shipping the compiled binaries for the most relevant architectures in the archive or, something like bode-pre-gyp, downloading them from an S3 bucket. The great thing about N-API is that it would cut down severely on the number of binaries to build for this. It also wouldn\u2019t require recompiling when updating to a newer Node.js version.. How flexible are you on the minor version? Node 6.14.2 does support N-API.. One unfortunate side effect of this: it breaks deduplication of dependencies. All of dredds dependencies are kept around as a second copy even if they're already used somewhere else. This added ~1000 lines to the package-lock of our app.\nI like @opichals suggestion. It plays much nicer with how people expect npm packages to behave.. Scoping this down to dredd-transactions, while not perfect, is definitely a nice improvement. Thank you!\nAnother approach you could investigate is adding fury-adapter-apib-parser. It should allow you to modify your node_modules before running npm pack, leaving you with the desired result.\nYour earlier PR reminded me of this problem so I took a shot at what, IMHO, the proper solution would be: making protagonist truly optional. This would require a breaking change to fury-adapter-apib-parser, I made a PR with a proposal here: https://github.com/apiaryio/fury-adapter-apib-parser/pull/37. If you're doing a spring cleaning, there's one more candidate. The junit reporter is already deprecated. https://github.com/apiaryio/dredd/blob/125be8983ce9dc3c517703c0b7a1d4326f100c10/lib/configureReporters.js#L55\n. It's amazing how much simpler the hooks will be when all of this is ripped out. After this and #1082 are merged I'll take a shot at #1058.. \ud83d\ude31 That's not nice. In Berlin it's just cold, grey and rainy. \ud83c\udf27 . Sorry about the test failure due to typos. The suite takes so long, I prefer to run it in the cloud if I can.. The last test failure is a bit of mystery to me. The code seems to work correctly if I add some console.log statements but ninon doesn't see it. Have you seen something like that before?. Damn. Not sure how I missed that one when I grepped for it. Let's see if it works with this fix.. Unfortunately this is not a matter of an outdated package but an unmaintained package. This PR would fix it: https://github.com/dchester/jsonpath/pull/94. Something interesting is going on here.\nI use this minimal example:\n```\nconst Dredd = require('dredd');\nconst dredd = new Dredd({\n  server: 'https://cdn.contentful.com',\n  data: {source: ''}\n});\ndredd.run((...args) => {\n  console.log(args);\n});\n```\nThis fails in my setup however it does work fine when I try it within the dredd repo (with the first line changed to const Dredd = require('.');\nTurns out, the problem is that we have a direct dependency of drafter 1.2 (we use the blueprint AST). Apparently dredd is picking that up and since the data formt changed things go wrong.. > But it makes sense - you can have only one version of Drafter compiled in your node_modules.\nWhy would that be the case?\nThis is the output I'm getting from npm list drafter\n\u251c\u2500\u2500 drafter@1.2.0\n\u2514\u2500\u252c dredd@7.2.0\n  \u2514\u2500\u252c dredd-transactions@6.4.0\n    \u2514\u2500\u252c fury-adapter-apib-parser@0.13.0-beta\n      \u2514\u2500\u2500 drafter@2.0.0-pre.1\nQuestion is, why is dredd using the wrong drafter installation?. I think it does support that. The problem is the modification of drafter to remove protagonist. Drafter's JS code is still the following:\n```\ntry {\n  var protagonist = require('protagonist');\nmodule.exports = {\n    parse: protagonist.parse,\n    parseSync: protagonist.parseSync,\nvalidate: protagonist.validate,\nvalidateSync: protagonist.validateSync,\n\n};\n} catch (error) {\n  var drafterjs = require('drafter.js');\nmodule.exports = {\n    parse: drafterjs.parse,\n    parseSync: drafterjs.parseSync,\nvalidate: drafterjs.validate,\nvalidateSync: drafterjs.validateSync,\n\n};\n}\n```\nThis will load any version of protagonist that happens to be in the node_modules. I believe this is causing my problems.. Ah that makes sense. It's not directly applicable to my case since drafter and dredd are dependencies of the same project but never loaded at the same time.\nI guess the long term fix is something like https://github.com/apiaryio/fury-adapter-apib-parser/pull/37\n. Sweet! I can't believe it didn't require any changes \ud83d\ude06 . Ouch, that\u2019s some deep looking you did I to that. I\u2019ll revert that part of the PR.\nI can recommend codecov.io, it\u2019s the solution we use at Contentful and IMHO it\u2019s much better hab coveralls.. Removed the coveralls update. I'd prefer not to do the removal PR, IMHO that should happen in one go with the set up of a new solution which I can't do.. Yeah I thought the same but I think this is better left for a separate PR.. ",
    "Crimack": "I've done a little bit more digging into this. I'm unsure if the which command is the problem or not. I've tried aliasing the two, but the output of 'where' is slightly different to which ('where returns all possible results, which only returns the location of the command which would be run). They should both return a 0 exit code though.\nI've tried the same thing using git-bash and cygwin, but the issue persists on both of those Unix terminals as well.\nInterestingly, since Windows doesn't cope very well with shebangs, it's unable to simply run the command 'dredd-hooks-python', and needs to be explicitly supplied with 'python '. git-bash has no problems with this command though. Perhaps this could be the problem?\nIt could also possibly be a PATH issue related to virtual environments on Windows. Since the Scripts folder is only prepended to the PATH on activation, maybe node is having issues with this?\nI'll do a little more investigation tomorrow, and also try to help with debugging where possible.\n. Yeah, virtualenv can be a little tricky in these cases. It's still possible to activate the virtualenv within git bash by running source path_to_scripts/activate though, even if it's created a lot of .bat files.\nOut of curiousity I also created a Linux VM (OpenSUSE Leap 42.1) to ensure that it wasn't my project setup. With exactly the same code/PYTHONPATH/virtualenv setup, the VM dredd works correctly.\nI'm still having the same Python hooks handler server command not found: dredd-hooks-python with this though. dredd, dredd-hooks-python and which all run as expected. which is also still 'aliased'  to where, so even if node is running a secret command prompt it should still work correctly. \nThe developer of this seems to believe that spawnSync, which seems to be how the which command is executed in this file, has existing issues on Windows. I'm not sure how accurate this is since I'm not particularly experienced with node, but it could be something else to look into.\n. Yeah, I'll take a look at trying to do this at some stage today.\n. @honzajavorek I'm unfortunately not going to be able to test this for you under the same conditions as where I previously encountered these issues. I was working as an intern for a company, and have returned to university since I created this issue so I can't access the original project I was working on.\nI've contacted a former colleague who hopefully might get a chance to investigate or refer it to someone who can. I'm unsure how many Windows machines they're still using, or if they'll be able to help. I'll let you know what he says though \ud83d\ude04 \nSorry I couldn't be of more help with the pull request. I quickly ended up having to switch to a VM to get some work done, and I'm not particularly familiar with Javascript so found it hard to get things to work whenever I tried to tinker \ud83d\ude22 . ",
    "GiritharanR": "It is happening for all transactions. When I am forcefully make it fail, i got this exception.\n. Please find the example 1 below,\n```\nExample Collection [/]\nDescription of the collection\nGet all [GET /{?qp1,qp2}]\n\n\nParameters\n\nqp1: 2 (string,required) - decsription\nqp2: 3 (string, required) - description\n\n\n\nRequest 'sample 1' (application/vnd.api+json)\n\n\nResponse 400 (application/vnd.api+json; charset=UTF-8)\n    {\n        \"jsonapi\": {\n            \"version\": \"1.6\"\n        },\n        \"data\": [\n            {\n               \"id\": \"1\",\n               \"value\":\"value1\"\n             },\n            {\n               \"id\": \"2\",\n               \"value\":\"value2\"\n             }\n        ]\n    }\n\n```\n. @honzajavorek - Added additional logs while running the dredd in command line, It may be useful to debug deeper\n\n\n```\n/usr/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159\n        if ((base = data['resultData']['result'])['general'] == null) {\n                                                 ^\nTypeError: Cannot read property 'general' of undefined\n  at EventEmitter. (/usr/lib/node_modules/dredd/lib/reporters/apiary-reporter.js:159:50)\n  at emitTwo (events.js:105:20)\n  at EventEmitter.emit (events.js:185:7)\n  at TransactionRunner.emitError (/usr/lib/node_modules/dredd/lib/transaction-runner.js:164:41)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:140:21\n  at /usr/lib/node_modules/dredd/node_modules/async/lib/async.js:246:17\n  at iterate (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:146:13)\n  at async.eachSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:162:9)\n  at _asyncMap (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/usr/lib/node_modules/dredd/lib/transaction-runner.js:146:20)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:389:32\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:147:16\n  at /usr/lib/node_modules/dredd/node_modules/async/lib/async.js:251:17\n  at async.eachSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:142:20)\n  at _asyncMap (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/usr/lib/node_modules/dredd/lib/transaction-runner.js:146:20)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:388:30\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:590:16\n  at proxy (/usr/lib/node_modules/dredd/node_modules/gavel/lib/validate.js:18:10)\n  at Object.validate (/usr/lib/node_modules/dredd/node_modules/gavel/lib/validate.js:60:10)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:549:20\n  at proxy (/usr/lib/node_modules/dredd/node_modules/gavel/lib/validate.js:18:10)\n  at Object.isValid (/usr/lib/node_modules/dredd/node_modules/gavel/lib/validate.js:32:10)\n  at TransactionRunner.validateTransaction (/usr/lib/node_modules/dredd/lib/transaction-runner.js:535:18)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:504:30\n  at TransactionRunner.runHooksForData (/usr/lib/node_modules/dredd/lib/transaction-runner.js:150:14)\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:503:28\n  at /usr/lib/node_modules/dredd/lib/transaction-runner.js:147:16\n  at /usr/lib/node_modules/dredd/node_modules/async/lib/async.js:251:17\n  at async.eachSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:142:20)\n  at _asyncMap (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:245:13)\n  at Object.mapSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:228:23)\n  at Object.async.timesSeries (/usr/lib/node_modules/dredd/node_modules/async/lib/async.js:1048:22)\n  at TransactionRunner.runHooksForData (/usr/lib/node_modules/dredd/lib/transaction-runner.js:146:20)\n  at IncomingMessage. (/usr/lib/node_modules/dredd/lib/transaction-runner.js:502:26)\n  at IncomingMessage.g (events.js:273:16)\n  at emitNone (events.js:85:20)\n  at IncomingMessage.emit (events.js:179:7)\n  at endReadableNT (_stream_readable.js:906:12)\n  at nextTickCallbackWith2Args (node.js:475:9)\n  at process._tickCallback (node.js:389:17)\n```\n. @honzajavorek - Thank you for this. I will try and let you know the updates\n. @marker452 - one suggestion here, to validate the blueprint with json schema we can use api-blueprint-validator or grunt blueprint-validator. This will does the API blueprint validation.\n. ",
    "sumangongali": "Installation directory of node.js  is \n\"C:\\API\\node\"  then i call  this path as HOME\nIn HOME I issued \nnpm install -g dredd\ndredd got installed in the below directory and i see protagonist folder created\nC:\\Users\\sgongali\\AppData\\Roaming\\npm\\node_modules\\dredd\\node_modules\\protagonist\nthen i issued \"dredd init\" under HOME\ni got the below\nC:\\API\\node>dredd init\nmodule.js:341\n    throw err;\n    ^\nError: Cannot find module 'protagonist'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Module.require (module.js:367:17)\n    at require (internal/module.js:16:19)\n    at Object. (C:\\Users\\sgongali.ORADEV\\AppData\\Roaming\\npm\\node_mod\nules\\dredd\\lib\\dredd.js:11:15)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Module.require (module.js:367:17)\nNext i went to the folder where dredd got installed  at various levels i issued \"dredd init\"\nC:\\Users\\sgongali.ORADEV\\AppData\\Roaming\\npm\nC:\\Users\\sgongali.ORADEV\\AppData\\Roaming\\npm>dredd init\nmodule.js:341\n    throw err;\n    ^\nError: Cannot find module 'protagonist'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Module.require (module.js:367:17)\n    at require (internal/module.js:16:19)\n    at Object. (C:\\Users\\sgongali.ORADEV\\AppData\\Roaming\\npm\\node_mod\nules\\dredd\\lib\\dredd.js:11:15)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Module.require (module.js:367:17)\nC:\\Users\\sgongali.ORADEV\\AppData\\Roaming\\npm\\node_modules\\dredd\\bin\nNote: when I did \"npm uninstall dredd\" under HOME i got the below warning\nC:\\API\\node>npm uninstall dredd\nnpm WARN enoent ENOENT: no such file or directory, open 'C:\\API\\node\\package.jso\nn'\nnpm WARN node No description\nnpm WARN node No repository field.\nnpm WARN node No README data\nnpm WARN node No license field.\n. ",
    "colinrymer": "So I think there are a couple environment variables that are worth looking into using - if we want to make this as Jenkins specific as possible, JENKINS_URL is about the only option. A more generic option, that would allow other CI services besides Jenkins to have be compatible out of the box would be BUILD_ID.\n. Thanks for the investigation and thoughtful reply. Totally understand! \ud83d\udc4d \n. ",
    "Teapane": "Thanks for quick response and working on dredd! I was a little skeptical on changing those ones (I guess my search and replace was a little overzealous). I amended the commit to put a few examples back to localhost. Thanks! \n. ",
    "nweber": "Makes sense.  I'll make that change..  I'll also check out the tests; I'm not sure why they're failing.  I'll take another shot at running them locally to see what's up.  I'll update the pull request when it's sorted out.\n. Adjusted naming.\nFixed the failing tests.\nI have not added new unit tests yet.\n. ",
    "lethalpaga": "That is weird indeed..\n- The same happens with dredd 1.0.5\n- I works as expected when pointing it to the apiary mock server\n- I had some ruby hooks configured, I removed them, and I ran dredd with the -a nodejs option, I always get the same result. I'm not sure I understand how the hook mecanism works, is it used even if no hooks are defined?\n- If I remove the first GET action, some of the tests pass and then it hangs again\n- If I move the first GET action to run after the tests that passed, it hangs on that one. So it seems that it's related to that particular action.\nI unfortunately can't post my whole apib file, but it is a very simple blueprint, and the linter shows no warnings.\nGiven that it works with the mocked server I suppose the problem is on my API implementation/server side. I'll try to find some time to run it on a proper server installation.\n. Hi,\nI haven't had time to retest this yet, but I'll close the ticket for now, I'll reopen it/create a new one later if needed.\nThanks for your help!\n. FYI a workaround was to add nginx in front of our Kestrel server. This probably relates to #344 that I didn't see before.\n. ",
    "timgent": "Thanks for the quick reply @honzajavorek , some more details below\nYour Proposed Solution\nOur architecture is that we have a proxy in front of our API that handles auth, and only allows consumers through to the API if they have a valid access token. I think this is becoming more common with greater use of API gateways.\nWhen testing locally or in CI before any deployments only the API is being tested, so no auth component is required. Once deployed (to dev, preprod, etc) the tests will be run against the deployed version of the server which will include a proxy in front of it.\nThe solution as proposed would work for us, though it would be extra nice to be able to provide a flag to disable having to test the auth too (for example when testing locally without our auth infrastructure).\nOnly thing I wasn't clear about with the proposal was how to mark other endpoints in the specification as requiring authorization.\nWorkarounds for the time being\nWe could have a hook that does the initial authorization. We would then somehow need to add the resulting access token as a header for all requests - is this possible?\n. @w-vi Thanks that helps a lot, looks pretty straightforward\n. ",
    "andyantrim": "I agree, also it should be done on a one by one basis, so that if you have a yaml but want to, say change the hooks file, you can pass --hookfiles to override that current setting quickly\n. @tu1ly thanks for the reply, one instance I've found is when I want to use hookfiles or not, so I have the dress.yml file and if I run dredd blueprint.MD --hookfiles=hooks.oh --language python it should take in the stuff from the yaml and also override any params I pass in. I'm currently running against a mock (built to perfectly mirror the docs) and our actual implementation of the API, to check they match so the API endpoint is different! I get that maybe this case is best to just not use the yaml (which is what I'm doing atm) and the mock takes no hooks,\nThanks\n. Yes I'm not sure about node, but if there could be an option to default the yaml values and then have any CLI params override that! But yes, this is my use case! Thanks guys!\n. ",
    "victorsferreira": "hello, everyone\nis there anything new about this?\nis there a way to skip the dredd.yml file or override its values?. By the way, as an alternative I renamed dredd.yml to something else and now I call dredd in two different ways:\n$ dredd <specs> <endpoint> -g <my command>\n$ dredd --config <dredd config>. ",
    "lazlojuly": "Maybe the \"only\" option's array order could be used as first implementation?\n. ",
    "Souler": "I ran into the same issue today, I ended up using the beforeAll hook\n``` js\nvar order = [\n    // Your API names in the wanted order of execution\n]\nhooks.beforeAll(function(transactions, done) {\n    transactions.sort(function(a, b) {\n        var aIdx = order.indexOf(a.name)\n        var bIdx = order.indexOf(b.name)\n        return aIdx - bIdx\n    })\n    done()\n})\n```\n. ",
    "adityasaxena": "@Souler Thank you very much! You saved my day!. @honzajavorek It would help if you could provide an example of the test you mention. The documentation your link points to contains nothing useful I believe. ",
    "c0": "Yes, it's not in the URI Template spec. I just find it odd that we can't document URIs with hyphens (which is a valid URI character).\nThoughts about moving away from the spec?\n. Here's our use case:\n- API endpoints enforce versioning and the Accept header is preferred.\n- As an alternative, a dev can append ?api-version=#, which is very useful for debugging.\nI'm adding dredd tests for both scenarios.\n. ",
    "T0nyACr0ntum": "Hi there. I have a weird issue concering hyphens.\nWhen my blueprint contains a key-value pair with an underscore in key and value, it expects an additional object due to a wrong interpretation.\nHere is the Request from my blueprint:\n\n\nRequest (application/json)\n\nAttributes\nid: 2 (number)\nq_number: ACT0002 (string)\nrole_name: hq_calendar_reader (string)     <<< this is where the error appears\nmarkets: [1] (array)\nactivated: true (boolean)\nisDeleted: false (boolean)\n\n\n\n\n\nAnd the actual output:\nbody:\n{\n      \"id\": 2,\n      \"q_number\": \"ACT0002\",\n      \"role_name: hq_calendar_reader\": \"\",\n      \"markets\": [\n        \"[1]\"\n      ],\n      \"activated\": true,\n      \"isDeleted\": false\n}\nAs you can see the role_name: hq_calendar_reader expects another value.\nThis is somehow caused by the underscore.\nFun fact: When I remove the underscores either on key side or value side it's interpreted right.\nSo \n+ rolename: hq_calendar_reader (string) \n+ role_name: hqcalendarreader (string)   \nwould be interpreted right\nbody:\n{\n      \"id\": 2,\n      \"q_number\": \"ACT0002\",\n      \"rolename\": \"hq_calendar_reader\",\n      \"markets\": [\n       \"[1]\"\n       ],\n      \"activated\": true,\n      \"isDeleted\": false\n}\nbody:\n{\n      \"id\": 2,\n      \"q_number\": \"ACT0002\",\n      \"role_name\": \"hqcalendarreader\",\n      \"markets\": [\n        \"[1]\"\n      ],\n      \"activated\": true,\n      \"isDeleted\": false\n}\n. @honzajavorek Thanks, for the help... I just tried to escape the value but not the key.\nEscaping on both sides works fine!\n. ",
    "MikeRalphson": "Just hit this same problem. Isn't the error message regarding EOF a bit misleading, when the true issue is a missing response model?. @honzajavorek In my case it was a Swagger/OpenAPI definition. I'll try and get a minimal testcase to you.. * Minimal valid swagger definition\n Failing test\n Passing test\nThe only change required to make the test pass is the following diff to the swagger definition:\ndiff\n--- contract/min.json   2017-10-18 08:41:09.693730500 +0100\n+++ contract/minplus.json       2017-10-18 08:46:48.036825400 +0100\n@@ -27,7 +27,8 @@\n                 ],\n                 \"responses\": {\n                     \"200\": {\n-                        \"description\": \"default\"\n+                        \"description\": \"default\",\n+                        \"schema\": {}\n                     }\n                 }\n             }. @honzajavorek excellent - just let me know if you want me to raise the new issue i.e. to avoid duplication.. @honzajavorek Looks like this may have been fixed in fury-adapter-swagger v0.14.0 https://github.com/apiaryio/fury-adapter-swagger/commit/b46e10fc4d6c80a41e3754ce59549b5051f99dee - would be nice to update the dep.. Thanks @kylef yes I patched in the new version and I'm seeing some issues with Unexpected end of multipart data, possibly a missing boundary. Not expecting me messing with deps to be supported!. @honzajavorek Looks good to me, my number of passing tests has increased. Thanks.. When the expected result-code of an API call is a 30x redirect, Dredd appears to skip the test. I appreciate this is not necessarily a common scenario, but I have a real-life API which responds with redirects to images and it would be nice to increase the test coverage further.. Thanks! Just to be clear, my use-case is for the 30x response of a GET request itself to be validated, not followed.. @honzajavorek No, I specifically don't want Dredd to follow the redirect. At the moment, with a swagger definition Dredd skips the test because it has a non-200 expected status code. I would like Dredd to perform the test and validate the 3xx status code is returned.\nIt may be skipping the test for some other reason I don't understand.. Thanks @honzajavorek that should do it. I don't think testing redirects is a common-enough use-case to bother changing the defaults.. @honzajavorek is there the possibility of yaml support for OpenAPI?. I'm not familiar with Gavel, but 3. is what I mean. Yes, I believe the YAML representation should be converted to a JSON object and validated with JSON Schema.. I also saw this where the expected and actual types were text/yaml. . @znevrly is there any reason you cannot use a compatible specification (vendor) extension and call your property x-emoji instead?. ",
    "marker452": "Just to clarify, Dredd is working when run against the actual server, but it doesn't seem to validate against the actual + Body section in the API Blueprint.\nThere is an example here:  https://gist.github.com/marker452/1221d7669b6a2fe740b19ca9eed225ee\nI am running dredd with $ dredd --language python --hookfiles=./hooks/*.py. The response from the actual server validates against the schema in the Gist, but I don't think the body in the Gist would validate against that schema. However, when I run the command, I get no failures.\n. ",
    "dhoffman34": "In case anyone else finds it useful to add + Body validation to dredd, it can easily be done as a hook (python example):\n```\n@hooks.before_each\ndef validate_body(transaction):\n    try:\n        body = transaction['expected'].get('body')\n        schema = transaction['expected'].get('bodySchema')\n    if body and schema:\n        jsonschema.validate(json.loads(body), json.loads(schema))\nexcept (ValidationError, ValueError) as e:\n    transaction['fail'] = str(e)\n\n```\n. ",
    "galenandrew": "@honzajavorek is this a bug with dredd or gavel? If you point me in the right direction, I'd be happy to take a stab at a PR.\n. @honzajavorek it's been a year since the last comment here\u2026any update here?. I understand\u2026thanks for the quick reply!. @honzajavorek looks like maxogden/commonjs-html-prettyprinter#14 has been merged, so this issue can be resolved by updating to html@1.0.0 (this would close #589).\n. ",
    "mcurry7": "@honzajavorek @netmilk I have recently run into an issue with Dredd that is in line with this bug. I am sending a delete request with the status code of 204 to my server. Unfortunately as we use Luracast Restler it is over writing the content type of the request is getting over written so we are unable to change that behavior as 2/3 of our requests require this functionality. There might be a way to handle this with hooks that I am unaware of, however this seems like a blatant bug due to the fact that a 204 response wont have a body and has no need to be parsed for a proper workflow with the 204 response code. Any insight on the fix of this issue would be appreciated. Thank you. \n. @netmilk I have attempted to use this and it still fails. The goal is to get an audio file to be called successfully after removing the binary file output to the body.\nWith one hook I remove the body of the response:\nhooks.beforeValidation('Call Recordings > Access Call Recordings > Get - Recording', function (transaction) {\n  transaction.real.body = '';\n});\nThis succeeds in setting the response body to blank.\nI then run the above hook to force dredd to not parse. However it still tries to parse and throws the error:\n\nerror: Error: Parse Error\n    at CleartextStream.socketOnData (http.js:1639:20)\n    at CleartextStream.read as _read\n    at CleartextStream.Readable.read (stream_readable.js:341:10)\n    at CleartextStream.read as _read\n    at CleartextStream.Readable.read (_stream_readable.js:341:10)\n    at CleartextStream.read as _read\n    at CleartextStream.Readable.read (_stream_readable.js:341:10)\n    at EncryptedStream.write as _write\n    at doWrite (_stream_writable.js:226:10)\n    at writeOrBuffer (_stream_writable.js:216:5)\n    at EncryptedStream.Writable.write (_stream_writable.js:183:11)\n    at write (_stream_readable.js:602:24)\n    at flow (_stream_readable.js:611:7)\n    at Socket.pipeOnReadable (_stream_readable.js:643:5)\n    at Socket.emit (events.js:92:17)\n    at emitReadable (_stream_readable.js:427:10)\n    at emitReadable (_stream_readable.js:423:5)\n    at readableAddChunk (_stream_readable.js:166:9)\n    at Socket.Readable.push (_stream_readable.js:128:10)\n    at TCP.onread (net.js:529:21)\n\nWhich causes this:\n\nHere are the headers:\n- Request\n  - Headers\n```\nAuthorization: apikey (required in string form)\naccept-encoding:gzip, deflate, sdch\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n```\n\n\nResponse 200\n\nHeaders\ncontent-description:File Transfer\ncontent-transfer-encoding:binary\nContent-Type:audio/wav\ncontent-disposition: attachment; filename=out-1001-7203986241-2016-06-17-11-12-59-FunctionalTest.wav\npragma:public\nConnection:keep-alive\nVary:Accept\nCache-Control:private, must-revalidate\nExpires:0\n. This is also the same behavior I have been experiencing with the calls that i have that are returning a response of 204. There is inherently no body and the error happens before the hook above runs. Here is an example of the output \n\n\n```\nerror: DELETE /v1/core/FunctionalTest/dynamicagents/200 duration: 1241ms\nerror: Error: Parse Error\n    at CleartextStream.socketOnData (http.js:1639:20)\n    at CleartextStream.read [as read] (tls.js:514:12)\n    at CleartextStream.Readable.read (_stream_readable.js:341:10)\n    at EncryptedStream.write [as _write] (tls.js:369:25)\n    at doWrite (_stream_writable.js:226:10)\n    at writeOrBuffer (_stream_writable.js:216:5)\n    at EncryptedStream.Writable.write (_stream_writable.js:183:11)\n    at write (_stream_readable.js:602:24)\n    at flow (_stream_readable.js:611:7)\n    at Socket.pipeOnReadable (_stream_readable.js:643:5)\n    at Socket.emit (events.js:92:17)\n    at emitReadable (_stream_readable.js:427:10)\n    at emitReadable (_stream_readable.js:423:5)\n    at readableAddChunk (_stream_readable.js:166:9)\n    at Socket.Readable.push (_stream_readable.js:128:10)\n    at TCP.onread (net.js:529:21)\nhook: skipping body validation\ninfo: Displaying failed tests...\nfail: DELETE /v1/core/FunctionalTest/dynamicagents/200 duration: 1241ms\nfail: \nrequest: \nmethod: DELETE\nuri: /v1/core/FunctionalTest/dynamicagents/200\nheaders: \n    Content-Type: text/plain\n    authorization: apikey (required in string form)\n    accept-encoding: gzip, deflate, sdch\n    accept: application/json, text/javascript, /; q=0.01\n    User-Agent: Dredd/1.1.0 (Linux 3.10.0-123.4.2.el7.x86_64; x64)\n    Authorization:  6QAhVNNE-sv6j-UGzK-wt6ioCSESBQg\nbody: \nexpected: \nheaders: \nbody: \nundefined\nstatusCode: 204\nbodySchema: undefined\nactual: \nstatusCode: 204\nheaders: \n    server: nginx/1.10.0\n    date: Fri, 22 Jul 2016 19:31:06 GMT\n    content-type: application/json; charset=utf-8\n    content-length: 0\n    connection: keep-alive\n    vary: Accept\n    cache-control: no-cache, must-revalidate\n    expires: 0\n    x-powered-by: Luracast Restler v3.0.0rc3\n    content-language: en\nbody: \n```\n. It looks like the problem has to do with the way nodejs is handling it before hand and then the dredd issues occur.\n. ",
    "jakul": "Here is a temporary workaround I've written (using Python hooks)\n``` python\n@dredd_hooks.before_each_validation\ndef fix_204_responses(transaction):\n    \"\"\"\n    Dredd has a bug which expects the response body to be valid JSON on 204\n    responses, but the HTTP Spec says the body should be empty.\n    https://github.com/apiaryio/dredd/issues/196\n    \"\"\"\n    if '> 204' not in transaction['name']:\n        return\nif not transaction['real']['body'] and \\\n        transaction['real']['statusCode'] == 204:\n    # Make the body content valid JSON.\n    transaction['real']['body'] = '{}'\n    transaction['expected']['body'] = '{}'\n\n```\n. ",
    "davepoon": "Gentle reminder, npm is still not up to date ;)\n. Yeah! Congrats!\n. ",
    "nurey": "I was trying the github variant of npm install because the standard install had failed for me. Now it's working. I guess you uploaded the latest version to npmjs?\n. ",
    "Ramblurr": "I'm a fresh dredd user (literally npm install -ged a few minutes ago) running node v.5.5.0, and I'm getting this error when my endpoint config has a path after the host:port.\nHow can I work around this for now?\n. Looks like I had  installed v1.1.0-pre.1. Downgrading to v1.0.10 fixed it (v1.0.11 isn't on npm yet).\n. ",
    "klokane": "For start, pls paste here result of:\n$ ls -la /usr/local/lib/node_modules/dredd/node_modules/dredd-transactions/node_modules/protagonist/build/Release/protagonist.node\nand \nfile /usr/local/lib/node_modules/dredd/node_modules/dredd-transactions/node_modules/protagonist/build/Release/protagonist.node\n. ",
    "lteacher": "Hello.\nNot sure if I am just randomly bumping an issue that is resolved, but today I noticed in our project this current functionality. Actually I find the convenience desired by the referenced issue to be very undesirable in our circumstance. \nInternally, these warnings are skipping tests which should be running and are relied on as part of the CI/CD chain.\nPerhaps, if you want to keep the existing functionality, there could be a cli parameter to consider these compilation warnings as errors whilst the default functionality continues to just skip. If the functionality does intentionally skip, maybe it should be ran as skip for that route?. ",
    "jackbentley": "This has already caught me out. I had an endpoint that was returning an incorrect status code, and dredd had silently skipped the test, as the route had URI parameters specified for another method.. @honzajavorek It looked like the same errors shown without debug to my un-trained-dredd eye \ud83d\ude04 . Is there anywhere I can make it output this to confirm?\n@ddelnano Looks like it might be related to my beforeAll as uncommenting it seems to make the errors go away (except when it appeared once? so maybe not? or it might be some sort of caching that caused that?).\nSometimes it appears twice, and some times appears once. And usually doesn't force-exit (from the Callback was already called), but does sometimes.\nThe beforeAll builds my container, then loads fixtures via nelmio/alice using the NativeLoader.\nMy beforeEach is just this at the moment:\nHooks::beforeEach(function (&$transaction) {\n  $transaction->request->headers->Cookie = \"PHPSESSID=sessionId\";\n});\nMaybe theres something var_dumping/echoing somewhere (can't find anything though)? Or because it's taking a little more time to execute?\nEdit: php hooks version is 1.1.5. Here you go. Had to remove some specifics, but essentially all the same:\nphp\n/** snipped as it turns out it's irrelevant **/. Ok, looking at the error again, I noticed it's saying Requesting tested server errored. The test that the error keeps occuring on is expected to return a 204. It looks like dredd is failing because of the no content? It seems to be failing regardless of if the response code is 204 or not (edit: obviously it should fail if its not a 204, but it fails if it is because of the parse error. This explains why it disappears when I remove the beforeAll fixture loading)\nThe blueprint for the action is just this simple:\n```markdown\nDelete User [DELETE]\n\nResponse 204\n```. Fixed the tests now.\n\nLooks like my server was outputting something into the response body on a 204. Probably something like 0. Forced it to output nothing on a 204 and no more parse errors.\nThe tests were still failing, because my server was returning a Content-Type header on a 204 response. Removing that made everything pass.\nSo, looks like dredd is unable to pull the response body on a 204, to show you it failed?. ",
    "marshall-kapfudza": "I experienced the same issue, to resolve it I stated by checking my node version and I installed the node vision manager then I switched to the version $ nvm use 6\n. ",
    "asbjornu": "I'm seeing this although nvm says I'm using node v6.10.0:\nshell\n$ nvm current\nv6.10.0\nI've also tried to reinstall dredd (leading to nodejs/node-gyp#942), without success. . ",
    "alexey-sh": "same error\nnode v6.10.0\nnpm 3.10.10\n. ",
    "MitMaro": "We all make mistakes, thanks for the quick response!\n. ",
    "stxml": "sorry, dupe of #449 \n. ",
    "argos83": "I'd love to have the protagonist dependency removed. I know it can be skipped when installing dredd with --no-optional. However there's no way to specify that from package.json (see https://github.com/npm/npm/issues/14185). My builds take much longer because of compilation. \nAnd currently in my local dev env with node 10, the compilation fails with:\n../src/parse_async.cc:128:14: error: no matching constructor for initialization of 'v8::TryCatch'\n    TryCatch try_catch;\nSo every time I try to install any node module (not just dredd), npm tries to re-compile protagonist over and over again.\nEDIT: Well, it doesn't look so simple, the protagonist dependency is way down on the tree:\ndredd > gavel > curl-trace-parser > api-blueprint-http-formatter > protagonist  \ud83d\ude1e\nEDIT2: Actually the dependency is on dredd > drafter > protagonist. I wonder if you could depend on drafter.js directly?. Thanks @honzajavorek for the detailed answer and suggestions. I'll take a look at adt to see if I can help with that PR. FYI, responses for POST containing a redirect were not being followed. Only GET responses with redirection. Anyways, I've added tests for both cases.. ",
    "stukker01": "\nActually, it is interesting you found the dredd > gavel > curl-trace-parser > api-blueprint-http-formatter > protagonist dependency path, I was not aware of that one. And it's strange, because installing Dredd with --no-optional does avoid any compilation, even though according to this dependency path it should still compile protagonist as a dependency of the api-blueprint-http-formatter \ud83e\udd14\n\n@honzajavorek protagonist is actually a devDependency of api-blueprint-http-formatter, so I think this is why protagonist doesn't get installed as a subdependency. Btw as @argos83 mentioned there is a dredd > drafter > protagonist path as well, but protagonist is also an optional dependency of drafter. (However it only turns out from drafter's package.json.). ",
    "jbunton-atlassian": "My workaround for this is a bit dodgy, but may be of interest to others. I removed dredd from my devDependencies and added this to the scripts in package.json:\n\"postinstall\": \"npm install --no-save --no-audit --no-optional dredd@^5\",. ",
    "ApiaryBot": ":tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 7.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.3.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 5.4.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.4.6 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ",
    "vitkoczi": "+1. ",
    "matthiasKaeser": "+1. @honzajavorek sorry about the spamming, I wasn't aware of the (well hidden) github reactions. Thx for letting me know.. ",
    "pete001": "We are running into the same issue, would be great to get this fixed. \n. The issue was with using the * notation in the apiblueprint. Sorry for the confusion! \n. ",
    "matthewdias": "Any updates on this?\n. ",
    "JeppeKnockaert": "I've got an example reproducing this issue. I believe it is the generated JSON schema that is incorrect.\nMy apib file: \n```\nFORMAT: 1A\nTest API\nTest route [GET /test]\n\nResponse 200 (application/json)\nAttributes (Item, fixed-type)\n\n\n\nData Structures\nItem (object)\n\ntype (Type, nullable)\n\nType (enum)\n\ntype1\ntype2\n```\n\nGenerated schema versus the tested response:\nhttps://jsonschemalint.com/#/version/draft-04/markup/json?gist=86082c8c39b53359fe6835163fc65569\nIf I add null (without quotes) as one of the possible enum types, the generated JSON schema includes \"null\" (with quotes) as a possible enum type.\nSo, this:\n```\nType (enum)\n\nnull\ntype1\ntype2\n```\n\nresults in this generate schema versus the tested response:\nhttps://jsonschemalint.com/#/version/draft-04/markup/json?gist=f80347a08900d60c4d264b9c8bd1ca79\nFinally, I'd like to conclude with a working combination:\nhttps://jsonschemalint.com/#/version/draft-04/markup/json?gist=458a3729bd732bd5109dbe1fc5d93619. ",
    "octalmage": "I think I'm still having an issue with this and swagger: \nenvironment:\n        type: string\n        x-nullable: true\n        enum:\n        - production\n        - staging\n        - development\nI get: \nfail: body: At '/results/3/environment' Invalid type: null (expected string)\nBut if I add null to the enum, it works. Both x-nullable and null in the enum have to exist though. . ",
    "andybarilla": "I'm still having this issue whether I'm including null in the enum list or not.\nSwagger example:\n```\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: nullable enum\npaths:\n  /test:\n    get:\n      responses:\n        200:\n          description: OK\n          schema:\n            $ref: '#/definitions/NullableEnum'\n        201:\n          description: Created\n          schema:\n            $ref: '#/definitions/NullableEnumPlus'\ndefinitions:\n  NullableEnum:\n    type: object\n    additionalProperties: false\n    properties:\n      color:\n        type: string\n        x-nullable: true\n        enum:\n          - red\n          - blue\n          - green\n  NullableEnumPlus:\n    type: object\n    additionalProperties: false\n    properties:\n      color:\n        type: string\n        x-nullable: true\n        enum:\n          - red\n          - blue\n          - green\n          - null\n```\nTesting:\n```\nnpx dredd nullable-enum.yaml https://localhost --dry-run\nerror: Parser error in file 'nullable-enum.yaml': Cannot read property '$ref' of null on line 11\nerror: Parser error in file 'nullable-enum.yaml': Cannot read property '$ref' of null on line 15\nerror: Error when processing API description.\n```. ",
    "jnj16180340": "This is also a convenient way to work around #883 while not ignoring the test case entirely!. @honzajavorek It's still broken in v4.7.1 and v4.7.2. The second example (below petstore) was working up until dredd 4.6.2\ninput + output\nbash\nnate@momo:~/BioBright/nodeBioBright/node_modules/dredd$ ./bin/dredd http://petstore.swagger.io/v2/swagger.json http://petstore.swagger.io/v2 --level debug\nverbose: Loading configuration file: ./dredd.yml\ndebug: Dredd version: 4.7.2\ndebug: Node.js version: v8.6.0\ndebug: Node.js environment: http_parser=2.7.0, node=8.6.0, v8=6.0.287.53, uv=1.14.1, zlib=1.2.11, ares=1.10.1-DEV, modules=57, nghttp2=1.25.0, openssl=1.0.2l, icu=59.1, unicode=9.0, cldr=31.0.1, tz=2017b\ndebug: System version: Linux 4.10.0-40-generic x64\ndebug: npm version: 5.5.1\ndebug: Configuration: {\"server\":\"http://petstore.swagger.io/v2\",\"options\":{\"_\":[\"http://petstore.swagger.io/v2/swagger.json\"],\"level\":\"debug\",\"l\":\"debug\",\"dry-run\":null,\"y\":null,\"hookfiles\":null,\"f\":null,\"language\":\"nodejs\",\"a\":\"nodejs\",\"sandbox\":false,\"b\":false,\"server\":null,\"g\":null,\"server-wait\":3,\"init\":false,\"i\":false,\"custom\":{},\"j\":[],\"names\":false,\"n\":false,\"only\":[],\"x\":[],\"reporter\":[],\"r\":[],\"output\":[],\"o\":[],\"header\":[],\"h\":[],\"sorted\":false,\"s\":false,\"user\":null,\"u\":null,\"inline-errors\":false,\"e\":false,\"details\":false,\"d\":false,\"method\":[],\"m\":[],\"color\":true,\"c\":true,\"timestamp\":false,\"t\":false,\"silent\":false,\"q\":false,\"path\":[\"http://petstore.swagger.io/v2/swagger.json\",\"http://petstore.swagger.io/v2/swagger.json\"],\"p\":[\"http://petstore.swagger.io/v2/swagger.json\",\"http://petstore.swagger.io/v2/swagger.json\"],\"hooks-worker-timeout\":5000,\"hooks-worker-connect-timeout\":1500,\"hooks-worker-connect-retry\":500,\"hooks-worker-after-connect-wait\":100,\"hooks-worker-term-timeout\":5000,\"hooks-worker-term-retry\":500,\"hooks-worker-handler-host\":\"127.0.0.1\",\"hooks-worker-handler-port\":61321,\"config\":\"./dredd.yml\",\"$0\":\"/home/nate/.nvm/versions/node/v8.6.0/bin/node ./bin/dredd\"},\"custom\":{\"cwd\":\"/home/nate/BioBright/nodeBioBright/node_modules/dredd\",\"argv\":[\"http://petstore.swagger.io/v2/swagger.json\",\"http://petstore.swagger.io/v2\",\"--level\",\"debug\"]}}\nverbose: Using 'base' reporter.\nverbose: Configuring reporters: []\nverbose: Using 'cli' reporter.\nverbose: No backend server process specified, starting testing at once\nverbose: Running Dredd instance.\nverbose: Expanding glob patterns.\nverbose: Reading API description files.\nverbose: Downloading remote file: http://petstore.swagger.io/v2/swagger.json\nverbose: Parsing API description files and compiling a list of HTTP transactions to test.\nverbose: Compiling HTTP transactions from API description file: http://petstore.swagger.io/v2/swagger.json\nverbose: Dredd instance run finished.\nerror: Cannot assign to read only property 'parent' of object '#<AuthScheme>'\nverbose: Exiting Dredd process with status '1'.\ndebug: Using native process.exit() method to terminate the Dredd process.\nverbose: No backend server process to terminate.\n\nIt also crashes (identical error) on swagger.yaml definitions (v2) with paths like this:\nyaml\n  /devices/{device_id}:\n    x-swagger-router-controller: devices\n    get:\n      operationId: get_devices_id\n      security:\n        - JWT: [\"read:devices\"]\n      description: Returns details of a specific device\n      tags:\n        - devices\n      parameters:\n        - $ref: \"#/parameters/device_id_path\"\n      responses:\n        \"200\":\n          $ref: \"#/responses/DeviceIdResponse\"\n        default:\n          $ref: \"#/responses/ErrorResponse\"\nOn the custom swagger.yaml file, this runs:\nyaml\n  /devices/{device_id}:\n    x-swagger-router-controller: devices\n    get:\n      operationId: get_devices_id\n      security:\n        - JWT: [\"read:devices\"]\n      description: Returns details of a specific device\n      tags:\n        - devices\n      parameters:\n        - $ref: \"#/parameters/device_id_path\"\n      responses:\n        #\"200\":\n        #  $ref: \"#/responses/DeviceIdResponse\"\n        default:\n         $ref: \"#/responses/ErrorResponse\"\nThis crashes:\nyaml\n  /devices/{device_id}:\n    x-swagger-router-controller: devices\n    get:\n      operationId: get_devices_id\n      security:\n        - JWT: [\"read:devices\"]\n      description: Returns details of a specific device\n      tags:\n        - devices\n      parameters:\n        - $ref: \"#/parameters/device_id_path\"\n      responses:\n        \"200\":\n          $ref: \"#/responses/DeviceIdResponse\"\n        #default:\n        # $ref: \"#/responses/ErrorResponse\"\nThis does not crash:\nyaml\n  /devices/{device_id}:\n    x-swagger-router-controller: devices\n    get:\n      operationId: get_devices_id\n      #security:\n      #  - JWT: [\"read:devices\"]\n      description: Returns details of a specific device\n      tags:\n        - devices\n      parameters:\n        - $ref: \"#/parameters/device_id_path\"\n      responses:\n        \"200\":\n          $ref: \"#/responses/DeviceIdResponse\"\n        #default:\n        # $ref: \"#/responses/ErrorResponse\"\nOmitting some other examples, it looks like a security block and explicitly specified response code (anything other than default is necessary and sufficient to crash.\nIn this case, the hooks file is like this:\n``js\nhooks.before('auth > /api/v0/oauth2/access_token > POST > 200 > application/json; charset=utf-8', function (transaction) {\n  transaction.request.body ={ \"username\": \"stuff\", \"password\": \"stuff\", \"nodeBioBright_client_id\": \"stuff\", \"scopes\":\n \"\"}`\n})\nhooks.after('auth > /api/v0/oauth2/access_token > POST > 200 > application/json; charset=utf-8', function (transaction) {\n  jwt.token = JSON.parse(transaction.real.body).access_token\n})\nhooks.beforeEach(function (transaction) {\n  transaction.request.headers['Authorization'] = Bearer ${jwt.token}\n})\n``. @honzajavorek Actually, it looks like the behavior I described is a separate issue. Sorry...\nOn dredd 4.7.0, \n  - the other example I posted works fine\n  - petstore fails with error: Cannot read property 'toValue' of undefined.\nOn dredd >4.7.0, \n  - both the other example and petstore fail with error: Cannot assign to read only property 'parent' of object '#<AuthScheme>'. ",
    "paddingme": "Thank you for your great job  and  your fast and detailed answer @netmilk @honzajavorek .\nMy version of Dredd is v1.0.11.\nand I tried with @netmilk 's suggestion:\n+ Response 201 (content-type: application/json;charset=utf-8)\nBut  it didn't work.\n```\nfail: POST /xspj/api/subject/activity/orgs duration: 271ms\nfail:\nrequest:\nbody:\nheaders:\n    Content-Type: application/x-www-form-urlencoded;charset=UTF-8\n    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjUzNjMyNTksImlzcyI6IjBkYzQyM2YyZGYzYjRlNDJiZDI4NzFkZjczMWY2MjdiIn0.DwM2ez07Y5bLfG5ZvYQKSDCJX_jvV_OgrsUxp32uQG4\n    User-Agent: Dredd/1.0.11 (Darwin 15.4.0; x64)\nuri: /xspj/api/subject/activity/orgs\nmethod: POST\nexpected:\nheaders:\n    Content-Type: content-type: application/json;charset=utf-8\nbody:\nstatusCode: 201\nactual:\nstatusCode: 401\nheaders:\n    server: nginx/1.3.6\n    date: Sun, 12 Jun 2016 04:41:10 GMT\n    content-type: text/html;charset=utf-8\n    content-length: 39\n    connection: close\nbody:\n{\"msg\":\"\u9a8c\u8bc1\u5931\u8d25\",\"success\":false}\ncomplete: 0 passing, 0 failing, 1 errors, 0 skipped, 1 total\ncomplete: Tests took 2018ms\ncomplete: See results in Apiary at: https://app.apiary.io/public/tests/run/0cb42ae2-6a87-4f4c-b4f4-d322f4a42f23\n```\nFinally I found that my backend server cannot receive resquest's body content, I fixed it as following:\n```\ntest post request  [POST /xspj/api/subject/activity/orgs{?name}]\n\n\nParameters\n\nname: 456222 (string) - name\n\n\n\nRequest (application/x-www-form-urlencoded;charset=UTF-8)\n\nHeadersAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjUzNjMyNTksImlzcyI6IjBkYzQyM2YyZGYzYjRlNDJiZDI4NzFkZjczMWY2MjdiIn0.DwM2ez07Y5bLfG5ZvYQKSDCJX_jvV_OgrsUxp32uQG4\n\n\n\n\n\nResponse 201\n```\n\n\nthen this post api is passed.\n$ dredd\ninfo: Configuration dredd.yml found, ignoring other arguments.\ninfo: Using apiary reporter.\nwarn: Apiary reporter environment variable APIARY_API_KEY or APIARY_API_NAME not defined.\ninfo: Beginning Dredd testing...\ncomplete: Tests took 2206ms\ncomplete: See results in Apiary at: https://app.apiary.io/public/tests/run/4a9cde5c-d025-49e1-a382-8cc25cff5e9c\n. ",
    "phenixiim": "Hi there, what's the status? We have also problem with \\r:\nParser error in file '../apiary/position.md': (error code 2) the use of carriage return(s) '\\r' in source data isn't currently supported, please contact makers on line 1. Ok, thanks. Thank you very much for you effort, we solved it manually while changed \nCLRF to LF for each .md file.  But next, we were stopped by not fully \nfunction dredd_hooks on windows anyway.\nBUt thanks for that great tool as Dredd is, CI works perfectly at debian \nserver.. Thanks a lot! Just a little question, is it possible to execute tests in exact order? I have a problem with authentication, which needs to be fired first and then the other tests (I have more apibs files) and sometimes the other apibs files are processed, so the tests fails. Thanks\n. Ok, I have discovered, that I can set up the exact docs in dredd.yml:\nblueprint: [\"./apiary/auth_token.md\",\"./apiary/inquiry.md\"]\nBut is thare a way to do it with\nblueprint: ./apiary/*.md?\n. No, this is not working, please help, how could I set up the proper scripts run? Thanks\n. Thanks a lot, I have resolved it by writing standalone auth, maybe the code will be useful to somebody:\n``` python\nimport json\nimport dredd_hooks as hooks\nimport requests\nstash = {}\napi_username = \"XXX\"\napi_password = \"XXX\"\napi_uri = \"XXX\"\n@hooks.before_each\ndef add_token(transaction):\n    if 'token' in stash:\n        print('adding a token')\n    else:\n        stash['token'] = obtain_token()\n    transaction['request']['headers']['Authorization'] = \"Bearer \" + stash['token']\ndef obtain_token():\n    data = {\n               \"api_login_form\": {\n                   \"username\": api_username,\n                   \"password\": api_password\n               }\n           }\n    url = api_uri\n    response = requests.post(url, json=data)\n    parsed_body = json.loads(response.text)\n    token = parsed_body[\"token\"]\n    return token\n```\n. ",
    "litingjun2015": "awk '{ sub(\"\\r$\", \"\"); print }' api-description.apib > api-description.apib-unix.apib\nis tested under windows.. ",
    "benneely": "I'm also interested in finding a fix for this issue. Another potential solution would be to have --only set the skip attribute of the internal transaction object to true at an earlier point in the Dredd lifecycle - before all transactions. Each dredd hook handler could then look to this attribute before executing the intended hook. Admittedly this is a little more hacky than the proposed solution above, but seems like it might be an easier implementation and also allow more flexibility (overwriting --only in the hooks).\n. sounds good and thanks!\n. ",
    "grounded042": "@ddelnano thanks for the quick reply. I followed the example from the goodman repo - I'm actually just trying to get that to work before writing my own hooks. This is my first time writing hooks using Go.\nI've followed the steps for installing goodman, and running $GOPATH/bin/goodman ./hooks gets me output that says Accepting connection.\nI am using version 1.0.11 of dredd.\n. It looks like it's just straight running the go command as dredd blueprint.apib http://localhost:3333 --language go --hookfiles version produces: info: Hook handler stdout: go version go1.6.2 darwin/amd64.\n. Ah, I didn't realize go was not supported in the current version on npm. Works like a charm now. \nDid I just miss something, or is it not documented that you need to run a newer version than the latest on npm?\n. Thanks for the info! Ya'll are awesome and this project is a huge help. Thanks for all the hard work and helping me get go hooks working!\n. ",
    "kostadinstoilov": "@honzajavorek How would the example you gave work? Dredd emits a compilation error when it doesn't have an example value. As far as I understand it won't go pass the parse phase.\n. Personally, what I would find most useful in this scenario is to have support for a hook which injects example path values before parsing, compiling and so on. The most common use case for path variables I can think of is resource identifiers, which are not deterministic and could be environment specific so providing a hook seems the best solution to me.\n. ",
    "hskrasek": "Should default be working? Because that doesn't seem to be the case in v1.2.0. Example of a path I've written in Swagger:\n\"/waterfalls/{placement}\": {\n      \"get\": {\n        \"tags\": [\n          \"Waterfalls\"\n        ],\n        \"summary\": \"Get a waterfall\",\n        \"description\": \"Get a waterfall based on the placement within the application\",\n        \"operationId\": \"getWaterfall\",\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"Device-Info\",\n            \"in\": \"header\",\n            \"type\": \"string\",\n            \"description\": \"A key/value pair header containing data about the application and the device\",\n            \"required\": true\n          }\n        ],\n        \"security\": [\n          {\n            \"apiKey\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An ad waterfall\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"type\": \"string\"\n                },\n                \"message\": {\n                  \"type\": \"string\"\n                },\n                \"data\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"waterfall\": {\n                      \"$ref\": \"#/definitions/Waterfall\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Waterfalls\"\n        ],\n        \"summary\": \"Delete a waterfall\",\n        \"description\": \"Delete a waterfall by placement\",\n        \"operationId\": \"deleteWaterfall\",\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"parameters\": [],\n        \"security\": [\n          {\n            \"apiKey\": []\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Successfully deleted a waterfall\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"name\": \"placement\",\n          \"in\": \"path\",\n          \"type\": \"string\",\n          \"description\": \"Where the AD is being displayed\",\n          \"required\": true,\n          \"default\": \"684936a4-f1f5-48ed-9378-ca9e31cf76a7\"\n        }\n      ]\n    }\n. Ignore my comment, upgraded to 1.4.0 and got past the \"ignoring default issue\". Agree that specifying a default for a required param isn't ideal though\n. ",
    "tomas-fp": "@honzajavorek any update about x-example support??. I would like to define a field as x-test-value in order to define a custom test value used by dredd. The problem is that currently language hooks are not triggered if no default or enum values are present, failing before reaching that phase.\nAny solution or workaround around this? \n. ",
    "unnativ": "Thank you so much... i got output because of your code. thank you. ",
    "jakubzapletal": "Hi @honzajavorek, thanks for the explanation and it makes sense what you described. I think that works as should be. Thank you\n. ",
    "castarco": "Any idea on how to cover this patch with tests? I'm not a coffeescript expert and I'm missing something.\n. Hi @netmilk , I know this is a question about swagger, but how are you expressing that a particular endpoint returns a specific content-type header?\nThx!\n. ",
    "rmharrison": "@netmilk: Any update in terms of a fix? \nStill experiencing an identical bug. Working around by including explicit Content-type in every API end-point is quite cumbersome. \nEven a minimum, \"point in the right direction\" would be useful, e.g. where folks should start looking if they wanted to PR?. Doh. So, the take home is wait for the swagger adapter folks? \nHad a look at the (thankfully small) issue backlog, and I don't see one that's obviously relevant. Which issue should I append to?\nMove to that issue\nLooks like the problem is somewhere between the type-input, which should detect the document wide swagger.consumes/swagger.produces: https://github.com/apiaryio/fury-adapter-swagger/blob/62a86ed319164de54678b6371120792fa0ad0e26/src/parser.js#L806\nAnd where the headers are actually appended (just the JSON it seems): https://github.com/apiaryio/fury-adapter-swagger/blob/62a86ed319164de54678b6371120792fa0ad0e26/src/parser.js#L1033\n. Has there been any movement on resolving this bug?\n2-cents: Identical error using using npm run test-server.\nTest run 1: Works\nTest run 2: Fails because the node server is still running from test run 1, Error: connect ECONNREFUSED 127.0.0.1:300. The test run 1 server is killed.\nTest run 3: Works. ",
    "IRuslan": "@honzajavorek for me the issue is still relevant.\nMy server returns Content-Type: application/json; charset=utf-8 header.\nIn API docs I have (tried both on the top and response level):\nproduces:\n  - application/json; charset=utf-8\nAfter running a dredd test, the result doesn't match, and the expected header value is:\nheaders: \nContent-Type: application/json\nThis workaround works to me on the response definition level:\nheaders:\n  Content-Type:   \n    type: string\n    default: application/json; charset=utf-8. ",
    "ericgriffis": "@netmilk For me, this workaround breaks dredd's killing of the server (using a unicorn server). Using the command bundle exec unicorn in the YML file, the server stops correctly before dredd exits. Using a shell script with the same command, the server continues running.. ",
    "duczen": "I don't believe this work around will work. I added a log entry as the first line in this hook:\nhooks.beforeEachValidation(function(transaction) {\n    hooks.log(\"in beforeEachValidation\");\n    ...\n});\nThe error does indeed occur before the function is called:\n```\nerror: Error: Parse Error\n  at Error (native)\n  at Socket.socketOnData (_http_client.js:361:20)\n  at emitOne (events.js:96:13)\n  at Socket.emit (events.js:188:7)\n  at readableAddChunk (_stream_readable.js:176:18)\n  at Socket.Readable.push (_stream_readable.js:134:10)\n  at TCP.onread (net.js:543:20)\nhook: in beforeEachValidation\nhook: skipping body validation\n```\nThere are also 3 typos in the snippet above.\nvar contentLength = parseInt(transacation['real']['headers'][contetLengthKey],10);\ntransacation and contetLengthKey\nif(contentLengthKey === null || conetntLength === 0){\nand conetntLength\n. Has anyone been able to get this working with hooks? I tried a similar hook in js (above in this thread) and found the parse error is happening before the beforeEachValidation hook gets run.\n. ",
    "bkuhl": "The temporary workaround of adding + Response 204 (text/plain) did not work for me, even when adding text/plain as a Content-Type on the response.\n. ",
    "plroebuck": "No one mentioned section 3.3.3 of RFC7230 which specifies how to determine message body length.. ",
    "arielkirkwood": "@honzajavorek Thank you for noting that this behavior is documented. I think it would be more valuable if the documentation could explain or link to another resource explaining why the behavior is the way it is.. ",
    "jesuscreyes": "Hi @netmilk, thanks for your help. Sorry, I forgot to clarify something. So my Dredd Test works on my local machine fine. It's when I'm running the Dredd Test using the Travis CI tool where I run into this issue.\nSo here's a snapshot of what I get on my local machine (I'm able to execute tests perfectly):\n\nBut when I run the same Dredd command through Travis, I get the issue I mentioned initially.\nHere's my whole dredd.yml:\n\n. Hi @w-vi, I tried out what you suggested, but I encounter the same issue. This is the script I used:\nbefore_script:\n  - sbt run\n  - dredd --server \"echo X\"\nThis is the result I get:\n\nMy conclusion from this is that sbt run is not working correctly on the Travis CI machines. So I no longer think that this is a Dredd issue. I'll move the discussion over to the Travis people and try to find an answer there.\nThanks for your help and suggestions!\n. ",
    "guillemcanal": "Very nice! Can't wait! By the way @netmilk, which part of the dredd code is taking care of gathering example values (for swagger files) ? I just can't figure it out. Many thanks to you ;)\n. Since I really need it, yes of course ;) I'll be able to have a look this weekend. I'm not very found of coffeescript, but I can manage ;)\nedit: oh it's plain JS, hooray\n. Not yet, I'll try to work on it this week.\n. ",
    "TheElk205": "The blueprint can be found under http://docs.bitmovin.apiary.io/api-description-document, like in the dredd command\n. ",
    "RomainEndelin": "Thanks a lot, it worked :+1: .\n. Yes, I've just removed the workaround (adding dist: trusty), and dredd installs perfectly. Thanks :)\n. ",
    "iamharish": "Hi \nI'm seeing similar issue while trying to integrate with Travis using command\n\n\nnpm install -g dredd@3.4.5\n\n\nLogs\n```\n\nnode-gyp rebuild\nmake: Entering directory `/home/travis/.nvm/v0.10.36/lib/node_modules/dredd/node_modules/dredd-transactions/node_modules/fury-adapter-apib-parser/node_modules/drafter/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/ByteBuffer.o\ncc1plus: error: unrecognized command line option \u2018-std=c++11\u2019\ncc1plus: error: unrecognized command line option \u2018-std=c++11\u2019\n```\n\nBut it works when I tried below \n\n\nnpm install -g dredd@3.4.5 --no-optional. Thanks @honzajavorek for looking into it. I'm using v.3.4.5. These tests were working earlier but started failing after I did an npm install while trying to fix some other issue. Surprised to see an old version getting affected by a recent change. Is there a version we can use while the fix is getting ready?. Cool. Eagerly waiting for this. When can we expect a release?. I did upgrade to 4.4.0 but tests were still failing. Checked logs and seems like it's due to a different error now. Shall I file a new issue?\n\n\nerror: RangeError: Maximum call stack size exceeded\n    at emitThree (events.js:140:20)\n    at EventEmitter.emit (events.js:216:7)\n    at TransactionRunner.emitError (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:470:32)\n    at TransactionRunner.emitHookError (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:202:17)\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:181:21\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:1069:9\n    at replenish (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:946:17)\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:950:9\n    at _asyncMap (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:1067:5)\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:1153:16\n    at timeLimit (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:4970:5)\n    at Object.timesSeries (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:980:16)\n    at TransactionRunner.runHooksForData (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:187:20)\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:96:24\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:1069:9\n    at replenish (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:946:17)\n    at iterateeCallback (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:931:17)\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:906:16\n    at /Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/node_modules/async/dist/async.js:1071:13\n    at TransactionRunner.emitResult (/Users/hgokavarapu/.toolbox/homebrew/lib/node_modules/dredd/lib/transaction-runner.js:450:14). @honzajavorek We use strict versioning. Line 7867 https://github.com/box/box-openapi/blob/master/v2.0/openapi-v2.json has the task_assignment definition. And there's no hook specifically for task_assignment but there's a beforeEach hook that should skip the task_assignment\nhooks.beforeEach(function (transaction, done) {\n    //Skip every test other than Legal Hold Policies\n    if (transaction.fullPath.indexOf(\"2.0/legal_hold_policies\") == -1\n            && transaction.fullPath.indexOf(\"2.0/legal_hold_policy_assignments\") == -1\n            && transaction.fullPath.indexOf(\"2.0/file_version_legal_holds\") == -1) {\n        transaction.skip = true;\n    }\n    done();\n});. Sorry for a late reply and YES. Looks like that's the reason. Our swagger spec is hosted at https://github.com/box/box-openapi/blob/master/v2.0/openapi-v2.json and it's 11388 lines \nI think you would be able to replicate the issue just by using the beforeEach hook I have mentioned above\n. ",
    "danilvalov": "@honzajavorek \nPlease, try to set the timeout to 60 seconds or more.\nYou will not receive the error result.\n. ",
    "alex-glv": "Thanks, @honzajavorek \nApparently, the difference between proxied and non-proxied request is the destination host and HTTP request.\nSay, your proxy is at http://proxy and your API endpoint is at http://api.\nTo proxy the request, http request should look as follows:\nGET http://api/v1/endpoint\nHost: http://proxy\n[...]\nThe requests will go through the proxy server.\nSo, finally to use proxy from dredd one has to insert a hook into e.g hooks.js file:\nhooks.beforeEach((transaction, done) => {\n    transaction.fullPath = \"http://api\" + transaction.fullPath;\n    [...]\n});\nAnd issue Dredd command with the  proxy as the destination:\ndredd swagger-spec.json http://proxy  -f hooks.js\nThis resolves the issue for me. Closing.\n. ",
    "IllyaMoskvin": "Just wanted to share my workaround, with the caveat that I'm new to Ruby. I think this will be useful for anyone using servers that don't have a working quiet flag. I'm using Grape, which runs on Rack via Shotgun. I tried doing something like...\nserver: 'shotgun > /dev/null 2>&1'\n...but Dredd would fail when trying to spawn the process. Here's the workaround:\n\n\nCreate server.sh in the project's folder, containing something like this:\n```\nRun shotgun, redirect all output to null (stdout and stderr)\nLaunch it as forked, backgrounded child process\nshotgun > /dev/null 2>&1 &\nSave its process id\nPID=$!\nKill shotgun on exit\nfunction cleanup {\n   kill $PID\n}\ntrap cleanup EXIT\nKeep this script running until Dredd sends SIGKILL\ncat\n```\n\n\nRun chmod +x server.sh\n\n\nIn the project's dredd.yml, use the script as the server:\nserver: './server.sh'\n\n\nEverything seems to be working fine! I do wish there was an intermediate level between warn and info. I'm glad you guys are working on improving the CLI output. Thanks for the great tool!\nEdit 1: Updating server.sh to run in the background until closed by Dredd, then kill shotgun.\nEdit 2: Updated! shotgun successfully exits after testing.. ",
    "thevikas": "Found again. So this issue still lives for 2 years?. It has solved the problem a little. Can I give an array of possible values here?. ",
    "kvacquier": "the certificate is the same than here\nhttps://regalade.nicolaudiegroup.com/views/_new_include/css/bootstrap.min.css  \nMaybe if you test on a local kubernetes the problem will be the same  \nKevin Vacquier,\n108 Rue Ferdinand Barre\n34070 Montpellier\nkvacquier@gmail.com\n. ",
    "BrydenR": "In my case, there is a graphical front end that needs to load an object, otherwise all tests after will fail (because they use the object). Due to some backend problems, the object is currently not loading each time. Each time the object fails to load, the test suite needs to be re-run.\nThe front end continues to be stable because of retry commands, but the api call just fails. Using Selenium, we have graphical tests. In Selenium, this problem of the object not loading is taken care of by a timer (for 60 seconds) and if it fails, retries the individual testcase (allowing for greater flexibility to deal with back-end problems).\nSpecifically what I would be looking for is a way to tell dredd to ignore the results of the last transaction, and send out the transaction again. Ideally, I would like to be able to run a transaction until a timeout, or a success, and have dredd only record the last transaction. \nbasic pseudocode:\nsend transaction\nif transaction failed\n    retry transaction\nelse\n    continue testing\nUsing nodejs, I could implement this code, but the dredd reporter would still report it as a failure, which makes the automatic testing less automatic, as someone would have to check each result.\n. ",
    "greghuc": "@honzajavorek thanks for the response. It would be great if you could express an opinion at the survey. It shouldn't take long: 4 questions in  a tiny markdown template. It's not \"official\", it's just a way of getting feedback about Coffeescript from devs/teams that are currently using it (and maybe changing to ES2015). Opinions gathered will be taken into consideration when considered the future of Coffeescript.\n. Thanks for taking the time :-)\n\nOn 13 Sep 2016, at 10:01, Honza Javorek notifications@github.com wrote:\n@greghuc https://github.com/greghuc Okay! Posted in the Survey.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/apiaryio/dredd/issues/624#issuecomment-246619752, or mute the thread https://github.com/notifications/unsubscribe-auth/AFGSTvOFZoVrGk_7VSEXg7g-cH4WzSopks5qpmZwgaJpZM4J5xE0.\n. \n",
    "thejuan": "I don't have a config file.\nI do have hooks that setup an Auth header but no logic for just PUT\nIf the apib has body and json syntax it works, just not with MSON\nAdam\n. Looks like it may be the same issue.. ",
    "alikh31": "@honzajavorek well that's my thought as well, but I am not quite sure why this issue is popping up.\nIn my machine or my test docker container I can't reproduce it, but somehow it happens in that machine which might be due to the tricky things in nvm.\nthe dummy way that fixes it is having node coffee rather than coffee in package.json\n. @honzajavorek right there isn't much effort, have you guys considered writing the whole thing in ES6 maybe? the difference is not that much after all.\n. sure, that's understandable. no problem. \n. Hey @honzajavorek, thanks for the detailed response. I added a quick fix, please do have a look and let me know if it makes sense.. ",
    "zmorris": "Please excuse my late reply, had to get through the workweek.  I reinstalled Dredd again in my Homestead 0.3.3 box (this is a php 5.6.15 box I use for testing since I do my main development on a php 7.0.8 box, but the slowdown shows on both):\n```\n$ sudo npm install -g dredd\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n\nprotagonist@1.5.1 install /usr/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\ngyp WARN EACCES user \"root\" does not have permission to access the dev dir \"/home/vagrant/.node-gyp/5.0.0\"\ngyp WARN EACCES attempting to reinstall using temporary dev dir \"/usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp\"\nmake: Entering directory /usr/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/ByteBuffer.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownNode.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownParser.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/markdownparser.a\n  COPY Release/markdownparser.a\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HTTP.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSON.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONOneOfParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONTypeSectionParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONValueMemberParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Blueprint.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/BlueprintSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Section.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Signature.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/snowcrash.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/UriTemplateParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HeadersParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/autolink.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/buffer.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/markdown.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/src_map.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/stack.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html_smartypants.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/libdrafter/drafter/src/drafter.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Serialize.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeAST.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeSourcemap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeResult.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractAPI.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractDataStructure.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractSourceMap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Render.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/NamedTypesRegistry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractElementFactory.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/ConversionContext.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Element.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/VisitorUtils.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeCompactVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ComparableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/TypeQueryVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/IsExpandableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ExpandVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/RenderJSONVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/PrintVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/JSONSchemaVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Registry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Query.o\n  AR(target) Release/obj.target/drafter/drafter.a\n  COPY Release/drafter.a\n  CXX(target) Release/obj.target/libsos/drafter/ext/sos/src/sos.o\n  AR(target) Release/obj.target/drafter/sos.a\n  COPY Release/sos.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\n  CXX(target) Release/obj.target/protagonist/src/options_parser.o\n  CXX(target) Release/obj.target/protagonist/src/parse_async.o\n../src/parse_async.cc: In function \u2018void AsyncParseAfter(uv_work_t*)\u2019:\n../src/parse_async.cc:133:39: warning: \u2018void node::FatalException(const v8::TryCatch&)\u2019 is deprecated (declared at /usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp/5.0.0/include/node/node.h:282): Use FatalException(isolate, ...) [-Wdeprecated-declarations]\n         node::FatalException(try_catch);\n                                       ^\n  CXX(target) Release/obj.target/protagonist/src/parse_sync.o\n  CXX(target) Release/obj.target/protagonist/src/protagonist.o\n  CXX(target) Release/obj.target/protagonist/src/result.o\n  CXX(target) Release/obj.target/protagonist/src/v8_wrapper.o\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node\n  COPY Release/protagonist.node\nmake: Leaving directory/usr/lib/node_modules/dredd/node_modules/protagonist/build'\n\nprotagonist@1.5.1 install /usr/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\ngyp WARN EACCES user \"root\" does not have permission to access the dev dir \"/home/vagrant/.node-gyp/5.0.0\"\ngyp WARN EACCES attempting to reinstall using temporary dev dir \"/usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp\"\nmake: Entering directory /usr/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/ByteBuffer.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownNode.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownParser.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/markdownparser.a\n  COPY Release/markdownparser.a\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HTTP.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSON.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONOneOfParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONTypeSectionParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONValueMemberParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Blueprint.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/BlueprintSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Section.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Signature.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/snowcrash.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/UriTemplateParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HeadersParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/autolink.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/buffer.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/markdown.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/src_map.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/stack.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html_smartypants.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/libdrafter/drafter/src/drafter.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Serialize.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeAST.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeSourcemap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeResult.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractAPI.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractDataStructure.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractSourceMap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Render.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/NamedTypesRegistry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractElementFactory.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/ConversionContext.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Element.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/VisitorUtils.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeCompactVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ComparableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/TypeQueryVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/IsExpandableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ExpandVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/RenderJSONVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/PrintVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/JSONSchemaVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Registry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Query.o\n  AR(target) Release/obj.target/drafter/drafter.a\n  COPY Release/drafter.a\n  CXX(target) Release/obj.target/libsos/drafter/ext/sos/src/sos.o\n  AR(target) Release/obj.target/drafter/sos.a\n  COPY Release/sos.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\n  CXX(target) Release/obj.target/protagonist/src/options_parser.o\n  CXX(target) Release/obj.target/protagonist/src/parse_async.o\n../src/parse_async.cc: In function \u2018void AsyncParseAfter(uv_work_t*)\u2019:\n../src/parse_async.cc:133:39: warning: \u2018void node::FatalException(const v8::TryCatch&)\u2019 is deprecated (declared at /usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp/5.0.0/include/node/node.h:282): Use FatalException(isolate, ...) [-Wdeprecated-declarations]\n         node::FatalException(try_catch);\n                                       ^\n  CXX(target) Release/obj.target/protagonist/src/parse_sync.o\n  CXX(target) Release/obj.target/protagonist/src/protagonist.o\n  CXX(target) Release/obj.target/protagonist/src/result.o\n  CXX(target) Release/obj.target/protagonist/src/v8_wrapper.o\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node\n  COPY Release/protagonist.node\nmake: Leaving directory/usr/lib/node_modules/dredd/node_modules/protagonist/build'\n\ndredd@2.1.1 postinstall /usr/lib/node_modules/dredd\nnode scripts/print-installation-guidelines.js\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n::                                                                ::\n::    Install Dredd using npm install dredd@stable in case you    ::\n::        prefer stability over new features (e.g. in CI)         ::\n::                                                                ::\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n/usr/lib\n\u2514\u2500\u252c dredd@2.1.1 \n  \u251c\u2500\u252c dredd-transactions@3.0.0\n  \u2502 \u2514\u2500\u252c fury-adapter-apib-parser@0.3.0\n  \u2502   \u2514\u2500\u252c drafter@1.1.0\n  \u2502     \u251c\u2500\u2500 drafter.js@2.5.1 \n  \u2502     \u2514\u2500\u2500 protagonist@1.5.1 \n  \u251c\u2500\u252c gavel@0.5.4\n  \u2502 \u2514\u2500\u2500 jsonlint@1.6.2  (git://github.com/josdejong/jsonlint.git#85a19d77126771f3177582e3d09c6ffae185d391)\n  \u2514\u2500\u2500 glob@7.1.1 \n```\nI don't see an error so it might be using the native parser?\nEach request/response uses JSON API so it's a little chatty.  Several endpoints respond with up to 10 items having relationships on half a dozen other items, so 5-10 kB each easily.\n. Good news!  I decided to try a bisect and narrowed down which version became slow.  Dredd 1.1.0-pre.2 and above run slowly, while Dredd 1.0.11 and below run quickly.  Here are the install logs:\n$ sudo npm install -g dredd@1.1.0-pre.2\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n- blueprint-transactions@0.0.2 node_modules/dredd/node_modules/blueprint-transactions\n- setimmediate@1.0.5 node_modules/dredd/node_modules/setimmediate\n/usr/lib\n\u2514\u2500\u252c dredd@1.1.0-pre.2 \n  \u2514\u2500\u252c dredd-transactions@0.0.5 \n    \u251c\u2500\u2500 sift@3.2.6 \n    \u2514\u2500\u2500 traverse@0.6.6\n$ sudo npm install -g dredd@1.0.11\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n- call-me-maybe@1.0.1 node_modules/dredd/node_modules/call-me-maybe\n- chance@1.0.4 node_modules/dredd/node_modules/chance\n- core-js@1.2.7 node_modules/dredd/node_modules/core-js\n- babel-runtime@5.8.38 node_modules/dredd/node_modules/babel-runtime\n- deckardcain@0.3.2 node_modules/dredd/node_modules/deckardcain\n- deep-extend@0.4.1 node_modules/dredd/node_modules/deep-extend\n- deref@0.6.4 node_modules/dredd/node_modules/deref\n- discontinuous-range@1.0.0 node_modules/dredd/node_modules/discontinuous-range\n- drafter.js@2.5.1 node_modules/dredd/node_modules/drafter.js\n- drafter@1.1.0 node_modules/dredd/node_modules/drafter\n- es6-promise@3.3.1 node_modules/dredd/node_modules/es6-promise\n- faker@3.1.0 node_modules/dredd/node_modules/faker\n- deckardcain@0.1.6 node_modules/dredd/node_modules/fury-adapter-apib-parser/node_modules/deckardcain\n- fury-adapter-apib-parser@0.3.0 node_modules/dredd/node_modules/fury-adapter-apib-parser\n- lodash@3.10.1 node_modules/dredd/node_modules/inquirer/node_modules/lodash\n- lodash.get@4.4.2 node_modules/dredd/node_modules/lodash.get\n- minim-api-description@0.1.8 node_modules/dredd/node_modules/minim-api-description\n- minim-parse-result@0.2.2 node_modules/dredd/node_modules/minim-parse-result\n- ms@0.7.1 node_modules/dredd/node_modules/ms\n- debug@2.2.0 node_modules/dredd/node_modules/debug\n- ono@2.2.1 node_modules/dredd/node_modules/ono\n- json-schema-ref-parser@1.4.1 node_modules/dredd/node_modules/json-schema-ref-parser\n- ret@0.1.12 node_modules/dredd/node_modules/ret\n- randexp@0.4.3 node_modules/dredd/node_modules/randexp\n- json-schema-faker@0.3.6 node_modules/dredd/node_modules/json-schema-faker\n- sift@3.2.6 node_modules/dredd/node_modules/sift\n- swagger-methods@1.0.0 node_modules/dredd/node_modules/swagger-methods\n- swagger-schema-official@2.0.0-bab6bed node_modules/dredd/node_modules/swagger-schema-official\n- traverse@0.6.6 node_modules/dredd/node_modules/traverse\n- uptown@0.4.1 node_modules/dredd/node_modules/uptown\n- minim@0.14.2 node_modules/dredd/node_modules/minim\n- fury@2.2.0 node_modules/dredd/node_modules/fury\n- validator@5.7.0 node_modules/dredd/node_modules/validator\n- yaml-js@0.1.4 node_modules/dredd/node_modules/yaml-js\n- z-schema@3.18.0 node_modules/dredd/node_modules/z-schema\n- swagger-parser@3.4.1 node_modules/dredd/node_modules/swagger-parser\n- fury-adapter-swagger@0.9.5 node_modules/dredd/node_modules/fury-adapter-swagger\n- dredd-transactions@1.6.0 node_modules/dredd/node_modules/dredd-transactions\n/usr/lib\n\u2514\u2500\u252c dredd@1.0.11 \n  \u251c\u2500\u2500 blueprint-transactions@0.0.2 \n  \u251c\u2500\u252c inquirer@0.11.4\n  \u2502 \u2514\u2500\u2500 lodash@3.10.1 \n  \u2514\u2500\u2500 setimmediate@1.0.5\nLuckily Dredd 1.0.11 works for my needs so I'm able to test much more quickly now.  Hope this helps someone and thanks for your quick replies on this issue.\n. Ah ok I was going off the releases page and didn't realize there were ones between.  Just so everyone knows, I had also tried several higher versions as well as 2+ that ran slowly.  Looks like the 1.1.0-pre releases started the issue, here are the results:\n1. 1.0.11 fast\n2. v1.1.0-pre.0 slow\n3. v1.1.0-pre.1 slow\n4. v1.1.0-pre.2 slow\nHere are the install logs in case they help (if GitHub has a smaller scroll bar box for text snippets like Slack, please let me know):\n$ sudo npm install -g dredd@1.0.11\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n/usr/lib\n\u2514\u2500\u2500 dredd@1.0.11\n```\n$ sudo npm install -g dredd@1.1.0-pre.0\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n\nprotagonist@1.3.0 install /usr/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\ngyp WARN EACCES user \"root\" does not have permission to access the dev dir \"/home/vagrant/.node-gyp/5.0.0\"\ngyp WARN EACCES attempting to reinstall using temporary dev dir \"/usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp\"\nmake: Entering directory /usr/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/ByteBuffer.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownNode.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownParser.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/markdownparser.a\n  COPY Release/markdownparser.a\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HTTP.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/HTTP.h:13,\n                 from ../drafter/ext/snowcrash/src/HTTP.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSON.o\nIn file included from ../drafter/ext/snowcrash/src/MSON.cc:9:0:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONOneOfParser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONSourcemap.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/MSONSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONSourcemap.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/MSONSourcemap.cc:9:0:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONTypeSectionParser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONTypeSectionParser.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONTypeSectionParser.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONValueMemberParser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONValueMemberParser.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/MSONMixinParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONOneOfParser.h:12,\n                 from ../drafter/ext/snowcrash/src/MSONValueMemberParser.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Blueprint.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/Blueprint.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/BlueprintSourcemap.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Section.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Signature.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/Signature.cc:10:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/Signature.cc:10:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/snowcrash.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/ext/snowcrash/src/snowcrash.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/ext/snowcrash/src/snowcrash.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/UriTemplateParser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/UriTemplateParser.h:12,\n                 from ../drafter/ext/snowcrash/src/UriTemplateParser.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HeadersParser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/HeadersParser.h:12,\n                 from ../drafter/ext/snowcrash/src/HeadersParser.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/ModelTable.h:21,\n                 from ../drafter/ext/snowcrash/src/SectionParserData.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SignatureSectionProcessor.h:12,\n                 from ../drafter/ext/snowcrash/src/SectionParser.h:13,\n                 from ../drafter/ext/snowcrash/src/HeadersParser.h:12,\n                 from ../drafter/ext/snowcrash/src/HeadersParser.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/autolink.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/buffer.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/markdown.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/src_map.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/stack.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html_smartypants.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/libdrafter/drafter/src/drafter.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/src/drafter.h:12,\n                 from ../drafter/src/drafter.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/src/drafter.h:12,\n                 from ../drafter/src/drafter.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/cdrafter.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/src/cdrafter.cc:13:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/ext/snowcrash/src/snowcrash.h:12,\n                 from ../drafter/src/cdrafter.cc:13:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Serialize.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/Serialize.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/Serialize.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeAST.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/SerializeAST.h:12,\n                 from ../drafter/src/SerializeAST.cc:10:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/SerializeAST.h:12,\n                 from ../drafter/src/SerializeAST.cc:10:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeSourcemap.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/SerializeSourcemap.h:12,\n                 from ../drafter/src/SerializeSourcemap.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/SerializeSourcemap.h:12,\n                 from ../drafter/src/SerializeSourcemap.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeResult.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractAPI.h:12,\n                 from ../drafter/src/SerializeResult.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractAPI.h:12,\n                 from ../drafter/src/SerializeResult.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractAPI.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractDataStructure.h:12,\n                 from ../drafter/src/RefractAPI.cc:11:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractDataStructure.h:12,\n                 from ../drafter/src/RefractAPI.cc:11:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractDataStructure.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractDataStructure.h:12,\n                 from ../drafter/src/RefractDataStructure.cc:10:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractDataStructure.h:12,\n                 from ../drafter/src/RefractDataStructure.cc:10:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractSourceMap.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractSourceMap.h:12,\n                 from ../drafter/src/RefractSourceMap.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractSourceMap.h:12,\n                 from ../drafter/src/RefractSourceMap.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Render.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/Render.h:12,\n                 from ../drafter/src/Render.cc:9:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/Render.h:12,\n                 from ../drafter/src/Render.cc:9:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/NamedTypesRegistry.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/src/NamedTypesRegistry.h:12,\n                 from ../drafter/src/NamedTypesRegistry.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/NodeInfo.h:12,\n                 from ../drafter/src/NamedTypesRegistry.cc:10:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractElementFactory.o\nIn file included from ../drafter/src/RefractElementFactory.h:13:0,\n                 from ../drafter/src/RefractElementFactory.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../drafter/src/RefractElementFactory.cc:4:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Element.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/VisitorUtils.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeCompactVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ComparableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/TypeQueryVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/IsExpandableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ExpandVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/RenderJSONVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/PrintVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/JSONSchemaVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ApplyVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Registry.o\n  AR(target) Release/obj.target/drafter/drafter.a\n  COPY Release/drafter.a\n  CXX(target) Release/obj.target/libsos/drafter/ext/sos/src/sos.o\n  AR(target) Release/obj.target/drafter/sos.a\n  COPY Release/sos.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/annotation.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/annotation.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/protagonist/src/options_parser.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/options_parser.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/options_parser.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/protagonist/src/parse_async.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/parse_async.cc:3:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/parse_async.cc:3:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n../src/parse_async.cc: In function \u2018void AsyncParseAfter(uv_work_t*)\u2019:\n../src/parse_async.cc:134:39: warning: \u2018void node::FatalException(const v8::TryCatch&)\u2019 is deprecated (declared at /usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp/5.0.0/include/node/node.h:282): Use FatalException(isolate, ...) [-Wdeprecated-declarations]\n         node::FatalException(try_catch);\n                                       ^\n  CXX(target) Release/obj.target/protagonist/src/parse_sync.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/parse_sync.cc:3:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/parse_sync.cc:3:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/protagonist/src/protagonist.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/protagonist.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/protagonist.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/protagonist/src/result.o\nIn file included from ../drafter/ext/snowcrash/src/Blueprint.h:17:0,\n                 from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:12,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/result.cc:1:\n../drafter/ext/snowcrash/src/MSON.h:372:37: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n             std::auto_ptr<Elements> m_elements;\n                                     ^\nIn file included from ../drafter/ext/snowcrash/src/BlueprintSourcemap.h:13:0,\n                 from ../drafter/src/Serialize.h:15,\n                 from ../src/protagonist.h:7,\n                 from ../src/result.cc:1:\n../drafter/ext/snowcrash/src/MSONSourcemap.h:177:51: warning: \u2018auto_ptr\u2019 is deprecated (declared at /usr/include/c++/4.8/backward/auto_ptr.h:87) [-Wdeprecated-declarations]\n         std::auto_ptr<SourceMap<mson::Elements> > m_elements;\n                                                   ^\n  CXX(target) Release/obj.target/protagonist/src/v8_wrapper.o\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node\n  COPY Release/protagonist.node\nmake: Leaving directory/usr/lib/node_modules/dredd/node_modules/protagonist/build'\n- blueprint-transactions@0.0.2 node_modules/dredd/node_modules/blueprint-transactions\n- setimmediate@1.0.5 node_modules/dredd/node_modules/setimmediate\n/usr/lib\n\u2514\u2500\u252c dredd@1.1.0-pre.0 \n  \u2514\u2500\u252c dredd-transactions@0.0.3 \n    \u251c\u2500\u252c protagonist@1.3.0 \n    \u2502 \u2514\u2500\u2500 nan@2.0.9 \n    \u251c\u2500\u2500 sift@3.2.6 \n    \u2514\u2500\u2500 traverse@0.6.6 \n```\n```\n$ sudo npm install -g dredd@1.1.0-pre.1\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n\nprotagonist@1.5.1 install /usr/lib/node_modules/dredd/node_modules/protagonist\nnode-gyp rebuild\n\ngyp WARN EACCES user \"root\" does not have permission to access the dev dir \"/home/vagrant/.node-gyp/5.0.0\"\ngyp WARN EACCES attempting to reinstall using temporary dev dir \"/usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp\"\nmake: Entering directory /usr/lib/node_modules/dredd/node_modules/protagonist/build'\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/ByteBuffer.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownNode.o\n  CXX(target) Release/obj.target/libmarkdownparser/drafter/ext/snowcrash/ext/markdown-parser/src/MarkdownParser.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/markdownparser.a\n  COPY Release/markdownparser.a\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HTTP.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSON.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONOneOfParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONTypeSectionParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/MSONValueMemberParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Blueprint.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/BlueprintSourcemap.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Section.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/Signature.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/snowcrash.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/UriTemplateParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/HeadersParser.o\n  CXX(target) Release/obj.target/libsnowcrash/drafter/ext/snowcrash/src/posix/RegexMatch.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/snowcrash.a\n  COPY Release/snowcrash.a\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/autolink.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/buffer.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/markdown.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/src_map.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/src/stack.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_href_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/houdini_html_e.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html.o\n  CC(target) Release/obj.target/libsundown/drafter/ext/snowcrash/ext/markdown-parser/ext/sundown/html/html_smartypants.o\n  AR(target) Release/obj.target/drafter/ext/snowcrash/sundown.a\n  COPY Release/sundown.a\n  CXX(target) Release/obj.target/libdrafter/drafter/src/drafter.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Serialize.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeAST.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeSourcemap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/SerializeResult.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractAPI.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractDataStructure.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractSourceMap.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/Render.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/NamedTypesRegistry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/RefractElementFactory.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/ConversionContext.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Element.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/VisitorUtils.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeCompactVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/SerializeVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ComparableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/TypeQueryVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/IsExpandableVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/ExpandVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/RenderJSONVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/PrintVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/JSONSchemaVisitor.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Registry.o\n  CXX(target) Release/obj.target/libdrafter/drafter/src/refract/Query.o\n  AR(target) Release/obj.target/drafter/drafter.a\n  COPY Release/drafter.a\n  CXX(target) Release/obj.target/libsos/drafter/ext/sos/src/sos.o\n  AR(target) Release/obj.target/drafter/sos.a\n  COPY Release/sos.a\n  CXX(target) Release/obj.target/protagonist/src/annotation.o\n  CXX(target) Release/obj.target/protagonist/src/options_parser.o\n  CXX(target) Release/obj.target/protagonist/src/parse_async.o\n../src/parse_async.cc: In function \u2018void AsyncParseAfter(uv_work_t*)\u2019:\n../src/parse_async.cc:133:39: warning: \u2018void node::FatalException(const v8::TryCatch&)\u2019 is deprecated (declared at /usr/lib/node_modules/dredd/node_modules/protagonist/.node-gyp/5.0.0/include/node/node.h:282): Use FatalException(isolate, ...) [-Wdeprecated-declarations]\n         node::FatalException(try_catch);\n                                       ^\n  CXX(target) Release/obj.target/protagonist/src/parse_sync.o\n  CXX(target) Release/obj.target/protagonist/src/protagonist.o\n  CXX(target) Release/obj.target/protagonist/src/result.o\n  CXX(target) Release/obj.target/protagonist/src/v8_wrapper.o\n  SOLINK_MODULE(target) Release/obj.target/protagonist.node\n  COPY Release/protagonist.node\nmake: Leaving directory/usr/lib/node_modules/dredd/node_modules/protagonist/build'\n/usr/lib\n\u2514\u2500\u252c dredd@1.1.0-pre.1 \n  \u2514\u2500\u252c dredd-transactions@0.0.4 \n    \u2514\u2500\u252c protagonist@1.5.1 \n      \u2514\u2500\u2500 nan@2.2.1 \n```\n$ sudo npm install -g dredd@1.1.0-pre.2\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n/usr/bin/dredd -> /usr/lib/node_modules/dredd/bin/dredd\n/usr/lib\n\u2514\u2500\u252c dredd@1.1.0-pre.2 \n  \u2514\u2500\u2500 dredd-transactions@0.0.5\n. ",
    "cbarraford": "I'm seeing this problem as well. Just POST to /users, i get a failure 1 out of 4 times because the body is {}.\n```\n\n$ dredd --version\ndredd v2.1.1 (Darwin 16.1.0; x64)\n```\n\nIf theres more info I can gather to help, let me know.. So I believe the problem is with nested objects. In the attached swagger.json file, I have a schema \"UserCreate\" that wraps the object \"UserInput\" with the key of \"user\". There seems to be some kind of race condition (maybe?) when we have nested schemas within schemas. Hope this helps\nswagger.json\n{\n  \"swagger\": \"2.0\",\n  \"host\": \"localhost:3000\",\n  \"consumes\": [\n    \"application/json\"\n  ],\n  \"produces\": [\n    \"application/json; charset=utf-8\"\n  ],\n  \"basePath\": \"/\",\n  \"info\": {\n    \"version\": \"0.1.0\",\n    \"title\": \"title\",\n    \"description\": \"description\",\n    \"contact\": {\n      \"name\": \"john smith\"\n    }\n  },\n  \"securityDefinitions\": {\n    \"basic\": {\n      \"type\": \"basic\",\n      \"description\": \"HTTP Basic Authentication\"\n    }\n  },\n  \"parameters\": {\n    \"location\": {\n      \"name\": \"location\",\n      \"in\": \"query\",\n      \"description\": \"Location (latitude, longitude)\",\n      \"required\": false,\n      \"type\": \"string\"\n    },\n    \"range\": {\n      \"name\": \"range\",\n      \"in\": \"query\",\n      \"description\": \"Range (in miles)\",\n      \"required\": false,\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"search\": {\n      \"name\": \"search\",\n      \"in\": \"query\",\n      \"description\": \"Search\",\n      \"required\": false,\n      \"type\": \"string\"\n    },\n    \"order\": {\n      \"name\": \"order\",\n      \"in\": \"query\",\n      \"description\": \"Sort order. (ex 'name DESC')\",\n      \"required\": false,\n      \"type\": \"string\"\n    },\n    \"page\": {\n      \"name\": \"page\",\n      \"in\": \"query\",\n      \"description\": \"Page number (ex 2)\",\n      \"required\": false,\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"per_page\": {\n      \"name\": \"per_page\",\n      \"in\": \"query\",\n      \"description\": \"Items per page\",\n      \"required\": false,\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"id\": {\n      \"name\": \"id\",\n      \"enum\": [\n        \"__id__\"\n      ],\n      \"in\": \"path\",\n      \"description\": \"Item Identifier (ex 'd85348fc-a75a-4b36-8f91-5c1295d6d13c')\",\n      \"required\": true,\n      \"type\": \"string\"\n    }\n  },\n  \"paths\": {\n    \"/users\": {\n      \"post\": {\n        \"description\": \"Create a user\",\n        \"operationId\": \"createUserById\",\n        \"tags\": [\n          \"Users\"\n        ],\n        \"security\": [\n          {\n            \"basic\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"user\",\n            \"in\": \"body\",\n            \"description\": \"User attributes to create user with\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/UserCreate\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"201\": {\n            \"description\": \"User response\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/User\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"User\": {\n      \"properties\": {\n        \"email\": {\n          \"type\": \"string\",\n          \"format\": \"email\"\n        }\n      },\n      \"required\": [\n        \"email\"\n      ]\n    },\n    \"UserInput\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/User\"\n        },\n        {\n          \"required\": [\n            \"password\",\n            \"password_confirmation\"\n          ],\n          \"properties\": {\n            \"password\": {\n              \"type\": \"string\",\n              \"pattern\": \"[a-zA-Z]{10}\"\n            },\n            \"password_confirmation\": {\n              \"type\": \"string\",\n              \"pattern\": \"[a-zA-Z]{10}\"\n            }\n          }\n        }\n      ]\n    },\n    \"UserCreate\": {\n      \"properties\": {\n        \"user\": {\n          \"$ref\": \"#/definitions/UserInput\"\n        }\n      }\n    }\n  }\n}\ndredd output\nNotice the request body is {} and that the expected output is {\"email\":\"XXXXX\"}, when it should be wrapped in {\"user\": {\"email\"\n```\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: 0=./integration/hooks.rb\ninfo: Spawningruby` hooks handler process.\nwarn: Error connecting to the hooks handler process. Is the handler running? Retrying.\nwarn: Error connecting to the hooks handler process. Is the handler running? Retrying.\nwarn: Error connecting to the hooks handler process. Is the handler running? Retrying.\ninfo: Hooks handler stdout: ./integration/hooks.rb\nStarting Ruby Dredd Hooks Worker...\nwarn: Error connecting to the hooks handler process. Is the handler running? Retrying.\ninfo: Successfully connected to hooks handler. Waiting 0.1s to start testing.\ninfo: Hooks handler stdout: Dredd connected to Ruby Dredd hooks worker\nfail: POST /users duration: 56ms\ninfo: Sending SIGTERM to hooks handler process.\ninfo: Displaying failed tests...\nfail: POST /users duration: 56ms\nfail: headers: Header 'content-type' is missing\nbody: Can't validate real media type 'text/plain' against expected media type 'application/schema+json'.\nstatusCode: Status code is not '201'\nrequest:\nmethod: POST\nuri: /users\nheaders:\n    Content-Type: application/json\n    Accept: application/json; charset=utf-8\n    User-Agent: Dredd/2.2.1 (Darwin 16.1.0; x64)\n    Authorization: Basic emFuZV9rbGluZzE5OnBhc3N3b3Jk\n    Content-Length: 2\nbody:\n{}\nexpected:\nheaders:\n    Content-Type: application/json; charset=utf-8\nbody:\n{\n  \"email\": \"eRB1tVfB@DEiHQNqIoMolB.dk\"\n}\nstatusCode: 201\nbodySchema: {\"properties\":{\"email\":{\"type\":\"string\",\"format\":\"email\"}},\"required\":[\"email\"]}\nactual:\nstatusCode: 500\nheaders:\n    connection: close\n    content-length: 77\nbody:\nAn unhandled lowlevel error occurred. The application logs may have details.\ncomplete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total\ncomplete: Tests took 3659ms\n``. After digging further into the problem, i believe the problem is something to do withformat: urlfor thewebsite` property. . ",
    "timrcoulson": "Went down the dep chain and looks like it's related to an update of fury-adapter\n. Thanks for digging into it guys. I found the issue/feature(!) and it's not related to those commits.\nIt was something happening intermittently, and here's why:\nIn my request, only the email was required; meaning that password, first_name and last_name would appear intermittently in test runs:\nRegisterRequest:\n    required:\n      - email\n    properties:\n      email: \n        type: string\n        format: email\n      password:\n        type: string\n        format: password\n      first_name:\n        type: string\n        pattern: ^[a-zA-Z]+$\n      last_name:\n        type: string\n        pattern: ^[a-zA-Z]+$\nWhenever password was included, the entire request body was dropped (perhaps some security feature?). I could repro this simply by making password the only required field.\n. ",
    "hannesvdvreken": "I would use some kind of http client middleware that returns mock responses when under test. That way you don't even need the dredd hooks.\n. ",
    "fgblomqvist": "Is what @hannesvdvreken wrote still considered the best solution? Sounds a bit odd to me to mix production and test code just to have the requests be mocked automatically if running in a test environment. Although, I cannot think of a way that Dredd could make this easier since it is trying to be so separate from the code it is testing. Unless Dredd could provide a mock server that you can configure in a request easily (e.g. set endpoint and what it should return).. You are certainly correct. Though, I would use the afterEach hook since this is something I would want to check for each test separately. Thanks for the advice!. I just realized this might not have anything to do with Dredd. Opened an issue on the api blueprint repo instead (https://github.com/apiaryio/api-blueprint/issues/426). Gonna close this one.. ",
    "rkchilaka": "Hi, \nOn going through the code, i have identified two problems, \n1. if you run this on mac, the path \"/var/www/html/dummy.yml\" breaks down as following, \n- \"/\"  --> the root of the file system\n\n\"var\" --> refers to the hidden folder, you can see this by \"command + shift + .\", and of-course hidden folder var doesn't contain www/html/dredd.yml, that's why dredd is unable to consume this yml file.\nas @honzajavorek pointed out, dredd should return a reason and hint to fix, I think that fix should be as below,\nif (configPath && fs.existsSync(configPath)) {\n      logger.info(Configuration '${configPath}' found, ignoring other arguments.);\n      this.argv = configUtils.load(configPath);\n    }\nis the code in present loadDreddFile function and if --config is empty, the default './dredd.yml' never gets loaded, because configUtils.load function never gets called and it has if (!path) { path = './dredd.yml'; }, which is redundant at this point. we can fix this by adding some simple if else statements and writing statements inside each of them for specific cases, I can do it, i will try to submit a pull request fixing this.\n. @honzajavorek i have gone through the discussion thrice already!, to be sure that i am not missing anything, there should be some Command line options, analogous to curl, where we can specify -L option for redirecting the requests. The same here would be very helpful. Don't change the default behaviour because not many want to test the redirects. Please provide an option for enabling the redirects. \ud83d\ude00\n. I specify using schemas, where required, i am giving default values.\nBelow, only some attributes are required, remaining may or may not come depending on the request, for example at the present moment, i don't require \"brand\" attribute, but the request is failing by telling me that 'brand' attribute is not present. Thanks. \ud83d\ude00\n\nyaml\ndefinitions:\n  successBinDetails:\n    type: object\n    properties:\n      bin:\n        type: number\n      brand:\n        type: string\n      issuer:\n        type: string\n      countryCode:\n        type: string\n      country:\n        type: string\n      categoryCode:\n        type: string\n      category:\n        type: string\n      programCode:\n        type: string\n      program:\n        type: string\n      status:\n        type: string\n      sisupported:\n        type: string\n      zeroRedirectSupported:\n        type: string. thanks, my mistake. i am new to dredd and swagger, thanks for guiding me patiently. Thanks \ud83d\ude00. Yes, But i have another problem, it is about required properties, can you please take a look at it and get back to me, if you know the solution. thanks \ud83d\ude00\nhttps://github.com/swagger-api/swagger-editor/issues/1795. Thanks @honzajavorek . you are great! \ud83d\ude00. @honzajavorek , explain me what is the intended functionality of done(). what exactly is the job of done(). For example.\nhooks.beforeAll((transaction,done)=>{\nswitch(transaction.name):\ncase(\"this doesn't match with transaction.name\"):\ndone();\nbreak;\ncase(\"this also doesn't match with transaction.name\");\ndone();\nbreak;\n});\nIf i try to run this, i will only get two lines. is it because dredd did not really exited beforeAll CallBack function? I want to know, how can i use done() and in which situations i can use done(). Thanks \ud83d\ude00. @honzajavorek I understand and I really thank you for your contribution for the open source. I am also really excited. Can you please tell me how to debug the node_module, how to go through each step by step execution. I want to know the structure and how to debug a node_module, especially dredd. Please point to me a tutorial about debugging a node_module or in this particular case dredd. Thank you, you are great \ud83d\ude00. Thanks, I will look into the hooks files in the NodeJS, if i can write them without bugs, i will try to create a pull request, thank you.. Dredd doesn't follow redirects, but postman does, check if that is the case.. @honzajavorek , I will be glad to implement the above functionality in dredd, with your approval. Can you please tell me about logging in reporters, so finally dredd won't be using winston at all?. Thanks for the detailed review. I am grateful for guidance and support. \ud83d\ude00. ",
    "stefan-endouble": "Thanks @honzajavorek for the fast reply.\nWould be nice to have a way to add required files in the configuration of dredd.yml like\nyaml\nblueprints: [../common.apib, docs.apib]\nor\nyaml\nrequired: [../common.apib]\nblueprint: docs.apib\nAnd this would just concatenate the files and run on the end-result. \nAs my particular use case doesn't need the whole API tested, as testing each individual part has more value when debugging. \n. ",
    "alextes": "I think I missed some steps from CONTRIBUTING. I'll take a look later today.. You can read up on it here https://github.com/kelektiv/node-uuid/issues/142\nBroofa the original maintainer flagged he did not have the time to maintain. The repo was handed off to the current owner Kelektiv. Maintainer of the fork is in agreement.\nI can list a couple of practical reasons but if you want more re-assuring I think the guys involved will do a better job than I.\nKeep in mind since the maintainer of node-uuid has flagged it deprecated every user of this module will get an npm warning explaining they should no longer use node-uuid but use uuid instead.\nHope that clears things up @honzajavorek!. ",
    "RedDevilHat": "I think about this error it is necessary to disclose at the time of validation to the blueprint editor, but thank you. ",
    "tiagoalves": "Thanks for the quick response.\nI went ahead with your suggestion and I'm able to get the full swagger definition with swagger-parser. I'm just at a state where I'm printing the parsed swagger spec and the Dredd transaction object but I think everything I need appears to be present to match the request info and figure out each request's security/authentication settings.\nI also agree with your generalization of the problem. \n. ",
    "scflode": "Hi @honzajavorek,\nthanks for the quick reply. I just wasn't sure if I might be overlooking something.\nJust as a note: Swagger UI supports this (as it's part of json-schema). The reasoning about the security issue I don't fully get. But I might miss something here (didn't think to hard about this yet). We basically use it to de-duplicate definitions like f.e. error messages which are used in different APIs and should be kept the same.\nCurrently I installed a workaround by using https://github.com/whitlockjc/json-refs to inline the external definitions to a temporary file and then using Dredd with this file.\nAlso this seems to be an issue in the Fury.js Swagger adapter and not in Dredd itself so this one likely can be closed. \nThanks for your time looking into it!. ",
    "artrunde": "+1. ",
    "jvrsantacruz": "+1\nI plan to have all my entities as single json files to be used both by application validation and swagger. I'm not willing to maintain all that duplicated information.. ",
    "motoyasu-saburi": "hi @honzajavorek\nThanks for the quick reply!\nThis is the minimum project file that fails.\ndredd.yml\ndry-run: null\nhookfiles: null\nlanguage: nodejs\nsandbox: false\nserver: null\nserver-wait: 3\ninit: false\ncustom: {}\nnames: false\nonly: []\nreporter: []\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\ncolor: true\nlevel: info\ntimestamp: false\nsilent: false\npath: []\nhooks-worker-timeout: 5000\nhooks-worker-connect-timeout: 1500\nhooks-worker-connect-retry: 500\nhooks-worker-after-connect-wait: 100\nhooks-worker-term-timeout: 5000\nhooks-worker-term-retry: 500\nhooks-worker-handler-host: localhost\nhooks-worker-handler-port: 61321\nconfig: ./dredd.yml\nblueprint: document.apib\nendpoint: 'http://localhost:8080'\ndocument.apib\n```\nFORMAT: 1A\nHOST: http://localhost:8080\nstanby\nhoge [/api/jobs{?bar}]\nfoo [GET]\n\n\nParameters\n\nbar: false (required, boolean) - failed\n\n\n\nResponse 200\nThis is error at the time of execution.\ninfo: Configuration './dredd.yml' found, ignoring other arguments.\nerror: Compilation error in file 'document.apib': Required URI parameter 'bar' has no example or default value. ( > hoge > foo)\nwarn: Compilation warning in file 'document.apib': Ambiguous URI parameter in template: /api/jobs{?bar}\nNo example value for required parameter in API description document: bar ( > hoge > foo)\nerror: Error when processing API description.\n```\n\n\nCan you tell me which file is likely to cause the problem?\nI will search if possible.. Thank you for quick response \ud83d\ude02 . @honzajavorek \nI found this cause \ud83d\ude04 \nI thought about making a correction and sending pullRequest.\nbut, I can't think of a good fix method. \ud83d\ude2d \nFirst cause is this condition.\nhttps://github.com/apiaryio/dredd-transactions/blob/5b7f09f1777797451098864257175869e5f6b43e/src/validate-parameters.coffee#L6\nif param.required and not param.example and not param.default\n param.required set ture => true\n not param.exampe set (boolean)false => true\n* not param.default set false => true\nAs a result, this param is set to result.errors\n\"Required URI parameter '\" + paramName + \"' has no example or default value.\";\nSecond cause is this condition.\nIf the first problem is resolved, it will result in an error here.\nhttps://github.com/apiaryio/dredd-transactions/blob/5b7f09f1777797451098864257175869e5f6b43e/src/expand-uri-template-with-parameters.coffee#L44\nif param.example\nvalue of param.example is exist.\nbut, this value is (boolean)false.\nAs a result, Dredd go to else and get an error.\nhttps://github.com/apiaryio/dredd-transactions/blob/5b7f09f1777797451098864257175869e5f6b43e/src/expand-uri-template-with-parameters.coffee#L48\n\nP.S.\ncompileParameters result\n\n\nbar: false (optional, boolean)\n{ bar: { required: true, default: undefined, example: false,  values: [] } }\n\n\nbar: false (optional, string)\n{ bar: { required: true, default: undefined, example: 'false',values: [] } }\n\n\nbar: 20 (optional, number)\n{ bar: { required: true, default: undefined, example: 20,     values: [] } }. @honzajavorek  Thank you quickly answer!\nI tried 4 spaces indentation pattern.\nhowever, that won't change anything \ud83d\ude2d \n\n\n4 spaces pattern.\n```\nFORMAT: 1A\nHOST: http://localhost:9000\nhoge (foo)\nGroup ApplicationController\napplication\napplications [/api/applications{?offset,limit,sortOrder,text,unreadOnly}]\napplication list [GET]\nget applications list\n\n\nParameters\n\noffset (number, optional)\nDefault: 0\n\n\nlimit (number, optional)\nDefault: 20\n\n\nsortOrder: DESC (optional, string)\ntext (optional, string)\nunreadOnly (boolean, optional)\nDefault: false\n\n\n\n\n\nResponse 200\n\n\nResponse 400\n\n\nResponse 401\n\n\n```\nresult\ninfo: Configuration './dredd.yml' found, ignoring other arguments.\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: 0=./hook.js\nfail: GET /api/applications?offset=0&limit=20&sortOrder=DESC&text=20&unreadOnly=false duration: 157ms\ninfo: Displaying failed tests...\n...\nDredd set  mistake URI parameter test=20.\nhook.js and dredd.yml is non custom.\n. I thought this cause is here \ud83e\udd14 \ndefaultValue is not initialized in loop process.\nhttps://github.com/apiaryio/dredd-transactions/blob/master/src/compile.coffee#L166\nIf initialization is not done, I think that the previous defaultValue value will be inherited  to the next defaultValue.\n. ",
    "whiskeyseven": "I am experiencing the same issue. When testing the exact same swagger yml multiple times, It fails to create a post body on a small percentage of tries. This is sometimes coupled with the same parse error:\n(warning code 3) Unable to generate application/json example message body out of JSON Schema\nmy dredd version output:\ndredd v3.0.0 (Darwin 16.4.0; x64)\nmy swagger (kept very simple for isolating this problem):\n```\nswagger: \"2.0\"\nexcluded host info for security\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n/events:\n# Store an Event\n    post:\n      tags:\n        - Events\n      summary: Store a Event\n      description: Store a Event\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Event object that needs to be added to storage\n          required: true\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                description: Name of event\n              city:\n                type: string\n                description: City of event\n              provState:\n                type: string\n                description: Province or State of event\n              startDate:\n                type: string\n                format: date\n                description: Start date of event (YYYY-MM-DD)\n              endDate:\n                type: string\n                format: date\n                description: End date of event (YYYY-MM-DD)\n            required:\n              - name\n              - city\n      responses:\n        \"405\":\n          description: Invalid input\n        \"200\":\n          description: Successful post\n```\nmy command:\ndredd dredd_test.yaml http://(hostname)\noutput:\n```\ninfo: Beginning Dredd testing...\nfail: POST /events/api/api/v1/events duration: 270ms\nskip: POST /events/api/api/v1/events\ninfo: Displaying failed tests...\nfail: POST /events/api/api/v1/events duration: 270ms\nfail: body: Can't validate. Expected body Content-Type is application/json but body is not a parseable JSON: Parse error on line 1:\n^\nExpecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'EOF'\nstatusCode: Status code is not '200'\nrequest: \nmethod: POST\nuri: /events/api/api/v1/events\nheaders: \n    Content-Type: application/json\n    Accept: application/json\n    User-Agent: Dredd/3.0.0 (Darwin 16.4.0; x64)\n    Content-Length: 42\nbody: \n{\n  \"name\": \"Excepteur\",\n  \"city\": \"sit\"\n}\nexpected: \nheaders: \n    Content-Type: application/json\nbody: \nstatusCode: 200\nactual: \nstatusCode: 405\nheaders: \n    cache-control: no-cache\n    x-ratelimit-limit: 60\n    x-ratelimit-remaining: 58\n    vary: User-Agent\n    content-type: application/json\n    content-length: 180\n    accept-ranges: bytes\n    date: Wed, 01 Mar 2017 21:07:57 GMT\n    connection: close\n    server: GoalLine\n    x-xss-protection: 1; mode=block\nbody: \n{\n  \"data\": {\n    \"title\": \"Required Fields Missing\",\n    \"error\": \"The following, required fields are missing from your submission: Province/State, Start Date, End Date, Gender\"\n  },\n  \"status\": \"405\"\n}\ncomplete: 0 passing, 1 failing, 0 errors, 1 skipped, 2 total\ncomplete: Tests took 279ms\n```\nrun again, with NO CHANGES:\n```\nwarn: Parser warning in file 'dredd_test.yaml': (warning code 3) Unable to generate application/json example message body out of JSON Schema on line 87\nwarn: Parser warning in file 'dredd_test.yaml': (warning code 3) Unable to generate application/json example message body out of JSON Schema on line 87\ninfo: Beginning Dredd testing...\nfail: POST /events/api/api/v1/events duration: 259ms\nskip: POST /events/api/api/v1/events\ninfo: Displaying failed tests...\nfail: POST /events/api/api/v1/events duration: 259ms\nfail: body: Can't validate. Expected body Content-Type is application/json but body is not a parseable JSON: Parse error on line 1:\n^\nExpecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'EOF'\nstatusCode: Status code is not '200'\nrequest: \nmethod: POST\nuri: /events/api/api/v1/events\nheaders: \n    Content-Type: application/json\n    Accept: application/json\n    User-Agent: Dredd/3.0.0 (Darwin 16.4.0; x64)\nbody: \nexpected: \nheaders: \n    Content-Type: application/json\nbody: \nstatusCode: 200\nactual: \nstatusCode: 405\nheaders: \n    cache-control: no-cache\n    x-ratelimit-limit: 60\n    x-ratelimit-remaining: 53\n    vary: User-Agent\n    content-type: application/json\n    content-length: 192\n    accept-ranges: bytes\n    date: Wed, 01 Mar 2017 21:06:34 GMT\n    connection: close\n    server: GoalLine\n    x-xss-protection: 1; mode=block\nbody: \n{\n  \"data\": {\n    \"title\": \"Required Fields Missing\",\n    \"error\": \"The following, required fields are missing from your submission: Name, City, Province/State, Start Date, End Date, Gender\"\n  },\n  \"status\": \"405\"\n}\ncomplete: 0 passing, 1 failing, 0 errors, 1 skipped, 2 total\ncomplete: Tests took 264ms\n```\nI do not believe this is the issue as answered/closed in #637 as mentioned above. I have definitely set 'name' and 'city' as required.\nany help appreciated.\n. I think I've figured this out.\nthanks to @pksunkara 's hunch about json-schema-faker, I finally went and experimented with my data using a gist. The issue is with the \"format\" parameter in the schema properties.\nSee this gist:\nhttp://json-schema-faker.js.org/#gist/2c8648060736ec01329e9ac1d6cd4438\nBy changing the \"date\" format value to \"date-time\", the faker executes correctly. I was seeing strange sporadic behavior because my \"date\" formatted property was not required, and thus was only included at random. Had I included either of my date fields in the \"required\" array, my post body would have been blank every time.\nAdditionally, I checked @CBarraford 's issue, and his hunch was correct. Format \"url\" causes the same error. Changing the format to \"uri\" executes normally.\nIt seems json-schema-faker has not implemented all of the available \"format\" values specified in the Swagger 2 spec.. date is definitely used in the Swagger 2 documentation. I'm not certain about url\nI'm having trouble finding a definitive list, to be honest.. It appears the 2 specifications are slightly different, with overlap:\nhttp://swagger.io/specification/\n(includes date)\nhttp://json-schema.org/latest/json-schema-validation.html#rfc.section.7\n(does not include date but does include email and some other options not explicitly in the swagger specification)\nAs such, I don't know that this is a \"bug\" in json-schema-faker (since it does seem to adhere to the json-schema spec), but it does cause an issue with its inclusion in dredd, as dredd is designed to parse valid swagger 2 documents which may contain date\n. ",
    "discordianfish": "It looks like I have the same issue. Maybe an regression? Here is the relevant snippet:\npaths:\n  /user:\n    post:\n      summary: Create new user\n      parameters:\n        - name: body\n          in: body\n          required: true\n          schema:\n            type: object\n            properties:\n              email:\n                type: string\n              password:\n                type: string\n            required:\n              - email\n              - password\n      responses:\n        201:\n          description: OK\n          schema:\n            $ref: '#/definitions/Ok'\nThe schema requires email and password and the body parameter is marked as required too, yet the body generated is empty:\n```\nrequest: \nmethod: POST\nuri: /api/user\nheaders: \n    Accept: application/json\n    User-Agent: Dredd/3.2.0 (Linux 4.4.0-62-generic; x64)\nbody: \n```. Okay, I figured it out: I was simply missing 'consumes' definition. Without that, it just doesn't create the body.\nWasn't obvious to me at least.. ",
    "resistdesign": "@honzajavorek \nThe issue seems obvious: namespae has no c. But here is what I have:\n\nWhat is your OS? macOS Sierra 10.12.1\nWhat is your terminal? OS X Terminal/bash\nWhat command did you run and what exact output did it print? \ninput: dredd init -r apiary -j apiaryApiKey:********** -j apiaryApiName:*********\n* = redacted\n\n\nI will not supply further output.\nWhat is in your dredd.yml? I don't know what this is.\nWhat's your dredd --version output? dredd v2.2.5 (Darwin 16.1.0; x64). I uninstalled and reinstalled dredd and now everything works fine. No idea what the issue was.. @honzajavorek LOL, ain't that how it is! :P. \n",
    "justin-calleja": "Just found out about dredd init and its support for \"command to start API backend server\"... which basically solves this problem.\nIt's weird how the express server is hanging but this is no longer an issue for me if there's built-in support to do what I originally wanted.. Update: it would be better if I could kick off Dredd testing after the test server is up. If I try to build my code and then run the test server (using the latest code), this takes longer than the default server-wait of 3 seconds in dredd-config.yml and the tests fail.\nIn order to avoid this, is there a way to start a server in beforeAll and then proceed with Dredd testing?. @honzajavorek thanks for the quick reply :)\nUnfortunately, no it doesn't work as there's the same problem (I have actually tried it). I want to avoid relying on a timeout and run tests when I'm sure that the server is up and running (that's why I want to do it programmatically via beforeAll).. @honzajavorek I am calling the hook callback myself in the Express server's listen callback i.e. once the server is up, I am calling done() to prceed with the tests. The problem is that execution is never entering the Express server's listen callback for some reason I can't figure out...\nI have written an example repo to reproduce this:\nhttps://github.com/justin-calleja/dredd-express-issue. ",
    "al-the-x": "As a solution, I'd propose that beforeAll / afterAll should throw an Error if the done callback is never invoked, much the same way that asynchronous tests in mocha and jasmine behave if their done callbacks are not invoked within a (configurable) time period. This would prevent future bug reports by folks legitimately trying to use the async API but fat-fingering or forgetting the call to done as well as addressing the immediate problem while beforeAll / afterAll don't recognize the number of params their callbacks require.. Happy to do so, if you'll point me at the relevant prior art. We're increasingly using dredd at work, so I might even get some daylight hours for it.. The only thing that seems odd to me is passing an Error object to the done callback... I'm not familiar with that pattern in other tools, either. I've only used done in a Promise chain -- as in then(done, done) or then(done).finally(done) -- while throw-ing or assert-ing normally.\nTo that point, raising an AssertionError inside a test, regardless of synchronicity, should produce a test failure, right? Perhaps we should start with some more realistic or less trivial test scenarios?. ",
    "belrion": "find an example to use transaction.fullPath.replace() to substitute the correct value in the hooks.js.\nYou have to define the enum: \"xx\" in the swagger.yml file as part of the parameters: to replace 'xx' with the value you wanted.. if you run with --names, it will skip the test. After removing the --names option, the test runs fine on Windows.. ",
    "vejja": "\nIf so, how do you test if the response was gzipped or not?\n\nIf the server sent the Content-Encoding: gzip header. ",
    "kxmatejka": "I tried do this through async call, but test runs without modification with parameter /customer/1. And after all I see in terminal:\ncomplete: See results in Apiary at: https://app.apiary.io/oscustomers/tests/run/698891d...\nhook: /customer/22833490\nhook: Deleting user id: 22833490\nhooks.js:\n```\nvar delete_allowed = false;\nhooks.after('Address > Address > Edit customer detail', function (transaction) {\n    delete_allowed = true;\n});\nhooks.before('Customer > Customer > Delete customer', function (transaction, done) {\n    var timer;\ntimer = setInterval(function () {\n    if (delete_allowed) {\n        transaction.fullPath = transaction.fullPath.replace('/1', '/' + stash['user_id']);\n        hooks.log(transaction.fullPath);\n        hooks.log('Deleting user id: ' + stash['user_id']);\n        clearInterval(timer);\n    } else {\n        hooks.log('Waiting for some test');\n    }\n}, 1000);\n\ndone();\n\n});\n```. Thanks, that's exactly what I need!. ",
    "karpilin": "@honzajavorek thanks for looking at it.\nhere hosts file:\n```\n$ cat /etc/hosts\n\nHost Database\n\nlocalhost is used to configure the loopback interface\nwhen the system is booting.  Do not change this entry.\n\n127.0.0.1   localhost\n255.255.255.255 broadcasthost\n::1             localhost . @honzajavorek I run symfony build-in server\n$ bin/console s:r localhost:8000\n[OK] Server running on http://localhost:8000                                                                           \n// Quit the server with CONTROL-C.                                                                                     \nPHP 5.6.29 Development Server started at Wed Mar 15 11:20:18 2017\nListening on http://localhost:8000\nDocument root is ***\nPress Ctrl-C to quit.\n``. @honzajavorek it actually DOES work when I start a php server on127.0.0.1instead oflocalhost`. \nthe problem is that despite the api endpoint is set to http://localhost:8000 , the api calls are sent to http://127.0.0.1:8000.. I think it did, but then I tried to rollback to previous versions all the way to 4.1.0, and dredd-transactions down to 4.2.0. but still was getting this error. \nSo the tests, that I believe were previously working, are failing now.. ",
    "sajantha": "hi @honzajavorek \ncan we connect to public api endpoint instead of local host using dredd?. thanks @michalholasek  ,but sorry i am completely new to this. Can u pls give me the example of a valid URL scheme.\nThe end point i tried to connect is a aws one which somewhat looks like this xxxxxxx.xxxxxxx-xx.eu-west-1.amazonaws.com .Is it a valid call. Thanks michal\nOn Thu, Apr 19, 2018, 7:50 PM Michal Holasek notifications@github.com\nwrote:\n\nIn the context of server location it is protocol://hostname, eg.\nhttps://example.com/. Add a protocol (I presume you are using http, so\nhttp://xxxxxxx.xxxxxxx-xx.eu-west-1.amazonaws.com) and it will be valid\nserver location.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/721#issuecomment-382754805, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AYH6zn0O8lqeEFp-Wlg1IHk6tztNmqWGks5tqJ0ogaJpZM4MLS5q\n.\n. I am having a soap API . I tried to validate the soap API having the  content type : text/xml  (POST method.)\nI have prepared a swagger file without providing the example request body in the file .\nI stored my request body which is in xml format in a file and passed the content to the request body using below code\nvar requestBody = fs.readFileSync('RequestBody.xml','utf8');\ntransaction.body=requestBody;\nin hook file @before \nBut when i execute it , it is throwing me the the exception\n\"syntaxerror unexpected token in json at position 0 \"\nIs it possible to validate a soap api in dredd?\n. @honzajavorek  I havent passed the payload in the swagger . I have  given an empty request body , haven't specified anything other than the basepath , content type and header for the request.\n\n\nActually my payload somewhat looks like below\n<soap:Envelope\nxmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n\n...\n\n\n...\n  \n  ...\n  \n\n\nI am not sure how to define that in apiary. So to pass the payload , what i did was to store the payload in a file  , and pass that as a request body in hook file (hooks.before transaction) using the code below.\nvar requestBody = fs.readFileSync('RequestBody.xml','utf8');\ntransaction.body=requestBody;\nI was planing to store the response body inside  a variable in the hook file itself (var responseBody=transaction.real.body; )and validate it in hooks.beforeValidation.\nThe response is also an xml , similar to that of my request.\nBut the dredd is throwing the exeption in hooks.before transaction itself as it was reading the content as JSON instead of xml as u mentioned.\nI am not sure how to resolve this issue ...\n. ",
    "arpitbhatt027": "In both of the cases using 127.0.0.1 and localhost, not working.\nHere are the config file details\nmodule.exports = {\n  port: 8000,\n  dbUser: 'XXXX',\n  dbPassword: 'XXXX',\n  dbHost: 'localhost',\n  db: 'XXXXX',\n  serverURL: 'http://127.0.0.1:8000'\n}\nError: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1170:14). @honzajavorek yes. ",
    "ywett02": "@honzajavorek I sent you email with details of our apiary.apib file.. ",
    "austin-a": "I'm trying to use Dredd for a project and I'm encountering a similar error. Gavel.js seems to be crashing in the same location as your example, but I'm not using an image.\nverbose: About to perform an HTTPS request to the server under test: PUT <pathtoAPI>\nverbose: Handling HTTP response from tested server\nverbose: Running 'beforeEachValidation' hooks\ndebug: Running hooks...\nverbose: Running 'beforeValidation' hooks\nverbose: Validating HTTP transaction by Gavel.js\ndebug: Determining whether HTTP transaction is valid (getting boolean verdict)debug: Gavel.js validation errored: TypeError: argument string is required\n    at Object.parse (C:\\Users\\AAmort\\AppData\\Roaming\\npm\\node_modules\\dredd\\node_modules\\media-typer\\index.js:141:11)\nTypeError: this.emitError is not a function\n    at C:\\Users\\AAmort\\AppData\\Roaming\\npm\\node_modules\\dredd\\lib\\transaction-runner.js:634:14. yaml\nput:\n      tags:\n        - ServiceQuotes\nconsumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/json\n        - application/xml\n...\nparameters:\n        - name: serviceQuoteStatus\n          in: body\n          required: true\n          schema:\n            maxItems: 1\n            $ref: '#/definitions/serviceQuoteStatus'\n          description: ''\n        - name: id\n          in: path\n          required: true\n          description: ''\n          type: string\n          x-example: '123456'\nThe schema reference is defined here:\nyaml\nserviceQuoteStatus:\n    type: object\n    properties:\n      accountNumber:\n        type: string\n      salesChannel:\n        type: string\n      status:\n        type: string\n    default: '\"status\": \"Cancel\"'\nThis is for a put request, at first I was afraid that I was sending an empty request for a field that was required, so I tried to setup a default value for the serviceQuoteStatus object, but now I'm wondering if it is a problem with the expected response. The expected response is a 204 with no content. Perhaps my problem is related to #556.. responses:\n    '204':\n        description: No Content. ",
    "TotempaaltJ": "This makes a lot more sense, especially as Dredd's the one mentioning the hook files it found.. Hey, it'd be super sweet if there was a native solution for this. We're running into this as well now. Maybe null could be an argument to language? The spawnHandler and terminateHandler calls could just be bypassed in that case.\nIt seems kind of pointless to have the whole handler host/port configuration if Dredd then wants to set it up itself anyway, right?\nI was about to create a different issue for this, but this is probably a more appropriate place.. Alright I created #755 ^. ",
    "betchi": "Thanks!\nIt was a very easy mistake.\nSorry!. ",
    "honzatrtik": "\nbut you can at least in theory pass dredd the custom hook handler command in your case the docker run \n\nIm afraid, this is not possible, because you can not run docker container inside docker container (it is actually possible but not in our case), anyway - maybe I can try to pass some dummy command, which will output string \"Starting\"... I will try and lat you know.\nThanks for the answer!. ",
    "rayzeller": "Does anyone have an example dredd.yml to achieve the above bypass? included my docker-compose.yml and dredd.yml, and sleep.js but I can't seem to get it working.\nhttps://gist.github.com/rayzeller/255fbbf88f9686b3062e84a67dbfa8fa\nhttps://gist.github.com/rayzeller/77d0df2c33be05a064257590081a749e\nhttps://gist.github.com/rayzeller/eaf49b661f5bbb6fa1b723972193ec81\nCurrent error:\nWhen i run dredd-hooks-ruby ./hooks.rb on api, then\ndocker-compose up dreddhooks, my tests run, but it doesn't hit the hooks. I have a bunch of logging in place that doesn't hit. And it also doesn't throw any error when the server's not running at all.\nIt seems that dredd is bypassing any connection to the hook server when passing the sleep.js bypass into the yml file. Was this issue possibly introduced in a new version in the past 1.5 years?. @honzajavorek i have those set in my dredd.yml. does dredd not always respect the yml? should i put them in command line?\nhooks-worker-handler-host: http://api\nhooks-worker-handler-port: 61321. AH. i see it now. correct me if i'm wrong, but It looks like if nodejs is the language, then dredd uses the current filesystem for the hooks file. and does not (always?) start a server?\nhttps://github.com/apiaryio/dredd/blob/8d517ac8f50f64be79f7eb1d058c1f894c100a6c/lib/addHooks.js#L56\nanyway, i was able to get hooks to register by changing my sleep.js to the following:\n```\nvar ignore;\nignore = function() {\n  return console.log('ignoring termination');\n};\nprocess.on('SIGINT', ignore);\nconst hooks = require('hooks');\n//example hook just to get things going!\nhooks.before('auth > Facebook Auth > Callback (Get) > 200 > application/json', (transaction) => {\n  transaction.request.headers.Authorization = 'Basic: YWxhZGRpbjpvcGVuc2VzYW1l';\n});\nsetInterval((function() {}), 1000);\n``\nMeaning. the hooks server doesn't get called at all.\n. Awesome, thanks. It definitely says that in the docs, but I missed it!. For anyone else needing a quick POC for using hooks withjs` in docker, here's an abbreviated version:\ndocker-compose.yml\n```\nversion: '2'\nservices:\n  postgis:\n    image: mdillon/postgis:11-alpine\n    volumes:\n      - postgis:/var/lib/postgresql/data\n    env_file:\n      - '.env'\napi:\n    depends_on:\n      - 'postgis'\n    build: .\n    ports:\n      - '3000:3000'\n    volumes:\n      - '.:/app'\n    env_file:\n      - '.env'\ndredd:\n    depends_on:\n      - 'api'\n    image: apiaryio/dredd\n    volumes:\n      - './dredd.yml:/dredd.yml'\n      - './hooks.js:/hooks.js'\nvolumes:\n  postgis:\n```\ndredd.yml\ncolor: true\ndry-run: null\nhookfiles: hooks.js\nlanguage: nodejs\nrequire: null\nserver: null\nserver-wait: 3\ninit: false\ncustom: {}\nnames: false\nonly: []\nreporter: apiary\noutput: []\nheader: []\nsorted: false\nuser: null\ninline-errors: false\ndetails: false\nmethod: []\nloglevel: warning\npath: []\nhooks-worker-timeout: 5000\nhooks-worker-connect-timeout: 1500\nhooks-worker-connect-retry: 500\nhooks-worker-after-connect-wait: 100\nhooks-worker-term-timeout: 5000\nhooks-worker-term-retry: 500\nhooks-worker-handler-host: http://api\nhooks-worker-handler-port: 61321\nconfig: ./dredd.yml\nblueprint: http://api:3000/apidocs\nendpoint: http://api:3000\nhooks.js\n```\nconst hooks = require('hooks');\nhooks.beforeEach((transaction) => {\n  console.log(\"YEET\");\n  transaction.request.headers['X-User-Id'] = '1';\n  transaction.request.headers['X-User-Authentication-Token'] = 'notreal'\n});\nsetInterval((function() {}), 1000);\n```\nand then\ndocker-compose up api\ndocker-compose up dredd. OK, it turns out the issue for me was that the hardcoded 127.0.0.1 in dredd_hooks_ruby prevented me from making a connection. changing it to 0.0.0.0 fixes that issue. will make a PR to address the hardcoding.. ",
    "IngmarStein": "I'm indeed on Node 7.x. Good to know - I think there are more issues that may be related to the Node version, e.g. a reported duration of \"NaNms\".. @honzajavorek this fixes the issue also mentioned in #765. The goodman documentation was updated for https://github.com/snikch/goodman/releases/tag/0.2.1 but not here, sorry about that.. Thanks for getting this in so fast \ud83d\udcaf . ",
    "IngmarSteinCW": "Pinging @honzajavorek. Done :+1:. Done, thanks.. ",
    "Simulalex": "So, I might be wrong (I'm more of a JUnit/Java person, so I'm a bit out of my element here), but it looks like that test is just setting the header without a config file present. The issue I'm seeing is that header values aren't being appended with the -h argument when a config file is used. \nSo, for example, if I run \ndredd --config documentation/dredd.yml -h \"foo:bar\"\nthe header foo:bar isn't sent to the server. But if I delete the dredd.yml file and run\ndredd -h \"foo:bar\"\nthe header is sent.. ",
    "C-D-Lewis": "This appears to be caused by missing the examples type. See difference:\n\"examples\": {\n  \"id\": \"Uk7WdgFAMQtehsRawgdwEkCn\",\n  \"createdAt\": 1490368131932,\n  \"updatedAt\": 1490368131932,\n  \"name\": \"_custom\"\n}\n\"examples\": {\n  \"application/json\": {\n    \"id\": \"Uk7WdgFAMQtehsRawgdwEkCn\",\n    \"createdAt\": 1490368131932,\n    \"updatedAt\": 1490368131932,\n    \"name\": \"_custom\"\n  }\n}\nAny insight into the actual cause (or if this is undefined behavior) would be appreciated.. Thanks for looking at this! I understand what's happening now and I can see it in retrospect.. The explanation around custom media types is reason enough not to change it I think. Perhaps a note somewhere in the docs explaining that forgetting any media types in examples will produce strange behavior.\nFeel free to close!. ",
    "hcliff": "It's actually running fine now, don't mind me!. ",
    "driesvints": "This looks good. What I'm currently sorely missing is a summarized way to see passed/failed requests.\nSomething like:\n$ dredd spec.apib http://0.0.0.0:3000/api --level short\npass: GET /events\npass: GET /events/1\npass: DELETE /events/1\npass: DELETE /events/1\ncomplete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total\nDone in 10.00s.\nOr perhaps this? This is even better because this way you can distinct the two examples for the same METHOD call on an endpoint.\n$ dredd spec.apib http://0.0.0.0:3000/api --level short\npass: Events > Events collection > Get Events\npass: Events > Events collection > Get Event\npass: Events > Events collection > Delete Event > Example 1\npass: Events > Events collection > Delete Event > Example 2\ncomplete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total\nDone in 10.00s.\nWith failures showing at the end as you proposed above?. That actually looks a lot better than the current implementation. But I think an extra level which reduces it to a single line could also have its purpose (in CI outputs etc).\nIt's definitely not something which needs to happen for the first release, perhaps we can work on this later and continue with the above proposal now?. Or even a dot level so you get something like this:\n```\n..... 5/5\ncomplete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total\nDone in 10.00s.\n```\nThis is especially handy in CLI reports.. ah yeah but you can't use that in combination with sending reports to apiary right? . > You should be, Dredd supports multiple reporters.\nTIL\n. Heya. Any update on this? It's really giving us a headache. Builds fail randomly.. @honzajavorek Thank you! :). @honzajavorek heya, thanks for looking into this!\nI'm using the latest version of the hooks: 1.1.5.\nI don't have a dredd.yml. I have two scripts defined in my package.json because I need to test to a public and a private specification. That looks like this:\n\"scripts\": {\n    \"build\": \"hercule spec/public/intro.apib -o build/public.apib && hercule spec/private/intro.apib -o build/private.apib\",\n    \"public\": \"yarn build && dredd build/public.apib http://0.0.0.0:3000/api/public --server=\\\"env APP_ENV=testing DB_DATABASE=beatswitchtest php ../artisan serve -q --host 0.0.0.0 --port 3000 --env testing\\\" --language=\\\"../vendor/bin/dredd-hooks-php\\\" --hookfiles=\\\"hooks/public/hooks.php\\\" --hooks-worker-handler-host=\\\"0.0.0.0\\\" --hooks-worker-connect-timeout=\\\"300000\\\" --reporter=\\\"apiary\\\" --reporter=\\\"dot\\\"\",\n    \"private\": \"yarn build && dredd build/private.apib http://0.0.0.0:3000/api --server=\\\"env APP_ENV=testing DB_DATABASE=beatswitchtest php ../artisan serve -q --host 0.0.0.0 --port 3000 --env testing\\\" --language=\\\"../vendor/bin/dredd-hooks-php\\\" --hookfiles=\\\"hooks/private/hooks.php\\\" --hooks-worker-handler-host=\\\"0.0.0.0\\\" --hooks-worker-connect-timeout=\\\"300000\\\" --reporter=\\\"apiary\\\" --reporter=\\\"dot\\\"\"\n  }\nCumbersome I know but I can't use the same dredd.yml for each. I have all of the api stuff in an api/ subdirectory, that's why you see the ../ references.\nI didn't change the hooks recently. It's hard to track this down. We run hundreds of builds each week. I'd say the timeouts have always happened in some form. We always updated the timeout for them but it doesn't seems to solve the issues anymore now.\nI've updated Dredd to the latest version (4.1.2) about a week ago but it didn't solve the problems. Why downgrading? Did you mean upgrading? We're running v3.5.1 now on master (see issue description).. Unfortunately not... work is keeping me from spending time on this and I'm on vacation this week. I'll try to see if they'll allow me to get back to this next week. Sorry about the delay but unfortunately out of my hands atm. \ud83d\ude15. I've got some time this week to work on this.\n\nBTW, you could use --config\n\nTIL \ud83d\ude00\n\nDo you think you could run couple of builds with Dredd v3.3.1 to see whether you experience the timeouts as well?\n\nYep, will try. I'll let you know the results.. @honzajavorek unfortunately the problem persists with 3.3.1 \ud83d\ude14. @ddelnano how would I do such a tcpdump?. @ddelnano getting this back when I try to run it (sorry real noob here)\ntcpdump: lo0: No such device exists\n(SIOCGIFHWADDR: No such device). @ddelnano it's only specifically happening on CircleCI. Heya, sorry for the lack of updates. I'll be away from my job for a few weeks so it might be a while before I reply. I'll try to get back to this when I get back. Thanks for your patience \ud83d\ude4f . Heya. We've finally successfully migrated to the CircleCI 2.0 setup and haven't experienced this problem again. So I suspect a timeout was the culprit. Since this issue has already been pretty time consuming for us both I suggest we leave it at this for now.\nThanks again to you both for being so helpful! . ",
    "clementgarnier": "Hi there! \nRegarding exit codes, I've noticed that dredd returns 0 even when tests are errored (e.g. when the server didn't start). Is that intentional? \nThank you!. Thank you so much for the timely fix! When should we expect this to be released?. ",
    "shadowhand": "@honzajavorek thanks for your feedback, we'll take it into consideration.. ",
    "adambabik": "No problem! Thanks for quick merge and release! . ",
    "robinsonrengaraj": "Hey\nIts Spring mvc ( rest api).\nOn Thu, May 4, 2017 at 11:33 AM, Honza Javorek notifications@github.com\nwrote:\n\nHi @robinsonrengaraj https://github.com/robinsonrengaraj, what exactly\nis \"Sprint rest\"? This is something you'd normally do by Dredd hooks\nhttps://dredd.readthedocs.io/en/latest/hooks/.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/778#issuecomment-299255584, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AT3J0_0TJGUj0gCtCpgauCSm3FDpYSBZks5r2gv6gaJpZM4NQ-6o\n.\n. Thank you for the detail response.\n\nOn Tue, May 9, 2017 at 1:03 AM, Honza Javorek notifications@github.com\nwrote:\n\nSpring is a framework in Java.\nThere are no Java hooks\nhttps://dredd.readthedocs.io/en/latest/hooks-new-language/ yet. You\nwould either use a different language particularly for the hooks (Go, JS,\nPerl, PHP, Python, Ruby), but then you might be limited in what's possible\nto do with your application in the hooks. E.g. to setup some fixtures in\nthe database, you'd need to create an ad-hoc connection just for the hooks,\nnot being able to leverage any of the goodies the Spring framework offers\nyou. For instance, see the JS example\nhttps://dredd.readthedocs.io/en/latest/hooks-nodejs/#handling-sessions\nof modifying the transaction and adding a header.\nThe other option would be to contribute Java hooks\nhttps://dredd.readthedocs.io/en/latest/hooks-new-language/.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/778#issuecomment-300079111, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AT3J01mj7OztD_92UkPmirOA1PPGWC2Aks5r4A-9gaJpZM4NQ-6o\n.\n. \n",
    "hudovisk": "Same problem here, dredd just hangs on endpoint that POST multipart/form-data. ",
    "marcosinger": "hey guys, any status update about this bug?\nI am not a dredd/node expert, but reading the request docs about multipart forms and dredd source code seems the issue is there.\nI also validate this problem creating a request page on https://requestb.in and sending a POST multipart/form to it. Dredd hangs as both guys said before.\nA workaround would be great until we not have a better solution. Thanks!. ",
    "aflatter": "@honzajavorek can confirm that 3.0.0 works while the current one hangs. ",
    "frockert": "+1 \nAlso hitting this same problem, would be good to see it being supported. ",
    "balupton": "turns out the docs are wrong, and beforeValidation does include transaction.real.body, woot woot. ",
    "sireliah": "+1 to fix that!. ",
    "noisyscanner": "Hey if the above doesn't work for you and you're using babal-node to run the server, compile first and run normally with node! I spent ages trying to work out why Dredd wouldn't terminate the server and this ended up being the issue. \ud83d\ude43\ud83d\udd2b. ",
    "uro5h": "This can be used as a neat workaround (npm task), if anyone is still struggling with this. Tweak the sleep time, and watch for sleep being unix command (if you are on windows you might want something different, cross-platform, there are plenty of packages out there). Note that this will launch the server first, and kill everything when dredd is done while returning return code of the tool first to finish execution, in this case dredd:\n\"some:task\": \"./node_modules/.bin/concurrently -k -s \\\"first\\\" \\\"npm start\\\" \\\"sleep 3s && ./node_modules/.bin/dredd\\\"\"\nFrom the concurrently docs: Concurrently\n-k, --kill-others      kill other processes if one exits or dies\n-s, --success     Return exit code of zero or one based on the success or failure of the \"first\" child to terminate, the \"last child\", or succeed only if \"all\" child processes succeed. [choices: \"first\", \"last\", \"all\"] [default: \"all\"]. ",
    "ayushoo7": "Please can some one help me for this. Thanks honzajavorek yes its related to swagger-codegen-cli tool. Sorry for opening at wrong place.\nThanks. ",
    "yogevglucome": "@honzajavorek As you said before, is there any way to use some flag to allow Dredd to follow redirect?\nWe have a case that we perform GET test, which returns 301 and then 201 or 500, and we do want to know what was the final status code.. Not necessarily.\nFor example, if you test some UI rest, which return HTML and not Json, you\nmight go through several redirects in one call.\nIn any case, I am not sure that Dredd is good enough for workflows, as\ncreating several APIs doc is not efficient.\nOn Thu, Oct 19, 2017 at 12:53 PM, Honza Javorek notifications@github.com\nwrote:\n\nTo me that sounds more like testing a workflow\nhttps://dredd.readthedocs.io/en/latest/how-to-guides.html#testing-api-workflows.\nIn fact following redirects means you are doing multiple requests to the\nAPI and you expect keeping some state between them.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/795#issuecomment-337872519, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AfUKwARn7na6k-fMmx_CYRtidpxy2d69ks5styovgaJpZM4NpsnN\n.\n. \n",
    "sisillV": "I found this:\n'dredd --path ./testAPIEx.json ./testAPIEx2.json http://test.com:11111 --reporter=html --output='\nstill can not run from dredd config file. ",
    "m00sey": "Ah I see, that documentation seems a bit clearer too.\nYou can close this, or link to the other docs, up to you.\nThanks,. ",
    "wanghuanjing": "Hi ,@honzajavorek, I always get \"hook handling time out\" error if use hookfiles with go, it will be fine if don't use hook file. my commond like thant: dredd swagger.yaml [server name] --language=go hookfiles=./hooks.  the server name is a remote server instead of local server,  when running, there is warn that the Hook handling time out, could you help me with that? . ",
    "tislib": "Yes, I have checked it with dredd-transactions previous version. It is working properly. \nThanks. ",
    "josh91hickman": "@ tislib & @honzajavorek ran into this issue today, how did you go about fixing?. ",
    "gmile": "Hi @honzajavorek, thank for looking into the failure! I've force-pushed a commit with a message formatted per your requirement. Hopefully the build passes now.. ",
    "miendt": "@honzajavorek  Thank you for your support,\nAlso, I found solution for run single api such as:\n+ Step 1: get names as dredd --names\n==> After get names, for ex: Signin > Sign In\n+ Step 2: Run apib use --only=\"Name'sAPIEndpoint\"\n==> For ex: Run dredd --only=\"Signin > Sign In\"\n. ",
    "bb010g": "For non-JS hooks, you'd probably want to convert any Buffers you find to/from the native byte array type for that language before & after each hook. I'm not too familiar with how the hook architecture works, though, so I'd have to figure out where all that's handled. Since we're already wrapping the request options, having an extra 'bytes' option that maps to null should work.\nAs far as I've tested, Buffers are safe to have any time in request.body before sending. 'binary' encoded strings will also remain as-is until Request goes to send them, in which case they'll be converted to 'utf8'. Converting to a Buffer here at the end of a before* hook works fine. As for dealing with binary data on the real.body end, Gavel wants a string, so you have to convert back to a string at the end of a before*Validation hook. Automatically performing this step should be fine, but wouldn't be necessary to make this usable by other languages.. Sorry, I'm not using Dredd currently and don't have access to the old files, but IIRC it was failing on bytestrings that weren't valid UTF-8. A single byte of 0xff should do it.. Sure, I can separate that out. I ended up sticking it in here because of the need to depend on my Git branch with Yarn, and yarnpkg/yarn#2875 / yarnpkg/yarn#3553 requiring an explicit prepare for that. The benefit of using this slightly more defensive syntax is that, if you need to do source compilation for whatever reason, you can still work with an older npm. If we don't care about npm 3 compatibility though, the prepublish script can be dropped entirely.. ",
    "sichvoge": "Having support for RAML 1.0 in Dredd would be seriously cool. Guess the difficulty might be to write a parser for a RAML document into API Elements. . ",
    "ChrisDillinger": "uh for giggles, what would be some prerequisite knowledge needed to help out here?. ",
    "gellati": "The spec gives these:\nvarchar       =  ALPHA / DIGIT / \"_\" / pct-encoded\n\nwhere\nALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\nDIGIT          =  %x30-39             ; 0-9\npct-encoded    =  \"%\" HEXDIG HEXDIG\nHEXDIG         =  DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"   ; case-insensitive\n\nI guess the percentage sign is not part of the spec. So this behaviour is then expected?. ",
    "lorangf": "Test.txt\nI am also having issues when using '[' and ']' as part of query parameter names. Our APIs have been documented in apiary using the swagger specs, and the query parameter names show up fine in the documentation it generates. However, when using dredd to validate the docs against our application server, we are getting a warning from dredd and the endpoint is skipped.\nFor example, one of our query parameter in our swagger file is defined as:\nname: filter[contents][role]\nWhen running dredd, we are getting the following error:\nwarn: Compilation warning in file 'Content.yaml': Ambiguous URI parameter in template: /libraries{?filter%5Bcontents%5D%5Brole%5D}\nParameter not defined in API description document: filter%5Bcontents%5D%5Brole%5D (Library > /libraries > GET)\nDredd Version:\ndredd v4.6.1 (Linux 4.10.0-38-generic; x64)\nAttached is a simple yaml test file that illustrate the issue (rename .txt to .yaml), which can be run with the option --dry-run to reproduce by running:\ndredd Test.yaml http://localhost:8080 --dry-run\nIf I use url encoded query param in the yaml file, the param name shows up decoded in apiary but dredd is still complaining about the same error except that this time the paramater appears to be encoded twice:\nwarn: Compilation warning in file 'Test.yaml': Ambiguous URI parameter in template: /api/pets{?tags,limit,filter%255Bcontents%255D%255Brole%255D}\nParameter not defined in API description document: filter%255Bcontents%255D%255Brole%255D ( > /api/pets > GET)\nMaybe my issue is more related to https://github.com/apiaryio/dredd/issues/481.... ",
    "jamiehannaford": "These are my Dockerfiles for attempt 1: https://gist.github.com/jamiehannaford/05f961bcdc1d2c45f891944c754405a8\nThis is my Dockerfile for attempt 2: https://gist.github.com/jamiehannaford/05069b617373eeb0b77142472d9128a7\nThis is the Makefile I'm using: https://gist.github.com/jamiehannaford/3904153b86c949306f36a7549bf1ca8a\nSo what happens is that a postgres container launches, then the app container (which is just a Go HTTP API), then the goodman hook server runs in hook-server, then dredd runs. I'm not using any Docker networks, just links. I've verified that if I spin up a debug container and link to the hook container, I can curl the /debug endpoint. Using the host network would not change anything, right?\nWhat I found interesting is that if you look at the logs for attempt 1, dredd doesn't ever seem to get past these lines because it doesn't output anything to do with what hooks are being used (it should do that here). I'm wondering if somehow my --language flag is incorrect? This is what I'm using:\n--language \"bash ./scripts/dredd-sleep.sh\". @ddelnano yeah, I'm using go hooks. If you look at this line you can see it's building the hook binary and then that's being passed to dredd like so:\ndredd ./swagger/api.yaml http://app:8080 --language=go --hookfiles=./hooks\nIs that what you mean? Or am I also missing some additional configuration for goodman?\nTBH I'd rather have attempt 1 working where the hooks run in their own docker container because it results in smaller images, but I'm happy to go with attempt 2 (all in one) if it's easy to fix.. Oh, so I just provided a fake --hookfiles flag and made some progress. Looks like without that, dredd doesn't make any client connections to the hook server. I'm running into this:\n```\n$ dredd api.yaml http://app:8080 --hooks-worker-handler-host hook-server --language \"bash ./sleep.sh\" --level debug --hookfiles=foo\ndebug: npm version: 3.5.2\ndebug: Configuration: {\"server\":\"http://app:8080\",\"options\":{\"_\":[\"api.yaml\"],\"hooks-worker-handler-host\":\"hook-server\",\"language\":\"bash ./sleep.sh\",\"a\":\"bash ./sleep.sh\",\"level\":\"debug\",\"l\":\"debug\",\"hookfiles\":\"foo\",\"f\":\"foo\",\"dry-run\":null,\"y\":null,\"sandbox\":false,\"b\":false,\"server\":null,\"g\":null,\"server-wait\":3,\"init\":false,\"i\":false,\"custom\":{},\"j\":[],\"names\":false,\"n\":false,\"only\":[],\"x\":[],\"reporter\":[],\"r\":[],\"output\":[],\"o\":[],\"header\":[],\"h\":[],\"sorted\":false,\"s\":false,\"user\":null,\"u\":null,\"inline-errors\":false,\"e\":false,\"details\":false,\"d\":false,\"method\":[],\"m\":[],\"color\":true,\"c\":true,\"timestamp\":false,\"t\":false,\"silent\":false,\"q\":false,\"path\":[\"api.yaml\",\"api.yaml\"],\"p\":[\"api.yaml\",\"api.yaml\"],\"hooks-worker-timeout\":5000,\"hooks-worker-connect-timeout\":1500,\"hooks-worker-connect-retry\":500,\"hooks-worker-after-connect-wait\":100,\"hooks-worker-term-timeout\":5000,\"hooks-worker-term-retry\":500,\"hooks-worker-handler-port\":61321,\"config\":\"./dredd.yml\",\"$0\":\"/usr/local/bin/dredd\"},\"custom\":{\"cwd\":\"/\",\"argv\":[\"api.yaml\",\"http://app:8080\",\"--hooks-worker-handler-host\",\"hook-server\",\"--language\",\"bash ./sleep.sh\",\"--level\",\"debug\",\"--hookfiles=foo\"]}}\nverbose: Using 'base' reporter.\nverbose: Configuring reporters: []\nverbose: Using 'cli' reporter.\nverbose: HTTP(S) proxy specified by environment variables: no_proxy=*.local, 169.254/16. Please read documentation on how Dredd works with proxies: https://dredd.readthedocs.io/en/latest/how-it-works/#using-https-proxy\nverbose: No backend server process specified, starting testing at once\nverbose: Running Dredd instance.\nverbose: Expanding glob patterns.\nverbose: Reading API description files.\nverbose: Parsing API description files and compiling a list of HTTP transactions to test.\nverbose: Compiling HTTP transactions from API description file: api.yaml\nverbose: Starting reporters and waiting until all of them are ready.\ninfo: Beginning Dredd testing...\nverbose: Starting transaction runner.\nverbose: Sorting HTTP transactions\nverbose: Configuring HTTP transactions\nverbose: Reading hook files and registering hooks\ninfo: Found Hookfiles: 0=/foo\nverbose: Looking up hooks handler implementation: bash ./sleep.sh\nverbose: Using 'bash' as a hook handler command, './sleep.sh' as arguments\nverbose: Starting hooks handler.\ninfo: Spawning 'bash ./sleep.sh' hooks handler process.\nverbose: Connecting to hooks handler.\nverbose: Starting TCP connection with hooks handler process.\ninfo: Successfully connected to hooks handler. Waiting 0.1s to start testing.\nverbose: Registering hooks.\nverbose: Executing HTTP transactions\nverbose: Running 'beforeAll' hooks\ndebug: Running hooks...\nverbose: Sending HTTP transaction data to hooks handler: e1de3d17-970c-44ce-a6db-8b0b10fcc61e\ndebug: Dredd received some data from hooks handler.\nundefined:1\nHTTP/1.1 400 Bad Request\n^\nSyntaxError: Unexpected token H\n    at Object.parse (native)\n    at Socket. (/usr/local/lib/node_modules/dredd/lib/hooks-worker-client.js:273:34)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\nroot@7886df74eb9b:/# dredd --version\ndredd v4.2.1 (Linux 4.9.41-moby; x64)\n```\n@ddelnano Does goodman support Swagger? Wondering what might be causing this 400 response.. @ddelnano I'm listening for traffic using tcpflow in the hooks server, and I'm seeing the 400 in more detail:\n``\ntcpflow: listening on eth0\n172.017.000.005.34432-172.017.000.004.61321: {\"event\":\"beforeAll\",\"uuid\":\"63a95864-7a89-44fc-920e-a6385e77780a\",\"data\":[{\"name\":\"/authenticate > POST > 200 > application/json\",\"id\":\"POST /authenticate\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/authenticate\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{\\n  \\\"apiVersion\\\": \\\"magna commodo ullamco dolor voluptate\\\",\\n  \\\"kind\\\": \\\"magna\\\"\\n}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"{}\",\"statusCode\":\"200\",\"bodySchema\":\"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"apiVersion\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A Kubernetes API identifier, alwaysauthorization.k8s.io/v1beta1\\\"},\\\"kind\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The Kubernetes API object type, alwaysTokenReview\\\"},\\\"status\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"authenticated\\\"],\\\"properties\\\":{\\\"authenticated\\\":{\\\"type\\\":\\\"boolean\\\",\\\"description\\\":\\\"Whether the user was authenticated successfully or not\\\",\\\"default\\\":false},\\\"user\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"username\\\"],\\\"properties\\\":{\\\"username\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A human-friendly name for the user\\\"},\\\"uid\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"An identifier other than a username, particularly one that is permanent in a way that a username may not be.\\\"},\\\"groups\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":\\\"A list of groups to which the user belongs or roles which the user has\\\"},\\\"extra\\\":{\\\"type\\\":\\\"object\\\",\\\"description\\\":\\\"A map of arrays of strings, each containing arbitrary additional information about the user\\\"}}},\\\"error\\\":{\\\"type\\\":\\\"string\\\"}}}}}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/authenticate\",\"actionName\":\"POST\",\"exampleName\":\"200 > application/json\"},\"fullPath\":\"/authenticate\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/authenticate > POST > 401 > application/json\",\"id\":\"POST /authenticate\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/authenticate\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"{}\",\"statusCode\":\"401\",\"bodySchema\":\"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"apiVersion\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A Kubernetes API identifier, alwaysauthorization.k8s.io/v1beta1\\\"},\\\"kind\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The Kubernetes API object type, alwaysTokenReview`\\\"},\\\"status\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"authenticated\\\"],\\\"properties\\\":{\\\"authenticated\\\":{\\\"type\\\":\\\"boolean\\\",\\\"description\\\":\\\"Whether the user was authenticated successfully or not\\\",\\\"default\\\":false},\\\"user\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"username\\\"],\\\"properties\\\":{\\\"username\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A human-friendly name for the user\\\"},\\\"uid\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"An identifier other than a username, particularly one that is permanent in a way that a username may not be.\\\"},\\\"groups\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":\\\"A list of groups to which the user belongs or roles which the user has\\\"},\\\"extra\\\":{\\\"type\\\":\\\"object\\\",\\\"description\\\":\\\"A map of arrays of strings, each containing arbitrary additional information about the user\\\"}}},\\\"error\\\":{\\\"type\\\":\\\"string\\\"}}}}}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/authenticate\",\"actionName\":\"POST\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/authenticate\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users > GET > 200 > application/json\",\"id\":\"GET /users\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"GET\",\"uri\":\"/users\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"[\\n  {}\\n]\",\"statusCode\":\"200\",\"bodySchema\":\"{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A unique identifier for a user for internal use only\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A permanent identifier for a user in the backend identity service.\\nThis value is used to look up information about the user in the\\nbackend, so it must be unique\\n\\\"}}}}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users\",\"actionName\":\"GET\",\"exampleName\":\"200 > application/json\"},\"fullPath\":\"/users\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/users > POST > 201 > application/json\",\"id\":\"POST /users\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/users\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{\\n  \\\"username\\\": \\\"dolore Ut officia\\\",\\n  \\\"id\\\": \\\"ullamco ipsum deserunt\\\"\\n}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"{\\n  \\\"username\\\": \\\"Duis\\\",\\n  \\\"id\\\": \\\"id ad\\\"\\n}\",\"statusCode\":\"201\",\"bodySchema\":\"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A unique identifier for a user for internal use only\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A permanent identifier for a user in the backend identity service.\\nThis value is used to look up information about the user in the\\nbackend, so it must be unique\\n\\\"}}}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users\",\"actionName\":\"POST\",\"exampleName\":\"201 > application/json\"},\"fullPath\":\"/users\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/users > POST > 400 > application/json\",\"id\":\"POST /users\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/users\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{\\n  \\\"id\\\": \\\"laborum\\\"\\n}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"400\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users\",\"actionName\":\"POST\",\"exampleName\":\"400 > application/json\"},\"fullPath\":\"/users\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users > POST > 401 > application/json\",\"id\":\"POST /users\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/users\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users\",\"actionName\":\"POST\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/users\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users/{id} > GET > 200 > application/json\",\"id\":\"GET /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"\n172.017.000.005.34432-172.017.000.004.61321: method\":\"GET\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"{}\",\"statusCode\":\"200\",\"bodySchema\":\"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A unique identifier for a user for internal use only\\\"},\\\"username\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A permanent identifier for a user in the backend identity service.\\nThis value is used to look up information about the user in the\\nbackend, so it must be unique\\n\\\"}}}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"GET\",\"exampleName\":\"200 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/users/{id} > GET > 401 > application/json\",\"id\":\"GET /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"GET\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"GET\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users/{id} > GET > 404 > application/json\",\"id\":\"GET /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"GET\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"404\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"GET\",\"exampleName\":\"404 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users/{id} > DELETE > 204 > application/json\",\"id\":\"DELETE /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"204\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"204 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/users/{id} > DELETE > 401 > application/json\",\"id\":\"DELETE /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/users/{id} > DELETE > 404 > application/json\",\"id\":\"DELETE /users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"404\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/users/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"404 > application/json\"},\"fullPath\":\"/users/2f5c56d6-7903-11e7-b5a5-be2e44b06b36\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens > GET > 200 > application/json\",\"id\":\"GET /tokens\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"GET\",\"uri\":\"/tokens\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"200\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens\",\"actionName\":\"GET\",\"exampleName\":\"200 > application/json\"},\"fullPath\":\"/tokens\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/tokens > POST > 201 > application/json\",\"id\":\"POST /tokens\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/tokens\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"201\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens\",\"actionName\":\"POST\",\"exampleName\":\"201 > application/json\"},\"fullPath\":\"/tokens\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/tokens > POST > 400 > application/json\",\"id\":\"POST /tokens\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/tokens\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{\\n  \\\"id\\\": \\\"commodo Lorem enim Ut elit\\\",\\n  \\\"user_id\\\": \\\"consequat anim\\\",\\n  \\\"token\\\": \\\"officia laborum occaecat\\\",\\n  \\\"description\\\": \\\"est\\\"\\n}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"400\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens\",\"actionName\":\"POST\",\"exampleName\":\"400 > application/json\"},\"fullPath\":\"/tokens\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens > POST > 401 > application/json\",\"id\":\"POST /tokens\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"POST\",\"uri\":\"/tokens\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"{\\n  \\\"id\\\": \\\"labore reprehenderit\\\",\\n  \\\"user_id\\\": \\\"et fugiat minim dolore laboris\\\"\\n}\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens\",\"actionName\":\"POST\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/tokens\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens/{id} > PUT > 2\n172.017.000.005.34432-172.017.000.004.61321: 02 > application/json\",\"id\":\"PUT /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"PUT\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"202\",\"bodySchema\":\"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A unique identifier for the token for internal use only\\\"},\\\"token\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The value of the token that would be provided by a user or application wishing to use it for authentication\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A unique identifier for a user for internal use only\\\"},\\\"description\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"A description of the token's purpose or usage\\\"},\\\"expiry\\\":{\\\"type\\\":\\\"string\\\",\\\"format\\\":\\\"dateTime\\\",\\\"description\\\":\\\"The point in time after which the token will no longer be usable for authentication\\\"}},\\\"required\\\":[\\\"id\\\",\\\"user_id\\\"]}\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"PUT\",\"exampleName\":\"202 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/tokens/{id} > PUT > 400 > application/json\",\"id\":\"PUT /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"PUT\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"400\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"PUT\",\"exampleName\":\"400 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens/{id} > PUT > 401 > application/json\",\"id\":\"PUT /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"PUT\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"PUT\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens/{id} > PUT > 404 > application/json\",\"id\":\"PUT /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"PUT\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"404\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"PUT\",\"exampleName\":\"404 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens/{id} > DELETE > 204 > application/json\",\"id\":\"DELETE /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"204\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"204 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":false},{\"name\":\"/tokens/{id} > DELETE > 401 > application/json\",\"id\":\"DELETE /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"401\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"401 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":true},{\"name\":\"/tokens/{id} > DELETE > 404 > application/json\",\"id\":\"DELETE /tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"host\":\"app\",\"port\":\"8080\",\"request\":{\"method\":\"DELETE\",\"uri\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"headers\":{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",\"User-Agent\":\"Dredd/4.2.1 (Linux 4.9.41-moby; x64)\"},\"body\":\"\"},\"expected\":{\"headers\":{\"Content-Type\":\"application/json\"},\"body\":\"\",\"statusCode\":\"404\"},\"origin\":{\"filename\":\"api.yaml\",\"apiName\":\"Managed Kubernetes Auth Service\",\"resourceGroupName\":\"\",\"resourceName\":\"/tokens/{id}\",\"actionName\":\"DELETE\",\"exampleName\":\"404 > application/json\"},\"fullPath\":\"/tokens/2f5c56d6-7903-11e7-b5a5-be2e44b06b35\",\"protocol\":\"http:\",\"skip\":true}]}\n172.017.000.005.34432-172.017.000.004.61321:\n172.017.000.004.61321-172.017.000.005.34432: HTTP/1.1 400 Bad Request\nContent-Type: text/plain; charset=utf-8\nConnection: close\n400 Bad Request\n```\nWhat exactly should I be running in the hook server container? The above output is when I run ./hooks -port 61321, which I now realise is probably wrong.\nIf I change the entrypoint to /go/bin/goodman ./hooks, I get these errors in dredd:\ndebug: TCP communication with hooks handler errored. Error: This socket has been ended by the other party\n    at Socket.writeAfterFIN [as write] (net.js:356:12)\n    at /usr/local/lib/node_modules/dredd/lib/hooks-worker-client.js:308:31\n    at TransactionRunner.runHook (/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:283:9)\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:163:28\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:1069:9\n    at replenish (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:946:17)\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:950:9\n    at _asyncMap (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:1067:5)\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:1153:16\n    at timeLimit (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:4970:5)\n    at Object.timesSeries (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:980:16)\n    at TransactionRunner.runHooksForData (/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:187:20)\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:110:30\n    at TransactionRunner.executeTransaction (/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:505:14)\n    at TransactionRunner.executeTransaction (/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:3:57)\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:105:28\n    at TransactionRunner.runHooksForData (/usr/local/lib/node_modules/dredd/lib/transaction-runner.js:191:14)\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:101:26\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:188:16\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:1074:9\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:421:16\n    at replenish (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:941:25)\n    at iterateeCallback (/usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:931:17)\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:906:16\n    at /usr/local/lib/node_modules/dredd/node_modules/async/dist/async.js:1071:13\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:168:24\n    at /usr/local/lib/node_modules/dredd/lib/transaction-runner.js:284:18\n    at Timeout.handleTimeout [as _onTimeout] (/usr/local/lib/node_modules/dredd/lib/hooks-worker-client.js:335:20)\n    at ontimeout (timers.js:469:11)\n    at tryOnTimeout (timers.js:304:5)\n    at Timer.listOnTimeout (timers.js:264:5). I got things working eventually \ud83d\ude4c   Looks like there were some DB connection errors. Once I fixed those goodman is successfully serving connections to dredd. Thanks everyone! \ud83d\ude04 . ",
    "anth0d": "@honzajavorek I've made the changes you requested - but unfortunately the Travis CI build failed - I am trying to reproduce but having no success. The failing tests are here and here if you have any tips for how to debug.. Thanks @honzajavorek I was out of town until now. Really appreciate your help.. Sorry about the delay, I was offline for a couple weeks there. \nI have been trying to reproduce this issue but I'm not able to with the latest versions. I think we can close this for now.\n. Sorry I thought I linked the issue. Currently the latest version of dredd-transactions has an issue introduced by one of its dependencies - https://github.com/apiaryio/dredd-transactions/issues/93. ",
    "hugecannon": "Ah, thanks, I missed that in my searches :+1: . ",
    "mousavian": "We're affected by this as well.\nSeems fury-adapter-swagger has introduced a breaking change while bumping version from 0.12.1 to 0.13.0, then it propagate with https://github.com/apiaryio/dredd-transactions/commit/ea91dc6ebb758ddae1efd2a66b85a879a4b80aa6 PR which i guess is wrongly bumped with a patch version only (from 4.3.0 to 4.3.1) \n and since it satisfies the semversion specified in package.json\n hence all new dredd installations, even with restrict version are affected.\nA quick solution to fix this, is using npm shrinkwrap or package-lock.json. Cool @honzajavorek , thanks.. ",
    "kag0": "Just dropped by for a +1\n\nproduces/consumes other than application/json are not supported (yet)\n\nThis would be really useful to have, since even though most APIs are json, it's not uncommon to see something else at some endpoints (like gpx xml for example). I would think an early version of this feature would be easy to get going with plain text matching as a fallback.. ",
    "jpjpjp": "I'll add a plus 1 as well.   \nWhat would be cool in the interim is if Dredd CAN'T validate against non application/json return bodies that it simply doesn't TRY TO.\nWhile it would be great to have html, plain text and/or csv validation, it would still be useful if dredd could simply validate that it got a response with the expected content-type  header and call that a pass for any content-type other than application/json.   Right now I get failures for all my APIs.    \nHappy to provide an example API blueprint and dredd output if it would be helpful.\n. ",
    "mAAdhaTTah": "Turns out this was found here: https://github.com/apiaryio/dredd/issues/458 and is related to https://github.com/apiaryio/dredd/issues/692. ",
    "johngluckmdsol": "Also, are you planning to support Open API 3.0 and, if so, when?. Nevermind.  This isn't your bug. ",
    "matthewl-biomatters": "The test failure seems unrelated so created as #892. Thanks @michalholasek I figured it was something like that but ran out of time yesterday.  Sorry I don't really have time to dig into it further but wonder if we could do this instead to avoid the risk of unrelated files that are add in future also weirdly breaking the tests.\nhookfiles: ['./**/*_hooks.*', '/baz/x.js', '/foo/y.js', '/bar/z.js', '/foo/a.js', '/bar/b.js', '/baz/c.js', '/foo/o.js', '/bar/p.js']\n. ",
    "JurRutten": "+1. ",
    "veewee": "+1. ",
    "tombevers": "+1. ",
    "jonas-depop": "+1. ",
    "altcatalin": "+1. ",
    "YGeorge": "Any update on this? . ",
    "joost": "+1. For me --no-optional did work in a node:latest docker image. Thanks.. ",
    "nesl247": "@michalholasek Is there a timeframe at this point? It's been a few months since the last update. Curious to see how it's going.. ",
    "Miouge1": "Is there any alternatives to dredd to test OpenAPI 3.0?. ",
    "orontee": "+1. ",
    "jurgob": "+1. ",
    "jcagarcia": "+1. ",
    "jceplaras": "The fix creates a new issue when expected response type is text/html and actual response type is also text/html. This assumes that your expected response type is now application/json\n```\nfail: body: Can't validate real media type 'text/plain' against expected media type 'application/schema+json'.\nrequest: \n... (omitted, assume valid request)\nexpected: \nbody: \nheaders: \n   Content-Type: text/html; charset=UTF-8\nstatusCode: 200\nbodySchema: {}\nactual: \nbody: \nheaders: \n   ... (Other headers, omitted)\n   content-type: text/html; charset=UTF-8\nstatusCode: 200\n```\nThis works on previous dredd-transaction 4.5.0. @honzajavorek Can I try and fix this? . @honzajavorek Already addressed requested changes and also added an integration test for a non-existent directory.. Will fix! Sorry about that. :). ",
    "alejandropg": "I'm developer but I have none, o very little, idea about node.js. I could try, but I'm sure I'm not the best option.\nIf you tell me more or less where I have to touch, I could try.\n. Ok, I will try, but tomorrow I have a trip so give me a couple of weeks.\nIf I show that it's impossible for me, I will told you \ud83d\ude05. I'm still in a trip, so I can't fix it until I return at home. So, @jceplaras if you want to fix it, for me is perfect \ud83d\udc4d. Thanks to you for change the library \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f. ",
    "jasonk000": "Thanks @honzajavorek - I've made the requested changes.\nGenerally you can apply this pattern (process.nextTick to execute callbacks) to break up stack flows between async function returns if this issue crops up elsewhere as well.. ",
    "justmara": "@honzajavorek yes, this definitely looks like encoding issue ;) Also there is related (I think so) validation bug, that makes me think about encoding:\n\nHeader 'content-type' has value 'application/json; charset=utf-8' instead of 'application/json'\n\nAnd yes, dredd still fails even without reporting to apiary. It doesn't say whats wrong in console, simply fails.. How could I make a sample, when it fails validating over our real api response? Not over apiary \"response\" model from apib file.. ",
    "alexSememerenko": "Looks like npm init is not needed to install Express.js. On Windows, I can't run node app.js & because & character is not allowed (reserved for future). \nWorkaround from SO doesn't help.. After running node app.js & I see just some cryptic numbers: [1] 61433\nMaybe worth it to mention in docs it is expected behavior, as not all devs are familiar with node.js. ",
    "samekmichal": "Hi @honzajavorek , I already found the bugs =) but the process of finding them was quite lengthy :-/\nThe problem can be demonstrated using the following hook\npython\n@dredd.before_all\ndef setupEnv(transactions):\n    assert False\nRunning dredd yields the following output from which it is not very evident what actually went wrong.\n```\ninfo: Beginning Dredd testing...\ninfo: Found Hookfiles: 0=/Users/michal/tmp/dreddtest/hooks/all.py, 1=/Users/michal/tmp/dreddtest/hooks/create_user.py, 2=/Users/michal/tmp/dreddtest/hooks/customers.py, 3=/Users/michal/tmp/dreddtest/hooks/mobidi_sessions.py, 4=/Users/michal/tmp/dreddtest/hooks/users.py\ninfo: Spawning 'python' hooks handler process.\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/all.py:4: RuntimeWarning: Parent module 'all' not found while handling absolute import\n  import string\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/all.py:5: RuntimeWarning: Parent module 'all' not found while handling absolute import\n  import sys\n/Users/michal/tmp/dreddtest/hooks/all.py:7: RuntimeWarning: Parent module 'all' not found while handling absolute import\n  from dredd_hooks import dredd\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/all.py:9: RuntimeWarning: Parent module 'all' not found while handling absolute import\n  import mobidi_sessions\nwarn: Error connecting to the hooks handler process. Is the handler running? Retrying.\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/create_user.py:4: RuntimeWarning: Parent module 'create_user' not found while handling absolute import\n  from dredd_hooks import dredd\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/create_user.py:5: RuntimeWarning: Parent module 'create_user' not found while handling absolute import\n  import mobidi_sessions\n/Users/michal/tmp/dreddtest/hooks/create_user.py:6: RuntimeWarning: Parent module 'create_user' not found while handling absolute import\n  import requests\n/Users/michal/tmp/dreddtest/hooks/create_user.py:7: RuntimeWarning: Parent module 'create_user' not found while handling absolute import\n  import json\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/customers.py:1: RuntimeWarning: Parent module 'customers' not found while handling absolute import\n  from dredd_hooks import dredd\n/Users/michal/tmp/dreddtest/hooks/customers.py:2: RuntimeWarning: Parent module 'customers' not found while handling absolute import\n  import mobidi_sessions\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/users.py:1: RuntimeWarning: Parent module 'users' not found while handling absolute import\n  from dredd_hooks import dredd\n/Users/michal/tmp/dreddtest/hooks/users.py:2: RuntimeWarning: Parent module 'users' not found while handling absolute import\n  import mobidi_sessions\ninfo: Hooks handler stderr: /Users/michal/tmp/dreddtest/hooks/users.py:3: RuntimeWarning: Parent module 'users' not found while handling absolute import\n  import requests\n/Users/michal/tmp/dreddtest/hooks/users.py:4: RuntimeWarning: Parent module 'users' not found while handling absolute import\n  import json\ninfo: Hooks handler stdout: Starting Dredd Python hooks handler\nerror: Connection timeout 1.5s to hooks handler on 127.0.0.1:61321 exceeded. Try increasing the limit.\n```\nOf course, call to the handler has to time out as it was not started correctly (due to failures in hooks). But, it makes me wonder if there is a better way how to propagate errors from the hooks handler. . ",
    "marc0l92": "Yes, you are right about the exposing of the whole options object.\nI have done this only to have access to the SSL setup using one line of code.. ",
    "JonKohler": "I just added     this.configuration.http.rejectUnauthorized = false, in the following code block, to dredd.js and that unblocked me. Figured I'd drop this in here for others running into this challenge.\n// This is here only because there there is no way how to spy a constructor in CoffeScript\n  init(config) {\n    this.configuration = applyConfiguration(config);\n    this.configuration.http = {};\n    this.configuration.http.rejectUnauthorized = false\n    this.tests = [];\n    this.stats = {. BTW, I'm running into this on a ~30k line swagger 2.0 YAML spec. I did the --stack_size up to 2000, and it got further but still bombed. I bumped it up to 9000 and it did indeed work. \nThis particular spec ended up having 1222 tests: \n\ncomplete: 0 passing, 0 failing, 0 errors, 1222 skipped, 1222 total\ncomplete: Tests took 133ms\n\nnode --stack_size=9000 $(which dredd) real-big-spec-here.yaml http://127.0.0.1:3000 --dry-run. ",
    "jdcrecur": "Awesome, much clearer thanks! . ",
    "stipsan": "Yes absolutely TAP would be powerful enough! \ud83d\ude04 Great news!\nI will close this issue and subscribe to #765 \ud83d\udc4d . ",
    "kratz74": "I got the same error when building image for our GitLab CICD in Oracle. It would be good to fix it.. ",
    "pingle1202": "swagger.txt\nHi @honzajavorek ,Please check the swagger.txt\nThe problematic part as follows, when I use dredd command to test my mock server, the request body somtimes missing the required field AdditionalTransInfo.\n            required:\n              - ActionSerial\n              - AdditionalTransInfo\n\nThe request body as follows.\n```\nrequest:\nmethod: POST\nuri: /patron/membercard/AZ000001\nheaders:\n    Content-Type: application/json; charset=utf-8\n    Accept: application/json\n    User-Agent: Dredd/4.8.0 (Darwin 17.2.0; x64)\n    Content-Length: 47\nbody:\n{\n  \"reqData\": {\n    \"ActionSerial\": \"AZ\"\n  }\n}\n```. ",
    "towns": "@honzajavorek Is there anything we can do to work around this issue within Dredd? Seems like this was working until recently and suddenly stopped. We've build API tests using Dredd and we really need them running daily. Right now, we are dead in the water. \nIs there a version of Dredd that we can revert back to work around this?\n. ",
    "polc": "Great ! Thanks you for your work. Rebased !. ",
    "yyamano": "https://github.com/yyamano/dredd/commit/e0df691c4c2bb7dd03c5e57c8fdc18e72e05b037 fixes the problem. \nDo you want me to send a pull request without test code? I don't have time to write it.. ",
    "znevrly": "Hi,\nWell we have additional properties such \"emoji\" in specification. When trying to run tests, validation fails\n e.g.\n\"attribute definitions.ProfileSummary.emoji is unexpected\",\n\"attribute definitions.MediaFile.emoji is unexpected\",\n\"attribute definitions.Plan.emoji is unexpected\",\n\"attribute definitions.PageEntry.emoji is unexpected\"\nComplete skip is maybe bad idea but I just want allow certain properties in the validator? Any idea how to achieve it to run the tests?\nthx.\n. Well...it's possible. Thanks.. ",
    "ido567": "Did you try to specify the URL of the API blueprint (in Apiary) in the blueprint key of your configuration?. Didn't test it yet, but it looks like what I'm trying to achieve. Is there a way to configure it globally? Or by a hook?. Sound like recursion is the only option. Do you have an example of a recursive function that adds some properties to every expected schema?. OK, I'll check it out. Thank you so much for the help!!. ",
    "ljharb": "Note that the \"license\" field in package.json, which is SPDX-compliant, is more than sufficient, the actual LICENSE file is not required. (that said, I've merged https://github.com/airbnb/javascript/pull/1746). With or without the license file, the dependency is MIT licensed; there should be no need to remove it.. ",
    "boennemann": "\ud83c\udf89 . ",
    "iamdanthedev": "Hello!\nThanks for quick response, I apologise that it took me a little bit longer \nThanks again :)\n. ",
    "ChALkeR": "Uh-oh. Without this patch, dredd apparently sends a chunk of uninitialized memory as auth headers when configuration.options.user is a number (it's read from a yml config and is typed afaik). Doesn't seem to be serious due to use-cases, but still not a nice thing.. ",
    "greenkeeper[bot]": "Hey there \ud83d\udc4b,\nwe noticed that this PR isn\u2019t merged yet. Just to let you know: if you don't merge this PR, Greenkeeper will not be enabled on this repo, and you won't receive updates for your dependencies.\nIf you don't want to enable Greenkeeper here, just close or ignore this PR, we won't nag you again. \u270c\ufe0f\nHave a great day! \ud83c\udf34\n. - The devDependency semantic-release was updated from 15.12.4 to 15.13.0.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v15.13.0\n15.13.0 (2018-12-14)\nFeatures\n\nallow publish plugins to return false in order to signify no release was done (70c68ef)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\n70c68ef feat: allow publish plugins to return false in order to signify no release was done\n048292b docs: fix broken link in CircleCI recipe\n0f642ff docs: remove mentions of travis-deploy-once\n89ad3a0 chore(package): update p-retry to version 3.0.0\n\nSee the full diff\n\n. - The devDependency semantic-release was updated from 15.12.4 to 15.13.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v15.13.1\n15.13.1 (2018-12-16)\nBug Fixes\n\ncorrectly handle skipped releases (1243f79)\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n1243f79 fix: correctly handle skipped releases\n\nSee the full diff\n\n. - The devDependency @commitlint/config-conventional was updated from 7.1.2 to 7.3.1.\nUpdate to this version instead \ud83d\ude80. - The dependency dredd-transactions was updated from 6.5.2 to 8.0.0.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v8.0.0\n8.0.0 (2019-02-26)\nFeatures\n\nset annotation location as line/column numbers (30f1164)\n\nBREAKING CHANGES\n\nThe 'location' property of annotations will now have a different format - a range of line and column numbers, correctly pre-calculated by the individual API description parsers\n\n\n\nCommits\nThe new version differs by 4 commits.\n\n56e1e08 Merge pull request #237 from apiaryio/honzajavorek/annotations\n30f1164 feat: set annotation location as line/column numbers\ndeba279 test: add annotation compilation unit tests\n8b7f068 refactor: have annotation compilation in a separate file\n\nSee the full diff\n\n. ",
    "VaN-dev": "Well, something strange happens :\nwhen NOT using tags, everything looks normal :\ninfo: Successfully connected to hooks handler. Waiting 0.1s to start testing.\ninfo: /admin/auth/login > That's the entrypoint of the API, which gives a JSON Web Token to the client > 200 > application/json\nskip: POST (200) /admin/auth/login\ninfo: /admin/auth/token/about > Gives some info about a JSON Web Token, like its TTL > 200 > application/json\nskip: GET (200) /admin/auth/token/about\ninfo: /admin/auth/token/renew > Renew a token before its expiration (gives the client a new, fresh JWT) > 200 > application/json\nskip: POST (200) /admin/auth/token/renew\n[...]\ninfo: /admin/clients > Creates a Client > 201 > application/json\nskip: POST (201) /admin/clients\ninfo: /admin/clients > Returns a list of Clients. > 200 > application/json\nskip: GET (200) /admin/clients?page=1&limit=10&sort=asc&order=id\nWhen I add the tag auth-and-security to the route POST /admin/auth/login and the tag clients to the route POST /admin/clients, I get the following output :\ninfo: Successfully connected to hooks handler. Waiting 0.1s to start testing.\ninfo: auth-and-security > /admin/auth/login > That's the entrypoint of the API, which gives a JSON Web Token to the client > 200 > application/json\nskip: POST (200) /admin/auth/login\ninfo: auth-and-security > /admin/auth/token/about > Gives some info about a JSON Web Token, like its TTL > 200 > application/json\nskip: GET (200) /admin/auth/token/about\ninfo: auth-and-security > /admin/auth/token/renew > Renew a token before its expiration (gives the client a new, fresh JWT) > 200 > application/json\nskip: POST (200) /admin/auth/token/renew\n[...]\ninfo: clients > /admin/clients > Creates a Client > 201 > application/json\nskip: POST (201) /admin/clients\ninfo: clients > /admin/clients > Returns a list of Clients. > 200 > application/json\nskip: GET (200) /admin/clients?page=1&limit=10&sort=asc&order=id\nit's like tag is inherited from one route to the following, until it is overwritten by a new tag. Is the the normal behavior ?. @honzajavorek \n\nIf you update the \"transaction paths\" in hooks to reflect the output of dredd --names, everything should work as expected.\n\nI updated my hooks with your solution and it works : ) Thank you.. ",
    "fkromer": "I actually used the commands to install from the package manager. Anyway... is some specific problem with my workstation setup I guess. Thanks.. ",
    "StrikoMirko": "Hi @kylef ,\nthat line is the only output line from dredd command, below is the output of dredd --level=debug\nverbose: Loading configuration file: ./dredd.yml\ninfo: Configuration './dredd.yml' found, ignoring other arguments.\ndebug: Dredd version: 5.1.5\ndebug: Node.js version: v8.9.2\ndebug: Node.js environment: http_parser=2.7.0, node=8.9.2, v8=6.1.534.48, uv=1.15.0, zlib=1.2.11, ares=1.10.1-DEV, modules=57, nghttp2=1.25.0, openssl=1.0.2m, icu=60.1, unicode=10.0, cldr=32.0, tz=2017c\ndebug: System version: Darwin 14.5.0 x64\ndebug: npm version: 5.5.1\ndebug: Configuration: {\"server\":\"https://b3zs0lczp0.execute-api.eu-west-2.amazonaws.com/prod\",\"options\":{\"dry-run\":null,\"hookfiles\":\"./dredd-hooks/*.js\",\"language\":\"nodejs\",\"sandbox\":false,\"server\":null,\"server-wait\":3,\"init\":false,\"custom\":{},\"names\":false,\"only\":[],\"reporter\":[],\"output\":[],\"header\":[],\"sorted\":false,\"user\":null,\"inline-errors\":false,\"details\":false,\"method\":[],\"color\":true,\"level\":\"debug\",\"timestamp\":false,\"silent\":false,\"path\":[\"swagger.json\",\"swagger.json\"],\"hooks-worker-timeout\":5000,\"hooks-worker-connect-timeout\":1500,\"hooks-worker-connect-retry\":500,\"hooks-worker-after-connect-wait\":100,\"hooks-worker-term-timeout\":5000,\"hooks-worker-term-retry\":500,\"hooks-worker-handler-host\":\"127.0.0.1\",\"hooks-worker-handler-port\":61321,\"config\":\"./dredd.yml\",\"_\":[\"swagger.json\"],\"p\":[\"swagger.json\",\"swagger.json\"]},\"custom\":{\"cwd\":\"/Users/mirkoprpic/Workspace/cruk_content_api/private_api\",\"argv\":[\"--level=debug\"]}}\nverbose: Using 'base' reporter.\nverbose: Configuring reporters: []\nverbose: Using 'cli' reporter.\nverbose: No backend server process specified, starting testing at once\nverbose: Running Dredd instance.\nverbose: Expanding glob patterns.\nverbose: Reading API description files.\nverbose: Parsing API description files and compiling a list of HTTP transactions to test.\nverbose: Compiling HTTP transactions from API description file: swagger.json\nverbose: Dredd instance run finished.\nerror: Cannot assign to read only property 'parent' of object '#<AuthScheme>'\nverbose: Exiting Dredd process with status '1'.\ndebug: Using native process.exit() method to terminate the Dredd process.\nverbose: No backend server process to terminate.\nHope this helps.. ",
    "opichals": "@honzajavorek While acknowledging the dangers of through-proxy API testing I agree that this would indeed be a useful thing to have for people that have no other option but to use the proxy.\nOne could use something like this but that adds to the layers that may interfere.. @honzajavorek There are also situations where the remote API is going to be accessed through a proxy in production. In such a case the through-proxy testing is actually exactly what you need to be doing as it is the way things are deployed.. @kylef @pksunkara Considering how long is this issue chatted about and much people just hate to have this to be build again and again for no most of the time no benefit I'd like to suggest to consider dropping the whole protagonist inside drafter.js idea and add an extra package which would get picked up if installed as peer dependency (along with documenting the fact in README).. ",
    "erajkovic": "I'll have to run some more tests to figure out if the issue was a user error or a bad configuration while using proxy over VPN - this morning, on the corporate network, I am able to get a local run pushed to apiary and see it under https://app.apiary.io/apicatalog/tests/runs#local.\nAlso, did not realize the 'danger' of using Dredd against a remote instance - in the summary below, one of the 'pass' was a DELETE call, but only on the first run ;)\ncomplete: 10 passing, 24 failing, 0 errors, 14 skipped, 48 total\ncomplete: Tests took 1762ms. So is \"/{set name}\" valid in the swagger or should it have been \"/{set%20name}\" - As I can load the file to the swagger editor, I am assuming it's valid.\n\n. {\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"...\",\n    \"version\" : \"3.2.0\",\n    \"title\" : \"...\"\n  },...\n.... Wondering if it should not even be the default behavior so that you get cranking faster.. For my use case, I would go with a default value and provide a sensible default for the type we know about, like integer or date-time. Right now, I am facing a simple issue where Dredd can't be use - full stop. \nYou could go with another approach and define the default value for parameter in a config file, so that I can work around this with some extra config work.\nAlso, in my experience, having the ability to execute real tests is a dangerous proposition, so I would not be too concerned about having default that are most likely to get you 404 - it's better than getting a 204 once.. Maybe I should not be using Dredd to validate the work as we are definitely not ready for Design first with the set of Swagger documents I am dealing with - now processing ~4300 Swagger documents on a given batch job.. Not yet, there are days when it just works and others when it fails - I have not looked at it recently, so I'll do it and get back to you - most likely close it with the HowTo to detail my user errors.. Today, I was not able to reproduce any of the errors I got earlier - I am using a more recent version of dredd in case it could have some impact - dredd v5.1.9 (Darwin 17.5.0; x64) \nEven with a single line format for the custom tags in my yaml file, I was able to upload to the specified API - zztop in my latest test.\nClosing the issue. Thanks.. ",
    "ertsaas": "I am running into this exact same issue. I have to run Dredd tests behind a proxy and would be willing to accept the risks that this entails, so in addition to my reaction on the original post, I am adding one more reaction here \ud83d\udc4d !. ",
    "wideklev": "Found another workaround as well: (that successfully installs)\nRUN npm install --unsafe-perm=true -g dredd\nAnd if I wanted to get rid of more errors (and get a lot of new npm compiling warnings and a bigger docker image) I added some more packages \n```\nFROM alpine\nRUN apk add --update ca-certificates nodejs nodejs-npm git python \\\n    python-dev \\\n    py-pip make g++\nRUN npm install --unsafe-perm=true -g dredd \n```\n. ",
    "sajjad-shirazy": "ok. It's ok. thanks. nice to hear it was useful :). ",
    "KonstantinxVx": "\nDoes dredd https://gitlab..com//public.apib https://.apiary-mock.com/ work for you? Fetching from URL should work.\n\n@honzajavorek I get the output API description document(s) not found on path\nI guess the problem can be related to my dredd.yml file.\nHere I've posted a dummy apib file to gitlab: https://gitlab.com/Voyku/apib-dredd/blob/master/api-description.apib. @honzajavorek thanks, so for public repo it works fine.\nLooks like the problem I have is related to private repository access, how can I fix this case? \nI've put my dummy .apib file in a private repo: https://gitlab.com/konstantinvoyku/dredd-demo/blob/master/api-description.apib\nwarn: Parser warning in file 'https://gitlab.com/konstantinvoyku/dredd-demo/raw/master/api-description.apib': \nCould not recognize API description format.\nFalling back to API Blueprint by default.\n on line 1\nwarn: Parser warning in file 'https://gitlab.com/konstantinvoyku/dredd-demo/raw/master/api-description.apib': ignoring possible metadata, expected '<key> : <value>', one one per line on line 1\nwarn: Parser warning in file 'https://gitlab.com/konstantinvoyku/dredd-demo/raw/master/api-description.apib': ignoring possible metadata, expected '<key> : <value>', one one per line on line 19\nwarn: Parser warning in file 'https://gitlab.com/konstantinvoyku/dredd-demo/raw/master/api-description.apib': expected API name, e.g. '# <API Name>' on line 1. @honzajavorek thanks, it works.\nIn this way looks like report.xml will be overwritten each time by an active run, is it possible to define Dredd to create new report each time?. @honzajavorek, yep, thanks a lot!. @honzajavorek, can you explain more detailed, please, what should I do?\nThanks in advance!. @honzajavorek thanks a lot!. @honzajavorek sorry, one more thing to clarify:\nIn case if I want to add the User-Agent only to some specific requests, I can use hooks.before, something like this:\nhooks.before(\"Group Users > User [/users] > POST [POST /users]\", function (transaction) {\n  transaction.request.headers['User-Agent'] = 'FooBar/1.2.3';\n});\nThe structure of my .apib is:\n```\nGroup Users\nUser [/users]\nPOST [POST /users]\n...\n``\nI'm not sure how I should define the request that have to be hooked, I've tried\"Group Users > User [/users] > POST [POST /users]\"`, but it seems to be not working.\nCan you help please?\nThanks in advance!. I've already figured out how to do that here: https://github.com/apiaryio/dredd/issues/1074\nThanks.. @honzajavorek thanks!. @honzajavorek thanks, that works!. ",
    "jesperronn": "For the sake of completeness, this update also fixes an issue in Gavel, which made it impossible to run Dredd on servers with (old) Git version.\nThe new version of Gavel does not make use of the git+https protocol, since it not supported for old Git versions, and therefore blocking the use of Dredd on ci servers with old Git versions (Git 2.1.2 affected, but Git 2.3 is good)\nGavels update is a Major release, which is breaking because it stopped supporting Node 4. But since this project requires at least Node 6, we should be good.\nMore details found in https://github.com/apiaryio/gavel.js/pull/102\n. Thanks I close this in favor of #1028. ",
    "asmodehn": "I did a quick test and quoting two times seemed to do the trick. I havent\nbeen able to test this in details yet ( passing arguments and so on). feel\nfree to close, I ll reopen if I get more trouble with it.\nOn Tue, Jun 26, 2018, 14:36 Honza Javorek notifications@github.com wrote:\n\n@asmodehn https://github.com/asmodehn Any updates on this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apiaryio/dredd/issues/1033#issuecomment-400291920,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AANgSH2B-bUEogc4NpShWL6sk_gmNfBfks5uAirWgaJpZM4UoFsZ\n.\n. \n",
    "SahAssar": "Just wanted to chime in that before we posted this issue (I work with @philiplarsson) we checked the output of running the blueprints through drafter to see that the request body was actually there (and it was).. ",
    "esse": "@honzajavorek sure, done :). ",
    "radoslawkojdecki": "Thanks, confirmed - works :)\n. ",
    "hunzai": "It was related to permission on my machine. \nI installed node with sudo that is messing up writing to folders. Just install node without sudo then all works. ",
    "GrahamWalters": "This might be the cause https://github.com/json-schema-faker/json-schema-faker/issues/467\nIt's strange that it only happens with PUT for me.. ",
    "travis5491811": "@kylef When i try to run it, i get the following:\n$ dredd test/integration_test/openapi/openapi_full.yml http://127.0.0.1:3051\nwarn: Parser warning in file 'test/integration_test/openapi/openapi_full.yml': \nCould not recognize API description format.\nFalling back to API Blueprint by default.\n on line 1\nwarn: Parser warning in file 'test/integration_test/openapi/openapi_full.yml': ignoring possible metadata, expected '<key> : <value>', one one per line on line 1\nwarn: Parser warning in file 'test/integration_test/openapi/openapi_full.yml': expected API name, e.g. '# <API Name>' on line 1\ninfo: Beginning Dredd testing...\ncomplete: Tests took 1ms\nThis is for a OpenAPI 3.0.1 file that successfully works in swagger-ui and passes swagger-cli validate. Does it support OpenAPI 3.x? . Thanks @kylef , @honzajavorek for looking into it. . ",
    "lenertovalucie": "@honzajavorek  Yes, @kylef's comment solved my problem. Thanks for your support.. Thank you for your quick answer.\nYes, exactly. Both values \u200b(5 and 0) are valid integers, so where is the problem?. ",
    "skyellin": "@honzajavorek I could well be mis-reading, but this seems to suggest that they are supported: https://swagger.io/docs/specification/2-0/adding-examples/\nSee \"property examples\". ",
    "kunicmarko20": "Np, commented on #1119, closing this.. suggestion\nThere is already a custom key declared, when I copy pasted this config my IDE went red, mentioning this here so I can close #1120 . ",
    "larnouch": "Hi @honzajavorek , thanks for your feedback ! \nWell, I'm using api blueprint as the tool to generate the documentation. . @honzajavorek I'm using fury for generating that HTML ! Fury\nThanks for your help.. @honzajavorek I was checking it now and it's indeed Apiary.. ",
    "kvokka": "Hi @honzajavorek , than you for your responce!\nYes, you understood me right.\nIn this period I found one more, even more pretty solution\ndelete:\n  tags:\n    - Users\n  description: User logout\n  produces:\n    - \"text/plain\"\nAnd this construction allow to avoid this situation too. But, maybe it can be good idea to omit context-type check, if the body is empty?. \nThank you @honzajavorek !\nI tried out your solution, and it is shorter and better. And it works :)\nSemantically this idea looks even better, than separate flag. The only question is, that this feature is undocumented, but at the same time widely used. If you do not mind, I can add this idea to the docs in pr? IDK how it works with apiary, so is it ok, that the section will be only about swagger?. ",
    "dsommerich": "Thanks, working now with 5.2.0 and 5.3.0 after fixing the Swagger.. ",
    "ianwremmel": "Well, it slows down installation on Heroku or Circle CI or anywhere that uses npm ci because that seems to always try to recompile the native module. The fact that the native compile fails means that even with a hot cache, my npm install phase burns two minutes per build/release.\nLocally, I've found installing other packages often causes npm to try to compile the parser, thus burning a minute or two on a process that will definitely fail. . Note: I'm talking about situations where dredd is a dev dependency. I suppose I could go the global install route to get around this issue, but that tends to have its own set of brittleness and I think I saw somewhere that npm has begun discouraging global installs. . Are you proposing this as a change to the published dredd artifact or a change to my project?. I came up with a solution that seems to work tolerably:\n\nremove dredd from dev dependencies\nadd a step to my circle ci config that installs dredd globally with the following command\n    npm install -g dredd --no-optional --unsafe-perm\nI was already running dredd through an npm script alias, so I changed the alias to:\n    npx dredd\n\nWrapping npx means it'll prefer the already install global version in CI, but if I've forgotten to install dredd on my machine, it'll still install it before running.. ",
    "mdular": "This would be a great relief, we started getting random timeouts on our CI / build server. The node-gyp compile attempt (which fails) adds 3-4 minutes to our build pipeline on each run on a medium-sized ec2 instance.\nI would even suggest going for the temporary workaround (shrinkwrap file to avoid protagonist) proposed by @honzajavorek , even if it isn't the final & elegant solution.\nIt's still better than seeing the below output in the build logs each run (and losing the time):\n```bash\n\nprotagonist@1.6.8 install node_modules/protagonist\nnode-gyp rebuild\n\n...\n4 warnings and 1 error generated.\nmake: *** [Release/obj.target/protagonist/src/parse_async.o] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:262:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:189:13)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:254:12)\ngyp ERR! System Darwin 18.2.0\ngyp ERR! command \"/usr/local/Cellar/node/11.4.0/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd node_modules/protagonist\ngyp ERR! node -v v11.4.0\ngyp ERR! node-gyp -v v3.8.0\ngyp ERR! not ok \nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 (node_modules/protagonist):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: protagonist@1.6.8 install: node-gyp rebuild\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1\n```. @kylef thanks for the response.\nI've tried that without the --global flag, but it still attempts the install. --global install is not an option in the way we have currently set up our build pipeline (we are using portable node binaries downloaded via an install script and never installing node via the operating system package manager).. ",
    "timbeynart-nbcuni": "added PR: https://github.com/apiaryio/dredd/pull/1153. The more I look in to this issue, the less I think it's fair to ask you to change anything on your end.  I can pursue a XSLT transformation or regex on Jenkins.  I'll leave this issue open for comment.. @honzajavorek  The point of my comment was because I started to doubt whether anyone trying to publish a JUnit report could meet the standard, since it is poorly defined.  The more I looked in to it, the more confused I got.\nIn fact, the JUnit Jenkins plugin source has a test file with \"skip\" as an attribute, which is a real head scratcher: \nhttps://github.com/jenkinsci/junit-plugin/blob/master/src/test/resources/hudson/tasks/junit/JENKINS-12457/TestSuite_a1.xml\nThat said, it does appear that \"skip\" is not honored by Jenkins plugin, according to this closed bug report:\nhttps://issues.jenkins-ci.org/browse/JENKINS-51914. My hunch is that skip needs to be removed entirely, I'll test it out and let you know the results. Thanks! . ",
    "khvr000": "Thanks a lot @honzajavorek ,\nYour answer does solve my problem.. ",
    "davidgengenbach": "Thanks a lot for your fast answer. Yes, the example I provided was flawed as I quickly gathered it.\nMy underlying problem (which is not reflected in this PR nor gist) was that I had \"$ref\"s in schemas which were not correctly resolved - and in turn they weren't validated at all.\nI fixed it by de-referencing the $refs with the swagger-cli but will most likely create another issue for help - since I need $ref for recursive (cyclic) types! . ",
    "matthewtrask": "Thank you!. ",
    "utisam": "As a workaround, I'm writing some hooks.\n```\nconst hooks = require('hooks');\nfunction patchSchema(v, patch) {\n    if (v.type === 'object') {\n        const props = Object.values(v.properties);\n        for (let i = 0; i < props.length; i += 1) {\n        patchSchema(props[i], patch);\n        }\n    } else if (v.type === 'array') {\n        patchSchema(v.items, patch);\n    } else {\n        patch(v, patch);\n    }\n}\nlet stash = null;\nhooks.beforeEach((transaction) => {\n    stash = {};\n});\nhooks.beforeEachValidation((transaction) => {\n    const { bodySchema } = transaction.expected;\n    stash.originalSchema = bodySchema;\nconst bodySchemaObject = JSON.parse(bodySchema);\npatchSchema(bodySchemaObject, (v) => {\n    if (v.type === 'string' && v.format === 'uuid') {\n    // Workaround for uuid format\n    const hex = '[0-9a-f]';\n    v.pattern = `${hex}{8}-${hex}{4}-4${hex}{3}-[89ab]${hex}{3}-${hex}{12}`;\n    delete v.format;\n    }\n});\ntransaction.expected.bodySchema = JSON.stringify(bodySchemaObject);\n\n});\nhooks.afterEach((transaction) => {\n    transaction.expected.bodySchema = stash.originalSchema;\n});\n```. ",
    "DFaiz": "Hey @honzajavorek , isn't just going over package-lock and finding the packages that use nomnom and updating them?. ",
    "djragsdale": "@honzajavorek I understand the \"symptom vs. root cause\" of the situation, but I think we can handle the symptom in this case and be fine. We can't go through and find the nested processes we've created, but we can close the process listening on the TCP port we need. We could also check for the port being closed after we kill all processes. I'll try adding tests both for when we are forgetting to re-open the port and for when the port is already in use.. ",
    "anentropic": "CODEOWNERS                              celeryconfig.pyc                        celeryconfig_test_dead_letter.py        docker-compose.yml                      requirements-test.txt\nDockerfile                              celeryconfig_broadcast_events.py        celeryconfig_test_dead_letter.pyc       dredd.py                                requirements.txt\nDockerfile.aws                          celeryconfig_broadcast_events.pyc       celeryconfig_test_worker.py             dredd.yml                               run_in_env.sh\nMakefile                                celeryconfig_broadcast_events_worker.py celeryconfig_test_worker.pyc            garage                                  runtime.txt\nPerffile                                celeryconfig_graph.py                   celeryconfig_worker.py                  newrelic.ini                            test_garage.sqlite\nREADME.md                               celeryconfig_graph.pyc                  clear_cloudfront_cache.py               orig.pyc                                test_ordered_logs.sqlite\nVENV                                    celeryconfig_graph_worker.py            databases.yaml                          pyproject.toml                          test_report.sqlite\nbin                                     celeryconfig_test.py                    db                                      requirements-aws.txt                    uwsgi.ini\nceleryconfig.py                         celeryconfig_test.pyc                   docker                                  requirements-dev.txt. ha, ok I have found the problem\nwhen you run dredd init it asks you several questions\nIf you answer \"no\" here:\n? Do you want to use hooks to customize Dredd's behavior? No\n...then it gives you\nyaml\nlanguage: !<tag:yaml.org,2002:js/undefined> ''\nAnswering \"yes\" and choosing a language option gives you e.g.:\nyaml\nlanguage: python. ",
    "mihikasharma": "Hi. I was trying to accomodate it to per request basis as we could have different certificates for different requests.. ",
    "y-luis": "Thanks, @honzajavorek and @kylef, I will modify the specification to satisfy this validation. Looking forward to new updates.. ",
    "jhager": "http://dredd.readthedocs.org/en/latest/hooks-node/ is a dead link.  It should be URL: http://dredd.readthedocs.org/en/latest/hooks-nodejs/ \nAlso, hooks.md references hooks-node and should be updated to hooks-nodejs\n. ",
    "freaz": "To think about: The original approach is imo better because it allows you to stub/spy functions inside module.\n. done(err)\n. So this or 0 is only real change in this PR right?\n. WIll handleRuntimeProblem survive if data === undefined?\n. ",
    "browniebroke": "For the and '/' or '', that was my attempt at doing a one-liner for:\ncoffeescript\nif requestPath isnt '/' and requestPath.splice(-1) is '/'\n    trailingSlash = '/'\nelse\n    trailingSlash = ''\nAfter digging a bit I found out that it's usually done with:\ncoffeescript\ntrailingSlash = if requestPath isnt '/' and requestPath.slice(-1) is '/' then '/' else ''\nThanks for your comment.. "
}