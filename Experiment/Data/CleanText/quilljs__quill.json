{
    "jhchen": "Fixed in scribe 0.2. https://github.com/stypi/scribe/commit/a011d5813a907168f75fd66544c53a16ceb10ad1 probably fixed this since we no longer override the default browser behavior for newlines.\n. Fixed in scribe 0.2. https://github.com/stypi/scribe/commit/a011d5813a907168f75fd66544c53a16ceb10ad1 probably fixed this since we no longer override the default browser behavior for newlines.\n. What browser + os are you using?\n. Duplicate of #433. Closing this one since the other issue has the associated PR.\n. Fixed in scribe 0.2\n. Fixed in scribe 0.2\n. New browsers seems to have fixed this.\nThe cause was when copying the text where formatting is controlled by classes (font, size, color, etc) and not tags, the browser would not copy the class and instead inline the styles the classes would have added. Our normalizer does not look at the style attribute and without the class, the formatting is lost.\n. New browsers seems to have fixed this.\nThe cause was when copying the text where formatting is controlled by classes (font, size, color, etc) and not tags, the browser would not copy the class and instead inline the styles the classes would have added. Our normalizer does not look at the style attribute and without the class, the formatting is lost.\n. False alarm. Behavior seems to differ depending on which text you select.\n. False alarm. Behavior seems to differ depending on which text you select.\n. This does not occur in the lastest version of Scribe + Firefox. If I had to guess https://github.com/stypi/scribe/commit/a011d5813a907168f75fd66544c53a16ceb10ad1 probably fixed this.\n. This does not occur in the lastest version of Scribe + Firefox. If I had to guess https://github.com/stypi/scribe/commit/a011d5813a907168f75fd66544c53a16ceb10ad1 probably fixed this.\n. Fixed in https://github.com/stypi/rails/commit/22d882fe705460716197bda19041d0f5d8b83c43\n. Fixed in https://github.com/stypi/rails/commit/22d882fe705460716197bda19041d0f5d8b83c43\n. Fixed now. We don't have bullet support yet so the expected behavior is to strip the bullet/number but not the text.\n. Fixed now. We don't have bullet support yet so the expected behavior is to strip the bullet/number but not the text.\n. Fixed now.\n. Fixed now.\n. Think so... did you rebuild? This should have affected any span formatting so font family/size and it's working on beta.\n. Think so... did you rebuild? This should have affected any span formatting so font family/size and it's working on beta.\n. Interesting yeah it's actually only affecting background color now for some reason. Color, font family and font size should be fixed now though.\n. Interesting yeah it's actually only affecting background color now for some reason. Color, font family and font size should be fixed now though.\n. No longer reproducible\n. No longer reproducible\n. Can no longer reproduce\n. Can no longer reproduce\n. No longer reproducible\n. No longer reproducible\n. Now only allows http or https. If any other (or none), changes to http.\n. Now only allows http or https. If any other (or none), changes to http.\n. This is expected behavior, mimicking Word and Google Docs. The tab key (whether or not shift is down) deletes the current selected area and inserts a tab. \nIf the selection spans multiple lines, a tab is inserted at the beginning of every line. If shift is down, a tab is deleted from the beginning of every line. We have not implemented this latter behavior yet.\n. This is expected behavior, mimicking Word and Google Docs. The tab key (whether or not shift is down) deletes the current selected area and inserts a tab. \nIf the selection spans multiple lines, a tab is inserted at the beginning of every line. If shift is down, a tab is deleted from the beginning of every line. We have not implemented this latter behavior yet.\n. Fixed in 6a94b01d5da0ce6615379e239a4df0dc46ad2b82\n. Fixed in 6a94b01d5da0ce6615379e239a4df0dc46ad2b82\n. Guess the commit message didn't close this automatically\n. Guess the commit message didn't close this automatically\n. Fixed in 1875715c678a0a62c241574b69352eb9f545f7ca\n. Fixed in 1875715c678a0a62c241574b69352eb9f545f7ca\n. http://scribejs.com/docs/editor/configuration/\n. http://scribejs.com/docs/editor/configuration/\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. No longer reproducible\n. Confirmed fixed in current v0.9.0\n. Confirmed fixed in current v0.9.0\n. This seems to be a limitation of contenteditable. The Gmail composer similarly has this difference in behavior between Chrome and Firefox (though in Firefox clicking after the hyperlink will not continue the hyperlink format whereas arrow keying to the end will). Docs is consistent in continuing the hyperlink; Word in consistent in never continuing the hyperlink when appending.\nThe correct behavior is probably something consistent between browsers but it's unclear what that is and seems to be an issue at a layer below scribe anyways.\n. This seems to be a limitation of contenteditable. The Gmail composer similarly has this difference in behavior between Chrome and Firefox (though in Firefox clicking after the hyperlink will not continue the hyperlink format whereas arrow keying to the end will). Docs is consistent in continuing the hyperlink; Word in consistent in never continuing the hyperlink when appending.\nThe correct behavior is probably something consistent between browsers but it's unclear what that is and seems to be an issue at a layer below scribe anyways.\n. Also fixed in 05c5fdf3a8642cb6eacf4fb9f65506079ed9e108\n. Also fixed in 05c5fdf3a8642cb6eacf4fb9f65506079ed9e108\n. Word and Docs both only indent 1 and 2 even if the end of the cursor is on line 3\n. Word and Docs both only indent 1 and 2 even if the end of the cursor is on line 3\n. Quill does not have nested lists anymore\n. Quill does not have nested lists anymore\n. Appears to be fixed in v0.9.0\n. Appears to be fixed in v0.9.0\n. Appears to be fixed by manual testing in v0.9.0\n. Appears to be fixed by manual testing in v0.9.0\n. Appears to be fixed in v0.9.0\n. Appears to be fixed in v0.9.0\n. This seems to be working correctly now.\n. This seems to be working correctly now.\n. Shift+arrow also does not work correctly probably for the same reason\n. Shift+arrow also does not work correctly probably for the same reason\n. No this is still an open issue so it has not been implemented. The closed issue was a duplicate of this one.\n. Yes fork and PR. In our readme are some more specific details.\n. Yes fork and PR. In our readme are some more specific details.\n. Fixed in c83d050630f3e0134539273aab0b6dc81f9284c8\n. Appears to be fixed in v0.9.0\n. Appears to be fixed in v0.9.0\n. Appears to be fixed in v0.10.3\n. Appears to be fixed in v0.10.3\n. Duplicate of #52 \n. Duplicate of #52 \n. Did you pull the latest? I got formatting to work later that day.\n. Did you pull the latest? I got formatting to work later that day.\n. I think the jumping should be less widespread now. Can you file a bug for the specific browsers if you still see them?\n. I think the jumping should be less widespread now. Can you file a bug for the specific browsers if you still see them?\n. #532\n. #532\n. Fixed in v0.10.2\n. Fixed in v0.10.2\n. Should no longer do this in general since we switched to allowing naked text nodes and normalize the parent node.\n. You are right the step I gave works now but this is unfortunately just a side effect of some internal ordering changes. The reproduction steps are now reversed:\n1. Select word\n2. Add background color\n3. Make font size large\n. You are right the step I gave works now but this is unfortunately just a side effect of some internal ordering changes. The reproduction steps are now reversed:\n1. Select word\n2. Add background color\n3. Make font size large\n. There could be some flexibility here. What would be your recommendation @krishvs ?\n. There could be some flexibility here. What would be your recommendation @krishvs ?\n. Still an issue for IE: https://github.com/quilljs/quill/commit/ef937218445f4c9f4c57b292e48285d3f343cbd1\n. Still an issue for IE: https://github.com/quilljs/quill/commit/ef937218445f4c9f4c57b292e48285d3f343cbd1\n. Sorry had to revert this fix. Turns out it's not a good solution for other browsers either.\n. Sorry had to revert this fix. Turns out it's not a good solution for other browsers either.\n. Excellent idea! Thanks!\n. What do you mean when the html is displayed afterwards? The only difference between an inline style and css style is precedence.\n. What do you mean when the html is displayed afterwards? The only difference between an inline style and css style is precedence.\n. There are already several rules in the base Quill stylesheet that would have to be replicated to maintain visual correspondence with the editor. It's also not sufficient to just add the inherit rule to spans--it'd have to be added to all inline styles (otherwise color -> bold -> size would still trigger the bug) which is much messier markup. Fwiw Quill is moving away from inline styles by default in some future release.\n. There are already several rules in the base Quill stylesheet that would have to be replicated to maintain visual correspondence with the editor. It's also not sufficient to just add the inherit rule to spans--it'd have to be added to all inline styles (otherwise color -> bold -> size would still trigger the bug) which is much messier markup. Fwiw Quill is moving away from inline styles by default in some future release.\n. Has not been an issue for a while as Android has been a part of our target environments for a while.\n. Actually occurs in IE9 as well but not IE10\n. Actually occurs in IE9 as well but not IE10\n. This will be fixed in 1.0 as the approach used for preformatting is being changed. IE10 support is being dropped though too.\n. Fixed in v0.17.0\n. Fixed in v0.17.0\n. The consistent behavior is now all browsers will make no formatting change to the word, but the next character typed will be bold.\n. The consistent behavior is now all browsers will make no formatting change to the word, but the next character typed will be bold.\n. This is a windows feature (IE, notepad, etc all highlight the space after the word) and would probably be a bad idea to change since windows users would probably expect this behavior\n. This is a windows feature (IE, notepad, etc all highlight the space after the word) and would probably be a bad idea to change since windows users would probably expect this behavior\n. Okay didn't see your earlier comment. We should reorder formatText's function list too then\n. Okay didn't see your earlier comment. We should reorder formatText's function list too then\n. Github needs realtime mode\n. Github needs realtime mode\n. Great thanks for reporting this.\n. Great thanks for reporting this.\n. I think this would be a good use case for an optional module. If anyone is interested in building this I'm happy to help from the Quill side. Sounds like @leeoniya and @jbenet might already have some implementation ideas but quill.getContents could also be helpful to avoid parsing HTML. It will return an object like:\njavascript\n{\n  startLength: 0,\n  endLength: 13,\n  ops: [\n    { text: 'Hello' },\n    { text: 'Quill', { bold: true } }\n  ]\n}\n. I think this would be a good use case for an optional module. If anyone is interested in building this I'm happy to help from the Quill side. Sounds like @leeoniya and @jbenet might already have some implementation ideas but quill.getContents could also be helpful to avoid parsing HTML. It will return an object like:\njavascript\n{\n  startLength: 0,\n  endLength: 13,\n  ops: [\n    { text: 'Hello' },\n    { text: 'Quill', { bold: true } }\n  ]\n}\n. Yes headers are not currently supported while font sizes are. There's not a great reason why one is implemented and not the other but I think they can mutually coexist.\nThere are a few other formats in Markdown currently not in Quill. I think the list is headers, blockquotes, lists/bullets, code blocks / inline code, and horizontal rules.\nAs brought up in the discussion @leeoniya linked, the use case is important and will dictate what needs to be built.\n. Yes headers are not currently supported while font sizes are. There's not a great reason why one is implemented and not the other but I think they can mutually coexist.\nThere are a few other formats in Markdown currently not in Quill. I think the list is headers, blockquotes, lists/bullets, code blocks / inline code, and horizontal rules.\nAs brought up in the discussion @leeoniya linked, the use case is important and will dictate what needs to be built.\n. It's already possible to control what controls are included in the toolbar. The implementer actually passes in a container and the toolbar module just looks for certain classes to attach events to. Toolbar Module Docs\nA subtlety in Quill's Delta representation is that there's always a newline character (except the empty document) and context (or what we refer to as line level formats internally) is represented on this character. For example (if we had headers implemented): \njavascript\n[\n  { value: \"Text\" },\n  { value: \"\\n\", attributes: { header: 2 } }\n]\nwould be:\nText\n. It's already possible to control what controls are included in the toolbar. The implementer actually passes in a container and the toolbar module just looks for certain classes to attach events to. Toolbar Module Docs\nA subtlety in Quill's Delta representation is that there's always a newline character (except the empty document) and context (or what we refer to as line level formats internally) is represented on this character. For example (if we had headers implemented): \njavascript\n[\n  { value: \"Text\" },\n  { value: \"\\n\", attributes: { header: 2 } }\n]\nwould be:\nText\n. I'm going to split this into a few issues:\n1. Supporting headers: https://github.com/quilljs/quill/issues/111\n2. Supporting lists/bullets: https://github.com/quilljs/quill/issues/82\n3. Adding text context listener (necessary for the richer markdown editor @rhythmus and others have suggested) https://github.com/quilljs/quill/issues/112\nThis current issue, for tracking purposes, will be resolved once a toMarkdown function that outputs the current contents of Quill in markdown is built, as this is what I interpret the OP to be requesting.\n. @ollym here you go: https://github.com/quilljs/quill/issues/115, https://github.com/quilljs/quill/issues/116, https://github.com/quilljs/quill/issues/117, https://github.com/quilljs/quill/issues/118\n@venil7 I don't have an ETA at the moment. I'll try to use Github Milestones soon for better transparency but it's a self-contained task so it'd be suitable for someone from the community to work on it too.\n. This functionality should be a module but I'm not sure there is consensus on how it should be implemented. Also there is not a 1:1 mapping between the formats Quill and Markdown supports so that will have to be addressed somehow. Some of it will be resolved as Quill supports more formats and at some point it might become a superset.\n. Quill outputs a Delta via getContents() that provides a structured and consistent data structure that would be a good starting point in converting to markdown.\n. Quill is on its way to 1.0 which will support headers and nested lists. I'm not intimately aware of what you are trying to build other than the formatting features that exist in markdown so the suggestion would be to look at the formats that each editor supports. Many other subjective elements are in play but I'm obviously biased.\n. The 1.0 beta has been out for a while with headers and nested lists added as well. Quill supports formats that Markdown does not and there are multiple syntaxes for Markdown formats. How to deal with these ambiguities is likely preferential depending on the user and I do not believe it should be built into Quill core. With getContents() one can trivially output to Markdown with their own preferences.\n. The 1.0 beta has been out for a while with headers and nested lists added as well. Quill supports formats that Markdown does not and there are multiple syntaxes for Markdown formats. How to deal with these ambiguities is likely preferential depending on the user and I do not believe it should be built into Quill core. With getContents() one can trivially output to Markdown with their own preferences.\n. Thanks for reporting this.\n. Thanks for reporting this.\n. Right now you can only remove by toggling a particular format ex. bold/unbold but there's no way to just say \"remove every format\" like the Gmail composer or Google Docs.\n. Right now you can only remove by toggling a particular format ex. bold/unbold but there's no way to just say \"remove every format\" like the Gmail composer or Google Docs.\n. This has been added in the beta release with a ql-clean button and a removeFormat API call.\n. This has been added in the beta release with a ql-clean button and a removeFormat API call.\n. The difficult with editing the underlying HTML is that Quill only understands a subset of HTML. If the the browser/os or even the Quill.setHTML call introduces HTML outside of this subset, src/normalizer.coffee will modify it into the understandable subset. So my concern would be that a user would be confused why their changes aren't working if they edit the markup directly.\nOutside core modules though we do want to let there be a lot more / pretty much complete freedom. The modules interface hasn't been finalized though but we're hoping to put together a proposal for community feedback soon.\n. The difficult with editing the underlying HTML is that Quill only understands a subset of HTML. If the the browser/os or even the Quill.setHTML call introduces HTML outside of this subset, src/normalizer.coffee will modify it into the understandable subset. So my concern would be that a user would be confused why their changes aren't working if they edit the markup directly.\nOutside core modules though we do want to let there be a lot more / pretty much complete freedom. The modules interface hasn't been finalized though but we're hoping to put together a proposal for community feedback soon.\n. Yes I think we'd be open to a notice. It might be better suited for when Quill supports more formats / styles though since at that point, there should only be minor deviations from the HTML you edit and the HTML Quill accepts.\n. Is this what you're looking for http://quilljs.com/docs/editor/events/#selection-change? Feel free to reopen if not.\n. Is this what you're looking for http://quilljs.com/docs/editor/events/#selection-change? Feel free to reopen if not.\n. I was able to reproduce in Firefox as well. Thank you for the detailed report.\n. I was able to reproduce in Firefox as well. Thank you for the detailed report.\n. This has been fixed in v0.14.0.\n. This has been fixed in v0.14.0.\n. This is a desirable feature we've considered but have no immediate plans for building right now so feel free to take a crack at it!\nThis isn't really fleshed out but at some point we want to add a text context listener for when users type particular strings of characters. For example if people type hyphen space we could enable the bullets format automatically (once we have a bullets format). This would make implementing @ mentions easier / more efficient but for now I think the same is accomplishable by listening on the text-change event for an @ character.\n. This is a desirable feature we've considered but have no immediate plans for building right now so feel free to take a crack at it!\nThis isn't really fleshed out but at some point we want to add a text context listener for when users type particular strings of characters. For example if people type hyphen space we could enable the bullets format automatically (once we have a bullets format). This would make implementing @ mentions easier / more efficient but for now I think the same is accomplishable by listening on the text-change event for an @ character.\n. Hmm I tried on a span and anchor and am not seeing the same blur behavior. The second backspace is probably triggering the browser's back hotkey (if a blur occurs but again I'm not seeing the same blur behavior). Do you have a forked repo I can take a look at? Directly manipulating the editor DOM is not something Quill is designed to support though so I would not be surprised is something breaks\n\n.\n. No problem I just discovered it (LICEcap) and had been wanting an opportunity to try it out.\n. If someone else wants to try to implement this in 1.0 feel free to open up another issue.\n. @MadSpindel Thanks! Feel free to submit to https://github.com/quilljs/awesome-quill too. Lists/bullets are high on our list but we don't have a timeline yet.\n. Yes you can use getContents to get a Delta object which looks something like this:\njavascript\n{\n  startLength: 0,\n  endLength: 10,\n  ops: [\n    { text: 'Hello' },\n    { text: 'Quill', { bold: true } }\n  ]\n}\nThe reason it's not just a vanilla object is because we attached some useful functions to it but if you want to just store the data this should be what you're looking for.\n. Feel free to reopen if this isn't what you're looking for.\n. Actually this seems to be occurring in desktop Firefox in general. Thank you for reporting this.\n. The main reason we hard code styles is to support paste into other editors. Some editor/browser combinations will ignore/drop styling due to classes/css on paste.\nIt is also currently possible to have Quill add classes but only for the particular use case of representing formatting information. I have not documented a lot of this but this may also be what you're looking for since hard coded styles are currently only being used to represent formatting.\n. Is this still needed? It doesn't look like a use case was ever discussed.\n. What is the real world use case of a rich text editor mirroring a plain text textarea?\nIf the end goal is form submitting plaintext why use a rich text editor at all?\nIf the goal is to submit rich text, then you cannot use a textarea anyways and will have to submit via ajax post. The difference here then is only calling getContent() instead of getText() or $('#editor').val().\n. I see I was under the impression people wanted to sync Quill's text with a textarea, not its HTML contents. HTML is something Quill wants to abstract away but I'll keep this use case in mind.\n. @mlewis-everley What's the use case for using Quill instead of a <textarea> if the formatting is just going to be lost when the submit button is clicked? Or are you also saying what @garygreen suggested earlier that you want the HTML contents, not the plain text?\n. There is now a Form Submit and Autosave example in the Quill Playground.\n. @jacurtis Please understand what was being discussed in this thread before getting on your high horse. You are conflating the question about the transport (AJAX) and the contents (HTML). \nA normal form submission can only submit a string regardless of how many miles you are into the countryside. I assumed since Quill is about rich-text and its contents are not a string, AJAX is the only option for form submission:\n\nWhat is the real world use case of a rich text editor mirroring a plain text textarea?\nIf the end goal is form submitting plaintext why use a rich text editor at all?\nIf the goal is to submit rich text, then you cannot use a textarea anyways and will have to submit via ajax post. The difference here then is only calling getContent() instead of getText() or $('#editor').val().\n\nAs soon as the error in understanding was pointed out I corrected myself:\n\nI see I was under the impression people wanted to sync Quill's text with a textarea, not its HTML contents.\n\nStoring HTML contents is not something I wanted to promote at the time (and still don't) and the possible solutions if one wanted to nonetheless are numerous and simple enough I felt someone from the community could answer (which it was) without an endorsement from me or the project so it was left at that.\nIn the 170 word rant to the developers there was one sentence of technical substance and it was not even true.\n\nThe javascript object that Quill creates by default with its .getContents is difficult to parse for storage on these non-Node.js servers\n\nIn fact almost ever server side language I'm aware of supports parsing JSON and most databases supports JSON natively, including MySQL and Postgres.\nYou can disagree with decisions and make arguments on technical ground but if you are to continue to participate you will leave the rest at the door.. I'm deleting all +1s so the comments can be easier to find. Please use the reaction feature to show support.\n. Got it. Quill's main purpose is to edit text though so I'm not sure it's the best match here. I'd recommend taking a look at rangy.\n. Okay that sounds reasonable. I'll mark this as an enhancement and look into adding it in a future release.\n. This has been fixed in the 1.0 beta release\n. I see you want the editor to expand to fit the content (thus it should never scroll). Currently this is not an option. I'll reopen and mark this as a feature request.\n. I'm envisioning this would be a good candidate for a module which will come after v1.0 since the module system is being reworked right now so unfortunately it does not seem like a near term task.\n. Yes the reason for the editor-container taking the whole body/iframe is so you can click into anywhere in the editor and it will gain focus. Otherwise there's a large area of the editor that is taken up by the iframe but not by the editor-container so clicking anywhere in this area will do nothing.\nOne check that might work is the iframe offsetHeight should always equal to the body offsetHeight to autosize the editor.\n. Sorry I meant scrollHeight but yes it would not solve the shrinking problem. The solution might be to overwrite the 100% height then since if the height is being managed by javascript the reason it's 100% in the first place is not a concern.\n. Done thanks!\n. Thank you for the PR. I had actually meant to do something about this and other Coffeescript related ones. I was more thinking along the lines of a prepublish script though. Would that solve the problem for you too?\n. The latest release on npm v0.13.4 implements what I had in mind (based on what other coffeescript projects on npm are doing). I think it should allow you to browserify from the command line as well. Can you see if it works for you?\n. Ah okay I had misunderstood the second use case with git clone. I'm okay with the browserify.tranform field but I had to add an index.js for the npm/republish case to work. So without it, it would be require('./node_modules/quilljs/src/quill') instead of require('quilljs'). Is that okay or is there a better solution?\n. Okay cool can you merge the latest from develop and remove the main field and I'll accept the PR? Thanks!\n. Yes this seems to work. I'm curious why it doesn't break the npm install case though? Is browserify smart enough to look in both places?\n. Hmm okay. With the transform field present in package.json I think the same field needs to be removed from grunt/build.coffee for grunt build to work. Otherwise tests should pass and be good to merge.\n. Closing as I'm assuming this is no longer needed but feel free to submit a new one if this is not the case.\n. Deltas in its current form was designed to reduce the number of operations, which right now is just two: insert and retain. It always describes the whole document so it's not the most compact format (though usually its just a two extra retain operations).\nThe third instruction you're seeing is saying delete the first two letters and insert 'aaa'. This result in the same output but the optimal delta should be insert an 'a' at the 2nd position. This is due to a bad optimization heuristic we are using so we'll plan to fix this in a future release.\nThe Delta interface is still being finalized so we can still consider adding a delete operation or make deltas easier to read/work with.\n. > so doesn't it say insert 'aaa', delete the first two letters\nYes this is more specifically correct. I reversed so there's no ambiguity over which two letters you are deleting.\n\nDon't you mean that it should be insert an 'a' at the 3rd position?\n\nYes.\n\nWill you consider using the same format?\n\nSure all reasonable ideas are worth considering. It's worth noting that Deltas are objects with useful methods so it will always do worse if we want sensible variable names. Either way the Delta interface is again not finalized and probably not optimal.\n\nHow do you do it with the following delta?\n\nDeltas describe the whole document so you start with index 0. You see insert 'aaa' so you insert 'aaa' at index 0. You see retain 2,3 and note 2 > your current index of 0 so you delete characters 0-2 from the original document. You advance to index 3 (keeping one character). With no more instructions if index 3 was not the last index of the document, you delete the rest of the document. You can avoid having to do this yourself most of the time with Delta.apply.\n. > Step 2: RetainOp { start=2, end=3 } -> current index is 0 so I delete characters 0-2 from the original document and get \"312\" this is clearly wrong.\nThis is why I switched the instructions around earlier. The original character 0-2 is now index 3-5 since a 3 letter string just got inserted. So after step 2 you should have 123.\n\nIs this the non optimal representation you was referring to?\n\nYes\n. Let's start with 'ab' instead of '12' to avoid confusion with inserted text.\n1. Insert '123' should yield 123ab.\n2. Retain (2,3) has two steps\n   - Delete characters 0-2 (as explained earlier). This is index 0-2 of the original document which was 'ab' not '123ab'. So we delete 'ab' not '12'.\n   - The other step and the rest of this I won't re-explain as there didn't seem to be confusion.\n. Thanks @enhdless for taking this on!\nI was planning on refactoring render.coffee so wanted to do that first before addressing this PR to avoid conflicts. It should also make the implementation of this cleaner and easier.\nI'd also prefer to not create new API endpoint and instead overload addStyles to take either and Object (as it is currently) or a String (for a stylesheet url).\nAlso I need to put together a contributor guidelines doc but new features need to be accompanied with tests. It doesn't have to incredibly complex. In this case just something like the test for addStyles (which I should probably move to test/unit/render.coffee) should be fine.\n. We definitely need to add more examples and code snippets and this seems to be a common use case. Thank you for sharing!\n. Actually here is a codepen demonstrating autosave: http://quilljs.com/playground/#autosave\n. Can you elaborate on the not working part? Are you getting an error?. The code is not supposed to save -- it just demonstrates where the calls would go so please take a look at the code in that codepen to see. There are many backends and ways to communicate with a server but those are out of Quill's scope.. Yes I'm probably not escaping correctly somewhere. Thank you for reporting this.\n. Yes @TooTallNate is correct you just have to put the font in quotes. I just changed our demo to use a font that has a space: https://github.com/quilljs/quill/blob/develop/demo/index.jade\n. The beta release has a placeholder configuration option.\n. Quill now does as of 1.0.0-beta.8.\n. Quill is moving towards a simpler Medium and Dropbox Paper like image UI out of the box which does not have image resizing. If someone is willing to implement this and contribute it as a module feel free to open another issue and I would be happy to provide guidance.\n. Thanks for your work and offer to put it out into open source @kensnyder. There definitely seems to be interest from others in using it. It would probably make more sense to put it on npm first as it would take me a bit of time to review and back and forth for adding to core. Also it would allow you to choose which browsers/platforms you want to support.\nIt looks like you have structured it as separate modules so something like a naming convention used is having quill prefixed and the type (module in this case) suffixed so something like quill-image-import-module and quill-image-resize-module for package names could work well. You may want to use a verb other than \"import\" (in quill-image-import-module) since import already has meaning in the programming context but up to you.\nLet me know if you need any help.. Yes we definitely need more documentation in this area. Both these examples would require internal changes to support, since they introduce new tags. Lists and bullets are even tougher since it somewhat breaks some assumptions in Quill (for example require more than one tag to define a format). I was planning on adding this myself soon.\n. Thanks for taking a look at this @vivekdurai. I'm working on lists/bullets at the moment but may be able to get to headers afterwards.\n. Yes I think this is a good idea and something we were planning on doing. A few questions we're still debating:\n1. Should a few \"core\" modules remain in the main quill repo? Ex. Undo-manager, keyboard, paste-manager.\n2. If so what is the criteria? A couple possibilities are:\n   - This is incredibly useful (toolbar)\n   - Quill is broken if this isn't included (undo-manager)\n3. How should dom.coffee, utils.coffee, and other potentially useful libraries be exposed to modules?\n. This is a main priority we are working on right now. The modules interface should be finalized in v1.0.\n. Thanks for taking a look at this. We're still trying to figure where modules should live (see https://github.com/quilljs/quill/issues/107) and a very likely outcome is that they will live outside of the main Quill repo. I wish I could give more guidance on how that would look like but right now it's still being figured out.\n. It should already preserve pasted links. If I highlight, copy and paste your comment into quilljs.com the link is preserved. Feel free to reopen if it's not working in a particular browser or if I misunderstood the question.\n. We'll try to use the Milestones feature soon to provide more visibility to current development but this particular feature is not being worked on at the moment.\n. No I think this is still an open request.\n. You can add a custom matcher for this behavior in 1.0. One of the unit tests is a useful example for this but of course you might want different logic or regex to determine what a link is.\n. You can pass in removeHotkeys({ key: dom.KEYS.TAB, shiftKey: true })\n. This has been added in the beta release\n. Added in 1.0 beta.\n. The href should be changed regardless of what the text of the link is.\n. Hmm I  think I'm confused by the question then. The only way you can change the textual content right now is by typing, regardless of the format whether it's bolded, linked, or otherwise. Maybe if you provide a specific scenario?\n. Ah I see. Thank you for the clarification. No it should not change the formatted text. In the future we may have the link tooltip also have a text field (similar to how Gmail/GDocs works) but for now the tooltip should just control the href.\n. Unfortunately timelines are not available. It's hard to give an accurate target and when an optimistic projection is made or things slip everyone gets very upset, including myself. I think a better policy is provide a clear roadmap and transparency in what's being worked on and let the observer use past development velocity as a predictor.\n. This has been added in the beta release\n. This has been added in the beta release\n. Docs will be filled out soon at http://beta.quilljs.com/docs/modules/code-highlighter/\n. From some preliminary research, tables are going to be complex to implement and probably won't be added in the immediate future.\n. Adding tables would be a great addition to Quill, both in beneficial impact but also work required.\nI think the key to success here is to start small. So I would scope the initial feature set to:\n- Tables are made of NxM cells, no cell taking up more than one row or column\n- Tables cannot be resized after creation\n- No special header or footer rows or columns\nThe first major decision is whether tables should be defined/implemented with multiple Blots (like how lists are implemented) or a single Embed Blot (like formulas or videos). The latter is more straightforward but also more constraining but as a starting point of the discussion we'll start here.\nFor reference, an expected table would look like this:\nhtml\n<table>\n  <tbody>\n    <tr>  \n      <td>A1</td>\n      <td>B1</td>\n      <td>C1</td>\n    </tr>\n    <tr>\n      <td>A2</td>\n      <td>B2</td>\n      <td>C2</td>\n    </tr>\n  </tbody>\n</table>\nInserting such a table could look like this:\njs\ninsertEmbed(index, 'table', [\n  ['A1', 'B1', 'C1'],\n  ['A2', 'B2', 'C2']\n]);\nDeleting the table can use the existing deleteText with appropriate index.\nEmbeds currently have the limitation that they cannot be updated--one would delete and insert a new table to update. This also more so affects large tables and realtime collaboration use cases. Some sort of update semantic for embeds could probably be introduced to Deltas and tables can just piggyback off of that. The only ramification I can think of is it may standardize around using objects so our definition might change to:\n``` js\ninsertEmbed(index, 'table', {\n  '1': {\n    '1': 'A1', '2': 'B1', '3': 'C1'\n  },\n  '2': {\n    '1': 'A2', '2': 'B2', '3': 'C2'\n  }\n});\n// Theoretical update embed\nupdateEmbed(index, {\n  '1': {\n    '3': 'Updated C1 value'\n  }\n});\n```\nThe keys dont neccessarily have to be indexes and can be used to bear more meaning, for example to indicate header status.\nThe other major limitation to implementing as an Embed Blot is: it is not clear how to support formatting within cells. I personally don't think it's a good idea to nest complex formats inside a small table cell anyways but simple formats like bolding within cells seem reasonable. Perhaps this could be an acceptable limitation of an inital table implementation however.\nImplementing tables as multple blots would have neither of Embed Blot's limitations, but introduces more decision points to clear up ambiguity it introduces:\n- Which of table, row and/or cell a Block Blot?\n- How will tables coexist with other Block level formats like lists, headers, etc?\n- How will a table's Delta representation look like?\nThere are a lot of paths here and I would encourage others interested to try and prototype one of these routes and report any unexpected issues or unexpected lack of issues.\nOnce a table is defined with Parchment, pasting should just work since initialization actually uses the clipboard.convert function. The only additional effort is if Quill's tables support a subset of HTML table feature (which will be the case) and you'd like to handle this specially. For example, if the above Embed Blot implementation route is taken without special treatment of <thead> Quill will just clump that with regular <tbody> rows, but if you'd rather strip <thead> content for some reason, you would implement a custom clipboard matcher.\nTo be clear tables need to coexist within the Delta format and semantic. Otherwise general and important methods like getContents, updateContents, setContents would break. With this satisfied, I don't see a need for top level table specific APIs. No other format requires this and it's not clear why tables would be special.\nAs far as UI I think doing what existing products like Word/Docs does is a good starting point. There are unused icons in quill/assets/icons/ that can be helpful for tables. Implementing good UIs is non-trivial work but does not introduce any implementation design risk I can think of.\nLet's see how far discussion in this thread can get us.\n. As an administrative note, I will delete all non-substantive comments from this thread to cut down the clutter and mass emails to everyone. Please use the Reaction feature to show support.\n. Not sure which repo is being referred to but Quill was updated 4 days ago. But no Quill does plan to add official table support in the future. There is no timeline at the moment but the community can make it faster by contributing and exploring implementation designs which is what is being done here.. Tables are a very large feature that will take time and work to add. I have posted a very detailed suggestion on how to start and proceed. If you want to ignore this advice that if your prerogative but the expectation it should be easy or straightforward to add tables from zero represents a gross misunderstanding of the feature.\nAlternatively you can just wait for us to add it in core but either way unconstructive complaints are not helpful.. @javiercbk I think that was something I tried and decided against. I don't remember the reason. This comment is what you are looking for. Subsequent comments by others who tried this approach or took a different one are also useful.. I should clarify the supported features (which I'll edit my original comment for visibility).\n\nAdd/remove rows and columns\nDoes not allow multi-column or multi-row cells (so no merge / split cells)\nAllow arbitrary inline level formatting, text and embeds\nDoes not allow multiple lines per cell or block level embed in cells\nAllow block level attributes based formatting (text alignment, direction)\nDoes not allow block level tag based formatting (header, list, code block, blockquote)\n\nThese decisions have been made deliberately with consideration of many factors but the biggest is the complexity (both implementation and UX) to utility ratio.\nThe unable to delete the row above/below the table has been fixed in the develop branch.\nI had to overwrite up/down because the native behavior is advancing to the next cell (not the next row) which I thought was unexpected. I did not consider wrapped text though. It would probably have to be one or the other but maybe the next cell is not so strange.\nIt should also be said Quill is built for customization and all of the keyboard interactions can be changed or removed.\nAt this point as well I am most concerned about correctness and robustness.. Thanks @saralnigam -- should be fixed now and updated the demo. You can do npm install quill@2.0.0-dev.2 but yes use at your own risk.. pasteHTML was deprecated in favor of dangerouslyPasteHTML and now removed in 2.0. Please keep this thread to table stuff only as you are notifying dozens of people. As I stated above I will remove irrelevant comments.. It's very difficult to do correctly and semantically; many other editors simply end up taking shortcuts. The ongoing work on custom formats will provide a much better foundation to implement complex formats like tables and nested lists.\n. This has been added in the beta release\n. Quill as of 1.0.0-beta.8 now no longer has a custom image tooltip in favor of a simpler flow where the image button opens the file picker dialog and converts this into base64 image to be inserted.\n. Closing this as I'm pretty sure the commit mentioned fixed the issue. Feel free to reopen if this is not the case.\n. No problem thanks for reporting!\n. Nothing looks obviously wrong from your code snippets. Do you have a fork I can take a look at to see what the issue might be?\nFor icons Quill mostly uses Font Awesome but I don't see any obviously suitable ones for text direction.\n. I don't see any additional functionality on the branch? The only commit just adds a button and styles but without any functionality attached to it, it won't do anything.\nAlso is it a common use case to change the text direction on a line level? I'm not too knowledgable but it seems like it might be more common to just change the text direction on the whole document.\n. Yes looks like the sanitizer is removing it. Also quill.coffee by default won't know about this new format. I played around a bit and got it to work with this commit: https://github.com/quilljs/quill/commit/7179e4cbad1b1108d38d6dd0b115715eb440f643. There's a bit of work needed (ux, testing) before it's ready to be added to Quill core but you can use this as a starting point if you'd like as far as functionality goes.\n. I was planning to add this as a separate module once the new module system is complete.\n. I was planning to add this as a separate module once the new module system is complete.\n. I'm glad you are finding the right to left support useful but I'm committed to fully supporting all the code that lands in core. While we could agree on an exception, other people will find this feature and expect otherwise. I will really try to move quickly on the module feature but in the meantime it's best to just use this branch.\n. I'm glad you are finding the right to left support useful but I'm committed to fully supporting all the code that lands in core. While we could agree on an exception, other people will find this feature and expect otherwise. I will really try to move quickly on the module feature but in the meantime it's best to just use this branch.\n. Modules are meant for anything non-core regardless of size. I'm actually going to start moving parts of Quill of out the main repo and into their own module repos. Text-direction support may be supported in core at some point but there are a few other higher priority tasks before this can happen safely.\n. Modules are meant for anything non-core regardless of size. I'm actually going to start moving parts of Quill of out the main repo and into their own module repos. Text-direction support may be supported in core at some point but there are a few other higher priority tasks before this can happen safely.\n. In theory you add a format that adds a direction style (and add direction to the whitelist) similar to this commit: https://github.com/quilljs/quill/commit/7179e4cbad1b1108d38d6dd0b115715eb440f643. However checking how this interacts with other formats and other browsers and add tests to make sure they stay compatible has not been done. It has for text alignment which is why text alignment is in core.\n. In theory you add a format that adds a direction style (and add direction to the whitelist) similar to this commit: https://github.com/quilljs/quill/commit/7179e4cbad1b1108d38d6dd0b115715eb440f643. However checking how this interacts with other formats and other browsers and add tests to make sure they stay compatible has not been done. It has for text alignment which is why text alignment is in core.\n. I'm planning on making some core changes that will pave the way for several formats including text-direction. If you want to use text-direction before then, forking or branching Quill and making changes similar to the text-direction branch is probably the best bet. But supporting formats one by one is unscalable and hard to maintain so for Quill the plan is to add support for a bunch of them at once and providing a robust way to add custom formats. It's not quite there yet so I apologize for the wait but I think this is the best route in the long term. \n. I'm planning on making some core changes that will pave the way for several formats including text-direction. If you want to use text-direction before then, forking or branching Quill and making changes similar to the text-direction branch is probably the best bet. But supporting formats one by one is unscalable and hard to maintain so for Quill the plan is to add support for a bunch of them at once and providing a robust way to add custom formats. It's not quite there yet so I apologize for the wait but I think this is the best route in the long term. \n. This has been added in the beta release\n. This has been added in the beta release\n. If you want to simply output Quill\u2019s contents in HTML this is already possible with DOM\u2019s innerHTML, as others have already mentioned.\nIf you want to edit the HTML directly, then you may make some change that Quill does not allow. Editors deal with this by cleaning this up, which Quill 0.20 also does, but this communicates nothing about why your edit was not accepted or cleaned. Sometimes the reason is obvious and even welcome like merging adjacent identical tags, but sometimes the reason is very elusive, particularly because often the reason you are extorting to editing HTML is precisely because you are trying to make a modification not supported or understood by the editor. If this is acceptable user experience then you can certainly implement a custom module but Quill is not in that camp and will not condone this use case with an official module.\nSome editors do not attempt to understand its contents and let the browser take care of everything through contenteditable, so they can accept any HTML edit, but then they suffer from all the issues from letting browsers take care of everything like non-determinism, inconsistent behavior across browsers, and cannot offer an API beyond what the DOM already offers. Most new editor do not take this approach and Quill does not either but if this is not the tradeoff choice you would have made then Quill is probably not the best solution for your needs.\n. Great thanks! I added some comments to the file. If you could fix those issues I can merge into develop.\n. Great thanks! I added some comments to the file. If you could fix those issues I can merge into develop.\n. Our first implementation was relatively simple. What do you think of how Gmail's composer's link editor / behavior when nothing is selected.\n. Our first implementation was relatively simple. What do you think of how Gmail's composer's link editor / behavior when nothing is selected.\n. Customizability is core to Quill and the default link tooltip is simply a module which does not have to be included. You can create your own (from scratch or inheriting the existing tooltip with this modification). The custom module guide or the link and image tooltips may also be helpful as an example to extend.\n. Customizability is core to Quill and the default link tooltip is simply a module which does not have to be included. You can create your own (from scratch or inheriting the existing tooltip with this modification). The custom module guide or the link and image tooltips may also be helpful as an example to extend.\n. In Quill 1.0, the toolbar has configurable handlers. Right now when the link button is clicked, it only opens the tooltip when with text highlighted. But you can add your own toolbar handler to do something else when the link button is clicked.\nAs far as extending the core Quill UI, I'm happy to take a look at a PR if someone wants to add a mode where the user can enter both text and url for the link.\n. This is mostly to make the default styling (which does not load any css) look reasonable. What is the alternative to using JS for modal positioning?\n. This is mostly to make the default styling (which does not load any css) look reasonable. What is the alternative to using JS for modal positioning?\n. Iframes have been removed in Quill in v0.19 so you can add styles the good old fashion way now. In the codebase styles are organized as stylus files in https://github.com/quilljs/quill/tree/develop/src/themes.\n. The docs are a bit misleading in that in the parameters a Delta object is expected but the examples it takes a standard js object. I made a change to take either. I did make some other changes on develop so will need make the necessary documentation changes before making a new release with this fix. Thank you for reporting this.\n. The docs are a bit misleading in that in the parameters a Delta object is expected but the examples it takes a standard js object. I made a change to take either. I did make some other changes on develop so will need make the necessary documentation changes before making a new release with this fix. Thank you for reporting this.\n. It seems to be working on the latest version. Is this what you are doing: http://jsfiddle.net/uA5V8/.\n. It seems to be working on the latest version. Is this what you are doing: http://jsfiddle.net/uA5V8/.\n. Apologies for the confusing Delta documentation right now. The interface is not finalized yet so we want to do that first before putting out comprehensive documentation. So for now thank you for bravely treading these unknown waters.\nThe initial document is not actually empty, it's \"\\n\" which is why you're seeing the off by one length. You can remove this character via the API but there's a few cases that can be simplified if we just have a newline character in the initial document so this is the default.\nLists/bullets/text-align and any future formats that are defined on an entire line are represented by the attributes on the \"\\n\". Ex.\n1. One\n2. Two\nis represented by the ops:\njs\n[\n  { value: 'One' },\n  { value: '\\n', attributes: { list: true }\n  { value: 'Two' },\n  { value: '\\n', attributes: { list: true }\n]\n. Apologies for the confusing Delta documentation right now. The interface is not finalized yet so we want to do that first before putting out comprehensive documentation. So for now thank you for bravely treading these unknown waters.\nThe initial document is not actually empty, it's \"\\n\" which is why you're seeing the off by one length. You can remove this character via the API but there's a few cases that can be simplified if we just have a newline character in the initial document so this is the default.\nLists/bullets/text-align and any future formats that are defined on an entire line are represented by the attributes on the \"\\n\". Ex.\n1. One\n2. Two\nis represented by the ops:\njs\n[\n  { value: 'One' },\n  { value: '\\n', attributes: { list: true }\n  { value: 'Two' },\n  { value: '\\n', attributes: { list: true }\n]\n. One interface idea other editors (like Apple Pages on mobile) have adopted is having some text either  or actual text except putting your cursor anywhere on that template text puts the selection on the entire text so when a user starts typing it replaces the entire text. It could also be set up in a way that the underline format is maintained in the case that the document is a form. Is this a potential solution that could solve your use case too?\n. One interface idea other editors (like Apple Pages on mobile) have adopted is having some text either  or actual text except putting your cursor anywhere on that template text puts the selection on the entire text so when a user starts typing it replaces the entire text. It could also be set up in a way that the underline format is maintained in the case that the document is a form. Is this a potential solution that could solve your use case too?\n. Quill 1.0 now lets you add custom formats and embeds so you can use this new version to add this input you are describing. Cloning Medium with Parchment might be a good guide to look at. Just as an honest assessment however, I do not see this being built into core Quill by the core team.\n. Can you give an example of what you'd like to do?\n. Can you give an example of what you'd like to do?\n. Thanks for video! Great way to figure out what's going on.\nYes everything I saw in the video can be done with Quill and arguably easier than other editors. By default (without the snow theme) the toolbar has no styling so you can easily supply your own to float it to the left and customize the interface. There are numerous events you can hook into to provide customized UI like the link editor in the video. Quill also works well when there are multiple editor instances in the same page and you can seamlessly switch between instances (or other non-Quill elements). \nFeel free to ask more questions or if you run into other issues here or some other new issue.\n. Thanks for video! Great way to figure out what's going on.\nYes everything I saw in the video can be done with Quill and arguably easier than other editors. By default (without the snow theme) the toolbar has no styling so you can easily supply your own to float it to the left and customize the interface. There are numerous events you can hook into to provide customized UI like the link editor in the video. Quill also works well when there are multiple editor instances in the same page and you can seamlessly switch between instances (or other non-Quill elements). \nFeel free to ask more questions or if you run into other issues here or some other new issue.\n. Yes this is correct. IMO you can just customize the styling of the toolbar plus some small modifications but the toolbar is organized as a module so you are free not to add it. Ex.\njs\nvar quill = new Quill('#editor');\nwith no modules included will give you an editable container which you can hook into with events and manipulate through the API.\n. Yes this is correct. IMO you can just customize the styling of the toolbar plus some small modifications but the toolbar is organized as a module so you are free not to add it. Ex.\njs\nvar quill = new Quill('#editor');\nwith no modules included will give you an editable container which you can hook into with events and manipulate through the API.\n. There isn't a specific api call for this yet.\n. There isn't a specific api call for this yet.\n. It's not required but I've found the editors array useful for debugging. When we add a proper editor destroy function it will definitely remove itself from this array.\n. It's not required but I've found the editors array useful for debugging. When we add a proper editor destroy function it will definitely remove itself from this array.\n. We definitely want to fix this but haven't had the time yet. I did try to scope it out a few weeks ago to see if there was a quick fix but wasn't able to find all the leaks. I'll take another look in the next couple of weeks but am currently focused on deltas.\n. We definitely want to fix this but haven't had the time yet. I did try to scope it out a few weeks ago to see if there was a quick fix but wasn't able to find all the leaks. I'll take another look in the next couple of weeks but am currently focused on deltas.\n. The concern I have is I'm not sure the two clean up task listed will be sufficient to clean up all memory used. I'm not sure where the gaps are but I imagine hunting them down would be the majority of the work for this issue. I'm happy to take a look at a PR but one of the things I will do is look at the memory profile in the Chrome inspector and make sure memory usage before initialization and after destruction is the same.\n. The concern I have is I'm not sure the two clean up task listed will be sufficient to clean up all memory used. I'm not sure where the gaps are but I imagine hunting them down would be the majority of the work for this issue. I'm happy to take a look at a PR but one of the things I will do is look at the memory profile in the Chrome inspector and make sure memory usage before initialization and after destruction is the same.\n. Okay I might be mistaken then. If you submit a PR I can take another look at the memory profile.\n. Okay I might be mistaken then. If you submit a PR I can take another look at the memory profile.\n. Great thanks for reporting. I was able to reproduce on IE11. Interestingly enough it does not appear to affect IE9/10.\n. Great thanks for reporting. I was able to reproduce on IE11. Interestingly enough it does not appear to affect IE9/10.\n. All of the Delta stuff Quill uses is actually in the tandem-core library so you can feel free to npm install and require it to do what you need. There's not as much documentation on it unfortunately but everything available client side should be available server side and feel free to post questions/issues.\n. All of the Delta stuff Quill uses is actually in the tandem-core library so you can feel free to npm install and require it to do what you need. There's not as much documentation on it unfortunately but everything available client side should be available server side and feel free to post questions/issues.\n. Merging with #626\n. Merging with #626\n. If you have access to the quill editor instance? The root property will get you the editor div inside the iframe.\njs\nvar editor = new Quill('#editor');\nconsole.log(editor.root);  // div inside iframe\n. I was able to reproduce on the latest version of Quill as well. Thank you for reporting.\n. I made a 90% fix that hasn't been committed yet. The change prevents the jump to top but if you paste enough content beyond the bottom of the editor it does not scroll down. I'm working on some test infrastructure stuff right now but if I don't get to a good stopping point by tomorrow I'll just push the fix.\n. It does that because the workaround targets the symptom of it jumping to the top. I have not figured out the cause of the problem yet which is what a 100% fix would do. In the meantime v0.15.2 has the workaround and most pastes should not be long enough for the limitation to be noticed.\n. Thanks for the info @rafales. The focus switch can't be avoided so we'll have to address the symptom in this case. The complete fix is on the develop branch and will be available in the next release.\n. @dzagorovsky It was closed because it was fixed. The commit hash is referenced. If you think there is a regression please fill out a separate issue with all the details requested.. I've reduced this down to just a contenteditable div so I filed a bug with Mozilla: https://support.mozilla.org/en-US/questions/1010816. Part of the point of Quill (and other RTEs) is to fix/work around browser bugs so this is still an open Quill issue just posting the link for tracking purposes.\nThat being said Firefox on Android is not an officially supported platform (mostly due to lack of test automation) but debugging in Firefox is pleasant enough that we'll keep this open and still aim to fix it.\n. This is working in the latest Android 6.0.1 + Firefox 46.\n. This has also been reduced down to native browser behavior. Bug with Mozilla: https://support.mozilla.org/en-US/questions/1010812. We'll still keep this open and aim to fix/work around this though.\n. This is working on Android 6 + Firefox 46.\n. I don't have a timeline but it's being tracked by issue #111 \n. 1. Select all on quilljs.com and hit enter twice\n2. html = quill.getHTML() which results in html storing <p class=\"line\" id=\"line-1\"><br></p><p class=\"line\" id=\"line-32\"><br></p><p class=\"line\" id=\"line-34\"><br></p>\n3. quill.setHTML(html)\n4. quill.getHTML() returns <p class=\"line\" id=\"line-36\"><br></p><p class=\"line\" id=\"line-38\"><br></p><p class=\"line\" id=\"line-40\"><br></p>\n. Closing for now but if you are still having the issue feel free to comment and let me know what you are seeing when you try the reproduction steps I posted (which is based off of your report).\n. Just added it to the main branch and released it in v0.15.1. Thank you @enhdless for the PR!\n. Great thanks for reporting!\n. I've reduced this down to native browser behavior so filed a bug with Chromium: https://code.google.com/p/chromium/issues/detail?id=393871. Part of the point of Quill (and other RTEs) is to fix/work around browser bugs so this is still an open Quill issue just posting for tracking purposes.\n. Looks like it's fixed in Chrome 37 so as soon as that becomes the stable version this should be fixed.\n. Chrome 37 is out so this looks to be resolved.\n. Can you provide steps for what you're doing?\n. Sorry I still need more details to be able to help. Can you post reproduction steps, the expected behavior and observed behavior? Thank you.\n. Right now the best way is just to overwrite the keyboard module's hotkeys variable. There will be an official API once an interface is finalized.\n. To overwrite the handler you would define a binding in the configuration with the same name as the default. The default behaviors are either simple or essential so there's not an API to insert a binding before a default one to be prioritized like I think you are suggesting.\n. I think Github comments might be hiding some of your input but are you trying to say using <div> instead of <p>?\n. Quill originally used a <div> but switched to <p> for semantic correctness but since it's causing issues we'll switch back in the next release.\n. Seems to be a duplicate of https://github.com/quilljs/quill/pull/108\n. Is there somewhere I can go to try this out? I see the behavior in the video but if I try to do the same thing in quilljs.com it seems to work. Perhaps this is also a platform dependent issue.. what OS and browser is being used in the video?\n. Here's what I'm trying: http://jsfiddle.net/jhchen/Fend4/. I'm still not able to reproduce on OSX + Chrome.\n. This actually seems like the issue from recent webkit changes #306. \n. Thanks for the PR. Do you have tests you can add to this?\n. The original bug report applies to the editor without the toolbar too. Ex. you can use hotkeys to make text bold and the same error will occur if you hit enter. Anything you push to your forked repo should update this PR.\n. What did you fork/branch off of @u9520107 ? The dist/ directory should never be committed (besides in tags because bower does not support compilation). But you are right about the sc-active. @sbberic it should be ql-active not sc-active.\n. The thinking behind those two lines is to remove unnecessary HTML. In the case where the cursor is on that exact spot though it does make a functionality difference so perhaps the current implementation should be changed. One difficulty though is the normalizer currently does not know where the cursor/selection is so things would either have to be reorganized or some abstraction layers broken.\n. @u9520107 It seems reasonable to me removing those two lines would address this particular issue. What I was saying is the two lines are there to solve a different issue which is when you have unnecessary HTML and the cursor is not in any of those unnecessary tags. So a proper fix would have to solve both problems.\n. What about something like quill.getLength() === 0? Or if you want to ignore whitespace quill.getText().trim().length === 0.\n. Ah a non-obvious 'feature' of Quill is that there's almost always a trailing newline (I believe it can be removed via the API but I can't think of a way a user via the interface could get rid of it). So checking for the text to be equal to \\n as an empty check should be safe but getText().trim() would work too.\n. Thanks for reporting! Thought we got all the methods we use but guess we missed one.\n. Thank you for the kind words. Adding custom formats is unfortunately not a well documented feature right now. Can you give a specific example of a format you are trying to add?\n. Thanks for the code. What are you trying to accomplish though? Is it just marking if something is a hashtag or not in the text?\n. @rchrd2 I'm not sure the addFormat call is causing the extra spans being added. I reduced the code here http://jsfiddle.net/4R2bT/5/ and the duplication issue does not occur. \nQuill does also recognize the class key  in a format object but that is expected to be a key prefix with the following being the value. For example how authorship is implemented it adds { class: 'author-' } so you'll see markup like this: <span class='author-jason'>Text Jason wrote</span>. In your case it looks like you want to use a class or attribute to indicate a boolean value which I don't think will work currently.\nWe do envision robust support for custom formats for Quill which would enable both these use cases but this particular API is nascent and we are planning an update soon.\n. Closing from inactivity but feel free to comment to reopen if it's still an issue.\n. I can't reproduce either. Can you check what version of Quill you are using? Printing out Quill.version should give you this value.\n. What version of Quill are you using? I can't find any !important rules in Quill's source.\n. If I'm not mistaken that says the style is coming from a user defined file called quil.html. The Quill library styles should come from a quill.css or quill.snow.css. A /*ffs*/ comment would also not have passed code review.\n. The toolbar currently only supports toggling values on/off with buttons. Just the dropdown supports multiple values. Text alignment in non-dropdown form is a pretty common UI though so I will add this as a feature request #170.\n. No problem. I'm going to close this since #170 is basically what you are looking for.\n. This has been added in the beta release by setting a data-value attribute on buttons.\n. Reports like these are how bugs get fixed. Thanks!\n. Quill is framework agnostic and does have any custom behavior for any particular framework at this point. There shouldn't be any reason the end user couldn't add their own directive though.\n. Quill unfortunately does not support arbitrary HTML as it makes tracking/interpreting the contents of the editor unmanageable.\n. One way is using the formatText API with link as the format.\n. An early design decision for Quill was to only support a subset of HTML. This was done to greatly simply the design and implementation required. For example the number of way you can get a newline rendered in html makes supporting arbitrary html simply untenable. So if there was a special div, Quill would have to not be required to understand its contents nor add any additional useful information about it and I'm assuming this would not satisfy the needs of those who want to see the ability to insert arbitrary html.\n. Hmm seems to be working for me: http://jsfiddle.net/jhchen/NqjTy/. Is this browser specific?\n. I see auto expanding is currently an open feature request: https://github.com/quilljs/quill/issues/95\n. Cool thanks for the snippet!\n. Most of the CPU cycles appear to be used by the string diff algorithm being run. In previous versions diff-match-patch was being used but switched to jsdiff due to the better support (at least in node) and much smaller codebase (we also didn't need the match nor patch part).\nEven though they both use implement Meyer's diff algorithm (which has a worst case of O(NlgN+D^2) and in this case D is very large) it looks like diff-match-patch includes a number of pre-processing optimizations that would have benefited this particular test run.\nThere's a few solutions worth considering:\n1. Add the pre-processing optimizations to jsdiff (if the maintainers are amenable)\n2. Add the pre-processing optimizations to Quill\n3. Special case setHTML\n4. Implement own diff algorithm with optimizations (we were considering implementing a custom diff anyways since no popular package we've seen has support for a \"suggested location of change\" which Quill does based of the cursor location. Thus if you insert a newline in the middle of two newlines, no standard diff algorithm can tell you the correct diff which is at index 1 and not 0 since they don't know where the cursor is nor have a concept of cursors.)\n. I'm working on a solution to this right now that should solve the issue in the general case.\n. The speed issues have been resolved in 0.18.0. Here's a forked fiddle with the same code except using 0.18.0 http://jsfiddle.net/jhchen/p27okm3z/1/ and as you can see the call is nearly instantaneous now.\n. This has been added in the beta release\n. This issue appeared to have fixed itself with the latest version of Firefox.\n. This isn't currently documented since the interface might change but the keyboard module can be used to achieve this:\njs\nvar keyboard = quill.getModule('keyboard');\nkeyboard.addHotkey({ key: 'S', metaKey: true }, function(range) {\n  console.log('user hit command + s');\n  return true;   // return false will prevent other listeners from receiving the event\n});\n. It's a good idea and I think many users would be interested in this option. We did have this option (with similar implementation) in the early days but a few browser inconsistencies showed up that was difficult to debug. Our test framework is a lot more complete and robust now so though it's probably a good idea to revisit this at some point and add official support.\n. There currently is not an API to get the pixel position for the cursor from Quill unfortunately. The best stop gap solution is probably to get a native cursor Range and using getBoundingClientRect. I can make this a feature request in the meantime too.\n. Can you use this same snippet except on selection-change instead of text-change?\n. Thank you for reporting I was able to reproduce on Firefox 31 on Mac as well.\n. This fix failed travis so we'll have to try something else.\n. The throwing errors is definitely a bug but I'm not sure the intended behavior is what you want. If you try to set the HTML to <div class=\"quote\"><ul><li>line</li></ul></div> the intended behavior is to merge into <ul class=\"quote\"><li>line</li></ul>\n. Can you try this on the latest version? I'm not able to reproduce.\n. Thank you for the report. I was able to reproduce in other versions of IE too.\n. Thank you for the report. I was able to reproduce in other versions of IE too.\n. Right now the delta interface is still unstable and in fact changes are being planned. We'll probably expose it after these changes are decided on and implemented.\n. Right now the delta interface is still unstable and in fact changes are being planned. We'll probably expose it after these changes are decided on and implemented.\n. Yes you can do var Delta = Quill.require('delta'); I haven't had a chance to update the module docs but this interface should be stable.\n. Yes you can do var Delta = Quill.require('delta'); I haven't had a chance to update the module docs but this interface should be stable.\n. Blockquotes are not currently supported. #115 is the feature request.\n. Blockquotes are not currently supported. #115 is the feature request.\n. That line was actually added to fix a bug: https://github.com/quilljs/quill/commit/b9b14ade73438afefc9eb05478941c4b9bebcfcf. I didn't realize it regressed with having multiple menus open though. I think the status quo contains the lesser of two bugs so I'll close this PR but happy to accept one that handles both cases.\n. There isn't a way to do this right now. It could potentially be a config option though. Do you want this to be the case for all links or just particular ones?\n. I agree with the concern with solving this by special casing an additional parameter. I think once the ongoing effort to support custom formats is complete, this customization will be trivial to implement.\n. First off thank you for the pull request. Adding iframes is a feature we want to add but there are a number of concerns before this can be added. You touch on one:\n1. I'd like to keep getting started with Quill as simple as possible and requiring users to include a stylesheet to use Quill is an extra step so I'd like to avoid this. One solution to prevent the conflicts though is when generating the iframe, add a class to html and body and change the default styles to include these classes. editor-container should probably be renamed to something less generic though, perhaps quill-container. I can understand some users might not want any extra styles be added even if it won't conflict though so maybe this can be another configuration option but that would be a separate and independent issue from this one.\n2. Are you running the development server (grunt dev or grunt server)? I actually just committed a change that will automatically run this so if you pull and try again this should work (if that was the issue). Assuming you it looks like the line that names the iframe got removed in the commit. This will break the e2e test as it looks up the editor iframe by name.\nA couple other concerns:\nThere should be no behavior differences between iframe and no iframe. iframes is an area where browser vendors differ quite a bit in their implementations so the risk is high. Ideally this would be accomplished without running all the tests twice. Also the confidence in similar behavior needs to be high enough that new features do not need to consider if things are run in the context of an iframe or not.\nAll the code currently expects an iframe. For example when modules add their own container it is appended to body. If a quill editor is added in the middle of the page then now there's a bunch of elements between the editor and module container which might break the module. I'd like to think the code was written well with minimal assumptions but there's probably at least a couple more examples where this is not the case.\nNot having an iframe also makes it exponentially easier for external code to interfere with Quill. So when issues occur there needs to be an easy way to separate if the bug is within Quill or external. I'm not sure what the best solution is but #176 is an example of something that would help in this regard.\nI don't expect one person to do all of this but do want to set expectations that this is going to be a significant change for Quill core. If you do want to take all of this on I can comment more specifically about what needs to be researched and what tests needs to be written. Otherwise it's also perfectly reasonable to just use this fork for your own purposes while other foundations are added and things stabilize.\n. Thank you for the kind words. Agree this is probably a good place/time to talk about the issues. There's a few benefits iframes provide that are benefical enough that almost all RTEs start off in an iframe.\n1. Protect the editor from interfering CSS\n   - This is pretty easily detectable and often easily fixable so some warning in the docs might even be sufficient\n2. Protect the editor from interfering Javascript\n   - Much harder to detect and even when it is in some cases hard to tease out what the right solution is. Just one of many many examples: it's perfectly reasonable to add an event listener and sometimes want to cancel the event. But then Quill (and other libraries) might also have a listener that depend on receiving that event.\n3. Control the doctype\n   - Browsers do different things with different doctypes. Quill supports and is tested on 13 browser/os combinations. We don't want this to have to multiply this by the number of doctypes which means either supporting one doctype (restrictive) or hope supported doctypes behave the same. I'm not hopeful but more research will have to be done on if the latter is realistic.\nFor at least all the other popular RTEs a non-iframe option has been added and this will likely be the case for Quill to at some point. I'm not sure what concessions had to be made for other editors but the path there for Quill involves having an acceptable answer for each of these benefits that is given up. A lot of this is also opinion (ex. what is acceptable) so that will have to be worked out too.\nRegarding styles: I'm not sure how Quill is preventing customization of its styles. You can just provide your own styles with more specific rules and ignore the ones Quill is adding. Minifying css also mostly involves removing whitespace which is already done in quill.min.js so there's really no savings there. Concatenating reduces a potential network request but quill.min.js (or whatever it is being concatenated with) is already being requested so there's no savings there either.\n. There's something to be said about preventing issues too though. Why is adding your custom styles to the single minified css file not an option 3?\n. There's something to be said about preventing issues too though. Why is adding your custom styles to the single minified css file not an option 3?\n. I agree with !important being a last resort but rule specificity is pretty commonplace in css so not sure it's as concerning. It is something to keep in mind when a no iframe feature is added though.\n. I agree with !important being a last resort but rule specificity is pretty commonplace in css so not sure it's as concerning. It is something to keep in mind when a no iframe feature is added though.\n. I've actually been doing a lot of researching and talking with other editor authors on the topic and concluded that Quill should move off iframes altogether. This will require a pretty significant change to the codebase I'll be writing a post with full details and explanations but based on what I gathered I think it's the right move forward. This PR unfortunately no longer applies but the good news is its goal will be realized and well supported.\n. I've actually been doing a lot of researching and talking with other editor authors on the topic and concluded that Quill should move off iframes altogether. This will require a pretty significant change to the codebase I'll be writing a post with full details and explanations but based on what I gathered I think it's the right move forward. This PR unfortunately no longer applies but the good news is its goal will be realized and well supported.\n. Thank you both for the kind words. In case you are interested here is a writeup detailing the rationale. @leoasis looking forward to meeting in Argentina.\n. Thank you both for the kind words. In case you are interested here is a writeup detailing the rationale. @leoasis looking forward to meeting in Argentina.\n. This is because paste events are being intercepted and drag and drop are not. I'll mark this as a bug for tracking.\n. Thanks for reporting!\n. I was able to reproduce this on Canary (38) but not stable (36). Is it doing the exact same thing on stable? If not can you post a video of what it's doing in 36? Thanks for the report.\n. Can you provide more details @steviesama? I can't reproduce the issue on Chrome 43 on my Mac.\n. Can you provide more details @steviesama? I can't reproduce the issue on Chrome 43 on my Mac.\n. What browser and version and OS are you using and do you see any errors in the console with all extensions disabled?\n. What browser and version and OS are you using and do you see any errors in the console with all extensions disabled?\n. If this is occurring in the 1.0 beta please create a new issue following the new issue guidelines. Linking to this issue will not be a sufficient description.\n. If this is occurring in the 1.0 beta please create a new issue following the new issue guidelines. Linking to this issue will not be a sufficient description.\n. This seems more appropriate for a Quill module than in Quill core. I just put out a guide on modules: http://quilljs.com/blog/building-a-custom-module/. If you want to take a crack at it yourself then let me know if you have questions. Otherwise our discussion group is a good place to see if others have interest in building it.\n. This seems more appropriate for a Quill module than in Quill core. I just put out a guide on modules: http://quilljs.com/blog/building-a-custom-module/. If you want to take a crack at it yourself then let me know if you have questions. Otherwise our discussion group is a good place to see if others have interest in building it.\n. You can specify this style with addStyles ex.\njs\nquill.addStyles({\n  'div': { 'line-height': '24px' }\n});\n. You can specify this style with addStyles ex.\njs\nquill.addStyles({\n  'div': { 'line-height': '24px' }\n});\n. It should now be:\njs\nquill.theme.addStyles({\n  'div': { 'line-height': '24px' }\n});\n. This API does not change the editor's HTML\n. This API does not change the editor's HTML\n. Yes it can set text to arbitrary colors. The ones used in the demos are just examples. Feel free to change the value attribute on an option tag to whatever color you want if you are using the toolbar module or just specify whatever color you want through the API if you are using formatText.\n. Yes it can set text to arbitrary colors. The ones used in the demos are just examples. Feel free to change the value attribute on an option tag to whatever color you want if you are using the toolbar module or just specify whatever color you want through the API if you are using formatText.\n. Custom colors have worked out of the box as described by the documentation since a very early version of Quill.\nVia the API, formatText just works. You an try it out by going to https://quilljs.com, opening the developer console and trying quill.formatText(0, 10, 'color', '#abc123');\nVia a custom toolbar, you can just change the toolbar setting to { color: ['#abc123'] } like in this example. The configuration details for the toolbar can be found here.. Custom colors have worked out of the box as described by the documentation since a very early version of Quill.\nVia the API, formatText just works. You an try it out by going to https://quilljs.com, opening the developer console and trying quill.formatText(0, 10, 'color', '#abc123');\nVia a custom toolbar, you can just change the toolbar setting to { color: ['#abc123'] } like in this example. The configuration details for the toolbar can be found here.. Sorry lost track of this. There's a couple stylistic tweaks desired but I'll pull and apply those. Otherwise looks great thanks!\n. Sorry lost track of this. There's a couple stylistic tweaks desired but I'll pull and apply those. Otherwise looks great thanks!\n. What's expected behavior? This is what Word / GDocs does.\n. What's expected behavior? This is what Word / GDocs does.\n. What is the iphone text options toolbar you are referring to? The < > and 'Done' on top of the keyboard?\n. What is the iphone text options toolbar you are referring to? The < > and 'Done' on top of the keyboard?\n. This seems to be an iOS feature and not Quill specific. I'm not aware it can be changed.\n. This seems to be an iOS feature and not Quill specific. I'm not aware it can be changed.\n. This is not yet supported.\n. When you say arbitrary do you mean iframes or something like polymer elements? Images, videos and audio have convenient and well supported tags so they will be added much sooner.\n. Adding video support is a planned feature possibly even before 1.0.\n. Sorry this has not been added yet. I'm currently working on some core format stuff that should pave the way for this.\n. @butsjoh There's no compatibility issue--just a misleading example it seems. The rich-text format just sees key-value pairs in its attribute object without ascribing any meaning to them. So Quill is free to use whatever key it wants to represent an image.\nIf you have further questions please open a separate issue or post on the discussion group as this is off topic for this video issue.\n. This has been added in the 1.0 beta release.\n. @dhiviyadhanasekar The most likely issue is the URL entered was not a valid video url since Quill tries to fetch and insert as a video whatever URL was entered.\n. Hey thanks for the PR. How will removeConflicting interact with non-conflicting line formats like text alignment? I'm actually also working on updating the formats implementation so there's a decent risk this will not merge well once I'm done with that. But on the brighter side headers should be a part of that update.\n. Makes sense thanks for the explanation. I'll still have to punt on this until the format changes are done though so I'll leave this open till then.\n. A clean merge can't be performed right now so there will at least have to be some conflict resolution. I'm still working on reimplementing the format configs though so a clean merge is likely going to be a moving target. I had to switch to working on Deltas/rich-text since formats turned out to be dependent on deltas so apologies for the delay but I should be back on track working on formats.\n. Agree this is better behavior.\n. This is a pretty simple fix and can probably be in a forthcoming release.\n. I wanted to verify if this was an issue or not. It seems the current state is you cannot programmatically trigger focus at all on a non-input element on mobile Safari. There may be a workaround but this seems to be a deliberate security feature from Apple.\n. As long as you are calling focus() from a user initiated action, things appear to work as expected.\n. It probably doesn't exist but what are you wanting to translate?\n. Still not sure what you are trying to translate?\n. Thanks for the clarification. Quill core does not actually output any text on its own. When you add the toolbar for example you can actually add any text you want. All the examples on the documentation site is in English but one could have done: \nhtml\n<div id=\"toolbar\">\n  <button class=\"ql-bold\">Negrito</button>\n  <button class=\"ql-italic\">It\u00e1lico</button>\n</div>\nand things should work the same. The only part Quill looks at is the css class which is invisible to the user. The other module I can think of that shows text is the link tooltip. This is less documented but you can pass in a template as a config to control the text here as well.\n. It's not implemented yet.\n. @leo-zhao Custom behavior like different color pickers is more suited for a module.\n. I see I thought the OP meant being able to see which color was selected in the dropdown:\n\nI'll reopen with this clarification in mind.\n. This has been added in the beta release\n\n. What browser+os are you using? When I test typing after a hyperlink on Mac+Chrome the style does not continue.\n. This seems to have been fixed in the 1.0 beta release. If you place your cursor after a link and continue typing in FF, the link will continue. However you are able to place your cursor after a link, click the link button and typing will not continue the link format.\n. This has been fixed in the beta release\n. Thanks for the PR! I made a couple of comments so with those updated this should be good to go\n. Great thanks!\n. My hunch is that the authorship module is causing the issues but have not isolated it definitively. The delta format is changing and will change the implementation of some modules including the authorship module so there should be an updated version to try out soon.\n. I think the above change should fix the issue but given the non deterministic nature of this bug please feel free to reopen if you re-encounter it. But here's some details on the change in case you are interested (and for my own reference):\nFirst I was able to consistently reproduce the error by:\n1. Set editor to a\\nb\n2. Make the 'a' line a bulleted list\n3. Select all and bold\nThe 'a' line understood its newline was bolded but how the text-change event works is it tracks the old document and diffs with the new document. When the 'a' line got bolded, it set an object key to true but that object is also referenced in the old document so the old document and new document both had thought the 'a' line was bolded thus the diff will not pick up a format change for the newline character and this will not get emitted in the text-change event.\nThe fix was to change the rich-text library to clone the object instead of merely saving a reference to it.\n. I'm sorry tandem-core is deprecated and no longer supported.\n. Looks like the focus fix for mobile safari exposed this though I'm not sure it's technically the cause. In the meantime the offending line is enabled only for iOS until a fix is out.\n. This is fixed in v0.18.0\n. Great thanks for the screen capture. I'll close the other one since this one has more detail.\n. The issue is quill uses the authorId as a css class and those characters are not allowed. I'd suggest either replacing special characters with hyphens (or some derivative of emails) or using user ids.\n. I was able to reproduce on IE11 but I'm not seeing it in FF on either Windows or Mac. What OS and version did you encounter this on FF?\n. Awesome thanks @jonathansampson!\n. Okay I think I misunderstood originally. You are saying the outer page scrolls up not the editor itself correct?\n. Yes I agree ideally the page would not move at all. I'll have to see if this behavior is preventable rather than the the current approach of trying to restore position but it's the same issue both within the editor and the page the editor it is on.\n. Cool thanks for the PR. Sorry for the style changes but the codebase should maintain consistent code conventions. I'll also add a style guide soon so this can be easier in the future.\nOne option is upon destruction set the iframe container to the html contents of the editor inside the iframe. This would solve most of the event listener problems since all the listening dom nodes would get destroyed. The exception is the focus on the iframe container you have a test for but that could perhaps be changed to be attached to the iframe itself instead.\n. Sorry for the delay. I was debating the best solution to the focus listener issue and think it might be that actually we can just pass in this.focus to the focus listener and thus that can just be passed into removeEventListener. To stay consistent though we should create a dom function off that is right now just a fallthrough to removeEventListener. Can you add this to a separate PR with a simple test?\n. I think the _.bind() call is unnecessary so if it's changed to dom(@iframeContainer).on('focus', this.focus) then later reference this.focus in the event removal step.\n. Hmm okay forget dom.on attaches an anonymous function. What's the issue with IE? I'm not seeing any obvious errors..\n. I'm not sure what you mean.. what input are you talking about?\n. Is there a sample note whose Delta contents you can post? This might be related to #175 but this seems to be even slower.\n. I tried the content on the new v0.18.0 release and it seems to fixed now\n. Right I think the major challenge is that the normalizer is not configurable. There are many benefits to turning it into a class and this needs to happen for a couple other bugs to be fixed such as #191. I'm hoping to get to this soon so it might work best for this feature to be added after the normalizer changes.\n. They seem to either have their own fork or build that probably changed the DEFAULT_BLOCK_TAG constant (and got rid of the browser default padding on paragraph tags).\n. The default block tag in the 1.0 beta release is <p>, with no bottom margin. If you want the bottom margin you can add it with css. If you want the default block tag to be <div> like it was before, you can configure with Parchment:\n``` js\nvar Parchment = Quill.import('parchment');\nvar Block = Parchment.query('block');\nBlock.tagName = 'DIV';\n// or class NewBlock extends Block {}; NewBlock.tagName = 'DIV';\nQuill.register(Block / or NewBlock /, true);\n// Create your Quill editor like before\nvar quill = new Quill('#editor');\n``\n. This should be fixed with the PR merge\n. Thank you for giving this issue a try. I should have left a comment on the issue page but didn't get a chance to look much into it until now. The issue with modifying stripWhitespace is that it's being used in multiple places, others of which do need it to get rid of whitespace between tags (which is why many tests are failing with this PR). The solution for #149 will probably involve not using stripWhitespace in setHTML but I haven't been able to see if this adversely affects other areas of the codebase yet.\n. Thank you for the PR. Can you fix the two issues I commented about and I can merge?\n. Great thanks!\n. Can you include the exact header?\n. Thanks for taking another look at this issue. The proposed solution makes too heavy use of complex regular expressions that I'm not confident it can be maintained. Wish I could provide a solution than just pointing out a problem but don't have the former at this point.\n. I think I would prefer just making paste faster if it is lagging for you. Can you give an example of something you are trying to paste that's slow?\n. You're exactly right--there is a bug in rich-text delta's slice. Fix should be out in the next release.\n. Answered on the discussion forum but [formatText](http://quilljs.com/docs/api/#quillprototypeformattext) is the call you need.\n. This is an issue with grunt-karma https://github.com/karma-runner/grunt-karma/issues/120 as soon as they update I will update as well.\n. This message is more of a warning than an error.grunt testshould still work just fine but I see from your output it is not. Can you try to rungrunt dev` and going to localhost:9876/debug.html in Chrome manually and see if the tests run? If not can you see if there are any errors in Chrome console?\n. Yes Quill uses ids and there's not a way to configure this. The best workaround right now is to strip the ids (either with a parser or regex) from Quill's getHTML output.\n. The use case seems rare enough and the consequences innocuous enough that it can acceptably be a known limitation. And by rare it's not just having multiple copies of Quill generated HTML on the same page, it's having multiple unsanitized copies, which drops the number to almost zero. Since this issue was posed as a hypothetical I did not interpret it as evidence to the contrary. The workaround suggestion was based on the assumption that HTML output would be sanitized for security anyways and additional sanitization for removing ids (if the user cares) is not burdensome but I suppose that could have been made more clear.\n. Not at this time. Feel free to follow along this issue in ShareJS for updates on a demo.\n. The editor starts with a newline character so the text-change reported here is correctly just an 'a'.\n. The full delta would be [{ insert: 'a' }, { retain: 1 }]. However trailing retains are optional as in the new delta format trailing retains are implied as opposed to implied deletes in the old format.\n. It should be [{ delete: 1 }] which is what I'm seeing from a cursory local test. If this is not what you're seeing the please open an issue with the os/browser you are using with reproduction steps and I'll take a closer look into it.\n. It's very difficult to reason about OT and transforms without pen and paper as it is riddled with off by one errors and I've never been able to do it just looking at code. The code posted with \"arrived\" is named very similarly to how the tandem library looked. I'm not sure if similar names were chosen or if this is trying to repurpose tandem but I would caution against the latter. Rich-text was implemented according to the ottypes spec and so if it happened to work with tandem it was by luck and not design. It is my intention for Quill + rich-text + sharejs to all work together well so I would recommend taking a look at integrating ShareJS instead of a custom solution.\n. To answer the second question I don't believe this is not a bug. It looks like tandem-core and rich-text happened to choose opposite orderings. I think b.transform(a) in rich-text should produce the same result as a.transform(b) in tandem-core but again tandem-core is no longer being supported and this repo is really for a rich text editor not OT.\n. I believe it does conform. Take a look at the type declaration: https://github.com/ottypes/rich-text/blob/master/lib/type.js.\n. transform does not modify either delta--it returns a new resulting delta. This was done to be consistent with transformPosition which has less of a choice in its interface. If there's any more followup can you please post on the rich-text repo? This conversation no longer has anything to do with Quill.\n. Thanks for the PR!\n. It's unclear the complexity this introduces does is worth the UI annoyance it would mitigate and no one seems to have been motivated to move this forward towards an implementation.\n. There's no more normalizer in the 1.0 beta release and Parchment allows you to add custom tags for content inside Quill.\n. I'm still planning on adding this once the work on Custom Formats is done. That implementation will not rely on execCommand so existing formats will be much less buggy and new formats can be possible. I personally agree with not having both superscript and subscript at the same time and this would be a sensible default but this behavior will be very easy to control with Custom Formats.\n. text-change event now reports the old document in the 1.0 beta release\n. This is not currently being worked on as it still lacks a compelling real world use case.\nFrom a user of an editor / word processor perspective, it's incredibly confusing to have two ways to have newlines, especially when one looks like two (<br> vs <p> with padding). I can see why a developer might find this convenient to have richer semantic organization as @davejachimiak mentions, but convenient is a long ways from a need. Furthermore Quill is a WYSIWYG editor, not an HTML editor, and having complete control over the HTML markup it generates is not a project goal.\n. A user inserts a newline by hitting enter. If the user hits enter again (leaving the new line blank), they have just created what most readers would consider a new paragraph.\n. @cydrobolt I'm assuming you've made some modification to add shift+enter? On the quilljs.com editor shift+enter is the same as enter but in either case bolding across the line does not error.\n. The fix functionally looks good. Can you shorten the commit message so it does not overflow though (72 chars)? Feel free to use the commit body to add more details.\n. Can you also add 4 pixels of space between the \"Change\" and \"Remove\" text (perhaps margin-right on Change)?\n. I think it's better to use css to create the space so stripWhitespace() shouldn't be a problem here?\n. Could be personal preference but I've never relied on whitespace in code to produce visual space. Many HTML compression tools get rid of them and explicit margin/padding has always been more reliable in my experience.\n. I'm not saying its insignificant I'm saying I haven't found it to be reliable.\n. Cross platform compatibility is the reason inline styles are used. If you try to paste contenteditable text in Firefox into other applications like Word, class styles are not copied over, but inline styles are. It's not the prettiest markup but is the most practical for the time being. Some users might be willing to sacrifice this for the benefits of classes bring such as responsive design, which is why this is a feature on the roadmap.\n. Here's a demo showing how to switch between using styles or classes in Quill 1.0: http://beta.quilljs.com/playground/#class-vs-inline-style\n. Thanks for the PR. This issue is being addressed more directly with the new upcoming changes to formats.\n. This has been fixed in the 1.0 beta release.\n. This is not currently configurable. I'll add this as a feature request.\n. Quill no longer adds the https:// and actually defaults to relative URLs but you can also customize this in the 1.0 beta:\njs\nvar Link = Quill.import('formats/link');\nLink.sanitize = function(url) {\n  // modify url if desired\n  return url;\n}\n. Yes Sauce Labs is a bit unreliable sometimes. Format internals is in flux and making normalizer a class is one of the necessary changes. I'm not sure this can cleanly merge (both in git and design thinking) with the changes already made on the format branch but in principle something like this will be added once the format changes are ready.\n. Great to hear. Yes reordering is my mind but I'm not sure yet how much extra complexity it adds. If it's high enough then it might be better implementing separately without delaying the other format stuff. Should have a better idea on this soon though.\n. This has been fixed in the 1.0 beta preview\n. Cool thanks for the catch on the bug. I think I was being too clever in setting start's value in the line above and the code might be more clear if that part was just a normal if/else block. Can you make the change and squash the commits?\n. Actually thinking about it more I think the commit is fine. I was thinking something else but I realized there was another issue with it.\n. You have to build lodash first with grunt lodash. Or you can grunt dist and all the steps are taken care of for you.\n. Are you trying to build Quill or just adding it as a dependency for your project?\nIf you are trying to build Quill from source then the way to do it is with grunt. Check out the Local Development instructions.\nIf you just want to use Quill in your own project as a dependency then npm install quill will give you pre-built Javascript and you won't need to mess with grunt or browserify.\n. The custom lodash build is not meant to be published. I think I misunderstood your original issue. This sounds more related to #274 now.\n. I'm not sure this is desired behavior. dom functions return dom(node) to support chaining. If you want the original node just use .get() (very similar to jQuery's API).\n. I didn't notice the inconsistency. It should always return a dom wrapper for chainability.\n. To clarify you are trying to run command line browserify on a file that required Quill?\n. No worries those two linked issues were very helpful in getting to the bottom of this.\n. Thanks for the correction!\n. Great thanks for the PR. I merged the other remove link PR that I think it's conflicting with this one. Can you resolve the issues and I'll merge this one as well?\n. Is that how the page looks when it initially loads? The newlines are not showing up either in the video...\n. Are there any Chrome extensions running and if so can you disable them and try it out? I'm not able to reproduce on my Windows 8.1 VM with Chrome 39. Also are there any errors in the console?\n. Yes it's possible and seems like reasonable behavior.\n. Can you try on the quilljs.com homepage? That will remove the ngQuill variable. If it still doesn't work can you let me know which browser you are using and exact steps to reproduce? Tapping seems to work on my Mac with the various browsers (Chrome, FF, Safari).\n. Definitely a good idea to use modern APIs though the there is the tradeoff is a messier codebase where features are implemented multiple times. Depending on the benefits though it might be worthwhile.\nThe way to test paste would have to be selenium I think since an important part is actually interacting a real paste event object. I have an end to end test set up with protractor in the tests/ folder that might be a useful starting point. Another challenge with paste though is it's useful to know copy/paste behavior between applications so perhaps this an area where some manual testing will always be necessary.\n. Quill does not understand/edit arbitrary HTML and so one of the necessary steps is reduce any input to the subset of HTML it does understand. Over time it will understand more--for example headers are being added soon--but it will still be a subset.\n. insertText is for text not HTML. There is no API for inserting a fragment of HTML arbitrarily.\n. I'm not able to reproduce on Chrome with http://quilljs.com/examples/.\n\n. You only have to do http://localhost:9000/quill.js. The dist/ folder is the static output that is built for bower but for development just use http://localhost:9000/quill.js. The available paths that are built on the fly basically mirror the .build/quill folder (created when you run grunt release).\n. This has been fixed in the 1.0 beta release\n. Thanks!\n. Closing from inactivity. Please comment if you still have this issue.\n. Until shadow dom support is more widely available and more developers start using it, it will be hard to prioritize. I'd be happy to look at any pull requests if you want to tackle this anyways though.\n. Getting 1.0 out is the main priority right now. I'll re-evaluate items for future roadmaps after that.\n. This is still desirable behavior but since the codebase has changed so much it's probably better to start with a new PR and link to this one for reference.\n. Thanks for the PR. The only issue is the anchor tag to normalize urls. The main purpose of the function (which now seems poorly named) is a minor protection against xss rather than fix malformed urls so at minimum the check for whitelisted protocols should remain. Using the anchor seems unnecessary as the url is set to the href of another anchor (either the link being modified or the one being created) later anyways. Can we remove that commit and I'll merge the other three?\n. Yes resetting the input and repopulating would be better so we can avoid maintaining the extra anchor.\n. Thanks!\n. Is this value different from top + height?\n. Can you make a PR with just the test? I would prefer to have a check so the editor does not trigger the error instead of recovering when it is with try/catch. Thanks!\n. Great thanks! Yes Quill ideally should be broken up into more independent parts but it's still unclear where the lines should be drawn and the inventory of dependencies.\n. Thank you for the report. Looks like something recent in webkit changed paste behavior to use a font-weight style instead of copying the <b> tag.\n. The fix is live in 0.20.1.\n. Duplicate of #52 \n. This isn't well supported at the moment but should be address with the custom format feature I'm working on.\n. That branch is still a work in progress\n. You can now define a custom attributor with Parchment and Quill will treat this similarly to a format, such as adding it to delta's attributes.\n``` js\nvar Parchment = Quill.import('parchment');\nvar offsetAttributor = new Parchment.Attributor.Attribute('offset', 'data-offset', { \n  scope: Parchment.Scope.INLINE\n});\nQuill.register(offsetAttributor);\nvar quill = new Quill('#editor');\nquill.setText('Gandalf the Grey');\nquill.formatText(0, 7, 'offset', '0');\nquill.getContents();  // should have a delta with offset attributed\n```\n. I gave one example and if you look at the docs for formatText and insertText you will find it is an overloaded function that supports passing in an object of multiple attributes.. Merged in 76253ce thanks!\n. Thanks for the fix!\n. There isn't an officially supported way to add new formats to Quill at the moment but that's one of the new features I'm working on. It's a pretty big change though as the hope is it will allow for even very complex formats to be introduced so the timeline is not very immediate.\n. Here's a demo showing how to switch between using styles or classes in Quill 1.0: http://beta.quilljs.com/playground/#class-vs-inline-style. Take a look at Parchment for creating/recognizing new DOM node types.\n. Thank you for identifying the issue. I'd prefer to add a check for embeds for now as a short workaround instead of getting rid of the whole optimization. The real issue is inserting embeds are not its own operation and have to piggy back off of a routine designed for inserting text. It's on the todo list to change this once I have some time to revisit.\n. Thanks for the PR!\n. This looks like it has been fixed in the 1.0 beta release on the latest Android 6.\n. Thanks for the fix!\n. A PR would be great!\n. From an internal/DOM perspective the selection changes when the DOM node it is on changes or if the index on that DOM node changes. This will happen as a result of typing because that changes the DOM text node. The silent is available for cases like this where the selection change is a side effect of another action and in those cases perhaps desirable--otherwise every keystroke would trigger a selection change. I think the silent selection update you are referring to is due to this case.\n. I guess what I was trying to get at is the DOM/internal definition of a selection change is not what one would expect and should be abstracted from the end user/developer. If I type a letter did the selection change? How about if I didn't do anything at all but some module used the API to insert content a couple places before my cursor? In both cases the DOM definition is yes but intuitively it's no--hence the silent feature.\nThe preferred solution to addressing this bug is just to set the selection to index 0, like you originally suggested (although there are some edge cases to consider such as if it's already there before calling setHTML).\n. Quill 1.0 no longer has addFormat in favor of Parchment which allows much more customization. Headings itself is implemented in core 1.0 but in general you can exclude other formats by inheriting and overwriting a Blot's format or formatAt functions.\n. How are <pre> tags getting into Quill? They should be converted to <div>s. Or do you mean you copied some text which contain <pre> tags and paste that into Quill?\n. Yes. It's organized as a module and the hotkeys are hooked up by default but if you want to programmatically access it you can:\njs\nvar undoManager = quill.getModule('undo-manager');   // Assuming quill is your editor\nundoManager.undo();\nundoManager.redo();\n. Not sure this is applicable anymore to the latest in the codebase. IE9/10 support has also been dropped.\n. You can define custom content in Quill 1.0 beta in the form of embeds and Quill will not interfere with its children/descendant nodes. This may but does not have to be contenteditable=false.\n. Thanks!\n. The included link tooltip is meant to be a good baseline with sane defaults and so the ideal solution for #262 is to make the base link tooltip easy be inherited/extended with the desired modifications. This isn't the case today partially due to lack of documentation/examples but also due to the link tooltip interface not being finalized (and it can certainly be refactored to be more fit to being inherited) so I'd be hesitant to add to the config options right now.\n. The use case is valid but the solution is unscalable. The real issue is the link-tooltip should be easy to extend. I'm sorry you spent time on a PR that didn't get merged but it does say in the contribution guide to check that plans fall within Quill's scope.\n. Thanks for the catch--you are correct the values in the docs are not quite correct. For consistency can you append 'px' to each of the values since that's how it appears elsewhere (such as the homepage toolbar). Thanks!\n. I think I'd rather have it be pixels for now for consistency.\n. Thanks!\n. https://github.com/quilljs/quill/pull/332 has been merged and live.\n. That was actually Quill's earlier design (to enclose all text nodes in at least one inline node) but caused issues with Android's keyboard so was changed to the way it is now. Why do you need text nodes to be contained in a span?\n. Please comment/reopen if this is still an issue.\n. Thanks for the catch! Fixed in https://github.com/quilljs/quill/commit/767f2ed2922e12b3b1d12cb5f224466955b5e748\n. Thanks!\n. Slight nitpick: can you change it to link just \"Github\" and not \"on Github\"? Thanks!\n. Thanks!\n. Can you give an example of what you're trying to paste into Quill? In general spaces are preserved.\n. I see. The cause here is there's padding under a <p> tag by default but Quill lines does. You can reproduce this by just adding a css rule to a Quill line to add the padding.\n. Quill unfortunately was not designed to deal with arbitrary HTML. This is partially a tradeoff in order to provide greater consistency necessary for its high level APIs. Unfortunately this does mean given some text rendering, there's only one Quill valid HTML markup (which it will covert to).\n. I agree this is a bit confusing. The reason this came to be is when line formats (text-alignment, lists/bullets). The following list:\n1. Eggs\n2. Bacon\nis represented by the ops:\njs\n[\n  { insert: 'Eggs' },\n  { insert: '\\n', attributes: { lists: true } },\n  { insert: 'Bacon' },\n  { insert: '\\n', attributes: { lists: true } }\n}\nIn this case the trailing newline has to be in the delta--otherwise we wouldn't know that \"Bacon\" is part of the list. We could only include the trailing newline only if the last line is formatted but in that case it's equally confusing, just less common. Also this creates a case where adding a format would change the length of the document. The current state is best solution we have but open to new ideas.\n. This has been fixed in the beta release\n. After surveying other editors, it's not clear it is necessary or expected behavior for the toolbar button to light up when around an image. With formatting functionality, it is important to know if selected text already has the format since it is a toggle and thus changes the behavior of clicking the button. With insert functionality, the buttons should always just insert the embed.\nQuill only has one embed at the moment which makes the distinction difficult but its current behavior does seem to be the common behavior amongst rich text editors, for example CKEditor and Gmail composer. Were you basing the PR behavior off of another editor or just an evolution of Quill behavior?\n. It looks like even other open source rich text editors have an insert vs. format distinction and for now I think Quill's default behavior should remain similar. It would make more sense if Quill had a better image tooltip and/or other embeds that could be inserted which will eventually be the case. I'm hoping to go through all the modules including the toolbar and image tooltip after the custom formats work is done and make some much needed improvements.\n. The initial implementation of the tooltip was when Quill was still in an iframe so it necessarily had to be confined within the editor so there was logic that would place the tooltip to avoid being cut off (in the vertical direction as well).\nNow there's not necessarily that motivation with iframes removed which is why https://github.com/quilljs/quill/commit/04c7c277bce2e879c32aa2cdc2df60f4bd82bd5c landed but it looks like just a high z-index on the tooltip is not sufficient--the overflow-y on .ql-container needs to be removed as well to fix this particular issue. However this is an important rule to allow scrolling in the editor so I'm not sure right now what the best solution is but thought I'd add some context.\n@willrowe The high negative margin is because browsers do not correctly report dimensions when an element is hidden. I'm can't remember if/why visibility was passed over as well though.\n. The tooltip placement has been reverted to be within the editor https://github.com/quilljs/quill/commit/fd099bb40db8557570da544d5976e2f250bba463. \n. Yes calling setActive on enter/backspace should not be necessary anymore.\n. Nice catch thanks!\n. Thanks!\n. This is still desirable behavior but since the codebase has changed so much, it'd be better to start with a new PR and link to this one.\n. The best way right now is to set a css rule setting width to 100%. There is not currently a way to control image attributes in Quill more dynamically.\n. This looks like a proposed fix? Can you submit a pull request with a previously failing test?\n. Can you provide the sample word document or snippet that triggers the error?\n. Sure jhchen7@gmail.com thanks!\n. The toolbar references are still necessary for example if you toggle on bolding with cmd+B before typing. The updateActive upon hitting enter is the only line not necessary.\n. The current class system is not designed for binary values, ex. having a set class vs not. The class key in the format config is meant to be a prefix for classnames and the suffix is the value, ex. with { class: \"author-\" } an html element with a classname author-jason would have the format with value jason.\nThe new custom format system currently being worked on will handle binary values but for now this is not specifically supported. A workaround might be:\njs\nquill.addFormat(\"mention\", { tag: \"SPAN\", \"class\": \"ql-mention-\" });\nquill.insertText(0, \"this is a mention\", \"mention\", \"item\");\n. Do you mean for a numbered or bulleted list?\n. I assume you mean hitting the tab key on the keyboard? The expected behavior is to insert a tab character which it appears to be doing. If this is not what you are seeing please detail more precisely the steps for reproduction and what browser + OS you are using.\n. Not opposed to this idea it just did not seem to have gotten enough community interest to move it forward.. There does not appear to be the drive to thoughtfully explore what the change should be. At present it is unclear what the API(s) should be, how it would work under edge case scenarios, and how it would interact with the other event APIs.. There does not appear to be the drive to thoughtfully explore what the change should be. At present it is unclear what the API(s) should be, how it would work under edge case scenarios, and how it would interact with the other event APIs.. Great thanks for the PR! Just a few mostly stylistic changes requested in the inline comments.\n. Great thanks for the PR! Just a few mostly stylistic changes requested in the inline comments.\n. Agree with @brettimus. I'm currently working on another feature so it's wide open in the short term.\n. The new bubble theme in the 1.0 beta provides a floating toolbar theme.\n. The new bubble theme in the 1.0 beta provides a floating toolbar theme.\n. Thanks for the suggestion. I think this functionality would be more appropriate in an external module however.\n. Quill's data model currently cannot support such content since it doesn't have columns or code support. The Custom Formats milestone currently being worked on would add this capability.\n. Quill's data model currently cannot support such content since it doesn't have columns or code support. The Custom Formats milestone currently being worked on would add this capability.\n. I'm going to close this as a won't fix after taking another look at it. It's not within Quill's scope to be able to interpret arbitrary HTML input. The gutter with line numbers is a previous sibling to the code container's. Quill would have to be able to visually as well as structurally interpret the content and I don't see that being made a priority.\n. I'm going to close this as a won't fix after taking another look at it. It's not within Quill's scope to be able to interpret arbitrary HTML input. The gutter with line numbers is a previous sibling to the code container's. Quill would have to be able to visually as well as structurally interpret the content and I don't see that being made a priority.\n. Thanks!\n. This has been fixed in the 1.0 beta release\n. This has been fixed in the 1.0 beta release\n. Thanks for helping out @willrowe! Is this issue resolved then?\n. Thanks for helping out @willrowe! Is this issue resolved then?\n. Can you be more specific about what this PR fixes? grunt dist will still \"fail\" without ./node_modules/.bin being added to the path.\n. Can you be more specific about what this PR fixes? grunt dist will still \"fail\" without ./node_modules/.bin being added to the path.\n. Thanks for the PR!\n. Thanks for the PR!\n. There were issues with getting browserify + derequire and excluding lodash so had to revert.\n. There were issues with getting browserify + derequire and excluding lodash so had to revert.\n. Yes I'd like to move to webpack at some point because of their dev server feature but if it solves this too then all the better. Right now Quill has a custom server that I'd like to move away from.\n. Yes I'd like to move to webpack at some point because of their dev server feature but if it solves this too then all the better. Right now Quill has a custom server that I'd like to move away from.\n. I have not had another chance to take a look at it. Quill already uses a custom lodash build so it only includes the parts it needs. I found that to be cleaner since some files use a lot of lodash functions, the require section of the file gets very bloated.\n. I have not had another chance to take a look at it. Quill already uses a custom lodash build so it only includes the parts it needs. I found that to be cleaner since some files use a lot of lodash functions, the require section of the file gets very bloated.\n. Quill is dropping lodash as a dependency (in production builds--it is still used in test code) in 1.0 so this should no longer be an issue.\n. Quill is dropping lodash as a dependency (in production builds--it is still used in test code) in 1.0 so this should no longer be an issue.\n. Why should it be removed though? It still provides accurate version info for the end user.\n. Why should it be removed though? It still provides accurate version info for the end user.\n. > the recommendation is to use NPM instead of Bower\nCan you share the source for this? Not saying I disagree--bower was added in the early Quill days due to popular request rather than merit.\n. > the recommendation is to use NPM instead of Bower\nCan you share the source for this? Not saying I disagree--bower was added in the early Quill days due to popular request rather than merit.\n. I see. I'm going to keep the version field for now but thanks for the link.\n. I see. I'm going to keep the version field for now but thanks for the link.\n. These are all good reasons but are duplicates of existing issues #257 #204 and part of the current custom formats milestone.\n. These are all good reasons but are duplicates of existing issues #257 #204 and part of the current custom formats milestone.\n. I assume you are using Quill's CDN? It looks like it's because Cloudflare adds that cookie to all requests which I was not aware of so I've set the cdn.quilljs.com subdomain to bypass Cloudflare so the cookie should no longer be set by the Quill CDN.\n. I assume you are using Quill's CDN? It looks like it's because Cloudflare adds that cookie to all requests which I was not aware of so I've set the cdn.quilljs.com subdomain to bypass Cloudflare so the cookie should no longer be set by the Quill CDN.\n. I made the fix earlier but had to revert. Please see the referenced issue #394\n. I made the fix earlier but had to revert. Please see the referenced issue #394\n. Okay now both this and the SSL issue should be fixed. cdn.quilljs.com is no longer using cloudflare so there will be no cookie anymore.\n. Okay now both this and the SSL issue should be fixed. cdn.quilljs.com is no longer using cloudflare so there will be no cookie anymore.\n. This looks like it's related to #393. I'll reverse my changes for now so SSL will work.\n. This looks like it's related to #393. I'll reverse my changes for now so SSL will work.\n. I'm not observing this behavior. What OS + browser + version are you using?\n. I'm not observing this behavior. What OS + browser + version are you using?\n. This has been fixed in the 1.0 beta release\n. This has been fixed in the 1.0 beta release\n. FYI Quill uses the the pre-wraprule  to make tabs display properly--otherwise browsers collapse tabs into a single space.\n. FYI Quill uses the the pre-wraprule  to make tabs display properly--otherwise browsers collapse tabs into a single space.\n. That's because dist/quill.js is a prebuilt file. Quill's source is in coffeescript. If you want to build yourself with webpack then use src/index.coffee as the entry.\n. That's because dist/quill.js is a prebuilt file. Quill's source is in coffeescript. If you want to build yourself with webpack then use src/index.coffee as the entry.\n. Why is this sad? My recommendation is exactly the same as webpack's: \"Try to require the original source to get better results.\"\n. Why is this sad? My recommendation is exactly the same as webpack's: \"Try to require the original source to get better results.\"\n. The version quill ships with is unminified.\n. The version quill ships with is unminified.\n. If you're talking about the first line that's just the definition browserify inserts. Scroll down and you'll see quill's source is unminified.\n. @michaek is correct the lack of source code inclusion in npm is a problem. This is changed in the latest develop branch and Quill's build pipeline has moved to webpack so this will all be moot in 1.0.\n. Why bower.json and .bower.json?\n. Thanks for choosing Quill. I unfortunately can't accept any changes without understanding why it works--the alternative quickly leads to unmaintainable black box code. It does look like you can override a dependencies' bower config: https://github.com/ck86/main-bower-files#overrides-options so that may be a workable solution as well.\n. LGTM thanks!\n. Awesome thanks!\n. Take a look at Quill's getSelection.\n. Thanks for the fix!\n. I worry about adding 3 new API calls to the namespace as well. They could be merged into one and just take an optional parameter to exclude line/leaf formats?\n. It'd be much more useful if these calls returned the formats that will be applied to the next letters I type. They may be visible or invisible to the DOM which makes it tricky to implement. For example if I hit Cmd+B to activate bold, nothing changes in the DOM. Yet calling these methods at this point should give me this information. The toolbar does implement this but bugs crop up all the time on edge cases on different browsers so the ideal implementation would for one not require the toolbar module and two be very reliable on all supported platforms.\n. The main goal of destroy() originally was releasing memory. But if it also removed the ql-snow / ql-container classes the editor would lose its styling which I would think is more unexpected. Is having the classes causing an issue?\n. I'm going to keep the behavior as is for now since it's not causing real problems and I think it would if the classes were removed.\n. Thanks for the PR! Sorry about the tests. Karma hardcodes a retry of 2 times and travis's connection to saucelabs is very flaky for mobile platforms. If all the other tests pass and the error is just a connectivity error then don't worry about it I'll check and rerun.\n. Can you provide either the input that triggers the error and a larger subset of the call stack the demonstrates the infinite loop? A failing test would be even better. \n. This would likely be post-parchment unless someone from the community decides to take it on.\n. Thinking about edge cases are critical to designing a solution. Not all parts have to be implemented at the same time but ignoring them altogether brings the risk that you will have to redesign and reimplement everything.. The current behavior is the bullet is always black which has been acknowledged as a bug. So I'm clarifying in what cases should it not be black and in those cases how does the data and markup look like. This seems like an obvious prerequisite to an implementation to me. \nThere are higher priority core issues so to move this forward someone that needs this enough should think through the cases and make a clear proposal if they need someone else to implement it. Otherwise they can implement a solution themselves but without discussing it would run the risk of not having the PR accepted.. Thank for you the proposed behavior @aikar. From an implementation perspective it is very helpful because this suggests no changes need to be made at the data layer with no additional information needs to be stored to determine list coloring (or size, font, etc) which reduces the development cost considerably.\nI would suggest as a starting point for those interested in helping to take a look at ListItem in formats/list.js and adding an optimize() function to it that checks if all children has the same color and if so add that to the list item itself and if not remove. The same strategy can be applied to font, size, and background.. I can see the potential use cases but special casing like this is not maintainable code to have in core. When parchment is fully integrated into Quill you will be able to define your own nodes and control its merger behavior.\n. If you pass in { styles: false } into the options Quill will not add the styles to the header. Since quilljs.com/examples shows code that's actually being used on the page I think its more clear to not have one of the options to include { styles: false }.\n. Deltas have a method for transforming a cursor position so whatever is currently being used to resolve text conflicts should also be able to resolve cursor positions.\n. This is an excellent Pull Request. I've actually tried to add this myself in the past but didn't get a chance to nail down all the potential off by one errors. Just a couple of nit picks in the comments but otherwise looks great for merger.\n. You can pass in { styles: false } into the Quill config and nothing will be added to head.\n. Sounds like the use case here is to display a preview of the font in the picker? Why couldn't the picker text just be rendered in that font? It seems like the picker element could also just have a background image for the preview.\n. > The background image is possible, but not very clean to implement if you want a dynamic list of font.\nCan you elaborate on this?\n. The placeholder module is not part of Quill core. I'm not sure if it got finished or released.\n. Fixed by #435 \n. Thanks!\n. There appears to be two separate issues from my observations: \n1. Toolbar formatting on Android + Firefox is just messed up in general.\n2. Android autocomplete is interfering with formatting on Chrome + Android browser.\nEverything seems to be working as expected if the Android's autocomplete is not active (on a new line or after a space). Can you confirm this is what you're seeing as well?\n. This looks like it is fixed in the 1.0 beta.\n. Can you reproduce this on the quilljs.com homepage? If so what platform? I cannot on Chrome + Mac.\n. Just the standard: get rid of all the integration code and slowly add them back until the issues reappears.\n. Thanks for the report! Should be fixed now.\n. You can pass in a template into the toolbar. Does that work for your purposes? The default link tooltip is just one implementation and might not be usable in all situations. It may be best to just subclasses it or just create your own tooltip and register it, overriding the default tooltip.\n. Why is this a bug? The editing class is to control if a textbox to edit a link or link itself is visible. The margin is to show/hide the entire tooltip--two orthogonal purposes.\n. Closing as this is not the purpose of the editing class.\n. I think we were looking into adding a removeHotkey function from our discussion in #110. Is this still the intention @kmoe? I would prefer code over configuration. I think this would solve the problem as well @thomsbg?\nI would also caution against just removing the default enter handler. Browsers are very inconsistent in their behavior which can lead to frustrating bugs. But it sounds like what you were originally trying to do (add a handler before the default one) would work just fine. Perhaps the removeHotkey function can return the handler(s) removed so it can be added back if one just wanted to change the order.\n. What distro + version of Linux? Ubuntu + FF 40 is working for me.\n. Sounds good.\n. We had discussed that the handler for a hotkey be returned by the removeHotkey function but there may be more than one. Should it just remove and return the first or remove and return all of them? The latter of removing all of them makes more intuitive sense but returning a different type (an array) is not.\n. Thanks for the changes!\n. Not sure what you are doing with the shims but the standard usage works just fine: http://jsfiddle.net/8zo94vfL/.\n``` js\nrequirejs.config({\n    paths: {\n        'quill': 'http://cdn.quilljs.com/0.20.0/quill'\n    }\n});\nrequirejs(['quill'], function(Quill) {\n    var quill = new Quill('#test');\n});\n``\n. I'm not understanding step 2, particularly the overlaps editor space part. Can you clarify?\n. I believe this is the same root cause as #487 where the mouse action is a slight drag, not merely a click.\n. There's no more setHTML but an equivalent clearing of all text call does reset the format bar in the 1.0 [beta](http://beta.quilljs.com/) release\n. No. Right now Quill usesexecCommand('fontSize')and they require a 1-7 HTML font size. This should change in the next major when the [parchment](https://github.com/quilljs/quill/tree/parchment) branch is merged in. Feel free to make a separate issue for an arbitrary font size feature request but as it stands Quill is behaving as expected.\n. You are correct thank you for looking into it and the PR.\n. First this PR addresses an issue where Quill loses bolding pasted within itself. Word is out of scope of this PR. That being said it still seems to work. If I copy bolded text or a sentence with bolded words from Word 2016, the formatting stays when pasted into Chrome on the quilljs.com editor. I'm not clear on what interaction there is between clipboard.js and Quill but if you can reduce and reproduce the issue outside of Meteor and clipboard.js, you should make a separate Github issue with reproduction steps.\n. In the upcoming 1.0, collaborative applications should callquill.updateto make sure the editor is at the latest state before calling applyDelta/updateContents. If there are pending changes text change event handlers will be called byquill.update. Since everything is synchronous there should be no risk of race conditions.\n.quill.updatewill be documented yes\n. I believe that is correct @sachinrekhi \n. The problem was very simple: image-tooltip was incorrectly setting the selection to the 0th index when it didn't know what to do. This was more of an issue before quill's internal selection manager kept track of the last known cursor position (useful when a tooltip gets focus and needs to switch back to the last known position when closed).\n. You are correct thank you!\n. I'm not able to reproduce this on Windows 8.1 + FF40. To clarify the unminified version works but the minified version does not?\n. Feel free to comment and reopen with reproduction steps.\n. Can you add a failing test that illustrates what you are trying to do (the test should fail with the current develop branch and pass with your PR)?\n. Thanks for the tests--they make it much easier to understand what is trying to be accomplished. I've been working on a new document model that is going to change all of this (on the [parchment](https://github.com/quilljs/quill/tree/parchment) branch) and a merger is imminent. There's aninsertBeforecall in parchment but it's much more similar to the DOMinsertBeforefunction in behavior.\n. See [comment](https://github.com/quilljs/quill/pull/464#issuecomment-137534572) on #464.\n. Yup you are correct thanks for the catch\n. Consecutive whitespace is supposed to be collapsed (see [normal](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)) in HTML. This is usually not what you want in an editing environment so Quill gets around this with the white-space css property. What breaks about email replies? What does the HTML look like? Is it generated by a previous Quill editor?\n. Yes an example would be great. It might be best to just try to clean up this HTML. The difficulty is Quill relies on the white-space property to do proper and cross browser display of whitespace.\n. @willrowe is correct this is likely the issue\n. You can already passstyles: falseas an option to prevent the style injection.\n. The ideal solution would tolerate arbitrary whitespace, guarantee vertical alignment of the pickers and buttons, guarantee equal spacing between inputs, and has proper overflow behavior--on all supported browsers and platforms. I've only been able to get three out of the four and felt the first was least important. I'd of course welcome a PR that does all four.\n. The reason isformatTextneeds to be called on the newline character, not just on any character on the line.formatLinewas added later as a helper for those that prefer the latter behavior. I will update the docs to include both these facts.\n. Thanks for the report. The issue seems to be that certain characters have a length > 1 in Javascript strings which the keyboard module is not expecting.\n. IE10 support is being dropped in favor of MS Edge. Feel free to reopen if you experience this in IE11 or MS Edge.\n. The current format customization is rather limited in that Quill uses a whitelist for allowed tags rather than a blacklist. This is all changing in the next major version (currently worked on it the [parchment](https://github.com/quilljs/quill/tree/parchment) branch). There should be a post with more details in the next couple of weeks.\n. Blog post is here: http://quilljs.com/blog/the-road-to-1-0/\n. Please ask this sort of question on Stackoverflow and tag with [quill](http://stackoverflow.com/questions/tagged/quill) and I or someone else will answer there.\n. Is it just one outerorelement? The simple workaround is to change this into abeforehand as Quill does not handle invalid HTML well.\n. The current develop branch has a lot of things broken / disabled so might not be the best time to dive in. It's a pretty simple change once things stabilize.\n. AremoveHotkeyscall was added by #453 but has not been released yet. Quill is in the middle of a big change so the next version will take much longer to get out. I was also considering changing the signature intoremoveHotkeyandremoveAllHotkeysto be more consistent with eventemitter APIs.\n. The documentation is correct. But I think there may be a misunderstanding. You can add a handler to run before the default and not propagate tohandleEnter. What you cannot do, which is the dangerous thing, is preventhandleEnterfrom running in order for the browser default behavior to run.\n. Can you post the stack trace?\n. I'm going to close this for now as it's not entirely clear this is resolvable within Quill. [ngQuill](https://github.com/KillerCodeMonkey/ngQuill) might be worth a look too (no affiliation but seems like the most active angular + quill project).\n. I believe this has been fixed by #435 but with the [parchment integration](http://quilljs.com/blog/the-road-to-1-0/) in progress on the develop branch a new version of Quill with it has not shipped yet.\n. This has been fixed in the 1.0 [beta](http://beta.quilljs.com/) release\n. This HTML markup is invalid. You can't have a block level tag like ainside of an inline one like a`.\n. Closing from inactivity. Feel free to comment with more info.\n. Yes by default Quill's height is 100%. If you want a fixed height + toolbar, one simple way is to fix the height of the Quill editor and toolbar, not the container, and put a border around the container. The editors in the examples page both do this.\nDoes this solve your problem?\n. Yes ideally Quill could be more helpful but some people want Quill to stay a fixed height and scroll and others want it to fill the rest so Quill just has a simple default.\nFor your use case you might want to try just fixing the height of the toolbar which allows you to set a padding on the container and negative margin on the toolbar equal to its height. For example: http://jsfiddle.net/8Ljhyzf2/1/.\n. Do you also have ChromeIPass @radiart? \n. I'd really would like to see this bug fixes but I've tried on every Windows environment I have access to and cannot reproduce the issue. This includes Windows 8.1 boot camp, Windows 7, 8, 8.1 and 10 on vmware virtual machines and Windows 7, 8, 8.1 and 10 on Sauce Labs, all on the latest versions of Chrome with a mouse.\n- @radiart silly question but why is your chrome's top bar black in the video?\n- @radiart can you try on chrome canary and let me know if it also occurs?\n- Can someone corroborate @andrew--grant's claim this same issue also occurs on other OSs?\n- If anyone can reproduce on Sauce labs or browserstack please comment with the environment you used\n. @radiart This black bar is from your screen capture software?\n\n. What software did you use? It somehow decided to make the normally blue chrome bar black, but left the tab itself unaffected, as well as the new tab button.\n. @radiart I've tried to reproduce this issue on a clean unadulterated version of Chrome on every single Windows version on multiple platforms with no avail. That makes me think you're using a not so clean version of Chrome that may be causing or confounding the issue. Your non-standard black Chrome bar makes me think that more. I do not believe the claim that a general purpose video conversion software happens to produce artifacts that affect only the Chrome tab bar.\nHere're some things that would be more helpful:\n1. The name of the Chrome tab bar modifying video software.\n2. Another video recording your entire screen and include in it at the end visiting chrome://extensions/ and scrolling through the extensions with all of them being disabled.\n3. Launch a SauceLabs browser with the session being recorded, reproduce the issue, and provide the link to that recorded session.\n. @andrew--grant It's not the screen recorder--it's any number of Chrome extensions that I wanted to rule out\nThank you for your input @jpfortier. The new theory is clicking a particular way under the buttons you mentioned is the cause. Specifically if you push down on the mouse, move even 1px, and then release, the cursor will jump to the closest spot to your release. If you mousedown with no move then mouseup, the cursor will not move:\n\nThis would explain why some people consistently experience this bug and others not as people probably consistently click the same way. Perhaps this is harder to do on a touchpad which would explain that difference as well.\nCan the people that consistently experience this bug test out this theory? You can be sure you didn't move the mouse by attaching a mousemove listener:\njs\n$('#toolbar').mousemove(function(e) {\n   if (e.which != 0) console.log('mousemove');  // e.which will be 1 when the mouse is also down\n});\n. This has been fixed in the 1.0 beta preview.\n. There's not a configuration that does this but you can certainly build a module that adds this behavior. Take a look at the API and this guide on modules.\n. I would not be surprised if not being attached to the document causes problems as Quill does not specifically handle or test this condition. However a simple test yields no errors: http://jsfiddle.net/4yfj5quu/1/ so this might not be the problem. Can you post a stack trace?\n. Yes Quill overwrites backspace behavior since they are inconsistent between browsers but is not handling word deletion correctly. Thank you for reporting.\n. Also fixed by https://github.com/quilljs/quill/commit/0c6e6a84fefbb4f7128c3ee91604e4f6576759f7.\n. Quill 1.0 now uses classes for font sizes so this should now work: http://jsfiddle.net/s8k3bnLL/1/. If you want 'normal' to be a non-default value, you will have to customize the font size attributor with Parchment.\n. Module containers are no longer confined within the editor and do not affect its scroll overflow in the 1.0 beta release\n. This has been fixed in the 1.0 beta release\n. It appears to be working in the latest version of MS Edge now.\n. Try the master branch or any tagged release if you want to build Quill yourself. The develop branch is sometimes in flux.\n. It's still an open issue #116 \n. UC is not a supported browser.\n. The diffing algorithm is on the character level so the holes are due to common characters in the original and pasted text. The result I agree is surprising to the casual observer though so perhaps there could be some heuristic that does an entire replacement if the ratio between change length and text length is too high.\nThe authorship module does not necessarily show the original author but rather the most recent, so it's working as designed. Gandalf may not have written the original text but he did cause the undo so he's the reason the text is there which is who the authorship module wants to show.\n. Authorship is no longer a part of Quill in the 1.0 beta preview.\n. I assume you mean this\n. Not sure if you mean using Quill as a markdown editor or having Quill's contents output as markdown. The former is a different use case than Quill is intended for. The latter is not necessarily compatible since Quill contains formats Markdown cannot express, but even if Quill's formats were limited it would be better suited as an external module.\n. Thanks for the catch. Quill actually no longer uses connect so I've removed the references instead.\n. I think an acceptable heuristic is just wrap reinserted text that was deleted? Also what do you mean by forwards or backwards?\n. This has been added in the beta release\n. The questions @Soviut posed are valid and the lack of answer indicates to me lack of a real need. If this is not the case feel free to re-comment and bring the discussion of merits back to life.\n. I'm all for being helpful to beginners but this is way too general. Sanitizing user input is on the top of most general web security guidelines and has nothing to do with Quill specifically.\n. TinyMCE posted that page years ago when best web security practices were not well understood. Today sanitizing input specifically on the back end is well established guidance for any input, whether it's a JS library or a native textbox. Posting a warning on Quill specifically would only serve to confuse people, as it already did on the issue discussion. Furthermore it adds to the cost of maintenance of the particular list of sanitization libraries.\nOpen source is not about thousands of developers banging on keyboards and merging their efforts so everyone can feel good about contributing. If you want to be a part of it I suggest you grow thicker skin. Not every idea you have will be welcomed under scrutiny of others. Hopefully there will be some that are and that's where the focus should be.\n. No that is the minimal markup required in Quill.\n. Yes Quill is open sourced under BSD license. You are free to include it in a commercial product if you wish.\n. It's in the configuration page but not in the api page. I'm not opposed to adding it there as well / instead but it's not obvious which section (retrieval, manipulation, etc) it should go under. What do you think?\n. Yes I can see how one would look for it in the API page and not in the Configuration page so you're probably not the only one. The constructor is more complex than the other calls though just because of the configuration options variable you can pass in which is why it has its own page. I have considered changing the name from Configuration to say Initialization and that would probably lead more people looking for constructor docs to click on that link but maybe cause fewer people who are looking for configuring the editor to find what they're looking for. Not sure there is a clearly right path so I will just leave it as if for now.\n. There's no public timeline at the moment.\n. The { styles: false } config exists exactly for this use case so no need to worry about using it as a workaround.\n. #265 \n. Do you encounter this problem on the quilljs.com editor?\n. I think the issue is you're not supposed to add the picker yourself. Just add the <select> tag and specify 'snow' as the theme and it will be added and hooked up for you. Ex.\n``` html\n Create toolbar container \n\n Add font size dropdown \n\nSmall\nNormal\nLarge\nHuge\n\n\n\n Initialize editor and toolbar \n\n  var editor = new Quill('#editor', { theme: 'snow' });\n  editor.addModule('toolbar', {\n    container: '#toolbar'     // Selector for toolbar container\n  });\n\n```\nAlso font expects a font value (like helvetica or arial, not just true) when you call prepareFormat. \n. You will be able to extend Quill's document model in a similar fashion in 1.0: http://quilljs.com/blog/the-road-to-1-0/.\n. The if browser a then x, if browser b then y type of code is something Quill tries to stay away from. I'll have to look at the drag and drop use case specifically at a later time but it's not clear pixel to range functionality needs to be in Quill core at this point.\n. Answered on Stackoverflow\n. This looks like it's been fixed in the 1.0 beta preview: http://jsfiddle.net/f3jx8ywp/1/. There's no longer a delete but removing the container and adding it is the closest to it.\n. I got lazy with the example and didn't make the dropdown work fully. Here's how it should be: http://jsfiddle.net/f3jx8ywp/2/. The problem is the color needs to be an exact match with the option value and some browsers insert spaces inside the color tuple. Quill's themes take care of this or you can also use classes in 1.0 to represent colors.\n. This has been fixed in the 1.0 beta release\n. By the spec, .ql-editor ul should be more specific than ul li since it includes a class. Also the former is a rule for ul and the latter is a rule for li. Do you have jsfiddle or codepen to demonstrate the issue? Sounds like something is getting mixed up here.\n. The real issue is not css specificity-it's that Quill modifies ul and not li.\n. It's not true that nothing happens--the next character you type will be unbolded. This behavior is consistent with Google Docs. If you prefer what Word does (which is what you describe), the toolbar handlers are customizable http://beta.quilljs.com/docs/modules/toolbar/\n. #116 \n. There's now a more robust way for saving/tracking the range (which is null here) and should be in the next version. What versions of IE is this affecting?\n. This has been fixed in the 1.0 beta release\n. The develop branch changes very often containing the latest development code and may not always be ready for public consumption. Use the master or any release tag for working checkpoints.\n. For inline formats you can use getContents which returns a Delta and check the attributes object. For line level formats the extra step is you have to find the newline character for the line the cursor is on. This is the basics of what Quill's own toolbar module does.\n. Agree with the enter behavior for headers for 1.0. The current enter behavior on an empty list I would consider a bug and will also be addressed in 1.0 so the configuring shouldn't be necessary.\n. Thanks for the report. I don't recall why the padding is on ql-container vs ql-editor but will investigate the reason but simply moving it could be a potential long term fix.\n. The motivation before the put the padding on the container was so scrolling is synchronized between the editor and other module containers (since its relative parent was doing the scrolling). Scrolling changed back to the editor for other reasons but this is no longer an issue as a result in the beta release.\n. Interesting.. thanks for the report\n. I tested this on the new beta site by making the 'R' serif (which also caused the bug on quilljs.com), right arrowing 3 times and dragging left and the selection does not clear anymore.\n. We changed the npm name to just quill so all versions thereafter are found there.\n. This has been fixed in the beta release\n. Thanks for the report. This looks like a manifestation of #541 actually. If you make the mulitline selection within the editor container it works as expected.\n. #249\n. Can you post your question on StackOverflow please? I will answer there thanks.\n. Overwriting backspace is necessary for other features to work. We'll come back to this when we do more on internationalizing Quill.\n. Thanks for the report. The development branch is pretty deep into 1.0 so this will be included in Quill's next major release.\n. This has been fixed in the beta release\n. My current thought is just to make the link sanitizer customizable. Other folks want it to recognize mailto addresses, force https, etc so allowing the sanitizer to be overwritten would solve all of this.\n. Relative links are allowed in the 1.0 beta preview, but further customization is also allowed with:\njs\nvar Link = Quill.import('formats/link');\nLink.sanitize = function(url) {\n  // change / sanitize url\n  return url;\n};\n. The develop branch contains the latest code which may be in between working states. Only master and tagged versions are aimed to be in known working states.\n. Thanks!\n. I don't want to have to maintain an official eslint right now but thanks for the suggestion.\n. Thanks for the fixes\n. I appreciate the idea of exposing some of these unintentionally silenced messages but I would prefer it being implemented differently. I should have a commit soon.\n. removeHotkeys(9) works for me on Chrome. Do you get a return value when you call it and can you elaborate on the not working behavior you are seeing?\n. Closing due to inactivity\n. I'm not sure that's a style Quill will favor or enforce at the moment. When the develop branch is more stable I will look at best style practices for ES6.\n. This works for me on Mac + Chrome: https://jsfiddle.net/jhchen/spkcdh0c/1/. Are you doing something different or using a different platform?\n. Closing from inactivity\n. Sorry the dist/index.js is incorrect and has been changed it should be a file called quill.js not index.js.\n. They exist: https://github.com/quilljs/quill/tree/develop/src/themes/snow/assets. Quill's build pipeline turns them into base64 images. If you want to do the building yourself, you will need to do this too.\n. I just discovered this cause and made the fix as well: https://github.com/quilljs/quill/commit/d56ac7c6bae4149a29ab42b395a6d7c226a59547. The alternative solution would have been to quote to array elements so it does not try to refer to a variable by the same name. The commit does both.\n. It depends. Code will be finished before documentation and before examples and there's also timing of announcements and publicity. Shoot me an email with what you guys are trying to do and I can give you a better idea.\n. I'll mark this as a feature request.\nIf you need this functionality and are okay with a short term solution, Quill stores its instances in a static array Quill.editors. If you have more than one editor on the page, you can check the instance's id (Quill.editors[0].options.id) and compare it to the dom id. I will likely be removing this in 1.0.\n. I decided against adding this API to 1.0 as it's already possible as @garygreen pointed out and a separate storage structure would introduce memory leaks if not nontrivially managed.\n. The develop branch is a work in progress.\n. Headings will be in 1.0 but what you are looking at in the develop branch is not finished yet, hence the strange behavior. The document model in Quill has undergone significant changes so your implementation will not be compatible with the 1.0 codebase. I don't want to make any more changes/releases to Quill 0.x in order to focus on and push 1.0, as it will be much better.\n. I am able to reproduce this in desktop safari but not mobile. Specifically on the quilljs.com homepage:\n1. Set the cursor on the line right above the \"fast and lightweight\" bullet\n2. Type \"fast and lighta\"\n3. Hit space and Safari will correct \"lighta\" to \"lights\"\n4. Backspace twice and enter \"a\" and space again and Safari will continue to correct \"lighta\" into \"lights\"\nThe two workarounds right now are to either continue typing at least one non-whitespace character before correcting the spellchecked word or to disable to checker altogether by setting the spellcheck attribute to false in the Quill editor div.\n. @willrowe is correct. If this does not answer your question please provide a sample desired output.\n. The enter key not preserving the format is a known issue. Other than that it's not clear what the expected/correct output is? The markup on both screenshots look the same (span with font-size wrapping another span with author wrapping a text node).\n. Unless it's causing functional issues I'm not understanding, including or not including a font-size: 13px is optional since the font-size of the container is 13px. It only matters when the size different from the default 13px.\n. Makes sense. Something of interest in 1.0 might be its better support for using classes for formatting rather than style attributes. Then you can just specify the size in one place (the css file).\n. If you must use HTML, then the solution is HTML:\nhtml\nquill.setHTML('<span>Hello</span>&nbsp;<span>World</span>');\nNote spans with no attributes will be removed anyways, but not tags the contribute formatting like <b> or <span style=\"color: red;\">, as they change the content being represented. In general, Quill is built for editing content, not arbitrary HTML.\n. Currently no. However, format customization is the thing that 1.0 is aiming to solve.\n. Please don't intentionally make duplicate issues #568\n. It's not entirely clear what is being asked here but it sounds like you can just listen on the text-change event and then call getSelection to see if anything changed.\n. Please post questions on StackOverflow and tag with Quill.\n. The best information for working with Quill can be found in its documentation site: http://quilljs.com/.\n. I'm not sure of all the issues preventing coexistence but one is that Grammarly alters the editor HTML, which is not expected by Quill. Selection issues like you suggest may be another. It does not seem a fix would be quick would be quick or easy.\nSpecifically whitelisting behaviors to target particular products is something I'd like to stay away from. In this case there's also no guarantee the next version of Grammarly will work differently. For now this does not seem like something that should be addressed just on Quill's side.\n. What is the pragmatic middle ground you are proposing?. The fix will pollute your Deltas with random grammarly-inline formats so post processing either before sending to the server or before storage would be recommended. Also the fix is one that in the \"seems to work\" stage. There is no documentation or comment from Grammarly that describes how their extensions works or that this would be an appropriate workaround. We do know Grammarly modifies the editor contents without warning, which puts the integrity of Quill's contents and many API calls at risk. It's better for Quill to be obviously broken with Grammarly than insidiously broken.\nGrammarly did seem to claim to be working on a fix on their end earlier in this thread. Seeing how they do not work with many modern editing software (Draft, Quill) and products (Dropbox Paper, Google Docs, Confluence) this is probably the best long term solution for everyone.\nI will in the meantime set data-gramm to false in Quill to disable it.. Normally the symptom is an infinite loop of Grammarly trying to add a span and Quill removing it typing is extremely slow or not possible so it's a lot more obvious something is wrong.\nOne thing I ask users when they report bugs is to disable all browser extensions. Might be harder for a less technical crowd so ymmv.. The toolbar picker does not support this. If this is a use case you need, feel free to open another Issue as a feature request. The more complete and compelling the request, the more likely it will be implemented. Garnering community support will help as well!\n. I think you are just talking about the dropdown picker and not the toolbar in general at this point. Native HTML <select> elements cannot be styled and behavior modified in ways many people would like so Quill's snow theme provides a custom picker that is inserted alongside <select> elements. It does not strip or rewrite the <select> element HTML.\nThe theme is provided as an option--you can certainly still use native <select> elements, as demonstrated by the top editor in http://quilljs.com/examples/, if the benefits of native <select> elements like disabled outweighs the benefits of the snow theme for your use case.\n. Yes I think setting the styles config to false is already appropriate to solving this problem as well.\n. The develop branch is being actively developed for 1.0, which is a big change. You can read about it here: http://quilljs.com/blog/the-road-to-1-0/.\n. Thanks for the Issue. The general idea of having a simpler toolbar configuration has been on the radar. Specifics of the interface is still under consideration but here's one idea:\n``` js\n// At the simplest level it can simply be an array of formats:\n['bold', 'italic', 'underline', 'strike']\n// Controls can also be grouped by nesting an array, limited to one level of nesting\n// CSS will control what these groups do, ex show separators between buttons\n[['bold', 'italic'], ['link', 'image']]\n// For buttons with custom values, instead of a string you can have an object\n[{ 'size': '32px' }]\n// For dropdowns, the value of the object is an array of values, false is default/selected\n// CSS content can be used to control visual labels\n[\n  'bold', \n  { size: ['10px', false, '16px', '32px' ]}\n]\n// Themes will be allowed to specify a default set of values for dropdowns\n// So the config on quilljs.com can be as simple as\n[\n  ['font', 'size'], \n  ['bold', 'italic', 'underline', 'strke'],\n  ['color', 'background'],\n  [{ list: 'ordered' }, { list: 'bullet'}, 'align' ],\n  ['link', 'image']\n]\n```\nThis has somewhat of a strong reliance on CSS, especially its use in showing labels. This is okay when used with a theme because the snow theme just removes labels and mostly uses icons instead but an un-themed editor under this proposal does not allow labels to be shown when configured with Javascript instead of HTML.\n. This has been added in the 1.0 beta release\n. The options don't work that way--controls is an internal data structure.\n. Your initial inquiry sounded like a question, not a proposal or suggestion. In either case this seems resolved.\n. It's one or the other. Either you have a custom container you want Quill to attach handlers to, or Quill creates the container for you and adds the appropriate handlers.\nI'm not even sure how both would make sense. Would the additional controls go before or after your the elements already in the container? Does it have to be empty? Once you add this will people naturally ask for control over where to place the additional controls? You can have a library endlessly configurable and at some point you have to ask if it's worth the complexity, and favor code over configuration.\n. If you use either Bubble or Snow theme, they hide the native <select> and add their own dropdown implementation for the very reason you mention that native <select> elements are not very configurable.\n. I'm not 100% on what you mean by labels, but you can either:\n1. Use Quill's dropdowns through Bubble/Snow\n2. Bring your own, which can be a vanilla <select>\n. Like it says in #397 Quill 1.0 will ship with the source code for your own builds if you find Quill's unsatisfactory. \n. Then please read the original error message the OP was complaining about: \"This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\"\n. Thanks!\n. Thanks!\n. Thank you for the excellent bug report. I wish all reports were equally detailed.\nI can confirm it's occurring in FF 44 and will assume it's probably the case in IE11 as well. I will have this fixed in 1.0.\n. Can you see if whitespace preservation is still an issue on beta.quilljs.com? The links provided seems to have changed content and I'm not sure what to copy/paste to test\n. Thanks for the PR and especially appreciate the tests\n. This has been fixed in the beta release\n. I believe this is an issue affecting all rich text editors utilizing contenteditable. If you do anything special, which most editors do, the native undo manager gets confused. There are some proposals to add an API so rich text editors can tell the browser what to do but this is currently not available as a web standard. The workaround is to disable the native undo/stack so it at least does not do the wrong thing. This is probably be how Quill will have to address the problem as well.\n. Merge this in manually in https://github.com/quilljs/quill/commit/91e325228e54ac77fd71c2c490812ce6ddb508ba. Again appreciate the inclusion of tests. I'd prefer one test (possibly multiple expects) for one method call with the same arguments. Thanks!\n. It doesn't look like the existing API supports this so I am pro removing it--it doesn't seem as useful of an iteration to support as text.\n. Make sure to keep commit lengths below 72 characters but merged this in manually in https://github.com/quilljs/quill/commit/5d937d6447ee62a389393c156e565f41c12b0f82.\n. It's possible to pass in a custom onConvert function into Quill's paste-manager to allow handling arbitrary, even invalid, input: https://github.com/quilljs/quill/pull/401.\n. I'd like to move 1.0 away from supporting HTML interfaces directly. Most of the functionality is already available via DOM APIs and anything in addition to this would be better in external modules.\n. Gulp is no longer being used. Is there still a reference somewhere I missed?\n. The source code will be included in npm packages in 1.0, not exactly in the src/ lib/ directory structure but should make this a non issue. #397 \n. They're currently not editable after insertion.\n. Not able to reproduce on a Mac. Are you using Windows or Linux?\n\n. What's going on here is the label is blank whenever there's more than one font being selected (Word, GDocs does this). But Quill does not let you set a font for the newline character so when you select across lines, there will be more than one font being returned so the label becomes blank.\n. Both lines appear to be 'Windings 2' for me although there are a few ways step two can be followed.\n. This has been fixed in the beta release\n. There's now an example of this specifically https://quilljs.com/playground/#custom-fonts. I added import() back which should be accomplish the same goals: 6929ba9\n. If you personally have a real use case that is being limited by this lack of information please provide that. In the meantime this is a known accepted limitation.\n. Thank you for the background details. Quill obviously made a choice in not supporting selection direction so data, often in the form of real use cases, is helpful to challenge that choice, rather than \"This is often important information.\" The reasoning behind Quill's choice is simplicity. No end user has to check if start <= end and there's almost never a difference in expected behavior and so the user is freed from that consideration.\nThe main cost is not implementation but maintenance and complexity. I'll reopen this as a feature request for further discussion but for now the workaround is probably when you do get a selection update event, use the DOM APIs to determine if it's forwards or backwards.\n. This has been fixed in the beta release\n. addFormat was implemented for internal use and for some reason I was convinced to expose it. It works for a narrow set of cases (all of the ones internal needs require). Quill 1.0's new document model is a much more thought out way to add new formats so I would invest in building on top of that soon instead.\n. I added import() back which should be accomplish the same goals: 6929ba9e8d46d384e474a99b74267d1f685e4b0a\n. Does copying from other source generally overwrite or clear 'application/json' data? What happens if you copy from Quill, then copy from another source, and then paste into Quill? Would that second copy correctly clear the 'application/json' data?\n. This has been fixed in the beta release\n. This is the correct way to include the standard build of Quill that the CDN serves. It includes a custom build of lodash (just the parts Quill uses). Feel free to make a custom build of Quill if this is not to your liking.\n. Thanks for the PR!\n. It is a suggestion, not a requirement to use npm link for development. The markdown files are compiled and served by jekyll so if you are getting a connection error, make sure jekyll is running? Also make sure you have ruby, rubygems, node, and npm installed and these commands ran successfully:\nnpm install\ngem install foreman jekyll kramdown rouge jekyll-sitemap jekyll-redirect-from jekyll-feed\nnpm run build\nI also tweak the docs just now to make things more clear.\n. You can now do Quill.import('blots/block/embed');\n. For your single page app are you keeping Quill's container on the page? Event listeners should be cleaned up on its own when corresponding DOM nodes are removed.\n. IE6/7 suffered from this but all modern browsers implement mark and sweep so cycles are an issue of the past. If Quill is leaking memory in SPAs I do want to take that seriously. Do you have a test I can look at?\n[1] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\n. Closing this for now but feel free to comment with more info / discussion.\n. I'm not able to track this down. Feel free to comment with more details if this is still an issue.\n. Try getText().\n. Could CSS be utilized more to implement this functionality? For example if the module maintains an ql-empty class on TEXT_CHANGE then the focus/blur checks can be implemented with a .ql-empty:focus css rule. Not sure if this approach holds up cross browser though.\n. The general approach is agreeable. Made some specific comments inlined with the code.\n. To be clear, is the problem that aliasing at all is being used or just the quill to quill/core alias?\n. I changed the import to include core. You can get access to many of Quill's internals through Quill.import as well now.\n. I don't ascribe a high probability to it being safe to remove that line. It's not clear the undo-manager is properly disabled or replaced. That if branch is entered only when a handler returns false so something is still listening on ctrl-z and returning false. The only place to my memory is the default UndoManager but either way stopping the source is a safer route.\n. Are you restoring the selection in your custom undo/redo manager?\n. On most text editors if you type something, then move your cursor somewhere else, then undo, the cursor moves back to where the text changed. So yes undo managers must handle cursor/selections as well. Quill's undo manager does this so if you are extending it you must either not interfere with this part of it or handle it yourself as well.\n. https://github.com/quilljs/quill/blob/master/src/modules/undo-manager.coffee#L100\n. Thanks for the report. I'll see if I can reproduce it in the 1.0 development branch and look into a fix if so.\n. Looks like multiple people are reporting it is due to Evernote. Please contact their development or support team.. Can we update the original issue with specific numbers? Thanks @battuashwik for doing so in your comments.\n. There's been steady performance improvements with the betas.\n1. Calling updateContents with an array versus a proper Delta should show no longer show a discernible difference.\n2. This may have been originally conflated with the previous issue but Quill should scale extremely well with number of characters. Number of operations is the more limiting factor. For example loading a 130,000 character plaintext only takes ~30ms: http://jsfiddle.net/gh7mns5n/3/\n3. The same performance on the 500 line file, which is 1000 operations, loads 2-3 times faster now. I'm getting 150-250ms on my Macbook, previous it was around 600 like @sachinrekhi reported.\nMost human written documents do not have alternating formats per word though so the worst case performance illustrated by point 3 should not be encountered often. The >5 minute article reads on my Medium dashboard right now have around 100 operations. Thoughts?\n. Quill's getHTML() does not include modules' containers so it should not be showing up. Can you post a code snippet?\n. Deep merging is desired in general so Object.assign will not work for to same purpose. This interaction with the toolbar is a problem though.\n. Support for spans acting like buttons was deliberately removed in favor of native buttons. If you want to use divs you can extend Quill's default toolbar with a custom one that attaches to divs ex:\n``` js\nclass MyToolbar extends Toolbar {\n  constructor(quill, options) {\n    super(quill, options);\n  }\n  [].forEach.call(this.container.querySelectorAll('a, input[type=button], span, div'), (input) => {\n      this.attach(input);\n   });\n}\nQuill.register('toolbar', MyToolbar);\n```\nThe un-bold false positive is valid though there's a much shorter way to guard against it so I can just make the change. If you do find additional issues in the future it's preferred to submit separate PRs for separate issues. Thanks!\n. Sounds like there is sufficient demand for this feature. Can someone propose an API that would fit solve their needs? Short code snippets using the API and high level descriptions of what they do and don't do would be helpful.. If you click a button in the toolbar what editor would it modify? Both?. I don't believe anyone is working on it and I probably will not get to it as there are other higher priority items at the moment. If someone with this use case wants to take it on please do. I am happy to give feedback on specific proposals but do not have the bandwidth to give general guidance for those new to Quill.. Not sure how to categorize this Issue but the multi-cursor and authorship modules are not being included in 1.0. They are planned to be re-introduced in a future version.\n. Okay sounds good.\n. Quill cannot allow arbitrary edits to its DOM so setHTML is being removed. I have added a pasteHTML to the 1.0 branch, which will be the closest thing you will be able to do to safely make edits with HTML.\nI would also encourage taking a look at Deltas and updateContents/setContents as they can be a much easier way to deal with rich text content in many use cases.\n. Similar issue and solution as https://github.com/quilljs/quill/issues/638#issuecomment-216000101\n. Looks like this has been adequately answered--thanks for the help @scottsheffield and @sachinrekhi \n. The default modules are required for Quill to work properly. What is the specific use case for disabling the paste manager?\n. You can pass in an onConvert option to the existing paste manager with something like this:\njs\nvar quill = new Quill('#editor', {\n  modules: {\n    'paste-manager': {\n      onConvert: function(container) {\n        // interpret the pasted content and return a Delta\n      }\n    }\n  }\n};\nQuill still handles the mechanics for intercepting a paste event and putting it into an isolated container but you'll have to do all the interpretation on the content.\n1.0 has an API for partial customization of paste interpretation and is better for most use cases.\n. What browser + OS are you using?\n. When you create an issue, a template is provided requesting platform information. Please do not ignore this in the future as it wastes time back and forth.\nI have tried your instructions on Mac 10.11.4 on Chrome 50.0.2661.94 (64-bit) and cannot reproduce. I doubt the patch version is the difference. To confirm, this happens repeatedly and consistently, and you have tried with all browser extensions disabled? Does it do this with any other format like bold or background color?\n. Okay I was under the impression the text was red because you selected+all and clicked on red, not opened the inspector and set the default color to be red.\nIn the demo on quilljs.com the default color is black so when you click the black color icon, it's not actually setting it to black, it's removing any color value. If you want your editor to have the default be red, then you need to set up your toolbar to have red remove color, and black to set the color to black.\n. Fixed thanks!\n. Combining with #648\n. The UI / handler for formulas and video is not finished so I removed it from the beta site for now but both will be supported by the official release.\n. The latest 1.0.0-beta.9 now has UI for inserting formulas\n. There is now an example using bootstrap. I'm hesitant to add this Quill core since users are likely to be opinionated with UI and want to customize, which would add a lot of complexity and weight into Quill, and so is better handled by other libraries.\n. I'm not experiencing what you're seeing in step 2 or 5. The link tooltip appears in step 2, and the tooltip disappears in step 5. Is this what you mean?\n\n. I think the purpose of the icons is still clear and 'a' is more consistent with the other icons Quill uses so not sure it's worth remaking the icons.\n. I had some more icons made for a potential future image UI and had the superscript/subscript icons updated to use \"x\". They'll be out in the next beta release.\n. Thanks for the catch. Just made the fix and added codepen to my deploy notes so hopefully won't forget about it in the next beta but it will probably change to /latest/quill.js once things are out of beta.\n. Thanks for the suggested solution. I think the implementation is fine not only since the only browser it affects is Firefox and this fix covers it and unrecognized css rules are just ignored by older browsers.\n. If you want to go back to how v0.21 worked with using styles, you can do something like this: http://codepen.io/quill/pen/ezOEGE. It does miss out on some of the new offerings in 1.0 but I'm still working on those docs. One change in 1.0.0-beta.3 was it uses the text in <option> if available.\n. An explicit destroy is no longer necessary as Quill no longer keeps track of all editor instances. Just remove references to the instance and remove from the DOM and it will be garbage collected.\n. Thanks the docs have been updated\n. I'm having troubling reproducing this on FF46/Win8.1. Can you include the specific text you are selecting before trying to apply the heading?\n\n. Thanks for the insight @mgkirs. Another commit seems to have already fixed this on the 1.0 branch. @benbro can you confirm on beta.quilljs.com. I updated it with a new build so in the console Quill.version should return \"1.0.0-beta.2-5aa302\" now.\n. Yes. The clipboard is designed to match what the user sees. If other behavior is desired, you can customize it.\n. Quill's clipboard is designed to match input visually. Paragraph tags by default have bottom margin to look like two lines, so Quill interprets them as such. You can customize this if desired: https://quilljs.com/docs/modules/clipboard/\n. Thanks @juliantejera I updated my link as well for the skimmers out there. They're all working for me on Mac 10.11 Chrome 50.0. Can anyone else reproduce?\n. This is probably a duplicate but it was sufficiently ambiguous (technically selection is the user's highlighted text so that should not change, but the format of the highlighted text should) so if others could reproduce I was going to ask for clarification. But it seems like that is the most likely case and we can reopen if not.\n. #665 has been fixed\n. Why is mouseup better or more correct than mousedown?\n. Sure some interactions like highlighting the dropdown text would not be possible but I'm not sure any are common nor merit support. The reason click was changed is it caused loss of focus issues that are prevented with mousedown + preventDefault. If there's a common interaction that's lost that should be supported feel free to re-comment to reopen.\n. Just to clarify are you talking about IE11 or MS Edge? I'm getting some cursor issues but no crash in either.\n. Is this still occurring in 1.2.3? Can you post a screencast?. You should be able to do this with attributors\n. All the buttons work for me on Mac 10.11 + Chrome 50. What ones are not working for you? Can you provide specific steps for reproduction as well.\n. That warning is generated by Babel and probably a red herring as I tried on a VM with limited resources. Can anyone else reproduce?\n. To be clear my previous comment attempted to make the following points:\n1. I think the problem has nothing to do with Babel or the warning being emitted in Firefox\n2. I cannot reproduce, even on a low resourced VM\n3. It would be helpful if someone else can reproduce and shed more perspective or get closer to consistent reproduction to nail down a root cause\n. Closed by merged PR.\n. When you paste content Quill tries to match this visually. Some elements like headers have bottom spacing which Quill uses a newline to match. If the source content has some CSS that removed this spacing, it would be present as an inline style in the pasted content.\nIf you want to initialize Quill with HTML you should set the innerHTML of the editor container prior to instantiating Quill.\nOr avoid all the troubles with HTML altogether and use Deltas.\n. Not at the moment.\n. Thanks for the PR. The string vs number difference is indeed the root issue but I'd prefer if we went the other direction in converting to number so numeric comparisons can still be used. Can you update the PR to do this instead? I think just adding a custom value() function should work.\n. I'll merge this to avoid the back and forth but I'm probably going to change the === back as I think it will cause a regression.\n. I guess I should have said that I will not be keeping === rather than I will be changing it back.\n. I'll update Quill to generate s with type=button but since in the example you are supplying the toolbar element and creating it in HTML, you need to add this attribute yourself.\n. The docs are still being finished but highlight.js is required only if you want to use the syntax highlighted code module. Vanilla code blocks and Quill do not require highlight.js.\n. You mean setting the maximum number of characters than can be typed into the Quill? Like <textarea> maxlength property?\n. There's no built in configuration. You can check the length with getLength() but I don't have a good recommendation for preventing addition of content when the limit is reached.\n. This has been addressed in a different implementation.\n. As I said in #685 the fix made affects only buttons Quill creates. The ones you create and supply to the toolbar need to be fixed yourself.\n. Some modules like History are required: http://beta.quilljs.com/docs/modules/. They are not built to be optional and basic functionality would break without them.\n. It's possible, just not easy. You can replace required modules, in theory with no-op modules that do nothing but this is not a use case I will provide support for because I think it invites more questions and problems than it actually solves.\n. 1. Not sure what rum plunker means.\n2. This does not seem like correct use of <object>\n3. IE9 is no longer supported.\n. <iframe> seems more appropriate for this use case since Quill is not an embedded multimedia object. Would that work?\n. Can anyone else reproduce this? I'm not able to on OSX 10.11 Chrome 50. Safari 7 is not supported.\n. @a-change Safari 10.1 is working fine for me following your instructions on quilljs.com. If this is still an issue can you file another issue and fill out the entire issue template?. This is a duplicate of #487 and is fixed in 1.0. The inconsistency is due to whether or not the mouse moved between the down and up on a click.\n. The workaround described in #487 should work\n. The video button should have a handler like link and clean but I have not implemented the UI (like formula). If you have your own UI in the meantime you should add a toolbar handler.\n. Fixed in 1.0.0-beta.9\n. I think I might just remove this id generation feature. It was partially motivated to have Parchment/Blots do something more interesting but seems like not an innocuous feature.\n. I'm going to leave this open as an easy PR for newcomers.\n. Yes it does look like native behavior. If you double-click (to select the word) on the second \"Test\" on https://jsfiddle.net/Lo22dgaz/ before the 2.5s timeout it shows this with just a contenteditable. Since it's also only on Firefox on Windows (did not test on Linux but does not occur on Mac) I'm not sure it's worth adding a workaround within Quill. Thanks for the report though.\n. One issue is if you use <div> you need to specify a className too since <div>s are in use by Scroll blots. className is also how both formula blots and plain inline blots both use <span>.\n. Where did we land on this? It seems like a solution was found but I need to document it but can't remember..\n. Yup http://beta.quilljs.com/guides/upgrading-to-1-0/#modules\n. Please read my full comments on the relevant issues.\n. Removal of the method was motivated by the pit of success. Most people desiring direct interaction with HTML in Quill have wrong expectations and do not appreciate the ambiguity and complexity of HTML, especially between browsers. Those that do are very well aware of APIs available through the DOM.\ngetHTML is not coming back.\n. @ChuckkNorris It is removed in the beta docs.\n. @mnpenner You're selecting the wrong container. ql-editor's innerHTML only has <p><br></p>.\n. As the error states in the console you need highlight.js.\n. Why not just set the type attribute? Quill sets this on buttons it creates.\n. There's no UI for image editing but there's no reason you could not use css or attributes to resize images. Any reason you couldn't just float: left images or some other css to do what you want?\n. This has been fixed in https://github.com/quilljs/quill/commit/3525e2d70b68b8ff3b47b58bf409a6765f66d651\n. One line blocks are not a problem by itself. There are many benefits to it such as consistent newline creation/deletion, at any position across all supported platforms, which is why the implementation choice was made in the first place. The incorrect highlighting for multiline is the target bug that needs to be fixed, which may or may not be done with a one line per block implementation.\n. I'm not ready to give up on a solution yet and force all Quill users to make a configured tradeoff. The solution may not be apparent yet but that does not mean it does not exist.\n. Two problems:\n1. You are using version 0.20.1 and superscript/subscript is a 1.0 feature. I would discourage using cdn.quilljs.com/latest/ for this reason that you don't precisely specify what version you are using. /latest does not (yet) point to 1.0 since 1.0 is still in beta. Use cdn.quilljs.com/1.0.0-beta.3/quill.min.js for example.\n2. You are inserting text beyond the end of the document. insertText(0, 'valid index', { script: 'super' }) works just fine.\n. getContents\n. What's going on here is the toolbar options interpret a string to always mean making a button. Since there's no icon for a font or size button, they appear blank. There is an icon for align so it renders but as a button and not a dropdown. The left unspecified part was meant it is specified if the control should be a button or a dropdown, but not specified what the options for the dropdown is. So this would work:\njs\nvar toolbarOptions = [[{'font': [] }, {'size': [] }],\n                      ['bold', 'italic', 'underline', 'strike'],\n                      ['color', 'background'],\n                      [{'script': 'sub'}, {'script': 'super'}],\n                      [{'header': 1}, {'header': 2}, 'blockquote', 'code-block'],\n                      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\n                      [{'direction': 'rtl'}, {'align': [] }],\n                      ['link', 'image', 'video'],\n                      ['clean']];\nI do think this is confusing and not the cleanest syntax. I do want to allow for use cases where formats may either be activated by a button or a dropdown so I'll have to think more about a better balance but open to suggestions in the meantime.\n. One issue is the picker expects one of the array values to be false to represent the default value so adding that would be a quick fix. But the initialization could be more forgiving.\n. https://github.com/quilljs/quill/commit/8b7ad586e060b337b420bef01a2dcb2bc7168baa has fixed this issue as well.\n. setTimeout(function() { quill.insertText('Hello', quill.getLength() - 1) }, 5000); and then placing the cursor anywhere in the quilljs.com editor before the 5000ms is working for me. If you are having issues please file a separate Github Issue and fill out all the details.. Yes that was a typo on my part.. Sorry that commit has a typo #743 was fixed not this issue\n. I believe this has the same root cause as #731 so folding it into that issue.\n. I did previously attempt an implementation strategy like this and ran into many issues having to do with creating and removing newlines and across different browsers, particularly at the end of a code block. One example is create a newline at the end of the block, type a character, hit enter, nothing happens when a newline should be created. This PR has those issues as well.\nI'm supportive of the idea in general of using one <pre> to enclose multiple lines of code as it is also more semantic, but there are some edge case behaviors that need to be addressed.\nAll PRs should also not break any existing tests: https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#pull-requests.\n. Changing the dependency to quill@1.0.0-beta.4 seems to be working fine?\n. Can you double check you rebuilt and did not load a cached version? Logging Quill.version is a sure way to tell. The only specific issue described was backspace not working so that is the only specific function I tested.  Backspace did not work on v0.20.1 but I see it working on 1.0.0-beta.4. I did not notice anything else obviously wrong, nor rendering problems (a screenshot would be helpful), nor errors in the console.\n. Quill 1.0 now requires including a stylesheet for Quill to work correctly (previously Quill injected the rules but this bumped into CSP implementations). The most basic one is http://cdn.quilljs.com/1.0.0-beta.4/quill.css which includes no theming rules but does include essential ones like hiding the clipboard container. You can also quill.snow.css or quill.bubble.css for a themed stylesheet (which also includes the base rules).\n. Can you post a stack trace next time you encounter it?\n. Are you defining custom leaf blots? The line above makes sure leaf is not null so it's something that doesn't implement position, which should be inherited by Parchment's Leaf blot. It could also be that the structure is messed up because scroll.leaf just gets the deepest blot, assuming it is a Leaf which should be a safe assumption.\n. This is probably fixed with 3b2167f8d6d8d23a848d72cd50ebc216574e2111 but without reproduction steps I can't be certain. The symptoms look the same though.\n. This is working as designed at the moment. It is perfectly possible to create CSS rules that only affect the first or last <pre> or <blockquote>. The rounded corners to work in the existing code block implementation is an example of this.\n. #723\n. Fixed in https://github.com/quilljs/quill/commit/c0a78941c733a8427da95e594b0ffc4f4b76f1fc\n. It should stay open--it closing is a bug.\n. The pasteHTML call is for pasting, where the desirable behavior is to match the copied content. By default <h1> tags have bottom margin but Quill's do not so a newline is added to match this visually. If the source website removed this margin, the style would have been inlined. This very important step is missed when simply using html().\n. @lordenzo It is\n. Do you mean when you click on the link in the tooltip? When you click on a link in the editor the correct behavior is to always show the tooltip and never to navigate away.\n. When clicking the link in the toolbar does not cause navigation, does the tooltip also stay open?\n. Actually it looks like the cause might be clicking above the link, but still within the tooltip.\n. So I think the root issue is a long click vs a short click. Mousedown currently blurs the editor which makes selection-change fire with a null range. So if a click action is not fast enough the browser seems to fire a mousedown first without the click event which would normally trigger navigation.\nThe solution could be to just not hide the tooltip when the editor selection becomes null. This would mean the tooltip would not hide when the user clicks outside of the editor. Does this sound like a reasonable compromise?\n. That would solve the issue of a long click on the link but not clicking just outside of the link area. This would still cause the editor to blur and selection-change to null.\n. I think this has the same root cause as #696\n. I'm not able to reproduce this. This is certainly all platforms? Not low resourced ones like ios/android?\n. Actually image resize handlers should not be present. The feature is inconsistent between browsers and buggy in browsers themselves (try scrolling with the image handlers present in FF) for Quill to support. I will make a change to remove them in Firefox.\n. Performance is important though correct functionality is more of a focus right now, barring unusable performance. Right now changes from typing or formatting scales with the number of rich-text operations, not necessarily lines, so 10000 plaintext lines would perform faster than 1000 bulleted lines. There are a number of places where memoization would help a lot but then invalidation needs to be managed, which would be much easier to deal with once functionality is solid with a strong test suite.\nIn any case I did find some low hanging fruit in the rich-text library that did dramatically reduce typing lag. On 1000 bulleted lines there was 200-300ms lag whereas after the change its in the low 30s. You can decide in the next beta release if this is sufficient.\n. @danielschwartz Can you check the most recent beta version on http://beta.quilljs.com and see how that feels?\n. Can you post or email me an example non-sensitive worst case document? I can try out a 7k line doc myself but I might miss some important characteristics. I actually did test out a 10k line doc, but mostly plaintext, and lag was noticeable but usable.\n. Number of operations no longer linearly affects typing as the memoization strategy discussed above has been employed many releases ago.. It's possible to use addFormat to define the title format first and then you can run the insertText code you have. With 1.0 you can do this with Attributors though I have not had a chance to write a good guide yet.\n. There is not an easy way currently but can you elaborate on your use case?\n. Appreciate the offer to contribute. The overlay div idea seems reasonable and I can't think of a better one at the moment. The challenge here will be to make it play well with other UI interactions (scrolling, content changes, focus changes, etc) which my gut reaction says is quite difficult. People are also trained to noticed one pixel imperfections when it comes to UI elements in the editing content so the margin for error is also very low. If these two facts do not deter you then I'm happy to give feedback on a more detailed implementation proposal.\n. I do not have an implementation proposal. What I was offering was to give you feedback on yours.\n. It is not possible to implement what was is being suggested natively in all supported browsers. It is possible to fake it in some way but there are many possibilities so it would be better to evaluate implementation proposals separately as separate Issues or PRs.. Barring surprises, it may actually be fairly straightforward to add this. Other editors like Dropbox Paper uses the CSS content property and a background image to show the check and box and Quill also uses the content property for showing bullets and lists.\nIt would not be possible to change the checkbox's color in an edit session with this approach, though this is probably an acceptable limitation. Alternatively a unicode character could be used instead of a background image which could allow for color customization in an edit session.\nTo distinguish between the checklist from a bulleted list you could use either an attribute or class and check for this in the List blot implementation so create and formats does the correct thing.\nOther than that I'm not sure anything else needs to be done but surprises do come up.\n. I would explore attaching to the <li> element and seeing if you can use any data from the event object. There does seem to be an offsetX you can use but you'd have to account for a potentially nested checklist. Ideally there would be some other data that does not involve pixel math.\nYou could format the blot directly with something like this:\njavascript\nvar listBlot = Parchment.find(listNode);\nlistBlot.format('list', 'checked');\nQuill's formatLine implementation actually does this to avoid index calculations as well.\n. I can take a look at a PR now but depending on the potential surface area for bugs it might be included after 1.0.\n. Thanks for the pointer @koffeinfrei ! I added a change https://github.com/quilljs/quill/commit/adb980da7169fec993942073d8b600a384eb7c35 that hooks up the click handlers and it seems to be working well. The only thing left I think is I cannot get the toolbar to light up both in the checked and unchecked case.. @patleeman The API works but as stated earlier I still need to get the toolbar to work before official documentation + support.. There already is the concept of modules which may be internal or external. How is this different from plugins you are describing?. This was always envisioned to be added to core as checklists very useful and becoming commonplace in modern editing products (ex. Dropbox Paper, Quip) and the code for it is pretty minimal.\nI'm not sure I agree that your plugin could be used instead. It was and still is in a demonstration/proof of concept stage in terms of robustness and completeness in terms of interacting with other parts of Quill in a bug free way.\nI also had asked for a PR and no one submitted one nor expressed interest so I started working on it myself in the meantime. Quill has high code quality standards and this is not the easiest feature to implement (though there is not much code if one is familiar) so my expectation for a PR was not high.\nYour implementation, which I did thank you already for sharing, came in the middle my working on a core implementation and was not implemented in the optimal way or layer given my attempts up to that point. I apologize if I misread your intentions. Either way our Contribution Guide is a great resource for those that want to get more involved in the future.. You can create a new range in 0.20 with\njs\nvar Range = Quill.require('range');\nvar r = new Range(0, 100);\nThere's not an API for word finding and something like searching for a leaf and its surroundings might be best.\n. The issue is the cursor is not yet synced. For some text changes an external function is saving and restoring the cursor position, in this case the keyboard module. Using _.defer (if using lodash or underscore) or a setTimeout of 1 in your handler should fix this.\n. What are you using the cursor location for in the text-change handler? The challenge is some text changes will incorrectly move the cursor or lose it completely in some browsers so it is sometimes saved and restored before making changes. The text-change event fires before this restore step.\n. I see. The next beta will have an editor-change event that will include silent selection-change events so that might be another way to send relevant cursor changes.\n. You can use the bounds configuration option to control this. For technical reasons it's limited to left and right boundaries at the moment.\n. The right overflow should be fixed in the latest 1.0 branch. Can you confirm? For vertical overflow there's are css classes added that by default hides (with visibility, not display) the tooltip.\n. What's the structure of the editor containers looks like and their z-indexes and which one is the bounds set to? A simple example is working for me.\n\n. I think https://github.com/quilljs/quill/commit/f53183fd6850ac32bec3be3084290f6ef566c590 also fixed this issue. Can you confirm?\n. Just pushed a new beta version so feel free to test the standard way. Otherwise you'd normally have to set up the dev environment and build a local copy.\n. Hmm this seems to be working for me. Are you using the updated stylesheet as well?\n. Okay sorry missed the empty detail.\n. Sachin is correct\n. The two have different stack traces but it's likely the it is same root cause of being in an invalid state. The referenced commit fixes this one's for sure, given the reproduction steps.\n. Thank you for the detailed report. The issue is Quill tries to use the minimal number of changes, as measured by number of characters, and Google and https://www.google.com/ actually share a common \"oogle\" substring. The fix was to try to use the specified API change instead of always diffing.\nAlso the final correct state should actually be \"Google The lazy fox!\" since the linked Google text was added by source = api, the history module when set to userOnly should only undo changes made by source = user. This is most often used in a collaborative environment, for example when two users are working two different paragraphs. If I'm typing away on my paragraph and you are typing away on your paragraph, when I undo a bunch of times, only my paragraph should be affected. So if you inserted Google in your paragraph, me undoing should not remove it.\n. Can you post a stack trace?\n. It seems brittle to just switch to single quotes. Do all browsers add double quotes as opposed to single quotes or leaving them unquoted? If multiple fonts are specified like \"Arial Black\", Arial, \"Helvetica Neue\", Helvetica, sans-serif, is the spacing between fonts and commas respected or potentially normalized?\n. @benbro is correct. Also please check http://beta.quilljs.com/guides/upgrading-to-1-0/\n. From the sparse details this looks like the same issue. Please do not post multiple issues for the same request.\n. Yes getHTML has been removed.\n. Can you elaborate?\n. @willdady Creating an API for syntactic sugar is not enough. Quill's favors substantive APIs, which is a departure from most WYSIWYG editors where most of their APIs are just syntactic sugar. Quill is also consistent in not allowing users to touch the HTML directly. Freeing users from the need or desire to do this is the whole point of Quill. The two exceptions I can think of is on initialization and paste since in both scenarios the only input is often HTML, so Quill has no choice.\nIf the user can inject malicious markup, they can inject malicious scripts and you are already owned.\nDelta are an easy to use and read output format. It is not and can not be the source of truth. For one it alone does not contain enough information to produce valid HTML that Quill would produce. For example attributes in Deltas are flat, whereas Quill enforces a hierarchical ordering for tags.\n@jessejamesrichard You can use getContents.\nFor those passionate about this topic, I would suggest creating a fleshed out proposal including implementation challenges and tradeoffs. A lot of ideas will fall apart under once one thinks through these details. They can be discussed here or a new Issue if you want its own space for the proposal.\n. @egeersoz The best thing to do is to load Quill in readonly mode with the saved Delta. That provides the highest guarantee that the content as it was being written looks the same and being read.\nYou can also use quill.root.innerHTML or querySelector('ql-editor').innerHTML. Quill is just not going to have an explicit API to just to add sugar. Literally the implementation of getHTML in 0.20.1 one line of code retrieving innerHTML and passing it through a regex replace that is no longer necessary.\n. The purpose of Deltas is to provide a simple and expressive format to describe content and changes. It would be just as useful in a world where HTML did not exist. Users have used Deltas to convert to HTML, plain text, markdown, rtf and others. The Working with Deltas guide shows how easy this is on the Delta side.\nThis particular Issue was opened inquiring about the removed getHTML API. As already stated it was removed because it did little more than return quill.root.innerHTML.\nIf there is a desire to add a Delta -> HTML API, please open a separate issue with a proposal of how this would work, including examples of input Deltas and corresponding output HTML demonstrating this.\nThere are existing third party Delta -> HTML libraries on Github and NPM each with differing opinions and implementations of what Delta maps to what HTML. They might serve as good inspiration for your proposal or an example of how to write your own converter if you do not want to generalize it for all Quill users.\n\nTo answer @tinyinstance question specifically:\nIf you do not feel good about quill.root.innerHTML you will probably not feel good about HTML a Delta->HTML converter spits out either.\nFor my own application that has a preview of documents shown in a list, I have simple converter that just extracts text and bold from Deltas.\njs\nhtml = delta.slice(0, 500).ops.map(function(op) {\n   if (typeof op.insert !== 'string') return '';\n   let html = op.insert;\n   if (op.attributes.bold) {\n      html = '<strong>' + html + '</strong>';\n   }\n   return html;\n}).join('');\nThis has the added benefit of being able to just the first 500 characters for example, whereas with HTML, html.slice(0, 500) will not get you what you want. If you look the Delta format in the guide, you can see how trivial this is to write such a converter.\nA lot of people will not agree with this conversion and want to extract other formats. And then they might disagree on how to represent formats with regards to tag ordering, using tags vs styles vs classes. That is one challenge of a generalized solution which is why I ask for those interested, for a specific proposal.\n. > Just take a look at the comment box on this page. It's a great example of an editor that stores the content as HTML...\nThis is pure uninformed speculation and is in no way a supporting example. Github may very well storing comments in markdown, not HTML.\nI have explained in depth multiple times why getHTML was removed. Please read the abundance of information above.\n. Where are you getting your polyfill code from?\n. Quill is in the DefinitelyTyped project. It does not look like there are definitions for 1.0 but not sure what the protocol is for different or beta versions.\n. Are you observing the problem (while using the Quill library) in your use case? If so what browser/OS?\nWhen I try the demo with the cdn version it still works and a strict equality test with \\uEFFF yields true. It's also very clear when it's the wrong character if you uncomment the line setting it to 'X'. Also if I download the file from the CDN and view in VIM it shows the correct \\uEFFF.\nSo it seems like it might just be a source code rendering bug and not actually an issue with the build.\n. Seems like application/javascript; charset=utf-8 is best practice anyways so I updated the CDN but seems like the issue remains.\nbash\ncurl -I cdn.quilljs.com/1.0.0-beta.6/quill.js\nHTTP/1.1 200 OK\nContent-Type: application/javascript; charset=utf-8\nContent-Length: 388241\nConnection: keep-alive\nDate: Wed, 29 Jun 2016 23:38:46 GMT\nLast-Modified: Wed, 29 Jun 2016 21:45:47 GMT\n. I added a change that handles using old list deltas but similar to images, will output the new format. I'll add a note to the 1.0 docs mentioning this.\nI'm a bit undecided about inline formats. The ideal goal is to support them as in some cases they are relevant (like a color on a bulleted line should change the color of the bullet) so depending on where that lands there may not be a need for the image/list patch for inline formats.\n. If you're using 0.20, you actually need to call quill.destroy() to free all the relevant listeners. This functionality was added in a PR but never got added to the 0.20 docs. This is no longer necessary in 1.0.\n. This change https://github.com/quilljs/quill/commit/9ea959d37ba2bf789fc965988b7bdd8d9ba1f685 seems to have fixed the issue in the 1.0 branch.\n. Is there an example web app that correctly overwrites these hotkeys? A quick test makes it seem like Safari does not overwriting these at all: https://jsfiddle.net/jm3m3oj9/1/\n. Weird. This may be a limitation with Safari? Quill is just using the native copy and paste behavior in 1.0.0-beta.8. I'm not able to paste a copied URL from Chrome into Gmail composer or Google Docs either.\n. Also fixed with https://github.com/quilljs/quill/commit/78dc331436958bc54063c3dcc2246ee219f12e82\n. Yup beta correctly merges the two lists.\n. @neandrake Looks like there was a regression. Should be fixed now on quilljs.com\n. Assuming you are using this setHTML, the second call should overwrite all content so I'm not clear why both the desired and actual result is just \"how are you?\" The editor on quilljs.com correctly exhibits this behavior.\n. Take a look at the output of getHTML(). You will see it is <div>hello</div> so adding \"how are you\" renders on a new line since <div>s are block scope elements in HTML. In nearly all cases, Quill's other content modification APIs are much easier and more powerful to use. \n. What's your use case?\n. Quill does not let you arbitrary set its HTML contents to provide a consistent user experience. Again I would suggest some of the content APIs like insertText. Otherwise another editor may be more appropriate for your use case.\n. Looks like another long click issue..\n. Currently the behavior is on focus, if there is no selection to be restored it sets the selection to the 0th position and scrolls there. Should clicking the formula button do nothing instead? If not then when the user types in the formula and hits enter, where should the formula be inserted?\n. I'm not sure I follow the 2nd comment's instructions. It looks like there might be missing steps in entering a formula (x^2+ ...)?\n. I see. In that case https://github.com/quilljs/quill/commit/64841e3285246e708b249398ed47cbbcb2350fa5 should fix the issue.\n. Yes it does in my Windows VM in Firefox. If you happen to be on right now you can try on http://quill.ngrok.io.\n. Given the size of the MathQuill library and its dependency jQuery, it's pretty unlikely it will be added to Quill core. If someone is interested in building this as an optional module, please comment and I'm happy to give guidance.\n. As you saw I added https://github.com/quilljs/quill/commit/b92b6f47fed3fa7c8763e58a79fc6b3c779827c1 to account for common video URLs that are not video files themselves. However for other less common URLs Quill will not actually know a link does not resolve to a Video until it tries to access it so I'm not sure a CORS error or other access errors are avoidable. There could be a heuristic to avoid requesting the Video but none will be perfect. For example there's no way to know if a file exists on a remote server without checking so 404 errors are never completely preventable.\nQuill still inserts the embed in with a bad video URL because it seems easier to reason about this behavior than doing nothing. There might be a lot of reasons no action is taken but loading the VideoBlot with a bad URL results in errors in the console about the bad URL, with specific reasons like CORS or 404.\n. Can you provide a stack trace?\n. Can you use an unminified version? It's otherwise very difficult to glean any insight. Also what do you mean in reproduction step two \"trigger that variable set\"?\n. If you can post a codepen or jsfiddle demonstrating this error with all code including all libraries unobfuscated I will take another look at this. Otherwise there is no indication this is a bug in Quill.\n. Not sure if this was missed this or if something was unclear there but details on the Clipboard and customizing it can be found on its own documentation. Quill 0.20 allows a whitelist of formats which is still available in 1.0 in its configuration options. If you want to completely remove pasted formatting then it might be best to remove the Clipboard matchers that add formatting.\n. Thanks for the feedback. I'll work on making the docs more clear.\n. @nitaskenderi As it states in the addMatcher docs it takes a CSS selector. Both \"A\" and \"a\" are valid CSS selectors. CSS selectors are too complex to enumerate the possibilities but it's also a common enough technology that I do not see it as Quill's role to explain.. Create a minimal complete verifiable example and in another Issue with all fields filled out and someone might be able to help you out. The exercise of making one often reveals the error.. @justinpincar Others have been asking for this as well but Semantic Versioning would dictate that Quill go to 2.0 if it were removed. I could add a config option that would skip this matcher (of course the default of that would have to be false). Would that work?. You can now use a new config in 1.3.0 matchVisual to disable Quill's visual paste matching.. If you are extending the default link to be a link, why not just also call your format link instead of custom-link?\n. I would suggest just adding your own keyboard handler in that case.\nNot continuing an inline format on enter is actually exceptional behavior (bold, italic, etc will maintain their format on a new line) and I don't want to assume all custom formats using the anchor tag should be similarly exceptional.\n. This looks missing in the docs but If you add it in the configuration, instead of calling addBinding after initialization, it will run before the default.\njs\nvar quill = new Quill('#editor', {\n  modules: {\n    keyboard: {\n      bindings: {\n        'custom-enter': ['enter', {}, function() {}]\n      }\n    }\n  }\n});\n. You can just use the max-height css style if you want to allow scrolling. If you want enter to not do anything if that would exceeds the height then you'll have to combine some API listeners and calls. Note this is pretty brittle though since there are many ways for height to change such as applying formatting or text wrapping.\n. This is fixed in 1.0.\n. The docs appear to be a bit misleading. \n\nFor a format to be reported, all text within the range must have a value. If there are different values, an array with all values will be reported.\n\nThe second sentence is meant to mean if all text within the range has a format, but different values, an array will be reported. So for example if the entire text is colored, but might be different colors. But if there is any letter that has no color then the color format will be excluded from reporting. I suspect there is a letter in your range that has no formats at all so an empty object is returned. I will update the docs to make this more clear.\n. What application are you pasting from? I'm not able to reproduce.\n. Thanks for the video @crisbeto I was able to reproduce from that example. @jackmu95 Thanks for your suggested commit but the issue is the picker still needs to revert back the the default option.\n. It is very bad practice to check in built files into source control.\n. Quill is not doing anything special. NPM + Webpack should just work. A file with just:\njs\nvar Quill = require('quill');\nconsole.log(Quill);\nWill compile correctly with Webpack.\n. Could you use getContents? It does not exactly give the form you suggested but they can be deduced from what is given. For example instead of the range it gives you the text whose length can be used to figure out the range.\njs\n{ \n  ops: [{\n    insert: 'some 19 letter text',\n    attributes: {\n      bold: true\n    }\n  }, {\n    insert: 'text',\n    attributes: {\n      underline: true,\n      color: 'green'\n    }\n  }]\n}\n. I think you should use Parchment.Attributor.Attribute('mycodeword', 'mycodeword', { scope: Parchment.Scope.INLINE }); instead of Parchment.Attributor.Style. There is no css style named mycodeword so what the browser does in this case is unreliable is but you can have arbitrarily named attributes.\n. A general approach is still being discussed in #822. During the release candidate I did not want to add more features so will revisit a bit after 1.0 launch stuff is done.\n. One issue with the way this is implemented is it doesn't make it very easy for people to customize this behavior, if they prefer for example dropped images to be uploaded. Also code for this, paste image, and the default upload image could be shared as they are very similar.\n. I'm not sure I understand how to use this new API. Let's say it's a part of Quill and I'm a potential user that wants to upload all images onto my own remote server. I have some upload function like this:\njs\nfunction upload(file, callback) {\n  var formData = new FormData();\n  formData.append('file', file);\n  $.ajax({\n     url : '/mysite/upload/',\n     type : 'POST',\n     data : formData,\n     processData: false,\n     contentType: false,\n     success: function(data) {\n       // Here I want to insert the image into Quill\n     }\n  });\n}\nI used to initialize Quill like this:\njs\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: [['image']]\n  }\n};\nAs you can see I never directly call insertEmbed or any API previously. What code do I add to use my upload function to handle dropped images and those selected by the toolbar?\n. One limitation of Firefox is you cannot call click() on an input unless in a click event handler call stack. \nI would prefer we not duplicate code and a lot of this toolbar.handlers.image code is from the base theme. Also requiring the users to add this to overwrite default behavior is too onerous. If you think you can refine the approach to address these I'm happy to continue giving feedback but some other approaches that might be more worth exploring are maybe (though I have not throught through throughly): adding a config option or an event (like 'text-change'). You are currently  proposing to change the API surface so it will undergo the most scrutiny.\n. No Quill does not allow arbitrary HTML. You can achieve something similar with Quill 1.0 using Attributors. \n. Thanks for the report! I think this commit https://github.com/quilljs/quill/commit/bfee0cbb979e83962c947a18f14bf323a23e3d60 also fixed this issue and should be in the next release.\n. Sorry I did not notice you had different expected behaviors for backspace and delete. I do not agree with this. Most rich text editors do not treat links to be atomic and non to my knowledge exhibit different behavior for backspace and delete.\nThe expected behavior for Quill is that links are not atomic and consistent between backspace and delete: delete removes the character after the cursor, backspace removes the character before the cursor. You may add a custom keybindings to Keyboard if you wish to modify this.\n. Ah I see thank you for the clarification.\n. Interested in other people's thought but here are my immediate reactions:\nThe desire for a less realtime autosave is a legitimate use case, but the proposed solution is far hackier than the alternative. This is because you are not actually interested in what gets put on the history stack, you are actually interested in composed change events, which happens to be what the history stack does to text-change events it gets, but it is not the case it the history module has to do this. In fact there are good reasons the history module might want to change the deltas it gets entirely, not just compose them.\n. If you're okay with sending the entire contents of the document to the server each time, isn't the implementation as simple as:\njs\nquill.on('text-change', _.throttle(function() {\n    saveToRemoteServer(quill.getContents());\n}, 1000));\nHere we use lodash's throttle function but other libraries will suffice, the idea of throttling a function call is not unique to lodash.\n. Thanks!\n. Can you elaborate on what you are trying to do? Not saying they are perfect but both the toolbar and Parchment already have documentation and it would be helpful to know the specific gaps.\n. @george-norris-salesforce Documentation is continuously rolling in during this 1.0 beta period--styled tuned. Factual referential information is all there at the moment. How to guides are next on the list.\n. The customizing quill and using parchment guides have been finished.\n. This has been fixed in the most recent beta release 1.0.0-beta.10.\n. You are using one of the themes but not including its stylesheet. The parent container has the class ql-hidden, which should hide the tooltip you are seeing. One of these needs to be lincluded:\nhttps://cdn.quilljs.com/1.0.0-beta.9/quill.bubble.css\nhttps://cdn.quilljs.com/1.0.0-beta.9/quill.snow.css\n. I don't understand. Can you make a video of the issue?\n. This is duplicate content from another Github Issue thread. You are also not owed or entitled to an answer, especially when you do not follow the Contributing Guidelines. Your attempt to solicit answers by spamming my personal email is also not appreciated. I am going to ask you to read the Contributing Guidelines clearly and follow them as a good community member from here on out, or you will not be a part of it. \n. Thanks guys. This has been fixed in 1.0.0-beta.10.\n. Nest blockquotes is not a feature of Quill. Feel free to open an issue requesting it and a separate one to support containing paragraphs. Please follow the feature request guidelines for both.\n. Quill supports these formats by default, but you can add your own with Parchment. I'm still working on docs for how to use Parchment but supporting all markup valid in HTML is absolutely not a goal of Quill. Editors have to make a tradeoff between supporting the ambiguities of HTML or being consistent and predictable in state and behavior. Quill is designed for the latter.\n. This is fixed in the most recent beta release 1.0.0-beta.10. You should be able to paste an image with width and height attributes, without your custom matcher.\n. With slight changes like this I think it's difficult to settle on a strictly best version--any variation will have some people in favor and against. Custom styling with CSS is something specifically Quill aims to support however so you can safely make these changes to your application stylesheets and get the more prominent buttons.\n. Yes just updated the docs to include an example of adding bindings in initialization:\n``` js\nvar bindings = {\n  custom: [\n    { key: 'B', shiftKey: true },\n    function(range, context) {\n      // Handle shift+b\n    }\n  ]\n};\nvar quill = new Quill('#editor', {\n  modules: {\n    keyboard: {\n      bindings: bindings\n    }\n  }\n});\n```\n. I was on the fence about this syntax but since you felt strongly enough to bring it up, I'll make the change for the version.\n. With links you need additional UI to get the URL you want. Both themes provide a tooltip to do this but you're not using either. I suppose the themeless option could at least pop up a prompt box for something basic. You can also add a link handler to the toolbar if you want to use your own theme.\nUnrelated note why are you creating a new H3 format instead of using the existing Header?\n. It's working for me on Mac. Are you on Windows or Linux?\n. Can you try disabling plugins? The error is from Cloudflare, which Quill's website uses as a CDN and should work on FF. It may also be a network / firewall issue. It works on SauceLab's Firefox 47 on Windows 7.\n. Changing the editor's white-space property breaks things. Does it paste correctly if it's left as pre-wrap? There is specific code in Quill to handle carriage returns already.\n. Sorry guys a few issues can up from my refactoring of combining configurations and so the default theme handlers were not being copied over. Should have another beta out today.\n. I'm not encountering any issues on Mac + Chrome. Can you disable all extensions and post a video of what you are experiencing?\n\n. Installed the latest version of Sougou IME and am not experiencing any issues either.\n\nI would suggest filing bugs with the troublesome extensions themselves.\n. Where are you getting this class/inheritance implementation for es5? Can you try Babel or Typescript's implementation?\n. Quill should work with ES5 or ES6. The concern I wanted to explore was how you were implementing classes and inheritance. The snippet originally posted does not seem standard which is why I suggested Babel or Typescript's implementation. I was not suggesting use Typescript or Babel as a preprocessor, just their ES5 implementation for classes and inheritance. It looks like using jQuery's implementation did the trick, which is just as good.\n. What version of Quill are you using?\n. You're inheriting from the block level embed. I think you want the inline one so it should be Quill.import('blots/embed') http://codepen.io/quill/pen/EyGoyE. A detailed guide on Parchment is coming soon.\n. This is currently an expected limitation of the Bubble theme. I've added this as a feature request #857\n. Are you sure you included the right code snippet? This is not what the 1.0.0-beta.11 selection.js file looks like.\n. The reason is some browsers will incorrectly scroll the editor to the top on blur/focus. This might happen when clicking on the toolbar, interacting with link tooltip, on paste, and maybe some other interactions I'm forgetting. So this code snippet is meant to saves and restores the scroll position.\n. Does this work in mobile Safari?\n. I've reverted using the Stackoverflow snippet for paste https://github.com/quilljs/quill/commit/0c903eb890aecbe168931d45e4c358f420af6ae9. The testing I did for this issue after revert did not show the pasting jumping issue or your other switch between editors jumping issue using this: http://codepen.io/quill/pen/YWBQAY. You'll have to change the source to point to a build with the revert commit to try. If you are seeing this paste jumping issue after the next RC (should be out by Tuesday) then please fork and update the codepen to demonstrate the issue and reopen.\n. I don't think this achieves what the issue is describing. In Snow (and other editors) there is a tooltip with an edit mode and a view mode. Bubble only has the edit mode and the issue is describing adding this view mode.\n. This isn't a supported use case at the moment so there's no API or \"right\" way to do it. Feel free to open an issue with a proposal spec if you are inclined.\n. I believe you need to omit the value attribute in your selected <option>. Quill does not know what values \"mean\", only that there is or isn't one or if they are the same. The dropdown you have right now would add the \"left\" value for align.\n. Yes you just need to change the default Block tag name:\njs\nvar Block = Quill.import('blots/block');\nBlock.tagName = 'DIV';\nQuill.register(Block, true);\nHere's a demonstration. There will be an in depth guide on using Parchment / Blots soon.\n. If you just want to change the image UX the you could just configure its handler instead of implementing an entire theme.\n``` js\nvar quill = new Quill('#editor-container', {\n    theme: 'snow',\n    modules: {\n        toolbar: {\n          container: [['image']],\n          handlers: {\n            image: imageHandler\n          }\n        }\n    },\n}); \nfunction imageHandler() {\n  var range = this.quill.getSelection();\n  var value = prompt('What is the image URL');\n  this.quill.insertEmbed(range.index, 'image', value, Quill.sources.USER);\n}\n```\nOf course there are better UIs than a prompt box but this quickly becomes a slippery slope and maintenance would be prohibitive. So Quill offers one good default and the ability to customize.\n. Adding the formula module does not automatically add it to the toolbar since some users want to use their own UI and the toolbar is an independent module. Take a look at toolbar for details on how to configure the buttons that show up. An example would be:\njs\nvar quill = new Quill('#discussionQuill', {\n    theme: 'snow',\n    placeholder: 'Your questing here...',\n    modules: {\n        'formula': true,\n        'toolbar': [['formula']]\n    },\n});\n. Yes this is also stated in the Upgrading to 1.0 guide.\n. The documentation is worded confusingly. Hopefully the update is more clear:\n\nSome bindings are essential to preventing dangerous browser defaults, such as the enter and backspace keys. You cannot remove these bindings to revert to native browser behaviors. However since bindings specified in the configuration will run before Quill's defaults, you can handle special cases and propagate to Quill's otherwise.\n\njs\nvar bindings = {\n  list: {\n    key: 'backspace',\n    context: {\n      format: ['list']\n    },\n    handler: function(range, context) {\n      if (context.offset === 0) {\n        // When backspace on the first character of a list,\n        // remove the list instead\n        this.quill.format('list', false, Quill.sources.USER);\n      } else {\n        // Otherwise propogate to Quill's default\n        return true;\n      }\n    }\n  }\n};\n. The dev channel of Chrome is only on 54 so I assume you meant 52. \nI tested on Windows 10 and Windows 7 with Chrome 52 and am not able to reproduce. Note the content is on the next page but it is present. You just have to fix the css for print view.\nCan anyone else reproduce this issue?\n\n. #847\n. Can you paste the exact quickstart code you copied from step 1 and right after step 2 paste the exact innerHTML of the editor contents?\n. When you say minimal do you mean you are using quill.core.css and quill.core.js?\n. When you say minimal do you mean you are using quill.core.css and quill.core.js?\n. Okay the issue is https://cdn.quilljs.com/1.0.0-rc.0/quill.css is not a valid url. The naming scheme got changed to https://cdn.quilljs.com/1.0.0-rc.0/quill.core.css in the release candidate and I missed the download page. This has now been updated.\n. Okay the issue is https://cdn.quilljs.com/1.0.0-rc.0/quill.css is not a valid url. The naming scheme got changed to https://cdn.quilljs.com/1.0.0-rc.0/quill.core.css in the release candidate and I missed the download page. This has now been updated.\n. If you want to use the snow theme you have to include https://cdn.quilljs.com/1.0.0-rc.0/quill.snow.css. Are you sure it's not a caching issue? I definitely reproduced your issue by not having any quill css file and it was fixed by adding either quill.snow.css or quill.core.css. \nIf it is definitely not a caching issue, can you fork this codepen and update it with your settings?\n. If you want to use the snow theme you have to include https://cdn.quilljs.com/1.0.0-rc.0/quill.snow.css. Are you sure it's not a caching issue? I definitely reproduced your issue by not having any quill css file and it was fixed by adding either quill.snow.css or quill.core.css. \nIf it is definitely not a caching issue, can you fork this codepen and update it with your settings?\n. Yes it now redirects thank you.\n. Yes it now redirects thank you.\n. Quill's stylesheet only covers 8 levels with the thinking that most real documents would only actually utilize up to 4 levels. The obvious solution is to increase this number but then the question is what should the limit be? I'm not aware of a way to cover infinite levels.\n. What does changing the browser \"Writing Direction\" to 'LTR' fixes it mean? Is this still an issue?\n. Code-blocks as designed must be plaintext and cannot have any formatting. The behavior you are seeing is expected.\n. Thanks!\n. I'm not seeing this on the standalone editor either. \n\nCan anyone else reproduce this?\n. I'm not seeing this on the standalone editor either. \n\nCan anyone else reproduce this?\n. Apologies you are correct the minified file was not included in the release download. It should still be available in an npm install and the CDN. I've uploaded a new tar with quill.min.js and the corresponding sourcemap. Thanks!\n. Actually this seems like a manifestation of a larger issue with indent's active state. Like Word, it should never light up, and it is on the 1st indent level which on normal text direction this is preventing indenting past the 1st level, and on rtl is preventing dropping below 1 level.\n. It seems like dataset might actually be unreliable in Safari. I added a line to log dataset.value and getAttribute('data-value') which to my knowledge should always return the same thing. \nSwitching to only using getAttribute does indeed fix the problem which is what I'll do for Quill but if someone can reduce the bug with a simpler setup, it would be informative to know if Quill is doing something wrong with the DOM API or if a bug needs to be filed for Safari.\n\n. The icons created in batches so they maintain a consistent style and some are not being used by the project or included in builds. I decided to put all of them in assets/icons/ to make them available in case they are useful. \nThe way to use them would be to create your own toolbar in HTML and pass that into the container option so there's no way to do what you are asking at the moment. If you'd like to add this ability, I'd be happy to take a look at a PR. I think what you would need to do is add the icons to ui/icon.js and the handlers to modules/toolbar.js.\n. This is difficult to fix since Github is not using semantic tags for their code content so without targeting Github markup specifically (which they could change at any time), it's not possible to know what's being pasted is code.\n. This is difficult to fix since Github is not using semantic tags for their code content so without targeting Github markup specifically (which they could change at any time), it's not possible to know what's being pasted is code.\n. I'm mostly commenting to document so I or others do not have to rediscover findings. Since the Github is using tables, pasting into a Quill with table support would preserve the indenting/lines but also act like a table with cell boundaries. For example pasting in Word shows the borders and it's not possible to outdent or change indentation, as you would expect for code.\n. I'm mostly commenting to document so I or others do not have to rediscover findings. Since the Github is using tables, pasting into a Quill with table support would preserve the indenting/lines but also act like a table with cell boundaries. For example pasting in Word shows the borders and it's not possible to outdent or change indentation, as you would expect for code.\n. It's actually being pasted as a code-block, which is being styled with a gray background. If you add the code block button to the toolbar it becomes more obvious since when you place your cursor over the text it highlights the button. http://codepen.io/quill/pen/oLAJkL\n. No the editor's behavior is changed to exhibit what delta already does, so rich-text stays the same.\n. No the editor's behavior is changed to exhibit what delta already does, so rich-text stays the same.\n. This is expected behavior.\nThe main reason is line formats are represented by attributes on the newline character, which implies every line needs to have a newline character. It could be added \"just in time\" but then when you apply line formatting, the change will include not a format instruction, but an insert formatted text instruction. Similarly a remove line format instruction would not be a remove format instruction, but a delete text. These behaviors are also surprising but has the additional downside of requiring error prone bookkeeping. I say error prone because off by one errors cover a large class of bugs and Quill from experience of going down this \"add/remove newline just in time\" route has experienced many of them. It's much simpler to always be able to rely in a trailing newline character for every line.\nThen the question of course is why are line formats represented by an attribute on the newline character? As an example let's consider a \"The Two Towers\" formatted as header text. There are only two alternatives to represent this formatting given the current Delta format if we do not have a newline: \n1. Any character has the header attribute:\njs\n   [{\n     insert: \"The\", attributes: { header: 1 }\n   }, {\n     insert: \" Two Towers\"\n   }]\n2. All characters have the header attribute:\njs\n   [{\n     insert: \"The Two Towers\", attributes: { header: 1 }\n   }, {\n     insert: \" Two Towers\"\n   }]\nGoing with Option 1, what if we delete the text \"The\"? Its header attribute goes with it and suddenly the line is no longer formatted. Also it introduces ambiguity that additional complexity is required to solve. For example what header level would this line be?\njs\n[{\n    insert: \"The\", attributes: { header: 1 }\n  }, {\n    insert: \" Two Towers\", attributes: { header: 2 }\n  }]\nOption 2 again has the same problem in different forms. Using the mixed header example from above, option 2 says the line has no header format. But again deleting \"The\" suddenly formats the line with header: 2.\nThe core problem of both above solutions can also be seen intuitively: headers do not describe any individual or combination of characters on the line, it describes the line itself. So using anything that does not describe the line itself is likely going to cause problems.\nWe can go deeper and ask why does the Delta format have this limitation then? Right now the format is incredibly simple and expressive. Using only characters and attributes, it can describe any document. With just three operations, it can describe any change to any document. Though there are other benefits of adding an additional \"line\" primitive, it compounds the complexity and will propagate through everything it touches.\nIt's much easier for Quill to just force trailing newlines.\nI'll add a note to the getText and getLength docs.\n. This is expected behavior.\nThe main reason is line formats are represented by attributes on the newline character, which implies every line needs to have a newline character. It could be added \"just in time\" but then when you apply line formatting, the change will include not a format instruction, but an insert formatted text instruction. Similarly a remove line format instruction would not be a remove format instruction, but a delete text. These behaviors are also surprising but has the additional downside of requiring error prone bookkeeping. I say error prone because off by one errors cover a large class of bugs and Quill from experience of going down this \"add/remove newline just in time\" route has experienced many of them. It's much simpler to always be able to rely in a trailing newline character for every line.\nThen the question of course is why are line formats represented by an attribute on the newline character? As an example let's consider a \"The Two Towers\" formatted as header text. There are only two alternatives to represent this formatting given the current Delta format if we do not have a newline: \n1. Any character has the header attribute:\njs\n   [{\n     insert: \"The\", attributes: { header: 1 }\n   }, {\n     insert: \" Two Towers\"\n   }]\n2. All characters have the header attribute:\njs\n   [{\n     insert: \"The Two Towers\", attributes: { header: 1 }\n   }, {\n     insert: \" Two Towers\"\n   }]\nGoing with Option 1, what if we delete the text \"The\"? Its header attribute goes with it and suddenly the line is no longer formatted. Also it introduces ambiguity that additional complexity is required to solve. For example what header level would this line be?\njs\n[{\n    insert: \"The\", attributes: { header: 1 }\n  }, {\n    insert: \" Two Towers\", attributes: { header: 2 }\n  }]\nOption 2 again has the same problem in different forms. Using the mixed header example from above, option 2 says the line has no header format. But again deleting \"The\" suddenly formats the line with header: 2.\nThe core problem of both above solutions can also be seen intuitively: headers do not describe any individual or combination of characters on the line, it describes the line itself. So using anything that does not describe the line itself is likely going to cause problems.\nWe can go deeper and ask why does the Delta format have this limitation then? Right now the format is incredibly simple and expressive. Using only characters and attributes, it can describe any document. With just three operations, it can describe any change to any document. Though there are other benefits of adding an additional \"line\" primitive, it compounds the complexity and will propagate through everything it touches.\nIt's much easier for Quill to just force trailing newlines.\nI'll add a note to the getText and getLength docs.\n. It's both. Users of APIs might not unreasonably assume that formatting something would not change the length, but in fact in a special case it does, which will lead to confusion/bugs. But even with this knowledge, there's always that extra step for those special cases, and even people very familiar with the Quill codebase have produced bugs from forgetting about these cases.\n. It's both. Users of APIs might not unreasonably assume that formatting something would not change the length, but in fact in a special case it does, which will lead to confusion/bugs. But even with this knowledge, there's always that extra step for those special cases, and even people very familiar with the Quill codebase have produced bugs from forgetting about these cases.\n. I believe my comment above already addresses your question.. I believe my comment above already addresses your question.. This was opened before #893 but the latter is more clear so merging into that for tracking.\n. This was opened before #893 but the latter is more clear so merging into that for tracking.\n. You can customize the Image Blot's sanitizer:\njs\nvar ImageBlot = Quill.import('formats/image');\nImageBlot.sanitize = function(url) {\n  return url;  // No sanitization\n};\n. You can customize the Image Blot's sanitizer:\njs\nvar ImageBlot = Quill.import('formats/image');\nImageBlot.sanitize = function(url) {\n  return url;  // No sanitization\n};\n. It's working fine for me on Mac + Chrome. A new version will be out tomorrow. Can you check quilljs.com then?\n. It's working fine for me on Mac + Chrome. A new version will be out tomorrow. Can you check quilljs.com then?\n. Your approach is correct. The workaround right now is to define a custom css rule that sets the default value to your custom default value.\n. Your approach is correct. The workaround right now is to define a custom css rule that sets the default value to your custom default value.\n. Quill has always used Deltas as a more consistent and easier to use (no parsing) data structure. There's no reason for Quill to reimplement DOM APIs in addition to this. quill.root.innerHTML or document.querySelector(\".ql-editor\").innerHTML works just fine (quill.container.firstChild.innerHTML is a bit more brittle as it depends on child ordering) and the previous getHTML implementation did little more than this.\n. Quill has always used Deltas as a more consistent and easier to use (no parsing) data structure. There's no reason for Quill to reimplement DOM APIs in addition to this. quill.root.innerHTML or document.querySelector(\".ql-editor\").innerHTML works just fine (quill.container.firstChild.innerHTML is a bit more brittle as it depends on child ordering) and the previous getHTML implementation did little more than this.\n. Right before you pass '#editor' into Quill, what does console.log(document.querySelector('#editor')) show?\n. Right before you pass '#editor' into Quill, what does console.log(document.querySelector('#editor')) show?\n. @vikrantrathore Can you post code that does not use Polymer that demonstrates Quill not working in Chrome, which has a stable implementation of all web component specs? I will reopen when it is demonstrated this has nothing to do with Polymer.\n. @vikrantrathore Can you post code that does not use Polymer that demonstrates Quill not working in Chrome, which has a stable implementation of all web component specs? I will reopen when it is demonstrated this has nothing to do with Polymer.\n. > The problem here is that the styles defined by Quill assume access to the whole DOM tree.\nCan you give an example of Quill doing this?\n. > The problem here is that the styles defined by Quill assume access to the whole DOM tree.\nCan you give an example of Quill doing this?\n. This is a convenience that allows you to do new Quill(\"#editor\") instead of new Quill(myDOMNodeWhereverItIs) and documented in the project website. This was the source of @vikrantrathore 's original issue, but I'm not sure the lack of such conveniences makes Quill fundamentally incompatible with Web Components. \nIf the discussion here is not that Quill if fundamentally incompatible, but that it is currently inconvenient for early adoption of a draft web spec, early web components adopters are encouraged to contribute.\n. This is a convenience that allows you to do new Quill(\"#editor\") instead of new Quill(myDOMNodeWhereverItIs) and documented in the project website. This was the source of @vikrantrathore 's original issue, but I'm not sure the lack of such conveniences makes Quill fundamentally incompatible with Web Components. \nIf the discussion here is not that Quill if fundamentally incompatible, but that it is currently inconvenient for early adoption of a draft web spec, early web components adopters are encouraged to contribute.\n. 1. I never suggested opening a ticket on the Polymer project blaming them.\n2. I'm still waiting for code demonstrating Quill not working with web components, not any particular library, beyond inconveniences.\n. 1. I never suggested opening a ticket on the Polymer project blaming them.\n2. I'm still waiting for code demonstrating Quill not working with web components, not any particular library, beyond inconveniences.\n. @TimvdLippe Yes and @benbro provided a demonstration but apparently for @vikrantrathore expected more.\n. @VoxelPerfect How is one supposed to styles at all? It is bad practice to inline styles; it is against many websites' security policies to dynamically create <style> nodes under Content Security Policy. What options remain? It should also be noted external stylesheets are utilized by some of the most popular libraries that exist, such as Bootstrap and jQuery UI.\n. The last part of the container option in the toolbar docs should cover this: http://dev.quilljs.com/docs/modules/toolbar/#container.\nAlso there are extra unused icons in the quill/assets/icons folder if you'd like to use those.\n. @bhamesh Can you elaborate on how it's not working properly?\n@benbro You can actually link to methods ex. http://quilljs.com/docs/api/#enable works. I'm working on a new website that will have better UI for this though. enable/disable is listed under Extensions at the moment. Are you suggesting it might be better under Contents?\n. @benbro enable/disable has been move to the content section\n. @servermachine quill.enable(false) is definitely working for me: http://codepen.io/quill/pen/WGVrRe. Can you demonstrate it not working on http://quilljs.com/playground/?\n. The spacebar causes scrolling on all scrollable web page when there is no focus on an input box. Try scrolling to the top of this issue page, click on the side or otherwise make sure you are not focused on a textbox and hit the space bar.\n. Actually I think the strict is operating backwards. If you remove the config it works as expected (toolbar buttons having no effect).. What happens when you hit the enter key? Does it insert a newline or do something else to the page?\n. This has already been answered on StackOverflow. If you want to submit a feature request, follow the guidelines.\n. Please post these sorts of questions on StackOverflow.\n. Yes you can just use CSS--nothing special on Quill's side is necessary.\n. Are you also using the default settings in the color picker or are you configuring it?\n. Thanks!\n. Not supporting web components as a blocker in using React, Vue, or Angular is patently false for anyone that actually uses those frameworks.\nPlease address the issues in #904 first.\n. There's a couple things going on here:\n1. The \"default\" value should just be omitted in the dropdown. Quill works this ways so there's no confusion between not having a particular color and having the default color.\n2. A CSS rule should be added to overwrite the default color in the color picker. \n3. It seems the actual bug is Quill colors do not support rgb values well. Converting to hex works: http://codepen.io/quill/pen/KgdRZr\n. Yes you should add the css rule for default stroke color as well (updated the codepen). When a different color is selected, it should be handled automatically, but not for the default.\n. It's worth mentioning the reason cursors depended on authorship is because of this #746. Basically, if the user inserts a character next to the same character ie inserting a 'a' into 'aaaa', Quill does not know which position the insertion happened. Authorship can solve this because those existing \"a\"s would have an author associated, but the new \"a\" you just inserted would not (yet).\n. @delibes is correct and also a more generalized approach to adding images/files is being discussed in #822.\n. The main concern with this approach is storing HTML in a value field, which defeats the purpose of having Parchment being an abstraction over the DOM. I'd encourage trying to use either a nested array or map as the value like the examples in the comment:\n``` js\ninsertEmbed(index, 'table', [\n  ['A1', 'B1', 'C1'],\n  ['A2', 'B2', 'C2']\n]);\ninsertEmbed(index, 'table', {\n  '1': {\n    '1': 'A1', '2': 'B1', '3': 'C1'\n  },\n  '2': {\n    '1': 'A2', '2': 'B2', '3': 'C2'\n  }\n});\n```\nvalue() is also incorrectly implemented. Take a look at other embeds as examples of what is expected.\n. Thank you for the updates. This version looks much better. I think Quill should either support a format within a table cell or not. If it does, one should be able to add it by pasting, an API call, or UI interaction, not just paste. If it doesn't then that format should be stripped/ignored in a paste.\nAs far as UI interactions by default we should just do what familiar products like Word/Docs does. Backspacing into a table on both Word and Docs does nothing so I would advocate for it not doing anything in Quill as well.\n. I would be in favor of moving forward with unformatted content in the initial version. There is a lot of UI challenges that remains (or even get started with) before tables are usable in Quill and it's best not to get stuck here at this early stage.\n. @saw It seems like a lot of work for a hacky short term solution that may be more work than a good long term solution for tables. \nThat being said there\u2019s nothing obviously blocking to try this approach and see what issues are encountered. I\u2019m not sure why you can\u2019t just create an editor in a module? I\u2019m not sure the sharing toolbars is an issue either since you\u2019re already creating/destroying the entire editor, it\u2019s not much marginal cost to destroy/create the toolbar too.\nI think @rikh42\u2019s approach in #117 seems more promising if the goal is to support formatting within a cell.. Just to clarify \"1. click one button in Chinese input\" mean press any keyboard button to trigger the Chinese input? Also please follow the instructions in specifing the platform. I cannot reproduce on Mac 10.11 + Chrome 52.\n. Git is for source code, not built distributions. Tools that do support built distributions like NPM, Github releases, and Quill's CDN have Quill's built files, as others have already stated.\n. To be precise, it's when a Delta contains an invalid op. When does this occur?\n. pasteHTML expects parameters so this PR if fixing a symptom and not the root cause. I also don't believe Quill should be policing its parameters since that's a slippery slope however.\n. There are a few issues here:\n1. The whitelist is set to ['inconsolata', 'slabo', 'roboto', 'ubuntu'] and \"Roboto Slab\" is not in this whitelist.\n2. The browser adds quotes and the exact value that needs to be added to the whitelist includes the quotes.\n3. The default attributor understands classes, not styles. You can name these classes whatever you want but it happens to be the case the names match the css styles for single word values, but this does not have to do with the space itself. Instead the style attributor should be used.\nHere's a modified codepen with these fixes: http://codepen.io/quill/pen/LRpmZm\n. Fixed https://github.com/quilljs/quilljs.github.io/commit/7f1fec10c69ae60d1bcf978930cb7d74039361d8\n. Fixed thanks!\n. Quill follows the lead of many other open source libraries of supporting the latest two browser versions. IE9 and IE10 control fewer than 1% of the browser market and Microsoft itself has ended support. Quill will not be supporting IE9 or IE10.\n. @fpavlic IE11 is supported and there is a polyfill already included to handle the classList case. Please file a bug report for each issue you are encountering with IE11 and please follow the bug report instructions.. I'm not an accessibility expert, but from reading the description on aria-label, I'm not sure the proposed change is generally correct?\nIt sounds like aria-label is for describing what something is whereas the placeholder text is a guide for what the content could be. For example I might use Quill to implement a comment box with a placeholder text \"You made a good point...\" whereas a proper label for this might be \"Comment.\"\nIn general I'd like Quill to be more accessible so open to continuing the conversation.\n. Sounds good. There's definitely other parts Quill could do much better with regards to accessibility, like the tooltips and toolbar. If the team is open to it feel free to loop them into the conversation on Github.\n. I actually have not thought about accessibility enough, mostly because I don't know very much about it. I ultimately feel responsibility for Quill's codebase so if I accept a change and it turns out not to be right, ignorance would not excuse me. I think this is where you and the accessibility team can help in bringing me up to speed.\nThe current PR is problematic because it modifies the API surface. It is backwards compatible but it is an addition nonetheless and may have to be supported forever so I would prefer alternatives are explored first. Particularly since it is one small piece of a larger accessibility issue, I would not want to have to create an API or configuration for every single accessibility shortcoming.\nIs is possible to share the complete report or list of concerns from the accessibility team?\n. I'm not seeing any errors on Mac + Chrome (same version is reported). Codepen displays errors to the console. You can just create an error to confirm.\nThere is a bounds property to tell Quill where it can show up horizontally. By default it is the whole page and from the screenshot it looks like you have something with a higher z-index covering it. If there's not space to show the tooltip vertically, it is by default hidden. You can overwrite the CSS rule if you plan to have the editing container autogrow, but will cause problems when you scroll:\ncss\n.ql-snow .ql-out-bottom {\n  visibility: visible;\n}\n. @abelousov bounds is never absent. It is document.body by default.\n. Bugs resulting from interactions with specific browser extensions are out of scope. There are simply too many to support and are difficult to debug as extensions do not document how they work unlike public browser APIs.\n. Thanks!\n. Thank you for the updates. To be clear it was not a stylistic preference in the naming. The name was already taken by another variable and overwriting creates bugs. Similarly changing the function signature of position() also creates bugs in the bubble theme which rely on the position() function. Can you just have position() return the horizontal shift as an integer?\n. Thank you for the changes.\nI did some more testing and since the Bubble theme has an arrow, it should be flipped when the tooltip is shifted above the text. Also during scrolling, ideally the tooltip would know to flip as room above and below the highlighted text changes within the viewport. \nIt's not obvious to me how these issues can be resolved so I'll have to take another look when I have more time. But feel free to dig in and make suggestions. If you set up the development environment you can test a standalone bubble page with localhost:9000/standalone/bubble\n. No the issues I listed has not been resolved. I do not have an implementation recommendation for fixing them but they do need to be fixed before accepting this PR.. Thanks!\n. I have not been able to reproduce from these instructions.\n\n. @skybrian Believe it or not what you see as a favor might not be valued as one by others. In my view @benbro is doing you the favor by helping you debug. If you disagree, feel free not to give or solicit help and use this open source project for free in peace.\nEither way communication on Quill's Github Issues will be civil and this is the only time I will be asking you to change your tone. Feel free to read Quill's Contributing Guide and Code of Conduct.\n. #104\n. Related #649 and http://stackoverflow.com/questions/39437723/removing-inline-formats-in-quill/39455278\n. It's a bit unexpected to pass in false specifically (instead of just omitting). The toolbar case omission is not possible since particular themes add the toolbar if left unspecified. But since you wrote tests thanks for the PR.\n. > for instance I'm not sure I should allow iframe for video support? which src should be accepted.\n\nor should I allow div tags or what css styles are required, etc.\n\nI'm not sure what you mean by this. Can you walk through a use case?\n. The core video format shipped with Quill allows any url with an http or https protocol with no limitation on domain. All formatting and content is customizable in Quill--that's one of the core benefits and differentiators of Quill. So you can customize the sanitization of links, images, or videos.\nQuill has a data model that abstracts over the DOM so working directly with tags, styles and attributes is not something Quill supports. This guide can give you an idea of how the data model works.\n. Using Parchment you should be able to create and embed blot to do this since 1.0 was released.. Github Issues and StackOverflow seems sufficient at the moment.\n. You can get keyboard by:\njs\nvar Keyboard = Quill.import('modules/keyboard');\nI added a clarification to the docs the but you will have to pass the keyCode\njs\nquill.keyboard.addBinding({\n  key: 186,\n  shiftKey: true,\n  handler: function(range, context) {\n    console.log('ok', range, context);\n  }\n});\n. You too thanks!\n. Quill does not accept arbitrary HTML and all pastes go through its converter. Take a look at the Clipboard APIs to add recognizing video elements.\n. The main issue with this implementation is it is leaking abstraction details from the picker. The toolbar should have no knowledge of the <option> values' and the fact that it is storing colors. I don't have a better solution but long term these practices make code hard to maintain.\n. There is not formalization around this yet but if you look at the entry points for building quill.js and quill.core.js which are respectively quill.js and core.js, all they do is import and register. This is by design and intended to allow custom builds that choose to import and register a custom set of modules, formats, themes, etc. So that is a quick story around customization.\nThe most minimal build of Quill is quill.core.js (you'll notice the entry point for quill.js imports core.js). You can further minify this if you'd like and gzipped it turns out to be 35.3kB. Building without any es6 -> es5 transpiling yields 23% reduction but uglifier does not currently support minifying ES6 and I'm not aware of a minifier that does this well.\nGiven that the numbers we're talking about here is far smaller than a screenshot of an editor, Quill's build output is quite reasonable considering all the gains one gets from consistency and predictability from the editor. High value is placed on this, which equates to saved developer time and productivity, even if it means more bytes of code in the build. There is a fixed cost to this and additional formats are actually of very low marginal cost in terms of build size, as you can see from the formats/ source code directory.\nI do look forward to the savings from ES6 adoption and if you find savings elsewhere feel free to make suggestions and/or create a pull request.\n. #909 has been resolved with a different approach\n. Similar to https://github.com/quilljs/quill/issues/961\n. Thanks @jackmu95 \n. The gap is more the headers than the links. I tried setting the url of a link to #heading1 through the normal tooltip on quilljs.com and it was not sanitized. However headers do not automatically add an id attribute so you would have to extend the Header blot to achieve this. This was implemented at some point but removed during the beta but that might be a good resource for a custom Header.\n. @rafbm Yes the Blocks are a challenge but using Containers might be a solution but I have not thought about this rigourously.\n@JoshuaDoshua By export do you mean paste into other applications?\n. There are no plans to add this in the core Quill library.\n. Sanitization is better handled outside of Quill and I'd rather not impose a set of rules, which are error-prone anyways. There are legitimate use cases for a onerror handler on images for example though it is also a vector for attack. The right behavior is user dependent.\nInstead Quill will follow React's example of providing a very clear warning in the method name.\n. HTML sanitization is a huge mess. I would recommend not using HTML at all as a form of input and Quill has Deltas for this reason. The bright engineers at Facebook working on React seems to feel the same.\nDOMParser is a good suggestion though from @benbro's PR it does not appear a simple substitution works, though with some more modifications it might. Regardless it does not cover all vectors for attack when it comes to HTML input and it is outside Quill's responsibility.\n. Thanks!\n. The event object does contain more information than is passed onto the keyboard binding handlers but does present a leaky abstraction. The two particular cases mention are covered I think.\nThe target should always be the .ql-editor element and you can preventDefault by always called unless all handlers for a binding explicitly returns true. Are there other use cases you are running into that require the event object?\n. For this use case you can just create and register your own image blot, or modify the existing one:\njs\nlet Image = Quill.import('formats/image');\nImage.sanitize = yourfunction;\njs\nlet BaseImage = Quill.import('formats/image');\nclass MyImage extends BaseImage {\n   static sanitize() {\n     // Implement\n   }\n}\nQuill.register(MyImage, true);\nI'm not sure it makes sense to make the change in core however.\n. getText() only extracts string contents from Quill. For things like video and images there is none. It was considered at some point to insert a filler character for video/images to make the lengths/indices line up but that introduces its own set of issues.\nWhat is your specific use case?\n. I will update the docs to make this behavior from getText() more clear. getContents() does give you both text and embeds so one path you might consider using this instead. I'm not 100% clear on your specific use case but iterating and filling is one possible solution:\njs\nvar contents = quill.getContents();\nvar text = contents.ops.map(function(op) {\n   return typeof op.insert === 'string' ? op.insert : ' ';\n}).join('');\n. I'm not sure what the font is. When the icons were commissioned I omitted h3-h6 tags because I did not want it to be easy to create what I think is bad UI. For that reason I prefer not to add these icons. Thank you for your offer to help though.\n. https://github.com/quilljs/quill/issues/1730. You need to put the existing contents in a <div> not a <textarea>.\n. It seems to have not passed the unit test for Chrome+Firefox on all operating systems.\n. If DOMParser works without issue it would be a good idea to use it. I do not want to rename back to pasteHTML though. I want to set the expectation that the HTML you hand Quill should already be safe, and while Quill should do things safely itself, it is not the security solution to unsafe input.\n. It looks like the reason is getComputedStyle cannot be used. Quill uses this to figure out where to place newlines and sometimes when applications paste HTML that contain classes and <style> tags.\n. In light of this I'm not seeing a way to use DOMParser.\n. Thanks!\n. Thanks!\n. @EricGrange Deltas are JSON and should save fine in many databases, such as Postgres or MongoDB. Are you encountering issues?\n. If the scope is the particular JSON Quill produces then we should similarly scope to the particular HTML Quill produces. Through those lenses, HTML has the same issue.\nIf you stored the HTML Quill produced in a database and one day wanted to switch to another editor, that editor will produce different HTML for the same content expressed by Quill through HTML. Now you could do some fuzzy matching with HTML parsers and libraries are out there to do this but this is much more complicated than a JSON array. HTML is undisputedly a more complex and expressive of a format, and, stored a string, requires a parser to even begin interpreting.\n. @EricGrange Sounds like we disagree on the guarantees and implications of a standard.\nLess open to opinion is that by design Deltas used to represent documents will only ever have insert operations.\n\nAll that said, the execution trouble with deltas come from delete & retain ops: with only insert, delta becomes a state more than a script. So returning a \"baseline\" or \"pre-processed\" delta with (guaranteed) only insert OPs could be another solution.\n\nSo as you say, most of the concerns are moot.\n. @yourGuy Deltas are implemented it its own library in which you can use on its own. In the end it is just JSON so if you don't care about the methods Delta implements (which may or may not be useful depending on your use case) you are free to use the data structure in vanilla Javascript, which can be as easy as something like this:\njs\nhtml = delta.slice(0, 500).ops.map(function(op) {\n   if (typeof op.insert !== 'string') return '';\n   let html = op.insert;\n   if (op.attributes.bold) {\n      html = '<strong>' + html + '</strong>';\n   }\n   return html;\n}).join('');\nI assume this issue is more about the particular HTML Quill chooses to generate from Deltas. That by definition has ties to Quill. This is not a detachable piece at the moment, which is why this Issue is still open.\n. Quill treats Deltas like data, and does not execute it like code. A key component to (all?) malicious code execution exploits is breaching this barrier between data into code. This can be trivially done with things like eval and innerHTML, which is why they are very dangerous to work with.\nQuill's APIs treat data like data, with the notable exception of dangerouslyPasteHTML. If you call insertText(0, someString), it's not going to treat the contents on someString like code just because it looks like code and decide to execute it. Similarly if you create a Delta that has an insert value that looks like HTML, updateContents will not just decide to execute some string that looks like HTML (it doesn't even know what HTML is!).\nNow Quill also in general does not protect you from layers above and below it. For example formatText(0, 4, 'link', 'http://somephishingsite.com') will be treated like any formatText call to any old URL. Similarly insertEmbed(0, 'image', 'http://pixel-ad-tracker.com') will also not be treated specially.\nWhere the principles start to get tricky is something like formatText(0, 4, 'link', 'javascript: alert(\"Ha!\")'). This is something Quill treats specially, since it whitelists protocols, even though in principle it should not interfere with abstraction layers below it. In principle security conscious web developers should be using CSP, but it is somewhat new and not everyone has yet and so for now this whitelisting is a \"helpful\" thing Quill does.. Thanks!\n. When initializing the editor the white-space rules are normal, so adjacent spaces are collapsed. This is done because most people writing normal markup with indents are doing so for code readability rather than to actually insert the indents. For example:\nhtml\n<p>\n  <strong>\n    Text\n  </strong>\n<p>\nMost people writing this would not intend for spaces to precede \"Text\", nor the bolding. So the codepen example is behaving as intended.\nHowever pasting is different, and I think the pasting from iostat you are seeing is not due to the lack of spaces, but rather the font not being monospace. I pasted an output from iostat into the codepen but used the inspector to change the font to monospace and it does align.. Do you think the code and code-block icons should look differently? @jackmu95 's PR uses the same for both and is mergeable if the use case is met.\n. Yes I think different icons will be difficult so let's go with this for now.\n. Thanks!\n. Thanks!\n. The very first code example on http://quilljs.com/docs/modules/toolbar/ has both container and handlers fields set.\n. Thanks!\n. When a DOM node that the selection is in is modified, browsers are unpredictable in what they do. So Quill calculates what the selection should be and restores it. The problem it seems it this restoration happens after the text-change event is emitted. So the workaround at the moment is to set a timeout or defer in the text-change handler before querying the selection.\njs\nquill.on('text-change', function () {\n  setTimeout(function() {\n    console.log(quill.getSelection(false));\n  }, 1);\n});\n. The problem is the name text is special internally and this appears to be unexpectedly having effect externally. If you change the key name and corresponding prefix from text to tex for example the code works fine.\nThere are a few more special names and it's rather difficult to unreserve them so it seems the best route might be to just add a console.warn?\n. Do you just want to overwrite the whitelist or other behaviors too?\n. If you're modifying the keyName I would inherit from the indent class like in your first example.\n. Yes this has been fixed and should be in the next release #997\n. > when I init quill editor like this, which according to the document and source code should be valid\nThere is no controls config option for Toolbar so the premise is change not valid.\n. #851\n. A document in rich-text is expressed as the instructions from the empty document, thus it is not possible for a proper document to have a retain instruction because there is nothing to retain from nothing.\nIf you get a \"document\" that ends up in a state with a retain, the bug is in whatever generated that document. If that is Quill, then please post how that document was generated and the fix can be made in the appropriate place. However setContents by design does not expect nor handle ops other than insert because documents by definition do not have anything other than inserts.\n. Published thanks!\n. Sounds like the OP's question have been answered and a workaround provided.\nIf someone else is using Quill with a complex toolbar the requires custom HTML mixed with standard buttons Quill would otherwise add for you, feel free to open another issue with a proposal and spec of how this new/modified configuration would look and work. There should be enough detail in the proposal to fill out the documentation page, if implemented.\n. Apologies there was a build issue with some local code changes that NPM picked up and published. 1.0.5 has been removed and 1.0.6 should be the same thing without the build issue.\n. The issue is sometimes during modification the selection is lost or displaced, so Quill saves and restores it. But this happens after the text-change event is fired. So the setTimeout is the correct workaround at the moment.\n. The CodePen example does not run.\n. Thanks! That's what it's there for!\n. Thanks!\n. Quill needs to have a 1:1 mapping between its content representation and produced markup, and having two possible tags for the same format at the same time breaks this guarantee. You could make the content representation more specific, like how headers work, but I think it gets to too expansive for Quill's core codebase.\n. Not at the same time. Users choosing <strong> will have { bold: true } always output <strong>.\n. Not sure Slate's exact implementation but the default picker does create <span>s. The quick solution is to change the label <span> into a <a> but then the obvious next Issue report would be inability to down arrow and select. So a satisfactory resolution to this Issue imo is a more full featured implementation.\n. What is? A button? I'd rather get it right then make it configurable so other people can get it wrong.\n. There is but the current state of HTML technology does not allow us to style <select> and <option>\n. Thanks!\n. Yes I think it would be helpful. We could maybe break that section up to have a blot and attributors subsection? Do you want to take a first cut?\n. Yeah so this detail is a bit hand-wavy. There are multiple implementations for color, one using inline styles and one using classes. Both are registered under attributors/ so they can be made easily available to the end user. When you register under formats/ or blots/, it actually gets registered with Parchment. Both are implementing color with attrName color so cannot both be registered by Parchment (where latest writer wins).\nThe register API is missing docs for the shorthand of when you pass in just a Blot or Attributor, it will register it under formats/. This avoids needing to know anything about the registration paths and that formats/ is special, but I guess it may not have the intended effect because example code uses the shorthand without explantation.\n. 1 is intended to be true, as that is a language feature of Javascript. Are you seeing leaks somewhere?\n. Thanks!\n. Thanks!\n. I have not seen specific guidance from Facebook on yarn specifically, but I believe in general lockfile designs are for applications, not libraries. Yehuda Katz wrote a post explaining this for the Ruby ecosystem.\n. It is front and center on the README\n. No the README.md file is a readme file. The CHANGELOG.md file is the changelog.. I'd like to see if we can not inject <style> tags. CSP strict rules are being pushed and Quill triggering these warnings will cause casual observers to panic.\n. To save time on back and forth I will just merge this and make the desired adjustments. Thanks for the additions!\n. This is fixed in the latest develop branch https://github.com/quilljs/quill/commit/d7346d60541ab667b489854dff5d2c8484f64814\n. This is already fixed in the latest develop branch https://github.com/quilljs/quill/commit/d7346d60541ab667b489854dff5d2c8484f64814\n. This appears to be addressed by @jkirkwood . Thanks for the help!. Tooltips are meant to be hidden on disabled editors. The bubble toolbar is located within a tooltip, where in snow it is external. You can overwrite this with CSS:\n``` css\neditor-container.ql-disabled .ql-tooltip {\nvisibility: inherit;\n}\n``\n. Quill requires a block level nodes as children of the root node and all block level nodes to have at least one child. Arbitrary markup is not a project goal so the suggestion would be to control margin with CSS.\n. There is no basisJoe Smith1234 Main StLos Angeles, CAis any better thanJoe Smith1234 Main StLos Angeles, CA. If there is a reason, please supply the source. Otherwise I'm not going to argue about opinions.. Using the DOM API to make arbitrary changes to Quill is not supported. HTML is far too ambitious and inconsistent for this to be reasonably achievable. Quill favors consistency instead, and has its own set of APIs that guarantee this. You can either initialize Quill after you have made your arbitrary DOM changes, or use one of its Quill's APIs if it is already initialized.pasteHTML` may be of interest here.\n. My mistake. I thought you were inserting a node into Quill but actually the node is the Quill container. The issue is before a node is in the document, no rendering or related calculations are done the paragraphs appear to be on the same line and only until it is added into the actual document are these values updated.\nCan you just insert the contents with pasteHTML or initialize the Quill instance after everything is ready?\n. If Quill is doing something wrong in being a bad citizen in the NPM ecosystem, please say how. Otherwise this does not seem to be a Quill specific issue.\n. I apologize scrollbar jumping has been a recurring issue. It is caused by the lines commented out, and I have tried to remove them in the paste and in some release, but they serve an important purpose. It essentially intercepts pasted content by switching focus to another contenteditable div and analyzing what is pasted there. A side effect of the focus switching is the scroll jumping. \nPasting directly into Quill would solve the jumping but it's important for the integrity of the Quill document to not allow uncontrolled content into it, so arbitrary paste is not allowed. Immediate problems are not always obvious but trying to paste into different browsers, pasting more obscure content, pasting from different applications, and long edit sessions after these scenarios and many issues start to crop up.\nThe current version of Quill will restore scroll position of the editor, but some users prefer for the scrollbar to appear in an ancestor element, which sounds like your use case, the restoration doesn't do anything because it was never targeting the right scroll container. A workaround is to do the scroll restoration yourself like this: http://codepen.io/quill/pen/XNJqav.\nI'm not sure what the best official long term solution is and am open to ideas. The focus switching seems necessary until browsers standardize paste behavior. Quill could restore the scroll position for you but you'd have to pass in the element that does the scrolling which could be possible through a configuration option. This does not seem particularly cleanest nor elegant though.\n. I don't want Quill's toolbar to be an endlessly configurable HTML generator. You can always pass in custom HTML toolbar container for advanced use cases and Quill will attach to those inputs. For quick simple use cases Quill recognizes a simple list of formats.\nIs can be debated forever where the \"quick simple\" line should be and how far it can be extended but the core Quill project has drawn that line where it feels is the right balance between simplicity and power.\nThose that disagree please feel free to extend the Toolbar module and publish separately to npm if you would like to share with others. The naming convention is quill-yourname-module. For example quill-image-drop-module is a recent community contributed module that extends Quill for use cases the core does not cover. We are in the process of creating a curated list of high quality community contributed modules.. I'm not able to reproduce. The selection.js only occurs when Quill's content changes, which does not occur in any steps for reproduction. Was a step missed?\n\n. Thanks!\n. I would prefer to support one or the other, not both as that would make the API confusing and complex. Once adoption of key hits all of Quill's supported browsers, we can take another look.\n. Closing this as the PR is merged and in the 2.0 branch.. Yes that's my mistake. It looks like the issue is just materialize stylesheet is styling strong to not be bold. So the fix is just for formats that that is happening to, change it back.\n. http://quilljs.com/docs/configuration/#bounds. Quill can only guarantee to be on top of other Quill UI (which it does), but short of making users place the Quill container at the root, it cannot guarantee other UI in your application will not cover it.\nTake a look at Understanding CSS z-index and in particular this example. Even though DIV 4 has the highest z-index, it cannot escape its relative parent's place in the DOM hierarchy.\n. Why doesn't the formats config meet this use case?\n. I see. Yes a current limitation is blot names need to be globally unique.\n. What is your approach / design this time? What other designs did you consider that you decided against in favor of this?. What are the proposed API changes and function signature changes/additions?. I'm not able to reproduce on iOS 10 Safari on iPad. The selection updates within 100ms of a touchend or touchleave event so so in theory this could happen if you tapped the format button very quickly or if touch events were being suppressed but the quilljs.com homepage does not do this.\n. You have intentionally set the #right-stuff overflow to be hidden so the link tooltip overflow will be hidden.\nThe { bounds: element } is not a workaround, it's an officially supported configuration. If you want it to hug the boundaries, use this config. If you want it to show, don't make CSS rules to hide overflow.\n. A DOM node being able to confine a descendent node visually is a DOM thing so there's not much Quill can do here unfortunately. Similar issue: #1100\n. The easiest way to hide it completely is just add a display: none CSS rule. The bounds config allows it to be automatically moved intelligently given containing boundaries.. Yes I don't think anyone else is working on it so feel free to dig in.\n. Consolidating with #879 as it is the same root cause.. It is possible to insert a line break wherever you want. To figure out where the right visual margins are depends on the user's screen width and/or the width the application using Quill.\n. The value argument for insertEmbed can be any type. But the default Image blot understands its value to be a string. If you create your own blot or extend an existing one, you do not have to a use a string as the value.\nFor size specifically, the Image blot actually understands width and height: http://codepen.io/quill/pen/VmbKdm\n. This is because Quill tries to visually match pasted content. Because paragraphs and headers have spacing, and Quill does not, it adds a newline to compensate. If this is undesirable, you can add a CSS rule to get rid of the spacing: http://codepen.io/quill/pen/dOWpJX.. They are not by intentional design but manifests because of the implementation. Looks like Docs and Word both exhibit the expected behavior, so an argument could be made Quill should too.\n. When you scroll down on quilljs.com, the cursor will hover over the Youtube video, which will display the clickable cursor: pointer. If you scroll further, it goes back to the cursor: text. Is this what you are seeing?\n. I see thanks for the clarification. This appears to be a Chrome only issue.. Thanks for the tip @henry-luo . Unofficially at the moment, you can do something like this from an event handler:\njs\nfunction handler(event) {\n  let blot = Parchment.find(event.target);\n  let index = blot.offset(quill.scroll);\n}\nThe reason I say unofficially is because quill.scroll is not documented, and the variable name or visibility may change in the future (though none is planned). But find and offset are both part of Parchment's API. There may be an official API for Quill in the future for this use case as well.\n. It's because there is spacing from the .d class. Quill <p> tags do not have spacing so it tries to more closely match the input content with a newline.\nAlso JSFiddle allows you to attach external resources on the left side so you don't have to paste the entire built library.\n. It is still possible to use CSS but less straightforward if you use sibling selectors.\nIt is not possible to have one <blockquote> tag for multiple lines at the moment and I don't see a reason to add it due to lack of a practical use case. If you have one please follow the Contributing Guide for feature requests.\n. I'm not sure I follow the steps for reproduction. Where are you putting <p>text</p><hr>?. I'm not sure the insert image button inside the Bubble tooltip is a good user experience for the reason you mentioned. The problem with opening on click is users typically click around while reading and the persistent tooltip would be very annoying. I would suggest adding external UI like Medium does for inserting images.. I'm not sure this editor contents itself is the right abstraction layer to put caching information. I would suggest capture this on input. For example when the user clicks on the dropdown item that adds a font, and when the document is initially loaded, run reduce over the Delta.. This is an available configuration option.. This is not an available feature. I'm not sure it makes sense to add to the core library but feel free to make a case for it.. Using the Chrome Inspector on the ql-editor container, you will see it is not actually taking up the full height, due to the overwritten rule to auto !important. Adding a min-height: 100% rule fixes this.. > It is my understanding I need to import the link module and then register it in order for [the link tooltip] to be available\nWhere in the documentation lead you to believe this?. There's not an API to retrieve or set history stack information. But since the undo/redo functionality is a module, you can extend it to add this functionality. See the module docs for details.. The Medium guide is to demonstrate how to customize the content of Quill using Parchment and for the purpose of the guide, it uses the bare basics without all keyboard and selection interactions included, so the guide does not produce a fully robust production ready editor--that is what the full Quill editor is for. If you change the import from quill.core.js to quill.js and follow the given instructions, no error occurs.. Apologies I was not thorough in following the reproduction steps.\nFirst the quill.js vs quill.core.js issue I did not realize that that was the official pen and it was actually being saved so when I was tinkering it was left at quill.js, which is what I tried.\nSecond browsers have an issue with empty <a> tag behavior on newlines so Quill's keyboard module fixes this but whitelists the name \"link\". It would be prohibitive performance-wise to perform this check dynamically. So renaming to \"link2\" defeats this fix. This is unique only to blots using the anchor tag so renaming to bold2, italic2, etc should work just fine. . The issue is text is being changed in a text-change handler. This pattern in general should be avoided (not just in Quill) but even so Quill tries to handle this but it appears Chrome does not respect the try catch block: https://jsfiddle.net/scwp779y/1/. There is no issue in other browsers and looking at similar bugs in Chromium, it does not appear they are amenable to suppressing the error.\nI would suggest just avoiding triggering text-change in the handler for text-change. You can do this by wrapping your setText call in a _.defer or setTimeout.. Something like this? http://codepen.io/quill/pen/VmxKqM. Videos (and images) understand the width and height format. So you can also call formatText(0, 1, 'width', '400px');.. Please provide a more specific and technical description for what \"support high DPI images\" means. Keep in mind Quill supports a wide variety of browsers so any suggestion must be implementable and supported by all platforms Quill supports.. I'm still looking for technical specifics. For example if we were talking about accessibility, it would be something like adding a aria-role attribute, not \"make Quill more accessible\" or \"support screen readers\".. Yes I've owned a MacBook Retina since they came out years ago and currently have a 4k Dell monitor. I'm not asking about what high resolution images are or what kind of websites could benefit from showing high resolution images. Please re-read and reconsider my original question and following clarification.. I'm not understanding the concern, particularly where the fear in bugs lie. If it's in the Quill codebase, then more code in the Quill codebase to implement said JSON schema is not the answer. If it's in your codebase, then that's beyond the scope of Quill. If it's in the browser or some network layer, then I'd be interested in data supporting why that concern is significant.\nThe Delta codebase and format is semantically versioned.. ql-container is necessary as it stores not just ql-editor, but other containers as well--for example the clipboard. I'm not clear on the benefits or the use case for flattening this.. There is an important distinction between a feature and a particular implementation for a feature. Inline editing as a feature does not require a particular DOM hierarchy.\nI'm assuming .quill is what you are passing into Quill ie myEditor = new Quill('.quill');\nAs .quill is a custom class implying you have control over it, why not have your CSS rule be .quill > .ql-editor > p?\nCan you clarify what the breaking behavior is for the second scenario?. Thank you for the explanation. Quill at the moment needs both the .ql-editor and parent ql-container div since ql-editor is not the only child, and its siblings are not optional. For example paste would not work correctly in all supported browsers if ql-clipboard was not present. It could be possible to put these sibling divs somewhere else, but given the description, this does seem to be the only problem you will likely encounter. For example I'm not sure the display: inline use case will work out since Quill and Parchment does expect lines and block level nodes.\nIf you do want to explore this route more, I would suggest forking Quill and making some of these changes (for example appending ql-clipboard to body instead) and if you are able to get everything to work then we can discuss merging some of these changes or supporting some of the options in the official project. Otherwise right now what I would predict is you'll hit some other roadblock and any work up to that point would be wasted.. http://quilljs.com/playground/#autogrow-height. To clarify step 3 is use an API call? And more specifically an API call where source == 'api'. I see--it does make sense to not have the check in modify irrespective of what external modules do. It seems like it would make most sense to not scroll when source is silent?. I decided it was acceptable to add this but preferred the implementation in #1436 since it also makes the list easy to modify. Thanks for the PR anyways!. In terms of file organization it should probably go in theme/base.js since that is what is being tested. There may need to be some refactoring of the source code to enable unit testing which may influence which test/ folder or file it goes into.. This is because of the extra margins. Quill is expecting its paragraph tags to not have margins so when it sees content with spacing it tries to compensate visually by adding newlines.. You can now configure the visual matching that adds the space in the most recent version of Quill 1.3.1: https://jsfiddle.net/zhmgLtuf/. We update new versions quite often and cannot manually update all links every deployment. If you can automate this, feel free to submit another PR.. > Not sure if it's possible to make the caption editable inline\nEmbed blots can have arbitrary content, editable or not. The formula blot makes use of this feature.. @benbro Thanks for the pen. There should be an easier way now that #901 is fixed. I'll update the docs with an example in the next release.. Place the CSS wherever you want. formats/font is not a directory, it's an import specification for Quill (so basically you don't have to do anything here).. You can configure the toolbar as an array... https://quilljs.com/docs/modules/toolbar/#container. No you can pass in [{'size':  ['12px', '16px', '18px']}]. Where I think the confusion is there is a difference between what the toolbar's purpose is, which is to send the editor commands. The default editor has a whitelist of options which '12px' is not a part of. This decoupling between the editor and toolbar is an architectural decision to allow greater modularization and customization. The other issue is we wanted to allow as much customization as possible using just CSS so the labels are controlled by that. So if you just pass in those options into the toolbar you will get a bunch of \"Normal\" labels instead of \"12px\".. Yes video drag and drop is not a feature of Quill. If you'd like to request it, please create a feature request.. Yes it is a part of native contenteditable.. Looks like I need to update the docs but you can also pass in a selector so this works:\njs\nvar quill = new Quill('#quill-editor', {\n  modules: {toolbar: [ 'bold', 'italic', 'underline' ]},\n  bounds: '#quill-editor'\n});\nI think the concept of something to mean \"within itself\" would be beneficial but I don't like using a magic value. If there is a way to obtain the former without the latter we can reconsider.. I don't believe jQuery validation works on Quill.. The syntax module saves and restores the selection as part of its normal operations. Your InputBlot is reportedly of length 1 (since it is a BlockEmbed) but really it is not which is why when it restores the selection, it is placed at the wrong location. To remedy this your InputBlot will have to report the correct length, and be able to handle split operations.\nSo yes removing the syntax module happens to allow this part to work, but all selection saving and restoring functionality is broken from the incorrect length reporting.\nTables is a complex feature to add and there is an issue on it #117.. This has been fixed in 1.3.0.. It is fixed with a new InlineEmbed blot but the default export is still Embed: https://github.com/quilljs/quill/blob/develop/blots/embed.js. I'll switch this over but in the meantime if you build Quill you can import InlineEmbed instead.\nTo observe the fixed behavior take a look at formula on the homepage of https://quilljs.com. It used to use the space workaround like @BrockReece suggested but should not be necessary anymore.. InlineEmbed will be converted to the default Embed as soon as 1.3.1 is released (commit is already in develop).. The setting contenteditable to false needs to be removed in create(). The native embed already has sets the contents to be contenteditable to false and this additional call is defeating the cursor workaround the fix added.. From the error message: \nError: Cannot find module 'C:\\Users\\Me\\Code\\Redactor\\quill2_develop\\webpack.config.js;'\nIt seems the problem is the path is being concatenated into quill2_develop. Why this is happening on Windows I'm not sure. I spun up a DigitalOcean instance of Ubuntu 16.04 and everything builds as expected.. What happens when you run which node?. Can you post the output for npm run build. If that fails can you also post the output for ./node_modules/.bin/webpack --config _develop/webpack.config.js. This using v1.1.6 seems to be working fine. The code differences look like a difference in versions.. Can anyone else reproduce this? I'm not able to on Chrome 54.0.2840.98 on Sierra 10.12.1 with Quill 1.1.16.. Quill does not support content folding as it is primarily a rich text editor that recognizes code snippets but is not a full blown code editor itself. It does not look like highlight.js supports content folding either.. This has been fixed in 1.3.0.. Yes Attributors and Blots share a namespace. Please name your custom attributor something else.. This appears to have been fixed in the latest version of Quill.. For custom paste behavior you can either supply the appropriate matchers, or supply your own clipboard module.. The linked comment was made during v0.20 when exposing said template was still being considered but that idea did not survive to 1.0. There's a great difficulty with UI APIs since they are very error prone on different browser environments and everyone wants something slightly different. With React, Angular, etc the future of UI does not appear to be with runtime template strings so the suggestion would be either just use CSS or add your own tooltip.. What's the use case? It's not entirely intuitive that the toolbar should only show when source == 'user'. The reasoning is open and close should behave the same way and the toolbar should close or move whenever the selection changes regardless of source. Otherwise you could highlight a word causing the toolbar to show, and if the API with source==api removes the selection and the toolbar stays open, when the user clicks \"bold\" they will be very confused why their text is not bolded.. This fix is only specific to your application and not the general case.. It's not a Quill thing--it's just how z-indexes work.. Thank you for the PR. I would prefer this bug be fixed at a similar layer to where the formats config is considered normally.. Sorry it's a very small change to implement the fix so I made it locally but have not pushed. Thanks for the filing the bug and bringing it to light.. Only answering the original question: Just registering the format allows Quill to recognize it. The toolbar and what appears in it is separate. As already suggested a full example showing all the parts exists http://quilljs.com/playground/#custom-fonts. To clarify this is just the inline code style not being preserved? The link and bullet is being pasted correctly. I also cannot reproduce step 5-7. Some specifics may help.. Step 5-7 is a duplicate of your own issue #1201.\nFor 1-4, the issue is you are trying to paste a font Courier New that has not been added to Quill. If you want to pick the \"closest\" font, you can create a clipboard matcher to add this logic. Otherwise there is no way in JS to figure out what fonts are visually \"close\" without custom logic.. This is working perfectly fine for me. Please fill out the rest of the requested information for bug reports if it's still not working for you.. You need to add the sizes to the whitelist as shown http://quilljs.com/playground/#custom-fonts and then add CSS rules to show the text that you want.. The purpose of the playground example I linked was because you were missing whitelisting which was one problem. The other problem is showing the right text which could either be solved with CSS like I suggested, which does not require custom HTML. The easiest way to do this is just use the developer console to find out which rule is causing \"Normal\" to show up and write a more specific rule.. The custom font family example might also be useful.. Sounds like you were able to find your own solution to your question. Thank you for sharing.. Thanks!. If there is an actual bug with Quill and not with your script please provide details why. Otherwise please consult the Browserify docs on proper usage.. A solution that worked for me was to overwrite add to store a serialized list of IDs. For example:\n```js\nclass Comment extends Parchment.Attributor.Attribute {\n  constructor(attrName = 'comment', keyName = 'data-comment') {\n    super(attrName, keyName, { scope: Parchment.Scope.INLINE })\n  }\nadd(node, value) {\n    if (this.canAdd(node, value)) {\n      let ids = []\n      if (node.hasAttribute(this.keyName)) {\n        ids = node.getAttribute(this.keyName).split(',')\n      }\n      if (ids.indexOf(value) < 0) {\n        ids.push(value)\n      }\n      node.setAttribute(this.keyName, ids.sort().join(','))\n      return true\n    } else {\n      return false\n    }\n  }\nremove(node) {\n    node.removeAttribute(this.keyName)\n  }\nvalue(node) {\n    return node.getAttribute(this.keyName)\n  }\n}\n```\nThis is using an attribute Attributor but I think the same approach could work for class Attributors.. Thank you for your interest in contributing. Quill is a large project now in scope and user base so organized progress without regressions and unintended adverse effects are crucial. Some of the ways this happens is laid out in the PR section of the Contributing guide.\nA big missing piece for this PR to move forward is a thorough description of the addition. CodeMirror has the benefit of only modifying plaintext so there is not as many interactions to consider. With Quill, text can be formatted in numerous ways, and with 1.0 formatting can be user defined. How will text-marks interact with different formats (syntax highlighted code in the syntax module seem particularly problematic)? How does marking across lines work? What if a user just marks a range that includes a video (a block embed)?\n. This should be fixed in 1.1.8. Documentation site just updated.. One note is that you cannot actually follow step 3 from Github because it turns it into a code block so Quill will paste it as a code block. So you either have to disable code blocks with a formats: ['link'] into the config or paste it to some plain text editor first and copy from there. In either case the matcher is working as expected for me.\n\nTo aid in debugging can you add debug: true to the config and add what the quill:clipboard convert log says?\nIt should also go without saying that a unit test snippet should not be considered a feature.. Thanks for taking a look @CoenWarmer but I think while this issue is very similar it's actually different. This one does a cut before a paste, instead of overwriting with paste. Also this issue is affecting Chrome.. Text is appearing in monospace for me. That is to say the font-family dropdown has no effect on the code block, which is the expected behavior.\nTo confirm is the expected and actual behaviors reported in this issue described as intended? \"Text remains in sans-serif font\" does not make sense since once you make it a code block in step 3 it is monospace so \"remains\" is a confusing verb here.. There does not seem to be much community support for this and in my view expands Quill beyond its charter. Quill is not meant to be a toolbar HTML generator and already has very reasonable options for customizing its toolbar. Now the code happens to be conveniently written but I would rather not entangle them with the outside world given Semantic Versioning.. I think the issue is remove formatting requires at least a selection. There does not seem to be complete consistency between other editors' remove formatting feature. Some do not remove block level formats at all. There was a discussion on redesigning this in #954 but it does not seem like many people had any strong opinions.\nThe documentation is not clear about it needing to be a highlight. Perhaps that should just be clarified?. The behavior is natively specific to the <a> tag (see https://jsfiddle.net/x7g357ze/) and differs between platforms.. You are probably safe saving the exact html Quill's editor produces and restoring it before initialization. Crossing between applications is where you get into trouble since there's no such thing as standard HTML for rich text. Quill, Google Docs, TinyMCE, CKEditor all produce and recognize different HTML for the same text and formatting. All do a best effort attempt to recognize different formats from other applications and none are perfect. So by storing and restoring HTML, you are counting on this best effort approach, rather than a precise specification like Deltas.\nThere is a lot more to Quill other than Deltas. You can see a comparison here.. My apologies I was trying to compose a detailed response when I saw this, but forgot to finished it.\nThe short of it is <p><br></p> representing the empty document is by design and and foundational to how Quill works. Many parts of Quill's codebase assume at any given index in a Quill document there is both a block and inline blot. So there would have to be a strong reason / benefit to a change, and more conveniently being able to detect emptiness does not hit the mark.\nI'm not sure if this is still true but older browsers (that Quill supported) definitely did not work correctly with an empty contenteditable div, in that since it is empty, it is not selectable so you could not put your cursor inside and type. Some also simply rendered 0px height since there's nothing inside the editor (though there are acceptable though not ideal CSS workarounds). There are also reason why the paragraph and break tags are used but that is not relevant to their existence at all.\nAs to why an empty document still has '\\n' there a detailed explanation in http://quilljs.com/guides/designing-the-delta-format/ (you can stop reading after the Line Formatting section, but everything before that is relevant context).\nYou can use quill.editor.isBlank() to check if the editor is empty but its interface is experimental and not protected by semver. Also it does not consider an editor with no text but does have a formatted line empty. For example, <ul><li><br></li></ul> is not empty.. Thank you for your work on Quill + DefinitelyTyped @sumitkm by the way!. The way List and ListItem works is ListItem does the formatting and sometimes it has to split its parent List, for example going from \nhtml\n<ul>\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n</ul>\nto\nhtml\n<ul>\n  <li>1</li>\n</ul>\n<ol>\n  <li>2</li>\n</ol>\n<ul>\n  <li>3</li>\n</ul>\nLooking at the your stack trace, ListItem's parent is not a List but the root Scroll itself, so splitting it will cause and is causing problems. Why that is occurring is not clear.. I'm not sure the right fix for this at the moment but a workaround for your specific codepen scenario is to get rid of the bounds config option (or set it to document.body).. Emulating DOM APIs server side is slow but I would argue it's the least error prone, since the same code Quill uses to convert HTML to a Delta would be used. Of course this is limited by the quality of libraries to emulate the DOM, so that may be the concern.\nIf you don't want to involve Quill at all, the general approach is to parse the HTML string into some tree structure, and recursively traverse it to build up a Delta, similar to how Quill's clipboard matchers work. The more you know about your input HTML structure and the more consistent that structure is, the easier your task, since you will have far fewer cases to deal with.. Quill allows you to define arbitrary formats so covering every single case with an example is not possible. But what we can do is cover common cases and principles to allow users to build upon and extrapolate.\n\nallow customizing some properties like image width/height or maybe video tag url.\n\nThe video section of the guide you linked includes an example that customizes the width/height. A similar approach can be taken with images. I'm not sure what you mean by video tag url in the context of that sentence.\n\nEven using a simple prompt() example for that would be great\n\nThe examples in the guide use something even simpler: hardcoded values. Quill's API, like most APIs, does not care how you got the values it is passed. It could be a static value, a prompt() call, or a fancy responsive reactive UI.. If you have a reference to the blot, you can just call format on it. Quill will figure out what happened through mutation observers and fire the appropriate text-change event.\nYou can also get a reference to a blot from a DOM node from Parchment.find(), which should be available in a DOM event handler.\nIf you want to find where the blot is for some other reason (insert something before the image), you can use offset(). The root scroll blot is accessible from quill.scroll (though this is variable naming/access subject to change) so you can do myBlot.offset(quill.scroll) if you want it relative to the entire document.. There are lots of ways to get width formatting to work, depending on how you defined the Blot, and what references you have. Alternative ways do not involve custom Blot, since the core Quill image blot already recognizes width and height, or Blots at all, since you can also use Attributors. As I already said examples for every single case is not attainable nor effective.\nQuill is a very popular project and gets a lot of questions about everything. The other issues related to image width or resizing were either duplicates (immediately marked and closed as such) or desiring a UI, which is not on the foreseeable roadmap (which I have stated in the relevant issue).\nThis Issue's main question as filed was \"how to implement a custom blot that would allow customizing some properties like image width/height\". There is already an identical video example for that. It is evident now your actual question was closer to \"how do I format a blot with a custom format that supports it\" which has an exact API for that purpose aptly named format. If you want to use Parchment in Quill, which is the purpose of the guide linked, I believe it is reasonable to be aware of both libraries' APIs.\nThe distinction between the two forms of your question is a bit pedantic, but that was all the information you provided. There was no elaboration in the form of words or code, or details about what you already tried or were trying. Providing as much information and clarity as you can also goes a long way in getting more out of open source communities. Etiquette such as following the Contributing Guidelines will also get you more mileage. Generally this sort of Issue as judged by the original post have been auto-closed as it does not follow the guidelines.\nOf course documentation in general could always be improved but that is an ongoing process and Issues is for specific purposes and your two questions are answered so I considered the specific purpose of this Issue resolved. There will be more guides and examples on using Parchment. That might be a followup or continuation of the Medium guide, it may be a separate guide, or even creation/change to Parchment to make it more intuitive.\nI know a lot of other open source projects leave open hundreds of issues forever mentally marking them as \"someday maybes\" or go on long tangents within an Issue thread but I prefer to be more realistic and streamlined with Quill.. This line is actually from the clone library. I'm not going to encourage taking it up with them because it's not clear this is a clone issue or vue issue or just an issue with your application and the claim that the fix would not have adverse side affects is unsubstantiated.. > and not the otherwise usual insert: '\\n' and the attribute\nIn what scenario have you called formatLine with one of the core formats and gotten an insert '\\n' and can you provide an example or reproduction steps? The expected behavior is actually a retain.. What browser and OS are you using?. For Salesforce platform specific, please contact Salesforce. The line referenced (window.katex) is only run when you use the formula module, which you are not. Is this error from a stack trace (if so please post that)?. This should be fixed by https://github.com/quilljs/quill/commit/51c03ba60d4c27d66ade7b7ff505c24ebd943fff and will go out in the next release.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#feature-requests. No it has not. You can always check the version by logging Quill.version.. I think both your PR and https://github.com/quilljs/quill/commit/576a074312c049d7589f39d9b07ff9961d0e4639 is necessary then. I will re-open and merge.. This is fixed in 1.3.0. When you click on an image, the selection will move to the image. Furthermore a class is added to the image with a border.. In case it is useful the intermittent vs consistent depends on how fast you click. Fast clickers never experience this because focus never shifts to the tooltip and slow clickers always experience this bug.. @hongmomanu You were able to reproduce the 10s slowdown and removing the image/svg+xml fixed it? I've never been able to reproduce since #1090.. Great thanks--can someone else who has been able to reproduce this confirm this fix?. Can you elaborate on what you mean?. I'm not seeing a strong enough benefit to have a whole new css bundle to warrant the confusion to other users alone. Why not just use more specific rules for your defined styles so they are not overwritten?. This happens when an inputted link fails sanitization, which means its protocol was not http/https/mailto. If you just typed something random (not a full url), it will be a relative link and if you are running it from an .html file, the url protocol will be file:. In a web environment you do not need to worry about this.. > then focus out\nWhat do you mean by this? Clicking away? Also please fill out all the requested information in the Contributing Guide.. This bug has been fixed in the latest version of Quill, not sure since when.. #650 . It's not clear changing the white-space property is safe from side effects. Also how exactly do you enter a non-breaking space from the keyboard?. You can already support video as of 1.0. The main editor on Quill's homepage demonstrates this. There are no plans on adding audio as supporting every format and embed type is not a goal. Instead Quill has an API to allow custom definitions. Take a look at http://quilljs.com/guides/cloning-medium-with-parchment/.. There needs to be a tests demonstrating this issue and fix, as stated in the contributing guide, especially since it has been noted in the issue this may not be free of side effects.. I do recall trying preventDefault() on mousedown and recall it not working in enough cases to not use it. I do not recall exactly what without spending time digging in but think it had to do with non-input elements on some browsers. I think the other concern is this would only affect buttons. Dropdowns and link input should not be prevented and focus should shift otherwise they won't work.. @sferoze Sounds good please let us know how it goes.. I'm no longer able to reproduce this in IE 11.103.10586.0. Closing in favor of #1374 . Yup thanks!. There are too many Codepen examples for Quill to update every one on every release so unfortunately the feature specific ones are only guaranteed to work for the specific feature.\nWe do manually all the general purpose ones on the playground page.. What's the use case?. Makes sense thanks for the context. There's not a way to do what you are describing currently. I will leave this open as a feature request and for others to upvote.. You are not correctly setting the height of the editor in a full page scenario with the Snow toolbar. This can be observed after step 2 with the Chrome inspector. You can use flexbox, but it is not being used correctly either in the linked codepen. You can also use other methods like calc, but there are many many ways to do this all of it having to do with HTML/CSS and not Quill.. For the machines that experience this issue do they consistently experience it? Also for most of the machines where they work fine on, is it just that you've never observed this issue on these machines or have you tried enough or for some other reason think these machines are for some reason immune to the issue?\nAlso is this happening on the latest 1.2.0 version?. Do you have steps for us so to reproduce consistently? We can't fix bugs we cannot observe.. Great to hear!. There is no quick configuration for plain text pasting. You can provide your own Clipboard module if Quill's does not suit you: http://quilljs.com/docs/modules/. The code example there happens to be exactly a plain text clipboard but it is just a code example for explanation and demonstration purposes.. There needs to be a 1:1 consistent predictable mapping between a Delta and DOM tree so the answer to the question specifically is no. You can however use CSS to hide elements in the DOM. Would that work?\nI'm not sure I follow your workaround but modifying Deltas by hand is very error prone.. Are you thinking this would be on the top level Quill layer or a lower layer? How would it affect existing APIs?. The issue is you are changing the editor text inside the text-change handler. In general you should not trigger an event in the handler for that event. There's no infinite loop in this case but because function calls are stacks the restoration at the end is going to be the oldest. Unless you see a much simpler solution on Quill's side, it's a bit complex and out of scope for Quill to detect and guard against this practice.\n. You can add your own color picker and use the API to format text once selected. Integrating another library into Quill core does not seem appropriate.. It was a no-op for me in Word/Docs but maybe it is a Windows vs Mac thing. Had to revert the fix--will look at a more ideal fix for Windows regardless.. Yes this is the same issue.. What's an example use case?. I think this use case is better solved with an extended Clipboard. The Extending Modules has an example of this but in your case you would overwrite convert() and probably call super.convert() before returning.. It is not safe, from a bug free and user experience perspective, for a rich text editor to allow arbitrary HTML modifications. This is why vanilla contenteditable and previous generation of rich text editors earned their notoriety and part of the reason Quill was born. The blot abstraction is Quill's way of safely allowing for deep customization on its contents. If you nevertheless prefer the flexibility of arbitrary HTML modifications, other editors with this support still exist.. Cloning Medium with Parchment is a good resource.. Can you give an explicit example? All of the CSS rules are scoped so there should not be bleeding side effects but I'm not sure if that's what the concern it.. @sferoze The current status is on this issue #759. Thanks!. Issues is not the place for philosophical debates of existentialism or purpose. Please include practical reasons, or indulge elsewhere. And remove the attitude or assumption that just because an implementation surprised you, it must be wrong or lazy.. All good thank you.. Thanks again!. Thanks!. The float does mess up Quill's positioning calculations. The workaround is to specify the bounds config:\njs\nvar quill = new Quill('.editor', {\n  modules: {\n    toolbar: [['link']]\n  },\n  bounds: '.editor',\n  theme: 'snow'\n});\nDoes this work for you?. Open to improvements but this PR makes the second part of the sentence grammatically incorrect.. Thanks!. This is not what's causing the issue but you do need to at least use the minimal quill.core.css stylesheet.. Can you reduce your case issue to a reproducible codepen or jsfiddle?. Can you clarify the steps for reproduction? Are you building just Quill for development? Are you building Quill as part of a larger build pipeline?. Quill has a webpack example as for building as part of a larger pipeline. It uses the latest version of webpack which is 2.2.1 at the moment and it builds and runs with no errors.\nQuill uses module.exports = Quill in one place because we want people to be able to drop it into a website and use it immediately without involving a build (ie including quill.js will assign to window.Quill). If there is a way to keep this benefit while removing the error for you please advise. Otherwise please look at the differences between the example webpack config and your build config and resolve the relevant differences.. This is expected behavior and not really a way around it. All markup in Quill has to have meaning Quill understands or else it is liable to be discarded on rendering. If there is meaning to the classes you would define and register a class attributor.. Quill's clipboard attempts to visually match the content pasted, not the markup. Since paragraphs have bottom margin generally and Quill's paragraphs do not, a newline is added to compensate.. @gaborsar is correct and I elaborated more on this here. CSS could work but I'm not sure this is a robust solution in all browsers--though this is also moot because of the structure constraints I described.. <br> vs <br/> is an HTML5 vs XHTML thing nothing to do with Quill. Take a look into doctype for more info.. That link in the steps for reproduction does not appear to lead to a page that uses Quill.. Already contacted Cloudflare support and now on Twitter--no response yet. The difficulty in switching DNS providers is quilljs.com forces SSL and so you'd have to set up a proxy endpoint to terminate as well as get a cert. Hopefully they will respond soon. If anyone wants to help encourage them feel free.. I have set up Route53 but it could take days for caches to expire.. Looks like this Cloudflare issue is resolved though some caches may not be expired. Not sure what you mean @leocaseiro ? Literally why do we not use a gh-pages branch?. We prefer to put it in the docs/ folder so they are more easily synced with the rest of the codebase, as opposed to a separate branch.. Composition is working on a standalone Quill demo without an iframe. If the Evernote extension is doing something with the event it would make a lot of sense why it does not occur in an iframe as iframes do afford protection. It seems like an issue that should be filed with Evernote as Quill is just a standalone agnostic library that cannot favor a particular vendor.. I think for the Clipboard's purposes it should always favor the lower tree nodes since that how CSS rules are prioritized so a config is not necessary. I don't think modifying the Delta API is the best approach and others should be explored first as the cost of this approach is supporting that API forever and all the interactions with other APIs.. It's working for me. @dsathyan You are following the steps for reproduction precisely? It sounds like you are doing something else from the mention of innerHTML. Inventing new magical strings is bad practice. The documentation is available and clear in what is going on.. Please see https://quilljs.com/docs/formats/ for a list of supported formats. Please see http://quilljs.com/docs/modules/toolbar/ to see how to use those formats in the form of a button or dropdown.. Yes the two issues are separate so thank you for creating two. As @borodean suggested this was intentionally added in #540. You can override this behavior if you'd like with a keyboard config. Note from the docs, because enter is specially handled, it will have to be specified in the configuration, not with addBinding.. Can you produce the issue in a minimal Codepen?. If I understand correctly the issue is you have is if you initialize the contents of Quill as\nhtml\n<div id=\"editor\">\n  <p>test</p>\n  <blockquote>testing</blockquote>\n</div>\nYou get \nhtml\n<div id=\"editor\">\n  <p>test</p>\n  <p><br></p>\n  <blockquote>testing</blockquote>\n</div>\nQuill expects its own paragraphs to have so when it sees content with spacing it inserts empty lines to compensate. You can change this behavior by modifying its matchers. Quill uses the same code to handle pasting and initialization.\nAs a side note if you are saving content to resume an edit session it is highly recommended to be saving Deltas.\nIf I have misunderstood, please be very explicit in your reproduction steps and what you expect to see and actually see.. This appears to have already been fixed.. First this is a browser behavior: http://codepen.io/quill/pen/EWKzBG. Second, / is optional by HTML5, which Quill follows. It should be trivial to convert from one internet specification to another.. What is the expected behavior? That a tab is entered into the editor?. Thanks!. I'm not able to reproduce with your examples.. Yes you are right it seems to have broken since I last remember. Thanks for the report.. The autogrowing example is now working so if you adjust your codepen similarly and use 1.2.3 it should now be resolved.. Now my previous comment that more setup is involved and that the autoscroll example should be helpful is accurate.. There are relevant CSS rules in the example that are necessary. If you paste multiple blocks (like two paragraphs), for many sources it is indistinguishable whether or not you pasted part or all of the 2nd block. There could be a long debate on which case should be favored but Quill favors the former and removes up to one unformatted newline on paste. For those that disagree, one could always provide their own matchers and/or clipboard module to modify this behavior.. I'm not sure I like this approach since all this does is shifting the assumption that [].find is not magically modified by some third party in an incompatible way (usually a safe assumption) to [].slice not being magically modified by some third party in an incompatible way.. I'm not sure what's being reported or asked here. It kind of sounds like you solved your own issue? Please clarify and we may re-open if needed.. Can you make a separate issue @nipunjain87 for tracking?\n. This is not a use case Quill encourages. You can accomplish something like it with a custom attributor, but you would be going against the grain. Quill expects a 1:1 mapping between data and its markup so if your content is \"some text\", the valid markup for it cannot be simulaneously be <p><span>some text</span></p> and <p><span style=\"font-size: 16px;\">some text</span></p>. In fact in the default Quill package the former is not even allowed as <p>some text</p> is correct.. @sferoze thank you for digging into this and apologies for the delay. The volume of issues and notifications from random people poking on the internet unfortunately is such that that legitimate ones overlooked.\nI tried out your suggested code and the jumping still persists on an iPad running Safari 10. Is it consistently working for you?. TLDR: No proposed solution seems to work better than the current one so this is still an open issue.\nQuill's paste works by adding a paste listener and shifting focus to another contenteditable container before the paste happens, and shifting focus back to the real editor after paste. The pasted content is then analyzed and inserted into Quill through standard APIs. This has two benefits:\n\nThe pasted content is isolated and cannot trash Quill's editor contents in unpredictable ways as the only way it gets there is through standard APIs.\nMore importantly, the browser fully performs a paste, which contains extra content and context that is not available by just looking at the paste event object. We tried relying on just the event object in the past and reverted for this reason.\n\nThe focus back onto Quill causes it to scroll to the top. You can try in this demo: https://jsfiddle.net/p2pgrxdc/. Scroll the blue div down and paste some text into it. Observe it scrolls to the top. I am unaware of any way to prevent this. If there is a way that would be key to solving this issue.\nSo instead what Quill does is save the scroll position before the focus and restores it after. This causes a flicker on slower devices, like mobile. Personally on desktop I do not see any flicker but in theory this is perhaps I use a faster machine. Nevertheless for this reason it does for me make this issue harder to debug so I can only read the code and reason about it.\nUnless I am misunderstanding the code, the suggestions by @sferoze still save and restore scroll positions and would still induce the flicker. Indeed this would explain why it still manifests on mobile. The preventDefaults do not appear to do anything but I may be missing something here. Otherwise, because the flicker is so fast on desktop to a point it is indiscernible on many environments, I would be reluctant in this situation to make core changes based off anecdotal suggestions alone.\n. TLDR: No proposed solution seems to work better than the current one so this is still an open issue.\nQuill's paste works by adding a paste listener and shifting focus to another contenteditable container before the paste happens, and shifting focus back to the real editor after paste. The pasted content is then analyzed and inserted into Quill through standard APIs. This has two benefits:\n\nThe pasted content is isolated and cannot trash Quill's editor contents in unpredictable ways as the only way it gets there is through standard APIs.\nMore importantly, the browser fully performs a paste, which contains extra content and context that is not available by just looking at the paste event object. We tried relying on just the event object in the past and reverted for this reason.\n\nThe focus back onto Quill causes it to scroll to the top. You can try in this demo: https://jsfiddle.net/p2pgrxdc/. Scroll the blue div down and paste some text into it. Observe it scrolls to the top. I am unaware of any way to prevent this. If there is a way that would be key to solving this issue.\nSo instead what Quill does is save the scroll position before the focus and restores it after. This causes a flicker on slower devices, like mobile. Personally on desktop I do not see any flicker but in theory this is perhaps I use a faster machine. Nevertheless for this reason it does for me make this issue harder to debug so I can only read the code and reason about it.\nUnless I am misunderstanding the code, the suggestions by @sferoze still save and restore scroll positions and would still induce the flicker. Indeed this would explain why it still manifests on mobile. The preventDefaults do not appear to do anything but I may be missing something here. Otherwise, because the flicker is so fast on desktop to a point it is indiscernible on many environments, I would be reluctant in this situation to make core changes based off anecdotal suggestions alone.\n. Hmm @sferoze can you try to place the line this.quill.scrollingContainer.scrollTop = scrollTop; first in the setTimeout block:\njs\nsetTimeout(() => {\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.focus();\n    }, 1);\nI believe this would make the restore run as soon as it possibly can.. Hmm @sferoze can you try to place the line this.quill.scrollingContainer.scrollTop = scrollTop; first in the setTimeout block:\njs\nsetTimeout(() => {\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.focus();\n    }, 1);\nI believe this would make the restore run as soon as it possibly can.. > why can we not set the scrolling container to window\nNot sure what this means. Quill also does not use jQuery and cannot add it as a project dependency but now sure if the above misunderstanding would have clarified this example. Not sure window is a DOM element but it is not the entity that has the scrollbars.. Not sure window is a DOM element but it is not the entity that has the scrollbars.. @DmitrySkripkin Can you elaborate on your solution? Not sure I understand the adding eventListener part or the moving .ql-clipboard. @DmitrySkripkin Can you elaborate on your solution? Not sure I understand the adding eventListener part or the moving .ql-clipboard. None of Quill's core formats will inject to execute javascript.. None of Quill's core formats will inject to execute javascript.. The reason we do this is because we want people to be able to do something this to get going as soon as possible:\nhtml\n<script src=\"https://cdn.quilljs.com/1.2.2/quill.js\"></script>\n<script>\n  var quill = new Quill('#editor', {\n    theme: 'snow'\n  });\n</script>\nIt is my understanding people would have to do new Quill.default instead of new Quill if we use ES6 exports when I last explored just using ES6 modules in the source code. Has this changed?. The reason we do this is because we want people to be able to do something this to get going as soon as possible:\nhtml\n<script src=\"https://cdn.quilljs.com/1.2.2/quill.js\"></script>\n<script>\n  var quill = new Quill('#editor', {\n    theme: 'snow'\n  });\n</script>\nIt is my understanding people would have to do new Quill.default instead of new Quill if we use ES6 exports when I last explored just using ES6 modules in the source code. Has this changed?. You can now use a new config in 1.3.0 matchVisual to disable Quill's visual paste matching.. You can now use a new config in 1.3.0 matchVisual to disable Quill's visual paste matching.. This is simply a display tooltip at the moment.. This is simply a display tooltip at the moment.. Behavior-wise it should work like Medium's.. Behavior-wise it should work like Medium's.. Can either of you provide a stack trace?. Can either of you provide a stack trace?. The registration path does not matter in your scenario and the issue I believe was the improper ES6 import.. The registration path does not matter in your scenario and the issue I believe was the improper ES6 import.. > I'm already using a custom ImageBlot class, that extends BlockEmbed so that we can pull from our own internal libraries of images. Feels like without extending Inline, this isn't possible?\nCan you clarify this part?. > I'm already using a custom ImageBlot class, that extends BlockEmbed so that we can pull from our own internal libraries of images. Feels like without extending Inline, this isn't possible?\nCan you clarify this part?. I would suggest a middle approach between the idea and a PR of investigating more to understand what areas would be changed. My prediction is document touches more places and require more widespread changes than it presently seems to support the ability to configure. A quick grep for document seems to support this theory.. I would suggest a middle approach between the idea and a PR of investigating more to understand what areas would be changed. My prediction is document touches more places and require more widespread changes than it presently seems to support the ability to configure. A quick grep for document seems to support this theory.. Thanks for the detailed report and codepen.\nThe issue is selection-change actually happens after text-change. Since text-change can cause a selection-change, the selection code depends on text-change in order to update itself. It seems like in previous versions of Safari and Chrome, the browser did the right thing and did not require reconciliation from Quill. I'll add a couple sentences to the text-change docs to note this for posterity.\nI'm assuming the reason you are listening on text-change and querying getSelection instead of just listening on selection-change is you want to get silent events? In that case I would recommend the editor-change event. This goes without saying but since these events fire very frequently, the handlers should be very fast so similar caution given to stuff like the DOM's scroll or mousemove events should be given here.\nEither way you can see the example here: http://codepen.io/quill/pen/vmNLyK. This behavior is consistent with the documentation. Omitting the option means default button set, false means no toolbar, any array mean toolbar with elements of array as controls.. This behavior is consistent with the documentation. Omitting the option means default button set, false means no toolbar, any array mean toolbar with elements of array as controls.. https://quilljs.com/docs/modules/toolbar/. Did you check out the autogrow example? https://quilljs.com/playground/#autogrow-height. Not sure what scrollToView() function you are referring to but pressing does scroll to the new line. If it does not please file an Issue and fill out the requested fields. insertText() does not by design as Quill does not want to assume why users are calling it. You can call focus() to scroll to the selection if it is out of view.. Not sure what scrollToView() function you are referring to but pressing does scroll to the new line. If it does not please file an Issue and fill out the requested fields. insertText() does not by design as Quill does not want to assume why users are calling it. You can call focus() to scroll to the selection if it is out of view.. There seems to be two issues described here:\n\nThe toolbar does not always show up when a selection is made\nWith a selection and toolbar shown, touching a format button like bold does not apply the formatting.\n\nI've never been able to produce 1) so more guidance on here would be helpful. On 2) it seems to be largely a case of the touch target not being very large for mobile devices. To confirm this every time it does work you should see the button darken for a split second (indicating the button press). If not that means your finger missed the button. Another way to check this is just to make the button a lot bigger.. Quill now uses selectionchange in 1.3.0 which should always accurately update the selection which may cause 1. Please try on the latest version to see if it is fixed.. Quill now uses selectionchange in 1.3.0 which should always accurately update the selection which may cause 1. Please try on the latest version to see if it is fixed.. @edmeehan-tcg The spellcheck issue seems to be related to #1654 and fixed by the same fix for it.. @edmeehan-tcg The spellcheck issue seems to be related to #1654 and fixed by the same fix for it.. Have you tried these changes out locally to see their effects?. HTML is being executed in order to embed the demo. Adding the code back ticks therefore is not just a cosmetic change.. It is inlined in the page you are changing. Please set up a local dev environment https://github.com/quilljs/quill/blob/develop/.github/DEVELOPMENT.md run your changes and observe the difference between what you think your code does and what it actually does.\nYou are literally submitting code requesting it to be deployed without once running it.. It is inlined in the page you are changing. Please set up a local dev environment https://github.com/quilljs/quill/blob/develop/.github/DEVELOPMENT.md run your changes and observe the difference between what you think your code does and what it actually does.\nYou are literally submitting code requesting it to be deployed without once running it.. Thanks!. If you don't want content inside the blot then contenteditable=false is the way to do it.. If you don't want content inside the blot then contenteditable=false is the way to do it.. Yes I will later today but want to get a couple other bug fixes in.. Can you point me to a source and steps for reproducing this issue in IE11?. Can you point me to a source and steps for reproducing this issue in IE11?. Need to investigate a bit more but two current thoughts:\n\n\nI generally prefer to avoid setTimeout as it makes code non-deterministic and hides the real stack trace when issues occur. But some tasks cannot be done without it but this warrants exploring alternatives.\n\n\nThere is a TODO above this code that iirc was because of a Firefox issue but it could be the case that it would be best not to have this SCROLL_UPDATE handler at all. I opted for another way to fix the issue but thank you for the detailed report in #1404 -- it made the investigation a lot easier. \n\n\nThe code was originally added to deal with if you select-all (cmd-a) and typed a character, Firefox would lose the selection. There was a logical inconsistency with how the fix as it should only care about the case where it has focus but getNativeRange() returns the range regardless.. To add a custom class to a Blot all you should have to do is specify className: http://codepen.io/anon/pen/PmwzGG. Parchment docs are here https://github.com/quilljs/parchment if you want to extend more.. A better home for this is a playground script such as those found in: https://quilljs.com/playground/. Guides are meant to be more detailed and/or substantive.. A better home for this is a playground script such as those found in: https://quilljs.com/playground/. Guides are meant to be more detailed and/or substantive.. Pull requests must be accompanied by tests and given this is implemented with complex regexes which are inherently unintuitive, the standard for testing is even higher if this is the implementation path you choose.. Pull requests must be accompanied by tests and given this is implemented with complex regexes which are inherently unintuitive, the standard for testing is even higher if this is the implementation path you choose.. Clicking in it is intended to place the cursor at the target, not navigate to the URL -- otherwise it would be very hard to edit link text. A fuller Quill editor has a tooltip come up.. Clicking in it is intended to place the cursor at the target, not navigate to the URL -- otherwise it would be very hard to edit link text. A fuller Quill editor has a tooltip come up.. The ports are set in package.json. Configuring them would be useful (especially the main proxy 9000) but no one has gotten to it. If you'd like to submit a PR for this, I'd be happy to review it.. The ports are set in package.json. Configuring them would be useful (especially the main proxy 9000) but no one has gotten to it. If you'd like to submit a PR for this, I'd be happy to review it.. After getting the element from elementFromPoint, how would you get the index? I can't think of a better way than guess and check binary search with getBounds(). After getting the element from elementFromPoint, how would you get the index? I can't think of a better way than guess and check binary search with getBounds(). The element returned by elementFromPoint.... The element returned by elementFromPoint.... There's no need to get defensive. The suggestion if using elementFromPoint() is relevant to the discussion as is the element returned by elementFromPoint().\nThe API proposed here wants to set a selection based on X, Y pixel coordinates. The current Quill selection API allows setting the selection given an index and length, so we need to convert from X, Y coordinates -> index + length. If we use elementFromPoint we can go from X, Y coordinates -> DOM element and Parchment allows DOM element -> Blot using find(). A Blot is aware of its position in the Quill document so now we can use blot.offset() and blot.length() to get index, length of the element returned by elementFromPoint.\nNow this does not get the granularity we want which is the final unknown step. As I mentioned the best way I can think of to solve this last step is guess and check binary search with getBounds(), however this is probably unacceptably inefficient so I'm just throwing it out there as a straw man.. There's no need to get defensive. The suggestion if using elementFromPoint() is relevant to the discussion as is the element returned by elementFromPoint().\nThe API proposed here wants to set a selection based on X, Y pixel coordinates. The current Quill selection API allows setting the selection given an index and length, so we need to convert from X, Y coordinates -> index + length. If we use elementFromPoint we can go from X, Y coordinates -> DOM element and Parchment allows DOM element -> Blot using find(). A Blot is aware of its position in the Quill document so now we can use blot.offset() and blot.length() to get index, length of the element returned by elementFromPoint.\nNow this does not get the granularity we want which is the final unknown step. As I mentioned the best way I can think of to solve this last step is guess and check binary search with getBounds(), however this is probably unacceptably inefficient so I'm just throwing it out there as a straw man.. There is caretRangeFromPoint which most of the browsers implemented but looks like caretPositionFromPoint will likely be the blessed standard and other browsers will switch to this. I would be okay with adding this if the implementation checked for which to use and did the right thing in both cases. Not sure if IE11 supports either but if not so this API would have to be experimental until it also works for IE11. I do not have a use case for this so I will not likely get to implementing it.. If you did toolbar: [[{font: [false, \"mirza\", \"roboto\"]}]] instead of toolbar: \"#container\" it would functionally work but the labels would all say \"Sans Serif\". The way to fix this is in CSS also modify the ::before css rule. An example is here: http://codepen.io/quill/pen/MmoVYb\nHowever it should be said that configuration via this Javascript array is not as powerful as HTML, since the latter method can almost an arbitrary input, so there are use cases where it may be better to use the HTML method. In this custom font use case I am of the opinion that \nhtml\n<select class=\"ql-font\">\n    <option selected>Aref Ruqaa</option>\n    <option value=\"mirza\">Mirza</option>\n    <option value=\"roboto\">Roboto</option>\n  </select>\nis much easier to understand than\n```css\nwrapper .ql-picker-label::before,\nwrapper .ql-picker-item::before {\ncontent: \"Aref Ruqaa\";\n  font-family: \"Aref Ruqaa\";\n}\nwrapper .ql-picker-label[data-value=\"mirza\"]::before,\nwrapper .ql-picker-item[data-value=\"mirza\"]::before {\ncontent: \"Mirza\";\n  font-family: \"Mirza\";\n}\nwrapper .ql-picker-label[data-value=\"roboto\"]::before,\nwrapper .ql-picker-item[data-value=\"roboto\"]::before {\ncontent: \"Roboto\";\n  font-family: \"Roboto\";\n}\n``. If you didtoolbar: [[{font: [false, \"mirza\", \"roboto\"]}]]instead oftoolbar: \"#container\"it would functionally work but the labels would all say \"Sans Serif\". The way to fix this is in CSS also modify the::before` css rule. An example is here: http://codepen.io/quill/pen/MmoVYb\nHowever it should be said that configuration via this Javascript array is not as powerful as HTML, since the latter method can almost an arbitrary input, so there are use cases where it may be better to use the HTML method. In this custom font use case I am of the opinion that \nhtml\n<select class=\"ql-font\">\n    <option selected>Aref Ruqaa</option>\n    <option value=\"mirza\">Mirza</option>\n    <option value=\"roboto\">Roboto</option>\n  </select>\nis much easier to understand than\n```css\nwrapper .ql-picker-label::before,\nwrapper .ql-picker-item::before {\ncontent: \"Aref Ruqaa\";\n  font-family: \"Aref Ruqaa\";\n}\nwrapper .ql-picker-label[data-value=\"mirza\"]::before,\nwrapper .ql-picker-item[data-value=\"mirza\"]::before {\ncontent: \"Mirza\";\n  font-family: \"Mirza\";\n}\nwrapper .ql-picker-label[data-value=\"roboto\"]::before,\nwrapper .ql-picker-item[data-value=\"roboto\"]::before {\ncontent: \"Roboto\";\n  font-family: \"Roboto\";\n}\n``. This is a bug but I will note the workaround in the meantime, which is usingquill.core.jsinstead ofquill.js. This is because the normal quill.js build still registers formats such as bold, and relies on another mechanism (formats config) to disallow it, whereasquill.core.jshas no knowledge of bold at all.. This is a bug but I will note the workaround in the meantime, which is usingquill.core.jsinstead ofquill.js. This is because the normal quill.js build still registers formats such as bold, and relies on another mechanism (formats config) to disallow it, whereasquill.core.js` has no knowledge of bold at all.. What version of Android is this?. What version of Android is this?. Sounds good thanks!. Sounds good thanks!. Firefox on Android is not officially supported due to it not being a supported platform on SauceLabs, which we use to automate. I do try to fix Firefox bugs in general though since it is a pleasant enough development environment. However even so the browser version policy is last two versions, which right now is 54 and 53.. Firefox on Android is not officially supported due to it not being a supported platform on SauceLabs, which we use to automate. I do try to fix Firefox bugs in general though since it is a pleasant enough development environment. However even so the browser version policy is last two versions, which right now is 54 and 53.. Thanks!. Thanks!. Only numbered list styling is supposed to change at the moment though of course we would could make bulleted styling change with indentation as well. You can already define CSS rules to control the bullet style what this really means is what Quill does by default and I'm not sure the majority of people would prefer a non-disc bullet style since so few applications and websites render lists this way.\nPlease thumbs up or down this issue to indicate your preference (up: alternate disc style, down: keep as is).. Only numbered list styling is supposed to change at the moment though of course we would could make bulleted styling change with indentation as well. You can already define CSS rules to control the bullet style what this really means is what Quill does by default and I'm not sure the majority of people would prefer a non-disc bullet style since so few applications and websites render lists this way.\nPlease thumbs up or down this issue to indicate your preference (up: alternate disc style, down: keep as is).. Looks like we should keep as is at least for now. Again changing it for your own application is just a matter of defining your own css rules for indent-1, indent-2, etc.. Looks like we should keep as is at least for now. Again changing it for your own application is just a matter of defining your own css rules for indent-1, indent-2, etc.. Thanks guys!. Thanks guys!. You might have more luck getting help by following the suggestions when you clicked \"New Issue\" such as providing a minimal, complete and verifiable example.. You might have more luck getting help by following the suggestions when you clicked \"New Issue\" such as providing a minimal, complete and verifiable example.. You cannot get rid of the wrapping tag (though you can change it to some other wrapper other than paragraph). There is no configuration to limit the number of lines, though you can use keyboard listeners to prevent the possible inputs. You can also just listen on text-change and if a newline is inserted, use deleteText to reverse it.. You cannot get rid of the wrapping tag (though you can change it to some other wrapper other than paragraph). There is no configuration to limit the number of lines, though you can use keyboard listeners to prevent the possible inputs. You can also just listen on text-change and if a newline is inserted, use deleteText to reverse it.. Thanks for your help @Percipient24 !. Thanks for your help @Percipient24 !. https://github.com/quilljs/quill/commit/0e7a10c6ad865fa9075636787b1dac09d767bf06 appears to have fixed this as well.\nTo answer your question though, Deltas can be made of inserts, retains, and deletes, but only those that are made up of solely inserts are document deltas.. https://github.com/quilljs/quill/commit/0e7a10c6ad865fa9075636787b1dac09d767bf06 appears to have fixed this as well.\nTo answer your question though, Deltas can be made of inserts, retains, and deletes, but only those that are made up of solely inserts are document deltas.. Thanks!. Thanks!. Quill supports the last two versions of major browsers. This is displayed in the matrix on the README but the exact versions are often delayed as it takes SauceLabs a bit to add new browser versions to their tests.\nIt looks like using key will need to wait.. Quill supports the last two versions of major browsers. This is displayed in the matrix on the README but the exact versions are often delayed as it takes SauceLabs a bit to add new browser versions to their tests.\nIt looks like using key will need to wait.. iOS 11 and 10.3 both support event.key now which are the latest two mobile Safari releases. There may even be newer ones by the time 2.0 hits (no timeline yet). Thanks for the PR!. iOS 11 and 10.3 both support event.key now which are the latest two mobile Safari releases. There may even be newer ones by the time 2.0 hits (no timeline yet). Thanks for the PR!. You do not have to do all of this within Quill. I would suggest just building this custom control separately and use Quill's APIs like formatText when the user selects a color.. You do not have to do all of this within Quill. I would suggest just building this custom control separately and use Quill's APIs like formatText when the user selects a color.. The opposite behavior has been reported as a bug (not removing the placeholder when the line formatting has changed) so this is working as designed. Sounds like the other concern has been addressed as well.\nYou can modify the text with :before css but an easier way might be to modify the data-placeholder attribute through DOM APIs. Inspect the placeholder text with the browser developer console to see more on how this works.\nIn the future please follow the Contributing guide when submitting a bug report or feature request.. The opposite behavior has been reported as a bug (not removing the placeholder when the line formatting has changed) so this is working as designed. Sounds like the other concern has been addressed as well.\nYou can modify the text with :before css but an easier way might be to modify the data-placeholder attribute through DOM APIs. Inspect the placeholder text with the browser developer console to see more on how this works.\nIn the future please follow the Contributing guide when submitting a bug report or feature request.. This is a manifestation of Javascript has a Unicode Problem. I think #1437 has a different root cause.. This is a manifestation of Javascript has a Unicode Problem. I think #1437 has a different root cause.. Could be Ubuntu specific too? Firefox on Mac works fine for me.. Could be Ubuntu specific too? Firefox on Mac works fine for me.. Please use the issue template. It is not a suggestion.\nhttps://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Does this occur on Quill's website quilljs.com, particularly the standalone editors for example https://quilljs.com/standalone/snow? I'm not able to reproduce on a Safari 10 on iPad.. I've never been able to repro on my iPad but can you guys try on the latest version of Quill 1.3.0? Some selection code was changed that fixed some other mobile bugs.. Can you please fill out the Steps for Reproduction, Expected Behavior, and Actual Behavior. It is very difficult to follow the pronouns used especially in the last paragraph.. The original steps for reproduction is now working on the latest version of Quill 1.2.6 on the latest IE 11.483.15063.0 and MS Edge 40.15063.0.0. @saw can you try with the latest and see if you are still having issues?. I can't recall exactly. Try git bisect?. We cannot just change core code because it works in one isolated case for one person. This piece of code in particular appears to be motivated by fixing another issue so it is very likely a reversion will result in regression.\nPlease include a bug report that demonstrates your issue. If you would like to contribute a PR, please include a test. Details are in the Contributing Guide.. Thanks!. There was another issue #1571 where scrollingContainer set to body did not work so I will just add a note in the docs. If this is still not working for you even using a non-body container, please provide specifics in your steps for reproduction and I can take another look.. Looks like it will be harder than expected to support ShadowDOM. I'll take another look when the official spec is stable. In the meantime those interested feel free to suggest small, non-regression additions with automatable tests to Quill to aid in this eventuality.. In a general Javascript library I would agree browser quirks can be viewed as an exception, but with an editor and contenteditable, they are the expectation. Quill working well across browsers despite their quirks is major value add that earned it the reach it has today.\n\nAlthough it only took me < 20 lines of code to get QuillJS to work with Shadow DOM, it was very difficult to test, even manually\n\n\n\nManual testing by definition bypasses the tooling so I'm confused why that would slow you down. If you are saying the development environment is difficult to set up let me know which step you got stuck on: https://github.com/quilljs/quill/blob/develop/.github/DEVELOPMENT.md.\n\n\nNot that lines of code is a good metric but engineers in my experience are perpetually in an \"almost done\" state of mind. The implementation difficulty should be measured when it is actually complete.\n\n\nI'm not asking anyone to rewrite the test infrastructure. Just start with one: initializing the editor. If you get ambitious you can try making an API change and making a direct DOM change as well.. Still working for me even if I move the mouse out.\n\n. Thanks for the clarification. It looks like Bootstrap is stealing the focus. If you log the active element:\n\n\njs\nsetInterval(function() {\n  console.log(document.activeElement);\n}, 1000);\nPerform the drag you described and you can see when it moves outside the modal the focus shifts to some other element. I'm not sure why/where this occurs but Quill does and should allow external code to take focus. You can easily re-focus Quill with quill.focus() and text entry will work again.\n. Apologies for the delay. I've been trying to reproduce this here: https://codepen.io/anon/pen/NgmwBV\nIt seems to always correctly report the height in Chrome and Safari. What context are you calling getBounds?. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. You can convert a Delta into HTML. I have not gotten around to writing an official one but there are a several community created projects available on Github. Or you can write your own. Delta is just structured JSON, which is the easiest format there is to process.. You can now use a new config in 1.3.0 matchVisual to disable Quill's visual paste matching which was causing this.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Thank you for the suggestion. This is easy enough to implement as there already is blot.length() so this API would just be a shorthand for getIndex(blot) and blot.length().\nI don't want to replace getIndex() because length() is not free performance-wise especially if the blot has many descendants. Adding getRange is problematic as well since range usually refers to the user's selection in editors. getIndex itself is still experimental so I'd like to avoid the confusion and addition to the API namespace for now, especially if the benefit is just for shorthand purposes.. No this is outside Quill's project scope.. Great thanks for finishing it up!. The way to change the default font size is first to actually change the default font size which you have done with CSS. This is the right way to do this.\nSince 20px is now the default you should also have this be valueless in the dropdown <option selected>20px</option>. Otherwise there would be two ways to get 20px font and we want to avoid ambiguity whenever possible. You can also remove 20px from the whitelist. \nThis demonstrates the same except for font family. Since you are using an inline style instead of class some of the other CSS is not necessary.. Please do not ignore the issue template. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Do you just want to replace it when the editor is initialized, or prevent any additions as well (like if the user copies and pastes h1 you want this to become h4)?. Thank you for the kind words and apologies for the delay on the followup.\nEssentially in formats/header, the tagName specifies all tags that would match the header format. Then the formats function tells it specifically the mapping.\nI think for your use case the best way would be to overwrite the static create function to always create an h4:\njs\nlet Header = Quill.import('formats/header');\nHeader.create = function(value) {\n  // ignore value, always create h4\n  return document.createElement('h4');\n};. It can take a DOM element or a CSS selector so yes html, body should work.. I believe the padding is due to two reasons: \n\nUsers like some space between the numbers and the left boundary of the page\nAligns with indents/tabs that are not lists\n\nThe negative margin left makes the aligning easier to implement with variable with numbers, since you want to right align the numbers themselves in left aligned text. I believe https://github.com/quilljs/quill/commit/67cd065f4d515196e0890bd9411ea5f2ff583169 fixes the issue. Let me know if it doesn't work.. clipboard.convert is an internal method not meant for public consumption. The public interface for this functionality is dangerouslyPasteHTML, which allows arbitrary HTML input, and as its name suggests it may be dangerous and trip security warnings.. Quill only accepts a subset of HTML in order to keep its content predictable and consistent. You can add a definition for <font> using Parchment. More details and examples on how to use Parchment is forthcoming so stay tuned and check back to https://quilljs.com then.. Thanks!. What have you tried in attempting to debug?. Thanks for the help @pronghuang !. find is a static method so it would be Quill.find not var editor = new Quill(); editor.find(). Looks like a duplicate of #633 . There are actually tradeoffs to nesting or flattening and Quill went with the simpler approach. Place your proposed HTML into a renderer. I don't think it will be the result you are expecting.. There are lots of ways to go about this. It seems like the gist of this is you are trying to add captions? What do you want your data to look like? For example, the last screenshot, if it were just a video would look like this:\n[{ insert: \"Some text here\\n\" }, { insert: { video: \"youtube.com/url\" } }]\nHow would it look with the caption?. For reference the steps for reproduction are (using Chinese keyboard input):\n\nGo to https://quilljs.com/playground\nClick on the bold \"B\" button\nType \"a\" and select 1\n\nThe <span class=\"ql-cursor\"> should not be in the editor / DOM but it is. text-change events are also not fired.. We're going to need the help of members of the community who use nw.js to help make it work with Quill. Some steps to start are 1) steps to set up a development environment 2) get the Quill test suite to run on it 3) automate testing.. What browser + OS is that in @erikreagan?. The main idea is maintaining a WeakMap of handlers and only listen once to and event and delegate to those handlers. WeakMap's properties should handle the memory leak problem for us. One issue to avoid is we cannot use the target node as the key for WeakMap since the target node may be document (as in the case of selectionchange) so we have to use something that would be garbage collected, like the quill instance or quill's emitter instance.\nStarting with just handling one event selectionchange to start simple (though this can be generalized to any event with event delegation), one implementation would be:\n\nAdd a static listeners WeakMap that will maintain a mapping of Emitter instances to event handlers.\nAdd an event listener on document with a handler that will query all ql-editor dom nodes and go through each of them checking if they have an entry in listeners and if so call the handler.\nAdd an API to an emitter instance onSelectionChange(root, handler). When it is called, add a new entry to listeners keyed by the quill.root domNode (also scroll.domNode or selection.root) with handler as the value.\n\nLet me know if this makes sense.. The main idea is maintaining a WeakMap of handlers and only listen once to and event and delegate to those handlers. WeakMap's properties should handle the memory leak problem for us. One issue to avoid is we cannot use the target node as the key for WeakMap since the target node may be document (as in the case of selectionchange) so we have to use something that would be garbage collected, like the quill instance or quill's emitter instance.\nStarting with just handling one event selectionchange to start simple (though this can be generalized to any event with event delegation), one implementation would be:\n\nAdd a static listeners WeakMap that will maintain a mapping of Emitter instances to event handlers.\nAdd an event listener on document with a handler that will query all ql-editor dom nodes and go through each of them checking if they have an entry in listeners and if so call the handler.\nAdd an API to an emitter instance onSelectionChange(root, handler). When it is called, add a new entry to listeners keyed by the quill.root domNode (also scroll.domNode or selection.root) with handler as the value.\n\nLet me know if this makes sense.. Can you let me know if you have time to try this @lustoykov ? Otherwise I will have someone else do it.. Can you let me know if you have time to try this @lustoykov ? Otherwise I will have someone else do it.. I think that should do the trick for selectionchange. I think that should do the trick for selectionchange. I'm happy to look at a PR but I can't guarantee it will be merged -- it depends on the complexity of the solution. Quill's themes provide reasonable defaults but is built to allow users to customize this and additional features and complexity may be counterproductive to users' ability to customize.. Is this still an issue? @DmitrySkripkin is correct this is why this is the behavior. . Is this still an issue? @DmitrySkripkin is correct this is why this is the behavior. . CommonJS import syntax is not unique to Quill and is pretty common knowledge.. CommonJS import syntax is not unique to Quill and is pretty common knowledge.. Can you provide minimal reproducible examples for both? I am unable to find a situation where bottom and top are 0, where the height is not also 0.. Can you provide minimal reproducible examples for both? I am unable to find a situation where bottom and top are 0, where the height is not also 0.. This modifies the API surface that would oblige Quill to do a major version bump under semver if/when it changes so I would rather figure out why the es6 import does not work.. This modifies the API surface that would oblige Quill to do a major version bump under semver if/when it changes so I would rather figure out why the es6 import does not work.. Can you include steps for reproduction, expected output, actual output and what platforms you are observing this issue on?. Can you include steps for reproduction, expected output, actual output and what platforms you are observing this issue on?. What specifically are you proposing?. What specifically are you proposing?. At present I do not see a big need for this to merit its costs. Conflict resolution itself is a rare case to hit (<1%) but the consequence is disastrous (different documents seen by different clients) in a collaborative environment. \nHere the benefit is not averting disaster, but just preserving intent in a case that is a fraction of an already rare case. When the case is hit, it is very clear what just happened to the user and very easy to remedy. Furthermore the cost of designing and implementing a new operation is high.\nThat being said if one is particularly interested in this case and would like to design and implement it, I would suggest starting with spec'ing out specifically what the new operation would be and how they would interact with existing operations and I will give feedback.. At present I do not see a big need for this to merit its costs. Conflict resolution itself is a rare case to hit (<1%) but the consequence is disastrous (different documents seen by different clients) in a collaborative environment. \nHere the benefit is not averting disaster, but just preserving intent in a case that is a fraction of an already rare case. When the case is hit, it is very clear what just happened to the user and very easy to remedy. Furthermore the cost of designing and implementing a new operation is high.\nThat being said if one is particularly interested in this case and would like to design and implement it, I would suggest starting with spec'ing out specifically what the new operation would be and how they would interact with existing operations and I will give feedback.. Thanks for the help @DawidLoubser !. The function does not return a promise. There are many generalized approaches to turn a synchronized function to an asynchronous one or to \"promisify\" a function but they are not specific to Quill.. Text direction is a block level format so you need to have attributes on the newline character. If this was not the case [{ insert: \"Hel\", attributes: { direction: \"ltr\" }}, { insert: \"lo\", attributes: { direction: \"rtl\" }}] would be ambiguous.\nIf you are interested more details are here: https://quilljs.com/guides/designing-the-delta-format/#line-formatting. If you go from largeChunkOfContentA -> largeChunkOfContentB, one diff will be generated and emitted to text-change. This diff could be expensive.\nIf you go from largeChunkOfContentA -> \"\", this diff is trivial. Then going from \"\" -> largeChunkOfContentB is also a trivial diff.. If you go from largeChunkOfContentA -> largeChunkOfContentB, one diff will be generated and emitted to text-change. This diff could be expensive.\nIf you go from largeChunkOfContentA -> \"\", this diff is trivial. Then going from \"\" -> largeChunkOfContentB is also a trivial diff.. I mean you can do setContents([]) if you'd like. Like I said the performance difference is rooted in the diff. When you do setContents([]) and then setContents(bigDelta) you avoid this big calculation.. I mean you can do setContents([]) if you'd like. Like I said the performance difference is rooted in the diff. When you do setContents([]) and then setContents(bigDelta) you avoid this big calculation.. To answer the question about overriding, you can customize the keyboard shortcuts or supply a custom module. However I also made a change so that you can undo the automatic conversion. Just type \"- 50%\" and then control+z to undo.. To answer the question about overriding, you can customize the keyboard shortcuts or supply a custom module. However I also made a change so that you can undo the automatic conversion. Just type \"- 50%\" and then control+z to undo.. Not sure why Github did not link the commit: https://github.com/quilljs/quill/commit/7c7235e8c7d2005f764ba76542e63957d36719b7. Not sure why Github did not link the commit: https://github.com/quilljs/quill/commit/7c7235e8c7d2005f764ba76542e63957d36719b7. This looks like a duplicate of #849 so try disabling all Chrome extensions. Also Quill only supports the latest two versions of Chrome so 55 is no longer supported.. This looks like a duplicate of #849 so try disabling all Chrome extensions. Also Quill only supports the latest two versions of Chrome so 55 is no longer supported.. Not sure about solutions yet but looked into the cause. When the dropdown picker is clicked, focus changes to it so the last selection is saved, represented by an index and length. There's currently one Text DOM node with value \"this test\" and this is modified when insertText is called. Since the DOM node changed, the native selection is lost too. So when Large is finally clicked the best we have is the last saved selection which now has an outdated index and length.. Not sure about solutions yet but looked into the cause. When the dropdown picker is clicked, focus changes to it so the last selection is saved, represented by an index and length. There's currently one Text DOM node with value \"this test\" and this is modified when insertText is called. Since the DOM node changed, the native selection is lost too. So when Large is finally clicked the best we have is the last saved selection which now has an outdated index and length.. Please include the specific browser + OS and the version of Quill.. Please include the specific browser + OS and the version of Quill.. Can you have it depend on https://github.com/github/pages-gem instead? We don't get to choose which version of Jekyll to use -- Github does.. Can you have it depend on https://github.com/github/pages-gem instead? We don't get to choose which version of Jekyll to use -- Github does.. Thanks! Agree on the repeatable developer environment https://github.com/quilljs/quill/commit/e5fbc3aa5153c43d35d38e622bcf010e41f7492e. Thanks! Agree on the repeatable developer environment https://github.com/quilljs/quill/commit/e5fbc3aa5153c43d35d38e622bcf010e41f7492e. It should work. Can you post a MCVE. Otherwise it's hard to say what is going wrong.. It should work. Can you post a MCVE. Otherwise it's hard to say what is going wrong.. What version of IE 11 are you using? I'm not seeing what you are seeing in the screencasts for Quill or Froala.. What version of IE 11 are you using? I'm not seeing what you are seeing in the screencasts for Quill or Froala.. Overwriting function definitions is not particularly safe. I would suggest creating your own Link blot, possibly by inheriting from Quill's and overwriting whatever you want in the inherited class.. Overwriting function definitions is not particularly safe. I would suggest creating your own Link blot, possibly by inheriting from Quill's and overwriting whatever you want in the inherited class.. Quill does not allow arbitrary HTML. It enforces a consistent unambiguous subset so you don't get stuff like:\nhtml\n<div>\n  <div>\n    <strong>Hello</strong><span></span><b>World</b>\n  </div>\n  <p><br></p>\n</div>\nIf you need exactly your HTML to show up then your option is really contenteditable. It is as error-prone as it is because of how inconsistent and ambiguous HTML is. Otherwise Quill has dangerouslyPasteHTML.. Quill does not allow arbitrary HTML. It enforces a consistent unambiguous subset so you don't get stuff like:\nhtml\n<div>\n  <div>\n    <strong>Hello</strong><span></span><b>World</b>\n  </div>\n  <p><br></p>\n</div>\nIf you need exactly your HTML to show up then your option is really contenteditable. It is as error-prone as it is because of how inconsistent and ambiguous HTML is. Otherwise Quill has dangerouslyPasteHTML.. Not sure about the solution yet but the reason this happens is because when there is a range of text, some bold some not, clicking \"B\" should bold the entire range. Only in the case where the entire range is bolded, does clicking \"B\" unbold the range. This UX is consistent with most editors like Word or Docs.\nThe issue comes in because code cannot be bolded. So it will never be the case where the is a range where code is involved and unbolding will work.. Not sure about the solution yet but the reason this happens is because when there is a range of text, some bold some not, clicking \"B\" should bold the entire range. Only in the case where the entire range is bolded, does clicking \"B\" unbold the range. This UX is consistent with most editors like Word or Docs.\nThe issue comes in because code cannot be bolded. So it will never be the case where the is a range where code is involved and unbolding will work.. If I have \"Hello world\" and highlight both words and click B, I expect \"world\" to be bolded. If I click B again, I expect both Hello and world to be unbolded. As I mentioned this is the behavior of Word and Docs.. If I have \"Hello world\" and highlight both words and click B, I expect \"world\" to be bolded. If I click B again, I expect both Hello and world to be unbolded. As I mentioned this is the behavior of Word and Docs.. I'm not able to edit the content from that codepen. Steps for reproduction would be helpful here.. I'm not able to edit the content from that codepen. Steps for reproduction would be helpful here.. The approach I would recommend is most similar to @nitaskenderi 's suggestion which is to create your own Image blot. Quill's default one is inline so inherits from a normal Embed, not a BlockEmbed, but you can use the latter if you want an image to take up the whole line. You can then choose in your implementation if you want to whitelist or not. I would strongly recommend whitelisting however as it keeps the content and thus user experience consistent and predictable.. Seems like a duplicate of #945 . Your input is not valid since it has a retain in it. When setting contents you are going from nothing to the contents you specify. Retain means keep text but there is nothing to keep since you are starting from nothing. How the retain is getting there is what you have to track down in your application code.. @calibr is correct -- the empty document in Quill is a newline. \n\nPut a quill.on('text-change', (delta, oldDelta, source) => { console.log(delta) })\nin your console and watch the outputs, you'll have:\n\nI'm not sure by this if you are saying the output is incorrect. If so then there may also be a misunderstanding between using Deltas to represent change and to represent state. The output pasted from the result of console.log(delta) is the expected and correct output.. new Delta([{\"retain\":1},{\"retain\":1,\"attributes\":{\"header\":1}}]) is not equal to new Delta([{\"retain\":1,\"attributes\":{\"header\":1}}]). The helpful link @calibr posted will explain the difference.. At the time of initialization (when new Quill... is called) chord and play look like buttons but have no handlers, hence the warning. Quill does not know that in the future you will attached handlers. To avoid this you can add handlers to the toolbar config like in the example 'formula': customFormulaHandler.. Assuming the edit means we can close this.... #1472 . The bubble link tooltip is currently a display only tooltip. If you'd like to help add link navigation functionality, taking a look at how it's implemented in themes/bubble.js and assets/bubble.styl is a good place to start.. It is far easier to spend other people's time than one's own. I have my own list of priorities for Quill and as an open source project it can only be sustainable if people work on the things that matter for their use cases. You are correct I do not agree with 2) as I think users should be able to click in the middle of a link to edit it. The difference between a bug and feature often depends on one's perspective of what is acceptable and/or urgent. Again I have made my own determination but it sounds like this is not that important for you either.\n. Please fill out the Issue Template you were presented with when the \"New Issue\" button was clicked. It is otherwise very hard to figure out what is being talked about.. The word \"responsive\" carries particular meaning in web development, which I don't think is what you are talking about here. This is specifically about the CSS resize feature.. Can you be explicit in the steps for reproduction and expected and actual behavior? Ex. Place cursor on this specific word, select left 5 characters, etc. \nThe issue right now is I get the general impression the demo code doesn't really work but at the same time I'm not sure what it's supposed to do and if Quill is supposed to just handle these cases for your demo and what that would even mean.. Thank you for the clarification. I believe what is happening is Quill's selection implementation does not have the concept of forwards or backwards. When Quill modifies the DOM it will save and restore the selection but always in the forward direction. This would explain why dragging forwards in this example works just fine but backwards does not.\nI'm not sure supporting backwards selections is a complexity I want to introduce into Quill core at the moment so the suggestion I would make is handle the save and restore of the selection in your application using native selection APIs. If you'd like feel free to create a separate feature request issue to support backwards selection ranges. If enough support and use cases are gathered from the community Quill may reconsider official core support.. You're also changing the overflow behavior in CSS which is conflating. I assume it's to get Quill to autogrow? There's a specific way to do that as seen in this example. If there's some other reason, please clarify.. Can you not just add the extra scrollingContainer div in your application? What's the use case in requiring body to be the scroller?. This is not presently a feature of Quill. If you'd like to help add a good place to start looking is how the current pickers work in ui/.. Delta is a dependency of Quill and included with the library. However if you have a build pipeline you probably still want to do the standard CommonJS import:\njs\nimport Delta from 'quill-delta';\nbut if you are just in the browser environment Quill also supplies an import method:\njs\nvar Delta = Quill.import('delta');\nYou are right the paste is not passing to the editor because of the thrown error.. Kind of hard to become interoperable across all browsers and frameworks through Web Components when the browsers themselves have not even implemented it. I see you posted a comment in the main PR for web components. It would be more productive to help than just open a duplicate to complain.. I think you want getFormat()? If not please provide an explicit example. Not sure what you mean by \"blot[] be related to an ops[]\" either. Multiple blots may be responsible for a single ops item.. Thanks!. Not sure what is causing it but I would look at modules/keyboard.js to see if the enter handlers there is inserting. Otherwise you look at API entry points for change such as insertText or updateContents to see if they are being used by something else to create the newline and trace the call stack.\nIn general the list implementation (formats/list.js) is where I would look for a similar implementation to model after.\nMore docs for Parchment, especially deeper customization, is planned but takes me a long time to write.. There is not. The homepage https://quilljs.com approximates this by just creating multiple editors and syncing the content. Take a look at that through your favorite browser inspecting tool or the code in the docs/ folder.. Can you check what HTML is being copied? All Quill can potentially control is what it outputs, not how Notepad or any other application interprets that.. What HTML is being copied from Chrome? It does not appear Chrome has this issue.. This is fixed with the fix from #1873 https://github.com/quilljs/quill/commit/fa99fa09981248ebe502be5c0f188ba2c100b94a for font family. The expected case for text indent is replace with a tab character, which it already does.. You're probably going to need to look into Parchment. Beyond that this project Issues is for bug reports and feature request, not to get personal assistance from the maintainers on closed use cases. You may have more luck with the community with a MCVE.. Can you specify exactly what should be dragged and where it should be dropped in step 2? I'm not getting the classes to update at all.. When I try to drag a selection of text, the selection just changes. I tried with an image though onto a textarea though with no Quill involvement: https://jsfiddle.net/0718fzou/. The forbid-cursor class is added but the cursor rendering does not change either so unclear if there is an issue with a lower layer or the example code.\nI am using Firefox on Mac instead of the stated Firefox on Ubuntu.. From the docs for text-change:\n\nChanges to text may cause changes to the selection (ex. typing advances the cursor), however during the text-change handler, the selection is not yet up updated, and native browser behavior may place it in an inconsistent state. Use selection-change or editor-change for reliable selection updates.. You may have more luck on help by following the suggestions in the issue template when you clicked \"New Issue\". At present, this Issue does not describe what you are trying to do and why and instead dumps a bunch of code (most appearing to be irrelevant to the issue itself) and says it doesn't work.. Can you try with the latest versions of Chrome 58 or 59? Version 43 is quite old an no longer supported.. Check out https://github.com/surmon-china/vue-quill-editor, the current top Google search result for \"vue quill\" ... . It is entirely reasonable two independent and complex libraries don't \"just work\" with each other out of the box in the precise way you assume. It may be the case a separate library is not required but someone has already done the hard work of making it easy. It only has 5 open issues for a 700+ star project so unclear about the numerous blocking issues comment. I'm sorry that's not enough for you, but if you want to make it even easier, feel free to contribute.. If I understand correctly the issue is:\n\n\nThe application calls quill.getBounds()\nAt that moment in time, the height of the bounds is ~15px, which Quill returns as the height\nThe application saves / uses this value\nThe embed changes its height\n\nIs this correct?. I'm not clear on how this list is different from except your steps 1-3 sets up for 4 which is where my list's 1 starts.\nThe point is though at the moment the application calls quill.getBounds() the dimensions are correct. Quill cannot \"know\" this value will change and even if it could there is no way to inform the application. Without this latter part what you are suggesting with the Blot-implementation is not enough because it will never get to your application which would need to reposition the sidebar.\nThe suggestion I would make is for your application to listen on when the image is loaded and call getBounds then.. No I would let the image be added normally but just add a DOM onload handler to it. It could get complex finding the Blot then image domNode so you could use event delegation like so:\ndocument.body.addEventListener('load', function(e) {\n  if (e.target.tagName === 'IMG') {\n    // an image has loaded\n  }\n}, true);\nIf it were my application I would probably just add a 1 second timeout before calling getBounds since the ratio of effectiveness to effort is very high.. Thanks!. InlineEmbed was just added and still somewhat experimental. Since imports is a documented Quill API, if it is added it cannot be removed without a major version bump since Quill follows semantic versioning. I'd like to give it some more time before this. . This is a duplicate of #879.. Hmm well the whole line is if (range && context) context.range = range; so it's not possible for context to not be defined. Maybe sourcemaps is pointing to the wrong line?. Okay makes sense -- can you post a stack trace? The context should always be provided and is defaulted to {} at a higher layer so the issue would be that is not being passed on somewhere.. Thanks for the stack trace @edisonator . Unfortunately the line numbers do not correspond to source so I'm not going to be able to track things down with it. Not sure where eval is coming from either since Parchment does not call eval.\nThe steps for reproduction are also not reproducible for me.. Yes trying to get a few other bugs in but will release this weekend.. Thanks!. Thanks!. Thanks!. Thanks!. First an Inline blot is distinct from an Embed blot. You are using the name Inline here but importing from 'blots/embed'. I think what you want is Embed. I'm working on a couple guides that should shed some light on this but in the meantime take a look at formats/image.js and formats/video.js on how they implement formatting.. The main issue is you cannot add arbitrary HTML to Quill, either classes, styles or anything else. Quill will eventually strip or possibly some other undefined behavior as it tries to make sense of the content. All tags, attributes and styles must be defined and registered so Quill can do its job of being a consistent, predictable editor, with its granular API. Most common formatting options already have this defined but I don't know what CustomQuill is so maybe it's defining them but maybe not. You can add custom definitions through Parchment. A guide to get started is: https://quilljs.com/guides/cloning-medium-with-parchment/. Thanks!. What have you tried?. Yes Quill needs the DOM to work. There are too many places where Quill references document that it would be silly to guard against for an environment (server node) it is not built for.. There is not a way to disable that specifically but you can attach a handler in the constructor of your custom blot so its gets called first (and then not propagate).. But your event handler should be called first as it is lower in the DOM tree.. Please take a look at the Contributing Guide for Pull Requests. A few immediate issues:\n\nQuill does not use jQuery\nNo discussion was had nor agreed upon for changing the API interface\nThere are no tests. This is a built in browser feature. From this SO post, you can do:\n\njs\nvar quill = new Quill(container);\nquill.root.spellcheck = false;\nquill.root.focus();\nquill.root.blur();. Can you elaborate on the custom footer/header? We are not planning to add page break indicators.. Glad you are able to solve it externally and it does seem like the right approach. Quill will lack some features a full word processor like Word has and it is not a goal to fill them all. Which ones to include or not is on a case by case basis but this one specifically sounds like it would be better handled in the application rather than the core editor like you are doing.. I'll have to scope out the work but if this were added I think it would also have to change getSelection and on('selection-change') to report negative lengths if the range is backwards.. This is not a Quill specific issue. Please use CSS.. What browser are you using? The native Android browser or Chrome or Firefox?. InlineEmbed is combined into a normal embed now in 1.3.1 so you should be able to just use that.. Thanks!. Thanks!. Thanks!. Quill follows semantic versioning which is very clear in how version numbers change and the changelog exists as commentary to this. Semver covers documented API surfaces, not internal code which Quill is free to reorganize, refactor or reimplement. Please show how usage of a documented API broke from 1.3.0 to 1.3.1 and I can reopen.. I did not claim to do whatever I like. I do claim that I followed SemVer and it did not obligue me to note changes to internally undocumented code.. @maximeozenne I think the issue is Quill's editor uses <p> tags to be more semantic but by default <p> tags have margin. Quill gets rid of this with css but if you display the same HTML outside of Quill then you will get the margin as that is the browser default. A couple ways to solve this are:\n\nAdd the margin: 0 rule to <p> in your application.\nAdd a the .ql-editor class to the container you are using to render Quill contents so its CSS will apply to it.\n\n\nYou can't nest block level element within block level elements in quill.js, it's one of its biggest gotchas, effects most people that try to extend it.\n\nI acknowledge documentation could be better on how to do this but it is not true Quill does not have this capability. Lists which nest two block level elements <ul> and <li> are a counterexample that works perfectly well in Quill.. In those cases do you want the option to make it left-to-right, or would you prefer it always be right-to-left?. Every line of code is a liability, so each must justify their existence. As you say Quill does not support these browsers so this is outside its scope of responsibility. If future browsers change their APIs, Quill will update accordingly. Your application of course can define its scope more loosely and include a check.. Please include the information the issue template asked for. The issue template was designed so others can get enough context to be helpful so you might in turn get a helpful response.. Currently it is one or the other: You can either supply a custom toolbar and build it yourself (selector option) or you can let Quill build it. The latter is controlled by the theme so snow will build it into the persistent toolbar above the editor and bubble will build it into a tooltip.. It's not clear why this is needed. Please refer to the PR guide and follow its requirements.. Think this is similar to #1654 and also fixed by https://github.com/quilljs/quill/commit/57d26fc3f68e5c8eb7234fcd5cb70dbe8d795750. I think this is a great idea. Just getting back from an overseas trip and going through issues but I will get a repo set up soon. Please comment with additional awesome quill repos in the meantime. Thank you for the markdown module too!. Thanks for the help @DmitrySkripkin !. Thanks for looking into the cause @HWliao !. Quill does not allow arbitrary HTML so it may change or strip markup. As stated in the docs for dangerouslyPasteHTML:\n\nThe snippet is interpreted by Clipboard matchers, which may not produce the exactly input HTML.. Quill itself does not allow arbitrary HTML by design. It it not safe from a bug free and user experience perspective, not just a security one. Vanilla contenteditable and previous generation of rich text editors earned their notoriety because of this and part of the reason Quill was born. If you nevertheless prefer the flexibility of arbitrary HTML modifications, other editors with this support still exist.\n\nIf you accept this part then the matchers are just obliging at the paste layer what Quill's underlying data model wants which is a consistent deterministic markup. You can make deep customizations to the data model through Parchment and this guide is a good place to start but this is not just at the paste layer.. This has been fixed in https://github.com/quilljs/quill/commit/9bc217ff725504e2762b8bffda51b0a2960ffb43 and will go out in the next release. Thanks for the report!. Merging with #1397. > I still don't think the issue I run into with blockquote is by design?\nWhy?. The CodeBlock import is unused so thanks for spotting that. I'm not clear why the stopPropagation() is there. Some light testing does not reveal any issues removing it so I will merge this but if issues are surfaced that may have to be added back just FYI.. Duplicate #1891. Don't make your Embed contenteditable=false. The native embed already does and this is interfering with a fix the Embed has built in for this issue.. You can just call setSelection after insertEmbed. What's the use case and what is the attributor approach you already tried?. Whether or not something is useful depends on the problems and use cases it solves. Referencing a header or comment via table of contents or a url hash does make sense. The primary algorithm for realtime collaboration (operational transform) is actually index based so ids will not help here.\nDo you need these ids to be persisted? Or just generate them for example from the header text?. The reason the ql-cursor is there is to control the formatting of the next character you type. Browsers do not consistently allow selection around empty text so there has to be a real character so we chose a zero width space character. As already said this is not a bug and we recommend using getContent and Deltas but if you want to sanitize raw HTML it's your application and codebase.. It was a bit experimental in the first place and it introduced more issues than it is worth. I may re-introduce it in the future if it's use is more clear to avoid ongoing maintenance cost and complexity if it is not.\nI'm always happy to see Quill used in real products feel free to send an email jhchen7@gmail.com. Good catch @sferoze! I did not notice the unfocused case when merging. Can you submit a PR?. What is your suggestion? I would like the file input to open for usability reasons.. If you are talking about the source code Quill is clearly hosted on Github like most other packages. If not please clarify.. I agree with benbro. You can create an embed blot with whatever structure you want so going off attempt 1 you can do: https://codepen.io/quill/pen/OxbqbQ. Then not sure what CSS things you had in mind.\n. Then the default values need to be changed in Quill as well. Take a look at how this is done for fonts and the same technique can be applied to colors.. code is the inline code format, you want to do code-block.. Yes I suppose any device with an external keyboard would have this. Let's go with the mousedown then?. Adding your code into the playground works for me: https://codepen.io/anon/pen/LzgJpv. Select-all and paste works as expected (not losing the block format).. This appears to be a codepen issue: https://codepen.io/quill/pen/QqGYXr. I'll file a support ticket with them.. Cool thanks for taking a look @alexkrolick !. They've been added in the assets/ folder now as well.. There are many more icons in the folder than are by default exposed in icons.js and thus included in the build size. Where the line is is a subjective call I made; those with differing preferences can customize their own build.. Hey @guillaumepotier thanks for the PR! There is a lot of code to just detect a block embed and it also involves marking. Second it does not fix the issue for inline embeds. Is there a simpler way to address the root problem?. No you definitely do not need to duplicate content across StackOverflow and Issues.. This issue specifically is caused by the same thing as #1752 so I'll close this as a duplicate.\nTo answer @LFDM's question: Quill makes use of this itself when it initializes wraps HTML in a <div class='ql-editor' style=\"white-space: normal;\"> (see core/quill.js). So if you want to preserve whitespace set it to 'pre' which you can see from the if block from the code you pasted is what it is checking for. You may want to see if react-quill wants to accept a PR using this technique.. I don't think this should be core Quill behavior but you can overwrite the indent key binding to check the previous indent level and not apply in your case. Ex.\n```js\nvar quill = new Quill('#editor-container', {\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline'],\n      [{list: 'ordered'}]\n    ],\n    keyboard: {\n      bindings: {\n        indent: {\n          key: 9,\n          format: ['blockquote', 'indent', 'list'],\n          handler: function(range, context) {\n            // check indent level\n            // this.quill.format('indent', '+1', Quill.sources.USER);\n          }\n        },\n      }\n    }\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow'  // or 'bubble'\n});\n```. The Delta always describes a change to the whole document so the start and end indexes for a particular operation is implicit. Ex. In your example of \"start idx\": 3 is redundant as the retain in front of it specifies this. There is a lot of information in Delta and Designing the Delta Format for what and why so I will not repeat here.. The demo only shows the last change and the keyboard autocomplete performs two operations, the last being inserting a space. If you modify the code to show all changes you will see the insert \"ke\" is being emitted as well.. Thanks!. The expected behavior is when an list is broken up the numbering restarts at 1. which is what the gif is showing. I'm a bit confused though since in your Actual Result says it continues numbering of the items, which is not what it does. It restarts numbering which is what is expected.. What does created on air mean? Is this Adobe Air? It works fine on Mac + Firefox.. @jackmaw In your example you are not including the required Quill stylesheet: https://quilljs.com/docs/quickstart/. If you add it all will be well.. Forgot to close this issue as the solution was to include the required core quill styles. I would not recommend cherry-picking just the white-space rule as you may have other issues. The quill.core.css file includes the minimal styles Quill recommends for normal usage.. The difference between selected and getAttribute is precisely why it was changed -- to fix the bug that was reported. The expected and actual behavior reported here are not actually behaviors. Please provided the necessary details and we can re-evaluate.. @jxmai I think you are trying to be helpful, but your data dump of text and screenshots is anything but. I think the disconnect is what you think is a behavior I think is an implementation detail. In Alex's report he provided the user facing issue and connected the dots to implementation, which led to a merged PR.\nWhat I need from you is why getAttribute('selected') is a problem for the user. I understand the difference between a property and attribute -- I need to know why it is wrongly used as is your claim.\nSo I will ask again for expected and actual behaviors, not implementation details. You are also missing the steps for reproduction and a coherent description of the problem (again not implementation details), which is actually 60% of what we ask for in our Contributing Guide.. I think this is a case of the last paragraph in text-change that the selection does not update before the text does.. The events are working as designed based on information supplied.\nThe editor-change event is just a combination of text and selection change. So what is meant by \"Use selection-change or editor-change for reliable selection updates\" is that you should look at the selection-change events inside of editor-change. It does not change text-change's behavior.\nThe simple workaround is wrap your handler with a setTimeout or _.defer.\n\nDo you think it would be possible to change the lifecycle\n\nAnything is possible given enough benefit. Text changes can cause selection changes so it would make sense for it to get fired first. Quill has a modular architecture so the selection and editor modules has limited control over one another. So I'm not sure I'm sold yet on why this is the right move.. I'd prefer not to support additional UI inputs. Thanks for the PR though.. Running on both quilljs.com and google.com results in < 5ms being reported on Chrome. Maybe the platform matters?. Not 100% what this is asking but pretty sure the toolbar already allows this: https://quilljs.com/docs/modules/toolbar/. Please fill out the issue template as requested including your platform and detailed steps for reproduction: https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. Yes tests would be very helpful -- some of the logic does not look right (for example the logic for detecting range reversal) and tests would be a quick way to be able to iterate. I would also suggest taking a look at https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition. I re-ran the tests that were timing out. I re-ran the tests that were timing out. Thanks for your PR. Unless there is an automated way to update the README the version number will often be out of date given how often releases happen. Updating these numbers manually is not something I want to add to my list of deployment chores. If they are not to be updated automatically I would prefer they stay just 1.0.0 to make it more suggestive there might be a later version.. I don't think the benefits are worth the implementation complexity involved. At least one big design assumption Quill build on that would need to be addressed is block level elements cannot mix with inline. But if you have nested lists you can have <ul><li>One<ul><li>Two</li></ul></li></ul>. In many cases there are drawbacks as well such as not easily being able to tell how many items are in the nested list so overall the net benefits are even smaller.. allowedChildren is not meant to correct invalid input. To do what it sounds like you guys want you would extend Header/Blockquote and modify insertAt to not do anything if given an image.\n```js\nvar BaseHeader = Quill.import('formats/header');\nclass Header extends BaseHeader {\n  insertAt(index, value, embedValue) {\n    if (value === 'image' && embedValue) return;\n    super.insertAt(index, value);\n  }\n}\nQuill.register(Header, true);\n```\nFull example: https://codepen.io/quill/pen/vpPXVR. allowedChildren is not meant to correct invalid input. To do what it sounds like you guys want you would extend Header/Blockquote and modify insertAt to not do anything if given an image.\n```js\nvar BaseHeader = Quill.import('formats/header');\nclass Header extends BaseHeader {\n  insertAt(index, value, embedValue) {\n    if (value === 'image' && embedValue) return;\n    super.insertAt(index, value);\n  }\n}\nQuill.register(Header, true);\n```\nFull example: https://codepen.io/quill/pen/vpPXVR. This addition seems to specific to a particular use case and not information dense enough for the general viewer for that guide.\nPlease feel free to post this on your own blog or website however if you want to help save others time.. This addition seems to specific to a particular use case and not information dense enough for the general viewer for that guide.\nPlease feel free to post this on your own blog or website however if you want to help save others time.. Please follow the contributing guide: https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. No and I'm not sure this makes sense.. It reports what has already changed so there is only on right change to describe what happened.. The code block's current implementation does not follow usual patterns so I would not suggest extending it unless you have really dug into Parchment.. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. Sounds reasonable thanks!. Sounds reasonable thanks!. Besides changing 'image' to ['image'], the example code you posted is working for me: https://codepen.io/quill/pen/xPbbyB. Quill does change urls to //:0 if it fails sanitization but your example 'apple.jpg' does not. You can change the sanitization logic if you want to but do consider security in your own function.\njs\nvar Image = Quill.import('formats/image');\nImage.sanitize = function(url) {\n  return url; // You can modify the URL here\n};. Have not heard of this before so feel free to take it on. A PR would be welcome thanks!. Some general thoughts:\nI would like to see some tests to guide this development. There are lots of ways to implement this but there's no point in debating the best way without a starting point of what even works.\nSecond we cannot use any features IE11 does not support (like Set) which is why the emitter was implemented the way it is.. Which comments require my response?. Which comments require my response?. Sorry from your comment I thought you were going to think about it some more and come back and it is tricky to solve both needs. But to answer your followup no it is not okay to use the memory leaky EMITTERS array. A huge portion of users use Quill in a single page app where memory leaks are a big concern. There are some Github Issues on the subject of SPAs and memory leaks if you want more details.. Sorry from your comment I thought you were going to think about it some more and come back and it is tricky to solve both needs. But to answer your followup no it is not okay to use the memory leaky EMITTERS array. A huge portion of users use Quill in a single page app where memory leaks are a big concern. There are some Github Issues on the subject of SPAs and memory leaks if you want more details.. So no Firefox support and major issue in Safari (though Webkit is used by Chrome too?). Is Chrome the only browser ready for this?. So no Firefox support and major issue in Safari (though Webkit is used by Chrome too?). Is Chrome the only browser ready for this?. So following this guide the access-control-allow-origin header is now working: \ncurl -sI -H \"Origin: example.com\" -H \"Access-Control-Request-Method: GET\" https://cdn.quilljs.com/1.3.3/quill.js\nHTTP/2 200 \ncontent-type: application/javascript; charset=utf-8\ncontent-length: 431275\ndate: Mon, 06 Nov 2017 01:01:06 GMT\naccess-control-allow-origin: *\naccess-control-allow-methods: GET\naccess-control-max-age: 3000\nlast-modified: Mon, 09 Oct 2017 06:02:29 GMT\netag: \"b9ca33663edf213fab5ad1ab191badf4\"\ncache-control: max-age=604800\naccept-ranges: bytes\nserver: AmazonS3\nvary: Accept-Encoding\nx-cache: Miss from cloudfront\nvia: 1.1 23172d761378a3865feafcda78328053.cloudfront.net (CloudFront)\nx-amz-cf-id: 1HYRkSEGw0RbSdeN72rI146jq_yqc-zuj4BYkdy_Rq7bIzFn_iNd2g==\nNote from the guide:\n\nTurns out, for a really complicated reason, you can't simply hit a URL in your S3 bucket from within your browser and check the \"Network\" tab in your dev tools. That would be too easy. No, you need to ensure that you specify certain extra headers in your request. Now, it turns out that browsers send this with CORS requests anyway, so you are covered in the real-world, but it's crazy that the dev-experience for the common case isn't what you'd expect. You could use a tool like curl to specify the additional headers needed for a \"correct\" CORS request. Yes a PR would be very helpful. I think the right place to change is the regex and switch statement in https://github.com/quilljs/quill/blob/d21db45f66245a55f6b8cafc1110823a351c4fd5/modules/keyboard.js#L249 and as long as the other autofills still works should be good thanks!. Please see my response in the issue and provide the necessary details.. Please see my response in the issue and provide the necessary details.. The purpose of the handler was to make new checklist items unchecked, but the logic was losing the indent.. The purpose of the handler was to make new checklist items unchecked, but the logic was losing the indent.. Yes looks like sauce labs failed to start Safari even with three tries. One stylistic change request: Can you do case '-': case '*': similar to how the checklist works (a few lines above)?. Yes looks like sauce labs failed to start Safari even with three tries. One stylistic change request: Can you do case '-': case '*': similar to how the checklist works (a few lines above)?. Great thanks!. Great thanks!. You can also setContents([]) and setText('') which will clear the text. Internally Quill's data model requires at least \\n so this will be added for you.. You can also setContents([]) and setText('') which will clear the text. Internally Quill's data model requires at least \\n so this will be added for you.. Thanks for digging in @jacwright. Quill does try to patch some broken browser behavior but since first-letter styling is not a common use in my experience this is not a priority bug. I will close as suggested so people are not waiting/expecting a fix as it's quite unlikely given the priority and volume of other tasks.. Thanks for digging in @jacwright. Quill does try to patch some broken browser behavior but since first-letter styling is not a common use in my experience this is not a priority bug. I will close as suggested so people are not waiting/expecting a fix as it's quite unlikely given the priority and volume of other tasks.. Did you stumble across https://github.com/quilljs/parchment#attributors? It lists not just one example but every example for each type of attributor you can add so not sure what additions your example includes.. Did you stumble across https://github.com/quilljs/parchment#attributors? It lists not just one example but every example for each type of attributor you can add so not sure what additions your example includes.. The major challenge is that the documentation is it applied to a broad audience. You happened to pick the worst case of your own contrived example. If I optimized the docs for one person I could easily make that one step. In this case if that person was you, I would remove the info about styles and classes, blots, etc. That of course is not globally optimal since there are many people that actually care about vanilla CSS customization or thought they wanted something more complicated like attributors, but after reading that section conclude the simpler approach is better. \n\nI have a hard time taking your complaint seriously when you sprinkle in falsehoods like number 8 and for this reason I am no longer interested in continuing this conversation. Nowhere in the associated link does Quill talk about Typescript; Quill is written in Javascript and does not claim to supply Typescript type definitions. If you are talking about DefinitelyTyped, that project has no affiliation with Quill and contributions are community driven.. It's logging for me. What browser / os are you using? This is why we ask in the issue template.. It's logging for me. What browser / os are you using? This is why we ask in the issue template.. Can you just do import { BubbleTooltip } from 'quill/themes/bubble.js'; in your project? The tooltips are an internal implementation detail and I would like to keep it that way for flexibility.. Can you just do import { BubbleTooltip } from 'quill/themes/bubble.js'; in your project? The tooltips are an internal implementation detail and I would like to keep it that way for flexibility.. There are configurations webpack supports that works around the svg issue. I believe that is your best path if that was the blocker. All this PR does is increase the API surface so if you were trying to build Quill this PR would not solve your problem so I'm assuming you intended to use the prebuilt quill files which I would suggest just looking into webpack to get the build to do what you want instead of having the entire project's build and API surface be affected.. Yes the image format is just using document.createElement so the doctype is controlling for tag closing, which quilljs.com specifies as html5. Thanks!. I think you have the wrong open source project.. Doesn't look deprecated to me: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u. The way to safely add customization to Quill's contents is through Parchment. I would suggest looking at the attributors section.. There's a long list of potential protocols so I would rather Quill support just a few common ones and allow the end user to modify.\njs\nvar Image = Quill.import('formats/image');\nImage.match = function(url) { /* ... */ };\nImage.sanitize = function(url) { /* ... */ };. There's a long list of potential protocols so I would rather Quill support just a few common ones and allow the end user to modify.\njs\nvar Image = Quill.import('formats/image');\nImage.match = function(url) { /* ... */ };\nImage.sanitize = function(url) { /* ... */ };. Thanks!. I see this is cross posted in StackOverflow which I have commented on. Please do not cross post in the future.. This is very consistently working for me https://codepen.io/quill/pen/baByrd. Please clarify your expected and actual results too.. Yes this issue is triple clicking selects the newline character after the link as well so it does not match the email regex. You can overwrite this behavior or any toolbar handler with https://quilljs.com/docs/modules/toolbar/#handlers but I don't think Quill's tooltip should be modifying the range based on content context so I do not think Quill should be mitigating this UX in core.. Post initialization changes to the toolbar is not a supported feature. If you would like to request it can you provide suggestions on what the API would look like?. @guilhemwishibam By specifying matchers: [] you are losing all the defaults. The expected output is <img src=\"https://img.jpg\" width=\"600\" height=\"200\"> if you use the default configuration.\n@freitasskeeled Quill does not allow arbitrary HTML in its contents as it is not safe from a user experience or bug free perspective. Allowing arbitrary HTML is why the previous generation of rich text editors gained their notoriety for bugginess and why Quill was built and became popular. Quill does provide a way for to safely paste new content through its Clipboard APIs: https://quilljs.com/docs/modules/clipboard. If you find this too onerous and would rather risk the occasional bugs, other said editors still exist and are also open source.. @freitasskeeled No this is not possible. I'm not talking about safety from a security perspective -- I'm talking about safely from a bug free perspective. Browsers decide to do very peculiar things with the most innocuous modifications.. Seems like Firefox native behavior to select the contenteditable=false node. I do not think this is necessarily wrong behavior (actually I would think this is desired sometimes) so I would not consider this a bug. If you would like to prevent it one way is in create add an event listener for mousedown and cancel it:\n```js\n  static create ({ _id, _type }) {\n    const node = super.create()\nnode.setAttribute('_id', _id)\nnode.setAttribute('_type', _type)\nnode.setAttribute('data-blot', true)\n\nnode.setAttribute('contenteditable', false)\nnode.addEventListener('mousedown', (e) => {\n  e.preventDefault();\n})\n\nreturn node\n\n}\n```. Also want to point out this is on the 2.0 Roadmap. Sorry for the delay -- thanks for the fix!. I think it is more accurate to say the browser locks up but it looks like it affects vanilla contenteditable: \n\nVisit https://jsfiddle.net/vtqjxm1r/.\nPlace cursor right after first image\nHit option+arrowleft\n\nThe image / base64 image does not appear to be a factor: https://jsfiddle.net/k1ssqq70/1/. It does appear to require all three images and the leading space precisely to reproduce though. It may be possible to detect this shortcut in Quill and preventDefault to circumvent.. Yes agreed. Are you just disabling the shortcut or re-implementing the effects of option+left arrow?. Great thanks -- would you be willing to share the code for the keyboard shortcut handler? Also you mentioned there were other cases but this was the simplest. Did they all involve three images like this? It seems like a strange condition I wonder if the later images happen to always fulfill some other general case.. This approach is a bit concerning as Quill wants to treat code as plain text and let libraries (such as highlight.js) handle the highlighting, so your approach would be fighting against Quill's design. I would look into highlightjs's plugin system instead.. Sorry I misunderstood the scope of your use -- I thought this was just curly brackets within code, but you are talking about the entire document, even non-code. In that case can you elaborate on \"break[ing] undo history in strange ways?\". One point is \"silent\" does not mean history will ignore it, it just means text-change events are not emitted. It is important for history to be aware of all changes in the editor -- otherwise it cannot maintain an accurate stack to perform undos and redos.\nIn your case the approach I would take is listen on the bracket close key and make your color change there. You can then in the handler either:\n\nConstruct a delta and use updateContents like https://github.com/quilljs/quill/blob/043e32977f4b89fbf8254f2bbad8fdd064c27f7c/modules/keyboard.js#L238-L246\nCall insertText(index, '}', ...) and then formatText separately and use quill.history.cutoff to control undo points like https://github.com/quilljs/quill/blob/043e32977f4b89fbf8254f2bbad8fdd064c27f7c/modules/keyboard.js#L196-L202. Sorry for the delay -- thanks for the fix!. Have you tried the matchVisual configuration option?. Please include all the details we ask for in the issue template.. Yes you are right -- updated!. #1790. Can you just use normal DOM click events instead of selection-change?. Is this a custom Blot? If so can you paste the constructor / create functions?. If your goal is to find the blot would something like this work:\n\njs\nstatic create() {\n  let node = super.create();\n  node.addEventListener('click', function(e) {\n    // e.target should always be node since it is attached to node\n    let blot = Quill.find(node);\n    // Do what you want with blot\n  });\n  // ...\n}. The guide is accompanied by a minimal live Codepen demo and it works without issue. Just reading the Javascript it make no sense that \\\\n would be correct and not \\n. This likely means there is something misstep in following the guide. If you do not believe this to be the case please post a minimal example (on Codepen or JSFiddle) demonstrating this claim.. Yes just modify with CSS.. code-block is a block level format similar to text-align. Block level format behavior is described in https://quilljs.com/docs/api/#formattext. . From the docs: \"For line level formats, such as text alignment, target the newline character or use the formatLine helper.\". Thank you for the detailed report -- I was able to reproduce on Mac + Chrome as well. What is your suggested solution? Agree the drawbacks of the current approach are there but an alternative with both its pros and cons need to be compared, not just the pros and ignoring the cons or else we may be taking a step backwards.. You don't need to spend four paragraphs rehashing what you already said in the original comment...\nSolution 2 seems to pretty much breaks Quill for the average user? If a casual user just came along added Quill as a dependency in their app, and did import Quill from 'quill'; it will no longer just work. They will also have to be aware of Parchment, quill-delta, etc and add those as dependencies too.. Quill.import() was added so people in just the browser environment can get access to Parchment and Delta. You do not have to use it in a build environment. I wrote a guide for properly adding Quill to the build with an example repo.\nParchment is truly a library dependency regardless of how the build shakes out it should still be listed in npmjs.com as a dependency. If there is a reference that NPM has put out that supports your claim please link that.. > so you say that in a Node environment it is wrong to use require(\"quill\") and instead I have to use require(\"quill/core\") (And more requires for the stuff I need)\nWhere did I say that?. There is a difference between you have to do and you can do. The example is an example of what you can do, which is one of many options.\nI do have a difficult time understanding you because half of the claims made I do not believe is true, for example what I just pointed out, so it makes me not optimistic we can have a discussion that will lead to a solution.\nEither way your concern is noted and well documented in this Issue and I will take another look when I have time and come up with my own solution.. No unfortunately this is not a feature / a limitation of Quill at the moment. #943. You are right that is a different issue. However styling empty lines with inline formatting is still not supported in Quill so this is not a bug. If you would like to make a feature request please take a look at https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md#feature-requests and file another issue.. Did you try this to see what it does? I don't think it has a desirable outcome.. Where are you seeing this? It kind of looks like the homepage but the colors are different. If it is your local environment then there is probably a misstep in your build.\n\n. I mean where as in the URL. The website https://quilljs.com/docs/modules/toolbar/ shows the dark syntax highlight I showed, so I assume not there.. Thanks @nadavrt !. What you tried false should have worked but I didn't have time then to dig in why null does but false did not till now. I'll reopen this as a small change to make in 2.0.. I assume you are calling with no parameters. In that case it focuses the editor to get the current selection.. This seems too specific to be added to Quill core. As @benbro mentioned you can look at creating and enforcing the constraint for your own use case through keyboard bindings.. Thanks for your PR. Unless there is an automated way to update the README the version number will often be out of date given how often releases happen. Updating these numbers manually is not something I want to add to my list of deployment chores. If they are not to be updated automatically I would prefer they stay just 1.0.0 to make it more suggestive there might be a later version.. Thank you for the PR but they were intentionally excluded.. It looks like you have to place the cursor specifically before the formula? This seems a bit unintuitive. I would expect highlighting or clicking anywhere on the formula to work (like links).\n\n. Okay sounds good. It's pretty difficult for strangers to pick up someone else's code so I will just close this out.. Officially supported themes are currently mutually exclusive.. Thanks for the PR -- it looks very detailed! I'll try to review this weekend. Thank you for the contribution and especially the tests! Feel free to submit another PR for the spacebar support. Are there any other accessibility gaps with the editor or toolbar?. Version 2.0 does not exist and please post on StackOverflow if you need help. Github Issues is for bug reports and feature requests.. Can you post a stack trace? Also are you building Quill yourself or using cdn.quilljs.com/{version}/quill.min.js?. These are good ideas and accessibility is something we want to improve on. Some of the specifics (ex. do native <button>s need attributes or just non-native form elements acting like buttons) I do not have the knowledge on so if others in the community can weigh in on the right requirements or if a digestible reference/guide can be provided that would be helpful.\nThere may be implementation changes to the UI elements coming in 2.0 that I have not decided on yet so that's an unknown factor.. In your case the option you desire of not doing anything to list: true will be the behavior in 2.0 (and the change has been made in the branch). . https://github.com/quilljs/quill/issues/1730. That routine in blots/scroll.js has always been questionably hacky (as it is specific to code blocks only) and has been removed in the 2.0 branch.. This seems problematic from a security perspective so unless there is a very compelling real world use case it does not seem like a fit for the core project.. Please do not spam quilljs with duplicate issues. Once there is an official upgrade guide from 3 to 4 I will take a look at upgrading. If someone in the community is more adventurous feel free to submit a PR.. Thanks!. The purpose of the formats config is to whitelist formats. Since width is not whitelisted in the second editor, it is ignored. You need to add width to the whitelist or not use the whitelist configuration option.. Yeah I agree it's surprising and can be changed in 2.0. This code is in a library clone we are using and not in Quill.. The expected behavior of pressing the Tab character is to insert the tab character (\\t) which it is doing. The tab character sometimes looks like a space, depending on where it is relative to where the next tab stop is.. IE11 is a supported browser for use, but not local development as some of the tools used require more modern browser features.. Thanks!. Thanks!. Thanks!. You're only including Quill core which does not register any formats such as bold. Use quill.min.js instead.. Fixed in https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87. Fixed in https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87. Your two images look the same to me other than the cursor which may be what you're pointing out but please be more clear when posting Github Issues. If you want just code editor I would recommend Ace.. Your two images look the same to me other than the cursor which may be what you're pointing out but please be more clear when posting Github Issues. If you want just code editor I would recommend Ace.. Duplicate https://github.com/quilljs/quill/issues/1730. Duplicate https://github.com/quilljs/quill/issues/1730. Checklists are not officially supported as so are not documented. Please take a look at the checklist issue for remaining tasks.. Checklists are not officially supported as so are not documented. Please take a look at the checklist issue for remaining tasks.. I don't think this was a typo. It is supposed to discuss the customization of Draft but once Quill 1.0 was released they become on similar footing.. No worries -- easy enough to revert. Thanks for taking a look!. Fixed in #2227. Fixed in #2227. Thanks!. Thanks!. Fixed in #2226. Fixed in #2226. Thanks @RyanV! Can you add the test here into test/unit/modules/clipboard.js as well?. Thanks @RyanV! Can you add the test here into test/unit/modules/clipboard.js as well?. Can you try onload instead of onerror and using src=\"/assets/favicon.png\"?. Can you try onload instead of onerror and using src=\"/assets/favicon.png\"?. The karma issue seems like a bad cache -- I removed it and it got past but then complained about credentials. Will have to look more into the latter issue. Thanks for the bug-fix and tests!. The karma issue seems like a bad cache -- I removed it and it got past but then complained about credentials. Will have to look more into the latter issue. Thanks for the bug-fix and tests!. Thanks for the detailed report and fix!. Thanks for the detailed report and fix!. Quill is using babel-preset-env now and so the transpiling is automatic based on its list of supported browsers (_develop/webpack.config.js). Since those browsers all support class that's why it is not transpiled.\nThe consumer should not have to transpile -- it seems like the issue is they are anyways into ES5 and then using ES6 syntax. If you disable babel in that Codepen everything works and in your own projects if you use babel's recommendation of using babel-preset-env it should work too.\nI do see the argument for making it as errorless as possible for as many environments as possible but the tradeoff seems to be that everyone that is following best practices is going to pay a build size tax to help the people that do not. Also in my experience sourcemaps don't work perfectly and so not needing them for as much of the codebase as possible helps with development as well.. Quill is using babel-preset-env now and so the transpiling is automatic based on its list of supported browsers (_develop/webpack.config.js). Since those browsers all support class that's why it is not transpiled.\nThe consumer should not have to transpile -- it seems like the issue is they are anyways into ES5 and then using ES6 syntax. If you disable babel in that Codepen everything works and in your own projects if you use babel's recommendation of using babel-preset-env it should work too.\nI do see the argument for making it as errorless as possible for as many environments as possible but the tradeoff seems to be that everyone that is following best practices is going to pay a build size tax to help the people that do not. Also in my experience sourcemaps don't work perfectly and so not needing them for as much of the codebase as possible helps with development as well.. I agree this is too special case. The uploader is a new module in 2.0 but you can provide your own module:\njs\nvar Uploader = Quill.import('modules/uploader');\nclass YourUploader extends Uploader {\n  // ...\n}\nQuill.register('modules/uploader', YourUploader, true);\nor provide a image handler for the toolbar\n```js\nvar toolbarOptions = {\n  handlers: {\n    image: function(value) {\n      // ...\n    }\n  }\n}\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  }\n});\n```\nhttps://quilljs.com/docs/modules/#extending\nhttps://quilljs.com/docs/modules/toolbar/#handlers. I agree this is too special case. The uploader is a new module in 2.0 but you can provide your own module:\njs\nvar Uploader = Quill.import('modules/uploader');\nclass YourUploader extends Uploader {\n  // ...\n}\nQuill.register('modules/uploader', YourUploader, true);\nor provide a image handler for the toolbar\n```js\nvar toolbarOptions = {\n  handlers: {\n    image: function(value) {\n      // ...\n    }\n  }\n}\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  }\n});\n```\nhttps://quilljs.com/docs/modules/#extending\nhttps://quilljs.com/docs/modules/toolbar/#handlers. Commenting in one place is enough. Please do not duplicate content in the future. For other readers please see my comment in https://github.com/quilljs/quill/pull/2242#issuecomment-413693264. Commenting in one place is enough. Please do not duplicate content in the future. For other readers please see my comment in https://github.com/quilljs/quill/pull/2242#issuecomment-413693264. Thanks for identifying this issue. I preferred a smaller change https://github.com/quilljs/quill/commit/d54d2d00483068e6ca17d0aab3d0073bbe45f3d8 that is now in develop. Thanks for identifying this issue. I preferred a smaller change https://github.com/quilljs/quill/commit/d54d2d00483068e6ca17d0aab3d0073bbe45f3d8 that is now in develop. Commenting in one place is enough. Please do not duplicate content in the future.\nThat is just a heuristic on the first pass to detect the reported issue of the browser \"fixing\" the markup. The rest of the function still runs which will check for tag equivalence. You can see neither\nexpect('<ul><li>foo</li><ol>').toEqualHTML('<ul><li>foo</li><ul>'); nor does '<ol><li>foo</li></ol>'.\nYou can see the change to editor.js was made https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87. Commenting in one place is enough. Please do not duplicate content in the future.\nThat is just a heuristic on the first pass to detect the reported issue of the browser \"fixing\" the markup. The rest of the function still runs which will check for tag equivalence. You can see neither\nexpect('<ul><li>foo</li><ol>').toEqualHTML('<ul><li>foo</li><ul>'); nor does '<ol><li>foo</li></ol>'.\nYou can see the change to editor.js was made https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87. You are correct the https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87 would not have been caught by the CI.\nI'm open to modifying the solution however this PR's implementation is not acceptable because of:\n\nHeavy use of regexes\nAttempt to parse HTML by hand\n\nBoth from experience are trouble paths.. You are correct the https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87 would not have been caught by the CI.\nI'm open to modifying the solution however this PR's implementation is not acceptable because of:\n\nHeavy use of regexes\nAttempt to parse HTML by hand\n\nBoth from experience are trouble paths.. Some comment as #2238. Some comment as #2238. Btw Quill does not eval anything in the source code https://github.com/quilljs/quill/search?q=eval&type=Code. Webpack however does use eval to generate cheap source maps so that may be the issue.. Btw Quill does not eval anything in the source code https://github.com/quilljs/quill/search?q=eval&type=Code. Webpack however does use eval to generate cheap source maps so that may be the issue.. The way to do this right now is to use your own clipboard module (which can extend the existing one): https://quilljs.com/docs/modules/#extending\n```js\nvar Clipboard = Quill.import('modules/clipboard');\nclass YourClipboard extends Clipboard {\n  // ...\n}\nQuill.register('modules/clipboard', YourClipboard, true);\n```\nIs there a limitation to this method that would not cover your use case? Providing escape-hatch functionality, especially in configurations, is not a scalable design pattern.. The way to do this right now is to use your own clipboard module (which can extend the existing one): https://quilljs.com/docs/modules/#extending\n```js\nvar Clipboard = Quill.import('modules/clipboard');\nclass YourClipboard extends Clipboard {\n  // ...\n}\nQuill.register('modules/clipboard', YourClipboard, true);\n```\nIs there a limitation to this method that would not cover your use case? Providing escape-hatch functionality, especially in configurations, is not a scalable design pattern.. > Quill promotes itself as a black-box framework with white-box extensibility\nI don't think I agree with either characterization. Can you elaborate?\n\nSub-classing is a non-trivial decision\n\nI think subclassing is a well understood and accessible pattern. The issue is more so the interesting functions to override are not documented which is because I was not ready to put them under SemVer by 1.0. This will probably change by 2.0.\n\nI\u2019d I\u2019d also like to get an idea of where the line is for improving the framework usability for the black-box consumers\n\nThe problem is not that I don't think people should customize the clipboard, the problem is I think providing an escape hatch function is bad design. As it states in the Contributing Guide there is a high bar to making changes (even additions) to the API. In general I also prefer to prioritize making impossible things possible than easy things easier.\nCopy and paste just is an area where the actual complexity is much higher than the perceived. Giving people a function to say \"hey now you can figure out how to clean up MS Word markup before it goes to Quill\" will not make the Github Issues go away.. > Quill promotes itself as a black-box framework with white-box extensibility\nI don't think I agree with either characterization. Can you elaborate?\n\nSub-classing is a non-trivial decision\n\nI think subclassing is a well understood and accessible pattern. The issue is more so the interesting functions to override are not documented which is because I was not ready to put them under SemVer by 1.0. This will probably change by 2.0.\n\nI\u2019d I\u2019d also like to get an idea of where the line is for improving the framework usability for the black-box consumers\n\nThe problem is not that I don't think people should customize the clipboard, the problem is I think providing an escape hatch function is bad design. As it states in the Contributing Guide there is a high bar to making changes (even additions) to the API. In general I also prefer to prioritize making impossible things possible than easy things easier.\nCopy and paste just is an area where the actual complexity is much higher than the perceived. Giving people a function to say \"hey now you can figure out how to clean up MS Word markup before it goes to Quill\" will not make the Github Issues go away.. Would be happy to be a part of the list! I'm interpreting this as just a permission check but let me know if you need any action on Quill's part.. Would be happy to be a part of the list! I'm interpreting this as just a permission check but let me know if you need any action on Quill's part.. \ud83d\udc4d . \ud83d\udc4d . Thanks!. Thanks!. Excellent PR thanks -- and for the bug report!. Thanks!. Hey thanks for the catch! Can you change it to the develop branch instead of master? The branch that shows when you land on https://github.com/quilljs/quill is the develop branch. Hey thanks for the catch! Can you change it to the develop branch instead of master? The branch that shows when you land on https://github.com/quilljs/quill is the develop branch. Thanks!. I'd like to find the fundamental issue as workarounds like this lead to surprising behavior down the line.. Thanks!. Which version of Quill are you trying to build?. Is there a Github Issue this is fulfilling?. #paragraphId in the demo works for me as it is still the http protocol and yes sanitization is due to security. The blob: protocol is very different and I don't want to add every possible protocol to the whitelist. You can just overwrite PROTOCOL_WHITELIST in your own application.. That's correct thanks for the help @dcsaszar . This UX is currently by design. Previously only 1. would trigger it but people did want to continue a list so we relaxed it to be any number but made ctrl+z undo just the autolist behavior so typing three zero period space ctrl+z would leave you with \"30. \".. I think most people as in over 50% is a stretch. There are also mutually exclusive options unless you add repetition ex you can use a dropdown or buttons to configure some formats. So this PR still does not show the full editor even if that was desirable.. I think you want something like:\njs\nvar delta = new Delta().retain(existingContentLength).concat(nextDeltaChunk);\nquill.updateContents(delta);. Hey @Havunen thanks for the PR. I prefer to update the dev dependencies as there are a number manual verification steps ex the linter still works with my editor. Also there is a compatibility reason icons.js exported using the old style which I'll have to look up and see if it still applies. If you want to add rimraf feel free to submit a separate PR for cross browser development support. Not sure if the gitattributes changes are also related to that but do note our Contributing guidelines are one PR should serve a single purpose so three: updating dependencies, cross browser support, gitattributes and export changing is too many. \nAs for IE11 there are many surprising bugs as you have found one. Another particularly difficult one is mutation records for when you type a link and IE11 automagically turns it to a link, the records are simply incorrect.\n@charrondev You originally asked publicly and I did not want to discuss the prospects of your involvement publicly as there are criteria other than just availability and/or willingness when it comes to being a maintainer. I was going to find your email and email you but forgot. Now that you emailed me I did respond. You are welcome to maintain your own vanilla/quill fork and I applaud you for doing so as that is after all one of the great things about open source.. Added in https://github.com/quilljs/quill/commit/df9852229541e17c165b3e13691e0853d06ffe4a. Hey Rhys, thanks for the PR. The failing test is valid though I'm concerned about the implementation. It sounds like you may have already tried the simple fix though I'm not understanding your explanation for why it does not work. Can you elaborate in general but specifically what positional information is lost?. Yup thanks for bringing this to our attention and the exploration!. @psren is correct. Delta is just a data format and cannot execute code. HTML can so that's where your focus should be wrt XSS.. Thanks for the PR!. https://quilljs.com/docs/modules/toolbar/. Thank you for your interest. Reproducibility is not for completeness sake, it is necessary for scalable and maintainable development. Actually our Contributing Guide requires a test demonstrating the bug and fix.. Your firstInsert is invalid as it does not end in a newline https://quilljs.com/docs/api/#setcontents. You can either end it in a newline or set firstInsert to the return of https://quilljs.com/docs/api/#getcontents. But at present you are not diffing against the actual document states so the diff and compose returned will not describe Quill's document states. Also it is not recommend to construct Deltas by hand in general: https://quilljs.com/docs/delta/ and should instead use the chainable, insert/delete/retain functions.. quill.setSelection(3) is valid but the setSelection look like the second parameter is missing the fact it has a default value of 0. Would you mind submitting a PR to add this?. Thanks!. Thanks!. Thanks for the interest in contributing. Variants of that issue has come up a few times but Quill is behaving as designed and expected.. Why is this being reordered? If it should be formatText should be reordered too.\n. I think this is equivalent to this._buildParams(params). Also can't use function.apply as it's not supported in older versions of IE.\n. My mistake. I got apply and call mixed up. I think apply is problematic under certain circumstances in IE9/10. I can't remember what the cases are but this commit is causing tests to fail and it complains about 'apply' https://travis-ci.org/quilljs/quill/jobs/24880234.\n. This is actually unnecessary. The Tooltip class will save the range before the tooltip showing.\n. Can you condense this into one line: anchor.href = url if anchor?\n. Can you add a check for range.isCollapsed() and if so do the modification of the anchor href. The else branch should have the formatText line.\n. Sry I meant the if range should be its own followed by another if else block so:\ncoffee\nif @range?\n  if @range.isCollapsed()\n    # Anchor\n  else\n    # formatText\nThis is because formatText needs range to be defined as well.\n. One last thing: can you get rid of the if range at the end? It's already inside a check for range being defined\n. Since there's only one test can you move these two lines into the anonymous function passed into it()?\n. Since the doctype is html5 the / is unnecessary\n. It's fine to use the lodash bind but can you keep the this.focus? I prefer to refer to functions with this and variables with ampersand\n. Same as above: keep the this.function\n. EventEmitter2 has a removeAllListeners that will let us keep the selection change listener anonymous.\n. Every source file has two lines above the module.exports line and should be kept that way\n. This is a good catch and definitely encourage changes like this but they belong in its own PR. 1 PR = 1 purpose and the purpose of this PR is to add the destroy method.\n. this.removeAllListeners()\n. Should be a space preceding ->\n. Function calls should include the parenthesis\n. Include braces on one liner objects\n. This comment is unnecessary \n. Can you change to the codebase style of using @ for instance variables?\n. can you remove this empty line?\n. Can you collapse this into one line:\noffset = 0 if dom.isIE(10) and node.tagName == 'BR' and offset == 1\n. Can a check be added to make sure start - 1 >= 0 and end + 1 < @quill.getLength()?\n. Can you align the =s?\n. Debugging logs should be removed\n. A helper is not necessary here since it's only called once and is so short. It'd be better to have this inline in the caller with a short comment ex.\ncoffeescript\ndiff = new Delta(diffLeft.ops.concat(diffRight.ops))   # merge diffLeft and diffRight\n. Similarly it'd be clearer to just do\ncoffeescript\noldLeftDelta = @delta.slice(0, oldIndex)\noldRightDelta = @delta.slice(oldIndex)\nnewLeftDelta = @newDelta.slice(0, newIndex)\nnewRightDelta = @delta.slice(newIndex)\n. It'd be more optimal to assign the result of getRange() to a temporary variable since the call is not free. Actually since getRange is already being called earlier (line 190) it might make sense to move this up there.\n. If the if @selection.getRange() branch (line 200) is being moved we can remove the usage of a variable (diff) and a code branch (else) by returning the last line of the try if block and just returning @delta.diff(newDelta) here.\n. diff variable no longer used\n. can this newline be removed\n. This works but might be more clear to use slice(). Passing no parameters will create a copy.\n. Can you structure this similar to other modules where there's a DEFAULTS static: https://github.com/quilljs/quill/blob/develop/src/modules/image-tooltip.coffee#L10. Can we also name the config onConvert (that's the best I could come up with... might be a better name still but I think containerToDelta is too long and context dependent).\n. Can you please add a newline after -> and indent the function body\n. Can you rename origin to source? That's the more common name in other parts of the codebase.\n. Can you change 'user' to Quill.sources.USER?\n. Can you move this into selection.coffee and just call scrollIntoView? I'm trying to start grouping API calls into selection, editor, document, etc and only having quill.coffee have passthroughs into the most common ones.\n. Also a nitpick but can you change this to:\ncoffee\nendBounds = if (@selection.range.isCursor()) then startBounds else this.getBounds(@selection.range.end)\nto avoid the extra call if possible (this will likely be the most common case).\n. Can we toUpperCase() a string to support case insensitive removals ex. removeHotkey('bold'); Many users might not and need not know the hotkeys object has its keys in all caps.\n. I think this is just returning an offending callback, not removing it?\n. I don't think its necessary to support passing in a keycode (so the implementation can be removed too).\n. To properly test removal, the test should retrieve the exact function that is bound to the hotkey, call removeHotkey, and then check it was actually removed (and returned). Here, the tests pass if any function is returned and does not check any bindings were severed.\n. In my mind I was thinking removeHotkey('enter') would almost always be preferable to removeHotkey(13). However you are right this is not possible right now since Keyboard.hotkeys does not define enter. Maybe it should just be added? _initEnter should be refactored at some point to use this but since it also overwrites shift enter I would just not worry about it right now.\n. Can you change this to > 400? Technically a font-weight of 500 is also considered bolded.\n. I was trying to avoid this as I recalled reading somewhere getComputedStyle was expensive and this function would be called on many of the content pasted, but testing it in JSFiddle just now, it does not seem prohibitively so..\n. Why is the second condition isLine(refBlot) necessary?\n. In some places the word placeholder is treated as two words (like here) and others it's treated as one (like in quill.js). I think placeholder is a real word so one is more correct but either way this should be consistently treated as one (placeholder, Placeholder, placeholderText) or two (placeHolder, PlaceHolder, placeHolderText).\n. This appears to be extraneous \n. this.quill.getLength() might be more clear. Also might as well have it be <= 1 instead of === 1\n. Actually this looks like what hasElements is for so would probably be best to reuse it here\n. I don't think this check is necessary, TEXT_CHANGE should not fire with zero length deltas and even if it does, the consequence of resetting ql-empty is pretty small.\n. setContents should trigger a TEXT_CHANGE event so an explicit change to ql-empty should not be necessary\n. Would this.root.classList.toggle work here?\n. This function might not be necessary (see above comments). Even if it is necessary, it is not clear it should be a publicly exposed method.\n. The is too clever--it's probably more readable to just do an if check.\n. This change is extraneous\n. Can quill.root.classList.toggle be used instead of adding a new toggleEmpty function? They seem to accomplish the same things.\n. Could this be moved to the top of the handler for addEventListener since evt should be the same for the rest of the function?\n. I see that makes sense\n. Can you alphabetize the rule and add a space after the colon to keep with existing styles?\n. The keyboard also uses this +1/-1 functionality\n. I believe the general case of <button value=\"1\"> gets broken by this === change.\n. Can you actually just use controlHeight as the width and keep the whitespace consistent? Thanks!\n. Can you keep bounds: null in the list instead so DEFAULTS still has all the possible options listed?\n. shift is already being used for horizontal shifting and returned\n. Why is this being moved?\n. I think pasteHTML below needs to be removed instead of this. pasteHTML is deprecated.\n. I think the CSS rules will work either way. Are you seeing otherwise? Here is better stylistically to be close to the previous if (this.options.readOnly) since they are similar functionally \"doing something quick based on an option value\"\n. I'm not seeing that this the order you are proposing is logical, because as we agree, the order is irrelevant with respect to effect. I do think there is logical to group the effects of the options as much as possible so I think it's important the readOnly and placeholder effects are next to each other, for code readability.\n. Sure we can move placeholder above readOnly\n. What changed was Quill defaulted to using classes instead of styles, and those classes were named descriptively instead of ql-size-10px. The dropdowns still work the same.\n. Since this is linked, the above code examples seem unnecessary.\n. Technically 'an' ubiquitous is not wrong, but 'a' is far more common especially nowadays. http://english.stackexchange.com/questions/280921/a-or-an-ubiquitous\n. \"If we want to add italics, underline, and other formats\" is not a complete sentence so I don't think a semicolon is appropriate.\n. The reason I prefer \"A seemingly reasonable way to represent center aligned text is this:\" is the that pronoun \"this\" is at the end so there's no confusion what it is referring to. When it is at the beginning, the reader may wrongly associate it with a noun in the previous sentence.\n. Can we use asterisks instead of underscores as it is more consistent with other Quill docs?\n. Same asterisk vs underscore comment\n. Okay with the wording on the first sentence. Could go both ways but I think a comma is appropriate before \"along\"\n. I think \"special case\" and \"the empty string\" is more idiomatic.\n. Same asterisk comment\n. I'd prefer \"its position\" over \"its value\" since it is technically more correct. I do agree on using a different word than index though.\n. I did not know you could use semi-colons as higher precedent separators in lists of lists. But it doesn't seem like that applies here? There is only one list, followed by an listless independent clause. None of the sources say a semi-colon can be used just as a general list separator, but just in the special case a list is in a larger list of lists.\n. The empty string is definitely \"a thing\" in programming language theory, similar to the empty set in mathematics, but I have seem it used in formal specifications as well. However \"an empty string\" is not wrong nor is just \"empty string\". The given example of '  ' is not the/an empty string however since its length is not zero.\n. It is not necessary to add a parameter since there startNode and endNode can just be reversed.. This should be set in normalizedToRange. Don't think this is necessary. Take a look at normalizedToRange. There looks to be a much easier way to figure reversal status.. rangeToNative should be modified to provide the right args order instead.. I'd rather not change the API surface at the moment. The way this can be supported is only if users do setSelection(new Range(0, 1, true)); Alternatively setSelection(1, -1) can be accepted and would generate new Range(0, 1, true). Given the above, none of these changes are necessary. This was added as a memory leak way to add event listeners on global objects. If WeakMap were available it would be used like the comment mentions but since it is not it does this which by the way is how WeakMaps work under the hook.. Why is this needed?. I'm not sure I like this approach as it creates an extra state and scope dependency. A generalized solution would be much preferred which would also cut down on code duplication in any other modules. Can we use ownerDocument instead?. We want to know if you drag outside of the boundaries of the editor container. See the lines below this one.. Since there's no substantial else branch we can we instead check the opposite and return right away and save an indent on a lot of code? Also the inner if + else if both check for the same second condition which could be made more obvious by checking outside/immediately too so adding both of this together we could do something like:\njs\nconst [oldSelection, newSelection] = selectionInfo || [];\nif (selectionInfo == null || newSelection.length > 0) {\n  return oldDelta.diff(newDelta);\n}. Yes I was thinking the last return oldDelta.diff(newDelta); would still be there at the end of the function. Also the if + elseif could turn into and if + else so the relationship between the branches is perfectly clear. There is still the inner conditions that may not be satisfied but the last return oldDelta.diff(newDelta); would take care of this.. I don't feel strongly on my particular recommendation but I do feel something should be done to make the if branch easier to read. At 70 lines long I cannot see the full if branch on a 28\" monitor. A couple other ideas:\n\nThe two inner if else branches can be their own functions \nInstead of calling return oldDelta.diff(newDelta); at the end we call diffDeltas(oldDelta, newDelta) (removing the selectionInfo parameter even if one is supplied). If function overloading were a thing in JS this would be a clear candidate for it so this approach somewhat approximates that. It is possible for the code token blot to have attributes which may have desirable formats to preserve. For example comments are often implemented this way which would produce a blot that looks like:\n\n<span class=\"ql-token hljs-literal comment-07d9be3c>false</span>\nIn this case we still do want to call formats() to get the comment format.. nofollow does not seem relevant to tabnabbing?. That's fine these two are what React's linter suggests as well. This is describing the shape of range and so if there was a default value (there is not in this case) it would be on range and not its members. ",
    "byronm": "Related: If you hit enter from the second line (containing the tail of the initial text), the editor does not accept any subsequent insertions except for newlines.\n. Related: If you hit enter from the second line (containing the tail of the initial text), the editor does not accept any subsequent insertions except for newlines.\n. I'm still seeing the issue after pulling this code. Are you sure 332ecf0 fixed it?\n. I'm still seeing the issue after pulling this code. Are you sure 332ecf0 fixed it?\n. I did rebuild...\nDid you explicitly test background color? Experimenting a bit more I see that font family/size works in my dev environment, but background color does not. We don't have background color hooked up on beta but I'd guess it fails there too.\n. I've had a number of fuzzer runs where an attribute other than background color is lost. I've seen size and font-family get dropped, for example. I don't know how to reproduce making a specific attribute get lost, but I have observed that only one attribute from the collection is dropped.\n. To reproduce font-family being lost:\n1. Type \"ab\\nc\"\n2. Apply the following formatting to \"c\", in the following order: background-color: blue, color: yellow, size: large, italic: true, family: serif\n3. Delete \"\\n\"\nExpected: \"c\" having the previously listed formatting.\nActual: \"c\" has the previously listed formatting, except the Serif font-family is dropped and it defaults to San Serif.\nNote that both the order the attributes are applied in and the deletion of the \\n before the formatted character are necessary to reproduce the bug.\n. This seems to be the line throwing the error:\nhttps://github.com/stypi/scribe/blob/bea0e93e27dc5a65a14b0ac2b881f550ed50c556/src/selection.coffee#L108\n. The behavior I'm currently seeing is that you can continue to type, but the first character and all remaining characters will be split by an automatically inserted \"\\n\". So, after highlighting and deleting all, typing \"abc\" actually yields \"a\\nbc\".\n. Another observation I just made is that if you have the empty document and type \"abc\", and then hit enter, no error is raised, but instead of appending a newline, the cursor just moves to index 2 (i.e., it moves left one char).\n. Forgot to mention: In Firefox, the console prints the errors \"TypeError: node is null\" and also \"TypeError: this.node.classList is undefined\".\nAlso, if you cut instead of copy, then Chrome's console has the following error: Uncaught Error: IndexSizeError: DOM Exception 1\nand Firefox's has TypeError: node.parentNode is null.\n. Actually, any keystroke following a tab fails. The editor loses focus after the first tab, so it's irrelevant what you follow it with.\n. My bad, this isn't a bug. When I highlighted, I actually highlighted \"1\\n2\\n\". So technically the editor is doing the correct thing.\nThat said, I do think it's a usability issue. Because my highlighting did not span the 3 at all, my expectation was that the 3 would not be indented. Most users will probably assume the same. We might redefine the behavior so that indenting the trailing \\n is essentially a no-op, unless that holds other ramifications.\n. See commit 0cb7425fb922429a9040a08 for accompanying test in selection.rb\n. Added a test for this. See commit 25a848b9e00ba17b397ae0f897ab597bd3e\n. This is also an issue on mobile Chrome. In both browsers, the bug exists on ios6 and 7.\n. Some discussion:\nhttp://dev.magnolia-cms.com/blog/2012/05/strategies-for-the-iframe-on-the-ipad-problem/\nhttp://stackoverflow.com/questions/5267996/how-to-properly-display-an-iframe-in-mobile-safari\nThere are many other posts on SO as well. Unfortunately, the most common workaround (wrapping the iframe in a div with overflow: auto, -webkit-overflow-scrolling: touch) does not work for us. It does constrain the iframe height, but Scribe's scrolling misbehaves -- after the contenteditable grows taller than the iframe, it is impossible to scroll.\n. One side effect of the workaround is that it seems to break formatting. I think you mentioned that was on the todo list though.\n. Sorry I missed the commits. You're right, it works. Though there are some cursor issues (applying formatting causes the cursor to jump to the beginning of the document). I can file a separate bug if you aren't already on the case.\n. Seriously.\nOk, updated formatText as well.\n. That's what I was mentioning in the PR header. name, value comes first in the ordering of the parameters, so I thought it made sense for the method signature to come first too. I overlooked formatText; if you agree w/ the change, we can reorder that one too.\n. ",
    "lpfister1": "Fixed with preliminary adapter.focus in fuzzer.rb\n. Fixed with preliminary adapter.focus in fuzzer.rb\n. This issue is solved if prior to Step 3 the following command is run in rdb:\nadapter.move_cursor 1\nHowever, adapter.cursor_pos is then 7. See allowing non-existent indices\n. This issue is solved if prior to Step 3 the following command is run in rdb:\nadapter.move_cursor 1\nHowever, adapter.cursor_pos is then 7. See allowing non-existent indices\n. This issue is broken again if:\nStep 1 above.\nStep 2 above.\nStep 3 above.\nStep 4: adapter.move_cursor 1\nStep 5: adapter.move_cursor 0 // Without this line, issue is solved\nStep 6: (adapter.type_text \"abcdef\").class // Yields String.\nThis issue is fixed with a non-zero cursor_pos.\nAfter fixing the allowing non-existent indices issue, the step 4 listed here does not fix it.\nHOWEVER, forcefully setting cursor_pos to a non-zero index (even if it does not exist) fixes the issue.\n. This issue is broken again if:\nStep 1 above.\nStep 2 above.\nStep 3 above.\nStep 4: adapter.move_cursor 1\nStep 5: adapter.move_cursor 0 // Without this line, issue is solved\nStep 6: (adapter.type_text \"abcdef\").class // Yields String.\nThis issue is fixed with a non-zero cursor_pos.\nAfter fixing the allowing non-existent indices issue, the step 4 listed here does not fix it.\nHOWEVER, forcefully setting cursor_pos to a non-zero index (even if it does not exist) fixes the issue.\n. Fixed in one of the commits to fuzzer branch on April 30th.\n. Fix confirmed\n. Fix confirmed\n. Now that out-of-bound indices are checked for, behavior is not as expected for type_text/cursor_pos/doc_length.\nSee Adapter not updating variables and incorrect return type\n. Behavior is as expected in Firefox.\n. ",
    "ghost": "The behavior could have changed based off of recent changes...\n. would it be possible to allow pasting of tables to not convert them to divs? tried to add the tags to the normalizer whitelist, but it still converted them. I don't mind working with a tweaked core lib until 1.0 is out. Any kind of direction would be greatly appreciated! \n. \u554a\u554a\u554a\uff0c\u6211\u53ef\u4ee5\u8bf4\u4e2d\u6587\u4e48\uff1f\n\u662f\u4e0d\u662f\u53ea\u652f\u6301\u62f7\u8d1d\u4e00\u4e2a\u8868\u683c\u8fc7\u6765\u53ef\u4ee5\u8ba9\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u4e00\u70b9\u3002\n\u8fd9\u5c31\u6ee1\u8db3\u4e86\u697c\u4e3b\u4e00\u65e6\u521b\u5efa\u540e\u5c31\u4e0d\u6539\u53d8\u7684\u8981\u6c42\u3002\n\u8fd9\u6837\uff0c\u5f88\u591a\u7528\u6237\u7684\u95ee\u9898\u5c31\u6709\u4e86\u4e2a\u4e34\u65f6\u89e3\u51b3\u65b9\u6848\uff0c\u5f88\u591a\u4eba\u4f1a\u5f88\u5f00\u5fc3\uff01\uff01\uff01\n\u54c8\u54c8\uff01\n======================================\nLet me try some english ,\nThe first step ,support copying a table from another page ,maybe it make things simple.\njhchen commented on Sep 4, 2016 \u2022 edited :\"Tables cannot be resized after creation\" ,I think it is right . \nWe can edit a table by using another edit tool ,and then copy the table into the quill ,\nWe can modify the table again If need ,and now, we have the table ,\nand have the time to discuss the more cormfortable solution. \n. Is this enhancement still considered? \nWorking on a project that would really need the ability to insert links in this manner. Any way to extend the current functionality to allow this? \n. I'm hitting this issue as well. Basically, if you have a font-family with a space in it (ex. \"Arial Black\"), Chrome will encapsulate it with quotes when you ask for the font-family of the HTML element.\n``` javascript\nlet fontFamily = \"Arial Black\";\nnode.style['fontFamily']  = fontFamily;\nfontFamily = node.style[fontFamily]; // fontFamily is now \"Arial Black\" (including the quotes)\nfontFamily = \"'Arial Black'\"; // Surrounded with single quotes\nnode.style['fontFamily']  = fontFamily;\nfontFamily = node.style[fontFamily]; // fontFamily is still \"Arial Black\" (with double quotes instead of single ones)\n```\nThe error is thrown in update of the Toolbar module:\njavascript\noption = input.querySelector(`option[value=\"${formats[format]}\"]`); // Source\noption = input.querySelector('option[value=\"' + formats[format] + '\"]') // Built file/from CDN\nWhen the selector is built, the quotes for the value aren't escaped, so you end up with a bad selector (like the original post). Replacing the double quotes with single ones (which @clemmy did in WiFast/quill#1) should fix it. Just have to make sure that the names with spaces are single-quoted wherever you specify them as well.\nPlease let me know if you want a PR with the changes.\n. Yup, looks like a rendering issue. I loaded http://cdn.quilljs.com/1.0.0-beta.6/quill.js on Chrome, IE, and Edge on Win10, and they all displayed \u00ef\u00bb\u00bf. If you copy/paste the code, the error persists. But downloading the file is fine. Maybe the CDN is missing a header or something for the proper encoding when viewing in the browser? \nContent-Type:application/javascript; charset=utf-8 // From the beta website\nContent-Type:application/x-javascript // From the CDN\n. @jackmu95 Yes, as a standalone option, but not how you can combine it with http://quilljs.com/docs/modules/toolbar/#container \nThe container example shows only the simple array approach:\nvar toolbarOptions = ['bold', 'italic', 'underline', 'strike']; \nAnd for handlers its an object:\nvar toolbarOptions = { handlers: {foo: function() {} }};\nits not clear, that you can do this:\nvar toolbarOptions = { \n  container: [\"bold\", \"italic\"],\n  handlers: {foo: function() {} }\n};\n. I'm referring to the actual scrollbar on the right side. When you mouseover it in other places the cursor changes to cursor: pointer. However, when you mouseover the one in Quill, you still get cursor: text.. ",
    "sbberic": "Was feature ultimately implemented?\n. I wrote something for this but i'm pretty new to contributing to open source projects. Do I fork and submit a pull request?\n. I wrote something for this but i'm pretty new to contributing to open source projects. Do I fork and submit a pull request?\n. I'm not too familiar with jasmine to write the tests. I can look it up though \n. I'm not too familiar with jasmine to write the tests. I can look it up though \n. So this functionality is only for when toolbar is enabled. I noticed for the suite that toolbar isnt enabled? Also I found a bug in my code while trying to write the unit test. How do I merge it to this pull request?\n. So this functionality is only for when toolbar is enabled. I noticed for the suite that toolbar isnt enabled? Also I found a bug in my code while trying to write the unit test. How do I merge it to this pull request?\n. From what I can see, quill uses this https://developer.mozilla.org/en-US/docs/Web/API/document.execCommand\nthis allows formatting on contenteditable elements\nThe reason I was basing it off the toolbar because I thought that it would be annoying to be typing and the format retains when you hit enter but I can see your point in that other rich text editors do this so I will add in condition to look at format of the last character before hitting enter as well and retain that.\n. ",
    "benmcmaster": "@jhchen I am seeing the jump to the top of scroll frame after applying formatting in v0.20.1 in mobile safari on iOS 9. On a long document, the user loses scroll position of where the formatting is taking place. Is there a way to fix that? \n. ",
    "amerikan": "Unless I have misunderstood the issue, the issue has been fixed (6 months old) or I am failing to follow the steps you gave correctly, I don't see this happening, at least not in Firefox 29.0/OS X.10.9.2\n \n. Ok now I can reproduce.\n\n. Would be a nice feature to have.\n. Any updates on this? Seems like a handy feature.\n. ",
    "krishvs": "Is there any specific reason why fontsize range is being converted to pixels?\n. Is there any specific reason why fontsize range is being converted to pixels?\n. I dont think this can be fixed using only css and the execCommand or range.As a custom undo manager exists, dom manipulation is the way to go.Have started playing around with the code and will submit a pull request if i am able to fix it.\n. ",
    "EricGrange": "By afterward I mean \"once it has been edited\", the purpose of the editor being to edit rich text as html, this html is also meant to be displayed after its edition, without no editor in sight.\nThe main difference between inline & css style is not precedence, it is that inline style is part of the html, so when you display the html, inline style is guaranteed to be there, while stylesheet css is not.\nIt would be different if the editor was doing its editing based on css classes rather than inline styles, then having an external stylesheet to go alongside the html would be expected. But given that the editor edits inline styles, IMHO it should maintain coherent inline styles, rather than require a specific css stylesheet for the html to be displayed \"as edited\".\n. This is something that I have been wondering about.\nThe guide mentions https://github.com/ottypes/rich-text/ but it does not seem to include any renderer.\nI have found this project https://github.com/casetext/quill-render but it looks outdated and no longer maintained, and it also involves a DOM.\nThe Quill Delta format is yet-another-custom-rich-text-format, which even if open, would turn problematic to use for persistence of content (in a db, etc.), because well, it is non-standard.\nFinally while the format is simple, it is non-trivial to render as it is an action log, so the rendering engine needs to be 1:1 with the editing engine (including edge case bugs). Rolling out an engine (or a third party) would thus face all the usual problems of \"code rot\", because the expected render is not defined by the format, but by what the user saw during edition.\n. The problem is not saving JSON itself but saving user content in custom (as\nin \"non standard\") format. It would tie the data in the database very\nstrongly to quilljs.\nIf there was a renderer to html available, there would be no such issue:\ndelta could be used over the wire, to protect from xss and keep all other\nadvantages, and then rendered to html server-side and used in database\npersistence (possibly alongside the delta).\nThis way user content and db are not strongly tied to quilljs and its\ncustom format.\nAt the moment it is my understanding that rendering a delta to html\ninvolves reproducing all the quilljs interpretation of deltas 1:1, with\ndeltas thus being closer to a script than to a document format (as in html,\nrtf, etc.), as they list operations/instructions rather than an expected\nstate and visual aspect (correct me if I'm wrong).\nNotably the delete and retain ops mean the final state cannot be known\nwithout \"correct\" interpretation of all ops in a delta (with \"correct\" as\nin \"reproducing bugs as well\")\nLe 24 sept. 2016 17:03, \"Jason Chen\" notifications@github.com a \u00e9crit :\n\n@EricGrange https://github.com/EricGrange Deltas are JSON and should\nsave fine in many databases, such as Postgres or MongoDB. Are you\nencountering issues?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/993#issuecomment-249369201, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACGG2lxcsy70tIeDZpBhudcLcKyJ-OvUks5qtTvNgaJpZM4KCQEe\n.\n. The issue with html is actually completely different, because it's\nstandard, it will be possible to display, manipulate and edit on any target\nin any reasonable future.\n\nI am not sure what you mean with fuzzy matching: the content for me is\nmeant to be edited and read by humans, so the actual html does not matter\nas long as the visual aspect is fine enough.\nFor example if someone enters content that contains the sentence \"the\ndocument is not approved\",  what matters is that this sentence is what will\nbe displayed. Whether there are spurious whitespaces or span tags in the\nhtml is purely technical efficiency (or lack of).\nBut if the same content is described by deltas, and because of some bug a\nparticular delete OP is ignored in v1 (or snips whitespace, etc.), but\nhandled properly in a bugfixed v2, it is possible that the same delta would\nbe rendered by v2 with the sentence \"the document is approved\", with the\nfixed delete OP snipping the \"not\", and changing the human meaning of the\ncontent.\nThe same issue exists with alternative rendering engines from delta to\nhtml, which may render to a different content in terms of human semantic if\nthere is just one bug.\nWhen html or text is stored, displaying it may be technically complex if\nyou look at the full stack involved, but it's quite foolproof because it's\na standard with well established tools. Its complexity is as relevant as\nthe complexity of the Operating System or the video driver used to push the\nactual pixels. There will be differences, but as long as the human visual\naspect is good, it's fine.\nStored deltas on the other hand need to be fully executed (as it is a\nscript) before you get a valid html/text/dom, and that delta execution\nengine is not a well established standard. And while the format itself is\nsimple, its execution is not (involves a dom, and bugs can affect the\noutput drastically in terms of human semantic, even if you only want a text\noutput).\nOr in other words, the risk that in 5 years rendering current quill deltas\nmeans going through legacy hoops and hacks is much higher than the risk of\nhaving to do that for html content. Which is why I would rather have html\nstored in the database: the data for any application is likely to outlive\nits UI components.\nAll that said, the execution trouble with deltas come from delete & retain\nops: with only insert, delta becomes a state more than a script.\nSo returning a \"baseline\" or \"pre-processed\" delta with (guaranteed) only\ninsert OPs could be another solution. A renderer for an insert-only delta\nis simple AFAICT and safe in terms of human semantic content.\nThe quilljs editor content could be reset to that baselined delta during a\npreview step (at editing time).\nLe 24 sept. 2016 19:38, \"Jason Chen\" notifications@github.com a \u00e9crit :\n\nIf the scope is the particular JSON Quill produces then we should\nsimilarly scope to the particular HTML Quill produces. Through those\nlenses, HTML has the same issue.\nIf you stored the HTML Quill produced in a database and one day wanted to\nswitch to another editor, that editor will produce different HTML for the\nsame content expressed by Quill through HTML. Now you could do some fuzzy\nmatching with HTML parsers and libraries are out there to do this but this\nis much more complicated than a JSON array. HTML is undisputedly a more\ncomplex and expressive of a format, and, stored a string, requires a parser\nto even begin interpreting.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/993#issuecomment-249377396, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACGG2qyQW2BkN9N4lJmp_xcF3ohgV3vCks5qtV_8gaJpZM4KCQEe\n.\n. HTML needs to be sanitized and protected against various things, and you\nalso no longer have any change history, ability to merge simultaneous\nedits, undo edits, etc.\n\nThe delta format allows merge & history, and also naturally provides a\ndegree of protection vs style, script and other injections. So it has many\nadvantages over raw html, the only disadvantage it has is the one mentioned\nhere: as it cannot be displayed directly, it needs to be rendered.\nOn Tue, Nov 15, 2016 at 7:05 PM, Jerry Orr notifications@github.com wrote:\n\nI feel like I'm missing something here. Why would you want to save the\nDeltas and later render them as HTML? Why wouldn't you just save the HTML\nthat's already been rendered?\neditor.root.innerHTML\nor\ndocument.getElementsByClassName('ql-editor')[0].innerHTML\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/993#issuecomment-260718450, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACGG2jhHTozz7GvozOtuwV3bkNN0uhTRks5q-fSGgaJpZM4KCQEe\n.\n. \n",
    "rafalradomski": "@jhchen the issue still exist on IE 10 and 11 on Windows 7.\nTry to remove content, select Bold and write someting on IE:  https://jsfiddle.net/mb4cz9tL/\n. @jhchen Is there chance that you fix this in nearest future?\n. Any progress with that?\n. @jhchen no I never used it, I'm using Chrome Version 45.0.2454.99 m if it help\n. Any chance to fix it in the nearest future?\n. Hi @jhchen \n1. Black bar is probably because I created GIF file from movie ;)\n2. On fresh chrome canary Version 48.0.2540.0 canary (64-bit) I see the same issue\n. @jhchen yes\n. @jhchen I don't understand why you asking about how I made a movie, it doesn't matter. I used first solution that I found on internet just to show you the problem.\nThe problem is that the cursor is jumping, please focus on that ;)\n. @jhchen any news?\n. Error exists even without web components, so it's not connected.\n. ",
    "heidid": "This issue can be closed\n. Alright, thanks for the feedback! I'll hold off until render.coffee is refactored.\n. Great.\nI'm working on the tests now.\n. Alright, new PR here\n. Hmm, I can't seem to reproduce your situation. Can you put up a live demo?\n. +1, I like this idea.\n. ",
    "leeoniya": "should be very easy to add bidirectional HTML <> markdown support similar to the demo i did for redactor-js here: http://leeoniya.github.io/redactor-js/\nusing https://github.com/leeoniya/reMarked.js and https://github.com/chjj/marked\n. @markbao\n\nOne thing to note is that almost all of the HTML \u2192 Markdown formatting scripts work badly with WYSIWYG engines\n\nthe main issue is that WYSIWYG editors don't worry too much about producing clean html that's restricted to the markdown subset. they only worry about getting the right look once rendered in the browser. an extra <br> here, an empty <p> there and span /w css vs <strong> doesnt matter. in many cases the end justifies the means.\n\nThe Redactor example above, for example, starts inserting <div>s and <span class=\"line-height: 1.4em\"> when you add headers and lists, and generally do not produce true-to-content (and also ugly) markup.\n\nif you're talking about http://leeoniya.github.io/redactor-js/, i'm not seeing this behavior. can you provide steps to reproduce, please?\n\nAs a result, the best way to go about this, I think, is to find a way that doesn't go from HTML to Markdown as an afterthought, but builds Markdown alongside HTML.\n\nindeed, it is. but you still have to edit in either a markdown or WYSIWYG html editor. so that editor (whichever it is) needs to maintain an intermediate representation and STILL restrict the WYSIWYG portion to the markdown subset.\n. ah ok, i'm seeing this in Chrome, but not FF. i could tell you to just tweak reMarked's options to swallow the div and span tags, but that doesnt do anything to fix the fact that redactor puts that stuff into the html in the first place.\nif quill already maintains an intermediate representation internally, then it would be easy to provide a renderer of that AST in markdown alongside the html. but the amount of code would be pretty close to what reMarked already does since there isnt an html parser built into it other than what the DOM already provides.\nfor unidirectional markdown output or bidirectional editing, the first step in every case is to have a WYSIWYG html editor that produces clean, markdown-restricted output either as html or as some intermediate AST. poor html output comes from a poor internal AST, so the two are one and the same.\n. ",
    "jbenet": "Recommend to use pandoc + pandoc IR.\n. Recommend to use pandoc + pandoc IR.\n. @ollym \n\nFirstly, there are some things markdown just doesn't support, like font colours, background colours, different fonts (and styles) etc.. It should be up to the implementor to remove these from the toolbar.\n\nThe proper markdown spec allows html directly in the source document. Editing markdown should work with src and wysiyg tabs, so the html would only show up in the src. As most markdown parsers do, html in markdown should be an option that devs can toggle off.\n\nSecondly, (and most importantly) quill doesn't support headers (), instead it \"imitates\" headers by changing the font-size and allowing the user to add 2 line breaks. This (i guess) is to allow you to have larger font-sizes inline (which isn't supported by markdown either).\n\nAgree, headers should be proper <h#>. You can apply font sizes to headers just like any other html element (style attr, css class, etc).\n. ",
    "ollym": "@jhchen I've done a bit of research into this, and there are some quite serious incompatibilities that need to be addressed if this will ever be possible.\nFirstly, there are some things markdown just doesn't support, like font colours, background colours, different fonts (and styles) etc.. It should be up to the implementor to remove these from the toolbar.\nSecondly, (and most importantly) quill doesn't support headers (<h#>), instead it \"imitates\" headers by changing the font-size and allowing the user to add 2 line breaks. This (i guess) is to allow you to have larger font-sizes inline (which isn't supported by markdown either).\nIn fact I don't really understand why you did it this way round, and chose not to support headers natively?\n. @jbenet embedding HTML should not be considered as an option.\n. This topic has got way to long already. Back on topic...\nI think Quill has enough of a base framework to make this achievable within the project without the threat of starting again.\nAll that needs to happen is:\n1. Add headers, blockquotes, lists/bullets, code blocks / inline code, and horizontal rules into the core.\n2. Add an easy way to configure the toolbar module to only show those controls.\n3. Create a Markdown module that provides a toMarkdown method to export the contents to a markdown format.\nI haven't done much looking, but I suspect the next problem will come from how deltas work. Ideally you'd use getContents rather than parsing the HTML directly. But I believe the deltas only reference text and have no context (as in, whether that text is in a blockquote, or header etc.). @jhchen am I right?\n. This topic has got way to long already. Back on topic...\nI think Quill has enough of a base framework to make this achievable within the project without the threat of starting again.\nAll that needs to happen is:\n1. Add headers, blockquotes, lists/bullets, code blocks / inline code, and horizontal rules into the core.\n2. Add an easy way to configure the toolbar module to only show those controls.\n3. Create a Markdown module that provides a toMarkdown method to export the contents to a markdown format.\nI haven't done much looking, but I suspect the next problem will come from how deltas work. Ideally you'd use getContents rather than parsing the HTML directly. But I believe the deltas only reference text and have no context (as in, whether that text is in a blockquote, or header etc.). @jhchen am I right?\n. @jhchen blockquote, code, tables, indents ?\n. @jhchen we're looking at starting building a markdown editor as described. Did I read somewhere that you're working on v2? We're currently looking at either trix or quill as base frameworks for this job. Do you have any thoughts about how best to approach this and which direction to take?\n. @jhchen we're looking at starting building a markdown editor as described. Did I read somewhere that you're working on v2? We're currently looking at either trix or quill as base frameworks for this job. Do you have any thoughts about how best to approach this and which direction to take?\n. ",
    "rhythmus": "@leeoniya thanks for that fine and enthusing read! I pick up from there, but prefer to do it here since WYSIWYG Markdown support in Redactor.js proved vain desire, while Quill.js still has the benefit of being the new kid on the block.\nThe goal (at least to me) should not be to add .md export on top of a WYSIWYG \u201crich text\u201d html editor (with bidirectional, lossless support for ad hoc inline styles, attributes, and all sorts of html cruft), but, as @leeoniya, @tehnorm, @lolmaus, @tnypxl and @paulcarroll suggested (in the thread referenced above), to forget about html altogether, and create a true dedicated WYSIWYG Markdown editor. Markdown should not be an afterthought: it must be the primary input syntax and persistent file format, whereas html should only be one out of many possible output formats (one could have Pandoc running in the backend), albeit a very important one. If we would go for that, we could easily drop support for one-on-one bidirectional html\u2194md syncing, and perchance have peace of mind.\nWith WYSIWYG I do not mean \u201cwhat you see is what you get\u201d in the sense of: the preview will exactly match the printed output \u2014\u00a0in the days of ubiquitous responsive design for tantamount display sizes, that\u2019s become an obsolete obsession. Wysiwig, instead, is a proxy for intended style, and really means that structure (or \u201csemantics\u201d, if you will) is separated from presentation, not by renouncing presentation at all, but to make it flexible and replaceable.\nA wysiwyg Markdown editor would allow the user to select and swap stylesheets (pure external css, that is) at will, and still be able to directly edit the source text in the theme of his choosing. One such theme could be the usual single-font, single-font-size, syntax-colored thing we got used to in \u201cvisual\u201d Markdown editors (and every other code editor for that matter), showing the actual Markdown syntax markers nicely color-coded. (But that experience needn\u2019t necessarily rely on a full-blown parsing expression grammar implementation \u2014 cfr infra.) More finished-output alike, typographically pleasing stylesheets for editable text is what we should be really after, though.\nRegardless of the selected theme/stylesheet, users should have the option to toggle the visibility of the actual syntax on and off, not unlike \u201cnon printing characters\u201d can be shown or hidden in most word processors and text editors \u2014\u00a0because that\u2019s what the syntax markers in fact are.\nExemplifying such interfaces, to me, are the iA Writer app (native OSX, iOS), and the late Editorially web based markdown editor: the markup\u2019s syntax markers are dimmed away, paragraph (block-level) marks (#, -, 1., etc.) hung into the margins. However, unlike these examples, the real challenge is to not only do some nice styling with the markup itself (as in common syntax highlighting, and as the manifold implementations do that plug on CodeMirror), but to have styles applied, live, as the user types, onto the marked-up text. \nApplying style would be done both by typing valid markup, or by selecting a string and clicking a button. If \u201cshow markup\u201d is toggled off, markup typed by the user would instantly disappear as soon as there\u2019s a match (and the styling is applied), and a button bar would be visible on top of the interface by default. If \u201cshow markup\u201d is toggled on, markup would be always visible (albeit dimmed into the background, and/or hung into the margin), and the button bar would only show when a string gets selected, above (or, on mobile, below) the text selection.\nAs mentioned by others, dealing with character escapes is one of the implementation hazzles, but not insurmountable. With markup toggled on, reserved characters would be always interpreted as markup, and the user would have to do the escaping explicitly (\\*escaped\\*). In pure WYSIWYG mode (markup toggled off), on the other hand, reserved characters would be escaped by default. That, or we could still go ahead with live tokenizing, and use the backspace \u232b as a trigger to undo the interpretation and yet apply the backslash escapes, very much like our trusted word processors implement similar features like hotstrings, text expansion, and auto-replacement.\nAnother issue is syntax validation. Sure enough, Markdown always is valid. But we do not want multiple clicking of the UI buttons  yields \u201cinvalid\u201d or at least meaningless nested syntax (like: ![![](http://)](http://)). Instead, we want the syntax inserted to be well-formed. I\u2019d say we need sanitization, rather than validation. That too, could be done, preferably live as well.\nFrom a UX/UI viewpoint, I guess combined display of markup and styled elements (like embedded images, tables and math) will be the hardest part. But I will be happily contributing to help tackling those.\nThere are very few projects striving for a true WYSIWYG Markdown editor, in the sense described above. Yet, as this, and the other thread (June 2012), mentioned above, and a related discussion at StackOverflow (Oct. 2012), prove, there clearly is demand. (Personally, I want to see this happen, badly!)\n- Demarcate.js by @will-hart (repo) is an interesting project, which perhaps comes closest to what Quill.js html \u2192 multiple output could look like for Markdown.\nThe nearest things to a working prototype for what I have in mind, are \n- lepture/editor by @lepture (repo), \n- sofish/pen by @sofish (repo), and \n- Hallo by @bergie (repo; blog post).\nThe first plugs on CodeMirror, while the latter two keep a lean DOM under the hood.\n@paulcarroll Regarding the pains you went through in keeping a rigid DOM structure to control the conversion to and fro Markdown and \u201chow bad the various browser implementations are surrounding text manipulation\u201d: Did you consider Shadow DOM? It\u2019s an obvious use case\u2026\u00a0Admittedly, browser support is poor, but there\u2019s polyfills. With an obfuscated internal subtree handling the lexed output of the Markdown parser, we may keep the style hooks out of the main document DOM tree.\nAs a post scriptum: Maybe we shouldn\u2019t even stop at Markdown. After all, the present thread is titled \u201cMultiple output engines (including Markdown)\u201d. Sure enough, we want to do things right, from the start, and envision clean and versatile code abstraction.\nThen we could foresee that \u2014 while the Markdown ecosystem is increasingly suffering from fragmentation with many divergent implementations \u2014 we might want to support arbitrary lightweight markup syntaxes in the future, too. One could name a few veterans (AsciiDoc, reST, MediaWiki), but, to make my point, I refer to some brand new takes on light-syntax: Fountain, Skriv. We may reckon with use cases that indeed require multiple output formats, like having the ability to go from Wiki to Markdown, from Textile to reST, and back to Markdown, and eventually to html. \nThat would imply any implementation must do some thorough code abstraction, would not rely on hard-coded regexes, would not bind the buttons of the UI to hard-coded find-and-wrap-within-delimiters operations. We\u2019d need the parser to be fed with a symbol table, a dictionary mapping the tokens of the internal parse tree with that of the intended output format, amongst which, in particular, the necessary html tags, classes and other css hooks needed for the WYSIWYG interface, which may be very different from the html output format. In short, I do not think an intermediate representation of the parse tree (jsonml, jison, whatever) would be \u201cridiculous overkill\u201d (@leeoniya): it would be key to realize a versatile, arbitrary format, output mechanism. (In passing, have a look at Substance.io\u2019s Document Model in json, and their web-based text editor core.)\n. @chrisshroba @jhchen remark and mdast (both by the same author) is what you might be looking for:\nhttps://github.com/wooorm/remark\nhttps://github.com/syntax-tree/mdast\nIt\u2019s GFM and CommonMark compliant already, and features a plugin architecture to add any desired syntax extensions.. ",
    "will-hart": "@rhythmus thanks for mentioning demarcate. I can certainly see a case for a decent light weight WYSIWYI (What You See Is What You Intend?) editor that can output multiple formats. This was the original vision for demarcate as at the time I was running a few websites using different static site generators and the side by side editing style most Markdown editors have didn't do it for me. Definitely +1 to this issue!\nI had been working on a \"2.0 branch\" for demarcate which removed jQuery dependencies, allowed modular parsers (i.e. plugable reST or Markdown output builders), used contenteditable like pen and Hallo above etc. etc. I haven't really pursued development in a while as all of a sudden a bunch of more polished editors cropped up (like Quill!) with teams that seemed to have the know-how and enthusiasm to do a better job :) \nMy solution to the output formats wasn't particularly sophisticated.  I just ran over the DOM recursively and used a dictionary to map HTML tags to the right output syntax. Doubtless somebody with some more ninja coding skills could do a much better job using a few simple regexes! \n. ",
    "lazywei": "+1 for markdown.\n+10 for MathJax!\n. ",
    "cben": "FWIW, http://mathdown.net [https://github.com/cben/mathdown] is another example of configuring CodeMirror to \"format\" markdown as-you-edit via syntax highlight.\nPlus in-place MathJax rendering via CodeMirror's support for embedded widgets [https://github.com/cben/CodeMirror-MathJax].  Works but not very robust yet.\nA similar technique could be used to render images.\nCodeMirror works well with variable fonts; the only big limitation I know is mediocre support for iOS/Android.\nThanks people for the all links, some very interesting.\n. FWIW, http://mathdown.net [https://github.com/cben/mathdown] is another example of configuring CodeMirror to \"format\" markdown as-you-edit via syntax highlight.\nPlus in-place MathJax rendering via CodeMirror's support for embedded widgets [https://github.com/cben/CodeMirror-MathJax].  Works but not very robust yet.\nA similar technique could be used to render images.\nCodeMirror works well with variable fonts; the only big limitation I know is mediocre support for iOS/Android.\nThanks people for the all links, some very interesting.\n. Another entrant: https://stackedit-beta.herokuapp.com/ (source \"nope, not released yet\" but I presume will be) is now based on contenteditable and does a good job styling markdown in-place.\n. ",
    "markbao": "+1. One thing to note is that almost all of the HTML \u2192 Markdown formatting scripts work badly with WYSIWYG engines. The Redactor example above, for example, starts inserting <div>s and <span class=\"line-height: 1.4em\"> when you add headers and lists, and generally do not produce true-to-content (and also ugly) markup.\nAs a result, the best way to go about this, I think, is to find a way that doesn't go from HTML to Markdown as an afterthought, but builds Markdown alongside HTML.\n. +1. One thing to note is that almost all of the HTML \u2192 Markdown formatting scripts work badly with WYSIWYG engines. The Redactor example above, for example, starts inserting <div>s and <span class=\"line-height: 1.4em\"> when you add headers and lists, and generally do not produce true-to-content (and also ugly) markup.\nAs a result, the best way to go about this, I think, is to find a way that doesn't go from HTML to Markdown as an afterthought, but builds Markdown alongside HTML.\n. @lolmaus Theoretically, yes. In practice, the commercial version of Redactor (not the open-source one above) is the only one I've seen that has been able to do this, so it's possible but difficult. Neither Summernote nor Quill have been able to get this right on the money\u2014but if Quill did, I'd be ecstatic.\nSo to revise what I said: given that Quill will not be totally perfectly semantic, simultaneous Markdown is probably best. If Quill can be totally perfectly semantic, then HTML \u2192 Markdown might be possible! (But obstacles abound.)\n\n@leeoniya Yep for sure. And to reproduce:\n1. Go to last paragraph and hit Enter\n2. Enter \"Test\" in the new paragraph\n3. Select \"Test\" and format it as Header 2\n4. Hit Enter (notice <div></div> is created in the Markdown output)\n5. Type some text\n6. Hit the Bullet List option; notice the Markdown output looks like this:\nhtml\n<div>\n    * <span style=\"line-height: 1.45em;\">lost the game</span>  \n</div>\nYou can then type anything into the Markdown output to engage Markdown \u2192 HTML conversion, and see that the bullet is lost due to misformatted syntax, which is the broken result you would see if you convert the Markdown back to HTML.\nChrome 34 OS X.\n. @lolmaus Theoretically, yes. In practice, the commercial version of Redactor (not the open-source one above) is the only one I've seen that has been able to do this, so it's possible but difficult. Neither Summernote nor Quill have been able to get this right on the money\u2014but if Quill did, I'd be ecstatic.\nSo to revise what I said: given that Quill will not be totally perfectly semantic, simultaneous Markdown is probably best. If Quill can be totally perfectly semantic, then HTML \u2192 Markdown might be possible! (But obstacles abound.)\n\n@leeoniya Yep for sure. And to reproduce:\n1. Go to last paragraph and hit Enter\n2. Enter \"Test\" in the new paragraph\n3. Select \"Test\" and format it as Header 2\n4. Hit Enter (notice <div></div> is created in the Markdown output)\n5. Type some text\n6. Hit the Bullet List option; notice the Markdown output looks like this:\nhtml\n<div>\n    * <span style=\"line-height: 1.45em;\">lost the game</span>  \n</div>\nYou can then type anything into the Markdown output to engage Markdown \u2192 HTML conversion, and see that the bullet is lost due to misformatted syntax, which is the broken result you would see if you convert the Markdown back to HTML.\nChrome 34 OS X.\n. ",
    "lolmaus": "@markbao, but ain't it technically possible to do pure and semantic HTML with a WYSIWYG editor?\n. @ourmaninamsterdam, thank you for your report! Very helpful.\nDid you check out http://leeoniya.github.io/reMarked.js/ ?\n. ",
    "ourmaninamsterdam": "We are also in search of the holy bidirectional  html <> Markdown converter and have yet been able to find a complete solution. In our project we are storing all of our content as Markdown and the user will be able to edit the Markdown directly or use a WYSIWYG editor to edit the HTML. This is then converted back to Markdown and saved to the DB.  \nWhat we did was:\n1. Find an HTML Editor that produces squeaky clean, terse HTML. The one that came out on top was the very impressive Scribe from the Guardian. Finding this was the hardest part.\n2. Find a good Markdown > HTML converter:  marked\n3. Find a good HTML > Markdown converter: toMarkdown\nWe then plugged it all together. We now have some issues where we want to extend Markdown with our own syntax, but that's a different story.\n. ",
    "akshatpradhan": "I skimmed the comments but I wasn't sure about the consensus. Will Quill.js's toolbar support Markdown syntax? \n. @jhchen Would it be possible to just map to GH markdown for now, and later we can figure out how to support other markdown flavors based on developer feedback? We can take an iterative approach.\nI would really like support for GH Markdown.\n. @jhchen Would it be possible to just map to GH markdown for now, and later we can figure out how to support other markdown flavors based on developer feedback? We can take an iterative approach.\nI would really like support for GH Markdown.\n. ",
    "rvinay88": ":+1: \n. ",
    "ecmyers": ":+1:\n. ",
    "chrisshroba": "@jhchen Any suggestions for \"trivially outputting to markdown\"? It seems there are an abundance of Markdown -> HTML converters and Markdown -> AST converters out there, and a couple HTML -> Markdown converters, but I can't seem to find any AST -> markdown converters, and generating markdown manually from Deltas seems like it would be a lot more error prone than generating an AST which could be fed into a tried-and-tested converter to get markdown.\nI know I could just grab the innerHTML of the editor and feed that to an HTML -> Markdown converter, but it seems like the Deltas (not the HTML) should be used as the source of truth.. @jhchen Any suggestions for \"trivially outputting to markdown\"? It seems there are an abundance of Markdown -> HTML converters and Markdown -> AST converters out there, and a couple HTML -> Markdown converters, but I can't seem to find any AST -> markdown converters, and generating markdown manually from Deltas seems like it would be a lot more error prone than generating an AST which could be fed into a tried-and-tested converter to get markdown.\nI know I could just grab the innerHTML of the editor and feed that to an HTML -> Markdown converter, but it seems like the Deltas (not the HTML) should be used as the source of truth.. ",
    "Coffee2CodeNL": "There's a Markdown spec now: https://commonmark.org/. Damn perfect, I really hope for more GFM support in Quill, existing editors make use of CodeMirror, which has major trouble with IME on mobile \ud83d\ude10 \nBasically, you need to press space twice and whatnot on default keyboards \ud83d\ude15 . ",
    "mkurz": "Also see \"A formal spec for GitHub Flavored Markdown\" from the GitHub blog. ",
    "paulcarroll": "@rhythmus I certainly would've considered something like Shadow DOM indeed if it were available waaaay back when I did this, but as I no longer work for the company I wrote the editor for it's not high on my priority list. Having said that I'm not sure if Shadow DOM would alleviate the difficulties I had with the selection API (that was the particular pain point for me as each browser - and version - had different ideas about how to handle a keypress that inserted content, deleted content, the backspace key etc... it was awful.\nI did use rangy at the time which served a purpose.... but was a difficult to debug collection of hacks and workarounds (still, a most commendable effort from the author and all due respect given!).\nThanks for the detailed and great comment though, it really ties together all the issues showing how MD output really isn't possible without tackling the problem holistically . ",
    "mitar": "+1\n. +1\n. Please share how you made it to work.\n. Please share how you made it to work.\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. This could also be seen as a feature.\n. This could also be seen as a feature.\n. Any news on this?. That the delta contains something like: move these elements to that other location. Currently there are only insert, retain and delete operators.\nSo one option would be to add a new operator. The other would be that insert operator which represent a paste would have an attribute referencing the original content which have been copied. I think the main question is how to reference that original content.. That the delta contains something like: move these elements to that other location. Currently there are only insert, retain and delete operators.\nSo one option would be to add a new operator. The other would be that insert operator which represent a paste would have an attribute referencing the original content which have been copied. I think the main question is how to reference that original content.. ",
    "VaclavElias": "+5\nI was just about to ask about to add it as a new feature request but seems it is here already. Yes, it would be nice to have such a button in the toolbar like Gmail has to remove all formatting.\nThanks\n. ",
    "ooflorent": "I tried to add format to do this but it fails...\njs\nquill.addFormat('reset', {\n  prepare: function() {\n    return document.execCommand('removeFormat')\n  }\n})\nAny idea?\n. It solves npm run scripts. npm automatically adds .bin to the path.\nWithout grunt-cli being globally installed, you can now npm install and also npm run prepublish, npm test, etc\n. Thanks!\n. Yeah sure. \nWe are currently building a large webapp that uses Quill. We also uses lodash and some other 3rd party libraries do too. Having a custom lodash build bundled into Quill dist files generates extra JS. Exporting the transformed Quill's source prior bundling would solve the issue.\n. Have you considered moving to webpack? You could output a bundled version and a non-bundled-but-transformed version of the library.\n. ",
    "sferoze": "+1. Otherwise you paste in text from various places and the note looks like garbage. You have to be able to remove the formatting. \n. I really want this feature, any updates? Currently I am using the makeshift hack to expand the editor with the code:\nself.editor.on 'text-change', (delta, source) ->\n  self.$('.quill-editor').height(self.editor.root.ownerDocument.body.scrollHeight)\nBut it does not work really well in all cases, because as the page changes, I have to keep setting the height with javascript and it is pretty unsustainable practice. \nAlso I noticed on mobile, the Quill Editor always has a scroll bar no matter what. I cannot get rid of the scrolling on mobile, even if I set the height to the scrollHeight....\n. I really would like this feature. I want the quill editor to have a min height of 50px and expand as the user types. I canot get the above snippet to work, whenever I type the box keeps expanding: Here is the code i am using:\ncoffeescript\n  self.$('.quill-editor iframe').contents().find('body').css('overflow', 'hidden')\n  self.editor.addContainer('spacer-container')\n  self.editor.addStyles\n    '.spacer-container':\n        'height': '20px'\n        'display': 'block'\n        'clear': 'both'\n  self.editor.on 'text-change', (delta, source) ->\n    if source is 'user'\n      saveDraftCallback()\n      self.$('.quill-editor').height(self.editor.root.ownerDocument.body.scrollHeight)\n. I got it working but I needed to set the height of the body to auto:\nstylus\nself.editor.addStyles\n    'body':\n      'height': 'auto'\n      'min-height': '50px'\n      'overflow': 'hidden'\n    '.spacer-container':\n        'height': '20px'\n        'display': 'block'\n        'clear': 'both'\nBut it is still kind of a hack because the height does not go down when you remove text, it only expands.\n. I bumped into this issue too, and is really preventing Quill from being usable on my website which is a note taking application. Looking forward to a fix! \n. @jhchen Any updates on this? Can we merge this branch and have this option?\nI really do want to run the editor directly on my site in a div instead of in an iframe. \nThis is because on mobile you when you scroll down, even if the iframe has no scroll bars, the scroll still gets stuck and bounces back because you are trying to scroll within the iframe. You have to drag outside the editor to scroll properly and feels a bit janky\n. @jhchen Any updates on this? Can we merge this branch and have this option?\nI really do want to run the editor directly on my site in a div instead of in an iframe. \nThis is because on mobile you when you scroll down, even if the iframe has no scroll bars, the scroll still gets stuck and bounces back because you are trying to scroll within the iframe. You have to drag outside the editor to scroll properly and feels a bit janky\n. @jhchen Wow awesome, I really look forward to that. As a developer using the Quill editor I agree that having the editor work inside a div would be ideal. Quill just keeps getting better and better. This is really exciting as I use the editor everyday in my own note taking document collaboration tool. \n. @jhchen Wow awesome, I really look forward to that. As a developer using the Quill editor I agree that having the editor work inside a div would be ideal. Quill just keeps getting better and better. This is really exciting as I use the editor everyday in my own note taking document collaboration tool. \n. Hi @jhchen ,\nI just tried the newest version of Quill v.0.18.0 and when pasting content, the page scrolls to the top and does not go back to the original position. I tested this in chrome 38.\nSo it is not functional to use paste in a long document as the user completely loses the position.\n. Hi @jhchen ,\nI just tried the newest version of Quill v.0.18.0 and when pasting content, the page scrolls to the top and does not go back to the original position. I tested this in chrome 38.\nSo it is not functional to use paste in a long document as the user completely loses the position.\n. Yes it is the outer page. I set the Quill editor height to the scrollHeight so there are no scroll bars in the quill editor itself. So when you paste in the editor, the outer page scrolls to the top. \n. Yes it is the outer page. I set the Quill editor height to the scrollHeight so there are no scroll bars in the quill editor itself. So when you paste in the editor, the outer page scrolls to the top. \n. Awesome thanks so much for fixing this! I will update my app as soon as you cut a new release with this commit in it. Thanks again @jhchen \n. Awesome thanks so much for fixing this! I will update my app as soon as you cut a new release with this commit in it. Thanks again @jhchen \n. @jhchen I just tried the new version of quill by compiling the source. I noticed that the main issue is fixed and most of the time it does not scroll or move the page at all. But sometimes when you paste, the page jumps a little. It is tolerable from a user experience standpoint but still a quirk nonetheless. \n. @jhchen I just tried the new version of quill by compiling the source. I noticed that the main issue is fixed and most of the time it does not scroll or move the page at all. But sometimes when you paste, the page jumps a little. It is tolerable from a user experience standpoint but still a quirk nonetheless. \n. Here is the link to the Delta contents that I am trying to load in my editor (extracted using getContents()): http://memri.meteor.com/public/note/a3zLTXKMyzezDCfpr\nHere is the link to the same contents but in HTML. I extracted the html using Quill's Editor using getHTML: http://memri.meteor.com/public/note/PCFDCp2xGFgAGGGH8\nboth setHTML or setContents seem to take equally long time to load this note. \n. Here is the link to the Delta contents that I am trying to load in my editor (extracted using getContents()): http://memri.meteor.com/public/note/a3zLTXKMyzezDCfpr\nHere is the link to the same contents but in HTML. I extracted the html using Quill's Editor using getHTML: http://memri.meteor.com/public/note/PCFDCp2xGFgAGGGH8\nboth setHTML or setContents seem to take equally long time to load this note. \n. Hi @jhchen \nI just tried the update. It works fast now, but it is not backwards compatible which is a big bummer! The quill editor will not load the saved full Delta with the new version, but as soon as I replace the js file with version v0.17.4 the contents load just fine.\nSo the issue is the the new v.0.18.0 will not load saved fullDeltas from previous version, so this new version is not backwards compatible. Can this be fixed? Thanks!\n. Hi @jhchen \nI just tried the update. It works fast now, but it is not backwards compatible which is a big bummer! The quill editor will not load the saved full Delta with the new version, but as soon as I replace the js file with version v0.17.4 the contents load just fine.\nSo the issue is the the new v.0.18.0 will not load saved fullDeltas from previous version, so this new version is not backwards compatible. Can this be fixed? Thanks!\n. @jhchen Ah I just read the comment for the v0.18.0 commit and read about the upgrade guide. Thanks I will be taking a look at the upgrade guide. Thanks!\n. @jhchen Ah I just read the comment for the v0.18.0 commit and read about the upgrade guide. Thanks I will be taking a look at the upgrade guide. Thanks!\n. Ah well the UX issue was that the link modal was opening over the text. This is because the link modal is confined to its parent container and so the text near the top of the note would be covered by the link modal.\nAlso\nThe link modal does not hide reliably. \nI had to add this code to make sure the link modal goes away when not in use\ncoffeescript\n@$('.quill-note-container').mousedown (e) ->\n      unless $(e.target).is('a') or $(e.target).parent().is('a')\n        $('.ql-tooltip.ql-link-tooltip:not(.editing)').css 'left', '-10000px'\n. Quill now disables Grammarly by default in Quill's source code by adding 'data-gramm=false' attribute to .ql-editor\nI was fine with this for awhile, but I find that using Grammarly would be a benefit to my users, and I want to use it along with Quill.\nBut I do not want to risk the data integrity of my users Quill data.\nI just thought I would post to request any helpful information on getting Grammarly to work well with Quill. \nI have used \nlet Inline = Quill.import('blots/inline');\nclass GrammarlyInline extends Inline {}\nGrammarlyInline.tagName = 'G';\nGrammarlyInline.blotName = 'grammarly-inline';\nGrammarlyInline.className = 'gr_';\nQuill.register(GrammarlyInline);\nBut as @jhchen mentioned, this has not been tested thoroughly and it pollutes Deltas with Grammarly classes. \nI am in search of a good solution. Quill now disables Grammarly by default in Quill's source code by adding 'data-gramm=false' attribute to .ql-editor\nI was fine with this for awhile, but I find that using Grammarly would be a benefit to my users, and I want to use it along with Quill.\nBut I do not want to risk the data integrity of my users Quill data.\nI just thought I would post to request any helpful information on getting Grammarly to work well with Quill. \nI have used \nlet Inline = Quill.import('blots/inline');\nclass GrammarlyInline extends Inline {}\nGrammarlyInline.tagName = 'G';\nGrammarlyInline.blotName = 'grammarly-inline';\nGrammarlyInline.className = 'gr_';\nQuill.register(GrammarlyInline);\nBut as @jhchen mentioned, this has not been tested thoroughly and it pollutes Deltas with Grammarly classes. \nI am in search of a good solution. I wish Grammarly worked with Quill.... \nIt costs time for users to copy out of Quill and into Grammarly... and can be a negative for your application. \nSpelling and grammar check is quite important to users so I wish there was a solution to get Grammarly working with Quill reliably. . I wish Grammarly worked with Quill.... \nIt costs time for users to copy out of Quill and into Grammarly... and can be a negative for your application. \nSpelling and grammar check is quite important to users so I wish there was a solution to get Grammarly working with Quill reliably. . @mikewagz \nThe only solution is to:\n\n\nAfter Quill initialization remove the data-gramm=false attribute on Quill.\n\n\nThen you need to add this code to client app:\n\n\nlet Inline = Quill.import('blots/inline');\nclass GrammarlyInline extends Inline {}\nGrammarlyInline.tagName = 'G';\nGrammarlyInline.blotName = 'grammarly-inline';\nGrammarlyInline.className = 'gr_';\nQuill.register(GrammarlyInline);\nGrammarly will work, but we are not quite sure about the side effects. If you try it out let us know if you experience any negative side effects.. whoah, checkboxes are already in core. I was browsing through the list Attributor code and noticed checkbox code all over. \nSo I tried adding the list check item to my toolbar like so\n[{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }]\nAnd guess what the checkbox icon appears! And it even works with the history stack. \n@jhchen aside from the icon in the toolbar lighting up, is this feature production ready? \nAlso, the checkbox CSS could look better. It is quite small and hard to see. \nWith the new checklist option there are now 3 list options. \nWould it be better to design the list element as a drop-down in the toolbar similar to the alignment drop-down?. So I have been using the checkbox list in quill and I am thinking that when you check something off, it should also add a strikethrough to the text on that item.. @patleeman hey great idea thanks!. @jhchen I have noticed that checking and unchecking the checkbox on mobile is an issue.\nOn mobile, if you try to check a box while the editor has focus it does not work.\nIf you blur the editor, hide the keyboard, and then check the box it works, but then it focuses the editor again. So then you have to blur the editor if you want to check another checkbox..\nideally on mobile anytime you tap the checkbox it should just toggle it whether the editor is blurred or not. . @patleeman The css you provided for larger checkboxes appears to not work on mobile (tested with iOS 10.3.3). \nThe checked icon shows, but the box disappeared. . This update fixes it\nhttps://github.com/quilljs/quill/commit/64841e3285246e708b249398ed47cbbcb2350fa5?diff=split\n. This update fixes it\nhttps://github.com/quilljs/quill/commit/64841e3285246e708b249398ed47cbbcb2350fa5?diff=split\n. Im curious why even have this code? What's the purpose of it? Why should the editor ever control the scroll position of the body?\n``` javascript\n        let scrollTop;\n        this.root.addEventListener('blur', () => {\n          scrollTop = this.root.scrollTop;\n        });\n    this.root.addEventListener('focus', () => {\n      if (scrollTop == null) return;\n      this.root.scrollTop = scrollTop;\n    });\n\n```\n. Im curious why even have this code? What's the purpose of it? Why should the editor ever control the scroll position of the body?\n``` javascript\n        let scrollTop;\n        this.root.addEventListener('blur', () => {\n          scrollTop = this.root.scrollTop;\n        });\n    this.root.addEventListener('focus', () => {\n      if (scrollTop == null) return;\n      this.root.scrollTop = scrollTop;\n    });\n\n```\n. @jhchen hmm yah I got it from a commit 22 days ago. But with the newest quill beta 11 \njs\n        var scrollTop = void 0,\n            bodyTop = void 0;\n        this.root.addEventListener('blur', function () {\n          scrollTop = _this.root.scrollTop;\n          bodyTop = document.body.scrollTop;\n        });\n        this.root.addEventListener('focus', function (event) {\n          if (scrollTop == null) return;\n          _this.root.scrollTop = scrollTop;\n          document.body.scrollTop = bodyTop;\n        });\nThis code make the page jump when blur and focus are triggered between editors. I am using multiple quill editors on the same page. \nSo I just commented that snippet of code out. \nWhat is it for? There seems to be no issues with the editor. The way I use the quill editor, it is inline, so the editor itself never has a scrollbar, only the body of the page. The editor div can grow and shrink based on the content. \n. @jhchen hmm yah I got it from a commit 22 days ago. But with the newest quill beta 11 \njs\n        var scrollTop = void 0,\n            bodyTop = void 0;\n        this.root.addEventListener('blur', function () {\n          scrollTop = _this.root.scrollTop;\n          bodyTop = document.body.scrollTop;\n        });\n        this.root.addEventListener('focus', function (event) {\n          if (scrollTop == null) return;\n          _this.root.scrollTop = scrollTop;\n          document.body.scrollTop = bodyTop;\n        });\nThis code make the page jump when blur and focus are triggered between editors. I am using multiple quill editors on the same page. \nSo I just commented that snippet of code out. \nWhat is it for? There seems to be no issues with the editor. The way I use the quill editor, it is inline, so the editor itself never has a scrollbar, only the body of the page. The editor div can grow and shrink based on the content. \n. hmm but for me on chrome it just makes the editor jump around on focus and blur. So I removed that snippet, and everything seems to be ok. \n. hmm but for me on chrome it just makes the editor jump around on focus and blur. So I removed that snippet, and everything seems to be ok. \n. Just tested and it does work in mobile Safari. This method is working pretty robustly for me. No issues so far. Without it, pasting content is really frustrating for user. \n. Just tested and it does work in mobile Safari. This method is working pretty robustly for me. No issues so far. Without it, pasting content is really frustrating for user. \n. Actually I realize that since the history stack is a complicated object with nested array and prototype functions it is difficult to save and reload. Any advice?\n. Actually I realize that since the history stack is a complicated object with nested array and prototype functions it is difficult to save and reload. Any advice?\n. I figured it out. \nI am now able to save the complete history stack to the server and reload it again. \nI edited the quill.js file directly for now but eventually I want to make a pull request. \nHere is how I save the data to mongoDB\ndata.historyStack = jQuery.extend(true, {}, t.editor.history.stack)\nthat clones the information in the stack object to save in DB\nThen when the editor loads again you do\ncoffeescript\nif t.data.historyStack? # if there exists a saved stack\n      quill.history.loadHistoryStack(t.data.historyStack)\nHere is the new user function I added to the history module\njavascript\n{\n        key: 'loadHistoryStack',\n        value: function loadHistoryStack(stack) {\n          if (stack.undo.length > 0) {\n            for (var i = 0; i < stack.undo.length; i++) {\n                var ob = {};\n                ob.redo = new Delta(stack.undo[i].redo.ops);\n                ob.undo = new Delta(stack.undo[i].undo.ops);\n                this.stack.undo.push(ob)\n            }\n          }\n          if (stack.redo.length > 0) {\n            for (var i = 0; i < stack.redo.length; i++) {\n                var ob = {};\n                ob.redo = new Delta(stack.redo[i].redo.ops);\n                ob.undo = new Delta(stack.redo[i].undo.ops);\n                this.stack.redo.push(ob)\n            }\n          }\n        }  \n      }\nOne problem that I ran into was accessing the scope of the Delta class since it was not exposed in the function. \nSo at the top of the file I added var Delta; so Delta was exposed to the whole file. Not the best, so can you recommend a change. How can I get access to Delta object in history module?\n. I figured it out. \nI am now able to save the complete history stack to the server and reload it again. \nI edited the quill.js file directly for now but eventually I want to make a pull request. \nHere is how I save the data to mongoDB\ndata.historyStack = jQuery.extend(true, {}, t.editor.history.stack)\nthat clones the information in the stack object to save in DB\nThen when the editor loads again you do\ncoffeescript\nif t.data.historyStack? # if there exists a saved stack\n      quill.history.loadHistoryStack(t.data.historyStack)\nHere is the new user function I added to the history module\njavascript\n{\n        key: 'loadHistoryStack',\n        value: function loadHistoryStack(stack) {\n          if (stack.undo.length > 0) {\n            for (var i = 0; i < stack.undo.length; i++) {\n                var ob = {};\n                ob.redo = new Delta(stack.undo[i].redo.ops);\n                ob.undo = new Delta(stack.undo[i].undo.ops);\n                this.stack.undo.push(ob)\n            }\n          }\n          if (stack.redo.length > 0) {\n            for (var i = 0; i < stack.redo.length; i++) {\n                var ob = {};\n                ob.redo = new Delta(stack.redo[i].redo.ops);\n                ob.undo = new Delta(stack.redo[i].undo.ops);\n                this.stack.redo.push(ob)\n            }\n          }\n        }  \n      }\nOne problem that I ran into was accessing the scope of the Delta class since it was not exposed in the function. \nSo at the top of the file I added var Delta; so Delta was exposed to the whole file. Not the best, so can you recommend a change. How can I get access to Delta object in history module?\n. Here is how I was able to do it without editing the source code at all. But I recommend having this part of the history module. There should be 2 functions added to history module. The code below is exactly how to achieve this. \n1) exportStack()\n2) importStack(stack)\n``` coffeescript\nloadHistoryStack = (stack) ->\nif stack.undo.length > 0\n  i = 0\n  while i < stack.undo.length\n    ob = {}\n\n    deltaObRedo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n    deltaObUndo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n\n    deltaObRedo.ops = _.clone(stack.undo[i].redo.ops)\n    deltaObUndo.ops = _.clone(stack.undo[i].undo.ops)\n\n    ob.redo = deltaObRedo\n    ob.undo = deltaObUndo\n\n    t.editor.history.stack.undo.push ob\n    i++\n\nif stack.redo.length > 0\n  i = 0\n  while i < stack.redo.length\n    ob = {}\n\n    deltaObRedo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n    deltaObUndo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n\n    deltaObRedo.ops = _.clone(stack.redo[i].redo.ops)\n    deltaObUndo.ops = _.clone(stack.redo[i].undo.ops)\n\n    ob.redo = deltaObRedo\n    ob.undo = deltaObUndo\n\n    t.editor.history.stack.redo.push ob\n    i++\n\nMeteor.defer ->\nif t.data.historyStack? \n  loadHistoryStack(t.data.historyStack)\n\n```\n. Here is how I was able to do it without editing the source code at all. But I recommend having this part of the history module. There should be 2 functions added to history module. The code below is exactly how to achieve this. \n1) exportStack()\n2) importStack(stack)\n``` coffeescript\nloadHistoryStack = (stack) ->\nif stack.undo.length > 0\n  i = 0\n  while i < stack.undo.length\n    ob = {}\n\n    deltaObRedo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n    deltaObUndo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n\n    deltaObRedo.ops = _.clone(stack.undo[i].redo.ops)\n    deltaObUndo.ops = _.clone(stack.undo[i].undo.ops)\n\n    ob.redo = deltaObRedo\n    ob.undo = deltaObUndo\n\n    t.editor.history.stack.undo.push ob\n    i++\n\nif stack.redo.length > 0\n  i = 0\n  while i < stack.redo.length\n    ob = {}\n\n    deltaObRedo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n    deltaObUndo = Object.create Object.getPrototypeOf(t.editor.editor.delta)\n\n    deltaObRedo.ops = _.clone(stack.redo[i].redo.ops)\n    deltaObUndo.ops = _.clone(stack.redo[i].undo.ops)\n\n    ob.redo = deltaObRedo\n    ob.undo = deltaObUndo\n\n    t.editor.history.stack.redo.push ob\n    i++\n\nMeteor.defer ->\nif t.data.historyStack? \n  loadHistoryStack(t.data.historyStack)\n\n```\n. For printing I actually render the quill editor with no toolbar, no theme, and read only inside a hidden div. Then  once rendered I grab the html inside the div and use window.open to open a new window with the html generated after rendering the editor. This is a very clean way to print as all that is printed is the actual contents from the quill editor, with all its formatting still intact. \nRemember if using window.open, you will have to also load the quill css file into that window. For printing I had to edit the quill css file and remove height attribute from ql-container and ql-editor so there were no scrollbars. I also added an img css rule to have images be a max-width. \n. For printing I actually render the quill editor with no toolbar, no theme, and read only inside a hidden div. Then  once rendered I grab the html inside the div and use window.open to open a new window with the html generated after rendering the editor. This is a very clean way to print as all that is printed is the actual contents from the quill editor, with all its formatting still intact. \nRemember if using window.open, you will have to also load the quill css file into that window. For printing I had to edit the quill css file and remove height attribute from ql-container and ql-editor so there were no scrollbars. I also added an img css rule to have images be a max-width. \n. @benbro I remember the authorship module from previous Quill. \nI used it to show which edits where made by which person when 2 people having access to edit a specific document. \nI lock it down so only one person can make an edit at a time though. works for what I need to do, so I don't need multiple cursors. \nBut still showing which edit was made by which user would be cool.\nI remember the authorship module would add a class to contain the elements that were added by a user.\nI wonder if the authorship module will be introduced as a separate plugin?\n. @benbro I remember the authorship module from previous Quill. \nI used it to show which edits where made by which person when 2 people having access to edit a specific document. \nI lock it down so only one person can make an edit at a time though. works for what I need to do, so I don't need multiple cursors. \nBut still showing which edit was made by which user would be cool.\nI remember the authorship module would add a class to contain the elements that were added by a user.\nI wonder if the authorship module will be introduced as a separate plugin?\n. Looks like first step is to update authorship module to work with 1.0\nI am looking at the code here:\nhttps://github.com/quilljs/quill/blob/0.20.1/src/modules/authorship.coffee\nand comparing it with the docs here:\nhttps://quilljs.com/docs/modules/\nChanges I notice that the update will need.\nInstead of Quill.registerModule its just Quill.register\nWe don't need to export the module. \nNot really sure what else...\nAm I looking at the right place in the docs on how to create a module for Quill 1.0? \n. Looks like first step is to update authorship module to work with 1.0\nI am looking at the code here:\nhttps://github.com/quilljs/quill/blob/0.20.1/src/modules/authorship.coffee\nand comparing it with the docs here:\nhttps://quilljs.com/docs/modules/\nChanges I notice that the update will need.\nInstead of Quill.registerModule its just Quill.register\nWe don't need to export the module. \nNot really sure what else...\nAm I looking at the right place in the docs on how to create a module for Quill 1.0? \n. @benbro ok cool thanks missed that guide. \nSo it looks like this is the minimum that's needed to make a Quill module\n// Implement and register module\nQuill.register('modules/counter', function(quill, options) {\n  var container = document.querySelector('#counter');\n  quill.on('text-change', function() {\n    var text = quill.getText();\n    // There are a couple issues with counting words\n    // this way but we'll fix these later\n    container.innerHTML = text.split(/\\s+/).length;\n  });\n});\nso after looking at the code here\nhttps://github.com/quilljs/quill/blob/0.20.1/src/modules/authorship.coffee\nIt looks like everything in the constructor and all the functions will go into the register modules functions. The options are passed in so we can use that. \nAfter quick looks looks like I could use the authorship code pretty much as is, and just adjust it to fit the new format. \n. @benbro ok cool thanks missed that guide. \nSo it looks like this is the minimum that's needed to make a Quill module\n// Implement and register module\nQuill.register('modules/counter', function(quill, options) {\n  var container = document.querySelector('#counter');\n  quill.on('text-change', function() {\n    var text = quill.getText();\n    // There are a couple issues with counting words\n    // this way but we'll fix these later\n    container.innerHTML = text.split(/\\s+/).length;\n  });\n});\nso after looking at the code here\nhttps://github.com/quilljs/quill/blob/0.20.1/src/modules/authorship.coffee\nIt looks like everything in the constructor and all the functions will go into the register modules functions. The options are passed in so we can use that. \nAfter quick looks looks like I could use the authorship code pretty much as is, and just adjust it to fit the new format. \n. @kminehart the first step to get Multiple Cursors working is to get the authorship module to work.\nhttps://github.com/quilljs/quill/pull/1049\n@benbro has already ported the code from quill 0.2 to be compatible with the new Quill \nBut it has issues. \nI've been working a lot with this issue because I am using the authorship module in my app and I have added a hack fix to patch the issue, but I am not sure if it will have unwanted side effects, although I haven't noticed any yet. \nYou can track the issue here: https://github.com/quilljs/quill/issues/1057\nBasically the authorship module keeps track of who edited what content by wrapping the text in a span element with a class unique to that author. \nBut an issue with html5 contenteditables is typing in span elements makes the cursor disappear. So we need to think of a solution. I posted mine fix where the issue is being tracked (https://github.com/quilljs/quill/issues/1057).\nLet me know if you have any ideas or suggestions. \n. @kminehart the first step to get Multiple Cursors working is to get the authorship module to work.\nhttps://github.com/quilljs/quill/pull/1049\n@benbro has already ported the code from quill 0.2 to be compatible with the new Quill \nBut it has issues. \nI've been working a lot with this issue because I am using the authorship module in my app and I have added a hack fix to patch the issue, but I am not sure if it will have unwanted side effects, although I haven't noticed any yet. \nYou can track the issue here: https://github.com/quilljs/quill/issues/1057\nBasically the authorship module keeps track of who edited what content by wrapping the text in a span element with a class unique to that author. \nBut an issue with html5 contenteditables is typing in span elements makes the cursor disappear. So we need to think of a solution. I posted mine fix where the issue is being tracked (https://github.com/quilljs/quill/issues/1057).\nLet me know if you have any ideas or suggestions. \n. @pedrosanta wow this is cool work. I will be following the progress. I have quill running in my meteor app and would like to integrate but still a little lost on how I would set this up. Maybe if I have more time I can get it working. If you ever get around to making some rough documentation that would be helpful as well. . has any extra code been added to the demo to get it to focus on mobile?\n. has any extra code been added to the demo to get it to focus on mobile?\n. I figured it out! damn the package fastclick. It was included in my meteor project and really messed up the experience on mobile. \nIf you are using Quill editor, get rid of fastclick! \n. I figured it out! damn the package fastclick. It was included in my meteor project and really messed up the experience on mobile. \nIf you are using Quill editor, get rid of fastclick! \n. I just noticed that on a page with multiple quill editors. \nThe first editor on the page does not work with the formula module.\nBut the editors below do work with it. I wonder whats going on? In the playground since there is only one editor, it does not work. \n. I just noticed that on a page with multiple quill editors. \nThe first editor on the page does not work with the formula module.\nBut the editors below do work with it. I wonder whats going on? In the playground since there is only one editor, it does not work. \n. This issue is due to fastclick. it was a dependency on one of the packages I was using. \nIf you need fastclick lookup in the docs about the 'needsclick' class. This needs to be added to quill editor and all child elements. Lookup \"fastclick apply needsclick to all children\" for your answer\n. This issue is due to fastclick. it was a dependency on one of the packages I was using. \nIf you need fastclick lookup in the docs about the 'needsclick' class. This needs to be added to quill editor and all child elements. Lookup \"fastclick apply needsclick to all children\" for your answer\n. @benbro I still believe there is an issue with this module. \nThe cursor disappears as soon as you start typing. I set the background to transparent and still the cursor disappears. So this is not due to the cursor blending in with background. \nauthorship:\n          enabled: true\n          authorId: 'me'\n          color: 'transparent'\nI am positive it is the authorship module, because when I comment out the authorship module when initializing quill, the cursor does not disappear. The cursor disappears yet the editor remains focused. If you press the back arrow key, the cursor reappears again. When you start typing, it disappears. \nThis is not an issue for you? Can you test again? When quill is updating the content silently maybe the cursor disappears. \n. @benbro I still believe there is an issue with this module. \nThe cursor disappears as soon as you start typing. I set the background to transparent and still the cursor disappears. So this is not due to the cursor blending in with background. \nauthorship:\n          enabled: true\n          authorId: 'me'\n          color: 'transparent'\nI am positive it is the authorship module, because when I comment out the authorship module when initializing quill, the cursor does not disappear. The cursor disappears yet the editor remains focused. If you press the back arrow key, the cursor reappears again. When you start typing, it disappears. \nThis is not an issue for you? Can you test again? When quill is updating the content silently maybe the cursor disappears. \n. Solution: https://github.com/quilljs/quill/issues/1057#issuecomment-254077299\n. Solution: https://github.com/quilljs/quill/issues/1057#issuecomment-254077299\n. @sbevels \nThe module needs to be built with Quill. I don't think you can add as custom module. . @benbro @jhchen \nUsing quill 1.1.9 I found a new issue with the authorship module. I also have a hack (code below) which serves as a solution to this issue.  \nSay 2 different users are editing a quill document. Each user has a different authorClass. \nWhen 2 different authors edit content you get dom html that looks like this:\nhtml\n<span class=\"ql-author-guest\">Hello from Guest Author</span>\n<span class=\"ql-author-ph3MwMWaGGMbP2qdR\">Main Author is typing here</span>\nNow imagine that I am author ql-author-ph3MwMWaGGMbP2qdR and I click at the end of the <span class=\"ql-author-guest\"> created by the guest author to add a few words to the sentence Hello from Guest Author. When I start typing the next character goes in front of the cursor and the cursor gets stuck in the previous author span element. \nI think this might be due to a browser bug? But now sure....\nI was able to come up with a fix\n```coffeescript\n  sel = rangy.getSelection()\n  node = sel?.nativeSelection.anchorNode\nif sel.isCollapsed\n    if node? and !$(node).hasClass('ql-clipboard')\n      if Meteor.userId()\n        authorClass = 'ql-author-' + Meteor.userId()\n      else\n        authorClass = 'ql-author-guest'\n  if !$(node).hasClass(authorClass) and $(node).is('span') and ($(node).attr('class').indexOf('ql-author') isnt -1)\n    if sel.rangeCount and sel.anchorOffset > 0\n      if node.nextSibling? and $(node.nextSibling).hasClass(authorClass)\n        range = sel.getRangeAt(0)\n        range.collapse false\n\n        range.collapseToPoint(node.nextSibling, 1)\n        sel.setSingleRange range\n\n\n        # The code above explains the issue and I should only need the code above. \n        # But for some reason I have to add the code below because otherwise \n        # the cursor gets placed at the end of the next span element instead of the beggining. \n        # Even though I specify the beggining at index 1.\n        sel = rangy.getSelection()\n        node = sel?.nativeSelection.anchorNode\n        range.refresh()\n        range.collapseToPoint(node, 1)\n        sel.setSingleRange range\n\n```\nAs you can see I am checking if the node you are typing in has your own authorClass. If not, that's an issue, and we need to move the cursor over to the next node at index 1. This is the newly created span element with your authorClass and the cursor is positioned right after the first character you started to type. From that point on everything is good because you are typing in the correct span element of your own authorClass. \nThe hack kicks in only when it detects that you are not typing in a span element of your own authorClass, which is the issue. \nTested with Quill 1.1.9 and all seems to be working with this fix. \nLet me know if I should open a new issue for this and link it back to this one. . @benbro @jhchen \nUsing quill 1.1.9 I found a new issue with the authorship module. I also have a hack (code below) which serves as a solution to this issue.  \nSay 2 different users are editing a quill document. Each user has a different authorClass. \nWhen 2 different authors edit content you get dom html that looks like this:\nhtml\n<span class=\"ql-author-guest\">Hello from Guest Author</span>\n<span class=\"ql-author-ph3MwMWaGGMbP2qdR\">Main Author is typing here</span>\nNow imagine that I am author ql-author-ph3MwMWaGGMbP2qdR and I click at the end of the <span class=\"ql-author-guest\"> created by the guest author to add a few words to the sentence Hello from Guest Author. When I start typing the next character goes in front of the cursor and the cursor gets stuck in the previous author span element. \nI think this might be due to a browser bug? But now sure....\nI was able to come up with a fix\n```coffeescript\n  sel = rangy.getSelection()\n  node = sel?.nativeSelection.anchorNode\nif sel.isCollapsed\n    if node? and !$(node).hasClass('ql-clipboard')\n      if Meteor.userId()\n        authorClass = 'ql-author-' + Meteor.userId()\n      else\n        authorClass = 'ql-author-guest'\n  if !$(node).hasClass(authorClass) and $(node).is('span') and ($(node).attr('class').indexOf('ql-author') isnt -1)\n    if sel.rangeCount and sel.anchorOffset > 0\n      if node.nextSibling? and $(node.nextSibling).hasClass(authorClass)\n        range = sel.getRangeAt(0)\n        range.collapse false\n\n        range.collapseToPoint(node.nextSibling, 1)\n        sel.setSingleRange range\n\n\n        # The code above explains the issue and I should only need the code above. \n        # But for some reason I have to add the code below because otherwise \n        # the cursor gets placed at the end of the next span element instead of the beggining. \n        # Even though I specify the beggining at index 1.\n        sel = rangy.getSelection()\n        node = sel?.nativeSelection.anchorNode\n        range.refresh()\n        range.collapseToPoint(node, 1)\n        sel.setSingleRange range\n\n```\nAs you can see I am checking if the node you are typing in has your own authorClass. If not, that's an issue, and we need to move the cursor over to the next node at index 1. This is the newly created span element with your authorClass and the cursor is positioned right after the first character you started to type. From that point on everything is good because you are typing in the correct span element of your own authorClass. \nThe hack kicks in only when it detects that you are not typing in a span element of your own authorClass, which is the issue. \nTested with Quill 1.1.9 and all seems to be working with this fix. \nLet me know if I should open a new issue for this and link it back to this one. . @sbevels I am not understanding why this issue or change https://github.com/quilljs/quill/issues/1152 has affected the authorship module in the way I described. . @sbevels I am not understanding why this issue or change https://github.com/quilljs/quill/issues/1152 has affected the authorship module in the way I described. . Another issue I notice with the current authorship module has to do with the selection. This seems to be related to #1152 which @sbevels  mentioned. \nWhen you use the toolbar to format a word in the middle of a sentence, for example making a word bold. And then while the toolbar is still open, un-bold the word, the selection highlights the entire div. \nYou can try it here, I am running quill 1.1.9 with the authorship module.\nwww.memrey.com/n/test-quill\nI am not sure what is going on or how to fix this. Any advice @sbevels ?\n. actually @sbevels I was able to fix it by referencing the #1152 \nI made the change on line 397 seen here https://github.com/quilljs/quill/commit/51c03ba60d4c27d66ade7b7ff505c24ebd943fff\nI changed \nif (range != null && source === Emitter.sources.USER) {\nto \nif (range != null) {\nAnd now the selection is preserved. . @sbevels And also after making the changes I saw in that commit you referred to the original hack is also not needed anymore! Thanks. @jhchen This commit  https://github.com/quilljs/quill/commit/51c03ba60d4c27d66ade7b7ff505c24ebd943fff\nfixed the bugs with the authorship module I mentioned above. With the fixes in that commit the authorship module seems to be working perfectly fine now with no hacks needed. \n. @benbro @jhchen \nAn issue that needs to be fixed with authorship before official integration is to account for authorship in the history module. \nRight now when you undo and redo edits with the history module, it does not account for authorship module class tags. Like if you undo 20 steps and the redo 20 steps, Quill will render all the edits under your authors username, instead of redoing the actual author that originally made the edit. Basically the history module needs to save authorship classes as well. \nI have moved this issue over to a new issue thread.\nhttps://github.com/quilljs/quill/issues/1371. @benbro @jhchen \nAn issue that needs to be fixed with authorship before official integration is to account for authorship in the history module. \nRight now when you undo and redo edits with the history module, it does not account for authorship module class tags. Like if you undo 20 steps and the redo 20 steps, Quill will render all the edits under your authors username, instead of redoing the actual author that originally made the edit. Basically the history module needs to save authorship classes as well. \nI have moved this issue over to a new issue thread.\nhttps://github.com/quilljs/quill/issues/1371. @benbro \nI figured it out! \nBased upon this stackoverflow: http://stackoverflow.com/questions/25897883/edit-cursor-not-displayed-on-chrome-in-contenteditable\nIt is because the authorship module nests the text inside a span element. In chrome this makes it hide the cursor\nI fixed it in my app and your codepen by adding the css\n.ql-editor span {\n  display: inline-block;\n  min-width: 1px;\n}\nThe cursor now appears like normal. \nI am not sure of any unwanted side effects from adding this css. Please let me know if you see any side effects. Otherwise this could be the solution.\n. @benbro \nI figured it out! \nBased upon this stackoverflow: http://stackoverflow.com/questions/25897883/edit-cursor-not-displayed-on-chrome-in-contenteditable\nIt is because the authorship module nests the text inside a span element. In chrome this makes it hide the cursor\nI fixed it in my app and your codepen by adding the css\n.ql-editor span {\n  display: inline-block;\n  min-width: 1px;\n}\nThe cursor now appears like normal. \nI am not sure of any unwanted side effects from adding this css. Please let me know if you see any side effects. Otherwise this could be the solution.\n. @jhchen you are right. I noticed this issue. \nI found a way to fix it. Here is my current fix, and I have not found any issues or side effects with it so far\n``` coffeescript\nt.editor.on 'text-change', (delta, oldDelta, source) ->\nif source is 'user'\n\n  # hack to fix invisible cursor in span element due to authorship module\n  node = document.getSelection().anchorNode\n  if node? \n    sel = document.getSelection()\n    sel?.collapse(node, 1)\n\n```\n. Here is my latest update to the fix\n``` coffeescript\nt.editor.on 'text-change', (delta, oldDelta, source) ->\nif source is 'user'\n\n  # hack to fix invisible cursor in span element due to authorship module\n\nsel = rangy.getSelection()\nnode = sel?.nativeSelection.anchorNode\n\nif sel.isCollapsed\n  if node? and !$(node).hasClass('ql-clipboard')\n    if sel.rangeCount and sel.anchorOffset > 0\n      range = sel.getRangeAt(0)\n      range.collapse false\n      range.collapseAfter(node)\n      sel.setSingleRange range\n\n```\nThe previous fix had some issues when pasting in text. This one works as far as I can tell\n. Here is my latest update to the fix\n``` coffeescript\nt.editor.on 'text-change', (delta, oldDelta, source) ->\nif source is 'user'\n\n  # hack to fix invisible cursor in span element due to authorship module\n\nsel = rangy.getSelection()\nnode = sel?.nativeSelection.anchorNode\n\nif sel.isCollapsed\n  if node? and !$(node).hasClass('ql-clipboard')\n    if sel.rangeCount and sel.anchorOffset > 0\n      range = sel.getRangeAt(0)\n      range.collapse false\n      range.collapseAfter(node)\n      sel.setSingleRange range\n\n```\nThe previous fix had some issues when pasting in text. This one works as far as I can tell\n. So I have been using the fix above for sometime now as it is needed if you are using the authorship module but today I noticed issues with the hack fix and android mobile. \nThe toolbar keeps flashing if using the bubble theme, and at the beggining of a new line it capitalizes and autoselects itself when typing on android mobile keyboard. Just has funky effects. \nSo I disabled authorship on mobile devices. but on desktop I still use the module and the fix appears to work fine. \nI wonder what a longterm solution to this problem? Any idea @jhchen . So I have been using the fix above for sometime now as it is needed if you are using the authorship module but today I noticed issues with the hack fix and android mobile. \nThe toolbar keeps flashing if using the bubble theme, and at the beggining of a new line it capitalizes and autoselects itself when typing on android mobile keyboard. Just has funky effects. \nSo I disabled authorship on mobile devices. but on desktop I still use the module and the fix appears to work fine. \nI wonder what a longterm solution to this problem? Any idea @jhchen . Basically, should the authorship module still works by adding the authors class to the content the author has added? And if so should we add it using a span element? \nThen if the way the authors edits are being tracked remains the same, we will have to figure out a solution to the cursor issue. Because the cursor disappears in a contenteditable element if you start typing in a  element because the  element collapses because it has no height. I remember I tried using a css fix before like min-height, or making span element block with no success. Most of what I tried had issues. \nSo then I tried the javascript solution. \nIt works on desktop as far as I can tell, but I am not sure what to do about mobile. \nI really wish there was a solution for this, and I wonder what others think. Basically, should the authorship module still works by adding the authors class to the content the author has added? And if so should we add it using a span element? \nThen if the way the authors edits are being tracked remains the same, we will have to figure out a solution to the cursor issue. Because the cursor disappears in a contenteditable element if you start typing in a  element because the  element collapses because it has no height. I remember I tried using a css fix before like min-height, or making span element block with no success. Most of what I tried had issues. \nSo then I tried the javascript solution. \nIt works on desktop as far as I can tell, but I am not sure what to do about mobile. \nI really wish there was a solution for this, and I wonder what others think. Actually the weird issues on Android Mobile was not due to authorship and cursor hack fix. \nIt is actually an issue with Quill itself. I disabled bubble theme on mobile so this fixed the issue. \nThe other issue about autoselecting the first capitalized letter of a sentence I am still not sure about. \nSo there is a chance that the cursor fix\n```coffeescript\nt.editor.on 'text-change', (delta, oldDelta, source) ->\nif source is 'user'\n# hack to fix invisible cursor in span element due to authorship module\n\nsel = rangy.getSelection()\nnode = sel?.nativeSelection.anchorNode\n\nif sel.isCollapsed\n  if node? and !$(node).hasClass('ql-clipboard')\n    if sel.rangeCount and sel.anchorOffset > 0\n      range = sel.getRangeAt(0)\n      range.collapse false\n      range.collapseAfter(node)\n      sel.setSingleRange range\n\n```\nIs still a working solution for both mobile and desktop. I need to do more testing on mobile. It seems like iOS does not have issues but I have to check more on android. . Actually the weird issues on Android Mobile was not due to authorship and cursor hack fix. \nIt is actually an issue with Quill itself. I disabled bubble theme on mobile so this fixed the issue. \nThe other issue about autoselecting the first capitalized letter of a sentence I am still not sure about. \nSo there is a chance that the cursor fix\n```coffeescript\nt.editor.on 'text-change', (delta, oldDelta, source) ->\nif source is 'user'\n# hack to fix invisible cursor in span element due to authorship module\n\nsel = rangy.getSelection()\nnode = sel?.nativeSelection.anchorNode\n\nif sel.isCollapsed\n  if node? and !$(node).hasClass('ql-clipboard')\n    if sel.rangeCount and sel.anchorOffset > 0\n      range = sel.getRangeAt(0)\n      range.collapse false\n      range.collapseAfter(node)\n      sel.setSingleRange range\n\n```\nIs still a working solution for both mobile and desktop. I need to do more testing on mobile. It seems like iOS does not have issues but I have to check more on android. . @danielschwartz \nRangy is a popular library used for manipulating selections and cursor https://github.com/timdown/rangy/wiki/Rangy-Selection. \nBut might not be needed.\nyou could probably replace sel = rangy.getSelection() with sel = window.getSelection()\nthen also update node = sel?.nativeSelection.anchorNode with node = sel.anchorNode\nI can't quite remember but I think I needed the rangy to get it to work accurately, but I could be wrong. Let me know what you find... thanks!\n. @danielschwartz \nRangy is a popular library used for manipulating selections and cursor https://github.com/timdown/rangy/wiki/Rangy-Selection. \nBut might not be needed.\nyou could probably replace sel = rangy.getSelection() with sel = window.getSelection()\nthen also update node = sel?.nativeSelection.anchorNode with node = sel.anchorNode\nI can't quite remember but I think I needed the rangy to get it to work accurately, but I could be wrong. Let me know what you find... thanks!\n. @danielschwartz Just the JS fix that I posted above.\nThe css fix of making span inline-block had undesired side effects which caused issues with formatting in the editor. So css is not a good fix, but I have found this JS fix to work well. Let me know if you find any side effects from the JS fix, but so far I have been using it for sometime and have not noticed any issues. . @danielschwartz Just the JS fix that I posted above.\nThe css fix of making span inline-block had undesired side effects which caused issues with formatting in the editor. So css is not a good fix, but I have found this JS fix to work well. Let me know if you find any side effects from the JS fix, but so far I have been using it for sometime and have not noticed any issues. . @jhchen @danielschwartz @benbro  \nWith the newest version of quill 1.1.8 the cursor does not disappear anymore with the authorship module added. \nI am not sure why? Do you know why? I checked and it is still using span element with class to define which author added the text. \nSo I removed the cursor fix I posted above because it doesn't work with the newest quill 1.1.8 but it is not even needed with it. Because the cursor does not disappear. I have no idea what fixed it.   . this is because my node and npm were old versions. Once I upgraded it would build just fine. \n. this is because my node and npm were old versions. Once I upgraded it would build just fine. \n. Whats the purpose of the code that is commented out above? \nThe editor pasting works so much better without it. \n. Whats the purpose of the code that is commented out above? \nThe editor pasting works so much better without it. \n. @jhchen \nAh I understand the issue. \nI will try and think about a long term solution and post it here. \nBut...\nYour codepen solution is works great as a temporary fix. I have uncommented the paste code in quill.js that was initially causing the issue, and am now using the extension of the clipboard module that you show in your codepen. \nIt works perfectly and I can paste and the scroll position does not jump. \n. @jhchen \nAh I understand the issue. \nI will try and think about a long term solution and post it here. \nBut...\nYour codepen solution is works great as a temporary fix. I have uncommented the paste code in quill.js that was initially causing the issue, and am now using the extension of the clipboard module that you show in your codepen. \nIt works perfectly and I can paste and the scroll position does not jump. \n. Its interesting. If you add a color to the large size text, and then copy and paste, then the size stays the same. Its only if its black text. \n. Its interesting. If you add a color to the large size text, and then copy and paste, then the size stays the same. Its only if its black text. \n. @jhchen your right, I actually found out that I had a mistake in my design which was causing this. I fixed it now and the toolbar works as expected. Not an issue with Quill. \n. @jhchen your right, I actually found out that I had a mistake in my design which was causing this. I fixed it now and the toolbar works as expected. Not an issue with Quill. \n. @ajoshi31 if z-index doesn't work then you will have to look at the layout of your dom elements and try adjusting the order of dom elements in html. Also check the overflow of the quill container and make sure its set to visible. \nIn my case I did a ton of restructuring of how the menu works and I noticed that the toolbar issue was resolved when I did. \n. @eamodio Trapping the mousedown on .ql-toolbar and calling e.preventDefault() fixes this. Preventing default on the parent seems to work best as it takes care of preventing blur for all buttons and dropdowns. Any reason why just the buttons?\n@jhchen Trapping mousedown and calling e.preventDefault() on .ql-toolbar works well for me and chrome and firefox. Seems to be a solution as long as it works in Edge or IE. This fixes the selection from being removed while using the formatting toolbar even when clicking the dropdowns like for font or paragraph align. This is very simple change for big improvement, any reason it has not been implemented other than time? . @jhchen hmm I tested in chrome, firefox, safari, and edge and I cannot notice any issues. \nI prevent default on mousedown on the entire ql-toolbar. And so far the dropdowns work and even the link input works. I can select fonts, colors etc all with this fix and the selection stays nicely. \nI am deploying this fix to production and am going to see if anyone has issues. I will let you know what I find. If no issues arise maybe we can revisit this fix and see if it is appropriate now. . @dortzur try this out as a temp fix...\n```\nvar Clipboard = Quill.import('modules/clipboard');\nclass MyClipboard extends Clipboard {\n  onPaste(e) {\n    var wrapper = document.querySelector('html');\n    var scrollTop = wrapper.scrollTop;\n    super.onPaste(e);\n    setTimeout(function() {\n      wrapper.scrollTop = scrollTop;\n    }, 1);\n  }\n}\nQuill.register('modules/clipboard', MyClipboard, true);\n```\n. Another solution if you can build quill is to comment out scrollIntoView line in method onPaste in file clipboard.js\nonPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    this.container.focus();\n    setTimeout(() => {\n      this.quill.selection.update(Quill.sources.SILENT);\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      this.quill.selection.scrollIntoView(); // COMMENT OUT THIS LINE\n    }, 1);\n  }\nNot sure about the side effects. I am not sure why Quill even wants to scroll on paste. If you are pasting something into the editor, that means it is already focused, and the scroll position should not change.  . Also @dortzur I found this in the docs. scrollingContainer is an option you can pass in the container with the scrollbars. \n```\nscrollingContainer\nDefault: null\nSpecifies which container has the scrollbars (i.e. overflow-y: auto), if changed with CSS from the default ql-editor. Necessary to fix scroll jumping bugs when Quill is set to auto grow its height, and another ancestor container is responsible from the scrolling.\n```. @dortzur check out the quill issue\nhttps://github.com/quilljs/quill/issues/1374\nIn that thread I show a solution to completely stop any scroll jumping on paste. It works pretty well but requires you to edit quill source code...\n. @danielschwartz \nive been looking through the docs and cannot find any support for Todo List Checkbox items. I search other issues and I see it's currently a work in progress. \nAre you using a specific plugin? If you are and it is something I can take a look at, please let me know. I am looking to integrate this feature. \nAs this comment may be off topic for this thread I will eventually delete it. . @WinMinTun \nI looked at your code and there is one bug you missed. I originally missed this too when trying to get the history module to work....\nBasically if you undo few steps.... and then start editing text that a previous collaborator added, the text you add is tagged as the previous collaborator and not you. \nIn my code I have something like this\nif (!!Session && !!Session.get('historyActive')) {\n              op.attributes.author = op.attributes.author || this.options.authorId;\n            } else {\n              op.attributes.author = this.options.authorId;\n            }\nas you can see if I am undoing and redoing it will use the original author. But whenever I start typing it is fored to use my own authorId.. @WinMinTun Ok I looked at the code again and realized that I described the wrong situation... it should work when you undo and then edit another authors text.\nbut here is the correct bug description. \nif you have a document with multiple authors. and then undo to the beginning. and then redo all the undo steps again you will notice that you loose the history of all the previous authors. It will insert the operations again under your own authorId. I believe the history undo and redo should preserve the original authors. @WinMinTun \nhere is how I solved it\njavascript\nthis.quill.on(Quill.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n      if (eventName == Quill.events.TEXT_CHANGE && source == 'user') {\n        let authorDelta = new Delta();\n        delta.ops.forEach((op) => {\n          if(op.delete) {\n            return;\n          }\n          if(op.insert || (op.retain && op.attributes)) {\n            // Add authorship to insert/format\n            op.attributes = op.attributes || {};\n            if (youAreUsingAnUndoOrRedoStep) {\n              op.attributes.author = op.attributes.author || this.options.authorId;\n            } else {\n              op.attributes.author = this.options.authorId;\n            }\n            let authorFormat = { author: op.attributes.author };\n            // Apply authorship to our own editor\n            authorDelta.retain(op.retain || op.insert.length || 1, authorFormat);\n          } else {\n            authorDelta.retain(op.retain);\n          }\n        });\n        this.quill.updateContents(authorDelta, Quill.sources.SILENT);\n      }\n    });. @WinMinTun \nI am wondering why in your code you have this line\nthis.styleElement.innerHTML = css; // bug fix\n    // this.styleElement.sheet.insertRule(css, 0);\nwhy did you use this.styleElement.innerHTML = css; instead of this.styleElement.sheet.insertRule(css, 0); ?. @jhchen I'm narrowing in on the culprit....\nIn the onPaste function below the line this.container.focus(); is what causes the scroll to jump.\nIf I comment out that line the scroll does not jump anymore, but also after pasting in content, the cursor is still at the beginning of the pasted content, and not at the end. \njavascript\nonPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    this.container.focus(); // THIS LINE CAUSES SCROLL JUMPING\n    setTimeout(() => {\n      this.quill.selection.update(Quill.sources.SILENT);\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      this.quill.selection.scrollIntoView();\n    }, 1);\n  }. @jhchen Good news, I fixed it! I think this fix should make it into the next update. \nHere is the code I added. The code goes into the Clipboard Module. \nI add code in 2 spots, in the constructor and in the onPaste function. Here is the constructor\njavascript\nclass Clipboard extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.quill.root.addEventListener('paste', this.onPaste.bind(this));\n    this.container = this.quill.addContainer('ql-clipboard');\n    // NEW CODE BELOW\n    this.container.addEventListener('scroll', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (this.scrollTop) {\n        this.quill.scrollingContainer.scrollTop = this.scrollTop\n      }\n      return false;\n    });\n    // END OF NEW CODE\n    this.container.setAttribute('contenteditable', true);\n    this.container.setAttribute('tabindex', -1);\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers).forEach((pair) => {\n      this.addMatcher(...pair);\n    });\n  }\nand the onPaste function\njavascript\nonPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    // NEW CODE BELOW... JUST THE ONE LINE\n    this.scrollTop = scrollTop;\n    // END OF NEW CODE\n    this.container.focus();\n    setTimeout(() => {\n      this.quill.selection.update(Quill.sources.SILENT);\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      this.scrollTop = null;\n      this.quill.selection.scrollIntoView();\n    }, 1);\n  }\nAs you can see I added a function to hook into the scroll event of the ql-clipboard element. When the clipboard element is focused, it calls the scroll event... and in the scroll event function I set the scrollingContainer to be the saved scroll position. This works to keep the scroll position stable while pasting. \nNow, everytime I paste content, the scroll is completely stable. No jumping around or anything of the sort. Please let me know if you see any potential side effects, otherwise I recommend adding this change ASAP as the scroll jumping bug is pretty bad.. @jhchen \nThere is a way to prevent the flicker on desktop. I still notice the flicker on desktop with the current version of Quill. I have to use my own custom edited version with this code added to the contructor of Clipboard module\njavascript\n    _this.container.addEventListener('focus', function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (_this.scrollTop) {\n        _this.quill.scrollingContainer.scrollTop = _this.scrollTop;\n      }\n      return false;\n    });\n    _this.container.addEventListener('scroll', function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (_this.scrollTop) {\n        _this.quill.scrollingContainer.scrollTop = _this.scrollTop;\n      }\n      return false;\n    });\n_this.scrollTop is the saved scrolltop position from the onpaste function. \nIf you add this code it will improve stability of quill on paste. . @jhchen \nThe preventDefaults might not be doing anything but...\n_this.container.addEventListener('focus', function (e) {\n_this.container.addEventListener('scroll', function (e) {\naren't these even listeners earlier hooks to restore scroll? For me, the scroll jumps on desktop with original Quill, but when I added those lines there is no jumping on desktop. @jhchen \nI tried saving the scroll position in the setTimeout like you mentioned, instead of right before it. \nNo difference on desktop, but on mobile the jump is still visible. Saving the scroll position in the setTimeout actually makes the mobile jump a bit worse. So for now my custom fix remains the same. \nI also tried @ValueBerry css fix and it does not work on mobile in my testing on iOS 10.3\nstill an open issue, and for now the code I posted in my testing does the best job of fixing destop, and making mobile jump as small as possible. . @OnlyBreak I am using the quill history module and I do not see this issue. It works as expected.... @jhchen The toolbar pops up nicely and works as expected on mobile! I had tested on an iOS device. Thanks!. @jhchen oops sorry I had linked to my fork of quill where I added that change\nhere is where it pointed to in the original quill\nhttps://github.com/quilljs/quill/blob/develop/blots/cursor.js#L103\nits actually if (range) context.range = range;. @jhchen @patleeman \nThere is a mistake in this commit.\nOn mobile devices register both click and touch start events. So if the editor is not focused, and you check a box, it checks and then unchecks as both event handlers are called.\nYou only want to add one or the other.\nAdd touchstart handler if ('ontouchstart' in window)\notherwise, add the normal click event.. @jhchen I just submitted a pull request with this specific fix\nsferoze  wants to merge 1 commit into quilljs:develop from sferoze:quill-checkbox-touchstart-fix. @jhchen \nI was thinking about this and I am wondering something. Is there ever a case where touchstart is supported by a device, and also mousedown is supported? \nMaybe like the Surface? Which has a touch screen but also uses a mouse. I am not sure how that device handles it, but if touchstart is supported, you have to touch the screen to check the box. As the click listener is not added. \nMaybe this is more appropriate?\ndomNode.addEventListener('mousedown', listEventHandler);\ndomNode.addEventListener('touchstart', listEventHandler);\nIf we use mousedown instead of the click event, it will not be called twice as the mouse and touch events are completely seperate. \nIs this a better route or is the commit I have the better route? All depends on how something like the surface handles this... which I am not sure about. . @jhchen I made a new commit with both mousedown and touchstart event added. @EliteSpartan The phone we noticed the bug on was a new phone too. Were you using the default samsung keyboard with predictive text turned on?. Related issue: https://github.com/ianstormtaylor/slate/issues/725#issuecomment-335426240, and https://github.com/facebook/draft-js/issues/1077#issuecomment-321041952\nFix for input bug on Android - space or a special char clears the input - https://github.com/facebook/draft-js/pull/1500\nDraft-JS from facebook has fixed this issue in the code. Seems like a browser bug and it affects many users. @jhchen quill should look into applying similar fix somehow. Android users basically cannot use Quill if they have predictive text turned on. . @chimon2000 @JamesMcMahon \n@jhchen is one of the maintainers, and it looks like progress is being made on 2.0. But I have also been curious as to where it stands in regards to an official 2.0 release. @jhchen an update on 2.0 would be great! . ",
    "vivek3003": "Guys in the meantime you could use Quills custom module feature to create a remove format button. I am not sure if doing so will remove all formats but serves my use-case.\nThis removes certain formats from a selection.\n``` javascript\n(function(Quill, $) {\n    var formatButton = function(quill, options) {\n        this.quill = quill;\n        this.currentSelection = {};\n    this.$removeFormatButton = $('.format-btn'); // A button in toolbar\n    this.currentSelection = null;\n    var _ = this;\n\n    _.quill.on('selection-change', function(range) {\n        if (range) {\n            if (range.start != range.end) {\n                var text = _.quill.getText(range.start, range.end);\n                _.currentSelection = range;\n            }\n        }\n    });\n\n    _.$removeFormatButton.on('click', function(ev){\n        if(_.currentSelection !== null){\n            _.quill.formatText(_.currentSelection.start, _.currentSelection.end, {\n                'bold':false,\n                'italic':false,\n                'strike':false,\n                'underline':false,\n                'font':false,\n                'size':false,\n                'color':false,\n                'background':false\n            });// Removing these formats served my use case. Have not tested with other possible formats( http://quilljs.com/docs/formats/ )\n        }\n        _.currentSelection = null;\n    });\n};\nQuill.registerModule('format-button', formatButton);\n\n}(Quill, jQuery)); // jQuery is totally not required here.\n```\n. ",
    "3den": "When people copy content from word documents it comes full span tags with inline styles, Is it possible to remove formatting on paste? \n. ",
    "chinshr": "+1\n. +1\n. Yes, that works. Thanks.\n. Yes, that works. Thanks.\n. Thanks for considering this as a feature request. The same is true for adding other toolbar functions (font size, color), say in a bootstrap nav.\n. Thanks for considering this as a feature request. The same is true for adding other toolbar functions (font size, color), say in a bootstrap nav.\n. Great, yes that is what I am looking for.\n. Great, yes that is what I am looking for.\n. Thanks for the response. Yes, that works, but what I really intend to do is to auto expand the editor height. So as the user is adding text, the editor window extends vertically, instead of adding an additional scroll bar.\n. Thanks for the response. Yes, that works, but what I really intend to do is to auto expand the editor height. So as the user is adding text, the editor window extends vertically, instead of adding an additional scroll bar.\n. Thanks for your response, you are right, it's a duplicate. \nI was able to find an acceptable solution:\nJavaScript\neditor.addContainer('spacer-container');\neditor.on('text-change', function(delta, source) {\n    $('#editor').height(contentEditor.root.ownerDocument.body.scrollHeight);\n    $('#editor iframe').contents().find('body').css('overflow', 'hidden');\n});\nAnd additional CSS:\nCSS\n.spacer-container {\n  height: 100px;\n  display: block;\n  clear: both;\n}\n. Thanks for your response, you are right, it's a duplicate. \nI was able to find an acceptable solution:\nJavaScript\neditor.addContainer('spacer-container');\neditor.on('text-change', function(delta, source) {\n    $('#editor').height(contentEditor.root.ownerDocument.body.scrollHeight);\n    $('#editor iframe').contents().find('body').css('overflow', 'hidden');\n});\nAnd additional CSS:\nCSS\n.spacer-container {\n  height: 100px;\n  display: block;\n  clear: both;\n}\n. Yes, that works fine, thanks!\n. Yes, that works fine, thanks!\n. With Range, but with getClientRects() instead, it is possible to get the position of the text modification. Here is the snippet:\nJavaScript\n editor.on('text-change', function(delta, source) {\n  var sel = editor.root.ownerDocument.getSelection();\n  if (sel.rangeCount > 0) {\n    var range = sel.getRangeAt(0);\n    var rects = range.getClientRects();\n    if (rects.length > 0) {\n      $(\".user-initials\").css('top', rects[0].top + 'px');\n    }\n  }\n});\nIt would be great to get the current curser position to wherever the user navigates instead of a text-change event.\n. Actually, that works as I had expected, here is the modified snippet:\n``` JavaScript\neditor.on('selection-change', function(range) {\n  if (range) {\n    if (range.start == range.end) {\n  // move user-initials vertically on the editor gutter\n  var sel = editor.root.ownerDocument.getSelection();\n  if (sel && sel.rangeCount > 0) {\n    var selrg = sel.getRangeAt(0);\n    if (selrg) {\n      var rects = selrg.getClientRects();\n      if (rects.length > 0) {\n        $(\".user-initials\").css('top', rects[0].top + 'px');\n      }\n    }\n  }\n\n}\n\n}\n});\n```\n. Is there anything I could test or already use? Like in this branch. Is there an \"old\" or current\nway to support formats? Can you point me to a gist or some example code, please?\n. Do you have a time in mind when you want to finish this?\nIs there a current way to work with you can point me to?\n. @butsjoh thanks for the pointer, this ptobably goes too far what I currently need. I would be happy if I could wrap my text chunks into simple  tags with additional attributes, like those I mentioned above: offset, duration, etc. maybe I can clone and modify the Authorship module that sort of solves a similar problem.\n. I also found this thread in the forum that is related https://discuss.quilljs.com/t/converting-a-delta-into-viewable-formats/136\n. Can anyone reproduce this problem?\n\nOn Jan 19, 2016, at 11:35 AM, Quentin Calvez notifications@github.com wrote:\nThe usual autocorrect behavior on OSX (in both Safari and Chrome at least), is to replace a misspelled word automatically the first time, and then leave it alone if you go back and revert the change.\nWith Quill, the behavior is different. Even after going back and reverting the autocorrected word, it will be autocorrected again and again, which can be pretty infuriating when trying to write words that don't exist in the dictionary.\nI'm suspecting this may be because of how Quill regenerates parts of the DOM every time unlike a traditional contenteditable, which would prevent the browser from tracking what words were autocorrected already. But that's just me speculating.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "shengxiuzhou": "ql-clean button will delete img tag,I only want to remove format on theimg tag instead of remove the whole tag,how can I do?. ql-clean button will delete img tag,I only want to remove format on theimg tag instead of remove the whole tag,how can I do?. I used this task-list in my project, I have a problem, if I press the enter key after an empty task list, this list should be deleted, instead of generating another list, is this a bug?. I used this task-list in my project, I have a problem, if I press the enter key after an empty task list, this list should be deleted, instead of generating another list, is this a bug?. @marciodsousa  I met the same problem when I add contenteditable = \"true\"  attribute in element with 'ql-container'.  How do your solve it?. @marciodsousa  I met the same problem when I add contenteditable = \"true\"  attribute in element with 'ql-container'.  How do your solve it?. link button does't work in the demo?what's wrong?. Ok ,\"You need to select some text before you click on the link button\",I think it's  a bug,   I think when I click the link button ,It should response like insert image.. ",
    "krisnaw": "any update about this features?. @Mushood thanks for the tips\nBut it still will keep the format if it under the allowed tags.\nFor example we allow  tags. And under the  tags, there is a span tag with styles. \n<p><span style=\"color:red\">Text</span></p>\n. Yes, you'll keep the format automatically when pasting.. ",
    "mwerner": "Totally understand. What are your thoughts on putting a notice that limited HTML is available, something like stackoverflow: \n\nEither way is fine, feel free to close the PR or leave it open for late\n. Totally understand. What are your thoughts on putting a notice that limited HTML is available, something like stackoverflow: \n\nEither way is fine, feel free to close the PR or leave it open for late\n. ",
    "ncammarata": "I'm working on integrating https://github.com/ichord/At.js and I'm running into a very specific error(at least in Chrome 35.0)\nAt.js inserts html like this\nhtml\n<span>hey <span class=\"at\" contenteditable=\"false\">@nick</span> that is a good picture</span>\nContenteditable is false so that if I press delete after the mention, the entire @nick string is deleted. This works fine in a regular contenteditable div, but in Quill it unfocuses the editor, and pressing backspace again calls my browser's back function.\nI hacked this into the quilljs.com editor and can reproduce there. Let me know if it would be better to file this as a separate issue.\n\n. oh man, sorry, this was because I was running a slightly old version of Quill(I built a forked repo and that was the issue). Thanks for the gif, was excited to see such an awesome response.\n. Never got it working, ended up building something quite a bit more custom. Might be worth looking into At.js again though now that they support iframes!\n. @brettimus nope, sorry :(\n. What's the status on this?\n. worked perfectly, thanks!\n. ah, should have un-angularized the example I gave. For some reason, both locally and on http://quilljs.com, when I remove everything from the main editor(cmd-a + delete) and run\njavascript\nquill.getLength()\n1 is returned. As I type it increments correctly, but it's always overestimating by 1.\n. ",
    "jbrooksuk": "With 0.15.0 At.js works a treat:\njs\n$(this.editor.root).atwho({\n    at: '@',\n    data: '/api/users?sortBy=username&sortDir=asc&ignoreme=true',\n    tpl: \"<li data-value='${atwho-at}${username}' style='white-space: nowrap'><div class='avatar-clip small'><img src='${picture}' height='40' width='40' class='avatar' onerror=this.style.display='none' /></div>&nbsp;<span style='white-space: nowrap'>${agent_name}</span></li>\"\n});\nThat's what we use, where this.editor is a Quill object.\n. @benwasser why do you need to convert all of the HTML into a visual format? Just set the innerHTML of the preview element the HTML source?\n. @chrismadrigal it's not currently implemented, but once it is, it wouldn't make sense to add a reinit method, you'd need to just init a new one.\n. What would a destroy method do? Would it completely remove the UI and content leaving only the original element in place?\n. No problem, glad it's not just me!\n. This is still happening on 0.15.0 - not that it was expected to be fixed.\n. I've been getting a few moans and groans from the people who are using our system about this, so I've started looking at the issue now.\nMy thought is that the paste-manager.coffee creates a .paste-container element, which on paste is focused. Since the position is weird, it may be this which is jumping the view back to the top, whilst the cursor remains in place?\nDoes this need to be focused?\n. I removed the @container.focus() call and now it no longer jumps the view back to the top, however the cursor remains at the beginning of the pasted content (and not the end), so we're at least a step forward.\n. Do we know why your fix doesn't work with long content?\n. @jhchen is this something that can be looked at? If I update Quill I only end up adding this functionality in myself :)\n. I'll try and set up a demo tomorrow which replicates this behaviour.\nI'm running OSX, but the same thing happens on Windows in Chrome.\n. I don't have an example yet, but this is the content that would get shown at first:\n```\n---------- ALFRED ---------- \nAdded: Thu Jul 03 2014 9:40:27 AM \nSt James's Club Morgan Bay Saint Lucia (LC126)\nJuly 17, 2014\n14 nights (AI)\nOcean View Room\nOutbound MAN to UVF ( MT816 / 10:00 - 13:55 )\nInbound UVF to MAN ( MT816 / 14:55 - 06:40)\nOPERATOR: BLUE BAY\nROOM XXX\nAIRFARE: XXX\nATOL FEE:XXX\nCUSTOMER PRICE: XXX\nPrice includes luggage, transfers\n---------------------------- \n```\nThe only HTML included in this text is the <b> tags. Perhaps it's because of the new line characters?\n. This was happening solely because the content that gets added didn't wrap the lines in <p> tags, each line just ended with \\n. Ideally it should treat them as a new line, which it does when it renders the content.\n. :+1:\nWe're building an internal document editor which should act similar to Word. This doesn't :(\n. > It doesn't claim to act similar to word.\nI know that :)\n. ",
    "kbjr": "I'm trying to do the same thing, using quill@0.18.1 and at.js@0.5.1, and I cannot seem to get it to work. The completion dropdown appears at the top of the page instead of by the quill editor and selecting a name doesn't do anything. I'm setting it up like this:\njavascript\n$(self.commentBox.quill.root).atwho({\n    at: '@',\n    data: ['jbrumond']\n});\nAny thoughts? Did you guys get everything working correctly before?\n. Nevermind, I figured it out. Apparently At.js added a new option for dealing with editors that use iframes and not configuring that option causes bad things to happen ... now it's working correctly :)\n. ",
    "brettimus": "@ncammarata did you ever build a module for this?\n. @ncammarata did you ever build a module for this?\n. I wrote a module for this, but it's not the best.\nIf you wanted to collaborate, I'd be more than happy to review PRs (or\nsetup time to talk about how to improve it)!\nThe repo is called \"quill-placeholder\" bc I am uncreative with names.\nOn Wed, Mar 16, 2016 at 17:08 Erik Montes notifications@github.com wrote:\n\nWould be a nice feature to have.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/102#issuecomment-197617570\n. I wrote a module for this, but it's not the best.\n\nIf you wanted to collaborate, I'd be more than happy to review PRs (or\nsetup time to talk about how to improve it)!\nThe repo is called \"quill-placeholder\" bc I am uncreative with names.\nOn Wed, Mar 16, 2016 at 17:08 Erik Montes notifications@github.com wrote:\n\nWould be a nice feature to have.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/102#issuecomment-197617570\n. +1\n. +1\n. very excited for the changes to formats :tada: :confetti_ball:\n\n\u2014\nSent from Mailbox\nOn Fri, May 29, 2015 at 10:10 AM, Jason Chen notifications@github.com\nwrote:\n\nAn upcoming release is changing how formats are implemented and headers will be available then. I'll publish a post with the details in the next couple of weeks.\nReply to this email directly or view it on GitHub:\nhttps://github.com/quilljs/quill/pull/204#issuecomment-106873773\n. you can use the selection-change event. your handler for the event takes a single parameter, range, and if range is null, it means focus is not on the editor. \n\nHere is a better explanation in the docs.\n. you can use the selection-change event. your handler for the event takes a single parameter, range, and if range is null, it means focus is not on the editor. \nHere is a better explanation in the docs.\n. no problem!\n. no problem!\n. haven't had an issue in most recent version. side-note: are you using iframes? you have my condolences :grin: \n. haven't had an issue in most recent version. side-note: are you using iframes? you have my condolences :grin: \n. have you defined any click events on the editor? that messed with the link tooltips for me.\niframes went away sometime around 0.15 i think. not configurable to my knowledge!\nalso, yes to bower-- from the README bower install quill\n. have you defined any click events on the editor? that messed with the link tooltips for me.\niframes went away sometime around 0.15 i think. not configurable to my knowledge!\nalso, yes to bower-- from the README bower install quill\n. ah yes. i haven't worked with angular, but my best guess is that might be the issue. godspeed!\n. ah yes. i haven't worked with angular, but my best guess is that might be the issue. godspeed!\n. Think I found (part of) the issue. Right now, I'm fiddling with this line\nPresently, it is adding half of the referenceBounds.width and subtracting half of the tooltipBounds.width from an offset to calculate the left attribute of the tooltip.\nI made a change to subtract half of the referenceBounds.width and add half of the tooltipBounds.width, and the tooltip no longer gets cut-off, but its placement seems slightly off.\nI'm going to keep fiddling, but if anyone has insights please pass them along!\n. Think I found (part of) the issue. Right now, I'm fiddling with this line\nPresently, it is adding half of the referenceBounds.width and subtracting half of the tooltipBounds.width from an offset to calculate the left attribute of the tooltip.\nI made a change to subtract half of the referenceBounds.width and add half of the tooltipBounds.width, and the tooltip no longer gets cut-off, but its placement seems slightly off.\nI'm going to keep fiddling, but if anyone has insights please pass them along!\n. Touch\u00e9! Trying that now.\n. Touch\u00e9! Trying that now.\n. Works, but the issue then becomes that (on smaller screens) the Change Remove and Done links get cut off on the right. :grimacing: \n. Works, but the issue then becomes that (on smaller screens) the Change Remove and Done links get cut off on the right. :grimacing: \n. Yeah I fixed by getting rid of the white-space: nowrap; style on the .ql-tooltip class. But I'm assuming that's there for a reason sooooo. Yeah.\nThanks for your comments @willrowe!\n. Yeah I fixed by getting rid of the white-space: nowrap; style on the .ql-tooltip class. But I'm assuming that's there for a reason sooooo. Yeah.\nThanks for your comments @willrowe!\n. @jhchen - How would you feel about:\n- Ensuring the left attribute is non-negative\n- Removing white-space: nowrap; from the CSS on ql-tooltip (replacing with white-space: normal?)\nAlternatively, it'd be possible to avoid the overflow issue outright by using fixed instead of absolute positioning for the tooltip(s)... but that would in turn require redoing the position calculations.\n/shrug\n. @jhchen - How would you feel about:\n- Ensuring the left attribute is non-negative\n- Removing white-space: nowrap; from the CSS on ql-tooltip (replacing with white-space: normal?)\nAlternatively, it'd be possible to avoid the overflow issue outright by using fixed instead of absolute positioning for the tooltip(s)... but that would in turn require redoing the position calculations.\n/shrug\n. Fixed by adding @quill.setContents(@quill.getContents()) to the PasteManager module's _paste method, immediately after this line.\nNot sure what kind of negative side-effects this might have, though.\n. Fixed by adding @quill.setContents(@quill.getContents()) to the PasteManager module's _paste method, immediately after this line.\nNot sure what kind of negative side-effects this might have, though.\n. could i get another set of eyes on this? again, i fixed it in my own build, but want to know if what i did has any negative side-effects.\n. could i get another set of eyes on this? again, i fixed it in my own build, but want to know if what i did has any negative side-effects.\n. I plugged quill into my company's redesigned app, and the issue was brought to me by a beta tester. I reproduced it on the quill homepage for ease's sake.\u00a0\n:crying_cat:\n\u2014\nSent from Mailbox\nOn Thu, May 21, 2015 at 8:40 AM, Will Rowe notifications@github.com\nwrote:\n\nI've only been able to reproduce this sporadically, so I'm not quite sure what's causing it. Have you seen this happening anywhere else besides the homepage?\nReply to this email directly or view it on GitHub:\nhttps://github.com/quilljs/quill/issues/361#issuecomment-104323563\n. I plugged quill into my company's redesigned app, and the issue was brought to me by a beta tester. I reproduced it on the quill homepage for ease's sake.\u00a0\n\n:crying_cat:\n\u2014\nSent from Mailbox\nOn Thu, May 21, 2015 at 8:40 AM, Will Rowe notifications@github.com\nwrote:\n\nI've only been able to reproduce this sporadically, so I'm not quite sure what's causing it. Have you seen this happening anywhere else besides the homepage?\nReply to this email directly or view it on GitHub:\nhttps://github.com/quilljs/quill/issues/361#issuecomment-104323563\n. Seems fixed!\n. Thanks! That was the workaround I ended up going with. \n. Thanks! That was the workaround I ended up going with. \n. +1 would be cool to mess around with this if you could hack it together\n. This would be an awesome module. You should write it :grin: \n. This would be an awesome module. You should write it :grin: \n. Nice! I was going to try this next weekend. Excited to see what you come up with.\u00a0\n\n\u2014\nSent from Mailbox\nOn Sat, May 30, 2015 at 4:25 PM, jocoolie notifications@github.com\nwrote:\n\nAssuming editor is the name of the Quill object:\n  \n  var toolbar = editor.modules.toolbar.container;\n  toolbar.style.display = \"none\";\n  toolbar.style.opacity = \"0\";\n  toolbar.style.position = \"fixed\";\n  toolbar.style.transition = \"opacity 300ms, left 300ms, top 200ms\";\n  toolbar.style.backgroundColor = \"white\";\n  toolbar.style.zIndex = \"20\";\n  toolbar.style.border = \"1px solid gray\";\n  editor.on('selection-change', function(range) {\n      if (range &amp;&amp; range.start == range.end) { // no selection, fade out.\n          toolbar.style.opacity = 0;\n          setTimeout(function(){toolbar.style.display=\"none\"}, 300);\n      } else {\n          var selection_dimensions = window.getSelection().getRangeAt(0).getBoundingClientRect(); // see http://stackoverflow.com/a/17887684/2661831</p>\n<p><code>toolbar.style.top = selection_dimensions.bottom + \"px\";\n          toolbar.style.left = selection_dimensions.right + 10 + \"px\";\n          toolbar.style.display = \"block\";\n          toolbar.style.opacity = 1;\n  }</code></p>\n<p>});\n  \nI'll work on making a module out of it.\nReply to this email directly or view it on GitHub:\nhttps://github.com/quilljs/quill/issues/382#issuecomment-107098821\n. @samsonkhisty I wrote a little placeholder module.\n\nIt's a little janky and not too fun when you have to deal with form validations, but my company uses it in production so \u00af(\u30c4)/\u00af. Feel free to contrib\n. Hey I found the source of this problem, and it was that the passed format isn't valid like @willrowe said. \nAre formats getting completely overhauled soon? Otherwise, would it be worthwhile to have a more helpful error message when an invalid format is applied?\n. Hey I found the source of this problem, and it was that the passed format isn't valid like @willrowe said. \nAre formats getting completely overhauled soon? Otherwise, would it be worthwhile to have a more helpful error message when an invalid format is applied?\n. +1 Good idea! Could probably be written as a module?\n. +1 Good idea! Could probably be written as a module?\n. Serenity everyone!\nWilliam, I can see Jason's point where this might be too general for the\nreadme.\nIs there a \"quill for beginners\" blog post already? This kind of advice\ncould make good material for the quill blog.\nLet's all be friends! \ud83d\udcab\ud83c\udf89\ud83d\ude01\nOn Thu, Oct 29, 2015 at 10:50 Jason Chen notifications@github.com wrote:\n\nTinyMCE posted that page years ago when best web security practices were\nnot well understood. Today sanitizing input specifically on the back end is\nwell established guidance for any input, whether it's a JS library or a\nnative textbox. Posting a warning on Quill specifically would only serve to\nconfuse people, as it already did on the issue discussion. Furthermore it\nadds to the cost of maintenance of the particular list of sanitization\nlibraries.\nOpen source is not about thousands of developers banging on keyboards and\nmerging their efforts so everyone can feel good about contributing. If you\nwant to be a part of it I suggest you grow thicker skin. Not every idea you\nhave will be welcomed under scrutiny of others. Hopefully there will be\nsome that are and that's where the focus should be.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/pull/514#issuecomment-152264219.\n. Serenity everyone!\n\nWilliam, I can see Jason's point where this might be too general for the\nreadme.\nIs there a \"quill for beginners\" blog post already? This kind of advice\ncould make good material for the quill blog.\nLet's all be friends! \ud83d\udcab\ud83c\udf89\ud83d\ude01\nOn Thu, Oct 29, 2015 at 10:50 Jason Chen notifications@github.com wrote:\n\nTinyMCE posted that page years ago when best web security practices were\nnot well understood. Today sanitizing input specifically on the back end is\nwell established guidance for any input, whether it's a JS library or a\nnative textbox. Posting a warning on Quill specifically would only serve to\nconfuse people, as it already did on the issue discussion. Furthermore it\nadds to the cost of maintenance of the particular list of sanitization\nlibraries.\nOpen source is not about thousands of developers banging on keyboards and\nmerging their efforts so everyone can feel good about contributing. If you\nwant to be a part of it I suggest you grow thicker skin. Not every idea you\nhave will be welcomed under scrutiny of others. Hopefully there will be\nsome that are and that's where the focus should be.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/pull/514#issuecomment-152264219.\n. Hahahaha\n\nOn Thu, Oct 29, 2015 at 11:03 William Overton notifications@github.com\nwrote:\n\n@brettimus https://github.com/brettimus You cant tell me what to do!\n[image: Angry]\nhttps://camo.githubusercontent.com/960243c87d2c282eb8502808b329d94caa94c269/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f316869564e78443334547043302f67697068792e676966\nI expect a lot of developers wouldn't be checking out the blog post, but a\nquick head nod in the right direction would be just as useful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/pull/514#issuecomment-152267777.\n. Hahahaha\n\nOn Thu, Oct 29, 2015 at 11:03 William Overton notifications@github.com\nwrote:\n\n@brettimus https://github.com/brettimus You cant tell me what to do!\n[image: Angry]\nhttps://camo.githubusercontent.com/960243c87d2c282eb8502808b329d94caa94c269/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f316869564e78443334547043302f67697068792e676966\nI expect a lot of developers wouldn't be checking out the blog post, but a\nquick head nod in the right direction would be just as useful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/pull/514#issuecomment-152267777.\n. \n",
    "MadSpindel": "I have made a module for Quill 2.0. You can find it here:\nhttps://github.com/afconsult/quill-mention. I have made a Quill module for this:\nhttps://github.com/afconsult/quill-mention. @preveew Yes you can do something like this:\njavascript\nsource: function (searchTerm) {\n  $.getJSON('/remote/url/json/', { q: searchTerm}, function(data){\n    this.renderList(data, searchTerm);\n  }});\n}. @syadiqfaliq Yes, you can slice the values before sending it to renderList:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice. @syadiqfaliq Yes, you can slice the values before sending it to renderList:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice. ",
    "jonchay": "Any updates on this?\n. Got it. Thanks!\n. ",
    "RajuBhosale": "<textarea id=\"editor\"></textarea>\nvar editor = new Quill('#editor');\n+1 for this\n. ",
    "garygreen": "This is a pain with Quill at the moment. You need to add extra boilerplate to wrap textarea in a div, then listen for update events and re-map the html back to the textarea, or listen for form submit and set the textarea content. Would be nice if quill did this under the hood if the passed element is a <textarea> -- most editors do.\n. > If the goal is to submit rich text, then you cannot use a textarea anyways and will have to submit via ajax post.\nThis is the goal and why would you need to use ajax? If the textarea's value mirrored the HTML from quill, or you updated the textarea with the HTML just before submitting the form you don't need ajax. I think it would be fair to assume that if quill is attempting to be initialised on a form element i.e. a textarea or input, then the final HTML generated by Quill is going to be submitted as part of the form data. A lot of wysiwyg editors do this, tbh I haven't come across one that chokes if you give it a textarea element, it knows what your trying to do ;)\nIt's not really a biggie as it's easy enough to do with some event listeners and stuff, but I love libraries where you can get going with minimal effort and boilerplate.\n. Meh. I wouldn't say perfect, it's exactly the same as it was before but now there's an example for how to do it. It would be nicer having it baked into the core so you don't need that kind of boilerplate code when working with forms. Quill is a great library, but I've yet to find a WYSIWYG editor which doesn't have built in support for forms.\n. +1 any news on this @jhchen ? It would be nice as an option to enable / disable in the toolbar. Often you have 'advanced users' in your system who feel confident dealing with raw HTML. Also as mentioned it will be nice to see the generated HTML by quill at a glance. All wysiwyg I've used before have this, it's the only feature Quill is missing....\n. @ouhman if your using jQuery you could just attach the editor to the data for that element. Makes it easy to retrieve it. If your not using jQuery you could still store the instance on the element's properties itself.\n``` javascript\nvar $div = $('');\nvar editor = new Quill($div[0]);\n$div.data('quill', $editor);\n// In your other js file:\nvar editor = $('#test').data('quill');\neditor.getHTML();\n```\n. That sounds awesome, seems like you've had a good thought about this. I would suggest to keep the structure as simple and syntax-free as possible though, as I would much rather have something like this where you instantiate a copy of an object and configure it specifically.\n``` javascript\nvar editor = new Quill('#test', {\ntoolbars: [\n    ['bold', 'italic', 'underline', 'strike'],\n    [Quill.toolbar.sizes(['10px', false, '16px'])],\n    [\n        Quill.toolbar.list('align'),\n        Quill.toolbar.list('bullet')\n    ]\n]\n\n});\n```\nSo basically there are 3 options;\n1. String, which is simply an alias for doing Quill.toolbar.<item>()\n2. An array, which is just a way of grouping toolbar items.\n3. An instantiated toolbar object\nThe benefit of doing it this way is it's far more explicit, less error-prone to typos, easier to parse/process internally and is future proof for more complex customisation. For instance you could add support for changing the template for each individual toolbar:\njavascript\nvar bold = Quill.toolbar.bold().setTemplate(\n    '<span class=\"%action_class%\">Bold</span>'\n);\nOr maybe even supply a custom template renderer by supplying closure:\nvar bold = Quill.toolbar.bold().setTemplate(function() {\n    return '<span>Bold</span>;\n});\nOr change the label:\nQuill.toolbar.bold().setLabel('Blah')\n. ",
    "TechNyquist": "When I show a richtext editor on the client-size, I expect an HTML plain text server-side. This is probably the reason of the question, and when I initialize Quill on a textarea I expect to happen:\n1. Quill to pick the textarea's name\n2. Quill to let me edit richtext\n3. Quill to submit \"plain HTML\" to the server by the textarea's name\njust like I'm doing now with \"getContent()\", but...automated :)\nThis is just a feature-request, sure Quill is already powerfull as it is!\n. When I show a richtext editor on the client-size, I expect an HTML plain text server-side. This is probably the reason of the question, and when I initialize Quill on a textarea I expect to happen:\n1. Quill to pick the textarea's name\n2. Quill to let me edit richtext\n3. Quill to submit \"plain HTML\" to the server by the textarea's name\njust like I'm doing now with \"getContent()\", but...automated :)\nThis is just a feature-request, sure Quill is already powerfull as it is!\n. Because you can be sure that the user is going to submit the form when the\nhidden field is not up-to-date, eheheh.\nIl 08 set 2016 18:51, \"Alex\" notifications@github.com ha scritto:\nIt doesn't make sense to synchronize a RTE with a visible textarea. Why not\njust listen to the changes in the editor and periodically getContent() and\nput that in an ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/87#issuecomment-245662939, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE5h11pU0glliVRtOwQ2VVkr6hzJ7MfZks5qoDz9gaJpZM4B5rFq\n.\n. Because you can be sure that the user is going to submit the form when the\nhidden field is not up-to-date, eheheh.\nIl 08 set 2016 18:51, \"Alex\" notifications@github.com ha scritto:\nIt doesn't make sense to synchronize a RTE with a visible textarea. Why not\njust listen to the changes in the editor and periodically getContent() and\nput that in an ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/87#issuecomment-245662939, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE5h11pU0glliVRtOwQ2VVkr6hzJ7MfZks5qoDz9gaJpZM4B5rFq\n.\n. ",
    "mlewis-everley": "I would very much like to see the following as well:\n<textarea id=\"editor\"></textarea>\nvar editor = new Quill('#editor');\nWe are going to be integrating quill into our CMS (that makes use of traditional HTML forms) and does expect plain text to be submitted via a form post.\nWe can add ajax via this, but it does involve extra faff, would be great if for a basic implementation we could just map Quill to an existing text area.\nQuill is a very cool editor, but surely adding this feature would expand it's appeal and usage?\n. ",
    "pascalwacker": "+1 it would be great to just have a textarea <textarea name=\"foo\" id=\"foo\"><h1>FooBar</h1><p>Foo and Bar = Baz</p></textarea> like for example TinyMCE is doing http://codepen.io/tinymce/pen/YydQrY\n. +1 it would be great to just have a textarea <textarea name=\"foo\" id=\"foo\"><h1>FooBar</h1><p>Foo and Bar = Baz</p></textarea> like for example TinyMCE is doing http://codepen.io/tinymce/pen/YydQrY\n. That's perfect! +1\n. That's perfect! +1\n. ",
    "simonmilz": "+1 for this.\n. ",
    "alexkrolick": "It doesn't make sense to synchronize a RTE with a visible textarea. Why not just listen to the changes in the editor and periodically getContent() and put that in an <input type=\"hidden\">?\n. True, you may want to watch the dirty state and use a beforeunload. Here's an example of how you would synchronize Quill with a hidden form input and a dirty-detection listener to prevent the form submit:\nhttp://codepen.io/alexkrolick/pen/xEGmJJ\n. @benbro this keeps coming up, do you want to link to that pen in docs?\n. Even having title tags to get a label on hover would help quite a bit\n. @sachinrekhi would it be possible to take a look at the format module you came up with? \n. @jhchen what is the recommended way to use the beta release of Quill as a dependency in another NPM module? Point to a quill.tar.gz?\n. I was just dealing with this so here's a start on the documentation:\nSay you're adding a custom save icon to your existing toolbar with a header dropdown:\njs\nmodules: {\n    toolbar: [ [{ 'header': [1, 2, false] }], ['save'] ],\n     ...\n}\nwould add an icon .ql-save to the toolbar which you would customize in your CSS somewhere:\ncss\n.ql-save {\n    background: url(\"/assets/save.svg\") no-repeat scroll 0% 0% transparent !important\n    width: 18px !important\n    border-radius: 0px\n    height: 15px !important\n    text-align: center\n    background-position: center\n}\nThen add a listener:\njs\ndocument.querySelector( '.ql-save').addEventListener('click', saveCallback);\nTo hook up the button to a custom format you need to register it in the formats module. For example if you are adding a thing called title that is really just an h1 tag, you could do this and add a title button to the toolbar and customize as above:\njs\n    formats: [{ name: \"title\", tag: \"H1\", prepare: \"heading\", type: \"line\" }]\nNot sure exactly what listeners would be needed, if any, to get this to automatically create tags around the selection when you click the icon @jhchen \n. So, the bindings array alternates between config and callback like custom[0] = key0, custom[1] = callback0, custom[2] = key1, custom[3] = callback1]? Would it make sense to put it more like:\njs\nvar bindings = {\n  custom: [\n    { key: 'B', \n      shiftKey: true, \n      callback: function(range, context) {\n        // Handle shift+b\n      }\n    },\n    { // ...another handler }\n  ]\n};\n. Great! Can't wait for 1.0!\n. Same here. Is this by design?\n. @joekrump Cool, would it be possible to share your resizable image module?\n. This looks like a temporary issue that was fixed in 1.0.2.\n. Download the released tar archive -- it has the minified versions. That is what NPM will give you as well. \n@murran Latest release: https://github.com/quilljs/quill/releases/tag/v1.0.3\n. Does bower use a different registry than NPM? It seems like the solution is to\neither point Bower at a tagged release (eg github.com/quilljs/quill#1.0.3\nwould resolve in the NPM package manager), or to publish a proper bower\nversion.\n. @artaommahe Quill automatically adds space for every button name in the toolbar module config with the class .ql- + the name (see the example). So you can use CSS to define a background SVG, :before content, or whatever else. Are you adding something a lot more complex that requires HTML?\n. Having tried something like this a few times, ultimately it's easier to create a meta-layout that contains a series of different node types (rich text/form/gallery) than to try to hook into the editor directly. You can still make it appear as one document canvas visually.. No iframe, just something like this:\n```\ntoolbar\n\n\nsome rich text\n     editor\n\npicture\n\n\nsome rich text\n     editor\n       ...\n```\nAnd manually manage the navigation/focus of the different types of nodes.. For reference, this is where the icon-toolbar mapping happens: https://github.com/quilljs/quill/blob/develop/ui/icons.js\n. Demo of the change:\nhttps://codepen.io/alexkrolick/pen/awRxWz?editors=0010\nNote that the highlighted values in the toolbar don't reset to default with the Snow theme in React-Quill, which is another bug (zenoamaro/react-quill#175).. This seems to cause some weird interactions with React, but only on Android. See https://github.com/zenoamaro/react-quill/issues/282.. Tracking in React Quill at https://github.com/zenoamaro/react-quill/issues/271\nI think this is an issue with RQ only, TBD.. Confirmed that this does not affect Quill itself: https://codepen.io/alexkrolick/pen/yzbVXV?editors=0010. ",
    "Garbee": "The major point here is Progressive Enhancement. You have a textarea already to be filled in, quill should enhance it when JS is available to provide a good editing experience. Then whether the form submit is ajax or not, the contents can be submitted just fine without any extra effort on the developers part.\nNot having progressive enhancement here is a major dealbreaker, especially in cases like e-commerce use where developers need to be sure their sites are accessible to as many people as possible. Which yes, does include users that turn off JS.\n. ",
    "ahmadyousefdev": "+1 for this ,, a text editor without a textarea ,, why ! \ud83d\ude22 \n. ",
    "bobbypriambodo": "An illustration of the above use case is:\n1. The server wants to receive HTML content (a blog post, maybe, or a news article) from a field named content. Other fields (title, etc.) might exists.\n2. One way to make it possible is to have a textarea and tell users to write HTML code. A nightmare.\n3. We resort to RTE for abstracting away the HTML generation, which @Garbee rightfully said as progressive enhancement.\nBut that's it. The rest of the form should still be intact; only the HTML generation on the textarea field needs to be handled. On clicking the submit button, the form should behave as a form. No JS should be necessary for submitting HTML forms. Not all web applications are SPAs and AJAX-based, some are still conventional multi-roundtrip server-rendered pages. Not to mention also for supporting people who turn off JS on their browsers.\nQuill is great, but this is the major pain point preventing me from adopting it for my projects. TinyMCE and other RTEs provides this out-of-the-box, so if Quill wanted higher adoption rate I think it would be great to tackle this use case. It's another story if web pages with conventional forms are not your intended users though (which is a shame).\n. ",
    "aguynamedben": "Another thing to note related to this is that a  allows users to tab to the textarea from previous form elements. So when a user is filling out the form, they can type, hit tab, type, hit tab, etc. This breaks if you're trying to use Quill as part of a form. This is exacerbated on mobile where users have very prevalent arrows on their touch keyboards that take them to the next form element.. I'm having the same problem @hhubik observed and re-created it in Codepen: http://codepen.io/aguynamedben/pen/KNBNBP\nIs tabbing into a Quill instance from a previous form input supposed to work?. @jhchen I wish you would reconsider your stance on this. I'm in the same boat as @garygreen, where I have advanced internal admin users that are confident and allowed to edit our HTML directly. Those advanced users sometimes need to paste embed links like the embed code to show a video hosted on Wistia. I agree it's \"edit at your own risk, for advanced users only\", and that some of the HTML might be stripped in edge cases, but it's still a real use case that you shouldn't just deny or write off as invalid.. You mention that Quill already cleans up HTML that it doesn't allow. A practical solution could be to show an alert when HTML is cleaned up so that advanced users are aware they added code that wasn't allowed. I.e. \"Some of the HTML you entered in Advanced Mode wasn't allowed and had to be removed. Please double-check the results of your edits.\". ",
    "erw13n": "This is what I do to grab it \nvar myEditor = document.querySelector('#editor')\nvar html = myEditor.children[0].innerHTML. This is what I do to grab it \nvar myEditor = document.querySelector('#editor')\nvar html = myEditor.children[0].innerHTML. Here's what I did to make it happen\nhttps://codepen.io/anon/pen/ZyEjrQ. Here's what I did to make it happen\nhttps://codepen.io/anon/pen/ZyEjrQ. @LESARQ please read @jhchen comment above \n\nIf you want to edit the HTML directly, then you may make some change that Quill does not allow. Editors deal with this by cleaning this up, which Quill 0.20 also does\n\nAny element tags which Quill does not allow will automatically clean up, so if you paste such as Div or Table, Quill will replace it with Paragraph.. @LESARQ please read @jhchen comment above \n\nIf you want to edit the HTML directly, then you may make some change that Quill does not allow. Editors deal with this by cleaning this up, which Quill 0.20 also does\n\nAny element tags which Quill does not allow will automatically clean up, so if you paste such as Div or Table, Quill will replace it with Paragraph.. ",
    "jacurtis": "What @erw13n demo's above is actually the first example in this extremely long thread that is demonstrating how to actually achieve what everyone is looking for. This gives you the actual HTML tags to recreate the rich text that the user \"designed\" in the text editor.\nWhile still not ideal, you can bind this line of JS to a submit event for the form. Create a hidden textarea in your form first. Then when submitted, you would want to disable the quill editor (so a user can't make last-millisecond changes during the copy), then copy the .innerHTML (as he shows above) as plain text to the <textarea>, which is then submitted to the server like most other WYSIWYG editors.\nYes, this is an extra, arguably unnecessary step. But considering the advantages that quill does provide, it isn't that bad.\nSide Note: make sure you still sanitize the submitted HTML on the server side before it is put into a DB. A user could still easily inject malicious code into your hidden textarea and submit it to the server. So using a purifier or sanitizing library is still necessary (as you are hopefully doing with any other WYSIWYG editor already).\n\nTo the developers of this package: while I am grateful for the work put into this project, it is extremely naive to assume that every form submitted on the web is an AJAX request using the latest javascript library-of-the-month. Sure, in the 100 square miles of silicon valley where rainbows have pots of golds at the end of them and unicorns roam the streets, this might be the case, but in the rest of the world \"traditional\" form submissions still are commonplace. Not all servers run Node.js either, and believe it or not PHP, Ruby, Python, and C# are still common, despite being cringe-worthy to JS developers. The javascript object that Quill creates by default with its .getContents is difficult to parse for storage on these non-Node.js servers. At some point we have to parse this object back into HTML. Quill is a great library, but this thread makes it very obvious that the developers of the package are in denial with how much of the web still works.. ",
    "gavin667": "https://codepen.io/k3no/pen/amwpqk. ",
    "hpatnala": "Quill is not retaining the table properties (like the width of the columns/rows, font of the text), when the table is copied from MS word. Does Quill support this?. ",
    "alexeckermann": "Would I be right in thinking that this would be a module? Since the server side, upload presentation and execution varies wildly from application to application.\nCould it be a third-party module that we include rather than the core project deciding how uploads should be handled? Then its up to the developer to pick which one will work for them.\nAfter using ckeditor for a long time I really like how simple quill is and would hate to see it turn into a behemoth like ckeditor.\n. I've had a crack at implementing a configurable block tag and along the way picking up on how Quill works.\nWhilst most of the changes are straight forward the Formatter and Normalizer have some logic that may conflict and require some attention. With my current limited depth of knowledge on all the moving parts in Quill I am not sure if there is any unintended consequences (tests aside) of making a change like this.\n@jhchen is there any \"here be dragons\" you can point me in the direction of to make sure that I can sort it out? The Normalizer class feels like one of them since it sits outside the scope of an editor instance making configs unavailable.\nI'll push my forked branch soon once I have gotten it a little further along.\n. I've had a crack at implementing a configurable block tag and along the way picking up on how Quill works.\nWhilst most of the changes are straight forward the Formatter and Normalizer have some logic that may conflict and require some attention. With my current limited depth of knowledge on all the moving parts in Quill I am not sure if there is any unintended consequences (tests aside) of making a change like this.\n@jhchen is there any \"here be dragons\" you can point me in the direction of to make sure that I can sort it out? The Normalizer class feels like one of them since it sits outside the scope of an editor instance making configs unavailable.\nI'll push my forked branch soon once I have gotten it a little further along.\n. ",
    "nburwell": ":+1: to have a supported module for the UI.  I'm looking to move over to Quill and we already have server-side image upload support (for a custom plugin to Ext's HTMLEditor) and would love to have that support in QuillJS too!\n. ",
    "getup8": "I think this is available?\nhttps://github.com/quilljs/quill/blob/develop/src/modules/image-tooltip.js\n. I think this is available?\nhttps://github.com/quilljs/quill/blob/develop/src/modules/image-tooltip.js\n. ",
    "swim": "Here's some basic integration with the Dropzone.js library https://github.com/swim/quill-dropzone - please note; this does not handle any server side code.\n. Compared wrong branch -_-, sorry.\n. ",
    "liminshen": "@getup8 page is missing https://github.com/quilljs/quill/blob/develop/src/modules/image-tooltip.js. ",
    "ycjcl868": "request entity will be too large when using Base64 encoding the image, \n\n. request entity will be too large when using Base64 encoding the image, \n\n. Watching.. +1 . +1 . same question\ncaused by this.root.focus(); in quill/core/selection.js\nalso Clipboard onPaste has the same question\n. \nme too. \nme too. Same problem.. same question. me too, can't insert <audio> tag\n. ",
    "MarcGodard": "Images should just be handled with a callback function.\njavascript\nonImage(data) {\n     return server.upload(data)\n           .then(imageUrl => {\n                  return imageUrl\n     })\n}. @TaylorPzreal I would add one line:\njavascript\ninput.setAttribute('accept', 'image/*'). ",
    "rand99": "Hi, \nthe use case is:\n- a user can color text passages that are interessting to him\n- i can save the data (selected yellow from to, red from to, ...) for the user\nSo the editing features wouldn't be used at all, as the content itself doesn't change\nonly marking data from data user is saved (would be)\n. ",
    "matthieubellon": "@banditj looks like you may need annotator.js. Match your use case. \n. @banditj looks like you may need annotator.js. Match your use case. \n. ",
    "dohomi": "Ok thanks!\n. ",
    "vegetableman": "I think, It could get as simple as setting scrollHeight of the content-editable div to the parent container, quill is called with. another module for this?\n. I think, It could get as simple as setting scrollHeight of the content-editable div to the parent container, quill is called with. another module for this?\n. is anyone working on this? would like to give this a shot\n. is anyone working on this? would like to give this a shot\n. @TooTallNate Have sent a pull request for the same. Took the quora editor approach. Instead of adding and destroying the placeholder node, a 'placeholder-container' class is toggled on the editor-container. And the class has a pseudo-selector with content as the placeholder text. \n. @TooTallNate Have sent a pull request for the same. Took the quora editor approach. Instead of adding and destroying the placeholder node, a 'placeholder-container' class is toggled on the editor-container. And the class has a pseudo-selector with content as the placeholder text. \n. separate repo's would be way better. i will update the code once you have figured it out.\n. ",
    "TooTallNate": "A non-perfect version is something like:\njs\neditor.on('text-change', function(delta, source) {\n  editorContainer.style.height = editor.root.ownerDocument.body.scrollHeight + 'px';\n});\nThat doesn't properly handle the \"shrinking\" case though of deleting lines and having the height become smaller.\n. Whoops. I see now that master branch is incorrect for pull requests. New PR in #97. You guys should make the \"default\" branch be develop in GitHub settings to make that easier for devs!\n. > I was more thinking along the lines of a prepublish script though. Would that solve the problem for you too?\nIt would\u2026 but only in the npm install quilljs case. I currently have a symlink set in node_modules pointing to a cloned version of this repo, and the patch in this PR works great for invoking browserify from the command-line.\n. (that said, I think this patch and a prepublish script wouldn't hurt either :wink:)\n. Well it's like I said, it works in the npm install quilljs case, but not in the git clone case since the lib files aren't compiled to the repo:\nbash\n$ browserify --extension=\".coffee\" test.js > bundle.js\nError: module \"./lib/quill\" not found from \"/Users/nrajlich/node_modules/quilljs/index.js\"\nI can easily run the grunt build, but it adds another step and it seems unnecessary when these 4 lines of code let browserify handle the entire build for me.\n. Ya you're right. Not totally ideal but I guess that works. This should also work: require('quilljs/src/quill').\n. Actually thinking about it again, adding the browser field pointing to the raw source coffee files would solve the problem and give us the best of both worlds I think. See https://github.com/Automattic/quill/commit/2337a0e135640e5bd078dfa5858edd52ebf33ab2.\n. If the browser field is present, then browserify will use that as the entry point to the package rather than the main field. Node will always use the main field though.\n. This seems like a good idea to me, +1\n. I think you just need to wrap the font name with double-quotes.\n. Should definitely be a \"module\" IMO. Probably not too hard to implement off of the top of my head:\n1. Upon instantiation, insert a placeholder <div> with your placeholder text content inside. Quill#addContainer() would work well for this.\n2. Listen for the \"text-change\" event in order to remove the placeholder <div> once there's some text content in the editor (container.parentNode.removeChild(container)).\n. @vegetableman please do :)\n. Data URIs shouldn't be necessary on newer browsers that support Object URLs.\nHowever, I think a drag-and-drop module would be a very useful thing to include in quilljs :wink: \n. So Firefox actually implements a resizer thing out of the box. It looks something like:\n\nUnfortunately it doesn't seem like any other web browsers provide something native like this, so a JS-based solution is probably still required :frowning: \n. ",
    "ivanakimov": "+1 on this. Any estimates on ETA?\n. +1 on this. Any estimates on ETA?\n. ",
    "u9520107": "Is there particular reason to have the 'editor-container' class in the iframe to have 100% height?\nSince the body is set to 100% and does the overflow control, perhaps this element doesn't have to be set. That way we can use getBoundingClientRect() to get the size of the content and resize the container in the root document.\n--edit removing the height makes empty containers to only have 1 line to click on.\n--using min-height: 100% would allow the editor-container to take all the body height when empty, and expand when filling up with content. This way we can probably use getBoundingClientRect() on content change and change the root container size accordingly.\n. @jhchen \nBut the body is configured to follow iframe's size, the value should always be the same... no?\nAnyways, expansion can be done easily by using scrollHeight, or if editor-container uses in-height instead of height 100%, the boundingClientRect can also be used.\nBut as both settings forces the editor-container to take at least 100% of the height of the body, shrinking doesn't work.\nI think it might be better to handle click on body to focus the editor-container, and still allow editor-container have height set to auto. \n. Are there any plans on this enhancement? I have an issue that my project requires me to shift blocks of html around, the actual dom manipulation is done with React.js. But when the block containing the quill instance is moved, the iframe loses its contents. I am fairly sure it is the same iframe instance as the quill.editor.renderer.iframe points to the exact same object. However, the document's head and body become empty tags.\nI was able to get content to display by dropping this iframe and create a new Quill instance on the same container element. But after multiple operations like this, memory use sums up as those dropped quill instances are not getting gc'ed.\nEither I have to find a way to keep the content of the document when the iframe gets detached and moved somewhere else, or the quill instances needs to be able to get property destroyed.\nedit:\nOr perhaps being able to use contenteditable div instead of iframes could also solve this issue. I am not exactly sure why the document contents get wiped out though.\n. The merge doesn't seem to work.\nIt checkes for \"sc-active\" but the class added was \"ql-active\", and was to a child of the node that was being checked.\nStill, I think this should be fixed at the moment the format is lost, instead of trying to set the formatting back after they are lost.\n. @jhchen Right... didn't know it'd be linked back here actually. I wanted to add component.json to it, so i though it's ok to do it in a fork. I should put that into the dist branch instead I think.\nAgain, I don't think hacking away with the formatting with the toolbar is a good idea. But I can't seem to located where the manipulation of the input content takes place. I noticed that if you break in the middle of a line/word, then the format is retained. Probably because the  that got split had inline styling. But when the break happens at the end of a line, the new line only contains a .\nAfter that, even if I changed the line's formats to have size = 18px. The text created didn't have the font size set.\nAnyways, I can't seem to figure out when or where the texts are being processed by the editor yet, any hints? \n. In the original buggy version before these fix attempts, when a new line is newly created, the new line only consists of a br within the line div. Is there any reason not to give the new line the same... semantic structure as the previous line?\nFor example, if the previous line is:\n<div of a line>\n    <span style=\"font-size: 18px;\">previous text</span>\n</div>\nAfter hitting enter, let the new one be like this:\n<div of new line>\n    <span style=\"font-size: 18px;\"><br /></span>\n</div>\nThis way the styling information is actually carried over inline, and perhaps that's enough to solve our issues? (I was checking out guardian/scribe project, and they have this kind of behavior instead of stripping an empty line down to a single < br />.)\n. @jhchen What is the purpose of these lines in the normalizer.coffee in src?\nline#83        nodes.push(node.nextSibling)\nline#84        DOM.unwrap(node)\nI traced the javascript to try to find the moment when the new line loses styling, and it happens here. When I comment these lines out, the new line would retain their formats. \nWhat I am guessing is that when the line has 0 length, the loop that these lines is in will remove all the tags within the line div except for the < br />. Hence we end up with a single < br /> for a new line and lose formattings. So if these lines are not executed, the line would keep the spans, the < b >.. that gives the formatting to the line, and fix our problem. \nWell, I am not exactly sure what these lines are used for, but maybe the logic here is too simplistic.\nThere is another issue that I found while trying to fix this. If you have a styled line, and you delete every character in it. The line will be stripped down to a single < br /> as well, and lose its formatting. They are some waht related. Perhaps they can be fixed as well.\n. @jhchen When enter is clicked at the end of the line, the cursor should be at the new line right? So when these two lines are skipped, the cursor is actually right at the spot of the optimization. Not seeing side effects yet. I'll modify my fork this way for the time being.\nAbout the deleting of content in a line that leads to loosing formatting, it seems to be browser's behavior. I tested on a different scenario with a span with inline styles. When i delete all the content in the span, the browser replaced the span with a line break. I guess that's not exactly a bug here then. \n. @leoasis I am very interested in your \"hack\" in #179.\nThe primary reason is that the site I am working may have (and cannot avoid) quill instances that is rather small in size. While iframes provide all the goodness quilljs wants, there is one major issue with iframes. When the image-tooltip/link-tooltip is bigger than the iframe itself, it gets cut off by the edge of iframe. I think by using div instead of iframe can solve this problem as well.\nI'd love to implement your \"hack\" for the time being, where exactly should that piece of code be added? In the editor source-code?\nedit: The hack messed up a lot of stuff though, like cursors. And somehow I didn't notice that pull-request.\nI'll try your fix first and see how things go.\nedit2: Unfortunately, I am running into more issues after trying apply this fix: \n1. Styling, not just preventing css fro interfering with quilljs, but the quilljs css seems to effect others as well.\n2. Somehow backspace loses effect.\n3. Event selection-change does seem to fire anymore.\n. @leoasis Not sure really, I am not using the multi cursor module either. It might also have something to do with Reactjs even. But at the current state, when I try to use the div mode, the toolbar doesn't seem to respond to text-selection, backspace doesn't work. I am guessing that the editor has bound its event listeners to the wrong places. Well, I've been trying out some other hacks, so I manually copied the changes to my local repo, maybe there were typo's or some other errors due to that. I'll try to investigate into this when I have a bit more time.\n. @jhchen Yes, ideally the toolbar icon itself could show the color as well. But the indicator in the dropdown is helpful too. Thanks for the update!!\n. ",
    "djl132": "wait, so how do i set and make it grow, then. I've been trying to do that for DAYS. \n. ",
    "Vandana1992": "Can we have editor to behave like textarea so that there would be draggable feature.Is this feature available in quill?. ",
    "benbro": "\nThe third instruction you're seeing is saying delete the first two letters and insert 'aaa'.\n\nI thought I should process ops in the order received so doesn't it say insert 'aaa', delete the first two letters? Should I first process RetainOp { start=2, end=3 } and only than InsertOp { value=\"aaa\" }?\n\nThis result in the same output but the optimal delta should be insert an 'a' at the 2nd position.\n\nDon't you mean that it should be insert an 'a' at the 3rd position?\not.js uses a very compact ops format\nhttps://github.com/Operational-Transformation/ot.js\nInsert op is just the string, retain is the number of chars you skip and delete is the number of chars you delete.\njavascript\n[\"a\"] // insert \"a\" in empty document\n[1, \"a\"] // retain one char and insert \"a\"\n[1, -1] // retain one char and delete the second char\nIt also gives you the baseLength so you could make sure two deltas are working on the same initial document.\nhttp://ot.substance.io/visualization/\nhttp://ot.substance.io/demo/\nWill you consider using the same format? It seems like a very compact format that is easy to work with in code.\nCan you explain how OT should work with the current format quill use?\nWith ot.js format, I just traverse the document and transform ops of a user against the server.\nHow do you do it with the following delta?\njavascript\n[ InsertOp { value=\"aaa\" }, RetainOp { start=2, end=3 } ]\nThe reason I'm asking is I tested the GoInstant quill demo and it seems to work worst than ot.js demo.\nI looked at the ops in the console and tried to find why.\n. I made another test.\nI have \"12\" in the document.\nI'm adding \"3\" at the end to get \"123\"\njavascript\n[ InsertOp { value=\"123\" }, RetainOp { start=2, end=3 } ]\nFollowing you instructions:\nStart with: \"12\"\nStep 1: InsertOp { value=\"123\" } -> insert \"123\" at index 0 gives me \"12312\"\nStep 2: RetainOp { start=2, end=3 } -> current index is 0 so I delete characters 0-2 from the original document and get \"312\" this is clearly wrong.\nCan you please explain how it works in this case?\nI tested with a longer string \"123456789\". The last delta always have insert op with the complete string. Is this the non optimal representation you was referring to? In ot.js the last delta will be just [8,\"9\"].\n. > This is why I switched the instructions around earlier. The original character 0-2 is now index 3-5 since a 3 letter string just got inserted. So after step 2 you should have 123.\nI don't understand how it should work.\nWhat are the steps you do to get \"123\"?\nStart with \"12\"\nInsertOp { value=\"123\" } says insert \"123\" at index 0 so now I have \"12312\"?\nRetainOp { start=2, end=3 } says delete characters 0-2 so I have \"312\", retain from 2-3 gives me \"3\".\n. The keyboard module is documented here\nYou can use quill.keyboard.addBinding() to add a binding.\nYou can override the default bindings in the config:\nhttp://codepen.io/anon/pen/JRJgQB\n. @hhubik can you please fork the codepen example, modify it to reproduce your case and open a new github issue describing it?\n. quill supports tabs and automatically expand and shrink the width of each block when adding/removing text.\nMaybe we can define columns with tabs and add the table borders as a layer ontop of the text.\nThe column width in the table can be synced with the width of the text in each block separated by tabs.\nColumn width in all rows should be synced. Maybe a custom element can be inserted with a configurable width. (similar to how images are inserted).\n| First Header (tab) | Second Header (tab) |\n| --- | --- |\n| Content from cell 1 (tab) | Content from cell 2 (tab) |\n| Content in the first column (tab) | Content in the second column (tab) |\nA simple table GUI to add/remove rows and columns might be enough:\nhttps://wymeditor.github.io/wymeditor/dist/examples/21-table-plugin.html\n. @LeZuse are you referring to this issue?\nhttps://github.com/quilljs/quill/issues/673\n. I'm trying to implement this and submit a PR and I need some help.\nThe button is added to the toolbar but clicking on it has no effect.\nIt should behave like the align button but I couldn't make it work.\nHow can I make the new direction button add style \"direction: lrt\" or \"direction: rtl\" to a line when clicked?\nI've added 'direction' to the list of buttons in the toolbar.\nhttps://github.com/quilljs/quill/blob/develop/src/modules/toolbar.coffee#L10\njavascript\n  @formats:\n    LINE : { 'align', 'bullet', 'list', 'direction' }\n    SELECT : { 'align', 'background', 'color', 'font', 'size' }\n    TOGGLE : { 'bold', 'bullet', 'image', 'italic', 'link', 'list', 'strike', 'underline', 'direction' }\n    TOOLTIP : { 'image', 'link' }\nUsually the icon is the symbol \u00b6 with left/right arrows.\nDo you have such an icon that we can add to the icon fonts?\nI've added the icon to the theme:\nhttps://github.com/quilljs/quill/blob/develop/src/themes/snow/snow.styl#L96\ncss\n  .ql-format-button.ql-direction:before\n    content: \"\u00b6\"\nFor now, I'm flipping the icon when the button is active.\ncss\n.ql-format-button..ql-active.ql-direction\n  transform: scaleX(-1);\nI've added the button to the advanced demo:\nhttps://github.com/quilljs/quill/blob/develop/demo/advanced.jade#L64\njavascript\nspan.ql-format-button.ql-direction(title='Text Direction')\n. This is the branch I'm working on:\nhttps://github.com/benbro/quill/tree/textdir\nHow do I make the button add the direction style to the line element?\nhtml\n<p id=\"line-1\" class=\"line\" style=\"direction: rtl;\">\nI tried to copy the functionality of align in format.coffee but I see no effect.\nI'm using the following Font Awesome icons to get a text direction icon.\nCan you please add them to the fonts?\nhttp://fortawesome.github.io/Font-Awesome/icon/paragraph/\nhttp://fortawesome.github.io/Font-Awesome/icon/caret-right/\nhttp://fortawesome.github.io/Font-Awesome/icon/caret-left/\nI also requested a specific icon that we will be able to use in the future:\nhttps://github.com/FortAwesome/Font-Awesome/issues/3666\n. I don't know how to make the button add the \"direction: rtl;\" style. I tried several things but the style wasn't added to the line. Maybe there is some step that sanitize the HTML and remove my change?\nDo I need to add something like this to format.coffee?\njavascript\ndirection:\n      style: 'direction'\n      default: \"ltr\"\nI don't see \"direction: ltr\" added to the line.\nHow do I make it use \"rtl\" when the button is pressed?\nYes, it's common to write some lines in right-to-left direction and some lines in left-to-right direction like when adding an English paragraph in Arabic or Hebrew document. MS Word and Gmail let you define the text direction on a specific line and it continues to the next line until you change it back.\nExample:\nhttp://ckeditor.com/demo#full\n\n. Is there a chance your text-direction branch will be merged?\nPreferably, with the select button replaced with a toggle button.\n. It could be great if you could add it to core now and later move it to a separate module.\nThe change is minimal in code size and the button is optional anyway.\n. It could be great if you could add it to core now and later move it to a separate module.\nThe change is minimal in code size and the button is optional anyway.\n. I've read the new module guide but I don't understand how a module can add this feature.\nIsn't a module an overkill in this case? Adding direction support is only 8 lines of code.\n. I've read the new module guide but I don't understand how a module can add this feature.\nIsn't a module an overkill in this case? Adding direction support is only 8 lines of code.\n. Can you please explain how to implement a text-direction plugin with the module API?\n\nText-direction support may be supported in core at some point but there are a few other higher priority tasks before this can happen safely.\n\nHow is text-direction different from text-alignment which is already included in core?\n. Can you please explain how to implement a text-direction plugin with the module API?\n\nText-direction support may be supported in core at some point but there are a few other higher priority tasks before this can happen safely.\n\nHow is text-direction different from text-alignment which is already included in core?\n. Please let me know what browsers do you want me to check and how to check text direction and I'll do it.\n. Please let me know what browsers do you want me to check and how to check text direction and I'll do it.\n. There is only a finite small number of formats a text editor need to support and right-to-left is one of them. I would consider it much more useful than italic and not harder to implement.\nEven if you'll choose to add it as a plugin, there is an advantage in supporting it now to let users experiment and improve it.\nThe nice thing about quill is that it uses the browser rendering and layout engine so we get right-to-left for free. I've tested it in production in all browsers for few months and it works well.\nIn the mean time, I'll keep applying your rtl patch to new releases.\nThere is a small styling issue when using a list with direction:rtl. There is a missing margin on the right as can be seen here:\n\nIt can be tested with your rtl PR or with setting direction:rtl on the whole editor.\ncsss\n.editor-container {\n    direction: rtl;\n}\nTo fix it we can set the margin on both side. I don't think the right margin should be a problem in the normal direction:ltr case.\ncss\n.editor-container ol {\n    margin: 0 2em;\n}\n. There is only a finite small number of formats a text editor need to support and right-to-left is one of them. I would consider it much more useful than italic and not harder to implement.\nEven if you'll choose to add it as a plugin, there is an advantage in supporting it now to let users experiment and improve it.\nThe nice thing about quill is that it uses the browser rendering and layout engine so we get right-to-left for free. I've tested it in production in all browsers for few months and it works well.\nIn the mean time, I'll keep applying your rtl patch to new releases.\nThere is a small styling issue when using a list with direction:rtl. There is a missing margin on the right as can be seen here:\n\nIt can be tested with your rtl PR or with setting direction:rtl on the whole editor.\ncsss\n.editor-container {\n    direction: rtl;\n}\nTo fix it we can set the margin on both side. I don't think the right margin should be a problem in the normal direction:ltr case.\ncss\n.editor-container ol {\n    margin: 0 2em;\n}\n. I think browsers are smart enough to not let it effect scrolling performance.\nUsually, you have some threshold and you only fire the event after it\nor you fire the event only after the user finished scrolling.\n. I think browsers are smart enough to not let it effect scrolling performance.\nUsually, you have some threshold and you only fire the event after it\nor you fire the event only after the user finished scrolling.\n. I think that the event and method should be in core.\nIt could be nice to have a module that automatically sync the scroll position between participants.\nIn case the editor height is different, it could make sure the top row is the same.\n. How about this API?\n``` javascript\n// event\neditor.on('scroll', function(scrollLeft, scrollTop) {\n});\n//setters\neditor.scrollTo(x, y);\neditor.scrollTop(y);\neditor.scrollLeft(x);\n//getters\neditor.scrollTop();\neditor.scrollLeft();\n```\nSimplest option is to just fire the event (like CodeMirror does) and leave throttling to the user.\nhttps://github.com/marijnh/CodeMirror/blob/master/lib/codemirror.js#L2541\nIt's possible to throttle the scroll event. When the browser fires the event, we could start a timeout. If another scroll event is fired, cancel the timeout and create a new timeout. When the timeout fires, dispatch the editor's scroll event.\nWe could also have two events.\nscrolldone - fires only after the user done scrolling (or paused long enough).\nscroll - fires every X*timeout.\n. A nice idea to debounce the scroll event with requestAnimationFrame\nhttp://www.html5rocks.com/en/tutorials/speed/animations/\n. I actually just need scrollTop.\nI'm trying to sync the scroll position for two users.\n. It still happens on the latest version.\nI see it sometimes with two concurrent clients over a network with tandem.\nNot sure how to reproduce it locally.\n. It still happens on the latest version.\nI see it sometimes with two concurrent clients over a network with tandem.\nNot sure how to reproduce it locally.\n. Is the new Delta exposed by quill?\n. Is the new Delta exposed by quill?\n. Thanks\n. Thanks\n. Thank you for the fix.\n. @Jiiun addStyle isn't required anymore. You can override the line-height or any other style with CSS.\ncss\n.ql-editor {\n    line-height: 1.42;\n}. @Jiiun addStyle isn't required anymore. You can override the line-height or any other style with CSS.\ncss\n.ql-editor {\n    line-height: 1.42;\n}. @Jiiun you need to create a custom attributor and a custom toolbar button.\nYou can use the direction attributor as an example.\nhttps://quilljs.com/guides/how-to-customize-quill/#content-and-formatting\nIf you have further questions please use StackOverflow. github issues are for bugs.. @Jiiun you need to create a custom attributor and a custom toolbar button.\nYou can use the direction attributor as an example.\nhttps://quilljs.com/guides/how-to-customize-quill/#content-and-formatting\nIf you have further questions please use StackOverflow. github issues are for bugs.. @tomcon This issue is old and unrelated to your question.\nQuill uses classes by default. To make the output work in email you need to use inline styles instead.\nRead this guide about using inline style attributes.. @tomcon This issue is old and unrelated to your question.\nQuill uses classes by default. To make the output work in email you need to use inline styles instead.\nRead this guide about using inline style attributes.. I've tested the latest release with this commit and the color picker still doesn't show the selected color.\nThis is the expected result:\n\n\n. I've tested the latest release with this commit and the color picker still doesn't show the selected color.\nThis is the expected result:\n\n\n. Please see the screen capture showing this issue:\nhttps://docs.google.com/file/d/0B12AhxvnYHrAUmlyaDRKdVJqb2s/edit\n. Please see the screen capture showing this issue:\nhttps://docs.google.com/file/d/0B12AhxvnYHrAUmlyaDRKdVJqb2s/edit\n. I'm now able to reproduce it in Chrome 37:\n1. load the demo http://quilljs.com/examples/\n2. select all text with ctrl+a\n3. Type fast \"a\" and Enter several times to get \"a\"  in large font size in the first two lines as can be seen in the image. You'll see the error in the console.\n\nIs there a race condition when clicking Enter?\nSometimes I'm getting large font size only in the first line and sometimes in also the second line.\n. I'm now able to reproduce it in Chrome 37:\n1. load the demo http://quilljs.com/examples/\n2. select all text with ctrl+a\n3. Type fast \"a\" and Enter several times to get \"a\"  in large font size in the first two lines as can be seen in the image. You'll see the error in the console.\n\nIs there a race condition when clicking Enter?\nSometimes I'm getting large font size only in the first line and sometimes in also the second line.\n. Is there a chance you could help with this issue?\nI'm trying to use quill with OT between several users and it get out of sync after few sentences.\n. Is there a chance you could help with this issue?\nI'm trying to use quill with OT between several users and it get out of sync after few sentences.\n. I've disabled all the modules except for the toolbar but I still see this issue.\n. I've disabled all the modules except for the toolbar but I still see this issue.\n. Can you explain how to make a similar change to tandem-core?\nI have a code that rely on it and trying to find the equivalent to Delta.prototype.push so I can use clone instead of a new op.\n. Can you explain how to make a similar change to tandem-core?\nI have a code that rely on it and trying to find the equivalent to Delta.prototype.push so I can use clone instead of a new op.\n. To reproduce:\n1. go to the online demo http://quilljs.com/examples/\n2. In the top editor select all (Ctrl+a) and delete (Backspace).\n3. In the top editor write \"aaa\".\n4. In the bottom editor, place the cursor after the \"aaa\" string and write \"123\", you'll get \"aaa321\" instead of \"aaa123\".\n. To reproduce:\n1. go to the online demo http://quilljs.com/examples/\n2. In the top editor select all (Ctrl+a) and delete (Backspace).\n3. In the top editor write \"aaa\".\n4. In the bottom editor, place the cursor after the \"aaa\" string and write \"123\", you'll get \"aaa321\" instead of \"aaa123\".\n. I can confirm that I can't reproduce it with the above steps after your fix.\nI think I saw this issue before the focus change so I agree that the root cause probably still exists.\n. I can confirm that I can't reproduce it with the above steps after your fix.\nI think I saw this issue before the focus change so I agree that the root cause probably still exists.\n. Screen capture showing the issue at 00:30:\nhttps://drive.google.com/file/d/0B12AhxvnYHrAY1ZiYTVPSjcxR2M/edit?usp=sharing\nLine:\nhttps://github.com/quilljs/quill/blob/develop/src/modules/multi-cursor.coffee#L135\nThis is the same issue as https://github.com/quilljs/quill/issues/184\nSorry for the duplicate.\n. Screen capture showing the issue at 00:30:\nhttps://drive.google.com/file/d/0B12AhxvnYHrAY1ZiYTVPSjcxR2M/edit?usp=sharing\nLine:\nhttps://github.com/quilljs/quill/blob/develop/src/modules/multi-cursor.coffee#L135\nThis is the same issue as https://github.com/quilljs/quill/issues/184\nSorry for the duplicate.\n. I'm still getting an error when calling moveCursor.\nI have two clients connected to a server with some latency.\nAt some point I'm getting:\nUncaught TypeError: Cannot read property 'insertBefore' of null\njavascript\nif(cursorManager.cursors[userID]) {\n  cursorManager.moveCursor(userID, index);\n}\n. I'll update to the latest version and report back in few days.\n. I've updated to Quill version 0.19.7 and I can't reproduce it.\nI'll reopen if I'll see it again.\nThanks\n. If the editor starts with a newline character, shouldn't the delta after inserting 'a' be [{insert: 'a\"}, {retain: 1}] ?\nWhen the editor content is 'a\\n' I would expect the delta to get me from 'n' to 'a\\n'.\n. If the editor starts with a newline character, shouldn't the delta after inserting 'a' be [{insert: 'a\"}, {retain: 1}] ?\nWhen the editor content is 'a\\n' I would expect the delta to get me from 'n' to 'a\\n'.\n. When you write 'a' and delete it, you get a delta [{delete, 2}].\nIs this expected too or should the editor delete the 'a' and leave the '\\n'?\nI'm trying to sync two editors with OT.\nBoth editors starts with contents = '\\n' and this.inLine = this.inFlight = [{retain: 1}]\nOn one editor I'm inserting 'a' and it sends [{insert: 'a'}]\nI'm transforming and compsing and updating the other editor:\njavascript\nvar flightDeltaTranform, textTransform;\nthis.arrived = this.arrived.compose(delta);\nflightDeltaTranform = delta.transform(this.inFlight, false);\ntextTransform = flightDeltaTranform.transform(this.inLine, false);\nthis.inFlight = this.inFlight.transform(delta, true);\nthis.inLine = this.inLine.transform(flightDeltaTranform, true);\neditor.updateContents(textTransform);\nhttps://github.com/tandem/tandem/blob/master/src/client/file.coffee#L191\nBut textTransform is empty ops [].\nAm I doing something wrong?\n. Submitted an issue about the {delete: 2}.\nCan you please comment on what's wrong with the way I'm trying to implement the OT?\n. rich-text transform of insert-retain:\njavascript\nvar a = new Delta().insert('a');\nvar b = new Delta().retain(1);\na.transform(b, false);\nGives me empty delta, or implied [{retain: 2}]\nIn tandem the same transform gives [{insert: 'a'},{retain:1}]\nIs this a bug in rich-text?\nIf that's the intended behavior, I don't understand how OT with rich-text should work.\n. Yes, I'm trying to convert tandem to use rich-text and I don't see a reason for it to not work.\nIt's just OT transform and compose after all.\nLooks like rich-text doesn't use the ottypes spec API.\nIt should be:\ntransform(op1, op2, side) -> op1': Transform op1 by op2. Return the new op1. Side is either 'left' or 'right'\nWhich will solve the confusion.\nhttps://github.com/ottypes/text/blob/master/lib/text.js#L234\nAs you said, in rich-text b.transform(a) transforms a by b which doesn't make sense.\nIt's hard to convert from tandem to rich-text because there is also the priority param.\n. It returns delta2.transform(delta1) instead of delta1.transform(delta2)\nhttps://github.com/ottypes/rich-text/blob/master/lib/type.js#L36\nBut everything is upside down so I can't track anymore.\nDon't you think object.method(otherObject) should modify object and not otherObject?\n. delta1.compose (delta2) modifies delta1 so it's even more confusing.\nhttps://github.com/ottypes/rich-text/blob/master/lib/type.js#L23\n. Another issue, probably related.\nWhen you start with an empty doc, write \"a\" and delete with backspace, you can't write anymore.\nYou have to focus the editor again and only then able to write.\nThis only happens in examples/index.html but not in examples/advanced.html\n. Are there plans to add subscript and superscript?\nIs it possible to add support with a plugin?\n. The problem with Chrome nesting sup and sub elements instead of toggling can be fixed with css:\ncss\n.ql-editor sup {\n    vertical-align: super;\n}\n.ql-editor sub {\n    vertical-align: sub\n}\nhttp://stackoverflow.com/questions/17517839/jquery-execcommand-for-superscript-and-subscript-not-properly-toggling\nNot sure if that's a bug in Chrome or the expected behavior.\n. Can we prevent the user from using superscript and subscript at the same time?\n. Implemented in 1.0-beta.0\nhttp://beta.quilljs.com/docs/formats/\nThanks\n. http://quilljs.com/docs/api/#quillprototypeinserttext\nhttp://quilljs.com/docs/api/#quillprototypesethtml\nhttp://quilljs.com/docs/api/#quillprototypesettext\n. Is there a setting to configure undo to be global or per user?\nI can see the benefit of undoing only your edits but in my use case I prefer that the user will be able to undo all changes.\n. Thank you for the userOnly option.\n. @lalitkapoor you can see an example how to create a custom divider (hr) button here:\nhttp://quilljs.com/guides/cloning-medium-with-parchment/#dividers\nTable support is tracked here:\nhttps://github.com/quilljs/quill/issues/117\n. Is the need to call quill.update in collaborative applications will be documented?\nIt might be tricky to discover it without clear indication in the docs.\n. @justbittin I can't reproduce it in the playground with Chrome 54 and Firefox 50.\nPlease open a new issue with the requested information and how to reproduce it.. Thanks :)\n. No matter what text I'm selecting it has no effect.\nI've tried selecting the same text as you (WYSIWYG) and the heading button does nothing.\nTested with Firefox 46 and Chrome 50 on Windows 7.\nNot sure why it work for you but not for me.\nCan someone else try to reproduce?\n. Screen capture of the issue\nhttps://drive.google.com/file/d/0B12AhxvnYHrAWDJfT2Vza1ItMkk/view\nFirefox 46 on Ubuntu 16.04\n. Working now on beta.quilljs.com\nThanks\n. Isn't it the same as https://github.com/quilljs/quill/issues/665?\n. https://github.com/quilljs/quill/issues/635#issuecomment-220243661\n. In the meantime, the docs could say:\n\nSnow provides a default list of 35 colors for the color and background formats if set to an empty list: [{'color': []}, {'background': []}]\n\ninstead of\n\nSnow provides a default list of 35 colors for the color and background formats if left unspecified.\n. In a collaborative editor the cursor should stay at the same place when the delta adds content after the cursor.\n. It must be the quickest fix in the history of github :)\n. The clear formatting button has the same issue.\nWhen selecting some text and clicking on the Tx button the text-change event source is 'api' instead of 'user'\n\nTo reproduce:\n1. Visit http://beta.quilljs.com/docs/formats/\n2. Click on the Bold (B) button\n3. type 'a'\n4. select the bold letter 'a'\n5. click on the clear formatting button Tx\nThe last text-change event has 'api' source\n. I saw the error several times but I'm not able to reproduce it again.\nClosing for now.\n. Verified that the fix work in 1.0 head.\nThanks\n. I can reproduce.\nClicking on the link in the tooltip doesn't do anything.\nTested with Firefox 47 and Chrome 51 on Windows 7.\n. I can reproduce with latest chrome and firefox on windows 7.\n1. Visit beta.quilljs.com\n2. type fast random characters without stopping.\n3. click on the bold button every few seconds while still typing characters fast.\n. Related?\nhttps://github.com/quilljs/quill/issues/740\n. Are you using 1.0-beta?\nmaybe this?\nhttp://beta.quilljs.com/docs/api/#pastehtml\n. Same feature request\nhttps://github.com/quilljs/quill/issues/633\n. getHTML in 0.20.1 was:\nhttps://github.com/quilljs/quill/blob/0.20.1/src/core/document.coffee#L48\ncofeescript\ngetHTML: ->\n    # Preserve spaces between tags\n    return @root.innerHTML.replace(/\\>\\s+\\</g, '>&nbsp;<')\nSo maybe this can work in 1.0-beta?\nquill.container.firstChild.innerHTML\n. @chirag4396 please see the answer above\nUse quill.container.innerHTML or quill.container.firstChild.innerHTML to get the HTML\n. Quill in DefinitelyTyped was updated to 1.0.\nWith TypeScript 2.0 you can add \"@types/quill\" to package.json:\njson\n\"dependencies\": {\n    \"quill\": \"^1.0.4\",\n    \"@types/quill\": \"*\"\n}\nNot sure if it's possible to specify a version.\nUse it:\n``` javascript\nimport * as Quill from 'Quill';\nlet quill = new Quill('#editor');\n```\nI asked if it's possible to improve the import syntax:\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/issues/7767#issuecomment-249351597\n. @punya Just wanted to give the example here for everyone reading this issue.\n@sumitkm thank you for you work on the typings.\n. @michaelhertig try this:\ntypescript\nimport * as Quill from 'quill';\nlet editor: Quill.Quill;\neditor = new Quill('.quill');. @JordyVlassembrouck I think @michaelhertig asked about Quill and not about Delta.\nTo use Delta try this:\ntypescript\nimport * as Quill from 'quill';\nlet Delta: Quill.DeltaStatic = Quill.import('delta');\nlet delta = new Delta(jsonObject);. @michaelhertig\nThis https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18947 seems to simplify the import.. @michaelhertig \nJust tested with @types/quill version 1.3.2 which is the recent version and this works:\ntypescript\nimport Quill from 'quill';\nlet editor: Quill;\neditor = new Quill('.quill');\nTry to remove node_modules, delete npm or yarn lock file and install again to ensure you have the latest version.. @sumitkm is it possible to have separate @types/quill-delta that will allow us to do:\ntypescript\nimport Delta from 'quill-delta';\nWill @types/quill be able to use @types/quill-delta instead of duplicate the types?. All combinations of text-align and text-direction in Word:\n\n\n\n\n. Are you sure the issue is related to this project?\n. Firefox 47 on Windows 7\nAfter clicking on the formula, it moves to the middle of the code block.\n1. Visit http://beta.quilljs.com/\n2. Scroll to the bottom\n3. Click on the formula\n4. Scroll to the bottom and wait 1 second\n\n. In both instructions I mean clicking on the existing formula (x^2...) below the code block, not on the formula button.\n. Does it also fix the Firefox issue where the formula jumps to the middle of the code block?\n. Verified. Thanks\n. @xiaokaike there is a feature request for this:\nhttps://github.com/quilljs/quill/issues/801\n. Maybe you can paste the delta to help reproducing the issue:\njavascript\nconsole.log(JSON.stringify(quill.getContents()));\n. In the following example match[3] will be \"b\" instead of \"b-VAxGJdJeQ\"\njavascript\nvar url = 'https://www.youtube.com/watch?v=b-VAxGJdJeQ';    \nurl.match(/^(https?):\\/\\/(www\\.)?youtube\\.com\\/watch.*v=(\\w+)/)\n. Unless I'm missing something, I think that the cursor should be at the end of test and quill does the right thing.\nTextarea on browsers and Libreoffice act the same.\nCursor on empty line:\ntest\n|\nagain\nAfter backspace:\ntest|\nagain\n. For me it's the opposite.\nAfter DELETE the cursor is on the second row.\nAfter BACKSPACE the cursor is on the first row.\nI'm on Windows 7.\nMaybe it's a difference between Mac and Windows?\n. Borders can be collapsed with:\ncss\n.ql-active + .ql-active,\n.ql-active + .ql-selected,\n.ql-selected + .ql-active,\n.ql-selected + .ql-selected {\n  border-left-color: transparent !important;\n}\nand the same for hover/hover, hover/active and active/hover\n. Working for me with Firefox 48 on Windows 7\n. You can test 1,0 beta:\nhttp://beta.quilljs.com/\n. Did you try with version 1.0.0-rc0?\nhttp://quilljs.com/\nCan you list exactly the steps to reproduce as the bug instruction request?\n. I'm not expecting Quill to guess that this is a code block but if possible to preserve the line breaks and indentation.\nMaybe Quill just missing support for table with tr ?\nI tried pasting the code to the following editors. All preserve line breaks and indentations:\nNotepad on Windows 7\nNotepad++ on Windows 7\nGedit on Ubuntu\nSimple textarea on Firefox and Chrome\nPaste in Quill gives me:\nimport Parchment from 'parchment'; import Quill from './core/quill'; import Block, {\nPaste in a textarea gives me:\n```\nimport Parchment from 'parchment';\nimport Quill from './core/quill';\nimport Block, { BlockEmbed } from './blots/block';\n```\n. A working polymer example\nhttps://plnkr.co/edit/KrymvseC04NUdRdmq3Hz?p=preview\n. @vikrantrathore external styles still works in polymer (but it's deprecated):\nhttps://plnkr.co/edit/maMqUxJ6RFZbuqFdbBb5?p=preview\nNot sure how to use \"style modules\"\nIn any case, I think this is a polymer question and out of scope of quill.\n. A demo of quill polymer element with scoped styles:\nhttps://plnkr.co/edit/rlysj0CzZl9xq33nAySp?p=preview\nI had to add \":host ::content\" to workaround a polymer bug when styling dynamic elements.\nA third party polymer-quill package can just load quill and add a task to generate the quill-styles dom-module\n. @chuckh I've updated the plunker example.\n- Added height to the editor container:\n``` css\neditor {\nheight: 400px;\n\n}\n```\n- Added bounds config.\n  It won't be needed in the next quill release.\n  See https://github.com/quilljs/quill/pull/944\njavascript\nvar quill = new Quill(this.$.editor, {\n     modules: {\n         toolbar: true\n     },\n     bounds: document.body,\n     theme: 'snow'\n });\n. To enable use:\nquill.enable() or quill.enable(true)\nTo disable use:\nquill.disable() or quill.enable(false)\nhttp://quilljs.com/docs/api/#content\njavascript\nvar quill = new Quill('#editor', {\n    theme: 'snow'\n  });\nquill.disable();\n@jhchen I'm not sure the docs for enable/disable are in the right place.\nIt will be nice to be able to link to a specific method in the docs.\n. @jhchen yes, the Contents section is better for enable/disable.\n. Yes, it insert a newline:\n1. Visit http://quilljs.com/\n2. Focus the editor\n3. Call quill.disable(); in the console\n4. Press Enter\nMaybe it'll be enough to blur the editor when calling quill.disable()\n. Paste from LibreOffice:\nhtml\n<p dir=\"rtl\" style=\"margin-bottom: 0in; line-height: 100%\" align=\"right\">aaa</p>\nPaste from Word:\nhtml\n<p class=\"MsoNormal\" dir=\"RTL\" style=\"text-align:right;direction:rtl;unicode-bidi:embed\"><span dir=\"LTR\">aaa</span></p>\nLibreOffice use dir=\"rtl\" and align=\"right\" attributes\nWord use text-align:right and direction:rtl styles.\nThe clipboard tries to match classes and styles but it doesn't match html attributes like \"align\" and \"dir\".\nThis is the part that should match the attributes:\njavascript\nformats[attr.attrName] = attr.value(node);\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L171\nBut attr.keyName of the align attribute is 'quill-align' so it will never match:\njavascript\nlet result = match(node, this.keyName)[0] || '';\nhttps://github.com/quilljs/parchment/blob/master/src/attributor/class.ts#L36\nTo reproduce, paste this in the html tab in the playground\nhtml\n<div id=\"editor-container\">\n  <p align=\"right\" dir=\"rtl\">aaa</p>\n</div>\n. I've added AlignAttribute\njavascript\nlet AlignAttribute = new Parchment.Attributor.Attribute('align', 'align', config);\nexport { AlignAttribute, AlignClass, AlignStyle };\nhttps://github.com/quilljs/quill/blob/develop/formats/align.js#L7\nbut Parchment.query(name, Parchment.Scope.ATTRIBUTE) still matches the class attributor\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L168\nHow do I match by attribute?\nDo I need ATTRIBUTE_ATTRIBUTORS similar to STYLE_ATTRIBUTORS?\n``` javascript\nconst ATTRIBUTE_ATTRIBUTORS = [\n  AlignAttribute,\n  DirectionAttribute\n].reduce(function(memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\nif (ATTRIBUTE_ATTRIBUTORS[name] != null) {\n      attr = ATTRIBUTE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node);\n}\n```\nIsn't it better to loop over attributes, classes and styles separately?\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L167\n. Initial untested version of the multi-cursor module updated from 0.2:\nhttps://github.com/benbro/quill/tree/multi-cursor\nTo be useful we probably need the authorship module too.\n. @mmacfadden the multi-cursor module depends on the authorship module so you might want to update it to work with Quill 1.0.0\nhttps://github.com/benbro/quill/blob/multi-cursor/modules/multi-cursor.js#L82\nhttps://github.com/quilljs/quill/blob/0.20.1/src/modules/authorship.coffee\n@nateps getBounds gives you a rectangle. To be able to display a selection range you need to break the selection into multiple rows and get the bounds of each part.\n. Module guide:\nhttp://quilljs.com/guides/building-a-custom-module/\nYou'll also need to make Quill handle the 'author-' class.\n. I can't reproduce. For me the formula in the full.html example is working.\nDo you see an error in the browser console when loading the katex js file?\nhttps://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js\n. That's because of the browser security policy.\nYou can either use a web server or download and use third party javascript and css files locally.\n. Does the formula work for you on this page?\nhttp://codepen.io/anon/pen/VKLrjY\n. Where do you see that a link doesn't have target=_blank?\nAre you using recent version 1.0.3?\nWhen I go to the demo at http://quilljs.com and click on the first link, the tooltip show a link with target=\"_blank\". The link opens in a new tab.\nhtml\n<a class=\"ql-preview\" href=\"https://github.com/quilljs/quill/\" target=\"_blank\">https://github.com/quilljs/quill/</a>\n. When you go to the website you see a demo of the editor with some text.\nWhat happens when you click on one of the links in the text?\nhttp://quilljs.com\n\n. I don't see your image. Please use the github website.\n. The tooltip in your image let you edit or remove the link.\nThe link in the tooltip (next to \"Visit URL\") has target=_blank and opens in a new tab.\nI don't understand what is the issue here.\n. This is an editor. It let you create the link and edit it.\nFor the viewers you show the static HTML without the editor.\nhtml\nquill.container.firstChild.innerHTML\nYou can also override the link behavior to make it open the link instead of showing the tooltip.\nhttp://quilljs.com/docs/modules/toolbar/#handlers\n. @mpriscella I've created a codepen with your toolbar options.\nCan you reproduce it here?\nhttp://codepen.io/anon/pen/dpoLWq\nI don't see an error with Chrome 53 on Windows 7.\n. @jhchen might figure it from your screenshot.\nCan you create a codepen that reproduce it?\nDo you see the error on one of the demos on the website?\nThe video and formula(fx button) modules use a tooltip.\n. With your codepen the tooltip doesn't show but I don't see an error in the console.\n. Steps for Reproduction\n1. Load the html document below.\n2. Type \"Test\"\n3. Select the text and click on the link button.\nError in the console:\nTypeError: this.boundsContainer is null\nAs @etherbob said, when moving the quill.js script tag to the body, the error goes away.\nThat's because document.body isn't defined yet.\njavascript\nQuill.DEFAULTS = {\n  bounds: document.body,\n}\nhttps://github.com/quilljs/quill/blob/b7c623507c16df63fa4466f4dffb1541824b115c/core/quill.js#L301\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <style>\n      #editor-container {\n        height: 375px;\n      }\n    </style>\n    <link href=\"//cdn.quilljs.com/1.0.3/quill.snow.css\" rel=\"stylesheet\" type=\"text/css\" />    \n    <script src=\"//cdn.quilljs.com/1.0.3/quill.js\"></script>\n</head>\n<body>\n    <div id=\"editor-container\"></div>\n    <script>\n      var quill = new Quill('#editor-container', {\n        modules: {\n          toolbar: [\n            ['link']\n          ]\n        },\n        theme: 'snow'\n      });\n    </script>\n</body>\n</html>\n. A possible fix:\njavascript\nclass Tooltip {\n  constructor(quill, boundsContainer) {\n    this.boundsContainer = boundsContainer || document.body;\n. Fixed in 1.2.4\nCommit https://github.com/quilljs/quill/commit/6c32a39fe807f96e23794e1d7996a6063898a081. Editing actions fire text-change event but they don't fire the selection-change event.\nOnly non-editing movement of the cursor fire the selection-change event.\nIf this is intentional, this issue can be closed.\n. The bubble example is using <!DOCTYPE html>\nhttp://quilljs.com/standalone/bubble/\nTested with Chrome.\nYour example is missing the html, head and body elements.\n. The editor doesn't have enough height to show the tooltip.\nIf you'll create several lines to increase the height, you'll see the tooltip.\nTry this:\nhtml\n<div id=\"editor\" style=\"height:400px;\"></div>\n. Please open a new bug report.\nYour issue has nothing to do with doctype.\n. Answered here:\nhttps://github.com/quilljs/quill/issues/903#issuecomment-243844178\n. Screen capture of 'Clear all Formatting' button in Word on Windows 7.  It uses option 1.\n- A click removes block formatting of any line included in the range, even if the range is collapsed.\n- A click removes inline formatting included in the range.\n- If the range is collapsed, a click removes inline formatting of a word around the cursor.\nI think that the first two points are the expected behavior and what I would like to see in Quill. I'm not sure about the third point.\nI like option 1 which is the current behavior.\nWhat I'm only missing is removing block format when the range is collapsed #1228.\n. Can you fix the value in the color format instead?\n. Does adding \"bounds: document.body,\" fix it?\njavascript\nvar quill = new Quill('#editor', {\n    modules: {\n        toolbar: [\n            [{ header: [1, 2, false] }],\n            ['bold', 'italic', 'underline'],\n            ['image', 'code-block']\n        ]\n    },\n    bounds: document.body,\n    placeholder: 'Compose an epic...',\n    theme: 'bubble' // or 'bubble'\n});\nThis issue will be fixed in the next version:\nhttps://github.com/quilljs/quill/pull/944\n. Should be fixed in 1.0.4\n. Example for loading existing content:\nhttp://codepen.io/anon/pen/QKKvdZ\nPlease fork the playground and show what you are trying to do.\n. Previous discussion on textarea\nhttps://github.com/quilljs/quill/issues/87\n. Only tested with Firefox 48.\n. @Is it possible that it's something specific to the tests?\nMaybe something in initialize?\nhttps://github.com/quilljs/quill/blob/develop/test/helpers/unit.js#L104\nNot sure what's the difference because initialize just set the container's html.\nTesting with this PR produce the correct delta when using:\njavascript\nquill.pasteHTML('<p class=\"ql-align-center\">Test</p>');\nor\nhtml\n<div class=\"standalone-container\">\n  <div id=\"snow-container\"><p class=\"ql-align-center\">Test</p></div>\n</div>\nAssuming that it'll work, do you want to use DOMParser or close the PR?\nI think it's different from dangerouslySetInnerHTML in React because Quill use Delta which I think are safe.\nOnly  pasteHTML was unsafe.\nI'm not using pasteHTML myself. I created this PR to help with the discussion.\n. Do you have a suggestion about the failing tests?\n. I see. This example gives me:\n'inline' in Firefox 49 on Windows 7\nempty string in Chrome 53 on Windows 7\n'block' in IE11 on Windows 7\nhttp://codepen.io/anon/pen/EgWRrV\n. Thanks\n. You can convert Quill Delta to HTML on the server with node.js and jsdom without using a real browser.\nDemo:\nhttps://runkit.com/57e6d4ebaaf7d01400559d04/57e6d4ebc63d1e1400b586fc\njsdom is a javascript implementation of the DOM.\nMutationObserver support in jsdom - https://github.com/tmpvar/jsdom/issues/639\ngetSelection support in jsdom - https://github.com/tmpvar/jsdom/issues/317\nAll the issues with HTML that jhchen raised are obviously still valid.\n``` javascript\nvar jsdom = require(\"jsdom\");\njsdom.env({\n    html: '',\n    scripts: [\n        'https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/0.7.22/MutationObserver.js',\n        'https://cdn.quilljs.com/1.0.4/quill.js'],\n    onload: function (window) {\n        var document = window.document;\n        // fake getSelection\n        // https://github.com/tmpvar/jsdom/issues/317\n        document.getSelection = function() { \n            return { \n                getRangeAt: function() {}\n            };\n        }; \n    var container = window.document.getElementById(\"editor-container\");\n    var quill = new window.Quill(container, {});\n\n    var delta = {\n      ops: [\n        { insert: 'Gandalf', attributes: { bold: true } },\n        { insert: ' the ' },\n        { insert: 'Grey', attributes: { color: '#ccc' } }\n      ]\n    };\n    quill.setContents(delta);\n\n    console.log(document.querySelector(\".ql-editor\").innerHTML);\n}\n\n});\n```\n. Previous discussion:\nhttps://github.com/quilljs/quill/issues/104\n. If I'm not mistaken, the recent delta on the server (head) should be the result of calling compose on all the deltas in the history.\ndelta.compose(other) calls delta.chop() at the end.\ndelta.chop() should remove trailing retain op if exists.\n. If I'm not mistaken, the recent delta on the server (head) should be the result of calling compose on all the deltas in the history.\ndelta.compose(other) calls delta.chop() at the end.\ndelta.chop() should remove trailing retain op if exists.\n. You are right, but I think that setContents with retain or delete doesn't really make sense.\nMaybe it's a bug in rich-text. jhchen will know better.\n. You are right, but I think that setContents with retain or delete doesn't really make sense.\nMaybe it's a bug in rich-text. jhchen will know better.\n. Example of custom controls with built-in toolbar controls:\nhttp://codepen.io/anon/pen/ALoxpX\nThe \u2126 button inserts the \u2126 symbol at the current cursor.\n. Example of custom controls with built-in toolbar controls:\nhttp://codepen.io/anon/pen/ALoxpX\nThe \u2126 button inserts the \u2126 symbol at the current cursor.\n. The last example under the toolbar container section explain the above example\nhttp://quilljs.com/docs/modules/toolbar/#container\n. The last example under the toolbar container section explain the above example\nhttp://quilljs.com/docs/modules/toolbar/#container\n. Something like this?\nhttp://codepen.io/anon/pen/rrzpGx\n. Something like this?\nhttp://codepen.io/anon/pen/rrzpGx\n. I don't see an option to tell quill to use the default buttons of the theme and add a custom button.\n. I don't see an option to tell quill to use the default buttons of the theme and add a custom button.\n. Yes, this is intended.\nSome formats like alignment, direction and list act on the whole line while others like bold act on several characters. You can't have one character with left alignment and another with center alignment on the same line. The new line character is the perfect place to store formats that affect the whole line.\n. Yes, this is intended.\nSome formats like alignment, direction and list act on the whole line while others like bold act on several characters. You can't have one character with left alignment and another with center alignment on the same line. The new line character is the perfect place to store formats that affect the whole line.\n. I can reproduce with the following steps:\n1. Visit http://quilljs.com/playground/\n2. Type: \"111 222\"\n3. Place the cursor before the first \"2\"\n4. Press the Bold button and type \"aaa \"\n5. Press the Bold button and type \"bbb \"\n6. Click undo several times.\nAfter step 5 we have:\n111 aaa bbb 222\nAfter the first undo I'm getting:\n111 aaa bbb22222\nAfter the second undo I'm getting:\n111 aaa 222\n22\n22\n2\nThe result after undo depends on the browser.\nFirefox 49 on Windows 7\nVersion: 1.0.6\n. I can reproduce with the following steps:\n1. Visit http://quilljs.com/playground/\n2. Type: \"111 222\"\n3. Place the cursor before the first \"2\"\n4. Press the Bold button and type \"aaa \"\n5. Press the Bold button and type \"bbb \"\n6. Click undo several times.\nAfter step 5 we have:\n111 aaa bbb 222\nAfter the first undo I'm getting:\n111 aaa bbb22222\nAfter the second undo I'm getting:\n111 aaa 222\n22\n22\n2\nThe result after undo depends on the browser.\nFirefox 49 on Windows 7\nVersion: 1.0.6\n. Can you reproduce in codepen?\nhttp://quilljs.com/playground/\n. Can you reproduce in codepen?\nhttp://quilljs.com/playground/\n. You are using 1.0.0\nCan you try with the recent 1.0.6 release?\nI'm trying to reproduce with a simpler test:\nhttp://codepen.io/anon/pen/dpVQGb\nHow is this different from what you are doing above?\n. You are using 1.0.0\nCan you try with the recent 1.0.6 release?\nI'm trying to reproduce with a simpler test:\nhttp://codepen.io/anon/pen/dpVQGb\nHow is this different from what you are doing above?\n. Testing GitHub Markdown for Strikethrough.\nMarkdown:\n~~Strikethrough text~~\nResult:\n~~Strikethrough text~~\nRendered HTML:\nhtml\n<del>Strikethrough text</del>\n. Testing GitHub Markdown for Strikethrough.\nMarkdown:\n~~Strikethrough text~~\nResult:\n~~Strikethrough text~~\nRendered HTML:\nhtml\n<del>Strikethrough text</del>\n. Are you looking for this example?\nhttp://quilljs.com/guides/how-to-customize-quill/#content-and-formatting\n. You have custom code in your example so it's hard to know where the problem is.\nTry to create a codepen with the minimum code required to reproduce your issue.\nHere is a working codepen with clipboard.dangerouslyPasteHTML:\nhttp://codepen.io/anon/pen/JRLpGY\n. You have custom code in your example so it's hard to know where the problem is.\nTry to create a codepen with the minimum code required to reproduce your issue.\nHere is a working codepen with clipboard.dangerouslyPasteHTML:\nhttp://codepen.io/anon/pen/JRLpGY\n. Asked on Stackoverflow as well.\nPlease don't double post.\n. Asked on Stackoverflow as well.\nPlease don't double post.\n. You can use updateContents\nexample:\nhttp://codepen.io/anon/pen/ORvQXQ\n. You can use updateContents\nexample:\nhttp://codepen.io/anon/pen/ORvQXQ\n. Please continue the discussion on Stackoverflow.\n. Please continue the discussion on Stackoverflow.\n. I'll create a PR.\nIn the first example under the 'Content and Formatting' section, the color and size attributors are imported and registered but they are already registered by default so why is it needed?\nhttp://quilljs.com/guides/how-to-customize-quill/#content-and-formatting\nhttps://github.com/quilljs/quill/blob/develop/quill.js#L47\nThe first argument in the register API method is a path:string or defs:object but in the example a class is passed.\nhttp://quilljs.com/docs/api/#register\n. I'll create a PR.\nIn the first example under the 'Content and Formatting' section, the color and size attributors are imported and registered but they are already registered by default so why is it needed?\nhttp://quilljs.com/guides/how-to-customize-quill/#content-and-formatting\nhttps://github.com/quilljs/quill/blob/develop/quill.js#L47\nThe first argument in the register API method is a path:string or defs:object but in the example a class is passed.\nhttp://quilljs.com/docs/api/#register\n. I couldn't think of a real world example for a custom class so I'm closing this for now.\n. I wasn't aware of CSP. How do you check what compatible with CSP directive of style-src: self?\nWhat about using a style attributor instead of a class attributor?\nThis stackoverflow comment says that modifying the element style attribute is fine. I don't understand how it is different than any other change to CSS.\nhttp://stackoverflow.com/questions/24713440/banned-inline-style-csp-and-dynamic-positioning-of-html-elements/29089970#29089970\nDo you want this module in core?\n. As @CapTec said, you can use toolbar handlers.\nWhat do you mean by 'select the embed'?\nSomething like the 'link' embed where clicking on a link let you edit it?\n. As @CapTec said, you can use toolbar handlers.\nWhat do you mean by 'select the embed'?\nSomething like the 'link' embed where clicking on a link let you edit it?\n. Confirmed that the issue is fixed in 1.1.8\nhttp://codepen.io/anon/pen/ZLzKwg. Quill styles are scoped under .ql- namespace so they don't leak to other elements on your page . The margin and padding you are referring to are only applied to paragraphs under the .ql-editor CSS class.\nYou can either override the paragraph margin or create a custom Quill theme.\n. You can create a Closure Compiler extern file manually and add missing functions when you need them.\nThis is not complete and maybe not 100% correct but can be used as a starting point:\n``` javascript\n/*\n * @constructor\n * @param {string|Element} element\n * @param {Object} config\n /\nvar Quill = function(element, config) {};\n/*\n * @param {string} module\n * @return {Object}\n /\nQuill.import = function(module) {};\n/*\n * @return {Quill.Delta}\n /\nQuill.prototype.getContents = function() {};\n/*\n * @param {Quill.Delta|Array} delta\n /\nQuill.prototype.setContents = function(delta) {};\n/*\n * @param {Quill.Delta} delta\n * @param {string=} source\n /\nQuill.prototype.updateContents = function(delta, source) {};\n/*\n * @constructor\n /\nQuill.Op = function() {};\n/* @type {number} /\nQuill.Op.prototype.retain;\n/*\n * @constructor\n * @param {Array} ops\n /\nQuill.Delta = function(ops) {};\n/* @type {Array.} /\nQuill.Delta.prototype.ops;\n/*\n * @param {Quill.Delta} delta\n * @return {Quill.Delta}\n /\nQuill.Delta.prototype.compose = function(delta) {};\n```\n. You'll probably want to ask about externs generation on the Closure Compiler or cljsjs mailing list.\nQuill's API isn't too large so you should be able to generate extern manually.\nYou'll might want to add the Delta API\nIf you are going to extend Quill, you'll also need the Parchment API\n. I've tried typing, pressing enter and typing again in the playground and I'm not getting an error in Chrome 54.\nI see that you are calling quill.setContents(data) with a delta received from firebase.\nInstead of 'type anything, press enter...' can you specify the exact steps to reproduce on the playground without using firebase?\nSomething like:\n1. Type 'abc'\n2. Place the cursor after the letter 'b'\n3. Press Enter\n4. Call quill.setContents(data); with {\"ops\": [... fill the actual ops here...]}\n. You can make an element unselectable with CSS:\ncss\n.unselectable {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n}\nhttp://codepen.io/anon/pen/vXPgvw\n. You can make an element unselectable with CSS:\ncss\n.unselectable {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n}\nhttp://codepen.io/anon/pen/vXPgvw\n. What exactly are you trying to paste? Please add it here as HTML string.\nCan you reproduce on the playground?\n. Caused by this PR:\nhttps://github.com/jhchen/fast-diff/pull/2\n. This question is about submitting a form with JavaScript and not specific to Quill.\nPlease use GitHub issues for bugs and ask general JavaScript and HTML questions on StackOverflow or similar.\n. css\n.ql-editor.ql-blank::before {\n  font-size: 20px;\n}\n. Please provide the requested info like Browser, OS and Quill version.\nWhat do you mean by markup stripped?\nIn Firefox both examples look the same.\nIn Chrome the first example is only missing a new line between Foo and Bar.\nWhat's your use case for initializing an editor in an element not attached to the DOM?\n. What is the use case?\n. This is by design.\nSome formats like alignment, direction and list act on the whole line while others like bold and underline act on several characters. You can't have one character with left alignment and another with center alignment on the same line. The new line character is the perfect place to store formats that affect the whole line.\n. I can reproduce on version 1.1.3 but also on 1.0.0.\n@peterweck you can check with this codepen that you are getting the same error with 1.0.0\nhttp://codepen.io/anon/pen/jrRBGL\n. Delta docs:\nhttp://quilljs.com/docs/delta/\nhttps://github.com/quilljs/delta\nYou can use the delete insert and retain methods to customize a delta.\nFor example, to add a color attribute to the first 5 characters:\njavascript\ndelta.retain(5, { color: '#0c6' });\n. Thanks for the update.\n. Previous discussion about HTML mode:\nhttps://github.com/quilljs/quill/issues/128#issuecomment-215263950\n. Previous discussion:\nhttps://github.com/quilljs/quill/issues/903#issuecomment-243844178\n. Related:\nhttps://github.com/quilljs/quill/issues/90\nhttps://github.com/quilljs/quill/pull/995\n. Please show a minimal example of HTML you are trying to paste and a codepen reproducing the issue.\nAdd the requested information like browser, OS and Quill version.\n. See SizeStyle as an example of how to use inline style.\n. Color use inline style by default.\nYou can replace the default align class format with a style format\nI don't understand what you mean by size array.\n. The SizeStyle format has a whitelist with ['10px', '18px', '32px'].\nYou can create a custom format if you need other options.\n. You can import ui/icons and override icons:\njavascript\nvar icons = Quill.import('ui/icons');\nicons['bold'] = '<i class=\"fa fa-bold\" aria-hidden=\"true\"></i>';\nDemo:\nhttp://codepen.io/anon/pen/NbWJGb\n. @skmohammadi you probably need to register your custom format as well.\nhttps://quilljs.com/playground/#class-vs-inline-style\nhttps://quilljs.com/guides/how-to-customize-quill/#customizing-attributors. @skmohammadi please search stackoverflow for similar questions:\nhttps://codepen.io/anon/pen/PGRQrx\nhttps://stackoverflow.com/a/44225523. The editor always has at least a new line character.\nCall quill.getContensts() and see that you have insert op with \"\\n\".\n. <list> is not a valid HTML element.\n. The link placeholder is hard coded here.\nTemp workaround:\njavascript\nvar quill = new Quill('#editor-container', {\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline'],\n      ['image', 'code-block', 'link']\n    ]\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow'  // or 'bubble'\n});\n// change the link placeholder to www.github.com\nvar tooltip = quill.theme.tooltip;\nvar input = tooltip.root.querySelector(\"input[data-link]\");\ninput.dataset.link = 'www.github.com';\n. Use the formats config to define a whiltelist of formats to allow in the editor. By default all formats are allowed.\nList of supported formats.\nFor example, to allow all formats except for image and video:\njavascript\nvar formats = [\n  'background',\n  'bold',\n  'color',\n  'font',\n  'code',\n  'italic',\n  'link',\n  'size',\n  'strike',\n  'script',\n  'underline',\n  'blockquote',\n  'header',\n  'indent',\n  'list',\n  'align',\n  'direction',\n  'code-block',\n  'formula'\n  // 'image'\n  // 'video'\n];\nvar quill = new Quill('#editor-container', {\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline'],\n      ['code-block']\n    ]\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow',  // or 'bubble'\n  formats: formats\n});\n. Explained in the  guide.\njavascript\nvar FontStyle = Quill.import('attributors/style/font');\nQuill.register(FontStyle, true);\n. The Cloning Medium with Parchment page in the guide explains how to add custom blots.\nExample:\n``` javascript\nlet Inline = Quill.import('blots/inline');\nclass XVideoBlot extends Inline { }\nXVideoBlot.blotName = 'xvideo';\nXVideoBlot.tagName = 'x-video';\nQuill.register(XVideoBlot);\n```\n. Where is the 'Timeline Collect garbage' button in step 3?\nI don't see it in Chrome 54 and I don't see the graph above.\nDid you have a chance to test it in Firefox to see if it's specific to Chrome or not?\nIt will be interesting to disable all Quill modules and comment parts of the core until the leak disappears.\n. I see it thanks.\nDid you test on a separate page not on codepen and without an iframe?\n. Removing the toolbar module with \"toolbar: false\" brings the nodes graph to the baseline.\nThe listeners graph is still high.\nCan you verify?\n. I think your code holds a reference to the old div and quill in a closure.\nI modified your code and now the nodes and listeners graphs goes to minimum:\nhttp://codepen.io/anon/pen/ENZGRK?editors=1010\nSeems like there is no leak in Quill.\n. Example of two editors on the same page.. The toolbar HTML markup mirrors the JSON config:\njavascript\n[{ 'list': 'ordered'}, { 'list': 'bullet' }]\nIf you check the toolbar elements created from a JSON config you'll see the same markup.\n. Example how to apply Quill to a div with existing content.. Please provide all the requested details in the issue template like steps to reproduce, browser, Quill version.... You can override the link format with a custom format that doesn't create the target attribute.\nYou can't have two formats acting on the same A tag name.\n. Remove the target attribute only from you inner app links:\nhttp://codepen.io/anon/pen/GNMXZa. The link is exported as a normal Javascript class.\nShould be possible to use the Quill Typescript definitions.. I don't think undo/redo icons are common in text editors.\nI don't see such icons in Word, LibreOffice and Google Docs.\nIf you need it, it's easy to add custom buttons and call the history module.\nYou can find undo and redo icons here.. On the client you could wrap setContents with try/catch as shown in this example.\nWhat is the added value of validating the delta on the server?\nA malicious user can send a bad delta but he could also send blank text, random characters or spam.\nWhat are we trying to solve here?\nIf there is an existing project that gives you a JSON schema for Quill, why can't you use it?. What are you trying to do and what doesn't work?. Quill work as a black box. You apply it to a div and it gives you a rich text editor.\nI don't understand why you care about the structure below the editor element and why do you need the contenteditable attribute.. This is based on StackOverflow:\njavascript\nvar reg = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([a-zA-Z0-9_-]+).*/;\nvar match = value.trim().match(reg);\nif (match && match[2].length == 11) {\n value = 'https://www.youtube.com/embed/' + match[2] + '?showinfo=0';\n}. Please create two separate issues.\nPlease include a simple real world use case for rendering Blots in edit/readonly mode.\nAdding CSS with the .ql-disabled class is probably the best solution. I don't think Quill should render a Blot differently in readonly mode.\nPlease simplify the description of your second issue.\nQuill doesn't transform a textarea but a div.\nQuill doesn't have two-way data bindings. It uses the markup inside the div to initialize the editor content.. Use {header: false} instead of {h1: false}\nhttp://codepen.io/anon/pen/jVzqmr. List of supported formats:\nhttp://quilljs.com/docs/formats/. If you want to disable formats, using the 'formats' config option might be better:\nhttp://quilljs.com/docs/configuration/#formats. Please don't include stuff like {{ caption }} that is not related to Quill or JavaScript in code examples. It makes it harder to understand.\nA working codepen example is much better.\nYou can render the Blot the same for both normal and readonly modes and hide/show parts of it based on the .ql-disabled class.. Your code example has nothing to do with Quill.\nPlease include a simple working example to show your issue.. You are trying to create a Blot that has an image and a caption and make the caption editable inline?\nHow will the user add a new image?\nHow will the user change the image?\nNot sure if it's possible to make the caption editable inline ( @jhchen  ?)\nYou can create an image tooltip that has two fields:\n- file/url field for the image\n- caption field\nThat will allow you to add a new image with a caption, replace an image and edit a caption.. If you are using your own toolbar container you also need to create the buttons inside it.\nhttp://quilljs.com/docs/modules/toolbar/\nView the source of this page as an example:\nhttp://quilljs.com/standalone/full/. Are you missing quill.snow.css?\nPlease fork the codepen example and show your code.\nI'm not familiar with WordPress.. An example of using a toolbar container.\nCompare with your code and find what is missing.. Does this example do what you need?\nhttp://codepen.io/anon/pen/oYdyKa\n@jhchen is there an easier way to add fonts?\nI think the guide is missing the steps to add the fonts to the toolbar:\nhttp://quilljs.com/guides/how-to-customize-quill/#customizing-attributors. Quill transforms a div into a rich text editor, not textarea or other form elements.\nPlease fork the codepen with a real example showing your issue.. Custom font example. Please open separate issue with all the requested information for each problem you see.\nIt's hard to discuss several issues at one place.. Is there original issue still valid after you saw the custom font example?. Quill makes the HTML consistent on all browsers.. CAPS doesn't change the semantics.. Look at the authorship module.. From the docs, the difference between the editor-change event and the text-change event:\n- editor-change is called before text-change.\n- editor-change is also called for silent source.\nThis can be verified in the code.\nThe PR is an update of the module from Quill 0.2.. Please share a codepen that reproduce this.. Custom font size example.. A simple solution might be to separate the header from the editor\nhtml\n<input type=\"text\">\n<div id=\"editor-container\"></div>. Quill work with a div. It doesn't work directly with form elements.\nIf you want to submit the content with a form you need to copy it as shown in this example.\nIn the above codepen example you could add the required attribute to the about input field.. {retain: 0} is not a valid op.\nDelta docs says:\nIt is not recommended to construct Deltas by hand\u2014\nrather use the chainable insert(), delete(), and retain() methods to create new Deltas.\njavascript\nvar delta = new Delta();\ndelta.retain(0);\ndelta.ops.length == 0;. If you know that the last char is always a new line, you might do (untested):\njavascript\ndelta.retain(delta.length()-1).delete(1);. Please share a Word document that reproduces this issue.\nYou can upload the doc to google drive or dropbox.. I've added a comment on #954.\nCurrently removeFormat doesn't remove block formats when the range is collapsed.\nThat's the only thing missing to make Quill remove format behavior ideal.. @sachinrekhi Thank you for sharing the code. Is there a chance you can create a CodePen with all the parts?\nWhat non-emojis symbols have length 2?. Thanks for the code.\nThe regex is large and emoji are rare. Testing the string length will probably be much faster.\nDo you think it's better to test the regex only if the string has wrong length?\njavascript\nif([...str].length != str.length) {\n  // test regex here\n  // if not emoji filter it to prevent OT issue on the server?\n}. If there are non-emoji symbols with a length of 2 it will still break OT.\nMaybe it'll be safer to add this after replacing emoji?\nAgain, assuming that emoji are rare and the performance impact will be negligible.\njavascript\n[...str].filter(function(str) {return str.length == 1}).join('');. The difference between your two examples is only the way you import Quill?\njavascript\nimport Quill from 'quill';\nand\njavascript\ndeclare var Quill: any;\nIn your first example, what happen when you do:\njavascript\nngAfterViewInit() {\n  console.log(Quill);\n}. If you'll have access to Quill and this.el.nativeElement you'll probably be able to create the editor.\nTry importing something else like moment.js or JQuery and see if console.log gives you anything.. Thanks for the update.. I can't reproduce. Works fine for me.\nDo you see the issue in the codepen example?\n. Can you reproduce it in the codepen?. If this is the same issue you might try to upgrade Prototype version like suggested here:\nhttps://code.google.com/p/gmaps-api-issues/issues/detail?id=7067\nThis is a Prototype issue which is old and unsupported.\nClosing.\n. You can use the selection-change event.\n\nA null range indicates selection loss (usually caused by loss of focus from the editor). You can also use this event as a focus change event by just checking if the emitted range is null or not.. @abramz please open a new issue with your explanation why selection-change event isn't enough to detect focus and blur with all the info requested in the issue template.. There is a form submit CodePen example. Answered here.\nPlease read the docs and search before asking.. A list of all available formats and a demo:\nhttp://quilljs.com/docs/formats/\n\nThe toolbar page has an example with json:\nhttp://quilljs.com/docs/modules/toolbar/#container. The question is answered here.\nThere is an plain text example in the docs.. Can you make a screen capture of the cursor going up when you press Enter?. You should track the Quill instance in your code.\nPlease see this about the destroy method: https://github.com/quilljs/quill/issues/1040. You can change the default font size with css:\ncss\n.ql-editor {\n    font-size: 15px;\n}\nAn example how to use inline style instead of class and add a custom size like 16px to the list.. You can use inline styles instead of classes.. You can listen to click events on the document and check if the event target is inside or outside of the editor and toolbar container.. Just a thought. Maybe it's possible to get the HTML element from the pixel position with Document.elementFromPoint() and than get the index from the element?. I'm not familiar with this part of the code but this is probably a good starting point:\nhttps://github.com/quilljs/quill/blob/develop/core/selection.js#L165. A naive implementation without binary search:\nhttp://codepen.io/anon/pen/dWXBwd. code-block is block level blot. It is assigned on the whole line, not just part of it.\nThe new line characters \\n is the correct place to put block level attributes.\nIf you'll test the same with inline attribute like bold, you'll see that it's applied to the text.. If the attribute is set on a new line character (\\n) it's a block blot.\nIf the attribute is set on a text span, it's inline blot.\nYes, you need to check for the attributes of the new line character to know if it's code-block.. There are two separate settings, formats and toolbar.\n\nBy default all formats are enabled and allowed to exist within a Quill editor and can be configured with the formats option. This is separate from adding a control in the Toolbar.\n\nYou can also customize attributes.\nCodePen example for adding custom fonts.. Asked and answered before.\nQuill uses the Delta format.\nYou can get HTML output with quill.root.innerHTML.\nIf you need other formats you'll have to implement them.. The change is to use range after verifying that it's not null because if range is null range.index will throw an error.. Updated my comment.\nThank you for the explanation.. Can you please fork the codepen and create a simple test case and steps required to reproduce the bug?\nhttps://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#bug-reports\n. Please simplify the test case to the minimum required to reproduce the issue and explain what steps are required to see it.. Try to fork the CodePen and reproduce your issue there.\nIf it doesn't happen in the CodePen, it's something wrong on your side.. Good.. Please see answer here: https://github.com/quilljs/quill/issues/926#issuecomment-246137520\nAnd possible workaround in the next comment.. The placeholder is styled with css\nYou can override it with your custom style.. I can reproduce by copying it as HTML not as a string:\n1. copy the HTML from the result panel of this CodePen\n2. Paste in the editor https://quilljs.com/\nTested with Firefox 53 on Windows 7\nQuill 1.2.4. Quill doesn't control the DONE and POST buttons in your screenshot.\nIt's a problem with your CSS, not related to Quill.. https://quilljs.com/docs/modules/clipboard/#dangerouslypastehtml. In this CodePen the initial HTML and new elements have background, color and size inline styles.. You can find the list of formats in docs and code.\nThe font attributor for example has FontStyle and FontClass.\n. I can reproduce:\n\nVisit http://codepen.io/anon/pen/NjBxdy\nOpen the console.\n\nExpected behavior:\nIn Chrome the first line is bold and the console gives 'bold' for el.style.fontWeight and window.getComputedStyle(el).fontWeight\nActual behavior:\nIn Firefox the first line isn't bold and window.getComputedStyle(el).fontWeight == '700'\nThis line gives false in Firefox:\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L302\njavascript\nif (style.fontWeight && computeStyle(node).fontWeight === 'bold') {\n    formats.bold = true;\n}\nPlatforms:\nChrome 58 on Windows 7 - good.\nFirefox 53 on Windows 7 - bad.\nVersion:\nQuill 1.2.4\n. The spec says:\n\nThe keyword 'normal' is synonymous with '400', and 'bold' is synonymous with '700'. \n. You can add a custom toolbar button that reads a file with JavaScript and paste the content to the editor.\n\nI don't think that reading text files is the responsibility of the core editor.. Discussion about table support: https://github.com/quilljs/quill/issues/117. The RTL style should be the opposite of the LTR style.\nhttps://github.com/quilljs/quill/blob/master/assets/core.styl#L76\nThis style:\nli::before\n    display: inline-block\n    margin-right: LIST_STYLE_MARGIN\n    text-align: right\n    white-space: nowrap\n    width: LIST_STYLE_WIDTH\nli:not(.ql-direction-rtl)::before\n    margin-left: -1*LIST_STYLE_OUTER_WIDTH\nShould probably changed to something like:\nli::before\n    display: inline-block\n    white-space: nowrap\n    width: LIST_STYLE_WIDTH\n    margin-right: LIST_STYLE_MARGIN\n    margin-left: -1*LIST_STYLE_OUTER_WIDTH\n    text-align: right\nli.ql-direction-rtl::before\n    margin-left: LIST_STYLE_MARGIN\n    margin-right: -1*LIST_STYLE_OUTER_WIDTH\n    text-align: left\nI'll test it locally and create a PR.. Please provide all the info requested in the template.\nTry to fork the CodePen with a minimal test case that reproduce your issue.. I don't understand your description.\nYour code example in the codepen is complex and you didn't include the info requested in the template.. You can extend the clipboard module for your app instead.. Answered here:\nhttps://github.com/quilljs/quill/issues/926#issuecomment-246270810. Need to decrease the window width to cause the lines to wrap and see the issue.\nThis fixes the indentation but it's not possible to style the ol element based on ql-direction-rtl class in the li child.\n```css\n.ql-editor ol, .ql-editor ul {\n    padding-right: 1.5em;\n}\n.ql-editor li.ql-direction-rtl::before {\n    margin-right: -1.5em;\n}\n```\n@jhchen why do we need padding on the ol element and negative margin on the li element?\nRemoving both doesn't seem to change the layout but fixes the rtl issue.\n```css\n.ql-editor ol, .ql-editor ul {\n    padding-left: 1.5em;\n}\n.ql-editor li::before {\n    margin-left: -1.5em;\n}\n```. Your fix works great.\nThanks.. Duplicate https://github.com/quilljs/quill/issues/409. Do you have a reason to assume the call to new Quill () isn't synchronous?. The toolbar is ready after calling 'new Quill()' as shown in this example.\nIt doesn't matter if you are using Quill in a vue.js, angular or reactjs app. You are the one instantiating the editor so you have a way to know when the editor and toolbar are ready.. There is no undo button in the toolbar. You'll need to add it yourself.\nIf you'll try the bold button instead it'll work.\nhttps://codepen.io/anon/pen/QgOVRz. Thanks @bitmapdata \nAlso answered here\nhttps://github.com/quilljs/quill/issues/1105. Just search for 'newline' in the closed issues:\nhttps://github.com/quilljs/quill/issues/890#issuecomment-244524128. Try to disable the toolbar and pass empty list to the formats config.. A working example.. Please provide all the info requested in the issue template.. \"background:red;\" isn't valid CSS. you probably mean \"background-color: red;\"\nIt's unclear what your issue is.\nTry to fork the CodePen and reproduce your issue without Firebase.. Quill ignores classes it doesn't know.\nYou should create custom class attributor and register it.\nhttps://github.com/quilljs/quill/issues/1325#issuecomment-282526907\n. A CodePen example for creating custom class attributor.. Did you download katex locally?\nYou need to load it from you server or CDN. It's not included in Quill.\nhttps://codepen.io/quill/pen/KzZqZx. I can't reproduce the error.\nDo you see the error here?\nhttps://codepen.io/anon/pen/JyoNvJ\n. See this comment for explanation:\nhttps://github.com/quilljs/quill/issues/1325#issuecomment-282526907. Probably removed by the Clipboard module which supports custom matchers.\nWhat's the use case of including hidden image in a text editor?\n. The syntax of types/quill changed to\nimport Quill from 'quill';\nbut I'm still getting an error when using ```types/quill@1.3.2\"\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/pull/18947. The sortable plugin is probably blocking the mousedown event from reaching quill.\nThere is a handle option which let you define an element that will control the drag.\nAnyway, this is a jQuery UI question and not a Quill issue.. What do you mean by \"Quill stops responding\"?\nIn my test the selected text isn't getting attributes if releasing the mouse outside the browser window:\n1. Visit https://quilljs.com/ or https://quilljs.com/playground/\n2. Type the word \"test\" in the editor.\n3. Select the word \"test\" and release the mouse outside the browser window.\n4. Click on the Bold button.\nExpected behaviour:\nThe text should be bold.\nActual behaviour:\nThe text isn't bold. Selecting the text again and trying to apply attributes has no effect.\nNew text behave as usual.\nPlatforms:\nChrome 60.0.3112.90 on Windows 7.\nVersion:\n1.3.1. I can't reproduce.\nTry to reproduce the issue with the CodePen without riot.js.\nIf there is something wrong only when using riot.js, that's not a Quill bug.. I think it's part of the 2.0 branch:\nhttps://github.com/quilljs/quill/commit/1c52076155e704fa35e19794b0b6e73930ec09a4. Please follow the issue template.\nThere is a CodePen example for using custom fonts.. Quill work with Delta format.\nThe API let you get the contents of the editor with editor.getContents().\nThere is a discussion for how to get the raw HTML from the editor but it's not part of the API and isn't  safe to send to the server.\nhttps://github.com/quilljs/quill/issues/903#issuecomment-243844178. If you place your cursor in this example and wait 5 seconds, the innerHTML in the console won't have the cursor span.\nAgain, you shouldn't trust raw HTML from the end user. Please use editor.getContents().\nThere is not bug here.. Quill doesn't output this span as demonstrated in the CodePen above. Did you check it?. The timeout just give you enough time to place your cursor to show that it isn't included in the HTML.\nIf you have further questions please use StackOverflow.. Isn't it true for every format?\nIf you override the default list of formats, you need to specify all the formats you need.\nTo me, the formats and configuration sections are clear.\nI don't think this change is needed.. I can reproduce with:\nFirefox 55, Windows 7\nQuill 1.3.2\n. Also happens with Quill 1.30.\nIn Quill 1.2.1 - 1.2.6 the characters aren't deleted but a bullet is created instead of adding the hyphen.\nQuill 1.2.0 works as expected.. you need to add a custom class attributor:\nhttps://codepen.io/anon/pen/PGRQrx\nhttps://stackoverflow.com/questions/44219124/creating-a-custom-class-attributer-in-quilljs/44225523#44225523. Related:\nhttps://github.com/quilljs/quill/issues/996\nhttps://github.com/quilljs/quill/issues/1280. Follow the live example:\nhttps://quilljs.com/playground/#class-vs-inline-style\nGuide\nhttps://quilljs.com/guides/how-to-customize-quill/#class-vs-inline. You asked the same question several days ago:\nhttps://github.com/quilljs/quill/issues/1754\nThis question has been answered in the past:\nhttps://github.com/quilljs/quill/issues/128#issuecomment-215263950. This question has been answered before:\nhttps://github.com/quilljs/quill/issues/128#issuecomment-215263950. You can add key bindings:\nhttps://quilljs.com/docs/modules/keyboard/. You can try to extend the clipboard module or hide elements only after they are added to the editor.. You can try to extend the clipboard module or hide elements only after they are added to the editor.. Is this related or duplicate of https://github.com/quilljs/quill/pull/1805 ?. Is this related or duplicate of https://github.com/quilljs/quill/pull/1805 ?. So maybe it'll be better to close this issue and focus the discussion on the PR.. I suggest you ask this question in StackOverflow with a simple code example. It's probably not specifically related to Angular so you might want to explain it in plain JavaScript.. If you think this is a bug in Quill, you should create a simple minimal example that reproduce it without using Angular.\nYou can fork this CodePen.\nYou probably just have a JavaScript scope issue.\nTry to change:\njavascript\nthis.editor.getModule(\"toolbar\").addHandler(\"image\", imageHandler);\nTo:\njavascript\nthis.editor.getModule(\"toolbar\").addHandler(\"image\", this.imageHandler.bind(this));. \"@types/quill\": \"0.0.31\" might work for you.\nRecent versions require \"es2015\" instead of \"commonjs\".. \"@types/quill\": \"0.0.31\" might work for you.\nRecent versions require \"es2015\" instead of \"commonjs\".. What exactly do you want to change?. What exactly do you want to change?. What does it means?\nWhat doesn't work right now?. What does it means?\nWhat doesn't work right now?. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Seems like you found a solution.. Seems like you found a solution.. List step for reproduction is requested in the issue template.\nTry to use the CodePen.. List step for reproduction is requested in the issue template.\nTry to use the CodePen.. Your question is unclear, that's why I asked you to provide a live example and a better explanation.. Your question is unclear, that's why I asked you to provide a live example and a better explanation.. @b0g3r  you can listen to the text-change event and remove the old attribute.. @b0g3r  you can listen to the text-change event and remove the old attribute.. quill.setContents([{ insert: '\\n' }]);. quill.setContents([{ insert: '\\n' }]);. Can you fork the CodePen and show example of what you are trying to do?. Can you fork the CodePen and show example of what you are trying to do?. I can reproduce with Chrome on Windows 7.\nWorks fine in Firefox 57.. I can reproduce with Chrome on Windows 7.\nWorks fine in Firefox 57.. It's not clear what you are trying to do and how it is related to Quill.\nThe project issues are for bugs. For questions I suggest you use StackOverflow with [quill] tag.. It's not clear what you are trying to do and how it is related to Quill.\nThe project issues are for bugs. For questions I suggest you use StackOverflow with [quill] tag.. Probably related:\nhttps://github.com/quilljs/quill/pull/1805. Probably related:\nhttps://github.com/quilljs/quill/pull/1805. You are supposed to use Quill's Delta format with \njavascript\nvar delta = quill.getContents();\nquill.setContents(delta);\nIf you insist on using the insecure HTML output you can use inline styles instead of classes or post-process the HTML on your server.\n. You are supposed to use Quill's Delta format with \njavascript\nvar delta = quill.getContents();\nquill.setContents(delta);\nIf you insist on using the insecure HTML output you can use inline styles instead of classes or post-process the HTML on your server.\n. The code-block is annotated by an external library so you'll have to check there. You'll probably need to replace classes with inline styles manually inside the code block.\n. The code-block is annotated by an external library so you'll have to check there. You'll probably need to replace classes with inline styles manually inside the code block.\n. highlit.js is an external library. If you want it to support inline styles, you should ask there.\nThe quill module calls window.hljs.highlightAuto(text). It doesn't rely on <pre><code> tags.. highlit.js is an external library. If you want it to support inline styles, you should ask there.\nThe quill module calls window.hljs.highlightAuto(text). It doesn't rely on <pre><code> tags.. DmitrySkripkin, thanks. The above example seems to work. . DmitrySkripkin, thanks. The above example seems to work. . The placeholder is using the before before pseudo element when the editor has the ql-blank class:\ncsss\n.ql-editor.ql-blank::before {\n    content: attr(data-placeholder);\n}\nCheck in your code if the ql-blank class is removed when you start typing.\nTry to start from a clean page with Quill editor, verify that you can't reproduce the placeholder issue and start adding CSS and JS until you see it.. The placeholder is using the before before pseudo element when the editor has the ql-blank class:\ncsss\n.ql-editor.ql-blank::before {\n    content: attr(data-placeholder);\n}\nCheck in your code if the ql-blank class is removed when you start typing.\nTry to start from a clean page with Quill editor, verify that you can't reproduce the placeholder issue and start adding CSS and JS until you see it.. Selection API. Selection API. It's unclear what you are trying to do, what you mean by range and how it is related to an image.\nPlease use StackOverflow for general questions.. It's unclear what you are trying to do, what you mean by range and how it is related to an image.\nPlease use StackOverflow for general questions.. I can't reproduce here.\nCSS in your website is probably affecting the editor style.\nTry to compare the applied styles in the demo and on your website.. I can't reproduce here.\nCSS in your website is probably affecting the editor style.\nTry to compare the applied styles in the demo and on your website.. Why are you changing the font-size and line-height if it breaks the display?\nPlease follow the issue template, fork the CodePen and show the problem.. Why are you changing the font-size and line-height if it breaks the display?\nPlease follow the issue template, fork the CodePen and show the problem.. I can't reproduce in your codepen.\nAnyway, if you change the default Quill styles, it's your job to ensure it doesn't break.. I can't reproduce in your codepen.\nAnyway, if you change the default Quill styles, it's your job to ensure it doesn't break.. The project issues are for bugs, please use StackOverflow for questions.\nThe link tooltip in the snow theme is probably a good place to start.. The project issues are for bugs, please use StackOverflow for questions.\nThe link tooltip in the snow theme is probably a good place to start.. Previous discussion:\nhttps://github.com/quilljs/quill/issues/488\nhttps://github.com/quilljs/quill/issues/688. Previous discussion:\nhttps://github.com/quilljs/quill/issues/488\nhttps://github.com/quilljs/quill/issues/688. You can use the snow theme without the toolbar and create a custom button that will trigger the link tooltip.\nIf you want to change the style of the snow theme, just override it.. You can use the snow theme without the toolbar and create a custom button that will trigger the link tooltip.\nIf you want to change the style of the snow theme, just override it.. https://quilljs.com/playground/#form-submit. https://quilljs.com/playground/#form-submit. In this example the tooltip appears on the bottom.\nYou keep ignoring the issue template which specifically requests you to provide further info. Closing.. In this example the tooltip appears on the bottom.\nYou keep ignoring the issue template which specifically requests you to provide further info. Closing.. Closing as duplicate. Please add more info to https://github.com/quilljs/quill/issues/1248 if needed.. Closing as duplicate. Please add more info to https://github.com/quilljs/quill/issues/1248 if needed.. Custom button example.\nBuild:\nhttp://quilljs.com/guides/adding-quill-to-your-build-pipeline/\nhttps://github.com/quilljs/webpack-example\nDevelopment:\nhttps://github.com/quilljs/quill/blob/develop/.github/DEVELOPMENT.md. Custom button example.\nBuild:\nhttp://quilljs.com/guides/adding-quill-to-your-build-pipeline/\nhttps://github.com/quilljs/webpack-example\nDevelopment:\nhttps://github.com/quilljs/quill/blob/develop/.github/DEVELOPMENT.md. You'll have to extend the clipboard module for this:\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L97. You'll have to extend the clipboard module for this:\nhttps://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L97. There is a webpack example.. There is a webpack example.. API:\nhttps://quilljs.com/docs/api/#getselection\nhttps://quilljs.com/docs/api/#inserttext. API:\nhttps://quilljs.com/docs/api/#getselection\nhttps://quilljs.com/docs/api/#inserttext. buttonEl.dataset.info\nhttps://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes. buttonEl.dataset.info\nhttps://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes. Looks like you've found a solution. Closing.. Looks like you've found a solution. Closing.. Please follow the issue template and include all the requested info.\nAlso, fork the CodePen show what you tried to do and what doesn't work.. Please follow the issue template and include all the requested info.\nAlso, fork the CodePen show what you tried to do and what doesn't work.. Duplicate:\nhttps://stackoverflow.com/questions/47811541/custom-inline-blot-with-span-and-classname-not-working/47820727#47820727. Duplicate:\nhttps://stackoverflow.com/questions/47811541/custom-inline-blot-with-span-and-classname-not-working/47820727#47820727. Previous discussion: https://github.com/quilljs/quill/issues/74. Previous discussion: https://github.com/quilljs/quill/issues/74. https://github.com/quilljs/quill/issues/74#issuecomment-230180168\nMarkdown related modules might help:\nhttps://github.com/quilljs/awesome-quill. https://github.com/quilljs/quill/issues/74#issuecomment-230180168\nMarkdown related modules might help:\nhttps://github.com/quilljs/awesome-quill. Did you try to set keyboardDisplayRequiresUserAction in UIWebView to NO as explained here?. Related:\nhttps://bugs.webkit.org/show_bug.cgi?id=142757. You should fill all the info requested in the issue template.\nAnyway, this is not a Quill bug. If you combine two tools you need to figure out how to make them work together.. In your example, you didn't include Quill's CSS.\nI can't reproduce on the original codepen.. With the core or theme CSS it works fine:\nhttps://codepen.io/anon/pen/OzNmBO. Please include all the info requested in the issue template.\nFork the codepen with the minimum code required to reproduce the issue.. You can add your check before creating the editor in your code:\njavascript\n// verify that we are running in a browser:\nif(typeof window === 'undefined') {\n  return;\n} else {\n  var quill = new Quill('#editor-container', {\n    modules: {\n      toolbar: [\n        [{ header: [1, 2, false] }],\n        ['bold', 'italic', 'underline'],\n        ['image', 'code-block']\n      ]\n    },\n    placeholder: 'Compose an epic...',\n    theme: 'snow'  // or 'bubble'\n  });\n}. You can add your check before creating the editor in your code:\njavascript\n// verify that we are running in a browser:\nif(typeof window === 'undefined') {\n  return;\n} else {\n  var quill = new Quill('#editor-container', {\n    modules: {\n      toolbar: [\n        [{ header: [1, 2, false] }],\n        ['bold', 'italic', 'underline'],\n        ['image', 'code-block']\n      ]\n    },\n    placeholder: 'Compose an epic...',\n    theme: 'snow'  // or 'bubble'\n  });\n}. You can remove the placeholder on focus:\ncss\n.ql-editor.ql-blank:focus::before {\n  content: '';\n}\nhttps://codepen.io/anon/pen/aEBmEp. You can remove the placeholder on focus:\ncss\n.ql-editor.ql-blank:focus::before {\n  content: '';\n}\nhttps://codepen.io/anon/pen/aEBmEp. Please include all the info requested in the issue template with a reproducible test case.. Please include all the info requested in the issue template with a reproducible test case.. This is not source code, it's just HTML.\nThis is how you set the initial content when creating the editor:\nhttps://codepen.io/anon/pen/aEBaym\nhtml\n<div id=\"editor-container\">\n  <p>safafdafdaf</p>\n</div>. This is not source code, it's just HTML.\nThis is how you set the initial content when creating the editor:\nhttps://codepen.io/anon/pen/aEBaym\nhtml\n<div id=\"editor-container\">\n  <p>safafdafdaf</p>\n</div>. Please include all the info requested in the issue template.\nTry to reproduce it on the CodePen.. Please include all the info requested in the issue template.\nTry to reproduce it on the CodePen.. It was closed because this doesn't look like a bug in Quill but with the way you integrate it with a third party tool.\nIf you think that there is a bug in Quill, fork the CodePen with the minimal code required to reproduce the issue and explain how to reproduce it.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#bug-reports. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#bug-reports. I can't reproduce in Chrome and Firefox.\nReopen if you can reproduce in the codepen or quilljs.com and add all the info requested in the info template.. We are not going to debug your code and check your website.\nPlease include all the info requested in the issue template.\nPlease fork the codepen with minimal example and explain how to reproduce.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#bug-reports. I can't reproduce in this codepen.. https://quilljs.com/docs/api/#setselection. Duplicate of https://github.com/quilljs/quill/issues/993. @DmitrySkripkin thanks for the help.. https://quilljs.com/docs/api/#text-change\n\nChanges to text may cause changes to the selection (ex. typing advances the cursor), however during the text-change handler, the selection is not yet updated, and native browser behavior may place it in an inconsistent state. Use selection-change or editor-change for reliable selection updates.. Why not use a separate editor per topic and show only the active editor?\n\nShare a minimal CodePen of what you are trying to do and what doesn't work without depending on external libraries like VueJS.. Great.. Did you report it to the browser vendors?. A browser crash is always a problem with the browser. A web page shouldn't be able to crash a browser.\nWhat do you mean by 'browser crash'? What exactly happens?. This comment explains the ql-cursor element.\nWhat is the real issue here?. Quill works with Delta and not with raw HTML. If you decide to use HTML despite the its drawbacks just filter this element.\nThis isn't a bug.. Please include all the info requested in the issue template and edit the title to have only relevant info.. Why do you need to set contenteditable?\nWhat's the use case?. https://quilljs.com/docs/api/#formattext. Please ask general questions on StackOverflow. Github issues are for bugs.\nCheck events, updateContents and formatting.\n. Please include all the info requested in the issue template.\nDid you check latest release?\nRelated:\nhttps://github.com/quilljs/quill/commit/a30b2e1aa011075150514737922cc8935104bb72. @volser thanks.. @volser thank you for answering the question.. Did you try to use API events or a keyboard binding to prevent unwanted indentation?. Maybe you can revert unwanted indentation with a new delta. Logic will probably not be simple.\njavascript\nquill.on(Quill.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n  if (eventName == Quill.events.TEXT_CHANGE && source == 'user') {\n    let myDelta = new Delta();\n    // revert indentation here\n    this.quill.updateContents(myDelta, Quill.sources.SILENT);\n  }\n});. GitHub issues are for bugs.\nQuestions should be asked on StackOverflow.\nYour question isn't clear.\nPlease reduce your question to the possible minimum with a reproducible example.\nAngular code and logic specific to your app just adds noise.\n. Related and possible duplicate:\nhttps://github.com/quilljs/quill/issues/954\nhttps://github.com/quilljs/quill/issues/1978\nhttps://github.com/quilljs/quill/issues/1228. OK, so the issue is that highlight.js classes aren't removed when removing the code block.\nClicking the code button and than the clear-format button does clear the highlight.js classes.\nClicking the clear-format button twice also removes the code block and highlight.js classes.. I don't think so, probably a bug.. Please fill all the info requested in the issue template.\nDid you check the bounds option?. Closing the issue because you refuse to add the requested info.. The issue template tells you exactly what info is required.. Your question isn't clear.\nPlease feel all the information required in the issue template.. It's still not clear what you are asking.\nGitHub issues are for bugs.\nPlease ask questions on StackOverflow.. Consider submitting to awsome-quill:\nhttps://github.com/quilljs/awesome-quill/blob/master/CONTRIBUTING.md. Yes, that's correct.. Example how to override the default icons with font awesome icons:\nhttps://github.com/quilljs/quill/issues/1099#issuecomment-258560326. Read here how to modify the placeholder:\nhttps://github.com/quilljs/quill/issues/1443. Fork the CodePen and show what you tried to do.. https://codepen.io/anon/pen/YaXNyE. Can you reproduce in Quill demo or PlayGround?. Could be already fixed in Quill 1.3.6\nhttps://github.com/quilljs/quill/issues/2009. The first example on the Quill website does that.. See this CodePen for a demo.. Please follow https://github.com/quilljs/quill/issues/1089. You can do it with Javascript/CSS.. You could try to ask at the vue-quill-editor project.\nMaybe you can add a prop on your component container that toggles a class like 'hide-toolbar' and add a style:\ncss\n.hide-toolbar .ql-toolbar {\n  display: none;\n}. Probably out of scope.\nPDF is complex. You can't translate it to a Quill Delta.\nYou can try to catch dropped plaintext files, read them and paste to the editor.. You'll might get more help if you fork the playground example and show a simple example of what you are trying to do and what doesn't work.. That's more of a question for StackOverflow or a job for a custom module.\nClosing because it's not a bug.. Same question:\nhttps://github.com/quilljs/quill/issues/2055\nhttps://github.com/quilljs/quill/issues/2059\nhttps://github.com/KillerCodeMonkey/ng-quill/issues/150\nhttps://stackoverflow.com/questions/49753912/unable-to-embed-src-to-iframe-programatically. Please fork the CodePen and provide a simple example with plain JavaScript. Don't use external libraries.. Please fork the CodePen and provide a simple example with plain JavaScript. Don't use external libraries.. You can define CSS stylesheet with media=\"print\".\nThis is a general CSS question. You'll might get better answers by searching StackOverflow.. You can define CSS stylesheet with media=\"print\".\nThis is a general CSS question. You'll might get better answers by searching StackOverflow.. Quill doesn't have hideToolbarOnBlur config.\nPlease provide steps to reproduce as requested in the issue template.. Quill doesn't have hideToolbarOnBlur config.\nPlease provide steps to reproduce as requested in the issue template.. You need to specify the toolbar as HTML:\nhttps://quilljs.com/playground/#snow-toolbar-tooltips. You should use the code in dist or follow the build instructions.. It's unclear what you are trying to do.\nPlease fork the CodePen and explain what doesn't work.. Just call el.focus() on your input element.. Seems to be outside of quill.\nhttps://github.com/KillerCodeMonkey/ng-quill/issues/157. The report is unclear.\nPlease include all the info requested in the issue template including steps for reproduction and browser version.. The report is unclear.\nPlease include all the info requested in the issue template including steps for reproduction and browser version.. Can you reproduce it here?\nhttps://quilljs.com/\nhttps://quilljs.com/playground/. Can you reproduce it here?\nhttps://quilljs.com/\nhttps://quilljs.com/playground/. You'll need to add a custom button with a picker similar to the background-color button.\nThere is a third-party module that might help:\nhttps://github.com/contentco/quill-emoji. Quill have a whitelist of allowed style and classes.\nYou'll need to create custom attributors and override the clipboard module.. Quill works with a div and not a textarea.\nThere is a Form Submit example.\n. Answer here:\nhttps://github.com/quilljs/quill/issues/1139. Answer here:\nhttps://github.com/quilljs/quill/issues/1139. Quill uses hex but the browser converts it to rgb.\nYou can try it in the browser:\n```\n\nvar el = document.getElementById('el');\nel.style.color = '#F4F4F4';\nconsole.log(el.style['color']);\n```\nYou can convert rgb to hex like the color format.. Please include all the info requested in the issue template.\nYou can find examples for using custom fonts and submitting a form.. I can't reproduce with this CodePen\nTested with Firefox 61 and Chrome 68.\nPlease update the CodePen and show how to reproduce it.. Please include all the info requested in the issue template.. Override the Link format. Something like:\nhttps://stackoverflow.com/questions/40956020/how-can-i-prefill-links-with-http-in-a-quill-editor/40957937#40957937. Please read the Delta Converters section in the Quill 2.0 blog post \nQuill 2 is still in development.. Please read the Delta Converters section in the Quill 2.0 blog post \nQuill 2 is still in development.. Please fork the CodePen and show what you are trying to do and what doesn't work.. How is this related to Quill?\nPlease include all the info requested in the issue template.. Button tooltip demo.\nhttps://github.com/quilljs/quill/issues/650#issuecomment-248539075. Button tooltip demo.\nhttps://github.com/quilljs/quill/issues/650#issuecomment-248539075. Please include all the info requested in the issue template.\nFork the CodePen with an example of what you are trying to do and what doesn't work.. List is a block level format. That's why it's applied to the newline \\n.. Github issues are for bugs and development. Please use StackOverflow for questions.\n. Starting point:\nhttps://github.com/quilljs/quill/pull/1049. Starting point:\nhttps://github.com/quilljs/quill/pull/1049. Direct access to the HTML isn't supported. Use the functions in the API.. Quill works with Delta. You can find the list of supported browsers in the README.. Please include all the info requested in the issue template.\nFork the playground and show what you are trying to do and what doesn't work.. You need to use getContents and setContents.\nYou can read about Delta.. You can also read the Delta Converters section in the blog about Quill 2.0 plans.. Quill works with a div element and not with textarea.\nPlease check examples in the playground:\nhttps://quilljs.com/playground/. lit-element from Polymer.\nThere is an old discussion about integrating Polymer and Quill. Not sure if it's still relevant:\nhttps://github.com/quilljs/quill/issues/904. IE11 is not supported.\nPlease supported browsers in the README.. Quill strips classes it doesn't know.\nPlease read:\nhttps://github.com/quilljs/quill/issues/1606#issuecomment-317503105. You need to create a class attributor:\njavascript\nlet TokenClass = new Parchment.Attributor.Class('token', 'token', {\n  scope: Parchment.Scope.INLINE\n});\nQuill.register(TokenClass, true);\nDemo:\nhttps://codepen.io/anon/pen/ajXbbR. When you click on the link you get a popup that let you visit, edit or remove the link.. Just mentioned that you do have a way to edit the link by clicking it.\nIf clicking the button should remove the hyperlink or show the popup is probably a matter of taste.\n. This is close but you need to get the preview from the href of the link:\nhttps://codepen.io/anon/pen/rrPMEL. Gmail editor works exactly the same. Closing.. Removing the color is the expected behavior and this is how other editors work.\nYou can override the colors in the toolbar and add the clean button to work as you want:\nhttps://codepen.io/anon/pen/jpgGQv. I was referring to the email editor in Gmail.\nYou can create a custom color picker with 'No Color' option.. Please fork the CodePen and show what you are trying to do.. The setContents example in the docs is just using JSON:\njs\nquill.setContents([\n  { insert: 'Hello ' },\n  { insert: 'World!', attributes: { bold: true } },\n  { insert: '\\n' }\n]);. If you need it as array:\njavascript\nquill.getContents().ops;\nIf you need it as string:\njavascript\nJSON.stringify(quill.getContents());\n. Github issues are for bugs not for support questions.\nNext time please provide all the information requested in the issue template.\nI suggest you fork the CodePen with a minimal example that reproduce your problem and post your question on StackOverflow.. Please fill all the info requested in the issue template.\nWhere do you run the test? In a browser or node.js?\nThis issue is old but it might help with running quilljs in node.js\nhttps://github.com/quilljs/quill/issues/993#issuecomment-249387907\nYou probably need a polyfill. Just search for jest+MutationObserver to solve your issue.. As Joeao explained, Quill can't use a textarea.\nThe Form Submit example might help you.. The editor has 'word-wrap: break-word'. Your line has no spaces so it can't break it. The bullet has 'display: inline-block' on the li::before pseudo element so it can break between the bullet and the text.\nYou can use 'display:inline' on the bullet to prevent wrap but I wonder if this is an issue in the real world. Why do you expect such a long 'word'?\nhtml\n<ul> (word-wrap: break-word)\n  <li>\n    ::before (display:inline-block)\n    hellowrold...\n  </li>\n</ul>. Edge throws the error when you try to set anchor.href = url because \"http://localhost/api/download/<%ID>\" is not a valid URL.\nI suggest you post-process the delta and add your custom syntax.. Can we close this if it's a duplicate of https://github.com/quilljs/quill/issues/1237?. What does this PR do?\nIt has nothing to do with the issue you linked to.\nYou added a new v1.css file without any explanation and use.. I can't reproduce the error.\nPlease include all the info requested in the issue template. Quill version, Browser, exact steps to reproduce...\nThe codepen snippet is using version 1.1.6 try to update to 1.3.6.\n. Please fork the [CodePen](https://codepen.io/quill/pen/KzZqZx) and show the error with Quill 1.3.6.. It's unclear what your issue is. Keep reports short. The background story doesn't help. Don't include images of code. Github has syntax highlighting for this.\nPlease fill all the info requested in the issue template.\nFork the [CodePen](https://codepen.io/quill/pen/KzZqZx) with a minimal example showing what you are trying to do and steps to reproduce the issue.. Github issues are for bugs.\nPlease post your question on [StackOverflow](https://stackoverflow.com/).. Create localized strings for each lang:css\n.fr.ql-snow .ql-tooltip[data-mode=\"link\"]::before {\n    content: \"Entrer le lien:\";\n}\n```\nAdd CSS class in javascript when you want to change the lang:\nquill.container.classList.add('fr');\nhttps://codepen.io/anon/pen/KGzdxB. It's easy to replay changes in Quill. You can listen to the text-change event, save a list of deltas (changes) and later replay them by applying the delta with updateContents.\n. No, it only include changes to the editor contents.. Example of how to define custom fonts and set the default font:\nhttps://quilljs.com/playground/#custom-fonts. You need to shim missing stuff on node.js:\nhttps://github.com/quilljs/quill/issues/993#issuecomment-249387907. See this answer:\nhttps://github.com/quilljs/quill/issues/128#issuecomment-215263950. You'll need to create a custom UI for this.. IE 11 isn't supported:\nhttps://github.com/quilljs/quill/blob/develop/README.md. Thanks for the answer ryanmitchell.. The bold button click handler in this example always format to bold:\njavascript\n$('#bold-button').click(function() {\n  quill.format('bold', true);\n});\nThe cloning medium guide is just an example. If you want a full working solution use Quill with the snow or bubble theme.. Please fork the CodePen with a minimal example showing what you are trying to do.. https://codepen.io/quill/pen/KzZqZx. Please use StackOverflow for questions and project issues for bugs.\nThanks.. Please provide all the info requested in the issue template.. The theme comes with a stylesheet. You can override it or create your own theme.. The placeholder should normally be few words long.\nYou can give the editor min-height:\ncss\n.ql-editor {\n  min-height: 200px;\n}. Please ask questions on StackOverflow.\nThanks for the answer DmitrySkripkin.. IE 11 is not on the list of supported browsers:\nhttps://github.com/quilljs/quill/blob/master/README.md. Impossible to help without a minimal example.\nPlease ask on StackOverflow.. You can extend the bubble tooltip and bubble theme with your custom logic.\nhttps://github.com/quilljs/quill/blob/develop/themes/bubble.js. IE 11 is not on the list of supported browsers:\nhttps://github.com/quilljs/quill/blob/master/README.md. If it's fixed on dev, it's probably better to change it locally in a custom build or extend/replace the keyboard module:\nhttps://quilljs.com/docs/modules/\nhttps://quilljs.com/guides/how-to-customize-quill/#modules. Quill supports a limited list of elements, classes and style attributes.\nYou can add custom attributors and extend the clipboard module.. You should use the Delta format instead of raw HTML.\nIf you do use raw HTML although it's unsafe, sure you need to define the same classes as Quill or use style attributors instead of class attributors:\nhttps://quilljs.com/guides/how-to-customize-quill/#class-vs-inline. Thanks DmitrySkripkin.. Thanks SebastienCruz.. The class attributors are hardcoded in the clipboard module. You'll need to extend the module and add your custom attributor.. Work on tables is already in the develop branch.\nYou can check if previous attempts to add table to the 1.x branch match your requirements but duplicating the effort is probably a waste.\nhttps://github.com/quilljs/quill/issues/117. Quill supports ordered and unordered lists.\nhttps://quilljs.com/standalone/full/. Follow the example:\nhttps://github.com/quilljs/webpack-example. You didn't explain the reason you need this.\nAnyway, this is out of scope of Quill.. The history module has userOnly option to ignore events that are not generated by the user:\nhttps://github.com/quilljs/quill/blob/develop/modules/history.js#L15\nYou can extend the history module and add your custom logic there:\njavascript\nif (!this.options.userOnly || source === Quill.sources.USER) {\n   if( // check if you want to ignore this specific delta) {\n    this.transform(delta);\n   } else {\n     this.record(delta, oldDelta);\n   }\n} else {\n   this.transform(delta);\n}. Duplicate:\nhttps://github.com/quilljs/quill/issues/1751#issuecomment-338581862\nhttps://github.com/quilljs/quill/issues/1752. You probably want to ask here:\nhttps://github.com/mathquill/mathquill. Please ask this question on StackOverflow and tag with quill.\nI suggest you'll fork the CodePen, show how you are trying to integrate mathquill and what doesn't work.\nThis project might help you. I didn't test it.\nhttps://github.com/c-w/mathquill4quill. The link format has a whitelist of safe formats:\nhttps://github.com/quilljs/quill/blob/develop/formats/link.js#L30\nYou can extend the format but 'file://' is unsafe.. https://quilljs.com/guides/how-to-customize-quill/#customizing-attributors. Questions about custom classes were asked many times.\nYou need to create custom class attributor and maybe extend the clipboard module.\nPlease ask questions on StackOverflow.. You need to add all sizes to the format whitelist:\nhttps://github.com/quilljs/quill/blob/develop/formats/size.js#L9\nSimilar example:\nhttps://quilljs.com/guides/how-to-customize-quill/#customizing-attributors. What do you mean by leak?\nAnyway, Quill.sources are just strings. You can use 'user' instead and it will work fine.. Please ask questions on StackOverflow.\nYou can extend the tooltip and the theme.\nThe SnowTooltip extends the BaseTooltip:\nhttps://github.com/quilljs/quill/blob/develop/themes/snow.js#L15\nThe snow theme creates the tooltip here:\nhttps://github.com/quilljs/quill/blob/develop/themes/snow.js#L95\nNote that the same tooltip is used for links, images, videos and formula.. The picker is imported inside the theme.\nYou can try to create a custom theme and define your own picker.. Did you try to use cutoff?. Extend the Blots:\nhttps://quilljs.com/guides/how-to-customize-quill/#extending-blots\nhttps://github.com/quilljs/quill/blob/develop/formats/align.js#L9. This is a general CSS question and not specific to Quill.\nPlease ask questions on StackOverflow.\nYou can try this:\nhttps://jsfiddle.net/pykm29bo/3/\n```css\neditor-container1 {\nwidth: 200px;\n  height: 200px;\n  border: 1px solid red;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n}\neditor1 {\noverflow-y: hidden;\n}\n```. Can you reproduce here?\nhttps://quilljs.com/\nCan you fork the CodePen and reproduce?. Thanks for the answer DmitrySkripkin.. I can't reproduce.\nThe Link format sets target=\"_blank\" on the a element so it should open in a new tab.\nhtml\n<a href=\"www.google.com\" target=\"_blank\">google</a>. quill-image-resize-module is third part module. Please ask in there.. The Link format set the value to the element href after sensitization.\nYou can enter \"#abc123\" or extend the Link format with your custom logic.. setContents shouldn't have retain ops, only insert ops.\nContents should end with a newline { insert: '\\n' }. I don't understand your question.\nMaybe you need updateContents instead of setContents.\nYou can read about setContents and Delta in the docs.\nIf you have more questions please use StackOverflow. Github issues is for bugs.\n. Please ask questions on StackOverflow.\nIt's not clear what you are trying to do and you didn't fill the issue template.. Example:\nhttps://quilljs.com/playground/#custom-fonts. You can add keyboard handler and use insertText to insert a space.\nPlease use StackOverflow for questions.. Please fill all information requested in the issue template.. StackOverflow is the right place for questions.. Use this.quill inside your handler.\njavascript\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: {\n      handlers: {\n        'link': function(value) {\n          // this.quill\n        }\n      }\n     }\n  }\n});\nhttps://quilljs.com/docs/modules/toolbar/#handlers\n\nHandler functions will be bound to the toolbar (so using this will refer to the toolbar instance) . The dev release of tables doesn't support multiple lines per cell:\nDoes not allow multiple lines per cell or block level embeds (video) in cells\n\nEven if it did, you should probably add {retain: X} op before your insert op.. You generally shouldn't rely on the order of HTML attributes like you shouldn't rely on key order in a Javascript object.\nWhen working with Quill you should use the Delta format.. You can put the html inside the element you use as a container like shown here:\nhttps://quilljs.com/playground/#autosave\nQuill had dangerouslypastehtml but it's deprecated because it's insecure.\nYou can also use a library to convert to-from html.\n. 'have' twice\n. not sure about this change\n. 'And since' implies that the last Operation is always a retain but it's not true. Not sure about the other change either. 'for it simply instructs...'\n. 'every character' is better than 'all characters'?\n. ",
    "JustXtasy": "can you share the actual working project..? im having a hard time incorporating it in Asp MVC\n. ",
    "petrk94": "@jhchen \nHey, the demo is not working, any idea?. no, I just open the page, make a change in the text, wait few seconds and than click navigate away, come back, nothing got saved.\nI would appreciate a really working tutorial how the save function work.\nThe HTML/CSS/JS code I have put in a html file and uploaded on my server, after reloading the page, nothing got saved and I dont get any error :/ . ok, can you give me a link to a tutorial page how to learn to use the save function?\nI suppose the example on codepen let people think that the example doesnt work, due its a \"demo\", I dont see that the demonstration work.. ",
    "dimes": "You shouldn't accept raw HTML from a client. This implementation is vulnerable to a XSS attack. . ",
    "adregan": "Yep. That does it. Thanks\n. ",
    "zD12": "You should view issue #122. They plan on adding 'drag-n-drop' features to Quill, but it was posted a while back on May 25, 2014.\n. You should view issue #122.  They plan on adding 'drag-n-drop' features to Quill, but it was posted a while back on May 25, 2014.\n. ",
    "gertsonderby": "IE has image resizing too - in fact you can't switch it off in IE11. But is this actually reflected in the data model? Otherwise the resizing seems fragile.\n. ",
    "borkdude": "+1\n. +1\n. ",
    "nickmealey": "+1\n. ",
    "cphyc": "Is their any plan on implementing it?\n. I found the W3C specification about that issue here.\n. ",
    "amarchen": "Expressing interest in this one as well :)\n. Expressing interest in this one as well :)\n. Well, if nobody is willing to work on this issue, it's unlikely to get done regardless of how good reasons there are :/\nStill, about \"keeping it simple\" as @matthiasg mentions. The approach of not insisting on any particular mechanism for resizing and \"do a plugin if you need\" is certainly understandable yet IMHO it's good to think about the final user task. I was bumping into this issue several times over the last year and honestly I can hardly figure a use case when it is useful to add an image without resizing it.\nPossibly an exact resizing mechanism should be beyond the scope of quill core, yet shouldn't quill core include an API for manipulating images (e.g. plugin dev could create a button that resizes image to a fixed icon-sized resolution) and shouldn't there be a reference resizing plugin (possibly an ugly one as that could be only a proof of concept to validate the API)?. Well, if nobody is willing to work on this issue, it's unlikely to get done regardless of how good reasons there are :/\nStill, about \"keeping it simple\" as @matthiasg mentions. The approach of not insisting on any particular mechanism for resizing and \"do a plugin if you need\" is certainly understandable yet IMHO it's good to think about the final user task. I was bumping into this issue several times over the last year and honestly I can hardly figure a use case when it is useful to add an image without resizing it.\nPossibly an exact resizing mechanism should be beyond the scope of quill core, yet shouldn't quill core include an API for manipulating images (e.g. plugin dev could create a button that resizes image to a fixed icon-sized resolution) and shouldn't there be a reference resizing plugin (possibly an ugly one as that could be only a proof of concept to validate the API)?. ",
    "Deelux": "Has anyone found a way to \"fix\" this? I would also really like to have a way to resize my images.\n. ",
    "Masum06": "How are issues are being marked 'closed' without any solution? Still no one has solved image resizing and drag and drop feature!. @schneidmaster Thanks for the code. The pasting code is working perfectly, but I couldn't make it work while typing. Could you please look into that?\nUpdate: Copy-paste in your code is working only for the first copy, the second time I try to copy something, the paste doesn't work.. ",
    "matthiasg": "@Masum06 the maintainers have decided to keep out of box Quill simple and stated that they are open to somebody writing a module for this specific feature. I think that is a reasonable approach considering the number of shared use cases Quill has. The core should definitely not get too complicated.\nThat said if there is anything inside of Quill that prevents a module from achieving something I am sure the maintainers would have an open ear.. @Masum06 the maintainers have decided to keep out of box Quill simple and stated that they are open to somebody writing a module for this specific feature. I think that is a reasonable approach considering the number of shared use cases Quill has. The core should definitely not get too complicated.\nThat said if there is anything inside of Quill that prevents a module from achieving something I am sure the maintainers would have an open ear.. @amarchen a reference plugin, maybe one in a different project or in an plugins area (maybe even officially supported) I would definitely like. I also would like to have such a plugin, but I respect the quilljs approach of trying to not overburden the core module with too many specific requirements.. @amarchen a reference plugin, maybe one in a different project or in an plugins area (maybe even officially supported) I would definitely like. I also would like to have such a plugin, but I respect the quilljs approach of trying to not overburden the core module with too many specific requirements.. @kensnyder I think @danielreed07 meant the ability to drag and drop an image to a different location. . @kensnyder the link to github on your resize module goes 404 ?. @kensnyder the link to github on your resize module goes 404 ?. thanks for the update. That means we are still stuck with two text editors in our environment :) But I would not have wanted quill to directly implement that anyway , just wanted to know whether rendering content in lines and then selectively hiding sections of those was something quill might be offering somehow.. Dragging right away will duplicate the image, selecting first (as described in step 4) will indeed cause this issue (Chrome Version 58.0.3029.110 (64-bit)). Dragging right away will duplicate the image, selecting first (as described in step 4) will indeed cause this issue (Chrome Version 58.0.3029.110 (64-bit)). ",
    "scottfr": "I have to say I disagree with the decision on closing this.\nI understand the goal of keeping Quill simple. However, it seems to me that the existing image import functionality (via the toolbar) is effectively broken if you can't resize the imported images (as it seems unlikely they will import at the exact size the user wants the vast majority of the time).\nIf the Quill toolbar is going to contain built-in support for image importing, I think there also needs to be some built-in mechanism to control the sizing of those imported images. . This seems like an important feature to improve Quill's image handling and a solid PR.\nAny reason this can't be pulled in?. I'm trying to solve this too.\n@danielschwartz, did using the 'a' tag work for you? In my test using tagName = 'a' doesn't result in the correct behavior and the styling is still extended.\n@think2011, do you have an example of the selection_change/text_change approach?. Is there a codepen example for custom fonts and sizes that uses the JavaScript Toolbar constructor (like the OP example is doing)?\nThe linke CodePen and the others I've found all use HTML markup to define the toolbar. It's not clear how to do custom fonts and sizes using the Javascript form of constructing the toolbar.. Thanks, I'll switch to using the HTML toolbar config.. Is the highlight.js approach compatible with quill styling? I want the user\nto be able to edit rich text and then have the syntax highlights applied\nover that.\nOn Thu, Jan 18, 2018 at 1:37 AM Jason Chen notifications@github.com wrote:\n\nThis approach is a bit concerning as Quill wants to treat code as plain\ntext and let libraries (such as highlight.js) handle the highlighting, so\nyour approach would be fighting against Quill's design. I would look into\nhighlightjs's plugin system instead.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1913#issuecomment-358590542, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACFsnDUV7BEtsVBAkskEvVk37z8whWCMks5tLxDQgaJpZM4RdZuy\n.\n. It appears the \"formatText\" call inserts an undo point (even though it is called with the \"silent\" source).\n\nThe result of this is you can get you in a situation where:\n1) Edit something that creates a new section that should be highlighted\n2) The highlighting routine gets called and formatText is called to highlight that new area\n3) That inserts an undo point\n4) You try to undo what you just edited, but because a new undo point is inserted by formatText you actually just undo the formatText call\n5) After undoing that highlighting, the highlighting routine triggers again and does the formatText call again (as that section should be highlighted)\n6) If you try to undo again, 4-5 just repeat\nThe result of this is you can't undo past the last formatText\n. Thank you for this advice.\nLooking at the History docs page you link to, it seems like the {userOnly:\ntrue} config setting is actually exactly what I am looking for. Is there\nanything to be cautious about in regards to it?\nOn Wed, Jan 24, 2018 at 1:25 AM, Jason Chen notifications@github.com\nwrote:\n\nOne point is \"silent\" does not mean history will ignore it, it just means\ntext-change events are not emitted. It is important for history to be aware\nof all changes in the editor -- otherwise it cannot maintain an accurate\nstack to perform undos and redos.\nIn your case the approach I would take is listen on the bracket close key\nand make your color change there. You can then in the handler either:\n\nConstruct a delta and use updateContents like\n   https://github.com/quilljs/quill/blob/043e32977f4b89fbf8254f2bbad8fd\n   d064c27f7c/modules/keyboard.js#L238-L246\n   https://github.com/quilljs/quill/blob/043e32977f4b89fbf8254f2bbad8fdd064c27f7c/modules/keyboard.js#L238-L246\nCall insertText(index, '}', ...) and then formatText separately and\n   use quill.history.cutoff\n   https://quilljs.com/docs/modules/history/#cutoff-experimental to\n   control undo points like https://github.com/quilljs/quill/blob/\n   043e32977f4b89fbf8254f2bbad8fdd064c27f7c/modules/keyboard.js#L196-L202\n   https://github.com/quilljs/quill/blob/043e32977f4b89fbf8254f2bbad8fdd064c27f7c/modules/keyboard.js#L196-L202\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1913#issuecomment-360070602, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACFsnEih7vyl4dYbKA4KMlcNBf5dAr9Yks5tNvcfgaJpZM4RdZuy\n.\n. \n",
    "ParadeTo": "Agree with @scottfr . ",
    "dmr07": "@kensnyder Demo looks great and works well. Do you have plans to implement image repositioning? . @kensnyder @matthiasg Right. It would be great if I could drag the image, and drop it in accordance to the new caret position. . @kensnyder This might be overkill, but rangy has a pretty good selection tool.  . @kensnyder This might be overkill, but rangy has a pretty good selection tool.  . +1 - @stevenwinslowwhite would be great to see this feature. It's like the only thing Quill is missing.. +1 - @stevenwinslowwhite would be great to see this feature. It's like the only thing Quill is missing.. ",
    "dennisdebel": "@kensnyder demo looks and feels amazing yes! I cant seem to import/register it in my quill, how to import this module? Does it need recompiling/packing? I copied your js files into my /node_modules/quill/modules/ to no avail. The quill doc is also not clear if you have to register or import first, i mean import is first on the list but in the Register section underneath Import it says you can use Import to retrieve the module after registering? I am confused.... @kensnyder thanks, good tip, ill look into it =) I'd vote for a more usable form =D. [edit]Best Approach is something like the adding a matcher to the clipboard module, watching for copypasted urls and converting them to images (new Delta().insert({image: url}); works) like the code found here: https://github.com/quilljs/quill/issues/109 by @schneidmaster\nCouldnt get it to works for images still tho...learning...\n[edit 2] this custom matcher converts urls to links and in case they link to image, converts the urls to inline images  (put it in quill.on('text-change', function(delta, oldDelta, source) {)\n```\nvar Delta = Quill.import('delta');\n//convert img links to actual images\nquill.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n    var regex = /https?:\\/\\/[^\\s]+/g;\n        if(typeof(node.data) !== 'string') return;\n            var matches = node.data.match(regex);\n        if(matches && matches.length > 0) {\n            var ops = [];\n            var str = node.data;\n\n            matches.forEach(function(match) {\n                 var split = str.split(match);\n                 if(match.match(/\\.(png|jpg|jpeg|gif)$/)!=null){\n                     var beforeLink = split.shift();                     \n                     ops.push({ insert: beforeLink });\n                     ops.push({ insert:{image: match}, attributes: { link: match } \n                  });\n\n                str = split.join(match);                    \n                } else { //if link is not an image\n                    var beforeLink = split.shift();\n                    ops.push({ insert: beforeLink });                        \n                    ops.push({ insert: match, attributes: { link: match } \n                }); \n                    str = split.join(match);\n                }                                                     \n});\n            ops.push({ insert: str });\n            delta.ops = ops;\n         }                   \nreturn delta;\n\n});\n```\n~~Obviously the wrong approach > I tried to implement this in the form of a custom module, but my JS skills suck. Behaviour im looking for is to replace all urls containing images to 'inline' images (like the etherpad image plugin). I made  (read: copypasta) an example that sorta works here: http://codepen.io/anon/pen/PpYjxG\nIn the example, type a bit and Copy/Paste an image url in the editor field and it will appear as inline image. Only after that the ability to edit/type stops, which must be something obvious, but as I said..major noob...~~. [edit]Best Approach is something like the adding a matcher to the clipboard module, watching for copypasted urls and converting them to images (new Delta().insert({image: url}); works) like the code found here: https://github.com/quilljs/quill/issues/109 by @schneidmaster\nCouldnt get it to works for images still tho...learning...\n[edit 2] this custom matcher converts urls to links and in case they link to image, converts the urls to inline images  (put it in quill.on('text-change', function(delta, oldDelta, source) {)\n```\nvar Delta = Quill.import('delta');\n//convert img links to actual images\nquill.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n    var regex = /https?:\\/\\/[^\\s]+/g;\n        if(typeof(node.data) !== 'string') return;\n            var matches = node.data.match(regex);\n        if(matches && matches.length > 0) {\n            var ops = [];\n            var str = node.data;\n\n            matches.forEach(function(match) {\n                 var split = str.split(match);\n                 if(match.match(/\\.(png|jpg|jpeg|gif)$/)!=null){\n                     var beforeLink = split.shift();                     \n                     ops.push({ insert: beforeLink });\n                     ops.push({ insert:{image: match}, attributes: { link: match } \n                  });\n\n                str = split.join(match);                    \n                } else { //if link is not an image\n                    var beforeLink = split.shift();\n                    ops.push({ insert: beforeLink });                        \n                    ops.push({ insert: match, attributes: { link: match } \n                }); \n                    str = split.join(match);\n                }                                                     \n});\n            ops.push({ insert: str });\n            delta.ops = ops;\n         }                   \nreturn delta;\n\n});\n```\n~~Obviously the wrong approach > I tried to implement this in the form of a custom module, but my JS skills suck. Behaviour im looking for is to replace all urls containing images to 'inline' images (like the etherpad image plugin). I made  (read: copypasta) an example that sorta works here: http://codepen.io/anon/pen/PpYjxG\nIn the example, type a bit and Copy/Paste an image url in the editor field and it will appear as inline image. Only after that the ability to edit/type stops, which must be something obvious, but as I said..major noob...~~. ",
    "gbenson-wikia": "@kensnyder For the image resizing plugin, if you'd be willing to either a) set up a public repo with commit access for me, or b) allow me to fork your demo code under a permissive license (MIT?), I've got an immediate need for a plugin like this and would be happy to throw a couple developer-days on fleshing it out.. @kensnyder For the image resizing plugin, if you'd be willing to either a) set up a public repo with commit access for me, or b) allow me to fork your demo code under a permissive license (MIT?), I've got an immediate need for a plugin like this and would be happy to throw a couple developer-days on fleshing it out.. @DarnellSh You'll probably want to take a look at https://github.com/Fandom-OSS/quill-blot-formatter , which was originally forked from Ken's project and is actively maintained.  It's licensed under the Apache 2.0 license.. I encountered this and did some troubleshooting, and I believe there's actually a bug in matchSpacing() that's causing this behavior.\nExample CSS to trigger the bug:\np + p { margin: 1rem 0; }\nExample html to trigger the bug:\n<p>a</p><p>b</p><p>c</p>\nWhen matchSpacing() sees the first <p> tag, it correctly notes that it has no margins on it.  However, when it checks node.nextElementSibling's positioning, it fails to take into account node.nextElementSibling's top margin.  This leads to a situation where the delta has a spare newline in-between a and b, but not anywhere else in the doc.  And, of course, if one does 'edit', 'save', 'edit', 'save', etc. they'll get a new blank line each time that only appears in the editor.\nAs a related aside, there's a potential for other CSS rules to inadvertently wreak havoc here, such as absolute positioning, floating, and line-heights.\nFor a workaround until this is better addressed in matchSpacing(), users can just add a CSS rule of .ql-clipboard p { margin: 0 !important; } (or similar for any other rule that one finds to trigger this condition).. ",
    "kensnyder": "@gbenson-wikia I've got the image drop/paste module on npm. I should have the resize module up this weekend. If it doesn't work exactly how you'd like, additional contribution is appreciated.. @gbenson-wikia Here is the resize module on npm. Contributions are welcome.. @matthiasg The link should be working now.. @StefanNeuser Aligning images left, center and right is currently working. See this demo and install from npm v3.0.0.. Yes, per the package.json, the license is MIT. I will add LICENSE.md files to the repo when I can.. @DarnellSh. Nothing stopping. Just so much on my plate. So if you add a PR,\nI'll merge it!\nOn Mon, Jul 16, 2018 at 3:36 PM, DarnellSh notifications@github.com wrote:\n\n@kensnyder https://github.com/kensnyder was there anything stopping\nadding the LICENSE.md file to the repo? I can add a PR if that would speed\nthings along. It's a great plugin and really would like to use it!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/104#issuecomment-405389522, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGPeH25ZpRhrKcOTjCWntP6QEOxFfmTks5uHQdQgaJpZM4B7Swn\n.\n. These plugins are now available on npm: quill-image-resize-module and quill-image-drop-module. Contributions are welcome.. Sounds good. Closing PR.. \n",
    "StefanNeuser": "@kensnyder thank you very much for these two packages, great work! Do you have any plans to get the positioning of the image within the editor working? . Hi all, what do you think about an modal/dialog to edit a table that becomes inserted as a embeded? If you click into the table within quilljs the dialog gehts open to make content and table/cell property changes? In this way we dont need to enforce quilljs to support table-editing within its canvas. And on the other hand the dialog-table-tool could be an opensource project of its own like https://limonte.github.io/sweetalert2/ with a api with events to pass data onOpen and sends/returns data back onClose.. Thank you very much for your reply. I was attempting to access port 9080 but without success.\nIt seems that the package.json port config is not available:\n```\n[WARN] No ENV file found\n[WARN] ENOENT: no such file or directory, open 'Procfile'\n[OKAY] package.json file found - trying 'npm start'\n[OKAY] Forward Proxy Started in Port NaN\n[OKAY] Intercepting ALL requests through forward proxy\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: listen EADDR\n```\nI'm trying to get a deep dive into quill because we will develop some modules like autocompletion/typeahead to generate links and a chart.js (canvas) BlotType. I like to do this in a  test driven way but first i need to get the dev env running on my machine. I have a OSX el captian running with ruby version of foreman version 0.84.0 and npm 3.5.3. \nnpm run test is running without any fails. All tests passes.\nI'm appreciate if somebody could help me to get in running.. ",
    "GinYang": "@kensnyder Thank you for this great plugin. But I find some compatible issue in your demo. Once pasted or switched fonts, text editor is scrolled to the top automatically. I think there may be some css conflicts. . ",
    "DJShump08": "@kensnyder does your module have a license so we may add to our project?. @kensnyder GREAT!!! It's an amazing project and as soon as that LICENSE.md file is added we can add it. Please keep me updated!. @kensnyder was there anything stopping adding the LICENSE.md file to the repo? I can add a PR if that would speed things along. It's a great plugin and really would like to use it!. @kensnyder totally understandable! Can you take a look please at the PR here? It's straight from the MIT Open Source website!. @jhchen I see I can change the font size by using this.editor.format('size', '16px');. But if I want to use '17px' instead of '16px', is there a workaround where I don't have to fontSizeStyle.whitelist? I want that size to be user defined.. @jhchen any news about fixing this?. @jhchen @manu-st any work around for this? I am running into the same issue. I need to call getFormat() and not set the selection.. @kandangit where did you find a css solution to change \"Enter Link\" text?. @jhchen or do you know a work around for this?. @benbro any ideas?. @benbro yes but when you click on the hyperlink icon with the hyperlink selected, it removes the hyperlink. That's the issue or is that intended to be that way?. @benbro @jhchen any idea about this? I'm lost. @tribis if you add pre-line , for some reason you can not hit the space bar more than once on your keyboard. The cursor doesn't move after the first space. @benbro @jhchen any idea on this? Am I trying to add the image in an incorrect way?. ",
    "anseljh": "Hello! Great project, thanks.\nI am also in the same boat, wanting to add new formats for things like headings. After looking through the docs and source, it seems the API doesn't currently support this, and we'd have to modify the underlying Quill code\u2014is that correct? Happy to help do this, but I wanted to make sure I understood the current code first.\n. ",
    "vivekdurai": "@piatra @anseljh I hacked in headings with a few minor changes - take a look at this. @jhchen I know you may have a few things to say about the way I did it so I'm not PRing this one, in the hope that you may release an official commit with header and ol/ul support soon! \n. @piatra @anseljh I hacked in headings with a few minor changes - take a look at this. @jhchen I know you may have a few things to say about the way I did it so I'm not PRing this one, in the hope that you may release an official commit with header and ol/ul support soon! \n. ",
    "rafales": "Any progress on this?\nThere should be an API for adding plugins/modules to the editor without the need to register them in Quill.Modules object (I want to create some project-specific plugins and the need to put them inside Quill.Modules isn't really modular).\nIt may be a good idea to create:\n- a \"core\" repo, where the whole editor lives + most important modules\n- module repos\n- \"distribution repo\" - core + some default modules, bundled together with browserify\n. Is it really necessary to track all editor instances inside Quill.editors array? It's only used for incrementing ids and causes a memory leak for every editor, even after all DOM nodes are removed.\n. The cause of the problem is that when you focus something the browser scrolls automatically to that element. Ran into that a while ago (in my case with some checkbox custom styling).\n. Wouldn't this decrease scrolling performance? It still could be implemented as a separate module.\n. ",
    "butsjoh": "+1\n. @jhchen We are looking at the quill codebase to understand it's relation with https://github.com/ottypes/rich-text. And it seems that the insertEmbed API is not ready yet to deal with what the rich-text library says.\nCurrent quill does this:\njavascript\n{\n \"ops\": [\n   {\n     insert: 1,\n     attributes: {\n        \"image\": \"http://i.imgur.com/G3SykRO.jpg\"\n     }\n  ]\n}\nWhile according to rich-text it should be:\njavascript\n{\n \"ops\": [\n   {\n     insert: 1,\n     attributes: {\n        \"src\": \"http://i.imgur.com/G3SykRO.jpg\"\n     }\n  ]\n}\nIt this planned to change in the future or not? I can do a pull request to support this but i don't know how deep it is rooted in the code. Care to explain this?\n. Indeed top + height also works :) I was to focussed on the job to see this.\n@thomsbg You can check here: https://gist.github.com/butsjoh/fbe4c824fef939f0911d but it is not written in coffeescript nor is it tested properly. You also have to be aware if you do it like i did (inherit from the normal toolbar) that you have to fix the link tooltip as well since it needs to hook in to the initialize of the toolbar but the name is different (popover-toolbar vs toolbar). I am struggling with the fact that modules are in the codebase and the dist also pulls in lodash but not all of it's methods. But that would hopefully be fix in the future when modules move out of the core.\n. @jhchen Offtopic, but how is the working on the format branch going? Tried to rebase develop on it but having a lot of issues :)\n. Not sure what make the build fail ...\nIt claims it fails on safari osx but i confirmed manually that it is working there. Maybe something todo with image loading and the testsuite not waiting long enough?\n. Found more related to the issue and applied a fix. It seems that in FF and IE it that if you create a range with both start and end offset being 0 from the leaf node then getBoundingClientRect on range does not return anything. This fix  assumes it is then the leaf positioning we need.\n. Will compose a new PR tomorrow\n. Done see https://github.com/quilljs/quill/pull/309\n. @jhchen Done :)\n. @jhchen Need any help on extracting the modules out of the main codebase? I think quill should be split up into a core (all the dom, selection, delta stuff) and then each module can be added manually through using the core. I am happy to help on that if you provide the general guidelines you want to take it. \n. Always willing to help as well. If you provide the rough interfaces for where you want to take it i am willing to implement it.\n. @chinshr The closest you can get to get it working somehow is to check this thread https://discuss.quilljs.com/t/ability-to-create-custom-embed-types/52/6\n. https://github.com/thomsbg/convert-rich-text/blob/master/README.md is also relevant\n. ",
    "MrShaneH": "Hi,\nWas this request was ever developed, either in the core code or as a custom module?\nThanks\n. ",
    "jhaddow": "The custom matcher works for pasting. What's the solution for typing a link?. ",
    "weavermedia": "@jhaddow Do you have a working example of a custom matcher for pasting? I'm struggling to get it working.\n@jhchen +1 for having this functionality in the core.. @jhaddow Do you have a working example of a custom matcher for pasting? I'm struggling to get it working.\n@jhchen +1 for having this functionality in the core.. Got a custom matcher working. Documenting it here in case it's helpful to anyone else:\nquill_editor.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n  var regex = /https?:\\/\\/[^\\s]+/g;\n  if (regex.exec(node.data) != null) {\n    delta.ops = [{ insert: node.data, attributes: { link: node.data }}];\n  }\n  return delta;\n});\nNote: this is a very minimal implementation (reduced down from the test case linked above) that just solves my use-case. I'm only dealing with single links pasted in and just returning the whole pasted value as a clickable link.\nBeware that it overwrites any other ops in delta. This may or may not work for you.. Got a custom matcher working. Documenting it here in case it's helpful to anyone else:\nquill_editor.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n  var regex = /https?:\\/\\/[^\\s]+/g;\n  if (regex.exec(node.data) != null) {\n    delta.ops = [{ insert: node.data, attributes: { link: node.data }}];\n  }\n  return delta;\n});\nNote: this is a very minimal implementation (reduced down from the test case linked above) that just solves my use-case. I'm only dealing with single links pasted in and just returning the whole pasted value as a clickable link.\nBeware that it overwrites any other ops in delta. This may or may not work for you.. +1 \ud83d\ude03  We're currently running into this issue. Is there anything blocking this merge?. +1 \ud83d\ude03  We're currently running into this issue. Is there anything blocking this merge?. Great, that works. Thanks.\nI understand, and agree, you don't want to use a magic string like 'self'. Passing the same selector is very reasonable though.. Great, that works. Thanks.\nI understand, and agree, you don't want to use a magic string like 'self'. Passing the same selector is very reasonable though.. The inserted video is an iframe tag and is given the CSS class of 'ql-video' so you can customize that class for your needs.. The inserted video is an iframe tag and is given the CSS class of 'ql-video' so you can customize that class for your needs.. ",
    "schneidmaster": "I'm not sure why this issue is closed -- you can use a matcher to autolink pasted URLs but that doesn't help with autolinking while the user is typing. If it helps anyone else, I wrote code to handle both cases.\nFor pasting, the matcher above got me on the right track but didn't work for pasting more than just an URL, e.g. this is https://www.google.com a string with an URL. I changed it to:\n```javascript\nquill.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n  var regex = /https?:\\/\\/[^\\s]+/g;\n  if(typeof(node.data) !== 'string') return;\n  var matches = node.data.match(regex);\nif(matches && matches.length > 0) {\n    var ops = [];\n    var str = node.data;\n    matches.forEach(function(match) {\n      var split = str.split(match);\n      var beforeLink = split.shift();\n      ops.push({ insert: beforeLink });\n      ops.push({ insert: match, attributes: { link: match } });\n      str = split.join(match);\n    });\n    ops.push({ insert: str });\n    delta.ops = ops;\n  }\nreturn delta;\n});\n```\nAnd for typing, I wrote this:\n```javascript\n// Autolink URLs when typing\nquill.on('text-change', function(delta, oldDelta, source) {\n  var regex = /https?:\\/\\/[^\\s]+$/;\n  if(delta.ops.length === 2 && delta.ops[0].retain && isWhitespace(delta.ops[1].insert)) {\n    var endRetain = delta.ops[0].retain;\n    var text = quill.getText().substr(0, endRetain);\n    var match = text.match(regex);\nif(match !== null) {\n  var url = match[0];\n\n  var ops = [];\n  if(endRetain > url.length) {\n    ops.push({ retain: endRetain - url.length });\n  }\n\n  ops = ops.concat([\n    { delete: url.length },\n    { insert: url, attributes: { link: url } }\n  ]);\n\n  quill.updateContents({\n    ops: ops\n  });\n}\n\n}\n});\n```\nI haven't tested super extensively but that seems to do the trick.. @Masum06 My code is working fine for me, both when typing a link and when pasting multiple times.\nI'd suggest making sure you're using a recent version of quill (I'm on 1.1.3) but I posted the code as a general favor to folks trying to solve this problem; I'm not going to debug your specific setup & use case.. Oh yeah, I imported isWhitespace from the is-whitespace npm package (e.g. import isWhitespace from 'is-whitespace' at the top of the file where you're configuring quill).. I've reproduced a similar problem. In my case, I am 1) using Webpack to bundle assets and 2) dynamically creating Quill's using jQuery on clicks. I don't really have time at the moment to dive into debugging but I suspect that something in those use cases causes document.body to be undefined when the defaults are set. In my case, I got around it just by manually setting the bounds option when creating the Quill instance.\n. ",
    "chuckh": "@schneidmaster thanks for sharing the code! I got it to work.  The Autolink URLs when typing did not work at first because isWhitespace function was not included.  I added the below isWhitespace function then it worked fine.  @Masum06 you might give this a try.\nfunction isWhitespace(ch) {\n  var whiteSpace = false\n  if ((ch == ' ') || (ch == '\\t') || (ch == '\\n')) {\n    whiteSpace = true;\n  }\n  return whiteSpace;\n},. @benbro thanks for quill polymer demo!!! \ud83d\udc4d   Everything worked fine except when I added link.\nWhen I try to add a link I get this error:\nVM1905 quill.js:9420 Uncaught TypeError: Cannot read property 'getBoundingClientRect' of null\n    at SnowTooltip.position (VM1905 quill.js:9420)\n    at SnowTooltip.edit (VM1905 quill.js:9872)\n    at Toolbar.link (VM1905 quill.js:10041)\n    at HTMLButtonElement.<anonymous> (VM1905 quill.js:8674)position @ VM1905 quill.js:9420edit @ VM1905 quill.js:9872link @ VM1905 quill.js:10041(anonymous) @ VM1905 quill.js:8674\nWhen I click on existing link I get this error:\nVM1905 quill.js:9420 Uncaught TypeError: Cannot read property 'getBoundingClientRect' of null\n    at SnowTooltip.position (VM1905 quill.js:9420)\n    at Emitter.<anonymous> (VM1905 quill.js:10102)\n    at Emitter.emit (VM1905 quill.js:4142)\n    at Emitter.emit (VM1905 quill.js:3972)\n    at Selection.update (VM1905 quill.js:5792)\nYou can try it here:\nhttps://plnkr.co/edit/Lpxoqo2YNgWXZE0TbMi1?p=preview\n. @benbro thank you. You inspired me to create polymer-quill element.   You can find it at https://github.com/chuckh/polymer-quill.  To install do a bower install --save polymer-quill. Demo and API docs are at: https://chuckh.github.io/polymer-quill/.\nI based it on @benbro Plunker at https://plnkr.co/edit/rlysj0CzZl9xq33nAySp?p=preview and @jhchen Codepen at http://codepen.io/quill/pen/RRYBEP. \nPTAL.\n. polymer-quill has just been updated to Quill 1.1.8.  Lots more demos, added Quill HTML render see at https://chuckh.github.io/polymer-quill/components/polymer-quill/#polymer-quill-html-render.\nLearn more at: https://beta.webcomponents.org/element/chuckh/polymer-quill.. I created a web component <polymer-quill-html-render> which renders Quill HTML.  I save both the HTML and deltas to my database when using Quill.  I use <polymer-quill-html-render> to render content read only.\nLearn more about Quill HTML render  at https://chuckh.github.io/polymer-quill/components/polymer-quill/#polymer-quill-html-render.\nLearn about the web component Quill Editor at : https://beta.webcomponents.org/element/chuckh/polymer-quill.\nQuill HTML Render screenshot\n\n. ",
    "Ihor912": "thank you @schneidmaster!\nGood job!. ",
    "ilvalerione": "Recognition works well, Is it possible to add target=\"_blank\" property during node creation?\n I tried adding target attribute here\n{ insert: url, attributes: { link: url , target: '_blank'} }\nbut it doesn't work.\nDo you know how to achive this?\nThanks\n. ",
    "kilgarenone": "Inspired by @schneidmaster, this is how i fixed it in the keyboard module instead for the converting link when typing functionality:\njavascript\nspaceToLink: {\n    collapsed: true,\n    key: ' ',\n    prefix: /https?:\\/\\/[^\\s]+/, // call handler only when matched this regex\n    handler: (() => {\n      let prevOffset = 0;\n      return function (range, context) {\n        let url;\n        const regex = /https?:\\/\\/[^\\s]+/g;\n        const text = this.quill.getText(prevOffset, range.index);\n        const match = text.match(regex);\n        if (match === null) {\n          prevOffset = range.index;\n          return true;\n        }\n        if (match.length > 1) {\n          url = match[match.length - 1];\n        } else {\n          url = match[0];\n        }\n        const ops = [];\n        ops.push({ retain: range.index - url.length });\n        ops.push({ delete: url.length });\n        ops.push({ insert: url, attributes: { link: url } });\n        this.quill.updateContents({ ops });\n        prevOffset = range.index;\n        return true;\n      }\n    })()\n  }. ",
    "shyamal890": "Can anybody please share a working plunker here... This should be an inbuilt feature with help of a library like autolinker.js. Can anyone please tell us what is the timeline for 2.0 prod version with tables?. Can anyone please tell us what is the timeline for 2.0 prod version with tables?. I frankly believe the tooltip component should be appended to the body instead. This would solve a lot of issues. This is how medium-editor works too.. I frankly believe the tooltip component should be appended to the body instead. This would solve a lot of issues. This is how medium-editor works too.. @jhchen Should have a look if the tooltip can be appended to the body instead. . @jhchen Should have a look if the tooltip can be appended to the body instead. . +1. +1\n. But why? Shouldn't they be included?\n. But why? Shouldn't they be included?\n. I already checked out the bounds option and it doesn't solve the issue. It just superficially addresses the issue. All information needed is already in the description.. I already checked out the bounds option and it doesn't solve the issue. It just superficially addresses the issue. All information needed is already in the description.. Just added version info, feel free to let me know exactly what is needed and I will add it. Instead of closing you could have pin-pointed the needed info. After all a issue/bug report helps both the contributor and the issue reporter.. Just added version info, feel free to let me know exactly what is needed and I will add it. Instead of closing you could have pin-pointed the needed info. After all a issue/bug report helps both the contributor and the issue reporter.. And would you please let me know which information is still left to be filled? As I think everything the issue template asks for is already available. . And would you please let me know which information is still left to be filled? As I think everything the issue template asks for is already available. . Its okay if pasted HTML is not editable but atleast there should be a way.. Its okay if pasted HTML is not editable but atleast there should be a way.. @benbro There should be a way to allow completely rawHtml and developer would take care of sanitisation. \nWith custom attributes also we cannot paste rawHTML as quill removes some elements like table and replaces it with p for example. ",
    "hsource": "For pasting, I also used @schneidmaster 's code. I cleaned it up to accept more than 1 URL pattern. Here it is!\nTypeScript\nfunction createUrlKeyboardHandler(urlRegexp: RegExp, quill: Quill) {\n  return (range: RangeStatic, context: { prefix: string }) => {\n    const prefixMatch = context.prefix.match(urlRegexp);\n    if (prefixMatch === null) return true;\n    const prefixLength = prefixMatch[0].length;\n    const prefixStart = range.index - prefixLength;\n    const url = quill.getText(prefixStart, prefixLength);\n    quill.formatText(prefixStart, prefixLength, { link: url }, 'user');\n    return true;\n  };\n}\n```TypeScript\n  // Put the below somewhere with access to Quill\n  const urlPatterns = [/https?:\\/\\/[^\\s]+/, /www.[^\\s]+/];\n// Typing space after a URL matching these formats will turn it into a link\n  for (const baseUrlPattern of urlPatterns) {\n    const urlPattern = new RegExp(${baseUrlPattern.source}$);\n    quillKeyboard.addBinding({\n      collapsed: true,\n      key: ' ',\n      prefix: urlPattern,\n      handler: createUrlKeyboardHandler(urlPattern, quill),\n    });\n  }\n// Pasting URLs adds a link\n  quill.clipboard.addMatcher(Node.TEXT_NODE, (node: Text, delta) => {\n    const combinedPattern = urlPatterns\n      .map(pattern => (${pattern.source}))\n      .join('|');\n    const combinedRegexp = new RegExp(combinedPattern, 'g');\nconst ops: DeltaOperation[] = [];\nconst str = node.data;\nlet lastMatchEndIndex = 0;\nlet match: RegExpExecArray | null = combinedRegexp.exec(str);\nwhile (match !== null) {\n  if (match.index > lastMatchEndIndex) {\n    ops.push({ insert: str.slice(lastMatchEndIndex, match.index) });\n  }\n  ops.push({ insert: match[0], attributes: { link: match[0] } });\n  lastMatchEndIndex = match.index + match[0].length;\n  match = combinedRegexp.exec(str);\n}\n\nif (lastMatchEndIndex < str.length) {\n  ops.push({ insert: str.slice(lastMatchEndIndex) });\n}\n\ndelta.ops = ops;\nreturn delta;\n\n});\n```. For pasting, I also used @schneidmaster 's code. I cleaned it up to accept more than 1 URL pattern. Here it is!\nTypeScript\nfunction createUrlKeyboardHandler(urlRegexp: RegExp, quill: Quill) {\n  return (range: RangeStatic, context: { prefix: string }) => {\n    const prefixMatch = context.prefix.match(urlRegexp);\n    if (prefixMatch === null) return true;\n    const prefixLength = prefixMatch[0].length;\n    const prefixStart = range.index - prefixLength;\n    const url = quill.getText(prefixStart, prefixLength);\n    quill.formatText(prefixStart, prefixLength, { link: url }, 'user');\n    return true;\n  };\n}\n```TypeScript\n  // Put the below somewhere with access to Quill\n  const urlPatterns = [/https?:\\/\\/[^\\s]+/, /www.[^\\s]+/];\n// Typing space after a URL matching these formats will turn it into a link\n  for (const baseUrlPattern of urlPatterns) {\n    const urlPattern = new RegExp(${baseUrlPattern.source}$);\n    quillKeyboard.addBinding({\n      collapsed: true,\n      key: ' ',\n      prefix: urlPattern,\n      handler: createUrlKeyboardHandler(urlPattern, quill),\n    });\n  }\n// Pasting URLs adds a link\n  quill.clipboard.addMatcher(Node.TEXT_NODE, (node: Text, delta) => {\n    const combinedPattern = urlPatterns\n      .map(pattern => (${pattern.source}))\n      .join('|');\n    const combinedRegexp = new RegExp(combinedPattern, 'g');\nconst ops: DeltaOperation[] = [];\nconst str = node.data;\nlet lastMatchEndIndex = 0;\nlet match: RegExpExecArray | null = combinedRegexp.exec(str);\nwhile (match !== null) {\n  if (match.index > lastMatchEndIndex) {\n    ops.push({ insert: str.slice(lastMatchEndIndex, match.index) });\n  }\n  ops.push({ insert: match[0], attributes: { link: match[0] } });\n  lastMatchEndIndex = match.index + match[0].length;\n  match = combinedRegexp.exec(str);\n}\n\nif (lastMatchEndIndex < str.length) {\n  ops.push({ insert: str.slice(lastMatchEndIndex) });\n}\n\ndelta.ops = ops;\nreturn delta;\n\n});\n```. ",
    "kmoe": "Would you appreciate a PR to add this as an option in the config? So you could do\njavascript\nvar editor = new Quill('#editor', {\n  tab: 'disabled'\n});\nor similar.\n. Actually it would be a module option rather than a top-level one. But you get the idea. Preparing PR now in case you do want this.\n. Yes, sorry, by 'module option' I meant an option you can pass into a module rather than a new module! removeHotkey makes sense and would be easy to do.\nDo you think it should just take the raw key number (removeHotkey(9)) or a string mapped using the dom module (removeHotkey('TAB'))?\n. @benbro is your superscript branch still available? I'm probably going to have to implement super/subscript at some point so it would be useful to have a reference.\n. @benbro The problem has started happening again for some reason in Chrome, Opera, and Safari. I need to fix this so I'll update here when I have a solution or workaround.\nAs a last resort, we might try only enabling the toolbar when a user has text selected, as in that situation the superscript toggles fine.\n. Ah, I reproduced it in the advanced example somehow.\n. Hey both - apologies, I haven't got the PR together for this yet. @thomsbg are you happy to do it? Let me know if you have any questions.\n. Aha, just seen https://github.com/quilljs/quill/pull/453!\n. Sorry, made this by mistake.\n. Thanks, managed to miss that.\n. ",
    "LeZuse": "Just noticed that removeHotkey nicely solves the problem for the TAB keystroke, but does not work for Shift+TAB which is a bummer, because you obviously will not removeHotkey Shift. Any workaround suggestions?\n. Just noticed that removeHotkey nicely solves the problem for the TAB keystroke, but does not work for Shift+TAB which is a bummer, because you obviously will not removeHotkey Shift. Any workaround suggestions?\n. @jhchen Any plans to also parse nested lists from the clipboard?\n. @jhchen Any plans to also parse nested lists from the clipboard?\n. @benbro Yes, that's indeed the same issue. I have this problem with pasting from GDocs. Thanks for the link.\n. @benbro Yes, that's indeed the same issue. I have this problem with pasting from GDocs. Thanks for the link.\n. ",
    "acidjazz": "Why isn't this functionality documented anywhere after a year? I tried to find removeHotKeys or removeHotKey in the keyboard module and was unable to call it, I ended up finding I could\njavascript\nvar keyboard = editor.getModule('keyboard');\ndelete keyboard.bindings[9];\nI honestly think tab: 'disabled' or tabs: false is a more understandable and guessable option, especially with the mess for shift+tab as well\nAlso what about turning this on and off on the fly?\n. @benbro thank you, I thought I had read through everything, but googling this instead brought me to this issue, maybe we can add examples of removeHotKey or removeHotKeys? Or were they removed and this is a more proper example now?\nYour example also has a 'remove tab' do nothing which is more than the example documented; is this to fix shift+tab as well?\nI still honestly think 19 lines of code is a bit  much to disable tabs, still would recommend something close to what @kmoe originally suggested. \nGlad to see this issue now ends w/ a link to the proper usage for now though.\n. ",
    "hhubik": "I have the opposite problem.  I have an app with a few input elements, one of which is quill.  I specified the tab order using the tabindex on each input element.  That works fine, except when I tab to the quill element, the focus seems to be on the border of the element.  How do I force the focus be in the text input area of quill so that when I start typing, the text goes in the right place?  Thanks.\n. @benbro I cannot re-create the problem in codepen.  When I set the tabindex of the editor-container div, everything works as I expect (when I tab to the editor, the text input area gets the focus).  \nThe issue I am having could be related to the fact that I am using quill hosted in the Angular2 component Editor from PrimeFaces.  \nWhen I set the tabindex on the Editor component, that is when I see the problem I described earlier.  If anyone familiar with Angular 2 knows how I can set the tabindex on the editor-container inside of the Editor component, please let me know. \n. ",
    "eddieherm": "@aguynamedben @hhubik \nI worked around this by adding the following JQuery code after instantiating quill:\nvar inputTabIndex = $('#first-input').prop('tabindex');\n$('.ql-editor').prop('tabindex', parseInt(inputTabIndex) + 1);\nThe idea is to get the previous input from which you are tabbing from and get its tabindex. Then get the class for the actual editor object which is .ql-editor, and set its tabindex to +1 of the previous input's tabindex.. ",
    "p10shinde": "Try this...\ndelete quill.getModule('keyboard').bindings[\"9\"]. ",
    "piatra": "h[1-3] should be enough as a default. I assume it's easy enough to customize and as many as you need.\n. ",
    "marsbergen": "+1 :+1: \n. ",
    "Jolg42": ":+1: \n. :+1: \n. :+1: It's a good feature, do you plan to add it soon ?\n. :+1: It's a good feature, do you plan to add it soon ?\n. ",
    "leoasis": ":+1: on this one, tried to play with #148 but it was still a bit buggy when converting a header back and forth\n. Leaving out the cleanup for modules I think the only two things that need to be done to clean up the editor instance are:\n1. Remove the editor from the Quill.editors array.\n2. Clear the editor update tick: clearInterval(quill.editor.timer)\nObviously you would need to empty the DOM element to remove all the things Quill created and attached events to.\nFor the modules, that is a case by case basis, for example the toolbar module should remove the event listeners attached to the toolbar element, which is outside the editor itself. That could be handled by making quill call each module's destroy function (if it exists) when the destroy function is called in the editor instance.\n. Hey @jhchen I'd be able to issue a PR for this, starting with what I sent above. In a quick peek do you think that's reasonable? Is there anything big you think it's missing?\n. Yeah I did this in my own wrapper around Quill for a project I am working on, created several thousands of it and it seems to have been cleaned up. Anyway will try this and check it again. Also I will take a look at the modules, but perhaps it could be a separate PR for those, and I'll include here a way to optionally have a destroy method to be called on them.\n. Hey sorry for the time for answering this:\nRegarding points 2 and 3: Since this is a library, it should be able to play well with others in the same app, because that's what the developer is expecting from using it. If there is an issue somewhere, it is the job of the developer to find out what's wrong there and if it ends up being an issue with Quill, then it's time to file an issue here. Not before. As per doctypes, I'd say to start supporting them slowly. Since not using the iframe will be optional, we won't be losing anything from the original set of features. We don't need to support all doctypes at once, let the community help you with that and depending on their needs.\nRegarding styles: Consider the case you have all your app styles in a single minified .css file (after compiling assets). If you want to add styles that customize and override the default ones from quill, you need to use the quill API either 1) adding those styles as a JS object or 2) add a css file.\nOption 1 makes you write your styles in a different way as the rest of your app, and also in two different places, and option 2 makes you have another css file which will trigger a new request.\n. Because quill adds the styles at the bottom of the head tag, so no matter where I add my stylesheet, quill will insert its default styles after that, not allowing me to override (unless specifying stronger selectors or adding !important, which is not very nice)\n. Hey! so what do you think would be the first thing to do from all of this? I can aid in developing something so that we can get this in as soon as possible!\n. Hey! so what do you think would be the first thing to do from all of this? I can aid in developing something so that we can get this in as soon as possible!\n. Hey @u9520107, I'm currently using the small hack in #179. Regarding styling, I made the addStyles method a noop, and grabbed the styles Quill generates and placed them in a stylesheet. About the cursors, are you talking about the multi-cursor module? I'm not using that module for what I'm doing, so it's very possible that it messes with something. Anyway, that module seems to be small enough you can check what's wrong quickly.\nRegarding this fix, yes, it's far away from done, the discussion here is more valuable than the PR itself now. Hope we can contribute to adding this feature!\n. Hey @u9520107, I'm currently using the small hack in #179. Regarding styling, I made the addStyles method a noop, and grabbed the styles Quill generates and placed them in a stylesheet. About the cursors, are you talking about the multi-cursor module? I'm not using that module for what I'm doing, so it's very possible that it messes with something. Anyway, that module seems to be small enough you can check what's wrong quickly.\nRegarding this fix, yes, it's far away from done, the discussion here is more valuable than the PR itself now. Hope we can contribute to adding this feature!\n. Awesome @jhchen! This is definitely good news. Lucky to have you down here in Argentina for the JSConf, so would like to discuss about this move :D Will reach you!\n. Awesome @jhchen! This is definitely good news. Lucky to have you down here in Argentina for the JSConf, so would like to discuss about this move :D Will reach you!\n. Has anyone seen this? Any thoughts/concerns?\n. Has anyone seen this? Any thoughts/concerns?\n. Check it out now!\n. Check it out now!\n. Hey, no worries on enforcing styles! I agree on making those changes, so no problem :D\nRegarding moving the focus listener to the iframe, I'll check if that makes the tests pass and test it a little bit manually to see if that works.\n. Hey, no worries on enforcing styles! I agree on making those changes, so no problem :D\nRegarding moving the focus listener to the iframe, I'll check if that makes the tests pass and test it a little bit manually to see if that works.\n. Seems moving the focus event listener to the iframe is something IE does not like\n. Seems moving the focus event listener to the iframe is something IE does not like\n. Since we're passing _.bind(this.focus, this), as the listener, we need to keep a reference to that function so that we can call off on that. Anyway that's not the problem really, the real problem is that the function that actually gets added as a listener is created inside the dom.on method, which wraps the function you pass to it. If we call off which just falls through to removeEventListener without that into account, it won't remove anything.\nPerhaps I didn't understand correctly what you meant! So let me know if that's the case!\n. Since we're passing _.bind(this.focus, this), as the listener, we need to keep a reference to that function so that we can call off on that. Anyway that's not the problem really, the real problem is that the function that actually gets added as a listener is created inside the dom.on method, which wraps the function you pass to it. If we call off which just falls through to removeEventListener without that into account, it won't remove anything.\nPerhaps I didn't understand correctly what you meant! So let me know if that's the case!\n. We DO need the bind call, since the focus function is using this internally. Anyway even if we didn't, that wouldn't work since dom.on internally attaches another function, which we don't have a reference to remove later on: https://github.com/quilljs/quill/blob/develop/src/lib/dom.coffee#L125-L132\n. We DO need the bind call, since the focus function is using this internally. Anyway even if we didn't, that wouldn't work since dom.on internally attaches another function, which we don't have a reference to remove later on: https://github.com/quilljs/quill/blob/develop/src/lib/dom.coffee#L125-L132\n. You're right, it seems the editor is not losing focus on IE when the input is being focused. It doesn't seem to be related to this though, at least not in an obvious way.\n. You're right, it seems the editor is not losing focus on IE when the input is being focused. It doesn't seem to be related to this though, at least not in an obvious way.\n. The one in the failing test https://travis-ci.org/quilljs/quill/jobs/37244733#L305\n. The one in the failing test https://travis-ci.org/quilljs/quill/jobs/37244733#L305\n. Awesome! I'll resolve the conflicts and make this work\nOn Friday, November 7, 2014, Jason Chen notifications@github.com wrote:\n\nSorry the latest release added a lot of changes and conflicts to this PR.\nThere's no more focus listener so that issue has taken care of itself. The\nfailing focus test might also have fixed itself as there were some focus\nissues that have been fixed in the latest release.\nIf you can resolve the merge conflicts we can give this another try.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/pull/223#issuecomment-62104412.\n. @jhchen check it now, resolved the conflicts and made this work again\n. Yeah, I'm actually using it in the destroy for the quill instance. It seems out of the Editor's responsibility to clear all the listeners of the quill object, and when destroying the entire quill instance this is redundant, but perhaps for some reason you'd want to destroy the editor and clean its own resources. In any case, we can remove this line and just rely on the fact that you'll always destroy the entire quill instance, not just the editor.\n. Ok will move it to a separate one!\n. This one is still outstanding, even though github shows it as outdated\n. \n",
    "dzagorovsky": "+1\n. We are experiencing the same issue with the latest 1.3.4 release even with small text portions. The issue could be easily reproduced in the demo editor on https://quilljs.com/\nWhy do yo close this issue?. ",
    "QuinnEbert": "+1\n. ",
    "heidiv": "+1 !\n. +1 !\n. ",
    "DavidVentura": "Any progress this or on the tests for #148 ?\n. ",
    "subeebot": "+1, urgently needed, any idea when this will be added?\n. +1, urgently needed, any idea when this will be added?\n. ",
    "sagacitysite": "+1\n. Indeed I was happy, in our case it is not important when it will be released, it's just important if it will be released. Actually, it's not even important if the feature will be available this year or next year, but we wanted to know if we can implement it one day. So I closed the issue.\nAnd wrt the side note:\nIn our project we're started to work with gulf in combination with ottype richtext and mongodb adapter (and Quill of course). And we transfer data trough socket io. We had a first success in the last days/weeks.\nIf you are interested in how we did it, you can have a look at our github repository. You can find the server part and the client part. But work is still in progress! ;)\n. Indeed I was happy, in our case it is not important when it will be released, it's just important if it will be released. Actually, it's not even important if the feature will be available this year or next year, but we wanted to know if we can implement it one day. So I closed the issue.\nAnd wrt the side note:\nIn our project we're started to work with gulf in combination with ottype richtext and mongodb adapter (and Quill of course). And we transfer data trough socket io. We had a first success in the last days/weeks.\nIf you are interested in how we did it, you can have a look at our github repository. You can find the server part and the client part. But work is still in progress! ;)\n. ",
    "timcosta": "actually, my fix for this isnt 100% complete. \nis desired behavior to change the formatted text ONLY when the formatted text is exactly the old link, or change the formatted text regardless?\n. Agreed, however I asked about changing the formatted text, not the href. My current PR changes the href regardless. \n. Currently, when you create a link out of selected text it all works fine. If you attempt to change the URL of the link after using the tooltip, the href of the actual  is not updated. This can be verified by viewing the inspector in Chrome/FF. \nMy PR fixes the issue of not updated the href of the  tag. \nI am asking if the desired functionality is to also change the formatted text <a>THIS TEXT</a> to the new URL because the issue talks about the formattedText retaining the old URL, which I would expect.\n. alright. well in that case I believe this PR is ready to be accepted. I am not sure how to check the functionality of the Deltas in relation to my change, so that is something I would appreciate help testing. \n. Requested changes complete.\n. Fix made.\n. ",
    "armanc": "Needed! When?\n. ",
    "jonpincus": "I saw in the discussion forum that you're looking at changes that will make this easier, curious about the timeframe. I'm currently using another editor and would like to shift over to Quill but this is functionality I need ...\n. I understand not wanting to set inaccurate dates and certainly appreciate the challenges of unpredictable development.  This issue isn't assigned to a milestone, so should I assume it's post-1.0?\n. ",
    "JWesorick": "Any update on when this will be available? \n. Any update on when this will be available? \n. +1\n. +1\n. ",
    "scamden": "+1\n. +1\n. @jhchen +1 here, are you close on custom formats? \n. Ya collapsing whitespace was a downside we were willing to accept, but even the single space between words is removed in firefox as you type. The html is just the content of previous emails which we include at the bottom of the reply. it's not generated by a quill editor unfortunately, but looks ok if whitespace is set to normal. otherwise it ends up with a bunch of extra space between certain sections, i can provide an example if you need. \n. Ya collapsing whitespace was a downside we were willing to accept, but even the single space between words is removed in firefox as you type. The html is just the content of previous emails which we include at the bottom of the reply. it's not generated by a quill editor unfortunately, but looks ok if whitespace is set to normal. otherwise it ends up with a bunch of extra space between certain sections, i can provide an example if you need. \n. i looked into cleaning the html, but it's very tricky cause it's more or\nless arbitrary. i'll get an example soon\nOn Wed, 2 Sep 2015 at 17:33 Jason Chen notifications@github.com wrote:\n\nYes an example would be great. It might be best to just try to clean up\nthis HTML. The difficulty is Quill relies on the white-space property to do\nproper and cross browser display of whitespace.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/468#issuecomment-137282166.\n. i looked into cleaning the html, but it's very tricky cause it's more or\nless arbitrary. i'll get an example soon\n\nOn Wed, 2 Sep 2015 at 17:33 Jason Chen notifications@github.com wrote:\n\nYes an example would be great. It might be best to just try to clean up\nthis HTML. The difficulty is Quill relies on the white-space property to do\nproper and cross browser display of whitespace.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/468#issuecomment-137282166.\n. ok here's one sorry it's long: \n\nhtml\nYup! Super fun! Ok man ttyl <br />\n<div class=\"gmail_quote\">\n  <div>On Mon, Aug 3, 2015 at 5:58 PM Christopher Martinez &lt;<a\n    href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n  <blockquote class=\"gmail_quote\"\n    style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Snaps.\n    I'm gone on Sunday until the 24th. I'll ping you then to see if\n    you're around. Have fun in FL (hopefully it's for fun). <br />\n    <div class=\"gmail_quote\">\n      <div>On Mon, Aug 3, 2015 at 2:50 PM Sterling Camden &lt;<a\n        href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n      <blockquote class=\"gmail_quote\"\n        style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">I'm\n        in Florida this week but next?<br />\n        <div class=\"gmail_quote\">\n          <div>On Mon, Aug 3, 2015 at 3:37 PM Christopher Martinez\n              &lt;<a\n            href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n          <blockquote class=\"gmail_quote\"\n            style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Hey Rusty-<br />\n            <br />I'm back this week. You free at all for lunch or\n            coffee or something?<br />\n            <div class=\"gmail_quote\">\n              <div>On Tue, Jul 7, 2015 at 10:46 AM Sterling Camden\n                  &lt;<a\n                href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n              <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">\n                <div>perfect!</div>\n                <br />\n                <div class=\"gmail_quote\">\n                  <div>On Tue, 7 Jul 2015 at 10:44 Christopher Martinez\n                      &lt;<a\n                    href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n                  <blockquote class=\"gmail_quote\"\n                    style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">I\n                    figured you might. <br />\n                    <br />Sure I'll send you a note when I get back in\n                    town. Sometime late July. <br />\n                    <br />Chris<br />\n                    <div class=\"gmail_quote\">\n                      <div>On Tue, Jul 7, 2015 at 10:33 AM Sterling\n                        Camden &lt;<a\n                        href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n                      <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">\n                        <div>Haha it's no problem, Chris! Thought it was\n                          fun, although my coworkers were pretty\n                          confused cause I go by Sterling now :) I would\n                          def love to meetup but this week is pretty\n                          crazy. Maybe we can catch up when you're back?</div>\n                        <div>\n                          <div>\n                            <br /></div>\n                          <div>Sterling</div></div>\n                        <br />\n                        <div class=\"gmail_quote\">\n                          <div>On Mon, 6 Jul 2015 at 23:29 Christopher\n                            Martinez &lt;<a\n                            href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n                          <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Hey\u00a0Rusty!<div>\n                              <br /></div>\n                            <div>Sorry for just blurting your name on\n                              the street but I've seen you walking a\n                              couple times and meant to say hi. Lara and\n                              I are currently living at 645 Forest Ave\n                              so we're super close. Want to get a coffee\n                              etc. sometime?\u00a0</div>\n                            <div>\n                              <br /></div>\n                            <div>I'm around Wednesday or\n                              Thursday\u00a0morning then traveling for a bit\n                              until Aug.\u00a0</div>\n                            <div>\n                              <br /></div>\n                            <div>Chris<span></span></div>\n                        </blockquote></div> </blockquote></div>\n                    <div>-- <br /></div>\n                    <div>\n                      <div>\n                        <div>\n                          <span\n                    style=\"font-size: 13.2px;\">Chris</span></div></div></div>\n                </blockquote></div> </blockquote></div>\n            <div>-- <br /></div>\n            <div>\n              <div>\n                <div>\n                  <span\n            style=\"font-size: 13.2px;\">Chris</span></div></div></div>\n        </blockquote></div> </blockquote></div>\n    <div>-- <br /></div>\n    <div>\n      <div>\n        <div>\n          <span\n    style=\"font-size: 13.2px;\">Chris</span></div></div></div> </blockquote></div>\nhere's without whitespace normal:\n\nhere's with normal:\n\n. ok here's one sorry it's long: \nhtml\nYup! Super fun! Ok man ttyl <br />\n<div class=\"gmail_quote\">\n  <div>On Mon, Aug 3, 2015 at 5:58 PM Christopher Martinez &lt;<a\n    href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n  <blockquote class=\"gmail_quote\"\n    style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Snaps.\n    I'm gone on Sunday until the 24th. I'll ping you then to see if\n    you're around. Have fun in FL (hopefully it's for fun). <br />\n    <div class=\"gmail_quote\">\n      <div>On Mon, Aug 3, 2015 at 2:50 PM Sterling Camden &lt;<a\n        href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n      <blockquote class=\"gmail_quote\"\n        style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">I'm\n        in Florida this week but next?<br />\n        <div class=\"gmail_quote\">\n          <div>On Mon, Aug 3, 2015 at 3:37 PM Christopher Martinez\n              &lt;<a\n            href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n          <blockquote class=\"gmail_quote\"\n            style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Hey Rusty-<br />\n            <br />I'm back this week. You free at all for lunch or\n            coffee or something?<br />\n            <div class=\"gmail_quote\">\n              <div>On Tue, Jul 7, 2015 at 10:46 AM Sterling Camden\n                  &lt;<a\n                href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n              <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">\n                <div>perfect!</div>\n                <br />\n                <div class=\"gmail_quote\">\n                  <div>On Tue, 7 Jul 2015 at 10:44 Christopher Martinez\n                      &lt;<a\n                    href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n                  <blockquote class=\"gmail_quote\"\n                    style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">I\n                    figured you might. <br />\n                    <br />Sure I'll send you a note when I get back in\n                    town. Sometime late July. <br />\n                    <br />Chris<br />\n                    <div class=\"gmail_quote\">\n                      <div>On Tue, Jul 7, 2015 at 10:33 AM Sterling\n                        Camden &lt;<a\n                        href=\"mailto:rusty.camden@gmail.com\">rusty.camden@gmail.com</a>&gt; wrote:<br /></div>\n                      <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">\n                        <div>Haha it's no problem, Chris! Thought it was\n                          fun, although my coworkers were pretty\n                          confused cause I go by Sterling now :) I would\n                          def love to meetup but this week is pretty\n                          crazy. Maybe we can catch up when you're back?</div>\n                        <div>\n                          <div>\n                            <br /></div>\n                          <div>Sterling</div></div>\n                        <br />\n                        <div class=\"gmail_quote\">\n                          <div>On Mon, 6 Jul 2015 at 23:29 Christopher\n                            Martinez &lt;<a\n                            href=\"mailto:chrisjoemart@gmail.com\">chrisjoemart@gmail.com</a>&gt; wrote:<br /></div>\n                          <blockquote class=\"gmail_quote\" style=\"margin: 0 0 0 0.8ex;border-left: 1.0px rgb(204,204,204) solid;padding-left: 1.0ex;\">Hey\u00a0Rusty!<div>\n                              <br /></div>\n                            <div>Sorry for just blurting your name on\n                              the street but I've seen you walking a\n                              couple times and meant to say hi. Lara and\n                              I are currently living at 645 Forest Ave\n                              so we're super close. Want to get a coffee\n                              etc. sometime?\u00a0</div>\n                            <div>\n                              <br /></div>\n                            <div>I'm around Wednesday or\n                              Thursday\u00a0morning then traveling for a bit\n                              until Aug.\u00a0</div>\n                            <div>\n                              <br /></div>\n                            <div>Chris<span></span></div>\n                        </blockquote></div> </blockquote></div>\n                    <div>-- <br /></div>\n                    <div>\n                      <div>\n                        <div>\n                          <span\n                    style=\"font-size: 13.2px;\">Chris</span></div></div></div>\n                </blockquote></div> </blockquote></div>\n            <div>-- <br /></div>\n            <div>\n              <div>\n                <div>\n                  <span\n            style=\"font-size: 13.2px;\">Chris</span></div></div></div>\n        </blockquote></div> </blockquote></div>\n    <div>-- <br /></div>\n    <div>\n      <div>\n        <div>\n          <span\n    style=\"font-size: 13.2px;\">Chris</span></div></div></div> </blockquote></div>\nhere's without whitespace normal:\n\nhere's with normal:\n\n. I ended up working around by using regex replaces to clean the html.\nGenerally I just replaced multi spaces with one. And possibly one other\nreplace I can't recall. But ya if I remember correctly Jason replied that\nwhite space normal is a misuse and quill is not built to accept arbitrary\nhtml. Sorta a bummer to do hacky heuristic replaces but it works for us.\nSterling Camden\nSent from SalesforceIQ\nOn March 16, 2016 at 9:01 AMPavel Zhytkonotifications@github.com wrote:\nDo you have any update on this? I experience the same issue, but I believe\nthat, despite being indeed related to CSS white-space property, this may be\na bug in Quill.\n-\nThe issue is only reproduced when editor has white-space:normal and not\n   reproduced with default white-space:pre-wrap. It is also reproduced only\n   with Firefox (mine is v44).\n   -\n(My reason for having white-space:normal is very similar to the author's\n   one: I implement a rich editor for email-like app and it means that\n   sometimes editor does not start blank: it is fed with HTML generated by\n   other email clients (think MS Outlook), which is complete junk -- lot's of\n   custom attributes, extra spaces around etc. Now, I opted to not clean-up\n   that junk because white-space:normal fixed all kinda magically. Except\n   that one issue with Firefox..)\n   -\nI think this may be Quill's bug because of:\n1. I can insert spaces when NOT at the EOL : demo\n   https://gyazo.com/73874c547c82bc944314fa89c9f35eb6\n2. I generally cannot insert when at the EOL: demo\n   https://gyazo.com/c32f6c38bcbe9ceaa05077cbd4961f8f\n3. It is possible to insert spaces at the EOL by pressing\n   space/non-space chars very quickly or simultaneously: demo\n   https://gyazo.com/9a83744b3b9b160c6dd8628a096e2869\nNotice also that a child element is being added in cases 2/3 when you type,\nbut is removed quickly (not sure what's it, but may be related).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/468#issuecomment-197397919\n. I ended up working around by using regex replaces to clean the html.\nGenerally I just replaced multi spaces with one. And possibly one other\nreplace I can't recall. But ya if I remember correctly Jason replied that\nwhite space normal is a misuse and quill is not built to accept arbitrary\nhtml. Sorta a bummer to do hacky heuristic replaces but it works for us.\nSterling Camden\nSent from SalesforceIQ\nOn March 16, 2016 at 9:01 AMPavel Zhytkonotifications@github.com wrote:\nDo you have any update on this? I experience the same issue, but I believe\nthat, despite being indeed related to CSS white-space property, this may be\na bug in Quill.\n-\nThe issue is only reproduced when editor has white-space:normal and not\n   reproduced with default white-space:pre-wrap. It is also reproduced only\n   with Firefox (mine is v44).\n   -\n(My reason for having white-space:normal is very similar to the author's\n   one: I implement a rich editor for email-like app and it means that\n   sometimes editor does not start blank: it is fed with HTML generated by\n   other email clients (think MS Outlook), which is complete junk -- lot's of\n   custom attributes, extra spaces around etc. Now, I opted to not clean-up\n   that junk because white-space:normal fixed all kinda magically. Except\n   that one issue with Firefox..)\n   -\nI think this may be Quill's bug because of:\n1. I can insert spaces when NOT at the EOL : demo\n   https://gyazo.com/73874c547c82bc944314fa89c9f35eb6\n2. I generally cannot insert when at the EOL: demo\n   https://gyazo.com/c32f6c38bcbe9ceaa05077cbd4961f8f\n3. It is possible to insert spaces at the EOL by pressing\n   space/non-space chars very quickly or simultaneously: demo\n   https://gyazo.com/9a83744b3b9b160c6dd8628a096e2869\nNotice also that a child element is being added in cases 2/3 when you type,\nbut is removed quickly (not sure what's it, but may be related).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/468#issuecomment-197397919\n. ",
    "scott": "+1\n. ",
    "Gregoor": "+1\n. ",
    "icarusion": "+1\n. ",
    "camrongodbout": "+1\n. ",
    "jamesgibson14": "I see that there is a module code-highlighter in the beta, how would we go about highlighting css or javascript?\n. I see that there is a module code-highlighter in the beta, how would we go about highlighting css or javascript?\n. ",
    "mrmishmash": "+1. ",
    "arturocr": "Right now I'm taking Quill as the first option to use in a big education related software, but the support for tables is a \"deal breaker\", is there any progress in the implementation of this feature?\n. @jhchen thanks for the answer, I understand. Thanks anyway, QuillJS looks really promising, will keep an eye on it and see if I can contribute with something.\n. ",
    "cubitouch": "I would need that for my project too. I think I can spend some time on this, if someone can advice me some API endpoints or something. Where should I begin with ?\n. I would need that for my project too. I think I can spend some time on this, if someone can advice me some API endpoints or something. Where should I begin with ?\n. ",
    "saw": "I really want to take this on but I have some questions. The first one being that I'm really curious what thoughts @jhchen and @george-norris-salesforce have about how to go about doing this. The way I see it there are three levels of support:  1. Handling pasted tables. 2. Providing APIs for interacting with tables 3. Adding UI support for tables\n1. Creating blots in parchment for <table> ,<thead>, <tbody>, <tr> and <th>\n2. Adding a tables module that brings in these blots\n3. Possibly updating clipboard.js to handle tables properly, I think the blots will make this work, but I'm not that familiar with the code.\n4. Chasing down editor bugs when interacting with tables. Content-editable does...things with tables that I don't understand\nThe next level is the hard part! \n1. Define APIs required (insert/delete col, row, do things with header, etc)\n2. Write test suite\n3. Implement APIs\nAnd finally\n1. Decide proper UI for managing tables\n2. Build UI and wire up with API\nOh and one last thing: how about a Quill slack team?\n. Embeds seem like the simplest solution, I like the approach to creating a table @jhchen laid out. One problem with this is pasted tables, which often come with a lot of formatting. We can assume people are using a reset style sheet that applies border-collapse:collapse and border-spacing:0; but all the attributes in the pasted table will need to then be stripped. \nIn the use cases I'm dealing with right now people really, really want to past tables from Word and Excel, which come with backgrounds and borders in inline styles.\nIs there a way to strip these attributes without creating blots for td and td?\n. I've had some time to work on this today and I bumped into the issues @jhchen alluded to regarding formatting. Formatting cells with background colors as well as having contents with inline styles seems important. The trouble is making this work without a parallel api. Heres one way a table API with formatting could look:\njavascript\ninsertEmbed(index,'table',[\n  [{\n    content:'Hello',\n    style: {\n      backgroundColor: 'red',\n      borderTop: '1px solid black',\n      color: 'white',\n      weight: 'bold'\n    }\n  },'World'],\n  ['A', 'B']\n]);\nResulting in: \nhtml\n<table>\n  <tbody>\n    <tr>\n      <td style=\"background:red;border-top:1px solid black;color:white;\"><b>Hello</b></td>\n      <td>World</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\nOr are we getting to far into a world of parallel apis?  Thoughts on this approach?\n. I'm trying to get some real data on our users that are currently pasting tables into CK Editor from word so I get a sense on what the \"normal\" interaction for pasted tables is.\n. I think a sensible \"limited\" table to emulate is tables in github markdown:\n- Cells cannot contain block elements\n- Cells cannot contain tables\n- No colspan (maybe?)\n- Tables will not directly editable except for editing the text content (copying off this thread for draft.js)\n. Yeah, it works ok, it has some limitations. I do want to finish this PR as\nsoon as I can, I've built more extensive table support for work, but our\nuse case right now is just pasting tables, not actually creating or editing\nthem.\nOn Thu, Oct 6, 2016 at 12:07 PM, Chris Cashwell notifications@github.com\nwrote:\n\nI posted a Gist\nhttps://gist.github.com/ccashwell/e2ceac25d7195e4715a93587da89d747\nbased on @saw https://github.com/saw's example, extending it to work\nwith a React component that builds the table structure given some data. It\nworks okay.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/117#issuecomment-252059016, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABT5zr5uJpkgA0rIKH1oUoSJF96BCYBks5qxUbUgaJpZM4B9jc3\n.\n. I agree @rikh42 has the right idea, but it's very tricky, I would love to\nsee their code to understand how they made it happen\nOn Mon, Jan 30, 2017 at 6:20 AM Pavel Zhukov notifications@github.com\nwrote:\nI think I have an idea of how @rikh42 https://github.com/rikh42\nimplemented it. I tried to hack my implementation based on the list and\nlist-item blots. Lets say we are implementing 3 new blots: table,\ntable-row, table-cell. The main differences from the way the list is\nimplemented are:\n\nInstead of working with format on the level of the outermost\n   container (in lists the ul and ol are responsible for the format, not\n   the li), we have to work with the format on the level of the\n   inner-most container (table-cell).\nWhen we create a list -- we create the outermost container. For\n   example, when you initially render 10 list items, quill actually renders\n   each list item in a separate ul, and then it creates defaultChild item\n   within each ul.\n   Then the optimize() function fires for each ul and it ends up moving\n   all li items into the first ul.\n   But since in the tables we create the inner-most container (table-cell),\n   we need its optimize() to also do some work by first wrapping itself\n   into table-row. Then table-row's optimize() needs to wrap itself into\n   table.\nAnd that's not it! If we want to have paragraphs and lists inside\n   table-cell then the table-cell should also be a Container and we need\n   to patch Block and probably List to be aware of the table logic and to\n   be able to wrap itself into table-cell (which then wraps itself into\n   table-row, which then wraps itself into table)\n\nWell, that's what my current thoughts are, I don't actually have a working\nsolution yet, so it would be really nice to hear from @rikh42\nhttps://github.com/rikh42 or anyone else hacking this feature.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/117#issuecomment-276073767, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABT5x9FUOm1XeuFJxwGbTotm6kOwH_dks5rXfG7gaJpZM4B9jc3\n.\n. @cray0000 in that approach how do you determine what <td> belong to which <tr>? It seems if you work up from a the cell you have no way to determine when to wrap in <tr> that matches the defined table during the value() phase, unless I am not seeing it.. (downgrading to node v.4.4.5 fixes the error)\n. New version with better blot. Not sure how you feel about the dom work that happens to build and understand the table inside the embed.\n. So, this approach does work but it has some major limitations, particularly in the \"paste from word\" case. In that case table contents contain styles. If quill is going to support formatting cell contents creating blots for TR and TD would be required. That approach would obviously make things much, much more complicated and I'm not sure it's a great idea to go down that path. What I love about quill is it's simplicity. Other editors are nightmarishly complex, partially because they don't have a document model but also because they try and solve these complex situations. (what happens when you press backspace into a table? Does the row get deleted? The cell contents?)\n. Formats inside a cell: this is a tricky thing. Personally I think it should be supported because it is such a common use case and it's really confusing when you click on a bold button and it has no effect. The trouble is implementing this requires (I think) short circuiting the normal flow in the formatting buttons. If you click bold while your cursor is in table cell I suppose that would turn the content of the cell bold (still not exactly what you expect).\n\nNow that I say this I'm leaning toward not supporting formatting at all in the initial version because it's just so complicated. I have experimented with blots for <tr>, <td> etc but that approach is interesting because unlike most blots those elements cannot be merged.\n. @dons20 no, the problem right now is that this is a very difficult feature to get \"right\" from a usability standpoint. The trouble with my current approach is that if the table is an embed you cannot change the style of the contents (formatting buttons don't work) so it's very confusing to users.. @jhchen I've been thinking about this and an approach to an editable table is evolving in my mind, and I'd like to run it past you. \nHere's the basic idea: tables would still be an embed, and processed in a similar way. Rather than treating tables as a collection of blots management of tables would be handled by a module which can understand table things, such as row, columns and cell sizes. A UI would exist for editing cell styles, but when a user clicks into a cell a new quill editor will be instantiated for that cell, and then destroyed when the user clicks out, saving the changes back to the table.\nThe resulting value for the embed would be a two dimensional array, but instead of each cell being a string it would be an object:\n{\n    htmlContent: '<b>bold</b>',\n    styles: {\n        border:'1px solid black',\n        backgroundColor: 'red'\n    }\n}\nAt the moment updates would have to be a complete replace, insertEmbed(giantArray), but modifications to the table could possibly be enhanced by using a DOM diffing library. \nProblems:\nRight now it's not possible to create a new editor from within a module, nor is there a good mechanism to create this child editor. It's also not possible to override or stare a single toolbar with multiple editors \nIt's also slightly insane, and it might not be a good idea for merge to quill core. Thoughts?. We are exploring it. The easy way is to watch for text changes and when you see a \":\" fire up your modal or whatever and when you are done insert the text into the editor.\n. Thanks! sorry for the noise.\n. Thanks!\nOn Thu, Sep 29, 2016 at 5:06 PM Jason Chen notifications@github.com wrote:\n\nClosed #1017 https://github.com/quilljs/quill/issues/1017.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1017#event-807823354, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABT588br4jwwumdG4y991VGBf7OGqJJks5qvFKZgaJpZM4KKlUC\n.\n. Update: removing ql-blank from the editor fixes the problem, so it must be caused by the :before content. @azam removing the :before rule absolutely fixes this issue, but I have no idea why. Trying to re-create this in a code pen without quill I couldn't create the same bug: http://codepen.io/saw-1473371988/pen/EmQMNq. @azam ok I can repro on mac now, and it's intermittent. Tab A: no bug, Tab B (incognito): bug. I've tracked this down to insertBefore() in container.ts. I'm not entirely sure why it happens, but the first character entered in a descendant of container.ts results in that insertBefore method being called. \n\nThe problem is caused by inserting the textNode of the first text blot before the block:\nparentBlot.domNode.insertBefore(this.domNode, (typeof refDomNode !== 'undefined') ? refDomNode : null);. I've tracked this down to insertBefore() in container.ts. I'm not entirely sure why it happens, but the first character entered in a descendant of container.ts results in that insertBefore method being called. \nThe problem is caused by inserting the textNode of the first text blot before the block:\nparentBlot.domNode.insertBefore(this.domNode, (typeof refDomNode !== 'undefined') ? refDomNode : null);. How to fix it is a mystery at this point, especially considering it doesn't always happen.. How to fix it is a mystery at this point, especially considering it doesn't always happen.. I believe this may in fact be the same bug as reported in #1437 . That was closed when users disabled the evernote plugin, however discovered that the bug always happens for me in an incognito window in chrome. Also the bug happens if I disable 1password. Enable it: fixes the bug.. I believe this may in fact be the same bug as reported in #1437 . That was closed when users disabled the evernote plugin, however discovered that the bug always happens for me in an incognito window in chrome. Also the bug happens if I disable 1password. Enable it: fixes the bug.. Update: 1password extension fixes the bug in safari & chrome. Nothing makes any sense anymore. Up is down.. Update: 1password extension fixes the bug in safari & chrome. Nothing makes any sense anymore. Up is down.. I believe I have reproduced the root cause in this pen: https://codepen.io/saw-1473371988/pen/Wjzmay\nBasically the IME seems to think the first character is after the insertion point, but the insertion point is corrected after the text node is appended to the block node (I think this happens in selection.js:setNativeRange()). So this is progress! Now to figure out how to fix this,. I believe I have reproduced the root cause in this pen: https://codepen.io/saw-1473371988/pen/Wjzmay\nBasically the IME seems to think the first character is after the insertion point, but the insertion point is corrected after the text node is appended to the block node (I think this happens in selection.js:setNativeRange()). So this is progress! Now to figure out how to fix this,. Here is what I think is happening:\nWhen you type the first character in the editor quill creates a <p> to contain it then appends the text node you created to that node this puts the cursor before the character you just typed. Then quill uses the Selection and Range apis to move the cursor after the character. This creates a race condition because the js code is synchronous. The OS starts launching the IME thing (for Japanese typing) as soon as the first character is entered. If the cursor has been moved by the time the IME is getting characters you\u2019re fine. If it hasn\u2019t you aren\u2019t, the IME thinks you are typing in front of where you think you're typing.. Here is what I think is happening:\nWhen you type the first character in the editor quill creates a <p> to contain it then appends the text node you created to that node this puts the cursor before the character you just typed. Then quill uses the Selection and Range apis to move the cursor after the character. This creates a race condition because the js code is synchronous. The OS starts launching the IME thing (for Japanese typing) as soon as the first character is entered. If the cursor has been moved by the time the IME is getting characters you\u2019re fine. If it hasn\u2019t you aren\u2019t, the IME thinks you are typing in front of where you think you're typing.. @azam I can reproduce in develop, try it in an incognito window. . @azam I can reproduce in develop, try it in an incognito window. . I'm exploring solutions to this. The basic issue is we can't append the textNode to it's parent while the IME is open. I've \"fixed\" the problem by stopping update() in scroll.js while the IME is open and then applying them after, but I'm having issue right now with the model becoming out of sync with the contents of the editor when I do that. Another solution is to attach a text_node to each new block rather than a <br> but his is a huge architectural change. I'm exploring solutions to this. The basic issue is we can't append the textNode to it's parent while the IME is open. I've \"fixed\" the problem by stopping update() in scroll.js while the IME is open and then applying them after, but I'm having issue right now with the model becoming out of sync with the contents of the editor when I do that. Another solution is to attach a text_node to each new block rather than a <br> but his is a huge architectural change. here is one possibly crazy option, change the default child of block from break to text, then modify text so it has a non-empty string (maybe zero-width space, U+200B) as it's default child, then in optimize remove the stray character in the beginning of the text blot. This does work, but it's a huge change because the empty state of the enter would no longer be <p><br></p>. here is one possibly crazy option, change the default child of block from break to text, then modify text so it has a non-empty string (maybe zero-width space, U+200B) as it's default child, then in optimize remove the stray character in the beginning of the text blot. This does work, but it's a huge change because the empty state of the enter would no longer be <p><br></p>. The above change fixes the bug, but is a significant change and probable wrong. @jhchen do you have a suggestion for solving this that wouldn't be as sweeping and destructive?. The above change fixes the bug, but is a significant change and probable wrong. @jhchen do you have a suggestion for solving this that wouldn't be as sweeping and destructive?. Here is an override that fixes the issue completely, but you will need to scrub the '\\u200B' from your output. Here is an override that fixes the issue completely, but you will need to scrub the '\\u200B' from your output. For our internal use I think I have some overrides that work (I'll add you to the pull request @azam ) but I'm not sure the ideal solution for the library. For our internal use I think I have some overrides that work (I'll add you to the pull request @azam ) but I'm not sure the ideal solution for the library. I will as soon as I get back from vacation later this month\nOn Mon, Jul 17, 2017 at 07:04 Jason Chen notifications@github.com wrote:\n\nThe original steps for reproduction is now working on the latest version\nof Quill 1.2.6 on the latest IE 11.483.15063.0 and MS Edge 40.15063.0.0.\n@saw https://github.com/saw can you try with the latest and see if you\nare still having issues?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1453#issuecomment-315668817, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABT5xULuhldYpmC0ji2pSzLNajh9cOdks5sOutigaJpZM4NWLyE\n.\n. I will as soon as I get back from vacation later this month\nOn Mon, Jul 17, 2017 at 07:04 Jason Chen notifications@github.com wrote:\nThe original steps for reproduction is now working on the latest version\nof Quill 1.2.6 on the latest IE 11.483.15063.0 and MS Edge 40.15063.0.0.\n@saw https://github.com/saw can you try with the latest and see if you\nare still having issues?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1453#issuecomment-315668817, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABT5xULuhldYpmC0ji2pSzLNajh9cOdks5sOutigaJpZM4NWLyE\n.\n. @jhchen it does not seem to be happening anymore. Do you happen to know what changed to fix this? I'm really curious how you did it.. @jhchen it does not seem to be happening anymore. Do you happen to know what changed to fix this? I'm really curious how you did it.. How about only adding the DOMNodeInserted listener when IME input is detected? Add the listener when compositionstart is fired? It won't fix the bug, but it would limit the damage. How about only adding the DOMNodeInserted listener when IME input is detected? Add the listener when compositionstart is fired? It won't fix the bug, but it would limit the damage. Needs sanitization.\n. \n",
    "kolesoffac": "Hi, jhchen!\nI would like to know when planning add support table.\nThanks\n. It isn't same request! Similar(use one toolbar), but isn't same(general navigation between subeditors). \n. ",
    "ccashwell": "I posted a proof-of-concept Gist based on @saw's example, extending it to work with a React component that builds the table structure given some data. It works okay, but it's far from a complete implementation.\n. Thanks, but I can see now that my question was unclear. I'm wondering if one can import the standard theme toolbar and append a button with custom functionality without manually describing standard functionality. The approach you've described requires definition of the standard toolbar as well as custom functionality. I'd prefer not to have to define all the default toolbar buttons manually just to add one.\n. Exactly like that. Thanks! \ud83c\udfc6 \n. ",
    "mscreenie": "Would like to see this pretty please  :) :+1:\n. Thanks! Great stuff. I noticed when changing the font family the editor attaches a class as opposed to a style or font tag like other editors. Is this behavior changeable, as in my case it is not desirable. I searched and it seems it possible for font sizes not sure about font family, or is it possible to specify your own markup when selecting a font e.g.\n<span style=\"font-family:Roboto;\" data-font-fetch=\"Roboto\">Hello</span>\n. Any pointers on how to add an additional data-font-fetch when a font is selected / changed for text?  Thank you.\ndata-font-fetch=\"Roboto\"\n. shamefully requesting help here. @benbro would you be able to assist me in modifying the font selector to add a attribute like the above? \n. Not sure but you see if whitelisting the tag helps @benbro described in my issue: https://github.com/quilljs/quill/issues/1108 \n. Present on Windows 7 also. Same Chrome version.\n. ",
    "monolithed": "It would be nice to have a simple implementation of tables in the Quill. Really. I don't ask to give me something hard and serious \u2014 only basic support.. It would be nice to have a simple implementation of tables in the Quill. Really. I don't ask to give me something hard and serious \u2014 only basic support.. ",
    "MrTin": "@rikh42 impressive work on table support! \ud83d\ude80  Looks like there are many more that would like to play around with this, is it perhaps something or at least parts of it you could extract and share with the community?. ",
    "cray0000": "I think I have an idea of how @rikh42 implemented it. I tried to hack my implementation based on the list and list-item blots. Lets say we are implementing 3 new blots: table, table-row, table-cell. The main differences from the way the list is implemented are:\n\nInstead of working with format on the level of the outermost container (in lists the ul and ol are responsible for the format, not the li), we have to work with the format on the level of the inner-most container (table-cell).\nWhen we create a list -- we create the outermost container. For example, when you initially render 10 list items, quill actually renders each list item in a separate ul, and then it creates defaultChild item within each ul. \nThen the optimize() function fires for each ul and it ends up moving all li items into the first ul.\nBut since in the tables we create the inner-most container (table-cell), we need its optimize() to also do some work by first wrapping itself into table-row. Then table-row's optimize() needs to wrap itself into table.\nAnd that's not it! If we want to have paragraphs and lists inside table-cell then the table-cell should also be a Container and we need to patch Block and probably List to be aware of the table logic and to be able to wrap itself into table-cell (which then wraps itself into table-row, which then wraps itself into table)\n\nWell, that's what my current thoughts are, I don't actually have a working solution yet, so it would be really nice to hear from @rikh42 or anyone else hacking this feature.. @saw,\ntable-cell will have ids for <tr> and for <table>. And if we want to have lists and paragraphs within td then we also need the id for td too). But for now lets take the simple case of 2 ids -- row and table\nActually the tableId is optional, depends on whether we want 2 separate tables to automerge together or not. For example list does automatically merge together with the list next to it. If you have 2 of them separated by <p> and you remove that <p> -- then those 2 lists will be merged into one. The same is true for the table implementation. If we take into consideration tableId, then 2 separate tables can exist next to each other. Otherwise they will be always merged into a single table (even though the amount of columns may not be equal).\nSo lets say we want both rowId and tableId and we don't want <p>/<li> within <td>. Here is my suggested algorithm (I didn't actually test it, it's just an idea):\ntable-cell\n\nwe create table-cell with the value of { rowId: 'aaa', tableId: 'bbb' }\nwe specify the format treatment in static create() and static formats() to attributes data-table-id, data-row-id.\nin optimize() we check whether the parent is table-row. If not -- we wrap it into table-row by creating that blot and passing it the same value -- Parchment.create('table-row', this.statics.formats(this.domNode))\n\ntable-row\nHere is where the merging of <tr>s is going to happen (moving <td> into a single <tr> they belong to).\n\ntable-row will be created by its child (table-cell) with the same value. static create() and static formats() will set data-table-id, data-row-id\n\noptimize() will do 2 things:\n    a) merge sibling table-rows together by data-row-id -- this is done the same way as currently in list:\njs\nif (next != null && next.prev === this &&\n  next.statics.blotName === this.statics.blotName &&\n  next.domNode.getAttribute('data-row-id') === this.domNode.getAttribute('data-row-id')\n) {\n  // move stuff from one <tr> to another, the same as in 'list':\n  next.moveChildren(this);\n  next.remove();\n}\nb) check whether the parent is table. If not -- we wrap it into table while passing the same value to Parchment.create.\n\n\ntable\nThe table blot is basically the same as table-row but it's not interested in rowId anymore and only cares about the tableId and the corresponding attribute data-table-id. And it has the same optimize() as table-row which merges tables together based on the data-table-id attribute, but since the table blot is the highest level we don't need to wrap it into anything.. @2Pacalypse- I didn't have time to actually start seriously hacking it yet. \nThe only implementation I have right now is a pretty silly one with just the trs and tds as custom tags with flex layout -- implemented in exactly the same way as quill's list and list-item.\nHere it is: https://gist.github.com/cray0000/9e9eeca6a6ce292453a09ddf6c0c4ad1 \nI plan to get to the coding of the real table/tr/td sometime this week. As soon as I have it working (or when I at least have some part of it working) I'll open source it right away -- as a gist or as a quill plugin.. @2Pacalypse- I don't think this is going to work -- it'll probably just rewrite the same block item many times over and over again, trying to change the formatting of the same block item where you currently have your selection.\nI think the solution here depends on whether we want for whatever was already selected to end up within the top left cell or not.\nIf we want that -- we need to use quill.format() once. And all the other cells need to be inserted after the closest \\n to the right directly via the delta operations by doing quill.updateContents(). \nOr if we don't care about the selected text and just want to add table after the selection (possibly splitting the current block) -- we should just do the quill.updateContents() right away.\nI'd vote for just putting the table after the current selection. In which case the code can look something like this:\n```js\nimport Quill from 'quill'\nconst Delta = Quill.import('delta')\n// suppose we have this.quill\naddTable (columns, rows) {\n  let range = this.quill.getSelection()\n  if (!range) return\n  let tableId = 'table-' + Math.random().toString(36).slice(2) // dirty random id\n  let changeDelta = new Delta().retain(range.index + range.length)\n  for (let i = 0; i < rows; i++) {\n    let rowId = 'row-' + Math.random().toString(36).slice(2) // dirty random id\n    for (let j = 0; j < columns; j++) {\n      changeDelta = changeDelta.insert('\\n', { 'table-cell': {rowId, tableId} })\n    }\n  }\n  this.quill.updateContents(changeDelta, Quill.sources.USER)\n}\n``. @2Pacalypse- On the second thought though, the ideal behaviour would probably be to insert the empty table on the next line (after the nearest\\n` to the right of the current selection):\n```js\nimport Quill from 'quill'\nconst Delta = Quill.import('delta')\naddTable (columns, rows) {\n  let range = this.quill.getSelection()\n  if (!range) return\n  let newLineIndex = this.getClosestNewLineIndex(range.index + range.length)\n  let changeDelta = new Delta().retain(newLineIndex + 1)\n  let tableId = 'table-' + Math.random().toString(36).slice(2)\n  for (let i = 0; i < rows; i++) {\n    let rowId = 'row-' + Math.random().toString(36).slice(2)\n    for (let j = 0; j < columns; j++) {\n      changeDelta = changeDelta.insert('\\n', { 'table-cell': {rowId, tableId} })\n    }\n  }\n  this.quill.updateContents(changeDelta, Quill.sources.USER)\n}\ngetClosestNewLineIndex (index) {\n  return index + this.quill.getContents()\n    .map((op) => typeof op.insert === 'string' ? op.insert : ' ')\n    .join('')\n    .slice(index)\n    .indexOf('\\n')\n}\n``. @2Pacalypse- oh, you are right, I forgottable-cell. But you still need to insert the new line. Since the table cell is the block element, the same aslist`. And all block elements in Quill are marked with the new lines.\nSo it should be:\njs\nchangeDelta = changeDelta.insert('\\n', { 'table-cell': { tableId, rowId } })\nAnd actually another thing which needs to also be addressed is that only having tableId and rowId won't allow us to have lists or several paragraphs within the table cell. \nIf we want to be able to press Enter within a table cell to create a new paragraph, then we should actually add another ID -- cellId. And we need to overload Block's optimize() (and possibly ListItem) to support wrapping themselves into the table-cell -- the same way as table-cell wraps itself into table-row.. Well, initially I implemented it by hiding elements through css. But it leads to the browser spellchecking functionality to work incorrectly in pretty much all the browsers (because the browser still treats the hidden elements as a part of the word).\nSo I ended up implementing a completely different solution. I'm using ShareDB for the OT. What I do now is I store the full document (with tracking changes -- text marked with attributes 'delete' and 'insert') in ShareDB. And I wrote a plugin which transforms update deltas flowing from ShareDB to Quill and from Quill to ShareDB -- to ignore the characters in the full document which are marked as 'delete'.\nSo the Quill renders delta without any 'delete' ops. But any operations you do in Quill, flow into ShareDB with the 'delete' ops in mind (I just add the additional \"whitespace\" ops in places where the 'delete's are located in the full document).\nActually while I have your attention, @jhchen, I want to thank for the great library and the OT design of delta -- it's awesome to work with. \nIt would also be really awesome to hear your opinion on one API proposal I had on my mind for a long time. I think there is need for some kind of a store abstraction in the Quill API.\nWhen dealing with the OT usecases the transformations for the delta flow between Quill and OT-db are pretty common. I would suggest introducing some kind of a \"middleware chain\" of delta transformations tied to the store abstraction. \nFor example I have 3 middlewares like that in my project -- track changes, search, selection.\nI briefly described the track changes transformation above. Search transformation removes the search attribute (it's used for doing the global text search on the webpage) from getting to ShareDB. And selection transformation removes selection attribute (used for showing what other users are selecting in real-time, part of the sharedb-tied multicursor module).\nI think if we have this kind of a store/middleware abstraction in the API it would be much easier to release the standalone OT-oriented Quill plugins. Right now they end up being tied too much to the implementation details of a particular end-project.. ",
    "wells": "I think <thead><th></th>...</thead> will need some love in all this. Some people will want to use this sort of thing against GFM.. ",
    "danielschwartz": "@rikh42 I'm pretty sure you'd be a hero to the Quill community if you open sourced the code for your table implementation (even if it's not something that's mergeable back into Quill right now). \nI know I'd be happy to work on it in the open, and it sounds like you'd have plenty of other people willing to help out! . @dmitryuv I think for any Table solution to be considered complete (and think about being folded into Quill core) @jhchen (and correct me if i'm wrong) is likely going to be able to want a Table solution where you can do:\njs\nlet contents = this.quill.getContents()\nthis.quill.setContents(contents)\nAnd have the document look exactly the same. \nIn addition to the above constraint, you will likely have to be able call compose and transform without the Table being completely overwritten by any one change. Meaning User A should be able to enter text in Row 1, Column 1, and User B should be able to insert text in Row 1, Column 2, simultaneously, and the transform or compose operations on the Delta should correctly insert both changes. . I\u2019ve been an avid Quill user for years at this point, and have been following this thread for a while. Table support is important, we all know it, we\u2019ve all been clamoring for it, and yes sometimes it\u2019s been frustrating that it\u2019s not officially supported yet. \nHowever, @KrisMerckx, please rethink your approach to open source projects and how you interface with the implementing team. @jchen and the rest of the contributors of this fine project owe you absolutely nothing, and the fact that we get such an amazing and extensible editor that \u201cjust works\u201d out of the box, is nothing short of astounding. No one made you choose Quill. No one made you skip over the Formats section of the website. And certainly no one made you spend hours implementing it without reading the docs thoroughly. It\u2019s replies like yours that make people rethink open sourcing things. \n@jhchen and the rest of the contributing team: You make an amazing piece of software. Just know that there are lots of folks (like myself) who love this project, and appreciate all of the effort and work you put into it. \nAnd if you\u2019re ever in NYC, there\u2019s a round of beers for y\u2019all on me \ud83c\udf7b. @jhchen thanks for the super quick reply on this! Appreciate the clarification on getting the underlying APIs/functionality right and then moving onto performance -- makes complete sense to me (and feels like the correct move).\nExcited to see the performance gains from the changes you mentioned coming in the next beta. Thanks again for the quick response and detailing your thought process on the betas!\n. @jhchen sorry about the delay. Ill likely get a chance to test this sometime this week. Our users have some fantastically long docs so those will provide a great pool of documents to test with\n. @jhchen so I gave this a whirl in my local development copy on the v1.0.0-beta.11 tag: \nI took a document of medium length that we have. In quill it has 667 child nodes (accomplished by calling $('.ql-editor').children.length) and had a very slight slow down, but was definitely still useable.\nI also took the longest document we have. In quill it has 7538 child nodes and is completely unusable (the lag on keypresses can approach 5-7 seconds per keypress). While this document is definitely an outlier, I never want document length to be the thing that affects performance (because saying \"well your document is too long, make a new one\" isn't really an acceptable answer to our customers \ud83d\ude04)\nEverything else about the 1.0 version of Quill is incredibly intriguing, so if you think that performance gap can be made up, we would absolutely look at adopting Quill as our editor (and obviously contribute bug fixes/changes upstream). \n. @jhchen yup, ill send you an email with a text file containing the HTML that is copied to the clipboard from our editor (which i'm then pasting into Quill). It might take me a couple days as the document i'm using has sensitive material, so ill have to construct a similar but new document that doesn't include anything sensitive. \nLook out for an email from me in the next couple days or so!\n. @benbro just a heads up, this version of the Authorship causes a weird document state when applying/unapplying formatting (tested on Quill@v1.1.7):\nGiven a line that looks like this: \nhtml\n<p>\n  <span class=\"ql-author-1\">See 2015 Q4 Goals</span>\n</p>\nMake \"See\" bold so that the line now looks like this:\n```html\n\nSee\n 2015 Q4 Goals\n\n```\nThen unbold \"See\" and notice that the line now looks like the following instead of reverting to the initial example:\n```html\n\nSee 2015 Q4 Goals\n\n``\n. @sferoze i'm trying to apply the cursor fix, however am having trouble actually making your code work. You userangyinrangy.getSelection()howeverrangyis not a variable anywhere else in your code. I've tried replacing it withdocument.getSelection()oreditor.getSelection()both of which fail because it's unable to getnativeSelection.anchorNode`. \nAny chance you can look at the code you posted and make sure it actually works and/or post a generalized version?. @sferoze \nAwesome, will try this with rangy. One last question for you: Does the full cursor fix include both the CSS (making spans inline-block) and JS fix, or just the JS fix? . @jhchen thanks for the confirmation on this. Makes total sense. . @cutteroid thanks for pointing me in the right direction. Good to know that I may have to solve these issues myself and then back port them into Quill.\nAny chance you have an example of how you've handled issues like the one i'm describing? Still wrapping my head around the beast that is contenteditable and any examples would be much appreciated.. @benbro took a look at this Authorship module you wrote and had a question: \nIn my testing, binding directly to the TEXT_CHANGE event rather than the EDITOR_CHANGE event, it is fired after the content is already inserted into document tree. Are the modifications that you make to the delta in the Authorship module respected in any other functions bound to the TEXT_CHANGE event because EDITOR_CHANGE is called before TEXT_CHANGE (within Quill core)? If not, i'm having a hard time trying to wrap my head around how the Authorship module modifies the operations of the outgoing delta.\n. Awesome, this is super helpful. Appreciate the quick replies!. @jhchen, @benbro I have this basically working. Ill try and post a PR in the next week or two so y'all can review and let me know what you think. @jchen just created #1217 with my code for marking text. @jchen awesome, ill give this a try and report back. \nReally awesome how on top of this developer community you are. Hopefully I can contribute back with some PRs once I get my custom version of Quill in a stable place. \nThanks again!. @jchen totally fair. Let me close out this PR for now as I don't know how much time ill have to clean it up in the next couple of weeks. Ill open up a new PR once I have something more well tested. Thanks!\n. @think2011 if it's a feature that natively specific to the A tag, then you will have to use a modified A tag for whatever custom blot you'd like. I'm sure there's a way to hack it into Quill core, but that feels like a heavy modification just to get this behavior. . If you look at the standard inline blot format from Parchment (which Bold is a subclass of), there is nothing that dictates when it is on or off. Quill core (the part of quill that binds to the contenteditable div) is the part that affects whether a format is currently enabled or not.\u00a0\nYou could technically hook into the SELECTION_CHANGE event and look at the node immediately preceding the cursor, and if it matches your custom blot, disable the format by using the Quill API, but again, that feels like a very heavy way to accomplish this when you could simply base your Blot of the A tag and have it happen automatically.\u00a0\n--\nDaniel Schwartz\nOn Wed, Jan 11, 2017 at 9:29 AM \"\u66fe\u6d69\"\n<\nmailto:\n\nwrote:\n\na, pre, code, a:link, body { word-wrap: break-word !important; }\nhttps://github.com/danielschwartz\nif I click cancel format and start input, is the result I want.\nhttps://cloud.githubusercontent.com/assets/3961388/21839205/751bab42-d811-11e6-8dba-c33087383bbb.gif\nso I try to read source code\nhttps://github.com/quilljs/quill/blob/develop/formats/bold.js\n, but I did not found any effected code..\n\ud83d\ude33\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly,\nhttps://github.com/quilljs/quill/issues/1232#issuecomment-271882407\n, or\nhttps://github.com/notifications/unsubscribe-auth/AAe2WUGhhswd4FfJlDDFp3602QdZ_nmTks5rROdSgaJpZM4LZ3WF\n.. ",
    "2Pacalypse-": "Hey @cray0000 do you mind posting any code that you've been hacking on related to this? I'm also working on it, but my experience with Quill is still quite limited, so having some reference code to compare my work with would be very helpful.. Thanks!\nI've been following your design outline that you wrote above and I think that's a good way to structure the code. However, there are a couple of things that needs clearing up. What should be the blot types of table, table-row and table-cell formats? In my code, I've made table extend the Container blot (same as list), table-row extends the Block blot and table-cell also extends a Block blot. I've tried making both the table and table-row a Container blots, but bad things happened :d.\nAnother thing that I'm still trying to decide is how to insert an initial table. Most text editors allow you to specify on the toolbar the number of columns and rows you want and then the table of those dimensions is created. I wanted to do something similar in my code (for now I'm just hardcoding the number of columns and rows, but later on will focus on creating some nice popup for handling the tables).\nAnd the last thing which I'd really like if someone can clear up for me is which methods exactly do we need to override in our table blots to make the tables functional. Only create, formats and optimize? Is there some set of methods you need to override to achieve a specific functionality? Parchment's docs are kinda hazy on this.\nAgain, thanks for your help. I'd really like if we could collaborate on this to make the table support in Quill a very near reality! ^^. Let's assume it's possible for a user to select in the toolbar that they want to insert an empty table with N columns and M rows. Can we try to figure out how this could/should be done with the existing API.\nSomething like this maybe?\njavascript\n// Assume this is the handler that gets called when a user clicks 'Create table' in the toolbar\nconst insertTable = (columns, rows) => {\n  const tableId = 'bbb'\n  for (let i = 0; i < rows; i++) {\n    const rowId = i + '-aaa'\n    for (let j = 0; j < columns; j++) {\n      quill.format('table-cell', { rowId, tableId }, Quill.sources.USER)\n    }\n  }\n}\nThen @cray0000's design takes effect and each cell wraps itself in appropriate row, and row into a table. Feedback is welcome.. Thanks a lot for the feedback. I'm still very new to the Quill, so any help is appreciated ^^. I think I understand how that code can work, although shouldn't this line actually insert table cells instead of a new line?\n\njavascript\nchangeDelta = changeDelta.insert('\\n', { rowId, tableId })\nSomething like this perhaps:\njavascript\nchangeDelta = changeDelta.insert({ 'table-cell': { tableId, rowId } })\nWhen I do that in my code, it actually works and it inserts a correct number of table cells in the editor. But this is the part where I struggle with Quill's internals a bit, to make sure each table-cell properly wraps itself into a table-row parent. Any ideas on what's the best way to achieve that?. Yeah, that makes sense.\n\nI'm struggling a bit on writing the code which should wrap table-cell into the table-row. I've managed to create a parent table-row element and correctly set its children to the appropriate table-cell elements. But this is all on the level of the Parchment's document model. Not sure how to apply that to the actual DOM as well.. Nice!\nWill go over your code and see if there's anything I can help with :). Hey @cray0000, could you please clarify this part a bit more:\n\nIf we want to be able to press Enter within a table cell to create a new paragraph, then we should actually add another ID -- cellId. And we need to overload Block's optimize() (and possibly ListItem) to support wrapping themselves into the table-cell -- the same way as table-cell wraps itself into table-row.\n\nWhat would the condition be to check if a Block blot should wrap itself into table-cell?. Also, do you (or anyone else) might have an idea what can cause this error:\nUncaught Error: diff() called with non-document\nIt happens when a delta operation doesn't have an insert property in certain cases, but not sure what those cases are exactly.. One last question (for now ^^):\nWhy does quill.getLeaf() method returns a TableCell blot even though when I inspect that blot, it has a Break child. Shouldn't the quill.getLeaf() method return the actual leaf at the particular index, which in this case would be the Break blot?\n. I also made my own version of the tables support. You can see the demo here: http://galaxy.fesb.hr/quill/index.html\nSource can be found here: https://github.com/2Pacalypse-/quill\nFor now it inserts a default 3x2 table, with the ability to insert new rows before the one currently selected and it's also possible to insert new columns to the left of the one currently selected. The plan is to work on a better toolbar support for working with tables next. Few notable things that are missing and will hopefully be added soon:\n- properly handle various keys: delete, backspace, ctrl+z, ctrl+y, etc.\n- support thead/tbody/tfooter\n- pasting tables from word/excel\n- inserting table over selected content should move that content into the table in such a way that tab separated content goes into their own columns and \"break\" separated content goes into each row\n- merge/unmerge cells\n- modify cell border: color, width, style...\n- etc.. @dmitryuv \n\nRegarding your question in the code - i don't think merging tables is a good idea, people might not want this to happen especially if there's no way to \"unmerge\" them.\n\nYeah, will probably take that out for now. But I do think that in future it might be useful to have an option to merge two tables together (and of course be able to unmerge/undo it).\n\nOne thought - having all 3 attributes with repeatable values seems excessive, do you think it's possible to roll them up into just plain 3 (cell, row, table)?\n\nThis is something I was wondering about as well. I was hoping that someone with more experience with Quill and Delta internals would be able to shed some light on. It feels with the approach I took (which is actually @cray0000's approach outlined above ^^), it would be pretty hard to do since we have 3 separate blots all being inserted. And each of them needs to have a way to be able to say where they belong, eg. a cell needs to know which row and table it belongs to.\nThe way it is now makes it pretty easy to get rowId and tableId for each cell, but thinking about it further, I guess we could make the delta a bit more succinct by only making each blot have their respective id. So it would look something like this:\njavascript\n{\n  \"attributes\": {\n    \"table-cell\": {\n      \"cellId\": \"cell-oi1sibyxp4dbl3a1j8v5kx1or\"\n    },\n    \"table-row\": {\n      \"rowId\": \"row-e6jj7821yfms4fn0topskmx6r\"\n    },\n    \"table\": {\n      \"tableId\": \"table-mbgxs12ydrji1bpv1ujl9pb9\"\n    }\n  },\n  \"insert\": \"\\n\"\n}\nThis way, each time you need to get tableId for a particular cell, you would need to do cell.parent.parent and then get the tableId from the table blot. But yeah, I think that's actually the better way to do it and having the delta be as optimal as possible is very important. Thanks for the feedback!. ",
    "dmitryuv": "2 cents on the overall idea: i support that having TD's based on actual text rows is a right way, but thinking one step further - there's more work for collaborative environment. For example, common problem to solve is - two persons editing document at the same time, first inserts row, second inserts column. The OT implementation should be aware of tables to handle this properly, for ex. there should be special operation like \"insert row at line X\" that will behind the scenes will insert proper number of '\\n' with TD attributes at specified location, instead of just multiple insert operations.  Since i'm very new to Quill, i'm still researching how Delta generation works and if it's possible to have proper Delta representation that will help handling this.. @danielschwartz that's all achievable with proposed solution as cell content is technically equal to list item, with different outside wrap. But it won't survive transform(\"insert column\" against \"insert row\")  operation without special table-aware logic. That's my point :). @2Pacalypse- that's pretty clever way, great job! Regarding your question in the code - i don't think merging tables is a good idea, people might not want this to happen especially if there's no way to \"unmerge\" them. One thought - having all 3 attributes with repeatable values seems excessive, do you think it's possible to roll them up into just plain 3  (cell, row, table)?. @WinstonFassett i like it, in my case i don't need nested tables so easier solution is preferable. I'd add problems with lists to the issues, but overall looks good. Do you plan to keep working on this?. @jhchen thanks for the update. I see you point regarding newlines, however it's a bit unexpected behaviour comparing to other products. I would agree on having Enter to move cursor below table, but naturally hitting \"Enter\" after filling column on the first row results in bad UX. \nSolution? Right now if you create new row above table, there's no way later to remove it (try yourself). Could it be a solution if you automatically create the same editor state when first inserting table into the topmost position?\nRegarding multiline - i think this should be fundamental decision and not a separate feature request. For example if you decide to NOT support it, all line-based formats should be automatically disabled once you're in a table. Also any copy&paste should be properly sanitized \nBug or not-fixable?: You can create wrapped line by typing too many text, but it's hard to navigate it for edit. \"Down\" key moves you to the cell below instead of one wrapped line below. I've seen such behaviours in other editors before if navigation on wrapped text is not explicitly supported.\nBug or intent?: if you apply any row-level format to the cell, it breaks table into separate tables. Any combination of copy&paste of selection that includes tables and row formats create unexpected results. I could get the pattern after few samples but for end user that could be unexpected.\nHowever, if split table behaviour is by design, i can see it might be a good enough solution with proper UX feedback.\n. happens always on Quill playground at the homepage, Mac with Chrome 56. ",
    "dost": "We would also like to help with adding tables to quill for our project.\nFollowing discussion here by @cray0000, @2Pacalypse- and @rikh42 we kicked out this solution so far: https://github.com/dost/quilljs-table\nSince it actually generates tables, html code and delta well, it looks like good start so we would like you all and some day even @jhchen to look at it and help us to put it all together :)\nThanks to you all for code and inspiration.... there is live demo on server for quick preview: http://quilljstable.timepress.cz/quilljs-extended-toolbar/contain.html. ",
    "dons20": "@dost That's a pretty clean table editor. Most of my suggestions are seen within your \"Known Issues\" on the repo. I think it should also be able to delete a row, or delete a column at the click of a button. I'm pretty interested to see it take off.. @dost That's a pretty clean table editor. Most of my suggestions are seen within your \"Known Issues\" on the repo. I think it should also be able to delete a row, or delete a column at the click of a button. I'm pretty interested to see it take off.. Any further progress on this? Would like to see this feature implemented officially.. Any further progress on this? Would like to see this feature implemented officially.. I went ahead and created a GIF of the bug. Note that after I deleted the text from the editor, I was trying to type repeatedly, but it would only resume typing when I clicked the editor.\n\nQuill bug on Firefox. I went ahead and created a GIF of the bug. Note that after I deleted the text from the editor, I was trying to type repeatedly, but it would only resume typing when I clicked the editor.\n\nQuill bug on Firefox. Not sure if this will help, but when creating a custom component, you usually have to create an embed var. The location where you import it from will determine if it's inline or block.\nIf you want it to be inline, use this var Embed = Quill.import('blots/embed');\nIf you want it to be a new block, change it to Quill.import('blots/block/embed')\nCheck this answer on Stack Overflow for some more help (assuming you're trying to do the same thing). Not sure if this will help, but when creating a custom component, you usually have to create an embed var. The location where you import it from will determine if it's inline or block.\nIf you want it to be inline, use this var Embed = Quill.import('blots/embed');\nIf you want it to be a new block, change it to Quill.import('blots/block/embed')\nCheck this answer on Stack Overflow for some more help (assuming you're trying to do the same thing). ",
    "WinstonFassett": "Here\u2019s an approach that doesn\u2019t require generating IDs, but instead uses embeds for row and cell \u201cbreaks\u201d to identify TRs and TDs that need to be rendered as separate elements.  \nhttp://jsbin.com/defixum/edit?js,output\nThe advantage here is that you don\u2019t have mess with ID book-keeping at all.\nConceptually, the structure of a table delta is \ninsert \"Row 1 Col 1\"\ninsert \"\\n\", attributes: { td:true }\ninsert { tdbr: true }\ninsert \"Row 1 Col 2\"\ninsert \"\\n\", attributes: { td:true }\ninsert { trbr: true }\ninsert \"Row 2 Col 1\"\ninsert \"\\n\", attributes: { td:true }\ninsert { tdbr: true }\ninsert \"Row 2 Col 2\"\ninsert \"\\n\", attributes: { td:true }\ninsert { trbr: true }\n\nCaveats: \n This was an experiment and isn't being used anywhere, so YMMV.  I just wanted to explore an approach that didn't require ID book-keeping and see if anyone else is interested in the same.\n It\u2019s cobbled together from https://github.com/dost/quilljs-table and https://github.com/2Pacalypse-/quill.  Thanks!\nIt has decent parity with https://github.com/dost/quilljs-table in terms of features and open issues, except that it doesn\u2019t do nested tables as you can do when using explicit table IDs\n\npaste HTML table works\nno TH support yet\nundoing table commands has messy results\n\n. Thanks @dmitryuv, \nI will look into the list issues.  I did try pasting a list into a cell and it worked but had problems on enter, so perhaps the issue can be fixed with keyboard handlers.\nThis isn't for my day job and I'm still proving out the approach, so I hesitate to publish in anything more formal than gists/jsbins.  However, I'm pretty committed to quill in my side project and am keen on this feature, so I will keep moving it forward as time permits until I settle on an implementation.  . I think I got lists working, although I had to make a small change to bubbleFormats in Quill.js so that attribute ordering is preserved in a top-down manner.  \nUpdated demo: http://jsbin.com/defixum/6/edit?js,output\nThe attribute ordering matters when you have a block that is both a td and a list.  Things work as expected if the td attribute is first.  However, the current implementation of bubbleFormats appends things bottom up, so that the TD is always last.  \nChanging from extend(formats, blot.formats()) to extend(blot.formats(), formats) seemed to fix most of the issues with lists in tables without making any changes to the actual table code. \nThis might also fix the same list issue in quilljs-table.\n. ",
    "emmanuelmillionaer": "Hi! \ud83d\ude42  @WinstonFassett you made fantastic progress on the Quill-JS table feature. \ud83d\udcaf \ud83e\udd47  \nDid you further continue on your implementation? \ud83d\ude42  Could I somehow help within a Git-Repository? because I really like your approach and would like to make an impact \ud83d\ude42   Above you mentioned, undoing table commands sometimes have messy results. I'm eager to make that work! \nThank you so much, you started something amazing! \ud83e\udd47 \ud83d\udc4f . ",
    "Theopt": "Impressive work I've seen so far from everyone on the Quill Table support. Is it safe to assume this will not come out of the box from the development team? Last repo I saw was updated 5 months ago now.. @seandearnaley That was exactly what I meant back there. I hope you guys make it because it is so much lighter and easy to use than everything else I've found so far, and to be honest all I need to use it in production is the tables part now : ) Unfortunately I'm trying to replace some parts of a legacy product and I'm on a time schedule. Most likely be using CKEditor for this rollout. Will keep an eye on Quill for sure.. ",
    "seandearnaley": "@jhchen I think @Theopt is referring to the repos discussed in this thread, work on tables seems to have come to a halt and the solutions here are too half baked to use in production.    I do agree that there needs to be more contribution and discussion but IMHO work needs to be done to the core features to make it easier to develop features like tables... there seems to be a reluctance to accept things are actually needed.... maybe we can start with figuring out the roadblocks that preventing this particular feature from moving forward?   \nI have been working with the quill.js platform for about 2 months, I'm not the greatest coder in the world but have been one for over 20 years, I've read through the quill.js, delta and parchment codebases and I still have trouble with most of my extension efforts...  in particular the lack of support for nested blocks(and deltas) and the handling of breaks to be particularly troublesome.... when I originally investigated solutions based on quill.js I was lead to believe extensions would be straightforward, looking at a lot of community code, it's alarming how much of it is incomplete... a lot of devs seem to drop support for the delta format and just use html, which is obviously a step backwards....   \nThere is definitely an issue with guides, the medium guide is good but we need more guides for more complex things involving parchment and delta.... I know guides/docs are on the roadmap, there are apparently no plans for table support, I hope there are plans to make developing tables easier because nobody seems to be having any success with this (solutions are incomplete, and not actively being worked on, there isn't very much community code out there considering this is supposed to be an API driven application).   I appreciate everyone's hard work and I hope quill.js has a bright future, as long as I'm working with it, I will help wherever I can but I would like to see some light with several features that have been talked about for several years now.. tried the codepen solutions here, which are not bad but all seem to have issues with saving and the delta format, I always get corruption would be nice to have official support for this.. are there any plans to add this functionality to quill.js?  or are there any plans that make this extension doable by an average coder without rewriting the delta format?   Note the solutions presented here do not work with the delta format and the way \\n is approached in delta makes it extremely confusing to even know where to begin to extend... overriding break causes havoc understandably.. also padding-top to 0px with P is not an acceptable solution, without break support in blocks you can't create a simple div with a border where you can edit it's contents..., because you can't put P tags (blocks) inside blocks so no new lines.  Specifically those <p><br/></p> breaks , we need support for just <br/>. I've also spent a remarkable amount of time trying to get an editable figure figcaption to work and its really been disheartening... I've been unable find any solution that works let alone practical solutions.  It seems like all the most obvious things you'd extend Quill with are incredibly difficult to implement.. I kinda figured this out, I have to extend the value method with the innerText value, if there is a better of way doing this kind of thing let me know, but this is fine:\n```\nclass EditModuleBlot extends BlockEmbed {\n  static create(value) {\n    let node = super.create();\n    node.setAttribute('style', value.style);\n    node.innerText = 'test test test';\nreturn node;\n\n}\nstatic value(node) {\n    return {\n      style: node.getAttribute('style'),\n      text: node.innerText //now text will show up in the delta\n    };\n  }\n}\n```. not really, I call my new quill in an es constructor the standard way, I'm developing a universal plugin, which is designed to run in a Vue.js env and a old school jquery app with a script tag... after the new Quill declaration I attempt a simple:\ndocument.querySelector('.ql-' + option).innerHTML = icons[option];\n(I'm using an svg loader to apply the raw svg icon), in the jquery app, document.querySelector('.ql-' + option)   is undefined, if I wait a moment it becomes available leading me to believe I have a synchronization problem.\nI have a hacky workaround that works listening for the first editor-change event:\n```\n//NOTE: hacky way to determine to load additional toolbar options,\n//the first editor-change event indicates quill has loaded.\nlet toolbarLoaded = false;\n\nthis.quill.on('editor-change', (event) => {\n  if (!toolbarLoaded) {\n    this.addToolbarOptions(additionalToolbarOptions[0]);\n    toolbarLoaded = true;\n  }\n});\n\n```. sorry, perhaps this is beyond my limited comprehension- but I still have an issue:\nto be clear:\n```\nthis.quill = new Quill(editorContainer, {\n  // debug: 'log',\n  modules: {\n    history: {\n      delay: 1000,\n      userOnly: false\n    },\n    toolbar: {\n      container: toolbarOptions.concat(additionalToolbarOptions),\n      handlers: {\n        undo: (value) => {\n          this.quill.history.undo();\n        },\n        redo: (value) => {\n          this.quill.history.redo();\n        }\n      }\n    }\n  },\n  scrollingContainer: scrollingContainer,\n  placeholder: 'Compose an epic...',\n  theme: 'snow'\n})\n\nvar toolbar = this.quill.getModule('toolbar');\n\ndocument.querySelector('.ql-undo').innerHTML = icons.undo;\n\n```\ndocument.querySelector('.ql-undo') is undefined, presumably because it has not been rendered yet.. sry again, the line: \ndocument.querySelector('.ql-undo').innerHTML = icons.undo;\n\nis what sets the undo button svg, I'm trying to add the button myself, and the toolbar container doesn't exist in the dom yet.\n. also the ql-undo button is created by quill in the definition, it is simply the icon that is not added... the query selector line is to embed the svg in the button, which quill does create.. @benbro  FYI\nhttps://codepen.io/SDearnaley/pen/zzPmwK\nthe technique works fine--- and in codepen is np... but I am finding situations where the toolbar hasn't run yet and that's why i had to devise this hacky solution:\nhttps://codepen.io/SDearnaley/pen/KqyGqP\nthis seems to be real issue to me.. BTW I'm aware blocks can't be nested (tho that would make life far easier), but a newline here appears to make a new block element automatically, maybe there is some way to stop that?. I've been working on this issue for a few weeks and I cannot get past how quill handles breaks,  in order to do anything like this we need support for breaks with shift-enter, there doesn't seem to be any way to do this with this properly, it's extremely frustrating that I cannot use br tags for new lines:\nhttps://github.com/quilljs/quill/issues/252. @jhchen thanks for your response... unfortunately I dont think this is going to be possible... I've gotten into keyboard handling and although I can prevent a return, I cannot enter a new line because breaks get wrapped in p tags, which are block elements which automatically get spliced into the next block... I thought I could address this with a soft break like most other editors but that also is not possible...  I've read the discussion about tables and shift-enter support in detail and I've looked at most of the parchment code base.... there is no good way to capture br's inside a div with the delta format.... I really think the inability to nest blocks coupled with no good way of handling breaks (or soft breaks) seriously hinders our ability to extend quill... I really can't do much beyond class styling....   there seems to be some reluctance to address shift-enter/soft-break which I don't understand, it seems extremely necessary, in the 2 years of discussion the most popular solutions don't work with the delta format or involve styling p tags which notably cannot be nested.. or dreadful hacky overriding of the break blot, this is true for the table solutions too--- its true even for simple things like editable captions, nobody seems to have come up with an acceptable solution in a very long time and that is concerning.....\nI wrongly assumed a simple div blot would've been easy... turns out it's extremely difficult, no breaks, no nested blocks.... so no layouts at all and hard to edit content with the return key creating new blocks.  I'd be prepared to write these features myself but the code seems intractable, there needs to be a clean way to handle breaks and a cleaner way of dealing with lines in the delta format so that we can do things like tables or any kind of nesting.\nalso I need to add the code I've written above is already based on lists which notably don't have to concern themselves with breaks in the same way.  In the example I've given, return creates new list items just like it creates new columns, we need to be able to make new lines inside blocks, so breaks or a least soft breaks need to be supported.. @astr0junk unfortunately I still haven't made any progress on this, the best I've been able to do is prevent the return key from firing.. and actually progress has halted because version 1.3.1 of Quill has changed the behavior of embeds and my experiments no longer work... Quill is all of a sudden reconciling everything in an embed where as it just ignored embed contents before...  it would be great to get some movement on this but I watch this board daily, unfortunately it's all crickets on these issues... and posts deemed not constructive get deleted which makes it very hard to ascertain the real issues people have- I don't think it's constructive to delete issues.   \nI like quill but it is unreasonably difficult to extend, to me its problems are a) lack of support for blocks in blocks/ nested data model   b) how breaks are handled which prevents break extensions (and prevents workarounds for blocks in blocks)  c) lack of guides/documentation to help us understands  parchment and delta better so that we submit some PR's...  I am 100% willing to help contribute but it's very difficult to know where to start, I think it's unfortunate because Parchment seems awesome but with those restrictions I actually dont see the point of the abstract document model, it has only been a hindrance to all my efforts, you cant really do anything advanced with it unless you drastically modify the core/ which to me is not viable, if I have to write thousands of lines of hacks, its really smarter to find an alternative solution or write a custom one from scratch.   I have gotten stuck with intractable logic for every single extension I've written.\nQuill is good at simple comment boxes and things like that, but for more complex layouts, you really have to bend it over backwards in its current form.... again, not being critical of anyone, just desperately want some to see some light on these issues.. also I should add, my company even has funds available to sponsor development on these features, if someone thinks they can solve the blocks nesting and break handling logic problems  and put that in a pull request to update the core, please get in touch.. @renish123123 if you look at the parchment docs the section describing Embed Blots explains: \"Its corresponding DOM node will often be a Void Element, but can be a Normal Element. In these cases Parchment will not manipulate or generally be aware of the element's children, and it will be important to correctly implement the blot's index() and position() functions to correctly work with cursors/selections.\"\nI didn't notice this myself when I first started with Quill... but it's become a real problem, range isn't going to work inside the embeds, it'd be great if there were some way to have embed's take selection into account, it'd also be nice to be able to make editable blots inside embeds, I've made some attempts to workaround selection but I can't even get keyboard handling to work effectively, a return tries to make a new block element and backspace doesn't work properly either.  It's extremely hard to extend.\n. This code no longer works the same, figcaption doesn't get added to the html, it did in the previous Embed\n```\nclass ImageWithCaption extends Embed {\n  static create(value) {\n    let node = super.create(value);\nconst img = document.createElement(\"img\");\nimg.setAttribute(\"src\", value);\n\nconst caption = document.createElement(\"figcaption\");\ncaption.innerText = 'test';\n\nnode.appendChild(img);\nnode.appendChild(caption);\nreturn node;\n\n}\nstatic value(node) {\n    return node.childNodes[0].getAttribute('src');\n  }\n}\n```\nto be clear this used to work without requiring figcaption to be a blot, and without span guards on every element, surely quill should not be affecting the internals of an embed?. @jhchen this report is very clear, I am aware you're free to do whatever you like, that is not the point. but I will spend more time later with clear examples of how this API broke from 1.3.0 to 1.3.1, I'm also going to document the issues on other sites.. You can't nest block level element within block level elements in quill.js, it's one of its biggest gotchas, effects most people that try to extend it.. You can't nest block level element within block level elements in quill.js, it's one of its biggest gotchas, effects most people that try to extend it.. did you put a <p> tag inside a <div> tag?. did you put a <p> tag inside a <div> tag?. yeah I've found it automatically splices block level elements into the next in line block on the same level so its not surprising how it renders, could you paste the html you get from quill.root.innerHTML. yeah I've found it automatically splices block level elements into the next in line block on the same level so its not surprising how it renders, could you paste the html you get from quill.root.innerHTML. ",
    "GarrettGeorge": "I added on some functionality to @WinstonFassett's work on tables. \nHere it is in a repo. Just open the body.html to load. \nSo much thanks to @WinstonFassett because without his work on the actual Parchment objects and low level stuff I wouldn't have been able to add my UI aspects.\nI added tab functionality inside tables, so if you're in a cell it'll go to the next one and vice versa for shift+tab. If you're in the last cell of the table and hit tab it'll add a row, so that's fun. The only time it doesn't go to the next cell is when you're in the very first index of the first cell. This is mostly l likely due to my algorithm for finding the next td.\nAlso added some css to make the table cell's equal width. This is for my planned update where I add some ability to resize akin to Word and Google Docs. \nI also made the <p>'s inside table cells vertical-align: top because it made more sense, imo. Feel free to change it. \nMost work could be done to the functions to improve them/clean them up. Outside of that from a potential PR perspective lots of work needs to go into figuring out how exactly to make tables work with the stack. undo/redo doesn't work at all really. Redo'ing a row add creates a new table entirely.. @javiercbk check out my work with some of the UI for tables. Github. I was struggling with the Parchment/DOM based interactions and coding, but I was able to figure out some stuff for navigating them as a user.. ",
    "bubach": "Great work so far, the last version I looked at from @WinstonFassett seemed pretty damn good to me.\nMoving forward I think the Resize-module from kensnyder's image-resize plugin could be useful. The idea of overlay controls inside the editor is also something that could come in handy  for adding cols/rows or opening up a settings modal.\nhttps://run.plnkr.co/k0LyTIn6BfFLuemu/\n\n. ",
    "javiercbk": "I need this feature so badly that I'm going to start working on it, but reading the article that @benbro pointed out I see that table support is coming in version 2, which leaves me with further questions: \n\nIs there a definition of how the table support should work?\nIs anyone actively working on this feature so we can join forces?\nShould I contribute on master or in the version 2 branch?\n\nI need this feature for my work, so I will be working on supporting tables either on my own branch or collaborating with other developers (probably I will be checking out other repositories to see what has been developed so far), any suggestions or guidance? \nPersonally I like how summernote handles tables, so I am going to implement something similar.. I need this feature so badly that I'm going to start working on it, but reading the article that @benbro pointed out I see that table support is coming in version 2, which leaves me with further questions: \n\nIs there a definition of how the table support should work?\nIs anyone actively working on this feature so we can join forces?\nShould I contribute on master or in the version 2 branch?\n\nI need this feature for my work, so I will be working on supporting tables either on my own branch or collaborating with other developers (probably I will be checking out other repositories to see what has been developed so far), any suggestions or guidance? \nPersonally I like how summernote handles tables, so I am going to implement something similar.. Hey @jhchen, I've seen this commit you made a while back. I'm using a similar approach.\nWould care to comment on that? Is that a good idea?\nI'm using another this repo and creating tables in a similar fashion. Any comment on that?\nThanks\nEDIT: In on of @jhchen comments he says that he posted something about how to implement tables. Does anybody knows where that post is?\nEDIT 2: I'm also taking a look at @2Pacalypse- work. Hey @jhchen, I've seen this commit you made a while back. I'm using a similar approach.\nWould care to comment on that? Is that a good idea?\nI'm using another this repo and creating tables in a similar fashion. Any comment on that?\nThanks\nEDIT: In on of @jhchen comments he says that he posted something about how to implement tables. Does anybody knows where that post is?\nEDIT 2: I'm also taking a look at @2Pacalypse- work. ",
    "KrisMerckx": "Maybe tell this to potential users immediately on YOUR FRONT PAGE. It took me hours to replace my old editor with Quill.... it looked very promising. And suddenly... you see... no table support?????????? Come on, guys???? . Maybe tell this to potential users immediately on YOUR FRONT PAGE. It took me hours to replace my old editor with Quill.... it looked very promising. And suddenly... you see... no table support?????????? Come on, guys???? . Quill is indeed great, but I don't understand why it's removing all h1-6-tags, p-tags, video-tags etc. What's the purpose of an editor when he removes everything he can create? \nOr maybe I don't understand the API enough. How can I prevent most tags from being removed and replaced by a terrible \"div\"?\n. Quill is indeed great, but I don't understand why it's removing all h1-6-tags, p-tags, video-tags etc. What's the purpose of an editor when he removes everything he can create? \nOr maybe I don't understand the API enough. How can I prevent most tags from being removed and replaced by a terrible \"div\"?\n. Put it on your front page: \"NO TABLE SUPPORT!\". Put it on your front page: \"NO TABLE SUPPORT!\". ",
    "whather": "@jhchen I think the biggest issue with lack of table support for us is the formatting not being preserved when pasting in content. For example, pasting in a user's email signature with their name on the left, and their logo on the right and a border in between.\nJust fixing the pasting issue (and allowing tables in the dom) would be a huge win, versus adding support to insert a new table from the toolbar, etc.\nKeep up the good work!. @jhchen I think the biggest issue with lack of table support for us is the formatting not being preserved when pasting in content. For example, pasting in a user's email signature with their name on the left, and their logo on the right and a border in between.\nJust fixing the pasting issue (and allowing tables in the dom) would be a huge win, versus adding support to insert a new table from the toolbar, etc.\nKeep up the good work!. +1, we'd love this\n. +1, we'd love this\n. Oh whoops, yeah they stripped them out. \nYeah wrapping in div's instead of p's\n. Oh whoops, yeah they stripped them out. \nYeah wrapping in div's instead of p's\n. That's actually fine if it unwraps the <div>, I just can't have it throw errors.\n. That worked, thanks for the speedy fix!\n. A config option would be great for this. +1\n. I have the same issue, even on your Full Example on your examples page: http://quilljs.com/examples/\nThese are the issues I'm seeing:\n1) Highlighting text and clicking the link button sometimes shows the link dialog for a split second and then it vanishes.\n2) When the link dialog does stay open, and you give it a link and hit Done, the link doesn't show up in the text area like the video above.\nI'm on Chrome Version 38.0.2125.44 beta (64-bit) on OSX. Any updates on this?\n. Sorry that shouldn't have been included in this PR, will fix\n. ",
    "maikdiepenbroek": "Great work on this so far guys, can i in some way contribute to speed up the release of this feature ?. ",
    "unstoo": "I have implemented support of tables using multiple bloats approach. Tables stay consistent after quill.getContents() : delta -> quill.setContents(delta).\nI'd appreciate any feedback: https://github.com/unstoo/cpay-wysiwyg/blob/master/src-client/TableBlot.js\nThe only question I have is regarding pasteHTML of a table. It parses a <table> down to a funny looking delta[ops]. Would the clipboard module be the right place for fixing tables parsing behaviour or should I look elsewhere @jhchen?\nAlso, can you give me a hint how do I go about disabling enter hits from inserting anything into a table?\nI've tried to add a blank handler to the bindings module, but as a result the behaviour of enter strokes becomes inconsistent.\nkey: 'enter',\n    format: ['table'],\n    handler: function(range, context) {\n      return false\n    }. ",
    "saralnigam": "@jhchen Great work on tables, there were some table layouts which I don't think are valid as per current description. Sharing details for them.\nBrowser: Chrome Version 67.0.3396.87 (Official Build) (64-bit)\nOS: Linux(Ubuntu 16.04)\nInconsistencies in table layout.\nSteps to Reproduce:\n1. Insert Table\n2. Insert Row Above\n3. Insert Column Left\n4. Delete Row\n5. Insert Table\nOutput:\n\nSome other outputs. Repro steps not available for below cases\nCase 1\n\nBubble Delta\njs\n{\n  \"ops\": [\n    {\n      \"attributes\": {\n        \"table\": \"row-dpl2\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-vtlg\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-7bij\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-w7z7\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-b1pp\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-7bij\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-b9gy\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"insert\": \"\\n\"\n    }\n  ]\n}\nSnow Themed Editor Delta\njs\n{\n  \"ops\": [\n    {\n      \"attributes\": {\n        \"table\": \"row-dpl2\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-vtlg\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-7bij\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-w7z7\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-b1pp\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-7bij\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-b9gy\"\n      },\n      \"insert\": \"\\n\\n\\n\"\n    },\n    {\n      \"insert\": \"\\n\"\n    }\n  ]\n}\nCase 2\n\nBubble Editor Delta\njs\n{\n  \"ops\": [\n    {\n      \"attributes\": {\n        \"table\": \"row-o4bv\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-2yy5\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-mb38\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-ye3v\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-bafm\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-omgi\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-sx8i\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"insert\": \"\\n\"\n    }\n  ]\n}\nSnow Editor Delta\njs\n{\n  \"ops\": [\n    {\n      \"attributes\": {\n        \"table\": \"row-o4bv\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-2yy5\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-mb38\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-ye3v\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-bafm\"\n      },\n      \"insert\": \"\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-omgi\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"attributes\": {\n        \"table\": \"row-sx8i\"\n      },\n      \"insert\": \"\\n\\n\\n\\n\\n\"\n    },\n    {\n      \"insert\": \"\\n\"\n    }\n  ]\n}. @jhchen I would love to take this up, what should be the behavior of the tooltip should it be just clickable or should it have edit options as well? Any pointers from your end?. ",
    "KindBear": "Who can say how to use it with npm and React?. I tried to use the quill-table module, but I want to use the built-in module. How do I add options for the toolbar? I could not find how. ",
    "irowbin": "@KindBear  v2.0 isn't available on npm yet.  You've to wait until it officially release to the npm or use dev build at your own risk from https://cdn.quilljs.com/2.0.0-dev.2/quill.js.. ",
    "AdriVanHoudt": "Hi @jhchen, \nWe are looking forward to the release of v2 and the ability to use tables \u2728 \nDo you have a (rough) eta on when it will be there?. ",
    "dearsina": "If you (force) feed an editor a table within a table by manipulating myQuill.root.innerHTML, it doesn't like it.\n<table>\n <tr>\n  <td>\n   <table>\n    <tr>\n     <td>\n      A table within a table fails.\n     </td>\n    </tr>\n   </table>\n  </td>\n </tr>\n</table>\nOtherwise, force feeding works well and I am very excited about the prospects of using tables with Quill. Tables are big part of HTML. Thank you for your hard work, let us know when you're done!. @LFDM I took your idea and ran with it, and came up with the following solution that works for my templating needs. It depends on jQuery (but that can be changed if you don't like jQuery) and assumes you're running Bootstrap CSS, but again, totally optional, however their badge CSS works very well with the templating design.\n```\nvar Embed = Quill.import('blots/embed');\nclass TemplateMarker extends Embed {\n    static create(value) {\n        let node = super.create(value);        \n    node.setAttribute('class', 'badge badge-' + value.colour);\n    //Set up the (Bootstrap) badge, and badge colour\n\n    node.setAttribute('data-marker', value.marker);\n    //The marker is the (hidden) template marker reference\n\n    node.innerHTML = value.title;\n    //The title is what the user sees in their editor\n\n    return node;\n}\n\nstatic value(node) {\n    return {\n        marker: node.getAttribute('data-marker')\n    };\n}\n\n}\nTemplateMarker.blotName = 'TemplateMarker';\nTemplateMarker.tagName = 'span';\nQuill.register({\n    'formats/TemplateMarker': TemplateMarker\n});\n```\nAnd then the trigger function:\n```\n$('.ql-insertCustomTags').on('change', function() {\n    //This is designed to trigger on a dropdown change, replace it with click for a button\nlet range = quill.getSelection(true);\n\nquill.insertEmbed(\n    range.index,\n    //Insert the TemplateMarker in the same range as the cursor is\n\n    'TemplateMarker',\n    //This is the name of the Embed\n\n    {\n        colour: $(this).find(':selected').data('colour'),\n        marker: $(this).find(':selected').data('marker'),\n        title: $(this).find(':selected').data('title')\n    },\n    //These are the variable values to feed to the editor\n);\n\nquill.insertText(range.index + 1, ' ', Quill.sources.USER);\n//Add a space after the marker\n\nquill.setSelection(range.index + 2, Quill.sources.SILENT);\n//Take the cursor to the end of the inserted TemplateMarker\n\n$(this).val(\"\");\n//Reset the dropdown\n\n});\n```\nFinally, here is the dropdown itself:\n<select class=\"custom-select ql-insertCustomTags\">\n        <option value=\"\">Guest</option>\n        <option value=\"first_name\" data-marker=\"first_name\" data-title=\"FIRST NAME\" data-colour=\"warning\">First Name</option>\n        <option value=\"last_name\" data-marker=\"last_name\" data-title=\"LAST NAME\" data-colour=\"warning\">Last Name</option>\n        <option value=\"full_name\" data-marker=\"full_name\" data-title=\"FULL NAME\" data-colour=\"warning\">Full Name</option>\n  </select>\nYou can change the dropdown to be a toolbar menu button, as Quill's implementation of custom dropdowns is, how to say it politely, creative.\nAs an added bonus, here's a function that stores two different versions of the editor output, one as a Delta JSON array that can be used when re-opening the template in Quill, and the other, the HTML output with the markers as they're expected to be written on your backend.\n```\nquill.on('text-change', function(delta, oldDelta, source) {\n    var delta = quill.getContents();\n    var delta_json = JSON.stringify(delta);\n    console.log(delta_json);  \n  // This is what you store in the DB so that you can edit the template later\nvar qdc = new window.QuillDeltaToHtmlConverter(delta.ops, window.opts_ || {});\n// This requires the Quill Delta to HTML converter js\n\n// customOp is your custom blot op\n// contextOp is the block op that wraps this op, if any. \n// If, for example, your custom blot is located inside a list item,\n// then contextOp would provide that op. \nqdc.renderCustomWith(function(customOp, contextOp){\n    if (customOp.insert.type === 'TemplateMarker') {\n        let val = customOp.insert.value;\n        return val.marker;\n    }\n});\n\nvar html = qdc.convert();\n//Convert the Delta JSON to HTML\n\nconsole.log(html);\n//This is what will be used to render the template\n\n//You also need to store this in your DB\n});\n```\nHere's one I prepared earlier:\nhttps://codepen.io/dearsina/pen/GBOpPy\nHope this saves someone a day of scavenging around the internet trying to cobble together a solution!. ",
    "earshinov": "Is colspan/rowspan support in the pipeline?. Is colspan/rowspan support in the pipeline?. @JeffHerb , why would IE become deprecated? As far as I know, it has decent support for tables and contentEditable, at least starting with IE 8 and above.. @JeffHerb , why would IE become deprecated? As far as I know, it has decent support for tables and contentEditable, at least starting with IE 8 and above.. @jhchen , Please, please, please change this\njs\nfunction contains(parent, descendant) {\n  try {\n    // Firefox inserts inaccessible nodes around video elements\n    descendant.parentNode;\n  } catch (e) {\n    return false;\n  }\n  // IE11 has bug with Text nodes\n  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n  if (descendant instanceof Text) {\n    descendant = descendant.parentNode;\n  }\n  return parent.contains(descendant);\n}\ninto\njs\nfunction contains(parent, descendant) {\n  try {\n    // IE11 has bug with Text nodes\n    // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n    if (descendant instanceof Text) {\n      descendant = descendant.parentNode;\n    }\n    return parent.contains(descendant);\n  } catch (e) {\n    // Firefox inserts inaccessible nodes around video elements\n    return false;\n  }\n}\nA try..catch block containing nothing but e.parentNode gets optimized away by Angular compiler:\njs\nfunction g(t,e){return e instanceof Text&&(e=e.parentNode),t.contains(e)}\nAs a result, we still get the error from the issue description.. Ah, nevermind. It is a known issue of the Angular compiler: https://github.com/angular/angular-cli/issues/11439. ",
    "sgiulians": "Hey hello,\nFirst of all thank you for developing quill.js, it's a great library.\nAt the moment I am using the https://cdn.quilljs.com/2.0.0-dev.2/quill.js as I need the table support. It works well so far but I have another question: is it possible to graphically resize the columns by any chance?\nThank you very much\nSimo. ",
    "Jvanbeek": "Hi everyone,\nFor some time now I have been experimenting with Quilljs and I think it works like a charm. For my usecase of the Quill editor I'm in need of the table module that is still in the development branch. Now I was wondering if there is any estimate on when this is going to be officially released. A release window would already be very helpfull. If there is a place where I can find the schedule for the quill editor it would be great if someone could point me in the right direction. If the release of the table module is not somewhere in the near future, is it possible to only add the table module from the development branch or do I have to adopt the development branch as a whole? I'm excited to see what's comming to quill in the future.\nIn any case, thanks in advance and great work on Quill,\nJeroen. Hi everyone,\nFor some time now I have been experimenting with Quilljs and I think it works like a charm. For my usecase of the Quill editor I'm in need of the table module that is still in the development branch. Now I was wondering if there is any estimate on when this is going to be officially released. A release window would already be very helpfull. If there is a place where I can find the schedule for the quill editor it would be great if someone could point me in the right direction. If the release of the table module is not somewhere in the near future, is it possible to only add the table module from the development branch or do I have to adopt the development branch as a whole? I'm excited to see what's comming to quill in the future.\nIn any case, thanks in advance and great work on Quill,\nJeroen. ",
    "olliraa": "Table support is a great addon to the already great features of Quill :) If/when the tables are supported, does this mean the user could paste a copied table from Excel? This is a feature many of so called \"standard users\" have asked. People seem to think that if the data is in Excel it can be copied anywhere without losing any of the formatting :/. Replying to myself :) Copy - Paste from Excel seems to work, meaning that the cells and data are kept in their correct places. Great! :) However, pasting the table looses the borders. Is this something easily fixable? Is there a way to define table border in Quill currently?. ",
    "malek-itani": "@olliraa can you please share with us the code, to know how to implement table feature.. ",
    "JeffHerb": "Just curious, is this going to be an IE feature? Or is IE being deprecated out as of 2.0?. Just curious, is this going to be an IE feature? Or is IE being deprecated out as of 2.0?. @earshinov, just curious because the IE support does not exist for the alpha/beta tables plugin.. @earshinov, just curious because the IE support does not exist for the alpha/beta tables plugin.. ",
    "vikvet": "Hi @jhchen, first of all I would like to thank you for making quill available for community. I am currently using quill 1.3 with tables and trying to merge selected cells. I am fully aware that this feature is not supported, as you mentioned earlier.\nWhat I am interested in, is your insights on how this feature could be implemented. Specificaly, how could I keep value of selected cells and/or how to get value of last cell in selected table.. ",
    "sachinrekhi": "@vikvet Just to clarify, it sounds like you were able to back-port the Quill 2.0 tables implementation to work with Quill 1.3?. In the meantime in Quill v0.20.1, is it true if you call editor._update() manually you'll force Quill to do an immediate DOM sync and get back any delta that has not yet been emitted by Quill as a text-change event? And then this would also skip Quill emitting the text-change event for this specific delta, correct?\n. Oh wow, that is a very impressive performance difference between your two Fiddle examples! Thanks for sharing.\nSo I originally got the list of ops that I'm storing in my back-end from editor.getContents(). I would have assumed that was already giving me back a composed list of operations that was already as minimal as can be? Is that not the case? It sounds like you are suggesting it's not the case if you are composing before storing in your database and seeing a difference in the generated operations pre/post composing in what's actually stored?\n. OK, so I took at look at the specific ops that are performing slowly. I've confirmed that the output from editor.getContents() is in fact 1 single insert operation that is 93K characters long. So it's not an issue of too many operations. And so in this case I don't think that compose() would help in that it would not transform the ops in any way.\nShould I just be expecting than that a file with 93K characters is just going to be this slow? The surprising thing is I timed it the same way you did with a timestamp before and after the setContents call. And it returns about 700ms, which isn't too bad. But the console log output of the timer is displayed well before the actual contents of the editor show up in the browser. I then tried loading the same document in Quill in Safari and Firefox and it loads way faster than compared to Chrome. So maybe I'm actually running into rendering performance issues in the browser, ie. Chrome specifically? Maybe it's because Quill renders it as a single 93K character div with newlines as opposed to paragraph tags?\n. @scottsheffield Sweet! So the new clipboard feature in develop isn't sufficient for your need because you don't want an exact translation, but want to coerce very specifically for your use-case?\nBTW how stable is develop feeling? Debating when to take the plunge to start working against it as opposed to v0.20.1\n. Struggling with this as well because this previous code that worked in v0.21 now just generating Normal, Normal, Normal, Normal, Normal in the drop-down and not actually formatting the size.\n<select class=\"ql-size\">\n  <option selected value=\"14px\">14</option>\n  <option value=\"16px\">16</option>\n  <option value=\"18px\">18</option>\n  <option value=\"24px\">24</option>\n  <option value=\"32px\">32</option>\n</select>\n. I'd suggest adding this to the list of removed APIs in the Upgrading to 1.0 Guide\n. I'm experiencing this issue as well in Chrome 50 on Mac 10.11\n. Hm, the bug behavior here seems to have changed in Quill 1.0 Beta 8. Now when you copy/paste a few bullets, the pasted result now actually has an extra empty bullet (as opposed to before when it was missing the last bullet):\ncopied bullets:\n\npasted bullets:\n\n. That works!\n. I'm running into this issue where the Delta that gets created to represent my custom embed is inaccurate.\nSo I went ahead and copied the Video embed code verbatim, registered my copy on top of the existing version, and noticed that even the Video embed's Delta object is now inaccurate as well.\nTake a look at this codepen: http://codepen.io/sachinrekhi/pen/oLNxxO\nWhen you look at the console, you'll see the video Delta is being represented like this:\n\nSo instead of it being insert: {video: 'url'}, the video key is now being set as part of the attributes.\nLooks like a bug?\n. A separate issue I'm experiencing causes Quill to throw an error when I append a child node in the create method of my custom embed.\nSee this code pen: http://codepen.io/sachinrekhi/pen/xOxVQo?editors=0010\nThe error I get is:\nUncaught TypeError: Cannot read property 'emitter' of undefined\nThe strange thing is if I remove Test.className = 'ql-test' the error goes away and the custom embed renders properly with the child node.\n. Jason also pointed out that the issue with my two codepens above was that I was importing the incorrect BlockEmbed.\nI changed it to the following and both of the above issues went away:\nvar BlockEmbed = Quill.import('blots/block/embed');\n. The proper import statement fixed the 2 issues I was running into, so just need to clarify in the docs the appropriate import statement for doing a BlockEmbed.\n. I just encountered this issue myself in Quill 1.0 Beta 6.\nbundle.js:43989 Uncaught TypeError: leaf.position is not a function\nThis occurs in quill.getBounds()\n(more specifically within call to this.selection.getBounds() within quill.getBounds() call.\nPic of exact offending line here:\n\n. Nope, not yet using any custom blots in the current implementation where I encountered this error. Though possible that some of the other issues I filed were root causes for the structure getting messed up.\n. I'm consistently getting this error now. I set a breakpoint and here is what the local variables are. It looks like the leaf object is of type Block.\n\n. For my case, a workaround that seems to be working is calling quill.update() explicitly before calling quill.getBounds()\nMy guess at maybe what is going on is that quill is in the middle of creating the new dom nodes for a updateContents() call made just before, and then getBounds() is being call in the middle of it, resulting in it picking up a non-leaf node via scroll.leaf.\n. Yup, looks like that did the trick! Thanks\n. Yes, the issue is specifically clicking the link in the tooltip (not the editor)\n. No, the tooltip closes when you click on the link within it, but a new tab fails to open with that url.\n. Added a video to show the intermittent repro case in Chrome 51 on Mac 10.11:\nhttp://cl.ly/0R102J0D2f2x\nCould it be some kind of race condition between when the tooltip closes (removing link from the DOM) and when the link click handler action takes place?\n. You know I thought that might be the case but you'll notice when it doesn't work, you still get the pointer cursor and more importantly, if you look at the browser status bar at the bottom, it does show the link url, which it typically only shows when your mouse is specifically over a clickable link target.\n. Alternatively could you trigger the click on mousedown event to see if that solves it? So attach a mousedown event handler on the link and trigger the click via something like this?\nlet mouseEvent = new MouseEvent('click')\nlinkElement.dispatchEvent(mouseEvent)\n. Personally I'm fine with solving long-click issue on the link (might need to apply same approach to Edit / Save / Remove actions as well) but still having the tooltip close when you don't click on one of the actions within the tooltip. I'd personally rather have that then not have the tooltip automatically hide when the user clicks outside of the editor since that would be somewhat of a hassle when you just want to move on to something else unrelated to the editor.\n. So I was able to use your suggested approach to create a new list attribute value \"checkbox\" in addition to \"bullet\" and \"ordered\" that will then render a checkbox image using a CSS content property instead of a bullet. I'm successfully creating new items in this list type with the rendered checkbox image.\nBut I'm struggling to figure out where and how I should I attach the event handler to handle checking the checkbox. It doesn't seem like I can target an event handler to a :before element. I could target the whole li item, but when they click on the item's text, I just want to focus the editor on the line so they can edit the value of the checklist item as opposed to toggling the checkbox.\nAfter I figure out where to target, then I'm not sure how I go about modifying the list item's value to update the checked state. I could attach an event handler in the static create method, but then I'd need to know the specific index of the clicked element to be able to issue a quill.formatLine() command, but it doesn't look like I have access to that.\nAny thoughts?\n. Thanks for the suggestions, they both helped.\nI ended up moving away from creating the checklist type as an extension of the list type. That's because it kept resulting in checking one list item causing all of the items within the parent list becoming checked as well, given each list item was part of the same list and I was keeping the value for checked or unchecked at the list level.\nI instead implemented the checklist as an independent block-level format with tag DIV and className ql-checklist and still using a :before element to render the checkboxes. This worked a lot better since each checklist item could have it's independent checked or unchecked value that wasn't affected by neighboring items. I used the offsetX approach to decide when the click was on the checkbox, which is a bit brittle because it depends on coordinating the padding-left of the ql-checklist css class with the acceptable offsetX. But overall the checklist is now working great for me.\nI assume you'd be interested in a PR only after 1.0?\n. Putting the text-change handler function within a setTimeout of 1 does now result in getting the correct cursor position.\nHowever, it creates new challenges. Since the text-change handler is now within a setTimeout, calls to quill.update() no longer act in it's desired blocking/synchronous mode where text-change events have fired and processed. Since the text-change handler is now within a timeout, it looks like you can't be guaranteed that the processing of the text-change event has happened on the calls subsequent to quill.update() which is now creating other challenges on OT.\n. I'm trying to get the current cursor position after the text change so I can send the text change and the new cursor position over to other viewers of the doc (remote viewers update with updateContents() and my own implementation of multi-cursor).\nMy workaround now is that I don't wrap the entire text-change handler in a setTimeout (to avoid the quill.update() issues) and instead wrap just the part where i get the cursor in a setTimeout and ship that over to the remote servers separately from the text change).\n. FYI, this appears to be a regression from Quill 0.20.1\n. Oh great. I missed that configuration option. Just applied it. Immediately fixed the left boundary issue. But still seems to have an issue on the right boundary:\n\n. Right overflow issue still exists for me in Quill 1.0 Beta 9:\n\n. Aah yes, looks like it was a specific issue with my setup where the scrollbar was overlapping the tooltip, but the tooltip is in-fact within bounds. Was able to workaround my specific issue. So looks fixed then.\n. Sure. What's the best way for me to test pre-release versions of Quill within my app? For my app I normally just use npm to install specific quill releases (ie. npm install quill@1.0.0-beta.8). I've done Quill development as well via a fork of Quill and just testing within the development Quill test app. But is there a way I can either install the pre-release version via npm or link the development version to my main app?\n. Ok so you do now get the right bounds for a non-indented bullet in Quill 1.0 Beta 9. But the bounds are still incorrect for multiple-levels of indent. Regardless of whether you indent more, getBounds() is returning the position as if it was a non-indented bullet.\n. Yes, I updated the stylesheet as well.\nThe specific issue is when the bullet is empty. Take a look at this code pen: http://codepen.io/sachinrekhi/pen/grvZwv\n. You don't need to do this in Quill 1.0 anymore. Just take out the import and you'll still have access to the link tooltip.\n. They are on npm. Just do npm install quill@1.0.0-beta.6\n. Probably also helpful to document the change in image representation as well.\n. I also noticed that inline formats can no longer be applied to newlines. So if you have bold spanning two lines, Quill 0.20.1 would have produce a single insert operation with a newline character in it with attribute bold:true. Quill 1.0 breaks this up into 3 insert operations: the first for the line content with a bold:true attribute, the next for the newline with no attributes, and the third with the subsequent line content and attribute bold:true.\nQuill 1.0 automatically corrects this when it receives the former input, but may still be useful to document as my migration script needed to take care of this.\n. @dhershman1 are you using Quill 1.0 Beta 8? If so, the fix has not yet been pushed to a new release. Will be in next release.\n. I'm still seeing this issue occur in Quill 1.0 Beta 9 in certain cases.\nSlightly different repro:\n1. Visit beta.quilljs.com\n2. Clear editor\n3. Type \"test\" on the first line\n4. Hit enter & enter\n5. Type \"some code\" on next line\n6. Type \"again\" on the next line\n7. Highlight some code & again lines and apply code block formatting\n8. Attempt to remove code block formatting from the last \"again\" line\n\n. Ya, upon further testing this looks like a very specific limitation in Safari that prevents Cmd+1, Cmd+2, etc from being overriden. It turns out when I try to override other keys from their default behavior, like Cmd+S, it works just fine in Safari. Looks like they have a reserved set that can't be overriden.\n. Aah, good point on Gmail and Google Docs not working as well. Looks like yet another Safari limitation.\nThe format the url is copied into the clipboard from Chrome is very different from other browsers (the others just copy the plain-text URL) and looks like Safari isn't handling the paste well. I assumed you were somehow parsing the clipboard content types yourself, but if not, sounds like it's the browser's limitation.\n. This is fixed in the upcoming Quill 1.0 release, which you can test here: http://beta.quilljs.com\n. I agree the solutions @jhchen is suggesting leveraging either getContents() on a timer or throttling are the right solutions for your use case. Additionally if you only want to send just deltas to the server, you could simply compose the deltas received from text-change locally and then send the composed deltas in bulk based on a timer or throttling.\nDon't think you need to involve the history module to accomplish most of the auto-saving use-cases you could come up with.\n. @benbro keep in mind I'm distinguishing between DELETE and BACKSPACE here. What you are showing should certainly be the behavior for DELETE. But BACKSPACE typically has the behavior I'm describing.\nTry it in this Github issues editor. You'll notice that with DELETE you get this:\ntest|\nagain\nAnd with BACKSPACE you get this:\ntest\n|again\nAlso holds true for Google Docs, Gmail compose window, etc.\n. Oh you are right, I have the names wrong. What's confusing about a Mac is both of the keys actually say \"delete\" ;)\nSo the reality is that BACKSPACE works as expected, but DELETE is not functioning as expected in Quill. I'll update the ticket.\n. From Jason: \"multi-cursor and authorship modules are not being included in 1.0. They are planned to be re-introduced in a future version.\"\nhttps://github.com/quilljs/quill/issues/635#issuecomment-220243661\n. I ran into the same second page issue on print, which I solved through media queries to clean up the outputted content on print to get a nice and clean print.\nI think each application will likely have to clean up the print version via media queries slightly differently given they likely want to clear chrome, other parts of their app, etc so think this might just be something each app needs to take on individually.\n. @jhchen In the commit fix you mention you made a change to the Delta format? Does that mean the rich-text Delta library changed to accommodate this change?\n. Thanks for pointing me in the direction of the regex issue, really helpful!\nIn case anyone else ever runs into this, here is what I discovered regarding not including the first h in my example. It appears that Quill collapses multiple spaces into one. So it turns out when copying from Flickr the snippet had 2 spaces before href=\"https://www.flickr.com/photos/16555999@N00/8708932554/in/album-72157633419841224/\". The addMatcher method provides both the node object and a delta object. The node object includes both spaces but the delta object has collapsed the 2 spaces into 1. Since I am matching the regex against the node object instead of against the delta object, I get the off-by-one issue I am experiencing when I compose my Delta to the delta object that has already removed the extra space.\nI guess then maybe it's a better idea to match against the delta instead of the node to avoid this issue.. @benbro I'm running into this incompatibility issue as well where Quill/Javascript treat an emoji with length 2, but my Python back-end treat an emoji as length 1. This is completely breaking Delta reconciliation due to the lack of matching lengths.\nWanted to check in to see if you ever figured out a workaround given it sounds like you ran into the same issue? At this point I'm thinking of just taking your suggestion earlier of preventing pasting emoji into the editor through a custom matcher. I'd obviously love to find a way to support emoji, but not seeing any easy solutions to match the emoji length issue between Javascript/Python.\nOnly possibility I've thought of is downgrading my server Python version to a \"narrow unicode build\", which I think might then treat emoji as length 2. But seems like a total hack and not sure of other implications of using \"narrow build\" of Python instead of \"wide build\". Regarding preventing emoji, my approach was going to be the following (haven't implemented yet, so let me know if you know of any gotchas):\n1) create a custom clipboard matcher that identifies emoji and then removes it from the applied delta\n2) to prevent insertion from the keyboard, I was thinking you can listen for the text-change event, inspect the delta, identify if it contains an emoji and if it does, then apply a new delta that simply deletes the emoji. this might have a perf hit since  you are inspecting every text-change, but you would rarely actually apply a delta since most of the time people won't be typing in emoji, so maybe the perf hit won't be bad.\nIn both cases you need to be able to reliably detect an emoji character. I was planning on using the emoji-regex JS library in npm, which seems to be able to identify the vast majority of emoji I've thrown on it (and it apparently uses the unicode emoji standard so it should support all emoji). Library here: https://github.com/mathiasbynens/emoji-regex\nWhen thinking through this approach, I thought maybe I could leverage the same overall approach to in-fact support emoji (instead of simply deleting it). The idea would be that when I match an emoji via the clipboard or text-change event, instead of deleting the emoji, I replace it with a custom in-line blot that itself renders the emoji character. The benefit being that custom embeds always have a length of 1 to Quill, so would get over the issue of client & server treating the lengths differently. Might be overkill just for emoji support, but I think it should work right?. FYI, I've got a clipboard matcher now removing emoji on paste:\n```\nimport emojiRegex from 'emoji-regex'\n// remove pasted emojis\nquill.clipboard.addMatcher(Node.TEXT_NODE, function(node, delta) {\n    let index = 0\n    let regex = emojiRegex()\n    let match = null\n    let composer = new Delta()\n    if (delta.ops.length > 0) {\n        while ((match = regex.exec(delta.ops[0].insert)) !== null) {\n            composer.retain(match.index - index)\n            composer.delete(match[0].length)\n            index = regex.lastIndex\n        }\n        return delta.compose(composer)\n    } else {\n        return delta\n    }\n})\n```. That's true, that should work and will also deal with any potential non-emojis that are also of length 2. It doesn't solve for the case if we actually want to support emoji, since in that case you actually want to know whether it's an emoji vs non-emoji.. FYI, using my original approach, I also have a 'text-change' event handler that removes keyboard inserted emoji:\n```\n// add at the bottom of your existing Quill 'text-change' event handler\n// remove keyboard inserted emoji\nlet hasEmoji = false\nlet composer = new Delta()\nfor (let i=0; i < delta.ops.length; i++) {\n    if (delta.ops[i].insert !== undefined) {\n        if (typeof delta.ops[i].insert === 'string') {\n            let regex = emojiRegex()\n            let index = 0\n            let match = null\n            while ((match = regex.exec(delta.ops[i].insert)) !== null) {\n                hasEmoji = true\n                composer.retain(match.index - index)\n                composer.delete(match[0].length)\n                index = regex.lastIndex\n            }\n            composer.retain(delta.ops[i].insert.length - index)\n        } else {\n            composer.insert(delta.ops[i].insert)\n        }\n    } else if (delta.ops[i].retain !== undefined) {\n        composer.retain(delta.ops[i].retain)\n    } else if (delta.ops[i].delete !== undefined) {\n        composer.delete(delta.ops[i].delete)\n    } \n}\nif (hasEmoji) {\n    quill.updateContents(composer, Quill.sources.USER)\n    setTimeout(()=> {\n        quill.focus()\n    }, 1)\n}\n```. And finally, here is the Emoji Embed which ensures a constant length of 1 for emoji. Now instead of just deleting the emoji in the above clipboard matcher and text-change event handler, I just replace the emoji character with this emoji embed. And I now have consistent support for emoji with length=1.\nSetting contentEditable to false hurts the user experience in terms of consistently showing the cursor before and after the emoji. But without it, you end up accidentally inserting characters in the emoji embed itself when you attempt to type before/after the embed.\nI think the best solution is not to use contentEditable and instead to add an update(mutations) method on the Emoji Embed class that takes any text typed at the beginning/end of the embed and converts them to inserts outside of the embed. But this was non-trivial. I thought I remember seeing a codepen for a mentions implementation that handled the update(mutations) as I'm suggesting, but I can no longer find the Quill issue it was mentioned in...\n```\nimport Quill from 'quill'\nlet Embed = Quill.import('blots/embed')\nexport default class Emoji extends Embed {\n    static create(value) {\n        let node = super.create(value)\n    node.dataset.emoji = value\n    node.innerHTML = value\n    node.setAttribute('contentEditable', 'false')\n\n    return node\n}\n\nstatic value(node) {\n    return node.dataset.emoji\n}\n\n}\nEmoji.blotName = 'emoji'\nEmoji.tagName = 'SPAN'\nEmoji.className = 'ql-emoji'\nQuill.register('formats/emoji', Emoji)\n```. Sure, I'll try to put together a codepen.\nI actually don't definitely know if there are any non-emoji symbols with a length of 2. I just guessed there might be.. Sure, I'll try to put together a codepen.\nI actually don't definitely know if there are any non-emoji symbols with a length of 2. I just guessed there might be.. Here you go: http://codepen.io/sachinrekhi/pen/eWpajZ. Here you go: http://codepen.io/sachinrekhi/pen/eWpajZ. That's a good perf improvement, thanks. Just updated the codepen for both the clipboard matcher and text-change handler to start with this test.. That's a good perf improvement, thanks. Just updated the codepen for both the clipboard matcher and text-change handler to start with this test.. ",
    "luisccf": "\nReplying to myself :) Copy - Paste from Excel seems to work, meaning that the cells and data are kept in their correct places. Great! :) However, pasting the table looses the borders. Is this something easily fixable? Is there a way to define table border in Quill currently?\n\nI did it by creating a CSS rule:\ncss\n.ql-editor table tbody td {\n  border: 1px solid black;\n}. > Replying to myself :) Copy - Paste from Excel seems to work, meaning that the cells and data are kept in their correct places. Great! :) However, pasting the table looses the borders. Is this something easily fixable? Is there a way to define table border in Quill currently?\nI did it by creating a CSS rule:\ncss\n.ql-editor table tbody td {\n  border: 1px solid black;\n}. ",
    "matthewsot": "Hello! Is anyone currently working on this?\nIt's a fairly important feature for a site I'm working on to have indented bullets, and Quill seems to fit every other requirement I have for an editor.\nIf nobody else is working on it I'd love to give this a go myself, though being new to the Quill source I'd appreciate any pointers :)\n. ",
    "kishorenc": "This is the only feature preventing me from using Quill. I maintain a project used by many writers and researchers, and this is definitely a very important feature for them. How difficult would this be to implement?\n. This is the only feature preventing me from using Quill. I maintain a project used by many writers and researchers, and this is definitely a very important feature for them. How difficult would this be to implement?\n. ",
    "mschrepel": "+1 for me too. I miss this feature desperately.\n. ",
    "FredKSchott": "+1 would love this. @jhchen how is the work on custom formats going? Is there a way to do this independently of that work? I might be able to take a crack at it.\n. ",
    "wdamien": "+1, for nested lists\nand another +1 for tables\n. ",
    "michael-ts": "Why won't ExecCommand work for indention?  I tried this code:\n    document.execCommand('indent',false,null)\nAnd it appears to momentarily indent, but then it reverts back to the un-indented form.  Is there something in Quill that is detecting and resisting this attempt?\n. ",
    "JewelsJLF": "+1, I really want to use quill, as so far it seems lightweight, easy to use, with a modern design.  However, I really need it to be able to indent and support nested ordered lists or it's a non-starter.\n. ",
    "romainbessugesmeusy": "+1 here ! \n. +1 here ! \n. ",
    "AyushiBShah": "@jhchen,@community : Anywhere I could find something on custom image bullets ?\n. @jhchen,@community : Anywhere I could find something on custom image bullets ?\n. ",
    "nicoja": "Hello,\nyou can enable or disable your editor like this :\nvar  basicEditor = new Quill('#basic-editor');\nbasicEditor.editor.disable();\nbasicEditor.editor.enable();\n. ",
    "karim10": "Hello, it doen't work for me, has this changed? _this.quill.editor.disable is not a function. Hello, it doen't work for me, has this changed? _this.quill.editor.disable is not a function. Is there a way to keep getting the cursor and navigate through the content but prevent adding new text.\nThis could be done with adding binding to the keyboard module but is there a cleaner way to do it?. Is there a way to keep getting the cursor and navigate through the content but prevent adding new text.\nThis could be done with adding binding to the keyboard module but is there a cleaner way to do it?. You can add an event listener for the backspace button to the keyboard module like that:\njavascript\nthis.quill = new Quill(this.contentElement, {\n  modules: {\n    keyboard: {\n      bindings: {\n        video: {\n          key: 'backspace',\n          handler: function(range, keycontext) {\n            let format = _this.quill.getFormat(range.index - 1);\n            if (!format.video && !keycontext.format.video) {\n              // propogate to Quill's default\n              return true;\n            } // else do nothing to prevent deleting video\n          }\n        }\n      }\n    }\n  },\n  theme: 'snow'\n});. You can add an event listener for the backspace button to the keyboard module like that:\njavascript\nthis.quill = new Quill(this.contentElement, {\n  modules: {\n    keyboard: {\n      bindings: {\n        video: {\n          key: 'backspace',\n          handler: function(range, keycontext) {\n            let format = _this.quill.getFormat(range.index - 1);\n            if (!format.video && !keycontext.format.video) {\n              // propogate to Quill's default\n              return true;\n            } // else do nothing to prevent deleting video\n          }\n        }\n      }\n    }\n  },\n  theme: 'snow'\n});. ",
    "chrismadrigal": ":+1: \n. Any idea how to destroy or reinit an editor instance?\n. ",
    "tdharris": "This would be great!\n. We're also using Quill to produce email HTML and getting paragraph spacing where we don't want any. Something to consider, in Microsoft Word - when you hit [Enter] it does presume a new paragraph is wanted (paragraph spacing is applied). When you hit [Shift] + [Enter] - it does not create a new paragraph and simply creates a line-break. This keeps the text all contained within a single paragraph.\nIn Quill, there is no way to visually see a representation of the spacing that is generated from the \"p\" tag. For example, the editor may show:\nHere is text on one line\nand text on a newline\nBut, in reality getHTML translates this into:\nHere is text on one line\nand text on a new line\nEssentially, the problem I see is that there is paragraph spacing when just a \"br\" is wanted. So same thing in regards to the first comment. Just thought I'd explain how I see it.\n. What if you wrapped the inserted HTML with the special div you have to keep track of the contents, etc? I see this as an option to include insertHTML and still allow for tracking/interpreting the contents manageable. I am likely missing something though.\n. ",
    "rex": "@jhchen This feature would be fantastic. Perhaps you guys would consider the Dropzone image upload library? It's super lightweight and extremely configurable. I've been using it a hell of a lot lately and am totally in love. http://dropzonejs.com\nSide Note: I am just a Dropzone fan. No affiliation to the project whatsoever.\n. ",
    "zhougch5": "I wish quill can add DropzoneJS as the third part. So that it can be more powerful because insert can be seen everywhere\n. ",
    "0m15": "yeah sorry for haven't written back.\ni think somethin was messed with package.json.\nnow everything is fine.\n2014-05-29 1:52 GMT+02:00 Jason Chen notifications@github.com:\n\nClosed #125 https://github.com/quilljs/quill/issues/125.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/quilljs/quill/issues/125#event-125810480\n.\n\n\ns.carella\nsimonecarella@gmail.com\n. ",
    "rtexal": "The toggle can already be done with getHTML and getText !\n. ",
    "benwasser": "You can also make your own rich text editor, but part of the reason for having an editor like Quill is that it accomplishes these things for you. HTML toggling is not a fringe case for the rich text editor, as you can see with Redactor, Tumblr, Wordpress, and so on.\nI've actually built such a toggle on top of Quill that does as you say, but it's practically useless, as each tag and style that someone could input directly into HTML needs to be set up to convert to the visual editor code.\n. Gmail's behavior is what I had in mind, although their implementation is a bit complicated. I'd just have two text inputs and two labels ('Display text' and 'Link') and insert the output at either the last cursor position if there was one or at the end of the input otherwise.\n. I haven't played around too much, but I think there's some complexity for users overriding your default styles since they're in an iframe. I've taken out a lot of the \"reasonable\" styling personally, and I'm not doing anything fancy.\nAs for the modal positioning, I took out the JS positioning so that it's just centered at the top of the editor (https://www.dropbox.com/s/er6wimoul3on4wp/Screenshot%202014-06-01%2021.27.46.png) but I can see the use case for wanting it more \"centered\" and would maybe suggest an option for such.\n. I think it is. It would be valuable to be able to keep placeholder text in there when the field is empty, and possibly style it in such a way that it's readily apparent it's clickable and should be edited (perhaps a background color)\n. ",
    "andrewsauder": "Upvote. @benwasser  - I'm curious how you managed to add a toggle ontop? Until there's an official method to toggle between a raw HTML view and the WYSIWYG mode, I need to hack something to together also.\n. Upvote. @benwasser  - I'm curious how you managed to add a toggle ontop? Until there's an official method to toggle between a raw HTML view and the WYSIWYG mode, I need to hack something to together also.\n. ",
    "kapouer": "Hi,\nit is actually useful in a very specific case: for a developer to see if Quill creates html marmelade or not.\nSuch a button would be useful in the demo.\n. Hi,\nit is actually useful in a very specific case: for a developer to see if Quill creates html marmelade or not.\nSuch a button would be useful in the demo.\n. ",
    "jocooler": "It's pretty easy to see the up-to-date HTML output.\nI use code like:\nvar editor = new Quill('#editor', { ... });\neditor.on('text-change', function() {\n    var html = editor.getHTML();\n    HTML_Container.value = html; // make this a <textarea>\n});\nJust stack the two areas and toggle opacity with a button. Or preview the code below the editor.\n. I discovered it but didn't try to fix it...you might be able to check\nsomething like e.target, I'm not sure whether quill events include the\ntarget or not.\nOn Sat, Mar 12, 2016 at 11:51 PM, hiddenl00p notifications@github.com\nwrote:\n\n@jocoolie https://github.com/jocoolie this is awesome, were you able to\nfix the issue with selection change getting fired on elements outside of\nthe quill frame?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/382#issuecomment-195876608.\n. Not Ubuntu - working correctly in Chrome Version 48.0.2564.116 (64-bit)\n\nOn Mon, Feb 29, 2016 at 5:11 PM, Jason Chen notifications@github.com\nwrote:\n\nNot able to reproduce on a Mac. Are you using Windows or Linux?\n[image: quill]\nhttps://cloud.githubusercontent.com/assets/192974/13410754/3e680f40-deee-11e5-8133-05b20698ec04.gif\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/597#issuecomment-190420992.\n. See the discussion of \"air-bar\" over here: https://github.com/quilljs/quill/issues/382. I believe this is close to what you're looking for.\n\nAs far as the inline editor goes, airbar + some styling on the container and maybe multiple containers (for columns) should pretty well emulate most of what froala does.\n. ",
    "maximelafarie": "Always nothing about that awesome new feature ? It needs to be implemented !. ",
    "matthewfbenjamin": "Does anyone know how to make this work with ReactQuill? My issue is that I don't instantiate Quill with ReactQuill.. @LESARQ check this out. @nikohosn import Quill from react-quill like this:\nimport ReactQuill, {Quill} from 'react-quill'. ",
    "SoaresMG": "I'm using react-quill and quill, how may I create something like this?\nI wasn't able to transpile the code given by @erw13n to the react environment and ended hacking all the script until the buttons stopped working.\nShouldn't this be one of core features? Or is it too hard too implement (time wise)?\nAlmost all the customers I've know html and they use it very often using editors like this.\nOne simple example is when they edit an email template using html or when they just copy templates from the web into the editor.\nI've tried tiny-mce, and they have this feature, but it's a cluster of problems integrating with react/webpack...\nThis lib seems pretty and simple (just what I want), however it misses this key feature (at least for me).. I'm using react-quill and quill, how may I create something like this?\nI wasn't able to transpile the code given by @erw13n to the react environment and ended hacking all the script until the buttons stopped working.\nShouldn't this be one of core features? Or is it too hard too implement (time wise)?\nAlmost all the customers I've know html and they use it very often using editors like this.\nOne simple example is when they edit an email template using html or when they just copy templates from the web into the editor.\nI've tried tiny-mce, and they have this feature, but it's a cluster of problems integrating with react/webpack...\nThis lib seems pretty and simple (just what I want), however it misses this key feature (at least for me).. Hey @mbenjamin618 thank you, but I think I've seen all the resources available online \ud83d\ude04 \nI've done something similar and created a button on the toolbar, then on click I show my textarea and the user may change it.\nFollowing @erw13n  script, if you paste:\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n\n\n\n\n    <style>\n        p {\n            font-family: \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n        }\n    </style>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n    <table>\n        <tr>\n            <td><p>example</p></td>\n        </tr>\n    </table>\n</body>\n\n\n```\nAnd then if you change it back to the editor and again to the source, you will see that all the code was erased.\nPerhaps I'm confused and RichText Editor != Html Editor.. Hey @mbenjamin618 thank you, but I think I've seen all the resources available online \ud83d\ude04 \nI've done something similar and created a button on the toolbar, then on click I show my textarea and the user may change it.\nFollowing @erw13n  script, if you paste:\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n\n\n\n\n    <style>\n        p {\n            font-family: \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n        }\n    </style>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n    <table>\n        <tr>\n            <td><p>example</p></td>\n        </tr>\n    </table>\n</body>\n\n\n```\nAnd then if you change it back to the editor and again to the source, you will see that all the code was erased.\nPerhaps I'm confused and RichText Editor != Html Editor.. Ok, I see. What a shame \ud83d\ude1e . Ok, I see. What a shame \ud83d\ude1e . ",
    "Miindaugas": "FeelsBadMan.. \n. ",
    "imnithin": "https://quilljs.com/standalone/full/. ",
    "qq403925754": "\n\n",
    "Eddcapone": "Any progress on this? The solution from @erw13n is a good start, but it does not format the html correctly, everything is in one line.. ",
    "5slight": "Would it be possible to have a setting to disable automatic code cleaning so we can handle this outside of quill.\nIt would be quite easy to have a toggle above the editor like in wordpress where you can go between RichText and PlainText as long as quill doesn't just remove anything done in PlainText. \nSome kind of html pretty printer would be needed to solve @Eddcapone issue of everything on one line but again thats something that can be handled outside of quill. It can always be concatenated back if the pretty printed code messes with quill.. ",
    "mintymatt": "+1. +1. ",
    "nzolore": "While the interface is perfect for editing simple text, a way to preserve custom code would allow a lot more applications.\nHere's another \"source-button\" attempt with external prettifier: https://jsfiddle.net/nzolore/1jxy58vn/. ",
    "RevealedFrom": "If source code editor is available, it will take pressure off the urgency of delivering other features such as tables. Most people who can use raw Html know all about the <table> tag.\nJust have a clean up to remove incompatible or dangerous tags such as <script>.. If source code editor is available, it will take pressure off the urgency of delivering other features such as tables. Most people who can use raw Html know all about the <table> tag.\nJust have a clean up to remove incompatible or dangerous tags such as <script>.. I want to add marquee or css animations.  It would be too much to ask for these in Quill JS.  But if there is  source Html edit, they're all there.. I am now looking at summernote. It is almost plug compatible with JS Quill.. ",
    "Denny966": "+1. ",
    "mintyPT": "+1. +1. ",
    "aaclayton": "Just want to say I had put about an hour into building quill into my new platform and was loving the developer friendliness so far until I discovered there is no support for raw HTML editing. Complete deal-breaker, had to go in a different direction.. ",
    "egorsergeevichw": "Module for use with ngx-quill.\nhtml-editor.ts:\n```\nexport class HtmlEditor {\n    quill: any;\n    options: any;\n    textarea: any;\nconstructor(quill: any, options = {}) {\n    this.quill = quill;\n    this.options = options;\n\n    this.addTextarea();\n    this.bindEditorBehavior();\n    this.bindButtonBehavior();\n}\n\naddTextarea() {\n    let container = this.quill.addContainer('ql-custom');\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.className = \"ql-edit-html-textarea\";\n    this.textarea.style.display = \"none\";\n\n    container.appendChild(this.textarea);\n}\n\nbindEditorBehavior() {\n    let editor = document.querySelector('.ql-editor');\n\n    this.quill.on('text-change', () => {\n        if (editor) {\n            let html = editor.innerHTML;\n\n            this.textarea.value = html;\n        }\n    });\n}\n\nbindButtonBehavior() {\n    let button = document.querySelector('.ql-edit-html');\n\n    if (button) {\n        button.addEventListener('click', () => {\n            if (this.textarea.style.display === '') {\n                let html = this.textarea.value;\n\n                this.quill.pasteHTML(html);\n            }\n\n            this.textarea.style.display =\n                this.textarea.style.display === 'none'\n                    ? ''\n                    : 'none';\n        });\n    }\n}\n\n}\n```\nquill-config.ts:\n```\nimport Quill from 'quill';\nimport { HtmlEditor } from './html-editor'\nQuill.register('modules/htmlEditor', HtmlEditor);\nexport class QuillConfig {\n    constructor() {\n        this.modules = {\n            htmlEditor: true\n        }\n    }\npublic modules = {};\n\n}\n```\ntextarea styles:\n.ql-edit-html-textarea {\n    width: 100%;\n    background: rgb(29, 29, 29);\n    color: rgb(204, 204, 204);\n    outline: none;\n    padding: 12px 15px;\n    font-family: Consolas;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    border: none;\n}\nhtml:\n<quill-editor>\n    <div quill-editor-toolbar>\n        <span class=\"ql-formats\">\n            <button class=\"ql-edit-html\">html</button>\n        </span>\n    </div>\n</quill-editor>\n. Module for use with ngx-quill.\nhtml-editor.ts:\n```\nexport class HtmlEditor {\n    quill: any;\n    options: any;\n    textarea: any;\nconstructor(quill: any, options = {}) {\n    this.quill = quill;\n    this.options = options;\n\n    this.addTextarea();\n    this.bindEditorBehavior();\n    this.bindButtonBehavior();\n}\n\naddTextarea() {\n    let container = this.quill.addContainer('ql-custom');\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.className = \"ql-edit-html-textarea\";\n    this.textarea.style.display = \"none\";\n\n    container.appendChild(this.textarea);\n}\n\nbindEditorBehavior() {\n    let editor = document.querySelector('.ql-editor');\n\n    this.quill.on('text-change', () => {\n        if (editor) {\n            let html = editor.innerHTML;\n\n            this.textarea.value = html;\n        }\n    });\n}\n\nbindButtonBehavior() {\n    let button = document.querySelector('.ql-edit-html');\n\n    if (button) {\n        button.addEventListener('click', () => {\n            if (this.textarea.style.display === '') {\n                let html = this.textarea.value;\n\n                this.quill.pasteHTML(html);\n            }\n\n            this.textarea.style.display =\n                this.textarea.style.display === 'none'\n                    ? ''\n                    : 'none';\n        });\n    }\n}\n\n}\n```\nquill-config.ts:\n```\nimport Quill from 'quill';\nimport { HtmlEditor } from './html-editor'\nQuill.register('modules/htmlEditor', HtmlEditor);\nexport class QuillConfig {\n    constructor() {\n        this.modules = {\n            htmlEditor: true\n        }\n    }\npublic modules = {};\n\n}\n```\ntextarea styles:\n.ql-edit-html-textarea {\n    width: 100%;\n    background: rgb(29, 29, 29);\n    color: rgb(204, 204, 204);\n    outline: none;\n    padding: 12px 15px;\n    font-family: Consolas;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    border: none;\n}\nhtml:\n<quill-editor>\n    <div quill-editor-toolbar>\n        <span class=\"ql-formats\">\n            <button class=\"ql-edit-html\">html</button>\n        </span>\n    </div>\n</quill-editor>\n. ",
    "izzygld": "Here is a component i made for Quill showing a \"Source\" show Html option to the Wysiwyg. \nSee - https://gist.github.com/izzygld/0762dce7292baf2168f9c7b2aa99b535. Here is a component i made for Quill showing a \"Source\" show Html option to the Wysiwyg. \nSee - https://gist.github.com/izzygld/0762dce7292baf2168f9c7b2aa99b535. Here is a component i made for Quill showing a \"Source\" show Html option to the Wysiwyg. \nSee - https://gist.github.com/izzygld/0762dce7292baf2168f9c7b2aa99b535. Here is a component i made for Quill showing a \"Source\" show Html option to the Wysiwyg. \nSee - https://gist.github.com/izzygld/0762dce7292baf2168f9c7b2aa99b535. ",
    "chenbimo": "So greate project.\nSo many troubles.. ",
    "hgezim": "I'm fixing some issues with link tooltip and this will be fixed in it. To simplify things, I've removed the \"view mode\" where you click on a link and the popup comes up and then you click \"Change\".\nWith my change, the link tooltip always shows \"Website URL:\" input field and \"Display Text\". What do you all think of this?\n. I'm working on an enhancement for the link tooltip and this will also be fixed (hopefully). It's not quite bug free yet.\n. ",
    "hanssnabilie": "agreed, beside the issue of having style in javascript there's also the problem of the delay when adding the (user)styles resulting in seeing the editor first in default style and then, after the _.defer, the user style gets painted over. It's looks pretty bad, try something like new Quill( element, {'body': {'color': 'white', 'padding': '3px 6px'}}); \n. ",
    "ericmm": "Thanks, but it still doesn't work on my side, and it throws some Error below:\n\"Uncaught TypeError: undefined is not a function quill.js:12928\"\nWhen I look into the source, it looks like the function isIdentity() is not defined.\n=====quill source====\n...\nif (!delta.isIdentity()) {\n...\n=====quill source====\ncould you please check?\nthanks,\nEric\n. Thanks a lot. I made something wrong, it works.\nAppreciate for your response.\nEric\n. ",
    "tejasmanohar": "http://www.filedropper.com/screencast2\nYou can also switch between assets in the editor. We've done to above using a custom UI with scribe (https://github.com/guardian/scribe)\n. Thanks.\n. ",
    "dandv": ":+1: super handy. Became addicted to pasting images from clipboard after using it in Slack, GitHub, StackOverflow.\nI can paste images from the same page, but not from the clipboard.\nI've listed other WYSIWYG editors that support pasting images in this comparison.\n. ",
    "htsh": "@kensnyder would love it if the drag/drop and resize plugins were made available. thanks! . @kensnyder would love it if the drag/drop and resize plugins were made available. thanks! . ",
    "idoromm": "@kensnyder any plans on making image pasting module as well?\nI think allowing image pasting is as useful as drag-n-drop to some people. Thanks!. ",
    "johnozbay": "Here's what I'm using to add very basic support for pasting images from clipboard. It uses the Clipboard API. This will return an image element, which quill parses and inserts inline into the editor.\nIt can be improved, but for my use case this works. \nYou can simply add the following into your js file and it should work. \nFeel free to convert to a module if you've got time \ud83c\udf7b\nTested in Chrome and Firefox latest (but you should still keep an eye out for browser support as usual)\n```\nvar IMAGE_MIME_REGEX = /^image\\/(p?jpeg|gif|png)$/i;\nvar loadImage = function (file) {\n    var reader = new FileReader();\n    reader.onload = function(e){\n        var img = document.createElement('img');\n        img.src = e.target.result;\n        var range = window.getSelection().getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(img);\n    };\n    reader.readAsDataURL(file);\n};\ndocument.onpaste = function(e){\n    var items = e.clipboardData.items;\nfor (var i = 0; i < items.length; i++) {\n    if (IMAGE_MIME_REGEX.test(items[i].type)) {\n        loadImage(items[i].getAsFile());\n        return;\n    }\n}\n\n// Normal paste handling here\n\n}\n```\nSource : https://gist.github.com/dusanmarsa/2ca9f1df36e14864328a2bb0b353332e. Here's what I'm using to add very basic support for pasting images from clipboard. It uses the Clipboard API. This will return an image element, which quill parses and inserts inline into the editor.\nIt can be improved, but for my use case this works. \nYou can simply add the following into your js file and it should work. \nFeel free to convert to a module if you've got time \ud83c\udf7b\nTested in Chrome and Firefox latest (but you should still keep an eye out for browser support as usual)\n```\nvar IMAGE_MIME_REGEX = /^image\\/(p?jpeg|gif|png)$/i;\nvar loadImage = function (file) {\n    var reader = new FileReader();\n    reader.onload = function(e){\n        var img = document.createElement('img');\n        img.src = e.target.result;\n        var range = window.getSelection().getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(img);\n    };\n    reader.readAsDataURL(file);\n};\ndocument.onpaste = function(e){\n    var items = e.clipboardData.items;\nfor (var i = 0; i < items.length; i++) {\n    if (IMAGE_MIME_REGEX.test(items[i].type)) {\n        loadImage(items[i].getAsFile());\n        return;\n    }\n}\n\n// Normal paste handling here\n\n}\n```\nSource : https://gist.github.com/dusanmarsa/2ca9f1df36e14864328a2bb0b353332e. There's a working example using tribute. Take a look at this : #1816 \nIt seems to be working out of the box with Quill. Implementation has a few hiccups, but looks like it can all be worked out with the help of the two communities. I've successfully implemented this solution, and it's working smoothly. . ",
    "hardythomas": "@johnozbay, please attribute code if you pulled it from somewhere. \nAlso, edit your post to include an important line you missed in your snippet: \nvar IMAGE_MIME_REGEX = /^image\\/(p?jpeg|gif|png)$/i;\nThank you for getting this out here!. No worries. I didn't think it was with bad will ;) just hoping people get credit where credit is due\n\u00a0\nSent:\u00a0Sunday, June 24, 2018 at 4:10 AM\nFrom:\u00a0\"John Ozbay\" notifications@github.com\nTo:\u00a0quilljs/quill quill@noreply.github.com\nCc:\u00a0hardythomas hardy.thomas@mail.com, Mention mention@noreply.github.com\nSubject:\u00a0Re: [quilljs/quill] Paste images (#137)\n@hardythomas at the time of posting this I copied the code from the project I was using it in. The lack of attribution was without any bad intention, but merely an oversight in a busy day. I apologize.\nAdded the source & updated snippet with an edit now. Thanks for the heads up, and keeping me warned \ud83d\ude4f\ud83c\udffb\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.. No worries. I didn't think it was with bad will ;) just hoping people get credit where credit is due\n\u00a0\nSent:\u00a0Sunday, June 24, 2018 at 4:10 AM\nFrom:\u00a0\"John Ozbay\" notifications@github.com\nTo:\u00a0quilljs/quill quill@noreply.github.com\nCc:\u00a0hardythomas hardy.thomas@mail.com, Mention mention@noreply.github.com\nSubject:\u00a0Re: [quilljs/quill] Paste images (#137)\n@hardythomas at the time of posting this I copied the code from the project I was using it in. The lack of attribution was without any bad intention, but merely an oversight in a busy day. I apologize.\nAdded the source & updated snippet with an edit now. Thanks for the heads up, and keeping me warned \ud83d\ude4f\ud83c\udffb\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "ariera": "Yeah @jbrooksuk that sounds nice. I guess a good behaviour would be to leave the things how they were before Quill was applied. I think is up to the user to decide what they want to do with it.\nIt could also make sense to update the original element with the content of the editor, but I am not completely sure of that.\nBut in any case, what in my opinion would be most critical is to free all memory (so it doesn't leak) in a way that would let me create and destroy Quill's all over the place :)\n. ",
    "e-jigsaw": "I have similar bug. Any progress on this issue?\nThanks\n. I have similar bug. Any progress on this issue?\nThanks\n. ",
    "lakinmohapatra": "How to achieve the same in anguar 2 + ? Please advise. \nThanks. Hi \nI am assigning video html to editor like this \nthis.editor = '';\nBut its showing blank in QL UI. Please help. . ",
    "dominicfrost": "Yeah, it would be worth considering only compiling the file in tagged releases. That is not to much more cumbersome for the development process. @Bryanaka has a point, when bower installing the project, I expect to be able to use the library right away by just requiring in the prebuilt file (As this is how all other bower packages work).\n. ",
    "bjnsn": "+1\n. +1\n. If I understand the purpose of the whitespace stripping, a more complex RegExp that avoids stripping space between inline elements might work.\nInstead of this (in Normalize.stripWhitespace):\nhtml = html.replace(/>\\s+<');\nUse this:\nhtml = html.replace(/>\\s+<(?!\\s*(?:b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bd|br|img|map|object|q|script|span|sub|sub|sup|button|input|label|select|textarea))/g, '><');\nIn that example, there is a negative lookahead which skips any cases that match these tags noted by MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elemente#Elements\n. If I understand the purpose of the whitespace stripping, a more complex RegExp that avoids stripping space between inline elements might work.\nInstead of this (in Normalize.stripWhitespace):\nhtml = html.replace(/>\\s+<');\nUse this:\nhtml = html.replace(/>\\s+<(?!\\s*(?:b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bd|br|img|map|object|q|script|span|sub|sub|sup|button|input|label|select|textarea))/g, '><');\nIn that example, there is a negative lookahead which skips any cases that match these tags noted by MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elemente#Elements\n. Never mind. It already behaves this way, just not when calling Quill.prototype.setHTML with source of Quill.sources.SILENT.\n. Never mind. It already behaves this way, just not when calling Quill.prototype.setHTML with source of Quill.sources.SILENT.\n. Updated!\n. Updated!\n. As I see it there are two pieces creating complexity  (and making it harder to maintain) in the proposed solution:\n1) The list of block tags (which could potentially be amended at some point in the future by W3C)\n- perhaps this could utilize the block tag list in Dom.coffee, which will also need to be maintained\n- or, noting that any tag not added to this list would be treated as other non-block tags (e.g. something inline such as span); it would simply not trim space between those. In my opinion that is not nearly as bad a side effect as the current behavior which removes space that is clearly wanted.\n2) The workaround for the lack of lookbehinds in JS regexp.\n- perhaps we could encapsulate the workaround separately\n- or use something like XRegExp, which allows for lookbehinds\nWould either or both of these address the issue you are noting?\n. As I see it there are two pieces creating complexity  (and making it harder to maintain) in the proposed solution:\n1) The list of block tags (which could potentially be amended at some point in the future by W3C)\n- perhaps this could utilize the block tag list in Dom.coffee, which will also need to be maintained\n- or, noting that any tag not added to this list would be treated as other non-block tags (e.g. something inline such as span); it would simply not trim space between those. In my opinion that is not nearly as bad a side effect as the current behavior which removes space that is clearly wanted.\n2) The workaround for the lack of lookbehinds in JS regexp.\n- perhaps we could encapsulate the workaround separately\n- or use something like XRegExp, which allows for lookbehinds\nWould either or both of these address the issue you are noting?\n. ",
    "thomsbg": "I think this issue needs to be re-opened. Unfortunately, simply patching getHTML() to insert &nbsp; as appropriate is not sufficient to support copy / paste. See the following repro steps:\n1. visit http://quilljs.com/\n2. select the space between the words Quill and Rich in the 1st line\n3. use the toolbar or the keyboard to apply the bold format\n4. select all text, cut and then paste over the selected contents\n5. notice that the space between Quill and Rich has disappeared\nWhile these repro steps may seem a bit convoluted (who would apply formatting to just whitespace?), in practice this happens often while editing rich text, especially when the authorship module is enabled (which frequently wraps runs of pure whitespace in <span class=\"author-1234\">  </span> tags).\nOne could probably patch the paste-manager module to handle this case correctly, but I must admit I am confused why stripWhitespace is needed at all... it seems better to have Document#setHTML not require &nbsp; between inline tags to work correctly.\nPerhaps Normalizer.stripWhitespace could replace runs of whitespace with a single space, rather than the empty string? Or simply not used at all.\nI need to fix this issue on my fork before 1.0 is released. Which path forward would you anticipate would be most compatible with the 1.0 branch?\n. removeConflicting iterates through all the document formats, but skips those for which config.exclusive is falsy. This should allow headers and list formats to be toggled on and off independently of things like text alignment.\n. removeConflicting iterates through all the document formats, but skips those for which config.exclusive is falsy. This should allow headers and list formats to be toggled on and off independently of things like text alignment.\n. Bump. Have any other concerns with this one @jhchen?\nIdeally, I'd prefer a format like { header: 1 }, but am not sure how to make that work.\n. Bump. Have any other concerns with this one @jhchen?\nIdeally, I'd prefer a format like { header: 1 }, but am not sure how to make that work.\n. Addressed in #256 \n. I extracted the _expandRange function and synchronized the toolbar correctly.\nI've tried a couple times to DRY this up, but saveLink and removeLink are really looking for different things. saveRange needs the anchor node in order to set the href, while removeLink just needs the range of the enclosing leaf.\nIdeally, I'd like to be able to use _findAnchor from within removeLink, but I'm not sure how to get a Quill range from a DOM node. Maybe we could add a doc.findRangeAt(node) function...\n. Any more thoughts on this @jhchen?\n. Any more thoughts on this @jhchen?\n. It looks like the over-zealous whitespace normalization from #149 is a problem here too. Wouldn't it be better to not call stripWhitespace() on tooltip templates?\n. It looks like the over-zealous whitespace normalization from #149 is a problem here too. Wouldn't it be better to not call stripWhitespace() on tooltip templates?\n. OK. I can add a css rule as you suggest. I think it might be easier for contributors to have the markup act more normally (with standard whitespace semantics).\nWhat purpose does stripWhitespace serve here?\n. OK. I can add a css rule as you suggest. I think it might be easier for contributors to have the markup act more normally (with standard whitespace semantics).\nWhat purpose does stripWhitespace serve here?\n. Whitespace in between inline tags is significant.\ne.g. <b>Bold</b> <i>Italic</i> is being transformed to <b>Bold</b><i>Italic</i>.\nThis results in output like \"BoldItalic\", instead of the expected \"Bold Italic\".\n. Whitespace in between inline tags is significant.\ne.g. <b>Bold</b> <i>Italic</i> is being transformed to <b>Bold</b><i>Italic</i>.\nThis results in output like \"BoldItalic\", instead of the expected \"Bold Italic\".\n. The build failure looks like a temporary glitch with Saucelabs\n. The build failure looks like a temporary glitch with Saucelabs\n. Sounds good. If there's anything I can do to help out with the format branch, let me know. I am having lots of success with my fork at voxmedia/quill, and would love to continue contributing back to the main project.\nI've recently attempted a fix for #260, but am struggling to implement the needed changes to Normalizer to re-order the nesting of tags as needed. I hope that the refactor to formats is keeping this issue in mind, i.e. specifying a priority order for formats to be applied in.\n. Sounds good. If there's anything I can do to help out with the format branch, let me know. I am having lots of success with my fork at voxmedia/quill, and would love to continue contributing back to the main project.\nI've recently attempted a fix for #260, but am struggling to implement the needed changes to Normalizer to re-order the nesting of tags as needed. I hope that the refactor to formats is keeping this issue in mind, i.e. specifying a priority order for formats to be applied in.\n. Do you mean like this?\ncoffeescript\nif hotkey.key == dom.KEYS.BACKSPACE\n  start = range.start - 1\nelse\n  start = range.start\n@quill.deleteText(start, start + 1, Quill.sources.USER) if start >= 0\nOr perhaps this would be better?\ncoffeescript\nstart = range.start\nstart -= 1 if hotkey.key == dom.KEYS.BACKSPACE\n@quill.deleteText(start, start + 1, Quill.sources.USER) if start >= 0\n. Do you mean like this?\ncoffeescript\nif hotkey.key == dom.KEYS.BACKSPACE\n  start = range.start - 1\nelse\n  start = range.start\n@quill.deleteText(start, start + 1, Quill.sources.USER) if start >= 0\nOr perhaps this would be better?\ncoffeescript\nstart = range.start\nstart -= 1 if hotkey.key == dom.KEYS.BACKSPACE\n@quill.deleteText(start, start + 1, Quill.sources.USER) if start >= 0\n. The problem is that the return value for switchTag() is inconsistent. If the target tag is the same as the current one, this (a dom wrapper) is returned, while if the target tag is different, get() is returned (a plain node).\nThere are several places where the return value of switchTag() is expected to be a plain node in format.coffee and normalizer.coffee.\n. The problem is that the return value for switchTag() is inconsistent. If the target tag is the same as the current one, this (a dom wrapper) is returned, while if the target tag is different, get() is returned (a plain node).\nThere are several places where the return value of switchTag() is expected to be a plain node in format.coffee and normalizer.coffee.\n. I decided this was a bad idea after all. It appears as though the latest versions of Firefox don't exhibit the same bug that motivated this fix, so best just to keep a single code path.\n. I decided this was a bad idea after all. It appears as though the latest versions of Firefox don't exhibit the same bug that motivated this fix, so best just to keep a single code path.\n. I've worked around this problem by using <button> tags, which Safari seems to like better. The toolbar button click handler does not call preventDefault(), which may be causing Safari to jump to the top of the page.\n. I've worked around this problem by using <button> tags, which Safari seems to like better. The toolbar button click handler does not call preventDefault(), which may be causing Safari to jump to the top of the page.\n. I added that href normalization after seeing this bug:\n- Select text and click link tooltip button\n- Enter http://google.com into the input and click Done\n- The resulting url is http://google.com/ (trailing slash)\n- Click change, input value still has http://google.com (no trailing slash)\n- Click done, the resulting markup is now <a href=\"http://google.com\"><a href=\"http://google.com/\">text</a></a>\nThis wasn't a problem before, because the tooltip used to close immediately upon clicking Done.\nI suspect this was happening because the linkFormat.value() was returning the url with a trailing slash, so calling linkFormat.add('http://google.com') doesn't match the current value and ends up wrapping the whole thing in another <a> tag.\nPerhaps a different solution to this problem would be to reset the value of the input after clicking Done?\n. I added that href normalization after seeing this bug:\n- Select text and click link tooltip button\n- Enter http://google.com into the input and click Done\n- The resulting url is http://google.com/ (trailing slash)\n- Click change, input value still has http://google.com (no trailing slash)\n- Click done, the resulting markup is now <a href=\"http://google.com\"><a href=\"http://google.com/\">text</a></a>\nThis wasn't a problem before, because the tooltip used to close immediately upon clicking Done.\nI suspect this was happening because the linkFormat.value() was returning the url with a trailing slash, so calling linkFormat.add('http://google.com') doesn't match the current value and ends up wrapping the whole thing in another <a> tag.\nPerhaps a different solution to this problem would be to reset the value of the input after clicking Done?\n. Ok, I've refactored to use the existing @link element to do the url normalization, as well as addressing a few bugs that had come up. Sorry for the ongoing work in a pull-request branch, I usually try to avoid that.\n. Ok, I've refactored to use the existing @link element to do the url normalization, as well as addressing a few bugs that had come up. Sorry for the ongoing work in a pull-request branch, I usually try to avoid that.\n. Any chance of sharing your module?\n. Any chance of sharing your module?\n. Thanks for the clear repro steps! I was experiencing this error also, but could not pin it down.\n. Thanks for the clear repro steps! I was experiencing this error also, but could not pin it down.\n. Decided this was a bad strategy, it breaks other functionality. Will have to figure out a different way to preserve scroll position.\n. Decided this was a bad strategy, it breaks other functionality. Will have to figure out a different way to preserve scroll position.\n. I like getActiveFormats. I don't fully understand the purpose of exposing activeLeafFormats and activeLineFormats separately as public methods.\n. I like getActiveFormats. I don't fully understand the purpose of exposing activeLeafFormats and activeLineFormats separately as public methods.\n. Remember also that quill.getContents(start, end) allows you to inspect the rich text delta data structure for a range, which includes details of which formats are applied at the most granular level. You could write your own function to find the intersection or union of formats that way. \n. Remember also that quill.getContents(start, end) allows you to inspect the rich text delta data structure for a range, which includes details of which formats are applied at the most granular level. You could write your own function to find the intersection or union of formats that way. \n. I am aware of Delta#transformPosition(), and am using it to great effect. However, I still think this change is necessary. I will try to describe why.\nImagine an OT system with two clients A and B, and a server S. In this system, as A makes changes, I keep track of the pending diff (unsavedDelta) between A and the S before the S replies \"OK Saved\". If B moves her cursor, it is broadcast to A, who calls unsavedDelta.transformPosition(cursor). This works well 90% of the time.\nHowever, there is a brief window of time after S has replied \"OK Saved\" to A, but before B is notified of the change. If B moves her cursor during this time, A will receive B's cursor-change broadcast, but have no unsavedDelta to transform it against. If B's out-of-date cursor is beyond the length of A's document, calling setCursor will throw an Invalid index error.\nI tried surrounding my call to setCursor with a try/catch, but found that further changes by A will trigger more Invalid index errors as B's invalid cursor is shifted to compensate. These Invalid index errors crucially prevent my text-change listeners from firing and saving document changes.\nTherefore, I think it is important for _updateCursor to never throw Invalid index errors.\n. I am aware of Delta#transformPosition(), and am using it to great effect. However, I still think this change is necessary. I will try to describe why.\nImagine an OT system with two clients A and B, and a server S. In this system, as A makes changes, I keep track of the pending diff (unsavedDelta) between A and the S before the S replies \"OK Saved\". If B moves her cursor, it is broadcast to A, who calls unsavedDelta.transformPosition(cursor). This works well 90% of the time.\nHowever, there is a brief window of time after S has replied \"OK Saved\" to A, but before B is notified of the change. If B moves her cursor during this time, A will receive B's cursor-change broadcast, but have no unsavedDelta to transform it against. If B's out-of-date cursor is beyond the length of A's document, calling setCursor will throw an Invalid index error.\nI tried surrounding my call to setCursor with a try/catch, but found that further changes by A will trigger more Invalid index errors as B's invalid cursor is shifted to compensate. These Invalid index errors crucially prevent my text-change listeners from firing and saving document changes.\nTherefore, I think it is important for _updateCursor to never throw Invalid index errors.\n. > I'm not sure why getBounds throws an error (as that's not idiomatic in Quill's codebase)\nThis is why: https://github.com/quilljs/quill/blob/ea8e31c4d20c853aa3374dea1de4559bc4421abf/src/core/editor.coffee#L88\n\nbut it should probably return null instead and updateCursor on a null/invalid boundary could remove the cursor. Would you be amenable to these changes instead?\n\nI can change editor.getBounds() to return null instead. Since quill.getBounds() is a public API method, changing from throwing an error to returning null sounds like a significant change. Shall we proceed with that strategy?\n. Updated to have quill.getBounds() return null in case of an invalid index.\n. Nits addressed.\n. Nits addressed.\n. Fair point @benbro. I'll make it configurable.\n. Fair point @benbro. I'll make it configurable.\n. Updated to make this new behavior configurable via a userOnly: true option\n. Updated to make this new behavior configurable via a userOnly: true option\n. Test updated.\n. A removeHotkey function would be a sufficient, though roundabout solution to my problem. I can see the appeal of code over configuration, so I'll close this for now. I can whip together a PR for removeHotkey if @kmoe hasn't started yet.\n. A removeHotkey function would be a sufficient, though roundabout solution to my problem. I can see the appeal of code over configuration, so I'll close this for now. I can whip together a PR for removeHotkey if @kmoe hasn't started yet.\n. @jhchen I've added another commit which addresses your concerns (and actually makes it work!)\nI decided to rename the method to removeKeys (plural) to indicate than the return value is an array.\nI also added the ability to specify which handler you wanted removed, along the lines of jQuery's off(event, handler).\n. @jhchen I've added another commit which addresses your concerns (and actually makes it work!)\nI decided to rename the method to removeKeys (plural) to indicate than the return value is an array.\nI also added the ability to specify which handler you wanted removed, along the lines of jQuery's off(event, handler).\n. I can confirm -- it looks like (on the demo page at least) that clicking and dragging anywhere inside the toolbar will move the cursor to the beginning of the document.\n. I can confirm -- it looks like (on the demo page at least) that clicking and dragging anywhere inside the toolbar will move the cursor to the beginning of the document.\n. I just noticed this behavior too. \n\nI think an acceptable heuristic is just wrap reinserted text that was deleted? Also what do you mean by forwards or backwards?\n\nI think I'd amend this to make it more precise by saying: if the last op of the original delta was a highlight-and-delete, then the restored characters should be selected when that delta is un-done.\nThe problem is, it's impossible to know whether a { delete: 1 } op came from a highlight-and-delete operation, or from a simple backspace. Perhaps this means that the clipboard module needs to keep track of selection history?. @jhchen I encountered another reason for the clipboard module to track the selection history. I have a key binding set up to turn 1/2 into \u00bd once the spacebar is pressed, resulting in \u00bd (including the inserted space).\nI have more similar keybindings to accomplish the same for -- => \u2014 (emdash), \" => \u201c (curly quotes), etc.\nMy key bindings insert the space first, before calling history.cutoff() and doing the automatic transformation. I would like the editing UX to be such when you press undo, the automatic transformation is undone, keeping the inserted space, and keeping the selection unchanged (after the inserted space) to be able to continue typing seamlessly.\nRight now, the act of undoing the change from 1/2 into \u00bd moves the cursor before the inserted space, because of the getLastChangeIndex logic in the clipboard module. Ideally, the history module would capture the selection when it calls record(), and then would restore that range after applying the undo/redo delta. That way, the selection can be restored accurately to what it was at the time the original change was made (i.e. after the space in this case).. @jhchen I encountered another reason for the clipboard module to track the selection history. I have a key binding set up to turn 1/2 into \u00bd once the spacebar is pressed, resulting in \u00bd (including the inserted space).\nI have more similar keybindings to accomplish the same for -- => \u2014 (emdash), \" => \u201c (curly quotes), etc.\nMy key bindings insert the space first, before calling history.cutoff() and doing the automatic transformation. I would like the editing UX to be such when you press undo, the automatic transformation is undone, keeping the inserted space, and keeping the selection unchanged (after the inserted space) to be able to continue typing seamlessly.\nRight now, the act of undoing the change from 1/2 into \u00bd moves the cursor before the inserted space, because of the getLastChangeIndex logic in the clipboard module. Ideally, the history module would capture the selection when it calls record(), and then would restore that range after applying the undo/redo delta. That way, the selection can be restored accurately to what it was at the time the original change was made (i.e. after the space in this case).. https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\n. I'm sorry, I meant to include more explanation with my original link. My intention in posting that link was that my expectation of calling preventDefault() is only to prevent the native behavior associated with that event, not to stop any other handlers from being run. For that outcome, I would look to stopImmediatePropagation().\nIt seems like quill has conflated those two things by using the shortcut of return false.\n. I just ran into this. Some more details:\nWhen using the Delete key (aka forward delete) at the end of a line, the formatting of the original line is lost, with the formatting of the next line taking precedence. Using the backspace key at the beginning of the next line has the correct behavior.\nSteps for Reproduction\n\nVisit quilljs.com\nPlace cursor at the end of the first line, after the r in Editor\nPress the Delete key (fn + Delete on MacOS).\n\nExpected behavior:\nThe line below the heading is removed, and the first line keeps all its formatting.\nActual behavior:\nThe first line is stripped of its formats, becoming left-aligned and normal size.\nPlatforms:\nTested on Chrome 65.0.3325.181, MacOS\nVersion:\n1.3.6\nMore details:\nThis bug also happens when using a range delete to merge lines, where the range ends at the beginning of a line:\n\nVisit quilljs.com\nPlace cursor at the end of the first line\nUse shift+right to expand selection to beginning of the second line\nPress delete (or backspace, doesn't matter which)\n\nSee the first line lose its formatting unexpectedly. Oddly enough, using cmd+x to cut in this situation has the correct behavior.. I just ran into this. Some more details:\nWhen using the Delete key (aka forward delete) at the end of a line, the formatting of the original line is lost, with the formatting of the next line taking precedence. Using the backspace key at the beginning of the next line has the correct behavior.\nSteps for Reproduction\n\nVisit quilljs.com\nPlace cursor at the end of the first line, after the r in Editor\nPress the Delete key (fn + Delete on MacOS).\n\nExpected behavior:\nThe line below the heading is removed, and the first line keeps all its formatting.\nActual behavior:\nThe first line is stripped of its formats, becoming left-aligned and normal size.\nPlatforms:\nTested on Chrome 65.0.3325.181, MacOS\nVersion:\n1.3.6\nMore details:\nThis bug also happens when using a range delete to merge lines, where the range ends at the beginning of a line:\n\nVisit quilljs.com\nPlace cursor at the end of the first line\nUse shift+right to expand selection to beginning of the second line\nPress delete (or backspace, doesn't matter which)\n\nSee the first line lose its formatting unexpectedly. Oddly enough, using cmd+x to cut in this situation has the correct behavior.. @DmitrySkripkin would you mind sharing your custom keybinding that fixed this?. @DmitrySkripkin would you mind sharing your custom keybinding that fixed this?. Rebased onto the 2.0 branch. I don\u2019t quite follow. How is using clipboarddata any different than allowing the default behavior? Both end up getting processed into a delta that normalizes and sanitizes the content.... I don\u2019t quite follow. How is using clipboarddata any different than allowing the default behavior? Both end up getting processed into a delta that normalizes and sanitizes the content.... Does that mean we would require you to specify removeHotkey({ key: 13 }) instead of removeHotkey(13)? This doesn't seem to parallel well with the shortcut of providing a string.\n. ",
    "fracz": "You can override this behaviour in your application. No need to modify the sources.\ncoffee\nnormalizer = Quill.require('normalizer')\nstripWhitespace = normalizer.stripWhitespace\nnormalizer.stripWhitespace = (html) ->\n  stripped = stripWhitespace(html)\n  stripped.replace(/></g, '> <')\n. ",
    "spirityy": "xss\n. i have found quilljs remove xss support,i find a pulgin to replace\n. how can i insert link tag link 'a' into editor,i don't want to use default link module. \n. How's it going\uff1fIt is very useful to me\u3002Can i insert embed tag now\uff1f\n. ",
    "unhammer": "What's the current solution to this? The docs at http://quilljs.com/docs/modules/keyboard/#configuration don't show how to add a keybinding for tab to act as the \"prioritised\" handler that can then decide whether or not to propagate to the built-in handlers.\n. OK, I just did\nquill.keyboard.addBinding({\n  key: 9,\n}, function(range, context) {\n  console.log(\"tab!\");\n  return true;\n});\nquill.keyboard.bindings[9].unshift(quill.keyboard.bindings[9].pop())\nAn optional prepend bool-arg to addBinding might be useful? Unless this kind of thing leads to more breakage than it's worth :-)\n. But is there then a way to set a span using text indices, similar to what formatText does, but with a span with an arbitrary class?\n. How about changing formatText() instead of adding fillers? If getText() only extracts string contents, I would expect formatText() to only apply to string contents.\nThe use case is linting the plaintext, and providing underlines under the right substrings, while being robust against rich-text clipboards from all kinds of sources. \nIf there's a list of \"unsafe\" elements that add filler indices in formatText() but not getText(), I suppose I could count such elements preceding the given start/end indices, and write a wrapper to formatText() that will allow round-tripping indices with getText().\n. Can I still get a hold of range.index from a DOM click event? I'm doing \nonSelectionChange = function(range, _oldRange, source) { \n  let idx = range.index; \n  let blot_and_offset = this.quill.scroll.descendant(ErrorBlot, idx); \n  let beg = idx - blot_and_offset[1]; \n  let blot = blot_and_offset[0];\n  \u2026\n };\nmore or less, in order to get the Blot at that point, along with its beginning and length.. slightly simplified:\nlet Inline = Quill.import('blots/inline');\nclass ErrorBlot extends Inline {\n  static create(err/*:err*/) {\n    let node = super.create();\n    if(typeof(err) != \"object\") {\n      console.log(\"Error creating ErrorBlot, expected object, not \"+typeof(err));\n      return super.create();\n    }\n    $(node).data(\"error\", err);\n    return node;\n  }\n  static formats(node) {\n    return $(node).data(\"error\");\n  }\n}\nErrorBlot.blotName = 'error';\nErrorBlot.tagName = 'span';\nErrorBlot.className = 'divvun-error';\nQuill.register(ErrorBlot);. I was unsure if just the blot element would have enough info to safely remove/unwrap the blot, or change the text contents in it, but after looking through https://github.com/quilljs/parchment/#blots I see I can use Quill.find(node).offset(quill.scroll) to get the the beginning/offset, and Quill.find(node).length()) to get the length, so I believe that gives me all the information I need :-)\nThanks! I'll close this then; using a normal DOM click event seems like a better solution than a \"partial readonly\" state.. ",
    "julianlam": "@unhammer For what it's worth, your trick works quite well to override a default binding without actually removing the default behaviour completely. My use case was exactly the same as yours, I wanted to integrate a textcomplete dropdown.\nvar doAutocomplete = function () {\n    return !textcompleteDropdownIsOpen();\n};\n[9, 13].forEach(function (keyCode) {\n    quill.keyboard.addBinding({\n        key: keyCode,\n    }, doAutocomplete);\n    quill.keyboard.bindings[keyCode].unshift(quill.keyboard.bindings[keyCode].pop());\n});\nSo as of late 2018, this still works :smile: . ",
    "satyapendem": "Hi,\nHow i can override the CMD+B. And I want to make changes like when user selects a text and CMD+B then it should convert to markdow.. Hi,\nHow i can override the CMD+B. And I want to make changes like when user selects a text and CMD+B then it should convert to markdow.. Hi @che3vinci ,\nHow you fixed this issue. I'm also facing same problem.. Hi @che3vinci ,\nHow you fixed this issue. I'm also facing same problem.. Hi @MadSpindel \nI'm using Quill-Mentions with MarkdownShortCuts(https://github.com/patleeman/quill-markdown-shortcuts). \n```\n\n\n\nPage Title\n\n\n\n\n\n\n\n\n\n  quill mention dist file\n    <script>\n        Quill.register('modules/markdownShortcuts', MarkdownShortcuts);\n        const atValues = [\n            { id: 1, value: 'satya' },\n            { id: 2, value: 'sandy' }\n        ];\n        const hashValues = [\n            { id: 3, value: 'Fredrik Sundqvist 2' },\n            { id: 4, value: 'Patrik Sj\u00f6lin 2' }\n        ]\n        var quill = new Quill('#editor', {\n            theme: 'snow',\n            modules: {\n                markdownShortcuts: {},\n                mention: {\n                    allowedChars: /^[A-Za-z\\s\u00c5\u00c4\u00d6\u00e5\u00e4\u00f6]*$/,\n                    mentionDenotationChars: [\"@\", \"#\"],\n                    source: function (searchTerm, renderList, mentionChar) {\n                        let values;\n\n                        if (mentionChar === \"@\") {\n                            values = atValues;\n                        } else {\n                            values = hashValues;\n                        }\n\n                        if (searchTerm.length === 0) {\n                            renderList(values, searchTerm);\n                        } else {\n                            const matches = [];\n                            for (i = 0; i < values.length; i++)\n                                if (~values[i].value.toLowerCase().indexOf(searchTerm.toLowerCase())) matches.push(values[i]);\n                            renderList(matches, searchTerm);\n                        }\n                    },\n                }\n\n            }\n        });\n    </script>\n</div>\n\n\n```\nhere is my code. https://cl.ly/ad07c5ee8c53 . I'm facing problem first if do mention. Hi @MadSpindel \nI'm using Quill-Mentions with MarkdownShortCuts(https://github.com/patleeman/quill-markdown-shortcuts). \n```\n\n\n\nPage Title\n\n\n\n\n\n\n\n\n\n  quill mention dist file\n    <script>\n        Quill.register('modules/markdownShortcuts', MarkdownShortcuts);\n        const atValues = [\n            { id: 1, value: 'satya' },\n            { id: 2, value: 'sandy' }\n        ];\n        const hashValues = [\n            { id: 3, value: 'Fredrik Sundqvist 2' },\n            { id: 4, value: 'Patrik Sj\u00f6lin 2' }\n        ]\n        var quill = new Quill('#editor', {\n            theme: 'snow',\n            modules: {\n                markdownShortcuts: {},\n                mention: {\n                    allowedChars: /^[A-Za-z\\s\u00c5\u00c4\u00d6\u00e5\u00e4\u00f6]*$/,\n                    mentionDenotationChars: [\"@\", \"#\"],\n                    source: function (searchTerm, renderList, mentionChar) {\n                        let values;\n\n                        if (mentionChar === \"@\") {\n                            values = atValues;\n                        } else {\n                            values = hashValues;\n                        }\n\n                        if (searchTerm.length === 0) {\n                            renderList(values, searchTerm);\n                        } else {\n                            const matches = [];\n                            for (i = 0; i < values.length; i++)\n                                if (~values[i].value.toLowerCase().indexOf(searchTerm.toLowerCase())) matches.push(values[i]);\n                            renderList(matches, searchTerm);\n                        }\n                    },\n                }\n\n            }\n        });\n    </script>\n</div>\n\n\n```\nhere is my code. https://cl.ly/ad07c5ee8c53 . I'm facing problem first if do mention. ",
    "pmarreck": "Quill is still using p tags when you hit Return in an editor, and it's (still) messing up my attempts to have people edit an html email signature (due to the aforementioned issues)... what's the deal?. ",
    "khizarvaio": "I think this should be reopened. \nSteps to reproduce: \n1. Empty all editor text. \n2. Place one empty new-line at start.\n3. Add some bullets.  (e.g. 2 or 3). any other format would work too :)\n4. Select all content e.g. Ctrl+A and copy Ctrl + C.\n5. Place some empty new lines at end of editor. \n6. Now paste content. \n7. Notice no formats to newly pasted content are applied. \nI've updated the jsfiddle http://jsfiddle.net/khizarmanzoor/Fend4/1/\n. I think this should be reopened. \nSteps to reproduce: \n1. Empty all editor text. \n2. Place one empty new-line at start.\n3. Add some bullets.  (e.g. 2 or 3). any other format would work too :)\n4. Select all content e.g. Ctrl+A and copy Ctrl + C.\n5. Place some empty new lines at end of editor. \n6. Now paste content. \n7. Notice no formats to newly pasted content are applied. \nI've updated the jsfiddle http://jsfiddle.net/khizarmanzoor/Fend4/1/\n. ",
    "ayalpani": "Just a note:\n\nWhat about something like quill.getLength() === 0? Or if you want to ignore whitespace quill.getText().trim().length === 0.\n\nIf I only add an image, but no text, quill.getText().trim().length returns 0 too. (And getLength() returns 1)\n. Just a note:\n\nWhat about something like quill.getLength() === 0? Or if you want to ignore whitespace quill.getText().trim().length === 0.\n\nIf I only add an image, but no text, quill.getText().trim().length returns 0 too. (And getLength() returns 1)\n. ",
    "nvdhunter": "This is what i end up using.\nisQuillEmpty(){\nreturn this.quill.getContents().ops[0].insert == '\\n' && this.quill.getLength() < 2;\n}\nUse getContents() since it doesn't ommit image delta.\nIf its a newline check op length.\n--if there's only one op, than that's quill's default newline and it is considered empty.\n--otherwise that's probably user's newline because quill creates new op when you press enter.. ",
    "alexdoronin": "Suppose we have an image upload. Images are inserted as IMG tags. \nCases:\n\"Hit Enter or several Enters\" = Quill is empty = Don't save/submit.\n\"Only image uploaded (no any text)\" = Quill is not empty = Save/Submit.\n`js\nisQuillEmpty() {\n  return this.quill.getText().trim().length === 0 && this.quill.container.firstChild.innerHTML.includes(\"img\") === false;\n}. ",
    "nathanieltagg": "@alexdroronin That won't work if there's a formula.  We need a solution that's a bit more general...\n. ",
    "bologer": "@nathanieltagg I would suggest using some regex to validate content. I use this, quite reliable.\njs\n/**\n * Check whether editor content is empty or not.\n * @return {Bool}\n */\nisEmpty = () => {\n    const commentText = this.quill.getText().trim();\n    const re = /^<p>(<br>|<br\\/>|<br\\s\\/>|\\s+|)<\\/p>$/gm;\n    return re.test(commentText);\n};\n. @jhchen could you please show an example how to set custom link pop-up template so I can inject translations directly there?\nOr at least show how to repro this: \n\nand this with custom template:  \n\nI am having project, where editor should be displayed per language. The CSS content isn't the best choice in this case.\n. @bjorn-ali-goransson use this. @benbro interesting approach. Is this really the way it is?. ",
    "rchrd2": "Hi @jhchen, thanks for responding. I put together a js-fiddle to recreate the issue. You can view it here: http://jsfiddle.net/4R2bT/3/. Just hit the run button and then type some text in the bottom right frame. You'll see what happens in the output textarea.\nThe result is a nesting of spans like this:\n<p id=\"line-1\" class=\"line\">Click here and type some text.<span class=\"test\"><span class=\"test\"><span class=\"test\"><span class=\"test\"><span class=\"test\"><span class=\"test\"><span class=\"test\"> #Hashtags</span></span></span></span></span></span></span> are highlighted.<span class=\"test\"><span class=\"test\"><span class=\"test\"><span class=\"test\"> #test</span></span></span></span></p>\nAny thoughts?\n. The hash tag is just one example, but we are building a text editor that dynamically highlights certain things. For example, it could highlight hashtags, @mentions, links, and so on. Quill is the only editor that allows us to do this because of its Api for directly formatting based on positions. Another way to think of what we are creating is syntax highlighting. Css classes can be used to attach style and also javascript behaviors such as popovers.\nQuill is also a great choice for this because it works on mobile and it allows custom fonts.\nDoes that make sense?\nThanks!\n. ",
    "openhouse": "We're exploring making a syntax highlighter with Quill, like a code editor (#116) .  Plain text comes in and plain text goes out.  That's our main concern.  Quill API is used to display syntax highlights while editing.\nSo when we format text by adding a css class, we are not concerned about those styles copying and pasting in and out of the editor (as you point out in #85).\nFor example, if we made something like a native Quill @mention module (#81) it would be great to have the highlights information layer use classes instead of styles because it's about labeling semantic info rather than applying a specific visual style.  Themes could then give styles to various highlight types.\nOur current issue with css classes in Quill is redundant nesting of spans with the same class name over and over again in the DOM.  Whereas with color, bold or italic quill automatically resolves redundant nesting.\nIn the short term this could be solved if we were able to \"remove every format\" from the editor, as discussed in #77.\nCurrently it doesn't seem possible to remove formats that add css class attributes at all through the API.  It would be awesome if we could toggle all css classes off.\neditor.formatText(0, 10, 'cssClass', 'some-css-class');\neditor.formatText(0, editor.getLength(), 'cssClass', false);\nI should dig deeper into how links and the modules are working in Quill.  Overall Quill is awesome and very promising!\n. Thank you for this insight, it's really helpful.  @rchrd2 is out of town this week, we'll try this out when he's back.\n. I think you would configure that editor like this\nvar editor = new Quill('#editor', {\n  'styles': {\n    'body': {\n      'font-family': \"Arial, sans-serif\",\n      'font-size': '24px',\n    }\n  }\n});\nfor a little more there is another example under \"styles\" in the docs http://quilljs.com/docs/editor/configuration/ \n. ",
    "mariohd": "@KrisMerckx i do have the same issue =/ \nWhen i try to add a video tag, it is replaced by a div, the workaround that i did, was to add on other container and when i do submit the text, i do append the video tag. \nMaybe not the best solution, but it is working to add videos. I am trying to figure out how i will edit the content with video tags. \n. @KrisMerckx i do have the same issue =/ \nWhen i try to add a video tag, it is replaced by a div, the workaround that i did, was to add on other container and when i do submit the text, i do append the video tag. \nMaybe not the best solution, but it is working to add videos. I am trying to figure out how i will edit the content with video tags. \n. ",
    "DunniAdenuga": "@jhaenchen were you able to sort this out ?. @jhaenchen were you able to sort this out ?. @jhaenchen Please, can I see this app example ?. @jhaenchen Please, can I see this app example ?. ",
    "jhaenchen": "@DunniAdenuga Yes I did, I believe I used some of the code found in https://github.com/quilljs/quill/issues/1036 to create a custom class attribute formatter. . I use this in my app for custom styling on each word excluding spaces and to get data from their classnames.. ",
    "kimberley-p": "Am on 0.15.3, recently updated from 0.13.2 and having same problems on both. I will look into creating a live demo if possible.\n. ",
    "devtimi": "I can't get this configuration to work.  I've confirmed that some configurations work like background-color, but font-size is overridden by a mysterious .ql-line style set at 15px!important\n. Version 0.19.8\nHere's what Inspect Element is showing\n\n. Line 1 is <!DOCTYPE html>\nThe comments look sequential, so I'm not sure /*ffs*/ is intentionally offensive from wherever it originated.  I'm going to try updating to 0.19.10 to see if that helps, but I'm not very confident it will.\n. Thanks for the workaround :)\nI'm still stuck with the popup lists still showing the behavior.\n. ",
    "jbhamilton": "Any progress on this?\n. ",
    "wpscholar": "I'd like to see this as well.  Is this moving forward?\n. ",
    "intarsz": "Maybe it is possible to make a special fix for setting html when editor is empty? At the moment editor is not usable for editing some existing html content.\n. Maybe it is possible to make a special fix for setting html when editor is empty? At the moment editor is not usable for editing some existing html content.\n. ",
    "naeemkhedarun": "I've also bumped into this issue when putting a large document into the editor using insertText, setContents and updateContents. After profiling the issue did seem to be in the diff library processing those nested loops. Looking forward to your fix!\n. ",
    "core433": "I know this issue is resolved for populating an empty doc but I ran across a related issue in case anyone else's search brings them here.\nWhen I have an existing quill editor with a large content and setHtml to a new large content, it again freezes JS for a long long time.  A profile shows the majority of time is spent in the diff algorithm.\nIf you're running into this, run editor.setContents([]); before running editor.setHtml();  This will clear the Delta and thus bypass the need to calculate a huge diff between two text files.\nLastly, thanks for maintaining quill, it's great.\n. I tried @kleinph 's solution and it works for me.  The issue for me was some of the color boxes were kinda small and if you don't click exactly inside of them you lose the text selection.\n. +1.\nI use strikethroughs with gray font color, and whether the strikethrough is black or gray is order-dependent.  I'd like it to always be a gray strikethrough, but it's black if I strikethrough before I apply gray font color.\nPerhaps non-span-style tags like \n<s>\nshould always be placed within adjacent style span tags.\n. ",
    "scottjacobsen": "For what it is worth we do this server side. There's not way to enforce something like this client side since a user can always alter the data before it is submitted.\n. For what it is worth we do this server side. There's not way to enforce something like this client side since a user can always alter the data before it is submitted.\n. I can re-create on FF for mac. Put in at least 100 lines of text, scroll to the bottom, and hit bold, italic, or probably anything. It will scroll back up. It doesn't scroll up if you hit cmd-b.\nI haven't been able to reproduce with chrome or safari on mac.\n. I can re-create on FF for mac. Put in at least 100 lines of text, scroll to the bottom, and hit bold, italic, or probably anything. It will scroll back up. It doesn't scroll up if you hit cmd-b.\nI haven't been able to reproduce with chrome or safari on mac.\n. So far I've tracked it down to calling focus() on the editor div.\nWhen clicking a formatting link we hit this:\nhttps://github.com/quilljs/quill/blob/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e/src/lib/dom.coffee#L127\nThen we hit @quill.focus()\nhttps://github.com/quilljs/quill/blob/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e/src/modules/toolbar.coffee#L67\nI can confirm that just calling focus on the editor scrolls it to the top, but only if the document is long enough and you are scrolled down far enough. Excuse the JQuery, but just run something like this in the console:\n$($('iframe')[0]).contents().find('#quill-1')[0].focus()\nAnd it will scroll to the top.\n. So far I've tracked it down to calling focus() on the editor div.\nWhen clicking a formatting link we hit this:\nhttps://github.com/quilljs/quill/blob/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e/src/lib/dom.coffee#L127\nThen we hit @quill.focus()\nhttps://github.com/quilljs/quill/blob/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e/src/modules/toolbar.coffee#L67\nI can confirm that just calling focus on the editor scrolls it to the top, but only if the document is long enough and you are scrolled down far enough. Excuse the JQuery, but just run something like this in the console:\n$($('iframe')[0]).contents().find('#quill-1')[0].focus()\nAnd it will scroll to the top.\n. This commit fixes it for FF - https://github.com/quilljs/quill/commit/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e. \nFocusing the iframe before focusing the editor div seems to do it. From what I can tell focusing the iframe is sufficent to focus the editor div, so maybe there is no reason to call @root.focus().\nIt does not fix it for IE11 though.\n. This commit fixes it for FF - https://github.com/quilljs/quill/commit/0a669f05844086e403f6ac6f016f0c0e0ae0dd1e. \nFocusing the iframe before focusing the editor div seems to do it. From what I can tell focusing the iframe is sufficent to focus the editor div, so maybe there is no reason to call @root.focus().\nIt does not fix it for IE11 though.\n. I just cherry-picked this one in. It fixes IE :+1:, but breaks it for FF :cry:\n. I just cherry-picked this one in. It fixes IE :+1:, but breaks it for FF :cry:\n. The key for FF is to focus the iframe first. This appears to work for me in FF, IE11 and Chrome:\nfocus: ->\n    if @selection.range?\n      @selection.setRange(@selection.range)\n    else\n      @renderer.iframe.focus()\n      @root.focus()\n. The key for FF is to focus the iframe first. This appears to work for me in FF, IE11 and Chrome:\nfocus: ->\n    if @selection.range?\n      @selection.setRange(@selection.range)\n    else\n      @renderer.iframe.focus()\n      @root.focus()\n. Actually my fix isn't working with FF. Still trying to figure it out.\n. Actually my fix isn't working with FF. Still trying to figure it out.\n. I believe my latest commit - scottjacobsen@d34b3cf21b7a08d229e64f0ef4e2f59ddaa567ea works for the trifecta of desktop browsers IE11, FF, and Chrome.\n. Just realized you are removing iframes, so that stuff about FF and iframes doesn't apply to the latest. Does it make sense to do a 0.18.2 maintenance release with this fix?\n. ",
    "mzf": "+1 when adding link in modal window need checkbox - open in new windows\n. +1 when adding link in modal window need checkbox - open in new windows\n. ",
    "Joeao": "I made an attempt at adding this as an option when initiating a Quill object. I'm not completely happy with the implementation as it involves passing the option through a number of functions. As I'm not too familiar with the plugin, it's possible that there's a better way of achieving the results. It's a starting point at least.\nHere's my commit:\nhttps://github.com/Joeao/quill/commit/802fccb14b92716a76de54329bd94ad6ed0c2b68\nCompiled file:\nhttps://gist.github.com/Joeao/0c33f63c6aba38e8e80f\nLet me know how it can be improved. Link targeting is a feature that I'd like to see in a future version.\n. @jbrooksuk It doesn't claim to act similar to word. Though, the next update and inclusion of Parchment may provide you with an experience closer to what you're hoping for.\n. What's the correct way to do this in 1.X?\nPreviously quill.modules.keyboard.removeHotkeys({ key: 13 }); had worked. Disabling bindings works for keys such as tab. However I can't find a way to prevent handleEnter from occurring. The documentation suggests that it just straight up can't be done due to dangerous behaviour, though it could in 0.21 with seemingly no implications.\n. Thanks @jhchen, the following worked just fine to prevent a new line and tab space\njavascript\nkeyboard: {\n    bindings: {\n        tab: false,\n        handleEnter: {\n            key: 13,\n            handler: function() {\n                // Do nothing\n            }\n        }\n    }\n}\n. Oh awesome. Did run a few searches but assumed it'd be an open issue. My b.\n. In your particular example, using setText would be a better choice.\n. You can also just add {styles: false} to the options #411.\n. Is it possible that you were experiencing #487? Caused by moving the mouse whilst clicking the toolbar.\n. #90 \n. Legacy bug? I think it's fair to close this as it isn't relevant to the current branches. I'll make sure to test this issue out again when the multi-cursor module is re-introduced.\n. Can confirm on Firefox but no other browsers.\nOSX 10.11.3\n. Seems to be a bug with Firefox itself? Getting the same issue on Quill 0.20.1 and codepen\nIt can be fixed by setting\ncss\n.ql-editor.ql-empty::before {\n    pointer-events: none;\n}\nWhich seems to fit into the same browser compatibility as Quill 1.0, but there may be a better solution.\n. Cannot reproduce on OSX 10.11.3, Chrome 50.0.\n. If you're happy with the comment which partially answers your question, though whether it's part of 1.x hasn't been specified. You should close the issue. But on a side note:\nAre you using a library that enables real time collaboration? If so, which one?\n. @seanippolito I'm having success with the quill-cursors module. *Grammar. Hi @curiousdj,\nYou're better off asking on Stackoverflow as Github issues are generally for bugs or feature requests for the project and its documentation, rather than questions on how to best use it. That way it makes it easier for the developer/s to get on with the important tasks for the project.\nThat being said, I think issue #662 should help with your particular issue.. If I'm imagining your scenario correctly, then I'd advise either:\n1. Copy the contents of the quill instance, destroy the DOM element, create a new DOM element and paste the contents back in\n2. Use disable via the API as you've already tried, but also style disabled Quill instances to not show any differentiation.\nI've gone with the second option. In fact in my use case I set up the Quill instances on page load and set them as disabled, then a user interaction will enable them. See example below.\n. I've given a code example on SO, should be good to get you on your way.\nFrom here I'd recommend you close this issue and continue the discussion on Stack Overflow if you have questions, you can still also comment here even if the issue's closed.. Noticed this today too on Firefox.\nI checked out your codepen and reverted a bunch of versions, turns out this issue started occurring from version 1.0.6. It also occurs in 2.0.0-dev.2, so seems to be something worth pursuing. Will dig deeper.. Looks like https://github.com/quilljs/quill/commit/c70455d459ddf873dbad059e909eb42d0684cb9a is the commit that caused this issue. I put the code back into 1.0.6 and 1.3.6 and the issue disappeared. However these lines were removed to fix another issue so simply adding it back isn't really an option.\n\nAlso checked if issue #997 still exists if this code was put back, and it does. Going to have to leave it to the higher powers to decide how to fix this one.. Unless I've completely missed something, Quill is just a rich text editor, it doesn't do anything with a backend. Sure you can send data to a server, but that's outside of Quill. So to answer your question, yes you can use it without NodeJS and configuration can be found in the documentation.\nBy the way I recommend you submit any questions to Stack Overflow as the purpose of Github Issues is to discuss problems and potential enhancements with the project.. I want to refer to benbro's comment https://github.com/quilljs/quill/issues/2215#issuecomment-410160563 on a similar issue.\nQuill works on div elements, not textarea.. How is anything meant to be styled if it's wrapped inside a textarea? How are links meant to work, how are image embeds meant to work? And what is a \"form-has-changed-check\"? All rhetorical questions, no answer required.\nAlso, Github issues are meant for bugs, feature requests and documentation updates on the project, not for help on how to use the project. Use Stackoverflow instead.. ",
    "shikolay": "+1\n. +1\n. ",
    "scottsheffield": "The recently announced beta of Quill does this now. For those who need further customization, modification of the Link blot is as easy as extending it and modifying the create function.\n. The recently announced beta of Quill does this now. For those who need further customization, modification of the Link blot is as easy as extending it and modifying the create function.\n. Deltas are lists of operations, built using rich-text. For your use, here, you'd probably just want to accept the delta, look at the ops attribute (an array of operation objects), and strip out the attributes on each operation that would apply the nonsense you don't want.\n. I suppose I'm assuming that your quill wouldn't be leveraging style attribute stuff to apply formats (leaning more heavily on blots and class attributors). If you know your formats all tie to a class or element or so on, you can then assume that any op with attributes.style are coming from external paste.\n. If you're using a specific, known set of colors/highlight colors, you could get away with all of that styling using only classes and elements (.strikethrough, <strong> etc), which would make your life much easier. Otherwise, I would look into what your ops actually contain on paste from external sites and what your formatting applies to an op, and then code your way from there. Hopefully it doesn't result in string manipulation nonsense if it doesn't have to.\nAn alternative is to pull from the develop branch and utilize the new clipboard to parse out styles from external markup.\n. @sachinrekhi Yes, for our project we're working with quill on develop. Just finished a quill module that accepts incoming content pastes from known external content providers and converts them to their equivalent markup/styling/attributes/blots in Quill. Pasting Medium and getting the right formats in a specific way, not merely relying on Quill's very accurate coercion.\n. @sachinrekhi Yes, for our project we're working with quill on develop. Just finished a quill module that accepts incoming content pastes from known external content providers and converts them to their equivalent markup/styling/attributes/blots in Quill. Pasting Medium and getting the right formats in a specific way, not merely relying on Quill's very accurate coercion.\n. Also seconding the Boo TinyMCE. \n. Also seconding the Boo TinyMCE. \n. The difference between Quill's default clipboard behavior and my extension of that behavior (note, my module is fully dependent on Quill's clipboard), is just that it allows me to get specific.\nClipboard looks at the entirety of the node that is incoming (say, Medium's Primary Heading <h3 name=\"bfc3\" class=\"graf--h3\">Primary Heading</h3>), and then uses every bit of information available on that node to try and coerce it to the proper blot. In vanilla quill, this means it becomes a Header blot with an H3 node, dropping the name and class, and adding an ID generated from the content (functionality courtesy of the Header blot), resulting in this markup: <h3 id=\"primary-heading\">Primary Heading</h3>\nBut since I know Medium uses an H3 to represent a Primary Heading, and I know I use an H2 for Primary Headings, my module matches the Medium H3 (.graf--h3), and then applies my PrimaryHeading blot to that operation (PrimaryHeading is a simple Block extension that uses H2 for blot.tagName and doesn't add an ID based on the content), resulting in this markup: <h2>Primary Heading</h2>, which looks like a primary heading in my editor, making the paste from Medium to Quill result in markup that looks like you wrote it in Quill originally.\n@sachinrekhi - As for Quill develop's stability, I obviously find it stable enough to work on and work with extensively, but feel free to judge for yourself.\n. The difference between Quill's default clipboard behavior and my extension of that behavior (note, my module is fully dependent on Quill's clipboard), is just that it allows me to get specific.\nClipboard looks at the entirety of the node that is incoming (say, Medium's Primary Heading <h3 name=\"bfc3\" class=\"graf--h3\">Primary Heading</h3>), and then uses every bit of information available on that node to try and coerce it to the proper blot. In vanilla quill, this means it becomes a Header blot with an H3 node, dropping the name and class, and adding an ID generated from the content (functionality courtesy of the Header blot), resulting in this markup: <h3 id=\"primary-heading\">Primary Heading</h3>\nBut since I know Medium uses an H3 to represent a Primary Heading, and I know I use an H2 for Primary Headings, my module matches the Medium H3 (.graf--h3), and then applies my PrimaryHeading blot to that operation (PrimaryHeading is a simple Block extension that uses H2 for blot.tagName and doesn't add an ID based on the content), resulting in this markup: <h2>Primary Heading</h2>, which looks like a primary heading in my editor, making the paste from Medium to Quill result in markup that looks like you wrote it in Quill originally.\n@sachinrekhi - As for Quill develop's stability, I obviously find it stable enough to work on and work with extensively, but feel free to judge for yourself.\n. If I'm remembering correctly, you guys are actually constructing the markup for the toolbar in Slate. Is that markup not usable if it doesn't use spans for the dropdown items, say if you switch to something focusable (button, whatever)?\n. If I'm remembering correctly, you guys are actually constructing the markup for the toolbar in Slate. Is that markup not usable if it doesn't use spans for the dropdown items, say if you switch to something focusable (button, whatever)?\n. ",
    "bobmagicii": "so dumb question, did this ever become an /option/ or is it now instead of all links are same tab all links are new tabs? kinda lolling to myself over here trying to use it in a cms and every single link on the site to internal pages opens in new tabs.. ",
    "vladikoff": "Also hitting this issue. I'm guessing we can try to prevent drag and drop events\nThoughts @jhchen ?. ",
    "mik01aj": "It's exactly the same thing; the behaviour varies a bit from time to time, though.\n. It's exactly the same thing; the behaviour varies a bit from time to time, though.\n. ",
    "steviesama": "This is happening to me to on quilljs.com front page as well.\n. This is happening to me to on quilljs.com front page as well.\n. @jhchen There's really only a couple of possibly characterizing details I could offer. First, if you goto the quilljs.com front page using that demo, if you select any text anywhere inside the document, clicking bold, or the link icon, will deselect whatever you had and move the cursor to just after \"Quill Rich Text Editor\". I thought maybe one of my extensions was causing it so I disabled them all. For a moment after I disabled them, it let me bold and link something, but at some undetermined short amount of time after, it resumed the same behavior, with the extensions still off.\n. @jhchen There's really only a couple of possibly characterizing details I could offer. First, if you goto the quilljs.com front page using that demo, if you select any text anywhere inside the document, clicking bold, or the link icon, will deselect whatever you had and move the cursor to just after \"Quill Rich Text Editor\". I thought maybe one of my extensions was causing it so I disabled them all. For a moment after I disabled them, it let me bold and link something, but at some undetermined short amount of time after, it resumed the same behavior, with the extensions still off.\n. @jhchen I went back and tried all the other formatting controls, and they all have that same behavior. I feel like something is interfering with it, but I haven't a clue what.\n. @jhchen I went back and tried all the other formatting controls, and they all have that same behavior. I feel like something is interfering with it, but I haven't a clue what.\n. @jhchen Chrome Version 43.0.2357.130 m, Windows 8.1, and no errors in console. Just the welcome to quilljs message.\n. @jhchen Chrome Version 43.0.2357.130 m, Windows 8.1, and no errors in console. Just the welcome to quilljs message.\n. ",
    "furcino": "Hello, I have the sae problem as described by steviesama. Chrome Version 50.0.2661.102 m and windows 10.\n. Hello, I have the sae problem as described by steviesama. Chrome Version 50.0.2661.102 m and windows 10.\n. ",
    "RavidGolan": "\nThe html does change.. i would like to save my html and open it later..\n   i tried:\n   quill.theme.addStyles({\n       'div': { 'line-height': '24px' }\n   });\n   var html = quill.getHTML();\n   $('#myHtml').val(html);       // does not contains line-height\nhow can i change it? i would like to change the line-height\n. \n",
    "Jiiun": "it seems like the latest version dose not exist the addStyle api. I can not setup the line height style.\n\n. @benbro thanks for your replying. how can i set line-height in each line just like below\n\n. @benbro thanks for your replying. how can i set line-height in each line just like below\n\n. thank you very much~. thank you very much~. \nhaha! I fixed it. \nhaha! I fixed it. ",
    "tomcon": "@benbro whatever I try nothing works and I've spent a couple of hours on this already. Everything looks fine but it is always received in Outlook or GMail with large line-spacing (see pic below). \n-webkit-margin-after: 1em;\n   -webkit-margin-before: 1em;\nseem to be the culprits but I set them in the css but no luck. \nIs the way around this to add inline styles & if so, is it easy to add them?\nIs it a Quill issue or has anyone else come across this one? Any help much appreciated.\n.ql-editor  {\n   line-height: 1.20 !important;\n   font-family: Calibri, Helvetica !important;\n   font-size: 15px !important;\n   -webkit-margin-after:0px;\n   -webkit-margin-before:0px;\n}\n.ql-editor p {    line-height: 1.2;}\n\n. @benbro \nwith respect: \"Does quill have customizable line spacing ability?\" is completely related to my question.\nI've read the guide quite a bit in the past and again just now but it is not very clear on this topic plus I am using ES5 and all examples are ES6. \nCan anyone help with an example please of how to simply add a default line-height inline rule to all paragraph tags? This has cropped up late in our project and we didn't think we'd hit this problem so any help would be much appreciated (don't want to have to so a search and replace type-exercise post edit). \nThanks . For anyone else that may come here with a similar problem:\nbest short term solution was to replace < p > with < br > and removing < /p > on editor save (adding inline-styles still had issues).\nSee also: https://stackoverflow.com/questions/38024698/html-email-how-do-you-remove-webkit-margin-before-1em-webkit-margin-after. EDIT: figured it out by this example:\nhttps://github.com/quilljs/quill/blob/7a9d86a149f5aa39cc05c819f87c8ea2f2412735/docs/assets/css/styles.css#L886\nGreat work btw!\nI'm having the same problem - but with using the cfg object rather than the answer.\nSingle font names are working fine but what is the css syntax for fonts with spaces (tried using a dash but no luck): .ql-font-open-sans            {  font-family: 'Open Sans'         , sans-serif;}\n```\n quillFonts  = ['arial',  'calibri',  'courier new', 'georgia', 'lucida sans unicode', \n                     'open sans', 'roboto', ...     ];\nvar fonts = Quill.import('formats/font');\nfonts.whitelist = quillFonts;\nthis._quill = new Quill(editor, {\n         modules: {\n            toolbar: [\n               [{ 'font': fonts.whitelist }],\n````\n```\n.ql-font-arial                {  font-family: 'Arial'             , sans-serif;}\n.ql-font-open-sans            {  font-family: 'Open Sans'         , sans-serif;}  DOESN'T WORK\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=arial]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=arial]::before {\n    content: 'Arial/Helvetica';  font-family: 'Arial', 'Helvetica';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"open sans\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"open sans\"]::before {\n    content: 'Open Sans';  font-family: 'Open Sans', sans-serif;\n} DOESN'T WORK\n```\n. @jhchen it's not that useful to be honest as in the example, the only font with spaces is set as default for the container in the css. So imo there is no example of implementing something fairly common, custom fonts with spaces in the names. The solution was:\n```\n      quillFonts  = ['arial',  'calibri',  'courier', 'georgia', 'lucida', \n                     'open', 'roboto',  'tahoma',  'times',  'trebuchet',  'verdana'     ];\n  var fonts = Quill.import('formats/font');\n  fonts.whitelist = quillFonts;\n\n  this._quill = new Quill(editor, {\n     modules: {\n        toolbar: [\n           [{ 'font': fonts.whitelist }],\n           ....\n\nand the css:\n.ql-font-arial                {  font-family: 'Arial'             , sans-serif;}\n.ql-font-roboto               {  font-family: 'Roboto'            , sans-serif;}\n.ql-font-calibri              {  font-family: 'Calibri'           , sans-serif;}\n.ql-font-courier              {  font-family: 'Courier New'       , serif;    }\n.ql-font-georgia              {  font-family: 'Georgia'           , sans-serif;}\n.ql-font-lucida               {  font-family: 'Lucida Sans Unicode', sans-serif;}\n.ql-font-open                 {  font-family: 'Open Sans'         , sans-serif;}\n.ql-font-tahoma               {  font-family: 'Tahoma'            , sans-serif;}\n.ql-font-times                {  font-family: 'Times New Roman'   , sans-serif;}\n.ql-font-trebuchet            {  font-family: 'Trebuchet Ms'      , sans-serif;}\n.ql-font-verdana              {  font-family: 'Verdana'           , sans-serif;}\n(probably don't need the double quotes below)\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=arial]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=arial]::before {\n    content: 'Arial';  font-family: 'Arial', 'Helvetica';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=calibri]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=calibri]::before {\n    content: 'Calibri'; font-family: 'Calibri', sans-serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=roboto]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=roboto]::before {\n    content: 'Roboto'; font-family: 'Roboto', sans-serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"courier\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"courier\"]::before {\n    content: 'Courier New';  font-family: 'Courier New';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=georgia]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=georgia]::before {\n    content: 'Georgia';  font-family: 'Georgia', sans-serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"lucida\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"lucida\"]::before {\n    content: 'Lucida Sans';  font-family: 'Lucida Sans Unicode', sans-serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"open\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"open\"]::before {\n    content: 'Open Sans';  font-family: 'Open Sans', sans-serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=tahoma]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=tahoma]::before {\n    content: 'Tahoma';  font-family: 'Tahoma';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"times\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"times\"]::before {\n    content: 'Times New Roman';  font-family: 'Times New Roman';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"trebuchet\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"trebuchet\"]::before {\n    content: 'Trebuchet MS';  font-family: 'Trebuchet MS';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=verdana]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=verdana]::before {\n    content: 'Verdana';  font-family: 'Verdana', sans-serif;\n```\n. ",
    "xiechao1211": "@Jiiun \u4f60\u597d\uff0c\u6211\u60f3\u95ee\u4e0b\uff0c\u4f60\u7684\u884c\u9ad8\u529f\u80fd\u5177\u4f53\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\ntoolbar\u91cc\u5982\u4f55\u5b9a\u4e49?. ",
    "miracle9312": "\n\nhaha! I fixed it\nstill does not work\n. > @tomcon This issue is old and unrelated to your question.\nQuill uses classes by default. To make the output work in email you need to use inline styles instead.\nRead this guide about using inline style attributes.\n``` import Parchment from 'parchment';\n    import _Quill from 'quill';\n    import { sizeWhiteList, alignWhiteList } from './formats'\n    const Quill = window.Quill || _Quill;\n    let config = {\n        scope: Parchment.Scope.INLINE,\n        whitelist: ['1.0em','1.1em','1.2em','1.3em','1.4em','1.5em','1.6em']\n    }\n    var lineHtStyle = new Parchment.Attributor.Style('lineheight','line-height', config);\n\nQuill.register(lineHtStyle, true);```\n\ni want to set custom lineheight, but it dose not work. > Hi,\n\nthis @Jiiun codes its working, but you need to create a css too.\nthis is my js code:\njs\nvar Parchment = Quill.import('parchment');\n    var lineHeightConfig = {\n      scope: Parchment.Scope.INLINE,\n      whitelist: [\n        '1.0',\n        '1.2',\n        '1.5',\n        '1.6',\n        '1.8',\n        '2.0',\n        '2.4',\n        '2.8',\n        '3.0',\n        '4.0',\n        '5.0'\n      ]\n    };\n    var lineHeightClass = new Parchment.Attributor.Class('lineheight', 'ql-line-height', lineHeightConfig);\n    var lineHeightStyle = new Parchment.Attributor.Style('lineheight', 'line-height', lineHeightConfig);\n    Parchment.register(lineHeightClass);\n    Parchment.register(lineHeightStyle);\nAnd my css:\n```css\n.ql-snow .ql-picker.ql-lineheight{\n  width: 58px;\n}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.0']::before {content: '1.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.0']::before {content: '1.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.2']::before {content: '1.2';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.2']::before {content: '1.2' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.5']::before {content: '1.5';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.5']::before {content: '1.5' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.6']::before {content: '1.6';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.6']::before {content: '1.6' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.8']::before {content: '1.8';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.8']::before {content: '1.8' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.0']::before {content: '2.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.0']::before {content: '2.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.4']::before {content: '2.4';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.4']::before {content: '2.4' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.8']::before {content: '2.8';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.8']::before {content: '2.8' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='3.0']::before {content: '3.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='3.0']::before {content: '3.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='4.0']::before {content: '4.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='4.0']::before {content: '4.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='5.0']::before {content: '5.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='5.0']::before {content: '5.0' !important;}\n```\nit works!!! thank you very much\n. \n",
    "clpacheco90": "Hi, \nthis @Jiiun codes its working, but you need to create a css too.\nthis is my js code:\njs\nvar Parchment = Quill.import('parchment');\n    var lineHeightConfig = {\n      scope: Parchment.Scope.INLINE,\n      whitelist: [\n        '1.0',\n        '1.2',\n        '1.5',\n        '1.6',\n        '1.8',\n        '2.0',\n        '2.4',\n        '2.8',\n        '3.0',\n        '4.0',\n        '5.0'\n      ]\n    };\n    var lineHeightClass = new Parchment.Attributor.Class('lineheight', 'ql-line-height', lineHeightConfig);\n    var lineHeightStyle = new Parchment.Attributor.Style('lineheight', 'line-height', lineHeightConfig);\n    Parchment.register(lineHeightClass);\n    Parchment.register(lineHeightStyle);\nAnd my css:\n```css\n.ql-snow .ql-picker.ql-lineheight{\n  width: 58px;\n}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.0']::before {content: '1.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.0']::before {content: '1.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.2']::before {content: '1.2';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.2']::before {content: '1.2' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.5']::before {content: '1.5';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.5']::before {content: '1.5' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.6']::before {content: '1.6';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.6']::before {content: '1.6' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='1.8']::before {content: '1.8';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='1.8']::before {content: '1.8' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.0']::before {content: '2.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.0']::before {content: '2.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.4']::before {content: '2.4';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.4']::before {content: '2.4' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='2.8']::before {content: '2.8';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='2.8']::before {content: '2.8' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='3.0']::before {content: '3.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='3.0']::before {content: '3.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='4.0']::before {content: '4.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='4.0']::before {content: '4.0' !important;}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-item[data-value='5.0']::before {content: '5.0';}\n.ql-snow .ql-picker.ql-lineheight .ql-picker-label[data-value='5.0']::before {content: '5.0' !important;}\n```. solved it on #197  . ",
    "tylerkrett": "Hey @jhchen,\nIs there any help on how to do this ? has anyone made an arbitrary color picker for Quill.\nI am just about to give it a go so any help would be great\n. Hey @jhchen,\nIs there any help on how to do this ? has anyone made an arbitrary color picker for Quill.\nI am just about to give it a go so any help would be great\n. @simonwilbert  I got very close to implementing it but the main flaw i was having was setting the colours picked to a board to be reused. I did not see a light at end of the tunnel and I did not implement arbitrary colour picker for Quill and do not try Draft-js you will have the same outcome.\nso in the end I used Tiny-MCE but remember that tiny-mce support for react is not up to date so you can use my repo that is to get you going\nnpm repo: react-tinymce-rebelfish\n. @simonwilbert  I got very close to implementing it but the main flaw i was having was setting the colours picked to a board to be reused. I did not see a light at end of the tunnel and I did not implement arbitrary colour picker for Quill and do not try Draft-js you will have the same outcome.\nso in the end I used Tiny-MCE but remember that tiny-mce support for react is not up to date so you can use my repo that is to get you going\nnpm repo: react-tinymce-rebelfish\n. ",
    "simonwilbert": "@tylerkrett did you have any luck with this? I'm about to do the same. ",
    "leo-zhao": "I hope we can display Font Family , Font Size, Text Alignment (or some icons) as blank options.  Some users are just not clever, if they select the paragraph has multiple fonts, and they want to change the font, the fonts option is blank, they don't know where to start. \n. Sorry, I mean the Popup toolbar  the one shows 'Cut, Copy, Paste >...' options from mobile safari,  after we apply 'select' or 'select all' option over the text.\n. Yes, you are right.\nCheers\n. Headers are important for SEO, can we marge this one  if there is no conflicts ?\nCheers\n. Thanks, looking forward for it.\n. Can we integrate 'spectrum color picker' instead of current color picker ?\nIt will be more advanced, and user can custom font color by using color picker.\ncolor picker : http://bgrins.github.io/spectrum/\n. The problem appears on Firefox of windows and Mac .\nCheers\n. ",
    "gravitypersists": "@jhchen I'm curious to hear your plan regarding insertEmbed. \nI'm considering using Quill in an authoring tool that would allow authors to input arbitrary html elements into a canvas (configurable via another interface). These html elements might recursively include a Quill editor in themselves, which can also do the same sort of embeds. Were you thinking of having some sort of generic embed like this?\n. Yes, like polymer elements (web components).\n. ",
    "agenteo": "I am curious if having a plugin to embed videos is something you guys envisioned or if outside the boundary of this project. Do you see any specific difficulty in allowing embed of youtube/vimeo tags and seeing a placeholder or even better able to play the video? Cheers\n. Thanks for clarifying. Last week we tried: npm install --save-dev grunt-contrib-connect@0.7.1 but were seeing the same error. Is there a workaround I can use? I'd like to TDD an extension but this is blocking me. How do you currently run tests? Cheers\n. Thanks for following up. It all works.\n. ",
    "dhiviyadhanasekar": "@jhchen I've been trying out the video from the beta version. When i click on the video icon in my application, it tries to make some GET request and inserts a screenshot of the failed request page. Any idea why it does that? \n. @jhchen I've been trying out the video from the beta version. When i click on the video icon in my application, it tries to make some GET request and inserts a screenshot of the failed request page. Any idea why it does that? \n. ",
    "chbro": "what if i need to add local audios/videos. ",
    "StephanHoyer": "Hi,\ngreat feature. Would love to have this.\nIs this going to get included any time soon? If not, what's the blocker? Maybe I can assist here. \n. Hi,\ngreat feature. Would love to have this.\nIs this going to get included any time soon? If not, what's the blocker? Maybe I can assist here. \n. Whats the status on this. I also would love to have a non-prebuild version. I personaly include the parts of lodash I need directly to save some bytes.\nInstead of var _ = require('lodash').reduce I direcly use  var reduce = require('lodash/collection/reduce');\nThis way you create your custom build just by using the parts you need.\n. Whats the status on this. I also would love to have a non-prebuild version. I personaly include the parts of lodash I need directly to save some bytes.\nInstead of var _ = require('lodash').reduce I direcly use  var reduce = require('lodash/collection/reduce');\nThis way you create your custom build just by using the parts you need.\n. ",
    "masonicboom": "This sounds like a problem that occurs when an iframe's contentWindow has lost focus, but its body still has focus (see https://github.com/xing/wysihtml5/issues/98#issuecomment-35707207). This is probably solved by the latest release, due to ceasing to use iframes.\n. This sounds like a problem that occurs when an iframe's contentWindow has lost focus, but its body still has focus (see https://github.com/xing/wysihtml5/issues/98#issuecomment-35707207). This is probably solved by the latest release, due to ceasing to use iframes.\n. @jhchen this is probably fixed (see my previous comment). How about closing to not scare anyone off? If still an issue @leo-zhao can re-open.\n. @jhchen this is probably fixed (see my previous comment). How about closing to not scare anyone off? If still an issue @leo-zhao can re-open.\n. sure (done)\n. sure (done)\n. ",
    "jefferson": "So, I need some explanation about architecture of Quill for to do it. What the best way to develope it example?\n. Sorry, I'm just wanting a correct way to develop a translation into the fields. For example: \nen: Italic\npt-BR: It\u00e1lico\nLike this link: https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale\n. ",
    "Retsam": "@jhchen Can you give an example of what the correct config option is to provide a template for the link tooltip?  I couldn't find that in the documentation.\n. ",
    "rolandobloom": "This bug is still present in the latest quill version. Is it going to be fixed or at least included in the TODO list?\n. Maybe someone is aware of the cause of this problem and could point me in the right direction?\nThis bug occurs only in Mozilla and IE (i didn't check it on mac).\n. ",
    "lewisvance": "FF on mac although I'm trying to repro it again without success. \n. FF on mac although I'm trying to repro it again without success. \n. ",
    "jonathansampson": "I work on the Internet Explorer team and was able to repro the issue locally. I'll be setting aside some time tomorrow to investigate further and will be happy to update this issue if/when I come across meaningful data. I have also taken the liberty to inform our text/input Program Manager of the issue, just in case it resembles anything else we're aware of internally.\n. I work on the Internet Explorer team and was able to repro the issue locally. I'll be setting aside some time tomorrow to investigate further and will be happy to update this issue if/when I come across meaningful data. I have also taken the liberty to inform our text/input Program Manager of the issue, just in case it resembles anything else we're aware of internally.\n. ",
    "melinath": "+1 looking forward to this landing.\n. If something requires a \"workaround\", then it's a bug and shouldn't be closed.\n. ",
    "nicovalencia": ":+1: \n. @jhchen what's the normalizer looking like? Are @alexeckermann or you working on the change to make this configurable? If not, perhaps I can help lift. We have Quill configured, but absolutely need content wrapped in <p> tags for it to meet requirements.\nI'd much rather help contribute than just hack this into a fork. Just don't want to double up on work. (And I have no context into this project/source so it would take me a while to get ramped up).\nThanks!\n:pear: \n. ",
    "james2doyle": "This may be irrelevant for most, but I am using this editor in a CMS, and I have the following running before the content is saved to my database:\nphp\n// swap div tags with p\n$value = str_replace('div>', 'p>', $value);\n// remove the empty sections now\n$value = str_replace('<p><br></p>', '', $value);\nThis just runs each time I save my page. It works nicely at the moment. I am sure for more complicated code, this would not be as helpful.\n. This may be irrelevant for most, but I am using this editor in a CMS, and I have the following running before the content is saved to my database:\nphp\n// swap div tags with p\n$value = str_replace('div>', 'p>', $value);\n// remove the empty sections now\n$value = str_replace('<p><br></p>', '', $value);\nThis just runs each time I save my page. It works nicely at the moment. I am sure for more complicated code, this would not be as helpful.\n. ",
    "antonholmquist": "+1 for being able to use paragraphs instead of divs.\nBy the way, thanks for a great editor!\n. ",
    "machiel": ":+1: \n. ",
    "discoliam": ":+1:\n. ",
    "murashki": "I can't understand how this work: http://codepen.io/SaraVieira/pen/eaAcu\nIt use p instead of div. How?\n. Tnx!\n. ",
    "hpaul": ":+1: \n. :+1: \n. ",
    "Mad-Chemist": "Has no progress been made to make this a customizable option?  Surely there should be some mapping for ALL tags to allow customization.\nI currently need to use paragraph tags instead of divs, in addition to some other changes.  Its a bit discouraging to see that this hasn't been resolved yet.\n. ",
    "JoshWillik": "I'd also like to have this. I'm going to use something similar to @james2doyle 's solution for the time being, but I'd love to be able to have <p> tags instead.\n@jhchen I'm open to help get this working if you can point me in the right direction.\n. ",
    "seaneking": ":+1: we're strongly considering using Quill in Simpla but non-standard content elements (eg: divs instead of ps) are a dealbreaker for inline editing. \n. Use-case for flattening: inline editing. \nWe're thinking of using Quill as our richtext editor for Simpla, and an important criteria is that it has to work seamlessly inline for the user. The injected wrapper div breaks this promise specifically because Quill acts as a 'black box'.\nFew problems this introduces:\n\n\nDirect child selectors break (ie: .quill > p).\n\n\nInline content breaks. This is more specific to using Quill as a custom element, but say you wanted <p><quill-editor></quill-editor></p>, the injected div (block-level element) breaks that markup.. > As .quill is a custom class implying you have control over it, why not have your CSS rule be .quill > .ql-editor > p?\n\n\nUsing .quill was just an example, in this case we'd be instantiating Quill in something for a user, who would be the one using this richtext element in their own markup. And yes, we could document that there is a wrapper div injected inside their DOM with a class of .ql-editor to deal with, but it's a subtle gotcha that we'd prefer to avoid. \n\nCan you clarify what the breaking behavior is for the second scenario?\n\nSure, again this is in the context of in-place editing. The idea is to allow Quill to operate inside other textual elements (spans, headings, etc), where it would act as an inline element (display inline, only allow line-breaks, etc).\nFor example, suppose you had the following\nhtml\n<span>\n  <!-- quill-editor is display: inline and only allows line-breaks -->\n  <quill-editor></quill-editor>\n</span>\nAnd you wanted the resulting markup to look something like this\nhtml\n<span>\n  <quill-editor>\n    This is some content...\n  </quill-editor>\n</span>\nHaving a wrapper div in there\nhtml\n<span>\n  <quill-editor>\n    <div class=\"ql-editor\">\n      This is some content...\n    </div>\n  </quill-editor>\n</span>\nBreaks both the styling and the validity of our markup, since divs are block-level elements.\nI think this all comes down to the fact that, as you said above, Quill is designed to create its own little black box, and in-place editing is kind of at odds with that. . Yep that's fair, and thanks for pointing all that out. We'll investigate further ourselves and report back - parchment expecting block level nodes in particular could be problematic.. ",
    "Jesterovskiy": ":+1: need this changes too\n. Thank you =)\n. ",
    "davidgiven": "Hurray --- thanks!\n. ",
    "jadamconnor": "Any ideas on how to implement this solution in Typescript in an Angular 2 project?. ",
    "mmoravcik": "@jadamconnor \n```\nimport * as QuillNamespace from 'quill';\nlet Quill: any = QuillNamespace;\nconst Parchment = Quill.import('parchment');\nlet Block = Parchment.query('block');\nBlock.tagName = 'DIV';\nQuill.register(Block, true);\n```. ",
    "mdperez86": "This approach does not work with multiple instances of Quill editor in the same page using different tagNames.\nconst Parchment = Quill.import('parchment');\nlet Block = Parchment.query('block');\nBlock.tagName = 'DIV';\nQuill.register(Block, true);\nlet editor1 = new Quill({...});\nconst Parchment = Quill.import('parchment');\nlet Block = Parchment.query('block');\nBlock.tagName = 'P';\nQuill.register(Block, true);\nlet editor2 = new Quill({...});\nBoth editors are using same last tagName='P'.\nDo you know any way to do that?. ",
    "kevinmartin": "This issue is also present with the icons inserted with data-uri's, but I was able to fix it by adding data: to the img-src section.\n. Sure:\nContent-Security-Policy-Report-Only:default-src 'self';script-src 'self' 'unsafe-eval' https://maps.googleapis.com https://maps.gstatic.com http://google-maps-utility-library-v3.googlecode.com https://ajax.googleapis.com http://cdnjs.cloudflare.com https://mts1.googleapis.com http://fonts.googleapis.com http://mt1.googleapis.com http://maps.gstatic.com/mapfiles http://googleapis.com;object-src 'self';img-src 'self' data: https://dpbob3sbronwq.cloudfront.net https://maps.gstatic.com https://mts0.googleapis.com https://mts1.googleapis.com https://maps.googleapis.com https://csi.gstatic.com http://mt1.googleapis.com;media-src 'self';frame-src 'self';font-src 'self' http://fonts.gstatic.com https://fonts.gstatic.com http://maxcdn.bootstrapcdn.com;connect-src 'self';style-src 'self' http://fonts.googleapis.com https://fonts.googleapis.com http://maxcdn.bootstrapcdn.com;report-uri /api/csp\n. ",
    "timshannon": "That style config link is no longer valid.  What's the most current way to handle this?. That style config link is no longer valid.  What's the most current way to handle this?. ",
    "pavsidhu": "I tried using to change to superscript with quill however I saw on change. According to the documentation support for custom formats are not available yet\n   document.execCommand('superscript');\n. ",
    "davejachimiak": "Thanks for all of your work on quill.js!\nI'm in full support of this and hope it can be prioritized. Inserting <br>s into line <div>s with shift + enter would help my company's content editors. We use line <div>s for denoting paragraphs, but they frequently need a way to just to do a break-line without denoting a separation of paragraphs. Inserting <br>s into line <div>s with shift + enter would achieve this perfectly.\nIs there any current workaround to get the functionality I want? I've tried every hack I could think of to no avail.\n. ",
    "That-David-Guy": "Just wondering if there is anymore progress on this? In my editor I'm using the divs as a paragraph so having shift+editor would work great for newlines.\n. So there is no way for the user to enter a newline if <div>s are treated as paragraphs?\n. But only if <div>s are not treated as paragraph (as in Quill's example). But in my case we are treating the <div>s as paragraphs (i.e. they have margin-bottom: 30px) as we don't want the user to have to press enter twice. The vast majority of the time they want paragraphs so that is our default, occasionally they want a new line which we currently can't provide them with Quill (we are actually using ReactQuill which wraps Quill).\nJust thought I'll let you know my use case for it.\n. ",
    "khmelevskii": "+1\n. a very useful feature!\n. ",
    "henningborchers": "+1\n. ",
    "cydrobolt": "Using shift + enter in a document and bolding text across the two divs created by shift + enter causes the selected text to \"jump\" or simply doesn't bold the text. Is this a known bug in Quill? Removing the linebreak allows the user to unbold the text.\nConsole output: \nThe given range isn't in document.\n\n\n. ",
    "robert-boulanger": "@jhchen : I can give you a real world use case. We are writing novels. When we are finished, we have to export the text somehow, so finally a designer can work on this and at least we get a book.\nThe problem is, without shift-enter, everything becomes paragraph .  In the designers software,  paragraphs will be formatted like for example text-indent: 30px.  because every first line of a paragraph should be intented.  But often a writer, doesn't want to have a new paragraph which is intented, but just a new line within the actual paragraph starting at the very left margin. By inserting two normal Returns for a real paragraph and only one for a newline, post production becomes much more complicated, since designers doesn't care about the content.\nfurtheron, I also have a css which says:\n.ql-editor p {\n    text-indent: 30px;\n}\nto make reading easier. We are editing our whole books in one document( more then 400 pages when printed). But unfortunatly everything is a new paragraph. By the way, I hoped to get this result with\nlet Break = Quill.import('blots/break');\n    Quill.register(Break)\nand define a keybord binding like: (here for Ctrl-Return)\n```\nlinebreak: {\n        key: 13,\n        ctrlKey: true,\n        handler: function (range, context) {\n            this.quill.insertEmbed(range.index, 'break', true, 'user');\n            quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n    }\n```\nbut can't get any result.\nBut by th way, nevertheless, Quill is the best WYSIWYG Editor for creating huge docs, I have seen so far \n. @jhchen : I can give you a real world use case. We are writing novels. When we are finished, we have to export the text somehow, so finally a designer can work on this and at least we get a book.\nThe problem is, without shift-enter, everything becomes paragraph .  In the designers software,  paragraphs will be formatted like for example text-indent: 30px.  because every first line of a paragraph should be intented.  But often a writer, doesn't want to have a new paragraph which is intented, but just a new line within the actual paragraph starting at the very left margin. By inserting two normal Returns for a real paragraph and only one for a newline, post production becomes much more complicated, since designers doesn't care about the content.\nfurtheron, I also have a css which says:\n.ql-editor p {\n    text-indent: 30px;\n}\nto make reading easier. We are editing our whole books in one document( more then 400 pages when printed). But unfortunatly everything is a new paragraph. By the way, I hoped to get this result with\nlet Break = Quill.import('blots/break');\n    Quill.register(Break)\nand define a keybord binding like: (here for Ctrl-Return)\n```\nlinebreak: {\n        key: 13,\n        ctrlKey: true,\n        handler: function (range, context) {\n            this.quill.insertEmbed(range.index, 'break', true, 'user');\n            quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n    }\n```\nbut can't get any result.\nBut by th way, nevertheless, Quill is the best WYSIWYG Editor for creating huge docs, I have seen so far \n. @tdolsen :  as well as for us. but a found a nice workaround and with this we can live quite good:\njavascript:\n```\nvar Parchment = Quill.import('parchment');\nvar LineBreakClass = new Parchment.Attributor.Class('linebreak', 'linebreak', {\n  scope: Parchment.Scope.BLOCK\n});\nQuill.register('formats/linebreak', LineBreakClass);\n```\nthen inside your keyboard handlers:\n```\n...\nsmartbreak: {\n        key: 13,\n        shiftKey: true,\n        handler: function (range, context) {\n            this.quill.setSelection(range.index,'silent');\n            this.quill.insertText(range.index, '\\n', 'user')\n            this.quill.setSelection(range.index +1,'silent');\n            this.quill.format('linebreak', true,'user');\n    }\n},\nparagraph: {\n    key: 13,\n    handler: function (range, context) {\n        this.quill.setSelection(range.index,'silent');\n        this.quill.insertText(range.index, '\\n', 'user')\n        this.quill.setSelection(range.index +1,'silent');\n        let f = this.quill.getFormat(range.index +1);\n        if(f.hasOwnProperty('linebreak')) {\n            delete(f.linebreak)\n            this.quill.removeFormat(range.index +1)\n            for(let key in f){\n                this.quill.formatText(range.index +1,key,f[key])\n\n            }\n        }\n\n\n    }\n\n....\n```\nand finally css:\n```\n.ql-editor p {\n    text-indent: 30px;\n    margin-top: 10px;\n}\np.linebreak-true {\n    text-indent: 0px;\n    margin-top: 0px;\n}\n```\nthis causes that shift-enter inserts a new line which is a <p< in quill, but it gets a class linebreak.\nthe css causes, that normal paragraphs appear with a line indent and a top margin, p.linebreak not.\nso the writer gets the right feeling.\nwhen exporting quills content to a dektop wordprocessor, just handle the linebreak attribute as a normal linefeed and process all others as normal paragraphs.\nhope this helps\n. @tdolsen :  as well as for us. but a found a nice workaround and with this we can live quite good:\njavascript:\n```\nvar Parchment = Quill.import('parchment');\nvar LineBreakClass = new Parchment.Attributor.Class('linebreak', 'linebreak', {\n  scope: Parchment.Scope.BLOCK\n});\nQuill.register('formats/linebreak', LineBreakClass);\n```\nthen inside your keyboard handlers:\n```\n...\nsmartbreak: {\n        key: 13,\n        shiftKey: true,\n        handler: function (range, context) {\n            this.quill.setSelection(range.index,'silent');\n            this.quill.insertText(range.index, '\\n', 'user')\n            this.quill.setSelection(range.index +1,'silent');\n            this.quill.format('linebreak', true,'user');\n    }\n},\nparagraph: {\n    key: 13,\n    handler: function (range, context) {\n        this.quill.setSelection(range.index,'silent');\n        this.quill.insertText(range.index, '\\n', 'user')\n        this.quill.setSelection(range.index +1,'silent');\n        let f = this.quill.getFormat(range.index +1);\n        if(f.hasOwnProperty('linebreak')) {\n            delete(f.linebreak)\n            this.quill.removeFormat(range.index +1)\n            for(let key in f){\n                this.quill.formatText(range.index +1,key,f[key])\n\n            }\n        }\n\n\n    }\n\n....\n```\nand finally css:\n```\n.ql-editor p {\n    text-indent: 30px;\n    margin-top: 10px;\n}\np.linebreak-true {\n    text-indent: 0px;\n    margin-top: 0px;\n}\n```\nthis causes that shift-enter inserts a new line which is a <p< in quill, but it gets a class linebreak.\nthe css causes, that normal paragraphs appear with a line indent and a top margin, p.linebreak not.\nso the writer gets the right feeling.\nwhen exporting quills content to a dektop wordprocessor, just handle the linebreak attribute as a normal linefeed and process all others as normal paragraphs.\nhope this helps\n. @tdolsen : be welcome ;)\n. @tdolsen : be welcome ;)\n. ",
    "tdolsen": "This is an essential feature of any text editor, whether the output is html or books; there is a clear difference between paragraphs and line breaks, and a text editor not supporting both is severely limiting proper content handling.\nI'd love to use Quill over other editors, but this is a deal breaker for us.\n. @robert-boulanger: Very much. That should be a workable solution, until native support is added. Thanks!\n. ",
    "VincentGarreau": "+1 for this feature\n. ",
    "ozanhazer": "If I understand correct from the documentations, paragraphs are used to mimic linebreaks and linebreaks are rendered as paragraphs. If I really understand it correct and this is by design then I believe there's a fundamental problem with the domain definition...\nA document does not consist of lines and line-breaks, it consists of paragraphs (and headings)... Inside the paragraphs you might want to \"break\" the line and that's where linebreaks comes into play.\n...at least for hypertext documents. For plain text the simplest way to mimic a paragraph is to use double line-breaks since you're limited to ASCII characters. But that was the case before hypertext was invented!?\nIn the current case you have no control on how paragraphs are displayed, you cannot adjust spacing between elements or you cannot indent the text as @robert-boulanger stated. Or as in my case you have to find a hack to get rid of these empty paragraphs after headings :\\\nIf you still think that this is the correct behaviour, it would be nice to have some notice on the quickstart documentation describing this behaviour to save some hours of the programmers maybe...\n. @BastiOfBerlin I agree with you. By design newline is used to adjust spacing, for example a newline is added after headings to leave a space before the next paragraph. Adjusting the spacing should be the job of styles IMO.... Well, this creates problems when the content is persisted. It keeps adding newlines every time the content is saved. I think spacing should not be adjusted by newlines, we have CSS for that, would be much flexible with CSS.\nOr at least it should avoid adding more than one newline somehow.... ",
    "djave-co": "+1 for this feature\nOutside of the points about paragraphs, the line break is frequently used to add additional lines in a bulleted list, so you begin a list and then hold shift to create the extra content. . Just to add a further use case, if you enter an address it is essential to have line breaks. At present, I'm looking at 5 paragraphs, like the below:\nAddress line 1\nAddress line 2\nAddress line 3\nRather than \nAddress line 1\nAddress line 2\nAddress line 3\nReally hope this could be looked at at some point!. ",
    "rpmonteiro": "I'm trying to implement this functionality, but I'm afraid I'll get the same errors as @cydrobolt (have you found a solution/workaround?), and then have to drop Quill altogether after more than 50h working on it...\n@jhchen Even if you don't want to implement this yourself, do you mind just giving some pointers as to how we can implement it ourselves? As you can see, it's a feature A LOT of us desperately need...\nThank you very much. Quill is an amazing library :-). Here's an approach that worked for me:\nInstead of swimming against the current and modifying the existent Break blot and whatnot (which I spent hours trying to do and couldn't.. \ud83d\ude1e  ), I just did some pre and post processing on the HTML itself.\n\n\nRemove the margins around <p> tags\n\n\n\nRegex to replace </p><p> with a <br>\n\n(I also added a regex for to replace a blockquote tag per line to just put everything in one with `\n\n\nNow do the other way around: regex to add again the empty lines between paragraphs\n\n(quill seems to automatically add a new blockquote tag per line, so I didn't bother with that one)\n\n\n???\n\n\nprofit \n\n\nWe end up with the HTML that we all want, with the nice breaks and all, and when it comes time to render that HTML in Quill, we just bend to its will, and format it back the way Quill likes.\n\nHTML Out - <p>no<br>margins<br>here</p><p>double paragraph</p>\nHTML In - <p>no<p>margins</p><p>here</p><p><br></br><p>double paragraph</p>\nHope this helps!\nGood luck!. @farnabaz Thank you very much for sharing this. I'm now working on it and fixing some issues that occur when quill first loads the HTML (as I'm saving it in the DB).\nI'll post my findings here once I get this working properly!. I got it working great.\nThe code @farnabaz posted worked great, just had some minor tweaks I had to do specific to my use case.\nFor me, using Quill with React, I was before injecting the HTML into quill's container. But now that we have our fancy linebreaks, the solution was to instead send the HTML via the dangerouslyPasteHTML method of the clipboard module. With that, you can then write a little matcher for our new <br> friend\n\nAnd this concludes dozens and dozens of hours for me of doing RegExp work that can now be replaced by a handful of lines of code.\nThank you very much once again farnabaz, you saved my week! \ud83d\udc4d \ud83c\udf7a . Uh.. turns out this is of my own doing. Nothing related to Quill. It was just an extreme edge-case.\nAs they say - this is a nothing burger, people! hahahahaha. ",
    "neutralrockets": "+1 for this feature.\nJust wasted a few hours integrating Quill into my project only to realise shift+enter is not supported. . ",
    "BastiOfBerlin": "+1 as well.\nAnd since I am working with the Delta format, I cannot use the hack that @rpmonteiro suggested. Currently the paragraphs are simply represented as \\n within the format. So I think we need to make up some design decisions on how to reflect and differentiate between simple line-breaks a.k.a. newlines and a new paragraph.. ",
    "gaborsar": "Google docs inserts a \\u000b character rather than a \\n - char code 11 instead of 13.. That is needed because otherwise you could not put your cursor into the empty line, the browser would ignore it.. That is needed because otherwise you could not put your cursor into the empty line, the browser would ignore it.. http://stackoverflow.com/questions/17714340/cant-get-to-empty-paragraphs-in-contenteditable\nhttp://stackoverflow.com/questions/4063144/setting-the-caret-position-to-an-empty-node-inside-a-contenteditable-element. http://stackoverflow.com/questions/17714340/cant-get-to-empty-paragraphs-in-contenteditable\nhttp://stackoverflow.com/questions/4063144/setting-the-caret-position-to-an-empty-node-inside-a-contenteditable-element. ",
    "farnabaz": "Maybe this could done using custom Break blot\njs\nlet Parchment = Quill.import('parchment');\nlet Break = Quill.import('blots/break');\nlet Embed = Quill.import('blots/embed');\nBreak.prototype.insertInto = function(parent, ref) {\n    Embed.prototype.insertInto.call(this, parent, ref)\n};\nBreak.prototype.length= function() {\n    return 1;\n}\nBreak.prototype.value= function() {\n    return '\\n';\n}\nQuill.register(Break)\nand bindings like this\njs\nhandleEnter: {\n    key: 13,\n    handler: function (range, context) {\n      if (range.length > 0) {\n        this.quill.scroll.deleteAt(range.index, range.length);  // So we do not trigger text-change\n      }\n      let lineFormats = Object.keys(context.format).reduce(function(lineFormats, format) {\n        if (Parchment.query(format, Parchment.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n          lineFormats[format] = context.format[format];\n        }\n        return lineFormats;\n      }, {});\n      var previousChar = this.quill.getText(range.index - 1, 1);\n      // Earlier scroll.deleteAt might have messed up our selection,\n      // so insertText's built in selection preservation is not reliable\n      this.quill.insertText(range.index, '\\n', lineFormats, Quill.sources.USER);\n      if (previousChar == '' || previousChar == '\\n') {\n        this.quill.setSelection(range.index + 2, Quill.sources.SILENT);\n      } else {\n        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n      }\n      this.quill.selection.scrollIntoView();\n      Object.keys(context.format).forEach((name) => {\n        if (lineFormats[name] != null) return;\n        if (Array.isArray(context.format[name])) return;\n        if (name === 'link') return;\n        this.quill.format(name, context.format[name], Quill.sources.USER);\n      });\n    }\n},\nlinebreak: {\n    key: 13,\n    shiftKey: true,\n    handler: function (range, context) {\n            var nextChar = this.quill.getText(range.index + 1, 1)\n            var ee = this.quill.insertEmbed(range.index, 'break', true, 'user');\n            if (nextChar.length == 0) {\n                // second line break inserts only at the end of parent element\n                var ee = this.quill.insertEmbed(range.index, 'break', true, 'user');\n            }\n            this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n}\nDEMO on Codepen. @rpmonteiro I'm glad to hear it \ud83d\udc4d \nI updated DEMO with your custom matcher. ",
    "ollyfg": "Just FYI, I really need this to format poems correctly, where there are often line breaks that are not paragraph breaks.\nReading through this, there are obviously many use cases for this feature (which is also present in Word, Google Docs), so I hope the Quill team steps up and supports this. I will have to try one of the work-arounds, but if they don't work I'm going to have to drop Quill - this really is a deal beaker.. Just FYI, I really need this to format poems correctly, where there are often line breaks that are not paragraph breaks.\nReading through this, there are obviously many use cases for this feature (which is also present in Word, Google Docs), so I hope the Quill team steps up and supports this. I will have to try one of the work-arounds, but if they don't work I'm going to have to drop Quill - this really is a deal beaker.. ",
    "zmartcode": "hy @ollyfg \nthis one works fine for me: http://codepen.io/farnabaz/pen/VpdaGW . but as you said: should definitely be possible without a workaround ;) . @jhchen i think the markup is just wrong. in quilljs it's:\n<p>Joe Smith</p><p>1234 Main St</p><p>Los Angeles, CA</p>\nBut it should be\n<p>Joe Smith<br />1234 Main St<br />Los Angeles, CA</p>\ni love quill. but for me it's also a killer that there's no support for newline ().\nthe demo on quilljs.com handles this issue only by formatting a paragraph with no margin. that's ok for quilljs.com, but it's simply not right.. hy @jhchen \nyou are right, there is no written basis (or i did not find one so far :)). \nfor me a paragraph has always been a container for text which belongs together. that's for example an address block. or a poem with some lines. or - of course - just some text which you may split (for some formatting reasons or whatever) in some lines but which form one \"paragraph\" of text. \nlet's say i have a text like \nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\nand i want it to look like\nLorem ipsum dolor sit amet, \nconsetetur sadipscing elitr, sed \ndiam nonumy eirmod tempor \ninvidunt ut labore et dolore magna \naliquyam erat, sed diam voluptua.\ni think it's not meant to be something like\n<p>...</p><p>...</p><p>...</p>\nor am i wrong?\ni think that is what the <br /> is made for. and it's pity that this is not possible in quilljs. especially because it's such a great editor so far.\n. ",
    "mackermedia": "@nhunzaker and I had a couple issues with the above codepen solutions:\n1. an extraneous newline added at the end of the editor\n2. you need to press Shift + Enter twice if you're at the end of the current <p> tag to insert a newline.\nWe've forked and updated the codepen with our solution here: http://codepen.io/mackermedia/pen/gmNwZP\nNotable additions:\n1. removing extraneous newline:\n```\nvar length = quill.getLength()\nvar text = quill.getText(length - 2, 2)\n// Remove extraneous new lines\nif (text === '\\n\\n') {\n  quill.deleteText(quill.getLength() - 2, 2)\n}\n```\n\nhandling the double shift+enter bug:\n```\nkeyboard: {\n  bindings: {\n    linebreak: {\n      key: 13,\n      shiftKey: true,\n      handler: (range) => {\n        let currentLeaf = this.editor.getLeaf(range.index)[0]\n        let nextLeaf = this.editor.getLeaf(range.index + 1)[0]this.editor.insertEmbed(range.index, 'break', true, 'user')\n\n// Insert a second break if:\n// At the end of the editor, OR next leaf has a different parent (<p>)\nif (nextLeaf === null || (currentLeaf.parent !== nextLeaf.parent)) {\n  this.editor.insertEmbed(range.index, 'break', true, 'user')\n}\n\n// Now that we've inserted a line break, move the cursor forward\nthis.editor.setSelection(range.index + 1, Quill.sources.SILENT)\n\n}\n}\n  }\n}\n```. \n\n",
    "parterburn": "We're using Quill as an email composer, trying to replicate Gmail as much as possible. Gmail's default line break is the single br, which IMO is much more flexible. If you need a new paragraph, tap twice. \nIs it possible to optionally convert Quill's p default to the br?. We're using Quill as an email composer, trying to replicate Gmail as much as possible. Gmail's default line break is the single br, which IMO is much more flexible. If you need a new paragraph, tap twice. \nIs it possible to optionally convert Quill's p default to the br?. Using pseudo classes to accomplish nested lists prevents using Quill as a composer for anything that will be sent in email (as email clients do not allow the use of pseudo classes).. Using pseudo classes to accomplish nested lists prevents using Quill as a composer for anything that will be sent in email (as email clients do not allow the use of pseudo classes).. We ended up preventing ordered lists from indenting more than once and set the margin-left on unordered lists according the different indent-classes using a premailer stylesheet (https://rubygems.org/gems/premailer-rails).. We ended up preventing ordered lists from indenting more than once and set the margin-left on unordered lists according the different indent-classes using a premailer stylesheet (https://rubygems.org/gems/premailer-rails).. Here's our code, if it's helpful:\n```js\nvar bindings = {\n  \"indent\": {\n    key: \"tab\",\n    format: [\"list\"],\n    handler: function(range, context) {\n      if(context.format.list == \"ordered\") {\n        return false;\n      } else {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', Quill.sources.USER);\n      }\n    }\n  }\n};\nvar emailBodyQuill = new Quill($(\".email-body-quill\"), {\n  theme: 'snow',\n  modules: {\n    keyboard: {\n      bindings: bindings\n    },\n    toolbar: {\n      container: [\n        [{ 'size': ['small', false, 'large', 'huge'] }],\n        ['bold', 'italic', 'underline', 'link'],\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }, 'blockquote'],\n        ['clean', 'image']\n      ]\n    }\n  }\n});\n```. Here's our code, if it's helpful:\n```js\nvar bindings = {\n  \"indent\": {\n    key: \"tab\",\n    format: [\"list\"],\n    handler: function(range, context) {\n      if(context.format.list == \"ordered\") {\n        return false;\n      } else {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', Quill.sources.USER);\n      }\n    }\n  }\n};\nvar emailBodyQuill = new Quill($(\".email-body-quill\"), {\n  theme: 'snow',\n  modules: {\n    keyboard: {\n      bindings: bindings\n    },\n    toolbar: {\n      container: [\n        [{ 'size': ['small', false, 'large', 'huge'] }],\n        ['bold', 'italic', 'underline', 'link'],\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }, 'blockquote'],\n        ['clean', 'image']\n      ]\n    }\n  }\n});\n```. ",
    "suziesirena": "@farnabaz, your code works well but I have an issue when setting content to the editor.\nI use this code to set the editor content :\ndocument.querySelector(\".ql-editor\").innerHTML = content\nbut the <br> tags are removed in the editor.\nIs it the right way to set HTML content to Quill?\n. ",
    "Natim": "\nIs it the right way to set HTML content to Quill?\n\nNo it is not :) See https://quilljs.com/docs/modules/clipboard/#dangerouslypastehtml. What is the current behavior for thoose use cases? Do you want to cover them any time soon? I don't think we should plan ahead for things we don't want to support.. . Yes it seems that the fact a <p> is pasted into text as two linebreaks.\nA way to fix that would be to allow <br/> instead of <p> everywhere.. You are right, I can't reproduce the error with Chrome, but I can with Firefox.. For instance this HTML:\n<p>Hello</p>\n<p>World</p>. This fixes the issue https://github.com/quilljs/quill/issues/861. Sure.\n\nwhat should be dragged\n\na selection of text for instance that you would drag into the quill.js. I can confirm a similar behaviour with Chrome.. I opened the following Bug for Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1381759. I guess we can close the issue because it is not related to Quill.js. @eamodio do you have a fix for that in your fork already?. Oh neat I missed it :) thanks https://github.com/quilljs/quill/commit/eb7f33bb9fbb6b7222840571b8cad06481dfb2dd. ",
    "xavierbloemen": "@mackermedia small fix is to change length that SmartBreak returns from a 1 to 0 because otherwise you can't escape a list format and will fix cursor position when you press enter on a empty line. I made an example of the behavior written above. I am guessing that something is going wrong with closing two tags (</p>, </div>) when I am calling quill.format('list', false); but I can't find where the problem is so any hints would be very welcome.\nhttps://codepen.io/X4VIER/pen/xgwgeG\n. I sort of fixed it. By changing Block.tagName = 'DIV' My custom list works see http://codepen.io/X4VIER/pen/RKrbOz?editors=0010\nI suspect that because Block tagName was <p> and my custom ListItem's tagName was also <p> something went wrong there and I suspect It also has something to do that List is a container class, but can't find any proof.. @billyshena We had to move on from Quill because of these issues. You can find stories like these that architecture has some hard choices (most based in Parchment) that tags have inherit logic that is hidden, causing these weird bugs. \nQuill is good when you don't try to change/extend it IMHO. ",
    "username8978": "The best workaround I've found so far is to use a simple custom Style Attributor to set padding-top to 0px for shift-enter lines. Then you use css to set padding-top to whatever spacing you want for not shift-enter lines. Obviously this will not have all of the exact same functionality as br tags but for the vast majority of use cases it will be the same and it doesn't cause errors or weird Enter behavior.\nI've made a simple CodePen example to demonstrate this.\nNote: you have to use padding NOT MARGINS as margins can add whitespace due to issue 1157.. The best workaround I've found so far is to use a simple custom Style Attributor to set padding-top to 0px for shift-enter lines. Then you use css to set padding-top to whatever spacing you want for not shift-enter lines. Obviously this will not have all of the exact same functionality as br tags but for the vast majority of use cases it will be the same and it doesn't cause errors or weird Enter behavior.\nI've made a simple CodePen example to demonstrate this.\nNote: you have to use padding NOT MARGINS as margins can add whitespace due to issue 1157.. ",
    "akashkamboj": "@jhchen this thing is as necessary as having P and BR tags both in HTML. You can't make a good HTML page with only one. I think it should be in one of the priority list. All of the solutions above aren't working fine when you save delta and retrieve because it creates double spacing every where.\nMS-Word also have this functionality. hi @svanetten1976 I also needed something similar to this but only for the headers and asked here but didn't get a reply. So I finally figured it out myself although not sure that it's an ok approach or not. Basically I created Header Blot and HeaderItem Blot separately and used the List and ListItem structure. So I have now H1 > DIV structure. Although wanted to do DIV > H1 but it was creating problems at a lot of places.\nSo I guess your best bet is to go with List, ListItem structure unless someone suggests a better alternative.. @jhchen Thanks for answering. Well there are a few use cases:\n\nTo create table of contents for all headers and navigating to the page it's needed.\nTo create comments on each block, i need some reference point\n\nalso there are a few more ideas ...\nIt seems like for all of these each block needs some kind of reference point and in real-time collaboration you can't rely on character index at all. So if all blocks can have a unique id as soon as they start, it will be a lot better.\nWell I have created the id attribute as like other attributes overriding formats method in all blots. And it's getting passed in the delta as an attribute as well. But the problem is that when the blot gets attached, the IDs are regenerated because i've tried putting the ID generation in constructor, attach methods. Not able to understand where should I put it else.\nThe other thing is that this functionality is so useful for anyone that it should be part of core or even Parchment, so for each block, embed, container you don't have to define again and again.\nDoes all this make sense?\n. hi @jhchen. ok here's something that I have done, which is kinda working:\n\nCreated an IdAttribute \n\n```javascript\nimport Parchment from 'parchment'\nconst IdAttribute = new Parchment.Attributor.Attribute('id', 'id', {\n    scope: Parchment.Scope.BLOCK,\n});\nexport default IdAttribute;\n```\n\ndefined attribute into quill:\n\n```javascript\nQuill.register({\n    'attributors/attribute/id': IdAttribute\n}, true);\nQuill.register({\n    'formats/id': IdAttribute,\n}, true);\n```\n\ncreated a random ID on block level\n\njavascript\nclass Block extends Parchment.Block {\n    constructor(domNode) {\n        super(domNode);\n        domNode.setAttribute('id', uuid.v4());\n        this.cache = {};\n    }\n    ....\nWhich is saving the id attribute, but here are a few problems/need suggestion:\n\n\nIf you are typing, it's ok. But if you paste something the ID's will not create. So I have to modify clipboard.js as well to create the ID. maybe I can modify matchAttributor method and create ID's everytime and hopefully it will save. But is this the right way?\n\n\nI will also need this on Parchment.Embed, not just block. What is the approach that I should take in that case? can I define array in attribute scope. And does it needs to be defined in every block type, at least on core level? I wish it was part of Parchment.\n\n\nI have to test the real time collaboration yet, but I guess it should work fine.\n. \n\n",
    "icosahebron": "Hey @jhchen,\n\nThis is a pretty technically costly feature to add to Quill so there'd have to be a large need from the community for it to become a priority.\nKeep in mind what's being discussed here is not if you can add this. The answer is yes--Parchment granted this ability. The question is if Quill should build and support this in core.\n\nWould you have some time to outline what's involved in adding support for this? I'd be more than happy to work on this and raise a PR so Quill can support this in core.\nFor our editing needs, we'd like to give users more control over where line breaks appear in a paragraph that has paragraph-level formatting applied (e.g., text alignment, list-ness, indentation, line height, etc) to avoid widows or for artistic reasons (e.g., poetry, manually breaking lines to simulate flowing around arbitrary shapes, etc). \nTreating a manually broken set of lines as a single paragraph instead of separate paragraphs would make changing paragraph-level formatting a little easier.\nI've been playing around with an idea that differentiates between line breaks and paragraph breaks at the TextBlot level (see this CodePen example). \n\nA line breaks is represented in a Delta as a \\u2028 character, while in the DOM it's rendered as a \\n within a Text node. Some problems with this approach:\n It relies on the fact that white-space in the editor is set to pre-wrap. I'm not sure how long that assumption will hold\n There's some wonky edge cases when dealing with double line breaks at the end of a block\n* This is probably not the solution you had in mind, it feels a bit fragile, and I'm sure I'm not taking into account everything I should be.\nWould love to hear your thoughts on the correct way to proceed.\nThanks for all your work on Quill!. ",
    "shividhar": "+1 this\n. ",
    "RiZKiT": "I was a little bit shocked to see inline-styles in the generated code. So it's funny that the editor itself is cross platform compatible, but the generated text is not, at least not very useful for responsive design.\n. I was a little bit shocked to see inline-styles in the generated code. So it's funny that the editor itself is cross platform compatible, but the generated text is not, at least not very useful for responsive design.\n. @jhchen thank you for clarifying the decision. \n. ",
    "bmcmahen": "+1.  for my uses allowing responsive design is much more important than being able to copy into Word. \n. ",
    "dynothunder": "What about indent class attribute. What about indent class attribute. How can I change indent class into indent inline style.. How can I change indent class into indent inline style.. axu6705 where I use the code in angular2\n. axu6705 where I use the code in angular2\n. The expected case for text indent is replace with a tab character, which it already does. can't understand where you told about tab character\n. The expected case for text indent is replace with a tab character, which it already does. can't understand where you told about tab character\n. where I use these code in angular2\n. where I use these code in angular2\n. ",
    "agraddy": "This is a feature that I would definitely like to see added.\n. ",
    "geeosh": "Also -  I want to set links to default to open in a new window, but had hoped I wouldn't have to edit source. I'd also request that this be turned into a module so that we could modify it if need be.\n. ",
    "bjoerge": "Thanks for answering and sorry if I'm missing something obvious here - but from where do I have to run grunt lodash?\nI've added quill as a dependency in my project using npm install -S quill, and then if I do:\njs\nvar quill = require('quill')\n...from a (browserified) source file it fails with the error mentioned above. I do not use grunt and have not installed it. Is that a requirement for using quill as a dependency this way?\n. As a dependency. The browserify command mentioned above is run from a directory with quill installed in ./node_modules/quill (and I'm getting the same error when require()-ing quill from my project's browserified bundle).\nJust noticed that the .build folder is excluded entirely in .npmignore - thats probably why it gets lost during npm publish:\nhttps://github.com/quilljs/quill/blob/29f74defeb657e33a9634a07ffa40329524d8427/.npmignore#L1\n. Right. I'm not entirely sure if its the same issue as #274, but it at least seems related. So if the custom lodash build is not to be published to npm, I think maybe the issue is the browser field here: https://github.com/quilljs/quill/blob/a18b1426d02c8b3d14985bc4600e4263ed55581a/package.json#L58. as it will cause browserify to substitute require('lodash') statements to require('./.build/lodash.js'). If its removed, then browserify will pull in lodash from quill's node_modules instead. That will possibly create an unneccessary overhead in bundle size compared to the custom lodash build, though.\n. a4b6d0508143faeb5a09fba9d54387bad1d558fd fixed it, thanks!\n. ",
    "danreeves": "Yes; sorry, should have been more clear.\nI am using browserify (through gulp) to build my project and Quill is a dependency in my project.\nSteps to reproduce would be:\n- npm install quill\n- browserify app.js > bundle.js\nWhere app.js:\njs\nvar Quill = require('quill');\nThe browserify errors are all missing dependencies that correspond to the requires inside quill.js. It gets to that point so I don't think the issues is the browser field in package.json as mentioned in issue #272. \nIf you see this issue it can be resolved by adding an additional step to the browserify build. I'm afraid I'm not a grunt or coffeescript guy, else I would have given a pull request a go.\nThanks.\n. This is great. Thanks a lot!\n. ",
    "jpfortier": "I changed the text to better show the situation. It applies changes on the first line, which by default is pretty short on the example page. (\"One Ring to Rule Them All\")\nUsing the default text I selected Dark Lord and tried to remove the underlining. It moved the cursor to the end of the title and has no effect.\n. I downloaded and ran Version 42.0.2274.0 canary (64-bit) without extensions.\nI experienced the same result.\n. This is the same issue I reported. Mine was closed.\nhttps://github.com/quilljs/quill/issues/277\n. My other ticket has a video linked:\nhttps://github.com/quilljs/quill/issues/277\n. I use Screencastify to record. I noticed it may be related to the click area of the toolbar controls. There's a small area under the buttons that is clearly in the toolbar area, but not within the hover area of the button. If you click there the cursor moves to the top of the text below where you click.\nHere is my webm recording:\nhttp://webmshare.com/qogdg\n. Yup, when the issue occurs, I have a mouse move event. \n. ",
    "pearson-lucas-dev": "I was having the same problem from http://quilljs.com but I went to settings | More tools | Create Application shortcut and it works flawlessly.  This is on version: \nGoogle Chrome   40.0.2214.115 (Official Build) m\nRevision    831713c5c90271926c2ca70afaa969d32e4576f5-refs/branch-heads/2214@{#490}\nOS  Windows\nBlink   537.36 (@189787)\nJavaScript  V8 3.30.33.16\nUser Agent  Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\n. I was having the same problem from http://quilljs.com but I went to settings | More tools | Create Application shortcut and it works flawlessly.  This is on version: \nGoogle Chrome   40.0.2214.115 (Official Build) m\nRevision    831713c5c90271926c2ca70afaa969d32e4576f5-refs/branch-heads/2214@{#490}\nOS  Windows\nBlink   537.36 (@189787)\nJavaScript  V8 3.30.33.16\nUser Agent  Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\n. ",
    "juodaspaulius": "Had the same issue in Chrome. Disabled all extensions one by one. It was switching off the chromeIPass(2.6.8) extension that fixed the issue. I guess I will create an issue on chromeIPass page.\n. ",
    "WriterStat": "Hi! Were you able to count the lines in quilljs?  Curious as I have a need to count the lines. recount the lines etc...\nThx!\n. Hi! Were you able to count the lines in quilljs?  Curious as I have a need to count the lines. recount the lines etc...\nThx!\n. Granted. \nI know you guys are totally busy. But as a suggestion an encapsulated way to do this, conventions, or pointers to do this, docs, under your quick direction, would totally help other programmers, then help you with modules and additions.  Understand the code.  Such a small, quick thing would net you a huge benefit. Plugins etc...to the toolbar. Being able to expose their own functionality without ruining your code as well allowing them to update to new versions as they come out.  Without any large conversions.\nGranted I can put in the html in my code. The quill.js code rewrites the selects in the toolbar to abide by the current style, etc...\nHaving a generic supported way to add things to the toolbar, that would then be handled by modules, would be a huge boon.  You are super close with what you have. As a thought for later on. There's my vote. =)\nThanks for the great software and the thoughts and listening.  Cheers,\n. Granted. \nI know you guys are totally busy. But as a suggestion an encapsulated way to do this, conventions, or pointers to do this, docs, under your quick direction, would totally help other programmers, then help you with modules and additions.  Understand the code.  Such a small, quick thing would net you a huge benefit. Plugins etc...to the toolbar. Being able to expose their own functionality without ruining your code as well allowing them to update to new versions as they come out.  Without any large conversions.\nGranted I can put in the html in my code. The quill.js code rewrites the selects in the toolbar to abide by the current style, etc...\nHaving a generic supported way to add things to the toolbar, that would then be handled by modules, would be a huge boon.  You are super close with what you have. As a thought for later on. There's my vote. =)\nThanks for the great software and the thoughts and listening.  Cheers,\n. I think I'm missing a user forum. =)\n. I think I'm missing a user forum. =)\n. Will do. Hoping quill.js will support the basic html attributes. =) Will help other creators/programmers want to more include it in their software.\nKey here is remember quill.js will be integrated into other things more often than not. =) Thanks!\nCheers,\n. Will do. Hoping quill.js will support the basic html attributes. =) Will help other creators/programmers want to more include it in their software.\nKey here is remember quill.js will be integrated into other things more often than not. =) Thanks!\nCheers,\n. Elements in the tool bar should pass through any html attributes they don't understand when they read in the tool bar for the theme.  Other wise you make people choose between something that doesn't have a theme, can't use one, or something where the picker that is crippled/strips out attributes to be able to use the theme.\nThe oblivious fix is, just pass through the html that the picker doesn't understand.  Then your themes work and the select/pickers work and as well the other toolbar elements.  Then people don't have to choose two bad devil choices.  And they can expand it.\nYou asked me to make it a feature, but really it's a bug in your theme-ing system. \n. Elements in the tool bar should pass through any html attributes they don't understand when they read in the tool bar for the theme.  Other wise you make people choose between something that doesn't have a theme, can't use one, or something where the picker that is crippled/strips out attributes to be able to use the theme.\nThe oblivious fix is, just pass through the html that the picker doesn't understand.  Then your themes work and the select/pickers work and as well the other toolbar elements.  Then people don't have to choose two bad devil choices.  And they can expand it.\nYou asked me to make it a feature, but really it's a bug in your theme-ing system. \n. Thanks again for the software. Again would just like to see a better version of the toolbar for the software. =)\n. Thanks again for the software. Again would just like to see a better version of the toolbar for the software. =)\n. Sure will give you a quick list in a little bit. And will check again.\nUsing win 10 and win 8.1 Newest/current version of Firefox. And Google Chrome as well.  I'll check the version of Google Chrome I have, but I believe it's the up to date newest, will check to make sure.\nSometimes works intermittently, if you keep trying it over and over... \nSo basically I visit the beta page, type asdfg highlight it, bubble comes up I choose bold and nada, then Italics and nada, bold and nada, then italics and nada, then I choose bold again and it bolds, if I keep trying, after that it may or may not italics or bold. But the percentage chance it will is higher.\nOpening the Firefox console I get this warning when using the beta software:\nmutating the [[Prototype]] of an object will cause your code to run very slowly; instead create the object with the correct initial [[Prototype]] value using Object.create quill.js:3831:416\nPossible it just runs slow? Maybe the emitter/events? Not sure.  Feels like it's working on something/sluggish, but no response.  Wish I could tell you more, I could put it on a debugger I guess. I'd just be guessing until then.\nI'll check this in win 8.1 Will try this as well on my laptop/touchtop.\nCheers, -C\n. Sure will give you a quick list in a little bit. And will check again.\nUsing win 10 and win 8.1 Newest/current version of Firefox. And Google Chrome as well.  I'll check the version of Google Chrome I have, but I believe it's the up to date newest, will check to make sure.\nSometimes works intermittently, if you keep trying it over and over... \nSo basically I visit the beta page, type asdfg highlight it, bubble comes up I choose bold and nada, then Italics and nada, bold and nada, then italics and nada, then I choose bold again and it bolds, if I keep trying, after that it may or may not italics or bold. But the percentage chance it will is higher.\nOpening the Firefox console I get this warning when using the beta software:\nmutating the [[Prototype]] of an object will cause your code to run very slowly; instead create the object with the correct initial [[Prototype]] value using Object.create quill.js:3831:416\nPossible it just runs slow? Maybe the emitter/events? Not sure.  Feels like it's working on something/sluggish, but no response.  Wish I could tell you more, I could put it on a debugger I guess. I'd just be guessing until then.\nI'll check this in win 8.1 Will try this as well on my laptop/touchtop.\nCheers, -C\n. That's def possible. Is Babel creating an array subclass in ES5?  I'm guessing that might trigger the aggressive warning in FireFox.  There is no warning in Chrome.\nI'm going to check on my touchtop, win 10, newest Chrome/Firefox/Edge.  The odd thing is there is no error thrown that I can see in the console when the buttons don't trigger or trigger but don't respond. It just intermittently ignores your click on the bubble buttons, curious, but only on the bubble version, snow version works just fine.  Cheers, I'll attach a screencast of me doing it.  It won't be an answer. But it will show the problem, for whatever it's worth.  I just figured it was a beta thing. maybe it's a Babel Transpiling thing es2015.\nAnywho at least you will have proof. Will do in a day or so.\n. That's def possible. Is Babel creating an array subclass in ES5?  I'm guessing that might trigger the aggressive warning in FireFox.  There is no warning in Chrome.\nI'm going to check on my touchtop, win 10, newest Chrome/Firefox/Edge.  The odd thing is there is no error thrown that I can see in the console when the buttons don't trigger or trigger but don't respond. It just intermittently ignores your click on the bubble buttons, curious, but only on the bubble version, snow version works just fine.  Cheers, I'll attach a screencast of me doing it.  It won't be an answer. But it will show the problem, for whatever it's worth.  I just figured it was a beta thing. maybe it's a Babel Transpiling thing es2015.\nAnywho at least you will have proof. Will do in a day or so.\n. I used a combination of elements. I needed to know when the editing surface scrolled below the page size.\n. I used a combination of elements. I needed to know when the editing surface scrolled below the page size.\n. Understood. Thanks! And for the software.\n. Understood. Thanks! And for the software.\n. Hi! I'm interested in this where it pertains to exporting to other document types and standards driven renderers. We aren't using node.js on the server side. But instead PHP or Rails etc...\nI found this. https://packagist.org/packages/deanblackborough/php-quill-renderer \nBuilding a renderer that is somewhat future proof seems to be hard for most. Which is why people are using root and using innerHTML and saving html instead of the Deltas. \nUntil there is a decent renderer for each of the standard programming languages, this debate is going to continue to rage on. Having a Delta is way cool. But only if you can get it out into other things. Else it's a closed system.\nPeople like open systems.\nAdoptance of Deltas would go way up if there were standard renderers for it.\nIn a best case world I'd like to save a Delta and have a renderer for html or markdown.\nCould be it's time to spend some time on renderers. And rendering guides.. Hi! I'm interested in this where it pertains to exporting to other document types and standards driven renderers. We aren't using node.js on the server side. But instead PHP or Rails etc...\nI found this. https://packagist.org/packages/deanblackborough/php-quill-renderer \nBuilding a renderer that is somewhat future proof seems to be hard for most. Which is why people are using root and using innerHTML and saving html instead of the Deltas. \nUntil there is a decent renderer for each of the standard programming languages, this debate is going to continue to rage on. Having a Delta is way cool. But only if you can get it out into other things. Else it's a closed system.\nPeople like open systems.\nAdoptance of Deltas would go way up if there were standard renderers for it.\nIn a best case world I'd like to save a Delta and have a renderer for html or markdown.\nCould be it's time to spend some time on renderers. And rendering guides.. I got this note from BenBro which helps a lot, thanks:\n\nQuill was designed for Operational Transformation so it is optimized for such a use case. You don't need to save the whole doc each time.\nThe text-change event gives you the change as a delta. You can find more info here.\nYou can compose several deltas into a single delta either on the client or on the server.\nYou can save each change on the server, or collect several changes and save them, either in RAM or DB/disk.\nYou'll need to test the load on your own system.\n\nThis portion below especially is good as I'd like to collect all the changes for a given time period and submit them to save in the db as a whole sometimes. \n\"You can save each change on the server, or collect several changes and save them, either in RAM or DB/disk.\"\nStill a bit curious about the server load for saving deltas etc... As could be a bandwidth issue saving every 1/3 sec once a few people are editing. But could mitigate that by saving changes at less intense intervals and only for backups.. I got this note from BenBro which helps a lot, thanks:\n\nQuill was designed for Operational Transformation so it is optimized for such a use case. You don't need to save the whole doc each time.\nThe text-change event gives you the change as a delta. You can find more info here.\nYou can compose several deltas into a single delta either on the client or on the server.\nYou can save each change on the server, or collect several changes and save them, either in RAM or DB/disk.\nYou'll need to test the load on your own system.\n\nThis portion below especially is good as I'd like to collect all the changes for a given time period and submit them to save in the db as a whole sometimes. \n\"You can save each change on the server, or collect several changes and save them, either in RAM or DB/disk.\"\nStill a bit curious about the server load for saving deltas etc... As could be a bandwidth issue saving every 1/3 sec once a few people are editing. But could mitigate that by saving changes at less intense intervals and only for backups.. Hi! I guess I can see how you felt the way you did. =) I will reword this. =) I guess I was polling the audience to see what they are doing for exports to other document types from within Quilljs.\nI'd like to use quilljs for large documents 6000+words. And I'd like to export to other doc types.\nI need to be able to export them to other document types. I am using root as I said. Has issues, Deltas has issues when using for large documents, 6000+words.\nAs a user I'm voicing something here, albeit possibly in not the best way. =)\nI can ask the group about exporting docs to other docs using deltas.  And see what they are doing for this. And get insight or answers I might not have thought of on how to go about it.\nSuggestions?\nThis is the only place to ask as there's not another user forum for these questions.\nHow are people exporting to other document types using root or Deltas on large documents?\nI will re-ask.\nThanks! Cheers on the great software!. Hi! I guess I can see how you felt the way you did. =) I will reword this. =) I guess I was polling the audience to see what they are doing for exports to other document types from within Quilljs.\nI'd like to use quilljs for large documents 6000+words. And I'd like to export to other doc types.\nI need to be able to export them to other document types. I am using root as I said. Has issues, Deltas has issues when using for large documents, 6000+words.\nAs a user I'm voicing something here, albeit possibly in not the best way. =)\nI can ask the group about exporting docs to other docs using deltas.  And see what they are doing for this. And get insight or answers I might not have thought of on how to go about it.\nSuggestions?\nThis is the only place to ask as there's not another user forum for these questions.\nHow are people exporting to other document types using root or Deltas on large documents?\nI will re-ask.\nThanks! Cheers on the great software!. Looks like I will try and contribute on item #993 Render quill delta.\nThanks! . Looks like I will try and contribute on item #993 Render quill delta.\nThanks! . ",
    "jziggas": "Good call, thanks for reminding me. I'm on the latest Chrome and quilljs.com seems to work fine.\n. This can still be a problem if the editor is within a z-index stacking context where something to the left has higher z-index than the element that the editor is contained in. Can the popover be disabled or its position modified?. ",
    "simobasso": "confirm on Chrome 39.0.2 / linux\n. ",
    "slwen": "I'm still seeing this issue after upgrading to v0.20.1 in Chrome v46.0.2490.80 and Safari v9.01 (desktop).\n\nThe work-around of wrapping the buttons in <button> tags is still working though. See above.\n. ",
    "kristianlm": "I'm also seeing this on Chromium 48.0.2564.97, but not not Firefox. Can we reopen the issue?\nOh, and also, it only happens if you move the cursor as you hold the mouse-button down.\n. Strange. It's not working here. Maybe Chromium \u2260 Chrome? This is what I'm doing:\n1. Open http://quilljs.com/examples/\n2. Go to the Full Example (the buttons above work fine)\n3. Select \"Shadows\" from the text by double-clicking on it\n4. Press the Bold <span...> or  the Text Color <span...> and drag the mouse 1 pixel or more\n5. Cursor is moved to top of document\nNote that a single click without moving the cursor a tiny bit (like you often might accidentally do on touchpads) does not trigger problem. If you're still not able to reproduce, I can try and make a pretty screenshot animation like you did and give you guys more information for bug-hunting.\nI would be happy if I could use the button-workaround (it's working in the Basic Example above), but the problem still persists for Text Color (<select> doesn't help :()\n. ",
    "willrowe": "I can confirm this is happening in Google Chrome 48.0.2564.109 on Mac OS X 10.10.5. Please note that as @kristianlm has said you must drag while clicking the button.\n. setHTML should reset the selection range to either the beginning or end. This would then trigger the selection-change event and reset the toolbar correctly. I can make a PR for this if wanted.\n. I can put together a PR for this unless someone else wants to.\n. I'm trying to figure out what would be the best way to do it. I can simply trigger setSelection, but after some digging it turns out that it's already being triggered, but using silent as the source. After looking into the code further I've come to question why the selection-change event is ever silenced. In my thinking, you'd want the event to be triggered in most every case (whether it's triggered internally or not) and let the listener decide if it wants to act based on source type. Can you give some insight @jhchen ?\n. Even if the selection is changed because of something internal, that's still an important event. This is evident because of the bug that we discussed above. You can see here that the source which is passed to the update method on the selection instance is set to silent if there's been any change to the text (a delta instance). If it wasn't for this then the selection-change event would be triggered normally.\nThe toolbar is listening for the selection-change event so that it can update its active buttons, so it needs that event triggered every time the cursor is moved, no matter if it's internally or by the user. Can you see my confusion as to why it's being silenced?\n. You should probably just have one feature in this PR, since this is titled as adding the code tag I would remove the strip whitespace functionality. Also what's up with the .idea directory?\n. Why not medium, large, and x-large? I think the point is to not tie it to a specific pixel value. There has also been discussions about adding heading tags (h1 - h6) which would further separate from specific values and rely on the stylesheet for sizing.\n. That's a good point as far as it being a way to insert and nothing else. If that's the direction that you want to go then the current behavior would be fine.\nThe reason I created this PR was to have consistent functionality for all toolbar formats, seeing as they display the state of the selected text. Unlike other editors, Quill has a more free-form toolbar that doesn't limit where the buttons are placed. In Gmail for example, the button to insert an image is on a separate toolbar from the text formatting.\nAlso, there is code to delete an image when the button is pushed and an image is already selected, so to me it makes more sense to display that an image is selected so you know if you click it that you'll essentially be toggling it off.\nI was actually impressed to see this functionality as it is not normal in other editors and I think it would be a shame to remove it. If more functionality is added to the image tooltip in the future (setting an alt or title tag, choosing a different image, etc.) the button could be used to pull up the tooltip again to edit those values.\nTo sum it up, my thoughts behind this were to keep consistency between formats and allow for more robust handling of images.\n. I've noticed this as well for all the tooltips. It should be detecting the edge of the editor.\nAlso, something I've been wondering about for awhile @jhchen, why do the tooltips use a high negative number for the left css property to hide them instead of visibility: hidden or display: none? Ideally, I'd think you'd just want to add a class like ql-active to the tooltip and have the correct display value in the CSS files.\n. That code seems to be correct, there just needs to be an extra check to make sure that the value that's calculated is not less than 0, if so it should set it to 0.\n. It probably needs to wrap depending on it's width then. @jhchen will need to weigh in on how he'd like to handle that.\n. I've only been able to reproduce this sporadically, so I'm not quite sure what's causing it. Have you seen this happening anywhere else besides the homepage?\n. Because of recent changes to how the toolbar is listening for events, all code in the keyboard module referring to the toolbar is obsolete and is in fact double-calling it. I'm actually working on a PR right now to remove all toolbar references in this module.\n. This is a duplicate of #360. Please read through existing issues more carefully in the future.\n. If you remove alt: \"Lab Octocat\", it works. The only place that I can see a reference to being able to set the alt attribute is in the documentation. I don't believe it's possible to set any attributes on an embed in this way. Not sure if this was supposed to be a feature at one time, but it should probably be removed from the documentation since it doesn't work.\n. I'm not familiar with how all that's supposed to work. @jhchen might be able to help you out.\n. @Nyalab can you link to how you implemented it or throw it in a gist?\n. There's a bug that's preventing all of the formats from being re-applied. I'm about to submit a PR to fix it.\n. To clarify, this will only fix the issue mentioned by @peterweck and not the original issue.\n. Hop on IRC channel #quilljs and I can help you out.\n. It turned out that the issue was that the editor was losing focus when clicking on a custom button. This can be resolved by adding a custom format tied to a button or by calling quill.focus before quill.getSelection. A demo can be seen here\n. Yes, there's no issue with Quill itself. As long as @rumanoid is satisfied it can be closed.\n. Can you explain what you mean in a little more detail?\n. This is because of\ncss\n.ql-editor {\n    white-space: pre-wrap\n}\ninterfering with the text-align value. According to this bug report it is actually the expected behavior according to the standard for the white-space property. I tested this on all major browsers, the results are as follows:\n:heavy_check_mark: = displays justified\n:x: = does not display justified\n| Browser | Windows | Mac OS X |\n| :-- | :-: | :-: |\n| Chrome | :heavy_check_mark: | :heavy_check_mark: |\n| Firefox | :x: | :x: |\n| Opera | :heavy_check_mark: | :heavy_check_mark: |\n| Safari | :heavy_minus_sign: | :x: |\n| Internet Explorer | :x: | :heavy_minus_sign: |\nIt seems that only Blink-based browsers actually apply justified alignment. In the other browsers if you set it to right or center aligned it will do that, just not justified.\n. I found where this was changed in Blink:\nhttps://codereview.chromium.org/148013005/\nIt seems it's up to the browser whether to justify or not.\n. I have not been able to reproduce this, but I do get a brief flash of the text being styled before it goes back to normal. Check out this pen, is happening with this one too?\n. :+1: \n. There are some issues with the test, I'll take a look at it later.\n. Any chance you could re-run the one job that timed out @jhchen?\n. As far as naming goes, getLeafFormats and getLineFormats are pretty explicit in that they imply that they are formats for a certain part of the content (whether it be a leaf or a line). getFormats could be confusing because it would seem that it should return a list of all the formats that are currently registered with Quill. Maybe getTextFormats would be more clear?\nAnother alternative would be to stick with how the toolbar module was doing it and call them activeFormats, activeLeafFormats, and activeLineFormats.\n. The main method returns both leaf and line formats, but if only one or the other is required then you'd want access to those methods. These are mostly to expose methods for use with external modules and creating a more robust API. Does that make sense?\n. I'll make those other two private then. A third parameter would determine what would be returned and default to getting both, should I add constants for these values? Like ALL, LEAF, and LINE?\n. Thanks for pointing that out @HHogg. I've added tests for that situation and fixed it. I also decided to not add the option to specify what kinds of formats should be returned right now. This simplifies it to bare bones.\n. Any more feedback for this?\n. @pedrosanta that's something that I'm not sure about. It would depend on the use case. I can see the following situations:\n- Getting the formats that are applied to an entire range.\n- Getting any formats in a range.\n- Determining whether a range has a certain format applied to it.  \nShould there be multiple methods to cover these situations or just added arguments to change what is returned?\n. I can confirm this. I would assume this is not expected behavior. I can put together a PR if this needs to be fixed.\n. Yeah, the tests tend to timeout a lot and fail for reasons other than the tests not actually passing.\n. dist should not be included.\n. It looks like either the passed format isn't valid or you didn't pass a value for the format.\n. I can confirm this behavior on the Quill website itself. I never really noticed this before, so I'm not exactly sure if it's a bug or not. If you select something in any of the menus then they are all closed, but if you don't select anything and then open another, it will remain open.\n. This is a duplicate of both #519 and #411\n. I believe you can use the getText method, it should return just the text content and no formatting or HTML code.\n. The demo page demonstrates the use of a couple of modules that allow editing by multiple authors simultaneously like in Google Docs.\n. As far as I know Quill has never supported image upload. See #90.\n. Sorry, I assumed you were referring to the latest stable release since you didn't specify any version.\nWhat you're talking about isn't exactly uploading any image. It is taking a file from your computer, converting it to a data URI, and inserting that into an image tag's src attribute. Related issue #103, related commit a615d5294145e9e96e7a60136449c12c41f9f4ce.\n. Related #822 \n. This is a BC break.\n. @pedrosanta if you look at line 284, the first leaf is passed in there. This is because the reduce function requires a starting point, so the first leaf it broken off and used as the base and then all subsequent leaves are compared on top of it.\n. ",
    "remkoboschker": "I have tested the full quill example and am running into issues with the Treewalker in IE 8. Will try to polyfill using jwalker when time allows.\n. ",
    "rocketraman": "@calibr  Why are you saving and printing firstDelta and then not overwriting that value? Here is a version without that: http://jsfiddle.net/ho55brd3/. Seems to work fine: \n[{\"retain\":12},{\"insert\":\"12\"}]\n[{\"retain\":14},{\"insert\":\"3\"}]\n. @calibr  Why are you saving and printing firstDelta and then not overwriting that value? Here is a version without that: http://jsfiddle.net/ho55brd3/. Seems to work fine: \n[{\"retain\":12},{\"insert\":\"12\"}]\n[{\"retain\":14},{\"insert\":\"3\"}]\n. I don't understand your problem then. The delta behavior seems perfectly fine.\n. I don't understand your problem then. The delta behavior seems perfectly fine.\n. > I don't see any difference between my and yours fiddle.\nHah, I see that for some reason my changes didn't get saved in the fiddle.\nAnyway, are you saying that the delta objects are being modified by quill after they are returned? That doesn't seem to be happening in this test case: \n``` javascript\nvar editor = new Quill('#editor');\nvar res = document.getElementById(\"res\");\nvar deltaOps = []\neditor.on('text-change', function (delta, source) {\n    deltaOps.push(delta.ops)\n    res.innerHTML += \"\" + JSON.stringify(deltaOps);\n});\n```\n[[{\"retain\":12},{\"insert\":\"1\"}]]\n[[{\"retain\":12},{\"insert\":\"1\"}],[{\"retain\":13},{\"insert\":\"23\"}]]\n[[{\"retain\":12},{\"insert\":\"1\"}],[{\"retain\":13},{\"insert\":\"23\"}],[{\"retain\":15},{\"insert\":\"4\"}]]\n(http://jsfiddle.net/h95zLuu6/)\n. > I don't see any difference between my and yours fiddle.\nHah, I see that for some reason my changes didn't get saved in the fiddle.\nAnyway, are you saying that the delta objects are being modified by quill after they are returned? That doesn't seem to be happening in this test case: \n``` javascript\nvar editor = new Quill('#editor');\nvar res = document.getElementById(\"res\");\nvar deltaOps = []\neditor.on('text-change', function (delta, source) {\n    deltaOps.push(delta.ops)\n    res.innerHTML += \"\" + JSON.stringify(deltaOps);\n});\n```\n[[{\"retain\":12},{\"insert\":\"1\"}]]\n[[{\"retain\":12},{\"insert\":\"1\"}],[{\"retain\":13},{\"insert\":\"23\"}]]\n[[{\"retain\":12},{\"insert\":\"1\"}],[{\"retain\":13},{\"insert\":\"23\"}],[{\"retain\":15},{\"insert\":\"4\"}]]\n(http://jsfiddle.net/h95zLuu6/)\n. > Yes operations array is remains unchanged, but whole ops field is reassigned by new one for Delta object, in other words you store reference to old ops array\nAh interesting. Thanks for explaining the issue!\n. > Yes operations array is remains unchanged, but whole ops field is reassigned by new one for Delta object, in other words you store reference to old ops array\nAh interesting. Thanks for explaining the issue!\n. ",
    "calibr": "@rocketraman it's just a test case which shows \"delta changing\" behaviour. sorry but I don't see any difference between my and yours fiddle.\n. I'm new to OT related things and maybe have wrong idea about working with deltas. In my project I save all deltas in an array which composed in one Delta when user clicks Save button, but composing generates wrong result because deltas in array have not their original values. It's not real problem for me because I create workaround by cloning \"ops\" array to preserve original values, but I found it strange that the object is changed after the user got it, I can provide more samples if it make sense..\n. Yes operations array is remains unchanged, but whole ops field is reassigned by new one for Delta object, in other words you store reference to old ops array.\nI have checked Quill sources and found that my issue related to UndoManager timeout option, and if I set it to zero Delta's remains unchanged\nQuill.modules[\"undo-manager\"].DEFAULTS.delay = 0;\nBy default this value is 1000 and delta can be changed in this time interval.\n. Looks like that is because a quill delta always ends with \"\\n\", therefore an empty document contains the delta:\n{\"insert\":\"\\n\"}\nWhen you type the \"a\" letter your editor actually contains this delta\nSo, if you add this missing part to your compose chain you will get the expected result:\n```js\nconst Delta = require('quill-delta');\nvar a = new Delta([{\"insert\":\"\\n\"}]);\nvar b = new Delta([{\"insert\":\"a\"}]);\nvar c = new Delta([{\"retain\":1},{\"retain\":1,\"attributes\":{\"header\":1}}]);\nvar composed = a.compose(b).compose(c)\n// {\"ops\":[{\"insert\":\"a\"},{\"insert\":\"\\n\",\"attributes\":{\"header\":1}}]}\n```\nmore info here https://quilljs.com/guides/designing-the-delta-format/. ",
    "igmcdowell": "I also ran into this when doing client side-buffering before sending ops over the network. The result is duplicated data and a server-representation that differs from the client view. Like @calibr I'm working around it by cloning the ops before buffering, but it's definitely surprising that they're not treated as immutable by quill.\n. Good catch, sorry about that. \nI went with the suggestion of @willrowe. Let me know if you'd prefer pixel values and I'll switch to valid px values.\n. Good catch, sorry about that. \nI went with the suggestion of @willrowe. Let me know if you'd prefer pixel values and I'll switch to valid px values.\n. Sounds good, pixels it is.\n. Sounds good, pixels it is.\n. Here's a screenshot of the issue reproduced on http://quilljs.com/docs/modules/multi-cursors/\n\n. Here's a screenshot of the issue reproduced on http://quilljs.com/docs/modules/multi-cursors/\n\n. ",
    "Metrakit": "Nice work! Thanks. I will use your fork for this!\n. ok I just want help you\n. ",
    "nazar-pc": "@jhchen, what are your current thought on this topic? I'm using Shadow DOM for more than a year now and many others as well, but there is no decent WYSIWYG editor that works under Shadow DOM yet.\nI've got TinyMCE fully functioning under both native Shadow DOM and Shadow DOM polyfill here: https://github.com/tinymce/tinymce/pull/561 even though TinyMCE looks much heavier than Quill.\nI'm not sure I'll be able to add proper tests for all cases, but I can definitely spend some time and bring many more things including Quill working under Shadow DOM. It just depends whether you're ready to put it on roadmap and help with upstreaming. I've maintained Shadow DOM-aware forks of some projects and it is not fun at all to maintain it alone without upstream support.\n. ",
    "wallylawless": "If there's anything more I can do to help just let me know.\nOn Tue, Mar 17, 2015 at 3:50 PM, Jason Chen notifications@github.com\nwrote:\n\nThank you for the report. Looks like something recent in webkit changed paste behavior to use a font-weight style instead of copying the  tag.\nReply to this email directly or view it on GitHub:\nhttps://github.com/quilljs/quill/issues/306#issuecomment-82567190\n. \n",
    "ivan-i": "This fix seems to be lost, the critical or node.style.fontWeight > 500 is missing. Merge conflicts? The issue is not fixed.\nIt is a very annoying bug for all Chrome/Safari users who use Quill-powered interfaces everyday. The fix is very simple, just add a check for > 500 in addition to bold check.\n. After some reading I am not sure that > 400 is correct. From https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback:\n\nThis means that for fonts that provide only normal and bold, 100-500 are normal, and 600-900 are bold.\n\nTherefore I think > 500 is actually correct.\nCSS specs agree:\nhttp://www.w3.org/TR/css3-fonts/#propdef-font-weight\nhttp://www.w3.org/TR/css3-fonts/#fontstylematchingalg\nhttp://www.w3.org/TR/CSS2/fonts.html#propdef-font-weight\n. ",
    "aadamsx": "I'm seeing the same thing in 0.20.0.\n. I'm running into this issue now.  I have text in word, and some of it is bolded, when I copy and paste it the bolded text reverts to normal.  I'm running on 0.20.0.\nSo this fix failed and is not apart of 0.20.0, now what? \nI can type in to the editor 'This is BOLD text', and save and the bold shows.  Then I copy and paste the resulting html in a <li>html here</li> into a Word document and I get the right result,  'This is BOLD text', but if I take the same copied html and paste it again in a new Quill editor window the bold is gone.\nThis is what the saved 'This is BOLD text' looks like:\n<div class=\"ql-editor ql-content\" contenteditable=\"true\">This text is <b>BOLD</b></div><div class=\"ql-paste-manager\" contenteditable=\"true\"><br></div>\n. Here's a little more background on what I'm seeing:\nI'm using Quill Editor to provide rich text editing into my application.  I'm also using clipboar.js to copy this text to the clipboard.\nIn mongo when I save off a simple edit session, it looks something like this:\n<div class=\"ql-editor ql-content\" contenteditable=\"true\">This</div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><br></div><div class=\"ql-editor ql-content\" contenteditable=\"true\">text</div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><br></div><div class=\"ql-editor ql-content\" contenteditable=\"true\">is</div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><br></div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><b>BOLD</b></div><div class=\"ql-paste-manager\" contenteditable=\"true\"><br></div>\nUsing Meteor Blaze and Handlebars my code to target this html looks like this:\n<div class=\"contents regular\">\n                        <div id=\"message-{{messageId}}\">\n                          {{{message}}}\n                        </div>\n                      </div>\n                      <span id=\"copy-{{messageId}}\" alt=\"Copy to clipboard\" data-clipboard-target=\"#message-{{messageId}}\" data-id=\"{{messageId}}\" class=\"\" style=\"float: right; margin-right: 15px; cursor: pointer;\">\n                        <i class=\"fa fa-clipboard\"></i>\n                      </span>\nI also have code to allow me to see what is copied to the clipboard:\nvar clipboard = new Clipboard('span[id^=\"copy-\"]');\n  clipboard.on('success', function (e) {\n    console.info('Action:', e.action);\n    console.info('Text:', e.text);\n    console.info('Trigger:', e.trigger);\n  });\nWhen I copy the text to the clipboard, all I see in this example is this in the console:\n```\nAction: copy\nmessages-detail.js?005609202faf1271a61336d16a44247de0aa130c:30 Text: \nThis\ntext\nis\nBOLD\n```\nSo when I copy this text from the clipboard to Word, the word BOLD is bolded, but if I copy this from the clipboard back into Quill editor, all the formatting and any color stays, but I loose the bold in the BOLD text.\nAlso, any tips on why the formatting stays when copying to Word but not when I try copying to the Quill Editor.\nEdit:\nI'm using ClipMate to see what's actually copied to the clipboard.  I have contents in Binary format to see the formatting.  Just focusing on the BOLD text element, I see this in the binary:\n<b style=\"box-sizing: border-box; -webkit-font-smoothing: antialiased; font-weight: 700; background-color: inherit;\">BOLD</b>\nBut when it's copied into Quill, the <b> element turns into a <span>\n. After further research. The bold seems to be working in FF but not in Chrome.  \nI have another example...\nThis is the underlying HTML that clipboar.js is suppose to be copying to the clipboard:\n<b style=\"color: rgb(204, 0, 0); font-family: Arial, sans-serif; font-size: 12pt;\">*****Bold Text****&nbsp;</b>\nOf course if you look at the text property in Clipboard, the text just looks like so: ** _Bold Text*_* , but the underlying embedded HTML comes along with it on the clipboard.\nWhen I copy from Chrome rich-text (with embedded HTML) to the Quill Editor with clipboar.js, looking at the binary of the clipboard, the bolded text has this for embedded HTML:\n<b style=\"box-sizing: border-box; -webkit-font-smoothing: antialiased; font-weight: 700; color: rgb(204, 0,0); font-family: Arial, sans-serif; font-size: 12pt; background-color: inherit;\"><br class=\"Apple-interchange-newline\">*** Bold Text ***\u00c2</b>\nIn FF the binary for the text looks like this:\n<b style=\"color: rgb(204, 0,0); font-family: Arial, sans-serif; font-size: 12pt;\">*** Bold Text ***</b>\nIn Chrome the * Bold Text * is not bolded, in FF it is.\nThis is the mongo field saved from Quill when in Chrome:\n<div class=\"ql-editor ql-content\" contenteditable=\"true\"><br></div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><span style=\"color: rgb(204, 0, 0); font-family: Arial, sans-serif; font-size: 12pt;\">*****Bold Text*****&nbsp;</span></div><div class=\"ql-paste-manager\" contenteditable=\"true\"><br></div>\nHere, the <b has been replace with a <span>\nThis is the mongo field saved from Quill when in FF:\n<div class=\"ql-editor ql-content\" contenteditable=\"true\"><b style=\"color: rgb(204, 0, 0); font-family: Arial,sans-serif; font-size: 12pt;\">*****Bold Text*****&nbsp;</b></div><div class=\"ql-editor ql-content\" contenteditable=\"true\"><br></div><div class=\"ql-paste-manager\" contenteditable=\"true\"><br></div>\n. ",
    "Sopamo": "Any plans / estimate on this? I would be glad to help out on that feature branch if you wish.\n. ",
    "adamkdean": "If I may add my opinion, this is a subpar solution, as it means a lot of formatText calls if your format requires multiple attributes. Take for example, if you wanted to format a link to have more metadata than just the href, you may wish to insertText(0, 'link here', { link: 'http://example.com', nofollow: true, target: '_about' } etc.\nWith what you're suggesting, I'd first have to insert the text, then get the location of it, then call formatText three times, each with three attributors configured. It doesn't feel like JavaScript.. To use this At.js I had to grab the already typed data the html in $li.data('item-data'), then use getContents to get both the delta up to the selection index, and the delta after it, minus anything already typed, then I'd sandwich a new insert op inbetween those two op arrays.\nIt's not the best solution, but it's what had to be done. I also had to manually set the selection index (lastTextChangeIndex below) on text-change because Quill is unreliable with it's getRange.\nvar before = thisQuill.getContents(0, lastTextChangeIndex - removeLength);\nvar after = thisQuill.getContents(lastTextChangeIndex + 1);\nvar ops = before.ops.concat([\n  { insert: content }\n]).concat(after.ops);\nthisQuill.setContents(ops);\nthisQuill.setSelection(lastTextChangeIndex + content.length, 0, Quill.sources.USER);\nHope this helps anyone also stuck.. FYI functionOverrides was removed from At.js, so you'll have to use the latest version (not released yet) if you want to use this.. ",
    "Terricka": "Hi,\nIs the above solution still currently the only way to have  custom styles/attributes that are able to be preserved/saved on reload?\nWorking with a custom style and while I'm able to apply it, I notice that the value of the key is empty in the actual delta, therefore its unable to save (ie. a line height property)\n. ",
    "pajoma": "I have the same issue. Right now I have the following code to add my custom formats\njavascript\n    editor.addFormat('h4', {\n                        tag: 'span', \n                        class: 'h4',\n                    });\n       editor.formatText(0, 10, 'h4', '_format', 'silent');\nand the following css\ncss\n.h4_format {\n    font-weight: bold; \n    font-size: 16px; \n}\nQuill is simply concatenating the name and value parameters and apply the concatenated string as classname to the tag given in the prepared format (and wrapping the content with it). Will this behaviour change?\n. ",
    "radjivF": "@jhchen did you guys finally add this feature? its actually hard to find how to do it with the documentation\nThnks. cool thx it works. ",
    "andyjessop": "Ah thanks, sorry - missed that.\n. ",
    "dandormont": "@willrowe  funny you should mention that, I was actually already doing that in my own application for another reason - I was seeing an issue where if the new content was shorter than the old, and the selection had been at the end, it would lead to errors.\nI would love it if setHTML could do that itself, I just wasn't sure exactly what was the right place to do that.\n. Well, a user of mine produced content with exactly that combination of elements and as far as I can tell, they did it using Quill. I can't prove that with an exact stream of inputs, but it doesn't seem terribly likely that they manipulated the DOM on their own somehow, though I will investigate further and open a new issue if I find anything.\n. ",
    "tgvarik": "PasteManager._paste() timed out in unit-windows-ie-9. Failure is not related to PR changes. \nIE 9.0.0 (Windows 7) ERROR\n  Unspecified error.\n  at http://localhost:9876/karma/context.html:1\n.........\nIE 9.0.0 (Windows 7) PasteManager _paste() FAILED\n    Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\nIE 9.0.0 (Windows 7): Executed 510 of 550 (1 FAILED) ERROR (1.59 secs / 1.424 secs)\n. ",
    "rumanoid": "The content of the Quill editor comes from a database (which contains older code) sometimes using pre tags. It would be nice if Quill could parse them right (tabs, spacing and line breaks)\n. Yes,  it is good now, thanks for the help\nOn Jun 5, 2015 11:36 PM, \"Will Rowe\" notifications@github.com wrote:\n\nYes, there's no issue with Quill itself. As long as @rumanoid\nhttps://github.com/rumanoid is satisfied it can be closed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/388#issuecomment-109446874.\n. \n",
    "pedrosanta": "I'm also experiencing some issues with focus and scrolling. Gonna try this out.\n. Yeap, fixed it (https://github.com/reedsy/quill/pull/9), it's gone. :+1: for the merge of this.\n. @willrowe yhea, regarding the name, I also feel it might be somewhat confusing. For instance, I assumed these methods were to obtain all the active formats within a range (either if they matched the whole, or only a part of the range). Don't know if there's some sort of functionality around for that.\n. Sorry, I meant to do it on https://github.com/reedsy/quill. :smile: My bad.\n. @mikewagz I think as Grammarly extension stands presently, it will be hard to make it work without jeopardizing Quill stability.\nCheck the work-around pasted above that registers a format for Grammarly related manipulations to make it work, though this isn't thoroughly tested, so use at your own risk.. @deepakjtrigent I don't think there is an estimated date for that. Just keep following this issue. I'm sure any news will be posted here.. @jhchen:\n\nI do think multi-cursor and authorship modules can and should be independent from one another. And to be clear I'm talking about the modules -- both will need to know who wrote what from the server, but one should be able to use one or the other.\n\nIndeed, agree. IMO, one of the issues with having to use authorship module to use cursors was (1) the additional metadata it added to the document/delta (the author attribute) and (2) the <span> overuse it added to the contents as well. Which leads me to...\n\nIt was previously the case that Quill incorrectly emitted the insert location as described in #746 so the authorship module was used to correct this. I think this was the wrong approach and this root issue was fixed with the addition of an edit location suggestion in the diff library that Delta and thus Quill used.\n\nYep, authorship also seemed a 'weird' work around to fix this to me. I've taken the time to look to jhchen/fast-diff#2 and I'm very very happy that it was fixed in an pretty elegant way (kudos to @jhchen and @dmonad, thanks! \ud83d\udc4d). I've ran some tests and removed the 'lookback' fix/hack I had on reedsy/quill-cursors - this was in place because this module was in use with Quill 0.20.x in the past.\nI'm still working to publish a working test scenario of multi-cursors using ShareDB, will run a few more tests with it and I'll get back with news.. Hum, nice question question/discussion.\nHonestly, I think the current behaviour (1) seems to be the more faithful to what the method proposes. I feel that behaviour to be the most unambiguous one for that particular method - perhaps a better wording could be removeAllFormats, idk.\nOn another hand, variants for the other behaviours could also be considered - I was thinking of something along the lines of removeInlineFormats, removeBlockFormats and, hell why not, removeEmbeds, along the above one. Would that make sense?\nAnother thing I got into (but still have to confirm that one, I'm afraid bundling may be causing an issue on non-allowed formats removal by Parchment) was the need to remove only specific formats (a list of them) for a given range - including embeds. (Could be an option for these methods?) Thoughts?. Ok found a very interesting solution that was suitable to my problem:\n```\nDopeCustomBlot.getQuillInstance = function(domNode) {\n  let scrollBlot = Quill.find(domNode);\n// Navigate up to Scroll blot\n  while(scrollBlot.parent) {\n    scrollBlot = scrollBlot.parent;\n  }\nreturn Quill.find(scrollBlot.domNode.parentNode);\n}\nDopeCustomBlot.create = function (value) {\n  const node = super.create(value);\nconsole.log('Look ma, Quill instance options:', DopeCustomBlot.getQuillInstance(node).options);\nreturn node;\n}\n```\nA similar approach could be replicated on other methods.\nAnd since I've delved a bit more into the internals, it's clear the Blots/Parchment need to be instance agnostic \u2013 mainly for re-usability concerns IMO and the fact that Parchment is made to be Quill-independent as well \u2013 so although I would admit the interface/API having a method such this one (getQuillInstance), that would make Parchment bound to Quill.\nAnyway, leaving the shout.. Hi @lunikernel,\nI don't know of such guide. Have you seen zenoamaro/react-quill? Would that be helpful to check an approach to use Quill with React?\nCheers.. That comment saved my life. Searched for 'selection' at a first instance, but then 'cursors' did the trick. Use the search folks! #protip \ud83d\ude0e . Though, I feel the cursor should end up after the embed - it's currently ending before the embed, see https://codepen.io/pedrosanta/pen/NwgWOJ.. @jhchen Yep, true, fair enough. \ud83d\ude42. Could you explain it better why you are doing formatGroups.slice(1) here?\nIt seems to be ignoring the active formats of the first 'leaf', right? Shouldn't those first leaf formats be included/returned as well?\n. Ok, just took notice that this is supposed to return formats applied to the whole range. Even so, I'm still curious to why disregard the first leaf.\n. Probably because it was copied out from https://github.com/quilljs/quill/blob/develop/src/modules/toolbar.coffee#L133...\n. @willrowe Oh, ok, makes sense. Thanks. :grinning: \n. ",
    "gregmuellegger": "Anyone in for a review?\n. Anyone in for a review?\n. Ok makes sense, sort of. But I think there is a valid usecase for configuring this as described in #262 where you added it as a valid feature request.\n. Ok makes sense, sort of. But I think there is a valid usecase for configuring this as described in #262 where you added it as a valid feature request.\n. No need to be sorry. I just wanted to make sure that #262 and this tickets arguing is in line. Thanks for the review! Keep on the good work :)\n. No need to be sorry. I just wanted to make sure that #262 and this tickets arguing is in line. Thanks for the review! Keep on the good work :)\n. ",
    "joshmarinacci": "Ah, crud. this push request was supposed to have just the code patch, not the .idea or stripping stuff. I'll fix it.\n. Ah, crud. this push request was supposed to have just the code patch, not the .idea or stripping stuff. I'll fix it.\n. I just sent a new pull request.\n\nOn Apr 6, 2015, at 12:42 PM, Will Rowe notifications@github.com wrote:\nYou should probably just have one feature in this PR, since this is titled as adding the code tag I would remove the strip whitespace functionality. Also what's up with the .idea directory?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/quilljs/quill/pull/330#issuecomment-90213249.\n. I just sent a new pull request.\nOn Apr 6, 2015, at 12:42 PM, Will Rowe notifications@github.com wrote:\nYou should probably just have one feature in this PR, since this is titled as adding the code tag I would remove the strip whitespace functionality. Also what's up with the .idea directory?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/quilljs/quill/pull/330#issuecomment-90213249.\n. \n",
    "cj3kim": "Update:\nRemoved  Raleway CSS and same problem still occurs.\n. Update:\nRemoved  Raleway CSS and same problem still occurs.\n. Update:\nIt seems that writing text directly to qill-line is somewhat expected behavior. Why is this the case?\n. Update:\nIt seems that writing text directly to qill-line is somewhat expected behavior. Why is this the case?\n. ",
    "countach74": "Oh can you configure Quill to use iframes? No, I'm not. As to the latest\nversion: Is there a way to install that via bower?\nOn Tue, Apr 14, 2015 at 10:01 AM Brett Beutell notifications@github.com\nwrote:\n\nhaven't had an issue in most recent version. side-note: are you still\nusing iframes? you have my condolences [image: :grin:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/340#issuecomment-92981474.\n. Oh can you configure Quill to use iframes? No, I'm not. As to the latest\nversion: Is there a way to install that via bower?\n\nOn Tue, Apr 14, 2015 at 10:01 AM Brett Beutell notifications@github.com\nwrote:\n\nhaven't had an issue in most recent version. side-note: are you still\nusing iframes? you have my condolences [image: :grin:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/340#issuecomment-92981474.\n. I don't think I've defined any click events on top of the editor, but I\nwill check. I must all ready have the latest, as I just updated via bower.\nHave you tried using Quill with Angular? That's the context which I'm using\nit under. I suppose it could be possible that Angular is interfering with\nit in some way. I'll experiment with a minimalist setup to see if that\nworks (e.g. without Angular).\n\nOn Tue, Apr 14, 2015 at 10:55 AM Brett Beutell notifications@github.com\nwrote:\n\nhave you defined any click events on top of the editor? that messed with\nthe link tooltips for me.\nalso, yes-- from the README bower install quilljs\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/340#issuecomment-92997404.\n. I don't think I've defined any click events on top of the editor, but I\nwill check. I must all ready have the latest, as I just updated via bower.\nHave you tried using Quill with Angular? That's the context which I'm using\nit under. I suppose it could be possible that Angular is interfering with\nit in some way. I'll experiment with a minimalist setup to see if that\nworks (e.g. without Angular).\n\nOn Tue, Apr 14, 2015 at 10:55 AM Brett Beutell notifications@github.com\nwrote:\n\nhave you defined any click events on top of the editor? that messed with\nthe link tooltips for me.\nalso, yes-- from the README bower install quilljs\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/quilljs/quill/issues/340#issuecomment-92997404.\n. \n",
    "Sonic122": "Announcement of Academic Positions\nThe Department of Computer Science and Engineering invites applications for two\n(2) visiting positions in the following academic domains.\n1. Database Systems, preferably with specialization in Big Data or Object Relational data models\n2. Software Engineering, preferably with specialization in Web Engineering.\nThe visiting positions are for the rank of Lecturer or Assistant Professor and the contract duration will range from one (1) to two (2) years. Successful applicants are expected to commence employment in the academic year 2015-16 and not later than October 1st 2015.\nApplicants should submit the following:\n-Statement of Purpose\n-Extended Curriculum Vitae\n-Research Statement\n-Names of two referees\nApplications should be sent to Mr Achilleas Achilleos either electronically at a.achilleos@frederick.ac.cy or via post at the following address:\nFrederick University\nHuman Resources Service (attention Mr Achilleas Achilleos)\nPO Box 24729, 1303 Nicosia\nThe application deadline is 16:00, 18th of May 2015.\nIt is noted that success or failure for the aforementioned positions is in no way related to any future invitations for tenure-track positions in the given academic domains the Department may open.\n. ",
    "makc": "duh, wrong destroy\n. ok, forget the .on part. the gist of it is that on this line\n_.each(this.modules, function(module, name) { // <-----\n      if (_.isFunction(module.destroy)) {\n        return module.destroy();\n      }\n    });\nmodule argument is for some reason editor for my module. I have added the module like this:\n```\ncustom_quill_toolbar = (quill, options) ->\n    @quill = quill\n    @options = options\n    ....\nQuill.registerModule 'custom_quill_toolbar', custom_quill_toolbar\n```\nI guess there's something wrong about it :unamused: \n. so the quill sets editor.modules[name] to new custom_quill_toolbar, and coffee script returns whatever happens to be the last statement in the function. nice.\nso I just need empty return statement.\n. ",
    "HHogg": ":+1: on this, seems to work great so thanks... although nothing major but you could reuse the function a little bit that detects the removal of formats. \nSomething like ... \n``` coffee\nremoveFormats = (withInherited) =>\n  _.reduce(line.formats, (formats, value, name) =>\n    format = @quill.editor.doc.formats[name]\n    if format and format.isType('line') and withInherited(format)\n      formats[name] = false\n    return formats\n  , {})\nremoveInheritedFormats = removeFormats((format) -> format.config.inherit)\nremoveNonInheritedFormats = removeFormats((format) -> !format.config.inherit)\n```\n. @jhchen Sorry I should have checked the readme :) ... failing tests for the case I have encountered are here https://github.com/quilljs/quill/pull/465 ... I have also included the same tests in this PR to show them passing. \n. Hi @willrowe, I was in need of this today, so thank you. \nHave tried it out but I have an issue when calling the get methods when the selection spans across formatted and unformatted text, which leaves formats undefined. Just need a formats = {} here? Similar to the Toolbar module implementation. \ncoffee\nreturn _.reduce(formatGroups.slice(1), (inAll, formats = {}) ->\n. ",
    "wghust": "@willrowe but if I want to set the image's width is 100%\uff0c what can I do? I can't set this in attributes.\n. @willrowe but if I want to set the image's width is 100%\uff0c what can I do? I can't set this in attributes.\n. @jhchen hi, I have some problem with quill. In which function can I set the image's width which was uploaded by user.\n. @jhchen hi, I have some problem with quill. In which function can I set the image's width which was uploaded by user.\n. ",
    "devmarco": "[Question]\nAfter insert a image with the command below, the image is inserted using base64.\ninsertEmbed(range, 'image', url);\nMy question is, after that, I am uploading that image to the server behind the scenes, and when I have the success information, I would like to just update the \"src\" reference to the correct url.\nIs there any way to do that on quill? using updateContents or other method?\nI could do that deleting the image added before, and adding a new one. But I didn't like this way because the user experience is not good.\n. ",
    "shivavelingker": "@devmarco did you figure out a solution for that?. @devmarco did you figure out a solution for that?. ",
    "jpgilchrist": "I would, but tbh I'm not caught up on this coffee script stuff. haha. \n. @jhchen the document that cause the issue actually contains some sensitive info. I've redacted it the best I can while maintaining all of the formatting issues. However, I have been asked not to directly share on an open forum such as this; can I email it to you and then I must request that you don't post it on Github (or anywhere else for that matter). Rather, simply use it to figure out what formatting issue it results and and then build a fake document to duplicate the behavior. \nCheers.\n. @jhchen this should be reopened and my change \nif (nextNode == null) {\n    nextNode = dom(this.node.parentNode).nextLineNode(this.root);\n}\nshould be changed to\nif (nextNode == null) {\n    nextNode = dom(this.node.parentNode).nextLineNode(root);\n}\nroot is what I wanted and this.root is undefined, which causes other errors. Not sure if your tests caught that or not, but wanted to make sure you were aware. \n. ",
    "jnewcs": "When the user clicks the tab key, the editor doesn't indent automatically. Thanks!\n. ",
    "Nyalab": "\nThe logic for calculating the former is currently in the toolbar but could be centralized so other modules do not have to reimplement it.\n\n:+1: for this, i am using this editor via its api, and i had to reimplement this piece of logic \n. @willrowe something like this: https://gist.github.com/Nyalab/b98ac804725b17564402, it is made with React with JSX in ES6\nit is not made for getting active formats for a non-current range, but it is easy to adapt it :)\n. ",
    "RyanV": "@jhchen is this something that can be revisited?  \nMy use case here is updating the \"active\" state of buttons in a React toolbar when a user clicks a toolbar button, presses a hot key combo, or any other way quill#format may be called.\nThe problem I am having is calls to #format with a collapsed selection does not fire any events.\nHaving a 'format-change' event would fill that hole.\nThe point above on decoupling modules is an important one that still seems like an issue. If for example i had 3 different modules that reacted differently to a change in formatting, I shouldn't have to   tell each of those modules to update anytime i call #format on a collapsed selection right?\nlet me know if i am missing something or if filling in that missing event should be part of a new issue.. does that mean that a PR will likely not be approved? Or that there hasn't been any drive to make the change?. @apowers313 be sure you include quill.core.css.  This includes a css style on .ql-editor white-space: pre-wrap; which keeps the whitespace like you are looking for.  \nYou can see this working here: https://codepen.io/ryan-venegas/pen/yqGvwz. @joeattardi \njs\nimport { import } from 'quill';\nThe above isn't valid ES6 import syntax regardless of the function name.  Quill is the the default export and according to the spec, you can't actually destructure a default export in your import statement.  You can only import named exports through destructuring.\nSomething that's more important to keep in mind: when you assign a variable to a function that is part of an object, you will lose the object context (this).  In this case, the function won't work properly because it tries to access this.imports, and this will return undefined.\nSo you should be importing as import Quill from \"quill\" and calling Quill.import(...).\n. This appears to be fixed in 2.0.0-dev.2 build on:\nFirefox 61.0.1 \nChrome 68.0.3440.106. I can't reproduce this with the scrollingContainer set to html.  It seems to function as expected.  \ntested with your codepen + Chrome Version 68.0.3440.106. @DokaRus see/watch https://github.com/quilljs/quill/pull/2242 for fix. @joshoconnor89 The following should turn off spellcheck\njs\nconst quill = new Quill('#editor-container')\nquill.root.setAttribute('spellcheck', false). @jhchen as mentioned, there is an issue with karma firing the on error callback, but only in the test.  I can explore the issue more. yup, onload worked fine.  updated branch with test.. Any ideas why Travis is failing? looks like it's can't find the Karma executable sh: 1: karma: not found. \ud83d\udc4d . Thanks for the quick response!. Yeah that makes sense.  I actually forgot to update my babel configuration after migrating to Quill.  I am publishing an internal package with quill as a dependency and on the initial development work (with another editor), I was transpiling the code to increase compatibility across projects.  But considering Quill doesn't support browsers that do not support class syntax I can remove this transform from my own babel config as well.  Closing this issue.  Thanks!. This seems overly specific to a third party implementation... Maybe allowing an option to be passed into the clipboard or upload module to allow an override to file picking could be an option, but IMO Quill shouldn't have any knowledge of cordova.. @jhchen please re-open this. The fix still doesn't solve the problem and you still have false positives being reported.\n\"<ul><li>foo</li><ol>\".length === \"<ul><li>foo</li><ul>\".length which is not correct.  Your fix only checks the string length and reports false positives for the nested list test.. Fixed bug in type stack causing failing test.  This should also fix https://github.com/quilljs/quill/issues/2195. @jhchen Can you take a look at this one please? thanks!. @jhchen actually, this still doesn't solve the problem.  you still have false positives being reported.\n\"<ul><li>foo</li><ol>\".length === \"<ul><li>foo</li><ul>\".length which is not correct.  Your fix only checks the string length and reports false positives for the nested list test.\nThe fix to the editor.js code is also a necessary code change.. Sorry, I honestly wasn't sure where the best place to put the response since it was marked \"closed\" so i threw some lines out.  In the future I'll just post in one place and only follow up if I don't get a response.\nYou can see how the change in https://github.com/quilljs/quill/commit/d54d2d00483068e6ca17d0aab3d0073bbe45f3d8 does not cover the false positive case by running test/unit/core/editor.js for nested list test.  If you revert the change in https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87 (which causes the markup to return incorrect closing tags), you should expect the test to fail, but instead it still passes.  \nI wrote this implementation by ensuring that this test failed initially, then passed when the change in https://github.com/quilljs/quill/commit/c712420aa433fa7c4e1116403f98844112f6fe87 was applied.. See my other comment...\nThis seems overly specific to a third party implementation... Maybe allowing an option to be passed into the clipboard or upload module to allow an override to file picking could be an option, but IMO Quill shouldn't have any knowledge of cordova.. @ninjvalenz please post your Quill version and browser version.  Also if you can include the test image that would be helpful.  . @ninjvalenz I can't replicate this on Chrome or Firefox.  The image properly embeds and the base64 string properly converts back to an image through the link you provided.  can you create a codepen example replicating the issue?. I'm familiar with the the subclassing pattern for quill and is actually how I\u2019m solving the problem in my own code.\nQuill promotes itself as a black-box framework with white-box extensibility.  I made an assumption that many of the consumers of this editor are using the default Quill export or just pulling Quill from a CDN.  In these cases, most people will likely never read the source code and IMO shouldn't have to.\nSub-classing is a non-trivial decision to make a small change that could be handled through a config interface.  It requires the user to have knowledge of implementation details of the parent class and possibly it\u2019s dependencies (e.g. Delta, Parchment) and is a relatively heavy weight solution. \nSome other issues with this OO approach:\n Required understanding of parent implementation and possibly it\u2019s dependencies (e.g. Delta, \nParchment)\n Singleton implementation for all editor instances\n Parent changes more likely to break child class overrides\n Maintenance overhead - version updates requires knowledge of changes\nAgreed, subclassing provides a huge amount of flexibility for those willing to get their hands dirty.\nIf this is not considered an appropriate solution, I\u2019d I\u2019d also like to get an idea of where the line is for improving the framework usability for the black-box consumers.\nTo be clear, I can solve this fine through subclassing, but considering the number of issues logged around copy paste inconsistencies, I thought it would be good addition to the configuration api.. You can see implementation specifics here: \nhttps://quilljs.com/docs/modules/toolbar/\nAnd here is a codepen with content copied over from the docs: \nhttps://codepen.io/ryan-venegas/pen/RBmmRK. ",
    "hiddenl00p": "@jocoolie  this is awesome, were you able to fix the issue with selection change getting fired on elements outside of the quill frame?\n. Removed  range &&  from the if statement to make it work. Now, I am trying to close the toolbar if user clicks outside the container.\nhttps://fiddle.jshell.net/yq0eevoq/\n```\nQuill.registerModule('air-bar', function (quill) {\n    var toolbar = quill.modules.toolbar.container;\n// get the dimensions of the toolbar. Assuming that it doesn't change\ntoolbar.style.visibility = \"hidden\";\ntoolbar.style.position = \"absolute\";\nvar toolbar_width = toolbar.offsetWidth, // get the width and height so we can keep it from squashing at the edge of the page\n    toolbar_height = toolbar.offsetHeight;\n\ntoolbar.style.display = \"none\"; // hide it if it's not hidden already.\ntoolbar.style.visibility = \"visible\";\ntoolbar.style.opacity = \"0\";\ntoolbar.style.position = \"fixed\";\ntoolbar.style.transition = \"opacity 300ms, left 300ms, top 300ms\";\n\nquill.on('selection-change', function (range) {\n    if (range.start == range.end) { // no selection, fade out.\n        toolbar.style.opacity = 0;\n        setTimeout(function () {\n            toolbar.style.display = \"none\"\n        }, 300);\n    } else {\n        var selection_dimensions = window.getSelection().getRangeAt(0).getBoundingClientRect(); // see http://stackoverflow.com/a/17887684/2661831 . Probably alchemy and/or black magic.\n\n        // if we're going to bump into the side of the window, go to the edge less 10px.\n        if (toolbar_height + selection_dimensions.bottom > window.innerHeight) { \n            toolbar.style.top = window.innerHeight - (toolbar_height + 10) + \"px\";\n        } else {\n            toolbar.style.top = selection_dimensions.bottom + \"px\";\n        }\n\n        if (toolbar_width + selection_dimensions.right > window.innerWidth) {\n            toolbar.style.left = window.innerWidth - (toolbar_width + 10) + \"px\";\n        } else {\n            toolbar.style.left = selection_dimensions.right + 10 + \"px\";\n        }\n\n        toolbar.style.display = \"block\";\n        toolbar.style.opacity = 1;\n    }\n});\n\n});\n```\n. Thanks, found the issue in how I am initializing Quill on multiple pages.\n. ",
    "jcludwig": "This also appears to happen if you type some text and then backspace until the beginning of the line. The formatting is reset.\n. Beautiful, thanks!\n. 11.0.10240.16431\n. What I noticed is that for one of the lines the internal format seemed to be 'Wingdings 2' and for another line it was Wingdings 2. I thought this might have something to do with having to use quotes around the font name.\n. ",
    "peterweck": "I'm having issue with the formatting changes after a single Enter (new line). Steps to reproduce:\n1) Set font to Monospace, font-size to large\n2) Type some text and hit Enter\n3) New line is back to Normal size\nAlso if you start a line with one Font and change it another font to on the same line, the new font changes after you hit Enter.\nThe is greatly impacting the usability of the editor.\n. I'm having issue with the formatting changes after a single Enter (new line). Steps to reproduce:\n1) Set font to Monospace, font-size to large\n2) Type some text and hit Enter\n3) New line is back to Normal size\nAlso if you start a line with one Font and change it another font to on the same line, the new font changes after you hit Enter.\nThe is greatly impacting the usability of the editor.\n. If you have a large list of web fonts, most of them will not be downloaded when selecting the font. Showing the image provides an easy way to display a lot of web fonts that will be dynamically loaded if they are selected. The background image is possible, but not very clean to implement if you want a dynamic list of font. \n. If you have a large list of web fonts, most of them will not be downloaded when selecting the font. Showing the image provides an easy way to display a lot of web fonts that will be dynamically loaded if they are selected. The background image is possible, but not very clean to implement if you want a dynamic list of font. \n. Since the items in the picker only have unique values, not any unique attributes you'd need to something like: \n.ql-font .ql-picker-item:nth-of-type(X) { .. }\nin a CSS file or have Javascript generate it. Then you have the bigger problem of how do you specify the background image for the ql-picker-label, which just get the text value of the selected item. You can add a bunch of Javascript to fix it, but it's not very clean.\nBy adding support for specifying the image in the select options, you eliminate the above.\n. @benbro, I now get the same behavior in 1.0.0 and I can reproduce it in the codepen link you sent. Between the 1.1.3 release and the 1.0.0 release, I installed the windows update which also updated Edge. Maybe that caused it to break.\n. @benbro, I now get the same behavior in 1.0.0 and I can reproduce it in the codepen link you sent. Between the 1.1.3 release and the 1.0.0 release, I installed the windows update which also updated Edge. Maybe that caused it to break.\n. Just tested with a build from the develop branch and is now working. Thanks for the fix! . Just tested with a build from the develop branch and is now working. Thanks for the fix! . ",
    "aliarshad9691": "Yes this issue still persists... can we reopen it?\n. ",
    "langlong149": "when use quill.getSelection,need two condition: \n1. editor must focus;\n2.quill must be the new instance: quill = new Quill('#editor');\nno need to focus when click toolbar;. ",
    "PaulBGD": "But the bundled version is still default?\n. ",
    "kkirsche": "Considering bower core dev is basically dead and the recommendation is to use NPM instead of Bower, users shouldn't be encouraged to continue using a mostly dead product where core development has slowed and is essentially dead\n. @jhchen the easiest link is just to the discussion to move Bower entirely under NPM bower/bower#1520\n. Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n. ",
    "sahanDissanayake": "Same can be see here on the website > http://quilljs.com/ if you open the developer tools > Resources > Cookies\n. :+1:  Thanks Chen\n. the cookie is still there even if I use the following sources to load form\n```\n\n\n\n```\nAlso could you please add minified versions of the CSS files please ?\n. I just tested and the cookie is not coming from the cloudfare CDN.\nSOLUTION,\nIm loading all the files from the Cloudfare CDN\n. I think I'm facing the same issue,\nWhen I try to inside some text inside a bold, italic text the text inserted should inherit the styles from the parent right ?\n. ",
    "jcppman": "Mac OSX 10.10, Chrome 43\nPlease see the attached screenshot:\n\n. Mac OSX 10.10, Chrome 43\nPlease see the attached screenshot:\n\n. ",
    "aaronshaf": "This is sad. Related: https://github.com/quilljs/quill/issues/390\n. ",
    "tmaximini": "yes, annoying error message in webpack.\nI think it is more because quill is already minified, maybe it's possible to compile coffee to js and publish unminified?\n. yes, annoying error message in webpack.\nI think it is more because quill is already minified, maybe it's possible to compile coffee to js and publish unminified?\n. Yes, the lodash part it ships with is unminified. The Quill part isn't.\n\n. Yes, the lodash part it ships with is unminified. The Quill part isn't.\n\n. Ah ok... now you say it, it's a bit short for being the whole quill code ;)\nAnyways, that's the reason for the webpack error. I'll see if I can silence it somehow. Thanks\n. Ah ok... now you say it, it's a bit short for being the whole quill code ;)\nAnyways, that's the reason for the webpack error. I'll see if I can silence it somehow. Thanks\n. ",
    "benjasHu": "Can someone share some configuration to use it with Webpack? I mean to use it with index.coffee source file.\nI made many attempts without luck... :(\nThanks!\n. Can someone share some configuration to use it with Webpack? I mean to use it with index.coffee source file.\nI made many attempts without luck... :(\nThanks!\n. ",
    "michaek": "@jhchen I don't think it's as simple as using src/index.coffee as the entry point. When using npm to make quill available to webpack as a dependency, only the compiled files are available - none of the sources. Installing quill via git could be a workaround to avoid the npm packaging that's hiding the sources, but that starts to feel like it's working against the tool. Thanks for a great editor!\n. ",
    "ccorcos": "This is interesting in the more general case. Who knows what kind of webpack configuration they may be using to compile their source code? Maybe it wont compile with my webpack settings...\n. I see. But it seems risky since people may have different webpack configurations. I'm not interested in Quill specifically, but generally anything. I'm getting this error from jasmine-promises. But what if they have some specific paths to resolve? I'd imagine that being a huge pain.\n. ",
    "kurijov": "I see the same flash. Probably I need to update my quill version, thank you.\n. ",
    "nadimtuhin": "I tried it first in bower.json it did not work so I also put the main files in .bower.json and it worked. I am not sure why it worked.\nWe at themexpert.com is using your awesome editor but got stuck while automating the gulp tasks. So it would be great if you include the main files in the bower file.\nThanks..\n. I tried it first in bower.json it did not work so I also put the main files in .bower.json and it worked. I am not sure why it worked.\nWe at themexpert.com is using your awesome editor but got stuck while automating the gulp tasks. So it would be great if you include the main files in the bower file.\nThanks..\n. ",
    "yyjhao": "Hi I have updated the diff, can you take a look again?\n. Hi I have updated the diff, can you take a look again?\n. It seems that the tests are flake - I have done a force push to trigger another round of tests and they fail for different tests.\n. It seems that the tests are flake - I have done a force push to trigger another round of tests and they fail for different tests.\n. ",
    "markstewie": "Just discovered that! Should have read in more detail... thanks very much.\n. ",
    "FarSeeing": "Not really, but it seems a little weird to have container styled when it's not an editor anymore. \n. Not really, but it seems a little weird to have container styled when it's not an editor anymore. \n. ",
    "hdavidzhu": "Since I cannot upgrade Quill in my current project, I am going to be using this patch. Here is something that could trigger this:\nhtml\n<div>\n  <div>\n    <ol>\n      <li>a</li>\n      <ol>\n        <li>b</li>\n      </ol>\n    </ol>\n  </div>\n</div>\nAnd this would work as well:\nhtml\n<div>\n  <div>\n    <ol>\n      <li>a</li>\n      <ol>. ",
    "joaovpmamede": "Having the same problem.\nAlso when changing font size the bullet does not change its size (would this be possible?).\nIs this something that we can expect to be introduced on this quill version or only in parchment?\n. ",
    "aikar": "This should behave like every other word processor, the way Word implements it is that:\nIf every bit of text is selected for that list item, then styles apply surrounding the LI itself.\nIf only part of the text is selected, only the selected text (and not the bullet) is changed.\nBut when all of it is, the style choices (size, color, etc), should also apply to the LI, but not the list itself.\nYou may want to have some bullets blue and some red, so it has to wrap/apply to the LI.\n. ",
    "jakub-pietras-codete": "I had to implement this, so here you go - some basic working implementation:\nIMPORTANT: This assumes you use built in color format (you can always modify the code to work with any other) and that you want bullet points to be colored the same color as text only if whole list entry content is the same color!\nALSO IMPORTANT: you have to add bullet points unicode character using li::before and \"content\" attribute in CSS.\n\n\nRegister your custom font color attributor same as built-in but BLOCK sized, because ListItem blot will block INLINE styles and you will search for hours what is going on:\n```javascript\nclass CustomColor extends Parchment.Attributor.Style {\n  value(node) {\n    let value = super.value(node);\nif (!value.startsWith('rgb(')) return value;\nvalue = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\nreturn '#' + value.split(',').map(function(component) {\n  return ('00' + parseInt(component, 10).toString(16)).slice(-2);\n}).join('');\n  }\n}\n\n\nconst customColorAttributor = new CustomColor('custom-color', 'color', {\n    scope: Parchment.Scope.BLOCK,\n});\nQuill.register(customColorAttributor);\n```\n\n\nExtend \"ListItem\" blot (its the built-in blot for li elements) and overload optimize on it with following code:\n```javascript\noptimize(context) {\n    super.optimize(context);\nif (this.children.length === 1) {\n  const child = this.children.head;\n  const attributes = child.attributes;\nif (attributes && attributes.attributes.color) {\n    const color = attributes.attributes.color.value(child.domNode);\n    super.format('custom-color', color);\n  }\n} else {\n  if (this.attributes.attributes.hasOwnProperty('custom-color')) {\n    super.format('custom-color', null);\n  }\n}\n}\n```\n\n\nI don't know to what degree this is valid with Quill/Parchment philosophy but documentation is pretty scarce so this is the way I solved it for my case.. I had to implement this, so here you go - some basic working implementation:\nIMPORTANT: This assumes you use built in color format (you can always modify the code to work with any other) and that you want bullet points to be colored the same color as text only if whole list entry content is the same color!\nALSO IMPORTANT: you have to add bullet points unicode character using li::before and \"content\" attribute in CSS.\n\n\nRegister your custom font color attributor same as built-in but BLOCK sized, because ListItem blot will block INLINE styles and you will search for hours what is going on:\n```javascript\nclass CustomColor extends Parchment.Attributor.Style {\n  value(node) {\n    let value = super.value(node);\nif (!value.startsWith('rgb(')) return value;\nvalue = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\nreturn '#' + value.split(',').map(function(component) {\n  return ('00' + parseInt(component, 10).toString(16)).slice(-2);\n}).join('');\n  }\n}\n\n\nconst customColorAttributor = new CustomColor('custom-color', 'color', {\n    scope: Parchment.Scope.BLOCK,\n});\nQuill.register(customColorAttributor);\n```\n\n\nExtend \"ListItem\" blot (its the built-in blot for li elements) and overload optimize on it with following code:\n```javascript\noptimize(context) {\n    super.optimize(context);\nif (this.children.length === 1) {\n  const child = this.children.head;\n  const attributes = child.attributes;\nif (attributes && attributes.attributes.color) {\n    const color = attributes.attributes.color.value(child.domNode);\n    super.format('custom-color', color);\n  }\n} else {\n  if (this.attributes.attributes.hasOwnProperty('custom-color')) {\n    super.format('custom-color', null);\n  }\n}\n}\n```\n\n\nI don't know to what degree this is valid with Quill/Parchment philosophy but documentation is pretty scarce so this is the way I solved it for my case.. Extending ListItemBlot:\nconst ListItemBlot = Quill.import('formats/list/item');\nthen\nclass CustomListItem extends ListItemBlot {}\nFor your case, I don't exactly understand what you want to achieve. If you have nested lists then in one of the li's you need to have another ul/ol tag and then more children deeper. You can just manually use direct descendant .something > li selector to access the first level. So if the output is in container with .x class then just do .x > li. If that is not enough, which sounds like might be in your case - extend the ListItem as above and overload built-in methods to add the class name in certain situations. I think that could go into the optimize metod, I don't really remember, last worked with this a year ago.. Extending ListItemBlot:\nconst ListItemBlot = Quill.import('formats/list/item');\nthen\nclass CustomListItem extends ListItemBlot {}\nFor your case, I don't exactly understand what you want to achieve. If you have nested lists then in one of the li's you need to have another ul/ol tag and then more children deeper. You can just manually use direct descendant .something > li selector to access the first level. So if the output is in container with .x class then just do .x > li. If that is not enough, which sounds like might be in your case - extend the ListItem as above and overload built-in methods to add the class name in certain situations. I think that could go into the optimize metod, I don't really remember, last worked with this a year ago.. ",
    "natterstefan": "Hi @jakub-pietras-codete,\nI need to say \"sorry\" upfront because my question is not exactly related to this issue, but you might be able to help me out with this and turn a blind eye to this comment.\nHow can I extend a ListItem blot and add a custom class to each li element? \nContext: I need a proper css selector for li elements on the first level, by ignoring other li elements with eg. a ql-indent-<n> class. Thanks.. Hi @jakub-pietras-codete, thanks for your help. I'll dig into this and try it. The reason why I ask is because of quill's approach of how to format list and nested lists: Every list item is in the same ol, only nested list items have a special class attached: ql-indent-1.\nThat's when I ran into troubles selecting only the first level (without any ql-indent-x class.. @sferoze Hello, do you have any news for us?. @DmitrySkripkin I am gonna test it. Looks really promising. If it works, you have to send me your https://www.paypal.me/ or another link, please. Because I owe you a beer then \ud83c\udf7a. Damn, you made my day! I was wondering how I can resolve this.. Hi @jhchen, thanks for the clarification. I understand the intent, but I still have some questions. Most likely some of the use cases below can be handled with custom keybindings, but it was not clear to me - without @DmitrySkripkin mentioning it - that I need to take care of these cases myself.\n\npeople did want to continue a list \n\nWhy does the list then not start with \"30.\" but again with \"1.\"?\nThis is what you wanted to achieve, right?\n\nBut why can't the list not start with 30 as well? For instance, I want to count down from 30. to 1.\n\nOr what if I want to write something between two items of the list:\n\nAnd just for the record: Our customers in Switzerland thought this UX feature is a bug and created a story in the project to fix it.\nThis is one of their use cases:\n\nPS: how can I deactivate the entire \"list autofill\" binding? Do I have to create a prefix rule which the user \"never\" enters or how can I disable it?. Hi @DmitrySkripkin, thank you. Looks like the example was misleading. My fault, sorry. Actually, I would expect to start with \"11.\" in the 3rd gif above. But the current implementation of the \"list autofill\" always starts at 1. No matter what I enter. See the 2nd example for instance, assuming I want to auto-formatting feature enabled and start a list with 30.. Hi @dmcquayps, I was also asking myself how I can get a tooltip in other themes (eg. snow). Let's see who can help us out. :). ",
    "magus": "Go to quilljs.com\nScroll down to bottom of text editor\nType in some content, select it, then click the bold formatting button or select a new font from the dropdown\nThe view will jump back to the top (due to the focus call?)\n. Sort of related to the other bug, I think it's more clear if the editing class is removed when we are no longer showing the tooltip. I use the presence of the editing class to show/hide the tooltip since I'm overriding the absolute positioning (static location instead of tooltip). Feel free to close this, I think I'm almost done just working around things.\n. Sort of related to the other bug, I think it's more clear if the editing class is removed when we are no longer showing the tooltip. I use the presence of the editing class to show/hide the tooltip since I'm overriding the absolute positioning (static location instead of tooltip). Feel free to close this, I think I'm almost done just working around things.\n. ",
    "muhleder": "We're seeing this as well, using something like this to fix it.\nhttps://github.com/muhleder/quill/commit/ca9cd7b6b1005969a26239a8f60762a476562edb\n. Might be related to this one.\nhttps://github.com/quilljs/quill/issues/415\nWe're seeing some weird jumping issues in some cases as well. Inconsistent behaviour as well, sometimes it happens, sometimes it doesn't.\n. @acrylic-origami Sure, so from reading other related issues the jumping is caused by the focus called in initFormat()\nhttps://github.com/muhleder/quill/blob/ca9cd7b6b1005969a26239a8f60762a476562edb/src/modules/toolbar.coffee#L43\nso I removed that but then @quill.getSelection() was not able to get the selected text from the editor.\nLooking at @quill.getSelection() \nhttps://github.com/muhleder/quill/blob/ca9cd7b6b1005969a26239a8f60762a476562edb/src/quill.coffee#L161\nit's really just a proxy for @quill. getRange()\nhttps://github.com/muhleder/quill/blob/ca9cd7b6b1005969a26239a8f60762a476562edb/src/core/selection.coffee#L18\nwhich has an ignoreFocus option. So I added the ability to set that option in @quill.getSelection(), and called it from initFormat(), and the initFormat() then picked up the range properly.\nThis behaviour in this issue doesn't come from initFormat() I believe, so there may be another call to @quill.focus() in whichever function handles the dropdown here?\n. ",
    "Pavek": "I can still reproduce it with Quill 0.20.1 on Win7/IE11.\nThe simplest testcase:\nGo to http://quilljs.com/ in IE11\nScroll editor area down to bottom\nClick any button: Bold/Italic etc..\n=> The editor area is immediately scrolled to the top (this is bad because you might have edited something at the bottom, obviously)\nLooks like this is caused by: https://github.com/quilljs/quill/blame/0.20.1/src/modules/toolbar.coffee#L59\n. Do you have any update on this? I experience the same issue, but I believe that, despite being indeed related to CSS white-space property, this may be a bug in Quill.\n- The issue is only reproduced when editor has white-space:normal and not reproduced with default white-space:pre-wrap. It is also reproduced only with Firefox (mine is v44).\n- (My reason for having white-space:normal is very similar to the author's one: I implement a rich editor for email-like app and it means that sometimes editor does not start blank: it is fed with HTML generated by other email clients (think MS Outlook), which is complete junk -- lot's of custom attributes, extra spaces around etc. Now, I opted to not clean-up that junk because white-space:normal fixed all kinda magically. Except that one issue with Firefox..)\n- I think this may be Quill's bug because of: \n1. I can insert spaces when NOT at the EOL : demo\n2. I generally cannot insert when at the EOL: demo\n3. It is possible to insert spaces at the EOL by pressing space/non-space chars very quickly or simultaneously: demo\nNotice also that a child element is being added in cases 2/3 when you type, but is removed quickly (not sure what's it, but may be related).\n. Here's the crazy workaround: https://jsbin.com/fidivelale/1/edit?html,js,output\nNotes:\n- We use react-quill and this jsbin contains stripped-down version of our implementation\n- Notice the &nbsp; on the line 3 -- this is the key. Without it one cannot type Chinese characters on IE11.\n. ",
    "xarg": "Tried to find a way to reuse the Picker in a custom module. I don't think there is a way to do it now. Also it seems that the existing pickers are connected to the current theme. Wish there was a way to reuse Picker from Quill to add other pickers. \nThe idea here is to have the same look and feel as the Quill picker.\n. Tried to find a way to reuse the Picker in a custom module. I don't think there is a way to do it now. Also it seems that the existing pickers are connected to the current theme. Wish there was a way to reuse Picker from Quill to add other pickers. \nThe idea here is to have the same look and feel as the Quill picker.\n. ",
    "Nick-The-Uncharted": "I solved it by add contenteditable=\"true\" to editor container.\n. @jhchen ql-editor, the example of this project has the same problem.\nIt can't scroll in ionic BTW, I think it's ionic's problem though.\n. ",
    "lalitkapoor": "@jhchen is this possible now? Thanks!\n. @jhchen is this possible now? Thanks!\n. Awesome thanks @benbro\n. Awesome thanks @benbro\n. ",
    "visore": "Thanks, that's sort of what I was looking for. Is there any way to translate the cursor selection to pixel offset? Hence, if the cursor is at position 50, how many pixels from the top (and left) of the editor content is it.\nOr otherwise, determine in which div the cursor is (the divs that are added for a newline). Once you know in which newline-div the cursor is, one can simply multiply it by the height of the div (and subtract some padding).\n. I've noticed that the issue happens more often if you are not on a new line, but appending to a current one. \nHere is what I did: Open Android Chrome -> go to Quill's website -> Click next to the last letter \"r\" in the heading inside the editor (Quill Rich Text Editor) -> Select bold, italics and underline -> type something.\nIn my case, bold and italics get automatically unselected. Underline stays active, but the underline is never actually applied to the text that you type. Hence, the format stays exactly the same as before. Other formats (eg: color, font, etc) have the same issue.\n. I've noticed that the issue happens more often if you are not on a new line, but appending to a current one. \nHere is what I did: Open Android Chrome -> go to Quill's website -> Click next to the last letter \"r\" in the heading inside the editor (Quill Rich Text Editor) -> Select bold, italics and underline -> type something.\nIn my case, bold and italics get automatically unselected. Underline stays active, but the underline is never actually applied to the text that you type. Hence, the format stays exactly the same as before. Other formats (eg: color, font, etc) have the same issue.\n. Yip, has mainly to do with autocomplete. When switched off, the problems disappear. \n. Yip, has mainly to do with autocomplete. When switched off, the problems disappear. \n. ",
    "rockerest": "I'm in Firefox 39.0.3 + Xubuntu 15.04.\nUpdate:\nTried it in Windows 10 + Firefox 39.0.3 on the examples page and didn't receive the error.\nHowever, when .focus() returned, the caret was not placed in the editor.\n. Thanks for reporting this for me!\nAfter posting the question on StackOverflow, I considered that perhaps it was using a theme that was causing the toolbar to show up. Using \"theme\": null is a viable workaround temporarily (just missing a few little visual things like the border).\nAlso, using \"theme\": false results in quill Cannot import themes/false. Are you sure it was registered? being thrown. Is this another bug?\n. Thanks for reporting this for me!\nAfter posting the question on StackOverflow, I considered that perhaps it was using a theme that was causing the toolbar to show up. Using \"theme\": null is a viable workaround temporarily (just missing a few little visual things like the border).\nAlso, using \"theme\": false results in quill Cannot import themes/false. Are you sure it was registered? being thrown. Is this another bug?\n. Submitted a PR for the \"theme\": false issue: #957 \n. Submitted a PR for the \"theme\": false issue: #957 \n. ",
    "stephanvierkant": "For the record: https://github.com/quilljs/quill/pull/223. For the record: https://github.com/quilljs/quill/pull/223. I think the 'bug' label should be added to this issue.\nThis is a matter of 'semantically correctness', but also of WYSIWYG.. I think the 'bug' label should be added to this issue.\nThis is a matter of 'semantically correctness', but also of WYSIWYG.. Ping @jhchen. Please mark this issue as a bug.. Ping @jhchen. Please mark this issue as a bug.. ",
    "jasonmng": "I can't reproduce it on the quilljs.com homepage.  I tried dropping in the latest version of quill and I am still seeing the issue.  I did notice that the format bar will reset itself but only after I click inside the textarea again.  Any idea on how I might debug this?\n. My bad, was referencing an old readme file\n. ",
    "jfftck-work": "I found that it does it in the other rich text editors online.\nThe funny part is that the first link is the only one that is active, all the other links you can click on and edit.\nI will follow-up with Mozilla to see if this is a known issue.\nThanks for the quick reply.\nJeff Tackett / GIS Specialist\njeff.tackett@ijus.netmailto:jeff.tackett@ijus.net  / Cell: 740-418-0593\nOffice: 614-335-6223 x 150 / Fax: 614-472-0846\n690 Taylor Rd. Suite 100 Gahanna, OH 43230\n[cid:part2.02050509.04050807@ijus.net] http://www.ijus.net/\nhttp://www.ijus.nethttp://www.ijus.net/   [cid:part5.00090601.04050205@ijus.net]  [cid:part6.05020500.06020903@ijus.net]  https://www.linkedin.com/company/ijus\nThe information contained in this message is intended only for the personal and confidential use of the recipient(s) named above. If the reader of this\nmessage is not the intended recipient or an agent responsible for delivering it to the intended recipient, you are hereby notified that you have received\nthis document in error and that any review, dissemination, distribution, or copying of this message is strictly prohibited. If you have received this\ncommunication in error, please notify us immediately, and delete the original message.\nOn 08/13/2015 02:46 PM, Jason Chen wrote:\nWhat distro + version of Linux? Ubuntu + FF 40 is working for me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/quilljs/quill/issues/452#issuecomment-130798516.\n. I found that it does it in the other rich text editors online.\nThe funny part is that the first link is the only one that is active, all the other links you can click on and edit.\nI will follow-up with Mozilla to see if this is a known issue.\nThanks for the quick reply.\nJeff Tackett / GIS Specialist\njeff.tackett@ijus.netmailto:jeff.tackett@ijus.net  / Cell: 740-418-0593\nOffice: 614-335-6223 x 150 / Fax: 614-472-0846\n690 Taylor Rd. Suite 100 Gahanna, OH 43230\n[cid:part2.02050509.04050807@ijus.net] http://www.ijus.net/\nhttp://www.ijus.nethttp://www.ijus.net/   [cid:part5.00090601.04050205@ijus.net]  [cid:part6.05020500.06020903@ijus.net]  https://www.linkedin.com/company/ijus\nThe information contained in this message is intended only for the personal and confidential use of the recipient(s) named above. If the reader of this\nmessage is not the intended recipient or an agent responsible for delivering it to the intended recipient, you are hereby notified that you have received\nthis document in error and that any review, dissemination, distribution, or copying of this message is strictly prohibited. If you have received this\ncommunication in error, please notify us immediately, and delete the original message.\nOn 08/13/2015 02:46 PM, Jason Chen wrote:\nWhat distro + version of Linux? Ubuntu + FF 40 is working for me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/quilljs/quill/issues/452#issuecomment-130798516.\n. ",
    "kriswillis": "This is happening for me, too. Google Chrome 48.0.2564.109 (64-bit) under Linux. Although, for me it's the opposite, I can seem to edit the first link, but all others cause the browser to follow them.\n. ",
    "acrylic-origami": "\n@jhchen Hopefully the image will help clarify what I mean. Selecting an option on top of the editor space will sometimes cause the editor will focus and the caret will jump under the mouse cursor as if the menu weren't there. I specify \"overlapping the editor space\" in case the behaviour is different if, say, there is a large margin between the toolbar and the editor.\n@muhleder Yup, sounds exactly like what I'm experiencing. I suspect that focusing \"through\" the select menu is another symptom of the problem. I tried to give your fork a spin, but the issues were only exacerbated? I can't apply any styles at all without caret-jumping and editor-unfocusing. I'll have scrutinize a bit more, but would you mind explaining how your change works?\n. \n@jhchen Hopefully the image will help clarify what I mean. Selecting an option on top of the editor space will sometimes cause the editor will focus and the caret will jump under the mouse cursor as if the menu weren't there. I specify \"overlapping the editor space\" in case the behaviour is different if, say, there is a large margin between the toolbar and the editor.\n@muhleder Yup, sounds exactly like what I'm experiencing. I suspect that focusing \"through\" the select menu is another symptom of the problem. I tried to give your fork a spin, but the issues were only exacerbated? I can't apply any styles at all without caret-jumping and editor-unfocusing. I'll have scrutinize a bit more, but would you mind explaining how your change works?\n. @muhleder I spent a few hours tinkering around and still can't rectify the bugs I'm getting with your fork. If text is highlighted, the format is applied normally. However, with a collapsed selection and without this call to @quill.focus(), the format isn't applied. \nIn the process though, I may have found the underlying cause of both our issues, and strangely it appears to be race condition-related? Editor.checkUpdate() is called periodically based on this setInterval which subsequently makes a call to @selection.update(). Comparing @selection.range before and after this call, I can confirm that selecting an option from a toolbar select before @selection.update() somehow interrupts execution and makes a separate call to update(), moving the caret (and leading to a discrepancy in the before- and after- Range objects). I feel that this SO answer may be relevant.\nRemoving the setInterval call actually reproduces your issue every time a toolbar item is selected. I have no idea why this is, and I don't know if there is an elegant way to clean up the event handling that is causing these problems. I suspect not...\n. @muhleder I spent a few hours tinkering around and still can't rectify the bugs I'm getting with your fork. If text is highlighted, the format is applied normally. However, with a collapsed selection and without this call to @quill.focus(), the format isn't applied. \nIn the process though, I may have found the underlying cause of both our issues, and strangely it appears to be race condition-related? Editor.checkUpdate() is called periodically based on this setInterval which subsequently makes a call to @selection.update(). Comparing @selection.range before and after this call, I can confirm that selecting an option from a toolbar select before @selection.update() somehow interrupts execution and makes a separate call to update(), moving the caret (and leading to a discrepancy in the before- and after- Range objects). I feel that this SO answer may be relevant.\nRemoving the setInterval call actually reproduces your issue every time a toolbar item is selected. I have no idea why this is, and I don't know if there is an elegant way to clean up the event handling that is causing these problems. I suspect not...\n. Related: #415 #456 \nFrom what I can tell, the problem is caused by the event that changes the formatting interrupting the execution of a periodic function that would otherwise compensate for the cursor reposition from the editor defocus.\n. Related: #415 #456 \nFrom what I can tell, the problem is caused by the event that changes the formatting interrupting the execution of a periodic function that would otherwise compensate for the cursor reposition from the editor defocus.\n. ",
    "LFDM": "Using Quill 0.20.1 (the npm release) also leads to this. (currently tested on FF 43.0.2)\nSeems the backspacing override is not in effect in FF, need to investigate further. I can say though that if I add some logging I get text-change events on all browsers except firefox for delete operations (typicalls 1 retain operation and one delete operation, but FF is completely silent)\n. Sorry, have to take that back - was actually totally my fault. Was too eager after I found this issue.\n. The key to this is exposing Node as global variable as well.\n@bilbosan was using testdom which is a wrapper around jsdom - it automatically sets document as global variable, which solved his first error.\nHere is a full example using a more recent version of jsdom\n```javascript\nimport { JSDOM } from 'jsdom';\nconst dom = new JSDOM('');\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.Node = dom.window.Node;\n// ...\n```\nrun this code before any other and it will work fine.\nI guess one thing Quill could potentially do to play a little nicer is not to depend on a global Node. Most people who run a test setup like the one above will not expose Node - but they are very very likely to expose window - so if Quill is accessing Node from window.Node I for example wouldn't have run into this problem.\n. I can second this issue\nI am currently using Quill through React Quill, which using pasting on its initial render to set the editor's contents (    https://github.com/zenoamaro/react-quill/blob/master/src/mixin.js#L68)\nQuill is producing whitespace within HTML when you tab. Given the following example (* indicates the cursor position)\n<p>*This is text</p>\nhitting tab several times will produce something like this\n<p>              *This is text</p>\nWhenever we store this strong and try to re-instantiate in a React Quill instance, this text is pasted into Quill through the code line linked above.\nmatchText will eventually collapse this whitespace and ruin our string (https://github.com/quilljs/quill/blob/develop/modules/clipboard.js#L342)\nI totally agree with @jhchen's explanation in #996 - it makes sense to have this collapsible behavior when pasting HTML, however in this case I just don't want to do that. I also own the string which I am pasting in and can guarantee that all the whitespace it has, should be preserved.\nOne possible solution I could see is to provide a flag for dangerouslyPasteHTML, which allows to preserve white-space - I am willing to provide a fix for this, if you as maintainers could live with this solution.\nWhat do you think?. This is definitely possible, albeit a bit of work. I can tell you what we did at my company for something similar to this on highlevel:\n\nCreate a new blot which represents a nice tag like Contact First name in your first screenshot.\nSomething like this:\n\n```javascript\nconst ATTRS = {\n    SERIALIZATION: 'data-serialization',\n    VALUE: 'data-value',\n};\nclass TemplateBlot extends Parchment.Embed {\n    static create(value) {\n        const node = super.create(value);\n        node.setAttribute(ATTRS.SERIALIZATION, value.serialization);\n        node.setAttribute(ATTRS.VALUE, value.value);\n        node.setAttribute('contenteditable', false);\n        node.textContent = value.value;\n        return node;\n    }\nstatic value(node) {\n    return {\n        value: node.getAttribute(ATTRS.VALUE),\n        serialization: node.getAttribute(ATTRS.SERIALIZATION),\n    };\n}\n\n}\nTemplateBlot.blotName = 'template';\nTemplateBlot.tagName = 'template-blot';\n```\n\nYou see there is something like a display value and then a serialized version of it - a data attribute you later use to parse your HTML string and replace it with whatever content you want (like the real first name of a contact\nYou then need to provide some capabilities for people to insert such a blot. We provide this through a toolbar button, which triggerrs then an autocompletion menu within quill and a keyboard shortcut which also triggers the autocompletion menu.\nPeople choose then the template string they want and you insert it into quill as the blot you defined earlier.. Are these tests flaky somehow? I don't think these changes should have any effect on Safari failing to run.... Ah yes, sorry - forgot to force push after making these style changes last time. Done now!. \n",
    "hgkim999": "I had a same issue. This was happening because the editor loses the focus when LinkTooltip Listener shows the tooltip DOM.\nChanging\nif (anchor != null) {\n        this.setMode(anchor.href, false);\n        this.show(anchor);\n}\nto\nif (anchor != null) {\n        this.setMode(anchor.href, false);\n        this.show(anchor);\n        this.quill.focus();\n}\nat line 20~23 in modules/link-tooltip.js\nsolved the problem in IE10.\nHowever, I'm not sure how this change will affect anything.\n. ",
    "ollien": "Next couple weeks? Sweet! Thank you!\n. @souporserious Do you have an alternative that you've selected? Quill seems to be the most lightweight compatible option, but if you have an alternative that matches the functionality, I'd love to give it a shot.\n. ",
    "souporserious": "Read that earlier today, any time frame on the release? I know you've been hesitant about giving any dates, maybe a ballpark? I unfortunately had to remove Quill because of this. Thought I could get by until it cam out, but I wasn't able to.\n. @ollien using this for now https://github.com/wysiwygjs/wysiwyg.js still want to use Quill once I'm able to use addFormat.\n. ",
    "hryanjones": "Oh, I hadn't realized that was invalid HTML and it's unfortunate that Outlook is generating that. I'll see if I can just work around it.\n. Just removing the <font> and <span> on the global level solves this and another problem I was running into where the cursor was always going to the beginning of the line. Silly Outlook.\nThanks!\n. ",
    "jaketodaro": "@jhchen I'd be happy to contribute this feature if you think it's appropriate.\n. ",
    "BennieCopeland": "How do you prevent/remove newlines when pasting in content?. ",
    "l4nz10": "Hello, I stumbled upon a particular behavior while trying to disable the enter key in Quill. The snippet suggested by @Joeao works fine until you pass to a heading format.\nIn that case the editor will ignore the disabling and insert a new line.\nAny suggestions in order to fix this issue?. ",
    "ericeslinger": "Here's the stack trace - like I said, it's 100% inside of angular. If I have time this week, I'll download a buildable repo for quill and see if I can't get deeper into which particular bit angular objects to. \nTypeError: Cannot read property 'childNodes' of undefined\n    at compositeLinkFn (angular.js:7641)\n    at compositeLinkFn (angular.js:7641)\n    at nodeLinkFn (angular.js:8241)\n    at angular.js:8476\n    at processQueue (angular.js:14634)\n    at angular.js:14650\n    at Scope.$eval (angular.js:15878)\n    at Scope.$digest (angular.js:15689)\n    at Scope.$apply (angular.js:15986)\n    at done (angular.js:10511)\n(anonymous function) @ angular.js:12416\n(anonymous function) @ angular.js:9203\nprocessQueue @ angular.js:14642\n(anonymous function) @ angular.js:14650\nScope.$eval @ angular.js:15878\nScope.$digest @ angular.js:15689\nScope.$apply @ angular.js:15986\ndone @ angular.js:10511\ncompleteRequest @ angular.js:10683\nrequestLoaded @ angular.js:10624\n. As I mentioned in my initial post, I basically load the quill stuff asynchronously, after the angular element has finished linking by using scope.$evalAsync(() => initializeQuill(scope)) in the controller. It's a bit hacky but it works. My guess is that there was some race condition in there as the quill system inflated some DOM nodes onto the toolbar div and the angular compiler walked the DOM to build its own data structures (looking for {{stuff}}), so holding off from building the quill stuff until after the angular code ran worked okay.\n. Using aliases for anything below quill/ is the problem. If i take the extant quill source tree and drop it into my own project, it would work, except I have to change all the import Emitter from 'quill/emitter' to import Emitter from 'quill/core/emitter'. It's not the end of the world, of course.\nAlternatively (and even better maybe) would be just exposing most of those objects at the top level of Quill. Right now in the top level quill.js file, the export is just a single Quill object. My specific problem is that I want to construct my own quill object and not register a few of the modules (in particular Image), and then register some custom modules (a replacement image module). I'd also like to make subclasses of existing utility classes (parchment stuff). But because that sub-stuff isn't exposed on the module at the top level, I just dropped the source code into my build tree directly. If I were able to import {QuillCore, Emitter, Image ...} from 'quill', that'd be fine too.\n. Oh excellent, thanks- Quill.import is precisely what I need.\n. as a different data point, I would not use this feature, were it available. \nI've written a couple of different converters from Delta format to rendered-out HTML, and in all cases I find that it is a tricky enough process that I really want to have a lot of control over it. For example: in link-formatted text, I conditionally add target=\"_blank\" to some links in some contexts to force new-tab behavior (some users complained about opening in-tab). I don't want to muck around with the link format renderer in the editor (where the affordances are different), but in my rendered area, I do. I also like being able to decide if I want <br>, <p>, or some other tags as the top-level paragraph organizing structures.\nFurthermore, there's just some plain differences between display and edit - when you're editing an atmention, for example, it's not urgent that username changes propagate into the editor (which is ephemeral in lifecycle), but you do want them to propagate into the rendered delta, and that kind of data binding is a lot better handled by your framework of choice (angular, react, etc) than by hacking it in to a custom quill element. Maybe images display differently, with different controls on them, for example.\nUltimately, converting from an insert-only delta (e.g., the canonical form) is mostly a matter of iterating through an array and outputting relevant HTML strings. This is pretty much the job of angular, react, vue, and so on, who make it easy with stuff like *ngFor doing a lot of the heavy lifting, or a small library for converting from deltas to an HTML string isn't terrible, and then you have a lot more control of stuff that happens outside of the purview of Quill.. The problem I'm trying to prevent is when the first handler in handlers calls evt.preventDefault(), other handlers need to not fire (specifically, the keyboard.onEnter and onTab handlers here shouldn't fire when I'm intercepting the enter / tab events with my own autocomplete code. \nI can't guarantee my own keyboard listener will fire and prevent before quill's keydown listener fires (at least, I don't think I can - I don't think eventListeners fire in a guaranteed order unless you're using the jquery flavor).\n. ",
    "MichaelKloepzig": "@ericeslinger Have you ever found a solution for this problem? I'm stuck at the same point.\n. Ah, I missed that bit. Figured the same in the meantime and fixed it with a $timeout around the Quill init, so similar to your approach. Thanks anyways!\n. ",
    "justbittin": "I'm actually seeing this behavior in 1.1 release.  Any 'enter key' submission will cause the cursor to eventually disappear until you press a different key.  Even starting in the middle of the document, pressing enter until it moves out of the viewable area.\nI just upgraded finally from 0.20.  This did not happen in this version.\n. ",
    "TheDeveloperTom": "The same problem, it's really bad about the quill.. ",
    "jasongisstl": "Thank you for your quick reply, Jason!\nI see, yes, that makes sense. Thank you for the explanation.\nMy use case is that I have a fixed size container, which itself may be dynamically resized by external factors, and I need the editor to always fill it.\nBeing a lazy good-for-nothing, I was hoping this may be supported out of the box, but I can definitely do this myself by manually setting the heights in JavaScript.\nCheers!\n. Thanks again for the explanation, and for going to the trouble of creating an example for me. That is really going above and beyond!\nThe example is not perfectly suited to my use case (not that you were to know that) - it doesn't allow for the toolbar to wrap onto multiple lines when it becomes too narrow. But I like the idea and can use this in other areas, i'm sure.\nHowever, I do have a solution now (setting the height manually when getting resize events from our framework).\nThanks again for all of your help, and love what you have created with Quill - it's fantastic!\n. I have a feeling that perhaps I am taking the wrong approach to creating these 'custom' lists?\nThe font lists in this example is working only through the coincidence that the values I have used (serif & monospace) match the values used for the fonts in quill.snow.css.\nE.g. If I wanted a font to map to \"Verdana, Arial, Helvetica, sans-serif\", this would not work.\nShould it? Or is there another way to do this?\nThis sort of approach used to work in v0.2 - perhaps it no longer does by design?\nI have been unable to find docs on this.\n. Thank you very much, @jhchen for your helpful response. Much appreciated!\nOne small issue with the example you have provided: the line colour displayed on the font colour toolbar item remains grey by default (rather than green, which is the default colour).\nIs it expected that I should also add a CSS rule to control this? E.g:\n```\ntoolbar-container .ql-color .ql-color-label.ql-stroke {\nstroke: #00ff00;\n}\n```\nor should this happen automatically?\n. That's great - thank you very much for clarifying.\n. ",
    "momoiroshikibu": "I found this issue too...\nMy Google Chrome version is 45.0.2454.101 (64-bit).\nI'm not using any extensions.\n. I found this issue too...\nMy Google Chrome version is 45.0.2454.101 (64-bit).\nI'm not using any extensions.\n. ",
    "pedromdias": "To add more information:\nI have the same problem on Chrome in Windows 8.1.\nAll extensions are disabled.\nI have the error when I use the mouse, but NOT when I use the touchpad.\n. To add more information:\nI have the same problem on Chrome in Windows 8.1.\nAll extensions are disabled.\nI have the error when I use the mouse, but NOT when I use the touchpad.\n. ",
    "andrew--grant": "To concur, like @pedromdias, issue only when I use the mouse, but NOT when I use the touchpad.\n. @jhchen so we can now rule out the screen recording. \n@jpfortier  I see what you are saying, but this seems not so simple as that. Even when I click on the hoverable area, and use the exact same region, this bug still occurs. One area/region will work at times, but then not at others.\nI can click, say, bold button, without moving the mouse at all, and it will bold then unbold as expected ten times in a row. I can wait a few seconds, leaving the mouse in exact same position, click again, and suddenly the cursor starts hopping out of place.\nI can see this behaviour across platforms, machines and identified by several of our engineers and admin staff.\n. ",
    "Yuyz0112": "I'm also experiencing this bug but I think there is other factors account for this problem.\nI found I can bold or italic the text in the basic example, but cannot do that in the full example.(Visiting the example page by Chrome)\nSo I read the code difference between two examples and I found the basic version use 'button' label where the full version use 'span' label. Then I tried in my project. When I replaced the 'span' label into 'button' label, the button works correctly! After that I also tried 'div' label, it shows the same bug as 'span' label.\nI also had attached the mousemove listener, it showed I have mousemove event in every situation. When I click on a 'button' label, there is only one mousemove event. But if I click on a 'span' label, there will be randomly 1,2,3 or even more mousemove event.\nSo my solution is change the 'span' labels which wrap the tools into 'button' label and change the style of button. I'm not sure why this happened but it only happened in Chrome.(Even not happening in other webkit core browsers.)\nBTW, this bug only shows in the formats which you defined as 'Toggle'.\nP.S I'm not using chromeIPass.\n@jhchen \n. ",
    "azole": "$(\".ql-format-button\").on('mousemove', function(e) {\n   e.preventDefault();\n});\nWhen ql-format-button skip mouse move event, the jump cursor situation doesn't happen again.\n. ",
    "kleinph": "I also experienced this issue.\nI think it is related to the fact that \"selection-change\" events are also fired when selection does not change but the user clicks on toolbar buttons. This maybe has something to do with that the focus detection in https://github.com/quilljs/quill/blob/v0.20.1/src/core/selection.coffee#L16 checks if the activeElement is the editor container, but sometimes the activeElement is actually the <body> when clicking on the toolbar.\nIn my case preventing the default action for click, mousedown and mousemove on the toolbar prevents firing wrong \"selection-change\" events:\njs\n$(\"#toolbar\").on('click mousedown mousemove', function(e) {\n    e.preventDefault();\n});\nI hope this helps.\n. I also experienced this issue.\nI think it is related to the fact that \"selection-change\" events are also fired when selection does not change but the user clicks on toolbar buttons. This maybe has something to do with that the focus detection in https://github.com/quilljs/quill/blob/v0.20.1/src/core/selection.coffee#L16 checks if the activeElement is the editor container, but sometimes the activeElement is actually the <body> when clicking on the toolbar.\nIn my case preventing the default action for click, mousedown and mousemove on the toolbar prevents firing wrong \"selection-change\" events:\njs\n$(\"#toolbar\").on('click mousedown mousemove', function(e) {\n    e.preventDefault();\n});\nI hope this helps.\n. ",
    "lygstate": "I am interested in getting it works again.\n. ",
    "atombender": "I understand the technical reason, but it's not going to cut it in the real world, where people make mistakes (e.g. by accidentally painting over the entire document). Undo should work consistently with authorship information: if I make a change and undo it, I should be undoing my authorship, too.\nIt's entirely different if I replace the content with different text, even if there are similarities in the text that a diffing algorithm would pick up. Sure, if I manually edit the text by swapping out 99% of the characters, then 99% are authored by me and 1% should stand with the original authorship. But I would argue quite strongly that if I paste something over something else (by selecting the text before pasting), then arguably my paste is 100% mine, regardless of the pre-existing content. It should be treated as the equivalent to deleting, then inserting, and result in zero holes. There's no heuristic needed.\n. I understand the technical reason, but it's not going to cut it in the real world, where people make mistakes (e.g. by accidentally painting over the entire document). Undo should work consistently with authorship information: if I make a change and undo it, I should be undoing my authorship, too.\nIt's entirely different if I replace the content with different text, even if there are similarities in the text that a diffing algorithm would pick up. Sure, if I manually edit the text by swapping out 99% of the characters, then 99% are authored by me and 1% should stand with the original authorship. But I would argue quite strongly that if I paste something over something else (by selecting the text before pasting), then arguably my paste is 100% mine, regardless of the pre-existing content. It should be treated as the equivalent to deleting, then inserting, and result in zero holes. There's no heuristic needed.\n. ",
    "quangbuule": "Backwards mean the selection start from the right, and end to the left (by Shift + Left). The difference compare to forwards is after we do a backwards selection, we press Shift + Left again then the selection should expand to the left. Currently quill.setSelection cannot do that, I have to write quill.prototype.setBackwardSelection for my case.\n. Wrap reinserted text is ok, but the undo manager is not doing right in other case also so I think the implementation of _getLastChangeIndex is not correct in UX perspective. For example, we deleted this text \"Lorem ipsum\" then undo, the selection move to right before the \"ipsum\" while we expected it should be right after ipsum.\nCan you explain the implementation of _getLastChangeIndex? I was confused when I read it.\n. ",
    "cmbankester": "It would be cool to see it output MathML on Gecko browsers, which should be possible if we used MathJax. :+1: \n. It would be cool to see it output MathML on Gecko browsers, which should be possible if we used MathJax. :+1: \n. ",
    "lance13c": "+1 Great idea! Looking forward to it's implementation.\n. +1 Great idea! Looking forward to it's implementation.\n. ",
    "faller": "@jhchen Still lost mathjax.\n. @jhchen Still lost mathjax.\n. ",
    "Soviut": "If you're asking for text reflowing that exceeds the limitations of HTML, then probably not. What are the exact capabilities you're hoping for? Do you have any examples?\nThe limitations are based on the fact that the editor is not dealing with a specific document size like publishing software such as Pages or Adobe InDesign does. As a result, elements that are positioned using basic left, right, top, bottom anchoring and percentage offsets. Further, to get text to actually flow around images and other elements requires that those elements be \"floated\" which come with even more restrictions.\nTo a desktop publisher, this may sound like a step backwards, but it's actually really good because it means text, images and other content can reflow at any browser size and any screen size. This has been really important for mobile websites since they're far more readable on a phone than, say, a PDF is.\n. ",
    "woverton": "I listed an example of how using quill in a form with no verification could be dangerous and then listed sanitization libraries which work with quill for multiple languages. \nI was not 'waaaayyyy' to general. If you're going to have an attitude when you don't directly agree with pull request, do it yourself :angry:.\nI was only trying to improve the user friendliness that other text editors offer, see: http://www.tinymce.com/wiki.php/TinyMCE3x:Security. Less experienced developers will not immediately understand the problem with using quill and taking its output and directly showing it to other users.\n. @brettimus  You cant tell me what to do!\n\nI expect a lot of developers wouldn't be checking out the blog post, but a quick head nod in the right direction would be just as useful.\n. ",
    "jakedeichert": "Wow I completely missed that.\nI see things are organized on the API page, but it probably should be it's own section at the top because it's the constructor. Would you agree?\n. Maybe I'm wrong. The configuration page makes sense. I should have really looked harder first!\nAPI just made sense to me since I figured all functions (including constructor) would have been listed there.\n. Sounds good, thanks!\n. @jhchen Yes, that works great now. I'm excited for 1.0!\nHowever, just clarifying whether this is expected: My cursor is on the red character but red is not showing in the dropdown. If I move my cursor onto black text, black shows in the dropdown. I'm assuming red should show in the dropdown.\n\n. ",
    "kupec": "wysihtml editor(http://wysihtml.com/)  has the same problem\n. ",
    "radu-andrei-28": "I am encountering this problem while using the quill api. I tried to implemented like this:\nUsing //cdn.quilljs.com/0.20.0/quill.js\n\nAnd Javascript:\nvar quill =  new Quill('#editor', {\n                    formats: ['bold', 'italic', 'color', 'size', 'font']\n                  });\n                  quill.addModule('toolbar', { container: '#toolbar' });\n                  quill.prepareFormat('font', true);\n. Yes it works! Thank you!\n. ",
    "alexmahterian": "I'm having the same issue. Was this resolved somewhere else?\n. ",
    "bmathews": "Sounds good, thanks!\nFor future reference and disclosure, here was the usage for that proposed api (which can certainly be facilitated outside of core).\n``` javascript\nimport Quill from '../quill';\nimport extend from 'extend';\nlet Range = Quill.import('range');\nclass ImageDND  {\n  constructor(quill, options = {}) {\n    this.quill = quill;\n    this.options = extend({}, options);\n    this.initListeners();\n  }\ninitListeners() {\n    this.quill.root.addEventListener('drop', this._handleDrop.bind(this), false);\n    this.quill.root.addEventListener('dragenter', (e) => e.preventDefault(), false);\n    this.quill.root.addEventListener('dragover', (e) => e.preventDefault(), false);\n  }\n_handleDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    var files = evt.dataTransfer.files;\n    this._attachFiles(files, (url) => {\n      this._insertImageAtPoint(url, evt.clientX, evt.clientY)\n    });\n  }\n_attachFiles(files, cb) {\n    ...\n  }\n_insertImageAtPoint(url, clientX, clientY) {\n    let range = this.quill.setSelectionFromPoint(clientX, clientY, Quill.sources.USER);\n    if (range != null) {\n      this.quill.insertEmbed(range.start, 'image', { url: url }, Quill.sources.USER);\n      this.quill.setSelection(range.start + 1, range.start + 1, Quill.sources.SILENT);\n    }\n  }\n};\nQuill.registerModule('image-dnd', ImageDND);\nexport { ImageDND as default };\n```\n. ",
    "jolic": "Is it worth to create a module for the current version or to wait for the 1.0? When do you plan to submit the new version?\n. ",
    "mbertheau": "@jhchen quite straightforward: https://jsfiddle.net/07rq3wer/2/ :) In Chrome 45.\n. @jhchen quite straightforward: https://jsfiddle.net/07rq3wer/2/ :) In Chrome 45.\n. ",
    "johann-abraham": "+1\n. ",
    "duncanmeech": "caused by scrollIntoView being called. I had to fork and patch for the same reason. Not sure of correct fix yet.\n. ",
    "jman123": "I'm seeing the same issue, which makes it frustrating to create a quill document in Safari and IE. Hope this bug can be fixed in the main quill branch. Thanks.\n. I see this same issue on http://quilljs.com/playground/  when using Firefox/Windows 7 and  IE 11/Windows 7.\nAnd this bug happens whether you use the \"Delete\" key or the \"Backspace\" key.. Hi Jason - Has Quill Playground been updated with your latest fix?\nOn Quill Playground, I'm seeing the same bug on FF/Win 7 and IE11/Win 7. Thanks.. Thanks, Jason. \nLooking forward to your next release that includes this fix.. ",
    "nickvoegeli": "+1\n. +1\n. ",
    "Thomas-C-Voegeli": "+1\n. ",
    "tylercollier": "@jhchen Are you suggesting you're going to allow a customizable link sanitizer? Or shall I? I'm happy to do it. Do you have any particular direction?\n. Thanks for that fix. However, there is a CSS problem. dist/quill.snow.css refers to non-existent assets:\n.ql-snow.ql-toolbar .ql-format-button.ql-list,\n.ql-snow.ql-toolbar .ql-picker.ql-list .ql-picker-label,\n.ql-snow.ql-toolbar .ql-picker .ql-picker-label[data-value=list],\n.ql-snow.ql-toolbar .ql-picker .ql-picker-item[data-value=list] {\n  background-image: url(\"assets/list(arr).png\");\n}\nIt only does that, adds \"(arr)\", for the format 'list' (in the for loop in toolbar.styl). Can you fix that? It prevents my project from building with webpack, since it refers to a non-existent asset.\n. The build output is wrong, at least for me. The problem might be stylus. It's something about the word list. Take a look at this. This input (that I stuck at the bottom of toolbar.styl for this test):\nmylist = list\nfor myitem in mylist\n  .my-style-{myitem}\n    background-image: url('assets/' + myitem + '.png')\nGives this output:\n.my-style-list {\n  background-image: url(\"assets/list(arr).png\");\n}\nSince it doesn't handle the word list properly, it's turning the background image url into \"list(arr).png\". Since that file doesn't exist, it can't base64 encode it.\n. I looked into this and it's because of the function definition of list(arr) in base.styl:\nlist(arr)\n  unquote('list-' + join(' list-', arr))\nChanging the name of that function to e.g. makelist should fix things up. I will submit a pull request.\n. Great, thanks!\n. ",
    "KameSama": "+1\n. Important note : When the \"editablecontent\" attribute is set to false (<div class=\"ql-editor\" contenteditable=\"false\">) ; the copy with format works as expected.\n. ",
    "mattyurka": "Thanks!\n. Thanks!\n. ",
    "JrPribs": "@jhchen That's respectable, I figured it was a longshot, but thanks for considering it! I want to become involved in this project so you'll definitely see me poking around some more :+1: \n. ",
    "bopinto": "I know. What I was trying to say is that, if you like the idea I was presenting, I would be happy to submit a PR to the develop branch with the implementation.\n. I know. What I was trying to say is that, if you like the idea I was presenting, I would be happy to submit a PR to the develop branch with the implementation.\n. ",
    "ablythe": "In the top screenshot, you can see that font-size is not actually being set on the this is normal line, it is missing the wrapping span completely.\n<div>\n        <span class=\"author-galdriel\">This is normal</span>\n   </div>\nvs.\n<div>\n       <span style= \"font-size: 13px\">\n           <span class=\"author-galdriel\">This is normal</span>\n       </span>\n   </div>\nIt seems that expected behavior should be that when a user clicks into the editor and starts typing without first selecting a font-size it should set the font size to the value that has been set as default or selected on the toolbar. \n. It is causing issues when the font size options are set up like below, where the default selected size normal is not equal to 13px. I can do a workaround solution and change the default font size for the container in CSS but that's not ideal, since if I change the size options later on I'd also have to remember to change it in the CSS. \n<select class=\"ql-size\">\n      <option value='13px' >Small</option>\n      <option value='16px' selected>Normal</option>\n      <option value='24px'>Large</option>\n      <option value='48px'>Huge</option>\n    </select>\n. The switch to classes should be a big help with this. Thanks for the quick responses and good luck with 1.0 \n. ",
    "shivanka-thunderbolt": "it should be like this.\n\n. ",
    "johnzupancic": "That makes a lot of sense - and I totally get why you would want to stay away from whitelisting particular products.\nI actually managed to speak with Grammarly's support team and they are fixing it on their end.\n. Unfortunately, I was unable to solve it.\nI concluded that the problem was with Grammarly's extension, as this\nbehaviour occurs in other text editors as well. I even contacted Grammarly\nabout it, they acknowledged that it was their problem, but have not fixed\nit.\nI was forced to switch text editors altogether and there are way fewer\nissues (none?) with Grammarly's plugin in CKeditor.\nJohn Zupancic, BBA, BSc, MBET \nFounder, Wriber Inc.\n295 Hagey Boulevard, Waterloo, Ontario  N2L 6R5\nPhone: (289) 244-5299\nOn Fri, Nov 18, 2016 at 8:34 AM, Doron Cyngiser notifications@github.com\nwrote:\n\nI still have problems with quill editor while grammarly chrome extension\nis enabled, did you manage to solve this issue, or have updated on this\nissue?\n@johnzupancic https://github.com/johnzupancic\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/574#issuecomment-261532527, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADc-HUFmgWjUhIKSgbNZMB165cFC-Lldks5q_alRgaJpZM4HR4ml\n.\n. \n",
    "doroncy": "I still have problems with quill editor while grammarly chrome extension is enabled, did you manage to solve this issue, or have updated on this issue? \n@johnzupancic\n. ",
    "evansolomon": "We had this problem at LinkedIn, too. We solved it by pretty much just allowing grammarly to do its own thing. I'll paste the relevant code (including the comment which is more useful) below.\n```js\n// Allows inline tags from the Grammarly browser extension\n// https://www.grammarly.com/\n//\n// Grammarly is a very popular browser extension that checks spelling and\n// grammar as you write. It adds those familiar red underlines to arbitrary\n// text editors on the web when you make typoez.\n//\n// Grammarly works by modifying editable text nodes (e.g. contenteditable)\n// to add various data-gram- attributes. When text in these nodes is changed,\n// Grammarly finds spelling/grammar errors and displays them by wrapping the\n// text in their own  tags with various classes to mark the error type.\n//\n// By default, this causes a big problem because our editor and Grammarly get into\n// an infinite loop of Grammarly adding its  wrappers and the editor removing\n// them. This causes Quill to continuously rerender the paragraph, which\n// cancels any selection by the user and makes the browser extremely laggy. All\n// of this makes it look like the editor is completely broken.\n//\n// So instead of stripping them, we just allow them through. These tags are not\n// allowed by the backend. Ordinarily that would mean the content\n// inside of them would be stripped during save. But the Grammarly extension\n// also modifies the editable element (the one with the data-gram- attributes)\n// with its own getter/setter for the innerHTML property. The getter strips\n// the  tags and returns the expected \"normal\" HTML. So to consumers of\n// the editor's contents, everything looks normal...even though it's really,\n// really not.\n//\n// So if a Grammarly-wrapped element has a typo, you might end up with HTML\n// that looks something like this:\n//   \n//     This has typoesz there\n//   \n//\n// But when you do something like div.innerHTML, you will actually get:\n//   This has typoesz there\n//\n// So we can let Grammarly mangle the HTML because when we read the data it\n// comes back clean.\nimport Inline from 'quill/blots/inline';\nclass GrammarlyInline extends Inline {}\nGrammarlyInline.tagName = 'G';\nGrammarlyInline.blotName = 'grammarly-inline';\nGrammarlyInline.className = 'gr_';\nexport default GrammarlyInline;\n```\nEdit: we then import that blot and register it with Quill (e.g. Quill.register({'formats/grammarly-inline': GrammarlyInline}). I'm also not sure. This was based on feedback from the accessibility team here and I tried to clarify it a bit because label also didn't seem obviously right to me. These seem like good points so I'll follow up with them again. \n. I followed up with the accessibility team. I misunderstood their recommendation, and you are right about the difference between the placeholder and the label. I'll update the PR.\n. Updated the api to use a new ariaLabel property in the options param. I'm guessing you've thought more than me about how accessibility should generally work in Quill, so let me know if you have a particular api design in mind.\n. The report was just a bunch of jira issues, and the relevant one here was just a request to add an aria-label attribute.\nI talked with the team again and asked which accessibility properties could make sense for a text editor. Their answer was: aria-describedby, aria-labelledby, and aria-label. Another potentially useful datapoint is this set of options in draft.js.\nI updated this branch to add the two other attributes mentioned by the accessibility team here, but it doesn't solve your (reasonable) concerns about ongoing support and multiple configs.\nEdit: added role too, per their suggestion\n. ",
    "difelice": "I can't make Grammarly work with Quill. The icon does not appear on the editor (v1.2.2). Any suggestion? Thanks.. I can't make Grammarly work with Quill. The icon does not appear on the editor (v1.2.2). Any suggestion? Thanks.. ",
    "BrockReece": "Thanks so much @evansolomon \nNot sure if there has been an update since you posted your code or I am doing something differently but I needed to use the Quill.import instead of a standard import.\njs\nconst Inline = Quill.import('blots/inline');\nI hope this saves someone some time.. Thanks so much @evansolomon \nNot sure if there has been an update since you posted your code or I am doing something differently but I needed to use the Quill.import instead of a standard import.\njs\nconst Inline = Quill.import('blots/inline');\nI hope this saves someone some time.. I too am using 1.3.0 and am still experiencing this issue.\nI don't know if this is of use to anyone but the workaround that I am using is adding an additional space after the embed and then setting the current selection to be after that space.\njs\nconst range = editor.getSelection();\neditor.insertEmbed(range.index, 'shortcode', `{{ $${val} }}`);\neditor.insertText(range.index + 1, ' ');\neditor.setSelection(range.index + 2, Quill.sources.SILENT);. I too am using 1.3.0 and am still experiencing this issue.\nI don't know if this is of use to anyone but the workaround that I am using is adding an additional space after the embed and then setting the current selection to be after that space.\njs\nconst range = editor.getSelection();\neditor.insertEmbed(range.index, 'shortcode', `{{ $${val} }}`);\neditor.insertText(range.index + 1, ' ');\neditor.setSelection(range.index + 2, Quill.sources.SILENT);. ",
    "nickbaum": "Updated code for Quill 2.X\nlet Inline = Quill.import('blots/inline');\nclass GrammarlyInline extends Inline {}\nGrammarlyInline.tagName = 'G';\nGrammarlyInline.blotName = 'grammarly-inline';\nGrammarlyInline.className = 'gr_';\nQuill.register(GrammarlyInline);\n@jhchen I completely understand the reluctance to add product-specific tweaks, but I think there's a pragmatic middle ground. For example, if the number of Chrome users with Grammarly installed were to exceed the number of Firefox users, surely it'd be more important to fix Grammarly bugs than Firefox bugs?\nGrammarly seems so widespread that any reasonably popular product will encounter these bugs. We kept getting reports that our editor was broken and the cursor jumping around erratically, but I couldn't reproduce it. Until a customer mentioned Grammarly, I just assumed there was some weird edge case between my code, Quill and some browser.. Oh, I had no great insight. I was simply suggesting that product specific\nworkarounds should be evaluated based on the popularity of the product in\nquestion, the severity of the issue and the risk & maintenance cost of the\nfix.\nIn the case of Grammarly, the popularity seems high (3M+ users), the issue\nsevere (editor broken), and the fix small (?).\nIf the fix is more hacky than I understand, this thread suggests that you\ncan disable Grammarly by setting the 'data-gramm' attribute on the editor\nto 'false'\nhttps://github.com/facebook/draft-js/issues/616\n. Sounds like the right approach!\n\nIt's better for Quill to be obviously broken with Grammarly than insidiously broken.\n\nAgreed, but of course the difficulty is identifying Grammarly as the culprit in the first place. We would still be puzzling over it if a customer hadn't happened to mention it. That's why I think you're doing the right thing by addressing the issue in Quill.. ",
    "mikewagz": "Our app creates home inspection reports.  We recently switched over to Quill and now customers are up-in-arms over Grammarly not working as spelling, punctuation etc is very important for their final product.  \nA solution to this would be great, otherwise we'll likely have to revert back to our previous editor.. Our app creates home inspection reports.  We recently switched over to Quill and now customers are up-in-arms over Grammarly not working as spelling, punctuation etc is very important for their final product.  \nA solution to this would be great, otherwise we'll likely have to revert back to our previous editor.. ",
    "ivanferrer": "I've managed to do this, but the problem is that Quill.getSelection() has stopped working, what can it be?\n```\nvar GrammarlyInline =  Quill.import('blots/inline');\n    GrammarlyInline.tagName = 'G';\n    GrammarlyInline.blotName = 'grammarly-inline'; \n    GrammarlyInline.className = 'gr_';\n    Quill.register('formats/grammarly-inline', GrammarlyInline). ",
    "alexbenitez": "Hi @javascriptlove . I would like to give it a try...  I'm using Quill with Angular v6 as follow\n```\n                  let editor = this.container.nativeElement.\n                  querySelector('#editor')\n              this.editor = new Quill(editor, {theme: 'snow'});\n              this.editor.root.removeAttribute('data-gramm');\n\n              let Inline = Quill.import('blots/inline');\n              class GrammarlyInline extends Inline {}\n              GrammarlyInline.tagName = 'G';\n              GrammarlyInline.blotName = 'grammarly-inline';\n              GrammarlyInline.className = 'gr_';\n              Quill.register(GrammarlyInline);\n\n```\nAll good with Quill but I can't make it works with Grammarly. I'm pretty sure that I'm removing the data-gramm attribute (e.g. if I check before/after in the console with this.editor.root.getAttribute('data-gramm')). Is there anything that I'm missing or calling things in the wrong other? How do you instantiate/configure Quill with React? Do you mind sharing a snippet? \nThx\n. ",
    "bribar": "My bad, found something on it\n. @jhchen although the edit feature will be cool. Users would expect clicking the tooltip would open the link in a new window with the pointer displaying. Currently, it doesn't. Is this a bug or simply a display tooltip? I tried clicking all over the tooltip. Snow theme works as expected.. @jhchen although the edit feature will be cool. Users would expect clicking the tooltip would open the link in a new window with the pointer displaying. Currently, it doesn't. Is this a bug or simply a display tooltip? I tried clicking all over the tooltip. Snow theme works as expected.. ",
    "loverdrive": "what have you found, for multiple (dynamic number) instance on the page?\n. ",
    "bhargav3": "@loverdrive you can do it simply by initiating quill multiple times on the same page. Just have to use different IDs for every editor.. ",
    "jonburger": "I did read that, but I can't see any way to have both a container specified, and a 'controls' array - i even looked in the source, which does refer to container, controls, handlers in the toolbar module, but the options don't seem to work that way unless I'm missing something.\n. I know they don't work that way ;)\nI'm suggesting maybe the toolbars options should work as I have illustrated above. It would support all existing functionality well, whereas your current options object is either one way or the other, there are compromises with either - but there is no obvious need for it. Just a thought anyway.\n. ",
    "nicohvi": "How can what @jonburger suggested be achieved? (specifying a container and further options)\n. I certainly see that point of view, @jhchen \ud83d\udc4d  \nI think the problem (at least the one I'm having at any rate), is that I'm not entirely clear on how to have full control over the toolbar (with custom buttons et. al.) through code (which I vastly prefer to adding markup).\nFor instance:\njavascript\nconst opts = [\n  [ 'bold', 'italic'],\n  [{ 'save': 'save' }],\n  [ { 'header': [ 1, 2 ] }],\n  [ { 'align': [false, 'center'] }]\n];\nThis code adds ql-formats <span>-tags for bold, and italic (which can be styled using :before pseudo elements), a custom button (\"save\"), and two <select>-tags for headings and alignment. However, there is currently no way (that I can see anyway) to style the <option>-tags for the dropdown. \nThe documentation states that \"CSS is used to control the visual labels for dropdown options.\", but as far as I know there's no way to prepend/append pseudo elements to select tags, at least according to the w3 docs.\nBtw I just want to add that I really enjoy using the library, thank you very much for your time and effort. \ud83d\ude04 \n. Thank you very much for the response, @jhchen. Does this mean that in order to show labels for <select> elements I need to either:\n1: Use a predefined theme (like Bubble or Snow)\n2: Create my own theme\nIs that correct?\n. Ah, sorry. I mean to have dropdown values with textually populated options (like for the Snow and Bubble themes). Like this:\n\nTo re-iterate, from what I understand by what you're saying, to accomplish this I need to either:\n1: Use a predefined theme\n2: Create my own theme\n3: Use a <select> tag through markup (I'd prefer through code).\nIs that right?\n. Thanks for the quick resolution @jhchen, great work! \ud83c\udf89 \n. Thank you very much for the quick response @benbro \ud83d\udc4d \n. ",
    "CosticaPuntaru": "my suggestion was not to simply ship the source code, i was suggesting to ship a precompiled es5 version so when someone uses the lib he dose not need to care about any custom build of the quill package\n. if you import the es5 non minified version the warning will go away\n. ",
    "ripper17": "Thank you for the update.\nI can confirm it is working as expected in Firefox 46.0, InternetExplorer 11 on beta.quilljs.com\n. Thanks for the explanation, we're thinking about creating a custom blot. \nSince text can be dragged from any website, we don't really have control over whether it resides inside a <p> or a <div> (or anything else), but I guess covering <div>s additionally should cover most use cases.\nAnyway, if this is the \"to be expected\" behaviour for text in <div>s, I'm fine with closing this issue.. Sorry for the delayed reply: The blot-approach seems to work, closing this ticket now. ",
    "ivanalejandro0": "Here's a relevant discussion about contenteditable and undo/redo: https://github.com/w3c/editing/issues/150. Here's a relevant discussion about contenteditable and undo/redo: https://github.com/w3c/editing/issues/150. I totally agree with @eamodio.\nOn my use case, I dynamically change the enabled property along with the placeholder and I'd like to have an API to change the placeholder as we have for enabled.\n@jhchen: I respect your call on not having an API for changing the placeholder.\nI also think that this particular use case may be common enough to at least add it to the documentation so the users don't have to go through code/issues/docs/google to find out how it can be done.\nAs a side note (I'm leaving it here in case that someone else needs it as well) you can set the placeholder this way too:\njs\nquill.root.setAttribute('data-placeholder', \"Your new placeholder\");\nThis is how is done right now on Quill's constructor.. I totally agree with @eamodio.\nOn my use case, I dynamically change the enabled property along with the placeholder and I'd like to have an API to change the placeholder as we have for enabled.\n@jhchen: I respect your call on not having an API for changing the placeholder.\nI also think that this particular use case may be common enough to at least add it to the documentation so the users don't have to go through code/issues/docs/google to find out how it can be done.\nAs a side note (I'm leaving it here in case that someone else needs it as well) you can set the placeholder this way too:\njs\nquill.root.setAttribute('data-placeholder', \"Your new placeholder\");\nThis is how is done right now on Quill's constructor.. @danielschwartz I've encountered the same issue, hopefully, there's a workaround :)\nBasically, the problem is that when you add text right after (and sometimes right before) a blot, you are not editing the block next to the blot but the blot itself (which you marked as readonly).\ne.g.\nWhere \"it seems\" the cursor is:\n<div>Here is my <span contenteditable=false>read only blot</span>|</div>\nWhere the cursor actually is:\n<div>Here is my <span contenteditable=false>read only blot|</span></div>\nI couldn't get the contenteditable=false approach working, it turned out to be a bit difficult to handle in some cases, and, most important for my use case, it produces different behaviors on different platforms.\nWhat I had to do to workaround this problem is to leverage the update function of the blot and handle prepends (typing right before the blot), appends (typing right after the blot), and text replacements (like using spell suggestions on the phone or Ctrl+Backspace deleting words) with different code.\nBasically, instead of using a non-editable Blot I created a sort of immutable one.\nHere you have a working example: http://codepen.io/ivanalejandro0/pen/LbyNYW , it is a big portion of the code I'm using which includes handling of several edge cases. I hope this is useful for you.\n. @danielschwartz I've encountered the same issue, hopefully, there's a workaround :)\nBasically, the problem is that when you add text right after (and sometimes right before) a blot, you are not editing the block next to the blot but the blot itself (which you marked as readonly).\ne.g.\nWhere \"it seems\" the cursor is:\n<div>Here is my <span contenteditable=false>read only blot</span>|</div>\nWhere the cursor actually is:\n<div>Here is my <span contenteditable=false>read only blot|</span></div>\nI couldn't get the contenteditable=false approach working, it turned out to be a bit difficult to handle in some cases, and, most important for my use case, it produces different behaviors on different platforms.\nWhat I had to do to workaround this problem is to leverage the update function of the blot and handle prepends (typing right before the blot), appends (typing right after the blot), and text replacements (like using spell suggestions on the phone or Ctrl+Backspace deleting words) with different code.\nBasically, instead of using a non-editable Blot I created a sort of immutable one.\nHere you have a working example: http://codepen.io/ivanalejandro0/pen/LbyNYW , it is a big portion of the code I'm using which includes handling of several edge cases. I hope this is useful for you.\n. @petahbred yeah, I've forked my previous example into a new one that works with the current latest quill version (1.3.6 as today).\nhttps://codepen.io/ivanalejandro0/pen/GdOBjQ\nSome caveats:\n it works differently than the previous one, there's no blot to text conversion since that was part of the workaround of the blot not being immutable previously.\n the code is much shorter since there's no longer need to handle blot mutations thanks to the new non editable blot and the \"guards\" around it that handles changes.\n there's a workaround on the update() function to handle an android bug using gboard (I think* it could be #1985). @petahbred yeah, I've forked my previous example into a new one that works with the current latest quill version (1.3.6 as today).\nhttps://codepen.io/ivanalejandro0/pen/GdOBjQ\nSome caveats:\n it works differently than the previous one, there's no blot to text conversion since that was part of the workaround of the blot not being immutable previously.\n the code is much shorter since there's no longer need to handle blot mutations thanks to the new non editable blot and the \"guards\" around it that handles changes.\n there's a workaround on the update() function to handle an android bug using gboard (I think* it could be #1985). I'm not able to reproduce \"Problem 1\", but it looks like it may be related to #2109 . I'm not able to reproduce this issue on Android 7.0, Chrome 66.0.3359.158. I've tested it with both Gboard and Samsung keyboards.. I'm not able to reproduce this issue on Android 7.0, Chrome 66.0.3359.158. I've tested it with both Gboard and Samsung keyboards.. I've stumbled upon this problem as well, or at least very similar.\nI managed to track the down the problem and workaround it. On my case I created a custom embed and applied some style to it.\nWhen you select the embed and type over it, there seems to be a change on quill to adjust styling or something like that.\nWhat I did was to apply the styling to the underlying tag instead of the main one. This may not work for this case since my embed is immutable and has an editable wrapper to handle changes attempts (default Quill construction for this kind of blots).\nHere's my use case:\nhttps://codepen.io/ivanalejandro0/pen/GdOBjQ\nTo solve this problem I just had to change:\ncss\n.quill-mention {\nto\ncss\n.quill-mention > span {. I've stumbled upon this problem as well, or at least very similar.\nI managed to track the down the problem and workaround it. On my case I created a custom embed and applied some style to it.\nWhen you select the embed and type over it, there seems to be a change on quill to adjust styling or something like that.\nWhat I did was to apply the styling to the underlying tag instead of the main one. This may not work for this case since my embed is immutable and has an editable wrapper to handle changes attempts (default Quill construction for this kind of blots).\nHere's my use case:\nhttps://codepen.io/ivanalejandro0/pen/GdOBjQ\nTo solve this problem I just had to change:\ncss\n.quill-mention {\nto\ncss\n.quill-mention > span {. I've stumbled upon this problem as well.\nIt seems that the Gboard keyboard behaves differently than others.\nTo workaround this problem I redefined the update method on my custom blot that extends Embed to handle the childList case where a node is removed.\nYou can see a working example here: https://codepen.io/ivanalejandro0/pen/GdOBjQ\nHere's a copy/paste of the code that does the trick:\n``js\nconst Base = Quill.import('blots/embed');\nclass MentionBlot extends Base {\n  // ... more code here ...\n  /**\n   * Redefine theupdatemethod to handle thechildListcase.\n   * This is necessary to correctly handle \"backspace\" on Android using Gboard.\n   * It behaves differently than other cases and we need to handle the node\n   * removal instead of thecharacterData.\n   */\n  update(mutations, context) {\n    //childListmutations are not handled on Quill\n    // seeupdate` implementation on:\n    // https://github.com/quilljs/quill/blob/master/blots/embed.js\nmutations.forEach(mutation => {\n  if (mutation.type != 'childList') return;\n  if (mutation.removedNodes.length == 0) return;\n\n  setTimeout(() => this._remove(), 0);\n});\n\nconst unhandledMutations = mutations.filter(m => m.type != 'childList')\nsuper.update(unhandledMutations, context);\n\n}\n_remove() {\n    // NOTE: call this function as:\n    // setTimeout(() => this._remove(), 0);\n    // otherwise you'll get the error: \"The given range isn't in document.\"\n    const cursorPosition = quill.getSelection().index - 1;\n// see `remove` implementation on:\n// https://github.com/quilljs/parchment/blob/master/src/blot/abstract/shadow.ts\nthis.remove();\n\n// schedule cursor positioning after quill is done with whatever has scheduled\nsetTimeout(() => quill.setSelection(cursorPosition, Quill.sources.API), 0);\n\n}\n  // ... more code here ...\n}\n```\nI've tried this with latest quill (1.3.6 as today), on Android 7.0, Chrome 66.0.3359.158. I've tested it with both Gboard and Samsung keyboards.\nI think that this fix can be ported to the update method here https://github.com/quilljs/quill/blob/master/blots/embed.js#L67 but I didn't have time to go there.\nHopefully my workaround and example can give you some insight of the problem and how to workaround/fix it.. I've stumbled upon this problem as well.\nIt seems that the Gboard keyboard behaves differently than others.\nTo workaround this problem I redefined the update method on my custom blot that extends Embed to handle the childList case where a node is removed.\nYou can see a working example here: https://codepen.io/ivanalejandro0/pen/GdOBjQ\nHere's a copy/paste of the code that does the trick:\n``js\nconst Base = Quill.import('blots/embed');\nclass MentionBlot extends Base {\n  // ... more code here ...\n  /**\n   * Redefine theupdatemethod to handle thechildListcase.\n   * This is necessary to correctly handle \"backspace\" on Android using Gboard.\n   * It behaves differently than other cases and we need to handle the node\n   * removal instead of thecharacterData.\n   */\n  update(mutations, context) {\n    //childListmutations are not handled on Quill\n    // seeupdate` implementation on:\n    // https://github.com/quilljs/quill/blob/master/blots/embed.js\nmutations.forEach(mutation => {\n  if (mutation.type != 'childList') return;\n  if (mutation.removedNodes.length == 0) return;\n\n  setTimeout(() => this._remove(), 0);\n});\n\nconst unhandledMutations = mutations.filter(m => m.type != 'childList')\nsuper.update(unhandledMutations, context);\n\n}\n_remove() {\n    // NOTE: call this function as:\n    // setTimeout(() => this._remove(), 0);\n    // otherwise you'll get the error: \"The given range isn't in document.\"\n    const cursorPosition = quill.getSelection().index - 1;\n// see `remove` implementation on:\n// https://github.com/quilljs/parchment/blob/master/src/blot/abstract/shadow.ts\nthis.remove();\n\n// schedule cursor positioning after quill is done with whatever has scheduled\nsetTimeout(() => quill.setSelection(cursorPosition, Quill.sources.API), 0);\n\n}\n  // ... more code here ...\n}\n```\nI've tried this with latest quill (1.3.6 as today), on Android 7.0, Chrome 66.0.3359.158. I've tested it with both Gboard and Samsung keyboards.\nI think that this fix can be ported to the update method here https://github.com/quilljs/quill/blob/master/blots/embed.js#L67 but I didn't have time to go there.\nHopefully my workaround and example can give you some insight of the problem and how to workaround/fix it.. After some reading and playing around I wasn't able to create tests for embed/formula, if you give me an example, docs or some starting point I can try to add a test for this case.. I wonder if Quill shouldn't just prevent the cursor from being placed in between the embed and the guard, would that be possible?\nThat would not only fix this bug, but also another use case I've seen where the mobile keyboard is closed due to the cursor being placed along a non-editable tag.. I think that there may be a problem due to the cursor contents being a \"Zero width no break space\", which is the same as the Embed guards. This could \"confuse\" quill when trying to detect position.\nSee Cursor's restore() function:\nhttps://github.com/quilljs/quill/blob/6528f2a3a0bdae1f26c968aaf8fe27cbb17c05ed/blots/cursor.js#L70\nhttps://github.com/quilljs/quill/blob/6528f2a3a0bdae1f26c968aaf8fe27cbb17c05ed/blots/cursor.js#L113\nWhich is called from:\nhttps://github.com/quilljs/quill/blob/6528f2a3a0bdae1f26c968aaf8fe27cbb17c05ed/core/selection.js#L327. I wasn't able to workaround the cursor placement problem.\nThere seems to be no way to know whether the cursor is between leftGuard and the inner span or between the inner span and rightGuard.\nI've tried getting information from the selection-change and by handling the click event (as suggested here: https://github.com/quilljs/quill/issues/1928#issuecomment-362153846), but I couldn't find any useful information that allowed me to fix the cursor position to prevent the \"android keyboard closed\" from happening and not needing the fix introduced on this PR.. ",
    "fracmak": ":+1: \n. :+1: \n. Yes, new copies clear out all clipboard types, so it would correctly clear out the application/json\n. I've found it's not guaranteed that all browsers will correctly detect the circular reference, it's best to break the code -> dom -> code link to release resources\n. maybe switch the style checks with https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle ?\n. getComputedStyle does trigger a reflow which is expensive, but as long as you don't modify the dom within your loop, you should be alright\n. ah, good point, fixed\n. ",
    "garbles": "Also thanks for all of your work on maintaining this :tada: \n. Also thanks for all of your work on maintaining this :tada: \n. @jhchen great. thanks for the quick reply\n. @jhchen great. thanks for the quick reply\n. ",
    "redjab": "This is on Windows 8.1 64-bit.\nEdit: This is very strange, now I can't seem to reproduce the issue anymore and it works fine.\nNext time if I come across this issue, I will make sure to record it.\n. This is on Windows 8.1 64-bit.\nEdit: This is very strange, now I can't seem to reproduce the issue anymore and it works fine.\nNext time if I come across this issue, I will make sure to record it.\n. @Joeao You know what that's very likely. I just tried reproducing issue #487 and it seems to match what I were experiencing when inserting image. \n. @Joeao You know what that's very likely. I just tried reproducing issue #487 and it seems to match what I were experiencing when inserting image. \n. For anyone interested, I found out the root of the problem.\nThis problem only happens when Reddit Enhancement Suite (RES) extension is running. \nIt doesn't happen when I disable RES, or when I don't have a Reddit tab open. \n. For anyone interested, I found out the root of the problem.\nThis problem only happens when Reddit Enhancement Suite (RES) extension is running. \nIt doesn't happen when I disable RES, or when I don't have a Reddit tab open. \n. ",
    "mmacfadden": "Hi.  Thanks for the good work on this project.  I have two questions and one comment.\n1. Is there some bug or feature request that discusses this?  I searched the open and closed issue for \"cursor\" before submitting this, and didn't see anything. I try not to submit things that have already been discussed.  If I missed it, apologies. If you could direct me there to read up on the decision that would be great.\n2. Is this something you would accept a simple pull request for that maintains backwards compatibility? This seems like something I could implement / test fairly easily.\n3. As for the use case.  I am creating a new module for Quill (that I would be happy to contribute back , assuming I get it to work well enough) that is much like the multi-cursor module, but for selection.  In other words it shows multiple selection.  If a user is dragging the mouse to select, I would like to capture the selection range, and the location of the cursor, so that in the other editor I can render the selection and cursor position as it is occurring.  When drag selecting, on point of the selection is stationary (the anchor) and the other point moves (the focus).  I want to make sure the cursor is rendered at the focus so it moves around with the change in selection.  Essentially, I am re-injecting the cursor position using the multi-cursor and the selection with my new module.  Unfortunately, I can't capture both the cursor and the selection at the same time.\nAgain, I would be happy to contribute a PR for both the requested functionality, as well as the new module I am making if it makes sense.\n. Thanks.  How about I play around with a couple work arounds.  I may try the dom api, as you suggest, or try adding something simple to Quill in a fork.  Worst case, if I find a good workaround, I could post in here for other people to reference.  Best case, I come up with something simple in Quill that is worth a PR.\n. I am interested in this as well.  We don't have a ton of cycles this month, but we might be interested in contributing to bringing this module back, if it hasn't been picked up yet.\n. @benbro Do you need any help?\n. @benbro I will take a look...\n@nateps Agree.  I think cursor, selection, and authorship make a nice collaborative experience.  I am completely willing to look at all three.  I am finishing up a few more tasks over the next week or two, but then I this becomes high on my priority list.  Willing to dig in myself or help others.\n. ",
    "quill-bot": "Closing inactive issue.\n. Closing from inactivity.\n. Closing from inactivity.\n. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#bug-reports\n. Closing from inactivity.\n. Closing inactive issue.\n. This feature request lacks enough detail to be actionable. Please follow the Contributing.\n. Closing inactive issue.\n. Closing inactive issue.\n. Closing inactive issue.\n. Please follow the Contributing guide.\n. Please follow the Contributing guide.\n. This Issue lacks enough detail to be actionable. Please follow the Contributing guide.\n. Closing inactive issue.\n. Closing inactive issue.\n. Closing inactive issue.\n. Closing inactive issue.\n. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Closing inactive Pull Request.. Closing inactive Pull Request.. Closing inactive issue.. Closing inactive issue.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Closing inactive issue.. Closing inactive issue.. Closing inactive pull request.. Closing inactive pull request.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive pull request.. Closing inactive pull request.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Closing inactive issue.. Closing inactive issue.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Closing inactive Pull Request.. Closing inactive PR.. Closing inactive PR.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. Closing inactive issue.. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. Closing inactive issue.. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md#feature-requests. https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md. https://github.com/quilljs/quill/blob/master/.github/CONTRIBUTING.md#bug-reports. ",
    "felipeochoa": "@jhchen I've hit this problem and have another use-case. I'm using Quill as one input of several in a table. I'd like to bind the arrow keys to navigate across inputs, but without knowing which way the selection is pointing, I can't do that. E.g, if you're in cell (2,2) with selection {index: 0, length: 2} and hit ArrowLeft, do you jump to cell (2, 1)? Obviously this is not the full solution to using tables in Quill (e.g., I don't handle multi-cell selection), but I think it's an important first step.\nWould it really add that much complexity to have a 'direction' prop on Selection?. Here's an example of handling @ mentions with a pop-up autocompletion list: codepen\n. I've made some changes to the above, latest can be found in this gist. It was a quick copy-paste from my code, some some bits may be slightly off, but should be 99% there.\n@guillaumecodet I submitted #1091 a while ago, but unfortunately that got rejected. Without that, there's really no good way of binding in keyboard-independent manner. So anyone who has @ somewhere other than Shift+2 is going to be confused :disappointed: . @jhchen event.key is now at 85%. Perhaps we can move towards now?. ",
    "fraywing": "Created a better implementation, I think more on the lines of what you were suggesting. Having the empty state does simplify things a lot. \n. :+1: \n. :+1: \n. Yeah, I was trying to decide on that. This makes the most sense :+1: \n. Gooo to know, changed\n. Yeah, I moved this to the constructor since the method needs to be called on init as well\n. It would, however it all depends on your IE support. http://caniuse.com/#feat=classlist No version of EI uses the boolean toggle arg as of yet, so there still needs a little bit of logic somewhere to decide whether to add/remove the class. \n. Would this be better suited in editor.js and called from quill? \n. ",
    "yuchentseng": "I found that the issue is the cursor will moves at the beginning of the line whenever I press \"any toolbar action\". \n. ",
    "Vadorequest": "@yuchentseng Yeah, it is what I'm experiencing as well, excepted that I'm also using a custom toolbar.\nAnyway, it would be nice to have a solution for this, for a better user experience.\n. What do you mean ?\nThe undo/redo just changes the text value. It doesn't do any text selection.\n. Could you show me where Quill does this? Because it seems we tamper with it (I don't see why we would loose the cursor otherwise), so I'd like to implement it and that would be great to have an example. ;)\n. Thanks, we solved it by re-selecting the text on shouldComponentUpdate (React) . :)\n. Thanks for the fast answer :)\n. Solution found: (Find a node, which may be a link, or the text between two links, or an entire paragraph)\n```\n_getActiveNodeRange: (range) ->\n    [node, offset] = @editor.editor.doc.findLeafAt(range.start, true)\n    start = range.start - offset\n    end = start + node.length\n\n    return start: start, end: end\n\n```\nis it possible to return a real range? This just return an object without method, while the usual range has methods like isCollapsed.\nI didn't find any solution to find the current word though, haven't spend much time on it yet.\n. Thanks!\nAny hint about selecting a word when the cursor in inside that word but\nnothing is selected? (range.start = range.end) I'm able to select a whole\nnode but I wonder if there is an easy way to get the active word itself.\nI looked -quickly-at the source code but I didn't find anything like that.\nEdit: Oh, I didn't see you actually answered to that question. Thanks again.\n2016-06-22 2:08 GMT+02:00 Jason Chen notifications@github.com:\n\nClosed #761 https://github.com/quilljs/quill/issues/761.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/761#event-699831243, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/ADoY4ha-Qz652UH5v9UvcAG16pYHFRVAks5qOHz_gaJpZM4I6o3D\n.\n\n\nCordialement,\nM. Ambroise Dhenain.\n. ",
    "yachtingchen": "Here is how the problem looks like:\nexpected behavior: (recording from Chrome)\n\nactual behavior: (recording from IE11)\n\nSteps to reproduce the problem.\n\ngo to http://quilljs.com/\nSelect all text in the editor and delete\nType \"5j/ \" and press Enter for Chinese character \"\u4e2d\"\n\nEnvironment: Windows 8\nInput method: Chinese (Traditional, Taiwan) Microsoft Bopomofo. Here is how the problem looks like:\nexpected behavior: (recording from Chrome)\n\nactual behavior: (recording from IE11)\n\nSteps to reproduce the problem.\n\ngo to http://quilljs.com/\nSelect all text in the editor and delete\nType \"5j/ \" and press Enter for Chinese character \"\u4e2d\"\n\nEnvironment: Windows 8\nInput method: Chinese (Traditional, Taiwan) Microsoft Bopomofo. ",
    "ximing": "The 56 version of the chrome can reproduce this bug\n\n\n. ",
    "eric-leihe": "After some digging and testing. I found at least in Chrome this problem is caused by Evernote Extension. I have tried safari without any issue. \nBut in Chrome if I enable Evernote extension the issue reproduced. I have some other Chrome extensions such like grammarly which will live check my typing but only Evernote leads to this problem. I don't know what Evernote extension do to the input but it apparently intercepts the input content and not properly passes it down to next layer.  \nBut when I tested in IE Edge another wired problem happened. When I input Chinese at the beginning of an empty line, the first character I typed will be directly treated as English character and placed into the cursor position. Thie behavior breaks my normal Chinese Pinyin input, change my consecutive input into 1 leading English character and some Pinyin characters following.\nSee the attached screen shot. I am typing shurufa which is Pinyin of Chinese \"\u8f93\u5165\u6cd5\", but I got \"s + hurufa\".\n\nIf only input one character at the line beginning it will not trigger Windows Chinese Input Widget. But except this position, you can smoothly input Chinese without any problem. So apparently this issue was caused by some special processing at line beginning.\nAnother testing, it seems quilljs cannot well handle new line when working with Chinese input. When I input Chinese at the last empty line the cursor jumps back to the first empty line.\n\nBy the way, I am using Reactjs + quilljs npm package.\nSome JS error may give you some clues:\n\nI record a video of the issue.\nhttps://www.youtube.com/watch?v=yfHQZPb8d8k\n. ",
    "battuashwik": "The rendering is a problem if you give editor.setContents directly an array of operations. The following fiddle will demonstrate the speed of the setContents for large operations (500 operations takes around 3 seconds and 1000 operations take around 10 seconds).\nhttps://jsfiddle.net/battuashwik/ykcLmLjy/\nThe solution to this is compose the deltas into one either on the client side before applying or server side before storing. The following fiddle demonstrates the performance with composed operations which takes 20 milliseconds to set. \nhttps://jsfiddle.net/battuashwik/hf047xo7/\nQuill uses rich-text (https://github.com/ottypes/rich-text) for deltas but unfortunately doesn't expose the Delta module. I exported a browserified version of this to use in the fiddle. Feel free to clone and use it.\n. It is not exactly a single operation as new line is treated as a new operation and i see the problem in your case. Just updated the fiddle to demonstrate your exact case which takes around 600 ms which is a lot.\nhttps://jsfiddle.net/battuashwik/1gds5ym9/ . To verify this you can print the result from editor.getContents and check the ops array. You will see a series of operations rather than one.\nOne alternative solution i can think of is doing lazy loading of operations. I updated the second fiddle https://jsfiddle.net/battuashwik/hf047xo7/ to demonstrate that. This way atleast the browser will not freeze and hence better UI experience. You can also implement batching of operations instead of using setTimeout on every operation. Unfortunately to get the right number for batching you need to run some tests to figure out what is the exact threshold that updateContents starts to perform slow.\nNote: Increase the number from 500 to see better comparison. \n. ",
    "Aaronik": "I have a setup with many operations -- I have a 27k character interview and have my delta set up to be ~5000 operations. This is a lot, I know. And the performance is very slow -- on a slower machine, I have .setContents(delta) on chrome taking about a minute (faster machine it taking about 5 seconds, and these are the extremes), and on Firefox essentially never loading (taking up to 20 minutes) and on my fast machine ~1 minute. Clearly this is untenable. I did find a nifty trick to speed the heck out of Firefox though. Basically you just unmount the quill node, set your contents, then mount it again. This makes no difference in chrome, but in Firefox it speeds it up by over 40x! The same 20 minute task on the slow firefox machine now takes 15 seconds! I have the solution written out in a little more depth here: https://github.com/quilljs/quill/issues/1130.. I've been having the same issues with pasting with Firefox. This goes both for pasting HTML and for using .setContents(delta). Performance is not ideal with Chrome, but it's completely unacceptable with Firefox for me, sometimes taking as long as 90 seconds for a 27k character blob on slower machines.\nBut I found a nice solution that makes firefox lightening fast.\nThe idea is this: remove the root from the DOM, then use pasteHTML or setContents, then add the root back to the DOM. For me this code looks like this:\njs\nconst parent = Quill.root.parentElement;\nparent.removeChild(Quill.root);\nQuill.setContents(delta);\nparent.appendChild(Quill.root);\nDoing that alone has increase performance in Firefox for me by 10 fold!. ",
    "Thileepan": "@m1kelynn Did you managed to solve the issue with multiple editors with single toolbar in your case? Eager to know if something you could share.. ",
    "TheWizz": "@mrgrimmig, I have a hard time following what you did to solve this problem. I need to do something similar, and would really appreciate some clarification or a workinf code example, if possible.\nThanks!\n-JM. Perhaps some inspiration could be taken from the TextAngular editor, which has this feature.\nhttps://github.com/textAngular/textAngular\nSee specifically \"a toolbar can be linked to multiple editors\" in the accompanying wiki:\nhttps://github.com/textAngular/textAngular/wiki/Customising-The-Toolbar\n-JM. Has there been any progress on this feature? I would really like to switch to Quill from what I'm using today (TextAngular). Anything I can do to help out moving this forward?\n-JM. I'm usinbn AngularJS, so unfortunately I can't use your wrapper. But I think the idea of separating the toolbar from the editor (at least as an option) is well thought out. Hopefully, we'll see this as part of Quill itself in a not-too-distant future, since this is really something that ought to be done independently of any specific framework wrapper.. ",
    "dkirchhof": "Sorry for my weird response.\nActually i'm using polymer and bind current formats to the toolbar to update the buttons autmatically, but i've made a small example without any dependencies to clarify my answer.\n```html\n<!DOCTYPE html>\n\n\n\n\n<style>\n\n    .active {\n        background: green;\n    }\n\n</style>\n\n\n\n<button id=\"bold\" onclick=\"onBoldClick()\">Bold</button>\n\n<div id=\"editor1\">\n    <p>Hello World!</p>\n    <p>Some initial <strong>bold</strong> text</p>\n    <p><br></p>\n</div>\n\n<div id=\"editor2\">\n    <p>Hello World!</p>\n    <p>Some initial <strong>bold</strong> text</p>\n    <p><br></p>\n</div>\n\n<script>\n\n    var currentEditor; // selected / focused editor\n    var currentFormats; // save the current formattings\n\n    createEditor(\"#editor1\");\n    createEditor(\"#editor2\");\n\n    function createEditor(selector)\n    {\n        let quill = new Quill(selector, { });\n\n        quill.on(\"editor-change\", (eventName, ...args) =>\n        {\n            currentEditor = quill;\n            updateButtons();\n        });\n    }\n\n    // get current formattings to style the toolbar buttons\n    function updateButtons()\n    {\n        if(currentEditor.getSelection())\n        {\n            currentFormats = currentEditor.getFormat();\n\n            if(currentFormats.bold)\n            {\n                bold.classList.add(\"active\");\n            }\n            else\n            {\n                bold.classList.remove(\"active\");\n            }\n        }\n    }\n\n    // if selected text is bold => unbold it - if it isn't => bold it\n    function onBoldClick()\n    {\n        if(!currentFormats || !currentEditor)\n        {\n            return;\n        }\n\n        if(currentFormats.bold)\n        {\n            currentEditor.format(\"bold\", false);\n        }\n        else\n        {\n            currentEditor.format(\"bold\", true);                \n        }\n    }\n\n</script>\n\n\n\n```. ",
    "benjismith": "I'd love to talk about my use-case here as well...\nI'm using Quill as the text-editing component of a word-processor, which may have multiple documents onscreen at the same time. But all the instances should share the same toolbar. For example, here's a screenshot containing three Quill instances, one for the main document, and two containing margin comments:\n\nWhenever the user clicks from one editor to another, the toolbar should update itself to reflect the active/enabled/disabled status of each button. And any toolbar clicks should be directed to the currently-focused editor instance.\nAlthough some of the toolbar buttons correspond with Quill formatting functions, there are other toolbar buttons for non-Quill functionality, and those should continue to be enabled even when there are no active Quill editors onscreen at all.\nRight now, I'm implementing my own toolbar, completely separate from Quill, and managing the active/enabled/disabled state of all the toolbar buttons myself. But it's pretty ugly, and I'd love to help Quill address this use case a little better.\nThank you for an incredible open-source project! I appreciate all your hard work.. I don't think we need to change the API very much. The only things I really need are:\n\nThe ability to attach and detach Quill from additional DOM containers.\nThe ability to retrieve an editor instance by DOM selector.\nNew events for editor attachment and detachment, as well as focus and unfocus between editor instances.\n\nHere's a quick example of creating the root Quill object, registering event handlers, attaching a few editors, selecting them for focus, and detaching from them again.\n```\n    let quill = new Quill({ toolbar : \"#toolbar\" });\nquill.on('editor-attach', function(e) { console.log(\"attached to:\" + e.getEditorId());\nquill.on('editor-detach', function(e) { console.log(\"detached from:\" + e.getEditorId());\nquill.on('editor-focus', function(e) { console.log(\"focused:\" + e.getEditorId());\nquill.on('editor-unfocus', function(e) { console.log(\"unfocused:\" + e.getEditorId());\n\nquill.attach('#editor-a');\nquill.attach('#editor-b');\n\nvar editorA = quill.getEditorInstance('#editor-a\");\neditorA.focus();\n\nvar editorB = quill.getEditorInstance('#editor-b\");\neditorB.focus();\n\nquill.detach('#editor-b');\nquill.detach('#editor-a');\n\n```\nThe current Quill constructor, which accepts an editor ID...\nlet quill = new Quill(\"#editor\", { toolbar : \"#toolbar\" });\n...could continue to be supported, as a shorthand for the more verbose version:\nlet quill = new Quill({ toolbar : \"#toolbar\" });\n    quill.attach(\"#editor\");\nIt might also be nice to declare which toolbar buttons are enabled and disabled for each editor instance, possibly with something like this:\nlet quill = new Quill({ toolbar : \"#toolbar\" });\n    quill.attach(\"#editor\", { enabled : [ \"#button-bold\", \"#button-italic\" ] });\nHowever, I'd also be happy to add the enable/disable logic to my own event-handler code for the focus and unfocus events.. I totally agree. I had to roll my own renderer...\nThe common suggestion of using JSDOM is too slow for my use-case (my custom renderer, which uses mustache templates, is more than 100x faster), and the 3rd-party renderers are all either incomplete or broken in some way.\nI really hope offline (non-DOM-based) rendering is included in Quill 2.0.. This reinforces my instinct that the new Quill({ toolbar : \"#toolbar\" }) constructor should only create an editor-factory, not a full-blown editor instance... For more details, take a look at my responses to this issue:\nhttps://github.com/quilljs/quill/issues/633#issuecomment-327034759\nBut expanding upon that example, instead of registering blot classes to the top-level Quill module namespace, they should be passed as a schema when attaching to a particular editor instance. For example:\n```\nlet articleSchema = [ SomeArticleBlot, SomeOtherArticleBlot ];\nlet commentSchema = [ SomeCommentBlot, SomeOtherCommentBlot ];\nlet editorFactory = new Quill({ toolbar : \"#toolbar\" });\neditorFactory.attach({\n  container : '#article-abc',\n  schema : articleSchema\n});\neditorFactory.attach({\n  container : '#comment-123',\n  schema : commentSchema\n});\n```. Niiiiice. Thank you!!. I've been having the same problem lately. I need to redesign my handling of blockquotes to allow nested paragraphs. Can you provide any guidance for how to do that?. @briantsai-rep If you post a minimal example, I'll take a look and see if I can help.. Ahhhh yes, now I see...\nDo you think it would be possible to change the lifecycle so that the selection object is always updated before the text-change event fires?\nHere's one small example of what I'm building with this...\nhttps://codepen.io/benjismith/pen/jGQYQY\nIn this example, I've created an editor that replaces standard (straight) apostrophes and quotation marks with curly quotes, while still letting the user insert straight quotes by invoking CTRL-' and CTRL-\"\nIf you play around with this example a little bit, you can see that the replacements don't work when the quotation character is at the beginning of a new line:\n```\nTHIS WORKS:\nJohn smiled and said \"hello.\"\nTHIS DOESN'T WORK:\n\"Oh, it's you,\" she replied.\n```\nThis is just a toy example of a more generalized auto-correct system, which lets users define their own custom auto-correct dictionaries (which might contain hundreds of entries). So I can't just hard-code a few replacements into the keyboard module. The mechanism I'm using now is actually working really nicely, except for the problem with those pesky newlines.\nSo, if it's possible to enforce an accurate selection object before the text-change event fires, that'd be great. Otherwise, I'm open to suggestions for an alternate implementation.. Based on your feedback I took a closer look at the docs for the text-change event, which say:\n\nChanges to text may cause changes to the selection (ex. typing advances the cursor), however during the text-change handler, the selection is not yet updated, and native browser behavior may place it in an inconsistent state. Use selection-change or editor-change for reliable selection updates.\n\nSo I thought I should try listening for the editor-change event instead of the text-change event, like this:\nlet quill = new Quill('#editor-container');\nquill.on(Quill.events.EDITOR_CHANGE, function(eventName, ...args) {\n  if (eventName === Quill.events.TEXT_CHANGE) {\n    let selection = quill.getSelection();\n    if (selection !== null && selection.length === 0) {\n      console.log(\"SELECTION INDEX: \" + selection.index);\n    }\n  }\n});\nBut the results were exactly the same as my original test:\nSELECTION INDEX: 0\nSELECTION INDEX: 2\nSELECTION INDEX: 3\nSELECTION INDEX: 3\nSELECTION INDEX: 4\nSELECTION INDEX: 6\nSELECTION INDEX: 7\nSELECTION INDEX: 7\nSELECTION INDEX: 8\nSELECTION INDEX: 10\nSELECTION INDEX: 11\nSELECTION INDEX: 11\nYou can try it out yourself here: https://codepen.io/benjismith/pen/OxwoaE\n. Does this count as a bug? Or would you consider this working-as-designed? I'm trying to decide how to move forward with this feature on my side, and your guidance would be really helpful.... Sounds good. Using setTimeout works just fine for my use case. Thanks again for your help!. I managed to create a workaround by subclassing the clipboard module, and I thought I'd share it here with anyone else encountering the same issue...\n```\nlet Delta = Quill.import('delta');\nlet Clipboard = Quill.import('modules/clipboard');\nclass TabMitigatingClipboard extends Clipboard {\n  convert(html = null) {\n    var delta = super.convert(html);\n    if (\n      delta.ops.length > 0 &&\n      delta.ops[0].hasOwnProperty(\"insert\") &&\n      delta.ops[0].insert.charAt(0) === \"\\t\"\n    ) {\n      delta = delta.compose(new Delta().delete(1));\n    }\n    return delta;\n  }\n}\nQuill.register('modules/clipboard', TabMitigatingClipboard, true);\n```\nOf course, this will create false-positives for any clipboard event pasting a legitimate TAB character into the document, but that's a relatively rare event in my application, so the benefits outweigh the costs. Others' mileage may vary.... 100% agree that this is the big missing piece of Quill...\nI ended up having to write my own renderers from scratch, because the JSDom solution was too slow for my needs, the third-party renderers are all broken in different ways, and I sometimes need to generate different flavors of HTML (inline styles, vs classes, etc), depending on different rendering contexts (e.g., viewing in a browser, vs exporting an EPUB).. ",
    "fmpenz": "Would it be possible to make multiple editors work if created with the same toolbar?\n`var quill1 = new Quill('#editor1', {\n  modules: { toolbar: '#toolbar' },\n  theme: 'snow'\n});\nvar quill2 = new Quill('#editor2', {\n  modules: { toolbar: '#toolbar' },\n  theme: 'snow'\n});`\n. Would it be possible to make multiple editors work if created with the same toolbar?\n`var quill1 = new Quill('#editor1', {\n  modules: { toolbar: '#toolbar' },\n  theme: 'snow'\n});\nvar quill2 = new Quill('#editor2', {\n  modules: { toolbar: '#toolbar' },\n  theme: 'snow'\n});`\n. If you click a button in the toolbar only the editor which lastly had focus should be modified.\nThe Shared Toolbar feature in CKE shows how it could be done.. If you click a button in the toolbar only the editor which lastly had focus should be modified.\nThe Shared Toolbar feature in CKE shows how it could be done.. ",
    "sconix": "We would love to see this feature as well. For now I have made an Angular wrapper library (ngx-quill-wrapper) that allows this, but the way it handles it is bit hacky and definitely not optimal.. ",
    "pppglowacki": "Would love to see this feature as well. At the moment I have to create a toolbar for every Quill editor as trying to use a single toolbar leaves the previous editor toolbar event handlers attached. After hours of trying to \"hack it out\", I finally created an editor + toolbar for every area I wanted to allow editing.\nI was also wondering if I can use the addContainer API method, but the docs are not specific enough for me to quickly understand what it does.\nOverall, Quill is amazing btw :) . Would love to see this feature as well. At the moment I have to create a toolbar for every Quill editor as trying to use a single toolbar leaves the previous editor toolbar event handlers attached. After hours of trying to \"hack it out\", I finally created an editor + toolbar for every area I wanted to allow editing.\nI was also wondering if I can use the addContainer API method, but the docs are not specific enough for me to quickly understand what it does.\nOverall, Quill is amazing btw :) . I see this topic has not moved, too bad. Any example on how to use the addContainer API method?. I see this topic has not moved, too bad. Any example on how to use the addContainer API method?. I have been working with Quill for the past 6 months while using it in a product I am building. I have found that the documentation is ok, but lacks better examples.\nWith regards to this topic, I have many boxes and only one toolbar. My goal was to have a Quill editor in the active box and allow the toolbar to control the content of the active box. Here are my findings:\n1. Initialize a Quill editor inside each box with the same toolbar selector class for each\nvar editors = [];\nfor (var x = 0; x < len; x ++) {\n   editors.push(new Quill(document.getElementById('box-' + x), {\n       modules: {\n           toolbar: {\n               container: '.toolbar',\n           },\n       },\n   }));\n}\nThis failed because the toolbar now had an event attached for each Quill object, which resulted in having many events per action. This became difficult to manage and caused many technical issues when switching between boxes to edit the content.\n2. Same as point 1, except now create a toolbar for each box and display only the active box toolbar. For each Quill editor use the unique toolbar.\nvar editors = [];\nfor (var x = 0; x < len; x ++) {\n   editors.push(new Quill(document.getElementById('box-' + x), {\n       modules: {\n           toolbar: {\n               container: '.toolbar-' + x,\n           },\n       },\n   }));\n}\nThis worked as expected but it resulted in a very DOM heavy structure, especially if you have lots of actions in your toolbar or lots of Quill instances. \nYou have 2 options: \n- generate all the toolbars server side and send them to the frontend, which in my case, resulted in heavy page load.\n- render the toolbars dynamically on the frontend and inject them in to the DOM. Lots of memory overhead when working with 20+ Quill instances.\nDuring my testing I used Angular and Vue to test the performance of rendering the toolbars dynamically. I noted a rendering performance hit when I was working with 20+ Quill instances.\n3. Initialize a Quill editor inside the active box only and destroy the previous editor + one toolbar\nThis is the solution I am using today and it results in the best performance and a some what clean solution. When the active box changes, I get the Quill instance content, remove the previous Quill events + instance, and I update the DOM as the HTML created by the editor is not removed automatically.\nI am using this quill delta to html addon \n```\nif (window.editor) {\n    //Get the content\n    var content = '';\n    if (window.editor.getLength() > 1) {\n        var delta = window.editor.getContents(); //store globally\n        var converter = new QuillDeltaToHtmlConverter(delta.ops, {});\n        var html = converter.convert();\n        if (typeof html !== \"undefined\" && html !== null) {\n            content = html;\n        }\n    }\n//remove any [on events](https://quilljs.com/docs/api/#events) you attached to the Quill instance\n\n//remove Quill instance\nwindow.editor = undefined;\n\n// clean DOM and set content\ndocument.getElementById('previousBoxId').classList.remove('ql-container');\ndocument.getElementById('previousBoxId').innerHTML = content;\n\n}\n//create new quill instance\nwindow.editor = new Quill(...)\n//set the editor contents (\"//store globally\" comment above)\nif (editorContent) {\n    window.editor.setContents(editorContent)\n}\nwindow.editor.focus();\n//initialize any on events if you want\n```\nThe downside of Quill not managing multiple instances of the editor with a single toolbar is not a big problem, but it does require you to do the research/testing + add the logic yourself, which can be a hassle.\nI hope someone finds this useful.. Did anyone get this working? I included the imports and then registered them but in the Quill editor I still get classes. Any help would be appreciated.. ",
    "umairrazzaq": "Yes you're right, but I've managed to do so with TextAngular, since i need it for angularjs project.. ",
    "mbarwick83": "Okay, def not going to re-invent the wheel here. Not even sure what \"deltas\" are. I'm not familiar with this library. When is 1.0 coming in beta?\n. Interesting. Would you have any code you've used that I could play with?\n. Yeah, that's my question as well, with I was about to ask. Messing about with deltas...seems text-change fires for each key press.\n. if insert length is > 1? Seems a bit hacky though.\n. I see. Good point. I just tested and you're right. it can pick up 2 characters when I \"speed typed\".\n...hmm.\n. Scratch that, even more if I hit multiple keys at once. I got up to 4.\n. No, my quill would include VERY basic styling; bold/italic/strikethrough/highlights/colors, etc. Fonts, size, and any other styling copied from a paste of another site - wouldn't work.\n. Thanks, appreciate it. Let me see what I can whip up. Otherwise, back over to TinyMCE I go \ud83d\udc4e :(\n. I know, I know...\n. ",
    "brothertao": "maybe, ctrl+shift+v could help u\n. maybe, ctrl+shift+v could help u\n. ",
    "clementmas": "For future reference, I found the answer to this question here: https://github.com/quilljs/quill/issues/1184#issuecomment-384935594. ",
    "Katona": "Without going into the details, we would like to handle the paste our own before it gets to Quill, because we are applying some preformatting on the pasted text.\n. Without going into the details, we would like to handle the paste our own before it gets to Quill, because we are applying some preformatting on the pasted text.\n. ",
    "jiangli373": "sorry,  I forget to supply that\nbrowser: chrome 50.0.2661.86 (64-bit)\nos: mac  10.11.3 \n. thank you for your reply.\nI disable all browser extensions. \nin http://quilljs.com/ \nFirst i set body's color with red like below scrrenshot\n\nthen i change word's color except black color all did work \n\nwhen i click black color ,the 'built'  didn't change color ,open chrome dev tools, i found the element did't have color style\n\n. ",
    "adamtobey": "I ran into a similar issue with default font color using Bootstrap with a white font and dark background. Because the background of the editor was white, I wasn't able to see the text and thought it wasn't working initially. Once I realized the problem it was an easy fix of course. I understand this isn't technically a bug since it seems to be intended behavior, but I just thought I'd give my input. Maybe a little note in the basic documentation about this would be nice. \nThanks!\n. I ran into a similar issue with default font color using Bootstrap with a white font and dark background. Because the background of the editor was white, I wasn't able to see the text and thought it wasn't working initially. Once I realized the problem it was an easy fix of course. I understand this isn't technically a bug since it seems to be intended behavior, but I just thought I'd give my input. Maybe a little note in the basic documentation about this would be nice. \nThanks!\n. ",
    "JMacLulich": "Is it actually possible to get tooltips?? \nWe've had the same request, it would be great to be able to attach tooltips to each of the tools in the toolbar.\n. @lordenzo I've run into the same problem, I'm getting <p> tags inserted around every <br/> tag which means the spaces between sections of text is 3 or 4x larger than it was in the original content.\nI'm having a bit of trouble understanding how to stop this behaviour from happening, do you mind copying and pasting the code you added to stop <p> tags here so I can take a look? \nKind regards, Jason.\n. ",
    "rquast": "@jhchen You were right. This example tripped me up a bit when learning about quill. I just realized that the data-toggle is a bootstrap thing and you're passing in the html (with the tooltip data-toggle) rather than making quill generate it in the html.\nTo deal with not having to write custom html for the toolbar buttons, I did this:\n```\n    let showTooltip = (el) => {\n      let tool = el.className.replace('ql-', '');\n      if (tooltips[tool]) {\n        console.log(tooltips[tool]);\n    // TODO: add your tooltip code here.\n  }\n};\n\nlet tooltips = {\n  'bold': 'Bold',\n  'italic': 'Italic'\n};\n\nlet toolbarElement = document.querySelector('.ql-toolbar');\nif (toolbarElement) {\n  let matches = toolbarElement.querySelectorAll('button');\n  for (let el of matches) {\n    showTooltip(el);\n  }\n}\n\n```. @jhchen You were right. This example tripped me up a bit when learning about quill. I just realized that the data-toggle is a bootstrap thing and you're passing in the html (with the tooltip data-toggle) rather than making quill generate it in the html.\nTo deal with not having to write custom html for the toolbar buttons, I did this:\n```\n    let showTooltip = (el) => {\n      let tool = el.className.replace('ql-', '');\n      if (tooltips[tool]) {\n        console.log(tooltips[tool]);\n    // TODO: add your tooltip code here.\n  }\n};\n\nlet tooltips = {\n  'bold': 'Bold',\n  'italic': 'Italic'\n};\n\nlet toolbarElement = document.querySelector('.ql-toolbar');\nif (toolbarElement) {\n  let matches = toolbarElement.querySelectorAll('button');\n  for (let el of matches) {\n    showTooltip(el);\n  }\n}\n\n```. Please excuse my ignorance on this topic, but I haven't been able to find an answer for this anywhere else yet.\nIf a malicious user were to put html inside of a delta json (say in a sentence), would the html be displayed on the front-end when read back from the server? In that case, do we have to build a sophisticated sanitizer on the backend to parse the json delta format before saving? Or does quill filter out this stuff automatically? I don't fully understand the implications of something like dangerouslyPasteHTML ... does that mean deltas can contain html, or is there a special node in the delta for this? It would help to know this before using quill for rendering, or converting to html and sanitizing it server (or client) side display. Need more info.. Please excuse my ignorance on this topic, but I haven't been able to find an answer for this anywhere else yet.\nIf a malicious user were to put html inside of a delta json (say in a sentence), would the html be displayed on the front-end when read back from the server? In that case, do we have to build a sophisticated sanitizer on the backend to parse the json delta format before saving? Or does quill filter out this stuff automatically? I don't fully understand the implications of something like dangerouslyPasteHTML ... does that mean deltas can contain html, or is there a special node in the delta for this? It would help to know this before using quill for rendering, or converting to html and sanitizing it server (or client) side display. Need more info.. @benallfree if something malicious was sent back from the server, and you used quill to render the delta, then if quill sanitized that on the frontend, then you wouldn't have to worry? It's just that otherwise, you have to sanitize all of strings inside of the delta json on the server side. That's not straight forward.. means you have to hard code the format of the delta json into something that can sanitize it on the server side. Either that or render html (getHTML) before sanitizing on either client or server sides. I don't believe it's necessarily wrong for a database to store XSS code. It's up to the developer to prevent the browser from parsing that code (be it before it goes into the database, or before it gets sent, or before it gets displayed).. @benallfree if something malicious was sent back from the server, and you used quill to render the delta, then if quill sanitized that on the frontend, then you wouldn't have to worry? It's just that otherwise, you have to sanitize all of strings inside of the delta json on the server side. That's not straight forward.. means you have to hard code the format of the delta json into something that can sanitize it on the server side. Either that or render html (getHTML) before sanitizing on either client or server sides. I don't believe it's necessarily wrong for a database to store XSS code. It's up to the developer to prevent the browser from parsing that code (be it before it goes into the database, or before it gets sent, or before it gets displayed).. @benallfree starting to think the same. It would be good if JSON Schema was used so you could validate the structure both client and server side as well as check for xss using regex in the schema. Without something like that, you can't trust the integrity. Like you said, rendering the HTML on the server side and running it through a strong sanitizer is also another layer to prevent xss coming through.\nFortunately, my use case is for site admins, so they are less likely to muck things up or try any XSS (hopefully).\nedit like what this guy did (but include xss checks).. https://github.com/dnephin/quill-data-format. @benallfree starting to think the same. It would be good if JSON Schema was used so you could validate the structure both client and server side as well as check for xss using regex in the schema. Without something like that, you can't trust the integrity. Like you said, rendering the HTML on the server side and running it through a strong sanitizer is also another layer to prevent xss coming through.\nFortunately, my use case is for site admins, so they are less likely to muck things up or try any XSS (hopefully).\nedit like what this guy did (but include xss checks).. https://github.com/dnephin/quill-data-format. @jhchen so dangerouslyPasteHTML converts the html to the quill document model and saves no html? If it does that, and there is nowhere in quill that does an innerHTML when it restores a document, then all seems okay except for what you mentioned.. @jhchen so dangerouslyPasteHTML converts the html to the quill document model and saves no html? If it does that, and there is nowhere in quill that does an innerHTML when it restores a document, then all seems okay except for what you mentioned.. It's caused by the .ql-out-bottom style that will hide the dialog automatically if it extends past the editor bounds. As a workaround, you can override it with this in your own css:\n.ql-out-bottom {\n  visibility: initial !important;\n}\ufeff. It's caused by the .ql-out-bottom style that will hide the dialog automatically if it extends past the editor bounds. As a workaround, you can override it with this in your own css:\n.ql-out-bottom {\n  visibility: initial !important;\n}\ufeff. how do we adjust the size of that iframe??. how do we adjust the size of that iframe??. @artaommahe Yeah I think I will have to redefine it. Also think I need to plug in my own dialogs for configuration. It's not practical for an end user without the ability for them to resize it.. @artaommahe Yeah I think I will have to redefine it. Also think I need to plug in my own dialogs for configuration. It's not practical for an end user without the ability for them to resize it.. I understand that you can code this yourself. Where is the GUI option for that without having to code a custom solution?. I understand that you can code this yourself. Where is the GUI option for that without having to code a custom solution?. Sorry, specifically: Create a video selection properties popup that allows a user to change the size of the embedded iframe.. Sorry, specifically: Create a video selection properties popup that allows a user to change the size of the embedded iframe.. No longer interested in debating simple issues.. This is a must for any modern website. One option is to upload raster images at twice the resolution, but set the size to half.. or alternatively use media queries for regular and high res images (@media all and (min-device-pixel-ratio : 2)), etc, etc. https://www.html5rocks.com/en/mobile/easy-high-dpi-images/. This is a must for any modern website. One option is to upload raster images at twice the resolution, but set the size to half.. or alternatively use media queries for regular and high res images (@media all and (min-device-pixel-ratio : 2)), etc, etc. https://www.html5rocks.com/en/mobile/easy-high-dpi-images/. It means that images you upload don't display in high resolution on retina and high dpi displays. They look pixelated (unprofessional). If you want to learn more about this, wysiwyg editors such as webflow have this as a feature when you upload an image. Since an end user can't adjust any of the properties of the image that gets displayed, workaround code is needed.\nIt is something that can and should be implemented. You can implement it on all browsers (IE11 included - https://msdn.microsoft.com/en-us/library/dn265030(v=vs.85).aspx).. It means that images you upload don't display in high resolution on retina and high dpi displays. They look pixelated (unprofessional). If you want to learn more about this, wysiwyg editors such as webflow have this as a feature when you upload an image. Since an end user can't adjust any of the properties of the image that gets displayed, workaround code is needed.\nIt is something that can and should be implemented. You can implement it on all browsers (IE11 included - https://msdn.microsoft.com/en-us/library/dn265030(v=vs.85).aspx).. An educational video on it: https://www.youtube.com/watch?v=yzLHswkUXJY. An educational video on it: https://www.youtube.com/watch?v=yzLHswkUXJY. \nOn a mac (with retina.. most macs these days), or a surface 4 pro (and a few other PCs), the left image is what a low resolution image looks like when the image width and height are set in the DOM.\nIf quill were to be used in a reputable blog, particularly a design blog where image quality mattered, people may point out the low quality images when they are viewed on a mac, etc.\nI assume, since technology is getting better, that High DPI displays will become more frequently used. Being able to set the width and height in the DOM for the image is important for that reason.. \nOn a mac (with retina.. most macs these days), or a surface 4 pro (and a few other PCs), the left image is what a low resolution image looks like when the image width and height are set in the DOM.\nIf quill were to be used in a reputable blog, particularly a design blog where image quality mattered, people may point out the low quality images when they are viewed on a mac, etc.\nI assume, since technology is getting better, that High DPI displays will become more frequently used. Being able to set the width and height in the DOM for the image is important for that reason.. The ability to change the width and height properties of the uploaded image? With a button for \"high dpi\" to automatically halve the image width and height and set those as the display properties? Requires a selection/properties popup to be created for images.. The ability to change the width and height properties of the uploaded image? With a button for \"high dpi\" to automatically halve the image width and height and set those as the display properties? Requires a selection/properties popup to be created for images.. Here is a mockup of what it could sort of look like (from webflow). \n\n. Here is a mockup of what it could sort of look like (from webflow). \n\n. Thanks for the tip about the icons. I'll use those instead.. Thanks for the tip about the icons. I'll use those instead.. So I should save, then load it up in an editor again with a try/catch and then send so I don't corrupt the data?\nI'm trying to solve validation. I don't trust that the code would always function 100% on everyone's browser enough for it to be saved, then restored without the possibility of corruption at some point or other.\nAlso, how can I trust that the format won't change over time without a schema? That's why document formats come with schemas. I can use this guys schema, but he doesn't maintain quill. How do I know it's correct?\n. So I should save, then load it up in an editor again with a try/catch and then send so I don't corrupt the data?\nI'm trying to solve validation. I don't trust that the code would always function 100% on everyone's browser enough for it to be saved, then restored without the possibility of corruption at some point or other.\nAlso, how can I trust that the format won't change over time without a schema? That's why document formats come with schemas. I can use this guys schema, but he doesn't maintain quill. How do I know it's correct?\n. ",
    "tunderdomb": "It would be nice to have it included. Even basic accessibility is better than nothing.\nAll it needs is an optional attribute on toolbar buttons, the rest could be handled by user style sheets.\nSomething like:\njs\nlet toolbarOptions = [\n    [\n      { 'bold': { tooltip: \"Bold (Ctrl+B)\" } }, 'italic', 'underline', 'strike'\n    ]\n  ];\nGenerated via options:\nhtml\n<button type=\"button\" class=\"ql-bold\" data-tooltip=\"Bold (Ctrl+B)\"></button>\nUser style sheet:\ncss\n[data-tooltip] {\n  content: attr(data-tooltip);\n  display: none;\n  // however people wanna style it..\n}\n[data-tooltip]:hover {\n  display: block; // or something..\n}\nThere's already an issue #1084 that touches on this, though that proposition is more generic.. ",
    "vmarasow": "@sachinrekhi I was having the same issue, but when I updated to 1.0.0-Beta.3 it went away. Have no idea why though.\n. ",
    "emanuelbsilva": "So, there are no listeners that need to be removed? That's great! Thanks\n. Also happens with me. Exactly as @WriterStat says. I'm on Chrome 49 on OSX.\nWhat happens is that when clicking a button on the toolbar there is an SELECTION_CHANGE event being triggered with a null range. When the range is null the toolbar is hidden before the click handler for the button to trigger.\nThe SELECTION_CHANGE event is being triggered by the Selection module using a setTimeout on the update method. The range is null because the editor doest not have focus. On the getRange  function: if (!this.hasFocus()) return [null, null];. The Dom Event that led to this was the focus.\nLooking at the function hasFocus the document.activeElement is being tested, on my scenario the active element is the button: <button class=\"ql-bold ql-active\">..</button>.\nSo that's probably why the issue is happening. Maybe stopping the propagation when focusing the ql-tooltip or moving the toolbar out of the editor container could fix the issue.\nHope i could help!\nCheers!\n. I understand that, but in that case there should be an option to disable the keyboard bindings for the history. Even if a user of the API wants to, there is no way to bypass the bindings, because quill, on the constructor is always the first to create them.\n. I just found out that when using incognito mode everything works fine.\nSo the extension that is causing me trouble is the Evernote extension. I'll do some more debugging to see if can find out why it's messing with Quill.\n. Hi,\nMy case is pretty straightforward, i have a custom made toolbar with custom made \"settings\" to edit several formats of the quill editor using the current selected text (editor.getSelection()).\nThis works well for buttons (toggle bold/italic/etc) because i can save the selection before the editor looses focus and set the selection again after making the changes. But for inputs (ie custom font sizes) i cannot use this trick, because it either focus on the editor (and the user cannot enter text on the form) or it looses selection of the text and the user doesn't know which text it's being changed.\nI would be happy to help develop this feature as i think it's a core feature for any non trivial text editing. I was thinking about having a div on top of the selected text to show the selection and maybe having it work with specific focus and blur methods on the editor.\nIf you give some lights on how to accomplish this i would really like to develop the feature as i think this project is very cool and i would like to contribute.\n. I would like to have your implementation proposal yes. This is a strong requirement for me and i'm willing to spend some time in having this feature on quill. When you do that i'll start digging in through the code.\nThanks alot for you effort. \n. Any words on this? Thanks.\n. Ok! I misunderstood you then. I'll get into it then. Thanks.\n. Hi @benbro, thanks for your answer. I actually used user-select: all because i want the hashtag to be copy-pasted as a whole and keep its format. There is still some issues with embed formats, but since they are all replicable with the formula module i will write them as separate issues.\n. ",
    "jbrowning": "Also noticed (might be related), \"selection-change\" does  not fire when re-focusing the editor and placing the cursor where it was before. Again, different behavior in 0.20.1.\n. ",
    "mgkirs": "I can reproducing this bug on Google Chrome and Firefox (Fedora x64)\ni think bug in toolbar button events. if i clicked very fast editor working. But if i do onmousedown on the button, button disappears, mouse doing onmosemove on other element, focus lost, and i cant do onmouseup on the button and doing onmouseup on different element\n. mousedown its fast but user can do other events before last events was the end\nand unusability when the button vanish while the mouse is still pressed. \nBut for touch screen, you right, touchstart is better.\n. fix #685 ready https://github.com/mgkirs/quill/commit/eca499ab95aa0c0f4f7f1236e19adc2dd8f3f4b0\n. fix work, but why thats submit form...\n. quill use tag <button>on buttons and this can submit form whith out javascript events\n. don't work\n. fix in beta3 don`t work\nhttp://codepen.io/anon/pen/jqjGMv\n. if initialize quill without syntax parametr\nQuill('#editor', {\n    modules: {\n      'formula': true,\n//    'syntax': true,\n      'toolbar': '#toolbar'\n    },\n    theme: 'snow'\n  });\nthe demo works\n. But...  highlight.js. included\nhttp://codepen.io/anon/pen/jqjGMv?editors=1111\ni Need to include highlight.js before quill.js. Its ok?\n. Nneed to include highlight.js before quill.js\n. #690\n. ",
    "juliantejera": "In case anybody else runs into this issue, here's the new link of the clipboard module https://quilljs.com/docs/modules/clipboard/. ",
    "Sritharan-racap": "Sample text doc for quill issue.docx\n. When the data is being transformed at line 6183 of the quill.js, all the word related styling are omitted and only the font-size, color etc are appended to the styling. Please help in the above issue.\n. I am also facing the same issue. When I copy a content from other text editor like MS Word, it is striping off the indent from the styling. I have been choked up with this issue for 2 days. Its a nightmare!!!\n. ",
    "ababashka": "@jhchen I'm talking about IE11.\nThe bug was reproduced on 2 PCs with Win10 and IE11 + on 1 PC with Win7.\n. ",
    "jonnolen": "I do not believe that this is the same issue as #673, this is calling the pasteHTML method from code using html that was originally generated by the quill editor.\n. So a clue to what may be causing this... If I change the whitelist for the IndentAttributor to be an array of strings then the indents are correctly applied when pasteHTML() is called. However, the +1 button no longer works because of a place in parchment where the whitelist is now being searched for a numeric value instead of a string value and the canAdd call fails....   \nActually... i think i may have fixed it, stand by for PR.\n. do you have a recommendation for a library to turn deltas into html for display outside of the editor?\n. @jhchen please check it now.\n. Bleargh.  there is a coercion problem in the toolbar module, updating that now.\n. the === being set to == breaks the +1 button, i checked... the button active state detection with === is broken for the header buttons in the two examples above (pre-fix it works, post fix it doesn't).\nperhaps the right solution is not checking  +1 -1 buttons for active state?\n. I actually think this can and should be removed... the +1/-1 is really a function of the toolbar and is handled as such in modules/toolbar.js, with the debugger attached, this method never got hit with a value that was a string === \"+1\" || \"-1\" it was always the existing indent incremented or decremented.\n. since this change allows a white list to be specified as integers instead of strings but the value \"+1\" actually matters for indent toolbar buttons, it needs to be ===.  \nThe way it was, an active button can't be clicked twice and the button is determined active if the value of the button is the same as the value of the format. An active button can't be activated again and the value for the button was being set to false before being passed through to format. \nThe root cause is that == will coerce a string to an integer to do a comparison, which in the case of indent means a delta with format 'indent': 1 has the same value as \"+1\", which is not really true for the indent \"+1\" button.\nI think this change isn't necessary if the restriction that whitelists be strings and and Attributor.value always returns a string is in place.  If we allow the whitelist to contain numbers, then the attributor with a numeric whitelist's value function needs to return a number.  If value can return a number instead of string then toolbar update needs strict ===.\n. i don't think it does... but i'll test in the code pen.\n. ",
    "gaisanshi": "Thanks Jason!\n. ",
    "maku": "Yes exactly\n. @benbro thank you for the hint. But I would really need two kind of links: \n\ninner app links (-> the html is for a SPA and the link should be with no target) \nexternal links (which should be opened in a new tab)\n\nWhat about inserting the html programmatically? Is this the way to go? (and how would I do this?). @benbro great - now I get it how I can do it basically. \nThe only one remaining problem is how to translate this in typescript (because of MyLink extends Link which is imported in a non module specific manner)\n. @benbro in this Typescript definition there is no Link definition. So I do not know how to use this and I have also no idea how tho write one (at least in this constellation)\nThe problem, from my point of view,  is the import of the Link class which acts as base class for the sublclass. \nvar Link = Quill.import('formats/link');\nclass MyLink extends Link {\n  ...\n}\nI would rather expect something like: \nimport {Link} from 'quill';\nI had to go the \"hard\" way. Which means translation of the es6 source code with babel and manually inserting the result in my typescript project. (135 lines of ugly code )\n. @rh78 I ended up with something like this. I think it is suboptimal but it works:\n```\nimport * as Quill from 'quill';\nconst Link = Quill.import('formats/link');\nexport function registerCustomLinkBehaviour(): void {\nLink.sanitize = function (url): string {\n    ....\nreturn url;\n\n};\nLink.create = function (value): HTMLAnchorElement {\n    let link: HTMLAnchorElement = document.createElement('a');\n    ....\n    return link;\n  };\n}\n```\n. ",
    "trigun539": "Was able to do this with the following code:\n```\nvar limit = 10;\nquill.on('text-change', function (delta, old, source) {\n  if (quill.getLength() > limit) {\n    quill.deleteText(limit, quill.getLength());\n  }\n});\n```\n. ",
    "StreetStrider": "Hello. Has anyone got a solution for max-lines behavior? I believe it would be more complex than max-length, and would involve counting by newlines in Deltas with the following rejecting anything below max allowed newlines. It would be great if someone faced such problem and solved it.. That's a workaround, not a solution. If it's working for you, it's OK. But the purpose of editor (Quill) is to release you from opting in editable area in such crude manners. Too many parts potentially can be broken. Quill API is required.. ",
    "franverona": "I think this solution is incomplete. What happens if user tries to add text in the middle? The solution provided by @trigun539 won't be valid because text will be deleted from the end if I'm not mistaken.. ",
    "IanOnFire": "Hi everybody, we've found a solution in React that we are content with.\n```\n this.props.onChange(value)}\n/>\ncheckCharacterCount = (event) => {\n    if (this.getCharacterText().length > this.props.maxCharacters && event.key !== 'Backspace') {\n        event.preventDefault();\n    }\n}\n```\nif the max length of characters is reached, onChange won't be fired.. ",
    "nvlled": "This one works regardless where the text is inserted (doesn't handle formatted pasted content)\njavascript\nconst limit = 10; \nquill.on('text-change', function (delta, old, source) {\n    if (quill.getLength() <= limit) {\n        return;\n    }   \n    const { ops } = delta;\n    let updatedOps;\n    if (ops.length === 1) {\n        // text is inserted at the beginning\n        updatedOps = [{ delete: ops[0].insert.length }]; \n    } else {\n        // ops[0] == {retain: numberOfCharsBeforeInsertedText}\n        // ops[1] == {insert: \"example\"}\n        updatedOps = [ops[0], { delete: ops[1].insert.length }]; \n    }   \n    quill.updateContents({ ops: updatedOps }); \n});\n@jhchen It's fine if it's not a good recommendation, at least maybe point us in the right direction. It will save some folks some time hacking around.. ",
    "chearon": "@jhchen our web application has its own undo stack, so we've had to modify Quill to take the history module out. Provided you preventDefault the undo/redo keyboard events in order to keep the browser from undoing the last non-quill-handled thing, and do your own updateContents(delta) from the stack, I haven't been able to find any bugs that it causes. Would be nice to have it supported with the caveats noted!. This is happening because replaced elements can't have selection. So selectionchange isn't going to fire, and Quill doesn't know that the editor doesn't have focus anymore since that's how it checks.\nNote in the button example, Quill does have selection but not focus.\nI ran into a similar issue when clicking a div with user-select: none set on it. Same thing: quill loses focus but not selection. This fiddle compares focus/blur event listeners with selectionchange listeners. Click from the top div to the 2nd div, and from the top div to the 3rd div.\nSince focus state can change independently from selection state, it looks like there's no way around it - Quill might have to add listeners for blur or focusout to fix this.. This is happening because replaced elements can't have selection. So selectionchange isn't going to fire, and Quill doesn't know that the editor doesn't have focus anymore since that's how it checks.\nNote in the button example, Quill does have selection but not focus.\nI ran into a similar issue when clicking a div with user-select: none set on it. Same thing: quill loses focus but not selection. This fiddle compares focus/blur event listeners with selectionchange listeners. Click from the top div to the 2nd div, and from the top div to the 3rd div.\nSince focus state can change independently from selection state, it looks like there's no way around it - Quill might have to add listeners for blur or focusout to fix this.. Also, the work-around for this is:\njavascript\nquill.root.addEventListener('blur', e => quill.setSelection(null));. Also, the work-around for this is:\njavascript\nquill.root.addEventListener('blur', e => quill.setSelection(null));. Brilliant!! Awesome work @foleyatwork!. Brilliant!! Awesome work @foleyatwork!. It needs a little more work though:\n\nProbably attrName should be set to color so the quill document is standard ({color: \"#aaa\"})\nThe model gets correctly updated with the color but (in Safari) it still uses the text before the substitution\nI'm getting some console errors followed by strange behavior where Quill seems to be going out of sync with the contentEditable\ncreate never seems to be called. This seems to do everything correctly, I'll update it with any fixes:\n\n```javascript\nconst Inline = Quill.import('blots/inline');\nclass CustomColor extends Inline {\n  constructor(domNode, value) {\n    super(domNode, value);\n// Map <font> properties\ndomNode.style.color = domNode.color;\n\nconst span = this.replaceWith(new Inline(Inline.create()));\n\nspan.children.forEach(child => {\n  if (child.attributes) child.attributes.copy(span);\n  if (child.unwrap) child.unwrap();\n});\n\nthis.remove();\n\nreturn span;\n\n}\n}\nCustomColor.blotName = \"customColor\";\nCustomColor.tagName = \"FONT\";\nQuill.register(CustomColor, true);\n```. Mostly because we support a continuous range of colors in our app, so I didn't want to generate 256^3 classes. It should totally work if you only allow a set of colors though.. Mostly because we support a continuous range of colors in our app, so I didn't want to generate 256^3 classes. It should totally work if you only allow a set of colors though.. ",
    "eyal1990": "\nThe plunker is just a demo in order to display the problem. You can easily reproduce it if you'll place a quill inside an object tag.\nWhat do you mean? This follow the example from here: http://www.w3schools.com/tags/tag_object.asp\nThis does not work on IE 10, IE11 and probably Edge.\n. IFrame is the obvious choice but I found that an IFrame has a memory consumption issue so I changed it to an object.\n\nIt is a validation use of the object tag and there is no reason to not support it.\n. ",
    "a-change": "Seems my colleagues and I can reproduce the issue on Safari Version 10.1 (12603.1.30.0.34).\nHere are the steps to try:\n1. write something\n2. remove the whole line clicking backspace\n3. click backspace additionally one or two times\nBlinking cursor will still be on the line but it won't actually be able to write anything.\nHere's an example on quilljs.com in incognito mode to exclude external add-ons' interventions:\n\nThe same thing works fine on Chrome Version 58.0.3029.110 (64-bit):\n\nTested on MacOS Sierra Version 10.12.4. Seems my colleagues and I can reproduce the issue on Safari Version 10.1 (12603.1.30.0.34).\nHere are the steps to try:\n1. write something\n2. remove the whole line clicking backspace\n3. click backspace additionally one or two times\nBlinking cursor will still be on the line but it won't actually be able to write anything.\nHere's an example on quilljs.com in incognito mode to exclude external add-ons' interventions:\n\nThe same thing works fine on Chrome Version 58.0.3029.110 (64-bit):\n\nTested on MacOS Sierra Version 10.12.4. @jhchen sure, here is a separate issue for this: https://github.com/quilljs/quill/issues/1564. @jhchen sure, here is a separate issue for this: https://github.com/quilljs/quill/issues/1564. Strangely enough, I myself cannot replicate the issue on Quilljs.com right now.\nBefore that I've managed to come up with a simple and dirty work-around.\nAdding something like this to bindings object should solve the problem:\nbackSpaceOnEmpyLine: {\n                key: 8,\n                handler: function (range, context) {\n                    var previousChar = this.quill.getText(range.index - 1, 1);\n                    if (previousChar === \"\" || previousChar === null) {\n                        $('.ql-editor').attr('tabindex', 0); //should be done once and outside of bindings objects\n                        $('.ql-editor').focus();\n                    }\n                    return true;\n                }\n            },\n(using empty: true property is probably more elegant but I couldn't get it to work in this case). Strangely enough, I myself cannot replicate the issue on Quilljs.com right now.\nBefore that I've managed to come up with a simple and dirty work-around.\nAdding something like this to bindings object should solve the problem:\nbackSpaceOnEmpyLine: {\n                key: 8,\n                handler: function (range, context) {\n                    var previousChar = this.quill.getText(range.index - 1, 1);\n                    if (previousChar === \"\" || previousChar === null) {\n                        $('.ql-editor').attr('tabindex', 0); //should be done once and outside of bindings objects\n                        $('.ql-editor').focus();\n                    }\n                    return true;\n                }\n            },\n(using empty: true property is probably more elegant but I couldn't get it to work in this case). ",
    "CC84": "Bad news.... 1.0 doesn't seem to be downwards compatible, so at this state i can't change to 1.0. Furthermore 1.0 is at beta state. Wouldn't it possible to fix this in your last stable release?\n. ",
    "rickhanlonii": "@jhchen without this, is it possible to set the heading IDs if desired (for linking to headers)?. @jhchen is there a good example of how to add the same tooltip as video/formula for an image?. ",
    "ChuckkNorris": "Just a thought - if it's been removed, would you mind removing it from the API documentation? It's quite frustrating when learning a library for the first time. http://quilljs.com/docs/api/#quillprototypegethtml\n. ",
    "mnpenner": "Quill is adding this junk to the innerHTML\nhtml\n<div class=\"ql-editor ql-blank\" contenteditable=\"true\"><p><br></p></div><div class=\"ql-clipboard\" contenteditable=\"true\" tabindex=\"-1\"></div><div class=\"ql-tooltip ql-hidden\"><a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a><input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\"><a class=\"ql-action\"></a><a class=\"ql-remove\"></a></div>\nWithout an API method I don't know how we're expected to get the HTML. And without the HTML... what good is Quill? Honest question. I thought Quill was supposed to be a WYSIWYG editor that would allow us to render the output outside the editor.\n. Quill is adding this junk to the innerHTML\nhtml\n<div class=\"ql-editor ql-blank\" contenteditable=\"true\"><p><br></p></div><div class=\"ql-clipboard\" contenteditable=\"true\" tabindex=\"-1\"></div><div class=\"ql-tooltip ql-hidden\"><a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a><input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\"><a class=\"ql-action\"></a><a class=\"ql-remove\"></a></div>\nWithout an API method I don't know how we're expected to get the HTML. And without the HTML... what good is Quill? Honest question. I thought Quill was supposed to be a WYSIWYG editor that would allow us to render the output outside the editor.\n. Dope :disappointed:  Thanks @jhchen. I thought it was the element I initialized it on.\n. Dope :disappointed:  Thanks @jhchen. I thought it was the element I initialized it on.\n. ",
    "micimize": "I don't think there's a solution for consistent multi-line highlighting that doesn't run into the same problem / trade-off, just like you get with lists. We could make the code-block merging configurable, or make such merging strategies configurable in general.\nOne thing I tried was making code-block a wrapper around code-lines, but that was a bit painful, and was really hard to fit to the current highlighting strategy.\n. I don't think there's a solution for consistent multi-line highlighting that doesn't run into the same problem / trade-off, just like you get with lists. We could make the code-block merging configurable, or make such merging strategies configurable in general.\nOne thing I tried was making code-block a wrapper around code-lines, but that was a bit painful, and was really hard to fit to the current highlighting strategy.\n. ",
    "auralon": "This is exactly the issue that I came across, although I noticed it with the blockquote tag too, which certainly doesn't have the same knock-on effects (when used in conjunction with other tools like highlight.js), but if behaviour is changed for pre tags, then it might as well be altered for blockquote too.\n. Looking forward to this being released as a beta build.\n. The same applies for code blocks (wrapped in <pre>)\n. To clarify, I want to produce....\n<blockquote>This is the first line of the quoted text<br>\n    This is the second line<blockquote>\n... but I get...\n<blockquote>This is the first line of the quoted text</blockquote>\n<blockquote>This is the second line</blockquote>\nWhich messes up styling (eg: using before psuedo element to added a quote icon).  This also messes up the code contained in the <pre> tags too.  I'm using highlight.js to style this code, but because each line is within it's own <pre spellcheck=\"false\"> then it can't process it properly.\n. Sure, I realise that I can use certain css selectors to style quotes and codeblocks to mask this particular quill behaviour, but that wouldn't help with the conflict that is being hit with highlight.js (a code block syntax highlighter), which expects an entire code block to be within a single <pre> tag.  \nAs soon as each line of a code snippet is wrapped in a <pre> tag, then it breaks the highlighting and syntax detection.  It would still be great to amend this quill behaviour, to increase cross-compatibility with packages like highlight.js.\n. ",
    "pietrop": "Having the same problem,\njs \nvar length = quill.getLength() -1;\nquill.insertText(length, a_variable_with_some_test_here );\nwhen I insert text at the end, I need to do -1 to avoid it ending on a new line, but once the text is added the cursor/caret position jumps to top of the document.\nAny ideas on how to figure this out?. As specified in the API for insertText, the parameters are first the position and then the text. This is more likely to work:\njs\nsetTimeout(function() {\n    quill.insertText( quill.getLength() - 1, 'Hello')  \n}, 5000);\nIn any case, I've tried it and it seems ok, going to do some more tests to see if I need to raise a separate issue. \nThanks!. Thanks @DmitrySkripkin, that's helpful, but I still don't think the issue I run into with blockquote is by design?. ",
    "rsmorley": "Thanks for taking a look Jason.\nI switched the dependency to 1.0.0-beta.4 but it still has the same broken behavior for me. I pushed a branch, quill-beta, to the above repo. \n. I added a consol.log and verified that it is the latest beta version is loaded and that the delete key is working.\nHowever, there is a ql-clipboard div that is displaying and is editable. Is this expected behavior? Should I just hide it with css? (i entered the element and class name in the different editable fields to make them distinguishable)\n// with shadow DOM\nhttp://imgur.com/8rGlTzF\n// without\nhttp://imgur.com/cwTu6Mu\n. ",
    "Poizd": "Reproducible\nQuill Editor v1.3.6\nPlatforms:\nWindows 10, \nGCH Version 69.0.3497.100\nFF 62.0.3 \nIE11, EDGE\nLink where tested\nhttps://quilljs.com/playground/#autosave\nSteps\n1.  Add any link f.e \nhttp://en.wikipedia.org/wiki/One_Ring\n2. Set Mouse pointer to the end of link, right after ..._Ring\n3. Select any btn with styling (f.e. underscore text, or other color)\n4. Click somewhere on link text http://en.wikipedia.org/wiki/One_Ring\nWB: Uncaught TypeError: leaf.position is not a function\nvar _leaf$position3 = leaf.position(offset, true);\n. Reproducible\nQuill Editor v1.3.6\nPlatforms:\nWindows 10, \nGCH Version 69.0.3497.100\nFF 62.0.3 \nIE11, EDGE\nLink where tested\nhttps://quilljs.com/playground/#autosave\nSteps\n1.  Add any link f.e \nhttp://en.wikipedia.org/wiki/One_Ring\n2. Set Mouse pointer to the end of link, right after ..._Ring\n3. Select any btn with styling (f.e. underscore text, or other color)\n4. Click somewhere on link text http://en.wikipedia.org/wiki/One_Ring\nWB: Uncaught TypeError: leaf.position is not a function\nvar _leaf$position3 = leaf.position(offset, true);\n. ",
    "Vonsild": "You answer fails to address the problem :)\nquill.pasteHTML('<h1>headline</h1><p>content</p>'); results in a DOM structure like <h1>headline</h1><p>&nbsp;</p><p>content</p>\nquill.pasteHTML('<h1>headline</h1><p>&nbsp;</p><p>content</p>'); results in a DOM structure like <h1>headline</h1><p>&nbsp;</p><p>&nbsp;</p><p>content</p>\nWhy does it introduce an extra empty paragraph?\n. ",
    "lordenzo": "I understand that Quill tries to emulate the spacing after an Heading tag using a p tag, but could this be something configurable?\n. @jhchen Excellent! Thanks! I was able to make it working by deleting the lasts \\n from the delta in each Heading tag :)\n. ",
    "jnarowski": "Having the same problem as @JMacLulich. Has this been fixed? I'm using version 1.1.9. ",
    "rtm": "I am using the primeng wrapper around Quill.  If I have an ordered list (<ol>), then each time I enter the editor, which pastes the current HTML into the editor, I get an extra <p><br/></p> inserted into the HTML at the beginning of the list. I wonder if there is some real simple option to disable this behavior, such as DONT_PUT_IN_EXTRA_P_TAGS, or something similar. I understand that I might be able to deal with this problem by using a \"matcher\", but I really would prefer not to have to go to all that trouble.. ",
    "ctrlaltdylan": "My solution to the extra <br/> problem is to change the styling:\n/**\n * Custom Quill Editor Overrides\n */\n.ql-editor p {\n  margin-bottom: 25px; \n}\nThat way when writers make a space they get that extra padding that actually shows when rendering. By default the .ql-editior p margin is 0. When you render your content outside of the editor your styling will probably add padding.. ",
    "justinpincar": "@rtm Were you able to resolve this? I have the same issue: pasting HTML adds extra <p><br /></p>.\nAdding CSS is not an option for me as we use the markup in emails without any additional styling.\n. @rtm Were you able to resolve this? I have the same issue: pasting HTML adds extra <p><br /></p>.\nAdding CSS is not an option for me as we use the markup in emails without any additional styling.\n. @pxljoy see https://github.com/quilljs/quill/issues/807#issuecomment-315158226, might solve your issue.. @pxljoy see https://github.com/quilljs/quill/issues/807#issuecomment-315158226, might solve your issue.. @jhchen Is it possible to remove one of the default matches? I'm running into a lot of issues with matchSpacing as it adds in extra newlines that screw up email formatting.\nLooking through the code it seems like I can only add more, but not specify a set of new matches. I could try to add a matcher with opposite logic that undoes the default one, but doesn't seem like the best solution. It would be hard to know which newlines were automatically added by the matcher and which were intended by the user.. @jhchen Is it possible to remove one of the default matches? I'm running into a lot of issues with matchSpacing as it adds in extra newlines that screw up email formatting.\nLooking through the code it seems like I can only add more, but not specify a set of new matches. I could try to add a matcher with opposite logic that undoes the default one, but doesn't seem like the best solution. It would be hard to know which newlines were automatically added by the matcher and which were intended by the user.. That would be perfect! Or possibly another config directive along the lines of replaceMatchers that sets new ones instead of appending like the current matchers one does.\nReally appreciate the prompt and helpful response! <3\n. That would be perfect! Or possibly another config directive along the lines of replaceMatchers that sets new ones instead of appending like the current matchers one does.\nReally appreciate the prompt and helpful response! <3\n. Using matchVisual seems to be working great, thank you!\nSince I'm using this for composing emails which have no style sheets, I also needed to remove the .ql-editor * { margin: 0; padding: 0;} from quill.snow.scss, otherwise the editor would be really cramped and not match the output.. Using matchVisual seems to be working great, thank you!\nSince I'm using this for composing emails which have no style sheets, I also needed to remove the .ql-editor * { margin: 0; padding: 0;} from quill.snow.scss, otherwise the editor would be really cramped and not match the output.. @jhchen, thanks for the explanation. It makes sense, but this was definitely not the expected behavior as a developer: the naming is confusing (dangerouslyPasteHTML) as other libraries use similar methods without any sanitization. I assume the rationale is because quill's internal delta models need to be generated?\nIs there any workaround to make a \"raw\" html paste or something like that? We recently upgraded to 1.x from a 0.x release of quill and now everything that had tables it in will be wiped and lose the formatting if the user makes any edits.\n. @jhchen, thanks for the explanation. It makes sense, but this was definitely not the expected behavior as a developer: the naming is confusing (dangerouslyPasteHTML) as other libraries use similar methods without any sanitization. I assume the rationale is because quill's internal delta models need to be generated?\nIs there any workaround to make a \"raw\" html paste or something like that? We recently upgraded to 1.x from a 0.x release of quill and now everything that had tables it in will be wiped and lose the formatting if the user makes any edits.\n. FYI In case anyone is wondering how to get 100% height of a flexbox container - the editor itself needs display: flex.\nhttp://codepen.io/justinpincar/pen/gWdeRJ\n. ",
    "pxljoy": "I'm having a similar problem, any two code blocks with a newline between them save as\n<pre>...></pre>\n<p><br></p>\n<pre>...></pre>\nbut then, when the page is refreshed and the content is supplied from a database, it inserts another <p><br></p>, so it becomes\n<pre>...></pre>\n<p><br></p>\n<p><br></p>\n<pre>...></pre>. ",
    "abejdaniels": "Tried it in every browser on my computer. You need to click a format, and immediately starting mashing keys to have it happen every time. It isn't that huge of a bug because it's not like someone presses letters like crazy and expects everything to work. \nClick bold, immediately hit 3 keys at the same time. It looks like this: (pipe char = cursor.) as|df\ncontinuing to do so would eventually do this asdafdsfdsafdsa|asfdafdsfdsafdsafdsa, instead of staying at the end of the string, it lags. I am on windows 10 on a relatively fast laptop.\n. Tried it in every browser on my computer. You need to click a format, and immediately starting mashing keys to have it happen every time. It isn't that huge of a bug because it's not like someone presses letters like crazy and expects everything to work. \nClick bold, immediately hit 3 keys at the same time. It looks like this: (pipe char = cursor.) as|df\ncontinuing to do so would eventually do this asdafdsfdsafdsa|asfdafdsfdsafdsafdsa, instead of staying at the end of the string, it lags. I am on windows 10 on a relatively fast laptop.\n. Here is what it looks like in real time. Excuse me for not selecting for the gif recorder to record mouse.\nhttp://imgur.com/QQxV3ZH\n. ",
    "davelozier": "Sounds good to me! I prefer users not be able to resize their images.\n. ",
    "g-borgulya": "Hi,\nMay I ask why did you close this issue? This is an important usability question in my opinion. I have exactly the same problem. Basically now it's not possible to create custom toolbar dropdown menus for formatting, as the user doesn't see which part of the text it would affect.. I see, thank you!. ",
    "edisonator": "@sachinrekhi I was troubled by this problem for a long time, look forward to your PR!\n. @sachinrekhi I was troubled by this problem for a long time, look forward to your PR!\n. javascript\ncursor.js:110 Uncaught TypeError: Cannot set property 'range' of undefined\n  at Cursor.update (cursor.js:110)\n  at eval (parchment.js:1406)\n  at Array.forEach (<anonymous>)\n  at ScrollBlot.update (parchment.js:1403)\n  at Scroll.update (scroll.js:160)\n  at MutationObserver.eval (parchment.js:1292)\nthe function update is called in parchment.js and I'v seen that just one parameter is sent in.\nthe way to reproduce is:\n1. input some words\n2. input enter at the end of the line\n3. input anything will trigger the error. javascript\ncursor.js:110 Uncaught TypeError: Cannot set property 'range' of undefined\n  at Cursor.update (cursor.js:110)\n  at eval (parchment.js:1406)\n  at Array.forEach (<anonymous>)\n  at ScrollBlot.update (parchment.js:1403)\n  at Scroll.update (scroll.js:160)\n  at MutationObserver.eval (parchment.js:1292)\nthe function update is called in parchment.js and I'v seen that just one parameter is sent in.\nthe way to reproduce is:\n1. input some words\n2. input enter at the end of the line\n3. input anything will trigger the error. I'v tried to upgrade the parchment and now I'm on 1.1.0, but the error is still there.\nI'v tried to write the function update(mutations, context) to update(mutations, context = {}) but it will trigger other bugs, just like after inputting enter, the cursor will return to the end of last line, and so on.. I'v tried to upgrade the parchment and now I'm on 1.1.0, but the error is still there.\nI'v tried to write the function update(mutations, context) to update(mutations, context = {}) but it will trigger other bugs, just like after inputting enter, the cursor will return to the end of last line, and so on.. Well, I'm so sorry that it may be a little misunderstanding episode.\nI'v upgrade my parchment to @1.1.0 but the file in my webpack-dev-server is @1.0.9 yet.\nAfter I solved this problem, it works well.\n@sferoze I consider that you can upgrade your parchment to @1.1.0.. Well, I'm so sorry that it may be a little misunderstanding episode.\nI'v upgrade my parchment to @1.1.0 but the file in my webpack-dev-server is @1.0.9 yet.\nAfter I solved this problem, it works well.\n@sferoze I consider that you can upgrade your parchment to @1.1.0.. ",
    "alainduruy": "@sachinrekhi I'm really interested as well in the solution you found for this! It would be a great feature\n. ",
    "CJEnright": "Thanks for the reminder @seekforwings, @jhchen's jsfiddle proves the concept doesn't work, but in practice it seems to function fine (besides the bugs issued on @koffeinfrei's repository).  I've tried to look for the differences but wasn't able to find anything concrete as of yet.  I've made a  demo repository if anyone wants to test out the module in a full Quill environment.. ",
    "koffeinfrei": "It's because of pointer-events: none (https://github.com/koffeinfrei/quill-task-list/blob/master/task_list.sass#L2.. @jhchen side question: Have you considered adding such functionality as plugins, similar to the one I built? This would lead to a cleaner separation. The current design will eventually lead to a very bloated core.. @jhchen \nThe reason I asked was that you started implementing the checkbox functionallity in the core, while I had already written a plugin which could be used instead.\nThe module concept may be appropriate (although I didn't have a close look at it) but my point was that you didn't use that concept, but added more code to the existing list.. I didn't necessarily imply that my plugin should be used instead. I just merely stated that this could be implemented not in core directly, due to the above stated reasons and also because my attempt seemed  easier. I was actually surprised how easily I was able to achieve this. Some things even seem to be easier the way I implemented it:\n\nThe only thing left I think is I cannot get the toolbar to light up both in the checked and unchecked case.\n\nCuriously this just worked for me.\n\nIt was and still is in a demonstration/proof of concept stage in terms of robustness and completeness in terms of interacting with other parts of Quill in a bug free way.\n\nWhat parts do you think aren't robust or complete enough? I'm aware of \n\nTasks are correctly represented by Deltas using attributes: open PR, fix available\nThe first node of a task list won't be deleted: no solution available currently\n\n\nI apologize if I misread your intentions.\n\nNo need to apologize. I didn't have any intentions actually other than just providing my implementation as a possible inspiration for the final implementation. That you're going in a different direction with this is totally up to you and fine with me. It's your project anyway, and you'll know better what's right.. > you can only use ES6 exports with ES6 modules. There's no more mixing ES5/ES6 syntax.\nhttps://github.com/webpack/webpack/issues/3997#issuecomment-273473184\nI strongly believe that the new ES6 syntax should be used.\nFollowing the documentation http://quilljs.com/guides/adding-quill-to-your-build-pipeline/ fails for a standard es6 webpack setup.\nFor @jhchen's drop-in example the packaged version is used anyway.. ",
    "patleeman": "I couldn't find much documentation on this feature, but it seems like formatLine(idx, len, 'list', 'checked') and formatLine(idx, len, 'list', 'unchecked') insert checkboxes that work as intended.\n@jhchen Is this feature still in development? Would it be feasible to use it in production?\nThank you!. It might be interpreting both touchstart and mousedown events and triggering twice. Instead of debounce, I wonder if there is a way to trigger only one of these events?. Here's a few from searching github\nModules\n- Image Resize\n- Image Drop\n- Image URL Drop\n- Cursors\n- Emoji \n- Markdown Shortcuts\n- Word Counter\n- Image Splitter\n- Local Storage\n- Placeholders\nComponents\n- React\n  - react-quill\n- Vue\n  - vue-quill-editor\n  - vue-quill\n- Angular 2\n  - ngx-quill-editor\n- Polymer\n  - quill-element\n  - polymer-quill. ",
    "dmarcelino": "I've just tried following @sferoze suggestion:\n\nSo I tried adding the list check item to my toolbar like so\n[{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }]\n\nAnd put it on a codepen: https://codepen.io/anon/pen/JLdyQq and it looks really good!\nGreat work @jhchen! Any ETA for official support?. > You can use any unicode symbol by using the last 4 chars of the hex representation where it says:\n\ncontent: '\\2713'\nHere's a list of some useful unicode symbols.\n\n@patleeman, @sferoze, content: '\\25A1' (square) seems to work well, so far.\nRegarding mobile have you had any issues ticking or un-ticking the boxes? While using Chrome on android, more often than not it seems to register 2 presses, instead of one. This results in the box returning to previous state instead of changing. I'm inclined to think some sort of debounce may be needed on list.js#L77. What is your experience?. Funny, this morning I was thinking about this and the same thought came to mind. I've tested Android Chrome with this jsfiddle (origin) and confirmed indeed both touchstart and mousedown events are being fired.\nI see 2 options:\n\nDetect if the user is using touch and ignore the click event. This will likely fail for touchscreen laptops.\nApply debounce with a short period to listEventHandler() (list.js#L66). This way it becomes irrelevant if both events are triggered simultaneously (or even if the user is shaking while pressing a checkbox). I've created a jsfiddle with the below code to test this and it seems to work fine.\n\n```javascript\nvar waiting = false;\nvar touchmouseFunc = function(e) {\n  if (waiting) return;\n  waiting = true;\n  setTimeout(function() {\n    waiting = false;\n  }, 300);\n  document.getElementById('testArea').innerHTML += 'touchmouse ';\n};\ndocument.addEventListener(\"touchstart\", touchmouseFunc, false);\ndocument.addEventListener(\"mousedown\", touchmouseFunc, false);\n```. Hi @jhchen, I believe this is a straightforward fix for this issue. Let me know if you want me to change anything. Thanks.. ",
    "rgazelot": "Hello guys, thanks for your work. I need to catch the []+space or [ ]+ space in the Keyboard module in order to create my own stuff. Actually I can't because of this feature which basically do the same stuff but I have no control over. If I press []+space, you guys transform the text into a unchecked list and set the content as empty. The Keyboard module is never trigger. I can have the control into the Keyboard module if I press []+space+space but the experience sucks and that's not what I want.\nIs there a way for me to disable this formating?. ",
    "Toktik": "I can confirm right boundary issue,\n. ",
    "baio": "Why pasteHtml move focus on editor, looks like bug ?. Why pasteHtml move focus on editor, looks like bug ?. ",
    "jeffcarbs": "Awesome, thanks!\n. ",
    "beeterry": "@jhchen What is the new solution for getting the HTML string? Right now, I'm trying to target innerHTML and it doesn't seem to be working right. Am I just doing it wrong or is there a better way?\n. @jhchen What is the new solution for getting the HTML string? Right now, I'm trying to target innerHTML and it doesn't seem to be working right. Am I just doing it wrong or is there a better way?\n. @jhchen Well, we have an instance of the text editor and when the user clicks \"save,\" we want to extract the html and store it in our DB so that another app can use the html. The way I'm extracting the HTML is by \nthis.editor.container.innerHTML.replace(/\\>\\s+\\</g, '>&nbsp;<')\nSo basically I'm diving into the editor object and accessing the innerHTML property. That pulls something from the editor and puts it in the database fine. It also works fine when we pull that string from the database and .pasteHTML into the editor. The issue is when I try to paste that html string into my other application, it's not keeping the format. For example, we have an image and some text that we used the editor for and extracted the html, then stored it in the DB (from quill). Now, when we use that same html string in our other application, the image is pretty small and not aligned properly, and the text is surrounded by a white box/background. This is an example of the string we are getting from Quill.\n. @jhchen Well, we have an instance of the text editor and when the user clicks \"save,\" we want to extract the html and store it in our DB so that another app can use the html. The way I'm extracting the HTML is by \nthis.editor.container.innerHTML.replace(/\\>\\s+\\</g, '>&nbsp;<')\nSo basically I'm diving into the editor object and accessing the innerHTML property. That pulls something from the editor and puts it in the database fine. It also works fine when we pull that string from the database and .pasteHTML into the editor. The issue is when I try to paste that html string into my other application, it's not keeping the format. For example, we have an image and some text that we used the editor for and extracted the html, then stored it in the DB (from quill). Now, when we use that same html string in our other application, the image is pretty small and not aligned properly, and the text is surrounded by a white box/background. This is an example of the string we are getting from Quill.\n. @jhchen Disregard this. I figured it out. I was targeting quill.container.innerHTML instead of quill.container.firstChild.innerHTML\n. @jhchen Disregard this. I figured it out. I was targeting quill.container.innerHTML instead of quill.container.firstChild.innerHTML\n. ",
    "chirag4396": "hi, i have a question that how can i get content from quill with html tags so that i can store it to DB and use it for other thing. i'd tried getContent but it's giving JSON output, and i want output in  HTML format like when i store it to database Quill should give me output like <h1<b>DEMO</b></h1>'. and so on. so please guide me with it @jhchen \n. Thank you very much @benbro, my problem is solved but there is arise of new one is when i'm trying to insert any image to quill editor, it gives me base64 string which is quite irritating. Could you help me for getting store that image to server and just get a <img> tag of it.\n. ",
    "Oikio": "@chirag4396 Trying to figure out same thing too, I guess good starting point should be here.\nYou write custom image handler which:\n1. saves images on server\n2. adds them into the editor.\n3. then you can save html content with images with urls\nOr:\n1.you parse all images on save \n2. save them \n3. replace img tags \n4. save html.\nOr:\n1. Save as is\n2. Replace img with urls on server, parsing and saving images\n3. Get response from server and replace quill content.\nI'm just started adding quill on my project and new to it. So, I'm figuring out how to save images, too. Maybe some more expirienced developers can look at my solutions and help to find better way to handle this?\n. ",
    "willdady": "From the upgrade guide:\n\na custom API call no longer adds any value on top of the DOM\u2019s existing innerHTML.\n\nI disagree. Having a getHTML method provides syntactic sugar over innerHTML and keeps the API for dealing with Quill consistent. Also, getHTML should convert the Delta to HTML when it's called, it should not trust what's in the DOM as a user can easily inject malicious markup. Yes submitting unexpected markup to the server would be easy to do regardless but at least a proper getHTML method would treat the Delta as the source of truth and not the DOM.\n. ",
    "themaxmarchuk": "Hello guys, I'm working on a single page chrome application which uses quill for text editing. Currently I am planning on saving everything as a quill delta object, and using setContents to load the saved data. This works great, however, I also need to convert what was edited in quill into a Microsoft Word Document when the user request an \"export\". I've found a library which allows me to convert an html string into a .docx blob, and it works.\nhttps://github.com/evidenceprime/html-docx-js\nSo currently, I am planning on just using setContents to load the delta object, and then grab the inner html and run it through the docx generator. The issue is that sometimes I want them to export a file without ever opening an instance of the quill editor. So I was wondering what I should do? Theoretically I could create a hidden instance of quill and just use that to convert my deltas into html. How should I go about doing this?\nIf anyone has a better way of getting quill js content into .docx format, I would really appreciate your advice.\n. @jhchen since quill has specific css classes for formatting, would it makes sense to replace all of those divs which have quill specific classes with plain html tags such as <center> and <b>? Because the html-docx library I am using to generate .docx blobs requires that those tags be present in order to achieve the desired formatting. So I'm just curious, if you needed to convert a quill delta into .docx file without losing basic text formatting, how would you do it?\n. Yeah, it worked to me as well, however what I needed was both the character index and length which would select the current line. Although I think what I should do is add my own block formats. Because that's what I really need, line level bold, underline, ect.\n. I was able to solve my issue by styling header tags and using something like:\nquill.formatLine(sel.index, sel.length, 'header', 1); \nIt was a quick workaround but I realize you could add your own line level formats if you wanted to. Hope this helps anyone who needs to quickly format and entire line with custom styles.. ",
    "jessejamesrich": "Seems like an obvious omission to not get the contents with an API call. Isn't that precisely what the library is designed for?\n. ",
    "egeersoz": "@jhchen How does Quill handle scenarios where other people have to consume the contents a user generates using Quill? For example, a simple blog or wiki application where I type in some rich text, and it has to be rendered on the page later when others want to read it. It's probably the most common application of rich text editors.\nAs far as I can tell, getContents() returns a Delta object. How is that object then converted to HTML markup to embed into the page?\n. ",
    "tinyinstance": "@jhchen I feel like your suggestion for @egeersoz's question is not good enough (or I'm missing something). If we're using Quill for editorial, then we need a way (preferably an easy way) to display that content to users. \nCurrent situation leaves us two options:\n1. Creating read-only editors to display content. But, think of a page with multiple posts and/or other parts that are written in Quill. Do we need to keep creating read-only editors to display the different contents on the same page? This doesn't seem right to me. Or, is it?\n2. Save the contents of quill.root.innerHTML as escaped HTML during editorial save and render that back on the user pages. From backend point of view, this is like using most of the other richtext editors, we handle escaping, cleaning and reversing of the generated html code. Which works, but defeats the whole purpose of deltas. \nI think, a way to convert deltas to html without the editor would be helpful. However, from your responses I guess this is not the intended use case for Quill or the deltas? Am I right saying that:\n1. They are tightly dependent? (I'm new to Quill)\n2. If we are using Quill for the admin/editorial and want to store deltas, then our user's front-end will be Quill editor dependent as well? \nThanks! \n. @jhchen Thanks a lot for detailed response. Sorry for mixing up the issues. I understand it better now, that it would be complicated to create a generalised solution for everybody. I'm planning to integrate Quill to my app, and I'll definitely work on this conversion. If I come up with a good way to generalise it, I sure will share it in a separate issue. Thanks again. \n. ",
    "nmnuckols": "I also came to this thread looking for a getHtml() function.  As a developer who has worked on dozens of applications using WYSIWYG editors, 100% of the time we needed to store the content in a database and output it to a web page.  jhchen, based on your comments in this thread, it sounds like you did not intend the editor to be used this way.  Is that true?  I also believe that the answer of using a read-only version of the editor to display back the content has many flaws.  Such as the fact that the content is loaded via javascript, thus requiring js to run on the page, and more importantly and it's not SEO friendly.  Just take a look at the comment box on this page.  It's a great example of an editor that stores the content as HTML and outputs the comments to the page server-side (likely not with javascript).  If this is not the intended use of the editor, I fear that it's failing to meet the needs of the majority of use cases for WYSIWYG editors on the web.  The reason I'm looking at Quill is because of its simplicity and consistency, but I want to be sure that using it for my application will not lead to problems down the road because I'm using it in a way that it's not intended.\n. ",
    "bram2w": "I found this solution at http://stackoverflow.com/questions/35135127/adding-a-function-to-array-prototype-in-ie-results-in-it-being-pushed-in-to-ever.\n. ",
    "punya": "Would you be willing to include a .d.ts file as part of the QuillJS package (and a corresponding entry in package.json)? That would make it easier for people to consume the typings and for them to stay up to date as the code changes.\n. Would you be willing to include a .d.ts file as part of the QuillJS package (and a corresponding entry in package.json)? That would make it easier for people to consume the typings and for them to stay up to date as the code changes.\n. You can certainly add @types/quill as a dependency, but it's better for\nmaintainers and consumers if you ship the .d.ts file as part of the\npackage. (Obviously, it's your decision in the end.)\n. You can certainly add @types/quill as a dependency, but it's better for\nmaintainers and consumers if you ship the .d.ts file as part of the\npackage. (Obviously, it's your decision in the end.)\n. ",
    "sumitkm": "Looking into this. I'll see how I can improve the namespaces and keep the DT team happy. They've gotten a lot pickier about global objects and insist on things being in their own namespace (hence the QuillJS wrapper).\n. Looking into this. I'll see how I can improve the namespaces and keep the DT team happy. They've gotten a lot pickier about global objects and insist on things being in their own namespace (hence the QuillJS wrapper).\n. Hi @hmtai6 I am not quite sure why you need /// <...> style import. I am assuming you are using it in a Node app? Here is an example of using it in Electron JS app\nThat's a KO Component though and uses RequireJS' AMD loader.\nI am a little rusty with Angular, but does it expect a certain type of module AMD/UMD/CommonJS ? \n. Hi @hmtai6 I am not quite sure why you need /// <...> style import. I am assuming you are using it in a Node app? Here is an example of using it in Electron JS app\nThat's a KO Component though and uses RequireJS' AMD loader.\nI am a little rusty with Angular, but does it expect a certain type of module AMD/UMD/CommonJS ? \n. @johnbendi Could you expand on how you are planning to use it. If you are using type-definitions from DefinitelyTyped, you will get an object with the shape defined in DeltaStatic interface. If you want to create a new object, you can try something like below:\nfunction test_updateContents() {\n    var quillEditor = new Quill('#editor');\n    quillEditor.updateContents(new Delta({\n        ops: [\n            { retain: 6 },        // Keep 'Hello '\n            { delete: 5 },        // 'World' is deleted\n            { insert: 'Quill' },  // Insert 'Quill'\n            { retain: 1, attributes: { bold: true } }    // Apply bold to exclamation mark\n        ]\n    }));\n}. @johnbendi Could you expand on how you are planning to use it. If you are using type-definitions from DefinitelyTyped, you will get an object with the shape defined in DeltaStatic interface. If you want to create a new object, you can try something like below:\nfunction test_updateContents() {\n    var quillEditor = new Quill('#editor');\n    quillEditor.updateContents(new Delta({\n        ops: [\n            { retain: 6 },        // Keep 'Hello '\n            { delete: 5 },        // 'World' is deleted\n            { insert: 'Quill' },  // Insert 'Quill'\n            { retain: 1, attributes: { bold: true } }    // Apply bold to exclamation mark\n        ]\n    }));\n}. @benbro My understanding at the time of writing the definition was QuillJS is the over-arching namespace containing definitions for Quill, Delta, Range, Clipboard etc. \nLater QuillJS was changed to Quill to align it with expectations of build tools making the namespace same as the editor class. Typescript team strongly suggests use of a namespace for a library rather than sticking everything globally. \nYou cannot use import { Quill } from \"quill\" because quill.d.ts its a type definition for a library (and not the library itself). Refer to the \"Consuming Dependencies\" section here http://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html \nYou have to use Quill.Quill only when you specifying type in TypeScript. These are then dropped by the TypeScript compiler when compiled to native.\nWhen instantiating Delta we have to remember to import the actual definition from the node module as @mdpye has shown above, again because actual definition of Delta is in the Quill library not in the quill.d.ts. Basically quill.d.ts definitions are just that, definitions. You still need to use the correct Node module imports as shown by @mdpye above. Hopefully @JordyVlassembrouck's error gets resolved with the import statement as well.\nThat's partly why they are defined as DeltaStatic in the quill.d.ts type definition. DeltaStatic simply defines the interfaces (or shape) for TypeScript compiler to type check against. You cannot instantiate a class from a typescript definition.\nFinally, as to the weird versioning, I'll follow up with the DefinitelyTyped team. They seem to have taken over the typings with the launch of Types 2 (and move to npm package manager). Last I checked the definitions were up to date.\n. @benbro My understanding at the time of writing the definition was QuillJS is the over-arching namespace containing definitions for Quill, Delta, Range, Clipboard etc. \nLater QuillJS was changed to Quill to align it with expectations of build tools making the namespace same as the editor class. Typescript team strongly suggests use of a namespace for a library rather than sticking everything globally. \nYou cannot use import { Quill } from \"quill\" because quill.d.ts its a type definition for a library (and not the library itself). Refer to the \"Consuming Dependencies\" section here http://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html \nYou have to use Quill.Quill only when you specifying type in TypeScript. These are then dropped by the TypeScript compiler when compiled to native.\nWhen instantiating Delta we have to remember to import the actual definition from the node module as @mdpye has shown above, again because actual definition of Delta is in the Quill library not in the quill.d.ts. Basically quill.d.ts definitions are just that, definitions. You still need to use the correct Node module imports as shown by @mdpye above. Hopefully @JordyVlassembrouck's error gets resolved with the import statement as well.\nThat's partly why they are defined as DeltaStatic in the quill.d.ts type definition. DeltaStatic simply defines the interfaces (or shape) for TypeScript compiler to type check against. You cannot instantiate a class from a typescript definition.\nFinally, as to the weird versioning, I'll follow up with the DefinitelyTyped team. They seem to have taken over the typings with the launch of Types 2 (and move to npm package manager). Last I checked the definitions were up to date.\n. @Muaadeeb Ctrl+C Ctrl+V seems to work for me as does image drag drop (Firefox on Debian Jessie)... Just that you have to work out the details of converting the Base64 encoded image on the server side when you try to save the content.\n. Can we please have the dist folder as a part of the bower installation also... pretty please!\n. Can we please have the dist folder as a part of the bower installation also... pretty please!\n. :100:  @murran Brilliant, that definitely beats maintaining a fork with the dist folder (as I was planning to do)!!!\n. :100:  @murran Brilliant, that definitely beats maintaining a fork with the dist folder (as I was planning to do)!!!\n. @alexkrolick yes, it does use a different registry. I am no expert, but I just looked up another library I use (require js) and the bower package for that doesn't point to the require code repo, instead it points to a repo that only has the release version of require.js. \nI can understand @jhchen 's reluctance to maintain it that way, does seem like a bit of hack.\nSo @murran 's solution is a nice middle ground (for me atleast) :-)\n. @alexkrolick yes, it does use a different registry. I am no expert, but I just looked up another library I use (require js) and the bower package for that doesn't point to the require code repo, instead it points to a repo that only has the release version of require.js. \nI can understand @jhchen 's reluctance to maintain it that way, does seem like a bit of hack.\nSo @murran 's solution is a nice middle ground (for me atleast) :-)\n. Doh! I'll put that down to PBKAC error... the toolbar handler docs does mention it first thing!\n. Doh! I'll put that down to PBKAC error... the toolbar handler docs does mention it first thing!\n. @rajivchugh @arahansen when using TypeScript are you referencing type-definitions for Parchment as well?\nI maintain the quill type def on DefinitelyTyped and I have not included the Parchment definitions because Parchment is written in TS and now exposes its own definitions.\nI am going to give your code a spin and see if I can help with the Quill Definitions in any way. They need an upgrade anyways.. @rajivchugh @arahansen when using TypeScript are you referencing type-definitions for Parchment as well?\nI maintain the quill type def on DefinitelyTyped and I have not included the Parchment definitions because Parchment is written in TS and now exposes its own definitions.\nI am going to give your code a spin and see if I can help with the Quill Definitions in any way. They need an upgrade anyways.. Thanks @jhchen, happy to make a tiny contrib to the awesome \"Quill\" :-). Thanks @jhchen, happy to make a tiny contrib to the awesome \"Quill\" :-). ",
    "hmtai6": "I try to use Quill with angular 2(angular-cli), but I got error when ng serve\nError message: Cannot find module 'Quill'.\nIn component,\nI use \nimport * as Quill from 'Quill';\n, then i got build error\nI have already added\n\"@types/quill\": \"0.0.26\",\n\"quill\": \"^1.0.4\",\nto package.json as dependencies\nAnyone can share your experience of adding Quill to your project?\n\nI found a solution\nuse \n/// \ninstead of   import * as Quill from 'Quill';\nI don't know why it works.\n. ",
    "johnbendi": "How does one use the Delta var from the quill module?. ",
    "JordyVlassembrouck": "Bump.\n@benbro, yes, that seems the correct way to use the Quill constructor, however, something seems wrong with the definition file.\nI have the same issue as @johnbendi and @benbro.\nI'm using \"quill\": \"^1.2.2\" as dependency and \"@types/quill\": \"^0.0.29\" as devDependency.\nWhenever I try to use the Delta constructor, I get an error message in the browser which says: 'WEBPACK_IMPORTED_MODULE_3_quill.Delta is not a constructor'\nAny help would be highly appreciated!. Bump.\n@benbro, yes, that seems the correct way to use the Quill constructor, however, something seems wrong with the definition file.\nI have the same issue as @johnbendi and @benbro.\nI'm using \"quill\": \"^1.2.2\" as dependency and \"@types/quill\": \"^0.0.29\" as devDependency.\nWhenever I try to use the Delta constructor, I get an error message in the browser which says: 'WEBPACK_IMPORTED_MODULE_3_quill.Delta is not a constructor'\nAny help would be highly appreciated!. @michaelhertig , the problem does not seem to be solved. I think it has something to do with the type definition or the way the classes are exported.\nAnyway, we solved it the following way:\n```javascript\nimport * as Delta from 'quill-delta/lib/delta';\nconst delta = new Delta(jsonObject);\n```\nDirectly importing Delta seems to work.. @michaelhertig , the problem does not seem to be solved. I think it has something to do with the type definition or the way the classes are exported.\nAnyway, we solved it the following way:\n```javascript\nimport * as Delta from 'quill-delta/lib/delta';\nconst delta = new Delta(jsonObject);\n```\nDirectly importing Delta seems to work.. ",
    "mdpye": "After much prodding:\n```\nimport * as Delta from 'quill-delta';\nlet d = new Delta({ insert: 'text' });\n```. Installing a previous version of jekyll works. I added the following Gemfile to my clone and used bundler:\n```\nsource 'https://rubygems.org'\ngem 'jekyll', '3.2.1'\ngem 'jekyll-sitemap'\ngem 'jekyll-redirect-from'\ngem 'jekyll-feed'\ngem 'foreman'                                                                                                                                                                     \n```\nMore recent versions of jekyll might work, but I just jumped back far to be sure.\nI'd suggest to the Quill maintainers that they should include a Gemfile in the main distribution in order to specify their expect versions.. Without much knowledge of the architecture, the obvious fix appears to be to transform the saved selection appropriately when the contents of the editor are manipulated. However, from what you say about native selection and fall-back to a saved selection, I imagine this is not completely straightforward if there isn't a single source of truth.\nStill happy to work on a patch if you can give a quick overview of how selections are handled in general.. Amended to use github-pages.\nThe Gemfile could either be left as a guide and tool people people who need it, or, in order to produce a repeatable environment, the relevant npm scripts could be prepended with bundle exec to ensure that the exact versions specified are in fact being used.. ",
    "hertg": "Are there any news to this?\n@JordyVlassembrouck \nI am getting the same error like you, did you manage to solve it somehow?\npackage.json:\n```package.json\n\"devDependencies\": {\n   \"@types/quill\": \"*\"\n}\n\"dependencies\": {\n   \"quill\": \"^1.3.1\"\n}\n```\nTypescript:\n```typescript\nimport * as Quill from \"quill\";\nlet editor = new Quill.Quill('.quill');\n**Console Output:**console\nUncaught TypeError: Quill.Quill is not a constructor\n```. @benbro @JordyVlassembrouck \nThanks for your answers. \nYes, i am trying to implement Quill not Delta.\nHowever, neither of your suggestions worked for me. Even with the newest typings you mentioned. \nI will post it here, if i find a solution to my problem.\n. @benbro \nYes, i got it working too. I implemented it like that:\n```typescript\nimport * as Quill from \"quill\";\nlet quill : any = Quill; //this one is important, otherwise 'Quill' is undefined\nlet editor = new quill('.quill');\n```\nThanks so much for your help. . ",
    "maximkornilov": "@michaelhertig \nI encountered the same problem as you. I would like to use only quill delta. \nI ended with creating the temporary repository with type definitions for quill-delta only. \nThis package can be installed directly from GitHub. \nIt allows to reference to quill delta the following way:\n```\nimport {default as Delta, DeltaStatic} from \"quill-delta\"\nconst delta: DeltaStatic = new Delta();\n```\nInstallation instructions can be found here . ",
    "KillerCodeMonkey": "@michaelhertig but with your solution you loose all the benefits of using the quill typings...\ni do not know how the testcases in definitelytyped are executed, because they are running and working, but i can not get it working with real quilljs.. i wrote a wrapper for angular purposes: \nhttps://github.com/KillerCodeMonkey/ngx-quill\nAnd here is a simple example with ionic 3:\nhttps://github.com/KillerCodeMonkey/ngx-quill-ionic-v3. ",
    "mrowles": "Did anyone resolve this? 7-ish months later and I'm still experiencing the same issues (as in, no perfect use case):\n\"devDependencies\": {\n   \"@types/quill\": \"^1.3.6\"\n},\n\"dependencies\": {\n   \"quill\": \"^1.3.6\"\n}. Did anyone resolve this? 7-ish months later and I'm still experiencing the same issues (as in, no perfect use case):\n\n\"devDependencies\": {\n   \"@types/quill\": \"^1.3.6\"\n},\n\"dependencies\": {\n   \"quill\": \"^1.3.6\"\n}. @hchings Cheers! However, it seems like adding the `declare var Quill: any;` overrides the `import Quill from 'quill';` so this might be redundant. Still don't think this solves the foundations of the problem unfortunately :(. The code in the issue raised worked for me: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18946. Still doesn't work, using `^1.3.6` here. Still doesn't work, using `^1.3.6` here. **Use case:**\n\nPopulating with dynamic lists (as above). I use the placeholder module with a list of entities the user can add elsewhere on the page, so in two ways this would be useful 1) populating after successful http req + 2) dynamically on the client side as user interacts. Use case:\nPopulating with dynamic lists (as above). I use the placeholder module with a list of entities the user can add elsewhere on the page, so in two ways this would be useful 1) populating after successful http req + 2) dynamically on the client side as user interacts. ",
    "n1ghtmare": "@mdpye Dude you saved me! Cheers!. @rafalolszewski94 Cool, thanks for sharing, much appreciated! I was wondering, how do you handle a user deleting an image that he previously uploaded to the server? As in - he attaches it (which uploads it on the server), then decides to remove it.. ",
    "giniedp": "Quill needs to add the following line\n\"module\": \"quill.js\"\ninto its package.json. This will solve the issue for all folks that are using a bundler like rollup or webpack.\n. For now i use an alias when compiling with webpack. My webpack config looks like this\n{\n  resolve: {\n    alias: { quill: path.join(process.cwd(), \"node_modules\", \"quill\", \"quill.js\") }\n  }\n  // ...\n}\nI get the typings for the \"quill\" library from \"@types/quill\" and can use quill import like\nts\nimport Quill from \"quill\"\nor\nts\nimport { default as Quill, DeltaOperation } from \"quill\"\nBut now i want to make use of the Delta. I have to import it like\nts\nimport * as Delta from \"quill-delta\"\nhere i don't have typings.\nI see that the \"parchment\" is already implemented in typescript. Are you going to rewrite all quill libraries in typescript? This would be great for the whole project. I offer my help if you need it.. ",
    "fnemec": "Just add charset=\"UTF-8\" to your script tag and you're good.\n<script src=\"quill/quill.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n. ",
    "clemmy": "Upon further analysis, it looks like query(input) is returning a Text element inside Firefox (where the behaviour is correct). However, query(input) is returning <b>X</b> in Chrome, which leads to a logic path that throws an error.\n. Upon further analysis, it looks like query(input) is returning a Text element inside Firefox (where the behaviour is correct). However, query(input) is returning <b>X</b> in Chrome, which leads to a logic path that throws an error.\n. ",
    "NekR": "I think it's not fixed. I have following options:\njs\nconst toolbarOptions = [\n  ['align'],\n  [{ align: 'right' }],\n  [{ align: 'center' }],\n  [{ align: 'justify' }],\n];\nAnd when I set something to be aligned to right/center/justify then align left is also highlighted.\nOther moments:\n['align'] and [{ align: null }] -- display align to left\n[{ align: 'left' }] and [{ align: false }] -- display empty button. That isn't possible because you cannot override browser behavior. Very simple example: IE return html in ALL CAPS.. ",
    "clementprdhomme": "Hey @NekR ,\nI had the exact same issue and I realised you have to define your options this way:\njavascript\nconst toolbarOptions = [\n  [{ align: '' }],\n  [{ align: 'right' }],\n  [{ align: 'center' }],\n  [{ align: 'justify' }],\n];\nJust make sure that align is an object with an empty string as value. This worked for me with the bubble theme.\nCl\u00e9ment\nPS: I use version 1.2.0.. ",
    "dmonad": "@sahanDissanayake To my understanding you are right. But you are facing a different issue. I explicitly stated that the inserted text should not be bold, but it turned out to be bold. I think you should open another issue with steps to reproduce your issue.\n. @sahanDissanayake To my understanding you are right. But you are facing a different issue. I explicitly stated that the inserted text should not be bold, but it turned out to be bold. I think you should open another issue with steps to reproduce your issue.\n. @jhchen I agree with you, but that is very unsatisfying to everyone who is using bower instead of npm. Maybe it makes sense to add @murran's workaround to the documentation. This would be very helpful to others facing the same problem.\nI create commits that are not tracked by a branch for my releases. This is a great solution for me, as dist files don't bother me when merging, etc. For example:\n% publish a new version\n$ git checkout --detach\n$ git add ./dist/* -f\n$ git commit -am \"dist files for v${p.version}\"\n$ git tag v${p.version}\n$ git push origin v${p.version} % push the tag\n$ git checkout master\nI'd be happy to create a pull request with an updated publishing script.\n. @jhchen I agree with you, but that is very unsatisfying to everyone who is using bower instead of npm. Maybe it makes sense to add @murran's workaround to the documentation. This would be very helpful to others facing the same problem.\nI create commits that are not tracked by a branch for my releases. This is a great solution for me, as dist files don't bother me when merging, etc. For example:\n% publish a new version\n$ git checkout --detach\n$ git add ./dist/* -f\n$ git commit -am \"dist files for v${p.version}\"\n$ git tag v${p.version}\n$ git push origin v${p.version} % push the tag\n$ git checkout master\nI'd be happy to create a pull request with an updated publishing script.\n. ",
    "webcarrot": "Change onCut in /modules/clipboard.js :\njs\n  onCut(e) {\n    if (e.defaultPrevented) return;\n    this.onCopy(e);\n    let range = this.quill.getSelection();\n    this.quill.deleteText(range, Quill.sources.USER);\n    this.quill.setSelection(range.index, Quill.sources.SILENT);\n  }\nto:\njs\n  onCut(e) {\n    if (e.defaultPrevented) return;\n    this.onCopy(e);\n  }\nor ?:\njs\n  onCut(e) {\n    if (e.defaultPrevented) return;\n    this.onCopy(e);\n    setTimeout(()=>{\n        let range = this.quill.getSelection();\n        this.quill.deleteText(range, Quill.sources.USER);\n        this.quill.setSelection(range.index, Quill.sources.SILENT);\n    },0);\n  }\n. ",
    "mdedetrich": "Whoops, wrong Quill... Apologies\n. ",
    "dhershman1": "I still seem to be having issues with when I start a code block and then click it again to end or try to leave the code block I am stuck, if I don't leave a space to click out of I would be stuck unless I created a blockquote or something else \n. I still seem to be having issues with when I start a code block and then click it again to end or try to leave the code block I am stuck, if I don't leave a space to click out of I would be stuck unless I created a blockquote or something else \n. Well that explains it, I guess I didn't notice when I looked lol.\n. Well that explains it, I guess I didn't notice when I looked lol.\n. quill.min.js:formatted:2415 Uncaught TypeError: Cannot read property 'length' of undefined\nDelta.insert @ quill.min.js:formatted:2415\ne @ jquery.min.js:4G\nb @ jquery.min.js:4G\nb @ jquery.min.js:4n.para\nm @ jquery.min.js:4\najax @ jquery.min.js:4\nfetch @ submit-mod.js:18\nsendMod @ client.js:96\nsubmission @ client.js:92\ndispatch @ jquery.min.js:3\nr.handle @ jquery.min.js:3\nThis gets called on the submission portion when I cam getting all my data together to send off to my server.\n. quill.min.js:formatted:2415 Uncaught TypeError: Cannot read property 'length' of undefined\nDelta.insert @ quill.min.js:formatted:2415\ne @ jquery.min.js:4G\nb @ jquery.min.js:4G\nb @ jquery.min.js:4n.para\nm @ jquery.min.js:4\najax @ jquery.min.js:4\nfetch @ submit-mod.js:18\nsendMod @ client.js:96\nsubmission @ client.js:92\ndispatch @ jquery.min.js:3\nr.handle @ jquery.min.js:3\nThis gets called on the submission portion when I cam getting all my data together to send off to my server.\n. Stack with unminified version:\nquill.js:2439 Uncaught TypeError: Cannot read property 'length' of undefined\nDelta.insert @ quill.js:2439\ne @ jquery.min.js:4G\nb @ jquery.min.js:4G\nb @ jquery.min.js:4\nn.param @ jquery.min.js:4\najax @ jquery.min.js:4\nfetch @ submit-mod.js:18\nsendMod @ client.js:96\nsubmission @ client.js:92\ndispatch @ jquery.min.js:3\nr.handle @ jquery.min.js:3\nMy wording was a bit funky its just trying to set the contents that return from the getContents() call to a variable.\n. Stack with unminified version:\nquill.js:2439 Uncaught TypeError: Cannot read property 'length' of undefined\nDelta.insert @ quill.js:2439\ne @ jquery.min.js:4G\nb @ jquery.min.js:4G\nb @ jquery.min.js:4\nn.param @ jquery.min.js:4\najax @ jquery.min.js:4\nfetch @ submit-mod.js:18\nsendMod @ client.js:96\nsubmission @ client.js:92\ndispatch @ jquery.min.js:3\nr.handle @ jquery.min.js:3\nMy wording was a bit funky its just trying to set the contents that return from the getContents() call to a variable.\n. Yeah you're correct it is for sure something I am doing incorrectly. I just need to figure out what lol.\nEDIT:\nSo I fixed it by instead of setting my variable directly to the return of the function like this:\njs\nvar test = quill.getContents();\nTo something like this:\n``` js\nvar foo = quill.getContents();\nvar bar = foo.opts;\n```\nI am no longer getting my error and everything is processing as intended.\n. Yeah you're correct it is for sure something I am doing incorrectly. I just need to figure out what lol.\nEDIT:\nSo I fixed it by instead of setting my variable directly to the return of the function like this:\njs\nvar test = quill.getContents();\nTo something like this:\n``` js\nvar foo = quill.getContents();\nvar bar = foo.opts;\n```\nI am no longer getting my error and everything is processing as intended.\n. ",
    "neandrake": "I've only been trying out the demo available on the primary landing page, but this doesn't appear to be working correctly when using Backspace to delete middle items. It does work when using Delete. I'm using Firefox 48.0.1 on OSX 10.11.6.\nMy steps are:\n1. From demo on http://quilljs.com/, remove all content\n2. Add an Ordered list item\n3. Add 3 items to the list\n4. Remove content of item 2 so it is empty\n1. Use Backspace (on mac just \"delete\"), which should remove content prior to the cursor, or\n2. Use Delete (on macbook, \"fn\" + \"delete\"), which should remove after the cursor\n. Awesome, thank you!\n. ",
    "dhawalbhanushali": "Apologies.\nCorrected API: \nsetHTML('hello,'); \nsetHTML(getHTML() + 'how are you?');\n. Apologies.\nCorrected API: \nsetHTML('hello,'); \nsetHTML(getHTML() + 'how are you?');\n. Is there any way we can avoid or manipulate this default quill structure? Yes I looked through the APIs but 'getHTML()' and 'set HTML()' are the ones that serve the purpose. In any way can CSS help me achieve the desired output?\n. Is there any way we can avoid or manipulate this default quill structure? Yes I looked through the APIs but 'getHTML()' and 'set HTML()' are the ones that serve the purpose. In any way can CSS help me achieve the desired output?\n. I want to append a new span to an editor that already has some content. Newly added content should not  default to new line. Rather it should fit inline if there is space available.\nExample: Editor Contains\n<div><span>Hi</span></div>\nOn adding 'How are you?' it should output\n<div><span>Hi</span><span>How are you?</span></div>\nand not\n<div><span>Hi</span></div<div><span>Hi</span></div>\n. I want to append a new span to an editor that already has some content. Newly added content should not  default to new line. Rather it should fit inline if there is space available.\nExample: Editor Contains\n<div><span>Hi</span></div>\nOn adding 'How are you?' it should output\n<div><span>Hi</span><span>How are you?</span></div>\nand not\n<div><span>Hi</span></div<div><span>Hi</span></div>\n. I am losing the HTML upon the use of insertText. Thank you for being patient. Will check what suits me the best.\n. I am losing the HTML upon the use of insertText. Thank you for being patient. Will check what suits me the best.\n. ",
    "charlesverge": "https://github.com/quilljs/quill/pull/1992 This is a patch for #801, a few notes.\n\nI looked into doing unit tests but that would add a dependency on for katex and did not add any\nWith this modification the tool tip does not have a preview, it goes straight to editing. There is some pro's and cons to this\nOn chrome the area which triggers the selection event does not cover the entire formula, this is likely a separate issue, on larger formula's it is about 80% on smaller formula's it's the first character.\n\nThe following is the configuration I used for testing.\n````\n<!DOCTYPE html>\n\n\nFormula Module - Quill Rich Text Editor\n\n\n\n Include Quill stylesheet \n\n\n Create the editor container \n\nHello World!\n\n Include the Quill library \n\n\n Initialize Quill editor \n\n  var editor = new Quill('#editor', {\n    modules: {\n      formula: true,          // Include formula module\n      toolbar: [['formula', 'link']]  // Include button in toolbar\n    },\n    theme: 'snow'\n  });\n\n\n````. @jhchen I agree, it needs some improvement on the selectors for the event listeners to solve this problem. I've run out time for this modification and it's open for anyone to improve upon.. @jhchen The primary reason why I decided to opt out of continuing with the fix due to the lack of tables support in the editor. When support for tables is ready maybe I'll swing back to this.. ",
    "harrison0723": "I would like to request this feature as well, since MathQuill is undoubtedly the best formula editor out there in terms of user experience.\n. @fsaenger This would really limit the audience to those more familiar with the syntax. WYSIWYGs always have a much larger audience. Think why Quill exists in the first place? Why can't everyone just write HTML?\nHope you get my point :) \n. @fsaenger I just checked and it's true that MathQuill is not entirely WYSIWYG, but it is the closest thing that is to it. With a few buttons to replace the very few syntax users are required to know, you can make it entirely WYSIWYG. That's what I have done for my app (almost out to production), which is why I mistakenly assumed it to be WYSIWYG.\nIn short, it is the closest thing to WYSIWYG, and executable to make it WYSIWYG.\n. ",
    "BenAsaf": "+1\n. ",
    "timeswind": "+1\n. +1\n. I also have this problem. ",
    "fsaenger": "Have you guys seen how Dropbox Paper includes formulae and latex in documents?\nI'm mentioning this since you are talking about the user experience.\nTo use MathQuill, the user needs to know latex. MathQuill then just renders the input into a more graphical formula while typing. It makes it easier in some ways, because users see the result of their code immediately, but it doesn't remove the need to learn latex.\nIn contrast, Dropbox Paper just switches to a full latex code view once the user clicks the formula. In my opinion this is less confusing since it is showing me what I had to write anyway \u2013 the latex code.\nSo all in all, I dare to say that Paper's approach is much easier to implement and would show better results if you were to conduct usability tests with users. I haven't done any, though, so this is just a gut feeling.\nEdit: The pure fact that there is a \"cheat sheet\" is a good clue that MathQuill is not the non plus ultra in terms of user experience.\n. Here is a quick animation showing how Dropbox Paper works, for those of you who are not using it:\n\n. @harrison0723 MathQuill is not really WYSIWYG, it's a live preview. You have to know the syntax to be able to write the formula. This makes the user experience even worse than either just writing the syntax or getting a real WYSIWYG (more like LibreOffice Math or whatever it's called).\nIt's like writing a strong tag in HTML around a work and once you've completed writing the closing tag, the expression gets converted into an actual bold preview. This is not a good experience, and I hope you get that point too ;)\n. ",
    "xiaokaike": "How to re-edit the formula ?\n\nhow about click the formula to re-editt \n. ",
    "c-w": "@benbro @harrison0723 @timeswind @BenAsaf @tscholl2 @guillefix: In case you are still looking for a way to improve the math authoring experience in Quill, take a look at my mathquill4quill module which monkey-patches MathQuill into Quill.. Sounds like the same issue as #1181.. ",
    "fernandogmar": "Thanks @jhchen \nI read it that before, but I couldn't guess how to do what I needed with that description. I miss more real examples there. So I thought maybe there was something else. Notice that even I don't know how to do what you suggested \"to remove the Clipboard matchers\" with that documentation.\nAnyway I was playing with the playground on the page, pasting content works I would expect there. So I have spent the full morning trying to guess what was the problem and it seems it was related with having custom.snow.css included... Finally what I did was to upgrade it to the last version beta.9... and  redo some work based on this version.\nThanks again!\n. Hi guys,\nThere is another concern, quill.root.innerHTML returns the html, right?\nAs I could check .ql-editor  class that use white-space: pre-wrap; so you can notice when you are typing multiple white spaces: hello----there (using dashes for better visualization of the spaces). But saving and showing later the html from quill.root.innerHTML will show just: hello there.\nA similar problem already fixed on quilljs it is when you add break lines that creates a new line as follow <p></br><p> and when you get the text this is transformed to \\n\nFollowing this solution for break lines.... I think something similar should happen with white spaces\nwhen you get the html it should be something as: hello&nbsp;&nbsp;&nbsp;&nbsp;there when you get the  text it should be something as:  hello----there (using dashes for better visualization of the spaces). Since you are editing WYSIWYG... so the user is adding 4 spaces conciously, so he wants 4 spaces no only one! :D\nIt is fair that quilljs doesn't want to face html transformation problems, but at least it should be worried about how these deltas can be consume as html...  some guides? a different tool? :D In other case this kind of problems would be a cons to adopt quilljs :'(\nThanks for all guys!. Because this data is used as html so the problem will be always there. From\nmy point of view deltas only make sense on editing, and always you use\nquilljs\n2017-02-26 23:31 GMT+01:00 York notifications@github.com:\n\n@fernandogmar https://github.com/fernandogmar Why not persist content\nusing delta as json format? I tested and delta will retain multiple spaces.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/903#issuecomment-282593801, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAzFDKuDHRLMdQv9qpdvRrI368dIBU83ks5rgf04gaJpZM4JxmF1\n.\n. [ROOKIE ERROR]\nJust for fixing the issue... I decided replace ' ' (character space)  by &nbsp; so having two spaces '  ' --> &nbsp;&nbsp; , awesome.... but the problem came &nbsp; doesn't follow the same rules as ' ' (space character)...\n\nthat means the line wouldn't be broken in case it were needed... as (his name shows up Non breaking space)\nSearching about this kind of problems it looks like there are more space characters that I already knew: https://en.wikipedia.org/wiki/Whitespace_character\nalternative workarounds:\n- use EN SPACE &ensp;\n- mix NBSP and ' ' character spaces\n- mix NBSP with <wbr> (the zero width space)\n- using padding with a custom tag\nsome detailed white spaces:\n- NBSP\n- Zero width Space. ",
    "nitaskenderi": "I too like @adamkdean have trouble understanding how the addMatcher( ) should work... I have been studying the examples here https://quilljs.com/docs/modules/clipboard/ and have been trying to reproduce them but they do not work. \nOr maybe I might be doing something wrong because I have noticed that when I am pasting simple text or something with a < b > tag (as in the examples) the addMatcher( ) callback function is never called!\nAlso it would be nice if there was some documentation that lets you know what String formats the addMatcher accepts as its first parameter, for e.g. \"B\" is for < b > but I have no idea what works for < a >, is it \"A\" or \"a\" or none of these? It would be nice if there was a list somewhere listing all the possible options that Quill.js recognizes.... I too like @adamkdean have trouble understanding how the addMatcher( ) should work... I have been studying the examples here https://quilljs.com/docs/modules/clipboard/ and have been trying to reproduce them but they do not work. \nOr maybe I might be doing something wrong because I have noticed that when I am pasting simple text or something with a < b > tag (as in the examples) the addMatcher( ) callback function is never called!\nAlso it would be nice if there was some documentation that lets you know what String formats the addMatcher accepts as its first parameter, for e.g. \"B\" is for < b > but I have no idea what works for < a >, is it \"A\" or \"a\" or none of these? It would be nice if there was a list somewhere listing all the possible options that Quill.js recognizes.... Yes that is how I understood it.. Well then I must be having some trouble using the actual function. Here is how I have been trying to use it:\n```\nmessageBox = new Quill('#' + containerId, {\n            placeholder: 'Write a message...',\n            modules: {\n                \"toolbar\": false,\n                keyboard: {\n                    bindings:\n                    { enter: {\n                            key: 13,\n                            handler: handleEnter\n                        }\n                    }\n                }\n            }\n        });\nmessageBox.clipboard.addMatcher('B', function(node, delta) {\n  //debugger;\n  return delta.compose(new Delta().retain(delta.length(), { bold: true }));\n});\nmessageBox.clipboard.addMatcher('a', function(node, delta) {\n  //debugger;\n  return delta.compose(new Delta().retain(delta.length(), { color: \"red\"}));\n});\n```\nSo I basically just used the example given in the documentation and then tried to add my own version, but when I paste in html with a < b > tag or a link, it never enters the addMatcher( ) callback function... How do I fix this? I really need to set my own rules for when pasting HTML into the editor because I will only accept two or three HTML elements, everything else has to be pasted as plain text.. Yes that is how I understood it.. Well then I must be having some trouble using the actual function. Here is how I have been trying to use it:\n```\nmessageBox = new Quill('#' + containerId, {\n            placeholder: 'Write a message...',\n            modules: {\n                \"toolbar\": false,\n                keyboard: {\n                    bindings:\n                    { enter: {\n                            key: 13,\n                            handler: handleEnter\n                        }\n                    }\n                }\n            }\n        });\nmessageBox.clipboard.addMatcher('B', function(node, delta) {\n  //debugger;\n  return delta.compose(new Delta().retain(delta.length(), { bold: true }));\n});\nmessageBox.clipboard.addMatcher('a', function(node, delta) {\n  //debugger;\n  return delta.compose(new Delta().retain(delta.length(), { color: \"red\"}));\n});\n```\nSo I basically just used the example given in the documentation and then tried to add my own version, but when I paste in html with a < b > tag or a link, it never enters the addMatcher( ) callback function... How do I fix this? I really need to set my own rules for when pasting HTML into the editor because I will only accept two or three HTML elements, everything else has to be pasted as plain text.. Okay, will do. Thank you!. Okay, will do. Thank you!. @mkallies I also have this issue and according to the tests I have done, I have noticed that the quill getSelection() does not return the correct caret index and I think this is due to the span.atwho-query, whom Quill does not recognize. \n@adamkdean how do you get the lastTextChangeIndex? I want to try your method but I am not sure how you get this value?. @mkallies I also have this issue and according to the tests I have done, I have noticed that the quill getSelection() does not return the correct caret index and I think this is due to the span.atwho-query, whom Quill does not recognize. \n@adamkdean how do you get the lastTextChangeIndex? I want to try your method but I am not sure how you get this value?. @mkallies thank you so much for sharing your solution, this has totally fixed my problem! . @mkallies thank you so much for sharing your solution, this has totally fixed my problem! . @rifkegribenes I am not sure if this will help, but why don't you try creating your own image BlockEmbed and set the alt attribute in its constructor? I do this for my own custom Emoji and adding the alt attribute is very easy in this way.... @rifkegribenes I am not sure if this will help, but why don't you try creating your own image BlockEmbed and set the alt attribute in its constructor? I do this for my own custom Emoji and adding the alt attribute is very easy in this way.... Thank you very much @jhchen, this solved my problem :). Thank you very much @jhchen, this solved my problem :). ",
    "chillyistkult": "I can't find matchVisual property in the documentation that you linked. Is there any up to date solution for this problem?. ",
    "trfletch": "@chillyistkult For some reason, they have removed it from the documentation but the option is still available, you can find the documentation that does include it using WayBackMachine website, link as follows:\nhttps://web.archive.org/web/20170807100811/http://quilljs.com:80/docs/modules/clipboard/\n. @chillyistkult For some reason, they have removed it from the documentation but the option is still available, you can find the documentation that does include it using WayBackMachine website, link as follows:\nhttps://web.archive.org/web/20170807100811/http://quilljs.com:80/docs/modules/clipboard/\n. ",
    "jackmu95": "@jhchen I need a t least two types of different links. I use the default link format for external links and the custom link format for internal links.\nThe problem exists for any custom format which uses A as tagName.\n. @jhchen I tried to handle it with a keyboard handler but there is no way to override the default ENTER handler because ist prevents propagation.\nWould it be better to create a custom Block format that has the custom link as child node?\nThe custom link should also be not editable.\n. Here the delta to reproduce it:\n{\"ops\":[{\"insert\":\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"},{\"attributes\":{\"align\":\"right\"},\"insert\":\"\\n\"},{\"insert\":\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"},{\"attributes\":{\"align\":\"center\"},\"insert\":\"\\n\"}]}\nAnd here is the fix aa26d1d972dabca6acd9c31f71e87e6dde1d55ef.\n. A global image handler seems like a goog idea. That would allow the user to override the default behavior that the image get's encoded to a base64 string.\nWhere would you place such an handler?\n. I believe I found quite some good solution for the global image handling problem:\ncde6b02ec291a0d1d4965c9bd28215e33ca42f57\nThis commit introduces a new insertImage function. It takes four arguments:\n- index - The index to insert the image\n- value - The value which can be either a URL string or a file object\n- source - The quill emitter source\n- handler - An optional file object handler function\nThe interesting part here is the optional handler function parameter. The default handler generates a Base64 encoded string from the given file object. A custom handler could upload the image to a server for example. Therefore the handler function are given two parameters:\n- value - The file object that was given to the insertImage function\n- callback - A callback function to return the URL to\n. Your upload function needs to return the URL of the image with the callback:\njavascript\nfunction upload(file, callback) {\n  var formData = new FormData();\n  formData.append('file', file);\n  $.ajax({\n     url : '/mysite/upload/',\n     type : 'POST',\n     data : formData,\n     processData: false,\n     contentType: false,\n     success: function(data) {\n       callback(data.url);\n     }\n  });\n}\nMy suggested solution has one big problem as I see now. You need to override the internal insertImage function calls in order to pass the custom handler to it...\njavascript\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: {\n      handlers: {\n        image: function(value) {\n          let fileInput = this.container.querySelector('input.ql-image[type=file]');\n          if (fileInput == null) {\n            fileInput = document.createElement('input');\n            fileInput.setAttribute('type', 'file');\n            fileInput.setAttribute('accept', 'image/*');\n            fileInput.classList.add('ql-image');\n            fileInput.addEventListener('change', () => {\n              if (fileInput.files != null && fileInput.files[0] != null) {\n                let range = this.quill.getSelection(true);\n                let index = range.index + range.length;\n                this.quill.insertImage(index, fileInput.files[0], 'user', upload);\n              }\n            });\n            this.container.appendChild(fileInput);\n          }\n          fileInput.click();\n        }\n      }\n    }\n  }\n});\nA solution for addressing this issue would be to pass the image handler (upload function) with the options.\n. I have reconsidered my initial idea to resolve the image handling problem and came up with a solution that provides the user a way to pass a custom imageHandler with the Quill options to override a default handler. This handler can be used throughout the Quill instance to handle image objects.\nHere is the commit: https://github.com/jackmu95/quill/commit/2a2796a9c1f8054aed75159d4424cb852002bcf0 \n. I have updated my initial approach to a more efficient one and support even more color formats.\nSupported formats:\n- #ff0000\n- #FF0000\n- rgb(255,0,0)\n- rgb(255, 0, 0)\n. @jhchen I'am with you that this implementation isn't perfect but it was the only solution I could came up with until now.\n. The value for the color format is fixed to HEX values.\nWhat about normalizing the color values in the color picker to lowercase HEX values?\n. Please take a closer look at http://quilljs.com/docs/api/#import.\nTo access the Keyboard module you could simply import it like this:\njavascript\nvar Keyboard = Quill.import('modules/keyboard');\n. @jhchen This commit is just a quick fix for the missing icon. Better two times the same icon as no icon ;)\nIn general it would be good if there are two different icons for 'code' and 'code-block'. \n. The custom handler configuration is pretty well documented.\nPlease take a look at this.\n. The Delta format is designed to be compact. So the following Delta is invalid:\njavascript\nvar delta = [\n  { retain: 5 },\n  { delete: 0 }, // Not compact. Length should be greater than zero.\n  { insert: { image: 'https://avatars0.githubusercontent.com/u/7089101?v=3&s=200' } }\n];\nAnyway...\n\nI think the length of the op should be set in a more robust way rather than via the OR concatenation check that is happening in https://github.com/quilljs/quill/blob/develop/core/editor.js#L29.\n\n@w00fz I'am with you here.\n. @AbrahamChin It's not that easy to include the changes of my PR into the production builds so I made a Demo to showcase how it would work when my PR get's merged.\nhttp://codepen.io/jackmu95/pen/EgBKZr\n. @AbrahamChin As you can see in my example the image is uploaded to a server (in my case Imgur) and the response from the server returns the image URL. This URL needs to be passed to the callback function.\n. Ok, so this PR is pointless then.\n. @jhchen Nice, thanks!. Thanks, I'll switch that.\n. Isn't it better to make sure that the data-placeholder attribute is set before we set the EDITOR_CHANGE listener to set the ql-blank class which depends on this attribute?\nBy the way, it was the same order before my initial commit.\n. > I think the CSS rules will work either way.\nThey will, but I think it's important to ensure a logical order.\nWhat about moving it right after the this.root initialization? \n. Ok, I'am with you. But I think the this.options.readOnly should be last.\n. What do you think about reassigning the html variable with the complete contents to shorten line length?\njavascript\nlet html = this.container.innerHTML.trim();\n...\nhtml = `<div class='ql-editor' style=\"white-space: normal;\">${html}<p><br></p></div>`;\nlet contents = this.clipboard.convert(html);\nthis.setContents(contents);\n. The other modules are imported in a alphabetical order; so this should be at the top.\n. Same as above.\n. ",
    "julian-weinert": "Okay. I observed it a bit deeper.\nWhen all text has the same style, this style gets returned. That's okay, but unfortunately not extremely helpful. Probably you could take this wording kinda into account.\n. Oh shame on damn stupid me, I'm sorry!\nSure, that is exactly what I was looking for, apparently I didn't see the wood for the trees.\nHearts for the 19 letter long text \ud83d\ude02\n. ",
    "crisbeto": "I'm pasting it from here. Also here's a recording of the steps that I'm taking:\n\n. ",
    "stalniy": "the issue is in https://github.com/quilljs/quill/blob/develop/modules/toolbar.js#L87\nthere is no way to pass false as a button value\n. the issue is in https://github.com/quilljs/quill/blob/develop/modules/toolbar.js#L87\nthere is no way to pass false as a button value\n. @jhchen Hi, could you please tell where you would like these tests to be in test/ folder?  https://github.com/quilljs/quill/blob/develop/test/unit/blots/block-embed.js  or a separate file for like test/unit/theme/base.js . @jhchen Hi, could you please tell where you would like these tests to be in test/ folder?  https://github.com/quilljs/quill/blob/develop/test/unit/blots/block-embed.js  or a separate file for like test/unit/theme/base.js . @jhchen could you please answer the question above? It's critical for me to have this and I can finish the pull request (i.e., add tests). @jhchen could you please answer the question above? It's critical for me to have this and I can finish the pull request (i.e., add tests). As a workaround you can create own theme which extends SnowTheme and monkey patch Tooltip. This is what I did. As a workaround you can create own theme which extends SnowTheme and monkey patch Tooltip. This is what I did. @ygrishajev you can close this. The work was finished in #1489 . @ygrishajev you can close this. The work was finished in #1489 . ",
    "intdel": "Is there a reason why this got never merged?\n. ",
    "bradennapier": "+100 - this is the make or break feature for me personally! :). ",
    "bladerunner41": "The default quill file upload toolbar, as well as the drag & drop module (quill-image-drop-module) all inline the image in base64, except copy & paste which uses an <img src=\"URL\"> approach.  It should be consistent.  Example of pasting as base64 in #137 . The default quill file upload toolbar, as well as the drag & drop module (quill-image-drop-module) all inline the image in base64, except copy & paste which uses an <img src=\"URL\"> approach.  It should be consistent.  Example of pasting as base64 in #137 . ",
    "w00fz": "I would love to see this more generic in case one wanted to handle drop differently or manually handling errors, filtering and whatnot.\nI'd like to also have a generic drop API event one could attach to and not having it just limited to this case scenario.\n. I can see the value in this PR, to a degree, but is it really necessary to pollute the main quill scope for it? I also found myself having to change the image handler behavior but figured overriding the toolbar image handler was the quill way of doing it.\nmodules: {\n    toolbar: {\n        handlers: { ... }\n    }\n},\nPerhaps a more modular way of managing handlers could be considered, that way handlers can be extended, overridden and have a better code and filesystem organization. In the case of this PR, one would be able to simply extend the ImageHandler, super the constructor and override just the method in charge of interpreting a File object.\n. That's exactly what I meant. I haven't looked any further unfortunately, but I really hoped this would be easier.\n. ",
    "cutteroid": "In build from current develop branch step 2 fixed but step 3 is still reproducible\n. I'm totally agree with described expected Quill behavior.\nLooks like my description of issue was not very clear, sorry.\nHere i'm deleting link with backspace. Notice where cursor appears after deletion.\n\nAnd i'm having this bug with all formatted text (links, bolds, italics etc)\n. Agree with this.\nAnother suggestion for styling format buttons\nhttp://codepen.io/cutteroid/pen/vKzEXy \n. Its not a quilljs bug, its browsers failure. All current browsers having different issues handling contenteditable=\"false\" nodes inside of contenteditable=\"true\" container.\nIn our project we developed similar functionality (custom blocks and nodes which users cannot edit inside of quilljs) and those cursor and selection problems driven me nuts.\nSome kind of solution we used - tracking of cursor position. If cursor found in bugged area (in general: before non-editable which is first element in line, after non-editable which is last element in line, between two adjacent non-editables) insert there quilljs cursor blot or another zero-width filler node.. @danielschwartz \nexample\nBeware! It is a big pile of shitcode written with \"it's only a prototype. will rewrite it later\" in mind :)\n. I'm getting some kind of this issue too but with backspace/delete. An actual behavior is same - editor is focused (caret blinks) but no response on character keys until user clicks editor body.\nIts reproducible for me on playground in Firefox on Windows and OSX:\n\nselect all editor content (some formatted content should be present in editor)\nhit backspace or delete\ntry to type something\nnotice that nothing is printed\n. \n",
    "BenjaminListwon": "I think I understand the distinction you are outlining (I'm admittedly still looking around rich-text at how deltas are composed / transformed).\nForgetting about the history module for a second ...\nCurrently I have a listener on text-change events that unsets, then sets, a global timeout which, after a configurable delay, calls the autosave function if the editor is \"dirty\" and no other valid action has interrupted the timeout delay. \nThere are, of course, other ways to do this, but they all boil down to the same idea: keep observing something, either by polling, callback or promise, until a timeout condition is met, then call whatever callbacks have been registered.\nAt any rate, at that point calling editor.getContents() and serializing the result gets you a replayable representation of the editor's state.\nI was probably too ambiguous in my initial writing. I do not intend to send incremental deltas to the server (or local storage) on each autosave, although that could potentially save some bandwidth. My intention is simply to send and store the current version of the document (collection of all insertions, etc) such that it can be restored to that state. I also did not mean to imply that I was storing the history stack (say, so a user could come back and undo in a later session), though that would be some crazy cool functionality, now that I think about it.\nSo, back to the history module, if history events are an inappropriate determinant of when to autosave, what do you think is the best event, or functionality, to monitor? I'm eager to learn more about how I might better observe changes and write responders.\n(I'll put aside the broader discussion about events outside autosave, such as those from clipboard, etc.)\n. Yup, that's basically what I've got, but lodash's throttle is new to me, and looks super useful. Much more robust than what I've used. Thanks for that pointer.\nI'm going to keep tinkering on event broadcasting in a fork and let you know when I've got something workable that maybe you (and others) would have feedback on. I still think there are valid UCs for listening to module-level events as well as some more from core.\n. Hi all,\nThanks for the confirmation around approach. When I have more concrete code + examples around event emitting (unrelated to the autosave) I'll open a new issue and/or PR.\n. ",
    "george-norris-salesforce": "Didn't see the Parchment docs on GH. \nMaybe link Quills docs to that GH page?\nThe link on this page has no documentation.\nhttp://beta.quilljs.com/guides/customizing-and-extending/\nTrying to create custom block (with specific classes) with accompanying buttons in toolbar.\nAlso would like to take a stab at creating tables..\n. Ok great..  Looking forward to seeing the how to's and documentation \n. now you know :)\n\nLast week lastest beta version had this feature..\n. Gotcha.. What i mean is..\nThe behavior of the gif above presents a prompt to select an image from file system \u2014 presumably for uploading via Quill. \nWhile the new (or old?) way assumes you have it already uploaded and are referencing it via URL.\n. ",
    "mpfau": "Looks like this does not work for the same reason as #979. The numbering is resetted because a new ul and a new ol block is created (instead of creating an ul subblock below the ol). ",
    "diegobona": "it  is ok, thank you very much! now there is a little problem:\n\nif i set the height of the div to a fixed value(now is \"height:auto\"), it's ok.  Is that a problem of inheritance?\n.    ok\uff0cPlease see the attachment\nFrom: Jason Chen\nDate: 2016-08-01 04:39\nTo: quilljs/quill\nCC: diegobona; Author\nSubject: Re: [quilljs/quill] why after submitting post content,the postpage is also editable? (#831)\nI don't understand. Can you make a video of the issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. why close?This problem is not solved !\n. ",
    "tvdavid": "Is there a description of what is and what isn't supported in Quill, or do you only consider a document to be supported when it can be created using the Quill UI? (I would have expected all valid HTML to be passed through untouched)\n. ",
    "pelayo": "Ok. No problem with implementing the handler myself.\nInstead of a pop up prompt maybe use the text also for the href as a non intrusive way of creating links.\nThe H3 is format is there because i got really confused between the 0.2 and 1.0 documentation and thought there wasn't any H3 format implemented. \nThanks for the help.\n. Ok. No problem with implementing the handler myself.\nInstead of a pop up prompt maybe use the text also for the href as a non intrusive way of creating links.\nThe H3 is format is there because i got really confused between the 0.2 and 1.0 documentation and thought there wasn't any H3 format implemented. \nThanks for the help.\n. ",
    "PiyushRamuka": "I am using windows 7 x64.\nJust tried with firefox 48 and still same issue. Chrome works without any issue.\n. It was AdBlockPlus. As soon as i disabled it, home page worked. Thank you all! \nGreat Plugin.\n. ",
    "windows1087": "Oh man, i forgot to add an <p> wrapper around my Text Variable (i was thinking quill will make it self). Thanks.\n. Oh man, i forgot to add an <p> wrapper around my Text Variable (i was thinking quill will make it self). Thanks.\n. ",
    "fghhfg": "Ctrl+C Ctrl+V and drag n drop only work on firefox. unfortunately it doesn't work on chrome.\nfirefox implements some API that don't exist on chrome.\nDo any polyfill library exist to make it works on chrome?. want full toolbar?\n\nmy solution, take code from http://quilljs.com/docs/formats/\nhtml\n<div id=\"toolbar-container\">\n<span class=\"ql-formats\">\n<select class=\"ql-font\"></select>\n<select class=\"ql-size\"></select>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-bold\"></button>\n<button class=\"ql-italic\"></button>\n<button class=\"ql-underline\"></button>\n<button class=\"ql-strike\"></button>\n</span>\n<span class=\"ql-formats\">\n<select class=\"ql-color\"></select>\n<select class=\"ql-background\"></select>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-script\" value=\"sub\"></button>\n<button class=\"ql-script\" value=\"super\"></button>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-header\" value=\"1\"></button>\n<button class=\"ql-header\" value=\"2\"></button>\n<button class=\"ql-blockquote\"></button>\n<button class=\"ql-code-block\"></button>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-list\" value=\"ordered\"></button>\n<button class=\"ql-list\" value=\"bullet\"></button>\n<button class=\"ql-indent\" value=\"-1\"></button>\n<button class=\"ql-indent\" value=\"+1\"></button>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-direction\" value=\"rtl\"></button>\n<select class=\"ql-align\"></select>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-link\"></button>\n<button class=\"ql-image\"></button>\n<button class=\"ql-video\"></button>\n<button class=\"ql-formula\"></button>\n</span>\n<span class=\"ql-formats\">\n<button class=\"ql-clean\"></button>\n</span>\n</div>\njs\n  var quill = new Quill('#mdSource', {\n    modules: { toolbar: '#toolbar-container' },\n    theme: 'snow'\n  });. ",
    "KennyWho": "I disble all extensitons.It works!I found the extension Docs PDF/PowerPoint Viewer,it is point.When I make it able, I can't type first character with Chinese IME.\nI have removed this extension.It's not official.I hope this case may give you some notices to resolve conflict of the extensions.\non Window10 + Chrome + specified extension + Sogou IME\n\nI test it on my mac + Chrome.Sogou IME and Simple PinYin IME have the same problem.\non Mac + Chrome + specified extension + Simple PinYin IME\n\n\n(Sogou IME have same problem on mac\uff0cbut not in video.)\nNotice: on version 0.21, It have no problem.\n. ",
    "siteshen": "As a notice, I've the same problem with extension evernote web clipper. It works if I disable it.\nQuill: 1.0.0-beta.11\nChrome: 52.0.2743.116 (latest)\nSystem: OS X 10.11.6\n. ",
    "mrdream24": "I input first character with Chinese IME in https://quilljs.com/playground/ and https://quilljs.com/. I found that is normal with extension evernote web clipper.why?\n. I think maybe this is why\uff0cbut i don't down how to fix it @jhchen \n\n. on theme page, you can reproduce this bug\n\n. ",
    "gn02394847": "\u6211\u767c\u73fe\u5728\u8f38\u5165\u5168\u5f62\u5b57(fullwidth)\uff0c\u5728\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u500b\u5b57\u6642\u5019\u6703\u51fa\u73fe\u554f\u984c\n\u8f38\u5165\u7b2c\u4e00\u500b\u5b57 \u6703\u8df3\u51fa\u5f8c\u9762\u5e7e\u500b\u5b57\n\uff21 \uff21\uff22\n\u3128 \u3128\u311b\nmac os \u6ce8\u97f3\u8f38\u5165\u6cd5 (\u4e0d\u904e\u6211\u731c\u4efb\u4f55\u8f38\u5165\u6cd5\u90fd\u6709\u9019\u500b\u554f\u984c. ",
    "sergop321": "This is the exact problem, It is not possible to add precompiler to the project so it must be implemented completely in es5.\nAfter several more hours I was able to make it work with the following\n``` javascript\nvar Link = Quill.import('formats/link');\nvar ExtendedLink = function (node, value) {\n    // Apply Link Constructor\n    Link.call(this, node, value);\n};\nExtendedLink.prototype = Object.create(Link.prototype);\n// Copy static functions\n$.extend(ExtendedLink, Object.create(Link));\nExtendedLink.sanitize = Link.sanitize; // sanitize not getting copied, so I am doing it manually\n// Fixed constructor type \nExtendedLink.prototype.constructor = ExtendedLink;\n// Override parent create function\nExtendedLink.create = function (value) {\n    var node = Link.create(value);\n    node.className = 'test';\nreturn node;\n};\n// Update blotName\nExtendedLink.blotName = 'linkt';\nQuill.register('formats/linkt', ExtendedLink, true);\n```\nIs there a more efficient way to implement the same functionality? \nIs it possible to add some more documentation for es5 compatibility?\n. I tested both Babel and Typescript, \nTypescript implementation, didn't work.\nWhile Babel generate a harder to read code, but works great.\nThank you.\n. The workaround worked great, it actually solved a lot  minor bugs with the selection on text-change event (I was getting wrong selection in chrome after link node).\n. ",
    "khera-shanu": "it's not quill.com, @therahl. it's quilljs.com\nthe editor scrolls up because of the dom object in focus (class \"ql-link-tooltip\") get different values for \"top\" css property. \n. ",
    "therahl": "Quill version is 0.20.1, will upgrading to the latest resolve this issue for me? \n. Thanks for the link @benbro.  Looks like upgrading will solve this issue for me.  Closing issue.  Thanks everyone! \n. ",
    "doctsh": "Any detailed guide on Prachment now? I am looking for a noneditable embeds in my editor. ",
    "ggJSC": "@sferoze Any idea how to implement this in a more vanilla nature and not using meteor?. I managed to figure it out. I'm not sure what was causing problems to be honest, but the previous errors I had weren't showing up. . ",
    "TaylorPzreal": "I could upload images to server and insert URL to rich editor.\nThis is my code:\n```javascript\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.. I solved the problem that upload image with url.\nThis is my code, hope help you:\n```javascript\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n. I solved the problem that upload image with url.\nThis is my code, hope help you:javascript\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.. i use angular@^4 and yarn add katex yarn add @types/katex and imported katex:\n<script src=\"katex.js\"></script>\nor\nimport 'katex';\nare not success.. @benbro thx, CDN is success. ",
    "bunney": "How to solve drag and drop or ctrl+v pictures to send AJAX, but not base64. ",
    "WinMinTun": "@TaylorPzreal The code is not working on iOS. But the rest is ok. Better use $(input).on('change', function() { });. @sferoze I v just written a plugin for this.. History (Ctr+Z & Ctr+Y) is working well together with Authorship. Pls check and comment https://github.com/WinMinTun/quill-authorship. @sferoze I tried to remake the bug you had mentioned: Undo a few steps -> edit other author's text. But still it is ok. Tested Quill version is 1.2.4. Could u pls tell me more so that I can remake exactly the bug you mentioned? Which Quill version u find the bug on? Thanks. @seanippolito I m encountering a problem with Chinese keyboard which show dropdown to choose Chinese characters. Let you update on it.. Any updates on this? @jmzhang @jhchen I think this issue also to do with the issue I m encountering now. I'm writing authorship module. Have the similar problem with Chinese Pinyin Keyboard (which shows pop up) #2305 . @jhchen @jmzhang A related big issue regarding IME keyboards in collaborative environment. I think it is not directly because of Quill. But it is a big issue and really need attention to it. IME keyboards are not working in collaborative editing as composition disrupts upon others' changes #2314 . @icewind7030 @hiYoHoo Is it ok now? Can someone tell me pls? My Chinese sucks. I m having the similar problem in #2305 . @icewind7030 Thanks. I tried but not ok (version 1.3.6). What are the events compositionstart and compositionend? Any help really appreciated. I desperately need an authorship module. Whenever I apply authorship attribute to delta the keyboard gone messed as in #2305 . @jhchen @benbro @berylw @DaleHe   Can some of you shed me some light on how did you solve it? I saw u update the version of Parchment. I m writing authorship module and having the same problem (with any Chinese Pinyin pop up keyboards like IME) whenever I call updateContents to style author info into the delta. I desperately need an authorship module. Here is the module https://github.com/WinMinTun/quill-authorship  Pls refer to #2305 . @benbro @berylw @DaleHe A related big issue regarding IME keyboards in collaborative environment. I think it is not directly because of Quill. But it is a big issue and really need attention to it. IME keyboards are not working in collaborative editing as composition disrupts upon others' changes #2314. I fix it only only adding author attribute on compositionend for IME keyboards. But one more BIG issue appears, IME keyboards not working on collaborative editing. For example in Chinese Keyboard, when user type some English word 'w' and then Chinese words appear. At that time when others are changing the content, I will get redundant words. Refer to #2314 . @jhchen Sorry if I annoy you with this. But I think you might be really interested in that issue. It is a big one and will be really good if Quill has some workaround with that problem. Thanks a lot.. @zhangjinsong Not yet. :(. Hi my solution is to apply author delta upon compositionend for IME keyboards. Check my https://github.com/WinMinTun/quill-authorship However I have IME problem again in collaborative mode. I think cursor module would solve it. . ",
    "JohEngstrom": "@rickhanlonii any chance you could show how you did your custom toolbar/tooltip?. ",
    "circleb": "Any ETA on this?. Any ETA on this?. ",
    "DanielHaroldLane": "That makes a lot more sense to me now. Good to know it's not a bug. Thanks for the clarification, I'm sure it'll help others too.\n. ",
    "grintor": "The Next Page!!! O geez, I didn't realize there was a second page. Is that expected behavior? I certainly wasn't expecting it... Maybe someone should tweak the theme css to make that not happen?\nAnyway, thank you for pointing that out, I don't think I would have ever found that second page.\n. ",
    "DWMS-Bryan": "Yes, 1.0.0-rc0. \nI just did this:\nStep 1: set up a basic quill editor with minimal theme following the instructions on quill.js quickstart as a stand alone page straight out of the examples.\nStep 2: Clear the demo text. Then type some text, hit the bold button in the toolbar, get an unwanted br> at end of line.\nStep 3: select some text, hit the bold button in the toolbar, get an unwanted br> in middle of sentence\nAddit - Have tested this minimal theme (quill.css) basic editor page with multiple browsers:\nSafari 5.1.7 - cursor not present, can't focus on text area to type. Does not display placeholder text.\nChrome 52 - works great.\nFirefox - quill adds unwanted br tags and eventually dies if you play around enough.\nIE 11 - works great.\n. Here's the quickstart: http://quilljs.com/docs/quickstart/\nMy setup is a little different than that since I didn't want to use the snow theme, just the minimal, however I experienced the exact same issue with exactly what is shown there.\nHere is the innerHTML:\n<p>asdfasdfasdfasdf <br><strong>asdfasfdasfd</strong></p><p><br></p>\n. I'm using the cdn sources-\n<link href=\"https://cdn.quilljs.com/1.0.0-rc.0/quill.css\"> \n<script src=\"https://cdn.quilljs.com/1.0.0-rc.0/quill.js\"></script>\nall of which I found here: http://quilljs.com/docs/download/\n. That doesn't fix the issue for the snow theme though does it? Nor does using the new url change anything for me. :(\n. ",
    "mikrostew": "This is not reproducing for me in incognito, must be one of my extensions/add-ons causing an issue.\n. ",
    "cgilboy": "Thanks for this very helpful explanation! \nRegarding the bugs you have seen with \"add/remove newline just in time\" - Are you referring to adding/removing the newline in the implementations of the public setters/getters for text, content and selection, or something more internal?\n. ",
    "joedynamite": "@jhchen Understanding that Quill indeed needs to maintain those trailing newlines for proper data handling, can it not just filter them out in the getText, and getLength methods?\ngetText seems to just join all the ops together so you could simply tack on .replace(/\\n$/, '') to remove that final newline. getLength seems a little trickier as it is coming from Parchment, correct? Perhaps it could just return the length property of the string returned by getText? Or perhaps separate getUserText and getUserLength methods?\nI realize my solutions may be a bit naive but it would be nice to have a more accurate representation of the user\u2019s document as opposed to just the one used internally by Quill.\n. @jhchen What about how bold seems to support both <strong> and <b> tags, and italic supports <em> and <i> tags? I was just following the pattern I saw present in other inline formats.\n. @jhchen Understood. If I find that code and modify my PR to behave more like bold can I reopen it to be reconsidered? I have a lot of existing content with <del> for strikethrough and would like Quill to support it.\n. ",
    "pdiveris": "Those carriage returns are crazy. I am at a loss to understand what role they might have been designed to fulfil one day. I've spent a whole day working on a parser and renderer, fetching with getContents and passing to my server side over JSON. Left unescaped It breaks JSON, you simply get nulls. And of course it will be left unescaped because who would have thought to look for carriage returns? I've been scratching my head as to why the H tags appear to be linked to empty inserts, even though the actual text specified in a previous OP is correctly shown as a H1 or whatever. I am now writing code in my parser and renderer so that it can merge the newlines and their attributes to the text they belong to, which sits before them. But I do not understand why I have to do that. It's crazy, or I am missing something. Are they there for a reason?. ",
    "laosb": "Any progress on this?. Quill has styles defined for elements in .ql-editor. Since we've made our own styles for them, we don't really want this,  But the editor would attach ql-editor class to the content box when editing, causing our defined styles being overwritten:\n\nWhat I'm asking for is providing a css bundle without styles for .ql-editor.. It's quite a lot of work to do that, since many rules would just act as overriding existing rules in it.. ",
    "CoenWarmer": "Also interested in this :). Okay, maybe I misread this, and I do apologise if this isn't the right channel to ask implementation questions like this. I am looking for a way to implement a Snow like Link blot to an instance of Quill that has no theme defined. I have read through the docs but I am a bit lost. Are there any how-to's available somewhere that describe how to achieve this? Thank you for your work, Quill is an amazing library.. Managed to get this to work. Turned out my webpack.config.js file was excluding node_modules from the babel-loader definition, so Webpack would try to resolve quill files placed in /node_modules, but wouldn't be able to parse them as they were excluded from the babel-loader.\nFixed it by adding an exception to my exclude statement:\nmodule: {\n    loaders: [\n        {\n            test: /.*\\.js$/,\n            loader: 'babel-loader',\n            exclude: [ /node_modules(?!\\/quill)/, /frontend/ ],\n            query: {\n                presets: [ 'babel-preset-es2015' ].map(require.resolve),\n                plugins: [ 'babel-plugin-add-module-exports' ].map(require.resolve)\n            }\n        },\n. Duplicate of https://github.com/quilljs/quill/issues/1202. Confirmed fixed in version v1.1.8. Thanks @jhchen!. ",
    "tannerjt": "Would love to see this as well.  As a side note, this was how images were handled in the early stages of QuillJS.  Any reason why this was removed?. ",
    "masza": "I don't understand why there is base64 upload images and no support for third-party image upload. This is VERY important!. ",
    "cuduy197": "Still no update :( . ",
    "Matoo125": "I think here https://github.com/quilljs/quill/issues/863#issuecomment-240579430 it is written pretty well. All you need to do is to create custom handler. https://github.com/quilljs/quill/issues/863#issuecomment-240579430 This is very nice example, which helped me solved this problem. It is very easy to implement.. ",
    "vhq2016": "+6666. ",
    "oliveratgithub": "+1. I toss some bricks into that fire so it keeps burning longer . I toss some bricks into that fire so it keeps burning longer . +1\nI\u2018m going to look into tribute.js: https://github.com/zurb/tribute/. +1\nI\u2018m going to look into tribute.js: https://github.com/zurb/tribute/. @sujeetbuddiga Tribute.js acutally works quite well \"out-of-the-box\" with Quill!\nI'll try to give you a more detailed feedback later this week. @sujeetbuddiga Tribute.js acutally works quite well \"out-of-the-box\" with Quill!\nI'll try to give you a more detailed feedback later this week. @sujeetbuddiga here you go - as I said, quite straight-forward...\nFirst add the Tribute resources to your site\nhtml\n<!-- Tribute - Native @mentions: https://github.com/zurb/tribute/ -->\n<link rel=\"stylesheet\" href=\"/js/tribute/tribute.css\" />\n<script src=\"/js/tribute/tribute.min.js\"></script>\nThen initiate & attach it to the Quill editor as follows\njavascript\n<script type=\"text/javascript\">\n// Tribute - Native @mentions\nvar tribute = new Tribute({\n  values: [\n    {key: 'Phil Heartman', value: 'pheartman'},\n    {key: 'Gordon Ramsey', value: 'gramsey'}\n  ],\n  lookup: 'key'\n});\ntribute.attach(document.getElementsByClassName('ql-editor'));\n</script>\nNote:\nyou will get a strange behaviour with the cursor position resetting before the @, when you attach it like this:\ntribute.attach(document.getElementById('editor'));\nSo that's why you have to attach it to the Quill editor using it's CLASS .ql-editor. This issue was covered and resolved here: zurb/tribute#86\nThere is still a bug open regarding the Enter/Return key not working in combination with Tribute & Quill, see here (and upvote if you need it ;) ): zurb/tribute#87\nBut yeah, above code is basically it! Go to your website where the Quill editor is integrated and try it by typing @p in the richtext editor.. @sujeetbuddiga here you go - as I said, quite straight-forward...\nFirst add the Tribute resources to your site\nhtml\n<!-- Tribute - Native @mentions: https://github.com/zurb/tribute/ -->\n<link rel=\"stylesheet\" href=\"/js/tribute/tribute.css\" />\n<script src=\"/js/tribute/tribute.min.js\"></script>\nThen initiate & attach it to the Quill editor as follows\njavascript\n<script type=\"text/javascript\">\n// Tribute - Native @mentions\nvar tribute = new Tribute({\n  values: [\n    {key: 'Phil Heartman', value: 'pheartman'},\n    {key: 'Gordon Ramsey', value: 'gramsey'}\n  ],\n  lookup: 'key'\n});\ntribute.attach(document.getElementsByClassName('ql-editor'));\n</script>\nNote:\nyou will get a strange behaviour with the cursor position resetting before the @, when you attach it like this:\ntribute.attach(document.getElementById('editor'));\nSo that's why you have to attach it to the Quill editor using it's CLASS .ql-editor. This issue was covered and resolved here: zurb/tribute#86\nThere is still a bug open regarding the Enter/Return key not working in combination with Tribute & Quill, see here (and upvote if you need it ;) ): zurb/tribute#87\nBut yeah, above code is basically it! Go to your website where the Quill editor is integrated and try it by typing @p in the richtext editor.. @sujeetbuddiga yeah that\u2018s an aknowledged issue which I pointed out in my previous comment:\n\nThere is still a bug open regarding the Enter/Return key not working in combination with Tribute & Quill, see here (and upvote if you need it ;) ): zurb/tribute#87\n. @sujeetbuddiga yeah that\u2018s an aknowledged issue which I pointed out in my previous comment:\nThere is still a bug open regarding the Enter/Return key not working in combination with Tribute & Quill, see here (and upvote if you need it ;) ): zurb/tribute#87\n. So a good soul @quannt over here provided me a jsfiddle demonstrating, what one needs in order to add a custom dropdown picker in Quill: https://jsfiddle.net/q7jferw3/\nBasically quilljs can create the dropdown list for you but you need to manually supply the HTML content (which is not the clearest thing in the world)\n\nThanks again!!. So a good soul @quannt over here provided me a jsfiddle demonstrating, what one needs in order to add a custom dropdown picker in Quill: https://jsfiddle.net/q7jferw3/\n\nBasically quilljs can create the dropdown list for you but you need to manually supply the HTML content (which is not the clearest thing in the world)\n\nThanks again!!. Sweet, thanks a lot for your efforts @RockStanley !. Sweet, thanks a lot for your efforts @RockStanley !. @benbro thanks for your feedback - unfortunately this does not help me.\nI'm not using jQuery so working with .getContents() & JSON serializeArray to get to the HTML is cumbersome, as far as I can tell. I got the desired results by just using quill.root.innerHTML as recommended here at SO\nThanks for the links regarding changing to inline styles. Can you give me an example, how one can change that for the code-block? The examples are pretty for simple tags like Bold, or even Code itself - but the \"code-block\" is not covered and didn't work like this:\njavascript\nvar Codeblock = Quill.import('formats/code-block');\nCodeblock.className = '';   // '' because I don't want it to write class=\"ql-syntax\"...\nQuill.register(Codeblock, true);\nThat's actually the last challenge I'm facing - and I'm still in the opinion, that highlight.js is implemented wrongly - for both, the code-block- and the regular code-markups... ;)\nBecause from my understanding, something like this would be needed:\njavascript\n...\nCodeblock.tagName = 'PRE CODE';   // '' should render the code-block tag as <pre><code>...</code></pre>\n...\n...but actually now it's written to the markup as:\nhtml\n<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-tag\">...</span></pre>. @benbro thanks for your feedback - unfortunately this does not help me.\nI'm not using jQuery so working with .getContents() & JSON serializeArray to get to the HTML is cumbersome, as far as I can tell. I got the desired results by just using quill.root.innerHTML as recommended here at SO\nThanks for the links regarding changing to inline styles. Can you give me an example, how one can change that for the code-block? The examples are pretty for simple tags like Bold, or even Code itself - but the \"code-block\" is not covered and didn't work like this:\njavascript\nvar Codeblock = Quill.import('formats/code-block');\nCodeblock.className = '';   // '' because I don't want it to write class=\"ql-syntax\"...\nQuill.register(Codeblock, true);\nThat's actually the last challenge I'm facing - and I'm still in the opinion, that highlight.js is implemented wrongly - for both, the code-block- and the regular code-markups... ;)\nBecause from my understanding, something like this would be needed:\njavascript\n...\nCodeblock.tagName = 'PRE CODE';   // '' should render the code-block tag as <pre><code>...</code></pre>\n...\n...but actually now it's written to the markup as:\nhtml\n<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-tag\">...</span></pre>. @benbro this is not really something I can follow and agree to. Highlight.js is \"officially\" part of and integrated into QuillJS - and, as mentioned twice in previous comments, in my opinion the markup for Highlight.js is wrongly adapted by Quill.. @benbro this is not really something I can follow and agree to. Highlight.js is \"officially\" part of and integrated into QuillJS - and, as mentioned twice in previous comments, in my opinion the markup for Highlight.js is wrongly adapted by Quill.. ",
    "rodolfobubb": "+1. ",
    "Vice93": "+1 how is this not a feature yet?. ",
    "davek1979": "Could someone from the team maybe shed some light on this please? This feature is really, REALLY needed.. ",
    "oweskeez": "+1 my team would love this feature.. ",
    "alexjustesen": "For what it's worth... would be really really nice to have.... For what it's worth... would be really really nice to have.... ",
    "hackerbrief": "Keeping the fire alive for this request \ud83d\udd25. ",
    "repat": "We got it working by extracting the base64 encoded image, storing it on the hard drive and replacing thesrc=\"data...\" code with src=\"/folder/file...\" but quill doesn't display the picture when the HTML is loaded with dangerouslyPasteHTML the next time we open it, see https://github.com/quilljs/quill/issues/1449.\n+1 would also like to see this feature built-in. ",
    "storm-factory": "Awesome thank you!\n. ",
    "luin": "Thank you for the quick fix! The issue of the syntax module is confirmed being fixed. However, when using code block without syntax highlighting, the first inputted Chinese letter still go with its pinyin as I noted in the issue description above.\nHere's gifs (both IMEs have this issue):\n\n(using the builtin IME)\n\n(using the Sogou IME)\n. Congratulation for the new version! The issue is still here:\n\nOnly the first word will be affected. Safari 9.1.1 also has the same problem.\n. ",
    "wangdong": "\nThe problem is still there, we have to reopen this issue. @jhchen. ",
    "liruilong": "Safari 10.1 (12603.1.30.0.34)\n@jhchen \n\n. Safari 10.1 (12603.1.30.0.34)\n@jhchen \n\n. ",
    "OnlyBreak": "this problem is still there, could u resolve it? @jhchen . ",
    "tomph": "Hi guys.\nCould you give me an example of this custom css rule JHChen?  I'm struggling to get this behaviour with a custom drop down.... I'm still seeing this issue (even in the Playground). \nTo re-create, do the following:\n\nType a word\nSet Heading Type to Heading 2\nClick back into editor and focus on word\nClick on the Headings dropdown (it displays the default, not the selected value). \n",
    "TomCaserta": "Its no longer the concern of quill to provide HTML and the they have removed the getHTML methods, it now uses something called delta objects which is a JSON object representation of the output.\nI'd argue that this library is fairly useless without this functionality as nothing else currently can parse the delta object and provide a html structure which is probably what most people want to use quill for. I understand why they wish to abstract away from providing HTML (and accepting HTML as its initial value) but I wish there was something in place before making this change in various languages to parse the delta objects and provide HTML so we can, for example, just store the delta object in our database and render it when necessary.\nIn the meantime you can use:\nquill.container.firstChild.innerHTML\nTo get the contents of the rendered HTML according to the browser you are currently on.\n. Its no longer the concern of quill to provide HTML and the they have removed the getHTML methods, it now uses something called delta objects which is a JSON object representation of the output.\nI'd argue that this library is fairly useless without this functionality as nothing else currently can parse the delta object and provide a html structure which is probably what most people want to use quill for. I understand why they wish to abstract away from providing HTML (and accepting HTML as its initial value) but I wish there was something in place before making this change in various languages to parse the delta objects and provide HTML so we can, for example, just store the delta object in our database and render it when necessary.\nIn the meantime you can use:\nquill.container.firstChild.innerHTML\nTo get the contents of the rendered HTML according to the browser you are currently on.\n. Ah fair enough, assumed it used deltas but thought it was only internally previously, I've not followed the project for long. Just remember using it as a somewhat drop in replacement of TinyMCE etc. Thanks for the info regarding quill.root.innerHTML. \n. Ah fair enough, assumed it used deltas but thought it was only internally previously, I've not followed the project for long. Just remember using it as a somewhat drop in replacement of TinyMCE etc. Thanks for the info regarding quill.root.innerHTML. \n. ",
    "artaommahe": "@jhchen thx for quill.root.innerHTML but why not explicitly getHtml() method due to most apps stores result content in html format? it's necessary to get result html before saving\n. @jhchen there is one problem with separate lib for converting Delta to HTML - it requires to pass all common and custom formats that already registered in Quill instance due to editing usage. So if we could have method to get HTML from Delta via Quill instance, this will reduce formats registering/passing duplication. Currently i have to use Quill editor readonly instance for proper Delta -> HTML rendering with all registered custom formats.\n. @benallfree this breaks a lot of cool things like updating display format for image/video or all formats markup, cause old HTML will not update. And also requires a lot of sanitizing before displaying plain HTML received from back-end. > I think your suggestion is to render a page from stored Quill deltas instead of the stored HTML, right? \nyes, this is my current usecase\n\nThat would require a server-side rendering library of some kind\n\nnope. Server side rendering forced to duplicate formats between front-end quill editor and back-end renderer that is awful. I prefer front-end rendering from Delta before displaying without instantiating full quill editor in readonly mode.. > Is search engine indexing an issue in your use case?\nthere is no issues with google search engine, it runs all js and then analyze (we'r using angular). Other search engines does not matter for us.. > A detailed description of the feature\nShow tooltip on doubleclick in editor with Bubble theme.\n\nA quick background of where and how you are using Quill\n\nArticles writing like medium editor.\n\nThe use case that would be enabled or improved for your product, if the feature was implemented\n\nAdding images/embeds that does not require text selection with Bubble theme.\n\nConsiderations and behavior differences for other use cases that may benefit from the feature\n\n\n. hm, maybe toolbar disabling for readonly mode is not editor care\n. @benbro this does not allow to add button with custom html. Currently u need to redeclare whole toolbar with all used default buttons for adding just one custom button\n. @alexkrolick it works only for simple buttons, any list requires custom html\n. This woks, partially - i cant define two formats with same name that does not override each other. E.x. i use default image format, then for some pages/editors i want to change images view, that requires image blot markup changes, so it's new blot. But already created content has this\n{\"insert\":{\"image\":\"image-url-here\"}}\nand i cant define new blot imageNew for this case, cause old images will look like before if i dont override image format with new blot.\n. @benbro garbage icon to the right of Paint checkbox \n\n. > Did you test on a separate page not on codepen and without an iframe?\nyep, same for standalone test page, code http://pastebin.com/JqVGfeKy\n\nRemoving the toolbar module with \"toolbar: false\" brings the nodes graph to the baseline. The listeners graph is still high.\n\nyep, same\n\nDid you have a chance to test it in Firefox to see if it's specific to Chrome or not?\n\ndont know how to use Firefox performance tool )\n. @benbro console.log() makes it :fp: just remove it in my first example and everything fine. Thx\n. @rquast just add custom css for any styling or redefine Video blot with your custom params/classes/etc. @benbro created separate issues #1162 and #1163. Close this one.. @benbro as i sad currently i cant achieve necessary behavior with Quill and such markup so i cant create working Blot. This example is real markup that i need to paste on image insert in quill editor, so it should be some Blot or several Blots.\nNow i have this as image Blot\n```typescript\nconst FIGURE_CLASS = 'article__figure';\nconst IMAGE_WRAPPER_CLASS = 'article__image';\nexport class ImageBlockBlot extends BlockEmbed {\npublic static blotName = 'imageBlock';\n  public static tagName = 'div';\n  public static className = FIGURE_CLASS;\npublic static create(value: string): Node {\nconst figureElement = <HTMLDivElement> super.create(value);\n\n\nconst imageWrapperElement = document.createElement('div');\n\nimageWrapperElement.classList.add(IMAGE_WRAPPER_CLASS);\n\n\nconst imgElement = document.createElement('img');\n\nconst sanitizedValue = ImageBlot.sanitize(value);\n\nimgElement.setAttribute('src', sanitizedValue);\n\n\nimageWrapperElement.appendChild(imgElement);\n\nfigureElement.appendChild(imageWrapperElement);\n\nreturn figureElement;\n\n}\npublic static value(divElement: HTMLDivElement): string {\nconst imageElement = divElement.querySelector('img');\n\nif (!imageElement) return null;\n\nconst value = imageElement.getAttribute('src');\n\nreturn value;\n\n}\n}\n```\nThis renders only image part without editable comment field. And i cant understand how to add editable comment field here that will be part of ImageBlock Blot with final Blot value format { src: string, caption?: string }. What i want to achieve - markup and behavior like medium editor images\n\nfigure.graf.graf--figure equals .article__figure in first post. > You are trying to create a Blot that has an image and a caption and make the caption editable inline?\nyes, on button click user adds image link and see smth like on screenshot above where he can edit optional caption\n\nHow will the user add a new image?\nHow will the user change the image?\n\nimage can be changed only via remove current(whole block)/add new. It's important to have caption easy editable and not so important for added image.\nAlso there is issue with editing caption via tooltip - it cannot be formatted. It would be usefull to have ability to format caption text - mark part as bold or as link (medium editor allows this). More about tooltip solution - it does not allow to edit image/caption cause we need to handle image or caption nodes click to show tooltip. Only Blot has access to this nodes, but it cant call anything from Quill instance or somewhere else to show tooltip with image source and caption to edit it.\nSame issue with Link format - it cant be editable now for same reason and requires to remove/add new link for this case.. @jhchen also is there any support for nested complex blots? Currently i'm working on spoiler block that hides content (any other blots including embeds) and dont see any way to implement spoilers nesting - Delta format has plain structure and looks like it's impossible with it. Why Delta doesn't support nesting?. @jhchen that example has same issue - place cursor at any line and press enter many times. New lines below viewport will not trigger autoscroll to them. @jhchen still does not work with scroll on body\nhttp://codepen.io/anon/pen/MpLBwo\nscrollingContainer: 'body',\nversion 1.2.3. @jhchen what do mean by more setup? if i replace scrollingContainer: '#scrolling-container' with body in autogrowing example than autoscroll on new lines does not work. Does it mean that autoscroll for body should be handled somehow manually or what did i miss?. @dakmau just look at http://codepen.io/anon/pen/MpLBwo .... ",
    "f15gdsy": "I would like to use delta format, but for rendering the format, I have to include the whole editor, which is too heavy for me.. I would like to use delta format, but for rendering the format, I have to include the whole editor, which is too heavy for me.. A screenshot of what the bug is.\n\n. A screenshot of what the bug is.\n\n. Strangely, it works fine in form submit playground, but not default playground\nform-submit uses quill@1.0.0 and default playground uses quill@1.1.6, maybe it's the problem.\nI tried quill@1.1.5 and it works fine, and switching back to quill@1.1.6 causes the problem.. Strangely, it works fine in form submit playground, but not default playground\nform-submit uses quill@1.0.0 and default playground uses quill@1.1.6, maybe it's the problem.\nI tried quill@1.1.5 and it works fine, and switching back to quill@1.1.6 causes the problem.. ",
    "ysyyork": "@fernandogmar Why not persist content using delta as json format? I tested and delta will retain multiple spaces. . @fernandogmar Why not persist content using delta as json format? I tested and delta will retain multiple spaces. . @fernandogmar I see what you mean. Thanks for reminding. That's also my case. . @fernandogmar I see what you mean. Thanks for reminding. That's also my case. . ",
    "chris-hall-hu": "Just run into this issue, it took longer than it should to work out how to grab the HTML, now going to have to do some testing to ensure all the formatting in preserved. \nIf you are using quill to edit and then simply presenting the edited data somewhere else (without the overhead of quill) this is a bit of a hiccough/potential headache in what otherwise was a very easy integration.. ",
    "Hainesy": "@danrichards, as @jhchen mentioned, that depends on the order of child elements. A less brittle implementation would be:\nQuill.prototype.getHtml = function() {\n    return this.container.querySelector('.ql-editor').innerHTML;\n};\n. ",
    "danrichards": "Thanks @Hainesy and @jhchen !. ",
    "samgan-khan": "Hi,\nI faced the same issue with quill js. I found a solution. I solved the above problem with the help of a hidden input and a little js in the following way.\n html part \n\n\n/ \n* js part\n/\nvar quill = new Quill('#post-editor', {\n    theme: 'snow'\n  });\nvar fetch_post_content = function () {\n      $('#post').val($('.ql-editor').html());\n    }\n    $('#post-editor')\n    .keyup(fetch_post_content)\n    .blur(fetch_post_content);\n. ",
    "rengelking": "I ended up storing the delta, and reconstituting using this function:\nfunction quillGetHTML(inputDelta) {\n        var tempQuill=new Quill(document.createElement(\"div\"));\n        tempQuill.setContents(inputDelta);\n        return tempQuill.root.innerHTML;\n    }. I ended up storing the delta, and reconstituting using this function:\nfunction quillGetHTML(inputDelta) {\n        var tempQuill=new Quill(document.createElement(\"div\"));\n        tempQuill.setContents(inputDelta);\n        return tempQuill.root.innerHTML;\n    }. This was a deal breaker for me with using this; I don't want to store both Delta json and HTML; shame because looks like such a great product; I am switching to summernote. This was a deal breaker for me with using this; I don't want to store both Delta json and HTML; shame because looks like such a great product; I am switching to summernote. ",
    "Promotools": "$(\"#myForm\").find('#quillEditor .ql-editor').html()\nworks for me.\n- #quillEditor: is the ID of div where editor is loaded. ",
    "sourcegr": "A little late to the party, but here goes anyway :) \nIn order to get any extra spaces the user has inserted, I use\nthis.editor.root.innerHTML.split('  ').join(' &nbsp;')\n(note, there are two spaces in the split and one space in the join!)\n. ",
    "mrspeaker": "This thread has me a bit worried about using Quill for our project. I chose it because I am big fan of the Delta format - but we have several third-party integrations and they only understand, and will be displaying, plain-old-HTML. Due to some legacy integration, we need to store the text editor data as HTML and reconstitute it (to its Delta format) each time. We are doing additional transformations on the Delta format after reconstituting it.\nIs this unsafe? Pulling the HTML from the browser-rendered output sounds like we are dependent on browser implementations, and discrepancies could occur moving between the two formats. But at some point the Delta must be transformed into HTML to display the HTML in the first place - is there any way to hook into that?. This thread has me a bit worried about using Quill for our project. I chose it because I am big fan of the Delta format - but we have several third-party integrations and they only understand, and will be displaying, plain-old-HTML. Due to some legacy integration, we need to store the text editor data as HTML and reconstitute it (to its Delta format) each time. We are doing additional transformations on the Delta format after reconstituting it.\nIs this unsafe? Pulling the HTML from the browser-rendered output sounds like we are dependent on browser implementations, and discrepancies could occur moving between the two formats. But at some point the Delta must be transformed into HTML to display the HTML in the first place - is there any way to hook into that?. ",
    "fibigerg": "Is there an official skeleton project to implement our custom Delta to HTML transformations on frontend part of our webapps? Eg. bold could be  or  etc.. ",
    "vikrantrathore": "@jhchen it shows null, which is correct so as specified by benbro it needs to be accessed as this.$.editor (due to local dom). But in that case it cannot load the styles due to polymer restriction on External Styles,  So it still doesn't work properly inspite of changing #editor to this.$.editor\n\n. @benbro  Its not just a polymer question since quill works on adding dom nodes, its relevant for quill as well. Quill in its current form will not work with webcomponents specification directly implemented in browser, it will only work with polyfilles using webcomponents-lite.js.\nAlso the way its implemented it will make it hard to convert into web components which can directly be used within react, angular or other frameworks. \n. @jhchen The source of my original issue was quill not working with web components library. So based on your suggestion opened a ticket with polymer.\nBut indeed the issue is with quilljs itself not following the Web Component standards, as it doesn't work with W3C's web components Shadow Dom specification. Probably you should have kept the ticket open if you are expecting a contribution, otherwise people won't know that quill doesn't work with web components.\n. 1. It wasn't a blame, the ticket was opened with Polymer project based on responses above check the message from @benbro . Indeed one of the Polymer community member responded to my tickets and also updated this ticket with details rather then just closing the ticket on Polymer list, which I will close given they have at least resolved it for me. I can understand if you do not want to tackle it expecting a contribution to fix it, probably too much on the plate before 1.0.0 magic release.\n2. Indeed the very first code in this ticket still doesn't work. If the above component is used as part of other web components its not displayed at all unless Quill js is not imported via src in the the new component again, which means if quill is used in 5 different places in a progressive single page app (SPA) the js library will be downloaded 5 times. This is not how web components work. Also styles for toolbar needs to re-written otherwise cannot use it in Chrome.\nSo in my view this ticket is unresolved and not just minor inconvenience, still thanks for all the help and responses really appreciate it.\n. ",
    "TimvdLippe": "The problem here is that the styles defined by Quill assume access to the whole DOM tree. However, the new shadow dom specification (which is used in Polymer) defines that styles do not leak accross the shadow-root boundary. Therefore Quill is incompatible with shadow dom, not Polymer per se. For more information see the recent blog as it is shipped in Chrome 53: http://blog.chromium.org/2016/08/chrome-53-beta-shadow-dom.html. You can read a guide at https://developers.google.com/web/fundamentals/primers/shadowdom/\n. https://github.com/quilljs/quill/blob/develop/core/quill.js#L363\ndocument.querySelector does not traverse beyond shadow boundaries and therefore can not find elements inside the shadow dom.\n. If I understand the responses in this thread (keep in mind I have zero experience with Quill) it seems you have to replace '#editor' with this.$.editor and then it should work?\n. ",
    "VoxelPerfect": "It is obvious that Polymer does not \"like\" external libraries with separate CSS files. That said, @jhchen quill.js compatibility with frameworks such as Polymer, is not those frameworks' responsibility.\nThe provided example is based on a deprecated feature of Polymer and using a style module does not seem to work out of the box. I will invest a few more hours on this but if it doesn't work I will have to move on to an alternative editor...\nIf I do make it work, then I will definitely share the solution here.\n. It is obvious that Polymer does not \"like\" external libraries with separate CSS files. That said, @jhchen quill.js compatibility with frameworks such as Polymer, is not those frameworks' responsibility.\nThe provided example is based on a deprecated feature of Polymer and using a style module does not seem to work out of the box. I will invest a few more hours on this but if it doesn't work I will have to move on to an alternative editor...\nIf I do make it work, then I will definitely share the solution here.\n. @jhchen Web Components are based on a very specific philosophy: each component is independent and all its CSS, HTML and Javascript code is encapsulated in one file. In a few months maybe a little bit more, most modern browsers will support this natively without the need of polyfills such as Polymer. React and Angular follow similar approaches.\nBy the way... the oldest and most popular HTML editor, does have a polymer wrapper provided by a third-party developer... :-)\nThat said, every product is designed for a specific target group; therefore, I totally respect your choices. You cannot satisfy everyone.\n. @jhchen Web Components are based on a very specific philosophy: each component is independent and all its CSS, HTML and Javascript code is encapsulated in one file. In a few months maybe a little bit more, most modern browsers will support this natively without the need of polyfills such as Polymer. React and Angular follow similar approaches.\nBy the way... the oldest and most popular HTML editor, does have a polymer wrapper provided by a third-party developer... :-)\nThat said, every product is designed for a specific target group; therefore, I totally respect your choices. You cannot satisfy everyone.\n. Great job @benbro !\nThat could become the official \"wrapper\" for Polymer in Quill website / repo. And then \"wrappers\" for Angular and React could follow. Web app development has changed a lot the last couple of years.\n. Great job @benbro !\nThat could become the official \"wrapper\" for Polymer in Quill website / repo. And then \"wrappers\" for Angular and React could follow. Web app development has changed a lot the last couple of years.\n. ",
    "gersonfa": "Someone have the implementation in angular 2?\n. ",
    "herberthobregon": "@chuckh Bold and italic dosent work. @chuckh Bold and italic dosent work. ",
    "skcorroh": "@chuckh Is there a Polymer 2.0 version? running the command bower install --save polymer-quill (as stated by the repo) is returning an \n\nECONFLICT Unable to find suitable version for iron-resizable-behavior. \n",
    "joekrump": "@alexkrolick Hey Alex, I may be able to share it in a bit. I'm pretty busy with a large project that I've been working on and so I haven't been able to export this in a nice modular way. It is a react component with quite a few dependencies. If I have the chance to export it as a package in node I'll let you know.\n. @ergo @stevenwinslowwhite Unfortunately I've not made any notable progress since my last post as fulltime work and another side-project have been eating up a lot of my time. I have a long weekend this weekend and may have a bit of time to work on this and can perhaps even push the code in a modular form so that any of you can take a look at it and perhaps continue on with dev work.. ",
    "stevenwinslowwhite": "+1 - @joekrump would love to use what you have if it ever gets published.. Great - I will be building out something similar if not using yours, so if\nyou post what you have I can try to morph it to our use case, and push any\nupdates.\nOn Fri, Feb 10, 2017 at 2:31 PM, Joe Krump notifications@github.com wrote:\n\n@ergo https://github.com/ergo @stevenwinslowwhite\nhttps://github.com/stevenwinslowwhite Unfortunately I've not made any\nnotable progress since my last post as fulltime work and another\nside-project have been eating up a lot of my time. I have a long weekend\nthis weekend and may have a bit of time to work on this and can perhaps\neven push the code in a modular form so that any of you can take a look at\nit and perhaps continue on with dev work.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/905#issuecomment-279084621, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARQ9F6HxMh8pqty3p3sO9dXg9GG7aIagks5rbOVKgaJpZM4JyYzF\n.\n. \n",
    "Julioocz": "@joekrump can you provide some tips for inserting react components into the editor?. Thanks. ",
    "lo1tuma": "Similar to the mentioned issue, I guess I come across a scenario that can\u2019t be expressed as a Delta object where line breaks are used to specify block elements/styles:\n<ol>\n            <li>one</li>\n            <li>\n                <b>two</b>\n                <ul>\n                    <li>unordered</li>\n                    <li>unordered</li>\n                </ul>\n                <b>still two</b>\n            </li>\n            <li>three</li>\n        </ol>\nAs you can see there is another text after the nested lists ends which still belongs to the second list item.\n. ",
    "bhamesh": "Hi benbro ,\nquill.disable(); ---------- not working\nThis is my code :\n      $(document).on(\"click\", \"[data-role='edit-question']\", function(){\n        var postname = $(this).attr('data-post-key');\n        var editbutton = '#' + postname + \"-li-edit-question\";\n        var toolbar = '#' + postname + \"-qjtoolbar\";\n        var editorid = '#' + postname + \"-qjeditor\";\n        $(editbutton).addClass(\"hide\");\n```\n    var quill = new Quill(editorid, {\n      modules: {\n        // toolbar: toolbar\n        toolbar : true\n      },\n      theme: 'snow',\n})\nquill.disable(); ---> this not work\n\n});\n```\nwhen I put quill.disable() in my code ,It disable for every time.it not working properly.\nI'm trying to editable quilljs only when I click on edit event fired on quilljs and when I save this changes and click on save button,then quill will disable i.e readonly.\nSo any other option ?\nThanks and regards,\nbhamesh\n. Hello jhchen,\nWhen I click on edit button for quill,It switch to editing mode but when I click on save button for the quill it will be remain in editing mode.\nSo my question is how to disable quill after I click on save button ?\nThanks.\n. Hi jhchen,\nCan you please explained how can use content section in my following code -\n```\nhtml code -\n\n        {{ post.pst_text }}\n\n\n\n\nEdit\n\n```\n```\njs code ->\n$(document).on(\"click\", \"[data-role='edit-question']\", function(){\n        var postname = $(this).attr('data-post-key');\n        var editbutton = '#' + postname + \"-li-edit-question\";\n        var editorid = '#' + postname + \"-qjeditor\";\n        $(editbutton).addClass(\"hide\");\n    var quill = new Quill(editorid, {\n      modules: {\n        // toolbar: toolbar\n        toolbar : true\n      },\n      theme: 'snow',\n       // readOnly: true,\n    })\n    // quill.enable();\n    // quill.enable(false);   // Disables user input\n    // quill.editor.enable(false);\n  });\n\n```\n. ",
    "servermachine": "@bhamesh I also have this issue. quill.enable(false) still keeps the text editable in the DOM.\nI found a workaround by setting contenteditable=\"false\" on the content div (div class=\"ql-editor\")\n. Hi @jhchen.\nI did a little more analysis. I fixed it 5 minutes ago. It seems it was an issue with my implementation of Quill with Vue.js.\n. Hi @noleafclover614.  I'm using a customised version of vue-quill. Did you try that? \nIf it didn't work, I can upload my version with the container vue component.. ",
    "mattkoch614": "@servermachine Just wondering how you implemented Quill with Vue.js? I've tried several different ways and I've never been able to get the toolbar working.. @servermachine Just wondering how you implemented Quill with Vue.js? I've tried several different ways and I've never been able to get the toolbar working.. ",
    "ben2323": "Was this bug fixed already ?. Was this bug fixed already ?. ",
    "shuckster": "I'm still seeing it.\nI'm adding my toolbar to its own container, if that helps.\nEDIT: Ah yes, this is still an issue with \"strict\" set to false:\nhttps://codepen.io/anon/pen/QgRYgg\nAlso, the toolbar-container didn't matter after all:\nhttps://codepen.io/anon/pen/BZeMJQ. @zzkkui I think you have to be slightly more specific than that. :D\nIf you're just running that little block of code as-is, then you'll get an undefined for fileInput, axios, and UPLOAD_IMAGE_URI at the very least.. You can patch the issue yourself if you like. You just need to look at the first argument (the thisArg) to each of these in quill.js:\n[].find.call\n[].forEach.call\n[].indexOf.call\n[].map.call\n[].reduce.call\n[].slice.call\n\nPrototype was written in a time when all of these weren't really imagined to be used on anything other than an Array, or the Enumerable class that was offered by the library.\nConsequently, Prototype's duck-punching expects an .each() to exist on the thisArg of all of these methods, which isn't the case for NodeList, classList, and so on, which is what is being used in Quill.\nAnyway, to fix the problem, wrap the first argument in an Array.from() like this:\nBefore:\nvar format = [].find.call(input.classList, ...\n\nAfter:\nvar format = [].find.call( Array.from(input.classList), ...\n\nDo that for all instances of the list above.\nI've had to do the same thing myself and it seems to work alright so far.. So after updating from 1.2.6 to 1.3.0 it's already a pain in the butt to insert Array.from() everywhere, so I came up with this:\n(function _closure_youShouldReallyMigrateAwayFromPrototypeButUnderstandThatYouMightBeUnderTheCoshToGetItWorkingQuickly( global ) {\n\n    var hasOwn = Object.prototype.hasOwnProperty;\n    var duckPunch = {\n\n        _each: function __each( callback, thisArg ) {\n\n            if ( this == null ) { // jshint ignore:line\n                throw new TypeError( 'this is null or not defined' );\n            }\n\n            if ( typeof callback !== 'function' ) {\n                throw new TypeError( callback + ' is not a function' );\n            }\n\n            var key, value, context,\n\n                O = Object(this),\n                index = 0;\n\n            if ( 1 < arguments.length ) {\n                context = thisArg;\n            }\n\n            for ( key in this ) {\n                if ( hasOwn.call( this, key )) {\n\n                    value = this[ key ];\n                    callback.call( context, value, index, O );\n\n                    index += 1;\n\n                }\n            }\n        }\n    };\n\n    duckPunch.each = Enumerable.each; // jshint ignore:line\n    duckPunch.forEach = duckPunch.each;\n\n    // ...\n\n    var duckPunchList = 'NodeList NamedNodeMap DOMTokenList HTMLOptionsCollection HTMLCollection'.split( ' ' );\n\n    duckPunchList.forEach( function _forEach( quack ) {\n        Object.extend( global[ quack ].prototype, duckPunch );\n    });\n\n}( window ));\n\nHope it helps someone.. I tested the patch with Quill v1.3.0 only, and that's the one I'm sticking with for a while.\nNot tried yet with v1.3.3, but I remember I had a few issues with v1.3.2 when that came out. I think I even saw the same space-bar issue, and there were more problems with focus/blur/change events not firing as expected.\nI didn't get far enough to determine what the problem was, although the patch here is intrusive enough to be the likely cause. Since v1.3.0 worked great I've simply downgraded until I get round to trying again.. I guess it goes without saying, but do run the patch after Prototype is loaded, and before you add your Quill component to the page.\nI don't know about the jQuery.hotkeys, but this commit in v1.3.1 started causing problems for me with jQuery mousedown/up hooks, so I can imagine something similar is going on for the spacebar.. Thanks for the tip! I'll try it out next upgrade.. Same issue here.. I had a sort-of-similar issue with Prototype, and you can find the trail on this issue: https://github.com/quilljs/quill/issues/1261. Yes, the /> closer for br, img, and such are XHTML specific, and only absolutely required for XHTML Strict modes.\nIt's been a few years since this was ever going to be a thing, so if you're still rocking XHTML you'll be pleased to know you can relax now.\nSaying that, old habits die hard, and I always close those tags myself when hand-writing them. :D . ",
    "ahmedlhanafy": "@jhchen i did but the color picker confuses the color added with css with the default color which is white\n. @jhchen I'm using the default one \n. ",
    "nateps": "Very excited about this feature being reimplemented.\nAs an improvement, would also be excellent if the feature supported displaying a selection range per cursor, similar to Google Docs.\n. Very excited about this feature being reimplemented.\nAs an improvement, would also be excellent if the feature supported displaying a selection range per cursor, similar to Google Docs.\n. ",
    "kminehart": "How's this looking?  Haven't seen any commits for a while; I'd love to contribute.\n. How's this looking?  Haven't seen any commits for a while; I'd love to contribute.\n. ",
    "deepakjtrigent": "Hi @jhchen \nAny idea on when this module might get released?\nI am dependent on the multi cursor support which was a great feature and looking forward for it to be back as soon as possible.\nAwesome editor by the way. Thanks.. ",
    "jeffbryner": "FYI: Not a multi-cursors module, but this does support reactive, realtime editing in quill via meteor:\nhttp://quill-realtime-demo.jeffbryner.com:3000/\nSource: https://github.com/jeffbryner/quill-reactive\nPosted here since this issue is the most comprehensive docs I found while looking for something like this ;-]. ",
    "Jbithell": "Also checkout https://docs.pusher.com/textsync which is based on Quill. Also checkout https://docs.pusher.com/textsync which is based on Quill. ",
    "AlbertoGP": "[edit: changed issue title to indicate that this happens when loading locally, not through a web server]\nIt happens when opening the file locally, for instance file:///tmp/quill/examples/full.html\nI see now that KaTeX is linked from the URL you mention, not included in the distribution.\nIf I load it through a web server, it works.\n. ",
    "delibes": "You might like jhchen's very helpful answer to issue #863 . It should be enough to start building this yourself and integrate any CDN API.\n. ",
    "sdemontfort": "@saw chiming in because editable tables would be amazing for my use case in an education product I help develop.\nWould it be possible at all to have a delta object within each table cell?\nP.s I'll be looking at the source code soon to see if I can bring anything to the table (pun intended).. ",
    "jackpope": "Any updates on using tables in quill using this or other means?. ",
    "ryanlin1986": "@mrdream24  Tried built-in pinyin IME in Win10(built-in IME, not third party), everything works fine.\n. ",
    "murran": "Not that I can see, would you mind linking to the relevant files?\n. Not that I can see, would you mind linking to the relevant files?\n. Alright, thanks @alexkrolick! Just out of curiosity, why is it part of the npm package but not the bower one?\n. Alright, thanks @alexkrolick! Just out of curiosity, why is it part of the npm package but not the bower one?\n. For anyone having the same issue as me, I realised I could get bower to supply the distribution by using bower install quill=https://github.com/quilljs/quill/releases/download/v1.0.3/quill.tar.gz --save \nIt's not as pretty as usual bower entries, but works :)\n. For anyone having the same issue as me, I realised I could get bower to supply the distribution by using bower install quill=https://github.com/quilljs/quill/releases/download/v1.0.3/quill.tar.gz --save \nIt's not as pretty as usual bower entries, but works :)\n. ",
    "Pedro-vk": "I've found the error when I passed a undefined to quill.pasteHTML(undefined). \n. ",
    "wernerlaude": "Thanks for your fast reply.\nMay be I missed it, but can\u2019t find.\n\nAm 08.09.2016 um 11:21 schrieb benbro notifications@github.com:\nWhere do you see that a link doesn't have target=_blank?\nAre you using recent version 1.0.3?\nWhen I go to the demo at http://quilljs.com http://quilljs.com/ and click on the first link, the tooltip show a link with target=\"_blank\". The link opens in a new tab.\nhttps://github.com/quilljs/quill/\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/quilljs/quill/issues/935#issuecomment-245541775, or mute the thread https://github.com/notifications/unsubscribe-auth/AAC5hUl6Fm9poFmrgDy9poQcb4YOlDFtks5qn9OmgaJpZM4J3xSE.\n\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. Thanks for your fast reply.\nMay be I missed it, but can\u2019t find.\n\nAm 08.09.2016 um 11:21 schrieb benbro notifications@github.com:\nWhere do you see that a link doesn't have target=_blank?\nAre you using recent version 1.0.3?\nWhen I go to the demo at http://quilljs.com http://quilljs.com/ and click on the first link, the tooltip show a link with target=\"_blank\". The link opens in a new tab.\nhttps://github.com/quilljs/quill/\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/quilljs/quill/issues/935#issuecomment-245541775, or mute the thread https://github.com/notifications/unsubscribe-auth/AAC5hUl6Fm9poFmrgDy9poQcb4YOlDFtks5qn9OmgaJpZM4J3xSE.\n\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. I see this:\n\nAm 08.09.2016 um 13:45 schrieb benbro notifications@github.com:\nWhen you go to the website you see a demo of the editor with some text.\nWhat happens when you click on one of the links in the text?\nhttp://quilljs.com http://quilljs.com/\n https://cloud.githubusercontent.com/assets/75841/18348227/da0eee16-75d2-11e6-83c7-43868626fe1c.png\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/quilljs/quill/issues/935#issuecomment-245572540, or mute the thread https://github.com/notifications/unsubscribe-auth/AAC5heNUt1uACj9biqjdSJnCPr_Wk5hEks5qn_VcgaJpZM4J3xSE.\n\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. I see this:\n\nAm 08.09.2016 um 13:45 schrieb benbro notifications@github.com:\nWhen you go to the website you see a demo of the editor with some text.\nWhat happens when you click on one of the links in the text?\nhttp://quilljs.com http://quilljs.com/\n https://cloud.githubusercontent.com/assets/75841/18348227/da0eee16-75d2-11e6-83c7-43868626fe1c.png\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/quilljs/quill/issues/935#issuecomment-245572540, or mute the thread https://github.com/notifications/unsubscribe-auth/AAC5heNUt1uACj9biqjdSJnCPr_Wk5hEks5qn_VcgaJpZM4J3xSE.\n\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. \n. \n. > Am 08.09.2016 um 14:43 schrieb benbro notifications@github.com:\n\nThe tooltip in your image let you edit or remove the link.\n\nok that is clear\n\nThe link in the tooltip (next to \"Visit URL\") has target=_blank and opens a new tab.\ngot it..but that is not a solution for a customer.\n\nI, as developer must supply an option for my customer. . You can not bother them with these details.\nWhen a editor supplies text in a textfield with a link, it must be optional for the editor to \u201aprogram\u2018 a link in that way that a new browser window opens. (or not) when the link is clicked.\nThis is important for customers. They don\u2019t want that visitors of their page loose track and have to find back.\nin Ckeditor it is like that\n\nI don't understand what is the issue here.\n\u2014\n\nThanks so far..\nWerner\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. > Am 08.09.2016 um 14:43 schrieb benbro notifications@github.com:\n\nThe tooltip in your image let you edit or remove the link.\n\nok that is clear\n\nThe link in the tooltip (next to \"Visit URL\") has target=_blank and opens a new tab.\ngot it..but that is not a solution for a customer.\n\nI, as developer must supply an option for my customer. . You can not bother them with these details.\nWhen a editor supplies text in a textfield with a link, it must be optional for the editor to \u201aprogram\u2018 a link in that way that a new browser window opens. (or not) when the link is clicked.\nThis is important for customers. They don\u2019t want that visitors of their page loose track and have to find back.\nin Ckeditor it is like that\n\nI don't understand what is the issue here.\n\u2014\n\nThanks so far..\nWerner\nWerner Laude - Ruby on Rails/WebDevelopment - M\u00fcnchen \nmail@laude.biz mailto:mail@laude.biz | +49 178 135 34 39  | webagentur-laude.de http://www.webagentur-laude.de/\n. ",
    "etherbob": "@benbro when I call quill.container.firstChild.innerHTML I get links that have target='_blank' set on them. Are there examples/docs somewhere on how to use Delta objects to generate html or perhaps even just a different json structure.\n. I had a similar problem while trying to use it with a rails app I'm working on. Had to add\nRails.application.config.assets.precompile += %w( quill.js ) to config/initializers/assets.rb and pull the script in inside my edit page (vs application.js) to get links working.\n. @jhchen found a way to reproduce it in chrome/firefox/safari on a mac, but not in codepen\nIn the 1.0.3 distribution download. Modify the full example to load quill.js in the header instead of the body.\n. ",
    "fpavlic": "Hi Jason,\nWill you make adjustments to work on IE 11 ? I've tested it in IE Edge and it is working nicely, but IE11 unfortunately not. There is issue where IE11 doesn't support 'classList' - this is easy modification\nThanks,\nFilip. ",
    "SidFeng": "\u6211\u975e\u5e38\u7684\u5931\u671b\uff0c IE9 and IE10 control fewer than 45% of the browser market in china.. \u6211\u975e\u5e38\u7684\u5931\u671b\uff0c IE9 and IE10 control fewer than 45% of the browser market in china.. ",
    "manavfogla": "+1. ",
    "joshsalverda": "Any chance this will get merged in one day? If it helps the MDN page for a contenteditable field recommends the use of role=\"textbox\", aria-placeholder, and aria-labeledby\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/textbox_role\nIncluding aria-describedby and aria-label, as this pr does, are also good and makes a lot of sense to me.. Any chance this will get merged in one day? If it helps the MDN page for a contenteditable field recommends the use of role=\"textbox\", aria-placeholder, and aria-labeledby\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/textbox_role\nIncluding aria-describedby and aria-label, as this pr does, are also good and makes a lot of sense to me.. ",
    "mpriscella": "@benbro Nope, seems to be working there.\nHere's a screenshot of the behavior I'm experiencing, I'm still looking around the codebase but it looks like the tooltip is having trouble getting the bounds which is why it's off screen.\nAre there any other toolbar modules that use a tooltip which I could test? Maybe I'll be able to get some more helpful information.\n. Ahh, here we go -\nhttp://codepen.io/mpriscella/pen/pEJBKZ\nMy container element doesn't have a defined height.\n. I don't see the error either. I tried downloading http://cdn.quilljs.com/1.0.3/quill.js and using that in my code but I received the same error. Does codepen display library errors in the console?\n. @jhchen I tried again being sure to set a defined height in my css but it's still failing for me. I also looked for any elements with high z-index's per your comment and was able to verify that there were none on the page. I've also removed any unnecessary javascript files from the page in the off chance that they could affect this (they didn't).\nAs far as I can tell this.options.bounds is null when being passed to SnowToolTip in themes/snow.js at line 29, unless boundsContainer is modified somewhere else before being passed to ToolTip (defined in ui/tooltip.js).\n. Ahh, that makes sense. Modified my toolbar options to the following and the link tooltip is now working as expected:\n// Toolbar Options.\n{\n  modules: {\n    toolbar: [\n      [{ header: [false, 1, 2] }],\n      [\"bold\", \"italic\", \"underline\"],\n      [\"blockquote\"],\n      [\"link\"]\n    ]\n  },\n  bounds: document.body,\n  theme: \"snow\"\n}\nThanks for the insight!\n. ",
    "abelousov": "To get the error, theme should be set to 'snow'; that theme relies on bounds option, so the fix could be to check for that option, and if absent, throw an error that explains how to set it correctly (in a perfect world it could link to corresponding docs section)\nCan't do it myself, as I have no idea how should be bounds described correctly\n. My bad - the issue is caused by Lazarus chrome extension - it looks like I didn't check it with extensions disabled;\nSo when you don't have that extension enabled, the issue doesn't occur\n. ",
    "ygrishajev": "@jhchen Ok, I changed shift into horizontalShift to better reflect its sence and added horizontalShift to represent the relevant action. Also changed position() method to return an object containing vertical and horisontal shifts.\n. @jhchen Thanks for the explanation. Didn't notice position() use in bubble theme. Made the updates needed.\n. ",
    "cspanring": "We just ran into this issue with the (default) snow theme: our users can't edit links on lines close to the bottom of the editor.\nWould it be possible to merge this PR as it fixes the issue with the default snow theme and open a separate issue for the Bubble theme?. We just ran into this issue with the (default) snow theme: our users can't edit links on lines close to the bottom of the editor.\nWould it be possible to merge this PR as it fixes the issue with the default snow theme and open a separate issue for the Bubble theme?. ",
    "tjrobertsnz": "How did you end up doing this @chrislentz? I'm considering Quill for an app I'm building, @ and # tagging will be key components to wondering whether you successfully implemented with Quill in the end or went down another route.. ",
    "guillaumecodet": "@felipeochoa your code doesn't work on a PC keyboard, the '@' doesn't have the same keyCode, did you find a workaround ?. @felipeochoa your code doesn't work on a PC keyboard, the '@' doesn't have the same keyCode, did you find a workaround ?. ",
    "micheledicosmo": "@chrislentz @felipeochoa Did you succeed? I'm also starting some implementation today and would be nice to create a proper module for Quill joining our knowledge.. ",
    "mkallies": "Anyone have cursor issues with At.js?  If you have the dropdown with the possible mentions, moving the cursor will make it jump either to the end of the line or to the beginning. Anyone have cursor issues with At.js?  If you have the dropdown with the possible mentions, moving the cursor will make it jump either to the end of the line or to the beginning. @nitaskenderi we forked At.js and removed the click, left and right arrow listeners.  Super PITA with IE11, contenteditable and At.js.  \nInstead of adam's solution, we just added support for the <span>'s since Quill will remove it if it doesnt recognize them.  \nconst Parchment = Quill.import('parchment');\nconst Query = new Parchment.Attributor.Class('custom', 'atwho', { scope: \nParchment.Scope.INLINE_BLOT, whitelist: ['query', 'inserted'] });\nQuill.register(Query, true);\n. @nitaskenderi we forked At.js and removed the click, left and right arrow listeners.  Super PITA with IE11, contenteditable and At.js.  \nInstead of adam's solution, we just added support for the <span>'s since Quill will remove it if it doesnt recognize them.  \nconst Parchment = Quill.import('parchment');\nconst Query = new Parchment.Attributor.Class('custom', 'atwho', { scope: \nParchment.Scope.INLINE_BLOT, whitelist: ['query', 'inserted'] });\nQuill.register(Query, true);\n. This code seems to alleviate the issues.  At.js is able to insert with the span and the class.  Only problem is after insertion, the cursor jumps to the beginning or the end of the span depending on which direction you're moving with the arrow keys.\nPressing backspace deletes the mention.\nconst Parchment = Quill.import('parchment');\n    const Query = new Parchment.Attributor.Class('custom', 'atwho', { scope: \n        Parchment.Scope.INLINE_BLOT, whitelist: ['query', 'inserted'] });\n    Quill.register(Query, true);. This code seems to alleviate the issues.  At.js is able to insert with the span and the class.  Only problem is after insertion, the cursor jumps to the beginning or the end of the span depending on which direction you're moving with the arrow keys.\nPressing backspace deletes the mention.\nconst Parchment = Quill.import('parchment');\n    const Query = new Parchment.Attributor.Class('custom', 'atwho', { scope: \n        Parchment.Scope.INLINE_BLOT, whitelist: ['query', 'inserted'] });\n    Quill.register(Query, true);. ",
    "monstrfolk": "Could someone post a working example please.. Could someone post a working example please.. ",
    "eltimn": "I just wanted to let anyone coming here know that there are now two viable Quill mentions modules:\n\nquill-mention\nquill-mentions\n\nThe former has no dependencies, is only 5k compressed, and, most importantly for me, uses an Embed blot.\nI only played around with the latter for a little while but it seemed to have more features. However, I need to store the user's id with the mention, so I need something that uses an Embed.. ",
    "skybrian": "There must be some other difference. Here is another example that doesn't work unless I remove the DOCTYPE.\n```\n<!DOCTYPE html>\n\n\n\n\n\n\n\n Include the Quill library \n\n Initialize Quill editor \n\n  var quill = new Quill('#editor', {\n    theme: 'bubble'\n  });\n\n\n\n```\n. I verified that it works with \"height\" as you suggested, but \"min-height\" doesn't work.\nAlso, with height set to 400, if I paste in a large document so that the scrollbar appears, and then select some text on the last line in the document, the tooltip doesn't show up.\nIt looks like there have to be at least two lines below the current line for the tooltip to show up.\n. This is rather rude. I reported additional behavior that I saw as a favor. Open a new bug yourself, if you care to fix it.\n. This is rather rude. I reported additional behavior that I saw as a favor. Open a new bug yourself, if you care to fix it.\n. I apologize for my rudeness.\nFrom my point of view, I was trying to report some strange behavior and it seemed like I was getting repeatedly dismissed based on different technicalities. On each step we got closer to figuring out what's happening, so that's good, but it still felt like an adversarial relationship, where one person is trying to keep the bug open and the other is trying to close it.\nInstead, I'd rather have a conversation. Perhaps there are several different bugs (or possibly features). I'll leave that up to the Quill developers. But we should be able to discuss what's happening first. Maybe a mailing list would be a better place, if there is one?\n\nAt this point, I think the my confusion was that the quickstart [1] isn't quite as simple as it looks. I was confused by why quirks mode was being used by default, but it appears that's just because the quickstart isn't intended as a full HTML page. So one suggestion is to make it a full html page (with a DOCTYPE), as a better starting point for beginners.\nAlso, as another stumbling block for beginners, if you are using \"snow\" and you want to control the size of the entire editor, you actually need two nested divs, because the div that you pass in to Quill constructor is not necessarily the outermost div - the toolbar (if there is one) goes above it. So instead it should be:\n<div id=\"editor-container\">\n<!-- toolbar appears here (if any) -->\n<div id=\"editor\"></div> <!-- pass this one to Quill -->\n</div>\nThe documentation [3] says \"Quill requires an container where the editor will be appended.\" That's sort of true but isn't the full story. Maybe that could be explained better?\n[1] https://quilljs.com/docs/quickstart/\n[2] https://quilljs.com/standalone/snow/\n[3] https://quilljs.com/docs/configuration/\n. I apologize for my rudeness.\nFrom my point of view, I was trying to report some strange behavior and it seemed like I was getting repeatedly dismissed based on different technicalities. On each step we got closer to figuring out what's happening, so that's good, but it still felt like an adversarial relationship, where one person is trying to keep the bug open and the other is trying to close it.\nInstead, I'd rather have a conversation. Perhaps there are several different bugs (or possibly features). I'll leave that up to the Quill developers. But we should be able to discuss what's happening first. Maybe a mailing list would be a better place, if there is one?\n\nAt this point, I think the my confusion was that the quickstart [1] isn't quite as simple as it looks. I was confused by why quirks mode was being used by default, but it appears that's just because the quickstart isn't intended as a full HTML page. So one suggestion is to make it a full html page (with a DOCTYPE), as a better starting point for beginners.\nAlso, as another stumbling block for beginners, if you are using \"snow\" and you want to control the size of the entire editor, you actually need two nested divs, because the div that you pass in to Quill constructor is not necessarily the outermost div - the toolbar (if there is one) goes above it. So instead it should be:\n<div id=\"editor-container\">\n<!-- toolbar appears here (if any) -->\n<div id=\"editor\"></div> <!-- pass this one to Quill -->\n</div>\nThe documentation [3] says \"Quill requires an container where the editor will be appended.\" That's sort of true but isn't the full story. Maybe that could be explained better?\n[1] https://quilljs.com/docs/quickstart/\n[2] https://quilljs.com/standalone/snow/\n[3] https://quilljs.com/docs/configuration/\n. ",
    "bytespider": "@skybrian Adding a DOCTYPE switches you from quirks mode to standards mode. In standards mode, the html and body elements do not default to 100% of the size of the viewport (browser window); instead, they are only as large as they need to be to contain their children. The table height of 100% means 100% of the containing element, but that's only as large as it needs to be to contain the contents of the table. Quirks mode is an emulation of the behaviour of older browsers, in which the html and body elements filled the viewport.\nTo fix the problem, you just need to add this to your document:\ncss\n<style>\n  html, body { height: 100% }\n</style>\nTake from http://stackoverflow.com/questions/1966300/height-100-is-not-working-in-html-when-using-doctype-how-i-can-fix-this\n. @skybrian Adding a DOCTYPE switches you from quirks mode to standards mode. In standards mode, the html and body elements do not default to 100% of the size of the viewport (browser window); instead, they are only as large as they need to be to contain their children. The table height of 100% means 100% of the containing element, but that's only as large as it needs to be to contain the contents of the table. Quirks mode is an emulation of the behaviour of older browsers, in which the html and body elements filled the viewport.\nTo fix the problem, you just need to add this to your document:\ncss\n<style>\n  html, body { height: 100% }\n</style>\nTake from http://stackoverflow.com/questions/1966300/height-100-is-not-working-in-html-when-using-doctype-how-i-can-fix-this\n. ",
    "zangab": "@skybrian put the \"min-height\" of 400px on the class \"ql-editor\" - works for me :)\na padding-bottom on the same class (at least 50px) does also show the tooltip on the last line (on long texts)\n. struggled the same prob - quickfix would be a \"padding-bottom\" of at least 50px on the \"ql-editor\" class\n. ",
    "cchimi": "Thanks for taking this up. I would personally vote for 2; if you're removing block formats I think it should be expected that you would remove all block formats touched by a selection. Alternatively you could have separate functions for removing line formats and inline formats, and let the code determine what to do based on the selection. I'm new to Quill and not familiar enough to guess at which is more in keeping with your style.\nIn the meantime, though, you may want to edit the documentation which says:\n\nLine formatting will be removed if the end of the line is included in the range. \n\nThat would make it clearer that the function currently doesn't distinguish scenarios based on the presence of a newline.\n. Not sure if this is helpful, but this is what I'm currently doing with my Clear Format button:\nfunction clearFormats(thisQuill, range){\n  //Check for newline in selection.\n  var eolInd = thisQuill.getText(range).search(/\\n/);\n  if (eolInd > -1){\n    //If the newline is found and is at the end of the selection,\n    //remove block formats up to the second to last character.\n    //This prevents the formatting of the next line from being\n    //removed. Otherwise, remove block formats for the range.\n    if (eolInd + 1 == range.length){\n      thisQuill.removeFormat(range.index, range.length - 1);\n    }else{\n      thisQuill.removeFormat(range.index, range.length);\n    }\n  //If a newline isn't found but the selection is collapsed and\n  //directly precedes a newline, remove the format up to the \n  //character preceding the cursor. Should probably be cleaned up.\n  }else if (range.length == 0 && thisQuill.getText(range.index, 1).search(/\\n/) > -1){\n    thisQuill.removeFormat(range.index - 1, 1);\n  }\n  //Grabs character formats from a separate object; would be handled\n  //differently in a different implementation. \n  var clearChars = {};\n  for (var k in charNames){\n    if (charNames.hasOwnProperty(k) && charNames[k].length > 0){\n      clearChars[k] = false;\n    }\n  }\n  //Removes inline character formats from the range. This may not\n  //be necessary generally, but the way in which I'm using Quill \n  //means that removeFormat doesn't touch the inline formats.\n  thisQuill.formatText(range.index, range.length, clearChars);\n}\nI think there may be some quirks related to how I have this set up that mean removeFormat works differently for me, so the inline format removal might not be required in a different implementation. This approach is working for me so far although it needs some more testing.\n. ",
    "sijad": "@jhchen I mean embedded videos, which rendered in an iframe, all src values shouldn't be allowed. I was just wonder if quill support every embedded videos links? or only some services like youtube, vimeo, etc?\nI also need to know what css styles quill add to tags? (color, font, background, etc), because allowing all css styles can be dangerous. \n. thanks for your effort @jhchen\nmost script and cms store origin user input intact beside rendered (sanitized) version in database for when user need to edit previous inputs.\n1. sanitizing user input before saving it in DB may produce some problem when user want to edit.\n2. sanitizing in client side is also expensive (sanitize-html minified version is about ~180kb)\ncould be please give me some advice here?\nboth CKEditor and TinyMCE have filter content feature.\n. @jhchen is it possible to use DOMParser class instead of using innerHTML?\nas delta do all other work (e.g. convert tags and attributes) i guess it'll really fix this issue. I didn't look enough in code so I may be wrong.\nDOMParser is well supported in all new browser http://caniuse.com/#feat=xml-serializer\njavascript\ntmpdoc = new DOMParser().parseFromString('<img src=\"\" onerror=\"alert(\\'it will not execute!\\')\">', \"text/html\");\nconsole.log(tmpdoc.body.innerHTML);\n. ",
    "nunoguerra": "What is the best way to add a input for user can put the custom color?. Do you have any estimate of when this bug will be fixed?. This bug is not fixed.\nhttps://codepen.io/anon/pen/eVpXPQ. This bug is not fixed.\nhttps://codepen.io/anon/pen/eVpXPQ. ",
    "v4n": "Also interested in having an option for smaller import or build by handpicking the toolbar options.\nFrom a quick look you could build a smaller release by removing imports and registrations that you won't need in https://github.com/quilljs/quill/blob/develop/quill.js and then run webpack --minimize --config _develop/webpack.config.js to generate a new release.\n. ",
    "che3vinci": "thanks very much. @jackmu95 \n. me,too. ",
    "rafbm": "I would also really like to have @jhchen\u2019s thoughts on this. The Cloning Medium with Parchment guide states the following:\n\n[\u2026] While Inline blots can be nested, Block blots cannot. Instead of wrapping, Block blots replace one another when applied to the same text range.\n\nI assume due the lack of support for Block blots nesting, nested lists (as well as nested blockquotes) cannot currently be implemented even with custom Parchment blots, is that correct?\n. ",
    "gregdetre": "Here's what puzzles me - List actually inherits from Container, rather than from Block - I assume that's how Lists can contain ListItems.\nI have tried and tried to create a CustomList that includes CustomList in its allowedChildren, but I haven't been able to get it to work :( In other words, I want this:\nhtml\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the outer list</li>\n  <ul class=\"nugget\" nuggetid=\"2\">\n    <li>An item in the inner list</li>\n  </ul>\n</ul>\nBut no matter how hard I try, Quill ends up modifying that to:\nhtml\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the outer list</li>\n</ul>\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the inner list</li>\n</ul>\n[Note that it also mangles the second nuggetid, replacing \"2\" with \"1\".]\nFor reference, this is the javascript behind that:\n``` javascript\n'use strict';\nimport Quill from 'quill';\nlet Parchment = Quill.import ('parchment');\nlet List = Parchment.query('list');\nlet NuggetidAttributor = new Parchment.Attributor.Attribute('nuggetid', 'nuggetid', { \n});\nclass NuggetList extends List {\n  format(name, value) {\n    this.domNode.setAttribute('nuggetid', value);\n  }\n}\nNuggetList.tagName = 'UL';\nNuggetList.className = 'nugget';\nNuggetList.allowedChildren.push(NuggetList);\nQuill.register(NuggetidAttributor);\nQuill.register(NuggetList, true);\n```\nIf anybody has got this to work, I would love to hear from them.\n. Here's what puzzles me - List actually inherits from Container, rather than from Block - I assume that's how Lists can contain ListItems.\nI have tried and tried to create a CustomList that includes CustomList in its allowedChildren, but I haven't been able to get it to work :( In other words, I want this:\nhtml\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the outer list</li>\n  <ul class=\"nugget\" nuggetid=\"2\">\n    <li>An item in the inner list</li>\n  </ul>\n</ul>\nBut no matter how hard I try, Quill ends up modifying that to:\nhtml\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the outer list</li>\n</ul>\n<ul class=\"nugget\" nuggetid=\"1\">\n  <li>An item in the inner list</li>\n</ul>\n[Note that it also mangles the second nuggetid, replacing \"2\" with \"1\".]\nFor reference, this is the javascript behind that:\n``` javascript\n'use strict';\nimport Quill from 'quill';\nlet Parchment = Quill.import ('parchment');\nlet List = Parchment.query('list');\nlet NuggetidAttributor = new Parchment.Attributor.Attribute('nuggetid', 'nuggetid', { \n});\nclass NuggetList extends List {\n  format(name, value) {\n    this.domNode.setAttribute('nuggetid', value);\n  }\n}\nNuggetList.tagName = 'UL';\nNuggetList.className = 'nugget';\nNuggetList.allowedChildren.push(NuggetList);\nQuill.register(NuggetidAttributor);\nQuill.register(NuggetList, true);\n```\nIf anybody has got this to work, I would love to hear from them.\n. ",
    "JoshuaDoshua": "@jhchen Yessir. Essentially just using the innerHTML to save the editor content in a way that it can be used elsewhere independent of the indented class.\nContainers does seem promising. But this is definitely a complicated topic. Indenting needs to be aware of above list elements. An interesting note though: The core currently recognizes if you try to apply a list to a new line directly after a list.\ni.e. create an ordered list with 3 items, return to a new line breaking out of the list, enter some text and apply a list to that line appends it to the previous OL (now containing 4 items)\n. Honestly, I only wanted the H3 and thought that if I was offering to do the rest :)\nIt might be bad UI for the WYSIWYG, but I'm using quill for editing page content on a website, which should only contain a single h1. \nLooks like I'll just be doing custom heading icons. Thanks for getting back!\n. @fotomut\nNope sorry, I opted to do custom icons for all headings. . #979 . ",
    "luisrudge": "I also think the output of nested lists is less than ideal, but if we could have a css file with listing styles to make lists look the same as in the editor, maybe it would help initially.. @jhchen I'm truly sorry with the approach I used. I could make up some crazy story about it, but the truth is that I was an idiot. Again, sorry! I'll follow up in #979 . ",
    "m00nk": "Is there some news about this enhancement?. ",
    "AnrichVS": "@parterburn This is exactly my problem as well, forcing me to pre-parse content and adding actual numbering, which is very inconvenient. ",
    "arist0tl3": "@AnrichVS What is your strategy for getting the code back into the editor? Rewriting back to the ql-indent class structure?\nI'm currently exploring this, as like you and @parterburn, we use the output in html emails and other places. CSS isn't really a solution. I'm considering writing up a parser that translates the ql-indent li tags into nested uls/ols, etc. Unfortunately, it looks like I'd also have to write the reverse, as pasting nested lists into the editor gives me a flat list every time. So I'd have to rewrite the correct nest back into ql-indented code.\nNot something I'm really looking forward to, as it addresses a bit of an edge case, but does look noticeably wrong when a nested ol with numbers and letters gets flattened into one long ol.. Haha, pretty much what I'm in the process of doing now. Except I think we are nixing the ordered lists instead of trying to limit them to the parent level. Thanks for the feedback!. ",
    "RobAley": "I've just come across this problem too.\nI'm trying to create PDFs of the editor contents using mPDF, which doesn't support the CSS needed on li's to do it the current Quill.js way. This means that all nested lists have the same level of indentation as the parent, and the numbering on ordered lists is not reset for nested lists (i.e. the numbering continues sequentially for every li in the group of lists).\nmPDF does allow setting these on ul's/ol's, so if the indented lists were wrapped in ol or ul, then all would work properly.\nInstead I need to write a parser to manually identify and wrap each level (a job I think I'll put off until tomorrow!).. That's great, thanks.\n. I have the same question (I think). I have a custom inline format (although this applies to the standard formats like bold). If a user applies the format to a range, and then decides they want to remove it from that range, I want them to be able to click anywhere in the range (and not have to manually select the whole range exactly), click a button and then my code identifies what the range should be and formatText(....false) to remove the style.\nI have managed to get the node/element & blot corresponding to the current selection thus \nvar my_node = quill.selection.getNativeRange().start.node;\nvar my_blot = Parchment.find(my_node);\nwhich I think is where Lughino is at (he knows which element he wants to work  with). But I don't know how to get the index of the start of that node/blot so that I can do\nquill.formatText(start,my_blot.length(),'my_format', false);\nto remove the inline blot/format.\n. Thanks, I'll write up a proper feature request. I can't use css for e.g. a custom \"aside\" block that allows newlines (or a blockquote that quotes multiple paragraphs from another document) and has a border all the way around. You can only tell if the block is the last block (to set a bottom border) once you get onto the next block of a different type, and css selectors can't look backwards (afaik). You also can't use :last-of-type selector as that would only allow for one block of that type per document.\n. Thanks, it will be great to see your code, it's something I'm still\nstruggling with.\nOn Wed, 28 Feb 2018, at 6:23 AM, Adam Charron wrote:\n\nI've created some custom blots to make this work, and it definitely is\npossible. I'll be sure to share what I've put together here once I\nwrap my PR over at vanilla/vanilla, but we have some Blot's nested 3\nlevels deep with additional Embed Blots attached inside.> As an example our Spoiler ends up with the following DOM structure:>   \nOpens/Collapsed the content. Lots of stuff in here ... \n One line of the spoiler\nAnother line of the spoiler  > You basically get it wiring together  a few Container Blots. I've been\nworking to try to make the Blots a bit more re-usable at the moment\nbecause we have a similar structure for quotes as well, and have\ncontainers around a couple of our other Blot's for backwards\ncompatibility with a bunch of legacy stylesheets.> \u2014 You are receiving this because you were mentioned. Reply to this\nemail directly, view it on GitHub[1], or mute the thread[2].> \n\nLinks:\n\nhttps://github.com/quilljs/quill/issues/1121#issuecomment-369134862\nhttps://github.com/notifications/unsubscribe-auth/AFj7gPO69Oz4wWxlpCAxv-KaaQhtXxBUks5tZPDVgaJpZM4K3pWd\n. That looks like a reasonable work-around, I'm not sure if it has any side-\neffects. I never got to the bottom of why it was (much) slower on\nFirefox (mainly as I didn't have time to get to grips with the code base\nand work out what was happening on paste, although your details seem to\nindicate it's more likely related to DOM updates than the source of the\ndata). My project has now moved to a desktop Electron app (for unrelated\nreasons) and there are no slowdowns there so I won't be looking it\nfurther. It might be something @jhchen wants to look at in the next\nversion of Quill.\n\nOn Thu, 1 Feb 2018, at 10:14 PM, Aaron Sullivan wrote:\n\nI've been having the same issues with pasting with Firefox. This goes\nboth for pasting HTML and for using .setContents(delta). Performance\nis not ideal with Chrome, but it's completely unacceptable with\nFirefox for me, sometimes taking as long as 90 seconds for a 27k\ncharacter blob on slower machines.> But I found a nice solution that makes firefox lightening fast.\nThe idea is this: remove the root from the DOM, then use pasteHTML\nor setContents, then add the root back to the DOM. For me this code\nlooks like this:> const parent = Quill.root.parentElement;\nparent.removeChild(Quill.root); Quill.setContents(delta);\nparent.appendChild(Quill.root);> Doing that alone has increase performance in Firefox for me by\n10 fold!> \u2014 You are receiving this because you authored the thread. Reply to\nthis email directly, view it on GitHub[1], or mute the thread[2].> \n\nLinks:\n\nhttps://github.com/quilljs/quill/issues/1130#issuecomment-362419974\nhttps://github.com/notifications/unsubscribe-auth/AFj7gEEurTOjMR9yrJ7sRXXxUKEOyVx5ks5tQjcwgaJpZM4K7pcW\n. Thanks. (I've seen #117, I'm trying to implement an embed with several form inputs in a non-editable table, but the example I gave was just to illustrate the action). \n\nIf I can calculate it, what/how should my blot report the correct length (and update it if it changes)? . I've just tried on Windows 10, and Firefox fails there too (Chrome works fine). I don't have a Mac to test on. To be clear, it's important to have the actual HTML above as what is presented as HTML in the clipboard. So, if you copy and paste the code I provided in my issue direct from your web browser, the HTML that pastes into quill will (at least on Ubuntu and Windows) be the HTML that GitHub uses to display the \"HTML\", not the HTML itself (and so works fine even in Firefox on Ubuntu). If you first paste it into a text editor and then copy/paste that into quill, there is no alternative GitHub html there, and so it pastes the HTML we intended. Alternatively, copy directly from the title under the video on the youtube page - \nhttps://www.youtube.com/watch?v=ZhuHCtR3xq8\nI've disabled all addons in Firefox on Ubuntu and Windows, if someone else has FF on one of those to check it's not something specific to me that would be great!. ",
    "thomasgodart": "Well if I paste from Google Docs to Quill, pretty much everything in a \"normal and simple\" document is conserved, except the nesting of lists, as requested in this old feature request: \"Add support for nested lists/bullets and indents #118\" dating back to May 2014. It's right now the only lack of feature that prevents me from using Quill in production.\nA list element is relative to a <ul> or <ol> element and therefore, can't be represented in a different way than the original html: relatively to the parent element. Lists and list elements can contain each other, just like every DOM element they are nodes, and nodes can contain each other.\nThe actual fix of using \"ql-indent\" class isn't fixing anything but the visual. But html is more than a visual, have you every though about how blind people see your documents? You can't remove nesting, it's removing meaning, so it can't be allowed.. ",
    "mansours": "I'm fairly new to Quill. But I saw there are a couple tickets that point here, some with discussion whether this is a personal preference or a technical requirement. My statements below support technical requirement and present supporting W3 materials.\nIn Ontario, a province in Canada, there is legislation for all public institutions and private companies with 50+ employees to have websites and web products be WCAG 2.0 level A compliant today, and by 2021 level AA compliant. There are many other jurisdictions around the world with similar laws and deadlines Eg. US DoJ section 508 law.\nJurisdiction laws aside, we should want to remove barriers to participation online for screenreader and keyboard navigation users, and nested lists are interpreted and navigated differently. eg. skip list or sublist/next.\nAs @thomasgodart pointed out, in v1.3.5 of Quill, ql-indent-* classes do not provide the content structure needed for accessibility users.\nThat said, here are technical references by W3 about nested lists:\n- WCAG Guidance Tutorial on Content Structure - Nested Lists\n- H48: Using ol, ul and dl for lists or groups of links\n- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested. I'm fairly new to Quill. But I saw there are a couple tickets that point here, some with discussion whether this is a personal preference or a technical requirement. My statements below support technical requirement and present supporting W3 materials.\nIn Ontario, a province in Canada, there is legislation for all public institutions and private companies with 50+ employees to have websites and web products be WCAG 2.0 level A compliant today, and by 2021 level AA compliant. There are many other jurisdictions around the world with similar laws and deadlines Eg. US DoJ section 508 law.\nJurisdiction laws aside, we should want to remove barriers to participation online for screenreader and keyboard navigation users, and nested lists are interpreted and navigated differently. eg. skip list or sublist/next.\nAs @thomasgodart pointed out, in v1.3.5 of Quill, ql-indent-* classes do not provide the content structure needed for accessibility users.\nThat said, here are technical references by W3 about nested lists:\n- WCAG Guidance Tutorial on Content Structure - Nested Lists\n- H48: Using ol, ul and dl for lists or groups of links\n- H81: Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested. ",
    "rlansky": "@RobAley, thanks so much for your solution, I found it very helpful. \nFor anyone else who needs this and is not using jQuery, here's my ES6 version of Rob's code with a few minor tweaks (all of Rob's caveats apply to this code as well):\n\nI found that there were some missing tags for closing the lists, so I added some additional close tags at the end of the for-loops.\nI was having problems with the < and > symbols in the start_tag and end_tag parameters getting encoding into < and > when I injected them into the document, so I changed those to :: instead.\nI'm hiding the temporary element and removing it once I'm done with it.\n\nCheers,\n--Rick\n```\nfunction getListLevel(el) {\n  const className = el.className || '0';\n  return +className.replace(/[^\\d]/g, '');\n}\nfunction convertLists(richtext) {\n  const tempEl = window.document.createElement('div');\n  tempEl.setAttribute('style', 'display: none;');\n  tempEl.innerHTML = richtext;\n['ul','ol'].forEach((type) => {\n    const startTag = ::start${type}::::/start${type}::;\n    const endTag = `::end${type}::::/end${type}::`;\n// Grab each list, and work on it in turn\nArray.from(tempEl.querySelectorAll(type)).forEach((outerListEl) => {\n  const listChildren = Array.from(outerListEl.children).filter((el) => el.tagName === 'LI');\n\n  // Account for the fact that the first li might not be at level 0\n  const firstLi = listChildren[0];\n  firstLi.before(startTag.repeat(getListLevel(firstLi)));\n\n  // Now work through each li in this list\n  listChildren.forEach((listEl, index) => {\n    const currentLiLevel = getListLevel(listEl);\n    if (index < listChildren.length - 1) {\n      const difference = getListLevel(listChildren[index + 1]) - currentLiLevel;\n\n      // we only need to add tags if the level is changing\n      if (difference > 0) {\n        listChildren[index + 1].before(startTag.repeat(difference));\n      } else if (difference < 0) {\n        listEl.after(endTag.repeat(-difference));\n      }\n    } else {\n      listEl.after(endTag);\n    }\n  });\n  outerListEl.after(endTag);\n});\n\n});\n//  Get the content in the element and replace the temporary tags with new ones\n  let newContent = tempEl.innerHTML;\n  newContent = newContent.replace(/::startul::::\\/startul::/g, '');\n  newContent = newContent.replace(/::endul::::\\/endul::/g, '');\n  newContent = newContent.replace(/::startol::::\\/startol::/g, '');\n  newContent = newContent.replace(/::endol::::\\/endol::/g, '');\ntempEl.remove();\n  return newContent;\n}\n```\n. ",
    "dantman": "I just started adding Quill to a project expecting it was the most used/best editor to use. Then I quickly ran into this issue.\nNow given how long this issue has been open I'm wondering if I should just switch to something else before it's too late.. ",
    "Duder-onomy": "I have a paste handler, and I would like to get the contents of the clipboard to manually sanitize it before pasting into Quill. The quill clipboard module does not satisfy my needs in this case. \nDealing with, and expecting events are part of being a front end developer. They should be exposed as hiding them gives us almost nothing, and exposing them gives us almost everything. . ",
    "fotomut": "@JoshuaDoshua Did you ever create those custom heading icons? We also need more than the default H1 and H2 that are supplied so if you are willing to share that would be awesome. . ",
    "isbasex": "@baibao577 \nicons.header[3] = `\n<svg width=\"17px\" height=\"12px\" viewBox=\"0 0 17 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"h3\" fill=\"currentColor\">\n            <path d=\"M9,1 L9,11 C9,11.5522847 8.55228475,12 8,12 C7.44771525,12 7,11.5522847 7,11 L7,7 L2,7 L2,11 C2,11.5522847 1.55228475,12 1,12 C0.44771525,12 0,11.5522847 0,11 L0,1 C-1.11022302e-16,0.44771525 0.44771525,0 1,0 C1.55228475,0 2,0.44771525 2,1 L2,5 L7,5 L7,1 C7,0.44771525 7.44771525,0 8,0 C8.55228475,0 9,0.44771525 9,1 Z\" id=\"Shape\" fill-rule=\"nonzero\"></path>\n            <text id=\"3\" font-family=\"PingFangSC-Semibold, PingFang SC\" font-size=\"9\" font-weight=\"500\">\n                <tspan x=\"11.3\" y=\"11\">3</tspan>\n            </text>\n        </g>\n    </g>\n</svg>`. ",
    "kkomelin": "\nI'm not sure what the font is. When the icons were commissioned I omitted h3-h6 tags because I did not want it to be easy to create what I think is bad UI. For that reason I prefer not to add these icons. Thank you for your offer to help though.\n\n@jhchen What is bad UI for you doesn't have to be so bad for others. For example, Medium.com only allows H3 and H4. I believe there are some SEO reasons for that as @JoshuaDoshua mentioned.. > I'm not sure what the font is. When the icons were commissioned I omitted h3-h6 tags because I did not want it to be easy to create what I think is bad UI. For that reason I prefer not to add these icons. Thank you for your offer to help though.\n@jhchen What is bad UI for you doesn't have to be so bad for others. For example, Medium.com only allows H3 and H4. I believe there are some SEO reasons for that as @JoshuaDoshua mentioned.. @ArsalanSavand Thanks. For some reason, domNode.firstChild didn't work for me, so I used querySelector() to get the child instead https://github.com/quilljs/quill/issues/2380#issuecomment-433807279 Also, I sanitized the link.. I have finally implemented it myself:\n```javascript\nconst BlockEmbed = Quill.import(\"blots/block/embed\");\nconst Link = Quill.import(\"formats/link\");\nclass EmbedResponsive extends BlockEmbed {\n  static blotName = \"embed-responsive\";\n  static tagName = \"DIV\";\n  static className = \"embed-responsive\";  \nstatic create(value) {\nconst node = super.create(value);\nnode.classList.add(\"embed-responsive-16by9\");\n\nconst child =  document.createElement(\"iframe\");\nchild.setAttribute('frameborder', '0');\nchild.setAttribute('allowfullscreen', true);\nchild.setAttribute('src', this.sanitize(value));\nchild.classList.add(\"embed-responsive-item\");\n\nnode.appendChild(child);\n\nreturn node;\n\n}\nstatic sanitize(url) {\n    return Link.sanitize(url);\n  }\nstatic value(domNode) {\n    const iframe = domNode.querySelector('iframe');\n    return iframe.getAttribute('src');\n  }\n}\nQuill.register(EmbedResponsive);\n. I have finally implemented it myself:javascript\nconst BlockEmbed = Quill.import(\"blots/block/embed\");\nconst Link = Quill.import(\"formats/link\");\nclass EmbedResponsive extends BlockEmbed {\n  static blotName = \"embed-responsive\";\n  static tagName = \"DIV\";\n  static className = \"embed-responsive\";  \nstatic create(value) {\nconst node = super.create(value);\nnode.classList.add(\"embed-responsive-16by9\");\n\nconst child =  document.createElement(\"iframe\");\nchild.setAttribute('frameborder', '0');\nchild.setAttribute('allowfullscreen', true);\nchild.setAttribute('src', this.sanitize(value));\nchild.classList.add(\"embed-responsive-item\");\n\nnode.appendChild(child);\n\nreturn node;\n\n}\nstatic sanitize(url) {\n    return Link.sanitize(url);\n  }\nstatic value(domNode) {\n    const iframe = domNode.querySelector('iframe');\n    return iframe.getAttribute('src');\n  }\n}\nQuill.register(EmbedResponsive);\n```. ",
    "webonmars": "Hey guys,\nI created some Hs with Sketch :)\n```\nvar icon_h1 = <svg width=\"17px\" height=\"12px\" viewBox=\"0 0 17 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"h3\" fill=\"currentColor\">\n            <path d=\"M1.992,12.728 C1.81066576,12.9093342 1.58966797,13 1.329,13 C1.06833203,13 0.84733424,12.9093342 0.666,12.728 C0.48466576,12.5466658 0.394,12.325668 0.394,12.065 L0.394,1.525 C0.394,1.26433203 0.48466576,1.04333424 0.666,0.862 C0.84733424,0.68066576 1.06833203,0.59 1.329,0.59 C1.58966797,0.59 1.81066576,0.68066576 1.992,0.862 C2.17333424,1.04333424 2.264,1.26433203 2.264,1.525 L2.264,5.503 C2.264,5.60500051 2.31499949,5.656 2.417,5.656 L7.381,5.656 C7.48300051,5.656 7.534,5.60500051 7.534,5.503 L7.534,1.525 C7.534,1.26433203 7.62466576,1.04333424 7.806,0.862 C7.98733424,0.68066576 8.20833203,0.59 8.469,0.59 C8.72966797,0.59 8.95066576,0.68066576 9.132,0.862 C9.31333424,1.04333424 9.404,1.26433203 9.404,1.525 L9.404,12.065 C9.404,12.325668 9.31333424,12.5466658 9.132,12.728 C8.95066576,12.9093342 8.72966797,13 8.469,13 C8.20833203,13 7.98733424,12.9093342 7.806,12.728 C7.62466576,12.5466658 7.534,12.325668 7.534,12.065 L7.534,7.271 C7.534,7.16899949 7.48300051,7.118 7.381,7.118 L2.417,7.118 C2.31499949,7.118 2.264,7.16899949 2.264,7.271 L2.264,12.065 C2.264,12.325668 2.17333424,12.5466658 1.992,12.728 Z M11.42,8.63 C11.3266662,8.7033337 11.2283339,8.7133336 11.125,8.66 C11.0216661,8.6066664 10.97,8.5200006 10.97,8.4 L10.97,7.67 C10.97,7.2899981 11.1233318,6.9900011 11.43,6.77 L12.44,6.03 C12.7400015,5.8099989 13.0833314,5.7 13.47,5.7 L14.1,5.7 C14.2533341,5.7 14.3866661,5.7566661 14.5,5.87 C14.6133339,5.9833339 14.67,6.1166659 14.67,6.27 L14.67,12.43 C14.67,12.5833341 14.6133339,12.7166661 14.5,12.83 C14.3866661,12.9433339 14.2533341,13 14.1,13 L13.47,13 C13.3166659,13 13.1833339,12.9433339 13.07,12.83 C12.9566661,12.7166661 12.9,12.5833341 12.9,12.43 L12.9,7.57 L12.88,7.57 L11.42,8.63 Z\" id=\"Shape\" fill-rule=\"nonzero\"></path>\n        </g>\n    </g>\n</svg>;\nvar icon_h2 = <svg width=\"17px\" height=\"12px\" viewBox=\"0 0 17 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"h3\" fill=\"currentColor\">\n            <path d=\"M1.992,12.728 C1.81066576,12.9093342 1.58966797,13 1.329,13 C1.06833203,13 0.84733424,12.9093342 0.666,12.728 C0.48466576,12.5466658 0.394,12.325668 0.394,12.065 L0.394,1.525 C0.394,1.26433203 0.48466576,1.04333424 0.666,0.862 C0.84733424,0.68066576 1.06833203,0.59 1.329,0.59 C1.58966797,0.59 1.81066576,0.68066576 1.992,0.862 C2.17333424,1.04333424 2.264,1.26433203 2.264,1.525 L2.264,5.503 C2.264,5.60500051 2.31499949,5.656 2.417,5.656 L7.381,5.656 C7.48300051,5.656 7.534,5.60500051 7.534,5.503 L7.534,1.525 C7.534,1.26433203 7.62466576,1.04333424 7.806,0.862 C7.98733424,0.68066576 8.20833203,0.59 8.469,0.59 C8.72966797,0.59 8.95066576,0.68066576 9.132,0.862 C9.31333424,1.04333424 9.404,1.26433203 9.404,1.525 L9.404,12.065 C9.404,12.325668 9.31333424,12.5466658 9.132,12.728 C8.95066576,12.9093342 8.72966797,13 8.469,13 C8.20833203,13 7.98733424,12.9093342 7.806,12.728 C7.62466576,12.5466658 7.534,12.325668 7.534,12.065 L7.534,7.271 C7.534,7.16899949 7.48300051,7.118 7.381,7.118 L2.417,7.118 C2.31499949,7.118 2.264,7.16899949 2.264,7.271 L2.264,12.065 C2.264,12.325668 2.17333424,12.5466658 1.992,12.728 Z M11.35,13 C11.1966659,13 11.0633339,12.9433339 10.95,12.83 C10.8366661,12.7166661 10.78,12.5833341 10.78,12.43 L10.78,12.2 C10.78,11.8266648 10.9299985,11.5233345 11.23,11.29 C12.3500056,10.4099956 13.0916649,9.7400023 13.455,9.28 C13.8183351,8.8199977 14,8.3700022 14,7.93 C14,7.3166636 13.6600034,7.01 12.98,7.01 C12.5666646,7.01 12.060003,7.1233322 11.46,7.35 C11.3333327,7.3966669 11.2133339,7.3833337 11.1,7.31 C10.9866661,7.2366663 10.93,7.133334 10.93,7 L10.93,6.58 C10.93,6.4066658 10.9799995,6.25166735 11.08,6.115 C11.1800005,5.97833265 11.3133325,5.8866669 11.48,5.84 C12.0866697,5.6799992 12.6699972,5.6 13.23,5.6 C14.0366707,5.6 14.6583312,5.79166475 15.095,6.175 C15.5316688,6.55833525 15.75,7.0899966 15.75,7.77 C15.75,8.3566696 15.5650018,8.91499735 15.195,9.445 C14.8249981,9.97500265 14.1033387,10.6933288 13.03,11.6 C13.0233333,11.6066667 13.02,11.6133333 13.02,11.62 C13.02,11.6266667 13.0233333,11.63 13.03,11.63 L15.22,11.63 C15.3733341,11.63 15.5049995,11.6866661 15.615,11.8 C15.7250006,11.9133339 15.78,12.0466659 15.78,12.2 L15.78,12.43 C15.78,12.5833341 15.7250006,12.7166661 15.615,12.83 C15.5049995,12.9433339 15.3733341,13 15.22,13 L11.35,13 Z\" id=\"Shape\" fill-rule=\"nonzero\"></path>\n        </g>\n    </g>\n</svg>;\nvar icon_h3 = <svg width=\"17px\" height=\"12px\" viewBox=\"0 0 17 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"h3\" fill=\"currentColor\">\n            <path d=\"M1.992,12.728 C1.81066576,12.9093342 1.58966797,13 1.329,13 C1.06833203,13 0.84733424,12.9093342 0.666,12.728 C0.48466576,12.5466658 0.394,12.325668 0.394,12.065 L0.394,1.525 C0.394,1.26433203 0.48466576,1.04333424 0.666,0.862 C0.84733424,0.68066576 1.06833203,0.59 1.329,0.59 C1.58966797,0.59 1.81066576,0.68066576 1.992,0.862 C2.17333424,1.04333424 2.264,1.26433203 2.264,1.525 L2.264,5.503 C2.264,5.60500051 2.31499949,5.656 2.417,5.656 L7.381,5.656 C7.48300051,5.656 7.534,5.60500051 7.534,5.503 L7.534,1.525 C7.534,1.26433203 7.62466576,1.04333424 7.806,0.862 C7.98733424,0.68066576 8.20833203,0.59 8.469,0.59 C8.72966797,0.59 8.95066576,0.68066576 9.132,0.862 C9.31333424,1.04333424 9.404,1.26433203 9.404,1.525 L9.404,12.065 C9.404,12.325668 9.31333424,12.5466658 9.132,12.728 C8.95066576,12.9093342 8.72966797,13 8.469,13 C8.20833203,13 7.98733424,12.9093342 7.806,12.728 C7.62466576,12.5466658 7.534,12.325668 7.534,12.065 L7.534,7.271 C7.534,7.16899949 7.48300051,7.118 7.381,7.118 L2.417,7.118 C2.31499949,7.118 2.264,7.16899949 2.264,7.271 L2.264,12.065 C2.264,12.325668 2.17333424,12.5466658 1.992,12.728 Z M11.32,7.07 C11.1666659,7.07 11.0333339,7.0133339 10.92,6.9 C10.8066661,6.7866661 10.75,6.6533341 10.75,6.5 L10.75,6.27 C10.75,6.1166659 10.8066661,5.9833339 10.92,5.87 C11.0333339,5.7566661 11.1666659,5.7 11.32,5.7 L15.05,5.7 C15.2033341,5.7 15.3366661,5.7566661 15.45,5.87 C15.5633339,5.9833339 15.62,6.1166659 15.62,6.27 L15.62,6.5 C15.62,6.8800019 15.4733348,7.1899988 15.18,7.43 L13.67,8.68 L13.67,8.69 C13.67,8.6966667 13.6733333,8.7 13.68,8.7 L13.8,8.7 C14.3800029,8.7 14.8449983,8.8799982 15.195,9.24 C15.5450018,9.6000018 15.72,10.0866636 15.72,10.7 C15.72,11.4733372 15.4833357,12.0666646 15.01,12.48 C14.5366643,12.8933354 13.8566711,13.1 12.97,13.1 C12.436664,13.1 11.8966694,13.0366673 11.35,12.91 C11.1899992,12.8699998 11.0583339,12.7816674 10.955,12.645 C10.8516662,12.5083327 10.8,12.3533342 10.8,12.18 L10.8,11.84 C10.8,11.706666 10.8549995,11.6016671 10.965,11.525 C11.0750006,11.448333 11.196666,11.4299998 11.33,11.47 C11.9033362,11.6566676 12.4033312,11.75 12.83,11.75 C13.2166686,11.75 13.5166656,11.6600009 13.73,11.48 C13.9433344,11.2999991 14.05,11.0500016 14.05,10.73 C14.05,10.4033317 13.9266679,10.173334 13.68,10.04 C13.4333321,9.906666 12.9733367,9.8366667 12.3,9.83 C12.1466659,9.83 12.0133339,9.77500055 11.9,9.665 C11.7866661,9.55499945 11.73,9.4233341 11.73,9.27 L11.73,9.25 C11.73,8.8766648 11.8733319,8.5666679 12.16,8.32 L13.58,7.09 L13.58,7.08 C13.58,7.0733333 13.5766667,7.07 13.57,7.07 L11.32,7.07 Z\" id=\"Shape\" fill-rule=\"nonzero\"></path>\n        </g>\n    </g>\n</svg>;\nvar icon_h4 = <svg width=\"17px\" height=\"12px\" viewBox=\"0 0 17 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"h3\" fill=\"currentColor\">\n            <path d=\"M1.992,12.728 C1.81066576,12.9093342 1.58966797,13 1.329,13 C1.06833203,13 0.84733424,12.9093342 0.666,12.728 C0.48466576,12.5466658 0.394,12.325668 0.394,12.065 L0.394,1.525 C0.394,1.26433203 0.48466576,1.04333424 0.666,0.862 C0.84733424,0.68066576 1.06833203,0.59 1.329,0.59 C1.58966797,0.59 1.81066576,0.68066576 1.992,0.862 C2.17333424,1.04333424 2.264,1.26433203 2.264,1.525 L2.264,5.503 C2.264,5.60500051 2.31499949,5.656 2.417,5.656 L7.381,5.656 C7.48300051,5.656 7.534,5.60500051 7.534,5.503 L7.534,1.525 C7.534,1.26433203 7.62466576,1.04333424 7.806,0.862 C7.98733424,0.68066576 8.20833203,0.59 8.469,0.59 C8.72966797,0.59 8.95066576,0.68066576 9.132,0.862 C9.31333424,1.04333424 9.404,1.26433203 9.404,1.525 L9.404,12.065 C9.404,12.325668 9.31333424,12.5466658 9.132,12.728 C8.95066576,12.9093342 8.72966797,13 8.469,13 C8.20833203,13 7.98733424,12.9093342 7.806,12.728 C7.62466576,12.5466658 7.534,12.325668 7.534,12.065 L7.534,7.271 C7.534,7.16899949 7.48300051,7.118 7.381,7.118 L2.417,7.118 C2.31499949,7.118 2.264,7.16899949 2.264,7.271 L2.264,12.065 C2.264,12.325668 2.17333424,12.5466658 1.992,12.728 Z M11.62,10.25 L11.62,10.26 C11.62,10.2666667 11.6233333,10.27 11.63,10.27 L13.28,10.27 C13.3400003,10.27 13.37,10.2433336 13.37,10.19 L13.37,7.77 C13.37,7.7633333 13.3666667,7.76 13.36,7.76 C13.3466666,7.76 13.34,7.7633333 13.34,7.77 L11.62,10.25 Z M10.68,11.6 C10.5266659,11.6 10.3950005,11.5433339 10.285,11.43 C10.1749995,11.3166661 10.12,11.1833341 10.12,11.03 L10.12,10.84 C10.12,10.4666648 10.2299989,10.1233349 10.45,9.81 L13.04,6.16 C13.2600011,5.8533318 13.5566648,5.7 13.93,5.7 L14.43,5.7 C14.5833341,5.7 14.7149994,5.7566661 14.825,5.87 C14.9350006,5.9833339 14.99,6.1166659 14.99,6.27 L14.99,10.19 C14.99,10.2433336 15.0199997,10.27 15.08,10.27 L15.48,10.27 C15.6333341,10.27 15.7666661,10.3266661 15.88,10.44 C15.9933339,10.5533339 16.05,10.6866659 16.05,10.84 L16.05,11.03 C16.05,11.1833341 15.9933339,11.3166661 15.88,11.43 C15.7666661,11.5433339 15.6333341,11.6 15.48,11.6 L15.08,11.6 C15.0199997,11.6 14.99,11.6299997 14.99,11.69 L14.99,12.43 C14.99,12.5833341 14.9350006,12.7166661 14.825,12.83 C14.7149994,12.9433339 14.5833341,13 14.43,13 L13.93,13 C13.7766659,13 13.6450005,12.9433339 13.535,12.83 C13.4249995,12.7166661 13.37,12.5833341 13.37,12.43 L13.37,11.69 C13.37,11.6299997 13.3400003,11.6 13.28,11.6 L10.68,11.6 Z\" id=\"Shape\" fill-rule=\"nonzero\"></path>\n        </g>\n    </g>\n</svg>;\nvar icons = Quill.import('ui/icons'); icons.header[1]= icon_h1;\nvar icons = Quill.import('ui/icons'); icons.header[2]= icon_h2;\nvar icons = Quill.import('ui/icons'); icons.header[3]= icon_h3;\nvar icons = Quill.import('ui/icons'); icons.header[4]= icon_h4;\n```. ",
    "caravinci": "Seeing the same issue... Quill being applied on a <textarea> doesn't display the prefilled content.\nIt does create a <div class=\"ql-editor\" contenteditable=\"true\"><p>prefilled text</p></div> which is not being displayed, yet is shown on the dom.\nThe prefilled content \u2014in my particular case\u2014 is the user's description, loaded from the database using rails (thus, before document.ready).\n. I've done that, since textarea doesn't render html content... \nbut other components (such as maxlength) only work with form fields.\nLots of hacking to be done here haha.\nThanks for Quill. it's pretty awesome!\n. The original is hard to read. Will think of a better way to phrase this and make an update. But you're absolutely right, it does seem now like it turns them disorganised.\n. I see what you mean about the since, and will change it. The other one however is implying that's the only thing being instructed.\n. On second though, this is contextualised on the example shown right before the paragraph, in which the last Operation is indeed a retain. So \"Since\" applies in the context given.\n. Today I've learned something new... the more you know, right?\n. The semicolon in this case indicates the list of elements is over.\nhttp://writing.wisc.edu/Handbook/Semicolons.html\nhttp://www.grammar-monster.com/lessons/semicolons_in_lists.htm\n. I understand, will change to something more along the lines of \" see as follows\".\n\"is this\" sounds a bit too prosaic.\n. Sure. The reason why I've used italics was to change the tone, rather than to apply emphasis. But for the sake of consistency, I'll do as you ask.\n. \"Special case\" is indeed more idiomatic, but \"the\" in this case sounds weird. It implies there's only \"that one\", some sort of specificity which is not explained or necessary.\n. Fair enough. Position does fit much better. I must have been tired at this point haha.\n. Fourth item in the first link\n\nHowever, after further research, it seems the initial if makes it invalid as you well have said: it is not an independent clause... my bad.\nChanging it.\n. This seems to work even better. It still separates the list from the rest, and it encompasses the other clause quite nicely, methinks.\n. True. you're entirely right about the example.\nAnd there does seem to be some mentions (albeit they \u2014to my understanding\u2014 do seem slightly contextual) of \"the empty string\". You are most likely right about this one too, as you are better versed at language theory than I am. Changing it.\nhahaha so many commits. Want me to squash? or will you please at merge?\n. ",
    "yourGuy": "@jhchen I think the point me and @EricGrange are getting at is that it seems that the rendering of deltas is coupled to quill itself and wondering what are our options when it comes to displaying the content outside of an editor context (quill or other) \nI'm aware of the readonly option in quill, but in my application 280k is a heavy price to pay plus the unnecessary marckup. I'm wondering if  a simple small renderer module can be extracted from quill.\n. I think the renderer, and I hope there is a plan to make one, should include the custom module registration, but again just the rendering part.\n. ",
    "kxgio": "The reason why I do not choose to use Quill editor currently is that I got stuck while trying to convert delta to pure HTML  for display purpose\n. ",
    "fightingtheboss": "Quill is an amazing piece of tech, really so impressed the further I dive into it. \nAs with other people, though, my main stumbling block for using it is that there are actually no guides or demos showing how to use it where the use-case is to have editors create content and have that content rendered in HTML for reading by consumers.\nThe path from editing to rendering isn't clear. I believe the implicit way of rendering content is creating a Quill editor with no toolbar and readOnly: true. This seems a little heavy handed and not the simplest use case since rendering content shouldn't rely on JS, in my opinion.\nThere needs to be an option that allows developers to access the rendered HTML rather than the Delta JSON. This would allow developers to save the rendered HTML for later use in addition to saving Deltas for further parsing.\nPerhaps this is simply an add-on module that needs to be written or already exists? I'm definitely not yet an expert in Quill so perhaps what I'm suggesting already exists. I can see how the rendering of HTML from a Delta document can be subjective and potentially customizable per app, but there's just no word on the normal use case for rendering Quill documents anywhere so it's hard to dive in.\n. ",
    "benallfree": "To build on what @fightingtheboss said, editor.root.innerHTML is not an adequate solution because some custom blots, particularly embeds, may have different design-time and run-time renderings.\nHere is a Codepen of how I'm using Quill to show design-time previews of dynamic run-time HTML: http://codepen.io/benallfree/pen/aBmjjv. Click on the far-right icon to insert another form. Mouse over to alter state and remove elements.\nI have a content rendering engine with a feature similar to WordPress's shortcode API. At page load, shortcodes such as [foo id=42] are replaced with HTML by whatever service handles the [foo] shortcode. \nI use Quill as a visual editor where the user sees a visual preview or sample of what [foo] will look like when rendered. It's just a nonfunctional sample since the actual rendering takes run-time inputs to determine. In this use case, [foo id=42] is what needs to be saved back to the database, not the visual preview placeholder. So edit.root.innerHTML will not work.\nIn my case, I save both the deltas and the rendered output back to the database. That means blots need to know how to render themselves. innerHTML works for all the native blots, but custom blots are different. I created a RenderableBlot as follows:\n```\nclass RenderableBlot extends BlockEmbed\n{\n  static create(options)\n  {\n    let node = super.create(node);\n    $(node).addClass('ql-component');\n    $(node).attr('contenteditable', false);\n    $(node).attr('component-type', this.name);\n    return node;\n  }\nstatic render(node)\n  {\n    throw new TypeError('render() must be implemented');\n  }\nstatic renderAll(quill)\n  {\n    let rendered = $('').append($(quill.root.innerHTML));\n    rendered.find('.ql-component').each((idx,e)=>{\n      let $e = $(e);\n      let t = $e.attr('component-type');\n      let js = ${t}.render(e);\n      $(e).replaceWith(eval(js));\n    });\n    return rendered.html();\n  }\n}\nRenderableBlot.tagName = 'div';\n```\nThere's more to it, but that is the essence of a renderable base class. Subclasses must implement the render(e), where e is the root DOM element for the .ql-component.\nAll of this leads me to the conclusion that blots should know how to return rendered versions of themselves. Right now, I am getting by with a subclass that replaces innerHTML with what I want, but ideally this would be built into Quill somehow.\nIf we do this, I can envision a plugin ecosystem of rich visual design interfaces that know how to render their own output. Imagine an editable video embed that lets the user search YouTube/Vimeo/Vine by keyword and select a suitable video. The uses cases of design-time edit interfaces for blots are incredible (to me).\n. @fabiosussetto Save the editor.root.innerHTML to the database when the user posts a comment.. @artaommahe I generally agree. I was proposing a solution specifically to @fabiosussetto's desire to display the HTML without loading Quill.\nI think your suggestion is to render a page from stored Quill deltas instead of the stored HTML, right? That would require a server-side rendering library of some kind. There are a few nodejs-based rendering libs, but anyone outside Node is out of luck as far as I know. I started to write a Delta renderer in PHP, but then I elected to just store the HTML instead. I agree that sanitizing Deltas would be easier than sanitizing HTML.\nUltimately, I abandoned Quill on my project because allowing users to have rich editing control is just too fraught with problems. In my case, since my users won't know Markdown or any other safer language, I elected to build a drag-and-drop component designer where the component layout is fixed and the user is only allowed to edit specific data rather than the layout/markup. I still save the HTML back to the server because it is a trusted environment, but if I wanted to be safer I could use Vue.js on the server side to render the content from the data. So I'd still be tied to Node.js for server-side rendering, but I vastly prefer that strategy over rendering Quill deltas.\n. >  I prefer front-end rendering from Delta before displaying without instantiating full quill editor in readonly mode.\nIs search engine indexing an issue in your use case?. @rquast Think of it this way: a very malicious user could post something to the server that looks like it came from Quill but was actually hand-crafted for evil purposes :)\nSo regardless of what Quill or any client-side technology does, the server code should never trust what it receives. @EricGrange's comment above about sanitization was (I think) just to mention that sanitizing a Quill delta format is easier than trying to sanitize HTML. I don't have an opinion on that statement, but I think that's what he was trying to say.. @rquast I think it comes down to preference and use case, but for me, storing malware in my database and trusting a client-side tool to remove it feels too brittle. I don't want garbage in my database in the first place. I think I would go out of my way to avoid an architecture like that. So, my architecture would be as follows:\n\nUse Quill to gather user input\nSend both the Quill Delta JSON and HTML back to the server\nSanitize both; trust neither. Assume it came from a malware bot that mimics Quill.\nStore sanitized versions in the database, as well as a tag-stripped version for text searches\nFor read-only mode, render the stored HTML\nFor edit mode, render using Quill Delta JSON\n\nI mentioned in a comment above - even this architecture seemed too brittle for my use case. Giving the user control over layout and formatting is just disastrous in my experience. There is a reason, for example, that Facebook doesn't allow rich edits on posts and comments. But they do allow emojis and @ tags which produce consistently formatted embellishments. Github uses Markdown in favor of allowing rich editing, I think for the same reason. Quill and rich editors in general have a really narrow set of use cases when long-term user experience is taken into consideration.. @rquast Yep I agree, if the use case is internal or backend, Quill probably works fine and the security considerations are nil. For public use...a different story! :). ",
    "fabiosussetto": "Very surprised this hasn't been implemented yet. Don't get me wrong, Quill looks amazing, just surprised this wasn't considered a very basic requirement for 1.0\nI appreciate the benefits of the delta formats over storing html inside the db, but without a built-in way to render the content without creating an editor full instance, how do you use the editor in a real scenario? \nImagine I want to build a simple list of comments. Are you saying I need to create 20 instances of Quill to display the formatted comments posted by the users through Quill?\n. ",
    "ergo": "So, if I'm understanding this correctly for every backend we want to use we need to write delta rendering implementation basicly?\nUsing the editor in read-only mode seems like a no-go option since it will create issues with search engines other than google and also requires adding a lot of js with little benefit - that is important for mobile clients.\nWhat about providing API that would get HTML that quill provides in read only mode? That is something that could be stored in the db for rendering in templates - would that be a reasonable solution?. To add something on top - I guess the solution would be to store the delta as the source of truth in the db, but still have the representation available for us to provide without rendering - what about text html clients or readers for disabled people? I understand the technical explanation why html is not ideal solution, but alternative ie. requirement for me to implement renderer for every backend that would consume quill seems problematic, because it adds serious moving target to update.. @linusx as far as i can tell quill doesn't expose any api for that and the makers don't plan this to change.. Hey, maybe I wasn't clear on what I wanted to ask about, I understand how to create a new custom blot and insert it. I'm not sure how to \"edit\" existing blot in the document.\nI would love to see an example that would show how to edit src of image using prompt() with onclick handler.\nA common use case would be to edit image sizes or replace image with another one - I can implement the UI for that as this is out of the scope of quill (I got the impression that features like are not intended to get ever implemented in quilljs from other tickets), I'm not sure how to get the right range on click and how to update the delta properly with new values.\nI looked at the docs and I wasn't able to find any example on how to do this.. Any update on this? Any example on how to update attributes of an embed blot would be great.. Awesome, I think this is exactly what I'm looking for - I'll try to figure this on my own.\nIf in the future chapter https://quilljs.com/guides/cloning-medium-with-parchment/ would be update with an example it would be great!. > This Issue's main question as filed was \"how to implement a custom blot that would allow customizing some properties like image width/height\". There is already an identical video example for that.\nCan you point me to an example of that?\nAll i could find is an example of how to insert a video blot- there are no examples on how to actually edit (any) attribute (iframe src?) of a blot that already exists in the document (I'm aware that requires custom UI implemented, this is why i asked for something that would be implementable with prompt() to make it easiest, width being an example here). Maybe I'm not seeing something obvious here.\nI'm sorry - my question was  not precise enough and i blurred the actual question - I'm not a native speaker.\nThe part of API that is used for marking elements for editing is unclear for me - if that makes more sense.\nThe list of things to implement would be something like:\n- add an onclick hander\n- use the event target to localize clicked blot\n- call quill.format() with new properties\nThe problem is that I got confued a bit - I got an impression that i have to call format on blot, yet quill seems to format the currently selection range, also do i need to somehow update selection range first?\nThis is why i asked for any example of how to manipulate any property of an existing blot in the document (that was the intended purpose of this issue).. No, I can't reproduce it in the codepen either, happens in my application though - I'll try to provide a test case, I'm not sure what's causing it yet.\nSomething must be different between versions since 1.1.7 works fine for me.. Yup, I can replicate this too, what I'm seeing in my application looks the same, except happens also on enter.. Not that I recall.. @jhchen I've tested the component with the changes that chris made under 1.0 spec, everything behaved correctly at glance, if this could be merged it would be awesome. The spec is stable for quite a while now.\nThe list's not indenting seem to be some kind of css issue, as the delta and html produced seem to have proper classes applied.\nNote: I've tested the quilljs build from his webcomponent.. ",
    "kay999": "The current linear deltas are quite hard to render to HTML. So I think a good solution would be to have a renderer which makes a hierachical \"DOM-like\" JSON-structure from the content.\nIt would be quite simple to render such a structure to HTML (or wharever) then and there would be no need for complex html sanitation etc.. Is there a way to use InlineEmbed with the npm module now?. ",
    "dphunct": "I will throw in my $.02.  I am just starting with Quill, so please forgive my ignorance.\nI think the deltas are neat and see a great value in them.  I think it will be very useful, especially when we support collaborative documents.  However, I still have a legacy system to support, that works across several web and mobile platforms.  I have to persist all data in a subset of HTML.\nI am interested in Quill because I like what it can provide as far as flexibility.  I need to be able to show certain mark-up in a specific way inside the text editor just as we do outside of the text editor.  I think I can use Quill to do that. (for example, an anchor with a specific class or linked to a specific file type needs to display differently than a general hyperlink)\nHowever, it would be nice to have a built in function that can return the formatted text, minus the rendered components that are UI specific, in order to save to the server.  It would also be nice to have a separate function that can dynamically load an HTML block and return a Delta without having to reinitialize the component.  (At least I didn't see a way to do that).  If nothing else, this workflow that several people are asking for would greatly help the initial conversion from other classic RTEs to Quill.  From there, they can start to utilize other features.\n@chuckh, your polymer-quill looks like it may work. . ",
    "cjaoude": "My take on it...\n...is to save both the Delta and the innerHTML. When the user is in an edit view, hydrate the editor with the Delta. When the user saves, the Delta is saved but also the innerHTML is saved in its own separate Db field. Sanitize the HTML. The HTML is used only in the show content views.\nThis gets rid of the need to use Quill in readOnly mode in a show view.\nSeems like the best way. But I've been using Quill for like an hour, so... :)\nUsers will mess up rich text editing. Keep it down to the bare minimum formatting:  Bold, Italic, Large Font, and Bullets.. My take on it...\n...is to save both the Delta and the innerHTML. When the user is in an edit view, hydrate the editor with the Delta. When the user saves, the Delta is saved but also the innerHTML is saved in its own separate Db field. The HTML is used only in the show content views.\nThis gets rid of the need to use Quill in readOnly mode in a show view.\nSeems like the best way.. I fixed it in the editor CSS. By changing the p tag to have a sufficient margin-bottom, it makes it unnecessary for the user to enter a blank line for the sake of visual separation. It is naturally visually spaced out. Which is actually correct way to do it from a DTP/typography approach. \n```\n\n    // margin-bottom\n\ninstead of \n\n\n\n```\nmaybe an adjustment that can be made to the Quill theme css. ",
    "gnemtsov": "Well, I am also new to quill and I decided to arrange the following workflow. I will implement quill in outosaving manner. I'll send quill delta via ajax to server every 3 seconds. On the server I am going to use node.js and jsdom to apply coming deltas to the stored HTML. In node.js server-side I create a quill editor, load previously saved HTML content, apply delta and store new HTML in my storage. I don't want to store content in delta format, since I need to not only show content in browser, but also send it via email to users. \nDo I have to worry about sanitizing delta before appling it in my node.js code?. I gave up with idea to apply deltas server-side. JSDom was too slow actually! So I send content HTML to server instead of deltas. I store only HTML server-side. I also had to change default quill behavior about storing base64 encoded pics in the src attribute in order to lower content size. I made my own pics paste/drop handler which uploads pic to s3 using CORS and then sets src as url. Now it works pretty cool, I think. Everybody may have a look at the result here: https://demo.ab-tasks.ru/task.php?t_id=5. Just press blue button at the bottom of the page to add new message. Sorry, the task management system, we are working on, is only in Russian for now!. ",
    "nozer": "I created a quill delta to html converter and it allows this. It also cleans urls and escapes the content for html. It is located at https://github.com/nozer/quill-delta-to-html. I created a quill delta to html converter and it allows this. It also cleans urls and escapes the content for html. It is located at https://github.com/nozer/quill-delta-to-html. @gnemtsov \nSorry for the delay in response; I got caught up with things. \nI am not using JSDom or any external library to convert delta to HTML. \nI will send deltas to server and convert to html safely (converter escapes HTML and scrubs the urls) and save to db as HTML. The reason I want to convert to HTML myself is to have control over HTML output. Right now, nested lists are not generated properly (a nested list must be child of the li it is listed under) and what quill generates both semantically and W3C recommendation-wise is wrong.   Also, consecutive blocks with same kind (such as blockquotes) that have same align, direction, and indent values should be combined instead of rendering in its own block. \nThat drop handler for image embed is a great idea; I will surely implement something like that. . @gnemtsov \nSorry for the delay in response; I got caught up with things. \nI am not using JSDom or any external library to convert delta to HTML. \nI will send deltas to server and convert to html safely (converter escapes HTML and scrubs the urls) and save to db as HTML. The reason I want to convert to HTML myself is to have control over HTML output. Right now, nested lists are not generated properly (a nested list must be child of the li it is listed under) and what quill generates both semantically and W3C recommendation-wise is wrong.   Also, consecutive blocks with same kind (such as blockquotes) that have same align, direction, and indent values should be combined instead of rendering in its own block. \nThat drop handler for image embed is a great idea; I will surely implement something like that. . @WriterStat \nDelta is really cool. I think what would be a great idea is to have delta object structure versions so that the renderers could target the delta versions to prevent issues down the line; this would also help its openness. \n. @WriterStat \nDelta is really cool. I think what would be a great idea is to have delta object structure versions so that the renderers could target the delta versions to prevent issues down the line; this would also help its openness. \n. I created a quill delta to html converter and it allows this. You can check it out at https://github.com/nozer/quill-delta-to-html. I created a quill delta to html converter and it allows this. You can check it out at https://github.com/nozer/quill-delta-to-html. ",
    "bux": "+1. ",
    "delroh": "Since  you have to instantiate Quill in readonly mode and set toolbars to false just to display the content created in the Quill editor, seems like the use case of Quill is something like google docs and not really to be used for a use case like a blog post editor, which I believe is what many people are trying to use it for.. ",
    "uptownhr": "Will it be hard for quill to expose a Delta renderer that implements all the theme and custom module and parchs? \nQuills editor is great and produces a nice preview. But using the Delta that it exposes has too many hoops and gotchas. \nDelta is great, but there should be a common interface that allows devs to create a Delta renderer, the same way quill is instantiated so the output of this renderer matches what quill would have produced.\nGiven this one should be able to instantiate the render on the server side, using the same configurations as they did on the browseer to produce an identical output. @f3ltron any possibility for that example or response?. ",
    "syntacticsolutions": "This works for me.\njavascript\n            let node = document.createElement('article')\n            let quill = new Quill(node, {})\n            quill.setContents(this.post.delta)\n            setTimeout(() => { this.renderedHTML = node.firstChild.innerHTML }, 0)\nno toolbar, and loads very fast. ",
    "daniplaninc": "Hi,\nis there any news on when this feature might be added?. Hi,\nis there any news on when this feature might be added?. ",
    "0x13a": "I'm waiting too for this thing, should I pull the commit brutally to my local version ? Thanks!! :). ",
    "cozzbie": "I thought this had been merged...already implemented in my code and was wondering why it wasn't working. :D. Just checked my version. The commit lines are present so I have the committed version. For some reason my imageHandler is never called.\n```javascript\nlet imgHandler = (i, cb) => {\n      console.log(\"Image handler called\");\n}\nthis.editor = new Quill('#editor', {\n      modules: { toolbar: \"#toolbar\" },\n      placeholder: 'you can start here and make it a blast...',\n      theme: 'snow',\n      imageHandler: imgHandler\n});\n```. I have an implementation now that works...kinda. @jakelisby \n```javascript\nthis.editor = new Quill('#editor', {\n      modules: { toolbar: \"#toolbar\"},\n      placeholder: 'somebody stop me!!!!!...',\n      theme: 'snow'\n});\nthis.editor.getModule(\"toolbar\").addHandler(\"image\", imgHandler);\n``\nYourimgHandlerwill get called but you might have to write your own implementation of how files are selected\n.string.replace(\"\", \"\");`\nThats all I have to say.. string.replace(\"<p><br></p>\", \"\");\nThats all I have to say.. You can try something like this to overwrite the default image insert functionality and insert your own instead. @jwstevensii \njavascript\nthis.editor = new Quill('#editor', {\n      modules: { toolbar: \"#toolbar\"},\n      placeholder: 'you can start here and make it a blast...',\n      theme: 'snow'\n});\nthis.editor.getModule(\"toolbar\").addHandler(\"image\", imgHandler);. You can try something like this to overwrite the default image insert functionality and insert your own instead. @jwstevensii \njavascript\nthis.editor = new Quill('#editor', {\n      modules: { toolbar: \"#toolbar\"},\n      placeholder: 'you can start here and make it a blast...',\n      theme: 'snow'\n});\nthis.editor.getModule(\"toolbar\").addHandler(\"image\", imgHandler);. The imgHandler in the example is a function that gets passed a parameter, you could literally rewrite it as\njavascript\nfunction(a){\n console.log(a);\n // code that uploads your image and slots the resulting url into the editor goes here...\n}\nTry running tests to see what gets returned by the quill editor.. The imgHandler in the example is a function that gets passed a parameter, you could literally rewrite it as\njavascript\nfunction(a){\n console.log(a);\n // code that uploads your image and slots the resulting url into the editor goes here...\n}\nTry running tests to see what gets returned by the quill editor.. ",
    "crizant": "@cozzbie This is the default way you attach handlers, but not with the implementation which @jackmu95 did.. ",
    "AlvinYiDa": "@cozzbie thx  !!  I combine yours with official document and it's ok.  . @cozzbie thx  !!  I combine yours with official document and it's ok.  . ",
    "Humni": "The lack of ability to add attributes to the image when it is inserted could be problematic for situations where you might want a \"max-height\" by applying a class or a aligning the image. Adding another parameter to the callback so it can optionally take attributes for the Delta creation would be very beneficial. The lack of ability to add attributes to the image when it is inserted could be problematic for situations where you might want a \"max-height\" by applying a class or a aligning the image. Adding another parameter to the callback so it can optionally take attributes for the Delta creation would be very beneficial. This is not limited headers, have now tested with align: null with the same results: https://jsfiddle.net/humni/vcxpvurw/2/ . Arg, thanks that did solve it. The delta passing null mislead me. . @benbro While I understand that Quill strips content that it doesn't understand, I would have thought that registering the parchment style would allow for this inline style to be applied. . @benbro While I understand that Quill strips content that it doesn't understand, I would have thought that registering the parchment style would allow for this inline style to be applied. . I have tried with display: inline and display:block also without success. The display:none is just an example which is easier to see the result of. . I have tried with display: inline and display:block also without success. The display:none is just an example which is easier to see the result of. . Essentially, the goal is to be able to have style=\"display: inline; float: right; margin: 0px 0px 1em 1em;\" on the image, which is applied by using https://github.com/kensnyder/quill-image-resize-module . Essentially, the goal is to be able to have style=\"display: inline; float: right; margin: 0px 0px 1em 1em;\" on the image, which is applied by using https://github.com/kensnyder/quill-image-resize-module . This is a work around (see the comments), however, I believe that you should be able to enable these styles using the method specified in the CodePen https://github.com/kensnyder/quill-image-resize-module/issues/10 . This is a work around (see the comments), however, I believe that you should be able to enable these styles using the method specified in the CodePen https://github.com/kensnyder/quill-image-resize-module/issues/10 . ",
    "jasonlbw": "@jackmu95 it can't work at master?i install it at npm,but it can't work,how can i do?. ",
    "KonstantinShkut": "Any updates on when this will be merged in?. ",
    "WilcoM": "Would love to see this merged. Please consider.. @jackmu95 \nSo you're suggesting, for now, we should just use your customized version of the library if we want to use this feature?. ",
    "marktron": "Ideally they would be two different icons since they do different things (apply block level formatting vs inline formatting), but I recognize it's difficult to convey that clearly with two versions of a very similar icon.\n. ",
    "jerov4ds": "https://plnkr.co/edit/gq708AOrSBOWSlHcFslG?p=preview. ",
    "steverob": "@artaommahe were you able to get this done?. ",
    "negamaxi": "Same here. Not clear.. ",
    "kylesezhi": "I would recommend adding the example from @dropfen in this section of the docs:\nhttps://quilljs.com/docs/modules/toolbar/#handlers\n(That is where I would have expected it. Googling about this issue brought me here.). ",
    "JohnColvin": "Oh, thanks! A console warning would be great in this case.\nI have one more question about customizing classes. I want to override the indent class, but there is logic for that one on top of the base parchment class. Is this the proper way to do that without having to recreate the class?\njavascript\nvar Parchment = Quill.import('parchment');\nvar indentOptions = { scope: Parchment.Scope.BLOCK, whitelist: [1,2,3,4] };\nvar IndentAttributor = Quill.import('formats/indent').constructor;\nvar IndentClass = new IndentAttributor('indent', 'text-indent', indentOptions);\nQuill.register(IndentClass, true);\nThis also works, but I'm not sure if it's risky to overwrite the properties of the built in indent class.\njavascript\nvar IndentClass = Quill.import('formats/indent');\nIndentClass.keyName = 'text-indent';\nIndentClass.whitelist = [1,2,3,4];\nQuill.register(IndentClass, true);\nThanks for the help!\n. I want to overwrite the whitelist and the class name and leave the other logic as it is.\n. Great! Thanks again for all the help!\n. ",
    "KenoLeon": "Edit: Container needs a minimum height, something like 100 px and it works, not sure if this is mentioned in the docs, but it threw me off while first trying the quick start example. \n. ",
    "jparyani": "delta.chop seemingly doesn't remove trailing retain ops if they have an attributes field. See https://github.com/ottypes/rich-text/blob/d54996e92b164fa034690f73de015e63cb4057fc/lib/delta.js#L83\n. Sorry, I don't have more insight into where the retain op is coming from. It very well may be due to some interaction with ShareDB. I'll continue with a workaround on my end until I'm able to track it down.\n. ",
    "PedroVinicius": "@benbro provided a great example of putting a custom button without rewriting the entire HTML. But what about a dropdown list? How can I add a custom dropdown list? . @benbro provided a great example of putting a custom button without rewriting the entire HTML. But what about a dropdown list? How can I add a custom dropdown list? . ",
    "SylarVolkoff": "@PedroVinicius, @artaommahe  With something like that :  \n` \nfor (let r = 1; r <= maxRows; r++) {\n      for (let c = 1; c <= maxCols; c++) {\n        tableOptions.push('newtable_' + r + '_' + c);\n      }\n    } \n    let tableColors = ['red', 'orange', 'yellow', 'aqua', 'chartreuse', 'green', 'blue', 'navy', 'purple', 'grey', '#CCC', 'aliceblue', 'seashell'];\nreturn [\n\n  ['bold', 'italic', 'underline', 'strike'],\n  ['blockquote', 'code-block'],\n\n  [{ 'header': 1 }, { 'header': 2 }],\n  [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n  [{ 'script': 'sub'}, { 'script': 'super' }],\n  [{ 'indent': '-1'}, { 'indent': '+1' }],\n  [{ 'direction': 'rtl' }],\n\n  [{ 'size': ['small', false, 'large', 'huge'] }],\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n\n  [{ 'color': [] }, { 'background': [] }],\n  [{ 'align': [] }],\n\n  ['link', 'image', 'code-block'],\n\n  ['clean'],\n   // Extended toolbar buttons\n  [{ 'table': tableOptions }], // cursor needs to be in the table\n  [{ 'table': 'append-row' }], // cursor needs to be in the table\n  [{ 'table': 'remove-row' }], // cursor needs to be in the table\n  [{ 'table': 'append-col' }], // cursor needs to be in the table\n  [{ 'table': 'remove-col' }], // cursor needs to be in the table\n  [{ 'table': tableColors }], // cursor needs to be in the table\n  [{ 'table': 'remove-table' }], // cursor needs to be in the table\n  // Extended toolbar buttons\n\n];`\n\nHere I'm puting some table, add/remove row/cols and background color. As you can see, we can put a list when defining it : \nlet tableColors = ['red', 'orange', 'yellow', 'aqua', 'chartreuse', 'green', 'blue', 'navy', 'purple', 'grey', '#CCC', 'aliceblue', 'seashell'];`\n[{ 'table': tableColors }]`\nHope this will help. !\n. ",
    "AlexKvazos": "Is it possible to use the same prompt utility that the link module uses? I'd like to ask for some input from the user on my handler but I don't want to use the browser's prompt.. ",
    "littlee": "the codepen example keep refreshing, can any one fix that ?. ",
    "sarbbottam": "Thanks @jhchen.\n. ",
    "dbkaplun": "Closing, solved by way of updateContents. This could be clearer in the documentation.\n. ",
    "idansh": "I tested it and it happens when the DIV of the editor is surrounded with label tags.\n. ",
    "jc4p": "I have updated my codepen to use 1.0.6, the same issue occurs.\nI believe the difference between my test and your test is the timing involved with inserting text manually in the Quill nodes vs key press events. Since this seems to be a timing related issue, I've put the contents of my .on('text-change') in a .setTimeout({}, 1) and it seems to work.\n. @rashfael 's snippet worked great for me except I had to append a .parentNode onto the end of the selection.getRangeAt()\n. I believe you should be able to cleanly combine the line number from the snippet above with the quill editor's getSelection() to get all the pieces of info you need.\nI've been using custom inline formats for my use case and the snippet above combined with root.descendants(Parchment.query(MyInlineBlot.blotName)) let's me loop through all my elements easily.\n. ",
    "prasanna1211": "I think forgetting the code it is a functionality. When a button is clicked it remains active unless we again click it. Which function is used to change from active state to inactive state ?\n. I think forgetting the code it is a functionality. When a button is clicked it remains active unless we again click it. Which function is used to change from active state to inactive state ?\n. ",
    "anindara": "This might help: Looks like when trying to update the underlying TextBlot with the mutations in its domNode, we are unable to find the Registry.DATA_KEY in this blot's domNode. Enclosed\n\nReferenced Parchment issue has more details\n. ",
    "robomalo": "Anchors aren't totally semantically correct. Would it be possible to\ncontrol it with the actual select form item?\nOn Mon, Oct 10, 2016 at 10:34 PM Jason Chen notifications@github.com\nwrote:\n\nNot sure Slate's exact implementation but the default picker does create\ns. The quick solution is to change the label  into a  but\nthen the obvious next Issue report would be inability to down arrow and\nselect.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1031#issuecomment-252818320, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AACMQnX9Puh04YXosMDS48pai4XwdutLks5qyx_KgaJpZM4KRU_c\n.\n. Buttons would be correct in the presentation side but I was wondering if we\ncould do something with the actual select element already in the page.\nIsn't there one?\nOn Tue, Oct 11, 2016 at 11:25 PM Jason Chen notifications@github.com\nwrote:\n\nWhat is? A button? I'd rather get it right then make it configurable so\nother people can get it wrong.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1031#issuecomment-253129898, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AACMQqJShpQSJwUfXHCGToOMH1opKBh0ks5qzH1cgaJpZM4KRU_c\n.\n. Oh, I know... I was thinking like positioning it off the page with CSS but\nstill have it in the markup to be controlled by tabs. But then that\nwouldn't help with the focused elements on the screen. Seems like no\ngetting around the buttons maybe.\nOn Tue, Oct 11, 2016 at 11:55 PM Jason Chen notifications@github.com\nwrote:\n\nThere is but the current state of HTML technology does not allow us to\nstyle  and \n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1031#issuecomment-253134040, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AACMQmm6kKrzxRfvKmqSzhHZQl2Ccf0Wks5qzIRcgaJpZM4KRU_c\n.\n. \n",
    "pavneet9": "but can you add a class or data attribute to the anchor tag?\n. but can you add a class or data attribute to the anchor tag?\n. ",
    "rashfael": "I need a similar thing and am using Parchment.find and traversing the data structure to count the lines.\njavascript\nconst Parchment = Quill.import('parchment')\nquill.on('editor-change', (range) => {\n  const selection = document.getSelection()\n  const node = selection.getRangeAt(0).startContainer\n  const blot = Parchment.find(node)\n  let block = blot\n  // find ancestor block blot\n  while (block.statics.blotName !== 'block' && block.parent)\n    block = block.parent\n  const root = block.parent // assume parent of block is root\n  let cur\n  const next = root.children.iterator()\n  let index = 0\n  while (cur = next()) {\n    index++\n    if (cur === block) break\n  }\n  console.log(index)\n})\n. ",
    "teusbenschop": "The original question was about making the entire paragraph bold or underlined. To do that, with the current Quill API, that is possible by just applying a class that works on the block level, rather than the online level. A sample that does that is here: https://github.com/bibledit/playground/tree/master/quill. It is in the files classes.html and classes.js and classes.css. One does not need to have an API for getting lines, to do the above.\n. ",
    "nikparo": "I came across this thread after solving this myself, so I haven't tried rashfael's solution, but I figured I may as well share what I've done. ~~This code was part of a module, so you may need to replace this.quill with your editor object.~~ Code edited for ease of use. On a side note - is there a \"proper\" way of create a range object?\n```javascript\ngetLines(range, quill) {\n  // returns an array of ranges representing the lines that 'range' is part of.\n  // getLines({index: 2, length: 0}) : [{index: number, length: number}]\nlet firstLine = quill.getText(0, range.index).split(\"\\n\").length - 1;\n  let lastLine = quill.getText(0, range.index+range.length).split(\"\\n\").length - 1;\nlet text = quill.getText().split(\"\\n\");\n  text.forEach(function(line, index, ary){ ary[index] += '\\n'; });\nlet lines = [];\n  lines.push({\n    'index': text.slice(0,firstLine).reduce( (a,b) => { return a + b.length; }, 0),\n    'length': text[firstLine].length\n  });\n  for (let i = firstLine+1; i <= lastLine; ++i) {\n    let lastline = lines[lines.length-1];\n    lines.push({\n      'index':  lastline.index + lastline.length,\n      'length': text[i].length\n    });\n  }\nreturn lines;\n}\n. I've answered on stackoverflow.\nhttp://stackoverflow.com/questions/41096017/quill-text-editor-not-working/41105266#41105266\n(Quill initialized before the container existed.). This is the relevant code from `history.js`: js\nchange(source, dest) {\n  if (this.stack[source].length === 0) return;\n  let delta = this.stack[source].pop();\n  this.lastRecorded = 0;\n  this.ignoreChange = true;\n  this.quill.updateContents(delta[source], Quill.sources.USER);\n  this.ignoreChange = false;\n  let index = getLastChangeIndex(delta[source]);\n  this.quill.setSelection(index);\n  this.stack[dest].push(delta);\n}\n```\nThe destination stack length (redo when undoing, and vice versa) is updated after updateContents and setSelection. As such the history stack is not quite correct during any editor-change events.\nShould maybe this.stack[dest].push(delta); be moved up a few lines?. No problem, thanks for merging and for a very nice editor!. ",
    "ryaninvents": "No; I'm evaluating Quill for use in a project that would commonly see several Quill instances created and destroyed over the course of a user session. I suppose proper cleanup would be to drop all references to the Quill instance and remove the related containing element from the DOM (to clean up all the event handlers bound to DOM nodes).\nBy the way, Quill looks really slick, and I'm excited about using it \ud83d\ude04  I'm just making sure to do my due diligence before I commit to using it.\n. No; I'm evaluating Quill for use in a project that would commonly see several Quill instances created and destroyed over the course of a user session. I suppose proper cleanup would be to drop all references to the Quill instance and remove the related containing element from the DOM (to clean up all the event handlers bound to DOM nodes).\nBy the way, Quill looks really slick, and I'm excited about using it \ud83d\ude04  I'm just making sure to do my due diligence before I commit to using it.\n. ",
    "twakjaco": "README is frequently just change log.  Put it in the docs so it's discoverable by search engines.. README is frequently just change log.  Put it in the docs so it's discoverable by search engines.. ",
    "kidfribble": "After first searching the documentation, then reading the README, I am unable to find what the browser support is.. ",
    "jemhuntr": "@kidfribble Are you kidding?\n\n. ",
    "sbevels": "@sferoze @benbro @jhchen\nI believe the issue has to do with a fix made in the 1.1.7 release.  Try testing with Quill 1.1.6 to see if this issue still exists.  See #1152 for some more info on what change caused it.. Yep, I opened #1152. Yes, I'm using the sharedb/quill example provided by sharedb.  I'm calling updateContents(delta) when an op event is received.  I'm not setting the source, but looks like it defaults to 'api' per the quill documentation.. Yes, I'm using the sharedb/quill example provided by sharedb.  I'm calling updateContents(delta) when an op event is received.  I'm not setting the source, but looks like it defaults to 'api' per the quill documentation.. With this fix applied and my authorship module registered, it causes the cursor to jump to the beginning of the span when there is an API update in the middle of that span.  Is it possible to move the check for source === Emitter.sources.USER from modify and add it to setSelection so that it doesn't call scrollIntoView() unless the source is a user?  That fixes the issue for me.. No, its actually not calling setSelection because source != Emitter.sources.USER in the modify function.  I'm calling updateContents without a source so its defaulting to \"api\".  It doesn't jump prior to the \"only restore selection for user changes\" commit.  To fix the original issue about scrolling to the cursor on api changes, I think we still need to update the cursor location on api changes, just not scroll to the cursor, which is why I suggested not calling scrollIntoView from setSelection unless the source is \"user\".. Yes, that makes most sense since setSelection is called with source === \"silent\".. Yes, that makes most sense since setSelection is called with source === \"silent\".. Here you go: https://dl.dropboxusercontent.com/u/50682782/TestFile.docx. Here you go: https://dl.dropboxusercontent.com/u/50682782/TestFile.docx. ",
    "jkirkwood": "I think what @w00fz is referring to is the ability to select an image that is already in the editor by clicking on it.\nRight now when you click on an image in the editor the selection range does not change. You have to drag the cursor across the image for it to be selected. I would like the editor's selection range to encompass the image with just a single click.\n@w00fz did you figure out a way to do this? I'm thinking a click event handler needs to implemented in an extended Image blot. But then how do you communicate this action back up to quill in order to change the selection range via the API?\n. Ok, I think I figured something out:\n``` js\nconst ImageBlot = Quill.import('formats/image');\nconst Parchment = Quill.import('parchment');\nthis.quill.root.addEventListener('click', (ev) => {\n  let image = Parchment.find(ev.target);\nif (image instanceof ImageBlot) {\n    this.quill.setSelection(image.offset(this.quill.scroll), 1, 'user');\n  }\n});\n```\n. ",
    "sandro-pasquali": "Just wondering if it can be said that now Quill supports multiple cursors? Just confirming -- lots of conversations over the last few months. If so, is there a reference implementation available? Thanks!. ",
    "rudivdme": "See the problem is, the <p>&nbsp;</p> approach for new lines works great whenever you have control over the styling of the p tag, but becomes a problem when you don't. \nExample: Using the editor for composing an email, the line spacing looks great inside Quill, but when I send out the html email, every mail client displays unwanted whitespace between paragraphs. Would have been great to have standard markup in this case.\nUPDATED\nNevermind, changing the default Block tag to div works perfectly for emails. #861 . See the problem is, the <p>&nbsp;</p> approach for new lines works great whenever you have control over the styling of the p tag, but becomes a problem when you don't. \nExample: Using the editor for composing an email, the line spacing looks great inside Quill, but when I send out the html email, every mail client displays unwanted whitespace between paragraphs. Would have been great to have standard markup in this case.\nUPDATED\nNevermind, changing the default Block tag to div works perfectly for emails. #861 . ",
    "mediaxtend": "The missing support for the soft return is really a (big) problem.\nIt's normal to wrap the text into <p> but it's impossible to correctly compose a text only with hard breaks, creating a new paragraph everywhere that the line should break.\nIf soft and hard returns have been created, it's because they are useful.\nOn a Mac, you can compose text using soft returns since 1984, the lack of support for this feature is nonsense.\nhttps://en.wikipedia.org/wiki/Line_wrap_and_word_wrap\nhttps://en.wikipedia.org/wiki/Paragraph. ",
    "loopmode": "The problem I see with this is basically about styling - and margins.\nWhat I currently get from quill (react-quill in my case) are <p><br /></p> elements. That's pretty bad in our case..\nIn the current project, we use semantic UI. Like most CSS frameworks, it defines some margin-bottom for p elements. This leads to lots of duplicated gaps between lines.\nNormally, I'd use something like p:empty {margin-bottom: 0} to cancel that out, but that's not working here. Having layout issues you can't solve with CSS is pretty bad..\nIs it possible to customize/inject the mechanism for creating linebreaks from the callsite?\nUpdate: Not too bad actually,with the p/br wrap I can just go .content p {margin-bottom: 0;} regardless of empty/non-empty p. Nevermind :). ",
    "jlukic": "This was probably the first thing I noticed when swapping over to Quill. \nFrom playing around with gmail html emails it appears Google's strategy is just to treat all linebreaks as <br> for html emails. \nI think my ideal would also be similar to @mrcasals vision, but it might also make sense (since this is semi-arbitrary) to just make it an init setting that modifies the behavior of getSemanticHTML() in 2.0 API based on a user's preference for how to treat new lines.\n. This was probably the first thing I noticed when swapping over to Quill. \nFrom playing around with gmail html emails it appears Google's strategy is just to treat all linebreaks as <br> for html emails. \nI think my ideal would also be similar to @mrcasals vision, but it might also make sense (since this is semi-arbitrary) to just make it an init setting that modifies the behavior of getSemanticHTML() in 2.0 API based on a user's preference for how to treat new lines.\n. ",
    "MarkGStacey": "What would be wrong with using shift-enter to just insert a  instead of adding a new paragraph?\nThis would match what other editors do. ",
    "GuidoPX": "This issue with soft breaks doesn't affect the paragraphs only. This can be solved using CSS.\nA much bigger issue are breaks inside of list items like these:\n\nlist item 1:\n   some description\nlist item 2:\n   some description\n\nThis is not possible in Quill. Unfortunately I realised this after I changed the editor to Quill on existing content. Probably I have to stop using Quill because of this.. This issue with soft breaks doesn't affect the paragraphs only. This can be solved using CSS.\nA much bigger issue are breaks inside of list items like these:\n\nlist item 1:\n   some description\nlist item 2:\n   some description\n\nThis is not possible in Quill. Unfortunately I realised this after I changed the editor to Quill on existing content. Probably I have to stop using Quill because of this.. ",
    "Nukium": "Forced to stop the implementation of quill because of that too. \ud83d\ude12. ",
    "leppert": "@benbro Tested in Chrome 54.0.2840.71 and Safari 10.0 (12602.1.50.0.8); Firefox does work as expected. It's stripping a paragraph in the example above. Here's a more pronounced example:\nhttps://jsfiddle.net/uwku530y/1/\n. @benbro Tested in Chrome 54.0.2840.71 and Safari 10.0 (12602.1.50.0.8); Firefox does work as expected. It's stripping a paragraph in the example above. Here's a more pronounced example:\nhttps://jsfiddle.net/uwku530y/1/\n. ",
    "kylebragger": "@benbro Hi, I'm working with @leppert on this. Our use case is that Exposure.co is replacing its current editor with Quill, and being that we are a somewhat complex Backbone app, the Quill instances are instantiated before Backbone finally inserts rendered templates into the DOM. \nAnd to his examples, if you inspect their markup, the original <p> tags are stripped out in the example where the parent element is not yet attached to the DOM.\n. Hi @jhchen, the element passed to Quill's constructor isn't modified after being turned into an editor instance, but rather already in its final form (i.e. populated with the content we want to be editable) by the time it's passed to Quill. Nor are we in any way using DOM APIs to make changes to Quill's generated markup. The only difference is that elements not yet attached to the DOM (which would be the only modification we're talking about) seem to trigger this bug. When the element is attached to the DOM (unmodified) shouldn't, at least to me, have an impact on how its content is sanitized/handled by Quill. That was the gist of why we thought this was worth reporting.\n. No worries. We managed to refactor enough of our Backbone code to get it working. Should have it deployed in the next week after testing is complete. And makes sense re: calculations. Thanks!\n. It would seem that I was slightly mistaken before as to what the behavior is that's confusing me.\nAt least in our editor instance, Quill seems to be inserting an additional <p><br></p> between a <p> and <blockquote>. Do you have any direction on what Quill might be doing there? Maybe related or similar to #797? \n(I can provide a demo login for this as well if you'd like to see the issue in our editor.). I just confirmed this seems to be the case on our end. Even with a few simple paragraphs, if I target one para with CSS and give it a big top margin e.g. p:nth-child(2) { margin-top: 40px; } the same behavior as in #797 occurs; a blank line is inserted above the real 2nd para. \nShall I open a different ticket for this?. @jhchen here you go: https://jsfiddle.net/y500jh11/11/\nInterestingly the bug only happens when the paragraph above the blockquote wraps to multiple lines.. Sorry for the confusion. If you want to close this ticket I can open a new\none with a better outline of the issue as it currently stands.\nOn Tue, Mar 28, 2017 at 1:03 AM Jason Chen notifications@github.com wrote:\n\nIf I understand correctly the issue is you have is if you initialize the\ncontents of Quill as\n\ntest\ntesting\n\nYou get\n\ntest\n\ntesting\n\nQuill expects its own paragraphs to have so when it sees content with\nspacing it inserts empty lines to compensate. You can change this behavior\nby modifying its matchers https://quilljs.com/docs/modules/clipboard/.\nQuill uses the same code to handle pasting and initialization.\nAs a side note if you are saving content to resume an edit session it is\nhighly recommended to be saving Deltas.\nIf I have misunderstood, please be very explicit in your reproduction\nsteps and what you expect to see and actually see.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1341#issuecomment-289663897, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AACPDvQMSJ6WVdSRdBsfm9Zag8NJUUFvks5rqJS2gaJpZM4MQE9A\n.\n. \n",
    "buffpojken": "Thank you, @leppert for those jsfiddles - I thought I was going crazy with the same editor, with the same code, with the same plugins rendering the exact same html-string differently on two different pages in a non-deterministic way - subtle race condition in the order of init events was to blame. \nMany thanks!\n. Well, sort of. \n\nThe application calls quill.getBounds() on editor-change in order to position some chrome (the sidebar \"+\"). \nThe user performs an embed (done via a paste-matcher, but that ought not to be relevant)\nThe application, on a performed embed, adds a newline and changes the selection using the following code: \nthat.editor.insertText(range.index+1, '\\n', Quill.sources.SILENT)\n   that.editor.setSelection(range.index + 2, Quill.sources.API);, \nin order to provide the user with a new line to continue writing, and move the caret. So far, so good.\nThe editor-change event is triggered, due to the code above, in which the handler calls quill.getBounds() to update the chrome-position. \nAt this point, things go wrong. The reported bounds will report the embed as being one single \"line\" high, while in fact the embed may or may not have changed bounds (due to network conditions etc.)\n\nI'm thinking that this may be intended behavior, since - at the explicit point in time getBounds() is called - the embed may be a single, empty block-element high. If this is the case, I'm guessing the Blot-implementation should take care to alert quill that the dimensions have changed or something similar?\n. Hmm, thanks for the clarification! \nSo, in essence - let the application fetch the domNode created by the blot in question using regular means, observe any changes directly on that and don't involve quill at all regarding notifications on changed dimensions? . Thanks for the suggestion, I'll kick it around!\nAlso- thanks for an awesome editor!. Thanks for the suggestion, I'll kick it around!\nAlso- thanks for an awesome editor!. Sure thing, it was quite trivial to implement a very solid support for oembed, including the fix discussed above. \nWe're using a matcher to capture any probable embeds, and using a little proxy checks for tags. If any are found, pass the data long. The renderer defines a custom Blot for embeds, as follows. Works extremely well.\n```\nclass EmbedBlot extends BlockEmbed {\n  static create(url) {\n    let node = super.create();\n    node.dataset.url = url;\noembed.embed(url).then((res) => {\n  if(res.result == \"OEMBED_MISSING\"){\n    node.classList.add('lp--activityEditorLinkBox');\n    node.setAttribute('contenteditable', false)\n    node.innerHTML = `<a href=\"${url}\" target=\"_blank\">${url}</a>`   \n  }else{\n    node.innerHTML = res.html;\n    node.style.height = res.height;\n    let iframe = node.querySelector('iframe'); \n    if(iframe){\n      iframe.addEventListener('load', function(){\n        let ev = new CustomEvent('quill-embed-load', {bubbles: true});\n        node.dispatchEvent(ev);\n      })\n    }\n  }\n})\n\nreturn node;\n\n}\nstatic value(domNode) {\n    return domNode.dataset.url;\n  }\n}\n```\nThis implementation assumes a lot based on the proxy, but that should be workable anyway.. Sure thing, it was quite trivial to implement a very solid support for oembed, including the fix discussed above. \nWe're using a matcher to capture any probable embeds, and using a little proxy checks for tags. If any are found, pass the data long. The renderer defines a custom Blot for embeds, as follows. Works extremely well.\n```\nclass EmbedBlot extends BlockEmbed {\n  static create(url) {\n    let node = super.create();\n    node.dataset.url = url;\noembed.embed(url).then((res) => {\n  if(res.result == \"OEMBED_MISSING\"){\n    node.classList.add('lp--activityEditorLinkBox');\n    node.setAttribute('contenteditable', false)\n    node.innerHTML = `<a href=\"${url}\" target=\"_blank\">${url}</a>`   \n  }else{\n    node.innerHTML = res.html;\n    node.style.height = res.height;\n    let iframe = node.querySelector('iframe'); \n    if(iframe){\n      iframe.addEventListener('load', function(){\n        let ev = new CustomEvent('quill-embed-load', {bubbles: true});\n        node.dispatchEvent(ev);\n      })\n    }\n  }\n})\n\nreturn node;\n\n}\nstatic value(domNode) {\n    return domNode.dataset.url;\n  }\n}\n```\nThis implementation assumes a lot based on the proxy, but that should be workable anyway.. ",
    "galenyuan": "@benbro Thanks!\n. @benbro Thanks!\n. ",
    "oliverw": "I can confirm this using the latest version of both Quill and Edge (Anniversary Update).\nUnfortunately I can only tell you where it happens:\nIts the following line in TextBlot.split:\nthis.domNode.splitText(index))\nFor some reason splitText() returns a Node for which the following check returns false:\nelse if (query instanceof Text) {\n match = types['text'];\n}\n. ",
    "justiceo": "I'm still having this issue with the latest versions of nodejs, npm and webpack installed. I'm still having this issue with the latest versions of nodejs, npm and webpack installed. Yes I tried it on Ubuntu 16 and it worked as well. But why not Ubuntu 14 and Windows (10)?. Okay, here is the ubuntu error log\nnpm ERR! Linux 3.13.0-24-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"start\"\nnpm ERR! node v6.9.2\nnpm ERR! npm  v3.10.9\nnpm ERR! file sh\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno ENOENT\nnpm ERR! syscall spawn\nnpm ERR! quill@1.1.6 start: `npm run build; foreman start -f _develop/procfile`\nnpm ERR! spawn ENOENT\nnpm ERR!\nnpm ERR! Failed at the quill@1.1.6 start script 'npm run build; foreman start -f _develop/procfile'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the quill package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run build; foreman start -f _develop/procfile\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs quill\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls quill\nnpm ERR! There is likely additional logging output above.\n. $which node returns /usr/bin/node\n$/usr/bin/node --version returns v6.9.2. $which node returns /usr/bin/node\n$/usr/bin/node --version returns v6.9.2. ",
    "rickghome": "Really simple feature, and enhances the UI with a standard means of helping users. . ",
    "Abrahamlet": "Would be a great enhancement to a great product.. ",
    "getAbchin": "@benbro I read #995 and tried the imageHandler, but it's quite hard for me to revise my .js to allow addition of handler as @jackmu95's commits files do since I am new to js. Besides, the library that I include is quill.min.js rather than core.js that @jackmu95 altered. So, I am not sure how to deal with this issue, any other solution?\n```\n\n\n\n\n Include the Quill library \n\n\n\n\nhljs.initHighlightingOnLoad();\n\nvar quill = new Quill('#editor-container', {\nmodules: {\nformula: true,\nsyntax: true,\ntoolbar: '#toolbar-container',\nhistory:{\n    delay:2000,\n    maxStack:150,\n    userOnly: true\n}\n},\nplaceholder: 'Compose an epic...',\ntheme: 'snow'\n});\n\n```\n. @jackmu95 thx, if I implemented it as you did, does it mean that images could be firstly posted to server and then display in the editor? thus base64 encoding is substituted by a URL directed to the server image upload directory? \n. ",
    "webbapps": "I tested the codepen script by dragging and dropping an image and after inspecting the image element, it appears to be a base64 image.\n. ",
    "laiyiyi": "\u8bf7\u6559\u4e0b\uff0c\u9009\u62e9\u56fe\u7247\u540e\uff0c\u51fa\u6765\u7684\u4e5f\u662f\u6574\u4e2a\u5185\u5bb9\uff0c\u56fe\u7247\u8def\u5f84\u662f\u4e00\u4e32\u5f88\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u4f55\u5355\u72ec\u628a\u6587\u4ef6\u7c7b\u578b\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u5462\uff1f. \u8bf7\u6559\u4e0b\uff0c\u9009\u62e9\u56fe\u7247\u540e\uff0c\u51fa\u6765\u7684\u4e5f\u662f\u6574\u4e2a\u5185\u5bb9\uff0c\u56fe\u7247\u8def\u5f84\u662f\u4e00\u4e32\u5f88\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u4f55\u5355\u72ec\u628a\u6587\u4ef6\u7c7b\u578b\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u5462\uff1f. @gpyys \u6ca1\u5462\uff0c\u90a3\u4e2a\u5c31\u662fbase64\uff0c\u53ef\u4ee5\u8bd5\u4e0breact-lz-editor. @gpyys \u6ca1\u5462\uff0c\u90a3\u4e2a\u5c31\u662fbase64\uff0c\u53ef\u4ee5\u8bd5\u4e0breact-lz-editor. @magicdvd  3Q. @magicdvd  3Q. ",
    "gpyys": "@lpp288 \u4f60\u7684\u95ee\u9898\u89e3\u51b3\u4e86\u5417\uff1f \u6c42\u6307\u6559. @Q-Angelo  https://segmentfault.com/a/1190000009877910    \u6211\u662f\u770b\u7684\u8fd9\u4e2a \u89e3\u51b3\u7684 . ",
    "magicdvd": "@gpyys @lpp288 \nReplace the default image handler with your own's\nmodules: {\n    toolbar: {\n      container: '#toolbar',\n      handlers: {\n        'image': imageHandler\n      }\n    }\n  },\nthe offical image handler is here:\nfunction () {\n  let fileInput = this.container.querySelector('input.ql-image[type=file]');\n  if (fileInput == null) {\n    fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n    fileInput.classList.add('ql-image');\n    fileInput.addEventListener('change', () => {\n      if (fileInput.files != null && fileInput.files[0] != null) {\n        let reader = new FileReader();\n        reader.onload = (e) => {\n          let range = this.quill.getSelection(true);\n          this.quill.updateContents(new Delta()\n            .retain(range.index)\n            .delete(range.length)\n            .insert({ image: e.target.result })\n          , Emitter.sources.USER);\n          fileInput.value = \"\";\n        }\n        reader.readAsDataURL(fileInput.files[0]);\n      }\n    });\n    this.container.appendChild(fileInput);\n  }\n  fileInput.click();\n}\nAs the code ,  you may use any ajax lib to upload the file and create an image blot fill the src by url.\n. My code use axios.\nvar formData = new FormData();\n        formData.append(\"image\", fileInput.files[0]);\n        axios.post(UPLOAD_IMAGE_URI, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            },\n            responseType:'json'\n        })\n        .then(res => {\n          if(res.data.error == 0){\n            let range = quill.getSelection(true);\n            this.quill.updateContents(new Delta()\n              .retain(range.index)\n              .delete(range.length)\n              .insert({ image: res.data.url })\n            , Quill.sources.USER);\n          }else{\n            console.error(res.data);\n          }\n        })\n        .catch(e => {\n          console.error(e);\n        });. how about the status of this issue?  It is a big defect.. textchange event. test the delta data with single insert string '#'. then do anything you like.  test the last op of delta is delete op to handle '#'  remove.\ngetSelection   setSelection  format  are the key functions. ",
    "zzkkui": "@magicdvd \n\nWhy is there an error\uff1f\uff1f\n. @magicdvd \n\nWhy is there an error\uff1f\uff1f\n. ",
    "Q-Angelo": "@lpp288  @gpyys  \u4f60\u4eec\u8fd9\u4e2a\u95ee\u9898 \u90fd\u89e3\u51b3\u6ca1 \u6709\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u529e\u6cd5. ",
    "Detachment": "@TaylorPzreal This works in my project, thanks bro~. ",
    "ajayshah1992": "Angular test editor. ",
    "smith153": "This is what I used for my project. Only complaint I have is I couldn't really figure out how to show some progress or notify the user that the img is uploading. Anyone got tips for that? For now I just disable the editor and then re-enable it once the upload is complete. \n```javascript\nconst editor_options = {\n    theme: 'snow',\n    modules: {\n        toolbar: {\n            container: [['bold', 'italic', 'underline', 'strike'], ['link', 'image', 'video']],\n            handlers: { image: quill_img_handler },\n        },\n    },\n};\nfunction quill_img_handler() {\n    let fileInput = this.container.querySelector('input.ql-image[type=file]');\nif (fileInput == null) {\n    fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n    fileInput.classList.add('ql-image');\n    fileInput.addEventListener('change', () => {\n        const files = fileInput.files;\n        const range = this.quill.getSelection(true);\n\n        if (!files || !files.length) {\n            console.log('No files selected');\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append('file', files[0]);\n\n        this.quill.enable(false);\n\n        axios\n            .post('/api/image', formData)\n            .then(response => {\n                this.quill.enable(true);\n                this.quill.editor.insertEmbed(range.index, 'image', response.data.url_path);\n                this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n                fileInput.value = '';\n            })\n            .catch(error => {\n                console.log('quill image upload failed');\n                console.log(error);\n                this.quill.enable(true);\n            });\n    });\n    this.container.appendChild(fileInput);\n}\nfileInput.click();\n\n}\n```. This is what I used for my project. Only complaint I have is I couldn't really figure out how to show some progress or notify the user that the img is uploading. Anyone got tips for that? For now I just disable the editor and then re-enable it once the upload is complete. \n```javascript\nconst editor_options = {\n    theme: 'snow',\n    modules: {\n        toolbar: {\n            container: [['bold', 'italic', 'underline', 'strike'], ['link', 'image', 'video']],\n            handlers: { image: quill_img_handler },\n        },\n    },\n};\nfunction quill_img_handler() {\n    let fileInput = this.container.querySelector('input.ql-image[type=file]');\nif (fileInput == null) {\n    fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n    fileInput.classList.add('ql-image');\n    fileInput.addEventListener('change', () => {\n        const files = fileInput.files;\n        const range = this.quill.getSelection(true);\n\n        if (!files || !files.length) {\n            console.log('No files selected');\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append('file', files[0]);\n\n        this.quill.enable(false);\n\n        axios\n            .post('/api/image', formData)\n            .then(response => {\n                this.quill.enable(true);\n                this.quill.editor.insertEmbed(range.index, 'image', response.data.url_path);\n                this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n                fileInput.value = '';\n            })\n            .catch(error => {\n                console.log('quill image upload failed');\n                console.log(error);\n                this.quill.enable(true);\n            });\n    });\n    this.container.appendChild(fileInput);\n}\nfileInput.click();\n\n}\n```. ",
    "johnpuddephatt": "Not too familiar with Axios but with a regular XMLHttpRequest(), you can add an eventlistener to the upload, e.g.\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', url, true);\nxhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\nxhr.upload.addEventListener(\"progress\", function(e) {\n    var progress = Math.round((e.loaded * 100.0) / e.total);\n    document.getElementById('progress').style.width = progress + \"%\";\n  });\nI have this working well, but quill.insertEmbed(range.index, 'image', url); is inserting images inline... anyone know how I can change this so that the current paragraph is split with the image inserted in between?. ",
    "dragonwong": "I wrote a plugin to upload image: quill-plugin-image-upload \nWith this plugin we can:\n\n\ud83c\udf1fupload a image when it is inserted, and then replace the base64-url with a http-url\n\ud83c\udf1fpreview the image which is uploading with a loading animation\n\ud83c\udf1fwhen the image is uploading, we can keep editing the content including changing the image's position or even delete the image.\n\nAnd of course, it's easy to use! \ud83d\ude01. ",
    "clarissahu": "\nI solved the problem that upload image with url.\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\n\nthis work well, thanks~ and the cursor should be moved after the pic you inserted, like this\n...\nfunction insertToEditor(url: string) {\n     // push image url to rich editor.\n     const range = editor.getSelection();\n     editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n     editor.setSelection(range.index + 1); \n   }\n.... > I solved the problem that upload image with url.\n\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\n\nthis work well, thanks~ and the cursor should be moved after the pic you inserted, like this\n...\nfunction insertToEditor(url: string) {\n     // push image url to rich editor.\n     const range = editor.getSelection();\n     editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n     editor.setSelection(range.index + 1); \n   }\n.... ",
    "maddy2894": "\n\nI solved the problem that upload image with url.\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\n\nthis work well, thanks~ and the cursor should be moved after the pic you inserted, like this\n...\nfunction insertToEditor(url: string) {\n     // push image url to rich editor.\n     const range = editor.getSelection();\n     editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n     editor.setSelection(range.index + 1); \n   }\n...\n\nHey @clarissahu still it's not setting index next to image. Any other solution?. > > I solved the problem that upload image with url.\n\n\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\n\nthis work well, thanks~ and the cursor should be moved after the pic you inserted, like this\n...\nfunction insertToEditor(url: string) {\n     // push image url to rich editor.\n     const range = editor.getSelection();\n     editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n     editor.setSelection(range.index + 1); \n   }\n...\n\nHey @clarissahu still it's not setting index next to image. Any other solution?. ",
    "thelmn": "A little late but what about uploading the delta content to the server as is and then finding \"data:image/png;base64,...\", decode the base64 to an image and then replace with the image URL?. ",
    "teknologist": "How to bind to the @ character cross platform then ?\n. How to bind to the @ character cross platform then ?\n. ",
    "mattpalermo": "This would be very helpful. I wouldn't mind using an experimental branch or strict: false so that a major version bump can be delayed.. Here is the caniuse.com table for event.key: https://caniuse.com/#feat=keyboardevent-key\nIt seems that the latest version of safari (10.1) supports it but older versions don't :unamused: \nWhat is the rules for browser support in quill?\n. ",
    "ibrahimyilmaz7": "How about colors, text align vs? Also size array like: \n[\"10px\", \"13px\", \"15px\" ,\"18px\", \"20px\", \"30px\", \"50px\" ]\n. How about colors, text align vs? Also size array like: \n[\"10px\", \"13px\", \"15px\" ,\"18px\", \"20px\", \"30px\", \"50px\" ]\n. I mean using custom font-size array (except 13px, normal, 18px, 32px).\n. I mean using custom font-size array (except 13px, normal, 18px, 32px).\n. ",
    "ahmadawais": "@benbro Sorry for the tag, but can you take a look? I think it is a real bug. \n. ",
    "doodla": "@jhchen Materialize doesn't load in an iframe. That was codepen. Check out their modals at http://materializecss.com/modals.html .\nAnd I checked the iframe source. It looked like the styles were loading. Otherwise, the tooltips wouldn't show up, eh?\n. @jhchen Materialize doesn't load in an iframe. That was codepen. Check out their modals at http://materializecss.com/modals.html .\nAnd I checked the iframe source. It looked like the styles were loading. Otherwise, the tooltips wouldn't show up, eh?\n. @jhchen The background isn't white(relatively easy CSS fix). Also, any tooltip based elements ( hyperlinks and formula ) get cut-off by the modal edge.\nThis is happening for modals by JqueryUI also. Is there any fix/workaround?. @jhchen The background isn't white(relatively easy CSS fix). Also, any tooltip based elements ( hyperlinks and formula ) get cut-off by the modal edge.\nThis is happening for modals by JqueryUI also. Is there any fix/workaround?. How do I use that? Not quite sure what to do here.\nOn Dec 4, 2016 2:48 AM, \"Jason Chen\" notifications@github.com wrote:\nhttp://quilljs.com/docs/configuration/#bounds\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1097#issuecomment-264689692, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADgzIhsFxIIZjnPS252aM1YWfQ1vu0beks5rEnBcgaJpZM4Kpyzu\n.\n. How do I use that? Not quite sure what to do here.\nOn Dec 4, 2016 2:48 AM, \"Jason Chen\" notifications@github.com wrote:\nhttp://quilljs.com/docs/configuration/#bounds\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1097#issuecomment-264689692, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADgzIhsFxIIZjnPS252aM1YWfQ1vu0beks5rEnBcgaJpZM4Kpyzu\n.\n. ",
    "skmohammadi": "@benbro In case that we want to add custom button to toolbar (e.g. fullscreen btn), following warning occured:\nquill:toolbar  ignoring attaching to nonexistent format fullscreen. @benbro the mentioned links have not helped me. How can define new format?. ",
    "1c7": "@benbro's solution work for me.\nI wrote few more for my project.  \nhere is full code (so you can copy and paste and change)\njavascript\nvar icons = Quill.import('ui/icons');\nicons['header']['2'] = '<img src=\"/static/editor-icon/editor-new/H.png\" class=\"fm_editor_icon\">';\nicons['bold'] = '<img src=\"/static/editor-icon/editor-new/bold-black.png\" class=\"fm_editor_icon\">';\nicons['italic'] = '<img src=\"/static/editor-icon/editor-new/italic.png\" class=\"fm_editor_icon\" id=\"fm_icon_italic\">';\nicons['underline'] = '<img src=\"/static/editor-icon/editor-new/line.png\" class=\"fm_editor_icon\">';\nicons['strike'] = '<img src=\"/static/editor-icon/editor-new/delete.png\" class=\"fm_editor_icon\">';\nicons['blockquote'] = '<img src=\"/static/editor-icon/editor-new/quote.png\" class=\"fm_editor_icon\">';\nicons['list'] = '<img src=\"/static/editor-icon/editor-new/list.png\" class=\"fm_editor_icon\">';. @harrondev Hi, any update on that Blog post?. \u6211\u4e0d\u662f quill \u4e13\u5bb6\uff0c\u4e0d\u8fc7\u6839\u636e\u4f60\u7684\u63cf\u8ff0\u548c\u6211\u89c9\u5f97\u6709\u4e24\u79cd\u65b9\u6cd5\n\n\u76f4\u63a5 css \u63a7\u5236\ncss\n.editor{\n   img{\n     width: 100%;\n  }\n}\n\u5982\u679c\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u62c9\u5927\u7f29\u5c0f\u56fe\u7247\uff0c\u6211\u8bb0\u5f97 quill \u6709\u51e0\u4e2a module \u53ef\u4ee5\u505a\u5230\u3002\n\n\u53e6\u5916\u3002\u5efa\u8bae\u80fd\u7528\u82f1\u6587\u5c31\u7528\u82f1\u6587\u3002\u50cf\u8fd9\u6837\u7684\u5e93\u91cc\u7528\u4e2d\u6587\u5927\u5927\u51cf\u5c11\u4e86\u522b\u4eba\u56de\u590d\u4f60\u7684\u53ef\u80fd\u6027\n. \u65b9\u4fbf\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u5417\uff1fChrome Console \u91cc\u6709\u4ec0\u4e48\u4fe1\u606f\uff1f\u622a\u56fe\u770b\u770b\uff1f\n\u76ee\u524d\u7684\u4fe1\u606f\u65e0\u6cd5\u5e2e\u5fd9\u5b9a\u4f4d\u95ee\u9898\uff08\u6211\u4e0d\u4e86\u89e3 amazeui\uff09. ## \u4ee5\u4e0b\u662f\u6211\u81ea\u5df1\u5b9e\u73b0\u52a0\u7c97\u548c\u659c\u4f53\u7684\u4ee3\u7801\u3002\u7528\u5728 vue \u91cc\n\u6211\u7684 quill \u662f this.editor = new Quill()\n\u4f9b\u53c2\u8003\njavascript\n    editor_bold(){\n      var format = this.editor.getFormat();\n      if (format.bold){\n        this.editor.format('bold', false);\n      }else{\n        this.editor.format('bold', true);\n      }\n    },\n    editor_italic(){\n      var format = this.editor.getFormat();\n      if (format.italic){\n        this.editor.format('italic', false);\n      }else{\n        this.editor.format('italic', true);\n      }\n    },. let me close this issue for now.. So far \uff082018-8-24\uff09there are no way to do this directly\n\n. Workaround: I am trying to insert & remove & focus. see if that work. ## What I am trying to do:\nwhen user insert image.\nI want set cursor below image(a new line). not before or after image.. A little update: (in short: I am not using Quill anymore)\nbecause our product pivot to another direction.\nwe focus on App now, main feature are all on App.\nwebsite just a single landing page.\nSo I am not using Quill anymore. \nAlso. we lower the bar for user post content. again and again.\nNow our app look like Instagram\nThis is just a simple update in case anyone interested\n. ## Link input (\"Text\" & \"Link\")\nFinal Result showcase\nClick insert link button at rightmost of menu bar\n\nNow \"input link prompt\" pop out\n\nInput name and URL\n\nNow it's successfully insert!\n\nFrom Chrome console you can see the format is correct\n\nStep 1\nUse custom toolbar. not quill default one, so we can handle Link button click logic.\n(I remember there are other way to handle logic, but in this example let's just continue with our custom toolbar)\nSomething like this. (This is HTML but written in Pug): \n```pug\ntoolbar-container\n#link_button(@click='add_link')\n  img(src=\"/static/editor-icon/editor-new/link_2.svg\" style='width:18px;')\n\neditor_wrapper\n#editor\n\n``\nThe key here is#link_button. \nwe gonna writeadd_link` method later.  \nLet's create a quill editor\njavascript\n      this.editor = new Quill('#editor', {\n        modules: {\n          toolbar: '#toolbar-container'\n        },\n        theme: 'snow',\n      });\nStep 2\nlet's write add_link\njavascript\n    add_link(){\n      this.show_add_link_popup = true;\n    }\nyes I am using Vue.js\nso here show_add_link_popup does only one thing.\nshow input box.\n\nand then, let's insert Link\njavascript\nthis.editor.focus();\nconst index = (this.editor.getSelection() || {}).index || this.editor.getLength() - 1;\nthis.editor.insertText(index, 'Google', 'link', \"https://Google.com\");\n. because I want \nhtml\n<a target=\"_blank\"></a>\nHere is LinkBolt I am using.  I remember I copy this from Quill tutorial\njavascript\n      let Inline = Quill.import('blots/inline');\n      class LinkBlot extends Inline {\n        static create(url) {\n          let node = super.create();\n          node.setAttribute('href', url);\n          node.setAttribute('target', '_blank'); // HERE\n          return node;\n        }\n        static formats(node) {\n          return node.getAttribute('href');\n        }\n      }\n      LinkBlot.blotName = 'link'; // use this name\n      LinkBlot.tagName = 'a';\n      Quill.register(LinkBlot);. ## The key part is just one line\njavascript\nquill.insertText(index, 'Google', 'link', \"https://Google.com\");. @rawkode  I hope this is helpful.. @nereuseng \nSorry I can't answer your question.\nI am not using Quill since (I think) August 2018 or so.\nI am working on a Wechat mini App now (it's like a app but use html/css/js, not Kotlin/Swift, run on Wechat, cross platform)\nI can't remember how to do that. sorry \n. At first, our website can write content with format, like a blog. \n(That's why I try Quill)\nbut seem like people spend time on phone far more than computer(desktop/laptop)\nso we just pivot into an App only product.\nand we lower the bar for user post content again and again.\nnow we look like Instagram. ah.. I am quite disappoint that they don't want write official guide on how to store & display content.\nsee here: https://github.com/quilljs/quill/issues/2276#issuecomment-455401711. @benbro \n\nGithub issues are for bugs. \n\nQuestion: If I want propose something new, can I post them in Github issue? \nFor example. I want add new example CodePen into Quill Playground,  \nor I want write a new page for Quill Doc, \nit seem reasonable to post into issue.   I don't want \"harass\" @jhchen on Twitter\npost on StackOverflow would get a lot downvote and not helpful for people there.  \nWhy I want ask first, then act?\nI don't want spend couple hours writing PR and get rejected. \na issue discuss about new PR would help save time on both side\n. ",
    "ajoshi31": "@sferoze : I am using angular material that has fixed sidebar, how can I fix this issue I am also having the same issue.\nEven I tried z-index but as said it won't help. . @sferoze : I am using angular material that has fixed sidebar, how can I fix this issue I am also having the same issue.\nEven I tried z-index but as said it won't help. . ",
    "APengue1": "I have solved this problem using the bounds configuration option as mentioned in #1124 . ",
    "letitfly": "Same here. Sometime it's difficult to set the right bounds, and the drop down menu from the bubble toolbar does not observe the bounds option.. Same here. Sometime it's difficult to set the right bounds, and the drop down menu from the bubble toolbar does not observe the bounds option.. ",
    "thinksaydo": "We're running into this same problem with many editors on the page, each with their own plugins. We may try to do a PR on this to add local instance formatters alongside global formatters.. I can confirm we also had this issue with Quill 1.3.0 when inserting new links in the latest Firefox 52. Continued typing following the new link would continue to type within the link. To work around, I applied a link format with a value of false, after setting the selection to put the cursor after the newly inserted text. Not ideal, but it worked for now.. I can confirm this also happens in Safari.. I can also confirm that reverting to 1.3.0 fixes this problem. So something in 1.3.1 changed.. It appears it may have something to do with this commit: https://github.com/quilljs/quill/commit/d30e36d7a8e32d680b54ed47b40a79b839603fc9. +1 I've seen this happening as well in Edge 41 recently. ",
    "zizzle6717": "@artaommahe Here is PR we hope will address this issue.  Interested to gather some perspective on its usability. https://github.com/quilljs/parchment/pull/41\nUpdate\nOn second thought, this needs some more investigation.... @jhchen @artaommahe Here is a working branch of Parchment matched with Quill branched off of version 2.0.  I still have 44 tests failing. Could we start a conversation about merging this with branch 2.0?  Any insight is much appreciated as I continue to refactor the last few tests. \nParchment - https://github.com/zdizzle6717/parchment/tree/feature/scope-registry-to-quill-instance\nQuill - https://github.com/zdizzle6717/quill/tree/scope-registry-to-quill-instance. Down to 23 failing tests, but I'm really struggling to understand how getBounds() and the code format work.. This time the approach follows the initial recommendation.  Rather than having a singleton registry at the modular level, this branch adds a class called EditorRegistry that can be instantiated along with each instance of Quill.  Quill's constructor gets a third argument that defaults to a new instance of EditorRegistry.\nWe gain the ability to mitigate different formats/blots/attributors among each editor.  One example of this could be having an editor with a custom video blot and a secondary editor that restricts the use of that same custom video.  The user can no longer copy/paste or load content which includes custom formats/blots/attributors unless both editors explicitly use the same EditorRegistry instance.\nWe first considered cataloguing a different Registry for each editor and setting the active registry on focus.  There were too many changes occurring in the background that happened even before focus or that occurred when an editor was inactive.  Having the option to share one EditorRegistry among all editors or differentiate a new EditorRegistry per editor allows for more customization without overcomplicating the usability or creating redundant overhead.. @jhchen Hi Jason. We are developing with Quill at Blackboard, a global education tech company, that provides numerous applications of content authoring across various teacher/student solutions.  After moving from tinyMCE to Draft, and now to Quill, development and the ability to customize our text editor has improved exponentially. Many thanks.  \nAlthough minor, this PR was a chance to query the update process and test the waters for getting involved with open source development of Quill.\nThe feature adds predictability to copying/pasting from word documents.  It strips out some unnecessary newline/break/return characters so that the pasted contented matches the content from a word document more accurately.  I think this is applicable for anyone using Quill. We hope to cater to user expectations and make the experience as smooth as possible.\n. ",
    "fuffalist": "To reproduce the issue, double tap to select one single word, then release the finger and drag the selection margins to cover more words. If you don't scroll and tap on a toolbar button, not all the words in the selected text are formatted.\n. I've recorded a short video that highlights this issue and how to reproduce it.\nhttps://1drv.ms/v/s!Aj5Gl1eygSq0gYoAFKlKWDjSyz1f-A. ",
    "glennfu": "I'm assuming this is a bug since the commit that closed the last issue was referenced with the text \"The tooltip placement has been reverted to be within the editor\". However in this instance you can see it's not contained by the editor.\nA reasonable workaround is to pass { bounds: element } where element is the same element being passed as the first argument that Quill is created on. Then the reference bounds are indeed set to be that of the Quill form.\n. OK I understand. I think my trouble was not being able to figure out the expected behavior. All I could find was your words: \"The tooltip placement has been reverted to be within the editor\" so I thought I would expect it to be within the editor in my layout. From that it wasn't clear to me that this wasn't a bug, sorry!\nObviously in my Codepen it was overly simplified but in my real use case there are other elements and columns and floats and such causing the overlap. I couldn't figure out why the tooltip wasn't appearing within the editor for a while. In my layout as well as the Codepen, the editor is fully visible and unobstructed, but the tooltip is chopped off. I didn't have an option to remove overflow rules on all containers and parents above the editor so unfortunately It wasn't as simple as \"if you want it to show, don't hide it\". I would really like and prefer to be able to unhide it in that case like you recommend, but I can't!\n. ",
    "tipenko": "Guys, any comments? Is it a good idea for me to dig in and try to fix it myself? \n. ",
    "joli84": "Ahh, got the impression you could customize your own tags. Thats not the case then. Ty.\n. ",
    "diiq": "The ability to change it would be amazing -- and even then, the default should have a 'http://' in front, please! Right now it is a incorrect example, and users that follow it will make broken links. . ",
    "kevinrichard31": "it doesn't work for me, when i copy paste an img, it is displayed on screen and in the Delta\nhttps://i.stack.imgur.com/QyIUs.gif. ",
    "wethegreenpeople": "It took a minute but I was running into a similar issue as @kevinrichard31 where I would make sure that image tags weren't whitelisted, which worked perfectly if you were trying to copy/paste an image in, it wouldn't allow it. But if you dragged/dropped an image into the text editor it would still display it/make an image tag for it.\nMy solution ended up being to just continually make sure that if any img tags were being created we'd remove them:\neditor.on('text-change', function (delta, oldDelta, source) {\n            $('#editor img').remove();\n        });. ",
    "prokilogrammer": "Both MS Word and Google Docs handle these cases as expected. It is a very bad UX if Quill lost the user's formatting after just deleting a line. What do you think? \nI will be happy to send out a PR for it.. ",
    "henry-luo": "The follow CSS rules solve the problem for me:\n.ql-editor { cursor:default; }\n.ql-editor * { cursor:text; }\nIn other words, cursor:text style rule should not be set on ql-editor, which will confuse Chrome browser.. ",
    "charrondev": "I've created some custom blots to make this work, and it definitely is possible. I'll be sure to share what I've put together here once I wrap my PR over at vanilla/vanilla, but we have some Blot's nested 3 levels deep with additional Embed Blots attached inside.\nAs an example our Spoiler ends up with the following DOM structure:\nhtml\n<div class=\"spoiler\">\n  <button class=\"spoiler-toggleButton\" >\n    <!-- Opens/Collapsed the content. Lots of stuff in here-->\n    ...\n    </button> \n  <div class=\"spoiler-content\">\n    <p>One line of the spoiler</p>\n    <p>Another line of the spoiler</p>\n  </div>\n</div>\nYou basically get it wiring together  a few Container Blots. I've been working to try to make the Blots a bit more re-usable at the moment because we have a similar structure for quotes as well, and have containers around a couple of our other Blot's for backwards compatibility with a bunch of legacy stylesheets.. This is really pretty easy to implement yourself.\n```ts\nclass MyEmbedBlot extends SomeBaseBlot {\n    /\n     * Get the attached quill instance.\n     \n     * This will NOT work before attach() is called.\n     /\n    private get quill() {\n        if (!this.scroll || !this.scroll.domNode.parentNode) {\n            return null;\n        }\n    return Quill.find(this.scroll.domNode.parentNode!);\n}\n\n}\n```\nThe quill instance is then available with this.quill. You just have to be aware of where in the lifecycle you call the method. For example calling this in the constructor, before attach() is called will not work because you don't have a scroll or parent blot yet.. I've got this issue https://github.com/vanilla/vanilla/issues/6776 probably taking up my full next few days. At least for us we have a lot of custom blots and already have a few hundred lines of custom keyboard handlers for our multiline blots.\nOur solution is more likely not going to involve having a cursor before & after the block embeds. Instead the block level elements will be treated as a single element that can be focused using the keyboard arrow keys from before or after and custom focus states for the block level elements.\nI'm planning on having the focus state act as if the cursor is at the beginning of the line, so backspace from the following line after an embed will delete the embed block. \nAlready this will require handlers for arrow keys at all positions of the document, and special behaviour will likely be necessary for the beginning and end of the document. For us this will already be similar to how we handle our multi-line blots, where arrowing from the last position or first position in the document will insert a fresh new line at the end/start of the document. Clicking on one of these blocks in the element will also focus it. I'll follow up here next week once we have our solution.\nOur solution will also likely make extensive use of custom labels with summaries of the contents for accessibility purposes. I'm also considering a similar solution with the arrow keys for inline embeds that are to be treated as a single element, like an @mention that has already been formed, but I'm not a 100% sure that will be necessary.\nLuckily Quill is extensible enough that a lot of this can be done just be registering a few custom blots and registering some custom keyboard handlers through our custom theme.. Additionally having a clear selected state for the whole blot like this will let us import some better copy/paste handling for these types of blots.\nhttps://github.com/quilljs/quill/issues/1337 Kind of outlined the strategy I'm taking here. @mcmire seems to have come across some issues with drag and drop but that's not an immediate issue for us.. If you're looking to do something DOM you'll need to do it after attach() is called (Where it actually get's insert into the DOM).\nattach get's called at the of base Blot implementations insertInto() call https://github.com/quilljs/parchment/blob/master/src/blot/abstract/shadow.ts#L105\nIf it's not something that changes the length of the blot though (length never changes), then you'll want to do it inside of optimize(). If it does change the length or only needs to run once, overriding insertInto() and placing your code after the super.insertInto() call would make more sense.\nI provide addition assistance though without knowing what you're trying to do exactly.. I'd like to elaborate a little bit on this issue.\nThe issue seems to stem from not already having a newline after the current CodeBlot.\nExpected behavior:\nA newline will be inserted after the CodeBlot if it is the last element in the document. The user's cursor will then be placed on that line.\nI'm willing to make a PR for this.. If you take a look here I have a functioning implementation of this behaviour for  multiple of our Custom Blots for both the beginning and end of the document with all arrow keys.\n@jhchen Is this something you would accept a PR for, for the built in CodeBlock and BlockQuote Blots?. I realize now that the link I shared has been made defunct after the branch it was on was deleted. I'm willing to submit a PR for both this and #1978 with tests, but was looking for acknowledgement form @jhchen first.\nIn the meantime you can find our implementation and tests\nThose files also use a few utilities I've written for:\n- Inserting a new line after a block and trimming extra whitespace\n- Multiple others\nThey are written in typescript though, but it should be easy enough to read through. We have a decent amount of custom blots, and don't use all of the built in ones though, so there is probably a lot of extra code happening there. Our for quotes supports multiple lines, so we have some additional handlers for better UX in that department.. For reference our custom handler for backspacing looks like the following:\n```js\nthis.options.modules.keyboard.bindings[\"Spoiler Backspace Handler\"] = {\n    key: Keyboard.keys.BACKSPACE,\n    collapsed: true,\n    format: ['spoiler-line'],\n    handler: (range) => {\n        const [line] = this.quill.getLine(range.index);\n    // Check if this is the first line in the SpoilerContentBlot.\n    const isFirstLine = line === line.parent.children.head;\n\n    if (isFirstLine) {\n        // The fact that this is always the grandparent of the line is enforced at the Blot level.\n        const spoilerBlot = line.parent.parent;\n\n        const delta = new Delta()\n            .retain(spoilerBlot.offset())\n            .retain(spoilerBlot.length(), { 'spoiler-line': false });\n        this.quill.updateContents(delta, Emitter.sources.USER);\n\n        // Return false to prevent default behaviour.\n        return false;\n    } else {\n        // Return true to allow default behaviour.\n        return true;\n    }\n},\n\n};\n```. This issue seems to be caused the a static className not being set.\nI've updated your example with a className and everything works correctly as far as I cans see. https://codepen.io/anon/pen/WMPZNZ\nQuill needs to be able to determine from a DOM Node if a blot matches or not. This is done through the static formats(domNode) function of a Blot. If no static className is provided for your custom Blots they will by default only check that the tagname matches. In this case span matches multiple registered blots, which at some point causes the error you were experiencing. \nWhen you set a static className the static formats() function will also check that the classnmae matches, preventing the issue. This classname will automatically be applied to the domNode for you as well.\nThis error message could probably be improved, but that static formats() function can also check other properties besides className when implemented yourself, which makes it more complicated than just enforcing a className.. I did a little bit of testing myself and can confirm this on a few different platforms as well.\nI was able to reproduce on Android versions 6->8.1 using Chrome 64 and the google keyboard. I was unable to reproduce on Samsung devices however (Chrome 64 and android 7.1, although these devices were not using the Google keyboard).\nI also able to reproduce this issue on the same devices on the quill homepage https://quilljs.com. The same behaviour occurs with the formula embed in the main example.. I'm starting a series of Blog posts about QuillJS and Parchment.\nYou may be more interesting in the next one that I'm writing which is about Containers and strategies to make structures like this, but you have to keep in mind that the actual persistent data structure of Quill (Delta) is flat and does not support nesting. You best bet would be creating a series of \"wrapped\" 1 line blots that create their own container, then using the optimize function to join them together.\nThink of it as attempting to create an HTML structure like this first:\nhtml\n    <section>\n       <h1>other title</h1>\n   </section>\n    <section>\n       <p>some content level 2</p>\n   </section>\n    <section>\n       <p>other content level 2</p>\n   </section>\n    <section>\n       <!-- ... other level 2 blocks ... -->\n   </section>\n   </section>\nThe using the optimize function on your custom Blots to join them together in the same container.\nThe delta would probably look something like this.\njson\n[\n    {\n        \"insert\": \"Title\",\n        \"attributes\": {\n            \"heading\": 1,\n            \"sectioned\": true\n        }\n    },\n    {\n        \"insert\": \"some content level 2\",\n        \"attributes\": {\n            \"sectioned\": true\n        }\n    },\n    {\n        \"insert\": \"another content level 2\",\n        \"attributes\": {\n            \"sectioned\": true\n        }\n    }\n]\nTechnically the length of the HTML structure and the one where they are all in the container has the same length and value in Quill, so a Blot's optimize function can join together these Blots.\nYou'll need to create a new Blot for each item you want nested though. I would recommend creating a higher order function that takes an existing Blot class, and enhances it with your wrapper's extra functions/modify blotName/className etc.\nfunction makeSectionedBlot(blotClass) {\n  return class extends blotClass { ... }\n}. I'm currently have about half of it written, but am reorganizing it a bit. I would expect some time early next week. If you follow me on twitter or dev.to you should see when it's posted.. Duplicate of https://github.com/quilljs/quill/issues/1768 . This should be closed. https://github.com/quilljs/quill/issues/2041 is similar and at least has a little bit of substance.\nThis is an issue tracker, not a help guide. I'd recommend you either fill out an issue with some detail (the issue template would be a good place to start) or expand you question and ask over on stack overflow.. In our on-going rich editor implementation accessibility has been an ongoing priority. We ended having a custom enough use case that we ended re-implementing the toolbar though. For us we've just been consulting the WAI-ARIA Authoring Guidelines. The toolbar example was quite helpful. https://www.w3.org/TR/wai-aria-practices-1.1/examples/toolbar/toolbar.html\nThe editor improvements are quite important to us though. I'd be happy to either contribute a PR for those or help test them if you end implementing them before we get there.\n\nOne key area where I haven't been able to find a definite answer relates to the BlockEmbed. When a user inserts a complex block embed into the document (or one is present there). How do you represent it to a screen reader. Some additional work is already required to have contenteditable/quill treat it as a singular element. I've discussed a little bit moving focus onto these elements with https://github.com/quilljs/quill/issues/1961.\nRight now the biggest issue I see is that when these block embeds have non-editable && focusable elements in them, you can only get to them by tabbing (as if they are at the end of the document, even when they could be in the middle/near the beginning).\nI'm planning on using arrow keys/click handlers to move focus onto the block embeds. The blocks would all have tabindex=-1 so they don't break up the document otherwise. They would each have a label on them with a summary of their contents. Does that sound somewhat correct to you?. This is because you do not currently have any blot registered that matches text directly inside of a <div> tag. If you change your text to be inside of a <p> tag or modify and existing/create a custom  blot that matches the pattern <div>Some text here</div>, then the dragging/dropping of that text works.. Something does seem off here though. The default behaviour here should be that pasted content that doesn't match falls back to being plain text (in whatever your BlockBlot is).. You might have to rephrase your issue a little bit. I'm having a bit of trouble following it.\nAs I understand, you're modifying quill's contents through innerHtml (not through insertText/insertEmbed) but by setting innerHTML somewhere inside of Quill, then trying to use the text-change/editor-change event to see what you put into it?\nAt least for us, our server side images use an custom ImageBlot, much like the one from Cloning Medium with Parchment. This Blot takes an object with data about the src and alt attributes of the image. For us Quill has nothing do with getting the end result for the URL.\nA user can either use a file upload button, an embed dialogue box we created or copy paste the image in. I have some paste and drag/drop handlers here that we also use.\nWe take the file our URL, pass it through our API endpoint and use the resulting URL to insert an instance of our custom image blot. If you look in that file we actually have custom loading and error blots as well to represent the varies different phases of the process that replace each other.\n\nThe crux of this before inserting any image in the URL you need to have the URL of your image. Then you can use insertEmbed to insert a custom image blot.. Definitely agreed here. Many use cases for for an editor like this involve displaying user content to other people. One of the largest benefits for our use case is that the quill delta format is much easier to parse securely on the server side than HTML.\nLoading any random script into your page alongside your own javascript, essentially allows 1 user to totally rewrite your page in any way they wish for other users.\nIf you're not familiar with XSS you should read up on it https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting because that is essentially what you are asking for as a feature.. Not that I've seen. Quill it quite extensible though. You could create a module (Really just a javascript class that gets a copy of your quill instance and config), and tie it into some custom UI component. Then listen for text changes in your input, find all instances of the text your looking for, calculate their positions, and format them with a custom attributor that highlights them. Then when some places in their replacement text, and clicks replace, programmatically change all of the affect text and remove your custom attributor.. Once again, if you were to reference my previous comment or the documentation, you would see that if using a build system of your own, you should probably be building from source using the quill/core or quill/quill entry.\nAn example from our code base https://github.com/vanilla/vanilla/blob/release/2.8.dev.4/plugins/rich-editor/src/scripts/quill/Formatter.ts#L7. @Havunen I've noticed over the last year the maintainer has not been particularly transparent with the community outside of the big \"State of Quill 2.0\" braindump ~ a year ago. Our company built internally . a lot on Quill 1 and also have business requirements to somewhat support IE11 (it doesn't need to be perfect, but it can't be a crashes page).\nI don't want to throw shade, but the maintainer here @jhchen has not been particularly active in maintaining the issue tracker or pull-requests and has not responded to me in any requests to assist in this. I'm going to try and reach out again, but if I don't get any response in the new year we will begin maintaining a fork of the 2.0 branch over at https://github.com/vanilla/quill and will likely be looking for additional companies with a vested interest in quill to assist in the maintenance. If you have interest I'd encourage you to revisit this in the new year and consider targeting your pull request there.. If that was the only thing missing, then my guess is the documentation would just need to be updated. There's a big difference between \"fundamentally doesn't work in IE11\" and \"mostly works in IE11 with 2-3 small polyfills\".\nOur polyfill script for example incudes the node.contains() and a classList.toggle polyfills already.. ",
    "Kivylius": "Slight problem still.\nsee issiue #1126 . @jhchen Can you show in the updated jsfiddle please? following you instruction i could not get it to work.\nI did find some class (style-sheet), and just removed them and it seems to fix the problem but why is happening i'm not sure.\n.ql-bubble .ql-out-bottom,\n.ql-bubble .ql-out-top {\n  visibility: hidden;\n}. ",
    "daau": "You can use the diff() function provided in the Delta library.. @jhchen It looks like people are having issues because they're enclosing the example HTML code within another div, without updating the \"scrollable-container\" id.\n. ",
    "Percipient24": "For example, here's a quick pen that uses diff() and compose():\nhttps://codepen.io/percipient24/pen/eEBOjG. I had trouble with this, also.\nThe best I was able to do was work in (the more forgiving) ES6 when defining the CustomBlock:\n```\n// in some CustomBlock.js file:\nimport * as Quill from 'quill';\nconst BlockEmbed = Quill.import('blots/block/embed');\nexport class CustomBlock extends BlockEmbed {\n  // whatever you need your block to do\n}\nCustomBlock.blotName = 'custom';\nCustomBlock.tagName = 'div';\nexport default CustomBlock;\n```\nAnd then use require() on the TypeScript side:\n```\n// in some Editor.ts file:\n// (these are the relevant parts of a larger file)\nimport * as Quill from 'quill';\nconst customBlockModule = require('path/to/CustomBlock');\nQuill.register(customBlockModule.CustomBlock);\nthis.editor = new Quill(someElement, someOptions);\nthis.editor.insertEmbed(someIndex, 'custom');\n```\nIs it ideal? No.\nDoes it work? Yes.\nBut I like the approach @noomz found much better. (see below). I had been using @noomz's approach ( https://github.com/quilljs/quill/issues/1233#issuecomment-288968965 ) - but ran into an error when reading in a saved delta:\nERROR TypeError: Cannot read property 'length' of undefined\n(Which seemed to have something to do with the prototype shenanigans.)\nAfter switching to @splodingsocks' approach ( https://github.com/quilljs/quill/issues/1233#issuecomment-294973856 ) that error went away!. Ooo! Ooo! I know this one. :raising_hand_man:\nThe SubtitleBlot.blotName is used to distinguish one register/import/blotType from another.\nThe SubtitleBlot.className will automatically set the class attribute on your <div> without the call to node.setAttribute('class', 'subtitle');. This will also let Quill distinguish one div from another when interpreting the HTML.\nCase in point - check out this fork of your codepen: https://codepen.io/percipient24/pen/RVpPqX specifically lines 10 and 20 of the JS.\nI recommend reading https://github.com/quilljs/parchment#blots for more details on what a Blot has.\n\nAll of that said, according to the contribution rules we're supposed to post questions like this over in Stack Overflow, tagged with quill. But this hit my inbox and I knew the answer, so I got excited. (I've been working with Quill for a couple months now, and making heavy use of Issues / StackOverflow written by other folks, I figure it's my turn to give back!). @GlenKPeterson So sorry! I had done something else (figure/caption related) on my own - thinking I was working off of a Fork of the codepen I linked above. Instead, I was overwriting the same fork. Try the link again! It's back to what I intended now, which is closer to what you expected.. @jhchen I'm honestly not sure how best to perform an object check. this.options.bindings has arbitrary keys (so I can't check for the presence / absence of a key), and typeof [] and typeof {} both return \"object\" so my instinct to use typeof won't disambiguate well enough.\nAny suggestions?. ",
    "mihitha": "@Percipient24 Thanks lot for your smart solution.. ",
    "eugenkiss": "Thanks for the response @jhchen. It seems I'm blind. Can you explain where I would change the import from quill.core.js to quill.js in the CodePen? \nThe settings modal already shows quill.js for me:\n\n. Ok, this makes sense!. ",
    "R4DIC4L": "Just noticed that this issue appears when first entering a character in the editor because of the following line of code in the setNativeRange function (which seems to be in quill.js):\nselection.addRange(range);\nThis seems to usually happen every time a character is entered for the first time.. @GoranGjorgievski No, unfortunately I have not found any solution. I have been trying to diagnose this issue, but couldn't find out why the addRange method throws this error. Furthermore, this error cannot be caught in a try-catch block ... I actually ended up using another editor for my application.. @GoranGjorgievski No, unfortunately I have not found any solution. I have been trying to diagnose this issue, but couldn't find out why the addRange method throws this error. Furthermore, this error cannot be caught in a try-catch block ... I actually ended up using another editor for my application.. > > @GoranGjorgievski No, unfortunately I have not found any solution. I have been trying to diagnose this issue, but couldn't find out why the addRange method throws this error. Furthermore, this error cannot be caught in a try-catch block ... I actually ended up using another editor for my application.\n\nwhich editor did you choose? I've been having this problem and can't find a solution either.\n\nI actually ended using draft.js, or more specifically, a React implementation of it (react-draft-wysiwyg).. ",
    "GoranGjorgievski": "@R4DIC4L Did you manage to get around this issue? \nI am having the same problem and it seems to be cutting the first N characters of a bigger string, but only the first time you try to edit, as you described.. ",
    "rbrugnollo": "\n@GoranGjorgievski No, unfortunately I have not found any solution. I have been trying to diagnose this issue, but couldn't find out why the addRange method throws this error. Furthermore, this error cannot be caught in a try-catch block ... I actually ended up using another editor for my application.\n\nwhich editor did you choose? I've been having this problem and can't find a solution either.. ",
    "tenadolanter": "i met the same question when i  execute quill.setText(\"\"). The reason is this func will remove instantiation of the eidtor. ",
    "quoimec": "I also have this issue. Trying to embed a video or insert a hyperlink is impossible unless the containing div has a set height. Very annoying, means the preview box now has to be a scroll rather than an expanding box.. ",
    "tonypee": "As a hack until it is fixed, you can just override the visibility to get it\nalways showing:\n.ql-out-bottom {\n  visibility: inherit!important;\n}\nOn 28 November 2016 at 10:59, quoimec notifications@github.com wrote:\n\nI also have this issue. Trying to embed a video or insert a hyperlink is\nimpossible unless the containing div has a set height. Very annoying, means\nthe preview box now has to be a scroll rather than an expanding box.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1135#issuecomment-263157663, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AC8aNftHYB-cIxD1qFdkkTaNJkJfUizlks5rChlZgaJpZM4K8xY6\n.\n\n\n-- \nTony Polinelli\n. As a hack until it is fixed, you can just override the visibility to get it\nalways showing:\n.ql-out-bottom {\n  visibility: inherit!important;\n}\nOn 28 November 2016 at 10:59, quoimec notifications@github.com wrote:\n\nI also have this issue. Trying to embed a video or insert a hyperlink is\nimpossible unless the containing div has a set height. Very annoying, means\nthe preview box now has to be a scroll rather than an expanding box.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1135#issuecomment-263157663, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AC8aNftHYB-cIxD1qFdkkTaNJkJfUizlks5rChlZgaJpZM4K8xY6\n.\n\n\n-- \nTony Polinelli\n. ",
    "fbnlsr": "Then something is weird. I've tried using this:\n\n<button class=\"ql-list\" value=\"bullet\"><i class=\"fa fa-list\" aria-hidden=\"true\"></i></button>\n\n..which doesn't work, but this:\n\n<button class=\"ql-bullet\"><i class=\"fa fa-list\" aria-hidden=\"true\"></i></button>\n\nAm I missing something?. Damn. I just realised I had an old version of Quill on my script. Disregard that PR.. ",
    "lagmanzaza": "can I use with formula ?. can I use with formula ?. ",
    "letanure": "Something like this\n```js\nconst Link = Quill.import('formats/link')\nclass linkType extends Link {\n  static create (value) {\n    let node = super.create(value)\n    value = this.sanitize(value)\n    if (validations.isNumeric(value)) {\n      node.setAttribute('href', 'tel:' + value)\n      node.className = 'link--tel'\n    }\n    if (validations.isEmail(value)) {\n      node.setAttribute('href', 'mailto:' + value)\n      node.className = 'link--mail'\n    }\n    if (value.startsWith('https://') || value.startsWith('http://')) {\n      node.className = 'link--external'\n    } else {\n      node.removeAttribute('target')\n    }\n    return node\n  }\n}\nQuill.register(linkType)\n````. ",
    "Poky85": "In Link extension you have to add format() method. So link editing (not only creation) works https://codepen.io/Poky85/pen/PQoPrV. ",
    "ddemolina": "Hello, \nHow can i do to set default formats in this case?\nI define a whitelist for color format.\nThen I paste from outside quill a text which color aren't in the whilist. \nquill remove this color but how can i say to quill: \"when remove a format which it's not in the whitelist put this default format value instead\".\nThanks!\n. ",
    "tinhlv": "how do we adjust the size of that iframe??. I want it to work with the national language.. ",
    "nfabacus": "I have the same issue.  @jhchen Could you help with more specifics?\nDo I need to use Delta to control the iframe size?\nI can change the iframe with CSS as below:\n.ql-editor .ql-video.ql-align-center {\n  width: 800px;\n  height: 460px;\n}\nbut, I would like to provide some size options to the user.\nThank you.. @lancetipton Here is what I mean\n\nAlso, what is the best way to disable the video resize mode?  Even if I make the editor readonly, resize does not stop and I cannot click to play the video.  Any hint will be appreciated.\nHere is my repo: quill-video-resize branch\nhttps://github.com/nfabacus/react-quill-experiment/tree/quill-video-resize\nThank you. @lancetipton Yes, I just checked the branch.  It works!  Thank you very much for fixing the issue.  I will study what you did with the code.. ",
    "lancetipton": "I added a little repo to allow video resize. I just started messing Quill this week so there may be better ways to do it, like make it a module. But it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. I added a little repo to allow video resize. I just started messing Quill this week so there may be better ways to do it, like make it a module. But it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. I added a little repo to allow video resize. I just started messing Quill this week so there may be better ways to do it, like make it a module. But it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. I added a little repo to allow video resize. I just started messing Quill this week so there may be better ways to do it, like make it a module. But it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. I made a little repo to allow video resize with iframe. I just started messing with Quill this week, so there may be better ways to do it, but it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. I made a little repo to allow video resize with iframe. I just started messing with Quill this week, so there may be better ways to do it, but it works so that's nice.\nhttps://github.com/lancetipton04/quill-video-resize. @nfabacus  I'm not sure what you mean by text get wrapped up inside the iframe. Can you show me an example?. hmm.. does not seem to be happening to me. Let me take a look and see what I find.. hmm.. does not seem to be happening to me. Let me take a look and see what I find.. @nfabacus Just submitted a pull request to your repo. Let me know if that fixes if for you.. @nfabacus Just submitted a pull request to your repo. Let me know if that fixes if for you.. ",
    "xoapit": "Does anyone have a solution for this problem in ReactJs?. Does anyone have a solution for this problem in ReactJs?. ",
    "bedeoverend": "I'm trying to instantiate a Quill editor with contenteditable being applied to the container - that's probably the simplest way I can put it. I can't see a clean way of a doing this currently. The code I provided above manages it, but it's a complete hack.\nEssentially rather than something like:\nhtml\n<div id=\"container\">\n  <div class=\"ql-editor\" contenteditable></div>\n</div>\nafter calling new Quill('#container'); the ability for it end up like:\nhtml\n<div id=\"container\" class=\"ql-editor\" contenteditable></div>. I'm trying to instantiate a Quill editor with contenteditable being applied to the container - that's probably the simplest way I can put it. I can't see a clean way of a doing this currently. The code I provided above manages it, but it's a complete hack.\nEssentially rather than something like:\nhtml\n<div id=\"container\">\n  <div class=\"ql-editor\" contenteditable></div>\n</div>\nafter calling new Quill('#container'); the ability for it end up like:\nhtml\n<div id=\"container\" class=\"ql-editor\" contenteditable></div>. @benbro Sorry, I'll try clarify - the contenteditable attribute was just to illustrate what I was trying to do - I've updated my comment to make it clearer.\nWhen styling the content of an editor, I don't want to have to worry about the extra DOM level. I want to use Quill to edit and display content on a third party site  - with the same CSS styles applied regardless of editing or viewing. So if on the third party site they have section > p { ... } If I then created Quill editor like new Quill('section#container') it would break those styles. If however, Quill didn't inject an extra level of DOM hierarchy, this styling would work the same.\nDoes that makes sense?. @benbro Sorry, I'll try clarify - the contenteditable attribute was just to illustrate what I was trying to do - I've updated my comment to make it clearer.\nWhen styling the content of an editor, I don't want to have to worry about the extra DOM level. I want to use Quill to edit and display content on a third party site  - with the same CSS styles applied regardless of editing or viewing. So if on the third party site they have section > p { ... } If I then created Quill editor like new Quill('section#container') it would break those styles. If however, Quill didn't inject an extra level of DOM hierarchy, this styling would work the same.\nDoes that makes sense?. ",
    "ben-styling": "I'm having this same issue, when content inside the editor is styled new lines are being added.\nIs there any solution/workaround for this, or do we just not add margins for now?. @tygeng I've found that the styling can cause newlines to be added by the quill renderer.\nIn my tests if I've initialised quill starting from html where the p styles were p{margin-bottom: 60px}, an extra line would be added. I've not found any work around for this.. ",
    "tygeng": "Same here, any recommended workaround for this? In our system we have html stored in the db and we are calling dangerouslyPasteHTML to show the doc in Quill. But Quill keeps inserting newlines.. ",
    "emulbreh": "Here's a workaround that works for us:\njavascript\ndocument.querySelectorAll('.ql-editor p > br:first-child:last-child').forEach((br) => {\n    br.parentNode.remove();\n});. ",
    "houxg": "Never mind, I only need current formats so I subscribe the selectionchange event and it work well.\nHere is my code:\ndocument.addEventListener(\"selectionchange\", function(e) {\n            var range = quill.getSelection();\n                if (range) {\n                    if (range.length == 0) {\n                        var formats = quill.getFormat();\n                        console.log('User cursor is on', range.index);\n                        nativeCallbackHandler.onCusorChanged(range.index, JSON.stringify(formats))\n                    } else {\n                        var text = quill.getText(range.index, range.length);\n                        console.log('User has highlighted:' + text);\n                        nativeCallbackHandler.onHighlighted(range.index, range.length, JSON.stringify(quill.getFormat(range.index, range.length)))\n                    }\n                } else {\n                    console.log('User cursor is not in editor');\n                }\n        }, false);. ",
    "berndschimmer": "thx!. thx!. btw: is there a list for all html tags? next thing is that i want to strip < code > and I don't want to bother you again and again :-). btw: is there a list for all html tags? next thing is that i want to strip < code > and I don't want to bother you again and again :-). OK, thx!\nIt would be great if the header could be configurable like in the toolbar {header: [2,3,false]}. OK, thx!\nIt would be great if the header could be configurable like in the toolbar {header: [2,3,false]}. thx. forgot the . between 1 and 7 :). ",
    "vinitpradhan18": "@artaommahe  Hey, if you implemented figure with editable caption can you share the snippet. I am trying to implement one myself. I want the caption to be formattable. I have implemented the functionality and the html generated is also correct. But I have screwed up with my delta. So, when I save and reload it in the editor, it does not render correctly. I have raised an issue at #2437. I have been stuck here for more than a week now. I would really appreciate if you could help me out.. @artaommahe  Hey, if you implemented figure with editable caption can you share the snippet. I am trying to implement one myself. I want the caption to be formattable. I have implemented the functionality and the html generated is also correct. But I have screwed up with my delta. So, when I save and reload it in the editor, it does not render correctly. I have raised an issue at #2437. I have been stuck here for more than a week now. I would really appreciate if you could help me out.. Has anyone figured out an ideal solution to this problem? I have been able to achieve the same (figure with editable caption). I have implemented the functionality and the html generated is fine, but the delta generated is not appropriate. When I re-render the sample blot in editor through delta, it fails. This is how I have I have implemented #2437 .\nAny help is appreciated. Has anyone figured out an ideal solution to this problem? I have been able to achieve the same (figure with editable caption). I have implemented the functionality and the html generated is fine, but the delta generated is not appropriate. When I re-render the sample blot in editor through delta, it fails. This is how I have I have implemented #2437 .\nAny help is appreciated. Thanks. When you said that I\n\nhave to change static formats(domNode) and format(name, value) to handle that attribute as well\n\nwhat do you mean exactly? Does the default static formats(domNode)  and format(name, value) not handle the align attribute? I tried your approach. And it worked. But the align value in the delta was an empty string no matter what value I set it for align attribute. So after saving, when I re-loaded the editor the alignment was left (that is probably because quill interprets empty string value as left alignment).\nHere is a snippet of my ImageBlot:\nimport ReactQuill from 'react-quill';\nconst Quill = ReactQuill.Quill;\nconst BlockEmbed = Quill.import('blots/block/embed');\nconst ATTRIBUTES = ['height', 'width', 'align', 'src'];\nclass ImageBlot extends BlockEmbed {\n  static create(value) {\n    const node = super.create(value);\n    if (typeof value === 'string') {\n      node.setAttribute('src', value);\n    }\n    node.setAttribute('width', 300);\n    node.setAttribute('height', 300);\n    node.setAttribute('align', 'center');\n    return node;\n  }\n  static formats(domNode) {\n    return ATTRIBUTES.reduce((formats, attribute) => {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\nImageBlot.blotName = 'image';\nImageBlot.tagName = 'IMG';\nexport default ImageBlot;\n. Thanks. When you said that I\n\nhave to change static formats(domNode) and format(name, value) to handle that attribute as well\n\nwhat do you mean exactly? Does the default static formats(domNode)  and format(name, value) not handle the align attribute? I tried your approach. And it worked. But the align value in the delta was an empty string no matter what value I set it for align attribute. So after saving, when I re-loaded the editor the alignment was left (that is probably because quill interprets empty string value as left alignment).\nHere is a snippet of my ImageBlot:\nimport ReactQuill from 'react-quill';\nconst Quill = ReactQuill.Quill;\nconst BlockEmbed = Quill.import('blots/block/embed');\nconst ATTRIBUTES = ['height', 'width', 'align', 'src'];\nclass ImageBlot extends BlockEmbed {\n  static create(value) {\n    const node = super.create(value);\n    if (typeof value === 'string') {\n      node.setAttribute('src', value);\n    }\n    node.setAttribute('width', 300);\n    node.setAttribute('height', 300);\n    node.setAttribute('align', 'center');\n    return node;\n  }\n  static formats(domNode) {\n    return ATTRIBUTES.reduce((formats, attribute) => {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\nImageBlot.blotName = 'image';\nImageBlot.tagName = 'IMG';\nexport default ImageBlot;\n. Here is how I am creating the image;\nconst path = 'some path url';\n const range = quillRef.getSelection(true);\n quillRef.getModule('image');\n quillRef.insertEmbed(range.index, 'image', path, Quill.sources.USER);\n quillRef.formatText(range.index, range.index + 1, 'align', 'right')\n quillRef.setSelection(range.index + 1, Quill.sources.SILENT);\nThe align right seems to work fine. But I can't seem to align it to the center.. Here is how I am creating the image;\nconst path = 'some path url';\n const range = quillRef.getSelection(true);\n quillRef.getModule('image');\n quillRef.insertEmbed(range.index, 'image', path, Quill.sources.USER);\n quillRef.formatText(range.index, range.index + 1, 'align', 'right')\n quillRef.setSelection(range.index + 1, Quill.sources.SILENT);\nThe align right seems to work fine. But I can't seem to align it to the center.. You could use the quill format method.\nExample:\nconst range = quill.getSelection();\nquill.formatLine(range.index, range.length, 'alt', 'new value');\nquill.setSelection(range.length + 1, Quill.sources.USER);\n. You could use the quill format method.\nExample:\nconst range = quill.getSelection();\nquill.formatLine(range.index, range.length, 'alt', 'new value');\nquill.setSelection(range.length + 1, Quill.sources.USER);\n. You can find here at here.\nSee the video documentation. You can find here at here.\nSee the video documentation. ",
    "divyenduz": "+1. ",
    "sankalpsans": "+1 for having a good way of doing this.. Based on the feedback I've received from the users, people expect that whatever was bolded on clicking \"B\", to be unbolded by clicking on it again, which makes sense, since the button is a toggle. Would be good to know the opinion of other people here as well.. @jhchen You're right, but the unbolded part is something that doesn't happen in this case. I understood what you meant about certain types that don't support bold, because of this it never reaches the \"100% bold\" text selection, which in turn prevents the unbolding on second Bold toggle.\nI'm poring through to codebase to see if this can be improved anyhow.. I see where you are coming from, but I don't see why that should be a part of the core editor at all.. I suggest you directly use emoji character instead of encoding/decoding it to text. Most modern Databases and text editors (you're probably using VS Code) support it.\nYou can copy and paste the characters like '\ud83d\ude42' in your code and use them as is.. ",
    "vasiltabakov": "Hi everyone, had a similar problem and created this:\n\nThe delta in the resulting content of the editor correctly contains the new caption of the image.\nThis is part of an Angular project so the code of the module was written in Typescript. \nTo provide some more insight of how this works\n- there's a custom Embed containing an image and a caption elements\n- what you see in the GIF is: upon pasting an image from the clipboard the editor inserts that custom embed\n- the image options module (delete image and/or change caption) is a separate module triggering when a user clicks on the custom embed\nSince in our case we want the caption to link to an external image we've decided to have the input at the top of the image, but of course it's easy enough to change it's position and style to match the actual caption below the image.\nIf anyone's interested we can publish it on Github as a proper stand-alone module.. Will do, need to remove a lot of ad-hoc code and will post the typescript version today-ish. Here you go:\nhttps://gist.github.com/vasiltabakov/a3bf16f6e69da421cbff60389b9eb975. Mine was a very ad-hoc solution. But I think the whole thing should be a Blot, because if they're separate you'll be able to delete one while the other remains. I doubt that's what you'd want. Inline editing should be easy with some more JS code, you can insert an input when the caption is clicked (and remove all my code for the 'border' and caption input header etc. Many options, depending on what exactly you want.. Mine was a very ad-hoc solution. But I think the whole thing should be a Blot, because if they're separate you'll be able to delete one while the other remains. I doubt that's what you'd want. Inline editing should be easy with some more JS code, you can insert an input when the caption is clicked (and remove all my code for the 'border' and caption input header etc. Many options, depending on what exactly you want.. ",
    "Black-Stork": "@artaommahe Hello!\nI hope you did this task and you can help me.\nBecause I also want to do a figure blot with image and caption parts but I can't do that like at telegraph:\n<wrapper>\n    <img />\n    <caption />\n</wrapper>\nCould you help me? I'm fighting with this problem during a week. ",
    "victor-andreescu": "@vasiltabakov I'm also in the search of a solution for inserting figure with img + figcaption with Quill. I tried your code and it renders ok but the image and the caption inside TaskerFigure doesn't seem to be blots so inline editing for the caption is not an option. Probably because when they are created you used JS methods not Quill?. Any idea how to make them blots?. I was thinking of allowing the deletion of the caption but you are right it's better of your way. I will try the caption on click suggestion hopefully I will manage to bypass the \"delete blot on backspace\" behavior for the caption. Thanks!  . ",
    "stefanocdn": "@charrondev that would be very nice of you and very helpful. I am also trying to use a custom blot with an editable caption, but it is pretty difficult in my opinion. . ",
    "a2xchip": "I do recommend to check out thing telegra.ph does https://telegra.ph/. I do recommend to check out thing telegra.ph does https://telegra.ph/. ",
    "sungd": "\n@benbro as i sad currently i cant achieve necessary behavior with Quill and such markup so i cant create working Blot. This example is real markup that i need to paste on image insert in quill editor, so it should be some Blot or several Blots.\nNow i have this as image Blot\n```ts\nconst FIGURE_CLASS = 'article__figure';\nconst IMAGE_WRAPPER_CLASS = 'article__image';\nexport class ImageBlockBlot extends BlockEmbed {\npublic static blotName = 'imageBlock';\n  public static tagName = 'div';\n  public static className = FIGURE_CLASS;\npublic static create(value: string): Node {\nconst figureElement = <HTMLDivElement> super.create(value);\n\n\nconst imageWrapperElement = document.createElement('div');\n\nimageWrapperElement.classList.add(IMAGE_WRAPPER_CLASS);\n\n\nconst imgElement = document.createElement('img');\n\nconst sanitizedValue = ImageBlot.sanitize(value);\n\nimgElement.setAttribute('src', sanitizedValue);\n\n\nimageWrapperElement.appendChild(imgElement);\n\nfigureElement.appendChild(imageWrapperElement);\n\nreturn figureElement;\n\n}\npublic static value(divElement: HTMLDivElement): string {\nconst imageElement = divElement.querySelector('img');\n\nif (!imageElement) return null;\n\nconst value = imageElement.getAttribute('src');\n\nreturn value;\n\n}\n}\n```\nThis renders only image part without editable comment field. And i cant understand how to add editable comment field here that will be part of ImageBlock Blot with final Blot value format { src: string, caption?: string }\n\nI've tried your way. but if i set tagName as p, the content will be strange, and i'll get many p tags.. have you fix this problem, i meet it too, when i just require core.js.. ",
    "linusx": "Thanks. The buttons are now showing up, but they are blank and don't do anything. BTW do you have a WordPress plugin to use Quill instead of TinyMCE?\n\n. It's a little difficult to follow to change the editor in WordPress, but quill.snow.css, katex.min.css, and monokai-sublime.min.css is being included. Also the following JS is being included: katex.min.js, highlight.min.js, quill.min.js. I'm not seeing any JS errors. Here is my code:\n<div id=\"standalone-container\">\n            <div id=\"toolbar-container\">\n        <span class=\"ql-formats\">\n        <select class=\"ql-font\"></select>\n        <select class=\"ql-size\"></select>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-bold\"></button>\n        <button class=\"ql-italic\"></button>\n        <button class=\"ql-underline\"></button>\n        <button class=\"ql-strike\"></button>\n        </span>\n                <span class=\"ql-formats\">\n        <select class=\"ql-color\"></select>\n        <select class=\"ql-background\"></select>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-script\" value=\"sub\"></button>\n        <button class=\"ql-script\" value=\"super\"></button>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-header\" value=\"1\"></button>\n        <button class=\"ql-header\" value=\"2\"></button>\n        <button class=\"ql-blockquote\"></button>\n        <button class=\"ql-code-block\"></button>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-list\" value=\"ordered\"></button>\n        <button class=\"ql-list\" value=\"bullet\"></button>\n        <button class=\"ql-indent\" value=\"-1\"></button>\n        <button class=\"ql-indent\" value=\"+1\"></button>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-direction\" value=\"rtl\"></button>\n        <select class=\"ql-align\"></select>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-link\"></button>\n        <button class=\"ql-image\"></button>\n        <button class=\"ql-video\"></button>\n        <button class=\"ql-formula\"></button>\n        </span>\n                <span class=\"ql-formats\">\n        <button class=\"ql-clean\"></button>\n        </span>\n            </div>\n            <div id=\"editor-container\"></div>\n        </div>\n        <script type=\"text/rocketscript\">\n          var quill = new Quill('#editor-container', {\n            modules: {\n              formula: true,\n              syntax: true,\n              toolbar: '#toolbar-container'\n            },\n            placeholder: 'Compose an epic...',\n            theme: 'snow'\n          });\n        </script>. I was finally able to get it to show the toolbar. Thanks for the help. Now I'm trying to save it to the DB. Do you have examples of getting the formatted html to save it to the database?. ",
    "pravinpokharkar": "You need to import the quill theme CSS and core CS on your own. Import the CSS Files in your CSS/scss or If you are using angular+cli add them to Styles in the angular CLI json. Or simply load them in your index.HTML. check my demo repo for an example put: \n@import '~quill/dist/quill.core.css'; \n@import '~quill/dist/quill.bubble.css'; \n@import '~quill/dist/quill.snow.css'; \nat the beginning of your styles.(s)css to get the quill styles globally or only in the (s)css file of a specific component. You need to import the quill theme CSS and core CS on your own. Import the CSS Files in your CSS/scss or If you are using angular+cli add them to Styles in the angular CLI json. Or simply load them in your index.HTML. check my demo repo for an example put: \n@import '~quill/dist/quill.core.css'; \n@import '~quill/dist/quill.bubble.css'; \n@import '~quill/dist/quill.snow.css'; \nat the beginning of your styles.(s)css to get the quill styles globally or only in the (s)css file of a specific component. ",
    "Cyrus-d": "Yes, it works.\nthank you,\n. Yes, it works.\nthank you,\n. The answer is parchment off course :). ",
    "re1naldo": "@jhchen I don\u2019t understand that example. Where do you place that CSS? Should I also create formats/font directory in the same location as quill.js?. @jhchen I don\u2019t understand that example. Where do you place that CSS? Should I also create formats/font directory in the same location as quill.js?. ",
    "jimchild49": "@jhchen awesome editor but... why it's necessary to rewrite all the toolbar buttons and selects as html when you just need to set some custom fonts families or fonts sizes, wouldn't be easy to just allow something like : \n```\ntoolbar: [\n       [{'size':  ['12px', '16px', '18px' ....] }]\n       [{ 'color': [] }, { 'background': [] }],\n       ['bold', 'italic', 'underline', 'strike'],\n       [{ 'align': [] }],\n]\n``. @jhchen I've seen this before, but am talking about when you add custom fonts family or custom fonts sizes, if you use the toolbar as an array you won't be able to specify custom font sizes (like 12, 11, 12, 14, 16, 18...), and you will be obligated to use something liketoolbar: '#toolbar'` and put all the toolbar buttons including bold, underline, link etc.... as html. @jhchen thank you for your explanation, it would be useful to add a note about that to the documentation, I didn't know that we can just use css to replace labels, when I saw the labels 'Normal' before I thought it's a bug and it's not possible to add sizes as array... now I understand better. Here is how to do in case someone wants to go this way : \n```\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"12px\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"12px\"]::before {\n  content: '12px';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"16px\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"16px\"]::before {\n  content: '16px';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"18px\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"18px\"]::before {\n  content: '18px';\n}\n```. ",
    "newbaner": "I don't know how quill's cursor works, but the jquery.validator fails after cursor blur. So,I try to add a configuration item to the jquery.validator:\n onfocusout: function(element){\n                   return false;\n                },\nIt's well!. ",
    "Wattos": "@cutteroid I have also ran into the issue. In the past (with CKEditor) I have just inserted a zero width space after the blob (\u200b) to fix the issues. This actually worked quite well!\nDo you think it would be possible to insert a zero width space \u200b if the cursor is exactly after or before the blob?. ",
    "thienanle": "@Wattos how were you able to insert a zero width space after a blob?. ",
    "rywall": "@jhchen Are you sure this is fixed? I updated the example to Quill 1.3.0 and it still exhibits the same behaviour. I can't use the arrow keys to move past the EmbedBlot and then start typing.\nhttps://codepen.io/anon/pen/MoMrva. ",
    "brianbest": "Hey, @jhchen I'm facing a similar problem here in 1.3.2. I tried running the example code that @danielschwartz provided running the latest version of Quill and I noticed that it's also showing the same issue as described in the ticket. Would you have any words of wisdom of how the example could be fixed? \nHere's my fork running on 1.3.2 \nhttps://codepen.io/brianbest/pen/mBEGQV. Boom! That's great thank you @jhchen !. ",
    "jennasalau": "For anyone else with this issue.. here was our hack work around for now.\n```\n/*\n * Applies accessibility to a quill editor\n * TODO: Deprecate this method once this issue is resolved (https://github.com/quilljs/quill/issues/1173)\n * @param {object}      editor      - A Quill editor instance\n /\napplyAccessibilityHacks(editor) {\n// Get ref to the toolbar, its not available through the quill api ughh\nconst query = editor.container.parentElement.getElementsByClassName('ql-toolbar');\nif (query.length !== 1) {\n    // No toolbars found OR multiple which is not what we expect either\n    return;\n}\n\nconst toolBar = query[0];\n\n// apply aria labels to base buttons\nconst buttons = toolBar.getElementsByTagName('button');\nfor (let i = 0; i < buttons.length; i++) {\n    const button = buttons[i];\n    const className = button.getAttribute('class').toLowerCase();\n\n    if (className.indexOf('bold') >= 0) {\n        button.setAttribute('aria-label', 'Toggle bold text');\n    } else if (className.indexOf('italic') >= 0) {\n        button.setAttribute('aria-label', 'Toggle italic text');\n    } else if (className.indexOf('underline') >= 0) {\n        button.setAttribute('aria-label', 'Toggle underline text');\n    } else if (className.indexOf('blockquote') >= 0) {\n        button.setAttribute('aria-label', 'Toggle blockquote text');\n    } else if (className.indexOf('list') >= 0 && button.value === 'ordered') {\n        button.setAttribute('aria-label', 'Toggle ordered list');\n    } else if (className.indexOf('list') >= 0 && button.value === 'bullet') {\n        button.setAttribute('aria-label', 'Toggle bulleted list');\n    }\n}\n\n// Make pickers work with keyboard and apply aria labels\n//FIXME: When you open a submenu with the keyboard and close it with the mouse by click somewhere else, the menu aria-hidden value is incorrectly left to `false`\nconst pickers = toolBar.getElementsByClassName('ql-picker');\nfor (let i = 0; i < pickers.length; i++) {\n    const picker = pickers[i];\n\n    const label = picker.getElementsByClassName('ql-picker-label')[0];\n    const optionsContainer = picker.getElementsByClassName('ql-picker-options')[0];\n    const options = optionsContainer.getElementsByClassName('ql-picker-item');\n\n    label.setAttribute('role', 'button');\n    label.setAttribute('aria-haspopup', 'true');\n    label.setAttribute('tabindex', '0');\n\n    if (i === 0) {\n        // HACK ALERT\n        // This is our size select box.. Works for us as we only have the one drop box\n        label.setAttribute('aria-label', 'Font Size');\n    }\n\n    optionsContainer.setAttribute('aria-hidden', 'true');\n    optionsContainer.setAttribute('aria-label', 'submenu');\n\n    for (let x = 0; x < options.length; x++) {\n        const item = options[x];\n        item.setAttribute('tabindex', '0');\n        item.setAttribute('role', 'button');\n\n        // Read the css 'content' values and generate aria labels\n        const size = window.getComputedStyle(item, ':before').content.replace('\\\"', '');\n        item.setAttribute('aria-label', size);\n        item.addEventListener('keyup', (e) => {\n            if (e.keyCode === 13) {\n                item.click();\n                optionsContainer.setAttribute('aria-hidden', 'true');\n            }\n        });\n    }\n\n    label.addEventListener('keyup', (e) => {\n        if (e.keyCode === 13) {\n            label.click();\n            optionsContainer.setAttribute('aria-hidden', 'false');\n        }\n    });\n\n}\n\n}\n```. ",
    "saitai0802": "I have the same issues as well... any solutions?. 0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',\n1 verbose cli   'C:\\Users\\user2\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'build' ]\n2 info using npm@5.3.0\n3 info using node@v6.11.2\n4 verbose run-script [ 'prebuild', 'build', 'postbuild' ]\n5 info lifecycle quill@1.3.1~prebuild: quill@1.3.1\n6 info lifecycle quill@1.3.1~build: quill@1.3.1\n7 verbose lifecycle quill@1.3.1~build: unsafe-perm in lifecycle true\n8 verbose lifecycle quill@1.3.1~build: PATH: C:\\Users\\user2\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Users\\user2\\Documents\\investment-sys\\node_modules\\quill\\node_modules.bin;C:\\Users\\user2\\Documents\\investment-sys\\node_modules.bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\nodejs\\;C:\\Users\\user2\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\user2\\AppData\\Local\\atom\\bin;C:\\Users\\user2\\AppData\\Roaming\\npm;C:\\Users\\user2\\AppData\\Local\\GitHubDesktop\\bin\n9 verbose lifecycle quill@1.3.1~build: CWD: C:\\Users\\user2\\Documents\\investment-sys\\node_modules\\quill\n10 silly lifecycle quill@1.3.1~build: Args: [ '/d /s /c',\n10 silly lifecycle   'webpack --config _develop/webpack.config.js; rm dist/quill.core dist/quill.bubble dist/quill.snow;' ]\n11 silly lifecycle quill@1.3.1~build: Returned: code: 1  signal: null\n12 info lifecycle quill@1.3.1~build: Failed to exec build script\n13 verbose stack Error: quill@1.3.1 build: webpack --config _develop/webpack.config.js; rm dist/quill.core dist/quill.bubble dist/quill.snow;\n13 verbose stack Exit status 1\n13 verbose stack     at EventEmitter. (C:\\Users\\user2\\AppData\\Roaming\\npm\\node_modules\\npm\\lib\\utils\\lifecycle.js:289:16)\n13 verbose stack     at emitTwo (events.js:106:13)\n13 verbose stack     at EventEmitter.emit (events.js:191:7)\n13 verbose stack     at ChildProcess. (C:\\Users\\user2\\AppData\\Roaming\\npm\\node_modules\\npm\\lib\\utils\\spawn.js:40:14)\n13 verbose stack     at emitTwo (events.js:106:13)\n13 verbose stack     at ChildProcess.emit (events.js:191:7)\n13 verbose stack     at maybeClose (internal/child_process.js:891:16)\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n14 verbose pkgid quill@1.3.1\n15 verbose cwd C:\\Users\\user2\\Documents\\investment-sys\\node_modules\\quill\n16 verbose Windows_NT 10.0.14393\n17 verbose argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\user2\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"build\"\n18 verbose node v6.11.2\n19 verbose npm  v5.3.0\n20 error code ELIFECYCLE\n21 error errno 1\n22 error quill@1.3.1 build: webpack --config _develop/webpack.config.js; rm dist/quill.core dist/quill.bubble dist/quill.snow;\n22 error Exit status 1\n23 error Failed at the quill@1.3.1 build script.\n23 error This is probably not a problem with npm. There is likely additional logging output above.\n24 verbose exit [ 1, true ]. When I tried to install those dependence, I got this error.\nnpm install\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.2 (node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}). ",
    "laszlo-tenki": "Same here. No wonder it doesn't find the webpack.config.js file as the entire _develop directory is missing.\nError: Cannot find module '/Users/msh/Documents/projects/mindscope/node_modules/quill/_develop/webpack.config.js'\nI installed Quill as a node module (current, 1.3.6) with a simple npm i quill --save.\nIs the _develop directory supposed to be in there?\nAnyway, copied the directory with files from the repo, did an nom install and now this:\n``\nTypeError: Cannot destructure propertycreateHash` of 'undefined' or 'null'.\n    at Object. (/Users/msh/Documents/projects/mindscope/node_modules/quill/node_modules/mini-css-extract-plugin/dist/index.js:26:44)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at Object. (/Users/msh/Documents/projects/mindscope/node_modules/quill/node_modules/mini-css-extract-plugin/dist/cjs.js:3:18)\n    at Module._compile (module.js:652:30)\n```\nIt would be nice if the npm module would build normally.. ",
    "JoenZhu": "@jhchen both the cdn and npm install are v1.1.6. ",
    "bsunderhus": "Same happening with me. I got a custom embeded and the cursor goes to the end of the line \n\n\ndon't mind the react render \njavascript\nclass Placeholder extends Embed {\n  static blotName = 'chip'\n  static tagName = 'span'\n  static className = 'placeholder'\n  static create (value) {\n    const node = super.create(value)\n    node.setAttribute('contentEditable', false)\n    render(<Chip label={value}/>, node)\n    return node\n  }\n  static value (node) {\n    const chip = node.querySelector('.md-chip-text')\n    if (!chip) return null\n    return chip.innerHTML\n  }\n}\nI actually \"solved\" by inserting a blank space everytime the embeded is inserted\njavascript\nhandleChipClick = (text) => {\n    const {index} = quill.getSelection() || {index: 0}\n    quill.insertEmbed(index, 'chip', text, Quill.sources.USER)\n    quill.insertText(index + 1, ' ', Quill.sources.SILENT)\n  }\n. Same happening with me. I got a custom embeded and the cursor goes to the end of the line \n\n\ndon't mind the react render \njavascript\nclass Placeholder extends Embed {\n  static blotName = 'chip'\n  static tagName = 'span'\n  static className = 'placeholder'\n  static create (value) {\n    const node = super.create(value)\n    node.setAttribute('contentEditable', false)\n    render(<Chip label={value}/>, node)\n    return node\n  }\n  static value (node) {\n    const chip = node.querySelector('.md-chip-text')\n    if (!chip) return null\n    return chip.innerHTML\n  }\n}\nI actually \"solved\" by inserting a blank space everytime the embeded is inserted\njavascript\nhandleChipClick = (text) => {\n    const {index} = quill.getSelection() || {index: 0}\n    quill.insertEmbed(index, 'chip', text, Quill.sources.USER)\n    quill.insertText(index + 1, ' ', Quill.sources.SILENT)\n  }\n. ",
    "talik077": "I agree. I am trying too to set matcher do clean clipboard styling but I can't get any success. \nCould you show us please an example of how doing this? \nthis is what I tried: \nvm.quillEditor.clipboard.addMatcher(Node.TEXT_NODE, function (node) {\n                        return new Delta().insert(node.data);\n });\nThanks!. ",
    "ryanhaney": "How about this?\nhttps://gist.github.com/ryanhaney/d4d205594b2993224b8ad111cebe1a13\n```javascript\nimport Quill from 'quill'\nconst Clipboard = Quill.import('modules/clipboard')\nconst Delta = Quill.import('delta')\nclass PlainClipboard extends Clipboard {\n  onPaste (e) {\n    e.preventDefault()\n    const range = this.quill.getSelection()\n    const text = e.clipboardData.getData('text/plain')\n    const delta = new Delta()\n    .retain(range.index)\n    .delete(range.length)\n    .insert(text)\n    const index = text.length + range.index\n    const length = 0\n    this.quill.updateContents(delta, 'silent')\n    this.quill.setSelection(index, length, 'silent')\n    this.quill.scrollIntoView()\n  }\n}\nexport default PlainClipboard\n```. How about this?\nhttps://gist.github.com/ryanhaney/d4d205594b2993224b8ad111cebe1a13\n```javascript\nimport Quill from 'quill'\nconst Clipboard = Quill.import('modules/clipboard')\nconst Delta = Quill.import('delta')\nclass PlainClipboard extends Clipboard {\n  onPaste (e) {\n    e.preventDefault()\n    const range = this.quill.getSelection()\n    const text = e.clipboardData.getData('text/plain')\n    const delta = new Delta()\n    .retain(range.index)\n    .delete(range.length)\n    .insert(text)\n    const index = text.length + range.index\n    const length = 0\n    this.quill.updateContents(delta, 'silent')\n    this.quill.setSelection(index, length, 'silent')\n    this.quill.scrollIntoView()\n  }\n}\nexport default PlainClipboard\n```. My snippet strips all formatting when content is pasted.\nI suspect vue-quill-editor is doing something not desired.\nCheck out this jsfiddle: https://jsfiddle.net/hmfgvwx5/. My snippet strips all formatting when content is pasted.\nI suspect vue-quill-editor is doing something not desired.\nCheck out this jsfiddle: https://jsfiddle.net/hmfgvwx5/. My bad. Updated: https://jsfiddle.net/hmfgvwx5/1/. My bad. Updated: https://jsfiddle.net/hmfgvwx5/1/. I couldn't get the example to work, so I created this. Hopefully it helps someone else.\nhttps://gist.github.com/ryanhaney/d4d205594b2993224b8ad111cebe1a13\n```javascript\nimport Quill from 'quill'\nconst Clipboard = Quill.import('modules/clipboard')\nconst Delta = Quill.import('delta')\nclass PlainClipboard extends Clipboard {\n  onPaste (e) {\n    e.preventDefault()\n    const range = this.quill.getSelection()\n    const text = e.clipboardData.getData('text/plain')\n    const delta = new Delta()\n    .retain(range.index)\n    .delete(range.length)\n    .insert(text)\n    const index = text.length + range.index\n    const length = 0\n    this.quill.updateContents(delta, 'silent')\n    this.quill.setSelection(index, length, 'silent')\n    this.quill.scrollIntoView()\n  }\n}\nexport default PlainClipboard\n```. I couldn't get the example to work, so I created this. Hopefully it helps someone else.\nhttps://gist.github.com/ryanhaney/d4d205594b2993224b8ad111cebe1a13\n```javascript\nimport Quill from 'quill'\nconst Clipboard = Quill.import('modules/clipboard')\nconst Delta = Quill.import('delta')\nclass PlainClipboard extends Clipboard {\n  onPaste (e) {\n    e.preventDefault()\n    const range = this.quill.getSelection()\n    const text = e.clipboardData.getData('text/plain')\n    const delta = new Delta()\n    .retain(range.index)\n    .delete(range.length)\n    .insert(text)\n    const index = text.length + range.index\n    const length = 0\n    this.quill.updateContents(delta, 'silent')\n    this.quill.setSelection(index, length, 'silent')\n    this.quill.scrollIntoView()\n  }\n}\nexport default PlainClipboard\n``. Is there a way to blockenter`? Code example? I too wish to have a single-line editor, but there doesn't seem to be a way to implement this cleanly.. ",
    "sandroden": "@ryanhaney I have tried your solution but probably didn't understand how to apply, the toolbar and the editro disappeard... I'm from whithin vuejs so I initialized as follows:\n```js\nimport Quill from 'quill'\nimport VueQuillEditor from 'vue-quill-editor'\nQuill.register('modules/clipboard', PlainClipboard, true)\nVue.use(VueQuillEditor, {\n  format: ['bold', 'italic', 'list', 'header'],\n  theme: 'snow',\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'list'],\n      [{ list: 'bullet' }],\n    ],\n  },\n})\n```\nand the editor that was as this:\n\nturned into this:\n\nDoes this say anything to you? does yout snippet also strip bold and italics ofr just colors and fonts? I'd rather keep bold and italics as thoso are legitimate in my contest.\n. On Thu, Jan 03, 2019 at 10:06:03AM -0800, ryanhaney wrote:\n\nMy snippet strips all formatting when content is pasted.\nI suspect vue-quill-editor is doing something not desired.\nCheck out this jsfiddle: [1]https://jsfiddle.net/hmfgvwx5/\n\nMmh, this fiddleseems totally empty... didn't youforget saving?\nsandro\n*:-)\n. ",
    "VaelVictus": "2019 Developers: Your best shot is here https://codepen.io/mackermedia/pen/gmNwZP\nQuill really is great. But, from the blog:\n\nQuill aims to be the defacto rich text editor for the web.\n\nYet the document model you are so proud of cannot simply produce a <br> with a shift-enter. Please reconsider this feature.. ",
    "LouisWayne": "@mdoaie, could you post an example code for the solution please?. @jhchen is it safe to remove HTML dom node by Jquery (or vanilla JS) - instead of using quill.removeFormat()?  Also, if I add an event listener in blot's constructor, is it properly removed when the blot gets removed (worrying about memory leak)?. My mistake - the code fileInput.value = ''; is necessary to catch the 'change' event properly.. Have you found the solution for this? I am having the same problem... I found the solution here: https://github.com/quilljs/quill/issues/1008. ",
    "student020341": "This is still the only relevant google result for this issue, so I thought I would share my solution in case @LouisWayne and any future eyes are still in need. \n```\n // create your style parchment thing\n    let Parchment = Quill.import('parchment');\n    let fsStyle = new Parchment.Attributor.Style('fs', 'font-size', {\n        scope: Parchment.Scope.INLINE\n    });\n    Quill.register(fsStyle);\n// I created a font size slider to have a range of values without a whitelist / enumeration\nlet fsSlider = editorContainer.querySelector(\"#q-font-slider\");\nfsSlider.addEventListener(\"change\", () => {\n    // not necessary, this is my idea for making the slider go away after you pick a value\n    fsSlider.parentElement.classList.toggle('hidden');\n\n    let range = quill.getSelection();\n    if (range) {\n        // important - the value you set here is whatever you aliased it as with the parchment thing.\n        // I called mine fs just to see if a custom identifier could be used - and it can!\n        // doing this via parchment also preserves the inline font-size attribute when you export the html :)\n        quill.formatText(range.index, range.length, {\n            'fs': `${fsSlider.value}px`\n        });\n    }\n});\n\n```. ",
    "luizoliveira-hotmart": "In react-quill, i do this:\n```\nconst Parchment = ReactQuill.Quill.import('parchment');\nclass IndentAttributor extends Parchment.Attributor.Style {\n  canAdd() {\n    return true;\n  }\n}\nconst IndentStyle = new IndentAttributor('indent', 'margin-left');\n```\nOverride canAdd function, return always true, so i can put any 'margin-left' value;\nIt works for any other Attributors. In react-quill, i do this:\n```\nconst Parchment = ReactQuill.Quill.import('parchment');\nclass IndentAttributor extends Parchment.Attributor.Style {\n  canAdd() {\n    return true;\n  }\n}\nconst IndentStyle = new IndentAttributor('indent', 'margin-left');\n```\nOverride canAdd function, return always true, so i can put any 'margin-left' value;\nIt works for any other Attributors. ",
    "amitguptagwl": "This is the issue with highlight js. I have reported there.. In addition to above issue;\nIssue 1\nWhen I copy paste some HTML or some text from one place to another place within the editor, it applies default font style.\n\nopen document\ncopy 1st paragraph and unordered list.\ngoto quilljs.com\npaste in editor. It looses font style for text in unordered list.\napply some font style to this text again.\ncut the whole text and paste.\nagain it looses the font style.\n\nIssue2\nSome other issue related to font style can also be reproduced on quilljs.com\n1. Go to quilljs.com\n2. apply some font, say roboto, to some words in first paragraph\n3. Select and cut the complete paragraph\n4. again paste\nExpected Behaviour: Paragraph with previous formatting should be pasted.\nNote: The issue doesn't occur when you try 2nd time. So fresh load the page.. Created 2 separated issues. mentioned in 2nd comment.\nTrying to create demo for 1st issue. But unfortunately when I click on any drop down box, text is not selected anymore. \nhttps://jsfiddle.net/ry2dor1v/\nSome weired behaviour. Should I create another card for this issue as well?. Yes original problem still exist. But I am not able to demo it because drop down are not working in above example.. I have recorded this video. Have a look. If it is not clear, I'll upload the video and share the link.\nAs you can see in the recording\n1. it lost the font style for stubbydb init <workspace-name > and other commands text\n2. When I tried to select the font to give new font style, selection disappear (which was working when I tried few days back). However, eventually I realised that it disappears but still working. So I gave new font style.\n3. Ctrl+A --> Ctrl+X --> Ctrl+V\n4. Again font style lost for the same text.\n. No these are 2 different issues. In this issue font style is not preserved after copy paste (from the editor to the editor). While in the issue #1201, font style is preserved but it is automatically apply on more text after paste (till the end of paragraph). I'll create the video of that separately and put it in comment.. ",
    "dmarkow": "It seems to affect anything with a dropdown in the toolbar (Font, Size, horizontal alignment, text color, background color, etc.) -- the \"default\" option in the dropdown is always pre-selected rather than the actual current option -- so it doesn't let you click the default.\nFor example, go to http://quilljs.com/docs/formats type something in and center align it -- when you click to put it back on left alignment, the dropdown already has the \"left\" option in blue thinking it's already set to that and clicking it does nothing, leaving the text stuck in center alignment.. ",
    "eamodio": "The use-case is to focus and pre-select all the text in an input to allow the user easy replacement (i.e. adding a new item to a list or something along those lines). And with having the toolbar automatically pop up makes it a jarring experience -- as the user pressed an add button (or the like), but now all of a sudden a toolbar pops up. If source isn't a good signal (though feels like it could be, though agree that closing the toolbar should probably happen regardless), maybe there could be a specific option to setSelection that avoids the toolbar opening?. We worked around this (with the bubble theme) by trapping mousedown on .ql-formats button and executing preventDefault() to stop the buttons from taking focus on click. It seems like something that the bubble theme would ideally handle itself.. @abinay I haven't made any changes in the quill code -- just modified our application code to add eventlisteners to the buttons.. @jhchen will there be a 1.3.1 (or something) release with this fix coming very soon? Would love to not maintain a fork if so (this is a blocker for us). @Natim I haven't forked it (since the next release is nice and close), but the above commit should have fixed it. Doh -- looks like this is a duplicate of https://github.com/quilljs/quill/issues/1594. ",
    "adfaure": "Thanks !. ",
    "matteobelfiore": "@jhchen which is the correct configuration then to have the pop-ups visible even when near the bounding rect or with adjacent elements? It would be good to know.. @jhchen I do understand z-indexs, what I am trying to understand is why #1126 is not considered a bug. How am I supposed to show the bubble when I am selecting text which is close to the border or the element? Is there a built-in solution for that?. ",
    "montlebalm": "\nsimilar layer to where the formats config is considered normally\n\nI don't know the codebase well enough to interpret what you mean. If you can point me to the right file/method I will resubmit a PR.. I'd like to convert formatted text to Markdown on paste. I'd like to copy bold text and paste it as **bold**. Here's an example:\n\nBrowse to https://codepen.io/montlebalm/pen/bgQWoz and open the browser console\nCopy addMatcher(String: selector, (Node: node, Delta: delta) => Delta) from https://quilljs.com/docs/modules/clipboard/#addmatcher and paste into Quill\nVerify Quill generates 25 distinct \"top-level\" deltas and none of them include code formatting.\n\nI understand Quill is separating the deltas by attributes. In this case, I'm going to see that the associated node has a fontFamily that includes \"monospace\", remove the current attributes, and add code: true. The deltas can be combined now that the attributes are the same, but my matcher can only see one at a time. The Markdown translation would wind up wrapping each delta with backticks. \nYou can achieve my proposal manually by adding:\n```javascript\nlet pasteDelta = null;\nquill.clipboard.addMatcher('*', (node, delta) => {\n  if (node.parentElement.classList.contains('ql-clipboard')) {\n    if (!pasteDelta) pasteDelta = new Delta();\n    pasteDelta = pasteDelta.concat(delta);\nif (!node.nextSibling) {\n  /* \n   * All the deltas have been accounted for and be processed\n   * - combine deltas\n   * - process as one\n   */\n}\n\n}\nreturn delta;\n});\n```\nQuill could expose an option like this that would make it easier to do complex transforms of pasted text.. > I'm assuming the reason you are listening on text-change and querying getSelection instead of just listening on selection-change is you want to get silent events?\nI'm listening to \"text-change\" so I can react to specific characters being typed (e.g., \"@\"). I can't listen to \"selection-change\" exclusively since it doesn't fire on (all) user typing.\nI need to grab all the text from the start of the input up to the cursor including what was just typed. I was hoping to avoid making the \"text-change\" handler async.. ",
    "rokkamokka": "This is actually a dupe of #1191, sorry. Just noticed that the ES6 override in package.json breaks importing and using dist/quill.js (even without the broken custom theme), so I wouldn't recommend going that route.\nError thrown by chrome 55 on windows 10 after importing quill with es6 override:\nmain.bundle-a909cb5d07.js:9049 Uncaught TypeError: Cannot set property 'Quill' of undefined\n    at webpackUniversalModuleDefinition (main.bundle-a909cb5d07.js:9049)\n    at execute (main.bundle-a909cb5d07.js:9049)\n    at c (main.bundle-a909cb5d07.js:1)\n    at c (main.bundle-a909cb5d07.js:1)\n    at c (main.bundle-a909cb5d07.js:1)\n    at f (main.bundle-a909cb5d07.js:1)\n    at main.bundle-a909cb5d07.js:1\n    at main.bundle-a909cb5d07.js:43296\n    at main.bundle-a909cb5d07.js:1\n    at main.bundle-a909cb5d07.js:43295\nwebpackUniversalModuleDefinition @ main.bundle-a909cb5d07.js:9049\nexecute @ main.bundle-a909cb5d07.js:9049\nc @ main.bundle-a909cb5d07.js:1\nc @ main.bundle-a909cb5d07.js:1\nc @ main.bundle-a909cb5d07.js:1\nf @ main.bundle-a909cb5d07.js:1\n(anonymous) @ main.bundle-a909cb5d07.js:1\n(anonymous) @ main.bundle-a909cb5d07.js:43296\n(anonymous) @ main.bundle-a909cb5d07.js:1\n(anonymous) @ main.bundle-a909cb5d07.js:43295. So, through further trial and error, we've found something that seems to work.\nThe problem is two fold:\n1. Some of the Quill js files are ES6, and some files are CommonJS. Furthermore, all of them (even the ES6 ones) have \"format cjs\", which also tricks jspm/systemjs.\n2. jspm 0.16 has defaultJSExtension = true, which causes problems with the ui/icons.js when it requires .svg, since systemjs will then try to load .svg.js.\nBoth of these can be fixed with a custom package declaration in the systemjs config file:\npackages: {\n    \"quill\": {\n      \"defaultExtension\": \"js\",\n      \"format\": \"es6\",\n      \"meta\": {\n        \"dist/*\": {\n          \"format\": \"cjs\"\n        },\n        \"ui/icons.js\": {\n          \"format\": \"cjs\"\n        },\n        \"*.svg\": {\n          \"loader\": \"svg\"\n        }\n      }\n    }\n  },\nWe tell systemjs that everything is es6, except dist/ and ui/icons.js (probably needs more entries, but these two are enough to get a custom theme to work at least). We use defaultExtension to respect imports that specify other extensions (.svg). Finally, we tell it to load .svg files using the svg plugin. Make sure the svg plugin is installed too (jspm install svg).\nIn the custom theme itself, we can't just import everything with ES6 either, some things seem to need to be Quill.import()ed to work.\n```\nimport Emitter from 'quill/core/emitter';\nimport BaseTheme, {BaseTooltip} from 'quill/themes/base';\nimport {Range} from 'quill/core/selection';\nimport Quill from 'quill';\nlet LinkBlot = Quill.import('formats/link');\nlet icons = Quill.import('ui/icons');\n```\nAfter doing all this, custom themes transpile without errors and seem to work after being registered. :). We discovered another small kink with the above solution: the dropdown.svg icon for pickers was not loaded correctly. It showed up in the HTML as the string \"[object Element]\".\nThe fix is easy, however. In our systemsjs config, change the loader for \"*.svg\" from \"svg\" to \"text\" (and make sure to jspm install text so you have the necessary plugin).. ",
    "SilverSting": "@jhchen thanks for your suggestion, but I'm not sure if we are on the same page.\nPlease note I need to work with inline styles for sizes (i.e. <span style=\"font-size:10px\"></span>).\njavascript\nvar styleSize = Quill.import('attributors/style/size');\nstyleSize.whitelist = ['10px', '18px', '32px'];\nWhat I'm stuck at is how to render these size options in the toolbar without using my own toolbar html. Is it possible to render the size options as below with just configuration?\nhtml\n<select class=\"ql-size\">\n  <option value=\"10px\">Small</option>\n  <option selected=\"selected\">Normal</option>\n  <option value=\"18px\">Large</option>\n  <option value=\"32px\">Huge</option>\n</select>\nI was kind of expecting something like this:\njavascript\nmodules: {\n  toolbar: [\n    [ {'size': [{'10px':'Small'}, {'':'Normal'}, {'18px':'Large'}, {'32px':'Huge'}]} ],\n    ...\n  ]\n}\nIf this is not supported, then I will just look into building toolbar html.\nThanks!. ",
    "nikohosn": "@2guti2 how are you referencing Quill in react? I am attempting to define some custom font sizes in my react component and it is not working.\ncomponentWillMount() {\n    const SizeStyle = ReactQuill.import('attributors/style/size');\n    ReactQuill.register(SizeStyle, true);\n  }\n. ",
    "valentinbdv": "Same thing here! I don't want to set a whitelist because I need my user to enter any font size he wants.. ",
    "smura": "I found a solution.\nDetail of this issue\nBecause of Node.cloneNode does not work correctly in IE11, so background-color of original node will be corrupted.\nNode.cloneNode does not work correctly in IE11\n\nProof of concept is here : https://jsfiddle.net/smura/7uf45wjn/\nLink for IE11 : https://jsfiddle.net/smura/7uf45wjn/show/\n\nWhy Node.cloneNode causes this issue ?\nShadowBlot of quilljs/parchment uses Node.cloneNode and Block of quilljs/quill uses ShadowBlot.clone.\nWhen the splited node by Node.cloneNode is updated, the background-color of original node will be corrupted. (By initalizing background-color of next node)\nSolution\nClone by DOMParser if Node.cloneNode is broken. quilljs/parchment should be updated.\n```TypeScript\nconst IS_CLONE_NODE_BROKEN = (function() {\n  const original = document.createElement('div');\n  original.style.backgroundColor = '#ff5';\nconst clone = original.cloneNode(false);\n  // This will overwrite background color of the \"original\" in IE11.\n  clone.style.backgroundColor = '';\nreturn !original.style.backgroundColor;\n})();\nfunction safeClone(source) {\n  let clone = source.cloneNode(false);\n  if (IS_CLONE_NODE_BROKEN) {\n    const sandbox = new DOMParser()\n      .parseFromString(clone.outerHTML, 'text/html');\n    clone = sandbox.body.childNodes[0];\n  }\n  return clone;\n}\n```\n. Hi @gurkerl83\nI'm glad to hear your praising.\nUnfortunately, it seems IE 11 is not currently supported. (See https://github.com/quilljs/quill/issues/2239#issuecomment-412236210)\nSince IE 11 is a deprecated browser, I think that it is a reasonable decision.. I found a solution to this issue with IE11. The following CSS will fix this issue.\n```CSS\n.ql-editor::before {\n    visibility: hidden;\n    color: rgba(0, 0, 0, .6);\n    content: attr(data-placeholder);\n    font-style: italic;\n    left: 15px;\n    pointer-events: none;\n    position: absolute;\n    right: 15px;\n  }\n.ql-editor.ql-blank::before {\n    visibility: visible;\n  }\n```\nTry this with IE11 and IME : https://jsbin.com/kujavudoki/1/edit?html,css,js,output\nI think this issue is caused by changing the DOM tree with psudo-element \"::before\". If psudo-element is always in the DOM tree, IME will be correct.. This issue occurs here.\nhttps://github.com/quilljs/quill/blob/1.3.6/core/selection.js#L67-L73\nDetail of this issue\n\nThe compositionend handler (L65) is started.\nif (this.cursor.parent) (L67) is true, so setTimeout() (L70) is called.\nThe compositionend handler is exited.\nAnd another thread starts before setNativeRange() (L71) will be called.\n\n\nspan.ql-cursor element is removed from document. (I don't know why)\nspan.ql-cursor is same as this.cursor (L67) and range.startNode (L71).\nNow this.cursor has no parent. (see L67)\n\n\nsetNativeRange() (L71) is called.\nrange.setStart(startNode, startOffset); (L291) is called.\nBut startNode is already removed from document. So the following error is occurred : The given range isn't in document.\n\nSolution\nIn setTimeout() thread, check again whether this.cursor has a parent or not.\nJavaScript\n      if (this.cursor.parent) {\n        const range = this.cursor.restore();\n        if (!range) return;\n        setTimeout(() => {\n          if (this.cursor.parent) {  // Check again, because it's new thread.\n            this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n          }\n        }, 1);\n      }\n. Try this : https://codepen.io/anon/pen/ejbGRE\n\nChange or delete SizeStyle.whitelist.\nChange label of toolbar by CSS.. Solution\n\nhttps://codepen.io/anon/pen/qyLyqz\nThe following code solves this problem.\nJavaScript:\nJavaScript\n$(document).on('compositionstart', '.ql-editor', function() {\n  $(this).addClass('ql-composition');\n});\n$(document).on('compositionend', '.ql-editor', function() {\n  $(this).removeClass('ql-composition');\n});\nCSS:\nCSS\n.ql-editor.ql-composition::before {\n  visibility: hidden;\n}\nNote\nI recommend do not use display: none insted of visibility: hidden. The issue #1453 will get worse.. Note\nMutationObserver sometimes produces strange MutationRecord on IE11.\nThat MutationRecord has following properties:\n\nWith characterData as type\nWith newly created CharacterData node as target\nThat target node has no __blot property\nOld CharacterData node with __blot is removed by document\n\n\n\nScrollBlot can not find existing TextBlot, so ContainerBlot handles the MutationRecord. But ContainerBlot ignores the MutationRecord with type characterData.\n. @benbro As far as I know, IE11 is one of supported browsers in the README.\n\n. Self-solved : There is no IE11 support in correct image. The avobe image with IE11 is old one.\nIt seems quill.js v1.3.6 supports IE11, and v2.0.x does not.\n\nOld image cached by github contains IE11\nBut correct image not contains IE11\n\nFIY: About anonymized image URLs\n \nThank you for your reply, benbro.. ",
    "gurkerl83": "Hi Smura, great finding, just hit the same problem. Is there any chance the solution can be integrated into quill soon. Is it possible to teach quill to use your parchment version which fixes the problem?. ",
    "candronikos": "I should have worded it better than that. I'm not building from source. Just did a npm install quill.\nI assumed that I could just require it after that. Here's the package.json file.\n{\n  \"name\": \"app\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Insert description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"browserify -t [ browserify-css ] -t [ babelify --presets [ es2015 ] ] src/index.js -o root/app.js --debug\"\n  },\n  \"author\": \"Author Name\",\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {\n    \"quill\": \"^1.1.7\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babelify\": \"^7.3.0\",\n    \"browserify\": \"^13.1.1\",\n    \"browserify-css\": \"^0.9.2\"\n  }\n}. I should have worded it better than that. I'm not building from source. Just did a npm install quill.\nI assumed that I could just require it after that. Here's the package.json file.\n{\n  \"name\": \"app\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Insert description\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"browserify -t [ browserify-css ] -t [ babelify --presets [ es2015 ] ] src/index.js -o root/app.js --debug\"\n  },\n  \"author\": \"Author Name\",\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {\n    \"quill\": \"^1.1.7\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babelify\": \"^7.3.0\",\n    \"browserify\": \"^13.1.1\",\n    \"browserify-css\": \"^0.9.2\"\n  }\n}. @ninjabiscuit What I ended up doing was cloning the quilljs repo as a submodule and building quill there. Then I just import the resulting js file.. @ninjabiscuit What I ended up doing was cloning the quilljs repo as a submodule and building quill there. Then I just import the resulting js file.. ",
    "ninjabiscuit": "@candronikos FWIW I have the same problem. Haven't found the answer in the babelify docs yet. ",
    "Quach2502": "@danielschwartz hi I have encountered the same problem when trying to make overlapping format ( which means it works at the time of formatting and extends incorrectly when refresh). I have tried the code in the above StackOverflow link and the problem is still the same. Do you solve this problem? Any suggestion/ workaround is appreciated.. ",
    "TheMightyPope": "Thanks Ben !!\nAs a followup question you might know the answer to, I'm copying a delta from one editor (The entire content), to another editor (to be inserted in the middle of that content). \nEditor 1: ABCDE\nEditor 2: 123\nResult: ABC12345DE\nTo do this, I get the delta from the second editor, Run through the delta OPS to manually remove the last newline. If I don't then I end up with it being included when inserted:\nAB123\nDE\nTo remove it, I assume the last ops is ALWAYS an Insert (since it includes the last newline), and I either remove it completely from the delta list, or I edit the 'insert\" if it's longer than 1 character.\nOnce that is done, I create a new delta, now using your answer:\n var newdelta = new Delta().retain(startIndex);\nand then I concat the modified editor 2 delta into it, like this:\n newdelta = newdelta.ops.concat(delta.ops);\nFinally, I add that to editor 1 to make the 'insertion' complete.\nIs there any better way to do all this? It seems rather prone to errors the way I'm doing it now, but?\nSorry if this is not the right place to ask this...?\n. Hmmm actually, the quill.getContents() returns just the structure, not a Delta object, and when I try to modify that with retain it fails, so not sure that'll work.\nI know the last character is always a newline because quill always inserts a newline at the end, as per documentation:\n\"All Quill documents must end with a newline character, even if there is no formatting applied to the last line. This way, you will always have a character position to apply line formatting to.\"\nI wish it wasn't so, but alas.\n. Thanks, it might very well be codepen also has this issue (surprisingly) :-). \nHowever, when my production code saves a branch with  and loads it back in (literally loading the deltas back), the same happens.  I can add it in the editor, but reloading it seems to trigger this too.\nI was just trying to use Codepen to illustrate what I'm seeing on my website.. You know, I tried just now creating a test case for this in my code, and it worked OK. So I'm going to go debug some more, and basically  write this off until I have some code that can crash, or not. CodePen coincidentally had the same bug MY code had (it seems), and not quill... I'll open another ticket if I can reproduce this. Thanks again.. ",
    "Rinktacular": "For those who are interested, I am taking a look at this issue today as a requirement for a project I am working on.  Any tips on how to include this library locally?  Not sure how to get it included into a project to let me mess around with the source code, only see how to use CDN or NPM :(. Within ./formats/image.js:line 34, there is  currently this code:\nreturn sanitize(url, ['http', 'https', 'data']) ? url : '//:0';\nadding 'data' to that array of properties, will allow for users to paste from word (or any local application) to Quill\nreturn sanitize(url, ['http', 'https', 'data', 'file']) ? url : '//:0';\nHowever, this only works in Internet Explorer.  Chrome and Firefox have security in place such that local files can not be read on the browsers.  So I am trying for a work around to that.  \nFrom what I see, a lot of sites will upload images to a local image sharing site, such as imgur, to host the image online and then reference the newly created imgur image link as the img source, which is a possible solution, but does not seem realistic for Quill to use that method of image storage.. Specifically, it seems like its line 533 in one of webpack's node_modules, yargs in yargs.js:533:18:\nif (parseFn) parseFn(exitError, parsed, output)\n. Continuing on here... exitError is null and causing a \"MODULE_NOT_FOUND\" exception.. the parseFn function looks like this.  The first conditional is what is kicking out the error exitCode 1.  It is a bit confusing because err is null and output is evaluated at an empty string:\nparseFn: (err, argv, output) => {\n\n    // arguments validation failed\n    if(err && output) {\n            console.error(output);\n            process.exitCode = 1;\n            return;\n    }\n\n    // help or version info\n    if(output) {\n            console.log(output);\n            return;\n    }\n\n    if(argv.verbose) {\n            argv[\"display\"] = \"verbose\";\n    }\n\n    var options = require(\"./convert-argv\")(yargs, argv);\n\n    function ifArg(name, fn, init) {\n            if(Array.isArray(argv[name])) {\n                    if(init) init();\n                    argv[name].forEach(fn);\n            } else if(typeof argv[name] !== \"undefined\") {\n                    if(init) init();\n                    fn(argv[name], -1);\n            }\n    }\n\n    function processOptions(options) {\n            // process Promise\n            if(typeof options.then === \"function\") {\n                    options.then(processOptions).catch(function(err) {\n                            console.error(err.stack || err);\n                            process.exit(1); // eslint-disable-line\n                    });\n                    return;\n            }\n\n            var firstOptions = [].concat(options)[0];\n            var statsPresetToOptions = require(\"../lib/Stats.js\").presetToOptions;\n\n            var outputOptions = options.stats;\n            if(typeof outputOptions === \"boolean\" || typeof outputOptions === \"string\") {\n                    outputOptions = statsPresetToOptions(outputOptions);\n            } else if(!outputOptions) {\n                    outputOptions = {};\n            }\n\n            ifArg(\"display\", function(preset) {\n                    outputOptions = statsPresetToOptions(preset);\n            });\n\n            outputOptions = Object.create(outputOptions);\n            if(Array.isArray(options) && !outputOptions.children) {\n                    outputOptions.children = options.map(o => o.stats);\n            }\n            if(typeof outputOptions.context === \"undefined\")\n                    outputOptions.context = firstOptions.context;\n\n            ifArg(\"env\", function(value) {\n                    if(outputOptions.env) {\n                            outputOptions._env = value;\n                    }\n            });\n\n            ifArg(\"json\", function(bool) {\n                    if(bool)\n                            outputOptions.json = bool;\n            });\n\n            if(typeof outputOptions.colors === \"undefined\")\n                    outputOptions.colors = require(\"supports-color\");\n\n            ifArg(\"sort-modules-by\", function(value) {\n                    outputOptions.modulesSort = value;\n            });\n\n            ifArg(\"sort-chunks-by\", function(value) {\n                    outputOptions.chunksSort = value;\n            });\n\n            ifArg(\"sort-assets-by\", function(value) {\n                    outputOptions.assetsSort = value;\n            });\n\n            ifArg(\"display-exclude\", function(value) {\n                    outputOptions.exclude = value;\n            });\n\n            if(!outputOptions.json) {\n                    if(typeof outputOptions.cached === \"undefined\")\n                            outputOptions.cached = false;\n                    if(typeof outputOptions.cachedAssets === \"undefined\")\n                            outputOptions.cachedAssets = false;\n\n                    ifArg(\"display-chunks\", function(bool) {\n                            if(bool) {\n                                    outputOptions.modules = false;\n                                    outputOptions.chunks = true;\n                                    outputOptions.chunkModules = true;\n                            }\n                    });\n\n                    ifArg(\"display-entrypoints\", function(bool) {\n                            if(bool)\n                                    outputOptions.entrypoints = true;\n                    });\n\n                    ifArg(\"display-reasons\", function(bool) {\n                            if(bool)\n                                    outputOptions.reasons = true;\n                    });\n\n                    ifArg(\"display-depth\", function(bool) {\n                            if(bool)\n                                    outputOptions.depth = true;\n                    });\n\n                    ifArg(\"display-used-exports\", function(bool) {\n                            if(bool)\n                                    outputOptions.usedExports = true;\n                    });\n\n                    ifArg(\"display-provided-exports\", function(bool) {\n                            if(bool)\n                                    outputOptions.providedExports = true;\n                    });\n\n                    ifArg(\"display-optimization-bailout\", function(bool) {\n                            if(bool)\n                                    outputOptions.optimizationBailout = bool;\n                    });\n\n                    ifArg(\"display-error-details\", function(bool) {\n                            if(bool)\n                                    outputOptions.errorDetails = true;\n                    });\n\n                    ifArg(\"display-origins\", function(bool) {\n                            if(bool)\n                                    outputOptions.chunkOrigins = true;\n                    });\n\n                    ifArg(\"display-max-modules\", function(value) {\n                            outputOptions.maxModules = +value;\n                    });\n\n                    ifArg(\"display-cached\", function(bool) {\n                            if(bool)\n                                    outputOptions.cached = true;\n                    });\n\n                    ifArg(\"display-cached-assets\", function(bool) {\n                            if(bool)\n                                    outputOptions.cachedAssets = true;\n                    });\n\n                    if(!outputOptions.exclude)\n                            outputOptions.exclude = [\"node_modules\", \"bower_components\", \"components\"];\n\n                    if(argv[\"display-modules\"]) {\n                            outputOptions.maxModules = Infinity;\n                            outputOptions.exclude = undefined;\n                            outputOptions.modules = true;\n                    }\n            }\n\n            ifArg(\"hide-modules\", function(bool) {\n                    if(bool) {\n                            outputOptions.modules = false;\n                            outputOptions.chunkModules = false;\n                    }\n            });\n\n            var webpack = require(\"../lib/webpack.js\");\n\n            Error.stackTraceLimit = 30;\n            var lastHash = null;\n            var compiler;\n            try {\n                    compiler = webpack(options);\n            } catch(err) {\n                    if(err.name === \"WebpackOptionsValidationError\") {\n                            if(argv.color)\n                                    console.error(\n                                            `\\u001b[1m\\u001b[31m${err.message}\\u001b[39m\\u001b[22m`\n                                    );\n                            else\n                                    console.error(err.message);\n                            // eslint-disable-next-line no-process-exit\n                            process.exit(1);\n                    }\n\n                    throw err;\n            }\n\n            if(argv.progress) {\n                    var ProgressPlugin = require(\"../lib/ProgressPlugin\");\n                    compiler.apply(new ProgressPlugin({\n                            profile: argv.profile\n                    }));\n            }\n\n            function compilerCallback(err, stats) {\n                    if(!options.watch || err) {\n                            // Do not keep cache anymore\n                            compiler.purgeInputFileSystem();\n                    }\n                    if(err) {\n                            lastHash = null;\n                            console.error(err.stack || err);\n                            if(err.details) console.error(err.details);\n                            process.exit(1); // eslint-disable-line\n                    }\n                    if(outputOptions.json) {\n                            process.stdout.write(JSON.stringify(stats.toJson(outputOptions), null, 2) + \"\\n\");\n                    } else if(stats.hash !== lastHash) {\n                            lastHash = stats.hash;\n                            var statsString = stats.toString(outputOptions);\n                            if(statsString)\n                                    process.stdout.write(statsString + \"\\n\");\n                    }\n                    if(!options.watch && stats.hasErrors()) {\n                            process.exitCode = 2;\n                    }\n            }\n            if(firstOptions.watch || options.watch) {\n                    var watchOptions = firstOptions.watchOptions || firstOptions.watch || options.watch || {};\n                    if(watchOptions.stdin) {\n                            process.stdin.on(\"end\", function() {\n                                    process.exit(); // eslint-disable-line\n                            });\n                            process.stdin.resume();\n                    }\n                    compiler.watch(watchOptions, compilerCallback);\n                    console.log(\"\\nWebpack is watching the files\u2026\\n\");\n            } else\n                    compiler.run(compilerCallback);\n\n    }\n\n    processOptions(options);\n\n}\n. Did a fresh pull of my Quill Fork because why not and did not change anything.. This error shows even if I do not run npm install and  bundler install on a fresh Fork pull, so it leads me to believe that my npm install is not installing correctly.  Not sure where to go from here : /. I have created a Stack Overflow post hoping to get some answers:\nStack Overflow Post. I tried running a fresh install of everything on another machine and got this same error.. After more investigation, it seems that my webpack.config.js file is not being seen by the build script:\n\nBut it is here:\n\n. running the build script manually (webpack --config _develop/webpack.config.js) executes the script but throws a lot of errors to almost every quill.js file saying:\n\nerror  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n\nfor example:\n```\nERROR in ./ui/tooltip.js\nC:\\Users\\rinktacular\\Documents\\Projects\\quill\\ui\\tooltip.js\n   1:16  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   2:40  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   3:24  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   4:61  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   5:50  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   6:53  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   7:61  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   8:57  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n   9:75  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  10:10  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  11:6   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  12:17  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  13:4   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  14:1   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  15:11  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  16:42  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  17:4   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  18:1   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  19:24  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  20:77  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  21:62  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  22:60  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  23:40  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  24:38  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  25:43  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  26:72  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  27:56  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  28:19  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  29:52  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  30:56  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  31:52  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  32:6   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  33:50  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  34:54  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  35:52  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  36:6   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  37:54  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  38:55  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  39:69  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  40:58  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  41:42  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  42:6   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  43:18  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  44:4   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  45:1   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  46:11  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  47:46  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  48:45  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  49:4   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  50:2   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  51:1   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  52:1   error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n  53:24  error  Expected linebreaks to be 'LF' but found 'CRLF'  linebreak-style\n\u2716 53 problems (53 errors, 0 warnings)\n  53 errors, 0 warnings potentially fixable with the --fix option.\n``. Based on this answer from Stack Overflow, I solved the CRLF -> LF error and get this after I manually executewebpack --config _develop/webpack.config.js`:\n$ webpack --config _develop/webpack.config.js\nHash: fba0126b05e3bf006aa7\nVersion: webpack 3.10.0\nTime: 11790ms\n           Asset     Size  Chunks                    Chunk Names\n         unit.js   643 kB       0  [emitted]  [big]  unit.js\n        quill.js   490 kB       1  [emitted]  [big]  quill.js\n   quill.core.js   360 kB       2  [emitted]  [big]  quill.core.js\n      quill.snow  3.06 kB       3  [emitted]         quill.snow\n      quill.core  3.06 kB       4  [emitted]         quill.core\n    quill.bubble  3.06 kB       5  [emitted]         quill.bubble\n  quill.core.css  9.02 kB       4  [emitted]         quill.core\nquill.bubble.css  25.3 kB       5  [emitted]         quill.bubble\n  quill.snow.css  24.7 kB       3  [emitted]         quill.snow\n  [29] ./core.js 2.04 kB {0} {1} {2} [built]\n [114] multi ./quill.js 28 bytes {1} [built]\n [115] multi ./core.js 28 bytes {2} [built]\n [116] ./assets/core.styl 41 bytes {4} [built]\n [117] ./assets/bubble.styl 41 bytes {5} [built]\n [118] ./assets/snow.styl 41 bytes {3} [built]\n [119] ./test/unit.js 1.28 kB {0} [built]\n [128] ./test/unit/formats/color.js 1.8 kB {0} [built]\n [130] ./test/unit/formats/script.js 1.04 kB {0} [built]\n [131] ./test/unit/formats/align.js 1.77 kB {0} [built]\n [132] ./test/unit/formats/code.js 9.13 kB {0} [built]\n [133] ./test/unit/formats/header.js 1.4 kB {0} [built]\n [134] ./test/unit/formats/indent.js 1.09 kB {0} [built]\n [135] ./test/unit/formats/list.js 10 kB {0} [built]\n [136] ./test/unit/formats/bold.js 677 bytes {0} [built]\n    + 128 hidden modules\nChild extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/index.js!node_modules/stylus-loader/index.js!assets/core.styl:\n       [0] ./node_modules/css-loader!./node_modules/stylus-loader!./assets/core.styl 9.45 kB {0} [built]\n        + 1 hidden module\nChild extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/index.js!node_modules/stylus-loader/index.js!assets/bubble.styl:\n       [0] ./node_modules/css-loader!./node_modules/stylus-loader!./assets/bubble.styl 26.3 kB {0} [built]\n        + 1 hidden module\nChild extract-text-webpack-plugin node_modules/extract-text-webpack-plugin/dist node_modules/css-loader/index.js!node_modules/stylus-loader/index.js!assets/snow.styl:\n       [0] ./node_modules/css-loader!./node_modules/stylus-loader!./assets/snow.styl 25.8 kB {0} [built]\n        + 1 hidden module\npresumably that worked?  I have no idea.. but when I try to run npm run build after this, it spits out the same error that I initially posted.. without executing npm run build I can go into the newly created ./dist folder where I can then reference quill.js, and include that into a blank visual studio project with only an HTML file, where a script tag references that ./dist/quill.js and now I can edit code while seeing the changes locally.  My local version still does not pass after an npm build, so I am leaving this issue open for now but will not be updating it.. ",
    "DavidReinberger": "@arwagner  did you had any luck with this issue?. ",
    "SamDuvall": "I tried to take the example from @DavidReinberger and apply the feedback from @jhchen on this issue. I wanted to preserve bullet vs ordered, indentation as well as allow HTML within each list item. Any feedback / suggestions are welcome.\nNote: I am using underscore in the below code, but that could be removed.\n```\nconst MSWORD_MATCHERS = [\n  ['p.MsoListParagraphCxSpFirst', matchMsWordList],\n  ['p.MsoListParagraphCxSpMiddle', matchMsWordList],\n  ['p.MsoListParagraphCxSpLast', matchMsWordList],\n];\nfunction matchMsWordList(node, delta) {\n  // Clone the operations\n  let ops = .map(delta.ops, .clone);\n// Trim the front of the first op to remove the bullet/number\n  let first = _.first(ops);\n  first.insert = first.insert.trimLeft();\n  let firstMatch = first.insert.match(/^(\\S+)\\s+/);\n  if (!firstMatch) return delta;\n  first.insert = first.insert.substring(firstMatch[0].length, first.insert.length);\n// Trim the newline off the last op\n  let last = _.last(ops);\n  last.insert = last.insert.substring(0, last.insert.length - 1);\n// Determine the list type\n  let prefix = firstMatch[1];\n  let listType = prefix.match(/\\S+./) ? 'ordered' : 'bullet';\n// Determine the list indent\n  let style = node.getAttribute('style').replace(/\\n+/g, '')\n  let levelMatch = style.match(/level(\\d+)/);\n  let indent = levelMatch ? levelMatch[1] - 1 : 0;\n// Add the list attribute\n  ops.push({insert: '\\n', attributes: {list: listType, indent}})\nreturn new Delta(ops);\n}\n```. ",
    "gowda1991": "Quill doesn't work directly with textarea, any one help me on this.. ",
    "be-next-hotdog": "+1. +1. ",
    "CrandellWS": "https://github.com/quilljs/quill/issues/1694#issuecomment-328634796\nQuill works with a div, not textarea.\nThis example show how to sync the editor with a form field.. https://github.com/quilljs/quill/issues/1694#issuecomment-328634796\nQuill works with a div, not textarea.\nThis example show how to sync the editor with a form field.. ",
    "trickymast3r": "this is the reason why i not use this editor . ",
    "windware": "What is its primary use when it doesn't directly work with textarea?. ",
    "yujialian": "It's a bit work especially I originally using ckeditor which perfectly support textarea, quill has a nice looking but it would be perfect if we have getHTML() and add support to <textarea>. ",
    "think2011": "I also want to know.. I also want to know.. @jhchen So.. how can I created Inline instance similar Link or \n\nhttps://quilljs.com/guides/cloning-medium-with-parchment/ \nThis teach me how to apply, but did not teach how to cancel\n\nI really want to know, please give me some tips, thanks!\nhttp://codepen.io/think2011/pen/ggPKXE\n. @jhchen So.. how can I created Inline instance similar Link or \n\nhttps://quilljs.com/guides/cloning-medium-with-parchment/ \nThis teach me how to apply, but did not teach how to cancel\n\nI really want to know, please give me some tips, thanks!\nhttp://codepen.io/think2011/pen/ggPKXE\n. @danielschwartz  if I click cancel format and start input, is the result I want.\n\nso I try to read source code formats/bold.js, but I did not found any effected code..\ud83d\ude33. @danielschwartz  if I click cancel format and start input, is the result I want.\n\nso I try to read source code formats/bold.js, but I did not found any effected code..\ud83d\ude33. Now I used SELECTION_CHANGE and TEXT_CHANGE to remove the format by custom blot, really a very heavy way to accomplish \ud83d\ude05\n. Now I used SELECTION_CHANGE and TEXT_CHANGE to remove the format by custom blot, really a very heavy way to accomplish \ud83d\ude05\n. ",
    "puopg": "I think I might be able to help you with this. I too am working on a facebook like mention autocomplete. What I am doing is essentially controlling the inputs explicitly. Basically, you need to hook into key events before quill gets them and also control inserting of keys yourself. \nSo lets say you want to insert a character after you have added a mention with some styles of course. Use the keypress event to determine if an actual character is about to go into the editor and then prevent the default action from happening and insert that item yourself. You know that you want to insert it with no styles, you don't want quill's default action on carrying over styles.  \nNow for a few other events like enter, delete, backspace. Those you need to attach to the config so that your handler runs before quill can. This way if there's something like you want to delete a character from a mention and then you want to remove all formatting from the entire mention, you can do that when you intercept the event first, then allow quill to do its normal action of deleting the character or whatnot. . In the HTML, I get an attribute named email which has the correct email, but if I remove that line and undo that action, the editor rebuilds the blot and since it never saved the data, it renders it in as undefined as the email attribute. . Going to answer my own question, need to use the formats method to do this. I added to the above:\n      static formats(node) {\n        return { email: node.getAttribute('email') };\n      }\n\nand now it properly stores that object into the editor state. . ",
    "joeribakker": "I've been plugging away at the same problem, and based on your answers I implemented the following to make something behave more like a link:\n```js\nquill.on('text-change', (delta, oldDelta, source) => {\n  let currentIndex = quill.getSelection().index;\nif (\n    source === 'user' // otherwise this goes into an endless loop.\n    && quill.getFormat(currentIndex).likelink // format at cursor is likelink\n    && !quill.getFormat(currentIndex + 1).likelink // format right after cursor is not likelink, indicating end of a format block\n    && delta.ops[delta.ops.length - 1].insert // the user just inserted something\n  ) {\n    let lengthOfInsert = delta.ops[delta.ops.length - 1].insert.length;\nquill.formatText(currentIndex - lengthOfInsert, currentIndex, 'likelink', false);\n\n}\n});\n```\nIt specifically looks for text changes done by the 'user', and only removes the linklike format from the newly inserted character(s) when the delta indicates an insert. \nThere are a few problems with this, of course. I'm not adding up all insert lengths, for instance, but just assume there's a single insert operation at the end of the delta. Additionally, I'd like blots to manage this behaviour themselves, in stead of on the editor level. But this is a first step, at least.. ",
    "dkreft": "I'd like to add a little extra flavor for those who are wondering what's going on under the covers here...\nI tried to create a subclass of Inline with tagName of \"A\" and it didn't work. After much digging around, I added a console.log('mutations: %o', mutations) here: https://github.com/quilljs/parchment/blob/master/src/blot/scroll.ts#L27-L29 and discovered that when typing after an inserted link (in Chrome), mutations contains:\n\nWhen my class has a tagName of \"A\" and no other attributes, the mutations contains this:\n\nIt's only when I added an href attribute to the <a> that it finally gave me the desired behavior.\nHOWEVER, in Firefox, there's only one MutationRecord in mutations even when typing after an inserted link, so not even using an href attribute is going to save you in that browser.\nTL;DR: Works in Chrome if you make sure your <a> has an href attribute; does not work in Firefox either way:\n```js\nexport default MyCustomLinkTag extends Inline {\n  static tagName = 'A'\nstatic create(tagName) {\n  const node = super.create()\n\n  node.setAttribute('href', 'http://xxxxx')\n\n  return node\n\n}\n}\n``. As a followup to my previous post, it would see that this behavior we're seeing here is a combination of browser-specific behavior and possibly a deficiency/bug in Quill. If you look at the basic example provided for ProseMirror (https://prosemirror.net/examples/basic/), it behaves as expected (i.e. typing immediately after a link does not add text between the` tags) in both Chrome and Firefox. I haven't dug into how ProseMirror makes this possible.. @dannyrb, @chrisronline : Take a look at https://github.com/quilljs/parchment/blob/master/src/blot/inline.ts#L23\nThere you will see this:\njs\nif (domNode.tagName === InlineBlot.tagName) return undefined;\nIt's not clear why this line is there or why it should return undefined, but if that line is commented out, you then invoke FormatBlot.formats(domNode) (https://github.com/quilljs/parchment/blob/master/src/blot/abstract/format.ts#L11-L18)\njs\nstatic formats(domNode: HTMLElement): any {\n    if (typeof this.tagName === 'string') {\n      return true;\n    } else if (Array.isArray(this.tagName)) {\n      return domNode.tagName.toLowerCase();\n    }\n    return undefined;\n  }\nOn a whim, I simply did this:\n```js\nexport default MyCustomInline extends Inline {\n  static tagName = 'span'\nformats() {\n    return MyCustomInline.tagName\n  }\n}\n```\n...and that got things working for me.\nI have no idea what side effects my \"solution\" will have, as I'm still learning my way about the API, and the documentation only says:\n// Returns format values represented by domNode if it is this Blot's type\n  // No checking that domNode is this Blot's type is required.\n  static formats(domNode: Node);\n...which seems rather arcane and unhelpful.\nWhen I set a breakpoint inside InlineBlot#parchment() (https://github.com/quilljs/parchment/blob/master/src/blot/inline.ts#L50-L61), I can see that other inline elements (e.g. <b> and <i>) return an object from .formats():\njs\n  {\n    bold: true\n  }\nBut it really doesn't seem to matter (as far as I've cared to dig) whether you return a mapping of tags to truthy values or if you simply return a string...though I am assuming that the mapping is more correct...again, for reasons that do not appear to be documented.\nIt probably goes without saying that It's very disappointing to have this issue unceremoniously closed by @benbro with nothing more than a link to SO (which has been noted already, is dead), and then pretty much ignored as others have expressed a desire for a real resolution. This does not reflect well on the project.\n. ",
    "iblank": "We ran into the same issue and were able to get around it by importing the embed blot from quill and setting the type of the block embed to that type. Also, had to set the class properties within the new class.\nimport EmbedBlot from 'quill';\nlet BlockEmbed: EmbedBlot = Quill.import('blots/block/embed');\nclass DividerBlot extends BlockEmbed {\n      static blotName = 'divider';\n      static tagName = 'hr';\n}\nQuill.register(DividerBlot);. Ok, I tried experimenting with your code in my own project and was able to reproduce the error you are getting. Try changing this:\nimport * as Quill from 'quill';\nimport * as Parchment from 'parchment';\nconst Block = Quill.import('blots/block/embed');\nclass BlockEmbed extends Parchment.default.Embed {}\nBlockEmbed.prototype = Block.prototype;\nto this:\ndeclare var Quill: any;\nconst BlockEmbed = Quill.import('blots/block/embed');\n. It took a lot of trial and error for me to figure out too. This might not be exactly right but here goes...\nSince Quill is defined globally from the JS file, you can use it here. declare var Quill: any; just let's typescript know that the variable is defined from outside of the scope of this file. Then your custom blot needs to extend BlockEmbed, so that is the only class you need to import from quill.. ",
    "rajivchugh": "@iblank I am facing the same issue. However, I am unable to import EmbedBlot from quill. I am getting the following error:\nModule '\"quill\"' has no exported member 'EmbedBlot'.)\nCan you please help. Thanks.. @iblank I am facing the same issue. However, I am unable to import EmbedBlot from quill. I am getting the following error:\nModule '\"quill\"' has no exported member 'EmbedBlot'.)\nCan you please help. Thanks.. @arahansen I am facing the same issue. Where did you get reference to IBlock and IParchment. Can you show your complete code please.. @arahansen I am facing the same issue. Where did you get reference to IBlock and IParchment. Can you show your complete code please.. @arahansen This fixed my issue.. @arahansen This fixed my issue.. ",
    "noomz": "In my Angular 2 typescript environment,Quill.import() return any type which cannot be extended. So this is my approach:\n```typescript\nimport * as Quill from 'quill';\nimport * as Parchment from \"parchment\";\nconst QuillBlockEmbed = Quill.import('blots/block/embed');\nclass BlockEmbed extends Parchment.default.Embed {}\nBlockEmbed.prototype = QuillBlockEmbed.prototype;\nclass Video extends BlockEmbed {\n}\n``. In my Angular 2 typescript environment,Quill.import()returnany` type which cannot be extended. So this is my approach:\n```typescript\nimport * as Quill from 'quill';\nimport * as Parchment from \"parchment\";\nconst QuillBlockEmbed = Quill.import('blots/block/embed');\nclass BlockEmbed extends Parchment.default.Embed {}\nBlockEmbed.prototype = QuillBlockEmbed.prototype;\nclass Video extends BlockEmbed {\n}\n```. Is it related to tsconfig ? Below is mine:\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"\",\n    \"declaration\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\n      \"es2015\",\n      \"dom\"\n    ],\n    \"mapRoot\": \"./\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"../dist/out-tsc\",\n    \"sourceMap\": true,\n    \"target\": \"es5\"\n  }\n}\n```. Is it related to tsconfig ? Below is mine:\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"\",\n    \"declaration\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\n      \"es2015\",\n      \"dom\"\n    ],\n    \"mapRoot\": \"./\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"../dist/out-tsc\",\n    \"sourceMap\": true,\n    \"target\": \"es5\"\n  }\n}\n```. ",
    "amccampos": "Thanks @noomz. I took several hours to figure out how to get Quill and Parchment working together in Typescript (Angular 2 env). Your approach saved the day.\nIt would be much easer if parchment typescript definitions were inside quill ts definitions.. ",
    "antonyboom": "I extended emded block as described above, but still getting an error \n\nError: [Parchment] Unable to create marker blot\n\nwhat am I doing wrong? \n```\nimport {Editor} from 'primeng/editor';\nimport * as Quill from 'quill';\nimport * as Parchment from 'parchment';\nconst Block = Quill.import('blots/block/embed');\nclass BlockEmbed extends Parchment.default.Embed {}\nBlockEmbed.prototype = Block.prototype;\nexport class Variable extends BlockEmbed {\nstatic blotName = 'marker';\n  static tagName = 'marker';\nstatic create(value: any) {\n    console.log(value);\n    const node = (super.create(value) as any);\n    node.innerHTML = '' + value + '';\n    node.setAttribute('contenteditable', false);\n    return node;\n  }\n}\nVariable.blotName = 'marker';\nVariable.tagName = 'marker';\nQuill.register('formats/marker', Variable);\n@Component({\n  selector: 'manager',\n  templateUrl: './manager.component.html',\n  styleUrls: ['./manager.component.css']\n})\nexport class ManagerComponent implements OnInit, AfterViewInit {\nprivate quill: any;\n  @ViewChild(Editor) editorComponent: Editor;\nngOnInit() {}\n// based on primeng github issue this how we can get references to quill \n  ngAfterViewInit() {\n    this.quill = this.editorComponent.quill;\n  }\nvariableSelected(event) {\n    // grubbing string variable from event \n    this.quill.insertEmbed(this.cursor.index || 0, 'marker', event.value);\n  }\n}\n```. I extended emded block as described above, but still getting an error \n\nError: [Parchment] Unable to create marker blot\n\nwhat am I doing wrong? \n```\nimport {Editor} from 'primeng/editor';\nimport * as Quill from 'quill';\nimport * as Parchment from 'parchment';\nconst Block = Quill.import('blots/block/embed');\nclass BlockEmbed extends Parchment.default.Embed {}\nBlockEmbed.prototype = Block.prototype;\nexport class Variable extends BlockEmbed {\nstatic blotName = 'marker';\n  static tagName = 'marker';\nstatic create(value: any) {\n    console.log(value);\n    const node = (super.create(value) as any);\n    node.innerHTML = '' + value + '';\n    node.setAttribute('contenteditable', false);\n    return node;\n  }\n}\nVariable.blotName = 'marker';\nVariable.tagName = 'marker';\nQuill.register('formats/marker', Variable);\n@Component({\n  selector: 'manager',\n  templateUrl: './manager.component.html',\n  styleUrls: ['./manager.component.css']\n})\nexport class ManagerComponent implements OnInit, AfterViewInit {\nprivate quill: any;\n  @ViewChild(Editor) editorComponent: Editor;\nngOnInit() {}\n// based on primeng github issue this how we can get references to quill \n  ngAfterViewInit() {\n    this.quill = this.editorComponent.quill;\n  }\nvariableSelected(event) {\n    // grubbing string variable from event \n    this.quill.insertEmbed(this.cursor.index || 0, 'marker', event.value);\n  }\n}\n```. @iblank Ian, I'm giving up to understand it.... Why does it work ? . @iblank Ian, I'm giving up to understand it.... Why does it work ? . @iblank my respect to you, thanks a lot!. @iblank my respect to you, thanks a lot!. ",
    "Hussein-Dahir": "That's worked perfectly for me (and without Parchment)\n`import * as QuillNamespace from 'quill';\nconst Quill: any = QuillNamespace;\nconst BlockEmbed = Quill.import('blots/block/embed');\nexport class HorizontalRule extends BlockEmbed { }\nHorizontalRule.blotName = 'divider';\nHorizontalRule.tagName = 'hr';\nQuill.register(HorizontalRule);`\nput this code in the component or module you need, and then Quill will support \"\\\" tag.\nsame thing applies to other html tags (but may need different package to be imported).\nSource: StackOverFlow. ",
    "btbjosh": "I also need to save the HTML \"as is\" to the database and use it this way. Was bummed to see the api doesn't really \"support\" this behavior without doing what musaffa mentioned above.. ",
    "fran-worley": "Another benefit to @cjaoude approach is that if at some point you change your css (e.g. upgrade from bootstrap 3 to 4) you can reprocess the delta into your new css framework rather than hacking up the html!. ",
    "brylie": "We are also experiencing trouble with this, and are considering 'fixing' it on our end as well. I.e. we are stripping the block element and inline blot from our form submission. However, this seems like it would be cleaner if it were solved in Quill.. ",
    "davidye": "I'm also seeing this issue:\n```\nimport * as Quill from 'quill';\nconst Block = Quill.import('blots/block');\nclass TestBlot extends Block {\n  public static blotName = 'test';\n  public static tagName = 'blockquote';\n}\nconsole.log(Block.scope) // => 10\nconsole.log(TestBlot.scope) // => undefined\n```\n. When I try this same code with babel, it works:\n```\nimport Quill from 'quill';\nconst Block = Quill.import('blots/block');\nclass TestBlot extends Block {\n  public static blotName = 'test';\n  public static tagName = 'blockquote';\n}\nconsole.log(Block.scope) // => 10\nconsole.log(TestBlot.scope) // => 10\n```\n```\n// in parchment package\nclass BlockBlot extends FormatBlot { ... }\n// in quill package\nclass Block extends Parchment.Block { ... }\n```\nConsuming the dist file with typescript is broken but with babel it is fine? I wonder if it's because the parchment package is transpiled by typescript but quill package is transpiled by babel?. ",
    "arahansen": "Those interfaces are stubbed out as \ninterface IBlock extends ObjectConstructor {\n    create(...any): HTMLElement;\n}. ",
    "vad3x": "@arahansen The workaround does not work when I try to extend Container for example (actually when I try to use this or super on the not static methods).\n@jhchen Any plans to rewrite quill to TS? :). ",
    "rh78": "I have the sample problem when trying to customize the Link Blot using TypeScript. It is simply a nightmare. Will try to continue tomorrow but did not yet find solution. . Hi we today got it. Let me show you:\n```\nconst ReactQuill = require('react-quill');\nconst Quill = ReactQuill.Quill;\nimport * as Parchment from \"parchment\";\nconst QuillBlockInline = Quill.import('blots/inline');\nclass BlockInline extends Parchment.default.Inline {}\nBlockInline.prototype = QuillBlockInline.prototype;\n...\nclass Link extends BlockInline {\nstatic blotName = 'link';\n  static tagName = 'A';\n  static SANITIZED_URL = 'about:blank';\nstatic create(value: any) {\n    let node = (super.create(value) as any);\n    let href: string = this.sanitize(value);\n    node.setAttribute('href', href);\n...\nreturn node;\n\n}\nstatic formats(domNode: any) {\n    return domNode.getAttribute('href');\n  }\nstatic sanitize(url: string) {\n    return sanitize(url, ['http', 'https', 'mailto', 'ftp', 'tel']) ? url : this.SANITIZED_URL;\n  }\nstatic value(node: any) {\n    return node.getAttribute('href');\n  }\nformat(name: string, value: string) {\n    if (name !== this.statics.blotName || !value) return super.format(name, value);\n    value = Link.sanitize(value);\n    this.domNode.setAttribute('href', value);\n  }\n}\nfunction sanitize(url: string, protocols: string[]) {\n  let anchor = document.createElement('a');\n  anchor.href = url;\n  let protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\nexport default Link;\n```. ",
    "billyshena": "@XavierBloemen Did you figure out a fix for the 'emitter of undefined' error ?\nI posted an issue here: https://github.com/quilljs/quill/issues/2309 if you have any ideas, would be really helpful !. ```\nlet ListItem = Quill.import('formats/list/item')\nListItem.tagName = 'P'\nQuill.register('formats/list', ListItem)\n``\nIf I replace mytags bytags I have the error \"emitted of undefined\" but If I useListItem.tagName = 'DIV'` it works well, no errors.\nAny ideas how I can replace all <li> by <p> tags ? Or maybe a way to disable the auto-list feature of the editor (which puts <ul> + <li> when I type a \"-\")\nBest,. @XavierBloemen I see, well I am gonna keep trying, thanks for the answer !\n@jhchen Any ideas ? \nI made a codepen here: https://codepen.io/anon/pen/gdQpoo (if you try to do a list in the editor, error 'emitted of undefined' is fired). I just checked Slack and they are doing it pretty well (converting <li> to <p> tags using quill)\n\n. ",
    "rikh42": "Would be cool to add a way to do the equivalent of myBlot.offset(quill.scroll) that does not depend on knowing about quill.scroll, as I use this quite a lot.. Do you have any custom key bindings?. ",
    "whatcould": "I think I had the same question as @ergo. The issue I had was not, how to update the format(s), but how to update the properties used to create the blot \u2014 the object you get back from blot.value(), aka the object you send to create a new blot/node.\nFor what it's worth, digging through the Parchment source I couldn't find a suitable method. I ended up using blot.replaceWith which just replaces the entire node. Eg, if you are trying to update the URL on an image: imageBlot.replaceWith(\"image\", \"http://example.com/new-image.jpg\");\nIf your blot has an object as its value (with multiple properties, as opposed to a string), or has useful formatting/class names/etc, you'll have to do some work to only update the properties you want.. ",
    "ranbuch": "Regarding the first example console.log(Quill); is undefined but when i'm hovering in debug mode on the variable it says function Quill(container).. Regarding the first example console.log(Quill); is undefined but when i'm hovering in debug mode on the variable it says function Quill(container).. That's happening also with jQuery. Probably best to close this issue because it's not related to this repository.\nThank you for your help.. ",
    "Kugelschieber": "Ah I see and may talk to them, thank you.. ",
    "jasonconkey": "I second this request. It would be great if this was configurable per blot. I've tried making a custom inline blot, and unless I override the \"link\" type (blotName='link'), it is impossible to \"escape\" the formatting of the inline blot as you type.\nIt'd be useful to be able to specify the input types that leave the current format and the input types that keep you in the current format.\nFor example, if you format some text with a custom blot type, you could specify that pressing a space or return will exit the format, and other characters would continue the current formatting.\nBTW, I'm impressed so far with using Quill, and especially like the structured data format you get as output.\n. ",
    "skyetang": "I'm using chorme  55 in mac.\nthere is more detail i'd like to tell you.\nif  I link single source with script tag ",
    "splacentino": "@jhchen\nHello, no stacktrace available. Ill send a message to a salesforce lightning dev today but Im hundred % sure that the script is \"not well written for salesforce\" as lot are..\nThe thing is that the \"scriptLoaded\" callback is never run because it is not loaded.\nLodash has no loading issue alone or w/ other fully importable scripts.\nThank you anyway. It supposed to be a Salesforce issue (Cf. Stackexchange discussion about w/ Doug Chasman).. @mitfity Here is an piece of code I am using:\njavascript\n      const editor    = component.find('editor'); // where 'editor' is a <div aura:id=\"editor\" />\n      const element = editor.getElement();\n      const quill = new Quill(\n        element,\n        {\n          placeholder: 'Mail content..',\n          theme: 'snow',\n          modules: {\n            toolbar: [\n              [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n              ['blockquote', 'code-block'],\n              ['bold', 'italic', 'underline', 'strike'],\n              [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n              ['clean'],\n              [{'color' : [ 'blue', 'red', 'green', 'yellow', 'black', 'purple', 'pink']}]\n            ]\n          }\n        }\n      );\n      quill.on('text-change', function() {\n                // Do stuff with quill.container.firstChild.innerHTML;\n      });\n      component.set('v.quill', quill); // where quill is an attribute of type Object\nDo not forget to do this ONLY on the callback when the script is loaded:\nhtml\n  <ltng:require scripts=\"{! $Resource.quill }\" afterScriptsLoaded=\"{! c.scriptLoaded }\" />\nHope this will help you.. @mitfity Yet this is the library I uploaded on SF as static resource.\nIt is compliant w/ Lockerservice (you can browse the Quill code and compare it to Lockeservice restrictions (what I did)).\nIt HAS to be supported because the <Lightning:inputRichText /> is based on QuillJS.\nhttps://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/aura_compref_lightning_inputRichText.htm\n\nA lightning:inputRichText component creates a rich text editor based on the Quill JS library,. \n",
    "mitfity": "@splacentino It is strange. I get scripts loaded, but when I try to initialize Quill \u2014 I get this:\n[Parchment] Unable to create SecureElement: [object HTMLDivElement]{ key: {\"namespace\":\"c\"} } blot\nHowever, everything works without LockerService.\nAs I see, you wrote that the issue is fixed for you. Does this mean that you made Quill work with LockerService?. @splacentino What is $Resource.quill you import? Is it quill.js file?\nI do the same but get error trying to initialize quill with LockerService enabled.. @splacentino I don't know where you use Quill and did you do anything with quill.js so it will work with LockerService. I tried again in different org and I am getting:\n[[Parchment] Unable to create SecureElement: [object HTMLDivElement]{ key: {\"namespace\":\"extdev\"} } blot] , where extdev is my org namespace. This error goes from quill.js and as I see this is because LockerService adds namespace now, so quill doesn't understand what html element it is.\nI tried plenty of time and maybe because I am new to Salesforce I don't get it and I don't know how to solve this.. ",
    "mikyd": "@splacentino - what do you mean by comparing Quill code to Lockerservice restrictions? Were you able (while lockerservice is activated) to create Quill RTE by using new Quill() or manipulating  using Quill library? . ",
    "danfuzz": "Here's a screencap of the problem happening as described:\n\n. I narrowed the introduction of the problem down to the commit https://github.com/quilljs/quill/commit/0ff7d3dcaf477a793b292e168d9e461756f6987b, which is the following one-line change to line 394 of core/quill.js:\nlet range = index == null ? null : this.getSelection();\n    let oldDelta = this.editor.delta;\n    let change = modifier();\n -  if (range != null) {\n +  if (range != null && source === Emitter.sources.USER) {\n      if (index === true) index = range.index;\n      if (shift == null) {\n        range = shiftRange(range, change, source);\nUndoing this change fixes the problem described by this bug. Ironically, the description of issue #1152, which this commit is supposed to fix, implies that the fix should prevent cursor jumping.. I think this bug is describing the same issue as in the comment https://github.com/quilljs/quill/issues/1152#issuecomment-271008503.. ",
    "EladBet": "Didn't fix it on FF nor IE.\nYou can see the same behavior on Quill Playground\n. Great thanks\n. Reproduce on playground.\nHappen to me with Chrome 55, on windows 10.\nSame thing happen with Safari 8 & Chrome 55 on Mac Yosemite.\nWork OK on FF and IE.\n\nAppears to be a regression with 1.1.9\n\n. I spend some time with this bug and found the source of the problem.\nIt was a commit called fix reference line 51 .\nif (range.length === 0 && source === Emitter.sources.USER)\nsource = 'api'\nEmitter.sources.USER = 'user'\nAdding source === Emitter.sources.USER breaks the removal of the link format on some browsers .\nIts probably fixes something else so I didn't PR.\n. I realized that the bounds need to be unique.\n. ",
    "jbuhawe": "Hello! \nI would like to ask if this is a bug? I used https://quilljs.com/playground/#custom-fonts in IE 11. The texts do not change into selected font type. Then I tried deleting the whole texts. Change font type first to Mirza. I typed \"hello\", used left arrow key until I reached the first character then started deleting it. On the first try it was ok. Then I typed again, moved arrow key to the left. When I started hitting delete key, the cursor will jump to the rightmost side. \nThank you so much!. ",
    "haugstrup": "I think the fix in 576a074312c049d7589f39d9b07ff9961d0e4639 is not the most optimal fix.\nAfter updating to 1.1.10 I can no longer type 1. into Quill (with list format disabled). After typing the final space the 1. is deleted and I'm left with an empty editor. I think it'd be better to let the user type in 1. at the start of a line. I.e. if list is disabled just leave the 1. alone instead of deleting it.\nYou can try this out on the playground ( https://quilljs.com/playground/ ) using this configuration:\nvar quill = new Quill('#editor-container', {\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline'],\n      ['image', 'code-block']\n    ]\n  },\n  formats: ['bold'],\n  placeholder: 'Compose an epic...',\n  theme: 'snow'  // or 'bubble'\n});. I think the fix in 576a074312c049d7589f39d9b07ff9961d0e4639 is not the most optimal fix.\nAfter updating to 1.1.10 I can no longer type 1. into Quill (with list format disabled). After typing the final space the 1. is deleted and I'm left with an empty editor. I think it'd be better to let the user type in 1. at the start of a line. I.e. if list is disabled just leave the 1. alone instead of deleting it.\nYou can try this out on the playground ( https://quilljs.com/playground/ ) using this configuration:\nvar quill = new Quill('#editor-container', {\n  modules: {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline'],\n      ['image', 'code-block']\n    ]\n  },\n  formats: ['bold'],\n  placeholder: 'Compose an epic...',\n  theme: 'snow'  // or 'bubble'\n});. Even better \ud83c\udf89 \ud83d\ude47 . I'm happy to spend time troubleshooting and creating a PR to fix this issue, but I don't know where to start in Quill!. I'm happy to spend time troubleshooting and creating a PR to fix this issue, but I don't know where to start in Quill!. I did not. This is not a problem with contenteditable in general, it's a problem with Quill in particular.. I did not. This is not a problem with contenteditable in general, it's a problem with Quill in particular.. There are more scenarios that will cause the browser crash. The example above is the smallest one I could find. If there is any non-whitespace text after the images everything works fine.. There are more scenarios that will cause the browser crash. The example above is the smallest one I could find. If there is any non-whitespace text after the images everything works fine.. Strange, I could not repro with a vanilla element earlier today. I must've made a mistake. I've added a custom key binding in my Quill usage to catch this before it happens -- seems reasonable to do the same in Quill out of the box.. Strange, I could not repro with a vanilla element earlier today. I must've made a mistake. I've added a custom key binding in my Quill usage to catch this before it happens -- seems reasonable to do the same in Quill out of the box.. \"Re-implemented\" in the sense that I'm moving the cursor to the left of the image. I'm not 100% sure that's the correct behavior for option+left, but it seems better than doing nothing. \"Re-implemented\" in the sense that I'm moving the cursor to the left of the image. I'm not 100% sure that's the correct behavior for option+left, but it seems better than doing nothing. ```\naltLeft: {\n    key: 37,\n    altKey: true,\n    metaKey: false,\n    shiftKey: false,\n    handler: () => {\n        const range = this.quill.getSelection();\n        if (range && range.index > 0) {\n            const delta = this.quill.getContents(range.index - 1, 1);\n        // \"emoji\" is a custom embed format -- replace with \"image\" I think?\n\n        if (delta && delta.ops.length && delta.ops[0].insert.emoji) {\n            // Manually move the cursor to the other side of the emoji\n            this.quill.setSelection(range.index - 1, 0);\n            return false;\n        }\n    }\n},\n\n},\n```\nThere's a wide variety of combinations that will cause this problem:\n\nIt'll still happen if you add a line of all images (with any whitespace) above\nIt'll still happen if you add more images (without whitespace) before the leading whitespace\nIt'll still happen if you add more images to the last line\nIt'll still happen if you add typed text after the last line (but any text before the leading whitespace and you're fine)\n\nThose were the cases I want through in my testing.. ```\naltLeft: {\n    key: 37,\n    altKey: true,\n    metaKey: false,\n    shiftKey: false,\n    handler: () => {\n        const range = this.quill.getSelection();\n        if (range && range.index > 0) {\n            const delta = this.quill.getContents(range.index - 1, 1);\n        // \"emoji\" is a custom embed format -- replace with \"image\" I think?\n\n        if (delta && delta.ops.length && delta.ops[0].insert.emoji) {\n            // Manually move the cursor to the other side of the emoji\n            this.quill.setSelection(range.index - 1, 0);\n            return false;\n        }\n    }\n},\n\n},\n```\nThere's a wide variety of combinations that will cause this problem:\n\nIt'll still happen if you add a line of all images (with any whitespace) above\nIt'll still happen if you add more images (without whitespace) before the leading whitespace\nIt'll still happen if you add more images to the last line\nIt'll still happen if you add typed text after the last line (but any text before the leading whitespace and you're fine)\n\nThose were the cases I want through in my testing.. ",
    "OlivierNguyen": "Not sure that is a good solution, but I tried something like this (I use it with React, so this code may not be usable in condition):\nthis.refs.quill.getEditor().addEventListener('dblclick', (ev) => {\n      const image = Parchment.find(ev.target);\n      if (image.statics.blotName === 'image') {\n        const indexSelectedImage = this.refs.quill.getEditor().getIndex(image);\n        this.refs.quill.getEditor().setSelection(indexSelectedImage);\n      }\n    });. ",
    "macgregordennis": "@jhchen I am also experiencing this bug on a Mac with Chrome 56.0\n\nIt appears to happen sporadically for me.. ",
    "akohli74": "Hey - thanks for the quick response.\nWhat I have discovered is that there is likely an incompatibility with the Prototype JavaScript framework, which is what core.js is in our solution.  We are using Prototype JavaScript framework v1.7.0.0.\nWhen I include this library in the codepen, then yes, I am able to get it to fail:\n//cdnjs.cloudflare.com/ajax/libs/prototype/1.7.0.0/prototype.js\nI'm not seeing any errors in the console, but I know it's failing because the editor is not being rendered at all.\nSo, just include the CDN for the JavaScript Prototype framework above, and you will see the editor fails.\nAny ideas on how this can be corrected would be most appreciated.  It does seem that there is a context that is not being set correctly, or set at all, because the each function does exist in the Enumerable in which it is called.  However, the context is undefined, and therefore, the this pointer is perhaps not pointing to the right place.  That's my best guess at this point.. ",
    "u12206050": "@shuckster Nice fix, although upon adding it quill 'works' but I can not space. I can't seem to insert spaces in between text anywhere within the quill editor. I can paste a space in but from the space bar to quill doesn't seem to work.\nUPDATE: Seems like space works when holding in shift. So SHIFT+SPACE works but not space. Any ideas?. @shuckster Nice fix, although upon adding it quill 'works' but I can not space. I can't seem to insert spaces in between text anywhere within the quill editor. I can paste a space in but from the space bar to quill doesn't seem to work.\nUPDATE: Seems like space works when holding in shift. So SHIFT+SPACE works but not space. Any ideas?. @shuckster Thanks for the advice, I downgraded to 1.3.0, and added your \"_closure_youShouldReally...\" patch above the quill code. However it still seems that the problem exists. If it helps, I am running quill within Magento 2 admin. \nUPDATE: Have a suspicion that jQuery.hotkeys could be the issue here. It seems to trigger on keyup, but no luck yet as to how to bypass or disable it.. @shuckster Thanks for the advice, I downgraded to 1.3.0, and added your \"_closure_youShouldReally...\" patch above the quill code. However it still seems that the problem exists. If it helps, I am running quill within Magento 2 admin. \nUPDATE: Have a suspicion that jQuery.hotkeys could be the issue here. It seems to trigger on keyup, but no luck yet as to how to bypass or disable it.. So after debugging a bit I realized there are a lot of other events happening after quill has captured the keydown event, and so as a fix I have added evt.stopPropagation() almost right at the start of the keydown event, since \"obviously if you are typing within quill only quill needs to know about it.\"\nHere is the updated keydown listener fn:\nthis.quill.root.addEventListener('keydown', function (evt) {\n        if (evt.defaultPrevented) return;\n        evt.stopPropagation();\n        var which = evt.which || evt.keyCode;. So after debugging a bit I realized there are a lot of other events happening after quill has captured the keydown event, and so as a fix I have added evt.stopPropagation() almost right at the start of the keydown event, since \"obviously if you are typing within quill only quill needs to know about it.\"\nHere is the updated keydown listener fn:\nthis.quill.root.addEventListener('keydown', function (evt) {\n        if (evt.defaultPrevented) return;\n        evt.stopPropagation();\n        var which = evt.which || evt.keyCode;. ",
    "hongmomanu": "@jhchen  .right!    chromium  56.0.2924.87 (64-bit) for linux. ",
    "eranation": "request to reopen, there should be a separation between the theme of the toolbar and tool tip vs general padding / h1...7 elements on the screen. \nIf quill is a \"WYSIWYG\" editor then what you see should be what you get. If the theme overrides padding / header sizes in edit mode, then \"what you see is somewhat close to what you get but not exactly\" \n. @benbro I understand that there are workarounds, but it will be super nice if I could just import a subset of the existing core.css / theme.css . ",
    "GaurangTandon": "Hi @jhchen , thanks for the comprehensive reply! Could you add it to the official docs? I mean, if this thing that you've just told me had been there in the official docs, it would've saved me an hour of debugging.. ",
    "jozefvaclavik": "@jhchen Is there a way to automatically prefix http:// if it's missing? I know I can use custom handler, but I cannot customize snow handler, which leaves me with half baked fix.\nIf I enter apple.com the anchor.href returns http://localhost:4000/apple.com in sanitize function\nfunction _sanitize(url, protocols) {\n  var anchor = document.createElement('a');\n  anchor.href = url;\n  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}. ",
    "dsternlicht": "@jozefvaclavik Thank you for that!. ",
    "friedrith": "Ok thanks. I could be useful to update cnd links in documentation. I thought that 1.0.0 was the last version available in cdn.. Ok thanks. I could be useful to update cnd links in documentation. I thought that 1.0.0 was the last version available in cdn.. Thx for your very accurate answer. I didn't know the functionOverrides field from At.js. I have experimented the enter issue but not the selection inteference yet.\nI will find the best way to integrate completion in quill and post the answer here.. I try to prevent tab and enter in quill when the the completion dropdown is displayed but I am experimenting a weird behavior.\nI have no problem to binding letters like 'a', '*', etc but it seems to doesn't work for enter or tab.\nThis is a codepen : http://codepen.io/DaneelOlivaw/pen/VPPOpw\nNotice that in the codepen I use keyCode but I also tried with 'tab', Keyboard.keys.ENTER, Keyboard.keys.TAB.\nDo you any idea about the origin of this issue ?. Thanks a lot. ENTER binding works very well in standalone now. I am gonna to make it working with At.js now.. Thanks a lot. ENTER binding works very well in standalone now. I am gonna to make it working with At.js now.. ",
    "hughlomas": "@jhchen I've come here because there are no hover hints for the toolbar. All I see are weird suggestions like using Bootstrap tooltips or user hacks for such a basic piece of functionality. \nJust add a title=\"whatever\" attribute to the buttons. It's a browser standard.\n<button type=\"button\" class=\"ql-bold\" title=\"Bold\">\nThis is so simple. Why the aversion to adding this?. ",
    "abramz": "@benbro this hasn't had activity since you closed the issue while there is still very much a problem with your suggested solution.\nIn addition to what @wilk said... 8 months ago, there is no selection-change event when the editor is focused and the user clicks outside of the editor. \nThis is a rich text editor, HTML text inputs have focus & blur events. QuillJS should too.. @benbro this hasn't had activity since you closed the issue while there is still very much a problem with your suggested solution.\nIn addition to what @wilk said... 8 months ago, there is no selection-change event when the editor is focused and the user clicks outside of the editor. \nThis is a rich text editor, HTML text inputs have focus & blur events. QuillJS should too.. Since we don't have direct access to the new call, I think it is a bit of a hack. But I solved this by passing quill as a field in data when calling insertEmbed or creating a delta. Since we don't have direct access to the new call, I think it is a bit of a hack. But I solved this by passing quill as a field in data when calling insertEmbed or creating a delta. Does mocha create a browser environment?. Does mocha create a browser environment?. You are importing Quill though, @SevenZark, and that requires the DOM. As you can see here, core/polyfill is imported, which runs on import & requires document.. You are importing Quill though, @SevenZark, and that requires the DOM. As you can see here, core/polyfill is imported, which runs on import & requires document.. > Of course I understand Quill needs the DOM to work when Quill is invoked, and in files in which it is called.\n@SevenZark, Quill requires the DOM when it is imported, not when it is invoked. I think this may be what you are missing. The very fact that you import Quill, which you say you did in repro step 1, will cause breakage in an environment that does not provide the DOM. If you review the files in my previous reply, you will see that core/polyfill runs on import.. > Of course I understand Quill needs the DOM to work when Quill is invoked, and in files in which it is called.\n@SevenZark, Quill requires the DOM when it is imported, not when it is invoked. I think this may be what you are missing. The very fact that you import Quill, which you say you did in repro step 1, will cause breakage in an environment that does not provide the DOM. If you review the files in my previous reply, you will see that core/polyfill runs on import.. How would an error get thrown from Quill if it were not imported?. How would an error get thrown from Quill if it were not imported?. Exactly, so, let's use Occam's razor and say that QuillJS is getting imported somewhere.\nWhat would the parameters be of a scenario where this is not the case?. Exactly, so, let's use Occam's razor and say that QuillJS is getting imported somewhere.\nWhat would the parameters be of a scenario where this is not the case?. Thanks @jhchen . Thanks @jhchen . Your 2nd example seems to be working as intended.\nThe z is not made a part of the formula, that is not how embed blot works. You placed the cursor after the guard character, so the z comes after the formula. If you were expecting a space between the formula and the z, you have to type that yourself based on where you placed the cursor position.\n. Your 2nd example seems to be working as intended.\nThe z is not made a part of the formula, that is not how embed blot works. You placed the cursor after the guard character, so the z comes after the formula. If you were expecting a space between the formula and the z, you have to type that yourself based on where you placed the cursor position.\n. ",
    "Nexxado": "@dons20 this doesn't work for me.\nI used the following for direction and align:\njavascript\nQuill.register(Quill.import('attributors/style/direction'), true);\nQuill.register(Quill.import('attributors/style/align'), true);\nBut its not a perfect solution and doesn't work for indent.\nIs there any way to force Quill to use only inline styles (instead of classes)?. @dons20 this doesn't work for me.\nI used the following for direction and align:\njavascript\nQuill.register(Quill.import('attributors/style/direction'), true);\nQuill.register(Quill.import('attributors/style/align'), true);\nBut its not a perfect solution and doesn't work for indent.\nIs there any way to force Quill to use only inline styles (instead of classes)?. ",
    "qq15725": "If initialization data loses indentation\nadd value = parseInt(value)\nclass IndentAttributor extends Parchment.Attributor.Style {   \n  add (node, value) {\n    value = parseInt(value)\n    if (value === 0) {\n      this.remove(node)\n      return true\n    } else {\n      return super.add(node, `${value}em`)\n    }\n  }\n}. ",
    "ainjii": "@jhchen Did you get a chance to take a look at this/the PR? I would love any comments or feedback.. In most user cases, non-breaking spaces will be added when the user is copy/pasting from a source that uses non-breaking spaces in their HTML. If you are just trying to test using an Apple computer, you can also add a non-breaking space from the standard US keyboard by typing option+space.. Just realized this will break for pasting from Cocoa :(. ",
    "ajibarra": "@jhchen @justinpincar any update on this?\n. ",
    "superevanzhu": "I agree with it.. ",
    "abinay": "@eamodio  Have you reflected it in the git code ?? I did  npm install ng2-quill-editor --save again and try to achieve the same above funtionality but its not working . Any help ??. ",
    "armory09": "Hi, \nIm new to quilljs and im having the same issue.\ncan anyone please share a snippet how to do the fixed mentioned above?\nTrapping the mousedown on .ql-toolbar and calling e.preventDefault() fixes . ",
    "MichaelTontchev": "Seems like a trivial failure that is irrelevant to the changes.... Seems like a trivial failure that is irrelevant to the changes.... The commit message for the fix specifies ctrl + backspace is a no-op in Word/Docs. I tried to reproduce this but found ctrl+backspace to behave as generally accepted, which is to delete the previous word, meaning it's not a no-op. Should this issue be reopened?. The commit message for the fix specifies ctrl + backspace is a no-op in Word/Docs. I tried to reproduce this but found ctrl+backspace to behave as generally accepted, which is to delete the previous word, meaning it's not a no-op. Should this issue be reopened?. Thanks! :). Thanks! :). ",
    "DaneelOliwan": "I would like to get a blot with 3 fields because I am creating a blot to add task so there are 3 information to add: the task to do, the assignee and the deadline.. I would like to get a blot with 3 fields because I am creating a blot to add task so there are 3 information to add: the task to do, the assignee and the deadline.. I have seen the table PL but unfortunetaly, I cannot use embed because I would like to use formats in these fields.. I have seen the table PL but unfortunetaly, I cannot use embed because I would like to use formats in these fields.. ",
    "rmadziya": "The machines that experience the issue get this problem consistently. The directional keys just don't work at all for those. On the ones with no issue it works consistently fine all the time. We haven't updated to 1.2.0 yet. Sorry for delayed response, update to Version 1.2.0 seems to have solved the problem for us. It's working fine now across all the machines. Still testing but seems consistent and stable. Thanks, great work.. ",
    "Yves-K": "Thank you for this advise.\nAnd is there any sample or documentation on how to create a safe BLOT ?. Thank you for this advise.\nAnd is there any sample or documentation on how to create a safe BLOT ?. ",
    "jayarc": "The first editor initiated on the page seems to work ok, making me suspect multiple editors could be a contributing factor.. ",
    "srossross-tableau": "I am building quill as a part of a larger build pipeline. When I import Quill from 'quill' I get this runtime error.\nCannot assign to read only property 'exports' of object '#<Object>' (mix require and export)\nIt looks like only quill/core.js and quill/quill.js use module.exports =\nRight now I can get around this by using import Quill from 'quill/core/quill'\n. I am building quill as a part of a larger build pipeline. When I import Quill from 'quill' I get this runtime error.\nCannot assign to read only property 'exports' of object '#<Object>' (mix require and export)\nIt looks like only quill/core.js and quill/quill.js use module.exports =\nRight now I can get around this by using import Quill from 'quill/core/quill'\n. Thanks @jhchen, will do. I will also try to provide a sample webpack config to reproduce.. Thanks @jhchen, will do. I will also try to provide a sample webpack config to reproduce.. ",
    "azazel75": "i'm bitten by this bug too using 3.4.1. That module.exports = Quill; seems completely wrong to me. What does it matter the fact about running it inside the web page without a packaging step? That 'quill.js' from cdn is pre-packaged, containing all quill and its dependencies. Here the problem is that you do do pre-packaging not with webpack but with something else which is more permissive about your coding....\nWhat a mess . @koffeinfrei I ended up implementing @srossross-tableau suggestion of avoiding importing core.js totally  and just reimplementing it in my code using import Quill from 'quill/core/quill' and setting it up on my own.. ",
    "ajgagnon": "Appreciate the helpful response! \ud83d\udc4d \ud83d\ude04 . @priitperna I'm trying to do this as well. I'd love to see your modified fork if you have it!. ",
    "mikeesouth": "I know this issue is closed but is there any way to disable this \"feature\"?\nEdit: I was too fast, found this new feature that disables this behaviour: https://quilljs.com/docs/modules/clipboard/#matchvisual\nI'm happy! :). ",
    "rdzakmic": "Hi, is it posible (and how can be done) to remove <br> and  to put <br/> ? \nThanks.. ",
    "jaesung2061": "Is there a way to make it so that each paragraph is separate? People shouldn't be separating paragraphs with an empty paragraph/br element in between. Should I just give a margin-bottom to all paragraphs?. Is there a way to make it so that each paragraph is separate? People shouldn't be separating paragraphs with an empty paragraph/br element in between. Should I just give a margin-bottom to all paragraphs?. ",
    "caiotarifa": "Same here.. ",
    "leocaseiro": "Thanks @jhchen.\nJust for curiosity, why not use gh-pages for demo, docs and so on?. Thanks @jhchen,\nYep! I meant a gh-pages branch for the demo, docs and so on.. ",
    "jay-cox": "After investigating I have found that the clipboard module is building up the document in a depth first order.  This causes parent attributes to always overwrite child attributes.\nOne way to fix this is by adding an option for 'retain' Deltas to be soft - i.e. to preserve existing attribute values if they exist.\nI have pull requests on the quill-delta and quilljs projects that implement this:\n  * quill-delta pull request # 8\n  * quilljs pull request  #1336\n. After investigating I have found that the clipboard module is building up the document in a depth first order.  This causes parent attributes to always overwrite child attributes.\nOne way to fix this is by adding an option for 'retain' Deltas to be soft - i.e. to preserve existing attribute values if they exist.\nI have pull requests on the quill-delta and quilljs projects that implement this:\n  * quill-delta pull request # 8\n  * quilljs pull request  #1336\n. Yes, for clipboard (as currently written) use case you always want to prioritize the existing values, but for the interactive case you always want to prioritize the new values.\nModifying the delta API should certainly be considered carefully.  \nThe clipboard traverse and match* functions could be rewritten to work top down with the existing delta API, but this will require some extra bookkeeping outside of the Deltas.\n. Yes, for clipboard (as currently written) use case you always want to prioritize the existing values, but for the interactive case you always want to prioritize the new values.\nModifying the delta API should certainly be considered carefully.  \nThe clipboard traverse and match* functions could be rewritten to work top down with the existing delta API, but this will require some extra bookkeeping outside of the Deltas.\n. The Delta API is very simple with only insert, retain, and delete operations, but powerful enough to build a full text editor on top of.\nMy proposed \"soft\" retain, while it would be useful in certain document creation situations, is not likely to be useful for general document editing.\nIf the Delta API is to be expanded is should probably be in a way that is much more generally applicable than my 'soft' retain proposal.\nOne possible addition that would work for both document editing and creation cases is to allow passing in a function to control how attributes are merged on retain operations.  This could be an optional argument to retain operations, or it could be a new operation type.\nDoing it that way would allow a simple way to add editor features like 'make selected text 20% larger' as well as allow for a simple way to perform 'soft' retains for document creation workflows.\nit could be used something like this:\nfunction scale_text(a, b)\n{\n  let attributes = extend(true, {}, a);\n  if (a['font-size'])\n    attributes['font-size'] *= b.scale_factor;  // real code would need to account for units.\n  else\n    attributes['font-size'] = b.scale_factor + 'em';\n  return attributes;\n}\n\nfilter = new Delta().retain(12, {scale_factor: 1.2}, scale_text)\n\nIf it is a requirement that Deltas are able to be persisted, then one could add an indirection through a registry without too much extra effort.\n. The Delta API is very simple with only insert, retain, and delete operations, but powerful enough to build a full text editor on top of.\nMy proposed \"soft\" retain, while it would be useful in certain document creation situations, is not likely to be useful for general document editing.\nIf the Delta API is to be expanded is should probably be in a way that is much more generally applicable than my 'soft' retain proposal.\nOne possible addition that would work for both document editing and creation cases is to allow passing in a function to control how attributes are merged on retain operations.  This could be an optional argument to retain operations, or it could be a new operation type.\nDoing it that way would allow a simple way to add editor features like 'make selected text 20% larger' as well as allow for a simple way to perform 'soft' retains for document creation workflows.\nit could be used something like this:\nfunction scale_text(a, b)\n{\n  let attributes = extend(true, {}, a);\n  if (a['font-size'])\n    attributes['font-size'] *= b.scale_factor;  // real code would need to account for units.\n  else\n    attributes['font-size'] = b.scale_factor + 'em';\n  return attributes;\n}\n\nfilter = new Delta().retain(12, {scale_factor: 1.2}, scale_text)\n\nIf it is a requirement that Deltas are able to be persisted, then one could add an indirection through a registry without too much extra effort.\n. ",
    "dsathyan": "I can still reproduce the issue\nFrom test case - <span style=\"color: red;\"><span style=\"color: blue;\">Test</span></span> \nIf I add this to editor(innerHTML) and get the delta (quill.getContents()), I get -\n{\"ops\":[{\"attributes\":{\"color\":\"red\"},\"insert\":\"Test\"},{\"insert\":\"\\n\"}]}\nIn the clipboard - select the string + cut + undo and the text becomes red. My bad, it does work\nAnd innerHTML unleashes a different beast and not related to clipboard. ",
    "dinusuresh": "Thank You :+1: . ",
    "WhatFreshHellIsThis": "Hmm...I looked at that but it clearly stated \"This is separate from adding a control in the Toolbar.\" \nSo what you are saying is that those items listed below for format are actually the keys to use to enable the toolbar buttons?  If so the docs need to be changed there, it's confusing and not clear at all.\nThe toolbar page example lists just some of the options, not all of them.\nI realize once you are familiar with the control it must all make more sense but I'm posting as a newcomer and it currently doesn't make sense with the docs as they are.  \nAlso you don't just get every option when you specify none which seems from my reading to be contrary to what I understood so that is a disconnect as well for new users.. Hmm...I looked at that but it clearly stated \"This is separate from adding a control in the Toolbar.\" \nSo what you are saying is that those items listed below for format are actually the keys to use to enable the toolbar buttons?  If so the docs need to be changed there, it's confusing and not clear at all.\nThe toolbar page example lists just some of the options, not all of them.\nI realize once you are familiar with the control it must all make more sense but I'm posting as a newcomer and it currently doesn't make sense with the docs as they are.  \nAlso you don't just get every option when you specify none which seems from my reading to be contrary to what I understood so that is a disconnect as well for new users.. ",
    "00cpxxx": "I agree with this report, I started using quilljs today and it was confusing on how to create the full toolbar. I ended copying the full example toolbar and since I use many different editors in a single page I clone the toolbar and append before the editor in js to reduce size. There could be a shortcut to like:\nnew Quill('#'+id, {\n      modules: {\n        toolbar: 'full',\n      },\n      theme: 'snow'\n    });. ",
    "MariannaAtPlay": "I am experiencing this same problem. I've looked at the documentation very carefully ad it is NOT clear how to easily enable ALL the buttons. @jhchen, are you suggesting that we need to provide an array with the list of all formats to get all the buttons visible like this:\n```\nvar toolbarOptions = ['bold', 'italic', 'underline', 'strike', 'background', 'color', 'font', 'code',.... + other 20 options???];\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  }\n});\n``` \nPlease add the code sample that generates the result pictured on this page:\nhttp://quilljs.com/docs/formats/\nI don't want to customize anything. I just want the standard buttons.\nAlso, what's the difference between the toolbar options and formats option?. ",
    "barry800414": "I have the same problem with @MariannaAtPlay .\nActually I don't need the function to enable all modules by one keywords, but I want the full list of modules so that I can check how many functions Quill editor can provide.  \nBut after browsing all documentation on quill's website, there is no such list. . ",
    "light-traveller": "I believe the user should not be forced to SEARCH the online documentation and website in order to get what is very basic and what is meant to be the main purpose of any documention. The documentation MUST clearly list all available options and state how they can be enabled/disabled. \nWhat we have here is that we have to first look at the 'Formats', then go to 'Toolbars' module and connect these two information! Why? Please do provide a simple, clear and easy-to-find documentation and do not expect the user to solve puzzles. That is the whole purpose of documenting any library!!!!. ",
    "mcmire": "Just a followup: It is technically possible to do this, but it gets really complicated, and this is mainly due to contenteditable. I'll document some of the stuff I did though in case anyone finds this useful:\n\nI mentioned before that I made a new blot class to represent the form (FormBlot). What I didn't mention before is that:\nI added a method to this called index that always returns 0 (this will come in handy later).\nI added two methods: select and unselect. These methods will be called when the blot is selected (either by clicking on it or using the cursor) or unselected (only by using the cursor).\nIn select, I dispatched a custom event on this.domNode (the element that represents the blot) called select-block-embed. I made it bubble upward, and set a blot property on the Event object to this (the FormBlot instance). In this method I also set an active class so that I could draw a box around the form.\nIn unselect, I took away the active class.\nIn the constructor, I added a handler to listen to mousedown so that select is called.\n\n\nThen I vendored the Quill code and modified some of it. I changed the event handlers at the top of core/selection.js so that update is no longer fired on keyup, mouseup, or touchend. Instead of this, I added another handler to call update when selectionchange occurred on the editor. Since you can't technically listen for selectionchange on anything other than the entire document, inside of the handler I had to check that document.activeElement (the node where the selection was created or changed) was inside of, or was itself, this.root (which is the editor). After this, I then modified update so that at the top, after it calls this.getRange() to get the current selection state, but before setting this.lastRange and then comparing it to the previous selection state, it fires a new event called selection-before-change.\nNow that that was in place, in my own code, I could then listen for selection-before-change. In the handler, I took the range that was passed in and then used Quill#getLine to get the current blot.\nIf this blot was a FormBlot, then:\nI called select on the FormBlot and then called quill.selection.setRange(null, \"silent\") to hide the cursor (otherwise it appears inside of the form). (The \"silent\" is to prevent update from getting called again, which is going to cause issues since we're still in the middle of update.)\nI cached the FormBlot and range.index in a variable that is defined outside of the selection-before-change handler.\nFinally, I also attached an event handler to the editor to listen to keydown, because at this point we need to tell the editor that if the user presses up, down, left, or right the blot needs to get unselected and the cursor needs to reappear either above or below the form. I accomplished this by either calling quill.setSelection(index - 1, 0, \"silent\") or quill.setSelection(index + 1, 0, \"silent\") depending on the direction. (Here, index is the range.index that we cached before in the variable I mentioned before.)\n\n\nIf the blot that corresponds to the current selection is not a FormBlot, then I called unselect on the FormBlot that I cached before, cleared out this cache, and removed the keydown handler from the editor.\n\n\nFinally, I also listened for select-block-embed to occur on the editor element. (As mentioned before, FormBlot will emit this event when the blot is selected, and the blot can be selected two ways: when the selection is changed via the cursor and when the element is clicked on.) In the handler I made sure that we were caching the selected blot in the variable I mentioned before and that the selection was cleared (using quill.selection.setRange(null, \"silent\")). \n\nSo this logic got me pretty far: I could click on the form to select it, and I could use the arrow keys to cursor around, and depending on where it was the form might get selected and unselected automatically.\nThe problem arose when I wanted to implement dragging and dropping for the form. It just does not seem that contenteditable was not built for embedding HTML and treating that HTML as an indivisible, immutable unit. I started going down the route of implementing my own drag and drop logic, and I quickly realized that it was completely buggy. And I think it's all because we are working within a contenteditable.\nI think if you wanted to do this sort of thing right, you'd have to get rid of contenteditable completely and implement it from scratch using plain JavaScript just like Google Docs does (cursor, selections, dragging and dropping, everything). It's a real shame and I wish there were better support for this in the browser.. ",
    "laurensiusadi": "@alexkrolick I'm making something similar. How do I make that 'meta-layout' thing? Using an iframe?\nCan I get a demo on this?. I'm using VueJS with vue editor quill package https://github.com/davidroyer/vue2-editor\nThey have blur, and focus event by checking quill selection-change\nThis part of code works for me (this.$emit tells parent component an event occur)\nthis.quill.on('selection-change', range => {\n  this.$emit('selection-change', range)\n  if (!range) {\n    this.$emit('blur', this.quill)\n  } else {\n    this.$emit('focus', this.quill)\n  }\n});. @sgbrito I make a custom blot that extends ListItem, and add uuid to every node, as in create and split function in ListItem, just add node.setAttribute(\"id\", uuid.v4())\nSee: https://github.com/laurensiusadi/vue-hoodie-todo/blob/master/src/components/editor/CustomListItem.js\nEach time editor change is made, iterate on all <li> which have attribute ID, and parent (ul) have data-checked attribute. Then proceed to do something with those items.\nThis might not be the best solution but it works. I think a better solution would be using Slate JS, since it supports custom blocks better. But I haven't had luck too.. ",
    "l3ernardo": "@mcmire I\u00b4m trying to embed a form in the quill editor. Seems like you\u00b4ve done similar maybe you can help me\nAfter reading over the documentation I created an formBlot by also subclassing BlockEmbed.\n// formBlock.js file:\nimport * as Quill from 'quill';\nconst formEmbed = Quill.import('blots/block/embed');\nexport class CustomBlock extends BlockEmbed {\n  / stuck here creating the form fields, just looking for few radio buttons that would set an pre-define template on the editor based on the choose, /\n}\nCustomBlock.blotName = 'custom';\nCustomBlock.tagName = 'form';\nWould like to know how you set the fields for your form, in case you also have done it.. @mcmire I\u00b4m trying to embed a form in the quill editor. Seems like you\u00b4ve done similar maybe you can help me\nAfter reading over the documentation I created an formBlot by also subclassing BlockEmbed.\n// formBlock.js file:\nimport * as Quill from 'quill';\nconst formEmbed = Quill.import('blots/block/embed');\nexport class CustomBlock extends BlockEmbed {\n  / stuck here creating the form fields, just looking for few radio buttons that would set an pre-define template on the editor based on the choose, /\n}\nCustomBlock.blotName = 'custom';\nCustomBlock.tagName = 'form';\nWould like to know how you set the fields for your form, in case you also have done it.. ",
    "borodean": "Same happend with headings. Paste this:\nhtml\nBefore the list\n<h2>Heading 2</h2>\nAnd you'll get the first line formatted as an another h2.. Not a Quill contributior, but I think this behavior is valid \u2013 Word and Google Docs behave the same way. To split the heading and keep the style you should insert an actual line break: shift + enter.. @mxgr7 could you please help figuring out why does the thing you've suggested helps? How does that magic works?. ",
    "anztrax": "thanks @puopg , save my day \ud83d\udc4d . ",
    "nikhil4092": "@jhchen Hey. If you could check this out when you are free, that would be great. Thanks.. Did you try it here  https://frozen-tundra-71946.herokuapp.com/  Are you able to reproduce it there? You need to click around a bit and then some paragraphs have that issue. Similar to the video link I had given earlier, you need to click around and double click on paragraphs, It happens then.\nI have put up the whole code on git hub without any changes. https://github.com/nikhil4092/Quilltest. ",
    "timeiscoffee": "@jhchen is this an expected behavior?. ",
    "carloshpds": "These messages should never be at the theme. It's not easy to apply i18n by the css instead of use some javascript. . ",
    "fabienbranchel": "How can I get the whitelist of link formats ?\nI found this in your doc : \nvar FontAttributor = Quill.import('attributors/class/font');\nFontAttributor.whitelist = [\n  'sofia', 'slabo', 'roboto', 'inconsolata', 'ubuntu'\n];\nQuill.register(FontAttributor, true);\nI want to replicate this, doing :\nvar LinkFormats = Quill.import('formats/link');\nconsole.log(LinkFormats.whitelist);\nBut LinkFormats.whitelist is undefined, so it's probably not the good way.. ",
    "volser": "The issue was with that style:\n-webkit-user-modify: read-write !important;. Without this styles - all ok )). Android app for tests\nhttps://github.com/volser/quilljs_android_test. I experienced the same issue when text starts with Embed blot and Select all (Ctrl+A) then start typing\nhttp://recordit.co/l4KSmQppoM. because your handler returns undefined, your return inside setTimeout. You can update content after request\nquill.updateContents(\n    new Delta()\n      .retain(quill.getSelection().index)\n      .insert('Hello', { bold: true })\n      .insert({ image: 'https://octodex.github.com/images/labtocat.png' })\n      .insert('World!')\n));. I don't see here related issues.\nit's not format issue.\nHighlightjs add own classes to DOM elements, but after deleting code-block, DOM elements are not restored . is it intentional behavior?. found solution\neditor.setContents(...);\neditor.history.clear();\nis it correct way?\n. ",
    "nipunjain87": "Resolving this issue has created another issue.\nIf we add an image to rich-text-editor using image toolbar, the cursor should move at end of image. But it is maintaining it's position.\nThis is not user friendly as user normally moves forward and he/she will have to manually click after the \nimage to continue adding content.\nCompare below mentioned pens:-\n1. Version 1.2.5: https://codepen.io/anon/pen/qXVoJN\n2. version 1.2.2: http://codepen.io/anon/pen/KWXwgw\nSteps:\n1. Place the cusror somewhere in editor.\n2. Upload image using image toolbar\n3. In Pen1, the cursor will remain at its position, while in pen2, it would go after image.\nThis issue was not present in build no 1.2.4 and got introduced in 1.2.5.. Resolving this issue has created another issue.\nIf we add an image to rich-text-editor using image toolbar, the cursor should move at end of image. But it is maintaining it's position.\nThis is not user friendly as user normally moves forward and he/she will have to manually click after the \nimage to continue adding content.\nCompare below mentioned pens:-\n1. Version 1.2.5: https://codepen.io/anon/pen/qXVoJN\n2. version 1.2.2: http://codepen.io/anon/pen/KWXwgw\nSteps:\n1. Place the cusror somewhere in editor.\n2. Upload image using image toolbar\n3. In Pen1, the cursor will remain at its position, while in pen2, it would go after image.\nThis issue was not present in build no 1.2.4 and got introduced in 1.2.5.. ",
    "rachelrab": "I tried what you sent, it's not what I need.\nI need the default to actually appear on the html resulted\nmeaning, when the default is 16px, and I write in the control \"some text\", the html value should be: \n<p><span style=\"font-size: 16px;\">some text</span></p>. ",
    "seanippolito": "Is this complete? Would like to see the Authorship module implemented so the Cursors module can be updated.. ",
    "VioletPixel": "In 1.3.0, I fixed this on both desktop (Safari 10, macOS 10.12) and mobile (Safari, iOS 10.3) by modifying the Clipboard module's onPaste() function.  I added this:\nthis.container.style.position = 'fixed';\nthis.container.style.zIndex = '-1';\nImmediately prior to this:\nthis.container.focus();\nWhich makes sure the paste destination is both in view (position: fixed) and not visible (z-index: -1), so no scrolling is required.. Looking through the other issues, I think this might be related to https://github.com/quilljs/quill/issues/898.. ",
    "DmitrySkripkin": "Another workaround. I added eventListener to scrollingContainer and move .ql-clipboard so it can be focused without scroll. This works for desktop and mobile. Maybe I didn't test it enough, but looks like 100% working solution.\n  . There is Document.caretPositionFromPoint() so you can get/set caret position based on pixel offsets. I use it when I need to set caret to begging of paragraph's last line. . @meantime is it ready for PR? Do you need any help with tests?. No errors on Google Chrome Version 58.0.3029.96 (64-bit) Ubuntu 16.04.\nThat's not a Quill bug. It's browser regular behavior. I had same case. So my realization of D&D looks like that:\n1. I disable any native default D&D for element (ex. <img src=\"...\" draggable=\"false\" />). Then add draggable=\"true\" to root element of my custom blot.\n2. Then I listen to dragstart event to add blot data to event dataTransfer:\n// I know code is useless without context but\nnode.addEventListener('dragstart', function(e) {\n  e.dataTransfer.effectAllowed = 'move';\n  e.dataTransfer.setData('blot', JSON.stringify(data));\n});\n3. Then I handle drop and create a new embed with insertEmbed and data I passed. And also remove original blot.\nYou have to make your own realization. I believe Quill won't have any build in D&D feature - it requires too much customization for each individual case. . Check this codePen https://codepen.io/ivanalejandro0/pen/LbyNYW it has similar behavior.\n1. Add mention\n2. Change text. Add character, don't remove (but you can modify it for your case)\n3. Mention becomes plain text. This is default a behavior for block blots.\nSo editor's html content looks like that:\n<iframe><iframe />\n<p>...<p>\nIf you remove extra paragraph there is no place where caret can go. You cannot set caret to iframe or whatever is not inline or text. You should be able to type. That's why it works in other way for <img>.\nSo you can use js or css to remove or hide this extra <p>. Or you can use your own custom inline blot. Or you can listen to selection change to handle your case.\nP.S. contenteditable=\"true\" is a real pain.. This may be related to https://github.com/quilljs/quill/issues/627#issuecomment-207662188 . I tried getLine() and it magically works fine for me. But what is the difference between leaf and line?. I tried to create MCVE, but no success. Looks like it was something wrong in my code.. As I understood creating a new range with start at anchor + Selection.extend() is a real way to do define direction. I suggest something like setSelection(10, -4) would be nice and clean. We just have to modify setSelection() to support negative length values.. Don't know if it will course any other problems and conflicts.. Tried to play with it in my forked version. I'm able to set and get reversed selection range. But I ran into 3 problems.\n\nI have to use MDN - Selection.extend that doesn't works for IE. Looks like it's the only way to set reversed selection.\nWhen I set/get selection I check if it's reversed. So I create a range as usual and then check if it has been collapsed (by browser). Don't know if there is better solution.\nThere is various methods like getText() and others remains the same and does not support reversed selection.\n\nI can make PR as soon as I figure out how to deal with it.. @meantime that makes sense. I tried to implement it like setSelection(10, -4) and it breaks a lot of things in Quill itself and custom code. And it also keeps getText() and other methods and functions valid as is.. Don't know if it's ready for PR. All tests are passing. #1773 . You have to initialize Quill and use setContent() to load your data and then use innerHTML or something like that to get html. Or you can look for third-party repos like that:\nhttps://www.npmjs.com/package/quill-delta-to-html\nhttps://www.npmjs.com/package/delta-to-html\nhttps://www.npmjs.com/package/delta-transform-html\nQuill doesn't have a \"build in, easy and fast\" method to do that. You can see discussion here https://github.com/quilljs/quill/issues/993. Quill has default binding for tab, so you have to overwrite the default one (https://quilljs.com/docs/modules/keyboard/#configuration).\nAccording to docs you can not overwrite default bindings with addBinding. I took following code from docs, it works as expected.\n```\nvar bindings = {\n  // This will overwrite the default binding also named 'tab'\n  tab: {\n    key: 9,\n    handler: function() {\n      // Handle tab\n    }\n  },\n// There is no default binding named 'custom'\n  // so this will be added without overwriting anything\n  custom: {\n    key: 'B',\n    shiftKey: true,\n    handler: function(range, context) {\n      // Handle shift+b\n    }\n  }\n};\nvar quill = new Quill('#editor', {\n  modules: {\n    keyboard: {\n      bindings: bindings\n    }\n  }\n});\n``. This is how delta works. I don't like it, but here is [explanation](https://quilljs.com/guides/designing-the-delta-format/#line-formatting).. What do you mean? Bubble theme toolbar already has some kind of this behavior. You just have to specifyboundshttps://quilljs.com/docs/configuration/#bounds .\n![bubble-theme screencast](https://s3-eu-west-1.amazonaws.com/fs.dev-lds.ru/files/f09914bf-78b8-e85d-ab75-3441e3ec1c43/toolbar.gif). I didn't try to setting bound to anything expect.ql-editor` or it's parent. Setting it to some element above editor sounds like a good idea to achieve \"always above selection\" behavior. But I'd rather test it more :). Well, you have 'selection-change' event. You can catch focus and blur easily:\nCodePen blur/focus example\nI think the problem is blur event fired when quill toolbar is clicked (like header formatting, links etc.). I don't know how it works and why update is not called. But there is method called optimize() which works ok for me. But I feel really uncomfortable and hope anyone can explain it.. I don't know how it works and why update is not called. But there is method called optimize() which works ok for me. But I feel really uncomfortable and hope anyone can explain it.. That's not an issue.\nYou can see icons list here icons.js.\nSo Quill has list, script and indent icons, but you need to pass more then just list. Also you can modify icons yourself if there is no icon in the list (like size).\nPlease, check this CodePen example\n. That is great. Sorry I don't know much about iOS development, but I see something called \"CSSParser\". What about custom blots and formats (mentions hashtags and etc.)?. That is great. Sorry I don't know much about iOS development, but I see something called \"CSSParser\". What about custom blots and formats (mentions hashtags and etc.)?. Don't know whats wrong, but just checked source code and build.\nSOURCE\njavascript\n'list autofill': {\n      key: ' ',\n      collapsed: true,\n      format: { list: false },\n      prefix: /^\\s*?(1\\.|-|\\[ ?\\]|\\[x\\])$/,\n      handler: function(range, context) {\n        let length = context.prefix.length;\n        let [line, offset] = this.quill.getLine(range.index);\n        if (offset > length) return true;\n        let value;\n        switch (context.prefix.trim()) {\n          case '[]': case '[ ]':\n            value = 'unchecked';\n            break;\n          case '[x]':\n            value = 'checked';\n            break;\n          case '-':\n            value = 'bullet';\n            break;\n          default:\n            value = 'ordered';\n        }\n        this.quill.insertText(range.index, ' ', Quill.sources.USER);\n        this.quill.history.cutoff();\n        let delta = new Delta().retain(range.index - offset)\n                               .delete(length + 1)\n                               .retain(line.length() - 2 - offset)\n                               .retain(1, { list: value });\n        this.quill.updateContents(delta, Quill.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index - length, Quill.sources.SILENT);\n      }\nDIST\njavascript\n'list autofill': {\n      key: ' ',\n      collapsed: true,\n      format: { list: false },\n      prefix: /^\\s*?(1\\.|-|\\[ ?\\]|\\[x\\])$/,\n      handler: function handler(range, context) {\n        if (this.quill.scroll.whitelist != null && !this.quill.scroll.whitelist['list']) return true;\n        var length = context.prefix.length;\n        var value = void 0;\n        switch (context.prefix.trim()) {\n          case '[]':case '[ ]':\n            value = 'unchecked';\n            break;\n          case '[x]':\n            value = 'checked';\n            break;\n          case '-':\n            value = 'bullet';\n            break;\n          default:\n            value = 'ordered';\n        }\n        this.quill.scroll.deleteAt(range.index - length, length);\n        this.quill.formatLine(range.index - length, 1, 'list', value, _quill2.default.sources.USER);\n        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n      }\n    },\nSo if (offset > length) return true; is not there. It's missing. I'll try to build it on my own to check what is the reason.. Yep, I ran npm run build and get this:\n```javascript\n'list autofill': {\n      key: ' ',\n      collapsed: true,\n      format: { list: false },\n      prefix: /^\\s*?(1.|-|[ ?]|[x])$/,\n      handler: function handler(range, context) {\n        var length = context.prefix.length;\n    var _quill$getLine7 = this.quill.getLine(range.index),\n        _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),\n        line = _quill$getLine8[0],\n        offset = _quill$getLine8[1];\n\n    if (offset > length) return true;\n    var value = void 0;\n    switch (context.prefix.trim()) {\n      case '[]':case '[ ]':\n        value = 'unchecked';\n        break;\n      case '[x]':\n        value = 'checked';\n        break;\n      case '-':\n        value = 'bullet';\n        break;\n      default:\n        value = 'ordered';\n    }\n    this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);\n    this.quill.history.cutoff();\n    var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });\n    this.quill.updateContents(delta, _quill2.default.sources.USER);\n    this.quill.history.cutoff();\n    this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n  }\n},\n\nSo something is wrong with the release build. And probably with older releases too.. Ops. My bad. It's not in release but in dev. And issue is already closed.. Thank you! I will fix the code and add tests this week hopefully.. Thank you! I will fix the code and add tests this week hopefully.. Updated, no tests yet. Going to add some this weekend.. Updated, no tests yet. Going to add some this weekend.. Sorry, didn't check this PR for a looong time. I don't understand why Travis failed. Looks like it's not my fault, but something wrong with the CI.\n`13 11 2017 09:18:08.430:ERROR [launcher.sauce]: Can not start safari 10.0 (OS X 10.12)`. Sorry, didn't check this PR for a looong time. I don't understand why Travis failed. Looks like it's not my fault, but something wrong with the CI.\n`13 11 2017 09:18:08.430:ERROR [launcher.sauce]: Can not start safari 10.0 (OS X 10.12)`. Each list item should be aligned vertically so every letter \"a\" has same position. So we have to move  number, not content. I use custom css in my app so it looks like this:\n![screenshot](https://s3-eu-west-1.amazonaws.com/fs.dev-lds.ru/files/daf74c8a-3996-3e1d-ac28-a17bdd20972e/image.png)\nBut what we going to do if number is to big to fit container that has `overflow: hidden`?. @Natim, don't know if `flex` is ok for you. Here is [CodePen example](https://codepen.io/DmitrySkripkin/pen/vePdWY)\nAnd the CSS I've added:\n.ql-editor li {\n  position: relative;\n}\n.ql-editor li::before {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  word-break: keep-all;\n  padding: inherit;\n  display: flex;\n  justify-content: flex-end;\n}\n. `checklist enter` keyboard handler is the reason, don't know what is the usecase for it. But it works in a different way for `checked` and `unchecked` list items. . `checklist enter` keyboard handler is the reason, don't know what is the usecase for it. But it works in a different way for `checked` and `unchecked` list items. . Quill doesn't work with HTML, it works with own Delta format. But you can get HTML from selection easily with plain js and browser API (you can paste this snippet to your browser console to test it):\nvar selection = window.getSelection();\nif (selection.rangeCount > 0) {\n  var range = selection.getRangeAt(0);\n  var documentFragment = range.cloneContents();\n}\nconsole.log(documentFragment || 'nothing selected');\n. Quill doesn't work with HTML, it works with own Delta format. But you can get HTML from selection easily with plain js and browser API (you can paste this snippet to your browser console to test it):\nvar selection = window.getSelection();\nif (selection.rangeCount > 0) {\n  var range = selection.getRangeAt(0);\n  var documentFragment = range.cloneContents();\n}\nconsole.log(documentFragment || 'nothing selected');\n```. Check this CodePen\nI was sure I posted comment with the link same day you add your last comment. Sorry.. Check this CodePen\nI was sure I posted comment with the link same day you add your last comment. Sorry.. I think it's the same issue. Instead \"Hit delete button\" paste multiple paragraphs. The last one will have title format. And title is a plain text now.. I think it's the same issue. Instead \"Hit delete button\" paste multiple paragraphs. The last one will have title format. And title is a plain text now.. Wierd. This codePen  works fine.. You need editor content to be selected to apply formatting. If you \"tabbed\" to something else then editor is not focused anymore and there is no sense in triggering toolbar controls.\nI think expected behavior is \"Tab focus shouldn't come on toolbar controls\"\nBut if you want 100% keyboard accessibility you can use keyboard bindings or Markdown-like shortcuts to apply formatting.\n. You need editor content to be selected to apply formatting. If you \"tabbed\" to something else then editor is not focused anymore and there is no sense in triggering toolbar controls.\nI think expected behavior is \"Tab focus shouldn't come on toolbar controls\"\nBut if you want 100% keyboard accessibility you can use keyboard bindings or Markdown-like shortcuts to apply formatting.\n. Had similar problem. Element that has font-weight: 700 is transformed to bold. I changed clipboard source code to fix it. Quill is not flexible enough to fit all the cases.. Here is codePen, a bit tricky but it updates toolbar dynamically.\nIn order to show/hide buttons you have to extend and re-register theme and modify buildButtons() and buildPickers().\nBut yep, that's a terrible workaround.. Here is codePen, a bit tricky but it updates toolbar dynamically.\nIn order to show/hide buttons you have to extend and re-register theme and modify buildButtons() and buildPickers().\nBut yep, that's a terrible workaround.. I think it's related to #993 \nQuill doesn't have any built-in tool to render delta without DOM APIs. You can try some third-party repos. \nPersonally I failed with it (tried all repos I can find), there is a difference in HTML + custom formats and blots are pain.\nIt's the big missing part in Quill :-1: . I think it's related to #993 \nQuill doesn't have any built-in tool to render delta without DOM APIs. You can try some third-party repos. \nPersonally I failed with it (tried all repos I can find), there is a difference in HTML + custom formats and blots are pain.\nIt's the big missing part in Quill :-1: . Here is codePen and I don't see any problem. Maybe you're missing something in your issue so I can't reproduce it.. Here is codePen and I don't see any problem. Maybe you're missing something in your issue so I can't reproduce it.. {ops: [ {insert: '\\n'} ]} is rendered as <p><br></p> and It's correct. \nWhen Quill is empty it has this empty paragraph  with the breakline, so i has height and user can click it. Basically setContents({ops: [{insert: '\\n'}]}) has same result as setText('').. {ops: [ {insert: '\\n'} ]} is rendered as <p><br></p> and It's correct. \nWhen Quill is empty it has this empty paragraph  with the breakline, so i has height and user can click it. Basically setContents({ops: [{insert: '\\n'}]}) has same result as setText('').. Yep, here is better explanation issue comment link. Sorry, was't able to find it before.. Yep, here is better explanation issue comment link. Sorry, was't able to find it before.. It's already prevented by clipboard module by default. Do you have any specific case or codePen example? You can't paste it to quill without sanitation and it won't be stored at delta anyway.. It's already prevented by clipboard module by default. Do you have any specific case or codePen example? You can't paste it to quill without sanitation and it won't be stored at delta anyway.. You can use keyboard module bindings. Just check that caret position and context and remove whatever is needed. How does your delta with mentions look like?. You can use keyboard module bindings. Just check that caret position and context and remove whatever is needed. How does your delta with mentions look like?. That makes no sense, delta is a core format for storing data in quill.\nDon't if it can help you. But\nquill.setContents(<big delta>);\nquill.setContents(<another big delta>);\nis much more slower then:\nquill.setContents(<big delta>);\nquill.setContents([]);\nquill.setContents(<another big delta>);\nCan you provide some example or just describe what methods or operations are executed when you see performance problems.. > It appears as though a pre-existing handler runs first and prevents my handler from running. Is there a way to put my handler first?\nYes. You can overwrite the default binding, problem is you can't do with addBinding() but only with configuration just like this docs example: Keyboard Module configuration. I dig a bit deeper. Default tab handler does not return anything. So even if you add a new binding it won't be executed anyway.\nThis means you have to rewrite it - basically copy/paste it or use method with unshift() you mentioned above.\nP.S. Quill is not perfect, I would like to have more flexible bindings with some kind of weights to sort them.. Here is minimal example https://codepen.io/DmitrySkripkin/pen/BPbOyR just paste content from word to see the difference.\nThis is not related to quill, just make sure that .ql-clipboard has white-space: normal.. Here is minimal example https://codepen.io/DmitrySkripkin/pen/BPbOyR just paste content from word to see the difference.\nThis is not related to quill, just make sure that .ql-clipboard has white-space: normal.. Yep. It's a weird that quill resets format after navigation. \nQuill should always keep format or reset it when you hit enter first time. Don't know what's better.\nJust few examples:\n1. Google docs - always keeps format\n2. Dropbox paper and Notion always resets format after enter\nThat's just one of the problems with Quill and Delta.. Yep. It's a weird that quill resets format after navigation. \nQuill should always keep format or reset it when you hit enter first time. Don't know what's better.\nJust few examples:\n1. Google docs - always keeps format\n2. Dropbox paper and Notion always resets format after enter\nThat's just one of the problems with Quill and Delta.. Check this quill-sharedb-cursors and quill-cursors out.. That just doesn't make sense. Deltas are in the root concept of Quill. You can always get HTML of .quill-editor and do any kind of manipulations directly.. Well, there are other default handlers for tab like indent, outdent and outdent backspace. You can check this file https://github.com/quilljs/quill/blob/develop/modules/keyboard.js#L184\nSo you have to overwrite more :). Duplicated issue - https://github.com/quilljs/quill/issues/1225. Tried to play around with Google Docs and MS Word and was not able to mix ordered and unordered lists. But Notion and Paper can do it (with minor issues).. Upload process can be completely different in different projects. I don't think we can make universal module for upload.. I just rewrote clipboard.prototype.onPaste in my project. But it would much better to have isolated pure function to normalize clipboard data.. CodePen example would be great. Not sure if I understand this issue.. This is not a bug, but a confusing feature.\nmatchVisual: false option makes it work as expected.\nFixed example. There is keyboard binding called list autofill, you can overwrite it if you want and redefine prefix regexp like I did here CodePen.\nOr you can press Shift+Spacebar if you don't want list shortcut to be triggered.. @natterstefan you already helped everyone to find issue nobody noticed :)\nI just wonder, do I need to create pull request for this issue, or it's \"by design\". Need approval from @jhchen, \u043er somebody who can make decisions.. Updated CodePen, now list formatting won't be triggered on \"11. \".. Looks like it is not a problem of quill itself. I think problem is in scopes, please make sure variable named quill is available at your onsubmit handler function. Try to move quill to global scope so it will be window.quill, just to make sure it works.. This operations seems to be synchronous, so I think there is no way to get progress. But I might be wrong. Need some time to check what options we have. I didn't mention it to be slow, clipboard is fast enough.\nSmall tip (this probably not relevant to the issue). Every setContents() returns diff, it's really slow. If you want to perform setContents() faster just do setText('') before setContents() to reduce diff work.. Oh, ok. Converting process seemed to be recursive, it's not to easy to get progress.. It's not possible. Editor value is stored as delta and there is no support for tables (not sure about dev version), so it's trimmed.. You have to create new format or embed to do that (that's fairly easy).. Nope. CodePen with icon presented. There is default keyboard binding keyboard.js:364. You have to override it.. Well, actually the question is what code doesn't allow to format text inside code-block.. ",
    "jrluiscarvalho": "Hello everyone!\nI`ve had a \"scroll jump\" problem when i select a text with more of two paragraphs in mobile devices, android and IOS. I tried configuring \"scrollingContainer\" but not works. Any one have ideas for this solution?. ",
    "thomasdao": "Hi @jhchen @sferoze if we put the paste content editable as child of the container, then there's no scroll jumping when the container is re-focused. I modified your original jsfiddle here https://jsfiddle.net/p2pgrxdc/6/, when I paste content into #b element, there is no scrolling. Could this be the solution to the problem?. However when I've tried putting the paste contenteditable (.ql-clipboard) inside ql-editor, Quill trigger error. I guess if we need to go with that solution it would probably need to modify Quill core.... Just to update some initial finding, I found the issue is with the keyboard module - it has listened to keydown event and on enter it calls event.preventDefault(), which makes iOS keyboard does not work correctly. I tried commenting event.preventDefault(), but when user clicks Enter the editor would show two new lines. Then I tried commenting this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter) then the keyboard and new line behave correctly, but now potentially the html is out of sync with quill delta.. @chrisnharvey I have to move away from Quill due to its problem on iOS devices. iOS browser is a little fragile, simply intercepting some events and call event.preventDefault() can end up in multiple UX problems. I think the only good solution for iOS now is to use plain contenteditable and avoid calling event.preventDefault() as much as possible. I tried many other libraries like Trix, ProseMirror, etc, they all have problem in iOS.. ",
    "Edza": "Extra problem:\nQuill is in an iframe. On paste, the whole page (outside of the iframe) gets scrolled HORIZONTALLY to left. Not even sure what to do.. ",
    "DeanBDean": "@sferoze @jhchen We are also experiencing this issue. I have modified the jsfiddle as well, and it seems to work for me in the browser as well as on iOS.\nhttps://jsfiddle.net/DeanBDean/xLtzde6w/7/\nIf this solution is acceptable, I have no problem opening a PR on it.. Unfortunately @jhchen we did try this. The problem is that one of the dependencies that it tries to import is picker.js. Picker.js references an svg. In the webpack build, it resolves this svg to a string I believe. But since we're trying to import the file that hasn't been webpacked, it is unable to parse this svg. I understand wanting to keep it an internal implementation detail, unfortunately we are trying to avoid having to just copy/paste that whole class and then keep up with it as changes occur. It seems to me like the tooltips for the themes would be a logical thing to want to extend for customization, I'm just not sure of the best path forward for that.. Unfortunately @jhchen we did try this. The problem is that one of the dependencies that it tries to import is picker.js. Picker.js references an svg. In the webpack build, it resolves this svg to a string I believe. But since we're trying to import the file that hasn't been webpacked, it is unable to parse this svg. I understand wanting to keep it an internal implementation detail, unfortunately we are trying to avoid having to just copy/paste that whole class and then keep up with it as changes occur. It seems to me like the tooltips for the themes would be a logical thing to want to extend for customization, I'm just not sure of the best path forward for that.. ",
    "ZhangCD1919": "I'm using this editor with version is 1.3.6  in my project too, and my users found this problem, here is the fix I applied.\nFirst, I try to find why does this question comes up. I found the process of handle 'onpaste'  goes through  two 'focus'.\nThe first is in the 'onpaste' function: this.container.focus();\nThe second is in the 'setNativeRange' function:  if (!this.hasFocus()) this.root.focus();\nAfter I found these two places, I found 'this.container' is a contenteditable div which is the supporter of pasting texts.  In css file I found it's position is absolute and it's top is 50%; So it's the jump problem's first reason. After you paste something, this div will be focused, and it's position of top is 50%(center), so, the page will scroll to center.\nAfter that, I found 'this.root' is the whole editor div. If 'this.root'  wants to focus, the page will scroll to top ,which is the position of \u2018this.root\u2019 at. Absolutely we do not want this. So let's see what 'this.hasFocus()' judges.\nIn the function 'hasFocus', I found  these codes: \nfunction hasFocus() {\n      return document.activeElement === this.root;\n }\nAfter the handles 'onpaste' function has done, until now, 'document.activeElement' is 'this.container', because 'this.container' was just be focused. So, the judge is absolutely false.  then, the focus in the second will be executed. Page focus on the editor div, scroll to the top.\nOn the basis of the above analysis\uff0cI made two adjustments to the code.\nOne: change the 'position' of 'this.container' to 'fixed', and 'top' to '14px', let it stay in the viewport forever. When it be focused will not change the scroll of page.\nTwo: change the judge of  setNativeRange, when 'this.container' is the activeElement, do not execute this.root.focus().\nhere is my changes:\ncss file \n.ql-clipboard {\n        left: -100000px;\n        height: 1px;\n        overflow-y: hidden;\n        position: fixed;   // changed\n        top: 14px;   // changed\n  }\njs file\n` {  key: 'setNativeRange',\n    value: function setNativeRange(startNode, startOffset) {\n      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n  if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n    return;\n  }\n  var selection = document.getSelection();\n  if (selection == null) return;\n  if (startNode != null) {\n    if (!this.hasFocus() && !document.activeElement) this.root.focus();  // changed\n    var native = (this.getNativeRange() || {}).native; \n  .........   //  other codes don't need change\n\nthe js file which I change is under the dist Folder\uff0cnamed quill.js, then I copy the file out to used in my project, because I can't change the code in node_module\n`\nAfter I done these changes, I found it works good, expect when the paste thing is too long to over the bottom view, the page does not scroll down to view them. It's a problem but is not so bad. And I think it's easier to solve then this problem. I'm using this method now, and had not found other effects yet. If you finds something bad, please tell me and I will find method to handle it. \nSorry for my English, hope these texts help you a little or more.\nI will try to comit my changes to author, if my changes are good, I think he will adopt and fix this in the next version\uff0cif these comes true, it will be my big honour~\n. I'm using this editor with version is 1.3.6  in my project too, and my users found this problem, here is the fix I applied.\nFirst, I try to find why does this question comes up. I found the process of handle 'onpaste'  goes through  two 'focus'.\nThe first is in the 'onpaste' function: this.container.focus();\nThe second is in the 'setNativeRange' function:  if (!this.hasFocus()) this.root.focus();\nAfter I found these two places, I found 'this.container' is a contenteditable div which is the supporter of pasting texts.  In css file I found it's position is absolute and it's top is 50%; So it's the jump problem's first reason. After you paste something, this div will be focused, and it's position of top is 50%(center), so, the page will scroll to center.\nAfter that, I found 'this.root' is the whole editor div. If 'this.root'  wants to focus, the page will scroll to top ,which is the position of \u2018this.root\u2019 at. Absolutely we do not want this. So let's see what 'this.hasFocus()' judges.\nIn the function 'hasFocus', I found  these codes: \nfunction hasFocus() {\n      return document.activeElement === this.root;\n }\nAfter the handles 'onpaste' function has done, until now, 'document.activeElement' is 'this.container', because 'this.container' was just be focused. So, the judge is absolutely false.  then, the focus in the second will be executed. Page focus on the editor div, scroll to the top.\nOn the basis of the above analysis\uff0cI made two adjustments to the code.\nOne: change the 'position' of 'this.container' to 'fixed', and 'top' to '14px', let it stay in the viewport forever. When it be focused will not change the scroll of page.\nTwo: change the judge of  setNativeRange, when 'this.container' is the activeElement, do not execute this.root.focus().\nhere is my changes:\ncss file \n.ql-clipboard {\n        left: -100000px;\n        height: 1px;\n        overflow-y: hidden;\n        position: fixed;   // changed\n        top: 14px;   // changed\n  }\njs file\n` {  key: 'setNativeRange',\n    value: function setNativeRange(startNode, startOffset) {\n      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n  if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n    return;\n  }\n  var selection = document.getSelection();\n  if (selection == null) return;\n  if (startNode != null) {\n    if (!this.hasFocus() && !document.activeElement) this.root.focus();  // changed\n    var native = (this.getNativeRange() || {}).native; \n  .........   //  other codes don't need change\n\nthe js file which I change is under the dist Folder\uff0cnamed quill.js, then I copy the file out to used in my project, because I can't change the code in node_module\n`\nAfter I done these changes, I found it works good, expect when the paste thing is too long to over the bottom view, the page does not scroll down to view them. It's a problem but is not so bad. And I think it's easier to solve then this problem. I'm using this method now, and had not found other effects yet. If you finds something bad, please tell me and I will find method to handle it. \nSorry for my English, hope these texts help you a little or more.\nI will try to comit my changes to author, if my changes are good, I think he will adopt and fix this in the next version\uff0cif these comes true, it will be my big honour~\n. ",
    "ArsalanSavand": "For those who are struggling with this bug, here is the fix.\nBe sure to set the scrollingContainer to 'html, body': scrollingContainer: 'html, body'\n```js\nimport Quill from 'quill';\nimport Delta from 'quill-delta';\nconst Clipboard = Quill.import('modules/clipboard')\nclass CustomClipboard extends Clipboard {\n  onPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    this.container.style.top = (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0).toString() + 'px';\n    this.container.focus();\n    setTimeout(() => {\n      this.quill.selection.update(Quill.sources.SILENT);\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      let bounds = this.quill.getBounds(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = bounds.top;\n    }, 1);\n  }\n}\nQuill.register('modules/clipboard', CustomClipboard, true);\n```\nI hope this actually fix the bug.. @anatolyrr with the code I provided I also fixed the issue where when you paste anything, the screen wouldn't jump to it. The code fixes both:\n- When pasting your clipboard into the editor, screen will scroll to the top of the page.\n- When pasting your clipboard into the editor, the screen wouldn't scroll to the content you just pasted.\nTake a look at the code, it will 100% fix the issue. Code. @DexterHD I mentioned all the bugs I fixed https://github.com/quilljs/quill/issues/1374#issuecomment-415575851\nThe screen jumping to the clipboard you paste is correct, this is the default way of an editor.\nBut in your case, you can modify it and add custom lines.\nGood luck.. @DexterHD It's actually correct, imagine having the editor with scrollbar, when hitting enter on the last line the editor should redirect you to the last line whether you are at the top of the page or the bottom of the page.\nLet's say the cursor is at the last line, and user doesn't know that. When user writes anything page should scroll to the line he just wrote.. @DexterHD I saw the video, if you don't want your screen to jump to the content you just wrote or paste or even hitting enter, you can try this.\nBe sure to set the scrollingContainer to 'html, body': scrollingContainer: 'html, body'\n```js\nimport Quill from 'quill';\nimport Delta from 'quill-delta';\nconst Clipboard = Quill.import('modules/clipboard')\nclass CustomClipboard extends Clipboard {\n  onPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    this.container.style.top = (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0).toString() + 'px';\n    this.container.focus();\n    setTimeout(() => {\n      this.quill.selection.update(Quill.sources.SILENT);\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n    }, 1);\n  }\n}\nQuill.register('modules/clipboard', CustomClipboard, true);\n```\nAttention to everyone, this code is only for @DexterHD case, the fix is this code https://github.com/quilljs/quill/issues/1374#issuecomment-407888147. @andrei-cacio have you tried this solution? https://github.com/quilljs/quill/issues/1374#issuecomment-407888147\nRead it carefully, it should work like charm.. @f3ltron you need to first this.quill.focus() then set the selection.. ",
    "anatolyrr": "In my case the editor is inside a different scrolling container, not 'html, body', which is why the above-mentioned fixes didn't exactly suit.\nThis simple workaround though did the job perfectly:\n.ql-clipboard {\n    position: fixed;\n}. ",
    "hakonleung": "@ArsalanSavand it didnt work for me, i found scrollingContainer.scrollTop is always 0, because the real scroll element in my project is div.ql-editors father div#qlWrapper, so i init quill with option scrollingContainer: '#qlWrapper'  and then everything gos right without other code.. @ArsalanSavand its my fault, i know what you mean now, apreciate.. > It's easy to make a blot undeletable by overriding the base class deleteAt method with one that just returns false. To prevent editing I've been using a nested span with contenteditable=\"false\" set on it. It's still a little buggy but seems to work better than just setting contenteditable directly on the blot element.\n\nThe hard part is preventing replacement when the blot's part of a selection. I've got some progress by listening to keypress and making a list of any of my blots in the selected range and just reinserting them. It sort of works when the selection is confined to one block element but fails when it spans multiple blocks.\nHere's a pen to try it out\nedit - fixed the spanning multiple paragraphs, it's still pretty buggy though\n\nthx,  how can i define a user-undeletable blot, which means i can delete it by updateContents method?. thx @benbro, i have made it.. thx @benbro, i have made it.. A means <span class=\"wrapper\">A</span>\nAB means <span class=\"wrapper\">A</span>B but not <span class=\"wrapper\">AB</span>. A means <span class=\"wrapper\">A</span>\nAB means <span class=\"wrapper\">A</span>B but not <span class=\"wrapper\">AB</span>. I want to make a function that can clip image. Now i need to add an inline attribute to a image that wrap the image tag with span tag.\nit looks like <span style=\"overflow:hidden;width:100px;height:100px\"> <img /> </span>.\nand i dont want next text or image wrapped in the same span.\nso if i input A after the clipped image, html looks like:\n <span style=\"overflow:hidden;width:100px;height:100px\"> <img /> </span> A\nbut not\n <span style=\"overflow:hidden;width:100px;height:100px\"> <img />A </span>\n@DmitrySkripkin . I want to make a function that can clip image. Now i need to add an inline attribute to a image that wrap the image tag with span tag.\nit looks like <span style=\"overflow:hidden;width:100px;height:100px\"> <img /> </span>.\nand i dont want next text or image wrapped in the same span.\nso if i input A after the clipped image, html looks like:\n <span style=\"overflow:hidden;width:100px;height:100px\"> <img /> </span> A\nbut not\n <span style=\"overflow:hidden;width:100px;height:100px\"> <img />A </span>\n@DmitrySkripkin . > The dev release of tables doesn't support multiple lines per cell:\n\n\nDoes not allow multiple lines per cell or block level embeds (video) in cells\n\nEven if it did, you should probably add {retain: X} op before your insert op.\n\nthx, btw i just wanna insert \\n at index 0.. ",
    "DexterHD": "\nFor those who are struggling with this bug, here is the fix.\nBe sure to set the scrollingContainer to 'html, body': scrollingContainer: 'html, body'\n...\nI hope this actually fix the bug.\n\nDidn't work for me. After adding it editor scrolls down every time I paste a text or press Enter.\nBut I think it because I'm using Quill with https://github.com/zenoamaro/react-quill library.\n```javascript\nimport Quill from 'quill';\nimport Delta from 'quill-delta';\nconst Clipboard = Quill.import('modules/clipboard')\nclass CustomClipboard extends Clipboard {\n  onPaste(e) {\n    // get current page offset before paste\n    const top = window.pageYOffset;\n    const left = window.pageXOffset;\nif (e.defaultPrevented || !this.quill.isEnabled()) return;\nlet range = this.quill.getSelection();\nlet delta = new Delta().retain(range.index);\nthis.container.style.top = (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0).toString() + 'px';\nthis.container.focus();\nsetTimeout(() => {\n  this.quill.selection.update(Quill.sources.SILENT);\n  delta = delta.concat(this.convert()).delete(range.length);\n  this.quill.updateContents(delta, Quill.sources.USER);\n  this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n  let bounds = this.quill.getBounds(delta.length() - range.length, Quill.sources.SILENT);\n  this.quill.scrollingContainer.scrollTop = bounds.top;\n\n  // scroll window to previous position after paste\n  window.scrollTo({top, left});\n}, 1);\n\n}\n}\nQuill.register('modules/clipboard', CustomClipboard, true);\n```\nSo I add 3 lines of code that helps in my case. Two in start of function and one after.\njavascript\nconst top = window.pageYOffset;\nconst left = window.pageXOffset;\nwindow.scrollTo({top, left});. @ArsalanSavand Its, ok when it jumps to clipboard in place where I paste text. But in my case after I add scrollingContainer: 'html, body', every time I push Enter button in editor (Not copy and paste), it jumps down and down and down to end of the page.. @ArsalanSavand Yes. Except if I have unlimited size of my editor field in another form. I don't say you fix is wrong. It just not working in my case. Just look at screencast. I only press Enter (look to scroll). I can't explain it proper in English :( \nhttps://www.youtube.com/watch?v=0ssfHBBI9pM&feature=youtu.be\n. ",
    "locpnh1995": "\nFor those who are struggling with this bug, here is the fix.\nBe sure to set the scrollingContainer to 'html, body': scrollingContainer: 'html, body'\n...\nI hope this actually fix the bug.\n\nThis really help me a lot. ",
    "andrei-cacio": "Unfortunately none of the examples above work for my case. I still get awkward jumps when pasting and the UX is pretty unpleasant. However after I installed quill@2.0.0-dev.3, pasting seems to be fixed. There are no more jumps. Has the .ql-clipboard div been removed? Also how safe is to use this build in production?. Unfortunately none of the examples above work for my case. I still get awkward jumps when pasting and the UX is pretty unpleasant. However after I installed quill@2.0.0-dev.3, pasting seems to be fixed. There are no more jumps. Has the .ql-clipboard div been removed? Also how safe is to use this build in production?. After looking a bit in the history of the clipboard.js module I have found a working solution for me:\n```javascript\nclass CustomClipboard extends Clipboard {\n    onPaste(e) {\n        if (e.defaultPrevented || !this.quill.isEnabled()) return;\n        const range = this.quill.getSelection(true);\n        e.preventDefault();\n    const formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n    const html = e.clipboardData.getData('text/html');\n    const text = e.clipboardData.getData('text/plain');\n\n    let delta = new Delta().retain(range.index);\n    if (formats[CodeBlock.blotName]) {\n        delta.insert(text, {\n            [CodeBlock.blotName]: formats[CodeBlock.blotName],\n        });\n    } else if (!html) {\n        delta.insert(text);\n    } else {\n        const pasteDelta = this.convert(html);\n        delta = delta.concat(pasteDelta);\n    }\n    delta.delete(range.length);\n    this.quill.updateContents(delta, Quill.sources.USER);\n    // range.length contributes to delta.length()\n    this.quill.setSelection(\n        delta.length() - range.length,\n        Quill.sources.SILENT,\n    );\n    this.quill.scrollIntoView();\n}\n\n}\n```\nPlain and simple, injecting the pasted html. Are there any downsides to this solution?. After looking a bit in the history of the clipboard.js module I have found a working solution for me:\n```javascript\nclass CustomClipboard extends Clipboard {\n    onPaste(e) {\n        if (e.defaultPrevented || !this.quill.isEnabled()) return;\n        const range = this.quill.getSelection(true);\n        e.preventDefault();\n    const formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n    const html = e.clipboardData.getData('text/html');\n    const text = e.clipboardData.getData('text/plain');\n\n    let delta = new Delta().retain(range.index);\n    if (formats[CodeBlock.blotName]) {\n        delta.insert(text, {\n            [CodeBlock.blotName]: formats[CodeBlock.blotName],\n        });\n    } else if (!html) {\n        delta.insert(text);\n    } else {\n        const pasteDelta = this.convert(html);\n        delta = delta.concat(pasteDelta);\n    }\n    delta.delete(range.length);\n    this.quill.updateContents(delta, Quill.sources.USER);\n    // range.length contributes to delta.length()\n    this.quill.setSelection(\n        delta.length() - range.length,\n        Quill.sources.SILENT,\n    );\n    this.quill.scrollIntoView();\n}\n\n}\n```\nPlain and simple, injecting the pasted html. Are there any downsides to this solution?. hmm, I have copied the Table module from 2.0.0-dev.0 (with the custom blots TableContainer, TableRow, TableCell, TableBody) and simply pasted them in my project and registered the module like so:\nQuill.register('modules/table', TableModule);\nand when I initialize Quill I tell it to use the Table module too:\njavascript\nnew Quill(..., { \n   modules: { table: {} }\n});\nbut still nothing. I still get <p /> instead of table elements. Is there other logic parts in the quill core which help with the table support?. hmm, I have copied the Table module from 2.0.0-dev.0 (with the custom blots TableContainer, TableRow, TableCell, TableBody) and simply pasted them in my project and registered the module like so:\nQuill.register('modules/table', TableModule);\nand when I initialize Quill I tell it to use the Table module too:\njavascript\nnew Quill(..., { \n   modules: { table: {} }\n});\nbut still nothing. I still get <p /> instead of table elements. Is there other logic parts in the quill core which help with the table support?. The demo is based on Quill 2.0. Which isn't released yet. I wouldn't feel too comfortable going in production with a dev release. All the docs and reading material are written for Quill 1.x. (Or if there are docs for Quill 2.0 please link me). I tried installing Quill 2.0 but a lot of the API's have changed and I would have to rewrite a lot of logic for it to work. Also because of there aren't any docs I have to dig deep into the source code to understand how everything works in Quill 2.0.\nIsn't there a way to make tables work in Quill 1.x?. The demo is based on Quill 2.0. Which isn't released yet. I wouldn't feel too comfortable going in production with a dev release. All the docs and reading material are written for Quill 1.x. (Or if there are docs for Quill 2.0 please link me). I tried installing Quill 2.0 but a lot of the API's have changed and I would have to rewrite a lot of logic for it to work. Also because of there aren't any docs I have to dig deep into the source code to understand how everything works in Quill 2.0.\nIsn't there a way to make tables work in Quill 1.x?. ",
    "spacegangster": "Watching.\nReady to assign a small bounty.\nFor now using a workaround by @thomasdao  https://github.com/quilljs/quill/issues/1374#issuecomment-374008626. Made a workaround package based on @thomasdao answer\nhttps://github.com/spacegangster/quill-plain-text-paste. ",
    "mthjs": "another way would be to wrangle this library through the babel-loader by configuring your webpack.config.js similar to:\njavascript\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        loader: 'babel-loader',\n        exclude: /node_modules\\/(?!quill)/\n      },\n      .... ",
    "jtomaszewski": "Yeah, I encounted the same problem; using quill 1.2.3 . Seems like (at least in this example) the cause is margin-top: 1%. When using px or no margin its okay. Other demo: https://jsfiddle.net/y500jh11/13/\n-- UPDATE --\nOn our app we are having margin: calc(2rem -  0.14285em ) 0em 1rem on the heading elements, which also causes the issue.\nOur hack fix for now:\n.ql-editor {\n  h1,h2,h3,h4,h5,h6 {\n    margin-top: 0 !important;\n  }\n}\n. ",
    "tinacious": "@jhchen adding the matchVisual config as you said worked to strip out the unnecessarily-injected <p><br></p>:\njs\nmodules: {\n  clipboard: {\n    matchVisual: false\n  },\n}\nmatchVisual: false should probably be the default configuration since it's unintuitive to expect extra <p><br></p> to have been injected by default. It gets injected between paragraphs and list elements.. ",
    "annezhou920": "Reiterating @mfjordvald's sentiment, any updates on this feature?. ",
    "fxmontigny": "Yes, please !!! <3 . ",
    "dnp1204": "@DenisBun can you please share your solution? I am interested in. Thanks in advance. ",
    "DenisBun": "@dnp1204 it requires some event manipulations, u may check my repo https://github.com/DenisBun/react-text-editor (src/Editor.js). ",
    "shofman10": "When I debug the js file, it looks like this function is causing the issue:\nif (rootBounds.bottom > containerBounds.bottom) {\n        var height = rootBounds.bottom - rootBounds.top;\n        var verticalShift = containerBounds.bottom - rootBounds.bottom - height;\n        this.root.style.top = top + verticalShift + 'px';\n        this.root.classList.add('ql-flip');\n }\nYou can see some of the values here:\n\nSo the 'top' value ends up coming out to '-1209px' (which is why it's jumping way to the top.. ",
    "sharkich": "I have the same problem. ",
    "caal-15": "I'm sorry, this happened on a project I was working on for another company, I no longer have access to the code, I Will try to provide one later if I have time. I'm sorry, this happened on a project I was working on for another company, I no longer have access to the code, I Will try to provide one later if I have time. ",
    "ringvold": "Never mind. It seems that I am doing it wrong. -_- \nAfter looking though the quill source I found that ListItem must be registered as formats/list/item, not formats/list-item. I found this in main module, quill.js.\nAlso it seems it must be imported as import List, { ListItem } from 'quill/formats/list', but that is as ES6 detail I guess.\nIt seems wierd that List do not work without also registration ListItem though.\nThe registration paths in Quill can be quite confusing, espesially with custom build of quill where the formats source location do not match the registration path.  Maybe that could be more clear in the documentation. I see that the quill and core modules are linked to in Adding Quill to Your Build Pipeline but maybe there could be a section on registration paths or highlight the importance of the registration path?. ",
    "justanotherco": "Same here - there are so many use-cases for an option like this. I hope you consider adding it as being able to set the document to that of an iframe as an option would help a lot. I've wasted two days trying to hack it all (including the constructors and functions mentioned above), but I'm still struggling to make it work 100% properly.\nAnd then 20 minutes after this, I think I finally found the cause - looks like as well as  the document mentions that priitperna mentioned  + the document mentions in emmiter.js also need to be changed.. ",
    "Mignon-han": "Same here, it would be great if you could use an iframe as an option. \nI don't want to modify the source code myself - it will make the upgrade difficult.\nI want to modify the pointing of the document by inheriting the selection and rewriting some methods.\nBut there are always some problems that are difficult to solve.. ",
    "christianhg": "On a related note, the Bubble Toolbar is instantiated with bold, italic, link, h1, h2 and blockquote if the toolbar is set to undefined:\nhttp://codepen.io/christianhg/pen/bqZQPg. Thanks for your input @benbro. I think, I see where you are headed, but I'm not entirely sure what HTML element you are referring to. Can you elaborate some more on your idea?. I'm still not sure what element we are referring to. Are you in the know, @jhchen?. Obviously I know that Document.elementFromPoint() returns an element. Let's get this discussion back on track shall we :)\nBecause of getBounds(), I know the desired x and y coordinates I want to use to set the selection in the editor. Unfortunately there is no current API that allows me to set a selection based on coordinates. This is the problem, I am are trying to solve.\nLet's say I got the following \"view model\" in my editor:\nhtml\n<p>iiiiiiiiii</p>\n@benbro suggests the use Document.elementFromPoint() and then somehow get the index from the returned element. I'm intrigued, but I don't know what element you are hoping to get. The <p> element? How does getting the <p> element help setting the correct x coordinate?. @jhchen Would this be a good first bug? If so, I could give it a shot.. ",
    "edmeehan-tcg": "Found another bug related to the 'selection-change' event. If you use the OSX spellcheck feature to correct the spelling of a word in the quill text editor the selection-change event stops firing.\nexample here https://codepen.io/edmeehan/pen/GvmKyd?editors=1111. Found another bug related to the 'selection-change' event. If you use the OSX spellcheck feature to correct the spelling of a word in the quill text editor the selection-change event stops firing.\nexample here https://codepen.io/edmeehan/pen/GvmKyd?editors=1111. I found that reverting to release version 1.3.0 solved the selection-change issue for me.. I found that reverting to release version 1.3.0 solved the selection-change issue for me.. ",
    "amitm02": "reverting to 1.3.0 did not solve it for me, but revering to 1.2.6 did.\n. Is there a more efficient/elegant way to reset the editor content than setText(\"\")?. I've encounter similar issue. After some prolong usage, the selection-change stop firing. It is a bit tricky to detect as there is errors in the console. \n@jhchen, can you give me some points about how to investigate the further? Is there a specific code in quill worth putting a breaking point once it happens that you can point me to?. Apologies for the long delay.\nBy \"block format\" I means the block attribute. I've named it here block format as it often used to format the block\nI'v attempted to mark a paragraphs using\nlet BlockMark = new Parchment.Attributor.Class('block-mark', 'block-mark', {scope: Parchment.Scope.BLOCK});\nQuill.register(BlockMark,true)\nand than in the Delta i can do something like this\n```\n{ ops: [\n         { \n               \"insert\" : \"some text\"\n         },\n         {\n             \"attributes\": {\n             \"block-mark\": someBlockID                   \n          },\n              \"insert\": \"\\n\"\n          }\n     ]\n}\n```\nI'm wondering if that is the right approach and if the copy-paste issue can be resolved or if I better go for a different solution all together. And if so, what would you recommend?\nAwesome project btw.\nAmit. Please examine: https://codepen.io/amitm02/pen/pWxOxZ\nIf you cut \"some text2\" and paste it a line below the line \"some text3\":\n(1) the empty space left after cutting the line is still marked as \"item2\" and (2) the pasted line is marked as \"item3\" (instead of item2).\nInterestingly enough, when replacing the custom block attribute with the \"header\" block format, the pasted content keeps the block format: https://codepen.io/anon/pen/veVQaP. I've managed to do a simple detection if the exact block is selected. If so, it keeps the attributes, if not, drop back to the default copy-paste. https://codepen.io/amitm02/pen/dVEyOP.\nThis kind of meets my needs. I wish I could make it support multiple blocks selection, but I couldn't find an elegant way to do so without transversing over all the nodes between the anchorNode and the focusNode of the selection one by one.\n@jhchen, I think keeping all the attributes for copy/cut-paste is a nice feature for quill, but i'm not sure if it is a trivial one to make. I'll leave it to you to decide if this issue should be closed or move to the backlog.. ",
    "SergioCrisostomo": "@jhchen were do I find the demo that uses code from this page? Guide me on how to double check.\nOtherwise specs run green, and this change makes visible code that was not showing up as docs. . Thanks for the input. \nI see and can run the demos, functional and unit. They pass. \nI can start up the dev server and run the demos in the standalone folder.\nMy question still is: how do I run demo for the toolbar? The modules/toolbar.md file I propose to change in this PR is not accepted as url in the tests. \nIf there is a test where the code in this .md file is used I did not found it. . ",
    "jwstevensii": "Yes!  I am also trying to do this exact same thing.  We are storing the contents in a SQL database and do not want to store the base64 data of any images.. ",
    "Skura23": "I met exactly same problem, don't know how to solve it.. I finally solved the problem by using Ajax to upload image to server.\nHere are some links that I find useful (if you want to using ajax to implement this upload function, too).\nHow can I upload files asynchronously?\nAjax POST request via jQuery and FormData - $_POST empty on PHP\nSuggestions above are useful when you embed the upload function in your quill editor.\n. ",
    "psuplat": "@TaylorPzreal  - I get the missing ) after formal parameters error on the saveToServer function, which prevent the editor from loading altogether.  Any ideas?. ",
    "papac": "@TaylorPzreal thank you.. Thank guys.. ",
    "larryisthere": "@TaylorPzreal Don't forget to implement by ourselves the ways to manage the images uploaded.. ",
    "aminnagpure": "are u guys talking about angular 6, iam using it in angular 6, cannot figure it out. ",
    "saimAbdullah": "\nI solved the problem that upload image with url.\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.\n\nYour answer is very helpful, but how can I detect which image is being deleted by the user in the editor, As I want to delete the image from my server when the user deletes it. > I solved the problem that upload image with url.\n\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.\n\nYour answer is very helpful, but how can I detect which image is being deleted by the user in the editor, As I want to delete the image from my server when the user deletes it. ",
    "basilmnm": "const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});.   const editor = new Quill('#quill-editor', {\n  bounds: '#quill-editor',\n  modules: {\n    toolbar: this.toolbarOptions\n  },\n  placeholder: 'Free Write...',\n  theme: 'snow'\n});\n\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});.\n",
    "raydvard": "\n\nYour answer is very helpful, but how can I detect which image is being deleted by the user in the editor, As I want to delete the image from my server when the user deletes it\n\n\nI am not sure why anyone haven't talked about it? If we are working on uploading images to server, we need to know how we can reverse it, I mean delete it just by backspacing the image in the editor.\nI have tried to read through onContentChange/text-change etc. But can't find a proper way to do it.\nHave anyone done it, please share your here.\n. So, I have done so far is this to delete the uploaded image >\nthis.editorInstance.on('text-change', function(delta, oldDelta, source) {\n      if (source == 'api') {\n        console.log(\"An API call triggered this change.\");\n        console.log(delta);\n        console.log(oldDelta);\n      } else if (source == 'user') {\n        console.log(\"A user action triggered this change.\"); // when a user is deleting the image from editor\n        console.log(delta);\n        console.log(oldDelta.ops[0].insert.image); // So you will get the link of the image\n      }\n});. ",
    "eat-code-repeat": "\nI solved the problem that upload image with url.\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.\n\nI am getting a missing ) error at saveToServer function, Kindly help I am in trouble figuring out, I am using javascript. > I solved the problem that upload image with url.\n\nThis is my code, hope help you:\n```js\n   const editor = new Quill('#quill-editor', {\n      bounds: '#quill-editor',\n      modules: {\n        toolbar: this.toolbarOptions\n      },\n      placeholder: 'Free Write...',\n      theme: 'snow'\n    });\n  /**\n   * Step1. select local image\n   *\n   */\nfunction selectLocalImage() {\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.click();\n\n  // Listen upload local image and save to server\n  input.onchange = () => {\n    const file = input.files[0];\n\n    // file type is only image.\n    if (/^image\\//.test(file.type)) {\n      saveToServer(file);\n    } else {\n      console.warn('You could only upload images.');\n    }\n  };\n}\n\n/**\n * Step2. save to server\n *\n * @param {File} file\n */\nfunction saveToServer(file: File) {\n  const fd = new FormData();\n  fd.append('image', file);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://localhost:3000/upload/image', true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      // this is callback data: url\n      const url = JSON.parse(xhr.responseText).data;\n      insertToEditor(url);\n    }\n  };\n  xhr.send(fd);\n}\n\n/**\n * Step3. insert image url to rich editor.\n *\n * @param {string} url\n */\nfunction insertToEditor(url: string) {\n  // push image url to rich editor.\n  const range = editor.getSelection();\n  editor.insertEmbed(range.index, 'image', `http://localhost:9000${url}`);\n}\n\n// quill editor add image handler\neditor.getModule('toolbar').addHandler('image', () => {\n  selectLocalImage();\n});\n\n```\nQuill is awesome and easy to extensible.\n\nI am getting a missing ) error at saveToServer function, Kindly help I am in trouble figuring out, I am using javascript. > @TaylorPzreal - I get the missing ) after formal parameters error on the saveToServer function, which prevent the editor from loading altogether. Any ideas?\nSame here, do you get the solution if so then please share it with me... > @TaylorPzreal - I get the missing ) after formal parameters error on the saveToServer function, which prevent the editor from loading altogether. Any ideas?\nSame here, do you get the solution if so then please share it with me... ",
    "DawidLoubser": "Hi, I have the same issue, as well as a related one: If I initialise Quill with some HTML content, what is the easiest way to support \"protected\" regions, i.e. based on a particular pattern (such as CSS class name) such that Quill will not allow the editing of those elements.\nWith my limited understand of Quill's architecture, it seems that it should be fully possible to do this. However, I can't find any information about whether any of the standard modules can be configured to support this kind of functionality, or whether anybody has perhaps made some extensions that simply support \"locked\" regions.\nAny insight would be much appreciated.. ",
    "meantime": "I just finished writing a thing that takes the x, y from a drag/drop event and maps it to a Quill offset. It does what Jason suggested above, and handles a few fun edge cases. Should be easily adaptable to others' use cases: https://github.com/danfuzz/bayou/blob/master/local-modules/quill-util/QuillUtil.js. I just finished writing a thing that takes the x, y from a drag/drop event and maps it to a Quill offset. It does what Jason suggested above, and handles a few fun edge cases. Should be easily adaptable to others' use cases: https://github.com/danfuzz/bayou/blob/master/local-modules/quill-util/QuillUtil.js. Document.caretPositionFromPoint() is not a finalized api and isn't available on all of the platforms we have to support.. So far I've had zero problems with my own implementation, and it provides more info than just a caret position, and handles cases like going past the end of content on a line, etc. https://github.com/danfuzz/bayou/blob/master/local-modules/quill-util/QuillUtil.js#L54. So far I've had zero problems with my own implementation, and it provides more info than just a caret position, and handles cases like going past the end of content on a line, etc. https://github.com/danfuzz/bayou/blob/master/local-modules/quill-util/QuillUtil.js#L54. It wasn't something I was considering for inclusion in Quill. But not opposed to it either. It did find a bug just moments ago though. If pixel position you're querying is in the leading between lines of text then it won't match as being inside any of the character bounds and it reports a position past the end of the document. Need to think about what to do about that.. It wasn't something I was considering for inclusion in Quill. But not opposed to it either. It did find a bug just moments ago though. If pixel position you're querying is in the leading between lines of text then it won't match as being inside any of the character bounds and it reports a position past the end of the document. Need to think about what to do about that.. I think what'd I'd like to see is to have getSelection() and related methods return a Selection object that is the same as Range but with the addition of an integer field for the index of the caret.. I think what'd I'd like to see is to have getSelection() and related methods return a Selection object that is the same as Range but with the addition of an integer field for the index of the caret.. ",
    "maheshmurthy": "So, on form submit I have to store this content in the database. When I am looping through the 'ops' array, when I encounter \"insert\" key, I get 'alert()' text as it's value. Do I have to look for next element in the ops array to check if the current element is a code block? That doesn't sound right. How do I check if the text is a code block? Thanks!\n. ",
    "ajfarkas": "I think this is still an issue. The documentation is of the \"finish drawing the owl\" variety.\nI haven't been able to remove styling from the whitelist.\nFor instance, if I want to prevent people from styling text as \"bold\".. ",
    "nhartner": "Nobody knows how to remove styling? I'm trying to prevent the text color from being set and it's maddening hard to figure out how the formats should be used to do this.. ",
    "f3ltron": "why did you closed it ? You find something ?. it's update @benbro :) thanks for the help. you give me hardtime @benbro ^^ sorry if i am not explaining good,  i'm trying my best with my sick english.\nI update again. you have to import it   \nvar Delta = Quill.import('delta');\n. I found this problem too when i tried to add a div that corresponding to an embed value. It suck it can be good to have two differents way to dangerouslyPasteHtml.\nBut what i understand about that is quill cannot properly create the ops table if we do it like this. So that's why it delete all div etc.. i am like him dont really understand the add matcher. I have an embed data i want to re insert when its match but its not working and get the same error as him...\nMaybe more information and examples in doc could be great..... i have an answear for him. I will write it tommorrow. @jhchen can we have more efficent doc (more example, more explanation in depth) about addmatcher in doc and maybe other like video support maybe ? Maybe i can help you. https://github.com/quilljs/quill/issues/1573 \nyou need to import it after load quill.js\nvar Delta = Quill.import('delta');\n. i Maybe found something with add matcher and insert all text with dangerouslyPasteHtml. But it could be so much better to do what i want .... resolve with this find the result here\nhttps://jsfiddle.net/xghht8py/2/. i got the same error on copy past. not working. But i resolve it by modifying my embed blot\nhttps://jsfiddle.net/xghht8py/2/. https://jsfiddle.net/xghht8py/2/\nresolve. I didnt notice when i create an embed i have to return a value for ops table. now its ok. you can see the result on the fiddle. ",
    "mindscratch": "@f3ltron perhaps @StefanNeuser needed to first this.quill.focus() then set the selection.. ",
    "gofabian": "Sony Xperia Z5 Compact (E5823)\nAndroid 6.0.1. Sony Xperia Z5 Compact (E5823)\nAndroid 6.0.1. Same on another smartphone with Android 4.4.2 and Firefox Mobile 53.0. Same on another smartphone with Android 4.4.2 and Firefox Mobile 53.0. The referenced pull request seems to resolve this issue. I cannot reproduce it using Firefox 54.0.1 and quilljs 1.3.0 . \nShould we close the issue?. The referenced pull request seems to resolve this issue. I cannot reproduce it using Firefox 54.0.1 and quilljs 1.3.0 . \nShould we close the issue?. ",
    "adrien-n": "I'm getting the same on latest Firefox available on F-Droid and Android 7.1 (latest OxygenOS from OnePlus) but I've had it for at least a couple months (i.e. probably always because I haven't used Quill for much more than that).\nI'll try to take a look at the issue but I'm currently a bit busy and not very familiar with debugging on mobile so it's not unlikely someone will beat me to it.. The problem actually still exists with FF 50 on Android. This is the version currently shipped through F-Droid because of build or builder woes with newer versions.\nI don't know if you support such configurations. I would definitely understand you don't (FF is a difficult package but mobile applications usually have a good update rate).. ",
    "denisoby": "@benbro NPE is null pointer exception. \nCode was\nlet index = range.index + range.length;\n         if (range != null) { \nThat's really strange. First we are attempting property from object \"range\" and next line we are checking this object is not null.\nI would expect that we should check object for null first, and only after this try to get it properties. So made\nif (range != null) {\n                  let index = range.index + range.length;\nindex variable is used only inside if. Please, take a look at diff. It's really simple.. @benbro thank you too. One of the questions I need you support with is how to deal with the length of embedded objects?\nFrom the delta docs - embed should be with length = 1. But in my case - embed are represented in delta with string values. Smiles have at least two chars, and links are also long.\nI've rendered them with contenteditable=false, but still has issues with cursor and deleting chars from them. How should I process it, if I don't want to change delta value?. ",
    "ericbets": "@benbro Did you notice I provided a link to a simple test case in the original comment? Because it's based on: https://github.com/quilljs/webpack-example\n. @benbro Did you notice I provided a link to a simple test case in the original comment? Because it's based on: https://github.com/quilljs/webpack-example\n. I removed the custom blot from the proj:\nhttp://codepen.io/anon/pen/eWBeGw\nThe repo has also been updated.\nTo see it: load app and look in chrome inspector when it doesn't load.\n. I removed the custom blot from the proj:\nhttp://codepen.io/anon/pen/eWBeGw\nThe repo has also been updated.\nTo see it: load app and look in chrome inspector when it doesn't load.\n. ",
    "gfafei": "When type noting, and call quill.getText()\uff0c I got \\n\u3002Why? I expect ''. I guess the bug is from win10, it just disappear after the latest win10 update.. have you try other browser?. This bug appear again, and I tried other browser, it only appeared in Chrome.When I last Time update my Chrome\uff0c the bug just disappear, hope this help debugging.. ",
    "transtone": "I got the bug in  mac osx 10.11.6\uff0cChrome-58.0.3029.81 \u3002but not in chrome-58.0.3029.110\nIt seems a chrome bug.\nby the way, the bug never found in other wygiwys editors.\n. I do tried the other browser and os, the result is : \nmac-10.11.6: opera/opera-beta   bug,  chrome good, firefox good\nwindows10: chrome good\narchlinux: opera bug, chrome-58.0.3029.110 bug\nin linux:\nExpected behavior: get '\u554a'\nActual behavior: get '\u554aa'\nhttps://github.com/quilljs/quill/issues/1437. ",
    "hoppities": "I ended up figuring it out. The issue had to do with the order in which the element was created by the directive and when quill tried to attach itself to that element.. ",
    "GlenKPeterson": "Thank you for this!  This is what I see when I inspect the result:\nhtml\n<div class=\"ql-editor\" contenteditable=\"true\">\n  <div class=\"align align-right\">\n    <figure class=\"figure\">Hello</figure>\n  </div>\n  <div class=\"align\">\n    <figcaption class=\"caption\">Goodbye</figcaption>\n  </div>\n</div>\nI was looking for:\nhtml\n<div class=\"ql-editor\" contenteditable=\"true\">\n  <div class=\"figure\">Hello</div>\n  <div class=\"caption\">Goodbye</div>\n</div>\nYour solution works, but there are no figure or figcaption tags in HTML.  Those would be \"custom elements\" that only work on Chrome, Opera, and Android.  If I went this route (no idea what I'd do for IE, Safari, Edge, and Firefox users), I'd have to parse the html on the server side to turn the first example into the second.  I'd like to avoid that if possible.\nI apologize for posting in the wrong forum.  I expected Quill to read the HTML it can write, so thought of this as a bug.  My search for a work-around is definitely not a bug or enhancement, so maybe I should delete that part from this issue and post it on StackExchange instead?  I'm going to edit my issue to clarify that.. Brilliant!  In the meantime I made my work-around work.  It intercepts the 'div' tags and corrects the class attribute in the delta:\njavascript\nquill.clipboard.addMatcher('div', function(node, delta) {\n  let clz = node.attributes['class'];\n  let c = (clz == null) ? null : clz.value;\n  let attr = delta.ops[0].attributes;\n  if ((c != null) && !(c in attr)) {\n    delete attr['caption'];\n    attr[c] = true;\n  }\n  return delta;\n});\nquill.clipboard.dangerouslyPasteHTML($('#sourceDoc').html());\nBut I like your way much better!  All you did was set each blot's className equal to the blotName:\njavascript\nSubtitleBlot.className = 'subtitle';\nTipBlot.className = 'tip';\nThat's what I'll use.  It's so simple, I'm a little embarrassed that I didn't figure it out on my own.  Thanks again! \ud83d\udc4f\ud83d\ude04. ",
    "MZachmann": "+1 we really need tel: support. ",
    "mave99a": "Same for Chinese. Looks like it always take the first character entered. \nExpected behavior:\n\u6d4b\u8bd5\nActual behavior:\nc\u6d4b\u8bd5\nc was entered\uff0cbecause 'c' is the first char entered for Chinese Pin Yin IME.  \n. ",
    "kidlj": "Same problem like @mave99a above, with Windows 10/ Chrome 60/ Microsoft Pin Yin IME. Have the same problem on Windows 10 with Quill 1.3.1, Chrome 60, Microsoft PinYin IME. ",
    "warwr1ck": "it happens in ie11 too, window 10. ",
    "GreLI": "event.key doesn't work in Safari, unfortunately.. event.key doesn't work in Safari, unfortunately.. 10.1 (iOS 10.3) is a quite recent version of Safari that has come with the very recent OS updates only in this year.. 10.1 (iOS 10.3) is a quite recent version of Safari that has come with the very recent OS updates only in this year.. ",
    "krabbypattified": "What about this:\n\"For instance, if I do quill.format('header', '2'); the placeholder disappears. (this might be a bug)\"\nDo I need to file another issue for you to address this?. ",
    "bluethefoxyt": "btw i did use a theme for bootstrap and i tested it without the theme still the same result. ",
    "crowdwave": "Hmmm....  it looks like this function is perhaps not in the latest version of Quill?\nHow then can I set the HTML programatically?  I'm trying to load the initial data into the control upon load.\nthanks!. For those who might come later on.......\nThe actual problem that I was trying to solve is how to save data from quill and restore it next time quill is loaded.  I assumed that the right way to do this was to save the HTML and then write it back somehow.\nFurther learning appears to indicate that in fact the correct way to load and save data is to save quills \"delta\" object in your database or whereever and this delta can be reloaded via \"setContent()\"\n. ",
    "rw3iss": "Alternatively, can save and load html with getting the innerHTML of the quill-editor to save, and then restore by putting this html in between the editor containers html tags before initializing that container with Quill.\n```\nvar quill = new Quill('#editor', {\n    theme: 'snow'\n});\n// retrieving:\nvar content = quill.container.innerHTML;\n// setting:\n\n   your initial html/content would go here\n\n// or can set programmatically:\nquill.clipboard.dangerouslyPasteHTML(0,content);\n```. Had the same problem and fixed it by not using the 'value' prop on the editor, but rather the 'defaultValue', which is apparently unmanaged to some extent. Using 'react-quill', fyi. Hope it helps.\n<ReactQuill \n            theme={'snow'}\n            onChange={this.props.onChange}\n            defaultValue={this.state.text}\n            modules={ReactQuillEditor.modules}\n            formats={ReactQuillEditor.formats}\n            placeholder={'Write something...'}\n        />. ",
    "gustawdaniel": "In my opinion methods to get and set HTML should be described in official docs. \nOf course with notice that using these methods is bad practice.\nBut It is confusing if it is not described at all.. ",
    "jillesvangurp": "The quill api is indeed confusing on this. \nHow to do implement a proper edit, save, reload use case is not clear at all from the documentation. I think the fundamental confusion is that many users want to treat this like a normal input component that has a value that you can get/set. IMHO a reasonable expectation but it seems quill does not work that way. I understand why (security) but it makes it needlessly hard to use.\nAfter a bit of googling, I have slightly better workaround that seems to beat some sense into this API. \n```\n  getValue() {\n    // we want the content, not some Delta thingy or plain text without the formatting\n    return this.quillEditor.root.innerHTML\n  }\nsetValue(text) {\n    // resets the editor to empty\n    this.quillEditor.setContents([])\n    // initialize the content to exactly what we have in our server (i.e. what we saved the last time as validated/sanitized by our server)\n    this.quillEditor.clipboard.dangerouslyPasteHTML(0, text)\n  }\n```\nThe dangerouslyPasteHTML seems intended to protect users against script injection. Understandable but it kept getting extra new lines when I modified innerHtml directly. Of course, our server of course cleans up the html and validates stuff. So, there is zero risk with this.\nI understand that Deltas are really nice for all sorts of advanced things we don't need. I also think storing that in a DB is a bad idea. I insist on something standardized like markdown or sanitized html without leaking implementation details about whatever was used for editing. . ",
    "jbhorsewriter7": "Has anyone else run into this?\n@jhchen do you have any ideas or further tests that I could run?. ",
    "bjentsch": "I can confirm this behaviour.. Any news on this?. ",
    "homerlex": "FYI - I tested my repro case using  https://quilljs.com/standalone/snow (which now uses Quill 1.3.0) and could not reproduce the problem.  I'll have to get this version into our application and test there as well.. Thanks for the replies.  Using an embed blot does exactly what I want.  . ",
    "linyize": "@jbhorsewriter7  I started another project https://github.com/hivecms/quillview. QuillView is to display quill format on iOS native views. Your comments are welcome.. Great job! @joshoconnor89 \nI started another project https://github.com/hivecms/quillview. QuillView is to display quill format  on iOS native views. Your comments are welcome. \n. @DmitrySkripkin \nThe example project use CSSParser to read css style and turn into QuillView styles.\nQuillView v0.1.0 currently support official formats in https://quilljs.com/docs/formats/.\nYou can ask for  custom formats support on quillview/issues, I will consider it.. ",
    "andlcool": "Great, the example does work as intended. I am also looking to get the html output to be sent as email and requires all styling to be inlined.\nHow do we get a list of items that we can configure to be inline? The example shows for size only and I am searching for the whole list.\nThanks.. Great, the example does work as intended. I am also looking to get the html output to be sent as email and requires all styling to be inlined.\nHow do we get a list of items that we can configure to be inline? The example shows for size only and I am searching for the whole list.\nThanks.. ",
    "drego": "I'm having the exact same problem. There's some features which I don't know how to force them to use inline styling, like:\n- font family\n- indentation\n- lists\n- alignment\n- code-block's\n- blockquote. Also, there are some fonts that are not removed from the inline styling. For instance:\n- Impact, Charcoal, sans-serif\n- Tahoma, Geneva, sans-serif\n- Verdana, Geneva, sans-serif\nFor other fonts, they are just removed from the inline style. For instance:\n- Arial, Helvetica, sans-serif\n- \"Arial Black\", Gadget, sans-serif\n- \"Comic Sans MS\", cursive, sans-serif\n- \"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif\n- \"Trebuchet MS\", Helvetica, sans-serif\nAll this mentioned fonts are safe fonts according to this, so I don't understand why some work and some don't.... ",
    "dschreij": "Same issue here. The documentation on this particular topic is very sparse. Where can we find a list of attributors that we can set to inline?. Thanks for that! It all works (I could have just as well simply copy pasted the code from the first post in this issue...). The only thing that doesn't work for me is the size manipulation, but I have found another issue reporting this, and it mentions that white-listing certain font sizes should fix that problem, so I'll dive into that now.. ",
    "UprightBeats": "This solution doesn't work for me. What is worse - after I added this imports the editor stopped working itself. Does anyone have the working code?. ",
    "Finesse": "How to do only for a single Quill instance, not for a whole Quill class?. How to do only for a single Quill instance, not for a whole Quill class?. ",
    "kaziupir": "Did you create custom toolbar element?. Did you create custom toolbar element?. For angular 2+:\nCreate file quill.d.ts: (you can try using @types/quill module, but it doesn't work for me because getting some error)\ndeclare module 'quill';\nAdd import in your component:\nimport * as Quill from 'quill';\nAdd class:\n```\nclass IndentAttributor extends Quill.import('parchment').Attributor.Style {\n  multiplier = 2;\nconstructor(name: string, style: string, params: any) {\n    super(name, style, params);\n  }\nadd(node, value) {\n    return super.add(node, ${value * this.multiplier}rem);\n  }\nvalue(node) {\n    return parseFloat(super.value(node)) / this.multiplier || undefined;\n  }\n}\n```\nAdd function in your component:\n``\n  createCustomIndent(): void {\n    const levels = [1, 2, 3, 4, 5];\n    const multiplier = 2;\n    const indentStyle = new IndentAttributor('indent', 'margin-left', {\n      scope: Quill.import('parchment').Scope.BLOCK,\n      whitelist: levels.map(value =>${value * multiplier}rem`),\n    });\nQuill.register(indentStyle);\n\n}\n```\nAnd run it in constructor for example:\nconstructor() {\n    this.createCustomIndent();\n  }\n. For angular 2+:\nCreate file quill.d.ts: (you can try using @types/quill module, but it doesn't work for me because getting some error)\ndeclare module 'quill';\nAdd import in your component:\nimport * as Quill from 'quill';\nAdd class:\n```\nclass IndentAttributor extends Quill.import('parchment').Attributor.Style {\n  multiplier = 2;\nconstructor(name: string, style: string, params: any) {\n    super(name, style, params);\n  }\nadd(node, value) {\n    return super.add(node, ${value * this.multiplier}rem);\n  }\nvalue(node) {\n    return parseFloat(super.value(node)) / this.multiplier || undefined;\n  }\n}\n```\nAdd function in your component:\n``\n  createCustomIndent(): void {\n    const levels = [1, 2, 3, 4, 5];\n    const multiplier = 2;\n    const indentStyle = new IndentAttributor('indent', 'margin-left', {\n      scope: Quill.import('parchment').Scope.BLOCK,\n      whitelist: levels.map(value =>${value * multiplier}rem`),\n    });\nQuill.register(indentStyle);\n\n}\n```\nAnd run it in constructor for example:\nconstructor() {\n    this.createCustomIndent();\n  }\n. ",
    "azam": "Same as #1437 . Misread the actual behavior, while not exactly the same, using a Japanese IME on osx produces similar result.\nExpected behavior:\nresult: \u3066\u3059\u3068\nActual behavior:\nresult: t\u3066\u3059\u3068\nI suspect the text node value on the first keypress is added to the line and current index of the line is moved by 1, which is why on Japanese IME pressing te results in the first t is outputted, and when composition ends, the composed value \u3066 is added next/right to t.\nThis happens on the dom mutation event callback observed by Parchment.Scroll (and extended by blots/scroll.js), where it creates a text blot & text node on the first keypress on a new line. Adding the subsequent keypresses properly appends, because probably Scroll/Container found a parent node to append to instead of creating a new text node.\nBut I still cannot find the exact code that consumes the first keypress and move current index forward \ud83d\ude3f . I tried deleting these lines, just to see if the ql-blank class change is making any difference, but it didn't, so I don't see how removing it will resolve the issue:\nhttps://github.com/quilljs/quill/blob/master/core/quill.js#L73\nhttps://github.com/quilljs/quill/blob/master/core/quill.js#L90\nhttps://github.com/quilljs/quill/blob/master/assets/core.styl#L170-L175\nI am testing it out using the local server (http://localhost:9000/standalone/snow/) on macOS Sierra, Chrome 58, Japanese IME (both default Apple & Google Japanese IME) if it  helps.\nReason of me suspecting the mutation observer callback is because when I comment out the following line, the first key stopped finalizing as a text node, so I am guessing that the problem lies after this line, or any events emitted after this.\nhttps://github.com/quilljs/parchment/blob/master/src/blot/scroll.ts#L134\nContinuing to debug the issue .... (After some time trying to make the local dev server available to my IE VM) I tried dropping ql-blank, and as you said, it solves the problem, but only on IE. The problem persists on Chrome 58 even on Windows.. Problem cannot be reproduced on develop. Suspecting 01e567e10ce0eac8f1a63fa6f5bc666ad24dcf8a fixed the problem.. I changed ZWS to NUL on as shown on this branch: azam/quill@c7cc4ca199e6bdf9281c93a4907f581063576851 .\nI agree that it is a quick workaround. If you want to go this way, there is a lot more to do. I think you might also want to override other inherited methods (length, value, etc) to absorb the change rather than let the user scrub the text themselves.\nFor example, one of the effects of not overriding these methods is, try writing something and then deleting all text, Editor#isBlank do not evaluate to true, so the place holder will not be shown afterwards.\nCreating some sort of a new type of blank blot probably makes more sense.. ",
    "ykosaka": "When I installed this add-on, IME works correctly.\nAfter deleting the add-on, this problem is reproduced again.\nhttps://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc/related?hl=ja\nenvironment:\nmacOS Sierra 10.12.3 Beta\uff0816D25a\uff09\nGoogle Chrome 58.0.3029.110 (64-bit)\nGoogle Japanese Input (2.20.2700.1)\nquill version 1.2.4. ",
    "410675629": "Do someone track this bug?@jhchen ,I have try your method on Chrome/Safari,but it doesn't work.. ",
    "jmzhang": "Interesting find: change the ql-blank to use :after rather than :before, so toggling the class does not trigger the contents to reflow, thus making the IME happy.\nBut there's a catch, you need to manually position the :after pseudo element with top equal to the inner padding of the editor, about 12px for snow theme. I think this is acceptable \ud83e\udd14 \nUpdate: The Chinese IME still doesn't work after this change, it seems the IMEs are extremely fragile and any updates to the containers can be devastating during compositions.\nUpdate's Update: It turns out that the Chinese IME's bug is not relevant to this issue, the proposed fix should work.. That rocks man! I used 3.3.0 instead, in order to meet the dependency requirements of the plugins, and everything seems good so far. \nAnd I also agree that the versions should be explicitly set in the repo, hopefully someone familiar with ruby could submit a PR.. I've made a screencast with Froala editor to demonstrate what I wanted to achieve with Quill.\n\n(Chinese in the first <p> block and English in the second <p> block, please note the behavior of <br/> tag)\nfor comparison, below is the behavior of Quill:\n\nand after getting .ql-blank out of the way:\n\n. Mine was 11.413.15063.0, what's your IE11 version that has it working? lol\n\nI've managed to apply some patches to my local forks of quill and parchment, and got rid of most of the bugs, but the code is too dirty to share right now. \nThe key to the problem is to avoid touching the DOM during composition, so some changes has to be made on the Parchment side. The best way I can think of is to include a 'composing' flag in the context object passed to the optimize function call, but I'm not sure if the context argument is really intended for such things, could you confirm? @jhchen . ",
    "KaihatsuOnline": "worked before, but recently reappeared.. worked before, but recently reappeared.. ",
    "fobazzz": "I also again appeared a bug in window chrome . ",
    "SungwooJo": "It also reappeared in version 2.0.0-dev.2. I accidentally created an issue. I'm so sorry.. ",
    "maurya777": "@jhchen thanks for the awesome work!\nI have been having the same problem as @yesley, could you please suggest a workaround? . ",
    "despreju": "Nice, it's working perfectly on Firefox and Edge when I modify the condition like this: \nif (style.fontWeight && (computeStyle(node).fontWeight === 'bold' || computeStyle(node).fontWeight === '700'))  {\n    formats.bold = true;\n  }\nShould you submit the patch or do you have a better solution to offer ?\nAnyway, thank you !. ",
    "joshoconnor89": "@saggarwal92 please update your quill.js to the most recent release.  You cant do several formats such as subscript, superscript, etc. b/c your version does not support it.  Otherwise thank you for your help it is appreciated. Solution:\noverride this style (if you are using snow theme)\n.ql-snow .ql-editor pre.ql-syntax {\n    background-color: #23241f;\n    color: #f8f8f2;\n    overflow: visible;\n}\n. ",
    "saggarwal92": "Thank you for informing me @joshoconnor89  and Thanks @jhchen \nI have updated quill.js and new one gives a pretty much feel to the native toolbar on iPhone. I hope you won't mind adding a link for the native toolbar quill editor: https://github.com/saggarwal92/iOSQuillEditor in your Readme.md\nThanks,\nShubham. Thank you for informing me @joshoconnor89  and Thanks @jhchen \nI have updated quill.js and new one gives a pretty much feel to the native toolbar on iPhone. I hope you won't mind adding a link for the native toolbar quill editor: https://github.com/saggarwal92/iOSQuillEditor in your Readme.md\nThanks,\nShubham. ",
    "chrismbeckett": "Found some more problems tonight. Indent doesn't work with blockquote or list. List and blockquote are working at the initial format, but calling format with indent +1 or using the TAB key doesn't do anything.. @lastmjs So far everything works except TAB key doesn't tab, and lists don't indent, but that might just be my inexperience with the QuillJS API.  For my app, I don't need TAB or indents so it is working well for me, and it works in the latest versions of Chrome/Safari (native) and Edge/Firefox with the WC polyfills.. While I won't argue with needing a pull request that follows the contributing guide and test coverage, your logic regarding the current state of the spec, and browser support doesn't make much sense.\nThe code required to support web components is conditional logic/feature detection. You can have a browser that supports web components and Shadow DOM, but if you are not using Quill inside a Shadow DOM it doesn't matter, the current Quill will work fine.\nThe primary change that needs to be made to Quill is that if the Quill node is contained within Shadow DOM, then document.activeElement doesn't work to get the current selection (which is essential to Quill). You need to get the ShadowRoot parent of the Quill Node and use shadowRoot.activeElement. \nSo, from a unit testing standpoint, you only need a single browser that supports Shadow DOM to validate the alternative paths through the code. Since every major browser vendor has signed off on Shadow DOM v1 and committed to supporting it, there really isn't any reason to not start supporting Shadow DOM in QuillJS right now. I don't see how there is any specific benefit to waiting to support Shadow DOM, the spec isn't going to change at this point.\nFrom an integration testing standpoint, then yes, as each browser adds support for Shadow DOM some attention will need to be paid to ensuring there are no browser quirks that break the existing tests. While it might be more efficient to wait for every browser to support it and make the change at a future point where you can validate for every browser in one development cycle, it means that, in general, browser libraries will lag years behind every emerging feature. IMHO, that just isn't practical anymore. Feature detection and progressive enhancement are pretty much the established norm right now for anyone working professionally in web development.\nHaving briefly looked at the tooling and test approach for this project however, I will say this. Although it only took me < 20 lines of code to get QuillJS to work with Shadow DOM, it was very difficult to test, even manually. To meet your contributing guidelines and test requirements is going to take a substantially larger effort to re-factor how tests are run to be able to change the conditional context of the test to use Shadow DOM, etc. Especially for anyone who is unfamiliar with the project tooling, standards and structure, the LOE is likely to be much greater than a few hours (more likely days).. I am sorry if my response above seemed critical of the QuillJS tooling or code. In fact, quite the opposite. I found the project exceptionally well structured and the code architecture modular, and well designed.\nYes, I very much appreciate how difficult the contenteditable is to work with, and how many quirks must be embedded in the QuillJS code to mitigate them. That is hard won knowledge by whoever wrote the code, and not easily or immediately understood by someone new to the code base trying to find and make a small change.\nFrom my own tiny experience, I found it very difficult to debug and trace the code to build a simple conceptual model of how state was being changed, and code paths executed. This is not a tooling issue, and I am sorry that you interpreted it as such. I am just saying that even a small change to QuillJS by someone unfamiliar with the code, the tooling, and the guidelines is a very, very time consuming effort for what can amount to a relatively tiny code change - not a very efficient model for potential casual contributors.\nI am going to close this issue since I don't think anything more productive can come of it. I simply don't have the time it would take for me to prepare and submit an acceptable pull request that would meet your guidelines. Karma and Jasmine are not the testing tools I use for my own software, and I don't have the time to learn all new tools for such a tiny code change.\nMy fork with the changes I made to 1.2.4 will remain available for anyone that wants to review the changes I made - https://github.com/arsnebula/quill. I recently tried to merge in 1.3.2 to release an updated version of my Polymer component and it no longer worked for me. A quick glance at the code changes did not surface any immediate reason why my small patch was no longer working.. ",
    "lastmjs": "@chrismbeckett Does your polymer-quill component work well?. @jhchen Isn't the spec stable at v1, with Safari and Chrome shipping native implementations?. Sorry to complain, I think Quill is awesome, I mostly want to add my voice to moving to web components to prepare for the future, which I believe will be web components.. ",
    "fasihrana": "I've given up on this library because of no ShadowDOM support.. ",
    "giona69": "I've given up on this library too because of no ShadowDOM support. . I tried this fork in a real application in Polymer 2 and I found two issues:\n1- no event is handled: as it was said, \nif (target === node || node.contains(target))\nwill always be false, as node.contains do not work across shadow root boundaries; hence no event will be targeted, hence no toolbar will be displayed (if bubble) and no action on the selection done.\nwriting \nif (target === node || true)\nof course will work\n2- if the event works, I found a bug on Safari where we have this problem with .getSelection(), as the API DocumentOrShadowRoot.getSelection() is not yet implemented ... there is a bug open on Safari, here all the docs:\nhttps://github.com/ProseMirror/prosemirror/issues/476\nhttps://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection\nhttps://bugs.webkit.org/show_bug.cgi?id=163921\nfor Safari the only way to make it work, currently, is to force shadydom on loading\n. I tried this fork in a real application in Polymer 2 and I found two issues:\n1- no event is handled: as it was said, \nif (target === node || node.contains(target))\nwill always be false, as node.contains do not work across shadow root boundaries; hence no event will be targeted, hence no toolbar will be displayed (if bubble) and no action on the selection done.\nwriting \nif (target === node || true)\nof course will work\n2- if the event works, I found a bug on Safari where we have this problem with .getSelection(), as the API DocumentOrShadowRoot.getSelection() is not yet implemented ... there is a bug open on Safari, here all the docs:\nhttps://github.com/ProseMirror/prosemirror/issues/476\nhttps://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection\nhttps://bugs.webkit.org/show_bug.cgi?id=163921\nfor Safari the only way to make it work, currently, is to force shadydom on loading\n. @43081j  I will go on developing on this and test it ... forcing shadydom on safari\nfor getSelection I do not see any workaround unfortunately, but will go on searching for an alterntive.. @43081j  I will go on developing on this and test it ... forcing shadydom on safari\nfor getSelection I do not see any workaround unfortunately, but will go on searching for an alterntive.. ",
    "AndreasGalster": "Just pointing out that Safari has shipped shadow DOM for a year and Firefox is actively working on custom elements and shadow DOM with a shipping intent in 2 months from now I believe :).\nAlso based on the discussion above... Edge is pulling another IE again, they haven't even begun work and based on the arguments above we'd be waiting for support for at least another year since Edge surely will take at least that much longer to implement :pensive:\nAlso, note that even UC browser and Samsung browser now support shadow DOM. Essentially in 2 months from now 6 out of 7 browsers are supporting shadow DOM (I did not count IE btw). ",
    "VadymMakhonin": "You move cursor out of iframe, move cursor out of popup, but stay in iframe where page rendered.. ",
    "drjackson": "It's not working on ordered lists for me.  The editor is still adding \"<p><br/></p>\" before each of them.\n\nsorry - this is actually working for me.  I thought I was using the latest version of quill, but I wasn't.  Didn't realize I was serving it from my packages.  Thanks!. \n",
    "bujji1": "\nI want to upload multiple images to the server at once and show the picture\nSteps for Reproduction\n1. Select multiple images\n\n2. Ajax upload images\n\n3. Insert image url to quill\n\nExpected behavior:\nSupport multi-map uploads based on configuration file\nActual behavior:\nNot support\nPlatforms:\nAny\nVersion:\nlatest\n\nHello @heyanlong - did you get any solution to select multiple images ? Thank You . I know the drag and drop we can drop more than 1 image , but using the toolbar image Icon I am able to select only one . Thanks for your help . ",
    "michihuber": "That also works, thanks!. ",
    "DaniilVeriga": "Ah, seems, this does the trick:\n.ql-container {\n    font-size: 20px;\n}\nPlease clarify is that somehow configurable rather than adding this style?. ",
    "lustoykov": "First of all, thank you for the quick reply and the amazing work you did there to develop this editor. In our opinion it is currently the best out there and feedback from users has been very positive as well.\nNow back to the issue - I'd like to replace all h's with h4, since we can't allow anything except for h4 - setConents, copy-paste... etc. I'm also interested on why exactly this code above works so perfectly - how does Header figure out that it is responsible for <h1 />,..., <h6 />. I've been looking into the source code without much success.\nI'd like to understand well what is going on there, since we depend very much on this editor.\nPS. Same thing with class Strike - if I replace static tagName = s with static tagName = strike the editor figures out the s tags and replaces them with strike tags. Hey @jhchen sorry for the late response... we're in the middle of a big release (in fact, releasing quill to our users \ud83c\udf89 ) so couldn't get to this PR yet... \nJust to clarify, for the first simple case with only selection change, you're envisioning something along the lines of ...\njs\n// create a wrapper to hold a WeakMap of handlers\nclass EventHandler { \n    private events = new WeakMap();\n    // ... \n}\nthen somewhere delegate to a handler on selectionchange...\njs\nconst selectionChangeKey = /*some key that will be garbage collected after quill is gone */;\nEventHandler.set(selectionChangeKey, selectionChangeHandler);\n // delegation happens here\ndocument.addEventListener('selectionchange', EventHandler.get(selectionChangeKey));\nThis is very oversimplified, but basically the idea is, once quill is gone, EventHandler.get(selectionChangeKey) handler would be garbage collected, therefore nothing will point to this / the quill instance or its properties anymore, thus will be cleaned up from memory, are we on the same page?\nIn any case we are going to fix this properly in accordance to your suggestion and at some point it will be a very high priority task for us, but can't promise that I'll manage to do it in next couple of weeks. I'll make a PR with proper fix then if there isn't one yet, so in this case I think you can close this one \ud83d\udc4d \n. ",
    "gerardolima": "\n. Hi, @jhchen, I have some legacy HTML content I have to render -- that contains the tags <font> and <table>, i.e. -- but I'm not sure on where to find the documentation I need to do it. Could you, please, provide more information on this matter?. ",
    "tzx119wade": "hey i got the image tag\n<img src=\"//0>\nDoes the quill.insertEmbed() only support data:image,but not file url?. ",
    "pronghuang": "The file schema isn't supported by quill. However, you can add file schema in quill.js. There is an array-\"['http', 'https', 'data']\". Change it to ['http', 'https', 'data', 'file']. It's worked.. ",
    "triawarman": "i'm not set any html for toolbar, following sample in http://quilljs.com/docs/modules/toolbar/ and add \nvar FontStyle = Quill.import('attributors/style/font');\n            FontStyle.whitelist =[false, 'Arial, Helvetica, sans-serif', 'Georgia, serif', 'Impact, Charcoal, sans-serif', 'Tahoma, Geneva, sans-serif', 'Times New Roman, Times, serif, -webkit-standard', 'Verdana, Geneva, sans-serif'];\n            Quill.register(FontStyle, true);. i'm not set any html for toolbar, following sample in http://quilljs.com/docs/modules/toolbar/ and add \nvar FontStyle = Quill.import('attributors/style/font');\n            FontStyle.whitelist =[false, 'Arial, Helvetica, sans-serif', 'Georgia, serif', 'Impact, Charcoal, sans-serif', 'Tahoma, Geneva, sans-serif', 'Times New Roman, Times, serif, -webkit-standard', 'Verdana, Geneva, sans-serif'];\n            Quill.register(FontStyle, true);. Yes, my mistake not to read carefully on issue #966 . Hy @jhchen \ni want to change the tooltip\n\ninto something like\n\nand hook javascript function (ex. event click).. @guillaumepotier I just created my own theme (after days of trying and still fail). @guillaumepotier i dont do something like import or extend any class, just modify quill.js file, copy function module 63 and paste as function module 109, then add lines code in module 62\n```\nvar _owntheme = webpack_require(109);\nvar _owntheme2 = _interopRequireDefault(_owntheme);\n_core2.default.register({\n...\n'themes/owntheme': _owntheme.default,\n...\n}, true);\n```\nits hard for me if there's no guide, or sample code.. ",
    "dchenk": "I noticed this issue too. It's very bad.\nThe problem is with the way Quill is rendering lists in general. I think the \"ql-indent-#\" classes should be abandoned completely, and instead lists should properly nest other lists (inside if li elements).\nFor example, Quill.js currently turns this:\n[\n {\"insert\":\"aaa\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},\n {\"insert\":\"bbb\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},\n {\"insert\":\"ccc\"}, {\"attributes\":{\"indent\":1,\"list\":\"bullet\"},\"insert\":\"\\n\"},\n {\"insert\":\"ddd\"}, {\"attributes\":{\"indent\":1,\"list\":\"bullet\"},\"insert\":\"\\n\"},\n {\"insert\":\"eee\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"}\n]\ninto this:\n<ol>\n <li>aaa</li>\n <li>bbb</li>\n</ol>\n<ul>\n <li class=\"ql-indent-1\">ccc</li>\n <li class=\"ql-indent-1\">ddd</li>\n</ul>\n<ol>\n <li>eee</li>\n</ol>\nBut it should render one list like this:\n<ol>\n <li>aaa</li>\n <li>bbb</li>\n <li>\n  <ul>\n   <li>ccc</li>\n   <li>ddd</li>\n  </ul>\n </li>\n <li>eee</li>\n</ol>\nThis second way is simpler, leaner HTML and makes the item ordering easier. Currently the editor uses weird CSS things like counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9 and counter-increment. But simply nesting lists correctly would eliminate the need for this CSS.. I noticed this issue too. It's very bad.\nThe problem is with the way Quill is rendering lists in general. I think the \"ql-indent-#\" classes should be abandoned completely, and instead lists should properly nest other lists (inside if li elements).\nFor example, Quill.js currently turns this:\n[\n {\"insert\":\"aaa\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},\n {\"insert\":\"bbb\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"},\n {\"insert\":\"ccc\"}, {\"attributes\":{\"indent\":1,\"list\":\"bullet\"},\"insert\":\"\\n\"},\n {\"insert\":\"ddd\"}, {\"attributes\":{\"indent\":1,\"list\":\"bullet\"},\"insert\":\"\\n\"},\n {\"insert\":\"eee\"}, {\"attributes\":{\"list\":\"ordered\"},\"insert\":\"\\n\"}\n]\ninto this:\n<ol>\n <li>aaa</li>\n <li>bbb</li>\n</ol>\n<ul>\n <li class=\"ql-indent-1\">ccc</li>\n <li class=\"ql-indent-1\">ddd</li>\n</ul>\n<ol>\n <li>eee</li>\n</ol>\nBut it should render one list like this:\n<ol>\n <li>aaa</li>\n <li>bbb</li>\n <li>\n  <ul>\n   <li>ccc</li>\n   <li>ddd</li>\n  </ul>\n </li>\n <li>eee</li>\n</ol>\nThis second way is simpler, leaner HTML and makes the item ordering easier. Currently the editor uses weird CSS things like counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9 and counter-increment. But simply nesting lists correctly would eliminate the need for this CSS.. @jhchen ok, I see where you're coming from.. @jhchen ok, I see where you're coming from.. ",
    "cmawhorter": "252 asks for a compelling use case.  i don't understand how this isn't it?\nthis behavior has been part of microsoft word (and every other rich text editor i've ever used) for as long as i can remember.\n\ni'd argue that -- from a user perspective -- enter/shift+enter is as-expected in a rich text editor as ctrl+c/ctrl+p.. #252 asks for a compelling use case.  i don't understand how this isn't it?\nthis behavior has been part of microsoft word (and every other rich text editor i've ever used) for as long as i can remember.\n\ni'd argue that -- from a user perspective -- enter/shift+enter is as-expected in a rich text editor as ctrl+c/ctrl+p.. ",
    "stephenLYZ": "Hi, this case is the same to me, browser and OS i'm using:\n- bowser: chrome canary  61.0\n- OS:  macOS Sierra 10.12\n. discussed 117. ",
    "chanphillip": "@DmitrySkripkin Thanks for your reply!\nUnfortunately, what I'm looking for may be a little more complex.\nUser should be allowed to trigger the Blot by typing the syntax \"#\" and also edit the text in the Blot.\nThe Blot will be cancelled only when the syntax \"#\" is deleted.\nCurrently I'm checking all the lines every text-change, which does not seem like a good approach.. @DmitrySkripkin Thanks for your reply!\nUnfortunately, what I'm looking for may be a little more complex.\nUser should be allowed to trigger the Blot by typing the syntax \"#\" and also edit the text in the Blot.\nThe Blot will be cancelled only when the syntax \"#\" is deleted.\nCurrently I'm checking all the lines every text-change, which does not seem like a good approach.. ",
    "bjorn-ali-goransson": "@DmitrySkripkin , I'd love to make my own solution but I have a hard time finding what exactly Quill does that prevents the input. It seems not so straight forward.\nAdditionally, I think Quill fixes some cross-browser quirks with hacks which are required when using the ContentEditable as canvas.\nCare to chip in?. ",
    "erikreagan": "I've experienced this as well without the context of nw.js.\nExample video: http://d.pr/v/eFa1n2. ",
    "briantsai-rep": "Running into the same problem without context of nwjs, any tips on a solution? Running Quill on Chrome and Mac OSX.. ",
    "Rhonun": "@ibalajisankar did you ever submit a PR for this? or could I look at your implementation. I'm having trouble with getting the dropdowns to show. ",
    "ibalajisankar": "Hi @Rhonun . I didn't submit PR request. For the scrollable toolbar just include overflow:scroll in the ql-toolbar class. And then write a javascript function to toggle between overflow scroll and initial for the ql-toolbar..When User clicks on the ql-format class that function need to be triggered. . ",
    "Anoiing": "I want to set the video autoplay false and loop false , any one have some ideas?. I want to set the video autoplay false and loop false , any one have some ideas?. I want to set the video autoplay false and loop false , any one have some ideas?. I want to set the video autoplay false and loop false , any one have some ideas?. ",
    "guillaumepotier": "Any chance to have an update on that one? Thx :). Really a major version bump? this is just a small new export ;)\nBut yes indeed, it seems that something is messed up with es6 import + inheritance and quill.\nDo you want me to open a new issue for you to remember ? :]\nBest. Hi @jhchen, I'm working with @krichprollsch on that issue :)\nI understand why our input seems wrong. But these are the Deltas/Ops that Quill generate on this simple use case:\n1- get an empty document\n2- enter \"a\" letter\n3- format as heading\nYou can test it on quilljs.com homepage.\nPut a quill.on('text-change', (delta, oldDelta, source) => { console.log(delta) })\nin your console and watch the outputs, you'll have:\n{\"ops\":[{\"insert\":\"a\"}]}\n{\"ops\":[{\"retain\":1},{\"retain\":1,\"attributes\":{\"header\":1}}]}\nFortunately, a quill.getContents() seems to output the desired Delta:\n{\"ops\":[{\"insert\":\"a\"},{\"attributes\":{\"header\":1},\"insert\":\"\\n\"}]}\nBut, in our case, we work with shareDB (that uses through rich-text quill-Delta) and the quill-delta compose is producing a wrong output:\n```js\nconst Delta = require('quill-delta');                                            \nvar a = new Delta([{\"insert\":\"a\"}]);                                           \nvar b = new Delta([{\"retain\":1},{\"retain\":1,\"attributes\":{\"header\":1}}]);        \nvar composed = a.compose(b);                                                     \nconsole.log(composed); \n// the result is\n// Delta {\n//  ops: [ { insert: 'a' }, { retain: 1, attributes: [Object] } ] }\n// this is BAD\n```\nThat's why when we start our page and that our editor populates content from shareDB with quill.setContents(shareDBDocument.data) it populates this wrong input from above. quill.getContents() still output a good output (how's that, it do not uses same quill-delta mechanisme as rich-text?). But as @krichprollsch explained with its example above, with some others operations, it becomes a mess.\nWhat are we missing here?\nThanks for your time and your help. Thanks @calibr and @jhchen for your answers. Our problem might come from the first /n omission in our code within shareDB. We'll look today in that way.\nDunno how users do, but in our case we blindly do like said above a quill.setContents(shareDBData) and on an empty document, shareDBData = {\"ops\":[]}. Quill handle that by adding its /n automatically and then our ops in sharedb are missing that insert. We'll find a way but I think it might be a common mistake for others.\n@jhchen regarding var c = new Delta([{\"retain\":1},{\"retain\":1,\"attributes\":{\"header\":1}}]);, it seems wrong because of the two retains in the instructions. I'll re-read the delta documentation but I would have expected something more like just var c = new Delta([{\"retain\":1,\"attributes\":{\"header\":1}}]);, that's why I said it seemed wrong and I suspected that line to cause our later problems with the document.\nI'll keep you posted. Best\n. Hi @jhchen,\nThanks for your answer. I pulled down the repo and started working on it. Unless I realized\n1) It would take way too much time for me to dive into Theme, UI, Tooltip, etc.. to replace a mere css selector by something evolved as snow theme (+ tests!) \n2) In our product, we decided to fix it independently of theme, by directly allowing clicking on link in the editor. I use a custom module I registered that listen for every selection-change and open link if formats/link\nI don't think 2) would be a direction you'd share for Quill right? Otherwise, you'd already allowed the click directly, in snow or bubble?\nSince I'm not going into 1) maybe someone could grab this issue later. Maybe close it meanwhile.\nOn a sidenote, I'm not sure it is a \"feature\" rather than a \"bug\", this is quite disturbing to have links (with target _blank and all) in the editor, and no way to open them other than copy-pasting it or right-click-open-in-a-new-tab :)\nBest\n. I understand perfectly, did not wanted to be rude or something in my previous message. As I also owned a OS project I perfectly understand how you have to sort priorities.\nBe sure I'll try my best to contribute here since I'm using now Quill and that it gonna be the major part of our application.\nJust you're right, doing an edit/click tooltip like for snow theme is not my priority too.\nBest. Hi there,\nI think you should create a custom Blot (eg. PhotoSwipeBlot) that extend Embed blot and set your attribute to it.\nThe cloning Medium tuto should help you doing so I think.\nBest\n. Hi,\nThanks for your answer.\n\nSecond it does not fix the issue for inline embeds\n\nYou're right. I hesitated and did not manage to understand clearly the difference bw inline embeds and block embeds. I also asked myself if they should have the same behaviour.\nIf we do not want to involve markup, IMO we should put the test in normalizedToRange and test if one of the two bounds is an embed/blockembed. I first went for this solution and found it may come a bit late in the code.\nI'd be glad to modify and re-implement this last solution if it sounds better to you.\nWDYT?\nBest\n. Indeed @soccerloway when you select an embed blot, you \"get out\" of Quill content, and getNativeRange would indeed return null\nIn my product, it is not a problem really, users click again into Quill content to regain focus and type/move with keyboard.\nI suppose that if you want continuity into these gestures you would have to implement it yourself, by knowing where your embed content stands into the editor and programatically put focus in the right place in Quill.\nFeel free to test how we did that on Wisembly Jam.. ",
    "dczxw": "Many Thanks  @DawidLoubser !. ",
    "aliciawood": "That's what I'm confused about.  The Link.sanitize function doesn't wait for the promise to return.  Is there a way to get it to wait?  I am only able to ever have the link be undefined or a promise object.. ",
    "zdhxiong": "I have the same problem.\nIt's my IE 11 version:\n\n. I have the same problem.\nIt's my IE 11 version:\n\n. ",
    "legends-of-dorothy": "@jhchen I am having the same problem when typing in IE11 korean.\nI hope this problem is resolved.. ",
    "Husbin": "hello I have a problem in ie11,I use selection-change to trigger the blur event, it work well in chrome but in ie11,it trigger in the specified location , and can not work in other area. someone have the same problem? @jmzhang @jhchen . ",
    "kfedorov91": "bump\nAlso experiencing this issue on Chrome 61 on macOS 10.12 Sierra.. ",
    "gondar00": "Hi, \nsuppose in the above codepen URL you have set some static text using quill.setText('random text')\nand the theme is set to snow theme: 'snow'. You can use all the editing attributes from the available  theme that is bold, italic etc from the quill header.\nBut, If you change the theme to theme: 'bubble' you cannot see the bubble pop up.\nI have figured out how to solve it by using the below line instead of quill.enable(false) we need to use\nquill.root.setAttribute('contenteditable', false) by doing this the bubble pop up was coming as expected and the static content set was uneditable too. \nThank you so much for your reply.. Hi, \nsuppose in the above codepen URL you have set some static text using quill.setText('random text')\nand the theme is set to snow theme: 'snow'. You can use all the editing attributes from the available  theme that is bold, italic etc from the quill header.\nBut, If you change the theme to theme: 'bubble' you cannot see the bubble pop up.\nI have figured out how to solve it by using the below line instead of quill.enable(false) we need to use\nquill.root.setAttribute('contenteditable', false) by doing this the bubble pop up was coming as expected and the static content set was uneditable too. \nThank you so much for your reply.. ",
    "bogdaniel": "Found this awesome plugin https://www.npmjs.com/package/quill-image-resize-module . works like i wanted :D . ",
    "bdurand": "\ud83d\udc4d I'm running into a similar issue trying to add a style attribute to img tags. I traced the issue to the whitelisted attributes in this code:\n```javascript\nvar ATTRIBUTES = ['alt', 'height', 'width'];\nvar Image = function (_Embed) {\n  _inherits(Image, _Embed);\nfunction Image() {\n    _classCallCheck(this, Image);\nreturn _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));\n\n}\n_createClass(Image, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (ATTRIBUTES.indexOf(name) > -1) {\n        if (value) {\n          this.domNode.setAttribute(name, value);\n        } else {\n          this.domNode.removeAttribute(name);\n        }\n      } else {\n        _get(Image.prototype.proto || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: 'create',\n    value: function create(value) {\n      var node = _get(Image.proto || Object.getPrototypeOf(Image), 'create', this).call(this, value);\n      if (typeof value === 'string') {\n        node.setAttribute('src', this.sanitize(value));\n      }\n      return node;\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      return ATTRIBUTES.reduce(function (formats, attribute) {\n        if (domNode.hasAttribute(attribute)) {\n          formats[attribute] = domNode.getAttribute(attribute);\n        }\n        return formats;\n      }, {});\n    }\n  }, {\n    key: 'match',\n    value: function match(url) {\n      return (/.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url)\n      );\n    }\n  }, {\n    key: 'sanitize',\n    value: function sanitize(url) {\n      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';\n    }\n  }, {\n    key: 'value',\n    value: function value(domNode) {\n      return domNode.getAttribute('src');\n    }\n  }]);\nreturn Image;\n}(_embed2.default);\n```\nIs there any particular reason the attributes on images (and videos) need to be whitelisted? And is there any way via the runtime API to add more attributes to the whitelist?. ",
    "rifkegribenes": "I am not sure if this is related, but I am trying to add alt attribute to images. I couldn\u2019t do it with insertEmbed so I am trying to get it to work with dangerouslyPasteHTML, which I suspect is probably the wrong way to do it so please let me know if there\u2019s a better solution.\nI am using a custom Image handler (which is working fine with insertEmbed but it will only insert the URL and not the alt text) so that I can upload the images to Firebase and return the storage URL to insert into Quill. \nThis works fine to insert the URL (resized is my image URL with the resize params added):\nthis.props.quillRef.insertEmbed(range.index, 'image', resized, 'user\u2019);\nI\u2019m trying this to insert the html with alt attribute:\nthis.props.quillRef.clipboard.dangerouslyPasteHTML(range.index, imgHtml, 'user\u2019);\nwhere imgHtml = <img src=\"${resized}\" alt=\"${alt}\" />\nwhen I console.log imgHtml it gives me exactly what I want, but the editor seems to be stripping out the alt attribute and returning only the img tag with src attribute.\nis there something I can do to keep the editor from stripping out the alt attribute? is there a better way to do this than dangerouslyPasteHTML ?. I am not sure if this is related, but I am trying to add alt attribute to images. I couldn\u2019t do it with insertEmbed so I am trying to get it to work with dangerouslyPasteHTML, which I suspect is probably the wrong way to do it so please let me know if there\u2019s a better solution.\nI am using a custom Image handler (which is working fine with insertEmbed but it will only insert the URL and not the alt text) so that I can upload the images to Firebase and return the storage URL to insert into Quill. \nThis works fine to insert the URL (resized is my image URL with the resize params added):\nthis.props.quillRef.insertEmbed(range.index, 'image', resized, 'user\u2019);\nI\u2019m trying this to insert the html with alt attribute:\nthis.props.quillRef.clipboard.dangerouslyPasteHTML(range.index, imgHtml, 'user\u2019);\nwhere imgHtml = <img src=\"${resized}\" alt=\"${alt}\" />\nwhen I console.log imgHtml it gives me exactly what I want, but the editor seems to be stripping out the alt attribute and returning only the img tag with src attribute.\nis there something I can do to keep the editor from stripping out the alt attribute? is there a better way to do this than dangerouslyPasteHTML ?. @nitaskenderi thanks I will give it a try, do you have any example code I could look at to get started?. @nitaskenderi thanks I will give it a try, do you have any example code I could look at to get started?. thanks all, I got it figured out using a custom image blot, which works just fine.. thanks all, I got it figured out using a custom image blot, which works just fine.. ",
    "MidaAiZ": "What I do to fix it is rewriting the image format. In order to sanitize style preventing from attacks such as XSS Or unexpected style, I also add white list for style.\nEnvironment: React-quill\nLike this:\n```javascript\nimport {Quill} from 'react-quill';\nconst Parchment = Quill.import('parchment');\nconst BaseImage = Quill.import('formats/image');\nconst ATTRIBUTES = [\n  'alt',\n  'height',\n  'width',\n  'style'\n];\nconst WHITE_STYLE = ['margin', 'display', 'float'];\nclass Image extends BaseImage {\n  static formats(domNode) {\n    return ATTRIBUTES.reduce(function(formats, attribute) {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\nformat(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        if (name === 'style') {\n          value = this.sanitize_style(value);\n        }\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\nsanitize_style(style) {\n    let style_arr = style.split(\";\")\n    let allow_style = \"\";\n    style_arr.forEach((v, i) => {\n      if (WHITE_STYLE.indexOf(v.trim().split(\":\")[0]) !== -1) {\n        allow_style += v + \";\"\n      }\n    })\n    return allow_style;\n  }\n}\nexport default Image;\n```. ",
    "krichprollsch": "Hum well I see, I will search in this direction now.\nThank you for your response :+1: . Hum well I see, I will search in this direction now.\nThank you for your response :+1: . ",
    "bitmapdata": "Read this API - getText article.. ",
    "simonemazzoni": "@bitmapdata @benbro thanks a lot, I missed the #1105 closed issue!\nI was more interested in understanding why it return that \\n, anyway I will take in to account when using that method.. ",
    "pdcmoreira": "Thank you! The docs are not clear on this.. ",
    "Hatteron": "Awesome, thank you!. Awesome, thank you!. ",
    "jsmelcher": "Thank you @benbro . I needed it to change to markdown, and when I typed 1. it stylized it and got rid of the '1.' in text, but this is what I needed.. ",
    "feichao": "@jhchen Is there any solution to solve this bug #1568?. Bug Video:\nSafari Quill\nChrome Quill. ",
    "callum": "Hey @jhchen - thanks for coming back. Let me have another go at explaining...\n\nSteps to reproduce:\n1. Place the caret at the beginning of the word 'suscipit' (index 22).\n2. Mouse down and expand the selection to the whole word (index 30) and note that the selection appears as normal with a blue background.\n3. With the mouse still held down, drag to the left so the destination index of the selection is less than the origin index (e.g. beginning of the word 'elit', index 14) and see that the selection is collapsed (length 0) and shows just the caret with no blue background.\nExpected behaviour:\nThe selection does not collapse and maintains its length, adjusting its index accordingly. (I believe this involves swapping the value of length and index.)\nActual behaviour:\nThe selection is collapsed and shows just the caret with no blue background.\n\nIf the content isn't changed during selection this works absolutely as expected.. ",
    "madbence": "https://codepen.io/lennoff/pen/MoqoqZ\nit seems that the problem is when you set body as the scrollingContainer. might be related to #1570 . i managed to remove the position: absolute in our app, so it's not a problem for us anymore. feel free to close this issue if you think that it's wontfix!. ",
    "andresinaka": "@jhchen @alexkrolick guys, I'm trying to do exactly this. Is there a new way of doing this or I have to follow @neversun way of doing it??. Thanks @benbro! Here is the template! \nSteps for Reproduction\n\nhttps://codepen.io/andresyo990/pen/jYPmmo?editors=0110\nWrite something on the editor, select what you wrote, and touch the \"Test\" button\nNothing happens.\n\nExpected behavior:\nA new <span class=\"test-class\">selected text</span> is created in the html editor.\nActual behavior:\nNothing happens.\nPlatforms:\nChrome, Safari, Firefox (and I think all the others but those are the ones I have)\nVersion:\nVersion: 1.3.4. ",
    "robhicks": "Currently, I don't think Quill can be put into a web component which uses shadowDOM. It makes some assumptions about being able to access DOM elements using document, which won't work with shadowDOM. It would be much better if Quill provided as part of its configuration api to provide it the proper DOM context.. ",
    "astr0junk": "Exactly same problem. Searching the answer all night long. So it seems a parchment logic problem, about refNode comparison and current appending node. @jchen can you comment what about this thing?. ",
    "revmischa": "This is a high priority issue for us, we need the ability to initialize the editor with some pre-existing HTML with inline styling. . yeah switch to a different editor lmao. ",
    "sendlane-ray": "Is there a workaround for this?. Downgrade to version 1.0.3. (bug started with version 1.0.4)\nor delete the whitelist. \nThis bug only happens when the font family has quotes.\nimport Quill from 'quill';\nlet Font = Quill.import('attributors/style/font');\ndelete Font.whitelist;\nQuill.register(Font);\n. ",
    "mbv-og": "Hi @johnking \nmy custom List and ListItem classes replace the default formats, allowing me to use the pre-defined toolbar button to create one.\nA button won't do, of course, when parsing text from a JSON object. If all you got is text, insertEmbed is also not what you need, because that is more for embedded content such as images (that's what you can see in the example as well: https://quilljs.com/docs/api/#insertembed).\ninsertText is actually one of the functions you can look into. https://quilljs.com/docs/api/#inserttext  The third parameter here is format, which you can use to .. well, format your text, e.g. in case of my Collapsible Text it could look something like this:\nes6\nquill.insertText(quill.getSelection().index, 'Some nice random Text', 'collapsible', 'api');\nAt least as far as I know that should work; I don't have the means to test it right now, mind you.\nYou could also look into creating your own, new instance of Delta and use its .insert() functionality to the same end (documentation for that can be found here: https://github.com/quilljs/delta#insert). As far as I understand it you could even create several Deltas, one for each part (words, sentences, paragraphs and page) when iterating over the JSON Object and in the end create a single Delta out of all those using https://github.com/quilljs/delta#compose which can then be inserted into the editor using setContents.\nI could be wrong, of course. My Collapsible Text was the first time I created a format module for Quill so I am definitely not even close to being an expert on all this. I basically took a look at the List and Code formats as an example and worked from there.\nJust in case you'd like to have a look at it I created a gist with my List and ListItem here (ListItem needs to be included first, but Gist likes to sort by alphabet, apparently; in ES6 because I only have to support the latest FF and Chrome)\nhttps://gist.github.com/mbv-og/7c717e7c9a0673a9afca24d0866185be\nAll of the comments in my Collapsible Text module are written in German though, so not sure how much help that would be.\nHope all this helps in some way. Sorry I cannot be of more assitance right now.. ",
    "johnking": "Hi @mbv-og , \nthanks a bunch for your reply and suggestions. I will look into your suggestions soon. I did not expect the challenge to customize a sentenceBlot and add it into quill editor. \nI found slate editor very attractive but unfortunately it is integrated with react, and I am using angular instead.\nI will have a try based on your suggestion, if failed or too challenging, I will try other editor. \nthanks again.\n-John \n  . ",
    "danieldevsquad": "Something similar is happening in my case. I have multiple elements in the same page and when I change the alignment of an element, the 'selection-change' will not trigger for all the elements rendered after that.\nCheck this codepen:\nhttps://codepen.io/danielcamargo/pen/GvdXrj?editors=1111\n. ",
    "jhartma": "Okay, solved it. Here is how\n\nDefine a CustomBlock that replaces the p block and generates a unique id for each p tag\n```js\nconst Quill = require(\"quill\")\nconst Block = Quill.import(\"blots/block\")\nconst uuid = require(\"uuid\")\n\nclass CustomBlock extends Block {\n  static create() {\n    const node = super.create()\n    node.setAttribute(\"id\", uuid.v4())\n    return node\n  }\nsplit(index, force = false) {\n    if (force && (index === 0 || index >= this.length() - 1)) {\n      const clone = this.clone()\n      clone.domNode.id = uuid.v4()\n      if (index === 0) {\n        this.parent.insertBefore(clone, this)\n        return this\n      }\n      this.parent.insertBefore(clone, this.next)\n      return clone\n    }\n    const next = super.split(index, force)\n    next.domNode.id = uuid.v4()\n    this.cache = {}\n    return next\n  }\n}\nCustomBlock.blotName = \"block\"\nCustomBlock.tagName = \"p\"\n2. Add an attributor that adds header classes which can be css styledjs\nconst Quill = require(\"quill\")\nconst Parchment = Quill.import(\"parchment\")\nmodule.exports = new Parchment.Attributor.Class(\"custom\", \"header\", {\n  scope: Parchment.Scope.BLOCK,\n})\n```. Okay, solved it. Here is how\n\nDefine a CustomBlock that replaces the p block and generates a unique id for each p tag\n```js\nconst Quill = require(\"quill\")\nconst Block = Quill.import(\"blots/block\")\nconst uuid = require(\"uuid\")\n\nclass CustomBlock extends Block {\n  static create() {\n    const node = super.create()\n    node.setAttribute(\"id\", uuid.v4())\n    return node\n  }\nsplit(index, force = false) {\n    if (force && (index === 0 || index >= this.length() - 1)) {\n      const clone = this.clone()\n      clone.domNode.id = uuid.v4()\n      if (index === 0) {\n        this.parent.insertBefore(clone, this)\n        return this\n      }\n      this.parent.insertBefore(clone, this.next)\n      return clone\n    }\n    const next = super.split(index, force)\n    next.domNode.id = uuid.v4()\n    this.cache = {}\n    return next\n  }\n}\nCustomBlock.blotName = \"block\"\nCustomBlock.tagName = \"p\"\n2. Add an attributor that adds header classes which can be css styledjs\nconst Quill = require(\"quill\")\nconst Parchment = Quill.import(\"parchment\")\nmodule.exports = new Parchment.Attributor.Class(\"custom\", \"header\", {\n  scope: Parchment.Scope.BLOCK,\n})\n```. ",
    "TylerMills": "It seems unreasonable to require importing a library as a solution, especially for such a basic example as above, where I'm not using templates and components. Additionally there are a number of open issues with that project that make it a blocker.\n. ",
    "dhamaniasad": "@buffpojken Would it be possible for you to share some code on your implementation for oembed support? I'm evaluating Quill currently and oembed support is the main thing holding me back.. ",
    "kurtwilliam": "I am having this issue too - it can be confusing for users when the text selection goes away. It seems to happen for any select tags with a drop-down menu. Is there any known fix for this?\nThank you.. ",
    "GJMAC": "Is there going to be a fix applied to this?  I just tried to assign a placeholder, but still nothing shows when editor is empty.. ",
    "luiz-brandao-jr": "Just some minor corrections I thought I could contribute for now. . ",
    "henriqemalheiros": "@abramz that is a pretty doable workaround! Thanks!. @abramz that is a pretty doable workaround! Thanks!. ",
    "journalindoor": "I've made an adaptation with Angular in order to use Firebase.\nFor this i created the Custom-Quill.js archive below:\n```\nvar CustomQuill = new _CustomQuill();\nfunction _CustomQuill(){\nthis.Embed = Quill.import('blots/embed');\nthis.Inline = Quill.import('blots/inline');\nthis.Block = Quill.import('blots/block');\nthis.toolbarIcons = Quill.import('ui/icons');\nthis.toolbarOptions = [];\n\nthis.components = {};\nthis.componentsNames = {};\nthis.handlers = {};\n\nthis.quillEditorInstance;\nthis.baseContent;\n\n//functions\nthis.setBaseContent = _setBaseContent;\nthis.getBaseContent = _getBaseContent;\nthis.resetComponents = _resetComponents;\nthis.executeCommand = _executeCommand;\nthis.executeCommandCompound = _executeCommandCompound;\nthis.renderContent = _renderContent;\n\nfunction _resetComponents(){\n    for (i in this.components) {\n        this.components[i] = 0\n    }\n}\n\nfunction _setBaseContent(corpo){\n    baseContent = document.createElement('div');\n    baseContent.innerHTML = corpo;\n}\n\nfunction _getBaseContent(){\n    return baseContent;\n}\n\nfunction _executeCommand(tagName){\n    var quill = this.quillEditorInstance;\n    var selection = quill.getSelection();\n    var textSelected = quill.getText(selection.index, selection.length);\n\n    quill.deleteText(selection.index, selection.length);\n    var cObj = {text : textSelected};\n\n    quill.insertEmbed(selection.index,tagName, cObj)\n    quill.clipboard.dangerouslyPasteHTML(selection.index+selection.length,'<br>');\n}\n\n function _executeCommandCompound(tagName, extraTag){\n     var quillCompound = this.quillEditorInstance;\n     var selectionCompound = quillCompound.getSelection();\n     var textSelectedCompound = quillCompound.getText(selectionCompound.index, selectionCompound.length);\n     quillCompound.deleteText(selectionCompound.index, selectionCompound.length);\n     var cObjCompound = {text : textSelectedCompound + extraTag};\n     quillCompound.insertEmbed(selectionCompound.index,tagName, cObjCompound)\n     quillCompound.clipboard.dangerouslyPasteHTML(selectionCompound.index+selectionCompound.length,'<p></p>');\n}\n\n      function _renderContent(node, value, componentName, componentCounter){\n      if(value.text == undefined)\n      {\n         var contadorDeComponente = CustomQuill.getBaseContent().getElementsByTagName(componentName).length;\n         node.innerHTML = CustomQuill.getBaseContent().getElementsByTagName(componentName)[componentCounter].innerText;\n         this.components[componentName]++             \n      }\n    else\n    {\n        node.innerHTML = value.text;\n    }\n}\n\n}\n```\nTo create custom buttons i'm using these codes:\n```\nCustomQuill.components.titulovermelho = 0\nCustomQuill.componentsNames.titulovermelho = 'titulovermelho';\nCustomQuill.toolbarOptions.push([CustomQuill.componentsNames.titulovermelho])\nclass TituloVermelho extends CustomQuill.Embed {\n        static create(value) {\n            let node = super.create(value);\n            CustomQuill.renderContent(node, value, CustomQuill.componentsNames.titulovermelho, CustomQuill.components.titulovermelho);\n            return node;\n        }\n}\nTituloVermelho.blotName = CustomQuill.componentsNames.titulovermelho;\nTituloVermelho.className = CustomQuill.componentsNames.titulovermelho;\nTituloVermelho.tagName = CustomQuill.componentsNames.titulovermelho;\nQuill.register({\n    'formats/titulovermelho': TituloVermelho\n});\n```\nAnd:\n```\nCustomQuill.toolbarIcons[CustomQuill.componentsNames.titulovermelho] = 'T\u00edtulo Vermelho'\nCustomQuill.handlers.titulovermelho = _titulovermelho;\nfunction _titulovermelho() {\n    CustomQuill.executeCommand(CustomQuill.componentsNames.titulovermelho);\n}\n```. I've made an adaptation with Angular in order to use Firebase.\nFor this i created the Custom-Quill.js archive below:\n```\nvar CustomQuill = new _CustomQuill();\nfunction _CustomQuill(){\nthis.Embed = Quill.import('blots/embed');\nthis.Inline = Quill.import('blots/inline');\nthis.Block = Quill.import('blots/block');\nthis.toolbarIcons = Quill.import('ui/icons');\nthis.toolbarOptions = [];\n\nthis.components = {};\nthis.componentsNames = {};\nthis.handlers = {};\n\nthis.quillEditorInstance;\nthis.baseContent;\n\n//functions\nthis.setBaseContent = _setBaseContent;\nthis.getBaseContent = _getBaseContent;\nthis.resetComponents = _resetComponents;\nthis.executeCommand = _executeCommand;\nthis.executeCommandCompound = _executeCommandCompound;\nthis.renderContent = _renderContent;\n\nfunction _resetComponents(){\n    for (i in this.components) {\n        this.components[i] = 0\n    }\n}\n\nfunction _setBaseContent(corpo){\n    baseContent = document.createElement('div');\n    baseContent.innerHTML = corpo;\n}\n\nfunction _getBaseContent(){\n    return baseContent;\n}\n\nfunction _executeCommand(tagName){\n    var quill = this.quillEditorInstance;\n    var selection = quill.getSelection();\n    var textSelected = quill.getText(selection.index, selection.length);\n\n    quill.deleteText(selection.index, selection.length);\n    var cObj = {text : textSelected};\n\n    quill.insertEmbed(selection.index,tagName, cObj)\n    quill.clipboard.dangerouslyPasteHTML(selection.index+selection.length,'<br>');\n}\n\n function _executeCommandCompound(tagName, extraTag){\n     var quillCompound = this.quillEditorInstance;\n     var selectionCompound = quillCompound.getSelection();\n     var textSelectedCompound = quillCompound.getText(selectionCompound.index, selectionCompound.length);\n     quillCompound.deleteText(selectionCompound.index, selectionCompound.length);\n     var cObjCompound = {text : textSelectedCompound + extraTag};\n     quillCompound.insertEmbed(selectionCompound.index,tagName, cObjCompound)\n     quillCompound.clipboard.dangerouslyPasteHTML(selectionCompound.index+selectionCompound.length,'<p></p>');\n}\n\n      function _renderContent(node, value, componentName, componentCounter){\n      if(value.text == undefined)\n      {\n         var contadorDeComponente = CustomQuill.getBaseContent().getElementsByTagName(componentName).length;\n         node.innerHTML = CustomQuill.getBaseContent().getElementsByTagName(componentName)[componentCounter].innerText;\n         this.components[componentName]++             \n      }\n    else\n    {\n        node.innerHTML = value.text;\n    }\n}\n\n}\n```\nTo create custom buttons i'm using these codes:\n```\nCustomQuill.components.titulovermelho = 0\nCustomQuill.componentsNames.titulovermelho = 'titulovermelho';\nCustomQuill.toolbarOptions.push([CustomQuill.componentsNames.titulovermelho])\nclass TituloVermelho extends CustomQuill.Embed {\n        static create(value) {\n            let node = super.create(value);\n            CustomQuill.renderContent(node, value, CustomQuill.componentsNames.titulovermelho, CustomQuill.components.titulovermelho);\n            return node;\n        }\n}\nTituloVermelho.blotName = CustomQuill.componentsNames.titulovermelho;\nTituloVermelho.className = CustomQuill.componentsNames.titulovermelho;\nTituloVermelho.tagName = CustomQuill.componentsNames.titulovermelho;\nQuill.register({\n    'formats/titulovermelho': TituloVermelho\n});\n```\nAnd:\n```\nCustomQuill.toolbarIcons[CustomQuill.componentsNames.titulovermelho] = 'T\u00edtulo Vermelho'\nCustomQuill.handlers.titulovermelho = _titulovermelho;\nfunction _titulovermelho() {\n    CustomQuill.executeCommand(CustomQuill.componentsNames.titulovermelho);\n}\n```. ",
    "leimig": "Any news on this issue? I have the same problem. This is being discussed in https://github.com/quilljs/quill/issues/1248. ",
    "nelsonpecora": "I don't, and I also wrote a unit test to verify this was breaking but the unit test is passing. I'm checking to see whether I've got some assumptions in my code that might be making this break.... Aha! It's because I'm importing the Link and doing my own sanitization: here.\nIf I explicitly bind it to Link rather than simply this, everything works!. @sbley oh whoops, I guess it doesn't redirect when you change the folder structure of your project. Here's where that code lives now. (my own code is adding http:// to links, but only if they don't already have a protocol (e.g. tel:, mailto:) and only if they aren't jump links (e.g. #some-header)). ",
    "sbley": "@nelsonpecora The link to your own sanitization implementation is broken. Could you point me to some sample code that showcases custom sanitization?. ",
    "vbhargavmbis-zz": "I have observed a pattern with the words which cause the browser to freeze.\nIt looks like if the word contains a combination of Hiragana and Kanji or Katakana and Kanji, it causes the freeze.\nExamples of such words:\nkanji ->\u611f\u3058\ntanaka ->\u68da\u304b\nnishida ->\u897f\u3060\nokuremasu ->\u9001\u308c\u307e\u3059\nokane ->\u304a\u91d1. @jhchen Looks like this issue is on the radar. Do you have an ETA for a fix for this issue?. Here are screenshots of the expected and actual behaviour:\nExpected\nScreenshot taken on Chrome in Windows 8.1\n\nActual\nScreenshot taken on IE11 in Windows 8.1\n\n. ",
    "micmmakarov": "I have the same issue, maybe there's an ETA or how can I help?. ",
    "SevenZark": "I really don't know what I could try, since just importing Quill in a template causes the test to break. The only way I could fix it was to not import Quill, i.e. not use Quill.. It looks like simply having the Quill library present makes it want to immediately render something in the DOM ('document'). This won't work in a unit test since there is no actual DOM.. I should add, it does not matter what part of the code I am testing. In fact, I had no test code that dealt with the page where I wanted to use Quill. Just importing Quill in an app file caused the test process to bail and show the error.. Not if you don't request one. Trouble is, I get this error when NOT loading templates in mocha; just loading server modules to test. The mere fact that the files exist in the project causes this error.. I'm sorry, this is a bit hard to describe, I guess. Of course I understand Quill needs the DOM to work when Quill is invoked, and in files in which it is called. Please try to understand, maybe don't assume I know nothing at all even if I don't know as much as you or much about the inner complexities of the libraries in question.\nWhat I am trying to tell you is that I am NOT importing Quill in any of the modules I am TESTING. They are NOT loaded in my test script, period. Nonetheless, the test fails right on the command line when trying to invoke it, complaining about the error I mentioned. The fact that Quill appears in an import statement in a file at all in the source code causes this error to happen even when I AM NOT LOADING THAT FILE IN THE TEST. It seems that something about Quill loads very, very eagerly, in some way...? Whatever is going on, the fact is, if I wish to use best practices and test, I cannot have an import of Quill appear anywhere in any file in my code base, whether or not I am actually writing test script against that file.\nThis is not a problem with any other UI library I use, including React. I guess React must be doing something pretty \"silly,\" then? And all those other libraries are just \"silly\" too? Quill is very distinguished in being the only truly non-silly library I have tried to use. ;)\nAs I stated in the original post, I fully realize this may be outside the scope of what Quill wishes to accommodate. That's fine. It's an external, sorta \"dependency.\" But I thought it was surprising and thought it was worth mentioning since it completely rules out Quill for use in any Meteor application that uses the recommended test engine for Meteor. I thought you might want to know that. I don't have any expectation that it would be a high priority or anything. But please don't just call the concern \"silly.\". > Quill requires the DOM when it is imported, not when it is invoked. I think this may be what you are missing.\n@abramz  Yeah, I do understand that. What I'm trying to tell you is that, for that reason, I DON'T load any of the files which import quill, in my test scripts. For some reason mocha throws up over it anyway. Do you get me? I'm not loading any client side modules in my server tests in the first place, because I'm not testing the client. For some strange reason they fail anyway with errors from Quill complaining that there is no doc object. It's a surprising problem, and maybe that's why it's hard for me to explain it(?)\nIt could very easily be some strange, esoteric mocha bug that only Quill has triggered for me. I have no idea. I mean, it doesn't make any sense that mocha would be loading modules I'm not telling it to. A testing library like mocha doesn't normally eagerly load any resources you don't tell it to, which is why you have to stub and mock things sometimes. It would defeat the whole purpose of, e.g., unit testing.\nSorry I can't provide more insight about it. And like I said, I understand if it isn't something the Quill team can address. I might try asking about it in the Mocha world as well.. I can see 'invoke' was poor wording on my part. Let me attempt to clarify.\n\nI DO have files in my project which import Quill\nHowever, I DO NOT include those files in the Mocha tests\nI get errors from Quill about a missing document object anyway\n\nRegarding this strange situation:\n- I get that supporting Mocha isn't necessarily a priority for Quill since it's not a Quill dependency, and,\n- I get that it could be some esoteric Mocha bug too, so I may inquire in that world as well. Exactly! No idea, but it is.. Darn you and your logic! ;) I get your point. The problem is either something in how I'm configuring my test, or something weird that Mocha is doing.. ",
    "stinoga": "Interesting, that didn't seem to work. The click event still doesn't bubble up to the parent. Here's my code:\n```js\nclass Variable extends Embed {\n  static create(value) {\n    let node = super.create();\n    node.textContent = value;\n    node.setAttribute('contenteditable', false);\n    node.addEventListener('click', function(ev) {\n      ev.preventDefault();\n    }, false);\nreturn node;\n\n}\nstatic value(node) {\n    return node.textContent; //now text will show up in the delta\n  }\n}\nVariable.blotName = 'variable';\nVariable.tagName = 'SPAN';\nQuill.register(Variable);\n```. @jhchen Seems like event bubbling is prevented in the embed select function here:\nhttps://github.com/quilljs/quill/blob/d30e36d7a8e32d680b54ed47b40a79b839603fc9/core/selection.js#L47-L53. Closing as https://github.com/quilljs/quill/commit/6528f2a3a0bdae1f26c968aaf8fe27cbb17c05ed fixed the issue.. ",
    "oliverlin": "I found there is an existing issue has the same problem #1580. Closing this one.. ",
    "maximeozenne": "As it's done in Word Online, you can click on \"Header & Footer\" under the \"Insert\" Tab : \n\nIt opens 3 textboxs where you can write text at the left, middle or right of the header. This text will be placed at the top (or bottom if you filled the footer textbox) of each page during the print process.\nBut without the page break indicator, I'm not sure this feature would be useful. Anyway I handled it by adding my custom header skeleton on the html code so my users can fill it with the help of the bubble theme.. As it's done in Word Online, you can click on \"Header & Footer\" under the \"Insert\" Tab : \n\nIt opens 3 textboxs where you can write text at the left, middle or right of the header. This text will be placed at the top (or bottom if you filled the footer textbox) of each page during the print process.\nBut without the page break indicator, I'm not sure this feature would be useful. Anyway I handled it by adding my custom header skeleton on the html code so my users can fill it with the help of the bubble theme.. Not sure I nested them. I displayed the html code I got from my copy/paste and I got the following result :\n\nBut maybe I misunderstood what you told me. Not sure I nested them. I displayed the html code I got from my copy/paste and I got the following result :\n\nBut maybe I misunderstood what you told me. The editor is the div with the \"subpage\" id inside the \"page\" id so yes I guess all the  contained by the editor are in a div. The editor is the div with the \"subpage\" id inside the \"page\" id so yes I guess all the  contained by the editor are in a div. @seandearnaley I pasted the html in a previous comment.\n@jhchen Thanks ! I added <style>p {margin:0;}</style>  and now it's rendering perfectly (at least for the paragraphs)\nWhich CSS file can I add to get the exact same result than the editor ? I mean I used the \"indent+1\" button on an image to center it. It worked great on the editor but the image still at the left on the render. It comes from the <p class=\"ql-indent-2\"> which is not part of any css I import during the render process.. @seandearnaley I pasted the html in a previous comment.\n@jhchen Thanks ! I added <style>p {margin:0;}</style>  and now it's rendering perfectly (at least for the paragraphs)\nWhich CSS file can I add to get the exact same result than the editor ? I mean I used the \"indent+1\" button on an image to center it. It worked great on the editor but the image still at the left on the render. It comes from the <p class=\"ql-indent-2\"> which is not part of any css I import during the render process.. My bad, as you said I had to add the \".ql-editor\" class to the container I'm using to render with the bubble css linked to make it looks like the editor. Thanks for your help !. My bad, as you said I had to add the \".ql-editor\" class to the container I'm using to render with the bubble css linked to make it looks like the editor. Thanks for your help !. ",
    "gschwartzbard-ra": "Chrome\nBest,\nGary\nOn Aug 7, 2017, 4:18 AM -0400, Jason Chen notifications@github.com, wrote:\n\nWhat browser are you using? The native Android browser or Chrome or Firefox?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "utizr": "I was running into the same issue. Also on Mac chrome and firefox. I will try it tonight on linux, but I suspect it is not browser/os related.. ",
    "fuafa": "The blockquote block has the same problem as well. seems customizing own blockquote format can solve this problem related to #1056 . ",
    "mort3za": "I want an option to make editor RTL by default, but users can change direction by 'direction' button in toolbar everytime they need it. \nAnother issue is toggling direction to LTR by button  should add a class to element (at the moment, setting direction of an element to LTR by clicking 'direction' button, does not add any class to it, So it's impossible to detect elements with forced LTR direction) . @de-Generation No. I just removed 'alighn to left' button, But I know it's not a solution. . ",
    "mohammad-aqajani": "handling using JQuery :\n(\".ql-direction\").trigger(\"click\");. ",
    "caryuval": "You can add a p element inside the Quill container, then write the following jquery:\n$(\"#quillContainer p\").addClass(\"ql-align-right ql-direction-rtl\");. You can add a p element inside the Quill container, then write the following jquery:\n$(\"#quillContainer p\").addClass(\"ql-align-right ql-direction-rtl\");. ",
    "de-Generation": "@mort3za did you find any solution?. ",
    "AugustusZ": "@mort3za did you have any new solution? Thanks!. @mort3za did you have any new solution? Thanks!. In case any people need to have the dropdown for alignment, an empty string is for left alignment:\n[{ 'align': ['', 'right', 'center']}],\n\nhttps://codepen.io/AugustusZ/pen/mLzKmW. ",
    "tegola": "\nI think it's better to have an option to set default direction of editor to RTL.\n\nThis would be handy, but you can do the same by initializing the editor and set the text direction and alignment:\n```javascript\nvar node = document.getElementById('editor');\nvar editor = new Quill(node, { theme: 'snow' });\neditor.format('direction', 'rtl');\neditor.format('align', 'right');\n```\n\nAlso I saw the generated code of editor and it set's a class for every node (ql-align-right ql-direction-rtl), this causes adding unneeded classes to text.\n\nQuill works with the Delta format, which can be read back and formatted as you wish. It is not supposed to output compatible html. If you need to tweak html output, you need to tinker with Parchment. See some examples here.. ",
    "sonaye": "css\n.ql-editor {\n  direction: rtl;\n  text-align: right;\n}. @alihasaniGit Yes this assumes a fixed direction, in my use case there was no need for it (all rtl). You should be able to dynamically change/append classes to the editor's DOM node though.\n```js\n.ql-editor-ltr {\n  direction: ltr;\n  text-align: left;\n}\n.ql-editor-rtl {\n  direction: rtl;\n  text-align: right;\n}\n<div class=\"${isRtl ? 'ql-editor-rtl' : 'ql-editor-ltr'}\">\n```\nSide note: Full details of my work (with React) can be found here (demo), change https://github.com/sonaye/react-quill-wysiwyg/blob/master/src/Wysiwyg/factory.js#L7 to import the rtl stuff.. ",
    "ali-hasani": "\ncss\n.ql-editor {\n  direction: rtl;\n  text-align: right;\n}\n\nwe want to make it rtl initially and also make it selectable (changeable), but with your idea it will be locked in rtl direction and the direction option in toolbar will be useless ... > ```css\n\n.ql-editor {\n  direction: rtl;\n  text-align: right;\n}\n```\n\nwe want to make it rtl initially and also make it selectable (changeable), but with your idea it will be locked in rtl direction and the direction option in toolbar will be useless ... ",
    "slightGT": "Thank you for your reply, I've already tried to use handle option without any result... I'll ask clarification to the jQuery UI team.\nThank you. Thank you for your reply, I've already tried to use handle option without any result... I'll ask clarification to the jQuery UI team.\nThank you. ",
    "frabnt": "Any news on this?. ",
    "beratcelik": "You may use jQuery to overcome the issue. Basically move the tool bar to any other div that you want.\n```\n\n\n\n\n\nvar toolbarOptions = [\n              ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n              ['blockquote', 'code-block'],\n\n              [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n              [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n              [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n              [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n              [{ 'direction': 'rtl' }],                         // text direction\n\n              [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n              [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n\n              [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n              [{ 'font': [] }],\n              [{ 'align': [] }],\n\n              ['clean']                                         // remove formatting button\n            ];\nvar quill = new Quill('page', {\n              modules: {\n                toolbar: toolbarOptions,                \n              },\n              placeholder: 'Compose an epic...',\n              theme: 'snow'  // or 'bubble'\n            });\n$(\"#toolbar\").append($(\".ql-toolbar\"));\n\n```. ",
    "wags1999": "This also occurs in IE 11.. ",
    "mitjaz": "Sorry for the confusion with the description, I've tried to update it a little bit. I experienced the same kind of problems you have, but also none of the quill events seem to fire any more. On the examples with floating toolbar, the toolbar doesn't appear anymore after selecting text.\nWhat may be of help is that formatting with keyboard shortcuts works as expected.. ",
    "pmlord": "Does anyone have advice on how to listen for the ENTER or TAB keys from a custom module? As far as I know, the module's initialization happens after Quill's, so my only option in the custom module constructor is to use the quill.addBinding function.. ",
    "witwave": "can compose those ops before text-change   when using IME.. ",
    "HWliao": "the position of cursor will be wrong, if modiy this. root cause: mousedown was triggered,but the museup was not triggered.\nan operation causes this problem:\n1.Press the mouse in the browser and do not release it\n2.Move the mouse outside the browser\n3.Release the mouse\nMaybe we can write it like this:\n``` javascript\n    let mouseCount = 0;\n    this.emitter.listenDOM('mousedown', document.body, () => {\n      mouseCount  = 1;\n    });\n    this.emitter.listenDOM('mouseup', document.body, () => {\n      mouseCount  = 0;\n      if (mouseCount === 0) {\n        this.update(Emitter.sources.USER);\n      }\n    });\n    this.emitter.listenDOM('selectionchange', document, () => {\n      if (mouseCount === 0) {\n        setTimeout(this.update.bind(this, Emitter.sources.USER), 1);\n      }\n    });\n``\nThe next time the mouse is uped, it can fix themouseCount  = 0But not perfect. ",
    "shaneshearer-andculture": "Is there any idea on the timing for the next version with this commit?. ",
    "jumc1998": "Was an issue with the order the code was placed in.. ",
    "sourcec0de": "If this is expected behavior is there a solution to be able to retain the formatting easily?. I ended up solving this by adding my own key binding that reapplies the formatting under the correct conditions.. ",
    "christopherbauer": "I have tried to implement a \"pass all html through\" matcher here: Attempt to Fix *Updated\nI am getting \"Delta() is undefined\". I used the logic from the documentation so I'm a bit confused, do I need to add a special CDN library to access Delta?\nI found that deltas are implemented in a separate library, I thought it would work if I was using the main quill.js. I'll try to update the pen ASAP.. I have tried to implement a \"pass all html through\" matcher here: Attempt to Fix *Updated\nI am getting \"Delta() is undefined\". I used the logic from the documentation so I'm a bit confused, do I need to add a special CDN library to access Delta?\nI found that deltas are implemented in a separate library, I thought it would work if I was using the main quill.js. I'll try to update the pen ASAP.. @jhchen I understand that, I read the docs and stated as such clearly in the second comment in which I'm attempting to add a matcher that will allow passthrough of html. All I need is to understand why my node insert below doesn't work properly:\nhttps://codepen.io/anon/pen/ZJmXxo\n. @jhchen I understand that, I read the docs and stated as such clearly in the second comment in which I'm attempting to add a matcher that will allow passthrough of html. All I need is to understand why my node insert below doesn't work properly:\nhttps://codepen.io/anon/pen/ZJmXxo\n. ",
    "igorbuts": "While using Quill in my app I also need to add some arbitrary HTML, that is - adding ids to tags that are allowed by quill. I need this to link some items in the editor with other parts of my application.\n@jhchen, is adding ids also not safe from a bug free and user experience perspective?\nIf not, if there any possibility that such type of arbitrary HTML as this will be allowed?. ",
    "timamura2017": "What is the status?\nWhen will this bug be fixed?. ",
    "amxmln": "You are right, thanks. I missed that bug report for it while searching for one.. ",
    "jasperf": "My bad. It is supported for some versions. Got confused by x-es and check marks.. ",
    "petemcfarlane": "Thanks @DmitrySkripkin, that is almost exactly what I'm trying to achieve - when you hovered over \"five\" - but I want the bubble to always be above the selected text, not just when the bubble would appear out of the bounds.\n\nI tried to configure Quill by setting bounds to an element above the editor, and this seems to work! might this have any other side effects I should be wary of?\n. Perhaps I can be the guinea pig then :). ",
    "curiousdj": "Hey @Joeao, I appreciate you taking your time to point me in the right direction. I would be posting it in SO, as rightly suggested. \nAnd also, I have already gone through #662, and it not what I am looking for my current implementation. But, thanks anyway.\nCheers. hey @Joeao, that looks great. Can I request the code that you used to accomplish this?\nBy the way, here is the SO question I posted How to close the quill editor when done with editing . If you wish you can answer there too so that its useful for others.\nCheers. Thank You!. ",
    "swampthang": "Sorry, but, though I didn't use the actual issue template headings, I did include the information requested in the template. \nHere's a revised version: https://codepen.io/swampthang/pen/vJVJgV\nI see where, by creating a separate toolbar container, I also have to include the html for all the other settings items in order to get all the other options. This looks correct to me and seems to be working now. The only thing I have experienced with this is occasionally, when using bubble, the editor doesn't appear. I haven't been able to determine what I do to replicate this yet.. ",
    "CWBudde": "Thanks, I have missed that.. Thanks, I have missed that.. In your example you're passing true to the matcher instead of the expected node. I guess changing:\nquill.clipboard.addMatcher('variable', function(node, delta) {\n  return new Delta().insert({\n    variable: true,\n    ...\nto something like\nquill.clipboard.addMatcher('variable', function(node, delta) {\n  return new Delta().insert({\n    variable: node,\n    ...\nwould already help.\nNOTE: It's not passing 'true' anymore, but the node itself. This is already a first step. In fact you need to get the creation be aligned for both the manual creation (from the button) and the implicit creation (via matcher).. In your example you're passing true to the matcher instead of the expected node. I guess changing:\nquill.clipboard.addMatcher('variable', function(node, delta) {\n  return new Delta().insert({\n    variable: true,\n    ...\nto something like\nquill.clipboard.addMatcher('variable', function(node, delta) {\n  return new Delta().insert({\n    variable: node,\n    ...\nwould already help.\nNOTE: It's not passing 'true' anymore, but the node itself. This is already a first step. In fact you need to get the creation be aligned for both the manual creation (from the button) and the implicit creation (via matcher).. ",
    "jonathanheron": "I have the very same use case and the same problem. I'd love an official \"blur\" event for the editor, but in the meantime I'm wrapping the editor in a DIV that stop clicks inside the editor from bubbling up to parent DIVs. Then, on the parent DIVs I capture the clicks and close the editor if it is open.\n\n. ",
    "roy-rahul": "@akashkamboj did you get any solution. I'm in almost same situation.\nIt would be very helpfull if someone point me to right direction.. ",
    "aaron-hanson": "@benbro yes, I've seen that, but we are not interested in persisting the Delta, and then have to parse that with an editor just in order to display the rich text.  Far easier for us is persisting the rich text itself, which works fine, except for this one unicode character.  For now, we workaround by stripping out this span with the unicode character.. @benbro - that's all fine and well, but we sanitize everything from the user anyhow.  Now we just sanitize the offending Quill span as well...easy enough.  It's just odd that this span should be output by Quill in the first place.. Yes, I see your example works, but only if I wait 5 seconds.. The problem is that your example isn't the state I was describing.  Try clearing the editor, entering bold text on one line, hitting enter for a newline, and then inspecting the html.  The span is there in that case, same as I'm seeing in our app's usage of Quill.. @benbro - for instance, try this codepen example based on the one you sent me.  Put your cursor at the end of the \"test\" text, and hit enter.  You'll see the console log the <span class=\"ql-cursor\"></span>, which also contains the unicode character inside the span.. ",
    "szobov": "@DmitrySkripkin yep, but method optimize() called for all blots which has the same class. For example, if you open the console and change text, which wrapped with custom blot class, you will see that method optimize() called twice for both blots, although only one has changed. It's not suitable for me.. But nobody answer me there. :(. ",
    "agm1984": "I found the issue, and it was due to EJS usage of <%= %> rather than <%- %>\nI was doing some serious regex alterations when I noticed the = and remembered that it escapes chars and - doesn't.\nFix is this:\n<div id=\"articleContent\" style=\"display:none;\"><%- article.content %></div>\nYou can close this, but I feel good knowing I released a bunch of keywords into the world on this topic. It may happen again and my code samples show some logic I would have liked to see when I first started using Quill.. ",
    "Mushood": "if you landed here if you're using vue2-editor,\nyou need to pass the following object to your vue2-editor component as such:\noptionsEditor: {\n                    formats: [\n                        'bold','underline','italic'\n                    ],\n                },\nComponent:\n<vue-editor\n                                      v-model=\"body\"\n                                      :editorOptions=\"optionsEditor\"\n                              ></vue-editor>. if you landed here if you're using vue2-editor,\nyou need to pass the following object to your vue2-editor component as such:\noptionsEditor: {\n                    formats: [\n                        'bold','underline','italic'\n                    ],\n                },\nComponent:\n<vue-editor\n                                      v-model=\"body\"\n                                      :editorOptions=\"optionsEditor\"\n                              ></vue-editor>. ",
    "koan00": "It looks like 'matchVisual: false' has been removed from the support docs. Is it still valid?\nEdit: it's been removed from 2.0 documentation. Link to older version upgrade docs: https://github.com/quilljs/quill/blob/ee827ffb605ba491246f201d497ce0e7d9e193a0/docs/guides/upgrading-to-2-0.md#configuration\n. It looks like 'matchVisual: false' has been removed from the support docs. Is it still valid?\nEdit: it's been removed from 2.0 documentation. Link to older version upgrade docs: https://github.com/quilljs/quill/blob/ee827ffb605ba491246f201d497ce0e7d9e193a0/docs/guides/upgrading-to-2-0.md#configuration\n. ",
    "MarkoCen": "And I try the codepen in IE, the editor is surprisingly fast,  is it related to Chrome itself?. I found the reason, the browser default spell checking slowed down the editor since there are so many typos in that article. \n\nThe solution is to put spell-check=\"false\" to editor container element:\n<div id=\"quill-editor\" spell-check=\"false\"></div>\nI am going to close this issue. I experienced the same issue with an inline toolbar. As @gztchan said, the editor on official page is working well. Is it something wrong with the container element? Because in the previous example, the editor appended to body directly, and in official page, the editor appended to a child element of body. I have the exact same issue when I try to paste text into an embed blot, and my solution is to overwrite the onPaste method in Clipboard module, and let the bolt itself to handle the paste event:\n```javascript\n// first extends the default clipboard module, and overwrite the onPaste method\nimport Quill from 'quill';\nconst Clipboard = Quill.import('modules/clipboard');\nclass MyClipboard extends Clipboard {\n    constructor(...args) {\n        super(...args);\n    }\nstatic shouldPaste({ target }) {\n    // if the paste event target match the embed blot input class name\n    // just return false to stop the event\n    if (target.className === 'embed-blot-input') {\n        return false;\n    }\n    // otherwise return true\n    return true;\n}\n\nonPaste(e) {\n    // when paste event happened\n    // first call shouldPaste to check if this event should continue\n    if (MyClipboard.shouldPaste(e)) {\n        return super.onPaste(e);\n    }\n    e.preventDefault();\n    return false;\n}\n\n}\nQuill.register('modules/clipboard', MyClipboard, true);\n```\nNow embed blot paste event should stop propagation to quill editor, and you could add your onPaste event in embed blot, I use React in my project, so my embed blot component looks like:\n```jsx\nclass MyEmbedBlot extends Component{\n    constructor({ caption }) {\n        super();\n        this.state = { caption: '' }\n        this.onCaptionPaste = this.onCaptionPaste.bind(this);\n    }\nonCaptionPaste(e) {\n    // get input cursor position\n    const startIndex = e.target.selectionStart;\n\n    // get pasted text\n    const text = e.clipboardData.getData('Text');\n\n    // insert the pasted text at cursor position\n    const oldCaption = this.state.caption;\n    this.setState({ sliderCaption: `${oldCaption.substr(0, startIndex)}${text}${oldCaption.substr(startIndex)}` });\n}\n\nrender() {\n    return (\n        <div>\n            <input\n                className=\"embed-blot-input\"\n                value={this.state.caption}\n                onPaste={this.onCaptionPaste} />\n        </div>\n    )\n}\n\n}\n``\n. I have the exact same issue when I try to paste text into an embed blot, and my solution is to overwrite theonPastemethod inClipboard` module, and let the bolt itself to handle the paste event:\n```javascript\n// first extends the default clipboard module, and overwrite the onPaste method\nimport Quill from 'quill';\nconst Clipboard = Quill.import('modules/clipboard');\nclass MyClipboard extends Clipboard {\n    constructor(...args) {\n        super(...args);\n    }\nstatic shouldPaste({ target }) {\n    // if the paste event target match the embed blot input class name\n    // just return false to stop the event\n    if (target.className === 'embed-blot-input') {\n        return false;\n    }\n    // otherwise return true\n    return true;\n}\n\nonPaste(e) {\n    // when paste event happened\n    // first call shouldPaste to check if this event should continue\n    if (MyClipboard.shouldPaste(e)) {\n        return super.onPaste(e);\n    }\n    e.preventDefault();\n    return false;\n}\n\n}\nQuill.register('modules/clipboard', MyClipboard, true);\n```\nNow embed blot paste event should stop propagation to quill editor, and you could add your onPaste event in embed blot, I use React in my project, so my embed blot component looks like:\n```jsx\nclass MyEmbedBlot extends Component{\n    constructor({ caption }) {\n        super();\n        this.state = { caption: '' }\n        this.onCaptionPaste = this.onCaptionPaste.bind(this);\n    }\nonCaptionPaste(e) {\n    // get input cursor position\n    const startIndex = e.target.selectionStart;\n\n    // get pasted text\n    const text = e.clipboardData.getData('Text');\n\n    // insert the pasted text at cursor position\n    const oldCaption = this.state.caption;\n    this.setState({ sliderCaption: `${oldCaption.substr(0, startIndex)}${text}${oldCaption.substr(startIndex)}` });\n}\n\nrender() {\n    return (\n        <div>\n            <input\n                className=\"embed-blot-input\"\n                value={this.state.caption}\n                onPaste={this.onCaptionPaste} />\n        </div>\n    )\n}\n\n}\n```\n. same issue here, any ideas? I try to add customized clipboard matcher but no luck. same issue here, any ideas? I try to add customized clipboard matcher but no luck. ",
    "mengdu": "@gztchan @jhchen \nI think this is a question of editable div, on chrome, editable div loses focus to get focus will automatically scroll to the top again, I did experiments, div gains focus after reduction problem can be solved by the cursor position, but in qull editor, may be Block Formats do to Range object processing, so there will be a problem.. ",
    "sharadkap": "Hi All @gztchan @mengdu @jhchen @MarkoCen \nThis still seems to be an issue for me. I am using the exact same way of fixing the toolbar on the top of the page and using auto grow in the editor. \nHere's my HTML\n<div id=\"scrolling-container\" class=\"quill-editor\">\n            <div id=\"editor\">\n            </div>\n    </div>\nand CSS\n```\nscrolling-container {\nheight: 100%;\nmin-height: 100%;\noverflow-y: auto;\n\n}\n```\nLastly the JS\nvar options = {\n  //debug: 'info',\n  modules: {\n    toolbar: toolbarOptions\n  },\n  scrollingContainer: '#scrolling-container',\n  placeholder: 'Write something....',\n  readOnly: false,\n  theme: 'snow'\n};\nNow when I use a CSS to fix the position of the editor as in the fiddle above, I am still having the same issue, despite setting up everything based on the documentation. \nAny help? \nCheers!. ",
    "morfmorf": "@jhchen same here, check video please. Same behaviour with link insertion.. @jhchen same here, check video please. Same behaviour with link insertion.. ",
    "stargurl16": "Had the same issue and solved it with this quick fix\n$('.ql-picker').bind('mousedown',function(e){\n        e.preventDefault();\n});\n        . It appears to be that the framework 7 built-in fastclick is preventing the editor to focus. So just adding the class \"no-fastclick\" to the editor should solve the problem. . ",
    "Patricklea": "Does this way work?. ",
    "shashank-sharma": "Hi\nI was testing this feature in your codepen fiddle and then I notice that if we add 'formula' inside formats array then it will work fine else it will add white space. \nI tested this in chrome/firefox on Ubuntu 16.04.\nFiddle: https://codepen.io/shashank-sharma98/pen/BwoRde. ",
    "tarjei": "Duh! \nThanks. I'll see if I can suggest a PR for the docs. . I wasted a day not understanding this. Clearly it is needed.\ntir. 19. sep. 2017 kl. 15.39 skrev benbro notifications@github.com:\n\nIsn't it true for every format?\nIf you override the default list of formats, you need to specify all the\nformats you need.\nTo me, the formats https://quilljs.com/docs/formats/ and configuration\nhttps://quilljs.com/docs/configuration/#formats sections are clear.\nI don't think this change is needed.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/pull/1705#issuecomment-330542051, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAM5PyNEIPa4ibdKy7baSlcSdvxx5Y8sks5sj8QXgaJpZM4PcY7g\n.\n-- \n\n\nTarjei Huse\nMobil: 920 63 413\n. ",
    "hxfdarling": "\n. It's work when open align options\njs\n{\n  modules:{\n    toolbar:[{align:[]}]\n  }\n}. It's work when open align options\njs\n{\n  modules:{\n    toolbar:[{align:[]}]\n  }\n}. ",
    "arggh": "Just in case anybody else is impacted by this, I fixed this for myself like so:\njs\n// instantiate editor\n...\n/**\n * @TODO: Remove the extra line change added because of a bug in Quill Editor\n * source: https://github.com/quilljs/quill/issues/1702\n */\neditor.deleteText(editor.getLength() - 1, 1);. Just in case anybody else is impacted by this, I fixed this for myself like so:\njs\n// instantiate editor\n...\n/**\n * @TODO: Remove the extra line change added because of a bug in Quill Editor\n * source: https://github.com/quilljs/quill/issues/1702\n */\neditor.deleteText(editor.getLength() - 1, 1);. ",
    "NGyc": "\u600e\u4e48\u5728\u7f16\u8f91\u5668\u4e2d\u63d2\u5165\u6807\u7b7e\uff0c\u5e76\u7ed9\u6807\u7b7e\u6dfb\u52a0\u4e00\u4e2aclass\uff0c\u4f8b\u5982. \u6bd4\u5982\u6211\u73b0\u5728\u8981\u63d2\u5165\u4e00\u4e2a, \u600e\u4e48\u7ed9\u63d2\u5165\u7684div\u6dfb\u52a0\u4e00\u4e2aclass\u5462\uff1f. ",
    "dbsdragon": "println \"curl -x http://someproxy:8080 https://github.com/quilljs/quill\" redirects to https://github-production-release-asset-blabla.s3.amazonaws.com\n. ",
    "francois-m": "@guateandrew  Yes, you can get the height to be a percentage of the width with CSS, not directly on the iframe element, but on surrounding divs, like this:\n<div style=\"width:100%\">\n   <div style=\"height:0px; padding-bottom:56.25%; position:relative;\">\n      <iframe src=\"...\" style=\"position:absolute; left:0px; top:0px; width:100%; height:100%;\"></iframe>\n   </div>\n</div>\nHere, the 56.25% represents the 16/9 proportion.. ",
    "jaskiratr": "For responsive embedding\nIf it helps anyone I'm using JS to add a container to .ql-video elements and styling them with CSS\njs\nvar videos = document.querySelectorAll('.ql-video')\nfor (let i = 0; i < videos.length; i++) {\n  var embedContainer = document.createElement('div')\n  embedContainer.setAttribute('class', 'embed-container')\n  var parent = videos[i].parentNode\n  parent.insertBefore(embedContainer, videos[i])\n  embedContainer.appendChild(videos[i])\n}\n```sass\n.embed-container \n  position: relative\n  padding-bottom: 56.25%\n  height: 0\n  overflow: hidden\n  max-width: 100%\n.embed-container iframe, .embed-container object, .embed-container embed\n  position: absolute\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n```. ",
    "jmquigley": "Thank you for the quick response.  That fixed the issue I was having.. Thank you for the quick response.  That fixed the issue I was having.. ",
    "PNKBizz": "I think it happens because Parchment library used name ContainerBlot too.\nhttps://dev.to/charrondev/getting-to-know-quilljs---part-1-parchment-blots-and-lifecycle--3e76. ",
    "jrundellloyaltyone": "Nested bullet lists and indentations are also not correctly preserved when pasting from Word.. ",
    "CBattle": "So in the playground in the AutoSave: https://quilljs.com/playground/#autosave  \nReplace in the JS from the \"// Store accumulated changes\" down to the start of \"// Check for unsaved data\" with the below JS that simulates saving the content as HTML and then restoring the HTML from the database via the clipboard. I increased the delay to 10 seconds to give you time to make the bullet list.\nsetInterval(function() {\n  quill.clipboard.dangerouslyPasteHTML(quill.root.innerHTML)\n}, 10*1000);\nNow make some of the LOTR text into a bullet list and watch as the bullet list slowly creeps down the page as Quill inserts a <p><br/></p> at the font of the <ul>tag every refresh.\nIt only happens if the <ul> tag is not the first line.\n. ",
    "chrishiestand": "It's not clear from the documentation if an embedded video will autoplay or not. I want it to autoplay but I've got no idea if it's going to or not when the html is consumed.. ",
    "altschuler": "Thank you for testing that! :). ",
    "aikrez": "I'm using import Quill from 'quill/core/quill'; and I also have the typings installed \"@types/quill\". ",
    "tcchoudhary": "I am using TypeScript 2.0+, but not able to install \"@types/quill\"\n  . I am using TypeScript 2.0+, but not able to install \"@types/quill\"\n  . ",
    "zhoushuren": "@ModPhoenix alt\u5c5e\u6027\u4ee5\u53cawidth\u6216\u8005\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\u600e\u4e48\u7834\uff1f\u5728\u7ebf\u7b49\uff0c\u6025\uff01. ",
    "Mkluas": "@zhoushuren \u8bf7\u95eewidth\u5c5e\u6027\u627e\u5230\u65b9\u6cd5\u4e86\u5417. ",
    "lucsky": "@jhchen Um, unless I am missing something, just adding the icons is not enough, ui/icons.js still knows about H1 and H2 only.. @devozerov Here's a temporary hack that I am using to make links clickable, it's a short module which injects an event listener on the Quill container which disables the contenteditable property of <a> tags on mouseover (and re-enables it whenever another element is mouseover-ed).\n```javascript\nQuill.register('modules/clink', (quill) => {\n    let currentLink = null;\n    quill.container.addEventListener('mouseover', (evt) => {\n        if (evt.target.tagName === 'A') {\n            currentLink = evt.target;\n            currentLink.setAttribute('contenteditable', false);\n        } else if (currentLink) {\n            currentLink.removeAttribute('contenteditable');\n            currentLink = null;\n        }\n    });\n});\nconst quill = new Quill('#container', {\n    modules: {\n        clink: true\n    }\n});\n```\nThere are a couple edge cases which should be handled to make it more robust but it works pretty nicely for me.\nAlso, it does make it a bit harder to remove links since simply clicking on them triggers the href, but it is still possible by selecting from the left or right boundary.. ",
    "ModPhoenix": "Thanks for the advice, could you give an example of implementation for such a template:\n<a href=\"https://farm4.staticflickr.com/3894/15008518202_c265dfa55f_h.jpg\" data-size=\"1600x1600\"\n <img src=\"https://farm4.staticflickr.com/3894/15008518202_b016d7d289_m.jpg\" alt=\"\">\n</a>\nit would be very cool thanks. ",
    "soccerloway": "@guillaumepotier Hi,\nthanks for your solution. It makes my embed blot within editable element work well.\nBut the cursor will be unpredictable if I press arrow left to select a embed blot, because getNativeRange will return null, and causing listen function of modules/keyboard return.\nand the cursor position will be unexpected. \nI'm not sure that if I missed any details of your solution?\nquill version: 2.0.0-dev.3. @chloerei Thanks, your solution helps me a lot.\nWhen I typing  with Chinese IME in a empty line, and press delete key to delete all composing, a new unexpected line will appear under current line.\nAfter I merge your solution, it was fixed.\nBut another problem still alive, if there's a line above the typing empty line, when I press delete key durring composing, the current line with composing chars will be inserted into the start of above line.\nScreen shot for Steps\n\n\n\nCould you have any ideas ?\nTHX~. ",
    "elessariel": "Thanks for the information.. ",
    "Akitha": "Add this to styles.css\n.ql-editor {\nwhite-space: normal!important;\n}. ",
    "DrustZ": "thank you! I'll play with it. ",
    "Softvision-CristinaBadescu": "Hello @jhchen ,\nI was thinking that after removing an item from the \"Numbered list\", the numbering will go on, without creating a new one from the start. You can see below the described behavior:\n\n. Hello @jhchen ,\nI was thinking that after removing an item from the \"Numbered list\", the numbering will go on, without creating a new one from the start. You can see below the described behavior:\n\n. ",
    "nikolov-tmw": "@LFDM I wish I had found this back when I was implementing the same functionality :joy: .\nHowever, I'm having some issues with the embeds and the cursor, so I'm wondering if you've experienced that too.\nHere's the situation:\n\nThe cursor is one character after an embed: \nPressing the left arrow to move the cursor towards the embed, it moves up from where it is for normal text: \nIf I then move to the left again, the cursor is still next to the embed and matches it's height: \nAnother move to the left and the cursor finally moves to in front of the embed: \n\nAdditionally, if an embed is all by itself on one line, moving the cursor left towards it from the next line, the cursor will end up at the end of the line, instead of next to the embed.\nIn other cases, the editor looses focus if two embeds are right next to each other and I try moving the cursor left to right through the embeds.\nNot sure if those are issues with my setup specifically, or if you/anyone else is experiencing them too.\nEdit:\nI found the solution in #1678 . I also updated Quill to the latest version and simplified my embed.. ",
    "LuisReinoso": "@dearsina Thanks to shared you implementation but I found an issue when try to copy and paste some content that has styles or links. Do you have this trouble?. \nEdit\nTo solved this trouble use a differente tag name that conventional html\nTemplateMarker.tagName = 'test';. ",
    "screets": "@jhchen \nI have updated the title. Space has no effect in Firefox/Mac when your editable object is created by JavaScript like in the example. \nI am not sure if its only my installation, or its general Firefox issue.\nFirefox 57.0b7 (no extensions)\nMacOs Sierra 10.12.6\nWhat Firefox version are you using? Maybe i can try with that too.. ",
    "jackmaw": "Space key doesn't work for me too in either editor created by constructor this.quill = new Quill() or here: https://jsfiddle.net/jwb1rw4z/ \nreproduction:\ntype some words, press space then type another letter, the result will be:\n\"fizz b\" --> \"fizzb\"\nFirefox 58.0b6 (64 bit) or 57.00(64bit)\nWindows 10 Pro . @jhchen thanks, for the answer  with snow theme it works.\nHowever what if  i dont want to use stylesheets from snow theme?\nIn my opinion, this should be in base styles  its a little bit weird for me that i need some theme to basically have ability to write any article on firefox quantum.\nBtw, thanks for great editor i learn a lot reading quill code:). ",
    "masonblier": "I also hit this bug. We are not using the quill.core.css file. The critical CSS needed to fix this bug is:\n.quill-editor {\n    white-space: pre-wrap;\n}\nVery surprising this bug only happens on firefox, not chrome. It might be related with how innerHTML works: Chrome replaces trailing spaces with &nbsp;, but firefox does not.. ",
    "ZooTopiaGG": "@benbro I was doing that\uff0c but this doesn't work for me \n\n. ",
    "zhipengyan": "the same with #1764 . the same with #1764 . ",
    "albertxing": "\ud83e\udd14  I think the difference is a lot more obvious when running the profiler as well -- though that could very well be the overhead associated with profiling events.\nHowever if I use finer timing tools (e.g. performance.mark) to time only the appendChild, I see a slowdown of 2 - 3x. ",
    "kevinhend": "There must be another way to fix https://github.com/quilljs/quill/issues/1437. Is there any explanation why adding the empty listener even fixes this?\nAt the moment we are experiencing issues with codeblocks because of https://github.com/quilljs/quill/commit/c4d897838a463d8396c9e93ec9faf5e9bca5566d. \nTry pasting around 100 lines of code into the quill playground, select all of it and toggle the code style. This takes less than a second without the listener but 4 or 5 seconds with the listener enabled. The listener is called 11000 times for the 100 lines.... I can see that the listener was removed again in https://github.com/quilljs/quill/commit/41a60fbf7cc9d23f4d87c4a88c42bb56157e3432#diff-64791d4c2bd2baa277845f35fac28055\nAs far as I can tell, this is not yet reflected in 1.3.6 but only in develop (for 2.0?) . ",
    "paolavness": "Hello,\nWondering if there are any updates on this? I'm experiencing significant delays with deltas containing 5,000+ words and formatting. . ",
    "MikeAski": "@nunoguerra Just has to me merged & delivered, now \ud83d\ude42. @nunoguerra Just has to me merged & delivered, now \ud83d\ude42. ",
    "dip-iitr-ms": "Expected behavior:\nThe image should drag/drop between text with no difficulty.\nActual behavior:\nThe page is getting refreshed intermittently and all the content is erased. And if we are doing drag-drop of images between the text then a '~' icon is coming instead of dropping that image.\nPlatforms:\nEDGE Browser ( Version >= 16 )\nOS : Windows 10\nPlease help us on the same to resolve it.. ",
    "ryanpardieck": "Looks like there are some cross-browser issues: \n\nTypeError: Object doesn't support property or method 'extend'\n\nAlso there is a lint warning about the complexity of setNativeRange\n. ",
    "Graphettion": "Ah, didn't see this thread. Thank you @benbro. This non-issue can be closed then.. I wonder if someone has created a module for this.. ",
    "iSuslov": "really?. ",
    "chris-equis": "@jhchen Any updates for this issue?. ",
    "zabihy": "I'm using Quill in PrimeNG and this is my method. I don't know how I should use your code:\n```\neditorCreated(quill) \n{\n        const toolbar = quill.getModule('toolbar');\n        toolbar.addHandler('image', this.imageHandler.bind(this));\n        this.editor = quill;\n}\npushImageToEditor(url: string) {\n        const range = this.editor.getSelection(true);\n        const index = range.index + range.length;\n    var ImageBlot = Quill.import('formats/image');\n    ImageBlot.sanitize = function (url) {\n        return url;  // No sanitization\n    };\n\n    this.editor.insertEmbed(range.index, 'image', url);\n\n}\n. I'm using Quill in PrimeNG and this is my method. I don't know how I should use your code:\neditorCreated(quill) \n{\n        const toolbar = quill.getModule('toolbar');\n        toolbar.addHandler('image', this.imageHandler.bind(this));\n        this.editor = quill;\n}\npushImageToEditor(url: string) {\n        const range = this.editor.getSelection(true);\n        const index = range.index + range.length;\n    var ImageBlot = Quill.import('formats/image');\n    ImageBlot.sanitize = function (url) {\n        return url;  // No sanitization\n    };\n\n    this.editor.insertEmbed(range.index, 'image', url);\n\n}\n```. ",
    "devbazilio": "Did not work, there is a \"handleEnter\" function which prevents use of any added later handlers of Enter. ",
    "ShaiUX": "any update on this? any help needed?. any update on this? any help needed?. ",
    "43081j": "sorry for the slight delay, haven't been around recently.\ni'll check this out tonight and see if i can get the tests added. current failures seem to be due to the size of a line break differing in shadow DOM.. @jhchen i just ran the full test suite inside a shadow DOM container and all tests pass in chrome now (css was not being loaded the first time i tried so p tags were taller in shadow roots).\nSo at least this means now the aim of this PR has been met.\nI'll try put some work in on writing additional tests next. it just needs tests writing now i think.\nthere's still some comments @jhchen  hasn't responded to but the code is fine either way.\ni won't be massively available during christmas but will try get the tests written soon.. just whether we are ok with the EMITTERS array. if you keep making instances, of course the array will just grow until we can use Set. im fine with that because i dont see why anyone would ever make so many instances, though.. i've added some tests now. just the basics.\nto be honest we could test literally anything we already test in non-shadow dom. so ive just tested that the common things work.. yup my mistake, should have updated you. i did have a think about it.\nthe old method is now impossible and was a little unfortunate its self too, because of having to arbitrarily attach instances to dom nodes.\nthe current method is correct IMO other than the fact we have no way of knowing when an instance has been disposed of... \na memory leak is important to everyone, whether there are a lot of SPAs concerned with it or not isn't relevant. this leak will occur when you repeatedly make new instances over time (which is something people should not be doing, but we know it will happen). the solution to that is to have teardown somewhere, possibly in the constructor we can check if old instances are still in use.. ah much appreciated @giona69 , its helpful to have someone try it in a real world project.\nyour first issue, im surprised i didn't notice the contains call. i had commented about that exact issue elsewhere in the codebase recently. ill check it out soon as im able to\nthe second one, we can't really start shipping polyfills etc. we should probably either not support shadow roots in safari for now or find some workaround when we detect that getSelection doesn't exist.. @jhchen shadow dom v1 is shipped in chrome, safari and firefox AFAIK.\nim not sure what the best way for us to work around the safari bug is. if not for that, it would work fine there too.\nfirefox should work as they shipped much of shadow dom v1 recently.\nwe also have a bug with event handlers according to giona's post. ill get on that today if i can. @giona69 can you give the latest branch a try with your project if you don't mind?\ni added a small helper for the contains problem. so we now traverse the DOM tree using getRootNode (if available) and check contains of each host element.. should we use a weakmap for this? not sure what the value would be though... should these be reverted to document? why do we listen on document for mouse events? shouldn't we only listen on the editor container?. The old method won't work with shadow DOM due to the fact that querySelectorAll will not penetrate through shadow roots. \nThough I can see how EMITTERS could keep growing if you repeatedly make new instances (and they never be released). Needs some thought... If a listener exists above a shadow root, but the event fires from within said shadow root, the target will be the host of the shadow root rather than the element which fired the event.\ncomposedPath will handle this, though it looks like support for it isn't well documented. . afaik ownerDocument will always be the owning document, not the shadow root (a document fragment). ah fair enough, this can probably be reverted then as its specific to the body rather than the container.. @jhchen we could possible iterate through EMITTERS here, looking for any with a container which is no longer in the DOM tree. this isn't straight forward, though, because document.body.contains(node) is false for nodes in shadow trees. we would have to go up the tree (getRootNode) until we reach a node which is in document , if ever.. ah this won't work, we don't have any idea what container is at this point. @jhchen am i ok to just disable these where attachShadow isn't supported? firefox tests will fail until i do as they're unusually far behind in implementing the shadow dom spec.. ",
    "yorrd": "Let me know if I can help you run tests or figure out a specific issue! Very interested in this as well!. ",
    "petecarapetyan": "@jhchen \nWith polyfills I believe all browsers are shadow dom supported?\nhttps://www.polymer-project.org/1.0/docs/browsers\nThis ^ is an older report but it has better visuals.\nMore recent report is here but it mixes unrelated concerns such as Templates\nhttps://www.polymer-project.org/2.0/docs/browsers\nOr, not considering polyfills, this\nhttps://caniuse.com/#feat=shadowdomv1. ",
    "web-padawan": "@jhchen As of now, Shadow DOM v1 is supported by both Chrome and Safari, and will land in Firefox 63 (can be already tested in beta).\nAny chance for this PR to be revisited?. Tests are failing in Safari because not implemented getSelection() API.\nPotential fix would be using https://github.com/GoogleChromeLabs/shadow-selection-polyfill. Shadow selection polyfill does not work properly because of this line: https://github.com/quilljs/quill/blob/96e38e92637b75b907579d0cc1b201920aebe38c/core/selection.js#L32\nSee the listener in the polyfill where setTimeout is also used and the timeout is 0:     https://github.com/GoogleChromeLabs/shadow-selection-polyfill/blob/9eff233c765a685bbf488b2f8eba0d3d75f44cbd/shadow.js#L74. ",
    "pkaske": "Yes it is related. The issue is discussed in the comments and the related code change is here.. ",
    "melloware": "Looks good to me.  Hopefully it will get merged soon.. @jxmai We should respect the team's wishes here and create a new issue that explains the exact problem we are facing with the PrimeFaces Editor and why the attribute is necessary.. @jxmai For PF 6.2 we might want to take the latest QuillJS and patch this ourselves since it also resolves many other open PF issues with Quill right?   Thomas won't like it but it will buy us more time before PF 6.3 to get this QuillJS issue resolved a better way.. ",
    "jxmai": "Yes, we probably need a minimal reproducer (we already have as jsf form). The challenge part is we cannot simply host jsf app to codepen / jsfiddle as a sample, so we need to isolate it to pure front end somehow. I need to evaluate the effort as preparing ticket is harder than fixing a bug in this case IMHO.. @melloware Yes, it is a really small change with no side effect (actually the way it supposed to be before the other PR introducing changing behavior with a sample (I also debugged for him actually. They will work as is). However, we don't have enough proof from maintainer POV to get it to quill for now). It is sad to say, but we also have to balance the time constraint as I clearly noticed what was causing the problem that lead me to here, so custom patching will work immediately to fix our urgent issue. I guess we have to patch it ourselves as I probably don't have enough time & effort to isolate a sample before 6.2.\n\nAs for Thomas, we probably need to get his permission before doing that.. ",
    "andycwk": "Thanks... I'll give that version a shot and let you know how it goes :). That seems to have done the trick... many thanks \ud83d\udc4d . ",
    "sujeetbuddiga": "@oliveratgithub any leads on how can this be quickly achieved ?. @oliveratgithub any leads on how can this be quickly achieved ?. @jhchen any help in this direction is highly appreciated.. @jhchen any help in this direction is highly appreciated.. @oliveratgithub, but I wasn't able to get that working.\nWill be great if u can share a snippet for the same.. @oliveratgithub, but I wasn't able to get that working.\nWill be great if u can share a snippet for the same.. @oliveratgithub firstly, thanks a lot for sharing the code snippet.\nThis looks to be broken when using enter key for selection.. @oliveratgithub firstly, thanks a lot for sharing the code snippet.\nThis looks to be broken when using enter key for selection.. @oliveratgithub  done, looks like the old fiddles shared in the bug are working.\nAs a workaround used the old tribute library in the jsfiddle.. @oliveratgithub  done, looks like the old fiddles shared in the bug are working.\nAs a workaround used the old tribute library in the jsfiddle.. Thanks a lot @benbro ,\nWas expecting a much clear way todo. Thanks a lot @benbro ,\nWas expecting a much clear way todo. ",
    "syadiqfaliq": "@MadSpindel , Thanks, I managed to call quill mention values from json. But, do you have idea on how can I control the number of value listed on quill mention. I can't find the property of that,.. ",
    "RockStanley": "Quill uses CSS pseudo class to specify content for each toolbar dropdown menu, so do the menu label.\nFor example:\ncss\n/* static label */\n.ql-picker.ql-customoption .ql-picker-label:before {\n    content: \"Select Language\";     /* never changes its content as this menu's label changes */\n}\n/* dynamic label */\n.ql-picker.ql-customoption .ql-picker-label:before[data-value=\"en\"]:before {\n    content: \"English\";\n}\n/* options */\n.ql-picker.ql-customoption .ql-picker-item[data-value=\"en\"]:before {\n    content: \"English\";\n}\n.ql-picker.ql-customoption .ql-picker-item[data-value=\"zh\"]:before {\n    content: \"\u4e2d\u6587\";\n}\n/* you need to specify rules as many as your options */\nthen for the easy part, define the handler:\njs\nnew Quill(selector, {\n  modules: {\n    toolbar: {\n      /* ... */\n      handlers: {\n        'customoption': function(lang: string) {\n          /* do something with lang */\n        }\n      }\n    }\n  }\n}\naddition: maybe you need to manually specify a padding for the picker label, otherwise it will overlap the pseudo class content.\ncss\n.ql-picker.ql-customoption .ql-picker-label {\n    padding-right: 18px;\n}\nI traced through the source code to derive this solution.. ",
    "fncamm": "Thank you @RockStanley , good job!\nI've found a way to avoid creating a rule for each option, in my case HTML looks like this \nhtml\n<select class=\"ql-custom tooltip\" [title]=\"'values'\">\n        <option value=\"1\">value1</option>\n        <option value=\"2\">value2</option>\n        <option value=\"3\">value3</option>\n        <option value=\"4\">value4</option>\n</select>\nand the CSS rule is \ncss\n.ql-custom .ql-picker-item:before {\n  content: attr(data-label);\n}\nThe final result looks like this\n\n. ",
    "b0g3r": "I have the same question. I use only two elements of the toolbar - bold and italic, and I want that they can not be simultaneously applied. Any ideas how to do this?. ",
    "zaplachinsky": "@benbro That's not an issue, that's just a question.. ",
    "AbdullahElamir": "You can use DOM to clear the Editor \nvar element = document.getElementsByClassName(\"ql-editor\");\nelement[0].innerHTML = \"\";. ",
    "jacwright": "This is an issue with the browser and you'll find the same issue in other editors. I'm not sure if there is a solution to work around this, but the issue isn't with Quill itself. See this fork without quill, same issue: https://codepen.io/jacwright/pen/YaJZPE. I would recommend closing this or marking it as a feature request (to come up with a workaround if possible) rather than a bug.. That would work for search-replace where you have a class, but not as well for highlighted items with hover-cards that pop up or autolinks, where the markup might need to be <span data-id=\"123\"> or <a href=\"https://google.com\">google.com</a>.\nThank you for the suggestion!. ",
    "ShaggyDude": "I need to insert an a href with some classes applied in quill. Will check stack overflow.. I need to insert an a href with some classes applied in quill. Will check stack overflow.. ",
    "gweinfurther": "What good is a text editor if you can't use the content in your page? You need to be able to export HTML.. ",
    "weiweizhang": "could someone give me an example for how to customize code-block to \n<pre><code>xxxx</code></pre>. ",
    "faribajpr": "hi i'm using angular 2 and quill. when i'm typing in quill and make a text bold or... every thing is ok but when i want to save the text to database it's not bold anymore in my tables. what should i do?. ",
    "aftdotleo": "Same as Apple Chinese IME\nSteps for Reproduction\n\nFocus on new line start\nInput 'h'\nPress Backspace\nInput 'h'\uff0cit will get 'hh'\nAnd tap editor\uff0cthen Safari has crashed\n\n\n. ",
    "hotdko": "@DmitrySkripkin thank you for your time. Your code doesn't seems to be doing what I was hoping for. It works for content outside of Quill but not for its content:\nYou can see an example I trying it on here: https://codepen.io/anon/pen/EbRVxV \nresult for me is below. I would expect first fragment to be surrounded in html too.\n\n. ",
    "DennisSmolek": "Yes, that's how I learned how to do it within parchment. The point I was making is that I think at least style or class Attributors should be discussed within the Quill documentation.\nI think adding css beyond color & size is a common need and the documentation does a good job explaining how to add fonts to the whitelist but it does a poor job explaining how to add your own classes or styles which (I feel) are very useful and likely what folks are trying to do.\nI think instead of just sending folks to Parchment in the very last paragraph there should be a basic example and then \"Get even more details at the Parchment Readme\" if you're trying to keep the docs short.\nRight now if I wanted to learn how to add my own class .awesome when I click a button Id:\n\nGo to the how to customize quill page\nRead about styles and classes.\nRead about Blots (which I don't need)\nRead that if I want to do my Attributor own I need to...\nGo to Parchment Readme (at the very top) get confused so go back and...\nGo to the cloning Medium article, which shows how to add to existing attributors but not custom ones\nGo back to Parchment's docs, learn everything about how all of the code works and finally at the last section learn about the class/style attributors\nTry importing them with Quill but get rejected because the Typescript Definition doesn't have .imports like the docs say\nManually import all of parchment on my own.\nFeel like I'm already importing Parchment when I import Quill so tear through the source code to figure out what I'm doing wrong.\nGet frustrated and create Github Issue...\n\nJust looking to help out others and save them some time.... Yes, that's how I learned how to do it within parchment. The point I was making is that I think at least style or class Attributors should be discussed within the Quill documentation.\nI think adding css beyond color & size is a common need and the documentation does a good job explaining how to add fonts to the whitelist but it does a poor job explaining how to add your own classes or styles which (I feel) are very useful and likely what folks are trying to do.\nI think instead of just sending folks to Parchment in the very last paragraph there should be a basic example and then \"Get even more details at the Parchment Readme\" if you're trying to keep the docs short.\nRight now if I wanted to learn how to add my own class .awesome when I click a button Id:\n\nGo to the how to customize quill page\nRead about styles and classes.\nRead about Blots (which I don't need)\nRead that if I want to do my Attributor own I need to...\nGo to Parchment Readme (at the very top) get confused so go back and...\nGo to the cloning Medium article, which shows how to add to existing attributors but not custom ones\nGo back to Parchment's docs, learn everything about how all of the code works and finally at the last section learn about the class/style attributors\nTry importing them with Quill but get rejected because the Typescript Definition doesn't have .imports like the docs say\nManually import all of parchment on my own.\nFeel like I'm already importing Parchment when I import Quill so tear through the source code to figure out what I'm doing wrong.\nGet frustrated and create Github Issue...\n\nJust looking to help out others and save them some time.... @jhchen Hey Jason, I'm sorry if I came off being harsh or judgemental, that wasn't my intention at all and I'm sorry if I came off that way. I love Quill and it's instrumental in my application and I appreciate all the hard work put into it.\nI admit, I did struggle and was frustrated when I first wrote the issue, but I did not mean to seem confrontational. \nAdding custom attributors is very powerful, and is baked into Quill through parchment, but wasn't easy to find. If you don't think it important, no worries, it's your project.\nAs to falseness, that is my fault for being confusing. What I was saying is that in that link Quill documents using Quill.imports\nBut as I'm using typescript if I try to use Quill.imports it throws an error saying imports is not a method of Quill so I assumed that it did not work.\nI wasn't saying anything about Quill/Typescript I was talking about Quill.imports. @jhchen Hey Jason, I'm sorry if I came off being harsh or judgemental, that wasn't my intention at all and I'm sorry if I came off that way. I love Quill and it's instrumental in my application and I appreciate all the hard work put into it.\nI admit, I did struggle and was frustrated when I first wrote the issue, but I did not mean to seem confrontational. \nAdding custom attributors is very powerful, and is baked into Quill through parchment, but wasn't easy to find. If you don't think it important, no worries, it's your project.\nAs to falseness, that is my fault for being confusing. What I was saying is that in that link Quill documents using Quill.imports\nBut as I'm using typescript if I try to use Quill.imports it throws an error saying imports is not a method of Quill so I assumed that it did not work.\nI wasn't saying anything about Quill/Typescript I was talking about Quill.imports. ",
    "liSong5713": "@benbro  thanks , i wang to upload pictures every time ,the 'img' in a single line  \n\n<p></p><p><img  src=\" \"/></p><p></p>\n\n. @benbro  tranks man \uff01 i solve this problem. use this\n  this.quill.updateContents(\n                                            new Delta()\n                                                .retain(range.index)\n                                                .delete(range.length)\n                                                .insert('\\r')                                   \n                                                .insert({image: item.url})\n                                                .insert('\\r')). ",
    "rohusan": "I updated actual behavior to be clear what is not working. OS and browser is now mentioned as well, sorry about that.. I updated actual behavior to be clear what is not working. OS and browser is now mentioned as well, sorry about that.. ",
    "mchicasigler": "I can reproduce there if I change font-size and line-height like in my case:\n\n\n. I change the font-size and line-height because in mi app I have a huge style size with this values.\nIf you write a text with huge size and background, you can see the problem: https://codepen.io/anon/pen/pdQLxV. ",
    "donmeuse": "I found a \"Concat\" reference at https://github.com/quilljs/delta#construction-1 that allows me to combine the two deltas. Here's an implementation that works for my purposes:\n        var Delta = Quill.import('delta');\n        var passedDelta = new Delta(JSON.parse(passedValue));\n        var existingDelta = this.get(\"quill\").getContents()\n        var combinedDelta = existingDelta.concat(passedDelta);\n        this.get(\"quill\").setContents(combinedDelta).\n",
    "Olddude": "Nevermind people :) In case you need to add a custom protocol you can just override the existing property on the Quill global object -> window['Quill'].imports['formats/link'].PROTOCOL_WHITELIST = [\"whatever\"]. ",
    "zhuharev": "This is valid html5 tag http://w3c.github.io/html/syntax.html#void-elements. ",
    "benpence": "Haha so I do. Sorry about that!. ",
    "huenchao": "I now have a need, the need to achieve the contents of the first copy out of the original style, and then paste the editor.Therefore, I first listen to \u2018paste\u2019 events, get the copied content, and then modify the content. But I can not insert the processed html into the cursor position.\n.  I now have a need, the need to achieve the contents of the first copy out of the original style, and then paste the editor.Therefore, I first listen to \u2018paste\u2019 events, get the copied content, and then modify the content. But I can not insert the processed html into the cursor position.\n. My challenge is that I can not getSelection to get the cursor position. This is because I have used the copy function.. My challenge is that I can not getSelection to get the cursor position. This is because I have used the copy function.. ok\uff0cI have solved, with a quill.focus (). ok\uff0cI have solved, with a quill.focus (). ",
    "lil25": "I managed to do url validation, the code is not perfect, but works.\n            var tooltipSave = quillInstance.theme.tooltip.save;\n\n            quillInstance.theme.tooltip.save = function() {\n                // overwrite save link functionality\n                var url = this.textbox.value;\n\n                if(url.indexOf('http') === -1) {\n                    url = 'http://' + url;\n                }\n\n                $(this.textbox).removeClass('ql-error');\n                // validate url\n                if(util.validateURL(url)) {\n                    tooltipSave.call(this);\n                }\n                else {\n                    // show error in tooltip\n                    $(this.textbox).addClass('ql-error');\n                }\n            };. I managed to do url validation, the code is not perfect, but works.\n\n            var tooltipSave = quillInstance.theme.tooltip.save;\n\n            quillInstance.theme.tooltip.save = function() {\n                // overwrite save link functionality\n                var url = this.textbox.value;\n\n                if(url.indexOf('http') === -1) {\n                    url = 'http://' + url;\n                }\n\n                $(this.textbox).removeClass('ql-error');\n                // validate url\n                if(util.validateURL(url)) {\n                    tooltipSave.call(this);\n                }\n                else {\n                    // show error in tooltip\n                    $(this.textbox).addClass('ql-error');\n                }\n            };.\n",
    "alexsurg": "Also encountered this issue, can you please help with a fix.. Same here, can you please find a fix for this issue.. ",
    "chrisronline": "Hi @benbro,\nThat link doesn't resolve anymore. Is it possible for someone to repeat the information? I'm interested in how to get around this too.. ",
    "dannyrb": "@benbro. I am experiencing the same issue, and finding that the link is now a dead end.. @dkreft completely forgot about this issue. I had a similar experience. I kept playing and landed on something that looked like this:\n```\n// https://github.com/quilljs/parchment/#blots\nimport Quill from 'quill'\nlet Inline = Quill.import('blots/inline')\nclass SpellingBlot extends Inline {\n  static create(value) {\n    let node = super.create(value)\n    node.setAttribute('data-invalid-spelling', '')\n    node.setAttribute('data-alternative-spellings', [])\n    return node\n  }\nstatic formats(domNode) {\n    return {\n      isInvalidSpelling: domNode.hasAttribute('data-invalid-spelling'),\n      alternativeSpellings: domNode.getAttribute('data-alternative-spellings'),\n    }\n  }\n}\nSpellingBlot.blotName = 'spelling'\nSpellingBlot.className = 'spelling'\nSpellingBlot.tagName = 'SPAN'\nexport default SpellingBlot\n```\nOriginally, I only wanted the spelling class applied to the formatted section. When I couldn't get that to work, I began looking at code that would allow me to set a custom data-* annotation. After adding the create and formats methods, the spelling class appeared.\nThis seems to imply that there is more required to creating an extended Inline Blot than suggested in the documentation. \ud83e\udd37\u200d\u2642\ufe0f . ",
    "GildedHonour": "I've seen that, but what they've ended up with is unclear.. ",
    "jhoughjr": "Related, this does not work in WKWebView on OS X either.. ",
    "dannyzhan": "@benbro Sorry, but your solution doesn't work.\nI noticed my error was reported at first line of core\\polyfill.js\nlet elem = document.createElement('div');\nbut after I added browser check to it, it doesn't work too.\nThe only way works to me is to add browser check in the distributed quill.js as I updated in the original comment.\nAngular Universal(server side rendering) is enabled by default.\nSo I expect all the Angular 4 users will come across my issue.\n. ",
    "guillaume-ro-fr": "@dannyzhan If you solve the problem with Angular Universal and the global document, you will have another problem with DOMTokenList just after.\nIn your server.ts file, you can add : \n```ts\n// imports ...\nconst template = readFileSync(join(DIST_FOLDER, 'browser', 'index.html')).toString();\nconst domino = require('domino');\nconst win = domino.createWindow(template);\nglobal['window'] = win;\nglobal['window']['Promise'] = global['Promise'];\nglobal['document'] = win.document;\nglobal['navigator'] = win.navigator;\nglobal['Event'] = domino.impl.Event;\nglobal['Node'] = domino.impl.Node;\nglobal['DOMTokenList'] = domino.impl.DOMTokenList;\n// express configuration ...\n```. ",
    "brianebill": "Okay, thanks @benbro. That works.\nThe only remaining issue is that the placeholder text is shifted to the left of the contenteditable div \nWhen the text is clicked on the right it works, but when clicked on the left, nothing happens:\n\nIs there an easy way to shift the placeholder text to the right? I've tried adding margin and padding to .ql-blank so far, but no effect\n. Thanks for the heads up on issue templates.\nExpected Behavior: Placeholder text exists inside .ql-editor div so when user clicks on the text, the cursor appears and placeholder text disappears.\nActual Behavior: Placeholder text is shifted to the left so when the user clicks on the left half of the placeholder text nothing happens.\nSteps to Reproduce the Problem: Add placeholder text to a quill instance and click on the left half of the text and/or inspect the ql-blank div. Please let me know if you can't reproduce.\nSpecifications: I'm using Meteor JS\nImporting the quill editor into the template with the script:\n<script src=\"https://cdn.quilljs.com/1.3.4/quill.js\"></script>\nImporting css in the head tag: \n     <link rel=\"stylesheet\" href=\"//cdn.quilljs.com/1.3.4/quill.bubble.css\">\nVersion: 1.3.4\nPlatform: Mac OS 10.13. I have been able to fix with\n.ql-editor.ql-blank::before { margin-left: 40px; } \nPretty straightforward, but if you can reproduce, may be a bug. . To replicate the behavior:\nWhen I add:\n this.data.quill.keyboard.addBinding({\n   key: 8,\n   shortKey: false,\n   handler: function(range, context) {\n     console.log(context)\n   }\n });\n\nActual behavior: The handler only fires when text is being deleted, but not when a newline or image element is deleted.\nExpected behavior: The handler always fires.\n  . The following is documented by Quill. Apologies for not digging deeper:\n let bindings = {\n     // This will overwrite the default binding also named 'delete'\n     delete: {\n       key: 8,\n       offset: 0,\n       handler: function(range, context) {\n         console.log(this)\n       }\n     }\n   }.\n",
    "marciodsousa": "@rssluca I also have this issue currently. were you able to figure it out?. @rssluca I also have this issue currently. were you able to figure it out?. Different implementation, but exactly the same issue\nAlthough i'm using quill in another part of the app and it works great.\nBut thank you!\nOn Jan 10, 2018 23:14, \"rssluca\" notifications@github.com wrote:\n\n@marciodsousa https://github.com/marciodsousa Are you having this issue\nwith Quill and Formbuilder.js or a different implementation? In my case I\nended up moving the editor outside of the field edit window because I could\nnot figure out what was causing the issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1882#issuecomment-356755031, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADhJx4pggVir7r_RALw0A5jAe-A81fH1ks5tJTY8gaJpZM4RMjFI\n.\n. Different implementation, but exactly the same issue\n\nAlthough i'm using quill in another part of the app and it works great.\nBut thank you!\nOn Jan 10, 2018 23:14, \"rssluca\" notifications@github.com wrote:\n\n@marciodsousa https://github.com/marciodsousa Are you having this issue\nwith Quill and Formbuilder.js or a different implementation? In my case I\nended up moving the editor outside of the field edit window because I could\nnot figure out what was causing the issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/1882#issuecomment-356755031, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADhJx4pggVir7r_RALw0A5jAe-A81fH1ks5tJTY8gaJpZM4RMjFI\n.\n. so @rssluca and @benbro I was able to reproduce it very easily in codepen.\n\nYou just need to add contenteditable=\"true\" to the only div on the HTML and you can see this behaviour. At least for me this was the issue, but I don't know how/if quill can prevent this or if it qualifies as bad integration (probably).\nBasically error occurs when both .ql-editor and .ql-container are contenteditable=\"true\".. so @rssluca and @benbro I was able to reproduce it very easily in codepen.\nYou just need to add contenteditable=\"true\" to the only div on the HTML and you can see this behaviour. At least for me this was the issue, but I don't know how/if quill can prevent this or if it qualifies as bad integration (probably).\nBasically error occurs when both .ql-editor and .ql-container are contenteditable=\"true\".. Well, in my case, and I believe in general, it didn't make sense to have both .ql-container and .ql-editor as contenteditable. Also because this might lead to the user being able to delete the whole .ql-editor element (place cursor in the first position and press backspace).. Well, in my case, and I believe in general, it didn't make sense to have both .ql-container and .ql-editor as contenteditable. Also because this might lead to the user being able to delete the whole .ql-editor element (place cursor in the first position and press backspace).. ",
    "rssluca": "@marciodsousa Are you having this issue with Quill and Formbuilder.js or a different implementation? In my case I ended up moving the editor outside of the field edit window because I could not figure out what was causing the issue.\n. ",
    "sagarpatil": "Use case:\nIn my app there are a list of colors and font styles that the user can customize. When the fonts or colors are updated, the items should be simultaneously updated in the toolbar.\nI dynamically create my toolbar by defining a set of defaults and then pushing these into a defaultToolbar Array:\n```\nqlTB_BasicFormatting : ['bold', 'italic', 'underline', 'strike']\nqlTB_Lists : [{ 'list': 'ordered'}, { 'list': 'bullet' }],\nqlTB_Align : [{ 'align': [] }],\nqlTB_TypeStyles : [{ 'typo': [] }],\nqlTB_Buttons : [{ 'buttons': [] }],\nqlTB_Colors : [{ 'color': ['white','red','green','blue'] }]\ndefaultToolbar : [\n    // this.qlTB_Colors,\n        // this.qlTB_TypeStyles\n]\n```\nMy idea was to be able to update the individual arrays and then use quill.update() to update the respective toolbar. My app allows for multiple quill editors on the same page. I've also tried updating the HTML of the toolbar using something like:\n$('.ql-toolbar .ql-color .ql-picker-item:eq('+_.indexOf(colorsList, oldColor)+')').attr('data-value', color).css('backgroundColor',color);\nThis is just a cosmetic fix though. Ideally, I was hoping to be able to define and update the individual arrays and these changes would be reflected in the toolbar. The API should return true if update was successful.. Use case:\nIn my app there are a list of colors and font styles that the user can customize. When the fonts or colors are updated, the items should be simultaneously updated in the toolbar.\nI dynamically create my toolbar by defining a set of defaults and then pushing these into a defaultToolbar Array:\n```\nqlTB_BasicFormatting : ['bold', 'italic', 'underline', 'strike']\nqlTB_Lists : [{ 'list': 'ordered'}, { 'list': 'bullet' }],\nqlTB_Align : [{ 'align': [] }],\nqlTB_TypeStyles : [{ 'typo': [] }],\nqlTB_Buttons : [{ 'buttons': [] }],\nqlTB_Colors : [{ 'color': ['white','red','green','blue'] }]\ndefaultToolbar : [\n    // this.qlTB_Colors,\n        // this.qlTB_TypeStyles\n]\n```\nMy idea was to be able to update the individual arrays and then use quill.update() to update the respective toolbar. My app allows for multiple quill editors on the same page. I've also tried updating the HTML of the toolbar using something like:\n$('.ql-toolbar .ql-color .ql-picker-item:eq('+_.indexOf(colorsList, oldColor)+')').attr('data-value', color).css('backgroundColor',color);\nThis is just a cosmetic fix though. Ideally, I was hoping to be able to define and update the individual arrays and these changes would be reflected in the toolbar. The API should return true if update was successful.. UPDATE:\nI'm storing all content in arrays, deleting all instances of quill and related UI elements, re-initialising Quill instances, and then loading content from the array back into the respective Quill elements. Expensive and time consuming but works. This process adds extra paragraphs occasionally.\n@mrowles This post helped me - https://stackoverflow.com/questions/45877323/how-to-close-the-quill-editor-when-done-with-editing?rq=1 . UPDATE:\nI'm storing all content in arrays, deleting all instances of quill and related UI elements, re-initialising Quill instances, and then loading content from the array back into the respective Quill elements. Expensive and time consuming but works. This process adds extra paragraphs occasionally.\n@mrowles This post helped me - https://stackoverflow.com/questions/45877323/how-to-close-the-quill-editor-when-done-with-editing?rq=1 . ",
    "jabro86": "I would also be interested in a fix or workaround for this issue. :). ",
    "guilhemwishibam": "Html like this one\n<img src=\"https://img.jpg\" width=\"600\" height=\"200\" style=\"width:600px;height:200px;\">. ",
    "freitasskeeled": "I'm having the same issue over here. \nIf I paste HTML into the editor, all the inline CSS is lost and the HTML elements are converted to paragraphs and simpler element types.\nExample:\n<div style=\"width:375px\">\n    <div style=\"width:375px;margin-bottom:20px\">\n        <div style=\"margin:20px;float:left\">\n            <img src=\"www.dummy-data-img.com\">\n        </div>\n        <div>\n            <h1 style=\"font-family:OpenSans-Bold,sans-serif;font-size:18px;color:rgb(85,186,231);font-weight:normal;margin:0px\">\n                Foo Foo\n            </h1>\n            <h2 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:14px;color:rgb(102,102,102);margin:0px 0px 7px;font-weight:normal\">\n                Web Developer\n            </h2>\n            <h3 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:12px;color:rgb(102,102,102);margin:0px 0px 3px;font-weight:normal\">\n                9000005500\n            </h3>\n            <h3 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:12px;color:rgb(102,102,102);margin:0px;font-weight:normal\">\n                <a href=\"mailto:duu@dummy.com\" target=\"_blank\">duu@dummy.com</a>\n            </h3>\n            <div style=\"width:375px\">\n                <p style=\"font-family:LucidaGrande;font-size:8px;color:rgb(102,102,102)\">\n                    Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\nIs converted to:\n<div class=\"ql-editor\" contenteditable=\"true\" data-placeholder=\"Insert text here ...\">\n    <p><img\n        src=\"www.dummy-data-img.com\">\n</p>\n    <h1></h1>\n    <h2>Web Developer</h2>\n    <h3>(+351) 918 410 053</h3>\n    <h3><a href=\"mailto:duu@dummy.com\" target=\"_blank\">duu@dummy.com</a></h3>\n    <p><br></p>\n    <p>Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy</p>\n</div>\nIs there any way of allowing the pasting of HTML as it is or it's just a missing feature/bug?\nPlatforms:\nUbuntu Gnome LTS, Chrome 63.0.3239.132 \nVersion:\nQuill version : \"1.1.5\". I'm having the same issue over here. \nIf I paste HTML into the editor, all the inline CSS is lost and the HTML elements are converted to paragraphs and simpler element types.\nExample:\n<div style=\"width:375px\">\n    <div style=\"width:375px;margin-bottom:20px\">\n        <div style=\"margin:20px;float:left\">\n            <img src=\"www.dummy-data-img.com\">\n        </div>\n        <div>\n            <h1 style=\"font-family:OpenSans-Bold,sans-serif;font-size:18px;color:rgb(85,186,231);font-weight:normal;margin:0px\">\n                Foo Foo\n            </h1>\n            <h2 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:14px;color:rgb(102,102,102);margin:0px 0px 7px;font-weight:normal\">\n                Web Developer\n            </h2>\n            <h3 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:12px;color:rgb(102,102,102);margin:0px 0px 3px;font-weight:normal\">\n                9000005500\n            </h3>\n            <h3 style=\"font-family:OpenSans-SemiBold,sans-serif;font-size:12px;color:rgb(102,102,102);margin:0px;font-weight:normal\">\n                <a href=\"mailto:duu@dummy.com\" target=\"_blank\">duu@dummy.com</a>\n            </h3>\n            <div style=\"width:375px\">\n                <p style=\"font-family:LucidaGrande;font-size:8px;color:rgb(102,102,102)\">\n                    Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\nIs converted to:\n<div class=\"ql-editor\" contenteditable=\"true\" data-placeholder=\"Insert text here ...\">\n    <p><img\n        src=\"www.dummy-data-img.com\">\n</p>\n    <h1></h1>\n    <h2>Web Developer</h2>\n    <h3>(+351) 918 410 053</h3>\n    <h3><a href=\"mailto:duu@dummy.com\" target=\"_blank\">duu@dummy.com</a></h3>\n    <p><br></p>\n    <p>Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy Dummy</p>\n</div>\nIs there any way of allowing the pasting of HTML as it is or it's just a missing feature/bug?\nPlatforms:\nUbuntu Gnome LTS, Chrome 63.0.3239.132 \nVersion:\nQuill version : \"1.1.5\". @jhchen Thank you for the feedback. Is it possible to enable the pasting of HTML with inline CSS at all? I understand what you meant but I'm not talking about script tags with potential open door to attacks.. @jhchen Thank you for the feedback. Is it possible to enable the pasting of HTML with inline CSS at all? I understand what you meant but I'm not talking about script tags with potential open door to attacks.. ",
    "levous": "OK...  I've tried all sorts of solutions.  I created and registered custom format blots and attributors.  I was unsuccessful registering anything that would allow an img tag to have a very specific set of attributes.\nI understand the philosophy behind deltas and totally agree.  What an incredible solution!  I was unable to find any examples for clipboard or documentation for deltas that demonstrate how one can extend what is recognized.\nIf I understand the principle of Deltas, it would be ideal to represent the alignment of an image using an 'align' attribute.  Then, when formatting the dom, the formatter would emit the appropriate style=\"float:left; margin:1em\" during conversion.  I was unable to produce this using a custom formatter.\nYou can see one attempt here: CodePen ReactQuill Custom Blot\nEventually, I forked Quill and made the necessary changes in the default Image blot.  This worked!  \nHere is the diff:\n```\n@@ -1,20 +1,36 @@\n import Parchment from 'parchment';\n import { sanitize } from '../formats/link';\n+// override attributes to support image attributes.\n+//  alt, width, height, and style alignment )\n+// TODO: make checks to ensure style only contains the desired declarations\n+//      float; margin; display;\n const ATTRIBUTES = [\n+  'src',\n   'alt',\n   'height',\n-  'width'\n+  'width',\n+  'style'\n ];\nclass Image extends Parchment.Embed {\n+\n   static create(value) {\n-    let node = super.create(value);\n+    const imageNode = ATTRIBUTES.reduce(function(node, attribute) {\n+      const attrPresent = Object.prototype.hasOwnProperty.call(value, attribute);\n+      if (attrPresent) {\n+        node.setAttribute(attribute, value[attribute]);\n+      }\n+      return node;\n+    }, super.create(value));\n+\n+    // check for string only as in when uploading or dropping an image file\n     if (typeof value === 'string') {\n-      node.setAttribute('src', this.sanitize(value));\n+      imageNode.setAttribute('src', this.sanitize(value));\n     }\n-    return node;\n+\n+    return imageNode;\n   }\nstatic formats(domNode) {\n @@ -35,7 +51,12 @@ class Image extends Parchment.Embed {\n   }\nstatic value(domNode) {\n-    return domNode.getAttribute('src');\n+    return ATTRIBUTES.reduce(function(formats, attribute) {\n+      if (domNode.hasAttribute(attribute)) {\n+        formats[attribute] = domNode.getAttribute(attribute);\n+      }\n+      return formats;\n+    }, {});\n   }\nformat(name, value) {\n     if (ATTRIBUTES.indexOf(name) > -1) {\n       if (value) {\n         this.domNode.setAttribute(name, value);\n       } else {\n         this.domNode.removeAttribute(name);\n       }\n     } else {\n       super.format(name, value);\n     }\n   }\n }\n Image.blotName = 'image';\n Image.tagName = 'IMG';\nexport default Image;\n```\nI would like to accomplish this in the proper way.  Is there any way to allow these attributes to be retained on an img element through Quill?  \nThe specific use case is that I need to align and resize images in html.  The ImageResize module and retain the html changes made by that utility.  The issue is posted here.\n. ",
    "singhmohancs": "@brianmcdonough Why did you close this issue. Did you find the way to detect image delete?  Frola editor has this feature https://www.froala.com/wysiwyg-editor/docs/concepts/image/upload. ",
    "Nolence": "Just in case anyone needs this, here's what I did. I'm using firebase and the vue-quill-editor but I'll try to make this general:\njavascript\nquill.on(\"text-change\", (delta, oldDelta, source) => {\n  if (source === \"user\") {\n    let currrentContents = quill.getContents();\n    let diff = currrentContents.diff(oldDelta);\n    try {\n      console.log(diff.ops[0].insert.image);\n    } catch (_error) {}\n  }\n});. Just in case anyone needs this, here's what I did. I'm using firebase and the vue-quill-editor but I'll try to make this general:\njavascript\nquill.on(\"text-change\", (delta, oldDelta, source) => {\n  if (source === \"user\") {\n    let currrentContents = quill.getContents();\n    let diff = currrentContents.diff(oldDelta);\n    try {\n      console.log(diff.ops[0].insert.image);\n    } catch (_error) {}\n  }\n});. ",
    "blaadje": "Hi @jhchen did u have time to take a look? I'd be glad to give you more informations about the issue if you need to.. Hi @jhchen did u have time to take a look? I'd be glad to give you more informations about the issue if you need to.. Thank you, it did perfectly what i wanted !. Thank you, it did perfectly what i wanted !. ",
    "lordUhuru": "@faresayyad , were you able to fix this? I'm having the exact same issue\n. The way I solved it was to first eject webpack from angularcli.\nIn my webpack config file, I had to add quill to the plugins section.\nRefer to this post about how I did it on Stack Overflow\nQuill Image resize for Angular 2 quill module. @vibingopal , don't you think you should upvote the Stackoverflow link I gave and the post that helped you solve it so it'll help someone else before asking for help with the video resize?. ",
    "vibingopal": "Iam seeing the same issue . Have you able to fix the issue ?. I am able to fix the issue for the image resize editor. but not able to resolve the same for video resize. Do we need to specify anything in webpack config file as per above ? Right now iam using quill-video-resize-module https://github.com/Y-WeCode/quill-video-resize-module . @lordUhuru  I tried to Upvote and comment as soon as my issue is resolved.But unable to do that because of my profile privileges it seems. Will check again.. any update on this  ? . this is my end output in editor contents \nAssigned video to editor \n\nthis.editorContent = temp1;\nconsole.log('Editor Content', this.editorContent);\n\nOutput:\n>    <video src=\"blob:http://localhost:4100/98a2a2fe-6d74-4cfe-bc5b-96ff8493c18\" controls=\"controls\" autoplay=\"\" width=\"320\" height=\"240\"></video>. May i have any update on this please?. Iam trying to insert the blob video into quill editor. Here the video is recorder through different tool which is recordrtc. Once the recording stopped , iam assigning the blob url to video element and appending the quill contents as shown above.. I have asked the same question in stack overflow but there is no update. so i opened a new question here. Each question is different eventhough it is directing to the same output what we needed.. can you please confirm whether we can embed blob video to iframe ? like below \nblob:http://localhost:4100/4ab588cf-7ed7-4c08-8852-6c03895ae47a\" \nwhen iam setting the value of src it is not working.but when i do the same on browser console element it works fine.. my embeded url does not have single quote will that the reason ?. ",
    "theskillwithin": "+1. ",
    "tashburn": "Any sense when 2.0 comes out?. Any sense when 2.0 comes out?. ",
    "goofballLogic": "This will be awesome. Having to work around it for now.. ",
    "TheDominik": "If you look at the picture below, you can see that the cursor is in the first line. But it is suppose to be in the second, right? \nOr at least there should be a second line, since the content of the document contains a \"\\n\". And at least for me that is not the case. \n\n. Oh okay. That's a little bit confusing that two different inputs lead to the same result. Since they are not the same. I would have expected that if you enter\njavascript\n{ops: [{insert: \"\"}]}\nyou get an empty document and if you enter \njavascript\n{ops: [{insert: \"\\n\"}]}\nthat you receive an actual return / line break.. ",
    "danielmhair": "Actually, I did some more research and noticed that I can use the MutationObserver: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\nLike this:\n```\n    const observer = new MutationObserver((mutationList) => {\n      const childMutations = mutationList\n        // I only care about child mutations of the editor\n        .filter(mutationItem => mutationItem.type === \"childList\")\n        .forEach(childMutation => {\n          for (let i = 0; i < childMutation.addedNodes.length; i++) {\n            const addedNode = childMutation.addedNodes.item(i) as HTMLElement\n            // If a new video was added to the editor\n            if (addedNode.classList.contains(\"ql-video\")) {\n              // Do something with the video\n            }\n          }\n        })\n    })\nobserver.observe(this.getQuillEditorElement(), { attributes: true, childList: true })\n\n```\nUnless Quill has a better way to figure this out?. Actually, I did some more research and noticed that I can use the MutationObserver: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\nLike this:\n```\n    const observer = new MutationObserver((mutationList) => {\n      const childMutations = mutationList\n        // I only care about child mutations of the editor\n        .filter(mutationItem => mutationItem.type === \"childList\")\n        .forEach(childMutation => {\n          for (let i = 0; i < childMutation.addedNodes.length; i++) {\n            const addedNode = childMutation.addedNodes.item(i) as HTMLElement\n            // If a new video was added to the editor\n            if (addedNode.classList.contains(\"ql-video\")) {\n              // Do something with the video\n            }\n          }\n        })\n    })\nobserver.observe(this.getQuillEditorElement(), { attributes: true, childList: true })\n\n```\nUnless Quill has a better way to figure this out?. I assume this is probably the best solution. So I will close this.. I assume this is probably the best solution. So I will close this.. I made this same IndentAttributor and was receiving the same BlotClass.create is not a function, but found a solution here: https://github.com/quilljs/quill/issues/2351#issuecomment-433495029\nAlso, here is a codepen that uses the same code as @tegola with it working fine. I hope in posting this codepen, we can find a solution to resolve the text-align issue that this issue originally targets:\nhttps://codepen.io/anon/pen/LgqBxm\n. I made this same IndentAttributor and was receiving the same BlotClass.create is not a function, but found a solution here: https://github.com/quilljs/quill/issues/2351#issuecomment-433495029\nAlso, here is a codepen that uses the same code as @tegola with it working fine. I hope in posting this codepen, we can find a solution to resolve the text-align issue that this issue originally targets:\nhttps://codepen.io/anon/pen/LgqBxm\n. I made this same IndentAttributor and am receiving the same BlotClass.create is not a function. Any solution on this?. I made this same IndentAttributor and am receiving the same BlotClass.create is not a function. Any solution on this?. Yes, we did solve it. I must not have hit send in my last message.\nHere is what our solution looks like. Before looking, please keep in mind that we needed to add a little bit of hackery because of typescript. I will show our original code, then change it to show the important thing that needs to be changed.\n```\ndeclare const Quill: any\nexport const Parchment = Quill.import(\"parchment\")\nconst pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nconst TAB_MULTIPLIER = 30\nexport class IndentAttributor extends (Parchment.Attributor.Style as { \n  new(formatName: any, styleProperty: any, attributorOptions: any): any;}) {\n  constructor(formatName: any, styleProperty: any, attributorOptions: any) {\n    super(formatName, styleProperty, attributorOptions)\n  }\npublic add(node: HTMLElement, value: string): boolean {\n    return super.add(node, ${+value * TAB_MULTIPLIER}px)\n  }\npublic value(node: HTMLElement): number | undefined {\n    return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined // Don't return NaN\n  }\n}\nexport const IndentStyle = new IndentAttributor(\"indent\", \"margin-left\", {\n  scope: Parchment.Scope.BLOCK,\n  whitelist: pixelLevels.map(value => ${value * TAB_MULTIPLIER}px),\n})\n```\nIn the code, the most import part was:\nexport const Parchment = Quill.import(\"parchment\")\nBefore we did the following two ways:\n```\n// This import simply does not work and this was the line that caused the error\nimport * as Parchment from \"parchment\"\n// Our typescript tslint wouldn't allow this, because it thought of the const variable as private, so we needed to export it. For those without Typescript, you only need this one.\nconst Parchment = Quill.import(\"parchment\")\n```\nAlso, in that code, you might have seen that the extend has a constructor type (new(formatName, ...)). For simplicity, I'm going to show the code as if I didn't use Typescript:\n```\nconst Parchment = Quill.import(\"parchment\")\nconst pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nconst TAB_MULTIPLIER = 30\nexport class IndentAttributor extends Parchment.Attributor.Style {\n  add(node, value) {\n    return super.add(node, ${+value * TAB_MULTIPLIER}px)\n  }\nvalue(node) {\n    return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined // Don't return NaN\n  }\n}\nexport const IndentStyle = new IndentAttributor(\"indent\", \"margin-left\", {\n  scope: Parchment.Scope.BLOCK,\n  whitelist: pixelLevels.map(value => ${value * TAB_MULTIPLIER}px),\n})\n```\nIt might be important to know how I register it with Quill:\nQuill.register({ \"formats/indent\": IndentStyle }, true). ",
    "ladygarnet00": "i did not see that issue before, but it's the same case. it puts some span lines on my editor value when i use the toolbar controls. i'll use getContents and see what happens. This is an issue for me, the output it needs to be raw html .. i did not see that issue before, but it's the same case. it puts some span lines on my editor value when i use the toolbar controls. i'll use getContents and see what happens. This is an issue for me, the output it needs to be raw html .. ",
    "benjamingwynn": "I'm getting this when trying to use Quill 1.3.4 inside of a Custom Element\n```\nconst Quill = require(\"quill\") // load js via webpack\ncustomElements.define(\"markdown-editor\", class extends HTMLElement {\n    constructor () {\n        super()\n    this.attachShadow({mode: \"open\"})\n\n    this.shadowRoot.innerHTML = `\n        <div id=\"editor\">\n            <p>Hello World!</p>\n        </div>\n\n        <style>\n            :host {\n                display: block;\n            }\n        </style>\n\n        <!-- TODO: load CSS via Webpack -->\n        <link href=\"https://cdn.quilljs.com/1.3.4/quill.snow.css\" rel=\"stylesheet\">\n    `\n\n    this.$editor = this.shadowRoot.querySelector(\"#editor\")\n\n    this.editor = new Quill(this.$editor, {\n        bounds: this.shadowRoot,\n        theme: \"snow\"\n    })\n}\n\n})\n``\nUser Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3215.0 Safari/537.36`. ",
    "watsab": "@ivansolskiy  I'm also having trouble creating an editor component in Polymer with Quill. Did you find a way to correct this issue ?. Hi! Any news on this issue ? I spent some time on it but could not find a fix yet :(. @vanooo : thanks a million! I'll try it as a soon as possible :smiley: . @vanooo I've tried your fork and so far it works perfect! Thanks a million!\nEdit: the solutions in #1805 is not supported by other browsers than chrome :disappointed: Still thanks @vanooo !. ",
    "ivansolskiy": "@watsab no, it is on pause. I figured out that it works in firefox and safari, but not in chrome. I will come back to this problem on next week. Let's share updates here. Take a look at https://github.com/chuckh/polymer-quill. I don't really like the implementation, but it seems to work, may be you will figure out something.. ",
    "vanooo": "@watsab, yes. take this build: https://github.com/vanooo/quill/tree/develop/dist\nyou can view last 2 commits to understand what was changed. Basically you need only quill.js. It is my build but it was not my idea, I found solutions here: https://github.com/quilljs/quill/pull/1805. @watsab, i have tested my build it in all browsers, even in IE11 and it works for me.. ",
    "stas-kh": "Yes, I've tried.\nThe result is the same:\n\n. We've switched to another editor because of this problem and lack of tables support in the editor.. ",
    "tuomassalo": "I'd like to amend @DmitrySkripkin's comment, since it can be confusing and even dangerous for inexperienced developers.\nClient-side modules can never prevent XSS attacks, even in theory. A malicious user can craft a http request that sends an XSS payload to the server, bypassing any client-side sanitation.\nThe correct way to prevent XSS attacks with rich-text editors is to enforce a whitelist of sanitation rules on the server, before storing the content. See #510 and eg. https://github.com/punkave/sanitize-html.. ",
    "hiYoHoo": "\u8bf7\u95ee\u4f60\u6709\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417. \u8bf7\u95ee\u4f60\u6709\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417. ",
    "icewind7030": "@hiYoHoo \n\n\u6211\u597d\u50cf\u662f\u4fee\u6539\u4e86core/selection.js\u8fd9\u4e2a\u6587\u4ef6\u89e3\u51b3\u7684\uff0c\u65f6\u95f4\u592a\u4e45\u4e86\uff0c\u4f60\u53ef\u4ee5\u8bd5\u8bd5. @WinMinTun I tweak the core/selection.js a little just like the image I posted, it seems fixed the problem, and I chose not to update my quill.js file together with the origin repository any more. So I can not be sure it works for now or is it still a problem since the origin repository changes a lot. \nThe code I added is below:\njavascript\nthis.emitter.emit(Emitter.events.TEXT_CHANGE, null, null, Emitter.sources.USER);\nif(/iPhone OS 9/i.test(navigator.userAgent) || /iPhone OS 10/i.test(navigator.userAgent)) return; . You can use the \"Embed\" blot.. ",
    "vk2sky": "Also, if I'm looking in the right source file (quill.core.js), the method sometimes returns various types of value, but these are not listed on the API page for the method.. Hi @jhchen thanks for the documentation update.\nSomething I just noticed. In the Quill.register example:\n\nclass CustomModule extends Module {}\nQuill.register('modules/custom-module', Module);\n\nShould the second line be:\n\nQuill.register('modules/custom-module', CustomModule);\n\n?. ",
    "ethanzhoujie": "It seems I can't save a codepen with an image, please flow the steps to produce it. Thanks.. ",
    "jadams760": "@dalsword I am running into this issue as well. Were you able to find a solution?. ",
    "dalsword": "@jadams760 \nNope. Evaluating other alternatives\n. ",
    "nick4501": "After further investigation, this is actually a bug in Chrome, not specifically with Quill.  Closing and raising with the Chrome team.. ",
    "starpit": "I've switched to something else, but I think it'd be valuable to your users to document why variant 2 works, but variant 3 does not. Your linked documentation doesn't explain this to me. . ",
    "nadavrt": "I'm getting the same error under different circumstances. Quill's setSelection method seems to no be acting properly. Not sure if my case falls within the same umbrella as this issue but since the thrown error is identical I thought I'd share it here. More details on Stack Overflow.. Quill has native support for what you are trying to accomplish. Specify a selector for the toolbar contain when creating your Quill instance:\njavascript\nvar quill = new Quill('#editor', {\n  modules: {\n    toolbar: '#toolbar'     // Equivalent to { toolbar: { container: '#toolbar' }}\n  }\n});\nIn the toolbar container make sure your HTML syntax is built correctly (according to the docs). For example:\nhtml\n<div id=\"toolbar\">\n   <div class=\"ql-toolbar ql-snow\">\n      <span class=\"ql-formats\">\n         <select class=\"ql-size\">\n            <option value=\"small\"></option>\n            <option selected></option><!-- Note a missing, thus falsy value, is used to reset to default -->\n            <option value=\"large\"></option>\n            <option value=\"huge\"></option>\n        </select>\n         <button type=\"button\" class=\"ql-italic\"></button>\n         <button type=\"button\" class=\"ql-underline\"></button>\n      <span class=\"ql-formats\">\n         <button type=\"button\" class=\"ql-indent\" value=\"-1\"></button>\n         <button type=\"button\" class=\"ql-indent\" value=\"+1\"></button>\n         <select class=\"ql-align\">\n            <option selected=\"selected\"></option>\n            <option value=\"center\"></option>\n            <option value=\"right\"></option>\n            <option value=\"justify\"></option>\n         </select>\n         <button type=\"button\" class=\"ql-direction\" value=\"rtl\"></button>\n         <button type=\"button\" class=\"ql-list\" value=\"ordered\"></button>\n         <button type=\"button\" class=\"ql-list\" value=\"bullet\"></button>\n      </span>\n      <span class=\"ql-formats\">\n         <button type=\"button\" class=\"ql-image\"></button>\n         <button type=\"button\" class=\"ql-code-block\"></button>\n         <button type=\"button\" class=\"ql-script\" value=\"sub\"></button>\n         <button type=\"button\" class=\"ql-script\" value=\"super\"></button>\n         <button type=\"button\" class=\"ql-clean\"></button>\n      </span>\n   </div>\n</div>. ",
    "laukaichung": "I'm getting the same error when using mobx to observe the entire delta object returned by the editor.\n````\n@observer\nexport class FormPage extends React.Component {\n   @observable comment;\nrender(){\n      return <ReactQuill value={comment} onChange={this._onChange}/>\n}\n\n_onChange = (content, delta, source editor)=> {\n      this.comment = editor.getContent()\n}\n\n}\n````. ",
    "abelski21": "Any updates or fix for this? I'm also having the same problem using ReactQuill with custom toolbar handlers. It appears to be working fine if I only use the mention custom toolbar together with combination of generic toolbar buttons, but when I click the markImportant (which only updates the observable) it throws an error same with what others experienced above: \nquill.js:3145 The given range isn't in document.\nsetNativeRange @ quill.js:3145\nsetRange @ quill.js:3166\nfocus @ quill.js:2879\nfocus @ quill.js:1189\nHere's my code:\n```\nrender(): {\n   return (\n     \n   );\n}\nprivate editorModules = (): any => {\n    return {\n      toolbar: {\n        container: \"#\" + this.id,\n        handlers: {\n          markImportant: this.markImportant,\n          insertMention: this.insertMention\n        }\n      },\n      keyboard: {\n        bindings: this.keyboardBindings\n      }\n    }\n  };\nprivate insertMention = (): void => {\n    const data = {\n      name: 'John Doe',\n      id: '1'\n    };\n    const range = this.quillEditor.selection.savedRange;\n    if (!range || range.length != 0) return;\n    const position = range.index;\n    this.quillEditor.insertEmbed(position, 'mention', data, Quill.sources.API);\n    this.quillEditor.insertText(position + 1, ' ', Quill.sources.API);\n    this.quillEditor.setSelection(position + 2, Quill.sources.API);\n};\nprivate markImportant = (): void => {\n    this.markedPriority = !this.markedPriority;\n    this.props.markPriority(this.markedPriority);\n};\n```. Okay, so I was able to fix it by saving the editor ref to a private variable within componentWillMount(), then it should only render once that private variable is not null. So I guess that solves the issue on re-rendering the editor when pressing mention or important button in the toolbar. But I hope we can still address this issue, it's a bit annoying every time we want to update an observable prop and quill needs to re-render.. @jhchen when are you planning to release this fix?. @DeyLak I've tried your solution and I don't see the error anymore although when the component was re-rendered the range position is always at the start. Might need to add something at the componentWillUnmount()?\n\n. ",
    "HeGanjie": "I solve this issue by caching the modules props, instead of keep creating a new instance during each render.\nBefore:\njsx\n<ReactQuill\n        modules={{...}}\n        ...\n      />\nAfter:\njsx\n<ReactQuill\n        modules={this.modules}\n        ...\n      />. ",
    "antoniologa": "You can't assign a prop to value directly. You must assign it to state first. If you dont do this, the value of content will be always the prop value.\n```javascript\nclass RichEditor extends Component {\n    static propTypes = {\n        content: PropTypes.string,\n    }\ncomponentDidMount() {\n    this.setState({\n        text: this.props.content,\n    })\n}\n\nstate = {\n    text: '',\n\n\nhandleChange = (value) => {\n    this.setState({ text: value })\n}\n\nrender() {\n    return (\n        <ReactQuill\n            value={this.state.text}\n            onChange={this.handleChange}\n        />\n    )\n}\n\n}\nRichEditor.defaultProps = {\n    content: '',\n}\nexport default RichEditor\n```. ",
    "MrBoolean": "PING. ",
    "DeyLak": "@abelski21  I was able to fix this issue the same way, with this dirty hack(I'm using react-quill, but I think, something similar is possible for main library, cause it uses internal Quill objects via react ref):\n<ReactQuill {...{\n  ref: (node) => {\n    if (!node) return\n    const originalSetRange = node.editor.selection.__proto__.setNativeRange.bind(node.editor.selection)\n    node.editor.selection.__proto__.setNativeRange = (startNode, startNodeOffset, endNode, endNodeOffset) => {\n      if (\n        node.editor.root.contains(startNode) &&\n        node.editor.root.contains(endNode)\n        ) {\n          originalSetRange(startNode, startNodeOffset, endNode, endNodeOffset)\n        }\n      }\n    },\n...\nOfcourse, this is only a temporarily solution.. @abelski21 I think, this is another problem, that won't be fixed by @jhchen commit. He just added some check for updating cursor position, so if the condition is not met, it skips the update. I haven't solved this yet, but I ended up making the quill component uncontrolled, it helped for unnecessary re-renders.. ",
    "hlyford": "FYI, I was able to fix this by using setState and not a local this.handleChange method like I was using before. Had to add new state for content and manually set the content onto my other state element when something else on the form was updated.\n// ON THE COMPONENT\n<ReactQuill\nvalue={this.state.content}\nonChange={value => {\n   this.setState({ content: value }, () => {\n    this.handleChange();\n  });\n}}\n/>\n\n// AND THEN IN MY LOCAL HANDLECHANGE FUNCTION\nif (e === undefined && this.state.content) {\n      // Also have to set content cause of quill library bug\n      let emailTemplate = this.state.emailTemplate;\n      emailTemplate['content'] = this.state.content;\n      this.setState({ emailTemplate });\n      return;. ",
    "Toub": "Also have the same message using pasteHTML with a large text containing a embed image:\nThe given range isn't in document.\nsetNativeRange @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:3149\nsetRange @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:3170\nsetSelection @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:1487\ndangerouslyPasteHTML @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:8906\npasteHTML @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-\n@jhchen should we re-open this one?. Thanks.\nUnfortunately, parsing html to delta is out of scope of the project: https://github.com/quilljs/delta/issues/6\nSo if I want to allow some trusted admin user to copy/paste an iframe video, I am stuck with html methods.. Well, I realize that the scope of this library is to manipulate delta and save them to the database instead of html.\nSo one can use pasteHtml or dangerouslyPasteHTML to insert html content, but getContents and setContents to communicate with external components (typically database...).\nFinally, delta can be converted to html to be rendered, but it is not fully supported by this project.\n@see https://github.com/quilljs/quill/issues/993\nhttps://github.com/nozer/quill-delta-to-html \nhttps://github.com/joelcolucci/node-quill-converter. Thanks, nice read!\nAlso discovered the following usefully repository mentioned in the blog post (should be linked from main repository): https://github.com/quilljs/awesome-quill. ",
    "evonox": "I have the same problem when using Angular and PrimeNG UI library. The error is occurring however only when Quill editor is being used in a modal dialog. The error is occurring in this function of the PrimeNG wrapper for Quill editor.\njavascript\n    Editor.prototype.writeValue = function (value) {\n        this.value = value;\n        if (this.quill) {\n            if (value)\n                this.quill.pasteHTML(value);\n            else\n                this.quill.setText('');\n        }\n    };. ",
    "JoshuaToenyes": "In my case, I was able to solve this issue (at least in Chrome 69) by performing the update asynchronously:\ntypescript\nconst selection = quill.getSelection();\nsetImmediate(() => {\n  quill.setContents(delta);\n  quill.setSelection(selection);\n});\nI don't know if this causes issues in other browsers or environments, and literally just now figured this out. In my case, I have a custom React wrapper around Quill which may periodically (but not too frequently) receive an updated value of the editor.. ",
    "fhinchey": "@evonox  I'm having the same issue. Did you find a solution? NOTE: oddly, i don't get the message the first time, but all subsequent times. I'm also using a NgPrime modal window and editor.  importing through Angular-cli. @evonox  I'm having the same issue. Did you find a solution? NOTE: oddly, i don't get the message the first time, but all subsequent times. I'm also using a NgPrime modal window and editor.  importing through Angular-cli. ",
    "ddzy": "\nAlso have the same message using pasteHTML with a large text containing a embed image:\nThe given range isn't in document.\nsetNativeRange @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:3149\nsetRange @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:3170\nsetSelection @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:1487\ndangerouslyPasteHTML @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-activity-admin-activity-a~b97c2df6.js:8906\npasteHTML @ app-features-admin-_core-error-admin-error-module~app-features-admin-admin-\n@jhchen should we re-open this one?\n\nI'm having this problem, too.. ",
    "paigeflourin": "\nusing this library via react-quill, i ended up switching to uncontrolled component which helped\n\nHi, \ni am using react- quill but i am encountering this issue . how did you resolve it?. ",
    "vajin1125": "me, too i have that problem.\nhow can i solve this problem?\nPlease help me\n. me, too i have that problem.\nhow can i solve this problem?\nPlease help me\n. ",
    "kayahr": "My suggested solution is doing it right and that means: Don't bundle any external libs into your lib. Creating a self-contained bundle is fine for classic web programming where people just add a script tag referencing the bundle and that's it. That's the advantage of your current approach and that would be fine for a library which can be simply downloaded from your website. \nBut you uploaded this bundle to the NPM registry and there it doesn't fit so well. In the NPM world modules don't bundle other modules, they depend on external modules. The top-level application, which uses Quill in the end, is responsible for creating a distribution bundle (With tools like Webpack) and publishing it to a webserver or even an offline application using Electron. But Quill is already bundled and this means the application bundles a bundle together with other libs which may already be in the Quill bundle.\nFor small libs like clone or extend this isn't really a problem. The bundle gets a little bit larger because the libs may end up twice in the bundle but technically they are separated so this simply works. \nBut for Parchment this is a different story. If the application is already using Parchment for example then it can't inter-operate with Quill because quill bundles its own copy and the classes are not compatible. Workaround: Application must not import Parchment itself but must import it through Quill. For TypeScript this means loosing the type information. Currently I use this workaround and wrote a nasty hack where I import the external parchment lib just for the type information, import the real parchment through Quill and then cast both together and re-export the result so I have a typed and Quill-compatible Parchment in the end. That's really ugly and this can only be fixed by not bundling parchment into Quill.\nSo you want a list of pros and cons, here it comes:\nSolution 1 (The real one):\nCreate two different bundles. A self-contained bundle (the current one) for classic web programming and one bundle which just contains the Quill code and requires  the other libraries as normal external NPM dependencies. This second bundle must be the one referenced as main in package.json. This second bundle don't have to be a bundle at all. Maybe it would be enough to transpile all your ES6 files to ES5 and then reference the quill.js entry point as  main in package.json. That is what I do in my projects. Source is TypeScript in src, the TypeScript compiler transpiles everything to ES5 into a lib folder, this lib folder is then used by Node. For web publishing I use webpack to create a a self-contained bundle in the dist folder.\nPros:\n\nStill allows people to simply include the self-contained bundle because it is still there.\nAllows applications to import the Parchment module itself and inter-operate with Quill without problems. Both libraries (parchment and quill) are simply loaded with require and can work together as expected.\nMakes applications smaller by eliminating duplicate imports if application already uses stuff like eventemitter3, deep-equal and so on.\n\nCons:\n\nI don't see any disadvantage except maybe some significant amount of work. I don't know the Quill internals good enough to make any estimations here.\n\nSolution 2 (The easy one)\nSimply move all the dependencies which you bundle into Quill from the dependencies section into the devDependencies section.\nPros:\n\nFor applications which only use Quill and none of the other libraries this means that npm install quill just installs Quill and nothing else.\nBy not installing a separate unused parchment module developers may not accidentally use it and run into problems.  That's what happened to me and this guy and also this guy.\n\nCons:\n\nNone. But it is still not possible to use the parchment module from the NPM registry together with Quill.\n\nSooo... What about using both solutions? I'm pretty sure solution 2 has no negative impact and you just need to move some lines in package.json. This could be a short-term improvement. Maybe solution 1  can be kept in mind for some future mayor release if it is too complicated to do with the current architecture.\n. My suggested solution is doing it right and that means: Don't bundle any external libs into your lib. Creating a self-contained bundle is fine for classic web programming where people just add a script tag referencing the bundle and that's it. That's the advantage of your current approach and that would be fine for a library which can be simply downloaded from your website. \nBut you uploaded this bundle to the NPM registry and there it doesn't fit so well. In the NPM world modules don't bundle other modules, they depend on external modules. The top-level application, which uses Quill in the end, is responsible for creating a distribution bundle (With tools like Webpack) and publishing it to a webserver or even an offline application using Electron. But Quill is already bundled and this means the application bundles a bundle together with other libs which may already be in the Quill bundle.\nFor small libs like clone or extend this isn't really a problem. The bundle gets a little bit larger because the libs may end up twice in the bundle but technically they are separated so this simply works. \nBut for Parchment this is a different story. If the application is already using Parchment for example then it can't inter-operate with Quill because quill bundles its own copy and the classes are not compatible. Workaround: Application must not import Parchment itself but must import it through Quill. For TypeScript this means loosing the type information. Currently I use this workaround and wrote a nasty hack where I import the external parchment lib just for the type information, import the real parchment through Quill and then cast both together and re-export the result so I have a typed and Quill-compatible Parchment in the end. That's really ugly and this can only be fixed by not bundling parchment into Quill.\nSo you want a list of pros and cons, here it comes:\nSolution 1 (The real one):\nCreate two different bundles. A self-contained bundle (the current one) for classic web programming and one bundle which just contains the Quill code and requires  the other libraries as normal external NPM dependencies. This second bundle must be the one referenced as main in package.json. This second bundle don't have to be a bundle at all. Maybe it would be enough to transpile all your ES6 files to ES5 and then reference the quill.js entry point as  main in package.json. That is what I do in my projects. Source is TypeScript in src, the TypeScript compiler transpiles everything to ES5 into a lib folder, this lib folder is then used by Node. For web publishing I use webpack to create a a self-contained bundle in the dist folder.\nPros:\n\nStill allows people to simply include the self-contained bundle because it is still there.\nAllows applications to import the Parchment module itself and inter-operate with Quill without problems. Both libraries (parchment and quill) are simply loaded with require and can work together as expected.\nMakes applications smaller by eliminating duplicate imports if application already uses stuff like eventemitter3, deep-equal and so on.\n\nCons:\n\nI don't see any disadvantage except maybe some significant amount of work. I don't know the Quill internals good enough to make any estimations here.\n\nSolution 2 (The easy one)\nSimply move all the dependencies which you bundle into Quill from the dependencies section into the devDependencies section.\nPros:\n\nFor applications which only use Quill and none of the other libraries this means that npm install quill just installs Quill and nothing else.\nBy not installing a separate unused parchment module developers may not accidentally use it and run into problems.  That's what happened to me and this guy and also this guy.\n\nCons:\n\nNone. But it is still not possible to use the parchment module from the NPM registry together with Quill.\n\nSooo... What about using both solutions? I'm pretty sure solution 2 has no negative impact and you just need to move some lines in package.json. This could be a short-term improvement. Maybe solution 1  can be kept in mind for some future mayor release if it is too complicated to do with the current architecture.\n. Solution 2 doesn't break anything. Your bundle already contains parchment and quill-delta (and most likely all the other runtime dependencies as well, haven't checked them explicitly) so there is no need to install a second copy of it. As I explained (two times) it is even wrong to import the external parchment module which is automatically (and unnecessarily) installed by npm install quill because we have to import the bundled parchment with Quill.import().. Solution 2 doesn't break anything. Your bundle already contains parchment and quill-delta (and most likely all the other runtime dependencies as well, haven't checked them explicitly) so there is no need to install a second copy of it. As I explained (two times) it is even wrong to import the external parchment module which is automatically (and unnecessarily) installed by npm install quill because we have to import the bundled parchment with Quill.import().. Ah, so you say that in a Node environment it is wrong to use require(\"quill\") and instead I have to use require(\"quill/core\") (And more requires for the stuff I need)? Well that would be fine if these files would not use ES6 imports which Node doesn't support yet. So you say I'm responsible for transpiling the quill code to ES5 in my own build system? That approach is quite unusual. It's like publishing TypeScript code in a NPM module and telling the user he has to compile it himself. Not all projects have a custom build system where Babel can be plugged in. Or even no build system at all (Like your quill-delta project).\nBut actually that's good news for solution 1 which doesn't seem so difficult any longer. I think all problems could be solved by splitting the build process into two steps. One which does the transpilation to ES5 and the second which creates the bundle. So what about this suggestion:\n\nMove the ES6 source files into a src folder.\nFirst build step uses Babel to transpile the stuff from the src folder to the root folder. The files there can now be required in a Node environment directly without dictating specific build steps.\nSecond build step uses Webpack to pack the transpiled files into dist/quill.js for web environment. \nRemove the main entry from package.json so people don't accidentally load the web bundle in a Node environment.. Ah, so you say that in a Node environment it is wrong to use require(\"quill\") and instead I have to use require(\"quill/core\") (And more requires for the stuff I need)? Well that would be fine if these files would not use ES6 imports which Node doesn't support yet. So you say I'm responsible for transpiling the quill code to ES5 in my own build system? That approach is quite unusual. It's like publishing TypeScript code in a NPM module and telling the user he has to compile it himself. Not all projects have a custom build system where Babel can be plugged in. Or even no build system at all (Like your quill-delta project).\n\nBut actually that's good news for solution 1 which doesn't seem so difficult any longer. I think all problems could be solved by splitting the build process into two steps. One which does the transpilation to ES5 and the second which creates the bundle. So what about this suggestion:\n\nMove the ES6 source files into a src folder.\nFirst build step uses Babel to transpile the stuff from the src folder to the root folder. The files there can now be required in a Node environment directly without dictating specific build steps.\nSecond build step uses Webpack to pack the transpiled files into dist/quill.js for web environment. \nRemove the main entry from package.json so people don't accidentally load the web bundle in a Node environment.. In the guide you mentioned. As shown in the example.\n\nSo again (Sorry, if I repeat myself again and again, but looks like we misunderstand each other, maybe it's because of my bad english):\n\nDoing require(\"quill\") in Node environment imports the web bundle which already includes its own copy of parchment so the external parchment module which is also installed by npm install quill can't be used.\nDoing require(\"quill/core\") (or require(\"quill/quill\") when I'm fine with the defaults) in Node environment works because in this way the external parchment module is used. So this approach is better for Node environment but unfortunately dictates using a special build workflow because of the ES6 imports, which are not directly supported by Node. \n\nThis could be solved by doing this necessary transpilation in the build process of quill so the published NPM module already contains the transpiled JavaScript files instead of the ES6 source files.\n. In the guide you mentioned. As shown in the example.\nSo again (Sorry, if I repeat myself again and again, but looks like we misunderstand each other, maybe it's because of my bad english):\n\nDoing require(\"quill\") in Node environment imports the web bundle which already includes its own copy of parchment so the external parchment module which is also installed by npm install quill can't be used.\nDoing require(\"quill/core\") (or require(\"quill/quill\") when I'm fine with the defaults) in Node environment works because in this way the external parchment module is used. So this approach is better for Node environment but unfortunately dictates using a special build workflow because of the ES6 imports, which are not directly supported by Node. \n\nThis could be solved by doing this necessary transpilation in the build process of quill so the published NPM module already contains the transpiled JavaScript files instead of the ES6 source files.\n. And which claims I made are the ones you don't believe to be true? My claims are pretty much summarized by the two bullet points in my previous comment. Which claim is false and why? Anything else is just me trying to suggest a solution to improve the current situation. And its totally clear that it is your decision IF and HOW to do it. . And which claims I made are the ones you don't believe to be true? My claims are pretty much summarized by the two bullet points in my previous comment. Which claim is false and why? Anything else is just me trying to suggest a solution to improve the current situation. And its totally clear that it is your decision IF and HOW to do it. . This other task is about the line height of non-empty lines. And I can't even reproduce this problem explained there. The line height is correctly getting smaller when a small font is used.\nMy problem is the font size style on empty lines (or any other inline style. The font size is simply just the only one which can make a visual difference for empty lines). Because an empty line just contains a <br> tag and no <span> this empty line can't be styled. Formatting an empty line simply does nothing and the Delta just contains an insert: '\\n' property without attributes. But when there is a <span><br></span> in the line instead then it can be formatted and the attributes are even appearing in the Delta so I have some hope that this can be easily fixed somehow.\nSo if this is really not possible at the moment then I'm fine with it. Just wanted to make sure that my problem was correctly understood because I don't see any similarity to #943.. This other task is about the line height of non-empty lines. And I can't even reproduce this problem explained there. The line height is correctly getting smaller when a small font is used.\nMy problem is the font size style on empty lines (or any other inline style. The font size is simply just the only one which can make a visual difference for empty lines). Because an empty line just contains a <br> tag and no <span> this empty line can't be styled. Formatting an empty line simply does nothing and the Delta just contains an insert: '\\n' property without attributes. But when there is a <span><br></span> in the line instead then it can be formatted and the attributes are even appearing in the Delta so I have some hope that this can be easily fixed somehow.\nSo if this is really not possible at the moment then I'm fine with it. Just wanted to make sure that my problem was correctly understood because I don't see any similarity to #943.. ",
    "kotAPI": "This is how it looks right now and I corrected the markdown syntax.\n\nSorry for the wrong PR if this doesn't have a desirable outcome.. :). This is how it looks right now and I corrected the markdown syntax.\n\nSorry for the wrong PR if this doesn't have a desirable outcome.. :). Here, to the end of the document. Viewing it on the browser..\ntoolbar.md\n. Here, to the end of the document. Viewing it on the browser..\ntoolbar.md\n. Also the {% include full-toolbar.html %} in the starting of the README document, not sure if it's supposed to be there? :)\n. Also the {% include full-toolbar.html %} in the starting of the README document, not sure if it's supposed to be there? :)\n. Looking for the same use case here too, wish there was a support for this.. Looking for the same use case here too, wish there was a support for this.. ",
    "jptrainor": "The blur/focus didn't work for me.  I used the selection-change event and checked if the first argument (range) is set.. ",
    "Earthii": "Bump to this. Would be really cool to add this. The previous suggested solution by @benbro \n\"A null range indicates selection loss (usually caused by loss of focus from the editor). You can also use this event as a focus change event by just checking if the emitted range is null or not.\"\ndoesnt work when we highlight text and then click on the toolbar for bold, italic, etc.. ",
    "crankycyclops": "I want to also add my vote for this. Being that QuillJS functions as an input element, it seems like focus and blur events should be supported like any other input element. That being said, thank you so much for an awesome tool :). ",
    "tbash": "Unsure if this is discouraged but provided you have access to your quill instance, you can use \njs \nthis.quill.root.addEventListener(\"blur\", console.log);\nHaven't tested on other versions but we're using v1.3.6 and this works for us.. ",
    "arathipanya": "It's about EXIF set by devices.\nI had the same issue and fixed it with a custom handler for image (https://github.com/manoj-makkuboy/fix-image-rotation helped a lot) : \n```\nimport loadImage from 'blueimp-load-image';\nfunction fixRotationOfFile(file) {\n  return new Promise((resolve) => {\n    loadImage(file, (img) => {\n      resolve(img.toDataURL('image/jpeg'));\n    }, { orientation: true });\n  });\n}\nfunction ImageHandler() {\n  const quill = // your quill editor\n  const input = document.createElement('input');\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', 'image/*');\n  input.click();\n  input.onchange = () => {\n    const file = input.files[0];\n    if (/^image\\//.test(file.type)) {\n      const range = quill.getSelection();\n      fixRotationOfFile(file).then((img) => {\n        quill.insertEmbed(range.index, 'image', img);\n        quill.setSelection(range.index + 1);\n      });\n    }\n  };\n}\n//options of Quill\nconst modules = {\n    toolbar: {\n      container: '#container',\n      handlers: {\n        image: this.handleImage\n      }\n    }\n  };\n```. ",
    "joow": "I tried disabling my extension (I only have uBlock Origin) or using a new profile (using -ProfileManager).\nUnfortunately I still have the same issue.\nStopping the script produces the following stacktraces :\nError: Script terminated by timeout at:\noptimize@https://cdn.quilljs.com/1.3.5/quill.js:7092:1\nLinkedList</LinkedList.prototype.forEach@https://cdn.quilljs.com/1.3.5/quill.js:6963:13\nScrollBlot</ScrollBlot.prototype.optimize@https://cdn.quilljs.com/1.3.5/quill.js:7130:13\noptimize@https://cdn.quilljs.com/1.3.5/quill.js:4307:7\nScrollBlot</ScrollBlot.prototype.update@https://cdn.quilljs.com/1.3.5/quill.js:7171:9\nupdate@https://cdn.quilljs.com/1.3.5/quill.js:4331:7\nScrollBlot/_this.observer<@https://cdn.quilljs.com/1.3.5/quill.js:7033:13\nShadowBlot</ShadowBlot.prototype.insertInto@https://cdn.quilljs.com/1.3.5/quill.js:5060:13\nContainerBlot</ContainerBlot.prototype.insertBefore@https://cdn.quilljs.com/1.3.5/quill.js:3418:9\ninsertBefore@https://cdn.quilljs.com/1.3.5/quill.js:4264:7\nContainerBlot</ContainerBlot.prototype.appendChild@https://cdn.quilljs.com/1.3.5/quill.js:3324:9\nContainerBlot</ContainerBlot.prototype.optimize@https://cdn.quilljs.com/1.3.5/quill.js:3435:17\nScrollBlot</ScrollBlot.prototype.optimize@https://cdn.quilljs.com/1.3.5/quill.js:7066:9\noptimize@https://cdn.quilljs.com/1.3.5/quill.js:4307:7\ndeleteAt@https://cdn.quilljs.com/1.3.5/quill.js:4219:7\ndeleteText@https://cdn.quilljs.com/1.3.5/quill.js:2506:7\nsetContents/<@https://cdn.quilljs.com/1.3.5/quill.js:1458:23\nmodify@https://cdn.quilljs.com/1.3.5/quill.js:1610:16\nsetContents@https://cdn.quilljs.com/1.3.5/quill.js:1455:14\n@debugger eval code:1:1\n quill.js:7092:1\nError: Script terminated by timeout at:\nLinkedList</LinkedList.prototype.forEachAt@https://cdn.quilljs.com/1.3.5/quill.js:6971:17\ngetLines@https://cdn.quilljs.com/1.3.5/quill.js:4288:9\nlines@https://cdn.quilljs.com/1.3.5/quill.js:4298:14\ngetDelta@https://cdn.quilljs.com/1.3.5/quill.js:2556:14\nupdate@https://cdn.quilljs.com/1.3.5/quill.js:2683:22\ndeleteText@https://cdn.quilljs.com/1.3.5/quill.js:2507:14\nsetContents/<@https://cdn.quilljs.com/1.3.5/quill.js:1458:23\nmodify@https://cdn.quilljs.com/1.3.5/quill.js:1610:16\nsetContents@https://cdn.quilljs.com/1.3.5/quill.js:1455:14\n@debugger eval code:1:1\n quill.js:6971:17. ",
    "jdittrich": "I could reproduce this on \nUbuntu 16.04, Firefox  58.0.2 (64-bit)\nQuill 1.3.5. (the one that is currently used on the playground) \nThe tab freezes and after some time, I get the yellow \"A page is slowing down your browser\" warning. \n(I did not setup a new profile though deactivated adblocker and the like). ",
    "sionzeecz": "Hello, this is a problem of Firefox.\nIt happens when ShadowBlot is trying to reorder content with ContainerBlot.\nIt calls 10 000x InsertInto from ShadowBlot. Chrome it handles good but the Firefox is not ready for this. \nIt's take a 174 seconds to perform setContents. (The delta has 10 598 ops).\nWe are trying to find a workaround for this.\nQuill 1.3.6, Firefox 61.0.1 (64-bit). Hello, this is a problem of Firefox.\nIt happens when ShadowBlot is trying to reorder content with ContainerBlot.\nIt calls 10 000x InsertInto from ShadowBlot. Chrome it handles good but the Firefox is not ready for this. \nIt's take a 174 seconds to perform setContents. (The delta has 10 598 ops).\nWe are trying to find a workaround for this.\nQuill 1.3.6, Firefox 61.0.1 (64-bit). ",
    "seanabrahams": "@jhchen some pointers on how to fix this would be appreciated. Apologies if it's covered somewhere in the docs but I've been searching without luck.\nAn additional strange behavior is that if you hit backspace when the cursor is below the embedded tweet it deletes the tweet rather than moving the cursor to just after it (inline), from where you'd then expect to hit backspace again to delete it.\n@charrondev any progress on your end?. ",
    "felipepastor": "Maybe this can help...\nhttps://stackoverflow.com/questions/46130400/quill-js-create-nesting-block-elements-when-inserting-embeds. ",
    "mikepictor": "with respect....why is left represented by null? \nWhat if I want to explicitly align left (in an interface that is RTL)\nThe problem is that if the editor is RTL, picking left align doesn't do anything, since it's interpreting left as \"no alignment\", trusting that left is a default. Is there not a way to specify align left, and have it actually do an explicit text-align:left ?. ",
    "dadaowuwei": "arh, got it, Thanks @Charrondev ! . ",
    "wrobbinz": "Hi, @charrondev has there been any movement on this issue? I think PRs to address this issue and https://github.com/quilljs/quill/issues/1978 would be awesome.. ",
    "aral": "@Charrondev Thanks so much, Adam, that\u2019s very useful and will no doubt help others also. I\u2019m going to draw attention to your response on the module\u2019s issue board now. Appreciate your time in writing this up.. ",
    "szerleticsi": "Can you help me please?. Can you help me please?. @jhchen.. @jhchen.. ",
    "winsensim": "@szerleticsi mine was caused by white-space: pre-wrap; on class=\"ql-editor\". Removing the style solved my problem.. ",
    "manu-st": "That's correct. It seems that selection-change is called when getting out of focus and I'm mostly calling selection-change to get the format. I added a protection to make sure that the quill's editor has focus before asking for the format. However it would have been better to return a null/undefined format instead of having the side effects of focusing the editor.. @DarnellSh The one I made is to disable my handler for selection-change whenever I know for sure that the quills editor doesn't have focus.. ",
    "zhatongning": "@volser I need reset the delta after server's response. How could I solve the problem ?. I think you can use the API: AddMatcher,\nquill.clipboard.addMatcher('img', function(node, delta) {\n    return new Delta()\n  })\nthe code above is aim at filtering pictures, and you can use something like that to filter the video. @lwyj123  The test platform must be the Mac Safari and its default Input. It words greatly with the \nthird-party Input,such as Sougou Input.. @lwyj123  @seongbin9786  Thanks. it's my fault to improperly describe the problem\u3002\nAt first, I inserted image placeholder with the base64 url so that  it could show immediately when picture was selected.And there were some other state such as the uploading state in the placeholder. Then when the picture finished uploading, inserting the image with right getting-from-server url to replace the placeholder that I inserted previously.. ",
    "rhysbrettbowen": "I looked in to this more and looks like this is the issue:\nhttps://github.com/quilljs/quill/blob/develop/modules/keyboard.js#L241\nlet delta = new Delta().retain(range.index)\n                               .insert('\\n', context.format)\n                               .retain(line.length() - offset - 1)\n                               .retain(1, { header: null });\nSuggested fix would be to change context.format to looking each key up in parchment and only including those on the block scope.. if it helps, I'm overriding that line and using the below to get the undo delta:\n```\nfunction getInserts(content: DeltaStatic, from: number, length: number): DeltaStatic {\n  let removeDelta = new Delta();\n  if (from) {\n    removeDelta = removeDelta.delete(from);\n  }\n  removeDelta = removeDelta.retain(length).delete(Number.MAX_VALUE);\n  return new Delta(content.compose(removeDelta).ops!.filter(op => !op.delete));\n}\nfunction diffAttributes(attr: any, oldAttr: any) {\n  return mapValues(attr, (val, key) => {\n    return oldAttr.hasOwnProperty(key) ? oldAttr[key] : null;\n  });\n}\nfunction calculateUndo(delta: DeltaStatic, content: DeltaStatic) {\n  let ops: DeltaOperation[] = [];\n  let index = 0;\n  delta.forEach(op => {\n    const attributes = op.attributes;\n    if (op.retain) {\n      if (op.attributes) {\n        ops = ops.concat(getInserts(content, index, op.retain).ops!.map(insert => {\n          return {\n            retain: isString(insert.insert) ? insert.insert.length : 1,\n            attributes: diffAttributes(op.attributes || {}, insert.attributes || {}),\n          };\n        }));\n      } else {\n        ops.push(op);\n      }\n      index += op.retain;\n    }\n    if (op.insert) {\n      ops.push({delete: isString(op.insert) ? op.insert.length : 1 });\n    }\n    if (op.delete) {\n      ops = ops.concat(getInserts(content, index, op.delete).ops!);\n      index += op.delete;\n    }\n  });\n  return new Delta(ops);\n}\n```. Written a test to show this - will make a PR to fix:\nit('correctly transform against remote changes', function() {\n      this.quill.history.options.delay = 0;\n      this.quill.history.options.userOnly = true;\n      this.quill.setText('b\\n');\n      this.quill.insertText(1, 'd', Quill.sources.USER);\n      this.quill.insertText(0, 'a', Quill.sources.USER);\n      this.quill.insertText(2, 'c', Quill.sources.API);\n      expect(this.quill.getText()).toEqual('abcd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('bcd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('bc\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('bcd\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('abcd\\n');\n    });. Think I need to dive in to this more.... This is probably the same as: https://github.com/quilljs/quill/issues/2101. Once you have 2 characters next to each other that are the same (in this case the newline from pressing enter) then it can all go screwy. I've put a fix for it in the issue but never got around to making a PR. Sure - I did give it a go and a test to show it's not working is to have the client put in B then the server to add in A & C around it. Then undo and redo. You'll get ACB.\nReason is that the redo isn't really a redo - just an insert. It hasn't actually been played yet so it gets transformed as coming after the items.\nanother way to think of it would be with a delete. If you remove a character and keep an undo for it, there is no way for the server to place characters directly after it when it's undone as the insert will be transformed to coming after the incoming operations.\nHappy to go through it with you in more detail - I'm probably not doing a great job explaining.. @jhchen \nMight make it easier in a diagram. Because of the removal in the undo there is no longer any marker down the red path that it should be inserted there (otherwise we could have some sort of undo/redo operation instead of a normal insert). With transforms everything is still consistent and gets to the same outcome, it might just not be what you expect. I highlighted the red as it's easiest to see the effect there.\nIf however we follow the green path (which follows what happens on the test) and instead generate the undo of the undo at the point it meets the red lines we get a closer representation of what the user wanted as we will have information on the state at that point which will include the information of previous operations already applied to it (i.e. the state already has applied the server ops and we can see that we want to undo the remove operation). This is what this PR does.\n\n. Fixed with #2500 thankyou!. ",
    "EthanRutherford": "I can also reproduce with the formula embed on the homepage. ",
    "lixiaoyan": "@ivanalejandro0 \nI have run into a problem with the code above, and after some digging, I found a way to resolve it.\njs\n      if (mutation.type === 'childList' && mutation.removedNodes.length === 1) {\n        if (\n          mutation.removedNodes[0] === this.leftGuard ||\n          mutation.removedNodes[0] === this.rightGuard\n        ) {\nIf you modified the dom inside embeds (specifically, removeChild), the embed may be removed unexpectedly. We should check whether the dom removed is one of the guard nodes first.. ",
    "lelit": "Am I missing something, or given that those events are emitted \"after the fact\" they cannot be used to reject the action?\nAs to keyboard bindings, maybe yes: I could remove the indent/dedent buttons from the toolbar, and intercepts TABs... less than ideal, but I will try that, thanks.. ",
    "marsielko": "@charrondev There is no need to add syntax highlighting to your editor, if you don't want to. When I was trying to solve this issue I realized, that highlight.js fixed it with creating extra <span> tags in code-block content. But I also noticed, when there were only one <span> and it was in the middle of the content, this was place where caret were placed after \"navigating into code-block by up arrow\". So in my opinion, the best workaround @poshest  asked for, is to \"mock\" highlight.js and create a <span> around the last \"non whitespace character\". All you need is include \"syntax\": true in Quill's config and execute this function before Quill loads.\n```\n(function(hljs){\n  hljs.highlightAuto = function(text) {\n    var noTrailing = text.replace(/\\s+$/, '');\n    var lastNonWhitespaceIdx = noTrailing.length -1;\n    var leading = escape(text.substr(0, lastNonWhitespaceIdx));\n    var span = '' + text[lastNonWhitespaceIdx] + '';\n    var trailing = text.substr(lastNonWhitespaceIdx + 1);\nreturn { \"value\": leading  + span + trailing };\n\n}\nfunction escape(string) {\n    return string.replace(/&/g, '&').replace(//g, '>');\n  }\nwindow.hljs = hljs;\n})(/hljs object/{}); \n```. ",
    "pReya": "Hmm, this is pretty major bug. I hope someone will tackle this soon.. ",
    "wengtytt": "Same here!. ",
    "Anakior": "Same for me.. Same for me.. ",
    "monochromatique": "\nit's one and th same html block.\nOne in quill editor - and other - on a page. ",
    "bhavyaghai": "@jagaSto I am also looking to have custom tooltips for certain words in the text. Were you able to find some solution. If possible, can you share your solution?. ",
    "lwyj123": "Maybe you can add your own theme and rebuild the source code. or here is an example Final Polish using Quill API. Unable to reproduce. modules: {\n  toolbar: {\n    container: [['bold', 'italic'], ['link', 'image', 'video', 'product', 'code']],\n    handlers: {\n      'link': function(value) {\n        //...\n      },\n    }\n  }\n}\nor you can use \nJavascript\nvar toolbar = quill.getModule('toolbar');\ntoolbar.addHandler('image', showImageUI);\nif you are interested you can find the related source code in modules/toolbar.js . you can add custom toolbar handler. doc\nBriefly speaking, \nadd your own image handler and upload your image to get the img url. then you can call insertEmbed to insert your Image blot into your editor.. custom handler + insertEmbed. why don't you read the guides first?. ",
    "erinsinger93": "@jhchen I also ended up making one edit to LinkedIn's picker to make it open via spacebar too as per Microsoft's accessibility guidelines, so I can go back and add that into this PR if Quill wants this change too. ",
    "hezhongfeng": "I have tried it and it worked.\nThank you for your answer.\nimport Delta from 'quill-delta';\n  quill.clipboard.addMatcher('img', function(node, delta) {\n    return new Delta();\n  }). ",
    "berylw": "I'm experiencing the same issue on Chrome 65 on MacOS High Sierra.\nRepro steps:\n1. Visit https://quilljs.com/playground/ \n2. Type in the Japanese character \u306f by typing ha into Japanese IME\n3. Instead of \u306f you end up with h\u3042. ",
    "atifsyedali": "I came across this too. I worked around it temporarily by binding onKeyDown in addition to the binding in the keyboard module.. ",
    "dankythuat": "do you have solution?. ",
    "hejianghu": "I got in the same situation, did you find the resolution?. It works fine in both firefox and safari\uff0cthe problem was found in Google Chrome and Google Chrome Canary. \n\nonly the first charactor of each paragraph will be split.... ",
    "ph1f1": "Thanks! How about adding this to the documentation, or did I just miss it?. ",
    "Albert-Jan": "For some reason I can't get it to work, do you have an example?. https://codepen.io/ajp-tools/pen/BrNQeP. Thank you :). ",
    "luispuentesvega": "@DaleHe Could you work out it?. ",
    "morganlegal": "Hi !\nI think I have a similar use case. I need to be able to create a hierarchy of blocks, like\n<section>\n    <h1>title level 1</h1>\n    <p>some content level 1</p>\n    <p>other content level 1</p>\n    <!-- ... other level 1 blocks ... -->\n    <section>\n       <h1>other title</h1>\n       <p>some content level 2</p>\n       <p>other content level 2</p>\n       <!-- ... other level 2 blocks ... -->\n   </section>\n</section>\nI have searched to find some examples but didn't come to any result.\nIs it even possible?\nThanks. Thanks for the answer and the link to your blog posts. Very appreciate it. Do you know when you plan to write the next posts if this series?. ",
    "ThaiBinhNhien": "The problem appears both on the home page (https://quilljs.com/) when I check a problem on the device as a phone. ",
    "timothyallan": "I'm using React Quill https://github.com/zenoamaro/react-quill and running it through webpack/uglify for production builds. \nWill get a stack trace asap.\n. ",
    "paullaros": "Added this to my webpack config as a workaround:\nmodule: {\n    noParse: /node_modules\\/quill\\/dist\\/quill.js/\n}. ",
    "olegomon": "@jhchen Shadow DOM is becoming reality and many frameworks are taking advantage of it. I think it would be a great feature for 2.0 version of the modern Quill editor. Do you think version 2.0 will support it?. ",
    "tokichie": "@lwyj123 Thank you for the demo. Using object as blot value can meet my expectation.\nClosing this.. @lwyj123 Thank you for the demo. Using object as blot value can meet my expectation.\nClosing this.. ",
    "chrisnharvey": "I too have this issue.\nAlso, the iOS word suggestions keep the text entered from the previous line as if its the same word.\nFor example:\nHel\nlo\niOS would suggest Hello even though lo is on a new line and should be considered a new word.\n@thomasdao Did you ever find a viable solution to this issue?. Adding this.quill.blur() just before this line seems to resolve the problem without affecting deltas, but I imagine this could cause some performance issues and unexpected behaviour in some browsers.. ",
    "zhangcaidie": "I'm experiencing this issue too, it bothers me for two days, can somebody solve this problem?. I'm experiencing this issue too, it bothers me for two days, can somebody solve this problem?. ",
    "EliteSpartan": "Hi,\nI just tested this and couldn't reproduce it. I have a Galaxy S8+ with Android 8.0, and I tested it on Samsung Internet (v7.0.10.46) and Chrome 65.0.3325.109.\nMaybe it might have been a bug on an older device?. ",
    "trylovetom": "+1, I agree with you. ",
    "Methodician": "Same, agreement, +1.\nI'm not clear on why this behaves as it does. Why would I want things to look different inside and outside the editor? Why can't I just implement the Quill editor styles in my app without re-writing them? Better yet, make the editor styles importable and easy to override so I can optionally change the styles but still have them reflected in the editor (and outside it)?\nIs there a reason behind this counter-intuitive (and seemingly counterproductive) behavior someone could explain?. ",
    "thanuzz": "+1. ",
    "ggjersund": "+1. ",
    "joshp23": "I just began playing about with this script in one of my projects and also received this error in the console:  \nUse of Mutation Events is deprecated. Use MutationObserver instead. \nThe error points to   \nquill.js:4165:4\n. I just began playing about with this script in one of my projects and also received this error in the console:  \nUse of Mutation Events is deprecated. Use MutationObserver instead. \nThe error points to   \nquill.js:4165:4\n. ",
    "Triangel-ya": "if I want to change the text  on the chrome moblie, I can not select the word, because I use e.preventDefault(). ",
    "seongbin9786": "Actually, it's not a problem regarding replacing the base64 url,\nbut you get the file in the event you handle. (just register the handler, quill brings you the file)\nso the codes might look like below:\n\n\nAdd handler config to your toolbar:\njs\n      modules: {\n        toolbar: {\n          handlers: {\n            image: this.imageHandler\n          }, ...\n\n\nImplement imageHandler function somewhere\n```js\n  imageHandler() {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', 'image/*');\n    input.click();\n    input.onchange = async function() {\n      const file = input.files[0];\n      console.log('User trying to uplaod this:', file);\nconst id = await uploadFile(file); // I'm using react, so whatever upload function\n  const range = this.quill.getSelection();\n  const link = ${ROOT_URL}/file/${id};\n// this part the image is inserted\n  // by 'image' option below, you just have to put src(link) of img here. \n  this.quill.insertEmbed(range.index, 'image', link); \n}.bind(this); // react thing\n  }\n```. \n\n",
    "james-brndwgn": "Adding to @seongbin9786 answer, this code adds a loading placeholder image and replaces it once the image has been successfully uploaded.\n```javascript\nconst imageHandler = () => {\n  const input = document.createElement('input');\ninput.setAttribute('type', 'file');\n  input.setAttribute('accept', 'image/*');\n  input.click();\ninput.onchange = async () => {\n    const file = input.files[0];\n    const formData = new FormData();\nformData.append('image', file);\n\n// Save current cursor state\nconst range = this.quill.getSelection(true);\n\n// Insert temporary loading placeholder image\nthis.quill.insertEmbed(range.index, 'image', `${ window.location.origin }/images/loaders/placeholder.gif`);\n\n// Move cursor to right side of image (easier to continue typing)\nthis.quill.setSelection(range.index + 1);\n\nconst res = await apiPostNewsImage(formData); // API post, returns image location as string e.g. 'http://www.example.com/images/foo.png'\n\n// Remove placeholder image\nthis.quill.deleteText(range.index, 1);\n\n// Insert uploaded image\nthis.quill.insertEmbed(range.index, 'image', res.body.image);\n\n}\n}\n```. Adding to @seongbin9786 answer, this code adds a loading placeholder image and replaces it once the image has been successfully uploaded.\n```javascript\nconst imageHandler = () => {\n  const input = document.createElement('input');\ninput.setAttribute('type', 'file');\n  input.setAttribute('accept', 'image/*');\n  input.click();\ninput.onchange = async () => {\n    const file = input.files[0];\n    const formData = new FormData();\nformData.append('image', file);\n\n// Save current cursor state\nconst range = this.quill.getSelection(true);\n\n// Insert temporary loading placeholder image\nthis.quill.insertEmbed(range.index, 'image', `${ window.location.origin }/images/loaders/placeholder.gif`);\n\n// Move cursor to right side of image (easier to continue typing)\nthis.quill.setSelection(range.index + 1);\n\nconst res = await apiPostNewsImage(formData); // API post, returns image location as string e.g. 'http://www.example.com/images/foo.png'\n\n// Remove placeholder image\nthis.quill.deleteText(range.index, 1);\n\n// Insert uploaded image\nthis.quill.insertEmbed(range.index, 'image', res.body.image);\n\n}\n}\n```. ",
    "brycepj": "@jhchen Yes, by using native button elements, you typically need to do less work to make them accessible. \nBut in Quill's case, it's not quite enough. For example, native button elements ensure that toolbar buttons can receive focus and respond correctly to keyboard input, but because the only visual indicator of what each button does is an svg icon, there's really no way for a screenreader to figure out what to read. \nAre there contributors or maintainers who have weighed in on accessibility issues in the past that we can consult?. @jhchen Yes, by using native button elements, you typically need to do less work to make them accessible. \nBut in Quill's case, it's not quite enough. For example, native button elements ensure that toolbar buttons can receive focus and respond correctly to keyboard input, but because the only visual indicator of what each button does is an svg icon, there's really no way for a screenreader to figure out what to read. \nAre there contributors or maintainers who have weighed in on accessibility issues in the past that we can consult?. ",
    "venkata82": "follow-up on accessibility, Is there a way to focus out from Text area on keyboard Tab? . ",
    "dexteritus": "@venkata82  try something like\nEditor.modules = {\n    keyboard: {\n        bindings: {\n            tab: false\n        }\n    }\n};. ",
    "aboosoyeed": "You can add this\nvar Block = Quill.import('blots/block');\nclass Div extends Block {\n}\nDiv.tagName = \"div\";\nDiv.blotName = \"div\";\nDiv.allowedChildren = Block.allowedChildren;\nDiv.allowedChildren.push(Block)\nQuill.register(Div);\n. ",
    "Mits-Soft": "Thanks for the answer, I had forgot the post. \nI have the issue resolved. Simply, when I select the item I retrieve the image src and when the text-change event is triggered the selected image is included in an array of images to delete  that is sent to the server when you submit the updated post. It was not so difficult. I thought I could read the deleted object from the event and it would be a little easier but...\nI understand that the right approach is the Parchment object, I will take a look in Parchment when I have the time. Thank you.. ",
    "artur79": "@Mits-Soft I've got similar issue, how do you get image properties like src when deleting image in editor ?. ok, I think already found solution here https://codepen.io/quill/pen/pPxBPr. ",
    "SONGJIHYOEK": "@Mits-Soft would you show me the code?... i had trouble in checking the delete event and request 'delete to server \n. ",
    "chaosforfun": "i have same problem. ",
    "ReAlign": "ok, thanks.@benbro . ",
    "mani0608": "I believe the code just displays the code-block option in the toolbar. But i would like it to be enabled/activated by default so that when i option the edited i can see the editer with code block activated and with syntax highlighting for my SQL.\nFor me everything works, except this default activation of code-block format.\nI want this view when i open my editor\n\n. Found the solution,\nthis.editor.quillEditor.formatLine(0, this.editor.quillEditor.getLength(), { 'code-block': true });\nin OnContentChaged event did the trick :). ",
    "pthoren": "Does this work?\nimport * as Quill from \"quill\";\nthis.quill = new Quill(...). ",
    "xpioneer": "I have had the same problem...\nimport {Quill} from \"quill\"\nUse this way, the Quill is undefined.\nI changed the way.\nimport * as Q from 'quill'\nconst Quill: any = Q\nversions:\n\"quill\": \"^1.3.6\",\n\"@types/quill\": \"^2.0.1\"\nIt's working~.\nProject address: https://github.com/xpioneer/react-typescript\nHope can help you.. I have had the same problem...\nimport {Quill} from \"quill\"\nUse this way, the Quill is undefined.\nI changed the way.\nimport * as Q from 'quill'\nconst Quill: any = Q\nversions:\n\"quill\": \"^1.3.6\",\n\"@types/quill\": \"^2.0.1\"\nIt's working~.\nProject address: https://github.com/xpioneer/react-typescript\nHope can help you.. ",
    "ZongDuCha": "\uff1f\uff1f\uff1f \u6211\u4e0d\u592a\u61c2. \uff1f\uff1f\uff1f \u6211\u4e0d\u592a\u61c2. ",
    "siers": "Yeah, I did that, but it seems kind of invasive and hacky, so I hoped maybe there's a better way.\nSo this is a wontfix? Maybe it's difficult implement because it ain't reactive inside?. Yeah, I did that, but it seems kind of invasive and hacky, so I hoped maybe there's a better way.\nSo this is a wontfix? Maybe it's difficult implement because it ain't reactive inside?. ",
    "kandangit": "I am closing the issue since have found a workaround by overridding CSS \nSee: https://github.com/quilljs/quill/issues/2065\nIdeally would prefer a single configuration file to indicate the custom texts throughout all Quill, but is good there is an option to customize these texts.\nThanks. @DJShump08\nMy solution was a CSS style.\nThat text is defined using :before CSS selector. You need to define yours with your text to override the default one. Not API parameter or similar.. ",
    "arunkumar413": "Is it just simple as setting the up the editor container dimensions to 8.3 x 11.7 inches?. ",
    "DokaRus": "The same issue\nWorkaround. ",
    "lokimx88": "the latest  version still have this problem\nLatest commit 303d73f  3 days ago. ",
    "dlutwuwei": "Good, the same problem happened in our project, we must make the .ql-editor dom can be scroll, we can not change the style of .ql-editor. ",
    "pqnelson": "I have the same problem, or more precisely the old solution no longer works --- it throws a ParchmentError: [Parchment] Cannot insert linkt into block which is alarming/saddening. Perhaps @jhchen might chime in.... ",
    "vinay72": "<a class=\"social-links\" href=\"#\">Text you want to show </a>. <!DOCTYPE html>\n\n\nAn ordered HTML list\n\nCoffee\nTea\nMilk\n\n\n\nYes , we can create these lists within a div tag.. @benbro Does this PR have any mistake? due to which you have closed my PR.. Sir, this file v1.css change the text color to black and also change the background color to white of this issue.. ",
    "sanjibukai": "Hi,\nI'm also looking for copy/pasting/dropping images in the editor.\nWith the current version, it works when I copy an image with the right click on a browser. But not when I use windows screenshots (either with the screen capture tool or with the PrtScreen key..)\nIs it this behavior that is implemented here?\nCan you provide a simple demo (codepen, plunker, WE..)?\nI don't want to name it, but in summernote this works very well (and as an extra there are options to edit the disposition and the size)\nEdit: It also doesn't work if I copy an image from a local webpage (I mean from the hard drive)\nEDIT : I included your modification and build from source..\nAnd indeed it's working great!\nThank you!!\nI wonder why this is not merged?. ",
    "emanuel1025": "I am using this in production @Qalaxia. \nIIRC, pasting a screenshot from the clipboard on Safari (Cmd-Ctrl-Shift-3) updates the delta image object as a blob. You'll have to convert this at some point into base64 data (or whatever your needs are).\nAlso, Safari 9.x and below paste the image as webkit-fake-url. These are not accessible from the client-side and will have to be filtered out. I have tested this on GMail as well. \n. Is there any update to this? I can still reproduce it. . ",
    "Ethan-G": "I've just encountered this as well. It seems to happen when there's any styling, not just colour.. I've just encountered this as well. It seems to happen when there's any styling, not just colour.. Nice one!\nIs there a reason you didn't do the workaround of using classes instead of inline styles? I'm looking into it as it makes sanitising XSS easier anyway.. Nice one!\nIs there a reason you didn't do the workaround of using classes instead of inline styles? I'm looking into it as it makes sanitising XSS easier anyway.. ",
    "foleyatwork": "Just here to say I'm experiencing this too. Gonna see if I can find a fix but this is a pretty troublesome bug.. Hey, guys... I found a solution. So here's the breakdown of what's happening:\nQuill's color format puts out code like this:\nHTML\n<span style=\"color: rgba(0, 0, 0, 1);\">Mispeled word</span>\nThe browser's spell-check functionality changes that to:\nHTML\n<font style=\"color: rgba(0, 0, 0, 1);\">Mispelled word</font>\nQuill doesn't seem to recognize that font tag as a valid color blot so it deletes it (although once could argue that's still a bug in Quill, deleting content should never happen unless done explicitly IMO).\nBut the fix is quite easy. I just created an additional blot that recognizes both the font tag and the color attribute, this way when Quill comes across it it knows what to do. I haven't had time to put together a demo but here's my code.\n```javascript\nimport Quill from 'quill'\nconst Inline = Quill.import('blots/inline')\nexport default class CustomColor extends Inline {\n  static attrName = 'customColor'\n  static blotName = 'customColor'\n  static tagName = 'font'\nstatic create(value) {\n    const node = super.create()\nnode.style.color = value\n\nreturn node\n\n}\n}\n```\nThen just import that into your file and use Quill.register. It doesn't even have to be the primary color formatter, it just has to be present.. ",
    "apowers313": "Note that this is a work around:\n``` js\n// create an object\nvar obj = {\n    foo: \"bar\",\n    arr: [1, 2, 3],\n    hole: {\n        down: {\n            we: \"go\"\n        }\n    }\n};\n// convert object to pretty string\nvar msg = JSON.stringify(obj, undefined, 4);\n// replace spaces with \u00a0 and newlines with \nmsg = msg.replace(/ /g, \"\u00a0\").replace(/\\n/g, \"\");\nvar pos = quill.getLength();\n// pasteHTML instead of insertText\nquill.pasteHTML(pos, msg); // should use clipboard and dangerouslyPasteHTML\n```\nThe downside is that it is significantly more difficult to do formatting when working with HTML directly (i.e. - changing the color of the font of the HTML that is pasted requires using addMatcher and working with deltas).. ",
    "kjsdesigns": "thank you @DmitrySkripkin - that's exactly what I was referring to.  Wow, I also checked out Reedsy's proprietary version (I'm assuming it's an extension of the public repo you referred to)... very well implemented.\nKudos to the core Quill team also.  Hoping to get my team involved in the project soon.. ",
    "edwinveldhuizen": "You're probably looking for the matchVisual config property . ",
    "stropitek": "thank you @edwinveldhuizen. That indeed changes the behavior.. ",
    "dennyak47": "I am using angular5.2.6 and primeng 5.2.5\nthe problem can be shown here:\nhttps://www.primefaces.org/primeng/#/editor\nin the first edior, add one image, and you can see the value is empty. But if you add a letter in it, the value would include a image value and a letter. Delete this letter and the value goes empty again even though the image is still there.\nfirst I thought it was a quill problem. But now I guess it is a primeng problem.\nbecause I can't see the problem in this page:(  ngx-quill)\nhttps://killercodemonkey.github.io/ngx-quill-example/\nBut I want to find the exact place that goes wrong.\nprimeng code is here:\nhttps://github.com/primefaces/primeng/blob/master/src/app/components/editor/editor.ts\nIn line 116~134\n    this.quill.on('text-change', (delta, oldContents, source) => {\n        if (source === 'user') {\n            let html = editorElement.children[0].innerHTML;\n            let text = this.quill.getText().trim();\n            if (text.length === 0) {\n                html = null;\n            }\n\n            this.onTextChange.emit({\n                htmlValue: html,\n                textValue: text,\n                delta: delta,\n                source: source\n            });\n\n            this.onModelChange(html);\n            this.onModelTouched();\n        }\n    });\n\n\nhere is where they get the value of quill\nIs this correct?\nPerhaps I should find the cause and file an issue to primeng to solve this problem.\n. Let me close this issue. It is not a bug of quill.. ",
    "parthdesai93": "That isn't the correct way to do it. \njust change \njavascript\nquill.setContents(quill.getContents());\nto \njavascript\nquill.setSelection(0);\nYou can read more about it in API docs. . ",
    "joeattardi": "I originally tried doing import Quill from 'quill', however, when I do that, the value of Quill is undefined (as verified by a console.log(Quill).\nI'm currently running Quill 1.3.2, so maybe this is something that has changed in a newer version.. I was never able to find a solution unfortunately. We ended up not using ng-packagr for our project in the end. . ",
    "Timebutt": "@joeattardi, how did you eventually solve this? I'm currently facing the same ng-packagr issue, where the generated code looks like, throwing an error in the application that is trying to build using my package.\nimport { import, register } from 'quill';\nIs there a different way to import Quill correctly and still have ng-packagr generate code that will actually build? I'm on Quill 1.3.6.. ",
    "SilentTiger": "@hiYoHoo \n\u6ca1\u6709\uff0cquill \u56e2\u961f\u975e\u5e38\u9ad8\u51b7 \ud83d\ude06. @hiYoHoo \n\u6ca1\u6709\uff0cquill \u56e2\u961f\u975e\u5e38\u9ad8\u51b7 \ud83d\ude06. ",
    "quilluser": "@thomsbg  you are using  innerHTML to set the clipboard content for the quill clipboard container. However,  should this raise some security concerns of quill as technically the clipboardevent data can be anything, it seems dangerous to paste such data directly into quill clipboard without sanitation. . ",
    "weituotian": "ok, i find a way\nvar Delta = Quill.import('delta');. @DmitrySkripkin thanks for your reply.\ni still had some trouble in it.\nlet ImageBlot = Quill.import('formats/image/Image');\nit will be \n\"quill\" \"Cannot import formats/image/Image. Are you sure it was registered?\"\ncodepen. ",
    "trivigy": "@weituotian There is definitely some weird issue with quill/parchment and es5 but I have spent the last two days trying to figure this out and saw your post. Wanted to place this here in case someone else is looking for solutions. I actually found the answer on #1236. The real credits go to @rh78.\nFor reference my setup is:\ntsconfig.json\njson\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"node_modules/@types\",\n      \"src/typings.d.ts\"\n    ],\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ]\n  }\n}\n\nGoing to guess that the same fix will work for tsc as well.\n\nWhat is important in the solution is how the prototype is being overridden from parchment to quill.\n```typescript\nimport QuillInline from 'quill/blots/inline';\nimport Parchment from 'parchment';\nclass Inline extends Parchment.Inline {}\nInline.prototype = QuillInline.prototype;\nexport class CustomLink extends Inline {\n    static blotName = 'link';\n    static tagName = 'A';\n    static SANITIZED_URL = 'about:blank';\n    static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\nstatic create(value) {\n    const node = super.create(value);\n    value = this.sanitize(value);\n    // @ts-ignore\n    node.setAttribute('href', value);\n    // @ts-ignore\n    node.setAttribute('target', '_blank');\n    return node;\n}\n\nstatic formats(domNode) {\n    return domNode.getAttribute('href');\n}\n\nstatic sanitize(url) {\n    return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n}\n\nformat(name, value) {\n    // @ts-ignore\n    if (name !== this.statics.blotName || !value) {\n        return super.format(name, value);\n    }\n    // @ts-ignore\n    value = this.constructor.sanitize(value);\n    // @ts-ignore\n    this.domNode.setAttribute('href', value);\n}\n\n}\nfunction sanitize(url, protocols) {\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n    return protocols.indexOf(protocol) > -1;\n}\nexport {CustomLink as default, sanitize};\n```. @weituotian There is definitely some weird issue with quill/parchment and es5 but I have spent the last two days trying to figure this out and saw your post. Wanted to place this here in case someone else is looking for solutions. I actually found the answer on #1236. The real credits go to @rh78.\nFor reference my setup is:\ntsconfig.json\njson\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\n      \"node_modules/@types\",\n      \"src/typings.d.ts\"\n    ],\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ]\n  }\n}\n\nGoing to guess that the same fix will work for tsc as well.\n\nWhat is important in the solution is how the prototype is being overridden from parchment to quill.\n```typescript\nimport QuillInline from 'quill/blots/inline';\nimport Parchment from 'parchment';\nclass Inline extends Parchment.Inline {}\nInline.prototype = QuillInline.prototype;\nexport class CustomLink extends Inline {\n    static blotName = 'link';\n    static tagName = 'A';\n    static SANITIZED_URL = 'about:blank';\n    static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\nstatic create(value) {\n    const node = super.create(value);\n    value = this.sanitize(value);\n    // @ts-ignore\n    node.setAttribute('href', value);\n    // @ts-ignore\n    node.setAttribute('target', '_blank');\n    return node;\n}\n\nstatic formats(domNode) {\n    return domNode.getAttribute('href');\n}\n\nstatic sanitize(url) {\n    return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n}\n\nformat(name, value) {\n    // @ts-ignore\n    if (name !== this.statics.blotName || !value) {\n        return super.format(name, value);\n    }\n    // @ts-ignore\n    value = this.constructor.sanitize(value);\n    // @ts-ignore\n    this.domNode.setAttribute('href', value);\n}\n\n}\nfunction sanitize(url, protocols) {\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n    return protocols.indexOf(protocol) > -1;\n}\nexport {CustomLink as default, sanitize};\n```. ",
    "Sibabalwe-Qamata": "@trbhoang did you manage to figure this one out? I have the same issue\n. ",
    "chanlito": "@daslicht I'm currently facing this issue too, did you find any solution?. ",
    "daslicht": "I havent started any further tests yet, but see here :\nhttps://github.com/kensnyder/quill-image-resize-module/issues/43\n. ",
    "toolowner": "Same to you :(. ",
    "reothues": "luckily we have another feature which is always remove multiple empty lines. \nso we could do this:\ni have all my blots inserting with a \\n ahead like this: apply delta change with [{ insert : '\\n'}, {insert: {blotName: blah}}], i did this with clipboard addMatcher\nand then, in text-change event, replace all \\n\\n to \\n.\n. ",
    "Ostap34JS": "me too need Prism, please. ",
    "jfoo1984": "I found this was happening for me, but my <ol> tags had <p> tags in them that quill was converting to div, and then getting rid of the <ol>. ",
    "forrestjacobs": "One more thing: The delta forgets dragged text.\n\n. One more thing: The delta forgets dragged text.\n\n. ",
    "lostpupil": "\u53ef\u4ee5\u4ece\u6e90\u4ee3\u7801\u5f00\u59cb\u9605\u8bfb\u3002. ",
    "sgbrito": "Do you have a solution for it ?. Do you have a solution for it ?. ",
    "tleveque23": "+1 !. ",
    "benhowell": "Also occurs in Chrome on Linux.\nDoes not occur in this example: https://quilljs.com/playground/#class-vs-inline-style\nAn interim fix is to use your own color palette, e.g.\nhtml\n<span class=\"ql-formats\">\n    <select class=\"ql-color\">\n      <option value=\"red\"></option>\n      <option value=\"green\"></option>\n      <option value=\"blue\"></option>\n    </select>\n...\nEdit: further to this, it seems as if you can only use colors that are present in the css file (snow in my case).\nAll colors are:\ncss\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n. ",
    "dkhjmu": "Me too.\nError in Edge also.. ",
    "flacerdk": "I added a commit that adds a length property to the Delta op when inserting a formula, which should fix the bug I mentioned above and also a number of formatting issues.\nIt's a bit hacky though. The problem as I see it is that the rest of the codebase assumes Embeds have length 1, and adding a length to FormulaBlot breaks that assumption. Maybe the real solution is to make formulas extend Text instead?. Added another change to take care of the first issue.. ",
    "whyboris": "Another bug seen in the same codepen:\nIt looks like pressing Enter at the end of a bullet / number list (when the last line is empty) does not exit the bullet list, but instead creates a new empty bullet / number list entry.\nThe expected behavior is to clear the empty bullet / number item at the end, exit the bullet list, and create a new paragraph line.. Another bug seen in the same codepen:\nIt looks like pressing Enter at the end of a bullet / number list (when the last line is empty) does not exit the bullet list, but instead creates a new empty bullet / number list entry.\nThe expected behavior is to clear the empty bullet / number item at the end, exit the bullet list, and create a new paragraph line.. ",
    "1red2blue4": "@whyboris Issue updated in light of this additional event!. ",
    "vasilionjea": "I found a solution to this: https://codepen.io/anon/pen/MXEXBb Basically I removed the static formats(domNode) definition - not sure if it's even needed.  With that said, not totally sure how you'd go about wrapping the text in a span with a classname with this approach.\nAnother approach is to use an Embed like in this example: https://codepen.io/anon/pen/jKGKbg which works for the most part. The only issue with the Embed approach is that the cursor position \"jumps\" way to the right without this hack in place: quill.insertText(range.index + 1, ' ', Quill.sources.SILENT).. ",
    "holgertidemand": "Any progress on this. I have the same problem. :) . ",
    "mattbutton": "There's nothing built in to support these scenarios.\nFor Google Docs which have been already uploaded, I think it would be possible to embed the doc via a custom blot, containing the embeddable iframe created via the Google Docs \"publish to the web\" feature.\nIf you want to support uploading documents, then it may be worth checking one of the drag and drop upload modules such as https://github.com/immense/quill-drag-and-drop-module .. from what I understand, this module is based around images, so you may need to adapt the code to get it working with documents, \nIf you want to convert the document to html, it might be worth taking a look at docx to html converters i.e. https://www.npmjs.com/package/docx2html .. I don't have any experience with this, so not sure what to recommend.\nAfter converting the document to html, you could then use the pasteHTML command in the Quill API to get the HTML into the Quill editor.\n. There's nothing built in to support these scenarios.\nFor Google Docs which have been already uploaded, I think it would be possible to embed the doc via a custom blot, containing the embeddable iframe created via the Google Docs \"publish to the web\" feature.\nIf you want to support uploading documents, then it may be worth checking one of the drag and drop upload modules such as https://github.com/immense/quill-drag-and-drop-module .. from what I understand, this module is based around images, so you may need to adapt the code to get it working with documents, \nIf you want to convert the document to html, it might be worth taking a look at docx to html converters i.e. https://www.npmjs.com/package/docx2html .. I don't have any experience with this, so not sure what to recommend.\nAfter converting the document to html, you could then use the pasteHTML command in the Quill API to get the HTML into the Quill editor.\n. ",
    "annelysegelman": "Please help us, Quill  :'(. ",
    "shen-hui": "debug:false. ",
    "ctizen": "Having same issue here. Any suggestions?. ",
    "wmdmark": "Bump... I have the same issue. Any work-arounds for this?. Bump... I have the same issue. Any work-arounds for this?. ",
    "gztchan": "You should create issue in English.. ",
    "merlinfotsing": "overriding the indent and outdent-events solved my problem. Thank you. ",
    "mdciotti": "To add to this, I don't think a selection-change event should be fired in this case. selection-change should indicate that calling getSelection will return a different result after the event. If we want to detect if the editor lost context, we should have a separate blur event. Note: if you select a range of text then click the button, your selection is not lost. Clicking any of the formatting buttons will still work on your selected range.\nIf we choose to emit a selection-change event here (instead of blur), that would imply that our internal selection was lost as well as the context.\nFor now, you could probably attach your own focus/blur event listeners to the element with content-editable to handle context change.. ",
    "dcsaszar": "@drozdzynski you may also have a look at https://github.com/nozer/quill-delta-to-html. @CatchLife see https://github.com/quilljs/quill/issues/1730#issuecomment-371994144 for the answer. ",
    "misericorda": "Already solved the problem. In case someone's looking for the solution, that's what I used:\n```\nclass CustomCode extends BlockEmbed {\n  static create(value) {\n    let {lang, content} = value;\n    let node = super.create(value);\n    const code = document.createElement('code');\n    code.setAttribute('class', lang);\n    code.textContent = content;\n    node.appendChild(code);\n    return node;\n  }\nstatic value(node) {\n    return {\n      lang: node.firstChild.getAttribute('class'),\n      content: node.firstChild.innerText\n    };\n  }\n}\nCustomCode.blotName = 'code-custom';\nCustomCode.tagName = 'pre';\n```. ",
    "JellyBool": "Hi @misericorda !\nwhere does the BlockEmbed comes from? is it : \n```js\nvar BlockEmbed = Quill.import('modules/blockembed')\nclass CustomCode extends BlockEmbed {\n   // another codes\n}\n// then register it ?\nQuill.register('modules/blockembed', CustomCode, true)\n```\n. ",
    "xuzili1993": "@quill-bot . @quill-bot . ",
    "bryanwillis7": "Can confirm. This makes the software almost unusable if your document is of any consequential length.. Can confirm. This makes the software almost unusable if your document is of any consequential length.. ",
    "mrKorg": "Hello. \nI have this task too.\nI need do only some links with attr rel.\nHow I can do it?. ",
    "pke": "Fixed in #2207 . ",
    "prateek14": "I am facing the same issue,\ncannot get it to work. I'm using Angular 6 environment. ",
    "chloerei": "@RyanV Can you tell me how to update babel configuration? I'm not familiar with babel and webpack.. @RyanV Can you tell me how to update babel configuration? I'm not familiar with babel and webpack.. Actual behavior supplement:\nCan't delete character after input, quill.getContents get empty content.\nI think it cause by safari's insert behavior, here is how I found the problem:\nFirst, add some logs in quill constructor:\n```javascript\nthis.root.addEventListener('compositionstart', () => {\n  console.log('compositionstart')\n})\nthis.root.addEventListener('compositionend', () => {\n  console.log('compositionend')\n})\nlet logObserver = new MutationObserver((mutations) => {\n  console.log(mutations)\n})\nlogObserver.observe(this.root, {\n  attributes: true,\n  characterData: true,\n  characterDataOldValue: true,\n  childList: true,\n  subtree: true,\n})\n```\nThen input one Chinese character in editor.\n\nChrome\n\nIt's what we expect, when compositionend trigger, changes content will store in mutations.\nSafari\n\nThere are two different: \n\nIn mutations before compositionend, characterData target's content is empty.\nIn mutations after compositionend, safari do few things: 1) remove text content in step 1. 2) add a <br> tag. 3) insert user input before <br>. 4) remove <br> tag.\n\nSo when compositionend trigger, quill can not get correct inputs. I don't know why safari works like that, and could not found any documents after search.\nI add a patch in core/selection.js:\njavascript\n  handleComposition() {\n    this.root.addEventListener('compositionstart', () => {\n      this.composing = true;\n      this.scroll.batchStart();\n    });\n    this.root.addEventListener('compositionend', () => {\n      setTimeout(() => { // <- add this line\n        this.scroll.batchEnd();\n        this.composing = false;\n        if (this.cursor.parent) {\n          const range = this.cursor.restore();\n          if (!range) return;\n          setTimeout(() => {\n            this.setNativeRange(\n              range.startNode,\n              range.startOffset,\n              range.endNode,\n              range.endOffset,\n            );\n          }, 1);\n        }\n      }, 0) // <- and this\n    });\n  }\nThis patch delay this.scroll.batchEnd() execution after the second time observe callback execute, then quill will get the correct inputs.\nI don't know if it will break something, and is it the right way to fix? @jhchen. Actual behavior supplement:\nCan't delete character after input, quill.getContents get empty content.\nI think it cause by safari's insert behavior, here is how I found the problem:\nFirst, add some logs in quill constructor:\n```javascript\nthis.root.addEventListener('compositionstart', () => {\n  console.log('compositionstart')\n})\nthis.root.addEventListener('compositionend', () => {\n  console.log('compositionend')\n})\nlet logObserver = new MutationObserver((mutations) => {\n  console.log(mutations)\n})\nlogObserver.observe(this.root, {\n  attributes: true,\n  characterData: true,\n  characterDataOldValue: true,\n  childList: true,\n  subtree: true,\n})\n```\nThen input one Chinese character in editor.\n\nChrome\n\nIt's what we expect, when compositionend trigger, changes content will store in mutations.\nSafari\n\nThere are two different: \n\nIn mutations before compositionend, characterData target's content is empty.\nIn mutations after compositionend, safari do few things: 1) remove text content in step 1. 2) add a <br> tag. 3) insert user input before <br>. 4) remove <br> tag.\n\nSo when compositionend trigger, quill can not get correct inputs. I don't know why safari works like that, and could not found any documents after search.\nI add a patch in core/selection.js:\njavascript\n  handleComposition() {\n    this.root.addEventListener('compositionstart', () => {\n      this.composing = true;\n      this.scroll.batchStart();\n    });\n    this.root.addEventListener('compositionend', () => {\n      setTimeout(() => { // <- add this line\n        this.scroll.batchEnd();\n        this.composing = false;\n        if (this.cursor.parent) {\n          const range = this.cursor.restore();\n          if (!range) return;\n          setTimeout(() => {\n            this.setNativeRange(\n              range.startNode,\n              range.startOffset,\n              range.endNode,\n              range.endOffset,\n            );\n          }, 1);\n        }\n      }, 0) // <- and this\n    });\n  }\nThis patch delay this.scroll.batchEnd() execution after the second time observe callback execute, then quill will get the correct inputs.\nI don't know if it will break something, and is it the right way to fix? @jhchen. @soccerloway Yes it's broken, but I'm going to ProseMirror witch does not have IME problem.... @soccerloway Yes it's broken, but I'm going to ProseMirror witch does not have IME problem.... ",
    "Tonkungs": "@benbro thank.\nI try use \"bounds\" but not anything change.\nhttps://plnkr.co/edit/0ZSJ74Ak2HleqdIQHNF4?p=preview . I use quill.js from https://github.com/arsnebula/polymer-quill and It's work, but old version (1.2.4) . ",
    "SkyliHaiLan": "@1c7 thank you for your reply. It has been solved. @1c7 thank you for your reply. It has been solved. ",
    "Praveen-Rai": "I can understand that, But, there's few things which common in the front-end. For e.g. if i wish to add an image in the Quill-Editor, i wish to be able to browse the file, call some api/route at back-end to upload file (this can be part of Quill configuration) and replace it with returned path ( we can suggest the developers to return the path from the api/route ). \nWhile the real uploading part is actually scenario driven, the other two has a lot to do on front-end and can be generalized. There are lot of use cases, and let me take a few of them \nAttaching a Video - If the html has to display the video correctly and not just a hyperlink, it has to be encapsulated in the HTML Video tag. And as you understand that multiple sources are to be provided for the HTML Video Tag, which add a requirement to allow multiple file uploads. \nUpload Progress - Everyone want to display the uploaded files and their progress. \nFiltering - When uploading images, the user must be allowed to select the image formats, and so on.\nBasically, what i am trying to suggest is a basic framework and front-end functionality, even if we make it very specific to Quill. And we can still let the developers to override or add their custom functionalities using configuration files.\nDoes it make sense ?. I can understand that, But, there's few things which common in the front-end. For e.g. if i wish to add an image in the Quill-Editor, i wish to be able to browse the file, call some api/route at back-end to upload file (this can be part of Quill configuration) and replace it with returned path ( we can suggest the developers to return the path from the api/route ). \nWhile the real uploading part is actually scenario driven, the other two has a lot to do on front-end and can be generalized. There are lot of use cases, and let me take a few of them \nAttaching a Video - If the html has to display the video correctly and not just a hyperlink, it has to be encapsulated in the HTML Video tag. And as you understand that multiple sources are to be provided for the HTML Video Tag, which add a requirement to allow multiple file uploads. \nUpload Progress - Everyone want to display the uploaded files and their progress. \nFiltering - When uploading images, the user must be allowed to select the image formats, and so on.\nBasically, what i am trying to suggest is a basic framework and front-end functionality, even if we make it very specific to Quill. And we can still let the developers to override or add their custom functionalities using configuration files.\nDoes it make sense ?. ",
    "Lccuff": "\u9047\u5230\u70b9\u51fb\u52a0\u7c97\u548c\u659c\u4f53\u5931\u6548+1. \u9047\u5230\u70b9\u51fb\u52a0\u7c97\u548c\u659c\u4f53\u5931\u6548+1. @1c7 \u89e3\u51b3\u4e86\uff0c\u611f\u8c22\u5927\u795e. @1c7 \u89e3\u51b3\u4e86\uff0c\u611f\u8c22\u5927\u795e. ",
    "toddbarry": "Ok, thank u for answer. I had small problems with understanding of Quill at the beginning.. Ok, thank u for answer. I had small problems with understanding of Quill at the beginning.. ",
    "indapublic": "@Joeao Awesome! Thanks!. ",
    "buu700": "Ah, cool, that sounds good to me.\nThis was just the fastest way to unblock myself so I figured I may as well submit it as a PR too while I'm at it (and avoid having to maintain a fork long-term), but I have no problem moving the chooser.getFile logic to my application and making this interface more generic.. Ah, that's perfect, thanks! In that case I'll just continue using my 1.x fork and upgrade to one of those interfaces when 2.0 final is out.. Cool, thanks, that'll make things a lot easier when we upgrade. I must have run the wrong npm script when I built Quill the first time around.. ",
    "cpinto-cb": "So there is a way to register my class name with parchment/quill?\n. So there is a way to register my class name with parchment/quill?\n. ",
    "ninjvalenz": "Hi @RyanV ,\nThanks for the reply. \nMy current version is v1.3.6.\nHere is the image I want to obtain (Just a random screenshot from VS): \n\n. Hi @RyanV ,\nThanks for the reply. \nMy current version is v1.3.6.\nHere is the image I want to obtain (Just a random screenshot from VS): \n\n. You are right. Seems like the problem is on my saving part. I'm so sorry. Everything is okay. I do a rechecked.. You are right. Seems like the problem is on my saving part. I'm so sorry. Everything is okay. I do a rechecked.. ",
    "ylemkimon": "@jhchen Thank you \u2764\ufe0f . ",
    "Nomia": "Do I still need to import the bootstrap like you include in the codepen, the bootstrap js and bootstrap css?. ",
    "dgreensp": "Oh I see.  I\u2019ll do something about that!\nOn Sat, Aug 18, 2018 at 4:06 PM Jason Chen notifications@github.com wrote:\n\n@jhchen commented on this pull request.\nIn core/editor.js\nhttps://github.com/quilljs/quill/pull/2252#discussion_r211087521:\n\n@@ -328,4 +338,84 @@ function normalizeDelta(delta) {\n   }, new Delta());\n }\n\n+function splitDelta(delta, index) {\n+  return [delta.slice(0, index), delta.slice(index)];\n+}\n+\n+function diffDeltas(oldDelta, newDelta, selectionInfo = undefined) {\n+  if (selectionInfo) {\nI don't feel strongly on my particular recommendation but I do feel\nsomething should be done to make the if branch easier to read. At 70\nlines long I cannot see the full if branch on a 28\" monitor. A couple other\nideas:\n\nThe two inner if else branches can be their own functions\nInstead of calling return oldDelta.diff(newDelta); at the end we\n   call diffDeltas(oldDelta, newDelta) (removing the selectionInfo\n   parameter even if one is supplied)\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/pull/2252#discussion_r211087521, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAJgpmGlT9KsEygCAy3qUsxBzOei3z4gks5uSJ3-gaJpZM4V_FSY\n.\n. 30 of those lines weren't there before running the linter ;). Ok, see how this version strikes you.  I also changed { index: ..., length: ... } to new Range(...), which helped with the monstrosity that was relativeSelectionInfo after prettier (edit: besides being the correct way to create a range, I believe).. Ah ok.  How about this (updated the code).. \ud83c\udf89 . The branches of the big if/else don't always return; sometimes they fall through.  So the diff has to be at the bottom to catch those cases.\n\nThe way I think of this method is as two special cases to check for, each with its own conditions, checks, and guards.  It's possible that the number of special cases or the conditions and guards on each case could change in the future.  Maybe this would be clearer if the big if/else were actually two ifs.  selectionInfo has to be present to even consider the special cases, and to calculate the variables that are used by both.  There's no way to know if a special case will apply or not, though, without running them.. I don't feel too strongly, but is duplicating code better than having an extra level of indentation?  If the non-special case needs to change, it would have to change in two places.\nThe fact that the two special cases (insertion or deletion before or after the cursor; typing over a range) both make certain requirements of newSelection and oldSelection, and these requirements are partly the same and partly exclusive, seems totally coincidental to me, so at least the way I've been thinking about it, highlighting the common part and the exclusive part doesn't add clarity.  But maybe just making the structure of the code simpler makes it easier to read.  We can do it.. I mean maybe there is a logic to it, like if the new selection is a range then logically, this isn't a splice caused by someone typing.  And if the old selection is a range that's a different case than the old selection being a cursor, and the two diff strategies basically correspond to those two cases.  I guess I just didn't have those thoughts at the time. :). ",
    "Rc85": "nevermind. not an issue with opera.. ",
    "www5826": "i solved this problem by insertEmbed() via delta.you`ll build new feature like this?you mean control data flow? @1c7\n. i am sorry,Our product hasn't come on line yet.but i can provide my thinking of emoji @1c7 . ok,you can add my weixin.because we are all in guangzhou. ok,you can add my weixin.because we are all in guangzhou. wjp5826\uff0cI am very willing to communicate with you @1c7 . wjp5826\uff0cI am very willing to communicate with you @1c7 . Because we are multiterminal, the plan has been determined and cannot be changed. @sankalpsans . ",
    "MgSam": "Thanks for the partial workaround, but the clean button removes all formatting, which may not be what the user wants.\nI think this default behavior is wrong. Any user expects that when they click on a color, that color will be applied. They don't expect it to suddenly change to whatever the page's ambient colors happen to be. \nI don't know what \"other editors\" you're referring to, but this is certainly not how any word processor works. The foreground and background colors are set explicitly and stored that way. And Word, for example, has an explicit \"clear\" button for background color.\n\n. ",
    "sabsaxo": "Forgot the prefix of the selector ... sigh!. Well, probably because I'm an idiot, 'forgot' to add the prefix of '#' to the selector, as in:\nvar quill = new Quill('#' + uid, options);\nFacepalm!. That's exactly what I was trying to avoid. I've got other 'normal' form elements, and can make a simple check. But due to Quill using a div I can no longer (without writing custom stuff).\nI'll try and look for a form based (textarea based this is) editor. . Maybe add a hidden textarea that gets updated with the content of the div on changes ... then changes will be registered to the textarea?. ",
    "martisj": "You should be able to use the BlockEmbed blot to create a tag with a custom classname.\n1. What does your code look like?\n1. What do you want to achieve?. ",
    "michael-38": "And within an editor, how can I check if the cursor is on a new line? When I use getSelection, the index is relative to the entire editor rather than the index of each line.. ",
    "iwonrimath": "There is setSelection API.\nExample from quill/theme/base.js :\nlet range = this.quill.getSelection(true);\n    if (range != null) {\n      let index = range.index + range.length;\n      this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, Emitter.sources.USER);\n      if (this.root.getAttribute('data-mode') === 'formula') {\n         this.quill.insertText(index + 1, ' ', Emitter.sources.USER);\n      }\n      this.quill.setSelection(index + 2, Emitter.sources.USER);\n    }\n. ",
    "leandrogaspar": "Yes, it is. You can download the files directly and host them yourself.\nYou can find the latest releases here:\nhttps://github.com/quilljs/quill/releases. ",
    "callovarne": "It's really frustrating to invest a lot of time in understanding Quill, expecting there will be instructions along the way about rendering its content, only to learn that this project is bring-your-own-renderer. It'd be great to mention that at the beginning.. ",
    "rawkode": "@1c7 Can you share your code for this?. Thanks @1c7 . Thanks @1c7 . Thank you very much, @1c7. That's awesome. Thank you very much, @1c7. That's awesome. @1c7 I can't work out how this code helps editing of an already inserted link. Am I missing something? :). ",
    "nereuseng": "@1c7 Hi,\nHow do i override the tool-tip shown default behavior when I click the Link? At first, I was tried to use default tool-tip to edit link, but the whole input text will missing.\nCould you share how you solved this problem?\nThanks in advance. :)\n\n\n\n. @1c7 Thank you for your reply, seems like I need to try some luck.. ",
    "furqan56": "I'm facing a similar issue as it doesn't update the content \n\nHowever, it works just fine if the user first clicks on the text area then move the cursor left or right and then remove the blot. I even have tried on the above example and it worked \n\n. It doesn't happen all the time it only happens 3/5 times . ",
    "jakeboyles": "+1. ",
    "mikecousins": "Video of it happening:\nhttps://drive.google.com/file/d/125dwRbgCC6vIusdqK5va0WWBUkPkTpED/view?usp=sharing. ",
    "Andries-Smit": "Found a work around, just add the class nostranslate to a parent node.\nhttps://cloud.google.com/translate/faq#technical_questions\nThanks to: https://stackoverflow.com/questions/9628507/how-can-i-tell-google-translate-to-not-translate-a-section-of-a-website. Found a work around, just add the class nostranslate to a parent node.\nhttps://cloud.google.com/translate/faq#technical_questions\nThanks to: https://stackoverflow.com/questions/9628507/how-can-i-tell-google-translate-to-not-translate-a-section-of-a-website. ",
    "Heyxuxiaoting": "@benbro I've found the reason, I forget to clear the already mounted quill dom, rendering again lead to the error.  It has nothing to do with quill. Thanks anyway, respect\u270c(\u25d5\u203f-)\u270c. ",
    "tribis": "I see that it is due to the .ql-editor class attribute \"white-space: pre-wrap\". Now it only works in Chrome, if that was changed into \"pre-line\" justification would work as expected in all three browsers (never mind IE). . @DJShump08 hmm, I see that this only happens in Firefox, not in Edge or Chrome.. @DJShump08 hmm, I see that this only happens in Firefox, not in Edge or Chrome.. It looks like one CI test failed by itself: \n\"No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.\". ",
    "Jianyf-Jianyf": "It has been used for some time.  And just discovered this problem....... ",
    "Fawwaz-2009": "Hey benbro, thanks for your quick response. Sure I saw the example and the arguments passed to quill.setContents  is what at least I think is the delta object. because I did try actually getting the delta object through get.Contentes and then passing the value to setContents. \nBut is there is a method to get just the array in the example above form a quill editor?. Hey benbro, thanks for your quick response. Sure I saw the example and the arguments passed to quill.setContents  is what at least I think is the delta object. because I did try actually getting the delta object through get.Contentes and then passing the value to setContents. \nBut is there is a method to get just the array in the example above form a quill editor?. After seeing the example that benbro referenced I went and try to hack again at a solution and I think I found one. Not sure if it's best practice or any thing but seems to work.\n```\n//save the ops (which contains the array similar to the example above) property of the Delta Object into a variable \nlet x=quill.getContents().ops;\n//now you can send x to the database. Next time you can use x to load the text\nquill.setContents(x);\n```\nI'll double check and try this on firestore and then close the issue. But for now I don't see what this wouldn't work.. The solution worked with firestore, though for my app I had to create a new separate field for Html. So I'm closing the issue and thanks again to @benbro . ",
    "sisidovski": "@jhchen Thanks. I've changed it.. I tested it on Chrome + MacOS. However I noticed latest Firefox works fine. I suspect this is caused by browser input implementation. But I also can't detect where the real cause is. Is that inside parchment? . Thank you, that looks nice solution, really helpful for me.\nAlso, I still hope quill itself fixes this problem internally\ud83d\ude42. ",
    "Ruujinjaka": "Thanks ben, figured it out anyway.\n. ",
    "HAMZABoxer98": "Thank you so much.. I solved it\nI am using Vue CLI 3 SPA and I am testing my application using jest in node.js (I run my tests in terminal), but it seems that Quilljs use document.getSelection and MutationObserver wich jsdom does not support. \nI solved it by importing MutationObserver from this link and I used the fake getSelection from this example. it's weird that jsdom does not support these features !!\nI was looking for a solution from 2 days ago.\n. Thank you so much.. I solved it\nI am using Vue CLI 3 SPA and I am testing my application using jest in node.js (I run my tests in terminal), but it seems that Quilljs use document.getSelection and MutationObserver wich jsdom does not support. \nI solved it by importing MutationObserver from this link and I used the fake getSelection from this example. it's weird that jsdom does not support these features !!\nI was looking for a solution from 2 days ago.\n. ",
    "ironicicon": "Thanks @benbro :). Thanks @benbro :). ",
    "toao": "@Ravenstine After having a look into the sources I found a dirty workaround that fixes the issue for me: I'm manually adding the new blot name of the inline element to the Inline.order array.\nInline.order.splice(Inline.order.indexOf('bold'), 0, 'foo');\nsee: https://github.com/quilljs/quill/blob/develop/blots/inline.js#L49-L59\n. @Ravenstine After having a look into the sources I found a dirty workaround that fixes the issue for me: I'm manually adding the new blot name of the inline element to the Inline.order array.\nInline.order.splice(Inline.order.indexOf('bold'), 0, 'foo');\nsee: https://github.com/quilljs/quill/blob/develop/blots/inline.js#L49-L59\n. ",
    "zhangjinsong": "@WinMinTun  May I ask if this problem has been solved. ",
    "sheelen": "Updating to 1.3.6 version didn't solve the problem.\nAny work around to this situation?\nI was thinking of manually changing the container's default stylings using CSS and the attributes property of Delta object before storing it in the persistence layer; but that's tricky considering how Quill reassigns newline operators and never append it to the end of the string.. A possible work-around to this situation would be to set Quill format again when there is a text change event:\nquill.on('text-change', function() {\n    if(quill.getLength()==1){\n        quill.format(\"font\", \"Arial\");\n    }\n});. ",
    "vdechef": "I have the same problem with Code Block.\nIt seems that when the first or the last line of Quill editor is a Code Block, replacing the whole content of the editor by pasting some text in it will not erase the formatting correctly.\nSteps for Reproduction\n1. Go to https://quilljs.com/playground/\n2. Write in the playground\n\nThis is\nMy test\nDuh\n3. Select \"Duh\" and click on Code Block button\n4. Open a notepad and write\nThis is another text\n5. Copy the line from the notepad\n6. In Quill playground, select all the content with Ctrl+a\n7. Paste the copied text\n\nExpected behavior:\nThe text is pasted with its own formatting (ie. no formatting)\nActual behavior:\nThe text is pasted formatted as Code Block\nPlatforms:\nChrome 70 and Firefox 53 on Windows 10\nFirefox 52 on Ubuntu 16.04\nVersion:\n1.3.6. I have the same problem with Code Block.\nIt seems that when the first or the last line of Quill editor is a Code Block, replacing the whole content of the editor by pasting some text in it will not erase the formatting correctly.\nSteps for Reproduction\n1. Go to https://quilljs.com/playground/\n2. Write in the playground\n\nThis is\nMy test\nDuh\n3. Select \"Duh\" and click on Code Block button\n4. Open a notepad and write\nThis is another text\n5. Copy the line from the notepad\n6. In Quill playground, select all the content with Ctrl+a\n7. Paste the copied text\n\nExpected behavior:\nThe text is pasted with its own formatting (ie. no formatting)\nActual behavior:\nThe text is pasted formatted as Code Block\nPlatforms:\nChrome 70 and Firefox 53 on Windows 10\nFirefox 52 on Ubuntu 16.04\nVersion:\n1.3.6. ",
    "redemption024": "I have to agree with the expected behaviour. Since image is removed in whitelisted format it should not be allowed at all. \nIn the meantime, I ended up disabling drop event on the editor instance. Works but user can't drop anything including text and stuff. Well, I guess they can just copy & paste for those.. I have to agree with the expected behaviour. Since image is removed in whitelisted format it should not be allowed at all. \nIn the meantime, I ended up disabling drop event on the editor instance. Works but user can't drop anything including text and stuff. Well, I guess they can just copy & paste for those.. ",
    "poshest": "Note that pasting rich text (Ctrl+V) into all rich editors that I tried (eg Word, Google Docs, browser plain contenteditable) yielded the correct and expected single carriage return between the lines.. +1 I'm also seeing this on Win7, Chrome v72, Quill v1.3.6.. ",
    "alhambra1": "I see that this does not happen when using .format rather than .insertEmbed.. ",
    "gfmclean": "Thank you for your response. I am simply trying to enable cut and past into an editor.  Without having included any code other than quill itself, it seems that when I hit control + V, the code falls into quill's onpaste, however, no paste data is passed in.. ",
    "efake2002": "Figured it out: it's ql-blank and ql-editor. thanks.. ",
    "Linshiqi": "me too. ",
    "KyooMario": "Hello Jason,\nI ran the \"npm install quill\" yesterday so I presume this is the latest and my target platform is plain javascript. I think this covers your question?\nThanks for the quick response.\nKind regards,\nMario\n. Hello Jason,\nWhile I have your attention a small question: Is the \"resource\" feature where I can see the Html code only for viewing? Modifying the code seems to have an odd behavior (simply typing does not work).\nKind regards,\nMario. ",
    "huangjinqiang": "try this\nwebpack --env.minimize --config _develop/webpack.config.js. ",
    "dhowe": "After lots of trial and error, I finally got it working with this code:\n```js\nvar Counter = function (quill, options) {\n  this.quill = quill;\n  this.options = options;\n  this.container = document.querySelector(options.container);\n  quill.on('text-change', this.update.bind(this));\n  this.update(); // Account for initial contents\n};\nCounter.prototype.calculate = function () {\n  var text = this.quill.getText();\n  if (this.options.unit === 'word') {\n    text = text.trim();\n    // Splitting empty text returns a non-empty array\n    return text.length > 0 ? text.split(/\\s+/).length : 0;\n  } else {\n    return text.length;\n  }\n};\nCounter.prototype.update = function () {\n  var length = this.calculate();\n  var label = this.options.unit;\n  if (length !== 1) {\n    label += 's';\n  }\n  this.container.innerHTML = length + ' ' + label;\n}\nQuill.register('modules/counter', Counter);\nvar quill = new Quill('#editor', {\n  modules: {\n    counter: { container: \"#counter\", unit: 'word' },\n  },\n});\n. Excellent. And does this include keyboard events that don't lead to direct content changes (for example, navigation through a document)?. Thanks - I will give a try and see how it goes. ",
    "CosmoMyzrailGorynych": "I wonder why replacing at all. It is a useful typographic character.. ",
    "krogersforbes": "Hey Artem,\nQuill can have multiple editors on the page without a problem. You only need to load the initial scripts once, and then when you initialize each box just make sure that it has it's own unique initialization.\nhttps://codepen.io/krogersforbes/pen/OdjMxY \nHope this helps!. I confirmed that this also happens when text is in italics or underlined, I believe it's related to having the <a> nested inside of another tag. I traced the actual removal to https://github.com/quilljs/parchment/blob/2.0/src/blot/abstract/parent.ts#L237 \ninside of parchment, but I don't have enough depth of knowledge at the moment to understand why the problem is occurring. \nChecking out the mutations that cause it, it looks like there's quite a lot going on in there for adding a single character. That's pretty much where I'm getting stuck on tracing it though.\n\n. Sounds good, thanks!. ",
    "rcqcxy": "I have the same problem. I want to  set the style text-indent,Have you solved it\uff0cplease?. ",
    "phouri": "That's not possible, using quill to generate html that then gets injected into different places, some with bold, some aren't, so that doesn't really work.. ",
    "up2hub": "I have the same problem. \nAlso focus on this issue.\nPlatforms: \nwindows7 x64\nchrome66.0.3359.181(X64) and firefox63(X64) all have this issue\nand when code-block has large code (about 200 lines) , ctrl+a select all and press backspace , then undo , it will be slow.. I have the same problem. \nAlso focus on this issue.\nPlatforms: \nwindows7 x64\nchrome66.0.3359.181(X64) and firefox63(X64) all have this issue\nand when code-block has large code (about 200 lines) , ctrl+a select all and press backspace , then undo , it will be slow.. ",
    "rodoch": "Having wasted a day of work struggling with this exact same problem, I wanted to share the solution I found. Bear in mind I wrote this in Typescript, but there is little difference other than the type qualifications and the way the class is exported.\nHere is my class extending an inline element:\n```\nimport Quill from 'quill';\nconst Link = Quill.import('formats/link');\nexport default class ExtendedLink extends Link {\n  private static sanitizeUrl(url: string, protocols: any[]) {\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n    return protocols.indexOf(protocol) > -1;\n  }\nstatic create(value: string) {\n    const node = super.create(value);\n    node.setAttribute('href', this.sanitize(value));\nfor (const protocol of ExtendedLink.PROTOCOL_WHITELIST) {\n  if (value.startsWith(protocol)) {\n    node.setAttribute('rel', 'noopener');\n    node.setAttribute('target', '_blank');\n    break;\n  }\n}\n\nreturn node;\n\n}\nstatic formats(domNode: HTMLElement) {\n    return domNode.getAttribute('href');\n  }\nstatic sanitize(url: string) {\n    return this.sanitizeUrl(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n  }\n}\nExtendedLink.blotName = 'link';\nExtendedLink.tagName = 'A';\nExtendedLink.SANITIZED_URL = 'about:blank';\nExtendedLink.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\n```\nFor the purposes of your question, you can replace 'Link' with 'Inline'.  The key thing for me here was realising I needed to use const Link = Quill.import('formats/link'); instead of a typical ES5/6 import directive (this holds true in Typescript also). The error you describe is thrown if you don't call Quill.import() \u2014 for some reason failing to do so means that Quill doesn't recognise your new class as being derived from the parent class (be it Inline, Link, Block or whatever). \nThen, in another file, I imported this class and registered it, prior to calling a new instance of the quill editor:\n```\nimport ExtendedLink from './extended-link.js';\n[...]\nQuill.register({ 'formats/extended-link': ExtendedLink }, true);\n[...]\nconst editor = new Quill(this.editorElement, options);\n[...]\n```. Having wasted a day of work struggling with this exact same problem, I wanted to share the solution I found. Bear in mind I wrote this in Typescript, but there is little difference other than the type qualifications and the way the class is exported.\nHere is my class extending an inline element:\n```\nimport Quill from 'quill';\nconst Link = Quill.import('formats/link');\nexport default class ExtendedLink extends Link {\n  private static sanitizeUrl(url: string, protocols: any[]) {\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n    return protocols.indexOf(protocol) > -1;\n  }\nstatic create(value: string) {\n    const node = super.create(value);\n    node.setAttribute('href', this.sanitize(value));\nfor (const protocol of ExtendedLink.PROTOCOL_WHITELIST) {\n  if (value.startsWith(protocol)) {\n    node.setAttribute('rel', 'noopener');\n    node.setAttribute('target', '_blank');\n    break;\n  }\n}\n\nreturn node;\n\n}\nstatic formats(domNode: HTMLElement) {\n    return domNode.getAttribute('href');\n  }\nstatic sanitize(url: string) {\n    return this.sanitizeUrl(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n  }\n}\nExtendedLink.blotName = 'link';\nExtendedLink.tagName = 'A';\nExtendedLink.SANITIZED_URL = 'about:blank';\nExtendedLink.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\n```\nFor the purposes of your question, you can replace 'Link' with 'Inline'.  The key thing for me here was realising I needed to use const Link = Quill.import('formats/link'); instead of a typical ES5/6 import directive (this holds true in Typescript also). The error you describe is thrown if you don't call Quill.import() \u2014 for some reason failing to do so means that Quill doesn't recognise your new class as being derived from the parent class (be it Inline, Link, Block or whatever). \nThen, in another file, I imported this class and registered it, prior to calling a new instance of the quill editor:\n```\nimport ExtendedLink from './extended-link.js';\n[...]\nQuill.register({ 'formats/extended-link': ExtendedLink }, true);\n[...]\nconst editor = new Quill(this.editorElement, options);\n[...]\n```. ",
    "iobuhov": "Oh, thank you @DmitrySkripkin.\nThank you for your feedback, this option is helped a lot.. Oh, thank you @DmitrySkripkin.\nThank you for your feedback, this option is helped a lot.. ",
    "transcendr": "Any word on this, guys?. ",
    "ashleemboyer": "I agree with this. I found it difficult to style the toolbar and easily add options to it because I didn't know the there were super specific selectors to use. For example, to change the border color of the toolbar, I had to use the .ql-toolbar.ql-snow selector to do so.\nBut I also think the toolbar module should have an easy way to dynamically add controls.. I've read that you can get HTML from the editor by doing quill.root.innerHTML. I wonder if you can just set that to get what you're looking for? I have never tried it personally.\nEDIT: Ok... I got curious and tried it out! This code worked for me:\n. I'm seeing now that you can't even paste snips into the editor on https://quilljs.com/.. I'm seeing now that you can't even paste snips into the editor on https://quilljs.com/.. I've made another CodePen where I catch the paste event on quill.root and prevent the default Quill pasting functionality. In all the cases I could come up with, it appears to work the same as the editor playground. I added the (code for drag and drop)[https://github.com/kensnyder/quill-image-drop-module/blob/master/image-drop.min.js] as well to make sure that functionality still worked for the project I'm working on.\nI'd still like to better understand why Quill doesn't work with images from Snipping Tool.. I've made another CodePen where I catch the paste event on quill.root and prevent the default Quill pasting functionality. In all the cases I could come up with, it appears to work the same as the editor playground. I added the (code for drag and drop)[https://github.com/kensnyder/quill-image-drop-module/blob/master/image-drop.min.js] as well to make sure that functionality still worked for the project I'm working on.\nI'd still like to better understand why Quill doesn't work with images from Snipping Tool.. According to this answer, dangerouslyPasteHTML is deprecated? In what version? It's what I use in my second CodePen.. According to this answer, dangerouslyPasteHTML is deprecated? In what version? It's what I use in my second CodePen.. ",
    "hrizk": "thank you that worked . ",
    "ryanmitchell": "Bit late to the game, but it should come up when you use:\nquillInstance.on('selection-change', function(range, oldRange, source) {\n\n    if (range) {\n\n             console.log(quillInstance.getFormat(range.index, range.length));\n\n    }\n\n});. Bit late to the game, but it should come up when you use:\n\nquillInstance.on('selection-change', function(range, oldRange, source) {\n\n    if (range) {\n\n             console.log(quillInstance.getFormat(range.index, range.length));\n\n    }\n\n});.\n",
    "SpectralKH": "@benbro Sorry, I tried but wasn't able to get something equivalent on CodePen because of the npm packages. @benbro I'm well aware, but how exactly do I get ahold of the Delta object I have in my code?. @benbro What? Because I can't replicate this on CodePen, it's a project question?\nI'm overwriting a shortcut handler without changing anything, and that's causing an error. Seems like a bug to me. ",
    "FinnWoelm": "Oddly enough, the link works now... :open_mouth: Closing this, I guess. Not sure what it was.. ",
    "rafalolszewski94": "I've used custom module\n```js\nexport class ImageUpload {\n  /*\n   * Instantiate the module given a quill instance and any options\n   * @param {Quill} quill\n   * @param {Object} options\n   /\n  constructor(quill, options = {}) {\n    // save the quill reference\n    this.quill = quill;\n    // save options\n    this.options = options;\n    // listen for drop and paste events\n    this.quill.getModule('toolbar').addHandler('image', this.selectLocalImage.bind(this));\n  }\n/\n   * Select local image\n   /\n  selectLocalImage() {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', 'image/');\n    input.click();\n// Listen upload local image and save to server\ninput.onchange = () => {\n  const file = input.files[0];\n\n  // file type is only image.\n  if (/^image\\//.test(file.type)) {\n    const checkBeforeSend = this.options.checkBeforeSend || this.checkBeforeSend.bind(this);\n    checkBeforeSend(file, this.sendToServer.bind(this));\n  } else {\n    console.warn('You could only upload images.');\n  }\n};\n\n}\n/*\n   * Check file before sending to the server\n   * @param {File} file\n   * @param {Function} next\n   /\n  checkBeforeSend(file, next) {\n    next(file);\n  }\n/*\n   * Send to server\n   * @param {File} file\n   /\n  sendToServer(file) {\n    const url = this.options.url || 'your-url.com';\n    const method = this.options.method || 'POST';\n    const headers = this.options.headers || {};\n    const callbackOK = this.options.callbackOK || this.uploadImageCallbackOK.bind(this);\n    const callbackKO = this.options.callbackKO || this.uploadImageCallbackKO.bind(this);\n    const fd = new FormData();\n    fd.append('image', file);\nconst xhr = new XMLHttpRequest();\n// init http query\nxhr.open(method, url, true);\nxhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n// add custom headers\nfor (const index in headers) {\n  xhr.setRequestHeader(index, headers[index]);\n}\n\n// listen callback\nxhr.onload = () => {\n  if (xhr.status === 200) {\n    callbackOK(JSON.parse(xhr.responseText), this.insert.bind(this));\n  } else {\n    callbackKO({\n      code: xhr.status,\n      type: xhr.statusText,\n      body: xhr.responseText,\n    });\n  }\n};\n\nxhr.send(fd);\n\n}\n/*\n   * Insert the image into the document at the current cursor position\n   * @param {String} data  The base64-encoded image URI\n   /\n  insert(data) {\n    const selection = this.quill.getSelection();\n    const index = selection ? selection.index : this.quill.getLength();\n    this.quill.insertEmbed(index, 'image', data.link, 'user');\n  }\n/*\n   * callback on image upload succesfull\n   * @param {Any} response http response\n   /\n  uploadImageCallbackOK(response, next) {\n    next(response);\n  }\n/*\n   * callback on image upload failed\n   * @param {Any} error http error\n   /\n  uploadImageCallbackKO(error) {\n    alert(error);\n  }\n}\n```\njs\n  Quill.register({\n    'modules/imageUpload': ImageUpload,\n  }, true);\nand then in your Quill config:\n``js\nmodules: {\n  imageUpload: {\n    url:/my-file-upload-url/`,\n    method: 'POST',\n    headers: {},\n    /\n     * personalize successful callback and call next function\n     * to insert new url to the editor\n     /\n    callbackOK: (serverResponse, next) => {\n      next(serverResponse);\n    },\n    // personalize failed callback\n    callbackKO: (serverError) => {\n      console.error(serverError);\n    },\n    // optional\n    // add callback when a image have been chosen\n    checkBeforeSend: (file, next) => {\n      const limit = 3;\n      const limitFileSize = (megabytes) => {\n        const mb = 1024;\n        megabytes = mb;\n        const isExceeding = (file.size / mb) > megabytes;\n        const fileSize = ((file.size / mb) / mb).toFixed(2);\n        return { isExceeding, fileSize };\n      };\n  if (limitFileSize(limit).isExceeding) {\n    console.error(`File is exceeding limit size.`)\n    return false;\n  }\n  return next(file);\n},\n\n},\n}\n```. You would have to most likely to add some kind of already formated url with\nimage ID or other identifier which you would Ajax post to this url later\non. Top it off with custom button which will handle it\nOn Wed, 5 Dec 2018, 10:33 Dimitar Dimitrov <notifications@github.com wrote:\n\n@rafalolszewski94 https://github.com/rafalolszewski94 Cool, thanks for\nsharing, much appreciated! I was wondering, how do you handle a user\ndeleting an image that he previously uploaded to the server? As in - he\nattaches it (which uploads it on the server), then decides to remove it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/quilljs/quill/issues/2403#issuecomment-444419688, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AkK0BBReSP_Xh1gZsRwieGK1N_lFWUrhks5u15MAgaJpZM4Yo5gr\n.\n. \n",
    "lyuehh": "\n@chloerei Thanks, your solution helps me a lot.\nWhen I typing with Chinese IME in a empty line, and press delete key to delete all composing, a new unexpected line will appear under current line.\nAfter I merge your solution, it was fixed.\nBut another problem still alive, if there's a line above the typing empty line, when I press delete key durring composing, the current line with composing chars will be inserted into the start of above line.\nScreen shot for Steps\n\n\n\nCould you have any ideas ?\nTHX~\n\nI have the same issue, very annoying. > @chloerei Thanks, your solution helps me a lot.\n\nWhen I typing with Chinese IME in a empty line, and press delete key to delete all composing, a new unexpected line will appear under current line.\nAfter I merge your solution, it was fixed.\nBut another problem still alive, if there's a line above the typing empty line, when I press delete key durring composing, the current line with composing chars will be inserted into the start of above line.\nScreen shot for Steps\n\n\n\nCould you have any ideas ?\nTHX~\n\nI have the same issue, very annoying. > @chloerei Thanks, your solution helps me a lot.\n\nWhen I typing with Chinese IME in a empty line, and press delete key to delete all composing, a new unexpected line will appear under current line.\nAfter I merge your solution, it was fixed.\nBut another problem still alive, if there's a line above the typing empty line, when I press delete key durring composing, the current line with composing chars will be inserted into the start of above line.\nScreen shot for Steps\n\n\n\nCould you have any ideas ?\nTHX~\n\nI found a solution, add \n// change bindings from const to let\n      if (evt.key === 'Backspace' && evt.which === 229) {\n        bindings = [];\n      }\nto modules/keyboard.js listen() around line 105, will fix this issue.. > @chloerei Thanks, your solution helps me a lot.\n\nWhen I typing with Chinese IME in a empty line, and press delete key to delete all composing, a new unexpected line will appear under current line.\nAfter I merge your solution, it was fixed.\nBut another problem still alive, if there's a line above the typing empty line, when I press delete key durring composing, the current line with composing chars will be inserted into the start of above line.\nScreen shot for Steps\n\n\n\nCould you have any ideas ?\nTHX~\n\nI found a solution, add \n// change bindings from const to let\n      if (evt.key === 'Backspace' && evt.which === 229) {\n        bindings = [];\n      }\nto modules/keyboard.js listen() around line 105, will fix this issue.. I investigate this issue, find in v1.3.6, the logic in keyboard.js was\nlet bindings = (this.bindings[which] || []).filter(function(binding) {\n        return Keyboard.match(evt, binding);\n      });\nbut in v2.0.0-dev3, the code change to \nconst bindings = (this.bindings[evt.key] || []).concat(\n        this.bindings[evt.which] || [],\n      );\nWhen in cjk mode, if the input method pop up exists, the evt.key was original key, but evt.which was 229, which will hand by inpout method, not by the editor, so change back to \nconst bindings = this.bindings[evt.which] || [];\nwill fix this problem, hope this will help who trouble with this problem.. I investigate this issue, find in v1.3.6, the logic in keyboard.js was\nlet bindings = (this.bindings[which] || []).filter(function(binding) {\n        return Keyboard.match(evt, binding);\n      });\nbut in v2.0.0-dev3, the code change to \nconst bindings = (this.bindings[evt.key] || []).concat(\n        this.bindings[evt.which] || [],\n      );\nWhen in cjk mode, if the input method pop up exists, the evt.key was original key, but evt.which was 229, which will hand by inpout method, not by the editor, so change back to \nconst bindings = this.bindings[evt.which] || [];\nwill fix this problem, hope this will help who trouble with this problem.. ",
    "jaredly": "Looks like it only happens when the text is bold.\nAdditional information:\n- if you have some bold text with a link in the middle, putting a space after the link deletes the link & puts the cursor at the end of the bold text.. If you look at the source code for the image blot you can see that it recognizes the alt, width, and height parameters to be specified by Delta format attributes. I'd suggest using the image blot file as your template, and adding align to the list of ATTRIBUTES, and then you'd have to change static formats(domNode) and format(name, value) to handle that attribute as well (which probably does on the style object, as opposed to directly on the dom node). Oh fancy, I guess you didn't need to change those functions.\nSo how are you setting the align formatting attribute? Can you post the code where you're creating the image?. That's because align=\"middle\" doesn't seem to be well supported by browsers. see https://codepen.io/anon/pen/zyGrvv and https://www.w3schools.com/tags/att_img_align.asp. I think this probably makes more sense as a third-party plugin -- you can take a look at this list for inspiration. . I think this is what determines the ordering https://github.com/quilljs/quill/blob/develop/blots/inline.js#L48 \nI'd guess that if you insert your blot name between bold and script, it would do what you want.. ",
    "seagyn": "A good example of this and what @natterstefan is wanting to achieve, is to look at Notes on iOS.\nIf you were to go 11. and hit space it create a list starting from 11. It's very handy for continuation of lists.. ",
    "mccoysc": "in chrome version 70. ",
    "kennwilson": "It turns out this was related to Turbolinks and how I was including the Quill JS into my pages. Closing.. ",
    "Havunen": "I noticed you are building quill v2 with following browser support:\n'last 2 Chrome major versions',\n                  'last 2 Firefox major versions',\n                  'last 2 Safari major versions',\n                  'last 2 Edge major versions',\n                  'last 2 iOS major versions',\n                  'last 2 ChromeAndroid major versions',\nDo you have interest supporting IE11? We have business requirement to support that environment.... I could try helping to make it work.. Okay sounds good.\nI already did some work on the IE11 support and got the basic editor working. Most of the changes needed were basic IE fixes  for example classList.toggle(value, boolean) needs to be converted to add/remove and then node.contains(node, textNode) needs to be rewritten into loop. With those changes IE works quite ok. \nI also noticed this repository seems not to be maintained very often, issue tracker is getting a lot of tickets and nobody is commenting. Our companys need for text editor is really simple, (bold,italic,lists,headers)... no images/videos/tables etc. so It might be easier for us to just roll our own solution.\nIdeally it would be nice to use same repository and have a custom build process where people can select features they want. \nAnyway I will follow the status here lets see how it goes. \n. Node contains is actually bug, more about it here:\nhttps://stackoverflow.com/questions/44140712/ie-acting-strange-with-node-contains-and-text-nodes. ",
    "alex6480": "Thanks. This works perfectly as intended.. ",
    "douweknook": "I ran into a similar problem but found it is possible to prioritize your own handlers by using the configuration rather than addBinding. Docs: https://quilljs.com/docs/modules/keyboard/#configuration\n\nSome bindings are essential to preventing dangerous browser defaults, such as the enter and backspace keys. You cannot remove these bindings to revert to native browser behaviors. However since bindings specified in the configuration will run before Quill\u2019s defaults, you can handle special cases and propagate to Quill\u2019s otherwise.\nAdding a binding with quill.keyboard.addBinding will not run before Quill\u2019s because the defaults bindings will have been added by that point.. \n",
    "SebastienCruz": "Hi,\nThank you for your answer. \nCould you show me where I can find the documentation to understand how to implement it ? I'm new to Quilljs, I managed to use it, to use autosave module, but I don't know exactly how to add functionality.\n. Hi,\nThank you for your answer. \nCould you show me where I can find the documentation to understand how to implement it ? I'm new to Quilljs, I managed to use it, to use autosave module, but I don't know exactly how to add functionality.\n. Hello Every body,\nI managed to code a little fork to edit image name and alt. It's not perfect, but it works pretty well for what I need.\nEventually, here's what I did : \n```\n//IMAGE ALT TEXT AND SRC EDIT\n            const ImageBlot = Quill.import('formats/image');\n            const Parchment = Quill.import('parchment');\n        // We test every time there is a click in the editor\n        quill.root.addEventListener('click', (ev) => {\n          let image = Parchment.find(ev.target);\n\n          // If it is a image, we show a form to edit name and alt. The name is a small part of the src, without path nor file extension.\n          if (image instanceof ImageBlot) {\n            quill.setSelection(image.offset(quill.scroll), 1, 'user');\n\n            var urlimage=image.domNode.getAttribute('src');\n            var imagepath=urlimage.split(\"/\").slice(0, -1).join(\"/\")+\"/\";\n            var filenameimage=urlimage.split('/').pop();\n            var extimage='.'+filenameimage.split('.').pop();\n            var nameimage=filenameimage.replace(extimage,'');\n            var altimage=image.domNode.getAttribute('alt');\n\n            if(altimage == null){\n             altimage='';\n            }\n\n            //We set the current values in the form according with the current selected image infos\n            $('#pageeditor_imageinfos input[name=imagename]').val(nameimage);\n            $('#pageeditor_imageinfos input[name=imagealt]').val(altimage);\n\n            //Maybe set the change handler everytime is not very optimized, but it works...\n            $('#pageeditor_imageinfos input[name=imagename]').change(function(){\n\n                // When the name of the image change, we call an ajax function to modify the name of the image server side.\n                // get the name entered by user\n                var newname = $('#pageeditor_imageinfos input[name=imagename]').val();\n                // copy this name in clipboard ( not mandatory ). The var copy to clipboard is used in case of failure. \n                $('#pageeditor_imageinfos input[name=imagename]').select();\n                var copytoclipboard='';\n                if(document.execCommand('copy'))\n                {\n                    copytoclipboard=' - name copied to clipboard. You can simply paste it if necessary.';\n                }\n\n                $.post(\"bleu/bleuoffice/ajax/changeimageurl.php\",{oldname:nameimage,newname:newname,imagepath:imagepath,extimage:extimage})\n                .done(function(data){\n                    if(data=='')\n                    {\n                        // We set the src attr with the new path\n                        image.domNode.setAttribute('src',imagepath+newname+extimage);\n                    }\n                    else{\n                        // to show it didn't work, I decided to cancel the modification in the input. That's why I copied the entered value in clipboard.\n                        alert(data+copytoclipboard);\n                        $('#pageeditor_imageinfos input[name=imagename]').val(nameimage);\n                    }\n                })\n                .fail(function(){\n                    console.log('Ajax Failure : Problem while updating the image URL.');\n                });\n\n            });\n\n            // for alt attr, we juste have to change it in the editor\n            $('#pageeditor_imageinfos input[name=imagealt]').change(function(){\n                image.domNode.setAttribute('alt',$('#pageeditor_imageinfos input[name=imagealt]').val());\n            });\n            $('#pageeditor_imageinfos').show();\n          }\n          else{\n            $('#pageeditor_imageinfos').hide(); \n          }\n        });\n\n```. Hello Every body,\nI managed to code a little fork to edit image name and alt. It's not perfect, but it works pretty well for what I need.\nEventually, here's what I did : \n```\n//IMAGE ALT TEXT AND SRC EDIT\n            const ImageBlot = Quill.import('formats/image');\n            const Parchment = Quill.import('parchment');\n        // We test every time there is a click in the editor\n        quill.root.addEventListener('click', (ev) => {\n          let image = Parchment.find(ev.target);\n\n          // If it is a image, we show a form to edit name and alt. The name is a small part of the src, without path nor file extension.\n          if (image instanceof ImageBlot) {\n            quill.setSelection(image.offset(quill.scroll), 1, 'user');\n\n            var urlimage=image.domNode.getAttribute('src');\n            var imagepath=urlimage.split(\"/\").slice(0, -1).join(\"/\")+\"/\";\n            var filenameimage=urlimage.split('/').pop();\n            var extimage='.'+filenameimage.split('.').pop();\n            var nameimage=filenameimage.replace(extimage,'');\n            var altimage=image.domNode.getAttribute('alt');\n\n            if(altimage == null){\n             altimage='';\n            }\n\n            //We set the current values in the form according with the current selected image infos\n            $('#pageeditor_imageinfos input[name=imagename]').val(nameimage);\n            $('#pageeditor_imageinfos input[name=imagealt]').val(altimage);\n\n            //Maybe set the change handler everytime is not very optimized, but it works...\n            $('#pageeditor_imageinfos input[name=imagename]').change(function(){\n\n                // When the name of the image change, we call an ajax function to modify the name of the image server side.\n                // get the name entered by user\n                var newname = $('#pageeditor_imageinfos input[name=imagename]').val();\n                // copy this name in clipboard ( not mandatory ). The var copy to clipboard is used in case of failure. \n                $('#pageeditor_imageinfos input[name=imagename]').select();\n                var copytoclipboard='';\n                if(document.execCommand('copy'))\n                {\n                    copytoclipboard=' - name copied to clipboard. You can simply paste it if necessary.';\n                }\n\n                $.post(\"bleu/bleuoffice/ajax/changeimageurl.php\",{oldname:nameimage,newname:newname,imagepath:imagepath,extimage:extimage})\n                .done(function(data){\n                    if(data=='')\n                    {\n                        // We set the src attr with the new path\n                        image.domNode.setAttribute('src',imagepath+newname+extimage);\n                    }\n                    else{\n                        // to show it didn't work, I decided to cancel the modification in the input. That's why I copied the entered value in clipboard.\n                        alert(data+copytoclipboard);\n                        $('#pageeditor_imageinfos input[name=imagename]').val(nameimage);\n                    }\n                })\n                .fail(function(){\n                    console.log('Ajax Failure : Problem while updating the image URL.');\n                });\n\n            });\n\n            // for alt attr, we juste have to change it in the editor\n            $('#pageeditor_imageinfos input[name=imagealt]').change(function(){\n                image.domNode.setAttribute('alt',$('#pageeditor_imageinfos input[name=imagealt]').val());\n            });\n            $('#pageeditor_imageinfos').show();\n          }\n          else{\n            $('#pageeditor_imageinfos').hide(); \n          }\n        });\n\n```. Actually I have a problem with this solution. \nWhen I type backspace in the input when image is selected, the image is deleted. \nI tried to bind key, but it didn't work. \nI tried to modify all the implementation by creating a module which extends Tooltip, I still have the problem.\nWhen I put a listener on my input keydown, I can neutralize this behavior, but only when I put a debug stop in it. If I wait a second or two, it doesn't delete the image...\n. Ok, I had a problem with the BlotFormatter Module ( fork of quill-image-resize-module ). The only way I found was to block the module when shifKey+click, and then open the alt and name editor.\nI can be more specific if you need.\nSeb. Ok, I had a problem with the BlotFormatter Module ( fork of quill-image-resize-module ). The only way I found was to block the module when shifKey+click, and then open the alt and name editor.\nI can be more specific if you need.\nSeb. Hi,\nI think handlers have to be declare in ToolbarOptions : \nhttps://quilljs.com/docs/modules/toolbar/#handlers\nYou should wrap between braces like : \nmodules: {\n    toolbar: { '#toolbar',\n      handlers: {\n        image: this,imageHandler\n      }\n    },\n  },. Hi,\nI think handlers have to be declare in ToolbarOptions : \nhttps://quilljs.com/docs/modules/toolbar/#handlers\nYou should wrap between braces like : \nmodules: {\n    toolbar: { '#toolbar',\n      handlers: {\n        image: this,imageHandler\n      }\n    },\n  },. ",
    "psren": "XSS prevention should happen when you output you're HTML.\nEscape your Output properly and you'll be fine.. ",
    "apastuhov": "I also did not find it anywhere. I would propose to use Milestones on the GitHub. If GitHub Issues can be used as a source of truth.. ",
    "hicham-elmansouri": "Hi \nI'm in the same situation. Waiting for table for a while. I'm moving to slatejs.. ",
    "jonathanlloyd": "The issue is in quill/themes/snow.js line 72-77:\nSnowTooltip.TEMPLATE = [\n  '<a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a>',\n  '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">',\n  '<a class=\"ql-action\"></a>',\n  '<a class=\"ql-remove\"></a>',\n].join('');. Fair, noopener is sufficient to mitigate tabnabbing. I've left in noreferrer for privacy reasons but can remove that too if you think it's too much.. ",
    "xinglianhou": "you can see the version of 2.0.0-dev.0. it change a lot from 1.x  to 2.0 dev\nthe base class 'Parchment' also change something,like add the 'AllowContainer' attr.\nIn my project,I just use the quill2.0dev and parchment2.0.0\nOne day,release 1.x to support table,then change the package.. ",
    "wuxiandiejia": "Maybe this demo can help you https://codepen.io/quill/pen/QxypzX\nTable module has a insertTable method.. Maybe this demo can help you https://codepen.io/quill/pen/QxypzX\nTable module has a insertTable method.. ",
    "mradke": "Sorry for taking so long to answer. My notifications were jeopardized.\nThanks for pointing out the obvious, I'll try to take another stab at this as soon as I find the time.. ",
    "philraj": "https://github.com/quilljs/quill/pull/2452\nLike this?. ",
    "japrogramer": "I have the same problem except neither solution works,\nmy problem is that i can only one type word or letter per line\n\nfirefox 65.0\n```\nimport React from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport './Editor.css';\nconst MyEditor =  (props) => {\nconst [Text, setText] = React.useState('');\nreturn (\n    \n  )\n}\nexport default MyEditor;\n```\n```\n.ql-editor {\nwhite-space: pre-line!important;\n}\n```\n```\n{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@material-ui/core\": \"^3.9.2\",\n    \"@material-ui/icons\": \"^3.0.2\",\n    \"@material-ui/styles\": \"^3.0.0-alpha.10\",\n    \"apollo-boost\": \"^0.1.23\",\n    \"apollo-link-ws\": \"^1.0.12\",\n    \"apollo-upload-client\": \"^10.0.0\",\n    \"graphql\": \"^14.1.0\",\n    \"react\": \"^16.8.1\",\n    \"react-apollo\": \"^2.4.1\",\n    \"react-cache\": \"^2.0.0-alpha.1\",\n    \"react-dom\": \"^16.8.1\",\n    \"react-ga\": \"^2.5.7\",\n    \"react-quill\": \"^1.3.3\",\n    \"react-scripts\": \"2.1.3\",\n    \"subscriptions-transport-ws\": \"^0.9.15\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie <= 11\",\n    \"not op_mini all\"\n  ]\n}\n```. I have the same problem except neither solution works,\nmy problem is that i can only one type word or letter per line\n\nfirefox 65.0\n```\nimport React from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport './Editor.css';\nconst MyEditor =  (props) => {\nconst [Text, setText] = React.useState('');\nreturn (\n    \n  )\n}\nexport default MyEditor;\n```\n```\n.ql-editor {\nwhite-space: pre-line!important;\n}\n```\n```\n{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@material-ui/core\": \"^3.9.2\",\n    \"@material-ui/icons\": \"^3.0.2\",\n    \"@material-ui/styles\": \"^3.0.0-alpha.10\",\n    \"apollo-boost\": \"^0.1.23\",\n    \"apollo-link-ws\": \"^1.0.12\",\n    \"apollo-upload-client\": \"^10.0.0\",\n    \"graphql\": \"^14.1.0\",\n    \"react\": \"^16.8.1\",\n    \"react-apollo\": \"^2.4.1\",\n    \"react-cache\": \"^2.0.0-alpha.1\",\n    \"react-dom\": \"^16.8.1\",\n    \"react-ga\": \"^2.5.7\",\n    \"react-quill\": \"^1.3.3\",\n    \"react-scripts\": \"2.1.3\",\n    \"subscriptions-transport-ws\": \"^0.9.15\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie <= 11\",\n    \"not op_mini all\"\n  ]\n}\n. so this is what console log shows when i try to add a space but after that space i cant add another and if i try to type a different char it replaces the space.\nthis  Editor.js:12\n. so this is what console log shows when i try to add a space but after that space i cant add another and if i try to type a different char it replaces the space.\nthis  Editor.js:12\n```. ",
    "JamesMcMahon": "I have a similar question up at https://github.com/quilljs/quill/issues/2435. ",
    "JustinHallquist": "@jhchen just want to get a bump on this\nany answer is a good answer and any help needed to get it pushed along would be welcome.\njust need to know the layout and work needed to close it up.. ",
    "minikomi": "In fact, the code formatting persist simply when removing the code block.\neg. \n1 Create code block \n2 Wait for formatting to kick in\n3 Select formatted code\n4 \"Turn off\" code formatting\nThe text retains the highlighting applied within the code block.. Heading example:\n\nPlain text example:\n\n. ",
    "ngcgolf11": "@benbro  thanks alot for your reply. i already asked question there also we want to integrate mathquill as a module into quilljs we tried but it is not working. ",
    "jcreek": "Is there a guide somewhere for how to extend the format? I am unable to find one and need to enable this functionality for an internal system so will have to enable it unfortunately. . ",
    "ile": "Note: it may also make sense to use the figure and figcaption tags. \nAlso: maybe it makes more sense to create a new alignment UI for images (positioned above the image when the image is selected).\nAlso: using CSS only for this suggestion doesn't really work since the text is aligned too, which wouldn't be is only the image is floated (and not the paragraph).. I made this and it seems to work to some extent: https://gist.github.com/ile/8a08c23b5ae0f331dee8ca062fdef40d. ",
    "mizuna13": "Hi,\ninsertText has 3 parameters. The last one is the Source. You should call the method using source: \"user\" and the ngModel will update:\nthis.editor.insertText(range.index, [image]src=${url}[image], 'user');. Hi,\ninsertText has 3 parameters. The last one is the Source. You should call the method using source: \"user\" and the ngModel will update:\nthis.editor.insertText(range.index, [image]src=${url}[image], 'user');. ",
    "cpu6660": "\nsetContents shouldn't have retain ops, only insert ops.\nContents should end with a newline { insert: '\\n' }\n\nwhether  delete instruction don't have retain ops before or not?. > setContents shouldn't have retain ops, only insert ops.\n\nContents should end with a newline { insert: '\\n' }\n\nwhether  delete instruction don't have retain ops before or not?. ",
    "bagelstudio": "ok, so for anyone interested i was able to get the current instance with the by looping through the instance numbers and checking if  hasfocus() is true. ok, so for anyone interested i was able to get the current instance with the by looping through the instance numbers and checking if  hasfocus() is true. ",
    "philippotto": "_buildParams takes a list of arguments and not an array which is why apply is used.\nWhich versions of IE don't support apply? If you have a look in the compiled quill.js, you will see that a lot of CoffeeScript features are implemented by using apply (for example something like super(eventName, args...)).\nSo, I don't think that this line could cause problems.\n. Ok, this is weird, since apply is also used in other places. I replaced it with manual passing of the individual parameters. Let's see what travis says, now.\n. ",
    "doanythingfordethklok": "Why couldn't emitters be passed as an initialization argument? Making this global is a recipe for leaks and also makes encapsulating the events for ShadowDOM very hard.  It seems we might be able to make emitter into an interface, then have a GlobalEventEmitter and a ShadownDOMEventEmitter where Global does the current global things and the ShadowDOMVersion is initialized with the ShadowRoot or editor root.\nI'd be down to prototype this, but maybe there is some other consideration.  I'd like to get perspective from yall before working on it.  What do you think?. For the case where someone uses this globally in plainJS, the destroy function needs to be called. \n\nUpdate docs to require users to call destroy\nSetup some kind of detach listener which calls destroy\n\nThis is probably worth a conversation.. With the new optional parameters, this is what the initialization in a webcomponent looks like (with simplification b/c of the HTMLElement lifecycle)\n``\nclass QuillEditor extends HTMLElement {\n  constructor() {\n    super();\n    const root = this.attachShadow({ mode: 'open' });\n    root.innerHTML =`;\nconst editor=  root.getElementById('#editor');\nconst quill = new Quill(editor, {\n  modules: { .. },\n  theme:  'snow',\n  document: root.ownerDocument,\n  selectionRoot: root\n});\n\n}\n}\n``.selectionRootcan be a Document or ShadowRoot. If aDocument` is passed when using a webcomponent, then it will never select any of the nodes inside ShadowDOM and all of the selection/intersection validation inside of Quill breaks.  \n. The above function should provide a reasonable fallback for use cases where \n\nit is assumed that there is one document \nShadyDOM is polyfilled in IE. \n",
    "psoots": "A possible solution for now:\njavascript\nthis.rootDocument = this.getDomRoot(this.root)\n```javascript\n  getDomRoot(ctx) {\n    if (ctx === document) {\n      return ctx\n    }\n    if (HTMLElement.prototype.attachShadow) {\n      if (ctx instanceof ShadowRoot) {\n    if (typeof ctx.getSelection === 'function') {\n      return ctx\n    }\n\n    return document\n  }\n}\n\nreturn this.getDomRoot(ctx.parentNode)\n\n}\n```\nA modified variation from here.. "
}